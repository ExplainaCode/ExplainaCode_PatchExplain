record_number,buggy_code,fixed_code,code_similarity
12001,"public void run(IAction action){
  store=getIPreferenceStore();
  Configuration config=getConfiguration(store);
  PropertiesLoader props=getPropertiesLoader(store.getString(Preference.lang));
  StructuredSelection structuredSelection=null;
  try {
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
    if (isNotSelected(structuredSelection)) {
      openWarningForRequired(props);
      return;
    }
 else     if (isSelectedSeveral(structuredSelection)) {
      openWarningForSelectOneOnly(props);
      return;
    }
    String resourcePathForTargetClassFile=getResourcePathForTargetClassFile(structuredSelection).replaceFirst(config.directoryPathOfTestSourceCode,config.directoryPathOfProductSourceCode);
    String resourcePathForTestCaseFile=resourcePathForTargetClassFile.replaceFirst(config.directoryPathOfProductSourceCode,config.directoryPathOfTestSourceCode).replaceFirst(""String_Node_Str"",StringValue.JUnit.TestClassNameSuffix + StringValue.FileExtension.JavaFile);
    String projectName=getProjectName(structuredSelection);
    String projectRootAbsolutePath=getWorkspaceRootAbsolutePath(getIWorkspaceRoot()) + StringValue.DirectorySeparator.General + projectName+ StringValue.DirectorySeparator.General;
    if (!resourcePathForTestCaseFile.matches(""String_Node_Str"" + RegExp.FileExtension.JavaFile)) {
      openWarningForSelectJavaFile(props);
      return;
    }
    String targetClassName=getClassNameFromResourcePathForTargetClassFile(resourcePathForTargetClassFile);
    String testCaseFilename=getTestClassNameFromClassName(targetClassName);
    String msg=props.get(Dialog.Common.confirmToChangeToJUnitVersion4) + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str"";
    if (testCaseFilename == null || !openConfirm(props,msg)) {
      return;
    }
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    ForceJUnitVersion4Command.main(new String[]{projectRootAbsolutePath + resourcePathForTargetClassFile});
    ThreadUtil.sleep(200);
    int retryCount=0;
    while (true) {
      try {
        if (!ResourceRefreshUtil.refreshLocal(null,projectName + StringValue.DirectorySeparator.General + resourcePathForTestCaseFile+ ""String_Node_Str"")) {
          openWarningForResourceRefreshError(props);
          System.err.println(""String_Node_Str"");
          return;
        }
        retryCount=0;
        ThreadUtil.sleep(1500);
      }
 catch (      Exception e) {
        retryCount++;
        if (retryCount > 10) {
          break;
        }
        e.printStackTrace();
        ThreadUtil.sleep(1500);
      }
      break;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void run(IAction action){
  store=getIPreferenceStore();
  Configuration config=getConfiguration(store,selection);
  PropertiesLoader props=getPropertiesLoader(store.getString(Preference.lang));
  StructuredSelection structuredSelection=null;
  try {
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
    if (isNotSelected(structuredSelection)) {
      openWarningForRequired(props);
      return;
    }
 else     if (isSelectedSeveral(structuredSelection)) {
      openWarningForSelectOneOnly(props);
      return;
    }
    String resourcePathForTargetClassFile=getResourcePathForTargetClassFile(structuredSelection).replaceFirst(config.directoryPathOfTestSourceCode,config.directoryPathOfProductSourceCode);
    String resourcePathForTestCaseFile=resourcePathForTargetClassFile.replaceFirst(config.directoryPathOfProductSourceCode,config.directoryPathOfTestSourceCode).replaceFirst(""String_Node_Str"",StringValue.JUnit.TestClassNameSuffix + StringValue.FileExtension.JavaFile);
    String projectName=getProjectName(structuredSelection);
    String projectRootAbsolutePath=getWorkspaceRootAbsolutePath(getIWorkspaceRoot()) + StringValue.DirectorySeparator.General + projectName+ StringValue.DirectorySeparator.General;
    if (!resourcePathForTestCaseFile.matches(""String_Node_Str"" + RegExp.FileExtension.JavaFile)) {
      openWarningForSelectJavaFile(props);
      return;
    }
    String targetClassName=getClassNameFromResourcePathForTargetClassFile(resourcePathForTargetClassFile);
    String testCaseFilename=getTestClassNameFromClassName(targetClassName);
    String msg=props.get(Dialog.Common.confirmToChangeToJUnitVersion4) + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str"";
    if (testCaseFilename == null || !openConfirm(props,msg)) {
      return;
    }
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    ForceJUnitVersion4Command.main(new String[]{projectRootAbsolutePath + resourcePathForTargetClassFile});
    ThreadUtil.sleep(200);
    int retryCount=0;
    while (true) {
      try {
        if (!ResourceRefreshUtil.refreshLocal(null,projectName + StringValue.DirectorySeparator.General + resourcePathForTestCaseFile+ ""String_Node_Str"")) {
          openWarningForResourceRefreshError(props);
          System.err.println(""String_Node_Str"");
          return;
        }
        retryCount=0;
        ThreadUtil.sleep(1500);
      }
 catch (      Exception e) {
        retryCount++;
        if (retryCount > 10) {
          break;
        }
        e.printStackTrace();
        ThreadUtil.sleep(1500);
      }
      break;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.998148833765272
12002,"public void run(IAction action){
  store=getIPreferenceStore();
  Configuration config=getConfiguration(store);
  PropertiesLoader props=getPropertiesLoader(config.language);
  String resourcePathForTestCaseFile=null;
  StructuredSelection structuredSelection=null;
  try {
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
    if (isNotSelected(structuredSelection)) {
      openWarningForRequired(props);
      return;
    }
 else     if (isSelectedSeveral(structuredSelection)) {
      openWarningForSelectOneOnly(props);
      return;
    }
    String projectName=getProjectName(structuredSelection);
    String resourcePathForTargetClassFile=getResourcePathForTargetClassFile(structuredSelection);
    String targetClassName=getClassNameFromResourcePathForTargetClassFile(resourcePathForTargetClassFile);
    if (targetClassName == null) {
      openWarningForSelectJavaFile(props);
      return;
    }
    resourcePathForTestCaseFile=resourcePathForTargetClassFile.replace(config.directoryPathOfProductSourceCode,config.directoryPathOfTestSourceCode).replace(StringValue.FileExtension.JavaFile,StringValue.JUnit.TestClassNameSuffix + StringValue.FileExtension.JavaFile);
    String projectRootAbsolutePath=getWorkspaceRootAbsolutePath(getIWorkspaceRoot()) + StringValue.DirectorySeparator.General + projectName+ StringValue.DirectorySeparator.General;
    String testCaseFileAbsolutePath=projectRootAbsolutePath + resourcePathForTestCaseFile;
    File testCaseIOFile=new File(testCaseFileAbsolutePath);
    if (!testCaseIOFile.exists()) {
      String testCaseFilename=getTestClassNameFromClassName(targetClassName);
      String msg=props.get(Dialog.Common.notExist) + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ StringValue.LineFeed+ props.get(Dialog.Common.confirmToCreateNewFile);
      if (testCaseFilename != null && openConfirm(props,msg)) {
        new CreateNewTestCaseAction().run(action,selection);
      }
      return;
    }
    int retryCount=0;
    IEditorPart editorPart=null;
    while (true) {
      try {
        IProject project=getIProject(projectName);
        IWorkbenchPage page=getIWorkbenchPage();
        IFile targetFile=getIFile(project,resourcePathForTargetClassFile);
        String targetFileEncoding=UniversalDetectorUtil.getDetectedEncoding(EclipseIFileUtil.getInputStreamFrom(targetFile));
        String targetSourceCodeString=IOUtil.readAsString(EclipseIFileUtil.getInputStreamFrom(targetFile),targetFileEncoding);
        ClassMeta targetClassMeta=new ClassMetaExtractor(config).extract(targetSourceCodeString);
        IFile testCaseFile=getIFile(project,resourcePathForTestCaseFile);
        String testCaseFileEncoding=UniversalDetectorUtil.getDetectedEncoding(EclipseIFileUtil.getInputStreamFrom(testCaseFile));
        String currentTestCodeString=IOUtil.readAsString(EclipseIFileUtil.getInputStreamFrom(testCaseFile),testCaseFileEncoding);
        String newTestCodeString=new DefaultTestCaseGenerator(config).initialize(targetClassMeta).getTestCaseSourceCodeWithLackingTestMethod(currentTestCodeString);
        OutputStreamWriter writer=null;
        FileOutputStream outputStream=null;
        try {
          outputStream=new FileOutputStream(testCaseIOFile);
          writer=new OutputStreamWriter(outputStream,getDetectedEncodingFrom(testCaseFile,config.outputFileEncoding));
          writer.write(newTestCodeString);
        }
  finally {
          IOUtil.close(writer);
          IOUtil.close(outputStream);
        }
        if (!ResourceRefreshUtil.refreshLocal(null,projectName + StringValue.DirectorySeparator.General + resourcePathForTestCaseFile+ ""String_Node_Str"")) {
          openWarningForResourceRefreshError(props);
          System.err.println(""String_Node_Str"");
          return;
        }
        retryCount=0;
        ThreadUtil.sleep(1500);
        while (true) {
          try {
            editorPart=getIEditorPart(page,testCaseFile);
            if (editorPart == null) {
              throw new NullPointerException();
            }
            break;
          }
 catch (          Exception e) {
            retryCount++;
            if (retryCount > 3) {
              break;
            }
            ThreadUtil.sleep(1500);
          }
        }
        editorPart.setFocus();
      }
 catch (      Exception e) {
        retryCount++;
        if (retryCount > 10) {
          break;
        }
        e.printStackTrace();
        ThreadUtil.sleep(1500);
      }
      break;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void run(IAction action){
  store=getIPreferenceStore();
  Configuration config=getConfiguration(store,selection);
  PropertiesLoader props=getPropertiesLoader(config.language);
  String resourcePathForTestCaseFile=null;
  StructuredSelection structuredSelection=null;
  try {
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
    if (isNotSelected(structuredSelection)) {
      openWarningForRequired(props);
      return;
    }
 else     if (isSelectedSeveral(structuredSelection)) {
      openWarningForSelectOneOnly(props);
      return;
    }
    String projectName=getProjectName(structuredSelection);
    String resourcePathForTargetClassFile=getResourcePathForTargetClassFile(structuredSelection);
    String targetClassName=getClassNameFromResourcePathForTargetClassFile(resourcePathForTargetClassFile);
    if (targetClassName == null) {
      openWarningForSelectJavaFile(props);
      return;
    }
    resourcePathForTestCaseFile=resourcePathForTargetClassFile.replace(config.directoryPathOfProductSourceCode,config.directoryPathOfTestSourceCode).replace(StringValue.FileExtension.JavaFile,StringValue.JUnit.TestClassNameSuffix + StringValue.FileExtension.JavaFile);
    String projectRootAbsolutePath=getWorkspaceRootAbsolutePath(getIWorkspaceRoot()) + StringValue.DirectorySeparator.General + projectName+ StringValue.DirectorySeparator.General;
    String testCaseFileAbsolutePath=projectRootAbsolutePath + resourcePathForTestCaseFile;
    File testCaseIOFile=new File(testCaseFileAbsolutePath);
    if (!testCaseIOFile.exists()) {
      String testCaseFilename=getTestClassNameFromClassName(targetClassName);
      String msg=props.get(Dialog.Common.notExist) + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ StringValue.LineFeed+ props.get(Dialog.Common.confirmToCreateNewFile);
      if (testCaseFilename != null && openConfirm(props,msg)) {
        new CreateNewTestCaseAction().run(action,selection);
      }
      return;
    }
    int retryCount=0;
    IEditorPart editorPart=null;
    while (true) {
      try {
        IProject project=getIProject(projectName);
        IWorkbenchPage page=getIWorkbenchPage();
        IFile targetFile=getIFile(project,resourcePathForTargetClassFile);
        String targetFileEncoding=UniversalDetectorUtil.getDetectedEncoding(EclipseIFileUtil.getInputStreamFrom(targetFile));
        String targetSourceCodeString=IOUtil.readAsString(EclipseIFileUtil.getInputStreamFrom(targetFile),targetFileEncoding);
        ClassMeta targetClassMeta=new ClassMetaExtractor(config).extract(targetSourceCodeString);
        IFile testCaseFile=getIFile(project,resourcePathForTestCaseFile);
        String testCaseFileEncoding=UniversalDetectorUtil.getDetectedEncoding(EclipseIFileUtil.getInputStreamFrom(testCaseFile));
        String currentTestCodeString=IOUtil.readAsString(EclipseIFileUtil.getInputStreamFrom(testCaseFile),testCaseFileEncoding);
        String newTestCodeString=new DefaultTestCaseGenerator(config).initialize(targetClassMeta).getTestCaseSourceCodeWithLackingTestMethod(currentTestCodeString);
        OutputStreamWriter writer=null;
        FileOutputStream outputStream=null;
        try {
          outputStream=new FileOutputStream(testCaseIOFile);
          writer=new OutputStreamWriter(outputStream,getDetectedEncodingFrom(testCaseFile,config.outputFileEncoding));
          writer.write(newTestCodeString);
        }
  finally {
          IOUtil.close(writer);
          IOUtil.close(outputStream);
        }
        if (!ResourceRefreshUtil.refreshLocal(null,projectName + StringValue.DirectorySeparator.General + resourcePathForTestCaseFile+ ""String_Node_Str"")) {
          openWarningForResourceRefreshError(props);
          System.err.println(""String_Node_Str"");
          return;
        }
        retryCount=0;
        ThreadUtil.sleep(1500);
        while (true) {
          try {
            editorPart=getIEditorPart(page,testCaseFile);
            if (editorPart == null) {
              throw new NullPointerException();
            }
            break;
          }
 catch (          Exception e) {
            retryCount++;
            if (retryCount > 3) {
              break;
            }
            ThreadUtil.sleep(1500);
          }
        }
        editorPart.setFocus();
      }
 catch (      Exception e) {
        retryCount++;
        if (retryCount > 10) {
          break;
        }
        e.printStackTrace();
        ThreadUtil.sleep(1500);
      }
      break;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.998915871639202
12003,"public void run(IAction action){
  store=getIPreferenceStore();
  Configuration config=getConfiguration(store);
  PropertiesLoader props=getPropertiesLoader(store.getString(Preference.lang));
  StructuredSelection structuredSelection=null;
  try {
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
    if (isNotSelected(structuredSelection)) {
      openWarningForRequired(props);
      return;
    }
 else     if (isSelectedSeveral(structuredSelection)) {
      openWarningForSelectOneOnly(props);
      return;
    }
    String resourcePathForTestClassFile=getResourcePathForTargetClassFile(structuredSelection);
    String projectName=getProjectName(structuredSelection);
    String projectRootPath=getWorkspaceRootAbsolutePath(getIWorkspaceRoot()) + StringValue.DirectorySeparator.General + projectName+ StringValue.DirectorySeparator.General;
    if (!resourcePathForTestClassFile.matches(""String_Node_Str"" + RegExp.FileExtension.JavaFile)) {
      openWarningForSelectJavaFile(props);
      return;
    }
    String resourcePathForTargetClassFile=resourcePathForTestClassFile.replaceFirst(config.directoryPathOfTestSourceCode,config.directoryPathOfProductSourceCode);
    File openTargetIOFile=new File(projectRootPath + resourcePathForTargetClassFile);
    if (!openTargetIOFile.exists()) {
      return;
    }
    int retryCount=0;
    IEditorPart editorPart=null;
    while (true) {
      try {
        IProject project=getIProject(projectName);
        IWorkbenchPage page=getIWorkbenchPage();
        IFile targetClassFile=getIFile(project,resourcePathForTargetClassFile);
        editorPart=getIEditorPart(page,targetClassFile);
        editorPart.setFocus();
      }
 catch (      Exception e) {
        e.printStackTrace();
        retryCount++;
        if (retryCount > 10) {
          break;
        }
        ThreadUtil.sleep(1500);
      }
      break;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void run(IAction action){
  store=getIPreferenceStore();
  Configuration config=getConfiguration(store,selection);
  PropertiesLoader props=getPropertiesLoader(store.getString(Preference.lang));
  StructuredSelection structuredSelection=null;
  try {
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
    if (isNotSelected(structuredSelection)) {
      openWarningForRequired(props);
      return;
    }
 else     if (isSelectedSeveral(structuredSelection)) {
      openWarningForSelectOneOnly(props);
      return;
    }
    String resourcePathForTestClassFile=getResourcePathForTargetClassFile(structuredSelection);
    String projectName=getProjectName(structuredSelection);
    String projectRootPath=getWorkspaceRootAbsolutePath(getIWorkspaceRoot()) + StringValue.DirectorySeparator.General + projectName+ StringValue.DirectorySeparator.General;
    if (!resourcePathForTestClassFile.matches(""String_Node_Str"" + RegExp.FileExtension.JavaFile)) {
      openWarningForSelectJavaFile(props);
      return;
    }
    String resourcePathForTargetClassFile=resourcePathForTestClassFile.replaceFirst(config.directoryPathOfTestSourceCode,config.directoryPathOfProductSourceCode);
    File openTargetIOFile=new File(projectRootPath + resourcePathForTargetClassFile);
    if (!openTargetIOFile.exists()) {
      return;
    }
    int retryCount=0;
    IEditorPart editorPart=null;
    while (true) {
      try {
        IProject project=getIProject(projectName);
        IWorkbenchPage page=getIWorkbenchPage();
        IFile targetClassFile=getIFile(project,resourcePathForTargetClassFile);
        editorPart=getIEditorPart(page,targetClassFile);
        editorPart.setFocus();
      }
 catch (      Exception e) {
        e.printStackTrace();
        retryCount++;
        if (retryCount > 10) {
          break;
        }
        ThreadUtil.sleep(1500);
      }
      break;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9975087194818136
12004,"static String getInstantiationSourceCode(Configuration config,TestMethodMeta testMethodMeta){
  Assertion.mustNotBeNull(config,""String_Node_Str"");
  Assertion.mustNotBeNull(testMethodMeta,""String_Node_Str"");
  if (config.isExtensionEnabled && config.extConfiguration.extInstantiations != null) {
    for (    ExtInstantiation ins : config.extConfiguration.extInstantiations) {
      if (isCanonicalClassNameUsed(ins.canonicalClassName,testMethodMeta.classMeta.name,testMethodMeta.classMeta)) {
        for (        String newImport : ins.importList) {
          testMethodMeta.classMeta.importedList.add(newImport);
        }
        StringBuilder buf=new StringBuilder();
        if (ins.preAssignCode != null && ins.preAssignCode.trim().length() > 0) {
          appendExtensionSourceCode(buf,ins.preAssignCode);
        }
        buf.append(StringValue.Tab);
        buf.append(StringValue.Tab);
        buf.append(testMethodMeta.classMeta.name);
        buf.append(""String_Node_Str"");
        buf.append(ins.assignCode.trim());
        buf.append(StringValue.CarriageReturn);
        buf.append(StringValue.LineFeed);
        if (ins.postAssignCode != null && ins.postAssignCode.trim().length() > 0) {
          appendExtensionPostAssignSourceCode(buf,ins.postAssignCode,""String_Node_Str"",""String_Node_Str"");
        }
        return buf.toString();
      }
    }
  }
  return new DefaultConstructorGenerator().getFirstInstantiationSourceCode(testMethodMeta.classMeta);
}","static String getInstantiationSourceCode(Configuration config,TestMethodMeta testMethodMeta){
  Assertion.mustNotBeNull(config,""String_Node_Str"");
  Assertion.mustNotBeNull(testMethodMeta,""String_Node_Str"");
  if (config.isExtensionEnabled && config.extConfiguration.extInstantiations != null) {
    for (    ExtInstantiation ins : config.extConfiguration.extInstantiations) {
      if (isCanonicalClassNameUsed(ins.canonicalClassName,testMethodMeta.classMeta.name,testMethodMeta.classMeta)) {
        for (        String newImport : ins.importList) {
          testMethodMeta.classMeta.importedList.add(newImport);
        }
        StringBuilder buf=new StringBuilder();
        if (ins.preAssignCode != null && ins.preAssignCode.trim().length() > 0) {
          appendExtensionSourceCode(buf,ins.preAssignCode);
        }
        buf.append(StringValue.Tab);
        buf.append(StringValue.Tab);
        buf.append(testMethodMeta.classMeta.name);
        buf.append(""String_Node_Str"");
        buf.append(ins.assignCode.trim());
        buf.append(StringValue.CarriageReturn);
        buf.append(StringValue.LineFeed);
        if (ins.postAssignCode != null && ins.postAssignCode.trim().length() > 0) {
          appendExtensionPostAssignSourceCode(buf,ins.postAssignCode,new String[]{""String_Node_Str""},""String_Node_Str"");
        }
        return buf.toString();
      }
    }
  }
  return new DefaultConstructorGenerator().getFirstInstantiationSourceCode(testMethodMeta.classMeta);
}",0.99527665317139
12005,"static void appendExtensionPostAssignSourceCode(StringBuilder buf,String code,String from,String to){
  String[] separatedListBySemicolon=code.split(StringValue.Semicolon);
  for (  String separatedBySemicolon : separatedListBySemicolon) {
    if (separatedBySemicolon != null && separatedBySemicolon.trim().length() > 0) {
      separatedBySemicolon=separatedBySemicolon.trim().replaceAll(StringValue.CarriageReturn,""String_Node_Str"");
      String[] lines=separatedBySemicolon.split(StringValue.LineFeed);
      for (      String line : lines) {
        if (line != null && line.trim().length() > 0) {
          appendTabs(buf,2);
          buf.append(line.trim().replaceAll(from,to));
          if (!line.endsWith(""String_Node_Str"") && !line.endsWith(""String_Node_Str"")) {
            buf.append(StringValue.Semicolon);
          }
          appendCRLF(buf);
        }
      }
    }
  }
}","static void appendExtensionPostAssignSourceCode(StringBuilder buf,String code,String[] fromList,String to){
  Assertion.mustNotBeNull(code,""String_Node_Str"");
  Assertion.mustNotBeNull(fromList,""String_Node_Str"");
  Assertion.mustNotBeNull(to,""String_Node_Str"");
  String[] separatedListBySemicolon=code.split(StringValue.Semicolon);
  for (  String separatedBySemicolon : separatedListBySemicolon) {
    if (separatedBySemicolon != null && separatedBySemicolon.trim().length() > 0) {
      separatedBySemicolon=separatedBySemicolon.trim().replaceAll(StringValue.CarriageReturn,""String_Node_Str"");
      String[] lines=separatedBySemicolon.split(StringValue.LineFeed);
      for (      String line : lines) {
        if (line != null && line.trim().length() > 0) {
          appendTabs(buf,2);
          line=line.trim();
          for (          String from : fromList) {
            line=line.replaceAll(from,to);
          }
          buf.append(line);
          if (!line.endsWith(""String_Node_Str"") && !line.endsWith(""String_Node_Str"")) {
            buf.append(StringValue.Semicolon);
          }
          appendCRLF(buf);
        }
      }
    }
  }
}",0.817560975609756
12006,"static void appendExtensionSourceCode(StringBuilder buf,String code){
  String[] separatedListBySemicolon=code.split(StringValue.Semicolon);
  for (  String separatedBySemicolon : separatedListBySemicolon) {
    if (separatedBySemicolon != null && separatedBySemicolon.trim().length() > 0) {
      separatedBySemicolon=separatedBySemicolon.trim().replaceAll(StringValue.CarriageReturn,""String_Node_Str"");
      String[] lines=separatedBySemicolon.split(StringValue.LineFeed);
      for (      String line : lines) {
        if (line != null && line.trim().length() > 0) {
          appendTabs(buf,2);
          buf.append(line.trim());
          if (!line.endsWith(""String_Node_Str"") && !line.endsWith(""String_Node_Str"")) {
            buf.append(StringValue.Semicolon);
          }
          appendCRLF(buf);
        }
      }
    }
  }
}","static void appendExtensionSourceCode(StringBuilder buf,String code){
  Assertion.mustNotBeNull(code,""String_Node_Str"");
  String[] separatedListBySemicolon=code.split(StringValue.Semicolon);
  for (  String separatedBySemicolon : separatedListBySemicolon) {
    if (separatedBySemicolon != null && separatedBySemicolon.trim().length() > 0) {
      separatedBySemicolon=separatedBySemicolon.trim().replaceAll(StringValue.CarriageReturn,""String_Node_Str"");
      String[] lines=separatedBySemicolon.split(StringValue.LineFeed);
      for (      String line : lines) {
        if (line != null && line.trim().length() > 0) {
          appendTabs(buf,2);
          buf.append(line.trim());
          if (!line.endsWith(""String_Node_Str"") && !line.endsWith(""String_Node_Str"")) {
            buf.append(StringValue.Semicolon);
          }
          appendCRLF(buf);
        }
      }
    }
  }
}",0.9705031810294968
12007,"void appendPreparingArgs(StringBuilder buf,TestMethodMeta testMethodMeta){
  int argsLen=testMethodMeta.methodMeta.argTypes.size();
  if (argsLen > 0) {
    for (int i=0; i < argsLen; i++) {
      ArgTypeMeta argTypeMeta=testMethodMeta.methodMeta.argTypes.get(i);
      String typeName=argTypeMeta.name;
      String argName=testMethodMeta.methodMeta.argNames.get(i);
      ExtArgPattern extArgPattern=testMethodMeta.extArgPattern;
      boolean isExtArgPatternTarget=false;
      if (extArgPattern != null && isCanonicalClassNameUsed(extArgPattern.extArg.canonicalClassName,argTypeMeta.name,testMethodMeta.classMeta)) {
        isExtArgPatternTarget=true;
      }
      ExtInstantiation extInstantiation=null;
      if (config.isExtensionEnabled && config.extConfiguration.extInstantiations != null) {
        for (        ExtInstantiation ins : config.extConfiguration.extInstantiations) {
          if (isCanonicalClassNameUsed(ins.canonicalClassName,argTypeMeta.name,testMethodMeta.classMeta)) {
            extInstantiation=ins;
            for (            String newImport : ins.importList) {
              testMethodMeta.classMeta.importedList.add(newImport);
            }
            break;
          }
        }
      }
      if (isExtArgPatternTarget && extArgPattern.preAssignCode != null) {
        appendExtensionSourceCode(buf,extArgPattern.preAssignCode);
      }
 else       if (extInstantiation != null) {
        if (extInstantiation.preAssignCode != null && extInstantiation.preAssignCode.trim().length() > 0) {
          appendExtensionSourceCode(buf,extInstantiation.preAssignCode);
        }
      }
      appendTabs(buf,2);
      if (config.mockObjectFramework == MockObjectFramework.JMock2) {
        buf.append(""String_Node_Str"");
      }
      buf.append(typeName);
      buf.append(""String_Node_Str"");
      buf.append(argName);
      buf.append(""String_Node_Str"");
      if (isExtArgPatternTarget) {
        buf.append(extArgPattern.assignCode.trim());
        if (!extArgPattern.assignCode.endsWith(StringValue.Semicolon)) {
          buf.append(StringValue.Semicolon);
        }
      }
 else {
        buf.append(getArgValue(testMethodMeta,argTypeMeta,argName));
        buf.append(StringValue.Semicolon);
      }
      appendCRLF(buf);
      if (isExtArgPatternTarget && extArgPattern.postAssignCode != null) {
        appendExtensionPostAssignSourceCode(buf,extArgPattern.postAssignCode,""String_Node_Str"",argName);
      }
 else       if (extInstantiation != null) {
        if (extInstantiation.postAssignCode != null && extInstantiation.postAssignCode.trim().length() > 0) {
          appendExtensionPostAssignSourceCode(buf,extInstantiation.postAssignCode,""String_Node_Str"",argName);
        }
      }
    }
  }
}","void appendPreparingArgs(StringBuilder buf,TestMethodMeta testMethodMeta){
  int argsLen=testMethodMeta.methodMeta.argTypes.size();
  if (argsLen > 0) {
    for (int i=0; i < argsLen; i++) {
      ArgTypeMeta argTypeMeta=testMethodMeta.methodMeta.argTypes.get(i);
      String typeName=argTypeMeta.name;
      String argName=testMethodMeta.methodMeta.argNames.get(i);
      ExtArgPattern extArgPattern=testMethodMeta.extArgPattern;
      boolean isExtArgPatternTarget=false;
      if (extArgPattern != null && isCanonicalClassNameUsed(extArgPattern.extArg.canonicalClassName,argTypeMeta.name,testMethodMeta.classMeta)) {
        isExtArgPatternTarget=true;
      }
      ExtInstantiation extInstantiation=null;
      if (config.isExtensionEnabled && config.extConfiguration.extInstantiations != null) {
        for (        ExtInstantiation ins : config.extConfiguration.extInstantiations) {
          if (isCanonicalClassNameUsed(ins.canonicalClassName,argTypeMeta.name,testMethodMeta.classMeta)) {
            extInstantiation=ins;
            for (            String newImport : ins.importList) {
              testMethodMeta.classMeta.importedList.add(newImport);
            }
            break;
          }
        }
      }
      if (isExtArgPatternTarget) {
        if (extArgPattern.preAssignCode != null) {
          appendExtensionSourceCode(buf,extArgPattern.preAssignCode);
        }
      }
 else {
        if (extInstantiation != null && extInstantiation.preAssignCode != null && extInstantiation.preAssignCode.trim().length() > 0) {
          appendExtensionSourceCode(buf,extInstantiation.preAssignCode);
        }
      }
      appendTabs(buf,2);
      if (config.mockObjectFramework == MockObjectFramework.JMock2) {
        buf.append(""String_Node_Str"");
      }
      buf.append(typeName);
      buf.append(""String_Node_Str"");
      buf.append(argName);
      buf.append(""String_Node_Str"");
      if (isExtArgPatternTarget) {
        buf.append(extArgPattern.assignCode.trim());
        if (!extArgPattern.assignCode.endsWith(StringValue.Semicolon)) {
          buf.append(StringValue.Semicolon);
        }
      }
 else {
        buf.append(getArgValue(testMethodMeta,argTypeMeta,argName));
        buf.append(StringValue.Semicolon);
      }
      appendCRLF(buf);
      if (isExtArgPatternTarget) {
        if (extArgPattern.postAssignCode != null) {
          appendExtensionPostAssignSourceCode(buf,extArgPattern.postAssignCode,new String[]{""String_Node_Str"",""String_Node_Str""},argName);
        }
      }
 else {
        if (extInstantiation != null && extInstantiation.postAssignCode != null && extInstantiation.postAssignCode.trim().length() > 0) {
          appendExtensionPostAssignSourceCode(buf,extInstantiation.postAssignCode,new String[]{""String_Node_Str"",""String_Node_Str""},argName);
        }
      }
    }
  }
}",0.8174347981421937
12008,"@Override public void characters(char[] ch,int start,int length) throws SAXException {
  tempValue=new String(ch,start,length);
}","@Override public void characters(char[] ch,int start,int length) throws SAXException {
  if (tempValue == null) {
    tempValue=new StringBuilder();
  }
  tempValue.append(new String(ch,start,length));
}",0.6807228915662651
12009,"@Override public void endElement(String uri,String localName,String name) throws SAXException {
  Assertion.mustNotBeNull(config,""String_Node_Str"");
  Assertion.mustNotBeEmpty(name,""String_Node_Str"");
  if (name.equals(""String_Node_Str"")) {
    config.extInstantiations.add(currentInstantiation);
    currentInstantiation=null;
  }
 else   if (name.equals(""String_Node_Str"")) {
    config.extArgs.add(currentArg);
    currentArg=null;
  }
 else   if (name.equals(""String_Node_Str"")) {
    currentArg.patterns.add(currentArgPattern);
    currentArgPattern=null;
  }
 else   if (name.equals(""String_Node_Str"")) {
    config.extReturns.add(currentReturn);
    currentReturn=null;
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (currentInstantiation != null) {
      currentInstantiation.importList.add(tempValue);
    }
 else     if (currentArg != null) {
      currentArg.importList.add(tempValue);
    }
 else     if (currentReturn != null) {
      currentReturn.importList.add(tempValue);
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (currentInstantiation != null) {
      currentInstantiation.preAssignCode=tempValue;
    }
 else     if (currentArg != null) {
      currentArgPattern.preAssignCode=tempValue;
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (currentInstantiation != null) {
      currentInstantiation.assignCode=tempValue;
    }
 else     if (currentArg != null) {
      currentArgPattern.assignCode=tempValue;
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (currentInstantiation != null) {
      currentInstantiation.postAssignCode=tempValue;
    }
 else     if (currentArg != null) {
      currentArgPattern.postAssignCode=tempValue;
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    currentReturn.asserts.add(tempValue);
  }
}","@Override public void endElement(String uri,String localName,String name) throws SAXException {
  Assertion.mustNotBeNull(config,""String_Node_Str"");
  Assertion.mustNotBeEmpty(name,""String_Node_Str"");
  if (name.equals(""String_Node_Str"")) {
    config.extInstantiations.add(currentInstantiation);
    currentInstantiation=null;
  }
 else   if (name.equals(""String_Node_Str"")) {
    config.extArgs.add(currentArg);
    currentArg=null;
  }
 else   if (name.equals(""String_Node_Str"")) {
    currentArg.patterns.add(currentArgPattern);
    currentArgPattern=null;
  }
 else   if (name.equals(""String_Node_Str"")) {
    config.extReturns.add(currentReturn);
    currentReturn=null;
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (currentInstantiation != null) {
      currentInstantiation.importList.add(tempValue.toString());
      tempValue=new StringBuilder();
    }
 else     if (currentArg != null) {
      currentArg.importList.add(tempValue.toString());
      tempValue=new StringBuilder();
    }
 else     if (currentReturn != null) {
      currentReturn.importList.add(tempValue.toString());
      tempValue=new StringBuilder();
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (currentInstantiation != null) {
      currentInstantiation.preAssignCode=tempValue.toString();
      tempValue=new StringBuilder();
    }
 else     if (currentArg != null) {
      currentArgPattern.preAssignCode=tempValue.toString();
      tempValue=new StringBuilder();
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (currentInstantiation != null) {
      currentInstantiation.assignCode=tempValue.toString();
      tempValue=new StringBuilder();
    }
 else     if (currentArg != null) {
      currentArgPattern.assignCode=tempValue.toString();
      tempValue=new StringBuilder();
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (currentInstantiation != null) {
      currentInstantiation.postAssignCode=tempValue.toString();
      tempValue=new StringBuilder();
    }
 else     if (currentArg != null) {
      currentArgPattern.postAssignCode=tempValue.toString();
      tempValue=new StringBuilder();
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    currentReturn.asserts.add(tempValue.toString());
    tempValue=new StringBuilder();
  }
}",0.8836416747809153
12010,"void appendPreparingArgs(StringBuilder buf,TestMethodMeta testMethodMeta){
  int argsLen=testMethodMeta.methodMeta.argTypes.size();
  if (argsLen > 0) {
    for (int i=0; i < argsLen; i++) {
      ArgTypeMeta argTypeMeta=testMethodMeta.methodMeta.argTypes.get(i);
      String typeName=argTypeMeta.name;
      String argName=testMethodMeta.methodMeta.argNames.get(i);
      ExtArgPattern extArgPattern=testMethodMeta.extArgPattern;
      boolean isExtArgPatternTarget=false;
      if (extArgPattern != null && isCanonicalClassNameUsed(extArgPattern.extArg.canonicalClassName,argTypeMeta.name,testMethodMeta.classMeta)) {
        isExtArgPatternTarget=true;
      }
      ExtInstantiation extInstantiation=null;
      if (config.isExtensionEnabled && config.extConfiguration.extInstantiations != null) {
        for (        ExtInstantiation ins : config.extConfiguration.extInstantiations) {
          if (isCanonicalClassNameUsed(ins.canonicalClassName,argTypeMeta.name,testMethodMeta.classMeta)) {
            extInstantiation=ins;
            for (            String newImport : ins.importList) {
              testMethodMeta.classMeta.importedList.add(newImport);
            }
            break;
          }
        }
      }
      if (isExtArgPatternTarget && extArgPattern.preAssignCode != null) {
        String[] lines=extArgPattern.preAssignCode.split(StringValue.Semicolon);
        for (        String line : lines) {
          if (line != null && line.trim().length() > 0) {
            appendTabs(buf,2);
            buf.append(line);
            buf.append(StringValue.Semicolon);
            appendCRLF(buf);
          }
        }
      }
 else       if (extInstantiation != null) {
        if (extInstantiation.preAssignCode != null && extInstantiation.preAssignCode.trim().length() > 0) {
          String[] lines=extInstantiation.preAssignCode.split(StringValue.Semicolon);
          for (          String line : lines) {
            if (line != null && line.trim().length() > 0) {
              appendTabs(buf,2);
              buf.append(line);
              buf.append(StringValue.Semicolon);
              appendCRLF(buf);
            }
          }
        }
      }
      appendTabs(buf,2);
      if (config.mockObjectFramework == MockObjectFramework.JMock2) {
        buf.append(""String_Node_Str"");
      }
      buf.append(typeName);
      buf.append(""String_Node_Str"");
      buf.append(argName);
      buf.append(""String_Node_Str"");
      if (isExtArgPatternTarget) {
        buf.append(extArgPattern.assignCode.trim());
        if (!extArgPattern.assignCode.endsWith(StringValue.Semicolon)) {
          buf.append(StringValue.Semicolon);
        }
      }
 else {
        buf.append(getArgValue(testMethodMeta,argTypeMeta,argName));
        buf.append(StringValue.Semicolon);
      }
      appendCRLF(buf);
      if (isExtArgPatternTarget && extArgPattern.postAssignCode != null) {
        String[] lines=extArgPattern.postAssignCode.replaceAll(""String_Node_Str"",argName).split(StringValue.Semicolon);
        for (        String line : lines) {
          if (line != null && line.trim().length() > 0) {
            appendTabs(buf,2);
            buf.append(line);
            buf.append(StringValue.Semicolon);
            appendCRLF(buf);
          }
        }
      }
 else       if (extInstantiation != null) {
        if (extInstantiation.postAssignCode != null && extInstantiation.postAssignCode.trim().length() > 0) {
          String[] lines=extInstantiation.postAssignCode.split(StringValue.Semicolon);
          for (          String line : lines) {
            if (line != null && line.trim().length() > 0) {
              appendTabs(buf,2);
              buf.append(line);
              buf.append(StringValue.Semicolon);
              appendCRLF(buf);
            }
          }
        }
      }
    }
  }
}","void appendPreparingArgs(StringBuilder buf,TestMethodMeta testMethodMeta){
  int argsLen=testMethodMeta.methodMeta.argTypes.size();
  if (argsLen > 0) {
    for (int i=0; i < argsLen; i++) {
      ArgTypeMeta argTypeMeta=testMethodMeta.methodMeta.argTypes.get(i);
      String typeName=argTypeMeta.name;
      String argName=testMethodMeta.methodMeta.argNames.get(i);
      ExtArgPattern extArgPattern=testMethodMeta.extArgPattern;
      boolean isExtArgPatternTarget=false;
      if (extArgPattern != null && isCanonicalClassNameUsed(extArgPattern.extArg.canonicalClassName,argTypeMeta.name,testMethodMeta.classMeta)) {
        isExtArgPatternTarget=true;
      }
      ExtInstantiation extInstantiation=null;
      if (config.isExtensionEnabled && config.extConfiguration.extInstantiations != null) {
        for (        ExtInstantiation ins : config.extConfiguration.extInstantiations) {
          if (isCanonicalClassNameUsed(ins.canonicalClassName,argTypeMeta.name,testMethodMeta.classMeta)) {
            extInstantiation=ins;
            for (            String newImport : ins.importList) {
              testMethodMeta.classMeta.importedList.add(newImport);
            }
            break;
          }
        }
      }
      if (isExtArgPatternTarget && extArgPattern.preAssignCode != null) {
        String[] lines=extArgPattern.preAssignCode.split(StringValue.Semicolon);
        for (        String line : lines) {
          if (line != null && line.trim().length() > 0) {
            appendTabs(buf,2);
            line=line.trim().replaceAll(StringValue.CarriageReturn,""String_Node_Str"").replaceAll(StringValue.LineFeed,""String_Node_Str"");
            buf.append(line);
            buf.append(StringValue.Semicolon);
            appendCRLF(buf);
          }
        }
      }
 else       if (extInstantiation != null) {
        if (extInstantiation.preAssignCode != null && extInstantiation.preAssignCode.trim().length() > 0) {
          String[] lines=extInstantiation.preAssignCode.split(StringValue.Semicolon);
          for (          String line : lines) {
            if (line != null && line.trim().length() > 0) {
              appendTabs(buf,2);
              line=line.trim().replaceAll(StringValue.CarriageReturn,""String_Node_Str"").replaceAll(StringValue.LineFeed,""String_Node_Str"");
              buf.append(line);
              buf.append(StringValue.Semicolon);
              appendCRLF(buf);
            }
          }
        }
      }
      appendTabs(buf,2);
      if (config.mockObjectFramework == MockObjectFramework.JMock2) {
        buf.append(""String_Node_Str"");
      }
      buf.append(typeName);
      buf.append(""String_Node_Str"");
      buf.append(argName);
      buf.append(""String_Node_Str"");
      if (isExtArgPatternTarget) {
        buf.append(extArgPattern.assignCode.trim());
        if (!extArgPattern.assignCode.endsWith(StringValue.Semicolon)) {
          buf.append(StringValue.Semicolon);
        }
      }
 else {
        buf.append(getArgValue(testMethodMeta,argTypeMeta,argName));
        buf.append(StringValue.Semicolon);
      }
      appendCRLF(buf);
      if (isExtArgPatternTarget && extArgPattern.postAssignCode != null) {
        String[] lines=extArgPattern.postAssignCode.replaceAll(""String_Node_Str"",argName).split(StringValue.Semicolon);
        for (        String line : lines) {
          if (line != null && line.trim().length() > 0) {
            appendTabs(buf,2);
            line=line.trim().replaceAll(StringValue.CarriageReturn,""String_Node_Str"").replaceAll(StringValue.LineFeed,""String_Node_Str"");
            buf.append(line);
            buf.append(StringValue.Semicolon);
            appendCRLF(buf);
          }
        }
      }
 else       if (extInstantiation != null) {
        if (extInstantiation.postAssignCode != null && extInstantiation.postAssignCode.trim().length() > 0) {
          String[] lines=extInstantiation.postAssignCode.split(StringValue.Semicolon);
          for (          String line : lines) {
            if (line != null && line.trim().length() > 0) {
              appendTabs(buf,2);
              buf.append(line);
              buf.append(StringValue.Semicolon);
              appendCRLF(buf);
            }
          }
        }
      }
    }
  }
}",0.9487305891052502
12011,"public String toCompilableType(String typeName,List<String> generics,List<String> importedList,String callerClassPackageName){
  if (typeName == null) {
    return typeName;
  }
  typeName=typeName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (typeName.matches(""String_Node_Str"")) {
    return typeName;
  }
  boolean isArray=false;
  String arrayPart=""String_Node_Str"";
  if (typeName.matches(""String_Node_Str"")) {
    isArray=true;
    Matcher mat=Pattern.compile(""String_Node_Str"").matcher(typeName);
    while (mat.find()) {
      arrayPart+=""String_Node_Str"";
    }
    typeName=typeName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  if (typeName.matches(RegExp.Anything_ZeroOrMore_Min + RegExp.Generics + RegExp.Anything_ZeroOrMore_Min)) {
    typeName=typeName.replaceAll(RegExp.Generics,StringValue.Empty);
  }
  boolean isTypeAvailable=false;
  String destTypeName=""String_Node_Str"";
  try {
    if (PrimitiveTypeUtil.isPrimitive(typeName)) {
      isTypeAvailable=true;
      if (!destTypeName.matches(""String_Node_Str""))       destTypeName=PrimitiveTypeUtil.getTypeDefaultValue(typeName);
    }
 else {
      try {
        Class.forName(""String_Node_Str"" + typeName);
        isTypeAvailable=true;
      }
 catch (      Exception ignore) {
        List<File> files=new CommonsIOFileSearcher().searchFilesRecursivelyByName(config.directoryPathOfProductSourceCode + ""String_Node_Str"" + callerClassPackageName.replaceAll(""String_Node_Str"",""String_Node_Str""),typeName + RegExp.FileExtension.JavaFile);
        if (files != null && files.size() > 0) {
          isTypeAvailable=true;
        }
      }
      if (!isTypeAvailable) {
        Class.forName(typeName);
      }
    }
  }
 catch (  Exception e) {
    for (    String importedPackage : importedList) {
      importedPackage=importedPackage.replaceAll(""String_Node_Str"",StringValue.Empty);
      try {
        String regexp=""String_Node_Str"" + typeName.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
        if (importedPackage.matches(regexp)) {
          isTypeAvailable=true;
          break;
        }
      }
 catch (      Exception e2) {
        e2.printStackTrace();
      }
    }
  }
  if (generics != null) {
    StringBuilder buf=new StringBuilder();
    if (generics.size() > 0) {
      buf.append(""String_Node_Str"");
      buf.append(generics.get(0));
      if (generics.size() > 1) {
        for (int i=1; i < generics.size(); i++) {
          buf.append(""String_Node_Str"");
          buf.append(generics.get(i));
        }
      }
      buf.append(""String_Node_Str"");
    }
    typeName+=buf.toString();
  }
  if (typeName == null || typeName.equals(StringValue.Empty)) {
    typeName=""String_Node_Str"";
  }
  if (destTypeName == null || destTypeName.equals(StringValue.Empty)) {
    destTypeName=""String_Node_Str"";
  }
  if (arrayPart == null || arrayPart.length() == 0) {
    arrayPart=""String_Node_Str"";
  }
  if (isTypeAvailable) {
    return isArray ? typeName + arrayPart : typeName;
  }
 else {
    return isArray ? destTypeName + arrayPart : destTypeName;
  }
}","public String toCompilableType(String typeName,List<String> generics,List<String> importedList,String callerClassPackageName){
  if (typeName == null) {
    return typeName;
  }
  typeName=typeName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (typeName.matches(""String_Node_Str"")) {
    return typeName;
  }
  boolean isArray=false;
  String arrayPart=""String_Node_Str"";
  if (typeName.matches(""String_Node_Str"")) {
    isArray=true;
    Matcher mat=Pattern.compile(""String_Node_Str"").matcher(typeName);
    while (mat.find()) {
      arrayPart+=""String_Node_Str"";
    }
    typeName=typeName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  if (typeName.matches(RegExp.Anything_ZeroOrMore_Min + RegExp.Generics + RegExp.Anything_ZeroOrMore_Min)) {
    typeName=typeName.replaceAll(RegExp.Generics,StringValue.Empty);
  }
  boolean isTypeAvailable=false;
  String destTypeName=""String_Node_Str"";
  try {
    if (PrimitiveTypeUtil.isPrimitive(typeName)) {
      isTypeAvailable=true;
      if (!destTypeName.matches(""String_Node_Str""))       destTypeName=PrimitiveTypeUtil.getTypeDefaultValue(typeName);
    }
 else {
      try {
        Class.forName(""String_Node_Str"" + typeName);
        isTypeAvailable=true;
      }
 catch (      Exception ignore) {
        List<File> files=new CommonsIOFileSearcher().searchFilesRecursivelyByName(config.directoryPathOfProductSourceCode + ""String_Node_Str"" + callerClassPackageName.replaceAll(""String_Node_Str"",""String_Node_Str""),typeName + RegExp.FileExtension.JavaFile);
        if (files != null && files.size() > 0) {
          isTypeAvailable=true;
        }
      }
      if (!isTypeAvailable) {
        Class.forName(typeName);
      }
    }
  }
 catch (  Exception e) {
    for (    String importedPackage : importedList) {
      importedPackage=importedPackage.replaceAll(""String_Node_Str"",StringValue.Empty).trim();
      try {
        String regexp=""String_Node_Str"" + typeName.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
        if (importedPackage.matches(regexp)) {
          isTypeAvailable=true;
          break;
        }
        if (!importedPackage.contains(""String_Node_Str"") && importedPackage.endsWith(""String_Node_Str"")) {
          try {
            Class.forName(importedPackage.replace(""String_Node_Str"",""String_Node_Str"") + typeName);
            isTypeAvailable=true;
          }
 catch (          Exception ignore) {
          }
        }
      }
 catch (      Exception e2) {
        e2.printStackTrace();
      }
    }
  }
  if (generics != null) {
    StringBuilder buf=new StringBuilder();
    if (generics.size() > 0) {
      buf.append(""String_Node_Str"");
      buf.append(generics.get(0));
      if (generics.size() > 1) {
        for (int i=1; i < generics.size(); i++) {
          buf.append(""String_Node_Str"");
          buf.append(generics.get(i));
        }
      }
      buf.append(""String_Node_Str"");
    }
    typeName+=buf.toString();
  }
  if (typeName == null || typeName.equals(StringValue.Empty)) {
    typeName=""String_Node_Str"";
  }
  if (destTypeName == null || destTypeName.equals(StringValue.Empty)) {
    destTypeName=""String_Node_Str"";
  }
  if (arrayPart == null || arrayPart.length() == 0) {
    arrayPart=""String_Node_Str"";
  }
  if (isTypeAvailable) {
    return isArray ? typeName + arrayPart : typeName;
  }
 else {
    return isArray ? destTypeName + arrayPart : destTypeName;
  }
}",0.9491525423728814
12012,"@Override public String getNewTestCaseSourceCode(){
  StringBuilder buf=new StringBuilder();
  if (targetClassMeta.packageName != null) {
    buf.append(""String_Node_Str"");
    buf.append(targetClassMeta.packageName);
    buf.append(""String_Node_Str"");
    buf.append(StringValue.CarriageReturn);
    buf.append(StringValue.LineFeed);
    buf.append(StringValue.CarriageReturn);
    buf.append(StringValue.LineFeed);
  }
  for (  String imported : targetClassMeta.importedList) {
    buf.append(""String_Node_Str"");
    buf.append(imported);
    buf.append(""String_Node_Str"");
    buf.append(StringValue.CarriageReturn);
    buf.append(StringValue.LineFeed);
  }
  if (config.junitVersion == JUnitVersion.version3) {
    buf.append(""String_Node_Str"");
    buf.append(config.testCaseClassNameToExtend);
    buf.append(""String_Node_Str"");
    buf.append(StringValue.CarriageReturn);
    buf.append(StringValue.LineFeed);
  }
  buf.append(StringValue.CarriageReturn);
  buf.append(StringValue.LineFeed);
  buf.append(""String_Node_Str"");
  buf.append(targetClassMeta.name);
  buf.append(""String_Node_Str"");
  if (config.junitVersion == JUnitVersion.version3) {
    buf.append(""String_Node_Str"");
    String[] splittedArray=config.testCaseClassNameToExtend.split(""String_Node_Str"");
    buf.append(splittedArray[splittedArray.length - 1]);
    buf.append(""String_Node_Str"");
  }
  buf.append(""String_Node_Str"");
  buf.append(StringValue.CarriageReturn);
  buf.append(StringValue.LineFeed);
  buf.append(StringValue.CarriageReturn);
  buf.append(StringValue.LineFeed);
  buf.append(""String_Node_Str"");
  buf.append(StringValue.CarriageReturn);
  buf.append(StringValue.LineFeed);
  return getTestCaseSourceCodeWithLackingTestMethod(buf.toString());
}","@Override public String getNewTestCaseSourceCode(){
  StringBuilder buf=new StringBuilder();
  if (targetClassMeta.packageName != null) {
    buf.append(""String_Node_Str"");
    buf.append(targetClassMeta.packageName);
    buf.append(""String_Node_Str"");
    buf.append(StringValue.CarriageReturn);
    buf.append(StringValue.LineFeed);
    buf.append(StringValue.CarriageReturn);
    buf.append(StringValue.LineFeed);
  }
  for (  String imported : targetClassMeta.importedList) {
    buf.append(""String_Node_Str"");
    buf.append(imported);
    buf.append(""String_Node_Str"");
    buf.append(StringValue.CarriageReturn);
    buf.append(StringValue.LineFeed);
  }
  if (config.junitVersion == JUnitVersion.version3 || !config.testCaseClassNameToExtend.equals(""String_Node_Str"")) {
    buf.append(""String_Node_Str"");
    buf.append(config.testCaseClassNameToExtend);
    buf.append(""String_Node_Str"");
    buf.append(StringValue.CarriageReturn);
    buf.append(StringValue.LineFeed);
  }
  buf.append(StringValue.CarriageReturn);
  buf.append(StringValue.LineFeed);
  buf.append(""String_Node_Str"");
  buf.append(targetClassMeta.name);
  buf.append(""String_Node_Str"");
  if (config.junitVersion == JUnitVersion.version3 || !config.testCaseClassNameToExtend.equals(""String_Node_Str"")) {
    buf.append(""String_Node_Str"");
    String[] splittedArray=config.testCaseClassNameToExtend.split(""String_Node_Str"");
    buf.append(splittedArray[splittedArray.length - 1]);
    buf.append(""String_Node_Str"");
  }
  buf.append(""String_Node_Str"");
  buf.append(StringValue.CarriageReturn);
  buf.append(StringValue.LineFeed);
  buf.append(StringValue.CarriageReturn);
  buf.append(StringValue.LineFeed);
  buf.append(""String_Node_Str"");
  buf.append(StringValue.CarriageReturn);
  buf.append(StringValue.LineFeed);
  return getTestCaseSourceCodeWithLackingTestMethod(buf.toString());
}",0.9352159468438538
12013,"String addRequiredImportList(String src,Configulation config){
  String dest=src;
  String oneline=TrimFilterUtil.doAllFilters(src);
  StringBuilder importedListBuf=new StringBuilder();
  for (  String imported : targetClassMeta.importedList) {
    String newOne=""String_Node_Str"" + imported + ""String_Node_Str"";
    if (!oneline.matches(RegExp.Anything_ZeroOrMore_Min + newOne + RegExp.Anything_ZeroOrMore_Min)) {
      importedListBuf.append(newOne);
      importedListBuf.append(StringValue.CarriageReturn);
      importedListBuf.append(StringValue.LineFeed);
    }
  }
  appendIfNotExists(importedListBuf,oneline,""String_Node_Str"" + targetClassMeta.packageName + ""String_Node_Str""+ targetClassMeta.name+ ""String_Node_Str"");
  if (config.junitVersion == JUnitVersion.version3) {
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"" + config.testCaseClassNameToExtend + ""String_Node_Str"");
  }
 else   if (config.junitVersion == JUnitVersion.version4) {
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"");
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"");
  }
  if (config.mockObjectFramework == MockObjectFramework.EasyMock) {
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"");
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"");
  }
 else   if (config.mockObjectFramework == MockObjectFramework.JMock2) {
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"");
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"");
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"");
  }
 else   if (config.mockObjectFramework == MockObjectFramework.JMockit) {
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"");
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"");
  }
 else   if (config.mockObjectFramework == MockObjectFramework.Mockito) {
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"");
  }
  if (importedListBuf.length() > 0) {
    Matcher matcher=RegExp.PatternObject.PackageDefArea_Group.matcher(src.replaceAll(RegExp.CRLF,StringValue.Space));
    if (matcher.find()) {
      String packageDef=matcher.group(1);
      String CRLF=StringValue.CarriageReturn + StringValue.LineFeed;
      String replacement=packageDef + CRLF + CRLF+ importedListBuf.toString().replaceAll(""String_Node_Str"",StringValue.Empty);
      dest=dest.replaceFirst(packageDef,replacement);
    }
 else {
      dest=importedListBuf.toString() + dest;
    }
  }
  return dest;
}","String addRequiredImportList(String src,Configulation config){
  String dest=src;
  String oneline=TrimFilterUtil.doAllFilters(src);
  StringBuilder importedListBuf=new StringBuilder();
  for (  String imported : targetClassMeta.importedList) {
    String newOne=""String_Node_Str"" + imported + ""String_Node_Str"";
    if (!oneline.matches(RegExp.Anything_ZeroOrMore_Min + newOne + RegExp.Anything_ZeroOrMore_Min)) {
      importedListBuf.append(newOne);
      importedListBuf.append(StringValue.CarriageReturn);
      importedListBuf.append(StringValue.LineFeed);
    }
  }
  appendIfNotExists(importedListBuf,oneline,""String_Node_Str"" + targetClassMeta.packageName + ""String_Node_Str""+ targetClassMeta.name+ ""String_Node_Str"");
  if (config.junitVersion == JUnitVersion.version3) {
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"" + config.testCaseClassNameToExtend + ""String_Node_Str"");
  }
 else   if (config.junitVersion == JUnitVersion.version4) {
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"");
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"");
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"");
  }
  if (config.mockObjectFramework == MockObjectFramework.EasyMock) {
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"");
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"");
  }
 else   if (config.mockObjectFramework == MockObjectFramework.JMock2) {
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"");
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"");
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"");
  }
 else   if (config.mockObjectFramework == MockObjectFramework.JMockit) {
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"");
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"");
  }
 else   if (config.mockObjectFramework == MockObjectFramework.Mockito) {
    appendIfNotExists(importedListBuf,oneline,""String_Node_Str"");
  }
  if (importedListBuf.length() > 0) {
    Matcher matcher=RegExp.PatternObject.PackageDefArea_Group.matcher(src.replaceAll(RegExp.CRLF,StringValue.Space));
    if (matcher.find()) {
      String packageDef=matcher.group(1);
      String CRLF=StringValue.CarriageReturn + StringValue.LineFeed;
      String replacement=packageDef + CRLF + CRLF+ importedListBuf.toString().replaceAll(""String_Node_Str"",StringValue.Empty);
      dest=dest.replaceFirst(packageDef,replacement);
    }
 else {
      dest=importedListBuf.toString() + dest;
    }
  }
  return dest;
}",0.9869358669833728
12014,"@Override public String getTestMethodSourceCode(TestMethodMeta testMethodMeta){
  StringBuilder buf=new StringBuilder();
  if (config.mockObjectFramework == MockObjectFramework.JMockit) {
    List<String> mockedFieldsForJMockit=getMockedFieldsForJMockit(testMethodMeta);
    for (    String mocked : mockedFieldsForJMockit) {
      appendTabs(buf,1);
      buf.append(""String_Node_Str"");
      appendCRLF(buf);
      appendTabs(buf,1);
      buf.append(mocked);
      buf.append(StringValue.Semicolon);
      appendCRLF(buf);
    }
    if (mockedFieldsForJMockit.size() > 0) {
      appendCRLF(buf);
    }
  }
  if (config.junitVersion == JUnitVersion.version3) {
    appendTabs(buf,1);
    buf.append(""String_Node_Str"");
    buf.append(StringValue.JUnit.TestMethodNamePrefixForJUnitVersion3);
    buf.append(config.testMethodName.basicDelimiter);
  }
 else {
    appendTabs(buf,1);
    buf.append(""String_Node_Str"");
    appendCRLF(buf);
    appendTabs(buf,1);
    buf.append(""String_Node_Str"");
  }
  buf.append(getTestMethodNamePrefix(testMethodMeta,testMethodMeta.testingTargetException));
  boolean isThrowableRequired=false;
  if (testMethodMeta.methodMeta != null && testMethodMeta.methodMeta.throwsExceptions != null) {
    for (    ExceptionMeta ex : testMethodMeta.methodMeta.throwsExceptions) {
      if (ex.name.equals(""String_Node_Str"")) {
        isThrowableRequired=true;
        break;
      }
    }
  }
  buf.append(""String_Node_Str"");
  buf.append(isThrowableRequired ? ""String_Node_Str"" : ""String_Node_Str"");
  buf.append(""String_Node_Str"");
  appendCRLF(buf);
  appendTabs(buf,2);
  buf.append(""String_Node_Str"");
  buf.append(messageValue.getAutoGeneratedTODOMessage());
  appendCRLF(buf);
  if (testMethodMeta.isTypeTest) {
    appendTabs(buf,2);
    buf.append(""String_Node_Str"");
    buf.append(testMethodMeta.classMeta.name);
    buf.append(""String_Node_Str"");
    appendCRLF(buf);
  }
 else   if (testMethodMeta.isInstantiationTest) {
    String instantiation=constructorGenerator.getFirstInstantiationSourceCode(testMethodMeta.classMeta);
    buf.append(instantiation);
    appendTabs(buf,2);
    buf.append(""String_Node_Str"");
    appendCRLF(buf);
  }
 else   if (config.isTemplateImplementationRequired) {
    appendTestingPatternExplicitComment(buf,""String_Node_Str"",2);
    if (config.mockObjectFramework == MockObjectFramework.JMock2) {
      appendTabs(buf,2);
      buf.append(""String_Node_Str"");
      appendCRLF(buf);
      appendTabs(buf,3);
      buf.append(""String_Node_Str"");
      appendCRLF(buf);
      appendTabs(buf,2);
      buf.append(""String_Node_Str"");
      appendCRLF(buf);
    }
    if (config.mockObjectFramework == MockObjectFramework.EasyMock) {
      appendTabs(buf,2);
      buf.append(""String_Node_Str"");
      appendCRLF(buf);
    }
    if (!testMethodMeta.methodMeta.isStatic) {
      String instantiation=constructorGenerator.getFirstInstantiationSourceCode(testMethodMeta.classMeta);
      buf.append(instantiation);
    }
    appendBDDMockitoComment(buf,""String_Node_Str"",2);
    if (testMethodMeta.testingTargetException == null) {
      appendPreparingArgs(buf,testMethodMeta);
      appendMockChecking(buf,2);
      appendTestingPatternExplicitComment(buf,""String_Node_Str"",2);
      appendBDDMockitoComment(buf,""String_Node_Str"",2);
      if (testMethodMeta.methodMeta.returnType != null && testMethodMeta.methodMeta.returnType.name != null) {
        appendTabs(buf,2);
        buf.append(testMethodMeta.methodMeta.returnType.name);
        buf.append(""String_Node_Str"");
      }
 else {
        appendTabs(buf,2);
      }
      appendExecutingTargetMethod(buf,testMethodMeta);
      appendTestingPatternExplicitComment(buf,""String_Node_Str"",2);
      appendBDDMockitoComment(buf,""String_Node_Str"",2);
      appendMockVerifying(buf,2);
      if (testMethodMeta.methodMeta.returnType != null && testMethodMeta.methodMeta.returnType.name != null) {
        appendTabs(buf,2);
        buf.append(testMethodMeta.methodMeta.returnType.name);
        buf.append(""String_Node_Str"");
        if (PrimitiveTypeUtil.isPrimitive(testMethodMeta.methodMeta.returnType.name)) {
          buf.append(PrimitiveTypeUtil.getTypeDefaultValue(testMethodMeta.methodMeta.returnType.name));
        }
 else {
          buf.append(""String_Node_Str"");
        }
        buf.append(StringValue.Semicolon);
        appendCRLF(buf);
        appendTabs(buf,2);
        buf.append(""String_Node_Str"");
        buf.append(StringValue.Semicolon);
        appendCRLF(buf);
      }
    }
 else {
      appendPreparingArgs(buf,testMethodMeta);
      appendMockChecking(buf,2);
      appendTabs(buf,2);
      buf.append(""String_Node_Str"");
      appendCRLF(buf);
      appendTestingPatternExplicitComment(buf,""String_Node_Str"",3);
      appendBDDMockitoComment(buf,""String_Node_Str"",3);
      appendTabs(buf,3);
      appendExecutingTargetMethod(buf,testMethodMeta);
      appendTabs(buf,3);
      buf.append(""String_Node_Str"");
      buf.append(StringValue.Semicolon);
      appendCRLF(buf);
      appendTabs(buf,2);
      buf.append(""String_Node_Str"");
      buf.append(testMethodMeta.testingTargetException.name);
      buf.append(""String_Node_Str"");
      appendCRLF(buf);
      appendBDDMockitoComment(buf,""String_Node_Str"",3);
      appendTabs(buf,2);
      buf.append(""String_Node_Str"");
      appendCRLF(buf);
    }
  }
  appendTabs(buf,1);
  buf.append(""String_Node_Str"");
  appendCRLF(buf);
  return buf.toString();
}","@Override public String getTestMethodSourceCode(TestMethodMeta testMethodMeta){
  StringBuilder buf=new StringBuilder();
  if (config.mockObjectFramework == MockObjectFramework.JMockit) {
    List<String> mockedFieldsForJMockit=getMockedFieldsForJMockit(testMethodMeta);
    for (    String mocked : mockedFieldsForJMockit) {
      appendTabs(buf,1);
      buf.append(""String_Node_Str"");
      appendCRLF(buf);
      appendTabs(buf,1);
      buf.append(mocked);
      buf.append(StringValue.Semicolon);
      appendCRLF(buf);
    }
    if (mockedFieldsForJMockit.size() > 0) {
      appendCRLF(buf);
    }
  }
  if (config.junitVersion == JUnitVersion.version3) {
    appendTabs(buf,1);
    buf.append(""String_Node_Str"");
    buf.append(StringValue.JUnit.TestMethodNamePrefixForJUnitVersion3);
    buf.append(config.testMethodName.basicDelimiter);
  }
 else {
    appendTabs(buf,1);
    buf.append(""String_Node_Str"");
    appendCRLF(buf);
    appendTabs(buf,1);
    buf.append(""String_Node_Str"");
  }
  buf.append(getTestMethodNamePrefix(testMethodMeta,testMethodMeta.testingTargetException));
  boolean isThrowableRequired=false;
  if (testMethodMeta.methodMeta != null && testMethodMeta.methodMeta.throwsExceptions != null) {
    for (    ExceptionMeta ex : testMethodMeta.methodMeta.throwsExceptions) {
      if (ex.name.equals(""String_Node_Str"")) {
        isThrowableRequired=true;
        break;
      }
    }
  }
  buf.append(""String_Node_Str"");
  buf.append(isThrowableRequired ? ""String_Node_Str"" : ""String_Node_Str"");
  buf.append(""String_Node_Str"");
  appendCRLF(buf);
  appendTabs(buf,2);
  buf.append(""String_Node_Str"");
  buf.append(messageValue.getAutoGeneratedTODOMessage());
  appendCRLF(buf);
  if (testMethodMeta.isTypeTest) {
    appendTabs(buf,2);
    if (config.junitVersion == JUnitVersion.version3) {
      buf.append(""String_Node_Str"");
      buf.append(testMethodMeta.classMeta.name);
      buf.append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"");
      buf.append(testMethodMeta.classMeta.name);
      buf.append(""String_Node_Str"");
    }
    appendCRLF(buf);
  }
 else   if (testMethodMeta.isInstantiationTest) {
    String instantiation=constructorGenerator.getFirstInstantiationSourceCode(testMethodMeta.classMeta);
    buf.append(instantiation);
    appendTabs(buf,2);
    if (config.junitVersion == JUnitVersion.version3) {
      buf.append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"");
    }
    appendCRLF(buf);
  }
 else   if (config.isTemplateImplementationRequired) {
    appendTestingPatternExplicitComment(buf,""String_Node_Str"",2);
    if (config.mockObjectFramework == MockObjectFramework.JMock2) {
      appendTabs(buf,2);
      buf.append(""String_Node_Str"");
      appendCRLF(buf);
      appendTabs(buf,3);
      buf.append(""String_Node_Str"");
      appendCRLF(buf);
      appendTabs(buf,2);
      buf.append(""String_Node_Str"");
      appendCRLF(buf);
    }
    if (config.mockObjectFramework == MockObjectFramework.EasyMock) {
      appendTabs(buf,2);
      buf.append(""String_Node_Str"");
      appendCRLF(buf);
    }
    if (!testMethodMeta.methodMeta.isStatic) {
      String instantiation=constructorGenerator.getFirstInstantiationSourceCode(testMethodMeta.classMeta);
      buf.append(instantiation);
    }
    appendBDDMockitoComment(buf,""String_Node_Str"",2);
    if (testMethodMeta.testingTargetException == null) {
      appendPreparingArgs(buf,testMethodMeta);
      appendMockChecking(buf,2);
      appendTestingPatternExplicitComment(buf,""String_Node_Str"",2);
      appendBDDMockitoComment(buf,""String_Node_Str"",2);
      if (testMethodMeta.methodMeta.returnType != null && testMethodMeta.methodMeta.returnType.name != null) {
        appendTabs(buf,2);
        buf.append(testMethodMeta.methodMeta.returnType.name);
        buf.append(""String_Node_Str"");
      }
 else {
        appendTabs(buf,2);
      }
      appendExecutingTargetMethod(buf,testMethodMeta);
      appendTestingPatternExplicitComment(buf,""String_Node_Str"",2);
      appendBDDMockitoComment(buf,""String_Node_Str"",2);
      appendMockVerifying(buf,2);
      if (testMethodMeta.methodMeta.returnType != null && testMethodMeta.methodMeta.returnType.name != null) {
        appendTabs(buf,2);
        buf.append(testMethodMeta.methodMeta.returnType.name);
        buf.append(""String_Node_Str"");
        if (PrimitiveTypeUtil.isPrimitive(testMethodMeta.methodMeta.returnType.name)) {
          buf.append(PrimitiveTypeUtil.getTypeDefaultValue(testMethodMeta.methodMeta.returnType.name));
        }
 else {
          buf.append(""String_Node_Str"");
        }
        buf.append(StringValue.Semicolon);
        appendCRLF(buf);
        appendTabs(buf,2);
        if (config.junitVersion == JUnitVersion.version3) {
          buf.append(""String_Node_Str"");
        }
 else {
          buf.append(""String_Node_Str"");
        }
        buf.append(StringValue.Semicolon);
        appendCRLF(buf);
      }
    }
 else {
      appendPreparingArgs(buf,testMethodMeta);
      appendMockChecking(buf,2);
      appendTabs(buf,2);
      buf.append(""String_Node_Str"");
      appendCRLF(buf);
      appendTestingPatternExplicitComment(buf,""String_Node_Str"",3);
      appendBDDMockitoComment(buf,""String_Node_Str"",3);
      appendTabs(buf,3);
      appendExecutingTargetMethod(buf,testMethodMeta);
      appendTabs(buf,3);
      buf.append(""String_Node_Str"");
      buf.append(StringValue.Semicolon);
      appendCRLF(buf);
      appendTabs(buf,2);
      buf.append(""String_Node_Str"");
      buf.append(testMethodMeta.testingTargetException.name);
      buf.append(""String_Node_Str"");
      appendCRLF(buf);
      appendBDDMockitoComment(buf,""String_Node_Str"",3);
      appendTabs(buf,2);
      buf.append(""String_Node_Str"");
      appendCRLF(buf);
    }
  }
  appendTabs(buf,1);
  buf.append(""String_Node_Str"");
  appendCRLF(buf);
  return buf.toString();
}",0.9603167619885614
12015,"protected Configulation loadConfig(){
  Configulation config=new Configulation();
  config.language=language;
  config.outputFileEncoding=outputFileEncoding;
  config.directoryPathOfProductSourceCode=directoryPathOfProductSourceCode;
  config.directoryPathOfTestSourceCode=directoryPathOfTestSourceCode;
  try {
    config.junitVersion=JUnitVersion.valueOf(junitVersion);
  }
 catch (  Exception e) {
    config.junitVersion=JUnitVersion.version4;
  }
  config.testCaseClassNameToExtend=testCaseClassNameToExtend;
  config.isTemplateImplementationRequired=isTemplateImplementationRequired;
  config.target.isAccessorExcluded=target_isAccessorExcluded;
  config.target.isExceptionPatternRequired=target_isExceptionPatternRequired;
  config.target.isPackageLocalMethodRequired=target_isPackageLocalMethodRequired;
  config.target.isProtectedMethodRequired=target_isProtectedMethodRequired;
  config.target.isPublicMethodRequired=target_isPublicMethodRequired;
  config.testMethodName.isArgsRequired=testMethodName_isArgsRequired;
  config.testMethodName.isReturnRequired=testMethodName_isReturnRequired;
  config.testMethodName.basicDelimiter=testMethodName_basicDelimiter;
  config.testMethodName.argsAreaPrefix=testMethodName_argsAreaPrefix;
  config.testMethodName.argsAreaDelimiter=testMethodName_argsAreaDelimiter;
  config.testMethodName.returnAreaPrefix=testMethodName_returnAreaPrefix;
  config.testMethodName.returnAreaDelimiter=testMethodName_returnAreaDelimiter;
  config.testMethodName.exceptionAreaPrefix=testMethodName_exceptionAreaPrefix;
  config.testMethodName.exceptionAreaDelimiter=testMethodName_exceptionAreaDelimiter;
  try {
    config.mockObjectFramework=MockObjectFramework.valueOf(mockObjectFramework);
  }
 catch (  Exception e) {
    config.mockObjectFramework=null;
  }
  return config;
}","protected Configuration loadConfig(){
  Configuration config=new Configuration();
  config.language=language;
  config.outputFileEncoding=outputFileEncoding;
  config.directoryPathOfProductSourceCode=directoryPathOfProductSourceCode;
  config.directoryPathOfTestSourceCode=directoryPathOfTestSourceCode;
  try {
    config.junitVersion=JUnitVersion.valueOf(junitVersion);
  }
 catch (  Exception e) {
    config.junitVersion=JUnitVersion.version4;
  }
  config.testCaseClassNameToExtend=testCaseClassNameToExtend;
  config.isTemplateImplementationRequired=isTemplateImplementationRequired;
  config.target.isAccessorExcluded=target_isAccessorExcluded;
  config.target.isExceptionPatternRequired=target_isExceptionPatternRequired;
  config.target.isPackageLocalMethodRequired=target_isPackageLocalMethodRequired;
  config.target.isProtectedMethodRequired=target_isProtectedMethodRequired;
  config.target.isPublicMethodRequired=target_isPublicMethodRequired;
  config.testMethodName.isArgsRequired=testMethodName_isArgsRequired;
  config.testMethodName.isReturnRequired=testMethodName_isReturnRequired;
  config.testMethodName.basicDelimiter=testMethodName_basicDelimiter;
  config.testMethodName.argsAreaPrefix=testMethodName_argsAreaPrefix;
  config.testMethodName.argsAreaDelimiter=testMethodName_argsAreaDelimiter;
  config.testMethodName.returnAreaPrefix=testMethodName_returnAreaPrefix;
  config.testMethodName.returnAreaDelimiter=testMethodName_returnAreaDelimiter;
  config.testMethodName.exceptionAreaPrefix=testMethodName_exceptionAreaPrefix;
  config.testMethodName.exceptionAreaDelimiter=testMethodName_exceptionAreaDelimiter;
  try {
    config.mockObjectFramework=MockObjectFramework.valueOf(mockObjectFramework);
  }
 catch (  Exception e) {
    config.mockObjectFramework=null;
  }
  try {
    config.testingPatternExplicitComment=TestingPatternExplicitComment.valueOf(testingPatternExplicitComment);
  }
 catch (  Exception e) {
    config.testingPatternExplicitComment=null;
  }
  return config;
}",0.9386262731783755
12016,"@Override public String getUnifiedVersionTestCaseSourceCode(String currentTestCaseSourceCode,JUnitVersion version){
  String dest=currentTestCaseSourceCode;
  ClassMeta classMeta=new ClassMetaExtractor(config).extract(currentTestCaseSourceCode);
  Configulation config=ObjectUtil.deepCopy(this.config);
  if (version == JUnitVersion.version3) {
    dest=dest.replaceAll(""String_Node_Str"",""String_Node_Str"" + config.testMethodName.basicDelimiter);
    String[] splittedArray=config.testCaseClassNameToExtend.split(""String_Node_Str"");
    String testCaseName=splittedArray[splittedArray.length - 1];
    dest=dest.replaceFirst(classMeta.name + ""String_Node_Str"",classMeta.name + ""String_Node_Str"" + testCaseName+ ""String_Node_Str"");
    config.junitVersion=JUnitVersion.version3;
    dest=addRequiredImportList(dest,config);
  }
 else   if (version == JUnitVersion.version4) {
    dest=dest.replaceAll(""String_Node_Str"" + config.testMethodName.basicDelimiter,""String_Node_Str"");
    dest=dest.replaceFirst(classMeta.name + ""String_Node_Str"",classMeta.name + ""String_Node_Str"");
    config.junitVersion=JUnitVersion.version4;
    dest=addRequiredImportList(dest,config);
  }
  return dest;
}","@Override public String getUnifiedVersionTestCaseSourceCode(String currentTestCaseSourceCode,JUnitVersion version){
  String dest=currentTestCaseSourceCode;
  ClassMeta classMeta=new ClassMetaExtractor(config).extract(currentTestCaseSourceCode);
  Configulation config=ObjectUtil.deepCopy(this.config);
  if (version == JUnitVersion.version3) {
    dest=dest.replaceAll(""String_Node_Str"",""String_Node_Str"" + config.testMethodName.basicDelimiter);
    String[] splittedArray=config.testCaseClassNameToExtend.split(""String_Node_Str"");
    String testCaseName=splittedArray[splittedArray.length - 1];
    dest=dest.replaceFirst(classMeta.name + ""String_Node_Str"",classMeta.name + ""String_Node_Str"" + testCaseName+ ""String_Node_Str"");
    config.junitVersion=JUnitVersion.version3;
    dest=addRequiredImportList(dest,config);
  }
 else   if (version == JUnitVersion.version4) {
    dest=dest.replaceAll(""String_Node_Str"" + config.testMethodName.basicDelimiter,""String_Node_Str"");
    String REGEXP_FOR_SUPER_CLASS=""String_Node_Str"";
    String REGEXP_FOR_IMPORT_TEST_CASE=""String_Node_Str"";
    String TEST_CASE_CLASS_WITH_PACAKGE=""String_Node_Str"";
    String TEST_CASE_CLASS=""String_Node_Str"";
    String destWithoutCRLF=dest.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (destWithoutCRLF.matches(REGEXP_FOR_SUPER_CLASS)) {
      Matcher matcher=Pattern.compile(REGEXP_FOR_SUPER_CLASS).matcher(destWithoutCRLF);
      if (matcher.matches()) {
        String matched=matcher.group(1);
        if (matched.trim().equals(TEST_CASE_CLASS_WITH_PACAKGE)) {
          dest=dest.replaceFirst(classMeta.name + ""String_Node_Str"",classMeta.name + ""String_Node_Str"");
        }
 else         if (matched.trim().equals(TEST_CASE_CLASS) && destWithoutCRLF.matches(REGEXP_FOR_IMPORT_TEST_CASE)) {
          dest=dest.replaceFirst(classMeta.name + ""String_Node_Str"",classMeta.name + ""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
    config.junitVersion=JUnitVersion.version4;
    dest=addRequiredImportList(dest,config);
  }
  return dest;
}",0.7080820265379976
12017,"private static boolean isNeedToExclude(File javaFile){
  String canonicalClassName=javaFile.getAbsolutePath().replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
  String[] regexpListForExclusion=config.target.getRegexpArrayForExclusion();
  for (  String regexp : regexpListForExclusion) {
    if (canonicalClassName.matches(""String_Node_Str"" + regexp + ""String_Node_Str"")) {
      return true;
    }
  }
  return false;
}","private static boolean isNeedToExclude(File javaFile){
  String canonicalClassName=javaFile.getAbsolutePath().replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
  String[] regexpListForExclusion=config.target.getRegexpArrayForExclusion();
  for (  String regexp : regexpListForExclusion) {
    if (regexp != null && regexp.trim().length() > 0 && canonicalClassName.matches(""String_Node_Str"" + regexp + ""String_Node_Str"")) {
      return true;
    }
  }
  return false;
}",0.9516129032258064
12018,"public ClassMeta extract(String sourceCodeString){
  ClassMeta meta=new ClassMeta();
  String modifiedSourceCodeString=TrimFilterUtil.doAllFilters(sourceCodeString);
  Matcher matcherGroupingPackageName=RegExp.PatternObject.Pacakge_Group.matcher(modifiedSourceCodeString);
  if (matcherGroupingPackageName.find()) {
    meta.packageName=matcherGroupingPackageName.group(1);
  }
  String outOfBrace=modifiedSourceCodeString.split(""String_Node_Str"")[0];
  String[] splittedBySpace=outOfBrace.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  if (!outOfBrace.matches(""String_Node_Str"") && !outOfBrace.matches(""String_Node_Str"")) {
    meta.isAbstract=true;
  }
 else {
    for (    String each : splittedBySpace) {
      if (each.equals(""String_Node_Str"") || each.equals(""String_Node_Str"") || each.equals(""String_Node_Str"")) {
        meta.isAbstract=true;
        break;
      }
    }
    if (outOfBrace.matches(""String_Node_Str"")) {
      meta.isEnum=true;
    }
  }
  meta.name=splittedBySpace[splittedBySpace.length - 1].replaceFirst(RegExp.Generics,StringValue.Empty);
  for (int i=0; i < splittedBySpace.length; i++) {
    if (splittedBySpace[i].equals(""String_Node_Str"") || splittedBySpace[i].equals(""String_Node_Str"")) {
      meta.name=splittedBySpace[i - 1].replaceFirst(RegExp.Generics,StringValue.Empty);
      break;
    }
  }
  meta.importedList=importedListExtractor.extract(modifiedSourceCodeString);
  meta.constructors=constructorMetaExtractor.initialize(meta,modifiedSourceCodeString).extract(modifiedSourceCodeString);
  meta.methods=methodMetaExtractor.initialize(meta,modifiedSourceCodeString).extract(modifiedSourceCodeString);
  if (meta.constructors.size() > 0) {
    for (    ConstructorMeta cons : meta.constructors) {
      int len=cons.argNames.size();
      for (int i=0; i < len; i++) {
        if (isDuplicatedVariableName(cons.argNames.get(i))) {
          cons.argNames.set(i,cons.argNames.get(i) + ""String_Node_Str"");
        }
      }
    }
    ConstructorMeta constructor=meta.constructors.get(0);
    for (    MethodMeta method : meta.methods) {
      int len=method.argNames.size();
      for (int i=0; i < len; i++) {
        String targetArgName=method.argNames.get(i);
        List<String> methodArgNames=new ArrayList<String>();
        for (        String methodArgName : method.argNames) {
          if (!targetArgName.equals(methodArgName)) {
            methodArgNames.add(methodArgName);
          }
        }
        method.argNames.set(i,renameIfDuplicatedToConstructorArgNames(targetArgName,constructor.argNames,methodArgNames));
      }
    }
  }
  return meta;
}","public ClassMeta extract(String sourceCodeString){
  ClassMeta meta=new ClassMeta();
  String modifiedSourceCodeString=TrimFilterUtil.doAllFilters(sourceCodeString);
  Matcher matcherGroupingPackageName=RegExp.PatternObject.Pacakge_Group.matcher(modifiedSourceCodeString);
  if (matcherGroupingPackageName.find()) {
    meta.packageName=matcherGroupingPackageName.group(1);
  }
  String outOfBrace=modifiedSourceCodeString.split(""String_Node_Str"")[0];
  int lenForOutOfBrace=outOfBrace.length();
  StringBuilder bufForOutOfBrace=new StringBuilder();
  boolean isInsideOfGenerics=false;
  int depth=0;
  for (int i=0; i < lenForOutOfBrace; i++) {
    char current=outOfBrace.charAt(i);
    if (current == '<') {
      isInsideOfGenerics=true;
      depth++;
    }
    if (current == '>') {
      depth--;
      if (depth <= 0) {
        isInsideOfGenerics=false;
        continue;
      }
    }
    if (!isInsideOfGenerics) {
      bufForOutOfBrace.append(current);
    }
  }
  String outOfBraceWithoutGenerics=bufForOutOfBrace.toString();
  String[] splittedBySpace=outOfBraceWithoutGenerics.split(""String_Node_Str"");
  if (!outOfBrace.matches(""String_Node_Str"") && !outOfBrace.matches(""String_Node_Str"")) {
    meta.isAbstract=true;
  }
 else {
    for (    String each : splittedBySpace) {
      if (each.equals(""String_Node_Str"") || each.equals(""String_Node_Str"") || each.equals(""String_Node_Str"")) {
        meta.isAbstract=true;
        break;
      }
    }
    if (outOfBrace.matches(""String_Node_Str"")) {
      meta.isEnum=true;
    }
  }
  meta.name=splittedBySpace[splittedBySpace.length - 1].replaceFirst(RegExp.Generics,StringValue.Empty);
  for (int i=0; i < splittedBySpace.length; i++) {
    if (splittedBySpace[i].equals(""String_Node_Str"") || splittedBySpace[i].equals(""String_Node_Str"")) {
      meta.name=splittedBySpace[i - 1].replaceFirst(RegExp.Generics,StringValue.Empty);
      break;
    }
  }
  meta.importedList=importedListExtractor.extract(modifiedSourceCodeString);
  meta.constructors=constructorMetaExtractor.initialize(meta,modifiedSourceCodeString).extract(modifiedSourceCodeString);
  meta.methods=methodMetaExtractor.initialize(meta,modifiedSourceCodeString).extract(modifiedSourceCodeString);
  if (meta.constructors.size() > 0) {
    for (    ConstructorMeta cons : meta.constructors) {
      int len=cons.argNames.size();
      for (int i=0; i < len; i++) {
        if (isDuplicatedVariableName(cons.argNames.get(i))) {
          cons.argNames.set(i,cons.argNames.get(i) + ""String_Node_Str"");
        }
      }
    }
    ConstructorMeta constructor=meta.constructors.get(0);
    for (    MethodMeta method : meta.methods) {
      int len=method.argNames.size();
      for (int i=0; i < len; i++) {
        String targetArgName=method.argNames.get(i);
        List<String> methodArgNames=new ArrayList<String>();
        for (        String methodArgName : method.argNames) {
          if (!targetArgName.equals(methodArgName)) {
            methodArgNames.add(methodArgName);
          }
        }
        method.argNames.set(i,renameIfDuplicatedToConstructorArgNames(targetArgName,constructor.argNames,methodArgNames));
      }
    }
  }
  return meta;
}",0.8741140735740803
12019,"@Override public List<TestMethodMeta> getLackingTestMethodMetaList(String currentTestCaseSourceCode){
  List<TestMethodMeta> dest=new ArrayList<TestMethodMeta>();
  String checkTargetSourceCode=TrimFilterUtil.doAllFilters(currentTestCaseSourceCode);
  if (!checkTargetSourceCode.matches(RegExp.Anything_ZeroOrMore_Min + ""String_Node_Str"" + RegExp.Anything_ZeroOrMore_Min)) {
    TestMethodMeta testMethod=new TestMethodMeta();
    testMethod.classMeta=targetClassMeta;
    testMethod.isTypeTest=true;
    dest.add(testMethod);
  }
  if (targetClassMeta.constructors.size() > 0) {
    ConstructorMeta notPrivateConstructor=null;
    for (    ConstructorMeta constructor : targetClassMeta.constructors) {
      if (constructor.accessModifier != AccessModifier.Private) {
        notPrivateConstructor=constructor;
        break;
      }
    }
    if (notPrivateConstructor != null) {
      if (!checkTargetSourceCode.matches(RegExp.Anything_ZeroOrMore_Min + ""String_Node_Str"" + RegExp.Anything_ZeroOrMore_Min)) {
        TestMethodMeta testMethod=new TestMethodMeta();
        testMethod.classMeta=targetClassMeta;
        testMethod.isInstantiationTest=true;
        dest.add(testMethod);
      }
    }
  }
  for (  MethodMeta methodMeta : targetClassMeta.methods) {
    TestMethodMeta testMethodMeta=new TestMethodMeta();
    testMethodMeta.methodMeta=methodMeta;
    String testMethodNamePrefix=testMethodGenerator.getTestMethodNamePrefix(testMethodMeta);
    if (!checkTargetSourceCode.matches(RegExp.Anything_ZeroOrMore_Min + testMethodNamePrefix.replaceAll(""String_Node_Str"",""String_Node_Str"") + RegExp.Anything_ZeroOrMore_Min)) {
      if (config.target.isAccessorExcluded && methodMeta.isAccessor) {
        continue;
      }
      if ((methodMeta.accessModifier == AccessModifier.Public && config.target.isPublicMethodRequired) || (methodMeta.accessModifier == AccessModifier.Protected && config.target.isProtectedMethodRequired) || (methodMeta.accessModifier == AccessModifier.PackageLocal && config.target.isPackageLocalMethodRequired)) {
        dest.add(testMethodGenerator.getTestMethodMeta(methodMeta));
        if (config.target.isExceptionPatternRequired) {
          for (          ExceptionMeta exceptionMeta : methodMeta.throwsExceptions) {
            dest.add(testMethodGenerator.getTestMethodMeta(methodMeta,exceptionMeta));
          }
        }
      }
    }
  }
  return dest;
}","@Override public List<TestMethodMeta> getLackingTestMethodMetaList(String currentTestCaseSourceCode){
  List<TestMethodMeta> dest=new ArrayList<TestMethodMeta>();
  String checkTargetSourceCode=TrimFilterUtil.doAllFilters(currentTestCaseSourceCode);
  if (!checkTargetSourceCode.matches(RegExp.Anything_ZeroOrMore_Min + ""String_Node_Str"" + RegExp.Anything_ZeroOrMore_Min)) {
    TestMethodMeta testMethod=new TestMethodMeta();
    testMethod.classMeta=targetClassMeta;
    testMethod.isTypeTest=true;
    dest.add(testMethod);
  }
  if (targetClassMeta.constructors.size() > 0) {
    ConstructorMeta notPrivateConstructor=null;
    for (    ConstructorMeta constructor : targetClassMeta.constructors) {
      if (constructor.accessModifier != AccessModifier.Private) {
        notPrivateConstructor=constructor;
        break;
      }
    }
    if (notPrivateConstructor != null) {
      if (!checkTargetSourceCode.matches(RegExp.Anything_ZeroOrMore_Min + ""String_Node_Str"" + RegExp.Anything_ZeroOrMore_Min)) {
        TestMethodMeta testMethod=new TestMethodMeta();
        testMethod.classMeta=targetClassMeta;
        testMethod.isInstantiationTest=true;
        dest.add(testMethod);
      }
    }
  }
  for (  MethodMeta methodMeta : targetClassMeta.methods) {
    TestMethodMeta testMethodMeta=new TestMethodMeta();
    testMethodMeta.methodMeta=methodMeta;
    String testMethodNamePrefix=testMethodGenerator.getTestMethodNamePrefix(testMethodMeta);
    if (!checkTargetSourceCode.matches(RegExp.Anything_ZeroOrMore_Min + testMethodNamePrefix.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ RegExp.Anything_ZeroOrMore_Min)) {
      if (config.target.isAccessorExcluded && methodMeta.isAccessor) {
        continue;
      }
      if ((methodMeta.accessModifier == AccessModifier.Public && config.target.isPublicMethodRequired) || (methodMeta.accessModifier == AccessModifier.Protected && config.target.isProtectedMethodRequired) || (methodMeta.accessModifier == AccessModifier.PackageLocal && config.target.isPackageLocalMethodRequired)) {
        dest.add(testMethodGenerator.getTestMethodMeta(methodMeta));
        if (config.target.isExceptionPatternRequired) {
          for (          ExceptionMeta exceptionMeta : methodMeta.throwsExceptions) {
            dest.add(testMethodGenerator.getTestMethodMeta(methodMeta,exceptionMeta));
          }
        }
      }
    }
  }
  return dest;
}",0.9960605432303544
12020,"@Test public void getLackingTestMethodMetaList_A$String() throws Exception {
  String sourceCodeString=""String_Node_Str"";
  ClassMeta targetClassMeta=classMetaExtractor.extract(sourceCodeString);
  target.initialize(targetClassMeta);
  String currentTestCaseSourceCode=""String_Node_Str"";
  List<TestMethodMeta> actual=target.getLackingTestMethodMetaList(currentTestCaseSourceCode);
  assertEquals(3,actual.size());
  assertEquals(true,actual.get(0).isTypeTest);
  assertEquals(true,actual.get(1).isInstantiationTest);
  assertEquals(""String_Node_Str"",actual.get(2).methodMeta.name);
}","@Test public void getLackingTestMethodMetaList_A$String() throws Exception {
  String sourceCodeString=""String_Node_Str"";
  ClassMeta targetClassMeta=classMetaExtractor.extract(sourceCodeString);
  target.initialize(targetClassMeta);
  String currentTestCaseSourceCode=""String_Node_Str"";
  List<TestMethodMeta> actual=target.getLackingTestMethodMetaList(currentTestCaseSourceCode);
  assertEquals(4,actual.size());
  assertEquals(true,actual.get(0).isTypeTest);
  assertEquals(true,actual.get(1).isInstantiationTest);
  assertEquals(""String_Node_Str"",actual.get(2).methodMeta.name);
  assertEquals(""String_Node_Str"",actual.get(3).methodMeta.name);
}",0.94566098945661
12021,"String getArgValue(TestMethodMeta testMethodMeta,ArgTypeMeta argTypeMeta,String argName){
  AvailableTypeDetector availableTypeDetector=new AvailableTypeDetector(targetClassMeta);
  if (availableTypeDetector.isJavaLangPackageType(argTypeMeta.name)) {
    return ""String_Node_Str"";
  }
 else   if (PrimitiveTypeUtil.isPrimitive(argTypeMeta.name)) {
    return PrimitiveTypeUtil.getTypeDefaultValue(argTypeMeta.name);
  }
 else   if (argTypeMeta.name.matches(""String_Node_Str"")) {
    return ""String_Node_Str"" + argTypeMeta.name + ""String_Node_Str"";
  }
 else   if (argTypeMeta.name.matches(""String_Node_Str"") && availableTypeDetector.isAvailableType(""String_Node_Str"",config)) {
    targetClassMeta.importedList.add(""String_Node_Str"");
    return ""String_Node_Str"" + argTypeMeta.getGenericsAsString() + ""String_Node_Str"";
  }
 else   if (argTypeMeta.name.matches(""String_Node_Str"") && availableTypeDetector.isAvailableType(""String_Node_Str"",config)) {
    targetClassMeta.importedList.add(""String_Node_Str"");
    return ""String_Node_Str"" + argTypeMeta.getGenericsAsString() + ""String_Node_Str"";
  }
 else   if (config.mockObjectFramework == MockObjectFramework.EasyMock) {
    return ""String_Node_Str"" + argTypeMeta.nameInMethodName + ""String_Node_Str"";
  }
 else   if (config.mockObjectFramework == MockObjectFramework.JMock2) {
    return ""String_Node_Str"" + argTypeMeta.nameInMethodName + ""String_Node_Str"";
  }
 else   if (config.mockObjectFramework == MockObjectFramework.JMockit) {
    if (new AvailableTypeDetector(targetClassMeta).isJMockitMockableType(argTypeMeta.name)) {
      return ""String_Node_Str"" + getTestMethodNamePrefix(testMethodMeta,testMethodMeta.testingTargetException) + ""String_Node_Str""+ argName;
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else   if (config.mockObjectFramework == MockObjectFramework.Mockito) {
    return ""String_Node_Str"" + argTypeMeta.nameInMethodName + ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}","String getArgValue(TestMethodMeta testMethodMeta,ArgTypeMeta argTypeMeta,String argName){
  AvailableTypeDetector availableTypeDetector=new AvailableTypeDetector(targetClassMeta);
  if (availableTypeDetector.isJavaLangPackageType(argTypeMeta.name)) {
    return ""String_Node_Str"";
  }
 else   if (PrimitiveTypeUtil.isPrimitive(argTypeMeta.name)) {
    return PrimitiveTypeUtil.getTypeDefaultValue(argTypeMeta.name);
  }
 else   if (argTypeMeta.name.matches(""String_Node_Str"")) {
    return ""String_Node_Str"" + argTypeMeta.name + ""String_Node_Str"";
  }
 else   if (argTypeMeta.name.matches(""String_Node_Str"") && availableTypeDetector.isAvailableType(""String_Node_Str"",config)) {
    targetClassMeta.importedList.add(""String_Node_Str"");
    return ""String_Node_Str"" + argTypeMeta.getGenericsAsString() + ""String_Node_Str"";
  }
 else   if (argTypeMeta.name.matches(""String_Node_Str"") && availableTypeDetector.isAvailableType(""String_Node_Str"",config)) {
    targetClassMeta.importedList.add(""String_Node_Str"");
    return ""String_Node_Str"" + argTypeMeta.getGenericsAsString() + ""String_Node_Str"";
  }
 else   if (config.mockObjectFramework == MockObjectFramework.EasyMock) {
    return ""String_Node_Str"" + argTypeMeta.name.replaceAll(RegExp.Generics,StringValue.Empty) + ""String_Node_Str"";
  }
 else   if (config.mockObjectFramework == MockObjectFramework.JMock2) {
    return ""String_Node_Str"" + argTypeMeta.name.replaceAll(RegExp.Generics,StringValue.Empty) + ""String_Node_Str"";
  }
 else   if (config.mockObjectFramework == MockObjectFramework.JMockit) {
    if (new AvailableTypeDetector(targetClassMeta).isJMockitMockableType(argTypeMeta.name)) {
      return ""String_Node_Str"" + getTestMethodNamePrefix(testMethodMeta,testMethodMeta.testingTargetException) + ""String_Node_Str""+ argName;
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else   if (config.mockObjectFramework == MockObjectFramework.Mockito) {
    return ""String_Node_Str"" + argTypeMeta.name.replaceAll(RegExp.Generics,StringValue.Empty) + ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}",0.9571428571428572
12022,"@Test public void getArgValue_A$TestMethodMeta$ArgTypeMeta$String() throws Exception {
  String sourceCodeString=""String_Node_Str"";
  ClassMeta targetClassMeta=classMetaExtractor.extract(sourceCodeString);
  target.initialize(targetClassMeta);
  MethodMeta targetMethodMeta=targetClassMeta.methods.get(0);
  TestMethodMeta testMethodMeta=target.getTestMethodMeta(targetMethodMeta);
  ArgTypeMeta argTypeMeta=targetMethodMeta.argTypes.get(0);
  String argName=targetMethodMeta.argNames.get(0);
  String actual=target.getArgValue(testMethodMeta,argTypeMeta,argName);
  String expected=""String_Node_Str"";
  assertEquals(expected,actual);
}","@Test public void getArgValue_A$TestMethodMeta$ArgTypeMeta$String() throws Exception {
  String sourceCodeString=""String_Node_Str"";
  ClassMeta targetClassMeta=classMetaExtractor.extract(sourceCodeString);
  target.initialize(targetClassMeta);
  MethodMeta targetMethodMeta=targetClassMeta.methods.get(0);
  TestMethodMeta testMethodMeta=target.getTestMethodMeta(targetMethodMeta);
  assertEquals(""String_Node_Str"",target.getArgValue(testMethodMeta,targetMethodMeta.argTypes.get(0),targetMethodMeta.argNames.get(0)));
  assertEquals(""String_Node_Str"",target.getArgValue(testMethodMeta,targetMethodMeta.argTypes.get(1),targetMethodMeta.argNames.get(1)));
  assertEquals(""String_Node_Str"",target.getArgValue(testMethodMeta,targetMethodMeta.argTypes.get(2),targetMethodMeta.argNames.get(2)));
  assertEquals(""String_Node_Str"",target.getArgValue(testMethodMeta,targetMethodMeta.argTypes.get(3),targetMethodMeta.argNames.get(3)));
  assertEquals(""String_Node_Str"",target.getArgValue(testMethodMeta,targetMethodMeta.argTypes.get(4),targetMethodMeta.argNames.get(4)));
}",0.5956444967628016
12023,"@Override public List<TestMethodMeta> getLackingTestMethodMetaList(String currentTestCaseSourceCode){
  List<TestMethodMeta> dest=new ArrayList<TestMethodMeta>();
  String checkTargetSourceCode=TrimFilterUtil.doAllFilters(currentTestCaseSourceCode);
  if (!checkTargetSourceCode.matches(RegExp.Anything_ZeroOrMore_Min + ""String_Node_Str"" + RegExp.Anything_ZeroOrMore_Min)) {
    TestMethodMeta testMethod=new TestMethodMeta();
    testMethod.classMeta=targetClassMeta;
    testMethod.isTypeTest=true;
    dest.add(testMethod);
  }
  if (targetClassMeta.constructors.size() > 0) {
    ConstructorMeta notPrivateConstructor=null;
    for (    ConstructorMeta constructor : targetClassMeta.constructors) {
      if (constructor.accessModifier != AccessModifier.Private) {
        notPrivateConstructor=constructor;
        break;
      }
    }
    if (notPrivateConstructor != null) {
      if (!checkTargetSourceCode.matches(RegExp.Anything_ZeroOrMore_Min + ""String_Node_Str"" + RegExp.Anything_ZeroOrMore_Min)) {
        TestMethodMeta testMethod=new TestMethodMeta();
        testMethod.classMeta=targetClassMeta;
        testMethod.isInstantiationTest=true;
        dest.add(testMethod);
      }
    }
  }
  for (  MethodMeta methodMeta : targetClassMeta.methods) {
    TestMethodMeta testMethodMeta=new TestMethodMeta();
    testMethodMeta.methodMeta=methodMeta;
    String testMethodNamePrefix=testMethodGenerator.getTestMethodNamePrefix(testMethodMeta);
    if (!checkTargetSourceCode.matches(RegExp.Anything_ZeroOrMore_Min + testMethodNamePrefix.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ RegExp.Anything_ZeroOrMore_Min)) {
      if (config.target.isAccessorExcluded && methodMeta.isAccessor) {
        continue;
      }
      if ((methodMeta.accessModifier == AccessModifier.Public && config.target.isPublicMethodRequired) || (methodMeta.accessModifier == AccessModifier.Protected && config.target.isProtectedMethodRequired) || (methodMeta.accessModifier == AccessModifier.PackageLocal && config.target.isPackageLocalMethodRequired)) {
        dest.add(testMethodGenerator.getTestMethodMeta(methodMeta));
        if (config.target.isExceptionPatternRequired) {
          for (          ExceptionMeta exceptionMeta : methodMeta.throwsExceptions) {
            dest.add(testMethodGenerator.getTestMethodMeta(methodMeta,exceptionMeta));
          }
        }
      }
    }
  }
  return dest;
}","@Override public List<TestMethodMeta> getLackingTestMethodMetaList(String currentTestCaseSourceCode){
  List<TestMethodMeta> dest=new ArrayList<TestMethodMeta>();
  String checkTargetSourceCode=TrimFilterUtil.doAllFilters(currentTestCaseSourceCode);
  if (!checkTargetSourceCode.matches(RegExp.Anything_ZeroOrMore_Min + ""String_Node_Str"" + RegExp.Anything_ZeroOrMore_Min)) {
    TestMethodMeta testMethod=new TestMethodMeta();
    testMethod.classMeta=targetClassMeta;
    testMethod.isTypeTest=true;
    dest.add(testMethod);
  }
  if (targetClassMeta.constructors.size() > 0) {
    ConstructorMeta notPrivateConstructor=null;
    for (    ConstructorMeta constructor : targetClassMeta.constructors) {
      if (constructor.accessModifier != AccessModifier.Private) {
        notPrivateConstructor=constructor;
        break;
      }
    }
    if (notPrivateConstructor != null) {
      if (!checkTargetSourceCode.matches(RegExp.Anything_ZeroOrMore_Min + ""String_Node_Str"" + RegExp.Anything_ZeroOrMore_Min)) {
        TestMethodMeta testMethod=new TestMethodMeta();
        testMethod.classMeta=targetClassMeta;
        testMethod.isInstantiationTest=true;
        dest.add(testMethod);
      }
    }
  }
  for (  MethodMeta methodMeta : targetClassMeta.methods) {
    TestMethodMeta testMethodMeta=new TestMethodMeta();
    testMethodMeta.methodMeta=methodMeta;
    String testMethodNamePrefix=testMethodGenerator.getTestMethodNamePrefix(testMethodMeta);
    String regExpForDiscriminateOverloadMethods=""String_Node_Str"";
    if (!config.testMethodName.isReturnRequired) {
      String argDelimiter=Matcher.quoteReplacement(config.testMethodName.argsAreaDelimiter);
      regExpForDiscriminateOverloadMethods=""String_Node_Str"" + argDelimiter + ""String_Node_Str"";
    }
    String regExpForCheckAlreadyExists=RegExp.Anything_ZeroOrMore_Min + Matcher.quoteReplacement(testMethodNamePrefix) + regExpForDiscriminateOverloadMethods+ RegExp.Anything_ZeroOrMore_Min;
    if (!checkTargetSourceCode.matches(regExpForCheckAlreadyExists)) {
      if (config.target.isAccessorExcluded && methodMeta.isAccessor) {
        continue;
      }
      if ((methodMeta.accessModifier == AccessModifier.Public && config.target.isPublicMethodRequired) || (methodMeta.accessModifier == AccessModifier.Protected && config.target.isProtectedMethodRequired) || (methodMeta.accessModifier == AccessModifier.PackageLocal && config.target.isPackageLocalMethodRequired)) {
        dest.add(testMethodGenerator.getTestMethodMeta(methodMeta));
        if (config.target.isExceptionPatternRequired) {
          for (          ExceptionMeta exceptionMeta : methodMeta.throwsExceptions) {
            dest.add(testMethodGenerator.getTestMethodMeta(methodMeta,exceptionMeta));
          }
        }
      }
    }
  }
  return dest;
}",0.8634361233480177
12024,"/** 
 * Get the information on the unimplemented test methods.
 * @param testTargetClassname test target class name
 * @param testTarget test target class source code file
 * @param testCase test class source code file
 * @return the information on test class with the unimplemented test methods
 * @throws Exception
 */
public static ClassInfo getClassInfoWithUnimplementedTestMethods(String testTargetClassname,IFile testTarget,IFile testCase) throws Exception {
  PreferenceLoader pref=new PreferenceLoader(store);
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> unimplementedMethodNames=new ArrayList<MethodInfo>();
  if (pref.isTestMethodGenEnabled) {
    ClassInfo expectedClassInfo=getTestClassInfoFromTargetClass(testTargetClassname,testTarget);
    List<MethodInfo> expectedMethods=expectedClassInfo.methods;
    ClassInfo actualClassInfo=getMethodNamesAlreadyExists(testCase);
    List<MethodInfo> actualMethods=actualClassInfo.methods;
    for (    MethodInfo expected : expectedMethods) {
      boolean exist=false;
      for (      MethodInfo actual : actualMethods) {
        String escapedExp=expected.testMethodName.replace(StrConst.testMethodPrefix4Version3,StrConst.empty).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",StrConst.empty);
        if (actual.testMethodName.matches(""String_Node_Str"" + escapedExp + ""String_Node_Str"")) {
          exist=true;
          break;
        }
      }
      if (!exist)       unimplementedMethodNames.add(expected);
    }
    if (pref.isTestMethodGenNotBlankEnabled) {
      List<String> notImportedList=new ArrayList<String>();
      List<String> expImportedList=expectedClassInfo.importList;
      List<String> actImportedList=actualClassInfo.importList;
      for (      String expImported : expImportedList) {
        boolean found=false;
        for (        String actImported : actImportedList) {
          if (expImported.equals(actImported)) {
            found=true;
            break;
          }
        }
        if (!found)         notImportedList.add(expImported);
 else         notImportedList.add(""String_Node_Str"" + expImported);
      }
      classInfo.importList=notImportedList;
      classInfo.importList=setupRequiredImports(pref,actImportedList,classInfo.importList);
    }
    classInfo.constructors=expectedClassInfo.constructors;
  }
  classInfo.methods=unimplementedMethodNames;
  return classInfo;
}","/** 
 * Get the information on the unimplemented test methods.
 * @param testTargetClassname test target class name
 * @param testTarget test target class source code file
 * @param testCase test class source code file
 * @return the information on test class with the unimplemented test methods
 * @throws Exception
 */
public static ClassInfo getClassInfoWithUnimplementedTestMethods(String testTargetClassname,IFile testTarget,IFile testCase) throws Exception {
  PreferenceLoader pref=new PreferenceLoader(store);
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> unimplementedMethodNames=new ArrayList<MethodInfo>();
  if (pref.isTestMethodGenEnabled) {
    ClassInfo expectedClassInfo=getTestClassInfoFromTargetClass(testTargetClassname,testTarget);
    List<MethodInfo> expectedMethods=expectedClassInfo.methods;
    ClassInfo actualClassInfo=getMethodNamesAlreadyExists(testCase);
    List<MethodInfo> actualMethods=actualClassInfo.methods;
    for (    MethodInfo expected : expectedMethods) {
      if (!isAlreadyExistInActualTestCase(expected.methodName,actualMethods)) {
        unimplementedMethodNames.add(expected);
      }
    }
    if (pref.isTestMethodGenNotBlankEnabled) {
      List<String> notImportedList=new ArrayList<String>();
      List<String> expImportedList=expectedClassInfo.importList;
      List<String> actImportedList=actualClassInfo.importList;
      for (      String expImported : expImportedList) {
        boolean found=false;
        for (        String actImported : actImportedList) {
          if (expImported.equals(actImported)) {
            found=true;
            break;
          }
        }
        if (!found)         notImportedList.add(expImported);
 else         notImportedList.add(""String_Node_Str"" + expImported);
      }
      classInfo.importList=notImportedList;
      classInfo.importList=setupRequiredImports(pref,actImportedList,classInfo.importList);
    }
    classInfo.constructors=expectedClassInfo.constructors;
  }
  classInfo.methods=unimplementedMethodNames;
  return classInfo;
}",0.8768956289027654
12025,"public void run(IAction action){
  if (store == null) {
    store=Activator.getDefault().getPreferenceStore();
  }
  PreferenceLoader pref=new PreferenceLoader(store);
  PropertiesLoader props=new PropertiesLoader(store.getString(Preference.lang));
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String projectName=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
    if (structuredSelection != null && structuredSelection.size() == 0) {
      MessageDialog.openWarning(new Shell(),props.get(Dialog.Common.title),props.get(Dialog.Common.required));
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      MessageDialog.openWarning(new Shell(),props.get(Dialog.Common.title),props.get(Dialog.Common.selectOneOnly));
    }
 else {
      String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
      String[] dirArrFromProjectRoot=pathFromProjectRoot.split(StrConst.dirSep);
      String selected=StrConst.empty;
      int allDirLen=dirArrFromProjectRoot.length - 1;
      for (int i=2; i < allDirLen; i++)       selected+=dirArrFromProjectRoot[i] + StrConst.dirSep;
      selected+=dirArrFromProjectRoot[allDirLen].replace(StrConst.suffixOfTestcase + StrConst.javaFileExp,StrConst.javaFileExp);
      projectName=dirArrFromProjectRoot[1];
      String projectRootPath=workspaceRoot.getLocation() + StrConst.dirSep + projectName+ StrConst.dirSep;
      if (!selected.matches(""String_Node_Str"" + RegExp.javaFileExp + ""String_Node_Str"")) {
        MessageDialog.openWarning(new Shell(),props.get(Dialog.Common.title),props.get(Dialog.Common.selectJavaFile));
      }
 else {
        String testTargetResource=selected.replace(pref.commonTestMainJavaDir,pref.commonSrcMainJavaDir);
        String testTargetPath=projectRootPath + selected.replace(pref.commonTestMainJavaDir,pref.commonSrcMainJavaDir);
        File outputFile=new File(testTargetPath);
        if (outputFile.exists()) {
          int retryCount=0;
          IEditorPart editorPart=null;
          while (true) {
            try {
              IProject project=workspaceRoot.getProject(projectName);
              IFile testCaseFile=project.getFile(testTargetResource);
              String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
              IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
              editorPart=IDE.openEditor(page,testCaseFile,editorId);
              editorPart.setFocus();
            }
 catch (            Exception e) {
              e.printStackTrace();
              retryCount++;
              if (retryCount > 10)               break;
              ThreadUtil.sleep(1500);
            }
            break;
          }
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void run(IAction action){
  if (store == null) {
    store=Activator.getDefault().getPreferenceStore();
  }
  PreferenceLoader pref=new PreferenceLoader(store);
  PropertiesLoader props=new PropertiesLoader(store.getString(Preference.lang));
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String projectName=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
    if (structuredSelection != null && structuredSelection.size() == 0) {
      MessageDialog.openWarning(new Shell(),props.get(Dialog.Common.title),props.get(Dialog.Common.required));
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      MessageDialog.openWarning(new Shell(),props.get(Dialog.Common.title),props.get(Dialog.Common.selectOneOnly));
    }
 else {
      String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
      String[] dirArrFromProjectRoot=pathFromProjectRoot.split(StrConst.dirSep);
      String selected=StrConst.empty;
      int allDirLen=dirArrFromProjectRoot.length - 1;
      for (int i=2; i < allDirLen; i++)       selected+=dirArrFromProjectRoot[i] + StrConst.dirSep;
      selected+=dirArrFromProjectRoot[allDirLen].replace(StrConst.suffixOfTestcase + StrConst.javaFileExp,StrConst.javaFileExp);
      projectName=dirArrFromProjectRoot[1];
      String projectRootPath=workspaceRoot.getLocation() + StrConst.dirSep + projectName+ StrConst.dirSep;
      if (!selected.matches(""String_Node_Str"" + RegExp.javaFileExp + ""String_Node_Str"")) {
        MessageDialog.openWarning(new Shell(),props.get(Dialog.Common.title),props.get(Dialog.Common.selectJavaFile));
      }
 else {
        String testTargetResource=selected.replaceFirst(pref.commonTestMainJavaDir,pref.commonSrcMainJavaDir);
        String testTargetPath=projectRootPath + selected.replaceFirst(pref.commonTestMainJavaDir,pref.commonSrcMainJavaDir);
        File outputFile=new File(testTargetPath);
        if (outputFile.exists()) {
          int retryCount=0;
          IEditorPart editorPart=null;
          while (true) {
            try {
              IProject project=workspaceRoot.getProject(projectName);
              IFile testCaseFile=project.getFile(testTargetResource);
              String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
              IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
              editorPart=IDE.openEditor(page,testCaseFile,editorId);
              editorPart.setFocus();
            }
 catch (            Exception e) {
              e.printStackTrace();
              retryCount++;
              if (retryCount > 10)               break;
              ThreadUtil.sleep(1500);
            }
            break;
          }
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.998335552596538
12026,"/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param javaFile
 * @return the information on the test methods
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(String testTargetClassname,IFile javaFile) throws InvalidPreferenceException, IOException {
  PreferenceLoader pref=new PreferenceLoader();
  ClassInfo classInfo=new ClassInfo();
  classInfo.name=testTargetClassname;
  List<ConstructorInfo> constructors=new ArrayList<ConstructorInfo>();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=FileResourceUtil.readFile(javaFile);
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null) {
      line+=StrConst.lineFeed;
      tmpsb.append(SourceCodeParseUtil.trimLineComments(line));
      tmpsb.append(StrConst.space);
    }
    String targetClassSourceStrWithoutComments=SourceCodeParseUtil.trimAllComments(tmpsb.toString());
    String targetClassSourceStr=SourceCodeParseUtil.trimInsideOfBraces(targetClassSourceStrWithoutComments);
    if (pref.isTestMethodGenNotBlankEnabled) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importLine : importLines) {
        importLine=importLine.replaceAll(StrConst.lineFeed,StrConst.empty);
        if (!importLine.matches(""String_Node_Str"") && !importLine.matches(""String_Node_Str"")) {
          String importedPackage=importLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      if (pref.isJUnitVersion3) {
      }
 else       if (pref.isJUnitVersion4) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        if (pref.isUsingJUnitHelperRuntime) {
          classInfo.importList.add(""String_Node_Str"");
        }
      }
      if (pref.isTestMethodGenEnabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportMockito) {
        classInfo.importList.add(""String_Node_Str"");
      }
    }
    List<String> targetConstructors=SourceCodeParseUtil.getTargetConstructors(classInfo.name,targetClassSourceStr,true,true,true);
    for (    String target : targetConstructors) {
      String groupConstructor=RegExp.wsAsteriskMax + classInfo.name + ""String_Node_Str""+ RegExp.wsAsteriskMax+ ""String_Node_Str""+ RegExp.wsAsteriskMax+ ""String_Node_Str"";
      Matcher constructorMatcher=Pattern.compile(groupConstructor).matcher(target);
      if (constructorMatcher.find()) {
        ConstructorInfo each=new ConstructorInfo();
        String args=constructorMatcher.group(1);
        String[] tmpArr=args.split(StrConst.comma);
        int tmpArrLen=tmpArr.length;
        List<String> tmpArrList=new ArrayList<String>();
        String buf=StrConst.empty;
        for (int i=0; i < tmpArrLen; i++) {
          String element=tmpArr[i].trim();
          if (element.matches(""String_Node_Str"")) {
            tmpArrList.add(element);
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            buf+=element;
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            String result=buf + StrConst.comma + element;
            tmpArrList.add(result);
            buf=StrConst.empty;
            continue;
          }
          if (!buf.equals(StrConst.empty)) {
            buf+=StrConst.comma + element;
            continue;
          }
          tmpArrList.add(element);
        }
        String[] argArr=tmpArrList.toArray(new String[0]);
        if (pref.isTestMethodGenNotBlankEnabled) {
          int argArrLen=argArr.length;
          for (int i=0; i < argArrLen; i++) {
            ArgType argType=new ArgType();
            String argTypeFull=argArr[i];
            Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(argTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,StrConst.empty,classInfo.importList);
                argType.generics.add(generic);
              }
            }
            String argTypeStr=argTypeFull.replaceAll(RegExp.generics,StrConst.empty);
            argType.name=getType(argTypeStr);
            argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
            each.argTypes.add(argType);
            Matcher nameMatcher=RegExp.groupMethodArgNamePattern.matcher(argTypeFull);
            if (nameMatcher.find()) {
              each.argNames.add(nameMatcher.group(1));
            }
 else {
              each.argNames.add(""String_Node_Str"" + i);
            }
          }
        }
        constructors.add(each);
      }
    }
    List<String> targets=SourceCodeParseUtil.getTargetMethods(targetClassSourceStr,pref.isTestMethodGenIncludePublic,pref.isTestMethodGenIncludeProtected,pref.isTestMethodGenIncludePackageLocal);
    for (    String target : targets) {
      Matcher matcher=RegExp.groupMethodPattern.matcher(target);
      if (matcher.find()) {
        MethodInfo each=new MethodInfo();
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenReturnEnabled) {
          String returnTypeFull=getType(matcher.group(1));
          Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(returnTypeFull);
          while (toGenericsMatcher.find()) {
            String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
            for (            String generic : generics) {
              generic=getClassInSourceCode(generic,StrConst.empty,classInfo.importList);
              each.returnType.generics.add(generic);
            }
          }
          each.returnType.name=returnTypeFull.replace(RegExp.generics,StrConst.empty);
          each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
        }
        each.methodName=matcher.group(2);
        String args=matcher.group(3);
        String[] tmpArr=args.split(StrConst.comma);
        int tmpArrLen=tmpArr.length;
        List<String> tmpArrList=new ArrayList<String>();
        String buf=StrConst.empty;
        for (int i=0; i < tmpArrLen; i++) {
          String element=tmpArr[i].trim();
          if (element.matches(""String_Node_Str"")) {
            tmpArrList.add(element);
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            buf+=element;
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            String result=buf + StrConst.comma + element;
            tmpArrList.add(result);
            buf=StrConst.empty;
            continue;
          }
          if (!buf.equals(StrConst.empty)) {
            buf+=StrConst.comma + element;
            continue;
          }
          tmpArrList.add(element);
        }
        String[] argArr=tmpArrList.toArray(new String[0]);
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenArgsEnabled) {
          int argArrLen=argArr.length;
          for (int i=0; i < argArrLen; i++) {
            ArgType argType=new ArgType();
            String argTypeFull=argArr[i];
            Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(argTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,StrConst.empty,classInfo.importList);
                argType.generics.add(generic);
              }
            }
            String argTypeStr=argTypeFull.replaceAll(RegExp.generics,StrConst.empty);
            argType.name=getType(argTypeStr);
            argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
            each.argTypes.add(argType);
            Matcher nameMatcher=RegExp.groupMethodArgNamePattern.matcher(argTypeFull);
            if (nameMatcher.find()) {
              each.argNames.add(nameMatcher.group(1));
            }
 else {
              each.argNames.add(""String_Node_Str"" + i);
            }
          }
        }
        if (pref.isTestMethodGenExecludeAccessors) {
          String fieldName=null;
          String fieldType=null;
          if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            if (each.argTypes.size() > 0) {
              fieldType=each.argTypes.get(0).name;
            }
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            fieldType=each.returnType.name;
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(2);
            fieldType=each.returnType.name;
          }
          if (fieldName != null) {
            fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
            fieldType=fieldType.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
            String searchRegexp=""String_Node_Str"" + fieldType + ""String_Node_Str""+ RegExp.generics+ ""String_Node_Str""+ RegExp.wsPlusMax+ fieldName+ ""String_Node_Str"";
            if (targetClassSourceStr.replaceAll(RegExp.crlf,StrConst.empty).matches(searchRegexp)) {
              continue;
            }
          }
        }
        String prefix=pref.isJUnitVersion3 ? StrConst.testMethodPrefix4Version3 + pref.testMethodDelimiter : StrConst.empty;
        each.testMethodName=prefix + each.methodName;
        if (pref.isTestMethodGenArgsEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodArgsPrefix;
          if (each.argTypes.size() == 0) {
            each.testMethodName+=pref.testMethodArgsDelimiter;
          }
          for (          ArgType argType : each.argTypes) {
            each.testMethodName+=pref.testMethodArgsDelimiter + argType.nameInMethodName;
          }
        }
        if (pref.isTestMethodGenReturnEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodReturnPrefix + pref.testMethodReturnDelimiter+ each.returnType.nameInMethodName;
        }
        if (target.matches(RegExp.matchesStaticMethod)) {
          each.isStatic=true;
        }
        testMethods.add(each);
        if (pref.isTestMethodGenExceptions) {
          String throwsExceptions=matcher.group(4);
          if (throwsExceptions != null) {
            String[] exceptions=throwsExceptions.replaceAll(""String_Node_Str"" + RegExp.wsPlusMax,StrConst.empty).split(StrConst.comma);
            for (            String exp : exceptions) {
              exp=exp.trim();
              MethodInfo expTest=ObjectUtil.deepCopy(each);
              expTest.testingTargetException=new ExceptionInfo();
              expTest.testingTargetException.name=exp;
              expTest.testingTargetException.nameInMethodName=TestCaseGenerateUtil.getTypeAvailableInMethodName(exp);
              expTest.testMethodName=expTest.testMethodName + pref.testMethodDelimiter + pref.testMethodExceptionPrefix+ pref.testMethodExceptionDelimiter+ expTest.testingTargetException.nameInMethodName;
              testMethods.add(expTest);
            }
          }
        }
      }
    }
  }
  finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.constructors=constructors;
  classInfo.methods=testMethods;
  return classInfo;
}","/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param javaFile
 * @return the information on the test methods
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(String testTargetClassname,IFile javaFile) throws InvalidPreferenceException, IOException {
  PreferenceLoader pref=new PreferenceLoader();
  ClassInfo classInfo=new ClassInfo();
  classInfo.name=testTargetClassname;
  List<ConstructorInfo> constructors=new ArrayList<ConstructorInfo>();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=FileResourceUtil.readFile(javaFile);
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null) {
      line+=StrConst.lineFeed;
      tmpsb.append(SourceCodeParseUtil.trimLineComments(line));
      tmpsb.append(StrConst.space);
    }
    String targetClassSourceStrWithoutComments=SourceCodeParseUtil.trimAllComments(tmpsb.toString());
    String targetClassSourceStr=SourceCodeParseUtil.trimInsideOfBraces(targetClassSourceStrWithoutComments);
    if (pref.isTestMethodGenNotBlankEnabled) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importLine : importLines) {
        importLine=importLine.replaceAll(StrConst.lineFeed,StrConst.empty);
        if (!importLine.matches(""String_Node_Str"") && !importLine.matches(""String_Node_Str"")) {
          String importedPackage=importLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      if (pref.isJUnitVersion3) {
      }
 else       if (pref.isJUnitVersion4) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        if (pref.isUsingJUnitHelperRuntime) {
          classInfo.importList.add(""String_Node_Str"");
        }
      }
      if (pref.isTestMethodGenEnabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportMockito) {
        classInfo.importList.add(""String_Node_Str"");
      }
    }
    constructors=getConstructors(pref,classInfo,targetClassSourceStr);
    List<String> targets=SourceCodeParseUtil.getTargetMethods(targetClassSourceStr,pref.isTestMethodGenIncludePublic,pref.isTestMethodGenIncludeProtected,pref.isTestMethodGenIncludePackageLocal);
    for (    String target : targets) {
      Matcher matcher=RegExp.groupMethodPattern.matcher(target);
      if (matcher.find()) {
        MethodInfo each=new MethodInfo();
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenReturnEnabled) {
          String returnTypeFull=getType(matcher.group(1));
          Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(returnTypeFull);
          while (toGenericsMatcher.find()) {
            String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
            for (            String generic : generics) {
              generic=getClassInSourceCode(generic,StrConst.empty,classInfo.importList);
              each.returnType.generics.add(generic);
            }
          }
          each.returnType.name=returnTypeFull.replace(RegExp.generics,StrConst.empty);
          each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
        }
        each.methodName=matcher.group(2);
        String args=matcher.group(3);
        String[] tmpArr=args.split(StrConst.comma);
        int tmpArrLen=tmpArr.length;
        List<String> tmpArrList=new ArrayList<String>();
        String buf=StrConst.empty;
        for (int i=0; i < tmpArrLen; i++) {
          String element=tmpArr[i].trim();
          if (element.matches(""String_Node_Str"")) {
            tmpArrList.add(element);
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            buf+=element;
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            String result=buf + StrConst.comma + element;
            tmpArrList.add(result);
            buf=StrConst.empty;
            continue;
          }
          if (!buf.equals(StrConst.empty)) {
            buf+=StrConst.comma + element;
            continue;
          }
          tmpArrList.add(element);
        }
        String[] argArr=tmpArrList.toArray(new String[0]);
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenArgsEnabled) {
          int argArrLen=argArr.length;
          for (int i=0; i < argArrLen; i++) {
            ArgType argType=new ArgType();
            String argTypeFull=argArr[i];
            Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(argTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,StrConst.empty,classInfo.importList);
                argType.generics.add(generic);
              }
            }
            String argTypeStr=argTypeFull.replaceAll(RegExp.generics,StrConst.empty);
            argType.name=getType(argTypeStr);
            argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
            each.argTypes.add(argType);
            Matcher nameMatcher=RegExp.groupMethodArgNamePattern.matcher(argTypeFull);
            if (nameMatcher.find()) {
              each.argNames.add(nameMatcher.group(1));
            }
 else {
              each.argNames.add(""String_Node_Str"" + i);
            }
          }
        }
        if (pref.isTestMethodGenExecludeAccessors) {
          String fieldName=null;
          String fieldType=null;
          if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            if (each.argTypes.size() > 0) {
              fieldType=each.argTypes.get(0).name;
            }
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            fieldType=each.returnType.name;
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(2);
            fieldType=each.returnType.name;
          }
          if (fieldName != null) {
            fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
            fieldType=fieldType.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
            String searchRegexp=""String_Node_Str"" + fieldType + ""String_Node_Str""+ RegExp.generics+ ""String_Node_Str""+ RegExp.wsPlusMax+ fieldName+ ""String_Node_Str"";
            if (targetClassSourceStr.replaceAll(RegExp.crlf,StrConst.empty).matches(searchRegexp)) {
              continue;
            }
          }
        }
        String prefix=pref.isJUnitVersion3 ? StrConst.testMethodPrefix4Version3 + pref.testMethodDelimiter : StrConst.empty;
        each.testMethodName=prefix + each.methodName;
        if (pref.isTestMethodGenArgsEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodArgsPrefix;
          if (each.argTypes.size() == 0) {
            each.testMethodName+=pref.testMethodArgsDelimiter;
          }
          for (          ArgType argType : each.argTypes) {
            each.testMethodName+=pref.testMethodArgsDelimiter + argType.nameInMethodName;
          }
        }
        if (pref.isTestMethodGenReturnEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodReturnPrefix + pref.testMethodReturnDelimiter+ each.returnType.nameInMethodName;
        }
        if (target.matches(RegExp.matchesStaticMethod)) {
          each.isStatic=true;
        }
        testMethods.add(each);
        if (pref.isTestMethodGenExceptions) {
          String throwsExceptions=matcher.group(4);
          if (throwsExceptions != null) {
            String[] exceptions=throwsExceptions.replaceAll(""String_Node_Str"" + RegExp.wsPlusMax,StrConst.empty).split(StrConst.comma);
            for (            String exp : exceptions) {
              exp=exp.trim();
              MethodInfo expTest=ObjectUtil.deepCopy(each);
              expTest.testingTargetException=new ExceptionInfo();
              expTest.testingTargetException.name=exp;
              expTest.testingTargetException.nameInMethodName=TestCaseGenerateUtil.getTypeAvailableInMethodName(exp);
              expTest.testMethodName=expTest.testMethodName + pref.testMethodDelimiter + pref.testMethodExceptionPrefix+ pref.testMethodExceptionDelimiter+ expTest.testingTargetException.nameInMethodName;
              testMethods.add(expTest);
            }
          }
        }
      }
    }
  }
  finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.constructors=constructors;
  classInfo.methods=testMethods;
  return classInfo;
}",0.8709634433438458
12027,"/** 
 * Get the information on the unimplemented test methods.
 * @param testTarget
 * @param testCase
 * @return the information on test class with the unimplemented test methods
 * @throws Exception
 */
public static ClassInfo getClassInfoWithUnimplementedTestMethods(String testTargetClassname,IFile testTarget,IFile testCase) throws Exception {
  PreferenceLoader pref=new PreferenceLoader();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> unimplementedMethodNames=new ArrayList<MethodInfo>();
  if (pref.isTestMethodGenEnabled) {
    ClassInfo expectedClassInfo=getTestClassInfoFromTargetClass(testTargetClassname,testTarget);
    List<MethodInfo> expectedMethods=expectedClassInfo.methods;
    ClassInfo actualClassInfo=getMethodNamesAlreadyExists(testCase);
    List<MethodInfo> actualMethods=actualClassInfo.methods;
    for (    MethodInfo expected : expectedMethods) {
      boolean exist=false;
      for (      MethodInfo actual : actualMethods) {
        String escapedExp=expected.testMethodName.replace(StrConst.testMethodPrefix4Version3,StrConst.empty).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",StrConst.empty);
        if (actual.testMethodName.matches(""String_Node_Str"" + escapedExp + ""String_Node_Str"")) {
          exist=true;
          break;
        }
      }
      if (!exist)       unimplementedMethodNames.add(expected);
    }
    if (pref.isTestMethodGenNotBlankEnabled) {
      List<String> notImportedList=new ArrayList<String>();
      List<String> expImportedList=expectedClassInfo.importList;
      List<String> actImportedList=actualClassInfo.importList;
      for (      String expImported : expImportedList) {
        boolean found=false;
        for (        String actImported : actImportedList) {
          if (expImported.equals(actImported)) {
            found=true;
            break;
          }
        }
        if (!found)         notImportedList.add(expImported);
 else         notImportedList.add(""String_Node_Str"" + expImported);
      }
      classInfo.importList=notImportedList;
      if (pref.isTestMethodGenEnabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportMockito) {
        classInfo.importList.add(""String_Node_Str"");
      }
    }
  }
  classInfo.methods=unimplementedMethodNames;
  return classInfo;
}","/** 
 * Get the information on the unimplemented test methods.
 * @param testTarget
 * @param testCase
 * @return the information on test class with the unimplemented test methods
 * @throws Exception
 */
public static ClassInfo getClassInfoWithUnimplementedTestMethods(String testTargetClassname,IFile testTarget,IFile testCase) throws Exception {
  PreferenceLoader pref=new PreferenceLoader();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> unimplementedMethodNames=new ArrayList<MethodInfo>();
  if (pref.isTestMethodGenEnabled) {
    ClassInfo expectedClassInfo=getTestClassInfoFromTargetClass(testTargetClassname,testTarget);
    List<MethodInfo> expectedMethods=expectedClassInfo.methods;
    ClassInfo actualClassInfo=getMethodNamesAlreadyExists(testCase);
    List<MethodInfo> actualMethods=actualClassInfo.methods;
    for (    MethodInfo expected : expectedMethods) {
      boolean exist=false;
      for (      MethodInfo actual : actualMethods) {
        String escapedExp=expected.testMethodName.replace(StrConst.testMethodPrefix4Version3,StrConst.empty).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",StrConst.empty);
        if (actual.testMethodName.matches(""String_Node_Str"" + escapedExp + ""String_Node_Str"")) {
          exist=true;
          break;
        }
      }
      if (!exist)       unimplementedMethodNames.add(expected);
    }
    if (pref.isTestMethodGenNotBlankEnabled) {
      List<String> notImportedList=new ArrayList<String>();
      List<String> expImportedList=expectedClassInfo.importList;
      List<String> actImportedList=actualClassInfo.importList;
      for (      String expImported : expImportedList) {
        boolean found=false;
        for (        String actImported : actImportedList) {
          if (expImported.equals(actImported)) {
            found=true;
            break;
          }
        }
        if (!found)         notImportedList.add(expImported);
 else         notImportedList.add(""String_Node_Str"" + expImported);
      }
      classInfo.importList=notImportedList;
      if (pref.isTestMethodGenEnabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportMockito) {
        classInfo.importList.add(""String_Node_Str"");
      }
    }
    classInfo.constructors=expectedClassInfo.constructors;
  }
  classInfo.methods=unimplementedMethodNames;
  return classInfo;
}",0.9890314184792712
12028,"/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param testTargetClassname test target class name
 * @param javaFile Java source code file
 * @return the information on the test case class
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(String testTargetClassname,IFile javaFile) throws InvalidPreferenceException, IOException {
  PreferenceLoader pref=new PreferenceLoader(store);
  ClassInfo classInfo=new ClassInfo();
  classInfo.name=testTargetClassname;
  List<ConstructorInfo> constructors=new ArrayList<ConstructorInfo>();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=FileResourceUtil.readFile(javaFile);
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null) {
      line+=StrConst.lineFeed;
      tmpsb.append(SourceCodeParseUtil.trimLineComments(line));
      tmpsb.append(StrConst.space);
    }
    String targetClassSourceStrWithoutComments=SourceCodeParseUtil.trimAllComments(tmpsb.toString());
    String targetClassSourceStr=SourceCodeParseUtil.trimInsideOfBraces(targetClassSourceStrWithoutComments);
    if (pref.isTestMethodGenNotBlankEnabled) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importLine : importLines) {
        importLine=importLine.replaceAll(StrConst.lineFeed,StrConst.empty);
        if (!importLine.matches(""String_Node_Str"") && !importLine.matches(""String_Node_Str"")) {
          String importedPackage=importLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      classInfo.importList=setupRequiredImports(pref,new ArrayList<String>(),classInfo.importList);
    }
    constructors=getConstructors(pref,classInfo,targetClassSourceStr);
    List<String> targets=SourceCodeParseUtil.getTargetMethods(targetClassSourceStr,pref.isTestMethodGenIncludePublic,pref.isTestMethodGenIncludeProtected,pref.isTestMethodGenIncludePackageLocal);
    for (    String target : targets) {
      Matcher matcher=RegExp.groupMethodPattern.matcher(target);
      if (matcher.find()) {
        MethodInfo each=new MethodInfo();
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenReturnEnabled) {
          String returnTypeFull=getType(matcher.group(1));
          Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(returnTypeFull);
          while (toGenericsMatcher.find()) {
            String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
            for (            String generic : generics) {
              generic=getClassInSourceCode(generic,StrConst.empty,classInfo.importList);
              each.returnType.generics.add(generic);
            }
          }
          each.returnType.name=returnTypeFull.replace(RegExp.generics,StrConst.empty);
          each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
        }
        each.methodName=matcher.group(2);
        String args=matcher.group(3);
        String[] tmpArr=args.split(StrConst.comma);
        int tmpArrLen=tmpArr.length;
        List<String> tmpArrList=new ArrayList<String>();
        String buf=StrConst.empty;
        for (int i=0; i < tmpArrLen; i++) {
          String element=tmpArr[i].trim();
          if (element.matches(""String_Node_Str"")) {
            tmpArrList.add(element);
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            buf+=element;
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            String result=buf + StrConst.comma + element;
            tmpArrList.add(result);
            buf=StrConst.empty;
            continue;
          }
          if (!buf.equals(StrConst.empty)) {
            buf+=StrConst.comma + element;
            continue;
          }
          tmpArrList.add(element);
        }
        String[] argArr=tmpArrList.toArray(new String[0]);
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenArgsEnabled) {
          int argArrLen=argArr.length;
          for (int i=0; i < argArrLen; i++) {
            ArgType argType=new ArgType();
            String argTypeFull=argArr[i];
            Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(argTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,StrConst.empty,classInfo.importList);
                argType.generics.add(generic);
              }
            }
            String argTypeStr=argTypeFull.replaceAll(RegExp.generics,StrConst.empty);
            argType.name=getType(argTypeStr);
            argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
            each.argTypes.add(argType);
            Matcher nameMatcher=RegExp.groupMethodArgNamePattern.matcher(argTypeFull);
            if (nameMatcher.find()) {
              each.argNames.add(nameMatcher.group(1));
            }
 else {
              each.argNames.add(""String_Node_Str"" + i);
            }
          }
        }
        if (pref.isTestMethodGenExecludeAccessors) {
          String fieldName=null;
          String fieldType=null;
          if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            if (each.argTypes.size() > 0) {
              fieldType=each.argTypes.get(0).name;
            }
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            fieldType=each.returnType.name;
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(2);
            fieldType=each.returnType.name;
          }
          if (fieldName != null) {
            fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
            fieldType=fieldType.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
            String searchRegexp=""String_Node_Str"" + fieldType + ""String_Node_Str""+ RegExp.generics+ ""String_Node_Str""+ RegExp.wsPlusMax+ fieldName+ ""String_Node_Str"";
            if (targetClassSourceStr.replaceAll(RegExp.crlf,StrConst.empty).matches(searchRegexp)) {
              continue;
            }
          }
        }
        String prefix=pref.isJUnitVersion3 ? StrConst.testMethodPrefix4Version3 + pref.testMethodDelimiter : StrConst.empty;
        each.testMethodName=prefix + each.methodName;
        if (pref.isTestMethodGenArgsEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodArgsPrefix;
          if (each.argTypes.size() == 0) {
            each.testMethodName+=pref.testMethodArgsDelimiter;
          }
          for (          ArgType argType : each.argTypes) {
            each.testMethodName+=pref.testMethodArgsDelimiter + argType.nameInMethodName;
          }
        }
        if (pref.isTestMethodGenReturnEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodReturnPrefix + pref.testMethodReturnDelimiter+ each.returnType.nameInMethodName;
        }
        if (target.matches(RegExp.matchesStaticMethod)) {
          each.isStatic=true;
        }
        testMethods.add(each);
        if (pref.isTestMethodGenExceptions) {
          String throwsExceptions=matcher.group(4);
          if (throwsExceptions != null) {
            String[] exceptions=throwsExceptions.replaceAll(""String_Node_Str"" + RegExp.wsPlusMax,StrConst.empty).split(StrConst.comma);
            for (            String exp : exceptions) {
              exp=exp.trim();
              MethodInfo expTest=ObjectUtil.deepCopy(each);
              expTest.testingTargetException=new ExceptionInfo();
              expTest.testingTargetException.name=exp;
              expTest.testingTargetException.nameInMethodName=TestCaseGenerateUtil.getTypeAvailableInMethodName(exp);
              expTest.testMethodName=expTest.testMethodName + pref.testMethodDelimiter + pref.testMethodExceptionPrefix+ pref.testMethodExceptionDelimiter+ expTest.testingTargetException.nameInMethodName;
              testMethods.add(expTest);
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.constructors=constructors;
  classInfo.methods=testMethods;
  return classInfo;
}","/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param testTargetClassname test target class name
 * @param javaFile Java source code file
 * @return the information on the test case class
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(String testTargetClassname,IFile javaFile) throws InvalidPreferenceException, IOException {
  PreferenceLoader pref=new PreferenceLoader(store);
  ClassInfo classInfo=new ClassInfo();
  classInfo.name=testTargetClassname;
  List<ConstructorInfo> constructors=new ArrayList<ConstructorInfo>();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=FileResourceUtil.readFile(javaFile);
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null) {
      line+=StrConst.lineFeed;
      tmpsb.append(SourceCodeParseUtil.trimLineComments(line));
      tmpsb.append(StrConst.space);
    }
    String targetClassSourceStrWithoutCommentsAndAnnotaions=SourceCodeParseUtil.trimAllAnnotations(SourceCodeParseUtil.trimAllComments(tmpsb.toString()));
    String targetClassSourceStr=SourceCodeParseUtil.trimInsideOfBraces(targetClassSourceStrWithoutCommentsAndAnnotaions);
    if (pref.isTestMethodGenNotBlankEnabled) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importLine : importLines) {
        importLine=importLine.replaceAll(StrConst.lineFeed,StrConst.empty);
        if (!importLine.matches(""String_Node_Str"") && !importLine.matches(""String_Node_Str"")) {
          String importedPackage=importLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      classInfo.importList=setupRequiredImports(pref,new ArrayList<String>(),classInfo.importList);
    }
    constructors=getConstructors(pref,classInfo,targetClassSourceStr);
    List<String> targets=SourceCodeParseUtil.getTargetMethods(targetClassSourceStr,pref.isTestMethodGenIncludePublic,pref.isTestMethodGenIncludeProtected,pref.isTestMethodGenIncludePackageLocal);
    for (    String target : targets) {
      Matcher matcher=RegExp.groupMethodPattern.matcher(target);
      if (matcher.find()) {
        MethodInfo each=new MethodInfo();
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenReturnEnabled) {
          String returnTypeFull=getType(matcher.group(1));
          Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(returnTypeFull);
          while (toGenericsMatcher.find()) {
            String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
            for (            String generic : generics) {
              generic=getClassInSourceCode(generic,StrConst.empty,classInfo.importList);
              each.returnType.generics.add(generic);
            }
          }
          each.returnType.name=returnTypeFull.replace(RegExp.generics,StrConst.empty);
          each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
        }
        each.methodName=matcher.group(2);
        String args=matcher.group(3);
        String[] tmpArr=args.split(StrConst.comma);
        int tmpArrLen=tmpArr.length;
        List<String> tmpArrList=new ArrayList<String>();
        String buf=StrConst.empty;
        for (int i=0; i < tmpArrLen; i++) {
          String element=tmpArr[i].trim();
          if (element.matches(""String_Node_Str"")) {
            tmpArrList.add(element);
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            buf+=element;
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            String result=buf + StrConst.comma + element;
            tmpArrList.add(result);
            buf=StrConst.empty;
            continue;
          }
          if (!buf.equals(StrConst.empty)) {
            buf+=StrConst.comma + element;
            continue;
          }
          tmpArrList.add(element);
        }
        String[] argArr=tmpArrList.toArray(new String[0]);
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenArgsEnabled) {
          int argArrLen=argArr.length;
          for (int i=0; i < argArrLen; i++) {
            ArgType argType=new ArgType();
            String argTypeFull=argArr[i];
            Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(argTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,StrConst.empty,classInfo.importList);
                argType.generics.add(generic);
              }
            }
            String argTypeStr=argTypeFull.replaceAll(RegExp.generics,StrConst.empty);
            argType.name=getType(argTypeStr);
            argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
            each.argTypes.add(argType);
            Matcher nameMatcher=RegExp.groupMethodArgNamePattern.matcher(argTypeFull);
            if (nameMatcher.find()) {
              each.argNames.add(nameMatcher.group(1));
            }
 else {
              each.argNames.add(""String_Node_Str"" + i);
            }
          }
        }
        if (pref.isTestMethodGenExecludeAccessors) {
          String fieldName=null;
          String fieldType=null;
          if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            if (each.argTypes.size() > 0) {
              fieldType=each.argTypes.get(0).name;
            }
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            fieldType=each.returnType.name;
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(2);
            fieldType=each.returnType.name;
          }
          if (fieldName != null) {
            fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
            fieldType=fieldType.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
            String searchRegexp=""String_Node_Str"" + fieldType + ""String_Node_Str""+ RegExp.generics+ ""String_Node_Str""+ RegExp.wsPlusMax+ fieldName+ ""String_Node_Str"";
            if (targetClassSourceStr.replaceAll(RegExp.crlf,StrConst.empty).matches(searchRegexp)) {
              continue;
            }
          }
        }
        String prefix=pref.isJUnitVersion3 ? StrConst.testMethodPrefix4Version3 + pref.testMethodDelimiter : StrConst.empty;
        each.testMethodName=prefix + each.methodName;
        if (pref.isTestMethodGenArgsEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodArgsPrefix;
          if (each.argTypes.size() == 0) {
            each.testMethodName+=pref.testMethodArgsDelimiter;
          }
          for (          ArgType argType : each.argTypes) {
            each.testMethodName+=pref.testMethodArgsDelimiter + argType.nameInMethodName;
          }
        }
        if (pref.isTestMethodGenReturnEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodReturnPrefix + pref.testMethodReturnDelimiter+ each.returnType.nameInMethodName;
        }
        if (target.matches(RegExp.matchesStaticMethod)) {
          each.isStatic=true;
        }
        testMethods.add(each);
        if (pref.isTestMethodGenExceptions) {
          String throwsExceptions=matcher.group(4);
          if (throwsExceptions != null) {
            String[] exceptions=throwsExceptions.replaceAll(""String_Node_Str"" + RegExp.wsPlusMax,StrConst.empty).split(StrConst.comma);
            for (            String exp : exceptions) {
              exp=exp.trim();
              MethodInfo expTest=ObjectUtil.deepCopy(each);
              expTest.testingTargetException=new ExceptionInfo();
              expTest.testingTargetException.name=exp;
              expTest.testingTargetException.nameInMethodName=TestCaseGenerateUtil.getTypeAvailableInMethodName(exp);
              expTest.testMethodName=expTest.testMethodName + pref.testMethodDelimiter + pref.testMethodExceptionPrefix+ pref.testMethodExceptionDelimiter+ expTest.testingTargetException.nameInMethodName;
              testMethods.add(expTest);
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.constructors=constructors;
  classInfo.methods=testMethods;
  return classInfo;
}",0.9964550435062842
12029,"/** 
 * Get the available class name in source code.
 * @param returnTypeToCheck return type to check
 * @param testTargetClassname test target class name
 * @param importList import list
 * @return result
 */
protected static String getClassInSourceCode(String returnTypeToCheck,String testTargetClassname,List<String> importList){
  if (returnTypeToCheck.matches(""String_Node_Str""))   return returnTypeToCheck;
  boolean isArray=false;
  if (returnTypeToCheck.matches(""String_Node_Str"")) {
    isArray=true;
    returnTypeToCheck=returnTypeToCheck.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  String returnTypeName=""String_Node_Str"";
  boolean returnTypeFound=false;
  try {
    if (PrimitiveTypeUtil.isPrimitive(returnTypeToCheck)) {
      returnTypeFound=true;
      if (!returnTypeName.matches(""String_Node_Str""))       returnTypeName=PrimitiveTypeUtil.getTypeDefaultValue(returnTypeToCheck);
    }
 else {
      try {
        Class.forName(""String_Node_Str"" + returnTypeToCheck);
        returnTypeFound=true;
      }
 catch (      Exception ignore) {
      }
      if (!returnTypeFound)       Class.forName(returnTypeToCheck);
    }
  }
 catch (  Exception e) {
    if (returnTypeToCheck.equals(testTargetClassname))     returnTypeFound=true;
    for (    String importedPackage : importList) {
      importedPackage=importedPackage.replaceAll(""String_Node_Str"",StrConst.empty);
      if (importedPackage.matches(""String_Node_Str"" + returnTypeToCheck.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"")) {
        returnTypeFound=true;
        break;
      }
    }
  }
  if (!returnTypeFound) {
    return isArray ? returnTypeName + ""String_Node_Str"" : returnTypeName;
  }
 else {
    return isArray ? returnTypeToCheck + ""String_Node_Str"" : returnTypeToCheck;
  }
}","/** 
 * Get the available class name in source code.
 * @param returnTypeToCheck return type to check
 * @param testTargetClassname test target class name
 * @param importList import list
 * @return result
 */
protected static String getClassInSourceCode(String returnTypeToCheck,String testTargetClassname,List<String> importList){
  if (returnTypeToCheck.matches(""String_Node_Str""))   return returnTypeToCheck;
  boolean isArray=false;
  if (returnTypeToCheck.matches(""String_Node_Str"")) {
    isArray=true;
    returnTypeToCheck=returnTypeToCheck.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  String returnTypeName=""String_Node_Str"";
  boolean returnTypeFound=false;
  try {
    if (PrimitiveTypeUtil.isPrimitive(returnTypeToCheck)) {
      returnTypeFound=true;
      if (!returnTypeName.matches(""String_Node_Str""))       returnTypeName=PrimitiveTypeUtil.getTypeDefaultValue(returnTypeToCheck);
    }
 else {
      try {
        Class.forName(""String_Node_Str"" + returnTypeToCheck);
        returnTypeFound=true;
      }
 catch (      Exception ignore) {
      }
      if (!returnTypeFound)       Class.forName(returnTypeToCheck);
    }
  }
 catch (  Exception e) {
    if (returnTypeToCheck.equals(testTargetClassname))     returnTypeFound=true;
    for (    String importedPackage : importList) {
      importedPackage=importedPackage.replaceAll(""String_Node_Str"",StrConst.empty);
      try {
        if (importedPackage.matches(""String_Node_Str"" + returnTypeToCheck.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"")) {
          returnTypeFound=true;
          break;
        }
      }
 catch (      Exception e2) {
        e2.printStackTrace();
      }
    }
  }
  if (!returnTypeFound) {
    return isArray ? returnTypeName + ""String_Node_Str"" : returnTypeName;
  }
 else {
    return isArray ? returnTypeToCheck + ""String_Node_Str"" : returnTypeToCheck;
  }
}",0.9746835443037974
12030,"/** 
 * Run method to invoked.
 * @param action
 */
public void run(IAction action){
  PreferenceLoader pref=new PreferenceLoader();
  InputStream javaFileIStream=null;
  OutputStreamWriter testFileOSWriter=null;
  FileOutputStream fos=null;
  boolean refreshFlag=true;
  String projectName=null;
  String testCaseDirResource=null;
  String testCaseResource=null;
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseClassname=null;
    String testCaseCreateDirpath=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
    if (structuredSelection != null && structuredSelection.size() == 0) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,Dialog.Common.title,Dialog.Common.required);
      refreshFlag=false;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,Dialog.Common.title,Dialog.Common.selectOneOnly);
      refreshFlag=false;
    }
 else {
      String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
      String[] dirArrFromProjectRoot=pathFromProjectRoot.split(StrConst.dirSep);
      String selected=StrConst.empty;
      int len=dirArrFromProjectRoot.length;
      for (int i=2; i < len - 1; i++)       selected+=dirArrFromProjectRoot[i] + StrConst.dirSep;
      selected+=dirArrFromProjectRoot[len - 1];
      projectName=dirArrFromProjectRoot[1];
      String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
      testTargetClassname=testTargetClassFilename.replace(StrConst.javaFileExp,StrConst.empty);
      testCaseClassname=testTargetClassname + StrConst.suffixOfTestcase;
      testCaseFilename=testCaseClassname + StrConst.javaFileExp;
      String projectRootPath=workspaceRoot.getLocation() + StrConst.dirSep + projectName+ StrConst.dirSep;
      testCaseResource=selected.replace(pref.commonSrcMainJavaDir,pref.commonTestMainJavaDir).replace(StrConst.javaFileExp,StrConst.suffixOfTestcase + StrConst.javaFileExp);
      String[] selectedDirArr=selected.split(StrConst.dirSep);
      testCaseDirResource=""String_Node_Str"";
      int selectedDirArrLength=selectedDirArr.length;
      for (int i=0; i < selectedDirArrLength - 1; i++)       testCaseDirResource+=selectedDirArr[i] + StrConst.dirSep;
      testCaseDirResource=testCaseDirResource.replace(pref.commonSrcMainJavaDir,pref.commonTestMainJavaDir);
      testCaseCreateDirpath=projectRootPath + testCaseDirResource;
      File testDir=new File(testCaseCreateDirpath);
      String[] dirArr=testCaseCreateDirpath.split(StrConst.dirSep);
      String tmpDirPath=StrConst.empty;
      String tmpResourceDirPath=StrConst.empty;
      for (      String each : dirArr) {
        tmpDirPath+=StrConst.dirSep + each;
        File tmpDir=new File(tmpDirPath);
        if (tmpDir.getPath().length() <= projectRootPath.length()) {
          continue;
        }
        tmpResourceDirPath+=StrConst.dirSep + each;
        if (!tmpDir.exists()) {
          if (!tmpDir.mkdir()) {
            System.err.println(""String_Node_Str"" + tmpDir.getPath());
          }
          if (!ResourceRefreshUtil.refreshLocal(null,projectName + StrConst.dirSep + tmpResourceDirPath+ ""String_Node_Str"")) {
            String msg=Dialog.Common.resourceRefreshError;
            MessageDialog.openWarning(new Shell(),Dialog.Common.title,msg);
            System.err.println(""String_Node_Str"");
          }
        }
      }
      if (!testDir.mkdirs()) {
        System.err.println(""String_Node_Str"");
      }
      if (!ResourceRefreshUtil.refreshLocal(null,projectName + StrConst.dirSep + testCaseDirResource)) {
        MessageDialog.openWarning(new Shell(),Dialog.Common.title,Dialog.Common.resourceRefreshError);
        System.err.println(""String_Node_Str"");
      }
      try {
        File outputFile=new File(testCaseCreateDirpath + StrConst.dirSep + testCaseFilename);
        String msg=Dialog.Common.alreadyExist + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ StrConst.lineFeed+ Dialog.Common.confirmToProceed;
        if (!outputFile.exists() || MessageDialog.openConfirm(new Shell(),Dialog.Common.title,msg)) {
          String targetClass=""String_Node_Str"" + projectName + ""String_Node_Str""+ selected;
          IResource targetClassResource=workspaceRoot.findMember(targetClass);
          IFile file=(IFile)targetClassResource;
          ClassInfo testClassInfo=TestCaseGenerateUtil.getTestClassInfoFromTargetClass(file);
          List<MethodInfo> testMethods=testClassInfo.methods;
          String writeEncoding=FileResourceUtil.detectEncoding(file);
          fos=new FileOutputStream(testCaseCreateDirpath + StrConst.dirSep + testCaseFilename);
          testFileOSWriter=new OutputStreamWriter(fos,writeEncoding);
          StringBuilder sb=new StringBuilder();
          String CRLF=StrConst.carriageReturn + StrConst.lineFeed;
          String testPackageString=StrConst.empty;
          String[] tmpDirArr=selected.split(StrConst.dirSep);
          StringBuilder dirSb=new StringBuilder();
          int packageArrLen=tmpDirArr.length - 2;
          int mainJavaLen=pref.commonSrcMainJavaDir.split(""String_Node_Str"").length;
          if (mainJavaLen != tmpDirArr.length - 1) {
            for (int i=mainJavaLen; i < packageArrLen; i++) {
              dirSb.append(tmpDirArr[i]);
              dirSb.append(""String_Node_Str"");
            }
            dirSb.append(tmpDirArr[packageArrLen]);
            testPackageString=dirSb.toString();
            sb.append(""String_Node_Str"");
            sb.append(testPackageString);
            sb.append(""String_Node_Str"");
            sb.append(CRLF);
            sb.append(CRLF);
          }
          String testCase=pref.isUsingJUnitHelperRuntime ? RuntimeLibrary.testcase : pref.classToExtend;
          String[] tmpTestCaseArr=testCase.split(""String_Node_Str"");
          String testCaseName=tmpTestCaseArr[tmpTestCaseArr.length - 1];
          sb.append(""String_Node_Str"");
          sb.append(testCase);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          if (pref.isTestMethodGenEnabled && pref.isTestMethodGenNotBlankEnabled) {
            List<String> importedPackageList=testClassInfo.importList;
            for (            String importedPackage : importedPackageList) {
              importedPackage=importedPackage.trim();
              if (importedPackage != null && importedPackage.length() != 0) {
                sb.append(""String_Node_Str"");
                sb.append(importedPackage);
                sb.append(""String_Node_Str"");
                sb.append(CRLF);
              }
            }
          }
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(testCaseClassname);
          if (pref.isJUnitVersion3) {
            sb.append(""String_Node_Str"");
            sb.append(testCaseName);
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          if (pref.isTestMethodGenEnabled) {
            for (            MethodInfo testMethod : testMethods) {
              if (testMethod.testMethodName == null || testMethod.testMethodName.equals(StrConst.empty)) {
                continue;
              }
              if (pref.isJUnitVersion4) {
                sb.append(""String_Node_Str"");
                sb.append(CRLF);
              }
              sb.append(""String_Node_Str"");
              sb.append(testMethod.testMethodName);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(""String_Node_Str"");
              sb.append(StrConst.autoGenTodoMessage);
              sb.append(CRLF);
              if (pref.isTestMethodGenNotBlankEnabled) {
                String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testClassInfo,testTargetClassname);
                sb.append(notBlankSourceCode);
              }
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(CRLF);
            }
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          testFileOSWriter.write(sb.toString());
        }
      }
 catch (      InvalidPreferenceException ipe) {
        MessageDialog.openWarning(new Shell(),Dialog.Common.title,Dialog.Common.invalidPreference);
        return;
      }
catch (      FileNotFoundException fnfe) {
        fnfe.printStackTrace();
      }
 finally {
        FileResourceUtil.close(testFileOSWriter);
        FileResourceUtil.close(fos);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    FileResourceUtil.close(javaFileIStream);
    FileResourceUtil.close(testFileOSWriter);
  }
  if (refreshFlag && !ResourceRefreshUtil.refreshLocal(null,projectName + StrConst.dirSep + testCaseDirResource+ ""String_Node_Str"")) {
    MessageDialog.openWarning(new Shell(),Dialog.Common.title,Dialog.Common.resourceRefreshError);
    System.err.println(""String_Node_Str"");
  }
 else {
    int retryCount=0;
    IEditorPart editorPart=null;
    ThreadUtil.sleep(1500);
    while (true) {
      try {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        IWorkspaceRoot root=workspace.getRoot();
        IProject project=root.getProject(projectName);
        IFile testCaseFile=project.getFile(testCaseResource);
        String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        editorPart=IDE.openEditor(page,testCaseFile,editorId);
        if (editorPart == null)         throw new NullPointerException();
        break;
      }
 catch (      Exception e) {
        retryCount++;
        if (retryCount > 3)         break;
        ThreadUtil.sleep(1500);
      }
    }
    editorPart.setFocus();
  }
}","/** 
 * Run method to invoked.
 * @param action
 */
public void run(IAction action){
  PreferenceLoader pref=new PreferenceLoader();
  InputStream javaFileIStream=null;
  OutputStreamWriter testFileOSWriter=null;
  FileOutputStream fos=null;
  boolean refreshFlag=true;
  String projectName=null;
  String testCaseDirResource=null;
  String testCaseResource=null;
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseClassname=null;
    String testCaseCreateDirpath=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
    if (structuredSelection != null && structuredSelection.size() == 0) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,Dialog.Common.title,Dialog.Common.required);
      refreshFlag=false;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,Dialog.Common.title,Dialog.Common.selectOneOnly);
      refreshFlag=false;
    }
 else {
      String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
      String[] dirArrFromProjectRoot=pathFromProjectRoot.split(StrConst.dirSep);
      String selected=StrConst.empty;
      int len=dirArrFromProjectRoot.length;
      for (int i=2; i < len - 1; i++)       selected+=dirArrFromProjectRoot[i] + StrConst.dirSep;
      selected+=dirArrFromProjectRoot[len - 1];
      projectName=dirArrFromProjectRoot[1];
      String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
      testTargetClassname=testTargetClassFilename.replace(StrConst.javaFileExp,StrConst.empty);
      testCaseClassname=testTargetClassname + StrConst.suffixOfTestcase;
      testCaseFilename=testCaseClassname + StrConst.javaFileExp;
      String projectRootPath=workspaceRoot.getLocation() + StrConst.dirSep + projectName+ StrConst.dirSep;
      testCaseResource=selected.replace(pref.commonSrcMainJavaDir,pref.commonTestMainJavaDir).replace(StrConst.javaFileExp,StrConst.suffixOfTestcase + StrConst.javaFileExp);
      String[] selectedDirArr=selected.split(StrConst.dirSep);
      testCaseDirResource=""String_Node_Str"";
      int selectedDirArrLength=selectedDirArr.length;
      for (int i=0; i < selectedDirArrLength - 1; i++)       testCaseDirResource+=selectedDirArr[i] + StrConst.dirSep;
      testCaseDirResource=testCaseDirResource.replace(pref.commonSrcMainJavaDir,pref.commonTestMainJavaDir);
      testCaseCreateDirpath=projectRootPath + testCaseDirResource;
      File testDir=new File(testCaseCreateDirpath);
      String[] dirArr=testCaseCreateDirpath.split(StrConst.dirSep);
      String tmpDirPath=StrConst.empty;
      String tmpResourceDirPath=StrConst.empty;
      for (      String each : dirArr) {
        tmpDirPath+=StrConst.dirSep + each;
        File tmpDir=new File(tmpDirPath);
        if (tmpDir.getPath().length() <= projectRootPath.length()) {
          continue;
        }
        tmpResourceDirPath+=StrConst.dirSep + each;
        if (!tmpDir.exists()) {
          if (!tmpDir.mkdir()) {
            System.err.println(""String_Node_Str"" + tmpDir.getPath());
          }
          if (!ResourceRefreshUtil.refreshLocal(null,projectName + StrConst.dirSep + tmpResourceDirPath+ ""String_Node_Str"")) {
            String msg=Dialog.Common.resourceRefreshError;
            MessageDialog.openWarning(new Shell(),Dialog.Common.title,msg);
            System.err.println(""String_Node_Str"");
          }
        }
      }
      if (!testDir.mkdirs()) {
        System.err.println(""String_Node_Str"");
      }
      if (!ResourceRefreshUtil.refreshLocal(null,projectName + StrConst.dirSep + testCaseDirResource)) {
        MessageDialog.openWarning(new Shell(),Dialog.Common.title,Dialog.Common.resourceRefreshError);
        System.err.println(""String_Node_Str"");
      }
      try {
        File outputFile=new File(testCaseCreateDirpath + StrConst.dirSep + testCaseFilename);
        String msg=Dialog.Common.alreadyExist + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ StrConst.lineFeed+ Dialog.Common.confirmToProceed;
        if (!outputFile.exists() || MessageDialog.openConfirm(new Shell(),Dialog.Common.title,msg)) {
          String targetClass=""String_Node_Str"" + projectName + ""String_Node_Str""+ selected;
          IResource targetClassResource=workspaceRoot.findMember(targetClass);
          IFile file=(IFile)targetClassResource;
          ClassInfo testClassInfo=TestCaseGenerateUtil.getTestClassInfoFromTargetClass(testTargetClassname,file);
          List<MethodInfo> testMethods=testClassInfo.methods;
          String writeEncoding=FileResourceUtil.detectEncoding(file);
          fos=new FileOutputStream(testCaseCreateDirpath + StrConst.dirSep + testCaseFilename);
          testFileOSWriter=new OutputStreamWriter(fos,writeEncoding);
          StringBuilder sb=new StringBuilder();
          String CRLF=StrConst.carriageReturn + StrConst.lineFeed;
          String testPackageString=StrConst.empty;
          String[] tmpDirArr=selected.split(StrConst.dirSep);
          StringBuilder dirSb=new StringBuilder();
          int packageArrLen=tmpDirArr.length - 2;
          int mainJavaLen=pref.commonSrcMainJavaDir.split(""String_Node_Str"").length;
          if (mainJavaLen != tmpDirArr.length - 1) {
            for (int i=mainJavaLen; i < packageArrLen; i++) {
              dirSb.append(tmpDirArr[i]);
              dirSb.append(""String_Node_Str"");
            }
            dirSb.append(tmpDirArr[packageArrLen]);
            testPackageString=dirSb.toString();
            sb.append(""String_Node_Str"");
            sb.append(testPackageString);
            sb.append(""String_Node_Str"");
            sb.append(CRLF);
            sb.append(CRLF);
          }
          String testCase=pref.isUsingJUnitHelperRuntime ? RuntimeLibrary.testcase : pref.classToExtend;
          String[] tmpTestCaseArr=testCase.split(""String_Node_Str"");
          String testCaseName=tmpTestCaseArr[tmpTestCaseArr.length - 1];
          sb.append(""String_Node_Str"");
          sb.append(testCase);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          if (pref.isTestMethodGenEnabled && pref.isTestMethodGenNotBlankEnabled) {
            List<String> importedPackageList=testClassInfo.importList;
            for (            String importedPackage : importedPackageList) {
              importedPackage=importedPackage.trim();
              if (importedPackage != null && importedPackage.length() != 0) {
                sb.append(""String_Node_Str"");
                sb.append(importedPackage);
                sb.append(""String_Node_Str"");
                sb.append(CRLF);
              }
            }
          }
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(testCaseClassname);
          if (pref.isJUnitVersion3) {
            sb.append(""String_Node_Str"");
            sb.append(testCaseName);
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          if (pref.isTestMethodGenEnabled) {
            for (            MethodInfo testMethod : testMethods) {
              if (testMethod.testMethodName == null || testMethod.testMethodName.equals(StrConst.empty)) {
                continue;
              }
              if (pref.isJUnitVersion4) {
                sb.append(""String_Node_Str"");
                sb.append(CRLF);
              }
              sb.append(""String_Node_Str"");
              sb.append(testMethod.testMethodName);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(""String_Node_Str"");
              sb.append(StrConst.autoGenTodoMessage);
              sb.append(CRLF);
              if (pref.isTestMethodGenNotBlankEnabled) {
                String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testClassInfo,testTargetClassname);
                sb.append(notBlankSourceCode);
              }
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(CRLF);
            }
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          testFileOSWriter.write(sb.toString());
        }
      }
 catch (      InvalidPreferenceException ipe) {
        MessageDialog.openWarning(new Shell(),Dialog.Common.title,Dialog.Common.invalidPreference);
        return;
      }
catch (      FileNotFoundException fnfe) {
        fnfe.printStackTrace();
      }
 finally {
        FileResourceUtil.close(testFileOSWriter);
        FileResourceUtil.close(fos);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    FileResourceUtil.close(javaFileIStream);
    FileResourceUtil.close(testFileOSWriter);
  }
  if (refreshFlag && !ResourceRefreshUtil.refreshLocal(null,projectName + StrConst.dirSep + testCaseDirResource+ ""String_Node_Str"")) {
    MessageDialog.openWarning(new Shell(),Dialog.Common.title,Dialog.Common.resourceRefreshError);
    System.err.println(""String_Node_Str"");
  }
 else {
    int retryCount=0;
    IEditorPart editorPart=null;
    ThreadUtil.sleep(1500);
    while (true) {
      try {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        IWorkspaceRoot root=workspace.getRoot();
        IProject project=root.getProject(projectName);
        IFile testCaseFile=project.getFile(testCaseResource);
        String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        editorPart=IDE.openEditor(page,testCaseFile,editorId);
        if (editorPart == null)         throw new NullPointerException();
        break;
      }
 catch (      Exception e) {
        retryCount++;
        if (retryCount > 3)         break;
        ThreadUtil.sleep(1500);
      }
    }
    editorPart.setFocus();
  }
}",0.9990155542429612
12031,"public void run(IAction action){
  PreferenceLoader pref=new PreferenceLoader();
  IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
  try {
    String projectName=null;
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseCreateFilepath=null;
    String testCaseResource=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
 else {
    }
    if (structuredSelection != null && structuredSelection.size() == 0) {
      MessageDialog.openWarning(new Shell(),Dialog.Common.title,Dialog.Common.required);
      return;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      MessageDialog.openWarning(new Shell(),Dialog.Common.title,Dialog.Common.selectOneOnly);
      return;
    }
    String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
    String[] dirArrFromProjectRoot=pathFromProjectRoot.split(StrConst.dirSep);
    String selected=StrConst.empty;
    int allDirLen=dirArrFromProjectRoot.length - 1;
    for (int i=2; i < allDirLen; i++)     selected+=dirArrFromProjectRoot[i] + StrConst.dirSep;
    selected+=dirArrFromProjectRoot[allDirLen];
    projectName=dirArrFromProjectRoot[1];
    String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
    testTargetClassname=testTargetClassFilename.replace(StrConst.javaFileExp,StrConst.empty);
    testCaseFilename=testTargetClassname + StrConst.suffixOfTestcase + StrConst.javaFileExp;
    String projectRootPath=workspaceRoot.getLocation() + StrConst.dirSep + projectName+ StrConst.dirSep;
    if (testTargetClassname == null) {
      MessageDialog.openWarning(new Shell(),Dialog.Common.title,Dialog.Common.selectJavaFile);
    }
 else {
      testCaseResource=selected.replace(pref.commonSrcMainJavaDir,pref.commonTestMainJavaDir).replace(StrConst.javaFileExp,StrConst.suffixOfTestcase + StrConst.javaFileExp);
      testCaseCreateFilepath=projectRootPath + selected.replace(pref.commonSrcMainJavaDir,pref.commonTestMainJavaDir).replace(StrConst.javaFileExp,StrConst.suffixOfTestcase + StrConst.javaFileExp);
      File outputFile=new File(testCaseCreateFilepath);
      if (!outputFile.exists()) {
        if (!pref.isTestClassGenEnabled) {
          MessageDialog.openInformation(new Shell(),Dialog.Common.title,Dialog.Common.notToCreateNewFilePreference);
          return;
        }
        String msg=Dialog.Common.notExist + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ StrConst.lineFeed+ Dialog.Common.confirmToCreateNewFile;
        if (testCaseFilename != null && MessageDialog.openConfirm(new Shell(),Dialog.Common.title,msg)) {
          new CreateNewTestCaseAction().run(action,selection);
        }
        return;
      }
      int retryCount=0;
      IEditorPart editorPart=null;
      while (true) {
        try {
          IProject project=workspaceRoot.getProject(projectName);
          IFile testCaseFile=project.getFile(testCaseResource);
          String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          editorPart=IDE.openEditor(page,testCaseFile,editorId);
          editorPart.setFocus();
          if (pref.isTestMethodGenEnabled) {
            IFile testTargetFile=project.getFile(selected);
            ClassInfo testClassWithNotImpledMethods=TestCaseGenerateUtil.getClassInfoWithUnimplementedTestMethods(testTargetFile,testCaseFile);
            List<MethodInfo> unimpledTestMethodNames=testClassWithNotImpledMethods.methods;
            String writeEncoding=FileResourceUtil.detectEncoding(testCaseFile);
            if (unimpledTestMethodNames.size() > 0) {
              List<String> lines=SourceCodeParseUtil.getLineList(testCaseFile);
              StringBuilder sb=new StringBuilder();
              String CRLF=StrConst.carriageReturn + StrConst.lineFeed;
              boolean isImportedTypesAdded=false;
              for (              String line : lines) {
                if (line.equals(""String_Node_Str"") && pref.isTestMethodGenEnabled) {
                  for (                  MethodInfo testMethod : unimpledTestMethodNames) {
                    if (testMethod.testMethodName == null || testMethod.testMethodName.equals(StrConst.empty)) {
                      continue;
                    }
                    if (pref.isJUnitVersion4) {
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                    }
                    sb.append(""String_Node_Str"");
                    sb.append(testMethod.testMethodName);
                    sb.append(""String_Node_Str"");
                    sb.append(CRLF);
                    sb.append(""String_Node_Str"");
                    sb.append(StrConst.autoGenTodoMessage);
                    sb.append(CRLF);
                    if (pref.isTestMethodGenNotBlankEnabled) {
                      String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testClassWithNotImpledMethods,testTargetClassname);
                      sb.append(notBlankSourceCode);
                    }
                    sb.append(""String_Node_Str"");
                    sb.append(CRLF);
                    sb.append(CRLF);
                  }
                  sb.append(""String_Node_Str"");
                  sb.append(CRLF);
                  break;
                }
 else {
                  sb.append(line);
                  sb.append(CRLF);
                  if (line.matches(""String_Node_Str"") && !isImportedTypesAdded && pref.isTestMethodGenNotBlankEnabled) {
                    List<String> importTypes=testClassWithNotImpledMethods.importList;
                    for (                    String importType : importTypes) {
                      if (importType.matches(""String_Node_Str""))                       continue;
                      sb.append(""String_Node_Str"");
                      sb.append(importType);
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                    }
                    isImportedTypesAdded=true;
                  }
                }
              }
              String content=sb.toString();
              OutputStreamWriter testFileOSWriter=null;
              FileOutputStream fos=null;
              try {
                fos=new FileOutputStream(projectRootPath + StrConst.dirSep + testCaseResource);
                testFileOSWriter=new OutputStreamWriter(fos,writeEncoding);
                testFileOSWriter.write(content);
              }
  finally {
                FileResourceUtil.close(testFileOSWriter);
                FileResourceUtil.close(fos);
              }
            }
            if (!ResourceRefreshUtil.refreshLocal(null,projectName + StrConst.dirSep + testCaseResource+ ""String_Node_Str"")) {
              MessageDialog.openWarning(new Shell(),Dialog.Common.title,Dialog.Common.resourceRefreshError);
              System.err.println(""String_Node_Str"");
            }
 else {
              retryCount=0;
              ThreadUtil.sleep(1500);
              while (true) {
                try {
                  editorPart=IDE.openEditor(page,testCaseFile,editorId);
                  if (editorPart == null)                   throw new NullPointerException();
                  break;
                }
 catch (                Exception e) {
                  retryCount++;
                  if (retryCount > 3)                   break;
                  ThreadUtil.sleep(1500);
                }
              }
              editorPart.setFocus();
            }
          }
        }
 catch (        Exception e) {
          retryCount++;
          if (retryCount > 10)           break;
          e.printStackTrace();
          ThreadUtil.sleep(1500);
        }
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void run(IAction action){
  PreferenceLoader pref=new PreferenceLoader();
  IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
  try {
    String projectName=null;
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseCreateFilepath=null;
    String testCaseResource=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
 else {
    }
    if (structuredSelection != null && structuredSelection.size() == 0) {
      MessageDialog.openWarning(new Shell(),Dialog.Common.title,Dialog.Common.required);
      return;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      MessageDialog.openWarning(new Shell(),Dialog.Common.title,Dialog.Common.selectOneOnly);
      return;
    }
    String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
    String[] dirArrFromProjectRoot=pathFromProjectRoot.split(StrConst.dirSep);
    String selected=StrConst.empty;
    int allDirLen=dirArrFromProjectRoot.length - 1;
    for (int i=2; i < allDirLen; i++)     selected+=dirArrFromProjectRoot[i] + StrConst.dirSep;
    selected+=dirArrFromProjectRoot[allDirLen];
    projectName=dirArrFromProjectRoot[1];
    String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
    testTargetClassname=testTargetClassFilename.replace(StrConst.javaFileExp,StrConst.empty);
    testCaseFilename=testTargetClassname + StrConst.suffixOfTestcase + StrConst.javaFileExp;
    String projectRootPath=workspaceRoot.getLocation() + StrConst.dirSep + projectName+ StrConst.dirSep;
    if (testTargetClassname == null) {
      MessageDialog.openWarning(new Shell(),Dialog.Common.title,Dialog.Common.selectJavaFile);
    }
 else {
      testCaseResource=selected.replace(pref.commonSrcMainJavaDir,pref.commonTestMainJavaDir).replace(StrConst.javaFileExp,StrConst.suffixOfTestcase + StrConst.javaFileExp);
      testCaseCreateFilepath=projectRootPath + selected.replace(pref.commonSrcMainJavaDir,pref.commonTestMainJavaDir).replace(StrConst.javaFileExp,StrConst.suffixOfTestcase + StrConst.javaFileExp);
      File outputFile=new File(testCaseCreateFilepath);
      if (!outputFile.exists()) {
        if (!pref.isTestClassGenEnabled) {
          MessageDialog.openInformation(new Shell(),Dialog.Common.title,Dialog.Common.notToCreateNewFilePreference);
          return;
        }
        String msg=Dialog.Common.notExist + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ StrConst.lineFeed+ Dialog.Common.confirmToCreateNewFile;
        if (testCaseFilename != null && MessageDialog.openConfirm(new Shell(),Dialog.Common.title,msg)) {
          new CreateNewTestCaseAction().run(action,selection);
        }
        return;
      }
      int retryCount=0;
      IEditorPart editorPart=null;
      while (true) {
        try {
          IProject project=workspaceRoot.getProject(projectName);
          IFile testCaseFile=project.getFile(testCaseResource);
          String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          editorPart=IDE.openEditor(page,testCaseFile,editorId);
          editorPart.setFocus();
          if (pref.isTestMethodGenEnabled) {
            IFile testTargetFile=project.getFile(selected);
            ClassInfo testClassWithNotImpledMethods=TestCaseGenerateUtil.getClassInfoWithUnimplementedTestMethods(testTargetClassname,testTargetFile,testCaseFile);
            List<MethodInfo> unimpledTestMethodNames=testClassWithNotImpledMethods.methods;
            String writeEncoding=FileResourceUtil.detectEncoding(testCaseFile);
            if (unimpledTestMethodNames.size() > 0) {
              List<String> lines=SourceCodeParseUtil.getLineList(testCaseFile);
              StringBuilder sb=new StringBuilder();
              String CRLF=StrConst.carriageReturn + StrConst.lineFeed;
              boolean isImportedTypesAdded=false;
              for (              String line : lines) {
                if (line.equals(""String_Node_Str"") && pref.isTestMethodGenEnabled) {
                  for (                  MethodInfo testMethod : unimpledTestMethodNames) {
                    if (testMethod.testMethodName == null || testMethod.testMethodName.equals(StrConst.empty)) {
                      continue;
                    }
                    if (pref.isJUnitVersion4) {
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                    }
                    sb.append(""String_Node_Str"");
                    sb.append(testMethod.testMethodName);
                    sb.append(""String_Node_Str"");
                    sb.append(CRLF);
                    sb.append(""String_Node_Str"");
                    sb.append(StrConst.autoGenTodoMessage);
                    sb.append(CRLF);
                    if (pref.isTestMethodGenNotBlankEnabled) {
                      String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testClassWithNotImpledMethods,testTargetClassname);
                      sb.append(notBlankSourceCode);
                    }
                    sb.append(""String_Node_Str"");
                    sb.append(CRLF);
                    sb.append(CRLF);
                  }
                  sb.append(""String_Node_Str"");
                  sb.append(CRLF);
                  break;
                }
 else {
                  sb.append(line);
                  sb.append(CRLF);
                  if (line.matches(""String_Node_Str"") && !isImportedTypesAdded && pref.isTestMethodGenNotBlankEnabled) {
                    List<String> importTypes=testClassWithNotImpledMethods.importList;
                    for (                    String importType : importTypes) {
                      if (importType.matches(""String_Node_Str""))                       continue;
                      sb.append(""String_Node_Str"");
                      sb.append(importType);
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                    }
                    isImportedTypesAdded=true;
                  }
                }
              }
              String content=sb.toString();
              OutputStreamWriter testFileOSWriter=null;
              FileOutputStream fos=null;
              try {
                fos=new FileOutputStream(projectRootPath + StrConst.dirSep + testCaseResource);
                testFileOSWriter=new OutputStreamWriter(fos,writeEncoding);
                testFileOSWriter.write(content);
              }
  finally {
                FileResourceUtil.close(testFileOSWriter);
                FileResourceUtil.close(fos);
              }
            }
            if (!ResourceRefreshUtil.refreshLocal(null,projectName + StrConst.dirSep + testCaseResource+ ""String_Node_Str"")) {
              MessageDialog.openWarning(new Shell(),Dialog.Common.title,Dialog.Common.resourceRefreshError);
              System.err.println(""String_Node_Str"");
            }
 else {
              retryCount=0;
              ThreadUtil.sleep(1500);
              while (true) {
                try {
                  editorPart=IDE.openEditor(page,testCaseFile,editorId);
                  if (editorPart == null)                   throw new NullPointerException();
                  break;
                }
 catch (                Exception e) {
                  retryCount++;
                  if (retryCount > 3)                   break;
                  ThreadUtil.sleep(1500);
                }
              }
              editorPart.setFocus();
            }
          }
        }
 catch (        Exception e) {
          retryCount++;
          if (retryCount > 10)           break;
          e.printStackTrace();
          ThreadUtil.sleep(1500);
        }
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.998766193707588
12032,"/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param javaFile
 * @return the information on the test methods
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(IFile javaFile) throws InvalidPreferenceException, IOException {
  PreferenceLoader pref=new PreferenceLoader();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=FileResourceUtil.readFile(javaFile);
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null) {
      line+=StrConst.lineFeed;
      tmpsb.append(SourceCodeParseUtil.trimLineComments(line));
      tmpsb.append(StrConst.space);
    }
    String targetClassSourceStrWithoutComments=SourceCodeParseUtil.trimAllComments(tmpsb.toString());
    String targetClassSourceStr=SourceCodeParseUtil.trimInsideOfBraces(targetClassSourceStrWithoutComments);
    if (pref.isTestMethodGenNotBlankEnabled) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importLine : importLines) {
        importLine=importLine.replaceAll(StrConst.lineFeed,StrConst.empty);
        if (!importLine.matches(""String_Node_Str"") && !importLine.matches(""String_Node_Str"")) {
          String importedPackage=importLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      if (pref.isJUnitVersion3) {
      }
 else       if (pref.isJUnitVersion4) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        if (pref.isUsingJUnitHelperRuntime) {
          classInfo.importList.add(""String_Node_Str"");
        }
      }
      if (pref.isTestMethodGenEnabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportMockito) {
        classInfo.importList.add(""String_Node_Str"");
      }
    }
    List<String> targets=SourceCodeParseUtil.getTargetMethods(targetClassSourceStr,pref.isTestMethodGenIncludePublic,pref.isTestMethodGenIncludeProtected,pref.isTestMethodGenIncludePackageLocal);
    for (    String target : targets) {
      Matcher matcher=RegExp.groupMethodPattern.matcher(target);
      if (matcher.find()) {
        MethodInfo each=new MethodInfo();
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenReturnEnabled) {
          String returnTypeFull=getType(matcher.group(1));
          Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(returnTypeFull);
          while (toGenericsMatcher.find()) {
            String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
            for (            String generic : generics) {
              generic=getClassInSourceCode(generic,StrConst.empty,classInfo.importList);
              each.returnType.generics.add(generic);
            }
          }
          each.returnType.name=returnTypeFull.replace(RegExp.generics,StrConst.empty);
          each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
        }
        each.methodName=matcher.group(2);
        String args=matcher.group(3);
        String[] tmpArr=args.split(StrConst.comma);
        int tmpArrLen=tmpArr.length;
        List<String> tmpArrList=new ArrayList<String>();
        String buf=StrConst.empty;
        for (int i=0; i < tmpArrLen; i++) {
          String element=tmpArr[i].trim();
          if (element.matches(""String_Node_Str"")) {
            tmpArrList.add(element);
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            buf+=element;
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            String result=buf + StrConst.comma + element;
            tmpArrList.add(result);
            buf=StrConst.empty;
            continue;
          }
          if (!buf.equals(StrConst.empty)) {
            buf+=StrConst.comma + element;
            continue;
          }
          tmpArrList.add(element);
        }
        String[] argArr=tmpArrList.toArray(new String[0]);
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenArgsEnabled) {
          int argArrLen=argArr.length;
          for (int i=0; i < argArrLen; i++) {
            ArgType argType=new ArgType();
            String argTypeFull=argArr[i];
            Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(argTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,StrConst.empty,classInfo.importList);
                argType.generics.add(generic);
              }
            }
            String argTypeStr=argTypeFull.replaceAll(RegExp.generics,StrConst.empty);
            argType.name=getType(argTypeStr);
            argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
            each.argTypes.add(argType);
            Matcher nameMatcher=RegExp.groupMethodArgNamePattern.matcher(argTypeFull);
            if (nameMatcher.find()) {
              each.argNames.add(nameMatcher.group(1));
            }
 else {
              each.argNames.add(""String_Node_Str"" + i);
            }
          }
        }
        if (pref.isTestMethodGenExecludeAccessors) {
          String fieldName=null;
          String fieldType=null;
          if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            if (each.argTypes.size() > 0) {
              fieldType=each.argTypes.get(0).name;
            }
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            fieldType=each.returnType.name;
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(2);
            fieldType=each.returnType.name;
          }
          if (fieldName != null) {
            fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
            fieldType=fieldType.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
            String searchRegexp=""String_Node_Str"" + fieldType + ""String_Node_Str""+ RegExp.generics+ ""String_Node_Str""+ RegExp.wsPlusMax+ fieldName+ ""String_Node_Str"";
            if (targetClassSourceStr.replaceAll(RegExp.crlf,StrConst.empty).matches(searchRegexp)) {
              continue;
            }
          }
        }
        String prefix=pref.isJUnitVersion3 ? StrConst.testMethodPrefix4Version3 + pref.testMethodDelimiter : StrConst.empty;
        each.testMethodName=prefix + each.methodName;
        if (pref.isTestMethodGenArgsEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodArgsPrefix;
          if (each.argTypes.size() == 0) {
            each.testMethodName+=pref.testMethodArgsDelimiter;
          }
          for (          ArgType argType : each.argTypes) {
            each.testMethodName+=pref.testMethodArgsDelimiter + argType.nameInMethodName;
          }
        }
        if (pref.isTestMethodGenReturnEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodReturnPrefix + pref.testMethodReturnDelimiter+ each.returnType.nameInMethodName;
        }
        if (target.matches(RegExp.matchesStaticMethod)) {
          each.isStatic=true;
        }
        testMethods.add(each);
        if (pref.isTestMethodGenExceptions) {
          String throwsExceptions=matcher.group(4);
          if (throwsExceptions != null) {
            String[] exceptions=throwsExceptions.replaceAll(""String_Node_Str"" + RegExp.wsPlusMax,StrConst.empty).split(StrConst.comma);
            for (            String exp : exceptions) {
              exp=exp.trim();
              MethodInfo expTest=ObjectUtil.deepCopy(each);
              expTest.testingTargetException=new ExceptionInfo();
              expTest.testingTargetException.name=exp;
              expTest.testingTargetException.nameInMethodName=TestCaseGenerateUtil.getTypeAvailableInMethodName(exp);
              expTest.testMethodName=expTest.testMethodName + pref.testMethodDelimiter + pref.testMethodExceptionPrefix+ pref.testMethodExceptionDelimiter+ expTest.testingTargetException.nameInMethodName;
              testMethods.add(expTest);
            }
          }
        }
      }
    }
  }
  finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.methods=testMethods;
  return classInfo;
}","/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param javaFile
 * @return the information on the test methods
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(String testTargetClassname,IFile javaFile) throws InvalidPreferenceException, IOException {
  PreferenceLoader pref=new PreferenceLoader();
  ClassInfo classInfo=new ClassInfo();
  classInfo.name=testTargetClassname;
  List<ConstructorInfo> constructors=new ArrayList<ConstructorInfo>();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=FileResourceUtil.readFile(javaFile);
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null) {
      line+=StrConst.lineFeed;
      tmpsb.append(SourceCodeParseUtil.trimLineComments(line));
      tmpsb.append(StrConst.space);
    }
    String targetClassSourceStrWithoutComments=SourceCodeParseUtil.trimAllComments(tmpsb.toString());
    String targetClassSourceStr=SourceCodeParseUtil.trimInsideOfBraces(targetClassSourceStrWithoutComments);
    if (pref.isTestMethodGenNotBlankEnabled) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importLine : importLines) {
        importLine=importLine.replaceAll(StrConst.lineFeed,StrConst.empty);
        if (!importLine.matches(""String_Node_Str"") && !importLine.matches(""String_Node_Str"")) {
          String importedPackage=importLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      if (pref.isJUnitVersion3) {
      }
 else       if (pref.isJUnitVersion4) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        if (pref.isUsingJUnitHelperRuntime) {
          classInfo.importList.add(""String_Node_Str"");
        }
      }
      if (pref.isTestMethodGenEnabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportMockito) {
        classInfo.importList.add(""String_Node_Str"");
      }
    }
    List<String> targetConstructors=SourceCodeParseUtil.getTargetConstructors(classInfo.name,targetClassSourceStr,true,true,true);
    for (    String target : targetConstructors) {
      String groupConstructor=RegExp.wsAsteriskMax + classInfo.name + ""String_Node_Str""+ RegExp.wsAsteriskMax+ ""String_Node_Str""+ RegExp.wsAsteriskMax+ ""String_Node_Str"";
      Matcher constructorMatcher=Pattern.compile(groupConstructor).matcher(target);
      if (constructorMatcher.find()) {
        ConstructorInfo each=new ConstructorInfo();
        String args=constructorMatcher.group(1);
        String[] tmpArr=args.split(StrConst.comma);
        int tmpArrLen=tmpArr.length;
        List<String> tmpArrList=new ArrayList<String>();
        String buf=StrConst.empty;
        for (int i=0; i < tmpArrLen; i++) {
          String element=tmpArr[i].trim();
          if (element.matches(""String_Node_Str"")) {
            tmpArrList.add(element);
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            buf+=element;
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            String result=buf + StrConst.comma + element;
            tmpArrList.add(result);
            buf=StrConst.empty;
            continue;
          }
          if (!buf.equals(StrConst.empty)) {
            buf+=StrConst.comma + element;
            continue;
          }
          tmpArrList.add(element);
        }
        String[] argArr=tmpArrList.toArray(new String[0]);
        if (pref.isTestMethodGenNotBlankEnabled) {
          int argArrLen=argArr.length;
          for (int i=0; i < argArrLen; i++) {
            ArgType argType=new ArgType();
            String argTypeFull=argArr[i];
            Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(argTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,StrConst.empty,classInfo.importList);
                argType.generics.add(generic);
              }
            }
            String argTypeStr=argTypeFull.replaceAll(RegExp.generics,StrConst.empty);
            argType.name=getType(argTypeStr);
            argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
            each.argTypes.add(argType);
            Matcher nameMatcher=RegExp.groupMethodArgNamePattern.matcher(argTypeFull);
            if (nameMatcher.find()) {
              each.argNames.add(nameMatcher.group(1));
            }
 else {
              each.argNames.add(""String_Node_Str"" + i);
            }
          }
        }
        constructors.add(each);
      }
    }
    List<String> targets=SourceCodeParseUtil.getTargetMethods(targetClassSourceStr,pref.isTestMethodGenIncludePublic,pref.isTestMethodGenIncludeProtected,pref.isTestMethodGenIncludePackageLocal);
    for (    String target : targets) {
      Matcher matcher=RegExp.groupMethodPattern.matcher(target);
      if (matcher.find()) {
        MethodInfo each=new MethodInfo();
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenReturnEnabled) {
          String returnTypeFull=getType(matcher.group(1));
          Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(returnTypeFull);
          while (toGenericsMatcher.find()) {
            String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
            for (            String generic : generics) {
              generic=getClassInSourceCode(generic,StrConst.empty,classInfo.importList);
              each.returnType.generics.add(generic);
            }
          }
          each.returnType.name=returnTypeFull.replace(RegExp.generics,StrConst.empty);
          each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
        }
        each.methodName=matcher.group(2);
        String args=matcher.group(3);
        String[] tmpArr=args.split(StrConst.comma);
        int tmpArrLen=tmpArr.length;
        List<String> tmpArrList=new ArrayList<String>();
        String buf=StrConst.empty;
        for (int i=0; i < tmpArrLen; i++) {
          String element=tmpArr[i].trim();
          if (element.matches(""String_Node_Str"")) {
            tmpArrList.add(element);
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            buf+=element;
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            String result=buf + StrConst.comma + element;
            tmpArrList.add(result);
            buf=StrConst.empty;
            continue;
          }
          if (!buf.equals(StrConst.empty)) {
            buf+=StrConst.comma + element;
            continue;
          }
          tmpArrList.add(element);
        }
        String[] argArr=tmpArrList.toArray(new String[0]);
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenArgsEnabled) {
          int argArrLen=argArr.length;
          for (int i=0; i < argArrLen; i++) {
            ArgType argType=new ArgType();
            String argTypeFull=argArr[i];
            Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(argTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,StrConst.empty,classInfo.importList);
                argType.generics.add(generic);
              }
            }
            String argTypeStr=argTypeFull.replaceAll(RegExp.generics,StrConst.empty);
            argType.name=getType(argTypeStr);
            argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
            each.argTypes.add(argType);
            Matcher nameMatcher=RegExp.groupMethodArgNamePattern.matcher(argTypeFull);
            if (nameMatcher.find()) {
              each.argNames.add(nameMatcher.group(1));
            }
 else {
              each.argNames.add(""String_Node_Str"" + i);
            }
          }
        }
        if (pref.isTestMethodGenExecludeAccessors) {
          String fieldName=null;
          String fieldType=null;
          if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            if (each.argTypes.size() > 0) {
              fieldType=each.argTypes.get(0).name;
            }
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            fieldType=each.returnType.name;
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(2);
            fieldType=each.returnType.name;
          }
          if (fieldName != null) {
            fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
            fieldType=fieldType.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
            String searchRegexp=""String_Node_Str"" + fieldType + ""String_Node_Str""+ RegExp.generics+ ""String_Node_Str""+ RegExp.wsPlusMax+ fieldName+ ""String_Node_Str"";
            if (targetClassSourceStr.replaceAll(RegExp.crlf,StrConst.empty).matches(searchRegexp)) {
              continue;
            }
          }
        }
        String prefix=pref.isJUnitVersion3 ? StrConst.testMethodPrefix4Version3 + pref.testMethodDelimiter : StrConst.empty;
        each.testMethodName=prefix + each.methodName;
        if (pref.isTestMethodGenArgsEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodArgsPrefix;
          if (each.argTypes.size() == 0) {
            each.testMethodName+=pref.testMethodArgsDelimiter;
          }
          for (          ArgType argType : each.argTypes) {
            each.testMethodName+=pref.testMethodArgsDelimiter + argType.nameInMethodName;
          }
        }
        if (pref.isTestMethodGenReturnEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodReturnPrefix + pref.testMethodReturnDelimiter+ each.returnType.nameInMethodName;
        }
        if (target.matches(RegExp.matchesStaticMethod)) {
          each.isStatic=true;
        }
        testMethods.add(each);
        if (pref.isTestMethodGenExceptions) {
          String throwsExceptions=matcher.group(4);
          if (throwsExceptions != null) {
            String[] exceptions=throwsExceptions.replaceAll(""String_Node_Str"" + RegExp.wsPlusMax,StrConst.empty).split(StrConst.comma);
            for (            String exp : exceptions) {
              exp=exp.trim();
              MethodInfo expTest=ObjectUtil.deepCopy(each);
              expTest.testingTargetException=new ExceptionInfo();
              expTest.testingTargetException.name=exp;
              expTest.testingTargetException.nameInMethodName=TestCaseGenerateUtil.getTypeAvailableInMethodName(exp);
              expTest.testMethodName=expTest.testMethodName + pref.testMethodDelimiter + pref.testMethodExceptionPrefix+ pref.testMethodExceptionDelimiter+ expTest.testingTargetException.nameInMethodName;
              testMethods.add(expTest);
            }
          }
        }
      }
    }
  }
  finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.constructors=constructors;
  classInfo.methods=testMethods;
  return classInfo;
}",0.8624421790092963
12033,"/** 
 * Get the information on the unimplemented test methods.
 * @param testTarget
 * @param testCase
 * @return the information on test class with the unimplemented test methods
 * @throws Exception
 */
public static ClassInfo getClassInfoWithUnimplementedTestMethods(IFile testTarget,IFile testCase) throws Exception {
  PreferenceLoader pref=new PreferenceLoader();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> unimplementedMethodNames=new ArrayList<MethodInfo>();
  if (pref.isTestMethodGenEnabled) {
    ClassInfo expectedClassInfo=getTestClassInfoFromTargetClass(testTarget);
    List<MethodInfo> expectedMethods=expectedClassInfo.methods;
    ClassInfo actualClassInfo=getMethodNamesAlreadyExists(testCase);
    List<MethodInfo> actualMethods=actualClassInfo.methods;
    for (    MethodInfo expected : expectedMethods) {
      boolean exist=false;
      for (      MethodInfo actual : actualMethods) {
        String escapedExp=expected.testMethodName.replace(StrConst.testMethodPrefix4Version3,StrConst.empty).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",StrConst.empty);
        if (actual.testMethodName.matches(""String_Node_Str"" + escapedExp + ""String_Node_Str"")) {
          exist=true;
          break;
        }
      }
      if (!exist)       unimplementedMethodNames.add(expected);
    }
    if (pref.isTestMethodGenNotBlankEnabled) {
      List<String> notImportedList=new ArrayList<String>();
      List<String> expImportedList=expectedClassInfo.importList;
      List<String> actImportedList=actualClassInfo.importList;
      for (      String expImported : expImportedList) {
        boolean found=false;
        for (        String actImported : actImportedList) {
          if (expImported.equals(actImported)) {
            found=true;
            break;
          }
        }
        if (!found)         notImportedList.add(expImported);
 else         notImportedList.add(""String_Node_Str"" + expImported);
      }
      classInfo.importList=notImportedList;
      if (pref.isTestMethodGenEnabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportMockito) {
        classInfo.importList.add(""String_Node_Str"");
      }
    }
  }
  classInfo.methods=unimplementedMethodNames;
  return classInfo;
}","/** 
 * Get the information on the unimplemented test methods.
 * @param testTarget
 * @param testCase
 * @return the information on test class with the unimplemented test methods
 * @throws Exception
 */
public static ClassInfo getClassInfoWithUnimplementedTestMethods(String testTargetClassname,IFile testTarget,IFile testCase) throws Exception {
  PreferenceLoader pref=new PreferenceLoader();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> unimplementedMethodNames=new ArrayList<MethodInfo>();
  if (pref.isTestMethodGenEnabled) {
    ClassInfo expectedClassInfo=getTestClassInfoFromTargetClass(testTargetClassname,testTarget);
    List<MethodInfo> expectedMethods=expectedClassInfo.methods;
    ClassInfo actualClassInfo=getMethodNamesAlreadyExists(testCase);
    List<MethodInfo> actualMethods=actualClassInfo.methods;
    for (    MethodInfo expected : expectedMethods) {
      boolean exist=false;
      for (      MethodInfo actual : actualMethods) {
        String escapedExp=expected.testMethodName.replace(StrConst.testMethodPrefix4Version3,StrConst.empty).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",StrConst.empty);
        if (actual.testMethodName.matches(""String_Node_Str"" + escapedExp + ""String_Node_Str"")) {
          exist=true;
          break;
        }
      }
      if (!exist)       unimplementedMethodNames.add(expected);
    }
    if (pref.isTestMethodGenNotBlankEnabled) {
      List<String> notImportedList=new ArrayList<String>();
      List<String> expImportedList=expectedClassInfo.importList;
      List<String> actImportedList=actualClassInfo.importList;
      for (      String expImported : expImportedList) {
        boolean found=false;
        for (        String actImported : actImportedList) {
          if (expImported.equals(actImported)) {
            found=true;
            break;
          }
        }
        if (!found)         notImportedList.add(expImported);
 else         notImportedList.add(""String_Node_Str"" + expImported);
      }
      classInfo.importList=notImportedList;
      if (pref.isTestMethodGenEnabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportMockito) {
        classInfo.importList.add(""String_Node_Str"");
      }
    }
  }
  classInfo.methods=unimplementedMethodNames;
  return classInfo;
}",0.9910866679309692
12034,"/** 
 * Get sample implementation source code of the test methods.
 * @param testMethod
 * @param testMethods
 * @param testTargetClassname
 * @return sample implementation source code
 */
public static String getNotBlankTestMethodSource(MethodInfo testMethod,ClassInfo testClassinfo,String testTargetClassname){
  PreferenceLoader pref=new PreferenceLoader();
  StringBuilder sb=new StringBuilder();
  String CRLF=StrConst.carriageReturn + StrConst.lineFeed;
  if (pref.isTestMethodGenEnabledSupportJMock2) {
    if (pref.isUsingJUnitHelperRuntime) {
      if (pref.isJUnitVersion4) {
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(CRLF);
      }
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
  }
  if (pref.isTestMethodGenEnabledSupportEasyMock) {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
  }
  sb.append(""String_Node_Str"");
  String returnTypeName=testMethod.returnType.name;
  Object returnDefaultValue=null;
  if (!returnTypeName.equals(""String_Node_Str"")) {
    returnTypeName=returnTypeName.replaceAll(RegExp.generics,StrConst.empty);
    returnTypeName=getClassInSourceCode(returnTypeName,testTargetClassname,testClassinfo.importList);
    List<String> generics=testMethod.returnType.generics;
    int genericsLen=generics.size();
    if (genericsLen > 0) {
      returnTypeName+=""String_Node_Str"" + generics.get(0);
      for (int i=1; i < genericsLen; i++) {
        returnTypeName+=StrConst.comma + generics.get(i);
      }
      returnTypeName+=""String_Node_Str"";
    }
    if (PrimitiveTypeUtil.isPrimitive(returnTypeName)) {
      returnDefaultValue=PrimitiveTypeUtil.getTypeDefaultValue(returnTypeName);
    }
  }
  if (!testMethod.isStatic) {
    sb.append(testTargetClassname);
    sb.append(""String_Node_Str"");
    sb.append(testTargetClassname);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (pref.isTestMethodGenEnabledSupportMockito) {
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  List<ArgType> argTypes=testMethod.argTypes;
  List<String> argNames=testMethod.argNames;
  List<String> args=new ArrayList<String>();
  int argTypesLen=argTypes.size();
  if (argTypesLen > 0 && argTypes.get(0).name != null && !argTypes.get(0).name.equals(StrConst.empty)) {
    for (int i=0; i < argTypesLen; i++) {
      ArgType argType=argTypes.get(i);
      if (argType.name.matches(""String_Node_Str""))       argType.name=argType.name.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String argTypeName=getClassInSourceCode(argType.name,testTargetClassname,testClassinfo.importList);
      boolean isJMock2=pref.isTestMethodGenEnabledSupportJMock2 && MockGenUtil.isMockableClassName(argTypeName,testClassinfo.importList);
      boolean isEasyMock=pref.isTestMethodGenEnabledSupportEasyMock && MockGenUtil.isMockableClassName(argTypeName,testClassinfo.importList);
      boolean isMockito=pref.isTestMethodGenEnabledSupportMockito && MockGenUtil.isMockableClassName(argTypeName,testClassinfo.importList);
      if (isJMock2) {
        sb.append(""String_Node_Str"");
      }
      sb.append(argTypeName);
      if (argType.generics.size() > 0) {
        sb.append(""String_Node_Str"");
        sb.append(argType.generics.get(0));
        if (argType.generics.size() > 1) {
          for (int j=1; j < argType.generics.size(); j++) {
            sb.append(StrConst.comma);
            sb.append(argType.generics.get(j));
          }
        }
        sb.append(""String_Node_Str"");
      }
      String argName=argNames.get(i);
      if (argName == null || argName.length() == 0) {
        argName=""String_Node_Str"" + i;
      }
      sb.append(""String_Node_Str"");
      sb.append(argName);
      sb.append(""String_Node_Str"");
      if (PrimitiveTypeUtil.isPrimitive(argType.name)) {
        String primitiveDefault=PrimitiveTypeUtil.getTypeDefaultValue(argType.name);
        sb.append(primitiveDefault);
      }
 else {
        if (isJMock2) {
          sb.append(pref.isUsingJUnitHelperRuntime ? ""String_Node_Str"" : ""String_Node_Str"");
          sb.append(""String_Node_Str"");
          sb.append(argTypeName);
          sb.append(""String_Node_Str"");
        }
 else         if (isEasyMock) {
          sb.append(""String_Node_Str"");
          sb.append(argTypeName);
          sb.append(""String_Node_Str"");
        }
 else         if (isMockito) {
          sb.append(""String_Node_Str"");
          sb.append(argTypeName);
          sb.append(""String_Node_Str"");
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      args.add(argName);
    }
  }
  if (pref.isTestMethodGenEnabledSupportJMock2) {
    sb.append(pref.isUsingJUnitHelperRuntime ? ""String_Node_Str"" : ""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (pref.isTestMethodGenEnabledSupportEasyMock) {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (pref.isTestMethodGenEnabledSupportMockito) {
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (pref.isTestMethodGenExceptions && testMethod.testingTargetException != null) {
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (!returnTypeName.equals(""String_Node_Str"")) {
    sb.append(returnTypeName);
    sb.append(""String_Node_Str"");
  }
  if (testMethod.isStatic) {
    sb.append(testTargetClassname);
  }
 else {
    sb.append(""String_Node_Str"");
  }
  sb.append(StrConst.dot);
  sb.append(testMethod.methodName);
  sb.append(""String_Node_Str"");
  if (args.size() > 0 && argTypesLen > 0 && argTypes.get(0).name != null && !argTypes.get(0).name.equals(StrConst.empty))   sb.append(args.get(0));
  for (int i=1; i < argTypes.size(); i++) {
    sb.append(""String_Node_Str"");
    sb.append(args.get(i));
  }
  sb.append(""String_Node_Str"");
  sb.append(CRLF);
  if (pref.isTestMethodGenExceptions && testMethod.testingTargetException != null) {
    sb.append(""String_Node_Str"");
    sb.append(StrConst.expectedExceptionNotThrownMessage);
    sb.append(""String_Node_Str"");
    sb.append(testMethod.testingTargetException.name);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(testMethod.testingTargetException.name);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
  }
 else {
    if (pref.isTestMethodGenEnabledSupportEasyMock) {
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
    if (pref.isTestMethodGenEnabledSupportMockito) {
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
    if (!returnTypeName.equals(""String_Node_Str"")) {
      sb.append(""String_Node_Str"");
      sb.append(returnTypeName);
      sb.append(""String_Node_Str"");
      sb.append(returnDefaultValue);
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
    if (!returnTypeName.equals(""String_Node_Str"")) {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
  }
  return sb.toString();
}","/** 
 * Get sample implementation source code of the test methods.
 * @param testMethod
 * @param testMethods
 * @param testTargetClassname
 * @return sample implementation source code
 */
public static String getNotBlankTestMethodSource(MethodInfo testMethod,ClassInfo testClassinfo,String testTargetClassname){
  PreferenceLoader pref=new PreferenceLoader();
  StringBuilder sb=new StringBuilder();
  String CRLF=StrConst.carriageReturn + StrConst.lineFeed;
  if (pref.isTestMethodGenEnabledSupportJMock2) {
    if (pref.isUsingJUnitHelperRuntime) {
      if (pref.isJUnitVersion4) {
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(CRLF);
      }
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
  }
  if (pref.isTestMethodGenEnabledSupportEasyMock) {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
  }
  sb.append(""String_Node_Str"");
  String returnTypeName=testMethod.returnType.name;
  Object returnDefaultValue=null;
  if (!returnTypeName.equals(""String_Node_Str"")) {
    returnTypeName=returnTypeName.replaceAll(RegExp.generics,StrConst.empty);
    returnTypeName=getClassInSourceCode(returnTypeName,testTargetClassname,testClassinfo.importList);
    List<String> generics=testMethod.returnType.generics;
    int genericsLen=generics.size();
    if (genericsLen > 0) {
      returnTypeName+=""String_Node_Str"" + generics.get(0);
      for (int i=1; i < genericsLen; i++) {
        returnTypeName+=StrConst.comma + generics.get(i);
      }
      returnTypeName+=""String_Node_Str"";
    }
    if (PrimitiveTypeUtil.isPrimitive(returnTypeName)) {
      returnDefaultValue=PrimitiveTypeUtil.getTypeDefaultValue(returnTypeName);
    }
  }
  if (!testMethod.isStatic) {
    if (testClassinfo.constructors != null && testClassinfo.constructors.size() > 0) {
      ConstructorInfo constructor=testClassinfo.constructors.get(0);
      List<String> args=new ArrayList<String>();
      for (int i=0; i < constructor.argNames.size(); i++) {
        ArgType argType=constructor.argTypes.get(i);
        sb.append(argType.name);
        sb.append(""String_Node_Str"");
        sb.append(constructor.argNames.get(i));
        sb.append(""String_Node_Str"");
        if (PrimitiveTypeUtil.isPrimitive(argType.name)) {
          String primitiveDefault=PrimitiveTypeUtil.getTypeDefaultValue(argType.name);
          sb.append(primitiveDefault);
        }
 else {
          sb.append(""String_Node_Str"");
        }
        sb.append(""String_Node_Str"");
        sb.append(CRLF);
        sb.append(""String_Node_Str"");
        args.add(constructor.argNames.get(i));
      }
      sb.append(testTargetClassname);
      sb.append(""String_Node_Str"");
      sb.append(testTargetClassname);
      sb.append(""String_Node_Str"");
      sb.append(args.get(0));
      for (int i=1; i < args.size(); i++) {
        sb.append(""String_Node_Str"");
        sb.append(args.get(i));
      }
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(testTargetClassname);
      sb.append(""String_Node_Str"");
      sb.append(testTargetClassname);
      sb.append(""String_Node_Str"");
    }
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (pref.isTestMethodGenEnabledSupportMockito) {
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  List<ArgType> argTypes=testMethod.argTypes;
  List<String> argNames=testMethod.argNames;
  List<String> args=new ArrayList<String>();
  int argTypesLen=argTypes.size();
  if (argTypesLen > 0 && argTypes.get(0).name != null && !argTypes.get(0).name.equals(StrConst.empty)) {
    for (int i=0; i < argTypesLen; i++) {
      ArgType argType=argTypes.get(i);
      if (argType.name.matches(""String_Node_Str""))       argType.name=argType.name.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String argTypeName=getClassInSourceCode(argType.name,testTargetClassname,testClassinfo.importList);
      boolean isJMock2=pref.isTestMethodGenEnabledSupportJMock2 && MockGenUtil.isMockableClassName(argTypeName,testClassinfo.importList);
      boolean isEasyMock=pref.isTestMethodGenEnabledSupportEasyMock && MockGenUtil.isMockableClassName(argTypeName,testClassinfo.importList);
      boolean isMockito=pref.isTestMethodGenEnabledSupportMockito && MockGenUtil.isMockableClassName(argTypeName,testClassinfo.importList);
      if (isJMock2) {
        sb.append(""String_Node_Str"");
      }
      sb.append(argTypeName);
      if (argType.generics.size() > 0) {
        sb.append(""String_Node_Str"");
        sb.append(argType.generics.get(0));
        if (argType.generics.size() > 1) {
          for (int j=1; j < argType.generics.size(); j++) {
            sb.append(StrConst.comma);
            sb.append(argType.generics.get(j));
          }
        }
        sb.append(""String_Node_Str"");
      }
      String argName=argNames.get(i);
      if (argName == null || argName.length() == 0) {
        argName=""String_Node_Str"" + i;
      }
      sb.append(""String_Node_Str"");
      sb.append(argName);
      sb.append(""String_Node_Str"");
      if (PrimitiveTypeUtil.isPrimitive(argType.name)) {
        String primitiveDefault=PrimitiveTypeUtil.getTypeDefaultValue(argType.name);
        sb.append(primitiveDefault);
      }
 else {
        if (isJMock2) {
          sb.append(pref.isUsingJUnitHelperRuntime ? ""String_Node_Str"" : ""String_Node_Str"");
          sb.append(""String_Node_Str"");
          sb.append(argTypeName);
          sb.append(""String_Node_Str"");
        }
 else         if (isEasyMock) {
          sb.append(""String_Node_Str"");
          sb.append(argTypeName);
          sb.append(""String_Node_Str"");
        }
 else         if (isMockito) {
          sb.append(""String_Node_Str"");
          sb.append(argTypeName);
          sb.append(""String_Node_Str"");
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      args.add(argName);
    }
  }
  if (pref.isTestMethodGenEnabledSupportJMock2) {
    sb.append(pref.isUsingJUnitHelperRuntime ? ""String_Node_Str"" : ""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (pref.isTestMethodGenEnabledSupportEasyMock) {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (pref.isTestMethodGenEnabledSupportMockito) {
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (pref.isTestMethodGenExceptions && testMethod.testingTargetException != null) {
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (!returnTypeName.equals(""String_Node_Str"")) {
    sb.append(returnTypeName);
    sb.append(""String_Node_Str"");
  }
  if (testMethod.isStatic) {
    sb.append(testTargetClassname);
  }
 else {
    sb.append(""String_Node_Str"");
  }
  sb.append(StrConst.dot);
  sb.append(testMethod.methodName);
  sb.append(""String_Node_Str"");
  if (args.size() > 0 && argTypesLen > 0 && argTypes.get(0).name != null && !argTypes.get(0).name.equals(StrConst.empty))   sb.append(args.get(0));
  for (int i=1; i < argTypes.size(); i++) {
    sb.append(""String_Node_Str"");
    sb.append(args.get(i));
  }
  sb.append(""String_Node_Str"");
  sb.append(CRLF);
  if (pref.isTestMethodGenExceptions && testMethod.testingTargetException != null) {
    sb.append(""String_Node_Str"");
    sb.append(StrConst.expectedExceptionNotThrownMessage);
    sb.append(""String_Node_Str"");
    sb.append(testMethod.testingTargetException.name);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(testMethod.testingTargetException.name);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
  }
 else {
    if (pref.isTestMethodGenEnabledSupportEasyMock) {
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
    if (pref.isTestMethodGenEnabledSupportMockito) {
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
    if (!returnTypeName.equals(""String_Node_Str"")) {
      sb.append(""String_Node_Str"");
      sb.append(returnTypeName);
      sb.append(""String_Node_Str"");
      sb.append(returnDefaultValue);
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
    if (!returnTypeName.equals(""String_Node_Str"")) {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
  }
  return sb.toString();
}",0.9002227693750733
12035,"/** 
 * Get sample implementation source code of the test methods.
 * @param testMethod
 * @param testMethods
 * @param testTargetClassname
 * @return sample implementation source code
 */
public static String getNotBlankTestMethodSource(MethodInfo testMethod,ClassInfo testClassinfo,String testTargetClassname){
  PreferenceLoader pref=new PreferenceLoader();
  StringBuilder sb=new StringBuilder();
  String CRLF=StrConst.carriageReturn + StrConst.lineFeed;
  if (pref.isTestMethodGenEnabledSupportJMock2) {
    if (pref.isUsingJUnitHelperRuntime) {
      if (pref.isJUnitVersion4) {
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(CRLF);
      }
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
  }
  if (pref.isTestMethodGenEnabledSupportEasyMock) {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
  }
  sb.append(""String_Node_Str"");
  String returnTypeName=testMethod.returnType.name;
  Object returnDefaultValue=null;
  if (!returnTypeName.equals(""String_Node_Str"")) {
    returnTypeName=returnTypeName.replaceAll(RegExp.generics,StrConst.empty);
    returnTypeName=getClassInSourceCode(returnTypeName,testTargetClassname,testClassinfo.importList);
    List<String> generics=testMethod.returnType.generics;
    int genericsLen=generics.size();
    if (genericsLen > 0) {
      returnTypeName+=""String_Node_Str"" + generics.get(0);
      for (int i=1; i < genericsLen; i++) {
        returnTypeName+=StrConst.comma + generics.get(i);
      }
      returnTypeName+=""String_Node_Str"";
    }
    if (PrimitiveTypeUtil.isPrimitive(returnTypeName)) {
      returnDefaultValue=PrimitiveTypeUtil.getTypeDefaultValue(returnTypeName);
    }
  }
  if (!testMethod.isStatic) {
    if (testClassinfo.constructors != null && testClassinfo.constructors.size() > 0) {
      ConstructorInfo constructor=testClassinfo.constructors.get(0);
      List<String> args=new ArrayList<String>();
      for (int i=0; i < constructor.argNames.size(); i++) {
        ArgType argType=constructor.argTypes.get(i);
        sb.append(argType.name);
        sb.append(""String_Node_Str"");
        sb.append(constructor.argNames.get(i));
        sb.append(""String_Node_Str"");
        if (PrimitiveTypeUtil.isPrimitive(argType.name)) {
          String primitiveDefault=PrimitiveTypeUtil.getTypeDefaultValue(argType.name);
          sb.append(primitiveDefault);
        }
 else {
          sb.append(""String_Node_Str"");
        }
        sb.append(""String_Node_Str"");
        sb.append(CRLF);
        sb.append(""String_Node_Str"");
        args.add(constructor.argNames.get(i));
      }
      sb.append(testTargetClassname);
      sb.append(""String_Node_Str"");
      sb.append(testTargetClassname);
      sb.append(""String_Node_Str"");
      sb.append(args.get(0));
      for (int i=1; i < args.size(); i++) {
        sb.append(""String_Node_Str"");
        sb.append(args.get(i));
      }
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(testTargetClassname);
      sb.append(""String_Node_Str"");
      sb.append(testTargetClassname);
      sb.append(""String_Node_Str"");
    }
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (pref.isTestMethodGenEnabledSupportMockito) {
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  List<ArgType> argTypes=testMethod.argTypes;
  List<String> argNames=testMethod.argNames;
  List<String> args=new ArrayList<String>();
  int argTypesLen=argTypes.size();
  if (argTypesLen > 0 && argTypes.get(0).name != null && !argTypes.get(0).name.equals(StrConst.empty)) {
    for (int i=0; i < argTypesLen; i++) {
      ArgType argType=argTypes.get(i);
      if (argType.name.matches(""String_Node_Str""))       argType.name=argType.name.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String argTypeName=getClassInSourceCode(argType.name,testTargetClassname,testClassinfo.importList);
      boolean isJMock2=pref.isTestMethodGenEnabledSupportJMock2 && MockGenUtil.isMockableClassName(argTypeName,testClassinfo.importList);
      boolean isEasyMock=pref.isTestMethodGenEnabledSupportEasyMock && MockGenUtil.isMockableClassName(argTypeName,testClassinfo.importList);
      boolean isMockito=pref.isTestMethodGenEnabledSupportMockito && MockGenUtil.isMockableClassName(argTypeName,testClassinfo.importList);
      if (isJMock2) {
        sb.append(""String_Node_Str"");
      }
      sb.append(argTypeName);
      if (argType.generics.size() > 0) {
        sb.append(""String_Node_Str"");
        sb.append(argType.generics.get(0));
        if (argType.generics.size() > 1) {
          for (int j=1; j < argType.generics.size(); j++) {
            sb.append(StrConst.comma);
            sb.append(argType.generics.get(j));
          }
        }
        sb.append(""String_Node_Str"");
      }
      String argName=argNames.get(i);
      if (argName == null || argName.length() == 0) {
        argName=""String_Node_Str"" + i;
      }
      sb.append(""String_Node_Str"");
      sb.append(argName);
      sb.append(""String_Node_Str"");
      if (PrimitiveTypeUtil.isPrimitive(argType.name)) {
        String primitiveDefault=PrimitiveTypeUtil.getTypeDefaultValue(argType.name);
        sb.append(primitiveDefault);
      }
 else {
        if (isJMock2) {
          sb.append(pref.isUsingJUnitHelperRuntime ? ""String_Node_Str"" : ""String_Node_Str"");
          sb.append(""String_Node_Str"");
          sb.append(argTypeName);
          sb.append(""String_Node_Str"");
        }
 else         if (isEasyMock) {
          sb.append(""String_Node_Str"");
          sb.append(argTypeName);
          sb.append(""String_Node_Str"");
        }
 else         if (isMockito) {
          sb.append(""String_Node_Str"");
          sb.append(argTypeName);
          sb.append(""String_Node_Str"");
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      args.add(argName);
    }
  }
  if (pref.isTestMethodGenEnabledSupportJMock2) {
    sb.append(pref.isUsingJUnitHelperRuntime ? ""String_Node_Str"" : ""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (pref.isTestMethodGenEnabledSupportEasyMock) {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (pref.isTestMethodGenEnabledSupportMockito) {
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (pref.isTestMethodGenExceptions && testMethod.testingTargetException != null) {
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (!returnTypeName.equals(""String_Node_Str"")) {
    sb.append(returnTypeName);
    sb.append(""String_Node_Str"");
  }
  if (testMethod.isStatic) {
    sb.append(testTargetClassname);
  }
 else {
    sb.append(""String_Node_Str"");
  }
  sb.append(StrConst.dot);
  sb.append(testMethod.methodName);
  sb.append(""String_Node_Str"");
  if (args.size() > 0 && argTypesLen > 0 && argTypes.get(0).name != null && !argTypes.get(0).name.equals(StrConst.empty))   sb.append(args.get(0));
  for (int i=1; i < argTypes.size(); i++) {
    sb.append(""String_Node_Str"");
    sb.append(args.get(i));
  }
  sb.append(""String_Node_Str"");
  sb.append(CRLF);
  if (pref.isTestMethodGenExceptions && testMethod.testingTargetException != null) {
    sb.append(""String_Node_Str"");
    sb.append(StrConst.expectedExceptionNotThrownMessage);
    sb.append(""String_Node_Str"");
    sb.append(testMethod.testingTargetException.name);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(testMethod.testingTargetException.name);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
  }
 else {
    if (pref.isTestMethodGenEnabledSupportEasyMock) {
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
    if (pref.isTestMethodGenEnabledSupportMockito) {
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
    if (!returnTypeName.equals(""String_Node_Str"")) {
      sb.append(""String_Node_Str"");
      sb.append(returnTypeName);
      sb.append(""String_Node_Str"");
      sb.append(returnDefaultValue);
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
    if (!returnTypeName.equals(""String_Node_Str"")) {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
  }
  return sb.toString();
}","/** 
 * Get sample implementation source code of the test methods.
 * @param testMethod
 * @param testMethods
 * @param testTargetClassname
 * @return sample implementation source code
 */
public static String getNotBlankTestMethodSource(MethodInfo testMethod,ClassInfo testClassinfo,String testTargetClassname){
  PreferenceLoader pref=new PreferenceLoader();
  StringBuilder sb=new StringBuilder();
  String CRLF=StrConst.carriageReturn + StrConst.lineFeed;
  if (pref.isTestMethodGenEnabledSupportJMock2) {
    if (pref.isUsingJUnitHelperRuntime) {
      if (pref.isJUnitVersion4) {
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(CRLF);
      }
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
  }
  if (pref.isTestMethodGenEnabledSupportEasyMock) {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
  }
  sb.append(""String_Node_Str"");
  String returnTypeName=testMethod.returnType.name;
  Object returnDefaultValue=null;
  if (!returnTypeName.equals(""String_Node_Str"")) {
    returnTypeName=returnTypeName.replaceAll(RegExp.generics,StrConst.empty);
    returnTypeName=getClassInSourceCode(returnTypeName,testTargetClassname,testClassinfo.importList);
    List<String> generics=testMethod.returnType.generics;
    int genericsLen=generics.size();
    if (genericsLen > 0) {
      returnTypeName+=""String_Node_Str"" + generics.get(0);
      for (int i=1; i < genericsLen; i++) {
        returnTypeName+=StrConst.comma + generics.get(i);
      }
      returnTypeName+=""String_Node_Str"";
    }
    if (PrimitiveTypeUtil.isPrimitive(returnTypeName)) {
      returnDefaultValue=PrimitiveTypeUtil.getTypeDefaultValue(returnTypeName);
    }
  }
  if (!testMethod.isStatic) {
    if (testClassinfo.constructors.size() > 0) {
      ConstructorInfo constructor=testClassinfo.constructors.get(0);
      List<String> args=new ArrayList<String>();
      for (int i=0; i < constructor.argTypes.size(); i++) {
        ArgType argType=constructor.argTypes.get(i);
        if (argType.name != null && argType.name.length() > 0) {
          sb.append(argType.name);
          sb.append(""String_Node_Str"");
          sb.append(constructor.argNames.get(i));
          sb.append(""String_Node_Str"");
          if (PrimitiveTypeUtil.isPrimitive(argType.name)) {
            String primitiveDefault=PrimitiveTypeUtil.getTypeDefaultValue(argType.name);
            sb.append(primitiveDefault);
          }
 else {
            sb.append(""String_Node_Str"");
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          args.add(constructor.argNames.get(i));
        }
      }
      sb.append(testTargetClassname);
      sb.append(""String_Node_Str"");
      sb.append(testTargetClassname);
      sb.append(""String_Node_Str"");
      if (args.size() > 0) {
        sb.append(args.get(0));
        for (int i=1; i < args.size(); i++) {
          sb.append(""String_Node_Str"");
          sb.append(args.get(i));
        }
      }
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(testTargetClassname);
      sb.append(""String_Node_Str"");
      sb.append(testTargetClassname);
      sb.append(""String_Node_Str"");
    }
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (pref.isTestMethodGenEnabledSupportMockito) {
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  List<ArgType> argTypes=testMethod.argTypes;
  List<String> argNames=testMethod.argNames;
  List<String> args=new ArrayList<String>();
  int argTypesLen=argTypes.size();
  if (argTypesLen > 0 && argTypes.get(0).name != null && !argTypes.get(0).name.equals(StrConst.empty)) {
    for (int i=0; i < argTypesLen; i++) {
      ArgType argType=argTypes.get(i);
      if (argType.name.matches(""String_Node_Str""))       argType.name=argType.name.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String argTypeName=getClassInSourceCode(argType.name,testTargetClassname,testClassinfo.importList);
      boolean isJMock2=pref.isTestMethodGenEnabledSupportJMock2 && MockGenUtil.isMockableClassName(argTypeName,testClassinfo.importList);
      boolean isEasyMock=pref.isTestMethodGenEnabledSupportEasyMock && MockGenUtil.isMockableClassName(argTypeName,testClassinfo.importList);
      boolean isMockito=pref.isTestMethodGenEnabledSupportMockito && MockGenUtil.isMockableClassName(argTypeName,testClassinfo.importList);
      if (isJMock2) {
        sb.append(""String_Node_Str"");
      }
      sb.append(argTypeName);
      if (argType.generics.size() > 0) {
        sb.append(""String_Node_Str"");
        sb.append(argType.generics.get(0));
        if (argType.generics.size() > 1) {
          for (int j=1; j < argType.generics.size(); j++) {
            sb.append(StrConst.comma);
            sb.append(argType.generics.get(j));
          }
        }
        sb.append(""String_Node_Str"");
      }
      String argName=argNames.get(i);
      if (argName == null || argName.length() == 0) {
        argName=""String_Node_Str"" + i;
      }
      sb.append(""String_Node_Str"");
      sb.append(argName);
      sb.append(""String_Node_Str"");
      if (PrimitiveTypeUtil.isPrimitive(argType.name)) {
        String primitiveDefault=PrimitiveTypeUtil.getTypeDefaultValue(argType.name);
        sb.append(primitiveDefault);
      }
 else {
        if (isJMock2) {
          sb.append(pref.isUsingJUnitHelperRuntime ? ""String_Node_Str"" : ""String_Node_Str"");
          sb.append(""String_Node_Str"");
          sb.append(argTypeName);
          sb.append(""String_Node_Str"");
        }
 else         if (isEasyMock) {
          sb.append(""String_Node_Str"");
          sb.append(argTypeName);
          sb.append(""String_Node_Str"");
        }
 else         if (isMockito) {
          sb.append(""String_Node_Str"");
          sb.append(argTypeName);
          sb.append(""String_Node_Str"");
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      args.add(argName);
    }
  }
  if (pref.isTestMethodGenEnabledSupportJMock2) {
    sb.append(pref.isUsingJUnitHelperRuntime ? ""String_Node_Str"" : ""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (pref.isTestMethodGenEnabledSupportEasyMock) {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (pref.isTestMethodGenEnabledSupportMockito) {
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (pref.isTestMethodGenExceptions && testMethod.testingTargetException != null) {
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (!returnTypeName.equals(""String_Node_Str"")) {
    sb.append(returnTypeName);
    sb.append(""String_Node_Str"");
  }
  if (testMethod.isStatic) {
    sb.append(testTargetClassname);
  }
 else {
    sb.append(""String_Node_Str"");
  }
  sb.append(StrConst.dot);
  sb.append(testMethod.methodName);
  sb.append(""String_Node_Str"");
  if (args.size() > 0 && argTypesLen > 0 && argTypes.get(0).name != null && !argTypes.get(0).name.equals(StrConst.empty))   sb.append(args.get(0));
  for (int i=1; i < argTypes.size(); i++) {
    sb.append(""String_Node_Str"");
    sb.append(args.get(i));
  }
  sb.append(""String_Node_Str"");
  sb.append(CRLF);
  if (pref.isTestMethodGenExceptions && testMethod.testingTargetException != null) {
    sb.append(""String_Node_Str"");
    sb.append(StrConst.expectedExceptionNotThrownMessage);
    sb.append(""String_Node_Str"");
    sb.append(testMethod.testingTargetException.name);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(testMethod.testingTargetException.name);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
  }
 else {
    if (pref.isTestMethodGenEnabledSupportEasyMock) {
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
    if (pref.isTestMethodGenEnabledSupportMockito) {
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
    if (!returnTypeName.equals(""String_Node_Str"")) {
      sb.append(""String_Node_Str"");
      sb.append(returnTypeName);
      sb.append(""String_Node_Str"");
      sb.append(returnDefaultValue);
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
    if (!returnTypeName.equals(""String_Node_Str"")) {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
  }
  return sb.toString();
}",0.9239874036268868
12036,"/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param javaFile
 * @return the information on the test methods
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(IFile javaFile) throws InvalidPreferenceException, IOException {
  PreferenceLoader pref=new PreferenceLoader();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=FileResourceUtil.readFile(javaFile);
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null) {
      line+=StrConst.lineFeed;
      tmpsb.append(SourceCodeParseUtil.trimLineComments(line));
      tmpsb.append(StrConst.space);
    }
    System.out.println(tmpsb.toString());
    String targetClassSourceStrWithoutComments=SourceCodeParseUtil.trimAllComments(tmpsb.toString());
    String targetClassSourceStr=SourceCodeParseUtil.trimInsideOfBraces(targetClassSourceStrWithoutComments);
    if (pref.isTestMethodGenNotBlankEnabled) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importLine : importLines) {
        importLine=importLine.replaceAll(StrConst.lineFeed,StrConst.empty);
        if (!importLine.matches(""String_Node_Str"") && !importLine.matches(""String_Node_Str"")) {
          String importedPackage=importLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      if (pref.isJUnitVersion3) {
      }
 else       if (pref.isJUnitVersion4) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        if (pref.isUsingJUnitHelperRuntime) {
          classInfo.importList.add(""String_Node_Str"");
        }
      }
      if (pref.isTestMethodGenEnabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
    }
    List<String> targets=SourceCodeParseUtil.getTargetMethods(targetClassSourceStr,pref.isTestMethodGenIncludePublic,pref.isTestMethodGenIncludeProtected,pref.isTestMethodGenIncludePackageLocal);
    for (    String target : targets) {
      Matcher matcher=RegExp.groupMethodPattern.matcher(target);
      if (matcher.find()) {
        MethodInfo each=new MethodInfo();
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenReturnEnabled) {
          String returnTypeFull=getType(matcher.group(1));
          Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(returnTypeFull);
          while (toGenericsMatcher.find()) {
            String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
            for (            String generic : generics) {
              generic=getClassInSourceCode(generic,StrConst.empty,new ArrayList<String>());
              each.returnType.generics.add(generic);
            }
          }
          each.returnType.name=returnTypeFull.replace(RegExp.generics,StrConst.empty);
          each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
        }
        each.methodName=matcher.group(2);
        String args=matcher.group(3);
        String[] tmpArr=args.split(StrConst.comma);
        int tmpArrLen=tmpArr.length;
        List<String> tmpArrList=new ArrayList<String>();
        String buf=StrConst.empty;
        for (int i=0; i < tmpArrLen; i++) {
          String element=tmpArr[i].trim();
          if (element.matches(""String_Node_Str"")) {
            tmpArrList.add(element);
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            buf+=element;
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            String result=buf + StrConst.comma + element;
            tmpArrList.add(result);
            buf=StrConst.empty;
            continue;
          }
          if (!buf.equals(StrConst.empty)) {
            buf+=StrConst.comma + element;
            continue;
          }
          tmpArrList.add(element);
        }
        String[] argArr=tmpArrList.toArray(new String[0]);
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenArgsEnabled) {
          int argArrLen=argArr.length;
          for (int i=0; i < argArrLen; i++) {
            ArgType argType=new ArgType();
            String argTypeFull=argArr[i];
            Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(argTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,StrConst.empty,new ArrayList<String>());
                argType.generics.add(generic);
              }
            }
            String argTypeStr=argTypeFull.replaceAll(RegExp.generics,StrConst.empty);
            argType.name=getType(argTypeStr);
            argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
            each.argTypes.add(argType);
          }
        }
        if (pref.isTestMethodGenExecludeAccessors) {
          String fieldName=null;
          String fieldType=null;
          if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            if (each.argTypes.size() > 0) {
              fieldType=each.argTypes.get(0).name;
            }
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            fieldType=each.returnType.name;
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(2);
            fieldType=each.returnType.name;
          }
          if (fieldName != null) {
            fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
            fieldType=fieldType.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
            String searchRegexp=""String_Node_Str"" + fieldType + RegExp.wsReq+ fieldName+ ""String_Node_Str"";
            if (targetClassSourceStr.matches(searchRegexp)) {
              continue;
            }
          }
        }
        String prefix=pref.isJUnitVersion3 ? StrConst.testMethodPrefix4Version3 + pref.testMethodDelimiter : StrConst.empty;
        each.testMethodName=prefix + each.methodName;
        if (pref.isTestMethodGenArgsEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodArgsPrefix;
          if (each.argTypes.size() == 0) {
            each.testMethodName+=pref.testMethodArgsDelimiter;
          }
          for (          ArgType argType : each.argTypes) {
            each.testMethodName+=pref.testMethodArgsDelimiter + argType.nameInMethodName;
          }
        }
        if (pref.isTestMethodGenReturnEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodReturnPrefix + pref.testMethodReturnDelimiter+ each.returnType.nameInMethodName;
        }
        if (target.matches(RegExp.matchesStaticMethod)) {
          each.isStatic=true;
        }
        testMethods.add(each);
        if (pref.isTestMethodGenExceptions) {
          String throwsExceptions=matcher.group(4);
          if (throwsExceptions != null) {
            String[] exceptions=throwsExceptions.replaceAll(""String_Node_Str"" + RegExp.wsReq,StrConst.empty).split(StrConst.comma);
            for (            String exp : exceptions) {
              exp=exp.trim();
              MethodInfo expTest=ObjectUtil.deepCopy(each);
              expTest.testingTargetException=new ExceptionInfo();
              expTest.testingTargetException.name=exp;
              expTest.testingTargetException.nameInMethodName=TestCaseGenerateUtil.getTypeAvailableInMethodName(exp);
              expTest.testMethodName=expTest.testMethodName + pref.testMethodDelimiter + pref.testMethodExceptionPrefix+ pref.testMethodExceptionDelimiter+ expTest.testingTargetException.nameInMethodName;
              testMethods.add(expTest);
            }
          }
        }
      }
    }
  }
  finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.methods=testMethods;
  return classInfo;
}","/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param javaFile
 * @return the information on the test methods
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(IFile javaFile) throws InvalidPreferenceException, IOException {
  PreferenceLoader pref=new PreferenceLoader();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=FileResourceUtil.readFile(javaFile);
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null) {
      line+=StrConst.lineFeed;
      tmpsb.append(SourceCodeParseUtil.trimLineComments(line));
      tmpsb.append(StrConst.space);
    }
    String targetClassSourceStrWithoutComments=SourceCodeParseUtil.trimAllComments(tmpsb.toString());
    String targetClassSourceStr=SourceCodeParseUtil.trimInsideOfBraces(targetClassSourceStrWithoutComments);
    if (pref.isTestMethodGenNotBlankEnabled) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importLine : importLines) {
        importLine=importLine.replaceAll(StrConst.lineFeed,StrConst.empty);
        if (!importLine.matches(""String_Node_Str"") && !importLine.matches(""String_Node_Str"")) {
          String importedPackage=importLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      if (pref.isJUnitVersion3) {
      }
 else       if (pref.isJUnitVersion4) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        if (pref.isUsingJUnitHelperRuntime) {
          classInfo.importList.add(""String_Node_Str"");
        }
      }
      if (pref.isTestMethodGenEnabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
    }
    List<String> targets=SourceCodeParseUtil.getTargetMethods(targetClassSourceStr,pref.isTestMethodGenIncludePublic,pref.isTestMethodGenIncludeProtected,pref.isTestMethodGenIncludePackageLocal);
    for (    String target : targets) {
      Matcher matcher=RegExp.groupMethodPattern.matcher(target);
      if (matcher.find()) {
        MethodInfo each=new MethodInfo();
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenReturnEnabled) {
          String returnTypeFull=getType(matcher.group(1));
          Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(returnTypeFull);
          while (toGenericsMatcher.find()) {
            String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
            for (            String generic : generics) {
              generic=getClassInSourceCode(generic,StrConst.empty,new ArrayList<String>());
              each.returnType.generics.add(generic);
            }
          }
          each.returnType.name=returnTypeFull.replace(RegExp.generics,StrConst.empty);
          each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
        }
        each.methodName=matcher.group(2);
        String args=matcher.group(3);
        String[] tmpArr=args.split(StrConst.comma);
        int tmpArrLen=tmpArr.length;
        List<String> tmpArrList=new ArrayList<String>();
        String buf=StrConst.empty;
        for (int i=0; i < tmpArrLen; i++) {
          String element=tmpArr[i].trim();
          if (element.matches(""String_Node_Str"")) {
            tmpArrList.add(element);
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            buf+=element;
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            String result=buf + StrConst.comma + element;
            tmpArrList.add(result);
            buf=StrConst.empty;
            continue;
          }
          if (!buf.equals(StrConst.empty)) {
            buf+=StrConst.comma + element;
            continue;
          }
          tmpArrList.add(element);
        }
        String[] argArr=tmpArrList.toArray(new String[0]);
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenArgsEnabled) {
          int argArrLen=argArr.length;
          for (int i=0; i < argArrLen; i++) {
            ArgType argType=new ArgType();
            String argTypeFull=argArr[i];
            Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(argTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,StrConst.empty,new ArrayList<String>());
                argType.generics.add(generic);
              }
            }
            String argTypeStr=argTypeFull.replaceAll(RegExp.generics,StrConst.empty);
            argType.name=getType(argTypeStr);
            argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
            each.argTypes.add(argType);
          }
        }
        if (pref.isTestMethodGenExecludeAccessors) {
          String fieldName=null;
          String fieldType=null;
          if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            if (each.argTypes.size() > 0) {
              fieldType=each.argTypes.get(0).name;
            }
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            fieldType=each.returnType.name;
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(2);
            fieldType=each.returnType.name;
          }
          if (fieldName != null) {
            fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
            fieldType=fieldType.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
            String searchRegexp=""String_Node_Str"" + fieldType + ""String_Node_Str""+ RegExp.generics+ ""String_Node_Str""+ RegExp.wsReq+ fieldName+ ""String_Node_Str"";
            if (targetClassSourceStr.replaceAll(RegExp.crlf,StrConst.empty).matches(searchRegexp)) {
              continue;
            }
          }
        }
        String prefix=pref.isJUnitVersion3 ? StrConst.testMethodPrefix4Version3 + pref.testMethodDelimiter : StrConst.empty;
        each.testMethodName=prefix + each.methodName;
        if (pref.isTestMethodGenArgsEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodArgsPrefix;
          if (each.argTypes.size() == 0) {
            each.testMethodName+=pref.testMethodArgsDelimiter;
          }
          for (          ArgType argType : each.argTypes) {
            each.testMethodName+=pref.testMethodArgsDelimiter + argType.nameInMethodName;
          }
        }
        if (pref.isTestMethodGenReturnEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodReturnPrefix + pref.testMethodReturnDelimiter+ each.returnType.nameInMethodName;
        }
        if (target.matches(RegExp.matchesStaticMethod)) {
          each.isStatic=true;
        }
        testMethods.add(each);
        if (pref.isTestMethodGenExceptions) {
          String throwsExceptions=matcher.group(4);
          if (throwsExceptions != null) {
            String[] exceptions=throwsExceptions.replaceAll(""String_Node_Str"" + RegExp.wsReq,StrConst.empty).split(StrConst.comma);
            for (            String exp : exceptions) {
              exp=exp.trim();
              MethodInfo expTest=ObjectUtil.deepCopy(each);
              expTest.testingTargetException=new ExceptionInfo();
              expTest.testingTargetException.name=exp;
              expTest.testingTargetException.nameInMethodName=TestCaseGenerateUtil.getTypeAvailableInMethodName(exp);
              expTest.testMethodName=expTest.testMethodName + pref.testMethodDelimiter + pref.testMethodExceptionPrefix+ pref.testMethodExceptionDelimiter+ expTest.testingTargetException.nameInMethodName;
              testMethods.add(expTest);
            }
          }
        }
      }
    }
  }
  finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.methods=testMethods;
  return classInfo;
}",0.9899650959860384
12037,"public void setMap(Map<String,Object> map){
}","public void setMap(Map<String,String> map){
  this.map=map;
}",0.7547169811320755
12038,"public void setList(List<String> arg){
}","public void setList(List<String> list){
  this.list=list;
}",0.7474747474747475
12039,"public Map<String,String> getMap(){
  return null;
}","public Map<String,String> getMap(){
  return map;
}",0.9320388349514565
12040,"/** 
 * trim inside of the second level braces.
 * @param source
 * @return
 */
public static String trimInsideOfBraces(String source){
  int len=source.length();
  boolean isInsideOfString=false;
  boolean isInsideOfChar=false;
  boolean isInsideOfTargetClass=false;
  boolean isInsideOfFirstLevel=false;
  boolean isInsideOfSecondLevel=false;
  Stack<Character> braceStack=new Stack<Character>();
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < len; i++) {
    char current=source.charAt(i);
    if (i > 0) {
      if (current == '""' && source.charAt(i - 1) != '\\') {
        isInsideOfString=(isInsideOfString) ? false : true;
      }
      if (current == '\'' && source.charAt(i - 1) != '\\') {
        isInsideOfChar=(isInsideOfChar) ? false : true;
      }
    }
    if (isInsideOfChar || isInsideOfString) {
      System.out.print(""String_Node_Str"" + current);
      continue;
    }
    System.out.print(current);
    if (!isInsideOfTargetClass) {
      sb.append(current);
      if (i >= 6 && source.charAt(i - 6) == ' ' && source.charAt(i - 5) == 'c' && source.charAt(i - 4) == 'l' && source.charAt(i - 3) == 'a' && source.charAt(i - 2) == 's' && source.charAt(i - 1) == 's' && current == ' ') {
        isInsideOfTargetClass=true;
      }
      continue;
    }
    if (!isInsideOfFirstLevel) {
      sb.append(current);
      if (current == '{') {
        isInsideOfFirstLevel=true;
      }
      continue;
    }
    if (!isInsideOfSecondLevel) {
      sb.append(current);
    }
    if (current == '{') {
      isInsideOfSecondLevel=true;
      braceStack.push(current);
    }
    if (!braceStack.empty() && current == '}') {
      braceStack.pop();
      if (braceStack.empty()) {
        sb.append(current);
      }
    }
    if (braceStack.empty()) {
      isInsideOfSecondLevel=false;
    }
  }
  return sb.toString();
}","/** 
 * trim inside of the second level braces.
 * @param source
 * @return
 */
public static String trimInsideOfBraces(String source){
  int len=source.length();
  boolean isInsideOfString=false;
  boolean isInsideOfChar=false;
  boolean isInsideOfTargetClass=false;
  boolean isInsideOfFirstLevel=false;
  boolean isInsideOfSecondLevel=false;
  Stack<Character> braceStack=new Stack<Character>();
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < len; i++) {
    char current=source.charAt(i);
    if (i > 0) {
      if (current == '""' && source.charAt(i - 1) != '\\') {
        isInsideOfString=(isInsideOfString) ? false : true;
      }
      if (current == '\'') {
        if (source.charAt(i - 1) != '\\') {
          isInsideOfChar=(isInsideOfChar) ? false : true;
        }
 else         if (source.charAt(i - 2) == '\\') {
          isInsideOfChar=(isInsideOfChar) ? false : true;
        }
      }
    }
    if (isInsideOfChar || isInsideOfString) {
      System.out.print(""String_Node_Str"" + current);
      continue;
    }
    if (!isInsideOfTargetClass) {
      sb.append(current);
      if (i >= 6 && source.charAt(i - 6) == ' ' && source.charAt(i - 5) == 'c' && source.charAt(i - 4) == 'l' && source.charAt(i - 3) == 'a' && source.charAt(i - 2) == 's' && source.charAt(i - 1) == 's' && current == ' ') {
        isInsideOfTargetClass=true;
      }
      continue;
    }
    if (!isInsideOfFirstLevel) {
      sb.append(current);
      if (current == '{') {
        isInsideOfFirstLevel=true;
      }
      continue;
    }
    if (!isInsideOfSecondLevel) {
      sb.append(current);
    }
    if (current == '{') {
      isInsideOfSecondLevel=true;
      braceStack.push(current);
    }
    if (!braceStack.empty() && current == '}') {
      braceStack.pop();
      if (braceStack.empty()) {
        sb.append(current);
      }
    }
    if (braceStack.empty()) {
      isInsideOfSecondLevel=false;
    }
  }
  return sb.toString();
}",0.952431011826544
12041,"/** 
 * Trim the all comment areas from source code string
 * @param source
 * @return result without line comments
 */
public static String trimAllComments(String source){
  return trimLineComments(source).replaceAll(""String_Node_Str"",StrConst.empty);
}","/** 
 * Trim the all comment areas from source code string
 * @param source
 * @return result without line comments
 */
public static String trimAllComments(String source){
  String withoutLineComments=trimLineComments(source);
  String withoutLineBreak=withoutLineComments.replaceAll(""String_Node_Str"",StrConst.empty);
  String withoutComments=withoutLineBreak.replaceAll(""String_Node_Str"",StrConst.empty);
  return withoutComments;
}",0.7053701015965167
12042,"/** 
 * trim inside of the second level braces.
 * @param source
 * @return
 */
public static String trimInsideOfBraces(String source){
  int len=source.length();
  boolean isInsideOfString=false;
  boolean isInsideOfChar=false;
  boolean isInsideOfTargetClass=false;
  boolean isInsideOfFirstLevel=false;
  boolean isInsideOfSecondLevel=false;
  Stack<Character> braceStack=new Stack<Character>();
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < len; i++) {
    char current=source.charAt(i);
    if (i > 0) {
      if (current == '""' && source.charAt(i - 1) != '\\') {
        isInsideOfString=(isInsideOfString) ? false : true;
      }
      if (current == '\'') {
        if (source.charAt(i - 1) != '\\') {
          isInsideOfChar=(isInsideOfChar) ? false : true;
        }
 else         if (source.charAt(i - 2) == '\\') {
          isInsideOfChar=(isInsideOfChar) ? false : true;
        }
      }
    }
    if (isInsideOfChar || isInsideOfString) {
      System.out.print(""String_Node_Str"" + current);
      continue;
    }
    if (!isInsideOfTargetClass) {
      sb.append(current);
      if (i >= 6 && source.charAt(i - 6) == ' ' && source.charAt(i - 5) == 'c' && source.charAt(i - 4) == 'l' && source.charAt(i - 3) == 'a' && source.charAt(i - 2) == 's' && source.charAt(i - 1) == 's' && current == ' ') {
        isInsideOfTargetClass=true;
      }
      continue;
    }
    if (!isInsideOfFirstLevel) {
      sb.append(current);
      if (current == '{') {
        isInsideOfFirstLevel=true;
      }
      continue;
    }
    if (!isInsideOfSecondLevel) {
      sb.append(current);
    }
    if (current == '{') {
      isInsideOfSecondLevel=true;
      braceStack.push(current);
    }
    if (!braceStack.empty() && current == '}') {
      braceStack.pop();
      if (braceStack.empty()) {
        sb.append(current);
      }
    }
    if (braceStack.empty()) {
      isInsideOfSecondLevel=false;
    }
  }
  return sb.toString();
}","/** 
 * trim inside of the second level braces.
 * @param source
 * @return
 */
public static String trimInsideOfBraces(String source){
  int len=source.length();
  boolean isInsideOfString=false;
  boolean isInsideOfChar=false;
  boolean isInsideOfTargetClass=false;
  boolean isInsideOfFirstLevel=false;
  boolean isInsideOfSecondLevel=false;
  Stack<Character> braceStack=new Stack<Character>();
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < len; i++) {
    char current=source.charAt(i);
    if (i > 0) {
      if (current == '""' && source.charAt(i - 1) != '\\') {
        isInsideOfString=(isInsideOfString) ? false : true;
        sb.append(current);
        continue;
      }
      if (current == '\'' && source.charAt(i - 1) != '\\') {
        isInsideOfChar=(isInsideOfChar) ? false : true;
        sb.append(current);
        continue;
      }
    }
    if (isInsideOfChar || isInsideOfString) {
      continue;
    }
    if (!isInsideOfTargetClass) {
      sb.append(current);
      if (i >= 6 && source.charAt(i - 6) == ' ' && source.charAt(i - 5) == 'c' && source.charAt(i - 4) == 'l' && source.charAt(i - 3) == 'a' && source.charAt(i - 2) == 's' && source.charAt(i - 1) == 's' && current == ' ') {
        isInsideOfTargetClass=true;
      }
      continue;
    }
    if (!isInsideOfFirstLevel) {
      sb.append(current);
      if (current == '{') {
        isInsideOfFirstLevel=true;
      }
      continue;
    }
    if (!isInsideOfSecondLevel) {
      sb.append(current);
    }
    if (current == '{') {
      isInsideOfSecondLevel=true;
      braceStack.push(current);
    }
    if (!braceStack.empty() && current == '}') {
      braceStack.pop();
      if (braceStack.empty()) {
        sb.append(current);
      }
    }
    if (braceStack.empty()) {
      isInsideOfSecondLevel=false;
    }
  }
  return sb.toString();
}",0.4348282192499344
12043,"/** 
 * trim inside of the second level braces.
 * @param source
 * @return
 */
public static String trimInsideOfBraces(String source){
  int len=source.length();
  boolean isInsideOfTargetClass=false;
  boolean isInsideOfFirstLevel=false;
  boolean isInsideOfSecondLevel=false;
  Stack<Character> braceStack=new Stack<Character>();
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < len; i++) {
    if (!isInsideOfTargetClass) {
      sb.append(source.charAt(i));
      if (i >= 6 && source.charAt(i - 6) == ' ' && source.charAt(i - 5) == 'c' && source.charAt(i - 4) == 'l' && source.charAt(i - 3) == 'a' && source.charAt(i - 2) == 's' && source.charAt(i - 1) == 's' && source.charAt(i) == ' ') {
        isInsideOfTargetClass=true;
      }
      continue;
    }
    if (!isInsideOfFirstLevel) {
      sb.append(source.charAt(i));
      if (source.charAt(i) == '{') {
        isInsideOfFirstLevel=true;
      }
      continue;
    }
    if (!isInsideOfSecondLevel) {
      sb.append(source.charAt(i));
    }
    if (source.charAt(i) == '{') {
      isInsideOfSecondLevel=true;
      braceStack.push(source.charAt(i));
    }
    if (!braceStack.empty() && source.charAt(i) == '}') {
      braceStack.pop();
      if (braceStack.empty()) {
        sb.append(source.charAt(i));
      }
    }
    if (braceStack.empty()) {
      isInsideOfSecondLevel=false;
    }
  }
  return sb.toString();
}","/** 
 * trim inside of the second level braces.
 * @param source
 * @return
 */
public static String trimInsideOfBraces(String source){
  int len=source.length();
  boolean isInsideOfString=false;
  boolean isInsideOfChar=false;
  boolean isInsideOfTargetClass=false;
  boolean isInsideOfFirstLevel=false;
  boolean isInsideOfSecondLevel=false;
  Stack<Character> braceStack=new Stack<Character>();
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < len; i++) {
    char current=source.charAt(i);
    if (i > 0) {
      if (current == '""' && source.charAt(i - 1) != '\\') {
        isInsideOfString=(isInsideOfString) ? false : true;
      }
      if (current == '\'' && source.charAt(i - 1) != '\\') {
        isInsideOfChar=(isInsideOfChar) ? false : true;
      }
    }
    if (isInsideOfChar || isInsideOfString) {
      System.out.print(""String_Node_Str"" + current);
      continue;
    }
    System.out.print(current);
    if (!isInsideOfTargetClass) {
      sb.append(current);
      if (i >= 6 && source.charAt(i - 6) == ' ' && source.charAt(i - 5) == 'c' && source.charAt(i - 4) == 'l' && source.charAt(i - 3) == 'a' && source.charAt(i - 2) == 's' && source.charAt(i - 1) == 's' && current == ' ') {
        isInsideOfTargetClass=true;
      }
      continue;
    }
    if (!isInsideOfFirstLevel) {
      sb.append(current);
      if (current == '{') {
        isInsideOfFirstLevel=true;
      }
      continue;
    }
    if (!isInsideOfSecondLevel) {
      sb.append(current);
    }
    if (current == '{') {
      isInsideOfSecondLevel=true;
      braceStack.push(current);
    }
    if (!braceStack.empty() && current == '}') {
      braceStack.pop();
      if (braceStack.empty()) {
        sb.append(current);
      }
    }
    if (braceStack.empty()) {
      isInsideOfSecondLevel=false;
    }
  }
  return sb.toString();
}",0.674060382008626
12044,"/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param javaFile
 * @return the information on the test methods
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(IFile javaFile) throws InvalidPreferenceException, IOException {
  PreferenceLoader pref=new PreferenceLoader();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=FileResourceUtil.readFile(javaFile);
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null) {
      line+=StrConst.lineFeed;
      tmpsb.append(SourceCodeParseUtil.trimLineComments(line));
      tmpsb.append(StrConst.space);
    }
    String targetClassSourceStrWithoutComments=SourceCodeParseUtil.trimAllComments(tmpsb.toString());
    String targetClassSourceStr=SourceCodeParseUtil.trimInsideOfBraces(targetClassSourceStrWithoutComments);
    if (pref.isTestMethodGenNotBlankEnabled) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importLine : importLines) {
        importLine=importLine.replaceAll(StrConst.lineFeed,StrConst.empty);
        if (!importLine.matches(""String_Node_Str"") && !importLine.matches(""String_Node_Str"")) {
          String importedPackage=importLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      if (pref.isJUnitVersion3) {
      }
 else       if (pref.isJUnitVersion4) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        if (pref.isUsingJUnitHelperRuntime) {
          classInfo.importList.add(""String_Node_Str"");
        }
      }
      if (pref.isTestMethodGenEnabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
    }
    List<String> targets=SourceCodeParseUtil.getTargetMethods(targetClassSourceStr,pref.isTestMethodGenIncludePublic,pref.isTestMethodGenIncludeProtected,pref.isTestMethodGenIncludePackageLocal);
    for (    String target : targets) {
      Matcher matcher=RegExp.groupMethodPattern.matcher(target);
      if (matcher.find()) {
        MethodInfo each=new MethodInfo();
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenReturnEnabled) {
          String returnTypeFull=getType(matcher.group(1));
          Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(returnTypeFull);
          while (toGenericsMatcher.find()) {
            String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
            for (            String generic : generics) {
              generic=getClassInSourceCode(generic,StrConst.empty,new ArrayList<String>());
              each.returnType.generics.add(generic);
            }
          }
          each.returnType.name=returnTypeFull.replace(RegExp.generics,StrConst.empty);
          each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
        }
        each.methodName=matcher.group(2);
        String args=matcher.group(3);
        String[] tmpArr=args.split(StrConst.comma);
        int tmpArrLen=tmpArr.length;
        List<String> tmpArrList=new ArrayList<String>();
        String buf=StrConst.empty;
        for (int i=0; i < tmpArrLen; i++) {
          String element=tmpArr[i].trim();
          if (element.matches(""String_Node_Str"")) {
            tmpArrList.add(element);
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            buf+=element;
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            String result=buf + StrConst.comma + element;
            tmpArrList.add(result);
            buf=StrConst.empty;
            continue;
          }
          if (!buf.equals(StrConst.empty)) {
            buf+=StrConst.comma + element;
            continue;
          }
          tmpArrList.add(element);
        }
        String[] argArr=tmpArrList.toArray(new String[0]);
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenArgsEnabled) {
          int argArrLen=argArr.length;
          for (int i=0; i < argArrLen; i++) {
            ArgType argType=new ArgType();
            String argTypeFull=argArr[i];
            Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(argTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,StrConst.empty,new ArrayList<String>());
                argType.generics.add(generic);
              }
            }
            String argTypeStr=argTypeFull.replaceAll(RegExp.generics,StrConst.empty);
            argType.name=getType(argTypeStr);
            argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
            each.argTypes.add(argType);
          }
        }
        if (pref.isTestMethodGenExecludeAccessors) {
          String fieldName=null;
          String fieldType=null;
          if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            if (each.argTypes.size() > 0) {
              fieldType=each.argTypes.get(0).name;
            }
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            fieldType=each.returnType.name;
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(2);
            fieldType=each.returnType.name;
          }
          if (fieldName != null) {
            fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
            fieldType=fieldType.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
            String searchRegexp=""String_Node_Str"" + fieldType + RegExp.wsReq+ fieldName+ ""String_Node_Str"";
            if (targetClassSourceStr.matches(searchRegexp)) {
              continue;
            }
          }
        }
        String prefix=pref.isJUnitVersion3 ? StrConst.testMethodPrefix4Version3 + pref.testMethodDelimiter : StrConst.empty;
        each.testMethodName=prefix + each.methodName;
        if (pref.isTestMethodGenArgsEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodArgsPrefix;
          if (each.argTypes.size() == 0) {
            each.testMethodName+=pref.testMethodArgsDelimiter;
          }
          for (          ArgType argType : each.argTypes) {
            each.testMethodName+=pref.testMethodArgsDelimiter + argType.nameInMethodName;
          }
        }
        if (pref.isTestMethodGenReturnEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodReturnPrefix + pref.testMethodReturnDelimiter+ each.returnType.nameInMethodName;
        }
        if (target.matches(RegExp.matchesStaticMethod)) {
          each.isStatic=true;
        }
        testMethods.add(each);
        if (pref.isTestMethodGenExceptions) {
          String throwsExceptions=matcher.group(4);
          if (throwsExceptions != null) {
            String[] exceptions=throwsExceptions.replaceAll(""String_Node_Str"" + RegExp.wsReq,StrConst.empty).split(StrConst.comma);
            for (            String exp : exceptions) {
              exp=exp.trim();
              MethodInfo expTest=ObjectUtil.deepCopy(each);
              expTest.testingTargetException=new ExceptionInfo();
              expTest.testingTargetException.name=exp;
              expTest.testingTargetException.nameInMethodName=TestCaseGenerateUtil.getTypeAvailableInMethodName(exp);
              expTest.testMethodName=expTest.testMethodName + pref.testMethodDelimiter + pref.testMethodExceptionPrefix+ pref.testMethodExceptionDelimiter+ expTest.testingTargetException.nameInMethodName;
              testMethods.add(expTest);
            }
          }
        }
      }
    }
  }
  finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.methods=testMethods;
  return classInfo;
}","/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param javaFile
 * @return the information on the test methods
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(IFile javaFile) throws InvalidPreferenceException, IOException {
  PreferenceLoader pref=new PreferenceLoader();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=FileResourceUtil.readFile(javaFile);
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null) {
      line+=StrConst.lineFeed;
      tmpsb.append(SourceCodeParseUtil.trimLineComments(line));
      tmpsb.append(StrConst.space);
    }
    System.out.println(tmpsb.toString());
    String targetClassSourceStrWithoutComments=SourceCodeParseUtil.trimAllComments(tmpsb.toString());
    String targetClassSourceStr=SourceCodeParseUtil.trimInsideOfBraces(targetClassSourceStrWithoutComments);
    if (pref.isTestMethodGenNotBlankEnabled) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importLine : importLines) {
        importLine=importLine.replaceAll(StrConst.lineFeed,StrConst.empty);
        if (!importLine.matches(""String_Node_Str"") && !importLine.matches(""String_Node_Str"")) {
          String importedPackage=importLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      if (pref.isJUnitVersion3) {
      }
 else       if (pref.isJUnitVersion4) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        if (pref.isUsingJUnitHelperRuntime) {
          classInfo.importList.add(""String_Node_Str"");
        }
      }
      if (pref.isTestMethodGenEnabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
    }
    List<String> targets=SourceCodeParseUtil.getTargetMethods(targetClassSourceStr,pref.isTestMethodGenIncludePublic,pref.isTestMethodGenIncludeProtected,pref.isTestMethodGenIncludePackageLocal);
    for (    String target : targets) {
      Matcher matcher=RegExp.groupMethodPattern.matcher(target);
      if (matcher.find()) {
        MethodInfo each=new MethodInfo();
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenReturnEnabled) {
          String returnTypeFull=getType(matcher.group(1));
          Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(returnTypeFull);
          while (toGenericsMatcher.find()) {
            String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
            for (            String generic : generics) {
              generic=getClassInSourceCode(generic,StrConst.empty,new ArrayList<String>());
              each.returnType.generics.add(generic);
            }
          }
          each.returnType.name=returnTypeFull.replace(RegExp.generics,StrConst.empty);
          each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
        }
        each.methodName=matcher.group(2);
        String args=matcher.group(3);
        String[] tmpArr=args.split(StrConst.comma);
        int tmpArrLen=tmpArr.length;
        List<String> tmpArrList=new ArrayList<String>();
        String buf=StrConst.empty;
        for (int i=0; i < tmpArrLen; i++) {
          String element=tmpArr[i].trim();
          if (element.matches(""String_Node_Str"")) {
            tmpArrList.add(element);
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            buf+=element;
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            String result=buf + StrConst.comma + element;
            tmpArrList.add(result);
            buf=StrConst.empty;
            continue;
          }
          if (!buf.equals(StrConst.empty)) {
            buf+=StrConst.comma + element;
            continue;
          }
          tmpArrList.add(element);
        }
        String[] argArr=tmpArrList.toArray(new String[0]);
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenArgsEnabled) {
          int argArrLen=argArr.length;
          for (int i=0; i < argArrLen; i++) {
            ArgType argType=new ArgType();
            String argTypeFull=argArr[i];
            Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(argTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,StrConst.empty,new ArrayList<String>());
                argType.generics.add(generic);
              }
            }
            String argTypeStr=argTypeFull.replaceAll(RegExp.generics,StrConst.empty);
            argType.name=getType(argTypeStr);
            argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
            each.argTypes.add(argType);
          }
        }
        if (pref.isTestMethodGenExecludeAccessors) {
          String fieldName=null;
          String fieldType=null;
          if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            if (each.argTypes.size() > 0) {
              fieldType=each.argTypes.get(0).name;
            }
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            fieldType=each.returnType.name;
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(2);
            fieldType=each.returnType.name;
          }
          if (fieldName != null) {
            fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
            fieldType=fieldType.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
            String searchRegexp=""String_Node_Str"" + fieldType + RegExp.wsReq+ fieldName+ ""String_Node_Str"";
            if (targetClassSourceStr.matches(searchRegexp)) {
              continue;
            }
          }
        }
        String prefix=pref.isJUnitVersion3 ? StrConst.testMethodPrefix4Version3 + pref.testMethodDelimiter : StrConst.empty;
        each.testMethodName=prefix + each.methodName;
        if (pref.isTestMethodGenArgsEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodArgsPrefix;
          if (each.argTypes.size() == 0) {
            each.testMethodName+=pref.testMethodArgsDelimiter;
          }
          for (          ArgType argType : each.argTypes) {
            each.testMethodName+=pref.testMethodArgsDelimiter + argType.nameInMethodName;
          }
        }
        if (pref.isTestMethodGenReturnEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodReturnPrefix + pref.testMethodReturnDelimiter+ each.returnType.nameInMethodName;
        }
        if (target.matches(RegExp.matchesStaticMethod)) {
          each.isStatic=true;
        }
        testMethods.add(each);
        if (pref.isTestMethodGenExceptions) {
          String throwsExceptions=matcher.group(4);
          if (throwsExceptions != null) {
            String[] exceptions=throwsExceptions.replaceAll(""String_Node_Str"" + RegExp.wsReq,StrConst.empty).split(StrConst.comma);
            for (            String exp : exceptions) {
              exp=exp.trim();
              MethodInfo expTest=ObjectUtil.deepCopy(each);
              expTest.testingTargetException=new ExceptionInfo();
              expTest.testingTargetException.name=exp;
              expTest.testingTargetException.nameInMethodName=TestCaseGenerateUtil.getTypeAvailableInMethodName(exp);
              expTest.testMethodName=expTest.testMethodName + pref.testMethodDelimiter + pref.testMethodExceptionPrefix+ pref.testMethodExceptionDelimiter+ expTest.testingTargetException.nameInMethodName;
              testMethods.add(expTest);
            }
          }
        }
      }
    }
  }
  finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.methods=testMethods;
  return classInfo;
}",0.9976915466637352
12045,"/** 
 * Get the information on the unimplemented test methods.
 * @param testTarget
 * @param testCase
 * @return the information on test class with the unimplemented test methods
 * @throws Exception
 */
public static ClassInfo getClassInfoWithUnimplementedTestMethods(IFile testTarget,IFile testCase) throws Exception {
  PreferenceLoader pref=new PreferenceLoader();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> unimplementedMethodNames=new ArrayList<MethodInfo>();
  if (pref.isTestMethodGenEnabled) {
    ClassInfo expectedClassInfo=getTestClassInfoFromTargetClass(testTarget);
    List<MethodInfo> expectedMethods=expectedClassInfo.methods;
    ClassInfo actualClassInfo=getMethodNamesAlreadyExists(testCase);
    List<MethodInfo> actualMethods=actualClassInfo.methods;
    for (    MethodInfo expected : expectedMethods) {
      boolean exist=false;
      for (      MethodInfo actual : actualMethods) {
        String escapedExp=expected.testMethodName.replace(StrConst.testMethodPrefix4Version3,StrConst.empty).replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (actual.testMethodName.matches(""String_Node_Str"" + escapedExp + ""String_Node_Str"")) {
          exist=true;
          break;
        }
      }
      if (!exist)       unimplementedMethodNames.add(expected);
    }
    if (pref.isTestMethodGenNotBlankEnabled) {
      List<String> notImportedList=new ArrayList<String>();
      List<String> expImportedList=expectedClassInfo.importList;
      List<String> actImportedList=actualClassInfo.importList;
      for (      String expImported : expImportedList) {
        boolean found=false;
        for (        String actImported : actImportedList) {
          if (expImported.equals(actImported)) {
            found=true;
            break;
          }
        }
        if (!found)         notImportedList.add(expImported);
 else         notImportedList.add(""String_Node_Str"" + expImported);
      }
      classInfo.importList=notImportedList;
      if (pref.isTestMethodGenEnabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
    }
  }
  classInfo.methods=unimplementedMethodNames;
  return classInfo;
}","/** 
 * Get the information on the unimplemented test methods.
 * @param testTarget
 * @param testCase
 * @return the information on test class with the unimplemented test methods
 * @throws Exception
 */
public static ClassInfo getClassInfoWithUnimplementedTestMethods(IFile testTarget,IFile testCase) throws Exception {
  PreferenceLoader pref=new PreferenceLoader();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> unimplementedMethodNames=new ArrayList<MethodInfo>();
  if (pref.isTestMethodGenEnabled) {
    ClassInfo expectedClassInfo=getTestClassInfoFromTargetClass(testTarget);
    List<MethodInfo> expectedMethods=expectedClassInfo.methods;
    ClassInfo actualClassInfo=getMethodNamesAlreadyExists(testCase);
    List<MethodInfo> actualMethods=actualClassInfo.methods;
    for (    MethodInfo expected : expectedMethods) {
      boolean exist=false;
      for (      MethodInfo actual : actualMethods) {
        String escapedExp=expected.testMethodName.replace(StrConst.testMethodPrefix4Version3,StrConst.empty).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",StrConst.empty);
        if (actual.testMethodName.matches(""String_Node_Str"" + escapedExp + ""String_Node_Str"")) {
          exist=true;
          break;
        }
      }
      if (!exist)       unimplementedMethodNames.add(expected);
    }
    if (pref.isTestMethodGenNotBlankEnabled) {
      List<String> notImportedList=new ArrayList<String>();
      List<String> expImportedList=expectedClassInfo.importList;
      List<String> actImportedList=actualClassInfo.importList;
      for (      String expImported : expImportedList) {
        boolean found=false;
        for (        String actImported : actImportedList) {
          if (expImported.equals(actImported)) {
            found=true;
            break;
          }
        }
        if (!found)         notImportedList.add(expImported);
 else         notImportedList.add(""String_Node_Str"" + expImported);
      }
      classInfo.importList=notImportedList;
      if (pref.isTestMethodGenEnabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
    }
  }
  classInfo.methods=unimplementedMethodNames;
  return classInfo;
}",0.5993129925237421
12046,"/** 
 * Get sample implementation source code of the test methods.
 * @param testMethod
 * @param testMethods
 * @param testTargetClassname
 * @return sample implementation source code
 */
public static String getNotBlankTestMethodSource(MethodInfo testMethod,ClassInfo testClassinfo,String testTargetClassname){
  PreferenceLoader pref=new PreferenceLoader();
  StringBuilder sb=new StringBuilder();
  String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
  if (pref.isTestMethodGenEnabledSupportJMock2) {
    if (pref.isUsingJUnitHelperRuntime) {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
  }
  if (pref.isTestMethodGenEnabledSupportEasyMock) {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
  }
  sb.append(""String_Node_Str"");
  String returnTypeName=testMethod.returnType.name;
  Object returnDefaultValue=null;
  if (!returnTypeName.equals(""String_Node_Str"")) {
    returnTypeName=returnTypeName.replaceAll(RXP_GENERICS_PART,STR.EMPTY);
    returnTypeName=getClassInSourceCode(returnTypeName,testTargetClassname,testClassinfo.importList);
    List<String> generics=testMethod.returnType.generics;
    int genericsLen=generics.size();
    if (genericsLen > 0) {
      returnTypeName+=""String_Node_Str"" + generics.get(0);
      for (int i=1; i < genericsLen; i++)       returnTypeName+=""String_Node_Str"" + generics.get(i);
      returnTypeName+=""String_Node_Str"";
    }
    if (PrimitiveTypeUtil.isPrimitive(returnTypeName)) {
      returnDefaultValue=PrimitiveTypeUtil.getTypeDefaultValue(returnTypeName);
    }
  }
  if (!testMethod.isStatic) {
    sb.append(testTargetClassname);
    sb.append(""String_Node_Str"");
    sb.append(testTargetClassname);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (!returnTypeName.equals(""String_Node_Str"")) {
    sb.append(returnTypeName);
    sb.append(""String_Node_Str"");
    sb.append(returnDefaultValue);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  List<ArgType> argTypes=testMethod.argTypes;
  List<String> args=new ArrayList<String>();
  int argTypesLen=argTypes.size();
  if (argTypesLen > 0 && argTypes.get(0).name != null && !argTypes.get(0).name.equals(STR.EMPTY)) {
    for (int i=0; i < argTypesLen; i++) {
      ArgType argType=argTypes.get(i);
      if (argType.name.matches(""String_Node_Str""))       argType.name=argType.name.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String argTypeName=getClassInSourceCode(argType.name,testTargetClassname,testClassinfo.importList);
      boolean isJMock2=pref.isTestMethodGenEnabledSupportJMock2 && MockGenUtil.isMockableClassName(argTypeName,testClassinfo.importList);
      boolean isEasyMock=pref.isTestMethodGenEnabledSupportEasyMock && MockGenUtil.isMockableClassName(argTypeName,testClassinfo.importList);
      if (isJMock2) {
        sb.append(""String_Node_Str"");
      }
      sb.append(argTypeName);
      if (argType.generics.size() > 0) {
        sb.append(""String_Node_Str"");
        sb.append(argType.generics.get(0));
        if (argType.generics.size() > 1) {
          for (int j=1; j < argType.generics.size(); j++) {
            sb.append(""String_Node_Str"");
            sb.append(argType.generics.get(j));
          }
        }
        sb.append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"");
      sb.append(i);
      sb.append(""String_Node_Str"");
      if (PrimitiveTypeUtil.isPrimitive(argType.name)) {
        String primitiveDefault=PrimitiveTypeUtil.getTypeDefaultValue(argType.name);
        sb.append(primitiveDefault);
      }
 else {
        if (isJMock2) {
          sb.append(pref.isUsingJUnitHelperRuntime ? ""String_Node_Str"" : ""String_Node_Str"");
          sb.append(""String_Node_Str"");
          sb.append(argTypeName);
          sb.append(""String_Node_Str"");
        }
 else         if (isEasyMock) {
          sb.append(""String_Node_Str"");
          sb.append(argTypeName);
          sb.append(""String_Node_Str"");
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      args.add(""String_Node_Str"" + i);
    }
  }
  if (pref.isTestMethodGenEnabledSupportJMock2) {
    sb.append(pref.isUsingJUnitHelperRuntime ? ""String_Node_Str"" : ""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (pref.isTestMethodGenEnabledSupportEasyMock) {
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (!returnTypeName.equals(""String_Node_Str"")) {
    sb.append(returnTypeName);
    sb.append(""String_Node_Str"");
  }
  if (testMethod.isStatic) {
    sb.append(testTargetClassname);
  }
 else {
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(testMethod.methodName);
  sb.append(""String_Node_Str"");
  if (args.size() > 0 && argTypesLen > 0 && argTypes.get(0).name != null && !argTypes.get(0).name.equals(STR.EMPTY))   sb.append(args.get(0));
  for (int i=1; i < argTypes.size(); i++) {
    sb.append(""String_Node_Str"");
    sb.append(args.get(i));
  }
  sb.append(""String_Node_Str"");
  sb.append(CRLF);
  if (pref.isTestMethodGenEnabledSupportEasyMock) {
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
  }
  if (!returnTypeName.equals(""String_Node_Str"")) {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
  }
  return sb.toString();
}","/** 
 * Get sample implementation source code of the test methods.
 * @param testMethod
 * @param testMethods
 * @param testTargetClassname
 * @return sample implementation source code
 */
public static String getNotBlankTestMethodSource(MethodInfo testMethod,ClassInfo testClassinfo,String testTargetClassname){
  PreferenceLoader pref=new PreferenceLoader();
  StringBuilder sb=new StringBuilder();
  String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
  if (pref.isTestMethodGenEnabledSupportJMock2) {
    if (pref.isUsingJUnitHelperRuntime) {
      if (pref.isJUnitVersion4) {
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(CRLF);
      }
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
    }
  }
  if (pref.isTestMethodGenEnabledSupportEasyMock) {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
  }
  sb.append(""String_Node_Str"");
  String returnTypeName=testMethod.returnType.name;
  Object returnDefaultValue=null;
  if (!returnTypeName.equals(""String_Node_Str"")) {
    returnTypeName=returnTypeName.replaceAll(RXP_GENERICS_PART,STR.EMPTY);
    returnTypeName=getClassInSourceCode(returnTypeName,testTargetClassname,testClassinfo.importList);
    List<String> generics=testMethod.returnType.generics;
    int genericsLen=generics.size();
    if (genericsLen > 0) {
      returnTypeName+=""String_Node_Str"" + generics.get(0);
      for (int i=1; i < genericsLen; i++)       returnTypeName+=""String_Node_Str"" + generics.get(i);
      returnTypeName+=""String_Node_Str"";
    }
    if (PrimitiveTypeUtil.isPrimitive(returnTypeName)) {
      returnDefaultValue=PrimitiveTypeUtil.getTypeDefaultValue(returnTypeName);
    }
  }
  if (!testMethod.isStatic) {
    sb.append(testTargetClassname);
    sb.append(""String_Node_Str"");
    sb.append(testTargetClassname);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (!returnTypeName.equals(""String_Node_Str"")) {
    sb.append(returnTypeName);
    sb.append(""String_Node_Str"");
    sb.append(returnDefaultValue);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  List<ArgType> argTypes=testMethod.argTypes;
  List<String> args=new ArrayList<String>();
  int argTypesLen=argTypes.size();
  if (argTypesLen > 0 && argTypes.get(0).name != null && !argTypes.get(0).name.equals(STR.EMPTY)) {
    for (int i=0; i < argTypesLen; i++) {
      ArgType argType=argTypes.get(i);
      if (argType.name.matches(""String_Node_Str""))       argType.name=argType.name.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String argTypeName=getClassInSourceCode(argType.name,testTargetClassname,testClassinfo.importList);
      boolean isJMock2=pref.isTestMethodGenEnabledSupportJMock2 && MockGenUtil.isMockableClassName(argTypeName,testClassinfo.importList);
      boolean isEasyMock=pref.isTestMethodGenEnabledSupportEasyMock && MockGenUtil.isMockableClassName(argTypeName,testClassinfo.importList);
      if (isJMock2) {
        sb.append(""String_Node_Str"");
      }
      sb.append(argTypeName);
      if (argType.generics.size() > 0) {
        sb.append(""String_Node_Str"");
        sb.append(argType.generics.get(0));
        if (argType.generics.size() > 1) {
          for (int j=1; j < argType.generics.size(); j++) {
            sb.append(""String_Node_Str"");
            sb.append(argType.generics.get(j));
          }
        }
        sb.append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"");
      sb.append(i);
      sb.append(""String_Node_Str"");
      if (PrimitiveTypeUtil.isPrimitive(argType.name)) {
        String primitiveDefault=PrimitiveTypeUtil.getTypeDefaultValue(argType.name);
        sb.append(primitiveDefault);
      }
 else {
        if (isJMock2) {
          sb.append(pref.isUsingJUnitHelperRuntime ? ""String_Node_Str"" : ""String_Node_Str"");
          sb.append(""String_Node_Str"");
          sb.append(argTypeName);
          sb.append(""String_Node_Str"");
        }
 else         if (isEasyMock) {
          sb.append(""String_Node_Str"");
          sb.append(argTypeName);
          sb.append(""String_Node_Str"");
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      args.add(""String_Node_Str"" + i);
    }
  }
  if (pref.isTestMethodGenEnabledSupportJMock2) {
    sb.append(pref.isUsingJUnitHelperRuntime ? ""String_Node_Str"" : ""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (pref.isTestMethodGenEnabledSupportEasyMock) {
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (!returnTypeName.equals(""String_Node_Str"")) {
    sb.append(returnTypeName);
    sb.append(""String_Node_Str"");
  }
  if (testMethod.isStatic) {
    sb.append(testTargetClassname);
  }
 else {
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(testMethod.methodName);
  sb.append(""String_Node_Str"");
  if (args.size() > 0 && argTypesLen > 0 && argTypes.get(0).name != null && !argTypes.get(0).name.equals(STR.EMPTY))   sb.append(args.get(0));
  for (int i=1; i < argTypes.size(); i++) {
    sb.append(""String_Node_Str"");
    sb.append(args.get(i));
  }
  sb.append(""String_Node_Str"");
  sb.append(CRLF);
  if (pref.isTestMethodGenEnabledSupportEasyMock) {
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
  }
  if (!returnTypeName.equals(""String_Node_Str"")) {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
  }
  return sb.toString();
}",0.9851778656126482
12047,"/** 
 * Run method to invoked.
 * @param action
 */
public void run(IAction action){
  PreferenceLoader pref=new PreferenceLoader();
  InputStream javaFileIStream=null;
  OutputStreamWriter testFileOSWriter=null;
  FileOutputStream fos=null;
  boolean refreshFlag=true;
  String projectName=null;
  String testCaseDirResource=null;
  String testCaseResource=null;
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseClassname=null;
    String testCaseCreateDirpath=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
    if (structuredSelection != null && structuredSelection.size() == 0) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,Dialog.Common.title,Dialog.Common.required);
      refreshFlag=false;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,Dialog.Common.title,Dialog.Common.selectOneOnly);
      refreshFlag=false;
    }
 else {
      String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
      String[] dirArrFromProjectRoot=pathFromProjectRoot.split(StrConst.dirSep);
      String selected=StrConst.empty;
      int len=dirArrFromProjectRoot.length;
      for (int i=2; i < len - 1; i++)       selected+=dirArrFromProjectRoot[i] + StrConst.dirSep;
      selected+=dirArrFromProjectRoot[len - 1];
      projectName=dirArrFromProjectRoot[1];
      String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
      testTargetClassname=testTargetClassFilename.replace(StrConst.javaFileExp,StrConst.empty);
      testCaseClassname=testTargetClassname + StrConst.suffixOfTestcase;
      testCaseFilename=testCaseClassname + StrConst.javaFileExp;
      String projectRootPath=workspaceRoot.getLocation() + StrConst.dirSep + projectName+ StrConst.dirSep;
      testCaseResource=selected.replace(pref.commonSrcMainJavaDir,pref.commonTestMainJavaDir).replace(StrConst.javaFileExp,StrConst.suffixOfTestcase + StrConst.javaFileExp);
      String[] selectedDirArr=selected.split(StrConst.dirSep);
      testCaseDirResource=""String_Node_Str"";
      int selectedDirArrLength=selectedDirArr.length;
      for (int i=0; i < selectedDirArrLength - 1; i++)       testCaseDirResource+=selectedDirArr[i] + StrConst.dirSep;
      testCaseDirResource=testCaseDirResource.replace(pref.commonSrcMainJavaDir,pref.commonTestMainJavaDir);
      testCaseCreateDirpath=projectRootPath + testCaseDirResource;
      File testDir=new File(testCaseCreateDirpath);
      String[] dirArr=testCaseCreateDirpath.split(StrConst.dirSep);
      String tmpDirPath=StrConst.empty;
      String tmpResourceDirPath=StrConst.empty;
      for (      String each : dirArr) {
        tmpDirPath+=StrConst.dirSep + each;
        File tmpDir=new File(tmpDirPath);
        if (tmpDir.getPath().length() <= projectRootPath.length()) {
          continue;
        }
        tmpResourceDirPath+=StrConst.dirSep + each;
        if (!tmpDir.exists()) {
          if (!tmpDir.mkdir()) {
            System.err.println(""String_Node_Str"" + tmpDir.getPath());
          }
          if (!ResourceRefreshUtil.refreshLocal(null,projectName + StrConst.dirSep + tmpResourceDirPath+ ""String_Node_Str"")) {
            String msg=Dialog.Common.resourceRefreshError;
            MessageDialog.openWarning(new Shell(),Dialog.Common.title,msg);
            System.err.println(""String_Node_Str"");
          }
        }
      }
      if (!testDir.mkdirs()) {
        System.err.println(""String_Node_Str"");
      }
      if (!ResourceRefreshUtil.refreshLocal(null,projectName + StrConst.dirSep + testCaseDirResource)) {
        MessageDialog.openWarning(new Shell(),Dialog.Common.title,Dialog.Common.resourceRefreshError);
        System.err.println(""String_Node_Str"");
      }
      try {
        File outputFile=new File(testCaseCreateDirpath + StrConst.dirSep + testCaseFilename);
        String msg=Dialog.Common.alreadyExist + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ StrConst.lineFeed+ Dialog.Common.confirmToProceed;
        if (!outputFile.exists() || MessageDialog.openConfirm(new Shell(),Dialog.Common.title,msg)) {
          String targetClass=""String_Node_Str"" + projectName + ""String_Node_Str""+ selected;
          IResource targetClassResource=workspaceRoot.findMember(targetClass);
          IFile file=(IFile)targetClassResource;
          ClassInfo testClassInfo=TestCaseGenerateUtil.getTestClassInfoFromTargetClass(file);
          List<MethodInfo> testMethods=testClassInfo.methods;
          String writeEncoding=FileResourceUtil.detectEncoding(file);
          fos=new FileOutputStream(testCaseCreateDirpath + StrConst.dirSep + testCaseFilename);
          testFileOSWriter=new OutputStreamWriter(fos,writeEncoding);
          StringBuilder sb=new StringBuilder();
          String CRLF=StrConst.carriageReturn + StrConst.lineFeed;
          String testPackageString=StrConst.empty;
          String[] tmpDirArr=selected.split(StrConst.dirSep);
          StringBuilder dirSb=new StringBuilder();
          int packageArrLen=tmpDirArr.length - 2;
          int mainJavaLen=pref.commonSrcMainJavaDir.split(""String_Node_Str"").length;
          for (int i=mainJavaLen; i < packageArrLen; i++) {
            dirSb.append(tmpDirArr[i]);
            dirSb.append(""String_Node_Str"");
          }
          dirSb.append(tmpDirArr[packageArrLen]);
          testPackageString=dirSb.toString();
          sb.append(""String_Node_Str"");
          sb.append(testPackageString);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          String testCase=pref.isUsingJUnitHelperRuntime ? RuntimeLibrary.testcase : pref.classToExtend;
          String[] tmpTestCaseArr=testCase.split(""String_Node_Str"");
          String testCaseName=tmpTestCaseArr[tmpTestCaseArr.length - 1];
          sb.append(""String_Node_Str"");
          sb.append(testCase);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          if (pref.isTestMethodGenEnabled && pref.isTestMethodGenNotBlankEnabled) {
            List<String> importedPackageList=testClassInfo.importList;
            for (            String importedPackage : importedPackageList) {
              sb.append(""String_Node_Str"");
              sb.append(importedPackage);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
            }
          }
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(testCaseClassname);
          if (pref.isJUnitVersion3) {
            sb.append(""String_Node_Str"");
            sb.append(testCaseName);
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          if (pref.isTestMethodGenEnabled) {
            for (            MethodInfo testMethod : testMethods) {
              if (testMethod.testMethodName == null || testMethod.testMethodName.equals(StrConst.empty)) {
                continue;
              }
              if (pref.isJUnitVersion4) {
                sb.append(""String_Node_Str"");
                sb.append(CRLF);
              }
              sb.append(""String_Node_Str"");
              sb.append(testMethod.testMethodName);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(""String_Node_Str"");
              sb.append(StrConst.autoGenTodoMessage);
              sb.append(CRLF);
              if (pref.isTestMethodGenNotBlankEnabled) {
                String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testClassInfo,testTargetClassname);
                sb.append(notBlankSourceCode);
              }
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(CRLF);
            }
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          testFileOSWriter.write(sb.toString());
        }
      }
 catch (      InvalidPreferenceException ipe) {
        MessageDialog.openWarning(new Shell(),Dialog.Common.title,Dialog.Common.invalidPreference);
        return;
      }
catch (      FileNotFoundException fnfe) {
        fnfe.printStackTrace();
      }
 finally {
        FileResourceUtil.close(testFileOSWriter);
        FileResourceUtil.close(fos);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    FileResourceUtil.close(javaFileIStream);
    FileResourceUtil.close(testFileOSWriter);
  }
  if (refreshFlag && !ResourceRefreshUtil.refreshLocal(null,projectName + StrConst.dirSep + testCaseDirResource+ ""String_Node_Str"")) {
    MessageDialog.openWarning(new Shell(),Dialog.Common.title,Dialog.Common.resourceRefreshError);
    System.err.println(""String_Node_Str"");
  }
 else {
    int retryCount=0;
    IEditorPart editorPart=null;
    ThreadUtil.sleep(1500);
    while (true) {
      try {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        IWorkspaceRoot root=workspace.getRoot();
        IProject project=root.getProject(projectName);
        IFile testCaseFile=project.getFile(testCaseResource);
        String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        editorPart=IDE.openEditor(page,testCaseFile,editorId);
        if (editorPart == null)         throw new NullPointerException();
        break;
      }
 catch (      Exception e) {
        retryCount++;
        if (retryCount > 3)         break;
        ThreadUtil.sleep(1500);
      }
    }
    editorPart.setFocus();
  }
}","/** 
 * Run method to invoked.
 * @param action
 */
public void run(IAction action){
  PreferenceLoader pref=new PreferenceLoader();
  InputStream javaFileIStream=null;
  OutputStreamWriter testFileOSWriter=null;
  FileOutputStream fos=null;
  boolean refreshFlag=true;
  String projectName=null;
  String testCaseDirResource=null;
  String testCaseResource=null;
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseClassname=null;
    String testCaseCreateDirpath=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
    if (structuredSelection != null && structuredSelection.size() == 0) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,Dialog.Common.title,Dialog.Common.required);
      refreshFlag=false;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,Dialog.Common.title,Dialog.Common.selectOneOnly);
      refreshFlag=false;
    }
 else {
      String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
      String[] dirArrFromProjectRoot=pathFromProjectRoot.split(StrConst.dirSep);
      String selected=StrConst.empty;
      int len=dirArrFromProjectRoot.length;
      for (int i=2; i < len - 1; i++)       selected+=dirArrFromProjectRoot[i] + StrConst.dirSep;
      selected+=dirArrFromProjectRoot[len - 1];
      projectName=dirArrFromProjectRoot[1];
      String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
      testTargetClassname=testTargetClassFilename.replace(StrConst.javaFileExp,StrConst.empty);
      testCaseClassname=testTargetClassname + StrConst.suffixOfTestcase;
      testCaseFilename=testCaseClassname + StrConst.javaFileExp;
      String projectRootPath=workspaceRoot.getLocation() + StrConst.dirSep + projectName+ StrConst.dirSep;
      testCaseResource=selected.replace(pref.commonSrcMainJavaDir,pref.commonTestMainJavaDir).replace(StrConst.javaFileExp,StrConst.suffixOfTestcase + StrConst.javaFileExp);
      String[] selectedDirArr=selected.split(StrConst.dirSep);
      testCaseDirResource=""String_Node_Str"";
      int selectedDirArrLength=selectedDirArr.length;
      for (int i=0; i < selectedDirArrLength - 1; i++)       testCaseDirResource+=selectedDirArr[i] + StrConst.dirSep;
      testCaseDirResource=testCaseDirResource.replace(pref.commonSrcMainJavaDir,pref.commonTestMainJavaDir);
      testCaseCreateDirpath=projectRootPath + testCaseDirResource;
      File testDir=new File(testCaseCreateDirpath);
      String[] dirArr=testCaseCreateDirpath.split(StrConst.dirSep);
      String tmpDirPath=StrConst.empty;
      String tmpResourceDirPath=StrConst.empty;
      for (      String each : dirArr) {
        tmpDirPath+=StrConst.dirSep + each;
        File tmpDir=new File(tmpDirPath);
        if (tmpDir.getPath().length() <= projectRootPath.length()) {
          continue;
        }
        tmpResourceDirPath+=StrConst.dirSep + each;
        if (!tmpDir.exists()) {
          if (!tmpDir.mkdir()) {
            System.err.println(""String_Node_Str"" + tmpDir.getPath());
          }
          if (!ResourceRefreshUtil.refreshLocal(null,projectName + StrConst.dirSep + tmpResourceDirPath+ ""String_Node_Str"")) {
            String msg=Dialog.Common.resourceRefreshError;
            MessageDialog.openWarning(new Shell(),Dialog.Common.title,msg);
            System.err.println(""String_Node_Str"");
          }
        }
      }
      if (!testDir.mkdirs()) {
        System.err.println(""String_Node_Str"");
      }
      if (!ResourceRefreshUtil.refreshLocal(null,projectName + StrConst.dirSep + testCaseDirResource)) {
        MessageDialog.openWarning(new Shell(),Dialog.Common.title,Dialog.Common.resourceRefreshError);
        System.err.println(""String_Node_Str"");
      }
      try {
        File outputFile=new File(testCaseCreateDirpath + StrConst.dirSep + testCaseFilename);
        String msg=Dialog.Common.alreadyExist + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ StrConst.lineFeed+ Dialog.Common.confirmToProceed;
        if (!outputFile.exists() || MessageDialog.openConfirm(new Shell(),Dialog.Common.title,msg)) {
          String targetClass=""String_Node_Str"" + projectName + ""String_Node_Str""+ selected;
          IResource targetClassResource=workspaceRoot.findMember(targetClass);
          IFile file=(IFile)targetClassResource;
          ClassInfo testClassInfo=TestCaseGenerateUtil.getTestClassInfoFromTargetClass(file);
          List<MethodInfo> testMethods=testClassInfo.methods;
          String writeEncoding=FileResourceUtil.detectEncoding(file);
          fos=new FileOutputStream(testCaseCreateDirpath + StrConst.dirSep + testCaseFilename);
          testFileOSWriter=new OutputStreamWriter(fos,writeEncoding);
          StringBuilder sb=new StringBuilder();
          String CRLF=StrConst.carriageReturn + StrConst.lineFeed;
          String testPackageString=StrConst.empty;
          String[] tmpDirArr=selected.split(StrConst.dirSep);
          StringBuilder dirSb=new StringBuilder();
          int packageArrLen=tmpDirArr.length - 2;
          int mainJavaLen=pref.commonSrcMainJavaDir.split(""String_Node_Str"").length;
          if (mainJavaLen != tmpDirArr.length - 1) {
            for (int i=mainJavaLen; i < packageArrLen; i++) {
              dirSb.append(tmpDirArr[i]);
              dirSb.append(""String_Node_Str"");
            }
            dirSb.append(tmpDirArr[packageArrLen]);
            testPackageString=dirSb.toString();
            sb.append(""String_Node_Str"");
            sb.append(testPackageString);
            sb.append(""String_Node_Str"");
            sb.append(CRLF);
            sb.append(CRLF);
          }
          String testCase=pref.isUsingJUnitHelperRuntime ? RuntimeLibrary.testcase : pref.classToExtend;
          String[] tmpTestCaseArr=testCase.split(""String_Node_Str"");
          String testCaseName=tmpTestCaseArr[tmpTestCaseArr.length - 1];
          sb.append(""String_Node_Str"");
          sb.append(testCase);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          if (pref.isTestMethodGenEnabled && pref.isTestMethodGenNotBlankEnabled) {
            List<String> importedPackageList=testClassInfo.importList;
            for (            String importedPackage : importedPackageList) {
              importedPackage=importedPackage.trim();
              if (importedPackage != null && importedPackage.length() != 0) {
                sb.append(""String_Node_Str"");
                sb.append(importedPackage);
                sb.append(""String_Node_Str"");
                sb.append(CRLF);
              }
            }
          }
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(testCaseClassname);
          if (pref.isJUnitVersion3) {
            sb.append(""String_Node_Str"");
            sb.append(testCaseName);
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          if (pref.isTestMethodGenEnabled) {
            for (            MethodInfo testMethod : testMethods) {
              if (testMethod.testMethodName == null || testMethod.testMethodName.equals(StrConst.empty)) {
                continue;
              }
              if (pref.isJUnitVersion4) {
                sb.append(""String_Node_Str"");
                sb.append(CRLF);
              }
              sb.append(""String_Node_Str"");
              sb.append(testMethod.testMethodName);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(""String_Node_Str"");
              sb.append(StrConst.autoGenTodoMessage);
              sb.append(CRLF);
              if (pref.isTestMethodGenNotBlankEnabled) {
                String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testClassInfo,testTargetClassname);
                sb.append(notBlankSourceCode);
              }
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(CRLF);
            }
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          testFileOSWriter.write(sb.toString());
        }
      }
 catch (      InvalidPreferenceException ipe) {
        MessageDialog.openWarning(new Shell(),Dialog.Common.title,Dialog.Common.invalidPreference);
        return;
      }
catch (      FileNotFoundException fnfe) {
        fnfe.printStackTrace();
      }
 finally {
        FileResourceUtil.close(testFileOSWriter);
        FileResourceUtil.close(fos);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    FileResourceUtil.close(javaFileIStream);
    FileResourceUtil.close(testFileOSWriter);
  }
  if (refreshFlag && !ResourceRefreshUtil.refreshLocal(null,projectName + StrConst.dirSep + testCaseDirResource+ ""String_Node_Str"")) {
    MessageDialog.openWarning(new Shell(),Dialog.Common.title,Dialog.Common.resourceRefreshError);
    System.err.println(""String_Node_Str"");
  }
 else {
    int retryCount=0;
    IEditorPart editorPart=null;
    ThreadUtil.sleep(1500);
    while (true) {
      try {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        IWorkspaceRoot root=workspace.getRoot();
        IProject project=root.getProject(projectName);
        IFile testCaseFile=project.getFile(testCaseResource);
        String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        editorPart=IDE.openEditor(page,testCaseFile,editorId);
        if (editorPart == null)         throw new NullPointerException();
        break;
      }
 catch (      Exception e) {
        retryCount++;
        if (retryCount > 3)         break;
        ThreadUtil.sleep(1500);
      }
    }
    editorPart.setFocus();
  }
}",0.9878821124021344
12048,"/** 
 * Get detected encoding charset name
 * @param file
 * @return encoding charset name
 * @throws InvalidPreferenceException
 */
public static String detectEncoding(IFile file) throws InvalidPreferenceException {
  InputStream is=null;
  String encoding=null;
  try {
    is=FileResourceUtil.readFile(file);
    UniversalDetector detector=new UniversalDetector(null);
    byte[] buf=new byte[4096];
    int nread;
    while ((nread=is.read(buf)) > 0 && !detector.isDone())     detector.handleData(buf,0,nread);
    detector.dataEnd();
    encoding=detector.getDetectedCharset();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    close(is);
    if (encoding == null) {
      return Charset.defaultCharset().name();
    }
  }
  return encoding;
}","/** 
 * Get detected encoding charset name
 * @param file
 * @return encoding charset name
 * @throws InvalidPreferenceException
 */
public static String detectEncoding(IFile file){
  InputStream is=null;
  String encoding=null;
  try {
    is=FileResourceUtil.readFile(file);
    UniversalDetector detector=new UniversalDetector(null);
    byte[] buf=new byte[4096];
    int nread;
    while ((nread=is.read(buf)) > 0 && !detector.isDone())     detector.handleData(buf,0,nread);
    detector.dataEnd();
    encoding=detector.getDetectedCharset();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    close(is);
    if (encoding == null) {
      return Charset.defaultCharset().name();
    }
  }
  return encoding;
}",0.9767750497677504
12049,"/** 
 * Get target methods from source code string
 * @param source
 * @return result
 */
public static List<String> getTargetMethods(String source,boolean publicRequired,boolean protectedRequired,boolean packageLocalRequired){
  source=source.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
  List<String> result=new ArrayList<String>();
  String regexp=""String_Node_Str"";
  Pattern pat=Pattern.compile(regexp);
  Matcher mat=pat.matcher(source);
  while (mat.find()) {
    String matched=mat.group();
    String prefix=""String_Node_Str"";
    String postfix=""String_Node_Str"";
    if (!publicRequired && matched.matches(prefix + ""String_Node_Str"" + postfix)) {
      continue;
    }
    if (!protectedRequired && matched.matches(prefix + ""String_Node_Str"" + postfix)) {
      continue;
    }
    if (!packageLocalRequired && matched.matches(prefix + postfix)) {
      continue;
    }
    matched=matched.replaceAll(STR.TAB,STR.SPACE).replaceAll(prefix + ""String_Node_Str"" + ""String_Node_Str"",STR.EMPTY).replaceAll(prefix + ""String_Node_Str"" + ""String_Node_Str"",STR.EMPTY).replaceAll(prefix + ""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.SPACE);
    result.add(STR.SPACE + matched);
  }
  return result;
}","/** 
 * Get target methods from source code string
 * @param source
 * @return result
 */
public static List<String> getTargetMethods(String source,boolean publicRequired,boolean protectedRequired,boolean packageLocalRequired){
  source=source.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
  List<String> result=new ArrayList<String>();
  String regexp=""String_Node_Str"";
  Pattern pat=Pattern.compile(regexp);
  Matcher mat=pat.matcher(source);
  while (mat.find()) {
    String matched=mat.group();
    String prefix=""String_Node_Str"";
    String postfix=""String_Node_Str"";
    if (!publicRequired && matched.matches(prefix + ""String_Node_Str"" + postfix)) {
      continue;
    }
    if (!protectedRequired && matched.matches(prefix + ""String_Node_Str"" + postfix)) {
      continue;
    }
    if (!packageLocalRequired && !matched.matches(prefix + ""String_Node_Str"" + postfix) && !matched.matches(prefix + ""String_Node_Str"" + postfix)) {
      continue;
    }
    matched=matched.replaceAll(STR.TAB,STR.SPACE).replaceAll(prefix + ""String_Node_Str"" + ""String_Node_Str"",STR.EMPTY).replaceAll(prefix + ""String_Node_Str"" + ""String_Node_Str"",STR.EMPTY).replaceAll(prefix + ""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.SPACE);
    result.add(STR.SPACE + matched);
  }
  return result;
}",0.9720749381406858
12050,"/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param javaFile
 * @return the information on the test methods
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(IFile javaFile) throws InvalidPreferenceException, IOException {
  PreferenceLoader pref=new PreferenceLoader();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=FileResourceUtil.readFile(javaFile);
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null) {
      line+=StrConst.lineFeed;
      tmpsb.append(SourceCodeParseUtil.trimLineComments(line));
      tmpsb.append(StrConst.space);
    }
    String targetClassSourceStrWithoutComments=SourceCodeParseUtil.trimAllComments(tmpsb.toString());
    String targetClassSourceStr=SourceCodeParseUtil.trimInsideOfBraces(targetClassSourceStrWithoutComments);
    if (pref.isTestMethodGenNotBlankEnabled) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importLine : importLines) {
        if (!importLine.replaceAll(StrConst.lineFeed,StrConst.empty).matches(""String_Node_Str"")) {
          String importedPackage=importLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      if (pref.isJUnitVersion3) {
      }
 else       if (pref.isJUnitVersion4) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        if (pref.isUsingJUnitHelperRuntime) {
          classInfo.importList.add(""String_Node_Str"");
        }
      }
      if (pref.isTestMethodGenEnabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
    }
    List<String> targets=SourceCodeParseUtil.getTargetMethods(targetClassSourceStr,pref.isTestMethodGenIncludePublic,pref.isTestMethodGenIncludeProtected,pref.isTestMethodGenIncludePackageLocal);
    for (    String target : targets) {
      Matcher matcher=RegExp.groupMethodPattern.matcher(target);
      if (matcher.find()) {
        MethodInfo each=new MethodInfo();
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenReturnEnabled) {
          String returnTypeFull=getType(matcher.group(1));
          Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(returnTypeFull);
          while (toGenericsMatcher.find()) {
            String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
            for (            String generic : generics) {
              generic=getClassInSourceCode(generic,StrConst.empty,new ArrayList<String>());
              each.returnType.generics.add(generic);
            }
          }
          each.returnType.name=returnTypeFull.replace(RegExp.generics,StrConst.empty);
          each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
        }
        each.methodName=matcher.group(2);
        String args=matcher.group(3);
        String[] tmpArr=args.split(StrConst.comma);
        int tmpArrLen=tmpArr.length;
        List<String> tmpArrList=new ArrayList<String>();
        String buf=StrConst.empty;
        for (int i=0; i < tmpArrLen; i++) {
          String element=tmpArr[i].trim();
          if (element.matches(""String_Node_Str"")) {
            tmpArrList.add(element);
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            buf+=element;
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            String result=buf + StrConst.comma + element;
            tmpArrList.add(result);
            buf=StrConst.empty;
            continue;
          }
          if (!buf.equals(StrConst.empty)) {
            buf+=StrConst.comma + element;
            continue;
          }
          tmpArrList.add(element);
        }
        String[] argArr=tmpArrList.toArray(new String[0]);
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenArgsEnabled) {
          int argArrLen=argArr.length;
          for (int i=0; i < argArrLen; i++) {
            ArgType argType=new ArgType();
            String argTypeFull=argArr[i];
            Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(argTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,StrConst.empty,new ArrayList<String>());
                argType.generics.add(generic);
              }
            }
            String argTypeStr=argTypeFull.replaceAll(RegExp.generics,StrConst.empty);
            argType.name=getType(argTypeStr);
            argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
            each.argTypes.add(argType);
          }
        }
        if (pref.isTestMethodGenExecludeAccessors) {
          String fieldName=null;
          String fieldType=null;
          if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            if (each.argTypes.size() > 0) {
              fieldType=each.argTypes.get(0).name;
            }
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            fieldType=each.returnType.name;
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(2);
            fieldType=each.returnType.name;
          }
          if (fieldName != null) {
            fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
            fieldType=fieldType.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
            String searchRegexp=""String_Node_Str"" + fieldType + RegExp.wsReq+ fieldName+ ""String_Node_Str"";
            if (targetClassSourceStr.matches(searchRegexp))             continue;
          }
        }
        String prefix=pref.isJUnitVersion3 ? StrConst.testMethodPrefix4Version3 + pref.testMethodDelimiter : StrConst.empty;
        each.testMethodName=prefix + each.methodName;
        if (pref.isTestMethodGenArgsEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodArgsPrefix;
          if (each.argTypes.size() == 0) {
            each.testMethodName+=pref.testMethodArgsDelimiter;
          }
          for (          ArgType argType : each.argTypes) {
            each.testMethodName+=pref.testMethodArgsDelimiter + argType.nameInMethodName;
          }
        }
        if (pref.isTestMethodGenReturnEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodReturnPrefix + pref.testMethodReturnDelimiter+ each.returnType.nameInMethodName;
        }
        if (target.matches(RegExp.matchesStaticMethod)) {
          each.isStatic=true;
        }
        testMethods.add(each);
        if (pref.isTestMethodGenExceptions) {
          String throwsExceptions=matcher.group(4);
          if (throwsExceptions != null) {
            String[] exceptions=throwsExceptions.replaceAll(""String_Node_Str"" + RegExp.wsReq,StrConst.empty).split(StrConst.comma);
            for (            String exp : exceptions) {
              exp=exp.trim();
              MethodInfo expTest=ObjectUtil.deepCopy(each);
              expTest.testingTargetException=new ExceptionInfo();
              expTest.testingTargetException.name=exp;
              expTest.testingTargetException.nameInMethodName=TestCaseGenerateUtil.getTypeAvailableInMethodName(exp);
              expTest.testMethodName=expTest.testMethodName + pref.testMethodDelimiter + pref.testMethodExceptionPrefix+ pref.testMethodExceptionDelimiter+ expTest.testingTargetException.nameInMethodName;
              testMethods.add(expTest);
            }
          }
        }
      }
    }
  }
  finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.methods=testMethods;
  return classInfo;
}","/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param javaFile
 * @return the information on the test methods
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(IFile javaFile) throws InvalidPreferenceException, IOException {
  PreferenceLoader pref=new PreferenceLoader();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=FileResourceUtil.readFile(javaFile);
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null) {
      line+=StrConst.lineFeed;
      tmpsb.append(SourceCodeParseUtil.trimLineComments(line));
      tmpsb.append(StrConst.space);
    }
    String targetClassSourceStrWithoutComments=SourceCodeParseUtil.trimAllComments(tmpsb.toString());
    String targetClassSourceStr=SourceCodeParseUtil.trimInsideOfBraces(targetClassSourceStrWithoutComments);
    if (pref.isTestMethodGenNotBlankEnabled) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importLine : importLines) {
        importLine=importLine.replaceAll(StrConst.lineFeed,StrConst.empty);
        if (!importLine.matches(""String_Node_Str"") && !importLine.matches(""String_Node_Str"")) {
          String importedPackage=importLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      if (pref.isJUnitVersion3) {
      }
 else       if (pref.isJUnitVersion4) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (pref.isTestMethodGenEnabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        if (pref.isUsingJUnitHelperRuntime) {
          classInfo.importList.add(""String_Node_Str"");
        }
      }
      if (pref.isTestMethodGenEnabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
    }
    List<String> targets=SourceCodeParseUtil.getTargetMethods(targetClassSourceStr,pref.isTestMethodGenIncludePublic,pref.isTestMethodGenIncludeProtected,pref.isTestMethodGenIncludePackageLocal);
    for (    String target : targets) {
      Matcher matcher=RegExp.groupMethodPattern.matcher(target);
      if (matcher.find()) {
        MethodInfo each=new MethodInfo();
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenReturnEnabled) {
          String returnTypeFull=getType(matcher.group(1));
          Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(returnTypeFull);
          while (toGenericsMatcher.find()) {
            String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
            for (            String generic : generics) {
              generic=getClassInSourceCode(generic,StrConst.empty,new ArrayList<String>());
              each.returnType.generics.add(generic);
            }
          }
          each.returnType.name=returnTypeFull.replace(RegExp.generics,StrConst.empty);
          each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
        }
        each.methodName=matcher.group(2);
        String args=matcher.group(3);
        String[] tmpArr=args.split(StrConst.comma);
        int tmpArrLen=tmpArr.length;
        List<String> tmpArrList=new ArrayList<String>();
        String buf=StrConst.empty;
        for (int i=0; i < tmpArrLen; i++) {
          String element=tmpArr[i].trim();
          if (element.matches(""String_Node_Str"")) {
            tmpArrList.add(element);
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            buf+=element;
            continue;
          }
          if (element.matches(""String_Node_Str"")) {
            String result=buf + StrConst.comma + element;
            tmpArrList.add(result);
            buf=StrConst.empty;
            continue;
          }
          if (!buf.equals(StrConst.empty)) {
            buf+=StrConst.comma + element;
            continue;
          }
          tmpArrList.add(element);
        }
        String[] argArr=tmpArrList.toArray(new String[0]);
        if (pref.isTestMethodGenNotBlankEnabled || pref.isTestMethodGenArgsEnabled) {
          int argArrLen=argArr.length;
          for (int i=0; i < argArrLen; i++) {
            ArgType argType=new ArgType();
            String argTypeFull=argArr[i];
            Matcher toGenericsMatcher=Pattern.compile(RegExp.genericsGroup).matcher(argTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",StrConst.empty).replaceAll(""String_Node_Str"",StrConst.empty).split(StrConst.comma);
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,StrConst.empty,new ArrayList<String>());
                argType.generics.add(generic);
              }
            }
            String argTypeStr=argTypeFull.replaceAll(RegExp.generics,StrConst.empty);
            argType.name=getType(argTypeStr);
            argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
            each.argTypes.add(argType);
          }
        }
        if (pref.isTestMethodGenExecludeAccessors) {
          String fieldName=null;
          String fieldType=null;
          if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            if (each.argTypes.size() > 0) {
              fieldType=each.argTypes.get(0).name;
            }
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(3);
            fieldType=each.returnType.name;
          }
 else           if (each.methodName.matches(""String_Node_Str"")) {
            fieldName=each.methodName.substring(2);
            fieldType=each.returnType.name;
          }
          if (fieldName != null) {
            fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
            fieldType=fieldType.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
            String searchRegexp=""String_Node_Str"" + fieldType + RegExp.wsReq+ fieldName+ ""String_Node_Str"";
            if (targetClassSourceStr.matches(searchRegexp)) {
              continue;
            }
          }
        }
        String prefix=pref.isJUnitVersion3 ? StrConst.testMethodPrefix4Version3 + pref.testMethodDelimiter : StrConst.empty;
        each.testMethodName=prefix + each.methodName;
        if (pref.isTestMethodGenArgsEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodArgsPrefix;
          if (each.argTypes.size() == 0) {
            each.testMethodName+=pref.testMethodArgsDelimiter;
          }
          for (          ArgType argType : each.argTypes) {
            each.testMethodName+=pref.testMethodArgsDelimiter + argType.nameInMethodName;
          }
        }
        if (pref.isTestMethodGenReturnEnabled) {
          each.testMethodName+=pref.testMethodDelimiter + pref.testMethodReturnPrefix + pref.testMethodReturnDelimiter+ each.returnType.nameInMethodName;
        }
        if (target.matches(RegExp.matchesStaticMethod)) {
          each.isStatic=true;
        }
        testMethods.add(each);
        if (pref.isTestMethodGenExceptions) {
          String throwsExceptions=matcher.group(4);
          if (throwsExceptions != null) {
            String[] exceptions=throwsExceptions.replaceAll(""String_Node_Str"" + RegExp.wsReq,StrConst.empty).split(StrConst.comma);
            for (            String exp : exceptions) {
              exp=exp.trim();
              MethodInfo expTest=ObjectUtil.deepCopy(each);
              expTest.testingTargetException=new ExceptionInfo();
              expTest.testingTargetException.name=exp;
              expTest.testingTargetException.nameInMethodName=TestCaseGenerateUtil.getTypeAvailableInMethodName(exp);
              expTest.testMethodName=expTest.testMethodName + pref.testMethodDelimiter + pref.testMethodExceptionPrefix+ pref.testMethodExceptionDelimiter+ expTest.testingTargetException.nameInMethodName;
              testMethods.add(expTest);
            }
          }
        }
      }
    }
  }
  finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.methods=testMethods;
  return classInfo;
}",0.9877636897181772
12051,"/** 
 * Get the information on the methods.
 * @param javaFile
 * @return the information on the methods
 * @throws Exception
 */
public static ClassInfo getMethodNamesAlreadyExists(IFile javaFile) throws Exception {
  PreferenceLoader pref=new PreferenceLoader();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> methodStringInfos=new ArrayList<MethodInfo>();
  if (pref.isTestMethodGenEnabled) {
    InputStream is=null;
    InputStreamReader isr=null;
    BufferedReader br=null;
    try {
      is=FileResourceUtil.readFile(javaFile);
      String encoding=FileResourceUtil.detectEncoding(javaFile);
      is=FileResourceUtil.readFile(javaFile);
      isr=new InputStreamReader(is,encoding);
      br=new BufferedReader(isr);
      StringBuilder tmpsb=new StringBuilder();
      String line=null;
      while ((line=br.readLine()) != null) {
        tmpsb.append(line + StrConst.space);
      }
      String targetClassSourceStr=tmpsb.toString();
      String[] targets=targetClassSourceStr.split(""String_Node_Str"");
      for (      String target : targets) {
        target=target.replaceAll(""String_Node_Str"" + StrConst.comma,StrConst.comma).replaceAll(StrConst.comma + ""String_Node_Str"",StrConst.comma);
        target=target.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (target.matches(RegExp.matchesMethod)) {
          Matcher matcher=RegExp.groupMethodPattern.matcher(target);
          if (matcher.find()) {
            MethodInfo each=new MethodInfo();
            each.returnType.name=getType(matcher.group(1));
            each.returnType.nameInMethodName=getTypeAvailableInMethodName(matcher.group(1));
            each.methodName=matcher.group(2);
            each.testMethodName=each.methodName;
            String args=matcher.group(3);
            String[] argArr=args.split(""String_Node_Str"");
            int argArrLen=argArr.length;
            for (int i=0; i < argArrLen; i++) {
              ArgType argType=new ArgType();
              argType.name=getType(argArr[i]);
              argType.nameInMethodName=getTypeAvailableInMethodName(argArr[i]);
              each.argTypes.add(argType);
            }
            methodStringInfos.add(each);
          }
        }
      }
      if (pref.isTestMethodGenNotBlankEnabled) {
        if (methodStringInfos.size() <= 0 || methodStringInfos.get(0) == null)         methodStringInfos.add(new MethodInfo());
        String[] importLines=targetClassSourceStr.split(""String_Node_Str"");
        for (        String importLine : importLines) {
          if (!importLine.matches(""String_Node_Str"")) {
            String importedPackage=importLine.split(""String_Node_Str"")[0];
            classInfo.importList.add(importedPackage);
            System.out.println(importedPackage);
          }
        }
      }
    }
  finally {
      FileResourceUtil.close(br);
      FileResourceUtil.close(isr);
      FileResourceUtil.close(is);
    }
  }
  classInfo.methods=methodStringInfos;
  return classInfo;
}","/** 
 * Get the information on the methods.
 * @param javaFile
 * @return the information on the methods
 * @throws Exception
 */
public static ClassInfo getMethodNamesAlreadyExists(IFile javaFile) throws Exception {
  PreferenceLoader pref=new PreferenceLoader();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> methodStringInfos=new ArrayList<MethodInfo>();
  if (pref.isTestMethodGenEnabled) {
    InputStream is=null;
    InputStreamReader isr=null;
    BufferedReader br=null;
    try {
      is=FileResourceUtil.readFile(javaFile);
      String encoding=FileResourceUtil.detectEncoding(javaFile);
      is=FileResourceUtil.readFile(javaFile);
      isr=new InputStreamReader(is,encoding);
      br=new BufferedReader(isr);
      StringBuilder tmpsb=new StringBuilder();
      String line=null;
      while ((line=br.readLine()) != null) {
        tmpsb.append(line + StrConst.space);
      }
      String targetClassSourceStr=tmpsb.toString();
      String[] targets=targetClassSourceStr.split(""String_Node_Str"");
      for (      String target : targets) {
        target=target.replaceAll(""String_Node_Str"" + StrConst.comma,StrConst.comma).replaceAll(StrConst.comma + ""String_Node_Str"",StrConst.comma);
        target=target.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (target.matches(RegExp.matchesMethod)) {
          Matcher matcher=RegExp.groupMethodPattern.matcher(target);
          if (matcher.find()) {
            MethodInfo each=new MethodInfo();
            each.returnType.name=getType(matcher.group(1));
            each.returnType.nameInMethodName=getTypeAvailableInMethodName(matcher.group(1));
            each.methodName=matcher.group(2);
            each.testMethodName=each.methodName;
            String args=matcher.group(3);
            String[] argArr=args.split(""String_Node_Str"");
            int argArrLen=argArr.length;
            for (int i=0; i < argArrLen; i++) {
              ArgType argType=new ArgType();
              argType.name=getType(argArr[i]);
              argType.nameInMethodName=getTypeAvailableInMethodName(argArr[i]);
              each.argTypes.add(argType);
            }
            methodStringInfos.add(each);
          }
        }
      }
      if (pref.isTestMethodGenNotBlankEnabled) {
        if (methodStringInfos.size() <= 0 || methodStringInfos.get(0) == null)         methodStringInfos.add(new MethodInfo());
        String[] importLines=targetClassSourceStr.split(""String_Node_Str"");
        for (        String importLine : importLines) {
          importLine=importLine.replaceAll(StrConst.lineFeed,StrConst.empty);
          if (!importLine.matches(""String_Node_Str"") && !importLine.matches(""String_Node_Str"")) {
            String importedPackage=importLine.split(""String_Node_Str"")[0];
            classInfo.importList.add(importedPackage);
          }
        }
      }
    }
  finally {
      FileResourceUtil.close(br);
      FileResourceUtil.close(isr);
      FileResourceUtil.close(is);
    }
  }
  classInfo.methods=methodStringInfos;
  return classInfo;
}",0.9081748740451812
12052,"public PreferenceLoader(){
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  commonSrcMainJavaDir=store.getString(Preference.Common.srcMainPath);
  commonTestMainJavaDir=store.getString(Preference.Common.srcTestPath);
  isTestClassGenEnabled=store.getBoolean(Preference.TestClassGen.enabled);
  isTestMethodGenEnabled=store.getBoolean(Preference.TestMethodGen.enabled);
  isTestMethodGenArgsEnabled=store.getBoolean(Preference.TestMethodGen.enabledArgs);
  isTestMethodGenReturnEnabled=store.getBoolean(Preference.TestMethodGen.enabledReturn);
  isTestMethodGenExceptions=store.getBoolean(Preference.TestMethodGen.enabledExceptions);
  isTestMethodGenNotBlankEnabled=store.getBoolean(Preference.TestMethodGen.enabledTestMethodSampleImpl);
  isTestMethodGenIncludePublic=store.getBoolean(Preference.TestMethodGen.includePublic);
  isTestMethodGenIncludeProtected=store.getBoolean(Preference.TestMethodGen.includeProtected);
  isTestMethodGenIncludePackageLocal=store.getBoolean(Preference.TestMethodGen.includePackageLocal);
  isTestMethodGenExecludeAccessors=store.getBoolean(Preference.TestMethodGen.excludesAccessors);
  isTestMethodGenEnabledSupportJMock2=MockGenUtil.isUsingJMock2(store);
  isTestMethodGenEnabledSupportEasyMock=MockGenUtil.isUsingEasyMock(store);
  String version=store.getString(Preference.TestClassGen.junitVersion);
  isJUnitVersion3=version.equals(Preference.TestClassGen.junitVersion3);
  isJUnitVersion4=version.equals(Preference.TestClassGen.junitVersion4);
  isUsingJUnitHelperRuntime=store.getBoolean(Preference.TestClassGen.usingJunitHelperRuntimeLib);
  testMethodDelimiter=store.getString(Preference.TestMethodGen.delimiter);
  testMethodArgsPrefix=store.getString(Preference.TestMethodGen.argsPrefix);
  testMethodArgsDelimiter=store.getString(Preference.TestMethodGen.argsDelimiter);
  testMethodReturnPrefix=store.getString(Preference.TestMethodGen.returnPrefix);
  testMethodReturnDelimiter=store.getString(Preference.TestMethodGen.returnDelimiter);
  classToExtend=store.getString(Preference.TestClassGen.classToExtend);
}","public PreferenceLoader(){
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  commonSrcMainJavaDir=store.getString(Preference.Common.srcMainPath);
  commonTestMainJavaDir=store.getString(Preference.Common.srcTestPath);
  isTestClassGenEnabled=store.getBoolean(Preference.TestClassGen.enabled);
  isTestMethodGenEnabled=store.getBoolean(Preference.TestMethodGen.enabled);
  isTestMethodGenArgsEnabled=store.getBoolean(Preference.TestMethodGen.enabledArgs);
  isTestMethodGenReturnEnabled=store.getBoolean(Preference.TestMethodGen.enabledReturn);
  isTestMethodGenExceptions=store.getBoolean(Preference.TestMethodGen.enabledException);
  isTestMethodGenNotBlankEnabled=store.getBoolean(Preference.TestMethodGen.enabledTestMethodSampleImpl);
  isTestMethodGenIncludePublic=store.getBoolean(Preference.TestMethodGen.includePublic);
  isTestMethodGenIncludeProtected=store.getBoolean(Preference.TestMethodGen.includeProtected);
  isTestMethodGenIncludePackageLocal=store.getBoolean(Preference.TestMethodGen.includePackageLocal);
  isTestMethodGenExecludeAccessors=store.getBoolean(Preference.TestMethodGen.excludesAccessors);
  isTestMethodGenEnabledSupportJMock2=MockGenUtil.isUsingJMock2(store);
  isTestMethodGenEnabledSupportEasyMock=MockGenUtil.isUsingEasyMock(store);
  String version=store.getString(Preference.TestClassGen.junitVersion);
  isJUnitVersion3=version.equals(Preference.TestClassGen.junitVersion3);
  isJUnitVersion4=version.equals(Preference.TestClassGen.junitVersion4);
  isUsingJUnitHelperRuntime=store.getBoolean(Preference.TestClassGen.usingJunitHelperRuntimeLib);
  testMethodDelimiter=store.getString(Preference.TestMethodGen.delimiter);
  testMethodArgsPrefix=store.getString(Preference.TestMethodGen.argsPrefix);
  testMethodArgsDelimiter=store.getString(Preference.TestMethodGen.argsDelimiter);
  testMethodReturnPrefix=store.getString(Preference.TestMethodGen.returnPrefix);
  testMethodReturnDelimiter=store.getString(Preference.TestMethodGen.returnDelimiter);
  testMethodExceptionPrefix=store.getString(Preference.TestMethodGen.exceptionPrefix);
  testMethodExceptionDelimiter=store.getString(Preference.TestMethodGen.exceptionDelimiter);
  classToExtend=store.getString(Preference.TestClassGen.classToExtend);
}",0.945914844649022
12053,"/** 
 * Create field editors
 */
@Override protected void createFieldEditors(){
{
    Composite parent=getFieldEditorParent();
    Group commonPrentGroup=new Group(parent,0);
{
      FillLayout parentLayout=new FillLayout(256);
      parentLayout.marginHeight=2;
      parentLayout.marginWidth=4;
      commonPrentGroup.setLayout(parentLayout);
      commonPrentGroup.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      commonPrentGroup.setLayoutData(gd);
      Composite grp=new Composite(commonPrentGroup,0);
      grp.setLayout(new GridLayout(2,false));
      Label label=new Label(grp,0);
      label.setText(""String_Node_Str"");
      gd=new GridData(768);
      gd.horizontalSpan=2;
      label.setLayoutData(gd);
      addField(new StringFieldEditor(Preference.Common.srcMainPath,Preference.Common.srcMainPath,grp));
      addField(new StringFieldEditor(Preference.Common.srcTestPath,Preference.Common.srcTestPath,grp));
    }
    tcgEnable=new BooleanFieldEditor(Preference.TestClassGen.enabled,Preference.TestClassGen.enabled,parent);
    addField(tcgEnable);
    Group classConfigGroup=new Group(parent,0);
{
      FillLayout parentLayout=new FillLayout(256);
      parentLayout.marginHeight=2;
      parentLayout.marginWidth=4;
      classConfigGroup.setLayout(parentLayout);
      classConfigGroup.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      classConfigGroup.setLayoutData(gd);
      tcgArea=new Composite(classConfigGroup,0);
      tcgArea.setLayout(new GridLayout(2,false));
{
        String ver3=Preference.TestClassGen.junitVersion3;
        String ver4=Preference.TestClassGen.junitVersion4;
        String[][] labelAndValues=new String[][]{{ver3,ver3},{ver4,ver4}};
        tcgRadioGroupVersions=new RadioGroupFieldEditor(Preference.TestClassGen.junitVersion,""String_Node_Str"",2,labelAndValues,tcgArea){
          @Override protected void fireValueChanged(          String p,          Object o,          Object n){
            String ver3=Preference.TestClassGen.junitVersion3;
            String ver4=Preference.TestClassGen.junitVersion4;
            boolean usingRuntimeLib=tcgUsingJUnitHelperTestCase.getBooleanValue();
            if (n.equals(ver4)) {
              switchDisplayOfClassToExtendArea(false);
            }
 else             if (n.equals(ver3) && !usingRuntimeLib) {
              switchDisplayOfClassToExtendArea(true);
            }
            super.fireValueChanged(p,o,n);
            IPreferenceStore store=Activator.getDefault().getPreferenceStore();
            store.setValue(Preference.TestClassGen.junitVersion,String.valueOf(n));
          }
        }
;
        addField(tcgRadioGroupVersions);
      }
{
        tcgUsingJUnitHelperTestCase=new BooleanFieldEditor(Preference.TestClassGen.usingJunitHelperRuntimeLib,Preference.TestClassGen.usingJunitHelperRuntimeLib,tcgArea){
          @Override protected void valueChanged(          boolean oldValue,          boolean newValue){
            super.valueChanged(oldValue,newValue);
            if (isJUnitVersion3()) {
              switchDisplayOfClassToExtendArea(newValue ? false : true);
            }
 else {
              switchDisplayOfClassToExtendArea(false);
            }
          }
          @Override protected void doLoad(){
            super.doLoad();
            if (isJUnitVersion3()) {
              switchDisplayOfClassToExtendArea(getBooleanValue() ? false : true);
            }
 else {
              switchDisplayOfClassToExtendArea(false);
            }
          }
          @Override protected void doLoadDefault(){
            super.doLoadDefault();
            if (isJUnitVersion3()) {
              switchDisplayOfClassToExtendArea(getBooleanValue() ? false : true);
            }
 else {
              switchDisplayOfClassToExtendArea(false);
            }
          }
        }
;
        addField(tcgUsingJUnitHelperTestCase);
      }
{
        tcgClassToExtend=new StringFieldEditor(Preference.TestClassGen.classToExtend,Preference.TestClassGen.classToExtend,tcgArea);
        addField(tcgClassToExtend);
      }
    }
    tmgEnable=new BooleanFieldEditor(Preference.TestMethodGen.enabled,Preference.TestMethodGen.enabled,parent){
      @Override protected void valueChanged(      boolean oldValue,      boolean newValue){
        super.valueChanged(oldValue,newValue);
        switchDisplayOfTestMethodsGenArea(newValue);
      }
      @Override protected void doLoad(){
        super.doLoad();
        switchDisplayOfTestMethodsGenArea(getBooleanValue());
      }
      @Override protected void doLoadDefault(){
        super.doLoadDefault();
        switchDisplayOfTestMethodsGenArea(getBooleanValue());
      }
    }
;
    addField(tmgEnable);
    tmgParentGroup=new Group(parent,0);
{
      FillLayout parentLayout=new FillLayout(256);
      parentLayout.marginHeight=4;
      parentLayout.marginWidth=4;
      tmgParentGroup.setLayout(parentLayout);
      tmgParentGroup.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      tmgParentGroup.setLayoutData(gd);
      tmgArea=new Composite(tmgParentGroup,0);
      GridLayout layout=new GridLayout(2,false);
      layout.marginHeight=4;
      layout.marginWidth=4;
      tmgArea.setLayout(layout);
{
        tmgCommonDelimiter=new StringFieldEditor(Preference.TestMethodGen.delimiter,Preference.TestMethodGen.delimiter,10,tmgArea);
        addField(tmgCommonDelimiter);
      }
    }
{
      tmgEnableArgs=new BooleanFieldEditor(Preference.TestMethodGen.enabledArgs,Preference.TestMethodGen.enabledArgs,tmgParentGroup){
        @Override protected void valueChanged(        boolean oldValue,        boolean newValue){
          super.valueChanged(oldValue,newValue);
          switchDisplayOfMethodArgsArea(newValue);
        }
        @Override protected void doLoad(){
          super.doLoad();
          switchDisplayOfMethodArgsArea(getBooleanValue());
        }
        @Override protected void doLoadDefault(){
          super.doLoadDefault();
          switchDisplayOfMethodArgsArea(getBooleanValue());
        }
      }
;
      addField(tmgEnableArgs);
      Group group=new Group(tmgParentGroup,0);
      FillLayout layout=new FillLayout(256);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      tmgEnableArgsArea=new Composite(group,0);
      tmgEnableArgsArea.setLayout(new GridLayout(2,false));
      tmgArgsPrefix=new StringFieldEditor(Preference.TestMethodGen.argsPrefix,Preference.TestMethodGen.argsPrefix,tmgEnableArgsArea);
      addField(tmgArgsPrefix);
      tmgArgsDelimiter=new StringFieldEditor(Preference.TestMethodGen.argsDelimiter,Preference.TestMethodGen.argsDelimiter,tmgEnableArgsArea);
      addField(tmgArgsDelimiter);
    }
{
      tmgEnableReturn=new BooleanFieldEditor(Preference.TestMethodGen.enabledReturn,Preference.TestMethodGen.enabledReturn,tmgParentGroup){
        @Override protected void valueChanged(        boolean oldValue,        boolean newValue){
          super.valueChanged(oldValue,newValue);
          switchDisplayOfMethodReturnArea(newValue);
        }
        @Override protected void doLoad(){
          super.doLoad();
          switchDisplayOfMethodReturnArea(getBooleanValue());
        }
        @Override protected void doLoadDefault(){
          super.doLoadDefault();
          switchDisplayOfMethodReturnArea(getBooleanValue());
        }
      }
;
      addField(tmgEnableReturn);
      Group group=new Group(tmgParentGroup,0);
      FillLayout layout=new FillLayout(256);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      tmgReturnArea=new Composite(group,0);
      tmgReturnArea.setLayout(new GridLayout(2,false));
      tmgReturnPrefix=new StringFieldEditor(Preference.TestMethodGen.returnPrefix,Preference.TestMethodGen.returnPrefix,tmgReturnArea);
      addField(tmgReturnPrefix);
      tmgReturnDelimiter=new StringFieldEditor(Preference.TestMethodGen.returnDelimiter,Preference.TestMethodGen.returnDelimiter,tmgReturnArea);
      addField(tmgReturnDelimiter);
    }
{
      tmgEnableExceptions=new BooleanFieldEditor(Preference.TestMethodGen.enabledExceptions,Preference.TestMethodGen.enabledExceptions,tmgParentGroup);
      addField(tmgEnableExceptions);
    }
{
      tmgCommonIncludePublicMethods=new BooleanFieldEditor(Preference.TestMethodGen.includePublic,Preference.TestMethodGen.includePublic,tmgParentGroup);
      addField(tmgCommonIncludePublicMethods);
      tmgCommonIncludeProtectdMethods=new BooleanFieldEditor(Preference.TestMethodGen.includeProtected,Preference.TestMethodGen.includeProtected,tmgParentGroup);
      addField(tmgCommonIncludeProtectdMethods);
      tmgCommonIncludePackageLocalMethods=new BooleanFieldEditor(Preference.TestMethodGen.includePackageLocal,Preference.TestMethodGen.includePackageLocal,tmgParentGroup);
      addField(tmgCommonIncludePackageLocalMethods);
    }
{
      tmgCommonExecludesAccessors=new BooleanFieldEditor(Preference.TestMethodGen.excludesAccessors,Preference.TestMethodGen.excludesAccessors,tmgParentGroup);
      addField(tmgCommonExecludesAccessors);
    }
{
      tmgEnableGenerateSample=new BooleanFieldEditor(Preference.TestMethodGen.enabledTestMethodSampleImpl,Preference.TestMethodGen.enabledTestMethodSampleImpl,tmgParentGroup){
        @Override protected void valueChanged(        boolean oldValue,        boolean newValue){
          super.valueChanged(oldValue,newValue);
          switchDisplayOfSampleImplGenArea(newValue);
        }
        @Override protected void doLoad(){
          super.doLoad();
          switchDisplayOfSampleImplGenArea(getBooleanValue());
        }
        @Override protected void doLoadDefault(){
          super.doLoadDefault();
          switchDisplayOfSampleImplGenArea(getBooleanValue());
        }
      }
;
      addField(tmgEnableGenerateSample);
      Group group=new Group(tmgParentGroup,0);
      FillLayout layout=new FillLayout(768);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(350);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      tmgSampleImplGenArea=new Composite(group,0);
      tmgSampleImplGenArea.setLayout(new GridLayout(2,false));
      String none=Preference.TestMethodGen.usingMockNone;
      String easyMock=Preference.TestMethodGen.usingMockEasyMock;
      String jmock2=Preference.TestMethodGen.usingMockJMock2;
      String[][] labelAndValues=new String[][]{{none,none},{easyMock,easyMock},{jmock2,jmock2}};
      tmgRadioGroupMocks=new RadioGroupFieldEditor(Preference.TestMethodGen.usingMock,""String_Node_Str"",3,labelAndValues,tmgSampleImplGenArea);
      addField(tmgRadioGroupMocks);
    }
  }
}","/** 
 * Create field editors
 */
@Override protected void createFieldEditors(){
{
    Composite parent=getFieldEditorParent();
    Group commonPrentGroup=new Group(parent,0);
{
      FillLayout parentLayout=new FillLayout(256);
      parentLayout.marginHeight=2;
      parentLayout.marginWidth=4;
      commonPrentGroup.setLayout(parentLayout);
      commonPrentGroup.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      commonPrentGroup.setLayoutData(gd);
      Composite grp=new Composite(commonPrentGroup,0);
      grp.setLayout(new GridLayout(2,false));
      Label label=new Label(grp,0);
      label.setText(""String_Node_Str"");
      gd=new GridData(768);
      gd.horizontalSpan=2;
      label.setLayoutData(gd);
      addField(new StringFieldEditor(Preference.Common.srcMainPath,Preference.Common.srcMainPath,grp));
      addField(new StringFieldEditor(Preference.Common.srcTestPath,Preference.Common.srcTestPath,grp));
    }
    tcgEnable=new BooleanFieldEditor(Preference.TestClassGen.enabled,Preference.TestClassGen.enabled,parent);
    addField(tcgEnable);
    Group classConfigGroup=new Group(parent,0);
{
      FillLayout parentLayout=new FillLayout(256);
      parentLayout.marginHeight=2;
      parentLayout.marginWidth=4;
      classConfigGroup.setLayout(parentLayout);
      classConfigGroup.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      classConfigGroup.setLayoutData(gd);
      tcgArea=new Composite(classConfigGroup,0);
      tcgArea.setLayout(new GridLayout(2,false));
{
        String ver3=Preference.TestClassGen.junitVersion3;
        String ver4=Preference.TestClassGen.junitVersion4;
        String[][] labelAndValues=new String[][]{{ver3,ver3},{ver4,ver4}};
        tcgRadioGroupVersions=new RadioGroupFieldEditor(Preference.TestClassGen.junitVersion,""String_Node_Str"",2,labelAndValues,tcgArea){
          @Override protected void fireValueChanged(          String p,          Object o,          Object n){
            String ver3=Preference.TestClassGen.junitVersion3;
            String ver4=Preference.TestClassGen.junitVersion4;
            boolean usingRuntimeLib=tcgUsingJUnitHelperTestCase.getBooleanValue();
            if (n.equals(ver4)) {
              switchDisplayOfClassToExtendArea(false);
            }
 else             if (n.equals(ver3) && !usingRuntimeLib) {
              switchDisplayOfClassToExtendArea(true);
            }
            super.fireValueChanged(p,o,n);
            IPreferenceStore store=Activator.getDefault().getPreferenceStore();
            store.setValue(Preference.TestClassGen.junitVersion,String.valueOf(n));
          }
        }
;
        addField(tcgRadioGroupVersions);
      }
{
        tcgUsingJUnitHelperTestCase=new BooleanFieldEditor(Preference.TestClassGen.usingJunitHelperRuntimeLib,Preference.TestClassGen.usingJunitHelperRuntimeLib,tcgArea){
          @Override protected void valueChanged(          boolean oldValue,          boolean newValue){
            super.valueChanged(oldValue,newValue);
            if (isJUnitVersion3()) {
              switchDisplayOfClassToExtendArea(newValue ? false : true);
            }
 else {
              switchDisplayOfClassToExtendArea(false);
            }
          }
          @Override protected void doLoad(){
            super.doLoad();
            if (isJUnitVersion3()) {
              switchDisplayOfClassToExtendArea(getBooleanValue() ? false : true);
            }
 else {
              switchDisplayOfClassToExtendArea(false);
            }
          }
          @Override protected void doLoadDefault(){
            super.doLoadDefault();
            if (isJUnitVersion3()) {
              switchDisplayOfClassToExtendArea(getBooleanValue() ? false : true);
            }
 else {
              switchDisplayOfClassToExtendArea(false);
            }
          }
        }
;
        addField(tcgUsingJUnitHelperTestCase);
      }
{
        tcgClassToExtend=new StringFieldEditor(Preference.TestClassGen.classToExtend,Preference.TestClassGen.classToExtend,tcgArea);
        addField(tcgClassToExtend);
      }
    }
    tmgEnable=new BooleanFieldEditor(Preference.TestMethodGen.enabled,Preference.TestMethodGen.enabled,parent){
      @Override protected void valueChanged(      boolean oldValue,      boolean newValue){
        super.valueChanged(oldValue,newValue);
        switchDisplayOfTestMethodsGenArea(newValue);
      }
      @Override protected void doLoad(){
        super.doLoad();
        switchDisplayOfTestMethodsGenArea(getBooleanValue());
      }
      @Override protected void doLoadDefault(){
        super.doLoadDefault();
        switchDisplayOfTestMethodsGenArea(getBooleanValue());
      }
    }
;
    addField(tmgEnable);
    tmgParentGroup=new Group(parent,0);
{
      FillLayout parentLayout=new FillLayout(256);
      parentLayout.marginHeight=4;
      parentLayout.marginWidth=4;
      tmgParentGroup.setLayout(parentLayout);
      tmgParentGroup.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      tmgParentGroup.setLayoutData(gd);
      tmgArea=new Composite(tmgParentGroup,0);
      GridLayout layout=new GridLayout(2,false);
      layout.marginHeight=4;
      layout.marginWidth=4;
      tmgArea.setLayout(layout);
{
        tmgCommonDelimiter=new StringFieldEditor(Preference.TestMethodGen.delimiter,Preference.TestMethodGen.delimiter,10,tmgArea);
        addField(tmgCommonDelimiter);
      }
    }
{
      tmgEnableArgs=new BooleanFieldEditor(Preference.TestMethodGen.enabledArgs,Preference.TestMethodGen.enabledArgs,tmgParentGroup){
        @Override protected void valueChanged(        boolean oldValue,        boolean newValue){
          super.valueChanged(oldValue,newValue);
          switchDisplayOfMethodArgsArea(newValue);
        }
        @Override protected void doLoad(){
          super.doLoad();
          switchDisplayOfMethodArgsArea(getBooleanValue());
        }
        @Override protected void doLoadDefault(){
          super.doLoadDefault();
          switchDisplayOfMethodArgsArea(getBooleanValue());
        }
      }
;
      addField(tmgEnableArgs);
      Group group=new Group(tmgParentGroup,0);
      FillLayout layout=new FillLayout(256);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      tmgEnableArgsArea=new Composite(group,0);
      tmgEnableArgsArea.setLayout(new GridLayout(2,false));
      tmgArgsPrefix=new StringFieldEditor(Preference.TestMethodGen.argsPrefix,Preference.TestMethodGen.argsPrefix,tmgEnableArgsArea);
      addField(tmgArgsPrefix);
      tmgArgsDelimiter=new StringFieldEditor(Preference.TestMethodGen.argsDelimiter,Preference.TestMethodGen.argsDelimiter,tmgEnableArgsArea);
      addField(tmgArgsDelimiter);
    }
{
      tmgEnableReturn=new BooleanFieldEditor(Preference.TestMethodGen.enabledReturn,Preference.TestMethodGen.enabledReturn,tmgParentGroup){
        @Override protected void valueChanged(        boolean oldValue,        boolean newValue){
          super.valueChanged(oldValue,newValue);
          switchDisplayOfMethodReturnArea(newValue);
        }
        @Override protected void doLoad(){
          super.doLoad();
          switchDisplayOfMethodReturnArea(getBooleanValue());
        }
        @Override protected void doLoadDefault(){
          super.doLoadDefault();
          switchDisplayOfMethodReturnArea(getBooleanValue());
        }
      }
;
      addField(tmgEnableReturn);
      Group group=new Group(tmgParentGroup,0);
      FillLayout layout=new FillLayout(256);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      tmgReturnArea=new Composite(group,0);
      tmgReturnArea.setLayout(new GridLayout(2,false));
      tmgReturnPrefix=new StringFieldEditor(Preference.TestMethodGen.returnPrefix,Preference.TestMethodGen.returnPrefix,tmgReturnArea);
      addField(tmgReturnPrefix);
      tmgReturnDelimiter=new StringFieldEditor(Preference.TestMethodGen.returnDelimiter,Preference.TestMethodGen.returnDelimiter,tmgReturnArea);
      addField(tmgReturnDelimiter);
    }
{
      tmgEnableException=new BooleanFieldEditor(Preference.TestMethodGen.enabledException,Preference.TestMethodGen.enabledException,tmgParentGroup){
        @Override protected void valueChanged(        boolean oldValue,        boolean newValue){
          super.valueChanged(oldValue,newValue);
          switchDisplayOfMethodExceptionsArea(newValue);
        }
        @Override protected void doLoad(){
          super.doLoad();
          switchDisplayOfMethodExceptionsArea(getBooleanValue());
        }
        @Override protected void doLoadDefault(){
          super.doLoadDefault();
          switchDisplayOfMethodExceptionsArea(getBooleanValue());
        }
      }
;
      addField(tmgEnableException);
      Group group=new Group(tmgParentGroup,0);
      FillLayout layout=new FillLayout(256);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      tmgExceptionArea=new Composite(group,0);
      tmgExceptionArea.setLayout(new GridLayout(2,false));
      tmgExceptionPrefix=new StringFieldEditor(Preference.TestMethodGen.exceptionPrefix,Preference.TestMethodGen.exceptionPrefix,tmgExceptionArea);
      addField(tmgExceptionPrefix);
      tmgExceptionDelimiter=new StringFieldEditor(Preference.TestMethodGen.exceptionDelimiter,Preference.TestMethodGen.exceptionDelimiter,tmgExceptionArea);
      addField(tmgExceptionDelimiter);
    }
{
      tmgCommonIncludePublicMethods=new BooleanFieldEditor(Preference.TestMethodGen.includePublic,Preference.TestMethodGen.includePublic,tmgParentGroup);
      addField(tmgCommonIncludePublicMethods);
      tmgCommonIncludeProtectdMethods=new BooleanFieldEditor(Preference.TestMethodGen.includeProtected,Preference.TestMethodGen.includeProtected,tmgParentGroup);
      addField(tmgCommonIncludeProtectdMethods);
      tmgCommonIncludePackageLocalMethods=new BooleanFieldEditor(Preference.TestMethodGen.includePackageLocal,Preference.TestMethodGen.includePackageLocal,tmgParentGroup);
      addField(tmgCommonIncludePackageLocalMethods);
    }
{
      tmgCommonExecludesAccessors=new BooleanFieldEditor(Preference.TestMethodGen.excludesAccessors,Preference.TestMethodGen.excludesAccessors,tmgParentGroup);
      addField(tmgCommonExecludesAccessors);
    }
{
      tmgEnableGenerateSample=new BooleanFieldEditor(Preference.TestMethodGen.enabledTestMethodSampleImpl,Preference.TestMethodGen.enabledTestMethodSampleImpl,tmgParentGroup){
        @Override protected void valueChanged(        boolean oldValue,        boolean newValue){
          super.valueChanged(oldValue,newValue);
          switchDisplayOfSampleImplGenArea(newValue);
        }
        @Override protected void doLoad(){
          super.doLoad();
          switchDisplayOfSampleImplGenArea(getBooleanValue());
        }
        @Override protected void doLoadDefault(){
          super.doLoadDefault();
          switchDisplayOfSampleImplGenArea(getBooleanValue());
        }
      }
;
      addField(tmgEnableGenerateSample);
      Group group=new Group(tmgParentGroup,0);
      FillLayout layout=new FillLayout(768);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(350);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      tmgSampleImplGenArea=new Composite(group,0);
      tmgSampleImplGenArea.setLayout(new GridLayout(2,false));
      String none=Preference.TestMethodGen.usingMockNone;
      String easyMock=Preference.TestMethodGen.usingMockEasyMock;
      String jmock2=Preference.TestMethodGen.usingMockJMock2;
      String[][] labelAndValues=new String[][]{{none,none},{easyMock,easyMock},{jmock2,jmock2}};
      tmgRadioGroupMocks=new RadioGroupFieldEditor(Preference.TestMethodGen.usingMock,""String_Node_Str"",3,labelAndValues,tmgSampleImplGenArea);
      addField(tmgRadioGroupMocks);
    }
  }
}",0.9409753387186393
12054,"@Override public void initializeDefaultPreferences(){
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
{
    store.setDefault(Preference.Common.srcMainPath,""String_Node_Str"");
    store.setDefault(Preference.Common.srcTestPath,""String_Node_Str"");
  }
{
    store.setDefault(Preference.TestClassGen.enabled,true);
    store.setDefault(Preference.TestClassGen.junitVersion,Preference.TestClassGen.junitVersion3);
    store.setDefault(Preference.TestClassGen.classToExtend,""String_Node_Str"");
    store.setDefault(Preference.TestClassGen.usingJunitHelperRuntimeLib,false);
  }
{
    store.setDefault(Preference.TestMethodGen.enabled,true);
    store.setDefault(Preference.TestMethodGen.includePublic,true);
    store.setDefault(Preference.TestMethodGen.includeProtected,true);
    store.setDefault(Preference.TestMethodGen.includePackageLocal,true);
    store.setDefault(Preference.TestMethodGen.excludesAccessors,true);
    store.setDefault(Preference.TestMethodGen.delimiter,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.enabledArgs,true);
    store.setDefault(Preference.TestMethodGen.argsPrefix,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.argsDelimiter,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.enabledReturn,false);
    store.setDefault(Preference.TestMethodGen.returnPrefix,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.returnDelimiter,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.enabledExceptions,true);
    store.setDefault(Preference.TestMethodGen.enabledTestMethodSampleImpl,true);
    store.setDefault(Preference.TestMethodGen.usingMock,Preference.TestMethodGen.usingMockNone);
  }
}","@Override public void initializeDefaultPreferences(){
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
{
    store.setDefault(Preference.Common.srcMainPath,""String_Node_Str"");
    store.setDefault(Preference.Common.srcTestPath,""String_Node_Str"");
  }
{
    store.setDefault(Preference.TestClassGen.enabled,true);
    store.setDefault(Preference.TestClassGen.junitVersion,Preference.TestClassGen.junitVersion3);
    store.setDefault(Preference.TestClassGen.classToExtend,""String_Node_Str"");
    store.setDefault(Preference.TestClassGen.usingJunitHelperRuntimeLib,false);
  }
{
    store.setDefault(Preference.TestMethodGen.enabled,true);
    store.setDefault(Preference.TestMethodGen.includePublic,true);
    store.setDefault(Preference.TestMethodGen.includeProtected,true);
    store.setDefault(Preference.TestMethodGen.includePackageLocal,true);
    store.setDefault(Preference.TestMethodGen.excludesAccessors,true);
    store.setDefault(Preference.TestMethodGen.delimiter,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.enabledArgs,true);
    store.setDefault(Preference.TestMethodGen.argsPrefix,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.argsDelimiter,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.enabledReturn,false);
    store.setDefault(Preference.TestMethodGen.returnPrefix,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.returnDelimiter,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.enabledException,true);
    store.setDefault(Preference.TestMethodGen.exceptionPrefix,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.exceptionDelimiter,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.enabledTestMethodSampleImpl,true);
    store.setDefault(Preference.TestMethodGen.usingMock,Preference.TestMethodGen.usingMockNone);
  }
}",0.9506378258458126
12055,"/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param javaFile
 * @return the information on the test methods
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(IFile javaFile) throws Exception {
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  boolean enabled=store.getBoolean(Preference.TestMethodGen.ENABLE);
  if (!enabled) {
    return classInfo;
  }
  boolean enabledArgs=store.getBoolean(Preference.TestMethodGen.ARGS);
  boolean enabledReturn=store.getBoolean(Preference.TestMethodGen.RETURN);
  boolean enabledNotBlankMethods=store.getBoolean(Preference.TestMethodGen.METHOD_SAMPLE_IMPL);
  boolean enableExcludesAccessors=store.getBoolean(Preference.TestMethodGen.EXLCUDES_ACCESSORS);
  boolean enabledSupportJMock2=MockGenUtil.isUsingJMock2(store);
  boolean enabledSupportEasyMock=MockGenUtil.isUsingEasyMock(store);
  String delimiter=store.getString(Preference.TestMethodGen.DELIMITER);
  String argsPrefix=store.getString(Preference.TestMethodGen.ARGS_PREFIX);
  String argsDelimiter=store.getString(Preference.TestMethodGen.ARGS_DELIMITER);
  String returnPrefix=store.getString(Preference.TestMethodGen.RETURN_PREFIX);
  String returnDelimiter=store.getString(Preference.TestMethodGen.RETURN_DELIMITER);
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=javaFile.getContents();
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null)     tmpsb.append(line + ""String_Node_Str"");
    String targetClassSourceStr=tmpsb.toString();
    if (enabledNotBlankMethods) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importStartLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importStartLine : importStartLines) {
        if (!importStartLine.matches(""String_Node_Str"")) {
          String importedPackage=importStartLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      if (enabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (enabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
    }
    String[] targets=targetClassSourceStr.split(""String_Node_Str"");
    for (    String target : targets) {
      target=target.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (target.matches(RXP_SEARCH_METHOD)) {
        Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(target);
        if (matcher.find()) {
          MethodInfo each=new MethodInfo();
          if (enabledNotBlankMethods || enabledReturn) {
            String returnTypeFull=getType(matcher.group(1));
            Matcher toGenericsMatcher=Pattern.compile(RXP_GENERICS_PART_GROUP).matcher(returnTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"");
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,STR.EMPTY,new ArrayList<String>());
                each.returnType.generics.add(generic);
              }
            }
            each.returnType.name=returnTypeFull.replace(RXP_GENERICS_PART,STR.EMPTY);
            each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
          }
          each.methodName=matcher.group(2);
          String args=matcher.group(3);
          String[] tmpArr=args.split(""String_Node_Str"");
          int tmpArrLen=tmpArr.length;
          List<String> tmpArrList=new ArrayList<String>();
          String buf=STR.EMPTY;
          for (int i=0; i < tmpArrLen; i++) {
            String element=tmpArr[i].trim();
            if (element.matches(""String_Node_Str"")) {
              tmpArrList.add(element);
              continue;
            }
            if (element.matches(""String_Node_Str"")) {
              buf+=element;
              continue;
            }
            if (element.matches(""String_Node_Str"")) {
              String result=buf + STR.COMMA + element;
              tmpArrList.add(result);
              buf=STR.EMPTY;
              continue;
            }
            if (!buf.equals(STR.EMPTY)) {
              buf+=STR.COMMA + element;
              continue;
            }
            tmpArrList.add(element);
          }
          String[] argArr=tmpArrList.toArray(new String[0]);
          if (enabledNotBlankMethods || enabledArgs) {
            int argArrLen=argArr.length;
            for (int i=0; i < argArrLen; i++) {
              ArgType argType=new ArgType();
              String argTypeFull=argArr[i];
              Matcher toGenericsMatcher=Pattern.compile(RXP_GENERICS_PART_GROUP).matcher(argTypeFull);
              while (toGenericsMatcher.find()) {
                String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"");
                for (                String generic : generics) {
                  generic=getClassInSourceCode(generic,STR.EMPTY,new ArrayList<String>());
                  argType.generics.add(generic);
                }
              }
              String argTypeStr=argTypeFull.replaceAll(RXP_GENERICS_PART,STR.EMPTY);
              argType.name=getType(argTypeStr);
              argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
              each.argTypes.add(argType);
            }
          }
          if (enableExcludesAccessors) {
            String fieldName=null;
            String fieldType=null;
            if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(3);
              if (each.argTypes.size() > 0) {
                fieldType=each.argTypes.get(0).name;
              }
            }
 else             if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(3);
              fieldType=each.returnType.name;
            }
 else             if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(2);
              fieldType=each.returnType.name;
            }
            if (fieldName != null) {
              fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
              fieldType=fieldType.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
              String searchRegexp=""String_Node_Str"" + fieldType + ""String_Node_Str""+ fieldName+ ""String_Node_Str"";
              if (targetClassSourceStr.matches(searchRegexp))               continue;
            }
          }
          each.testMethodName=""String_Node_Str"" + each.methodName;
          if (enabledArgs) {
            each.testMethodName+=delimiter + argsPrefix;
            if (each.argTypes.size() == 0)             each.testMethodName+=argsDelimiter;
            for (            ArgType argType : each.argTypes)             each.testMethodName+=argsDelimiter + argType.nameInMethodName;
          }
          if (enabledReturn)           each.testMethodName+=delimiter + returnPrefix + returnDelimiter+ each.returnType.nameInMethodName;
          if (target.matches(RXP_SEARCH_STATIC_METHOD))           each.isStatic=true;
          testMethods.add(each);
        }
      }
    }
  }
  finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.methods=testMethods;
  return classInfo;
}","/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param javaFile
 * @return the information on the test methods
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(IFile javaFile) throws Exception {
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  boolean enabled=store.getBoolean(Preference.TestMethodGen.ENABLE);
  if (!enabled) {
    return classInfo;
  }
  boolean enabledArgs=store.getBoolean(Preference.TestMethodGen.ARGS);
  boolean enabledReturn=store.getBoolean(Preference.TestMethodGen.RETURN);
  boolean enabledNotBlankMethods=store.getBoolean(Preference.TestMethodGen.METHOD_SAMPLE_IMPL);
  boolean enableExcludesAccessors=store.getBoolean(Preference.TestMethodGen.EXLCUDES_ACCESSORS);
  boolean enabledSupportJMock2=MockGenUtil.isUsingJMock2(store);
  boolean enabledSupportEasyMock=MockGenUtil.isUsingEasyMock(store);
  String delimiter=store.getString(Preference.TestMethodGen.DELIMITER);
  String argsPrefix=store.getString(Preference.TestMethodGen.ARGS_PREFIX);
  String argsDelimiter=store.getString(Preference.TestMethodGen.ARGS_DELIMITER);
  String returnPrefix=store.getString(Preference.TestMethodGen.RETURN_PREFIX);
  String returnDelimiter=store.getString(Preference.TestMethodGen.RETURN_DELIMITER);
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=javaFile.getContents();
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null) {
      tmpsb.append(line + ""String_Node_Str"");
    }
    String targetClassSourceStr=trimInnerClassMethods(tmpsb.toString());
    if (enabledNotBlankMethods) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importStartLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importStartLine : importStartLines) {
        if (!importStartLine.matches(""String_Node_Str"")) {
          String importedPackage=importStartLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      if (enabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (enabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
    }
    String[] targets=targetClassSourceStr.split(""String_Node_Str"");
    for (    String target : targets) {
      target=target.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (target.matches(RXP_SEARCH_METHOD)) {
        Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(target);
        if (matcher.find()) {
          MethodInfo each=new MethodInfo();
          if (enabledNotBlankMethods || enabledReturn) {
            String returnTypeFull=getType(matcher.group(1));
            Matcher toGenericsMatcher=Pattern.compile(RXP_GENERICS_PART_GROUP).matcher(returnTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"");
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,STR.EMPTY,new ArrayList<String>());
                each.returnType.generics.add(generic);
              }
            }
            each.returnType.name=returnTypeFull.replace(RXP_GENERICS_PART,STR.EMPTY);
            each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
          }
          each.methodName=matcher.group(2);
          String args=matcher.group(3);
          String[] tmpArr=args.split(""String_Node_Str"");
          int tmpArrLen=tmpArr.length;
          List<String> tmpArrList=new ArrayList<String>();
          String buf=STR.EMPTY;
          for (int i=0; i < tmpArrLen; i++) {
            String element=tmpArr[i].trim();
            if (element.matches(""String_Node_Str"")) {
              tmpArrList.add(element);
              continue;
            }
            if (element.matches(""String_Node_Str"")) {
              buf+=element;
              continue;
            }
            if (element.matches(""String_Node_Str"")) {
              String result=buf + STR.COMMA + element;
              tmpArrList.add(result);
              buf=STR.EMPTY;
              continue;
            }
            if (!buf.equals(STR.EMPTY)) {
              buf+=STR.COMMA + element;
              continue;
            }
            tmpArrList.add(element);
          }
          String[] argArr=tmpArrList.toArray(new String[0]);
          if (enabledNotBlankMethods || enabledArgs) {
            int argArrLen=argArr.length;
            for (int i=0; i < argArrLen; i++) {
              ArgType argType=new ArgType();
              String argTypeFull=argArr[i];
              Matcher toGenericsMatcher=Pattern.compile(RXP_GENERICS_PART_GROUP).matcher(argTypeFull);
              while (toGenericsMatcher.find()) {
                String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"");
                for (                String generic : generics) {
                  generic=getClassInSourceCode(generic,STR.EMPTY,new ArrayList<String>());
                  argType.generics.add(generic);
                }
              }
              String argTypeStr=argTypeFull.replaceAll(RXP_GENERICS_PART,STR.EMPTY);
              argType.name=getType(argTypeStr);
              argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
              each.argTypes.add(argType);
            }
          }
          if (enableExcludesAccessors) {
            String fieldName=null;
            String fieldType=null;
            if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(3);
              if (each.argTypes.size() > 0) {
                fieldType=each.argTypes.get(0).name;
              }
            }
 else             if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(3);
              fieldType=each.returnType.name;
            }
 else             if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(2);
              fieldType=each.returnType.name;
            }
            if (fieldName != null) {
              fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
              fieldType=fieldType.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
              String searchRegexp=""String_Node_Str"" + fieldType + ""String_Node_Str""+ fieldName+ ""String_Node_Str"";
              if (targetClassSourceStr.matches(searchRegexp))               continue;
            }
          }
          each.testMethodName=""String_Node_Str"" + each.methodName;
          if (enabledArgs) {
            each.testMethodName+=delimiter + argsPrefix;
            if (each.argTypes.size() == 0)             each.testMethodName+=argsDelimiter;
            for (            ArgType argType : each.argTypes)             each.testMethodName+=argsDelimiter + argType.nameInMethodName;
          }
          if (enabledReturn)           each.testMethodName+=delimiter + returnPrefix + returnDelimiter+ each.returnType.nameInMethodName;
          if (target.matches(RXP_SEARCH_STATIC_METHOD))           each.isStatic=true;
          testMethods.add(each);
        }
      }
    }
  }
  finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.methods=testMethods;
  return classInfo;
}",0.9980121679416902
12056,"/** 
 * Get type.
 * @param arg
 * @return
 */
private static String getType(String arg){
  arg=arg.trim().replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"")[0];
  return arg;
}","/** 
 * Get type.
 * @param arg
 * @return
 */
protected static String getType(String arg){
  arg=arg.trim().replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"")[0];
  return arg;
}",0.9791666666666666
12057,"/** 
 * Get type converted.
 * @param arg
 * @return
 */
private static String getTypeAvailableInMethodName(String arg){
  arg=arg.replaceAll(RXP_GENERICS_PART,STR.EMPTY);
  arg=arg.replaceAll(""String_Node_Str"",STR.EMPTY);
  arg=arg.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
  arg=arg.replaceAll(""String_Node_Str"",STR.EMPTY);
  arg=arg.trim().split(""String_Node_Str"")[0];
  return arg;
}","/** 
 * Get type converted.
 * @param arg
 * @return
 */
protected static String getTypeAvailableInMethodName(String arg){
  arg=arg.replaceAll(RXP_GENERICS_PART,STR.EMPTY);
  arg=arg.replaceAll(""String_Node_Str"",STR.EMPTY);
  arg=arg.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
  arg=arg.replaceAll(""String_Node_Str"",STR.EMPTY);
  arg=arg.trim().split(""String_Node_Str"")[0];
  return arg;
}",0.9864559819413092
12058,"private static String getClassInSourceCode(String returnTypeToCheck,String testTargetClassname,List<String> importList){
  if (returnTypeToCheck.matches(""String_Node_Str""))   return returnTypeToCheck;
  boolean isArray=false;
  if (returnTypeToCheck.matches(""String_Node_Str"")) {
    isArray=true;
    returnTypeToCheck=returnTypeToCheck.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  String returnTypeName=""String_Node_Str"";
  boolean returnTypeFound=false;
  try {
    if (PrimitiveTypeUtil.isPrimitive(returnTypeToCheck)) {
      returnTypeFound=true;
      if (!returnTypeName.matches(""String_Node_Str""))       returnTypeName=PrimitiveTypeUtil.getPrimitiveDefaultValue(returnTypeToCheck);
    }
 else {
      try {
        Class.forName(""String_Node_Str"" + returnTypeToCheck);
        returnTypeFound=true;
      }
 catch (      Exception ignore) {
      }
      if (!returnTypeFound)       Class.forName(returnTypeToCheck);
    }
  }
 catch (  Exception e) {
    if (returnTypeToCheck.equals(testTargetClassname))     returnTypeFound=true;
    for (    String importedPackage : importList) {
      importedPackage=importedPackage.replaceAll(""String_Node_Str"",STR.EMPTY);
      if (importedPackage.matches(""String_Node_Str"" + returnTypeToCheck + ""String_Node_Str"")) {
        returnTypeFound=true;
        break;
      }
    }
  }
  if (!returnTypeFound) {
    if (isArray)     returnTypeName+=""String_Node_Str"";
    return returnTypeName;
  }
 else {
    if (isArray)     returnTypeToCheck+=""String_Node_Str"";
    return returnTypeToCheck;
  }
}","protected static String getClassInSourceCode(String returnTypeToCheck,String testTargetClassname,List<String> importList){
  if (returnTypeToCheck.matches(""String_Node_Str""))   return returnTypeToCheck;
  boolean isArray=false;
  if (returnTypeToCheck.matches(""String_Node_Str"")) {
    isArray=true;
    returnTypeToCheck=returnTypeToCheck.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  String returnTypeName=""String_Node_Str"";
  boolean returnTypeFound=false;
  try {
    if (PrimitiveTypeUtil.isPrimitive(returnTypeToCheck)) {
      returnTypeFound=true;
      if (!returnTypeName.matches(""String_Node_Str""))       returnTypeName=PrimitiveTypeUtil.getPrimitiveDefaultValue(returnTypeToCheck);
    }
 else {
      try {
        Class.forName(""String_Node_Str"" + returnTypeToCheck);
        returnTypeFound=true;
      }
 catch (      Exception ignore) {
      }
      if (!returnTypeFound)       Class.forName(returnTypeToCheck);
    }
  }
 catch (  Exception e) {
    if (returnTypeToCheck.equals(testTargetClassname))     returnTypeFound=true;
    for (    String importedPackage : importList) {
      importedPackage=importedPackage.replaceAll(""String_Node_Str"",STR.EMPTY);
      if (importedPackage.matches(""String_Node_Str"" + returnTypeToCheck + ""String_Node_Str"")) {
        returnTypeFound=true;
        break;
      }
    }
  }
  if (!returnTypeFound) {
    if (isArray)     returnTypeName+=""String_Node_Str"";
    return returnTypeName;
  }
 else {
    if (isArray)     returnTypeToCheck+=""String_Node_Str"";
    return returnTypeToCheck;
  }
}",0.9961513790891596
12059,"/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param javaFile
 * @return the information on the test methods
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(IFile javaFile) throws Exception {
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  boolean enabled=store.getBoolean(Preference.TestMethodGen.ENABLE);
  if (!enabled) {
    return classInfo;
  }
  boolean enabledArgs=store.getBoolean(Preference.TestMethodGen.ARGS);
  boolean enabledReturn=store.getBoolean(Preference.TestMethodGen.RETURN);
  boolean enabledNotBlankMethods=store.getBoolean(Preference.TestMethodGen.METHOD_SAMPLE_IMPL);
  boolean enableExcludesAccessors=store.getBoolean(Preference.TestMethodGen.EXLCUDES_ACCESSORS);
  boolean enabledSupportJMock2=MockGenUtil.isUsingJMock2(store);
  boolean enabledSupportEasyMock=MockGenUtil.isUsingEasyMock(store);
  String delimiter=store.getString(Preference.TestMethodGen.DELIMITER);
  String argsPrefix=store.getString(Preference.TestMethodGen.ARGS_PREFIX);
  String argsDelimiter=store.getString(Preference.TestMethodGen.ARGS_DELIMITER);
  String returnPrefix=store.getString(Preference.TestMethodGen.RETURN_PREFIX);
  String returnDelimiter=store.getString(Preference.TestMethodGen.RETURN_DELIMITER);
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=javaFile.getContents();
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null) {
      tmpsb.append(trimLineComments(line) + ""String_Node_Str"");
    }
    String targetClassSourceStr=trimInnerClassMethods(trimAllComments(tmpsb.toString()));
    if (enabledNotBlankMethods) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importStartLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importStartLine : importStartLines) {
        if (!importStartLine.matches(""String_Node_Str"")) {
          String importedPackage=importStartLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      if (enabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (enabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
    }
    String[] targets=targetClassSourceStr.split(""String_Node_Str"");
    for (    String target : targets) {
      target=target.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (target.matches(RXP_SEARCH_METHOD)) {
        Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(target);
        if (matcher.find()) {
          MethodInfo each=new MethodInfo();
          if (enabledNotBlankMethods || enabledReturn) {
            String returnTypeFull=getType(matcher.group(1));
            Matcher toGenericsMatcher=Pattern.compile(RXP_GENERICS_PART_GROUP).matcher(returnTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"");
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,STR.EMPTY,new ArrayList<String>());
                each.returnType.generics.add(generic);
              }
            }
            each.returnType.name=returnTypeFull.replace(RXP_GENERICS_PART,STR.EMPTY);
            each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
          }
          each.methodName=matcher.group(2);
          String args=matcher.group(3);
          String[] tmpArr=args.split(""String_Node_Str"");
          int tmpArrLen=tmpArr.length;
          List<String> tmpArrList=new ArrayList<String>();
          String buf=STR.EMPTY;
          for (int i=0; i < tmpArrLen; i++) {
            String element=tmpArr[i].trim();
            if (element.matches(""String_Node_Str"")) {
              tmpArrList.add(element);
              continue;
            }
            if (element.matches(""String_Node_Str"")) {
              buf+=element;
              continue;
            }
            if (element.matches(""String_Node_Str"")) {
              String result=buf + STR.COMMA + element;
              tmpArrList.add(result);
              buf=STR.EMPTY;
              continue;
            }
            if (!buf.equals(STR.EMPTY)) {
              buf+=STR.COMMA + element;
              continue;
            }
            tmpArrList.add(element);
          }
          String[] argArr=tmpArrList.toArray(new String[0]);
          if (enabledNotBlankMethods || enabledArgs) {
            int argArrLen=argArr.length;
            for (int i=0; i < argArrLen; i++) {
              ArgType argType=new ArgType();
              String argTypeFull=argArr[i];
              Matcher toGenericsMatcher=Pattern.compile(RXP_GENERICS_PART_GROUP).matcher(argTypeFull);
              while (toGenericsMatcher.find()) {
                String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"");
                for (                String generic : generics) {
                  generic=getClassInSourceCode(generic,STR.EMPTY,new ArrayList<String>());
                  argType.generics.add(generic);
                }
              }
              String argTypeStr=argTypeFull.replaceAll(RXP_GENERICS_PART,STR.EMPTY);
              argType.name=getType(argTypeStr);
              argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
              each.argTypes.add(argType);
            }
          }
          if (enableExcludesAccessors) {
            String fieldName=null;
            String fieldType=null;
            if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(3);
              if (each.argTypes.size() > 0) {
                fieldType=each.argTypes.get(0).name;
              }
            }
 else             if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(3);
              fieldType=each.returnType.name;
            }
 else             if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(2);
              fieldType=each.returnType.name;
            }
            if (fieldName != null) {
              fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
              fieldType=fieldType.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
              String searchRegexp=""String_Node_Str"" + fieldType + ""String_Node_Str""+ fieldName+ ""String_Node_Str"";
              if (targetClassSourceStr.matches(searchRegexp))               continue;
            }
          }
          each.testMethodName=""String_Node_Str"" + each.methodName;
          if (enabledArgs) {
            each.testMethodName+=delimiter + argsPrefix;
            if (each.argTypes.size() == 0)             each.testMethodName+=argsDelimiter;
            for (            ArgType argType : each.argTypes)             each.testMethodName+=argsDelimiter + argType.nameInMethodName;
          }
          if (enabledReturn)           each.testMethodName+=delimiter + returnPrefix + returnDelimiter+ each.returnType.nameInMethodName;
          if (target.matches(RXP_SEARCH_STATIC_METHOD))           each.isStatic=true;
          testMethods.add(each);
        }
      }
    }
  }
  finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.methods=testMethods;
  return classInfo;
}","/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param javaFile
 * @return the information on the test methods
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(IFile javaFile) throws Exception {
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  boolean enabled=store.getBoolean(Preference.TestMethodGen.ENABLE);
  if (!enabled) {
    return classInfo;
  }
  boolean enabledArgs=store.getBoolean(Preference.TestMethodGen.ARGS);
  boolean enabledReturn=store.getBoolean(Preference.TestMethodGen.RETURN);
  boolean enabledNotBlankMethods=store.getBoolean(Preference.TestMethodGen.METHOD_SAMPLE_IMPL);
  boolean enableExcludesAccessors=store.getBoolean(Preference.TestMethodGen.EXLCUDES_ACCESSORS);
  boolean enabledSupportJMock2=MockGenUtil.isUsingJMock2(store);
  boolean enabledSupportEasyMock=MockGenUtil.isUsingEasyMock(store);
  String delimiter=store.getString(Preference.TestMethodGen.DELIMITER);
  String argsPrefix=store.getString(Preference.TestMethodGen.ARGS_PREFIX);
  String argsDelimiter=store.getString(Preference.TestMethodGen.ARGS_DELIMITER);
  String returnPrefix=store.getString(Preference.TestMethodGen.RETURN_PREFIX);
  String returnDelimiter=store.getString(Preference.TestMethodGen.RETURN_DELIMITER);
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=javaFile.getContents();
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null) {
      tmpsb.append(trimLineComments(line) + ""String_Node_Str"");
    }
    String targetClassSourceStr=trimInsideOfBraces(trimAllComments(tmpsb.toString()));
    if (enabledNotBlankMethods) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importStartLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importStartLine : importStartLines) {
        if (!importStartLine.matches(""String_Node_Str"")) {
          String importedPackage=importStartLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      if (enabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (enabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
    }
    String[] targets=targetClassSourceStr.split(""String_Node_Str"");
    for (    String target : targets) {
      target=target.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (target.matches(RXP_SEARCH_METHOD)) {
        Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(target);
        if (matcher.find()) {
          MethodInfo each=new MethodInfo();
          if (enabledNotBlankMethods || enabledReturn) {
            String returnTypeFull=getType(matcher.group(1));
            Matcher toGenericsMatcher=Pattern.compile(RXP_GENERICS_PART_GROUP).matcher(returnTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"");
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,STR.EMPTY,new ArrayList<String>());
                each.returnType.generics.add(generic);
              }
            }
            each.returnType.name=returnTypeFull.replace(RXP_GENERICS_PART,STR.EMPTY);
            each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
          }
          each.methodName=matcher.group(2);
          String args=matcher.group(3);
          String[] tmpArr=args.split(""String_Node_Str"");
          int tmpArrLen=tmpArr.length;
          List<String> tmpArrList=new ArrayList<String>();
          String buf=STR.EMPTY;
          for (int i=0; i < tmpArrLen; i++) {
            String element=tmpArr[i].trim();
            if (element.matches(""String_Node_Str"")) {
              tmpArrList.add(element);
              continue;
            }
            if (element.matches(""String_Node_Str"")) {
              buf+=element;
              continue;
            }
            if (element.matches(""String_Node_Str"")) {
              String result=buf + STR.COMMA + element;
              tmpArrList.add(result);
              buf=STR.EMPTY;
              continue;
            }
            if (!buf.equals(STR.EMPTY)) {
              buf+=STR.COMMA + element;
              continue;
            }
            tmpArrList.add(element);
          }
          String[] argArr=tmpArrList.toArray(new String[0]);
          if (enabledNotBlankMethods || enabledArgs) {
            int argArrLen=argArr.length;
            for (int i=0; i < argArrLen; i++) {
              ArgType argType=new ArgType();
              String argTypeFull=argArr[i];
              Matcher toGenericsMatcher=Pattern.compile(RXP_GENERICS_PART_GROUP).matcher(argTypeFull);
              while (toGenericsMatcher.find()) {
                String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"");
                for (                String generic : generics) {
                  generic=getClassInSourceCode(generic,STR.EMPTY,new ArrayList<String>());
                  argType.generics.add(generic);
                }
              }
              String argTypeStr=argTypeFull.replaceAll(RXP_GENERICS_PART,STR.EMPTY);
              argType.name=getType(argTypeStr);
              argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
              each.argTypes.add(argType);
            }
          }
          if (enableExcludesAccessors) {
            String fieldName=null;
            String fieldType=null;
            if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(3);
              if (each.argTypes.size() > 0) {
                fieldType=each.argTypes.get(0).name;
              }
            }
 else             if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(3);
              fieldType=each.returnType.name;
            }
 else             if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(2);
              fieldType=each.returnType.name;
            }
            if (fieldName != null) {
              fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
              fieldType=fieldType.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
              String searchRegexp=""String_Node_Str"" + fieldType + ""String_Node_Str""+ fieldName+ ""String_Node_Str"";
              if (targetClassSourceStr.matches(searchRegexp))               continue;
            }
          }
          each.testMethodName=""String_Node_Str"" + each.methodName;
          if (enabledArgs) {
            each.testMethodName+=delimiter + argsPrefix;
            if (each.argTypes.size() == 0)             each.testMethodName+=argsDelimiter;
            for (            ArgType argType : each.argTypes)             each.testMethodName+=argsDelimiter + argType.nameInMethodName;
          }
          if (enabledReturn)           each.testMethodName+=delimiter + returnPrefix + returnDelimiter+ each.returnType.nameInMethodName;
          if (target.matches(RXP_SEARCH_STATIC_METHOD))           each.isStatic=true;
          testMethods.add(each);
        }
      }
    }
  }
  finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.methods=testMethods;
  return classInfo;
}",0.9985030836476858
12060,"public static void methodStaticReturnVoid(){
}","public static void methodStaticReturnVoid(){
  new InputStream(){
    @Override public int read() throws IOException {
      return 0;
    }
  }
;
}",0.4742268041237113
12061,"/** 
 * Run method to invoked.
 * @param action
 */
public void run(IAction action){
  InputStream javaFileIStream=null;
  OutputStreamWriter testFileOSWriter=null;
  FileOutputStream fos=null;
  boolean refreshFlag=true;
  String projectName=null;
  String testCaseDirResource=null;
  String testCaseResource=null;
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseClassname=null;
    String testCaseCreateDirpath=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection)     structuredSelection=(StructuredSelection)selection;
    if (structuredSelection != null && structuredSelection.size() == 0) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,Dialog.Common.TITLE,Dialog.Common.REQUIRED);
      refreshFlag=false;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,Dialog.Common.TITLE,Dialog.Common.SELECT_ONLY_ONE);
      refreshFlag=false;
    }
 else {
      String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
      String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
      String selected=STR.EMPTY;
      int len=dirArrFromProjectRoot.length;
      for (int i=2; i < len - 1; i++)       selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
      selected+=dirArrFromProjectRoot[len - 1];
      projectName=dirArrFromProjectRoot[1];
      String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
      testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
      testCaseClassname=testTargetClassname + STR.SUFFIX_OF_TESTCASE;
      testCaseFilename=testCaseClassname + STR.JAVA_EXP;
      String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      String[] selectedDirArr=selected.split(STR.DIR_SEP);
      testCaseDirResource=""String_Node_Str"";
      int selectedDirArrLength=selectedDirArr.length;
      for (int i=0; i < selectedDirArrLength - 1; i++)       testCaseDirResource+=selectedDirArr[i] + STR.DIR_SEP;
      testCaseDirResource=testCaseDirResource.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA);
      testCaseCreateDirpath=projectRootPath + testCaseDirResource;
      File testDir=new File(testCaseCreateDirpath);
      String[] dirArr=testCaseCreateDirpath.split(STR.DIR_SEP);
      String tmpDirPath=STR.EMPTY;
      String tmpResourceDirPath=STR.EMPTY;
      for (      String each : dirArr) {
        tmpDirPath+=STR.DIR_SEP + each;
        File tmpDir=new File(tmpDirPath);
        if (tmpDir.getPath().length() <= projectRootPath.length())         continue;
        tmpResourceDirPath+=STR.DIR_SEP + each;
        if (!tmpDir.exists()) {
          if (!tmpDir.mkdir())           System.err.println(""String_Node_Str"" + tmpDir.getPath());
          if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + tmpResourceDirPath+ ""String_Node_Str"")) {
            String msg=Dialog.Common.RESOURCE_REFRESH_ERROR;
            MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,msg);
            System.err.println(""String_Node_Str"");
          }
        }
      }
      if (!testDir.mkdirs())       System.err.println(""String_Node_Str"");
      if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource)) {
        MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.RESOURCE_REFRESH_ERROR);
        System.err.println(""String_Node_Str"");
      }
      try {
        File outputFile=new File(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
        String msg=Dialog.Common.ALREADY_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ Dialog.Common.CONFIRM_PROCEED;
        if (!outputFile.exists() || MessageDialog.openConfirm(new Shell(),Dialog.Common.TITLE,msg)) {
          String targetClass=""String_Node_Str"" + projectName + ""String_Node_Str""+ selected;
          IResource targetClassResource=workspaceRoot.findMember(targetClass);
          IFile file=(IFile)targetClassResource;
          ClassInfo testClassInfo=TestCaseGenerateUtil.getTestClassInfoFromTargetClass(file);
          List<MethodInfo> testMethods=testClassInfo.methods;
          String writeEncoding=FileResourceUtil.detectEncoding(file);
          fos=new FileOutputStream(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
          testFileOSWriter=new OutputStreamWriter(fos,writeEncoding);
          StringBuilder sb=new StringBuilder();
          String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
          String testPackageString=STR.EMPTY;
          String[] tmpDirArr=selected.split(STR.DIR_SEP);
          StringBuilder dirSb=new StringBuilder();
          int packageArrLen=tmpDirArr.length - 2;
          int mainJavaLen=STR.SRC_MAIN_JAVA.split(""String_Node_Str"").length;
          for (int i=mainJavaLen; i < packageArrLen; i++) {
            dirSb.append(tmpDirArr[i]);
            dirSb.append(""String_Node_Str"");
          }
          dirSb.append(tmpDirArr[packageArrLen]);
          testPackageString=dirSb.toString();
          sb.append(""String_Node_Str"");
          sb.append(testPackageString);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          IPreferenceStore store=Activator.getDefault().getPreferenceStore();
          boolean usingJUnitHelperRuntime=store.getBoolean(Preference.TestClassGen.USING_JUNIT_HELPER_RUNTIME_LIB);
          String testCase=usingJUnitHelperRuntime ? RuntimeLibrary.TEST_CASE : store.getString(Preference.TestClassGen.CLASS_TO_EXTEND);
          String[] tmpTestCaseArr=testCase.split(""String_Node_Str"");
          String testCaseName=tmpTestCaseArr[tmpTestCaseArr.length - 1];
          sb.append(""String_Node_Str"");
          sb.append(testCase);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          boolean enabledTestMethodsGen=Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestMethodGen.ENABLE);
          boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestMethodGen.METHOD_SAMPLE_IMPL);
          if (enabledTestMethodsGen && enabledNotBlankMethods) {
            List<String> importedPackageList=testClassInfo.importList;
            for (            String importedPackage : importedPackageList) {
              sb.append(""String_Node_Str"");
              sb.append(importedPackage);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
            }
          }
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(testCaseClassname);
          sb.append(""String_Node_Str"");
          sb.append(testCaseName);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          if (enabledTestMethodsGen) {
            for (            MethodInfo testMethod : testMethods) {
              if (testMethod.testMethodName == null || testMethod.testMethodName.equals(STR.EMPTY))               continue;
              sb.append(""String_Node_Str"");
              sb.append(testMethod.testMethodName);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(""String_Node_Str"");
              sb.append(STR.AUTO_GEN_MSG_TODO);
              sb.append(CRLF);
              if (enabledNotBlankMethods) {
                String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testClassInfo,testTargetClassname);
                sb.append(notBlankSourceCode);
              }
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(CRLF);
            }
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          testFileOSWriter.write(sb.toString());
        }
      }
 catch (      FileNotFoundException fnfe) {
        fnfe.printStackTrace();
      }
 finally {
        FileResourceUtil.close(testFileOSWriter);
        FileResourceUtil.close(fos);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    FileResourceUtil.close(javaFileIStream);
    FileResourceUtil.close(testFileOSWriter);
  }
  if (refreshFlag && !ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource+ ""String_Node_Str"")) {
    MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.RESOURCE_REFRESH_ERROR);
    System.err.println(""String_Node_Str"");
  }
 else {
    int retryCount=0;
    IEditorPart editorPart=null;
    ThreadUtil.sleep(1500);
    while (true) {
      try {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        IWorkspaceRoot root=workspace.getRoot();
        IProject project=root.getProject(projectName);
        IFile testCaseFile=project.getFile(testCaseResource);
        String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        editorPart=IDE.openEditor(page,testCaseFile,editorId);
        if (editorPart == null)         throw new NullPointerException();
        break;
      }
 catch (      Exception e) {
        retryCount++;
        if (retryCount > 3)         break;
        ThreadUtil.sleep(1500);
      }
    }
    editorPart.setFocus();
  }
}","/** 
 * Run method to invoked.
 * @param action
 */
public void run(IAction action){
  PreferenceLoader pref=new PreferenceLoader();
  InputStream javaFileIStream=null;
  OutputStreamWriter testFileOSWriter=null;
  FileOutputStream fos=null;
  boolean refreshFlag=true;
  String projectName=null;
  String testCaseDirResource=null;
  String testCaseResource=null;
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseClassname=null;
    String testCaseCreateDirpath=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection)     structuredSelection=(StructuredSelection)selection;
    if (structuredSelection != null && structuredSelection.size() == 0) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,Dialog.Common.TITLE,Dialog.Common.REQUIRED);
      refreshFlag=false;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,Dialog.Common.TITLE,Dialog.Common.SELECT_ONLY_ONE);
      refreshFlag=false;
    }
 else {
      String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
      String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
      String selected=STR.EMPTY;
      int len=dirArrFromProjectRoot.length;
      for (int i=2; i < len - 1; i++)       selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
      selected+=dirArrFromProjectRoot[len - 1];
      projectName=dirArrFromProjectRoot[1];
      String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
      testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
      testCaseClassname=testTargetClassname + STR.SUFFIX_OF_TESTCASE;
      testCaseFilename=testCaseClassname + STR.JAVA_EXP;
      String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      String[] selectedDirArr=selected.split(STR.DIR_SEP);
      testCaseDirResource=""String_Node_Str"";
      int selectedDirArrLength=selectedDirArr.length;
      for (int i=0; i < selectedDirArrLength - 1; i++)       testCaseDirResource+=selectedDirArr[i] + STR.DIR_SEP;
      testCaseDirResource=testCaseDirResource.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA);
      testCaseCreateDirpath=projectRootPath + testCaseDirResource;
      File testDir=new File(testCaseCreateDirpath);
      String[] dirArr=testCaseCreateDirpath.split(STR.DIR_SEP);
      String tmpDirPath=STR.EMPTY;
      String tmpResourceDirPath=STR.EMPTY;
      for (      String each : dirArr) {
        tmpDirPath+=STR.DIR_SEP + each;
        File tmpDir=new File(tmpDirPath);
        if (tmpDir.getPath().length() <= projectRootPath.length())         continue;
        tmpResourceDirPath+=STR.DIR_SEP + each;
        if (!tmpDir.exists()) {
          if (!tmpDir.mkdir())           System.err.println(""String_Node_Str"" + tmpDir.getPath());
          if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + tmpResourceDirPath+ ""String_Node_Str"")) {
            String msg=Dialog.Common.RESOURCE_REFRESH_ERROR;
            MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,msg);
            System.err.println(""String_Node_Str"");
          }
        }
      }
      if (!testDir.mkdirs())       System.err.println(""String_Node_Str"");
      if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource)) {
        MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.RESOURCE_REFRESH_ERROR);
        System.err.println(""String_Node_Str"");
      }
      try {
        File outputFile=new File(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
        String msg=Dialog.Common.ALREADY_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ Dialog.Common.CONFIRM_PROCEED;
        if (!outputFile.exists() || MessageDialog.openConfirm(new Shell(),Dialog.Common.TITLE,msg)) {
          String targetClass=""String_Node_Str"" + projectName + ""String_Node_Str""+ selected;
          IResource targetClassResource=workspaceRoot.findMember(targetClass);
          IFile file=(IFile)targetClassResource;
          ClassInfo testClassInfo=TestCaseGenerateUtil.getTestClassInfoFromTargetClass(file);
          List<MethodInfo> testMethods=testClassInfo.methods;
          String writeEncoding=FileResourceUtil.detectEncoding(file);
          fos=new FileOutputStream(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
          testFileOSWriter=new OutputStreamWriter(fos,writeEncoding);
          StringBuilder sb=new StringBuilder();
          String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
          String testPackageString=STR.EMPTY;
          String[] tmpDirArr=selected.split(STR.DIR_SEP);
          StringBuilder dirSb=new StringBuilder();
          int packageArrLen=tmpDirArr.length - 2;
          int mainJavaLen=STR.SRC_MAIN_JAVA.split(""String_Node_Str"").length;
          for (int i=mainJavaLen; i < packageArrLen; i++) {
            dirSb.append(tmpDirArr[i]);
            dirSb.append(""String_Node_Str"");
          }
          dirSb.append(tmpDirArr[packageArrLen]);
          testPackageString=dirSb.toString();
          sb.append(""String_Node_Str"");
          sb.append(testPackageString);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          String testCase=pref.isUsingJUnitHelperRuntime ? RuntimeLibrary.TEST_CASE : pref.classToExtend;
          String[] tmpTestCaseArr=testCase.split(""String_Node_Str"");
          String testCaseName=tmpTestCaseArr[tmpTestCaseArr.length - 1];
          sb.append(""String_Node_Str"");
          sb.append(testCase);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          if (pref.isTestMethodGenEnabled && pref.isTestMethodGenNotBlankEnabled) {
            List<String> importedPackageList=testClassInfo.importList;
            for (            String importedPackage : importedPackageList) {
              sb.append(""String_Node_Str"");
              sb.append(importedPackage);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
            }
          }
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(testCaseClassname);
          if (pref.isJUnitVersion3) {
            sb.append(""String_Node_Str"");
            sb.append(testCaseName);
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          if (pref.isTestMethodGenEnabled) {
            for (            MethodInfo testMethod : testMethods) {
              if (testMethod.testMethodName == null || testMethod.testMethodName.equals(STR.EMPTY))               continue;
              if (pref.isJUnitVersion4) {
                sb.append(""String_Node_Str"");
                sb.append(CRLF);
              }
              sb.append(""String_Node_Str"");
              sb.append(testMethod.testMethodName);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(""String_Node_Str"");
              sb.append(STR.AUTO_GEN_MSG_TODO);
              sb.append(CRLF);
              if (pref.isTestMethodGenNotBlankEnabled) {
                String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testClassInfo,testTargetClassname);
                sb.append(notBlankSourceCode);
              }
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(CRLF);
            }
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          testFileOSWriter.write(sb.toString());
        }
      }
 catch (      FileNotFoundException fnfe) {
        fnfe.printStackTrace();
      }
 finally {
        FileResourceUtil.close(testFileOSWriter);
        FileResourceUtil.close(fos);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    FileResourceUtil.close(javaFileIStream);
    FileResourceUtil.close(testFileOSWriter);
  }
  if (refreshFlag && !ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource+ ""String_Node_Str"")) {
    MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.RESOURCE_REFRESH_ERROR);
    System.err.println(""String_Node_Str"");
  }
 else {
    int retryCount=0;
    IEditorPart editorPart=null;
    ThreadUtil.sleep(1500);
    while (true) {
      try {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        IWorkspaceRoot root=workspace.getRoot();
        IProject project=root.getProject(projectName);
        IFile testCaseFile=project.getFile(testCaseResource);
        String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        editorPart=IDE.openEditor(page,testCaseFile,editorId);
        if (editorPart == null)         throw new NullPointerException();
        break;
      }
 catch (      Exception e) {
        retryCount++;
        if (retryCount > 3)         break;
        ThreadUtil.sleep(1500);
      }
    }
    editorPart.setFocus();
  }
}",0.8594214229867083
12062,"public void run(IAction action){
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String projectName=null;
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseCreateFilepath=null;
    String testCaseResource=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
 else {
    }
    if (structuredSelection != null && structuredSelection.size() == 0) {
      MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.REQUIRED);
      return;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.SELECT_ONLY_ONE);
      return;
    }
    String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
    String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
    String selected=STR.EMPTY;
    int allDirLen=dirArrFromProjectRoot.length - 1;
    for (int i=2; i < allDirLen; i++)     selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
    selected+=dirArrFromProjectRoot[allDirLen];
    projectName=dirArrFromProjectRoot[1];
    String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
    testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
    testCaseFilename=testTargetClassname + STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP;
    String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
    if (testTargetClassname == null) {
      MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.SELECT_JAVA_FILE);
    }
 else {
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      testCaseCreateFilepath=projectRootPath + selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      File outputFile=new File(testCaseCreateFilepath);
      if (!outputFile.exists()) {
        boolean testClassGen=Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestClassGen.ENABLE);
        if (!testClassGen) {
          MessageDialog.openInformation(new Shell(),Dialog.Common.TITLE,Dialog.Common.NOT_CREATE_NEW_FILE);
          return;
        }
        String msg=Dialog.Common.NOT_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ Dialog.Common.COMFIRM_CREATE_NEW_FILE;
        if (testCaseFilename != null && MessageDialog.openConfirm(new Shell(),Dialog.Common.TITLE,msg)) {
          new CreateNewTestCaseAction().run(action,selection);
        }
        return;
      }
      int retryCount=0;
      IEditorPart editorPart=null;
      while (true) {
        try {
          IProject project=workspaceRoot.getProject(projectName);
          IFile testCaseFile=project.getFile(testCaseResource);
          String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          editorPart=IDE.openEditor(page,testCaseFile,editorId);
          editorPart.setFocus();
          if (Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestMethodGen.ENABLE)) {
            IFile testTargetFile=project.getFile(selected);
            ClassInfo testClassWithNotImpledMethods=TestCaseGenerateUtil.getClassInfoWithUnimplementedTestMethods(testTargetFile,testCaseFile);
            List<MethodInfo> unimpledTestMethodNames=testClassWithNotImpledMethods.methods;
            String writeEncoding=FileResourceUtil.detectEncoding(testCaseFile);
            if (unimpledTestMethodNames.size() > 0) {
              List<String> lines=TestCaseGenerateUtil.getAllSourceCodeLineList(testCaseFile);
              OutputStreamWriter testFileOSWriter=null;
              FileOutputStream fos=null;
              try {
                fos=new FileOutputStream(projectRootPath + STR.DIR_SEP + testCaseResource);
                testFileOSWriter=new OutputStreamWriter(fos,writeEncoding);
                boolean enabledTestMethodsGen=Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestMethodGen.ENABLE);
                boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestMethodGen.METHOD_SAMPLE_IMPL);
                StringBuilder sb=new StringBuilder();
                String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
                boolean isImportedTypesAdded=false;
                for (                String line : lines) {
                  if (line.equals(""String_Node_Str"") && enabledTestMethodsGen) {
                    for (                    MethodInfo testMethod : unimpledTestMethodNames) {
                      if (testMethod.testMethodName == null || testMethod.testMethodName.equals(STR.EMPTY))                       continue;
                      sb.append(""String_Node_Str"");
                      sb.append(testMethod.testMethodName);
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(""String_Node_Str"");
                      sb.append(STR.AUTO_GEN_MSG_TODO);
                      sb.append(CRLF);
                      if (enabledNotBlankMethods) {
                        String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testClassWithNotImpledMethods,testTargetClassname);
                        sb.append(notBlankSourceCode);
                      }
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(CRLF);
                    }
                    sb.append(""String_Node_Str"");
                    sb.append(CRLF);
                    break;
                  }
 else {
                    sb.append(line);
                    sb.append(CRLF);
                    if (line.matches(""String_Node_Str"") && !isImportedTypesAdded && enabledNotBlankMethods) {
                      List<String> importTypes=testClassWithNotImpledMethods.importList;
                      for (                      String importType : importTypes) {
                        if (importType.matches(""String_Node_Str""))                         continue;
                        sb.append(""String_Node_Str"");
                        sb.append(importType);
                        sb.append(""String_Node_Str"");
                        sb.append(CRLF);
                      }
                      isImportedTypesAdded=true;
                    }
                  }
                }
                String content=sb.toString();
                testFileOSWriter.write(content);
              }
  finally {
                FileResourceUtil.close(testFileOSWriter);
                FileResourceUtil.close(fos);
              }
            }
            if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseResource+ ""String_Node_Str"")) {
              MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.RESOURCE_REFRESH_ERROR);
              System.err.println(""String_Node_Str"");
            }
 else {
              retryCount=0;
              ThreadUtil.sleep(1500);
              while (true) {
                try {
                  editorPart=IDE.openEditor(page,testCaseFile,editorId);
                  if (editorPart == null)                   throw new NullPointerException();
                  break;
                }
 catch (                Exception e) {
                  retryCount++;
                  if (retryCount > 3)                   break;
                  ThreadUtil.sleep(1500);
                }
              }
              editorPart.setFocus();
            }
          }
        }
 catch (        Exception e) {
          retryCount++;
          if (retryCount > 10)           break;
          e.printStackTrace();
          ThreadUtil.sleep(1500);
        }
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void run(IAction action){
  PreferenceLoader pref=new PreferenceLoader();
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String projectName=null;
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseCreateFilepath=null;
    String testCaseResource=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
 else {
    }
    if (structuredSelection != null && structuredSelection.size() == 0) {
      MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.REQUIRED);
      return;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.SELECT_ONLY_ONE);
      return;
    }
    String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
    String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
    String selected=STR.EMPTY;
    int allDirLen=dirArrFromProjectRoot.length - 1;
    for (int i=2; i < allDirLen; i++)     selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
    selected+=dirArrFromProjectRoot[allDirLen];
    projectName=dirArrFromProjectRoot[1];
    String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
    testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
    testCaseFilename=testTargetClassname + STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP;
    String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
    if (testTargetClassname == null) {
      MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.SELECT_JAVA_FILE);
    }
 else {
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      testCaseCreateFilepath=projectRootPath + selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      File outputFile=new File(testCaseCreateFilepath);
      if (!outputFile.exists()) {
        if (!pref.isTestClassGenEnabled) {
          MessageDialog.openInformation(new Shell(),Dialog.Common.TITLE,Dialog.Common.NOT_CREATE_NEW_FILE);
          return;
        }
        String msg=Dialog.Common.NOT_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ Dialog.Common.COMFIRM_CREATE_NEW_FILE;
        if (testCaseFilename != null && MessageDialog.openConfirm(new Shell(),Dialog.Common.TITLE,msg)) {
          new CreateNewTestCaseAction().run(action,selection);
        }
        return;
      }
      int retryCount=0;
      IEditorPart editorPart=null;
      while (true) {
        try {
          IProject project=workspaceRoot.getProject(projectName);
          IFile testCaseFile=project.getFile(testCaseResource);
          String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          editorPart=IDE.openEditor(page,testCaseFile,editorId);
          editorPart.setFocus();
          if (pref.isTestMethodGenEnabled) {
            IFile testTargetFile=project.getFile(selected);
            ClassInfo testClassWithNotImpledMethods=TestCaseGenerateUtil.getClassInfoWithUnimplementedTestMethods(testTargetFile,testCaseFile);
            List<MethodInfo> unimpledTestMethodNames=testClassWithNotImpledMethods.methods;
            String writeEncoding=FileResourceUtil.detectEncoding(testCaseFile);
            if (unimpledTestMethodNames.size() > 0) {
              List<String> lines=TestCaseGenerateUtil.getAllSourceCodeLineList(testCaseFile);
              StringBuilder sb=new StringBuilder();
              String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
              boolean isImportedTypesAdded=false;
              for (              String line : lines) {
                if (line.equals(""String_Node_Str"") && pref.isTestMethodGenEnabled) {
                  for (                  MethodInfo testMethod : unimpledTestMethodNames) {
                    if (testMethod.testMethodName == null || testMethod.testMethodName.equals(STR.EMPTY)) {
                      continue;
                    }
                    if (pref.isJUnitVersion4) {
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                    }
                    sb.append(""String_Node_Str"");
                    sb.append(testMethod.testMethodName);
                    sb.append(""String_Node_Str"");
                    sb.append(CRLF);
                    sb.append(""String_Node_Str"");
                    sb.append(STR.AUTO_GEN_MSG_TODO);
                    sb.append(CRLF);
                    if (pref.isTestMethodGenNotBlankEnabled) {
                      String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testClassWithNotImpledMethods,testTargetClassname);
                      sb.append(notBlankSourceCode);
                    }
                    sb.append(""String_Node_Str"");
                    sb.append(CRLF);
                    sb.append(CRLF);
                  }
                  sb.append(""String_Node_Str"");
                  sb.append(CRLF);
                  break;
                }
 else {
                  sb.append(line);
                  sb.append(CRLF);
                  if (line.matches(""String_Node_Str"") && !isImportedTypesAdded && pref.isTestMethodGenNotBlankEnabled) {
                    List<String> importTypes=testClassWithNotImpledMethods.importList;
                    for (                    String importType : importTypes) {
                      if (importType.matches(""String_Node_Str""))                       continue;
                      sb.append(""String_Node_Str"");
                      sb.append(importType);
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                    }
                    isImportedTypesAdded=true;
                  }
                }
              }
              String content=sb.toString();
              OutputStreamWriter testFileOSWriter=null;
              FileOutputStream fos=null;
              try {
                fos=new FileOutputStream(projectRootPath + STR.DIR_SEP + testCaseResource);
                testFileOSWriter=new OutputStreamWriter(fos,writeEncoding);
                testFileOSWriter.write(content);
              }
  finally {
                FileResourceUtil.close(testFileOSWriter);
                FileResourceUtil.close(fos);
              }
            }
            if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseResource+ ""String_Node_Str"")) {
              MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.RESOURCE_REFRESH_ERROR);
              System.err.println(""String_Node_Str"");
            }
 else {
              retryCount=0;
              ThreadUtil.sleep(1500);
              while (true) {
                try {
                  editorPart=IDE.openEditor(page,testCaseFile,editorId);
                  if (editorPart == null)                   throw new NullPointerException();
                  break;
                }
 catch (                Exception e) {
                  retryCount++;
                  if (retryCount > 3)                   break;
                  ThreadUtil.sleep(1500);
                }
              }
              editorPart.setFocus();
            }
          }
        }
 catch (        Exception e) {
          retryCount++;
          if (retryCount > 10)           break;
          e.printStackTrace();
          ThreadUtil.sleep(1500);
        }
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8859665370130271
12063,"/** 
 * Run method to invoked.
 * @param action
 */
public void run(IAction action){
  InputStream javaFileIStream=null;
  OutputStreamWriter testFileOSWriter=null;
  FileOutputStream fos=null;
  boolean refreshFlag=true;
  String projectName=null;
  String testCaseDirResource=null;
  String testCaseResource=null;
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseClassname=null;
    String testCaseCreateDirpath=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection)     structuredSelection=(StructuredSelection)selection;
    if (structuredSelection != null && structuredSelection.size() == 0) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,Dialog.Common.TITLE,Dialog.Common.REQUIRED);
      refreshFlag=false;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,Dialog.Common.TITLE,Dialog.Common.SELECT_ONLY_ONE);
      refreshFlag=false;
    }
 else {
      String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
      String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
      String selected=STR.EMPTY;
      int len=dirArrFromProjectRoot.length;
      for (int i=2; i < len - 1; i++)       selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
      selected+=dirArrFromProjectRoot[len - 1];
      projectName=dirArrFromProjectRoot[1];
      String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
      testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
      testCaseClassname=testTargetClassname + STR.SUFFIX_OF_TESTCASE;
      testCaseFilename=testCaseClassname + STR.JAVA_EXP;
      String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      String[] selectedDirArr=selected.split(STR.DIR_SEP);
      testCaseDirResource=""String_Node_Str"";
      int selectedDirArrLength=selectedDirArr.length;
      for (int i=0; i < selectedDirArrLength - 1; i++)       testCaseDirResource+=selectedDirArr[i] + STR.DIR_SEP;
      testCaseDirResource=testCaseDirResource.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA);
      testCaseCreateDirpath=projectRootPath + testCaseDirResource;
      File testDir=new File(testCaseCreateDirpath);
      String[] dirArr=testCaseCreateDirpath.split(STR.DIR_SEP);
      String tmpDirPath=STR.EMPTY;
      String tmpResourceDirPath=STR.EMPTY;
      for (      String each : dirArr) {
        tmpDirPath+=STR.DIR_SEP + each;
        File tmpDir=new File(tmpDirPath);
        if (tmpDir.getPath().length() <= projectRootPath.length())         continue;
        tmpResourceDirPath+=STR.DIR_SEP + each;
        if (!tmpDir.exists()) {
          if (!tmpDir.mkdir())           System.err.println(""String_Node_Str"" + tmpDir.getPath());
          if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + tmpResourceDirPath+ ""String_Node_Str"")) {
            String msg=Dialog.Common.RESOURCE_REFRESH_ERROR;
            MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,msg);
            System.err.println(""String_Node_Str"");
          }
        }
      }
      if (!testDir.mkdirs())       System.err.println(""String_Node_Str"");
      if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource)) {
        MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.RESOURCE_REFRESH_ERROR);
        System.err.println(""String_Node_Str"");
      }
      try {
        File outputFile=new File(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
        String msg=Dialog.Common.ALREADY_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ Dialog.Common.CONFIRM_PROCEED;
        if (!outputFile.exists() || MessageDialog.openConfirm(new Shell(),Dialog.Common.TITLE,msg)) {
          String targetClass=""String_Node_Str"" + projectName + ""String_Node_Str""+ selected;
          IResource targetClassResource=workspaceRoot.findMember(targetClass);
          IFile file=(IFile)targetClassResource;
          ClassInfo testClassInfo=TestCaseGenerateUtil.getTestClassInfoFromTargetClass(file);
          List<MethodInfo> testMethods=testClassInfo.methods;
          String writeEncoding=FileResourceUtil.detectEncoding(file);
          fos=new FileOutputStream(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
          testFileOSWriter=new OutputStreamWriter(fos,writeEncoding);
          StringBuilder sb=new StringBuilder();
          String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
          String testPackageString=STR.EMPTY;
          String[] tmpDirArr=selected.split(STR.DIR_SEP);
          StringBuilder dirSb=new StringBuilder();
          int packageArrLen=tmpDirArr.length - 2;
          int mainJavaLen=STR.SRC_MAIN_JAVA.split(""String_Node_Str"").length;
          for (int i=mainJavaLen; i < packageArrLen; i++) {
            dirSb.append(tmpDirArr[i]);
            dirSb.append(""String_Node_Str"");
          }
          dirSb.append(tmpDirArr[packageArrLen]);
          testPackageString=dirSb.toString();
          sb.append(""String_Node_Str"");
          sb.append(testPackageString);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          String testCase=Activator.getDefault().getPreferenceStore().getString(Preference.TestClassGen.CLASS_TO_EXTEND);
          String[] tmpTestCaseArr=testCase.split(""String_Node_Str"");
          String testCaseName=tmpTestCaseArr[tmpTestCaseArr.length - 1];
          sb.append(""String_Node_Str"");
          sb.append(testCase);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          boolean enabledTestMethodsGen=Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestMethodGen.ENABLE);
          boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
          if (enabledTestMethodsGen && enabledNotBlankMethods) {
            List<String> importedPackageList=testClassInfo.importList;
            for (            String importedPackage : importedPackageList) {
              sb.append(""String_Node_Str"");
              sb.append(importedPackage);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
            }
          }
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(testCaseClassname);
          sb.append(""String_Node_Str"");
          sb.append(testCaseName);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          if (enabledTestMethodsGen) {
            for (            MethodInfo testMethod : testMethods) {
              if (testMethod.testMethodName == null || testMethod.testMethodName.equals(STR.EMPTY))               continue;
              sb.append(""String_Node_Str"");
              sb.append(testMethod.testMethodName);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(""String_Node_Str"");
              sb.append(STR.AUTO_GEN_MSG_TODO);
              sb.append(CRLF);
              if (enabledNotBlankMethods) {
                String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testClassInfo,testTargetClassname);
                sb.append(notBlankSourceCode);
              }
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(CRLF);
            }
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          testFileOSWriter.write(sb.toString());
        }
      }
 catch (      FileNotFoundException fnfe) {
        fnfe.printStackTrace();
      }
 finally {
        FileResourceUtil.close(testFileOSWriter);
        FileResourceUtil.close(fos);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    FileResourceUtil.close(javaFileIStream);
    FileResourceUtil.close(testFileOSWriter);
  }
  if (refreshFlag && !ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource+ ""String_Node_Str"")) {
    MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.RESOURCE_REFRESH_ERROR);
    System.err.println(""String_Node_Str"");
  }
 else {
    int retryCount=0;
    IEditorPart editorPart=null;
    ThreadUtil.sleep(1500);
    while (true) {
      try {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        IWorkspaceRoot root=workspace.getRoot();
        IProject project=root.getProject(projectName);
        IFile testCaseFile=project.getFile(testCaseResource);
        String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        editorPart=IDE.openEditor(page,testCaseFile,editorId);
        if (editorPart == null)         throw new NullPointerException();
        break;
      }
 catch (      Exception e) {
        retryCount++;
        if (retryCount > 3)         break;
        ThreadUtil.sleep(1500);
      }
    }
    editorPart.setFocus();
  }
}","/** 
 * Run method to invoked.
 * @param action
 */
public void run(IAction action){
  InputStream javaFileIStream=null;
  OutputStreamWriter testFileOSWriter=null;
  FileOutputStream fos=null;
  boolean refreshFlag=true;
  String projectName=null;
  String testCaseDirResource=null;
  String testCaseResource=null;
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseClassname=null;
    String testCaseCreateDirpath=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection)     structuredSelection=(StructuredSelection)selection;
    if (structuredSelection != null && structuredSelection.size() == 0) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,Dialog.Common.TITLE,Dialog.Common.REQUIRED);
      refreshFlag=false;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,Dialog.Common.TITLE,Dialog.Common.SELECT_ONLY_ONE);
      refreshFlag=false;
    }
 else {
      String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
      String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
      String selected=STR.EMPTY;
      int len=dirArrFromProjectRoot.length;
      for (int i=2; i < len - 1; i++)       selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
      selected+=dirArrFromProjectRoot[len - 1];
      projectName=dirArrFromProjectRoot[1];
      String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
      testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
      testCaseClassname=testTargetClassname + STR.SUFFIX_OF_TESTCASE;
      testCaseFilename=testCaseClassname + STR.JAVA_EXP;
      String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      String[] selectedDirArr=selected.split(STR.DIR_SEP);
      testCaseDirResource=""String_Node_Str"";
      int selectedDirArrLength=selectedDirArr.length;
      for (int i=0; i < selectedDirArrLength - 1; i++)       testCaseDirResource+=selectedDirArr[i] + STR.DIR_SEP;
      testCaseDirResource=testCaseDirResource.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA);
      testCaseCreateDirpath=projectRootPath + testCaseDirResource;
      File testDir=new File(testCaseCreateDirpath);
      String[] dirArr=testCaseCreateDirpath.split(STR.DIR_SEP);
      String tmpDirPath=STR.EMPTY;
      String tmpResourceDirPath=STR.EMPTY;
      for (      String each : dirArr) {
        tmpDirPath+=STR.DIR_SEP + each;
        File tmpDir=new File(tmpDirPath);
        if (tmpDir.getPath().length() <= projectRootPath.length())         continue;
        tmpResourceDirPath+=STR.DIR_SEP + each;
        if (!tmpDir.exists()) {
          if (!tmpDir.mkdir())           System.err.println(""String_Node_Str"" + tmpDir.getPath());
          if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + tmpResourceDirPath+ ""String_Node_Str"")) {
            String msg=Dialog.Common.RESOURCE_REFRESH_ERROR;
            MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,msg);
            System.err.println(""String_Node_Str"");
          }
        }
      }
      if (!testDir.mkdirs())       System.err.println(""String_Node_Str"");
      if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource)) {
        MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.RESOURCE_REFRESH_ERROR);
        System.err.println(""String_Node_Str"");
      }
      try {
        File outputFile=new File(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
        String msg=Dialog.Common.ALREADY_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ Dialog.Common.CONFIRM_PROCEED;
        if (!outputFile.exists() || MessageDialog.openConfirm(new Shell(),Dialog.Common.TITLE,msg)) {
          String targetClass=""String_Node_Str"" + projectName + ""String_Node_Str""+ selected;
          IResource targetClassResource=workspaceRoot.findMember(targetClass);
          IFile file=(IFile)targetClassResource;
          ClassInfo testClassInfo=TestCaseGenerateUtil.getTestClassInfoFromTargetClass(file);
          List<MethodInfo> testMethods=testClassInfo.methods;
          String writeEncoding=FileResourceUtil.detectEncoding(file);
          fos=new FileOutputStream(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
          testFileOSWriter=new OutputStreamWriter(fos,writeEncoding);
          StringBuilder sb=new StringBuilder();
          String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
          String testPackageString=STR.EMPTY;
          String[] tmpDirArr=selected.split(STR.DIR_SEP);
          StringBuilder dirSb=new StringBuilder();
          int packageArrLen=tmpDirArr.length - 2;
          int mainJavaLen=STR.SRC_MAIN_JAVA.split(""String_Node_Str"").length;
          for (int i=mainJavaLen; i < packageArrLen; i++) {
            dirSb.append(tmpDirArr[i]);
            dirSb.append(""String_Node_Str"");
          }
          dirSb.append(tmpDirArr[packageArrLen]);
          testPackageString=dirSb.toString();
          sb.append(""String_Node_Str"");
          sb.append(testPackageString);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          String testCase=Activator.getDefault().getPreferenceStore().getString(Preference.TestClassGen.CLASS_TO_EXTEND);
          String[] tmpTestCaseArr=testCase.split(""String_Node_Str"");
          String testCaseName=tmpTestCaseArr[tmpTestCaseArr.length - 1];
          sb.append(""String_Node_Str"");
          sb.append(testCase);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          boolean enabledTestMethodsGen=Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestMethodGen.ENABLE);
          boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestMethodGen.METHOD_SAMPLE_IMPL);
          if (enabledTestMethodsGen && enabledNotBlankMethods) {
            List<String> importedPackageList=testClassInfo.importList;
            for (            String importedPackage : importedPackageList) {
              sb.append(""String_Node_Str"");
              sb.append(importedPackage);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
            }
          }
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(testCaseClassname);
          sb.append(""String_Node_Str"");
          sb.append(testCaseName);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          if (enabledTestMethodsGen) {
            for (            MethodInfo testMethod : testMethods) {
              if (testMethod.testMethodName == null || testMethod.testMethodName.equals(STR.EMPTY))               continue;
              sb.append(""String_Node_Str"");
              sb.append(testMethod.testMethodName);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(""String_Node_Str"");
              sb.append(STR.AUTO_GEN_MSG_TODO);
              sb.append(CRLF);
              if (enabledNotBlankMethods) {
                String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testClassInfo,testTargetClassname);
                sb.append(notBlankSourceCode);
              }
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(CRLF);
            }
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          testFileOSWriter.write(sb.toString());
        }
      }
 catch (      FileNotFoundException fnfe) {
        fnfe.printStackTrace();
      }
 finally {
        FileResourceUtil.close(testFileOSWriter);
        FileResourceUtil.close(fos);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    FileResourceUtil.close(javaFileIStream);
    FileResourceUtil.close(testFileOSWriter);
  }
  if (refreshFlag && !ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource+ ""String_Node_Str"")) {
    MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.RESOURCE_REFRESH_ERROR);
    System.err.println(""String_Node_Str"");
  }
 else {
    int retryCount=0;
    IEditorPart editorPart=null;
    ThreadUtil.sleep(1500);
    while (true) {
      try {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        IWorkspaceRoot root=workspace.getRoot();
        IProject project=root.getProject(projectName);
        IFile testCaseFile=project.getFile(testCaseResource);
        String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        editorPart=IDE.openEditor(page,testCaseFile,editorId);
        if (editorPart == null)         throw new NullPointerException();
        break;
      }
 catch (      Exception e) {
        retryCount++;
        if (retryCount > 3)         break;
        ThreadUtil.sleep(1500);
      }
    }
    editorPart.setFocus();
  }
}",0.9994735733838704
12064,"public void run(IAction action){
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String projectName=null;
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseCreateFilepath=null;
    String testCaseResource=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
 else {
    }
    if (structuredSelection != null && structuredSelection.size() == 0) {
      MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.REQUIRED);
      return;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.SELECT_ONLY_ONE);
      return;
    }
    String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
    String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
    String selected=STR.EMPTY;
    int allDirLen=dirArrFromProjectRoot.length - 1;
    for (int i=2; i < allDirLen; i++)     selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
    selected+=dirArrFromProjectRoot[allDirLen];
    projectName=dirArrFromProjectRoot[1];
    String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
    testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
    testCaseFilename=testTargetClassname + STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP;
    String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
    if (testTargetClassname == null) {
      MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.SELECT_JAVA_FILE);
    }
 else {
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      testCaseCreateFilepath=projectRootPath + selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      File outputFile=new File(testCaseCreateFilepath);
      if (!outputFile.exists()) {
        boolean testClassGen=Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestClassGen.ENABLE);
        if (!testClassGen) {
          MessageDialog.openInformation(new Shell(),Dialog.Common.TITLE,Dialog.Common.NOT_CREATE_NEW_FILE);
          return;
        }
        String msg=Dialog.Common.NOT_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ Dialog.Common.COMFIRM_CREATE_NEW_FILE;
        if (testCaseFilename != null && MessageDialog.openConfirm(new Shell(),Dialog.Common.TITLE,msg)) {
          new CreateNewTestCaseAction().run(action,selection);
        }
        return;
      }
      int retryCount=0;
      IEditorPart editorPart=null;
      while (true) {
        try {
          IProject project=workspaceRoot.getProject(projectName);
          IFile testCaseFile=project.getFile(testCaseResource);
          String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          editorPart=IDE.openEditor(page,testCaseFile,editorId);
          editorPart.setFocus();
          if (Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestMethodGen.ENABLE)) {
            IFile testTargetFile=project.getFile(selected);
            ClassInfo testClassWithNotImpledMethods=TestCaseGenerateUtil.getClassInfoWithUnimplementedTestMethods(testTargetFile,testCaseFile);
            List<MethodInfo> unimpledTestMethodNames=testClassWithNotImpledMethods.methods;
            String writeEncoding=FileResourceUtil.detectEncoding(testCaseFile);
            if (unimpledTestMethodNames.size() > 0) {
              List<String> lines=TestCaseGenerateUtil.getAllSourceCodeLineList(testCaseFile);
              OutputStreamWriter testFileOSWriter=null;
              FileOutputStream fos=null;
              try {
                fos=new FileOutputStream(projectRootPath + STR.DIR_SEP + testCaseResource);
                testFileOSWriter=new OutputStreamWriter(fos,writeEncoding);
                boolean enabledTestMethodsGen=Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestMethodGen.ENABLE);
                boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
                StringBuilder sb=new StringBuilder();
                String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
                boolean isImportedTypesAdded=false;
                for (                String line : lines) {
                  if (line.equals(""String_Node_Str"") && enabledTestMethodsGen) {
                    for (                    MethodInfo testMethod : unimpledTestMethodNames) {
                      if (testMethod.testMethodName == null || testMethod.testMethodName.equals(STR.EMPTY))                       continue;
                      sb.append(""String_Node_Str"");
                      sb.append(testMethod.testMethodName);
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(""String_Node_Str"");
                      sb.append(STR.AUTO_GEN_MSG_TODO);
                      sb.append(CRLF);
                      if (enabledNotBlankMethods) {
                        String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testClassWithNotImpledMethods,testTargetClassname);
                        sb.append(notBlankSourceCode);
                      }
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(CRLF);
                    }
                    sb.append(""String_Node_Str"");
                    sb.append(CRLF);
                    break;
                  }
 else {
                    sb.append(line);
                    sb.append(CRLF);
                    if (line.matches(""String_Node_Str"") && !isImportedTypesAdded && enabledNotBlankMethods) {
                      List<String> importTypes=testClassWithNotImpledMethods.importList;
                      for (                      String importType : importTypes) {
                        if (importType.matches(""String_Node_Str""))                         continue;
                        sb.append(""String_Node_Str"");
                        sb.append(importType);
                        sb.append(""String_Node_Str"");
                        sb.append(CRLF);
                      }
                      isImportedTypesAdded=true;
                    }
                  }
                }
                String content=sb.toString();
                testFileOSWriter.write(content);
              }
  finally {
                FileResourceUtil.close(testFileOSWriter);
                FileResourceUtil.close(fos);
              }
            }
            if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseResource+ ""String_Node_Str"")) {
              MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.RESOURCE_REFRESH_ERROR);
              System.err.println(""String_Node_Str"");
            }
 else {
              retryCount=0;
              ThreadUtil.sleep(1500);
              while (true) {
                try {
                  editorPart=IDE.openEditor(page,testCaseFile,editorId);
                  if (editorPart == null)                   throw new NullPointerException();
                  break;
                }
 catch (                Exception e) {
                  retryCount++;
                  if (retryCount > 3)                   break;
                  ThreadUtil.sleep(1500);
                }
              }
              editorPart.setFocus();
            }
          }
        }
 catch (        Exception e) {
          retryCount++;
          if (retryCount > 10)           break;
          e.printStackTrace();
          ThreadUtil.sleep(1500);
        }
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void run(IAction action){
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String projectName=null;
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseCreateFilepath=null;
    String testCaseResource=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
 else {
    }
    if (structuredSelection != null && structuredSelection.size() == 0) {
      MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.REQUIRED);
      return;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.SELECT_ONLY_ONE);
      return;
    }
    String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
    String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
    String selected=STR.EMPTY;
    int allDirLen=dirArrFromProjectRoot.length - 1;
    for (int i=2; i < allDirLen; i++)     selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
    selected+=dirArrFromProjectRoot[allDirLen];
    projectName=dirArrFromProjectRoot[1];
    String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
    testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
    testCaseFilename=testTargetClassname + STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP;
    String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
    if (testTargetClassname == null) {
      MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.SELECT_JAVA_FILE);
    }
 else {
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      testCaseCreateFilepath=projectRootPath + selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      File outputFile=new File(testCaseCreateFilepath);
      if (!outputFile.exists()) {
        boolean testClassGen=Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestClassGen.ENABLE);
        if (!testClassGen) {
          MessageDialog.openInformation(new Shell(),Dialog.Common.TITLE,Dialog.Common.NOT_CREATE_NEW_FILE);
          return;
        }
        String msg=Dialog.Common.NOT_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ Dialog.Common.COMFIRM_CREATE_NEW_FILE;
        if (testCaseFilename != null && MessageDialog.openConfirm(new Shell(),Dialog.Common.TITLE,msg)) {
          new CreateNewTestCaseAction().run(action,selection);
        }
        return;
      }
      int retryCount=0;
      IEditorPart editorPart=null;
      while (true) {
        try {
          IProject project=workspaceRoot.getProject(projectName);
          IFile testCaseFile=project.getFile(testCaseResource);
          String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          editorPart=IDE.openEditor(page,testCaseFile,editorId);
          editorPart.setFocus();
          if (Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestMethodGen.ENABLE)) {
            IFile testTargetFile=project.getFile(selected);
            ClassInfo testClassWithNotImpledMethods=TestCaseGenerateUtil.getClassInfoWithUnimplementedTestMethods(testTargetFile,testCaseFile);
            List<MethodInfo> unimpledTestMethodNames=testClassWithNotImpledMethods.methods;
            String writeEncoding=FileResourceUtil.detectEncoding(testCaseFile);
            if (unimpledTestMethodNames.size() > 0) {
              List<String> lines=TestCaseGenerateUtil.getAllSourceCodeLineList(testCaseFile);
              OutputStreamWriter testFileOSWriter=null;
              FileOutputStream fos=null;
              try {
                fos=new FileOutputStream(projectRootPath + STR.DIR_SEP + testCaseResource);
                testFileOSWriter=new OutputStreamWriter(fos,writeEncoding);
                boolean enabledTestMethodsGen=Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestMethodGen.ENABLE);
                boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestMethodGen.METHOD_SAMPLE_IMPL);
                StringBuilder sb=new StringBuilder();
                String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
                boolean isImportedTypesAdded=false;
                for (                String line : lines) {
                  if (line.equals(""String_Node_Str"") && enabledTestMethodsGen) {
                    for (                    MethodInfo testMethod : unimpledTestMethodNames) {
                      if (testMethod.testMethodName == null || testMethod.testMethodName.equals(STR.EMPTY))                       continue;
                      sb.append(""String_Node_Str"");
                      sb.append(testMethod.testMethodName);
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(""String_Node_Str"");
                      sb.append(STR.AUTO_GEN_MSG_TODO);
                      sb.append(CRLF);
                      if (enabledNotBlankMethods) {
                        String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testClassWithNotImpledMethods,testTargetClassname);
                        sb.append(notBlankSourceCode);
                      }
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(CRLF);
                    }
                    sb.append(""String_Node_Str"");
                    sb.append(CRLF);
                    break;
                  }
 else {
                    sb.append(line);
                    sb.append(CRLF);
                    if (line.matches(""String_Node_Str"") && !isImportedTypesAdded && enabledNotBlankMethods) {
                      List<String> importTypes=testClassWithNotImpledMethods.importList;
                      for (                      String importType : importTypes) {
                        if (importType.matches(""String_Node_Str""))                         continue;
                        sb.append(""String_Node_Str"");
                        sb.append(importType);
                        sb.append(""String_Node_Str"");
                        sb.append(CRLF);
                      }
                      isImportedTypesAdded=true;
                    }
                  }
                }
                String content=sb.toString();
                testFileOSWriter.write(content);
              }
  finally {
                FileResourceUtil.close(testFileOSWriter);
                FileResourceUtil.close(fos);
              }
            }
            if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseResource+ ""String_Node_Str"")) {
              MessageDialog.openWarning(new Shell(),Dialog.Common.TITLE,Dialog.Common.RESOURCE_REFRESH_ERROR);
              System.err.println(""String_Node_Str"");
            }
 else {
              retryCount=0;
              ThreadUtil.sleep(1500);
              while (true) {
                try {
                  editorPart=IDE.openEditor(page,testCaseFile,editorId);
                  if (editorPart == null)                   throw new NullPointerException();
                  break;
                }
 catch (                Exception e) {
                  retryCount++;
                  if (retryCount > 3)                   break;
                  ThreadUtil.sleep(1500);
                }
              }
              editorPart.setFocus();
            }
          }
        }
 catch (        Exception e) {
          retryCount++;
          if (retryCount > 10)           break;
          e.printStackTrace();
          ThreadUtil.sleep(1500);
        }
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9993932038834952
12065,"/** 
 * Create field editors
 */
@Override protected void createFieldEditors(){
{
    Composite parent=getFieldEditorParent();
    Group commonPrentGroup=new Group(parent,0);
{
      FillLayout parentLayout=new FillLayout(256);
      parentLayout.marginHeight=2;
      parentLayout.marginWidth=4;
      commonPrentGroup.setLayout(parentLayout);
      commonPrentGroup.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      commonPrentGroup.setLayoutData(gd);
      Composite grp=new Composite(commonPrentGroup,0);
      grp.setLayout(new GridLayout(2,false));
      Label label=new Label(grp,0);
      label.setText(""String_Node_Str"");
      gd=new GridData(768);
      gd.horizontalSpan=2;
      label.setLayoutData(gd);
      addField(new StringFieldEditor(Preference.Common.SRC_MAIN_PATH,Preference.Common.SRC_MAIN_PATH,grp));
      addField(new StringFieldEditor(Preference.Common.SRC_TEST_PATH,Preference.Common.SRC_TEST_PATH,grp));
    }
    tcgEnable=new BooleanFieldEditor(Preference.TestClassGen.ENABLE,Preference.TestClassGen.ENABLE,parent);
    addField(tcgEnable);
    Group classConfigGroup=new Group(parent,0);
{
      FillLayout parentLayout=new FillLayout(256);
      parentLayout.marginHeight=2;
      parentLayout.marginWidth=4;
      classConfigGroup.setLayout(parentLayout);
      classConfigGroup.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      classConfigGroup.setLayoutData(gd);
      tcgArea=new Composite(classConfigGroup,0);
      tcgArea.setLayout(new GridLayout(2,false));
      tcgClassToExtend=new StringFieldEditor(Preference.TestClassGen.CLASS_TO_EXTEND,Preference.TestClassGen.CLASS_TO_EXTEND,tcgArea);
      addField(tcgClassToExtend);
    }
    tmgEnable=new BooleanFieldEditor(Preference.TestMethodGen.ENABLE,Preference.TestMethodGen.ENABLE,parent){
      @Override protected void valueChanged(      boolean oldValue,      boolean newValue){
        super.valueChanged(oldValue,newValue);
        switchDisplayOfTestMethodsGenArea(newValue);
      }
      @Override protected void doLoad(){
        super.doLoad();
        switchDisplayOfTestMethodsGenArea(getBooleanValue());
      }
      @Override protected void doLoadDefault(){
        super.doLoadDefault();
        switchDisplayOfTestMethodsGenArea(getBooleanValue());
      }
    }
;
    addField(tmgEnable);
    tmgParentGroup=new Group(parent,0);
{
      FillLayout parentLayout=new FillLayout(256);
      parentLayout.marginHeight=4;
      parentLayout.marginWidth=4;
      tmgParentGroup.setLayout(parentLayout);
      tmgParentGroup.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      tmgParentGroup.setLayoutData(gd);
      tmgArea=new Composite(tmgParentGroup,0);
      GridLayout layout=new GridLayout(2,false);
      layout.marginHeight=4;
      layout.marginWidth=4;
      tmgArea.setLayout(layout);
{
        tmgCOmmonExecludesAccessors=new BooleanFieldEditor(Preference.TestMethodGen.EXLCUDES_ACCESSORS,Preference.TestMethodGen.EXLCUDES_ACCESSORS,tmgArea);
        addField(tmgCOmmonExecludesAccessors);
      }
{
        tmgCommonDelimiter=new StringFieldEditor(Preference.TestMethodGen.DELIMITER,Preference.TestMethodGen.DELIMITER,10,tmgArea);
        addField(tmgCommonDelimiter);
      }
    }
{
      tmgEnableArgs=new BooleanFieldEditor(Preference.TestMethodGen.ARGS,Preference.TestMethodGen.ARGS,tmgParentGroup){
        @Override protected void valueChanged(        boolean oldValue,        boolean newValue){
          super.valueChanged(oldValue,newValue);
          switchDisplayOfMethodArgsArea(newValue);
        }
        @Override protected void doLoad(){
          super.doLoad();
          switchDisplayOfMethodArgsArea(getBooleanValue());
        }
        @Override protected void doLoadDefault(){
          super.doLoadDefault();
          switchDisplayOfMethodArgsArea(getBooleanValue());
        }
      }
;
      addField(tmgEnableArgs);
      Group group=new Group(tmgParentGroup,0);
      FillLayout layout=new FillLayout(256);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      tmgEnableArgsArea=new Composite(group,0);
      tmgEnableArgsArea.setLayout(new GridLayout(2,false));
      tmgArgsPrefix=new StringFieldEditor(Preference.TestMethodGen.ARGS_PREFIX,Preference.TestMethodGen.ARGS_PREFIX,tmgEnableArgsArea);
      addField(tmgArgsPrefix);
      tmgArgsDelimiter=new StringFieldEditor(Preference.TestMethodGen.ARGS_DELIMITER,Preference.TestMethodGen.ARGS_DELIMITER,tmgEnableArgsArea);
      addField(tmgArgsDelimiter);
    }
{
      tmgEnableReturn=new BooleanFieldEditor(Preference.TestMethodGen.RETURN,Preference.TestMethodGen.RETURN,tmgParentGroup){
        @Override protected void valueChanged(        boolean oldValue,        boolean newValue){
          super.valueChanged(oldValue,newValue);
          switchDisplayOfMethodReturnArea(newValue);
        }
        @Override protected void doLoad(){
          super.doLoad();
          switchDisplayOfMethodReturnArea(getBooleanValue());
        }
        @Override protected void doLoadDefault(){
          super.doLoadDefault();
          switchDisplayOfMethodReturnArea(getBooleanValue());
        }
      }
;
      addField(tmgEnableReturn);
      Group group=new Group(tmgParentGroup,0);
      FillLayout layout=new FillLayout(256);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      tmgReturnArea=new Composite(group,0);
      tmgReturnArea.setLayout(new GridLayout(2,false));
      tmgReturnPrefix=new StringFieldEditor(Preference.TestMethodGen.RETURN_PREFIX,Preference.TestMethodGen.RETURN_PREFIX,tmgReturnArea);
      addField(tmgReturnPrefix);
      tmgReturnDelimiter=new StringFieldEditor(Preference.TestMethodGen.RETURN_DELIMITER,Preference.TestMethodGen.RETURN_DELIMITER,tmgReturnArea);
      addField(tmgReturnDelimiter);
    }
{
      tmgEnableGenerateSample=new BooleanFieldEditor(Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION,Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION,tmgParentGroup){
        @Override protected void valueChanged(        boolean oldValue,        boolean newValue){
          super.valueChanged(oldValue,newValue);
          switchDisplayOfSampleImplGenArea(newValue);
        }
        @Override protected void doLoad(){
          super.doLoad();
          switchDisplayOfSampleImplGenArea(getBooleanValue());
        }
        @Override protected void doLoadDefault(){
          super.doLoadDefault();
          switchDisplayOfSampleImplGenArea(getBooleanValue());
        }
      }
;
      addField(tmgEnableGenerateSample);
      Group group=new Group(tmgParentGroup,0);
      FillLayout layout=new FillLayout(768);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(350);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      tmgSampleImplGenArea=new Composite(group,0);
      tmgSampleImplGenArea.setLayout(new GridLayout(2,false));
      String none=Preference.TestMethodGen.USING_MOCK_NONE;
      String easyMock=Preference.TestMethodGen.USING_MOCK_EASYMOCK;
      String jmock2=Preference.TestMethodGen.USING_MOCK_JMOCK2;
      String[][] labelAndValues=new String[][]{{none,none},{easyMock,easyMock},{jmock2,jmock2}};
      tmgRadioGroupMocks=new RadioGroupFieldEditor(Preference.TestMethodGen.USING_MOCK,""String_Node_Str"",3,labelAndValues,tmgSampleImplGenArea);
      addField(tmgRadioGroupMocks);
    }
  }
}","/** 
 * Create field editors
 */
@Override protected void createFieldEditors(){
{
    Composite parent=getFieldEditorParent();
    Group commonPrentGroup=new Group(parent,0);
{
      FillLayout parentLayout=new FillLayout(256);
      parentLayout.marginHeight=2;
      parentLayout.marginWidth=4;
      commonPrentGroup.setLayout(parentLayout);
      commonPrentGroup.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      commonPrentGroup.setLayoutData(gd);
      Composite grp=new Composite(commonPrentGroup,0);
      grp.setLayout(new GridLayout(2,false));
      Label label=new Label(grp,0);
      label.setText(""String_Node_Str"");
      gd=new GridData(768);
      gd.horizontalSpan=2;
      label.setLayoutData(gd);
      addField(new StringFieldEditor(Preference.Common.SRC_MAIN_PATH,Preference.Common.SRC_MAIN_PATH,grp));
      addField(new StringFieldEditor(Preference.Common.SRC_TEST_PATH,Preference.Common.SRC_TEST_PATH,grp));
    }
    tcgEnable=new BooleanFieldEditor(Preference.TestClassGen.ENABLE,Preference.TestClassGen.ENABLE,parent);
    addField(tcgEnable);
    Group classConfigGroup=new Group(parent,0);
{
      FillLayout parentLayout=new FillLayout(256);
      parentLayout.marginHeight=2;
      parentLayout.marginWidth=4;
      classConfigGroup.setLayout(parentLayout);
      classConfigGroup.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      classConfigGroup.setLayoutData(gd);
      tcgArea=new Composite(classConfigGroup,0);
      tcgArea.setLayout(new GridLayout(2,false));
      tcgClassToExtend=new StringFieldEditor(Preference.TestClassGen.CLASS_TO_EXTEND,Preference.TestClassGen.CLASS_TO_EXTEND,tcgArea);
      addField(tcgClassToExtend);
    }
    tmgEnable=new BooleanFieldEditor(Preference.TestMethodGen.ENABLE,Preference.TestMethodGen.ENABLE,parent){
      @Override protected void valueChanged(      boolean oldValue,      boolean newValue){
        super.valueChanged(oldValue,newValue);
        switchDisplayOfTestMethodsGenArea(newValue);
      }
      @Override protected void doLoad(){
        super.doLoad();
        switchDisplayOfTestMethodsGenArea(getBooleanValue());
      }
      @Override protected void doLoadDefault(){
        super.doLoadDefault();
        switchDisplayOfTestMethodsGenArea(getBooleanValue());
      }
    }
;
    addField(tmgEnable);
    tmgParentGroup=new Group(parent,0);
{
      FillLayout parentLayout=new FillLayout(256);
      parentLayout.marginHeight=4;
      parentLayout.marginWidth=4;
      tmgParentGroup.setLayout(parentLayout);
      tmgParentGroup.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      tmgParentGroup.setLayoutData(gd);
      tmgArea=new Composite(tmgParentGroup,0);
      GridLayout layout=new GridLayout(2,false);
      layout.marginHeight=4;
      layout.marginWidth=4;
      tmgArea.setLayout(layout);
{
        tmgCOmmonExecludesAccessors=new BooleanFieldEditor(Preference.TestMethodGen.EXLCUDES_ACCESSORS,Preference.TestMethodGen.EXLCUDES_ACCESSORS,tmgArea);
        addField(tmgCOmmonExecludesAccessors);
      }
{
        tmgCommonDelimiter=new StringFieldEditor(Preference.TestMethodGen.DELIMITER,Preference.TestMethodGen.DELIMITER,10,tmgArea);
        addField(tmgCommonDelimiter);
      }
    }
{
      tmgEnableArgs=new BooleanFieldEditor(Preference.TestMethodGen.ARGS,Preference.TestMethodGen.ARGS,tmgParentGroup){
        @Override protected void valueChanged(        boolean oldValue,        boolean newValue){
          super.valueChanged(oldValue,newValue);
          switchDisplayOfMethodArgsArea(newValue);
        }
        @Override protected void doLoad(){
          super.doLoad();
          switchDisplayOfMethodArgsArea(getBooleanValue());
        }
        @Override protected void doLoadDefault(){
          super.doLoadDefault();
          switchDisplayOfMethodArgsArea(getBooleanValue());
        }
      }
;
      addField(tmgEnableArgs);
      Group group=new Group(tmgParentGroup,0);
      FillLayout layout=new FillLayout(256);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      tmgEnableArgsArea=new Composite(group,0);
      tmgEnableArgsArea.setLayout(new GridLayout(2,false));
      tmgArgsPrefix=new StringFieldEditor(Preference.TestMethodGen.ARGS_PREFIX,Preference.TestMethodGen.ARGS_PREFIX,tmgEnableArgsArea);
      addField(tmgArgsPrefix);
      tmgArgsDelimiter=new StringFieldEditor(Preference.TestMethodGen.ARGS_DELIMITER,Preference.TestMethodGen.ARGS_DELIMITER,tmgEnableArgsArea);
      addField(tmgArgsDelimiter);
    }
{
      tmgEnableReturn=new BooleanFieldEditor(Preference.TestMethodGen.RETURN,Preference.TestMethodGen.RETURN,tmgParentGroup){
        @Override protected void valueChanged(        boolean oldValue,        boolean newValue){
          super.valueChanged(oldValue,newValue);
          switchDisplayOfMethodReturnArea(newValue);
        }
        @Override protected void doLoad(){
          super.doLoad();
          switchDisplayOfMethodReturnArea(getBooleanValue());
        }
        @Override protected void doLoadDefault(){
          super.doLoadDefault();
          switchDisplayOfMethodReturnArea(getBooleanValue());
        }
      }
;
      addField(tmgEnableReturn);
      Group group=new Group(tmgParentGroup,0);
      FillLayout layout=new FillLayout(256);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      tmgReturnArea=new Composite(group,0);
      tmgReturnArea.setLayout(new GridLayout(2,false));
      tmgReturnPrefix=new StringFieldEditor(Preference.TestMethodGen.RETURN_PREFIX,Preference.TestMethodGen.RETURN_PREFIX,tmgReturnArea);
      addField(tmgReturnPrefix);
      tmgReturnDelimiter=new StringFieldEditor(Preference.TestMethodGen.RETURN_DELIMITER,Preference.TestMethodGen.RETURN_DELIMITER,tmgReturnArea);
      addField(tmgReturnDelimiter);
    }
{
      tmgEnableGenerateSample=new BooleanFieldEditor(Preference.TestMethodGen.METHOD_SAMPLE_IMPL,Preference.TestMethodGen.METHOD_SAMPLE_IMPL,tmgParentGroup){
        @Override protected void valueChanged(        boolean oldValue,        boolean newValue){
          super.valueChanged(oldValue,newValue);
          switchDisplayOfSampleImplGenArea(newValue);
        }
        @Override protected void doLoad(){
          super.doLoad();
          switchDisplayOfSampleImplGenArea(getBooleanValue());
        }
        @Override protected void doLoadDefault(){
          super.doLoadDefault();
          switchDisplayOfSampleImplGenArea(getBooleanValue());
        }
      }
;
      addField(tmgEnableGenerateSample);
      Group group=new Group(tmgParentGroup,0);
      FillLayout layout=new FillLayout(768);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(350);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      tmgSampleImplGenArea=new Composite(group,0);
      tmgSampleImplGenArea.setLayout(new GridLayout(2,false));
      String none=Preference.TestMethodGen.USING_MOCK_NONE;
      String easyMock=Preference.TestMethodGen.USING_MOCK_EASYMOCK;
      String jmock2=Preference.TestMethodGen.USING_MOCK_JMOCK2;
      String[][] labelAndValues=new String[][]{{none,none},{easyMock,easyMock},{jmock2,jmock2}};
      tmgRadioGroupMocks=new RadioGroupFieldEditor(Preference.TestMethodGen.USING_MOCK,""String_Node_Str"",3,labelAndValues,tmgSampleImplGenArea);
      addField(tmgRadioGroupMocks);
    }
  }
}",0.9987166324435318
12066,"@Override public void initializeDefaultPreferences(){
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
{
    store.setDefault(Preference.Common.SRC_MAIN_PATH,""String_Node_Str"");
    store.setDefault(Preference.Common.SRC_TEST_PATH,""String_Node_Str"");
  }
{
    store.setDefault(Preference.TestClassGen.ENABLE,true);
    store.setDefault(Preference.TestClassGen.CLASS_TO_EXTEND,""String_Node_Str"");
  }
{
    store.setDefault(Preference.TestMethodGen.ENABLE,true);
    store.setDefault(Preference.TestMethodGen.DELIMITER,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.ARGS,true);
    store.setDefault(Preference.TestMethodGen.ARGS_PREFIX,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.ARGS_DELIMITER,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.RETURN,false);
    store.setDefault(Preference.TestMethodGen.RETURN_PREFIX,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.RETURN_DELIMITER,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.EXLCUDES_ACCESSORS,true);
    store.setDefault(Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION,true);
    store.setDefault(Preference.TestMethodGen.USING_MOCK,""String_Node_Str"");
  }
}","@Override public void initializeDefaultPreferences(){
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
{
    store.setDefault(Preference.Common.SRC_MAIN_PATH,""String_Node_Str"");
    store.setDefault(Preference.Common.SRC_TEST_PATH,""String_Node_Str"");
  }
{
    store.setDefault(Preference.TestClassGen.ENABLE,true);
    store.setDefault(Preference.TestClassGen.CLASS_TO_EXTEND,""String_Node_Str"");
  }
{
    store.setDefault(Preference.TestMethodGen.ENABLE,true);
    store.setDefault(Preference.TestMethodGen.EXLCUDES_ACCESSORS,true);
    store.setDefault(Preference.TestMethodGen.DELIMITER,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.ARGS,true);
    store.setDefault(Preference.TestMethodGen.ARGS_PREFIX,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.ARGS_DELIMITER,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.RETURN,false);
    store.setDefault(Preference.TestMethodGen.RETURN_PREFIX,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.RETURN_DELIMITER,""String_Node_Str"");
    store.setDefault(Preference.TestMethodGen.METHOD_SAMPLE_IMPL,true);
    store.setDefault(Preference.TestMethodGen.USING_MOCK,""String_Node_Str"");
  }
}",0.5762987012987013
12067,"/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param javaFile
 * @return the information on the test methods
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(IFile javaFile) throws Exception {
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  boolean enabled=store.getBoolean(Preference.TestMethodGen.ENABLE);
  if (enabled) {
    return classInfo;
  }
  boolean enabledArgs=store.getBoolean(Preference.TestMethodGen.ARGS);
  boolean enabledReturn=store.getBoolean(Preference.TestMethodGen.RETURN);
  boolean enabledNotBlankMethods=store.getBoolean(Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
  boolean enableExcludesAccessors=store.getBoolean(Preference.TestMethodGen.EXLCUDES_ACCESSORS);
  boolean enabledSupportJMock2=MockGenUtil.isUsingJMock2(store);
  boolean enabledSupportEasyMock=MockGenUtil.isUsingEasyMock(store);
  String delimiter=store.getString(Preference.TestMethodGen.DELIMITER);
  String argsPrefix=store.getString(Preference.TestMethodGen.ARGS_PREFIX);
  String argsDelimiter=store.getString(Preference.TestMethodGen.ARGS_DELIMITER);
  String returnPrefix=store.getString(Preference.TestMethodGen.RETURN_PREFIX);
  String returnDelimiter=store.getString(Preference.TestMethodGen.RETURN_DELIMITER);
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=javaFile.getContents();
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null)     tmpsb.append(line + ""String_Node_Str"");
    String targetClassSourceStr=tmpsb.toString();
    if (enabledNotBlankMethods) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importStartLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importStartLine : importStartLines) {
        if (!importStartLine.matches(""String_Node_Str"")) {
          String importedPackage=importStartLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      if (enabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (enabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
    }
    String[] targets=targetClassSourceStr.split(""String_Node_Str"");
    for (    String target : targets) {
      target=target.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (target.matches(RXP_SEARCH_METHOD)) {
        Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(target);
        if (matcher.find()) {
          MethodInfo each=new MethodInfo();
          if (enabledNotBlankMethods || enabledReturn) {
            String returnTypeFull=getType(matcher.group(1));
            Matcher toGenericsMatcher=Pattern.compile(RXP_GENERICS_PART_GROUP).matcher(returnTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"");
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,STR.EMPTY,new ArrayList<String>());
                each.returnType.generics.add(generic);
              }
            }
            each.returnType.name=returnTypeFull.replace(RXP_GENERICS_PART,STR.EMPTY);
            each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
          }
          each.methodName=matcher.group(2);
          String args=matcher.group(3);
          String[] tmpArr=args.split(""String_Node_Str"");
          int tmpArrLen=tmpArr.length;
          List<String> tmpArrList=new ArrayList<String>();
          String buf=STR.EMPTY;
          for (int i=0; i < tmpArrLen; i++) {
            String element=tmpArr[i].trim();
            if (element.matches(""String_Node_Str"")) {
              tmpArrList.add(element);
              continue;
            }
            if (element.matches(""String_Node_Str"")) {
              buf+=element;
              continue;
            }
            if (element.matches(""String_Node_Str"")) {
              String result=buf + STR.COMMA + element;
              tmpArrList.add(result);
              buf=STR.EMPTY;
              continue;
            }
            if (!buf.equals(STR.EMPTY)) {
              buf+=STR.COMMA + element;
              continue;
            }
            tmpArrList.add(element);
          }
          String[] argArr=tmpArrList.toArray(new String[0]);
          if (enabledNotBlankMethods || enabledArgs) {
            int argArrLen=argArr.length;
            for (int i=0; i < argArrLen; i++) {
              ArgType argType=new ArgType();
              String argTypeFull=argArr[i];
              Matcher toGenericsMatcher=Pattern.compile(RXP_GENERICS_PART_GROUP).matcher(argTypeFull);
              while (toGenericsMatcher.find()) {
                String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"");
                for (                String generic : generics) {
                  generic=getClassInSourceCode(generic,STR.EMPTY,new ArrayList<String>());
                  argType.generics.add(generic);
                }
              }
              String argTypeStr=argTypeFull.replaceAll(RXP_GENERICS_PART,STR.EMPTY);
              argType.name=getType(argTypeStr);
              argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
              each.argTypes.add(argType);
            }
          }
          if (enableExcludesAccessors) {
            String fieldName=null;
            String fieldType=null;
            if (each.methodName.matches(""String_Node_Str"")) {
              if (each.argTypes.size() == 0)               continue;
              fieldName=each.methodName.substring(3);
              fieldType=each.argTypes.get(0).name;
            }
 else             if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(3);
              fieldType=each.returnType.name;
            }
 else             if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(2);
              fieldType=each.returnType.name;
            }
            fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
            if (fieldName != null) {
              String searchRegexp=""String_Node_Str"" + fieldType + ""String_Node_Str""+ fieldName+ ""String_Node_Str"";
              if (targetClassSourceStr.matches(searchRegexp))               continue;
            }
          }
          each.testMethodName=""String_Node_Str"" + each.methodName;
          if (enabledArgs) {
            each.testMethodName+=delimiter + argsPrefix;
            if (each.argTypes.size() == 0)             each.testMethodName+=argsDelimiter;
            for (            ArgType argType : each.argTypes)             each.testMethodName+=argsDelimiter + argType.nameInMethodName;
          }
          if (enabledReturn)           each.testMethodName+=delimiter + returnPrefix + returnDelimiter+ each.returnType.nameInMethodName;
          if (target.matches(RXP_SEARCH_STATIC_METHOD))           each.isStatic=true;
          testMethods.add(each);
        }
      }
    }
  }
  finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.methods=testMethods;
  return classInfo;
}","/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param javaFile
 * @return the information on the test methods
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(IFile javaFile) throws Exception {
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  boolean enabled=store.getBoolean(Preference.TestMethodGen.ENABLE);
  if (!enabled) {
    return classInfo;
  }
  boolean enabledArgs=store.getBoolean(Preference.TestMethodGen.ARGS);
  boolean enabledReturn=store.getBoolean(Preference.TestMethodGen.RETURN);
  boolean enabledNotBlankMethods=store.getBoolean(Preference.TestMethodGen.METHOD_SAMPLE_IMPL);
  boolean enableExcludesAccessors=store.getBoolean(Preference.TestMethodGen.EXLCUDES_ACCESSORS);
  boolean enabledSupportJMock2=MockGenUtil.isUsingJMock2(store);
  boolean enabledSupportEasyMock=MockGenUtil.isUsingEasyMock(store);
  String delimiter=store.getString(Preference.TestMethodGen.DELIMITER);
  String argsPrefix=store.getString(Preference.TestMethodGen.ARGS_PREFIX);
  String argsDelimiter=store.getString(Preference.TestMethodGen.ARGS_DELIMITER);
  String returnPrefix=store.getString(Preference.TestMethodGen.RETURN_PREFIX);
  String returnDelimiter=store.getString(Preference.TestMethodGen.RETURN_DELIMITER);
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=javaFile.getContents();
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null)     tmpsb.append(line + ""String_Node_Str"");
    String targetClassSourceStr=tmpsb.toString();
    if (enabledNotBlankMethods) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importStartLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importStartLine : importStartLines) {
        if (!importStartLine.matches(""String_Node_Str"")) {
          String importedPackage=importStartLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      if (enabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (enabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
    }
    String[] targets=targetClassSourceStr.split(""String_Node_Str"");
    for (    String target : targets) {
      target=target.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (target.matches(RXP_SEARCH_METHOD)) {
        Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(target);
        if (matcher.find()) {
          MethodInfo each=new MethodInfo();
          if (enabledNotBlankMethods || enabledReturn) {
            String returnTypeFull=getType(matcher.group(1));
            Matcher toGenericsMatcher=Pattern.compile(RXP_GENERICS_PART_GROUP).matcher(returnTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"");
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,STR.EMPTY,new ArrayList<String>());
                each.returnType.generics.add(generic);
              }
            }
            each.returnType.name=returnTypeFull.replace(RXP_GENERICS_PART,STR.EMPTY);
            each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
          }
          each.methodName=matcher.group(2);
          String args=matcher.group(3);
          String[] tmpArr=args.split(""String_Node_Str"");
          int tmpArrLen=tmpArr.length;
          List<String> tmpArrList=new ArrayList<String>();
          String buf=STR.EMPTY;
          for (int i=0; i < tmpArrLen; i++) {
            String element=tmpArr[i].trim();
            if (element.matches(""String_Node_Str"")) {
              tmpArrList.add(element);
              continue;
            }
            if (element.matches(""String_Node_Str"")) {
              buf+=element;
              continue;
            }
            if (element.matches(""String_Node_Str"")) {
              String result=buf + STR.COMMA + element;
              tmpArrList.add(result);
              buf=STR.EMPTY;
              continue;
            }
            if (!buf.equals(STR.EMPTY)) {
              buf+=STR.COMMA + element;
              continue;
            }
            tmpArrList.add(element);
          }
          String[] argArr=tmpArrList.toArray(new String[0]);
          if (enabledNotBlankMethods || enabledArgs) {
            int argArrLen=argArr.length;
            for (int i=0; i < argArrLen; i++) {
              ArgType argType=new ArgType();
              String argTypeFull=argArr[i];
              Matcher toGenericsMatcher=Pattern.compile(RXP_GENERICS_PART_GROUP).matcher(argTypeFull);
              while (toGenericsMatcher.find()) {
                String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"");
                for (                String generic : generics) {
                  generic=getClassInSourceCode(generic,STR.EMPTY,new ArrayList<String>());
                  argType.generics.add(generic);
                }
              }
              String argTypeStr=argTypeFull.replaceAll(RXP_GENERICS_PART,STR.EMPTY);
              argType.name=getType(argTypeStr);
              argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
              each.argTypes.add(argType);
            }
          }
          if (enableExcludesAccessors) {
            String fieldName=null;
            String fieldType=null;
            if (each.methodName.matches(""String_Node_Str"")) {
              if (each.argTypes.size() == 0)               continue;
              fieldName=each.methodName.substring(3);
              fieldType=each.argTypes.get(0).name;
            }
 else             if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(3);
              fieldType=each.returnType.name;
            }
 else             if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(2);
              fieldType=each.returnType.name;
            }
            if (fieldName != null) {
              fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
              String searchRegexp=""String_Node_Str"" + fieldType + ""String_Node_Str""+ fieldName+ ""String_Node_Str"";
              if (targetClassSourceStr.matches(searchRegexp))               continue;
            }
          }
          each.testMethodName=""String_Node_Str"" + each.methodName;
          if (enabledArgs) {
            each.testMethodName+=delimiter + argsPrefix;
            if (each.argTypes.size() == 0)             each.testMethodName+=argsDelimiter;
            for (            ArgType argType : each.argTypes)             each.testMethodName+=argsDelimiter + argType.nameInMethodName;
          }
          if (enabledReturn)           each.testMethodName+=delimiter + returnPrefix + returnDelimiter+ each.returnType.nameInMethodName;
          if (target.matches(RXP_SEARCH_STATIC_METHOD))           each.isStatic=true;
          testMethods.add(each);
        }
      }
    }
  }
  finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.methods=testMethods;
  return classInfo;
}",0.9946700974085646
12068,"/** 
 * Get the information on the unimplemented test methods.
 * @param testTarget
 * @param testCase
 * @return the information on test class with the unimplemented test methods
 * @throws Exception
 */
public static ClassInfo getClassInfoWithUnimplementedTestMethods(IFile testTarget,IFile testCase) throws Exception {
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> unimplementedMethodNames=new ArrayList<MethodInfo>();
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  boolean enabled=store.getBoolean(Preference.TestMethodGen.ENABLE);
  boolean enabledNotBlankMethods=store.getBoolean(Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
  boolean enabledSupportJMock2=MockGenUtil.isUsingJMock2(store);
  boolean enabledSupportEasyMock=MockGenUtil.isUsingEasyMock(store);
  if (enabled) {
    ClassInfo expectedClassInfo=getTestClassInfoFromTargetClass(testTarget);
    List<MethodInfo> expectedMethods=expectedClassInfo.methods;
    ClassInfo actualClassInfo=getMethodNamesAlreadyExists(testCase);
    List<MethodInfo> actualMethods=actualClassInfo.methods;
    for (    MethodInfo expected : expectedMethods) {
      boolean exist=false;
      for (      MethodInfo actual : actualMethods) {
        String escapedExp=expected.testMethodName.replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (actual.testMethodName.matches(escapedExp + ""String_Node_Str"")) {
          exist=true;
          break;
        }
      }
      if (!exist)       unimplementedMethodNames.add(expected);
    }
    if (enabledNotBlankMethods) {
      List<String> notImportedList=new ArrayList<String>();
      List<String> expImportedList=expectedClassInfo.importList;
      List<String> actImportedList=actualClassInfo.importList;
      for (      String expImported : expImportedList) {
        boolean found=false;
        for (        String actImported : actImportedList) {
          if (expImported.equals(actImported)) {
            found=true;
            break;
          }
        }
        if (!found)         notImportedList.add(expImported);
 else         notImportedList.add(""String_Node_Str"" + expImported);
      }
      classInfo.importList=notImportedList;
      if (enabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (enabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
    }
  }
  classInfo.methods=unimplementedMethodNames;
  return classInfo;
}","/** 
 * Get the information on the unimplemented test methods.
 * @param testTarget
 * @param testCase
 * @return the information on test class with the unimplemented test methods
 * @throws Exception
 */
public static ClassInfo getClassInfoWithUnimplementedTestMethods(IFile testTarget,IFile testCase) throws Exception {
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> unimplementedMethodNames=new ArrayList<MethodInfo>();
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  boolean enabled=store.getBoolean(Preference.TestMethodGen.ENABLE);
  boolean enabledNotBlankMethods=store.getBoolean(Preference.TestMethodGen.METHOD_SAMPLE_IMPL);
  boolean enabledSupportJMock2=MockGenUtil.isUsingJMock2(store);
  boolean enabledSupportEasyMock=MockGenUtil.isUsingEasyMock(store);
  if (enabled) {
    ClassInfo expectedClassInfo=getTestClassInfoFromTargetClass(testTarget);
    List<MethodInfo> expectedMethods=expectedClassInfo.methods;
    ClassInfo actualClassInfo=getMethodNamesAlreadyExists(testCase);
    List<MethodInfo> actualMethods=actualClassInfo.methods;
    for (    MethodInfo expected : expectedMethods) {
      boolean exist=false;
      for (      MethodInfo actual : actualMethods) {
        String escapedExp=expected.testMethodName.replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (actual.testMethodName.matches(escapedExp + ""String_Node_Str"")) {
          exist=true;
          break;
        }
      }
      if (!exist)       unimplementedMethodNames.add(expected);
    }
    if (enabledNotBlankMethods) {
      List<String> notImportedList=new ArrayList<String>();
      List<String> expImportedList=expectedClassInfo.importList;
      List<String> actImportedList=actualClassInfo.importList;
      for (      String expImported : expImportedList) {
        boolean found=false;
        for (        String actImported : actImportedList) {
          if (expImported.equals(actImported)) {
            found=true;
            break;
          }
        }
        if (!found)         notImportedList.add(expImported);
 else         notImportedList.add(""String_Node_Str"" + expImported);
      }
      classInfo.importList=notImportedList;
      if (enabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (enabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
    }
  }
  classInfo.methods=unimplementedMethodNames;
  return classInfo;
}",0.998095963442498
12069,"/** 
 * Get the information on the methods.
 * @param javaFile
 * @return the information on the methods
 * @throws Exception
 */
public static ClassInfo getMethodNamesAlreadyExists(IFile javaFile) throws Exception {
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> methodStringInfos=new ArrayList<MethodInfo>();
  boolean enabled=Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestMethodGen.ENABLE);
  boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
  if (enabled) {
    InputStream is=null;
    InputStreamReader isr=null;
    BufferedReader br=null;
    try {
      is=javaFile.getContents();
      String encoding=FileResourceUtil.detectEncoding(javaFile);
      is=javaFile.getContents();
      isr=new InputStreamReader(is,encoding);
      br=new BufferedReader(isr);
      StringBuilder tmpsb=new StringBuilder();
      String line=null;
      while ((line=br.readLine()) != null)       tmpsb.append(line + ""String_Node_Str"");
      String targetClassSourceStr=tmpsb.toString();
      String[] targets=targetClassSourceStr.split(""String_Node_Str"");
      for (      String target : targets) {
        target=target.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA);
        target=target.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (target.matches(RXP_SEARCH_METHOD)) {
          Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(target);
          if (matcher.find()) {
            MethodInfo each=new MethodInfo();
            each.returnType.name=getType(matcher.group(1));
            each.returnType.nameInMethodName=getTypeAvailableInMethodName(matcher.group(1));
            each.methodName=matcher.group(2);
            each.testMethodName=each.methodName;
            String args=matcher.group(3);
            String[] argArr=args.split(""String_Node_Str"");
            int argArrLen=argArr.length;
            for (int i=0; i < argArrLen; i++) {
              ArgType argType=new ArgType();
              argType.name=getType(argArr[i]);
              argType.nameInMethodName=getTypeAvailableInMethodName(argArr[i]);
              each.argTypes.add(argType);
            }
            methodStringInfos.add(each);
          }
        }
      }
      if (enabledNotBlankMethods) {
        if (methodStringInfos.size() <= 0 || methodStringInfos.get(0) == null)         methodStringInfos.add(new MethodInfo());
        String[] importStartLines=targetClassSourceStr.split(""String_Node_Str"");
        for (        String importStartLine : importStartLines) {
          if (!importStartLine.matches(""String_Node_Str"")) {
            String importedPackage=importStartLine.split(""String_Node_Str"")[0];
            classInfo.importList.add(importedPackage);
          }
        }
      }
    }
  finally {
      FileResourceUtil.close(br);
      FileResourceUtil.close(isr);
      FileResourceUtil.close(is);
    }
  }
  classInfo.methods=methodStringInfos;
  return classInfo;
}","/** 
 * Get the information on the methods.
 * @param javaFile
 * @return the information on the methods
 * @throws Exception
 */
public static ClassInfo getMethodNamesAlreadyExists(IFile javaFile) throws Exception {
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> methodStringInfos=new ArrayList<MethodInfo>();
  boolean enabled=Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestMethodGen.ENABLE);
  boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(Preference.TestMethodGen.METHOD_SAMPLE_IMPL);
  if (enabled) {
    InputStream is=null;
    InputStreamReader isr=null;
    BufferedReader br=null;
    try {
      is=javaFile.getContents();
      String encoding=FileResourceUtil.detectEncoding(javaFile);
      is=javaFile.getContents();
      isr=new InputStreamReader(is,encoding);
      br=new BufferedReader(isr);
      StringBuilder tmpsb=new StringBuilder();
      String line=null;
      while ((line=br.readLine()) != null)       tmpsb.append(line + ""String_Node_Str"");
      String targetClassSourceStr=tmpsb.toString();
      String[] targets=targetClassSourceStr.split(""String_Node_Str"");
      for (      String target : targets) {
        target=target.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA);
        target=target.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (target.matches(RXP_SEARCH_METHOD)) {
          Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(target);
          if (matcher.find()) {
            MethodInfo each=new MethodInfo();
            each.returnType.name=getType(matcher.group(1));
            each.returnType.nameInMethodName=getTypeAvailableInMethodName(matcher.group(1));
            each.methodName=matcher.group(2);
            each.testMethodName=each.methodName;
            String args=matcher.group(3);
            String[] argArr=args.split(""String_Node_Str"");
            int argArrLen=argArr.length;
            for (int i=0; i < argArrLen; i++) {
              ArgType argType=new ArgType();
              argType.name=getType(argArr[i]);
              argType.nameInMethodName=getTypeAvailableInMethodName(argArr[i]);
              each.argTypes.add(argType);
            }
            methodStringInfos.add(each);
          }
        }
      }
      if (enabledNotBlankMethods) {
        if (methodStringInfos.size() <= 0 || methodStringInfos.get(0) == null)         methodStringInfos.add(new MethodInfo());
        String[] importStartLines=targetClassSourceStr.split(""String_Node_Str"");
        for (        String importStartLine : importStartLines) {
          if (!importStartLine.matches(""String_Node_Str"")) {
            String importedPackage=importStartLine.split(""String_Node_Str"")[0];
            classInfo.importList.add(importedPackage);
          }
        }
      }
    }
  finally {
      FileResourceUtil.close(br);
      FileResourceUtil.close(isr);
      FileResourceUtil.close(is);
    }
  }
  classInfo.methods=methodStringInfos;
  return classInfo;
}",0.9983984625240232
12070,"/** 
 * trim inside of the second level braces.
 * @param source
 * @return
 */
protected static String trimInsideOfBraces(String source){
  int len=source.length();
  boolean isInsideOfFirstLevel=false;
  boolean isInsideOfSecondLevel=false;
  Stack<Character> braceStack=new Stack<Character>();
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < len; i++) {
    if (!isInsideOfFirstLevel) {
      sb.append(source.charAt(i));
      if (source.charAt(i) == '{') {
        isInsideOfFirstLevel=true;
      }
      continue;
    }
    if (!isInsideOfSecondLevel) {
      sb.append(source.charAt(i));
    }
    if (source.charAt(i) == '{') {
      isInsideOfSecondLevel=true;
      braceStack.push(source.charAt(i));
    }
    if (!braceStack.empty() && source.charAt(i) == '}') {
      braceStack.pop();
    }
    if (braceStack.empty()) {
      isInsideOfSecondLevel=false;
    }
  }
  return sb.toString();
}","/** 
 * trim inside of the second level braces.
 * @param source
 * @return
 */
protected static String trimInsideOfBraces(String source){
  int len=source.length();
  boolean isInsideOfTargetClass=false;
  boolean isInsideOfFirstLevel=false;
  boolean isInsideOfSecondLevel=false;
  Stack<Character> braceStack=new Stack<Character>();
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < len; i++) {
    if (!isInsideOfTargetClass) {
      sb.append(source.charAt(i));
      if (i >= 6 && source.charAt(i - 6) == ' ' && source.charAt(i - 5) == 'c' && source.charAt(i - 4) == 'l' && source.charAt(i - 3) == 'a' && source.charAt(i - 2) == 's' && source.charAt(i - 1) == 's' && source.charAt(i) == ' ') {
        isInsideOfTargetClass=true;
      }
      continue;
    }
    if (!isInsideOfFirstLevel) {
      sb.append(source.charAt(i));
      if (source.charAt(i) == '{') {
        isInsideOfFirstLevel=true;
      }
      continue;
    }
    if (!isInsideOfSecondLevel) {
      sb.append(source.charAt(i));
    }
    if (source.charAt(i) == '{') {
      isInsideOfSecondLevel=true;
      braceStack.push(source.charAt(i));
    }
    if (!braceStack.empty() && source.charAt(i) == '}') {
      braceStack.pop();
    }
    if (braceStack.empty()) {
      isInsideOfSecondLevel=false;
    }
  }
  return sb.toString();
}",0.7409719126170308
12071,"/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param javaFile
 * @return the information on the test methods
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(IFile javaFile) throws Exception {
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  boolean enabled=store.getBoolean(Preference.TestMethodGen.ENABLE);
  if (!enabled) {
    return classInfo;
  }
  boolean enabledArgs=store.getBoolean(Preference.TestMethodGen.ARGS);
  boolean enabledReturn=store.getBoolean(Preference.TestMethodGen.RETURN);
  boolean enabledNotBlankMethods=store.getBoolean(Preference.TestMethodGen.METHOD_SAMPLE_IMPL);
  boolean enableExcludesAccessors=store.getBoolean(Preference.TestMethodGen.EXLCUDES_ACCESSORS);
  boolean enabledSupportJMock2=MockGenUtil.isUsingJMock2(store);
  boolean enabledSupportEasyMock=MockGenUtil.isUsingEasyMock(store);
  String delimiter=store.getString(Preference.TestMethodGen.DELIMITER);
  String argsPrefix=store.getString(Preference.TestMethodGen.ARGS_PREFIX);
  String argsDelimiter=store.getString(Preference.TestMethodGen.ARGS_DELIMITER);
  String returnPrefix=store.getString(Preference.TestMethodGen.RETURN_PREFIX);
  String returnDelimiter=store.getString(Preference.TestMethodGen.RETURN_DELIMITER);
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=javaFile.getContents();
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null)     tmpsb.append(line + ""String_Node_Str"");
    String targetClassSourceStr=tmpsb.toString();
    if (enabledNotBlankMethods) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importStartLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importStartLine : importStartLines) {
        if (!importStartLine.matches(""String_Node_Str"")) {
          String importedPackage=importStartLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      if (enabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (enabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
    }
    String[] targets=targetClassSourceStr.split(""String_Node_Str"");
    for (    String target : targets) {
      target=target.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (target.matches(RXP_SEARCH_METHOD)) {
        Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(target);
        if (matcher.find()) {
          MethodInfo each=new MethodInfo();
          if (enabledNotBlankMethods || enabledReturn) {
            String returnTypeFull=getType(matcher.group(1));
            Matcher toGenericsMatcher=Pattern.compile(RXP_GENERICS_PART_GROUP).matcher(returnTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"");
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,STR.EMPTY,new ArrayList<String>());
                each.returnType.generics.add(generic);
              }
            }
            each.returnType.name=returnTypeFull.replace(RXP_GENERICS_PART,STR.EMPTY);
            each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
          }
          each.methodName=matcher.group(2);
          String args=matcher.group(3);
          String[] tmpArr=args.split(""String_Node_Str"");
          int tmpArrLen=tmpArr.length;
          List<String> tmpArrList=new ArrayList<String>();
          String buf=STR.EMPTY;
          for (int i=0; i < tmpArrLen; i++) {
            String element=tmpArr[i].trim();
            if (element.matches(""String_Node_Str"")) {
              tmpArrList.add(element);
              continue;
            }
            if (element.matches(""String_Node_Str"")) {
              buf+=element;
              continue;
            }
            if (element.matches(""String_Node_Str"")) {
              String result=buf + STR.COMMA + element;
              tmpArrList.add(result);
              buf=STR.EMPTY;
              continue;
            }
            if (!buf.equals(STR.EMPTY)) {
              buf+=STR.COMMA + element;
              continue;
            }
            tmpArrList.add(element);
          }
          String[] argArr=tmpArrList.toArray(new String[0]);
          if (enabledNotBlankMethods || enabledArgs) {
            int argArrLen=argArr.length;
            for (int i=0; i < argArrLen; i++) {
              ArgType argType=new ArgType();
              String argTypeFull=argArr[i];
              Matcher toGenericsMatcher=Pattern.compile(RXP_GENERICS_PART_GROUP).matcher(argTypeFull);
              while (toGenericsMatcher.find()) {
                String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"");
                for (                String generic : generics) {
                  generic=getClassInSourceCode(generic,STR.EMPTY,new ArrayList<String>());
                  argType.generics.add(generic);
                }
              }
              String argTypeStr=argTypeFull.replaceAll(RXP_GENERICS_PART,STR.EMPTY);
              argType.name=getType(argTypeStr);
              argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
              each.argTypes.add(argType);
            }
          }
          if (enableExcludesAccessors) {
            String fieldName=null;
            String fieldType=null;
            if (each.methodName.matches(""String_Node_Str"")) {
              if (each.argTypes.size() == 0)               continue;
              fieldName=each.methodName.substring(3);
              fieldType=each.argTypes.get(0).name;
            }
 else             if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(3);
              fieldType=each.returnType.name;
            }
 else             if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(2);
              fieldType=each.returnType.name;
            }
            if (fieldName != null) {
              fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
              String searchRegexp=""String_Node_Str"" + fieldType + ""String_Node_Str""+ fieldName+ ""String_Node_Str"";
              if (targetClassSourceStr.matches(searchRegexp))               continue;
            }
          }
          each.testMethodName=""String_Node_Str"" + each.methodName;
          if (enabledArgs) {
            each.testMethodName+=delimiter + argsPrefix;
            if (each.argTypes.size() == 0)             each.testMethodName+=argsDelimiter;
            for (            ArgType argType : each.argTypes)             each.testMethodName+=argsDelimiter + argType.nameInMethodName;
          }
          if (enabledReturn)           each.testMethodName+=delimiter + returnPrefix + returnDelimiter+ each.returnType.nameInMethodName;
          if (target.matches(RXP_SEARCH_STATIC_METHOD))           each.isStatic=true;
          testMethods.add(each);
        }
      }
    }
  }
  finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.methods=testMethods;
  return classInfo;
}","/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param javaFile
 * @return the information on the test methods
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(IFile javaFile) throws Exception {
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  boolean enabled=store.getBoolean(Preference.TestMethodGen.ENABLE);
  if (!enabled) {
    return classInfo;
  }
  boolean enabledArgs=store.getBoolean(Preference.TestMethodGen.ARGS);
  boolean enabledReturn=store.getBoolean(Preference.TestMethodGen.RETURN);
  boolean enabledNotBlankMethods=store.getBoolean(Preference.TestMethodGen.METHOD_SAMPLE_IMPL);
  boolean enableExcludesAccessors=store.getBoolean(Preference.TestMethodGen.EXLCUDES_ACCESSORS);
  boolean enabledSupportJMock2=MockGenUtil.isUsingJMock2(store);
  boolean enabledSupportEasyMock=MockGenUtil.isUsingEasyMock(store);
  String delimiter=store.getString(Preference.TestMethodGen.DELIMITER);
  String argsPrefix=store.getString(Preference.TestMethodGen.ARGS_PREFIX);
  String argsDelimiter=store.getString(Preference.TestMethodGen.ARGS_DELIMITER);
  String returnPrefix=store.getString(Preference.TestMethodGen.RETURN_PREFIX);
  String returnDelimiter=store.getString(Preference.TestMethodGen.RETURN_DELIMITER);
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=javaFile.getContents();
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null)     tmpsb.append(line + ""String_Node_Str"");
    String targetClassSourceStr=tmpsb.toString();
    if (enabledNotBlankMethods) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importStartLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importStartLine : importStartLines) {
        if (!importStartLine.matches(""String_Node_Str"")) {
          String importedPackage=importStartLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      if (enabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (enabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
    }
    String[] targets=targetClassSourceStr.split(""String_Node_Str"");
    for (    String target : targets) {
      target=target.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (target.matches(RXP_SEARCH_METHOD)) {
        Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(target);
        if (matcher.find()) {
          MethodInfo each=new MethodInfo();
          if (enabledNotBlankMethods || enabledReturn) {
            String returnTypeFull=getType(matcher.group(1));
            Matcher toGenericsMatcher=Pattern.compile(RXP_GENERICS_PART_GROUP).matcher(returnTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"");
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,STR.EMPTY,new ArrayList<String>());
                each.returnType.generics.add(generic);
              }
            }
            each.returnType.name=returnTypeFull.replace(RXP_GENERICS_PART,STR.EMPTY);
            each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
          }
          each.methodName=matcher.group(2);
          String args=matcher.group(3);
          String[] tmpArr=args.split(""String_Node_Str"");
          int tmpArrLen=tmpArr.length;
          List<String> tmpArrList=new ArrayList<String>();
          String buf=STR.EMPTY;
          for (int i=0; i < tmpArrLen; i++) {
            String element=tmpArr[i].trim();
            if (element.matches(""String_Node_Str"")) {
              tmpArrList.add(element);
              continue;
            }
            if (element.matches(""String_Node_Str"")) {
              buf+=element;
              continue;
            }
            if (element.matches(""String_Node_Str"")) {
              String result=buf + STR.COMMA + element;
              tmpArrList.add(result);
              buf=STR.EMPTY;
              continue;
            }
            if (!buf.equals(STR.EMPTY)) {
              buf+=STR.COMMA + element;
              continue;
            }
            tmpArrList.add(element);
          }
          String[] argArr=tmpArrList.toArray(new String[0]);
          if (enabledNotBlankMethods || enabledArgs) {
            int argArrLen=argArr.length;
            for (int i=0; i < argArrLen; i++) {
              ArgType argType=new ArgType();
              String argTypeFull=argArr[i];
              Matcher toGenericsMatcher=Pattern.compile(RXP_GENERICS_PART_GROUP).matcher(argTypeFull);
              while (toGenericsMatcher.find()) {
                String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"");
                for (                String generic : generics) {
                  generic=getClassInSourceCode(generic,STR.EMPTY,new ArrayList<String>());
                  argType.generics.add(generic);
                }
              }
              String argTypeStr=argTypeFull.replaceAll(RXP_GENERICS_PART,STR.EMPTY);
              argType.name=getType(argTypeStr);
              argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
              each.argTypes.add(argType);
            }
          }
          if (enableExcludesAccessors) {
            String fieldName=null;
            String fieldType=null;
            if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(3);
              if (each.argTypes.size() > 0) {
                fieldType=each.argTypes.get(0).name;
              }
            }
 else             if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(3);
              fieldType=each.returnType.name;
            }
 else             if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(2);
              fieldType=each.returnType.name;
            }
            if (fieldName != null) {
              fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
              fieldType=fieldType.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
              String searchRegexp=""String_Node_Str"" + fieldType + ""String_Node_Str""+ fieldName+ ""String_Node_Str"";
              if (targetClassSourceStr.matches(searchRegexp))               continue;
            }
          }
          each.testMethodName=""String_Node_Str"" + each.methodName;
          if (enabledArgs) {
            each.testMethodName+=delimiter + argsPrefix;
            if (each.argTypes.size() == 0)             each.testMethodName+=argsDelimiter;
            for (            ArgType argType : each.argTypes)             each.testMethodName+=argsDelimiter + argType.nameInMethodName;
          }
          if (enabledReturn)           each.testMethodName+=delimiter + returnPrefix + returnDelimiter+ each.returnType.nameInMethodName;
          if (target.matches(RXP_SEARCH_STATIC_METHOD))           each.isStatic=true;
          testMethods.add(each);
        }
      }
    }
  }
  finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.methods=testMethods;
  return classInfo;
}",0.9826055224425252
12072,"/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param javaFile
 * @return the information on the test methods
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(IFile javaFile) throws Exception {
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  boolean enabled=store.getBoolean(Preference.TestMethodGen.ENABLE);
  if (!enabled) {
    return classInfo;
  }
  boolean enabledArgs=store.getBoolean(Preference.TestMethodGen.ARGS);
  boolean enabledReturn=store.getBoolean(Preference.TestMethodGen.RETURN);
  boolean enabledNotBlankMethods=store.getBoolean(Preference.TestMethodGen.METHOD_SAMPLE_IMPL);
  boolean enableExcludesAccessors=store.getBoolean(Preference.TestMethodGen.EXLCUDES_ACCESSORS);
  boolean enabledSupportJMock2=MockGenUtil.isUsingJMock2(store);
  boolean enabledSupportEasyMock=MockGenUtil.isUsingEasyMock(store);
  String delimiter=store.getString(Preference.TestMethodGen.DELIMITER);
  String argsPrefix=store.getString(Preference.TestMethodGen.ARGS_PREFIX);
  String argsDelimiter=store.getString(Preference.TestMethodGen.ARGS_DELIMITER);
  String returnPrefix=store.getString(Preference.TestMethodGen.RETURN_PREFIX);
  String returnDelimiter=store.getString(Preference.TestMethodGen.RETURN_DELIMITER);
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=javaFile.getContents();
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null) {
      tmpsb.append(line + ""String_Node_Str"");
    }
    String targetClassSourceStr=trimInnerClassMethods(tmpsb.toString());
    if (enabledNotBlankMethods) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importStartLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importStartLine : importStartLines) {
        if (!importStartLine.matches(""String_Node_Str"")) {
          String importedPackage=importStartLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      if (enabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (enabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
    }
    String[] targets=targetClassSourceStr.split(""String_Node_Str"");
    for (    String target : targets) {
      target=target.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (target.matches(RXP_SEARCH_METHOD)) {
        Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(target);
        if (matcher.find()) {
          MethodInfo each=new MethodInfo();
          if (enabledNotBlankMethods || enabledReturn) {
            String returnTypeFull=getType(matcher.group(1));
            Matcher toGenericsMatcher=Pattern.compile(RXP_GENERICS_PART_GROUP).matcher(returnTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"");
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,STR.EMPTY,new ArrayList<String>());
                each.returnType.generics.add(generic);
              }
            }
            each.returnType.name=returnTypeFull.replace(RXP_GENERICS_PART,STR.EMPTY);
            each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
          }
          each.methodName=matcher.group(2);
          String args=matcher.group(3);
          String[] tmpArr=args.split(""String_Node_Str"");
          int tmpArrLen=tmpArr.length;
          List<String> tmpArrList=new ArrayList<String>();
          String buf=STR.EMPTY;
          for (int i=0; i < tmpArrLen; i++) {
            String element=tmpArr[i].trim();
            if (element.matches(""String_Node_Str"")) {
              tmpArrList.add(element);
              continue;
            }
            if (element.matches(""String_Node_Str"")) {
              buf+=element;
              continue;
            }
            if (element.matches(""String_Node_Str"")) {
              String result=buf + STR.COMMA + element;
              tmpArrList.add(result);
              buf=STR.EMPTY;
              continue;
            }
            if (!buf.equals(STR.EMPTY)) {
              buf+=STR.COMMA + element;
              continue;
            }
            tmpArrList.add(element);
          }
          String[] argArr=tmpArrList.toArray(new String[0]);
          if (enabledNotBlankMethods || enabledArgs) {
            int argArrLen=argArr.length;
            for (int i=0; i < argArrLen; i++) {
              ArgType argType=new ArgType();
              String argTypeFull=argArr[i];
              Matcher toGenericsMatcher=Pattern.compile(RXP_GENERICS_PART_GROUP).matcher(argTypeFull);
              while (toGenericsMatcher.find()) {
                String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"");
                for (                String generic : generics) {
                  generic=getClassInSourceCode(generic,STR.EMPTY,new ArrayList<String>());
                  argType.generics.add(generic);
                }
              }
              String argTypeStr=argTypeFull.replaceAll(RXP_GENERICS_PART,STR.EMPTY);
              argType.name=getType(argTypeStr);
              argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
              each.argTypes.add(argType);
            }
          }
          if (enableExcludesAccessors) {
            String fieldName=null;
            String fieldType=null;
            if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(3);
              if (each.argTypes.size() > 0) {
                fieldType=each.argTypes.get(0).name;
              }
            }
 else             if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(3);
              fieldType=each.returnType.name;
            }
 else             if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(2);
              fieldType=each.returnType.name;
            }
            if (fieldName != null) {
              fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
              fieldType=fieldType.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
              String searchRegexp=""String_Node_Str"" + fieldType + ""String_Node_Str""+ fieldName+ ""String_Node_Str"";
              if (targetClassSourceStr.matches(searchRegexp))               continue;
            }
          }
          each.testMethodName=""String_Node_Str"" + each.methodName;
          if (enabledArgs) {
            each.testMethodName+=delimiter + argsPrefix;
            if (each.argTypes.size() == 0)             each.testMethodName+=argsDelimiter;
            for (            ArgType argType : each.argTypes)             each.testMethodName+=argsDelimiter + argType.nameInMethodName;
          }
          if (enabledReturn)           each.testMethodName+=delimiter + returnPrefix + returnDelimiter+ each.returnType.nameInMethodName;
          if (target.matches(RXP_SEARCH_STATIC_METHOD))           each.isStatic=true;
          testMethods.add(each);
        }
      }
    }
  }
  finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.methods=testMethods;
  return classInfo;
}","/** 
 * Get the information on the test methods corresponded the developing public methods.
 * @param javaFile
 * @return the information on the test methods
 * @throws Exception
 */
public static ClassInfo getTestClassInfoFromTargetClass(IFile javaFile) throws Exception {
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  ClassInfo classInfo=new ClassInfo();
  List<MethodInfo> testMethods=new ArrayList<MethodInfo>();
  boolean enabled=store.getBoolean(Preference.TestMethodGen.ENABLE);
  if (!enabled) {
    return classInfo;
  }
  boolean enabledArgs=store.getBoolean(Preference.TestMethodGen.ARGS);
  boolean enabledReturn=store.getBoolean(Preference.TestMethodGen.RETURN);
  boolean enabledNotBlankMethods=store.getBoolean(Preference.TestMethodGen.METHOD_SAMPLE_IMPL);
  boolean enableExcludesAccessors=store.getBoolean(Preference.TestMethodGen.EXLCUDES_ACCESSORS);
  boolean enabledSupportJMock2=MockGenUtil.isUsingJMock2(store);
  boolean enabledSupportEasyMock=MockGenUtil.isUsingEasyMock(store);
  String delimiter=store.getString(Preference.TestMethodGen.DELIMITER);
  String argsPrefix=store.getString(Preference.TestMethodGen.ARGS_PREFIX);
  String argsDelimiter=store.getString(Preference.TestMethodGen.ARGS_DELIMITER);
  String returnPrefix=store.getString(Preference.TestMethodGen.RETURN_PREFIX);
  String returnDelimiter=store.getString(Preference.TestMethodGen.RETURN_DELIMITER);
  InputStream is=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    is=javaFile.getContents();
    isr=new InputStreamReader(is,encoding);
    br=new BufferedReader(isr);
    StringBuilder tmpsb=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null) {
      tmpsb.append(trimLineComments(line) + ""String_Node_Str"");
    }
    String targetClassSourceStr=trimInnerClassMethods(trimAllComments(tmpsb.toString()));
    if (enabledNotBlankMethods) {
      if (testMethods.size() <= 0 || testMethods.get(0) == null)       testMethods.add(new MethodInfo());
      String[] importStartLines=targetClassSourceStr.split(""String_Node_Str"");
      for (      String importStartLine : importStartLines) {
        if (!importStartLine.matches(""String_Node_Str"")) {
          String importedPackage=importStartLine.split(""String_Node_Str"")[0];
          classInfo.importList.add(importedPackage);
        }
      }
      if (enabledSupportJMock2) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
      if (enabledSupportEasyMock) {
        classInfo.importList.add(""String_Node_Str"");
        classInfo.importList.add(""String_Node_Str"");
      }
    }
    String[] targets=targetClassSourceStr.split(""String_Node_Str"");
    for (    String target : targets) {
      target=target.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (target.matches(RXP_SEARCH_METHOD)) {
        Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(target);
        if (matcher.find()) {
          MethodInfo each=new MethodInfo();
          if (enabledNotBlankMethods || enabledReturn) {
            String returnTypeFull=getType(matcher.group(1));
            Matcher toGenericsMatcher=Pattern.compile(RXP_GENERICS_PART_GROUP).matcher(returnTypeFull);
            while (toGenericsMatcher.find()) {
              String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"");
              for (              String generic : generics) {
                generic=getClassInSourceCode(generic,STR.EMPTY,new ArrayList<String>());
                each.returnType.generics.add(generic);
              }
            }
            each.returnType.name=returnTypeFull.replace(RXP_GENERICS_PART,STR.EMPTY);
            each.returnType.nameInMethodName=getTypeAvailableInMethodName(each.returnType.name);
          }
          each.methodName=matcher.group(2);
          String args=matcher.group(3);
          String[] tmpArr=args.split(""String_Node_Str"");
          int tmpArrLen=tmpArr.length;
          List<String> tmpArrList=new ArrayList<String>();
          String buf=STR.EMPTY;
          for (int i=0; i < tmpArrLen; i++) {
            String element=tmpArr[i].trim();
            if (element.matches(""String_Node_Str"")) {
              tmpArrList.add(element);
              continue;
            }
            if (element.matches(""String_Node_Str"")) {
              buf+=element;
              continue;
            }
            if (element.matches(""String_Node_Str"")) {
              String result=buf + STR.COMMA + element;
              tmpArrList.add(result);
              buf=STR.EMPTY;
              continue;
            }
            if (!buf.equals(STR.EMPTY)) {
              buf+=STR.COMMA + element;
              continue;
            }
            tmpArrList.add(element);
          }
          String[] argArr=tmpArrList.toArray(new String[0]);
          if (enabledNotBlankMethods || enabledArgs) {
            int argArrLen=argArr.length;
            for (int i=0; i < argArrLen; i++) {
              ArgType argType=new ArgType();
              String argTypeFull=argArr[i];
              Matcher toGenericsMatcher=Pattern.compile(RXP_GENERICS_PART_GROUP).matcher(argTypeFull);
              while (toGenericsMatcher.find()) {
                String[] generics=toGenericsMatcher.group().replaceAll(""String_Node_Str"",STR.EMPTY).replaceAll(""String_Node_Str"",STR.EMPTY).split(""String_Node_Str"");
                for (                String generic : generics) {
                  generic=getClassInSourceCode(generic,STR.EMPTY,new ArrayList<String>());
                  argType.generics.add(generic);
                }
              }
              String argTypeStr=argTypeFull.replaceAll(RXP_GENERICS_PART,STR.EMPTY);
              argType.name=getType(argTypeStr);
              argType.nameInMethodName=getTypeAvailableInMethodName(argTypeStr);
              each.argTypes.add(argType);
            }
          }
          if (enableExcludesAccessors) {
            String fieldName=null;
            String fieldType=null;
            if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(3);
              if (each.argTypes.size() > 0) {
                fieldType=each.argTypes.get(0).name;
              }
            }
 else             if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(3);
              fieldType=each.returnType.name;
            }
 else             if (each.methodName.matches(""String_Node_Str"")) {
              fieldName=each.methodName.substring(2);
              fieldType=each.returnType.name;
            }
            if (fieldName != null) {
              fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
              fieldType=fieldType.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
              String searchRegexp=""String_Node_Str"" + fieldType + ""String_Node_Str""+ fieldName+ ""String_Node_Str"";
              if (targetClassSourceStr.matches(searchRegexp))               continue;
            }
          }
          each.testMethodName=""String_Node_Str"" + each.methodName;
          if (enabledArgs) {
            each.testMethodName+=delimiter + argsPrefix;
            if (each.argTypes.size() == 0)             each.testMethodName+=argsDelimiter;
            for (            ArgType argType : each.argTypes)             each.testMethodName+=argsDelimiter + argType.nameInMethodName;
          }
          if (enabledReturn)           each.testMethodName+=delimiter + returnPrefix + returnDelimiter+ each.returnType.nameInMethodName;
          if (target.matches(RXP_SEARCH_STATIC_METHOD))           each.isStatic=true;
          testMethods.add(each);
        }
      }
    }
  }
  finally {
    FileResourceUtil.close(br);
    FileResourceUtil.close(isr);
    FileResourceUtil.close(is);
  }
  classInfo.methods=testMethods;
  return classInfo;
}",0.9974203611494392
12073,"public void run(IAction action){
  InputStream javaFileIStream=null;
  OutputStreamWriter testFileOSWriter=null;
  FileOutputStream fos=null;
  boolean refreshFlag=true;
  String projectName=null;
  String testCaseDirResource=null;
  String testCaseResource=null;
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseClassname=null;
    String testCaseCreateDirpath=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection)     structuredSelection=(StructuredSelection)selection;
    if (structuredSelection != null && structuredSelection.size() == 0) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,STR.Dialog.Common.TITLE,STR.Dialog.Common.REQUIRED);
      refreshFlag=false;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,STR.Dialog.Common.TITLE,STR.Dialog.Common.SELECT_ONLY_ONE);
      refreshFlag=false;
    }
 else {
      String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
      String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
      String selected=STR.EMPTY;
      int len=dirArrFromProjectRoot.length;
      for (int i=2; i < len - 1; i++)       selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
      selected+=dirArrFromProjectRoot[len - 1];
      projectName=dirArrFromProjectRoot[1];
      String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
      testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
      testCaseClassname=testTargetClassname + STR.SUFFIX_OF_TESTCASE;
      testCaseFilename=testCaseClassname + STR.JAVA_EXP;
      String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      String[] selectedDirArr=selected.split(STR.DIR_SEP);
      testCaseDirResource=""String_Node_Str"";
      int selectedDirArrLength=selectedDirArr.length;
      for (int i=0; i < selectedDirArrLength - 1; i++)       testCaseDirResource+=selectedDirArr[i] + STR.DIR_SEP;
      testCaseDirResource=testCaseDirResource.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA);
      testCaseCreateDirpath=projectRootPath + testCaseDirResource;
      File testDir=new File(testCaseCreateDirpath);
      String[] dirArr=testCaseCreateDirpath.split(STR.DIR_SEP);
      String tmpDirPath=STR.EMPTY;
      String tmpResourceDirPath=STR.EMPTY;
      for (      String each : dirArr) {
        tmpDirPath+=STR.DIR_SEP + each;
        File tmpDir=new File(tmpDirPath);
        if (tmpDir.getPath().length() <= projectRootPath.length())         continue;
        tmpResourceDirPath+=STR.DIR_SEP + each;
        if (!tmpDir.exists()) {
          if (!tmpDir.mkdir())           System.err.println(""String_Node_Str"" + tmpDir.getPath());
          if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + tmpResourceDirPath+ ""String_Node_Str"")) {
            String msg=STR.Dialog.Common.RESOURCE_REFRESH_ERROR;
            MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,msg);
            System.err.println(""String_Node_Str"");
          }
        }
      }
      if (!testDir.mkdirs())       System.err.println(""String_Node_Str"");
      if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource)) {
        MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
        System.err.println(""String_Node_Str"");
      }
      try {
        File outputFile=new File(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
        String msg=STR.Dialog.Common.ALREADY_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ STR.Dialog.Common.CONFIRM_PROCEED;
        if (!outputFile.exists() || MessageDialog.openConfirm(new Shell(),STR.Dialog.Common.TITLE,msg)) {
          String targetClass=""String_Node_Str"" + projectName + ""String_Node_Str""+ selected;
          IResource targetClassResource=workspaceRoot.findMember(targetClass);
          IFile file=(IFile)targetClassResource;
          List<GeneratingMethodInfo> testMethods=TestCaseGenerateUtil.getTestMethodsFromTarget(file);
          fos=new FileOutputStream(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
          testFileOSWriter=new OutputStreamWriter(fos);
          StringBuffer sb=new StringBuffer();
          String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
          String testPackageString=STR.EMPTY;
          String[] tmpDirArr=selected.split(STR.DIR_SEP);
          StringBuffer dirSb=new StringBuffer();
          int packageArrLen=tmpDirArr.length - 2;
          for (int i=3; i < packageArrLen; i++) {
            dirSb.append(tmpDirArr[i]);
            dirSb.append(""String_Node_Str"");
          }
          dirSb.append(tmpDirArr[packageArrLen]);
          testPackageString=dirSb.toString();
          sb.append(""String_Node_Str"");
          sb.append(testPackageString);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          boolean enabledTestMethodsGen=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE);
          boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
          if (enabledTestMethodsGen && enabledNotBlankMethods) {
            sb.append(CRLF);
            List<String> importedPackageList=testMethods.get(0).importList;
            for (            String importedPackage : importedPackageList) {
              sb.append(""String_Node_Str"");
              sb.append(importedPackage);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
            }
          }
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(testCaseClassname);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          if (enabledTestMethodsGen) {
            for (            GeneratingMethodInfo testMethod : testMethods) {
              sb.append(""String_Node_Str"");
              sb.append(testMethod.testMethodName);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(""String_Node_Str"");
              sb.append(STR.AUTO_GEN_MSG_TODO);
              sb.append(CRLF);
              if (enabledNotBlankMethods) {
                String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testMethods,testTargetClassname);
                sb.append(notBlankSourceCode);
              }
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(CRLF);
            }
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          testFileOSWriter.write(sb.toString());
        }
      }
 catch (      FileNotFoundException fnfe) {
        fnfe.printStackTrace();
      }
 finally {
        FileResourceUtil.close(testFileOSWriter);
        FileResourceUtil.close(fos);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    FileResourceUtil.close(javaFileIStream);
    FileResourceUtil.close(testFileOSWriter);
  }
  if (refreshFlag && !ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource+ ""String_Node_Str"")) {
    MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
    System.err.println(""String_Node_Str"");
  }
 else {
    int retryCount=0;
    IEditorPart editorPart=null;
    ThreadUtil.sleep(1500);
    while (true) {
      try {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        IWorkspaceRoot root=workspace.getRoot();
        IProject project=root.getProject(projectName);
        IFile testCaseFile=project.getFile(testCaseResource);
        String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        editorPart=IDE.openEditor(page,testCaseFile,editorId);
        if (editorPart == null)         throw new NullPointerException();
        break;
      }
 catch (      Exception e) {
        retryCount++;
        if (retryCount > 3)         break;
        ThreadUtil.sleep(1500);
      }
    }
    editorPart.setFocus();
  }
}","public void run(IAction action){
  InputStream javaFileIStream=null;
  OutputStreamWriter testFileOSWriter=null;
  FileOutputStream fos=null;
  boolean refreshFlag=true;
  String projectName=null;
  String testCaseDirResource=null;
  String testCaseResource=null;
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseClassname=null;
    String testCaseCreateDirpath=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection)     structuredSelection=(StructuredSelection)selection;
    if (structuredSelection != null && structuredSelection.size() == 0) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,STR.Dialog.Common.TITLE,STR.Dialog.Common.REQUIRED);
      refreshFlag=false;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,STR.Dialog.Common.TITLE,STR.Dialog.Common.SELECT_ONLY_ONE);
      refreshFlag=false;
    }
 else {
      String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
      String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
      String selected=STR.EMPTY;
      int len=dirArrFromProjectRoot.length;
      for (int i=2; i < len - 1; i++)       selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
      selected+=dirArrFromProjectRoot[len - 1];
      projectName=dirArrFromProjectRoot[1];
      String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
      testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
      testCaseClassname=testTargetClassname + STR.SUFFIX_OF_TESTCASE;
      testCaseFilename=testCaseClassname + STR.JAVA_EXP;
      String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      String[] selectedDirArr=selected.split(STR.DIR_SEP);
      testCaseDirResource=""String_Node_Str"";
      int selectedDirArrLength=selectedDirArr.length;
      for (int i=0; i < selectedDirArrLength - 1; i++)       testCaseDirResource+=selectedDirArr[i] + STR.DIR_SEP;
      testCaseDirResource=testCaseDirResource.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA);
      testCaseCreateDirpath=projectRootPath + testCaseDirResource;
      File testDir=new File(testCaseCreateDirpath);
      String[] dirArr=testCaseCreateDirpath.split(STR.DIR_SEP);
      String tmpDirPath=STR.EMPTY;
      String tmpResourceDirPath=STR.EMPTY;
      for (      String each : dirArr) {
        tmpDirPath+=STR.DIR_SEP + each;
        File tmpDir=new File(tmpDirPath);
        if (tmpDir.getPath().length() <= projectRootPath.length())         continue;
        tmpResourceDirPath+=STR.DIR_SEP + each;
        if (!tmpDir.exists()) {
          if (!tmpDir.mkdir())           System.err.println(""String_Node_Str"" + tmpDir.getPath());
          if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + tmpResourceDirPath+ ""String_Node_Str"")) {
            String msg=STR.Dialog.Common.RESOURCE_REFRESH_ERROR;
            MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,msg);
            System.err.println(""String_Node_Str"");
          }
        }
      }
      if (!testDir.mkdirs())       System.err.println(""String_Node_Str"");
      if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource)) {
        MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
        System.err.println(""String_Node_Str"");
      }
      try {
        File outputFile=new File(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
        String msg=STR.Dialog.Common.ALREADY_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ STR.Dialog.Common.CONFIRM_PROCEED;
        if (!outputFile.exists() || MessageDialog.openConfirm(new Shell(),STR.Dialog.Common.TITLE,msg)) {
          String targetClass=""String_Node_Str"" + projectName + ""String_Node_Str""+ selected;
          IResource targetClassResource=workspaceRoot.findMember(targetClass);
          IFile file=(IFile)targetClassResource;
          List<GeneratingMethodInfo> testMethods=TestCaseGenerateUtil.getTestMethodsFromTarget(file);
          String writeEncoding=FileResourceUtil.detectEncoding(file);
          fos=new FileOutputStream(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
          testFileOSWriter=new OutputStreamWriter(fos,writeEncoding);
          StringBuffer sb=new StringBuffer();
          String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
          String testPackageString=STR.EMPTY;
          String[] tmpDirArr=selected.split(STR.DIR_SEP);
          StringBuffer dirSb=new StringBuffer();
          int packageArrLen=tmpDirArr.length - 2;
          for (int i=3; i < packageArrLen; i++) {
            dirSb.append(tmpDirArr[i]);
            dirSb.append(""String_Node_Str"");
          }
          dirSb.append(tmpDirArr[packageArrLen]);
          testPackageString=dirSb.toString();
          sb.append(""String_Node_Str"");
          sb.append(testPackageString);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          boolean enabledTestMethodsGen=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE);
          boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
          if (enabledTestMethodsGen && enabledNotBlankMethods) {
            sb.append(CRLF);
            List<String> importedPackageList=testMethods.get(0).importList;
            for (            String importedPackage : importedPackageList) {
              sb.append(""String_Node_Str"");
              sb.append(importedPackage);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
            }
          }
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(testCaseClassname);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          if (enabledTestMethodsGen) {
            for (            GeneratingMethodInfo testMethod : testMethods) {
              sb.append(""String_Node_Str"");
              sb.append(testMethod.testMethodName);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(""String_Node_Str"");
              sb.append(STR.AUTO_GEN_MSG_TODO);
              sb.append(CRLF);
              if (enabledNotBlankMethods) {
                String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testMethods,testTargetClassname);
                sb.append(notBlankSourceCode);
              }
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(CRLF);
            }
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          testFileOSWriter.write(sb.toString());
        }
      }
 catch (      FileNotFoundException fnfe) {
        fnfe.printStackTrace();
      }
 finally {
        FileResourceUtil.close(testFileOSWriter);
        FileResourceUtil.close(fos);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    FileResourceUtil.close(javaFileIStream);
    FileResourceUtil.close(testFileOSWriter);
  }
  if (refreshFlag && !ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource+ ""String_Node_Str"")) {
    MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
    System.err.println(""String_Node_Str"");
  }
 else {
    int retryCount=0;
    IEditorPart editorPart=null;
    ThreadUtil.sleep(1500);
    while (true) {
      try {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        IWorkspaceRoot root=workspace.getRoot();
        IProject project=root.getProject(projectName);
        IFile testCaseFile=project.getFile(testCaseResource);
        String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        editorPart=IDE.openEditor(page,testCaseFile,editorId);
        if (editorPart == null)         throw new NullPointerException();
        break;
      }
 catch (      Exception e) {
        retryCount++;
        if (retryCount > 3)         break;
        ThreadUtil.sleep(1500);
      }
    }
    editorPart.setFocus();
  }
}",0.9952445652173914
12074,"public void run(IAction action){
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String projectName=null;
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseCreateFilepath=null;
    String testCaseResource=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
 else {
    }
    if (structuredSelection != null && structuredSelection.size() == 0) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.REQUIRED);
      return;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.SELECT_ONLY_ONE);
      return;
    }
    String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
    String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
    String selected=STR.EMPTY;
    int allDirLen=dirArrFromProjectRoot.length - 1;
    for (int i=2; i < allDirLen; i++)     selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
    selected+=dirArrFromProjectRoot[allDirLen];
    projectName=dirArrFromProjectRoot[1];
    String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
    testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
    testCaseFilename=testTargetClassname + STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP;
    String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
    if (testTargetClassname == null) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.TestCase.SELECT_JAVA_FILE);
    }
 else {
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      testCaseCreateFilepath=projectRootPath + selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      File outputFile=new File(testCaseCreateFilepath);
      if (!outputFile.exists()) {
        String msg=STR.Dialog.Common.NOT_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ STR.Dialog.Common.COMFIRM_CREATE_NEW_FILE;
        if (testCaseFilename != null && MessageDialog.openConfirm(new Shell(),STR.Dialog.Common.TITLE,msg)) {
          new CreateNewTestCaseAction().run(action,selection);
        }
        return;
      }
      int retryCount=0;
      IEditorPart editorPart=null;
      while (true) {
        try {
          IProject project=workspaceRoot.getProject(projectName);
          IFile testCaseFile=project.getFile(testCaseResource);
          String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          editorPart=IDE.openEditor(page,testCaseFile,editorId);
          editorPart.setFocus();
          if (Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE)) {
            IFile testTargetFile=project.getFile(selected);
            List<GeneratingMethodInfo> unimpledTestMethodNames=TestCaseGenerateUtil.getUnimplementedTestMethodNames(testTargetFile,testCaseFile);
            if (unimpledTestMethodNames.size() > 0) {
              List<String> lines=TestCaseGenerateUtil.getAllSourceCodeLineList(testCaseFile);
              OutputStreamWriter testFileOSWriter=null;
              FileOutputStream fos=null;
              try {
                fos=new FileOutputStream(projectRootPath + STR.DIR_SEP + testCaseResource);
                testFileOSWriter=new OutputStreamWriter(fos);
                boolean enabledTestMethodsGen=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE);
                boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
                StringBuffer sb=new StringBuffer();
                String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
                boolean isImportedTypesAdded=false;
                for (                String line : lines) {
                  if (line.equals(""String_Node_Str"") && enabledTestMethodsGen) {
                    for (                    GeneratingMethodInfo testMethod : unimpledTestMethodNames) {
                      sb.append(""String_Node_Str"");
                      sb.append(testMethod.testMethodName);
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(""String_Node_Str"");
                      sb.append(STR.AUTO_GEN_MSG_TODO);
                      sb.append(CRLF);
                      if (enabledNotBlankMethods) {
                        String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,unimpledTestMethodNames,testTargetClassname);
                        sb.append(notBlankSourceCode);
                      }
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(CRLF);
                    }
                    sb.append(""String_Node_Str"");
                    sb.append(CRLF);
                    break;
                  }
 else {
                    sb.append(line);
                    sb.append(CRLF);
                    if (line.matches(""String_Node_Str"") && !isImportedTypesAdded && enabledNotBlankMethods) {
                      List<String> importTypes=unimpledTestMethodNames.get(0).importList;
                      for (                      String importType : importTypes) {
                        sb.append(""String_Node_Str"");
                        sb.append(importType);
                        sb.append(""String_Node_Str"");
                        sb.append(CRLF);
                      }
                      isImportedTypesAdded=true;
                    }
                  }
                }
                String content=sb.toString();
                testFileOSWriter.write(content);
              }
  finally {
                FileResourceUtil.close(testFileOSWriter);
                FileResourceUtil.close(fos);
              }
            }
            if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseResource+ ""String_Node_Str"")) {
              MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
              System.err.println(""String_Node_Str"");
            }
 else {
              retryCount=0;
              ThreadUtil.sleep(1500);
              while (true) {
                try {
                  editorPart=IDE.openEditor(page,testCaseFile,editorId);
                  if (editorPart == null)                   throw new NullPointerException();
                  break;
                }
 catch (                Exception e) {
                  retryCount++;
                  if (retryCount > 3)                   break;
                  ThreadUtil.sleep(1500);
                }
              }
              editorPart.setFocus();
            }
          }
        }
 catch (        Exception e) {
          retryCount++;
          if (retryCount > 10)           break;
          e.printStackTrace();
          ThreadUtil.sleep(1500);
        }
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void run(IAction action){
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String projectName=null;
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseCreateFilepath=null;
    String testCaseResource=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
 else {
    }
    if (structuredSelection != null && structuredSelection.size() == 0) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.REQUIRED);
      return;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.SELECT_ONLY_ONE);
      return;
    }
    String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
    String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
    String selected=STR.EMPTY;
    int allDirLen=dirArrFromProjectRoot.length - 1;
    for (int i=2; i < allDirLen; i++)     selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
    selected+=dirArrFromProjectRoot[allDirLen];
    projectName=dirArrFromProjectRoot[1];
    String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
    testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
    testCaseFilename=testTargetClassname + STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP;
    String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
    if (testTargetClassname == null) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.TestCase.SELECT_JAVA_FILE);
    }
 else {
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      testCaseCreateFilepath=projectRootPath + selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      File outputFile=new File(testCaseCreateFilepath);
      if (!outputFile.exists()) {
        String msg=STR.Dialog.Common.NOT_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ STR.Dialog.Common.COMFIRM_CREATE_NEW_FILE;
        if (testCaseFilename != null && MessageDialog.openConfirm(new Shell(),STR.Dialog.Common.TITLE,msg)) {
          new CreateNewTestCaseAction().run(action,selection);
        }
        return;
      }
      int retryCount=0;
      IEditorPart editorPart=null;
      while (true) {
        try {
          IProject project=workspaceRoot.getProject(projectName);
          IFile testCaseFile=project.getFile(testCaseResource);
          String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          editorPart=IDE.openEditor(page,testCaseFile,editorId);
          editorPart.setFocus();
          if (Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE)) {
            IFile testTargetFile=project.getFile(selected);
            List<GeneratingMethodInfo> unimpledTestMethodNames=TestCaseGenerateUtil.getUnimplementedTestMethodNames(testTargetFile,testCaseFile);
            String writeEncoding=FileResourceUtil.detectEncoding(testCaseFile);
            if (unimpledTestMethodNames.size() > 0) {
              List<String> lines=TestCaseGenerateUtil.getAllSourceCodeLineList(testCaseFile);
              OutputStreamWriter testFileOSWriter=null;
              FileOutputStream fos=null;
              try {
                fos=new FileOutputStream(projectRootPath + STR.DIR_SEP + testCaseResource);
                testFileOSWriter=new OutputStreamWriter(fos,writeEncoding);
                boolean enabledTestMethodsGen=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE);
                boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
                StringBuffer sb=new StringBuffer();
                String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
                boolean isImportedTypesAdded=false;
                for (                String line : lines) {
                  if (line.equals(""String_Node_Str"") && enabledTestMethodsGen) {
                    for (                    GeneratingMethodInfo testMethod : unimpledTestMethodNames) {
                      sb.append(""String_Node_Str"");
                      sb.append(testMethod.testMethodName);
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(""String_Node_Str"");
                      sb.append(STR.AUTO_GEN_MSG_TODO);
                      sb.append(CRLF);
                      if (enabledNotBlankMethods) {
                        String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,unimpledTestMethodNames,testTargetClassname);
                        sb.append(notBlankSourceCode);
                      }
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(CRLF);
                    }
                    sb.append(""String_Node_Str"");
                    sb.append(CRLF);
                    break;
                  }
 else {
                    sb.append(line);
                    sb.append(CRLF);
                    if (line.matches(""String_Node_Str"") && !isImportedTypesAdded && enabledNotBlankMethods) {
                      List<String> importTypes=unimpledTestMethodNames.get(0).importList;
                      for (                      String importType : importTypes) {
                        sb.append(""String_Node_Str"");
                        sb.append(importType);
                        sb.append(""String_Node_Str"");
                        sb.append(CRLF);
                      }
                      isImportedTypesAdded=true;
                    }
                  }
                }
                String content=sb.toString();
                testFileOSWriter.write(content);
              }
  finally {
                FileResourceUtil.close(testFileOSWriter);
                FileResourceUtil.close(fos);
              }
            }
            if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseResource+ ""String_Node_Str"")) {
              MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
              System.err.println(""String_Node_Str"");
            }
 else {
              retryCount=0;
              ThreadUtil.sleep(1500);
              while (true) {
                try {
                  editorPart=IDE.openEditor(page,testCaseFile,editorId);
                  if (editorPart == null)                   throw new NullPointerException();
                  break;
                }
 catch (                Exception e) {
                  retryCount++;
                  if (retryCount > 3)                   break;
                  ThreadUtil.sleep(1500);
                }
              }
              editorPart.setFocus();
            }
          }
        }
 catch (        Exception e) {
          retryCount++;
          if (retryCount > 10)           break;
          e.printStackTrace();
          ThreadUtil.sleep(1500);
        }
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9938529950300812
12075,"public static List<GeneratingMethodInfo> getTestMethodsFromTarget(IFile javaFile) throws Exception {
  List<GeneratingMethodInfo> testMethods=new ArrayList<GeneratingMethodInfo>();
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  boolean enabled=store.getBoolean(STR.Preference.TestMethodGen.ENABLE);
  boolean enabledArgs=store.getBoolean(STR.Preference.TestMethodGen.ARGS);
  boolean enabledReturn=store.getBoolean(STR.Preference.TestMethodGen.RETURN);
  boolean enabledNotBlankMethods=store.getBoolean(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
  boolean enableExcludesAccessors=store.getBoolean(STR.Preference.TestMethodGen.EXLCUDES_ACCESSORS);
  String delimiter=store.getString(STR.Preference.TestMethodGen.DELIMITER);
  String argsPrefix=store.getString(STR.Preference.TestMethodGen.ARGS_PREFIX);
  String argsDelimiter=store.getString(STR.Preference.TestMethodGen.ARGS_DELIMITER);
  String returnPrefix=store.getString(STR.Preference.TestMethodGen.RETURN_PREFIX);
  String returnDelimiter=store.getString(STR.Preference.TestMethodGen.RETURN_DELIMITER);
  if (enabled) {
    InputStream is=null;
    InputStreamReader isr=null;
    BufferedReader br=null;
    try {
      is=javaFile.getContents();
      UniversalDetector detector=new UniversalDetector(null);
      byte[] buf=new byte[4096];
      int nread;
      while ((nread=is.read(buf)) > 0 && !detector.isDone())       detector.handleData(buf,0,nread);
      detector.dataEnd();
      String encoding=detector.getDetectedCharset();
      if (encoding == null)       encoding=Charset.defaultCharset().name();
      is=javaFile.getContents();
      isr=new InputStreamReader(is,encoding);
      br=new BufferedReader(isr);
      StringBuffer tmpsb=new StringBuffer();
      String line=null;
      while ((line=br.readLine()) != null)       tmpsb.append(line + ""String_Node_Str"");
      String allSrc=tmpsb.toString();
      String[] publics=allSrc.split(""String_Node_Str"");
      for (      String publicsEach : publics) {
        publicsEach=publicsEach.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA);
        publicsEach=publicsEach.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (publicsEach.matches(RXP_SEARCH_METHOD)) {
          Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(publicsEach);
          if (matcher.find()) {
            GeneratingMethodInfo each=new GeneratingMethodInfo();
            if (enabledNotBlankMethods || enabledReturn) {
              each.returnTypeName=getType(matcher.group(1));
              each.returnTypeNameInMethodName=getTypeAvailableInMethodName(each.returnTypeName);
            }
            each.methodName=matcher.group(2);
            String args=matcher.group(3);
            String[] argArr=args.split(""String_Node_Str"");
            if (enabledNotBlankMethods || enabledArgs) {
              int argArrLen=argArr.length;
              for (int i=0; i < argArrLen; i++) {
                each.argTypeNames.add(getType(argArr[i]));
                each.argTypeNamesInMethodName.add(getTypeAvailableInMethodName(argArr[i]));
              }
            }
            if (enableExcludesAccessors) {
              String fieldName=null;
              String fieldType=null;
              if (each.methodName.matches(""String_Node_Str"")) {
                fieldName=each.methodName.substring(3);
                fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
                fieldType=each.argTypeNames.get(0);
              }
 else               if (each.methodName.matches(""String_Node_Str"")) {
                fieldName=each.methodName.substring(3);
                fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
                fieldType=each.returnTypeName;
              }
 else               if (each.methodName.matches(""String_Node_Str"")) {
                fieldName=each.methodName.substring(2);
                fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
                fieldType=each.returnTypeName;
              }
              if (fieldName != null) {
                String searchRegexp=""String_Node_Str"" + fieldType + ""String_Node_Str""+ fieldName+ ""String_Node_Str"";
                if (allSrc.matches(searchRegexp))                 continue;
              }
            }
            each.testMethodName=""String_Node_Str"" + each.methodName;
            if (enabledArgs) {
              each.testMethodName+=delimiter + argsPrefix;
              if (each.argTypeNames.size() == 0)               each.testMethodName+=argsDelimiter;
              for (              String argType : each.argTypeNamesInMethodName)               each.testMethodName+=argsDelimiter + argType;
            }
            if (enabledReturn)             each.testMethodName+=delimiter + returnPrefix + returnDelimiter+ each.returnTypeNameInMethodName;
            if (publicsEach.matches(RXP_SEARCH_STATIC_METHOD))             each.isStatic=true;
            testMethods.add(each);
          }
        }
      }
      if (enabledNotBlankMethods) {
        if (testMethods.size() <= 0 || testMethods.get(0) == null)         testMethods.add(new GeneratingMethodInfo());
        String[] importStartLines=allSrc.split(""String_Node_Str"");
        for (        String importStartLine : importStartLines) {
          if (!importStartLine.matches(""String_Node_Str"")) {
            String importedPackage=importStartLine.split(""String_Node_Str"")[0];
            testMethods.get(0).importList.add(importedPackage);
          }
        }
      }
    }
  finally {
      FileResourceUtil.close(br);
      FileResourceUtil.close(isr);
      FileResourceUtil.close(is);
    }
  }
  return testMethods;
}","public static List<GeneratingMethodInfo> getTestMethodsFromTarget(IFile javaFile) throws Exception {
  List<GeneratingMethodInfo> testMethods=new ArrayList<GeneratingMethodInfo>();
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  boolean enabled=store.getBoolean(STR.Preference.TestMethodGen.ENABLE);
  boolean enabledArgs=store.getBoolean(STR.Preference.TestMethodGen.ARGS);
  boolean enabledReturn=store.getBoolean(STR.Preference.TestMethodGen.RETURN);
  boolean enabledNotBlankMethods=store.getBoolean(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
  boolean enableExcludesAccessors=store.getBoolean(STR.Preference.TestMethodGen.EXLCUDES_ACCESSORS);
  String delimiter=store.getString(STR.Preference.TestMethodGen.DELIMITER);
  String argsPrefix=store.getString(STR.Preference.TestMethodGen.ARGS_PREFIX);
  String argsDelimiter=store.getString(STR.Preference.TestMethodGen.ARGS_DELIMITER);
  String returnPrefix=store.getString(STR.Preference.TestMethodGen.RETURN_PREFIX);
  String returnDelimiter=store.getString(STR.Preference.TestMethodGen.RETURN_DELIMITER);
  if (enabled) {
    InputStream is=null;
    InputStreamReader isr=null;
    BufferedReader br=null;
    try {
      String encoding=FileResourceUtil.detectEncoding(javaFile);
      is=javaFile.getContents();
      isr=new InputStreamReader(is,encoding);
      br=new BufferedReader(isr);
      StringBuffer tmpsb=new StringBuffer();
      String line=null;
      while ((line=br.readLine()) != null)       tmpsb.append(line + ""String_Node_Str"");
      String allSrc=tmpsb.toString();
      String[] publics=allSrc.split(""String_Node_Str"");
      for (      String publicsEach : publics) {
        publicsEach=publicsEach.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA);
        publicsEach=publicsEach.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (publicsEach.matches(RXP_SEARCH_METHOD)) {
          Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(publicsEach);
          if (matcher.find()) {
            GeneratingMethodInfo each=new GeneratingMethodInfo();
            if (enabledNotBlankMethods || enabledReturn) {
              each.returnTypeName=getType(matcher.group(1));
              each.returnTypeNameInMethodName=getTypeAvailableInMethodName(each.returnTypeName);
            }
            each.methodName=matcher.group(2);
            String args=matcher.group(3);
            String[] argArr=args.split(""String_Node_Str"");
            if (enabledNotBlankMethods || enabledArgs) {
              int argArrLen=argArr.length;
              for (int i=0; i < argArrLen; i++) {
                each.argTypeNames.add(getType(argArr[i]));
                each.argTypeNamesInMethodName.add(getTypeAvailableInMethodName(argArr[i]));
              }
            }
            if (enableExcludesAccessors) {
              String fieldName=null;
              String fieldType=null;
              if (each.methodName.matches(""String_Node_Str"")) {
                fieldName=each.methodName.substring(3);
                fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
                fieldType=each.argTypeNames.get(0);
              }
 else               if (each.methodName.matches(""String_Node_Str"")) {
                fieldName=each.methodName.substring(3);
                fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
                fieldType=each.returnTypeName;
              }
 else               if (each.methodName.matches(""String_Node_Str"")) {
                fieldName=each.methodName.substring(2);
                fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
                fieldType=each.returnTypeName;
              }
              if (fieldName != null) {
                String searchRegexp=""String_Node_Str"" + fieldType + ""String_Node_Str""+ fieldName+ ""String_Node_Str"";
                if (allSrc.matches(searchRegexp))                 continue;
              }
            }
            each.testMethodName=""String_Node_Str"" + each.methodName;
            if (enabledArgs) {
              each.testMethodName+=delimiter + argsPrefix;
              if (each.argTypeNames.size() == 0)               each.testMethodName+=argsDelimiter;
              for (              String argType : each.argTypeNamesInMethodName)               each.testMethodName+=argsDelimiter + argType;
            }
            if (enabledReturn)             each.testMethodName+=delimiter + returnPrefix + returnDelimiter+ each.returnTypeNameInMethodName;
            if (publicsEach.matches(RXP_SEARCH_STATIC_METHOD))             each.isStatic=true;
            testMethods.add(each);
          }
        }
      }
      if (enabledNotBlankMethods) {
        if (testMethods.size() <= 0 || testMethods.get(0) == null)         testMethods.add(new GeneratingMethodInfo());
        String[] importStartLines=allSrc.split(""String_Node_Str"");
        for (        String importStartLine : importStartLines) {
          if (!importStartLine.matches(""String_Node_Str"")) {
            String importedPackage=importStartLine.split(""String_Node_Str"")[0];
            testMethods.get(0).importList.add(importedPackage);
          }
        }
      }
    }
  finally {
      FileResourceUtil.close(br);
      FileResourceUtil.close(isr);
      FileResourceUtil.close(is);
    }
  }
  return testMethods;
}",0.961898041982713
12076,"public static List<GeneratingMethodInfo> getMethodNames(IFile javaFile) throws Exception {
  List<GeneratingMethodInfo> methodStringInfos=new ArrayList<GeneratingMethodInfo>();
  boolean enabled=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE);
  boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
  if (enabled) {
    InputStream is=null;
    InputStreamReader isr=null;
    BufferedReader br=null;
    try {
      is=javaFile.getContents();
      UniversalDetector detector=new UniversalDetector(null);
      byte[] buf=new byte[4096];
      int nread;
      while ((nread=is.read(buf)) > 0 && !detector.isDone())       detector.handleData(buf,0,nread);
      detector.dataEnd();
      String encoding=detector.getDetectedCharset();
      if (encoding == null)       encoding=Charset.defaultCharset().name();
      is=javaFile.getContents();
      isr=new InputStreamReader(is,encoding);
      br=new BufferedReader(isr);
      StringBuffer tmpsb=new StringBuffer();
      String line=null;
      while ((line=br.readLine()) != null)       tmpsb.append(line + ""String_Node_Str"");
      String allSrc=tmpsb.toString();
      String[] publics=allSrc.split(""String_Node_Str"");
      for (      String publicsEach : publics) {
        publicsEach=publicsEach.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA);
        publicsEach=publicsEach.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (publicsEach.matches(RXP_SEARCH_METHOD)) {
          Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(publicsEach);
          if (matcher.find()) {
            GeneratingMethodInfo each=new GeneratingMethodInfo();
            each.returnTypeName=getType(matcher.group(1));
            each.returnTypeNameInMethodName=getTypeAvailableInMethodName(matcher.group(1));
            each.methodName=matcher.group(2);
            each.testMethodName=each.methodName;
            String args=matcher.group(3);
            String[] argArr=args.split(""String_Node_Str"");
            int argArrLen=argArr.length;
            for (int i=0; i < argArrLen; i++) {
              each.argTypeNames.add(getType(argArr[i]));
              each.argTypeNamesInMethodName.add(getTypeAvailableInMethodName(argArr[i]));
            }
            methodStringInfos.add(each);
          }
        }
      }
      if (enabledNotBlankMethods) {
        if (methodStringInfos.size() <= 0 || methodStringInfos.get(0) == null)         methodStringInfos.add(new GeneratingMethodInfo());
        String[] importStartLines=allSrc.split(""String_Node_Str"");
        for (        String importStartLine : importStartLines) {
          if (!importStartLine.matches(""String_Node_Str"")) {
            String importedPackage=importStartLine.split(""String_Node_Str"")[0];
            methodStringInfos.get(0).importList.add(importedPackage);
          }
        }
      }
    }
  finally {
      FileResourceUtil.close(br);
      FileResourceUtil.close(isr);
      FileResourceUtil.close(is);
    }
  }
  return methodStringInfos;
}","public static List<GeneratingMethodInfo> getMethodNames(IFile javaFile) throws Exception {
  List<GeneratingMethodInfo> methodStringInfos=new ArrayList<GeneratingMethodInfo>();
  boolean enabled=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE);
  boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
  if (enabled) {
    InputStream is=null;
    InputStreamReader isr=null;
    BufferedReader br=null;
    try {
      is=javaFile.getContents();
      String encoding=FileResourceUtil.detectEncoding(javaFile);
      is=javaFile.getContents();
      isr=new InputStreamReader(is,encoding);
      br=new BufferedReader(isr);
      StringBuffer tmpsb=new StringBuffer();
      String line=null;
      while ((line=br.readLine()) != null)       tmpsb.append(line + ""String_Node_Str"");
      String allSrc=tmpsb.toString();
      String[] publics=allSrc.split(""String_Node_Str"");
      for (      String publicsEach : publics) {
        publicsEach=publicsEach.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA);
        publicsEach=publicsEach.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (publicsEach.matches(RXP_SEARCH_METHOD)) {
          Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(publicsEach);
          if (matcher.find()) {
            GeneratingMethodInfo each=new GeneratingMethodInfo();
            each.returnTypeName=getType(matcher.group(1));
            each.returnTypeNameInMethodName=getTypeAvailableInMethodName(matcher.group(1));
            each.methodName=matcher.group(2);
            each.testMethodName=each.methodName;
            String args=matcher.group(3);
            String[] argArr=args.split(""String_Node_Str"");
            int argArrLen=argArr.length;
            for (int i=0; i < argArrLen; i++) {
              each.argTypeNames.add(getType(argArr[i]));
              each.argTypeNamesInMethodName.add(getTypeAvailableInMethodName(argArr[i]));
            }
            methodStringInfos.add(each);
          }
        }
      }
      if (enabledNotBlankMethods) {
        if (methodStringInfos.size() <= 0 || methodStringInfos.get(0) == null)         methodStringInfos.add(new GeneratingMethodInfo());
        String[] importStartLines=allSrc.split(""String_Node_Str"");
        for (        String importStartLine : importStartLines) {
          if (!importStartLine.matches(""String_Node_Str"")) {
            String importedPackage=importStartLine.split(""String_Node_Str"")[0];
            methodStringInfos.get(0).importList.add(importedPackage);
          }
        }
      }
    }
  finally {
      FileResourceUtil.close(br);
      FileResourceUtil.close(isr);
      FileResourceUtil.close(is);
    }
  }
  return methodStringInfos;
}",0.933225020308692
12077,"public static List<String> getAllSourceCodeLineList(IFile javaFile) throws Exception {
  List<String> lines=new ArrayList<String>();
  InputStream is=null;
  BufferedReader br=null;
  try {
    is=javaFile.getContents();
    br=new BufferedReader(new InputStreamReader(is));
    String line=null;
    while ((line=br.readLine()) != null)     lines.add(line.replace(""String_Node_Str"",STR.EMPTY));
  }
  finally {
    FileResourceUtil.close(is);
    FileResourceUtil.close(br);
  }
  return lines;
}","public static List<String> getAllSourceCodeLineList(IFile javaFile) throws Exception {
  List<String> lines=new ArrayList<String>();
  InputStream is=null;
  BufferedReader br=null;
  try {
    is=javaFile.getContents();
    String encoding=FileResourceUtil.detectEncoding(javaFile);
    if (encoding == null)     encoding=Charset.defaultCharset().name();
    is=javaFile.getContents();
    br=new BufferedReader(new InputStreamReader(is,encoding));
    String line=null;
    while ((line=br.readLine()) != null)     lines.add(line.replace(""String_Node_Str"",STR.EMPTY));
  }
  finally {
    FileResourceUtil.close(is);
    FileResourceUtil.close(br);
  }
  return lines;
}",0.8502994011976048
12078,"public void run(IAction action){
  InputStream javaFileIStream=null;
  OutputStreamWriter testFileOSWriter=null;
  FileOutputStream fos=null;
  boolean refreshFlag=true;
  String projectName=null;
  String testCaseDirResource=null;
  String testCaseResource=null;
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseClassname=null;
    String testCaseCreateDirpath=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection)     structuredSelection=(StructuredSelection)selection;
    if (structuredSelection != null && structuredSelection.size() == 0) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,STR.Dialog.Common.TITLE,STR.Dialog.Common.REQUIRED);
      refreshFlag=false;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,STR.Dialog.Common.TITLE,STR.Dialog.Common.SELECT_ONLY_ONE);
      refreshFlag=false;
    }
 else {
      String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
      String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
      String selected=STR.EMPTY;
      int len=dirArrFromProjectRoot.length;
      for (int i=2; i < len - 1; i++)       selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
      selected+=dirArrFromProjectRoot[len - 1];
      projectName=dirArrFromProjectRoot[1];
      String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
      testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
      testCaseClassname=testTargetClassname + STR.SUFFIX_OF_TESTCASE;
      testCaseFilename=testCaseClassname + STR.JAVA_EXP;
      String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      String[] selectedDirArr=selected.split(STR.DIR_SEP);
      testCaseDirResource=""String_Node_Str"";
      int selectedDirArrLength=selectedDirArr.length;
      for (int i=0; i < selectedDirArrLength - 1; i++)       testCaseDirResource+=selectedDirArr[i] + STR.DIR_SEP;
      testCaseDirResource=testCaseDirResource.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA);
      testCaseCreateDirpath=projectRootPath + testCaseDirResource;
      File testDir=new File(testCaseCreateDirpath);
      String[] dirArr=testCaseCreateDirpath.split(STR.DIR_SEP);
      String tmpDirPath=STR.EMPTY;
      String tmpResourceDirPath=STR.EMPTY;
      for (      String each : dirArr) {
        tmpDirPath+=STR.DIR_SEP + each;
        File tmpDir=new File(tmpDirPath);
        if (tmpDir.getPath().length() <= projectRootPath.length())         continue;
        tmpResourceDirPath+=STR.DIR_SEP + each;
        if (!tmpDir.exists()) {
          if (!tmpDir.mkdir())           System.err.println(""String_Node_Str"" + tmpDir.getPath());
          if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + tmpResourceDirPath+ ""String_Node_Str"")) {
            String msg=STR.Dialog.Common.RESOURCE_REFRESH_ERROR;
            MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,msg);
            System.err.println(""String_Node_Str"");
          }
        }
      }
      if (!testDir.mkdirs())       System.err.println(""String_Node_Str"");
      if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource)) {
        MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
        System.err.println(""String_Node_Str"");
      }
      try {
        File outputFile=new File(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
        String msg=STR.Dialog.Common.ALREADY_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ STR.Dialog.Common.CONFIRM_PROCEED;
        if (!outputFile.exists() || MessageDialog.openConfirm(new Shell(),STR.Dialog.Common.TITLE,msg)) {
          String targetClass=""String_Node_Str"" + projectName + ""String_Node_Str""+ selected;
          IResource targetClassResource=workspaceRoot.findMember(targetClass);
          IFile file=(IFile)targetClassResource;
          List<GeneratingMethodInfo> testMethods=TestCaseGenerateUtil.getTestMethodsFromTarget(file);
          fos=new FileOutputStream(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
          testFileOSWriter=new OutputStreamWriter(fos);
          StringBuffer sb=new StringBuffer();
          String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
          String testPackageString=STR.EMPTY;
          String[] tmpDirArr=selected.split(STR.DIR_SEP);
          StringBuffer dirSb=new StringBuffer();
          int packageArrLen=tmpDirArr.length - 2;
          for (int i=3; i < packageArrLen; i++) {
            dirSb.append(tmpDirArr[i]);
            dirSb.append(""String_Node_Str"");
          }
          dirSb.append(tmpDirArr[packageArrLen]);
          testPackageString=dirSb.toString();
          sb.append(""String_Node_Str"");
          sb.append(testPackageString);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodAutoGenerate.METHOD_SAMPLE_IMPLEMENTATION);
          if (enabledNotBlankMethods) {
            sb.append(CRLF);
            List<String> importedPackageList=testMethods.get(0).importList;
            for (            String importedPackage : importedPackageList) {
              sb.append(""String_Node_Str"");
              sb.append(importedPackage);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
            }
          }
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(testCaseClassname);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          for (          GeneratingMethodInfo testMethod : testMethods) {
            sb.append(""String_Node_Str"");
            sb.append(testMethod.testMethodName);
            sb.append(""String_Node_Str"");
            sb.append(CRLF);
            sb.append(""String_Node_Str"");
            sb.append(STR.AUTO_GEN_MSG_TODO);
            sb.append(CRLF);
            if (enabledNotBlankMethods) {
              String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testMethods,testTargetClassname);
              sb.append(notBlankSourceCode);
            }
            sb.append(""String_Node_Str"");
            sb.append(CRLF);
            sb.append(CRLF);
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          testFileOSWriter.write(sb.toString());
        }
      }
 catch (      FileNotFoundException fnfe) {
        fnfe.printStackTrace();
      }
 finally {
        FileResourceUtil.close(testFileOSWriter);
        FileResourceUtil.close(fos);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    FileResourceUtil.close(javaFileIStream);
    FileResourceUtil.close(testFileOSWriter);
  }
  if (refreshFlag && !ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource+ ""String_Node_Str"")) {
    MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
    System.err.println(""String_Node_Str"");
  }
 else {
    int retryCount=0;
    IEditorPart editorPart=null;
    ThreadUtil.sleep(1500);
    while (true) {
      try {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        IWorkspaceRoot root=workspace.getRoot();
        IProject project=root.getProject(projectName);
        IFile testCaseFile=project.getFile(testCaseResource);
        String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        editorPart=IDE.openEditor(page,testCaseFile,editorId);
        if (editorPart == null)         throw new NullPointerException();
        break;
      }
 catch (      Exception e) {
        retryCount++;
        if (retryCount > 3)         break;
        ThreadUtil.sleep(1500);
      }
    }
    editorPart.setFocus();
  }
}","public void run(IAction action){
  InputStream javaFileIStream=null;
  OutputStreamWriter testFileOSWriter=null;
  FileOutputStream fos=null;
  boolean refreshFlag=true;
  String projectName=null;
  String testCaseDirResource=null;
  String testCaseResource=null;
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseClassname=null;
    String testCaseCreateDirpath=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection)     structuredSelection=(StructuredSelection)selection;
    if (structuredSelection != null && structuredSelection.size() == 0) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,STR.Dialog.Common.TITLE,STR.Dialog.Common.REQUIRED);
      refreshFlag=false;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,STR.Dialog.Common.TITLE,STR.Dialog.Common.SELECT_ONLY_ONE);
      refreshFlag=false;
    }
 else {
      String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
      String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
      String selected=STR.EMPTY;
      int len=dirArrFromProjectRoot.length;
      for (int i=2; i < len - 1; i++)       selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
      selected+=dirArrFromProjectRoot[len - 1];
      projectName=dirArrFromProjectRoot[1];
      String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
      testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
      testCaseClassname=testTargetClassname + STR.SUFFIX_OF_TESTCASE;
      testCaseFilename=testCaseClassname + STR.JAVA_EXP;
      String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      String[] selectedDirArr=selected.split(STR.DIR_SEP);
      testCaseDirResource=""String_Node_Str"";
      int selectedDirArrLength=selectedDirArr.length;
      for (int i=0; i < selectedDirArrLength - 1; i++)       testCaseDirResource+=selectedDirArr[i] + STR.DIR_SEP;
      testCaseDirResource=testCaseDirResource.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA);
      testCaseCreateDirpath=projectRootPath + testCaseDirResource;
      File testDir=new File(testCaseCreateDirpath);
      String[] dirArr=testCaseCreateDirpath.split(STR.DIR_SEP);
      String tmpDirPath=STR.EMPTY;
      String tmpResourceDirPath=STR.EMPTY;
      for (      String each : dirArr) {
        tmpDirPath+=STR.DIR_SEP + each;
        File tmpDir=new File(tmpDirPath);
        if (tmpDir.getPath().length() <= projectRootPath.length())         continue;
        tmpResourceDirPath+=STR.DIR_SEP + each;
        if (!tmpDir.exists()) {
          if (!tmpDir.mkdir())           System.err.println(""String_Node_Str"" + tmpDir.getPath());
          if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + tmpResourceDirPath+ ""String_Node_Str"")) {
            String msg=STR.Dialog.Common.RESOURCE_REFRESH_ERROR;
            MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,msg);
            System.err.println(""String_Node_Str"");
          }
        }
      }
      if (!testDir.mkdirs())       System.err.println(""String_Node_Str"");
      if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource)) {
        MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
        System.err.println(""String_Node_Str"");
      }
      try {
        File outputFile=new File(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
        String msg=STR.Dialog.Common.ALREADY_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ STR.Dialog.Common.CONFIRM_PROCEED;
        if (!outputFile.exists() || MessageDialog.openConfirm(new Shell(),STR.Dialog.Common.TITLE,msg)) {
          String targetClass=""String_Node_Str"" + projectName + ""String_Node_Str""+ selected;
          IResource targetClassResource=workspaceRoot.findMember(targetClass);
          IFile file=(IFile)targetClassResource;
          List<GeneratingMethodInfo> testMethods=TestCaseGenerateUtil.getTestMethodsFromTarget(file);
          fos=new FileOutputStream(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
          testFileOSWriter=new OutputStreamWriter(fos);
          StringBuffer sb=new StringBuffer();
          String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
          String testPackageString=STR.EMPTY;
          String[] tmpDirArr=selected.split(STR.DIR_SEP);
          StringBuffer dirSb=new StringBuffer();
          int packageArrLen=tmpDirArr.length - 2;
          for (int i=3; i < packageArrLen; i++) {
            dirSb.append(tmpDirArr[i]);
            dirSb.append(""String_Node_Str"");
          }
          dirSb.append(tmpDirArr[packageArrLen]);
          testPackageString=dirSb.toString();
          sb.append(""String_Node_Str"");
          sb.append(testPackageString);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
          if (enabledNotBlankMethods) {
            sb.append(CRLF);
            List<String> importedPackageList=testMethods.get(0).importList;
            for (            String importedPackage : importedPackageList) {
              sb.append(""String_Node_Str"");
              sb.append(importedPackage);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
            }
          }
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(testCaseClassname);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          for (          GeneratingMethodInfo testMethod : testMethods) {
            sb.append(""String_Node_Str"");
            sb.append(testMethod.testMethodName);
            sb.append(""String_Node_Str"");
            sb.append(CRLF);
            sb.append(""String_Node_Str"");
            sb.append(STR.AUTO_GEN_MSG_TODO);
            sb.append(CRLF);
            if (enabledNotBlankMethods) {
              String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testMethods,testTargetClassname);
              sb.append(notBlankSourceCode);
            }
            sb.append(""String_Node_Str"");
            sb.append(CRLF);
            sb.append(CRLF);
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          testFileOSWriter.write(sb.toString());
        }
      }
 catch (      FileNotFoundException fnfe) {
        fnfe.printStackTrace();
      }
 finally {
        FileResourceUtil.close(testFileOSWriter);
        FileResourceUtil.close(fos);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    FileResourceUtil.close(javaFileIStream);
    FileResourceUtil.close(testFileOSWriter);
  }
  if (refreshFlag && !ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource+ ""String_Node_Str"")) {
    MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
    System.err.println(""String_Node_Str"");
  }
 else {
    int retryCount=0;
    IEditorPart editorPart=null;
    ThreadUtil.sleep(1500);
    while (true) {
      try {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        IWorkspaceRoot root=workspace.getRoot();
        IProject project=root.getProject(projectName);
        IFile testCaseFile=project.getFile(testCaseResource);
        String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        editorPart=IDE.openEditor(page,testCaseFile,editorId);
        if (editorPart == null)         throw new NullPointerException();
        break;
      }
 catch (      Exception e) {
        retryCount++;
        if (retryCount > 3)         break;
        ThreadUtil.sleep(1500);
      }
    }
    editorPart.setFocus();
  }
}",0.9994737765304332
12079,"public void run(IAction action){
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String projectName=null;
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseCreateFilepath=null;
    String testCaseResource=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
 else {
    }
    if (structuredSelection != null && structuredSelection.size() == 0) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.REQUIRED);
      return;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.SELECT_ONLY_ONE);
      return;
    }
    String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
    String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
    String selected=STR.EMPTY;
    int allDirLen=dirArrFromProjectRoot.length - 1;
    for (int i=2; i < allDirLen; i++)     selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
    selected+=dirArrFromProjectRoot[allDirLen];
    projectName=dirArrFromProjectRoot[1];
    String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
    testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
    testCaseFilename=testTargetClassname + STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP;
    String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
    if (testTargetClassname == null) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.TestCase.SELECT_JAVA_FILE);
    }
 else {
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      testCaseCreateFilepath=projectRootPath + selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      File outputFile=new File(testCaseCreateFilepath);
      if (!outputFile.exists()) {
        String msg=STR.Dialog.Common.NOT_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ STR.Dialog.Common.COMFIRM_CREATE_NEW_FILE;
        if (testCaseFilename != null && MessageDialog.openConfirm(new Shell(),STR.Dialog.Common.TITLE,msg)) {
          new CreateNewTestCaseAction().run(action,selection);
        }
        return;
      }
      int retryCount=0;
      IEditorPart editorPart=null;
      while (true) {
        try {
          IProject project=workspaceRoot.getProject(projectName);
          IFile testCaseFile=project.getFile(testCaseResource);
          String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          editorPart=IDE.openEditor(page,testCaseFile,editorId);
          editorPart.setFocus();
          if (Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodAutoGenerate.ENABLE)) {
            IFile testTargetFile=project.getFile(selected);
            List<GeneratingMethodInfo> unimpledTestMethodNames=TestCaseGenerateUtil.getUnimplementedTestMethodNames(testTargetFile,testCaseFile);
            if (unimpledTestMethodNames.size() > 0) {
              List<String> lines=TestCaseGenerateUtil.getAllSourceCodeLineList(testCaseFile);
              OutputStreamWriter testFileOSWriter=null;
              FileOutputStream fos=null;
              try {
                fos=new FileOutputStream(projectRootPath + STR.DIR_SEP + testCaseResource);
                testFileOSWriter=new OutputStreamWriter(fos);
                boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodAutoGenerate.METHOD_SAMPLE_IMPLEMENTATION);
                StringBuffer sb=new StringBuffer();
                String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
                for (                String line : lines) {
                  if (line.equals(""String_Node_Str"")) {
                    for (                    GeneratingMethodInfo testMethod : unimpledTestMethodNames) {
                      sb.append(""String_Node_Str"");
                      sb.append(testMethod.testMethodName);
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(""String_Node_Str"");
                      sb.append(STR.AUTO_GEN_MSG_TODO);
                      sb.append(CRLF);
                      if (enabledNotBlankMethods) {
                        String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,unimpledTestMethodNames,testTargetClassname);
                        sb.append(notBlankSourceCode);
                      }
                      sb.append(CRLF);
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(CRLF);
                    }
                    sb.append(""String_Node_Str"");
                    sb.append(CRLF);
                    break;
                  }
 else {
                    sb.append(line);
                    sb.append(CRLF);
                  }
                }
                String content=sb.toString();
                testFileOSWriter.write(content);
              }
  finally {
                FileResourceUtil.close(testFileOSWriter);
                FileResourceUtil.close(fos);
              }
            }
            if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseResource+ ""String_Node_Str"")) {
              MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
              System.err.println(""String_Node_Str"");
            }
 else {
              retryCount=0;
              ThreadUtil.sleep(1500);
              while (true) {
                try {
                  editorPart=IDE.openEditor(page,testCaseFile,editorId);
                  if (editorPart == null)                   throw new NullPointerException();
                  break;
                }
 catch (                Exception e) {
                  retryCount++;
                  if (retryCount > 3)                   break;
                  ThreadUtil.sleep(1500);
                }
              }
              editorPart.setFocus();
            }
          }
        }
 catch (        Exception e) {
          retryCount++;
          if (retryCount > 10)           break;
          e.printStackTrace();
          ThreadUtil.sleep(1500);
        }
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void run(IAction action){
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String projectName=null;
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseCreateFilepath=null;
    String testCaseResource=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
 else {
    }
    if (structuredSelection != null && structuredSelection.size() == 0) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.REQUIRED);
      return;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.SELECT_ONLY_ONE);
      return;
    }
    String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
    String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
    String selected=STR.EMPTY;
    int allDirLen=dirArrFromProjectRoot.length - 1;
    for (int i=2; i < allDirLen; i++)     selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
    selected+=dirArrFromProjectRoot[allDirLen];
    projectName=dirArrFromProjectRoot[1];
    String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
    testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
    testCaseFilename=testTargetClassname + STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP;
    String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
    if (testTargetClassname == null) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.TestCase.SELECT_JAVA_FILE);
    }
 else {
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      testCaseCreateFilepath=projectRootPath + selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      File outputFile=new File(testCaseCreateFilepath);
      if (!outputFile.exists()) {
        String msg=STR.Dialog.Common.NOT_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ STR.Dialog.Common.COMFIRM_CREATE_NEW_FILE;
        if (testCaseFilename != null && MessageDialog.openConfirm(new Shell(),STR.Dialog.Common.TITLE,msg)) {
          new CreateNewTestCaseAction().run(action,selection);
        }
        return;
      }
      int retryCount=0;
      IEditorPart editorPart=null;
      while (true) {
        try {
          IProject project=workspaceRoot.getProject(projectName);
          IFile testCaseFile=project.getFile(testCaseResource);
          String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          editorPart=IDE.openEditor(page,testCaseFile,editorId);
          editorPart.setFocus();
          if (Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE)) {
            IFile testTargetFile=project.getFile(selected);
            List<GeneratingMethodInfo> unimpledTestMethodNames=TestCaseGenerateUtil.getUnimplementedTestMethodNames(testTargetFile,testCaseFile);
            if (unimpledTestMethodNames.size() > 0) {
              List<String> lines=TestCaseGenerateUtil.getAllSourceCodeLineList(testCaseFile);
              OutputStreamWriter testFileOSWriter=null;
              FileOutputStream fos=null;
              try {
                fos=new FileOutputStream(projectRootPath + STR.DIR_SEP + testCaseResource);
                testFileOSWriter=new OutputStreamWriter(fos);
                boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
                StringBuffer sb=new StringBuffer();
                String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
                for (                String line : lines) {
                  if (line.equals(""String_Node_Str"")) {
                    for (                    GeneratingMethodInfo testMethod : unimpledTestMethodNames) {
                      sb.append(""String_Node_Str"");
                      sb.append(testMethod.testMethodName);
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(""String_Node_Str"");
                      sb.append(STR.AUTO_GEN_MSG_TODO);
                      sb.append(CRLF);
                      if (enabledNotBlankMethods) {
                        String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,unimpledTestMethodNames,testTargetClassname);
                        sb.append(notBlankSourceCode);
                      }
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(CRLF);
                    }
                    sb.append(""String_Node_Str"");
                    sb.append(CRLF);
                    break;
                  }
 else {
                    sb.append(line);
                    sb.append(CRLF);
                  }
                }
                String content=sb.toString();
                testFileOSWriter.write(content);
              }
  finally {
                FileResourceUtil.close(testFileOSWriter);
                FileResourceUtil.close(fos);
              }
            }
            if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseResource+ ""String_Node_Str"")) {
              MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
              System.err.println(""String_Node_Str"");
            }
 else {
              retryCount=0;
              ThreadUtil.sleep(1500);
              while (true) {
                try {
                  editorPart=IDE.openEditor(page,testCaseFile,editorId);
                  if (editorPart == null)                   throw new NullPointerException();
                  break;
                }
 catch (                Exception e) {
                  retryCount++;
                  if (retryCount > 3)                   break;
                  ThreadUtil.sleep(1500);
                }
              }
              editorPart.setFocus();
            }
          }
        }
 catch (        Exception e) {
          retryCount++;
          if (retryCount > 10)           break;
          e.printStackTrace();
          ThreadUtil.sleep(1500);
        }
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9958312001755284
12080,"@Override protected void createFieldEditors(){
{
    Composite parent=getFieldEditorParent();
    Group commonPrentGroup=new Group(parent,0);
{
      FillLayout parentLayout=new FillLayout(256);
      parentLayout.marginHeight=2;
      parentLayout.marginWidth=4;
      commonPrentGroup.setLayout(parentLayout);
      commonPrentGroup.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      commonPrentGroup.setLayoutData(gd);
      Composite grp=new Composite(commonPrentGroup,0);
      grp.setLayout(new GridLayout(2,false));
      Label label=new Label(grp,0);
      label.setText(""String_Node_Str"");
      gd=new GridData(768);
      gd.horizontalSpan=2;
      label.setLayoutData(gd);
      addField(new StringFieldEditor(STR.Preference.Common.SRC_MAIN_PATH,STR.Preference.Common.SRC_MAIN_PATH,grp));
      addField(new StringFieldEditor(STR.Preference.Common.SRC_TEST_PATH,STR.Preference.Common.SRC_TEST_PATH,grp));
    }
    BooleanFieldEditor enable=new BooleanFieldEditor(STR.Preference.TestMethodAutoGenerate.ENABLE,STR.Preference.TestMethodAutoGenerate.ENABLE,parent);
    addField(enable);
    Group genTestMethodsParentGroup=new Group(parent,0);
{
      FillLayout parentLayout=new FillLayout(256);
      parentLayout.marginHeight=2;
      parentLayout.marginWidth=4;
      genTestMethodsParentGroup.setLayout(parentLayout);
      genTestMethodsParentGroup.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      genTestMethodsParentGroup.setLayoutData(gd);
      Composite grp=new Composite(genTestMethodsParentGroup,0);
      grp.setLayout(new GridLayout(2,false));
      Label label=new Label(grp,0);
      label.setText(""String_Node_Str"");
      gd=new GridData(768);
      gd.horizontalSpan=2;
      label.setLayoutData(gd);
    }
{
      Group group=new Group(genTestMethodsParentGroup,0);
      FillLayout layout=new FillLayout(256);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      Composite grp=new Composite(group,0);
      grp.setLayout(new GridLayout(2,false));
      addField(new StringFieldEditor(STR.Preference.TestMethodAutoGenerate.DELIMITER,STR.Preference.TestMethodAutoGenerate.DELIMITER,grp));
    }
{
      BooleanFieldEditor enableArgs=new BooleanFieldEditor(STR.Preference.TestMethodAutoGenerate.ARGS,STR.Preference.TestMethodAutoGenerate.ARGS,genTestMethodsParentGroup);
      addField(enableArgs);
      Group group=new Group(genTestMethodsParentGroup,0);
      FillLayout layout=new FillLayout(256);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      Composite grp=new Composite(group,0);
      grp.setLayout(new GridLayout(2,false));
      StringFieldEditor argsPrefix=new StringFieldEditor(STR.Preference.TestMethodAutoGenerate.ARGS_PREFIX,STR.Preference.TestMethodAutoGenerate.ARGS_PREFIX,grp);
      StringFieldEditor argsDelimiter=new StringFieldEditor(STR.Preference.TestMethodAutoGenerate.ARGS_DELIMITER,STR.Preference.TestMethodAutoGenerate.ARGS_DELIMITER,grp);
      addField(argsPrefix);
      addField(argsDelimiter);
    }
{
      addField(new BooleanFieldEditor(STR.Preference.TestMethodAutoGenerate.RETURN,STR.Preference.TestMethodAutoGenerate.RETURN,genTestMethodsParentGroup));
      Group group=new Group(genTestMethodsParentGroup,0);
      FillLayout layout=new FillLayout(256);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      Composite grp=new Composite(group,0);
      grp.setLayout(new GridLayout(2,false));
      StringFieldEditor argsPrefix=new StringFieldEditor(STR.Preference.TestMethodAutoGenerate.RETURN_PREFIX,STR.Preference.TestMethodAutoGenerate.RETURN_PREFIX,grp);
      StringFieldEditor argsDelimiter=new StringFieldEditor(STR.Preference.TestMethodAutoGenerate.RETURN_DELIMITER,STR.Preference.TestMethodAutoGenerate.RETURN_DELIMITER,grp);
      addField(argsPrefix);
      addField(argsDelimiter);
    }
{
      BooleanFieldEditor enableArgs=new BooleanFieldEditor(STR.Preference.TestMethodAutoGenerate.METHOD_SAMPLE_IMPLEMENTATION,STR.Preference.TestMethodAutoGenerate.METHOD_SAMPLE_IMPLEMENTATION,genTestMethodsParentGroup);
      addField(enableArgs);
    }
  }
}","@Override protected void createFieldEditors(){
{
    Composite parent=getFieldEditorParent();
    Group commonPrentGroup=new Group(parent,0);
{
      FillLayout parentLayout=new FillLayout(256);
      parentLayout.marginHeight=2;
      parentLayout.marginWidth=4;
      commonPrentGroup.setLayout(parentLayout);
      commonPrentGroup.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      commonPrentGroup.setLayoutData(gd);
      Composite grp=new Composite(commonPrentGroup,0);
      grp.setLayout(new GridLayout(2,false));
      Label label=new Label(grp,0);
      label.setText(""String_Node_Str"");
      gd=new GridData(768);
      gd.horizontalSpan=2;
      label.setLayoutData(gd);
      addField(new StringFieldEditor(STR.Preference.Common.SRC_MAIN_PATH,STR.Preference.Common.SRC_MAIN_PATH,grp));
      addField(new StringFieldEditor(STR.Preference.Common.SRC_TEST_PATH,STR.Preference.Common.SRC_TEST_PATH,grp));
    }
    BooleanFieldEditor enable=new BooleanFieldEditor(STR.Preference.TestMethodGen.ENABLE,STR.Preference.TestMethodGen.ENABLE,parent);
    addField(enable);
    Group genTestMethodsParentGroup=new Group(parent,0);
{
      FillLayout parentLayout=new FillLayout(256);
      parentLayout.marginHeight=2;
      parentLayout.marginWidth=4;
      genTestMethodsParentGroup.setLayout(parentLayout);
      genTestMethodsParentGroup.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      genTestMethodsParentGroup.setLayoutData(gd);
      Composite grp=new Composite(genTestMethodsParentGroup,0);
      grp.setLayout(new GridLayout(2,false));
    }
{
      Group group=new Group(genTestMethodsParentGroup,0);
      FillLayout layout=new FillLayout(256);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      Composite grp=new Composite(group,0);
      grp.setLayout(new GridLayout(2,false));
      addField(new StringFieldEditor(STR.Preference.TestMethodGen.DELIMITER,STR.Preference.TestMethodGen.DELIMITER,grp));
    }
{
      BooleanFieldEditor enableArgs=new BooleanFieldEditor(STR.Preference.TestMethodGen.ARGS,STR.Preference.TestMethodGen.ARGS,genTestMethodsParentGroup);
      addField(enableArgs);
      Group group=new Group(genTestMethodsParentGroup,0);
      FillLayout layout=new FillLayout(256);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      Composite grp=new Composite(group,0);
      grp.setLayout(new GridLayout(2,false));
      StringFieldEditor argsPrefix=new StringFieldEditor(STR.Preference.TestMethodGen.ARGS_PREFIX,STR.Preference.TestMethodGen.ARGS_PREFIX,grp);
      StringFieldEditor argsDelimiter=new StringFieldEditor(STR.Preference.TestMethodGen.ARGS_DELIMITER,STR.Preference.TestMethodGen.ARGS_DELIMITER,grp);
      addField(argsPrefix);
      addField(argsDelimiter);
    }
{
      addField(new BooleanFieldEditor(STR.Preference.TestMethodGen.RETURN,STR.Preference.TestMethodGen.RETURN,genTestMethodsParentGroup));
      Group group=new Group(genTestMethodsParentGroup,0);
      FillLayout layout=new FillLayout(256);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      Composite grp=new Composite(group,0);
      grp.setLayout(new GridLayout(2,false));
      StringFieldEditor argsPrefix=new StringFieldEditor(STR.Preference.TestMethodGen.RETURN_PREFIX,STR.Preference.TestMethodGen.RETURN_PREFIX,grp);
      StringFieldEditor argsDelimiter=new StringFieldEditor(STR.Preference.TestMethodGen.RETURN_DELIMITER,STR.Preference.TestMethodGen.RETURN_DELIMITER,grp);
      addField(argsPrefix);
      addField(argsDelimiter);
    }
{
      BooleanFieldEditor execludesAccessors=new BooleanFieldEditor(STR.Preference.TestMethodGen.EXLCUDES_ACCESSORS,STR.Preference.TestMethodGen.EXLCUDES_ACCESSORS,genTestMethodsParentGroup);
      addField(execludesAccessors);
    }
{
      BooleanFieldEditor enableGenerateSample=new BooleanFieldEditor(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION,STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION,genTestMethodsParentGroup);
      addField(enableGenerateSample);
    }
  }
}",0.7282668124658284
12081,"@Override public void initializeDefaultPreferences(){
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  store.setDefault(STR.Preference.Common.SRC_MAIN_PATH,""String_Node_Str"");
  store.setDefault(STR.Preference.Common.SRC_TEST_PATH,""String_Node_Str"");
  store.setDefault(STR.Preference.TestMethodAutoGenerate.ENABLE,true);
  store.setDefault(STR.Preference.TestMethodAutoGenerate.DELIMITER,""String_Node_Str"");
  store.setDefault(STR.Preference.TestMethodAutoGenerate.ARGS,true);
  store.setDefault(STR.Preference.TestMethodAutoGenerate.ARGS_PREFIX,""String_Node_Str"");
  store.setDefault(STR.Preference.TestMethodAutoGenerate.ARGS_DELIMITER,""String_Node_Str"");
  store.setDefault(STR.Preference.TestMethodAutoGenerate.RETURN,false);
  store.setDefault(STR.Preference.TestMethodAutoGenerate.RETURN_PREFIX,""String_Node_Str"");
  store.setDefault(STR.Preference.TestMethodAutoGenerate.RETURN_DELIMITER,""String_Node_Str"");
  store.setDefault(STR.Preference.TestMethodAutoGenerate.METHOD_SAMPLE_IMPLEMENTATION,false);
}","@Override public void initializeDefaultPreferences(){
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
{
    store.setDefault(STR.Preference.Common.SRC_MAIN_PATH,""String_Node_Str"");
    store.setDefault(STR.Preference.Common.SRC_TEST_PATH,""String_Node_Str"");
  }
{
    store.setDefault(STR.Preference.TestMethodGen.ENABLE,true);
    store.setDefault(STR.Preference.TestMethodGen.DELIMITER,""String_Node_Str"");
    store.setDefault(STR.Preference.TestMethodGen.ARGS,true);
    store.setDefault(STR.Preference.TestMethodGen.ARGS_PREFIX,""String_Node_Str"");
    store.setDefault(STR.Preference.TestMethodGen.ARGS_DELIMITER,""String_Node_Str"");
    store.setDefault(STR.Preference.TestMethodGen.RETURN,false);
    store.setDefault(STR.Preference.TestMethodGen.RETURN_PREFIX,""String_Node_Str"");
    store.setDefault(STR.Preference.TestMethodGen.RETURN_DELIMITER,""String_Node_Str"");
    store.setDefault(STR.Preference.TestMethodGen.EXLCUDES_ACCESSORS,true);
    store.setDefault(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION,true);
  }
}",0.5038167938931297
12082,"public static List<GeneratingMethodInfo> getTestMethodsFromTarget(IFile javaFile) throws Exception {
  List<GeneratingMethodInfo> testMethods=new ArrayList<GeneratingMethodInfo>();
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  boolean enabled=store.getBoolean(STR.Preference.TestMethodAutoGenerate.ENABLE);
  boolean enabledArgs=store.getBoolean(STR.Preference.TestMethodAutoGenerate.ARGS);
  boolean enabledReturn=store.getBoolean(STR.Preference.TestMethodAutoGenerate.RETURN);
  boolean enabledNotBlankMethods=store.getBoolean(STR.Preference.TestMethodAutoGenerate.METHOD_SAMPLE_IMPLEMENTATION);
  String delimiter=store.getString(STR.Preference.TestMethodAutoGenerate.DELIMITER);
  String argsPrefix=store.getString(STR.Preference.TestMethodAutoGenerate.ARGS_PREFIX);
  String argsDelimiter=store.getString(STR.Preference.TestMethodAutoGenerate.ARGS_DELIMITER);
  String returnPrefix=store.getString(STR.Preference.TestMethodAutoGenerate.RETURN_PREFIX);
  String returnDelimiter=store.getString(STR.Preference.TestMethodAutoGenerate.RETURN_DELIMITER);
  if (enabled) {
    InputStream is=null;
    InputStreamReader isr=null;
    BufferedReader br=null;
    try {
      is=javaFile.getContents();
      isr=new InputStreamReader(is);
      br=new BufferedReader(isr);
      StringBuffer tmpsb=new StringBuffer();
      String line=null;
      while ((line=br.readLine()) != null)       tmpsb.append(line + ""String_Node_Str"");
      String allSrc=tmpsb.toString();
      String[] publics=allSrc.split(""String_Node_Str"");
      for (      String publicsEach : publics) {
        publicsEach=publicsEach.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA);
        publicsEach=publicsEach.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (publicsEach.matches(RXP_SEARCH_METHOD)) {
          Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(publicsEach);
          if (matcher.find()) {
            GeneratingMethodInfo each=new GeneratingMethodInfo();
            if (enabledNotBlankMethods || enabledReturn) {
              each.returnTypeName=getType(matcher.group(1));
              each.returnTypeNameInMethodName=getTypeAvailableInMethodName(each.returnTypeName);
            }
            each.methodName=matcher.group(2);
            String args=matcher.group(3);
            String[] argArr=args.split(""String_Node_Str"");
            if (enabledNotBlankMethods || enabledArgs) {
              int argArrLen=argArr.length;
              for (int i=0; i < argArrLen; i++) {
                each.argTypeNames.add(getType(argArr[i]));
                each.argTypeNamesInMethodName.add(getTypeAvailableInMethodName(argArr[i]));
              }
            }
            each.testMethodName=""String_Node_Str"" + each.methodName;
            if (enabledArgs) {
              each.testMethodName+=delimiter + argsPrefix;
              if (each.argTypeNames.size() == 0)               each.testMethodName+=argsDelimiter;
              for (              String argType : each.argTypeNamesInMethodName)               each.testMethodName+=argsDelimiter + argType;
            }
            if (enabledReturn)             each.testMethodName+=delimiter + returnPrefix + returnDelimiter+ each.returnTypeNameInMethodName;
            if (publicsEach.matches(RXP_SEARCH_STATIC_METHOD))             each.isStatic=true;
            testMethods.add(each);
          }
        }
      }
      if (enabledNotBlankMethods) {
        String[] importStartLines=allSrc.split(""String_Node_Str"");
        for (        String importStartLine : importStartLines) {
          if (!importStartLine.matches(""String_Node_Str"")) {
            String importedPackage=importStartLine.split(""String_Node_Str"")[0];
            testMethods.get(0).importList.add(importedPackage);
          }
        }
      }
    }
  finally {
      FileResourceUtil.close(br);
      FileResourceUtil.close(isr);
      FileResourceUtil.close(is);
    }
  }
  return testMethods;
}","public static List<GeneratingMethodInfo> getTestMethodsFromTarget(IFile javaFile) throws Exception {
  List<GeneratingMethodInfo> testMethods=new ArrayList<GeneratingMethodInfo>();
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  boolean enabled=store.getBoolean(STR.Preference.TestMethodGen.ENABLE);
  boolean enabledArgs=store.getBoolean(STR.Preference.TestMethodGen.ARGS);
  boolean enabledReturn=store.getBoolean(STR.Preference.TestMethodGen.RETURN);
  boolean enabledNotBlankMethods=store.getBoolean(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
  boolean enableExcludesAccessors=store.getBoolean(STR.Preference.TestMethodGen.EXLCUDES_ACCESSORS);
  String delimiter=store.getString(STR.Preference.TestMethodGen.DELIMITER);
  String argsPrefix=store.getString(STR.Preference.TestMethodGen.ARGS_PREFIX);
  String argsDelimiter=store.getString(STR.Preference.TestMethodGen.ARGS_DELIMITER);
  String returnPrefix=store.getString(STR.Preference.TestMethodGen.RETURN_PREFIX);
  String returnDelimiter=store.getString(STR.Preference.TestMethodGen.RETURN_DELIMITER);
  if (enabled) {
    InputStream is=null;
    InputStreamReader isr=null;
    BufferedReader br=null;
    try {
      is=javaFile.getContents();
      isr=new InputStreamReader(is);
      br=new BufferedReader(isr);
      StringBuffer tmpsb=new StringBuffer();
      String line=null;
      while ((line=br.readLine()) != null)       tmpsb.append(line + ""String_Node_Str"");
      String allSrc=tmpsb.toString();
      String[] publics=allSrc.split(""String_Node_Str"");
      for (      String publicsEach : publics) {
        publicsEach=publicsEach.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA);
        publicsEach=publicsEach.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (publicsEach.matches(RXP_SEARCH_METHOD)) {
          Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(publicsEach);
          if (matcher.find()) {
            GeneratingMethodInfo each=new GeneratingMethodInfo();
            if (enabledNotBlankMethods || enabledReturn) {
              each.returnTypeName=getType(matcher.group(1));
              each.returnTypeNameInMethodName=getTypeAvailableInMethodName(each.returnTypeName);
            }
            each.methodName=matcher.group(2);
            String args=matcher.group(3);
            String[] argArr=args.split(""String_Node_Str"");
            if (enabledNotBlankMethods || enabledArgs) {
              int argArrLen=argArr.length;
              for (int i=0; i < argArrLen; i++) {
                each.argTypeNames.add(getType(argArr[i]));
                each.argTypeNamesInMethodName.add(getTypeAvailableInMethodName(argArr[i]));
              }
            }
            if (enableExcludesAccessors) {
              String fieldName=null;
              String fieldType=null;
              if (each.methodName.matches(""String_Node_Str"")) {
                fieldName=each.methodName.substring(3);
                fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
                fieldType=each.argTypeNames.get(0);
              }
 else               if (each.methodName.matches(""String_Node_Str"")) {
                fieldName=each.methodName.substring(3);
                fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
                fieldType=each.returnTypeName;
              }
 else               if (each.methodName.matches(""String_Node_Str"")) {
                fieldName=each.methodName.substring(2);
                fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
                fieldType=each.returnTypeName;
              }
              if (fieldName != null) {
                String searchRegexp=""String_Node_Str"" + fieldType + ""String_Node_Str""+ fieldName+ ""String_Node_Str"";
                if (allSrc.matches(searchRegexp))                 continue;
              }
            }
            each.testMethodName=""String_Node_Str"" + each.methodName;
            if (enabledArgs) {
              each.testMethodName+=delimiter + argsPrefix;
              if (each.argTypeNames.size() == 0)               each.testMethodName+=argsDelimiter;
              for (              String argType : each.argTypeNamesInMethodName)               each.testMethodName+=argsDelimiter + argType;
            }
            if (enabledReturn)             each.testMethodName+=delimiter + returnPrefix + returnDelimiter+ each.returnTypeNameInMethodName;
            if (publicsEach.matches(RXP_SEARCH_STATIC_METHOD))             each.isStatic=true;
            testMethods.add(each);
          }
        }
      }
      if (enabledNotBlankMethods) {
        String[] importStartLines=allSrc.split(""String_Node_Str"");
        for (        String importStartLine : importStartLines) {
          if (!importStartLine.matches(""String_Node_Str"")) {
            String importedPackage=importStartLine.split(""String_Node_Str"")[0];
            testMethods.get(0).importList.add(importedPackage);
          }
        }
      }
    }
  finally {
      FileResourceUtil.close(br);
      FileResourceUtil.close(isr);
      FileResourceUtil.close(is);
    }
  }
  return testMethods;
}",0.8440699658703071
12083,"public static List<GeneratingMethodInfo> getMethodNames(IFile javaFile) throws Exception {
  List<GeneratingMethodInfo> methodStringInfos=new ArrayList<GeneratingMethodInfo>();
  boolean enabled=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodAutoGenerate.ENABLE);
  if (enabled) {
    InputStream is=null;
    InputStreamReader isr=null;
    BufferedReader br=null;
    try {
      is=javaFile.getContents();
      isr=new InputStreamReader(is);
      br=new BufferedReader(isr);
      StringBuffer tmpsb=new StringBuffer();
      String line=null;
      while ((line=br.readLine()) != null)       tmpsb.append(line + ""String_Node_Str"");
      String allSrc=tmpsb.toString();
      String[] publics=allSrc.split(""String_Node_Str"");
      for (      String publicsEach : publics) {
        publicsEach=publicsEach.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA);
        publicsEach=publicsEach.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (publicsEach.matches(RXP_SEARCH_METHOD)) {
          Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(publicsEach);
          if (matcher.find()) {
            GeneratingMethodInfo each=new GeneratingMethodInfo();
            each.returnTypeName=getType(matcher.group(1));
            each.returnTypeNameInMethodName=getTypeAvailableInMethodName(matcher.group(1));
            each.methodName=matcher.group(2);
            each.testMethodName=each.methodName;
            String args=matcher.group(3);
            String[] argArr=args.split(""String_Node_Str"");
            int argArrLen=argArr.length;
            for (int i=0; i < argArrLen; i++) {
              each.argTypeNames.add(getType(argArr[i]));
              each.argTypeNamesInMethodName.add(getTypeAvailableInMethodName(argArr[i]));
            }
            methodStringInfos.add(each);
          }
        }
      }
    }
  finally {
      FileResourceUtil.close(br);
      FileResourceUtil.close(isr);
      FileResourceUtil.close(is);
    }
  }
  return methodStringInfos;
}","public static List<GeneratingMethodInfo> getMethodNames(IFile javaFile) throws Exception {
  List<GeneratingMethodInfo> methodStringInfos=new ArrayList<GeneratingMethodInfo>();
  boolean enabled=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE);
  if (enabled) {
    InputStream is=null;
    InputStreamReader isr=null;
    BufferedReader br=null;
    try {
      is=javaFile.getContents();
      isr=new InputStreamReader(is);
      br=new BufferedReader(isr);
      StringBuffer tmpsb=new StringBuffer();
      String line=null;
      while ((line=br.readLine()) != null)       tmpsb.append(line + ""String_Node_Str"");
      String allSrc=tmpsb.toString();
      String[] publics=allSrc.split(""String_Node_Str"");
      for (      String publicsEach : publics) {
        publicsEach=publicsEach.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA);
        publicsEach=publicsEach.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (publicsEach.matches(RXP_SEARCH_METHOD)) {
          Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(publicsEach);
          if (matcher.find()) {
            GeneratingMethodInfo each=new GeneratingMethodInfo();
            each.returnTypeName=getType(matcher.group(1));
            each.returnTypeNameInMethodName=getTypeAvailableInMethodName(matcher.group(1));
            each.methodName=matcher.group(2);
            each.testMethodName=each.methodName;
            String args=matcher.group(3);
            String[] argArr=args.split(""String_Node_Str"");
            int argArrLen=argArr.length;
            for (int i=0; i < argArrLen; i++) {
              each.argTypeNames.add(getType(argArr[i]));
              each.argTypeNamesInMethodName.add(getTypeAvailableInMethodName(argArr[i]));
            }
            methodStringInfos.add(each);
          }
        }
      }
    }
  finally {
      FileResourceUtil.close(br);
      FileResourceUtil.close(isr);
      FileResourceUtil.close(is);
    }
  }
  return methodStringInfos;
}",0.9978848413631022
12084,"public static List<GeneratingMethodInfo> getUnimplementedTestMethodNames(IFile testTarget,IFile testCase) throws Exception {
  List<GeneratingMethodInfo> unimplementedMethodNames=new ArrayList<GeneratingMethodInfo>();
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  boolean enabled=store.getBoolean(STR.Preference.TestMethodAutoGenerate.ENABLE);
  if (enabled) {
    List<GeneratingMethodInfo> expectedList=getTestMethodsFromTarget(testTarget);
    List<GeneratingMethodInfo> actualList=getMethodNames(testCase);
    for (    GeneratingMethodInfo expected : expectedList) {
      boolean exist=false;
      for (      GeneratingMethodInfo actual : actualList) {
        String escapedExp=expected.testMethodName.replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (actual.testMethodName.matches(escapedExp + ""String_Node_Str"")) {
          exist=true;
          break;
        }
      }
      if (!exist)       unimplementedMethodNames.add(expected);
    }
  }
  return unimplementedMethodNames;
}","public static List<GeneratingMethodInfo> getUnimplementedTestMethodNames(IFile testTarget,IFile testCase) throws Exception {
  List<GeneratingMethodInfo> unimplementedMethodNames=new ArrayList<GeneratingMethodInfo>();
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  boolean enabled=store.getBoolean(STR.Preference.TestMethodGen.ENABLE);
  if (enabled) {
    List<GeneratingMethodInfo> expectedList=getTestMethodsFromTarget(testTarget);
    List<GeneratingMethodInfo> actualList=getMethodNames(testCase);
    for (    GeneratingMethodInfo expected : expectedList) {
      boolean exist=false;
      for (      GeneratingMethodInfo actual : actualList) {
        String escapedExp=expected.testMethodName.replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (actual.testMethodName.matches(escapedExp + ""String_Node_Str"")) {
          exist=true;
          break;
        }
      }
      if (!exist)       unimplementedMethodNames.add(expected);
    }
  }
  return unimplementedMethodNames;
}",0.9956076134699854
12085,"/** 
 * Run method to invoked.
 * @param action
 */
public void run(IAction action){
  InputStream javaFileIStream=null;
  OutputStreamWriter testFileOSWriter=null;
  FileOutputStream fos=null;
  boolean refreshFlag=true;
  String projectName=null;
  String testCaseDirResource=null;
  String testCaseResource=null;
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseClassname=null;
    String testCaseCreateDirpath=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection)     structuredSelection=(StructuredSelection)selection;
    if (structuredSelection != null && structuredSelection.size() == 0) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,STR.Dialog.Common.TITLE,STR.Dialog.Common.REQUIRED);
      refreshFlag=false;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,STR.Dialog.Common.TITLE,STR.Dialog.Common.SELECT_ONLY_ONE);
      refreshFlag=false;
    }
 else {
      String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
      String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
      String selected=STR.EMPTY;
      int len=dirArrFromProjectRoot.length;
      for (int i=2; i < len - 1; i++)       selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
      selected+=dirArrFromProjectRoot[len - 1];
      projectName=dirArrFromProjectRoot[1];
      String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
      testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
      testCaseClassname=testTargetClassname + STR.SUFFIX_OF_TESTCASE;
      testCaseFilename=testCaseClassname + STR.JAVA_EXP;
      String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      String[] selectedDirArr=selected.split(STR.DIR_SEP);
      testCaseDirResource=""String_Node_Str"";
      int selectedDirArrLength=selectedDirArr.length;
      for (int i=0; i < selectedDirArrLength - 1; i++)       testCaseDirResource+=selectedDirArr[i] + STR.DIR_SEP;
      testCaseDirResource=testCaseDirResource.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA);
      testCaseCreateDirpath=projectRootPath + testCaseDirResource;
      File testDir=new File(testCaseCreateDirpath);
      String[] dirArr=testCaseCreateDirpath.split(STR.DIR_SEP);
      String tmpDirPath=STR.EMPTY;
      String tmpResourceDirPath=STR.EMPTY;
      for (      String each : dirArr) {
        tmpDirPath+=STR.DIR_SEP + each;
        File tmpDir=new File(tmpDirPath);
        if (tmpDir.getPath().length() <= projectRootPath.length())         continue;
        tmpResourceDirPath+=STR.DIR_SEP + each;
        if (!tmpDir.exists()) {
          if (!tmpDir.mkdir())           System.err.println(""String_Node_Str"" + tmpDir.getPath());
          if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + tmpResourceDirPath+ ""String_Node_Str"")) {
            String msg=STR.Dialog.Common.RESOURCE_REFRESH_ERROR;
            MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,msg);
            System.err.println(""String_Node_Str"");
          }
        }
      }
      if (!testDir.mkdirs())       System.err.println(""String_Node_Str"");
      if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource)) {
        MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
        System.err.println(""String_Node_Str"");
      }
      try {
        File outputFile=new File(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
        String msg=STR.Dialog.Common.ALREADY_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ STR.Dialog.Common.CONFIRM_PROCEED;
        if (!outputFile.exists() || MessageDialog.openConfirm(new Shell(),STR.Dialog.Common.TITLE,msg)) {
          String targetClass=""String_Node_Str"" + projectName + ""String_Node_Str""+ selected;
          IResource targetClassResource=workspaceRoot.findMember(targetClass);
          IFile file=(IFile)targetClassResource;
          List<GeneratingMethodInfo> testMethods=TestCaseGenerateUtil.getTestMethodsFromTarget(file);
          String writeEncoding=FileResourceUtil.detectEncoding(file);
          fos=new FileOutputStream(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
          testFileOSWriter=new OutputStreamWriter(fos,writeEncoding);
          StringBuffer sb=new StringBuffer();
          String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
          String testPackageString=STR.EMPTY;
          String[] tmpDirArr=selected.split(STR.DIR_SEP);
          StringBuffer dirSb=new StringBuffer();
          int packageArrLen=tmpDirArr.length - 2;
          for (int i=3; i < packageArrLen; i++) {
            dirSb.append(tmpDirArr[i]);
            dirSb.append(""String_Node_Str"");
          }
          dirSb.append(tmpDirArr[packageArrLen]);
          testPackageString=dirSb.toString();
          sb.append(""String_Node_Str"");
          sb.append(testPackageString);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          boolean enabledTestMethodsGen=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE);
          boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
          if (enabledTestMethodsGen && enabledNotBlankMethods) {
            List<String> importedPackageList=testMethods.get(0).importList;
            for (            String importedPackage : importedPackageList) {
              sb.append(""String_Node_Str"");
              sb.append(importedPackage);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
            }
          }
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(testCaseClassname);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          if (enabledTestMethodsGen) {
            for (            GeneratingMethodInfo testMethod : testMethods) {
              if (testMethod.testMethodName == null || testMethod.testMethodName.equals(STR.EMPTY))               continue;
              sb.append(""String_Node_Str"");
              sb.append(testMethod.testMethodName);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(""String_Node_Str"");
              sb.append(STR.AUTO_GEN_MSG_TODO);
              sb.append(CRLF);
              if (enabledNotBlankMethods) {
                String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testMethods,testTargetClassname);
                sb.append(notBlankSourceCode);
              }
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(CRLF);
            }
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          testFileOSWriter.write(sb.toString());
        }
      }
 catch (      FileNotFoundException fnfe) {
        fnfe.printStackTrace();
      }
 finally {
        FileResourceUtil.close(testFileOSWriter);
        FileResourceUtil.close(fos);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    FileResourceUtil.close(javaFileIStream);
    FileResourceUtil.close(testFileOSWriter);
  }
  if (refreshFlag && !ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource+ ""String_Node_Str"")) {
    MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
    System.err.println(""String_Node_Str"");
  }
 else {
    int retryCount=0;
    IEditorPart editorPart=null;
    ThreadUtil.sleep(1500);
    while (true) {
      try {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        IWorkspaceRoot root=workspace.getRoot();
        IProject project=root.getProject(projectName);
        IFile testCaseFile=project.getFile(testCaseResource);
        String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        editorPart=IDE.openEditor(page,testCaseFile,editorId);
        if (editorPart == null)         throw new NullPointerException();
        break;
      }
 catch (      Exception e) {
        retryCount++;
        if (retryCount > 3)         break;
        ThreadUtil.sleep(1500);
      }
    }
    editorPart.setFocus();
  }
}","/** 
 * Run method to invoked.
 * @param action
 */
public void run(IAction action){
  InputStream javaFileIStream=null;
  OutputStreamWriter testFileOSWriter=null;
  FileOutputStream fos=null;
  boolean refreshFlag=true;
  String projectName=null;
  String testCaseDirResource=null;
  String testCaseResource=null;
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseClassname=null;
    String testCaseCreateDirpath=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection)     structuredSelection=(StructuredSelection)selection;
    if (structuredSelection != null && structuredSelection.size() == 0) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,STR.Dialog.Common.TITLE,STR.Dialog.Common.REQUIRED);
      refreshFlag=false;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,STR.Dialog.Common.TITLE,STR.Dialog.Common.SELECT_ONLY_ONE);
      refreshFlag=false;
    }
 else {
      String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
      String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
      String selected=STR.EMPTY;
      int len=dirArrFromProjectRoot.length;
      for (int i=2; i < len - 1; i++)       selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
      selected+=dirArrFromProjectRoot[len - 1];
      projectName=dirArrFromProjectRoot[1];
      String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
      testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
      testCaseClassname=testTargetClassname + STR.SUFFIX_OF_TESTCASE;
      testCaseFilename=testCaseClassname + STR.JAVA_EXP;
      String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      String[] selectedDirArr=selected.split(STR.DIR_SEP);
      testCaseDirResource=""String_Node_Str"";
      int selectedDirArrLength=selectedDirArr.length;
      for (int i=0; i < selectedDirArrLength - 1; i++)       testCaseDirResource+=selectedDirArr[i] + STR.DIR_SEP;
      testCaseDirResource=testCaseDirResource.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA);
      testCaseCreateDirpath=projectRootPath + testCaseDirResource;
      File testDir=new File(testCaseCreateDirpath);
      String[] dirArr=testCaseCreateDirpath.split(STR.DIR_SEP);
      String tmpDirPath=STR.EMPTY;
      String tmpResourceDirPath=STR.EMPTY;
      for (      String each : dirArr) {
        tmpDirPath+=STR.DIR_SEP + each;
        File tmpDir=new File(tmpDirPath);
        if (tmpDir.getPath().length() <= projectRootPath.length())         continue;
        tmpResourceDirPath+=STR.DIR_SEP + each;
        if (!tmpDir.exists()) {
          if (!tmpDir.mkdir())           System.err.println(""String_Node_Str"" + tmpDir.getPath());
          if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + tmpResourceDirPath+ ""String_Node_Str"")) {
            String msg=STR.Dialog.Common.RESOURCE_REFRESH_ERROR;
            MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,msg);
            System.err.println(""String_Node_Str"");
          }
        }
      }
      if (!testDir.mkdirs())       System.err.println(""String_Node_Str"");
      if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource)) {
        MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
        System.err.println(""String_Node_Str"");
      }
      try {
        File outputFile=new File(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
        String msg=STR.Dialog.Common.ALREADY_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ STR.Dialog.Common.CONFIRM_PROCEED;
        if (!outputFile.exists() || MessageDialog.openConfirm(new Shell(),STR.Dialog.Common.TITLE,msg)) {
          String targetClass=""String_Node_Str"" + projectName + ""String_Node_Str""+ selected;
          IResource targetClassResource=workspaceRoot.findMember(targetClass);
          IFile file=(IFile)targetClassResource;
          List<GeneratingMethodInfo> testMethods=TestCaseGenerateUtil.getTestMethodsFromTarget(file);
          String writeEncoding=FileResourceUtil.detectEncoding(file);
          fos=new FileOutputStream(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
          testFileOSWriter=new OutputStreamWriter(fos,writeEncoding);
          StringBuffer sb=new StringBuffer();
          String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
          String testPackageString=STR.EMPTY;
          String[] tmpDirArr=selected.split(STR.DIR_SEP);
          StringBuffer dirSb=new StringBuffer();
          int packageArrLen=tmpDirArr.length - 2;
          for (int i=3; i < packageArrLen; i++) {
            dirSb.append(tmpDirArr[i]);
            dirSb.append(""String_Node_Str"");
          }
          dirSb.append(tmpDirArr[packageArrLen]);
          testPackageString=dirSb.toString();
          sb.append(""String_Node_Str"");
          sb.append(testPackageString);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          String testCase=Activator.getDefault().getPreferenceStore().getString(STR.Preference.Common.CLASS_TO_EXTEND);
          String[] tmpTestCaseArr=testCase.split(""String_Node_Str"");
          String testCaseName=tmpTestCaseArr[tmpTestCaseArr.length - 1];
          sb.append(""String_Node_Str"");
          sb.append(testCase);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          boolean enabledTestMethodsGen=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE);
          boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
          if (enabledTestMethodsGen && enabledNotBlankMethods) {
            List<String> importedPackageList=testMethods.get(0).importList;
            for (            String importedPackage : importedPackageList) {
              sb.append(""String_Node_Str"");
              sb.append(importedPackage);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
            }
          }
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(testCaseClassname);
          sb.append(""String_Node_Str"");
          sb.append(testCaseName);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          if (enabledTestMethodsGen) {
            for (            GeneratingMethodInfo testMethod : testMethods) {
              if (testMethod.testMethodName == null || testMethod.testMethodName.equals(STR.EMPTY))               continue;
              sb.append(""String_Node_Str"");
              sb.append(testMethod.testMethodName);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(""String_Node_Str"");
              sb.append(STR.AUTO_GEN_MSG_TODO);
              sb.append(CRLF);
              if (enabledNotBlankMethods) {
                String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testMethods,testTargetClassname);
                sb.append(notBlankSourceCode);
              }
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(CRLF);
            }
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          testFileOSWriter.write(sb.toString());
        }
      }
 catch (      FileNotFoundException fnfe) {
        fnfe.printStackTrace();
      }
 finally {
        FileResourceUtil.close(testFileOSWriter);
        FileResourceUtil.close(fos);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    FileResourceUtil.close(javaFileIStream);
    FileResourceUtil.close(testFileOSWriter);
  }
  if (refreshFlag && !ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource+ ""String_Node_Str"")) {
    MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
    System.err.println(""String_Node_Str"");
  }
 else {
    int retryCount=0;
    IEditorPart editorPart=null;
    ThreadUtil.sleep(1500);
    while (true) {
      try {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        IWorkspaceRoot root=workspace.getRoot();
        IProject project=root.getProject(projectName);
        IFile testCaseFile=project.getFile(testCaseResource);
        String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        editorPart=IDE.openEditor(page,testCaseFile,editorId);
        if (editorPart == null)         throw new NullPointerException();
        break;
      }
 catch (      Exception e) {
        retryCount++;
        if (retryCount > 3)         break;
        ThreadUtil.sleep(1500);
      }
    }
    editorPart.setFocus();
  }
}",0.9778861788617886
12086,"/** 
 * Create field editors
 */
@Override protected void createFieldEditors(){
{
    Composite parent=getFieldEditorParent();
    Group commonPrentGroup=new Group(parent,0);
{
      FillLayout parentLayout=new FillLayout(256);
      parentLayout.marginHeight=2;
      parentLayout.marginWidth=4;
      commonPrentGroup.setLayout(parentLayout);
      commonPrentGroup.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      commonPrentGroup.setLayoutData(gd);
      Composite grp=new Composite(commonPrentGroup,0);
      grp.setLayout(new GridLayout(2,false));
      Label label=new Label(grp,0);
      label.setText(""String_Node_Str"");
      gd=new GridData(768);
      gd.horizontalSpan=2;
      label.setLayoutData(gd);
      addField(new StringFieldEditor(STR.Preference.Common.SRC_MAIN_PATH,STR.Preference.Common.SRC_MAIN_PATH,grp));
      addField(new StringFieldEditor(STR.Preference.Common.SRC_TEST_PATH,STR.Preference.Common.SRC_TEST_PATH,grp));
    }
    BooleanFieldEditor enable=new BooleanFieldEditor(STR.Preference.TestMethodGen.ENABLE,STR.Preference.TestMethodGen.ENABLE,parent);
    addField(enable);
    Group genTestMethodsParentGroup=new Group(parent,0);
{
      FillLayout parentLayout=new FillLayout(256);
      parentLayout.marginHeight=2;
      parentLayout.marginWidth=4;
      genTestMethodsParentGroup.setLayout(parentLayout);
      genTestMethodsParentGroup.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      genTestMethodsParentGroup.setLayoutData(gd);
      Composite grp=new Composite(genTestMethodsParentGroup,0);
      grp.setLayout(new GridLayout(2,false));
    }
{
      Group group=new Group(genTestMethodsParentGroup,0);
      FillLayout layout=new FillLayout(256);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      Composite grp=new Composite(group,0);
      grp.setLayout(new GridLayout(2,false));
      addField(new StringFieldEditor(STR.Preference.TestMethodGen.DELIMITER,STR.Preference.TestMethodGen.DELIMITER,grp));
    }
{
      BooleanFieldEditor enableArgs=new BooleanFieldEditor(STR.Preference.TestMethodGen.ARGS,STR.Preference.TestMethodGen.ARGS,genTestMethodsParentGroup);
      addField(enableArgs);
      Group group=new Group(genTestMethodsParentGroup,0);
      FillLayout layout=new FillLayout(256);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      Composite grp=new Composite(group,0);
      grp.setLayout(new GridLayout(2,false));
      StringFieldEditor argsPrefix=new StringFieldEditor(STR.Preference.TestMethodGen.ARGS_PREFIX,STR.Preference.TestMethodGen.ARGS_PREFIX,grp);
      StringFieldEditor argsDelimiter=new StringFieldEditor(STR.Preference.TestMethodGen.ARGS_DELIMITER,STR.Preference.TestMethodGen.ARGS_DELIMITER,grp);
      addField(argsPrefix);
      addField(argsDelimiter);
    }
{
      addField(new BooleanFieldEditor(STR.Preference.TestMethodGen.RETURN,STR.Preference.TestMethodGen.RETURN,genTestMethodsParentGroup));
      Group group=new Group(genTestMethodsParentGroup,0);
      FillLayout layout=new FillLayout(256);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      Composite grp=new Composite(group,0);
      grp.setLayout(new GridLayout(2,false));
      StringFieldEditor argsPrefix=new StringFieldEditor(STR.Preference.TestMethodGen.RETURN_PREFIX,STR.Preference.TestMethodGen.RETURN_PREFIX,grp);
      StringFieldEditor argsDelimiter=new StringFieldEditor(STR.Preference.TestMethodGen.RETURN_DELIMITER,STR.Preference.TestMethodGen.RETURN_DELIMITER,grp);
      addField(argsPrefix);
      addField(argsDelimiter);
    }
{
      BooleanFieldEditor execludesAccessors=new BooleanFieldEditor(STR.Preference.TestMethodGen.EXLCUDES_ACCESSORS,STR.Preference.TestMethodGen.EXLCUDES_ACCESSORS,genTestMethodsParentGroup);
      addField(execludesAccessors);
    }
{
      BooleanFieldEditor enableGenerateSample=new BooleanFieldEditor(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION,STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION,genTestMethodsParentGroup);
      addField(enableGenerateSample);
    }
  }
}","/** 
 * Create field editors
 */
@Override protected void createFieldEditors(){
{
    Composite parent=getFieldEditorParent();
    Group commonPrentGroup=new Group(parent,0);
{
      FillLayout parentLayout=new FillLayout(256);
      parentLayout.marginHeight=2;
      parentLayout.marginWidth=4;
      commonPrentGroup.setLayout(parentLayout);
      commonPrentGroup.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      commonPrentGroup.setLayoutData(gd);
      Composite grp=new Composite(commonPrentGroup,0);
      grp.setLayout(new GridLayout(2,false));
      Label label=new Label(grp,0);
      label.setText(""String_Node_Str"");
      gd=new GridData(768);
      gd.horizontalSpan=2;
      label.setLayoutData(gd);
      addField(new StringFieldEditor(STR.Preference.Common.SRC_MAIN_PATH,STR.Preference.Common.SRC_MAIN_PATH,grp));
      addField(new StringFieldEditor(STR.Preference.Common.SRC_TEST_PATH,STR.Preference.Common.SRC_TEST_PATH,grp));
      addField(new StringFieldEditor(STR.Preference.Common.CLASS_TO_EXTEND,STR.Preference.Common.CLASS_TO_EXTEND,grp));
    }
    BooleanFieldEditor enable=new BooleanFieldEditor(STR.Preference.TestMethodGen.ENABLE,STR.Preference.TestMethodGen.ENABLE,parent);
    addField(enable);
    Group genTestMethodsParentGroup=new Group(parent,0);
{
      FillLayout parentLayout=new FillLayout(256);
      parentLayout.marginHeight=2;
      parentLayout.marginWidth=4;
      genTestMethodsParentGroup.setLayout(parentLayout);
      genTestMethodsParentGroup.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      genTestMethodsParentGroup.setLayoutData(gd);
      Composite grp=new Composite(genTestMethodsParentGroup,0);
      grp.setLayout(new GridLayout(2,false));
    }
{
      Group group=new Group(genTestMethodsParentGroup,0);
      FillLayout layout=new FillLayout(256);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      Composite grp=new Composite(group,0);
      grp.setLayout(new GridLayout(2,false));
      addField(new StringFieldEditor(STR.Preference.TestMethodGen.DELIMITER,STR.Preference.TestMethodGen.DELIMITER,grp));
    }
{
      BooleanFieldEditor enableArgs=new BooleanFieldEditor(STR.Preference.TestMethodGen.ARGS,STR.Preference.TestMethodGen.ARGS,genTestMethodsParentGroup);
      addField(enableArgs);
      Group group=new Group(genTestMethodsParentGroup,0);
      FillLayout layout=new FillLayout(256);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      Composite grp=new Composite(group,0);
      grp.setLayout(new GridLayout(2,false));
      StringFieldEditor argsPrefix=new StringFieldEditor(STR.Preference.TestMethodGen.ARGS_PREFIX,STR.Preference.TestMethodGen.ARGS_PREFIX,grp);
      StringFieldEditor argsDelimiter=new StringFieldEditor(STR.Preference.TestMethodGen.ARGS_DELIMITER,STR.Preference.TestMethodGen.ARGS_DELIMITER,grp);
      addField(argsPrefix);
      addField(argsDelimiter);
    }
{
      addField(new BooleanFieldEditor(STR.Preference.TestMethodGen.RETURN,STR.Preference.TestMethodGen.RETURN,genTestMethodsParentGroup));
      Group group=new Group(genTestMethodsParentGroup,0);
      FillLayout layout=new FillLayout(256);
      layout.marginHeight=4;
      layout.marginWidth=4;
      group.setLayout(layout);
      group.setText(""String_Node_Str"");
      GridData gd=new GridData(768);
      gd.horizontalSpan=2;
      group.setLayoutData(gd);
      Composite grp=new Composite(group,0);
      grp.setLayout(new GridLayout(2,false));
      StringFieldEditor argsPrefix=new StringFieldEditor(STR.Preference.TestMethodGen.RETURN_PREFIX,STR.Preference.TestMethodGen.RETURN_PREFIX,grp);
      StringFieldEditor argsDelimiter=new StringFieldEditor(STR.Preference.TestMethodGen.RETURN_DELIMITER,STR.Preference.TestMethodGen.RETURN_DELIMITER,grp);
      addField(argsPrefix);
      addField(argsDelimiter);
    }
{
      BooleanFieldEditor execludesAccessors=new BooleanFieldEditor(STR.Preference.TestMethodGen.EXLCUDES_ACCESSORS,STR.Preference.TestMethodGen.EXLCUDES_ACCESSORS,genTestMethodsParentGroup);
      addField(execludesAccessors);
    }
{
      BooleanFieldEditor enableGenerateSample=new BooleanFieldEditor(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION,STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION,genTestMethodsParentGroup);
      addField(enableGenerateSample);
    }
  }
}",0.9870438350248326
12087,"@Override public void initializeDefaultPreferences(){
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
{
    store.setDefault(STR.Preference.Common.SRC_MAIN_PATH,""String_Node_Str"");
    store.setDefault(STR.Preference.Common.SRC_TEST_PATH,""String_Node_Str"");
  }
{
    store.setDefault(STR.Preference.TestMethodGen.ENABLE,true);
    store.setDefault(STR.Preference.TestMethodGen.DELIMITER,""String_Node_Str"");
    store.setDefault(STR.Preference.TestMethodGen.ARGS,true);
    store.setDefault(STR.Preference.TestMethodGen.ARGS_PREFIX,""String_Node_Str"");
    store.setDefault(STR.Preference.TestMethodGen.ARGS_DELIMITER,""String_Node_Str"");
    store.setDefault(STR.Preference.TestMethodGen.RETURN,false);
    store.setDefault(STR.Preference.TestMethodGen.RETURN_PREFIX,""String_Node_Str"");
    store.setDefault(STR.Preference.TestMethodGen.RETURN_DELIMITER,""String_Node_Str"");
    store.setDefault(STR.Preference.TestMethodGen.EXLCUDES_ACCESSORS,true);
    store.setDefault(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION,true);
  }
}","@Override public void initializeDefaultPreferences(){
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
{
    store.setDefault(STR.Preference.Common.SRC_MAIN_PATH,""String_Node_Str"");
    store.setDefault(STR.Preference.Common.SRC_TEST_PATH,""String_Node_Str"");
    store.setDefault(STR.Preference.Common.CLASS_TO_EXTEND,""String_Node_Str"");
  }
{
    store.setDefault(STR.Preference.TestMethodGen.ENABLE,true);
    store.setDefault(STR.Preference.TestMethodGen.DELIMITER,""String_Node_Str"");
    store.setDefault(STR.Preference.TestMethodGen.ARGS,true);
    store.setDefault(STR.Preference.TestMethodGen.ARGS_PREFIX,""String_Node_Str"");
    store.setDefault(STR.Preference.TestMethodGen.ARGS_DELIMITER,""String_Node_Str"");
    store.setDefault(STR.Preference.TestMethodGen.RETURN,false);
    store.setDefault(STR.Preference.TestMethodGen.RETURN_PREFIX,""String_Node_Str"");
    store.setDefault(STR.Preference.TestMethodGen.RETURN_DELIMITER,""String_Node_Str"");
    store.setDefault(STR.Preference.TestMethodGen.EXLCUDES_ACCESSORS,true);
    store.setDefault(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION,true);
  }
}",0.9641398093508852
12088,"public static String getNotBlankTestMethodSource(GeneratingMethodInfo testMethod,List<GeneratingMethodInfo> testMethods,String testTargetClassname){
  StringBuffer sb=new StringBuffer();
  String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
  sb.append(""String_Node_Str"");
  String returnType=testMethod.returnTypeName;
  if (!returnType.equals(""String_Node_Str"")) {
    returnType=returnType.replaceAll(""String_Node_Str"",STR.EMPTY);
    String returnTypeToCheck=returnType.replaceAll(""String_Node_Str"",STR.EMPTY);
    boolean returnTypeFound=false;
    try {
      try {
        Class.forName(""String_Node_Str"" + returnTypeToCheck);
        returnTypeFound=true;
      }
 catch (      Exception ignore) {
      }
      if (!returnTypeFound)       Class.forName(returnTypeToCheck);
    }
 catch (    Exception e) {
      if (returnTypeToCheck.equals(testTargetClassname))       returnTypeFound=true;
      for (      String importedPackage : testMethods.get(0).importList) {
        if (importedPackage.matches(""String_Node_Str"" + returnTypeToCheck + ""String_Node_Str"")) {
          returnTypeFound=true;
          break;
        }
      }
    }
    if (!returnTypeFound)     returnType=returnType.replaceAll(returnTypeToCheck,""String_Node_Str"");
  }
  if (!testMethod.isStatic) {
    sb.append(testTargetClassname);
    sb.append(""String_Node_Str"");
    sb.append(testTargetClassname);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (!returnType.equals(""String_Node_Str"")) {
    sb.append(returnType);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
    sb.append(returnType);
    sb.append(""String_Node_Str"");
  }
  if (testMethod.isStatic)   sb.append(testTargetClassname);
 else {
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(testMethod.methodName);
  sb.append(""String_Node_Str"");
  List<String> argTypes=testMethod.argTypeNames;
  int argTypesLen=argTypes.size();
  if (argTypesLen > 0 && argTypes.get(0) != null && !argTypes.get(0).equals(""String_Node_Str""))   sb.append(""String_Node_Str"");
  for (int i=1; i < argTypes.size(); i++)   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(CRLF);
  if (!returnType.equals(""String_Node_Str"")) {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
  }
  return sb.toString();
}","public static String getNotBlankTestMethodSource(GeneratingMethodInfo testMethod,List<GeneratingMethodInfo> testMethods,String testTargetClassname){
  StringBuffer sb=new StringBuffer();
  String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
  sb.append(""String_Node_Str"");
  String returnType=testMethod.returnTypeName;
  Object returnDefaultValue=null;
  if (!returnType.equals(""String_Node_Str"")) {
    returnType=returnType.replaceAll(""String_Node_Str"",STR.EMPTY);
    String returnTypeToCheck=returnType.replaceAll(""String_Node_Str"",STR.EMPTY);
    boolean returnTypeFound=false;
    try {
      if (PrimitiveTypeUtil.isPrimitive(returnTypeToCheck)) {
        returnTypeFound=true;
        if (!returnType.matches(""String_Node_Str""))         returnDefaultValue=PrimitiveTypeUtil.getPrimitiveDefaultValue(returnTypeToCheck);
      }
 else {
        try {
          Class.forName(""String_Node_Str"" + returnTypeToCheck);
          returnTypeFound=true;
        }
 catch (        Exception ignore) {
        }
        if (!returnTypeFound)         Class.forName(returnTypeToCheck);
      }
    }
 catch (    Exception e) {
      if (returnTypeToCheck.equals(testTargetClassname))       returnTypeFound=true;
      for (      String importedPackage : testMethods.get(0).importList) {
        if (importedPackage.matches(""String_Node_Str"" + returnTypeToCheck + ""String_Node_Str"")) {
          returnTypeFound=true;
          break;
        }
      }
    }
    if (!returnTypeFound)     returnType=returnType.replaceAll(returnTypeToCheck,""String_Node_Str"");
  }
  if (!testMethod.isStatic) {
    sb.append(testTargetClassname);
    sb.append(""String_Node_Str"");
    sb.append(testTargetClassname);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  if (!returnType.equals(""String_Node_Str"")) {
    sb.append(returnType);
    sb.append(""String_Node_Str"");
    sb.append(returnDefaultValue);
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
    sb.append(""String_Node_Str"");
  }
  List<String> argTypes=testMethod.argTypeNames;
  List<String> args=new ArrayList<String>();
  int argTypesLen=argTypes.size();
  if (argTypesLen > 0 && argTypes.get(0) != null && !argTypes.get(0).equals(STR.EMPTY)) {
    for (int i=0; i < argTypesLen; i++) {
      if (argTypes.get(i).matches(""String_Node_Str""))       argTypes.set(i,argTypes.get(i).replaceAll(""String_Node_Str"",""String_Node_Str""));
      sb.append(argTypes.get(i));
      sb.append(""String_Node_Str"");
      sb.append(i);
      sb.append(""String_Node_Str"");
      if (PrimitiveTypeUtil.isPrimitive(argTypes.get(i))) {
        Object primitiveDefault=PrimitiveTypeUtil.getPrimitiveDefaultValue(argTypes.get(i));
        sb.append(primitiveDefault);
      }
 else       sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(CRLF);
      sb.append(""String_Node_Str"");
      args.add(""String_Node_Str"" + i);
    }
  }
  if (!returnType.equals(""String_Node_Str"")) {
    sb.append(returnType);
    sb.append(""String_Node_Str"");
  }
  if (testMethod.isStatic)   sb.append(testTargetClassname);
 else   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(testMethod.methodName);
  sb.append(""String_Node_Str"");
  if (argTypesLen > 0 && argTypes.get(0) != null && !argTypes.get(0).equals(STR.EMPTY))   sb.append(args.get(0));
  for (int i=1; i < argTypes.size(); i++) {
    sb.append(""String_Node_Str"");
    sb.append(args.get(i));
  }
  sb.append(""String_Node_Str"");
  sb.append(CRLF);
  if (!returnType.equals(""String_Node_Str"")) {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(CRLF);
  }
  return sb.toString();
}",0.6244670383732371
12089,"public void run(IAction action){
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String projectName=null;
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseCreateFilepath=null;
    String testCaseResource=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
 else {
    }
    if (structuredSelection != null && structuredSelection.size() == 0) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.REQUIRED);
      return;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.SELECT_ONLY_ONE);
      return;
    }
    String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
    String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
    String selected=STR.EMPTY;
    int allDirLen=dirArrFromProjectRoot.length - 1;
    for (int i=2; i < allDirLen; i++)     selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
    selected+=dirArrFromProjectRoot[allDirLen];
    projectName=dirArrFromProjectRoot[1];
    String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
    testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
    testCaseFilename=testTargetClassname + STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP;
    String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
    if (testTargetClassname == null) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.TestCase.SELECT_JAVA_FILE);
    }
 else {
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      testCaseCreateFilepath=projectRootPath + selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      File outputFile=new File(testCaseCreateFilepath);
      if (!outputFile.exists()) {
        String msg=STR.Dialog.Common.NOT_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ STR.Dialog.Common.COMFIRM_CREATE_NEW_FILE;
        if (testCaseFilename != null && MessageDialog.openConfirm(new Shell(),STR.Dialog.Common.TITLE,msg)) {
          new CreateNewTestCaseAction().run(action,selection);
        }
        return;
      }
      int retryCount=0;
      IEditorPart editorPart=null;
      while (true) {
        try {
          IProject project=workspaceRoot.getProject(projectName);
          IFile testCaseFile=project.getFile(testCaseResource);
          String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          editorPart=IDE.openEditor(page,testCaseFile,editorId);
          editorPart.setFocus();
          if (Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE)) {
            IFile testTargetFile=project.getFile(selected);
            List<GeneratingMethodInfo> unimpledTestMethodNames=TestCaseGenerateUtil.getUnimplementedTestMethodNames(testTargetFile,testCaseFile);
            if (unimpledTestMethodNames.size() > 0) {
              List<String> lines=TestCaseGenerateUtil.getAllSourceCodeLineList(testCaseFile);
              OutputStreamWriter testFileOSWriter=null;
              FileOutputStream fos=null;
              try {
                fos=new FileOutputStream(projectRootPath + STR.DIR_SEP + testCaseResource);
                testFileOSWriter=new OutputStreamWriter(fos);
                boolean enabledTestMethodsGen=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE);
                boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
                StringBuffer sb=new StringBuffer();
                String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
                for (                String line : lines) {
                  if (line.equals(""String_Node_Str"") && enabledTestMethodsGen) {
                    for (                    GeneratingMethodInfo testMethod : unimpledTestMethodNames) {
                      sb.append(""String_Node_Str"");
                      sb.append(testMethod.testMethodName);
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(""String_Node_Str"");
                      sb.append(STR.AUTO_GEN_MSG_TODO);
                      sb.append(CRLF);
                      if (enabledNotBlankMethods) {
                        String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,unimpledTestMethodNames,testTargetClassname);
                        sb.append(notBlankSourceCode);
                      }
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(CRLF);
                    }
                    sb.append(""String_Node_Str"");
                    sb.append(CRLF);
                    break;
                  }
 else {
                    sb.append(line);
                    sb.append(CRLF);
                  }
                }
                String content=sb.toString();
                testFileOSWriter.write(content);
              }
  finally {
                FileResourceUtil.close(testFileOSWriter);
                FileResourceUtil.close(fos);
              }
            }
            if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseResource+ ""String_Node_Str"")) {
              MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
              System.err.println(""String_Node_Str"");
            }
 else {
              retryCount=0;
              ThreadUtil.sleep(1500);
              while (true) {
                try {
                  editorPart=IDE.openEditor(page,testCaseFile,editorId);
                  if (editorPart == null)                   throw new NullPointerException();
                  break;
                }
 catch (                Exception e) {
                  retryCount++;
                  if (retryCount > 3)                   break;
                  ThreadUtil.sleep(1500);
                }
              }
              editorPart.setFocus();
            }
          }
        }
 catch (        Exception e) {
          retryCount++;
          if (retryCount > 10)           break;
          e.printStackTrace();
          ThreadUtil.sleep(1500);
        }
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void run(IAction action){
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String projectName=null;
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseCreateFilepath=null;
    String testCaseResource=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
 else {
    }
    if (structuredSelection != null && structuredSelection.size() == 0) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.REQUIRED);
      return;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.SELECT_ONLY_ONE);
      return;
    }
    String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
    String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
    String selected=STR.EMPTY;
    int allDirLen=dirArrFromProjectRoot.length - 1;
    for (int i=2; i < allDirLen; i++)     selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
    selected+=dirArrFromProjectRoot[allDirLen];
    projectName=dirArrFromProjectRoot[1];
    String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
    testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
    testCaseFilename=testTargetClassname + STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP;
    String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
    if (testTargetClassname == null) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.TestCase.SELECT_JAVA_FILE);
    }
 else {
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      testCaseCreateFilepath=projectRootPath + selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      File outputFile=new File(testCaseCreateFilepath);
      if (!outputFile.exists()) {
        String msg=STR.Dialog.Common.NOT_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ STR.Dialog.Common.COMFIRM_CREATE_NEW_FILE;
        if (testCaseFilename != null && MessageDialog.openConfirm(new Shell(),STR.Dialog.Common.TITLE,msg)) {
          new CreateNewTestCaseAction().run(action,selection);
        }
        return;
      }
      int retryCount=0;
      IEditorPart editorPart=null;
      while (true) {
        try {
          IProject project=workspaceRoot.getProject(projectName);
          IFile testCaseFile=project.getFile(testCaseResource);
          String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          editorPart=IDE.openEditor(page,testCaseFile,editorId);
          editorPart.setFocus();
          if (Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE)) {
            IFile testTargetFile=project.getFile(selected);
            List<GeneratingMethodInfo> unimpledTestMethodNames=TestCaseGenerateUtil.getUnimplementedTestMethodNames(testTargetFile,testCaseFile);
            if (unimpledTestMethodNames.size() > 0) {
              List<String> lines=TestCaseGenerateUtil.getAllSourceCodeLineList(testCaseFile);
              OutputStreamWriter testFileOSWriter=null;
              FileOutputStream fos=null;
              try {
                fos=new FileOutputStream(projectRootPath + STR.DIR_SEP + testCaseResource);
                testFileOSWriter=new OutputStreamWriter(fos);
                boolean enabledTestMethodsGen=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE);
                boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
                StringBuffer sb=new StringBuffer();
                String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
                boolean isImportedTypesAdded=false;
                for (                String line : lines) {
                  if (line.equals(""String_Node_Str"") && enabledTestMethodsGen) {
                    for (                    GeneratingMethodInfo testMethod : unimpledTestMethodNames) {
                      sb.append(""String_Node_Str"");
                      sb.append(testMethod.testMethodName);
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(""String_Node_Str"");
                      sb.append(STR.AUTO_GEN_MSG_TODO);
                      sb.append(CRLF);
                      if (enabledNotBlankMethods) {
                        String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,unimpledTestMethodNames,testTargetClassname);
                        sb.append(notBlankSourceCode);
                      }
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(CRLF);
                    }
                    sb.append(""String_Node_Str"");
                    sb.append(CRLF);
                    break;
                  }
 else {
                    sb.append(line);
                    sb.append(CRLF);
                    if (line.matches(""String_Node_Str"") && !isImportedTypesAdded && enabledNotBlankMethods) {
                      List<String> importTypes=unimpledTestMethodNames.get(0).importList;
                      for (                      String importType : importTypes) {
                        sb.append(""String_Node_Str"");
                        sb.append(importType);
                        sb.append(""String_Node_Str"");
                        sb.append(CRLF);
                      }
                      isImportedTypesAdded=true;
                    }
                  }
                }
                String content=sb.toString();
                testFileOSWriter.write(content);
              }
  finally {
                FileResourceUtil.close(testFileOSWriter);
                FileResourceUtil.close(fos);
              }
            }
            if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseResource+ ""String_Node_Str"")) {
              MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
              System.err.println(""String_Node_Str"");
            }
 else {
              retryCount=0;
              ThreadUtil.sleep(1500);
              while (true) {
                try {
                  editorPart=IDE.openEditor(page,testCaseFile,editorId);
                  if (editorPart == null)                   throw new NullPointerException();
                  break;
                }
 catch (                Exception e) {
                  retryCount++;
                  if (retryCount > 3)                   break;
                  ThreadUtil.sleep(1500);
                }
              }
              editorPart.setFocus();
            }
          }
        }
 catch (        Exception e) {
          retryCount++;
          if (retryCount > 10)           break;
          e.printStackTrace();
          ThreadUtil.sleep(1500);
        }
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.956969322627136
12090,"public static List<GeneratingMethodInfo> getMethodNames(IFile javaFile) throws Exception {
  List<GeneratingMethodInfo> methodStringInfos=new ArrayList<GeneratingMethodInfo>();
  boolean enabled=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE);
  if (enabled) {
    InputStream is=null;
    InputStreamReader isr=null;
    BufferedReader br=null;
    try {
      is=javaFile.getContents();
      isr=new InputStreamReader(is);
      br=new BufferedReader(isr);
      StringBuffer tmpsb=new StringBuffer();
      String line=null;
      while ((line=br.readLine()) != null)       tmpsb.append(line + ""String_Node_Str"");
      String allSrc=tmpsb.toString();
      String[] publics=allSrc.split(""String_Node_Str"");
      for (      String publicsEach : publics) {
        publicsEach=publicsEach.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA);
        publicsEach=publicsEach.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (publicsEach.matches(RXP_SEARCH_METHOD)) {
          Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(publicsEach);
          if (matcher.find()) {
            GeneratingMethodInfo each=new GeneratingMethodInfo();
            each.returnTypeName=getType(matcher.group(1));
            each.returnTypeNameInMethodName=getTypeAvailableInMethodName(matcher.group(1));
            each.methodName=matcher.group(2);
            each.testMethodName=each.methodName;
            String args=matcher.group(3);
            String[] argArr=args.split(""String_Node_Str"");
            int argArrLen=argArr.length;
            for (int i=0; i < argArrLen; i++) {
              each.argTypeNames.add(getType(argArr[i]));
              each.argTypeNamesInMethodName.add(getTypeAvailableInMethodName(argArr[i]));
            }
            methodStringInfos.add(each);
          }
        }
      }
    }
  finally {
      FileResourceUtil.close(br);
      FileResourceUtil.close(isr);
      FileResourceUtil.close(is);
    }
  }
  return methodStringInfos;
}","public static List<GeneratingMethodInfo> getMethodNames(IFile javaFile) throws Exception {
  List<GeneratingMethodInfo> methodStringInfos=new ArrayList<GeneratingMethodInfo>();
  boolean enabled=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE);
  boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
  if (enabled) {
    InputStream is=null;
    InputStreamReader isr=null;
    BufferedReader br=null;
    try {
      is=javaFile.getContents();
      isr=new InputStreamReader(is);
      br=new BufferedReader(isr);
      StringBuffer tmpsb=new StringBuffer();
      String line=null;
      while ((line=br.readLine()) != null)       tmpsb.append(line + ""String_Node_Str"");
      String allSrc=tmpsb.toString();
      String[] publics=allSrc.split(""String_Node_Str"");
      for (      String publicsEach : publics) {
        publicsEach=publicsEach.replaceAll(""String_Node_Str"" + STR.COMMA,STR.COMMA).replaceAll(STR.COMMA + ""String_Node_Str"",STR.COMMA);
        publicsEach=publicsEach.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (publicsEach.matches(RXP_SEARCH_METHOD)) {
          Matcher matcher=PAT_SEARCH_GROUP_METHOD.matcher(publicsEach);
          if (matcher.find()) {
            GeneratingMethodInfo each=new GeneratingMethodInfo();
            each.returnTypeName=getType(matcher.group(1));
            each.returnTypeNameInMethodName=getTypeAvailableInMethodName(matcher.group(1));
            each.methodName=matcher.group(2);
            each.testMethodName=each.methodName;
            String args=matcher.group(3);
            String[] argArr=args.split(""String_Node_Str"");
            int argArrLen=argArr.length;
            for (int i=0; i < argArrLen; i++) {
              each.argTypeNames.add(getType(argArr[i]));
              each.argTypeNamesInMethodName.add(getTypeAvailableInMethodName(argArr[i]));
            }
            methodStringInfos.add(each);
          }
        }
      }
      if (enabledNotBlankMethods) {
        String[] importStartLines=allSrc.split(""String_Node_Str"");
        for (        String importStartLine : importStartLines) {
          if (!importStartLine.matches(""String_Node_Str"")) {
            String importedPackage=importStartLine.split(""String_Node_Str"")[0];
            methodStringInfos.get(0).importList.add(importedPackage);
          }
        }
      }
    }
  finally {
      FileResourceUtil.close(br);
      FileResourceUtil.close(isr);
      FileResourceUtil.close(is);
    }
  }
  return methodStringInfos;
}",0.8838467943380516
12091,"public static List<GeneratingMethodInfo> getUnimplementedTestMethodNames(IFile testTarget,IFile testCase) throws Exception {
  List<GeneratingMethodInfo> unimplementedMethodNames=new ArrayList<GeneratingMethodInfo>();
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  boolean enabled=store.getBoolean(STR.Preference.TestMethodGen.ENABLE);
  if (enabled) {
    List<GeneratingMethodInfo> expectedList=getTestMethodsFromTarget(testTarget);
    List<GeneratingMethodInfo> actualList=getMethodNames(testCase);
    for (    GeneratingMethodInfo expected : expectedList) {
      boolean exist=false;
      for (      GeneratingMethodInfo actual : actualList) {
        String escapedExp=expected.testMethodName.replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (actual.testMethodName.matches(escapedExp + ""String_Node_Str"")) {
          exist=true;
          break;
        }
      }
      if (!exist)       unimplementedMethodNames.add(expected);
    }
  }
  return unimplementedMethodNames;
}","public static List<GeneratingMethodInfo> getUnimplementedTestMethodNames(IFile testTarget,IFile testCase) throws Exception {
  List<GeneratingMethodInfo> unimplementedMethodNames=new ArrayList<GeneratingMethodInfo>();
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  boolean enabled=store.getBoolean(STR.Preference.TestMethodGen.ENABLE);
  boolean enabledNotBlankMethods=store.getBoolean(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
  if (enabled) {
    List<GeneratingMethodInfo> expectedList=getTestMethodsFromTarget(testTarget);
    List<GeneratingMethodInfo> actualList=getMethodNames(testCase);
    for (    GeneratingMethodInfo expected : expectedList) {
      boolean exist=false;
      for (      GeneratingMethodInfo actual : actualList) {
        String escapedExp=expected.testMethodName.replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (actual.testMethodName.matches(escapedExp + ""String_Node_Str"")) {
          exist=true;
          break;
        }
      }
      if (!exist)       unimplementedMethodNames.add(expected);
    }
    if (enabledNotBlankMethods) {
      List<String> notImportedList=new ArrayList<String>();
      List<String> expImportedList=expectedList.get(0).importList;
      List<String> actImportedList=actualList.get(0).importList;
      for (      String expImported : expImportedList) {
        boolean found=false;
        for (        String actImported : actImportedList) {
          if (expImported.equals(actImported)) {
            found=true;
            break;
          }
        }
        if (!found)         notImportedList.add(expImported);
      }
      unimplementedMethodNames.get(0).importList=notImportedList;
    }
  }
  return unimplementedMethodNames;
}",0.7290392227419935
12092,"public void stop(BundleContext context) throws Exception {
  plugin=null;
  super.stop(context);
}","/** 
 * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)
 */
public void stop(BundleContext context) throws Exception {
  plugin=null;
  super.stop(context);
}",0.6735395189003437
12093,"public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
}","/** 
 * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
}",0.6756756756756757
12094,"public void run(IAction action){
  InputStream javaFileIStream=null;
  OutputStreamWriter testFileOSWriter=null;
  FileOutputStream fos=null;
  boolean refreshFlag=true;
  String projectName=null;
  String testCaseDirResource=null;
  String testCaseResource=null;
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseClassname=null;
    String testCaseCreateDirpath=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection)     structuredSelection=(StructuredSelection)selection;
    if (structuredSelection != null && structuredSelection.size() == 0) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,STR.Dialog.Common.TITLE,STR.Dialog.Common.REQUIRED);
      refreshFlag=false;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,STR.Dialog.Common.TITLE,STR.Dialog.Common.SELECT_ONLY_ONE);
      refreshFlag=false;
    }
 else {
      String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
      String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
      String selected=STR.EMPTY;
      int len=dirArrFromProjectRoot.length;
      for (int i=2; i < len - 1; i++)       selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
      selected+=dirArrFromProjectRoot[len - 1];
      projectName=dirArrFromProjectRoot[1];
      String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
      testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
      testCaseClassname=testTargetClassname + STR.SUFFIX_OF_TESTCASE;
      testCaseFilename=testCaseClassname + STR.JAVA_EXP;
      String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      String[] selectedDirArr=selected.split(STR.DIR_SEP);
      testCaseDirResource=""String_Node_Str"";
      int selectedDirArrLength=selectedDirArr.length;
      for (int i=0; i < selectedDirArrLength - 1; i++)       testCaseDirResource+=selectedDirArr[i] + STR.DIR_SEP;
      testCaseDirResource=testCaseDirResource.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA);
      testCaseCreateDirpath=projectRootPath + testCaseDirResource;
      File testDir=new File(testCaseCreateDirpath);
      String[] dirArr=testCaseCreateDirpath.split(STR.DIR_SEP);
      String tmpDirPath=STR.EMPTY;
      String tmpResourceDirPath=STR.EMPTY;
      for (      String each : dirArr) {
        tmpDirPath+=STR.DIR_SEP + each;
        File tmpDir=new File(tmpDirPath);
        if (tmpDir.getPath().length() <= projectRootPath.length())         continue;
        tmpResourceDirPath+=STR.DIR_SEP + each;
        if (!tmpDir.exists()) {
          if (!tmpDir.mkdir())           System.err.println(""String_Node_Str"" + tmpDir.getPath());
          if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + tmpResourceDirPath+ ""String_Node_Str"")) {
            String msg=STR.Dialog.Common.RESOURCE_REFRESH_ERROR;
            MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,msg);
            System.err.println(""String_Node_Str"");
          }
        }
      }
      if (!testDir.mkdirs())       System.err.println(""String_Node_Str"");
      if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource)) {
        MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
        System.err.println(""String_Node_Str"");
      }
      try {
        File outputFile=new File(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
        String msg=STR.Dialog.Common.ALREADY_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ STR.Dialog.Common.CONFIRM_PROCEED;
        if (!outputFile.exists() || MessageDialog.openConfirm(new Shell(),STR.Dialog.Common.TITLE,msg)) {
          String targetClass=""String_Node_Str"" + projectName + ""String_Node_Str""+ selected;
          IResource targetClassResource=workspaceRoot.findMember(targetClass);
          IFile file=(IFile)targetClassResource;
          List<GeneratingMethodInfo> testMethods=TestCaseGenerateUtil.getTestMethodsFromTarget(file);
          fos=new FileOutputStream(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
          testFileOSWriter=new OutputStreamWriter(fos);
          StringBuffer sb=new StringBuffer();
          String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
          String testPackageString=STR.EMPTY;
          String[] tmpDirArr=selected.split(STR.DIR_SEP);
          StringBuffer dirSb=new StringBuffer();
          int packageArrLen=tmpDirArr.length - 2;
          for (int i=3; i < packageArrLen; i++) {
            dirSb.append(tmpDirArr[i]);
            dirSb.append(""String_Node_Str"");
          }
          dirSb.append(tmpDirArr[packageArrLen]);
          testPackageString=dirSb.toString();
          sb.append(""String_Node_Str"");
          sb.append(testPackageString);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
          if (enabledNotBlankMethods) {
            sb.append(CRLF);
            List<String> importedPackageList=testMethods.get(0).importList;
            for (            String importedPackage : importedPackageList) {
              sb.append(""String_Node_Str"");
              sb.append(importedPackage);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
            }
          }
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(testCaseClassname);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          for (          GeneratingMethodInfo testMethod : testMethods) {
            sb.append(""String_Node_Str"");
            sb.append(testMethod.testMethodName);
            sb.append(""String_Node_Str"");
            sb.append(CRLF);
            sb.append(""String_Node_Str"");
            sb.append(STR.AUTO_GEN_MSG_TODO);
            sb.append(CRLF);
            if (enabledNotBlankMethods) {
              String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testMethods,testTargetClassname);
              sb.append(notBlankSourceCode);
            }
            sb.append(""String_Node_Str"");
            sb.append(CRLF);
            sb.append(CRLF);
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          testFileOSWriter.write(sb.toString());
        }
      }
 catch (      FileNotFoundException fnfe) {
        fnfe.printStackTrace();
      }
 finally {
        FileResourceUtil.close(testFileOSWriter);
        FileResourceUtil.close(fos);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    FileResourceUtil.close(javaFileIStream);
    FileResourceUtil.close(testFileOSWriter);
  }
  if (refreshFlag && !ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource+ ""String_Node_Str"")) {
    MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
    System.err.println(""String_Node_Str"");
  }
 else {
    int retryCount=0;
    IEditorPart editorPart=null;
    ThreadUtil.sleep(1500);
    while (true) {
      try {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        IWorkspaceRoot root=workspace.getRoot();
        IProject project=root.getProject(projectName);
        IFile testCaseFile=project.getFile(testCaseResource);
        String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        editorPart=IDE.openEditor(page,testCaseFile,editorId);
        if (editorPart == null)         throw new NullPointerException();
        break;
      }
 catch (      Exception e) {
        retryCount++;
        if (retryCount > 3)         break;
        ThreadUtil.sleep(1500);
      }
    }
    editorPart.setFocus();
  }
}","public void run(IAction action){
  InputStream javaFileIStream=null;
  OutputStreamWriter testFileOSWriter=null;
  FileOutputStream fos=null;
  boolean refreshFlag=true;
  String projectName=null;
  String testCaseDirResource=null;
  String testCaseResource=null;
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseClassname=null;
    String testCaseCreateDirpath=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection)     structuredSelection=(StructuredSelection)selection;
    if (structuredSelection != null && structuredSelection.size() == 0) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,STR.Dialog.Common.TITLE,STR.Dialog.Common.REQUIRED);
      refreshFlag=false;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      Shell shell=new Shell();
      MessageDialog.openWarning(shell,STR.Dialog.Common.TITLE,STR.Dialog.Common.SELECT_ONLY_ONE);
      refreshFlag=false;
    }
 else {
      String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
      String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
      String selected=STR.EMPTY;
      int len=dirArrFromProjectRoot.length;
      for (int i=2; i < len - 1; i++)       selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
      selected+=dirArrFromProjectRoot[len - 1];
      projectName=dirArrFromProjectRoot[1];
      String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
      testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
      testCaseClassname=testTargetClassname + STR.SUFFIX_OF_TESTCASE;
      testCaseFilename=testCaseClassname + STR.JAVA_EXP;
      String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      String[] selectedDirArr=selected.split(STR.DIR_SEP);
      testCaseDirResource=""String_Node_Str"";
      int selectedDirArrLength=selectedDirArr.length;
      for (int i=0; i < selectedDirArrLength - 1; i++)       testCaseDirResource+=selectedDirArr[i] + STR.DIR_SEP;
      testCaseDirResource=testCaseDirResource.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA);
      testCaseCreateDirpath=projectRootPath + testCaseDirResource;
      File testDir=new File(testCaseCreateDirpath);
      String[] dirArr=testCaseCreateDirpath.split(STR.DIR_SEP);
      String tmpDirPath=STR.EMPTY;
      String tmpResourceDirPath=STR.EMPTY;
      for (      String each : dirArr) {
        tmpDirPath+=STR.DIR_SEP + each;
        File tmpDir=new File(tmpDirPath);
        if (tmpDir.getPath().length() <= projectRootPath.length())         continue;
        tmpResourceDirPath+=STR.DIR_SEP + each;
        if (!tmpDir.exists()) {
          if (!tmpDir.mkdir())           System.err.println(""String_Node_Str"" + tmpDir.getPath());
          if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + tmpResourceDirPath+ ""String_Node_Str"")) {
            String msg=STR.Dialog.Common.RESOURCE_REFRESH_ERROR;
            MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,msg);
            System.err.println(""String_Node_Str"");
          }
        }
      }
      if (!testDir.mkdirs())       System.err.println(""String_Node_Str"");
      if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource)) {
        MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
        System.err.println(""String_Node_Str"");
      }
      try {
        File outputFile=new File(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
        String msg=STR.Dialog.Common.ALREADY_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ STR.Dialog.Common.CONFIRM_PROCEED;
        if (!outputFile.exists() || MessageDialog.openConfirm(new Shell(),STR.Dialog.Common.TITLE,msg)) {
          String targetClass=""String_Node_Str"" + projectName + ""String_Node_Str""+ selected;
          IResource targetClassResource=workspaceRoot.findMember(targetClass);
          IFile file=(IFile)targetClassResource;
          List<GeneratingMethodInfo> testMethods=TestCaseGenerateUtil.getTestMethodsFromTarget(file);
          fos=new FileOutputStream(testCaseCreateDirpath + STR.DIR_SEP + testCaseFilename);
          testFileOSWriter=new OutputStreamWriter(fos);
          StringBuffer sb=new StringBuffer();
          String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
          String testPackageString=STR.EMPTY;
          String[] tmpDirArr=selected.split(STR.DIR_SEP);
          StringBuffer dirSb=new StringBuffer();
          int packageArrLen=tmpDirArr.length - 2;
          for (int i=3; i < packageArrLen; i++) {
            dirSb.append(tmpDirArr[i]);
            dirSb.append(""String_Node_Str"");
          }
          dirSb.append(tmpDirArr[packageArrLen]);
          testPackageString=dirSb.toString();
          sb.append(""String_Node_Str"");
          sb.append(testPackageString);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          boolean enabledTestMethodsGen=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE);
          boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
          if (enabledTestMethodsGen && enabledNotBlankMethods) {
            sb.append(CRLF);
            List<String> importedPackageList=testMethods.get(0).importList;
            for (            String importedPackage : importedPackageList) {
              sb.append(""String_Node_Str"");
              sb.append(importedPackage);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
            }
          }
          sb.append(CRLF);
          sb.append(""String_Node_Str"");
          sb.append(testCaseClassname);
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          sb.append(CRLF);
          if (enabledTestMethodsGen) {
            for (            GeneratingMethodInfo testMethod : testMethods) {
              sb.append(""String_Node_Str"");
              sb.append(testMethod.testMethodName);
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(""String_Node_Str"");
              sb.append(STR.AUTO_GEN_MSG_TODO);
              sb.append(CRLF);
              if (enabledNotBlankMethods) {
                String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,testMethods,testTargetClassname);
                sb.append(notBlankSourceCode);
              }
              sb.append(""String_Node_Str"");
              sb.append(CRLF);
              sb.append(CRLF);
            }
          }
          sb.append(""String_Node_Str"");
          sb.append(CRLF);
          testFileOSWriter.write(sb.toString());
        }
      }
 catch (      FileNotFoundException fnfe) {
        fnfe.printStackTrace();
      }
 finally {
        FileResourceUtil.close(testFileOSWriter);
        FileResourceUtil.close(fos);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    FileResourceUtil.close(javaFileIStream);
    FileResourceUtil.close(testFileOSWriter);
  }
  if (refreshFlag && !ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseDirResource+ ""String_Node_Str"")) {
    MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
    System.err.println(""String_Node_Str"");
  }
 else {
    int retryCount=0;
    IEditorPart editorPart=null;
    ThreadUtil.sleep(1500);
    while (true) {
      try {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        IWorkspaceRoot root=workspace.getRoot();
        IProject project=root.getProject(projectName);
        IFile testCaseFile=project.getFile(testCaseResource);
        String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        editorPart=IDE.openEditor(page,testCaseFile,editorId);
        if (editorPart == null)         throw new NullPointerException();
        break;
      }
 catch (      Exception e) {
        retryCount++;
        if (retryCount > 3)         break;
        ThreadUtil.sleep(1500);
      }
    }
    editorPart.setFocus();
  }
}",0.984368691238392
12095,"public void run(IAction action){
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String projectName=null;
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseCreateFilepath=null;
    String testCaseResource=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
 else {
    }
    if (structuredSelection != null && structuredSelection.size() == 0) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.REQUIRED);
      return;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.SELECT_ONLY_ONE);
      return;
    }
    String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
    String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
    String selected=STR.EMPTY;
    int allDirLen=dirArrFromProjectRoot.length - 1;
    for (int i=2; i < allDirLen; i++)     selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
    selected+=dirArrFromProjectRoot[allDirLen];
    projectName=dirArrFromProjectRoot[1];
    String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
    testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
    testCaseFilename=testTargetClassname + STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP;
    String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
    if (testTargetClassname == null) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.TestCase.SELECT_JAVA_FILE);
    }
 else {
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      testCaseCreateFilepath=projectRootPath + selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      File outputFile=new File(testCaseCreateFilepath);
      if (!outputFile.exists()) {
        String msg=STR.Dialog.Common.NOT_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ STR.Dialog.Common.COMFIRM_CREATE_NEW_FILE;
        if (testCaseFilename != null && MessageDialog.openConfirm(new Shell(),STR.Dialog.Common.TITLE,msg)) {
          new CreateNewTestCaseAction().run(action,selection);
        }
        return;
      }
      int retryCount=0;
      IEditorPart editorPart=null;
      while (true) {
        try {
          IProject project=workspaceRoot.getProject(projectName);
          IFile testCaseFile=project.getFile(testCaseResource);
          String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          editorPart=IDE.openEditor(page,testCaseFile,editorId);
          editorPart.setFocus();
          if (Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE)) {
            IFile testTargetFile=project.getFile(selected);
            List<GeneratingMethodInfo> unimpledTestMethodNames=TestCaseGenerateUtil.getUnimplementedTestMethodNames(testTargetFile,testCaseFile);
            if (unimpledTestMethodNames.size() > 0) {
              List<String> lines=TestCaseGenerateUtil.getAllSourceCodeLineList(testCaseFile);
              OutputStreamWriter testFileOSWriter=null;
              FileOutputStream fos=null;
              try {
                fos=new FileOutputStream(projectRootPath + STR.DIR_SEP + testCaseResource);
                testFileOSWriter=new OutputStreamWriter(fos);
                boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
                StringBuffer sb=new StringBuffer();
                String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
                for (                String line : lines) {
                  if (line.equals(""String_Node_Str"")) {
                    for (                    GeneratingMethodInfo testMethod : unimpledTestMethodNames) {
                      sb.append(""String_Node_Str"");
                      sb.append(testMethod.testMethodName);
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(""String_Node_Str"");
                      sb.append(STR.AUTO_GEN_MSG_TODO);
                      sb.append(CRLF);
                      if (enabledNotBlankMethods) {
                        String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,unimpledTestMethodNames,testTargetClassname);
                        sb.append(notBlankSourceCode);
                      }
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(CRLF);
                    }
                    sb.append(""String_Node_Str"");
                    sb.append(CRLF);
                    break;
                  }
 else {
                    sb.append(line);
                    sb.append(CRLF);
                  }
                }
                String content=sb.toString();
                testFileOSWriter.write(content);
              }
  finally {
                FileResourceUtil.close(testFileOSWriter);
                FileResourceUtil.close(fos);
              }
            }
            if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseResource+ ""String_Node_Str"")) {
              MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
              System.err.println(""String_Node_Str"");
            }
 else {
              retryCount=0;
              ThreadUtil.sleep(1500);
              while (true) {
                try {
                  editorPart=IDE.openEditor(page,testCaseFile,editorId);
                  if (editorPart == null)                   throw new NullPointerException();
                  break;
                }
 catch (                Exception e) {
                  retryCount++;
                  if (retryCount > 3)                   break;
                  ThreadUtil.sleep(1500);
                }
              }
              editorPart.setFocus();
            }
          }
        }
 catch (        Exception e) {
          retryCount++;
          if (retryCount > 10)           break;
          e.printStackTrace();
          ThreadUtil.sleep(1500);
        }
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void run(IAction action){
  try {
    IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
    String projectName=null;
    String testTargetClassname=null;
    String testCaseFilename=null;
    String testCaseCreateFilepath=null;
    String testCaseResource=null;
    StructuredSelection structuredSelection=null;
    if (selection instanceof StructuredSelection) {
      structuredSelection=(StructuredSelection)selection;
    }
 else {
    }
    if (structuredSelection != null && structuredSelection.size() == 0) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.REQUIRED);
      return;
    }
 else     if (structuredSelection != null && structuredSelection.size() > 1) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.SELECT_ONLY_ONE);
      return;
    }
    String pathFromProjectRoot=ResourcePathUtil.getPathStartsFromProjectRoot(structuredSelection);
    String[] dirArrFromProjectRoot=pathFromProjectRoot.split(STR.DIR_SEP);
    String selected=STR.EMPTY;
    int allDirLen=dirArrFromProjectRoot.length - 1;
    for (int i=2; i < allDirLen; i++)     selected+=dirArrFromProjectRoot[i] + STR.DIR_SEP;
    selected+=dirArrFromProjectRoot[allDirLen];
    projectName=dirArrFromProjectRoot[1];
    String testTargetClassFilename=dirArrFromProjectRoot[dirArrFromProjectRoot.length - 1];
    testTargetClassname=testTargetClassFilename.replace(STR.JAVA_EXP,STR.EMPTY);
    testCaseFilename=testTargetClassname + STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP;
    String projectRootPath=workspaceRoot.getLocation() + STR.DIR_SEP + projectName+ STR.DIR_SEP;
    if (testTargetClassname == null) {
      MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.TestCase.SELECT_JAVA_FILE);
    }
 else {
      testCaseResource=selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      testCaseCreateFilepath=projectRootPath + selected.replace(STR.SRC_MAIN_JAVA,STR.SRC_TEST_JAVA).replace(STR.JAVA_EXP,STR.SUFFIX_OF_TESTCASE + STR.JAVA_EXP);
      File outputFile=new File(testCaseCreateFilepath);
      if (!outputFile.exists()) {
        String msg=STR.Dialog.Common.NOT_EXIST + ""String_Node_Str"" + testCaseFilename+ ""String_Node_Str""+ STR.LINE_FEED+ STR.Dialog.Common.COMFIRM_CREATE_NEW_FILE;
        if (testCaseFilename != null && MessageDialog.openConfirm(new Shell(),STR.Dialog.Common.TITLE,msg)) {
          new CreateNewTestCaseAction().run(action,selection);
        }
        return;
      }
      int retryCount=0;
      IEditorPart editorPart=null;
      while (true) {
        try {
          IProject project=workspaceRoot.getProject(projectName);
          IFile testCaseFile=project.getFile(testCaseResource);
          String editorId=IDE.getEditorDescriptor(testCaseFile.getName()).getId();
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          editorPart=IDE.openEditor(page,testCaseFile,editorId);
          editorPart.setFocus();
          if (Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE)) {
            IFile testTargetFile=project.getFile(selected);
            List<GeneratingMethodInfo> unimpledTestMethodNames=TestCaseGenerateUtil.getUnimplementedTestMethodNames(testTargetFile,testCaseFile);
            if (unimpledTestMethodNames.size() > 0) {
              List<String> lines=TestCaseGenerateUtil.getAllSourceCodeLineList(testCaseFile);
              OutputStreamWriter testFileOSWriter=null;
              FileOutputStream fos=null;
              try {
                fos=new FileOutputStream(projectRootPath + STR.DIR_SEP + testCaseResource);
                testFileOSWriter=new OutputStreamWriter(fos);
                boolean enabledTestMethodsGen=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.ENABLE);
                boolean enabledNotBlankMethods=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodGen.METHOD_SAMPLE_IMPLEMENTATION);
                StringBuffer sb=new StringBuffer();
                String CRLF=STR.CARRIAGE_RETURN + STR.LINE_FEED;
                for (                String line : lines) {
                  if (line.equals(""String_Node_Str"") && enabledTestMethodsGen) {
                    for (                    GeneratingMethodInfo testMethod : unimpledTestMethodNames) {
                      sb.append(""String_Node_Str"");
                      sb.append(testMethod.testMethodName);
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(""String_Node_Str"");
                      sb.append(STR.AUTO_GEN_MSG_TODO);
                      sb.append(CRLF);
                      if (enabledNotBlankMethods) {
                        String notBlankSourceCode=TestCaseGenerateUtil.getNotBlankTestMethodSource(testMethod,unimpledTestMethodNames,testTargetClassname);
                        sb.append(notBlankSourceCode);
                      }
                      sb.append(""String_Node_Str"");
                      sb.append(CRLF);
                      sb.append(CRLF);
                    }
                    sb.append(""String_Node_Str"");
                    sb.append(CRLF);
                    break;
                  }
 else {
                    sb.append(line);
                    sb.append(CRLF);
                  }
                }
                String content=sb.toString();
                testFileOSWriter.write(content);
              }
  finally {
                FileResourceUtil.close(testFileOSWriter);
                FileResourceUtil.close(fos);
              }
            }
            if (!ResourceRefreshUtil.refreshLocal(null,projectName + STR.DIR_SEP + testCaseResource+ ""String_Node_Str"")) {
              MessageDialog.openWarning(new Shell(),STR.Dialog.Common.TITLE,STR.Dialog.Common.RESOURCE_REFRESH_ERROR);
              System.err.println(""String_Node_Str"");
            }
 else {
              retryCount=0;
              ThreadUtil.sleep(1500);
              while (true) {
                try {
                  editorPart=IDE.openEditor(page,testCaseFile,editorId);
                  if (editorPart == null)                   throw new NullPointerException();
                  break;
                }
 catch (                Exception e) {
                  retryCount++;
                  if (retryCount > 3)                   break;
                  ThreadUtil.sleep(1500);
                }
              }
              editorPart.setFocus();
            }
          }
        }
 catch (        Exception e) {
          retryCount++;
          if (retryCount > 10)           break;
          e.printStackTrace();
          ThreadUtil.sleep(1500);
        }
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9880986937590712
12096,"public static List<String> getTestMethodsFromTarget(IFile javaFile) throws Exception {
  List<String> testMethods=new ArrayList<String>();
  boolean enabled=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodAutoGenerate.ENABLE);
  String delimiter=Activator.getDefault().getPreferenceStore().getString(STR.Preference.TestMethodAutoGenerate.DELIMITER);
  boolean enabledArgs=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodAutoGenerate.ARGS);
  String argsPrefix=Activator.getDefault().getPreferenceStore().getString(STR.Preference.TestMethodAutoGenerate.ARGS_PREFIX);
  String argsDelimiter=Activator.getDefault().getPreferenceStore().getString(STR.Preference.TestMethodAutoGenerate.ARGS_DELIMITER);
  boolean enabledReturn=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodAutoGenerate.RETURN);
  String returnPrefix=Activator.getDefault().getPreferenceStore().getString(STR.Preference.TestMethodAutoGenerate.RETURN_PREFIX);
  String returnDelimiter=Activator.getDefault().getPreferenceStore().getString(STR.Preference.TestMethodAutoGenerate.RETURN_DELIMITER);
  if (enabled) {
    InputStream is=null;
    BufferedReader br=null;
    try {
      is=javaFile.getContents();
      br=new BufferedReader(new InputStreamReader(is));
      StringBuffer tmpsb=new StringBuffer();
      String line=null;
      while ((line=br.readLine()) != null)       tmpsb.append(line + ""String_Node_Str"");
      String allSrc=tmpsb.toString();
      String[] publics=allSrc.split(""String_Node_Str"");
      for (      String publicsEach : publics) {
        if (publicsEach.matches(""String_Node_Str"")) {
          Matcher matcher=Pattern.compile(""String_Node_Str"").matcher(publicsEach);
          if (matcher.find()) {
            String methodReturnType=matcher.group(1);
            String methodName=matcher.group(2);
            String args=matcher.group(3);
            String[] argArr=args.split(""String_Node_Str"");
            String argTypes=""String_Node_Str"";
            for (int i=0; i < argArr.length; i+=2) {
              String arg=""String_Node_Str"";
              arg=argArr[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
              arg=arg.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
              argTypes+=argsDelimiter + arg;
            }
            String testMethodName=""String_Node_Str"" + delimiter + methodName;
            if (enabledReturn) {
              methodReturnType=methodReturnType.replaceAll(""String_Node_Str"",""String_Node_Str"");
              testMethodName+=delimiter + returnPrefix + returnDelimiter+ methodReturnType;
            }
            if (enabledArgs)             testMethodName+=delimiter + argsPrefix + argTypes;
            testMethods.add(testMethodName);
          }
        }
      }
    }
  finally {
      if (is != null)       try {
        is.close();
      }
 catch (      Exception ignore) {
      }
      if (br != null)       try {
        br.close();
      }
 catch (      Exception ignore) {
      }
    }
  }
  return testMethods;
}","public static List<String> getTestMethodsFromTarget(IFile javaFile) throws Exception {
  List<String> testMethods=new ArrayList<String>();
  boolean enabled=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodAutoGenerate.ENABLE);
  String delimiter=Activator.getDefault().getPreferenceStore().getString(STR.Preference.TestMethodAutoGenerate.DELIMITER);
  boolean enabledArgs=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodAutoGenerate.ARGS);
  String argsPrefix=Activator.getDefault().getPreferenceStore().getString(STR.Preference.TestMethodAutoGenerate.ARGS_PREFIX);
  String argsDelimiter=Activator.getDefault().getPreferenceStore().getString(STR.Preference.TestMethodAutoGenerate.ARGS_DELIMITER);
  boolean enabledReturn=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodAutoGenerate.RETURN);
  String returnPrefix=Activator.getDefault().getPreferenceStore().getString(STR.Preference.TestMethodAutoGenerate.RETURN_PREFIX);
  String returnDelimiter=Activator.getDefault().getPreferenceStore().getString(STR.Preference.TestMethodAutoGenerate.RETURN_DELIMITER);
  if (enabled) {
    InputStream is=null;
    BufferedReader br=null;
    try {
      is=javaFile.getContents();
      br=new BufferedReader(new InputStreamReader(is));
      StringBuffer tmpsb=new StringBuffer();
      String line=null;
      while ((line=br.readLine()) != null)       tmpsb.append(line + ""String_Node_Str"");
      String allSrc=tmpsb.toString();
      String[] publics=allSrc.split(""String_Node_Str"");
      for (      String publicsEach : publics) {
        if (publicsEach.matches(RXP_WS + RXP_ANY_RQ + ""String_Node_Str""+ RXP_ANY_RQ+ RXP_WS+ ""String_Node_Str""+ RXP_ANY_NRQ+ ""String_Node_Str""+ RXP_WS+ RXP_ANY_NRQ+ RXP_WS+ RXP_ANY_NRQ+ ""String_Node_Str"")) {
          Matcher matcher=Pattern.compile(RXP_WS + ""String_Node_Str"" + RXP_ANY_RQ+ ""String_Node_Str""+ RXP_ANY_RQ+ ""String_Node_Str""+ RXP_WS+ ""String_Node_Str""+ RXP_ANY_NRQ+ ""String_Node_Str""+ RXP_WS+ RXP_ANY_NRQ+ RXP_WS+ RXP_ANY_NRQ+ ""String_Node_Str"").matcher(publicsEach);
          if (matcher.find()) {
            String methodReturnType=matcher.group(1);
            String methodName=matcher.group(2);
            if (methodReturnType.equals(""String_Node_Str""))             methodName=methodName.split(""String_Node_Str"")[1];
            String args=matcher.group(3);
            String[] argArr=args.split(""String_Node_Str"");
            String argTypes=STR.EMPTY;
            for (int i=0; i < argArr.length; i+=2) {
              String arg=STR.EMPTY;
              arg=argArr[i].replaceAll(""String_Node_Str"",STR.EMPTY);
              arg=arg.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
              argTypes+=argsDelimiter + arg;
            }
            String testMethodName=""String_Node_Str"" + delimiter + methodName;
            if (enabledReturn) {
              methodReturnType=methodReturnType.replaceAll(""String_Node_Str"",STR.EMPTY);
              testMethodName+=delimiter + returnPrefix + returnDelimiter+ methodReturnType;
            }
            if (enabledArgs)             testMethodName+=delimiter + argsPrefix + argTypes;
            testMethods.add(testMethodName);
          }
        }
      }
    }
  finally {
      if (is != null)       try {
        is.close();
      }
 catch (      Exception ignore) {
      }
      if (br != null)       try {
        br.close();
      }
 catch (      Exception ignore) {
      }
    }
  }
  return testMethods;
}",0.9145668704338752
12097,"public static List<String> getMethodNames(IFile javaFile) throws Exception {
  List<String> methodNames=new ArrayList<String>();
  boolean enabled=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodAutoGenerate.ENABLE);
  if (enabled) {
    InputStream is=null;
    BufferedReader br=null;
    try {
      is=javaFile.getContents();
      br=new BufferedReader(new InputStreamReader(is));
      StringBuffer tmpsb=new StringBuffer();
      String line=null;
      while ((line=br.readLine()) != null)       tmpsb.append(line + ""String_Node_Str"");
      String allSrc=tmpsb.toString();
      String[] publics=allSrc.split(""String_Node_Str"");
      for (      String publicsEach : publics) {
        if (publicsEach.matches(""String_Node_Str"")) {
          Matcher matcher=Pattern.compile(""String_Node_Str"").matcher(publicsEach);
          if (matcher.find()) {
            String methodName=matcher.group(1);
            methodNames.add(methodName);
          }
        }
      }
    }
  finally {
      if (is != null)       try {
        is.close();
      }
 catch (      Exception ignore) {
      }
      if (br != null)       try {
        br.close();
      }
 catch (      Exception ignore) {
      }
    }
  }
  return methodNames;
}","public static List<String> getMethodNames(IFile javaFile) throws Exception {
  List<String> methodNames=new ArrayList<String>();
  boolean enabled=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodAutoGenerate.ENABLE);
  if (enabled) {
    InputStream is=null;
    BufferedReader br=null;
    try {
      is=javaFile.getContents();
      br=new BufferedReader(new InputStreamReader(is));
      StringBuffer tmpsb=new StringBuffer();
      String line=null;
      while ((line=br.readLine()) != null)       tmpsb.append(line + ""String_Node_Str"");
      String allSrc=tmpsb.toString();
      String[] publics=allSrc.split(""String_Node_Str"");
      for (      String publicsEach : publics) {
        if (publicsEach.matches(RXP_WS + RXP_ANY_RQ + ""String_Node_Str""+ RXP_ANY_RQ+ RXP_WS+ ""String_Node_Str""+ RXP_ANY_NRQ+ ""String_Node_Str""+ RXP_WS+ RXP_ANY_NRQ+ RXP_WS+ RXP_ANY_NRQ+ ""String_Node_Str"")) {
          Matcher matcher=Pattern.compile(RXP_WS + ""String_Node_Str"" + RXP_ANY_RQ+ ""String_Node_Str""+ RXP_ANY_RQ+ ""String_Node_Str""+ RXP_WS+ ""String_Node_Str""+ RXP_ANY_NRQ+ ""String_Node_Str""+ RXP_WS+ RXP_ANY_NRQ+ RXP_WS+ RXP_ANY_NRQ+ ""String_Node_Str"").matcher(publicsEach);
          if (matcher.find()) {
            String methodReturnType=matcher.group(1);
            String methodName=matcher.group(2);
            if (methodReturnType.equals(""String_Node_Str""))             methodName=methodName.split(""String_Node_Str"")[1];
            methodNames.add(methodName);
          }
        }
      }
    }
  finally {
      if (is != null)       try {
        is.close();
      }
 catch (      Exception ignore) {
      }
      if (br != null)       try {
        br.close();
      }
 catch (      Exception ignore) {
      }
    }
  }
  return methodNames;
}",0.8268412438625204
12098,"public static List<String> getAllSourceCodeLineList(IFile javaFile) throws Exception {
  List<String> lines=new ArrayList<String>();
  InputStream is=null;
  BufferedReader br=null;
  try {
    is=javaFile.getContents();
    br=new BufferedReader(new InputStreamReader(is));
    String line=null;
    while ((line=br.readLine()) != null)     lines.add(line.replace(""String_Node_Str"",""String_Node_Str""));
  }
  finally {
    if (is != null)     try {
      is.close();
    }
 catch (    Exception ignore) {
    }
    if (br != null)     try {
      br.close();
    }
 catch (    Exception ignore) {
    }
  }
  return lines;
}","public static List<String> getAllSourceCodeLineList(IFile javaFile) throws Exception {
  List<String> lines=new ArrayList<String>();
  InputStream is=null;
  BufferedReader br=null;
  try {
    is=javaFile.getContents();
    br=new BufferedReader(new InputStreamReader(is));
    String line=null;
    while ((line=br.readLine()) != null)     lines.add(line.replace(""String_Node_Str"",STR.EMPTY));
  }
  finally {
    if (is != null)     try {
      is.close();
    }
 catch (    Exception ignore) {
    }
    if (br != null)     try {
      br.close();
    }
 catch (    Exception ignore) {
    }
  }
  return lines;
}",0.9790660225442834
12099,"public static List<String> getTestMethodsFromTarget(IFile javaFile) throws Exception {
  List<String> testMethods=new ArrayList<String>();
  boolean enabled=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodAutoGenerate.ENABLE);
  String delimiter=Activator.getDefault().getPreferenceStore().getString(STR.Preference.TestMethodAutoGenerate.DELIMITER);
  boolean enabledArgs=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodAutoGenerate.ARGS);
  String argsPrefix=Activator.getDefault().getPreferenceStore().getString(STR.Preference.TestMethodAutoGenerate.ARGS_PREFIX);
  String argsDelimiter=Activator.getDefault().getPreferenceStore().getString(STR.Preference.TestMethodAutoGenerate.ARGS_DELIMITER);
  boolean enabledReturn=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodAutoGenerate.RETURN);
  String returnPrefix=Activator.getDefault().getPreferenceStore().getString(STR.Preference.TestMethodAutoGenerate.RETURN_PREFIX);
  String returnDelimiter=Activator.getDefault().getPreferenceStore().getString(STR.Preference.TestMethodAutoGenerate.RETURN_DELIMITER);
  if (enabled) {
    InputStream is=null;
    BufferedReader br=null;
    try {
      is=javaFile.getContents();
      br=new BufferedReader(new InputStreamReader(is));
      StringBuffer tmpsb=new StringBuffer();
      String line=null;
      while ((line=br.readLine()) != null)       tmpsb.append(line + ""String_Node_Str"");
      String allSrc=tmpsb.toString();
      String[] publics=allSrc.split(""String_Node_Str"");
      for (      String publicsEach : publics) {
        if (publicsEach.matches(""String_Node_Str"")) {
          Matcher matcher=Pattern.compile(""String_Node_Str"").matcher(publicsEach);
          if (matcher.find()) {
            String methodReturnType=matcher.group(1);
            String methodName=matcher.group(2);
            String args=matcher.group(3);
            String[] argArr=args.split(""String_Node_Str"");
            String argTypes=""String_Node_Str"";
            for (int i=0; i < argArr.length; i+=2) {
              argTypes+=argsDelimiter + argArr[i];
            }
            String testMethodName=""String_Node_Str"" + delimiter + methodName;
            if (enabledReturn)             testMethodName+=delimiter + returnPrefix + returnDelimiter+ methodReturnType;
            if (enabledArgs)             testMethodName+=delimiter + argsPrefix + argTypes;
            testMethods.add(testMethodName);
          }
        }
      }
    }
  finally {
      if (is != null)       try {
        is.close();
      }
 catch (      Exception ignore) {
      }
      if (br != null)       try {
        br.close();
      }
 catch (      Exception ignore) {
      }
    }
  }
  return testMethods;
}","public static List<String> getTestMethodsFromTarget(IFile javaFile) throws Exception {
  List<String> testMethods=new ArrayList<String>();
  boolean enabled=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodAutoGenerate.ENABLE);
  String delimiter=Activator.getDefault().getPreferenceStore().getString(STR.Preference.TestMethodAutoGenerate.DELIMITER);
  boolean enabledArgs=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodAutoGenerate.ARGS);
  String argsPrefix=Activator.getDefault().getPreferenceStore().getString(STR.Preference.TestMethodAutoGenerate.ARGS_PREFIX);
  String argsDelimiter=Activator.getDefault().getPreferenceStore().getString(STR.Preference.TestMethodAutoGenerate.ARGS_DELIMITER);
  boolean enabledReturn=Activator.getDefault().getPreferenceStore().getBoolean(STR.Preference.TestMethodAutoGenerate.RETURN);
  String returnPrefix=Activator.getDefault().getPreferenceStore().getString(STR.Preference.TestMethodAutoGenerate.RETURN_PREFIX);
  String returnDelimiter=Activator.getDefault().getPreferenceStore().getString(STR.Preference.TestMethodAutoGenerate.RETURN_DELIMITER);
  if (enabled) {
    InputStream is=null;
    BufferedReader br=null;
    try {
      is=javaFile.getContents();
      br=new BufferedReader(new InputStreamReader(is));
      StringBuffer tmpsb=new StringBuffer();
      String line=null;
      while ((line=br.readLine()) != null)       tmpsb.append(line + ""String_Node_Str"");
      String allSrc=tmpsb.toString();
      String[] publics=allSrc.split(""String_Node_Str"");
      for (      String publicsEach : publics) {
        if (publicsEach.matches(""String_Node_Str"")) {
          Matcher matcher=Pattern.compile(""String_Node_Str"").matcher(publicsEach);
          if (matcher.find()) {
            String methodReturnType=matcher.group(1);
            String methodName=matcher.group(2);
            String args=matcher.group(3);
            String[] argArr=args.split(""String_Node_Str"");
            String argTypes=""String_Node_Str"";
            for (int i=0; i < argArr.length; i+=2) {
              String arg=""String_Node_Str"";
              arg=argArr[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
              arg=arg.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
              argTypes+=argsDelimiter + arg;
            }
            String testMethodName=""String_Node_Str"" + delimiter + methodName;
            if (enabledReturn) {
              methodReturnType=methodReturnType.replaceAll(""String_Node_Str"",""String_Node_Str"");
              testMethodName+=delimiter + returnPrefix + returnDelimiter+ methodReturnType;
            }
            if (enabledArgs)             testMethodName+=delimiter + argsPrefix + argTypes;
            testMethods.add(testMethodName);
          }
        }
      }
    }
  finally {
      if (is != null)       try {
        is.close();
      }
 catch (      Exception ignore) {
      }
      if (br != null)       try {
        br.close();
      }
 catch (      Exception ignore) {
      }
    }
  }
  return testMethods;
}",0.8856612058773856
12100,"private void writeHandler(String section,String handlerIdentifier,VirtualMouseMoveAnalogReplayHandler handler){
  this.propertiesStorage.write(section,handlerIdentifier + ""String_Node_Str"",handler.getSensitivityX());
  this.propertiesStorage.write(section,handlerIdentifier + ""String_Node_Str"",handler.getSensitivityY());
  this.propertiesStorage.write(section,handlerIdentifier + ""String_Node_Str"",handler.isInvertY());
}","private void writeHandler(String section,String handlerIdentifier,VirtualMouseMoveAnalogReplayHandler handler){
  this.propertiesStorage.write(section,handlerIdentifier + ""String_Node_Str"",handler.getSensitivityX());
  this.propertiesStorage.write(section,handlerIdentifier + ""String_Node_Str"",handler.getSensitivityY());
  this.propertiesStorage.write(section,handlerIdentifier + ""String_Node_Str"",handler.getSensitivitySecondaryX());
  this.propertiesStorage.write(section,handlerIdentifier + ""String_Node_Str"",handler.getSensitivitySecondaryY());
  this.propertiesStorage.write(section,handlerIdentifier + ""String_Node_Str"",handler.isInvertY());
}",0.7873134328358209
12101,"private VirtualMouseMoveAnalogReplayHandler readMouseMoveAnalogHandler(String section,String handlerIdentifier){
  int sensitivityX=this.propertiesStorage.read(section,handlerIdentifier + ""String_Node_Str"",VirtualMouseMoveAnalogReplayHandler.DefaultSensitivity);
  int sensitivityY=this.propertiesStorage.read(section,handlerIdentifier + ""String_Node_Str"",VirtualMouseMoveAnalogReplayHandler.DefaultSensitivity);
  boolean invertY=this.propertiesStorage.readBoolean(section,handlerIdentifier + ""String_Node_Str"");
  return new VirtualMouseMoveAnalogReplayHandler(sensitivityX,sensitivityY,invertY);
}","private VirtualMouseMoveAnalogReplayHandler readMouseMoveAnalogHandler(String section,String handlerIdentifier){
  int sensitivityX=this.propertiesStorage.read(section,handlerIdentifier + ""String_Node_Str"",VirtualMouseMoveAnalogReplayHandler.DefaultSensitivity);
  int sensitivityY=this.propertiesStorage.read(section,handlerIdentifier + ""String_Node_Str"",VirtualMouseMoveAnalogReplayHandler.DefaultSensitivity);
  int sensitivitySecondaryX=this.propertiesStorage.read(section,handlerIdentifier + ""String_Node_Str"",VirtualMouseMoveAnalogReplayHandler.DefaultSecondarySensitivity);
  int sensitivitySecondaryY=this.propertiesStorage.read(section,handlerIdentifier + ""String_Node_Str"",VirtualMouseMoveAnalogReplayHandler.DefaultSecondarySensitivity);
  boolean invertY=this.propertiesStorage.readBoolean(section,handlerIdentifier + ""String_Node_Str"");
  return new VirtualMouseMoveAnalogReplayHandler(sensitivityX,sensitivityY,sensitivitySecondaryX,sensitivitySecondaryY,invertY);
}",0.759493670886076
12102,"public VirtualMouseMoveAnalogReplayHandler(){
  this(DefaultSensitivity,DefaultSensitivity,false);
}","public VirtualMouseMoveAnalogReplayHandler(){
  this(DefaultSensitivity,DefaultSensitivity,DefaultSecondarySensitivity,DefaultSecondarySensitivity,false);
}",0.78125
12103,"private static JPanel createSensitivityPanel(final ConfigurationPart dataContext){
  JPanel panel=new JPanel(new GridBagLayout());
  GridBagConstraints gridConstraints=new GridBagConstraints();
  gridConstraints.fill=GridBagConstraints.HORIZONTAL;
  gridConstraints.insets=new Insets(5,0,0,0);
  gridConstraints.weightx=1;
  gridConstraints.gridy=0;
  panel.add(new JLabel(""String_Node_Str""),gridConstraints);
  final JSlider lookHorizontalSlider=new JSlider();
  lookHorizontalSlider.setMajorTickSpacing(5);
  lookHorizontalSlider.setMinorTickSpacing(1);
  lookHorizontalSlider.setPaintTicks(true);
  lookHorizontalSlider.setPaintLabels(true);
  lookHorizontalSlider.setSnapToTicks(true);
  lookHorizontalSlider.setValue(dataContext.getMouseMode1SensitivityX());
  lookHorizontalSlider.setMinimum(0);
  lookHorizontalSlider.setMaximum(40);
  lookHorizontalSlider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      dataContext.setMouseMode1SensitivityX(lookHorizontalSlider.getValue());
    }
  }
);
  gridConstraints.gridy=1;
  panel.add(lookHorizontalSlider,gridConstraints);
  final JSlider lookVerticalSlider=new JSlider();
  lookVerticalSlider.setMajorTickSpacing(5);
  lookVerticalSlider.setMinorTickSpacing(1);
  lookVerticalSlider.setPaintTicks(true);
  lookVerticalSlider.setPaintLabels(true);
  lookVerticalSlider.setSnapToTicks(true);
  lookVerticalSlider.setValue(dataContext.getMouseMode1SensitivityY());
  lookVerticalSlider.setMinimum(0);
  lookVerticalSlider.setMaximum(40);
  lookVerticalSlider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      dataContext.setMouseMode1SensitivityY(lookVerticalSlider.getValue());
    }
  }
);
  gridConstraints.gridy=2;
  panel.add(lookVerticalSlider,gridConstraints);
  gridConstraints.gridy=3;
  panel.add(new JLabel(""String_Node_Str""),gridConstraints);
  final JSlider lookMouseHorizontalSlider=new JSlider();
  lookMouseHorizontalSlider.setMajorTickSpacing(5);
  lookMouseHorizontalSlider.setMinorTickSpacing(1);
  lookMouseHorizontalSlider.setPaintTicks(true);
  lookMouseHorizontalSlider.setPaintLabels(true);
  lookMouseHorizontalSlider.setSnapToTicks(true);
  lookMouseHorizontalSlider.setMinimum(1);
  lookMouseHorizontalSlider.setMaximum(40);
  lookMouseHorizontalSlider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
    }
  }
);
  gridConstraints.gridy=4;
  panel.add(lookMouseHorizontalSlider,gridConstraints);
  final JSlider lookMouseVerticalSlider=new JSlider();
  lookMouseVerticalSlider.setMajorTickSpacing(5);
  lookMouseVerticalSlider.setMinorTickSpacing(1);
  lookMouseVerticalSlider.setPaintTicks(true);
  lookMouseVerticalSlider.setPaintLabels(true);
  lookMouseVerticalSlider.setSnapToTicks(true);
  lookMouseVerticalSlider.setMinimum(0);
  lookMouseVerticalSlider.setMaximum(40);
  lookMouseVerticalSlider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
    }
  }
);
  gridConstraints.gridy=5;
  panel.add(lookMouseVerticalSlider,gridConstraints);
  final JCheckBox invertPitchCheckBox=new JCheckBox();
  invertPitchCheckBox.setAction(new SimpleAction(){
    @Override public void actionPerformed(    ActionEvent e){
      dataContext.setLookInverted(invertPitchCheckBox.isSelected());
    }
  }
);
  invertPitchCheckBox.setText(""String_Node_Str"");
  invertPitchCheckBox.setSelected(dataContext.isLookInverted());
  gridConstraints.gridy=6;
  panel.add(invertPitchCheckBox,gridConstraints);
  JPanel fillerPanel=new JPanel();
  Random rand=new Random(System.currentTimeMillis());
  int niceSettingsssYouHaveThere=rand.nextInt(4);
  if (niceSettingsssYouHaveThere == 0) {
    JLabel iconLabel=new JLabel();
    URL iconUrl=ConfigurationView.class.getClassLoader().getResource(ContentResources.CHROME_SENSITIVITYPANEL_FILLER);
    ImageIcon icon=new ImageIcon(iconUrl);
    Image newimg=icon.getImage().getScaledInstance(120,120,java.awt.Image.SCALE_SMOOTH);
    iconLabel.setIcon(new ImageIcon(newimg));
    fillerPanel.add(iconLabel,BorderLayout.CENTER);
  }
  gridConstraints.gridy=7;
  gridConstraints.weighty=1;
  panel.add(fillerPanel,gridConstraints);
  return panel;
}","private static JPanel createSensitivityPanel(final ConfigurationPart dataContext){
  JPanel panel=new JPanel(new GridBagLayout());
  GridBagConstraints gridConstraints=new GridBagConstraints();
  gridConstraints.fill=GridBagConstraints.HORIZONTAL;
  gridConstraints.insets=new Insets(5,0,0,0);
  gridConstraints.weightx=1;
  gridConstraints.gridy=0;
  panel.add(new JLabel(""String_Node_Str""),gridConstraints);
  final JSlider lookHorizontalSlider=new JSlider();
  lookHorizontalSlider.setMajorTickSpacing(5);
  lookHorizontalSlider.setMinorTickSpacing(1);
  lookHorizontalSlider.setPaintTicks(true);
  lookHorizontalSlider.setPaintLabels(true);
  lookHorizontalSlider.setSnapToTicks(true);
  lookHorizontalSlider.setValue(dataContext.getMouseMode1SensitivityX());
  lookHorizontalSlider.setMinimum(0);
  lookHorizontalSlider.setMaximum(40);
  lookHorizontalSlider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      dataContext.setMouseMode1SensitivityX(lookHorizontalSlider.getValue());
    }
  }
);
  gridConstraints.gridy=1;
  panel.add(lookHorizontalSlider,gridConstraints);
  final JSlider lookVerticalSlider=new JSlider();
  lookVerticalSlider.setMajorTickSpacing(5);
  lookVerticalSlider.setMinorTickSpacing(1);
  lookVerticalSlider.setPaintTicks(true);
  lookVerticalSlider.setPaintLabels(true);
  lookVerticalSlider.setSnapToTicks(true);
  lookVerticalSlider.setValue(dataContext.getMouseMode1SensitivityY());
  lookVerticalSlider.setMinimum(0);
  lookVerticalSlider.setMaximum(40);
  lookVerticalSlider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      dataContext.setMouseMode1SensitivityY(lookVerticalSlider.getValue());
    }
  }
);
  gridConstraints.gridy=2;
  panel.add(lookVerticalSlider,gridConstraints);
  gridConstraints.gridy=3;
  panel.add(new JLabel(""String_Node_Str""),gridConstraints);
  final JSlider lookMouseHorizontalSlider=new JSlider();
  lookMouseHorizontalSlider.setMajorTickSpacing(5);
  lookMouseHorizontalSlider.setMinorTickSpacing(1);
  lookMouseHorizontalSlider.setPaintTicks(true);
  lookMouseHorizontalSlider.setPaintLabels(true);
  lookMouseHorizontalSlider.setSnapToTicks(true);
  lookMouseHorizontalSlider.setValue(dataContext.getMouseMode2SensitivityX());
  lookMouseHorizontalSlider.setMinimum(0);
  lookMouseHorizontalSlider.setMaximum(40);
  lookMouseHorizontalSlider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      dataContext.setMouseMode2SensitivityX(lookMouseHorizontalSlider.getValue());
    }
  }
);
  gridConstraints.gridy=4;
  panel.add(lookMouseHorizontalSlider,gridConstraints);
  final JSlider lookMouseVerticalSlider=new JSlider();
  lookMouseVerticalSlider.setMajorTickSpacing(5);
  lookMouseVerticalSlider.setMinorTickSpacing(1);
  lookMouseVerticalSlider.setPaintTicks(true);
  lookMouseVerticalSlider.setPaintLabels(true);
  lookMouseVerticalSlider.setSnapToTicks(true);
  lookMouseVerticalSlider.setValue(dataContext.getMouseMode2SensitivityY());
  lookMouseVerticalSlider.setMinimum(0);
  lookMouseVerticalSlider.setMaximum(40);
  lookMouseVerticalSlider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      dataContext.setMouseMode2SensitivityY(lookMouseVerticalSlider.getValue());
    }
  }
);
  gridConstraints.gridy=5;
  panel.add(lookMouseVerticalSlider,gridConstraints);
  final JCheckBox invertPitchCheckBox=new JCheckBox();
  invertPitchCheckBox.setAction(new SimpleAction(){
    @Override public void actionPerformed(    ActionEvent e){
      dataContext.setLookInverted(invertPitchCheckBox.isSelected());
    }
  }
);
  invertPitchCheckBox.setText(""String_Node_Str"");
  invertPitchCheckBox.setSelected(dataContext.isLookInverted());
  gridConstraints.gridy=6;
  panel.add(invertPitchCheckBox,gridConstraints);
  JPanel fillerPanel=new JPanel();
  Random rand=new Random(System.currentTimeMillis());
  int niceSettingsssYouHaveThere=rand.nextInt(4);
  if (niceSettingsssYouHaveThere == 0) {
    JLabel iconLabel=new JLabel();
    URL iconUrl=ConfigurationView.class.getClassLoader().getResource(ContentResources.CHROME_SENSITIVITYPANEL_FILLER);
    ImageIcon icon=new ImageIcon(iconUrl);
    Image newimg=icon.getImage().getScaledInstance(120,120,java.awt.Image.SCALE_SMOOTH);
    iconLabel.setIcon(new ImageIcon(newimg));
    fillerPanel.add(iconLabel,BorderLayout.CENTER);
  }
  gridConstraints.gridy=7;
  gridConstraints.weighty=1;
  panel.add(fillerPanel,gridConstraints);
  return panel;
}",0.9632671686059776
12104,"public void stateChanged(ChangeEvent e){
}","public void stateChanged(ChangeEvent e){
  dataContext.setMouseMode2SensitivityY(lookMouseVerticalSlider.getValue());
}",0.5217391304347826
12105,"public ControllerProfile(){
  this.leftThumbStickXHandler=new VirtualKeyAnalogReplayHandler(KeyEvent.VK_D,KeyEvent.VK_A,1.6f);
  this.leftThumbStickYHandler=new VirtualKeyAnalogReplayHandler(KeyEvent.VK_S,KeyEvent.VK_W,1.6f);
  this.rightThumbStickHandler=new VirtualMouseMoveAnalogReplayHandler();
  this.leftTriggerHandler=new VirtualMouseAnalogReplayHandler(KeyEvent.BUTTON3_MASK,false);
  this.rightTriggerHandler=new VirtualMouseAnalogReplayHandler(KeyEvent.BUTTON1_MASK,false);
}","public ControllerProfile(){
  this.leftThumbStickXHandler=new VirtualKeyAnalogReplayHandler(DefaultLeftThumbStickXPositiveMask,DefaultLeftThumbStickXNegativeMask,VirtualKeyAnalogReplayHandler.DefaultTolerance);
  this.leftThumbStickYHandler=new VirtualKeyAnalogReplayHandler(DefaultLeftThumbStickYPositiveMask,DefaultLeftThumbStickYNegativeMask,VirtualKeyAnalogReplayHandler.DefaultTolerance);
  this.rightThumbStickHandler=new VirtualMouseMoveAnalogReplayHandler();
  this.leftTriggerHandler=new VirtualMouseAnalogReplayHandler(KeyEvent.BUTTON3_MASK,false);
  this.rightTriggerHandler=new VirtualMouseAnalogReplayHandler(KeyEvent.BUTTON1_MASK,false);
}",0.7521968365553603
12106,"private static VirtualKeyAnalogReplayHandler readKeyAnalogHandler(String section,String handlerIdentifier,IStorage propertiesStorage){
  return null;
}","private VirtualKeyAnalogReplayHandler readKeyAnalogHandler(String section,String handlerIdentifier,int defaultPositiveMask,int defaultNegativeMask){
  int positiveVirtualKeyMask=this.propertiesStorage.read(section,handlerIdentifier + ""String_Node_Str"",defaultPositiveMask);
  int negativeVirtualKeyMask=this.propertiesStorage.read(section,handlerIdentifier + ""String_Node_Str"",defaultNegativeMask);
  float tolerance=this.propertiesStorage.read(section,handlerIdentifier + ""String_Node_Str"",VirtualKeyAnalogReplayHandler.DefaultTolerance);
  return new VirtualKeyAnalogReplayHandler(positiveVirtualKeyMask,negativeVirtualKeyMask,tolerance);
}",0.1185372005044136
12107,"public ControllerProfile load(String identifier){
  this.propertiesStorage.load();
  ControllerProfile profile=new ControllerProfile();
  String section=getControllerProfileSectionName(identifier);
  readKeyAnalogHandler(section,""String_Node_Str"",this.propertiesStorage);
  readKeyAnalogHandler(section,""String_Node_Str"",this.propertiesStorage);
  readMouseMoveAnalogHandler(section,""String_Node_Str"",this.propertiesStorage);
  for (  Entry<Buttons,IButtonsReplayHandler> mapping : profile.getButtonMappingReplayHandlers().entrySet()) {
    IButtonsReplayHandler handler=readHandler(section,""String_Node_Str"" + mapping.getKey().name(),mapping.getKey(),mapping.getValue(),this.propertiesStorage);
    profile.getButtonMappingReplayHandlers().put(mapping.getKey(),handler);
  }
  return profile;
}","public ControllerProfile load(String identifier){
  this.propertiesStorage.load();
  ControllerProfile profile=new ControllerProfile();
  String section=getControllerProfileSectionName(identifier);
  profile.setLeftThumbStickXHandler(readKeyAnalogHandler(section,""String_Node_Str"",ControllerProfile.DefaultLeftThumbStickXPositiveMask,ControllerProfile.DefaultLeftThumbStickXNegativeMask));
  profile.setLeftThumbStickYHandler(readKeyAnalogHandler(section,""String_Node_Str"",ControllerProfile.DefaultLeftThumbStickYPositiveMask,ControllerProfile.DefaultLeftThumbStickYNegativeMask));
  profile.setRightThumbStickHandler(readMouseMoveAnalogHandler(section,""String_Node_Str""));
  for (  Entry<Buttons,IButtonsReplayHandler> mapping : profile.getButtonMappingReplayHandlers().entrySet()) {
    IButtonsReplayHandler handler=readHandler(section,""String_Node_Str"" + mapping.getKey().name(),mapping.getKey(),mapping.getValue(),this.propertiesStorage);
    profile.getButtonMappingReplayHandlers().put(mapping.getKey(),handler);
  }
  return profile;
}",0.7921653971708379
12108,"public void store(ControllerProfile profile){
  String identifier=profile.getIdentifier();
  String section=getControllerProfileSectionName(identifier);
  writeHandler(section,""String_Node_Str"",profile.getLeftThumbStickXHandler(),this.propertiesStorage);
  writeHandler(section,""String_Node_Str"",profile.getLeftThumbStickYHandler(),this.propertiesStorage);
  writeHandler(section,""String_Node_Str"",profile.getRightThumbStickHandler(),this.propertiesStorage);
  for (  Entry<Buttons,IButtonsReplayHandler> mapping : profile.getButtonMappingReplayHandlers().entrySet()) {
    writeHandler(section,""String_Node_Str"" + mapping.getKey().name(),mapping.getValue(),this.propertiesStorage);
  }
  this.propertiesStorage.commit();
}","public void store(ControllerProfile profile){
  String identifier=profile.getIdentifier();
  String section=getControllerProfileSectionName(identifier);
  writeHandler(section,""String_Node_Str"",profile.getLeftThumbStickXHandler());
  writeHandler(section,""String_Node_Str"",profile.getLeftThumbStickYHandler());
  writeHandler(section,""String_Node_Str"",profile.getRightThumbStickHandler());
  for (  Entry<Buttons,IButtonsReplayHandler> mapping : profile.getButtonMappingReplayHandlers().entrySet()) {
    writeHandler(section,""String_Node_Str"" + mapping.getKey().name(),mapping.getValue());
  }
  this.propertiesStorage.commit();
}",0.9069423929098966
12109,"private IButtonsReplayHandler readHandler(String section,String handlerIdentifier,Buttons activationButton,IButtonsReplayHandler fallbackValue,IStorage propertiesStorage){
  String mappingType=propertiesStorage.read(section,handlerIdentifier + ""String_Node_Str"");
  if (mappingType == null) {
    return fallbackValue;
  }
  ButtonMappingType buttonMappingType=ButtonMappingType.valueOf(mappingType);
  int eventCode=propertiesStorage.readInt(section,handlerIdentifier + ""String_Node_Str"",0);
  int variant=propertiesStorage.readInt(section,handlerIdentifier + ""String_Node_Str"",0);
  ButtonMapping buttonMapping=new ButtonMapping(buttonMappingType,eventCode,variant);
  return this.replayHandlerFactory.create(activationButton,buttonMapping,false);
}","private IButtonsReplayHandler readHandler(String section,String handlerIdentifier,Buttons activationButton,IButtonsReplayHandler fallbackValue,IStorage propertiesStorage){
  String mappingType=propertiesStorage.read(section,handlerIdentifier + ""String_Node_Str"");
  if (mappingType == null) {
    return fallbackValue;
  }
  ButtonMappingType buttonMappingType=ButtonMappingType.valueOf(mappingType);
  int eventCode=propertiesStorage.read(section,handlerIdentifier + ""String_Node_Str"",0);
  int variant=propertiesStorage.read(section,handlerIdentifier + ""String_Node_Str"",0);
  ButtonMapping buttonMapping=new ButtonMapping(buttonMappingType,eventCode,variant);
  return this.replayHandlerFactory.create(activationButton,buttonMapping,false);
}",0.9959893048128342
12110,"private static void writeHandler(String section,String handlerIdentifier,VirtualMouseMoveAnalogReplayHandler handler,IStorage propertiesStorage){
  propertiesStorage.writeInt(section,handlerIdentifier,handler.hashCode());
  propertiesStorage.writeBoolean(section,handlerIdentifier + ""String_Node_Str"",handler.isInvertY());
}","private void writeHandler(String section,String handlerIdentifier,VirtualMouseMoveAnalogReplayHandler handler){
  this.propertiesStorage.write(section,handlerIdentifier + ""String_Node_Str"",handler.getSensitivityX());
  this.propertiesStorage.write(section,handlerIdentifier + ""String_Node_Str"",handler.getSensitivityY());
  this.propertiesStorage.write(section,handlerIdentifier + ""String_Node_Str"",handler.isInvertY());
}",0.6621983914209115
12111,"private static VirtualMouseMoveAnalogReplayHandler readMouseMoveAnalogHandler(String section,String handlerIdentifier,IStorage propertiesStorage){
  return null;
}","private VirtualMouseMoveAnalogReplayHandler readMouseMoveAnalogHandler(String section,String handlerIdentifier){
  int sensitivityX=this.propertiesStorage.read(section,handlerIdentifier + ""String_Node_Str"",VirtualMouseMoveAnalogReplayHandler.DefaultSensitivity);
  int sensitivityY=this.propertiesStorage.read(section,handlerIdentifier + ""String_Node_Str"",VirtualMouseMoveAnalogReplayHandler.DefaultSensitivity);
  boolean invertY=this.propertiesStorage.readBoolean(section,handlerIdentifier + ""String_Node_Str"");
  return new VirtualMouseMoveAnalogReplayHandler(sensitivityX,sensitivityY,invertY);
}",0.1205766710353866
12112,"public abstract String read(String section,String name);","public abstract int read(String section,String name,int defaultValue);",0.8253968253968254
12113,"public abstract void write(String section,String name,String value);","public abstract void write(String section,String name,int value);",0.962406015037594
12114,"public String read(String section,String name){
  return this.cache.fetch(section,name);
}","public int read(String section,String name,int defaultValue){
  try {
    return this.cache.fetch(section,name,Integer.class);
  }
 catch (  Exception e) {
    return defaultValue;
  }
}",0.6231884057971014
12115,"public boolean readBoolean(String section,String name){
  return this.cache.fetch(section,name,Boolean.class);
}","public boolean readBoolean(String section,String name){
  try {
    return this.cache.fetch(section,name,Boolean.class);
  }
 catch (  Exception e) {
    return false;
  }
}",0.7859649122807018
12116,"public void write(String section,String name,String value){
  this.cache.put(section,name,value);
}","public void write(String section,String name,int value){
  this.cache.put(section,name,value);
}",0.9743589743589745
12117,"public String read(String section,String name){
  return this.cache.getProperty(section + ""String_Node_Str"" + name);
}","public int read(String section,String name,int defaultValue){
  String stringValue=this.read(section,name);
  try {
    return Integer.parseInt(stringValue);
  }
 catch (  NumberFormatException ex) {
    return defaultValue;
  }
}",0.3160919540229885
12118,"public void write(String section,String name,String value){
  this.cache.put(section + ""String_Node_Str"" + name,value);
}","public void write(String section,String name,int value){
  this.write(section,name,String.valueOf(value));
}",0.7685589519650655
12119,"/** 
 * Our socket thread got disconnect and is exiting.
 */
void handleDisconnected() throws IOException {
synchronized (this.asyncMutex) {
    socket.close();
    this.socket=new Socket(server,port);
    this.in=new BufferedReader(new InputStreamReader(this.socket.getInputStream()));
    this.out=new BufferedWriter(new OutputStreamWriter(this.socket.getOutputStream()));
    this.listenThread=new SocketThread(this.in,this,this.resultParser);
    this.listenThread.start();
    if (lastWatch != null) {
      this.syncCommand(""String_Node_Str"" + lastWatch,WatchObject.class);
    }
  }
}","/** 
 * Our socket thread got disconnect and is exiting.
 */
void handleDisconnected() throws IOException {
synchronized (this.asyncMutex) {
    socket.close();
    this.socket=new Socket(server,port);
    this.in=new BufferedReader(new InputStreamReader(this.socket.getInputStream()));
    this.out=new BufferedWriter(new OutputStreamWriter(this.socket.getOutputStream()));
    this.listenThread=new SocketThread(this.in,this,this.resultParser);
    this.listenThread.start();
    if (lastWatch != null) {
      this.syncCommand(lastWatch,WatchObject.class);
    }
  }
}",0.982788296041308
12120,"/** 
 * Stops the endpoint.
 */
public void stop(){
  try {
    socket.close();
  }
 catch (  final IOException e1) {
    GPSdEndpoint.LOG.debug(""String_Node_Str"" + e1.getMessage());
  }
  try {
    this.listeners.clear();
    if (listenThread != null) {
      this.listenThread.halt();
    }
  }
 catch (  final Exception e) {
    GPSdEndpoint.LOG.debug(""String_Node_Str"",e);
  }
  this.listenThread=null;
}","/** 
 * Stops the endpoint.
 */
public void stop(){
  try {
    this.socket.close();
  }
 catch (  final IOException e1) {
    GPSdEndpoint.LOG.debug(""String_Node_Str"" + e1.getMessage());
  }
  try {
    this.listeners.clear();
    if (this.listenThread != null) {
      this.listenThread.halt();
    }
  }
 catch (  final Exception e) {
    GPSdEndpoint.LOG.debug(""String_Node_Str"",e);
  }
  this.listenThread=null;
}",0.9878934624697336
12121,"/** 
 * Attempt to kick a failed device back into life on gpsd server.
 * @see https://lists.gnu.org/archive/html/gpsd-dev/2015-06/msg00001.html
 * @param path Path of device known to gpsd
 * @throws IOException
 * @throws JSONException
 */
public void kickDevice(String path) throws IOException, JSONException {
  final JSONObject d=new JSONObject();
  d.put(""String_Node_Str"",""String_Node_Str"");
  d.put(""String_Node_Str"",path);
  voidCommand(""String_Node_Str"" + d);
}","/** 
 * Attempt to kick a failed device back into life on gpsd server. see: https://lists.gnu.org/archive/html/gpsd-dev/2015-06/msg00001.html
 * @param path Path of device known to gpsd
 * @throws IOException
 * @throws JSONException
 */
public void kickDevice(String path) throws IOException, JSONException {
  final JSONObject d=new JSONObject();
  d.put(""String_Node_Str"",""String_Node_Str"");
  d.put(""String_Node_Str"",path);
  this.voidCommand(""String_Node_Str"" + d);
}",0.9808917197452228
12122,"/** 
 * Private method for epmem_init_db that throws SQLException, IOException so it can wrap in SoarException and throw. <p> episodic_memory.cpp:1458:epmem_init_db
 * @param readonly
 * @throws SoarException
 */
private void epmem_init_db_ex(boolean readonly) throws SQLException, IOException, SoarException {
  if (db != null) {
    return;
  }
  final String jdbcUrl=params.protocol.get() + ""String_Node_Str"" + params.path.get();
  final Connection connection=JdbcTools.connect(params.driver.get(),jdbcUrl);
  final DatabaseMetaData meta=connection.getMetaData();
  logger.info(""String_Node_Str"" + jdbcUrl + ""String_Node_Str""+ meta.getDriverName()+ ""String_Node_Str""+ meta.getDriverVersion());
  db=new EpisodicMemoryDatabase(params.driver.get(),connection);
  applyDatabasePerformanceOptions();
  epmem_validation++;
  db.structure();
  db.prepare();
  if (!EpisodicMemoryDatabase.IN_MEMORY_PATH.equals(params.path.get())) {
    final ResultSet result=db.get_schema_version.executeQuery();
    try {
      if (result.next()) {
        String schemaVersion=result.getString(1);
        if (!EpisodicMemoryDatabase.EPMEM_SCHEMA_VERSION.equals(schemaVersion)) {
          logger.error(""String_Node_Str"" + schemaVersion);
          params.path.set(EpisodicMemoryDatabase.IN_MEMORY_PATH);
          connection.close();
          db=null;
          epmem_init_db_ex(readonly);
        }
      }
 else {
        if (params.append_database.get() == AppendDatabaseChoices.on) {
          logger.info(""String_Node_Str"");
        }
      }
    }
  finally {
      result.close();
    }
  }
  db.set_schema_version.setString(1,EpisodicMemoryDatabase.EPMEM_SCHEMA_VERSION);
  db.set_schema_version.execute();
  if (params.append_database.get() == AppendDatabaseChoices.off) {
    db.dropEpmemTables();
    db.structure();
    db.prepare();
  }
  epmem_node_mins.clear();
  epmem_node_maxes.clear();
  epmem_node_removals.clear();
  epmem_edge_mins.clear();
  epmem_edge_maxes.clear();
  epmem_edge_removals.clear();
  epmem_id_repository.put(EPMEM_NODEID_ROOT,new LinkedHashMap<Long,LinkedList<EpisodicMemoryIdPair>>());
{
    Set<WmeImpl> wms_temp=Sets.newLinkedHashSet();
    wms_temp.add(null);
    epmem_id_ref_counts.put(EPMEM_NODEID_ROOT,wms_temp);
  }
  stats.time.set(1L);
  stats.next_id.set(1L);
{
    final ByRef<Long> stored_id=ByRef.create(0L);
    if (epmem_get_variable(epmem_variable_key.var_next_id,stored_id)) {
      stats.next_id.set(stored_id.value);
    }
 else {
      epmem_set_variable(epmem_variable_key.var_next_id,stats.next_id.get());
    }
  }
  for (int i=EPMEM_RIT_STATE_NODE; i <= EPMEM_RIT_STATE_EDGE; i++) {
    epmem_rit_state_graph[i].offset.stat=EPMEM_RIT_OFFSET_INIT;
    epmem_rit_state_graph[i].leftroot.stat=0;
    epmem_rit_state_graph[i].rightroot.stat=1;
    epmem_rit_state_graph[i].minstep.stat=Long.MAX_VALUE;
  }
  epmem_rit_state_graph[EPMEM_RIT_STATE_NODE].add_query=db.add_epmem_wmes_constant_range;
  epmem_rit_state_graph[EPMEM_RIT_STATE_EDGE].add_query=db.add_epmem_wmes_identifier_range;
{
    final ByRef<Long> var_val=ByRef.create(0L);
    for (int i=EPMEM_RIT_STATE_NODE; i <= EPMEM_RIT_STATE_EDGE; i++) {
      if (epmem_get_variable(epmem_rit_state_graph[i].offset.var_key,var_val)) {
        epmem_rit_state_graph[i].offset.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].offset.var_key,epmem_rit_state_graph[i].offset.stat);
      }
      if (epmem_get_variable(epmem_rit_state_graph[i].leftroot.var_key,var_val)) {
        epmem_rit_state_graph[i].leftroot.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].leftroot.var_key,epmem_rit_state_graph[i].leftroot.stat);
      }
      if (epmem_get_variable(epmem_rit_state_graph[i].rightroot.var_key,var_val)) {
        epmem_rit_state_graph[i].rightroot.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].rightroot.var_key,epmem_rit_state_graph[i].rightroot.stat);
      }
      if (epmem_get_variable(epmem_rit_state_graph[i].minstep.var_key,var_val)) {
        epmem_rit_state_graph[i].minstep.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].minstep.var_key,epmem_rit_state_graph[i].minstep.stat);
      }
    }
  }
{
    final PreparedStatement temp_q=db.get_max_time;
    final ResultSet rs=temp_q.executeQuery();
    try {
      if (rs.next()) {
        stats.time.set(rs.getLong(0 + 1) + 1);
      }
    }
  finally {
      rs.close();
    }
  }
  long time_max=stats.time.get();
  if (!readonly) {
    long time_last=(time_max - 1);
    final PreparedStatement[] now_select=new PreparedStatement[]{db.now_select_node,db.now_select_edge};
    final PreparedStatement[] now_add=new PreparedStatement[]{db.add_epmem_wmes_constant_point,db.add_epmem_wmes_identifier_point};
    final PreparedStatement[] now_delete=new PreparedStatement[]{db.now_delete_node,db.now_delete_edge};
    for (int i=EPMEM_RIT_STATE_NODE; i <= EPMEM_RIT_STATE_EDGE; i++) {
      final PreparedStatement temp_q=now_add[i];
      temp_q.setLong(2,time_last);
      final PreparedStatement temp_q2=now_select[i];
      final ResultSet rs=temp_q2.executeQuery();
      try {
        while (rs.next()) {
          long range_start=rs.getLong(1 + 1);
          if (range_start == time_last) {
            temp_q.setLong(1,rs.getLong(0 + 1));
            temp_q.executeUpdate();
          }
 else {
            epmem_rit_insert_interval(range_start,time_last,rs.getLong(0 + 1),epmem_rit_state_graph[i]);
          }
        }
      }
  finally {
        rs.close();
      }
      now_delete[i].execute();
    }
  }
{
    initMinMax(time_max,db.minmax_select_node,epmem_node_maxes,epmem_node_mins);
    initMinMax(time_max,db.minmax_select_edge,epmem_edge_maxes,epmem_edge_mins);
  }
{
    long parent_n_id;
    long attributes_s_id;
    long child_n_id;
    long wi_id;
    Map<Long,LinkedList<EpisodicMemoryIdPair>> hp;
    LinkedList<EpisodicMemoryIdPair> ip;
    PreparedStatement temp_q=db.edge_unique_select;
    final ResultSet rs=temp_q.executeQuery();
    try {
      while (rs.next()) {
        parent_n_id=rs.getLong(0 + 1);
        attributes_s_id=rs.getLong(1 + 1);
        child_n_id=rs.getLong(2 + 1);
        wi_id=rs.getLong(3 + 1);
        hp=epmem_id_repository.get(parent_n_id);
        if (hp == null) {
          hp=Maps.newLinkedHashMap();
          epmem_id_repository.put(parent_n_id,hp);
        }
        ip=hp.get(attributes_s_id);
        if (ip == null) {
          ip=Lists.newLinkedList();
          hp.put(attributes_s_id,ip);
        }
        ip.addFirst(new EpisodicMemoryIdPair(child_n_id,wi_id));
        hp=epmem_id_repository.get(child_n_id);
        if (hp == null) {
          hp=Maps.newLinkedHashMap();
          epmem_id_repository.put(child_n_id,hp);
        }
      }
    }
  finally {
      rs.close();
    }
  }
{
    epmem_wme_adds.add(decider.top_state);
  }
  decider.top_goal.epmem_id=EPMEM_NODEID_ROOT;
  decider.top_goal.epmem_valid=epmem_validation;
  ResultSet r=db.database_version.executeQuery();
  r.next();
  try {
    stats.db_version.set(r.getString(1));
  }
  finally {
    r.close();
  }
  if (params.lazy_commit.get() == LazyCommitChoices.on) {
    db.begin.executeUpdate();
  }
}","/** 
 * Private method for epmem_init_db that throws SQLException, IOException so it can wrap in SoarException and throw. <p> episodic_memory.cpp:1458:epmem_init_db
 * @param readonly
 * @throws SoarException
 * @throws URISyntaxException 
 */
private void epmem_init_db_ex(boolean readonly) throws SQLException, IOException, SoarException {
  if (db != null) {
    return;
  }
  final String jdbcUrl=URLDecoder.decode(params.protocol.get() + ""String_Node_Str"" + params.path.get(),""String_Node_Str"");
  final Connection connection=JdbcTools.connect(params.driver.get(),jdbcUrl);
  final DatabaseMetaData meta=connection.getMetaData();
  logger.info(""String_Node_Str"" + jdbcUrl + ""String_Node_Str""+ meta.getDriverName()+ ""String_Node_Str""+ meta.getDriverVersion());
  db=new EpisodicMemoryDatabase(params.driver.get(),connection);
  applyDatabasePerformanceOptions();
  epmem_validation++;
  db.structure();
  db.prepare();
  if (!EpisodicMemoryDatabase.IN_MEMORY_PATH.equals(params.path.get())) {
    final ResultSet result=db.get_schema_version.executeQuery();
    try {
      if (result.next()) {
        String schemaVersion=result.getString(1);
        if (!EpisodicMemoryDatabase.EPMEM_SCHEMA_VERSION.equals(schemaVersion)) {
          logger.error(""String_Node_Str"" + schemaVersion);
          params.path.set(EpisodicMemoryDatabase.IN_MEMORY_PATH);
          connection.close();
          db=null;
          epmem_init_db_ex(readonly);
        }
      }
 else {
        if (params.append_database.get() == AppendDatabaseChoices.on) {
          logger.info(""String_Node_Str"");
        }
      }
    }
  finally {
      result.close();
    }
  }
  db.set_schema_version.setString(1,EpisodicMemoryDatabase.EPMEM_SCHEMA_VERSION);
  db.set_schema_version.execute();
  if (params.append_database.get() == AppendDatabaseChoices.off) {
    db.dropEpmemTables();
    db.structure();
    db.prepare();
  }
  epmem_node_mins.clear();
  epmem_node_maxes.clear();
  epmem_node_removals.clear();
  epmem_edge_mins.clear();
  epmem_edge_maxes.clear();
  epmem_edge_removals.clear();
  epmem_id_repository.put(EPMEM_NODEID_ROOT,new LinkedHashMap<Long,LinkedList<EpisodicMemoryIdPair>>());
{
    Set<WmeImpl> wms_temp=Sets.newLinkedHashSet();
    wms_temp.add(null);
    epmem_id_ref_counts.put(EPMEM_NODEID_ROOT,wms_temp);
  }
  stats.time.set(1L);
  stats.next_id.set(1L);
{
    final ByRef<Long> stored_id=ByRef.create(0L);
    if (epmem_get_variable(epmem_variable_key.var_next_id,stored_id)) {
      stats.next_id.set(stored_id.value);
    }
 else {
      epmem_set_variable(epmem_variable_key.var_next_id,stats.next_id.get());
    }
  }
  for (int i=EPMEM_RIT_STATE_NODE; i <= EPMEM_RIT_STATE_EDGE; i++) {
    epmem_rit_state_graph[i].offset.stat=EPMEM_RIT_OFFSET_INIT;
    epmem_rit_state_graph[i].leftroot.stat=0;
    epmem_rit_state_graph[i].rightroot.stat=1;
    epmem_rit_state_graph[i].minstep.stat=Long.MAX_VALUE;
  }
  epmem_rit_state_graph[EPMEM_RIT_STATE_NODE].add_query=db.add_epmem_wmes_constant_range;
  epmem_rit_state_graph[EPMEM_RIT_STATE_EDGE].add_query=db.add_epmem_wmes_identifier_range;
{
    final ByRef<Long> var_val=ByRef.create(0L);
    for (int i=EPMEM_RIT_STATE_NODE; i <= EPMEM_RIT_STATE_EDGE; i++) {
      if (epmem_get_variable(epmem_rit_state_graph[i].offset.var_key,var_val)) {
        epmem_rit_state_graph[i].offset.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].offset.var_key,epmem_rit_state_graph[i].offset.stat);
      }
      if (epmem_get_variable(epmem_rit_state_graph[i].leftroot.var_key,var_val)) {
        epmem_rit_state_graph[i].leftroot.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].leftroot.var_key,epmem_rit_state_graph[i].leftroot.stat);
      }
      if (epmem_get_variable(epmem_rit_state_graph[i].rightroot.var_key,var_val)) {
        epmem_rit_state_graph[i].rightroot.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].rightroot.var_key,epmem_rit_state_graph[i].rightroot.stat);
      }
      if (epmem_get_variable(epmem_rit_state_graph[i].minstep.var_key,var_val)) {
        epmem_rit_state_graph[i].minstep.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].minstep.var_key,epmem_rit_state_graph[i].minstep.stat);
      }
    }
  }
{
    final PreparedStatement temp_q=db.get_max_time;
    final ResultSet rs=temp_q.executeQuery();
    try {
      if (rs.next()) {
        stats.time.set(rs.getLong(0 + 1) + 1);
      }
    }
  finally {
      rs.close();
    }
  }
  long time_max=stats.time.get();
  if (!readonly) {
    long time_last=(time_max - 1);
    final PreparedStatement[] now_select=new PreparedStatement[]{db.now_select_node,db.now_select_edge};
    final PreparedStatement[] now_add=new PreparedStatement[]{db.add_epmem_wmes_constant_point,db.add_epmem_wmes_identifier_point};
    final PreparedStatement[] now_delete=new PreparedStatement[]{db.now_delete_node,db.now_delete_edge};
    for (int i=EPMEM_RIT_STATE_NODE; i <= EPMEM_RIT_STATE_EDGE; i++) {
      final PreparedStatement temp_q=now_add[i];
      temp_q.setLong(2,time_last);
      final PreparedStatement temp_q2=now_select[i];
      final ResultSet rs=temp_q2.executeQuery();
      try {
        while (rs.next()) {
          long range_start=rs.getLong(1 + 1);
          if (range_start == time_last) {
            temp_q.setLong(1,rs.getLong(0 + 1));
            temp_q.executeUpdate();
          }
 else {
            epmem_rit_insert_interval(range_start,time_last,rs.getLong(0 + 1),epmem_rit_state_graph[i]);
          }
        }
      }
  finally {
        rs.close();
      }
      now_delete[i].execute();
    }
  }
{
    initMinMax(time_max,db.minmax_select_node,epmem_node_maxes,epmem_node_mins);
    initMinMax(time_max,db.minmax_select_edge,epmem_edge_maxes,epmem_edge_mins);
  }
{
    long parent_n_id;
    long attributes_s_id;
    long child_n_id;
    long wi_id;
    Map<Long,LinkedList<EpisodicMemoryIdPair>> hp;
    LinkedList<EpisodicMemoryIdPair> ip;
    PreparedStatement temp_q=db.edge_unique_select;
    final ResultSet rs=temp_q.executeQuery();
    try {
      while (rs.next()) {
        parent_n_id=rs.getLong(0 + 1);
        attributes_s_id=rs.getLong(1 + 1);
        child_n_id=rs.getLong(2 + 1);
        wi_id=rs.getLong(3 + 1);
        hp=epmem_id_repository.get(parent_n_id);
        if (hp == null) {
          hp=Maps.newLinkedHashMap();
          epmem_id_repository.put(parent_n_id,hp);
        }
        ip=hp.get(attributes_s_id);
        if (ip == null) {
          ip=Lists.newLinkedList();
          hp.put(attributes_s_id,ip);
        }
        ip.addFirst(new EpisodicMemoryIdPair(child_n_id,wi_id));
        hp=epmem_id_repository.get(child_n_id);
        if (hp == null) {
          hp=Maps.newLinkedHashMap();
          epmem_id_repository.put(child_n_id,hp);
        }
      }
    }
  finally {
      rs.close();
    }
  }
{
    epmem_wme_adds.add(decider.top_state);
  }
  decider.top_goal.epmem_id=EPMEM_NODEID_ROOT;
  decider.top_goal.epmem_valid=epmem_validation;
  ResultSet r=db.database_version.executeQuery();
  r.next();
  try {
    stats.db_version.set(r.getString(1));
  }
  finally {
    r.close();
  }
  if (params.lazy_commit.get() == LazyCommitChoices.on) {
    db.begin.executeUpdate();
  }
}",0.9953475643130816
12123,"/** 
 * Opens the SQLite database and performs all initialization required for the current mode The readonly param should only be used in experimentation where you don't want to alter previous database state. <p> semantic_memory.cpp:1952:smem_init_db
 * @param readonly
 * @throws SoarException
 * @throws SQLException
 * @throws IOException
 */
void smem_init_db(boolean readonly) throws SoarException, SQLException, IOException {
  if (db != null) {
    return;
  }
  final String jdbcUrl=params.protocol.get() + ""String_Node_Str"" + params.path.get();
  final Connection connection=JdbcTools.connect(params.driver.get(),jdbcUrl);
  final DatabaseMetaData meta=connection.getMetaData();
  logger.info(""String_Node_Str"" + jdbcUrl + ""String_Node_Str""+ meta.getDriverName()+ ""String_Node_Str""+ meta.getDriverVersion());
  if (params.path.get().equals(SemanticMemoryDatabase.IN_MEMORY_PATH)) {
    trace.print(Category.SMEM,""String_Node_Str"");
  }
 else {
    trace.print(Category.SMEM,""String_Node_Str"",params.path.get());
  }
  db=new SemanticMemoryDatabase(params.driver.get(),connection);
  applyDatabasePerformanceOptions();
  smem_validation++;
  final boolean tabula_rasa=db.structure();
  db.prepare();
  if (!SemanticMemoryDatabase.IN_MEMORY_PATH.equals(params.path.get())) {
    final ResultSet result=db.get_schema_version.executeQuery();
    try {
      if (result.next()) {
        String schemaVersion=result.getString(1);
        if (!SemanticMemoryDatabase.SMEM_SCHEMA_VERSION.equals(schemaVersion)) {
          logger.error(""String_Node_Str"" + schemaVersion);
          params.path.set(SemanticMemoryDatabase.IN_MEMORY_PATH);
          connection.close();
          db=null;
          smem_init_db(readonly);
        }
      }
 else {
        if (params.append_db.get() == AppendDatabaseChoices.on) {
          logger.info(""String_Node_Str"");
        }
      }
    }
  finally {
      result.close();
    }
  }
  db.set_schema_version.setString(1,SemanticMemoryDatabase.SMEM_SCHEMA_VERSION);
  db.set_schema_version.execute();
  if (params.append_db.get() == AppendDatabaseChoices.off) {
    db.dropSmemTables();
    db.structure();
    db.prepare();
  }
  if (tabula_rasa) {
    db.begin.executeUpdate();
{
      smem_max_cycle=1;
      smem_variable_create(smem_variable_key.var_max_cycle,smem_max_cycle);
      stats.nodes.set(0L);
      smem_variable_create(smem_variable_key.var_num_nodes,stats.nodes.get());
      stats.edges.set(0L);
      smem_variable_create(smem_variable_key.var_num_edges,stats.edges.get());
      smem_variable_create(smem_variable_key.var_act_thresh,params.thresh.get());
      smem_variable_create(smem_variable_key.var_act_mode,params.activation_mode.get().ordinal());
    }
    db.commit.executeUpdate();
  }
 else {
    final ByRef<Long> tempMaxCycle=ByRef.create(smem_max_cycle);
    smem_variable_get(smem_variable_key.var_max_cycle,tempMaxCycle);
    smem_max_cycle=tempMaxCycle.value;
    final ByRef<Long> temp=ByRef.create(0L);
    smem_variable_get(smem_variable_key.var_act_thresh,temp);
    params.thresh.set(temp.value);
    smem_variable_get(smem_variable_key.var_num_nodes,temp);
    stats.nodes.set(temp.value);
    smem_variable_get(smem_variable_key.var_num_edges,temp);
    stats.edges.set(temp.value);
    smem_variable_get(smem_variable_key.var_act_mode,temp);
    params.activation_mode.set(ActivationChoices.values()[Integer.parseInt(temp.value.toString())]);
  }
  smem_reset_id_counters();
  if (params.lazy_commit.get() == LazyCommitChoices.on) {
    db.begin.executeUpdate();
  }
}","/** 
 * Opens the SQLite database and performs all initialization required for the current mode The readonly param should only be used in experimentation where you don't want to alter previous database state. <p> semantic_memory.cpp:1952:smem_init_db
 * @param readonly
 * @throws SoarException
 * @throws SQLException
 * @throws IOException
 */
void smem_init_db(boolean readonly) throws SoarException, SQLException, IOException {
  if (db != null) {
    return;
  }
  final String jdbcUrl=URLDecoder.decode(params.protocol.get() + ""String_Node_Str"" + params.path.get(),""String_Node_Str"");
  final Connection connection=JdbcTools.connect(params.driver.get(),jdbcUrl);
  final DatabaseMetaData meta=connection.getMetaData();
  logger.info(""String_Node_Str"" + jdbcUrl + ""String_Node_Str""+ meta.getDriverName()+ ""String_Node_Str""+ meta.getDriverVersion());
  if (params.path.get().equals(SemanticMemoryDatabase.IN_MEMORY_PATH)) {
    trace.print(Category.SMEM,""String_Node_Str"");
  }
 else {
    trace.print(Category.SMEM,""String_Node_Str"",params.path.get());
  }
  db=new SemanticMemoryDatabase(params.driver.get(),connection);
  applyDatabasePerformanceOptions();
  smem_validation++;
  final boolean tabula_rasa=db.structure();
  db.prepare();
  if (!SemanticMemoryDatabase.IN_MEMORY_PATH.equals(params.path.get())) {
    final ResultSet result=db.get_schema_version.executeQuery();
    try {
      if (result.next()) {
        String schemaVersion=result.getString(1);
        if (!SemanticMemoryDatabase.SMEM_SCHEMA_VERSION.equals(schemaVersion)) {
          logger.error(""String_Node_Str"" + schemaVersion);
          params.path.set(SemanticMemoryDatabase.IN_MEMORY_PATH);
          connection.close();
          db=null;
          smem_init_db(readonly);
        }
      }
 else {
        if (params.append_db.get() == AppendDatabaseChoices.on) {
          logger.info(""String_Node_Str"");
        }
      }
    }
  finally {
      result.close();
    }
  }
  db.set_schema_version.setString(1,SemanticMemoryDatabase.SMEM_SCHEMA_VERSION);
  db.set_schema_version.execute();
  if (params.append_db.get() == AppendDatabaseChoices.off) {
    db.dropSmemTables();
    db.structure();
    db.prepare();
  }
  if (tabula_rasa) {
    db.begin.executeUpdate();
{
      smem_max_cycle=1;
      smem_variable_create(smem_variable_key.var_max_cycle,smem_max_cycle);
      stats.nodes.set(0L);
      smem_variable_create(smem_variable_key.var_num_nodes,stats.nodes.get());
      stats.edges.set(0L);
      smem_variable_create(smem_variable_key.var_num_edges,stats.edges.get());
      smem_variable_create(smem_variable_key.var_act_thresh,params.thresh.get());
      smem_variable_create(smem_variable_key.var_act_mode,params.activation_mode.get().ordinal());
    }
    db.commit.executeUpdate();
  }
 else {
    final ByRef<Long> tempMaxCycle=ByRef.create(smem_max_cycle);
    smem_variable_get(smem_variable_key.var_max_cycle,tempMaxCycle);
    smem_max_cycle=tempMaxCycle.value;
    final ByRef<Long> temp=ByRef.create(0L);
    smem_variable_get(smem_variable_key.var_act_thresh,temp);
    params.thresh.set(temp.value);
    smem_variable_get(smem_variable_key.var_num_nodes,temp);
    stats.nodes.set(temp.value);
    smem_variable_get(smem_variable_key.var_num_edges,temp);
    stats.edges.set(temp.value);
    smem_variable_get(smem_variable_key.var_act_mode,temp);
    params.activation_mode.set(ActivationChoices.values()[Integer.parseInt(temp.value.toString())]);
  }
  smem_reset_id_counters();
  if (params.lazy_commit.get() == LazyCommitChoices.on) {
    db.begin.executeUpdate();
  }
}",0.994820103597928
12124,"/** 
 * This normalizes URLs by converting them to URIs and using the URI normalization method Unlike the standard URI normalization method, it also handles paths inside jars properly TODO: Should catch and rethrow different exceptions, like   {@link XmlTools}?
 * @param url
 * @return
 * @throws URISyntaxException
 * @throws MalformedURLException
 */
public static URL normalize(URL url) throws URISyntaxException, MalformedURLException {
  URI uri=url.toURI();
  if (uri.getScheme().equals(""String_Node_Str"")) {
    logger.debug(""String_Node_Str"" + uri);
    URI ssp1=new URI(uri.getSchemeSpecificPart());
    logger.debug(""String_Node_Str"" + ssp1);
    URI ssp2=new URI(ssp1.getSchemeSpecificPart());
    logger.debug(""String_Node_Str"" + ssp2);
    String sspScheme=ssp1.getScheme();
    logger.debug(""String_Node_Str"" + sspScheme);
    URI normalizedSsp2=new URI(ssp2.getSchemeSpecificPart()).normalize();
    logger.debug(""String_Node_Str"" + normalizedSsp2);
    URI normalized=new URI(""String_Node_Str"" + sspScheme + ""String_Node_Str""+ normalizedSsp2);
    logger.debug(""String_Node_Str"" + normalized);
    url=normalized.toURL();
  }
 else {
    url=uri.normalize().toURL();
  }
  return url;
}","/** 
 * This normalizes URLs by converting them to URIs and using the URI normalization method Unlike the standard URI normalization method, it also handles paths inside jars properly TODO: Should catch and rethrow different exceptions, like   {@link XmlTools}?
 * @param url
 * @return
 * @throws URISyntaxException
 * @throws MalformedURLException
 */
public static URL normalize(URL url) throws URISyntaxException, MalformedURLException {
  URI uri=url.toURI();
  if (uri.getScheme().equals(""String_Node_Str"")) {
    logger.debug(""String_Node_Str"" + uri);
    URI ssp1=new URI(uri.getRawSchemeSpecificPart());
    logger.debug(""String_Node_Str"" + ssp1);
    URI ssp2=new URI(ssp1.getRawSchemeSpecificPart());
    logger.debug(""String_Node_Str"" + ssp2);
    String sspScheme=ssp1.getScheme();
    logger.debug(""String_Node_Str"" + sspScheme);
    URI normalizedSsp2=new URI(ssp2.getRawSchemeSpecificPart()).normalize();
    logger.debug(""String_Node_Str"" + normalizedSsp2);
    URI normalized=new URI(""String_Node_Str"" + sspScheme + ""String_Node_Str""+ normalizedSsp2);
    logger.debug(""String_Node_Str"" + normalized);
    url=normalized.toURL();
  }
 else {
    url=uri.normalize().toURL();
  }
  return url;
}",0.996273291925466
12125,"@Test public void readCSoarDB() throws Exception {
  agent.initialize();
  URL db=getClass().getResource(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",db);
  agent.getInterpreter().eval(""String_Node_Str"" + db.getPath());
  agent.getInterpreter().eval(""String_Node_Str"");
  agent.getInterpreter().eval(""String_Node_Str"");
  String actualResult=agent.getInterpreter().eval(""String_Node_Str"");
  String expectedResult=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  assertTrue(""String_Node_Str"",actualResult.equals(expectedResult));
}","@Test public void readCSoarDB() throws Exception {
  agent.initialize();
  URL db=getClass().getResource(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",db);
  agent.getInterpreter().eval(""String_Node_Str"" + db.getPath());
  agent.getInterpreter().eval(""String_Node_Str"");
  agent.getInterpreter().eval(""String_Node_Str"");
  String actualResult=agent.getInterpreter().eval(""String_Node_Str"");
  String expectedResult=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  logger.info(""String_Node_Str"" + actualResult);
  assertTrue(""String_Node_Str"",actualResult.equals(expectedResult));
}",0.9575021682567216
12126,"/** 
 * Private method for epmem_init_db that throws SQLException, IOException so it can wrap in SoarException and throw. <p> episodic_memory.cpp:1458:epmem_init_db
 * @param readonly
 * @throws SoarException
 */
private void epmem_init_db_ex(boolean readonly) throws SQLException, IOException, SoarException {
  if (db != null) {
    return;
  }
  final String jdbcUrl=params.protocol.get() + ""String_Node_Str"" + params.path.get();
  final Connection connection=JdbcTools.connect(params.driver.get(),jdbcUrl);
  final DatabaseMetaData meta=connection.getMetaData();
  logger.info(""String_Node_Str"" + jdbcUrl + ""String_Node_Str""+ meta.getDriverName()+ ""String_Node_Str""+ meta.getDriverVersion());
  db=new EpisodicMemoryDatabase(params.driver.get(),connection);
  applyDatabasePerformanceOptions();
  epmem_validation++;
  db.structure();
  db.prepare();
  if (!EpisodicMemoryDatabase.IN_MEMORY_PATH.equals(params.path.get())) {
    final ResultSet result=db.get_schema_version.executeQuery();
    try {
      if (result.next()) {
        String schemaVersion=result.getString(1);
        if (!EpisodicMemoryDatabase.EPMEM_SCHEMA_VERSION.equals(schemaVersion)) {
          logger.error(""String_Node_Str"" + schemaVersion);
          params.path.set(EpisodicMemoryDatabase.IN_MEMORY_PATH);
          connection.close();
          db=null;
          epmem_init_db_ex(readonly);
        }
      }
 else {
        if (params.append_database.get() == AppendDatabaseChoices.on) {
          logger.info(""String_Node_Str"");
        }
      }
    }
  finally {
      result.close();
    }
  }
  db.set_schema_version.setString(1,EpisodicMemoryDatabase.EPMEM_SCHEMA_VERSION);
  db.set_schema_version.execute();
  if (params.append_database.get() == AppendDatabaseChoices.off) {
    db.dropEpmemTables();
    db.structure();
    db.prepare();
  }
  epmem_node_mins.clear();
  epmem_node_maxes.clear();
  epmem_node_removals.clear();
  epmem_edge_mins.clear();
  epmem_edge_maxes.clear();
  epmem_edge_removals.clear();
  epmem_id_repository.put(EPMEM_NODEID_ROOT,new LinkedHashMap<Long,LinkedList<EpisodicMemoryIdPair>>());
{
    Set<WmeImpl> wms_temp=Sets.newLinkedHashSet();
    wms_temp.add(null);
    epmem_id_ref_counts.put(EPMEM_NODEID_ROOT,wms_temp);
  }
  stats.time.set(1L);
  stats.next_id.set(1L);
{
    final ByRef<Long> stored_id=ByRef.create(0L);
    if (epmem_get_variable(epmem_variable_key.var_next_id,stored_id)) {
      stats.next_id.set(stored_id.value);
    }
 else {
      epmem_set_variable(epmem_variable_key.var_next_id,stats.next_id.get());
    }
  }
  for (int i=EPMEM_RIT_STATE_NODE; i <= EPMEM_RIT_STATE_EDGE; i++) {
    epmem_rit_state_graph[i].offset.stat=EPMEM_RIT_OFFSET_INIT;
    epmem_rit_state_graph[i].leftroot.stat=0;
    epmem_rit_state_graph[i].rightroot.stat=1;
    epmem_rit_state_graph[i].minstep.stat=Long.MAX_VALUE;
  }
  epmem_rit_state_graph[EPMEM_RIT_STATE_NODE].add_query=db.add_epmem_wmes_constant_range;
  epmem_rit_state_graph[EPMEM_RIT_STATE_EDGE].add_query=db.add_epmem_wmes_identifier_range;
{
    final ByRef<Long> var_val=ByRef.create(0L);
    for (int i=EPMEM_RIT_STATE_NODE; i <= EPMEM_RIT_STATE_EDGE; i++) {
      if (epmem_get_variable(epmem_rit_state_graph[i].offset.var_key,var_val)) {
        epmem_rit_state_graph[i].offset.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].offset.var_key,epmem_rit_state_graph[i].offset.stat);
      }
      if (epmem_get_variable(epmem_rit_state_graph[i].leftroot.var_key,var_val)) {
        epmem_rit_state_graph[i].leftroot.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].leftroot.var_key,epmem_rit_state_graph[i].leftroot.stat);
      }
      if (epmem_get_variable(epmem_rit_state_graph[i].rightroot.var_key,var_val)) {
        epmem_rit_state_graph[i].rightroot.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].rightroot.var_key,epmem_rit_state_graph[i].rightroot.stat);
      }
      if (epmem_get_variable(epmem_rit_state_graph[i].minstep.var_key,var_val)) {
        epmem_rit_state_graph[i].minstep.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].minstep.var_key,epmem_rit_state_graph[i].minstep.stat);
      }
    }
  }
{
    final PreparedStatement temp_q=db.get_max_time;
    final ResultSet rs=temp_q.executeQuery();
    try {
      if (rs.next()) {
        stats.time.set(rs.getLong(0 + 1) + 1);
      }
    }
  finally {
      rs.close();
    }
  }
  long time_max=stats.time.get();
  if (!readonly) {
    long time_last=(time_max - 1);
    final PreparedStatement[] now_select=new PreparedStatement[]{db.now_select_node,db.now_select_edge};
    final PreparedStatement[] now_add=new PreparedStatement[]{db.add_epmem_wmes_constant_point,db.add_epmem_wmes_identifier_point};
    final PreparedStatement[] now_delete=new PreparedStatement[]{db.now_delete_node,db.now_delete_edge};
    for (int i=EPMEM_RIT_STATE_NODE; i <= EPMEM_RIT_STATE_EDGE; i++) {
      final PreparedStatement temp_q=now_add[i];
      temp_q.setLong(2,time_last);
      final PreparedStatement temp_q2=now_select[i];
      final ResultSet rs=temp_q2.executeQuery();
      try {
        while (rs.next()) {
          long range_start=rs.getLong(1 + 1);
          if (range_start == time_last) {
            temp_q.setLong(1,rs.getLong(0 + 1));
            temp_q.executeUpdate();
          }
 else {
            epmem_rit_insert_interval(range_start,time_last,rs.getLong(0 + 1),epmem_rit_state_graph[i]);
          }
        }
      }
  finally {
        rs.close();
      }
      now_delete[i].execute();
    }
  }
{
    initMinMax(time_max,db.minmax_select_node,epmem_node_maxes,epmem_node_mins);
    initMinMax(time_max,db.minmax_select_edge,epmem_edge_maxes,epmem_edge_mins);
  }
{
    long parent_n_id;
    long attributes_s_id;
    long child_n_id;
    long wi_id;
    Map<Long,LinkedList<EpisodicMemoryIdPair>> hp;
    LinkedList<EpisodicMemoryIdPair> ip;
    PreparedStatement temp_q=db.edge_unique_select;
    final ResultSet rs=temp_q.executeQuery();
    try {
      while (rs.next()) {
        parent_n_id=rs.getLong(0 + 1);
        attributes_s_id=rs.getLong(1 + 1);
        child_n_id=rs.getLong(2 + 1);
        wi_id=rs.getLong(3 + 1);
        hp=epmem_id_repository.get(parent_n_id);
        if (hp == null) {
          hp=Maps.newLinkedHashMap();
          epmem_id_repository.put(parent_n_id,hp);
        }
        ip=hp.get(attributes_s_id);
        if (ip == null) {
          ip=Lists.newLinkedList();
          hp.put(attributes_s_id,ip);
        }
        ip.addFirst(new EpisodicMemoryIdPair(child_n_id,wi_id));
        hp=epmem_id_repository.get(child_n_id);
        if (hp == null) {
          hp=Maps.newLinkedHashMap();
          epmem_id_repository.put(child_n_id,hp);
        }
      }
    }
  finally {
      rs.close();
    }
  }
{
    epmem_wme_adds.add(decider.top_state);
  }
  decider.top_goal.epmem_id=EPMEM_NODEID_ROOT;
  decider.top_goal.epmem_valid=epmem_validation;
  ResultSet r=db.database_version.executeQuery();
  try {
    stats.db_version.set(r.getString(1));
  }
  finally {
    r.close();
  }
  if (params.lazy_commit.get() == LazyCommitChoices.on) {
    db.begin.executeUpdate();
  }
}","/** 
 * Private method for epmem_init_db that throws SQLException, IOException so it can wrap in SoarException and throw. <p> episodic_memory.cpp:1458:epmem_init_db
 * @param readonly
 * @throws SoarException
 */
private void epmem_init_db_ex(boolean readonly) throws SQLException, IOException, SoarException {
  if (db != null) {
    return;
  }
  final String jdbcUrl=params.protocol.get() + ""String_Node_Str"" + params.path.get();
  final Connection connection=JdbcTools.connect(params.driver.get(),jdbcUrl);
  final DatabaseMetaData meta=connection.getMetaData();
  logger.info(""String_Node_Str"" + jdbcUrl + ""String_Node_Str""+ meta.getDriverName()+ ""String_Node_Str""+ meta.getDriverVersion());
  db=new EpisodicMemoryDatabase(params.driver.get(),connection);
  applyDatabasePerformanceOptions();
  epmem_validation++;
  db.structure();
  db.prepare();
  if (!EpisodicMemoryDatabase.IN_MEMORY_PATH.equals(params.path.get())) {
    final ResultSet result=db.get_schema_version.executeQuery();
    try {
      if (result.next()) {
        String schemaVersion=result.getString(1);
        if (!EpisodicMemoryDatabase.EPMEM_SCHEMA_VERSION.equals(schemaVersion)) {
          logger.error(""String_Node_Str"" + schemaVersion);
          params.path.set(EpisodicMemoryDatabase.IN_MEMORY_PATH);
          connection.close();
          db=null;
          epmem_init_db_ex(readonly);
        }
      }
 else {
        if (params.append_database.get() == AppendDatabaseChoices.on) {
          logger.info(""String_Node_Str"");
        }
      }
    }
  finally {
      result.close();
    }
  }
  db.set_schema_version.setString(1,EpisodicMemoryDatabase.EPMEM_SCHEMA_VERSION);
  db.set_schema_version.execute();
  if (params.append_database.get() == AppendDatabaseChoices.off) {
    db.dropEpmemTables();
    db.structure();
    db.prepare();
  }
  epmem_node_mins.clear();
  epmem_node_maxes.clear();
  epmem_node_removals.clear();
  epmem_edge_mins.clear();
  epmem_edge_maxes.clear();
  epmem_edge_removals.clear();
  epmem_id_repository.put(EPMEM_NODEID_ROOT,new LinkedHashMap<Long,LinkedList<EpisodicMemoryIdPair>>());
{
    Set<WmeImpl> wms_temp=Sets.newLinkedHashSet();
    wms_temp.add(null);
    epmem_id_ref_counts.put(EPMEM_NODEID_ROOT,wms_temp);
  }
  stats.time.set(1L);
  stats.next_id.set(1L);
{
    final ByRef<Long> stored_id=ByRef.create(0L);
    if (epmem_get_variable(epmem_variable_key.var_next_id,stored_id)) {
      stats.next_id.set(stored_id.value);
    }
 else {
      epmem_set_variable(epmem_variable_key.var_next_id,stats.next_id.get());
    }
  }
  for (int i=EPMEM_RIT_STATE_NODE; i <= EPMEM_RIT_STATE_EDGE; i++) {
    epmem_rit_state_graph[i].offset.stat=EPMEM_RIT_OFFSET_INIT;
    epmem_rit_state_graph[i].leftroot.stat=0;
    epmem_rit_state_graph[i].rightroot.stat=1;
    epmem_rit_state_graph[i].minstep.stat=Long.MAX_VALUE;
  }
  epmem_rit_state_graph[EPMEM_RIT_STATE_NODE].add_query=db.add_epmem_wmes_constant_range;
  epmem_rit_state_graph[EPMEM_RIT_STATE_EDGE].add_query=db.add_epmem_wmes_identifier_range;
{
    final ByRef<Long> var_val=ByRef.create(0L);
    for (int i=EPMEM_RIT_STATE_NODE; i <= EPMEM_RIT_STATE_EDGE; i++) {
      if (epmem_get_variable(epmem_rit_state_graph[i].offset.var_key,var_val)) {
        epmem_rit_state_graph[i].offset.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].offset.var_key,epmem_rit_state_graph[i].offset.stat);
      }
      if (epmem_get_variable(epmem_rit_state_graph[i].leftroot.var_key,var_val)) {
        epmem_rit_state_graph[i].leftroot.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].leftroot.var_key,epmem_rit_state_graph[i].leftroot.stat);
      }
      if (epmem_get_variable(epmem_rit_state_graph[i].rightroot.var_key,var_val)) {
        epmem_rit_state_graph[i].rightroot.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].rightroot.var_key,epmem_rit_state_graph[i].rightroot.stat);
      }
      if (epmem_get_variable(epmem_rit_state_graph[i].minstep.var_key,var_val)) {
        epmem_rit_state_graph[i].minstep.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].minstep.var_key,epmem_rit_state_graph[i].minstep.stat);
      }
    }
  }
{
    final PreparedStatement temp_q=db.get_max_time;
    final ResultSet rs=temp_q.executeQuery();
    try {
      if (rs.next()) {
        stats.time.set(rs.getLong(0 + 1) + 1);
      }
    }
  finally {
      rs.close();
    }
  }
  long time_max=stats.time.get();
  if (!readonly) {
    long time_last=(time_max - 1);
    final PreparedStatement[] now_select=new PreparedStatement[]{db.now_select_node,db.now_select_edge};
    final PreparedStatement[] now_add=new PreparedStatement[]{db.add_epmem_wmes_constant_point,db.add_epmem_wmes_identifier_point};
    final PreparedStatement[] now_delete=new PreparedStatement[]{db.now_delete_node,db.now_delete_edge};
    for (int i=EPMEM_RIT_STATE_NODE; i <= EPMEM_RIT_STATE_EDGE; i++) {
      final PreparedStatement temp_q=now_add[i];
      temp_q.setLong(2,time_last);
      final PreparedStatement temp_q2=now_select[i];
      final ResultSet rs=temp_q2.executeQuery();
      try {
        while (rs.next()) {
          long range_start=rs.getLong(1 + 1);
          if (range_start == time_last) {
            temp_q.setLong(1,rs.getLong(0 + 1));
            temp_q.executeUpdate();
          }
 else {
            epmem_rit_insert_interval(range_start,time_last,rs.getLong(0 + 1),epmem_rit_state_graph[i]);
          }
        }
      }
  finally {
        rs.close();
      }
      now_delete[i].execute();
    }
  }
{
    initMinMax(time_max,db.minmax_select_node,epmem_node_maxes,epmem_node_mins);
    initMinMax(time_max,db.minmax_select_edge,epmem_edge_maxes,epmem_edge_mins);
  }
{
    long parent_n_id;
    long attributes_s_id;
    long child_n_id;
    long wi_id;
    Map<Long,LinkedList<EpisodicMemoryIdPair>> hp;
    LinkedList<EpisodicMemoryIdPair> ip;
    PreparedStatement temp_q=db.edge_unique_select;
    final ResultSet rs=temp_q.executeQuery();
    try {
      while (rs.next()) {
        parent_n_id=rs.getLong(0 + 1);
        attributes_s_id=rs.getLong(1 + 1);
        child_n_id=rs.getLong(2 + 1);
        wi_id=rs.getLong(3 + 1);
        hp=epmem_id_repository.get(parent_n_id);
        if (hp == null) {
          hp=Maps.newLinkedHashMap();
          epmem_id_repository.put(parent_n_id,hp);
        }
        ip=hp.get(attributes_s_id);
        if (ip == null) {
          ip=Lists.newLinkedList();
          hp.put(attributes_s_id,ip);
        }
        ip.addFirst(new EpisodicMemoryIdPair(child_n_id,wi_id));
        hp=epmem_id_repository.get(child_n_id);
        if (hp == null) {
          hp=Maps.newLinkedHashMap();
          epmem_id_repository.put(child_n_id,hp);
        }
      }
    }
  finally {
      rs.close();
    }
  }
{
    epmem_wme_adds.add(decider.top_state);
  }
  decider.top_goal.epmem_id=EPMEM_NODEID_ROOT;
  decider.top_goal.epmem_valid=epmem_validation;
  ResultSet r=db.database_version.executeQuery();
  r.next();
  try {
    stats.db_version.set(r.getString(1));
  }
  finally {
    r.close();
  }
  if (params.lazy_commit.get() == LazyCommitChoices.on) {
    db.begin.executeUpdate();
  }
}",0.9991744634012109
12127,"/** 
 * episodic_memory.cpp: 2760: bool epmem_valid_episode( agent *my_agent, epmem_time_id memory_id )
 * @param memory_id
 * @return Returns true if the temporal id is valid
 * @throws SQLException 
 */
private boolean epmem_valid_episode(long memory_id) throws SQLException {
  boolean return_val=false;
{
    PreparedStatement my_q=db.valid_episode;
    my_q.setLong(1,memory_id);
    ResultSet resultSet=my_q.executeQuery();
    return_val=(resultSet.getLong(0 + 1) > 0);
    resultSet.close();
  }
  return return_val;
}","/** 
 * episodic_memory.cpp: 2760: bool epmem_valid_episode( agent *my_agent, epmem_time_id memory_id )
 * @param memory_id
 * @return Returns true if the temporal id is valid
 * @throws SQLException 
 */
private boolean epmem_valid_episode(long memory_id) throws SQLException {
  boolean return_val=false;
{
    PreparedStatement my_q=db.valid_episode;
    my_q.setLong(1,memory_id);
    ResultSet resultSet=my_q.executeQuery();
    resultSet.next();
    return_val=(resultSet.getLong(0 + 1) > 0);
    resultSet.close();
  }
  return return_val;
}",0.9795158286778398
12128,"private long epmem_temporal_hash_add_type(int sym_type){
  long toReturn=-1;
  try {
    db.hash_add_type.setInt(1,sym_type);
    db.hash_add_type.execute();
    ResultSet rs=db.hash_add_type.getGeneratedKeys();
    try {
      toReturn=rs.getLong(1);
    }
  finally {
      rs.close();
    }
  }
 catch (  SQLException e) {
    logger.error(e.getMessage());
  }
  return toReturn;
}","private long epmem_temporal_hash_add_type(int sym_type){
  long toReturn=-1;
  try {
    db.hash_add_type.setInt(1,sym_type);
    db.hash_add_type.execute();
    ResultSet rs=db.hash_add_type.getGeneratedKeys();
    rs.next();
    try {
      toReturn=rs.getLong(1);
    }
  finally {
      rs.close();
    }
  }
 catch (  SQLException e) {
    logger.error(e.getMessage());
  }
  return toReturn;
}",0.9808429118773946
12129,"private boolean epmem_parse_chunks_safe(String chunkString) throws SoarException, IOException, SQLException {
  boolean return_val=false;
  long clause_count=0;
  epmem_init_db();
  long time_counter=stats.getTime();
  final StringWriter errorWriter=new StringWriter();
  final Lexer lexer=new Lexer(new Printer(errorWriter),new StringReader(chunkString));
  lexer.getNextLexeme();
  lexer.setAllowIds(true);
  boolean good_chunk=true;
  final Map<String,epmem_chunk_lti> chunks=new LinkedHashMap<String,epmem_chunk_lti>();
  Map<String,IdentifierImpl> ids=new HashMap<String,IdentifierImpl>();
  Set<WmeImpl> wmes=new HashSet<WmeImpl>();
  lexer.getNextLexeme();
  if (lexer.getCurrentLexeme().type == LexemeType.L_BRACE) {
    good_chunk=false;
  }
  while ((lexer.getCurrentLexeme().type == LexemeType.L_PAREN) && (good_chunk)) {
    good_chunk=epmem_parse_chunk(symbols,lexer,ids,wmes);
  }
  return_val=good_chunk;
  if (return_val) {
    Set<IdentifierImpl> possibleRoots=new HashSet<IdentifierImpl>(ids.values());
    for (    WmeImpl wme : wmes) {
      IdentifierImpl id=wme.value.asIdentifier();
      if (id != null)       possibleRoots.remove(id);
    }
    if (possibleRoots.size() != 1)     return_val=false;
 else {
      IdentifierImpl root=possibleRoots.iterator().next();
      System.err.println(root.toString());
    }
  }
  for (  epmem_chunk_lti c_old : chunks.values()) {
    epmem_deallocate_chunk(c_old,true);
  }
  chunks.clear();
  if (!return_val) {
    throw new SoarException(""String_Node_Str"" + clause_count);
  }
  return return_val;
}","private boolean epmem_parse_chunks_safe(String chunkString) throws SoarException, IOException, SQLException {
  boolean return_val=false;
  long clause_count=0;
  epmem_init_db();
  long time_counter=stats.getTime();
  final StringWriter errorWriter=new StringWriter();
  final Lexer lexer=new Lexer(new Printer(errorWriter),new StringReader(chunkString));
  lexer.getNextLexeme();
  lexer.setAllowIds(true);
  boolean good_chunk=true;
  final Map<String,epmem_chunk_lti> chunks=new LinkedHashMap<String,epmem_chunk_lti>();
  Map<String,IdentifierImpl> ids=new HashMap<String,IdentifierImpl>();
  Set<WmeImpl> wmes=new HashSet<WmeImpl>();
  lexer.getNextLexeme();
  if (lexer.getCurrentLexeme().type == LexemeType.L_BRACE) {
    good_chunk=false;
  }
  while ((lexer.getCurrentLexeme().type == LexemeType.L_PAREN) && (good_chunk)) {
    good_chunk=epmem_parse_chunk(symbols,lexer,ids,wmes);
  }
  return_val=good_chunk;
  if (return_val) {
    Set<IdentifierImpl> possibleRoots=new HashSet<IdentifierImpl>(ids.values());
    for (    WmeImpl wme : wmes) {
      IdentifierImpl id=wme.value.asIdentifier();
      if (id != null)       possibleRoots.remove(id);
    }
    if (possibleRoots.size() != 1)     return_val=false;
 else {
      IdentifierImpl root=possibleRoots.iterator().next();
      System.err.println(root.toString());
    }
  }
  chunks.clear();
  if (!return_val) {
    throw new SoarException(""String_Node_Str"" + clause_count);
  }
  return return_val;
}",0.9091507570770244
12130,"static boolean epmem_parse_chunk(SymbolFactoryImpl symbols,Lexer lexer,Map<String,IdentifierImpl> ids,Set<WmeImpl> wmes) throws IOException {
  boolean return_val=false;
  boolean good_at=false;
  lexer.getNextLexeme();
  if ((lexer.getCurrentLexeme().type == LexemeType.AT) || (lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER) || (lexer.getCurrentLexeme().type == LexemeType.VARIABLE)) {
    good_at=true;
    if (lexer.getCurrentLexeme().type == LexemeType.AT) {
      lexer.getNextLexeme();
      good_at=(lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER);
    }
    if (good_at) {
      Lexeme lexeme=lexer.getCurrentLexeme();
      String idKey;
      IdentifierImpl id;
      if (lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER) {
        id=symbols.findOrCreateIdentifier(lexeme.id_letter,lexeme.id_number);
        idKey=String.format(""String_Node_Str"",lexeme.id_letter,lexeme.id_number);
      }
 else {
        id=ids.get(lexeme.string);
        if (id == null)         id=symbols.createIdentifier('X');
        idKey=lexeme.string;
      }
      ids.put(idKey,id);
      lexer.getNextLexeme();
      IdentifierImpl intermediate_parent;
      while (lexer.getCurrentLexeme().type == LexemeType.UP_ARROW) {
        intermediate_parent=id;
        lexer.getNextLexeme();
        SymbolImpl chunk_attr=epmem_parse_constant_attr(symbols,lexer.getCurrentLexeme());
        if (chunk_attr != null) {
          lexer.getNextLexeme();
          while (lexer.getCurrentLexeme().type == LexemeType.PERIOD) {
            IdentifierImpl temp_id=symbols.createIdentifier(chunk_attr.getFirstLetter());
            WmeImpl newWme=new WmeImpl(intermediate_parent,chunk_attr,temp_id,false,0);
            wmes.add(newWme);
            intermediate_parent=temp_id;
            lexer.getNextLexeme();
            chunk_attr=epmem_parse_constant_attr(symbols,lexer.getCurrentLexeme());
            lexer.getNextLexeme();
          }
          if (chunk_attr != null) {
            Object chunk_value=null;
            do {
              chunk_value=null;
              if (lexer.getCurrentLexeme().type == LexemeType.SYM_CONSTANT) {
                chunk_value=symbols.createString(lexer.getCurrentLexeme().string);
              }
 else               if (lexer.getCurrentLexeme().type == LexemeType.INTEGER) {
                chunk_value=symbols.createInteger(lexer.getCurrentLexeme().int_val);
              }
 else               if (lexer.getCurrentLexeme().type == LexemeType.FLOAT) {
                chunk_value=symbols.createDouble(lexer.getCurrentLexeme().float_val);
              }
 else               if ((lexer.getCurrentLexeme().type == LexemeType.AT) || (lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER) || (lexer.getCurrentLexeme().type == LexemeType.VARIABLE)) {
                good_at=true;
                if (lexer.getCurrentLexeme().type == LexemeType.AT) {
                  lexer.getNextLexeme();
                  good_at=(lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER);
                }
                if (good_at) {
                  lexeme=lexer.getCurrentLexeme();
                  if (lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER) {
                    id=symbols.findOrCreateIdentifier(lexeme.id_letter,lexeme.id_number);
                    idKey=String.format(""String_Node_Str"",lexeme.id_letter,lexeme.id_number);
                  }
 else {
                    id=ids.get(lexeme.string);
                    if (id == null)                     id=symbols.createIdentifier('X');
                    idKey=lexeme.string;
                  }
                  ids.put(idKey,id);
                }
              }
              if (chunk_value != null) {
                lexer.getNextLexeme();
                IdentifierImpl temp_id=symbols.createIdentifier(chunk_attr.getFirstLetter());
                String temp_key=temp_id.toString();
                WmeImpl newWme=new WmeImpl(intermediate_parent,chunk_attr,temp_id,false,0);
                wmes.add(newWme);
                if (lexer.getCurrentLexeme().type == LexemeType.R_PAREN) {
                  return_val=true;
                  lexer.getNextLexeme();
                  chunk_value=null;
                }
              }
            }
 while (chunk_value != null);
          }
        }
      }
    }
 else {
    }
  }
 else {
  }
  return return_val;
}","static boolean epmem_parse_chunk(SymbolFactoryImpl symbols,Lexer lexer,Map<String,IdentifierImpl> ids,Set<WmeImpl> wmes) throws IOException {
  boolean return_val=false;
  boolean good_at=false;
  lexer.getNextLexeme();
  if ((lexer.getCurrentLexeme().type == LexemeType.AT) || (lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER) || (lexer.getCurrentLexeme().type == LexemeType.VARIABLE)) {
    good_at=true;
    if (lexer.getCurrentLexeme().type == LexemeType.AT) {
      lexer.getNextLexeme();
      good_at=(lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER);
    }
    if (good_at) {
      Lexeme lexeme=lexer.getCurrentLexeme();
      String idKey;
      IdentifierImpl id;
      if (lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER) {
        id=symbols.findOrCreateIdentifier(lexeme.id_letter,lexeme.id_number);
        idKey=String.format(""String_Node_Str"",lexeme.id_letter,lexeme.id_number);
      }
 else {
        id=ids.get(lexeme.string);
        if (id == null)         id=symbols.createIdentifier('X');
        idKey=lexeme.string;
      }
      ids.put(idKey,id);
      lexer.getNextLexeme();
      IdentifierImpl intermediate_parent;
      while (lexer.getCurrentLexeme().type == LexemeType.UP_ARROW) {
        intermediate_parent=id;
        lexer.getNextLexeme();
        SymbolImpl chunk_attr=epmem_parse_constant_attr(symbols,lexer.getCurrentLexeme());
        if (chunk_attr != null) {
          lexer.getNextLexeme();
          while (lexer.getCurrentLexeme().type == LexemeType.PERIOD) {
            IdentifierImpl temp_id=symbols.createIdentifier(chunk_attr.getFirstLetter());
            WmeImpl newWme=new WmeImpl(intermediate_parent,chunk_attr,temp_id,false,0);
            wmes.add(newWme);
            intermediate_parent=temp_id;
            lexer.getNextLexeme();
            chunk_attr=epmem_parse_constant_attr(symbols,lexer.getCurrentLexeme());
            lexer.getNextLexeme();
          }
          if (chunk_attr != null) {
            SymbolImpl chunk_value=null;
            do {
              chunk_value=null;
              if (lexer.getCurrentLexeme().type == LexemeType.SYM_CONSTANT) {
                chunk_value=symbols.createString(lexer.getCurrentLexeme().string);
              }
 else               if (lexer.getCurrentLexeme().type == LexemeType.INTEGER) {
                chunk_value=symbols.createInteger(lexer.getCurrentLexeme().int_val);
              }
 else               if (lexer.getCurrentLexeme().type == LexemeType.FLOAT) {
                chunk_value=symbols.createDouble(lexer.getCurrentLexeme().float_val);
              }
 else               if ((lexer.getCurrentLexeme().type == LexemeType.AT) || (lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER) || (lexer.getCurrentLexeme().type == LexemeType.VARIABLE)) {
                good_at=true;
                if (lexer.getCurrentLexeme().type == LexemeType.AT) {
                  lexer.getNextLexeme();
                  good_at=(lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER);
                }
                if (good_at) {
                  lexeme=lexer.getCurrentLexeme();
                  if (lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER) {
                    id=symbols.findOrCreateIdentifier(lexeme.id_letter,lexeme.id_number);
                    idKey=String.format(""String_Node_Str"",lexeme.id_letter,lexeme.id_number);
                  }
 else {
                    id=ids.get(lexeme.string);
                    if (id == null)                     id=symbols.createIdentifier('X');
                    idKey=lexeme.string;
                  }
                  ids.put(idKey,id);
                }
              }
              if (chunk_value != null) {
                lexer.getNextLexeme();
                WmeImpl newWme=new WmeImpl(intermediate_parent,chunk_attr,chunk_value,false,0);
                wmes.add(newWme);
                if (lexer.getCurrentLexeme().type == LexemeType.R_PAREN) {
                  return_val=true;
                  lexer.getNextLexeme();
                  chunk_value=null;
                }
              }
            }
 while (chunk_value != null);
          }
        }
      }
    }
 else {
    }
  }
 else {
  }
  return return_val;
}",0.9793838313643736
12131,"/** 
 * <p> episodic_memory.cpp:3869:void  epmem_process_query( agent *my_agent,  Symbol *state,  Symbol *pos_query,  Symbol *neg_query,  epmem_time_list& prohibits, epmem_time_id before,  epmem_time_id after,  epmem_symbol_set& currents, soar_module::wme_set& cue_wmes,  soar_module::symbol_triple_list& meta_wmes,  soar_module::symbol_triple_list& retrieval_wmes,  int level=3 )
 * @param state
 * @param query
 * @param neg_query
 * @param prohibit
 * @param before
 * @param after
 * @param currents
 * @param cue_wmes
 * @param meta_wmes
 * @param retrieval_wmes
 * @throws SQLException 
 * @throws SoarException 
 */
private void epmem_process_query(IdentifierImpl state,SymbolImpl pos_query,SymbolImpl neg_query,List<Long> prohibits,long before,long after,Set<SymbolImpl> currents,Set<WmeImpl> cue_wmes,List<SymbolTriple> meta_wmes,List<SymbolTriple> retrieval_wmes,int level) throws SQLException, SoarException {
  if (pos_query == null) {
    epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_status,predefinedSyms.epmem_sym_bad_cmd);
    return;
  }
  if (before != EPMEM_MEMID_NONE && after != EPMEM_MEMID_NONE && before <= after) {
    epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_status,predefinedSyms.epmem_sym_bad_cmd);
    return;
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"");
  }
  stats.last_considered.set(0L);
  stats.last_graph_matches.set(0L);
  if (!prohibits.isEmpty()) {
    Collections.sort(prohibits);
  }
  boolean do_graph_match=(params.graph_match.get() == GraphMatchChoices.on);
  GmOrderingChoices gm_order=params.gm_ordering.get();
  Map<WmeImpl,EpmemLiteral> literal_cache=new LinkedHashMap<WmeImpl,EpmemLiteral>();
  @SuppressWarnings(""String_Node_Str"") Map<EpmemTriple,EpmemPEdge>[] pedge_caches=new Map[2];
  pedge_caches[0]=new LinkedHashMap<DefaultEpisodicMemory.EpmemTriple,DefaultEpisodicMemory.EpmemPEdge>();
  pedge_caches[1]=new LinkedHashMap<DefaultEpisodicMemory.EpmemTriple,DefaultEpisodicMemory.EpmemPEdge>();
  @SuppressWarnings(""String_Node_Str"") SortedMap<EpmemTriple,EpmemUEdge> uedge_caches[]=new SortedMap[2];
  uedge_caches[0]=new TreeMap<EpmemTriple,EpmemUEdge>();
  uedge_caches[1]=new TreeMap<EpmemTriple,EpmemUEdge>();
  Set<EpmemInterval> interval_cleanup=new LinkedHashSet<EpmemInterval>();
  EpmemLiteral root_literal=new EpmemLiteral();
  Set<EpmemLiteral> leaf_literals=new LinkedHashSet<EpmemLiteral>();
  PriorityQueue<EpmemPEdge> pedge_pq=new PriorityQueue<EpmemPEdge>(11,new Comparator<EpmemPEdge>(){
    public int compare(    EpmemPEdge a,    EpmemPEdge b){
      if (a.time != b.time) {
        return (a.time < b.time) ? 1 : -1;
      }
 else {
        return (a.triple.compareTo(b.triple));
      }
    }
  }
);
  PriorityQueue<EpmemInterval> interval_pq=new PriorityQueue<EpmemInterval>(11,new Comparator<EpmemInterval>(){
    public int compare(    EpmemInterval a,    EpmemInterval b){
      if (a.time != b.time) {
        return (a.time < b.time) ? 1 : -1;
      }
 else       if (a.is_end_point == b.is_end_point) {
        return (a.uedge.triple.compareTo(b.uedge.triple));
      }
 else {
        return (a.is_end_point == EPMEM_RANGE_START) ? 1 : -1;
      }
    }
  }
);
  Map<SymbolImpl,Integer> symbol_num_incoming=new LinkedHashMap<SymbolImpl,Integer>();
  Map<EpmemSymbolNodePair,Integer> symbol_node_count=new LinkedHashMap<EpmemSymbolNodePair,Integer>();
  long best_episode=EPMEM_MEMID_NONE;
  double best_score=0;
  boolean best_graph_matched=false;
  long best_cardinality=0;
  Map<EpmemLiteral,EpmemNodePair> best_bindings=new LinkedHashMap<EpmemLiteral,EpmemNodePair>();
  double current_score=0;
  long current_cardinality=0;
  LinkedList<EpmemLiteral> gm_ordering=new LinkedList<EpmemLiteral>();
  if (level > 1) {
{
      stats.qry_pos.set(0l);
      stats.qry_neg.set(0l);
      root_literal.id_sym=null;
      root_literal.value_sym=pos_query;
      root_literal.is_neg_q=EPMEM_NODE_POS;
      root_literal.value_is_id=EPMEM_RIT_STATE_EDGE;
      root_literal.is_leaf=false;
      root_literal.is_current=false;
      root_literal.attribute_s_id=EPMEM_NODEID_BAD;
      root_literal.child_n_id=EPMEM_NODEID_ROOT;
      root_literal.weight=0.0;
      root_literal.parents=new LinkedHashSet<EpmemLiteral>();
      root_literal.children=new LinkedHashSet<EpmemLiteral>();
      root_literal.matches=new TreeSet<EpmemNodePair>();
      root_literal.values=new LinkedHashMap<Long,Integer>();
      symbol_num_incoming.put(pos_query,1);
      literal_cache.put(null,root_literal);
      Set<SymbolImpl> visiting=new LinkedHashSet<SymbolImpl>();
      visiting.add(pos_query);
      visiting.add(neg_query);
      for (int query_type=EPMEM_NODE_POS; query_type <= EPMEM_NODE_NEG; query_type++) {
        SymbolImpl query_root=null;
switch (query_type) {
case EPMEM_NODE_POS:
          query_root=pos_query;
        break;
case EPMEM_NODE_NEG:
      query_root=neg_query;
    break;
}
if (query_root == null) {
  continue;
}
List<WmeImpl> children=epmem_get_augs_of_id(query_root,DefaultMarker.create());
for (WmeImpl wme_iter : children) {
  EpmemLiteral child=epmem_build_dnf(wme_iter,literal_cache,leaf_literals,symbol_num_incoming,gm_ordering,currents,query_type,visiting,cue_wmes);
  if (child != null) {
    child.id_sym=pos_query;
    child.parents.add(root_literal);
    root_literal.children.add(child);
  }
}
}
stats.qry_lits.set(stats.qry_pos.get() + stats.qry_neg.get());
}
double perfect_score=0;
int perfect_cardinality=0;
for (EpmemLiteral iter : leaf_literals) {
if (iter.is_neg_q == 0) {
perfect_score+=iter.weight;
perfect_cardinality++;
}
}
if (before == EPMEM_MEMID_NONE) {
before=stats.time.get() - 1;
}
 else {
before=before - 1;
}
long current_episode=before;
long next_episode;
{
EpmemTriple triple=new EpmemTriple(EPMEM_NODEID_BAD,EPMEM_NODEID_BAD,EPMEM_NODEID_ROOT);
EpmemPEdge root_pedge=new EpmemPEdge();
root_pedge.triple=triple.copyEpmemTriple();
root_pedge.value_is_id=EPMEM_RIT_STATE_EDGE;
root_pedge.has_noncurrent=false;
root_pedge.literals=new ConcurrentSkipListSet<EpmemLiteral>();
root_pedge.literals.add(root_literal);
root_pedge.sql=db.pool_dummy.getCopy();
root_pedge.sql.setLong(1,Long.MAX_VALUE);
root_pedge.sqlResults=root_pedge.sql.executeQuery();
root_pedge.time=Long.MAX_VALUE;
pedge_pq.add(root_pedge);
pedge_caches[EPMEM_RIT_STATE_EDGE].put(triple,root_pedge);
EpmemUEdge root_uedge=new EpmemUEdge();
root_uedge.triple=triple.copyEpmemTriple();
root_uedge.value_is_id=EPMEM_RIT_STATE_EDGE;
root_uedge.has_noncurrent=false;
root_uedge.activation_count=0;
root_uedge.pedges=new LinkedHashSet<EpmemPEdge>();
root_uedge.intervals=1;
root_uedge.activated=false;
uedge_caches[EPMEM_RIT_STATE_EDGE].put(triple,root_uedge);
EpmemInterval root_interval=new EpmemInterval();
root_interval.uedge=root_uedge;
root_interval.is_end_point=1;
root_interval.sql=db.pool_dummy.getCopy();
root_interval.sql.setLong(1,before);
root_interval.sqlResult=root_interval.sql.executeQuery();
root_interval.time=before;
interval_pq.add(root_interval);
interval_cleanup.add(root_interval);
}
if (logger.isDebugEnabled()) {
logger.debug(epmem_print_retrieval_state(literal_cache,pedge_caches,uedge_caches));
}
while (pedge_pq.size() != 0 && current_episode > after) {
long next_edge;
long next_interval;
boolean changed_score=false;
next_edge=pedge_pq.peek().time;
while ((pedge_pq.size() != 0) && (pedge_pq.peek().time == next_edge || pedge_pq.peek().time >= current_episode)) {
final EpmemPEdge pedge=pedge_pq.poll();
final EpmemTriple triple=pedge.triple.copyEpmemTriple();
if (pedge.sqlResults.getMetaData().getColumnCount() > 1) {
  triple.child_n_id=pedge.sqlResults.getLong(1 + 1);
}
 else {
  triple.child_n_id=0L;
}
if (logger.isDebugEnabled()) {
  logger.debug(""String_Node_Str"" + triple.parent_n_id + ""String_Node_Str""+ triple.attribute_s_id+ ""String_Node_Str""+ triple.child_n_id);
}
if (pedge.value_is_id != 0) {
  @SuppressWarnings(""String_Node_Str"") boolean created=false;
  for (  EpmemLiteral literal_iter : pedge.literals) {
    EpmemLiteral literal=literal_iter;
    for (    EpmemLiteral child_iter : literal.children) {
      created|=epmem_register_pedges(triple.child_n_id,child_iter,pedge_pq,after,pedge_caches,uedge_caches);
    }
  }
}
Map<EpmemTriple,EpmemUEdge> uedge_cache=uedge_caches[pedge.value_is_id];
EpmemUEdge uedge_iter=uedge_cache.get(triple);
if (uedge_iter == null) {
  EpmemUEdge uedge=new EpmemUEdge();
  uedge.triple=triple.copyEpmemTriple();
  uedge.value_is_id=pedge.value_is_id;
  uedge.has_noncurrent=pedge.has_noncurrent;
  uedge.activation_count=0;
  uedge.pedges=new LinkedHashSet<EpmemPEdge>();
  uedge.intervals=0;
  uedge.activated=false;
  boolean created=false;
  long edge_id=pedge.sqlResults.getLong(0 + 1);
  long promo_time=EPMEM_MEMID_NONE;
  boolean is_lti=(pedge.value_is_id != 0 && pedge.triple.child_n_id != EPMEM_NODEID_BAD && pedge.triple.child_n_id != EPMEM_NODEID_ROOT);
  if (is_lti) {
    db.find_lti_promotion_time.setLong(1,triple.child_n_id);
    ResultSet results=db.find_lti_promotion_time.executeQuery();
    if (results.next()) {
      promo_time=results.getLong(0 + 1);
    }
    results.close();
  }
  for (int interval_type=EPMEM_RANGE_EP; interval_type <= EPMEM_RANGE_POINT; interval_type++) {
    for (int point_type=EPMEM_RANGE_START; point_type <= EPMEM_RANGE_END; point_type++) {
      PreparedStatement interval_sql=null;
      if (is_lti) {
        interval_sql=db.pool_find_lti_queries[point_type][interval_type].getCopy();
      }
 else {
        interval_sql=db.pool_find_interval_queries[pedge.value_is_id][point_type][interval_type].getCopy();
      }
      int bind_pos=1;
      if (point_type == EPMEM_RANGE_END && interval_type == EPMEM_RANGE_NOW) {
        interval_sql.setLong(bind_pos++,current_episode);
      }
      interval_sql.setLong(bind_pos++,edge_id);
      if (is_lti && interval_type == EPMEM_RANGE_EP) {
        interval_sql.setLong(bind_pos++,promo_time);
      }
      interval_sql.setLong(bind_pos++,current_episode);
      ResultSet results=interval_sql.executeQuery();
      if (results.next()) {
        EpmemInterval interval=new EpmemInterval();
        interval.is_end_point=point_type;
        interval.uedge=uedge;
        interval.time=results.getLong(0 + 1);
        if (is_lti && point_type == EPMEM_RANGE_START && interval_type != EPMEM_RANGE_POINT && interval.time < promo_time) {
          interval.time=promo_time - 1;
        }
        interval.sql=interval_sql;
        interval.sqlResult=results;
        interval_pq.add(interval);
        interval_cleanup.add(interval);
        uedge.intervals++;
        created=true;
      }
 else {
        results.close();
        interval_sql.close();
      }
    }
  }
  if (created) {
    if (is_lti) {
      EpmemInterval start_interval=new EpmemInterval();
      start_interval.uedge=uedge;
      start_interval.is_end_point=EPMEM_RANGE_START;
      start_interval.time=promo_time - 1;
      start_interval.sql=null;
      interval_pq.add(start_interval);
      interval_cleanup.add(start_interval);
    }
    uedge.pedges.add(pedge);
    uedge_cache.put(triple.copyEpmemTriple(),uedge);
  }
 else {
    uedge.pedges.clear();
    uedge.pedges=null;
  }
}
 else {
  EpmemUEdge uedge=uedge_iter;
  uedge.pedges.add(pedge);
  if (uedge.activated && uedge.activation_count == 1) {
    for (    EpmemLiteral lit_iter : pedge.literals) {
      EpmemLiteral literal=lit_iter;
      ByRef<Double> curScoreRef=new ByRef<Double>(current_score);
      ByRef<Long> curCardinalityRef=new ByRef<Long>(current_cardinality);
      changed_score|=epmem_satisfy_literal(literal,triple.parent_n_id,triple.child_n_id,curScoreRef,curCardinalityRef,symbol_node_count,uedge_caches,symbol_num_incoming);
      current_score=curScoreRef.value;
      current_cardinality=curCardinalityRef.value;
    }
  }
}
if (pedge.sql != null) {
  if (pedge.sqlResults == null) {
    ResultSet results=pedge.sql.executeQuery();
    pedge.sqlResults=results;
  }
  if (pedge.sqlResults.next()) {
    if (pedge.sqlResults.getMetaData().getColumnCount() > 2) {
      pedge.time=pedge.sqlResults.getLong(2 + 1);
    }
 else {
      pedge.time=0L;
    }
    pedge_pq.add(pedge);
  }
 else {
    pedge.sqlResults.close();
    pedge.sqlResults=null;
    pedge.sql.close();
    pedge.sql=null;
  }
}
}
next_edge=(pedge_pq.isEmpty() ? after : pedge_pq.peek().time);
while (interval_pq.size() != 0 && interval_pq.peek().time > next_edge && current_episode > after) {
if (logger.isDebugEnabled()) {
  logger.debug(""String_Node_Str"" + current_episode);
}
while (interval_pq.size() != 0 && interval_pq.peek().time >= current_episode) {
  EpmemInterval interval=interval_pq.poll();
  EpmemUEdge uedge=interval.uedge;
  EpmemTriple triple=uedge.triple.copyEpmemTriple();
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (interval.is_end_point != 0 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ triple.parent_n_id+ ""String_Node_Str""+ triple.attribute_s_id+ ""String_Node_Str""+ triple.child_n_id);
  }
  if (interval.is_end_point != 0) {
    uedge.activated=true;
    uedge.activation_count++;
    if (uedge.activation_count == 1) {
      for (      EpmemPEdge pedge_iter : uedge.pedges) {
        EpmemPEdge pedge=pedge_iter;
        for (        EpmemLiteral lit_iter : pedge.literals) {
          EpmemLiteral literal=lit_iter;
          ByRef<Double> curScoreRef=new ByRef<Double>(current_score);
          ByRef<Long> curCardinalityRef=new ByRef<Long>(current_cardinality);
          changed_score|=epmem_satisfy_literal(literal,triple.parent_n_id,triple.child_n_id,curScoreRef,curCardinalityRef,symbol_node_count,uedge_caches,symbol_num_incoming);
          current_score=curScoreRef.value;
          current_cardinality=curCardinalityRef.value;
        }
      }
    }
  }
 else {
    uedge.activated=false;
    uedge.activation_count--;
    for (    EpmemPEdge pedge_iter : uedge.pedges) {
      EpmemPEdge pedge=pedge_iter;
      for (      EpmemLiteral lit_iter : pedge.literals) {
        ByRef<Double> curScore=new ByRef<Double>(current_score);
        ByRef<Long> curCardinality=new ByRef<Long>(current_cardinality);
        changed_score|=epmem_unsatisfy_literal(lit_iter,triple.parent_n_id,triple.child_n_id,curScore,curCardinality,symbol_node_count);
        current_score=curScore.value;
        current_cardinality=curCardinality.value;
      }
    }
  }
  if (interval.sql != null) {
    if (interval.sqlResult == null) {
      interval.sqlResult=interval.sql.executeQuery();
    }
    if (interval.uedge.has_noncurrent && interval.sqlResult.next()) {
      interval.time=interval.sqlResult.getInt(0 + 1);
      interval_pq.add(interval);
    }
 else {
      interval.sqlResult.close();
      interval.sqlResult=null;
      interval.sql.close();
      interval.sql=null;
      uedge.intervals--;
      if (uedge.intervals != 0) {
        interval_cleanup.remove(interval);
      }
 else {
      }
    }
  }
}
next_interval=(interval_pq.isEmpty() ? after : interval_pq.peek().time);
next_episode=(next_edge > next_interval ? next_edge : next_interval);
while (prohibits.size() != 0 && prohibits.get(prohibits.size() - 1) > current_episode) {
  prohibits.remove(prohibits.size() - 1);
}
while (prohibits.size() != 0 && current_episode > next_episode && current_episode == prohibits.get(prohibits.size() - 1)) {
  current_episode--;
  prohibits.remove(prohibits.size() - 1);
}
if (logger.isTraceEnabled()) {
  logger.trace(epmem_print_retrieval_state(literal_cache,pedge_caches,uedge_caches));
}
stats.considered.set(stats.considered.get() + 1);
stats.last_considered.set(stats.last_considered.get() + 1);
trace.startNewLine().print(Category.EPMEM,""String_Node_Str"" + current_episode + ""String_Node_Str""+ current_cardinality+ ""String_Node_Str""+ current_score+ ""String_Node_Str"");
if (current_episode > next_episode && changed_score && (best_episode == EPMEM_MEMID_NONE || current_score > best_score || (do_graph_match && current_score == best_score && !best_graph_matched))) {
  boolean new_king=false;
  if (best_episode == EPMEM_MEMID_NONE || current_score > best_score) {
    best_episode=current_episode;
    best_score=current_score;
    best_cardinality=current_cardinality;
    new_king=true;
  }
  if (current_cardinality == perfect_cardinality) {
    boolean graph_matched=false;
    if (do_graph_match) {
      if (gm_order == DefaultEpisodicMemoryParams.GmOrderingChoices.undefined) {
        Collections.shuffle(gm_ordering,random);
      }
 else       if (gm_order == DefaultEpisodicMemoryParams.GmOrderingChoices.mcv) {
        Collections.sort(gm_ordering,new Comparator<EpmemLiteral>(){
          @Override public int compare(          EpmemLiteral a,          EpmemLiteral b){
            return (a.matches.size() < b.matches.size() ? -1 : 1);
          }
        }
);
      }
      best_bindings.clear();
      @SuppressWarnings(""String_Node_Str"") Map<Long,SymbolImpl>[] bound_nodes=(Map<Long,SymbolImpl>[])new Map[2];
      for (int i=0; i < bound_nodes.length; i++) {
        bound_nodes[i]=new LinkedHashMap<Long,SymbolImpl>();
      }
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
        logger.debug(epmem_print_retrieval_state(literal_cache,pedge_caches,uedge_caches));
      }
      stats.graph_matches.set(stats.graph_matches.get() + 1);
      stats.last_graph_matches.set(stats.last_graph_matches.get() + 1);
      graph_matched=epmem_graph_match(gm_ordering,gm_ordering.listIterator(),best_bindings,bound_nodes,2);
    }
    if (!do_graph_match || graph_matched) {
      best_episode=current_episode;
      best_graph_matched=true;
      current_episode=EPMEM_MEMID_NONE;
      new_king=true;
    }
  }
  if (new_king) {
    trace.startNewLine().print(Category.EPMEM,""String_Node_Str"" + Boolean.toString(current_cardinality == perfect_cardinality) + ""String_Node_Str""+ Boolean.toString(best_graph_matched)+ ""String_Node_Str"");
  }
}
if (current_episode == EPMEM_MEMID_NONE) {
  break;
}
 else {
  current_episode=next_episode;
}
}
}
if (best_episode == EPMEM_MEMID_NONE) {
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_failure,pos_query);
if (neg_query != null) {
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_failure,neg_query);
}
}
 else {
stats.qry_ret.set(best_episode);
stats.qry_card.set(best_cardinality);
SymbolImpl temp_sym;
Map<Long,SymbolImpl> node_map_map=new LinkedHashMap<Long,SymbolImpl>();
Map<Long,SymbolImpl> node_mem_map=new LinkedHashMap<Long,SymbolImpl>();
temp_sym=symbols.createInteger(leaf_literals.size());
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_cue_size,temp_sym);
temp_sym=symbols.createInteger(best_cardinality);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_match_cardinality,temp_sym);
temp_sym=symbols.createDouble(best_score);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_match_score,temp_sym);
temp_sym=symbols.createDouble(best_score / perfect_score);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_normalized_match_score,temp_sym);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_success,pos_query);
if (neg_query != null) {
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_success,neg_query);
}
if (do_graph_match) {
temp_sym=symbols.createInteger((best_graph_matched ? 1 : 0));
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_graph_match,temp_sym);
if (best_graph_matched) {
  @SuppressWarnings(""String_Node_Str"") int levelLocal=epmem_info(state).epmem_result_header.level;
  SymbolImpl mapping=symbols.make_new_identifier('M',level);
  epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_graph_match_mapping,mapping);
  for (  Entry<EpmemLiteral,EpmemNodePair> iter : best_bindings.entrySet()) {
    if (iter.getKey().value_is_id != 0) {
      temp_sym=symbols.make_new_identifier('N',level);
      epmem_buffer_add_wme(meta_wmes,mapping,predefinedSyms.epmem_sym_graph_match_mapping_node,temp_sym);
      epmem_buffer_add_wme(meta_wmes,temp_sym,predefinedSyms.epmem_sym_graph_match_mapping_cue,iter.getKey().value_sym);
      node_map_map.put(iter.getValue().second,temp_sym);
      node_mem_map.put(iter.getValue().second,null);
    }
  }
}
}
if (level > 2) {
epmem_install_memory(state,best_episode,meta_wmes,retrieval_wmes,node_mem_map);
}
if (best_graph_matched) {
for (Entry<Long,SymbolImpl> iter : node_mem_map.entrySet()) {
  SymbolImpl map_iter=node_map_map.get(iter.getKey());
  if (map_iter != null && iter.getValue() != null) {
    epmem_buffer_add_wme(meta_wmes,map_iter,predefinedSyms.epmem_sym_retrieved,iter.getValue());
  }
}
}
}
}
for (EpmemInterval interval : interval_cleanup) {
if (interval.sqlResult != null) {
interval.sqlResult.close();
interval.sqlResult=null;
interval.sql.close();
interval.sql=null;
}
}
for (int type=EPMEM_RIT_STATE_NODE; type <= EPMEM_RIT_STATE_EDGE; type++) {
for (EpmemPEdge pedge : pedge_caches[type].values()) {
if (pedge.sqlResults != null) {
pedge.sqlResults.close();
pedge.sqlResults=null;
pedge.sql.close();
pedge.sql=null;
}
}
}
}","/** 
 * <p> episodic_memory.cpp:3869:void  epmem_process_query( agent *my_agent,  Symbol *state,  Symbol *pos_query,  Symbol *neg_query,  epmem_time_list& prohibits, epmem_time_id before,  epmem_time_id after,  epmem_symbol_set& currents, soar_module::wme_set& cue_wmes,  soar_module::symbol_triple_list& meta_wmes,  soar_module::symbol_triple_list& retrieval_wmes,  int level=3 )
 * @param state
 * @param query
 * @param neg_query
 * @param prohibit
 * @param before
 * @param after
 * @param currents
 * @param cue_wmes
 * @param meta_wmes
 * @param retrieval_wmes
 * @throws SQLException 
 * @throws SoarException 
 */
private void epmem_process_query(IdentifierImpl state,SymbolImpl pos_query,SymbolImpl neg_query,List<Long> prohibits,long before,long after,Set<SymbolImpl> currents,Set<WmeImpl> cue_wmes,List<SymbolTriple> meta_wmes,List<SymbolTriple> retrieval_wmes,int level) throws SQLException, SoarException {
  if (pos_query == null) {
    epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_status,predefinedSyms.epmem_sym_bad_cmd);
    return;
  }
  if (before != EPMEM_MEMID_NONE && after != EPMEM_MEMID_NONE && before <= after) {
    epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_status,predefinedSyms.epmem_sym_bad_cmd);
    return;
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"");
  }
  stats.last_considered.set(0L);
  stats.last_graph_matches.set(0L);
  if (!prohibits.isEmpty()) {
    Collections.sort(prohibits);
  }
  boolean do_graph_match=(params.graph_match.get() == GraphMatchChoices.on);
  GmOrderingChoices gm_order=params.gm_ordering.get();
  Map<WmeImpl,EpmemLiteral> literal_cache=new LinkedHashMap<WmeImpl,EpmemLiteral>();
  @SuppressWarnings(""String_Node_Str"") Map<EpmemTriple,EpmemPEdge>[] pedge_caches=new Map[2];
  pedge_caches[0]=new LinkedHashMap<DefaultEpisodicMemory.EpmemTriple,DefaultEpisodicMemory.EpmemPEdge>();
  pedge_caches[1]=new LinkedHashMap<DefaultEpisodicMemory.EpmemTriple,DefaultEpisodicMemory.EpmemPEdge>();
  @SuppressWarnings(""String_Node_Str"") SortedMap<EpmemTriple,EpmemUEdge> uedge_caches[]=new SortedMap[2];
  uedge_caches[0]=new TreeMap<EpmemTriple,EpmemUEdge>();
  uedge_caches[1]=new TreeMap<EpmemTriple,EpmemUEdge>();
  Set<EpmemInterval> interval_cleanup=new LinkedHashSet<EpmemInterval>();
  EpmemLiteral root_literal=new EpmemLiteral();
  Set<EpmemLiteral> leaf_literals=new LinkedHashSet<EpmemLiteral>();
  PriorityQueue<EpmemPEdge> pedge_pq=new PriorityQueue<EpmemPEdge>(11,new Comparator<EpmemPEdge>(){
    public int compare(    EpmemPEdge a,    EpmemPEdge b){
      if (a.time != b.time) {
        return (a.time < b.time) ? 1 : -1;
      }
 else {
        return (a.triple.compareTo(b.triple));
      }
    }
  }
);
  PriorityQueue<EpmemInterval> interval_pq=new PriorityQueue<EpmemInterval>(11,new Comparator<EpmemInterval>(){
    public int compare(    EpmemInterval a,    EpmemInterval b){
      if (a.time != b.time) {
        return (a.time < b.time) ? 1 : -1;
      }
 else       if (a.is_end_point == b.is_end_point) {
        return (a.uedge.triple.compareTo(b.uedge.triple));
      }
 else {
        return (a.is_end_point == EPMEM_RANGE_END) ? 1 : -1;
      }
    }
  }
);
  Map<SymbolImpl,Integer> symbol_num_incoming=new LinkedHashMap<SymbolImpl,Integer>();
  Map<EpmemSymbolNodePair,Integer> symbol_node_count=new LinkedHashMap<EpmemSymbolNodePair,Integer>();
  long best_episode=EPMEM_MEMID_NONE;
  double best_score=0;
  boolean best_graph_matched=false;
  long best_cardinality=0;
  Map<EpmemLiteral,EpmemNodePair> best_bindings=new LinkedHashMap<EpmemLiteral,EpmemNodePair>();
  double current_score=0;
  long current_cardinality=0;
  LinkedList<EpmemLiteral> gm_ordering=new LinkedList<EpmemLiteral>();
  if (level > 1) {
{
      stats.qry_pos.set(0l);
      stats.qry_neg.set(0l);
      root_literal.id_sym=null;
      root_literal.value_sym=pos_query;
      root_literal.is_neg_q=EPMEM_NODE_POS;
      root_literal.value_is_id=EPMEM_RIT_STATE_EDGE;
      root_literal.is_leaf=false;
      root_literal.is_current=false;
      root_literal.attribute_s_id=EPMEM_NODEID_BAD;
      root_literal.child_n_id=EPMEM_NODEID_ROOT;
      root_literal.weight=0.0;
      root_literal.parents=new LinkedHashSet<EpmemLiteral>();
      root_literal.children=new LinkedHashSet<EpmemLiteral>();
      root_literal.matches=new TreeSet<EpmemNodePair>();
      root_literal.values=new LinkedHashMap<Long,Integer>();
      symbol_num_incoming.put(pos_query,1);
      literal_cache.put(null,root_literal);
      Set<SymbolImpl> visiting=new LinkedHashSet<SymbolImpl>();
      visiting.add(pos_query);
      visiting.add(neg_query);
      for (int query_type=EPMEM_NODE_POS; query_type <= EPMEM_NODE_NEG; query_type++) {
        SymbolImpl query_root=null;
switch (query_type) {
case EPMEM_NODE_POS:
          query_root=pos_query;
        break;
case EPMEM_NODE_NEG:
      query_root=neg_query;
    break;
}
if (query_root == null) {
  continue;
}
List<WmeImpl> children=epmem_get_augs_of_id(query_root,DefaultMarker.create());
for (WmeImpl wme_iter : children) {
  EpmemLiteral child=epmem_build_dnf(wme_iter,literal_cache,leaf_literals,symbol_num_incoming,gm_ordering,currents,query_type,visiting,cue_wmes);
  if (child != null) {
    child.id_sym=pos_query;
    child.parents.add(root_literal);
    root_literal.children.add(child);
  }
}
}
stats.qry_lits.set(stats.qry_pos.get() + stats.qry_neg.get());
}
double perfect_score=0;
int perfect_cardinality=0;
for (EpmemLiteral iter : leaf_literals) {
if (iter.is_neg_q == 0) {
perfect_score+=iter.weight;
perfect_cardinality++;
}
}
if (before == EPMEM_MEMID_NONE) {
before=stats.time.get() - 1;
}
 else {
before=before - 1;
}
long current_episode=before;
long next_episode;
{
EpmemTriple triple=new EpmemTriple(EPMEM_NODEID_BAD,EPMEM_NODEID_BAD,EPMEM_NODEID_ROOT);
EpmemPEdge root_pedge=new EpmemPEdge();
root_pedge.triple=triple.copyEpmemTriple();
root_pedge.value_is_id=EPMEM_RIT_STATE_EDGE;
root_pedge.has_noncurrent=false;
root_pedge.literals=new ConcurrentSkipListSet<EpmemLiteral>();
root_pedge.literals.add(root_literal);
root_pedge.sql=db.pool_dummy.getCopy();
root_pedge.sql.setLong(1,Long.MAX_VALUE);
root_pedge.sqlResults=root_pedge.sql.executeQuery();
root_pedge.time=Long.MAX_VALUE;
pedge_pq.add(root_pedge);
pedge_caches[EPMEM_RIT_STATE_EDGE].put(triple,root_pedge);
EpmemUEdge root_uedge=new EpmemUEdge();
root_uedge.triple=triple.copyEpmemTriple();
root_uedge.value_is_id=EPMEM_RIT_STATE_EDGE;
root_uedge.has_noncurrent=false;
root_uedge.activation_count=0;
root_uedge.pedges=new LinkedHashSet<EpmemPEdge>();
root_uedge.intervals=1;
root_uedge.activated=false;
uedge_caches[EPMEM_RIT_STATE_EDGE].put(triple,root_uedge);
EpmemInterval root_interval=new EpmemInterval();
root_interval.uedge=root_uedge;
root_interval.is_end_point=1;
root_interval.sql=db.pool_dummy.getCopy();
root_interval.sql.setLong(1,before);
root_interval.sqlResult=root_interval.sql.executeQuery();
root_interval.time=before;
interval_pq.add(root_interval);
interval_cleanup.add(root_interval);
}
if (logger.isDebugEnabled()) {
logger.debug(epmem_print_retrieval_state(literal_cache,pedge_caches,uedge_caches));
}
while (pedge_pq.size() != 0 && current_episode > after) {
long next_edge;
long next_interval;
boolean changed_score=false;
next_edge=pedge_pq.peek().time;
while ((pedge_pq.size() != 0) && (pedge_pq.peek().time == next_edge || pedge_pq.peek().time >= current_episode)) {
final EpmemPEdge pedge=pedge_pq.poll();
final EpmemTriple triple=pedge.triple.copyEpmemTriple();
if (pedge.sqlResults.getMetaData().getColumnCount() > 1) {
  triple.child_n_id=pedge.sqlResults.getLong(1 + 1);
}
 else {
  triple.child_n_id=0L;
}
if (logger.isDebugEnabled()) {
  logger.debug(""String_Node_Str"" + triple.parent_n_id + ""String_Node_Str""+ triple.attribute_s_id+ ""String_Node_Str""+ triple.child_n_id);
}
if (pedge.value_is_id != 0) {
  @SuppressWarnings(""String_Node_Str"") boolean created=false;
  for (  EpmemLiteral literal_iter : pedge.literals) {
    EpmemLiteral literal=literal_iter;
    for (    EpmemLiteral child_iter : literal.children) {
      created|=epmem_register_pedges(triple.child_n_id,child_iter,pedge_pq,after,pedge_caches,uedge_caches);
    }
  }
}
Map<EpmemTriple,EpmemUEdge> uedge_cache=uedge_caches[pedge.value_is_id];
EpmemUEdge uedge_iter=uedge_cache.get(triple);
if (uedge_iter == null) {
  EpmemUEdge uedge=new EpmemUEdge();
  uedge.triple=triple.copyEpmemTriple();
  uedge.value_is_id=pedge.value_is_id;
  uedge.has_noncurrent=pedge.has_noncurrent;
  uedge.activation_count=0;
  uedge.pedges=new LinkedHashSet<EpmemPEdge>();
  uedge.intervals=0;
  uedge.activated=false;
  boolean created=false;
  long edge_id=pedge.sqlResults.getLong(0 + 1);
  long promo_time=EPMEM_MEMID_NONE;
  boolean is_lti=(pedge.value_is_id != 0 && pedge.triple.child_n_id != EPMEM_NODEID_BAD && pedge.triple.child_n_id != EPMEM_NODEID_ROOT);
  if (is_lti) {
    db.find_lti_promotion_time.setLong(1,triple.child_n_id);
    ResultSet results=db.find_lti_promotion_time.executeQuery();
    if (results.next()) {
      promo_time=results.getLong(0 + 1);
    }
    results.close();
  }
  for (int interval_type=EPMEM_RANGE_EP; interval_type <= EPMEM_RANGE_POINT; interval_type++) {
    for (int point_type=EPMEM_RANGE_START; point_type <= EPMEM_RANGE_END; point_type++) {
      PreparedStatement interval_sql=null;
      if (is_lti) {
        interval_sql=db.pool_find_lti_queries[point_type][interval_type].getCopy();
      }
 else {
        interval_sql=db.pool_find_interval_queries[pedge.value_is_id][point_type][interval_type].getCopy();
      }
      int bind_pos=1;
      if (point_type == EPMEM_RANGE_END && interval_type == EPMEM_RANGE_NOW) {
        interval_sql.setLong(bind_pos++,current_episode);
      }
      interval_sql.setLong(bind_pos++,edge_id);
      if (is_lti && interval_type == EPMEM_RANGE_EP) {
        interval_sql.setLong(bind_pos++,promo_time);
      }
      interval_sql.setLong(bind_pos++,current_episode);
      ResultSet results=interval_sql.executeQuery();
      if (results.next()) {
        EpmemInterval interval=new EpmemInterval();
        interval.is_end_point=point_type;
        interval.uedge=uedge;
        interval.time=results.getLong(0 + 1);
        if (is_lti && point_type == EPMEM_RANGE_START && interval_type != EPMEM_RANGE_POINT && interval.time < promo_time) {
          interval.time=promo_time - 1;
        }
        interval.sql=interval_sql;
        interval.sqlResult=results;
        interval_pq.add(interval);
        interval_cleanup.add(interval);
        uedge.intervals++;
        created=true;
      }
 else {
        results.close();
        interval_sql.close();
      }
    }
  }
  if (created) {
    if (is_lti) {
      EpmemInterval start_interval=new EpmemInterval();
      start_interval.uedge=uedge;
      start_interval.is_end_point=EPMEM_RANGE_START;
      start_interval.time=promo_time - 1;
      start_interval.sql=null;
      interval_pq.add(start_interval);
      interval_cleanup.add(start_interval);
    }
    uedge.pedges.add(pedge);
    uedge_cache.put(triple.copyEpmemTriple(),uedge);
  }
 else {
    uedge.pedges.clear();
    uedge.pedges=null;
  }
}
 else {
  EpmemUEdge uedge=uedge_iter;
  uedge.pedges.add(pedge);
  if (uedge.activated && uedge.activation_count == 1) {
    for (    EpmemLiteral lit_iter : pedge.literals) {
      EpmemLiteral literal=lit_iter;
      ByRef<Double> curScoreRef=new ByRef<Double>(current_score);
      ByRef<Long> curCardinalityRef=new ByRef<Long>(current_cardinality);
      changed_score|=epmem_satisfy_literal(literal,triple.parent_n_id,triple.child_n_id,curScoreRef,curCardinalityRef,symbol_node_count,uedge_caches,symbol_num_incoming);
      current_score=curScoreRef.value;
      current_cardinality=curCardinalityRef.value;
    }
  }
}
if (pedge.sql != null) {
  if (pedge.sqlResults == null) {
    ResultSet results=pedge.sql.executeQuery();
    pedge.sqlResults=results;
  }
  if (pedge.sqlResults.next()) {
    if (pedge.sqlResults.getMetaData().getColumnCount() > 2) {
      pedge.time=pedge.sqlResults.getLong(2 + 1);
    }
 else {
      pedge.time=0L;
    }
    pedge_pq.add(pedge);
  }
 else {
    pedge.sqlResults.close();
    pedge.sqlResults=null;
    pedge.sql.close();
    pedge.sql=null;
  }
}
}
next_edge=(pedge_pq.isEmpty() ? after : pedge_pq.peek().time);
while (interval_pq.size() != 0 && interval_pq.peek().time > next_edge && current_episode > after) {
if (logger.isDebugEnabled()) {
  logger.debug(""String_Node_Str"" + current_episode);
}
while (interval_pq.size() != 0 && interval_pq.peek().time >= current_episode) {
  EpmemInterval interval=interval_pq.poll();
  EpmemUEdge uedge=interval.uedge;
  EpmemTriple triple=uedge.triple.copyEpmemTriple();
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (interval.is_end_point != 0 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ triple.parent_n_id+ ""String_Node_Str""+ triple.attribute_s_id+ ""String_Node_Str""+ triple.child_n_id);
  }
  if (interval.is_end_point != 0) {
    uedge.activated=true;
    uedge.activation_count++;
    if (uedge.activation_count == 1) {
      for (      EpmemPEdge pedge_iter : uedge.pedges) {
        EpmemPEdge pedge=pedge_iter;
        for (        EpmemLiteral lit_iter : pedge.literals) {
          EpmemLiteral literal=lit_iter;
          ByRef<Double> curScoreRef=new ByRef<Double>(current_score);
          ByRef<Long> curCardinalityRef=new ByRef<Long>(current_cardinality);
          changed_score|=epmem_satisfy_literal(literal,triple.parent_n_id,triple.child_n_id,curScoreRef,curCardinalityRef,symbol_node_count,uedge_caches,symbol_num_incoming);
          current_score=curScoreRef.value;
          current_cardinality=curCardinalityRef.value;
        }
      }
    }
  }
 else {
    uedge.activated=false;
    uedge.activation_count--;
    for (    EpmemPEdge pedge_iter : uedge.pedges) {
      EpmemPEdge pedge=pedge_iter;
      for (      EpmemLiteral lit_iter : pedge.literals) {
        ByRef<Double> curScore=new ByRef<Double>(current_score);
        ByRef<Long> curCardinality=new ByRef<Long>(current_cardinality);
        changed_score|=epmem_unsatisfy_literal(lit_iter,triple.parent_n_id,triple.child_n_id,curScore,curCardinality,symbol_node_count);
        current_score=curScore.value;
        current_cardinality=curCardinality.value;
      }
    }
  }
  if (interval.sql != null) {
    if (interval.sqlResult == null) {
      interval.sqlResult=interval.sql.executeQuery();
    }
    if (interval.uedge.has_noncurrent && interval.sqlResult.next()) {
      interval.time=interval.sqlResult.getInt(0 + 1);
      interval_pq.add(interval);
    }
 else {
      interval.sqlResult.close();
      interval.sqlResult=null;
      interval.sql.close();
      interval.sql=null;
      uedge.intervals--;
      if (uedge.intervals != 0) {
        interval_cleanup.remove(interval);
      }
 else {
      }
    }
  }
}
next_interval=(interval_pq.isEmpty() ? after : interval_pq.peek().time);
next_episode=(next_edge > next_interval ? next_edge : next_interval);
while (prohibits.size() != 0 && prohibits.get(prohibits.size() - 1) > current_episode) {
  prohibits.remove(prohibits.size() - 1);
}
while (prohibits.size() != 0 && current_episode > next_episode && current_episode == prohibits.get(prohibits.size() - 1)) {
  current_episode--;
  prohibits.remove(prohibits.size() - 1);
}
if (logger.isTraceEnabled()) {
  logger.trace(epmem_print_retrieval_state(literal_cache,pedge_caches,uedge_caches));
}
stats.considered.set(stats.considered.get() + 1);
stats.last_considered.set(stats.last_considered.get() + 1);
trace.startNewLine().print(Category.EPMEM,""String_Node_Str"" + current_episode + ""String_Node_Str""+ current_cardinality+ ""String_Node_Str""+ current_score+ ""String_Node_Str"");
if (current_episode > next_episode && changed_score && (best_episode == EPMEM_MEMID_NONE || current_score > best_score || (do_graph_match && current_score == best_score && !best_graph_matched))) {
  boolean new_king=false;
  if (best_episode == EPMEM_MEMID_NONE || current_score > best_score) {
    best_episode=current_episode;
    best_score=current_score;
    best_cardinality=current_cardinality;
    new_king=true;
  }
  if (current_cardinality == perfect_cardinality) {
    boolean graph_matched=false;
    if (do_graph_match) {
      if (gm_order == DefaultEpisodicMemoryParams.GmOrderingChoices.undefined) {
        Collections.shuffle(gm_ordering,random);
      }
 else       if (gm_order == DefaultEpisodicMemoryParams.GmOrderingChoices.mcv) {
        Collections.sort(gm_ordering,new Comparator<EpmemLiteral>(){
          @Override public int compare(          EpmemLiteral a,          EpmemLiteral b){
            return (a.matches.size() < b.matches.size() ? -1 : 1);
          }
        }
);
      }
      best_bindings.clear();
      @SuppressWarnings(""String_Node_Str"") Map<Long,SymbolImpl>[] bound_nodes=(Map<Long,SymbolImpl>[])new Map[2];
      for (int i=0; i < bound_nodes.length; i++) {
        bound_nodes[i]=new LinkedHashMap<Long,SymbolImpl>();
      }
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
        logger.debug(epmem_print_retrieval_state(literal_cache,pedge_caches,uedge_caches));
      }
      stats.graph_matches.set(stats.graph_matches.get() + 1);
      stats.last_graph_matches.set(stats.last_graph_matches.get() + 1);
      graph_matched=epmem_graph_match(gm_ordering,gm_ordering.listIterator(),best_bindings,bound_nodes,2);
    }
    if (!do_graph_match || graph_matched) {
      best_episode=current_episode;
      best_graph_matched=true;
      current_episode=EPMEM_MEMID_NONE;
      new_king=true;
    }
  }
  if (new_king) {
    trace.startNewLine().print(Category.EPMEM,""String_Node_Str"" + Boolean.toString(current_cardinality == perfect_cardinality) + ""String_Node_Str""+ Boolean.toString(best_graph_matched)+ ""String_Node_Str"");
  }
}
if (current_episode == EPMEM_MEMID_NONE) {
  break;
}
 else {
  current_episode=next_episode;
}
}
}
if (best_episode == EPMEM_MEMID_NONE) {
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_failure,pos_query);
if (neg_query != null) {
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_failure,neg_query);
}
}
 else {
stats.qry_ret.set(best_episode);
stats.qry_card.set(best_cardinality);
SymbolImpl temp_sym;
Map<Long,SymbolImpl> node_map_map=new LinkedHashMap<Long,SymbolImpl>();
Map<Long,SymbolImpl> node_mem_map=new LinkedHashMap<Long,SymbolImpl>();
temp_sym=symbols.createInteger(leaf_literals.size());
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_cue_size,temp_sym);
temp_sym=symbols.createInteger(best_cardinality);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_match_cardinality,temp_sym);
temp_sym=symbols.createDouble(best_score);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_match_score,temp_sym);
temp_sym=symbols.createDouble(best_score / perfect_score);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_normalized_match_score,temp_sym);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_success,pos_query);
if (neg_query != null) {
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_success,neg_query);
}
if (do_graph_match) {
temp_sym=symbols.createInteger((best_graph_matched ? 1 : 0));
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_graph_match,temp_sym);
if (best_graph_matched) {
  @SuppressWarnings(""String_Node_Str"") int levelLocal=epmem_info(state).epmem_result_header.level;
  SymbolImpl mapping=symbols.make_new_identifier('M',level);
  epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_graph_match_mapping,mapping);
  for (  Entry<EpmemLiteral,EpmemNodePair> iter : best_bindings.entrySet()) {
    if (iter.getKey().value_is_id != 0) {
      temp_sym=symbols.make_new_identifier('N',level);
      epmem_buffer_add_wme(meta_wmes,mapping,predefinedSyms.epmem_sym_graph_match_mapping_node,temp_sym);
      epmem_buffer_add_wme(meta_wmes,temp_sym,predefinedSyms.epmem_sym_graph_match_mapping_cue,iter.getKey().value_sym);
      node_map_map.put(iter.getValue().second,temp_sym);
      node_mem_map.put(iter.getValue().second,null);
    }
  }
}
}
if (level > 2) {
epmem_install_memory(state,best_episode,meta_wmes,retrieval_wmes,node_mem_map);
}
if (best_graph_matched) {
for (Entry<Long,SymbolImpl> iter : node_mem_map.entrySet()) {
  SymbolImpl map_iter=node_map_map.get(iter.getKey());
  if (map_iter != null && iter.getValue() != null) {
    epmem_buffer_add_wme(meta_wmes,map_iter,predefinedSyms.epmem_sym_retrieved,iter.getValue());
  }
}
}
}
}
for (EpmemInterval interval : interval_cleanup) {
if (interval.sqlResult != null) {
interval.sqlResult.close();
interval.sqlResult=null;
interval.sql.close();
interval.sql=null;
}
}
for (int type=EPMEM_RIT_STATE_NODE; type <= EPMEM_RIT_STATE_EDGE; type++) {
for (EpmemPEdge pedge : pedge_caches[type].values()) {
if (pedge.sqlResults != null) {
pedge.sqlResults.close();
pedge.sqlResults=null;
pedge.sql.close();
pedge.sql=null;
}
}
}
}",0.6447147651006712
12132,"/** 
 * <p> semantic_memory.cpp:2145:_smem_process_cue_wme
 * @param state
 * @param query
 * @param prohibit
 * @param query_level
 * @return
 * @throws SQLException
 */
boolean _smem_process_cue_wme(WmeImpl w,boolean pos_cue,PriorityQueue<WeightedCueElement> weighted_pq) throws SQLException {
  boolean good_wme=true;
  WeightedCueElement new_cue_element;
  long attr_hash;
  long value_hash;
  long value_lti;
  smem_cue_element_type element_type=null;
  PreparedStatement q=null;
{
    attr_hash=smem_temporal_hash(w.attr,false);
    if (attr_hash != 0) {
      if (w.value.symbol_is_constant()) {
        value_lti=0;
        value_hash=smem_temporal_hash(w.value,false);
        if (value_hash != 0) {
          q=db.wmes_constant_frequency_get;
          q.setLong(1,attr_hash);
          q.setLong(2,value_hash);
          element_type=smem_cue_element_type.value_const_t;
        }
 else {
          if (pos_cue) {
            good_wme=false;
          }
        }
      }
 else {
        value_lti=w.value.asIdentifier().smem_lti;
        value_hash=0;
        if (value_lti == 0) {
          q=db.attribute_frequency_get;
          q.setLong(1,attr_hash);
          element_type=smem_cue_element_type.attr_t;
        }
 else {
          q=db.wmes_lti_frequency_get;
          q.setLong(1,attr_hash);
          q.setLong(2,value_lti);
          element_type=smem_cue_element_type.value_lti_t;
        }
      }
      if (good_wme) {
        ResultSet rs=q.executeQuery();
        try {
          if (rs.next()) {
            new_cue_element=new WeightedCueElement();
            new_cue_element.weight=rs.getLong(0 + 1);
            new_cue_element.attr_hash=attr_hash;
            new_cue_element.value_hash=value_hash;
            new_cue_element.value_lti=value_lti;
            new_cue_element.cue_element=w;
            new_cue_element.element_type=element_type;
            new_cue_element.pos_element=pos_cue;
            weighted_pq.add(new_cue_element);
            new_cue_element=null;
          }
 else {
            if (pos_cue) {
              good_wme=false;
            }
          }
        }
  finally {
          rs.close();
        }
      }
    }
 else {
      if (pos_cue) {
        good_wme=false;
      }
    }
  }
  return good_wme;
}","/** 
 * <p> semantic_memory.cpp:2145:_smem_process_cue_wme
 * @param state
 * @param query
 * @param prohibit
 * @param query_level
 * @return
 * @throws SQLException
 */
boolean _smem_process_cue_wme(WmeImpl w,boolean pos_cue,PriorityQueue<WeightedCueElement> weighted_pq) throws SQLException {
  boolean good_wme=true;
  WeightedCueElement new_cue_element;
  long attr_hash;
  long value_hash;
  long value_lti;
  smem_cue_element_type element_type=null;
  PreparedStatement q=null;
{
    attr_hash=smem_temporal_hash(w.attr,false);
    if (attr_hash != 0) {
      if (w.value.symbol_is_constant()) {
        value_lti=0;
        value_hash=smem_temporal_hash(w.value,false);
        element_type=smem_cue_element_type.value_const_t;
        if (value_hash != 0) {
          q=db.wmes_constant_frequency_get;
          q.setLong(1,attr_hash);
          q.setLong(2,value_hash);
        }
 else         if (pos_cue) {
          good_wme=false;
        }
      }
 else {
        value_lti=w.value.asIdentifier().smem_lti;
        value_hash=0;
        if (value_lti == 0) {
          q=db.attribute_frequency_get;
          q.setLong(1,attr_hash);
          element_type=smem_cue_element_type.attr_t;
        }
 else {
          q=db.wmes_lti_frequency_get;
          q.setLong(1,attr_hash);
          q.setLong(2,value_lti);
          element_type=smem_cue_element_type.value_lti_t;
        }
      }
      if (good_wme) {
        ResultSet rs=q.executeQuery();
        try {
          if (rs.next()) {
            new_cue_element=new WeightedCueElement();
            new_cue_element.weight=rs.getLong(0 + 1);
            new_cue_element.attr_hash=attr_hash;
            new_cue_element.value_hash=value_hash;
            new_cue_element.value_lti=value_lti;
            new_cue_element.cue_element=w;
            new_cue_element.element_type=element_type;
            new_cue_element.pos_element=pos_cue;
            weighted_pq.add(new_cue_element);
            new_cue_element=null;
          }
 else {
            if (pos_cue) {
              good_wme=false;
            }
          }
        }
  finally {
          rs.close();
        }
      }
    }
 else {
      if (pos_cue) {
        good_wme=false;
      }
    }
  }
  return good_wme;
}",0.954424778761062
12133,"private int smem_reverse_hash_int(long hash_value) throws SQLException {
  db.hash_rev_int.setLong(1,hash_value);
  final ResultSet rs=db.hash_rev_int.executeQuery();
  try {
    if (!rs.next()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    return rs.getInt(0 + 1);
  }
  finally {
    rs.close();
  }
}","private int smem_reverse_hash_int(long hash_value) throws SQLException {
  db.hash_rev_int.setLong(1,hash_value);
  final ResultSet rs=db.hash_rev_int.executeQuery();
  try {
    if (!rs.next()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    int toReturn=rs.getInt(0 + 1);
    rs.close();
    return toReturn;
  }
  finally {
    rs.close();
  }
}",0.9182209469153516
12134,"private double smem_reverse_hash_float(long hash_value) throws SQLException {
  db.hash_rev_float.setLong(1,hash_value);
  final ResultSet rs=db.hash_rev_float.executeQuery();
  try {
    rs.next();
    return rs.getDouble(0 + 1);
  }
  finally {
    rs.close();
  }
}","private double smem_reverse_hash_float(long hash_value) throws SQLException {
  db.hash_rev_float.setLong(1,hash_value);
  final ResultSet rs=db.hash_rev_float.executeQuery();
  try {
    rs.next();
    double toReturn=rs.getDouble(0 + 1);
    rs.close();
    return toReturn;
  }
  finally {
    rs.close();
  }
}",0.8969072164948454
12135,"private String smem_reverse_hash_str(long hash_value) throws SQLException {
  db.hash_rev_str.setLong(1,hash_value);
  final ResultSet rs=db.hash_rev_str.executeQuery();
  try {
    rs.next();
    return rs.getString(0 + 1);
  }
  finally {
    rs.close();
  }
}","private String smem_reverse_hash_str(long hash_value) throws SQLException {
  db.hash_rev_str.setLong(1,hash_value);
  final ResultSet rs=db.hash_rev_str.executeQuery();
  try {
    rs.next();
    String toReturn=rs.getString(0 + 1);
    rs.close();
    return toReturn;
  }
  finally {
    rs.close();
  }
}",0.8947368421052632
12136,"private String doPrint(int i,String[] args) throws SoarException {
  final StringWriter sw=new StringWriter();
  final PrintWriter pw=new PrintWriter(sw);
  long lti_id=0;
  int depth=1;
  smem.smem_attach();
  if (args.length > i && args.length <= i + 3) {
    char name_letter=0;
    long name_number=0;
    if (args.length == i + 2) {
      lexer.get_lexeme_from_string(args[i + 1]);
      if (lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER) {
        if (smem.getDatabase() != null) {
          lti_id=smem.smem_lti_get_id(name_letter,name_number);
          if ((lti_id != 0) && args.length == i + 3) {
            depth=Integer.parseInt(args[i + 2]);
          }
        }
      }
    }
    StringBuilder viz=new StringBuilder(""String_Node_Str"");
    if (lti_id == 0) {
      smem.smem_print_store(viz);
    }
 else {
      smem.smem_print_lti(lti_id,depth,viz);
    }
    if (viz.length() == 0) {
      throw new SoarException(""String_Node_Str"");
    }
    pw.printf(PrintHelper.generateHeader(""String_Node_Str"",40));
    pw.printf(viz.toString());
  }
 else {
    throw new SoarException(""String_Node_Str"");
  }
  pw.flush();
  return sw.toString();
}","private String doPrint(int i,String[] args) throws SoarException {
  final StringWriter sw=new StringWriter();
  final PrintWriter pw=new PrintWriter(sw);
  long lti_id=0;
  int depth=1;
  smem.smem_attach();
  if (args.length > i && args.length <= i + 3) {
    if (args.length == i + 2) {
      boolean allowIdsOld=lexer.isAllowIds();
      lexer.setAllowIds(true);
      lexer.get_lexeme_from_string(args[i + 1]);
      if (lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER) {
        final char name_letter=lexer.getCurrentLexeme().id_letter;
        final long name_number=lexer.getCurrentLexeme().id_number;
        if (smem.getDatabase() != null) {
          lti_id=smem.smem_lti_get_id(name_letter,name_number);
          if ((lti_id != 0) && args.length == i + 3) {
            depth=Integer.parseInt(args[i + 2]);
          }
        }
      }
      lexer.setAllowIds(allowIdsOld);
    }
    StringBuilder viz=new StringBuilder(""String_Node_Str"");
    if (lti_id == 0) {
      smem.smem_print_store(viz);
    }
 else {
      smem.smem_print_lti(lti_id,depth,viz);
    }
    if (viz.length() == 0) {
      throw new SoarException(""String_Node_Str"");
    }
    pw.printf(PrintHelper.generateHeader(""String_Node_Str"",40));
    pw.printf(viz.toString());
  }
 else {
    throw new SoarException(""String_Node_Str"");
  }
  pw.flush();
  return sw.toString();
}",0.8631163708086785
12137,"@Override public void removeWme(WmeImpl w){
  boolean was_encoded=false;
  if (w.value.asIdentifier() != null) {
    boolean lti=(w.value.asIdentifier().smem_lti != 0);
    if ((w.epmem_id != EPMEM_NODEID_BAD) && (w.epmem_valid == epmem_validation)) {
      was_encoded=true;
      epmem_edge_removals.put(w.epmem_id,true);
      if (!lti) {
        LinkedList<EpisodicMemoryIdPair> p=epmem_id_replacement.get(w.epmem_id);
        p.addFirst(new EpisodicMemoryIdPair(w.value.asIdentifier().epmem_id,w.epmem_id));
        epmem_id_replacement.remove(p);
      }
    }
    if (!lti && (w.value.asIdentifier().epmem_id != EPMEM_NODEID_BAD) && (w.value.asIdentifier().epmem_valid == epmem_validation)) {
      Set<WmeImpl> my_refs=epmem_id_ref_counts.get(w.value.asIdentifier().epmem_id);
      if (my_refs == null) {
        my_refs=new LinkedHashSet<WmeImpl>();
        epmem_id_ref_counts.put(w.value.asIdentifier().epmem_id,my_refs);
      }
      if (my_refs.contains(w)) {
        my_refs.remove(w);
        boolean recurse=true;
        for (        WmeImpl rc_it : my_refs) {
          if (rc_it == null || rc_it.id.level == decider.top_state.level) {
            recurse=false;
            break;
          }
        }
        if (recurse) {
          my_refs.clear();
          epmem_id_removes.push(w.value);
        }
      }
    }
  }
 else   if ((w.epmem_id != EPMEM_NODEID_BAD) && (w.epmem_valid == epmem_validation)) {
    was_encoded=true;
    epmem_node_removals.put(w.epmem_id,true);
  }
  if (was_encoded) {
    w.epmem_id=EPMEM_NODEID_BAD;
    w.epmem_valid=0;
  }
}","@Override public void removeWme(WmeImpl w){
  boolean was_encoded=false;
  if (w.value.asIdentifier() != null) {
    boolean lti=(w.value.asIdentifier().smem_lti != 0);
    if ((w.epmem_id != EPMEM_NODEID_BAD) && (w.epmem_valid == epmem_validation)) {
      was_encoded=true;
      epmem_edge_removals.put(w.epmem_id,true);
      if (!lti) {
        LinkedList<EpisodicMemoryIdPair> p=epmem_id_replacement.get(w.epmem_id);
        p.addFirst(new EpisodicMemoryIdPair(w.value.asIdentifier().epmem_id,w.epmem_id));
        epmem_id_replacement.remove(p);
      }
    }
    if (!lti && (w.value.asIdentifier().epmem_id != EPMEM_NODEID_BAD) && (w.value.asIdentifier().epmem_valid == epmem_validation)) {
      Set<WmeImpl> my_refs=epmem_id_ref_counts.get(w.value.asIdentifier().epmem_id);
      if (my_refs == null) {
        my_refs=new LinkedHashSet<WmeImpl>();
        epmem_id_ref_counts.put(w.value.asIdentifier().epmem_id,my_refs);
      }
      if (my_refs.contains(w)) {
        my_refs.remove(w);
        if (my_refs.isEmpty()) {
          my_refs.clear();
          epmem_id_removes.push(w.value);
        }
      }
    }
  }
 else   if ((w.epmem_id != EPMEM_NODEID_BAD) && (w.epmem_valid == epmem_validation)) {
    was_encoded=true;
    epmem_node_removals.put(w.epmem_id,true);
  }
  if (was_encoded) {
    w.epmem_id=EPMEM_NODEID_BAD;
    w.epmem_valid=0;
  }
}",0.91875423155044
12138,"/** 
 * <p> episodic_memory.cpp:3869:void  epmem_process_query( agent *my_agent,  Symbol *state,  Symbol *pos_query,  Symbol *neg_query,  epmem_time_list& prohibits, epmem_time_id before,  epmem_time_id after,  epmem_symbol_set& currents, soar_module::wme_set& cue_wmes,  soar_module::symbol_triple_list& meta_wmes,  soar_module::symbol_triple_list& retrieval_wmes,  int level=3 )
 * @param state
 * @param query
 * @param neg_query
 * @param prohibit
 * @param before
 * @param after
 * @param currents
 * @param cue_wmes
 * @param meta_wmes
 * @param retrieval_wmes
 * @throws SQLException 
 * @throws SoarException 
 */
private void epmem_process_query(IdentifierImpl state,SymbolImpl pos_query,SymbolImpl neg_query,List<Long> prohibits,long before,long after,Set<SymbolImpl> currents,Set<WmeImpl> cue_wmes,List<SymbolTriple> meta_wmes,List<SymbolTriple> retrieval_wmes,int level) throws SQLException, SoarException {
  if (pos_query == null) {
    epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_status,predefinedSyms.epmem_sym_bad_cmd);
    return;
  }
  if (before != EPMEM_MEMID_NONE && after != EPMEM_MEMID_NONE && before <= after) {
    epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_status,predefinedSyms.epmem_sym_bad_cmd);
    return;
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"");
  }
  stats.last_considered.set(0L);
  stats.last_graph_matches.set(0L);
  if (!prohibits.isEmpty()) {
    Collections.sort(prohibits);
  }
  boolean do_graph_match=(params.graph_match.get() == GraphMatchChoices.on);
  GmOrderingChoices gm_order=params.gm_ordering.get();
  Map<WmeImpl,EpmemLiteral> literal_cache=new LinkedHashMap<WmeImpl,EpmemLiteral>();
  @SuppressWarnings(""String_Node_Str"") Map<EpmemTriple,EpmemPEdge>[] pedge_caches=new Map[2];
  pedge_caches[0]=new LinkedHashMap<DefaultEpisodicMemory.EpmemTriple,DefaultEpisodicMemory.EpmemPEdge>();
  pedge_caches[1]=new LinkedHashMap<DefaultEpisodicMemory.EpmemTriple,DefaultEpisodicMemory.EpmemPEdge>();
  @SuppressWarnings(""String_Node_Str"") SortedMap<EpmemTriple,EpmemUEdge> uedge_caches[]=new SortedMap[2];
  uedge_caches[0]=new TreeMap<EpmemTriple,EpmemUEdge>();
  uedge_caches[1]=new TreeMap<EpmemTriple,EpmemUEdge>();
  Set<EpmemInterval> interval_cleanup=new LinkedHashSet<EpmemInterval>();
  EpmemLiteral root_literal=new EpmemLiteral();
  Set<EpmemLiteral> leaf_literals=new LinkedHashSet<EpmemLiteral>();
  PriorityQueue<EpmemPEdge> pedge_pq=new PriorityQueue<EpmemPEdge>(11,new Comparator<EpmemPEdge>(){
    public int compare(    EpmemPEdge a,    EpmemPEdge b){
      if (a.time != b.time) {
        return (a.time < b.time) ? 1 : -1;
      }
 else {
        return (a.triple.compareTo(b.triple));
      }
    }
  }
);
  PriorityQueue<EpmemInterval> interval_pq=new PriorityQueue<EpmemInterval>(11,new Comparator<EpmemInterval>(){
    public int compare(    EpmemInterval a,    EpmemInterval b){
      if (a.time != b.time) {
        return (a.time < b.time) ? 1 : -1;
      }
 else       if (a.is_end_point == b.is_end_point) {
        return (a.uedge.triple.compareTo(b.uedge.triple));
      }
 else {
        return (a.is_end_point == EPMEM_RANGE_START) ? 1 : -1;
      }
    }
  }
);
  Map<SymbolImpl,Integer> symbol_num_incoming=new LinkedHashMap<SymbolImpl,Integer>();
  Map<EpmemSymbolNodePair,Integer> symbol_node_count=new LinkedHashMap<EpmemSymbolNodePair,Integer>();
  long best_episode=EPMEM_MEMID_NONE;
  double best_score=0;
  boolean best_graph_matched=false;
  long best_cardinality=0;
  Map<EpmemLiteral,EpmemNodePair> best_bindings=new LinkedHashMap<EpmemLiteral,EpmemNodePair>();
  double current_score=0;
  long current_cardinality=0;
  LinkedList<EpmemLiteral> gm_ordering=new LinkedList<EpmemLiteral>();
  if (level > 1) {
{
      stats.qry_pos.set(0l);
      stats.qry_neg.set(0l);
      root_literal.id_sym=null;
      root_literal.value_sym=pos_query;
      root_literal.is_neg_q=EPMEM_NODE_POS;
      root_literal.value_is_id=EPMEM_RIT_STATE_EDGE;
      root_literal.is_leaf=false;
      root_literal.is_current=false;
      root_literal.attribute_s_id=EPMEM_NODEID_BAD;
      root_literal.child_n_id=EPMEM_NODEID_ROOT;
      root_literal.weight=0.0;
      root_literal.parents=new LinkedHashSet<EpmemLiteral>();
      root_literal.children=new LinkedHashSet<EpmemLiteral>();
      root_literal.matches=new TreeSet<EpmemNodePair>();
      root_literal.values=new LinkedHashMap<Long,Integer>();
      symbol_num_incoming.put(pos_query,1);
      literal_cache.put(null,root_literal);
      Set<SymbolImpl> visiting=new LinkedHashSet<SymbolImpl>();
      visiting.add(pos_query);
      visiting.add(neg_query);
      for (int query_type=EPMEM_NODE_POS; query_type <= EPMEM_NODE_NEG; query_type++) {
        SymbolImpl query_root=null;
switch (query_type) {
case EPMEM_NODE_POS:
          query_root=pos_query;
        break;
case EPMEM_NODE_NEG:
      query_root=neg_query;
    break;
}
if (query_root == null) {
  continue;
}
List<WmeImpl> children=epmem_get_augs_of_id(query_root,DefaultMarker.create());
for (WmeImpl wme_iter : children) {
  EpmemLiteral child=epmem_build_dnf(wme_iter,literal_cache,leaf_literals,symbol_num_incoming,gm_ordering,currents,query_type,visiting,cue_wmes);
  if (child != null) {
    child.id_sym=pos_query;
    child.parents.add(root_literal);
    root_literal.children.add(child);
  }
}
}
stats.qry_lits.set(stats.qry_pos.get() + stats.qry_neg.get());
}
double perfect_score=0;
int perfect_cardinality=0;
for (EpmemLiteral iter : leaf_literals) {
if (iter.is_neg_q == 0) {
perfect_score+=iter.weight;
perfect_cardinality++;
}
}
if (before == EPMEM_MEMID_NONE) {
before=stats.time.get() - 1;
}
 else {
before=before - 1;
}
long current_episode=before;
long next_episode;
{
EpmemTriple triple=new EpmemTriple(EPMEM_NODEID_BAD,EPMEM_NODEID_BAD,EPMEM_NODEID_ROOT);
EpmemPEdge root_pedge=new EpmemPEdge();
root_pedge.triple=triple.copyEpmemTriple();
root_pedge.value_is_id=EPMEM_RIT_STATE_EDGE;
root_pedge.has_noncurrent=false;
root_pedge.literals=new ConcurrentSkipListSet<EpmemLiteral>();
root_pedge.literals.add(root_literal);
root_pedge.sql=db.pool_dummy.getCopy();
root_pedge.sql.setLong(1,Long.MAX_VALUE);
root_pedge.sqlResults=root_pedge.sql.executeQuery();
root_pedge.time=Long.MAX_VALUE;
pedge_pq.add(root_pedge);
pedge_caches[EPMEM_RIT_STATE_EDGE].put(triple,root_pedge);
EpmemUEdge root_uedge=new EpmemUEdge();
root_uedge.triple=triple.copyEpmemTriple();
root_uedge.value_is_id=EPMEM_RIT_STATE_EDGE;
root_uedge.has_noncurrent=false;
root_uedge.activation_count=0;
root_uedge.pedges=new LinkedHashSet<EpmemPEdge>();
root_uedge.intervals=1;
root_uedge.activated=false;
uedge_caches[EPMEM_RIT_STATE_EDGE].put(triple,root_uedge);
EpmemInterval root_interval=new EpmemInterval();
root_interval.uedge=root_uedge;
root_interval.is_end_point=1;
root_interval.sql=db.pool_dummy.getCopy();
root_interval.sql.setLong(1,before);
root_interval.sqlResult=root_interval.sql.executeQuery();
root_interval.time=before;
interval_pq.add(root_interval);
interval_cleanup.add(root_interval);
}
if (logger.isDebugEnabled()) {
logger.debug(epmem_print_retrieval_state(literal_cache,pedge_caches,uedge_caches));
}
while (pedge_pq.size() != 0 && current_episode > after) {
long next_edge;
long next_interval;
boolean changed_score=false;
next_edge=pedge_pq.peek().time;
while ((pedge_pq.size() != 0) && (pedge_pq.peek().time == next_edge || pedge_pq.peek().time >= current_episode)) {
final EpmemPEdge pedge=pedge_pq.poll();
final EpmemTriple triple=pedge.triple.copyEpmemTriple();
if (pedge.sqlResults.getMetaData().getColumnCount() > 1) {
  triple.child_n_id=pedge.sqlResults.getLong(1 + 1);
}
 else {
  triple.child_n_id=0L;
}
if (logger.isDebugEnabled()) {
  logger.debug(""String_Node_Str"" + triple.parent_n_id + ""String_Node_Str""+ triple.attribute_s_id+ ""String_Node_Str""+ triple.child_n_id);
}
if (pedge.value_is_id != 0) {
  @SuppressWarnings(""String_Node_Str"") boolean created=false;
  for (  EpmemLiteral literal_iter : pedge.literals) {
    EpmemLiteral literal=literal_iter;
    for (    EpmemLiteral child_iter : literal.children) {
      created|=epmem_register_pedges(triple.child_n_id,child_iter,pedge_pq,after,pedge_caches,uedge_caches);
    }
  }
}
Map<EpmemTriple,EpmemUEdge> uedge_cache=uedge_caches[pedge.value_is_id];
EpmemUEdge uedge_iter=uedge_cache.get(triple);
if (uedge_iter == null) {
  EpmemUEdge uedge=new EpmemUEdge();
  uedge.triple=triple.copyEpmemTriple();
  uedge.value_is_id=pedge.value_is_id;
  uedge.has_noncurrent=pedge.has_noncurrent;
  uedge.activation_count=0;
  uedge.pedges=new LinkedHashSet<EpmemPEdge>();
  uedge.intervals=0;
  uedge.activated=false;
  boolean created=false;
  long edge_id=pedge.sqlResults.getLong(0 + 1);
  long promo_time=EPMEM_MEMID_NONE;
  boolean is_lti=(pedge.value_is_id != 0 && pedge.triple.child_n_id != EPMEM_NODEID_BAD && pedge.triple.child_n_id != EPMEM_NODEID_ROOT);
  if (is_lti) {
    db.find_lti_promotion_time.setLong(1,triple.child_n_id);
    ResultSet results=db.find_lti_promotion_time.executeQuery();
    if (results.next()) {
      promo_time=results.getLong(0 + 1);
    }
    results.close();
  }
  for (int interval_type=EPMEM_RANGE_EP; interval_type <= EPMEM_RANGE_POINT; interval_type++) {
    for (int point_type=EPMEM_RANGE_START; point_type <= EPMEM_RANGE_END; point_type++) {
      PreparedStatement interval_sql=null;
      if (is_lti) {
        interval_sql=db.pool_find_lti_queries[point_type][interval_type].getCopy();
      }
 else {
        interval_sql=db.pool_find_interval_queries[pedge.value_is_id][point_type][interval_type].getCopy();
      }
      int bind_pos=1;
      if (point_type == EPMEM_RANGE_END && interval_type == EPMEM_RANGE_NOW) {
        interval_sql.setLong(bind_pos++,current_episode);
      }
      interval_sql.setLong(bind_pos++,edge_id);
      if (is_lti && interval_type == EPMEM_RANGE_EP) {
        interval_sql.setLong(bind_pos++,promo_time);
      }
      interval_sql.setLong(bind_pos++,current_episode);
      ResultSet results=interval_sql.executeQuery();
      if (results.next()) {
        EpmemInterval interval=new EpmemInterval();
        interval.is_end_point=point_type;
        interval.uedge=uedge;
        interval.time=results.getLong(0 + 1);
        if (is_lti && point_type == EPMEM_RANGE_START && interval_type != EPMEM_RANGE_POINT && interval.time < promo_time) {
          interval.time=promo_time;
        }
        interval.sql=interval_sql;
        interval.sqlResult=results;
        interval_pq.add(interval);
        interval_cleanup.add(interval);
        uedge.intervals++;
        created=true;
      }
 else {
        results.close();
        interval_sql.close();
      }
    }
  }
  if (created) {
    if (is_lti) {
      EpmemInterval start_interval=new EpmemInterval();
      start_interval.uedge=uedge;
      start_interval.is_end_point=EPMEM_RANGE_START;
      start_interval.time=promo_time - 1;
      start_interval.sql=null;
      interval_pq.add(start_interval);
      interval_cleanup.add(start_interval);
    }
    uedge.pedges.add(pedge);
    uedge_cache.put(triple.copyEpmemTriple(),uedge);
  }
 else {
    uedge.pedges.clear();
    uedge.pedges=null;
  }
}
 else {
  EpmemUEdge uedge=uedge_iter;
  uedge.pedges.add(pedge);
  if (uedge.activated && uedge.activation_count == 1) {
    for (    EpmemLiteral lit_iter : pedge.literals) {
      EpmemLiteral literal=lit_iter;
      ByRef<Double> curScoreRef=new ByRef<Double>(current_score);
      ByRef<Long> curCardinalityRef=new ByRef<Long>(current_cardinality);
      changed_score|=epmem_satisfy_literal(literal,triple.parent_n_id,triple.child_n_id,curScoreRef,curCardinalityRef,symbol_node_count,uedge_caches,symbol_num_incoming);
      current_score=curScoreRef.value;
      current_cardinality=curCardinalityRef.value;
    }
  }
}
if (pedge.sql != null) {
  if (pedge.sqlResults == null) {
    ResultSet results=pedge.sql.executeQuery();
    pedge.sqlResults=results;
  }
  if (pedge.sqlResults.next()) {
    if (pedge.sqlResults.getMetaData().getColumnCount() > 2) {
      pedge.time=pedge.sqlResults.getLong(2 + 1);
    }
 else {
      pedge.time=0L;
    }
    pedge_pq.add(pedge);
  }
 else {
    pedge.sqlResults.close();
    pedge.sqlResults=null;
    pedge.sql.close();
    pedge.sql=null;
  }
}
}
next_edge=(pedge_pq.isEmpty() ? after : pedge_pq.peek().time);
while (interval_pq.size() != 0 && interval_pq.peek().time > next_edge && current_episode > after) {
if (logger.isDebugEnabled()) {
  logger.debug(""String_Node_Str"" + current_episode);
}
while (interval_pq.size() != 0 && interval_pq.peek().time >= current_episode) {
  EpmemInterval interval=interval_pq.poll();
  EpmemUEdge uedge=interval.uedge;
  EpmemTriple triple=uedge.triple.copyEpmemTriple();
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (interval.is_end_point != 0 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ triple.parent_n_id+ ""String_Node_Str""+ triple.attribute_s_id+ ""String_Node_Str""+ triple.child_n_id);
  }
  if (interval.is_end_point != 0) {
    uedge.activated=true;
    uedge.activation_count++;
    if (uedge.activation_count == 1) {
      for (      EpmemPEdge pedge_iter : uedge.pedges) {
        EpmemPEdge pedge=pedge_iter;
        for (        EpmemLiteral lit_iter : pedge.literals) {
          EpmemLiteral literal=lit_iter;
          ByRef<Double> curScoreRef=new ByRef<Double>(current_score);
          ByRef<Long> curCardinalityRef=new ByRef<Long>(current_cardinality);
          changed_score|=epmem_satisfy_literal(literal,triple.parent_n_id,triple.child_n_id,curScoreRef,curCardinalityRef,symbol_node_count,uedge_caches,symbol_num_incoming);
          current_score=curScoreRef.value;
          current_cardinality=curCardinalityRef.value;
        }
      }
    }
  }
 else {
    uedge.activated=false;
    uedge.activation_count--;
    for (    EpmemPEdge pedge_iter : uedge.pedges) {
      EpmemPEdge pedge=pedge_iter;
      for (      EpmemLiteral lit_iter : pedge.literals) {
        ByRef<Double> curScore=new ByRef<Double>(current_score);
        ByRef<Long> curCardinality=new ByRef<Long>(current_cardinality);
        changed_score|=epmem_unsatisfy_literal(lit_iter,triple.parent_n_id,triple.child_n_id,curScore,curCardinality,symbol_node_count);
        current_score=curScore.value;
        current_cardinality=curCardinality.value;
      }
    }
  }
  if (interval.sql != null) {
    if (interval.sqlResult == null) {
      interval.sqlResult=interval.sql.executeQuery();
    }
    if (interval.uedge.has_noncurrent && interval.sqlResult.next()) {
      interval.time=interval.sqlResult.getInt(0 + 1);
      interval_pq.add(interval);
    }
 else {
      interval.sqlResult.close();
      interval.sqlResult=null;
      interval.sql.close();
      interval.sql=null;
      uedge.intervals--;
      if (uedge.intervals != 0) {
        interval_cleanup.remove(interval);
      }
 else {
      }
    }
  }
}
next_interval=(interval_pq.isEmpty() ? after : interval_pq.peek().time);
next_episode=(next_edge > next_interval ? next_edge : next_interval);
while (prohibits.size() != 0 && prohibits.get(prohibits.size() - 1) > current_episode) {
  prohibits.remove(prohibits.size() - 1);
}
while (prohibits.size() != 0 && current_episode > next_episode && current_episode == prohibits.get(prohibits.size() - 1)) {
  current_episode--;
  prohibits.remove(prohibits.size() - 1);
}
if (logger.isTraceEnabled()) {
  logger.trace(epmem_print_retrieval_state(literal_cache,pedge_caches,uedge_caches));
}
stats.considered.set(stats.considered.get() + 1);
stats.last_considered.set(stats.last_considered.get() + 1);
trace.startNewLine().print(Category.EPMEM,""String_Node_Str"" + current_episode + ""String_Node_Str""+ current_cardinality+ ""String_Node_Str""+ current_score+ ""String_Node_Str"");
if (current_episode > next_episode && changed_score && (best_episode == EPMEM_MEMID_NONE || current_score > best_score || (do_graph_match && current_score == best_score && !best_graph_matched))) {
  boolean new_king=false;
  if (best_episode == EPMEM_MEMID_NONE || current_score > best_score) {
    best_episode=current_episode;
    best_score=current_score;
    best_cardinality=current_cardinality;
    new_king=true;
  }
  if (current_cardinality == perfect_cardinality) {
    boolean graph_matched=false;
    if (do_graph_match) {
      if (gm_order == DefaultEpisodicMemoryParams.GmOrderingChoices.undefined) {
        Collections.shuffle(gm_ordering,random);
      }
 else       if (gm_order == DefaultEpisodicMemoryParams.GmOrderingChoices.mcv) {
        Collections.sort(gm_ordering,new Comparator<EpmemLiteral>(){
          @Override public int compare(          EpmemLiteral a,          EpmemLiteral b){
            return (a.matches.size() < b.matches.size() ? -1 : 1);
          }
        }
);
      }
      best_bindings.clear();
      @SuppressWarnings(""String_Node_Str"") Map<Long,SymbolImpl>[] bound_nodes=(Map<Long,SymbolImpl>[])new Map[2];
      for (int i=0; i < bound_nodes.length; i++) {
        bound_nodes[i]=new LinkedHashMap<Long,SymbolImpl>();
      }
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
        logger.debug(epmem_print_retrieval_state(literal_cache,pedge_caches,uedge_caches));
      }
      stats.graph_matches.set(stats.graph_matches.get() + 1);
      stats.last_graph_matches.set(stats.last_graph_matches.get() + 1);
      graph_matched=epmem_graph_match(gm_ordering,gm_ordering.listIterator(),best_bindings,bound_nodes,2);
    }
    if (!do_graph_match || graph_matched) {
      best_episode=current_episode;
      best_graph_matched=true;
      current_episode=EPMEM_MEMID_NONE;
      new_king=true;
    }
  }
  if (new_king) {
    trace.startNewLine().print(Category.EPMEM,""String_Node_Str"" + Boolean.toString(current_cardinality == perfect_cardinality) + ""String_Node_Str""+ Boolean.toString(best_graph_matched)+ ""String_Node_Str"");
  }
}
if (current_episode == EPMEM_MEMID_NONE) {
  break;
}
 else {
  current_episode=next_episode;
}
}
}
if (best_episode == EPMEM_MEMID_NONE) {
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_failure,pos_query);
if (neg_query != null) {
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_failure,neg_query);
}
}
 else {
stats.qry_ret.set(best_episode);
stats.qry_card.set(best_cardinality);
SymbolImpl temp_sym;
Map<Long,SymbolImpl> node_map_map=new LinkedHashMap<Long,SymbolImpl>();
Map<Long,SymbolImpl> node_mem_map=new LinkedHashMap<Long,SymbolImpl>();
temp_sym=symbols.createInteger(leaf_literals.size());
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_cue_size,temp_sym);
temp_sym=symbols.createInteger(best_cardinality);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_match_cardinality,temp_sym);
temp_sym=symbols.createDouble(best_score);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_match_score,temp_sym);
temp_sym=symbols.createDouble(best_score / perfect_score);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_normalized_match_score,temp_sym);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_success,pos_query);
if (neg_query != null) {
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_success,neg_query);
}
if (do_graph_match) {
temp_sym=symbols.createInteger((best_graph_matched ? 1 : 0));
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_graph_match,temp_sym);
if (best_graph_matched) {
  @SuppressWarnings(""String_Node_Str"") int levelLocal=epmem_info(state).epmem_result_header.level;
  SymbolImpl mapping=symbols.make_new_identifier('M',level);
  epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_graph_match_mapping,mapping);
  for (  Entry<EpmemLiteral,EpmemNodePair> iter : best_bindings.entrySet()) {
    if (iter.getKey().value_is_id != 0) {
      temp_sym=symbols.make_new_identifier('N',level);
      epmem_buffer_add_wme(meta_wmes,mapping,predefinedSyms.epmem_sym_graph_match_mapping_node,temp_sym);
      epmem_buffer_add_wme(meta_wmes,temp_sym,predefinedSyms.epmem_sym_graph_match_mapping_cue,iter.getKey().value_sym);
      node_map_map.put(iter.getValue().second,temp_sym);
      node_mem_map.put(iter.getValue().second,null);
    }
  }
}
}
if (level > 2) {
epmem_install_memory(state,best_episode,meta_wmes,retrieval_wmes,node_mem_map);
}
if (best_graph_matched) {
for (Entry<Long,SymbolImpl> iter : node_mem_map.entrySet()) {
  SymbolImpl map_iter=node_map_map.get(iter.getKey());
  if (map_iter != null && iter.getValue() != null) {
    epmem_buffer_add_wme(meta_wmes,map_iter,predefinedSyms.epmem_sym_retrieved,iter.getValue());
  }
}
}
}
}
for (EpmemInterval interval : interval_cleanup) {
if (interval.sqlResult != null) {
interval.sqlResult.close();
interval.sqlResult=null;
interval.sql.close();
interval.sql=null;
}
}
for (int type=EPMEM_RIT_STATE_NODE; type <= EPMEM_RIT_STATE_EDGE; type++) {
for (EpmemPEdge pedge : pedge_caches[type].values()) {
if (pedge.sqlResults != null) {
pedge.sqlResults.close();
pedge.sqlResults=null;
pedge.sql.close();
pedge.sql=null;
}
}
}
}","/** 
 * <p> episodic_memory.cpp:3869:void  epmem_process_query( agent *my_agent,  Symbol *state,  Symbol *pos_query,  Symbol *neg_query,  epmem_time_list& prohibits, epmem_time_id before,  epmem_time_id after,  epmem_symbol_set& currents, soar_module::wme_set& cue_wmes,  soar_module::symbol_triple_list& meta_wmes,  soar_module::symbol_triple_list& retrieval_wmes,  int level=3 )
 * @param state
 * @param query
 * @param neg_query
 * @param prohibit
 * @param before
 * @param after
 * @param currents
 * @param cue_wmes
 * @param meta_wmes
 * @param retrieval_wmes
 * @throws SQLException 
 * @throws SoarException 
 */
private void epmem_process_query(IdentifierImpl state,SymbolImpl pos_query,SymbolImpl neg_query,List<Long> prohibits,long before,long after,Set<SymbolImpl> currents,Set<WmeImpl> cue_wmes,List<SymbolTriple> meta_wmes,List<SymbolTriple> retrieval_wmes,int level) throws SQLException, SoarException {
  if (pos_query == null) {
    epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_status,predefinedSyms.epmem_sym_bad_cmd);
    return;
  }
  if (before != EPMEM_MEMID_NONE && after != EPMEM_MEMID_NONE && before <= after) {
    epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_status,predefinedSyms.epmem_sym_bad_cmd);
    return;
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"");
  }
  stats.last_considered.set(0L);
  stats.last_graph_matches.set(0L);
  if (!prohibits.isEmpty()) {
    Collections.sort(prohibits);
  }
  boolean do_graph_match=(params.graph_match.get() == GraphMatchChoices.on);
  GmOrderingChoices gm_order=params.gm_ordering.get();
  Map<WmeImpl,EpmemLiteral> literal_cache=new LinkedHashMap<WmeImpl,EpmemLiteral>();
  @SuppressWarnings(""String_Node_Str"") Map<EpmemTriple,EpmemPEdge>[] pedge_caches=new Map[2];
  pedge_caches[0]=new LinkedHashMap<DefaultEpisodicMemory.EpmemTriple,DefaultEpisodicMemory.EpmemPEdge>();
  pedge_caches[1]=new LinkedHashMap<DefaultEpisodicMemory.EpmemTriple,DefaultEpisodicMemory.EpmemPEdge>();
  @SuppressWarnings(""String_Node_Str"") SortedMap<EpmemTriple,EpmemUEdge> uedge_caches[]=new SortedMap[2];
  uedge_caches[0]=new TreeMap<EpmemTriple,EpmemUEdge>();
  uedge_caches[1]=new TreeMap<EpmemTriple,EpmemUEdge>();
  Set<EpmemInterval> interval_cleanup=new LinkedHashSet<EpmemInterval>();
  EpmemLiteral root_literal=new EpmemLiteral();
  Set<EpmemLiteral> leaf_literals=new LinkedHashSet<EpmemLiteral>();
  PriorityQueue<EpmemPEdge> pedge_pq=new PriorityQueue<EpmemPEdge>(11,new Comparator<EpmemPEdge>(){
    public int compare(    EpmemPEdge a,    EpmemPEdge b){
      if (a.time != b.time) {
        return (a.time < b.time) ? 1 : -1;
      }
 else {
        return (a.triple.compareTo(b.triple));
      }
    }
  }
);
  PriorityQueue<EpmemInterval> interval_pq=new PriorityQueue<EpmemInterval>(11,new Comparator<EpmemInterval>(){
    public int compare(    EpmemInterval a,    EpmemInterval b){
      if (a.time != b.time) {
        return (a.time < b.time) ? 1 : -1;
      }
 else       if (a.is_end_point == b.is_end_point) {
        return (a.uedge.triple.compareTo(b.uedge.triple));
      }
 else {
        return (a.is_end_point == EPMEM_RANGE_START) ? 1 : -1;
      }
    }
  }
);
  Map<SymbolImpl,Integer> symbol_num_incoming=new LinkedHashMap<SymbolImpl,Integer>();
  Map<EpmemSymbolNodePair,Integer> symbol_node_count=new LinkedHashMap<EpmemSymbolNodePair,Integer>();
  long best_episode=EPMEM_MEMID_NONE;
  double best_score=0;
  boolean best_graph_matched=false;
  long best_cardinality=0;
  Map<EpmemLiteral,EpmemNodePair> best_bindings=new LinkedHashMap<EpmemLiteral,EpmemNodePair>();
  double current_score=0;
  long current_cardinality=0;
  LinkedList<EpmemLiteral> gm_ordering=new LinkedList<EpmemLiteral>();
  if (level > 1) {
{
      stats.qry_pos.set(0l);
      stats.qry_neg.set(0l);
      root_literal.id_sym=null;
      root_literal.value_sym=pos_query;
      root_literal.is_neg_q=EPMEM_NODE_POS;
      root_literal.value_is_id=EPMEM_RIT_STATE_EDGE;
      root_literal.is_leaf=false;
      root_literal.is_current=false;
      root_literal.attribute_s_id=EPMEM_NODEID_BAD;
      root_literal.child_n_id=EPMEM_NODEID_ROOT;
      root_literal.weight=0.0;
      root_literal.parents=new LinkedHashSet<EpmemLiteral>();
      root_literal.children=new LinkedHashSet<EpmemLiteral>();
      root_literal.matches=new TreeSet<EpmemNodePair>();
      root_literal.values=new LinkedHashMap<Long,Integer>();
      symbol_num_incoming.put(pos_query,1);
      literal_cache.put(null,root_literal);
      Set<SymbolImpl> visiting=new LinkedHashSet<SymbolImpl>();
      visiting.add(pos_query);
      visiting.add(neg_query);
      for (int query_type=EPMEM_NODE_POS; query_type <= EPMEM_NODE_NEG; query_type++) {
        SymbolImpl query_root=null;
switch (query_type) {
case EPMEM_NODE_POS:
          query_root=pos_query;
        break;
case EPMEM_NODE_NEG:
      query_root=neg_query;
    break;
}
if (query_root == null) {
  continue;
}
List<WmeImpl> children=epmem_get_augs_of_id(query_root,DefaultMarker.create());
for (WmeImpl wme_iter : children) {
  EpmemLiteral child=epmem_build_dnf(wme_iter,literal_cache,leaf_literals,symbol_num_incoming,gm_ordering,currents,query_type,visiting,cue_wmes);
  if (child != null) {
    child.id_sym=pos_query;
    child.parents.add(root_literal);
    root_literal.children.add(child);
  }
}
}
stats.qry_lits.set(stats.qry_pos.get() + stats.qry_neg.get());
}
double perfect_score=0;
int perfect_cardinality=0;
for (EpmemLiteral iter : leaf_literals) {
if (iter.is_neg_q == 0) {
perfect_score+=iter.weight;
perfect_cardinality++;
}
}
if (before == EPMEM_MEMID_NONE) {
before=stats.time.get() - 1;
}
 else {
before=before - 1;
}
long current_episode=before;
long next_episode;
{
EpmemTriple triple=new EpmemTriple(EPMEM_NODEID_BAD,EPMEM_NODEID_BAD,EPMEM_NODEID_ROOT);
EpmemPEdge root_pedge=new EpmemPEdge();
root_pedge.triple=triple.copyEpmemTriple();
root_pedge.value_is_id=EPMEM_RIT_STATE_EDGE;
root_pedge.has_noncurrent=false;
root_pedge.literals=new ConcurrentSkipListSet<EpmemLiteral>();
root_pedge.literals.add(root_literal);
root_pedge.sql=db.pool_dummy.getCopy();
root_pedge.sql.setLong(1,Long.MAX_VALUE);
root_pedge.sqlResults=root_pedge.sql.executeQuery();
root_pedge.time=Long.MAX_VALUE;
pedge_pq.add(root_pedge);
pedge_caches[EPMEM_RIT_STATE_EDGE].put(triple,root_pedge);
EpmemUEdge root_uedge=new EpmemUEdge();
root_uedge.triple=triple.copyEpmemTriple();
root_uedge.value_is_id=EPMEM_RIT_STATE_EDGE;
root_uedge.has_noncurrent=false;
root_uedge.activation_count=0;
root_uedge.pedges=new LinkedHashSet<EpmemPEdge>();
root_uedge.intervals=1;
root_uedge.activated=false;
uedge_caches[EPMEM_RIT_STATE_EDGE].put(triple,root_uedge);
EpmemInterval root_interval=new EpmemInterval();
root_interval.uedge=root_uedge;
root_interval.is_end_point=1;
root_interval.sql=db.pool_dummy.getCopy();
root_interval.sql.setLong(1,before);
root_interval.sqlResult=root_interval.sql.executeQuery();
root_interval.time=before;
interval_pq.add(root_interval);
interval_cleanup.add(root_interval);
}
if (logger.isDebugEnabled()) {
logger.debug(epmem_print_retrieval_state(literal_cache,pedge_caches,uedge_caches));
}
while (pedge_pq.size() != 0 && current_episode > after) {
long next_edge;
long next_interval;
boolean changed_score=false;
next_edge=pedge_pq.peek().time;
while ((pedge_pq.size() != 0) && (pedge_pq.peek().time == next_edge || pedge_pq.peek().time >= current_episode)) {
final EpmemPEdge pedge=pedge_pq.poll();
final EpmemTriple triple=pedge.triple.copyEpmemTriple();
if (pedge.sqlResults.getMetaData().getColumnCount() > 1) {
  triple.child_n_id=pedge.sqlResults.getLong(1 + 1);
}
 else {
  triple.child_n_id=0L;
}
if (logger.isDebugEnabled()) {
  logger.debug(""String_Node_Str"" + triple.parent_n_id + ""String_Node_Str""+ triple.attribute_s_id+ ""String_Node_Str""+ triple.child_n_id);
}
if (pedge.value_is_id != 0) {
  @SuppressWarnings(""String_Node_Str"") boolean created=false;
  for (  EpmemLiteral literal_iter : pedge.literals) {
    EpmemLiteral literal=literal_iter;
    for (    EpmemLiteral child_iter : literal.children) {
      created|=epmem_register_pedges(triple.child_n_id,child_iter,pedge_pq,after,pedge_caches,uedge_caches);
    }
  }
}
Map<EpmemTriple,EpmemUEdge> uedge_cache=uedge_caches[pedge.value_is_id];
EpmemUEdge uedge_iter=uedge_cache.get(triple);
if (uedge_iter == null) {
  EpmemUEdge uedge=new EpmemUEdge();
  uedge.triple=triple.copyEpmemTriple();
  uedge.value_is_id=pedge.value_is_id;
  uedge.has_noncurrent=pedge.has_noncurrent;
  uedge.activation_count=0;
  uedge.pedges=new LinkedHashSet<EpmemPEdge>();
  uedge.intervals=0;
  uedge.activated=false;
  boolean created=false;
  long edge_id=pedge.sqlResults.getLong(0 + 1);
  long promo_time=EPMEM_MEMID_NONE;
  boolean is_lti=(pedge.value_is_id != 0 && pedge.triple.child_n_id != EPMEM_NODEID_BAD && pedge.triple.child_n_id != EPMEM_NODEID_ROOT);
  if (is_lti) {
    db.find_lti_promotion_time.setLong(1,triple.child_n_id);
    ResultSet results=db.find_lti_promotion_time.executeQuery();
    if (results.next()) {
      promo_time=results.getLong(0 + 1);
    }
    results.close();
  }
  for (int interval_type=EPMEM_RANGE_EP; interval_type <= EPMEM_RANGE_POINT; interval_type++) {
    for (int point_type=EPMEM_RANGE_START; point_type <= EPMEM_RANGE_END; point_type++) {
      PreparedStatement interval_sql=null;
      if (is_lti) {
        interval_sql=db.pool_find_lti_queries[point_type][interval_type].getCopy();
      }
 else {
        interval_sql=db.pool_find_interval_queries[pedge.value_is_id][point_type][interval_type].getCopy();
      }
      int bind_pos=1;
      if (point_type == EPMEM_RANGE_END && interval_type == EPMEM_RANGE_NOW) {
        interval_sql.setLong(bind_pos++,current_episode);
      }
      interval_sql.setLong(bind_pos++,edge_id);
      if (is_lti && interval_type == EPMEM_RANGE_EP) {
        interval_sql.setLong(bind_pos++,promo_time);
      }
      interval_sql.setLong(bind_pos++,current_episode);
      ResultSet results=interval_sql.executeQuery();
      if (results.next()) {
        EpmemInterval interval=new EpmemInterval();
        interval.is_end_point=point_type;
        interval.uedge=uedge;
        interval.time=results.getLong(0 + 1);
        if (is_lti && point_type == EPMEM_RANGE_START && interval_type != EPMEM_RANGE_POINT && interval.time < promo_time) {
          interval.time=promo_time - 1;
        }
        interval.sql=interval_sql;
        interval.sqlResult=results;
        interval_pq.add(interval);
        interval_cleanup.add(interval);
        uedge.intervals++;
        created=true;
      }
 else {
        results.close();
        interval_sql.close();
      }
    }
  }
  if (created) {
    if (is_lti) {
      EpmemInterval start_interval=new EpmemInterval();
      start_interval.uedge=uedge;
      start_interval.is_end_point=EPMEM_RANGE_START;
      start_interval.time=promo_time - 1;
      start_interval.sql=null;
      interval_pq.add(start_interval);
      interval_cleanup.add(start_interval);
    }
    uedge.pedges.add(pedge);
    uedge_cache.put(triple.copyEpmemTriple(),uedge);
  }
 else {
    uedge.pedges.clear();
    uedge.pedges=null;
  }
}
 else {
  EpmemUEdge uedge=uedge_iter;
  uedge.pedges.add(pedge);
  if (uedge.activated && uedge.activation_count == 1) {
    for (    EpmemLiteral lit_iter : pedge.literals) {
      EpmemLiteral literal=lit_iter;
      ByRef<Double> curScoreRef=new ByRef<Double>(current_score);
      ByRef<Long> curCardinalityRef=new ByRef<Long>(current_cardinality);
      changed_score|=epmem_satisfy_literal(literal,triple.parent_n_id,triple.child_n_id,curScoreRef,curCardinalityRef,symbol_node_count,uedge_caches,symbol_num_incoming);
      current_score=curScoreRef.value;
      current_cardinality=curCardinalityRef.value;
    }
  }
}
if (pedge.sql != null) {
  if (pedge.sqlResults == null) {
    ResultSet results=pedge.sql.executeQuery();
    pedge.sqlResults=results;
  }
  if (pedge.sqlResults.next()) {
    if (pedge.sqlResults.getMetaData().getColumnCount() > 2) {
      pedge.time=pedge.sqlResults.getLong(2 + 1);
    }
 else {
      pedge.time=0L;
    }
    pedge_pq.add(pedge);
  }
 else {
    pedge.sqlResults.close();
    pedge.sqlResults=null;
    pedge.sql.close();
    pedge.sql=null;
  }
}
}
next_edge=(pedge_pq.isEmpty() ? after : pedge_pq.peek().time);
while (interval_pq.size() != 0 && interval_pq.peek().time > next_edge && current_episode > after) {
if (logger.isDebugEnabled()) {
  logger.debug(""String_Node_Str"" + current_episode);
}
while (interval_pq.size() != 0 && interval_pq.peek().time >= current_episode) {
  EpmemInterval interval=interval_pq.poll();
  EpmemUEdge uedge=interval.uedge;
  EpmemTriple triple=uedge.triple.copyEpmemTriple();
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (interval.is_end_point != 0 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ triple.parent_n_id+ ""String_Node_Str""+ triple.attribute_s_id+ ""String_Node_Str""+ triple.child_n_id);
  }
  if (interval.is_end_point != 0) {
    uedge.activated=true;
    uedge.activation_count++;
    if (uedge.activation_count == 1) {
      for (      EpmemPEdge pedge_iter : uedge.pedges) {
        EpmemPEdge pedge=pedge_iter;
        for (        EpmemLiteral lit_iter : pedge.literals) {
          EpmemLiteral literal=lit_iter;
          ByRef<Double> curScoreRef=new ByRef<Double>(current_score);
          ByRef<Long> curCardinalityRef=new ByRef<Long>(current_cardinality);
          changed_score|=epmem_satisfy_literal(literal,triple.parent_n_id,triple.child_n_id,curScoreRef,curCardinalityRef,symbol_node_count,uedge_caches,symbol_num_incoming);
          current_score=curScoreRef.value;
          current_cardinality=curCardinalityRef.value;
        }
      }
    }
  }
 else {
    uedge.activated=false;
    uedge.activation_count--;
    for (    EpmemPEdge pedge_iter : uedge.pedges) {
      EpmemPEdge pedge=pedge_iter;
      for (      EpmemLiteral lit_iter : pedge.literals) {
        ByRef<Double> curScore=new ByRef<Double>(current_score);
        ByRef<Long> curCardinality=new ByRef<Long>(current_cardinality);
        changed_score|=epmem_unsatisfy_literal(lit_iter,triple.parent_n_id,triple.child_n_id,curScore,curCardinality,symbol_node_count);
        current_score=curScore.value;
        current_cardinality=curCardinality.value;
      }
    }
  }
  if (interval.sql != null) {
    if (interval.sqlResult == null) {
      interval.sqlResult=interval.sql.executeQuery();
    }
    if (interval.uedge.has_noncurrent && interval.sqlResult.next()) {
      interval.time=interval.sqlResult.getInt(0 + 1);
      interval_pq.add(interval);
    }
 else {
      interval.sqlResult.close();
      interval.sqlResult=null;
      interval.sql.close();
      interval.sql=null;
      uedge.intervals--;
      if (uedge.intervals != 0) {
        interval_cleanup.remove(interval);
      }
 else {
      }
    }
  }
}
next_interval=(interval_pq.isEmpty() ? after : interval_pq.peek().time);
next_episode=(next_edge > next_interval ? next_edge : next_interval);
while (prohibits.size() != 0 && prohibits.get(prohibits.size() - 1) > current_episode) {
  prohibits.remove(prohibits.size() - 1);
}
while (prohibits.size() != 0 && current_episode > next_episode && current_episode == prohibits.get(prohibits.size() - 1)) {
  current_episode--;
  prohibits.remove(prohibits.size() - 1);
}
if (logger.isTraceEnabled()) {
  logger.trace(epmem_print_retrieval_state(literal_cache,pedge_caches,uedge_caches));
}
stats.considered.set(stats.considered.get() + 1);
stats.last_considered.set(stats.last_considered.get() + 1);
trace.startNewLine().print(Category.EPMEM,""String_Node_Str"" + current_episode + ""String_Node_Str""+ current_cardinality+ ""String_Node_Str""+ current_score+ ""String_Node_Str"");
if (current_episode > next_episode && changed_score && (best_episode == EPMEM_MEMID_NONE || current_score > best_score || (do_graph_match && current_score == best_score && !best_graph_matched))) {
  boolean new_king=false;
  if (best_episode == EPMEM_MEMID_NONE || current_score > best_score) {
    best_episode=current_episode;
    best_score=current_score;
    best_cardinality=current_cardinality;
    new_king=true;
  }
  if (current_cardinality == perfect_cardinality) {
    boolean graph_matched=false;
    if (do_graph_match) {
      if (gm_order == DefaultEpisodicMemoryParams.GmOrderingChoices.undefined) {
        Collections.shuffle(gm_ordering,random);
      }
 else       if (gm_order == DefaultEpisodicMemoryParams.GmOrderingChoices.mcv) {
        Collections.sort(gm_ordering,new Comparator<EpmemLiteral>(){
          @Override public int compare(          EpmemLiteral a,          EpmemLiteral b){
            return (a.matches.size() < b.matches.size() ? -1 : 1);
          }
        }
);
      }
      best_bindings.clear();
      @SuppressWarnings(""String_Node_Str"") Map<Long,SymbolImpl>[] bound_nodes=(Map<Long,SymbolImpl>[])new Map[2];
      for (int i=0; i < bound_nodes.length; i++) {
        bound_nodes[i]=new LinkedHashMap<Long,SymbolImpl>();
      }
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
        logger.debug(epmem_print_retrieval_state(literal_cache,pedge_caches,uedge_caches));
      }
      stats.graph_matches.set(stats.graph_matches.get() + 1);
      stats.last_graph_matches.set(stats.last_graph_matches.get() + 1);
      graph_matched=epmem_graph_match(gm_ordering,gm_ordering.listIterator(),best_bindings,bound_nodes,2);
    }
    if (!do_graph_match || graph_matched) {
      best_episode=current_episode;
      best_graph_matched=true;
      current_episode=EPMEM_MEMID_NONE;
      new_king=true;
    }
  }
  if (new_king) {
    trace.startNewLine().print(Category.EPMEM,""String_Node_Str"" + Boolean.toString(current_cardinality == perfect_cardinality) + ""String_Node_Str""+ Boolean.toString(best_graph_matched)+ ""String_Node_Str"");
  }
}
if (current_episode == EPMEM_MEMID_NONE) {
  break;
}
 else {
  current_episode=next_episode;
}
}
}
if (best_episode == EPMEM_MEMID_NONE) {
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_failure,pos_query);
if (neg_query != null) {
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_failure,neg_query);
}
}
 else {
stats.qry_ret.set(best_episode);
stats.qry_card.set(best_cardinality);
SymbolImpl temp_sym;
Map<Long,SymbolImpl> node_map_map=new LinkedHashMap<Long,SymbolImpl>();
Map<Long,SymbolImpl> node_mem_map=new LinkedHashMap<Long,SymbolImpl>();
temp_sym=symbols.createInteger(leaf_literals.size());
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_cue_size,temp_sym);
temp_sym=symbols.createInteger(best_cardinality);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_match_cardinality,temp_sym);
temp_sym=symbols.createDouble(best_score);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_match_score,temp_sym);
temp_sym=symbols.createDouble(best_score / perfect_score);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_normalized_match_score,temp_sym);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_success,pos_query);
if (neg_query != null) {
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_success,neg_query);
}
if (do_graph_match) {
temp_sym=symbols.createInteger((best_graph_matched ? 1 : 0));
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_graph_match,temp_sym);
if (best_graph_matched) {
  @SuppressWarnings(""String_Node_Str"") int levelLocal=epmem_info(state).epmem_result_header.level;
  SymbolImpl mapping=symbols.make_new_identifier('M',level);
  epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_graph_match_mapping,mapping);
  for (  Entry<EpmemLiteral,EpmemNodePair> iter : best_bindings.entrySet()) {
    if (iter.getKey().value_is_id != 0) {
      temp_sym=symbols.make_new_identifier('N',level);
      epmem_buffer_add_wme(meta_wmes,mapping,predefinedSyms.epmem_sym_graph_match_mapping_node,temp_sym);
      epmem_buffer_add_wme(meta_wmes,temp_sym,predefinedSyms.epmem_sym_graph_match_mapping_cue,iter.getKey().value_sym);
      node_map_map.put(iter.getValue().second,temp_sym);
      node_mem_map.put(iter.getValue().second,null);
    }
  }
}
}
if (level > 2) {
epmem_install_memory(state,best_episode,meta_wmes,retrieval_wmes,node_mem_map);
}
if (best_graph_matched) {
for (Entry<Long,SymbolImpl> iter : node_mem_map.entrySet()) {
  SymbolImpl map_iter=node_map_map.get(iter.getKey());
  if (map_iter != null && iter.getValue() != null) {
    epmem_buffer_add_wme(meta_wmes,map_iter,predefinedSyms.epmem_sym_retrieved,iter.getValue());
  }
}
}
}
}
for (EpmemInterval interval : interval_cleanup) {
if (interval.sqlResult != null) {
interval.sqlResult.close();
interval.sqlResult=null;
interval.sql.close();
interval.sql=null;
}
}
for (int type=EPMEM_RIT_STATE_NODE; type <= EPMEM_RIT_STATE_EDGE; type++) {
for (EpmemPEdge pedge : pedge_caches[type].values()) {
if (pedge.sqlResults != null) {
pedge.sqlResults.close();
pedge.sqlResults=null;
pedge.sql.close();
pedge.sql=null;
}
}
}
}",0.9999067816359822
12139,"@Test public void testCountEpMem() throws Exception {
}","@Test public void testCountEpMem() throws Exception {
  runTest(""String_Node_Str"",1693);
}",0.7586206896551724
12140,"/** 
 * Private method for epmem_init_db that throws SQLException, IOException so it can wrap in SoarException and throw. <p> episodic_memory.cpp:1458:epmem_init_db
 * @param readonly
 * @throws SoarException
 */
private void epmem_init_db_ex(boolean readonly) throws SQLException, IOException, SoarException {
  if (db != null) {
    return;
  }
  final String jdbcUrl=params.protocol.get() + ""String_Node_Str"" + params.path.get();
  final Connection connection=JdbcTools.connect(params.driver.get(),jdbcUrl);
  final DatabaseMetaData meta=connection.getMetaData();
  params.protocol.set(meta.getDriverName() + ""String_Node_Str"" + meta.getDriverVersion());
  logger.info(""String_Node_Str"" + jdbcUrl + ""String_Node_Str""+ meta.getDriverName()+ ""String_Node_Str""+ meta.getDriverVersion());
  db=new EpisodicMemoryDatabase(params.driver.get(),connection);
  applyDatabasePerformanceOptions();
  epmem_validation++;
  db.structure();
  db.prepare();
  if (!EpisodicMemoryDatabase.IN_MEMORY_PATH.equals(params.path.get())) {
    final ResultSet result=db.get_schema_version.executeQuery();
    try {
      if (result.next()) {
        String schemaVersion=result.getString(1);
        if (!EpisodicMemoryDatabase.EPMEM_SCHEMA_VERSION.equals(schemaVersion)) {
          logger.error(""String_Node_Str"" + schemaVersion);
          params.path.set(EpisodicMemoryDatabase.IN_MEMORY_PATH);
          connection.close();
          db=null;
          epmem_init_db_ex(readonly);
        }
      }
 else {
        if (params.append_database.get() == AppendDatabaseChoices.on) {
          logger.info(""String_Node_Str"");
        }
      }
    }
  finally {
      result.close();
    }
  }
  db.set_schema_version.setString(1,EpisodicMemoryDatabase.EPMEM_SCHEMA_VERSION);
  db.set_schema_version.execute();
  if (params.append_database.get() == AppendDatabaseChoices.off) {
    db.dropEpmemTables();
    db.structure();
    db.prepare();
  }
  epmem_node_mins.clear();
  epmem_node_maxes.clear();
  epmem_node_removals.clear();
  epmem_edge_mins.clear();
  epmem_edge_maxes.clear();
  epmem_edge_removals.clear();
  epmem_id_repository.put(EPMEM_NODEID_ROOT,new LinkedHashMap<Long,LinkedList<EpisodicMemoryIdPair>>());
{
    Set<WmeImpl> wms_temp=Sets.newLinkedHashSet();
    wms_temp.add(null);
    epmem_id_ref_counts.put(EPMEM_NODEID_ROOT,wms_temp);
  }
  stats.time.set(1L);
  stats.next_id.set(1L);
{
    final ByRef<Long> stored_id=ByRef.create(0L);
    if (epmem_get_variable(epmem_variable_key.var_next_id,stored_id)) {
      stats.next_id.set(stored_id.value);
    }
 else {
      epmem_set_variable(epmem_variable_key.var_next_id,stats.next_id.get());
    }
  }
  for (int i=EPMEM_RIT_STATE_NODE; i <= EPMEM_RIT_STATE_EDGE; i++) {
    epmem_rit_state_graph[i].offset.stat=EPMEM_RIT_OFFSET_INIT;
    epmem_rit_state_graph[i].leftroot.stat=0;
    epmem_rit_state_graph[i].rightroot.stat=1;
    epmem_rit_state_graph[i].minstep.stat=Long.MAX_VALUE;
  }
  epmem_rit_state_graph[EPMEM_RIT_STATE_NODE].add_query=db.add_epmem_wmes_constant_range;
  epmem_rit_state_graph[EPMEM_RIT_STATE_EDGE].add_query=db.add_epmem_wmes_identifier_range;
{
    final ByRef<Long> var_val=ByRef.create(0L);
    for (int i=EPMEM_RIT_STATE_NODE; i <= EPMEM_RIT_STATE_EDGE; i++) {
      if (epmem_get_variable(epmem_rit_state_graph[i].offset.var_key,var_val)) {
        epmem_rit_state_graph[i].offset.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].offset.var_key,epmem_rit_state_graph[i].offset.stat);
      }
      if (epmem_get_variable(epmem_rit_state_graph[i].leftroot.var_key,var_val)) {
        epmem_rit_state_graph[i].leftroot.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].leftroot.var_key,epmem_rit_state_graph[i].leftroot.stat);
      }
      if (epmem_get_variable(epmem_rit_state_graph[i].rightroot.var_key,var_val)) {
        epmem_rit_state_graph[i].rightroot.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].rightroot.var_key,epmem_rit_state_graph[i].rightroot.stat);
      }
      if (epmem_get_variable(epmem_rit_state_graph[i].minstep.var_key,var_val)) {
        epmem_rit_state_graph[i].minstep.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].minstep.var_key,epmem_rit_state_graph[i].minstep.stat);
      }
    }
  }
{
    final PreparedStatement temp_q=db.get_max_time;
    final ResultSet rs=temp_q.executeQuery();
    try {
      if (rs.next()) {
        stats.time.set(rs.getLong(0 + 1) + 1);
      }
    }
  finally {
      rs.close();
    }
  }
  long time_max=stats.time.get();
  if (!readonly) {
    long time_last=(time_max - 1);
    final PreparedStatement[] now_select=new PreparedStatement[]{db.now_select_node,db.now_select_edge};
    final PreparedStatement[] now_add=new PreparedStatement[]{db.add_epmem_wmes_constant_point,db.add_epmem_wmes_identifier_point};
    final PreparedStatement[] now_delete=new PreparedStatement[]{db.now_delete_node,db.now_delete_edge};
    for (int i=EPMEM_RIT_STATE_NODE; i <= EPMEM_RIT_STATE_EDGE; i++) {
      final PreparedStatement temp_q=now_add[i];
      temp_q.setLong(2,time_last);
      final PreparedStatement temp_q2=now_select[i];
      final ResultSet rs=temp_q2.executeQuery();
      try {
        while (rs.next()) {
          long range_start=rs.getLong(1 + 1);
          if (range_start == time_last) {
            temp_q.setLong(1,rs.getLong(0 + 1));
            temp_q.executeUpdate();
          }
 else {
            epmem_rit_insert_interval(range_start,time_last,rs.getLong(0 + 1),epmem_rit_state_graph[i]);
          }
        }
      }
  finally {
        rs.close();
      }
      now_delete[i].execute();
    }
  }
{
    initMinMax(time_max,db.minmax_select_node,epmem_node_maxes,epmem_node_mins);
    initMinMax(time_max,db.minmax_select_edge,epmem_edge_maxes,epmem_edge_mins);
  }
{
    long parent_n_id;
    long attributes_s_id;
    long child_n_id;
    long wi_id;
    Map<Long,LinkedList<EpisodicMemoryIdPair>> hp;
    LinkedList<EpisodicMemoryIdPair> ip;
    PreparedStatement temp_q=db.edge_unique_select;
    final ResultSet rs=temp_q.executeQuery();
    try {
      while (rs.next()) {
        parent_n_id=rs.getLong(0 + 1);
        attributes_s_id=rs.getLong(1 + 1);
        child_n_id=rs.getLong(2 + 1);
        wi_id=rs.getLong(3 + 1);
        hp=epmem_id_repository.get(parent_n_id);
        if (hp == null) {
          hp=Maps.newLinkedHashMap();
          epmem_id_repository.put(parent_n_id,hp);
        }
        ip=hp.get(attributes_s_id);
        if (ip == null) {
          ip=Lists.newLinkedList();
          hp.put(attributes_s_id,ip);
        }
        ip.addFirst(new EpisodicMemoryIdPair(child_n_id,wi_id));
        hp=epmem_id_repository.get(child_n_id);
        if (hp == null) {
          hp=Maps.newLinkedHashMap();
          epmem_id_repository.put(child_n_id,hp);
        }
      }
    }
  finally {
      rs.close();
    }
  }
{
    epmem_wme_adds.add(decider.top_state);
  }
  decider.top_goal.epmem_id=EPMEM_NODEID_ROOT;
  decider.top_goal.epmem_valid=epmem_validation;
  ResultSet r=db.database_version.executeQuery();
  try {
    stats.db_version.set(r.getString(1));
  }
  finally {
    r.close();
  }
  if (params.lazy_commit.get() == LazyCommitChoices.on) {
    db.begin.executeUpdate();
  }
}","/** 
 * Private method for epmem_init_db that throws SQLException, IOException so it can wrap in SoarException and throw. <p> episodic_memory.cpp:1458:epmem_init_db
 * @param readonly
 * @throws SoarException
 */
private void epmem_init_db_ex(boolean readonly) throws SQLException, IOException, SoarException {
  if (db != null) {
    return;
  }
  final String jdbcUrl=params.protocol.get() + ""String_Node_Str"" + params.path.get();
  final Connection connection=JdbcTools.connect(params.driver.get(),jdbcUrl);
  final DatabaseMetaData meta=connection.getMetaData();
  logger.info(""String_Node_Str"" + jdbcUrl + ""String_Node_Str""+ meta.getDriverName()+ ""String_Node_Str""+ meta.getDriverVersion());
  db=new EpisodicMemoryDatabase(params.driver.get(),connection);
  applyDatabasePerformanceOptions();
  epmem_validation++;
  db.structure();
  db.prepare();
  if (!EpisodicMemoryDatabase.IN_MEMORY_PATH.equals(params.path.get())) {
    final ResultSet result=db.get_schema_version.executeQuery();
    try {
      if (result.next()) {
        String schemaVersion=result.getString(1);
        if (!EpisodicMemoryDatabase.EPMEM_SCHEMA_VERSION.equals(schemaVersion)) {
          logger.error(""String_Node_Str"" + schemaVersion);
          params.path.set(EpisodicMemoryDatabase.IN_MEMORY_PATH);
          connection.close();
          db=null;
          epmem_init_db_ex(readonly);
        }
      }
 else {
        if (params.append_database.get() == AppendDatabaseChoices.on) {
          logger.info(""String_Node_Str"");
        }
      }
    }
  finally {
      result.close();
    }
  }
  db.set_schema_version.setString(1,EpisodicMemoryDatabase.EPMEM_SCHEMA_VERSION);
  db.set_schema_version.execute();
  if (params.append_database.get() == AppendDatabaseChoices.off) {
    db.dropEpmemTables();
    db.structure();
    db.prepare();
  }
  epmem_node_mins.clear();
  epmem_node_maxes.clear();
  epmem_node_removals.clear();
  epmem_edge_mins.clear();
  epmem_edge_maxes.clear();
  epmem_edge_removals.clear();
  epmem_id_repository.put(EPMEM_NODEID_ROOT,new LinkedHashMap<Long,LinkedList<EpisodicMemoryIdPair>>());
{
    Set<WmeImpl> wms_temp=Sets.newLinkedHashSet();
    wms_temp.add(null);
    epmem_id_ref_counts.put(EPMEM_NODEID_ROOT,wms_temp);
  }
  stats.time.set(1L);
  stats.next_id.set(1L);
{
    final ByRef<Long> stored_id=ByRef.create(0L);
    if (epmem_get_variable(epmem_variable_key.var_next_id,stored_id)) {
      stats.next_id.set(stored_id.value);
    }
 else {
      epmem_set_variable(epmem_variable_key.var_next_id,stats.next_id.get());
    }
  }
  for (int i=EPMEM_RIT_STATE_NODE; i <= EPMEM_RIT_STATE_EDGE; i++) {
    epmem_rit_state_graph[i].offset.stat=EPMEM_RIT_OFFSET_INIT;
    epmem_rit_state_graph[i].leftroot.stat=0;
    epmem_rit_state_graph[i].rightroot.stat=1;
    epmem_rit_state_graph[i].minstep.stat=Long.MAX_VALUE;
  }
  epmem_rit_state_graph[EPMEM_RIT_STATE_NODE].add_query=db.add_epmem_wmes_constant_range;
  epmem_rit_state_graph[EPMEM_RIT_STATE_EDGE].add_query=db.add_epmem_wmes_identifier_range;
{
    final ByRef<Long> var_val=ByRef.create(0L);
    for (int i=EPMEM_RIT_STATE_NODE; i <= EPMEM_RIT_STATE_EDGE; i++) {
      if (epmem_get_variable(epmem_rit_state_graph[i].offset.var_key,var_val)) {
        epmem_rit_state_graph[i].offset.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].offset.var_key,epmem_rit_state_graph[i].offset.stat);
      }
      if (epmem_get_variable(epmem_rit_state_graph[i].leftroot.var_key,var_val)) {
        epmem_rit_state_graph[i].leftroot.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].leftroot.var_key,epmem_rit_state_graph[i].leftroot.stat);
      }
      if (epmem_get_variable(epmem_rit_state_graph[i].rightroot.var_key,var_val)) {
        epmem_rit_state_graph[i].rightroot.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].rightroot.var_key,epmem_rit_state_graph[i].rightroot.stat);
      }
      if (epmem_get_variable(epmem_rit_state_graph[i].minstep.var_key,var_val)) {
        epmem_rit_state_graph[i].minstep.stat=var_val.value;
      }
 else {
        epmem_set_variable(epmem_rit_state_graph[i].minstep.var_key,epmem_rit_state_graph[i].minstep.stat);
      }
    }
  }
{
    final PreparedStatement temp_q=db.get_max_time;
    final ResultSet rs=temp_q.executeQuery();
    try {
      if (rs.next()) {
        stats.time.set(rs.getLong(0 + 1) + 1);
      }
    }
  finally {
      rs.close();
    }
  }
  long time_max=stats.time.get();
  if (!readonly) {
    long time_last=(time_max - 1);
    final PreparedStatement[] now_select=new PreparedStatement[]{db.now_select_node,db.now_select_edge};
    final PreparedStatement[] now_add=new PreparedStatement[]{db.add_epmem_wmes_constant_point,db.add_epmem_wmes_identifier_point};
    final PreparedStatement[] now_delete=new PreparedStatement[]{db.now_delete_node,db.now_delete_edge};
    for (int i=EPMEM_RIT_STATE_NODE; i <= EPMEM_RIT_STATE_EDGE; i++) {
      final PreparedStatement temp_q=now_add[i];
      temp_q.setLong(2,time_last);
      final PreparedStatement temp_q2=now_select[i];
      final ResultSet rs=temp_q2.executeQuery();
      try {
        while (rs.next()) {
          long range_start=rs.getLong(1 + 1);
          if (range_start == time_last) {
            temp_q.setLong(1,rs.getLong(0 + 1));
            temp_q.executeUpdate();
          }
 else {
            epmem_rit_insert_interval(range_start,time_last,rs.getLong(0 + 1),epmem_rit_state_graph[i]);
          }
        }
      }
  finally {
        rs.close();
      }
      now_delete[i].execute();
    }
  }
{
    initMinMax(time_max,db.minmax_select_node,epmem_node_maxes,epmem_node_mins);
    initMinMax(time_max,db.minmax_select_edge,epmem_edge_maxes,epmem_edge_mins);
  }
{
    long parent_n_id;
    long attributes_s_id;
    long child_n_id;
    long wi_id;
    Map<Long,LinkedList<EpisodicMemoryIdPair>> hp;
    LinkedList<EpisodicMemoryIdPair> ip;
    PreparedStatement temp_q=db.edge_unique_select;
    final ResultSet rs=temp_q.executeQuery();
    try {
      while (rs.next()) {
        parent_n_id=rs.getLong(0 + 1);
        attributes_s_id=rs.getLong(1 + 1);
        child_n_id=rs.getLong(2 + 1);
        wi_id=rs.getLong(3 + 1);
        hp=epmem_id_repository.get(parent_n_id);
        if (hp == null) {
          hp=Maps.newLinkedHashMap();
          epmem_id_repository.put(parent_n_id,hp);
        }
        ip=hp.get(attributes_s_id);
        if (ip == null) {
          ip=Lists.newLinkedList();
          hp.put(attributes_s_id,ip);
        }
        ip.addFirst(new EpisodicMemoryIdPair(child_n_id,wi_id));
        hp=epmem_id_repository.get(child_n_id);
        if (hp == null) {
          hp=Maps.newLinkedHashMap();
          epmem_id_repository.put(child_n_id,hp);
        }
      }
    }
  finally {
      rs.close();
    }
  }
{
    epmem_wme_adds.add(decider.top_state);
  }
  decider.top_goal.epmem_id=EPMEM_NODEID_ROOT;
  decider.top_goal.epmem_valid=epmem_validation;
  ResultSet r=db.database_version.executeQuery();
  try {
    stats.db_version.set(r.getString(1));
  }
  finally {
    r.close();
  }
  if (params.lazy_commit.get() == LazyCommitChoices.on) {
    db.begin.executeUpdate();
  }
}",0.9937735203557988
12141,"private String doEpmem(){
  final StringWriter sw=new StringWriter();
  final PrintWriter pw=new PrintWriter(sw);
  final DefaultEpisodicMemoryParams p=epmem.getParams();
  pw.printf(PrintHelper.generateHeader(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.learning.get(),40));
  pw.printf(PrintHelper.generateSection(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.phase.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.trigger.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.force.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.exclusions,40));
  pw.printf(PrintHelper.generateSection(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.driver,40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.protocol.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.append_database.get(),40));
  String database=""String_Node_Str"";
  String path=""String_Node_Str"";
  if (!p.path.get().equals(EpisodicMemoryDatabase.IN_MEMORY_PATH)) {
    database=""String_Node_Str"";
    path=p.path.get();
  }
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",database,40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",path,40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.lazy_commit.get(),40));
  pw.printf(PrintHelper.generateSection(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.balance.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.graph_match.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.gm_ordering.get(),40));
  pw.printf(PrintHelper.generateSection(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.page_size.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.cache_size.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.optimization.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",""String_Node_Str"",40));
  pw.printf(PrintHelper.generateSection(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.merge.get(),40));
  pw.flush();
  return sw.toString();
}","private String doEpmem(){
  final StringWriter sw=new StringWriter();
  final PrintWriter pw=new PrintWriter(sw);
  final DefaultEpisodicMemoryParams p=epmem.getParams();
  pw.printf(PrintHelper.generateHeader(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.learning.get(),40));
  pw.printf(PrintHelper.generateSection(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.phase.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.trigger.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.force.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.exclusions,40));
  pw.printf(PrintHelper.generateSection(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.driver,40));
  String nativeOrPure=null;
  try {
    EpisodicMemoryDatabase db=epmem.getDatabase();
    if (db != null) {
      nativeOrPure=db.getConnection().getMetaData().getDriverVersion();
    }
 else {
      nativeOrPure=""String_Node_Str"";
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",nativeOrPure,40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.protocol.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.append_database.get(),40));
  String database=""String_Node_Str"";
  String path=""String_Node_Str"";
  if (!p.path.get().equals(EpisodicMemoryDatabase.IN_MEMORY_PATH)) {
    database=""String_Node_Str"";
    path=p.path.get();
  }
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",database,40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",path,40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.lazy_commit.get(),40));
  pw.printf(PrintHelper.generateSection(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.balance.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.graph_match.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.gm_ordering.get(),40));
  pw.printf(PrintHelper.generateSection(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.page_size.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.cache_size.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.optimization.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",""String_Node_Str"",40));
  pw.printf(PrintHelper.generateSection(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.merge.get(),40));
  pw.flush();
  return sw.toString();
}",0.9215044971381848
12142,"/** 
 * Opens the SQLite database and performs all initialization required for the current mode The readonly param should only be used in experimentation where you don't want to alter previous database state. <p> semantic_memory.cpp:1952:smem_init_db
 * @param readonly
 * @throws SoarException
 * @throws SQLException
 * @throws IOException
 */
void smem_init_db(boolean readonly) throws SoarException, SQLException, IOException {
  if (db != null) {
    return;
  }
  final String jdbcUrl=params.protocol.get() + ""String_Node_Str"" + params.path.get();
  final Connection connection=JdbcTools.connect(params.driver.get(),jdbcUrl);
  final DatabaseMetaData meta=connection.getMetaData();
  params.protocol.set(meta.getDriverName() + ""String_Node_Str"" + meta.getDriverVersion());
  logger.info(""String_Node_Str"" + jdbcUrl + ""String_Node_Str""+ meta.getDriverName()+ ""String_Node_Str""+ meta.getDriverVersion());
  if (params.path.get().equals(SemanticMemoryDatabase.IN_MEMORY_PATH)) {
    trace.print(Category.SMEM,""String_Node_Str"");
  }
 else {
    trace.print(Category.SMEM,""String_Node_Str"",params.path.get());
  }
  db=new SemanticMemoryDatabase(params.driver.get(),connection);
  applyDatabasePerformanceOptions();
  smem_validation++;
  final boolean tabula_rasa=db.structure();
  db.prepare();
  if (!SemanticMemoryDatabase.IN_MEMORY_PATH.equals(params.path.get())) {
    final ResultSet result=db.get_schema_version.executeQuery();
    try {
      if (result.next()) {
        String schemaVersion=result.getString(1);
        if (!SemanticMemoryDatabase.SMEM_SCHEMA_VERSION.equals(schemaVersion)) {
          logger.error(""String_Node_Str"" + schemaVersion);
          params.path.set(SemanticMemoryDatabase.IN_MEMORY_PATH);
          connection.close();
          db=null;
          smem_init_db(readonly);
        }
      }
 else {
        if (params.append_db.get() == AppendDatabaseChoices.on) {
          logger.info(""String_Node_Str"");
        }
      }
    }
  finally {
      result.close();
    }
  }
  db.set_schema_version.setString(1,SemanticMemoryDatabase.SMEM_SCHEMA_VERSION);
  db.set_schema_version.execute();
  if (params.append_db.get() == AppendDatabaseChoices.off) {
    db.dropSmemTables();
    db.structure();
    db.prepare();
  }
  if (tabula_rasa) {
    db.begin.executeUpdate();
{
      smem_max_cycle=1;
      smem_variable_create(smem_variable_key.var_max_cycle,smem_max_cycle);
      stats.nodes.set(0L);
      smem_variable_create(smem_variable_key.var_num_nodes,stats.nodes.get());
      stats.edges.set(0L);
      smem_variable_create(smem_variable_key.var_num_edges,stats.edges.get());
      smem_variable_create(smem_variable_key.var_act_thresh,params.thresh.get());
      smem_variable_create(smem_variable_key.var_act_mode,params.activation_mode.get().ordinal());
    }
    db.commit.executeUpdate();
  }
 else {
    final ByRef<Long> tempMaxCycle=ByRef.create(smem_max_cycle);
    smem_variable_get(smem_variable_key.var_max_cycle,tempMaxCycle);
    smem_max_cycle=tempMaxCycle.value;
    final ByRef<Long> temp=ByRef.create(0L);
    smem_variable_get(smem_variable_key.var_act_thresh,temp);
    params.thresh.set(temp.value);
    smem_variable_get(smem_variable_key.var_num_nodes,temp);
    stats.nodes.set(temp.value);
    smem_variable_get(smem_variable_key.var_num_edges,temp);
    stats.edges.set(temp.value);
    smem_variable_get(smem_variable_key.var_act_mode,temp);
    params.activation_mode.set(ActivationChoices.values()[Integer.parseInt(temp.value.toString())]);
  }
  smem_reset_id_counters();
  if (params.lazy_commit.get() == LazyCommitChoices.on) {
    db.begin.executeUpdate();
  }
}","/** 
 * Opens the SQLite database and performs all initialization required for the current mode The readonly param should only be used in experimentation where you don't want to alter previous database state. <p> semantic_memory.cpp:1952:smem_init_db
 * @param readonly
 * @throws SoarException
 * @throws SQLException
 * @throws IOException
 */
void smem_init_db(boolean readonly) throws SoarException, SQLException, IOException {
  if (db != null) {
    return;
  }
  final String jdbcUrl=params.protocol.get() + ""String_Node_Str"" + params.path.get();
  final Connection connection=JdbcTools.connect(params.driver.get(),jdbcUrl);
  final DatabaseMetaData meta=connection.getMetaData();
  logger.info(""String_Node_Str"" + jdbcUrl + ""String_Node_Str""+ meta.getDriverName()+ ""String_Node_Str""+ meta.getDriverVersion());
  if (params.path.get().equals(SemanticMemoryDatabase.IN_MEMORY_PATH)) {
    trace.print(Category.SMEM,""String_Node_Str"");
  }
 else {
    trace.print(Category.SMEM,""String_Node_Str"",params.path.get());
  }
  db=new SemanticMemoryDatabase(params.driver.get(),connection);
  applyDatabasePerformanceOptions();
  smem_validation++;
  final boolean tabula_rasa=db.structure();
  db.prepare();
  if (!SemanticMemoryDatabase.IN_MEMORY_PATH.equals(params.path.get())) {
    final ResultSet result=db.get_schema_version.executeQuery();
    try {
      if (result.next()) {
        String schemaVersion=result.getString(1);
        if (!SemanticMemoryDatabase.SMEM_SCHEMA_VERSION.equals(schemaVersion)) {
          logger.error(""String_Node_Str"" + schemaVersion);
          params.path.set(SemanticMemoryDatabase.IN_MEMORY_PATH);
          connection.close();
          db=null;
          smem_init_db(readonly);
        }
      }
 else {
        if (params.append_db.get() == AppendDatabaseChoices.on) {
          logger.info(""String_Node_Str"");
        }
      }
    }
  finally {
      result.close();
    }
  }
  db.set_schema_version.setString(1,SemanticMemoryDatabase.SMEM_SCHEMA_VERSION);
  db.set_schema_version.execute();
  if (params.append_db.get() == AppendDatabaseChoices.off) {
    db.dropSmemTables();
    db.structure();
    db.prepare();
  }
  if (tabula_rasa) {
    db.begin.executeUpdate();
{
      smem_max_cycle=1;
      smem_variable_create(smem_variable_key.var_max_cycle,smem_max_cycle);
      stats.nodes.set(0L);
      smem_variable_create(smem_variable_key.var_num_nodes,stats.nodes.get());
      stats.edges.set(0L);
      smem_variable_create(smem_variable_key.var_num_edges,stats.edges.get());
      smem_variable_create(smem_variable_key.var_act_thresh,params.thresh.get());
      smem_variable_create(smem_variable_key.var_act_mode,params.activation_mode.get().ordinal());
    }
    db.commit.executeUpdate();
  }
 else {
    final ByRef<Long> tempMaxCycle=ByRef.create(smem_max_cycle);
    smem_variable_get(smem_variable_key.var_max_cycle,tempMaxCycle);
    smem_max_cycle=tempMaxCycle.value;
    final ByRef<Long> temp=ByRef.create(0L);
    smem_variable_get(smem_variable_key.var_act_thresh,temp);
    params.thresh.set(temp.value);
    smem_variable_get(smem_variable_key.var_num_nodes,temp);
    stats.nodes.set(temp.value);
    smem_variable_get(smem_variable_key.var_num_edges,temp);
    stats.edges.set(temp.value);
    smem_variable_get(smem_variable_key.var_act_mode,temp);
    params.activation_mode.set(ActivationChoices.values()[Integer.parseInt(temp.value.toString())]);
  }
  smem_reset_id_counters();
  if (params.lazy_commit.get() == LazyCommitChoices.on) {
    db.begin.executeUpdate();
  }
}",0.9873558427122412
12143,"private String doSmem(){
  final StringWriter sw=new StringWriter();
  final PrintWriter pw=new PrintWriter(sw);
  final DefaultSemanticMemoryParams p=smem.getParams();
  pw.printf(PrintHelper.generateHeader(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.learning.get(),40));
  pw.printf(PrintHelper.generateSection(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.driver.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.protocol.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.append_db.get(),40));
  String database=""String_Node_Str"";
  String path=""String_Node_Str"";
  if (!p.path.get().equals(SemanticMemoryDatabase.IN_MEMORY_PATH)) {
    database=""String_Node_Str"";
    path=p.path.get();
  }
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",database,40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",path,40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.lazy_commit.get(),40));
  pw.printf(PrintHelper.generateSection(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.activation_mode.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.activate_on_query.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.base_decay.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.base_update.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.base_incremental_threshes.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.thresh.get(),40));
  pw.printf(PrintHelper.generateSection(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.page_size.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.cache_size.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.optimization.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",""String_Node_Str"",40));
  pw.printf(PrintHelper.generateSection(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.merge.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.mirroring.get(),40));
  pw.flush();
  return sw.toString();
}","private String doSmem(){
  final StringWriter sw=new StringWriter();
  final PrintWriter pw=new PrintWriter(sw);
  final DefaultSemanticMemoryParams p=smem.getParams();
  pw.printf(PrintHelper.generateHeader(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.learning.get(),40));
  pw.printf(PrintHelper.generateSection(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.driver.get(),40));
  String nativeOrPure=null;
  try {
    SemanticMemoryDatabase db=smem.getDatabase();
    if (db != null) {
      nativeOrPure=db.getConnection().getMetaData().getDriverVersion();
    }
 else {
      nativeOrPure=""String_Node_Str"";
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",nativeOrPure,40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.protocol.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.append_db.get(),40));
  String database=""String_Node_Str"";
  String path=""String_Node_Str"";
  if (!p.path.get().equals(SemanticMemoryDatabase.IN_MEMORY_PATH)) {
    database=""String_Node_Str"";
    path=p.path.get();
  }
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",database,40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",path,40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.lazy_commit.get(),40));
  pw.printf(PrintHelper.generateSection(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.activation_mode.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.activate_on_query.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.base_decay.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.base_update.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.base_incremental_threshes.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.thresh.get(),40));
  pw.printf(PrintHelper.generateSection(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.page_size.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.cache_size.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.optimization.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",""String_Node_Str"",40));
  pw.printf(PrintHelper.generateSection(""String_Node_Str"",40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.merge.get(),40));
  pw.printf(PrintHelper.generateItem(""String_Node_Str"",p.mirroring.get(),40));
  pw.flush();
  return sw.toString();
}",0.9209494324045407
12144,"/** 
 * This runs a test.  This assume we're already in the child JVM or at least are only ever running one test.
 * @param testRunners All the tests
 * @param testCategories All the test categories
 * @return Whether running the tests was successful or not
 */
private int runTest(TestRunner testRunner){
  Test test=testRunner.getTest();
  TestSettings settings=test.getTestSettings();
  if (!singleTest) {
    out.println(""String_Node_Str"" + test.getTestName());
    out.flush();
  }
  Table table=new Table();
  for (int k=0; k < 14; k++) {
    Row row=new Row();
switch (k) {
case 0:
      row.add(new Cell(test.getTestName()));
    row.add(new Cell(""String_Node_Str""));
  row.add(new Cell(""String_Node_Str"" + csoarTestFactory.getLabel()));
break;
case 1:
row.add(new Cell(""String_Node_Str""));
break;
case 2:
row.add(new Cell(""String_Node_Str""));
break;
case 3:
row.add(new Cell(""String_Node_Str""));
break;
case 4:
row.add(new Cell(""String_Node_Str""));
break;
case 5:
row.add(new Cell(""String_Node_Str""));
break;
case 6:
row.add(new Cell(""String_Node_Str""));
break;
case 7:
row.add(new Cell(""String_Node_Str""));
break;
case 8:
row.add(new Cell(""String_Node_Str""));
break;
case 9:
row.add(new Cell(""String_Node_Str""));
break;
case 10:
row.add(new Cell(""String_Node_Str""));
break;
case 11:
row.add(new Cell(""String_Node_Str""));
break;
case 12:
row.add(new Cell(""String_Node_Str""));
break;
case 13:
row.add(new Cell(""String_Node_Str""));
break;
}
table.addRow(row);
}
int column=2 - 1;
if (settings.isJSoarEnabled()) {
out.println(""String_Node_Str"");
out.flush();
column=2 - 1;
}
 else if (settings.isCSoarEnabled()) {
out.println(""String_Node_Str"" + csoarTestFactory.getLabel() + ""String_Node_Str"");
out.flush();
column=3 - 1;
}
try {
testRunner.runTestsForAverage(settings);
}
 catch (SoarException e) {
out.println(""String_Node_Str"" + e.getMessage());
return EXIT_FAILURE;
}
table.setOrAddValueAtLocation(new Double(testRunner.getTotalCPUTime()).toString(),2 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getAverageCPUTime()).toString(),3 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getMedianCPUTime()).toString(),4 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getTotalKernelTime()).toString(),5 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getAverageKernelTime()).toString(),6 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getMedianKernelTime()).toString(),7 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getTotalDecisionCycles()).toString(),8 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getAverageDecisionCycles()).toString(),9 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getMedianDecisionCycles()).toString(),10 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getTotalMemoryLoad() / 1000.0 / 1000.0).toString(),11 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getAverageMemoryLoad() / 1000.0 / 1000.0).toString(),12 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getMedianMemoryLoad() / 1000.0 / 1000.0).toString(),13 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getMemoryLoadDeviation() / 1000.0 / 1000.0).toString(),14 - 1,column);
if (settings.getCSVDirectory().length() != 0) {
String csvDirectoryString=test.getTestSettings().getCSVDirectory();
String testNameWithoutSpaces=test.getTestName().replaceAll(""String_Node_Str"",""String_Node_Str"");
String testDirectoryString=csvDirectoryString + ""String_Node_Str"" + testNameWithoutSpaces;
String categoryDirectoryString=null;
if (settings.isJSoarEnabled()) {
categoryDirectoryString=testDirectoryString + ""String_Node_Str"";
}
 else {
categoryDirectoryString=testDirectoryString + ""String_Node_Str"";
if (csoarTestFactory.getLabel().length() != 0) {
categoryDirectoryString+=""String_Node_Str"";
categoryDirectoryString+=csoarTestFactory.getLabel().replaceAll(""String_Node_Str"",""String_Node_Str"");
}
}
String finalPathDirectoryString=categoryDirectoryString;
File finalPathDirectory=new File(finalPathDirectoryString);
if (!finalPathDirectory.exists()) {
finalPathDirectory.mkdirs();
}
String finalTestName=testNameWithoutSpaces;
if (test.getTestSettings().getDecisionCycles().get(0) != 0) {
finalTestName+=""String_Node_Str"" + test.getTestSettings().getDecisionCycles().get(0);
}
 else {
finalTestName+=""String_Node_Str"";
}
if (runNumber != -1) {
finalTestName+=""String_Node_Str"" + runNumber;
}
table.writeToCSV(finalPathDirectoryString + ""String_Node_Str"" + finalTestName+ ""String_Node_Str"");
if (outputToSummaryFile) {
table.writeToCSV(settings.getCSVDirectory() + ""String_Node_Str"" + settings.getSummaryFile(),true);
}
}
out.print(""String_Node_Str"");
out.flush();
return NON_EXIT;
}","/** 
 * This runs a test.  This assume we're already in the child JVM or at least are only ever running one test.
 * @param testRunners All the tests
 * @param testCategories All the test categories
 * @return Whether running the tests was successful or not
 */
private int runTest(TestRunner testRunner){
  Test test=testRunner.getTest();
  TestSettings settings=test.getTestSettings();
  if (!singleTest) {
    out.println(""String_Node_Str"" + test.getTestName());
    out.flush();
  }
  Table table=new Table();
  for (int k=0; k < 14; k++) {
    Row row=new Row();
switch (k) {
case 0:
      row.add(new Cell(test.getTestName()));
    row.add(new Cell(""String_Node_Str""));
  row.add(new Cell(""String_Node_Str"" + csoarTestFactory.getLabel()));
break;
case 1:
row.add(new Cell(""String_Node_Str""));
break;
case 2:
row.add(new Cell(""String_Node_Str""));
break;
case 3:
row.add(new Cell(""String_Node_Str""));
break;
case 4:
row.add(new Cell(""String_Node_Str""));
break;
case 5:
row.add(new Cell(""String_Node_Str""));
break;
case 6:
row.add(new Cell(""String_Node_Str""));
break;
case 7:
row.add(new Cell(""String_Node_Str""));
break;
case 8:
row.add(new Cell(""String_Node_Str""));
break;
case 9:
row.add(new Cell(""String_Node_Str""));
break;
case 10:
row.add(new Cell(""String_Node_Str""));
break;
case 11:
row.add(new Cell(""String_Node_Str""));
break;
case 12:
row.add(new Cell(""String_Node_Str""));
break;
case 13:
row.add(new Cell(""String_Node_Str""));
break;
}
table.addRow(row);
}
int column=2 - 1;
if (settings.isJSoarEnabled()) {
out.println(""String_Node_Str"");
out.flush();
column=2 - 1;
}
 else if (settings.isCSoarEnabled()) {
out.println(""String_Node_Str"" + csoarTestFactory.getLabel() + ""String_Node_Str"");
out.flush();
column=3 - 1;
}
try {
testRunner.runTestsForAverage(settings);
}
 catch (SoarException e) {
out.println(""String_Node_Str"" + e.getMessage());
return EXIT_FAILURE;
}
catch (RuntimeException e) {
if (e.getMessage() != null) {
String message=e.getMessage();
if (message.equals(""String_Node_Str"") && settings.getCSoarVersions().size() > 0) {
message+=""String_Node_Str"" + settings.getCSoarVersions().get(0);
}
out.println(""String_Node_Str"" + message);
}
 else {
out.println(""String_Node_Str"");
}
return EXIT_FAILURE;
}
table.setOrAddValueAtLocation(new Double(testRunner.getTotalCPUTime()).toString(),2 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getAverageCPUTime()).toString(),3 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getMedianCPUTime()).toString(),4 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getTotalKernelTime()).toString(),5 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getAverageKernelTime()).toString(),6 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getMedianKernelTime()).toString(),7 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getTotalDecisionCycles()).toString(),8 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getAverageDecisionCycles()).toString(),9 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getMedianDecisionCycles()).toString(),10 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getTotalMemoryLoad() / 1000.0 / 1000.0).toString(),11 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getAverageMemoryLoad() / 1000.0 / 1000.0).toString(),12 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getMedianMemoryLoad() / 1000.0 / 1000.0).toString(),13 - 1,column);
table.setOrAddValueAtLocation(new Double(testRunner.getMemoryLoadDeviation() / 1000.0 / 1000.0).toString(),14 - 1,column);
if (settings.getCSVDirectory().length() != 0) {
String csvDirectoryString=test.getTestSettings().getCSVDirectory();
String testNameWithoutSpaces=test.getTestName().replaceAll(""String_Node_Str"",""String_Node_Str"");
String testDirectoryString=csvDirectoryString + ""String_Node_Str"" + testNameWithoutSpaces;
String categoryDirectoryString=null;
if (settings.isJSoarEnabled()) {
categoryDirectoryString=testDirectoryString + ""String_Node_Str"";
}
 else {
categoryDirectoryString=testDirectoryString + ""String_Node_Str"";
if (csoarTestFactory.getLabel().length() != 0) {
categoryDirectoryString+=""String_Node_Str"";
categoryDirectoryString+=csoarTestFactory.getLabel().replaceAll(""String_Node_Str"",""String_Node_Str"");
}
}
String finalPathDirectoryString=categoryDirectoryString;
File finalPathDirectory=new File(finalPathDirectoryString);
if (!finalPathDirectory.exists()) {
finalPathDirectory.mkdirs();
}
String finalTestName=testNameWithoutSpaces;
if (test.getTestSettings().getDecisionCycles().get(0) != 0) {
finalTestName+=""String_Node_Str"" + test.getTestSettings().getDecisionCycles().get(0);
}
 else {
finalTestName+=""String_Node_Str"";
}
if (runNumber != -1) {
finalTestName+=""String_Node_Str"" + runNumber;
}
table.writeToCSV(finalPathDirectoryString + ""String_Node_Str"" + finalTestName+ ""String_Node_Str"");
if (outputToSummaryFile) {
table.writeToCSV(settings.getCSVDirectory() + ""String_Node_Str"" + settings.getSummaryFile(),true);
}
}
out.print(""String_Node_Str"");
out.flush();
return NON_EXIT;
}",0.9647153978364168
12145,"@Override public String ExecuteCommandLine(String command){
  System.out.println(""String_Node_Str"");
  throw new RuntimeException();
}","@Override public String ExecuteCommandLine(String command){
  System.out.println(""String_Node_Str"");
  throw new RuntimeException(""String_Node_Str"");
}",0.9403508771929824
12146,"@Override public boolean LoadProductions(String file){
  System.out.println(""String_Node_Str"");
  throw new RuntimeException();
}","@Override public boolean LoadProductions(String file){
  System.out.println(""String_Node_Str"");
  throw new RuntimeException(""String_Node_Str"");
}",0.9381818181818182
12147,"@Override public Object getAgentImpl(){
  System.out.println(""String_Node_Str"");
  throw new RuntimeException();
}","@Override public Object getAgentImpl(){
  System.out.println(""String_Node_Str"");
  throw new RuntimeException(""String_Node_Str"");
}",0.9306122448979592
12148,"@Override public String RunSelfForever(){
  System.out.println(""String_Node_Str"");
  throw new RuntimeException();
}","@Override public String RunSelfForever(){
  System.out.println(""String_Node_Str"");
  throw new RuntimeException(""String_Node_Str"");
}",0.931726907630522
12149,"@Override public String RunSelf(Integer decisionCyclesToRun){
  System.out.println(""String_Node_Str"");
  throw new RuntimeException();
}","@Override public String RunSelf(Integer decisionCyclesToRun){
  System.out.println(""String_Node_Str"");
  throw new RuntimeException(""String_Node_Str"");
}",0.9411764705882352
12150,"@Override public CSoarAgentWrapper CreateAgent(String name){
  System.out.println(""String_Node_Str"");
  throw new RuntimeException();
}","@Override public CSoarAgentWrapper CreateAgent(String name){
  System.out.println(""String_Node_Str"");
  throw new RuntimeException(""String_Node_Str"");
}",0.940766550522648
12151,"@Override public void DestroyAgent(CSoarAgentWrapper agent){
  System.out.println(""String_Node_Str"");
  throw new RuntimeException();
}","@Override public void DestroyAgent(CSoarAgentWrapper agent){
  System.out.println(""String_Node_Str"");
  throw new RuntimeException(""String_Node_Str"");
}",0.940766550522648
12152,"/** 
 * <p> episodic_memory.cpp:3869:void  epmem_process_query( agent *my_agent,  Symbol *state,  Symbol *pos_query,  Symbol *neg_query,  epmem_time_list& prohibits, epmem_time_id before,  epmem_time_id after,  epmem_symbol_set& currents, soar_module::wme_set& cue_wmes,  soar_module::symbol_triple_list& meta_wmes,  soar_module::symbol_triple_list& retrieval_wmes,  int level=3 )
 * @param state
 * @param query
 * @param neg_query
 * @param prohibit
 * @param before
 * @param after
 * @param currents
 * @param cue_wmes
 * @param meta_wmes
 * @param retrieval_wmes
 * @throws SQLException 
 * @throws SoarException 
 */
private void epmem_process_query(IdentifierImpl state,SymbolImpl pos_query,SymbolImpl neg_query,List<Long> prohibits,long before,long after,Set<SymbolImpl> currents,Set<WmeImpl> cue_wmes,List<SymbolTriple> meta_wmes,List<SymbolTriple> retrieval_wmes,int level) throws SQLException, SoarException {
  if (pos_query == null) {
    epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_status,predefinedSyms.epmem_sym_bad_cmd);
    return;
  }
  if (before != EPMEM_MEMID_NONE && after != EPMEM_MEMID_NONE && before <= after) {
    epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_status,predefinedSyms.epmem_sym_bad_cmd);
    return;
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"");
  }
  stats.last_considered.set(0L);
  stats.last_graph_matches.set(0L);
  if (!prohibits.isEmpty()) {
    Collections.sort(prohibits);
  }
  boolean do_graph_match=(params.graph_match.get() == GraphMatchChoices.on);
  GmOrderingChoices gm_order=params.gm_ordering.get();
  Map<WmeImpl,EpmemLiteral> literal_cache=new LinkedHashMap<WmeImpl,EpmemLiteral>();
  @SuppressWarnings(""String_Node_Str"") Map<EpmemTriple,EpmemPEdge>[] pedge_caches=new Map[2];
  pedge_caches[0]=new LinkedHashMap<DefaultEpisodicMemory.EpmemTriple,DefaultEpisodicMemory.EpmemPEdge>();
  pedge_caches[1]=new LinkedHashMap<DefaultEpisodicMemory.EpmemTriple,DefaultEpisodicMemory.EpmemPEdge>();
  @SuppressWarnings(""String_Node_Str"") SortedMap<EpmemTriple,EpmemUEdge> uedge_caches[]=new SortedMap[2];
  uedge_caches[0]=new TreeMap<EpmemTriple,EpmemUEdge>();
  uedge_caches[1]=new TreeMap<EpmemTriple,EpmemUEdge>();
  Set<EpmemInterval> interval_cleanup=new LinkedHashSet<EpmemInterval>();
  EpmemLiteral root_literal=new EpmemLiteral();
  Set<EpmemLiteral> leaf_literals=new LinkedHashSet<EpmemLiteral>();
  PriorityQueue<EpmemPEdge> pedge_pq=new PriorityQueue<EpmemPEdge>(11,new Comparator<EpmemPEdge>(){
    public int compare(    EpmemPEdge a,    EpmemPEdge b){
      if (a.time != b.time) {
        return (a.time < b.time) ? 1 : -1;
      }
 else {
        return (a.triple.compareTo(b.triple));
      }
    }
  }
);
  PriorityQueue<EpmemInterval> interval_pq=new PriorityQueue<EpmemInterval>(11,new Comparator<EpmemInterval>(){
    public int compare(    EpmemInterval a,    EpmemInterval b){
      if (a.time != b.time) {
        return (a.time < b.time) ? 1 : -1;
      }
 else       if (a.is_end_point == b.is_end_point) {
        return (a.uedge.triple.compareTo(b.uedge.triple));
      }
 else {
        return (a.is_end_point == EPMEM_RANGE_START) ? 1 : -1;
      }
    }
  }
);
  Map<SymbolImpl,Integer> symbol_num_incoming=new LinkedHashMap<SymbolImpl,Integer>();
  Map<EpmemSymbolNodePair,Integer> symbol_node_count=new LinkedHashMap<EpmemSymbolNodePair,Integer>();
  long best_episode=EPMEM_MEMID_NONE;
  double best_score=0;
  boolean best_graph_matched=false;
  long best_cardinality=0;
  Map<EpmemLiteral,EpmemNodePair> best_bindings=new LinkedHashMap<EpmemLiteral,EpmemNodePair>();
  double current_score=0;
  long current_cardinality=0;
  LinkedList<EpmemLiteral> gm_ordering=new LinkedList<EpmemLiteral>();
  if (level > 1) {
{
      stats.qry_pos.set(0l);
      stats.qry_neg.set(0l);
      root_literal.id_sym=null;
      root_literal.value_sym=pos_query;
      root_literal.is_neg_q=EPMEM_NODE_POS;
      root_literal.value_is_id=EPMEM_RIT_STATE_EDGE;
      root_literal.is_leaf=false;
      root_literal.is_current=false;
      root_literal.attribute_s_id=EPMEM_NODEID_BAD;
      root_literal.child_n_id=EPMEM_NODEID_ROOT;
      root_literal.weight=0.0;
      root_literal.parents=new LinkedHashSet<EpmemLiteral>();
      root_literal.children=new LinkedHashSet<EpmemLiteral>();
      root_literal.matches=new TreeSet<EpmemNodePair>();
      root_literal.values=new LinkedHashMap<Long,Integer>();
      symbol_num_incoming.put(pos_query,1);
      literal_cache.put(null,root_literal);
      Set<SymbolImpl> visiting=new LinkedHashSet<SymbolImpl>();
      visiting.add(pos_query);
      visiting.add(neg_query);
      for (int query_type=EPMEM_NODE_POS; query_type <= EPMEM_NODE_NEG; query_type++) {
        SymbolImpl query_root=null;
switch (query_type) {
case EPMEM_NODE_POS:
          query_root=pos_query;
        break;
case EPMEM_NODE_NEG:
      query_root=neg_query;
    break;
}
if (query_root == null) {
  continue;
}
List<WmeImpl> children=epmem_get_augs_of_id(query_root,DefaultMarker.create());
for (WmeImpl wme_iter : children) {
  EpmemLiteral child=epmem_build_dnf(wme_iter,literal_cache,leaf_literals,symbol_num_incoming,gm_ordering,currents,query_type,visiting,cue_wmes);
  if (child != null) {
    child.id_sym=pos_query;
    child.parents.add(root_literal);
    root_literal.children.add(child);
  }
}
}
stats.qry_lits.set(stats.qry_pos.get() + stats.qry_neg.get());
}
double perfect_score=0;
int perfect_cardinality=0;
for (EpmemLiteral iter : leaf_literals) {
if (iter.is_neg_q == 0) {
perfect_score+=iter.weight;
perfect_cardinality++;
}
}
if (before == EPMEM_MEMID_NONE) {
before=stats.time.get() - 1;
}
 else {
before=before - 1;
}
long current_episode=before;
long next_episode;
{
EpmemTriple triple=new EpmemTriple(EPMEM_NODEID_BAD,EPMEM_NODEID_BAD,EPMEM_NODEID_ROOT);
EpmemPEdge root_pedge=new EpmemPEdge();
root_pedge.triple=triple.copyEpmemTriple();
root_pedge.value_is_id=EPMEM_RIT_STATE_EDGE;
root_pedge.has_noncurrent=false;
root_pedge.literals=new ConcurrentSkipListSet<EpmemLiteral>();
root_pedge.literals.add(root_literal);
root_pedge.sql=db.pool_dummy.getCopy();
root_pedge.sql.setLong(1,Long.MAX_VALUE);
root_pedge.sqlResults=root_pedge.sql.executeQuery();
root_pedge.time=Long.MAX_VALUE;
pedge_pq.add(root_pedge);
pedge_caches[EPMEM_RIT_STATE_EDGE].put(triple,root_pedge);
EpmemUEdge root_uedge=new EpmemUEdge();
root_uedge.triple=triple.copyEpmemTriple();
root_uedge.value_is_id=EPMEM_RIT_STATE_EDGE;
root_uedge.has_noncurrent=false;
root_uedge.activation_count=0;
root_uedge.pedges=new LinkedHashSet<EpmemPEdge>();
root_uedge.intervals=1;
root_uedge.activated=false;
uedge_caches[EPMEM_RIT_STATE_EDGE].put(triple,root_uedge);
EpmemInterval root_interval=new EpmemInterval();
root_interval.uedge=root_uedge;
root_interval.is_end_point=1;
root_interval.sql=db.pool_dummy.getCopy();
root_interval.sql.setLong(1,before);
root_interval.sqlResult=root_interval.sql.executeQuery();
root_interval.time=before;
interval_pq.add(root_interval);
interval_cleanup.add(root_interval);
}
if (logger.isDebugEnabled()) {
logger.debug(epmem_print_retrieval_state(literal_cache,pedge_caches,uedge_caches));
}
while (pedge_pq.size() != 0 && current_episode > after) {
long next_edge;
long next_interval;
boolean changed_score=false;
next_edge=pedge_pq.peek().time;
while ((pedge_pq.size() != 0) && (pedge_pq.peek().time == next_edge || pedge_pq.peek().time >= current_episode)) {
final EpmemPEdge pedge=pedge_pq.poll();
final EpmemTriple triple=pedge.triple.copyEpmemTriple();
if (pedge.sqlResults.getMetaData().getColumnCount() > 1) {
  triple.child_n_id=pedge.sqlResults.getLong(1 + 1);
}
 else {
  triple.child_n_id=0L;
}
if (logger.isDebugEnabled()) {
  logger.debug(""String_Node_Str"" + triple.parent_n_id + ""String_Node_Str""+ triple.attribute_s_id+ ""String_Node_Str""+ triple.child_n_id);
}
if (pedge.value_is_id != 0) {
  @SuppressWarnings(""String_Node_Str"") boolean created=false;
  for (  EpmemLiteral literal_iter : pedge.literals) {
    EpmemLiteral literal=literal_iter;
    for (    EpmemLiteral child_iter : literal.children) {
      created|=epmem_register_pedges(triple.child_n_id,child_iter,pedge_pq,after,pedge_caches,uedge_caches);
    }
  }
}
Map<EpmemTriple,EpmemUEdge> uedge_cache=uedge_caches[pedge.value_is_id];
EpmemUEdge uedge_iter=uedge_cache.get(triple);
if (uedge_iter == null) {
  EpmemUEdge uedge=new EpmemUEdge();
  uedge.triple=triple.copyEpmemTriple();
  uedge.value_is_id=pedge.value_is_id;
  uedge.has_noncurrent=pedge.has_noncurrent;
  uedge.activation_count=0;
  uedge.pedges=new LinkedHashSet<EpmemPEdge>();
  uedge.intervals=0;
  uedge.activated=false;
  boolean created=false;
  long edge_id=pedge.sqlResults.getLong(0 + 1);
  long promo_time=EPMEM_MEMID_NONE;
  boolean is_lti=(pedge.value_is_id != 0 && pedge.triple.child_n_id != EPMEM_NODEID_BAD && pedge.triple.child_n_id != EPMEM_NODEID_ROOT);
  if (is_lti) {
    db.find_lti_promotion_time.setLong(1,triple.child_n_id);
    ResultSet results=db.find_lti_promotion_time.executeQuery();
    if (results.next()) {
      promo_time=results.getLong(0 + 1);
    }
    results.close();
  }
  for (int interval_type=EPMEM_RANGE_EP; interval_type <= EPMEM_RANGE_POINT; interval_type++) {
    for (int point_type=EPMEM_RANGE_START; point_type <= EPMEM_RANGE_END; point_type++) {
      PreparedStatement interval_sql=null;
      if (is_lti) {
        interval_sql=db.pool_find_lti_queries[point_type][interval_type].getCopy();
      }
 else {
        interval_sql=db.pool_find_interval_queries[pedge.value_is_id][point_type][interval_type].getCopy();
      }
      int bind_pos=1;
      if (point_type == EPMEM_RANGE_END && interval_type == EPMEM_RANGE_NOW) {
        interval_sql.setLong(bind_pos++,current_episode);
      }
      interval_sql.setLong(bind_pos++,edge_id);
      if (is_lti) {
        interval_sql.setLong(bind_pos++,promo_time);
      }
      interval_sql.setLong(bind_pos++,current_episode);
      ResultSet results=interval_sql.executeQuery();
      if (results.next()) {
        EpmemInterval interval=new EpmemInterval();
        interval.is_end_point=point_type;
        interval.uedge=uedge;
        interval.time=results.getLong(0 + 1);
        interval.sql=interval_sql;
        interval.sqlResult=results;
        interval_pq.add(interval);
        interval_cleanup.add(interval);
        uedge.intervals++;
        created=true;
      }
 else {
        results.close();
      }
    }
  }
  if (created) {
    if (is_lti) {
      EpmemInterval start_interval=new EpmemInterval();
      start_interval.uedge=uedge;
      start_interval.is_end_point=EPMEM_RANGE_START;
      start_interval.time=promo_time - 1;
      start_interval.sql=null;
      interval_pq.add(start_interval);
      interval_cleanup.add(start_interval);
    }
    uedge.pedges.add(pedge);
    uedge_cache.put(triple.copyEpmemTriple(),uedge);
  }
 else {
    uedge.pedges.clear();
    uedge.pedges=null;
  }
}
 else {
  EpmemUEdge uedge=uedge_iter;
  uedge.pedges.add(pedge);
  if (uedge.activated && uedge.activation_count == 1) {
    for (    EpmemLiteral lit_iter : pedge.literals) {
      EpmemLiteral literal=lit_iter;
      ByRef<Double> curScoreRef=new ByRef<Double>(current_score);
      ByRef<Long> curCardinalityRef=new ByRef<Long>(current_cardinality);
      changed_score|=epmem_satisfy_literal(literal,triple.parent_n_id,triple.child_n_id,curScoreRef,curCardinalityRef,symbol_node_count,uedge_caches,symbol_num_incoming);
      current_score=curScoreRef.value;
      current_cardinality=curCardinalityRef.value;
    }
  }
}
if (pedge.sql != null) {
  if (pedge.sqlResults == null) {
    ResultSet results=pedge.sql.executeQuery();
    pedge.sqlResults=results;
  }
  if (pedge.sqlResults.next()) {
    if (pedge.sqlResults.getMetaData().getColumnCount() > 2) {
      pedge.time=pedge.sqlResults.getLong(2 + 1);
    }
 else {
      pedge.time=0L;
    }
    pedge_pq.add(pedge);
  }
 else {
    pedge.sqlResults.close();
    pedge.sqlResults=null;
    pedge.sql=null;
  }
}
}
next_edge=(pedge_pq.isEmpty() ? after : pedge_pq.peek().time);
while (interval_pq.size() != 0 && interval_pq.peek().time > next_edge && current_episode > after) {
if (logger.isDebugEnabled()) {
  logger.debug(""String_Node_Str"" + current_episode);
}
while (interval_pq.size() != 0 && interval_pq.peek().time >= current_episode) {
  EpmemInterval interval=interval_pq.poll();
  EpmemUEdge uedge=interval.uedge;
  EpmemTriple triple=uedge.triple.copyEpmemTriple();
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (interval.is_end_point != 0 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ triple.parent_n_id+ ""String_Node_Str""+ triple.attribute_s_id+ ""String_Node_Str""+ triple.child_n_id);
  }
  if (interval.is_end_point != 0) {
    uedge.activated=true;
    uedge.activation_count++;
    if (uedge.activation_count == 1) {
      for (      EpmemPEdge pedge_iter : uedge.pedges) {
        EpmemPEdge pedge=pedge_iter;
        for (        EpmemLiteral lit_iter : pedge.literals) {
          EpmemLiteral literal=lit_iter;
          ByRef<Double> curScoreRef=new ByRef<Double>(current_score);
          ByRef<Long> curCardinalityRef=new ByRef<Long>(current_cardinality);
          changed_score|=epmem_satisfy_literal(literal,triple.parent_n_id,triple.child_n_id,curScoreRef,curCardinalityRef,symbol_node_count,uedge_caches,symbol_num_incoming);
          current_score=curScoreRef.value;
          current_cardinality=curCardinalityRef.value;
        }
      }
    }
  }
 else {
    uedge.activated=false;
    uedge.activation_count--;
    for (    EpmemPEdge pedge_iter : uedge.pedges) {
      EpmemPEdge pedge=pedge_iter;
      for (      EpmemLiteral lit_iter : pedge.literals) {
        ByRef<Double> curScore=new ByRef<Double>(current_score);
        ByRef<Long> curCardinality=new ByRef<Long>(current_cardinality);
        changed_score|=epmem_unsatisfy_literal(lit_iter,triple.parent_n_id,triple.child_n_id,curScore,curCardinality,symbol_node_count);
        current_score=curScore.value;
        current_cardinality=curCardinality.value;
      }
    }
  }
  if (interval.sql != null) {
    if (interval.sqlResult == null) {
      interval.sqlResult=interval.sql.executeQuery();
    }
    if (interval.uedge.has_noncurrent && interval.sqlResult.next()) {
      interval.time=interval.sqlResult.getInt(0 + 1);
      interval_pq.add(interval);
    }
 else {
      interval.sqlResult.close();
      interval.sqlResult=null;
      interval.sql=null;
      uedge.intervals--;
      if (uedge.intervals != 0) {
        interval_cleanup.remove(interval);
      }
 else {
      }
    }
  }
}
next_interval=(interval_pq.isEmpty() ? after : interval_pq.peek().time);
next_episode=(next_edge > next_interval ? next_edge : next_interval);
while (prohibits.size() != 0 && prohibits.get(prohibits.size() - 1) > current_episode) {
  prohibits.remove(prohibits.size() - 1);
}
while (prohibits.size() != 0 && current_episode > next_episode && current_episode == prohibits.get(prohibits.size() - 1)) {
  current_episode--;
  prohibits.remove(prohibits.size() - 1);
}
if (logger.isTraceEnabled()) {
  logger.trace(epmem_print_retrieval_state(literal_cache,pedge_caches,uedge_caches));
}
stats.considered.set(stats.considered.get() + 1);
stats.last_considered.set(stats.last_considered.get() + 1);
trace.startNewLine().print(Category.EPMEM,""String_Node_Str"" + current_episode + ""String_Node_Str""+ current_cardinality+ ""String_Node_Str""+ current_score+ ""String_Node_Str"");
if (current_episode > next_episode && changed_score && (best_episode == EPMEM_MEMID_NONE || current_score > best_score || (do_graph_match && current_score == best_score && !best_graph_matched))) {
  boolean new_king=false;
  if (best_episode == EPMEM_MEMID_NONE || current_score > best_score) {
    best_episode=current_episode;
    best_score=current_score;
    best_cardinality=current_cardinality;
    new_king=true;
  }
  if (current_cardinality == perfect_cardinality) {
    boolean graph_matched=false;
    if (do_graph_match) {
      if (gm_order == DefaultEpisodicMemoryParams.GmOrderingChoices.undefined) {
        Collections.shuffle(gm_ordering,random);
      }
 else       if (gm_order == DefaultEpisodicMemoryParams.GmOrderingChoices.mcv) {
        Collections.sort(gm_ordering,new Comparator<EpmemLiteral>(){
          @Override public int compare(          EpmemLiteral a,          EpmemLiteral b){
            return (a.matches.size() < b.matches.size() ? -1 : 1);
          }
        }
);
      }
      best_bindings.clear();
      @SuppressWarnings(""String_Node_Str"") Map<Long,SymbolImpl>[] bound_nodes=(Map<Long,SymbolImpl>[])new Map[2];
      for (int i=0; i < bound_nodes.length; i++) {
        bound_nodes[i]=new LinkedHashMap<Long,SymbolImpl>();
      }
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
        logger.debug(epmem_print_retrieval_state(literal_cache,pedge_caches,uedge_caches));
      }
      stats.graph_matches.set(stats.graph_matches.get() + 1);
      stats.last_graph_matches.set(stats.last_graph_matches.get() + 1);
      graph_matched=epmem_graph_match(gm_ordering,gm_ordering.listIterator(),best_bindings,bound_nodes,2);
    }
    if (!do_graph_match || graph_matched) {
      best_episode=current_episode;
      best_graph_matched=true;
      current_episode=EPMEM_MEMID_NONE;
      new_king=true;
    }
  }
  if (new_king) {
    trace.startNewLine().print(Category.EPMEM,""String_Node_Str"" + Boolean.toString(current_cardinality == perfect_cardinality) + ""String_Node_Str""+ Boolean.toString(best_graph_matched)+ ""String_Node_Str"");
  }
}
if (current_episode == EPMEM_MEMID_NONE) {
  break;
}
 else {
  current_episode=next_episode;
}
}
}
if (best_episode == EPMEM_MEMID_NONE) {
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_failure,pos_query);
if (neg_query != null) {
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_failure,neg_query);
}
}
 else {
stats.qry_ret.set(best_episode);
stats.qry_card.set(best_cardinality);
SymbolImpl temp_sym;
Map<Long,SymbolImpl> node_map_map=new LinkedHashMap<Long,SymbolImpl>();
Map<Long,SymbolImpl> node_mem_map=new LinkedHashMap<Long,SymbolImpl>();
temp_sym=symbols.createInteger(leaf_literals.size());
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_cue_size,temp_sym);
temp_sym=symbols.createInteger(best_cardinality);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_match_cardinality,temp_sym);
temp_sym=symbols.createDouble(best_score);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_match_score,temp_sym);
temp_sym=symbols.createDouble(best_score / perfect_score);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_normalized_match_score,temp_sym);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_success,pos_query);
if (neg_query != null) {
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_success,neg_query);
}
if (do_graph_match) {
temp_sym=symbols.createInteger((best_graph_matched ? 1 : 0));
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_graph_match,temp_sym);
if (best_graph_matched) {
  @SuppressWarnings(""String_Node_Str"") int levelLocal=epmem_info(state).epmem_result_header.level;
  SymbolImpl mapping=symbols.make_new_identifier('M',level);
  epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_graph_match_mapping,mapping);
  for (  Entry<EpmemLiteral,EpmemNodePair> iter : best_bindings.entrySet()) {
    if (iter.getKey().value_is_id != 0) {
      temp_sym=symbols.make_new_identifier('N',level);
      epmem_buffer_add_wme(meta_wmes,mapping,predefinedSyms.epmem_sym_graph_match_mapping_node,temp_sym);
      epmem_buffer_add_wme(meta_wmes,temp_sym,predefinedSyms.epmem_sym_graph_match_mapping_cue,iter.getKey().value_sym);
      node_map_map.put(iter.getValue().second,temp_sym);
      node_mem_map.put(iter.getValue().second,null);
    }
  }
}
}
if (level > 2) {
epmem_install_memory(state,best_episode,meta_wmes,retrieval_wmes,node_mem_map);
}
if (best_graph_matched) {
for (Entry<Long,SymbolImpl> iter : node_mem_map.entrySet()) {
  SymbolImpl map_iter=node_map_map.get(iter.getKey());
  if (map_iter != null && iter.getValue() != null) {
    epmem_buffer_add_wme(meta_wmes,map_iter,predefinedSyms.epmem_sym_retrieved,iter.getValue());
  }
}
}
}
}
for (EpmemInterval interval : interval_cleanup) {
if (interval.sqlResult != null) {
interval.sqlResult.close();
interval.sqlResult=null;
}
}
for (int type=EPMEM_RIT_STATE_NODE; type <= EPMEM_RIT_STATE_EDGE; type++) {
for (EpmemPEdge pedge : pedge_caches[type].values()) {
if (pedge.sqlResults != null) {
pedge.sqlResults.close();
}
}
}
}","/** 
 * <p> episodic_memory.cpp:3869:void  epmem_process_query( agent *my_agent,  Symbol *state,  Symbol *pos_query,  Symbol *neg_query,  epmem_time_list& prohibits, epmem_time_id before,  epmem_time_id after,  epmem_symbol_set& currents, soar_module::wme_set& cue_wmes,  soar_module::symbol_triple_list& meta_wmes,  soar_module::symbol_triple_list& retrieval_wmes,  int level=3 )
 * @param state
 * @param query
 * @param neg_query
 * @param prohibit
 * @param before
 * @param after
 * @param currents
 * @param cue_wmes
 * @param meta_wmes
 * @param retrieval_wmes
 * @throws SQLException 
 * @throws SoarException 
 */
private void epmem_process_query(IdentifierImpl state,SymbolImpl pos_query,SymbolImpl neg_query,List<Long> prohibits,long before,long after,Set<SymbolImpl> currents,Set<WmeImpl> cue_wmes,List<SymbolTriple> meta_wmes,List<SymbolTriple> retrieval_wmes,int level) throws SQLException, SoarException {
  if (pos_query == null) {
    epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_status,predefinedSyms.epmem_sym_bad_cmd);
    return;
  }
  if (before != EPMEM_MEMID_NONE && after != EPMEM_MEMID_NONE && before <= after) {
    epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_status,predefinedSyms.epmem_sym_bad_cmd);
    return;
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"");
  }
  stats.last_considered.set(0L);
  stats.last_graph_matches.set(0L);
  if (!prohibits.isEmpty()) {
    Collections.sort(prohibits);
  }
  boolean do_graph_match=(params.graph_match.get() == GraphMatchChoices.on);
  GmOrderingChoices gm_order=params.gm_ordering.get();
  Map<WmeImpl,EpmemLiteral> literal_cache=new LinkedHashMap<WmeImpl,EpmemLiteral>();
  @SuppressWarnings(""String_Node_Str"") Map<EpmemTriple,EpmemPEdge>[] pedge_caches=new Map[2];
  pedge_caches[0]=new LinkedHashMap<DefaultEpisodicMemory.EpmemTriple,DefaultEpisodicMemory.EpmemPEdge>();
  pedge_caches[1]=new LinkedHashMap<DefaultEpisodicMemory.EpmemTriple,DefaultEpisodicMemory.EpmemPEdge>();
  @SuppressWarnings(""String_Node_Str"") SortedMap<EpmemTriple,EpmemUEdge> uedge_caches[]=new SortedMap[2];
  uedge_caches[0]=new TreeMap<EpmemTriple,EpmemUEdge>();
  uedge_caches[1]=new TreeMap<EpmemTriple,EpmemUEdge>();
  Set<EpmemInterval> interval_cleanup=new LinkedHashSet<EpmemInterval>();
  EpmemLiteral root_literal=new EpmemLiteral();
  Set<EpmemLiteral> leaf_literals=new LinkedHashSet<EpmemLiteral>();
  PriorityQueue<EpmemPEdge> pedge_pq=new PriorityQueue<EpmemPEdge>(11,new Comparator<EpmemPEdge>(){
    public int compare(    EpmemPEdge a,    EpmemPEdge b){
      if (a.time != b.time) {
        return (a.time < b.time) ? 1 : -1;
      }
 else {
        return (a.triple.compareTo(b.triple));
      }
    }
  }
);
  PriorityQueue<EpmemInterval> interval_pq=new PriorityQueue<EpmemInterval>(11,new Comparator<EpmemInterval>(){
    public int compare(    EpmemInterval a,    EpmemInterval b){
      if (a.time != b.time) {
        return (a.time < b.time) ? 1 : -1;
      }
 else       if (a.is_end_point == b.is_end_point) {
        return (a.uedge.triple.compareTo(b.uedge.triple));
      }
 else {
        return (a.is_end_point == EPMEM_RANGE_START) ? 1 : -1;
      }
    }
  }
);
  Map<SymbolImpl,Integer> symbol_num_incoming=new LinkedHashMap<SymbolImpl,Integer>();
  Map<EpmemSymbolNodePair,Integer> symbol_node_count=new LinkedHashMap<EpmemSymbolNodePair,Integer>();
  long best_episode=EPMEM_MEMID_NONE;
  double best_score=0;
  boolean best_graph_matched=false;
  long best_cardinality=0;
  Map<EpmemLiteral,EpmemNodePair> best_bindings=new LinkedHashMap<EpmemLiteral,EpmemNodePair>();
  double current_score=0;
  long current_cardinality=0;
  LinkedList<EpmemLiteral> gm_ordering=new LinkedList<EpmemLiteral>();
  if (level > 1) {
{
      stats.qry_pos.set(0l);
      stats.qry_neg.set(0l);
      root_literal.id_sym=null;
      root_literal.value_sym=pos_query;
      root_literal.is_neg_q=EPMEM_NODE_POS;
      root_literal.value_is_id=EPMEM_RIT_STATE_EDGE;
      root_literal.is_leaf=false;
      root_literal.is_current=false;
      root_literal.attribute_s_id=EPMEM_NODEID_BAD;
      root_literal.child_n_id=EPMEM_NODEID_ROOT;
      root_literal.weight=0.0;
      root_literal.parents=new LinkedHashSet<EpmemLiteral>();
      root_literal.children=new LinkedHashSet<EpmemLiteral>();
      root_literal.matches=new TreeSet<EpmemNodePair>();
      root_literal.values=new LinkedHashMap<Long,Integer>();
      symbol_num_incoming.put(pos_query,1);
      literal_cache.put(null,root_literal);
      Set<SymbolImpl> visiting=new LinkedHashSet<SymbolImpl>();
      visiting.add(pos_query);
      visiting.add(neg_query);
      for (int query_type=EPMEM_NODE_POS; query_type <= EPMEM_NODE_NEG; query_type++) {
        SymbolImpl query_root=null;
switch (query_type) {
case EPMEM_NODE_POS:
          query_root=pos_query;
        break;
case EPMEM_NODE_NEG:
      query_root=neg_query;
    break;
}
if (query_root == null) {
  continue;
}
List<WmeImpl> children=epmem_get_augs_of_id(query_root,DefaultMarker.create());
for (WmeImpl wme_iter : children) {
  EpmemLiteral child=epmem_build_dnf(wme_iter,literal_cache,leaf_literals,symbol_num_incoming,gm_ordering,currents,query_type,visiting,cue_wmes);
  if (child != null) {
    child.id_sym=pos_query;
    child.parents.add(root_literal);
    root_literal.children.add(child);
  }
}
}
stats.qry_lits.set(stats.qry_pos.get() + stats.qry_neg.get());
}
double perfect_score=0;
int perfect_cardinality=0;
for (EpmemLiteral iter : leaf_literals) {
if (iter.is_neg_q == 0) {
perfect_score+=iter.weight;
perfect_cardinality++;
}
}
if (before == EPMEM_MEMID_NONE) {
before=stats.time.get() - 1;
}
 else {
before=before - 1;
}
long current_episode=before;
long next_episode;
{
EpmemTriple triple=new EpmemTriple(EPMEM_NODEID_BAD,EPMEM_NODEID_BAD,EPMEM_NODEID_ROOT);
EpmemPEdge root_pedge=new EpmemPEdge();
root_pedge.triple=triple.copyEpmemTriple();
root_pedge.value_is_id=EPMEM_RIT_STATE_EDGE;
root_pedge.has_noncurrent=false;
root_pedge.literals=new ConcurrentSkipListSet<EpmemLiteral>();
root_pedge.literals.add(root_literal);
root_pedge.sql=db.pool_dummy.getCopy();
root_pedge.sql.setLong(1,Long.MAX_VALUE);
root_pedge.sqlResults=root_pedge.sql.executeQuery();
root_pedge.time=Long.MAX_VALUE;
pedge_pq.add(root_pedge);
pedge_caches[EPMEM_RIT_STATE_EDGE].put(triple,root_pedge);
EpmemUEdge root_uedge=new EpmemUEdge();
root_uedge.triple=triple.copyEpmemTriple();
root_uedge.value_is_id=EPMEM_RIT_STATE_EDGE;
root_uedge.has_noncurrent=false;
root_uedge.activation_count=0;
root_uedge.pedges=new LinkedHashSet<EpmemPEdge>();
root_uedge.intervals=1;
root_uedge.activated=false;
uedge_caches[EPMEM_RIT_STATE_EDGE].put(triple,root_uedge);
EpmemInterval root_interval=new EpmemInterval();
root_interval.uedge=root_uedge;
root_interval.is_end_point=1;
root_interval.sql=db.pool_dummy.getCopy();
root_interval.sql.setLong(1,before);
root_interval.sqlResult=root_interval.sql.executeQuery();
root_interval.time=before;
interval_pq.add(root_interval);
interval_cleanup.add(root_interval);
}
if (logger.isDebugEnabled()) {
logger.debug(epmem_print_retrieval_state(literal_cache,pedge_caches,uedge_caches));
}
while (pedge_pq.size() != 0 && current_episode > after) {
long next_edge;
long next_interval;
boolean changed_score=false;
next_edge=pedge_pq.peek().time;
while ((pedge_pq.size() != 0) && (pedge_pq.peek().time == next_edge || pedge_pq.peek().time >= current_episode)) {
final EpmemPEdge pedge=pedge_pq.poll();
final EpmemTriple triple=pedge.triple.copyEpmemTriple();
if (pedge.sqlResults.getMetaData().getColumnCount() > 1) {
  triple.child_n_id=pedge.sqlResults.getLong(1 + 1);
}
 else {
  triple.child_n_id=0L;
}
if (logger.isDebugEnabled()) {
  logger.debug(""String_Node_Str"" + triple.parent_n_id + ""String_Node_Str""+ triple.attribute_s_id+ ""String_Node_Str""+ triple.child_n_id);
}
if (pedge.value_is_id != 0) {
  @SuppressWarnings(""String_Node_Str"") boolean created=false;
  for (  EpmemLiteral literal_iter : pedge.literals) {
    EpmemLiteral literal=literal_iter;
    for (    EpmemLiteral child_iter : literal.children) {
      created|=epmem_register_pedges(triple.child_n_id,child_iter,pedge_pq,after,pedge_caches,uedge_caches);
    }
  }
}
Map<EpmemTriple,EpmemUEdge> uedge_cache=uedge_caches[pedge.value_is_id];
EpmemUEdge uedge_iter=uedge_cache.get(triple);
if (uedge_iter == null) {
  EpmemUEdge uedge=new EpmemUEdge();
  uedge.triple=triple.copyEpmemTriple();
  uedge.value_is_id=pedge.value_is_id;
  uedge.has_noncurrent=pedge.has_noncurrent;
  uedge.activation_count=0;
  uedge.pedges=new LinkedHashSet<EpmemPEdge>();
  uedge.intervals=0;
  uedge.activated=false;
  boolean created=false;
  long edge_id=pedge.sqlResults.getLong(0 + 1);
  long promo_time=EPMEM_MEMID_NONE;
  boolean is_lti=(pedge.value_is_id != 0 && pedge.triple.child_n_id != EPMEM_NODEID_BAD && pedge.triple.child_n_id != EPMEM_NODEID_ROOT);
  if (is_lti) {
    db.find_lti_promotion_time.setLong(1,triple.child_n_id);
    ResultSet results=db.find_lti_promotion_time.executeQuery();
    if (results.next()) {
      promo_time=results.getLong(0 + 1);
    }
    results.close();
  }
  for (int interval_type=EPMEM_RANGE_EP; interval_type <= EPMEM_RANGE_POINT; interval_type++) {
    for (int point_type=EPMEM_RANGE_START; point_type <= EPMEM_RANGE_END; point_type++) {
      PreparedStatement interval_sql=null;
      if (is_lti) {
        interval_sql=db.pool_find_lti_queries[point_type][interval_type].getCopy();
      }
 else {
        interval_sql=db.pool_find_interval_queries[pedge.value_is_id][point_type][interval_type].getCopy();
      }
      int bind_pos=1;
      if (point_type == EPMEM_RANGE_END && interval_type == EPMEM_RANGE_NOW) {
        interval_sql.setLong(bind_pos++,current_episode);
      }
      interval_sql.setLong(bind_pos++,edge_id);
      if (is_lti && interval_type == EPMEM_RANGE_EP) {
        interval_sql.setLong(bind_pos++,promo_time);
      }
      interval_sql.setLong(bind_pos++,current_episode);
      ResultSet results=interval_sql.executeQuery();
      if (results.next()) {
        EpmemInterval interval=new EpmemInterval();
        interval.is_end_point=point_type;
        interval.uedge=uedge;
        interval.time=results.getLong(0 + 1);
        if (is_lti && point_type == EPMEM_RANGE_START && interval_type != EPMEM_RANGE_POINT && interval.time < promo_time) {
          interval.time=promo_time;
        }
        interval.sql=interval_sql;
        interval.sqlResult=results;
        interval_pq.add(interval);
        interval_cleanup.add(interval);
        uedge.intervals++;
        created=true;
      }
 else {
        results.close();
      }
    }
  }
  if (created) {
    if (is_lti) {
      EpmemInterval start_interval=new EpmemInterval();
      start_interval.uedge=uedge;
      start_interval.is_end_point=EPMEM_RANGE_START;
      start_interval.time=promo_time - 1;
      start_interval.sql=null;
      interval_pq.add(start_interval);
      interval_cleanup.add(start_interval);
    }
    uedge.pedges.add(pedge);
    uedge_cache.put(triple.copyEpmemTriple(),uedge);
  }
 else {
    uedge.pedges.clear();
    uedge.pedges=null;
  }
}
 else {
  EpmemUEdge uedge=uedge_iter;
  uedge.pedges.add(pedge);
  if (uedge.activated && uedge.activation_count == 1) {
    for (    EpmemLiteral lit_iter : pedge.literals) {
      EpmemLiteral literal=lit_iter;
      ByRef<Double> curScoreRef=new ByRef<Double>(current_score);
      ByRef<Long> curCardinalityRef=new ByRef<Long>(current_cardinality);
      changed_score|=epmem_satisfy_literal(literal,triple.parent_n_id,triple.child_n_id,curScoreRef,curCardinalityRef,symbol_node_count,uedge_caches,symbol_num_incoming);
      current_score=curScoreRef.value;
      current_cardinality=curCardinalityRef.value;
    }
  }
}
if (pedge.sql != null) {
  if (pedge.sqlResults == null) {
    ResultSet results=pedge.sql.executeQuery();
    pedge.sqlResults=results;
  }
  if (pedge.sqlResults.next()) {
    if (pedge.sqlResults.getMetaData().getColumnCount() > 2) {
      pedge.time=pedge.sqlResults.getLong(2 + 1);
    }
 else {
      pedge.time=0L;
    }
    pedge_pq.add(pedge);
  }
 else {
    pedge.sqlResults.close();
    pedge.sqlResults=null;
    pedge.sql=null;
  }
}
}
next_edge=(pedge_pq.isEmpty() ? after : pedge_pq.peek().time);
while (interval_pq.size() != 0 && interval_pq.peek().time > next_edge && current_episode > after) {
if (logger.isDebugEnabled()) {
  logger.debug(""String_Node_Str"" + current_episode);
}
while (interval_pq.size() != 0 && interval_pq.peek().time >= current_episode) {
  EpmemInterval interval=interval_pq.poll();
  EpmemUEdge uedge=interval.uedge;
  EpmemTriple triple=uedge.triple.copyEpmemTriple();
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (interval.is_end_point != 0 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ triple.parent_n_id+ ""String_Node_Str""+ triple.attribute_s_id+ ""String_Node_Str""+ triple.child_n_id);
  }
  if (interval.is_end_point != 0) {
    uedge.activated=true;
    uedge.activation_count++;
    if (uedge.activation_count == 1) {
      for (      EpmemPEdge pedge_iter : uedge.pedges) {
        EpmemPEdge pedge=pedge_iter;
        for (        EpmemLiteral lit_iter : pedge.literals) {
          EpmemLiteral literal=lit_iter;
          ByRef<Double> curScoreRef=new ByRef<Double>(current_score);
          ByRef<Long> curCardinalityRef=new ByRef<Long>(current_cardinality);
          changed_score|=epmem_satisfy_literal(literal,triple.parent_n_id,triple.child_n_id,curScoreRef,curCardinalityRef,symbol_node_count,uedge_caches,symbol_num_incoming);
          current_score=curScoreRef.value;
          current_cardinality=curCardinalityRef.value;
        }
      }
    }
  }
 else {
    uedge.activated=false;
    uedge.activation_count--;
    for (    EpmemPEdge pedge_iter : uedge.pedges) {
      EpmemPEdge pedge=pedge_iter;
      for (      EpmemLiteral lit_iter : pedge.literals) {
        ByRef<Double> curScore=new ByRef<Double>(current_score);
        ByRef<Long> curCardinality=new ByRef<Long>(current_cardinality);
        changed_score|=epmem_unsatisfy_literal(lit_iter,triple.parent_n_id,triple.child_n_id,curScore,curCardinality,symbol_node_count);
        current_score=curScore.value;
        current_cardinality=curCardinality.value;
      }
    }
  }
  if (interval.sql != null) {
    if (interval.sqlResult == null) {
      interval.sqlResult=interval.sql.executeQuery();
    }
    if (interval.uedge.has_noncurrent && interval.sqlResult.next()) {
      interval.time=interval.sqlResult.getInt(0 + 1);
      interval_pq.add(interval);
    }
 else {
      interval.sqlResult.close();
      interval.sqlResult=null;
      interval.sql=null;
      uedge.intervals--;
      if (uedge.intervals != 0) {
        interval_cleanup.remove(interval);
      }
 else {
      }
    }
  }
}
next_interval=(interval_pq.isEmpty() ? after : interval_pq.peek().time);
next_episode=(next_edge > next_interval ? next_edge : next_interval);
while (prohibits.size() != 0 && prohibits.get(prohibits.size() - 1) > current_episode) {
  prohibits.remove(prohibits.size() - 1);
}
while (prohibits.size() != 0 && current_episode > next_episode && current_episode == prohibits.get(prohibits.size() - 1)) {
  current_episode--;
  prohibits.remove(prohibits.size() - 1);
}
if (logger.isTraceEnabled()) {
  logger.trace(epmem_print_retrieval_state(literal_cache,pedge_caches,uedge_caches));
}
stats.considered.set(stats.considered.get() + 1);
stats.last_considered.set(stats.last_considered.get() + 1);
trace.startNewLine().print(Category.EPMEM,""String_Node_Str"" + current_episode + ""String_Node_Str""+ current_cardinality+ ""String_Node_Str""+ current_score+ ""String_Node_Str"");
if (current_episode > next_episode && changed_score && (best_episode == EPMEM_MEMID_NONE || current_score > best_score || (do_graph_match && current_score == best_score && !best_graph_matched))) {
  boolean new_king=false;
  if (best_episode == EPMEM_MEMID_NONE || current_score > best_score) {
    best_episode=current_episode;
    best_score=current_score;
    best_cardinality=current_cardinality;
    new_king=true;
  }
  if (current_cardinality == perfect_cardinality) {
    boolean graph_matched=false;
    if (do_graph_match) {
      if (gm_order == DefaultEpisodicMemoryParams.GmOrderingChoices.undefined) {
        Collections.shuffle(gm_ordering,random);
      }
 else       if (gm_order == DefaultEpisodicMemoryParams.GmOrderingChoices.mcv) {
        Collections.sort(gm_ordering,new Comparator<EpmemLiteral>(){
          @Override public int compare(          EpmemLiteral a,          EpmemLiteral b){
            return (a.matches.size() < b.matches.size() ? -1 : 1);
          }
        }
);
      }
      best_bindings.clear();
      @SuppressWarnings(""String_Node_Str"") Map<Long,SymbolImpl>[] bound_nodes=(Map<Long,SymbolImpl>[])new Map[2];
      for (int i=0; i < bound_nodes.length; i++) {
        bound_nodes[i]=new LinkedHashMap<Long,SymbolImpl>();
      }
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
        logger.debug(epmem_print_retrieval_state(literal_cache,pedge_caches,uedge_caches));
      }
      stats.graph_matches.set(stats.graph_matches.get() + 1);
      stats.last_graph_matches.set(stats.last_graph_matches.get() + 1);
      graph_matched=epmem_graph_match(gm_ordering,gm_ordering.listIterator(),best_bindings,bound_nodes,2);
    }
    if (!do_graph_match || graph_matched) {
      best_episode=current_episode;
      best_graph_matched=true;
      current_episode=EPMEM_MEMID_NONE;
      new_king=true;
    }
  }
  if (new_king) {
    trace.startNewLine().print(Category.EPMEM,""String_Node_Str"" + Boolean.toString(current_cardinality == perfect_cardinality) + ""String_Node_Str""+ Boolean.toString(best_graph_matched)+ ""String_Node_Str"");
  }
}
if (current_episode == EPMEM_MEMID_NONE) {
  break;
}
 else {
  current_episode=next_episode;
}
}
}
if (best_episode == EPMEM_MEMID_NONE) {
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_failure,pos_query);
if (neg_query != null) {
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_failure,neg_query);
}
}
 else {
stats.qry_ret.set(best_episode);
stats.qry_card.set(best_cardinality);
SymbolImpl temp_sym;
Map<Long,SymbolImpl> node_map_map=new LinkedHashMap<Long,SymbolImpl>();
Map<Long,SymbolImpl> node_mem_map=new LinkedHashMap<Long,SymbolImpl>();
temp_sym=symbols.createInteger(leaf_literals.size());
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_cue_size,temp_sym);
temp_sym=symbols.createInteger(best_cardinality);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_match_cardinality,temp_sym);
temp_sym=symbols.createDouble(best_score);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_match_score,temp_sym);
temp_sym=symbols.createDouble(best_score / perfect_score);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_normalized_match_score,temp_sym);
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_success,pos_query);
if (neg_query != null) {
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_success,neg_query);
}
if (do_graph_match) {
temp_sym=symbols.createInteger((best_graph_matched ? 1 : 0));
epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_graph_match,temp_sym);
if (best_graph_matched) {
  @SuppressWarnings(""String_Node_Str"") int levelLocal=epmem_info(state).epmem_result_header.level;
  SymbolImpl mapping=symbols.make_new_identifier('M',level);
  epmem_buffer_add_wme(meta_wmes,epmem_info(state).epmem_result_header,predefinedSyms.epmem_sym_graph_match_mapping,mapping);
  for (  Entry<EpmemLiteral,EpmemNodePair> iter : best_bindings.entrySet()) {
    if (iter.getKey().value_is_id != 0) {
      temp_sym=symbols.make_new_identifier('N',level);
      epmem_buffer_add_wme(meta_wmes,mapping,predefinedSyms.epmem_sym_graph_match_mapping_node,temp_sym);
      epmem_buffer_add_wme(meta_wmes,temp_sym,predefinedSyms.epmem_sym_graph_match_mapping_cue,iter.getKey().value_sym);
      node_map_map.put(iter.getValue().second,temp_sym);
      node_mem_map.put(iter.getValue().second,null);
    }
  }
}
}
if (level > 2) {
epmem_install_memory(state,best_episode,meta_wmes,retrieval_wmes,node_mem_map);
}
if (best_graph_matched) {
for (Entry<Long,SymbolImpl> iter : node_mem_map.entrySet()) {
  SymbolImpl map_iter=node_map_map.get(iter.getKey());
  if (map_iter != null && iter.getValue() != null) {
    epmem_buffer_add_wme(meta_wmes,map_iter,predefinedSyms.epmem_sym_retrieved,iter.getValue());
  }
}
}
}
}
for (EpmemInterval interval : interval_cleanup) {
if (interval.sqlResult != null) {
interval.sqlResult.close();
interval.sqlResult=null;
}
}
for (int type=EPMEM_RIT_STATE_NODE; type <= EPMEM_RIT_STATE_EDGE; type++) {
for (EpmemPEdge pedge : pedge_caches[type].values()) {
if (pedge.sqlResults != null) {
pedge.sqlResults.close();
}
}
}
}",0.9760510155880964
12153,"/** 
 * Spawns a child JVM for the test and waits for it to exit.
 * @param test The test to run
 * @param jsoar Whether this is a JSoar or CSoar test
 * @return Whether the run was successful or not
 */
private int spawnChildJVMForTest(Configuration.ConfigurationTest test,boolean jsoar){
  List<String> arguments=new ArrayList<String>();
  URL baseURL=PerformanceTesting.class.getProtectionDomain().getCodeSource().getLocation();
  String jarPath=null;
  try {
    jarPath=new File(baseURL.toURI().getPath()).getCanonicalPath();
  }
 catch (  IOException|URISyntaxException e1) {
    throw new AssertionError(e1);
  }
  jarPath=jarPath.replace(""String_Node_Str"",""String_Node_Str"");
  if (jarPath.endsWith(""String_Node_Str"") != true) {
    String originalPath=jarPath;
    jarPath+=""String_Node_Str"";
    jarPath+=originalPath + ""String_Node_Str"";
    File directory=new File(originalPath + ""String_Node_Str"");
    File[] listOfFiles=directory.listFiles();
    for (    File file : listOfFiles) {
      if (file.isFile()) {
        String path=file.getPath();
        if (!path.endsWith(""String_Node_Str"")) {
          continue;
        }
        path=path.replace(""String_Node_Str"",""String_Node_Str"");
        jarPath+=path + ""String_Node_Str"";
      }
    }
    directory=new File(originalPath + ""String_Node_Str"");
    listOfFiles=directory.listFiles();
    for (    File file : listOfFiles) {
      if (file.isFile()) {
        String path=file.getPath();
        if (!path.endsWith(""String_Node_Str"")) {
          continue;
        }
        path=path.replace(""String_Node_Str"",""String_Node_Str"");
        jarPath+=path + ""String_Node_Str"";
      }
    }
  }
  arguments.add(""String_Node_Str"");
  arguments.addAll(Arrays.asList(test.getTestSettings().getJVMSettings().split(""String_Node_Str"")));
  arguments.add(""String_Node_Str"");
  arguments.add(""String_Node_Str"" + jarPath + ""String_Node_Str"");
  arguments.add(PerformanceTesting.class.getCanonicalName());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestFile());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestSettings().getCSVDirectory());
  arguments.add(""String_Node_Str"");
  arguments.add(new Integer(test.getTestSettings().getWarmUpCount()).toString());
  arguments.add(""String_Node_Str"");
  arguments.add(new Integer(test.getTestSettings().getDecisionCycles()).toString());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestName());
  arguments.add(""String_Node_Str"");
  arguments.add(""String_Node_Str"");
  int exitCode=0;
  if (jsoar) {
    arguments.add(""String_Node_Str"");
    exitCode=runJVM(test,arguments);
  }
 else {
    arguments.add(""String_Node_Str"");
    for (    String path : csoarPaths) {
      List<String> argumentsPerTest=new ArrayList<String>(arguments);
      argumentsPerTest.add(""String_Node_Str"" + path + ""String_Node_Str"");
      exitCode=runJVM(test,argumentsPerTest);
    }
  }
  if (exitCode != 0) {
    return EXIT_FAILURE_TEST;
  }
 else {
    return EXIT_SUCCESS;
  }
}","/** 
 * Spawns a child JVM for the test and waits for it to exit.
 * @param test The test to run
 * @param jsoar Whether this is a JSoar or CSoar test
 * @return Whether the run was successful or not
 */
private int spawnChildJVMForTest(Configuration.ConfigurationTest test,boolean jsoar){
  List<String> arguments=new ArrayList<String>();
  URL baseURL=PerformanceTesting.class.getProtectionDomain().getCodeSource().getLocation();
  String jarPath=null;
  try {
    jarPath=new File(baseURL.toURI().getPath()).getCanonicalPath();
  }
 catch (  IOException|URISyntaxException e1) {
    throw new AssertionError(e1);
  }
  jarPath=jarPath.replace(""String_Node_Str"",""String_Node_Str"");
  if (jarPath.endsWith(""String_Node_Str"") != true) {
    String originalPath=jarPath;
    jarPath+=""String_Node_Str"";
    jarPath+=originalPath + ""String_Node_Str"";
    File directory=new File(originalPath + ""String_Node_Str"");
    File[] listOfFiles=directory.listFiles();
    for (    File file : listOfFiles) {
      if (file.isFile()) {
        String path=file.getPath();
        if (!path.endsWith(""String_Node_Str"")) {
          continue;
        }
        path=path.replace(""String_Node_Str"",""String_Node_Str"");
        jarPath+=path + ""String_Node_Str"";
      }
    }
    directory=new File(originalPath + ""String_Node_Str"");
    listOfFiles=directory.listFiles();
    for (    File file : listOfFiles) {
      if (file.isFile()) {
        String path=file.getPath();
        if (!path.endsWith(""String_Node_Str"")) {
          continue;
        }
        path=path.replace(""String_Node_Str"",""String_Node_Str"");
        jarPath+=path + ""String_Node_Str"";
      }
    }
  }
  arguments.add(""String_Node_Str"");
  arguments.addAll(Arrays.asList(test.getTestSettings().getJVMSettings().split(""String_Node_Str"")));
  arguments.add(""String_Node_Str"");
  arguments.add(""String_Node_Str"" + jarPath + ""String_Node_Str"");
  arguments.add(PerformanceTesting.class.getCanonicalName());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestFile());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestSettings().getCSVDirectory());
  arguments.add(""String_Node_Str"");
  arguments.add(new Integer(test.getTestSettings().getWarmUpCount()).toString());
  arguments.add(""String_Node_Str"");
  arguments.add(new Integer(test.getTestSettings().getDecisionCycles()).toString());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestName());
  arguments.add(""String_Node_Str"");
  arguments.add(""String_Node_Str"");
  int exitCode=0;
  if (jsoar) {
    arguments.add(""String_Node_Str"");
    exitCode=runJVM(test,arguments);
  }
 else {
    arguments.add(""String_Node_Str"");
    for (    String path : test.getTestSettings().getCSoarVersions()) {
      List<String> argumentsPerTest=new ArrayList<String>(arguments);
      argumentsPerTest.add(""String_Node_Str"" + path + ""String_Node_Str"");
      exitCode=runJVM(test,argumentsPerTest);
    }
  }
  if (exitCode != 0) {
    return EXIT_FAILURE_TEST;
  }
 else {
    return EXIT_SUCCESS;
  }
}",0.9915772089182494
12154,"private int parseConfiguration(OptionProcessor<Options> options){
  String configurationPath=options.get(Options.Configuration);
  if (!configurationPath.endsWith(""String_Node_Str"")) {
    out.println(""String_Node_Str"");
    return EXIT_FAILURE_CONFIGURATION;
  }
  Configuration config=new Configuration(configurationPath);
  int result=Configuration.PARSE_FAILURE;
  try {
    result=config.parse();
  }
 catch (  IOException|UnknownPropertyException|InvalidTestNameException|MalformedTestCategory e) {
    out.println(e.getMessage());
    return EXIT_FAILURE;
  }
  if (result != Configuration.PARSE_SUCCESS) {
    out.println(""String_Node_Str"");
    return EXIT_FAILURE_CONFIGURATION;
  }
  defaultTestSettings=config.getDefaultSettings();
  if (!defaultTestSettings.isJSoarEnabled() && !defaultTestSettings.isCSoarEnabled()) {
    out.println(""String_Node_Str"");
    defaultTestSettings.setJSoarEnabled(true);
  }
  if (defaultTestSettings.isCSoarEnabled()) {
    csoarPaths=defaultTestSettings.getCSoarVersions();
  }
  configurationTests=config.getConfigurationTests();
  return NON_EXIT;
}","private int parseConfiguration(OptionProcessor<Options> options){
  String configurationPath=options.get(Options.Configuration);
  if (!configurationPath.endsWith(""String_Node_Str"")) {
    out.println(""String_Node_Str"");
    return EXIT_FAILURE_CONFIGURATION;
  }
  Configuration config=new Configuration(configurationPath);
  int result=Configuration.PARSE_FAILURE;
  try {
    result=config.parse();
  }
 catch (  IOException|UnknownPropertyException|InvalidTestNameException|MalformedTestCategory e) {
    out.println(e.getMessage());
    return EXIT_FAILURE;
  }
  if (result != Configuration.PARSE_SUCCESS) {
    out.println(""String_Node_Str"");
    return EXIT_FAILURE_CONFIGURATION;
  }
  defaultTestSettings=config.getDefaultSettings();
  if (!defaultTestSettings.isJSoarEnabled() && !defaultTestSettings.isCSoarEnabled()) {
    out.println(""String_Node_Str"");
    defaultTestSettings.setJSoarEnabled(true);
  }
  configurationTests=config.getConfigurationTests();
  return NON_EXIT;
}",0.8846337960746768
12155,"/** 
 * Spawns a child JVM for the test and waits for it to exit.
 * @param test The test to run
 * @param jsoar Whether this is a JSoar or CSoar test
 * @return Whether the run was successful or not
 */
private int spawnChildJVMForTest(Configuration.ConfigurationTest test,boolean jsoar){
  List<String> arguments=new ArrayList<String>();
  URL baseURL=PerformanceTesting.class.getProtectionDomain().getCodeSource().getLocation();
  String jarPath=null;
  try {
    jarPath=new File(baseURL.toURI().getPath()).getCanonicalPath();
  }
 catch (  IOException|URISyntaxException e1) {
    throw new AssertionError(e1);
  }
  jarPath=jarPath.replace(""String_Node_Str"",""String_Node_Str"");
  if (jarPath.endsWith(""String_Node_Str"") != true) {
    String originalPath=jarPath;
    jarPath+=""String_Node_Str"";
    jarPath+=originalPath + ""String_Node_Str"";
    File directory=new File(originalPath + ""String_Node_Str"");
    File[] listOfFiles=directory.listFiles();
    for (    File file : listOfFiles) {
      if (file.isFile()) {
        String path=file.getPath();
        if (!path.endsWith(""String_Node_Str"")) {
          continue;
        }
        path=path.replace(""String_Node_Str"",""String_Node_Str"");
        jarPath+=path + ""String_Node_Str"";
      }
    }
    directory=new File(originalPath + ""String_Node_Str"");
    listOfFiles=directory.listFiles();
    for (    File file : listOfFiles) {
      if (file.isFile()) {
        String path=file.getPath();
        if (!path.endsWith(""String_Node_Str"")) {
          continue;
        }
        path=path.replace(""String_Node_Str"",""String_Node_Str"");
        jarPath+=path + ""String_Node_Str"";
      }
    }
  }
  arguments.add(""String_Node_Str"");
  arguments.addAll(Arrays.asList(test.getTestSettings().getJVMSettings().split(""String_Node_Str"")));
  arguments.add(""String_Node_Str"");
  arguments.add(""String_Node_Str"" + jarPath + ""String_Node_Str"");
  arguments.add(PerformanceTesting.class.getCanonicalName());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestFile());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestSettings().getCSVDirectory());
  arguments.add(""String_Node_Str"");
  arguments.add(new Integer(test.getTestSettings().getWarmUpCount()).toString());
  arguments.add(""String_Node_Str"");
  arguments.add(new Integer(test.getTestSettings().getDecisionCycles()).toString());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestName());
  arguments.add(""String_Node_Str"");
  arguments.add(""String_Node_Str"");
  int exitCode=0;
  if (jsoar) {
    arguments.add(""String_Node_Str"");
    exitCode=runJVM(test,arguments);
  }
 else {
    arguments.add(""String_Node_Str"");
    for (    String path : test.getTestSettings().getCSoarVersions()) {
      List<String> argumentsPerTest=new ArrayList<String>(arguments);
      argumentsPerTest.add(""String_Node_Str"" + path + ""String_Node_Str"");
      exitCode=runJVM(test,argumentsPerTest);
    }
  }
  if (exitCode != 0) {
    return EXIT_FAILURE_TEST;
  }
 else {
    return EXIT_SUCCESS;
  }
}","/** 
 * Spawns a child JVM for the test and waits for it to exit.
 * @param test The test to run
 * @param jsoar Whether this is a JSoar or CSoar test
 * @return Whether the run was successful or not
 */
private int spawnChildJVMForTest(Configuration.ConfigurationTest test,boolean jsoar){
  List<String> arguments=new ArrayList<String>();
  URL baseURL=PerformanceTesting.class.getProtectionDomain().getCodeSource().getLocation();
  String jarPath=null;
  try {
    jarPath=new File(baseURL.toURI().getPath()).getCanonicalPath();
  }
 catch (  IOException|URISyntaxException e1) {
    throw new AssertionError(e1);
  }
  jarPath=jarPath.replace(""String_Node_Str"",""String_Node_Str"");
  if (jarPath.endsWith(""String_Node_Str"") != true) {
    Character pathSeperator=File.pathSeparatorChar;
    String originalPath=jarPath;
    jarPath+=pathSeperator;
    jarPath+=originalPath + ""String_Node_Str"";
    File directory=new File(originalPath + ""String_Node_Str"");
    File[] listOfFiles=directory.listFiles();
    for (    File file : listOfFiles) {
      if (file.isFile()) {
        String path=file.getPath();
        if (!path.endsWith(""String_Node_Str"")) {
          continue;
        }
        path=path.replace(""String_Node_Str"",""String_Node_Str"");
        jarPath+=path + pathSeperator;
      }
    }
    directory=new File(originalPath + ""String_Node_Str"");
    listOfFiles=directory.listFiles();
    for (    File file : listOfFiles) {
      if (file.isFile()) {
        String path=file.getPath();
        if (!path.endsWith(""String_Node_Str"")) {
          continue;
        }
        path=path.replace(""String_Node_Str"",""String_Node_Str"");
        jarPath+=path + pathSeperator;
      }
    }
  }
  arguments.add(""String_Node_Str"");
  arguments.addAll(Arrays.asList(test.getTestSettings().getJVMSettings().split(""String_Node_Str"")));
  arguments.add(""String_Node_Str"");
  arguments.add(""String_Node_Str"" + jarPath + ""String_Node_Str"");
  arguments.add(PerformanceTesting.class.getCanonicalName());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestFile());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestSettings().getCSVDirectory());
  arguments.add(""String_Node_Str"");
  arguments.add(new Integer(test.getTestSettings().getWarmUpCount()).toString());
  arguments.add(""String_Node_Str"");
  arguments.add(new Integer(test.getTestSettings().getDecisionCycles()).toString());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestName());
  arguments.add(""String_Node_Str"");
  arguments.add(""String_Node_Str"");
  int exitCode=0;
  if (jsoar) {
    arguments.add(""String_Node_Str"");
    exitCode=runJVM(test,arguments);
  }
 else {
    arguments.add(""String_Node_Str"");
    for (    String path : test.getTestSettings().getCSoarVersions()) {
      List<String> argumentsPerTest=new ArrayList<String>(arguments);
      argumentsPerTest.add(""String_Node_Str"" + path + ""String_Node_Str"");
      exitCode=runJVM(test,argumentsPerTest);
    }
  }
  if (exitCode != 0) {
    return EXIT_FAILURE_TEST;
  }
 else {
    return EXIT_SUCCESS;
  }
}",0.9768201110022854
12156,"/** 
 * Spawns a child JVM for the test and waits for it to exit.
 * @param test The test to run
 * @param jsoar Whether this is a JSoar or CSoar test
 * @return Whether the run was successful or not
 */
private int spawnChildJVMForTest(Configuration.ConfigurationTest test,boolean jsoar){
  List<String> arguments=new ArrayList<String>();
  URL baseURL=PerformanceTesting.class.getProtectionDomain().getCodeSource().getLocation();
  String jarPath=null;
  try {
    jarPath=new File(baseURL.toURI().getPath()).getCanonicalPath();
  }
 catch (  IOException|URISyntaxException e1) {
    throw new AssertionError(e1);
  }
  jarPath=jarPath.replace(""String_Node_Str"",""String_Node_Str"");
  if (jarPath.endsWith(""String_Node_Str"") != true) {
    Character pathSeperator=File.pathSeparatorChar;
    String originalPath=jarPath;
    jarPath+=pathSeperator;
    jarPath+=originalPath + ""String_Node_Str"" + pathSeperator;
    File directory=new File(originalPath + ""String_Node_Str"");
    File[] listOfFiles=directory.listFiles();
    for (    File file : listOfFiles) {
      if (file.isFile()) {
        String path=file.getPath();
        if (!path.endsWith(""String_Node_Str"")) {
          continue;
        }
        path=path.replace(""String_Node_Str"",""String_Node_Str"");
        jarPath+=path + pathSeperator;
      }
    }
    directory=new File(originalPath + ""String_Node_Str"");
    listOfFiles=directory.listFiles();
    for (    File file : listOfFiles) {
      if (file.isFile()) {
        String path=file.getPath();
        if (!path.endsWith(""String_Node_Str"")) {
          continue;
        }
        path=path.replace(""String_Node_Str"",""String_Node_Str"");
        jarPath+=path + pathSeperator;
      }
    }
  }
  arguments.add(""String_Node_Str"");
  arguments.addAll(Arrays.asList(test.getTestSettings().getJVMSettings().split(""String_Node_Str"")));
  arguments.add(""String_Node_Str"");
  arguments.add(jarPath);
  arguments.add(PerformanceTesting.class.getCanonicalName());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestFile());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestSettings().getCSVDirectory());
  arguments.add(""String_Node_Str"");
  arguments.add(new Integer(test.getTestSettings().getWarmUpCount()).toString());
  arguments.add(""String_Node_Str"");
  arguments.add(new Integer(test.getTestSettings().getDecisionCycles()).toString());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestName());
  arguments.add(""String_Node_Str"");
  arguments.add(""String_Node_Str"");
  int exitCode=0;
  if (jsoar) {
    arguments.add(""String_Node_Str"");
    exitCode=runJVM(test,arguments);
  }
 else {
    arguments.add(""String_Node_Str"");
    for (    String path : test.getTestSettings().getCSoarVersions()) {
      List<String> argumentsPerTest=new ArrayList<String>(arguments);
      argumentsPerTest.add(""String_Node_Str"" + path + ""String_Node_Str"");
      exitCode=runJVM(test,argumentsPerTest);
    }
  }
  if (exitCode != 0) {
    return EXIT_FAILURE_TEST;
  }
 else {
    return EXIT_SUCCESS;
  }
}","/** 
 * Spawns a child JVM for the test and waits for it to exit.
 * @param test The test to run
 * @param jsoar Whether this is a JSoar or CSoar test
 * @return Whether the run was successful or not
 */
private int spawnChildJVMForTest(Configuration.ConfigurationTest test,boolean jsoar){
  List<String> arguments=new ArrayList<String>();
  URL baseURL=PerformanceTesting.class.getProtectionDomain().getCodeSource().getLocation();
  String jarPath=null;
  try {
    jarPath=new File(baseURL.toURI().getPath()).getCanonicalPath();
  }
 catch (  IOException|URISyntaxException e1) {
    throw new AssertionError(e1);
  }
  jarPath=jarPath.replace(""String_Node_Str"",""String_Node_Str"");
  if (jarPath.endsWith(""String_Node_Str"") != true) {
    Character pathSeperator=File.pathSeparatorChar;
    String originalPath=jarPath;
    jarPath+=pathSeperator;
    jarPath+=originalPath + ""String_Node_Str"" + pathSeperator;
    File directory=new File(originalPath + ""String_Node_Str"");
    File[] listOfFiles=directory.listFiles();
    for (    File file : listOfFiles) {
      if (file.isFile()) {
        String path=file.getPath();
        if (!path.endsWith(""String_Node_Str"")) {
          continue;
        }
        path=path.replace(""String_Node_Str"",""String_Node_Str"");
        jarPath+=path + pathSeperator;
      }
    }
    directory=new File(originalPath + ""String_Node_Str"");
    listOfFiles=directory.listFiles();
    for (    File file : listOfFiles) {
      if (file.isFile()) {
        String path=file.getPath();
        if (!path.endsWith(""String_Node_Str"")) {
          continue;
        }
        path=path.replace(""String_Node_Str"",""String_Node_Str"");
        jarPath+=path + pathSeperator;
      }
    }
  }
  arguments.add(""String_Node_Str"");
  arguments.addAll(Arrays.asList(test.getTestSettings().getJVMSettings().split(""String_Node_Str"")));
  arguments.add(""String_Node_Str"");
  arguments.add(jarPath);
  arguments.add(PerformanceTesting.class.getCanonicalName());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestFile());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestSettings().getCSVDirectory());
  arguments.add(""String_Node_Str"");
  arguments.add(new Integer(test.getTestSettings().getWarmUpCount()).toString());
  arguments.add(""String_Node_Str"");
  arguments.add(new Integer(test.getTestSettings().getDecisionCycles()).toString());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestName());
  arguments.add(""String_Node_Str"");
  arguments.add(""String_Node_Str"");
  int exitCode=0;
  if (jsoar) {
    arguments.add(""String_Node_Str"");
    exitCode=runJVM(test,arguments);
  }
 else {
    arguments.add(""String_Node_Str"");
    for (    String path : test.getTestSettings().getCSoarVersions()) {
      List<String> argumentsPerTest=new ArrayList<String>(arguments);
      argumentsPerTest.add(path);
      exitCode=runJVM(test,argumentsPerTest);
    }
  }
  if (exitCode != 0) {
    return EXIT_FAILURE_TEST;
  }
 else {
    return EXIT_SUCCESS;
  }
}",0.9921026653504442
12157,"/** 
 * Spawns a child JVM for the test and waits for it to exit.
 * @param test The test to run
 * @param jsoar Whether this is a JSoar or CSoar test
 * @return Whether the run was successful or not
 */
private int spawnChildJVMForTest(Configuration.ConfigurationTest test,boolean jsoar){
  List<String> arguments=new ArrayList<String>();
  URL baseURL=PerformanceTesting.class.getProtectionDomain().getCodeSource().getLocation();
  String jarPath=null;
  try {
    jarPath=new File(baseURL.toURI().getPath()).getCanonicalPath();
  }
 catch (  IOException|URISyntaxException e1) {
    throw new AssertionError(e1);
  }
  jarPath=jarPath.replace(""String_Node_Str"",""String_Node_Str"");
  if (jarPath.endsWith(""String_Node_Str"") != true) {
    Character pathSeperator=File.pathSeparatorChar;
    String originalPath=jarPath;
    jarPath+=pathSeperator;
    jarPath+=originalPath + ""String_Node_Str"";
    File directory=new File(originalPath + ""String_Node_Str"");
    File[] listOfFiles=directory.listFiles();
    for (    File file : listOfFiles) {
      if (file.isFile()) {
        String path=file.getPath();
        if (!path.endsWith(""String_Node_Str"")) {
          continue;
        }
        path=path.replace(""String_Node_Str"",""String_Node_Str"");
        jarPath+=path + pathSeperator;
      }
    }
    directory=new File(originalPath + ""String_Node_Str"");
    listOfFiles=directory.listFiles();
    for (    File file : listOfFiles) {
      if (file.isFile()) {
        String path=file.getPath();
        if (!path.endsWith(""String_Node_Str"")) {
          continue;
        }
        path=path.replace(""String_Node_Str"",""String_Node_Str"");
        jarPath+=path + pathSeperator;
      }
    }
  }
  arguments.add(""String_Node_Str"");
  arguments.addAll(Arrays.asList(test.getTestSettings().getJVMSettings().split(""String_Node_Str"")));
  arguments.add(""String_Node_Str"");
  arguments.add(""String_Node_Str"" + jarPath + ""String_Node_Str"");
  arguments.add(PerformanceTesting.class.getCanonicalName());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestFile());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestSettings().getCSVDirectory());
  arguments.add(""String_Node_Str"");
  arguments.add(new Integer(test.getTestSettings().getWarmUpCount()).toString());
  arguments.add(""String_Node_Str"");
  arguments.add(new Integer(test.getTestSettings().getDecisionCycles()).toString());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestName());
  arguments.add(""String_Node_Str"");
  arguments.add(""String_Node_Str"");
  int exitCode=0;
  if (jsoar) {
    arguments.add(""String_Node_Str"");
    exitCode=runJVM(test,arguments);
  }
 else {
    arguments.add(""String_Node_Str"");
    for (    String path : test.getTestSettings().getCSoarVersions()) {
      List<String> argumentsPerTest=new ArrayList<String>(arguments);
      argumentsPerTest.add(""String_Node_Str"" + path + ""String_Node_Str"");
      exitCode=runJVM(test,argumentsPerTest);
    }
  }
  if (exitCode != 0) {
    return EXIT_FAILURE_TEST;
  }
 else {
    return EXIT_SUCCESS;
  }
}","/** 
 * Spawns a child JVM for the test and waits for it to exit.
 * @param test The test to run
 * @param jsoar Whether this is a JSoar or CSoar test
 * @return Whether the run was successful or not
 */
private int spawnChildJVMForTest(Configuration.ConfigurationTest test,boolean jsoar){
  List<String> arguments=new ArrayList<String>();
  URL baseURL=PerformanceTesting.class.getProtectionDomain().getCodeSource().getLocation();
  String jarPath=null;
  try {
    jarPath=new File(baseURL.toURI().getPath()).getCanonicalPath();
  }
 catch (  IOException|URISyntaxException e1) {
    throw new AssertionError(e1);
  }
  jarPath=jarPath.replace(""String_Node_Str"",""String_Node_Str"");
  if (jarPath.endsWith(""String_Node_Str"") != true) {
    Character pathSeperator=File.pathSeparatorChar;
    String originalPath=jarPath;
    jarPath+=pathSeperator;
    jarPath+=originalPath + ""String_Node_Str"";
    File directory=new File(originalPath + ""String_Node_Str"");
    File[] listOfFiles=directory.listFiles();
    for (    File file : listOfFiles) {
      if (file.isFile()) {
        String path=file.getPath();
        if (!path.endsWith(""String_Node_Str"")) {
          continue;
        }
        path=path.replace(""String_Node_Str"",""String_Node_Str"");
        jarPath+=path + pathSeperator;
      }
    }
    directory=new File(originalPath + ""String_Node_Str"");
    listOfFiles=directory.listFiles();
    for (    File file : listOfFiles) {
      if (file.isFile()) {
        String path=file.getPath();
        if (!path.endsWith(""String_Node_Str"")) {
          continue;
        }
        path=path.replace(""String_Node_Str"",""String_Node_Str"");
        jarPath+=path + pathSeperator;
      }
    }
  }
  arguments.add(""String_Node_Str"");
  arguments.addAll(Arrays.asList(test.getTestSettings().getJVMSettings().split(""String_Node_Str"")));
  arguments.add(""String_Node_Str"");
  arguments.add(jarPath);
  arguments.add(PerformanceTesting.class.getCanonicalName());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestFile());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestSettings().getCSVDirectory());
  arguments.add(""String_Node_Str"");
  arguments.add(new Integer(test.getTestSettings().getWarmUpCount()).toString());
  arguments.add(""String_Node_Str"");
  arguments.add(new Integer(test.getTestSettings().getDecisionCycles()).toString());
  arguments.add(""String_Node_Str"");
  arguments.add(test.getTestName());
  arguments.add(""String_Node_Str"");
  arguments.add(""String_Node_Str"");
  int exitCode=0;
  if (jsoar) {
    arguments.add(""String_Node_Str"");
    exitCode=runJVM(test,arguments);
  }
 else {
    arguments.add(""String_Node_Str"");
    for (    String path : test.getTestSettings().getCSoarVersions()) {
      List<String> argumentsPerTest=new ArrayList<String>(arguments);
      argumentsPerTest.add(""String_Node_Str"" + path + ""String_Node_Str"");
      exitCode=runJVM(test,argumentsPerTest);
    }
  }
  if (exitCode != 0) {
    return EXIT_FAILURE_TEST;
  }
 else {
    return EXIT_SUCCESS;
  }
}",0.9934704538034608
12158,"public Symbol readIdentifierOrContextVariable(String t){
  ContextVariableInfo info=ContextVariableInfo.get(predefinedSyms,decider.top_goal,decider.bottom_goal,t);
  if (info.getValue() != null) {
    return info.getValue();
  }
  if (t.length() < 2 || !Character.isLetter(t.charAt(0)))   return null;
  final char letter=Character.toUpperCase(t.charAt(0));
  long number=1;
  try {
    number=Long.parseLong(t.substring(1));
  }
 catch (  NumberFormatException e) {
    return null;
  }
  return syms.findIdentifier(letter,number);
}","public Symbol readIdentifierOrContextVariable(String t){
  ContextVariableInfo info=ContextVariableInfo.get(predefinedSyms,decider.top_goal,decider.bottom_goal,t);
  if (info.getValue() != null) {
    return info.getValue();
  }
  if (t.charAt(0) == '@') {
    t=t.substring(1);
  }
  if (t.length() < 2 || !Character.isLetter(t.charAt(0))) {
    return null;
  }
  final char letter=Character.toUpperCase(t.charAt(0));
  long number=1;
  try {
    number=Long.parseLong(t.substring(1));
  }
 catch (  NumberFormatException e) {
    return null;
  }
  return syms.findIdentifier(letter,number);
}",0.9203539823008848
12159,"/** 
 * Make sure an URL is normalized, i.e. does not contain any .. or . path components.
 * @param url the url to normalize
 * @return normalized URL
 * @throws SoarException if there are any problems with the URL
 */
private URL normalizeUrl(URL url) throws SoarException {
  try {
    return url.toURI().normalize().toURL();
  }
 catch (  MalformedURLException e) {
    throw new SoarException(e.getMessage(),e);
  }
catch (  URISyntaxException e) {
    throw new SoarException(e.getMessage(),e);
  }
}","/** 
 * Make sure an URL is normalized, i.e. does not contain any .. or . path components.
 * @param url the url to normalize
 * @return normalized URL
 * @throws SoarException if there are any problems with the URL
 */
private URL normalizeUrl(URL url) throws SoarException {
  try {
    return (new URI(null,url.toString(),null)).normalize().toURL();
  }
 catch (  MalformedURLException e) {
    throw new SoarException(e.getMessage(),e);
  }
catch (  URISyntaxException e) {
    throw new SoarException(e.getMessage(),e);
  }
}",0.9652509652509652
12160,"/** 
 * soar_module:81: instantiation* make_fake_instantiation( agent* my_agent, Symbol* state, wme_set* conditions, symbol_triple_list* actions )
 * @param state
 * @param conditions
 * @param actions
 * @return
 */
public static Instantiation make_fake_instantiation(SymbolImpl state,Set<WmeImpl> conditions,List<SymbolTriple> actions){
  Instantiation inst=new Instantiation(null,null,null);
  inst.nextInProdList=inst.prevInProdList=null;
  inst.match_goal=state.asIdentifier();
  inst.match_goal_level=state.asIdentifier().level;
  inst.backtrace_number=0;
  inst.in_ms=false;
  inst.GDS_evaluated_already=false;
  inst.preferences_generated=null;
{
    Preference pref;
    for (    SymbolTriple a_it : actions) {
      pref=new Preference(PreferenceType.ACCEPTABLE,a_it.id.asIdentifier(),a_it.attr,a_it.value,null);
      pref.o_supported=true;
      pref.inst=inst;
      pref.inst_next=pref.inst_prev=null;
      pref.inst_next=inst.preferences_generated;
      pref.inst_prev=null;
      if (inst.preferences_generated != null) {
        inst.preferences_generated.inst_prev=pref;
      }
      inst.preferences_generated=pref;
    }
  }
{
    PositiveCondition cond=null;
    Condition prev_cond=null;
    for (    WmeImpl c_it : conditions) {
      cond=new PositiveCondition();
      cond.prev=prev_cond;
      cond.next=null;
      if (prev_cond != null) {
        prev_cond.next=cond;
      }
 else {
        inst.top_of_instantiated_conditions=cond;
        inst.bottom_of_instantiated_conditions=cond;
        inst.nots=null;
      }
      cond.id_test=c_it.id;
      cond.attr_test=c_it.attr;
      cond.value_test=c_it.value;
      cond.test_for_acceptable_preference=c_it.acceptable;
      final BackTraceInfo conditionBacktraceInfo=cond.bt();
      conditionBacktraceInfo.wme_=c_it;
      conditionBacktraceInfo.level=c_it.id.level;
      conditionBacktraceInfo.trace=c_it.preference;
      prev_cond=cond;
    }
  }
  return inst;
}","/** 
 * soar_module:81: instantiation* make_fake_instantiation( agent* my_agent, Symbol* state, wme_set* conditions, symbol_triple_list* actions )
 * @param state
 * @param conditions
 * @param actions
 * @return
 */
public static Instantiation make_fake_instantiation(SymbolImpl state,Set<WmeImpl> conditions,List<SymbolTriple> actions){
  Instantiation inst=new Instantiation(null,null,null);
  inst.nextInProdList=inst.prevInProdList=null;
  inst.match_goal=state.asIdentifier();
  inst.match_goal_level=state.asIdentifier().level;
  inst.backtrace_number=0;
  inst.in_ms=false;
  inst.GDS_evaluated_already=false;
  inst.preferences_generated=null;
{
    Preference pref;
    for (    SymbolTriple a_it : actions) {
      pref=new Preference(PreferenceType.ACCEPTABLE,a_it.id.asIdentifier(),a_it.attr,a_it.value,null);
      pref.o_supported=true;
      pref.inst=inst;
      pref.inst_next=pref.inst_prev=null;
      pref.inst_next=inst.preferences_generated;
      pref.inst_prev=null;
      if (inst.preferences_generated != null) {
        inst.preferences_generated.inst_prev=pref;
      }
      inst.preferences_generated=pref;
    }
  }
{
    PositiveCondition cond=null;
    Condition prev_cond=null;
    for (    WmeImpl c_it : conditions) {
      cond=new PositiveCondition();
      cond.prev=prev_cond;
      cond.next=null;
      if (prev_cond != null) {
        prev_cond.next=cond;
      }
 else {
        inst.top_of_instantiated_conditions=cond;
        inst.bottom_of_instantiated_conditions=cond;
        inst.nots=null;
      }
      cond.id_test=c_it.id;
      cond.attr_test=c_it.attr;
      cond.value_test=c_it.value;
      cond.test_for_acceptable_preference=c_it.acceptable;
      final BackTraceInfo conditionBacktraceInfo=cond.bt();
      conditionBacktraceInfo.wme_=c_it;
      conditionBacktraceInfo.level=c_it.id.level;
      conditionBacktraceInfo.trace=c_it.preference;
      if (cond.bt().trace != null) {
        if (!SoarConstants.DO_TOP_LEVEL_REF_CTS || inst.match_goal_level > SoarConstants.TOP_GOAL_LEVEL) {
          cond.bt().trace.preference_add_ref();
        }
      }
      prev_cond=cond;
    }
  }
  return inst;
}",0.935891209324915
12161,"/** 
 * <p>semantic_memory.cpp:1494:smem_install_memory
 * @param state
 * @param parent_id
 * @throws SQLException
 */
void smem_install_memory(IdentifierImpl state,long lti_id,IdentifierImpl lti,boolean activate_lti,List<SymbolTriple> meta_wmes,List<SymbolTriple> retrieval_wmes) throws SQLException {
  final SemanticMemoryStateInfo info=smem_info(state);
  final IdentifierImpl result_header=info.smem_result_header;
  boolean lti_created_here=false;
  if (lti == null) {
    db.lti_letter_num.setLong(1,lti_id);
    final ResultSet rs=db.lti_letter_num.executeQuery();
    try {
      if (!rs.next()) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      ;
      lti=smem_lti_soar_make(lti_id,(char)rs.getLong(0 + 1),rs.getLong(1 + 1),result_header.level);
    }
  finally {
      rs.close();
    }
    lti_created_here=true;
  }
  if (activate_lti) {
    smem_lti_activate(lti_id,true);
  }
  smem_buffer_add_wme(meta_wmes,result_header,predefinedSyms.smem_sym_retrieved,lti);
  if (lti_created_here) {
  }
  if ((this.params.merge.get() == MergeChoices.add) || ((lti.goalInfo.getImpasseWmes() == null) && (lti.getInputWmes() == null) && (lti.slots == null))) {
    db.web_expand.setLong(1,lti_id);
    final ResultSet rs=db.web_expand.executeQuery();
    try {
      while (rs.next()) {
        final SymbolImpl attr_sym=smem_reverse_hash(rs.getInt(0 + 1),rs.getLong(1 + 1));
        final SymbolImpl value_sym;
        final long lti_rs=rs.getLong(6 + 1);
        if (lti_rs != SMEM_AUGMENTATIONS_NULL) {
          value_sym=smem_lti_soar_make(lti_rs,(char)rs.getLong(4 + 1),rs.getLong(5 + 1),lti.level);
        }
 else {
          value_sym=smem_reverse_hash(rs.getInt(2 + 1),rs.getLong(3 + 1));
        }
        smem_buffer_add_wme(retrieval_wmes,lti,attr_sym,value_sym);
      }
    }
  finally {
      rs.close();
    }
  }
}","/** 
 * <p>semantic_memory.cpp:1494:smem_install_memory
 * @param state
 * @param parent_id
 * @throws SQLException
 */
void smem_install_memory(IdentifierImpl state,long lti_id,IdentifierImpl lti,boolean activate_lti,List<SymbolTriple> meta_wmes,List<SymbolTriple> retrieval_wmes) throws SQLException {
  final SemanticMemoryStateInfo info=smem_info(state);
  final IdentifierImpl result_header=info.smem_result_header;
  boolean lti_created_here=false;
  if (lti == null) {
    db.lti_letter_num.setLong(1,lti_id);
    final ResultSet rs=db.lti_letter_num.executeQuery();
    try {
      if (!rs.next()) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      ;
      lti=smem_lti_soar_make(lti_id,(char)rs.getLong(0 + 1),rs.getLong(1 + 1),result_header.level);
    }
  finally {
      rs.close();
    }
    lti_created_here=true;
  }
  if (activate_lti) {
    smem_lti_activate(lti_id,true);
  }
  smem_buffer_add_wme(meta_wmes,result_header,predefinedSyms.smem_sym_retrieved,lti);
  if (lti_created_here) {
  }
  if ((this.params.merge.get() == MergeChoices.add) || ((lti.goalInfo == null || lti.goalInfo.getImpasseWmes() == null) && (lti.getInputWmes() == null) && (lti.slots == null))) {
    db.web_expand.setLong(1,lti_id);
    final ResultSet rs=db.web_expand.executeQuery();
    try {
      while (rs.next()) {
        final SymbolImpl attr_sym=smem_reverse_hash(rs.getInt(0 + 1),rs.getLong(1 + 1));
        final SymbolImpl value_sym;
        final long lti_rs=rs.getLong(6 + 1);
        if (lti_rs != SMEM_AUGMENTATIONS_NULL) {
          value_sym=smem_lti_soar_make(lti_rs,(char)rs.getLong(4 + 1),rs.getLong(5 + 1),lti.level);
        }
 else {
          value_sym=smem_reverse_hash(rs.getInt(2 + 1),rs.getLong(3 + 1));
        }
        smem_buffer_add_wme(retrieval_wmes,lti,attr_sym,value_sym);
      }
    }
  finally {
      rs.close();
    }
  }
}",0.99359316604378
12162,"PreparedStatement smem_setup_web_crawl(WeightedCueElement el) throws SQLException {
  PreparedStatement q=null;
  if (el.element_type == smem_cue_element_type.attr_t) {
    q=db.web_attr_all;
  }
 else   if (el.element_type == smem_cue_element_type.value_const_t) {
    q=db.web_const_all;
    q.setLong(2,el.value_hash);
  }
 else   if (el.element_type == smem_cue_element_type.value_lti_t) {
    q=db.web_lti_all;
    q.setLong(2,el.value_lti);
  }
  q.setLong(1,el.value_hash);
  return q;
}","PreparedStatement smem_setup_web_crawl(WeightedCueElement el) throws SQLException {
  PreparedStatement q=null;
  if (el.element_type == smem_cue_element_type.attr_t) {
    q=db.web_attr_all;
  }
 else   if (el.element_type == smem_cue_element_type.value_const_t) {
    q=db.web_const_all;
    q.setLong(2,el.value_hash);
  }
 else   if (el.element_type == smem_cue_element_type.value_lti_t) {
    q=db.web_lti_all;
    q.setLong(2,el.value_lti);
  }
  q.setLong(1,el.attr_hash);
  return q;
}",0.9908814589665652
12163,"/** 
 * <p>semantic_memory.cpp:1494:smem_install_memory
 * @param state
 * @param parent_id
 * @throws SQLException
 */
void smem_install_memory(IdentifierImpl state,long lti_id,IdentifierImpl lti,boolean activate_lti,List<SymbolTriple> meta_wmes,List<SymbolTriple> retrieval_wmes) throws SQLException {
  final SemanticMemoryStateInfo info=smem_info(state);
  final IdentifierImpl result_header=info.smem_result_header;
  boolean lti_created_here=false;
  if (lti == null) {
    db.lti_letter_num.setLong(1,lti_id);
    final ResultSet rs=db.lti_letter_num.executeQuery();
    try {
      if (!rs.next()) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      ;
      lti=smem_lti_soar_make(lti_id,(char)rs.getLong(0 + 1),rs.getLong(1 + 1),result_header.level);
    }
  finally {
      rs.close();
    }
    lti_created_here=true;
  }
  if (activate_lti) {
    smem_lti_activate(lti_id,true);
  }
  smem_buffer_add_wme(meta_wmes,result_header,predefinedSyms.smem_sym_retrieved,lti);
  if (lti_created_here) {
  }
  if ((this.params.merge.get() == MergeChoices.add) || ((lti.goalInfo.getImpasseWmes() == null) && (lti.getInputWmes() == null) && (lti.slots == null))) {
    db.web_expand.setLong(1,lti_id);
    final ResultSet rs=db.web_expand.executeQuery();
    try {
      while (rs.next()) {
        final SymbolImpl attr_sym=smem_reverse_hash(rs.getInt(0 + 1),rs.getLong(1 + 1));
        final SymbolImpl value_sym;
        final long lti_rs=rs.getLong(6 + 1);
        if (lti_rs != SMEM_AUGMENTATIONS_NULL) {
          value_sym=smem_lti_soar_make(lti_id,(char)rs.getLong(4 + 1),rs.getLong(5 + 1),lti.level);
        }
 else {
          value_sym=smem_reverse_hash(rs.getInt(2 + 1),rs.getLong(3 + 1));
        }
        smem_buffer_add_wme(retrieval_wmes,lti,attr_sym,value_sym);
      }
    }
  finally {
      rs.close();
    }
  }
}","/** 
 * <p>semantic_memory.cpp:1494:smem_install_memory
 * @param state
 * @param parent_id
 * @throws SQLException
 */
void smem_install_memory(IdentifierImpl state,long lti_id,IdentifierImpl lti,boolean activate_lti,List<SymbolTriple> meta_wmes,List<SymbolTriple> retrieval_wmes) throws SQLException {
  final SemanticMemoryStateInfo info=smem_info(state);
  final IdentifierImpl result_header=info.smem_result_header;
  boolean lti_created_here=false;
  if (lti == null) {
    db.lti_letter_num.setLong(1,lti_id);
    final ResultSet rs=db.lti_letter_num.executeQuery();
    try {
      if (!rs.next()) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      ;
      lti=smem_lti_soar_make(lti_id,(char)rs.getLong(0 + 1),rs.getLong(1 + 1),result_header.level);
    }
  finally {
      rs.close();
    }
    lti_created_here=true;
  }
  if (activate_lti) {
    smem_lti_activate(lti_id,true);
  }
  smem_buffer_add_wme(meta_wmes,result_header,predefinedSyms.smem_sym_retrieved,lti);
  if (lti_created_here) {
  }
  if ((this.params.merge.get() == MergeChoices.add) || ((lti.goalInfo.getImpasseWmes() == null) && (lti.getInputWmes() == null) && (lti.slots == null))) {
    db.web_expand.setLong(1,lti_id);
    final ResultSet rs=db.web_expand.executeQuery();
    try {
      while (rs.next()) {
        final SymbolImpl attr_sym=smem_reverse_hash(rs.getInt(0 + 1),rs.getLong(1 + 1));
        final SymbolImpl value_sym;
        final long lti_rs=rs.getLong(6 + 1);
        if (lti_rs != SMEM_AUGMENTATIONS_NULL) {
          value_sym=smem_lti_soar_make(lti_rs,(char)rs.getLong(4 + 1),rs.getLong(5 + 1),lti.level);
        }
 else {
          value_sym=smem_reverse_hash(rs.getInt(2 + 1),rs.getLong(3 + 1));
        }
        smem_buffer_add_wme(retrieval_wmes,lti,attr_sym,value_sym);
      }
    }
  finally {
      rs.close();
    }
  }
}",0.99892530897367
12164,"/** 
 * activates a new or existing long-term identifier note: optional num_edges parameter saves us a lookup just when storing a new chunk (default is a big number that should never come up naturally and if it does, satisfies thresholding behavior).
 * @param lti
 * @param add_access
 * @param num_edges
 * @throws SoarException 
 * @throws SQLException 
 */
double smem_lti_activate(long lti,boolean add_access,long num_edges) throws SQLException {
  long time_now;
  if (add_access) {
    time_now=this.smem_max_cycle++;
    if ((this.params.activation_mode.get() == DefaultSemanticMemoryParams.ActivationChoices.base) && (this.params.base_update.get() == DefaultSemanticMemoryParams.BaseUpdateChoices.incremental)) {
      long time_diff;
      for (Iterator<Long> b=this.params.base_incremental_threshes.get().iterator(); b.hasNext(); ) {
        Long next=b.next();
        if (next > 0) {
          time_diff=(time_now - next);
          if (time_diff > 0) {
            List<Long> to_update=new ArrayList<Long>();
            ResultSet rs=null;
            try {
              db.lti_get_t.setLong(1,time_diff);
              rs=db.lti_get_t.executeQuery();
              while (rs.next()) {
                to_update.add(rs.getLong(0 + 1));
              }
            }
  finally {
              rs.close();
            }
            for (            Long l : to_update) {
              smem_lti_activate(l,false);
            }
          }
        }
      }
    }
  }
 else {
    time_now=smem_max_cycle;
    this.stats.act_updates.set(this.stats.act_updates.get() + 1);
  }
  long prev_access_n=0;
  long prev_access_t=0;
  long prev_access_1=0;
{
    ResultSet rs=null;
    try {
      db.lti_access_get.setLong(1,lti);
      rs=db.lti_access_get.executeQuery();
      prev_access_n=rs.getLong(0 + 1);
      prev_access_t=rs.getLong(1 + 1);
      prev_access_1=rs.getLong(2 + 2);
    }
  finally {
      rs.close();
    }
    if (add_access) {
      db.lti_access_set.setLong(1,(prev_access_n + 1));
      db.lti_access_set.setLong(2,time_now);
      db.lti_access_set.setLong(3,((prev_access_n == 0) ? (time_now) : (prev_access_1)));
      db.lti_access_set.setLong(4,lti);
      db.lti_access_set.executeUpdate();
    }
  }
  double new_activation=0.0;
  ActivationChoices act_mode=this.params.activation_mode.get();
  if (act_mode == ActivationChoices.recency) {
    new_activation=time_now;
  }
 else   if (act_mode == ActivationChoices.frequency) {
    new_activation=prev_access_n + ((add_access) ? (1) : (0));
  }
 else   if (act_mode == ActivationChoices.base) {
    if (prev_access_n == 0) {
      if (add_access) {
        db.history_add.setLong(1,lti);
        db.history_add.setLong(2,time_now);
        db.history_add.executeUpdate();
      }
      new_activation=0;
    }
 else {
      if (add_access) {
        db.history_push.setLong(1,time_now);
        db.history_push.setLong(2,lti);
        db.history_push.executeUpdate();
      }
      new_activation=smem_lti_calc_base(lti,time_now + ((add_access) ? (1) : (0)),prev_access_n + ((add_access) ? (1) : (0)),prev_access_1);
    }
  }
  if (num_edges == SMEM_ACT_MAX) {
    ResultSet rs=null;
    try {
      db.act_lti_child_ct_get.setLong(1,lti);
      rs=db.act_lti_child_ct_get.executeQuery();
      num_edges=rs.getLong(0 + 1);
    }
  finally {
      rs.close();
    }
  }
  if (num_edges < this.params.thresh.get()) {
    db.act_set.setDouble(1,new_activation);
    db.act_set.setLong(2,lti);
    db.act_set.executeUpdate();
  }
{
    db.act_lti_set.setDouble(1,new_activation);
    db.act_lti_set.setLong(2,lti);
    db.act_lti_set.executeUpdate();
  }
  return new_activation;
}","/** 
 * activates a new or existing long-term identifier note: optional num_edges parameter saves us a lookup just when storing a new chunk (default is a big number that should never come up naturally and if it does, satisfies thresholding behavior).
 * @param lti
 * @param add_access
 * @param num_edges
 * @throws SoarException 
 * @throws SQLException 
 */
double smem_lti_activate(long lti,boolean add_access,long num_edges) throws SQLException {
  long time_now;
  if (add_access) {
    time_now=this.smem_max_cycle++;
    if ((this.params.activation_mode.get() == DefaultSemanticMemoryParams.ActivationChoices.base) && (this.params.base_update.get() == DefaultSemanticMemoryParams.BaseUpdateChoices.incremental)) {
      long time_diff;
      for (Iterator<Long> b=this.params.base_incremental_threshes.get().iterator(); b.hasNext(); ) {
        Long next=b.next();
        if (next > 0) {
          time_diff=(time_now - next);
          if (time_diff > 0) {
            List<Long> to_update=new ArrayList<Long>();
            ResultSet rs=null;
            try {
              db.lti_get_t.setLong(1,time_diff);
              rs=db.lti_get_t.executeQuery();
              while (rs.next()) {
                to_update.add(rs.getLong(0 + 1));
              }
            }
  finally {
              rs.close();
            }
            for (            Long l : to_update) {
              smem_lti_activate(l,false);
            }
          }
        }
      }
    }
  }
 else {
    time_now=smem_max_cycle;
    this.stats.act_updates.set(this.stats.act_updates.get() + 1);
  }
  long prev_access_n=0;
  long prev_access_t=0;
  long prev_access_1=0;
{
    ResultSet rs=null;
    try {
      db.lti_access_get.setLong(1,lti);
      rs=db.lti_access_get.executeQuery();
      prev_access_n=rs.getLong(0 + 1);
      prev_access_t=rs.getLong(1 + 1);
      prev_access_1=rs.getLong(2 + 1);
    }
  finally {
      rs.close();
    }
    if (add_access) {
      db.lti_access_set.setLong(1,(prev_access_n + 1));
      db.lti_access_set.setLong(2,time_now);
      db.lti_access_set.setLong(3,((prev_access_n == 0) ? (time_now) : (prev_access_1)));
      db.lti_access_set.setLong(4,lti);
      db.lti_access_set.executeUpdate();
    }
  }
  double new_activation=0.0;
  ActivationChoices act_mode=this.params.activation_mode.get();
  if (act_mode == ActivationChoices.recency) {
    new_activation=time_now;
  }
 else   if (act_mode == ActivationChoices.frequency) {
    new_activation=prev_access_n + ((add_access) ? (1) : (0));
  }
 else   if (act_mode == ActivationChoices.base) {
    if (prev_access_n == 0) {
      if (add_access) {
        db.history_add.setLong(1,lti);
        db.history_add.setLong(2,time_now);
        db.history_add.executeUpdate();
      }
      new_activation=0;
    }
 else {
      if (add_access) {
        db.history_push.setLong(1,time_now);
        db.history_push.setLong(2,lti);
        db.history_push.executeUpdate();
      }
      new_activation=smem_lti_calc_base(lti,time_now + ((add_access) ? (1) : (0)),prev_access_n + ((add_access) ? (1) : (0)),prev_access_1);
    }
  }
  if (num_edges == SMEM_ACT_MAX) {
    ResultSet rs=null;
    try {
      db.act_lti_child_ct_get.setLong(1,lti);
      rs=db.act_lti_child_ct_get.executeQuery();
      num_edges=rs.getLong(0 + 1);
    }
  finally {
      rs.close();
    }
  }
  if (num_edges < this.params.thresh.get()) {
    db.act_set.setDouble(1,new_activation);
    db.act_set.setLong(2,lti);
    db.act_set.executeUpdate();
  }
{
    db.act_lti_set.setDouble(1,new_activation);
    db.act_lti_set.setLong(2,lti);
    db.act_lti_set.executeUpdate();
  }
  return new_activation;
}",0.9997274461706188
12165,"public void initialize(){
  this.symbols=Adaptables.require(DefaultSemanticMemory.class,context,SymbolFactoryImpl.class);
  this.predefinedSyms=new SemanticMemorySymbols(this.symbols);
  this.chunker=Adaptables.adapt(context,Chunker.class);
  this.decider=Adaptables.adapt(context,Decider.class);
  this.recMem=Adaptables.adapt(context,RecognitionMemory.class);
  this.epmem=Adaptables.require(DefaultEpisodicMemory.class,context,DefaultEpisodicMemory.class);
  Agent agent=Adaptables.adapt(context,Agent.class);
  this.trace=agent.getTrace();
  final PropertyManager properties=Adaptables.require(DefaultSemanticMemory.class,context,PropertyManager.class);
  params=new DefaultSemanticMemoryParams(properties);
  stats=new DefaultSemanticMemoryStats(properties);
}","public void initialize(){
  this.symbols=Adaptables.require(DefaultSemanticMemory.class,context,SymbolFactoryImpl.class);
  this.predefinedSyms=new SemanticMemorySymbols(this.symbols);
  this.chunker=Adaptables.adapt(context,Chunker.class);
  this.decider=Adaptables.adapt(context,Decider.class);
  this.recMem=Adaptables.adapt(context,RecognitionMemory.class);
  this.epmem=Adaptables.require(DefaultSemanticMemory.class,context,DefaultEpisodicMemory.class);
  Agent agent=Adaptables.adapt(context,Agent.class);
  this.trace=agent.getTrace();
  final PropertyManager properties=Adaptables.require(DefaultSemanticMemory.class,context,PropertyManager.class);
  params=new DefaultSemanticMemoryParams(properties);
  stats=new DefaultSemanticMemoryStats(properties);
}",0.6287581699346405
12166,"@Before public void setUp() throws Exception {
  context=AdaptableContainer.from(new SymbolFactoryImpl(),new PropertyManager());
  conn=JdbcTools.connect(""String_Node_Str"",""String_Node_Str"");
  final SemanticMemoryDatabase db=new SemanticMemoryDatabase(""String_Node_Str"",conn);
  db.structure();
  db.prepare();
  smem=new DefaultSemanticMemory(context,db);
  smem.initialize();
}","@Before public void setUp() throws Exception {
  context=AdaptableContainer.from(new SymbolFactoryImpl(),new PropertyManager(),new Agent());
  conn=JdbcTools.connect(""String_Node_Str"",""String_Node_Str"");
  final SemanticMemoryDatabase db=new SemanticMemoryDatabase(""String_Node_Str"",conn);
  db.structure();
  db.prepare();
  smem=new DefaultSemanticMemory(context,db);
  smem.initialize();
}",0.9844559585492229
12167,"@Test public void testSimpleNonCueBasedRetrieval() throws Exception {
  runTest(""String_Node_Str"",2);
}","@Test public void testSimpleNonCueBasedRetrieval() throws Exception {
  agent.setStopPhase(Phase.OUTPUT);
  runTest(""String_Node_Str"",2);
}",0.8512396694214877
12168,"@Test public void testSimpleStore() throws Exception {
  runTest(""String_Node_Str"",2);
}","@Test public void testSimpleStore() throws Exception {
  agent.setStopPhase(Phase.OUTPUT);
  runTest(""String_Node_Str"",2);
}",0.8301886792452831
12169,"@Test public void testSimpleCueBasedRetrieval() throws Exception {
  runTest(""String_Node_Str"",1);
}","@Test public void testSimpleCueBasedRetrieval() throws Exception {
  agent.setStopPhase(Phase.OUTPUT);
  runTest(""String_Node_Str"",1);
}",0.847457627118644
12170,"@Test public void testCanCreateInitialTables() throws Exception {
  final SemanticMemoryDatabase smdb=new SemanticMemoryDatabase(""String_Node_Str"",db);
  smdb.structure();
  final Set<String> tables=new HashSet<String>();
  final ResultSet rs=db.getMetaData().getTables(null,null,null,new String[]{""String_Node_Str""});
  while (rs.next()) {
    tables.add(rs.getString(""String_Node_Str"").toLowerCase());
  }
  final String[] expectedTables=new String[]{SemanticMemoryDatabase.SMEM_SIGNATURE,SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str""};
  for (  String expected : expectedTables) {
    assertTrue(""String_Node_Str"" + expected + ""String_Node_Str"",tables.contains(expected));
  }
  assertEquals(expectedTables.length,tables.size());
}","@Test public void testCanCreateInitialTables() throws Exception {
  final SemanticMemoryDatabase smdb=new SemanticMemoryDatabase(""String_Node_Str"",db);
  smdb.structure();
  final Set<String> tables=new HashSet<String>();
  final ResultSet rs=db.getMetaData().getTables(null,null,null,new String[]{""String_Node_Str""});
  while (rs.next()) {
    tables.add(rs.getString(""String_Node_Str"").toLowerCase());
  }
  final String[] expectedTables=new String[]{SemanticMemoryDatabase.SMEM_SIGNATURE,SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str""};
  for (  String expected : expectedTables) {
    assertTrue(""String_Node_Str"" + expected + ""String_Node_Str"",tables.contains(expected));
  }
  assertEquals(expectedTables.length,tables.size());
}",0.980007270083606
12171,"@Test public void testCanCreateInitialIndexes() throws Exception {
  final SemanticMemoryDatabase smdb=new SemanticMemoryDatabase(""String_Node_Str"",db);
  smdb.structure();
  final Set<String> tables=new HashSet<String>();
  final ResultSet rs=db.getMetaData().getTables(null,null,null,new String[]{""String_Node_Str""});
  while (rs.next()) {
    tables.add(rs.getString(""String_Node_Str"").toLowerCase());
  }
  final String[] expectedTables=new String[]{SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str""};
  for (  String expected : expectedTables) {
    assertTrue(""String_Node_Str"" + expected + ""String_Node_Str"",tables.contains(expected));
  }
  assertEquals(expectedTables.length,tables.size());
}","@Test public void testCanCreateInitialIndexes() throws Exception {
  final SemanticMemoryDatabase smdb=new SemanticMemoryDatabase(""String_Node_Str"",db);
  smdb.structure();
  final Set<String> tables=new HashSet<String>();
  final ResultSet rs=db.getMetaData().getTables(null,null,null,new String[]{""String_Node_Str""});
  while (rs.next()) {
    tables.add(rs.getString(""String_Node_Str"").toLowerCase());
  }
  final String[] expectedTables=new String[]{SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str"",""String_Node_Str"" + SemanticMemoryDatabase.SMEM_SCHEMA + ""String_Node_Str""};
  for (  String expected : expectedTables) {
    assertTrue(""String_Node_Str"" + expected + ""String_Node_Str"",tables.contains(expected));
  }
  assertEquals(expectedTables.length,tables.size());
}",0.9697214372224464
12172,"public boolean runTestsForAverage(int runCount,int warmUpCount) throws SoarException {
  if (runCount < (warmUpCount + 1))   return false;
  out.print(""String_Node_Str"");
  out.flush();
  for (int i=0; i < warmUpCount; i++) {
    test.reset();
    boolean result=test.run(i);
    if (!result)     return false;
    out.print(""String_Node_Str"");
    out.flush();
  }
  runs=runCount;
  out.print(""String_Node_Str"" + ""String_Node_Str"");
  out.flush();
  for (int i=0; i < runCount; i++) {
    boolean result=runSingleIteration(i);
    if (!result)     return false;
    out.print(""String_Node_Str"");
    out.flush();
  }
  out.print(""String_Node_Str"");
  out.flush();
  return true;
}","public boolean runTestsForAverage(int runCount,int warmUpCount) throws SoarException {
  out.print(""String_Node_Str"");
  out.flush();
  for (int i=0; i < warmUpCount; i++) {
    test.reset();
    boolean result=test.run(i);
    if (!result)     return false;
    out.print(""String_Node_Str"");
    out.flush();
  }
  runs=runCount;
  out.print(""String_Node_Str"" + ""String_Node_Str"");
  out.flush();
  for (int i=0; i < runCount; i++) {
    boolean result=runSingleIteration(i);
    if (!result)     return false;
    out.print(""String_Node_Str"");
    out.flush();
  }
  out.print(""String_Node_Str"");
  out.flush();
  return true;
}",0.5152439024390244
12173,"/** 
 * Implements the Soar-EpMem API <p>episodic_memory.cpp:5238:void epmem_respond_to_cmd( agent *my_agent )
 * @throws SoarException 
 * @throws SQLException 
 */
private void epmem_respond_to_cmd() throws SoarException, SQLException {
  if (db == null) {
    epmem_init_db();
  }
  IdentifierImpl state=decider.bottom_goal;
  List<WmeImpl> wmes;
  List<WmeImpl> cmds;
  Set<WmeImpl> cue_wmes=Sets.newHashSet();
  List<SymbolTriple> meta_wmes=Lists.newArrayList();
  List<SymbolTriple> retrieval_wmes=Lists.newArrayList();
  long retrieve=0;
  SymbolImpl next=null;
  SymbolImpl previous=null;
  SymbolImpl query=null;
  SymbolImpl neg_query=null;
  List<Long> prohibit=Lists.newLinkedList();
  long before=0;
  long after=0;
  Set<SymbolImpl> currents=Sets.newHashSet();
  boolean good_cue=false;
  int path=0;
  long wme_count;
  boolean new_cue;
  boolean do_wm_phase=false;
  while (state != null) {
    final EpisodicMemoryStateInfo epmem_info=epmem_info(state);
    new_cue=false;
    wme_count=0;
    cmds=null;
{
      Marker tc=DefaultMarker.create();
      Queue<SymbolImpl> syms=new LinkedList<SymbolImpl>();
      SymbolImpl parent_sym;
      syms.add(epmem_info.epmem_cmd_header);
      while (!syms.isEmpty()) {
        parent_sym=syms.poll();
        wmes=epmem_get_augs_of_id(parent_sym,tc);
{
          for (          final WmeImpl wme : wmes) {
            wme_count++;
            if (wme.timetag > epmem_info.last_cmd_time) {
              new_cue=true;
              epmem_info.last_cmd_time=wme.timetag;
            }
            if (wme.value.asIdentifier() != null) {
              syms.add(wme.value.asIdentifier());
            }
          }
          if (cmds == null) {
            cmds=wmes;
          }
 else {
            wmes=null;
          }
        }
      }
      if (epmem_info.last_cmd_count != wme_count) {
        new_cue=true;
        epmem_info.last_cmd_count=wme_count;
      }
      if (new_cue) {
        epmem_clear_result(state);
        do_wm_phase=true;
      }
    }
    if (new_cue && wme_count != 0) {
      _epmem_respond_to_cmd_parse(cmds,good_cue,path,retrieve,next,previous,query,neg_query,prohibit,before,after,currents,cue_wmes);
      retrieval_wmes.clear();
      meta_wmes.clear();
      if (good_cue) {
        if (path == 1) {
          epmem_install_memory(state,retrieve,meta_wmes,retrieval_wmes);
          stats.ncbr.set(stats.ncbr.get() + 1L);
        }
 else         if (path == 2) {
          if (next != null) {
            epmem_install_memory(state,epmem_next_episode(epmem_info.last_memory),meta_wmes,retrieval_wmes);
            stats.nexts.set(stats.nexts.get() + 1L);
          }
 else {
            epmem_install_memory(state,epmem_previous_episode(epmem_info.last_memory),meta_wmes,retrieval_wmes);
            stats.prevs.set(stats.prevs.get() + 1L);
          }
          if (epmem_info.last_memory == EPMEM_MEMID_NONE) {
            epmem_buffer_add_wme(meta_wmes,epmem_info.epmem_result_header,predefinedSyms.epmem_sym_failure,((next != null) ? (next) : (previous)));
          }
 else {
            epmem_buffer_add_wme(meta_wmes,epmem_info.epmem_result_header,predefinedSyms.epmem_sym_success,((next != null) ? (next) : (previous)));
          }
        }
 else         if (path == 3) {
          epmem_process_query(state,query,neg_query,prohibit,before,after,currents,cue_wmes,meta_wmes,retrieval_wmes);
          stats.cbr.set(stats.cbr.get() + 1L);
        }
      }
 else {
        epmem_buffer_add_wme(meta_wmes,epmem_info.epmem_result_header,predefinedSyms.epmem_sym_status,predefinedSyms.epmem_sym_bad_cmd);
      }
      prohibit.clear();
      if (!retrieval_wmes.isEmpty() || !meta_wmes.isEmpty()) {
        epmem_process_buffered_wmes(state,cue_wmes,meta_wmes,retrieval_wmes);
        do_wm_phase=true;
      }
      cue_wmes.clear();
    }
 else {
    }
    if (cmds != null) {
      cmds=null;
    }
    state=state.goalInfo.higher_goal;
  }
  if (do_wm_phase) {
    decider.do_working_memory_phase();
  }
}","/** 
 * Implements the Soar-EpMem API <p>episodic_memory.cpp:5238:void epmem_respond_to_cmd( agent *my_agent )
 * @throws SoarException 
 * @throws SQLException 
 */
private void epmem_respond_to_cmd() throws SoarException, SQLException {
  if (db == null) {
    epmem_init_db();
  }
  IdentifierImpl state=decider.bottom_goal;
  List<WmeImpl> wmes;
  List<WmeImpl> cmds;
  Set<WmeImpl> cue_wmes=Sets.newHashSet();
  List<SymbolTriple> meta_wmes=Lists.newArrayList();
  List<SymbolTriple> retrieval_wmes=Lists.newArrayList();
  ByRef<Long> retrieve=ByRef.create(0L);
  SymbolImpl next=null;
  SymbolImpl previous=null;
  SymbolImpl query=null;
  SymbolImpl neg_query=null;
  List<Long> prohibit=Lists.newLinkedList();
  ByRef<Long> before=ByRef.create(0L);
  ByRef<Long> after=ByRef.create(0L);
  Set<SymbolImpl> currents=Sets.newHashSet();
  ByRef<Boolean> good_cue=ByRef.create(false);
  ByRef<Integer> path=ByRef.create(0);
  long wme_count;
  boolean new_cue;
  boolean do_wm_phase=false;
  while (state != null) {
    final EpisodicMemoryStateInfo epmem_info=epmem_info(state);
    new_cue=false;
    wme_count=0;
    cmds=null;
{
      Marker tc=DefaultMarker.create();
      Queue<SymbolImpl> syms=new LinkedList<SymbolImpl>();
      SymbolImpl parent_sym;
      syms.add(epmem_info.epmem_cmd_header);
      while (!syms.isEmpty()) {
        parent_sym=syms.poll();
        wmes=epmem_get_augs_of_id(parent_sym,tc);
{
          for (          final WmeImpl wme : wmes) {
            wme_count++;
            if (wme.timetag > epmem_info.last_cmd_time) {
              new_cue=true;
              epmem_info.last_cmd_time=wme.timetag;
            }
            if (wme.value.asIdentifier() != null) {
              syms.add(wme.value.asIdentifier());
            }
          }
          if (cmds == null) {
            cmds=wmes;
          }
 else {
            wmes=null;
          }
        }
      }
      if (epmem_info.last_cmd_count != wme_count) {
        new_cue=true;
        epmem_info.last_cmd_count=wme_count;
      }
      if (new_cue) {
        epmem_clear_result(state);
        do_wm_phase=true;
      }
    }
    if (new_cue && wme_count != 0) {
      _epmem_respond_to_cmd_parse(cmds,good_cue,path,retrieve,next,previous,query,neg_query,prohibit,before,after,currents,cue_wmes);
      retrieval_wmes.clear();
      meta_wmes.clear();
      if (good_cue.value) {
        if (path.value == 1) {
          epmem_install_memory(state,retrieve.value,meta_wmes,retrieval_wmes);
          stats.ncbr.set(stats.ncbr.get() + 1L);
        }
 else         if (path.value == 2) {
          if (next != null) {
            epmem_install_memory(state,epmem_next_episode(epmem_info.last_memory),meta_wmes,retrieval_wmes);
            stats.nexts.set(stats.nexts.get() + 1L);
          }
 else {
            epmem_install_memory(state,epmem_previous_episode(epmem_info.last_memory),meta_wmes,retrieval_wmes);
            stats.prevs.set(stats.prevs.get() + 1L);
          }
          if (epmem_info.last_memory == EPMEM_MEMID_NONE) {
            epmem_buffer_add_wme(meta_wmes,epmem_info.epmem_result_header,predefinedSyms.epmem_sym_failure,((next != null) ? (next) : (previous)));
          }
 else {
            epmem_buffer_add_wme(meta_wmes,epmem_info.epmem_result_header,predefinedSyms.epmem_sym_success,((next != null) ? (next) : (previous)));
          }
        }
 else         if (path.value == 3) {
          epmem_process_query(state,query,neg_query,prohibit,before.value,after.value,currents,cue_wmes,meta_wmes,retrieval_wmes);
          stats.cbr.set(stats.cbr.get() + 1L);
        }
      }
 else {
        epmem_buffer_add_wme(meta_wmes,epmem_info.epmem_result_header,predefinedSyms.epmem_sym_status,predefinedSyms.epmem_sym_bad_cmd);
      }
      prohibit.clear();
      if (!retrieval_wmes.isEmpty() || !meta_wmes.isEmpty()) {
        epmem_process_buffered_wmes(state,cue_wmes,meta_wmes,retrieval_wmes);
        do_wm_phase=true;
      }
      cue_wmes.clear();
    }
 else {
    }
    if (cmds != null) {
      cmds=null;
    }
    state=state.goalInfo.higher_goal;
  }
  if (do_wm_phase) {
    decider.do_working_memory_phase();
  }
}",0.9402838962310328
12174,"/** 
 * <p> episodic_memory.cpp:5063:void inline _epmem_respond_to_cmd_parse( agent my_agent, epmem_wme_list* cmds, bool& good_cue, int& path, epmem_time_id& retrieve, Symbol*& next, Symbol*& previous, Symbol*& query, Symbol*& neg_query, epmem_time_list& prohibit, epmem_time_id& before, epmem_time_id& after, epmem_symbol_set& currents, soar_module::wme_set& cue_wmes )
 * @param cmds
 * @param good_cue
 * @param path
 * @param retrieve
 * @param next
 * @param previous
 * @param query
 * @param neg_query
 * @param prohibit
 * @param before
 * @param after
 * @param currents
 * @param cue_wmes
 */
private void _epmem_respond_to_cmd_parse(List<WmeImpl> cmds,boolean good_cue,int path,long retrieve,SymbolImpl next,SymbolImpl previous,SymbolImpl query,SymbolImpl neg_query,List<Long> prohibit,long before,long after,Set<SymbolImpl> currents,Set<WmeImpl> cue_wmes){
  cue_wmes.clear();
  retrieve=EPMEM_MEMID_NONE;
  next=null;
  previous=null;
  query=null;
  neg_query=null;
  prohibit.clear();
  before=EPMEM_MEMID_NONE;
  after=EPMEM_MEMID_NONE;
  good_cue=true;
  path=0;
  for (  WmeImpl w_p : cmds) {
    cue_wmes.add((w_p));
    if (good_cue) {
      if (w_p.attr == predefinedSyms.epmem_sym_retrieve) {
        if ((w_p.getValue().asInteger() != null) && (path == 0) && (w_p.value.asInteger().getValue() > 0)) {
          retrieve=w_p.value.asInteger().getValue();
          path=1;
        }
 else {
          good_cue=false;
        }
      }
 else       if (w_p.attr == predefinedSyms.epmem_sym_next) {
        if ((w_p.getValue().asIdentifier() != null) && (path == 0)) {
          next=w_p.value;
          path=2;
        }
 else {
          good_cue=false;
        }
      }
 else       if (w_p.attr == predefinedSyms.epmem_sym_prev) {
        if ((w_p.getValue().asIdentifier() != null) && (path == 0)) {
          previous=w_p.value;
          path=2;
        }
 else {
          good_cue=false;
        }
      }
 else       if (w_p.attr == predefinedSyms.epmem_sym_query) {
        if ((w_p.getValue().asIdentifier() != null) && ((path == 0) || (path == 3)) && (query == null)) {
          query=w_p.value;
          path=3;
        }
 else {
          good_cue=false;
        }
      }
 else       if (w_p.attr == predefinedSyms.epmem_sym_negquery) {
        if ((w_p.getValue().asIdentifier() != null) && ((path == 0) || (path == 3)) && (neg_query == null)) {
          neg_query=w_p.value;
          path=3;
        }
 else {
          good_cue=false;
        }
      }
 else       if (w_p.attr == predefinedSyms.epmem_sym_before) {
        if ((w_p.getValue().asInteger() != null) && ((path == 0) || (path == 3))) {
          if ((before == EPMEM_MEMID_NONE) || (w_p.value.asInteger().getValue() < before)) {
            before=w_p.value.asInteger().getValue();
          }
          path=3;
        }
 else {
          good_cue=false;
        }
      }
 else       if (w_p.attr == predefinedSyms.epmem_sym_after) {
        if ((w_p.getValue().asInteger() != null) && ((path == 0) || (path == 3))) {
          if (after < w_p.value.asInteger().getValue()) {
            after=w_p.value.asInteger().getValue();
          }
          path=3;
        }
 else {
          good_cue=false;
        }
      }
 else       if (w_p.attr == predefinedSyms.epmem_sym_prohibit) {
        if ((w_p.getValue().asInteger() != null) && ((path == 0) || (path == 3))) {
          prohibit.add(w_p.value.asInteger().getValue());
          path=3;
        }
 else {
          good_cue=false;
        }
      }
 else       if (w_p.attr == predefinedSyms.epmem_sym_current) {
        if ((w_p.getValue().asIdentifier() != null) && ((path == 0) || (path == 3))) {
          currents.add(w_p.value);
          path=3;
        }
 else {
          good_cue=false;
        }
      }
 else {
        good_cue=false;
      }
    }
  }
  if ((path == 3) && (query == null)) {
    good_cue=false;
  }
  if (path == 0) {
    good_cue=false;
  }
}","/** 
 * <p> episodic_memory.cpp:5063: void inline _epmem_respond_to_cmd_parse(  agent my_agent,  epmem_wme_list* cmds,  bool& good_cue,  int& path,  epmem_time_id& retrieve,  Symbol*& next,  Symbol*& previous,  Symbol*& query,  Symbol*& neg_query,  epmem_time_list& prohibit,  epmem_time_id& before,  epmem_time_id& after,  epmem_symbol_set& currents,  soar_module::wme_set& cue_wmes  )
 * @param cmds
 * @param good_cue
 * @param path
 * @param retrieve
 * @param next
 * @param previous
 * @param query
 * @param neg_query
 * @param prohibit
 * @param before
 * @param after
 * @param currents
 * @param cue_wmes
 */
private void _epmem_respond_to_cmd_parse(List<WmeImpl> cmds,final ByRef<Boolean> good_cue,final ByRef<Integer> path,final ByRef<Long> retrieve,SymbolImpl next,SymbolImpl previous,SymbolImpl query,SymbolImpl neg_query,List<Long> prohibit,final ByRef<Long> before,final ByRef<Long> after,Set<SymbolImpl> currents,Set<WmeImpl> cue_wmes){
  cue_wmes.clear();
  retrieve.value=EPMEM_MEMID_NONE;
  next=null;
  previous=null;
  query=null;
  neg_query=null;
  prohibit.clear();
  before.value=EPMEM_MEMID_NONE;
  after.value=EPMEM_MEMID_NONE;
  good_cue.value=true;
  path.value=0;
  for (  WmeImpl w_p : cmds) {
    cue_wmes.add((w_p));
    if (good_cue.value) {
      if (w_p.attr == predefinedSyms.epmem_sym_retrieve) {
        if ((w_p.getValue().asInteger() != null) && (path.value == 0) && (w_p.value.asInteger().getValue() > 0)) {
          retrieve.value=w_p.value.asInteger().getValue();
          path.value=1;
        }
 else {
          good_cue.value=false;
        }
      }
 else       if (w_p.attr == predefinedSyms.epmem_sym_next) {
        if ((w_p.getValue().asIdentifier() != null) && (path.value == 0)) {
          next=w_p.value;
          path.value=2;
        }
 else {
          good_cue.value=false;
        }
      }
 else       if (w_p.attr == predefinedSyms.epmem_sym_prev) {
        if ((w_p.getValue().asIdentifier() != null) && (path.value == 0)) {
          previous=w_p.value;
          path.value=2;
        }
 else {
          good_cue.value=false;
        }
      }
 else       if (w_p.attr == predefinedSyms.epmem_sym_query) {
        if ((w_p.getValue().asIdentifier() != null) && ((path.value == 0) || (path.value == 3)) && (query == null)) {
          query=w_p.value;
          path.value=3;
        }
 else {
          good_cue.value=false;
        }
      }
 else       if (w_p.attr == predefinedSyms.epmem_sym_negquery) {
        if ((w_p.getValue().asIdentifier() != null) && ((path.value == 0) || (path.value == 3)) && (neg_query == null)) {
          neg_query=w_p.value;
          path.value=3;
        }
 else {
          good_cue.value=false;
        }
      }
 else       if (w_p.attr == predefinedSyms.epmem_sym_before) {
        if ((w_p.getValue().asInteger() != null) && ((path.value == 0) || (path.value == 3))) {
          if ((before.value == EPMEM_MEMID_NONE) || (w_p.value.asInteger().getValue() < before.value)) {
            before.value=w_p.value.asInteger().getValue();
          }
          path.value=3;
        }
 else {
          good_cue.value=false;
        }
      }
 else       if (w_p.attr == predefinedSyms.epmem_sym_after) {
        if ((w_p.getValue().asInteger() != null) && ((path.value == 0) || (path.value == 3))) {
          if (after.value < w_p.value.asInteger().getValue()) {
            after.value=w_p.value.asInteger().getValue();
          }
          path.value=3;
        }
 else {
          good_cue.value=false;
        }
      }
 else       if (w_p.attr == predefinedSyms.epmem_sym_prohibit) {
        if ((w_p.getValue().asInteger() != null) && ((path.value == 0) || (path.value == 3))) {
          prohibit.add(w_p.value.asInteger().getValue());
          path.value=3;
        }
 else {
          good_cue.value=false;
        }
      }
 else       if (w_p.attr == predefinedSyms.epmem_sym_current) {
        if ((w_p.getValue().asIdentifier() != null) && ((path.value == 0) || (path.value == 3))) {
          currents.add(w_p.value);
          path.value=3;
        }
 else {
          good_cue.value=false;
        }
      }
 else {
        good_cue.value=false;
      }
    }
  }
  if ((path.value == 3) && (query == null)) {
    good_cue.value=false;
  }
  if (path.value == 0) {
    good_cue.value=false;
  }
}",0.9480943738656988
12175,"/** 
 * Returns a temporally unique integer representing a symbol constant. <p> episodic_memory.cpp:1928:epmem_hash_id epmem_temporal_hash( agent *my_agent, Symbol *sym, bool add_on_fail = true )
 * @param sym
 * @param add_on_fail
 * @return
 * @throws SQLException 
 */
private long epmem_temporal_hash(SymbolImpl sym,boolean add_on_fail) throws SQLException {
  long return_val=0;
  if (sym.asString() != null || sym.asDouble() != null || sym.asInteger() != null) {
    if (!(sym.epmem_hash_id == 0) || (sym.epmem_valid != epmem_validation)) {
      sym.epmem_hash_id=0;
      sym.epmem_valid=epmem_validation;
      final PreparedStatement hash_get=db.hash_get;
      hash_get.setLong(1,Symbols.getSymbolType(sym));
switch (Symbols.getSymbolType(sym)) {
case Symbols.SYM_CONSTANT_SYMBOL_TYPE:
        hash_get.setString(2,sym.asString().getValue());
      break;
case Symbols.INT_CONSTANT_SYMBOL_TYPE:
    hash_get.setLong(2,sym.asInteger().getValue());
  break;
case Symbols.FLOAT_CONSTANT_SYMBOL_TYPE:
hash_get.setDouble(2,sym.asDouble().getValue());
break;
}
final ResultSet hash_get_rs=hash_get.executeQuery();
try {
if (hash_get_rs.next()) {
return_val=hash_get_rs.getLong(0 + 1);
}
}
  finally {
hash_get_rs.close();
}
if (return_val == 0 && add_on_fail) {
final PreparedStatement hash_add=db.hash_add;
hash_add.setLong(1,Symbols.getSymbolType(sym));
switch (Symbols.getSymbolType(sym)) {
case Symbols.SYM_CONSTANT_SYMBOL_TYPE:
hash_add.setString(2,sym.asString().getValue());
break;
case Symbols.INT_CONSTANT_SYMBOL_TYPE:
hash_add.setLong(2,sym.asInteger().getValue());
break;
case Symbols.FLOAT_CONSTANT_SYMBOL_TYPE:
hash_add.setDouble(2,sym.asDouble().getValue());
break;
}
hash_add.execute();
final ResultSet hash_add_rs=hash_add.getGeneratedKeys();
try {
if (hash_add_rs.next()) {
return_val=hash_add_rs.getLong(1);
}
 else {
throw new SQLException(""String_Node_Str"");
}
}
  finally {
hash_add_rs.close();
}
}
sym.epmem_hash_id=return_val;
sym.epmem_valid=epmem_validation;
}
return_val=sym.epmem_hash_id;
}
return return_val;
}","/** 
 * Returns a temporally unique integer representing a symbol constant. <p> episodic_memory.cpp:1928: epmem_hash_id epmem_temporal_hash(  agent *my_agent,  Symbol *sym,  bool add_on_fail = true  )
 * @param sym
 * @param add_on_fail
 * @return
 * @throws SQLException 
 */
private long epmem_temporal_hash(SymbolImpl sym,boolean add_on_fail) throws SQLException {
  long return_val=0;
  if (sym.asString() != null || sym.asDouble() != null || sym.asInteger() != null) {
    if (!(sym.epmem_hash_id == 0) || (sym.epmem_valid != epmem_validation)) {
      sym.epmem_hash_id=0;
      sym.epmem_valid=epmem_validation;
      final PreparedStatement hash_get=db.hash_get;
      hash_get.setLong(1,Symbols.getSymbolType(sym));
switch (Symbols.getSymbolType(sym)) {
case Symbols.SYM_CONSTANT_SYMBOL_TYPE:
        hash_get.setString(2,sym.asString().getValue());
      break;
case Symbols.INT_CONSTANT_SYMBOL_TYPE:
    hash_get.setLong(2,sym.asInteger().getValue());
  break;
case Symbols.FLOAT_CONSTANT_SYMBOL_TYPE:
hash_get.setDouble(2,sym.asDouble().getValue());
break;
}
final ResultSet hash_get_rs=hash_get.executeQuery();
try {
if (hash_get_rs.next()) {
return_val=hash_get_rs.getLong(0 + 1);
}
}
  finally {
hash_get_rs.close();
}
if (return_val == 0 && add_on_fail) {
final PreparedStatement hash_add=db.hash_add;
hash_add.setLong(1,Symbols.getSymbolType(sym));
switch (Symbols.getSymbolType(sym)) {
case Symbols.SYM_CONSTANT_SYMBOL_TYPE:
hash_add.setString(2,sym.asString().getValue());
break;
case Symbols.INT_CONSTANT_SYMBOL_TYPE:
hash_add.setLong(2,sym.asInteger().getValue());
break;
case Symbols.FLOAT_CONSTANT_SYMBOL_TYPE:
hash_add.setDouble(2,sym.asDouble().getValue());
break;
}
hash_add.execute();
final ResultSet hash_add_rs=hash_add.getGeneratedKeys();
try {
if (hash_add_rs.next()) {
return_val=hash_add_rs.getLong(1);
}
 else {
throw new SQLException(""String_Node_Str"");
}
}
  finally {
hash_add_rs.close();
}
}
sym.epmem_hash_id=return_val;
sym.epmem_valid=epmem_validation;
}
return_val=sym.epmem_hash_id;
}
return return_val;
}",0.9821559520899537
12176,"public PreparedStatement request(){
  try {
    return db.prepareStatement(sql);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return null;
}","public PreparedStatement request(){
  try {
    return new SoarPreparedStatement(db.prepareStatement(sql),sql);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return null;
}",0.9106628242074928
12177,"private PreparedStatement prepareNamedStatement(String name) throws SoarException {
  final String sql=statements.getProperty(name);
  if (sql == null) {
    throw new SoarException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  try {
    final String trimmed=sql.trim();
    return trimmed.startsWith(""String_Node_Str"") ? db.prepareStatement(trimmed,Statement.RETURN_GENERATED_KEYS) : db.prepareStatement(trimmed);
  }
 catch (  SQLException e) {
    throw new SoarException(""String_Node_Str"" + sql + ""String_Node_Str""+ e.getMessage(),e);
  }
}","private PreparedStatement prepareNamedStatement(String name) throws SoarException {
  final String sql=statements.getProperty(name);
  if (sql == null) {
    throw new SoarException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  try {
    final String trimmed=sql.trim();
    return trimmed.startsWith(""String_Node_Str"") ? new SoarPreparedStatement(db.prepareStatement(trimmed,Statement.RETURN_GENERATED_KEYS),trimmed) : new SoarPreparedStatement(db.prepareStatement(trimmed),trimmed);
  }
 catch (  SQLException e) {
    throw new SoarException(""String_Node_Str"" + sql + ""String_Node_Str""+ e.getMessage(),e);
  }
}",0.940273037542662
12178,"/** 
 * Writes out the children of a particular   {@link ReteNode}. <p>rete.cpp:7270:retesave_children_of_node
 * @see ReteNetReader#readChildrenOfNode
 */
private void writeChildrenOfNode(DataOutputStream dos,ReteNode node) throws IOException, SoarException {
  ReteNode child;
  int numChildren=0;
  for (child=node.first_child; child != null; child=child.next_sibling) {
    if (child.node_type != ReteNodeType.CN_BNODE) {
      numChildren++;
    }
  }
  dos.writeInt(numChildren);
  for (child=node.first_child; child != null; child=child.next_sibling) {
    if (child.node_type != ReteNodeType.CN_BNODE) {
      writeNodeAndChildren(dos,child);
    }
  }
}","/** 
 * Writes out the children of a particular   {@link ReteNode}. <p>rete.cpp:7270:retesave_children_of_node
 * @see ReteNetReader#readChildrenOfNode
 */
private void writeChildrenOfNode(DataOutputStream dos,ReteNode node) throws IOException, SoarException {
  final Stack<ReteNode> children=new Stack<ReteNode>();
  for (ReteNode child=node.first_child; child != null; child=child.next_sibling) {
    if (child.node_type != ReteNodeType.CN_BNODE) {
      children.push(child);
    }
  }
  dos.writeInt(children.size());
  while (!children.empty()) {
    writeNodeAndChildren(dos,children.pop());
  }
}",0.6461295418641391
12179,"/** 
 * <p>sml_KernelHelpers.cpp:906:soar_ecPrintPreferences <p>Parameters in original implementation are member properties here
 * @param agent The agent
 * @param printer The printer to print to
 * @throws IOException
 */
public void print(Agent agent,Printer printer) throws IOException {
  final PredefinedSymbols predefinedSyms=Adaptables.adapt(agent,PredefinedSymbols.class);
  if (object) {
    for (Slot s=id.slots; s != null; s=s.next) {
      if (s.attr == predefinedSyms.operator_symbol)       printer.print(""String_Node_Str"",s.id,s.attr);
 else       printer.print(""String_Node_Str"",s.id,s.attr);
      for (      PreferenceType pt : PreferenceType.values()) {
        if (s.getPreferencesByType(pt) != null) {
          if (s.isa_context_slot)           printer.print(""String_Node_Str"",pt.getDisplayName());
          for (Preference p=s.getPreferencesByType(pt); p != null; p=p.next) {
            print_preference_and_source(agent,printer,p);
          }
        }
      }
    }
    if (id.goalInfo != null && id.goalInfo.getImpasseWmes() != null)     printer.print(""String_Node_Str"",id);
    for (WmeImpl w=id.goalInfo != null ? id.goalInfo.getImpasseWmes() : null; w != null; w=w.next) {
      printer.print(""String_Node_Str"",w);
    }
    if (id.getInputWmes() != null)     printer.print(""String_Node_Str"",id);
    for (WmeImpl w=id.getInputWmes(); w != null; w=w.next) {
      printer.print(""String_Node_Str"",w);
    }
    return;
  }
 else   if (!id.isGoal() && attr == null) {
    for (    Wme w : agent.getAllWmesInRete()) {
      if (w.getValue() == id) {
        if (w.getValue() == predefinedSyms.operator_symbol)         printer.print(""String_Node_Str"");
 else         printer.print(""String_Node_Str"");
        printer.print(""String_Node_Str"",w.getTimetag(),w.getIdentifier(),w.getAttribute(),w.getValue());
        Iterator<Preference> it=w.getPreferences();
        if (!it.hasNext()) {
          printer.print(""String_Node_Str"");
        }
 else {
          while (it.hasNext()) {
            print_preference_and_source(agent,printer,it.next());
          }
        }
      }
    }
    return;
  }
  Slot s=Slot.find_slot(id,attr);
  if (s == null) {
    printer.print(""String_Node_Str"",id,attr);
    return;
  }
  printer.print(""String_Node_Str"",id,attr);
  for (  PreferenceType pt : PreferenceType.values()) {
    if (s.getPreferencesByType(pt) != null) {
      printer.print(""String_Node_Str"",pt.getDisplayName());
      for (Preference p=s.getPreferencesByType(pt); p != null; p=p.next) {
        print_preference_and_source(agent,printer,p);
      }
    }
  }
  if (id.isGoal() && attr.toString().equals(""String_Node_Str"")) {
    final ByRef<Preference> cand=ByRef.create(null);
    final Decider decider=Adaptables.adapt(agent,Decider.class);
    ImpasseType impasse_type=decider.run_preference_semantics(s,cand,true);
    if ((impasse_type == ImpasseType.NONE) && cand != null) {
      printer.print(""String_Node_Str"");
      int count=0;
      double total_probability=0;
      final Exploration exploration=Adaptables.adapt(agent,Exploration.class);
      for (Preference p=cand.value; p != null; p=p.next_candidate) {
        exploration.exploration_compute_value_of_candidate(p,s,0);
        ++count;
        if (p.numeric_value > 0)         total_probability+=p.numeric_value;
      }
      assert(count != 0);
      for (Preference p=cand.value; p != null; p=p.next_candidate) {
        double prob=total_probability > 0.0 ? p.numeric_value / total_probability : 1.0 / count;
        print_preference_and_source(agent,printer,p,prob);
      }
    }
  }
}","/** 
 * <p>sml_KernelHelpers.cpp:906:soar_ecPrintPreferences <p>Parameters in original implementation are member properties here
 * @param agent The agent
 * @param printer The printer to print to
 * @throws IOException
 */
public void print(Agent agent,Printer printer) throws IOException {
  final PredefinedSymbols predefinedSyms=Adaptables.adapt(agent,PredefinedSymbols.class);
  if (object) {
    for (Slot s=id.slots; s != null; s=s.next) {
      if (s.attr == predefinedSyms.operator_symbol)       printer.print(""String_Node_Str"",s.id,s.attr);
 else       printer.print(""String_Node_Str"",s.id,s.attr);
      for (      PreferenceType pt : PreferenceType.values()) {
        if (s.getPreferencesByType(pt) != null) {
          if (s.isa_context_slot)           printer.print(""String_Node_Str"",pt.getDisplayName());
          for (Preference p=s.getPreferencesByType(pt); p != null; p=p.next) {
            print_preference_and_source(agent,printer,p);
          }
        }
      }
    }
    if (id.goalInfo != null && id.goalInfo.getImpasseWmes() != null)     printer.print(""String_Node_Str"",id);
    for (WmeImpl w=id.goalInfo != null ? id.goalInfo.getImpasseWmes() : null; w != null; w=w.next) {
      printer.print(""String_Node_Str"",w);
    }
    if (id.getInputWmes() != null)     printer.print(""String_Node_Str"",id);
    for (WmeImpl w=id.getInputWmes(); w != null; w=w.next) {
      printer.print(""String_Node_Str"",w);
    }
    return;
  }
 else   if (!id.isGoal() && attr == null) {
    for (    Wme w : agent.getAllWmesInRete()) {
      if (w.getValue() == id) {
        if (w.getValue() == predefinedSyms.operator_symbol)         printer.print(""String_Node_Str"");
 else         printer.print(""String_Node_Str"");
        printer.print(""String_Node_Str"",w.getTimetag(),w.getIdentifier(),w.getAttribute(),w.getValue());
        Iterator<Preference> it=w.getPreferences();
        if (!it.hasNext()) {
          printer.print(""String_Node_Str"");
        }
 else {
          while (it.hasNext()) {
            print_preference_and_source(agent,printer,it.next());
          }
        }
      }
    }
    return;
  }
  Slot s=Slot.find_slot(id,attr);
  if (s == null) {
    printer.print(""String_Node_Str"",id,attr);
    return;
  }
  printer.print(""String_Node_Str"",id,attr);
  for (  PreferenceType pt : PreferenceType.values()) {
    if (s.getPreferencesByType(pt) != null) {
      printer.print(""String_Node_Str"",pt.getDisplayName());
      for (Preference p=s.getPreferencesByType(pt); p != null; p=p.next) {
        print_preference_and_source(agent,printer,p);
      }
    }
  }
  if (id.isGoal() && attr.toString().equals(""String_Node_Str"")) {
    final ByRef<Preference> cand=ByRef.create(null);
    final Decider decider=Adaptables.adapt(agent,Decider.class);
    ImpasseType impasse_type=decider.run_preference_semantics(s,cand,true);
    if ((impasse_type == ImpasseType.NONE) && cand.value != null) {
      printer.print(""String_Node_Str"");
      int count=0;
      double total_probability=0;
      final Exploration exploration=Adaptables.adapt(agent,Exploration.class);
      for (Preference p=cand.value; p != null; p=p.next_candidate) {
        exploration.exploration_compute_value_of_candidate(p,s,0);
        ++count;
        if (p.numeric_value > 0)         total_probability+=p.numeric_value;
      }
      assert(count != 0);
      for (Preference p=cand.value; p != null; p=p.next_candidate) {
        double prob=total_probability > 0.0 ? p.numeric_value / total_probability : 1.0 / count;
        print_preference_and_source(agent,printer,p,prob);
      }
    }
  }
}",0.9991668980838656
12180,"/** 
 * wma.cpp:920:wma_forgetting_update_p_queue
 * @return
 */
private boolean wma_forgetting_update_p_queue(){
  boolean return_val=false;
  boolean do_forget=false;
  if (!wma_forget_pq.isEmpty()) {
    final long current_cycle=wma_d_cycle_count;
    final double decay_thresh=wma_thresh_exp;
    final boolean forget_only_lti=(params.forget_wme.get() == ForgetWmeChoices.lti);
    final Map.Entry<Long,Set<wma_decay_element>> pq=wma_forget_pq.firstEntry();
    if (pq.getKey() == current_cycle) {
      for (      wma_decay_element current : pq.getValue()) {
        if (wma_calculate_decay_activation(current,current_cycle,false) < decay_thresh) {
          current.forget_cycle=WMA_FORGOTTEN_CYCLE;
          if (!forget_only_lti || ((IdentifierImpl)current.this_wme.getIdentifier()).smem_lti != 0) {
            do_forget=true;
            if (forget_only_lti) {
              for (Slot s=((IdentifierImpl)current.this_wme.getIdentifier()).slots; (s != null && do_forget); s=s.next) {
                for (WmeImpl w=s.getWmes(); (w != null && do_forget); w=w.next) {
                  final wma_decay_element wma_decay_el=wmaDecayElements.get(w);
                  if (w.preference.o_supported && (wma_decay_el == null || (wma_decay_el.forget_cycle != WMA_FORGOTTEN_CYCLE))) {
                    do_forget=false;
                  }
                }
              }
            }
            if (do_forget) {
              if (forget_only_lti) {
                for (Slot s=((IdentifierImpl)current.this_wme.getIdentifier()).slots; (s != null && do_forget); s=s.next) {
                  for (WmeImpl w=s.getWmes(); (w != null && do_forget); w=w.next) {
                    if (wma_forgetting_forget_wme(w)) {
                      return_val=true;
                    }
                  }
                }
              }
 else {
                if (wma_forgetting_forget_wme(current.this_wme)) {
                  return_val=true;
                }
              }
            }
          }
        }
 else {
          wma_forgetting_move_in_p_queue(current,wma_forgetting_estimate_cycle(current,false));
        }
      }
      wma_touched_sets.add(pq.getKey());
      pq.getValue().clear();
    }
    for (    long touched : wma_touched_sets) {
      final Set<wma_decay_element> pq_v=wma_forget_pq.get(touched);
      if (pq_v != null && pq_v.isEmpty()) {
        wma_forget_pq.remove(pq.getKey());
      }
    }
    wma_touched_sets.clear();
  }
  return return_val;
}","/** 
 * wma.cpp:920:wma_forgetting_update_p_queue
 * @return
 */
private boolean wma_forgetting_update_p_queue(){
  boolean return_val=false;
  boolean do_forget=false;
  if (!wma_forget_pq.isEmpty()) {
    final long current_cycle=wma_d_cycle_count;
    final double decay_thresh=wma_thresh_exp;
    final boolean forget_only_lti=(params.forget_wme.get() == ForgetWmeChoices.lti);
    final Map.Entry<Long,Set<wma_decay_element>> pq=wma_forget_pq.firstEntry();
    if (pq.getKey() == current_cycle) {
      for (      wma_decay_element current : pq.getValue()) {
        if (wma_calculate_decay_activation(current,current_cycle,false) < decay_thresh) {
          current.forget_cycle=WMA_FORGOTTEN_CYCLE;
          if (!forget_only_lti || ((IdentifierImpl)current.this_wme.getIdentifier()).smem_lti != 0) {
            do_forget=true;
            if (forget_only_lti) {
              for (Slot s=((IdentifierImpl)current.this_wme.getIdentifier()).slots; (s != null && do_forget); s=s.next) {
                for (WmeImpl w=s.getWmes(); (w != null && do_forget); w=w.next) {
                  final wma_decay_element wma_decay_el=wmaDecayElements.get(w);
                  if (w.preference.o_supported && (wma_decay_el == null || (wma_decay_el.forget_cycle != WMA_FORGOTTEN_CYCLE))) {
                    do_forget=false;
                  }
                }
              }
            }
            if (do_forget) {
              if (forget_only_lti) {
                for (Slot s=((IdentifierImpl)current.this_wme.getIdentifier()).slots; (s != null && do_forget); s=s.next) {
                  for (WmeImpl w=s.getWmes(); (w != null && do_forget); w=w.next) {
                    if (wma_forgetting_forget_wme(w)) {
                      return_val=true;
                    }
                  }
                }
              }
 else {
                if (wma_forgetting_forget_wme(current.this_wme)) {
                  return_val=true;
                }
              }
            }
          }
        }
 else {
          wma_forgetting_move_in_p_queue(current,wma_forgetting_estimate_cycle(current,false));
        }
      }
      wma_touched_sets.add(pq.getKey());
      pq.getValue().clear();
    }
    for (    long touched : wma_touched_sets) {
      final Set<wma_decay_element> pq_v=wma_forget_pq.get(touched);
      if (pq_v != null && pq_v.isEmpty()) {
        wma_forget_pq.remove(touched);
      }
    }
    wma_touched_sets.clear();
  }
  return return_val;
}",0.9963768115942028
12181,"/** 
 * Add_preference_to_tm() adds a given preference to preference memory (and hence temporary memory).  <p>prefmem.cpp:216:add_preference_to_tm TODO I wish this was private, but smem and epmem use it.
 * @param pref
 */
public boolean add_preference_to_tm(Preference pref){
  Slot s=Slot.make_slot(pref.id,pref.attr,predefinedSyms.operator_symbol);
  if (!s.isa_context_slot && pref.o_supported && (pref.type == PreferenceType.ACCEPTABLE)&& (pref.inst.match_goal == this.decider.top_state)) {
    boolean already_top_o_supported=false;
    for (Preference p2=s.getAllPreferences(); (p2 != null && !already_top_o_supported); p2=p2.nextOfSlot) {
      if ((p2.value == pref.value) && p2.o_supported && (p2.inst.match_goal == this.decider.top_state)) {
        already_top_o_supported=true;
      }
    }
    if (already_top_o_supported) {
      return false;
    }
  }
  pref.slot=s;
  s.addPreference(pref);
  pref.preference_add_ref();
  if (wma.wma_enabled() && !s.isa_context_slot) {
    if (s.changed == null) {
      if (s.wma_val_references != null) {
        s.wma_val_references.clear();
      }
    }
  }
  tempMemory.mark_slot_as_changed(s);
  if (wma.wma_enabled() && !s.isa_context_slot) {
    boolean exists=false;
    WmeImpl w=pref.slot.getWmes();
    while (!exists && w != null) {
      if (w.getValue() == pref.value) {
        exists=true;
      }
      w=w.next;
    }
    if (!exists) {
      if (s.wma_val_references == null) {
        s.wma_val_references=new HashMap<Symbol,Long>();
      }
      Long numRef=s.wma_val_references.get(pref.value);
      if (numRef == null) {
        numRef=0L;
      }
      s.wma_val_references.put(pref.value,numRef);
    }
  }
  IdentifierImpl valueId=pref.value.asIdentifier();
  if (valueId != null) {
    decider.post_link_addition(pref.id,valueId);
  }
  if (pref.type.isBinary()) {
    IdentifierImpl refId=pref.referent.asIdentifier();
    if (refId != null) {
      decider.post_link_addition(pref.id,refId);
    }
  }
  if (s.isa_context_slot && (pref.type == PreferenceType.ACCEPTABLE || pref.type == PreferenceType.REQUIRE)) {
    decider.mark_context_slot_as_acceptable_preference_changed(s);
  }
  return true;
}","/** 
 * Add_preference_to_tm() adds a given preference to preference memory (and hence temporary memory).  <p>prefmem.cpp:216:add_preference_to_tm TODO I wish this was private, but smem and epmem use it.
 * @param pref
 */
public boolean add_preference_to_tm(Preference pref){
  Slot s=Slot.make_slot(pref.id,pref.attr,predefinedSyms.operator_symbol);
  if (!s.isa_context_slot && pref.o_supported && (pref.type == PreferenceType.ACCEPTABLE)&& (pref.inst.match_goal == this.decider.top_state)) {
    boolean already_top_o_supported=false;
    for (Preference p2=s.getAllPreferences(); (p2 != null && !already_top_o_supported); p2=p2.nextOfSlot) {
      if ((p2.value == pref.value) && p2.o_supported && (p2.inst.match_goal == this.decider.top_state)) {
        already_top_o_supported=true;
      }
    }
    if (already_top_o_supported) {
      return false;
    }
  }
  pref.slot=s;
  s.addPreference(pref);
  pref.preference_add_ref();
  if (wma.wma_enabled() && !s.isa_context_slot) {
    if (s.changed == null) {
      if (s.wma_val_references != null) {
        s.wma_val_references.clear();
      }
    }
  }
  tempMemory.mark_slot_as_changed(s);
  if (wma.wma_enabled() && !s.isa_context_slot) {
    boolean exists=false;
    WmeImpl w=pref.slot.getWmes();
    while (!exists && w != null) {
      if (w.getValue() == pref.value) {
        exists=true;
      }
      w=w.next;
    }
    if (!exists) {
      if (s.wma_val_references == null) {
        s.wma_val_references=new HashMap<Symbol,Long>();
      }
      Long numRef=s.wma_val_references.get(pref.value);
      if (numRef == null) {
        numRef=0L;
      }
      s.wma_val_references.put(pref.value,++numRef);
    }
  }
  IdentifierImpl valueId=pref.value.asIdentifier();
  if (valueId != null) {
    decider.post_link_addition(pref.id,valueId);
  }
  if (pref.type.isBinary()) {
    IdentifierImpl refId=pref.referent.asIdentifier();
    if (refId != null) {
      decider.post_link_addition(pref.id,refId);
    }
  }
  if (s.isa_context_slot && (pref.type == PreferenceType.ACCEPTABLE || pref.type == PreferenceType.REQUIRE)) {
    decider.mark_context_slot_as_acceptable_preference_changed(s);
  }
  return true;
}",0.9995427526291724
12182,"void build_CDPS(Instantiation inst){
  for (Condition cond=inst.top_of_instantiated_conditions; cond != null; cond=cond.next) {
    final PositiveCondition pc=cond.asPositiveCondition();
    final BackTraceInfo bt=pc != null ? pc.bt() : null;
    if (pc != null) {
      bt.clearContextDependentPreferenceSet();
    }
    if (pc != null && bt.trace != null) {
      if (bt.trace.slot != null) {
        if (this.chunker.chunkThroughEvaluationRules) {
          if (bt.trace.slot.hasContextDependentPreferenceSet()) {
            for (Iterator<Preference> it=bt.trace.slot.getContextDependentPreferenceSet().iterator(); it.hasNext(); ) {
              Preference new_pref=null;
              Preference pref=it.next();
              if (pref.inst.match_goal_level == inst.match_goal_level && pref.isInTempMemory()) {
                bt.addContextDependentPreference(pref);
              }
 else {
                new_pref=Preference.find_clone_for_level(pref,inst.match_goal_level);
                if (new_pref != null) {
                  if (new_pref.isInTempMemory()) {
                    bt.addContextDependentPreference(new_pref);
                  }
                }
              }
            }
          }
        }
 else {
          Preference pref=bt.trace.slot.getPreferencesByType(PreferenceType.PROHIBIT);
          while (pref != null) {
            Preference new_pref=null;
            if (pref.inst.match_goal_level == inst.match_goal_level && pref.isInTempMemory()) {
              bt.addContextDependentPreference(pref);
            }
 else {
              new_pref=Preference.find_clone_for_level(pref,inst.match_goal_level);
              if (new_pref != null) {
                if (new_pref.isInTempMemory()) {
                  bt.addContextDependentPreference(new_pref);
                }
              }
            }
            pref=pref.next;
          }
        }
      }
    }
  }
}","void build_CDPS(Instantiation inst){
  for (Condition cond=inst.top_of_instantiated_conditions; cond != null; cond=cond.next) {
    final PositiveCondition pc=cond.asPositiveCondition();
    final BackTraceInfo bt=pc != null ? pc.bt() : null;
    if (pc != null) {
      bt.clearContextDependentPreferenceSet();
    }
    if (pc != null && bt.trace != null) {
      if (bt.trace.slot != null) {
        if (this.chunker.chunkThroughEvaluationRules) {
          if (bt.trace.slot.hasContextDependentPreferenceSet()) {
            for (Iterator<Preference> it=bt.trace.slot.getContextDependentPreferenceSet().iterator(); it.hasNext(); ) {
              Preference new_pref=null;
              Preference pref=it.next();
              if (pref.inst.match_goal_level == inst.match_goal_level && pref.isInTempMemory()) {
                bt.addContextDependentPreference(pref);
                pref.preference_add_ref();
              }
 else {
                new_pref=Preference.find_clone_for_level(pref,inst.match_goal_level);
                if (new_pref != null) {
                  if (new_pref.isInTempMemory()) {
                    bt.addContextDependentPreference(new_pref);
                    new_pref.preference_add_ref();
                  }
                }
              }
            }
          }
        }
 else {
          Preference pref=bt.trace.slot.getPreferencesByType(PreferenceType.PROHIBIT);
          while (pref != null) {
            Preference new_pref=null;
            if (pref.inst.match_goal_level == inst.match_goal_level && pref.isInTempMemory()) {
              bt.addContextDependentPreference(pref);
              pref.preference_add_ref();
            }
 else {
              new_pref=Preference.find_clone_for_level(pref,inst.match_goal_level);
              if (new_pref != null) {
                if (new_pref.isInTempMemory()) {
                  bt.addContextDependentPreference(new_pref);
                  new_pref.preference_add_ref();
                }
              }
            }
            pref=pref.next;
          }
        }
      }
    }
  }
}",0.9541604384653712
12183,"/** 
 * Add a preference to a slot's CDPS This function adds a preference to a slots's context dependent preference set, checking to first see whether the pref is already there. If an operator The slot's CDPS is copied to conditions' bt structs in create_instatiation. Those copies of the CDPS are used to backtrace through all relevant local evaluation rules that led to the selection of the operator that produced a result. decide.cpp:873:add_to_CDPS
 */
public void add_to_CDPS(Agent context,Preference pref,boolean unique_value){
  boolean already_exists=false;
  final Trace trace=context.getTrace();
  final Printer printer=trace.getPrinter();
  final boolean traceBacktracing=trace.isEnabled(Category.BACKTRACING);
  if (traceBacktracing) {
    printer.print(""String_Node_Str"",pref);
  }
  for (Iterator<Preference> it=this.CDPS.iterator(); it.hasNext(); ) {
    Preference p=it.next();
    if (p == pref) {
      already_exists=true;
      break;
    }
    if (unique_value) {
      if (((pref.type == PreferenceType.BETTER) || (pref.type == PreferenceType.WORSE)) && ((p.type == PreferenceType.BETTER) || (p.type == PreferenceType.WORSE))) {
        if (pref.type == p.type) {
          already_exists=((pref.value == p.value) && (pref.referent == p.referent));
        }
 else {
          already_exists=((pref.value == p.referent) && (pref.referent == p.value));
        }
      }
 else       if ((pref.type == PreferenceType.BINARY_INDIFFERENT) && (p.type == PreferenceType.BINARY_INDIFFERENT)) {
        already_exists=(((pref.value == p.value) && (pref.referent == p.referent)) || ((pref.value == p.referent) && (pref.referent == p.value)));
      }
 else {
        already_exists=(pref.value == p.value) && (pref.type == p.type);
      }
      if (already_exists) {
        break;
      }
    }
  }
  if (!already_exists) {
    this.CDPS.add(pref);
  }
 else   if (traceBacktracing) {
    printer.print(""String_Node_Str"");
  }
}","/** 
 * Add a preference to a slot's CDPS This function adds a preference to a slots's context dependent preference set, checking to first see whether the pref is already there. If an operator The slot's CDPS is copied to conditions' bt structs in create_instatiation. Those copies of the CDPS are used to backtrace through all relevant local evaluation rules that led to the selection of the operator that produced a result. decide.cpp:873:add_to_CDPS
 */
public void add_to_CDPS(Agent context,Preference pref,boolean unique_value){
  boolean already_exists=false;
  final Trace trace=context.getTrace();
  final Printer printer=trace.getPrinter();
  final boolean traceBacktracing=trace.isEnabled(Category.BACKTRACING);
  if (traceBacktracing) {
    printer.print(""String_Node_Str"",pref);
  }
  if (this.CDPS == null) {
    this.CDPS=new LinkedList<Preference>();
  }
  for (Iterator<Preference> it=this.CDPS.iterator(); it.hasNext(); ) {
    Preference p=it.next();
    if (p == pref) {
      already_exists=true;
      break;
    }
    if (unique_value) {
      if (((pref.type == PreferenceType.BETTER) || (pref.type == PreferenceType.WORSE)) && ((p.type == PreferenceType.BETTER) || (p.type == PreferenceType.WORSE))) {
        if (pref.type == p.type) {
          already_exists=((pref.value == p.value) && (pref.referent == p.referent));
        }
 else {
          already_exists=((pref.value == p.referent) && (pref.referent == p.value));
        }
      }
 else       if ((pref.type == PreferenceType.BINARY_INDIFFERENT) && (p.type == PreferenceType.BINARY_INDIFFERENT)) {
        already_exists=(((pref.value == p.value) && (pref.referent == p.referent)) || ((pref.value == p.referent) && (pref.referent == p.value)));
      }
 else {
        already_exists=(pref.value == p.value) && (pref.type == p.type);
      }
      if (already_exists) {
        break;
      }
    }
  }
  if (!already_exists) {
    this.CDPS.push(pref);
    pref.preference_add_ref();
  }
 else   if (traceBacktracing) {
    printer.print(""String_Node_Str"");
  }
}",0.9691960931630352
12184,"/** 
 * This is called when the agent is initialized. This code here in CSoar is usually run at agent creation.
 */
public void initialize(){
  agent=Adaptables.require(DefaultEpisodicMemory.class,context,Agent.class);
  symbols=Adaptables.require(DefaultEpisodicMemory.class,context,SymbolFactoryImpl.class);
  final PropertyManager properties=Adaptables.require(DefaultEpisodicMemory.class,context,PropertyManager.class);
  decider=Adaptables.adapt(context,Decider.class);
  params=new DefaultEpisodicMemoryParams(properties,symbols);
  stats=new DefaultEpisodicMemoryStats(properties);
  epmem_init_db_catch();
  epmem_node_removals=Maps.newHashMap();
  epmem_node_mins=Lists.newArrayList();
  epmem_node_maxes=Lists.newArrayList();
  epmem_edge_removals=Maps.newHashMap();
  epmem_edge_mins=Lists.newArrayList();
  epmem_edge_maxes=Lists.newArrayList();
  epmem_id_repository=Maps.newHashMap();
  epmem_id_replacement=Maps.newHashMap();
  epmem_id_ref_counts=Maps.newHashMap();
  epmem_id_removes=Lists.newLinkedList();
  soarModule.initialize(context);
}","/** 
 * This is called when the agent is initialized. This code here in CSoar is usually run at agent creation.
 */
public void initialize(){
  agent=Adaptables.require(DefaultEpisodicMemory.class,context,Agent.class);
  symbols=Adaptables.require(DefaultEpisodicMemory.class,context,SymbolFactoryImpl.class);
  final PropertyManager properties=Adaptables.require(DefaultEpisodicMemory.class,context,PropertyManager.class);
  decider=Adaptables.adapt(context,Decider.class);
  params=new DefaultEpisodicMemoryParams(properties,symbols);
  stats=new DefaultEpisodicMemoryStats(properties);
  predefinedSyms=new EpisodicMemorySymbols(symbols);
  epmem_node_removals=Maps.newHashMap();
  epmem_node_mins=Lists.newArrayList();
  epmem_node_maxes=Lists.newArrayList();
  epmem_edge_removals=Maps.newHashMap();
  epmem_edge_mins=Lists.newArrayList();
  epmem_edge_maxes=Lists.newArrayList();
  epmem_id_repository=Maps.newHashMap();
  epmem_id_replacement=Maps.newHashMap();
  epmem_id_ref_counts=Maps.newHashMap();
  epmem_id_removes=Lists.newLinkedList();
  epmem_init_db_catch();
  soarModule.initialize(context);
}",0.6623675725472132
12185,"private ReteTest readTest(DataInputStream dis,List<Symbol> symbolMap,List<AlphaMemory> alphaMemories) throws IOException {
  Symbol sym;
  int type=dis.readInt();
  int right_field_num=dis.readInt();
  ReteTest rt=new ReteTest(type);
  if (rt.test_is_constant_relational_test()) {
    sym=symbolMap.get(dis.readInt());
    rt=ReteTest.createConstantTest(type,right_field_num,(SymbolImpl)sym);
  }
 else   if (rt.test_is_variable_relational_test()) {
    int field_num=dis.readInt();
    int levels_up=dis.readInt();
    rt=ReteTest.createVariableTest(type,right_field_num,new VarLocation(levels_up,field_num));
  }
 else   if (type == ReteTest.DISJUNCTION) {
    int count=dis.readInt();
    List<SymbolImpl> disjuncts=new ArrayList<SymbolImpl>(count);
    while (count-- > 0) {
      sym=symbolMap.get(dis.readInt());
      disjuncts.add((SymbolImpl)sym);
    }
    rt=ReteTest.createDisjunctionTest(right_field_num,disjuncts);
  }
 else {
    rt=null;
  }
  return rt;
}","private ReteTest readTest(DataInputStream dis,List<Symbol> symbolMap,List<AlphaMemory> alphaMemories) throws IOException, SoarException {
  SymbolImpl sym;
  int type=dis.readInt();
  int right_field_num=dis.readInt();
  ReteTest rt=new ReteTest(type);
  if (rt.test_is_constant_relational_test()) {
    type-=ReteTest.CONSTANT_RELATIONAL;
    sym=getSymbol(symbolMap,dis.readInt());
    rt=ReteTest.createConstantTest(type,right_field_num,(SymbolImpl)sym);
  }
 else   if (rt.test_is_variable_relational_test()) {
    type-=ReteTest.VARIABLE_RELATIONAL;
    int field_num=dis.readInt();
    int levels_up=dis.readInt();
    rt=ReteTest.createVariableTest(type,right_field_num,new VarLocation(levels_up,field_num));
  }
 else   if (type == ReteTest.DISJUNCTION) {
    int count=dis.readInt();
    List<SymbolImpl> disjuncts=new ArrayList<SymbolImpl>(count);
    while (count-- > 0) {
      sym=getSymbol(symbolMap,dis.readInt());
      disjuncts.add((SymbolImpl)sym);
    }
    rt=ReteTest.createDisjunctionTest(right_field_num,disjuncts);
  }
 else   if (type == ReteTest.ID_IS_GOAL) {
    rt=ReteTest.createGoalIdTest();
  }
 else   if (type == ReteTest.ID_IS_IMPASSE) {
    rt=ReteTest.createImpasseIdTest();
  }
 else {
    throw new SoarException(""String_Node_Str"" + rt + ""String_Node_Str""+ type+ ""String_Node_Str"");
  }
  return rt;
}",0.8131487889273357
12186,"private static NodeVarNames readNodeVarNames(DataInputStream dis,ReteNode node,List<Symbol> symbolMap) throws SoarException, IOException {
  if (node.node_type == ReteNodeType.DUMMY_TOP_BNODE) {
    return null;
  }
  if (node.node_type == ReteNodeType.CN_BNODE) {
    ReteNode temp=node.b_cn().partner.parent;
    NodeVarNames nvn_for_ncc=readNodeVarNames(dis,temp,symbolMap);
    final NodeVarNames bottom_of_subconditions=nvn_for_ncc;
    while (temp != node.parent) {
      temp=temp.real_parent_node();
      nvn_for_ncc=nvn_for_ncc.parent;
    }
    return NodeVarNames.createForNcc(nvn_for_ncc,bottom_of_subconditions);
  }
  return NodeVarNames.newInstance(readNodeVarNames(dis,node.real_parent_node(),symbolMap),readVarNames(dis,symbolMap),readVarNames(dis,symbolMap),readVarNames(dis,symbolMap));
}","private static NodeVarNames readNodeVarNames(DataInputStream dis,ReteNode node,List<Symbol> symbolMap) throws SoarException, IOException {
  if (node.node_type == ReteNodeType.DUMMY_TOP_BNODE) {
    return null;
  }
  if (node.node_type == ReteNodeType.CN_BNODE) {
    ReteNode temp=node.b_cn().partner.parent;
    NodeVarNames nvn_for_ncc=readNodeVarNames(dis,temp,symbolMap);
    final NodeVarNames bottom_of_subconditions=nvn_for_ncc;
    while (temp != node.parent) {
      temp=temp.real_parent_node();
      nvn_for_ncc=nvn_for_ncc.parent;
    }
    return NodeVarNames.createForNcc(nvn_for_ncc,bottom_of_subconditions);
  }
  Object id=readVarNames(dis,symbolMap);
  Object attr=readVarNames(dis,symbolMap);
  Object value=readVarNames(dis,symbolMap);
  NodeVarNames parent=readNodeVarNames(dis,node.real_parent_node(),symbolMap);
  return NodeVarNames.newInstance(parent,id,attr,value);
}",0.7852112676056338
12187,"private ReteTest readTestList(DataInputStream dis,List<Symbol> symbolMap,List<AlphaMemory> alphaMemories) throws IOException {
  ReteTest rt, prev_rt, first;
  int count;
  prev_rt=null;
  first=null;
  count=dis.readInt();
  while (count-- > 0) {
    rt=readTest(dis,symbolMap,alphaMemories);
    if (prev_rt != null) {
      prev_rt.next=rt;
    }
 else {
      first=rt;
    }
    prev_rt=rt;
  }
  if (prev_rt != null) {
    prev_rt.next=null;
  }
 else {
    first=null;
  }
  return first;
}","private ReteTest readTestList(DataInputStream dis,List<Symbol> symbolMap,List<AlphaMemory> alphaMemories) throws IOException, SoarException {
  ReteTest rt, prev_rt, first;
  int count;
  prev_rt=null;
  first=null;
  count=dis.readInt();
  while (count-- > 0) {
    rt=readTest(dis,symbolMap,alphaMemories);
    if (prev_rt != null) {
      prev_rt.next=rt;
    }
 else {
      first=rt;
    }
    prev_rt=rt;
  }
  if (prev_rt != null) {
    prev_rt.next=null;
  }
 else {
    first=null;
  }
  return first;
}",0.9851337958374627
12188,"protected ReteNetReader(Agent context){
  Arguments.checkNotNull(context,""String_Node_Str"");
  this.context=context;
  this.syms=Adaptables.require(getClass(),context,SymbolFactoryImpl.class);
  this.rete=Adaptables.require(getClass(),context,Rete.class);
  this.productionManager=context.getProductions();
}","protected ReteNetReader(Agent context){
  Arguments.checkNotNull(context,""String_Node_Str"");
  this.context=context;
  this.syms=Adaptables.require(getClass(),context,SymbolFactoryImpl.class);
  this.rete=Adaptables.require(getClass(),context,Rete.class);
  this.rl=Adaptables.require(getClass(),context,ReinforcementLearning.class);
  this.productionManager=context.getProductions();
}",0.8876080691642652
12189,"private RhsValue reteload_rhs_value(DataInputStream dis,List<Symbol> symbolMap,List<AlphaMemory> alphaMemories) throws IOException, SoarException {
  RhsValue rv=null;
  Symbol sym;
  int field_num;
  int type;
  int levels_up;
  type=dis.readInt();
switch (type) {
case 0:
    sym=symbolMap.get(dis.readInt());
  rv=(RhsValue)sym;
break;
case 1:
sym=symbolMap.get(dis.readInt());
boolean isStandalone=dis.readBoolean();
RhsFunctionHandler rf=context.getRhsFunctions().getHandler(sym.asString().getValue());
if (rf == null) {
throw new SoarException(""String_Node_Str"" + sym.asString().getValue());
}
RhsFunctionCall funCall=new RhsFunctionCall(sym.asString(),isStandalone);
int count=dis.readInt();
while (count-- > 0) {
funCall.addArgument(reteload_rhs_value(dis,symbolMap,alphaMemories));
}
rv=funCall;
break;
case 2:
field_num=dis.readInt();
levels_up=dis.readInt();
rv=ReteLocation.create(field_num,levels_up);
break;
case 3:
int i=dis.readInt();
rete.update_max_rhs_unbound_variables(i + 1);
rv=UnboundVariable.create(i);
break;
}
return rv;
}","private RhsValue reteload_rhs_value(DataInputStream dis,List<Symbol> symbolMap,List<AlphaMemory> alphaMemories) throws IOException, SoarException {
  RhsValue rv=null;
  SymbolImpl sym;
  int field_num;
  int type;
  int levels_up;
  type=dis.readInt();
switch (type) {
case 0:
    sym=getSymbol(symbolMap,dis.readInt());
  rv=new RhsSymbolValue(sym);
break;
case 1:
sym=getSymbol(symbolMap,dis.readInt());
boolean isStandalone=dis.readBoolean();
RhsFunctionCall funCall=new RhsFunctionCall(sym.asString(),isStandalone);
int count=dis.readInt();
while (count-- > 0) {
funCall.addArgument(reteload_rhs_value(dis,symbolMap,alphaMemories));
}
rv=funCall;
break;
case 2:
field_num=dis.readInt();
levels_up=dis.readInt();
rv=ReteLocation.create(field_num,levels_up);
break;
case 3:
int i=dis.readInt();
rete.update_max_rhs_unbound_variables(i + 1);
rv=UnboundVariable.create(i);
break;
}
return rv;
}",0.8574369531652084
12190,"private void readNodeAndChildren(DataInputStream dis,ReteNode parent,List<Symbol> symbolMap,List<AlphaMemory> alphaMemories) throws IOException, SoarException {
  final ReteNodeType type=ReteNodeType.valueOf(dis.readUTF());
  ReteNode New=null;
  AlphaMemory am;
  boolean left_unlinked_flag;
  ReteTest other_tests;
  Production prod;
  VarLocation left_hash_loc=new VarLocation(-1,-1);
switch (type) {
case MEMORY_BNODE:
    left_hash_loc=new VarLocation(dis.readInt(),dis.readInt());
case UNHASHED_MEMORY_BNODE:
  New=ReteNode.make_new_mem_node(rete,parent,type,left_hash_loc);
break;
case MP_BNODE:
left_hash_loc=new VarLocation(dis.readInt(),dis.readInt());
case UNHASHED_MP_BNODE:
am=alphaMemories.get(dis.readInt());
am.reference_count++;
other_tests=readTestList(dis,symbolMap,alphaMemories);
left_unlinked_flag=dis.readBoolean();
New=ReteNode.make_new_mp_node(rete,parent,type,left_hash_loc,am,other_tests,left_unlinked_flag);
break;
case POSITIVE_BNODE:
case UNHASHED_POSITIVE_BNODE:
am=alphaMemories.get(dis.readInt());
am.reference_count++;
other_tests=readTestList(dis,symbolMap,alphaMemories);
left_unlinked_flag=dis.readBoolean();
New=ReteNode.make_new_positive_node(rete,parent,type,am,other_tests,left_unlinked_flag);
break;
case NEGATIVE_BNODE:
left_hash_loc=new VarLocation(dis.readInt(),dis.readInt());
case UNHASHED_NEGATIVE_BNODE:
am=alphaMemories.get(dis.readInt());
am.reference_count++;
other_tests=readTestList(dis,symbolMap,alphaMemories);
New=ReteNode.make_new_negative_node(rete,parent,type,left_hash_loc,am,other_tests);
break;
case CN_PARTNER_BNODE:
int count=dis.readInt();
ReteNode ncc_top=parent;
while (count-- > 0) ncc_top=ncc_top.real_parent_node();
New=ReteNode.make_new_cn_node(rete,ncc_top,parent);
break;
case P_BNODE:
String name=dis.readUTF();
String doc=dis.readUTF();
ProductionType prodType=ProductionType.valueOf(dis.readUTF());
Support declaredSupport=Support.valueOf(dis.readUTF());
Action actionList=readActionList(dis,symbolMap,alphaMemories);
prod=Production.newBuilder().name(name).documentation(doc).type(prodType).support(declaredSupport).actions(actionList).build();
int numUnboundVariables=dis.readInt();
rete.update_max_rhs_unbound_variables(numUnboundVariables);
for (int i=0; i < numUnboundVariables; i++) {
prod.getRhsUnboundVariables().add((Variable)symbolMap.get(dis.readInt()));
}
New=ReteNode.make_new_production_node(rete,parent,prod);
if (dis.readBoolean()) {
New.b_p().parents_nvn=readNodeVarNames(dis,parent,symbolMap);
}
 else {
New.b_p().parents_nvn=null;
}
rete.update_node_with_matches_from_above(New);
context.getEvents().fireEvent(new ProductionAddedEvent(context,prod));
break;
}
int count=dis.readInt();
while (count-- > 0) readNodeAndChildren(dis,New,symbolMap,alphaMemories);
}","private void readNodeAndChildren(DataInputStream dis,ReteNode parent,List<Symbol> symbolMap,List<AlphaMemory> alphaMemories) throws IOException, SoarException {
  final ReteNodeType type=ReteNodeType.valueOf(dis.readUTF());
  ReteNode New=null;
  AlphaMemory am;
  boolean left_unlinked_flag;
  ReteTest other_tests;
  Production prod;
  VarLocation left_hash_loc=new VarLocation(-1,-1);
switch (type) {
case MEMORY_BNODE:
    left_hash_loc=readLeftHashLoc(dis);
case UNHASHED_MEMORY_BNODE:
  New=ReteNode.make_new_mem_node(rete,parent,type,left_hash_loc);
break;
case MP_BNODE:
left_hash_loc=readLeftHashLoc(dis);
case UNHASHED_MP_BNODE:
am=alphaMemories.get(dis.readInt());
am.reference_count++;
other_tests=readTestList(dis,symbolMap,alphaMemories);
left_unlinked_flag=dis.readBoolean();
New=ReteNode.make_new_mp_node(rete,parent,type,left_hash_loc,am,other_tests,left_unlinked_flag);
break;
case POSITIVE_BNODE:
case UNHASHED_POSITIVE_BNODE:
am=alphaMemories.get(dis.readInt());
am.reference_count++;
other_tests=readTestList(dis,symbolMap,alphaMemories);
left_unlinked_flag=dis.readBoolean();
New=ReteNode.make_new_positive_node(rete,parent,type,am,other_tests,left_unlinked_flag);
break;
case NEGATIVE_BNODE:
left_hash_loc=readLeftHashLoc(dis);
case UNHASHED_NEGATIVE_BNODE:
am=alphaMemories.get(dis.readInt());
am.reference_count++;
other_tests=readTestList(dis,symbolMap,alphaMemories);
New=ReteNode.make_new_negative_node(rete,parent,type,left_hash_loc,am,other_tests);
break;
case CN_PARTNER_BNODE:
int count=dis.readInt();
ReteNode ncc_top=parent;
while (count-- > 0) ncc_top=ncc_top.real_parent_node();
New=ReteNode.make_new_cn_node(rete,ncc_top,parent);
break;
case P_BNODE:
String name=dis.readUTF();
String doc=dis.readUTF();
ProductionType prodType=ProductionType.valueOf(dis.readUTF());
Support declaredSupport=Support.valueOf(dis.readUTF());
Action actionList=readActionList(dis,symbolMap,alphaMemories);
prod=Production.newBuilder().name(name).documentation(doc).type(prodType).support(declaredSupport).actions(actionList).build();
int numUnboundVariables=dis.readInt();
rete.update_max_rhs_unbound_variables(numUnboundVariables);
List<Variable> unboundVars=new ArrayList<Variable>(numUnboundVariables);
for (int i=0; i < numUnboundVariables; i++) {
unboundVars.add(getSymbol(symbolMap,dis.readInt()).asVariable());
}
prod.setRhsUnboundVariables(unboundVars);
productionManager.addProductionToNameTypeMaps(prod);
rl.addProduction(prod);
New=ReteNode.make_new_production_node(rete,parent,prod);
if (dis.readBoolean()) {
New.b_p().parents_nvn=readNodeVarNames(dis,parent,symbolMap);
}
 else {
New.b_p().parents_nvn=null;
}
rete.update_node_with_matches_from_above(New);
context.getEvents().fireEvent(new ProductionAddedEvent(context,prod));
break;
}
int count=dis.readInt();
while (count-- > 0) readNodeAndChildren(dis,New,symbolMap,alphaMemories);
}",0.9190823403876934
12191,"private Action readRHSAction(DataInputStream dis,List<Symbol> symbolMap,List<AlphaMemory> alphaMemories) throws IOException, SoarException {
  int type=dis.readInt();
  Action a=null;
  if (type == 0) {
    a=new MakeAction();
  }
 else   if (type == 1) {
    a=new FunctionAction(null);
  }
  a.preference_type=PreferenceType.valueOf(dis.readUTF());
  a.support=ActionSupport.valueOf(dis.readUTF());
  if (type == 1) {
    FunctionAction fa=a.asFunctionAction();
    fa.call=reteload_rhs_value(dis,symbolMap,alphaMemories).asFunctionCall();
  }
 else   if (type == 0) {
    MakeAction ma=a.asMakeAction();
    ma.id=reteload_rhs_value(dis,symbolMap,alphaMemories);
    ma.attr=reteload_rhs_value(dis,symbolMap,alphaMemories);
    ma.value=reteload_rhs_value(dis,symbolMap,alphaMemories);
    if (a.preference_type.isBinary()) {
      ma.referent=reteload_rhs_value(dis,symbolMap,alphaMemories);
    }
 else {
      ma.referent=null;
    }
  }
  return a;
}","private Action readRHSAction(DataInputStream dis,List<Symbol> symbolMap,List<AlphaMemory> alphaMemories) throws IOException, SoarException {
  int type=dis.readInt();
  Action a=null;
  if (type == 0) {
    a=new MakeAction();
  }
 else   if (type == 1) {
    a=new FunctionAction(null);
  }
  boolean hasPreferenceType=dis.readBoolean();
  if (hasPreferenceType) {
    String preference_type=dis.readUTF();
    a.preference_type=PreferenceType.valueOf(preference_type);
  }
 else {
    a.preference_type=null;
  }
  a.support=ActionSupport.valueOf(dis.readUTF());
  if (type == 1) {
    FunctionAction fa=a.asFunctionAction();
    fa.call=reteload_rhs_value(dis,symbolMap,alphaMemories).asFunctionCall();
  }
 else   if (type == 0) {
    MakeAction ma=a.asMakeAction();
    ma.id=reteload_rhs_value(dis,symbolMap,alphaMemories);
    ma.attr=reteload_rhs_value(dis,symbolMap,alphaMemories);
    ma.value=reteload_rhs_value(dis,symbolMap,alphaMemories);
    if (a.preference_type != null && a.preference_type.isBinary()) {
      ma.referent=reteload_rhs_value(dis,symbolMap,alphaMemories);
    }
 else {
      ma.referent=null;
    }
  }
  return a;
}",0.8808732795443759
12192,"@Override public Identifier xmlToWme(File file){
  Element root=getRootElement(file);
  xmlPath.pushTag(root.getNodeName());
  return super.fromXml(root);
}","@Override public Identifier xmlToWme(File file){
  Element root=getRootElement(file);
  xmlPath.pushTag(root.getNodeName());
  Identifier ret=super.fromXml(root);
  xmlPath.popTag();
  return ret;
}",0.8587570621468926
12193,"@Override public Identifier fromXml(Element element){
  xmlPath.pushTag(element.getNodeName());
  return super.fromXml(element);
}","@Override public Identifier fromXml(Element element){
  xmlPath.pushTag(element.getNodeName());
  Identifier ret=super.fromXml(element);
  xmlPath.popTag();
  return ret;
}",0.8344370860927153
12194,"/** 
 * <p>sml_KernelHelpers.cpp:906:soar_ecPrintPreferences <p>Parameters in original implementation are member properties here
 * @param agent The agent
 * @param printer The printer to print to
 * @throws IOException
 */
public void print(Agent agent,Printer printer) throws IOException {
  final PredefinedSymbols predefinedSyms=Adaptables.adapt(agent,PredefinedSymbols.class);
  if (object) {
    for (Slot s=id.slots; s != null; s=s.next) {
      if (s.attr == predefinedSyms.operator_symbol)       printer.print(""String_Node_Str"",s.id,s.attr);
 else       printer.print(""String_Node_Str"",s.id,s.attr);
      for (      PreferenceType pt : PreferenceType.values()) {
        if (s.getPreferencesByType(pt) != null) {
          if (s.isa_context_slot)           printer.print(""String_Node_Str"",pt.getDisplayName());
          for (Preference p=s.getPreferencesByType(pt); p != null; p=p.next) {
            print_preference_and_source(agent,printer,p);
          }
        }
      }
    }
    if (id.goalInfo != null && id.goalInfo.getImpasseWmes() != null)     printer.print(""String_Node_Str"",id);
    for (WmeImpl w=id.goalInfo != null ? id.goalInfo.getImpasseWmes() : null; w != null; w=w.next) {
      printer.print(""String_Node_Str"",w);
    }
    if (id.getInputWmes() != null)     printer.print(""String_Node_Str"",id);
    for (WmeImpl w=id.getInputWmes(); w != null; w=w.next) {
      printer.print(""String_Node_Str"",w);
    }
    return;
  }
 else   if (!id.isGoal() && attr == null) {
    for (    Wme w : agent.getAllWmesInRete()) {
      if (w.getValue() == id) {
        if (w.getValue() == predefinedSyms.operator_symbol)         printer.print(""String_Node_Str"");
 else         printer.print(""String_Node_Str"");
        printer.print(""String_Node_Str"",w.getTimetag(),w.getIdentifier(),w.getAttribute(),w.getValue());
        Iterator<Preference> it=w.getPreferences();
        if (!it.hasNext()) {
          printer.print(""String_Node_Str"");
        }
 else {
          while (it.hasNext()) {
            print_preference_and_source(agent,printer,it.next());
          }
        }
      }
    }
    return;
  }
  Slot s=Slot.find_slot(id,attr);
  if (s == null) {
    printer.print(""String_Node_Str"",id,attr);
    return;
  }
  printer.print(""String_Node_Str"",id,attr);
  for (  PreferenceType pt : PreferenceType.values()) {
    if (s.getPreferencesByType(pt) != null) {
      printer.print(""String_Node_Str"",pt.getDisplayName());
      for (Preference p=s.getPreferencesByType(pt); p != null; p=p.next) {
        print_preference_and_source(agent,printer,p);
      }
    }
  }
}","/** 
 * <p>sml_KernelHelpers.cpp:906:soar_ecPrintPreferences <p>Parameters in original implementation are member properties here
 * @param agent The agent
 * @param printer The printer to print to
 * @throws IOException
 */
public void print(Agent agent,Printer printer) throws IOException {
  final PredefinedSymbols predefinedSyms=Adaptables.adapt(agent,PredefinedSymbols.class);
  if (object) {
    for (Slot s=id.slots; s != null; s=s.next) {
      if (s.attr == predefinedSyms.operator_symbol)       printer.print(""String_Node_Str"",s.id,s.attr);
 else       printer.print(""String_Node_Str"",s.id,s.attr);
      for (      PreferenceType pt : PreferenceType.values()) {
        if (s.getPreferencesByType(pt) != null) {
          if (s.isa_context_slot)           printer.print(""String_Node_Str"",pt.getDisplayName());
          for (Preference p=s.getPreferencesByType(pt); p != null; p=p.next) {
            print_preference_and_source(agent,printer,p);
          }
        }
      }
    }
    if (id.goalInfo != null && id.goalInfo.getImpasseWmes() != null)     printer.print(""String_Node_Str"",id);
    for (WmeImpl w=id.goalInfo != null ? id.goalInfo.getImpasseWmes() : null; w != null; w=w.next) {
      printer.print(""String_Node_Str"",w);
    }
    if (id.getInputWmes() != null)     printer.print(""String_Node_Str"",id);
    for (WmeImpl w=id.getInputWmes(); w != null; w=w.next) {
      printer.print(""String_Node_Str"",w);
    }
    return;
  }
 else   if (!id.isGoal() && attr == null) {
    for (    Wme w : agent.getAllWmesInRete()) {
      if (w.getValue() == id) {
        if (w.getValue() == predefinedSyms.operator_symbol)         printer.print(""String_Node_Str"");
 else         printer.print(""String_Node_Str"");
        printer.print(""String_Node_Str"",w.getTimetag(),w.getIdentifier(),w.getAttribute(),w.getValue());
        Iterator<Preference> it=w.getPreferences();
        if (!it.hasNext()) {
          printer.print(""String_Node_Str"");
        }
 else {
          while (it.hasNext()) {
            print_preference_and_source(agent,printer,it.next());
          }
        }
      }
    }
    return;
  }
  Slot s=Slot.find_slot(id,attr);
  if (s == null) {
    printer.print(""String_Node_Str"",id,attr);
    return;
  }
  printer.print(""String_Node_Str"",id,attr);
  for (  PreferenceType pt : PreferenceType.values()) {
    if (s.getPreferencesByType(pt) != null) {
      printer.print(""String_Node_Str"",pt.getDisplayName());
      for (Preference p=s.getPreferencesByType(pt); p != null; p=p.next) {
        print_preference_and_source(agent,printer,p);
      }
    }
  }
  if (id.isGoal() && attr.toString().equals(""String_Node_Str"")) {
    final ByRef<Preference> cand=ByRef.create(null);
    final Decider decider=Adaptables.adapt(agent,Decider.class);
    ImpasseType impasse_type=decider.run_preference_semantics_for_consistency_check(s,cand);
    if ((impasse_type == ImpasseType.NONE) && cand != null) {
      printer.print(""String_Node_Str"");
      int count=0;
      double total_probability=0;
      final Exploration exploration=Adaptables.adapt(agent,Exploration.class);
      for (Preference p=cand.value; p != null; p=p.next_candidate) {
        exploration.exploration_compute_value_of_candidate(p,s,0);
        ++count;
        if (p.numeric_value > 0)         total_probability+=p.numeric_value;
      }
      assert(count != 0);
      for (Preference p=cand.value; p != null; p=p.next_candidate) {
        double prob=total_probability > 0.0 ? p.numeric_value / total_probability : 1.0 / count;
        print_preference_and_source(agent,printer,p,prob);
      }
    }
  }
}",0.8361236316806182
12195,"/** 
 * This procedure prints a preference and the production which is the source of the preference. <p>NOTE: The called of this routine should be stepping thru slots only, (not stepping thru WMEs) and therefore input wmes and arch-wmes are already excluded and we can print :I when o_support is FALSE. <p>sml_KernelHelpers.cpp:794:print_preference_and_source
 * @param agnt
 * @param printer
 * @param pref
 * @throws IOException
 */
private void print_preference_and_source(Agent agnt,Printer printer,Preference pref) throws IOException {
  final TraceFormats traceFormats=Adaptables.adapt(agnt,TraceFormats.class);
  final PredefinedSymbols predefinedSyms=Adaptables.adapt(agnt,PredefinedSymbols.class);
  printer.print(""String_Node_Str"");
  if (pref.attr == predefinedSyms.operator_symbol) {
    traceFormats.print_object_trace(printer.getWriter(),pref.value);
  }
 else {
    printer.print(""String_Node_Str"",pref.id,pref.attr,pref.value);
  }
  if (pref.attr == predefinedSyms.operator_symbol) {
    printer.print(""String_Node_Str"",pref.type.getIndicator());
  }
  if (pref.type.isBinary())   traceFormats.print_object_trace(printer.getWriter(),pref.referent);
  if (pref.o_supported)   printer.print(""String_Node_Str"");
 else   printer.print(""String_Node_Str"");
  printer.print(""String_Node_Str"");
  if (print_prod) {
    printer.print(""String_Node_Str"");
    pref.inst.trace(printer.asFormatter(),wtt);
    printer.print(""String_Node_Str"");
  }
}","private void print_preference_and_source(Agent agnt,Printer printer,Preference pref,Double selection_probability) throws IOException {
  final TraceFormats traceFormats=Adaptables.adapt(agnt,TraceFormats.class);
  final PredefinedSymbols predefinedSyms=Adaptables.adapt(agnt,PredefinedSymbols.class);
  printer.print(""String_Node_Str"");
  if (pref.attr == predefinedSyms.operator_symbol) {
    traceFormats.print_object_trace(printer.getWriter(),pref.value);
  }
 else {
    printer.print(""String_Node_Str"",pref.id,pref.attr,pref.value);
  }
  if (pref.attr == predefinedSyms.operator_symbol) {
    printer.print(""String_Node_Str"",pref.type.getIndicator());
  }
  if (pref.type.isBinary())   traceFormats.print_object_trace(printer.getWriter(),pref.referent);
  if (pref.o_supported)   printer.print(""String_Node_Str"");
 else   printer.print(""String_Node_Str"");
  if (selection_probability != null)   printer.print(""String_Node_Str"",selection_probability * 100.0);
  printer.print(""String_Node_Str"");
  if (print_prod) {
    printer.print(""String_Node_Str"");
    pref.inst.trace(printer.asFormatter(),wtt);
    printer.print(""String_Node_Str"");
  }
}",0.7191701882443334
12196,"/** 
 * <p>exploration.cpp:621:exploration_boltzmann_select
 */
private Preference exploration_boltzmann_select(Preference candidates){
  double temp=exploration_get_parameter_value(""String_Node_Str"");
  final Trace trace=context.getTrace();
  if (trace.isEnabled(Category.INDIFFERENT)) {
    for (Preference cand=candidates; cand != null; cand=cand.next_candidate) {
      trace.print(""String_Node_Str"",cand.value);
      trace.print(""String_Node_Str"",cand.numeric_value,Math.exp(cand.numeric_value / temp));
    }
  }
  double exp_max=Math.log(Double.MAX_VALUE);
  double q_max=exp_max * temp;
  double q_diff=0;
  if (candidates.next_candidate != null) {
    double q_high=candidates.numeric_value;
    double q_low=candidates.numeric_value;
    for (Preference cand=candidates.next_candidate; cand != null; cand=cand.next_candidate) {
      if (cand.numeric_value > q_high)       q_high=cand.numeric_value;
      if (cand.numeric_value < q_low)       q_low=cand.numeric_value;
    }
    q_diff=(q_high - q_low) / 2;
  }
 else {
    q_diff=candidates.numeric_value;
  }
  double total_probability=0.0;
  for (Preference cand=candidates; cand != null; cand=cand.next_candidate) {
    double q_val=(cand.numeric_value - q_diff);
    total_probability+=Math.exp((double)(q_val / temp));
    if (q_val > q_max) {
      context.getPrinter().warn(""String_Node_Str"",q_val,q_max);
    }
  }
  double rn=context.getRandom().nextDouble();
  double selected_probability=rn * total_probability;
  double current_sum=0.0;
  for (Preference cand=candidates; cand != null; cand=cand.next_candidate) {
    current_sum+=Math.exp((double)((cand.numeric_value - q_diff) / temp));
    if (selected_probability <= current_sum)     return cand;
  }
  return null;
}","Preference exploration_boltzmann_select(Preference candidates){
  double t=exploration_get_parameter_value(""String_Node_Str"");
  double maxq;
  Preference c;
  maxq=candidates.numeric_value;
  for (c=candidates.next_candidate; c != null; c=c.next_candidate) {
    if (maxq < c.numeric_value)     maxq=c.numeric_value;
  }
  double exptotal=0.0;
  List<Double> expvals=new LinkedList<Double>();
  for (c=candidates; c != null; c=c.next_candidate) {
    double v=Math.exp((c.numeric_value - maxq) / t);
    expvals.add(v);
    exptotal+=v;
  }
  final Trace trace=context.getTrace();
  if (trace.isEnabled(Category.INDIFFERENT)) {
    ListIterator<Double> i=expvals.listIterator();
    for (c=candidates; c != null; c=c.next_candidate) {
      double prob=i.next() / exptotal;
      trace.print(""String_Node_Str"",c.value);
      trace.print(""String_Node_Str"",c.numeric_value,prob);
    }
  }
  double r=context.getRandom().nextDouble() * exptotal;
  double sum=0.0;
  ListIterator<Double> i=expvals.listIterator();
  for (c=candidates, i=expvals.listIterator(); c != null; c=c.next_candidate) {
    sum+=i.next();
    if (sum >= r)     return c;
  }
  return null;
}",0.2611683848797251
12197,"/** 
 * prefmem.cpp:100:deallocate_preference
 * @param pref
 */
private void deallocate_preference(Preference pref,RecognitionMemory recMemory){
}","/** 
 * prefmem.cpp:100:deallocate_preference
 * @param pref
 */
static public void deallocate_preference(Preference pref,RecognitionMemory recMemory){
}",0.9466666666666668
12198,"/** 
 * This deallocates the given instantiation. This should only be invoked via the possibly_deallocate_instantiation() macro. <p>recmem.cpp:757:deallocate_instantiation
 * @param inst
 */
private void deallocate_instantiation(Instantiation inst){
  int level=inst.match_goal_level;
  for (Condition cond=inst.top_of_instantiated_conditions; cond != null; cond=cond.next) {
    final PositiveCondition pc=cond.asPositiveCondition();
    if (pc != null) {
      final BackTraceInfo bt=pc.bt();
      if (bt.hasProhibits()) {
        for (        Preference pref : bt) {
          if (SoarConstants.DO_TOP_LEVEL_REF_CTS) {
            pref.preference_remove_ref(this);
          }
 else {
            if (level > SoarConstants.TOP_GOAL_LEVEL)             pref.preference_remove_ref(this);
          }
        }
        bt.clearProhibits();
      }
      if (SoarConstants.DO_TOP_LEVEL_REF_CTS) {
        if (bt.trace != null) {
          bt.trace.preference_remove_ref(this);
          bt.trace=null;
        }
      }
 else {
        if (level > SoarConstants.TOP_GOAL_LEVEL) {
          if (bt.trace != null) {
            bt.trace.preference_remove_ref(this);
            bt.trace=null;
          }
        }
      }
    }
  }
  inst.top_of_instantiated_conditions=null;
  inst.bottom_of_instantiated_conditions=null;
  inst.nots=null;
}","/** 
 * This deallocates the given instantiation. This should only be invoked via the possibly_deallocate_instantiation() macro. <p>recmem.cpp:757:deallocate_instantiation
 * @param inst
 */
private void deallocate_instantiation(Instantiation inst){
  Condition cond;
  int level;
  Stack<Condition> cond_stack=new Stack<Condition>();
  List<Instantiation> inst_list=new ArrayList<Instantiation>();
  inst_list.add(inst);
  ListIterator<Instantiation> next_iter=inst_list.listIterator();
  while (next_iter.hasNext()) {
    inst=next_iter.next();
    assert(inst != null);
    level=inst.match_goal_level;
    for (cond=inst.top_of_instantiated_conditions; cond != null; cond=cond.next) {
      final PositiveCondition pc=cond.asPositiveCondition();
      if (pc != null) {
        final BackTraceInfo bt=pc.bt();
        if (bt.hasProhibits()) {
          for (          Preference pref : bt) {
            if (SoarConstants.DO_TOP_LEVEL_REF_CTS) {
              pref.preference_remove_ref(this);
            }
 else {
              if (level > SoarConstants.TOP_GOAL_LEVEL)               pref.preference_remove_ref(this);
            }
          }
          bt.clearProhibits();
        }
        if (!SoarConstants.DO_TOP_LEVEL_REF_CTS && level <= SoarConstants.TOP_GOAL_LEVEL) {
          continue;
        }
 else {
          final Preference trace=bt.trace;
          if (trace != null) {
            trace.reference_count--;
            if (trace.reference_count == 0) {
              if (trace.reference_count != 0) {
                continue;
              }
              boolean has_active_clones=false;
              for (Preference clone=trace.next_clone; clone != null; clone=clone.next_clone) {
                if (clone.reference_count != 0) {
                  has_active_clones=true;
                }
              }
              if (has_active_clones) {
                continue;
              }
              for (Preference clone=trace.prev_clone; clone != null; clone=clone.prev_clone) {
                if (clone.reference_count != 0) {
                  has_active_clones=true;
                }
              }
              if (has_active_clones) {
                continue;
              }
{
                Preference clone=trace.next_clone;
                Preference next;
                while (clone != null) {
                  next=clone.next_clone;
                  Preference.deallocate_preference(clone,this);
                  clone=next;
                }
                clone=trace.prev_clone;
                while (clone != null) {
                  next=clone.prev_clone;
                  Preference.deallocate_preference(clone,this);
                  clone=next;
                }
              }
              if (trace.on_goal_list) {
                if (trace.all_of_goal_next != null) {
                  trace.all_of_goal_next.all_of_goal_prev=trace.all_of_goal_prev;
                }
                if (trace.all_of_goal_prev != null) {
                  trace.all_of_goal_prev.all_of_goal_next=trace.all_of_goal_next;
                }
 else {
                  trace.inst.match_goal.goalInfo.preferences_from_goal=trace.all_of_goal_next;
                }
              }
              if (trace.inst_next != null) {
                trace.inst_next.inst_prev=trace.inst_prev;
              }
              if (trace.inst_prev != null) {
                trace.inst_prev.inst_next=trace.inst_next;
              }
 else {
                trace.inst.preferences_generated=trace.inst_next;
              }
              if ((trace.inst.preferences_generated == null) && (!trace.inst.in_ms)) {
                int index=next_iter.previousIndex() + 1;
                inst_list.add(index,trace.inst);
                next_iter=inst_list.listIterator(index);
              }
              cond_stack.push(cond);
            }
          }
        }
      }
    }
  }
  for (  Condition temp : cond_stack) {
    temp.asPositiveCondition().bt().trace=null;
  }
  for (  Instantiation temp : inst_list) {
    temp.top_of_instantiated_conditions=null;
    temp.bottom_of_instantiated_conditions=null;
    temp.nots=null;
  }
}",0.3112078346028291
12199,"/** 
 * Copy constructor used to negate pos and neg conditions. Test fields are only a shallow copy!
 */
protected ThreeFieldCondition(ThreeFieldCondition other){
  this.id_test=other.id_test;
  this.attr_test=other.attr_test;
  this.value_test=other.value_test;
}","/** 
 * Copy constructor used to negate pos and neg conditions. Test fields are only a shallow copy!
 */
protected ThreeFieldCondition(ThreeFieldCondition other){
  this.id_test=other.id_test;
  this.attr_test=other.attr_test;
  this.value_test=other.value_test;
  this.test_for_acceptable_preference=other.test_for_acceptable_preference;
}",0.8741721854304636
12200,"/** 
 * This deallocates the given instantiation. This should only be invoked via the possibly_deallocate_instantiation() macro. <p>recmem.cpp:757:deallocate_instantiation
 * @param inst
 */
private void deallocate_instantiation(Instantiation inst){
  int level=inst.match_goal_level;
  for (Condition cond=inst.top_of_instantiated_conditions; cond != null; cond=cond.next) {
    final PositiveCondition pc=cond.asPositiveCondition();
    if (pc != null) {
      final BackTraceInfo bt=pc.bt();
      if (bt.hasProhibits()) {
        for (        Preference pref : bt) {
          if (SoarConstants.DO_TOP_LEVEL_REF_CTS) {
            pref.preference_remove_ref(this);
          }
 else {
            if (level > SoarConstants.TOP_GOAL_LEVEL)             pref.preference_remove_ref(this);
          }
        }
        bt.clearProhibits();
      }
      if (bt.trace != null) {
        bt.trace.preference_remove_ref(this);
        bt.trace=null;
      }
    }
  }
  inst.top_of_instantiated_conditions=null;
  inst.bottom_of_instantiated_conditions=null;
  inst.nots=null;
}","/** 
 * This deallocates the given instantiation. This should only be invoked via the possibly_deallocate_instantiation() macro. <p>recmem.cpp:757:deallocate_instantiation
 * @param inst
 */
private void deallocate_instantiation(Instantiation inst){
  int level=inst.match_goal_level;
  for (Condition cond=inst.top_of_instantiated_conditions; cond != null; cond=cond.next) {
    final PositiveCondition pc=cond.asPositiveCondition();
    if (pc != null) {
      final BackTraceInfo bt=pc.bt();
      if (bt.hasProhibits()) {
        for (        Preference pref : bt) {
          if (SoarConstants.DO_TOP_LEVEL_REF_CTS) {
            pref.preference_remove_ref(this);
          }
 else {
            if (level > SoarConstants.TOP_GOAL_LEVEL)             pref.preference_remove_ref(this);
          }
        }
        bt.clearProhibits();
      }
      if (SoarConstants.DO_TOP_LEVEL_REF_CTS) {
        if (bt.trace != null) {
          bt.trace.preference_remove_ref(this);
          bt.trace=null;
        }
      }
 else {
        if (level > SoarConstants.TOP_GOAL_LEVEL) {
          if (bt.trace != null) {
            bt.trace.preference_remove_ref(this);
            bt.trace=null;
          }
        }
      }
    }
  }
  inst.top_of_instantiated_conditions=null;
  inst.bottom_of_instantiated_conditions=null;
  inst.nots=null;
}",0.8902691511387164
12201,"/** 
 * Process_o_rejects_and_deallocate_them() handles the processing of o-supported reject preferences. This routine is called from the firer and passed a list of all the o-rejects generated in the current preference phases (the list is linked via the ""next"" fields on the preference structures). This routine removes all preferences for matching values from TM, and deallocates the o-reject preferences when done. prefmem.cpp:330:process_o_rejects_and_deallocate_them
 * @param o_rejects
 */
private void process_o_rejects_and_deallocate_them(List<Preference> o_rejects){
  for (  Preference pref : o_rejects) {
    pref.preference_add_ref();
  }
  for (  Preference pref : o_rejects) {
    Slot s=Slot.find_slot(pref.id,pref.attr);
    if (s != null) {
      Preference p=s.getAllPreferences();
      while (p != null) {
        final Preference next_p=p.nextOfSlot;
        if (p.value == pref.value) {
          remove_preference_from_tm(p);
        }
        p=next_p;
      }
    }
    pref.preference_remove_ref(this);
  }
}","/** 
 * Process_o_rejects_and_deallocate_them() handles the processing of o-supported reject preferences. This routine is called from the firer and passed a list of all the o-rejects generated in the current preference phases (the list is linked via the ""next"" fields on the preference structures). This routine removes all preferences for matching values from TM, and deallocates the o-reject preferences when done. prefmem.cpp:330:process_o_rejects_and_deallocate_them
 * @param o_rejects
 * @param bufdeallo Preferences buffered for deallocation after innerelaboration loop completes.
 */
private void process_o_rejects_and_deallocate_them(List<Preference> o_rejects,List<Preference> bufdeallo){
  for (  Preference pref : o_rejects) {
    pref.preference_add_ref();
  }
  for (  Preference pref : o_rejects) {
    Slot s=Slot.find_slot(pref.id,pref.attr);
    if (s != null) {
      Preference p=s.getAllPreferences();
      while (p != null) {
        final Preference next_p=p.nextOfSlot;
        if (p.value == pref.value) {
          p.preference_add_ref();
          bufdeallo.add(p);
          remove_preference_from_tm(p);
        }
        p=next_p;
      }
    }
    pref.preference_remove_ref(this);
  }
}",0.9174067495559504
12202,"/** 
 * This routine scans through newly_created_instantiations, asserting each preference generated except for o-rejects. It also removes each instantiation from newly_created_instantiations, linking each onto the list of instantiations for that particular production. O-rejects are bufferred and handled after everything else. <p>Note that some instantiations on newly_created_instantiations are not in the match set--for the initial instantiations of chunks/justifications, if they don't match WM, we have to assert the o-supported preferences and throw away the rest. <p>recmem.cpp:891:assert_new_preferences
 */
private void assert_new_preferences(){
  final Trace trace=context.getTrace();
  final LinkedList<Preference> o_rejects=new LinkedList<Preference>();
  trace.print(Category.VERBOSE,""String_Node_Str"");
  Instantiation inst, next_inst;
  for (inst=this.newly_created_instantiations; inst != null; inst=next_inst) {
    next_inst=inst.nextInProdList;
    Preference pref, next_pref;
    for (pref=inst.preferences_generated; pref != null; pref=next_pref) {
      next_pref=pref.inst_next;
      if ((pref.type == PreferenceType.REJECT) && (pref.o_supported)) {
        o_rejects.push(pref);
      }
    }
  }
  if (!o_rejects.isEmpty())   process_o_rejects_and_deallocate_them(o_rejects);
  for (inst=this.newly_created_instantiations; inst != null; inst=next_inst) {
    next_inst=inst.nextInProdList;
    if (inst.in_ms) {
      inst.prod.instantiations=inst.insertAtHeadOfProdList(inst.prod.instantiations);
    }
    trace.print(Category.VERBOSE,""String_Node_Str"",inst.prod.getName());
    Preference pref, next_pref;
    for (pref=inst.preferences_generated; pref != null; pref=next_pref) {
      next_pref=pref.inst_next;
      if (inst.in_ms || pref.o_supported) {
        add_preference_to_tm(pref);
      }
 else {
        if (pref.next_clone != null)         pref.next_clone.prev_clone=pref.prev_clone;
        if (pref.prev_clone != null)         pref.prev_clone.next_clone=pref.next_clone;
        pref.next_clone=pref.prev_clone=null;
        pref.preference_add_ref();
        pref.preference_remove_ref(this);
      }
    }
  }
}","/** 
 * This routine scans through newly_created_instantiations, asserting each preference generated except for o-rejects. It also removes each instantiation from newly_created_instantiations, linking each onto the list of instantiations for that particular production. O-rejects are bufferred and handled after everything else. <p>Note that some instantiations on newly_created_instantiations are not in the match set--for the initial instantiations of chunks/justifications, if they don't match WM, we have to assert the o-supported preferences and throw away the rest. <p>recmem.cpp:891:assert_new_preferences
 * @bufdeallo Buffered preferences to deallocate after inner elaboration loop.
 */
private void assert_new_preferences(List<Preference> bufdeallo){
  final Trace trace=context.getTrace();
  final LinkedList<Preference> o_rejects=new LinkedList<Preference>();
  trace.print(Category.VERBOSE,""String_Node_Str"");
  Instantiation inst, next_inst;
  for (inst=this.newly_created_instantiations; inst != null; inst=next_inst) {
    next_inst=inst.nextInProdList;
    Preference pref, next_pref;
    for (pref=inst.preferences_generated; pref != null; pref=next_pref) {
      next_pref=pref.inst_next;
      if ((pref.type == PreferenceType.REJECT) && (pref.o_supported)) {
        o_rejects.push(pref);
      }
    }
  }
  if (!o_rejects.isEmpty())   process_o_rejects_and_deallocate_them(o_rejects,bufdeallo);
  for (inst=this.newly_created_instantiations; inst != null; inst=next_inst) {
    next_inst=inst.nextInProdList;
    if (inst.in_ms) {
      inst.prod.instantiations=inst.insertAtHeadOfProdList(inst.prod.instantiations);
    }
    trace.print(Category.VERBOSE,""String_Node_Str"",inst.prod.getName());
    Preference pref, next_pref;
    for (pref=inst.preferences_generated; pref != null; pref=next_pref) {
      next_pref=pref.inst_next;
      if (inst.in_ms || pref.o_supported) {
        add_preference_to_tm(pref);
      }
 else {
        if (pref.next_clone != null)         pref.next_clone.prev_clone=pref.prev_clone;
        if (pref.prev_clone != null)         pref.prev_clone.next_clone=pref.next_clone;
        pref.next_clone=pref.prev_clone=null;
        pref.preference_add_ref();
        pref.preference_remove_ref(this);
      }
    }
  }
}",0.9740464906341684
12203,"/** 
 * This routine fills in a newly created instantiation structure with various information. <p>At input, the instantiation should have: <ul> <li>preferences_generated filled in;  <li>instantiated conditions filled in; <li>top-level positive conditions should have bt.wme_, bt.level, and bt.trace filled in, but bt.wme_ and bt.trace shouldn't have their reference counts incremented yet. </ul> This routine does the following: <ul> <li>increments reference count on production; <li>fills in match_goal and match_goal_level; <li>for each top-level positive cond: <ul> <li>replaces bt.trace with the preference for the correct level, <li>updates reference counts on bt.pref and bt.wmetraces and wmes </ul> <li>for each preference_generated, adds that pref to the list of all pref's for the match goal <li>fills in backtrace_number; <li>if ""need_to_do_support_calculations"" is TRUE, calculates o-support for preferences_generated; </ul> <p>recmem.cpp:385:fill_in_new_instantiation_stuff
 * @param inst
 * @param need_to_do_support_calculations
 * @param top_goal
 */
public void fill_in_new_instantiation_stuff(Instantiation inst,boolean need_to_do_support_calculations,final IdentifierImpl top_goal){
  find_match_goal(inst);
  int level=inst.match_goal_level;
  for (Condition cond=inst.top_of_instantiated_conditions; cond != null; cond=cond.next) {
    final PositiveCondition pc=cond.asPositiveCondition();
    if (pc != null) {
      if (SoarConstants.DO_TOP_LEVEL_REF_CTS) {
      }
 else {
        if (level > SoarConstants.TOP_GOAL_LEVEL) {
        }
      }
      final BackTraceInfo bt=pc.bt();
      if (bt.trace != null) {
        if (bt.trace.inst.match_goal_level > level) {
          bt.trace=Preference.find_clone_for_level(bt.trace,level);
        }
        if (bt.trace != null)         bt.trace.preference_add_ref();
      }
    }
  }
  if (inst.match_goal != null) {
    for (Preference p=inst.preferences_generated; p != null; p=p.inst_next) {
      inst.match_goal.goalInfo.addGoalPreference(p);
      p.on_goal_list=true;
    }
  }
  inst.backtrace_number=0;
  if (need_to_do_support_calculations) {
    osupport.calculate_support_for_instantiation_preferences(inst,top_goal);
  }
}","/** 
 * This routine fills in a newly created instantiation structure with various information. <p>At input, the instantiation should have: <ul> <li>preferences_generated filled in;  <li>instantiated conditions filled in; <li>top-level positive conditions should have bt.wme_, bt.level, and bt.trace filled in, but bt.wme_ and bt.trace shouldn't have their reference counts incremented yet. </ul> This routine does the following: <ul> <li>increments reference count on production; <li>fills in match_goal and match_goal_level; <li>for each top-level positive cond: <ul> <li>replaces bt.trace with the preference for the correct level, <li>updates reference counts on bt.pref and bt.wmetraces and wmes </ul> <li>for each preference_generated, adds that pref to the list of all pref's for the match goal <li>fills in backtrace_number; <li>if ""need_to_do_support_calculations"" is TRUE, calculates o-support for preferences_generated; </ul> <p>recmem.cpp:385:fill_in_new_instantiation_stuff
 * @param inst
 * @param need_to_do_support_calculations
 * @param top_goal
 */
public void fill_in_new_instantiation_stuff(Instantiation inst,boolean need_to_do_support_calculations,final IdentifierImpl top_goal){
  find_match_goal(inst);
  int level=inst.match_goal_level;
  for (Condition cond=inst.top_of_instantiated_conditions; cond != null; cond=cond.next) {
    final PositiveCondition pc=cond.asPositiveCondition();
    if (pc != null) {
      if (SoarConstants.DO_TOP_LEVEL_REF_CTS) {
      }
 else {
        if (level > SoarConstants.TOP_GOAL_LEVEL) {
        }
      }
      final BackTraceInfo bt=pc.bt();
      if (bt.trace != null) {
        if (bt.trace.inst.match_goal_level > level) {
          bt.trace=Preference.find_clone_for_level(bt.trace,level);
        }
        if (SoarConstants.DO_TOP_LEVEL_REF_CTS) {
          if (bt.trace != null)           bt.trace.preference_add_ref();
        }
 else {
          if ((bt.trace != null) && (level > SoarConstants.TOP_GOAL_LEVEL))           bt.trace.preference_add_ref();
        }
      }
    }
  }
  if (inst.match_goal != null) {
    for (Preference p=inst.preferences_generated; p != null; p=p.inst_next) {
      inst.match_goal.goalInfo.addGoalPreference(p);
      p.on_goal_list=true;
    }
  }
  inst.backtrace_number=0;
  if (need_to_do_support_calculations) {
    osupport.calculate_support_for_instantiation_preferences(inst,top_goal);
  }
}",0.956842333550206
12204,"/** 
 * Given the id already read, this routine parses an <attr_value_make>. It builds and returns an action list for these RHS make's.  It returns null if any error occurred. <pre>  {@code <attr_value_make> ::= ^ <rhs_value> <value_make>+ <value_make> ::= <rhs_value> <preferences>}</pre> <p>parser.cpp::parse_attr_value_make
 * @param id
 * @return make action
 * @throws IOException
 * @throws ParserException
 */
Action parse_attr_value_make(SymbolImpl id) throws IOException, ParserException {
  RhsValue value;
  Action new_actions, last;
  expect(LexemeType.UP_ARROW,""String_Node_Str"");
  RhsValue attr=parse_rhs_value();
  if (attr == null) {
    return null;
  }
  String szAttribute=String.format(""String_Node_Str"",attr);
  Action all_actions=null;
  while (currentType() == LexemeType.PERIOD) {
    lexer.getNextLexeme();
    char first_letter=attr.getFirstLetter();
    String namebuf=""String_Node_Str"" + first_letter + '*'+ placeholder_counter[first_letter - 'a']++;
    Variable new_var=syms.make_variable(namebuf);
    new_var.current_binding_value=null;
    if (!""String_Node_Str"".equals(szAttribute)) {
      new_actions=parse_preferences_soar8_non_operator(id,attr,new_var.toRhsValue());
    }
 else {
      new_actions=parse_preferences(id,attr,new_var.toRhsValue());
    }
    for (last=new_actions; last.next != null; last=last.next) {
    }
    last.next=all_actions;
    all_actions=new_actions;
    id=new_var;
    attr=parse_rhs_value();
    if (attr == null) {
      return null;
    }
    szAttribute=String.format(""String_Node_Str"",attr);
  }
  do {
    value=parse_rhs_value();
    if (!""String_Node_Str"".equals(szAttribute)) {
      new_actions=parse_preferences_soar8_non_operator(id,attr,value);
    }
 else {
      new_actions=parse_preferences(id,attr,value);
    }
    for (last=new_actions; last.next != null; last=last.next) {
    }
    last.next=all_actions;
    all_actions=new_actions;
  }
 while ((currentType() != LexemeType.R_PAREN) && (currentType() != LexemeType.UP_ARROW));
  return all_actions;
}","/** 
 * Given the id already read, this routine parses an <attr_value_make>. It builds and returns an action list for these RHS make's.  It returns null if any error occurred. <pre>  {@code <attr_value_make> ::= ^ <rhs_value> <value_make>+ <value_make> ::= <rhs_value> <preferences>}</pre> <p>parser.cpp::parse_attr_value_make
 * @param id
 * @return make action
 * @throws IOException
 * @throws ParserException
 */
Action parse_attr_value_make(SymbolImpl id) throws IOException, ParserException {
  RhsValue value;
  Action new_actions, last;
  expect(LexemeType.UP_ARROW,""String_Node_Str"");
  RhsValue attr=parse_rhs_value();
  if (attr == null) {
    return null;
  }
  String szAttribute=String.format(""String_Node_Str"",attr);
  Action all_actions=null;
  while (currentType() == LexemeType.PERIOD) {
    lexer.getNextLexeme();
    char first_letter=Character.toLowerCase(attr.getFirstLetter());
    String namebuf=""String_Node_Str"" + first_letter + '*'+ placeholder_counter[first_letter - 'a']++;
    Variable new_var=syms.make_variable(namebuf);
    new_var.current_binding_value=null;
    if (!""String_Node_Str"".equals(szAttribute)) {
      new_actions=parse_preferences_soar8_non_operator(id,attr,new_var.toRhsValue());
    }
 else {
      new_actions=parse_preferences(id,attr,new_var.toRhsValue());
    }
    for (last=new_actions; last.next != null; last=last.next) {
    }
    last.next=all_actions;
    all_actions=new_actions;
    id=new_var;
    attr=parse_rhs_value();
    if (attr == null) {
      return null;
    }
    szAttribute=String.format(""String_Node_Str"",attr);
  }
  do {
    value=parse_rhs_value();
    if (!""String_Node_Str"".equals(szAttribute)) {
      new_actions=parse_preferences_soar8_non_operator(id,attr,value);
    }
 else {
      new_actions=parse_preferences(id,attr,value);
    }
    for (last=new_actions; last.next != null; last=last.next) {
    }
    last.next=all_actions;
    all_actions=new_actions;
  }
 while ((currentType() != LexemeType.R_PAREN) && (currentType() != LexemeType.UP_ARROW));
  return all_actions;
}",0.9944025310294476
12205,"private void debugTest(List<TestCase> all,String name) throws SoarException, InterruptedException {
  final Test test=findTest(all,name);
  if (test == null) {
    out.println(""String_Node_Str"" + name + ""String_Node_Str"");
    System.exit(1);
  }
  out.printf(""String_Node_Str"",test.getTestCase().getName(),test.getName());
  final TestRunner runner=new TestRunner(agentFactory,out);
  runner.debugTest(test);
}","private void debugTest(List<TestCase> all,String name) throws SoarException, InterruptedException {
  final Test test=findTest(all,name);
  if (test == null) {
    out.println(""String_Node_Str"" + name + ""String_Node_Str"");
    System.exit(1);
  }
  out.printf(""String_Node_Str"",test.getTestCase().getName(),test.getName());
  final TestRunner runner=new TestRunner(agentFactory,out);
  runner.debugTest(test,fromCommandLine);
}",0.9809069212410502
12206,TestAgent createTestAgent();,"/** 
 * @return a new, uninitialized test agent
 */
TestAgent createTestAgent();",0.5185185185185185
12207,"void debugTest(Test test) throws SoarException, InterruptedException ;","/** 
 * Open the debugger, pre-loaded with the given test for debugging.
 * @param test the test to load
 * @param exitOnClose if true, the debugger should cause the VM to exit when it'sclosed. Otherwise, the debugger should just clean up and hide itself
 * @throws SoarException
 * @throws InterruptedException
 */
void debugTest(Test test,boolean exitOnClose) throws SoarException, InterruptedException ;",0.2941176470588235
12208,"public void debugTest(Test test) throws SoarException, InterruptedException {
  factory.debugTest(test);
}","public void debugTest(Test test,boolean exitOnClose) throws SoarException, InterruptedException {
  factory.debugTest(test,exitOnClose);
}",0.8688524590163934
12209,"@Override public void debugTest(Test test) throws SoarException, InterruptedException {
  final ThreadedAgent agent=ThreadedAgent.create(test.getName());
  TestRhsFunction.addTestFunction(agent.getAgent(),""String_Node_Str"");
  TestRhsFunction.addTestFunction(agent.getAgent(),""String_Node_Str"");
  final Map<String,Object> debugProps=new HashMap<String,Object>();
  debugProps.put(DebuggerProvider.CLOSE_ACTION,CloseAction.DISPOSE);
  agent.getDebuggerProvider().setProperties(debugProps);
  agent.openDebuggerAndWait();
  final TestCase testCase=test.getTestCase();
  agent.getPrinter().print(""String_Node_Str"",test);
  agent.getInterpreter().eval(String.format(""String_Node_Str"",FileTools.getParent(testCase.getFile()).replace('\\','/')));
  agent.getInterpreter().eval(testCase.getSetup());
  agent.getInterpreter().eval(test.getContent());
  agent.getPrinter().flush();
}","@Override public void debugTest(Test test,boolean exitOnClose) throws SoarException, InterruptedException {
  final ThreadedAgent agent=ThreadedAgent.create(test.getName());
  TestRhsFunction.addTestFunction(agent.getAgent(),""String_Node_Str"");
  TestRhsFunction.addTestFunction(agent.getAgent(),""String_Node_Str"");
  final Map<String,Object> debugProps=new HashMap<String,Object>();
  debugProps.put(DebuggerProvider.CLOSE_ACTION,exitOnClose ? CloseAction.EXIT : CloseAction.DISPOSE);
  agent.getDebuggerProvider().setProperties(debugProps);
  agent.openDebuggerAndWait();
  final TestCase testCase=test.getTestCase();
  agent.getPrinter().print(""String_Node_Str"",test);
  agent.getInterpreter().eval(String.format(""String_Node_Str"",FileTools.getParent(testCase.getFile()).replace('\\','/')));
  agent.getInterpreter().eval(testCase.getSetup());
  agent.getInterpreter().eval(test.getContent());
  agent.getPrinter().flush();
}",0.9706045479755964
12210,"@Override public void actionPerformed(ActionEvent e){
  try {
    final TestRunner runner=new TestRunner(agentFactory,new PrintWriter(new NullWriter()));
    runner.debugTest(test);
  }
 catch (  SoarException e1) {
    e1.printStackTrace();
  }
catch (  InterruptedException e1) {
    e1.printStackTrace();
  }
}","@Override public void actionPerformed(ActionEvent e){
  try {
    final TestRunner runner=new TestRunner(agentFactory,new PrintWriter(new NullWriter()));
    runner.debugTest(test,false);
  }
 catch (  SoarException e1) {
    e1.printStackTrace();
  }
catch (  InterruptedException e1) {
    e1.printStackTrace();
  }
}",0.990506329113924
12211,"private void initializeGlobalScope(String engineName,Adaptable context,ScriptEngine engine) throws SoarException {
  final InputStream is=getClass().getResourceAsStream(engineName);
  if (is != null) {
    engine.put(""String_Node_Str"",new ScriptContext(context));
    final Reader reader=new InputStreamReader(is,Charsets.UTF_8);
    try {
      try {
        engine.eval(reader);
      }
 catch (      ScriptException e) {
        throw new SoarException(e.getMessage(),e);
      }
    }
  finally {
      try {
        reader.close();
      }
 catch (      IOException e) {
        throw new SoarException(""String_Node_Str"" + engineName + ""String_Node_Str""+ e.getMessage(),e);
      }
    }
  }
 else {
    engine.put(""String_Node_Str"",new ScriptContext(context));
  }
}","private void initializeGlobalScope(String engineName,Adaptable context,ScriptEngine engine) throws SoarException {
  final InputStream is=getClass().getResourceAsStream(engineName);
  if (is != null) {
    engine.put(""String_Node_Str"",new ScriptContext(context));
    engine.put(ScriptEngine.FILENAME,""String_Node_Str"" + engineName);
    final Reader reader=new InputStreamReader(is,Charsets.UTF_8);
    try {
      try {
        engine.eval(reader);
      }
 catch (      ScriptException e) {
        throw new SoarException(e.getMessage(),e);
      }
    }
  finally {
      try {
        reader.close();
      }
 catch (      IOException e) {
        throw new SoarException(""String_Node_Str"" + engineName + ""String_Node_Str""+ e.getMessage(),e);
      }
    }
  }
 else {
    engine.put(""String_Node_Str"",new ScriptContext(context));
  }
}",0.9566294919454772
12212,"/** 
 * activates a new or existing long-term identifier <p>semantic_memory.cpp:957:smem_lti_activate
 * @param lti
 * @throws SQLException
 */
void smem_lti_activate(long lti) throws SQLException {
  db.act_lti_child_ct_get.setLong(1,lti);
  final ResultSet rs=db.act_lti_child_ct_get.executeQuery();
  long lti_child_ct=0;
  try {
    rs.next();
    lti_child_ct=rs.getLong(0 + 1);
  }
  finally {
    rs.close();
  }
  if (lti_child_ct >= 100) {
    db.act_lti_set.setLong(1,smem_max_cycle++);
    db.act_lti_set.setLong(2,lti);
    db.act_lti_set.execute();
  }
 else {
    db.act_set.setLong(1,smem_max_cycle++);
    db.act_set.setLong(2,lti);
    db.act_set.execute();
  }
}","/** 
 * activates a new or existing long-term identifier <p>semantic_memory.cpp:957:smem_lti_activate
 * @param lti
 * @throws SQLException
 */
void smem_lti_activate(long lti) throws SQLException {
  db.act_lti_child_ct_get.setLong(1,lti);
  final ResultSet rs=db.act_lti_child_ct_get.executeQuery();
  long lti_child_ct=0;
  try {
    rs.next();
    lti_child_ct=rs.getLong(0 + 1);
  }
  finally {
    rs.close();
  }
  if (lti_child_ct >= params.thresh.get()) {
    db.act_lti_set.setLong(1,smem_max_cycle++);
    db.act_lti_set.setLong(2,lti);
    db.act_lti_set.execute();
  }
 else {
    db.act_set.setLong(1,smem_max_cycle++);
    db.act_set.setLong(2,lti);
    db.act_set.execute();
  }
}",0.9840116279069768
12213,"public DefaultSemanticMemory(Adaptable context,SemanticMemoryDatabase db){
  this.db=db;
  this.symbols=Adaptables.require(DefaultSemanticMemory.class,context,SymbolFactoryImpl.class);
  this.predefinedSyms=new SemanticMemorySymbols(this.symbols);
}","public DefaultSemanticMemory(Adaptable context,SemanticMemoryDatabase db){
  this.context=context;
  this.db=db;
}",0.5454545454545454
12214,"/** 
 * <p>semantic_memory.cpp:2702:smem_respond_to_cmd
 * @param store_only
 * @throws SQLException
 * @throws SoarException
 */
void smem_respond_to_cmd(boolean store_only) throws SQLException, SoarException {
  IdentifierImpl state=decider.bottom_goal;
  List<WmeImpl> wmes=new LinkedList<WmeImpl>();
  List<WmeImpl> cmds=null;
  IdentifierImpl query;
  IdentifierImpl retrieve;
  List<IdentifierImpl> prohibit=new LinkedList<IdentifierImpl>();
  List<IdentifierImpl> store=new LinkedList<IdentifierImpl>();
  path_type path=path_type.blank_slate;
  final int time_slot=((store_only) ? (1) : (0));
  long wme_count=0;
  boolean new_cue=false;
  Marker tc;
  IdentifierImpl parent_sym=null;
  final Queue<IdentifierImpl> syms=new ArrayDeque<IdentifierImpl>();
  int parent_level=0;
  final Queue<Integer> levels=new ArrayDeque<Integer>();
  while (state != null) {
    final SemanticMemoryStateInfo smem_info=smem_info(state);
    new_cue=false;
    wme_count=0;
    cmds=null;
{
      tc=DefaultMarker.create();
      syms.add(smem_info.smem_cmd_header);
      levels.add(0);
      while (!syms.isEmpty()) {
        parent_sym=syms.remove();
        parent_level=levels.remove();
        wmes=smem_get_direct_augs_of_id(parent_sym,tc);
{
          for (          WmeImpl w_p : wmes) {
            if (((store_only) && ((parent_level != 0) || ((w_p.attr != predefinedSyms.smem_sym_query) && (w_p.attr != predefinedSyms.smem_sym_retrieve)))) || ((!store_only) && ((parent_level != 0) || (w_p.attr != predefinedSyms.smem_sym_store)))) {
              wme_count++;
              if (w_p.timetag > smem_info.last_cmd_time[time_slot]) {
                new_cue=true;
                smem_info.last_cmd_time[time_slot]=w_p.timetag;
              }
              if ((w_p.value.asIdentifier() != null) && (parent_level == 0) && ((w_p.attr == predefinedSyms.smem_sym_query) || (w_p.attr == predefinedSyms.smem_sym_store))) {
                syms.add(w_p.value.asIdentifier());
                levels.add(parent_level + 1);
              }
            }
          }
          if (cmds == null) {
            cmds=wmes;
          }
 else {
            wmes=null;
          }
        }
      }
      if (smem_info.last_cmd_count[time_slot] != wme_count) {
        new_cue=true;
        smem_info.last_cmd_count[time_slot]=wme_count;
      }
      if (new_cue) {
        smem_info.cue_wmes.clear();
        smem_clear_result(state);
        smem_made_changes=true;
      }
    }
    if (new_cue && wme_count != 0) {
      retrieve=null;
      query=null;
      store.clear();
      prohibit.clear();
      path=path_type.blank_slate;
      for (      WmeImpl w_p : cmds) {
        smem_info.cue_wmes.add(w_p);
        if (path != path_type.cmd_bad) {
          if (w_p.attr == predefinedSyms.smem_sym_retrieve) {
            if ((w_p.value.asIdentifier() != null) && (path == path_type.blank_slate)) {
              retrieve=w_p.value.asIdentifier();
              path=path_type.cmd_retrieve;
            }
 else {
              path=path_type.cmd_bad;
            }
          }
 else           if (w_p.attr == predefinedSyms.smem_sym_query) {
            if ((w_p.value.asIdentifier() != null) && ((path == path_type.blank_slate) || (path == path_type.cmd_query)) && (query == null)) {
              query=w_p.value.asIdentifier();
              path=path_type.cmd_query;
            }
 else {
              path=path_type.cmd_bad;
            }
          }
 else           if (w_p.attr == predefinedSyms.smem_sym_prohibit) {
            if ((w_p.value.asIdentifier() != null) && ((path == path_type.blank_slate) || (path == path_type.cmd_query)) && (w_p.value.asIdentifier().smem_lti != 0)) {
              prohibit.add(w_p.value.asIdentifier());
              path=path_type.cmd_query;
            }
 else {
              path=path_type.cmd_bad;
            }
          }
 else           if (w_p.attr == predefinedSyms.smem_sym_store) {
            if ((w_p.value.asIdentifier() != null) && ((path == path_type.blank_slate) || (path == path_type.cmd_store))) {
              store.add(w_p.value.asIdentifier());
              path=path_type.cmd_store;
            }
 else {
              path=path_type.cmd_bad;
            }
          }
 else {
            path=path_type.cmd_bad;
          }
        }
      }
      if ((path == path_type.cmd_query) && (query == null)) {
        path=path_type.cmd_bad;
      }
      if (path == path_type.blank_slate) {
        path=path_type.cmd_bad;
      }
      if (path != path_type.cmd_bad) {
        smem_attach();
        if (path == path_type.cmd_retrieve) {
          if (retrieve.smem_lti == 0) {
            smem_add_meta_wme(state,smem_info.smem_result_header,predefinedSyms.smem_sym_failure,retrieve);
          }
 else {
            smem_add_meta_wme(state,smem_info.smem_result_header,predefinedSyms.smem_sym_success,retrieve);
            smem_install_memory(state,retrieve.smem_lti,retrieve);
          }
        }
 else         if (path == path_type.cmd_query) {
          final Set<Long> prohibit_lti=new HashSet<Long>();
          for (          IdentifierImpl sym_p : prohibit) {
            prohibit_lti.add(sym_p.smem_lti);
          }
          smem_process_query(state,query,prohibit_lti);
        }
 else         if (path == path_type.cmd_store) {
          if (true) {
            db.begin.executeUpdate();
          }
          for (          IdentifierImpl sym_p : store) {
            smem_soar_store(sym_p);
            smem_add_meta_wme(state,smem_info.smem_result_header,predefinedSyms.smem_sym_success,sym_p);
          }
          if (true) {
            db.commit.executeUpdate();
          }
        }
      }
 else {
        smem_add_meta_wme(state,smem_info.smem_result_header,predefinedSyms.smem_sym_bad_cmd,smem_info.smem_cmd_header);
      }
    }
 else {
    }
    cmds=null;
    state=state.higher_goal;
  }
}","/** 
 * <p>semantic_memory.cpp:2702:smem_respond_to_cmd
 * @param store_only
 * @throws SQLException
 * @throws SoarException
 */
void smem_respond_to_cmd(boolean store_only) throws SQLException, SoarException {
  IdentifierImpl state=decider.bottom_goal;
  List<WmeImpl> wmes=new LinkedList<WmeImpl>();
  List<WmeImpl> cmds=null;
  IdentifierImpl query;
  IdentifierImpl retrieve;
  List<IdentifierImpl> prohibit=new LinkedList<IdentifierImpl>();
  List<IdentifierImpl> store=new LinkedList<IdentifierImpl>();
  path_type path=path_type.blank_slate;
  final int time_slot=((store_only) ? (1) : (0));
  long wme_count=0;
  boolean new_cue=false;
  Marker tc;
  IdentifierImpl parent_sym=null;
  final Queue<IdentifierImpl> syms=new ArrayDeque<IdentifierImpl>();
  int parent_level=0;
  final Queue<Integer> levels=new ArrayDeque<Integer>();
  while (state != null) {
    final SemanticMemoryStateInfo smem_info=smem_info(state);
    new_cue=false;
    wme_count=0;
    cmds=null;
{
      tc=DefaultMarker.create();
      syms.add(smem_info.smem_cmd_header);
      levels.add(0);
      while (!syms.isEmpty()) {
        parent_sym=syms.remove();
        parent_level=levels.remove();
        wmes=smem_get_direct_augs_of_id(parent_sym,tc);
{
          for (          WmeImpl w_p : wmes) {
            if (((store_only) && ((parent_level != 0) || ((w_p.attr != predefinedSyms.smem_sym_query) && (w_p.attr != predefinedSyms.smem_sym_retrieve)))) || ((!store_only) && ((parent_level != 0) || (w_p.attr != predefinedSyms.smem_sym_store)))) {
              wme_count++;
              if (w_p.timetag > smem_info.last_cmd_time[time_slot]) {
                new_cue=true;
                smem_info.last_cmd_time[time_slot]=w_p.timetag;
              }
              if ((w_p.value.asIdentifier() != null) && (parent_level == 0) && ((w_p.attr == predefinedSyms.smem_sym_query) || (w_p.attr == predefinedSyms.smem_sym_store))) {
                syms.add(w_p.value.asIdentifier());
                levels.add(parent_level + 1);
              }
            }
          }
          if (cmds == null) {
            cmds=wmes;
          }
 else {
            wmes=null;
          }
        }
      }
      if (smem_info.last_cmd_count[time_slot] != wme_count) {
        new_cue=true;
        smem_info.last_cmd_count[time_slot]=wme_count;
      }
      if (new_cue) {
        smem_info.cue_wmes.clear();
        smem_clear_result(state);
        smem_made_changes=true;
      }
    }
    if (new_cue && wme_count != 0) {
      retrieve=null;
      query=null;
      store.clear();
      prohibit.clear();
      path=path_type.blank_slate;
      for (      WmeImpl w_p : cmds) {
        smem_info.cue_wmes.add(w_p);
        if (path != path_type.cmd_bad) {
          if (w_p.attr == predefinedSyms.smem_sym_retrieve) {
            if ((w_p.value.asIdentifier() != null) && (path == path_type.blank_slate)) {
              retrieve=w_p.value.asIdentifier();
              path=path_type.cmd_retrieve;
            }
 else {
              path=path_type.cmd_bad;
            }
          }
 else           if (w_p.attr == predefinedSyms.smem_sym_query) {
            if ((w_p.value.asIdentifier() != null) && ((path == path_type.blank_slate) || (path == path_type.cmd_query)) && (query == null)) {
              query=w_p.value.asIdentifier();
              path=path_type.cmd_query;
            }
 else {
              path=path_type.cmd_bad;
            }
          }
 else           if (w_p.attr == predefinedSyms.smem_sym_prohibit) {
            if ((w_p.value.asIdentifier() != null) && ((path == path_type.blank_slate) || (path == path_type.cmd_query)) && (w_p.value.asIdentifier().smem_lti != 0)) {
              prohibit.add(w_p.value.asIdentifier());
              path=path_type.cmd_query;
            }
 else {
              path=path_type.cmd_bad;
            }
          }
 else           if (w_p.attr == predefinedSyms.smem_sym_store) {
            if ((w_p.value.asIdentifier() != null) && ((path == path_type.blank_slate) || (path == path_type.cmd_store))) {
              store.add(w_p.value.asIdentifier());
              path=path_type.cmd_store;
            }
 else {
              path=path_type.cmd_bad;
            }
          }
 else {
            path=path_type.cmd_bad;
          }
        }
      }
      if ((path == path_type.cmd_query) && (query == null)) {
        path=path_type.cmd_bad;
      }
      if (path == path_type.blank_slate) {
        path=path_type.cmd_bad;
      }
      if (path != path_type.cmd_bad) {
        smem_attach();
        if (path == path_type.cmd_retrieve) {
          if (retrieve.smem_lti == 0) {
            smem_add_meta_wme(state,smem_info.smem_result_header,predefinedSyms.smem_sym_failure,retrieve);
          }
 else {
            smem_add_meta_wme(state,smem_info.smem_result_header,predefinedSyms.smem_sym_success,retrieve);
            smem_install_memory(state,retrieve.smem_lti,retrieve);
          }
        }
 else         if (path == path_type.cmd_query) {
          final Set<Long> prohibit_lti=new HashSet<Long>();
          for (          IdentifierImpl sym_p : prohibit) {
            prohibit_lti.add(sym_p.smem_lti);
          }
          smem_process_query(state,query,prohibit_lti);
        }
 else         if (path == path_type.cmd_store) {
          if (!params.lazy_commit.get()) {
            db.begin.executeUpdate();
          }
          for (          IdentifierImpl sym_p : store) {
            smem_soar_store(sym_p);
            smem_add_meta_wme(state,smem_info.smem_result_header,predefinedSyms.smem_sym_success,sym_p);
          }
          if (!params.lazy_commit.get()) {
            db.commit.executeUpdate();
          }
        }
      }
 else {
        smem_add_meta_wme(state,smem_info.smem_result_header,predefinedSyms.smem_sym_bad_cmd,smem_info.smem_cmd_header);
      }
    }
 else {
    }
    cmds=null;
    state=state.higher_goal;
  }
}",0.9950897392482222
12215,"/** 
 * <p>semantic_memory.cpp:1187:smem_store_chunk
 * @param parent_id
 * @param children
 * @param remove_old_children
 * @throws SQLException
 */
void smem_store_chunk(long parent_id,Map<SymbolImpl,List<smem_chunk_value>> children,boolean remove_old_children) throws SQLException {
  long attr_hash=0;
  long value_hash=0;
  long value_lti=0;
  Map<Long,Long> attr_ct_adjust=new HashMap<Long,Long>();
  Map<Long,Map<Long,Long>> const_ct_adjust=new HashMap<Long,Map<Long,Long>>();
  Map<Long,Map<Long,Long>> lti_ct_adjust=new HashMap<Long,Map<Long,Long>>();
  long stat_adjust=0;
  long next_act_cycle=smem_max_cycle++;
  long child_ct=0;
  if (remove_old_children) {
    smem_disconnect_chunk(parent_id);
  }
 else {
    db.act_lti_child_ct_get.setLong(1,parent_id);
    final ResultSet rs=db.act_lti_child_ct_get.executeQuery();
    try {
      child_ct=rs.getLong(0 + 1);
    }
  finally {
      rs.close();
    }
  }
  long thresh=100;
  boolean before_above=(child_ct >= thresh);
{
    for (    Map.Entry<SymbolImpl,List<smem_chunk_value>> s : children.entrySet()) {
      for (      smem_chunk_value v : s.getValue()) {
        child_ct++;
      }
    }
  }
  boolean after_above=(child_ct >= thresh);
  long web_act_cycle=((after_above) ? (SMEM_ACT_MAX) : (next_act_cycle));
  if ((!remove_old_children) && (!before_above)) {
    db.act_set.setLong(1,web_act_cycle);
    db.act_set.setLong(2,parent_id);
    db.act_set.executeUpdate();
  }
  if (after_above) {
    db.act_lti_set.setLong(1,next_act_cycle);
    db.act_lti_set.setLong(2,parent_id);
    db.act_lti_set.executeUpdate();
  }
  for (  Map.Entry<SymbolImpl,List<smem_chunk_value>> s : children.entrySet()) {
    attr_hash=smem_temporal_hash(s.getKey());
    final Long countForAttrHash=attr_ct_adjust.get(attr_hash);
    attr_ct_adjust.put(attr_hash,countForAttrHash != null ? countForAttrHash + 1 : 0 + 1);
    stat_adjust++;
    for (    smem_chunk_value v : s.getValue()) {
      final SymbolImpl constant=v.asConstant();
      if (constant != null) {
        value_hash=smem_temporal_hash(constant);
        db.web_add.setLong(1,parent_id);
        db.web_add.setLong(2,attr_hash);
        db.web_add.setLong(3,value_hash);
        db.web_add.setNull(4,java.sql.Types.NULL);
        db.web_add.setLong(5,web_act_cycle);
        db.web_add.executeUpdate();
        Map<Long,Long> forHash=const_ct_adjust.get(attr_hash);
        if (forHash == null) {
          forHash=new HashMap<Long,Long>();
          const_ct_adjust.put(attr_hash,forHash);
        }
        final Long countForValueHash=forHash.get(value_hash);
        forHash.put(value_hash,countForValueHash != null ? countForValueHash + 1 : 0 + 1);
      }
 else {
        value_lti=v.asLti().lti_id;
        if (value_lti == 0) {
          value_lti=smem_lti_add_id(v.asLti().lti_letter,v.asLti().lti_number);
          v.asLti().lti_id=value_lti;
          if (v.asLti().soar_id != null) {
            v.asLti().soar_id.smem_lti=value_lti;
          }
        }
        db.web_add.setLong(1,parent_id);
        db.web_add.setLong(2,attr_hash);
        db.web_add.setNull(3,java.sql.Types.NULL);
        db.web_add.setLong(4,value_lti);
        db.web_add.setLong(5,web_act_cycle);
        db.web_add.executeUpdate();
        Map<Long,Long> forHash=lti_ct_adjust.get(attr_hash);
        if (forHash == null) {
          forHash=new HashMap<Long,Long>();
          lti_ct_adjust.put(attr_hash,forHash);
        }
        final Long countForValueHash=forHash.get(value_lti);
        forHash.put(value_lti,countForValueHash != null ? countForValueHash + 1 : 0 + 1);
      }
    }
  }
{
  }
{
    for (    Map.Entry<Long,Long> p : attr_ct_adjust.entrySet()) {
      db.ct_attr_add.setLong(1,p.getKey());
      db.ct_attr_add.executeUpdate();
      db.ct_attr_update.setLong(1,p.getValue());
      db.ct_attr_update.setLong(2,p.getKey());
      db.ct_attr_update.executeUpdate();
    }
  }
{
    for (    Map.Entry<Long,Map<Long,Long>> p1 : const_ct_adjust.entrySet()) {
      for (      Map.Entry<Long,Long> p2 : p1.getValue().entrySet()) {
        db.ct_const_add.setLong(1,p1.getKey());
        db.ct_const_add.setLong(2,p2.getKey());
        db.ct_const_add.executeUpdate();
        db.ct_const_update.setLong(1,p2.getValue());
        db.ct_const_update.setLong(2,p1.getKey());
        db.ct_const_update.setLong(3,p2.getKey());
        db.ct_const_update.executeUpdate();
      }
    }
  }
{
    for (    Map.Entry<Long,Map<Long,Long>> p1 : lti_ct_adjust.entrySet()) {
      for (      Map.Entry<Long,Long> p2 : p1.getValue().entrySet()) {
        db.ct_lti_add.setLong(1,p1.getKey());
        db.ct_lti_add.setLong(2,p2.getKey());
        db.ct_lti_add.executeUpdate();
        db.ct_lti_update.setLong(1,p2.getValue());
        db.ct_lti_update.setLong(2,p1.getKey());
        db.ct_lti_update.setLong(3,p2.getKey());
        db.ct_lti_update.executeUpdate();
      }
    }
  }
{
    db.act_lti_child_ct_set.setLong(1,child_ct);
    db.act_lti_child_ct_set.setLong(2,parent_id);
    db.act_lti_child_ct_set.executeUpdate();
  }
}","/** 
 * <p>semantic_memory.cpp:1187:smem_store_chunk
 * @param parent_id
 * @param children
 * @param remove_old_children
 * @throws SQLException
 */
void smem_store_chunk(long parent_id,Map<SymbolImpl,List<smem_chunk_value>> children,boolean remove_old_children) throws SQLException {
  long attr_hash=0;
  long value_hash=0;
  long value_lti=0;
  Map<Long,Long> attr_ct_adjust=new HashMap<Long,Long>();
  Map<Long,Map<Long,Long>> const_ct_adjust=new HashMap<Long,Map<Long,Long>>();
  Map<Long,Map<Long,Long>> lti_ct_adjust=new HashMap<Long,Map<Long,Long>>();
  long stat_adjust=0;
  long next_act_cycle=smem_max_cycle++;
  long child_ct=0;
  if (remove_old_children) {
    smem_disconnect_chunk(parent_id);
  }
 else {
    db.act_lti_child_ct_get.setLong(1,parent_id);
    final ResultSet rs=db.act_lti_child_ct_get.executeQuery();
    try {
      child_ct=rs.getLong(0 + 1);
    }
  finally {
      rs.close();
    }
  }
  long thresh=params.thresh.get();
  boolean before_above=(child_ct >= thresh);
{
    for (    Map.Entry<SymbolImpl,List<smem_chunk_value>> s : children.entrySet()) {
      for (      smem_chunk_value v : s.getValue()) {
        child_ct++;
      }
    }
  }
  boolean after_above=(child_ct >= thresh);
  long web_act_cycle=((after_above) ? (SMEM_ACT_MAX) : (next_act_cycle));
  if ((!remove_old_children) && (!before_above)) {
    db.act_set.setLong(1,web_act_cycle);
    db.act_set.setLong(2,parent_id);
    db.act_set.executeUpdate();
  }
  if (after_above) {
    db.act_lti_set.setLong(1,next_act_cycle);
    db.act_lti_set.setLong(2,parent_id);
    db.act_lti_set.executeUpdate();
  }
  for (  Map.Entry<SymbolImpl,List<smem_chunk_value>> s : children.entrySet()) {
    attr_hash=smem_temporal_hash(s.getKey());
    final Long countForAttrHash=attr_ct_adjust.get(attr_hash);
    attr_ct_adjust.put(attr_hash,countForAttrHash != null ? countForAttrHash + 1 : 0 + 1);
    stat_adjust++;
    for (    smem_chunk_value v : s.getValue()) {
      final SymbolImpl constant=v.asConstant();
      if (constant != null) {
        value_hash=smem_temporal_hash(constant);
        db.web_add.setLong(1,parent_id);
        db.web_add.setLong(2,attr_hash);
        db.web_add.setLong(3,value_hash);
        db.web_add.setNull(4,java.sql.Types.NULL);
        db.web_add.setLong(5,web_act_cycle);
        db.web_add.executeUpdate();
        Map<Long,Long> forHash=const_ct_adjust.get(attr_hash);
        if (forHash == null) {
          forHash=new HashMap<Long,Long>();
          const_ct_adjust.put(attr_hash,forHash);
        }
        final Long countForValueHash=forHash.get(value_hash);
        forHash.put(value_hash,countForValueHash != null ? countForValueHash + 1 : 0 + 1);
      }
 else {
        value_lti=v.asLti().lti_id;
        if (value_lti == 0) {
          value_lti=smem_lti_add_id(v.asLti().lti_letter,v.asLti().lti_number);
          v.asLti().lti_id=value_lti;
          if (v.asLti().soar_id != null) {
            v.asLti().soar_id.smem_lti=value_lti;
          }
        }
        db.web_add.setLong(1,parent_id);
        db.web_add.setLong(2,attr_hash);
        db.web_add.setNull(3,java.sql.Types.NULL);
        db.web_add.setLong(4,value_lti);
        db.web_add.setLong(5,web_act_cycle);
        db.web_add.executeUpdate();
        Map<Long,Long> forHash=lti_ct_adjust.get(attr_hash);
        if (forHash == null) {
          forHash=new HashMap<Long,Long>();
          lti_ct_adjust.put(attr_hash,forHash);
        }
        final Long countForValueHash=forHash.get(value_lti);
        forHash.put(value_lti,countForValueHash != null ? countForValueHash + 1 : 0 + 1);
      }
    }
  }
{
  }
{
    for (    Map.Entry<Long,Long> p : attr_ct_adjust.entrySet()) {
      db.ct_attr_add.setLong(1,p.getKey());
      db.ct_attr_add.executeUpdate();
      db.ct_attr_update.setLong(1,p.getValue());
      db.ct_attr_update.setLong(2,p.getKey());
      db.ct_attr_update.executeUpdate();
    }
  }
{
    for (    Map.Entry<Long,Map<Long,Long>> p1 : const_ct_adjust.entrySet()) {
      for (      Map.Entry<Long,Long> p2 : p1.getValue().entrySet()) {
        db.ct_const_add.setLong(1,p1.getKey());
        db.ct_const_add.setLong(2,p2.getKey());
        db.ct_const_add.executeUpdate();
        db.ct_const_update.setLong(1,p2.getValue());
        db.ct_const_update.setLong(2,p1.getKey());
        db.ct_const_update.setLong(3,p2.getKey());
        db.ct_const_update.executeUpdate();
      }
    }
  }
{
    for (    Map.Entry<Long,Map<Long,Long>> p1 : lti_ct_adjust.entrySet()) {
      for (      Map.Entry<Long,Long> p2 : p1.getValue().entrySet()) {
        db.ct_lti_add.setLong(1,p1.getKey());
        db.ct_lti_add.setLong(2,p2.getKey());
        db.ct_lti_add.executeUpdate();
        db.ct_lti_update.setLong(1,p2.getValue());
        db.ct_lti_update.setLong(2,p1.getKey());
        db.ct_lti_update.setLong(3,p2.getKey());
        db.ct_lti_update.executeUpdate();
      }
    }
  }
{
    db.act_lti_child_ct_set.setLong(1,child_ct);
    db.act_lti_child_ct_set.setLong(2,parent_id);
    db.act_lti_child_ct_set.executeUpdate();
  }
}",0.997832085139929
12216,"/** 
 * Opens the SQLite database and performs all initialization required for the current mode The readonly param should only be used in experimentation where you don't want to alter previous database state. <p>semantic_memory.cpp:1952:smem_init_db
 * @param readonly
 * @throws SoarException
 * @throws SQLException
 * @throws IOException
 */
void smem_init_db(boolean readonly) throws SoarException, SQLException, IOException {
  if (db != null) {
    return;
  }
  final String db_path;
  if (true) {
    db_path=""String_Node_Str"";
  }
 else {
    db_path=""String_Node_Str"";
  }
  final Connection connection=JdbcTools.connect(""String_Node_Str"",""String_Node_Str"" + db_path);
  try {
    db=new SemanticMemoryDatabase(connection);
  }
 catch (  SoarException e) {
    connection.close();
    throw e;
  }
{
{
      final int cacheSize=5000;
      final Statement s=db.getConnection().createStatement();
      s.execute(""String_Node_Str"" + cacheSize);
    }
    if (false) {
      final Statement s=db.getConnection().createStatement();
      s.execute(""String_Node_Str"");
      s.execute(""String_Node_Str"");
      s.execute(""String_Node_Str"");
    }
  }
  smem_validation++;
  db.structure();
  db.prepare();
  smem_reset_id_counters();
  db.begin.executeUpdate();
  if (!readonly) {
    final ByRef<Long> tempMaxCycle=ByRef.create(smem_max_cycle);
    if (!smem_variable_get(smem_variable_key.var_max_cycle,tempMaxCycle)) {
      smem_max_cycle=1;
    }
 else {
      smem_max_cycle=tempMaxCycle.value;
    }
{
      ByRef<Long> temp=ByRef.create(0L);
      if (smem_variable_get(smem_variable_key.var_act_thresh,temp)) {
      }
 else {
        smem_variable_set(smem_variable_key.var_act_thresh,100L);
      }
      if (smem_variable_get(smem_variable_key.var_num_nodes,temp)) {
      }
 else {
      }
      if (smem_variable_get(smem_variable_key.var_num_edges,temp)) {
      }
 else {
      }
    }
  }
  db.commit.executeUpdate();
  if (false) {
    db.begin.executeUpdate();
  }
}","/** 
 * Opens the SQLite database and performs all initialization required for the current mode The readonly param should only be used in experimentation where you don't want to alter previous database state. <p>semantic_memory.cpp:1952:smem_init_db
 * @param readonly
 * @throws SoarException
 * @throws SQLException
 * @throws IOException
 */
void smem_init_db(boolean readonly) throws SoarException, SQLException, IOException {
  if (db != null) {
    return;
  }
  final Connection connection=JdbcTools.connect(params.driver.get(),params.path.get());
  try {
    db=new SemanticMemoryDatabase(connection);
  }
 catch (  SoarException e) {
    connection.close();
    throw e;
  }
{
{
      final int cacheSize;
switch (params.cache.get()) {
case small:
        cacheSize=5000;
      break;
case medium:
    cacheSize=20000;
  break;
case large:
default :
cacheSize=100000;
}
final Statement s=db.getConnection().createStatement();
try {
s.execute(""String_Node_Str"" + cacheSize);
}
  finally {
s.close();
}
}
if (params.optimization.get() == Optimization.performance) {
final Statement s=db.getConnection().createStatement();
try {
s.execute(""String_Node_Str"");
s.execute(""String_Node_Str"");
s.execute(""String_Node_Str"");
}
  finally {
s.close();
}
}
}
smem_validation++;
db.structure();
db.prepare();
smem_reset_id_counters();
db.begin.executeUpdate();
if (!readonly) {
final ByRef<Long> tempMaxCycle=ByRef.create(smem_max_cycle);
if (!smem_variable_get(smem_variable_key.var_max_cycle,tempMaxCycle)) {
smem_max_cycle=1;
}
 else {
smem_max_cycle=tempMaxCycle.value;
}
{
ByRef<Long> temp=ByRef.create(0L);
if (smem_variable_get(smem_variable_key.var_act_thresh,temp)) {
params.thresh.set(temp.value);
}
 else {
smem_variable_set(smem_variable_key.var_act_thresh,params.thresh.get());
}
if (smem_variable_get(smem_variable_key.var_num_nodes,temp)) {
}
 else {
}
if (smem_variable_get(smem_variable_key.var_num_edges,temp)) {
}
 else {
}
}
}
db.commit.executeUpdate();
if (params.lazy_commit.get()) {
db.begin.executeUpdate();
}
}",0.4167081054201889
12217,"@Override public void smem_close() throws SoarException {
  if (db != null) {
    try {
      smem_variable_set(smem_variable_key.var_max_cycle,smem_max_cycle);
      if (false) {
        db.commit.executeUpdate();
      }
      db.getConnection().close();
      db=null;
    }
 catch (    SQLException e) {
      throw new SoarException(""String_Node_Str"" + e.getMessage(),e);
    }
  }
}","@Override public void smem_close() throws SoarException {
  if (db != null) {
    try {
      smem_variable_set(smem_variable_key.var_max_cycle,smem_max_cycle);
      if (params.lazy_commit.get()) {
        db.commit.executeUpdate();
      }
      db.getConnection().close();
      db=null;
    }
 catch (    SQLException e) {
      throw new SoarException(""String_Node_Str"" + e.getMessage(),e);
    }
  }
}",0.9635220125786164
12218,"public static void executeSql(Connection db,InputStream is) throws SoarException, IOException {
  try {
    final Statement s=db.createStatement();
    final BufferedReader reader=new BufferedReader(new InputStreamReader(is));
    String line=reader.readLine();
    while (line != null) {
      line=line.trim();
      if (!line.isEmpty() && !line.startsWith(""String_Node_Str"")) {
        s.addBatch(line);
      }
      line=reader.readLine();
    }
    db.setAutoCommit(false);
    s.executeBatch();
    db.setAutoCommit(true);
  }
 catch (  SQLException e) {
    throw new SoarException(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    is.close();
  }
}","public static void executeSql(Connection db,InputStream is) throws SoarException, IOException {
  try {
    final Statement s=db.createStatement();
    try {
      final BufferedReader reader=new BufferedReader(new InputStreamReader(is));
      String line=reader.readLine();
      while (line != null) {
        line=line.trim();
        if (!line.isEmpty() && !line.startsWith(""String_Node_Str"")) {
          s.addBatch(line);
        }
        line=reader.readLine();
      }
      db.setAutoCommit(false);
      s.executeBatch();
      db.setAutoCommit(true);
    }
  finally {
      s.close();
    }
  }
 catch (  SQLException e) {
    throw new SoarException(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    is.close();
  }
}",0.9466192170818504
12219,"@Test public void testCanInitializeTheDatabase() throws Exception {
  final DefaultSemanticMemory smem=new DefaultSemanticMemory(context);
  assertNull(smem.getDatabase());
  smem.smem_attach();
  assertNotNull(smem.getDatabase());
  assertFalse(smem.getDatabase().getConnection().isClosed());
}","@Test public void testCanInitializeTheDatabase() throws Exception {
  final DefaultSemanticMemory smem=new DefaultSemanticMemory(context);
  smem.initialize();
  assertNull(smem.getDatabase());
  smem.smem_attach();
  assertNotNull(smem.getDatabase());
  assertFalse(smem.getDatabase().getConnection().isClosed());
}",0.9656301145662848
12220,"@Test public void testCanParseAChunk() throws Exception {
  final DefaultSemanticMemory smem=new DefaultSemanticMemory(context);
  smem.smem_parse_chunks(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  final PrintWriter pw=new PrintWriter(System.out);
  smem.smem_visualize_store(pw);
  pw.flush();
}","@Test public void testCanParseAChunk() throws Exception {
  final DefaultSemanticMemory smem=new DefaultSemanticMemory(context);
  smem.initialize();
  smem.smem_parse_chunks(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  final PrintWriter pw=new PrintWriter(System.out);
  smem.smem_visualize_store(pw);
  pw.flush();
}",0.9724770642201837
12221,"@Before public void setUp() throws Exception {
  context=AdaptableContainer.from(new SymbolFactoryImpl());
  conn=JdbcTools.connect(""String_Node_Str"",""String_Node_Str"");
  final SemanticMemoryDatabase db=new SemanticMemoryDatabase(conn);
  db.structure();
  db.prepare();
  smem=new DefaultSemanticMemory(context,db);
}","@Before public void setUp() throws Exception {
  context=AdaptableContainer.from(new SymbolFactoryImpl(),new PropertyManager());
  conn=JdbcTools.connect(""String_Node_Str"",""String_Node_Str"");
  final SemanticMemoryDatabase db=new SemanticMemoryDatabase(conn);
  db.structure();
  db.prepare();
  smem=new DefaultSemanticMemory(context,db);
  smem.initialize();
}",0.9368575624082232
12222,"/** 
 * activates a new or existing long-term identifier <p>semantic_memory.cpp:957:smem_lti_activate
 * @param lti
 * @throws SQLException
 */
void smem_lti_activate(long lti) throws SQLException {
  db.act_lti_child_ct_get.setLong(1,lti);
  final ResultSet rs=db.act_lti_child_ct_get.executeQuery();
  long lti_child_ct=0;
  try {
    rs.next();
    lti_child_ct=rs.getLong(0 + 1);
  }
  finally {
    rs.close();
  }
  if (lti_child_ct >= 0) {
    db.act_lti_set.setLong(1,smem_max_cycle++);
    db.act_lti_set.setLong(2,lti);
    db.act_lti_set.execute();
  }
 else {
    db.act_set.setLong(1,smem_max_cycle++);
    db.act_set.setLong(2,lti);
    db.act_set.execute();
  }
}","/** 
 * activates a new or existing long-term identifier <p>semantic_memory.cpp:957:smem_lti_activate
 * @param lti
 * @throws SQLException
 */
void smem_lti_activate(long lti) throws SQLException {
  db.act_lti_child_ct_get.setLong(1,lti);
  final ResultSet rs=db.act_lti_child_ct_get.executeQuery();
  long lti_child_ct=0;
  try {
    rs.next();
    lti_child_ct=rs.getLong(0 + 1);
  }
  finally {
    rs.close();
  }
  if (lti_child_ct >= 100) {
    db.act_lti_set.setLong(1,smem_max_cycle++);
    db.act_lti_set.setLong(2,lti);
    db.act_lti_set.execute();
  }
 else {
    db.act_set.setLong(1,smem_max_cycle++);
    db.act_set.setLong(2,lti);
    db.act_set.execute();
  }
}",0.9985272459499264
12223,"/** 
 * <p>semantic_memory.cpp:2564:smem_parse_chunks
 * @param chunkString
 * @return
 * @throws SoarException
 * @throws IOException
 * @throws SQLException
 */
boolean smem_parse_chunks(String chunkString) throws SoarException, IOException, SQLException {
  boolean return_val=false;
  long clause_count=0;
  smem_attach();
  final StringWriter errorWriter=new StringWriter();
  final Lexer lexer=new Lexer(new Printer(errorWriter),new StringReader(chunkString));
  lexer.setAllowIds(true);
  lexer.getNextLexeme();
  if (lexer.getCurrentLexeme().type == LexemeType.L_BRACE) {
    boolean good_chunk=true;
    final Map<String,smem_chunk_value> chunks=new HashMap<String,smem_chunk_value>();
    final Set<smem_chunk_lti> newbies=new HashSet<smem_chunk_lti>();
    lexer.getNextLexeme();
    while ((lexer.getCurrentLexeme().type == LexemeType.L_PAREN) && (good_chunk)) {
      good_chunk=smem_parse_chunk(symbols,lexer,chunks,newbies);
      if (good_chunk) {
        for (        smem_chunk_lti c_new : newbies) {
          if (c_new.lti_id == 0) {
            if (c_new.lti_number == 0) {
              c_new.lti_number=symbols.incrementIdNumber(c_new.lti_letter);
              c_new.lti_id=smem_lti_add_id(c_new.lti_letter,c_new.lti_number);
            }
 else {
              if (c_new.lti_id == 0) {
                c_new.lti_id=smem_lti_get_id(c_new.lti_letter,c_new.lti_number);
                if (c_new.lti_id == 0) {
                  c_new.lti_id=smem_lti_add_id(c_new.lti_letter,c_new.lti_number);
                  final IdentifierImpl id_parent=symbols.findIdentifier(c_new.lti_letter,(int)c_new.lti_number);
                  if (id_parent != null) {
                    id_parent.smem_lti=c_new.lti_id;
                  }
                }
              }
            }
          }
        }
        for (        smem_chunk_lti c_new : newbies) {
          if (c_new.slots != null) {
            smem_store_chunk(c_new.lti_id,c_new.slots,false);
          }
        }
        for (        smem_chunk_lti c_new : newbies) {
          smem_deallocate_chunk(c_new,false);
        }
        clause_count++;
        newbies.clear();
      }
    }
    ;
    if (good_chunk && (lexer.getCurrentLexeme().type == LexemeType.R_BRACE)) {
      lexer.getNextLexeme();
      return_val=(lexer.getCurrentLexeme().type == LexemeType.EOF);
    }
{
      for (      smem_chunk_value c_old : chunks.values()) {
        smem_deallocate_chunk(c_old,true);
      }
    }
  }
  if (!return_val) {
    throw new SoarException(""String_Node_Str"" + clause_count);
  }
  return return_val;
}","/** 
 * <p>semantic_memory.cpp:2564:smem_parse_chunks
 * @param chunkString
 * @return
 * @throws SoarException
 */
boolean smem_parse_chunks(String chunkString) throws SoarException {
  try {
    return smem_parse_chunks_safe(chunkString);
  }
 catch (  IOException e) {
    throw new SoarException(e);
  }
catch (  SQLException e) {
    throw new SoarException(e);
  }
}",0.1020615072659682
12224,"/** 
 * <p>semantic_memory.cpp:2263:smem_parse_chunk
 * @param lexer
 * @param chunks
 * @param newbies
 * @return
 * @throws IOException
 */
static boolean smem_parse_chunk(SymbolFactoryImpl symbols,Lexer lexer,Map<String,smem_chunk_value> chunks,Set<smem_chunk_lti> newbies) throws IOException {
  boolean return_val=false;
  smem_chunk_lti new_chunk=null;
  boolean good_at=false;
  ParsedLtiName chunk_name=null;
  lexer.getNextLexeme();
  if ((lexer.getCurrentLexeme().type == LexemeType.AT) || (lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER) || (lexer.getCurrentLexeme().type == LexemeType.VARIABLE)) {
    good_at=true;
    if (lexer.getCurrentLexeme().type == LexemeType.AT) {
      lexer.getNextLexeme();
      good_at=(lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER);
    }
    if (good_at) {
      chunk_name=smem_parse_lti_name(lexer.getCurrentLexeme());
      new_chunk=new smem_chunk_lti();
      new_chunk.lti_letter=chunk_name.id_letter;
      new_chunk.lti_number=chunk_name.id_number;
      new_chunk.lti_id=0;
      new_chunk.soar_id=null;
      new_chunk.slots=new HashMap<SymbolImpl,List<smem_chunk_value>>();
      lexer.getNextLexeme();
      long intermediate_counter=1;
      smem_chunk_lti intermediate_parent;
      while (lexer.getCurrentLexeme().type == LexemeType.UP_ARROW) {
        intermediate_parent=new_chunk;
        lexer.getNextLexeme();
        SymbolImpl chunk_attr=smem_parse_constant_attr(symbols,lexer.getCurrentLexeme());
        if (chunk_attr != null) {
          lexer.getNextLexeme();
          while (lexer.getCurrentLexeme().type == LexemeType.PERIOD) {
            final smem_chunk_lti temp_chunk=new smem_chunk_lti();
            temp_chunk.lti_letter=chunk_attr.asString() != null ? chunk_attr.getFirstLetter() : 'X';
            temp_chunk.lti_number=(intermediate_counter++);
            temp_chunk.lti_id=0;
            temp_chunk.slots=new HashMap<SymbolImpl,List<smem_chunk_value>>();
            temp_chunk.soar_id=null;
            final List<smem_chunk_value> s=smem_make_slot(intermediate_parent.slots,chunk_attr);
            s.add(temp_chunk);
            final String temp_key=String.format(""String_Node_Str"",temp_chunk.lti_letter,temp_chunk.lti_number);
            chunks.put(temp_key,temp_chunk);
            newbies.add(temp_chunk);
            intermediate_parent=temp_chunk;
            lexer.getNextLexeme();
            chunk_attr=smem_parse_constant_attr(symbols,lexer.getCurrentLexeme());
            lexer.getNextLexeme();
          }
          if (chunk_attr != null) {
            smem_chunk_value chunk_value=null;
            do {
              if ((lexer.getCurrentLexeme().type == LexemeType.SYM_CONSTANT)) {
                chunk_value=new smem_chunk_constant(symbols.createString(lexer.getCurrentLexeme().string));
              }
 else               if ((lexer.getCurrentLexeme().type == LexemeType.INTEGER)) {
                chunk_value=new smem_chunk_constant(symbols.createInteger(lexer.getCurrentLexeme().int_val));
              }
 else               if ((lexer.getCurrentLexeme().type == LexemeType.FLOAT)) {
                chunk_value=new smem_chunk_constant(symbols.createDouble(lexer.getCurrentLexeme().float_val));
              }
 else               if ((lexer.getCurrentLexeme().type == LexemeType.AT) || (lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER) || (lexer.getCurrentLexeme().type == LexemeType.VARIABLE)) {
                good_at=true;
                if (lexer.getCurrentLexeme().type == LexemeType.AT) {
                  lexer.getNextLexeme();
                  good_at=(lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER);
                }
                if (good_at) {
                  final ParsedLtiName temp_key2=smem_parse_lti_name(lexer.getCurrentLexeme());
                  final smem_chunk_value p=chunks.get(temp_key2.value);
                  if (p != null) {
                    chunk_value=p;
                  }
 else {
                    final smem_chunk_lti temp_chunk=new smem_chunk_lti();
                    temp_chunk.lti_letter=temp_key2.id_letter;
                    temp_chunk.lti_number=temp_key2.id_number;
                    temp_chunk.lti_id=0;
                    temp_chunk.slots=null;
                    chunk_value=temp_chunk;
                    chunks.put(temp_key2.value,chunk_value);
                    newbies.add(chunk_value.asLti());
                  }
                }
              }
              if (chunk_value != null) {
                lexer.getNextLexeme();
                final List<smem_chunk_value> s=smem_make_slot(intermediate_parent.slots,chunk_attr);
                s.add(chunk_value);
                if (lexer.getCurrentLexeme().type == LexemeType.R_PAREN) {
                  return_val=true;
                  lexer.getNextLexeme();
                  chunk_value=null;
                }
              }
            }
 while (chunk_value != null);
          }
        }
      }
    }
 else {
    }
  }
 else {
  }
  if (return_val) {
    final smem_chunk_value p=chunks.get(chunk_name.value);
    if (p == null) {
      chunks.put(chunk_name.value,new_chunk);
      newbies.add(new_chunk);
    }
 else {
      if (p.asLti().slots == null) {
        p.asLti().slots=new_chunk.slots;
        new_chunk.slots=null;
      }
 else {
        for (        Map.Entry<SymbolImpl,List<smem_chunk_value>> ss_p : new_chunk.slots.entrySet()) {
          final List<smem_chunk_value> target_slot=smem_make_slot(p.asLti().slots,ss_p.getKey());
          final List<smem_chunk_value> source_slot=ss_p.getValue();
          for (          smem_chunk_value s_p : source_slot) {
            target_slot.add(s_p);
          }
        }
        new_chunk.slots=null;
      }
      newbies.add(p.asLti());
      smem_deallocate_chunk(new_chunk);
    }
  }
 else {
    newbies.clear();
  }
  return return_val;
}","/** 
 * <p>semantic_memory.cpp:2263:smem_parse_chunk
 * @param lexer
 * @param chunks
 * @param newbies
 * @return
 * @throws IOException
 */
static boolean smem_parse_chunk(SymbolFactoryImpl symbols,Lexer lexer,Map<String,smem_chunk_value> chunks,Set<smem_chunk_lti> newbies) throws IOException {
  boolean return_val=false;
  smem_chunk_lti new_chunk=null;
  boolean good_at=false;
  ParsedLtiName chunk_name=null;
  lexer.getNextLexeme();
  if ((lexer.getCurrentLexeme().type == LexemeType.AT) || (lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER) || (lexer.getCurrentLexeme().type == LexemeType.VARIABLE)) {
    good_at=true;
    if (lexer.getCurrentLexeme().type == LexemeType.AT) {
      lexer.getNextLexeme();
      good_at=(lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER);
    }
    if (good_at) {
      chunk_name=smem_parse_lti_name(lexer.getCurrentLexeme());
      new_chunk=new smem_chunk_lti();
      new_chunk.lti_letter=chunk_name.id_letter;
      new_chunk.lti_number=chunk_name.id_number;
      new_chunk.lti_id=0;
      new_chunk.soar_id=null;
      new_chunk.slots=new HashMap<SymbolImpl,List<smem_chunk_value>>();
      lexer.getNextLexeme();
      long intermediate_counter=1;
      smem_chunk_lti intermediate_parent;
      while (lexer.getCurrentLexeme().type == LexemeType.UP_ARROW) {
        intermediate_parent=new_chunk;
        lexer.getNextLexeme();
        SymbolImpl chunk_attr=smem_parse_constant_attr(symbols,lexer.getCurrentLexeme());
        if (chunk_attr != null) {
          lexer.getNextLexeme();
          while (lexer.getCurrentLexeme().type == LexemeType.PERIOD) {
            final smem_chunk_lti temp_chunk=new smem_chunk_lti();
            temp_chunk.lti_letter=chunk_attr.asString() != null ? chunk_attr.getFirstLetter() : 'X';
            temp_chunk.lti_number=(intermediate_counter++);
            temp_chunk.lti_id=0;
            temp_chunk.slots=new HashMap<SymbolImpl,List<smem_chunk_value>>();
            temp_chunk.soar_id=null;
            final List<smem_chunk_value> s=smem_make_slot(intermediate_parent.slots,chunk_attr);
            s.add(temp_chunk);
            final String temp_key=String.format(""String_Node_Str"",temp_chunk.lti_letter,temp_chunk.lti_number);
            chunks.put(temp_key,temp_chunk);
            newbies.add(temp_chunk);
            intermediate_parent=temp_chunk;
            lexer.getNextLexeme();
            chunk_attr=smem_parse_constant_attr(symbols,lexer.getCurrentLexeme());
            lexer.getNextLexeme();
          }
          if (chunk_attr != null) {
            smem_chunk_value chunk_value=null;
            do {
              chunk_value=null;
              if ((lexer.getCurrentLexeme().type == LexemeType.SYM_CONSTANT)) {
                chunk_value=new smem_chunk_constant(symbols.createString(lexer.getCurrentLexeme().string));
              }
 else               if ((lexer.getCurrentLexeme().type == LexemeType.INTEGER)) {
                chunk_value=new smem_chunk_constant(symbols.createInteger(lexer.getCurrentLexeme().int_val));
              }
 else               if ((lexer.getCurrentLexeme().type == LexemeType.FLOAT)) {
                chunk_value=new smem_chunk_constant(symbols.createDouble(lexer.getCurrentLexeme().float_val));
              }
 else               if ((lexer.getCurrentLexeme().type == LexemeType.AT) || (lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER) || (lexer.getCurrentLexeme().type == LexemeType.VARIABLE)) {
                good_at=true;
                if (lexer.getCurrentLexeme().type == LexemeType.AT) {
                  lexer.getNextLexeme();
                  good_at=(lexer.getCurrentLexeme().type == LexemeType.IDENTIFIER);
                }
                if (good_at) {
                  final ParsedLtiName temp_key2=smem_parse_lti_name(lexer.getCurrentLexeme());
                  final smem_chunk_value p=chunks.get(temp_key2.value);
                  if (p != null) {
                    chunk_value=p;
                  }
 else {
                    final smem_chunk_lti temp_chunk=new smem_chunk_lti();
                    temp_chunk.lti_letter=temp_key2.id_letter;
                    temp_chunk.lti_number=temp_key2.id_number;
                    temp_chunk.lti_id=0;
                    temp_chunk.slots=null;
                    chunk_value=temp_chunk;
                    chunks.put(temp_key2.value,chunk_value);
                    newbies.add(chunk_value.asLti());
                  }
                }
              }
              if (chunk_value != null) {
                lexer.getNextLexeme();
                final List<smem_chunk_value> s=smem_make_slot(intermediate_parent.slots,chunk_attr);
                s.add(chunk_value);
                if (lexer.getCurrentLexeme().type == LexemeType.R_PAREN) {
                  return_val=true;
                  lexer.getNextLexeme();
                  chunk_value=null;
                }
              }
            }
 while (chunk_value != null);
          }
        }
      }
    }
 else {
    }
  }
 else {
  }
  if (return_val) {
    final smem_chunk_value p=chunks.get(chunk_name.value);
    if (p == null) {
      chunks.put(chunk_name.value,new_chunk);
      newbies.add(new_chunk);
    }
 else {
      if (p.asLti().slots == null) {
        p.asLti().slots=new_chunk.slots;
        new_chunk.slots=null;
      }
 else {
        for (        Map.Entry<SymbolImpl,List<smem_chunk_value>> ss_p : new_chunk.slots.entrySet()) {
          final List<smem_chunk_value> target_slot=smem_make_slot(p.asLti().slots,ss_p.getKey());
          final List<smem_chunk_value> source_slot=ss_p.getValue();
          for (          smem_chunk_value s_p : source_slot) {
            target_slot.add(s_p);
          }
        }
        new_chunk.slots=null;
      }
      newbies.add(p.asLti());
      smem_deallocate_chunk(new_chunk);
    }
  }
 else {
    newbies.clear();
  }
  return return_val;
}",0.9972945552925262
12225,"/** 
 * <p>semantic_memory.cpp:1187:smem_store_chunk
 * @param parent_id
 * @param children
 * @param remove_old_children
 * @throws SQLException
 */
void smem_store_chunk(long parent_id,Map<SymbolImpl,List<smem_chunk_value>> children,boolean remove_old_children) throws SQLException {
  long attr_hash=0;
  long value_hash=0;
  long value_lti=0;
  Map<Long,Long> attr_ct_adjust=new HashMap<Long,Long>();
  Map<Long,Map<Long,Long>> const_ct_adjust=new HashMap<Long,Map<Long,Long>>();
  Map<Long,Map<Long,Long>> lti_ct_adjust=new HashMap<Long,Map<Long,Long>>();
  long stat_adjust=0;
  long next_act_cycle=smem_max_cycle++;
  long child_ct=0;
  if (remove_old_children) {
    smem_disconnect_chunk(parent_id);
  }
 else {
    db.act_lti_child_ct_get.setLong(1,parent_id);
    final ResultSet rs=db.act_lti_child_ct_get.executeQuery();
    try {
      child_ct=rs.getLong(0 + 1);
    }
  finally {
      rs.close();
    }
  }
  long thresh=0;
  boolean before_above=(child_ct >= thresh);
{
    for (    Map.Entry<SymbolImpl,List<smem_chunk_value>> s : children.entrySet()) {
      for (      smem_chunk_value v : s.getValue()) {
        child_ct++;
      }
    }
  }
  boolean after_above=(child_ct >= thresh);
  long web_act_cycle=((after_above) ? (SMEM_ACT_MAX) : (next_act_cycle));
  if ((!remove_old_children) && (!before_above)) {
    db.act_set.setLong(1,web_act_cycle);
    db.act_set.setLong(2,parent_id);
    db.act_set.executeUpdate();
  }
  if (after_above) {
    db.act_lti_set.setLong(1,next_act_cycle);
    db.act_lti_set.setLong(2,parent_id);
    db.act_lti_set.executeUpdate();
  }
  for (  Map.Entry<SymbolImpl,List<smem_chunk_value>> s : children.entrySet()) {
    attr_hash=smem_temporal_hash(s.getKey());
    final Long countForAttrHash=attr_ct_adjust.get(attr_hash);
    attr_ct_adjust.put(attr_hash,countForAttrHash != null ? countForAttrHash + 1 : 0 + 1);
    stat_adjust++;
    for (    smem_chunk_value v : s.getValue()) {
      final SymbolImpl constant=v.asConstant();
      if (constant != null) {
        value_hash=smem_temporal_hash(constant);
        db.web_add.setLong(1,parent_id);
        db.web_add.setLong(2,attr_hash);
        db.web_add.setLong(3,value_hash);
        db.web_add.setNull(4,java.sql.Types.NULL);
        db.web_add.setLong(5,web_act_cycle);
        db.web_add.executeUpdate();
        Map<Long,Long> forHash=const_ct_adjust.get(attr_hash);
        if (forHash == null) {
          forHash=new HashMap<Long,Long>();
          const_ct_adjust.put(attr_hash,forHash);
        }
        final Long countForValueHash=forHash.get(value_hash);
        forHash.put(value_hash,countForValueHash != null ? countForValueHash + 1 : 0 + 1);
      }
 else {
        value_lti=v.asLti().lti_id;
        if (value_lti == 0) {
          value_lti=smem_lti_add_id(v.asLti().lti_letter,v.asLti().lti_number);
          v.asLti().lti_id=value_lti;
          if (v.asLti().soar_id != null) {
            v.asLti().soar_id.smem_lti=value_lti;
          }
        }
        db.web_add.setLong(1,parent_id);
        db.web_add.setLong(2,attr_hash);
        db.web_add.setNull(3,java.sql.Types.NULL);
        db.web_add.setLong(4,value_lti);
        db.web_add.setLong(5,web_act_cycle);
        db.web_add.executeUpdate();
        Map<Long,Long> forHash=lti_ct_adjust.get(attr_hash);
        if (forHash == null) {
          forHash=new HashMap<Long,Long>();
          lti_ct_adjust.put(attr_hash,forHash);
        }
        final Long countForValueHash=forHash.get(value_lti);
        forHash.put(value_lti,countForValueHash != null ? countForValueHash + 1 : 0 + 1);
      }
    }
  }
{
  }
{
    for (    Map.Entry<Long,Long> p : attr_ct_adjust.entrySet()) {
      db.ct_attr_add.setLong(1,p.getKey());
      db.ct_attr_add.executeUpdate();
      db.ct_attr_update.setLong(1,p.getValue());
      db.ct_attr_update.setLong(2,p.getKey());
      db.ct_attr_update.executeUpdate();
    }
  }
{
    for (    Map.Entry<Long,Map<Long,Long>> p1 : const_ct_adjust.entrySet()) {
      for (      Map.Entry<Long,Long> p2 : p1.getValue().entrySet()) {
        db.ct_const_add.setLong(1,p1.getKey());
        db.ct_const_add.setLong(2,p2.getKey());
        db.ct_const_add.executeUpdate();
        db.ct_const_update.setLong(1,p2.getValue());
        db.ct_const_update.setLong(2,p1.getKey());
        db.ct_const_update.setLong(3,p2.getKey());
        db.ct_const_update.executeUpdate();
      }
    }
  }
{
    for (    Map.Entry<Long,Map<Long,Long>> p1 : lti_ct_adjust.entrySet()) {
      for (      Map.Entry<Long,Long> p2 : p1.getValue().entrySet()) {
        db.ct_lti_add.setLong(1,p1.getKey());
        db.ct_lti_add.setLong(2,p2.getKey());
        db.ct_lti_add.executeUpdate();
        db.ct_lti_update.setLong(1,p2.getValue());
        db.ct_lti_update.setLong(2,p1.getKey());
        db.ct_lti_update.setLong(3,p2.getKey());
        db.ct_lti_update.executeUpdate();
      }
    }
  }
{
    db.act_lti_child_ct_set.setLong(1,child_ct);
    db.act_lti_child_ct_set.setLong(2,parent_id);
    db.act_lti_child_ct_set.executeUpdate();
  }
}","/** 
 * <p>semantic_memory.cpp:1187:smem_store_chunk
 * @param parent_id
 * @param children
 * @param remove_old_children
 * @throws SQLException
 */
void smem_store_chunk(long parent_id,Map<SymbolImpl,List<smem_chunk_value>> children,boolean remove_old_children) throws SQLException {
  long attr_hash=0;
  long value_hash=0;
  long value_lti=0;
  Map<Long,Long> attr_ct_adjust=new HashMap<Long,Long>();
  Map<Long,Map<Long,Long>> const_ct_adjust=new HashMap<Long,Map<Long,Long>>();
  Map<Long,Map<Long,Long>> lti_ct_adjust=new HashMap<Long,Map<Long,Long>>();
  long stat_adjust=0;
  long next_act_cycle=smem_max_cycle++;
  long child_ct=0;
  if (remove_old_children) {
    smem_disconnect_chunk(parent_id);
  }
 else {
    db.act_lti_child_ct_get.setLong(1,parent_id);
    final ResultSet rs=db.act_lti_child_ct_get.executeQuery();
    try {
      child_ct=rs.getLong(0 + 1);
    }
  finally {
      rs.close();
    }
  }
  long thresh=100;
  boolean before_above=(child_ct >= thresh);
{
    for (    Map.Entry<SymbolImpl,List<smem_chunk_value>> s : children.entrySet()) {
      for (      smem_chunk_value v : s.getValue()) {
        child_ct++;
      }
    }
  }
  boolean after_above=(child_ct >= thresh);
  long web_act_cycle=((after_above) ? (SMEM_ACT_MAX) : (next_act_cycle));
  if ((!remove_old_children) && (!before_above)) {
    db.act_set.setLong(1,web_act_cycle);
    db.act_set.setLong(2,parent_id);
    db.act_set.executeUpdate();
  }
  if (after_above) {
    db.act_lti_set.setLong(1,next_act_cycle);
    db.act_lti_set.setLong(2,parent_id);
    db.act_lti_set.executeUpdate();
  }
  for (  Map.Entry<SymbolImpl,List<smem_chunk_value>> s : children.entrySet()) {
    attr_hash=smem_temporal_hash(s.getKey());
    final Long countForAttrHash=attr_ct_adjust.get(attr_hash);
    attr_ct_adjust.put(attr_hash,countForAttrHash != null ? countForAttrHash + 1 : 0 + 1);
    stat_adjust++;
    for (    smem_chunk_value v : s.getValue()) {
      final SymbolImpl constant=v.asConstant();
      if (constant != null) {
        value_hash=smem_temporal_hash(constant);
        db.web_add.setLong(1,parent_id);
        db.web_add.setLong(2,attr_hash);
        db.web_add.setLong(3,value_hash);
        db.web_add.setNull(4,java.sql.Types.NULL);
        db.web_add.setLong(5,web_act_cycle);
        db.web_add.executeUpdate();
        Map<Long,Long> forHash=const_ct_adjust.get(attr_hash);
        if (forHash == null) {
          forHash=new HashMap<Long,Long>();
          const_ct_adjust.put(attr_hash,forHash);
        }
        final Long countForValueHash=forHash.get(value_hash);
        forHash.put(value_hash,countForValueHash != null ? countForValueHash + 1 : 0 + 1);
      }
 else {
        value_lti=v.asLti().lti_id;
        if (value_lti == 0) {
          value_lti=smem_lti_add_id(v.asLti().lti_letter,v.asLti().lti_number);
          v.asLti().lti_id=value_lti;
          if (v.asLti().soar_id != null) {
            v.asLti().soar_id.smem_lti=value_lti;
          }
        }
        db.web_add.setLong(1,parent_id);
        db.web_add.setLong(2,attr_hash);
        db.web_add.setNull(3,java.sql.Types.NULL);
        db.web_add.setLong(4,value_lti);
        db.web_add.setLong(5,web_act_cycle);
        db.web_add.executeUpdate();
        Map<Long,Long> forHash=lti_ct_adjust.get(attr_hash);
        if (forHash == null) {
          forHash=new HashMap<Long,Long>();
          lti_ct_adjust.put(attr_hash,forHash);
        }
        final Long countForValueHash=forHash.get(value_lti);
        forHash.put(value_lti,countForValueHash != null ? countForValueHash + 1 : 0 + 1);
      }
    }
  }
{
  }
{
    for (    Map.Entry<Long,Long> p : attr_ct_adjust.entrySet()) {
      db.ct_attr_add.setLong(1,p.getKey());
      db.ct_attr_add.executeUpdate();
      db.ct_attr_update.setLong(1,p.getValue());
      db.ct_attr_update.setLong(2,p.getKey());
      db.ct_attr_update.executeUpdate();
    }
  }
{
    for (    Map.Entry<Long,Map<Long,Long>> p1 : const_ct_adjust.entrySet()) {
      for (      Map.Entry<Long,Long> p2 : p1.getValue().entrySet()) {
        db.ct_const_add.setLong(1,p1.getKey());
        db.ct_const_add.setLong(2,p2.getKey());
        db.ct_const_add.executeUpdate();
        db.ct_const_update.setLong(1,p2.getValue());
        db.ct_const_update.setLong(2,p1.getKey());
        db.ct_const_update.setLong(3,p2.getKey());
        db.ct_const_update.executeUpdate();
      }
    }
  }
{
    for (    Map.Entry<Long,Map<Long,Long>> p1 : lti_ct_adjust.entrySet()) {
      for (      Map.Entry<Long,Long> p2 : p1.getValue().entrySet()) {
        db.ct_lti_add.setLong(1,p1.getKey());
        db.ct_lti_add.setLong(2,p2.getKey());
        db.ct_lti_add.executeUpdate();
        db.ct_lti_update.setLong(1,p2.getValue());
        db.ct_lti_update.setLong(2,p1.getKey());
        db.ct_lti_update.setLong(3,p2.getKey());
        db.ct_lti_update.executeUpdate();
      }
    }
  }
{
    db.act_lti_child_ct_set.setLong(1,child_ct);
    db.act_lti_child_ct_set.setLong(2,parent_id);
    db.act_lti_child_ct_set.executeUpdate();
  }
}",0.9998025666337612
12226,"/** 
 * Opens the SQLite database and performs all initialization required for the current mode The readonly param should only be used in experimentation where you don't want to alter previous database state. <p>semantic_memory.cpp:1952:smem_init_db
 * @param readonly
 * @throws SoarException
 * @throws SQLException
 * @throws IOException
 */
void smem_init_db(boolean readonly) throws SoarException, SQLException, IOException {
  if (db != null) {
    return;
  }
  final String db_path;
  if (true) {
    db_path=""String_Node_Str"";
  }
 else {
    db_path=""String_Node_Str"";
  }
  final Connection connection=JdbcTools.connect(""String_Node_Str"",""String_Node_Str"" + db_path);
  try {
    db=new SemanticMemoryDatabase(connection);
  }
 catch (  SoarException e) {
    connection.close();
    throw e;
  }
{
{
      final int cacheSize=5000;
      final Statement s=db.getConnection().createStatement();
      s.execute(""String_Node_Str"" + cacheSize);
    }
    if (false) {
      final Statement s=db.getConnection().createStatement();
      s.execute(""String_Node_Str"");
      s.execute(""String_Node_Str"");
      s.execute(""String_Node_Str"");
    }
  }
  smem_validation++;
  db.structure();
  db.prepare();
  smem_reset_id_counters();
  db.begin.executeUpdate();
  if (!readonly) {
    final ByRef<Long> tempMaxCycle=ByRef.create(smem_max_cycle);
    if (!smem_variable_get(smem_variable_key.var_max_cycle,tempMaxCycle)) {
      smem_max_cycle=1;
    }
 else {
      smem_max_cycle=tempMaxCycle.value;
    }
{
      ByRef<Long> temp=ByRef.create(0L);
      if (smem_variable_get(smem_variable_key.var_act_thresh,temp)) {
      }
 else {
        smem_variable_set(smem_variable_key.var_act_thresh,0L);
      }
      if (smem_variable_get(smem_variable_key.var_num_nodes,temp)) {
      }
 else {
      }
      if (smem_variable_get(smem_variable_key.var_num_edges,temp)) {
      }
 else {
      }
    }
  }
  db.commit.executeUpdate();
  if (false) {
    db.begin.executeUpdate();
  }
}","/** 
 * Opens the SQLite database and performs all initialization required for the current mode The readonly param should only be used in experimentation where you don't want to alter previous database state. <p>semantic_memory.cpp:1952:smem_init_db
 * @param readonly
 * @throws SoarException
 * @throws SQLException
 * @throws IOException
 */
void smem_init_db(boolean readonly) throws SoarException, SQLException, IOException {
  if (db != null) {
    return;
  }
  final String db_path;
  if (true) {
    db_path=""String_Node_Str"";
  }
 else {
    db_path=""String_Node_Str"";
  }
  final Connection connection=JdbcTools.connect(""String_Node_Str"",""String_Node_Str"" + db_path);
  try {
    db=new SemanticMemoryDatabase(connection);
  }
 catch (  SoarException e) {
    connection.close();
    throw e;
  }
{
{
      final int cacheSize=5000;
      final Statement s=db.getConnection().createStatement();
      s.execute(""String_Node_Str"" + cacheSize);
    }
    if (false) {
      final Statement s=db.getConnection().createStatement();
      s.execute(""String_Node_Str"");
      s.execute(""String_Node_Str"");
      s.execute(""String_Node_Str"");
    }
  }
  smem_validation++;
  db.structure();
  db.prepare();
  smem_reset_id_counters();
  db.begin.executeUpdate();
  if (!readonly) {
    final ByRef<Long> tempMaxCycle=ByRef.create(smem_max_cycle);
    if (!smem_variable_get(smem_variable_key.var_max_cycle,tempMaxCycle)) {
      smem_max_cycle=1;
    }
 else {
      smem_max_cycle=tempMaxCycle.value;
    }
{
      ByRef<Long> temp=ByRef.create(0L);
      if (smem_variable_get(smem_variable_key.var_act_thresh,temp)) {
      }
 else {
        smem_variable_set(smem_variable_key.var_act_thresh,100L);
      }
      if (smem_variable_get(smem_variable_key.var_num_nodes,temp)) {
      }
 else {
      }
      if (smem_variable_get(smem_variable_key.var_num_edges,temp)) {
      }
 else {
      }
    }
  }
  db.commit.executeUpdate();
  if (false) {
    db.begin.executeUpdate();
  }
}",0.999497487437186
12227,"@Test public void testCanParseAChunk() throws Exception {
  final DefaultSemanticMemory smem=new DefaultSemanticMemory(context);
  smem.smem_parse_chunks(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Test public void testCanParseAChunk() throws Exception {
  final DefaultSemanticMemory smem=new DefaultSemanticMemory(context);
  smem.smem_parse_chunks(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  final PrintWriter pw=new PrintWriter(System.out);
  smem.smem_visualize_store(pw);
  pw.flush();
}",0.8460342146189735
12228,"private int processArgs(String[] args) throws SoarException {
  this.depth=defaultDepth;
  int i=1;
  for (; i < args.length; ++i) {
    String arg=args[i];
    if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.DEPTH);
      if (i + 1 == args.length) {
        throw new SoarException(""String_Node_Str"");
      }
      try {
        depth=Integer.parseInt(args[++i].toString());
        if (depth < 0) {
          throw new SoarException(""String_Node_Str"");
        }
      }
 catch (      NumberFormatException e) {
        throw new SoarException(""String_Node_Str"");
      }
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.TREE);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.INTERNAL);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.ALL);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.USER);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.CHUNKS);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.DEFAULTS);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.JUSTIFICATIONS);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.STACK);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.STATES);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.OPERATORS);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.FULL);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.TEMPLATE);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.RL);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.EXACT);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.FILE_NAME);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      throw new SoarException(""String_Node_Str"" + arg);
    }
 else {
      break;
    }
  }
  if (i == args.length) {
    options.add(Options.ALL);
  }
  return i;
}","private int processArgs(String[] args) throws SoarException {
  this.depth=defaultDepth;
  int i=1;
  for (; i < args.length; ++i) {
    String arg=args[i];
    if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.DEPTH);
      if (i + 1 == args.length) {
        throw new SoarException(""String_Node_Str"");
      }
      try {
        depth=Integer.parseInt(args[++i].toString());
        if (depth < 0) {
          throw new SoarException(""String_Node_Str"");
        }
      }
 catch (      NumberFormatException e) {
        throw new SoarException(""String_Node_Str"");
      }
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.TREE);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.INTERNAL);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.ALL);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.USER);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.CHUNKS);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.DEFAULTS);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.JUSTIFICATIONS);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.STACK);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.STATES);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.OPERATORS);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.FULL);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.TEMPLATE);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.RL);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.EXACT);
    }
 else     if (has(arg,""String_Node_Str"",""String_Node_Str"")) {
      options.add(Options.FILE_NAME);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      throw new SoarException(""String_Node_Str"" + arg);
    }
 else {
      break;
    }
  }
  if (i == 1) {
    options.add(Options.ALL);
  }
  return i;
}",0.9974715549936788
12229,"private static Agent agent() throws Exception {
  final Agent a=new Agent();
  a.getPrinter().addPersistentWriter(new OutputStreamWriter(System.out));
  a.initialize();
  a.setInterpreter(new DefaultInterpreter(a));
  a.getInterpreter().source(new File(""String_Node_Str""));
  a.getPrinter().flush();
  return a;
}","private static Agent agent() throws Exception {
  final Agent a=new Agent();
  a.getPrinter().addPersistentWriter(new OutputStreamWriter(System.out));
  a.initialize();
  a.getInterpreter().source(new File(""String_Node_Str""));
  System.out.println(""String_Node_Str"" + a.getProductions().getProductionCount() + ""String_Node_Str"");
  a.getPrinter().flush();
  a.runFor(20000,RunType.DECISIONS);
  return a;
}",0.7009735744089013
12230,"public static void main(String[] args) throws Exception {
  final List<Agent> agents=new ArrayList<Agent>();
  for (int i=0; i < 20; ++i) {
    System.out.print(""String_Node_Str"" + (i + 1));
    agents.add(agent());
  }
  while (true) {
    Thread.sleep(1000);
  }
}","public static void main(String[] args) throws Exception {
  final List<Agent> agents=new ArrayList<Agent>();
  for (int i=0; i < 1; ++i) {
    System.out.print(""String_Node_Str"" + (i + 1));
    agents.add(agent());
  }
  while (true) {
    Thread.sleep(1000);
  }
}",0.9943502824858758
12231,"public RunCommand(ThreadedAgent threadedAgent){
  this.threadedAgent=threadedAgent;
}","public RunCommand(AgentRunController controller){
  this.controller=controller;
}",0.5180722891566265
12232,"private long getCount(int i,String[] args) throws SoarException {
  final String arg=args[i];
  if (i + 1 >= args.length) {
    throw new SoarException(""String_Node_Str"" + arg + ""String_Node_Str"");
  }
  final String countString=args[i + 1].toString();
  try {
    long n=Long.parseLong(countString);
    if (n < 1) {
      throw new SoarException(""String_Node_Str"" + arg + ""String_Node_Str"");
    }
    return n;
  }
 catch (  NumberFormatException e) {
    throw new SoarException(""String_Node_Str"" + countString + ""String_Node_Str"");
  }
}","private long getCount(int i,String[] args) throws SoarException {
  final String arg=args[i];
  if (i + 1 >= args.length) {
    return 1;
  }
  final String countString=args[i + 1].toString();
  try {
    long n=Long.parseLong(countString);
    if (n < 1) {
      throw new SoarException(""String_Node_Str"" + arg + ""String_Node_Str"");
    }
    return n;
  }
 catch (  NumberFormatException e) {
    throw new SoarException(""String_Node_Str"" + countString + ""String_Node_Str"");
  }
}",0.92578125
12233,"@Override public String execute(String[] args) throws SoarException {
  RunType type=RunType.FOREVER;
  long count=0;
  for (int i=1; i < args.length; ++i) {
    final String arg=args[i];
    if (""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
      type=RunType.DECISIONS;
      count=getCount(i++,args);
    }
 else     if (""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
      type=RunType.ELABORATIONS;
      count=getCount(i++,args);
    }
 else     if (""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
      type=RunType.PHASES;
      count=getCount(i++,args);
    }
 else     if (""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
      type=RunType.FOREVER;
    }
 else {
      throw new SoarException(""String_Node_Str"" + arg + ""String_Node_Str"");
    }
  }
  threadedAgent.runFor(count,type);
  return ""String_Node_Str"";
}","@Override public String execute(String[] args) throws SoarException {
  RunType type=RunType.FOREVER;
  long count=0;
  for (int i=1; i < args.length; ++i) {
    final String arg=args[i];
    if (""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
      type=RunType.DECISIONS;
      count=getCount(i++,args);
    }
 else     if (""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
      type=RunType.ELABORATIONS;
      count=getCount(i++,args);
    }
 else     if (""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
      type=RunType.PHASES;
      count=getCount(i++,args);
    }
 else     if (""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
      type=RunType.FOREVER;
    }
 else {
      throw new SoarException(""String_Node_Str"" + arg + ""String_Node_Str"");
    }
  }
  controller.runFor(count,type);
  return ""String_Node_Str"";
}",0.9871866295264624
12234,"private boolean determine_type_of_constituent_string(){
  PossibleSymbolTypes possibleType=determine_possible_symbol_types_for_string(lexeme.string);
  if (possibleType.possible_var) {
    lexeme.type=LexemeType.VARIABLE;
    return true;
  }
  if (possibleType.possible_ic) {
    try {
      lexeme.type=LexemeType.INTEGER;
      lexeme.int_val=Integer.valueOf(lexeme.string);
    }
 catch (    NumberFormatException e) {
      printer.print(""String_Node_Str"" + lexeme.string + ""String_Node_Str"");
      print_location_of_most_recent_lexeme();
      lexeme.int_val=0;
      return false;
    }
    return true;
  }
  if (possibleType.possible_fc) {
    try {
      lexeme.type=LexemeType.FLOAT;
      lexeme.float_val=Double.valueOf(lexeme.string);
    }
 catch (    NumberFormatException e) {
      printer.print(""String_Node_Str"" + lexeme.string + ""String_Node_Str"");
      print_location_of_most_recent_lexeme();
      lexeme.float_val=0.0f;
      return false;
    }
    return true;
  }
  if (allow_ids && possibleType.possible_id) {
    try {
      lexeme.id_letter=Character.toUpperCase(lexeme.string.charAt(0));
      lexeme.type=LexemeType.IDENTIFIER;
      lexeme.id_number=Integer.valueOf(lexeme.string.substring(1));
    }
 catch (    NumberFormatException e) {
      printer.print(""String_Node_Str"");
      print_location_of_most_recent_lexeme();
      lexeme.id_number=0;
      return false;
    }
    return true;
  }
  if (possibleType.possible_sc) {
    lexeme.type=LexemeType.SYM_CONSTANT;
    if (printer.isPrintWarnings()) {
      if (lexeme.at(0) == '<') {
        if (lexeme.at(1) == '<') {
          printer.print(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
          print_location_of_most_recent_lexeme();
        }
 else {
          printer.print(""String_Node_Str"" + lexeme + ""String_Node_Str""+ ""String_Node_Str"");
          print_location_of_most_recent_lexeme();
        }
      }
 else {
        if (lexeme.at(lexeme.length() - 1) == '>') {
          if (lexeme.at(lexeme.length() - 2) == '>') {
            printer.print(""String_Node_Str"" + lexeme + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
            print_location_of_most_recent_lexeme();
          }
 else {
            printer.print(""String_Node_Str"" + lexeme + ""String_Node_Str""+ ""String_Node_Str"");
            print_location_of_most_recent_lexeme();
          }
        }
      }
    }
    return true;
  }
  lexeme.type=LexemeType.QUOTED_STRING;
  return true;
}","private boolean determine_type_of_constituent_string(){
  PossibleSymbolTypes possibleType=determine_possible_symbol_types_for_string(lexeme.string);
  if (possibleType.possible_var) {
    lexeme.type=LexemeType.VARIABLE;
    return true;
  }
  if (possibleType.possible_ic) {
    try {
      lexeme.type=LexemeType.INTEGER;
      if (lexeme.string.charAt(0) != '+') {
        lexeme.int_val=Integer.valueOf(lexeme.string);
      }
 else {
        lexeme.int_val=Integer.valueOf(lexeme.string.substring(1));
      }
    }
 catch (    NumberFormatException e) {
      printer.print(""String_Node_Str"" + lexeme.string + ""String_Node_Str"");
      print_location_of_most_recent_lexeme();
      lexeme.int_val=0;
      return false;
    }
    return true;
  }
  if (possibleType.possible_fc) {
    try {
      lexeme.type=LexemeType.FLOAT;
      lexeme.float_val=Double.valueOf(lexeme.string);
    }
 catch (    NumberFormatException e) {
      printer.print(""String_Node_Str"" + lexeme.string + ""String_Node_Str"");
      print_location_of_most_recent_lexeme();
      lexeme.float_val=0.0f;
      return false;
    }
    return true;
  }
  if (allow_ids && possibleType.possible_id) {
    try {
      lexeme.id_letter=Character.toUpperCase(lexeme.string.charAt(0));
      lexeme.type=LexemeType.IDENTIFIER;
      lexeme.id_number=Integer.valueOf(lexeme.string.substring(1));
    }
 catch (    NumberFormatException e) {
      printer.print(""String_Node_Str"");
      print_location_of_most_recent_lexeme();
      lexeme.id_number=0;
      return false;
    }
    return true;
  }
  if (possibleType.possible_sc) {
    lexeme.type=LexemeType.SYM_CONSTANT;
    if (printer.isPrintWarnings()) {
      if (lexeme.at(0) == '<') {
        if (lexeme.at(1) == '<') {
          printer.print(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
          print_location_of_most_recent_lexeme();
        }
 else {
          printer.print(""String_Node_Str"" + lexeme + ""String_Node_Str""+ ""String_Node_Str"");
          print_location_of_most_recent_lexeme();
        }
      }
 else {
        if (lexeme.at(lexeme.length() - 1) == '>') {
          if (lexeme.at(lexeme.length() - 2) == '>') {
            printer.print(""String_Node_Str"" + lexeme + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
            print_location_of_most_recent_lexeme();
          }
 else {
            printer.print(""String_Node_Str"" + lexeme + ""String_Node_Str""+ ""String_Node_Str"");
            print_location_of_most_recent_lexeme();
          }
        }
      }
    }
    return true;
  }
  lexeme.type=LexemeType.QUOTED_STRING;
  return true;
}",0.9729941291585128
12235,"/** 
 * This is a utility routine which figures out what kind(s) of symbol a given string could represent. At entry: s, length_of_s represent the string. At exit: possible_xxx is set to TRUE/FALSE to indicate whether the given string could represent that kind of symbol; rereadable is set to TRUE indicating whether the lexer would read the given string as a symbol with exactly the same name (as opposed to treating it as a special lexeme like ""+"", changing upper to lower case, etc. <p>lexer.cpp:1225:determine_possible_symbol_types_for_string
 */
public static PossibleSymbolTypes determine_possible_symbol_types_for_string(String s){
  PossibleSymbolTypes p=new PossibleSymbolTypes();
  if (s.length() == 0) {
    return p;
  }
  if (Lexer.number_starters[s.charAt(0)]) {
    int ch=0;
    if ((s.charAt(ch) == '+') || (s.charAt(ch) == '-'))     ch++;
    while (ch < s.length() && Character.isDigit(s.charAt(ch)))     ch++;
    if (ch == s.length() && Character.isDigit(s.charAt(ch - 1)))     p.possible_ic=true;
    if (ch < s.length() && s.charAt(ch) == '.') {
      ch++;
      while (ch < s.length() && Character.isDigit(s.charAt(ch)))       ch++;
      if (ch < s.length() && (s.charAt(ch) == 'e' || s.charAt(ch) == 'E')) {
        ch++;
        if (ch < s.length() && (s.charAt(ch) == '+' || s.charAt(ch) == '-'))         ch++;
        while (ch < s.length() && Character.isDigit(s.charAt(ch)))         ch++;
      }
      if (ch == s.length())       p.possible_fc=true;
    }
  }
  for (int i=0; i < s.length(); ++i) {
    if (!isConstituentChar(s.charAt(i))) {
      return p;
    }
  }
  boolean rereadability_questionable=false;
  boolean rereadability_dead=false;
  for (int i=0; i < s.length(); i++) {
    char ch=s.charAt(i);
    if (Character.isLowerCase(ch) || Character.isDigit(ch))     continue;
    if (Character.isUpperCase(ch)) {
      rereadability_dead=true;
      break;
    }
    rereadability_questionable=true;
  }
  if (!rereadability_dead) {
    if ((!rereadability_questionable) || (s.length() >= LENGTH_OF_LONGEST_SPECIAL_LEXEME) || ((s.length() == 1) && (s.charAt(0) == '*')))     p.rereadable=true;
  }
  p.possible_sc=true;
  if ((s.charAt(0) == '<') && (s.charAt(s.length() - 1) == '>')) {
    p.possible_var=true;
  }
  if (Character.isLetter(s.charAt(0))) {
    int i=1;
    while (i < s.length() && Character.isDigit(s.charAt(i))) {
      ++i;
    }
    p.possible_id=i == s.length();
  }
  return p;
}","/** 
 * This is a utility routine which figures out what kind(s) of symbol a given string could represent. At entry: s, length_of_s represent the string. At exit: possible_xxx is set to TRUE/FALSE to indicate whether the given string could represent that kind of symbol; rereadable is set to TRUE indicating whether the lexer would read the given string as a symbol with exactly the same name (as opposed to treating it as a special lexeme like ""+"", changing upper to lower case, etc. <p>lexer.cpp:1225:determine_possible_symbol_types_for_string
 */
public static PossibleSymbolTypes determine_possible_symbol_types_for_string(String s){
  PossibleSymbolTypes p=new PossibleSymbolTypes();
  if (s.length() == 0) {
    return p;
  }
  if (Lexer.number_starters[s.charAt(0)]) {
    int ch=0;
    if ((s.charAt(ch) == '+') || (s.charAt(ch) == '-'))     ch++;
    while (ch < s.length() && Character.isDigit(s.charAt(ch)))     ch++;
    if (ch == s.length() && Character.isDigit(s.charAt(ch - 1)))     p.possible_ic=true;
    if (ch < s.length() && s.charAt(ch) == '.') {
      ch++;
      while (ch < s.length() && Character.isDigit(s.charAt(ch)))       ch++;
      if (ch < s.length() && (s.charAt(ch) == 'e' || s.charAt(ch) == 'E')) {
        ch++;
        if (ch < s.length() && (s.charAt(ch) == '+' || s.charAt(ch) == '-'))         ch++;
        while (ch < s.length() && Character.isDigit(s.charAt(ch)))         ch++;
      }
      if (ch == s.length())       p.possible_fc=true;
    }
  }
  boolean all_alphanum=true;
  for (int i=0; i < s.length(); ++i) {
    final char c=s.charAt(i);
    if (!isConstituentChar(c)) {
      return p;
    }
    all_alphanum=all_alphanum && Character.isLetterOrDigit(c);
  }
  if (all_alphanum || (s.length() > LENGTH_OF_LONGEST_SPECIAL_LEXEME) || ((s.length() == 1) && (s.charAt(0) == '*'))) {
    p.rereadable=true;
  }
  p.possible_sc=true;
  if ((s.charAt(0) == '<') && (s.charAt(s.length() - 1) == '>')) {
    p.possible_var=true;
  }
  final int idStartIndex=s.charAt(0) == '@' ? 1 : 0;
  final char idStart=s.charAt(idStartIndex);
  if (s.length() > 1 && Character.isLetter(idStart) && Character.isUpperCase(idStart)) {
    int i=idStartIndex + 1;
    while (i < s.length() && Character.isDigit(s.charAt(i))) {
      ++i;
    }
    p.possible_id=i == s.length();
  }
  return p;
}",0.8422818791946308
12236,"/** 
 * Formattable implementation for symbolic constants. Use in conjunction with the %s format. Since the csoar kernel uses rereadable==true in 90%  of calls to symbol_to_string(), we'll make that the default format. To  get the raw format, use the alternate, i.e. ""%#s"". <p>print.cpp:216:symbol_to_string / SYM_CONSTANT_SYMBOL_TYPE
 * @see java.util.Formattable#formatTo(java.util.Formatter,int,int,int)
 */
@Override public void formatTo(Formatter formatter,int flags,int width,int precision){
  final boolean rereadable=(FormattableFlags.ALTERNATE & flags) == 0;
  final String stringToWrite;
  if (rereadable) {
    final PossibleSymbolTypes possible=Lexer.determine_possible_symbol_types_for_string(getValue());
    final boolean hasAngleBracket=getValue().startsWith(""String_Node_Str"") || getValue().startsWith(""String_Node_Str"");
    if (!possible.possible_sc || possible.possible_var || possible.possible_ic|| possible.possible_fc|| !possible.rereadable|| hasAngleBracket) {
      stringToWrite=StringTools.string_to_escaped_string(getValue(),'|');
    }
 else {
      stringToWrite=getValue();
    }
  }
 else {
    stringToWrite=getValue();
  }
  try {
    formatter.out().append(stringToWrite);
  }
 catch (  IOException e) {
  }
}","/** 
 * Formattable implementation for symbolic constants. Use in conjunction with the %s format. Since the csoar kernel uses rereadable==true in 90%  of calls to symbol_to_string(), we'll make that the default format. To  get the raw format, use the alternate, i.e. ""%#s"". <p>print.cpp:216:symbol_to_string / SYM_CONSTANT_SYMBOL_TYPE
 * @see java.util.Formattable#formatTo(java.util.Formatter,int,int,int)
 */
@Override public void formatTo(Formatter formatter,int flags,int width,int precision){
  final boolean rereadable=(FormattableFlags.ALTERNATE & flags) == 0;
  final String stringToWrite;
  if (rereadable) {
    final PossibleSymbolTypes possible=Lexer.determine_possible_symbol_types_for_string(getValue());
    final boolean hasAngleBracket=getValue().startsWith(""String_Node_Str"") || getValue().startsWith(""String_Node_Str"");
    if (!possible.possible_sc || possible.possible_id || possible.possible_var|| possible.possible_ic|| possible.possible_fc|| !possible.rereadable|| hasAngleBracket) {
      stringToWrite=StringTools.string_to_escaped_string(getValue(),'|');
    }
 else {
      stringToWrite=getValue();
    }
  }
 else {
    stringToWrite=getValue();
  }
  try {
    formatter.out().append(stringToWrite);
  }
 catch (  IOException e) {
  }
}",0.9900438072481084
12237,"@Test public void testFormatToWhenStringContainsPercent(){
  final SymbolFactoryImpl syms=new SymbolFactoryImpl();
  final StringSymbol s=syms.createString(""String_Node_Str"");
  assertEquals(""String_Node_Str"",s.toString());
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",s));
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",s));
}","@Test public void testFormatToWhenStringContainsPercent(){
  final StringSymbol s=syms.createString(""String_Node_Str"");
  assertEquals(""String_Node_Str"",s.toString());
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",s));
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",s));
}",0.9169139465875372
12238,"/** 
 * Examines the preferences for a given slot, and returns an impasse type for the slot. The argument ""result_candidates"" is set to a list of candidate values for the slot--if the returned impasse type is NONE_IMPASSE_TYPE, this is the set of winners; otherwise it is the set of tied, conflicted, or constraint-failured values. This list of values is a list of preferences for those values, linked via the ""next_candidate"" field on each preference structure. If there is more than one preference for a given value, only one is returned in the result_candidates, with (first) require preferences being preferred over acceptable preferences, and (second) preferences from higher match goals being preferred over those from lower match goals. <p>BUGBUG There is a problem here: since the require/acceptable priority takes precedence over the match goal level priority, it's possible that we could return a require preference from lower in the goal stack than some acceptable preference. If the goal stack gets popped soon afterwards (i.e., before the next time the slot is re-decided, I think), we would be left with a WME still in WM (not GC'd, because of the acceptable preference higher up) but with a trace pointing to a deallocated require preference. This case is very obsure and unlikely to come up, but it could easily cause a core dump or worse. <p>decide.cpp:840:run_preference_semantics
 * @param s
 * @param result_candidates
 * @param consistency (defaulted to false in CSoar)
 * @param predict  (defaulted to false in CSoar)
 * @return
 */
private ImpasseType run_preference_semantics(Slot s,ByRef<Preference> result_candidates,boolean consistency,boolean predict){
  if (s.getAllPreferences() == null) {
    if (!s.isa_context_slot)     tempMemory.mark_slot_for_possible_removal(s);
    result_candidates.value=null;
    return ImpasseType.NONE;
  }
  if (!s.isa_context_slot) {
    if (decisionManip.select_get_operator() != null) {
      final Preference force_result=decisionManip.select_force(s.getPreferencesByType(PreferenceType.ACCEPTABLE),!predict);
      if (force_result != null) {
        result_candidates.value=force_result;
        if (!predict && rl.rl_enabled()) {
          exploration.exploration_compute_value_of_candidate(force_result,s,0);
          rl.rl_perform_update(force_result.numeric_value,s.id);
        }
        return ImpasseType.NONE;
      }
 else {
        context.getPrinter().warn(""String_Node_Str"");
      }
    }
  }
  if (s.getPreferencesByType(PreferenceType.REQUIRE) != null) {
    return require_preference_semantics(s,result_candidates);
  }
  for (Preference p=s.getPreferencesByType(PreferenceType.ACCEPTABLE); p != null; p=p.next)   p.value.decider_flag=DeciderFlag.CANDIDATE;
  for (Preference p=s.getPreferencesByType(PreferenceType.PROHIBIT); p != null; p=p.next)   p.value.decider_flag=DeciderFlag.NOTHING;
  for (Preference p=s.getPreferencesByType(PreferenceType.REJECT); p != null; p=p.next)   p.value.decider_flag=DeciderFlag.NOTHING;
  Preference candidates=null;
  for (Preference p=s.getPreferencesByType(PreferenceType.ACCEPTABLE); p != null; p=p.next) {
    if (p.value.decider_flag == DeciderFlag.CANDIDATE) {
      p.next_candidate=candidates;
      candidates=p;
      p.value.decider_flag=DeciderFlag.NOTHING;
    }
  }
  if (!s.isa_context_slot) {
    result_candidates.value=candidates;
    return ImpasseType.NONE;
  }
  if ((candidates == null) || (candidates.next_candidate == null)) {
    result_candidates.value=candidates;
    if (!consistency && rl.rl_enabled() && candidates != null) {
      exploration.exploration_compute_value_of_candidate(candidates,s,0);
      rl.rl_perform_update(candidates.numeric_value,s.id);
    }
    return ImpasseType.NONE;
  }
  if (s.getPreferencesByType(PreferenceType.BETTER) != null || s.getPreferencesByType(PreferenceType.WORSE) != null) {
    for (Preference p=s.getPreferencesByType(PreferenceType.BETTER); p != null; p=p.next) {
      p.value.decider_flag=DeciderFlag.NOTHING;
      p.referent.decider_flag=DeciderFlag.NOTHING;
    }
    for (Preference p=s.getPreferencesByType(PreferenceType.WORSE); p != null; p=p.next) {
      p.value.decider_flag=DeciderFlag.NOTHING;
      p.referent.decider_flag=DeciderFlag.NOTHING;
    }
    for (Preference cand=candidates; cand != null; cand=cand.next_candidate) {
      cand.value.decider_flag=DeciderFlag.CANDIDATE;
    }
    for (Preference p=s.getPreferencesByType(PreferenceType.BETTER); p != null; p=p.next) {
      final SymbolImpl j=p.value;
      final SymbolImpl k=p.referent;
      if (j == k)       continue;
      if (j.decider_flag.isSomething() && k.decider_flag.isSomething()) {
        if (k.decider_flag != DeciderFlag.CONFLICTED)         k.decider_flag=DeciderFlag.FORMER_CANDIDATE;
        if ((j.decider_flag != DeciderFlag.CONFLICTED) || (k.decider_flag != DeciderFlag.CONFLICTED)) {
          for (Preference p2=s.getPreferencesByType(PreferenceType.BETTER); p2 != null; p2=p2.next)           if ((p2.value == k) && (p2.referent == j)) {
            j.decider_flag=DeciderFlag.CONFLICTED;
            k.decider_flag=DeciderFlag.CONFLICTED;
            break;
          }
          for (Preference p2=s.getPreferencesByType(PreferenceType.WORSE); p2 != null; p2=p2.next)           if ((p2.value == j) && (p2.referent == k)) {
            j.decider_flag=DeciderFlag.CONFLICTED;
            k.decider_flag=DeciderFlag.CONFLICTED;
            break;
          }
        }
      }
    }
    for (Preference p=s.getPreferencesByType(PreferenceType.WORSE); p != null; p=p.next) {
      final SymbolImpl j=p.value;
      final SymbolImpl k=p.referent;
      if (j == k)       continue;
      if (j.decider_flag.isSomething() && k.decider_flag.isSomething()) {
        if (j.decider_flag != DeciderFlag.CONFLICTED)         j.decider_flag=DeciderFlag.FORMER_CANDIDATE;
        if ((j.decider_flag != DeciderFlag.CONFLICTED) || (k.decider_flag != DeciderFlag.CONFLICTED)) {
          for (Preference p2=s.getPreferencesByType(PreferenceType.WORSE); p2 != null; p2=p2.next)           if ((p2.value == k) && (p2.referent == j)) {
            j.decider_flag=DeciderFlag.CONFLICTED;
            k.decider_flag=DeciderFlag.CONFLICTED;
            break;
          }
        }
      }
    }
    Preference cand=null, prev_cand=null;
    for (cand=candidates; cand != null; cand=cand.next_candidate)     if (cand.value.decider_flag == DeciderFlag.CONFLICTED)     break;
    if (cand != null) {
      prev_cand=null;
      cand=candidates;
      while (cand != null) {
        if (cand.value.decider_flag != DeciderFlag.CONFLICTED) {
          if (prev_cand != null)           prev_cand.next_candidate=cand.next_candidate;
 else           candidates=cand.next_candidate;
        }
 else {
          prev_cand=cand;
        }
        cand=cand.next_candidate;
      }
      result_candidates.value=candidates;
      return ImpasseType.CONFLICT;
    }
    prev_cand=null;
    cand=candidates;
    while (cand != null) {
      if (cand.value.decider_flag == DeciderFlag.FORMER_CANDIDATE) {
        if (prev_cand != null)         prev_cand.next_candidate=cand.next_candidate;
 else         candidates=cand.next_candidate;
      }
 else {
        prev_cand=cand;
      }
      cand=cand.next_candidate;
    }
  }
  if (s.getPreferencesByType(PreferenceType.BEST) != null) {
    Preference cand, prev_cand;
    for (cand=candidates; cand != null; cand=cand.next_candidate)     cand.value.decider_flag=DeciderFlag.NOTHING;
    for (Preference p=s.getPreferencesByType(PreferenceType.BEST); p != null; p=p.next)     p.value.decider_flag=DeciderFlag.BEST;
    prev_cand=null;
    for (cand=candidates; cand != null; cand=cand.next_candidate)     if (cand.value.decider_flag == DeciderFlag.BEST) {
      if (prev_cand != null)       prev_cand.next_candidate=cand;
 else       candidates=cand;
      prev_cand=cand;
    }
    if (prev_cand != null)     prev_cand.next_candidate=null;
  }
  if (s.getPreferencesByType(PreferenceType.WORST) != null) {
    Preference cand, prev_cand;
    for (cand=candidates; cand != null; cand=cand.next_candidate)     cand.value.decider_flag=DeciderFlag.NOTHING;
    for (Preference p=s.getPreferencesByType(PreferenceType.WORST); p != null; p=p.next)     p.value.decider_flag=DeciderFlag.WORST;
    prev_cand=null;
    for (cand=candidates; cand != null; cand=cand.next_candidate)     if (cand.value.decider_flag != DeciderFlag.WORST) {
      if (prev_cand != null)       prev_cand.next_candidate=cand;
 else       candidates=cand;
      prev_cand=cand;
    }
    if (prev_cand != null)     prev_cand.next_candidate=null;
  }
  if (candidates == null || candidates.next_candidate == null) {
    result_candidates.value=candidates;
    if (!consistency && rl.rl_enabled() && candidates != null) {
      exploration.exploration_compute_value_of_candidate(candidates,s,0);
      rl.rl_perform_update(candidates.numeric_value,s.id);
    }
    return ImpasseType.NONE;
  }
  for (Preference cand=candidates; cand != null; cand=cand.next_candidate)   cand.value.decider_flag=DeciderFlag.NOTHING;
  for (Preference p=s.getPreferencesByType(PreferenceType.UNARY_INDIFFERENT); p != null; p=p.next)   p.value.decider_flag=DeciderFlag.UNARY_INDIFFERENT;
  for (Preference p=s.getPreferencesByType(PreferenceType.NUMERIC_INDIFFERENT); p != null; p=p.next)   p.value.decider_flag=DeciderFlag.UNARY_INDIFFERENT_CONSTANT;
  for (Preference p=s.getPreferencesByType(PreferenceType.BINARY_INDIFFERENT); p != null; p=p.next) {
    if ((p.referent.asInteger() != null) || (p.referent.asDouble() != null))     p.value.decider_flag=DeciderFlag.UNARY_INDIFFERENT_CONSTANT;
  }
  boolean not_all_indifferent=false;
  for (Preference cand=candidates; cand != null; cand=cand.next_candidate) {
    if (cand.value.decider_flag == DeciderFlag.UNARY_INDIFFERENT)     continue;
 else     if (cand.value.decider_flag == DeciderFlag.UNARY_INDIFFERENT_CONSTANT)     continue;
    for (Preference p=candidates; p != null; p=p.next_candidate) {
      if (p == cand)       continue;
      boolean match_found=false;
      for (Preference p2=s.getPreferencesByType(PreferenceType.BINARY_INDIFFERENT); p2 != null; p2=p2.next) {
        if (((p2.value == cand.value) && (p2.referent == p.value)) || ((p2.value == p.value) && (p2.referent == cand.value))) {
          match_found=true;
          break;
        }
      }
      if (!match_found) {
        not_all_indifferent=true;
        break;
      }
    }
    if (not_all_indifferent)     break;
  }
  if (!not_all_indifferent) {
    if (!consistency) {
      result_candidates.value=exploration.exploration_choose_according_to_policy(s,candidates);
      result_candidates.value.next_candidate=null;
    }
 else     result_candidates.value=candidates;
    return ImpasseType.NONE;
  }
  if (s.isa_context_slot) {
    result_candidates.value=candidates;
    return ImpasseType.TIE;
  }
  for (Preference cand=candidates; cand != null; cand=cand.next_candidate)   cand.value.decider_flag=DeciderFlag.NOTHING;
  for (Preference p=s.getPreferencesByType(PreferenceType.UNARY_PARALLEL); p != null; p=p.next)   p.value.decider_flag=DeciderFlag.UNARY_PARALLEL;
  boolean not_all_parallel=false;
  for (Preference cand=candidates; cand != null; cand=cand.next_candidate) {
    if (cand.value.decider_flag == DeciderFlag.UNARY_PARALLEL)     continue;
    for (Preference p=candidates; p != null; p=p.next_candidate) {
      if (p == cand)       continue;
      boolean match_found=false;
      for (Preference p2=s.getPreferencesByType(PreferenceType.BINARY_PARALLEL); p2 != null; p2=p2.next) {
        if (((p2.value == cand.value) && (p2.referent == p.value)) || ((p2.value == p.value) && (p2.referent == cand.value))) {
          match_found=true;
          break;
        }
      }
      if (!match_found) {
        not_all_parallel=true;
        break;
      }
    }
    if (not_all_parallel)     break;
  }
  result_candidates.value=candidates;
  if (!not_all_parallel) {
    return ImpasseType.NONE;
  }
  return ImpasseType.TIE;
}","/** 
 * Examines the preferences for a given slot, and returns an impasse type for the slot. The argument ""result_candidates"" is set to a list of candidate values for the slot--if the returned impasse type is NONE_IMPASSE_TYPE, this is the set of winners; otherwise it is the set of tied, conflicted, or constraint-failured values. This list of values is a list of preferences for those values, linked via the ""next_candidate"" field on each preference structure. If there is more than one preference for a given value, only one is returned in the result_candidates, with (first) require preferences being preferred over acceptable preferences, and (second) preferences from higher match goals being preferred over those from lower match goals. <p>BUGBUG There is a problem here: since the require/acceptable priority takes precedence over the match goal level priority, it's possible that we could return a require preference from lower in the goal stack than some acceptable preference. If the goal stack gets popped soon afterwards (i.e., before the next time the slot is re-decided, I think), we would be left with a WME still in WM (not GC'd, because of the acceptable preference higher up) but with a trace pointing to a deallocated require preference. This case is very obsure and unlikely to come up, but it could easily cause a core dump or worse. <p>decide.cpp:840:run_preference_semantics
 * @param s
 * @param result_candidates
 * @param consistency (defaulted to false in CSoar)
 * @param predict  (defaulted to false in CSoar)
 * @return
 */
private ImpasseType run_preference_semantics(Slot s,ByRef<Preference> result_candidates,boolean consistency,boolean predict){
  if (s.getAllPreferences() == null) {
    if (!s.isa_context_slot)     tempMemory.mark_slot_for_possible_removal(s);
    result_candidates.value=null;
    return ImpasseType.NONE;
  }
  if (!s.isa_context_slot) {
    if (decisionManip.select_get_operator() != null) {
      final Preference force_result=decisionManip.select_force(s.getPreferencesByType(PreferenceType.ACCEPTABLE),!predict);
      if (force_result != null) {
        result_candidates.value=force_result;
        if (!predict && rl.rl_enabled()) {
          exploration.exploration_compute_value_of_candidate(force_result,s,0);
          rl.rl_perform_update(force_result.numeric_value,s.id);
        }
        return ImpasseType.NONE;
      }
 else {
        context.getPrinter().warn(""String_Node_Str"");
      }
    }
  }
  if (s.getPreferencesByType(PreferenceType.REQUIRE) != null) {
    return require_preference_semantics(s,result_candidates);
  }
  for (Preference p=s.getPreferencesByType(PreferenceType.ACCEPTABLE); p != null; p=p.next)   p.value.decider_flag=DeciderFlag.CANDIDATE;
  for (Preference p=s.getPreferencesByType(PreferenceType.PROHIBIT); p != null; p=p.next)   p.value.decider_flag=DeciderFlag.NOTHING;
  for (Preference p=s.getPreferencesByType(PreferenceType.REJECT); p != null; p=p.next)   p.value.decider_flag=DeciderFlag.NOTHING;
  Preference candidates=null;
  for (Preference p=s.getPreferencesByType(PreferenceType.ACCEPTABLE); p != null; p=p.next) {
    if (p.value.decider_flag == DeciderFlag.CANDIDATE) {
      p.next_candidate=candidates;
      candidates=p;
      p.value.decider_flag=DeciderFlag.NOTHING;
    }
  }
  if (!s.isa_context_slot) {
    result_candidates.value=candidates;
    return ImpasseType.NONE;
  }
  if ((candidates == null) || (candidates.next_candidate == null)) {
    result_candidates.value=candidates;
    if (!consistency && rl.rl_enabled() && candidates != null) {
      exploration.exploration_compute_value_of_candidate(candidates,s,0);
      rl.rl_perform_update(candidates.numeric_value,s.id);
    }
    return ImpasseType.NONE;
  }
  if (NEW_PREFERENCES_SCHEME) {
    if (s.getPreferencesByType(PreferenceType.BETTER) != null || s.getPreferencesByType(PreferenceType.WORSE) != null) {
      for (Preference p=s.getPreferencesByType(PreferenceType.BETTER); p != null; p=p.next) {
        p.value.decider_flag=DeciderFlag.NOTHING;
        p.referent.decider_flag=DeciderFlag.NOTHING;
      }
      for (Preference p=s.getPreferencesByType(PreferenceType.WORSE); p != null; p=p.next) {
        p.value.decider_flag=DeciderFlag.NOTHING;
        p.referent.decider_flag=DeciderFlag.NOTHING;
      }
      for (Preference cand=candidates; cand != null; cand=cand.next_candidate) {
        cand.value.decider_flag=DeciderFlag.CANDIDATE;
      }
      for (Preference p=s.getPreferencesByType(PreferenceType.BETTER); p != null; p=p.next) {
        final SymbolImpl j=p.value;
        final SymbolImpl k=p.referent;
        if (j == k)         continue;
        if (j.decider_flag.isSomething() && k.decider_flag.isSomething()) {
          if (j.decider_flag == DeciderFlag.CANDIDATE || k.decider_flag == DeciderFlag.CANDIDATE)           k.decider_flag=DeciderFlag.CONFLICTED;
        }
      }
      for (Preference p=s.getPreferencesByType(PreferenceType.WORSE); p != null; p=p.next) {
        final SymbolImpl j=p.value;
        final SymbolImpl k=p.referent;
        if (j == k)         continue;
        if (j.decider_flag.isSomething() && k.decider_flag.isSomething()) {
          if (j.decider_flag == DeciderFlag.CANDIDATE || k.decider_flag == DeciderFlag.CANDIDATE)           j.decider_flag=DeciderFlag.CONFLICTED;
        }
      }
      Preference cand=null, prev_cand=null;
      for (cand=candidates; cand != null; cand=cand.next_candidate) {
        if (cand.value.decider_flag == DeciderFlag.CANDIDATE)         break;
      }
      if (cand == null) {
        prev_cand=null;
        cand=candidates;
        while (cand != null) {
          if (cand.value.decider_flag != DeciderFlag.CONFLICTED) {
            if (prev_cand != null)             prev_cand.next_candidate=cand.next_candidate;
 else             candidates=cand.next_candidate;
          }
 else {
            prev_cand=cand;
          }
          cand=cand.next_candidate;
        }
        result_candidates.value=candidates;
        return ImpasseType.CONFLICT;
      }
      prev_cand=null;
      cand=candidates;
      while (cand != null) {
        if (cand.value.decider_flag == DeciderFlag.CONFLICTED) {
          if (prev_cand != null)           prev_cand.next_candidate=cand.next_candidate;
 else           candidates=cand.next_candidate;
        }
 else {
          prev_cand=cand;
        }
        cand=cand.next_candidate;
      }
    }
  }
 else {
    if (s.getPreferencesByType(PreferenceType.BETTER) != null || s.getPreferencesByType(PreferenceType.WORSE) != null) {
      for (Preference p=s.getPreferencesByType(PreferenceType.BETTER); p != null; p=p.next) {
        p.value.decider_flag=DeciderFlag.NOTHING;
        p.referent.decider_flag=DeciderFlag.NOTHING;
      }
      for (Preference p=s.getPreferencesByType(PreferenceType.WORSE); p != null; p=p.next) {
        p.value.decider_flag=DeciderFlag.NOTHING;
        p.referent.decider_flag=DeciderFlag.NOTHING;
      }
      for (Preference cand=candidates; cand != null; cand=cand.next_candidate) {
        cand.value.decider_flag=DeciderFlag.CANDIDATE;
      }
      for (Preference p=s.getPreferencesByType(PreferenceType.BETTER); p != null; p=p.next) {
        final SymbolImpl j=p.value;
        final SymbolImpl k=p.referent;
        if (j == k)         continue;
        if (j.decider_flag.isSomething() && k.decider_flag.isSomething()) {
          if (k.decider_flag != DeciderFlag.CONFLICTED)           k.decider_flag=DeciderFlag.FORMER_CANDIDATE;
          if ((j.decider_flag != DeciderFlag.CONFLICTED) || (k.decider_flag != DeciderFlag.CONFLICTED)) {
            for (Preference p2=s.getPreferencesByType(PreferenceType.BETTER); p2 != null; p2=p2.next)             if ((p2.value == k) && (p2.referent == j)) {
              j.decider_flag=DeciderFlag.CONFLICTED;
              k.decider_flag=DeciderFlag.CONFLICTED;
              break;
            }
            for (Preference p2=s.getPreferencesByType(PreferenceType.WORSE); p2 != null; p2=p2.next)             if ((p2.value == j) && (p2.referent == k)) {
              j.decider_flag=DeciderFlag.CONFLICTED;
              k.decider_flag=DeciderFlag.CONFLICTED;
              break;
            }
          }
        }
      }
      for (Preference p=s.getPreferencesByType(PreferenceType.WORSE); p != null; p=p.next) {
        final SymbolImpl j=p.value;
        final SymbolImpl k=p.referent;
        if (j == k)         continue;
        if (j.decider_flag.isSomething() && k.decider_flag.isSomething()) {
          if (j.decider_flag != DeciderFlag.CONFLICTED)           j.decider_flag=DeciderFlag.FORMER_CANDIDATE;
          if ((j.decider_flag != DeciderFlag.CONFLICTED) || (k.decider_flag != DeciderFlag.CONFLICTED)) {
            for (Preference p2=s.getPreferencesByType(PreferenceType.WORSE); p2 != null; p2=p2.next)             if ((p2.value == k) && (p2.referent == j)) {
              j.decider_flag=DeciderFlag.CONFLICTED;
              k.decider_flag=DeciderFlag.CONFLICTED;
              break;
            }
          }
        }
      }
      Preference cand=null, prev_cand=null;
      for (cand=candidates; cand != null; cand=cand.next_candidate)       if (cand.value.decider_flag == DeciderFlag.CONFLICTED)       break;
      if (cand != null) {
        prev_cand=null;
        cand=candidates;
        while (cand != null) {
          if (cand.value.decider_flag != DeciderFlag.CONFLICTED) {
            if (prev_cand != null)             prev_cand.next_candidate=cand.next_candidate;
 else             candidates=cand.next_candidate;
          }
 else {
            prev_cand=cand;
          }
          cand=cand.next_candidate;
        }
        result_candidates.value=candidates;
        return ImpasseType.CONFLICT;
      }
      prev_cand=null;
      cand=candidates;
      while (cand != null) {
        if (cand.value.decider_flag == DeciderFlag.FORMER_CANDIDATE) {
          if (prev_cand != null)           prev_cand.next_candidate=cand.next_candidate;
 else           candidates=cand.next_candidate;
        }
 else {
          prev_cand=cand;
        }
        cand=cand.next_candidate;
      }
    }
  }
  if (s.getPreferencesByType(PreferenceType.BEST) != null) {
    Preference cand, prev_cand;
    for (cand=candidates; cand != null; cand=cand.next_candidate)     cand.value.decider_flag=DeciderFlag.NOTHING;
    for (Preference p=s.getPreferencesByType(PreferenceType.BEST); p != null; p=p.next)     p.value.decider_flag=DeciderFlag.BEST;
    prev_cand=null;
    for (cand=candidates; cand != null; cand=cand.next_candidate)     if (cand.value.decider_flag == DeciderFlag.BEST) {
      if (prev_cand != null)       prev_cand.next_candidate=cand;
 else       candidates=cand;
      prev_cand=cand;
    }
    if (prev_cand != null)     prev_cand.next_candidate=null;
  }
  if (s.getPreferencesByType(PreferenceType.WORST) != null) {
    Preference cand, prev_cand;
    for (cand=candidates; cand != null; cand=cand.next_candidate)     cand.value.decider_flag=DeciderFlag.NOTHING;
    for (Preference p=s.getPreferencesByType(PreferenceType.WORST); p != null; p=p.next)     p.value.decider_flag=DeciderFlag.WORST;
    prev_cand=null;
    for (cand=candidates; cand != null; cand=cand.next_candidate)     if (cand.value.decider_flag != DeciderFlag.WORST) {
      if (prev_cand != null)       prev_cand.next_candidate=cand;
 else       candidates=cand;
      prev_cand=cand;
    }
    if (prev_cand != null)     prev_cand.next_candidate=null;
  }
  if (candidates == null || candidates.next_candidate == null) {
    result_candidates.value=candidates;
    if (!consistency && rl.rl_enabled() && candidates != null) {
      exploration.exploration_compute_value_of_candidate(candidates,s,0);
      rl.rl_perform_update(candidates.numeric_value,s.id);
    }
    return ImpasseType.NONE;
  }
  for (Preference cand=candidates; cand != null; cand=cand.next_candidate)   cand.value.decider_flag=DeciderFlag.NOTHING;
  for (Preference p=s.getPreferencesByType(PreferenceType.UNARY_INDIFFERENT); p != null; p=p.next)   p.value.decider_flag=DeciderFlag.UNARY_INDIFFERENT;
  for (Preference p=s.getPreferencesByType(PreferenceType.NUMERIC_INDIFFERENT); p != null; p=p.next)   p.value.decider_flag=DeciderFlag.UNARY_INDIFFERENT_CONSTANT;
  for (Preference p=s.getPreferencesByType(PreferenceType.BINARY_INDIFFERENT); p != null; p=p.next) {
    if ((p.referent.asInteger() != null) || (p.referent.asDouble() != null))     p.value.decider_flag=DeciderFlag.UNARY_INDIFFERENT_CONSTANT;
  }
  boolean not_all_indifferent=false;
  for (Preference cand=candidates; cand != null; cand=cand.next_candidate) {
    if (cand.value.decider_flag == DeciderFlag.UNARY_INDIFFERENT)     continue;
 else     if (cand.value.decider_flag == DeciderFlag.UNARY_INDIFFERENT_CONSTANT)     continue;
    for (Preference p=candidates; p != null; p=p.next_candidate) {
      if (p == cand)       continue;
      boolean match_found=false;
      for (Preference p2=s.getPreferencesByType(PreferenceType.BINARY_INDIFFERENT); p2 != null; p2=p2.next) {
        if (((p2.value == cand.value) && (p2.referent == p.value)) || ((p2.value == p.value) && (p2.referent == cand.value))) {
          match_found=true;
          break;
        }
      }
      if (!match_found) {
        not_all_indifferent=true;
        break;
      }
    }
    if (not_all_indifferent)     break;
  }
  if (!not_all_indifferent) {
    if (!consistency) {
      result_candidates.value=exploration.exploration_choose_according_to_policy(s,candidates);
      result_candidates.value.next_candidate=null;
    }
 else     result_candidates.value=candidates;
    return ImpasseType.NONE;
  }
  if (s.isa_context_slot) {
    result_candidates.value=candidates;
    return ImpasseType.TIE;
  }
  for (Preference cand=candidates; cand != null; cand=cand.next_candidate)   cand.value.decider_flag=DeciderFlag.NOTHING;
  for (Preference p=s.getPreferencesByType(PreferenceType.UNARY_PARALLEL); p != null; p=p.next)   p.value.decider_flag=DeciderFlag.UNARY_PARALLEL;
  boolean not_all_parallel=false;
  for (Preference cand=candidates; cand != null; cand=cand.next_candidate) {
    if (cand.value.decider_flag == DeciderFlag.UNARY_PARALLEL)     continue;
    for (Preference p=candidates; p != null; p=p.next_candidate) {
      if (p == cand)       continue;
      boolean match_found=false;
      for (Preference p2=s.getPreferencesByType(PreferenceType.BINARY_PARALLEL); p2 != null; p2=p2.next) {
        if (((p2.value == cand.value) && (p2.referent == p.value)) || ((p2.value == p.value) && (p2.referent == cand.value))) {
          match_found=true;
          break;
        }
      }
      if (!match_found) {
        not_all_parallel=true;
        break;
      }
    }
    if (not_all_parallel)     break;
  }
  result_candidates.value=candidates;
  if (!not_all_parallel) {
    return ImpasseType.NONE;
  }
  return ImpasseType.TIE;
}",0.8355885078776645
12239,"/** 
 * Execute the given callable in the agent thread, wait for its result and return it.
 * @param < V > return type
 * @param callable the callable to run
 * @param finish called after the callable is executed. Ignored if <code>null</code>.
 * @throws RuntimeException if an exception is thrown while waiting for theresult.
 */
public <V>void execute(final Callable<V> callable,final CompletionHandler<V> finish){
  execute(new Runnable(){
    @Override public void run(){
      try {
        final V result=callable.call();
        if (finish != null) {
          finish.finish(result);
        }
      }
 catch (      InterruptAgentException e) {
        throw e;
      }
catch (      Exception e) {
        e.printStackTrace();
        final Throwable cause=e.getCause();
        agent.getPrinter().error((cause != null ? cause.getMessage() : e.getMessage()) + ""String_Node_Str"");
      }
    }
  }
);
}","/** 
 * Schedule the given callable for execution in the agent thread and return immediately. This is the correct way to access the agent in a thread-safe manner without deadlocks.
 * @param < V > return type
 * @param callable the callable to run
 * @param finish called after the callable is executed. Ignored if <code>null</code>.
 * @throws RuntimeException if an exception is thrown while waiting for theresult.
 */
public <V>void execute(final Callable<V> callable,final CompletionHandler<V> finish){
  execute(new Runnable(){
    @Override public void run(){
      try {
        final V result=callable.call();
        if (finish != null) {
          finish.finish(result);
        }
      }
 catch (      InterruptAgentException e) {
        throw e;
      }
catch (      Exception e) {
        e.printStackTrace();
        final Throwable cause=e.getCause();
        agent.getPrinter().error((cause != null ? cause.getMessage() : e.getMessage()) + ""String_Node_Str"");
      }
    }
  }
);
}",0.8763102725366876
12240,"@Override public Void call() throws Exception {
  return null;
}","@Override public Void call() throws Exception {
  inputReady=true;
  return null;
}",0.8707482993197279
12241,"private synchronized boolean isDoneWaiting(){
  return agent.getAgent().getReasonForStop() != null || inputReady.get() || Thread.currentThread().isInterrupted();
}","private synchronized boolean isDoneWaiting(){
  return agent.getAgent().getReasonForStop() != null || inputReady || Thread.currentThread().isInterrupted();
}",0.98125
12242,"@Override public void onEvent(SoarEvent event){
  doWait();
}","@Override public void onEvent(SoarEvent event){
  inputReady=false;
}",0.8461538461538461
12243,"public void detach(){
  if (agent != null) {
    agent.getEvents().removeListener(null,inputReadyListener);
    agent.getEvents().removeListener(null,afterDecisionCycleListener);
    agent.getRhsFunctions().unregisterHandler(getName());
    if (oldHandler != null) {
      agent.getRhsFunctions().registerHandler(oldHandler);
      oldHandler=null;
    }
    agent=null;
  }
}","public void detach(){
  if (agent != null) {
    agent.getEvents().removeListener(null,inputReadyListener);
    agent.getEvents().removeListener(null,afterInputListener);
    agent.getEvents().removeListener(null,afterDecisionCycleListener);
    agent.getRhsFunctions().unregisterHandler(getName());
    if (oldHandler != null) {
      agent.getRhsFunctions().registerHandler(oldHandler);
      oldHandler=null;
    }
    agent=null;
  }
}",0.9226993865030676
12244,"private void doWait(){
  if (!requestedWaitInfo.waiting) {
    inputReady.set(false);
    return;
  }
synchronized (this) {
    waitInfo.set(requestedWaitInfo);
  }
  final long start=System.currentTimeMillis();
  final BlockingQueue<Runnable> commands=agent.getCommandQueue();
  boolean done=isDoneWaiting();
  while (!done) {
    try {
      final long remaining=requestedWaitInfo.timeout - (System.currentTimeMillis() - start);
      if (remaining <= 0) {
        done=true;
      }
      final Runnable command=commands.poll(remaining,TimeUnit.MILLISECONDS);
      if (command != null) {
        command.run();
        done=isDoneWaiting();
      }
 else {
        done=true;
      }
    }
 catch (    InterruptedException e) {
      done=true;
      Thread.currentThread().interrupt();
      break;
    }
  }
  requestedWaitInfo=WaitInfo.NOT_WAITING;
synchronized (this) {
    inputReady.set(false);
    waitInfo.set(WaitInfo.NOT_WAITING);
  }
}","private void doWait(){
  if (!requestedWaitInfo.waiting) {
    inputReady=false;
    return;
  }
synchronized (this) {
    waitInfo.set(requestedWaitInfo);
  }
  final long start=System.currentTimeMillis();
  final BlockingQueue<Runnable> commands=agent.getCommandQueue();
  boolean done=isDoneWaiting();
  while (!done) {
    try {
      final long remaining=requestedWaitInfo.timeout - (System.currentTimeMillis() - start);
      if (remaining <= 0) {
        done=true;
      }
      final Runnable command=commands.poll(remaining,TimeUnit.MILLISECONDS);
      if (command != null) {
        command.run();
        done=isDoneWaiting();
      }
 else {
        done=true;
      }
    }
 catch (    InterruptedException e) {
      done=true;
      Thread.currentThread().interrupt();
      break;
    }
  }
  requestedWaitInfo=WaitInfo.NOT_WAITING;
synchronized (this) {
    inputReady=false;
    waitInfo.set(WaitInfo.NOT_WAITING);
  }
}",0.982010582010582
12245,"private synchronized void setNewInputAvailable(){
  inputReady.set(true);
  if (waitInfo.get().waiting) {
    WaitRhsFunction.this.agent.execute(inputReadyCommand,null);
  }
}","private synchronized void setNewInputAvailable(){
  if (agent.isAgentThread()) {
    inputReady=true;
  }
 else {
    agent.execute(inputReadyCommand,null);
  }
}",0.7299703264094956
12246,"public void attach(ThreadedAgent agent){
  Arguments.checkNotNull(agent,""String_Node_Str"");
  if (this.agent != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.agent=agent;
  this.agent.getEvents().addListener(AsynchronousInputReadyEvent.class,inputReadyListener=new SoarEventListener(){
    @Override public void onEvent(    SoarEvent event){
      setNewInputAvailable();
    }
  }
);
  this.agent.getEvents().addListener(AfterDecisionCycleEvent.class,afterDecisionCycleListener=new SoarEventListener(){
    @Override public void onEvent(    SoarEvent event){
      doWait();
    }
  }
);
  this.agent.getProperties().setProvider(SoarProperties.WAIT_INFO,waitInfoProp);
  this.oldHandler=this.agent.getRhsFunctions().registerHandler(this);
}","public void attach(ThreadedAgent agent){
  Arguments.checkNotNull(agent,""String_Node_Str"");
  if (this.agent != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.agent=agent;
  this.agent.getEvents().addListener(AsynchronousInputReadyEvent.class,inputReadyListener=new SoarEventListener(){
    @Override public void onEvent(    SoarEvent event){
      setNewInputAvailable();
    }
  }
);
  this.agent.getEvents().addListener(AfterDecisionCycleEvent.class,afterDecisionCycleListener=new SoarEventListener(){
    @Override public void onEvent(    SoarEvent event){
      doWait();
    }
  }
);
  this.agent.getEvents().addListener(AfterInput.class,afterInputListener=new SoarEventListener(){
    @Override public void onEvent(    SoarEvent event){
      inputReady=false;
    }
  }
);
  this.agent.getProperties().setProvider(SoarProperties.WAIT_INFO,waitInfoProp);
  this.oldHandler=this.agent.getRhsFunctions().registerHandler(this);
}",0.8896591565569035
12247,"@Test(timeout=10000) public void testDoesNotWaitIfAsynchInputIsReadyAndInputPhaseHasntRunYet() throws Exception {
  this.agent.getProductions().loadProduction(""String_Node_Str"");
  this.agent.getInputOutput().asynchronousInputReady();
  final Object signal=new String(""String_Node_Str"");
  agent.execute(new Callable<Void>(){
    @Override public Void call() throws Exception {
      agent.runFor(2,RunType.DECISIONS);
      return null;
    }
  }
,new CompletionHandler<Void>(){
    @Override public void finish(    Void result){
synchronized (signal) {
        signal.notifyAll();
      }
    }
  }
);
synchronized (signal) {
    signal.wait();
  }
}","@Test(timeout=10000) public void testDoesNotWaitIfAsynchInputIsReadyAndInputPhaseHasntRunYet() throws Exception {
  agent.executeAndWait(new Callable<Void>(){
    @Override public Void call() throws Exception {
      agent.runFor(2,RunType.PHASES);
      return null;
    }
  }
,Long.MAX_VALUE,TimeUnit.MILLISECONDS);
  this.agent.getProductions().loadProduction(""String_Node_Str"");
  this.agent.getInputOutput().asynchronousInputReady();
  agent.executeAndWait(new Callable<Void>(){
    @Override public Void call() throws Exception {
      agent.runFor(2,RunType.DECISIONS);
      return null;
    }
  }
,Long.MAX_VALUE,TimeUnit.MILLISECONDS);
}",0.449576597382602
12248,"private void processArgs(String[] args,PrintPreferencesCommand ppc) throws SoarException {
  ppc.setWmeTraceType(WmeTraceType.NONE);
  ppc.setPrintProduction(false);
  ppc.setObject(false);
  final Decider decider=Adaptables.adapt(agent,Decider.class);
  ppc.setId(decider.bottom_goal);
  final PredefinedSymbols preSyms=Adaptables.adapt(agent,PredefinedSymbols.class);
  ppc.setAttr(preSyms.operator_symbol);
  final List<String> nonOpts=new ArrayList<String>();
  for (int i=1; i < args.length; ++i) {
    final String arg=args[i];
    if (""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
      ppc.setWmeTraceType(WmeTraceType.NONE);
    }
 else     if (""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
      ppc.setWmeTraceType(WmeTraceType.NONE);
      ppc.setPrintProduction(true);
    }
 else     if (""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
      ppc.setWmeTraceType(WmeTraceType.TIMETAG);
      ppc.setPrintProduction(true);
    }
 else     if (""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
      ppc.setWmeTraceType(WmeTraceType.FULL);
      ppc.setPrintProduction(true);
    }
 else     if (""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
      ppc.setObject(true);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      throw new SoarException(""String_Node_Str"" + arg);
    }
 else {
      nonOpts.add(arg);
    }
  }
  if (nonOpts.size() == 1 || nonOpts.size() == 2) {
    final String idArg=nonOpts.get(0);
    Symbol idSym=agent.readIdentifierOrContextVariable(idArg);
    if (idSym == null) {
      throw new SoarException(""String_Node_Str"" + idArg + ""String_Node_Str"");
    }
    final Identifier id=idSym.asIdentifier();
    if (id == null) {
      throw new SoarException(""String_Node_Str"" + idArg + ""String_Node_Str"");
    }
    ppc.setId(id);
    if (nonOpts.size() == 2) {
      final String attrArg=nonOpts.get(1);
      final Symbol attr=Symbols.readAttributeFromString(agent,attrArg);
      if (attr != null) {
        throw new SoarException(""String_Node_Str"" + attrArg + ""String_Node_Str"");
      }
      ppc.setAttr(attr);
    }
 else     if (!id.isGoal()) {
      ppc.setAttr(null);
    }
  }
 else   if (nonOpts.size() != 0) {
    throw new SoarException(""String_Node_Str"");
  }
}","private void processArgs(String[] args,PrintPreferencesCommand ppc) throws SoarException {
  ppc.setWmeTraceType(WmeTraceType.NONE);
  ppc.setPrintProduction(false);
  ppc.setObject(false);
  final Decider decider=Adaptables.adapt(agent,Decider.class);
  ppc.setId(decider.bottom_goal);
  final PredefinedSymbols preSyms=Adaptables.adapt(agent,PredefinedSymbols.class);
  ppc.setAttr(preSyms.operator_symbol);
  final List<String> nonOpts=new ArrayList<String>();
  for (int i=1; i < args.length; ++i) {
    final String arg=args[i];
    if (""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
      ppc.setWmeTraceType(WmeTraceType.NONE);
    }
 else     if (""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
      ppc.setWmeTraceType(WmeTraceType.NONE);
      ppc.setPrintProduction(true);
    }
 else     if (""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
      ppc.setWmeTraceType(WmeTraceType.TIMETAG);
      ppc.setPrintProduction(true);
    }
 else     if (""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
      ppc.setWmeTraceType(WmeTraceType.FULL);
      ppc.setPrintProduction(true);
    }
 else     if (""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
      ppc.setObject(true);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      throw new SoarException(""String_Node_Str"" + arg);
    }
 else {
      nonOpts.add(arg);
    }
  }
  if (nonOpts.size() == 1 || nonOpts.size() == 2) {
    final String idArg=nonOpts.get(0);
    Symbol idSym=agent.readIdentifierOrContextVariable(idArg);
    if (idSym == null) {
      throw new SoarException(""String_Node_Str"" + idArg + ""String_Node_Str"");
    }
    final Identifier id=idSym.asIdentifier();
    if (id == null) {
      throw new SoarException(""String_Node_Str"" + idArg + ""String_Node_Str"");
    }
    ppc.setId(id);
    if (nonOpts.size() == 2) {
      final String attrArg=nonOpts.get(1);
      final Symbol attr=Symbols.readAttributeFromString(agent,attrArg);
      if (attr == null) {
        throw new SoarException(""String_Node_Str"" + attrArg + ""String_Node_Str"");
      }
      ppc.setAttr(attr);
    }
 else     if (!id.isGoal()) {
      ppc.setAttr(null);
    }
  }
 else   if (nonOpts.size() != 0) {
    throw new SoarException(""String_Node_Str"");
  }
}",0.906824683285656
12249,"/** 
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
}","@Before public void setUp() throws Exception {
  this.agent=new Agent();
  this.agent.getTrace().disableAll();
  this.agent.initialize();
}",0.4229074889867841
12250,"@Test public void testThatRequiredAgentInternalsArePresent(){
  final Agent agent=new Agent();
  assertNotNull(""String_Node_Str"",Adaptables.adapt(agent,Decider.class));
  assertNotNull(""String_Node_Str"",Adaptables.adapt(agent,PredefinedSymbols.class));
}","@Test public void testThatRequiredAgentInternalsArePresent(){
  assertNotNull(""String_Node_Str"",Adaptables.adapt(agent,Decider.class));
  assertNotNull(""String_Node_Str"",Adaptables.adapt(agent,PredefinedSymbols.class));
}",0.9305263157894736
12251,"/** 
 * @throws java.lang.Exception
 */
@After public void tearDown() throws Exception {
}","@After public void tearDown() throws Exception {
  if (this.agent != null) {
    this.agent.dispose();
    this.agent=null;
  }
}",0.45662100456621
12252,"/** 
 * This is a utility routine which figures out what kind(s) of symbol a given string could represent. At entry: s, length_of_s represent the string. At exit: possible_xxx is set to TRUE/FALSE to indicate whether the given string could represent that kind of symbol; rereadable is set to TRUE indicating whether the lexer would read the given string as a symbol with exactly the same name (as opposed to treating it as a special lexeme like ""+"", changing upper to lower case, etc. <p>lexer.cpp:1225:determine_possible_symbol_types_for_string
 */
public static PossibleSymbolTypes determine_possible_symbol_types_for_string(String s){
  PossibleSymbolTypes p=new PossibleSymbolTypes();
  if (s.length() == 0) {
    return p;
  }
  if (Lexer.number_starters[s.charAt(0)]) {
    int ch=0;
    if ((s.charAt(ch) == '+') || (s.charAt(ch) == '-'))     ch++;
    while (ch < s.length() && Character.isDigit(s.charAt(ch)))     ch++;
    if (ch == s.length() && Character.isDigit(s.charAt(ch - 1)))     p.possible_ic=true;
    if (ch < s.length() && s.charAt(ch) == '.') {
      ch++;
      while (ch < s.length() && Character.isDigit(s.charAt(ch)))       ch++;
      if (ch < s.length() && (s.charAt(ch) == 'e' || s.charAt(ch) == 'E')) {
        ch++;
        if (ch < s.length() && (s.charAt(ch) == '+' || s.charAt(ch) == '-'))         ch++;
        while (ch < s.length() && Character.isDigit(s.charAt(ch)))         ch++;
      }
      if (ch == s.length())       p.possible_fc=true;
    }
  }
  for (int i=0; i < s.length(); ++i) {
    if (!isConstituentChar(s.charAt(i))) {
      return p;
    }
  }
  p.possible_sc=true;
  if ((s.charAt(0) == '<') && (s.charAt(s.length() - 1) == '>')) {
    p.possible_var=true;
  }
  boolean rereadability_questionable=false;
  boolean rereadability_dead=false;
  for (int i=0; i < s.length(); i++) {
    char ch=s.charAt(i);
    if (Character.isLowerCase(ch) || Character.isDigit(ch))     continue;
    if (Character.isUpperCase(ch)) {
      rereadability_dead=true;
      break;
    }
    rereadability_questionable=true;
  }
  if (!rereadability_dead) {
    if ((!rereadability_questionable) || (s.length() >= LENGTH_OF_LONGEST_SPECIAL_LEXEME) || ((s.length() == 1) && (s.charAt(0) == '*')))     p.rereadable=true;
  }
  if (Character.isLetter(s.charAt(0))) {
    int i=1;
    while (i < s.length() && Character.isDigit(s.charAt(i))) {
      ++i;
    }
    p.possible_id=i == s.length();
  }
  return p;
}","/** 
 * This is a utility routine which figures out what kind(s) of symbol a given string could represent. At entry: s, length_of_s represent the string. At exit: possible_xxx is set to TRUE/FALSE to indicate whether the given string could represent that kind of symbol; rereadable is set to TRUE indicating whether the lexer would read the given string as a symbol with exactly the same name (as opposed to treating it as a special lexeme like ""+"", changing upper to lower case, etc. <p>lexer.cpp:1225:determine_possible_symbol_types_for_string
 */
public static PossibleSymbolTypes determine_possible_symbol_types_for_string(String s){
  PossibleSymbolTypes p=new PossibleSymbolTypes();
  if (s.length() == 0) {
    return p;
  }
  if (Lexer.number_starters[s.charAt(0)]) {
    int ch=0;
    if ((s.charAt(ch) == '+') || (s.charAt(ch) == '-'))     ch++;
    while (ch < s.length() && Character.isDigit(s.charAt(ch)))     ch++;
    if (ch == s.length() && Character.isDigit(s.charAt(ch - 1)))     p.possible_ic=true;
    if (ch < s.length() && s.charAt(ch) == '.') {
      ch++;
      while (ch < s.length() && Character.isDigit(s.charAt(ch)))       ch++;
      if (ch < s.length() && (s.charAt(ch) == 'e' || s.charAt(ch) == 'E')) {
        ch++;
        if (ch < s.length() && (s.charAt(ch) == '+' || s.charAt(ch) == '-'))         ch++;
        while (ch < s.length() && Character.isDigit(s.charAt(ch)))         ch++;
      }
      if (ch == s.length())       p.possible_fc=true;
    }
  }
  for (int i=0; i < s.length(); ++i) {
    if (!isConstituentChar(s.charAt(i))) {
      return p;
    }
  }
  boolean rereadability_questionable=false;
  boolean rereadability_dead=false;
  for (int i=0; i < s.length(); i++) {
    char ch=s.charAt(i);
    if (Character.isLowerCase(ch) || Character.isDigit(ch))     continue;
    if (Character.isUpperCase(ch)) {
      rereadability_dead=true;
      break;
    }
    rereadability_questionable=true;
  }
  if (!rereadability_dead) {
    if ((!rereadability_questionable) || (s.length() >= LENGTH_OF_LONGEST_SPECIAL_LEXEME) || ((s.length() == 1) && (s.charAt(0) == '*')))     p.rereadable=true;
  }
  p.possible_sc=true;
  if ((s.charAt(0) == '<') && (s.charAt(s.length() - 1) == '>')) {
    p.possible_var=true;
  }
  if (Character.isLetter(s.charAt(0))) {
    int i=1;
    while (i < s.length() && Character.isDigit(s.charAt(i))) {
      ++i;
    }
    p.possible_id=i == s.length();
  }
  return p;
}",0.9259410801963992
12253,"public StringSymbolImpl getName(){
  return name;
}","/** 
 * @return the name of the RHS function
 */
public StringSymbol getName(){
  return name;
}",0.6394557823129252
12254,"@Override public void formatTo(Formatter formatter,int flags,int width,int precision){
  formatter.format(""String_Node_Str"",getName());
  for (  RhsValue v : arguments) {
    formatter.format(""String_Node_Str"",v);
  }
  formatter.format(""String_Node_Str"");
}","@Override public void formatTo(Formatter formatter,int flags,int width,int precision){
  final StringSymbol name=getName();
  if (""String_Node_Str"".equals(name.getValue()) || ""String_Node_Str"".equals(name.getValue())) {
    formatter.format(""String_Node_Str"",name.getValue());
  }
 else {
    formatter.format(""String_Node_Str"",name);
  }
  for (  RhsValue v : arguments) {
    formatter.format(""String_Node_Str"",v);
  }
  formatter.format(""String_Node_Str"");
}",0.5980528511821975
12255,"/** 
 * @return the standalone
 */
public boolean isStandalone(){
  return standalone;
}","/** 
 * @return true if the function is in a standalone context
 */
public boolean isStandalone(){
  return standalone;
}",0.8421052631578947
12256,"@Test public void testFunctionCallAfterLParen() throws Exception {
  OriginalParserImpl parser=createParser(""String_Node_Str"");
  RhsFunctionCall rfc=parser.parse_function_call_after_lparen(false);
  assertNotNull(rfc);
  verifyStringSymbol(rfc.getName(),""String_Node_Str"");
  List<RhsValue> args=rfc.getArguments();
  assertEquals(5,args.size());
  verifyIntSymbol(args.get(0).asSymbolValue().getSym(),1);
  verifyIntSymbol(args.get(1).asSymbolValue().getSym(),2);
  assertNotNull(args.get(2).asFunctionCall());
  verifyVariableSymbol(args.get(3).asSymbolValue().getSym(),""String_Node_Str"");
  verifyVariableSymbol(args.get(4).asSymbolValue().getSym(),""String_Node_Str"");
}","@Test public void testFunctionCallAfterLParen() throws Exception {
  OriginalParserImpl parser=createParser(""String_Node_Str"");
  RhsFunctionCall rfc=parser.parse_function_call_after_lparen(false);
  assertNotNull(rfc);
  verifyStringSymbol((SymbolImpl)rfc.getName(),""String_Node_Str"");
  List<RhsValue> args=rfc.getArguments();
  assertEquals(5,args.size());
  verifyIntSymbol(args.get(0).asSymbolValue().getSym(),1);
  verifyIntSymbol(args.get(1).asSymbolValue().getSym(),2);
  assertNotNull(args.get(2).asFunctionCall());
  verifyVariableSymbol(args.get(3).asSymbolValue().getSym(),""String_Node_Str"");
  verifyVariableSymbol(args.get(4).asSymbolValue().getSym(),""String_Node_Str"");
}",0.9911764705882352
12257,"/** 
 * Formattable implementation for symbolic constants. Use in conjunction with the %s format. Since the csoar kernel uses rereadable==true in 90%  of calls to symbol_to_string(), we'll make that the default format. To  get the raw format, use the alternate, i.e. ""%#s"". <p>print.cpp:216:symbol_to_string / SYM_CONSTANT_SYMBOL_TYPE
 * @see java.util.Formattable#formatTo(java.util.Formatter,int,int,int)
 */
@Override public void formatTo(Formatter formatter,int flags,int width,int precision){
  final boolean rereadable=(FormattableFlags.ALTERNATE & flags) == 0;
  if (!rereadable) {
    formatter.format(getValue());
    return;
  }
  final PossibleSymbolTypes possible=Lexer.determine_possible_symbol_types_for_string(getValue());
  final boolean hasAngleBracket=getValue().startsWith(""String_Node_Str"") || getValue().startsWith(""String_Node_Str"");
  if (!possible.possible_sc || possible.possible_var || possible.possible_ic|| possible.possible_fc|| !possible.rereadable|| hasAngleBracket) {
    formatter.format(StringTools.string_to_escaped_string(getValue(),'|'));
  }
 else {
    formatter.format(getValue());
  }
}","/** 
 * Formattable implementation for symbolic constants. Use in conjunction with the %s format. Since the csoar kernel uses rereadable==true in 90%  of calls to symbol_to_string(), we'll make that the default format. To  get the raw format, use the alternate, i.e. ""%#s"". <p>print.cpp:216:symbol_to_string / SYM_CONSTANT_SYMBOL_TYPE
 * @see java.util.Formattable#formatTo(java.util.Formatter,int,int,int)
 */
@Override public void formatTo(Formatter formatter,int flags,int width,int precision){
  final boolean rereadable=(FormattableFlags.ALTERNATE & flags) == 0;
  final String stringToWrite;
  if (rereadable) {
    final PossibleSymbolTypes possible=Lexer.determine_possible_symbol_types_for_string(getValue());
    final boolean hasAngleBracket=getValue().startsWith(""String_Node_Str"") || getValue().startsWith(""String_Node_Str"");
    if (!possible.possible_sc || possible.possible_var || possible.possible_ic|| possible.possible_fc|| !possible.rereadable|| hasAngleBracket) {
      stringToWrite=StringTools.string_to_escaped_string(getValue(),'|');
    }
 else {
      stringToWrite=getValue();
    }
  }
 else {
    stringToWrite=getValue();
  }
  try {
    formatter.out().append(stringToWrite);
  }
 catch (  IOException e) {
  }
}",0.8755799240826655
12258,"/** 
 * Test method for   {@link org.jsoar.kernel.symbols.StringSymbolImpl#formatTo(java.util.Formatter,int,int,int)}.
 */
@Test public void testFormatTo(){
  SymbolFactoryImpl syms=new SymbolFactoryImpl();
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",syms.createString(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",syms.createString(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",syms.createString(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",syms.createString(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",syms.createString(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",syms.createString(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",syms.createString(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",syms.createString(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",syms.createString(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",syms.createString(""String_Node_Str"")));
}","@Test public void testFormatTo(){
  SymbolFactoryImpl syms=new SymbolFactoryImpl();
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",syms.createString(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",syms.createString(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",syms.createString(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",syms.createString(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",syms.createString(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",syms.createString(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",syms.createString(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",syms.createString(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",syms.createString(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",String.format(""String_Node_Str"",syms.createString(""String_Node_Str"")));
}",0.9486000835771
12259,"public synchronized void setInteger(String path,int intVal){
  getNode(path).setIntValue(intVal);
}","public synchronized void setInteger(String path,int intVal){
  getNode(path).setIntValue(intVal);
  fireChangeEvent();
}",0.9041095890410958
12260,"public synchronized void clear(String path){
  getNode(path).clearValue();
}","public synchronized void clear(String path){
  getNode(path).clearValue();
  fireChangeEvent();
}",0.8786127167630058
12261,"public synchronized void remove(String path){
  removeNode(path);
}","public synchronized void remove(String path){
  removeNode(path);
  fireChangeEvent();
}",0.864516129032258
12262,"public synchronized void setDouble(String path,double doubleVal){
  getNode(path).setDoubleValue(doubleVal);
}","public synchronized void setDouble(String path,double doubleVal){
  getNode(path).setDoubleValue(doubleVal);
  fireChangeEvent();
}",0.9128630705394192
12263,"public synchronized void setString(String path,String strVal){
  getNode(path).setStringValue(strVal);
}","public synchronized void setString(String path,String strVal){
  getNode(path).setStringValue(strVal);
  fireChangeEvent();
}",0.9082969432314412
12264,"/** 
 * Set the source for this adapter. If a previous adapter was set, any WMEs created for that source are removed at the next input cycle.
 * @param source the new memory source for this adapter
 */
public void setSource(QMemory source){
synchronized (lock) {
    this.sourceChanged=this.sourceChanged | (this.source != source);
    this.source=source;
  }
}","/** 
 * Set the source for this adapter. If a previous adapter was set, any WMEs created for that source are removed at the next input cycle.
 * @param source the new memory source for this adapter
 */
public void setSource(QMemory source){
synchronized (lock) {
    if (this.source != null) {
      this.source.removeListener(this);
    }
    this.sourceChanged=this.sourceChanged | (this.source != source);
    this.source=source;
    if (this.source != null) {
      this.source.addListener(this);
    }
    if (sourceChanged && io != null) {
      io.asynchronousInputReady();
    }
  }
}",0.6274921301154249
12265,"private void synchronize(){
  if (sourceChanged) {
    removeAllWmes(io,memory);
    sourceChanged=false;
  }
  if (source == null) {
    return;
  }
  if (rootNode == null) {
    rootNode=new SoarMemoryNode(io.getInputLink());
  }
  Set<String> oldPaths=new HashSet<String>(memory.keySet());
  Set<String> newPaths=new HashSet<String>();
  Set<String> newInternalPaths=new HashSet<String>();
  for (  String fullPath : source.getPaths()) {
    String[] pathElements=fullPath.split(""String_Node_Str"");
    String tmp=""String_Node_Str"";
    for (int ix=0; ix < pathElements.length; ++ix) {
      if (ix > 0) {
        tmp+=""String_Node_Str"";
      }
      tmp+=pathElements[ix];
      newPaths.add(tmp);
      oldPaths.remove(tmp);
      if (ix < pathElements.length - 1) {
        newInternalPaths.add(tmp);
      }
    }
  }
  List<String> oldPathsByLength=new ArrayList<String>(oldPaths);
  Collections.sort(oldPathsByLength,decreasingLengthComparator);
  for (  String path : oldPathsByLength) {
    SoarMemoryNode oldNode=memory.remove(path);
    oldNode.remove(io);
  }
  List<String> newPathsByLength=new ArrayList<String>(newPaths);
  Collections.sort(newPathsByLength,increasingLengthComparator);
  for (  String path : newPathsByLength) {
    SoarMemoryNode oldNode=memory.get(path);
    SoarMemoryNode parentNode=memory.get(getParentPath(path));
    if (parentNode == null) {
      parentNode=rootNode;
    }
    String name=getNameFromPath(path);
    MemoryNode newNode;
    if (!newInternalPaths.contains(path)) {
      newNode=((DefaultQMemory)source).getNode(path);
    }
 else {
      newNode=new MemoryNode();
      newNode.clearValue();
    }
    if (oldNode == null) {
      oldNode=new SoarMemoryNode(name);
      memory.put(path,oldNode);
    }
    oldNode.setParentNode(parentNode);
    oldNode.synchronizeToMemoryNode(io,newNode);
  }
  io.asynchronousInputReady();
}","private void synchronize(){
  if (sourceChanged) {
    removeAllWmes(io,memory);
    sourceChanged=false;
  }
  if (source == null) {
    return;
  }
  if (rootNode == null) {
    rootNode=new SoarMemoryNode(io.getInputLink());
  }
  final Set<String> oldPaths=new HashSet<String>(memory.keySet());
  final Set<String> newPaths=new HashSet<String>();
  final Set<String> newInternalPaths=new HashSet<String>();
  for (  String fullPath : source.getPaths()) {
    final String[] pathElements=fullPath.split(""String_Node_Str"");
    String tmp=""String_Node_Str"";
    for (int ix=0; ix < pathElements.length; ++ix) {
      if (ix > 0) {
        tmp+=""String_Node_Str"";
      }
      tmp+=pathElements[ix];
      newPaths.add(tmp);
      oldPaths.remove(tmp);
      if (ix < pathElements.length - 1) {
        newInternalPaths.add(tmp);
      }
    }
  }
  final List<String> oldPathsByLength=new ArrayList<String>(oldPaths);
  Collections.sort(oldPathsByLength,decreasingLengthComparator);
  for (  String path : oldPathsByLength) {
    final SoarMemoryNode oldNode=memory.remove(path);
    oldNode.remove(io);
  }
  final List<String> newPathsByLength=new ArrayList<String>(newPaths);
  Collections.sort(newPathsByLength,increasingLengthComparator);
  for (  String path : newPathsByLength) {
    SoarMemoryNode oldNode=memory.get(path);
    SoarMemoryNode parentNode=memory.get(getParentPath(path));
    if (parentNode == null) {
      parentNode=rootNode;
    }
    final String name=getNameFromPath(path);
    final MemoryNode newNode;
    if (!newInternalPaths.contains(path)) {
      newNode=((DefaultQMemory)source).getNode(path);
    }
 else {
      newNode=new MemoryNode();
      newNode.clearValue();
    }
    if (oldNode == null) {
      oldNode=new SoarMemoryNode(name);
      memory.put(path,oldNode);
    }
    oldNode.setParentNode(parentNode);
    oldNode.synchronizeToMemoryNode(io,newNode);
  }
}",0.9776374638253092
12266,"/** 
 * This is a utility routine which figures out what kind(s) of symbol a given string could represent. At entry: s, length_of_s represent the string. At exit: possible_xxx is set to TRUE/FALSE to indicate whether the given string could represent that kind of symbol; rereadable is set to TRUE indicating whether the lexer would read the given string as a symbol with exactly the same name (as opposed to treating it as a special lexeme like ""+"", changing upper to lower case, etc. <p>lexer.cpp:1225:determine_possible_symbol_types_for_string
 */
public static PossibleSymbolTypes determine_possible_symbol_types_for_string(String s){
  PossibleSymbolTypes p=new PossibleSymbolTypes();
  if (s.length() == 0) {
    return p;
  }
  if (Lexer.number_starters[s.charAt(0)]) {
    try {
      Integer.parseInt(s);
      p.possible_ic=true;
    }
 catch (    NumberFormatException e) {
    }
    try {
      Float.parseFloat(s);
      p.possible_fc=s.indexOf('.') != -1;
    }
 catch (    NumberFormatException e) {
    }
  }
  for (int i=0; i < s.length(); ++i) {
    if (!isConstituentChar(s.charAt(i))) {
      return p;
    }
  }
  p.possible_sc=true;
  if ((s.charAt(0) == '<') && (s.charAt(s.length() - 1) == '>')) {
    p.possible_var=true;
  }
  boolean rereadability_questionable=false;
  boolean rereadability_dead=false;
  for (int i=0; i < s.length(); i++) {
    char ch=s.charAt(i);
    if (Character.isLowerCase(ch) || Character.isDigit(ch))     continue;
    if (Character.isUpperCase(ch)) {
      rereadability_dead=true;
      break;
    }
    rereadability_questionable=true;
  }
  if (!rereadability_dead) {
    if ((!rereadability_questionable) || (s.length() >= LENGTH_OF_LONGEST_SPECIAL_LEXEME) || ((s.length() == 1) && (s.charAt(0) == '*')))     p.rereadable=true;
  }
  if (Character.isLetter(s.charAt(0))) {
    int i=1;
    while (i < s.length() && Character.isDigit(s.charAt(i))) {
      ++i;
    }
    p.possible_id=i == s.length();
  }
  return p;
}","/** 
 * This is a utility routine which figures out what kind(s) of symbol a given string could represent. At entry: s, length_of_s represent the string. At exit: possible_xxx is set to TRUE/FALSE to indicate whether the given string could represent that kind of symbol; rereadable is set to TRUE indicating whether the lexer would read the given string as a symbol with exactly the same name (as opposed to treating it as a special lexeme like ""+"", changing upper to lower case, etc. <p>lexer.cpp:1225:determine_possible_symbol_types_for_string
 */
public static PossibleSymbolTypes determine_possible_symbol_types_for_string(String s){
  PossibleSymbolTypes p=new PossibleSymbolTypes();
  if (s.length() == 0) {
    return p;
  }
  if (Lexer.number_starters[s.charAt(0)]) {
    int ch=0;
    if ((s.charAt(ch) == '+') || (s.charAt(ch) == '-'))     ch++;
    while (ch < s.length() && Character.isDigit(s.charAt(ch)))     ch++;
    if (ch == s.length() && Character.isDigit(s.charAt(ch - 1)))     p.possible_ic=true;
    if (ch < s.length() && s.charAt(ch) == '.') {
      ch++;
      while (ch < s.length() && Character.isDigit(s.charAt(ch)))       ch++;
      if (ch < s.length() && (s.charAt(ch) == 'e' || s.charAt(ch) == 'E')) {
        ch++;
        if (ch < s.length() && (s.charAt(ch) == '+' || s.charAt(ch) == '-'))         ch++;
        while (ch < s.length() && Character.isDigit(s.charAt(ch)))         ch++;
      }
      if (ch == s.length())       p.possible_fc=true;
    }
  }
  for (int i=0; i < s.length(); ++i) {
    if (!isConstituentChar(s.charAt(i))) {
      return p;
    }
  }
  p.possible_sc=true;
  if ((s.charAt(0) == '<') && (s.charAt(s.length() - 1) == '>')) {
    p.possible_var=true;
  }
  boolean rereadability_questionable=false;
  boolean rereadability_dead=false;
  for (int i=0; i < s.length(); i++) {
    char ch=s.charAt(i);
    if (Character.isLowerCase(ch) || Character.isDigit(ch))     continue;
    if (Character.isUpperCase(ch)) {
      rereadability_dead=true;
      break;
    }
    rereadability_questionable=true;
  }
  if (!rereadability_dead) {
    if ((!rereadability_questionable) || (s.length() >= LENGTH_OF_LONGEST_SPECIAL_LEXEME) || ((s.length() == 1) && (s.charAt(0) == '*')))     p.rereadable=true;
  }
  if (Character.isLetter(s.charAt(0))) {
    int i=1;
    while (i < s.length() && Character.isDigit(s.charAt(i))) {
      ++i;
    }
    p.possible_id=i == s.length();
  }
  return p;
}",0.7959276018099547
12267,"/** 
 * reorder.cpp:398:restore_and_deallocate_saved_tests
 * @param value
 * @param tc
 * @param saved_tests
 */
private void restore_and_deallocate_saved_tests(Condition conds_list,Marker tc,SavedTest tests_to_restore){
  ListHead<Variable> new_vars=ListHead.newInstance();
  for (Condition cond=conds_list; cond != null; cond=cond.next) {
    if (cond.asConjunctiveNegationCondition() != null) {
      continue;
    }
    if (cond.asPositiveCondition() != null) {
      PositiveCondition pc=cond.asPositiveCondition();
      ByRef<Test> id_test=ByRef.create(pc.id_test);
      tests_to_restore=restore_saved_tests_to_test(id_test,true,tc,tests_to_restore,false);
      pc.id_test=id_test.value;
      pc.id_test.addBoundVariables(tc,new_vars);
      ByRef<Test> attr_test=ByRef.create(pc.attr_test);
      tests_to_restore=restore_saved_tests_to_test(attr_test,false,tc,tests_to_restore,false);
      pc.attr_test=attr_test.value;
      pc.attr_test.addBoundVariables(tc,new_vars);
      ByRef<Test> value_test=ByRef.create(pc.value_test);
      tests_to_restore=restore_saved_tests_to_test(value_test,false,tc,tests_to_restore,false);
      pc.value_test=value_test.value;
      pc.value_test.addBoundVariables(tc,new_vars);
    }
 else     if (cond.asNegativeCondition() != null) {
      NegativeCondition nc=cond.asNegativeCondition();
      ByRef<Test> id_test=ByRef.create(nc.id_test);
      tests_to_restore=restore_saved_tests_to_test(id_test,true,tc,tests_to_restore,true);
      nc.id_test=id_test.value;
      nc.id_test.addBoundVariables(tc,new_vars);
      ByRef<Test> attr_test=ByRef.create(nc.attr_test);
      tests_to_restore=restore_saved_tests_to_test(attr_test,false,tc,tests_to_restore,true);
      nc.attr_test=attr_test.value;
      nc.attr_test.addBoundVariables(tc,new_vars);
      ByRef<Test> value_test=ByRef.create(nc.value_test);
      tests_to_restore=restore_saved_tests_to_test(value_test,false,tc,tests_to_restore,true);
      nc.value_test=value_test.value;
      nc.value_test.addBoundVariables(tc,new_vars);
    }
  }
  if (tests_to_restore != null) {
    final Printer p=trace.getPrinter();
    if (p.isPrintWarnings()) {
      p.warn(""String_Node_Str"",prodName);
    }
  }
  Variable.unmark(new_vars);
}","/** 
 * reorder.cpp:398:restore_and_deallocate_saved_tests
 * @param value
 * @param tc
 * @param saved_tests
 */
private void restore_and_deallocate_saved_tests(Condition conds_list,Marker tc,SavedTest tests_to_restore){
  ListHead<Variable> new_vars=ListHead.newInstance();
  for (Condition cond=conds_list; cond != null; cond=cond.next) {
    if (cond.asPositiveCondition() != null) {
      PositiveCondition pc=cond.asPositiveCondition();
      ByRef<Test> id_test=ByRef.create(pc.id_test);
      tests_to_restore=restore_saved_tests_to_test(id_test,true,tc,tests_to_restore,false);
      pc.id_test=id_test.value;
      pc.id_test.addBoundVariables(tc,new_vars);
      ByRef<Test> attr_test=ByRef.create(pc.attr_test);
      tests_to_restore=restore_saved_tests_to_test(attr_test,false,tc,tests_to_restore,false);
      pc.attr_test=attr_test.value;
      pc.attr_test.addBoundVariables(tc,new_vars);
      ByRef<Test> value_test=ByRef.create(pc.value_test);
      tests_to_restore=restore_saved_tests_to_test(value_test,false,tc,tests_to_restore,false);
      pc.value_test=value_test.value;
      pc.value_test.addBoundVariables(tc,new_vars);
    }
  }
  if (tests_to_restore != null) {
    final Printer p=trace.getPrinter();
    if (p.isPrintWarnings()) {
      p.warn(""String_Node_Str"",prodName);
    }
  }
  Variable.unmark(new_vars);
}",0.7504178272980502
12268,"/** 
 * reorder.cpp:303
 * @param conds_list
 * @return
 */
private SavedTest simplify_condition_list(Condition conds_list){
  SavedTest sts=null;
  for (Condition c=conds_list; c != null; c=c.next) {
    if (c.asConjunctiveNegationCondition() != null) {
      continue;
    }
    if (c.asPositiveCondition() != null) {
      PositiveCondition pc=c.asPositiveCondition();
      ByRef<Test> id_test=ByRef.create(pc.id_test);
      sts=simplify_test(id_test,sts);
      pc.id_test=id_test.value;
      ByRef<Test> attr_test=ByRef.create(pc.attr_test);
      sts=simplify_test(attr_test,sts);
      pc.attr_test=attr_test.value;
      ByRef<Test> value_test=ByRef.create(pc.value_test);
      sts=simplify_test(value_test,sts);
      pc.value_test=value_test.value;
    }
 else     if (c.asNegativeCondition() != null) {
      NegativeCondition nc=c.asNegativeCondition();
      ByRef<Test> id_test=ByRef.create(nc.id_test);
      sts=simplify_test(id_test,sts);
      nc.id_test=id_test.value;
      ByRef<Test> attr_test=ByRef.create(nc.attr_test);
      sts=simplify_test(attr_test,sts);
      nc.attr_test=attr_test.value;
      ByRef<Test> value_test=ByRef.create(nc.value_test);
      sts=simplify_test(value_test,sts);
      nc.value_test=value_test.value;
    }
  }
  return sts;
}","/** 
 * reorder.cpp:303
 * @param conds_list
 * @return
 */
private SavedTest simplify_condition_list(Condition conds_list){
  SavedTest sts=null;
  for (Condition c=conds_list; c != null; c=c.next) {
    if (c.asPositiveCondition() != null) {
      PositiveCondition pc=c.asPositiveCondition();
      ByRef<Test> id_test=ByRef.create(pc.id_test);
      sts=simplify_test(id_test,sts);
      pc.id_test=id_test.value;
      ByRef<Test> attr_test=ByRef.create(pc.attr_test);
      sts=simplify_test(attr_test,sts);
      pc.attr_test=attr_test.value;
      ByRef<Test> value_test=ByRef.create(pc.value_test);
      sts=simplify_test(value_test,sts);
      pc.value_test=value_test.value;
    }
  }
  return sts;
}",0.7007007007007007
12269,"@Test public void testUnboundedVarInNegationBug517() throws Exception {
  agent.getProductions().loadProduction(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  JSoarTest.verifyProduction(agent,""String_Node_Str"",ProductionType.USER,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",true);
}","@Test public void testUnboundedVarInNegationBug517() throws Exception {
}",0.3048016701461378
12270,"/** 
 * reorder.cpp:1064:reorder_lhs
 * @param lhs_top
 * @param lhs_bottom
 * @param reorder_nccs
 * @throws ReordererException 
 */
public void reorder_lhs(ByRef<Condition> lhs_top,ByRef<Condition> lhs_bottom,boolean reorder_nccs) throws ReordererException {
  Marker tc=DefaultMarker.create();
  ListHead<Variable> roots=Conditions.collect_root_variables(lhs_top.value,tc,trace.getPrinter(),prodName);
  if (!roots.isEmpty()) {
    remove_isa_state_tests_for_non_roots(lhs_top,lhs_bottom,roots);
  }
  if (roots.isEmpty()) {
    for (Condition cond=lhs_top.value; cond != null; cond=cond.next) {
      PositiveCondition pc=cond.asPositiveCondition();
      if (pc != null && (Tests.test_includes_goal_or_impasse_id_test(pc.id_test,true,false))) {
        pc.id_test.addBoundVariables(tc,roots);
        if (!roots.isEmpty()) {
          break;
        }
      }
    }
  }
  if (roots.isEmpty()) {
    String message=String.format(""String_Node_Str"" + ""String_Node_Str"",prodName);
    trace.getPrinter().print(message);
    throw new ReordererException(message);
  }
  fill_in_vars_requiring_bindings(lhs_top.value,tc);
  reorder_condition_list(lhs_top,lhs_bottom,roots,tc,reorder_nccs);
  remove_vars_requiring_bindings(lhs_top.value);
}","/** 
 * reorder.cpp:1064:reorder_lhs
 * @param lhs_top
 * @param lhs_bottom
 * @param reorder_nccs
 * @throws ReordererException 
 */
public void reorder_lhs(ByRef<Condition> lhs_top,ByRef<Condition> lhs_bottom,boolean reorder_nccs) throws ReordererException {
  Marker tc=DefaultMarker.create();
  ListHead<Variable> roots=Conditions.collect_root_variables(lhs_top.value,tc,trace.getPrinter(),prodName);
  if (!roots.isEmpty()) {
    remove_isa_state_tests_for_non_roots(lhs_top,lhs_bottom,roots);
  }
  if (roots.isEmpty()) {
    for (Condition cond=lhs_top.value; cond != null; cond=cond.next) {
      PositiveCondition pc=cond.asPositiveCondition();
      if (pc != null && (Tests.test_includes_goal_or_impasse_id_test(pc.id_test,true,false))) {
        pc.id_test.addBoundVariables(tc,roots);
        if (!roots.isEmpty()) {
          break;
        }
      }
    }
  }
  if (roots.isEmpty()) {
    String message=String.format(""String_Node_Str"" + ""String_Node_Str"",prodName);
    trace.getPrinter().print(message);
    throw new ReordererException(message);
  }
  fill_in_vars_requiring_bindings(lhs_top.value,tc);
  reorder_condition_list(lhs_top,lhs_bottom,roots,tc,reorder_nccs);
  remove_vars_requiring_bindings(lhs_top.value);
  check_negative_relational_test_bindings(lhs_top.value,DefaultMarker.create());
}",0.9683470105509964
12271,"/** 
 * init_soar.cpp:350:reinitialize_soar
 */
private void reinitialize_soar(){
  getEventManager().fireEvent(new BeforeInitSoarEvent(this));
  boolean traceState=trace.isEnabled();
  trace.setEnabled(false);
  rl.rl_reset_data();
  decider.clear_goal_stack();
  io.do_input_cycle();
  io.do_output_cycle();
  rl.rl_reset_stats();
  decider.active_level=0;
  recMemory.FIRING_TYPE=SavedFiringType.IE_PRODS;
  recMemory.do_preference_phase(decider.top_goal);
  explain.reset_explain();
  syms.reset();
  workingMemory.reset();
  decisionCycle.reset();
  recMemory.reset();
  reset_statistics();
  trace.setEnabled(traceState);
  getEventManager().fireEvent(new AfterInitSoarEvent(this));
}","/** 
 * init_soar.cpp:350:reinitialize_soar
 */
private void reinitialize_soar(){
  getEventManager().fireEvent(new BeforeInitSoarEvent(this));
  boolean traceState=trace.isEnabled();
  trace.setEnabled(false);
  rl.rl_reset_data();
  decider.clear_goal_stack();
  io.do_input_cycle();
  io.do_output_cycle();
  rl.rl_reset_stats();
  decider.active_level=0;
  recMemory.FIRING_TYPE=SavedFiringType.IE_PRODS;
  recMemory.do_preference_phase(decider.top_goal);
  explain.reset_explain();
  syms.reset();
  workingMemory.reset();
  decisionCycle.reset();
  recMemory.reset();
  chunker.reset();
  reset_statistics();
  trace.setEnabled(traceState);
  getEventManager().fireEvent(new AfterInitSoarEvent(this));
}",0.9864188706218728
12272,"/** 
 * This scans down the goal stack and checks the consistency of the current decision versus the current preferences for the slot, if the preferences have changed. consistency.cpp:326:check_context_slot_decisions
 * @param level
 * @return
 */
private boolean check_context_slot_decisions(int level){
  if (DEBUG_CONSISTENCY_CHECK) {
    if (tempMemory.highest_goal_whose_context_changed != null)     context.getPrinter().print(""String_Node_Str"",tempMemory.highest_goal_whose_context_changed);
  }
  for (IdentifierImpl goal=tempMemory.highest_goal_whose_context_changed; goal != null && goal.level <= level; goal=goal.lower_goal) {
    if (DEBUG_CONSISTENCY_CHECK) {
      context.getPrinter().print(""String_Node_Str"",goal);
    }
    Slot s=goal.operator_slot;
    if ((goal.lower_goal != null) || (s.getWmes() != null)) {
      if (DEBUG_CONSISTENCY_CHECK) {
        context.getPrinter().print(""String_Node_Str"");
      }
      if (s.changed != null) {
        if (DEBUG_CONSISTENCY_CHECK) {
          context.getPrinter().print(""String_Node_Str"");
        }
        if (!decision_consistent_with_current_preferences(goal,s)) {
          if (DEBUG_CONSISTENCY_CHECK) {
            context.getPrinter().print(""String_Node_Str"",goal);
          }
          if (context.getTrace().isEnabled(Category.VERBOSE) || context.getTrace().isEnabled(Category.WM_CHANGES))           context.getTrace().print(""String_Node_Str"",goal);
          remove_current_decision(s);
          return false;
        }
      }
    }
  }
  return true;
}","/** 
 * This scans down the goal stack and checks the consistency of the current decision versus the current preferences for the slot, if the preferences have changed. consistency.cpp:326:check_context_slot_decisions
 * @param level
 * @return
 */
private boolean check_context_slot_decisions(int level){
  if (DEBUG_CONSISTENCY_CHECK) {
    if (tempMemory.highest_goal_whose_context_changed != null)     context.getPrinter().print(""String_Node_Str"",tempMemory.highest_goal_whose_context_changed);
  }
  for (IdentifierImpl goal=tempMemory.highest_goal_whose_context_changed; goal != null && goal.level <= level; goal=goal.lower_goal) {
    if (DEBUG_CONSISTENCY_CHECK) {
      context.getPrinter().print(""String_Node_Str"",goal);
    }
    Slot s=goal.operator_slot;
    if ((goal.lower_goal != null) || (s.getWmes() != null)) {
      if (DEBUG_CONSISTENCY_CHECK) {
        context.getPrinter().print(""String_Node_Str"");
      }
      if (s.changed != null) {
        if (DEBUG_CONSISTENCY_CHECK) {
          context.getPrinter().print(""String_Node_Str"");
        }
        if (!decision_consistent_with_current_preferences(goal,s)) {
          if (DEBUG_CONSISTENCY_CHECK) {
            context.getPrinter().print(""String_Node_Str"",goal);
          }
          context.getTrace().print(EnumSet.of(Category.VERBOSE,Category.WM_CHANGES),""String_Node_Str"",goal);
          remove_current_decision(s);
          return false;
        }
      }
    }
  }
  return true;
}",0.966
12273,"/** 
 * This decides the given context slot. It normally returns TRUE, but returns FALSE if the ONLY change as a result of the decision procedure was a change in the set of ^item's on the impasse below the given slot. <p>decide.cpp:2092:decide_context_slot
 * @param goal
 * @param s
 * @param predict (defaulted to false in CSoar)
 * @return
 */
private boolean decide_context_slot(IdentifierImpl goal,Slot s,boolean predict){
  ImpasseType impasse_type;
  SymbolImpl attribute_of_impasse;
  final ByRef<Preference> candidates=ByRef.create(null);
  if (!context_slot_is_decidable(s)) {
    impasse_type=ImpasseType.NO_CHANGE;
    candidates.value=null;
    if (predict) {
      decisionManip.predict_set(""String_Node_Str"");
      return true;
    }
  }
 else {
    impasse_type=run_preference_semantics(s,candidates,false,false);
    if (predict) {
switch (impasse_type) {
case CONSTRAINT_FAILURE:
        decisionManip.predict_set(""String_Node_Str"");
      break;
case CONFLICT:
    decisionManip.predict_set(""String_Node_Str"");
  break;
case TIE:
decisionManip.predict_set(""String_Node_Str"");
break;
case NO_CHANGE:
decisionManip.predict_set(""String_Node_Str"");
break;
default :
if (candidates.value == null || (candidates.value.value.asIdentifier() == null)) decisionManip.predict_set(""String_Node_Str"");
 else {
final IdentifierImpl tempId=candidates.value.value.asIdentifier();
final String temp=String.format(""String_Node_Str"",tempId);
decisionManip.predict_set(temp);
}
break;
}
return true;
}
remove_wmes_for_context_slot(s);
if (impasse_type == ImpasseType.NONE) {
if (candidates.value == null) {
impasse_type=ImpasseType.NO_CHANGE;
}
 else if (candidates.value.next_candidate != null) {
throw new IllegalStateException(""String_Node_Str"");
}
}
}
s.changed=null;
if (impasse_type == ImpasseType.NO_CHANGE) {
if (s.getWmes() != null) {
attribute_of_impasse=s.attr;
}
 else {
attribute_of_impasse=context.predefinedSyms.state_symbol;
}
}
 else {
attribute_of_impasse=s.attr;
}
if (attribute_of_impasse == context.predefinedSyms.state_symbol) {
remove_wmes_for_context_slot(goal.operator_slot);
}
if (impasse_type == ImpasseType.NONE) {
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_add_ref();
if (goal.lower_goal != null) {
if (context.getTrace().isEnabled(Category.VERBOSE) || context.getTrace().isEnabled(Category.WM_CHANGES)) context.getTrace().print(""String_Node_Str"",goal.lower_goal);
remove_existing_context_and_descendents(goal.lower_goal);
}
WmeImpl w=this.workingMemory.make_wme(s.id,s.attr,candidates.value.value,false);
s.addWme(w);
w.preference=candidates.value;
w.preference.preference_add_ref();
this.workingMemory.add_wme_to_wm(w);
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_remove_ref(recMemory);
if (rl.rl_enabled()) rl.rl_store_data(goal,candidates.value);
return true;
}
if (impasse_type != ImpasseType.NO_CHANGE) goal.rl_info.impasse_type=impasse_type;
 else if (s.getWmes() != null) goal.rl_info.impasse_type=ImpasseType.OP_NO_CHANGE;
 else goal.rl_info.impasse_type=ImpasseType.STATE_NO_CHANGE;
if ((impasse_type == type_of_existing_impasse(goal)) && (attribute_of_impasse == attribute_of_existing_impasse(goal))) {
update_impasse_items(goal.lower_goal,candidates.value);
return false;
}
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_add_ref();
if (goal.lower_goal != null) {
if (context.getTrace().isEnabled(Category.VERBOSE) || context.getTrace().isEnabled(Category.WM_CHANGES)) context.getTrace().print(""String_Node_Str"",goal.lower_goal);
remove_existing_context_and_descendents(goal.lower_goal);
}
if (this.waitsnc.value.get() && (impasse_type == ImpasseType.NO_CHANGE) && (attribute_of_impasse == context.predefinedSyms.state_symbol)) {
}
 else {
create_new_context(attribute_of_impasse,impasse_type);
update_impasse_items(goal.lower_goal,candidates.value);
}
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_remove_ref(recMemory);
return true;
}","/** 
 * This decides the given context slot. It normally returns TRUE, but returns FALSE if the ONLY change as a result of the decision procedure was a change in the set of ^item's on the impasse below the given slot. <p>decide.cpp:2092:decide_context_slot
 * @param goal
 * @param s
 * @param predict (defaulted to false in CSoar)
 * @return
 */
private boolean decide_context_slot(IdentifierImpl goal,Slot s,boolean predict){
  ImpasseType impasse_type;
  SymbolImpl attribute_of_impasse;
  final ByRef<Preference> candidates=ByRef.create(null);
  if (!context_slot_is_decidable(s)) {
    impasse_type=ImpasseType.NO_CHANGE;
    candidates.value=null;
    if (predict) {
      decisionManip.predict_set(""String_Node_Str"");
      return true;
    }
  }
 else {
    impasse_type=run_preference_semantics(s,candidates,false,false);
    if (predict) {
switch (impasse_type) {
case CONSTRAINT_FAILURE:
        decisionManip.predict_set(""String_Node_Str"");
      break;
case CONFLICT:
    decisionManip.predict_set(""String_Node_Str"");
  break;
case TIE:
decisionManip.predict_set(""String_Node_Str"");
break;
case NO_CHANGE:
decisionManip.predict_set(""String_Node_Str"");
break;
default :
if (candidates.value == null || (candidates.value.value.asIdentifier() == null)) decisionManip.predict_set(""String_Node_Str"");
 else {
final IdentifierImpl tempId=candidates.value.value.asIdentifier();
final String temp=String.format(""String_Node_Str"",tempId);
decisionManip.predict_set(temp);
}
break;
}
return true;
}
remove_wmes_for_context_slot(s);
if (impasse_type == ImpasseType.NONE) {
if (candidates.value == null) {
impasse_type=ImpasseType.NO_CHANGE;
}
 else if (candidates.value.next_candidate != null) {
throw new IllegalStateException(""String_Node_Str"");
}
}
}
s.changed=null;
if (impasse_type == ImpasseType.NO_CHANGE) {
if (s.getWmes() != null) {
attribute_of_impasse=s.attr;
}
 else {
attribute_of_impasse=context.predefinedSyms.state_symbol;
}
}
 else {
attribute_of_impasse=s.attr;
}
if (attribute_of_impasse == context.predefinedSyms.state_symbol) {
remove_wmes_for_context_slot(goal.operator_slot);
}
if (impasse_type == ImpasseType.NONE) {
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_add_ref();
if (goal.lower_goal != null) {
context.getTrace().print(EnumSet.of(Category.VERBOSE,Category.WM_CHANGES),""String_Node_Str"",goal.lower_goal);
remove_existing_context_and_descendents(goal.lower_goal);
}
WmeImpl w=this.workingMemory.make_wme(s.id,s.attr,candidates.value.value,false);
s.addWme(w);
w.preference=candidates.value;
w.preference.preference_add_ref();
this.workingMemory.add_wme_to_wm(w);
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_remove_ref(recMemory);
if (rl.rl_enabled()) rl.rl_store_data(goal,candidates.value);
return true;
}
if (impasse_type != ImpasseType.NO_CHANGE) goal.rl_info.impasse_type=impasse_type;
 else if (s.getWmes() != null) goal.rl_info.impasse_type=ImpasseType.OP_NO_CHANGE;
 else goal.rl_info.impasse_type=ImpasseType.STATE_NO_CHANGE;
if ((impasse_type == type_of_existing_impasse(goal)) && (attribute_of_impasse == attribute_of_existing_impasse(goal))) {
update_impasse_items(goal.lower_goal,candidates.value);
return false;
}
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_add_ref();
if (goal.lower_goal != null) {
context.getTrace().print(EnumSet.of(Category.VERBOSE,Category.WM_CHANGES),""String_Node_Str"",goal.lower_goal);
remove_existing_context_and_descendents(goal.lower_goal);
}
if (this.waitsnc.value.get() && (impasse_type == ImpasseType.NO_CHANGE) && (attribute_of_impasse == context.predefinedSyms.state_symbol)) {
}
 else {
create_new_context(attribute_of_impasse,impasse_type);
update_impasse_items(goal.lower_goal,candidates.value);
}
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_remove_ref(recMemory);
return true;
}",0.9781094527363184
12274,"/** 
 * <p>Moved here from consistency since it accesses no other state and is only ever called from decider. <p>consistency.cpp:41:remove_operator_if_necessary
 * @param s
 * @param w
 */
private void remove_operator_if_necessary(Slot s,WmeImpl w){
  if (s.getWmes() != null) {
    if (s.getWmes().value == w.value) {
      context.getTrace().print(Category.OPERAND2_REMOVALS,""String_Node_Str"",w);
      this.remove_wmes_for_context_slot(s);
      if (s.id.lower_goal != null) {
        if (context.getTrace().isEnabled(Category.VERBOSE) || context.getTrace().isEnabled(Category.WM_CHANGES))         context.getTrace().print(""String_Node_Str"",s.id.lower_goal);
        this.remove_existing_context_and_descendents(s.id.lower_goal);
      }
    }
  }
}","/** 
 * <p>Moved here from consistency since it accesses no other state and is only ever called from decider. <p>consistency.cpp:41:remove_operator_if_necessary
 * @param s
 * @param w
 */
private void remove_operator_if_necessary(Slot s,WmeImpl w){
  if (s.getWmes() != null) {
    if (s.getWmes().value == w.value) {
      context.getTrace().print(Category.OPERAND2_REMOVALS,""String_Node_Str"",w);
      this.remove_wmes_for_context_slot(s);
      if (s.id.lower_goal != null) {
        context.getTrace().print(EnumSet.of(Category.VERBOSE,Category.WM_CHANGES),""String_Node_Str"",s.id.lower_goal);
        this.remove_existing_context_and_descendents(s.id.lower_goal);
      }
    }
  }
}",0.9333333333333332
12275,"/** 
 * This the main chunking routine. It takes an instantiation, and a flag ""allow_variablization""--if FALSE, the chunk will not be variablized. (If TRUE, it may still not be variablized, due to chunk-free-problem-spaces, ^quiescence t, etc.) <p>chunk.cpp:902:chunk_instantiation
 * @param inst
 * @param allow_variablization
 */
public void chunk_instantiation(Instantiation inst,boolean allow_variablization){
  if (inst.match_goal == null)   return;
  Preference pref=null;
  for (ListItem<Preference> i=inst.preferences_generated.first; i != null; i=i.next) {
    final Preference temp=i.item;
    if (temp.id.level < inst.match_goal_level) {
      pref=temp;
      break;
    }
  }
  if (pref == null)   return;
  final Trace trace=context.getTrace();
  if (this.learningOn.value.get()) {
    if (pref.id.level < (inst.match_goal_level - 1)) {
      allow_variablization=false;
      inst.okay_to_variablize=false;
      trace.print(Category.VERBOSE,""String_Node_Str"");
    }
 else {
      allow_variablization=isLearningOn();
      inst.okay_to_variablize=isLearningOn();
      trace.print(Category.VERBOSE,""String_Node_Str"",allow_variablization);
    }
  }
  Preference results=get_results_for_instantiation(inst);
  if (results == null) {
    return;
  }
  for (IdentifierImpl g=inst.match_goal.higher_goal; g != null && g.allow_bottom_up_chunks; g=g.higher_goal)   g.allow_bottom_up_chunks=false;
  int grounds_level=inst.match_goal_level - 1;
  backtrace.backtrace_number++;
  if (backtrace.backtrace_number == 0)   backtrace.backtrace_number=1;
  backtrace.grounds_tc++;
  if (backtrace.grounds_tc == 0)   backtrace.grounds_tc=1;
  backtrace.potentials_tc++;
  if (backtrace.potentials_tc == 0)   backtrace.potentials_tc=1;
  backtrace.locals_tc++;
  if (backtrace.locals_tc == 0)   backtrace.locals_tc=1;
  backtrace.grounds.clear();
  backtrace.positive_potentials.clear();
  backtrace.locals.clear();
  this.instantiations_with_nots.clear();
  if (allow_variablization && (!learningAllGoals))   allow_variablization=inst.match_goal.allow_bottom_up_chunks;
  this.chunk_free_flag=false;
  this.chunky_flag=false;
  if (allow_variablization) {
    if (learningExcept) {
      if (chunk_free_problem_spaces.contains(inst.match_goal)) {
        allow_variablization=false;
        this.chunk_free_flag=true;
      }
    }
 else     if (learningOnly) {
      if (chunky_problem_spaces.contains(inst.match_goal)) {
        allow_variablization=true;
        this.chunky_flag=true;
      }
 else {
        allow_variablization=false;
        this.chunky_flag=false;
      }
    }
  }
  this.variablize_this_chunk=allow_variablization;
  ExplainChunk temp_explain_chunk=null;
  if (this.explain.isEnabled()) {
    temp_explain_chunk=new ExplainChunk();
    this.explain.reset_backtrace_list();
  }
  for (pref=results; pref != null; pref=pref.next_result) {
    trace.print(Category.BACKTRACING,""String_Node_Str"",pref);
    backtrace.backtrace_through_instantiation(pref.inst,grounds_level,null,0);
  }
  this.quiescence_t_flag=false;
  while (true) {
    backtrace.trace_locals(grounds_level);
    backtrace.trace_grounded_potentials();
    if (!backtrace.trace_ungrounded_potentials(grounds_level))     break;
  }
  backtrace.positive_potentials.clear();
  ByRef<ChunkCondition> top_cc=ByRef.create(null);
  ByRef<ChunkCondition> bottom_cc=ByRef.create(null);
  NotStruct nots=null;
{
    final Marker tc_for_grounds=DefaultMarker.create();
    build_chunk_conds_for_grounds_and_add_negateds(top_cc,bottom_cc,tc_for_grounds);
    nots=get_nots_for_instantiated_conditions(instantiations_with_nots,tc_for_grounds);
  }
  StringSymbol prod_name=null;
  ProductionType prod_type=null;
  boolean print_name=false;
  boolean print_prod=false;
  if (this.variablize_this_chunk) {
    this.chunks_this_d_cycle++;
    prod_name=generate_chunk_name_sym_constant(inst);
    prod_type=ProductionType.CHUNK;
    print_name=trace.isEnabled(Category.CHUNK_NAMES);
    trace.print(Category.CHUNK_NAMES,""String_Node_Str"",prod_name);
    print_prod=trace.isEnabled(Category.CHUNKS);
  }
 else {
    prod_name=context.getSymbols().generateUniqueString(""String_Node_Str"",justification_count);
    prod_type=ProductionType.JUSTIFICATION;
    print_name=trace.isEnabled(Category.JUSTIFICATION_NAMES);
    trace.print(Category.JUSTIFICATION_NAMES,""String_Node_Str"",prod_name);
    print_prod=trace.isEnabled(Category.JUSTIFICATIONS);
  }
  if (top_cc.value == null) {
    context.getPrinter().print(""String_Node_Str"");
    return;
  }
  if (this.chunks_this_d_cycle > maxChunks) {
    context.getPrinter().warn(""String_Node_Str"");
    this.maxChunksReached=true;
    return;
  }
  Condition lhs_top=top_cc.value.variablized_cond;
  Condition lhs_bottom=bottom_cc.value.variablized_cond;
  this.variableGenerator.reset(lhs_top,null);
  this.variablization_tc=DefaultMarker.create();
  variablize_condition_list(lhs_top);
  variablize_nots_and_insert_into_conditions(nots,lhs_top);
  Action rhs=copy_and_variablize_result_list(results);
  add_goal_or_impasse_tests(top_cc.value.next_prev);
  Production prod=new Production(prod_type,prod_name,lhs_top,lhs_bottom,rhs);
  try {
    context.getProductions().addChunk(prod);
  }
 catch (  ReordererException e) {
    final Printer p=context.getPrinter();
    p.print(""String_Node_Str"");
    Conditions.print_condition_list(p,lhs_top,2,false);
    p.print(""String_Node_Str"");
    Action.print_action_list(p,rhs,3,false);
    p.print(""String_Node_Str"");
    p.print(""String_Node_Str"");
    p.print(""String_Node_Str"");
    p.print(""String_Node_Str"");
    p.print(""String_Node_Str"");
    this.decisionCycle.halt(""String_Node_Str"");
    return;
  }
  Instantiation chunk_inst=null;
{
    ByRef<Condition> inst_lhs_top=ByRef.create(null);
    ByRef<Condition> inst_lhs_bottom=ByRef.create(null);
    reorder_instantiated_conditions(top_cc.value.next_prev.toListHead(),inst_lhs_top,inst_lhs_bottom);
    if (this.explain.isEnabled())     temp_explain_chunk.all_grounds=inst_lhs_top.value;
    chunk_inst=new Instantiation(prod,null,null);
    chunk_inst.top_of_instantiated_conditions=inst_lhs_top.value;
    chunk_inst.bottom_of_instantiated_conditions=inst_lhs_bottom.value;
    chunk_inst.nots=nots;
    chunk_inst.GDS_evaluated_already=false;
    if (!learningOnly) {
      if ((!this.variablize_this_chunk) && (this.chunk_free_flag) && (!this.quiescence_t_flag))       chunk_inst.okay_to_variablize=true;
 else       chunk_inst.okay_to_variablize=this.variablize_this_chunk;
    }
 else {
      if ((!this.variablize_this_chunk) && (!this.chunky_flag) && (!this.quiescence_t_flag))       chunk_inst.okay_to_variablize=true;
 else       chunk_inst.okay_to_variablize=this.variablize_this_chunk;
    }
    chunk_inst.in_ms=true;
    make_clones_of_results(results,chunk_inst);
    recMemory.fill_in_new_instantiation_stuff(chunk_inst,true,decider.top_goal);
  }
  if (this.explain.isEnabled()) {
    ByRef<Condition> new_top=ByRef.create(null);
    ByRef<Condition> new_bottom=ByRef.create(null);
    Condition.copy_condition_list(prod.condition_list,new_top,new_bottom);
    temp_explain_chunk.conds=new_top.value;
    temp_explain_chunk.actions=copy_and_variablize_result_list(results);
  }
  ProductionAddResult rete_addition_result=this.rete.add_production_to_rete(prod,chunk_inst,print_name,false);
  if (this.explain.isEnabled())   if ((rete_addition_result != ProductionAddResult.DUPLICATE_PRODUCTION) && ((prod_type != ProductionType.JUSTIFICATION) || (rete_addition_result != ProductionAddResult.REFRACTED_INST_DID_NOT_MATCH))) {
    temp_explain_chunk.name=prod_name.getValue();
    this.explain.explain_add_temp_to_chunk_list(temp_explain_chunk);
  }
 else {
  }
  if (print_prod && (rete_addition_result != ProductionAddResult.DUPLICATE_PRODUCTION)) {
    context.getPrinter().print(""String_Node_Str"");
    prod.print(context.getPrinter(),false);
  }
  if (rete_addition_result == ProductionAddResult.DUPLICATE_PRODUCTION) {
    context.getProductions().exciseProduction(prod,false);
  }
 else   if ((prod_type == ProductionType.JUSTIFICATION) && (rete_addition_result == ProductionAddResult.REFRACTED_INST_DID_NOT_MATCH)) {
    context.getProductions().exciseProduction(prod,false);
  }
  if (rete_addition_result != ProductionAddResult.REFRACTED_INST_MATCHED) {
    chunk_inst.in_ms=false;
  }
  if (rete_addition_result != ProductionAddResult.DUPLICATE_PRODUCTION) {
    context.getEventManager().fireEvent(new ProductionAddedEvent(context,prod));
  }
  chunk_inst.inProdList.insertAtHead(recMemory.newly_created_instantiations);
  if (!maxChunksReached)   chunk_instantiation(chunk_inst,variablize_this_chunk);
  return;
}","/** 
 * This the main chunking routine. It takes an instantiation, and a flag ""allow_variablization""--if FALSE, the chunk will not be variablized. (If TRUE, it may still not be variablized, due to chunk-free-problem-spaces, ^quiescence t, etc.) <p>chunk.cpp:902:chunk_instantiation
 * @param inst
 * @param allow_variablization
 */
public void chunk_instantiation(Instantiation inst,boolean allow_variablization){
  if (inst.match_goal == null)   return;
  Preference pref=null;
  for (ListItem<Preference> i=inst.preferences_generated.first; i != null; i=i.next) {
    final Preference temp=i.item;
    if (temp.id.level < inst.match_goal_level) {
      pref=temp;
      break;
    }
  }
  if (pref == null)   return;
  final Trace trace=context.getTrace();
  if (this.learningOn.value.get()) {
    if (pref.id.level < (inst.match_goal_level - 1)) {
      allow_variablization=false;
      inst.okay_to_variablize=false;
      trace.print(Category.VERBOSE,""String_Node_Str"");
    }
 else {
      allow_variablization=isLearningOn();
      inst.okay_to_variablize=isLearningOn();
      trace.print(Category.VERBOSE,""String_Node_Str"",allow_variablization);
    }
  }
  Preference results=get_results_for_instantiation(inst);
  if (results == null) {
    return;
  }
  for (IdentifierImpl g=inst.match_goal.higher_goal; g != null && g.allow_bottom_up_chunks; g=g.higher_goal)   g.allow_bottom_up_chunks=false;
  int grounds_level=inst.match_goal_level - 1;
  backtrace.backtrace_number++;
  if (backtrace.backtrace_number == 0)   backtrace.backtrace_number=1;
  backtrace.grounds_tc++;
  if (backtrace.grounds_tc == 0)   backtrace.grounds_tc=1;
  backtrace.potentials_tc++;
  if (backtrace.potentials_tc == 0)   backtrace.potentials_tc=1;
  backtrace.locals_tc++;
  if (backtrace.locals_tc == 0)   backtrace.locals_tc=1;
  backtrace.grounds.clear();
  backtrace.positive_potentials.clear();
  backtrace.locals.clear();
  this.instantiations_with_nots.clear();
  if (allow_variablization && (!learningAllGoals))   allow_variablization=inst.match_goal.allow_bottom_up_chunks;
  boolean chunk_free_flag=false;
  boolean chunky_flag=false;
  if (allow_variablization) {
    if (learningExcept) {
      if (chunk_free_problem_spaces.contains(inst.match_goal)) {
        context.getTrace().print(EnumSet.of(Category.VERBOSE,Category.WM_CHANGES),""String_Node_Str"",inst.match_goal);
        allow_variablization=false;
        chunk_free_flag=true;
      }
    }
 else     if (learningOnly) {
      if (chunky_problem_spaces.contains(inst.match_goal)) {
        chunky_flag=true;
      }
 else {
        context.getTrace().print(EnumSet.of(Category.VERBOSE,Category.WM_CHANGES),""String_Node_Str"",inst.match_goal);
        allow_variablization=false;
      }
    }
  }
  this.variablize_this_chunk=allow_variablization;
  ExplainChunk temp_explain_chunk=null;
  if (this.explain.isEnabled()) {
    temp_explain_chunk=new ExplainChunk();
    this.explain.reset_backtrace_list();
  }
  for (pref=results; pref != null; pref=pref.next_result) {
    trace.print(Category.BACKTRACING,""String_Node_Str"",pref);
    backtrace.backtrace_through_instantiation(pref.inst,grounds_level,null,0);
  }
  this.quiescence_t_flag=false;
  while (true) {
    backtrace.trace_locals(grounds_level);
    backtrace.trace_grounded_potentials();
    if (!backtrace.trace_ungrounded_potentials(grounds_level))     break;
  }
  backtrace.positive_potentials.clear();
  ByRef<ChunkCondition> top_cc=ByRef.create(null);
  ByRef<ChunkCondition> bottom_cc=ByRef.create(null);
  NotStruct nots=null;
{
    final Marker tc_for_grounds=DefaultMarker.create();
    build_chunk_conds_for_grounds_and_add_negateds(top_cc,bottom_cc,tc_for_grounds);
    nots=get_nots_for_instantiated_conditions(instantiations_with_nots,tc_for_grounds);
  }
  StringSymbol prod_name=null;
  ProductionType prod_type=null;
  boolean print_name=false;
  boolean print_prod=false;
  if (this.variablize_this_chunk) {
    this.chunks_this_d_cycle++;
    prod_name=generate_chunk_name_sym_constant(inst);
    prod_type=ProductionType.CHUNK;
    print_name=trace.isEnabled(Category.CHUNK_NAMES);
    trace.print(Category.CHUNK_NAMES,""String_Node_Str"",prod_name);
    print_prod=trace.isEnabled(Category.CHUNKS);
  }
 else {
    prod_name=context.getSymbols().generateUniqueString(""String_Node_Str"",justification_count);
    prod_type=ProductionType.JUSTIFICATION;
    print_name=trace.isEnabled(Category.JUSTIFICATION_NAMES);
    trace.print(Category.JUSTIFICATION_NAMES,""String_Node_Str"",prod_name);
    print_prod=trace.isEnabled(Category.JUSTIFICATIONS);
  }
  if (top_cc.value == null) {
    context.getPrinter().print(""String_Node_Str"");
    return;
  }
  if (this.chunks_this_d_cycle > maxChunks) {
    context.getPrinter().warn(""String_Node_Str"");
    this.maxChunksReached=true;
    return;
  }
  Condition lhs_top=top_cc.value.variablized_cond;
  Condition lhs_bottom=bottom_cc.value.variablized_cond;
  this.variableGenerator.reset(lhs_top,null);
  this.variablization_tc=DefaultMarker.create();
  variablize_condition_list(lhs_top);
  variablize_nots_and_insert_into_conditions(nots,lhs_top);
  Action rhs=copy_and_variablize_result_list(results);
  add_goal_or_impasse_tests(top_cc.value.next_prev);
  Production prod=new Production(prod_type,prod_name,lhs_top,lhs_bottom,rhs);
  try {
    context.getProductions().addChunk(prod);
  }
 catch (  ReordererException e) {
    final Printer p=context.getPrinter();
    p.print(""String_Node_Str"");
    Conditions.print_condition_list(p,lhs_top,2,false);
    p.print(""String_Node_Str"");
    Action.print_action_list(p,rhs,3,false);
    p.print(""String_Node_Str"");
    p.print(""String_Node_Str"");
    p.print(""String_Node_Str"");
    p.print(""String_Node_Str"");
    p.print(""String_Node_Str"");
    this.decisionCycle.halt(""String_Node_Str"");
    return;
  }
  Instantiation chunk_inst=null;
{
    ByRef<Condition> inst_lhs_top=ByRef.create(null);
    ByRef<Condition> inst_lhs_bottom=ByRef.create(null);
    reorder_instantiated_conditions(top_cc.value.next_prev.toListHead(),inst_lhs_top,inst_lhs_bottom);
    if (this.explain.isEnabled())     temp_explain_chunk.all_grounds=inst_lhs_top.value;
    chunk_inst=new Instantiation(prod,null,null);
    chunk_inst.top_of_instantiated_conditions=inst_lhs_top.value;
    chunk_inst.bottom_of_instantiated_conditions=inst_lhs_bottom.value;
    chunk_inst.nots=nots;
    chunk_inst.GDS_evaluated_already=false;
    if (!learningOnly) {
      if ((!this.variablize_this_chunk) && (chunk_free_flag) && (!this.quiescence_t_flag))       chunk_inst.okay_to_variablize=true;
 else       chunk_inst.okay_to_variablize=this.variablize_this_chunk;
    }
 else {
      if ((!this.variablize_this_chunk) && (!chunky_flag) && (!this.quiescence_t_flag))       chunk_inst.okay_to_variablize=true;
 else       chunk_inst.okay_to_variablize=this.variablize_this_chunk;
    }
    chunk_inst.in_ms=true;
    make_clones_of_results(results,chunk_inst);
    recMemory.fill_in_new_instantiation_stuff(chunk_inst,true,decider.top_goal);
  }
  if (this.explain.isEnabled()) {
    ByRef<Condition> new_top=ByRef.create(null);
    ByRef<Condition> new_bottom=ByRef.create(null);
    Condition.copy_condition_list(prod.condition_list,new_top,new_bottom);
    temp_explain_chunk.conds=new_top.value;
    temp_explain_chunk.actions=copy_and_variablize_result_list(results);
  }
  ProductionAddResult rete_addition_result=this.rete.add_production_to_rete(prod,chunk_inst,print_name,false);
  if (this.explain.isEnabled())   if ((rete_addition_result != ProductionAddResult.DUPLICATE_PRODUCTION) && ((prod_type != ProductionType.JUSTIFICATION) || (rete_addition_result != ProductionAddResult.REFRACTED_INST_DID_NOT_MATCH))) {
    temp_explain_chunk.name=prod_name.getValue();
    this.explain.explain_add_temp_to_chunk_list(temp_explain_chunk);
  }
 else {
  }
  if (print_prod && (rete_addition_result != ProductionAddResult.DUPLICATE_PRODUCTION)) {
    context.getPrinter().print(""String_Node_Str"");
    prod.print(context.getPrinter(),false);
  }
  if (rete_addition_result == ProductionAddResult.DUPLICATE_PRODUCTION) {
    context.getProductions().exciseProduction(prod,false);
  }
 else   if ((prod_type == ProductionType.JUSTIFICATION) && (rete_addition_result == ProductionAddResult.REFRACTED_INST_DID_NOT_MATCH)) {
    context.getProductions().exciseProduction(prod,false);
  }
  if (rete_addition_result != ProductionAddResult.REFRACTED_INST_MATCHED) {
    chunk_inst.in_ms=false;
  }
  if (rete_addition_result != ProductionAddResult.DUPLICATE_PRODUCTION) {
    context.getEventManager().fireEvent(new ProductionAddedEvent(context,prod));
  }
  chunk_inst.inProdList.insertAtHead(recMemory.newly_created_instantiations);
  if (!maxChunksReached)   chunk_instantiation(chunk_inst,variablize_this_chunk);
  return;
}",0.9723794819008408
12276,"/** 
 * This routine decides a given slot, which must be a non-context slot. It calls run_preference_semantics() on the slot, then updates the wmes and/or impasse for the slot accordingly. <p>decide.cpp:1510:decide_non_context_slot
 * @param s
 */
private void decide_non_context_slot(Slot s){
  final ByRef<Preference> candidates=ByRef.create(null);
  final ImpasseType impasse_type=run_preference_semantics(s,candidates,false,false);
  if (impasse_type == ImpasseType.NONE) {
    if (s.impasse_type != ImpasseType.NONE)     remove_existing_attribute_impasse_for_slot(s);
    for (WmeImpl w=s.getWmes(); w != null; w=w.next)     w.value.decider_flag=DeciderFlag.NOTHING;
    for (Preference cand=candidates.value; cand != null; cand=cand.next_candidate)     cand.value.decider_flag=DeciderFlag.CANDIDATE;
    WmeImpl it=s.getWmes();
    while (it != null) {
      final WmeImpl w=it;
      it=w.next;
      if (w.value.decider_flag == DeciderFlag.CANDIDATE) {
        w.value.decider_flag=DeciderFlag.ALREADY_EXISTING_WME;
        w.value.decider_wme=w;
      }
 else {
        s.removeWme(w);
        if (w.gds != null) {
          if (w.gds.getGoal() != null) {
            context.getTrace().print(EnumSet.of(Category.WM_CHANGES,Category.VERBOSE),""String_Node_Str"",w.gds.getGoal().level,w);
            gds_invalid_so_remove_goal(w);
          }
        }
        this.workingMemory.remove_wme_from_wm(w);
      }
    }
    for (Preference cand=candidates.value; cand != null; cand=cand.next_candidate) {
      if (cand.value.decider_flag == DeciderFlag.ALREADY_EXISTING_WME) {
        cand.value.decider_wme.preference=cand;
      }
 else {
        WmeImpl w=this.workingMemory.make_wme(cand.id,cand.attr,cand.value,false);
        s.addWme(w);
        w.preference=cand;
        this.parent_list_head=null;
        if ((w.preference.o_supported == true) && (w.preference.inst.match_goal_level != 1)) {
          if (w.preference.inst.match_goal.gds == null) {
            if (w.preference.inst.match_goal_level == w.preference.id.level) {
              create_gds_for_goal(w.preference.inst.match_goal);
            }
 else {
              if (!this.decisionCycle.isHalted()) {
                throw new IllegalStateException(""String_Node_Str"");
              }
            }
          }
          if (this.decisionCycle.isHalted()) {
            for (Preference pref=w.preference; pref != null; pref=pref.next) {
              if (DEBUG_GDS_HIGH) {
                context.getPrinter().print(""String_Node_Str"",pref,pref.id.level);
              }
              if (pref.inst.GDS_evaluated_already == false) {
                if (DEBUG_GDS_HIGH) {
                  context.getPrinter().print(""String_Node_Str"",pref.inst.prod.getName(),pref.inst.match_goal_level);
                }
                if (pref.inst.match_goal_level > pref.id.level) {
                  if (DEBUG_GDS_HIGH) {
                    context.getPrinter().print(""String_Node_Str"",pref.inst.prod.getName());
                  }
                }
 else {
                  if (DEBUG_GDS_HIGH) {
                    context.getPrinter().print(""String_Node_Str"",pref.inst.prod.getName());
                  }
                  uniquely_add_to_head_of_dll(pref.inst);
                  pref.inst.GDS_evaluated_already=true;
                }
              }
 else               if (DEBUG_GDS_HIGH) {
                context.getPrinter().print(""String_Node_Str"",pref.inst.prod.getName());
              }
            }
            if (DEBUG_GDS_HIGH) {
              context.getPrinter().print(""String_Node_Str"");
            }
            elaborate_gds();
            free_parent_list();
            if (DEBUG_GDS_HIGH) {
              context.getPrinter().print(""String_Node_Str"");
            }
          }
        }
        this.workingMemory.add_wme_to_wm(w);
      }
    }
    return;
  }
  if (s.getWmes() != null) {
    this.workingMemory.remove_wme_list_from_wm(s.getWmes(),false);
    s.removeAllWmes();
  }
  if (s.impasse_type != ImpasseType.NONE) {
    if (s.impasse_type != impasse_type) {
      remove_existing_attribute_impasse_for_slot(s);
      create_new_attribute_impasse_for_slot(s,impasse_type);
    }
    update_impasse_items(s.impasse_id,candidates.value);
  }
 else {
    create_new_attribute_impasse_for_slot(s,impasse_type);
    update_impasse_items(s.impasse_id,candidates.value);
  }
}","/** 
 * This routine decides a given slot, which must be a non-context slot. It calls run_preference_semantics() on the slot, then updates the wmes and/or impasse for the slot accordingly. <p>decide.cpp:1510:decide_non_context_slot
 * @param s
 */
private void decide_non_context_slot(Slot s){
  final ByRef<Preference> candidates=ByRef.create(null);
  final ImpasseType impasse_type=run_preference_semantics(s,candidates,false,false);
  if (impasse_type == ImpasseType.NONE) {
    if (s.impasse_type != ImpasseType.NONE)     remove_existing_attribute_impasse_for_slot(s);
    for (WmeImpl w=s.getWmes(); w != null; w=w.next)     w.value.decider_flag=DeciderFlag.NOTHING;
    for (Preference cand=candidates.value; cand != null; cand=cand.next_candidate)     cand.value.decider_flag=DeciderFlag.CANDIDATE;
    WmeImpl it=s.getWmes();
    while (it != null) {
      final WmeImpl w=it;
      it=w.next;
      if (w.value.decider_flag == DeciderFlag.CANDIDATE) {
        w.value.decider_flag=DeciderFlag.ALREADY_EXISTING_WME;
        w.value.decider_wme=w;
      }
 else {
        s.removeWme(w);
        if (w.gds != null) {
          if (w.gds.getGoal() != null) {
            context.getTrace().print(EnumSet.of(Category.WM_CHANGES,Category.VERBOSE),""String_Node_Str"",w.gds.getGoal().level,w);
            gds_invalid_so_remove_goal(w);
          }
        }
        this.workingMemory.remove_wme_from_wm(w);
      }
    }
    for (Preference cand=candidates.value; cand != null; cand=cand.next_candidate) {
      if (cand.value.decider_flag == DeciderFlag.ALREADY_EXISTING_WME) {
        cand.value.decider_wme.preference=cand;
      }
 else {
        WmeImpl w=this.workingMemory.make_wme(cand.id,cand.attr,cand.value,false);
        s.addWme(w);
        w.preference=cand;
        this.parent_list_head=null;
        if ((w.preference.o_supported == true) && (w.preference.inst.match_goal_level != 1)) {
          if (w.preference.inst.match_goal.gds == null) {
            if (w.preference.inst.match_goal_level == w.preference.id.level) {
              create_gds_for_goal(w.preference.inst.match_goal);
            }
 else {
              if (!this.decisionCycle.isHalted()) {
                throw new IllegalStateException(""String_Node_Str"");
              }
            }
          }
          if (!this.decisionCycle.isHalted()) {
            for (Preference pref=w.preference; pref != null; pref=pref.next) {
              if (DEBUG_GDS_HIGH) {
                context.getPrinter().print(""String_Node_Str"",pref,pref.id.level);
              }
              if (pref.inst.GDS_evaluated_already == false) {
                if (DEBUG_GDS_HIGH) {
                  context.getPrinter().print(""String_Node_Str"",pref.inst.prod.getName(),pref.inst.match_goal_level);
                }
                if (pref.inst.match_goal_level > pref.id.level) {
                  if (DEBUG_GDS_HIGH) {
                    context.getPrinter().print(""String_Node_Str"",pref.inst.prod.getName());
                  }
                }
 else {
                  if (DEBUG_GDS_HIGH) {
                    context.getPrinter().print(""String_Node_Str"",pref.inst.prod.getName());
                  }
                  uniquely_add_to_head_of_dll(pref.inst);
                  pref.inst.GDS_evaluated_already=true;
                }
              }
 else               if (DEBUG_GDS_HIGH) {
                context.getPrinter().print(""String_Node_Str"",pref.inst.prod.getName());
              }
            }
            if (DEBUG_GDS_HIGH) {
              context.getPrinter().print(""String_Node_Str"");
            }
            elaborate_gds();
            free_parent_list();
            if (DEBUG_GDS_HIGH) {
              context.getPrinter().print(""String_Node_Str"");
            }
          }
        }
        this.workingMemory.add_wme_to_wm(w);
      }
    }
    return;
  }
  if (s.getWmes() != null) {
    this.workingMemory.remove_wme_list_from_wm(s.getWmes(),false);
    s.removeAllWmes();
  }
  if (s.impasse_type != ImpasseType.NONE) {
    if (s.impasse_type != impasse_type) {
      remove_existing_attribute_impasse_for_slot(s);
      create_new_attribute_impasse_for_slot(s,impasse_type);
    }
    update_impasse_items(s.impasse_id,candidates.value);
  }
 else {
    create_new_attribute_impasse_for_slot(s,impasse_type);
    update_impasse_items(s.impasse_id,candidates.value);
  }
}",0.9998860658539364
12277,"/** 
 * REW BUG: this needs to be smarter to deal with wmes that get support  from multiple instantiations. for example ^enemy-out-there could be  made by 50 instantiations. if one of those instantiations goes, should  the goal be killed???? This routine says ""yes"" -- anytime a dependent  item gets changed, we're gonna yank out the goal -- even when that  i-supported element itself may not be removed (due to multiple  preferences). So, we'll say that this is a ""twitchy"" version of OPERAND2,  and leave open the possibility that other approaches may be better <p>decide.cpp:3040:gds_invalid_so_remove_goal
 * @param w
 */
public void gds_invalid_so_remove_goal(WmeImpl w){
  if (tempMemory.highest_goal_whose_context_changed != null) {
    if (tempMemory.highest_goal_whose_context_changed.level >= w.gds.getGoal().level) {
      tempMemory.highest_goal_whose_context_changed=w.gds.getGoal().higher_goal;
    }
  }
 else {
    tempMemory.highest_goal_whose_context_changed=w.gds.getGoal().higher_goal;
  }
  context.getTrace().print(Category.OPERAND2_REMOVALS,""String_Node_Str"",w.gds.getGoal(),w);
  remove_existing_context_and_descendents(w.gds.getGoal());
}","/** 
 * REW BUG: this needs to be smarter to deal with wmes that get support  from multiple instantiations. for example ^enemy-out-there could be  made by 50 instantiations. if one of those instantiations goes, should  the goal be killed???? This routine says ""yes"" -- anytime a dependent  item gets changed, we're gonna yank out the goal -- even when that  i-supported element itself may not be removed (due to multiple  preferences). So, we'll say that this is a ""twitchy"" version of OPERAND2,  and leave open the possibility that other approaches may be better <p>decide.cpp:3040:gds_invalid_so_remove_goal
 * @param w
 */
public void gds_invalid_so_remove_goal(WmeImpl w){
  if (tempMemory.highest_goal_whose_context_changed != null) {
    if (tempMemory.highest_goal_whose_context_changed.level >= w.gds.getGoal().level) {
      tempMemory.highest_goal_whose_context_changed=w.gds.getGoal().higher_goal;
    }
  }
 else {
    tempMemory.highest_goal_whose_context_changed=w.gds.getGoal().higher_goal;
    for (ListItem<Slot> sit=tempMemory.highest_goal_whose_context_changed.slots.first; sit != null; sit=sit.next) {
      final Slot s=sit.item;
      if (s.isa_context_slot && s.changed == null) {
        s.changed=s;
      }
    }
  }
  context.getTrace().print(Category.OPERAND2_REMOVALS,""String_Node_Str"",w.gds.getGoal(),w);
  remove_existing_context_and_descendents(w.gds.getGoal());
}",0.908948808128175
12278,"public Symbol rl_build_template_instantiation(Instantiation my_template_instance,Token tok,WmeImpl w){
  Production my_template=my_template_instance.prod;
  MakeAction my_action=my_template.action_list.asMakeAction();
  boolean chunk_var=this.chunker.variablize_this_chunk;
  IdentifierImpl id=my_agent.recMemory.instantiate_rhs_value(my_action.id,-1,'s',tok,w).asIdentifier();
  SymbolImpl attr=my_agent.recMemory.instantiate_rhs_value(my_action.attr,id.level,'a',tok,w);
  char first_letter=attr.getFirstLetter();
  SymbolImpl value=my_agent.recMemory.instantiate_rhs_value(my_action.value,id.level,first_letter,tok,w);
  SymbolImpl referent=my_agent.recMemory.instantiate_rhs_value(my_action.referent,id.level,first_letter,tok,w);
  this.chunker.variablize_this_chunk=true;
  this.chunker.variablization_tc=-1;
  MakeAction new_action=rl_make_simple_action(id,attr,value,referent);
  new_action.preference_type=PreferenceType.NUMERIC_INDIFFERENT;
  StringSymbol new_name_symbol;
  String new_name=""String_Node_Str"";
  String empty_string=""String_Node_Str"";
  int new_id=0;
  do {
    new_id=rl_next_template_id();
    new_name=(""String_Node_Str"" + empty_string + my_template.getName().getValue()+ ""String_Node_Str""+ new_id);
  }
 while (my_agent.getSymbols().findString(new_name) != null);
  new_name_symbol=my_agent.getSymbols().createString(new_name);
  ByRef<Condition> cond_top=ByRef.create(null);
  ByRef<Condition> cond_bottom=ByRef.create(null);
  Condition.copy_condition_list(my_template_instance.top_of_instantiated_conditions,cond_top,cond_bottom);
  rl_add_goal_or_impasse_tests_to_conds(cond_top.value);
  variableGenerator.reset(cond_top.value,null);
  this.chunker.variablization_tc=my_agent.syms.get_new_tc_number();
  this.chunker.variablize_condition_list(cond_top.value);
  this.chunker.variablize_nots_and_insert_into_conditions(my_template_instance.nots,cond_top.value);
  Production new_production=new Production(ProductionType.USER,new_name_symbol,cond_top.value,cond_bottom.value,new_action);
  try {
    ((DefaultProductionManager)my_agent.getProductions()).addProduction(new_production,false);
  }
 catch (  ReordererException e) {
    e.printStackTrace();
  }
  this.chunker.variablize_this_chunk=chunk_var;
  return new_name_symbol;
}","public Symbol rl_build_template_instantiation(Instantiation my_template_instance,Token tok,WmeImpl w){
  Production my_template=my_template_instance.prod;
  MakeAction my_action=my_template.action_list.asMakeAction();
  boolean chunk_var=this.chunker.variablize_this_chunk;
  this.chunker.variablize_this_chunk=true;
  StringSymbol new_name_symbol;
  String new_name=""String_Node_Str"";
  String empty_string=""String_Node_Str"";
  int new_id=0;
  do {
    new_id=rl_next_template_id();
    new_name=(""String_Node_Str"" + empty_string + my_template.getName().getValue()+ ""String_Node_Str""+ new_id);
  }
 while (my_agent.getSymbols().findString(new_name) != null);
  new_name_symbol=my_agent.getSymbols().createString(new_name);
  ByRef<Condition> cond_top=ByRef.create(null);
  ByRef<Condition> cond_bottom=ByRef.create(null);
  Condition.copy_condition_list(my_template_instance.top_of_instantiated_conditions,cond_top,cond_bottom);
  rl_add_goal_or_impasse_tests_to_conds(cond_top.value);
  this.chunker.variableGenerator.reset(cond_top.value,null);
  this.chunker.variablization_tc=my_agent.syms.get_new_tc_number();
  this.chunker.variablize_condition_list(cond_top.value);
  this.chunker.variablize_nots_and_insert_into_conditions(my_template_instance.nots,cond_top.value);
  IdentifierImpl id=my_agent.recMemory.instantiate_rhs_value(my_action.id,-1,'s',tok,w).asIdentifier();
  SymbolImpl attr=my_agent.recMemory.instantiate_rhs_value(my_action.attr,id.level,'a',tok,w);
  char first_letter=attr.getFirstLetter();
  SymbolImpl value=my_agent.recMemory.instantiate_rhs_value(my_action.value,id.level,first_letter,tok,w);
  SymbolImpl referent=my_agent.recMemory.instantiate_rhs_value(my_action.referent,id.level,first_letter,tok,w);
  MakeAction new_action=rl_make_simple_action(id,attr,value,referent);
  new_action.preference_type=PreferenceType.NUMERIC_INDIFFERENT;
  Production new_production=new Production(ProductionType.USER,new_name_symbol,cond_top.value,cond_bottom.value,new_action);
  try {
    ((DefaultProductionManager)my_agent.getProductions()).addProduction(new_production,false);
  }
 catch (  ReordererException e) {
    e.printStackTrace();
  }
  this.chunker.variablize_this_chunk=chunk_var;
  return new_name_symbol;
}",0.5503772747447847
12279,"/** 
 * This routine decides a given slot, which must be a non-context slot. It calls run_preference_semantics() on the slot, then updates the wmes and/or impasse for the slot accordingly. <p>decide.cpp:1510:decide_non_context_slot
 * @param s
 */
private void decide_non_context_slot(Slot s){
  final ByRef<Preference> candidates=ByRef.create(null);
  final ImpasseType impasse_type=run_preference_semantics(s,candidates,false,false);
  if (impasse_type == ImpasseType.NONE) {
    if (s.impasse_type != ImpasseType.NONE)     remove_existing_attribute_impasse_for_slot(s);
    for (WmeImpl w=s.getWmes(); w != null; w=w.next)     w.value.decider_flag=DeciderFlag.NOTHING;
    for (Preference cand=candidates.value; cand != null; cand=cand.next_candidate)     cand.value.decider_flag=DeciderFlag.CANDIDATE;
    WmeImpl it=s.getWmes();
    while (it != null) {
      final WmeImpl w=it;
      it=w.next;
      if (w.value.decider_flag == DeciderFlag.CANDIDATE) {
        w.value.decider_flag=DeciderFlag.ALREADY_EXISTING_WME;
        w.value.decider_wme=w;
      }
 else {
        s.removeWme(w);
        if (w.gds != null) {
          if (w.gds.getGoal() != null) {
            context.getTrace().print(EnumSet.of(Category.WM_CHANGES,Category.VERBOSE),""String_Node_Str"",w.gds.getGoal().level,w);
            gds_invalid_so_remove_goal(w);
          }
        }
        this.workingMemory.remove_wme_from_wm(w);
      }
    }
    for (Preference cand=candidates.value; cand != null; cand=cand.next_candidate) {
      if (cand.value.decider_flag == DeciderFlag.ALREADY_EXISTING_WME) {
        cand.value.decider_wme.preference=cand;
      }
 else {
        WmeImpl w=this.workingMemory.make_wme(cand.id,cand.attr,cand.value,false);
        s.addWme(w);
        w.preference=cand;
        this.parent_list_head=null;
        if ((w.preference.o_supported == true) && (w.preference.inst.match_goal_level != 1)) {
          if (w.preference.inst.match_goal.gds == null) {
            if (w.preference.inst.match_goal_level == w.preference.id.level) {
              create_gds_for_goal(w.preference.inst.match_goal);
            }
 else {
              throw new IllegalStateException(""String_Node_Str"");
            }
          }
          for (Preference pref=w.preference; pref != null; pref=pref.next) {
            if (DEBUG_GDS_HIGH) {
              context.getPrinter().print(""String_Node_Str"",pref,pref.id.level);
            }
            if (pref.inst.GDS_evaluated_already == false) {
              if (DEBUG_GDS_HIGH) {
                context.getPrinter().print(""String_Node_Str"",pref.inst.prod.getName(),pref.inst.match_goal_level);
              }
              if (pref.inst.match_goal_level > pref.id.level) {
                if (DEBUG_GDS_HIGH) {
                  context.getPrinter().print(""String_Node_Str"",pref.inst.prod.getName());
                }
              }
 else {
                if (DEBUG_GDS_HIGH) {
                  context.getPrinter().print(""String_Node_Str"",pref.inst.prod.getName());
                }
                uniquely_add_to_head_of_dll(pref.inst);
                pref.inst.GDS_evaluated_already=true;
              }
            }
 else             if (DEBUG_GDS_HIGH) {
              context.getPrinter().print(""String_Node_Str"",pref.inst.prod.getName());
            }
          }
          if (DEBUG_GDS_HIGH) {
            context.getPrinter().print(""String_Node_Str"");
          }
          elaborate_gds();
          free_parent_list();
          if (DEBUG_GDS_HIGH) {
            context.getPrinter().print(""String_Node_Str"");
          }
        }
        this.workingMemory.add_wme_to_wm(w);
      }
    }
    return;
  }
  if (s.getWmes() != null) {
    this.workingMemory.remove_wme_list_from_wm(s.getWmes(),false);
    s.removeAllWmes();
  }
  if (s.impasse_type != ImpasseType.NONE) {
    if (s.impasse_type != impasse_type) {
      remove_existing_attribute_impasse_for_slot(s);
      create_new_attribute_impasse_for_slot(s,impasse_type);
    }
    update_impasse_items(s.impasse_id,candidates.value);
  }
 else {
    create_new_attribute_impasse_for_slot(s,impasse_type);
    update_impasse_items(s.impasse_id,candidates.value);
  }
}","/** 
 * This routine decides a given slot, which must be a non-context slot. It calls run_preference_semantics() on the slot, then updates the wmes and/or impasse for the slot accordingly. <p>decide.cpp:1510:decide_non_context_slot
 * @param s
 */
private void decide_non_context_slot(Slot s){
  final ByRef<Preference> candidates=ByRef.create(null);
  final ImpasseType impasse_type=run_preference_semantics(s,candidates,false,false);
  if (impasse_type == ImpasseType.NONE) {
    if (s.impasse_type != ImpasseType.NONE)     remove_existing_attribute_impasse_for_slot(s);
    for (WmeImpl w=s.getWmes(); w != null; w=w.next)     w.value.decider_flag=DeciderFlag.NOTHING;
    for (Preference cand=candidates.value; cand != null; cand=cand.next_candidate)     cand.value.decider_flag=DeciderFlag.CANDIDATE;
    WmeImpl it=s.getWmes();
    while (it != null) {
      final WmeImpl w=it;
      it=w.next;
      if (w.value.decider_flag == DeciderFlag.CANDIDATE) {
        w.value.decider_flag=DeciderFlag.ALREADY_EXISTING_WME;
        w.value.decider_wme=w;
      }
 else {
        s.removeWme(w);
        if (w.gds != null) {
          if (w.gds.getGoal() != null) {
            context.getTrace().print(EnumSet.of(Category.WM_CHANGES,Category.VERBOSE),""String_Node_Str"",w.gds.getGoal().level,w);
            gds_invalid_so_remove_goal(w);
          }
        }
        this.workingMemory.remove_wme_from_wm(w);
      }
    }
    for (Preference cand=candidates.value; cand != null; cand=cand.next_candidate) {
      if (cand.value.decider_flag == DeciderFlag.ALREADY_EXISTING_WME) {
        cand.value.decider_wme.preference=cand;
      }
 else {
        WmeImpl w=this.workingMemory.make_wme(cand.id,cand.attr,cand.value,false);
        s.addWme(w);
        w.preference=cand;
        this.parent_list_head=null;
        if ((w.preference.o_supported == true) && (w.preference.inst.match_goal_level != 1)) {
          if (w.preference.inst.match_goal.gds == null) {
            if (w.preference.inst.match_goal_level == w.preference.id.level) {
              create_gds_for_goal(w.preference.inst.match_goal);
            }
 else {
              if (!this.decisionCycle.isHalted()) {
                throw new IllegalStateException(""String_Node_Str"");
              }
            }
          }
          if (this.decisionCycle.isHalted()) {
            for (Preference pref=w.preference; pref != null; pref=pref.next) {
              if (DEBUG_GDS_HIGH) {
                context.getPrinter().print(""String_Node_Str"",pref,pref.id.level);
              }
              if (pref.inst.GDS_evaluated_already == false) {
                if (DEBUG_GDS_HIGH) {
                  context.getPrinter().print(""String_Node_Str"",pref.inst.prod.getName(),pref.inst.match_goal_level);
                }
                if (pref.inst.match_goal_level > pref.id.level) {
                  if (DEBUG_GDS_HIGH) {
                    context.getPrinter().print(""String_Node_Str"",pref.inst.prod.getName());
                  }
                }
 else {
                  if (DEBUG_GDS_HIGH) {
                    context.getPrinter().print(""String_Node_Str"",pref.inst.prod.getName());
                  }
                  uniquely_add_to_head_of_dll(pref.inst);
                  pref.inst.GDS_evaluated_already=true;
                }
              }
 else               if (DEBUG_GDS_HIGH) {
                context.getPrinter().print(""String_Node_Str"",pref.inst.prod.getName());
              }
            }
            if (DEBUG_GDS_HIGH) {
              context.getPrinter().print(""String_Node_Str"");
            }
            elaborate_gds();
            free_parent_list();
            if (DEBUG_GDS_HIGH) {
              context.getPrinter().print(""String_Node_Str"");
            }
          }
        }
        this.workingMemory.add_wme_to_wm(w);
      }
    }
    return;
  }
  if (s.getWmes() != null) {
    this.workingMemory.remove_wme_list_from_wm(s.getWmes(),false);
    s.removeAllWmes();
  }
  if (s.impasse_type != ImpasseType.NONE) {
    if (s.impasse_type != impasse_type) {
      remove_existing_attribute_impasse_for_slot(s);
      create_new_attribute_impasse_for_slot(s,impasse_type);
    }
    update_impasse_items(s.impasse_id,candidates.value);
  }
 else {
    create_new_attribute_impasse_for_slot(s,impasse_type);
    update_impasse_items(s.impasse_id,candidates.value);
  }
}",0.9728533146918328
12280,"/** 
 * Halt this agent. A halted agent can only be restarted with an init-soar.
 * @param string Reason for the halt
 */
public void halt(String string){
  stop_soar=true;
  system_halted=true;
  reason_for_stopping=""String_Node_Str"";
}","/** 
 * Halt this agent. A halted agent can only be restarted with an init-soar.
 * @param string Reason for the halt
 */
public void halt(String string){
  stop_soar=true;
  system_halted=true;
  reason_for_stopping=string;
}",0.9503239740820736
12281,"/** 
 * <p>This routine is called once backtracing is finished. It goes through the ground conditions and builds a chunk_cond (see above) for each one. The chunk_cond includes two new copies of the condition: one to be used for the initial instantiation of the chunk, and one to be (variablized and) used for the chunk itself. <p>This routine also goes through the negated conditions and adds to the ground set (again building chunk_cond's) any negated conditions that are connected to the grounds. <p>At exit, the ""dest_top"" and ""dest_bottom"" arguments are set to point to the first and last chunk_cond in the ground set. The ""tc_to_use"" argument is the tc number that this routine will use to mark the TC of the ground set. At exit, this TC indicates the set of identifiers in the grounds. (This is used immediately afterwards to figure out which Nots must be added to the chunk.) <p>chunk.cpp:409:build_chunk_conds_for_grounds_and_add_negateds
 * @param dest_top
 * @param dest_bottom
 * @param tc_to_use
 */
private void build_chunk_conds_for_grounds_and_add_negateds(ByRef<ChunkCondition> dest_top,ByRef<ChunkCondition> dest_bottom,Marker tc_to_use){
  ListItem<ChunkCondition> first_cc=null;
  ListItem<ChunkCondition> prev_cc=null;
  while (!backtrace.grounds.isEmpty()) {
    Condition ground=backtrace.grounds.pop();
    ChunkCondition cc=new ChunkCondition(ground);
    cc.instantiated_cond=Condition.copy_condition(cc.cond);
    cc.variablized_cond=Condition.copy_condition(cc.cond);
    if (prev_cc != null) {
      prev_cc.next=cc.next_prev;
      cc.next_prev.previous=prev_cc;
      cc.variablized_cond.prev=prev_cc.item.variablized_cond;
      prev_cc.item.variablized_cond.next=cc.variablized_cond;
    }
 else {
      first_cc=cc.next_prev;
      cc.next_prev.previous=null;
      cc.variablized_cond.prev=null;
    }
    prev_cc=cc.next_prev;
    ground.add_cond_to_tc(tc_to_use,null,null);
  }
  final Trace trace=context.getTrace();
  trace.print(Category.BACKTRACING,""String_Node_Str"");
  while (!negated_set.all.isEmpty()) {
    final ChunkCondition cc=negated_set.all.getFirstItem();
    negated_set.remove_from_chunk_cond_set(cc);
    if (cc.cond.cond_is_in_tc(tc_to_use)) {
      trace.print(Category.BACKTRACING,""String_Node_Str"",cc.cond);
      cc.instantiated_cond=Condition.copy_condition(cc.cond);
      cc.variablized_cond=Condition.copy_condition(cc.cond);
      if (prev_cc != null) {
        prev_cc.next=cc.next_prev;
        cc.next_prev.previous=prev_cc;
        cc.variablized_cond.prev=prev_cc.item.variablized_cond;
        prev_cc.item.variablized_cond.next=cc.variablized_cond;
      }
 else {
        first_cc=cc.next_prev;
        cc.next_prev.previous=null;
        cc.variablized_cond.prev=null;
      }
      prev_cc=cc.next_prev;
    }
 else {
      if (!chunkThroughLocalNegations) {
        backtrace.report_local_negation(cc.cond);
        this.quiescence_t_flag=true;
        this.variablize_this_chunk=false;
      }
    }
  }
  if (prev_cc != null) {
    prev_cc.next=null;
    prev_cc.item.variablized_cond.next=null;
  }
 else {
    first_cc=null;
  }
  dest_top.value=first_cc.item;
  dest_bottom.value=prev_cc.item;
}","/** 
 * <p>This routine is called once backtracing is finished. It goes through the ground conditions and builds a chunk_cond (see above) for each one. The chunk_cond includes two new copies of the condition: one to be used for the initial instantiation of the chunk, and one to be (variablized and) used for the chunk itself. <p>This routine also goes through the negated conditions and adds to the ground set (again building chunk_cond's) any negated conditions that are connected to the grounds. <p>At exit, the ""dest_top"" and ""dest_bottom"" arguments are set to point to the first and last chunk_cond in the ground set. The ""tc_to_use"" argument is the tc number that this routine will use to mark the TC of the ground set. At exit, this TC indicates the set of identifiers in the grounds. (This is used immediately afterwards to figure out which Nots must be added to the chunk.) <p>chunk.cpp:409:build_chunk_conds_for_grounds_and_add_negateds
 * @param dest_top
 * @param dest_bottom
 * @param tc_to_use
 */
private void build_chunk_conds_for_grounds_and_add_negateds(ByRef<ChunkCondition> dest_top,ByRef<ChunkCondition> dest_bottom,Marker tc_to_use){
  ListItem<ChunkCondition> first_cc=null;
  ListItem<ChunkCondition> prev_cc=null;
  while (!backtrace.grounds.isEmpty()) {
    Condition ground=backtrace.grounds.pop();
    ChunkCondition cc=new ChunkCondition(ground);
    cc.instantiated_cond=Condition.copy_condition(cc.cond);
    cc.variablized_cond=Condition.copy_condition(cc.cond);
    if (prev_cc != null) {
      prev_cc.next=cc.next_prev;
      cc.next_prev.previous=prev_cc;
      cc.variablized_cond.prev=prev_cc.item.variablized_cond;
      prev_cc.item.variablized_cond.next=cc.variablized_cond;
      cc.instantiated_cond.prev=prev_cc.item.instantiated_cond;
      prev_cc.item.instantiated_cond.next=cc.instantiated_cond;
    }
 else {
      first_cc=cc.next_prev;
      cc.next_prev.previous=null;
      cc.variablized_cond.prev=null;
      cc.instantiated_cond.prev=null;
    }
    prev_cc=cc.next_prev;
    ground.add_cond_to_tc(tc_to_use,null,null);
  }
  final Trace trace=context.getTrace();
  trace.print(Category.BACKTRACING,""String_Node_Str"");
  while (!negated_set.all.isEmpty()) {
    final ChunkCondition cc=negated_set.all.getFirstItem();
    negated_set.remove_from_chunk_cond_set(cc);
    if (cc.cond.cond_is_in_tc(tc_to_use)) {
      trace.print(Category.BACKTRACING,""String_Node_Str"",cc.cond);
      cc.instantiated_cond=Condition.copy_condition(cc.cond);
      cc.variablized_cond=Condition.copy_condition(cc.cond);
      if (prev_cc != null) {
        prev_cc.next=cc.next_prev;
        cc.next_prev.previous=prev_cc;
        cc.variablized_cond.prev=prev_cc.item.variablized_cond;
        prev_cc.item.variablized_cond.next=cc.variablized_cond;
        cc.instantiated_cond.prev=prev_cc.item.instantiated_cond;
        prev_cc.item.instantiated_cond.next=cc.instantiated_cond;
      }
 else {
        first_cc=cc.next_prev;
        cc.next_prev.previous=null;
        cc.variablized_cond.prev=null;
        cc.instantiated_cond.prev=null;
      }
      prev_cc=cc.next_prev;
    }
 else {
      if (!chunkThroughLocalNegations) {
        backtrace.report_local_negation(cc.cond);
        this.quiescence_t_flag=true;
        this.variablize_this_chunk=false;
      }
    }
  }
  if (prev_cc != null) {
    prev_cc.next=null;
    prev_cc.item.variablized_cond.next=null;
    prev_cc.item.instantiated_cond.next=null;
  }
 else {
    first_cc=null;
  }
  dest_top.value=first_cc.item;
  dest_bottom.value=prev_cc.item;
}",0.9429928741092636
12282,"/** 
 * This the main chunking routine. It takes an instantiation, and a flag ""allow_variablization""--if FALSE, the chunk will not be variablized. (If TRUE, it may still not be variablized, due to chunk-free-problem-spaces, ^quiescence t, etc.) <p>chunk.cpp:902:chunk_instantiation
 * @param inst
 * @param allow_variablization
 */
public void chunk_instantiation(Instantiation inst,boolean allow_variablization){
  if (inst.match_goal == null)   return;
  Preference pref=null;
  for (ListItem<Preference> i=inst.preferences_generated.first; i != null; i=i.next) {
    final Preference temp=i.item;
    if (temp.id.level < inst.match_goal_level) {
      pref=temp;
      break;
    }
  }
  if (pref == null)   return;
  final Trace trace=context.getTrace();
  if (this.learningOn.value.get()) {
    if (pref.id.level < (inst.match_goal_level - 1)) {
      allow_variablization=false;
      inst.okay_to_variablize=false;
      trace.print(Category.VERBOSE,""String_Node_Str"");
    }
 else {
      allow_variablization=isLearningOn();
      inst.okay_to_variablize=isLearningOn();
      trace.print(Category.VERBOSE,""String_Node_Str"",allow_variablization);
    }
  }
  Preference results=get_results_for_instantiation(inst);
  if (results == null) {
    return;
  }
  for (IdentifierImpl g=inst.match_goal.higher_goal; g != null && g.allow_bottom_up_chunks; g=g.higher_goal)   g.allow_bottom_up_chunks=false;
  int grounds_level=inst.match_goal_level - 1;
  backtrace.backtrace_number++;
  if (backtrace.backtrace_number == 0)   backtrace.backtrace_number=1;
  backtrace.grounds_tc++;
  if (backtrace.grounds_tc == 0)   backtrace.grounds_tc=1;
  backtrace.potentials_tc++;
  if (backtrace.potentials_tc == 0)   backtrace.potentials_tc=1;
  backtrace.locals_tc++;
  if (backtrace.locals_tc == 0)   backtrace.locals_tc=1;
  backtrace.grounds.clear();
  backtrace.positive_potentials.clear();
  backtrace.locals.clear();
  this.instantiations_with_nots.clear();
  if (allow_variablization && (!learningAllGoals))   allow_variablization=inst.match_goal.allow_bottom_up_chunks;
  this.chunk_free_flag=false;
  this.chunky_flag=false;
  if (allow_variablization) {
    if (learningExcept) {
      if (chunk_free_problem_spaces.contains(inst.match_goal)) {
        allow_variablization=false;
        this.chunk_free_flag=true;
      }
    }
 else     if (learningOnly) {
      if (chunky_problem_spaces.contains(inst.match_goal)) {
        allow_variablization=true;
        this.chunky_flag=true;
      }
 else {
        allow_variablization=false;
        this.chunky_flag=false;
      }
    }
  }
  this.variablize_this_chunk=allow_variablization;
  ExplainChunk temp_explain_chunk=null;
  if (this.explain.isEnabled()) {
    temp_explain_chunk=new ExplainChunk();
    this.explain.reset_backtrace_list();
  }
  for (pref=results; pref != null; pref=pref.next_result) {
    trace.print(Category.BACKTRACING,""String_Node_Str"",pref);
    backtrace.backtrace_through_instantiation(pref.inst,grounds_level,null,0);
  }
  this.quiescence_t_flag=false;
  while (true) {
    backtrace.trace_locals(grounds_level);
    backtrace.trace_grounded_potentials();
    if (!backtrace.trace_ungrounded_potentials(grounds_level))     break;
  }
  backtrace.positive_potentials.clear();
  ByRef<ChunkCondition> top_cc=ByRef.create(null);
  ByRef<ChunkCondition> bottom_cc=ByRef.create(null);
  NotStruct nots=null;
{
    final Marker tc_for_grounds=DefaultMarker.create();
    build_chunk_conds_for_grounds_and_add_negateds(top_cc,bottom_cc,tc_for_grounds);
    nots=get_nots_for_instantiated_conditions(instantiations_with_nots,tc_for_grounds);
  }
  StringSymbol prod_name=null;
  ProductionType prod_type=null;
  boolean print_name=false;
  boolean print_prod=false;
  if (this.variablize_this_chunk) {
    this.chunks_this_d_cycle++;
    prod_name=generate_chunk_name_sym_constant(inst);
    prod_type=ProductionType.CHUNK;
    print_name=trace.isEnabled(Category.CHUNK_NAMES);
    trace.print(Category.CHUNK_NAMES,""String_Node_Str"",prod_name);
    print_prod=trace.isEnabled(Category.CHUNKS);
  }
 else {
    prod_name=context.getSymbols().generateUniqueString(""String_Node_Str"",justification_count);
    prod_type=ProductionType.JUSTIFICATION;
    print_name=trace.isEnabled(Category.JUSTIFICATION_NAMES);
    trace.print(Category.JUSTIFICATION_NAMES,""String_Node_Str"",prod_name);
    print_prod=trace.isEnabled(Category.JUSTIFICATIONS);
  }
  if (top_cc.value == null) {
    context.getPrinter().print(""String_Node_Str"");
    return;
  }
  if (this.chunks_this_d_cycle > maxChunks) {
    context.getPrinter().warn(""String_Node_Str"");
    this.maxChunksReached=true;
    return;
  }
  Condition lhs_top=top_cc.value.variablized_cond;
  Condition lhs_bottom=bottom_cc.value.variablized_cond;
  this.variableGenerator.reset(lhs_top,null);
  this.variablization_tc=DefaultMarker.create();
  variablize_condition_list(lhs_top);
  variablize_nots_and_insert_into_conditions(nots,lhs_top);
  Action rhs=copy_and_variablize_result_list(results);
  add_goal_or_impasse_tests(top_cc.value.next_prev);
  Production prod=new Production(prod_type,prod_name,lhs_top,lhs_bottom,rhs);
  try {
    context.getProductions().addChunk(prod);
  }
 catch (  ReordererException e) {
    final Printer p=context.getPrinter();
    p.print(""String_Node_Str"");
    Conditions.print_condition_list(p,lhs_top,2,false);
    p.print(""String_Node_Str"");
    Action.print_action_list(p,rhs,3,false);
    p.print(""String_Node_Str"");
    return;
  }
  Instantiation chunk_inst=null;
{
    ByRef<Condition> inst_lhs_top=ByRef.create(null);
    ByRef<Condition> inst_lhs_bottom=ByRef.create(null);
    reorder_instantiated_conditions(top_cc.value.next_prev.toListHead(),inst_lhs_top,inst_lhs_bottom);
    if (this.explain.isEnabled())     temp_explain_chunk.all_grounds=inst_lhs_top.value;
    chunk_inst=new Instantiation(prod,null,null);
    chunk_inst.top_of_instantiated_conditions=inst_lhs_top.value;
    chunk_inst.bottom_of_instantiated_conditions=inst_lhs_bottom.value;
    chunk_inst.nots=nots;
    chunk_inst.GDS_evaluated_already=false;
    if (!learningOnly) {
      if ((!this.variablize_this_chunk) && (this.chunk_free_flag) && (!this.quiescence_t_flag))       chunk_inst.okay_to_variablize=true;
 else       chunk_inst.okay_to_variablize=this.variablize_this_chunk;
    }
 else {
      if ((!this.variablize_this_chunk) && (!this.chunky_flag) && (!this.quiescence_t_flag))       chunk_inst.okay_to_variablize=true;
 else       chunk_inst.okay_to_variablize=this.variablize_this_chunk;
    }
    chunk_inst.in_ms=true;
    make_clones_of_results(results,chunk_inst);
    recMemory.fill_in_new_instantiation_stuff(chunk_inst,true,decider.top_goal);
  }
  if (this.explain.isEnabled()) {
    ByRef<Condition> new_top=ByRef.create(null);
    ByRef<Condition> new_bottom=ByRef.create(null);
    Condition.copy_condition_list(prod.condition_list,new_top,new_bottom);
    temp_explain_chunk.conds=new_top.value;
    temp_explain_chunk.actions=copy_and_variablize_result_list(results);
  }
  ProductionAddResult rete_addition_result=this.rete.add_production_to_rete(prod,chunk_inst,print_name,false);
  if (this.explain.isEnabled())   if ((rete_addition_result != ProductionAddResult.DUPLICATE_PRODUCTION) && ((prod_type != ProductionType.JUSTIFICATION) || (rete_addition_result != ProductionAddResult.REFRACTED_INST_DID_NOT_MATCH))) {
    temp_explain_chunk.name=prod_name.getValue();
    this.explain.explain_add_temp_to_chunk_list(temp_explain_chunk);
  }
 else {
  }
  if (print_prod && (rete_addition_result != ProductionAddResult.DUPLICATE_PRODUCTION)) {
    context.getPrinter().print(""String_Node_Str"");
    prod.print(context.getPrinter(),false);
  }
  if (rete_addition_result == ProductionAddResult.DUPLICATE_PRODUCTION) {
    context.getProductions().exciseProduction(prod,false);
  }
 else   if ((prod_type == ProductionType.JUSTIFICATION) && (rete_addition_result == ProductionAddResult.REFRACTED_INST_DID_NOT_MATCH)) {
    context.getProductions().exciseProduction(prod,false);
  }
  if (rete_addition_result != ProductionAddResult.REFRACTED_INST_MATCHED) {
    chunk_inst.in_ms=false;
  }
  if (rete_addition_result != ProductionAddResult.DUPLICATE_PRODUCTION) {
    context.getEventManager().fireEvent(new ProductionAddedEvent(context,prod));
  }
  chunk_inst.inProdList.insertAtHead(recMemory.newly_created_instantiations);
  if (!maxChunksReached)   chunk_instantiation(chunk_inst,variablize_this_chunk);
  return;
}","/** 
 * This the main chunking routine. It takes an instantiation, and a flag ""allow_variablization""--if FALSE, the chunk will not be variablized. (If TRUE, it may still not be variablized, due to chunk-free-problem-spaces, ^quiescence t, etc.) <p>chunk.cpp:902:chunk_instantiation
 * @param inst
 * @param allow_variablization
 */
public void chunk_instantiation(Instantiation inst,boolean allow_variablization){
  if (inst.match_goal == null)   return;
  Preference pref=null;
  for (ListItem<Preference> i=inst.preferences_generated.first; i != null; i=i.next) {
    final Preference temp=i.item;
    if (temp.id.level < inst.match_goal_level) {
      pref=temp;
      break;
    }
  }
  if (pref == null)   return;
  final Trace trace=context.getTrace();
  if (this.learningOn.value.get()) {
    if (pref.id.level < (inst.match_goal_level - 1)) {
      allow_variablization=false;
      inst.okay_to_variablize=false;
      trace.print(Category.VERBOSE,""String_Node_Str"");
    }
 else {
      allow_variablization=isLearningOn();
      inst.okay_to_variablize=isLearningOn();
      trace.print(Category.VERBOSE,""String_Node_Str"",allow_variablization);
    }
  }
  Preference results=get_results_for_instantiation(inst);
  if (results == null) {
    return;
  }
  for (IdentifierImpl g=inst.match_goal.higher_goal; g != null && g.allow_bottom_up_chunks; g=g.higher_goal)   g.allow_bottom_up_chunks=false;
  int grounds_level=inst.match_goal_level - 1;
  backtrace.backtrace_number++;
  if (backtrace.backtrace_number == 0)   backtrace.backtrace_number=1;
  backtrace.grounds_tc++;
  if (backtrace.grounds_tc == 0)   backtrace.grounds_tc=1;
  backtrace.potentials_tc++;
  if (backtrace.potentials_tc == 0)   backtrace.potentials_tc=1;
  backtrace.locals_tc++;
  if (backtrace.locals_tc == 0)   backtrace.locals_tc=1;
  backtrace.grounds.clear();
  backtrace.positive_potentials.clear();
  backtrace.locals.clear();
  this.instantiations_with_nots.clear();
  if (allow_variablization && (!learningAllGoals))   allow_variablization=inst.match_goal.allow_bottom_up_chunks;
  this.chunk_free_flag=false;
  this.chunky_flag=false;
  if (allow_variablization) {
    if (learningExcept) {
      if (chunk_free_problem_spaces.contains(inst.match_goal)) {
        allow_variablization=false;
        this.chunk_free_flag=true;
      }
    }
 else     if (learningOnly) {
      if (chunky_problem_spaces.contains(inst.match_goal)) {
        allow_variablization=true;
        this.chunky_flag=true;
      }
 else {
        allow_variablization=false;
        this.chunky_flag=false;
      }
    }
  }
  this.variablize_this_chunk=allow_variablization;
  ExplainChunk temp_explain_chunk=null;
  if (this.explain.isEnabled()) {
    temp_explain_chunk=new ExplainChunk();
    this.explain.reset_backtrace_list();
  }
  for (pref=results; pref != null; pref=pref.next_result) {
    trace.print(Category.BACKTRACING,""String_Node_Str"",pref);
    backtrace.backtrace_through_instantiation(pref.inst,grounds_level,null,0);
  }
  this.quiescence_t_flag=false;
  while (true) {
    backtrace.trace_locals(grounds_level);
    backtrace.trace_grounded_potentials();
    if (!backtrace.trace_ungrounded_potentials(grounds_level))     break;
  }
  backtrace.positive_potentials.clear();
  ByRef<ChunkCondition> top_cc=ByRef.create(null);
  ByRef<ChunkCondition> bottom_cc=ByRef.create(null);
  NotStruct nots=null;
{
    final Marker tc_for_grounds=DefaultMarker.create();
    build_chunk_conds_for_grounds_and_add_negateds(top_cc,bottom_cc,tc_for_grounds);
    nots=get_nots_for_instantiated_conditions(instantiations_with_nots,tc_for_grounds);
  }
  StringSymbol prod_name=null;
  ProductionType prod_type=null;
  boolean print_name=false;
  boolean print_prod=false;
  if (this.variablize_this_chunk) {
    this.chunks_this_d_cycle++;
    prod_name=generate_chunk_name_sym_constant(inst);
    prod_type=ProductionType.CHUNK;
    print_name=trace.isEnabled(Category.CHUNK_NAMES);
    trace.print(Category.CHUNK_NAMES,""String_Node_Str"",prod_name);
    print_prod=trace.isEnabled(Category.CHUNKS);
  }
 else {
    prod_name=context.getSymbols().generateUniqueString(""String_Node_Str"",justification_count);
    prod_type=ProductionType.JUSTIFICATION;
    print_name=trace.isEnabled(Category.JUSTIFICATION_NAMES);
    trace.print(Category.JUSTIFICATION_NAMES,""String_Node_Str"",prod_name);
    print_prod=trace.isEnabled(Category.JUSTIFICATIONS);
  }
  if (top_cc.value == null) {
    context.getPrinter().print(""String_Node_Str"");
    return;
  }
  if (this.chunks_this_d_cycle > maxChunks) {
    context.getPrinter().warn(""String_Node_Str"");
    this.maxChunksReached=true;
    return;
  }
  Condition lhs_top=top_cc.value.variablized_cond;
  Condition lhs_bottom=bottom_cc.value.variablized_cond;
  this.variableGenerator.reset(lhs_top,null);
  this.variablization_tc=DefaultMarker.create();
  variablize_condition_list(lhs_top);
  variablize_nots_and_insert_into_conditions(nots,lhs_top);
  Action rhs=copy_and_variablize_result_list(results);
  add_goal_or_impasse_tests(top_cc.value.next_prev);
  Production prod=new Production(prod_type,prod_name,lhs_top,lhs_bottom,rhs);
  try {
    context.getProductions().addChunk(prod);
  }
 catch (  ReordererException e) {
    final Printer p=context.getPrinter();
    p.print(""String_Node_Str"");
    Conditions.print_condition_list(p,lhs_top,2,false);
    p.print(""String_Node_Str"");
    Action.print_action_list(p,rhs,3,false);
    p.print(""String_Node_Str"");
    p.print(""String_Node_Str"");
    p.print(""String_Node_Str"");
    p.print(""String_Node_Str"");
    p.print(""String_Node_Str"");
    this.decisionCycle.halt(""String_Node_Str"");
    return;
  }
  Instantiation chunk_inst=null;
{
    ByRef<Condition> inst_lhs_top=ByRef.create(null);
    ByRef<Condition> inst_lhs_bottom=ByRef.create(null);
    reorder_instantiated_conditions(top_cc.value.next_prev.toListHead(),inst_lhs_top,inst_lhs_bottom);
    if (this.explain.isEnabled())     temp_explain_chunk.all_grounds=inst_lhs_top.value;
    chunk_inst=new Instantiation(prod,null,null);
    chunk_inst.top_of_instantiated_conditions=inst_lhs_top.value;
    chunk_inst.bottom_of_instantiated_conditions=inst_lhs_bottom.value;
    chunk_inst.nots=nots;
    chunk_inst.GDS_evaluated_already=false;
    if (!learningOnly) {
      if ((!this.variablize_this_chunk) && (this.chunk_free_flag) && (!this.quiescence_t_flag))       chunk_inst.okay_to_variablize=true;
 else       chunk_inst.okay_to_variablize=this.variablize_this_chunk;
    }
 else {
      if ((!this.variablize_this_chunk) && (!this.chunky_flag) && (!this.quiescence_t_flag))       chunk_inst.okay_to_variablize=true;
 else       chunk_inst.okay_to_variablize=this.variablize_this_chunk;
    }
    chunk_inst.in_ms=true;
    make_clones_of_results(results,chunk_inst);
    recMemory.fill_in_new_instantiation_stuff(chunk_inst,true,decider.top_goal);
  }
  if (this.explain.isEnabled()) {
    ByRef<Condition> new_top=ByRef.create(null);
    ByRef<Condition> new_bottom=ByRef.create(null);
    Condition.copy_condition_list(prod.condition_list,new_top,new_bottom);
    temp_explain_chunk.conds=new_top.value;
    temp_explain_chunk.actions=copy_and_variablize_result_list(results);
  }
  ProductionAddResult rete_addition_result=this.rete.add_production_to_rete(prod,chunk_inst,print_name,false);
  if (this.explain.isEnabled())   if ((rete_addition_result != ProductionAddResult.DUPLICATE_PRODUCTION) && ((prod_type != ProductionType.JUSTIFICATION) || (rete_addition_result != ProductionAddResult.REFRACTED_INST_DID_NOT_MATCH))) {
    temp_explain_chunk.name=prod_name.getValue();
    this.explain.explain_add_temp_to_chunk_list(temp_explain_chunk);
  }
 else {
  }
  if (print_prod && (rete_addition_result != ProductionAddResult.DUPLICATE_PRODUCTION)) {
    context.getPrinter().print(""String_Node_Str"");
    prod.print(context.getPrinter(),false);
  }
  if (rete_addition_result == ProductionAddResult.DUPLICATE_PRODUCTION) {
    context.getProductions().exciseProduction(prod,false);
  }
 else   if ((prod_type == ProductionType.JUSTIFICATION) && (rete_addition_result == ProductionAddResult.REFRACTED_INST_DID_NOT_MATCH)) {
    context.getProductions().exciseProduction(prod,false);
  }
  if (rete_addition_result != ProductionAddResult.REFRACTED_INST_MATCHED) {
    chunk_inst.in_ms=false;
  }
  if (rete_addition_result != ProductionAddResult.DUPLICATE_PRODUCTION) {
    context.getEventManager().fireEvent(new ProductionAddedEvent(context,prod));
  }
  chunk_inst.inProdList.insertAtHead(recMemory.newly_created_instantiations);
  if (!maxChunksReached)   chunk_instantiation(chunk_inst,variablize_this_chunk);
  return;
}",0.9897411984145488
12283,"/** 
 * reorder.cpp:398:restore_and_deallocate_saved_tests
 * @param value
 * @param tc
 * @param saved_tests
 */
private void restore_and_deallocate_saved_tests(Condition conds_list,int tc,SavedTest tests_to_restore){
  ListHead<Variable> new_vars=ListHead.newInstance();
  for (Condition cond=conds_list; cond != null; cond=cond.next) {
    PositiveCondition pc=cond.asPositiveCondition();
    if (pc == null) {
      continue;
    }
    ByRef<Test> id_test=ByRef.create(pc.id_test);
    tests_to_restore=restore_saved_tests_to_test(id_test,true,tc,tests_to_restore);
    pc.id_test=id_test.value;
    pc.id_test.addBoundVariables(tc,new_vars);
    ByRef<Test> attr_test=ByRef.create(pc.attr_test);
    tests_to_restore=restore_saved_tests_to_test(attr_test,false,tc,tests_to_restore);
    pc.attr_test=attr_test.value;
    pc.attr_test.addBoundVariables(tc,new_vars);
    ByRef<Test> value_test=ByRef.create(pc.value_test);
    tests_to_restore=restore_saved_tests_to_test(value_test,false,tc,tests_to_restore);
    pc.value_test=value_test.value;
    pc.value_test.addBoundVariables(tc,new_vars);
  }
  if (tests_to_restore != null) {
    final Printer p=trace.getPrinter();
    if (p.isPrintWarnings()) {
      p.warn(""String_Node_Str"",prodName);
    }
  }
  Variable.unmark(new_vars);
}","/** 
 * reorder.cpp:398:restore_and_deallocate_saved_tests
 * @param value
 * @param tc
 * @param saved_tests
 */
private void restore_and_deallocate_saved_tests(Condition conds_list,int tc,SavedTest tests_to_restore){
  ListHead<Variable> new_vars=ListHead.newInstance();
  for (Condition cond=conds_list; cond != null; cond=cond.next) {
    if (cond.asConjunctiveNegationCondition() != null) {
      continue;
    }
    if (cond.asPositiveCondition() != null) {
      PositiveCondition pc=cond.asPositiveCondition();
      ByRef<Test> id_test=ByRef.create(pc.id_test);
      tests_to_restore=restore_saved_tests_to_test(id_test,true,tc,tests_to_restore);
      pc.id_test=id_test.value;
      pc.id_test.addBoundVariables(tc,new_vars);
      ByRef<Test> attr_test=ByRef.create(pc.attr_test);
      tests_to_restore=restore_saved_tests_to_test(attr_test,false,tc,tests_to_restore);
      pc.attr_test=attr_test.value;
      pc.attr_test.addBoundVariables(tc,new_vars);
      ByRef<Test> value_test=ByRef.create(pc.value_test);
      tests_to_restore=restore_saved_tests_to_test(value_test,false,tc,tests_to_restore);
      pc.value_test=value_test.value;
      pc.value_test.addBoundVariables(tc,new_vars);
    }
 else     if (cond.asNegativeCondition() != null) {
      NegativeCondition nc=cond.asNegativeCondition();
      ByRef<Test> id_test=ByRef.create(nc.id_test);
      tests_to_restore=restore_saved_tests_to_test(id_test,true,tc,tests_to_restore);
      nc.id_test=id_test.value;
      nc.id_test.addBoundVariables(tc,new_vars);
      ByRef<Test> attr_test=ByRef.create(nc.attr_test);
      tests_to_restore=restore_saved_tests_to_test(attr_test,false,tc,tests_to_restore);
      nc.attr_test=attr_test.value;
      nc.attr_test.addBoundVariables(tc,new_vars);
      ByRef<Test> value_test=ByRef.create(nc.value_test);
      tests_to_restore=restore_saved_tests_to_test(value_test,false,tc,tests_to_restore);
      nc.value_test=value_test.value;
      nc.value_test.addBoundVariables(tc,new_vars);
    }
  }
  if (tests_to_restore != null) {
    final Printer p=trace.getPrinter();
    if (p.isPrintWarnings()) {
      p.warn(""String_Node_Str"",prodName);
    }
  }
  Variable.unmark(new_vars);
}",0.6687625035724493
12284,"/** 
 * reorder.cpp:303
 * @param conds_list
 * @return
 */
private SavedTest simplify_condition_list(Condition conds_list){
  SavedTest sts=null;
  for (Condition c=conds_list; c != null; c=c.next) {
    PositiveCondition pc=c.asPositiveCondition();
    if (pc != null) {
      ByRef<Test> id_test=ByRef.create(pc.id_test);
      sts=simplify_test(id_test,sts);
      pc.id_test=id_test.value;
      ByRef<Test> attr_test=ByRef.create(pc.attr_test);
      sts=simplify_test(attr_test,sts);
      pc.attr_test=attr_test.value;
      ByRef<Test> value_test=ByRef.create(pc.value_test);
      sts=simplify_test(value_test,sts);
      pc.value_test=value_test.value;
    }
  }
  return sts;
}","/** 
 * reorder.cpp:303
 * @param conds_list
 * @return
 */
private SavedTest simplify_condition_list(Condition conds_list){
  SavedTest sts=null;
  for (Condition c=conds_list; c != null; c=c.next) {
    if (c.asConjunctiveNegationCondition() != null) {
      continue;
    }
    if (c.asPositiveCondition() != null) {
      PositiveCondition pc=c.asPositiveCondition();
      ByRef<Test> id_test=ByRef.create(pc.id_test);
      sts=simplify_test(id_test,sts);
      pc.id_test=id_test.value;
      ByRef<Test> attr_test=ByRef.create(pc.attr_test);
      sts=simplify_test(attr_test,sts);
      pc.attr_test=attr_test.value;
      ByRef<Test> value_test=ByRef.create(pc.value_test);
      sts=simplify_test(value_test,sts);
      pc.value_test=value_test.value;
    }
 else     if (c.asNegativeCondition() != null) {
      NegativeCondition nc=c.asNegativeCondition();
      ByRef<Test> id_test=ByRef.create(nc.id_test);
      sts=simplify_test(id_test,sts);
      nc.id_test=id_test.value;
      ByRef<Test> attr_test=ByRef.create(nc.attr_test);
      sts=simplify_test(attr_test,sts);
      nc.attr_test=attr_test.value;
      ByRef<Test> value_test=ByRef.create(nc.value_test);
      sts=simplify_test(value_test,sts);
      nc.value_test=value_test.value;
    }
  }
  return sts;
}",0.6521518987341772
12285,"/** 
 * This scans down the goal stack and checks the consistency of the current decision versus the current preferences for the slot, if the preferences have changed. consistency.cpp:326:check_context_slot_decisions
 * @param level
 * @return
 */
private boolean check_context_slot_decisions(int level){
  if (DEBUG_CONSISTENCY_CHECK) {
    if (tempMemory.highest_goal_whose_context_changed != null)     context.getPrinter().print(""String_Node_Str"",tempMemory.highest_goal_whose_context_changed);
  }
  for (IdentifierImpl goal=tempMemory.highest_goal_whose_context_changed; goal != null && goal.level <= level; goal=goal.lower_goal) {
    if (DEBUG_CONSISTENCY_CHECK) {
      context.getPrinter().print(""String_Node_Str"",goal);
    }
    Slot s=goal.operator_slot;
    if ((goal.lower_goal != null) || (s.getWmes() != null)) {
      if (DEBUG_CONSISTENCY_CHECK) {
        context.getPrinter().print(""String_Node_Str"");
      }
      if (s.changed != null) {
        if (DEBUG_CONSISTENCY_CHECK) {
          context.getPrinter().print(""String_Node_Str"");
        }
        if (!decision_consistent_with_current_preferences(goal,s)) {
          if (DEBUG_CONSISTENCY_CHECK) {
            context.getPrinter().print(""String_Node_Str"",goal);
          }
          remove_current_decision(s);
          return false;
        }
      }
    }
  }
  return true;
}","/** 
 * This scans down the goal stack and checks the consistency of the current decision versus the current preferences for the slot, if the preferences have changed. consistency.cpp:326:check_context_slot_decisions
 * @param level
 * @return
 */
private boolean check_context_slot_decisions(int level){
  if (DEBUG_CONSISTENCY_CHECK) {
    if (tempMemory.highest_goal_whose_context_changed != null)     context.getPrinter().print(""String_Node_Str"",tempMemory.highest_goal_whose_context_changed);
  }
  for (IdentifierImpl goal=tempMemory.highest_goal_whose_context_changed; goal != null && goal.level <= level; goal=goal.lower_goal) {
    if (DEBUG_CONSISTENCY_CHECK) {
      context.getPrinter().print(""String_Node_Str"",goal);
    }
    Slot s=goal.operator_slot;
    if ((goal.lower_goal != null) || (s.getWmes() != null)) {
      if (DEBUG_CONSISTENCY_CHECK) {
        context.getPrinter().print(""String_Node_Str"");
      }
      if (s.changed != null) {
        if (DEBUG_CONSISTENCY_CHECK) {
          context.getPrinter().print(""String_Node_Str"");
        }
        if (!decision_consistent_with_current_preferences(goal,s)) {
          if (DEBUG_CONSISTENCY_CHECK) {
            context.getPrinter().print(""String_Node_Str"",goal);
          }
          if (context.getTrace().isEnabled(Category.VERBOSE) || context.getTrace().isEnabled(Category.WM_CHANGES))           context.getTrace().print(""String_Node_Str"",goal);
          remove_current_decision(s);
          return false;
        }
      }
    }
  }
  return true;
}",0.9394673123486684
12286,"/** 
 * This decides the given context slot. It normally returns TRUE, but returns FALSE if the ONLY change as a result of the decision procedure was a change in the set of ^item's on the impasse below the given slot. <p>decide.cpp:2092:decide_context_slot
 * @param goal
 * @param s
 * @param predict (defaulted to false in CSoar)
 * @return
 */
private boolean decide_context_slot(IdentifierImpl goal,Slot s,boolean predict){
  ImpasseType impasse_type;
  SymbolImpl attribute_of_impasse;
  final ByRef<Preference> candidates=ByRef.create(null);
  if (!context_slot_is_decidable(s)) {
    impasse_type=ImpasseType.NO_CHANGE;
    candidates.value=null;
    if (predict) {
      decisionManip.predict_set(""String_Node_Str"");
      return true;
    }
  }
 else {
    impasse_type=run_preference_semantics(s,candidates,false,false);
    if (predict) {
switch (impasse_type) {
case CONSTRAINT_FAILURE:
        decisionManip.predict_set(""String_Node_Str"");
      break;
case CONFLICT:
    decisionManip.predict_set(""String_Node_Str"");
  break;
case TIE:
decisionManip.predict_set(""String_Node_Str"");
break;
case NO_CHANGE:
decisionManip.predict_set(""String_Node_Str"");
break;
default :
if (candidates.value == null || (candidates.value.value.asIdentifier() == null)) decisionManip.predict_set(""String_Node_Str"");
 else {
final IdentifierImpl tempId=candidates.value.value.asIdentifier();
final String temp=String.format(""String_Node_Str"",tempId);
decisionManip.predict_set(temp);
}
break;
}
return true;
}
remove_wmes_for_context_slot(s);
if (impasse_type == ImpasseType.NONE) {
if (candidates.value == null) {
impasse_type=ImpasseType.NO_CHANGE;
}
 else if (candidates.value.next_candidate != null) {
throw new IllegalStateException(""String_Node_Str"");
}
}
}
s.changed=null;
if (impasse_type == ImpasseType.NO_CHANGE) {
if (s.getWmes() != null) {
attribute_of_impasse=s.attr;
}
 else {
attribute_of_impasse=context.predefinedSyms.state_symbol;
}
}
 else {
attribute_of_impasse=s.attr;
}
if (attribute_of_impasse == context.predefinedSyms.state_symbol) {
remove_wmes_for_context_slot(goal.operator_slot);
}
if (impasse_type == ImpasseType.NONE) {
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_add_ref();
if (goal.lower_goal != null) remove_existing_context_and_descendents(goal.lower_goal);
WmeImpl w=this.workingMemory.make_wme(s.id,s.attr,candidates.value.value,false);
s.addWme(w);
w.preference=candidates.value;
w.preference.preference_add_ref();
this.workingMemory.add_wme_to_wm(w);
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_remove_ref(recMemory);
if (rl.rl_enabled()) rl.rl_store_data(goal,candidates.value);
return true;
}
if (impasse_type != ImpasseType.NO_CHANGE) goal.rl_info.impasse_type=impasse_type;
 else if (s.getWmes() != null) goal.rl_info.impasse_type=ImpasseType.OP_NO_CHANGE;
 else goal.rl_info.impasse_type=ImpasseType.STATE_NO_CHANGE;
if ((impasse_type == type_of_existing_impasse(goal)) && (attribute_of_impasse == attribute_of_existing_impasse(goal))) {
update_impasse_items(goal.lower_goal,candidates.value);
return false;
}
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_add_ref();
if (goal.lower_goal != null) remove_existing_context_and_descendents(goal.lower_goal);
if (this.waitsnc.value.get() && (impasse_type == ImpasseType.NO_CHANGE) && (attribute_of_impasse == context.predefinedSyms.state_symbol)) {
}
 else {
create_new_context(attribute_of_impasse,impasse_type);
update_impasse_items(goal.lower_goal,candidates.value);
}
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_remove_ref(recMemory);
return true;
}","/** 
 * This decides the given context slot. It normally returns TRUE, but returns FALSE if the ONLY change as a result of the decision procedure was a change in the set of ^item's on the impasse below the given slot. <p>decide.cpp:2092:decide_context_slot
 * @param goal
 * @param s
 * @param predict (defaulted to false in CSoar)
 * @return
 */
private boolean decide_context_slot(IdentifierImpl goal,Slot s,boolean predict){
  ImpasseType impasse_type;
  SymbolImpl attribute_of_impasse;
  final ByRef<Preference> candidates=ByRef.create(null);
  if (!context_slot_is_decidable(s)) {
    impasse_type=ImpasseType.NO_CHANGE;
    candidates.value=null;
    if (predict) {
      decisionManip.predict_set(""String_Node_Str"");
      return true;
    }
  }
 else {
    impasse_type=run_preference_semantics(s,candidates,false,false);
    if (predict) {
switch (impasse_type) {
case CONSTRAINT_FAILURE:
        decisionManip.predict_set(""String_Node_Str"");
      break;
case CONFLICT:
    decisionManip.predict_set(""String_Node_Str"");
  break;
case TIE:
decisionManip.predict_set(""String_Node_Str"");
break;
case NO_CHANGE:
decisionManip.predict_set(""String_Node_Str"");
break;
default :
if (candidates.value == null || (candidates.value.value.asIdentifier() == null)) decisionManip.predict_set(""String_Node_Str"");
 else {
final IdentifierImpl tempId=candidates.value.value.asIdentifier();
final String temp=String.format(""String_Node_Str"",tempId);
decisionManip.predict_set(temp);
}
break;
}
return true;
}
remove_wmes_for_context_slot(s);
if (impasse_type == ImpasseType.NONE) {
if (candidates.value == null) {
impasse_type=ImpasseType.NO_CHANGE;
}
 else if (candidates.value.next_candidate != null) {
throw new IllegalStateException(""String_Node_Str"");
}
}
}
s.changed=null;
if (impasse_type == ImpasseType.NO_CHANGE) {
if (s.getWmes() != null) {
attribute_of_impasse=s.attr;
}
 else {
attribute_of_impasse=context.predefinedSyms.state_symbol;
}
}
 else {
attribute_of_impasse=s.attr;
}
if (attribute_of_impasse == context.predefinedSyms.state_symbol) {
remove_wmes_for_context_slot(goal.operator_slot);
}
if (impasse_type == ImpasseType.NONE) {
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_add_ref();
if (goal.lower_goal != null) {
if (context.getTrace().isEnabled(Category.VERBOSE) || context.getTrace().isEnabled(Category.WM_CHANGES)) context.getTrace().print(""String_Node_Str"",goal.lower_goal);
remove_existing_context_and_descendents(goal.lower_goal);
}
WmeImpl w=this.workingMemory.make_wme(s.id,s.attr,candidates.value.value,false);
s.addWme(w);
w.preference=candidates.value;
w.preference.preference_add_ref();
this.workingMemory.add_wme_to_wm(w);
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_remove_ref(recMemory);
if (rl.rl_enabled()) rl.rl_store_data(goal,candidates.value);
return true;
}
if (impasse_type != ImpasseType.NO_CHANGE) goal.rl_info.impasse_type=impasse_type;
 else if (s.getWmes() != null) goal.rl_info.impasse_type=ImpasseType.OP_NO_CHANGE;
 else goal.rl_info.impasse_type=ImpasseType.STATE_NO_CHANGE;
if ((impasse_type == type_of_existing_impasse(goal)) && (attribute_of_impasse == attribute_of_existing_impasse(goal))) {
update_impasse_items(goal.lower_goal,candidates.value);
return false;
}
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_add_ref();
if (goal.lower_goal != null) {
if (context.getTrace().isEnabled(Category.VERBOSE) || context.getTrace().isEnabled(Category.WM_CHANGES)) context.getTrace().print(""String_Node_Str"",goal.lower_goal);
remove_existing_context_and_descendents(goal.lower_goal);
}
if (this.waitsnc.value.get() && (impasse_type == ImpasseType.NO_CHANGE) && (attribute_of_impasse == context.predefinedSyms.state_symbol)) {
}
 else {
create_new_context(attribute_of_impasse,impasse_type);
update_impasse_items(goal.lower_goal,candidates.value);
}
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_remove_ref(recMemory);
return true;
}",0.6902201740911418
12287,"/** 
 * <p>Moved here from consistency since it accesses no other state and is only ever called from decider. <p>consistency.cpp:41:remove_operator_if_necessary
 * @param s
 * @param w
 */
private void remove_operator_if_necessary(Slot s,WmeImpl w){
  if (s.getWmes() != null) {
    if (s.getWmes().value == w.value) {
      context.getTrace().print(Category.OPERAND2_REMOVALS,""String_Node_Str"",w);
      this.remove_wmes_for_context_slot(s);
      if (s.id.lower_goal != null)       this.remove_existing_context_and_descendents(s.id.lower_goal);
    }
  }
}","/** 
 * <p>Moved here from consistency since it accesses no other state and is only ever called from decider. <p>consistency.cpp:41:remove_operator_if_necessary
 * @param s
 * @param w
 */
private void remove_operator_if_necessary(Slot s,WmeImpl w){
  if (s.getWmes() != null) {
    if (s.getWmes().value == w.value) {
      context.getTrace().print(Category.OPERAND2_REMOVALS,""String_Node_Str"",w);
      this.remove_wmes_for_context_slot(s);
      if (s.id.lower_goal != null) {
        if (context.getTrace().isEnabled(Category.VERBOSE) || context.getTrace().isEnabled(Category.WM_CHANGES))         context.getTrace().print(""String_Node_Str"",s.id.lower_goal);
        this.remove_existing_context_and_descendents(s.id.lower_goal);
      }
    }
  }
}",0.8519083969465648
12288,"/** 
 * <p>chunk.cpp:251:copy_and_variablize_result_list
 * @param pref
 * @return
 */
private MakeAction copy_and_variablize_result_list(Preference pref){
  if (pref == null)   return null;
  MakeAction a=new MakeAction();
  a.id=new RhsSymbolValue(variablize_symbol(pref.id));
  a.attr=new RhsSymbolValue(variablize_symbol(pref.attr));
  a.value=new RhsSymbolValue(variablize_symbol(pref.value));
  a.preference_type=pref.type;
  if (pref.type.isBinary()) {
    a.referent=new RhsSymbolValue(variablize_symbol(pref.referent));
  }
  a.next=copy_and_variablize_result_list(pref.next_result);
  return a;
}","/** 
 * <p>chunk.cpp:251:copy_and_variablize_result_list
 * @param pref
 * @return
 */
private MakeAction copy_and_variablize_result_list(Preference pref){
  if (pref == null)   return null;
  MakeAction a=new MakeAction();
  a.id=variablize_symbol(pref.id).toRhsValue();
  a.attr=variablize_symbol(pref.attr).toRhsValue();
  a.value=variablize_symbol(pref.value).toRhsValue();
  a.preference_type=pref.type;
  if (pref.type.isBinary()) {
    a.referent=variablize_symbol(pref.referent).toRhsValue();
  }
  a.next=copy_and_variablize_result_list(pref.next_result);
  return a;
}",0.581081081081081
12289,"/** 
 * reinforcement_learning.cpp:992:rl_make_simple_action
 * @param id_sym
 * @param attr_sym
 * @param val_sym
 * @param ref_sym
 * @return
 */
MakeAction rl_make_simple_action(IdentifierImpl id_sym,SymbolImpl attr_sym,SymbolImpl val_sym,SymbolImpl ref_sym){
  MakeAction rhs=new MakeAction();
  rhs.id=new RhsSymbolValue(this.chunker.variablize_symbol(id_sym));
  rhs.attr=new RhsSymbolValue(this.chunker.variablize_symbol(attr_sym));
  rhs.value=new RhsSymbolValue(this.chunker.variablize_symbol(val_sym));
  rhs.referent=new RhsSymbolValue(this.chunker.variablize_symbol(ref_sym));
  return rhs;
}","/** 
 * reinforcement_learning.cpp:992:rl_make_simple_action
 * @param id_sym
 * @param attr_sym
 * @param val_sym
 * @param ref_sym
 * @return
 */
MakeAction rl_make_simple_action(IdentifierImpl id_sym,SymbolImpl attr_sym,SymbolImpl val_sym,SymbolImpl ref_sym){
  MakeAction rhs=new MakeAction();
  rhs.id=this.chunker.variablize_symbol(id_sym).toRhsValue();
  rhs.attr=this.chunker.variablize_symbol(attr_sym).toRhsValue();
  rhs.value=this.chunker.variablize_symbol(val_sym).toRhsValue();
  rhs.referent=this.chunker.variablize_symbol(ref_sym).toRhsValue();
  return rhs;
}",0.688135593220339
12290,"/** 
 * reinforcement_learning.cpp:1193:rl_perform_update
 * @param i
 * @param g
 */
public void rl_perform_update(double op_value,IdentifierImpl goal){
  ReinforcementLearningInfo data=goal.rl_info;
  boolean using_gaps=(rl_get_parameter(RL_PARAM_TEMPORAL_EXTENSION,RL_RETURN_LONG) == RL_TE_ON);
  double alpha=rl_get_parameter(RL_PARAM_LEARNING_RATE);
  double lambda=rl_get_parameter(RL_PARAM_ET_DECAY_RATE);
  double gamma=rl_get_parameter(RL_PARAM_DISCOUNT_RATE);
  double tolerance=rl_get_parameter(RL_PARAM_ET_TOLERANCE);
  double update=data.reward;
  if (using_gaps)   update*=Math.pow(gamma,(double)data.reward_age);
  update+=(Math.pow(gamma,(double)data.step) * op_value);
  update-=data.previous_q;
  rl_set_stat(RL_STAT_UPDATE_ERROR,(double)(-update));
  if (lambda == 0) {
    if (!data.eligibility_traces.isEmpty())     data.eligibility_traces.clear();
  }
 else {
    Iterator<Map.Entry<Production,Double>> it=data.eligibility_traces.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<Production,Double> e=it.next();
      e.setValue(e.getValue() * lambda);
      e.setValue(e.getValue() * Math.pow(gamma,data.step));
      if (e.getValue() < tolerance) {
        it.remove();
      }
    }
  }
  if (data.num_prev_op_rl_rules != 0) {
    double trace_increment=(1.0 / data.num_prev_op_rl_rules);
    for (    Production c : data.prev_op_rl_rules) {
      if (c != null) {
        Double iter=data.eligibility_traces.get(c);
        if (iter != null) {
          iter+=trace_increment;
          data.eligibility_traces.put(c,iter);
        }
 else {
          data.eligibility_traces.put(c,trace_increment);
        }
      }
    }
  }
  for (  Map.Entry<Production,Double> iter : data.eligibility_traces.entrySet()) {
    Production prod=iter.getKey();
    Symbol referent=prod.action_list.asMakeAction().referent.asSymbolValue().getSym();
    double temp=0.0;
    if (referent.asInteger() != null) {
      temp=referent.asInteger().getValue();
    }
 else     if (referent.asDouble() != null) {
      temp=referent.asDouble().getValue();
    }
    double delta=update * alpha * iter.getValue();
    my_agent.getTrace().print(Category.RL,""String_Node_Str"",prod.getName().getValue(),temp,temp + delta);
    temp+=delta;
    prod.action_list.asMakeAction().referent=new RhsSymbolValue(my_agent.syms.createDouble(temp));
    prod.rl_update_count+=1;
    if (!prod.instantiations.isEmpty()) {
      for (      Instantiation inst : prod.instantiations) {
        for (        Preference pref : inst.preferences_generated) {
          pref.referent=my_agent.syms.createDouble(temp);
        }
      }
    }
  }
  data.reward=0.0;
  data.step=0;
  data.impasse_type=ImpasseType.NONE;
}","/** 
 * reinforcement_learning.cpp:1193:rl_perform_update
 * @param i
 * @param g
 */
public void rl_perform_update(double op_value,IdentifierImpl goal){
  ReinforcementLearningInfo data=goal.rl_info;
  boolean using_gaps=(rl_get_parameter(RL_PARAM_TEMPORAL_EXTENSION,RL_RETURN_LONG) == RL_TE_ON);
  double alpha=rl_get_parameter(RL_PARAM_LEARNING_RATE);
  double lambda=rl_get_parameter(RL_PARAM_ET_DECAY_RATE);
  double gamma=rl_get_parameter(RL_PARAM_DISCOUNT_RATE);
  double tolerance=rl_get_parameter(RL_PARAM_ET_TOLERANCE);
  double update=data.reward;
  if (using_gaps)   update*=Math.pow(gamma,(double)data.reward_age);
  update+=(Math.pow(gamma,(double)data.step) * op_value);
  update-=data.previous_q;
  rl_set_stat(RL_STAT_UPDATE_ERROR,(double)(-update));
  if (lambda == 0) {
    if (!data.eligibility_traces.isEmpty())     data.eligibility_traces.clear();
  }
 else {
    Iterator<Map.Entry<Production,Double>> it=data.eligibility_traces.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<Production,Double> e=it.next();
      e.setValue(e.getValue() * lambda);
      e.setValue(e.getValue() * Math.pow(gamma,data.step));
      if (e.getValue() < tolerance) {
        it.remove();
      }
    }
  }
  if (data.num_prev_op_rl_rules != 0) {
    double trace_increment=(1.0 / data.num_prev_op_rl_rules);
    for (    Production c : data.prev_op_rl_rules) {
      if (c != null) {
        Double iter=data.eligibility_traces.get(c);
        if (iter != null) {
          iter+=trace_increment;
          data.eligibility_traces.put(c,iter);
        }
 else {
          data.eligibility_traces.put(c,trace_increment);
        }
      }
    }
  }
  for (  Map.Entry<Production,Double> iter : data.eligibility_traces.entrySet()) {
    Production prod=iter.getKey();
    Symbol referent=prod.action_list.asMakeAction().referent.asSymbolValue().getSym();
    double temp=0.0;
    if (referent.asInteger() != null) {
      temp=referent.asInteger().getValue();
    }
 else     if (referent.asDouble() != null) {
      temp=referent.asDouble().getValue();
    }
    double delta=update * alpha * iter.getValue();
    my_agent.getTrace().print(Category.RL,""String_Node_Str"",prod.getName().getValue(),temp,temp + delta);
    temp+=delta;
    prod.action_list.asMakeAction().referent=my_agent.syms.createDouble(temp).toRhsValue();
    prod.rl_update_count+=1;
    if (!prod.instantiations.isEmpty()) {
      for (      Instantiation inst : prod.instantiations) {
        for (        Preference pref : inst.preferences_generated) {
          pref.referent=my_agent.syms.createDouble(temp);
        }
      }
    }
  }
  data.reward=0.0;
  data.step=0;
  data.impasse_type=ImpasseType.NONE;
}",0.98579073629821
12291,"/** 
 * Given the id, attribute, and value already read, this routine parses zero or more   {@code <preference-specifier>'s}.  If preferences other than reject and acceptable are specified, it prints a warning message that they are being ignored.  It builds an action list for creating an ACCEPTABLE preference.  If binary  preferences are encountered, a warning message is printed and  the production is ignored (returns null).  It returns null if any  other error occurred.  This works in conjunction with the code that supports attribute_preferences_mode == 2.  Anywhere that attribute_preferences_mode == 2 is tested, the code now tests for operand2_mode == true. <pre>  {@code <value_make> ::= <rhs_value> <preferences> <preferences> ::= [,] | <preference_specifier>+    <preference-specifier> ::= <naturally-unary-preference> [,] | <forced-unary-preference> | <binary-preference> <rhs_value> [,]}</pre> <p>parser.cpp::parse_preferences_soar8_non_operator
 * @param id
 * @param attr
 * @param value
 * @return action
 * @throws IOException
 * @throws ParserException
 */
Action parse_preferences_soar8_non_operator(SymbolImpl id,RhsValue attr,RhsValue value) throws IOException, ParserException {
  boolean saw_plus_sign=(currentType() == LexemeType.PLUS);
  PreferenceType preference_type=parse_preference_specifier_without_referent();
  if ((preference_type == PreferenceType.ACCEPTABLE) && (!saw_plus_sign)) {
    consumeComma();
  }
  Action prev_a=null;
  while (true) {
    if (preference_type.isBinary()) {
      error(String.format(""String_Node_Str"" + ""String_Node_Str"",id,attr,value));
    }
    if ((preference_type != PreferenceType.ACCEPTABLE) && (preference_type != PreferenceType.REJECT)) {
      printer.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",id,attr,value);
    }
    if (preference_type == PreferenceType.REJECT) {
      MakeAction a=new MakeAction();
      a.next=prev_a;
      prev_a=a;
      a.preference_type=preference_type;
      a.id=new RhsSymbolValue(id);
      a.attr=attr.copy();
      a.value=value.copy();
    }
    saw_plus_sign=(currentType() == LexemeType.PLUS);
    preference_type=parse_preference_specifier_without_referent();
    if ((preference_type == PreferenceType.ACCEPTABLE) && (!saw_plus_sign)) {
      if (prev_a == null) {
        MakeAction a=new MakeAction();
        a.next=prev_a;
        prev_a=a;
        a.preference_type=PreferenceType.ACCEPTABLE;
        a.id=new RhsSymbolValue(id);
        a.attr=attr.copy();
        a.value=value.copy();
      }
      return prev_a;
    }
  }
}","/** 
 * Given the id, attribute, and value already read, this routine parses zero or more   {@code <preference-specifier>'s}.  If preferences other than reject and acceptable are specified, it prints a warning message that they are being ignored.  It builds an action list for creating an ACCEPTABLE preference.  If binary  preferences are encountered, a warning message is printed and  the production is ignored (returns null).  It returns null if any  other error occurred.  This works in conjunction with the code that supports attribute_preferences_mode == 2.  Anywhere that attribute_preferences_mode == 2 is tested, the code now tests for operand2_mode == true. <pre>  {@code <value_make> ::= <rhs_value> <preferences> <preferences> ::= [,] | <preference_specifier>+    <preference-specifier> ::= <naturally-unary-preference> [,] | <forced-unary-preference> | <binary-preference> <rhs_value> [,]}</pre> <p>parser.cpp::parse_preferences_soar8_non_operator
 * @param id
 * @param attr
 * @param value
 * @return action
 * @throws IOException
 * @throws ParserException
 */
Action parse_preferences_soar8_non_operator(SymbolImpl id,RhsValue attr,RhsValue value) throws IOException, ParserException {
  boolean saw_plus_sign=(currentType() == LexemeType.PLUS);
  PreferenceType preference_type=parse_preference_specifier_without_referent();
  if ((preference_type == PreferenceType.ACCEPTABLE) && (!saw_plus_sign)) {
    consumeComma();
  }
  Action prev_a=null;
  while (true) {
    if (preference_type.isBinary()) {
      error(String.format(""String_Node_Str"" + ""String_Node_Str"",id,attr,value));
    }
    if ((preference_type != PreferenceType.ACCEPTABLE) && (preference_type != PreferenceType.REJECT)) {
      printer.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",id,attr,value);
    }
    if (preference_type == PreferenceType.REJECT) {
      MakeAction a=new MakeAction();
      a.next=prev_a;
      prev_a=a;
      a.preference_type=preference_type;
      a.id=id.toRhsValue();
      a.attr=attr.copy();
      a.value=value.copy();
    }
    saw_plus_sign=(currentType() == LexemeType.PLUS);
    preference_type=parse_preference_specifier_without_referent();
    if ((preference_type == PreferenceType.ACCEPTABLE) && (!saw_plus_sign)) {
      if (prev_a == null) {
        MakeAction a=new MakeAction();
        a.next=prev_a;
        prev_a=a;
        a.preference_type=PreferenceType.ACCEPTABLE;
        a.id=id.toRhsValue();
        a.attr=attr.copy();
        a.value=value.copy();
      }
      return prev_a;
    }
  }
}",0.993359375
12292,"/** 
 * Given the id, attribute, and value already read, this routine parses zero or more   {@code <preference-specifier>'s }.  It builds and returns an action list for these RHS make's.  It returns null if any error occurred. <pre>  {@code <value_make> ::= <rhs_value> <preferences> <preferences> ::= [,] | <preference_specifier>+    <preference-specifier> ::= <naturally-unary-preference> [,] | <forced-unary-preference> | <binary-preference> <rhs_value> [,]}</pre> <p>parser.cpp::parse_preferences
 * @param id
 * @param attr
 * @param value
 * @return an action list
 * @throws IOException
 * @throws ParserException
 */
Action parse_preferences(SymbolImpl id,RhsValue attr,RhsValue value) throws IOException, ParserException {
  boolean saw_plus_sign=(currentType() == LexemeType.PLUS);
  PreferenceType preference_type=parse_preference_specifier_without_referent();
  if ((preference_type == PreferenceType.ACCEPTABLE) && (!saw_plus_sign)) {
    consumeComma();
  }
  Action prev_a=null;
  while (true) {
    final RhsValue referent;
    if (preference_type.isBinary()) {
      referent=parse_rhs_value();
      consumeComma();
    }
 else {
      referent=null;
    }
    final MakeAction a=new MakeAction();
    a.preference_type=preference_type;
    a.next=prev_a;
    prev_a=a;
    a.id=new RhsSymbolValue(id);
    a.attr=attr.copy();
    a.value=value.copy();
    if (preference_type.isBinary()) {
      a.referent=referent;
    }
    saw_plus_sign=(currentType() == LexemeType.PLUS);
    preference_type=parse_preference_specifier_without_referent();
    if ((preference_type == PreferenceType.ACCEPTABLE) && (!saw_plus_sign)) {
      return prev_a;
    }
  }
}","/** 
 * Given the id, attribute, and value already read, this routine parses zero or more   {@code <preference-specifier>'s }.  It builds and returns an action list for these RHS make's.  It returns null if any error occurred. <pre>  {@code <value_make> ::= <rhs_value> <preferences> <preferences> ::= [,] | <preference_specifier>+    <preference-specifier> ::= <naturally-unary-preference> [,] | <forced-unary-preference> | <binary-preference> <rhs_value> [,]}</pre> <p>parser.cpp::parse_preferences
 * @param id
 * @param attr
 * @param value
 * @return an action list
 * @throws IOException
 * @throws ParserException
 */
Action parse_preferences(SymbolImpl id,RhsValue attr,RhsValue value) throws IOException, ParserException {
  boolean saw_plus_sign=(currentType() == LexemeType.PLUS);
  PreferenceType preference_type=parse_preference_specifier_without_referent();
  if ((preference_type == PreferenceType.ACCEPTABLE) && (!saw_plus_sign)) {
    consumeComma();
  }
  Action prev_a=null;
  while (true) {
    final RhsValue referent;
    if (preference_type.isBinary()) {
      referent=parse_rhs_value();
      consumeComma();
    }
 else {
      referent=null;
    }
    final MakeAction a=new MakeAction();
    a.preference_type=preference_type;
    a.next=prev_a;
    prev_a=a;
    a.id=id.toRhsValue();
    a.attr=attr.copy();
    a.value=value.copy();
    if (preference_type.isBinary()) {
      a.referent=referent;
    }
    saw_plus_sign=(currentType() == LexemeType.PLUS);
    preference_type=parse_preference_specifier_without_referent();
    if ((preference_type == PreferenceType.ACCEPTABLE) && (!saw_plus_sign)) {
      return prev_a;
    }
  }
}",0.9949086552860138
12293,"/** 
 * Given the id already read, this routine parses an <attr_value_make>. It builds and returns an action list for these RHS make's.  It returns null if any error occurred. <pre>  {@code <attr_value_make> ::= ^ <rhs_value> <value_make>+ <value_make> ::= <rhs_value> <preferences>}</pre> <p>parser.cpp::parse_attr_value_make
 * @param id
 * @return make action
 * @throws IOException
 * @throws ParserException
 */
Action parse_attr_value_make(SymbolImpl id) throws IOException, ParserException {
  RhsValue value;
  Action new_actions, last;
  expect(LexemeType.UP_ARROW,""String_Node_Str"");
  RhsValue attr=parse_rhs_value();
  if (attr == null) {
    return null;
  }
  String szAttribute=String.format(""String_Node_Str"",attr);
  Action all_actions=null;
  while (currentType() == LexemeType.PERIOD) {
    lexer.getNextLexeme();
    char first_letter=attr.getFirstLetter();
    String namebuf=""String_Node_Str"" + first_letter + '*'+ placeholder_counter[first_letter - 'a']++;
    Variable new_var=syms.make_variable(namebuf);
    new_var.current_binding_value=null;
    if (!""String_Node_Str"".equals(szAttribute)) {
      new_actions=parse_preferences_soar8_non_operator(id,attr,new RhsSymbolValue(new_var));
    }
 else {
      new_actions=parse_preferences(id,attr,new RhsSymbolValue(new_var));
    }
    for (last=new_actions; last.next != null; last=last.next) {
    }
    last.next=all_actions;
    all_actions=new_actions;
    id=new_var;
    attr=parse_rhs_value();
    if (attr == null) {
      return null;
    }
    szAttribute=String.format(""String_Node_Str"",attr);
  }
  do {
    value=parse_rhs_value();
    if (!""String_Node_Str"".equals(szAttribute)) {
      new_actions=parse_preferences_soar8_non_operator(id,attr,value);
    }
 else {
      new_actions=parse_preferences(id,attr,value);
    }
    for (last=new_actions; last.next != null; last=last.next) {
    }
    last.next=all_actions;
    all_actions=new_actions;
  }
 while ((currentType() != LexemeType.R_PAREN) && (currentType() != LexemeType.UP_ARROW));
  return all_actions;
}","/** 
 * Given the id already read, this routine parses an <attr_value_make>. It builds and returns an action list for these RHS make's.  It returns null if any error occurred. <pre>  {@code <attr_value_make> ::= ^ <rhs_value> <value_make>+ <value_make> ::= <rhs_value> <preferences>}</pre> <p>parser.cpp::parse_attr_value_make
 * @param id
 * @return make action
 * @throws IOException
 * @throws ParserException
 */
Action parse_attr_value_make(SymbolImpl id) throws IOException, ParserException {
  RhsValue value;
  Action new_actions, last;
  expect(LexemeType.UP_ARROW,""String_Node_Str"");
  RhsValue attr=parse_rhs_value();
  if (attr == null) {
    return null;
  }
  String szAttribute=String.format(""String_Node_Str"",attr);
  Action all_actions=null;
  while (currentType() == LexemeType.PERIOD) {
    lexer.getNextLexeme();
    char first_letter=attr.getFirstLetter();
    String namebuf=""String_Node_Str"" + first_letter + '*'+ placeholder_counter[first_letter - 'a']++;
    Variable new_var=syms.make_variable(namebuf);
    new_var.current_binding_value=null;
    if (!""String_Node_Str"".equals(szAttribute)) {
      new_actions=parse_preferences_soar8_non_operator(id,attr,new_var.toRhsValue());
    }
 else {
      new_actions=parse_preferences(id,attr,new_var.toRhsValue());
    }
    for (last=new_actions; last.next != null; last=last.next) {
    }
    last.next=all_actions;
    all_actions=new_actions;
    id=new_var;
    attr=parse_rhs_value();
    if (attr == null) {
      return null;
    }
    szAttribute=String.format(""String_Node_Str"",attr);
  }
  do {
    value=parse_rhs_value();
    if (!""String_Node_Str"".equals(szAttribute)) {
      new_actions=parse_preferences_soar8_non_operator(id,attr,value);
    }
 else {
      new_actions=parse_preferences(id,attr,value);
    }
    for (last=new_actions; last.next != null; last=last.next) {
    }
    last.next=all_actions;
    all_actions=new_actions;
  }
 while ((currentType() != LexemeType.R_PAREN) && (currentType() != LexemeType.UP_ARROW));
  return all_actions;
}",0.9619512195121952
12294,"/** 
 * Parses an   {@code <rhs_value>}. Returns an rhs_value, or null if any error occurred. <pre>  {@code <rhs_value> ::= <constant> | <function_call> | variable  <constant> ::= sym_constant | int_constant | float_constant}</pre> <p>parser.cpp::parse_rhs_value
 * @return
 * @throws IOException
 * @throws ParserException
 */
RhsValue parse_rhs_value() throws IOException, ParserException {
  if (currentType() == LexemeType.L_PAREN) {
    lexer.getNextLexeme();
    return parse_function_call_after_lparen(false);
  }
  if ((currentType() == LexemeType.SYM_CONSTANT) || (currentType() == LexemeType.INTEGER) || (currentType() == LexemeType.FLOAT)|| (currentType() == LexemeType.VARIABLE)) {
    RhsValue rv=new RhsSymbolValue(make_symbol_for_current_lexeme());
    lexer.getNextLexeme();
    return rv;
  }
  error(""String_Node_Str"");
  throw new IllegalStateException(""String_Node_Str"");
}","/** 
 * Parses an   {@code <rhs_value>}. Returns an rhs_value, or null if any error occurred. <pre>  {@code <rhs_value> ::= <constant> | <function_call> | variable  <constant> ::= sym_constant | int_constant | float_constant}</pre> <p>parser.cpp::parse_rhs_value
 * @return
 * @throws IOException
 * @throws ParserException
 */
RhsValue parse_rhs_value() throws IOException, ParserException {
  if (currentType() == LexemeType.L_PAREN) {
    lexer.getNextLexeme();
    return parse_function_call_after_lparen(false);
  }
  if ((currentType() == LexemeType.SYM_CONSTANT) || (currentType() == LexemeType.INTEGER) || (currentType() == LexemeType.FLOAT)|| (currentType() == LexemeType.VARIABLE)) {
    RhsValue rv=make_symbol_for_current_lexeme().toRhsValue();
    lexer.getNextLexeme();
    return rv;
  }
  error(""String_Node_Str"");
  throw new IllegalStateException(""String_Node_Str"");
}",0.9567172568858908
12295,"/** 
 * Tests whether two RHS's (i.e., action lists) are the same (except for function calls).  This is used for finding duplicate productions. rete.cpp:3374:same_rhs
 * @param rhs1
 * @param rhs2
 * @return
 */
public static boolean same_rhs(Action rhs1,Action rhs2){
  Action a1=rhs1;
  Action a2=rhs2;
  while (a1 != null && a2 != null) {
    if (a1.asFunctionAction() != null)     return false;
    if (a2.asFunctionAction() != null)     return false;
    if (a1.preference_type != a2.preference_type)     return false;
    MakeAction ma1=a1.asMakeAction();
    MakeAction ma2=a2.asMakeAction();
    if (ma1.id != ma2.id)     return false;
    if (ma1.attr != ma2.attr)     return false;
    if (ma1.value != ma2.value)     return false;
    if (ma1.preference_type.isBinary()) {
      if (ma1.referent != ma2.referent) {
        return false;
      }
    }
    a1=a1.next;
    a2=a2.next;
  }
  if (a1 != a2)   return false;
  return true;
}","/** 
 * Tests whether two RHS's (i.e., action lists) are the same (except for function calls).  This is used for finding duplicate productions. <p>rete.cpp:3374:same_rhs
 * @param rhs1
 * @param rhs2
 * @return
 */
public static boolean same_rhs(Action rhs1,Action rhs2){
  Action a1=rhs1;
  Action a2=rhs2;
  while (a1 != null && a2 != null) {
    if (a1.asFunctionAction() != null)     return false;
    if (a2.asFunctionAction() != null)     return false;
    if (a1.preference_type != a2.preference_type)     return false;
    MakeAction ma1=a1.asMakeAction();
    MakeAction ma2=a2.asMakeAction();
    if (!ma1.id.equals(ma2.id))     return false;
    if (!ma1.attr.equals(ma2.attr))     return false;
    if (!ma1.value.equals(ma2.value))     return false;
    if (ma1.preference_type.isBinary()) {
      if (ma1.referent != ma2.referent) {
        return false;
      }
    }
    a1=a1.next;
    a2=a2.next;
  }
  if (a1 != a2)   return false;
  return true;
}",0.6774699424986932
12296,"/** 
 * @param fieldNum
 * @param levelsUp
 */
public ReteLocation(int fieldNum,int levelsUp){
  this.fieldNum=fieldNum;
  this.levelsUp=levelsUp;
}","private ReteLocation(int fieldNum,int levelsUp){
  this.fieldNum=fieldNum;
  this.levelsUp=levelsUp;
}",0.784
12297,"public RhsSymbolValue(SymbolImpl sym){
  this.sym=sym;
}","/** 
 * Construct a RHS symbol value. <b>This should only be used by  {@link SymbolImpl}! If you want one of these, get it through  {@link SymbolImpl#toRhsValue()}.
 * @param sym the symbol
 */
public RhsSymbolValue(SymbolImpl sym){
  this.sym=sym;
}",0.3660130718954248
12298,"/** 
 * ""Change"" the symbol this value refers to, this method creates and  returns a new value, or returns <code>this</code> if the symbol is the same as the one it already holds. This takes advantage of the fact that these objects are immutable to avoid unnecessary allocations.
 * @param newSym The new symbol for the value
 * @return New RhsSymbolValue with the given symbol value
 */
public RhsSymbolValue setSymbol(SymbolImpl newSym){
  return sym == newSym ? this : new RhsSymbolValue(newSym);
}","/** 
 * ""Change"" the symbol this value refers to, this method creates and  returns a new value, or returns <code>this</code> if the symbol is the same as the one it already holds. This takes advantage of the fact that these objects are immutable to avoid unnecessary allocations.
 * @param newSym The new symbol for the value
 * @return New RhsSymbolValue with the given symbol value
 */
public RhsSymbolValue setSymbol(SymbolImpl newSym){
  return sym == newSym ? this : newSym.toRhsValue();
}",0.9809045226130654
12299,"/** 
 * When we print a production (but not when we fire one), we have to reconstruct the RHS actions. This is because many of the variables in the RHS have been replaced by references to Rete locations (i.e., rather than specifying <v>, we specify ""value field 3 levels up"" or ""the 7th RHS unbound variable"". The routines below copy rhs_value's and actions, and substitute variable names for such references. For RHS unbound variables, we gensym new variable names. <p>rete.cpp:4234:copy_rhs_value_and_substitute_varnames <p>TODO This function doesn't belong here. It creates a circular dependency with the rete package <p>TODO This function should be polymorphic on RhsValue
 * @param rete
 * @param rv
 * @param cond
 * @param first_letter
 * @return
 */
public static RhsValue copy_rhs_value_and_substitute_varnames(Rete rete,RhsValue rv,Condition cond,char first_letter){
  final ReteLocation rl=rv.asReteLocation();
  if (rl != null) {
    SymbolImpl sym=Rete.var_bound_in_reconstructed_conds(cond,rl.getFieldNum(),rl.getLevelsUp());
    return new RhsSymbolValue(sym);
  }
  final UnboundVariable uv=rv.asUnboundVariable();
  if (uv != null) {
    final int index=uv.getIndex();
    SymbolImpl sym=rete.getRhsVariableBinding(index);
    if (sym == null) {
      sym=rete.variableGenerator.generate_new_variable(Character.toString(uv.getFirstLetter()));
      rete.setRhsVariableBinding(index,sym);
    }
    return new RhsSymbolValue(sym);
  }
  final RhsFunctionCall fc=rv.asFunctionCall();
  if (fc != null) {
    final RhsFunctionCall newFc=new RhsFunctionCall(fc.getName(),fc.isStandalone());
    for (    RhsValue c : fc.getArguments()) {
      newFc.addArgument(copy_rhs_value_and_substitute_varnames(rete,c,cond,first_letter));
    }
    return newFc;
  }
  return new RhsSymbolValue(rv.asSymbolValue().getSym());
}","/** 
 * When we print a production (but not when we fire one), we have to reconstruct the RHS actions. This is because many of the variables in the RHS have been replaced by references to Rete locations (i.e., rather than specifying <v>, we specify ""value field 3 levels up"" or ""the 7th RHS unbound variable"". The routines below copy rhs_value's and actions, and substitute variable names for such references. For RHS unbound variables, we gensym new variable names. <p>rete.cpp:4234:copy_rhs_value_and_substitute_varnames <p>TODO This function doesn't belong here. It creates a circular dependency with the rete package <p>TODO This function should be polymorphic on RhsValue
 * @param rete
 * @param rv
 * @param cond
 * @param first_letter
 * @return
 */
public static RhsValue copy_rhs_value_and_substitute_varnames(Rete rete,RhsValue rv,Condition cond,char first_letter){
  final ReteLocation rl=rv.asReteLocation();
  if (rl != null) {
    SymbolImpl sym=Rete.var_bound_in_reconstructed_conds(cond,rl.getFieldNum(),rl.getLevelsUp());
    return sym.toRhsValue();
  }
  final UnboundVariable uv=rv.asUnboundVariable();
  if (uv != null) {
    final int index=uv.getIndex();
    SymbolImpl sym=rete.getRhsVariableBinding(index);
    if (sym == null) {
      sym=rete.variableGenerator.generate_new_variable(Character.toString(uv.getFirstLetter()));
      rete.setRhsVariableBinding(index,sym);
    }
    return sym.toRhsValue();
  }
  final RhsFunctionCall fc=rv.asFunctionCall();
  if (fc != null) {
    final RhsFunctionCall newFc=new RhsFunctionCall(fc.getName(),fc.isStandalone());
    for (    RhsValue c : fc.getArguments()) {
      newFc.addArgument(copy_rhs_value_and_substitute_varnames(rete,c,cond,first_letter));
    }
    return newFc;
  }
  return rv.asSymbolValue().getSym().toRhsValue();
}",0.9749793786087436
12300,"/** 
 * Initialize the lexer routine table <p>lexer.cpp::init_lexer
 */
private void init_lexer(){
  for (int i=0; i < lexer_routines.length; i++) {
switch (i) {
case '@':
      lexer_routines[i]=new BasicLexerRoutine(LexemeType.AT);
    break;
case '(':
  lexer_routines[i]=lex_lparen;
break;
case ')':
lexer_routines[i]=lex_rparen;
break;
case '+':
lexer_routines[i]=lex_plus;
break;
case '-':
lexer_routines[i]=lex_minus;
break;
case '~':
lexer_routines[i]=new BasicLexerRoutine(LexemeType.TILDE);
break;
case '^':
lexer_routines[i]=new BasicLexerRoutine(LexemeType.UP_ARROW);
break;
case '{':
lexer_routines[i]=new BasicLexerRoutine(LexemeType.L_BRACE);
break;
case '}':
lexer_routines[i]=new BasicLexerRoutine(LexemeType.R_BRACE);
break;
case '!':
lexer_routines[i]=new BasicLexerRoutine(LexemeType.EXCLAMATION_POINT);
break;
case '>':
lexer_routines[i]=lex_greater;
break;
case '<':
lexer_routines[i]=lex_less;
break;
case '=':
lexer_routines[i]=lex_equal;
break;
case '&':
lexer_routines[i]=lex_ampersand;
break;
case '|':
lexer_routines[i]=lex_vbar;
break;
case ',':
lexer_routines[i]=new BasicLexerRoutine(LexemeType.COMMA);
break;
case '.':
lexer_routines[i]=lex_period;
break;
case '""':
lexer_routines[i]=lex_quote;
break;
default :
if (Character.isDigit((char)i)) {
lexer_routines[i]=lex_digit;
}
 else if (constituent_char[i]) {
lexer_routines[i]=lex_constituent_string;
}
 else {
lexer_routines[i]=lex_unknown;
}
}
}
}","/** 
 * Initialize the lexer routine table <p>lexer.cpp::init_lexer
 */
private void init_lexer(){
  for (int i=0; i < lexer_routines.length; i++) {
switch (i) {
case '@':
      lexer_routines[i]=new BasicLexerRoutine(LexemeType.AT);
    break;
case '(':
  lexer_routines[i]=lex_lparen;
break;
case ')':
lexer_routines[i]=lex_rparen;
break;
case '+':
lexer_routines[i]=lex_plus;
break;
case '-':
lexer_routines[i]=lex_minus;
break;
case '~':
lexer_routines[i]=new BasicLexerRoutine(LexemeType.TILDE);
break;
case '^':
lexer_routines[i]=new BasicLexerRoutine(LexemeType.UP_ARROW);
break;
case '{':
lexer_routines[i]=new BasicLexerRoutine(LexemeType.L_BRACE);
break;
case '}':
lexer_routines[i]=new BasicLexerRoutine(LexemeType.R_BRACE);
break;
case '!':
lexer_routines[i]=new BasicLexerRoutine(LexemeType.EXCLAMATION_POINT);
break;
case '>':
lexer_routines[i]=lex_greater;
break;
case '<':
lexer_routines[i]=lex_less;
break;
case '=':
lexer_routines[i]=lex_equal;
break;
case '&':
lexer_routines[i]=lex_ampersand;
break;
case '|':
lexer_routines[i]=lex_vbar;
break;
case ',':
lexer_routines[i]=new BasicLexerRoutine(LexemeType.COMMA);
break;
case '.':
lexer_routines[i]=lex_period;
break;
case '""':
lexer_routines[i]=lex_quote;
break;
default :
if (Character.isDigit((char)i)) {
lexer_routines[i]=lex_digit;
}
 else if (isConstituentChar((char)i)) {
lexer_routines[i]=lex_constituent_string;
}
 else {
lexer_routines[i]=lex_unknown;
}
}
}
}",0.9864158829676072
12301,"/** 
 * This is a utility routine which figures out what kind(s) of symbol a given string could represent. At entry: s, length_of_s represent the string. At exit: possible_xxx is set to TRUE/FALSE to indicate whether the given string could represent that kind of symbol; rereadable is set to TRUE indicating whether the lexer would read the given string as a symbol with exactly the same name (as opposed to treating it as a special lexeme like ""+"", changing upper to lower case, etc. <p>lexer.cpp:1225:determine_possible_symbol_types_for_string
 */
public static PossibleSymbolTypes determine_possible_symbol_types_for_string(String s){
  PossibleSymbolTypes p=new PossibleSymbolTypes();
  if (s.length() == 0) {
    return p;
  }
  if (Lexer.number_starters[s.charAt(0)]) {
    try {
      Integer.parseInt(s);
      p.possible_ic=true;
    }
 catch (    NumberFormatException e) {
    }
    try {
      Float.parseFloat(s);
      p.possible_fc=s.indexOf('.') != -1;
    }
 catch (    NumberFormatException e) {
    }
  }
  for (int i=0; i < s.length(); ++i) {
    if (!Lexer.constituent_char[s.charAt(i)]) {
      return p;
    }
  }
  p.possible_sc=true;
  if ((s.charAt(0) == '<') && (s.charAt(s.length() - 1) == '>')) {
    p.possible_var=true;
  }
  boolean rereadability_questionable=false;
  boolean rereadability_dead=false;
  for (int i=0; i < s.length(); i++) {
    char ch=s.charAt(i);
    if (Character.isLowerCase(ch) || Character.isDigit(ch))     continue;
    if (Character.isUpperCase(ch)) {
      rereadability_dead=true;
      break;
    }
    rereadability_questionable=true;
  }
  if (!rereadability_dead) {
    if ((!rereadability_questionable) || (s.length() >= LENGTH_OF_LONGEST_SPECIAL_LEXEME) || ((s.length() == 1) && (s.charAt(0) == '*')))     p.rereadable=true;
  }
  if (Character.isLetter(s.charAt(0))) {
    int i=1;
    while (i < s.length() && Character.isDigit(s.charAt(i))) {
      ++i;
    }
    p.possible_id=i == s.length();
  }
  return p;
}","/** 
 * This is a utility routine which figures out what kind(s) of symbol a given string could represent. At entry: s, length_of_s represent the string. At exit: possible_xxx is set to TRUE/FALSE to indicate whether the given string could represent that kind of symbol; rereadable is set to TRUE indicating whether the lexer would read the given string as a symbol with exactly the same name (as opposed to treating it as a special lexeme like ""+"", changing upper to lower case, etc. <p>lexer.cpp:1225:determine_possible_symbol_types_for_string
 */
public static PossibleSymbolTypes determine_possible_symbol_types_for_string(String s){
  PossibleSymbolTypes p=new PossibleSymbolTypes();
  if (s.length() == 0) {
    return p;
  }
  if (Lexer.number_starters[s.charAt(0)]) {
    try {
      Integer.parseInt(s);
      p.possible_ic=true;
    }
 catch (    NumberFormatException e) {
    }
    try {
      Float.parseFloat(s);
      p.possible_fc=s.indexOf('.') != -1;
    }
 catch (    NumberFormatException e) {
    }
  }
  for (int i=0; i < s.length(); ++i) {
    if (!isConstituentChar(s.charAt(i))) {
      return p;
    }
  }
  p.possible_sc=true;
  if ((s.charAt(0) == '<') && (s.charAt(s.length() - 1) == '>')) {
    p.possible_var=true;
  }
  boolean rereadability_questionable=false;
  boolean rereadability_dead=false;
  for (int i=0; i < s.length(); i++) {
    char ch=s.charAt(i);
    if (Character.isLowerCase(ch) || Character.isDigit(ch))     continue;
    if (Character.isUpperCase(ch)) {
      rereadability_dead=true;
      break;
    }
    rereadability_questionable=true;
  }
  if (!rereadability_dead) {
    if ((!rereadability_questionable) || (s.length() >= LENGTH_OF_LONGEST_SPECIAL_LEXEME) || ((s.length() == 1) && (s.charAt(0) == '*')))     p.rereadable=true;
  }
  if (Character.isLetter(s.charAt(0))) {
    int i=1;
    while (i < s.length() && Character.isDigit(s.charAt(i))) {
      ++i;
    }
    p.possible_id=i == s.length();
  }
  return p;
}",0.9891331817033104
12302,"void read_constituent_string() throws IOException {
  while ((current_char != EOF_AS_CHAR) && constituent_char[current_char]) {
    store_and_advance();
  }
}","void read_constituent_string() throws IOException {
  while ((current_char != EOF_AS_CHAR) && isConstituentChar(current_char)) {
    store_and_advance();
  }
}",0.9652996845425869
12303,"/** 
 * Returns TRUE iff the two conditions are identical. <p>production.cpp:794:conditions_are_equal
 * @param c1 First condition to test
 * @param c2 Second condition to test
 * @return true iff the two conditions are identical
 */
public static boolean conditions_are_equal(Condition c1,Condition c2){
  if (!c1.getClass().equals(c2.getClass()))   return false;
  ThreeFieldCondition tfc1=c1.asThreeFieldCondition();
  if (tfc1 != null) {
    ThreeFieldCondition tfc2=c2.asThreeFieldCondition();
    if (!Tests.tests_are_equal(tfc1.id_test,tfc2.id_test))     return false;
    if (!Tests.tests_are_equal(tfc1.attr_test,tfc2.attr_test))     return false;
    if (!Tests.tests_are_equal(tfc1.value_test,tfc2.value_test))     return false;
    if (c1.test_for_acceptable_preference != c2.test_for_acceptable_preference)     return false;
    return true;
  }
  ConjunctiveNegationCondition ncc1=c1.asConjunctiveNegationCondition();
  if (ncc1 != null) {
    ConjunctiveNegationCondition ncc2=c2.asConjunctiveNegationCondition();
    for (c1=ncc1.top, c2=ncc2.top; ((c1 != null) && (c2 != null)); c1=c1.next, c2=c2.next)     if (!conditions_are_equal(c1,c2))     return false;
    if (c1 == c2)     return true;
    return false;
  }
  throw new IllegalStateException(""String_Node_Str"" + c1 + ""String_Node_Str""+ c2);
}","/** 
 * Returns TRUE iff the two conditions are identical. <p>production.cpp:794:conditions_are_equal
 * @param c1 First condition to test
 * @param c2 Second condition to test
 * @return true iff the two conditions are identical
 */
public static boolean conditions_are_equal(Condition c1,Condition c2){
  if (!c1.getClass().equals(c2.getClass()))   return false;
  ThreeFieldCondition tfc1=c1.asThreeFieldCondition();
  if (tfc1 != null) {
    boolean neg=c1.asNegativeCondition() != null;
    ThreeFieldCondition tfc2=c2.asThreeFieldCondition();
    if (!Tests.tests_are_equal(tfc1.id_test,tfc2.id_test,neg))     return false;
    if (!Tests.tests_are_equal(tfc1.attr_test,tfc2.attr_test,neg))     return false;
    if (!Tests.tests_are_equal(tfc1.value_test,tfc2.value_test,neg))     return false;
    if (c1.test_for_acceptable_preference != c2.test_for_acceptable_preference)     return false;
    return true;
  }
  ConjunctiveNegationCondition ncc1=c1.asConjunctiveNegationCondition();
  if (ncc1 != null) {
    ConjunctiveNegationCondition ncc2=c2.asConjunctiveNegationCondition();
    for (c1=ncc1.top, c2=ncc2.top; ((c1 != null) && (c2 != null)); c1=c1.next, c2=c2.next)     if (!conditions_are_equal(c1,c2))     return false;
    if (c1 == c2)     return true;
    return false;
  }
  throw new IllegalStateException(""String_Node_Str"" + c1 + ""String_Node_Str""+ c2);
}",0.9770029673590503
12304,"/** 
 * reorder.cpp:398:restore_and_deallocate_saved_tests
 * @param value
 * @param tc
 * @param saved_tests
 */
private void restore_and_deallocate_saved_tests(Condition conds_list,int tc,SavedTest tests_to_restore){
  ListHead<Variable> new_vars=ListHead.newInstance();
  for (Condition cond=conds_list; cond != null; cond=cond.next) {
    if (cond.asConjunctiveNegationCondition() != null) {
      continue;
    }
    if (cond.asPositiveCondition() != null) {
      PositiveCondition pc=cond.asPositiveCondition();
      ByRef<Test> id_test=ByRef.create(pc.id_test);
      tests_to_restore=restore_saved_tests_to_test(id_test,true,tc,tests_to_restore);
      pc.id_test=id_test.value;
      pc.id_test.addBoundVariables(tc,new_vars);
      ByRef<Test> attr_test=ByRef.create(pc.attr_test);
      tests_to_restore=restore_saved_tests_to_test(attr_test,false,tc,tests_to_restore);
      pc.attr_test=attr_test.value;
      pc.attr_test.addBoundVariables(tc,new_vars);
      ByRef<Test> value_test=ByRef.create(pc.value_test);
      tests_to_restore=restore_saved_tests_to_test(value_test,false,tc,tests_to_restore);
      pc.value_test=value_test.value;
      pc.value_test.addBoundVariables(tc,new_vars);
    }
 else     if (cond.asNegativeCondition() != null) {
      NegativeCondition nc=cond.asNegativeCondition();
      ByRef<Test> id_test=ByRef.create(nc.id_test);
      tests_to_restore=restore_saved_tests_to_test(id_test,true,tc,tests_to_restore);
      nc.id_test=id_test.value;
      nc.id_test.addBoundVariables(tc,new_vars);
      ByRef<Test> attr_test=ByRef.create(nc.attr_test);
      tests_to_restore=restore_saved_tests_to_test(attr_test,false,tc,tests_to_restore);
      nc.attr_test=attr_test.value;
      nc.attr_test.addBoundVariables(tc,new_vars);
      ByRef<Test> value_test=ByRef.create(nc.value_test);
      tests_to_restore=restore_saved_tests_to_test(value_test,false,tc,tests_to_restore);
      nc.value_test=value_test.value;
      nc.value_test.addBoundVariables(tc,new_vars);
    }
  }
  if (tests_to_restore != null) {
    final Printer p=trace.getPrinter();
    if (p.isPrintWarnings()) {
      p.warn(""String_Node_Str"",prodName);
    }
  }
  Variable.unmark(new_vars);
}","/** 
 * reorder.cpp:398:restore_and_deallocate_saved_tests
 * @param value
 * @param tc
 * @param saved_tests
 */
private void restore_and_deallocate_saved_tests(Condition conds_list,int tc,SavedTest tests_to_restore){
  ListHead<Variable> new_vars=ListHead.newInstance();
  for (Condition cond=conds_list; cond != null; cond=cond.next) {
    if (cond.asConjunctiveNegationCondition() != null) {
      continue;
    }
    if (cond.asPositiveCondition() != null) {
      PositiveCondition pc=cond.asPositiveCondition();
      ByRef<Test> id_test=ByRef.create(pc.id_test);
      tests_to_restore=restore_saved_tests_to_test(id_test,true,tc,tests_to_restore,false);
      pc.id_test=id_test.value;
      pc.id_test.addBoundVariables(tc,new_vars);
      ByRef<Test> attr_test=ByRef.create(pc.attr_test);
      tests_to_restore=restore_saved_tests_to_test(attr_test,false,tc,tests_to_restore,false);
      pc.attr_test=attr_test.value;
      pc.attr_test.addBoundVariables(tc,new_vars);
      ByRef<Test> value_test=ByRef.create(pc.value_test);
      tests_to_restore=restore_saved_tests_to_test(value_test,false,tc,tests_to_restore,false);
      pc.value_test=value_test.value;
      pc.value_test.addBoundVariables(tc,new_vars);
    }
 else     if (cond.asNegativeCondition() != null) {
      NegativeCondition nc=cond.asNegativeCondition();
      ByRef<Test> id_test=ByRef.create(nc.id_test);
      tests_to_restore=restore_saved_tests_to_test(id_test,true,tc,tests_to_restore,true);
      nc.id_test=id_test.value;
      nc.id_test.addBoundVariables(tc,new_vars);
      ByRef<Test> attr_test=ByRef.create(nc.attr_test);
      tests_to_restore=restore_saved_tests_to_test(attr_test,false,tc,tests_to_restore,true);
      nc.attr_test=attr_test.value;
      nc.attr_test.addBoundVariables(tc,new_vars);
      ByRef<Test> value_test=ByRef.create(nc.value_test);
      tests_to_restore=restore_saved_tests_to_test(value_test,false,tc,tests_to_restore,true);
      nc.value_test=value_test.value;
      nc.value_test.addBoundVariables(tc,new_vars);
    }
  }
  if (tests_to_restore != null) {
    final Printer p=trace.getPrinter();
    if (p.isPrintWarnings()) {
      p.warn(""String_Node_Str"",prodName);
    }
  }
  Variable.unmark(new_vars);
}",0.99257926692152
12305,"/** 
 * reorder.cpp:339
 * @param id_test
 * @param b
 * @param tc
 * @param tests_to_restore
 * @return
 */
private SavedTest restore_saved_tests_to_test(ByRef<Test> t,boolean is_id_field,int bound_vars_tc_number,SavedTest tests_to_restore){
  SavedTest prev_st=null, next_st=null;
  SavedTest st=tests_to_restore;
  while (st != null) {
    next_st=st.next;
    boolean added_it=false;
    if ((is_id_field && (st.the_test.asGoalIdTest() != null || st.the_test.asImpasseIdTest() != null)) || st.the_test.asDisjunctionTest() != null) {
      if (Tests.test_includes_equality_test_for_symbol(t.value,st.var)) {
        t.value=Tests.add_new_test_to_test_if_not_already_there(t.value,st.the_test);
        added_it=true;
      }
    }
    RelationalTest rt=st.the_test.asRelationalTest();
    if (rt != null) {
      SymbolImpl referent=rt.referent;
      if (Tests.test_includes_equality_test_for_symbol(t.value,st.var)) {
        if (symbol_is_constant_or_marked_variable(referent,bound_vars_tc_number) || (st.var == referent)) {
          t.value=Tests.add_new_test_to_test_if_not_already_there(t.value,st.the_test);
          added_it=true;
        }
      }
 else       if (Tests.test_includes_equality_test_for_symbol(t.value,referent)) {
        if (symbol_is_constant_or_marked_variable(st.var,bound_vars_tc_number) || (st.var == referent)) {
          rt.type=RelationalTest.reverse_direction_of_relational_test(rt.type);
          rt.referent=st.var;
          st.var=referent;
          t.value=Tests.add_new_test_to_test_if_not_already_there(t.value,st.the_test);
          added_it=true;
        }
      }
    }
    if (added_it) {
      if (prev_st != null) {
        prev_st.next=next_st;
      }
 else {
        tests_to_restore=next_st;
      }
    }
 else {
      prev_st=st;
    }
    st=next_st;
  }
  return tests_to_restore;
}","/** 
 * reorder.cpp:339
 * @param id_test
 * @param b
 * @param tc
 * @param tests_to_restore
 * @return
 */
private SavedTest restore_saved_tests_to_test(ByRef<Test> t,boolean is_id_field,int bound_vars_tc_number,SavedTest tests_to_restore,boolean neg){
  SavedTest prev_st=null, next_st=null;
  SavedTest st=tests_to_restore;
  while (st != null) {
    next_st=st.next;
    boolean added_it=false;
    if ((is_id_field && (st.the_test.asGoalIdTest() != null || st.the_test.asImpasseIdTest() != null)) || st.the_test.asDisjunctionTest() != null) {
      if (Tests.test_includes_equality_test_for_symbol(t.value,st.var)) {
        t.value=Tests.add_new_test_to_test_if_not_already_there(t.value,st.the_test,neg);
        added_it=true;
      }
    }
    RelationalTest rt=st.the_test.asRelationalTest();
    if (rt != null) {
      SymbolImpl referent=rt.referent;
      if (Tests.test_includes_equality_test_for_symbol(t.value,st.var)) {
        if (symbol_is_constant_or_marked_variable(referent,bound_vars_tc_number) || (st.var == referent)) {
          t.value=Tests.add_new_test_to_test_if_not_already_there(t.value,st.the_test,neg);
          added_it=true;
        }
      }
 else       if (Tests.test_includes_equality_test_for_symbol(t.value,referent)) {
        if (symbol_is_constant_or_marked_variable(st.var,bound_vars_tc_number) || (st.var == referent)) {
          rt.type=RelationalTest.reverse_direction_of_relational_test(rt.type);
          rt.referent=st.var;
          st.var=referent;
          t.value=Tests.add_new_test_to_test_if_not_already_there(t.value,st.the_test,neg);
          added_it=true;
        }
      }
    }
    if (added_it) {
      if (prev_st != null) {
        prev_st.next=next_st;
      }
 else {
        tests_to_restore=next_st;
      }
    }
 else {
      prev_st=st;
    }
    st=next_st;
  }
  return tests_to_restore;
}",0.9935449166218396
12306,"/** 
 * <p>print.cpp:488:print_condition_list
 * @param printer
 * @param conds
 * @param indent
 * @param internal
 */
public static void print_condition_list(Printer printer,Condition conds,int indent,boolean internal){
  if (conds == null)   return;
  LinkedList<Condition> conds_not_yet_printed=new LinkedList<Condition>();
  for (Condition c=conds; c != null; c=c.next) {
    conds_not_yet_printed.add(c);
  }
  boolean did_one_line_already=false;
  while (!conds_not_yet_printed.isEmpty()) {
    if (did_one_line_already) {
      printer.print(""String_Node_Str"").spaces(indent);
    }
 else {
      did_one_line_already=true;
    }
    final Condition c=conds_not_yet_printed.pop();
    final ConjunctiveNegationCondition ncc=c.asConjunctiveNegationCondition();
    if (ncc != null) {
      printer.print(""String_Node_Str"");
      print_condition_list(printer,ncc.top,indent + 2,internal);
      printer.print(""String_Node_Str"");
      continue;
    }
    ThreeFieldCondition tfc=c.asThreeFieldCondition();
    ByRef<Boolean> removed_goal_test=ByRef.create(false);
    ByRef<Boolean> removed_impasse_test=ByRef.create(false);
    Test id_test=Tests.copy_test_removing_goal_impasse_tests(tfc.id_test,removed_goal_test,removed_impasse_test);
    Test id_test_to_match=Tests.copy_of_equality_test_found_in_test(id_test);
    LinkedList<ThreeFieldCondition> conds_for_this_id=new LinkedList<ThreeFieldCondition>();
    conds_for_this_id.add(tfc);
    if (!internal) {
      Iterator<Condition> it=conds_not_yet_printed.iterator();
      while (it.hasNext()) {
        final Condition n=it.next();
        ThreeFieldCondition ntfc=n.asThreeFieldCondition();
        if (ntfc != null && Tests.tests_are_equal(id_test_to_match,ntfc.id_test)) {
          conds_for_this_id.add(ntfc);
          it.remove();
        }
      }
    }
    printer.print(""String_Node_Str"");
    if (removed_goal_test.value) {
      printer.print(""String_Node_Str"");
    }
    if (removed_impasse_test.value) {
      printer.print(""String_Node_Str"");
    }
    printer.print(""String_Node_Str"",id_test);
    while (!conds_for_this_id.isEmpty()) {
      final ThreeFieldCondition tc=conds_for_this_id.pop();
{
        final StringBuilder gs=new StringBuilder();
        gs.append(""String_Node_Str"");
        if (tc.asNegativeCondition() != null) {
          gs.append(""String_Node_Str"");
        }
        gs.append(""String_Node_Str"");
        gs.append(String.format(""String_Node_Str"",tc.attr_test));
        if (!Tests.isBlank(tc.value_test)) {
          gs.append(String.format(""String_Node_Str"",tc.value_test));
          if (tc.test_for_acceptable_preference) {
            gs.append(""String_Node_Str"");
          }
        }
        if (printer.getOutputColumn() + gs.length() >= printer.getColumnsPerLine()) {
          printer.print(""String_Node_Str"").spaces(indent + 6);
        }
        printer.print(gs.toString());
      }
    }
    printer.print(""String_Node_Str"");
  }
}","/** 
 * <p>print.cpp:488:print_condition_list
 * @param printer
 * @param conds
 * @param indent
 * @param internal
 */
public static void print_condition_list(Printer printer,Condition conds,int indent,boolean internal){
  if (conds == null)   return;
  LinkedList<Condition> conds_not_yet_printed=new LinkedList<Condition>();
  for (Condition c=conds; c != null; c=c.next) {
    conds_not_yet_printed.add(c);
  }
  boolean did_one_line_already=false;
  while (!conds_not_yet_printed.isEmpty()) {
    if (did_one_line_already) {
      printer.print(""String_Node_Str"").spaces(indent);
    }
 else {
      did_one_line_already=true;
    }
    final Condition c=conds_not_yet_printed.pop();
    final ConjunctiveNegationCondition ncc=c.asConjunctiveNegationCondition();
    if (ncc != null) {
      printer.print(""String_Node_Str"");
      print_condition_list(printer,ncc.top,indent + 2,internal);
      printer.print(""String_Node_Str"");
      continue;
    }
    ThreeFieldCondition tfc=c.asThreeFieldCondition();
    ByRef<Boolean> removed_goal_test=ByRef.create(false);
    ByRef<Boolean> removed_impasse_test=ByRef.create(false);
    Test id_test=Tests.copy_test_removing_goal_impasse_tests(tfc.id_test,removed_goal_test,removed_impasse_test);
    Test id_test_to_match=Tests.copy_of_equality_test_found_in_test(id_test);
    LinkedList<ThreeFieldCondition> conds_for_this_id=new LinkedList<ThreeFieldCondition>();
    conds_for_this_id.add(tfc);
    if (!internal) {
      Iterator<Condition> it=conds_not_yet_printed.iterator();
      while (it.hasNext()) {
        final Condition n=it.next();
        ThreeFieldCondition ntfc=n.asThreeFieldCondition();
        if (ntfc != null && Tests.tests_are_equal(id_test_to_match,ntfc.id_test,false)) {
          conds_for_this_id.add(ntfc);
          it.remove();
        }
      }
    }
    printer.print(""String_Node_Str"");
    if (removed_goal_test.value) {
      printer.print(""String_Node_Str"");
    }
    if (removed_impasse_test.value) {
      printer.print(""String_Node_Str"");
    }
    printer.print(""String_Node_Str"",id_test);
    while (!conds_for_this_id.isEmpty()) {
      final ThreeFieldCondition tc=conds_for_this_id.pop();
{
        final StringBuilder gs=new StringBuilder();
        gs.append(""String_Node_Str"");
        if (tc.asNegativeCondition() != null) {
          gs.append(""String_Node_Str"");
        }
        gs.append(""String_Node_Str"");
        gs.append(String.format(""String_Node_Str"",tc.attr_test));
        if (!Tests.isBlank(tc.value_test)) {
          gs.append(String.format(""String_Node_Str"",tc.value_test));
          if (tc.test_for_acceptable_preference) {
            gs.append(""String_Node_Str"");
          }
        }
        if (printer.getOutputColumn() + gs.length() >= printer.getColumnsPerLine()) {
          printer.print(""String_Node_Str"").spaces(indent + 6);
        }
        printer.print(gs.toString());
      }
    }
    printer.print(""String_Node_Str"");
  }
}",0.9989868287740628
12307,"/** 
 * production.cpp:412:tests_are_equal
 * @param t1 first test to compare
 * @param t2 second test to compare
 * @return true if the two tests are equal
 */
static boolean tests_are_equal(Test t1,Test t2){
  if (t1 == t2) {
    return true;
  }
  if (t1.getClass() != t2.getClass()) {
    return false;
  }
  EqualityTest eq1=t1.asEqualityTest();
  if (eq1 != null) {
    return eq1.getReferent() == t2.asEqualityTest().getReferent();
  }
  if (t1.asGoalIdTest() != null || t1.asImpasseIdTest() != null) {
    return true;
  }
  DisjunctionTest dt=t1.asDisjunctionTest();
  if (dt != null) {
    return dt.disjunction_list.equals(t2.asDisjunctionTest().disjunction_list);
  }
  ConjunctiveTest ct=t1.asConjunctiveTest();
  if (ct != null) {
    List<Test> c1=ct.conjunct_list;
    List<Test> c2=t2.asConjunctiveTest().conjunct_list;
    if (c1.size() != c2.size()) {
      return false;
    }
    for (int i=0; i < c1.size(); ++i) {
      if (!tests_are_equal(c1.get(i),c2.get(i))) {
        return false;
      }
    }
    return true;
  }
  return t1.asRelationalTest().referent == t2.asRelationalTest().referent;
}","/** 
 * production.cpp:412:tests_are_equal
 * @param t1 first test to compare
 * @param t2 second test to compare
 * @param neg if tests are part of a negation
 * @return true if the two tests are equal
 */
static boolean tests_are_equal(Test t1,Test t2,boolean neg){
  if (t1 == t2) {
    return true;
  }
  if (t1.getClass() != t2.getClass()) {
    return false;
  }
  EqualityTest eq1=t1.asEqualityTest();
  if (eq1 != null) {
    if (neg) {
      if (eq1.getReferent().asVariable() != null) {
        EqualityTest eq2=t2.asEqualityTest();
        if (eq2 != null && eq2.getReferent().asVariable() != null) {
          return true;
        }
      }
    }
    return eq1.getReferent() == t2.asEqualityTest().getReferent();
  }
  if (t1.asGoalIdTest() != null || t1.asImpasseIdTest() != null) {
    return true;
  }
  DisjunctionTest dt=t1.asDisjunctionTest();
  if (dt != null) {
    return dt.disjunction_list.equals(t2.asDisjunctionTest().disjunction_list);
  }
  ConjunctiveTest ct=t1.asConjunctiveTest();
  if (ct != null) {
    List<Test> c1=ct.conjunct_list;
    List<Test> c2=t2.asConjunctiveTest().conjunct_list;
    if (c1.size() != c2.size()) {
      return false;
    }
    List<Test> copy2=Lists.newLinkedList(c2);
    for (int i=0; i < c1.size(); ++i) {
      for (int j=0; j < copy2.size(); ++j) {
        if (tests_are_equal(c1.get(i),copy2.get(j),neg)) {
          copy2.remove(j);
          break;
        }
      }
    }
    return copy2.size() == 0;
  }
  return t1.asRelationalTest().referent == t2.asRelationalTest().referent;
}",0.811821922933034
12308,"/** 
 * Returns a hash value for the given test. <p>TODO make this polymorphic <p>production.cpp:450:hash_test
 * @param t The test to hash
 * @return The has value for the test
 */
public static int hash_test(Test t){
  if (Tests.isBlank(t))   return 0;
  EqualityTest eq=t.asEqualityTest();
  if (eq != null)   return eq.getReferent().hash_id;
  if (t.asGoalIdTest() != null) {
    return 34894895;
  }
  if (t.asImpasseIdTest() != null) {
    return 2089521;
  }
  DisjunctionTest dt=t.asDisjunctionTest();
  if (dt != null) {
    int result=7245;
    for (    SymbolImpl c : dt.disjunction_list)     result=result + c.hash_id;
    return result;
  }
  ConjunctiveTest ct=t.asConjunctiveTest();
  if (ct != null) {
    int result=100276;
    for (    Test c : ct.conjunct_list)     result=result + hash_test(c);
    return result;
  }
  RelationalTest rt=t.asRelationalTest();
  if (rt != null) {
    return (rt.type << 24) + rt.referent.hash_id;
  }
  throw new IllegalStateException(""String_Node_Str"" + t);
}","/** 
 * Returns a hash value for the given test. <p>TODO make this polymorphic <p>production.cpp:450:hash_test
 * @param t The test to hash
 * @return The has value for the test
 */
public static int hash_test(Test t){
  if (Tests.isBlank(t))   return 0;
  EqualityTest eq=t.asEqualityTest();
  if (eq != null)   return eq.getReferent().hash_id;
  if (t.asGoalIdTest() != null) {
    return 34894895;
  }
  if (t.asImpasseIdTest() != null) {
    return 2089521;
  }
  DisjunctionTest dt=t.asDisjunctionTest();
  if (dt != null) {
    int result=7245;
    for (    SymbolImpl c : dt.disjunction_list)     result=result + c.hash_id;
    return result;
  }
  ConjunctiveTest ct=t.asConjunctiveTest();
  if (ct != null) {
    int result=100276;
    return result;
  }
  RelationalTest rt=t.asRelationalTest();
  if (rt != null) {
    return (rt.type << 24) + rt.referent.hash_id;
  }
  throw new IllegalStateException(""String_Node_Str"" + t);
}",0.9620901639344264
12309,"/** 
 * Same as add_new_test_to_test(), only has no effect if the second test is already included in the first one. <p>production.cpp:384:add_new_test_to_test_if_not_already_there
 * @param t test to add new test to
 * @param add_me the test to add
 * @return resulting test, possibly t, but not necessarily.
 */
public static Test add_new_test_to_test_if_not_already_there(Test t,Test add_me){
  if (tests_are_equal(t,add_me)) {
    return t;
  }
  ConjunctiveTest ct=t.asConjunctiveTest();
  if (ct != null) {
    for (    Test child : ct.conjunct_list) {
      if (tests_are_equal(child,add_me)) {
        return t;
      }
    }
  }
  return add_new_test_to_test(t,add_me);
}","/** 
 * Same as add_new_test_to_test(), only has no effect if the second test is already included in the first one. <p>production.cpp:384:add_new_test_to_test_if_not_already_there
 * @param t test to add new test to
 * @param add_me the test to add
 * @param neg if part of a negative condition
 * @return resulting test, possibly t, but not necessarily.
 */
public static Test add_new_test_to_test_if_not_already_there(Test t,Test add_me,boolean neg){
  if (tests_are_equal(t,add_me,neg)) {
    return t;
  }
  ConjunctiveTest ct=t.asConjunctiveTest();
  if (ct != null) {
    for (    Test child : ct.conjunct_list) {
      if (tests_are_equal(child,add_me,neg)) {
        return t;
      }
    }
  }
  return add_new_test_to_test(t,add_me);
}",0.9536516853932584
12310,"/** 
 * @param agent the agent to wrap.
 */
private ThreadedAgent(Agent agent){
  this.agent=agent;
  agentThread.setName(""String_Node_Str"" + this.agent + ""String_Node_Str"");
  this.agent.getEventManager().addListener(RunLoopEvent.class,new SoarEventListener(){
    @Override public void onEvent(    SoarEvent event){
      if (Thread.interrupted()) {
        throw new InterruptAgentException();
      }
      Runnable runnable=commands.poll();
      while (runnable != null) {
        runnable.run();
        runnable=commands.poll();
      }
    }
  }
);
  waitFunction.attach(this);
}","/** 
 * @param agent the agent to wrap.
 */
private ThreadedAgent(Agent agent){
  this.agent=agent;
  agentThread.setName(""String_Node_Str"" + this.agent + ""String_Node_Str"");
  this.agent.getEventManager().addListener(RunLoopEvent.class,new SoarEventListener(){
    @Override public void onEvent(    SoarEvent event){
      if (Thread.currentThread().isInterrupted()) {
        throw new InterruptAgentException();
      }
      Runnable runnable=commands.poll();
      while (runnable != null) {
        runnable.run();
        runnable=commands.poll();
      }
    }
  }
);
  waitFunction.attach(this);
}",0.983249581239531
12311,"@Override public void onEvent(SoarEvent event){
  if (Thread.interrupted()) {
    throw new InterruptAgentException();
  }
  Runnable runnable=commands.poll();
  while (runnable != null) {
    runnable.run();
    runnable=commands.poll();
  }
}","@Override public void onEvent(SoarEvent event){
  if (Thread.currentThread().isInterrupted()) {
    throw new InterruptAgentException();
  }
  Runnable runnable=commands.poll();
  while (runnable != null) {
    runnable.run();
    runnable=commands.poll();
  }
}",0.9604743083003952
12312,"private void doWait(){
  if (waitTimeout < -1) {
    inputReady.set(false);
    return;
  }
synchronized (this) {
    waiting.set(true);
  }
  final long start=System.currentTimeMillis();
  final BlockingQueue<Runnable> commands=agent.getCommandQueue();
  boolean done=isDoneWaiting();
  while (!done) {
    try {
      final long remaining=waitTimeout - (System.currentTimeMillis() - start);
      if (remaining <= 0) {
        done=true;
      }
      final Runnable command=commands.poll(remaining,TimeUnit.MILLISECONDS);
      if (command != null) {
        command.run();
        done=isDoneWaiting();
      }
 else {
        done=true;
      }
    }
 catch (    InterruptedException e) {
      done=true;
      break;
    }
  }
  waitTimeout=-1;
synchronized (this) {
    inputReady.set(false);
    waiting.set(false);
  }
}","private void doWait(){
  if (!requestedWaitInfo.waiting) {
    inputReady.set(false);
    return;
  }
synchronized (this) {
    waitInfo.set(requestedWaitInfo);
  }
  final long start=System.currentTimeMillis();
  final BlockingQueue<Runnable> commands=agent.getCommandQueue();
  boolean done=isDoneWaiting();
  while (!done) {
    try {
      final long remaining=requestedWaitInfo.timeout - (System.currentTimeMillis() - start);
      if (remaining <= 0) {
        done=true;
      }
      final Runnable command=commands.poll(remaining,TimeUnit.MILLISECONDS);
      if (command != null) {
        command.run();
        done=isDoneWaiting();
      }
 else {
        done=true;
      }
    }
 catch (    InterruptedException e) {
      done=true;
      Thread.currentThread().interrupt();
      break;
    }
  }
  requestedWaitInfo=WaitInfo.NOT_WAITING;
synchronized (this) {
    inputReady.set(false);
    waitInfo.set(WaitInfo.NOT_WAITING);
  }
}",0.8089887640449438
12313,"private synchronized void setNewInputAvailable(){
  inputReady.set(true);
  if (waiting.get()) {
    WaitRhsFunction.this.agent.execute(inputReadyCommand,null);
  }
}","private synchronized void setNewInputAvailable(){
  inputReady.set(true);
  if (waitInfo.get().waiting) {
    WaitRhsFunction.this.agent.execute(inputReadyCommand,null);
  }
}",0.9618768328445748
12314,"public void attach(ThreadedAgent agent){
  Arguments.checkNotNull(agent,""String_Node_Str"");
  if (this.agent != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.agent=agent;
  this.agent.getAgent().getEventManager().addListener(AsynchronousInputReadyEvent.class,inputReadyListener=new SoarEventListener(){
    @Override public void onEvent(    SoarEvent event){
      setNewInputAvailable();
    }
  }
);
  this.agent.getAgent().getEventManager().addListener(AfterDecisionCycleEvent.class,afterDecisionCycleListener=new SoarEventListener(){
    @Override public void onEvent(    SoarEvent event){
      doWait();
    }
  }
);
  this.agent.getAgent().getProperties().setProvider(SoarProperties.WAITING,waiting);
  this.oldHandler=this.agent.getAgent().getRhsFunctions().registerHandler(this);
}","public void attach(ThreadedAgent agent){
  Arguments.checkNotNull(agent,""String_Node_Str"");
  if (this.agent != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.agent=agent;
  this.agent.getAgent().getEventManager().addListener(AsynchronousInputReadyEvent.class,inputReadyListener=new SoarEventListener(){
    @Override public void onEvent(    SoarEvent event){
      setNewInputAvailable();
    }
  }
);
  this.agent.getAgent().getEventManager().addListener(AfterDecisionCycleEvent.class,afterDecisionCycleListener=new SoarEventListener(){
    @Override public void onEvent(    SoarEvent event){
      doWait();
    }
  }
);
  this.agent.getAgent().getProperties().setProvider(SoarProperties.WAIT_INFO,waitInfoProp);
  this.oldHandler=this.agent.getAgent().getRhsFunctions().registerHandler(this);
}",0.9908814589665652
12315,"@Override public Symbol execute(RhsFunctionContext context,List<Symbol> arguments) throws RhsFunctionException {
  RhsFunctions.checkArgumentCount(this,arguments);
  RhsFunctions.checkAllArgumentsAreNumeric(getName(),arguments);
  waitTimeout=arguments.isEmpty() ? Long.MAX_VALUE : arguments.get(0).asInteger().getValue();
  return null;
}","@Override public Symbol execute(RhsFunctionContext context,List<Symbol> arguments) throws RhsFunctionException {
  RhsFunctions.checkArgumentCount(this,arguments);
  RhsFunctions.checkAllArgumentsAreNumeric(getName(),arguments);
  final long timeout=arguments.isEmpty() ? Long.MAX_VALUE : arguments.get(0).asInteger().getValue();
  if (!requestedWaitInfo.waiting || timeout < requestedWaitInfo.timeout) {
    requestedWaitInfo=new WaitInfo(timeout,context.getProductionBeingFired());
  }
  return null;
}",0.7663107947805456
12316,"private SoarTclInterface(Agent agent){
  this.agent=agent;
  this.agent.getRhsFunctions().registerHandler(tclRhsFunction);
  this.sourceCommand=new SourceCommand();
  interp.createCommand(""String_Node_Str"",sourceCommand);
  this.pushdCommand=new PushdCommand(sourceCommand);
  interp.createCommand(""String_Node_Str"",pushdCommand);
  this.popdCommand=new PopdCommand(sourceCommand);
  interp.createCommand(""String_Node_Str"",this.popdCommand);
  interp.createCommand(""String_Node_Str"",new PwdCommand(sourceCommand));
  interp.createCommand(""String_Node_Str"",spCommand);
  interp.createCommand(""String_Node_Str"",multiAttrCommand);
  interp.createCommand(""String_Node_Str"",statsCommand);
  interp.createCommand(""String_Node_Str"",learnCommand);
  interp.createCommand(""String_Node_Str"",rlCommand);
  interp.createCommand(""String_Node_Str"",srandCommand);
  interp.createCommand(""String_Node_Str"",maxElaborationsCommand);
  interp.createCommand(""String_Node_Str"",matchesCommand);
  interp.createCommand(""String_Node_Str"",waitsncCommand);
  interp.createCommand(""String_Node_Str"",initSoarCommand);
  interp.createCommand(""String_Node_Str"",warningsCommand);
  interp.createCommand(""String_Node_Str"",verboseCommand);
  interp.createCommand(""String_Node_Str"",saveBacktracesCommand);
  interp.createCommand(""String_Node_Str"",echoCommand);
  interp.createCommand(""String_Node_Str"",clogCommand);
  interp.createCommand(""String_Node_Str"",watchCommand);
  interp.createCommand(""String_Node_Str"",rhsFuncsCommand);
  interp.createCommand(""String_Node_Str"",printCommand);
  interp.createCommand(""String_Node_Str"",printCommand);
  interp.createCommand(""String_Node_Str"",oSupportModeCommand);
  interp.createCommand(""String_Node_Str"",soar8Command);
  interp.createCommand(""String_Node_Str"",setParserCommand);
}","private SoarTclInterface(Agent agent){
  this.agent=agent;
  this.agent.getRhsFunctions().registerHandler(tclRhsFunction);
  this.sourceCommand=new SourceCommand();
  interp.createCommand(""String_Node_Str"",sourceCommand);
  this.pushdCommand=new PushdCommand(sourceCommand);
  interp.createCommand(""String_Node_Str"",pushdCommand);
  this.popdCommand=new PopdCommand(sourceCommand);
  interp.createCommand(""String_Node_Str"",this.popdCommand);
  interp.createCommand(""String_Node_Str"",new PwdCommand(sourceCommand));
  interp.createCommand(""String_Node_Str"",spCommand);
  interp.createCommand(""String_Node_Str"",multiAttrCommand);
  interp.createCommand(""String_Node_Str"",statsCommand);
  interp.createCommand(""String_Node_Str"",learnCommand);
  interp.createCommand(""String_Node_Str"",rlCommand);
  interp.createCommand(""String_Node_Str"",srandCommand);
  interp.createCommand(""String_Node_Str"",maxElaborationsCommand);
  interp.createCommand(""String_Node_Str"",matchesCommand);
  interp.createCommand(""String_Node_Str"",waitsncCommand);
  interp.createCommand(""String_Node_Str"",initSoarCommand);
  interp.createCommand(""String_Node_Str"",warningsCommand);
  interp.createCommand(""String_Node_Str"",verboseCommand);
  interp.createCommand(""String_Node_Str"",saveBacktracesCommand);
  interp.createCommand(""String_Node_Str"",echoCommand);
  interp.createCommand(""String_Node_Str"",clogCommand);
  interp.createCommand(""String_Node_Str"",watchCommand);
  interp.createCommand(""String_Node_Str"",rhsFuncsCommand);
  interp.createCommand(""String_Node_Str"",printCommand);
  interp.createCommand(""String_Node_Str"",printCommand);
  interp.createCommand(""String_Node_Str"",oSupportModeCommand);
  interp.createCommand(""String_Node_Str"",soar8Command);
  interp.createCommand(""String_Node_Str"",setParserCommand);
  interp.createCommand(""String_Node_Str"",propertiesCommand);
}",0.9832371530640286
12317,"public Agent(){
  new StandardFunctions(this);
  installDefaultTraceFormats();
  rete.setReteListener(soarReteListener);
}","public Agent(){
  decider.initialize();
  decisionCycle.initialize();
  rl.initialize();
  new StandardFunctions(this);
  installDefaultTraceFormats();
  rete.setReteListener(soarReteListener);
}",0.7697160883280757
12318,"/** 
 * consistency.cpp:41:remove_operator_if_necessary
 * @param s
 * @param w
 */
public void remove_operator_if_necessary(Slot s,WmeImpl w){
  if (s.getWmes() != null) {
    if (s.getWmes().value == w.value) {
      context.trace.print(Category.OPERAND2_REMOVALS,""String_Node_Str"",w);
      context.decider.remove_wmes_for_context_slot(s);
      if (s.id.lower_goal != null)       context.decider.remove_existing_context_and_descendents(s.id.lower_goal);
    }
  }
}","/** 
 * consistency.cpp:41:remove_operator_if_necessary
 * @param s
 * @param w
 */
public void remove_operator_if_necessary(Slot s,WmeImpl w){
  if (s.getWmes() != null) {
    if (s.getWmes().value == w.value) {
      context.getTrace().print(Category.OPERAND2_REMOVALS,""String_Node_Str"",w);
      context.decider.remove_wmes_for_context_slot(s);
      if (s.id.lower_goal != null)       context.decider.remove_existing_context_and_descendents(s.id.lower_goal);
    }
  }
}",0.9840933191940616
12319,"/** 
 * consistency.cpp:299:remove_current_decision
 * @param s
 */
private void remove_current_decision(Slot s){
  if (s.getWmes() == null)   context.trace.print(Category.OPERAND2_REMOVALS,""String_Node_Str"",s.id,s.attr);
  if (s.id != null)   context.trace.print(Category.OPERAND2_REMOVALS,""String_Node_Str"",s.id);
  context.decider.remove_wmes_for_context_slot(s);
  if (s.id.lower_goal != null)   context.decider.remove_existing_context_and_descendents(s.id.lower_goal);
  context.decider.do_buffered_wm_and_ownership_changes();
}","/** 
 * consistency.cpp:299:remove_current_decision
 * @param s
 */
private void remove_current_decision(Slot s){
  final Trace trace=context.getTrace();
  if (s.getWmes() == null)   trace.print(Category.OPERAND2_REMOVALS,""String_Node_Str"",s.id,s.attr);
  if (s.id != null)   trace.print(Category.OPERAND2_REMOVALS,""String_Node_Str"",s.id);
  context.decider.remove_wmes_for_context_slot(s);
  if (s.id.lower_goal != null)   context.decider.remove_existing_context_and_descendents(s.id.lower_goal);
  context.decider.do_buffered_wm_and_ownership_changes();
}",0.9486238532110092
12320,"/** 
 * Find the highest goal of activity among the current assertions and retractions <p>We have to start at the top of the goal stack and go down because *any goal in the goal stack could be active (and we want to highest one). However, we terminate as soon as a goal with assertions or retractions is found. Propose cares only about ms_i_assertions & retractions  consistency.cpp:420:highest_active_goal_propose
 * @param start_goal The goal to start at
 * @return highest active goal in goal stack.
 */
public IdentifierImpl highest_active_goal_propose(IdentifierImpl start_goal){
  for (IdentifierImpl goal=start_goal; goal != null; goal=goal.lower_goal) {
    if ((!goal.ms_i_assertions.isEmpty()) || (!goal.ms_retractions.isEmpty()))     return goal;
  }
  if (!context.soarReteListener.nil_goal_retractions.isEmpty())   return null;
  context.trace.flush();
  throw new IllegalStateException(""String_Node_Str"");
}","/** 
 * Find the highest goal of activity among the current assertions and retractions <p>We have to start at the top of the goal stack and go down because *any goal in the goal stack could be active (and we want to highest one). However, we terminate as soon as a goal with assertions or retractions is found. Propose cares only about ms_i_assertions & retractions  consistency.cpp:420:highest_active_goal_propose
 * @param start_goal The goal to start at
 * @return highest active goal in goal stack.
 */
public IdentifierImpl highest_active_goal_propose(IdentifierImpl start_goal){
  for (IdentifierImpl goal=start_goal; goal != null; goal=goal.lower_goal) {
    if ((!goal.ms_i_assertions.isEmpty()) || (!goal.ms_retractions.isEmpty()))     return goal;
  }
  if (!context.soarReteListener.nil_goal_retractions.isEmpty())   return null;
  context.getTrace().flush();
  throw new IllegalStateException(""String_Node_Str"");
}",0.991878722252301
12321,"@Override synchronized public void flush() throws IOException {
  outputWindow.append(buffer.toString());
  outputWindow.setCaretPosition(outputWindow.getText().length());
  buffer=new StringBuilder();
}","@Override synchronized public void flush() throws IOException {
  final String output=buffer.toString();
  buffer=new StringBuilder();
  if (output.length() > 0) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        outputWindow.append(output);
        outputWindow.setCaretPosition(outputWindow.getText().length());
      }
    }
);
  }
}",0.543859649122807
12322,"/** 
 * This decides the given context slot. It normally returns TRUE, but returns FALSE if the ONLY change as a result of the decision procedure was a change in the set of ^item's on the impasse below the given slot. <p>decide.cpp:2092:decide_context_slot
 * @param goal
 * @param s
 * @param predict (defaulted to false in CSoar)
 * @return
 */
private boolean decide_context_slot(IdentifierImpl goal,Slot s,boolean predict){
  ImpasseType impasse_type;
  SymbolImpl attribute_of_impasse;
  final ByRef<Preference> candidates=ByRef.create(null);
  if (!context_slot_is_decidable(s)) {
    impasse_type=ImpasseType.NO_CHANGE_IMPASSE_TYPE;
    candidates.value=null;
    if (predict) {
      context.decisionManip.predict_set(""String_Node_Str"");
      return true;
    }
  }
 else {
    impasse_type=run_preference_semantics(s,candidates,false,false);
    if (predict) {
switch (impasse_type) {
case CONSTRAINT_FAILURE_IMPASSE_TYPE:
        context.decisionManip.predict_set(""String_Node_Str"");
      break;
case CONFLICT_IMPASSE_TYPE:
    context.decisionManip.predict_set(""String_Node_Str"");
  break;
case TIE_IMPASSE_TYPE:
context.decisionManip.predict_set(""String_Node_Str"");
break;
case NO_CHANGE_IMPASSE_TYPE:
context.decisionManip.predict_set(""String_Node_Str"");
break;
default :
if (candidates.value == null || (candidates.value.value.asIdentifier() == null)) context.decisionManip.predict_set(""String_Node_Str"");
 else {
IdentifierImpl tempId=candidates.value.value.asIdentifier();
String temp=""String_Node_Str"" + tempId.name_letter + tempId.name_number;
context.decisionManip.predict_set(temp);
}
break;
}
return true;
}
remove_wmes_for_context_slot(s);
if (impasse_type == ImpasseType.NONE_IMPASSE_TYPE) {
if (candidates.value == null) {
impasse_type=ImpasseType.NO_CHANGE_IMPASSE_TYPE;
}
 else if (candidates.value.next_candidate != null) {
throw new IllegalStateException(""String_Node_Str"");
}
}
}
s.changed=null;
if (impasse_type == ImpasseType.NO_CHANGE_IMPASSE_TYPE) {
if (s.getWmes() != null) {
attribute_of_impasse=s.attr;
}
 else {
attribute_of_impasse=context.predefinedSyms.state_symbol;
}
}
 else {
attribute_of_impasse=s.attr;
}
if (attribute_of_impasse == context.predefinedSyms.state_symbol) {
remove_wmes_for_context_slot(goal.operator_slot);
}
if (impasse_type == ImpasseType.NONE_IMPASSE_TYPE) {
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_add_ref();
if (goal.lower_goal != null) remove_existing_context_and_descendents(goal.lower_goal);
WmeImpl w=context.workingMemory.make_wme(s.id,s.attr,candidates.value.value,false);
s.addWme(w);
w.preference=candidates.value;
w.preference.preference_add_ref();
context.workingMemory.add_wme_to_wm(w);
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_remove_ref(context.recMemory);
if (context.rl.rl_enabled()) context.rl.rl_store_data(goal,candidates.value);
return true;
}
if (impasse_type != ImpasseType.NO_CHANGE_IMPASSE_TYPE) goal.rl_info.impasse_type=impasse_type;
 else if (s.getWmes() != null) goal.rl_info.impasse_type=ImpasseType.OP_NO_CHANGE_IMPASSE_TYPE;
 else goal.rl_info.impasse_type=ImpasseType.STATE_NO_CHANGE_IMPASSE_TYPE;
if ((impasse_type == type_of_existing_impasse(goal)) && (attribute_of_impasse == attribute_of_existing_impasse(goal))) {
update_impasse_items(goal.lower_goal,candidates.value);
return false;
}
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_add_ref();
if (goal.lower_goal != null) remove_existing_context_and_descendents(goal.lower_goal);
if (context.operand2_mode && this.waitsnc && (impasse_type == ImpasseType.NO_CHANGE_IMPASSE_TYPE)&& (attribute_of_impasse == context.predefinedSyms.state_symbol)) {
this.waitsnc_detect=true;
}
 else {
create_new_context(attribute_of_impasse,impasse_type);
update_impasse_items(goal.lower_goal,candidates.value);
}
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_remove_ref(context.recMemory);
return true;
}","/** 
 * This decides the given context slot. It normally returns TRUE, but returns FALSE if the ONLY change as a result of the decision procedure was a change in the set of ^item's on the impasse below the given slot. <p>decide.cpp:2092:decide_context_slot
 * @param goal
 * @param s
 * @param predict (defaulted to false in CSoar)
 * @return
 */
private boolean decide_context_slot(IdentifierImpl goal,Slot s,boolean predict){
  ImpasseType impasse_type;
  SymbolImpl attribute_of_impasse;
  final ByRef<Preference> candidates=ByRef.create(null);
  if (!context_slot_is_decidable(s)) {
    impasse_type=ImpasseType.NO_CHANGE_IMPASSE_TYPE;
    candidates.value=null;
    if (predict) {
      context.decisionManip.predict_set(""String_Node_Str"");
      return true;
    }
  }
 else {
    impasse_type=run_preference_semantics(s,candidates,false,false);
    if (predict) {
switch (impasse_type) {
case CONSTRAINT_FAILURE_IMPASSE_TYPE:
        context.decisionManip.predict_set(""String_Node_Str"");
      break;
case CONFLICT_IMPASSE_TYPE:
    context.decisionManip.predict_set(""String_Node_Str"");
  break;
case TIE_IMPASSE_TYPE:
context.decisionManip.predict_set(""String_Node_Str"");
break;
case NO_CHANGE_IMPASSE_TYPE:
context.decisionManip.predict_set(""String_Node_Str"");
break;
default :
if (candidates.value == null || (candidates.value.value.asIdentifier() == null)) context.decisionManip.predict_set(""String_Node_Str"");
 else {
IdentifierImpl tempId=candidates.value.value.asIdentifier();
String temp=String.format(""String_Node_Str"",tempId);
context.decisionManip.predict_set(temp);
}
break;
}
return true;
}
remove_wmes_for_context_slot(s);
if (impasse_type == ImpasseType.NONE_IMPASSE_TYPE) {
if (candidates.value == null) {
impasse_type=ImpasseType.NO_CHANGE_IMPASSE_TYPE;
}
 else if (candidates.value.next_candidate != null) {
throw new IllegalStateException(""String_Node_Str"");
}
}
}
s.changed=null;
if (impasse_type == ImpasseType.NO_CHANGE_IMPASSE_TYPE) {
if (s.getWmes() != null) {
attribute_of_impasse=s.attr;
}
 else {
attribute_of_impasse=context.predefinedSyms.state_symbol;
}
}
 else {
attribute_of_impasse=s.attr;
}
if (attribute_of_impasse == context.predefinedSyms.state_symbol) {
remove_wmes_for_context_slot(goal.operator_slot);
}
if (impasse_type == ImpasseType.NONE_IMPASSE_TYPE) {
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_add_ref();
if (goal.lower_goal != null) remove_existing_context_and_descendents(goal.lower_goal);
WmeImpl w=context.workingMemory.make_wme(s.id,s.attr,candidates.value.value,false);
s.addWme(w);
w.preference=candidates.value;
w.preference.preference_add_ref();
context.workingMemory.add_wme_to_wm(w);
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_remove_ref(context.recMemory);
if (context.rl.rl_enabled()) context.rl.rl_store_data(goal,candidates.value);
return true;
}
if (impasse_type != ImpasseType.NO_CHANGE_IMPASSE_TYPE) goal.rl_info.impasse_type=impasse_type;
 else if (s.getWmes() != null) goal.rl_info.impasse_type=ImpasseType.OP_NO_CHANGE_IMPASSE_TYPE;
 else goal.rl_info.impasse_type=ImpasseType.STATE_NO_CHANGE_IMPASSE_TYPE;
if ((impasse_type == type_of_existing_impasse(goal)) && (attribute_of_impasse == attribute_of_existing_impasse(goal))) {
update_impasse_items(goal.lower_goal,candidates.value);
return false;
}
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_add_ref();
if (goal.lower_goal != null) remove_existing_context_and_descendents(goal.lower_goal);
if (context.operand2_mode && this.waitsnc && (impasse_type == ImpasseType.NO_CHANGE_IMPASSE_TYPE)&& (attribute_of_impasse == context.predefinedSyms.state_symbol)) {
this.waitsnc_detect=true;
}
 else {
create_new_context(attribute_of_impasse,impasse_type);
update_impasse_items(goal.lower_goal,candidates.value);
}
for (Preference temp=candidates.value; temp != null; temp=temp.next_candidate) temp.preference_remove_ref(context.recMemory);
return true;
}",0.9935563816604708
12323,"/** 
 * decision_manipulation.cpp:59:select_force
 * @param candidates
 * @param reinit
 * @return
 */
Preference select_force(Preference candidates,boolean reinit){
  Preference return_val=null;
  Preference cand=candidates;
  if (this.select_enabled) {
    while (cand != null && return_val == null) {
      IdentifierImpl valueAsId=cand.value.asIdentifier();
      if (valueAsId != null) {
        String temp=Character.toString(valueAsId.name_letter) + valueAsId.name_number;
        if (this.select_operator.equals(temp))         return_val=cand;
      }
      cand=cand.next;
    }
    if (reinit)     select_init();
  }
  return return_val;
}","/** 
 * decision_manipulation.cpp:59:select_force
 * @param candidates
 * @param reinit
 * @return
 */
Preference select_force(Preference candidates,boolean reinit){
  Preference return_val=null;
  Preference cand=candidates;
  if (this.select_enabled) {
    while (cand != null && return_val == null) {
      IdentifierImpl valueAsId=cand.value.asIdentifier();
      if (valueAsId != null) {
        String temp=String.format(""String_Node_Str"",valueAsId);
        if (this.select_operator.equals(temp))         return_val=cand;
      }
      cand=cand.next;
    }
    if (reinit)     select_init();
  }
  return return_val;
}",0.8486274509803922
12324,"/** 
 * chunk.cpp:181:variablize_symbol <p>Note: In jsoar, modified to return new variable rather than replace  byref argument
 * @param sym
 * @return
 */
private SymbolImpl variablize_symbol(SymbolImpl sym){
  IdentifierImpl id=sym.asIdentifier();
  if (id == null)   return sym;
  if (!this.variablize_this_chunk)   return sym;
  if (id.tc_number == this.variablization_tc) {
    return id.variablization;
  }
  id.tc_number=this.variablization_tc;
  Variable var=context.variableGenerator.generate_new_variable(Character.toString(id.name_letter));
  id.variablization=var;
  return var;
}","/** 
 * chunk.cpp:181:variablize_symbol <p>Note: In jsoar, modified to return new variable rather than replace  byref argument
 * @param sym
 * @return
 */
private SymbolImpl variablize_symbol(SymbolImpl sym){
  IdentifierImpl id=sym.asIdentifier();
  if (id == null)   return sym;
  if (!this.variablize_this_chunk)   return sym;
  if (id.tc_number == this.variablization_tc) {
    return id.variablization;
  }
  id.tc_number=this.variablization_tc;
  Variable var=context.variableGenerator.generate_new_variable(Character.toString(id.getNameLetter()));
  id.variablization=var;
  return var;
}",0.9781144781144782
12325,"/** 
 * symtab.cpp:280:make_new_identifier
 * @param name_letter
 * @param level
 * @return
 */
public IdentifierImpl make_new_identifier(char name_letter,int level){
  name_letter=Character.isLetter(name_letter) ? Character.toUpperCase(name_letter) : 'I';
  int name_number=id_counter[name_letter - 'A']++;
  IdentifierImpl id=new IdentifierImpl(get_next_hash_id(),name_letter,name_number);
  id.level=level;
  id.promotion_level=level;
  identifiers.put(new IdKey(id.name_letter,id.name_number),id);
  return id;
}","/** 
 * symtab.cpp:280:make_new_identifier
 * @param name_letter
 * @param level
 * @return
 */
public IdentifierImpl make_new_identifier(char name_letter,int level){
  name_letter=Character.isLetter(name_letter) ? Character.toUpperCase(name_letter) : 'I';
  int name_number=id_counter[name_letter - 'A']++;
  IdentifierImpl id=new IdentifierImpl(get_next_hash_id(),name_letter,name_number);
  id.level=level;
  id.promotion_level=level;
  identifiers.put(new IdKey(id.getNameLetter(),id.getNameNumber()),id);
  return id;
}",0.9596153846153846
12326,"@Test public void testCycleCountInput() throws Exception {
  final List<Integer> matches=new ArrayList<Integer>();
  agent.getRhsFunctions().registerHandler(new AbstractRhsFunctionHandler(""String_Node_Str""){
    @Override public Symbol execute(    SymbolFactory syms,    List<Symbol> arguments) throws RhsFunctionException {
      matches.add(arguments.get(0).asInteger().getValue());
      return null;
    }
  }
);
  CycleCountInput input=new CycleCountInput(agent.getInputOutput(),agent.getEventManager());
  agent.decider.setWaitsnc(true);
  agent.loadProduction(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  final int n=50;
  agent.decisionCycle.run_for_n_decision_cycles(n);
  assertEquals(n - 1,matches.size());
  int expected=1;
  for (  Integer i : matches) {
    assertEquals(expected++,i);
  }
}","@Test public void testCycleCountInput() throws Exception {
  final List<Integer> matches=new ArrayList<Integer>();
  agent.getRhsFunctions().registerHandler(new AbstractRhsFunctionHandler(""String_Node_Str""){
    @Override public Symbol execute(    SymbolFactory syms,    List<Symbol> arguments) throws RhsFunctionException {
      matches.add(arguments.get(0).asInteger().getValue());
      return null;
    }
  }
);
  CycleCountInput input=new CycleCountInput(agent.getInputOutput(),agent.getEventManager());
  agent.decider.setWaitsnc(true);
  agent.loadProduction(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  final int n=50;
  agent.decisionCycle.run_for_n_decision_cycles(n);
  assertEquals(n - 1,matches.size());
  int expected=1;
  for (  Integer i : matches) {
    assertEquals(expected++,i.intValue());
  }
}",0.993502658003544
12327,"@Test public void testMakeNewIdentifier(){
  IdentifierImpl s=syms.make_new_identifier('s',(short)1);
  assertNotNull(s);
  assertEquals('S',s.name_letter);
  assertEquals(1,s.name_number);
  assertEquals(1,s.level);
  assertFalse(s.hash_id == 0);
  assertSame(s,syms.findIdentifier(s.name_letter,s.name_number));
  s=syms.make_new_identifier('s',(short)4);
  assertNotNull(s);
  assertEquals('S',s.name_letter);
  assertEquals(2,s.name_number);
  assertEquals(4,s.level);
  assertFalse(s.hash_id == 0);
  assertSame(s,syms.findIdentifier(s.name_letter,s.name_number));
}","@Test public void testMakeNewIdentifier(){
  IdentifierImpl s=syms.make_new_identifier('s',(short)1);
  assertNotNull(s);
  assertEquals('S',s.getNameLetter());
  assertEquals(1,s.getNameNumber());
  assertEquals(1,s.level);
  assertFalse(s.hash_id == 0);
  assertSame(s,syms.findIdentifier(s.getNameLetter(),s.getNameNumber()));
  s=syms.make_new_identifier('s',(short)4);
  assertNotNull(s);
  assertEquals('S',s.getNameLetter());
  assertEquals(2,s.getNameNumber());
  assertEquals(4,s.level);
  assertFalse(s.hash_id == 0);
  assertSame(s,syms.findIdentifier(s.getNameLetter(),s.getNameNumber()));
}",0.8466780238500852
12328,"public boolean installMods(final ServerList server,List<GenericModule> toInstall,List<ConfigFile> configs,boolean clearExisting,final Instance instData,ModSide side) throws FileNotFoundException {
  if (Version.requestedFeatureLevel(server.getMCUVersion(),""String_Node_Str"")) {
  }
  final Path instancePath=instanceRoot.resolve(server.getServerId());
  Path binPath=instancePath.resolve(""String_Node_Str"");
  final Path productionJar;
  final File tmpFolder=instancePath.resolve(""String_Node_Str"").toFile();
  tmpFolder.mkdirs();
  Set<Downloadable> jarMods=new HashSet<Downloadable>();
  Set<Downloadable> generalFiles=new HashSet<Downloadable>();
  DownloadQueue jarQueue=null;
  DownloadQueue generalQueue=null;
  DownloadQueue libraryQueue=null;
  final List<String> libExtract=new ArrayList<String>();
  final Map<String,Boolean> modExtract=new HashMap<String,Boolean>();
  final Map<String,Boolean> keepMeta=new TreeMap<String,Boolean>();
  Downloadable baseJar=null;
switch (side) {
case CLIENT:
    MinecraftVersion version=MinecraftVersion.loadVersion(server.getVersion());
  Set<Downloadable> libSet=new HashSet<Downloadable>();
for (Library lib : version.getLibraries()) {
  if (lib.validForOS()) {
    List<URL> urls=new ArrayList<URL>();
    try {
      urls.add(new URL(lib.getDownloadUrl()));
    }
 catch (    MalformedURLException e) {
      apiLogger.log(Level.SEVERE,""String_Node_Str"",e);
    }
    Downloadable entry=new Downloadable(lib.getName(),lib.getFilename(),""String_Node_Str"",100000,urls);
    libSet.add(entry);
    if (lib.hasNatives()) {
      libExtract.add(lib.getFilename());
    }
  }
}
libraryQueue=parent.submitNewQueue(""String_Node_Str"",server.getServerId(),libSet,instancePath.resolve(""String_Node_Str"").toFile(),DownloadCache.getDir());
productionJar=binPath.resolve(""String_Node_Str"");
List<URL> jarUrl=new ArrayList<URL>();
try {
jarUrl.add(new URL(""String_Node_Str"" + server.getVersion() + ""String_Node_Str""+ server.getVersion()+ ""String_Node_Str""));
}
 catch (MalformedURLException e2) {
apiLogger.log(Level.SEVERE,""String_Node_Str"",e2);
}
String jarMD5=""String_Node_Str"";
for (Entry<String,String> entry : versionMap.entrySet()) {
if (entry.getValue().equals(server.getVersion())) {
jarMD5=entry.getKey();
break;
}
}
baseJar=new Downloadable(""String_Node_Str"",""String_Node_Str"",jarMD5,3000000,jarUrl);
keepMeta.put(""String_Node_Str"",Version.requestedFeatureLevel(server.getVersion(),""String_Node_Str""));
break;
case SERVER:
productionJar=instancePath.resolve(""String_Node_Str"");
break;
default :
apiLogger.severe(""String_Node_Str"" + side.toString() + ""String_Node_Str"");
return false;
}
Boolean updateJar=clearExisting;
if (side == ModSide.CLIENT) {
if (!productionJar.toFile().exists()) {
updateJar=true;
}
}
 else {
}
Iterator<GenericModule> iMods=toInstall.iterator();
List<String> modIds=new ArrayList<String>();
int jarModCount=0;
while (iMods.hasNext() && !updateJar) {
GenericModule current=iMods.next();
if (current.getInJar()) {
FileInfo jarMod=instData.findJarMod(current.getId());
if (jarMod == null) {
updateJar=true;
}
 else if (current.getMD5().isEmpty() || (!current.getMD5().equalsIgnoreCase(jarMod.getMD5()))) {
updateJar=true;
}
jarModCount++;
}
 else {
modIds.add(current.getId());
}
}
if (jarModCount != instData.getJarMods().size()) {
updateJar=true;
}
if (updateJar && baseJar != null) {
jarMods.add(baseJar);
}
Iterator<FileInfo> itExisting=instData.getInstanceFiles().iterator();
while (itExisting.hasNext()) {
FileInfo entry=itExisting.next();
if (!modIds.contains(entry.getModId())) {
instancePath.resolve(entry.getFilename()).toFile().delete();
}
}
instData.setJarMods(new ArrayList<FileInfo>());
instData.setInstanceFiles(new ArrayList<FileInfo>());
jarModCount=0;
apiLogger.info(""String_Node_Str"" + instancePath.toString());
List<File> contents=recurseFolder(instancePath.toFile(),true);
if (clearExisting) {
parent.setStatus(""String_Node_Str"");
parent.log(""String_Node_Str"");
Iterator<File> it=new ArrayList<File>(contents).iterator();
while (it.hasNext()) {
File entry=it.next();
if (getExcludedNames(entry.getPath(),true)) {
contents.remove(entry);
}
}
ListIterator<File> liClear=contents.listIterator(contents.size());
while (liClear.hasPrevious()) {
File entry=liClear.previous();
entry.delete();
}
}
Iterator<GenericModule> itMods=toInstall.iterator();
final File buildJar=archiveFolder.resolve(""String_Node_Str"").toFile();
if (buildJar.exists()) {
buildJar.delete();
}
int modCount=toInstall.size();
int modsLoaded=0;
int errorCount=0;
while (itMods.hasNext()) {
GenericModule entry=itMods.next();
parent.setStatus(""String_Node_Str"" + entry.getName());
parent.log(""String_Node_Str"" + entry.getName());
Collections.sort(entry.getPrioritizedUrls());
if (entry.getInJar()) {
if (updateJar) {
jarMods.add(new Downloadable(entry.getName(),String.valueOf(entry.getJarOrder()) + ""String_Node_Str"" + entry.getId()+ ""String_Node_Str"",entry.getMD5(),100000,entry.getUrls()));
keepMeta.put(String.valueOf(entry.getJarOrder()) + ""String_Node_Str"" + cleanForFile(entry.getId())+ ""String_Node_Str"",entry.getKeepMeta());
instData.addJarMod(entry.getId(),entry.getMD5());
jarModCount++;
}
}
 else if (entry.getCoreMod()) {
String filename=""String_Node_Str"" + cleanForFile(entry.getId()) + ""String_Node_Str"";
generalFiles.add(new Downloadable(entry.getName(),filename,entry.getMD5(),100000,entry.getUrls()));
instData.addMod(entry.getId(),entry.getMD5(),filename);
}
 else if (entry.getIsLibrary()) {
String filename=""String_Node_Str"" + cleanForFile(entry.getId()) + ""String_Node_Str"";
generalFiles.add(new Downloadable(entry.getName(),filename,entry.getMD5(),100000,entry.getUrls()));
instData.addMod(entry.getId(),entry.getMD5(),filename);
}
 else if (entry.getExtract()) {
generalFiles.add(new Downloadable(entry.getName(),cleanForFile(entry.getId()) + ""String_Node_Str"",entry.getMD5(),100000,entry.getUrls()));
modExtract.put(cleanForFile(entry.getId()) + ""String_Node_Str"",entry.getInRoot());
}
 else {
String filename=entry.getPath().isEmpty() ? ""String_Node_Str"" + cleanForFile(entry.getId()) + (entry.isLitemod() ? ""String_Node_Str"" : ""String_Node_Str"") : entry.getPath();
generalFiles.add(new Downloadable(entry.getName(),filename,entry.getMD5(),100000,entry.getUrls()));
instData.addMod(entry.getId(),entry.getMD5(),filename);
}
modsLoaded++;
parent.log(""String_Node_Str"" + modsLoaded + ""String_Node_Str""+ modCount+ ""String_Node_Str"");
}
Iterator<ConfigFile> itConfigs=configs.iterator();
while (itConfigs.hasNext()) {
final ConfigFile cfEntry=itConfigs.next();
final File confFile=instancePath.resolve(cfEntry.getPath()).toFile();
if (confFile.exists() && cfEntry.isNoOverwrite()) {
continue;
}
List<URL> configUrl=new ArrayList<URL>();
try {
configUrl.add(new URL(cfEntry.getUrl()));
}
 catch (MalformedURLException e) {
++errorCount;
apiLogger.log(Level.SEVERE,""String_Node_Str"",e);
}
generalFiles.add(new Downloadable(cfEntry.getPath(),cfEntry.getPath(),cfEntry.getMD5(),10000,configUrl));
}
generalQueue=parent.submitNewQueue(""String_Node_Str"",server.getServerId(),generalFiles,instancePath.toFile(),DownloadCache.getDir());
jarQueue=parent.submitNewQueue(""String_Node_Str"",server.getServerId(),jarMods,tmpFolder,DownloadCache.getDir());
TaskableExecutor libExecutor=new TaskableExecutor(2,new Runnable(){
@Override public void run(){
for (String entry : libExtract) {
Archive.extractZip(instancePath.resolve(""String_Node_Str"").resolve(entry).toFile(),instancePath.resolve(""String_Node_Str"").resolve(""String_Node_Str"").toFile(),false);
}
}
}
);
libraryQueue.processQueue(libExecutor);
final File branding=new File(tmpFolder,""String_Node_Str"");
try {
branding.createNewFile();
Properties propBrand=new Properties();
propBrand.setProperty(""String_Node_Str"",""String_Node_Str"" + server.getName() + ""String_Node_Str""+ server.getRevision()+ ""String_Node_Str"");
propBrand.store(new FileOutputStream(branding),""String_Node_Str"");
}
 catch (IOException e1) {
apiLogger.log(Level.SEVERE,""String_Node_Str"",e1);
}
final boolean doJarUpdate=updateJar;
TaskableExecutor jarExecutor=new TaskableExecutor(2,new Runnable(){
@Override public void run(){
for (Map.Entry<String,Boolean> entry : keepMeta.entrySet()) {
File entryFile=new File(tmpFolder,entry.getKey());
Archive.extractZip(entryFile,tmpFolder,entry.getValue());
entryFile.delete();
}
try {
buildJar.createNewFile();
}
 catch (IOException e) {
apiLogger.log(Level.SEVERE,""String_Node_Str"",e);
}
boolean doManifest=true;
List<File> buildList=recurseFolder(tmpFolder,true);
Iterator<File> blIt=new ArrayList<File>(buildList).iterator();
while (blIt.hasNext()) {
File entry=blIt.next();
if (entry.getPath().contains(""String_Node_Str"")) {
doManifest=false;
}
}
if (!doJarUpdate) {
try {
Archive.updateArchive(productionJar.toFile(),new File[]{branding});
}
 catch (IOException e1) {
apiLogger.log(Level.SEVERE,""String_Node_Str"",e1);
}
}
 else {
parent.log(""String_Node_Str"");
try {
Archive.createJar(buildJar,buildList,tmpFolder.getPath() + sep,doManifest);
}
 catch (IOException e1) {
parent.log(""String_Node_Str"");
apiLogger.log(Level.SEVERE,""String_Node_Str"",e1);
}
try {
Files.copy(new Path(buildJar),productionJar);
}
 catch (IOException e) {
apiLogger.log(Level.SEVERE,""String_Node_Str"",e);
}
}
List<File> tempFiles=recurseFolder(tmpFolder,true);
ListIterator<File> li=tempFiles.listIterator(tempFiles.size());
while (li.hasPrevious()) {
File entry=li.previous();
entry.delete();
}
if (server.isGenerateList()) {
writeMCServerFile(server.getName(),server.getAddress(),server.getServerId());
}
instData.setMCVersion(server.getVersion());
instData.setRevision(server.getRevision());
String jsonOut=gson.toJson(instData);
try {
BufferedWriter writer=Files.newBufferedWriter(getInstanceRoot().resolve(server.getServerId()).resolve(""String_Node_Str""));
writer.append(jsonOut);
writer.close();
}
 catch (IOException e) {
apiLogger.log(Level.SEVERE,""String_Node_Str"",e);
}
}
}
);
jarQueue.processQueue(jarExecutor);
TaskableExecutor genExecutor=new TaskableExecutor(12,new Runnable(){
@Override public void run(){
for (Map.Entry<String,Boolean> entry : modExtract.entrySet()) {
if (entry.getValue()) {
Archive.extractZip(instancePath.resolve(entry.getKey()).toFile(),instancePath.toFile());
}
 else {
Archive.extractZip(instancePath.resolve(entry.getKey()).toFile(),instancePath.resolve(""String_Node_Str"").toFile());
}
instancePath.resolve(entry.getKey()).toFile().delete();
}
}
}
);
generalQueue.processQueue(genExecutor);
if (errorCount > 0) {
parent.baseLogger.severe(""String_Node_Str"");
return false;
}
return true;
}","public boolean installMods(final ServerList server,List<GenericModule> toInstall,List<ConfigFile> configs,boolean clearExisting,final Instance instData,ModSide side) throws FileNotFoundException {
  if (Version.requestedFeatureLevel(server.getMCUVersion(),""String_Node_Str"")) {
  }
  final Path instancePath=instanceRoot.resolve(server.getServerId());
  Path binPath=instancePath.resolve(""String_Node_Str"");
  final Path productionJar;
  final File tmpFolder=instancePath.resolve(""String_Node_Str"").toFile();
  tmpFolder.mkdirs();
  Set<Downloadable> jarMods=new HashSet<Downloadable>();
  Set<Downloadable> generalFiles=new HashSet<Downloadable>();
  DownloadQueue jarQueue=null;
  DownloadQueue generalQueue=null;
  DownloadQueue libraryQueue=null;
  final List<String> libExtract=new ArrayList<String>();
  final Map<String,Boolean> modExtract=new HashMap<String,Boolean>();
  final Map<String,Boolean> keepMeta=new TreeMap<String,Boolean>();
  Downloadable baseJar=null;
switch (side) {
case CLIENT:
    MinecraftVersion version=MinecraftVersion.loadVersion(server.getVersion());
  Set<Downloadable> libSet=new HashSet<Downloadable>();
for (Library lib : version.getLibraries()) {
  if (lib.validForOS()) {
    List<URL> urls=new ArrayList<URL>();
    try {
      urls.add(new URL(lib.getDownloadUrl()));
    }
 catch (    MalformedURLException e) {
      apiLogger.log(Level.SEVERE,""String_Node_Str"",e);
    }
    Downloadable entry=new Downloadable(lib.getName(),lib.getFilename(),""String_Node_Str"",100000,urls);
    libSet.add(entry);
    if (lib.hasNatives()) {
      libExtract.add(lib.getFilename());
    }
  }
}
libraryQueue=parent.submitNewQueue(""String_Node_Str"",server.getServerId(),libSet,instancePath.resolve(""String_Node_Str"").toFile(),DownloadCache.getDir());
productionJar=binPath.resolve(""String_Node_Str"");
List<URL> jarUrl=new ArrayList<URL>();
try {
jarUrl.add(new URL(""String_Node_Str"" + server.getVersion() + ""String_Node_Str""+ server.getVersion()+ ""String_Node_Str""));
}
 catch (MalformedURLException e2) {
apiLogger.log(Level.SEVERE,""String_Node_Str"",e2);
}
String jarMD5=""String_Node_Str"";
for (Entry<String,String> entry : versionMap.entrySet()) {
if (entry.getValue().equals(server.getVersion())) {
jarMD5=entry.getKey();
break;
}
}
baseJar=new Downloadable(""String_Node_Str"",""String_Node_Str"",jarMD5,3000000,jarUrl);
keepMeta.put(""String_Node_Str"",Version.requestedFeatureLevel(server.getVersion(),""String_Node_Str""));
break;
case SERVER:
productionJar=instancePath.resolve(""String_Node_Str"");
break;
default :
apiLogger.severe(""String_Node_Str"" + side.toString() + ""String_Node_Str"");
return false;
}
Boolean updateJar=clearExisting;
if (side == ModSide.CLIENT) {
if (!productionJar.toFile().exists()) {
updateJar=true;
}
}
 else {
}
Iterator<GenericModule> iMods=toInstall.iterator();
List<String> modIds=new ArrayList<String>();
int jarModCount=0;
while (iMods.hasNext() && !updateJar) {
GenericModule current=iMods.next();
if (current.getInJar()) {
FileInfo jarMod=instData.findJarMod(current.getId());
if (jarMod == null) {
updateJar=true;
}
 else if (current.getMD5().isEmpty() || (!current.getMD5().equalsIgnoreCase(jarMod.getMD5()))) {
updateJar=true;
}
jarModCount++;
}
 else {
modIds.add(current.getId());
}
}
if (jarModCount != instData.getJarMods().size()) {
updateJar=true;
}
if (updateJar && baseJar != null) {
jarMods.add(baseJar);
}
Iterator<FileInfo> itExisting=instData.getInstanceFiles().iterator();
while (itExisting.hasNext()) {
FileInfo entry=itExisting.next();
if (!modIds.contains(entry.getModId())) {
instancePath.resolve(entry.getFilename()).toFile().delete();
}
}
instData.setJarMods(new ArrayList<FileInfo>());
instData.setInstanceFiles(new ArrayList<FileInfo>());
jarModCount=0;
apiLogger.info(""String_Node_Str"" + instancePath.toString());
List<File> contents=recurseFolder(instancePath.toFile(),true);
if (clearExisting) {
parent.setStatus(""String_Node_Str"");
parent.log(""String_Node_Str"");
Iterator<File> it=new ArrayList<File>(contents).iterator();
while (it.hasNext()) {
File entry=it.next();
if (getExcludedNames(entry.getPath(),true)) {
contents.remove(entry);
}
}
ListIterator<File> liClear=contents.listIterator(contents.size());
while (liClear.hasPrevious()) {
File entry=liClear.previous();
entry.delete();
}
}
Iterator<GenericModule> itMods=toInstall.iterator();
final File buildJar=archiveFolder.resolve(""String_Node_Str"").toFile();
if (buildJar.exists()) {
buildJar.delete();
}
int modCount=toInstall.size();
int modsLoaded=0;
int errorCount=0;
while (itMods.hasNext()) {
GenericModule entry=itMods.next();
parent.setStatus(""String_Node_Str"" + entry.getName());
parent.log(""String_Node_Str"" + entry.getName());
Collections.sort(entry.getPrioritizedUrls());
if (entry.getInJar()) {
if (updateJar) {
jarMods.add(new Downloadable(entry.getName(),String.valueOf(entry.getJarOrder()) + ""String_Node_Str"" + entry.getId()+ ""String_Node_Str"",entry.getMD5(),100000,entry.getUrls()));
keepMeta.put(String.valueOf(entry.getJarOrder()) + ""String_Node_Str"" + cleanForFile(entry.getId())+ ""String_Node_Str"",entry.getKeepMeta());
instData.addJarMod(entry.getId(),entry.getMD5());
jarModCount++;
}
}
 else if (entry.getCoreMod()) {
String filename=""String_Node_Str"" + cleanForFile(entry.getId()) + ""String_Node_Str"";
generalFiles.add(new Downloadable(entry.getName(),filename,entry.getMD5(),100000,entry.getUrls()));
instData.addMod(entry.getId(),entry.getMD5(),filename);
}
 else if (entry.getIsLibrary()) {
String filename=""String_Node_Str"" + cleanForFile(entry.getId()) + ""String_Node_Str"";
generalFiles.add(new Downloadable(entry.getName(),filename,entry.getMD5(),100000,entry.getUrls()));
instData.addMod(entry.getId(),entry.getMD5(),filename);
}
 else if (entry.getExtract()) {
generalFiles.add(new Downloadable(entry.getName(),cleanForFile(entry.getId()) + ""String_Node_Str"",entry.getMD5(),100000,entry.getUrls()));
modExtract.put(cleanForFile(entry.getId()) + ""String_Node_Str"",entry.getInRoot());
}
 else {
String filename=entry.getPath().isEmpty() ? ""String_Node_Str"" + cleanForFile(entry.getId()) + (entry.isLitemod() ? ""String_Node_Str"" : ""String_Node_Str"") : entry.getPath();
generalFiles.add(new Downloadable(entry.getName(),filename,entry.getMD5(),100000,entry.getUrls()));
instData.addMod(entry.getId(),entry.getMD5(),filename);
}
modsLoaded++;
parent.log(""String_Node_Str"" + modsLoaded + ""String_Node_Str""+ modCount+ ""String_Node_Str"");
}
Iterator<ConfigFile> itConfigs=configs.iterator();
while (itConfigs.hasNext()) {
final ConfigFile cfEntry=itConfigs.next();
final File confFile=instancePath.resolve(cfEntry.getPath()).toFile();
if (confFile.exists() && cfEntry.isNoOverwrite()) {
continue;
}
List<URL> configUrl=new ArrayList<URL>();
try {
configUrl.add(new URL(cfEntry.getUrl()));
}
 catch (MalformedURLException e) {
++errorCount;
apiLogger.log(Level.SEVERE,""String_Node_Str"",e);
}
generalFiles.add(new Downloadable(cfEntry.getPath(),cfEntry.getPath(),cfEntry.getMD5(),10000,configUrl));
}
generalQueue=parent.submitNewQueue(""String_Node_Str"",server.getServerId(),generalFiles,instancePath.toFile(),DownloadCache.getDir());
jarQueue=parent.submitNewQueue(""String_Node_Str"",server.getServerId(),jarMods,tmpFolder,DownloadCache.getDir());
TaskableExecutor libExecutor=new TaskableExecutor(2,new Runnable(){
@Override public void run(){
for (String entry : libExtract) {
Archive.extractZip(instancePath.resolve(""String_Node_Str"").resolve(entry).toFile(),instancePath.resolve(""String_Node_Str"").resolve(""String_Node_Str"").toFile(),false);
}
}
}
);
libraryQueue.processQueue(libExecutor);
final File branding=new File(tmpFolder,""String_Node_Str"");
try {
branding.createNewFile();
Properties propBrand=new Properties();
propBrand.setProperty(""String_Node_Str"",""String_Node_Str"" + server.getName() + ""String_Node_Str""+ server.getRevision()+ ""String_Node_Str"");
propBrand.store(new FileOutputStream(branding),""String_Node_Str"");
}
 catch (IOException e1) {
apiLogger.log(Level.SEVERE,""String_Node_Str"",e1);
}
final boolean doJarUpdate=updateJar;
TaskableExecutor jarExecutor=new TaskableExecutor(2,new Runnable(){
@Override public void run(){
if (!doJarUpdate) {
try {
Archive.updateArchive(productionJar.toFile(),new File[]{branding});
}
 catch (IOException e1) {
apiLogger.log(Level.SEVERE,""String_Node_Str"",e1);
}
}
 else {
for (Map.Entry<String,Boolean> entry : keepMeta.entrySet()) {
File entryFile=new File(tmpFolder,entry.getKey());
Archive.extractZip(entryFile,tmpFolder,entry.getValue());
entryFile.delete();
}
try {
buildJar.createNewFile();
}
 catch (IOException e) {
apiLogger.log(Level.SEVERE,""String_Node_Str"",e);
}
boolean doManifest=true;
List<File> buildList=recurseFolder(tmpFolder,true);
Iterator<File> blIt=new ArrayList<File>(buildList).iterator();
while (blIt.hasNext()) {
File entry=blIt.next();
if (entry.getPath().contains(""String_Node_Str"")) {
doManifest=false;
}
}
parent.log(""String_Node_Str"");
try {
Archive.createJar(buildJar,buildList,tmpFolder.getPath() + sep,doManifest);
}
 catch (IOException e1) {
parent.log(""String_Node_Str"");
apiLogger.log(Level.SEVERE,""String_Node_Str"",e1);
}
try {
Files.copy(new Path(buildJar),productionJar);
}
 catch (IOException e) {
apiLogger.log(Level.SEVERE,""String_Node_Str"",e);
}
}
List<File> tempFiles=recurseFolder(tmpFolder,true);
ListIterator<File> li=tempFiles.listIterator(tempFiles.size());
while (li.hasPrevious()) {
File entry=li.previous();
entry.delete();
}
if (server.isGenerateList()) {
writeMCServerFile(server.getName(),server.getAddress(),server.getServerId());
}
instData.setMCVersion(server.getVersion());
instData.setRevision(server.getRevision());
String jsonOut=gson.toJson(instData);
try {
BufferedWriter writer=Files.newBufferedWriter(getInstanceRoot().resolve(server.getServerId()).resolve(""String_Node_Str""));
writer.append(jsonOut);
writer.close();
}
 catch (IOException e) {
apiLogger.log(Level.SEVERE,""String_Node_Str"",e);
}
}
}
);
jarQueue.processQueue(jarExecutor);
TaskableExecutor genExecutor=new TaskableExecutor(12,new Runnable(){
@Override public void run(){
for (Map.Entry<String,Boolean> entry : modExtract.entrySet()) {
if (entry.getValue()) {
Archive.extractZip(instancePath.resolve(entry.getKey()).toFile(),instancePath.toFile());
}
 else {
Archive.extractZip(instancePath.resolve(entry.getKey()).toFile(),instancePath.resolve(""String_Node_Str"").toFile());
}
instancePath.resolve(entry.getKey()).toFile().delete();
}
}
}
);
generalQueue.processQueue(genExecutor);
if (errorCount > 0) {
parent.baseLogger.severe(""String_Node_Str"");
return false;
}
return true;
}",0.9478178368121444
12329,"private static Set<Downloadable> getAssets(File baseDirectory){
  Set<Downloadable> assets=new HashSet<Downloadable>();
  try {
    URL resourceUrl=new URL(""String_Node_Str"");
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    Document doc=db.parse(resourceUrl.openConnection().getInputStream());
    NodeList nodes=doc.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < nodes.getLength(); i++) {
      Node node=nodes.item(i);
      if (node.getNodeType() == 1) {
        Element element=(Element)node;
        String key=getNodeValue(element,""String_Node_Str"");
        String etag=element.getElementsByTagName(""String_Node_Str"") != null ? getNodeValue(element,""String_Node_Str"") : ""String_Node_Str"";
        long size=Long.parseLong(getNodeValue(element,""String_Node_Str""));
        if (size > 0L) {
          File file=new File(baseDirectory,key);
          if (etag.length() > 1) {
            etag=scrubEtag(etag);
            if ((file.isFile()) && (file.length() == size)) {
              String localMD5=Downloadable.getMD5(file);
              if (localMD5.equals(etag))               continue;
            }
          }
          List<URL> urls=new ArrayList<URL>();
          urls.add(new URL(resourceUrl + key));
          Downloadable download=new Downloadable(key,key,etag,size,urls);
          assets.add(download);
        }
      }
    }
  }
 catch (  Exception e) {
  }
  return assets;
}","private static Set<Downloadable> getAssets(File baseDirectory){
  Set<Downloadable> assets=new HashSet<Downloadable>();
  try {
    URL resourceUrl=new URL(""String_Node_Str"");
    URL localUrl=MCUpdater.getInstance().getMCFolder().resolve(""String_Node_Str"").toFile().toURI().toURL();
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    Document doc=db.parse(resourceUrl.openConnection().getInputStream());
    NodeList nodes=doc.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < nodes.getLength(); i++) {
      Node node=nodes.item(i);
      if (node.getNodeType() == 1) {
        Element element=(Element)node;
        String key=getNodeValue(element,""String_Node_Str"");
        String etag=element.getElementsByTagName(""String_Node_Str"") != null ? getNodeValue(element,""String_Node_Str"") : ""String_Node_Str"";
        long size=Long.parseLong(getNodeValue(element,""String_Node_Str""));
        if (size > 0L) {
          File file=new File(baseDirectory,key);
          if (etag.length() > 1) {
            etag=scrubEtag(etag);
            if ((file.isFile()) && (file.length() == size)) {
              String localMD5=Downloadable.getMD5(file);
              if (localMD5.equals(etag))               continue;
            }
          }
          List<URL> urls=new ArrayList<URL>();
          urls.add(new URL(localUrl + key));
          urls.add(new URL(resourceUrl + key));
          Downloadable download=new Downloadable(key,key,etag,size,urls);
          assets.add(download);
        }
      }
    }
  }
 catch (  Exception e) {
  }
  return assets;
}",0.951165017555059
12330,"private static Module getModuleV2(Element el){
  String name=el.getAttribute(""String_Node_Str"");
  String id=el.getAttribute(""String_Node_Str"");
  String depends=el.getAttribute(""String_Node_Str"");
  String side=el.getAttribute(""String_Node_Str"");
  List<PrioritizedURL> urls=new ArrayList<PrioritizedURL>();
  NodeList nl=el.getElementsByTagName(""String_Node_Str"");
  for (int i=0; i < nl.getLength(); i++) {
    Element elURL=(Element)nl.item(i);
    String url=elURL.getTextContent();
    int priority=parseInt(elURL.getAttribute(""String_Node_Str""));
    urls.add(new PrioritizedURL(url,priority));
  }
  String path=getTextValue(el,""String_Node_Str"");
  Element elReq=(Element)el.getElementsByTagName(""String_Node_Str"").item(0);
  boolean required;
  boolean isDefault;
  if (elReq == null) {
    required=true;
    isDefault=true;
  }
 else {
    required=parseBooleanWithDefault(elReq.getTextContent(),true);
    isDefault=parseBooleanWithDefault(elReq.getAttribute(""String_Node_Str""),false);
  }
  Element elType=(Element)el.getElementsByTagName(""String_Node_Str"").item(0);
  boolean inRoot=parseBooleanWithDefault(elType.getAttribute(""String_Node_Str""),false);
  int order=parseInt(elType.getAttribute(""String_Node_Str""));
  boolean keepMeta=parseBooleanWithDefault(elType.getAttribute(""String_Node_Str""),false);
  String launchArgs=elType.getAttribute(""String_Node_Str"");
  String jreArgs=elType.getAttribute(""String_Node_Str"");
  ModType modType=ModType.valueOf(elType.getTextContent());
  boolean coremod=false;
  boolean jar=false;
  boolean library=false;
  boolean extract=false;
switch (modType) {
case Coremod:
    coremod=true;
  break;
case Extract:
extract=true;
break;
case Jar:
jar=true;
break;
case Library:
library=true;
break;
case Option:
throw new RuntimeException(""String_Node_Str"");
default :
break;
}
String md5=getTextValue(el,""String_Node_Str"");
List<ConfigFile> configs=new ArrayList<ConfigFile>();
List<Module> submodules=new ArrayList<Module>();
nl=el.getElementsByTagName(""String_Node_Str"");
for (int i=0; i < nl.getLength(); i++) {
Element elConfig=(Element)nl.item(i);
ConfigFile cf=getConfigFileV1(elConfig);
configs.add(cf);
}
nl=el.getElementsByTagName(""String_Node_Str"");
for (int i=0; i < nl.getLength(); i++) {
Element elSubmod=(Element)nl.item(i);
Module sm=getModuleV2(elSubmod);
submodules.add(sm);
}
HashMap<String,String> mapMeta=new HashMap<String,String>();
NodeList nlMeta=el.getElementsByTagName(""String_Node_Str"");
if (nlMeta.getLength() > 0) {
Element elMeta=(Element)nlMeta.item(0);
NodeList nlMetaChildren=elMeta.getElementsByTagName(""String_Node_Str"");
for (int i=0; i < nlMetaChildren.getLength(); i++) {
Node child=nlMetaChildren.item(i);
mapMeta.put(child.getNodeName(),getTextValue(elMeta,child.getNodeName()));
}
}
Module m=new Module(name,id,urls,depends,required,jar,order,keepMeta,extract,inRoot,isDefault,coremod,md5,configs,side,path,mapMeta,library,launchArgs,jreArgs,submodules);
return m;
}","private static Module getModuleV2(Element el){
  XPath xpath=XPathFactory.newInstance().newXPath();
  try {
    String name=el.getAttribute(""String_Node_Str"");
    String id=el.getAttribute(""String_Node_Str"");
    String depends=el.getAttribute(""String_Node_Str"");
    String side=el.getAttribute(""String_Node_Str"");
    List<PrioritizedURL> urls=new ArrayList<PrioritizedURL>();
    NodeList nl;
    nl=(NodeList)xpath.evaluate(""String_Node_Str"",el,XPathConstants.NODESET);
    for (int i=0; i < nl.getLength(); i++) {
      Element elURL=(Element)nl.item(i);
      String url=elURL.getTextContent();
      int priority=parseInt(elURL.getAttribute(""String_Node_Str""));
      urls.add(new PrioritizedURL(url,priority));
    }
    String path=(String)xpath.evaluate(""String_Node_Str"",el,XPathConstants.STRING);
    Element elReq=(Element)el.getElementsByTagName(""String_Node_Str"").item(0);
    boolean required;
    boolean isDefault;
    if (elReq == null) {
      required=true;
      isDefault=true;
    }
 else {
      required=parseBooleanWithDefault(elReq.getTextContent(),true);
      isDefault=parseBooleanWithDefault(elReq.getAttribute(""String_Node_Str""),false);
    }
    Element elType=(Element)el.getElementsByTagName(""String_Node_Str"").item(0);
    boolean inRoot=parseBooleanWithDefault(elType.getAttribute(""String_Node_Str""),false);
    int order=parseInt(elType.getAttribute(""String_Node_Str""));
    boolean keepMeta=parseBooleanWithDefault(elType.getAttribute(""String_Node_Str""),false);
    String launchArgs=elType.getAttribute(""String_Node_Str"");
    String jreArgs=elType.getAttribute(""String_Node_Str"");
    ModType modType=ModType.valueOf(elType.getTextContent());
    boolean coremod=false;
    boolean jar=false;
    boolean library=false;
    boolean extract=false;
switch (modType) {
case Coremod:
      coremod=true;
    break;
case Extract:
  extract=true;
break;
case Jar:
jar=true;
break;
case Library:
library=true;
break;
case Option:
throw new RuntimeException(""String_Node_Str"");
default :
break;
}
String md5=(String)xpath.evaluate(""String_Node_Str"",el,XPathConstants.STRING);
List<ConfigFile> configs=new ArrayList<ConfigFile>();
List<Module> submodules=new ArrayList<Module>();
nl=el.getElementsByTagName(""String_Node_Str"");
for (int i=0; i < nl.getLength(); i++) {
Element elConfig=(Element)nl.item(i);
ConfigFile cf=getConfigFileV1(elConfig);
configs.add(cf);
}
nl=el.getElementsByTagName(""String_Node_Str"");
for (int i=0; i < nl.getLength(); i++) {
Element elSubmod=(Element)nl.item(i);
Module sm=getModuleV2(elSubmod);
submodules.add(sm);
}
HashMap<String,String> mapMeta=new HashMap<String,String>();
NodeList nlMeta=el.getElementsByTagName(""String_Node_Str"");
if (nlMeta.getLength() > 0) {
Element elMeta=(Element)nlMeta.item(0);
NodeList nlMetaChildren=elMeta.getElementsByTagName(""String_Node_Str"");
for (int i=0; i < nlMetaChildren.getLength(); i++) {
Node child=nlMetaChildren.item(i);
mapMeta.put(child.getNodeName(),getTextValue(elMeta,child.getNodeName()));
}
}
Module m=new Module(name,id,urls,depends,required,jar,order,keepMeta,extract,inRoot,isDefault,coremod,md5,configs,side,path,mapMeta,library,launchArgs,jreArgs,submodules);
return m;
}
 catch (XPathExpressionException e) {
e.printStackTrace();
return null;
}
}",0.1765650080256821
12331,"public void setIcon(Image image){
  this.lblIcon.setImage(image);
  layout(true);
}","public void setIcon(Image image){
  image=new Image(image.getDevice(),image.getImageData().scaledTo(32,32));
  this.lblIcon.setImage(image);
  layout(true);
}",0.6887966804979253
12332,"public static void doLaunch(ServerList selected,List<ModuleCheckbox> list,Profile user) throws Exception {
  String playerName;
  String sessionKey;
{
    playerName=user.getName();
    sessionKey=user.getSessionKey();
  }
  MinecraftVersion mcVersion=MinecraftVersion.loadVersion(selected.getVersion());
  String mainClass;
  List<String> args=new ArrayList<String>();
  StringBuilder clArgs=new StringBuilder(mcVersion.getMinecraftArguments());
  List<String> libs=new ArrayList<String>();
  MCUpdater mcu=MCUpdater.getInstance();
  Settings settings=SettingsManager.getInstance().getSettings();
  if (settings.isFullScreen()) {
    clArgs.append(""String_Node_Str"");
  }
 else {
    clArgs.append(""String_Node_Str"" + settings.getResWidth() + ""String_Node_Str""+ settings.getResHeight());
  }
  if (settings.isAutoConnect() && selected.isAutoConnect()) {
    URI address;
    try {
      address=new URI(""String_Node_Str"" + selected.getAddress());
      clArgs.append(""String_Node_Str"" + address.getHost());
      if (address.getPort() != -1) {
        clArgs.append(""String_Node_Str"" + address.getPort());
      }
    }
 catch (    URISyntaxException e) {
      e.printStackTrace();
    }
  }
  clArgs.append(""String_Node_Str"" + handleWhitespace(mcu.getInstanceRoot().resolve(selected.getServerId()).resolve(""String_Node_Str"").toString()));
  args.add((new Path(settings.getJrePath()).resolve(""String_Node_Str"").resolve(""String_Node_Str"").toString()));
  args.add(""String_Node_Str"" + settings.getMinMemory());
  args.add(""String_Node_Str"" + settings.getMaxMemory());
  args.add(""String_Node_Str"" + settings.getPermGen());
  args.addAll(Arrays.asList(settings.getJvmOpts().split(""String_Node_Str"")));
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    args.add(""String_Node_Str"" + mcu.getArchiveFolder().resolve(""String_Node_Str"").resolve(""String_Node_Str"").resolve(""String_Node_Str"").toString());
    args.add(""String_Node_Str"");
  }
  args.add(""String_Node_Str"" + mcu.getInstanceRoot().resolve(selected.getServerId()).resolve(""String_Node_Str"").resolve(""String_Node_Str"").toString());
  if (!Version.requestedFeatureLevel(selected.getVersion(),""String_Node_Str"")) {
    args.add(""String_Node_Str"" + mcu.getInstanceRoot().resolve(selected.getServerId()).toString());
  }
  if (!selected.getMainClass().isEmpty()) {
    mainClass=selected.getMainClass();
  }
 else {
    mainClass=mcVersion.getMainClass();
  }
  for (  ModuleCheckbox entry : list) {
    if (entry.isSelected()) {
      if (entry.getModule().getIsLibrary()) {
        libs.add(entry.getModule().getId() + ""String_Node_Str"");
      }
      if (!entry.getModule().getLaunchArgs().isEmpty()) {
        clArgs.append(""String_Node_Str"" + entry.getModule().getLaunchArgs());
      }
      if (!entry.getModule().getJreArgs().isEmpty()) {
        args.addAll(Arrays.asList(entry.getModule().getJreArgs().split(""String_Node_Str"")));
      }
      if (entry.getModule().hasSubmodules()) {
        for (        Module sm : entry.getModule().getSubmodules()) {
          if (sm.getIsLibrary()) {
            libs.add(sm.getId() + ""String_Node_Str"");
          }
          if (!sm.getLaunchArgs().isEmpty()) {
            clArgs.append(""String_Node_Str"" + sm.getLaunchArgs());
          }
          if (!sm.getJreArgs().isEmpty()) {
            args.addAll(Arrays.asList(sm.getJreArgs().split(""String_Node_Str"")));
          }
        }
      }
    }
  }
  for (  Library lib : mcVersion.getLibraries()) {
    if (lib.validForOS() && !lib.hasNatives()) {
      libs.add(lib.getFilename());
    }
  }
  args.add(""String_Node_Str"");
  StringBuilder classpath=new StringBuilder();
  for (  String entry : libs) {
    classpath.append(mcu.getInstanceRoot().resolve(selected.getServerId()).resolve(""String_Node_Str"").resolve(entry).toString()).append(MCUpdater.cpDelimiter());
  }
  classpath.append(mcu.getInstanceRoot().resolve(selected.getServerId()).resolve(""String_Node_Str"").resolve(""String_Node_Str"").toString());
  args.add(classpath.toString());
  args.add(mainClass);
  String tmpclArgs=clArgs.toString();
  System.out.println(tmpclArgs);
  Map<String,String> fields=new HashMap<String,String>();
  StrSubstitutor fieldReplacer=new StrSubstitutor(fields);
  fields.put(""String_Node_Str"",playerName);
  fields.put(""String_Node_Str"",sessionKey);
  fields.put(""String_Node_Str"",selected.getVersion());
  fields.put(""String_Node_Str"",mcu.getInstanceRoot().resolve(selected.getServerId()).toString());
  fields.put(""String_Node_Str"",mcu.getArchiveFolder().resolve(""String_Node_Str"").toString());
  String[] fieldArr=tmpclArgs.split(""String_Node_Str"");
  for (int i=0; i < fieldArr.length; i++) {
    fieldArr[i]=fieldReplacer.replace(fieldArr[i]);
  }
  args.addAll(Arrays.asList(fieldArr));
  for (  String entry : args) {
    System.out.println(entry);
  }
  final ProcessBuilder pb=new ProcessBuilder(args);
  pb.directory(mcu.getInstanceRoot().resolve(selected.getServerId()).toFile());
  pb.redirectErrorStream(true);
  Thread gameThread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        Process task=pb.start();
        BufferedReader buffRead=new BufferedReader(new InputStreamReader(task.getInputStream()));
        String line;
        while ((line=buffRead.readLine()) != null) {
          if (line.length() > 0) {
            MainShell.getInstance().consoleWrite(line);
          }
        }
      }
 catch (      Exception e) {
        MainShell.getInstance().consoleWrite(e.getMessage());
      }
 finally {
        MainShell.getInstance().setPlaying(false);
      }
    }
  }
);
  gameThread.start();
  MainShell.getInstance().setPlaying(true);
}","public static void doLaunch(ServerList selected,List<ModuleCheckbox> list,Profile user) throws Exception {
  String playerName;
  String sessionKey;
{
    playerName=user.getName();
    sessionKey=user.getSessionKey();
  }
  MinecraftVersion mcVersion=MinecraftVersion.loadVersion(selected.getVersion());
  String mainClass;
  List<String> args=new ArrayList<String>();
  StringBuilder clArgs=new StringBuilder(mcVersion.getMinecraftArguments());
  List<String> libs=new ArrayList<String>();
  MCUpdater mcu=MCUpdater.getInstance();
  Settings settings=SettingsManager.getInstance().getSettings();
  if (settings.isFullScreen()) {
    clArgs.append(""String_Node_Str"");
  }
 else {
    clArgs.append(""String_Node_Str"" + settings.getResWidth() + ""String_Node_Str""+ settings.getResHeight());
  }
  if (settings.isAutoConnect() && selected.isAutoConnect()) {
    URI address;
    try {
      address=new URI(""String_Node_Str"" + selected.getAddress());
      clArgs.append(""String_Node_Str"" + address.getHost());
      if (address.getPort() != -1) {
        clArgs.append(""String_Node_Str"" + address.getPort());
      }
    }
 catch (    URISyntaxException e) {
      e.printStackTrace();
    }
  }
  clArgs.append(""String_Node_Str"");
  args.add((new Path(settings.getJrePath()).resolve(""String_Node_Str"").resolve(""String_Node_Str"").toString()));
  args.add(""String_Node_Str"" + settings.getMinMemory());
  args.add(""String_Node_Str"" + settings.getMaxMemory());
  args.add(""String_Node_Str"" + settings.getPermGen());
  args.addAll(Arrays.asList(settings.getJvmOpts().split(""String_Node_Str"")));
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    args.add(""String_Node_Str"" + mcu.getArchiveFolder().resolve(""String_Node_Str"").resolve(""String_Node_Str"").resolve(""String_Node_Str"").toString());
    args.add(""String_Node_Str"");
  }
  args.add(""String_Node_Str"" + mcu.getInstanceRoot().resolve(selected.getServerId()).resolve(""String_Node_Str"").resolve(""String_Node_Str"").toString());
  if (!Version.requestedFeatureLevel(selected.getVersion(),""String_Node_Str"")) {
    args.add(""String_Node_Str"" + mcu.getInstanceRoot().resolve(selected.getServerId()).toString());
  }
  if (!selected.getMainClass().isEmpty()) {
    mainClass=selected.getMainClass();
  }
 else {
    mainClass=mcVersion.getMainClass();
  }
  for (  ModuleCheckbox entry : list) {
    if (entry.isSelected()) {
      if (entry.getModule().getIsLibrary()) {
        libs.add(entry.getModule().getId() + ""String_Node_Str"");
      }
      if (!entry.getModule().getLaunchArgs().isEmpty()) {
        clArgs.append(""String_Node_Str"" + entry.getModule().getLaunchArgs());
      }
      if (!entry.getModule().getJreArgs().isEmpty()) {
        args.addAll(Arrays.asList(entry.getModule().getJreArgs().split(""String_Node_Str"")));
      }
      if (entry.getModule().hasSubmodules()) {
        for (        Module sm : entry.getModule().getSubmodules()) {
          if (sm.getIsLibrary()) {
            libs.add(sm.getId() + ""String_Node_Str"");
          }
          if (!sm.getLaunchArgs().isEmpty()) {
            clArgs.append(""String_Node_Str"" + sm.getLaunchArgs());
          }
          if (!sm.getJreArgs().isEmpty()) {
            args.addAll(Arrays.asList(sm.getJreArgs().split(""String_Node_Str"")));
          }
        }
      }
    }
  }
  for (  Library lib : mcVersion.getLibraries()) {
    if (lib.validForOS() && !lib.hasNatives()) {
      libs.add(lib.getFilename());
    }
  }
  args.add(""String_Node_Str"");
  StringBuilder classpath=new StringBuilder();
  for (  String entry : libs) {
    classpath.append(mcu.getInstanceRoot().resolve(selected.getServerId()).resolve(""String_Node_Str"").resolve(entry).toString()).append(MCUpdater.cpDelimiter());
  }
  classpath.append(mcu.getInstanceRoot().resolve(selected.getServerId()).resolve(""String_Node_Str"").resolve(""String_Node_Str"").toString());
  args.add(classpath.toString());
  args.add(mainClass);
  String tmpclArgs=clArgs.toString();
  System.out.println(tmpclArgs);
  Map<String,String> fields=new HashMap<String,String>();
  StrSubstitutor fieldReplacer=new StrSubstitutor(fields);
  fields.put(""String_Node_Str"",playerName);
  fields.put(""String_Node_Str"",sessionKey);
  fields.put(""String_Node_Str"",selected.getVersion());
  fields.put(""String_Node_Str"",mcu.getInstanceRoot().resolve(selected.getServerId()).toString());
  fields.put(""String_Node_Str"",mcu.getArchiveFolder().resolve(""String_Node_Str"").toString());
  fields.put(""String_Node_Str"",mcu.getInstanceRoot().resolve(selected.getServerId()).resolve(""String_Node_Str"").toString());
  String[] fieldArr=tmpclArgs.split(""String_Node_Str"");
  for (int i=0; i < fieldArr.length; i++) {
    fieldArr[i]=fieldReplacer.replace(fieldArr[i]);
  }
  args.addAll(Arrays.asList(fieldArr));
  for (  String entry : args) {
    System.out.println(entry);
  }
  final ProcessBuilder pb=new ProcessBuilder(args);
  pb.directory(mcu.getInstanceRoot().resolve(selected.getServerId()).toFile());
  pb.redirectErrorStream(true);
  Thread gameThread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        Process task=pb.start();
        BufferedReader buffRead=new BufferedReader(new InputStreamReader(task.getInputStream()));
        String line;
        while ((line=buffRead.readLine()) != null) {
          if (line.length() > 0) {
            MainShell.getInstance().consoleWrite(line);
          }
        }
      }
 catch (      Exception e) {
        MainShell.getInstance().consoleWrite(e.getMessage());
      }
 finally {
        MainShell.getInstance().setPlaying(false);
      }
    }
  }
);
  gameThread.start();
  MainShell.getInstance().setPlaying(true);
}",0.979142831998592
12333,"private static List<Module> parseDocument(Document dom,String serverId){
  int version;
  List<Module> modList=new ArrayList<Module>();
  Element parent=dom.getDocumentElement();
  Element docEle=null;
  if (parent.getNodeName().equals(""String_Node_Str"")) {
    if (Version.requestedFeatureLevel(parent.getAttribute(""String_Node_Str""),""String_Node_Str"")) {
      version=2;
    }
 else {
      version=1;
    }
    NodeList servers=parent.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < servers.getLength(); i++) {
      docEle=(Element)servers.item(i);
      if (docEle.getAttribute(""String_Node_Str"").equals(serverId)) {
        break;
      }
    }
  }
 else {
    docEle=parent;
    version=1;
  }
  System.out.println(serverId + ""String_Node_Str"" + version);
  NodeList nl;
switch (version) {
case 2:
    nl=docEle.getElementsByTagName(""String_Node_Str"");
  if (nl != null && nl.getLength() > 0) {
    for (int i=0; i < nl.getLength(); i++) {
      Element el=(Element)nl.item(i);
      modList.addAll(doImportV2(el,dom));
    }
  }
nl=docEle.getElementsByTagName(""String_Node_Str"");
if (nl != null && nl.getLength() > 0) {
for (int i=0; i < nl.getLength(); i++) {
  Element el=(Element)nl.item(i);
  Module m=getModuleV2(el);
  modList.add(m);
}
}
return modList;
case 1:
nl=docEle.getElementsByTagName(""String_Node_Str"");
if (nl != null && nl.getLength() > 0) {
for (int i=0; i < nl.getLength(); i++) {
Element el=(Element)nl.item(i);
Module m=getModuleV1(el);
modList.add(m);
}
}
return modList;
default :
return null;
}
}","private static List<Module> parseDocument(Document dom,String serverId){
  int version;
  List<Module> modList=new ArrayList<Module>();
  Element parent=dom.getDocumentElement();
  Element docEle=null;
  if (parent.getNodeName().equals(""String_Node_Str"")) {
    if (Version.requestedFeatureLevel(parent.getAttribute(""String_Node_Str""),""String_Node_Str"")) {
      version=2;
    }
 else {
      version=1;
    }
    NodeList servers=parent.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < servers.getLength(); i++) {
      docEle=(Element)servers.item(i);
      if (docEle.getAttribute(""String_Node_Str"").equals(serverId)) {
        break;
      }
    }
  }
 else {
    docEle=parent;
    version=1;
  }
  MCUpdater.apiLogger.log(Level.FINE,serverId + ""String_Node_Str"" + version);
  NodeList nl;
switch (version) {
case 2:
    nl=docEle.getElementsByTagName(""String_Node_Str"");
  if (nl != null && nl.getLength() > 0) {
    for (int i=0; i < nl.getLength(); i++) {
      Element el=(Element)nl.item(i);
      modList.addAll(doImportV2(el,dom));
    }
  }
nl=docEle.getElementsByTagName(""String_Node_Str"");
if (nl != null && nl.getLength() > 0) {
for (int i=0; i < nl.getLength(); i++) {
  Element el=(Element)nl.item(i);
  Module m=getModuleV2(el);
  modList.add(m);
}
}
return modList;
case 1:
nl=docEle.getElementsByTagName(""String_Node_Str"");
if (nl != null && nl.getLength() > 0) {
for (int i=0; i < nl.getLength(); i++) {
Element el=(Element)nl.item(i);
Module m=getModuleV1(el);
modList.add(m);
}
}
return modList;
default :
return null;
}
}",0.9832582099162912
12334,"public static Document readXmlFromUrl(String serverUrl) throws Exception {
  MCUpdater.apiLogger.fine(""String_Node_Str"" + serverUrl + ""String_Node_Str"");
  if (serverUrl.equals(""String_Node_Str"")) {
    return null;
  }
  final URL server;
  try {
    server=new URL(serverUrl);
  }
 catch (  MalformedURLException e) {
    MCUpdater.apiLogger.log(Level.WARNING,""String_Node_Str"",e);
    return null;
  }
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  URLConnection serverConn=server.openConnection();
  serverConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + Version.VERSION);
  serverConn.setConnectTimeout(MCUpdater.getInstance().getTimeout());
  serverConn.setReadTimeout(MCUpdater.getInstance().getTimeout());
  try {
    DocumentBuilder db=dbf.newDocumentBuilder();
    return db.parse(serverConn.getInputStream());
  }
 catch (  ParserConfigurationException pce) {
    MCUpdater.apiLogger.log(Level.SEVERE,""String_Node_Str"",pce);
  }
catch (  SAXException se) {
    MCUpdater.apiLogger.log(Level.SEVERE,""String_Node_Str"",se);
  }
catch (  IOException ioe) {
    MCUpdater.apiLogger.log(Level.SEVERE,""String_Node_Str"",ioe);
  }
  return null;
}","public static Document readXmlFromUrl(String serverUrl) throws Exception {
  MCUpdater.apiLogger.fine(""String_Node_Str"" + serverUrl + ""String_Node_Str"");
  if (serverUrl.equals(""String_Node_Str"") || serverUrl.isEmpty()) {
    return null;
  }
  final URL server;
  try {
    server=new URL(serverUrl);
  }
 catch (  MalformedURLException e) {
    MCUpdater.apiLogger.log(Level.WARNING,""String_Node_Str"",e);
    return null;
  }
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  URLConnection serverConn=server.openConnection();
  serverConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + Version.VERSION);
  serverConn.setConnectTimeout(MCUpdater.getInstance().getTimeout());
  serverConn.setReadTimeout(MCUpdater.getInstance().getTimeout());
  try {
    DocumentBuilder db=dbf.newDocumentBuilder();
    return db.parse(serverConn.getInputStream());
  }
 catch (  ParserConfigurationException pce) {
    MCUpdater.apiLogger.log(Level.SEVERE,""String_Node_Str"",pce);
  }
catch (  SAXException se) {
    MCUpdater.apiLogger.log(Level.SEVERE,""String_Node_Str"",se);
  }
catch (  IOException ioe) {
    MCUpdater.apiLogger.log(Level.SEVERE,""String_Node_Str"",ioe);
  }
  return null;
}",0.9903805938937684
12335,"public void changeSelection(String serverId){
  if (!selected.isEmpty()) {
    for (    Control c : listBase.getChildren()) {
      if (c instanceof InstanceCell) {
        InstanceCell cell=(InstanceCell)c;
        if (cell.getServerId() == selected) {
          cell.setSelected(false);
        }
      }
    }
  }
  selected=serverId;
  for (  Control c : listBase.getChildren()) {
    if (c instanceof InstanceCell) {
      InstanceCell cell=(InstanceCell)c;
      if (cell.getServerId() == selected) {
        cell.setSelected(true);
      }
    }
  }
  for (  ServerList entry : this.instances) {
    if (entry.getServerId().equals(selected)) {
      MainShell.getInstance().changeSelectedInstance(entry);
    }
  }
}","public void changeSelection(String serverId){
  selected=serverId;
  for (  Control c : listBase.getChildren()) {
    if (c instanceof InstanceCell) {
      InstanceCell cell=(InstanceCell)c;
      if (cell.getServerId().equals(selected)) {
        cell.setSelected(true);
      }
 else {
        cell.setSelected(false);
      }
    }
  }
  for (  ServerList entry : this.instances) {
    if (entry.getServerId().equals(selected)) {
      MainShell.getInstance().changeSelectedInstance(entry);
    }
  }
}",0.4540276647681041
12336,"public static List<ServerList> loadServerList(String defaultUrl){
{
    Settings settings=MainShell.getInstance().getSettingsManager().getSettings();
    List<ServerList> slList=new ArrayList<ServerList>();
    Set<String> urls=new HashSet<String>();
    urls.add(defaultUrl);
    urls.addAll(settings.getPackURLs());
    Iterator<String> it=urls.iterator();
    while (it.hasNext()) {
      String serverUrl=it.next();
      try {
        Element docEle=null;
        Document serverHeader=ServerPackParser.readXmlFromUrl(serverUrl);
        if (!(serverHeader == null)) {
          Element parent=serverHeader.getDocumentElement();
          if (parent.getNodeName().equals(""String_Node_Str"")) {
            String mcuVersion=parent.getAttribute(""String_Node_Str"");
            NodeList servers=parent.getElementsByTagName(""String_Node_Str"");
            for (int i=0; i < servers.getLength(); i++) {
              docEle=(Element)servers.item(i);
              System.out.println(serverUrl + ""String_Node_Str"" + docEle.getAttribute(""String_Node_Str""));
              ServerList sl=new ServerList(docEle.getAttribute(""String_Node_Str""),docEle.getAttribute(""String_Node_Str""),serverUrl,docEle.getAttribute(""String_Node_Str""),docEle.getAttribute(""String_Node_Str""),docEle.getAttribute(""String_Node_Str""),docEle.getAttribute(""String_Node_Str""),ServerPackParser.parseBoolean(docEle.getAttribute(""String_Node_Str""),true),ServerPackParser.parseBoolean(docEle.getAttribute(""String_Node_Str""),true),docEle.getAttribute(""String_Node_Str""),ServerPackParser.parseBoolean(docEle.getAttribute(""String_Node_Str""),false),docEle.getAttribute(""String_Node_Str""));
              sl.setMCUVersion(mcuVersion);
              slList.add(sl);
            }
          }
 else {
            System.out.println(serverUrl + ""String_Node_Str"" + parent.getAttribute(""String_Node_Str""));
            ServerList sl=new ServerList(parent.getAttribute(""String_Node_Str""),parent.getAttribute(""String_Node_Str""),serverUrl,parent.getAttribute(""String_Node_Str""),parent.getAttribute(""String_Node_Str""),parent.getAttribute(""String_Node_Str""),parent.getAttribute(""String_Node_Str""),ServerPackParser.parseBoolean(parent.getAttribute(""String_Node_Str""),true),ServerPackParser.parseBoolean(parent.getAttribute(""String_Node_Str""),true),parent.getAttribute(""String_Node_Str""),ServerPackParser.parseBoolean(parent.getAttribute(""String_Node_Str""),false),parent.getAttribute(""String_Node_Str""));
            sl.setMCUVersion(""String_Node_Str"");
            slList.add(sl);
          }
        }
 else {
          System.out.println(""String_Node_Str"" + serverUrl);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    return slList;
  }
}","public static List<ServerList> loadServerList(String defaultUrl){
{
    Settings settings=SettingsManager.getInstance().getSettings();
    List<ServerList> slList=new ArrayList<ServerList>();
    Set<String> urls=new HashSet<String>();
    urls.add(defaultUrl);
    urls.addAll(settings.getPackURLs());
    Iterator<String> it=urls.iterator();
    while (it.hasNext()) {
      String serverUrl=it.next();
      try {
        Element docEle=null;
        Document serverHeader=ServerPackParser.readXmlFromUrl(serverUrl);
        if (!(serverHeader == null)) {
          Element parent=serverHeader.getDocumentElement();
          if (parent.getNodeName().equals(""String_Node_Str"")) {
            String mcuVersion=parent.getAttribute(""String_Node_Str"");
            NodeList servers=parent.getElementsByTagName(""String_Node_Str"");
            for (int i=0; i < servers.getLength(); i++) {
              docEle=(Element)servers.item(i);
              ServerList sl=new ServerList(docEle.getAttribute(""String_Node_Str""),docEle.getAttribute(""String_Node_Str""),serverUrl,docEle.getAttribute(""String_Node_Str""),docEle.getAttribute(""String_Node_Str""),docEle.getAttribute(""String_Node_Str""),docEle.getAttribute(""String_Node_Str""),ServerPackParser.parseBoolean(docEle.getAttribute(""String_Node_Str""),true),ServerPackParser.parseBoolean(docEle.getAttribute(""String_Node_Str""),true),docEle.getAttribute(""String_Node_Str""),ServerPackParser.parseBoolean(docEle.getAttribute(""String_Node_Str""),false),docEle.getAttribute(""String_Node_Str""));
              sl.setMCUVersion(mcuVersion);
              slList.add(sl);
            }
          }
 else {
            ServerList sl=new ServerList(parent.getAttribute(""String_Node_Str""),parent.getAttribute(""String_Node_Str""),serverUrl,parent.getAttribute(""String_Node_Str""),parent.getAttribute(""String_Node_Str""),parent.getAttribute(""String_Node_Str""),parent.getAttribute(""String_Node_Str""),ServerPackParser.parseBoolean(parent.getAttribute(""String_Node_Str""),true),ServerPackParser.parseBoolean(parent.getAttribute(""String_Node_Str""),true),parent.getAttribute(""String_Node_Str""),ServerPackParser.parseBoolean(parent.getAttribute(""String_Node_Str""),false),parent.getAttribute(""String_Node_Str""));
            sl.setMCUVersion(""String_Node_Str"");
            slList.add(sl);
          }
        }
 else {
          System.out.println(""String_Node_Str"" + serverUrl);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    return slList;
  }
}",0.9521266450505436
12337,"public static void doLaunch(ServerList selected,List<ModuleCheckbox> list,Profile user) throws Exception {
  MinecraftVersion mcVersion=MinecraftVersion.loadVersion(selected.getVersion());
  String mainClass;
  List<String> args=new ArrayList<String>();
  StringBuilder clArgs=new StringBuilder(mcVersion.getMinecraftArguments());
  List<String> libs=new ArrayList<String>();
  MCUpdater mcu=MCUpdater.getInstance();
  Settings settings=MainShell.getInstance().getSettingsManager().getSettings();
  if (settings.isFullScreen()) {
    clArgs.append(""String_Node_Str"");
  }
 else {
    clArgs.append(""String_Node_Str"" + settings.getResWidth() + ""String_Node_Str""+ settings.getResHeight());
  }
  if (settings.isAutoConnect() && selected.isAutoConnect()) {
    URI address;
    try {
      address=new URI(""String_Node_Str"" + selected.getAddress());
      clArgs.append(""String_Node_Str"" + address.getHost());
      if (address.getPort() != -1) {
        clArgs.append(""String_Node_Str"" + address.getPort());
      }
    }
 catch (    URISyntaxException e) {
      e.printStackTrace();
    }
  }
  clArgs.append(""String_Node_Str"" + mcu.getInstanceRoot().resolve(selected.getServerId()).resolve(""String_Node_Str""));
  args.add((new Path(settings.getJrePath()).resolve(""String_Node_Str"").resolve(""String_Node_Str"").toString()));
  args.add(""String_Node_Str"" + settings.getMinMemory());
  args.add(""String_Node_Str"" + settings.getMaxMemory());
  args.add(""String_Node_Str"" + settings.getPermGen());
  args.add(""String_Node_Str"" + mcu.getInstanceRoot().resolve(selected.getServerId()).resolve(""String_Node_Str"").resolve(""String_Node_Str""));
  if (!Version.requestedFeatureLevel(selected.getVersion(),""String_Node_Str"")) {
    args.add(""String_Node_Str"" + mcu.getInstanceRoot().resolve(selected.getServerId()).toString());
  }
  if (!selected.getMainClass().isEmpty()) {
    mainClass=selected.getMainClass();
  }
 else {
    mainClass=mcVersion.getMainClass();
  }
  for (  ModuleCheckbox entry : list) {
    if (entry.isSelected()) {
      if (entry.getModule().getIsLibrary()) {
        libs.add(entry.getModule().getId() + ""String_Node_Str"");
      }
      if (!entry.getModule().getLaunchArgs().isEmpty()) {
        clArgs.append(""String_Node_Str"" + entry.getModule().getLaunchArgs());
      }
    }
  }
  for (  Library lib : mcVersion.getLibraries()) {
    if (lib.validForOS() && !lib.hasNatives()) {
      libs.add(lib.getFilename());
    }
  }
  args.add(""String_Node_Str"");
  StringBuilder classpath=new StringBuilder();
  for (  String entry : libs) {
    classpath.append(mcu.getInstanceRoot().resolve(selected.getServerId()).resolve(""String_Node_Str"").resolve(entry).toString()).append(MCUpdater.cpDelimiter());
  }
  classpath.append(mcu.getInstanceRoot().resolve(selected.getServerId()).resolve(""String_Node_Str"").resolve(""String_Node_Str"").toString());
  args.add(classpath.toString());
  args.add(mainClass);
  String tmpclArgs=clArgs.toString();
  System.out.println(tmpclArgs);
  Map<String,String> fields=new HashMap<String,String>();
  StrSubstitutor fieldReplacer=new StrSubstitutor(fields);
  fields.put(""String_Node_Str"",user.getName());
  fields.put(""String_Node_Str"",user.getSessionKey());
  fields.put(""String_Node_Str"",selected.getVersion());
  fields.put(""String_Node_Str"",mcu.getInstanceRoot().resolve(selected.getServerId()).toString());
  fields.put(""String_Node_Str"",mcu.getArchiveFolder().resolve(""String_Node_Str"").toString());
  args.addAll(Arrays.asList(fieldReplacer.replace(tmpclArgs).split(""String_Node_Str"")));
  for (  String entry : args) {
    System.out.println(entry);
  }
  ProcessBuilder pb=new ProcessBuilder(args);
  pb.directory(mcu.getInstanceRoot().resolve(selected.getServerId()).toFile());
  pb.redirectErrorStream(true);
  try {
    Process task=pb.start();
    BufferedReader buffRead=new BufferedReader(new InputStreamReader(task.getInputStream()));
    String line;
    while ((line=buffRead.readLine()) != null) {
      if (line.length() > 0) {
        System.out.println(line);
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public static void doLaunch(ServerList selected,List<ModuleCheckbox> list,Profile user) throws Exception {
  MinecraftVersion mcVersion=MinecraftVersion.loadVersion(selected.getVersion());
  String mainClass;
  List<String> args=new ArrayList<String>();
  StringBuilder clArgs=new StringBuilder(mcVersion.getMinecraftArguments());
  List<String> libs=new ArrayList<String>();
  MCUpdater mcu=MCUpdater.getInstance();
  Settings settings=SettingsManager.getInstance().getSettings();
  if (settings.isFullScreen()) {
    clArgs.append(""String_Node_Str"");
  }
 else {
    clArgs.append(""String_Node_Str"" + settings.getResWidth() + ""String_Node_Str""+ settings.getResHeight());
  }
  if (settings.isAutoConnect() && selected.isAutoConnect()) {
    URI address;
    try {
      address=new URI(""String_Node_Str"" + selected.getAddress());
      clArgs.append(""String_Node_Str"" + address.getHost());
      if (address.getPort() != -1) {
        clArgs.append(""String_Node_Str"" + address.getPort());
      }
    }
 catch (    URISyntaxException e) {
      e.printStackTrace();
    }
  }
  clArgs.append(""String_Node_Str"" + mcu.getInstanceRoot().resolve(selected.getServerId()).resolve(""String_Node_Str""));
  args.add((new Path(settings.getJrePath()).resolve(""String_Node_Str"").resolve(""String_Node_Str"").toString()));
  args.add(""String_Node_Str"" + settings.getMinMemory());
  args.add(""String_Node_Str"" + settings.getMaxMemory());
  args.add(""String_Node_Str"" + settings.getPermGen());
  args.add(""String_Node_Str"" + mcu.getInstanceRoot().resolve(selected.getServerId()).resolve(""String_Node_Str"").resolve(""String_Node_Str""));
  if (!Version.requestedFeatureLevel(selected.getVersion(),""String_Node_Str"")) {
    args.add(""String_Node_Str"" + mcu.getInstanceRoot().resolve(selected.getServerId()).toString());
  }
  if (!selected.getMainClass().isEmpty()) {
    mainClass=selected.getMainClass();
  }
 else {
    mainClass=mcVersion.getMainClass();
  }
  for (  ModuleCheckbox entry : list) {
    if (entry.isSelected()) {
      if (entry.getModule().getIsLibrary()) {
        libs.add(entry.getModule().getId() + ""String_Node_Str"");
      }
      if (!entry.getModule().getLaunchArgs().isEmpty()) {
        clArgs.append(""String_Node_Str"" + entry.getModule().getLaunchArgs());
      }
    }
  }
  for (  Library lib : mcVersion.getLibraries()) {
    if (lib.validForOS() && !lib.hasNatives()) {
      libs.add(lib.getFilename());
    }
  }
  args.add(""String_Node_Str"");
  StringBuilder classpath=new StringBuilder();
  for (  String entry : libs) {
    classpath.append(mcu.getInstanceRoot().resolve(selected.getServerId()).resolve(""String_Node_Str"").resolve(entry).toString()).append(MCUpdater.cpDelimiter());
  }
  classpath.append(mcu.getInstanceRoot().resolve(selected.getServerId()).resolve(""String_Node_Str"").resolve(""String_Node_Str"").toString());
  args.add(classpath.toString());
  args.add(mainClass);
  String tmpclArgs=clArgs.toString();
  System.out.println(tmpclArgs);
  Map<String,String> fields=new HashMap<String,String>();
  StrSubstitutor fieldReplacer=new StrSubstitutor(fields);
  fields.put(""String_Node_Str"",user.getName());
  fields.put(""String_Node_Str"",user.getSessionKey());
  fields.put(""String_Node_Str"",selected.getVersion());
  fields.put(""String_Node_Str"",mcu.getInstanceRoot().resolve(selected.getServerId()).toString());
  fields.put(""String_Node_Str"",mcu.getArchiveFolder().resolve(""String_Node_Str"").toString());
  args.addAll(Arrays.asList(fieldReplacer.replace(tmpclArgs).split(""String_Node_Str"")));
  for (  String entry : args) {
    System.out.println(entry);
  }
  ProcessBuilder pb=new ProcessBuilder(args);
  pb.directory(mcu.getInstanceRoot().resolve(selected.getServerId()).toFile());
  pb.redirectErrorStream(true);
  try {
    Process task=pb.start();
    BufferedReader buffRead=new BufferedReader(new InputStreamReader(task.getInputStream()));
    String line;
    while ((line=buffRead.readLine()) != null) {
      if (line.length() > 0) {
        System.out.println(line);
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9949993901695328
12338,"public MCULogin(Composite parent){
  super(parent,SWT.NONE);
  Settings settings=MainShell.getInstance().getSettingsManager().getSettings();
  translate=MainShell.getInstance().translate;
  this.setLayout(new GridLayout(2,false));
  Label profilePrompt=new Label(this,SWT.NONE);
  profilePrompt.setText(translate.profile);
  profileName=new Combo(this,SWT.READ_ONLY);
  refreshProfiles(settings);
}","public MCULogin(Composite parent){
  super(parent,SWT.NONE);
  Settings settings=SettingsManager.getInstance().getSettings();
  translate=MainShell.getInstance().translate;
  this.setLayout(new GridLayout(2,false));
  Label profilePrompt=new Label(this,SWT.NONE);
  profilePrompt.setText(translate.profile);
  profileName=new Combo(this,SWT.READ_ONLY);
  profileName.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!((Combo)e.getSource()).getText().isEmpty()) {
        MainShell.getInstance().setSelectedInstance(SettingsManager.getInstance().getSettings().findProfile(((Combo)e.getSource()).getText()).getLastInstance());
      }
    }
  }
);
  refreshProfiles(settings);
}",0.6537102473498233
12339,"@Override public void widgetSelected(SelectionEvent arg0){
  Profile launchProfile=login.getSelectedProfile();
  if (!(launchProfile == null)) {
    try {
      MCULogic.doLaunch(selected,modules.getModules(),launchProfile);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","@Override public void widgetSelected(SelectionEvent arg0){
  Profile launchProfile=login.getSelectedProfile();
  if (!(launchProfile == null)) {
    SettingsManager.getInstance().getSettings().setLastProfile(launchProfile.getName());
    SettingsManager.getInstance().getSettings().findProfile(launchProfile.getName()).setLastInstance(selected.getServerId());
    if (!SettingsManager.getInstance().isDirty()) {
      SettingsManager.getInstance().saveSettings();
    }
    try {
      MCULogic.doLaunch(selected,modules.getModules(),launchProfile);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.6455834242093784
12340,"/** 
 * Launch the application.
 * @param args
 */
public static void main(String[] args){
  try {
    INSTANCE=new MainShell();
    MCUpdater.getInstance().setInstanceRoot(MCUpdater.getInstance().getArchiveFolder().resolve(""String_Node_Str""));
    MCUpdater.getInstance().getInstanceRoot().toFile().mkdirs();
    MCUpdater.getInstance().setParent(INSTANCE);
    INSTANCE.open();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * Launch the application.
 * @param args
 */
public static void main(String[] args){
  try {
    INSTANCE=new MainShell();
    SettingsManager.getInstance();
    MCUpdater.getInstance().setParent(INSTANCE);
    INSTANCE.open();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.4672131147540984
12341,"/** 
 * Create contents of the window.
 */
protected void createContents(){
  shell=new Shell();
  shell.setSize(1175,592);
  shell.setText(""String_Node_Str"");
  shell.setLayout(new GridLayout(1,false));
  shell.addListener(SWT.RESIZE,new Listener(){
    @Override public void handleEvent(    Event arg0){
      shell.layout();
    }
  }
);
  final Composite mainArea=new Composite(shell,SWT.NONE);
  mainArea.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  mainArea.setLayout(new FormLayout());
{
    final int limit=20;
    final Sash sashLeft=new Sash(mainArea,SWT.VERTICAL);
    Group grpInstances=new Group(mainArea,SWT.NONE);
    grpInstances.setText(translate.instances);
    grpInstances.setLayout(new FillLayout());
    FormData grpInstancesData=new FormData();
{
      grpInstancesData.left=new FormAttachment(0,0);
      grpInstancesData.right=new FormAttachment(sashLeft,0);
      grpInstancesData.top=new FormAttachment(0,0);
      grpInstancesData.bottom=new FormAttachment(100,0);
    }
    grpInstances.setLayoutData(grpInstancesData);
{
      iList=new InstanceList(grpInstances);
      iList.setInstances(MCULogic.loadServerList(defaultUrl));
      grpInstances.pack();
    }
    final FormData sashLeftData=new FormData();
{
      sashLeftData.left=new FormAttachment(20,0);
      sashLeftData.top=new FormAttachment(0,0);
      sashLeftData.bottom=new FormAttachment(100,0);
    }
    sashLeft.setLayoutData(sashLeftData);
    sashLeft.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event e){
        Rectangle sashRect=sashLeft.getBounds();
        Rectangle viewRect=mainArea.getClientArea();
        int right=viewRect.width - sashRect.width - limit;
        e.x=Math.max(Math.min(e.x,right),limit);
        if (e.x != sashRect.x) {
          sashLeftData.left=new FormAttachment(0,e.x);
          mainArea.layout();
        }
      }
    }
);
    final TabFolder tabFolder=new TabFolder(mainArea,SWT.NONE);
    final FormData grpTabData=new FormData();
{
      grpTabData.left=new FormAttachment(sashLeft,0);
      grpTabData.right=new FormAttachment(100,0);
      grpTabData.top=new FormAttachment(0,0);
      grpTabData.bottom=new FormAttachment(100,0);
    }
    tabFolder.setLayoutData(grpTabData);
{
      TabItem tbtmNews=new TabItem(tabFolder,SWT.V_SCROLL);
{
        tbtmNews.setText(translate.news);
        browser=new MCUBrowser(tabFolder,SWT.NONE);
        tbtmNews.setControl(browser);
      }
      TabItem tbtmConsole=new TabItem(tabFolder,SWT.NONE);
{
        tbtmConsole.setText(translate.console);
        console=new MCUConsole(tabFolder);
        tbtmConsole.setControl(console);
      }
      TabItem tbtmSettings=new TabItem(tabFolder,SWT.NONE);
{
        tbtmSettings.setText(translate.settings);
        MCUSettings cmpSettings=new MCUSettings(tabFolder);
        tbtmSettings.setControl(cmpSettings);
      }
      TabItem tbtmModules=new TabItem(tabFolder,SWT.NONE);
{
        tbtmModules.setText(translate.modules);
        modules=new MCUModules(tabFolder);
        tbtmModules.setControl(modules);
      }
      TabItem tbtmProgress=new TabItem(tabFolder,SWT.NONE);
{
        tbtmProgress.setText(translate.progress);
        progress=new MCUProgress(tabFolder);
        tbtmProgress.setControl(progress);
      }
    }
  }
  Composite cmpStatus=new Composite(shell,SWT.NONE);
  cmpStatus.setLayoutData(new GridData(SWT.FILL,SWT.BOTTOM,true,false));
{
    cmpStatus.setLayout(new GridLayout(4,false));
    lblStatus=new Label(cmpStatus,SWT.NONE);
    lblStatus.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    lblStatus.setText(""String_Node_Str"");
    login=new MCULogin(cmpStatus);
    login.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1));
    Button btnUpdate=new Button(cmpStatus,SWT.PUSH);
    btnUpdate.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1));
    btnUpdate.setText(translate.update);
    btnUpdate.addSelectionListener(new SelectionListener(){
      @Override public void widgetSelected(      SelectionEvent arg0){
        MCUpdater.getInstance().getInstanceRoot().resolve(selected.getServerId()).toFile().mkdirs();
        final List<Module> selectedMods=new ArrayList<Module>();
        Iterator<ModuleCheckbox> it=modules.getModules().iterator();
        while (it.hasNext()) {
          ModuleCheckbox entry=it.next();
          System.out.println(""String_Node_Str"" + entry.getModule().getName());
          if (entry.isSelected()) {
            selectedMods.add(entry.getModule());
          }
        }
        final Properties instData=new Properties();
        final Path instanceFile=MCUpdater.getInstance().getInstanceRoot().resolve(selected.getServerId()).resolve(""String_Node_Str"");
        try {
          if (!instanceFile.toFile().exists()) {
            instanceFile.toFile().createNewFile();
          }
          instData.load(Files.newInputStream(instanceFile));
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
        try {
          MCUpdater.getInstance().installMods(selected,selectedMods,false,instData,ModSide.CLIENT);
        }
 catch (        FileNotFoundException e) {
          e.printStackTrace();
        }
      }
      @Override public void widgetDefaultSelected(      SelectionEvent arg0){
        widgetSelected(arg0);
      }
    }
);
    Button btnLaunch=new Button(cmpStatus,SWT.PUSH);
    btnLaunch.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1));
    btnLaunch.setText(translate.launchMinecraft);
    btnLaunch.addSelectionListener(new SelectionListener(){
      @Override public void widgetDefaultSelected(      SelectionEvent arg0){
        widgetSelected(arg0);
      }
      @Override public void widgetSelected(      SelectionEvent arg0){
        Profile launchProfile=login.getSelectedProfile();
        if (!(launchProfile == null)) {
          try {
            MCULogic.doLaunch(selected,modules.getModules(),launchProfile);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
);
  }
}","/** 
 * Create contents of the window.
 */
protected void createContents(){
  shell=new Shell();
  shell.setSize(1175,592);
  shell.setText(""String_Node_Str"");
  shell.setLayout(new GridLayout(1,false));
  shell.addListener(SWT.RESIZE,new Listener(){
    @Override public void handleEvent(    Event arg0){
      shell.layout();
    }
  }
);
  final Composite mainArea=new Composite(shell,SWT.NONE);
  mainArea.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  mainArea.setLayout(new FormLayout());
{
    final int limit=20;
    final Sash sashLeft=new Sash(mainArea,SWT.VERTICAL);
    Group grpInstances=new Group(mainArea,SWT.NONE);
    grpInstances.setText(translate.instances);
    grpInstances.setLayout(new FillLayout());
    FormData grpInstancesData=new FormData();
{
      grpInstancesData.left=new FormAttachment(0,0);
      grpInstancesData.right=new FormAttachment(sashLeft,0);
      grpInstancesData.top=new FormAttachment(0,0);
      grpInstancesData.bottom=new FormAttachment(100,0);
    }
    grpInstances.setLayoutData(grpInstancesData);
{
      iList=new InstanceList(grpInstances);
      grpInstances.pack();
    }
    final FormData sashLeftData=new FormData();
{
      sashLeftData.left=new FormAttachment(20,0);
      sashLeftData.top=new FormAttachment(0,0);
      sashLeftData.bottom=new FormAttachment(100,0);
    }
    sashLeft.setLayoutData(sashLeftData);
    sashLeft.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event e){
        Rectangle sashRect=sashLeft.getBounds();
        Rectangle viewRect=mainArea.getClientArea();
        int right=viewRect.width - sashRect.width - limit;
        e.x=Math.max(Math.min(e.x,right),limit);
        if (e.x != sashRect.x) {
          sashLeftData.left=new FormAttachment(0,e.x);
          mainArea.layout();
        }
      }
    }
);
    final TabFolder tabFolder=new TabFolder(mainArea,SWT.NONE);
    final FormData grpTabData=new FormData();
{
      grpTabData.left=new FormAttachment(sashLeft,0);
      grpTabData.right=new FormAttachment(100,0);
      grpTabData.top=new FormAttachment(0,0);
      grpTabData.bottom=new FormAttachment(100,0);
    }
    tabFolder.setLayoutData(grpTabData);
{
      TabItem tbtmNews=new TabItem(tabFolder,SWT.V_SCROLL);
{
        tbtmNews.setText(translate.news);
        browser=new MCUBrowser(tabFolder,SWT.NONE);
        tbtmNews.setControl(browser);
      }
      TabItem tbtmConsole=new TabItem(tabFolder,SWT.NONE);
{
        tbtmConsole.setText(translate.console);
        console=new MCUConsole(tabFolder);
        tbtmConsole.setControl(console);
      }
      TabItem tbtmSettings=new TabItem(tabFolder,SWT.NONE);
{
        tbtmSettings.setText(translate.settings);
        MCUSettings cmpSettings=new MCUSettings(tabFolder);
        tbtmSettings.setControl(cmpSettings);
      }
      TabItem tbtmModules=new TabItem(tabFolder,SWT.NONE);
{
        tbtmModules.setText(translate.modules);
        modules=new MCUModules(tabFolder);
        tbtmModules.setControl(modules);
      }
      TabItem tbtmProgress=new TabItem(tabFolder,SWT.NONE);
{
        tbtmProgress.setText(translate.progress);
        progress=new MCUProgress(tabFolder);
        tbtmProgress.setControl(progress);
      }
    }
  }
  Composite cmpStatus=new Composite(shell,SWT.NONE);
  cmpStatus.setLayoutData(new GridData(SWT.FILL,SWT.BOTTOM,true,false));
{
    cmpStatus.setLayout(new GridLayout(4,false));
    lblStatus=new Label(cmpStatus,SWT.NONE);
    lblStatus.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    lblStatus.setText(""String_Node_Str"");
    login=new MCULogin(cmpStatus);
    login.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1));
    Button btnUpdate=new Button(cmpStatus,SWT.PUSH);
    btnUpdate.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1));
    btnUpdate.setText(translate.update);
    btnUpdate.addSelectionListener(new SelectionListener(){
      @Override public void widgetSelected(      SelectionEvent arg0){
        MCUpdater.getInstance().getInstanceRoot().resolve(selected.getServerId()).toFile().mkdirs();
        final List<Module> selectedMods=new ArrayList<Module>();
        Iterator<ModuleCheckbox> it=modules.getModules().iterator();
        while (it.hasNext()) {
          ModuleCheckbox entry=it.next();
          System.out.println(""String_Node_Str"" + entry.getModule().getName());
          if (entry.isSelected()) {
            selectedMods.add(entry.getModule());
          }
        }
        final Properties instData=new Properties();
        final Path instanceFile=MCUpdater.getInstance().getInstanceRoot().resolve(selected.getServerId()).resolve(""String_Node_Str"");
        try {
          if (!instanceFile.toFile().exists()) {
            instanceFile.toFile().createNewFile();
          }
          instData.load(Files.newInputStream(instanceFile));
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
        try {
          MCUpdater.getInstance().installMods(selected,selectedMods,false,instData,ModSide.CLIENT);
        }
 catch (        FileNotFoundException e) {
          e.printStackTrace();
        }
      }
      @Override public void widgetDefaultSelected(      SelectionEvent arg0){
        widgetSelected(arg0);
      }
    }
);
    Button btnLaunch=new Button(cmpStatus,SWT.PUSH);
    btnLaunch.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1));
    btnLaunch.setText(translate.launchMinecraft);
    btnLaunch.addSelectionListener(new SelectionListener(){
      @Override public void widgetDefaultSelected(      SelectionEvent arg0){
        widgetSelected(arg0);
      }
      @Override public void widgetSelected(      SelectionEvent arg0){
        Profile launchProfile=login.getSelectedProfile();
        if (!(launchProfile == null)) {
          SettingsManager.getInstance().getSettings().setLastProfile(launchProfile.getName());
          SettingsManager.getInstance().getSettings().findProfile(launchProfile.getName()).setLastInstance(selected.getServerId());
          if (!SettingsManager.getInstance().isDirty()) {
            SettingsManager.getInstance().saveSettings();
          }
          try {
            MCULogic.doLaunch(selected,modules.getModules(),launchProfile);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
);
  }
}",0.9666772959183674
12342,"/** 
 * Open the window.
 */
public void open(){
  final Display display=Display.getDefault();
  try {
    translate=Languages.valueOf(Languages.getLocale()).getProxy();
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + Languages.getLocale() + ""String_Node_Str"");
    translate=Languages.en_US.getProxy();
  }
  createContents();
  shell.open();
  shell.layout();
  tracker=new MCUClientTracker(display,progress);
  final DownloadQueue assetsQueue=AssetManager.downloadAssets(MCUpdater.getInstance().getArchiveFolder().resolve(""String_Node_Str"").toFile(),tracker);
  progress.addProgressBar(assetsQueue.getName());
  executor=new ThreadPoolExecutor(0,8,30000,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
    if (!assetsQueue.isActive()) {
      assetsQueue.processQueue(executor);
    }
  }
}","/** 
 * Open the window.
 */
public void open(){
  final Display display=Display.getDefault();
  try {
    translate=Languages.valueOf(Languages.getLocale()).getProxy();
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + Languages.getLocale() + ""String_Node_Str"");
    translate=Languages.en_US.getProxy();
  }
  createContents();
  processSettings();
  shell.open();
  shell.layout();
  tracker=new MCUClientTracker(display,progress);
  final DownloadQueue assetsQueue=AssetManager.downloadAssets(MCUpdater.getInstance().getArchiveFolder().resolve(""String_Node_Str"").toFile(),tracker);
  progress.addProgressBar(assetsQueue.getName());
  executor=new ThreadPoolExecutor(0,8,30000,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
    if (!assetsQueue.isActive()) {
      assetsQueue.processQueue(executor);
    }
  }
}",0.9888119339371336
12343,"private static Module getModule(Element modEl){
  String name=modEl.getAttribute(""String_Node_Str"");
  String id=modEl.getAttribute(""String_Node_Str"");
  String url=getTextValue(modEl,""String_Node_Str"");
  String path=getTextValue(modEl,""String_Node_Str"");
  String depends=modEl.getAttribute(""String_Node_Str"");
  String side=modEl.getAttribute(""String_Node_Str"");
  Boolean required=getBooleanValue(modEl,""String_Node_Str"");
  Boolean isDefault=getBooleanValue(modEl,""String_Node_Str"");
  Boolean inJar=getBooleanValue(modEl,""String_Node_Str"");
  int jarOrder=getIntValue(modEl,""String_Node_Str"");
  Boolean keepMeta=getBooleanValue(modEl,""String_Node_Str"");
  Boolean extract=getBooleanValue(modEl,""String_Node_Str"");
  Boolean inRoot=getBooleanValue(modEl,""String_Node_Str"");
  Boolean coreMod=getBooleanValue(modEl,""String_Node_Str"");
  String md5=getTextValue(modEl,""String_Node_Str"");
  List<ConfigFile> configs=new ArrayList<ConfigFile>();
  NodeList nl=modEl.getElementsByTagName(""String_Node_Str"");
  for (int i=0; i < nl.getLength(); i++) {
    Element el=(Element)nl.item(i);
    ConfigFile cf=getConfigFile(el);
    configs.add(cf);
  }
  HashMap<String,String> mapMeta=new HashMap<String,String>();
  NodeList nlMeta=modEl.getElementsByTagName(""String_Node_Str"");
  if (nlMeta.getLength() > 0) {
    Element elMeta=(Element)nl.item(0);
    for (int i=0; i < elMeta.getChildNodes().getLength(); i++) {
      Element el=(Element)elMeta.getChildNodes().item(i);
      mapMeta.put(el.getNodeName(),el.getNodeValue());
    }
  }
  Module m=new Module(name,id,url,depends,required,inJar,jarOrder,keepMeta,extract,inRoot,isDefault,coreMod,md5,configs,side,path,null);
  return m;
}","private static Module getModule(Element modEl){
  String name=modEl.getAttribute(""String_Node_Str"");
  String id=modEl.getAttribute(""String_Node_Str"");
  String url=getTextValue(modEl,""String_Node_Str"");
  String path=getTextValue(modEl,""String_Node_Str"");
  String depends=modEl.getAttribute(""String_Node_Str"");
  String side=modEl.getAttribute(""String_Node_Str"");
  Boolean required=getBooleanValue(modEl,""String_Node_Str"");
  Boolean isDefault=getBooleanValue(modEl,""String_Node_Str"");
  Boolean inJar=getBooleanValue(modEl,""String_Node_Str"");
  int jarOrder=getIntValue(modEl,""String_Node_Str"");
  Boolean keepMeta=getBooleanValue(modEl,""String_Node_Str"");
  Boolean extract=getBooleanValue(modEl,""String_Node_Str"");
  Boolean inRoot=getBooleanValue(modEl,""String_Node_Str"");
  Boolean coreMod=getBooleanValue(modEl,""String_Node_Str"");
  String md5=getTextValue(modEl,""String_Node_Str"");
  List<ConfigFile> configs=new ArrayList<ConfigFile>();
  NodeList nl=modEl.getElementsByTagName(""String_Node_Str"");
  for (int i=0; i < nl.getLength(); i++) {
    Element el=(Element)nl.item(i);
    ConfigFile cf=getConfigFile(el);
    configs.add(cf);
  }
  HashMap<String,String> mapMeta=new HashMap<String,String>();
  NodeList nlMeta=modEl.getElementsByTagName(""String_Node_Str"");
  if (nlMeta.getLength() > 0) {
    Element elMeta=(Element)nlMeta.item(0);
    for (int i=0; i < elMeta.getChildNodes().getLength(); i++) {
      if (elMeta.getChildNodes().item(i) instanceof Element) {
        Element el=(Element)elMeta.getChildNodes().item(i);
        mapMeta.put(el.getNodeName(),el.getNodeValue());
      }
    }
  }
  Module m=new Module(name,id,url,depends,required,inJar,jarOrder,keepMeta,extract,inRoot,isDefault,coreMod,md5,configs,side,path,null);
  return m;
}",0.9643994211287988
12344,"protected void doSave(Path outputFile){
  try {
    if (configDirty)     updateConfigEntry();
    if (moduleDirty)     updateModuleEntry();
    if (serverDirty)     updateServerEntry();
    BufferedWriter fileWriter=Files.newBufferedWriter(outputFile,StandardCharsets.UTF_8,StandardOpenOption.CREATE);
    fileWriter.write(""String_Node_Str"");
    fileWriter.newLine();
    fileWriter.write(""String_Node_Str"");
    fileWriter.newLine();
    fileWriter.write(""String_Node_Str"" + Version.API_VERSION + ""String_Node_Str"");
    fileWriter.newLine();
    for (    ServerDefinition server : modelServer.getContents()) {
      fileWriter.write(""String_Node_Str"" + server.getServer().getServerId() + ""String_Node_Str""+ server.getServer().getName()+ ""String_Node_Str""+ server.getServer().getNewsUrl()+ ""String_Node_Str""+ server.getServer().getIconUrl()+ ""String_Node_Str""+ server.getServer().getVersion()+ ""String_Node_Str""+ server.getServer().getAddress()+ ""String_Node_Str""+ server.getServer().getRevision()+ ""String_Node_Str""+ server.getServer().isGenerateList()+ ""String_Node_Str"");
      fileWriter.newLine();
      for (      Module entry : server.getModules()) {
        fileWriter.write(""String_Node_Str"" + entry.getName() + ""String_Node_Str""+ entry.getId()+ ""String_Node_Str""+ entry.getDepends()+ ""String_Node_Str"");
        fileWriter.newLine();
        fileWriter.write(""String_Node_Str"" + xmlEscape(entry.getUrl()) + ""String_Node_Str"");
        fileWriter.newLine();
        if (!entry.getPath().equals(""String_Node_Str"")) {
          fileWriter.write(""String_Node_Str"" + xmlEscape(entry.getPath()) + ""String_Node_Str"");
          fileWriter.newLine();
        }
        fileWriter.write(""String_Node_Str"" + (entry.getRequired() == true ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
        fileWriter.newLine();
        fileWriter.write(""String_Node_Str"" + (entry.getIsDefault() == true ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
        fileWriter.newLine();
        fileWriter.write(""String_Node_Str"" + (entry.getInJar() == true ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
        fileWriter.newLine();
        if (entry.getInJar() == true) {
          fileWriter.write(""String_Node_Str"" + (entry.getJarOrder()) + ""String_Node_Str"");
          fileWriter.newLine();
        }
        fileWriter.write(""String_Node_Str"" + (entry.getKeepMeta() == true ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
        fileWriter.newLine();
        fileWriter.write(""String_Node_Str"" + (entry.getExtract() == true ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
        fileWriter.newLine();
        fileWriter.write(""String_Node_Str"" + (entry.getInRoot() == true ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
        fileWriter.newLine();
        fileWriter.write(""String_Node_Str"" + (entry.getCoreMod() == true ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
        fileWriter.newLine();
        fileWriter.write(""String_Node_Str"" + xmlEscape(entry.getMD5()) + ""String_Node_Str"");
        fileWriter.newLine();
        fileWriter.write(""String_Node_Str"");
        fileWriter.newLine();
        Iterator<Entry<String,String>> itMeta=entry.getMeta().entrySet().iterator();
        while (itMeta.hasNext()) {
          Entry<String,String> metaEntry=itMeta.next();
          if (!metaEntry.getKey().isEmpty()) {
            fileWriter.write(""String_Node_Str"" + metaEntry.getKey() + ""String_Node_Str""+ metaEntry.getValue()+ ""String_Node_Str""+ metaEntry.getKey()+ ""String_Node_Str"");
            fileWriter.newLine();
          }
        }
        fileWriter.write(""String_Node_Str"");
        fileWriter.newLine();
        for (        ConfigFileWrapper cfw : server.getConfigs()) {
          if (cfw.getParentId().equals(entry.getId())) {
            fileWriter.write(""String_Node_Str"");
            fileWriter.newLine();
            fileWriter.write(""String_Node_Str"" + xmlEscape(cfw.getConfigFile().getUrl()) + ""String_Node_Str"");
            fileWriter.newLine();
            fileWriter.write(""String_Node_Str"" + xmlEscape(cfw.getConfigFile().getPath()) + ""String_Node_Str"");
            fileWriter.newLine();
            fileWriter.write(""String_Node_Str"" + xmlEscape(cfw.getConfigFile().getMD5()) + ""String_Node_Str"");
            fileWriter.newLine();
            fileWriter.write(""String_Node_Str"");
            fileWriter.newLine();
          }
        }
        fileWriter.write(""String_Node_Str"");
        fileWriter.newLine();
      }
      fileWriter.write(""String_Node_Str"");
      fileWriter.newLine();
    }
    fileWriter.write(""String_Node_Str"");
    fileWriter.newLine();
    fileWriter.close();
    packDirty=false;
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
}","protected void doSave(Path outputFile){
  try {
    if (configDirty)     updateConfigEntry();
    if (moduleDirty)     updateModuleEntry();
    if (serverDirty)     updateServerEntry();
    BufferedWriter fileWriter=Files.newBufferedWriter(outputFile,StandardCharsets.UTF_8,StandardOpenOption.CREATE);
    fileWriter.write(""String_Node_Str"");
    fileWriter.newLine();
    fileWriter.write(""String_Node_Str"");
    fileWriter.newLine();
    fileWriter.write(""String_Node_Str"" + Version.API_VERSION + ""String_Node_Str"");
    fileWriter.newLine();
    for (    ServerDefinition server : modelServer.getContents()) {
      fileWriter.write(""String_Node_Str"" + server.getServer().getServerId() + ""String_Node_Str""+ server.getServer().getName()+ ""String_Node_Str""+ server.getServer().getNewsUrl()+ ""String_Node_Str""+ server.getServer().getIconUrl()+ ""String_Node_Str""+ server.getServer().getVersion()+ ""String_Node_Str""+ server.getServer().getAddress()+ ""String_Node_Str""+ server.getServer().getRevision()+ ""String_Node_Str""+ server.getServer().isGenerateList()+ ""String_Node_Str"");
      fileWriter.newLine();
      for (      Module entry : server.getModules()) {
        fileWriter.write(""String_Node_Str"" + entry.getName() + ""String_Node_Str""+ entry.getId()+ ""String_Node_Str""+ entry.getDepends()+ ""String_Node_Str"");
        fileWriter.newLine();
        fileWriter.write(""String_Node_Str"" + xmlEscape(entry.getUrl()) + ""String_Node_Str"");
        fileWriter.newLine();
        if (!entry.getPath().equals(""String_Node_Str"")) {
          fileWriter.write(""String_Node_Str"" + xmlEscape(entry.getPath()) + ""String_Node_Str"");
          fileWriter.newLine();
        }
        fileWriter.write(""String_Node_Str"" + (entry.getRequired() == true ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
        fileWriter.newLine();
        fileWriter.write(""String_Node_Str"" + (entry.getIsDefault() == true ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
        fileWriter.newLine();
        fileWriter.write(""String_Node_Str"" + (entry.getInJar() == true ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
        fileWriter.newLine();
        if (entry.getInJar() == true) {
          fileWriter.write(""String_Node_Str"" + (entry.getJarOrder()) + ""String_Node_Str"");
          fileWriter.newLine();
        }
        fileWriter.write(""String_Node_Str"" + (entry.getKeepMeta() == true ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
        fileWriter.newLine();
        fileWriter.write(""String_Node_Str"" + (entry.getExtract() == true ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
        fileWriter.newLine();
        fileWriter.write(""String_Node_Str"" + (entry.getInRoot() == true ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
        fileWriter.newLine();
        fileWriter.write(""String_Node_Str"" + (entry.getCoreMod() == true ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
        fileWriter.newLine();
        fileWriter.write(""String_Node_Str"" + xmlEscape(entry.getMD5()) + ""String_Node_Str"");
        fileWriter.newLine();
        fileWriter.write(""String_Node_Str"");
        fileWriter.newLine();
        Iterator<Entry<String,String>> itMeta=entry.getMeta().entrySet().iterator();
        while (itMeta.hasNext()) {
          Entry<String,String> metaEntry=itMeta.next();
          if (!metaEntry.getKey().isEmpty()) {
            fileWriter.write(""String_Node_Str"" + metaEntry.getKey() + ""String_Node_Str""+ metaEntry.getValue()+ ""String_Node_Str""+ metaEntry.getKey()+ ""String_Node_Str"");
            fileWriter.newLine();
          }
        }
        fileWriter.write(""String_Node_Str"");
        fileWriter.newLine();
        for (        ConfigFileWrapper cfw : server.getConfigs()) {
          if (cfw.getParentId().equals(entry.getId())) {
            fileWriter.write(""String_Node_Str"");
            fileWriter.newLine();
            fileWriter.write(""String_Node_Str"" + xmlEscape(cfw.getConfigFile().getUrl()) + ""String_Node_Str"");
            fileWriter.newLine();
            fileWriter.write(""String_Node_Str"" + xmlEscape(cfw.getConfigFile().getPath()) + ""String_Node_Str"");
            fileWriter.newLine();
            fileWriter.write(""String_Node_Str"" + xmlEscape(cfw.getConfigFile().getMD5()) + ""String_Node_Str"");
            fileWriter.newLine();
            fileWriter.write(""String_Node_Str"" + cfw.getConfigFile().isNoOverwrite() + ""String_Node_Str"");
            fileWriter.write(""String_Node_Str"");
            fileWriter.newLine();
          }
        }
        fileWriter.write(""String_Node_Str"");
        fileWriter.newLine();
      }
      fileWriter.write(""String_Node_Str"");
      fileWriter.newLine();
    }
    fileWriter.write(""String_Node_Str"");
    fileWriter.newLine();
    fileWriter.close();
    packDirty=false;
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
}",0.9889929019648184
12345,"private void updateConfigSelectionDetails(){
  if (lstConfigFiles.getSelectedIndex() > -1) {
    ConfigFileWrapper selected=lstConfigFiles.getSelectedValue();
    lstConfigParentId.setSelectedIndex(modelParentId.find(selected.getParentId()));
    lstConfigParentId.repaint();
    txtConfigMD5.setText(selected.getConfigFile().getMD5());
    txtConfigUrl.setText(selected.getConfigFile().getUrl());
    txtConfigPath.setText(selected.getConfigFile().getPath());
    configDirty=false;
    configCurrentSelection=lstConfigFiles.getSelectedIndex();
  }
}","private void updateConfigSelectionDetails(){
  if (lstConfigFiles.getSelectedIndex() > -1) {
    ConfigFileWrapper selected=lstConfigFiles.getSelectedValue();
    lstConfigParentId.setSelectedIndex(modelParentId.find(selected.getParentId()));
    lstConfigParentId.repaint();
    txtConfigMD5.setText(selected.getConfigFile().getMD5());
    txtConfigUrl.setText(selected.getConfigFile().getUrl());
    txtConfigPath.setText(selected.getConfigFile().getPath());
    chkConfigNoOverwrite.setSelected(selected.getConfigFile().isNoOverwrite());
    configDirty=false;
    configCurrentSelection=lstConfigFiles.getSelectedIndex();
  }
}",0.9323181049069372
12346,"@Override public void run(){
  List<String> jvmOpts=new ArrayList<String>();
  if (!parent.getConfig().getProperty(""String_Node_Str"",""String_Node_Str"").isEmpty()) {
    jvmOpts=Arrays.asList(parent.getConfig().getProperty(""String_Node_Str"").split(""String_Node_Str""));
  }
  String javaBin=""String_Node_Str"";
  File binDir;
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    binDir=new Path(new File(jrePath)).resolve(""String_Node_Str"").toFile();
  }
 else {
    binDir=new Path(new File(jrePath)).resolve(""String_Node_Str"").toFile();
  }
  if (binDir.exists()) {
    javaBin=new Path(binDir).resolve(""String_Node_Str"").toString();
  }
  List<String> args=new ArrayList<String>();
  if (!parent.getConfig().getProperty(""String_Node_Str"",""String_Node_Str"").isEmpty()) {
    args.add(parent.getConfig().getProperty(""String_Node_Str""));
  }
  args.add(javaBin);
  args.add(""String_Node_Str"");
  args.add(""String_Node_Str"");
  args.add(""String_Node_Str"");
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    args.add(""String_Node_Str"" + server.getName());
  }
  args.addAll(jvmOpts);
  args.add(""String_Node_Str"" + this.minMem);
  args.add(""String_Node_Str"" + this.maxMem);
  args.add(""String_Node_Str"");
  args.add(MCUpdater.getJarFile().toString());
  args.add(""String_Node_Str"");
  args.add(session.getUserName());
  args.add(session.getSessionId());
  args.add(server.getName());
  args.add(MCUpdater.getInstance().getInstanceRoot().resolve(server.getServerId()).toString());
  args.add(MCUpdater.getInstance().getInstanceRoot().resolve(server.getServerId()).resolve(""String_Node_Str"").toString());
  args.add((server.getIconUrl().equals(""String_Node_Str"")) ? ""String_Node_Str"" : server.getIconUrl());
  args.add(parent.getConfig().getProperty(""String_Node_Str""));
  args.add(parent.getConfig().getProperty(""String_Node_Str""));
  args.add(server.getAddress());
  if (!Version.isMasterBranch()) {
    parent.log(""String_Node_Str"");
    Iterator<String> itArgs=args.iterator();
    while (itArgs.hasNext()) {
      String entry=itArgs.next();
      parent.log(entry);
    }
  }
  ProcessBuilder pb=new ProcessBuilder(args);
  parent.baseLogger.fine(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    if (new Path(new File(jrePath)).resolve(""String_Node_Str"").resolve(""String_Node_Str"").toFile().exists()) {
      pb.environment().put(""String_Node_Str"",new Path(new File(jrePath)).resolve(""String_Node_Str"").resolve(""String_Node_Str"").toString());
    }
 else {
      pb.environment().put(""String_Node_Str"",new Path(new File(jrePath)).resolve(""String_Node_Str"").resolve(""String_Node_Str"").toString());
    }
  }
  pb.redirectErrorStream(true);
  BufferedWriter buffWrite=null;
  try {
    buffWrite=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(output)));
  }
 catch (  FileNotFoundException e) {
    parent.baseLogger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  try {
    task=pb.start();
    BufferedReader buffRead=new BufferedReader(new InputStreamReader(task.getInputStream()));
    String line;
    buffRead.mark(1024);
    final String firstLine=buffRead.readLine();
    setReady();
    if (firstLine == null || firstLine.startsWith(""String_Node_Str"") || firstLine.startsWith(""String_Node_Str"")) {
      parent.baseLogger.severe(""String_Node_Str"");
      StringBuilder err=new StringBuilder(firstLine);
      while ((line=buffRead.readLine()) != null) {
        err.append('\n');
        err.append(line);
        parent.baseLogger.severe(line);
      }
      JOptionPane.showMessageDialog(null,err);
    }
 else {
      buffRead.reset();
      minimizeFrame();
      parent.baseLogger.info(""String_Node_Str"");
      int counter=0;
      while ((line=buffRead.readLine()) != null) {
        if (buffWrite != null) {
          buffWrite.write(line);
          buffWrite.newLine();
          counter++;
          if (counter >= 20) {
            buffWrite.flush();
            counter=0;
          }
        }
 else {
          parent.baseLogger.fine(line);
        }
        if (line.length() > 0) {
          Style lineStyle=null;
          if (line.contains(""String_Node_Str"")) {
            lineStyle=console.warnStyle;
          }
          if (line.contains(""String_Node_Str"")) {
            lineStyle=console.errorStyle;
          }
          console.log(line,lineStyle);
          parent.baseLogger.info(line);
        }
      }
    }
    buffWrite.flush();
    buffWrite.close();
    restoreFrame();
    parent.baseLogger.info(""String_Node_Str"" + (forceKilled ? ""String_Node_Str"" : ""String_Node_Str""));
  }
 catch (  IOException ioe) {
    parent.baseLogger.log(Level.SEVERE,""String_Node_Str"",ioe);
  }
}","@Override public void run(){
  List<String> jvmOpts=new ArrayList<String>();
  if (!parent.getConfig().getProperty(""String_Node_Str"",""String_Node_Str"").isEmpty()) {
    jvmOpts=Arrays.asList(parent.getConfig().getProperty(""String_Node_Str"").split(""String_Node_Str""));
  }
  String javaBin=""String_Node_Str"";
  File binDir;
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    binDir=new Path(new File(jrePath)).resolve(""String_Node_Str"").toFile();
  }
 else {
    binDir=new Path(new File(jrePath)).resolve(""String_Node_Str"").toFile();
  }
  if (binDir.exists()) {
    javaBin=new Path(binDir).resolve(""String_Node_Str"").toString();
  }
  List<String> args=new ArrayList<String>();
  if (!parent.getConfig().getProperty(""String_Node_Str"",""String_Node_Str"").isEmpty()) {
    args.add(parent.getConfig().getProperty(""String_Node_Str""));
  }
  args.add(javaBin);
  args.add(""String_Node_Str"");
  args.add(""String_Node_Str"");
  args.add(""String_Node_Str"");
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    args.add(""String_Node_Str"" + server.getName());
  }
  args.addAll(jvmOpts);
  args.add(""String_Node_Str"" + this.minMem);
  args.add(""String_Node_Str"" + this.maxMem);
  args.add(""String_Node_Str"");
  args.add(MCUpdater.getJarFile().toString());
  args.add(""String_Node_Str"");
  args.add(session.getUserName());
  args.add(session.getSessionId());
  args.add(server.getName());
  args.add(MCUpdater.getInstance().getInstanceRoot().resolve(server.getServerId()).toString());
  args.add(MCUpdater.getInstance().getInstanceRoot().resolve(server.getServerId()).resolve(""String_Node_Str"").toString());
  args.add((server.getIconUrl().equals(""String_Node_Str"")) ? ""String_Node_Str"" : server.getIconUrl());
  args.add(parent.getConfig().getProperty(""String_Node_Str""));
  args.add(parent.getConfig().getProperty(""String_Node_Str""));
  args.add(server.getAddress());
  if (!Version.isMasterBranch()) {
    parent.log(""String_Node_Str"");
    Iterator<String> itArgs=args.iterator();
    while (itArgs.hasNext()) {
      String entry=itArgs.next();
      parent.log(entry);
    }
  }
  ProcessBuilder pb=new ProcessBuilder(args);
  parent.baseLogger.fine(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    if (new Path(new File(jrePath)).resolve(""String_Node_Str"").resolve(""String_Node_Str"").toFile().exists()) {
      pb.environment().put(""String_Node_Str"",new Path(new File(jrePath)).resolve(""String_Node_Str"").resolve(""String_Node_Str"").toString());
    }
 else {
      pb.environment().put(""String_Node_Str"",new Path(new File(jrePath)).resolve(""String_Node_Str"").resolve(""String_Node_Str"").toString());
    }
  }
  pb.redirectErrorStream(true);
  BufferedWriter buffWrite=null;
  try {
    buffWrite=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(output)));
  }
 catch (  FileNotFoundException e) {
    parent.baseLogger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  try {
    task=pb.start();
    BufferedReader buffRead=new BufferedReader(new InputStreamReader(task.getInputStream()));
    String line;
    buffRead.mark(1024);
    final String firstLine=buffRead.readLine();
    setReady();
    if (firstLine == null || firstLine.startsWith(""String_Node_Str"") || firstLine.startsWith(""String_Node_Str"")) {
      parent.baseLogger.severe(""String_Node_Str"");
      StringBuilder err=new StringBuilder(firstLine);
      while ((line=buffRead.readLine()) != null) {
        err.append('\n');
        err.append(line);
        parent.baseLogger.severe(line);
      }
      JOptionPane.showMessageDialog(null,err);
    }
 else {
      buffRead.reset();
      minimizeFrame();
      parent.baseLogger.info(""String_Node_Str"");
      int counter=0;
      while ((line=buffRead.readLine()) != null) {
        if (buffWrite != null) {
          buffWrite.write(line);
          buffWrite.newLine();
          counter++;
          if (counter >= 20) {
            buffWrite.flush();
            counter=0;
          }
        }
 else {
          parent.baseLogger.fine(line);
        }
        if (line.length() > 0) {
          Style lineStyle=null;
          if (line.contains(""String_Node_Str"")) {
            lineStyle=console.warnStyle;
          }
          if (line.contains(""String_Node_Str"")) {
            lineStyle=console.errorStyle;
          }
          console.log(line + ""String_Node_Str"",lineStyle);
        }
      }
    }
    buffWrite.flush();
    buffWrite.close();
    restoreFrame();
    parent.baseLogger.info(""String_Node_Str"" + (forceKilled ? ""String_Node_Str"" : ""String_Node_Str""));
  }
 catch (  IOException ioe) {
    parent.baseLogger.log(Level.SEVERE,""String_Node_Str"",ioe);
  }
}",0.993712010060784
12347,"/** 
 * Initialize the contents of the frame.
 */
void initialize(){
  File configFile=mcu.getArchiveFolder().resolve(""String_Node_Str"").toFile();
  if (!configFile.exists()) {
    createDefaultConfig(configFile);
  }
  try {
    config.load(new FileInputStream(configFile));
    if (validateConfig(config)) {
      writeConfig(config);
    }
    mcu.setInstanceRoot(new File(config.getProperty(""String_Node_Str"")).toPath());
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
catch (  IOException e1) {
    e1.printStackTrace();
  }
  checkAccess();
  System.out.println(""String_Node_Str"" + canWriteMinecraft + ""String_Node_Str""+ canWriteMCUpdater+ ""String_Node_Str""+ canWriteInstances+ ""String_Node_Str""+ canCreateLinks);
  if (canCreateLinks == false) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
  }
  frmMain=new JFrame();
  frmMain.setTitle(""String_Node_Str"" + Version.VERSION + Version.BUILD_LABEL);
  frmMain.setResizable(false);
  frmMain.setBounds(100,100,1175,592);
  frmMain.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  mcuIcon=new ImageIcon(MainForm.class.getResource(""String_Node_Str""));
  frmMain.setIconImage(mcuIcon.getImage());
  JPanel pnlFooter=new JPanel();
  frmMain.getContentPane().add(pnlFooter,BorderLayout.SOUTH);
  pnlFooter.setLayout(new BorderLayout(0,0));
  JPanel pnlButtons=new JPanel();
  pnlFooter.add(pnlButtons,BorderLayout.EAST);
  btnUpdate=new JButton(""String_Node_Str"");
  btnUpdate.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      new Thread(){
        public void run(){
          if (!mcu.checkVersionCache(window,selected.getVersion())) {
            JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
            return;
          }
          btnUpdate.setEnabled(false);
          btnLaunchMinecraft.setEnabled(false);
          mcu.getMCVersion();
          int saveConfig=JOptionPane.showConfirmDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);
          if (saveConfig == JOptionPane.YES_OPTION) {
            setLblStatus(""String_Node_Str"");
            setProgressBar(10);
            Calendar cal=Calendar.getInstance();
            SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
            String backDesc=(String)JOptionPane.showInputDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.QUESTION_MESSAGE,null,null,(""String_Node_Str"" + sdf.format(cal.getTime())));
            log(""String_Node_Str"" + backDesc + ""String_Node_Str"");
            mcu.saveConfig(backDesc);
            log(""String_Node_Str"");
          }
 else           if (saveConfig == JOptionPane.CANCEL_OPTION) {
            btnUpdate.setEnabled(true);
            btnLaunchMinecraft.setEnabled(true);
            return;
          }
          tabs.setSelectedIndex(tabs.getTabCount() - 1);
          Properties instData=new Properties();
          Path instanceFile=mcu.getMCFolder().resolve(""String_Node_Str"");
          try {
            instData.load(Files.newInputStream(instanceFile));
          }
 catch (          IOException e1) {
            e1.printStackTrace();
          }
          instData.setProperty(""String_Node_Str"",selected.getServerId());
          instData.setProperty(""String_Node_Str"",selected.getRevision());
          try {
            instData.store(Files.newOutputStream(instanceFile),""String_Node_Str"");
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
          List<Module> toInstall=new ArrayList<Module>();
          List<Component> selects=new ArrayList<Component>(Arrays.asList(pnlModList.getComponents()));
          Iterator<Component> it=selects.iterator();
          setLblStatus(""String_Node_Str"");
          log(""String_Node_Str"");
          setProgressBar(20);
          while (it.hasNext()) {
            Component baseEntry=it.next();
            if (baseEntry.getClass().toString().equals(""String_Node_Str"")) {
              JModuleCheckBox entry=(JModuleCheckBox)baseEntry;
              if (entry.isSelected()) {
                toInstall.add(entry.getModule());
              }
            }
          }
          try {
            setLblStatus(""String_Node_Str"");
            log(""String_Node_Str"");
            setProgressBar(25);
            mcu.installMods(selected,toInstall,chkHardUpdate.isSelected());
            if (selected.isGenerateList()) {
              setLblStatus(""String_Node_Str"");
              log(""String_Node_Str"");
              setProgressBar(90);
              mcu.writeMCServerFile(selected.getName(),selected.getAddress());
            }
            setLblStatus(""String_Node_Str"");
            setProgressBar(100);
          }
 catch (          FileNotFoundException fnf) {
            log(""String_Node_Str"" + fnf.getMessage());
            JOptionPane.showMessageDialog(null,fnf.getMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
          }
          log(""String_Node_Str"");
          JOptionPane.showMessageDialog(frmMain,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
          btnUpdate.setEnabled(true);
          btnLaunchMinecraft.setEnabled(true);
        }
      }
.start();
    }
  }
);
  pnlButtons.add(btnUpdate);
  btnLaunchMinecraft=new JButton(""String_Node_Str"");
  btnLaunchMinecraft.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (!System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
        if (!requestLogin()) {
          if (loginData.getUserName().isEmpty()) {
            JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
            return;
          }
        }
      }
      File outFile=mcu.getArchiveFolder().resolve(""String_Node_Str"").toFile();
      outFile.delete();
      btnLaunchMinecraft.setEnabled(false);
      tabs.setSelectedIndex(tabs.getTabCount() - 1);
      final PopupMenu menu=trayIcon.getPopupMenu();
      MenuItem killItem=null;
      for (int k=0; k < menu.getItemCount(); ++k) {
        final MenuItem item=menu.getItem(k);
        if (item.getLabel().equals(""String_Node_Str"")) {
          killItem=item;
          break;
        }
      }
      GenericLauncherThread thread;
      if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
        File launcher=mcu.getMCFolder().resolve(""String_Node_Str"").toFile();
        if (!launcher.exists()) {
          try {
            URL launcherURL=new URL(""String_Node_Str"");
            ReadableByteChannel rbc=Channels.newChannel(launcherURL.openStream());
            FileOutputStream fos=new FileOutputStream(launcher);
            fos.getChannel().transferFrom(rbc,0,1 << 24);
            fos.close();
          }
 catch (          MalformedURLException mue) {
            mue.printStackTrace();
          }
catch (          IOException ioe) {
            ioe.printStackTrace();
          }
        }
        thread=LauncherThread.launch(launcher,config.getProperty(""String_Node_Str"",System.getProperty(""String_Node_Str"")),config.getProperty(""String_Node_Str""),config.getProperty(""String_Node_Str""),Boolean.parseBoolean(config.getProperty(""String_Node_Str"")),outFile,console);
      }
 else {
        thread=NativeLauncherThread.launch(window,loginData,config.getProperty(""String_Node_Str"",System.getProperty(""String_Node_Str"")),config.getProperty(""String_Node_Str""),config.getProperty(""String_Node_Str""),outFile,console);
      }
      thread.register(window,btnLaunchMinecraft,killItem);
      thread.start();
    }
  }
);
  pnlButtons.add(btnLaunchMinecraft);
  JPanel pnlStatus=new JPanel();
  pnlFooter.add(pnlStatus,BorderLayout.CENTER);
  pnlStatus.setLayout(new BorderLayout(0,0));
  lblStatus=new JLabel(""String_Node_Str"");
  lblStatus.setHorizontalAlignment(SwingConstants.LEFT);
  pnlStatus.add(lblStatus);
  JPanel panel=new JPanel();
  pnlStatus.add(panel,BorderLayout.EAST);
  panel.setLayout(new BorderLayout(0,0));
  progressBar=new JProgressBar();
  panel.add(progressBar);
  progressBar.setStringPainted(true);
  Component TopStrut=Box.createVerticalStrut(5);
  panel.add(TopStrut,BorderLayout.NORTH);
  Component BottomStrut=Box.createVerticalStrut(5);
  panel.add(BottomStrut,BorderLayout.SOUTH);
  Component horizontalStrut=Box.createHorizontalStrut(5);
  pnlFooter.add(horizontalStrut,BorderLayout.WEST);
  JPanel pnlLeft=new JPanel();
  frmMain.getContentPane().add(pnlLeft,BorderLayout.WEST);
  pnlLeft.setLayout(new BorderLayout(0,0));
  JLabel lblServers=new JLabel(""String_Node_Str"");
  lblServers.setHorizontalAlignment(SwingConstants.CENTER);
  lblServers.setFont(new Font(""String_Node_Str"",Font.BOLD,14));
  pnlLeft.add(lblServers,BorderLayout.NORTH);
  slModel=new SLListModel();
  serverList=new JList<ServerListPacket>();
  serverList.setModel(slModel);
  serverList.setCellRenderer(new ServerListCellRenderer());
  serverList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      if (!e.getValueIsAdjusting()) {
        changeSelectedServer(((ServerListPacket)serverList.getSelectedValue()).getEntry());
        Properties instData=new Properties();
        try {
          instData.load(Files.newInputStream(mcu.getMCFolder().resolve(""String_Node_Str"")));
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
        final boolean needUpdate=!selected.getRevision().equals(instData.getProperty(""String_Node_Str""));
        final boolean needMCUUpgrade=Version.isVersionOld(selected.getMCUVersion());
        String warningMessage=null;
        if (needUpdate) {
          warningMessage=""String_Node_Str"";
        }
 else         if (needMCUUpgrade) {
          warningMessage=""String_Node_Str"";
        }
        if (warningMessage != null) {
          JOptionPane.showMessageDialog(null,warningMessage,""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
        }
      }
    }
  }
);
  JScrollPane serverScroller=new JScrollPane(serverList);
  pnlLeft.add(serverScroller,BorderLayout.CENTER);
  pnlRight=new JPanel();
  frmMain.getContentPane().add(pnlRight,BorderLayout.EAST);
  pnlRight.setLayout(new BorderLayout(0,0));
  JPanel pnlChangesTitle=new JPanel();
  pnlChangesTitle.setLayout(new BorderLayout(0,0));
  JLabel lblChanges=new JLabel(""String_Node_Str"");
  lblChanges.setHorizontalAlignment(SwingConstants.CENTER);
  lblChanges.setFont(new Font(""String_Node_Str"",Font.BOLD,14));
  pnlChangesTitle.add(lblChanges,BorderLayout.CENTER);
  pnlRight.add(pnlChangesTitle,BorderLayout.NORTH);
  Component hstrut_ChangesLeft=Box.createHorizontalStrut(75);
  pnlChangesTitle.add(hstrut_ChangesLeft,BorderLayout.WEST);
  Component hstrut_ChangesRight=Box.createHorizontalStrut(75);
  pnlChangesTitle.add(hstrut_ChangesRight,BorderLayout.EAST);
  JScrollPane modScroller=new JScrollPane(pnlModList);
  pnlRight.add(modScroller,BorderLayout.CENTER);
  pnlModList.setLayout(new BoxLayout(pnlModList,BoxLayout.Y_AXIS));
  JPanel pnlUpdateOptions=new JPanel();
  pnlRight.add(pnlUpdateOptions,BorderLayout.SOUTH);
  pnlUpdateOptions.setLayout(new GridLayout(0,1,0,0));
  chkHardUpdate=new JCheckBox(""String_Node_Str"");
  pnlUpdateOptions.add(chkHardUpdate);
  browser.setEditable(false);
  browser.setContentType(""String_Node_Str"");
  browser.addHyperlinkListener(new HyperlinkListener(){
    @Override public void hyperlinkUpdate(    HyperlinkEvent he){
      if (he.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        try {
          MCUpdater.openLink(he.getURL().toURI());
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
);
  tabs=new JTabbedPane();
  browser.setText(""String_Node_Str"");
  JScrollPane browserScrollPane=new JScrollPane(browser);
  browserScrollPane.setViewportBorder(null);
  browser.setBorder(null);
  tabs.add(""String_Node_Str"",browserScrollPane);
  console.setBorder(null);
  console.setLineWrap(true);
  console.setEditable(false);
  Font f=new Font(""String_Node_Str"",Font.PLAIN,11);
  console.setFont(f);
  JScrollPane consoleScrollPane=new JScrollPane(console);
  consoleScrollPane.setViewportBorder(null);
  consoleScrollPane.setAutoscrolls(true);
  consoleScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
  consoleScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
  tabs.add(""String_Node_Str"",consoleScrollPane);
  log(""String_Node_Str"");
  frmMain.getContentPane().add(tabs,BorderLayout.CENTER);
  JToolBar toolBar=new JToolBar();
  toolBar.setFloatable(false);
  frmMain.getContentPane().add(toolBar,BorderLayout.NORTH);
  JButton btnManageServers=new JButton(""String_Node_Str"");
  btnManageServers.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ServerManager sm=new ServerManager(window);
      sm.setVisible(true);
    }
  }
);
  btnManageServers.setToolTipText(""String_Node_Str"");
  btnManageServers.setIcon(new ImageIcon(MainForm.class.getResource(""String_Node_Str"")));
  toolBar.add(btnManageServers);
  JButton btnOptions=new JButton(""String_Node_Str"");
  btnOptions.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      ClientConfig cc=new ClientConfig(window);
      cc.setVisible(true);
    }
  }
);
  btnOptions.setToolTipText(""String_Node_Str"");
  btnOptions.setIcon(new ImageIcon(MainForm.class.getResource(""String_Node_Str"")));
  toolBar.add(btnOptions);
  JButton btnBackups=new JButton(""String_Node_Str"");
  btnBackups.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      BackupManager bm=new BackupManager(window);
      bm.setVisible(true);
    }
  }
);
  btnBackups.setIcon(new ImageIcon(MainForm.class.getResource(""String_Node_Str"")));
  btnBackups.setToolTipText(""String_Node_Str"");
  toolBar.add(btnBackups);
  Component horizontalGlue=Box.createHorizontalGlue();
  toolBar.add(horizontalGlue);
  log(""String_Node_Str"" + mcu.getMCVersion());
  JLabel lblPlayerName1=new JLabel(""String_Node_Str"");
  toolBar.add(lblPlayerName1);
  lblAvatar=new JLabel();
  lblAvatar.setOpaque(true);
  lblAvatar.setHorizontalAlignment(JLabel.CENTER);
  lblAvatar.setVerticalAlignment(JLabel.CENTER);
  lblAvatar.setBackground(Color.WHITE);
  toolBar.add(lblAvatar);
  Component hStrut3=Box.createHorizontalStrut(5);
  toolBar.add(hStrut3);
  lblPlayerName2=new JLabel(""String_Node_Str"");
  toolBar.add(lblPlayerName2);
  JButton btnLogin=new JButton(""String_Node_Str"");
  btnLogin.setHorizontalAlignment(SwingConstants.TRAILING);
  btnLogin.setIcon(new ImageIcon(MainForm.class.getResource(""String_Node_Str"")));
  btnLogin.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      LoginForm lf=new LoginForm(window);
      lf.setVisible(true);
    }
  }
);
  Component horizontalStrut_2=Box.createHorizontalStrut(5);
  toolBar.add(horizontalStrut_2);
  toolBar.add(btnLogin);
  Component horizontalStrut_1=Box.createHorizontalStrut(5);
  toolBar.add(horizontalStrut_1);
  File serverFile=mcu.getArchiveFolder().resolve(""String_Node_Str"").toFile();
  String packUrl=Customization.getString(""String_Node_Str"");
  while (!serverFile.exists() && !(serverFile.length() > 0)) {
    if (packUrl.isEmpty()) {
      packUrl=(String)JOptionPane.showInputDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE,null,null,""String_Node_Str"");
      if (packUrl.isEmpty()) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
        System.exit(0);
      }
    }
    if (!(packUrl.equals(""String_Node_Str""))) {
      try {
        Document serverHeader=MCUpdater.readXmlFromUrl(packUrl);
        Element docEle=serverHeader.getDocumentElement();
        ServerList sl=new ServerList(docEle.getAttribute(""String_Node_Str""),docEle.getAttribute(""String_Node_Str""),packUrl,docEle.getAttribute(""String_Node_Str""),docEle.getAttribute(""String_Node_Str""),docEle.getAttribute(""String_Node_Str""),docEle.getAttribute(""String_Node_Str""),MCUpdater.parseBoolean(docEle.getAttribute(""String_Node_Str"")),docEle.getAttribute(""String_Node_Str""));
        List<ServerList> servers=new ArrayList<ServerList>();
        servers.add(sl);
        mcu.writeServerList(servers);
      }
 catch (      Exception x) {
        x.printStackTrace();
        packUrl=""String_Node_Str"";
      }
    }
  }
  updateServerList();
  Properties instData=new Properties();
  try {
    instData.load(Files.newInputStream(mcu.getMCFolder().resolve(""String_Node_Str"")));
  }
 catch (  NoSuchFileException nsfe) {
    instData.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
catch (  IOException e1) {
    e1.printStackTrace();
  }
  int selectIndex=((SLListModel)serverList.getModel()).getEntryIdByTag(instData.getProperty(""String_Node_Str""));
  serverList.setSelectedIndex(selectIndex);
  initTray();
  if (config.getProperty(""String_Node_Str"").toLowerCase().equals(""String_Node_Str"")) {
    if (config.containsKey(""String_Node_Str"")) {
      String user=config.getProperty(""String_Node_Str"");
      String password=decrypt(config.getProperty(""String_Node_Str""));
      try {
        login(user,password);
      }
 catch (      MCLoginException e1) {
      }
    }
  }
}","/** 
 * Initialize the contents of the frame.
 */
void initialize(){
  File configFile=mcu.getArchiveFolder().resolve(""String_Node_Str"").toFile();
  if (!configFile.exists()) {
    createDefaultConfig(configFile);
  }
  try {
    config.load(new FileInputStream(configFile));
    if (validateConfig(config)) {
      writeConfig(config);
    }
    mcu.setInstanceRoot(new File(config.getProperty(""String_Node_Str"")).toPath());
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
catch (  IOException e1) {
    e1.printStackTrace();
  }
  checkAccess();
  System.out.println(""String_Node_Str"" + canWriteMinecraft + ""String_Node_Str""+ canWriteMCUpdater+ ""String_Node_Str""+ canWriteInstances+ ""String_Node_Str""+ canCreateLinks);
  if (canCreateLinks == false) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
  }
  System.out.println(""String_Node_Str"");
  frmMain=new JFrame();
  frmMain.setTitle(""String_Node_Str"" + Version.VERSION + Version.BUILD_LABEL);
  frmMain.setResizable(false);
  frmMain.setBounds(100,100,1175,592);
  frmMain.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  mcuIcon=new ImageIcon(MainForm.class.getResource(""String_Node_Str""));
  frmMain.setIconImage(mcuIcon.getImage());
  JPanel pnlFooter=new JPanel();
  frmMain.getContentPane().add(pnlFooter,BorderLayout.SOUTH);
  pnlFooter.setLayout(new BorderLayout(0,0));
  JPanel pnlButtons=new JPanel();
  pnlFooter.add(pnlButtons,BorderLayout.EAST);
  btnUpdate=new JButton(""String_Node_Str"");
  btnUpdate.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      new Thread(){
        public void run(){
          if (!mcu.checkVersionCache(window,selected.getVersion())) {
            JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
            return;
          }
          btnUpdate.setEnabled(false);
          btnLaunchMinecraft.setEnabled(false);
          mcu.getMCVersion();
          int saveConfig=JOptionPane.showConfirmDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);
          if (saveConfig == JOptionPane.YES_OPTION) {
            setLblStatus(""String_Node_Str"");
            setProgressBar(10);
            Calendar cal=Calendar.getInstance();
            SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
            String backDesc=(String)JOptionPane.showInputDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.QUESTION_MESSAGE,null,null,(""String_Node_Str"" + sdf.format(cal.getTime())));
            log(""String_Node_Str"" + backDesc + ""String_Node_Str"");
            mcu.saveConfig(backDesc);
            log(""String_Node_Str"");
          }
 else           if (saveConfig == JOptionPane.CANCEL_OPTION) {
            btnUpdate.setEnabled(true);
            btnLaunchMinecraft.setEnabled(true);
            return;
          }
          tabs.setSelectedIndex(tabs.getTabCount() - 1);
          Properties instData=new Properties();
          Path instanceFile=mcu.getMCFolder().resolve(""String_Node_Str"");
          try {
            instData.load(Files.newInputStream(instanceFile));
          }
 catch (          IOException e1) {
            e1.printStackTrace();
          }
          instData.setProperty(""String_Node_Str"",selected.getServerId());
          instData.setProperty(""String_Node_Str"",selected.getRevision());
          try {
            instData.store(Files.newOutputStream(instanceFile),""String_Node_Str"");
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
          List<Module> toInstall=new ArrayList<Module>();
          List<Component> selects=new ArrayList<Component>(Arrays.asList(pnlModList.getComponents()));
          Iterator<Component> it=selects.iterator();
          setLblStatus(""String_Node_Str"");
          log(""String_Node_Str"");
          setProgressBar(20);
          while (it.hasNext()) {
            Component baseEntry=it.next();
            if (baseEntry.getClass().toString().equals(""String_Node_Str"")) {
              JModuleCheckBox entry=(JModuleCheckBox)baseEntry;
              if (entry.isSelected()) {
                toInstall.add(entry.getModule());
              }
            }
          }
          try {
            setLblStatus(""String_Node_Str"");
            log(""String_Node_Str"");
            setProgressBar(25);
            mcu.installMods(selected,toInstall,chkHardUpdate.isSelected());
            if (selected.isGenerateList()) {
              setLblStatus(""String_Node_Str"");
              log(""String_Node_Str"");
              setProgressBar(90);
              mcu.writeMCServerFile(selected.getName(),selected.getAddress());
            }
            setLblStatus(""String_Node_Str"");
            setProgressBar(100);
          }
 catch (          FileNotFoundException fnf) {
            log(""String_Node_Str"" + fnf.getMessage());
            JOptionPane.showMessageDialog(null,fnf.getMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
          }
          log(""String_Node_Str"");
          JOptionPane.showMessageDialog(frmMain,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
          btnUpdate.setEnabled(true);
          btnLaunchMinecraft.setEnabled(true);
        }
      }
.start();
    }
  }
);
  pnlButtons.add(btnUpdate);
  btnLaunchMinecraft=new JButton(""String_Node_Str"");
  btnLaunchMinecraft.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (!System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
        if (!requestLogin()) {
          if (loginData.getUserName().isEmpty()) {
            JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
            return;
          }
        }
      }
      File outFile=mcu.getArchiveFolder().resolve(""String_Node_Str"").toFile();
      outFile.delete();
      btnLaunchMinecraft.setEnabled(false);
      tabs.setSelectedIndex(tabs.getTabCount() - 1);
      final PopupMenu menu=trayIcon.getPopupMenu();
      MenuItem killItem=null;
      for (int k=0; k < menu.getItemCount(); ++k) {
        final MenuItem item=menu.getItem(k);
        if (item.getLabel().equals(""String_Node_Str"")) {
          killItem=item;
          break;
        }
      }
      GenericLauncherThread thread;
      if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
        File launcher=mcu.getMCFolder().resolve(""String_Node_Str"").toFile();
        if (!launcher.exists()) {
          try {
            URL launcherURL=new URL(""String_Node_Str"");
            ReadableByteChannel rbc=Channels.newChannel(launcherURL.openStream());
            FileOutputStream fos=new FileOutputStream(launcher);
            fos.getChannel().transferFrom(rbc,0,1 << 24);
            fos.close();
          }
 catch (          MalformedURLException mue) {
            mue.printStackTrace();
          }
catch (          IOException ioe) {
            ioe.printStackTrace();
          }
        }
        thread=LauncherThread.launch(launcher,config.getProperty(""String_Node_Str"",System.getProperty(""String_Node_Str"")),config.getProperty(""String_Node_Str""),config.getProperty(""String_Node_Str""),Boolean.parseBoolean(config.getProperty(""String_Node_Str"")),outFile,console);
      }
 else {
        thread=NativeLauncherThread.launch(window,loginData,config.getProperty(""String_Node_Str"",System.getProperty(""String_Node_Str"")),config.getProperty(""String_Node_Str""),config.getProperty(""String_Node_Str""),outFile,console);
      }
      thread.register(window,btnLaunchMinecraft,killItem);
      thread.start();
    }
  }
);
  pnlButtons.add(btnLaunchMinecraft);
  JPanel pnlStatus=new JPanel();
  pnlFooter.add(pnlStatus,BorderLayout.CENTER);
  pnlStatus.setLayout(new BorderLayout(0,0));
  lblStatus=new JLabel(""String_Node_Str"");
  lblStatus.setHorizontalAlignment(SwingConstants.LEFT);
  pnlStatus.add(lblStatus);
  JPanel panel=new JPanel();
  pnlStatus.add(panel,BorderLayout.EAST);
  panel.setLayout(new BorderLayout(0,0));
  progressBar=new JProgressBar();
  panel.add(progressBar);
  progressBar.setStringPainted(true);
  Component TopStrut=Box.createVerticalStrut(5);
  panel.add(TopStrut,BorderLayout.NORTH);
  Component BottomStrut=Box.createVerticalStrut(5);
  panel.add(BottomStrut,BorderLayout.SOUTH);
  Component horizontalStrut=Box.createHorizontalStrut(5);
  pnlFooter.add(horizontalStrut,BorderLayout.WEST);
  JPanel pnlLeft=new JPanel();
  frmMain.getContentPane().add(pnlLeft,BorderLayout.WEST);
  pnlLeft.setLayout(new BorderLayout(0,0));
  JLabel lblServers=new JLabel(""String_Node_Str"");
  lblServers.setHorizontalAlignment(SwingConstants.CENTER);
  lblServers.setFont(new Font(""String_Node_Str"",Font.BOLD,14));
  pnlLeft.add(lblServers,BorderLayout.NORTH);
  slModel=new SLListModel();
  serverList=new JList<ServerListPacket>();
  serverList.setModel(slModel);
  serverList.setCellRenderer(new ServerListCellRenderer());
  serverList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      if (!e.getValueIsAdjusting()) {
        changeSelectedServer(((ServerListPacket)serverList.getSelectedValue()).getEntry());
        Properties instData=new Properties();
        try {
          instData.load(Files.newInputStream(mcu.getMCFolder().resolve(""String_Node_Str"")));
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
        final boolean needUpdate=!selected.getRevision().equals(instData.getProperty(""String_Node_Str""));
        final boolean needMCUUpgrade=Version.isVersionOld(selected.getMCUVersion());
        String warningMessage=null;
        if (needUpdate) {
          warningMessage=""String_Node_Str"";
        }
 else         if (needMCUUpgrade) {
          warningMessage=""String_Node_Str"";
        }
        if (warningMessage != null) {
          JOptionPane.showMessageDialog(null,warningMessage,""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
        }
      }
    }
  }
);
  JScrollPane serverScroller=new JScrollPane(serverList);
  pnlLeft.add(serverScroller,BorderLayout.CENTER);
  pnlRight=new JPanel();
  frmMain.getContentPane().add(pnlRight,BorderLayout.EAST);
  pnlRight.setLayout(new BorderLayout(0,0));
  JPanel pnlChangesTitle=new JPanel();
  pnlChangesTitle.setLayout(new BorderLayout(0,0));
  JLabel lblChanges=new JLabel(""String_Node_Str"");
  lblChanges.setHorizontalAlignment(SwingConstants.CENTER);
  lblChanges.setFont(new Font(""String_Node_Str"",Font.BOLD,14));
  pnlChangesTitle.add(lblChanges,BorderLayout.CENTER);
  pnlRight.add(pnlChangesTitle,BorderLayout.NORTH);
  Component hstrut_ChangesLeft=Box.createHorizontalStrut(75);
  pnlChangesTitle.add(hstrut_ChangesLeft,BorderLayout.WEST);
  Component hstrut_ChangesRight=Box.createHorizontalStrut(75);
  pnlChangesTitle.add(hstrut_ChangesRight,BorderLayout.EAST);
  JScrollPane modScroller=new JScrollPane(pnlModList);
  pnlRight.add(modScroller,BorderLayout.CENTER);
  pnlModList.setLayout(new BoxLayout(pnlModList,BoxLayout.Y_AXIS));
  JPanel pnlUpdateOptions=new JPanel();
  pnlRight.add(pnlUpdateOptions,BorderLayout.SOUTH);
  pnlUpdateOptions.setLayout(new GridLayout(0,1,0,0));
  chkHardUpdate=new JCheckBox(""String_Node_Str"");
  pnlUpdateOptions.add(chkHardUpdate);
  browser.setEditable(false);
  browser.setContentType(""String_Node_Str"");
  browser.addHyperlinkListener(new HyperlinkListener(){
    @Override public void hyperlinkUpdate(    HyperlinkEvent he){
      if (he.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        try {
          MCUpdater.openLink(he.getURL().toURI());
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
);
  tabs=new JTabbedPane();
  browser.setText(""String_Node_Str"");
  JScrollPane browserScrollPane=new JScrollPane(browser);
  browserScrollPane.setViewportBorder(null);
  browser.setBorder(null);
  tabs.add(""String_Node_Str"",browserScrollPane);
  console.setBorder(null);
  console.setLineWrap(true);
  console.setEditable(false);
  Font f=new Font(""String_Node_Str"",Font.PLAIN,11);
  console.setFont(f);
  JScrollPane consoleScrollPane=new JScrollPane(console);
  consoleScrollPane.setViewportBorder(null);
  consoleScrollPane.setAutoscrolls(true);
  consoleScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
  consoleScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
  tabs.add(""String_Node_Str"",consoleScrollPane);
  log(""String_Node_Str"");
  frmMain.getContentPane().add(tabs,BorderLayout.CENTER);
  JToolBar toolBar=new JToolBar();
  toolBar.setFloatable(false);
  frmMain.getContentPane().add(toolBar,BorderLayout.NORTH);
  JButton btnManageServers=new JButton(""String_Node_Str"");
  btnManageServers.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ServerManager sm=new ServerManager(window);
      sm.setVisible(true);
    }
  }
);
  btnManageServers.setToolTipText(""String_Node_Str"");
  btnManageServers.setIcon(new ImageIcon(MainForm.class.getResource(""String_Node_Str"")));
  toolBar.add(btnManageServers);
  JButton btnOptions=new JButton(""String_Node_Str"");
  btnOptions.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      ClientConfig cc=new ClientConfig(window);
      cc.setVisible(true);
    }
  }
);
  btnOptions.setToolTipText(""String_Node_Str"");
  btnOptions.setIcon(new ImageIcon(MainForm.class.getResource(""String_Node_Str"")));
  toolBar.add(btnOptions);
  JButton btnBackups=new JButton(""String_Node_Str"");
  btnBackups.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      BackupManager bm=new BackupManager(window);
      bm.setVisible(true);
    }
  }
);
  btnBackups.setIcon(new ImageIcon(MainForm.class.getResource(""String_Node_Str"")));
  btnBackups.setToolTipText(""String_Node_Str"");
  toolBar.add(btnBackups);
  Component horizontalGlue=Box.createHorizontalGlue();
  toolBar.add(horizontalGlue);
  log(""String_Node_Str"" + mcu.getMCVersion());
  JLabel lblPlayerName1=new JLabel(""String_Node_Str"");
  toolBar.add(lblPlayerName1);
  lblAvatar=new JLabel();
  lblAvatar.setOpaque(true);
  lblAvatar.setHorizontalAlignment(JLabel.CENTER);
  lblAvatar.setVerticalAlignment(JLabel.CENTER);
  lblAvatar.setBackground(Color.WHITE);
  toolBar.add(lblAvatar);
  Component hStrut3=Box.createHorizontalStrut(5);
  toolBar.add(hStrut3);
  lblPlayerName2=new JLabel(""String_Node_Str"");
  toolBar.add(lblPlayerName2);
  JButton btnLogin=new JButton(""String_Node_Str"");
  btnLogin.setHorizontalAlignment(SwingConstants.TRAILING);
  btnLogin.setIcon(new ImageIcon(MainForm.class.getResource(""String_Node_Str"")));
  btnLogin.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      LoginForm lf=new LoginForm(window);
      lf.setVisible(true);
    }
  }
);
  Component horizontalStrut_2=Box.createHorizontalStrut(5);
  toolBar.add(horizontalStrut_2);
  toolBar.add(btnLogin);
  Component horizontalStrut_1=Box.createHorizontalStrut(5);
  toolBar.add(horizontalStrut_1);
  System.out.println(""String_Node_Str"");
  File serverFile=mcu.getArchiveFolder().resolve(""String_Node_Str"").toFile();
  String packUrl=Customization.getString(""String_Node_Str"");
  if (packUrl.equals(""String_Node_Str"")) {
    packUrl=""String_Node_Str"";
  }
  while (!serverFile.exists() && !(serverFile.length() > 0)) {
    if (packUrl.isEmpty()) {
      packUrl=(String)JOptionPane.showInputDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE,null,null,""String_Node_Str"");
      if (packUrl.isEmpty()) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
        System.exit(0);
      }
    }
    try {
      Document serverHeader=MCUpdater.readXmlFromUrl(packUrl);
      Element docEle=serverHeader.getDocumentElement();
      ServerList sl=new ServerList(docEle.getAttribute(""String_Node_Str""),docEle.getAttribute(""String_Node_Str""),packUrl,docEle.getAttribute(""String_Node_Str""),docEle.getAttribute(""String_Node_Str""),docEle.getAttribute(""String_Node_Str""),docEle.getAttribute(""String_Node_Str""),MCUpdater.parseBoolean(docEle.getAttribute(""String_Node_Str"")),docEle.getAttribute(""String_Node_Str""));
      List<ServerList> servers=new ArrayList<ServerList>();
      servers.add(sl);
      mcu.writeServerList(servers);
    }
 catch (    Exception x) {
      x.printStackTrace();
      packUrl=""String_Node_Str"";
    }
  }
  updateServerList();
  Properties instData=new Properties();
  try {
    instData.load(Files.newInputStream(mcu.getMCFolder().resolve(""String_Node_Str"")));
  }
 catch (  NoSuchFileException nsfe) {
    instData.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
catch (  IOException e1) {
    e1.printStackTrace();
  }
  int selectIndex=((SLListModel)serverList.getModel()).getEntryIdByTag(instData.getProperty(""String_Node_Str""));
  serverList.setSelectedIndex(selectIndex);
  initTray();
  if (config.getProperty(""String_Node_Str"").toLowerCase().equals(""String_Node_Str"")) {
    if (config.containsKey(""String_Node_Str"")) {
      String user=config.getProperty(""String_Node_Str"");
      String password=decrypt(config.getProperty(""String_Node_Str""));
      try {
        login(user,password);
      }
 catch (      MCLoginException e1) {
      }
    }
  }
}",0.9930349394839004
12348,"@Override public void run(){
  String javaBin=""String_Node_Str"";
  File binDir=(new File(jrePath)).toPath().resolve(""String_Node_Str"").toFile();
  if (binDir.exists()) {
    javaBin=binDir.toPath().resolve(""String_Node_Str"").toString();
  }
  StringBuilder sbClassPath=new StringBuilder();
  Path mcBinPath=parent.mcu.getMCFolder().resolve(""String_Node_Str"");
  sbClassPath.append(handleWhitespace(mcBinPath.resolve(""String_Node_Str"").toString()));
  sbClassPath.append(MCUpdater.cpDelimiter() + handleWhitespace(mcBinPath.resolve(""String_Node_Str"").toString()));
  sbClassPath.append(MCUpdater.cpDelimiter() + handleWhitespace(mcBinPath.resolve(""String_Node_Str"").toString()));
  sbClassPath.append(MCUpdater.cpDelimiter() + handleWhitespace(mcBinPath.resolve(""String_Node_Str"").toString()));
  String jlp=""String_Node_Str"" + handleWhitespace(mcBinPath.resolve(""String_Node_Str"").toString());
  String className=""String_Node_Str"";
  List<String> args=new ArrayList<String>();
  args.add(javaBin);
  args.add(""String_Node_Str"");
  args.add(""String_Node_Str"");
  args.add(""String_Node_Str"");
  args.add(""String_Node_Str"" + this.minMem);
  args.add(""String_Node_Str"" + this.maxMem);
  args.add(""String_Node_Str"");
  args.add(sbClassPath.toString());
  args.add(jlp);
  args.add(className);
  args.add(session.getUserName());
  args.add(session.getSessionId());
  if (!Version.isMasterBranch()) {
    parent.log(""String_Node_Str"");
    Iterator<String> itArgs=args.iterator();
    while (itArgs.hasNext()) {
      String entry=itArgs.next();
      parent.log(entry);
    }
  }
  ProcessBuilder pb=new ProcessBuilder(args);
  pb.redirectErrorStream(true);
  BufferedWriter buffWrite=null;
  try {
    buffWrite=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(output)));
  }
 catch (  FileNotFoundException e) {
    log(e.getMessage() + ""String_Node_Str"");
    e.printStackTrace();
  }
  try {
    task=pb.start();
    BufferedReader buffRead=new BufferedReader(new InputStreamReader(task.getInputStream()));
    String line;
    buffRead.mark(1024);
    final String firstLine=buffRead.readLine();
    setReady();
    if (firstLine == null || firstLine.startsWith(""String_Node_Str"") || firstLine.startsWith(""String_Node_Str"")) {
      log(""String_Node_Str"");
      StringBuilder err=new StringBuilder(firstLine);
      while ((line=buffRead.readLine()) != null) {
        err.append('\n');
        err.append(line);
      }
      log(err + ""String_Node_Str"");
      JOptionPane.showMessageDialog(null,err);
    }
 else {
      buffRead.reset();
      minimizeFrame();
      log(""String_Node_Str"");
      int counter=0;
      while ((line=buffRead.readLine()) != null) {
        if (buffWrite != null) {
          buffWrite.write(line);
          buffWrite.newLine();
          counter++;
          if (counter >= 20) {
            buffWrite.flush();
            counter=0;
          }
        }
 else {
          System.out.println(line);
        }
        if (line.length() > 0) {
          log(line + ""String_Node_Str"");
        }
      }
    }
    buffWrite.flush();
    buffWrite.close();
    restoreFrame();
    log(""String_Node_Str"" + (forceKilled ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
}","@Override public void run(){
  String javaBin=""String_Node_Str"";
  File binDir=(new File(jrePath)).toPath().resolve(""String_Node_Str"").toFile();
  if (binDir.exists()) {
    javaBin=binDir.toPath().resolve(""String_Node_Str"").toString();
  }
  StringBuilder sbClassPath=new StringBuilder();
  Path mcBinPath=parent.mcu.getMCFolder().resolve(""String_Node_Str"");
  sbClassPath.append(handleWhitespace(mcBinPath.resolve(""String_Node_Str"").toString()));
  sbClassPath.append(MCUpdater.cpDelimiter() + handleWhitespace(mcBinPath.resolve(""String_Node_Str"").toString()));
  sbClassPath.append(MCUpdater.cpDelimiter() + handleWhitespace(mcBinPath.resolve(""String_Node_Str"").toString()));
  sbClassPath.append(MCUpdater.cpDelimiter() + handleWhitespace(mcBinPath.resolve(""String_Node_Str"").toString()));
  String jlp=""String_Node_Str"" + mcBinPath.resolve(""String_Node_Str"").toString();
  String className=""String_Node_Str"";
  List<String> args=new ArrayList<String>();
  args.add(javaBin);
  args.add(""String_Node_Str"");
  args.add(""String_Node_Str"");
  args.add(""String_Node_Str"");
  args.add(""String_Node_Str"" + this.minMem);
  args.add(""String_Node_Str"" + this.maxMem);
  args.add(""String_Node_Str"");
  args.add(sbClassPath.toString());
  args.add(jlp);
  args.add(className);
  args.add(session.getUserName());
  args.add(session.getSessionId());
  if (!Version.isMasterBranch()) {
    parent.log(""String_Node_Str"");
    Iterator<String> itArgs=args.iterator();
    while (itArgs.hasNext()) {
      String entry=itArgs.next();
      parent.log(entry);
    }
  }
  ProcessBuilder pb=new ProcessBuilder(args);
  pb.redirectErrorStream(true);
  BufferedWriter buffWrite=null;
  try {
    buffWrite=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(output)));
  }
 catch (  FileNotFoundException e) {
    log(e.getMessage() + ""String_Node_Str"");
    e.printStackTrace();
  }
  try {
    task=pb.start();
    BufferedReader buffRead=new BufferedReader(new InputStreamReader(task.getInputStream()));
    String line;
    buffRead.mark(1024);
    final String firstLine=buffRead.readLine();
    setReady();
    if (firstLine == null || firstLine.startsWith(""String_Node_Str"") || firstLine.startsWith(""String_Node_Str"")) {
      log(""String_Node_Str"");
      StringBuilder err=new StringBuilder(firstLine);
      while ((line=buffRead.readLine()) != null) {
        err.append('\n');
        err.append(line);
      }
      log(err + ""String_Node_Str"");
      JOptionPane.showMessageDialog(null,err);
    }
 else {
      buffRead.reset();
      minimizeFrame();
      log(""String_Node_Str"");
      int counter=0;
      while ((line=buffRead.readLine()) != null) {
        if (buffWrite != null) {
          buffWrite.write(line);
          buffWrite.newLine();
          counter++;
          if (counter >= 20) {
            buffWrite.flush();
            counter=0;
          }
        }
 else {
          System.out.println(line);
        }
        if (line.length() > 0) {
          log(line + ""String_Node_Str"");
        }
      }
    }
    buffWrite.flush();
    buffWrite.close();
    restoreFrame();
    log(""String_Node_Str"" + (forceKilled ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
}",0.9972594397076736
12349,"private MCUpdater(){
  try {
    md5=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    MCFolder=System.getenv(""String_Node_Str"") + sep + ""String_Node_Str"";
    archiveFolder=new File(System.getenv(""String_Node_Str"") + sep + ""String_Node_Str"");
  }
 else   if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    MCFolder=System.getProperty(""String_Node_Str"") + sep + ""String_Node_Str""+ sep+ ""String_Node_Str""+ sep+ ""String_Node_Str"";
    archiveFolder=new File(System.getProperty(""String_Node_Str"") + sep + ""String_Node_Str""+ sep+ ""String_Node_Str""+ sep+ ""String_Node_Str"");
  }
 else {
    MCFolder=System.getProperty(""String_Node_Str"") + sep + ""String_Node_Str"";
    archiveFolder=new File(System.getProperty(""String_Node_Str"") + sep + ""String_Node_Str"");
  }
  defaultIcon=new ImageIcon(MCUpdater.class.getResource(""String_Node_Str""));
  try {
    DownloadCache.init(new File(archiveFolder,""String_Node_Str""));
  }
 catch (  IllegalArgumentException e) {
    _debug(""String_Node_Str"");
  }
}","private MCUpdater(){
  try {
    md5=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    MCFolder=System.getenv(""String_Node_Str"") + sep + ""String_Node_Str"";
    archiveFolder=new File(System.getenv(""String_Node_Str"") + sep + ""String_Node_Str"");
  }
 else   if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    MCFolder=System.getProperty(""String_Node_Str"") + sep + ""String_Node_Str""+ sep+ ""String_Node_Str""+ sep+ ""String_Node_Str"";
    archiveFolder=new File(System.getProperty(""String_Node_Str"") + sep + ""String_Node_Str""+ sep+ ""String_Node_Str""+ sep+ ""String_Node_Str"");
  }
 else {
    MCFolder=System.getProperty(""String_Node_Str"") + sep + ""String_Node_Str"";
    archiveFolder=new File(System.getProperty(""String_Node_Str"") + sep + ""String_Node_Str"");
  }
  defaultIcon=new ImageIcon(MCUpdater.class.getResource(""String_Node_Str""));
  try {
    DownloadCache.init(new File(archiveFolder,""String_Node_Str""));
  }
 catch (  IllegalArgumentException e) {
    _debug(""String_Node_Str"");
  }
  try {
    long start=System.currentTimeMillis();
    URL md5s=new URL(""String_Node_Str"");
    InputStreamReader input=new InputStreamReader(md5s.openStream());
    BufferedReader buffer=new BufferedReader(input);
    String currentLine=null;
    while (true) {
      currentLine=buffer.readLine();
      if (currentLine != null) {
        String entry[]=currentLine.split(""String_Node_Str"");
        versionMap.put(entry[0],entry[1]);
        newestMC=entry[1];
      }
 else {
        break;
      }
    }
    buffer.close();
    input.close();
    _debug(""String_Node_Str"" + (System.currentTimeMillis() - start) + ""String_Node_Str"");
    _debug(""String_Node_Str"" + newestMC);
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.7435489009238611
12350,"private String lookupHash(String hash){
  Map<String,String> map=new HashMap<String,String>();
  try {
    long start=System.currentTimeMillis();
    URL md5s=new URL(""String_Node_Str"");
    InputStreamReader input=new InputStreamReader(md5s.openStream());
    BufferedReader buffer=new BufferedReader(input);
    String currentLine=null;
    while (true) {
      currentLine=buffer.readLine();
      if (currentLine != null) {
        String entry[]=currentLine.split(""String_Node_Str"");
        map.put(entry[0],entry[1]);
        newestMC=entry[1];
      }
 else {
        break;
      }
    }
    buffer.close();
    input.close();
    _debug(""String_Node_Str"" + (System.currentTimeMillis() - start) + ""String_Node_Str"");
    _debug(""String_Node_Str"" + newestMC);
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  String out=map.get(hash);
  if (out == null) {
    out=""String_Node_Str"";
  }
  return out;
}","private String lookupHash(String hash){
  String out=versionMap.get(hash);
  if (out == null) {
    out=""String_Node_Str"";
  }
  return out;
}",0.2371681415929203
12351,"@Override public void run(){
  String javaBin=""String_Node_Str"";
  File binDir=new File(jrePath + MCUpdater.sep + ""String_Node_Str"");
  if (binDir.exists()) {
    javaBin=binDir + MCUpdater.sep + ""String_Node_Str"";
  }
  StringBuilder sbClassPath=new StringBuilder();
  String mcBinPath=parent.mcu.getMCFolder() + MCUpdater.sep + ""String_Node_Str""+ MCUpdater.sep;
  sbClassPath.append(MCUpdater.cpDelimiter() + mcBinPath + ""String_Node_Str"");
  sbClassPath.append(MCUpdater.cpDelimiter() + mcBinPath + ""String_Node_Str"");
  sbClassPath.append(MCUpdater.cpDelimiter() + mcBinPath + ""String_Node_Str"");
  sbClassPath.append(MCUpdater.cpDelimiter() + mcBinPath + ""String_Node_Str"");
  String jlp=""String_Node_Str"" + binDir + MCUpdater.sep+ ""String_Node_Str"";
  String className=""String_Node_Str"";
  List<String> args=new ArrayList<String>();
  args.add(javaBin);
  args.add(""String_Node_Str"");
  args.add(""String_Node_Str"");
  args.add(""String_Node_Str"");
  args.add(""String_Node_Str"" + this.minMem);
  args.add(""String_Node_Str"" + this.maxMem);
  args.add(""String_Node_Str"" + sbClassPath.toString());
  args.add(jlp);
  args.add(className);
  args.add(session.getUserName());
  args.add(session.getSessionId());
  ProcessBuilder pb=new ProcessBuilder(args);
  pb.redirectErrorStream(true);
  BufferedWriter buffWrite=null;
  try {
    buffWrite=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(output)));
  }
 catch (  FileNotFoundException e) {
    log(e.getMessage() + ""String_Node_Str"");
    e.printStackTrace();
  }
  try {
    task=pb.start();
    BufferedReader buffRead=new BufferedReader(new InputStreamReader(task.getInputStream()));
    String line;
    buffRead.mark(1024);
    final String firstLine=buffRead.readLine();
    setReady();
    if (firstLine == null || firstLine.startsWith(""String_Node_Str"") || firstLine.startsWith(""String_Node_Str"")) {
      log(""String_Node_Str"");
      StringBuilder err=new StringBuilder(firstLine);
      while ((line=buffRead.readLine()) != null) {
        err.append('\n');
        err.append(line);
      }
      log(err + ""String_Node_Str"");
      JOptionPane.showMessageDialog(null,err);
    }
 else {
      buffRead.reset();
      minimizeFrame();
      log(""String_Node_Str"");
      int counter=0;
      while ((line=buffRead.readLine()) != null) {
        if (buffWrite != null) {
          buffWrite.write(line);
          buffWrite.newLine();
          counter++;
          if (counter >= 20) {
            buffWrite.flush();
            counter=0;
          }
        }
 else {
          System.out.println(line);
        }
        if (line.length() > 0) {
          log(line + ""String_Node_Str"");
        }
      }
    }
    buffWrite.flush();
    buffWrite.close();
    restoreFrame();
    log(""String_Node_Str"" + (forceKilled ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
}","@Override public void run(){
  String javaBin=""String_Node_Str"";
  File binDir=new File(jrePath + MCUpdater.sep + ""String_Node_Str"");
  if (binDir.exists()) {
    javaBin=binDir + MCUpdater.sep + ""String_Node_Str"";
  }
  StringBuilder sbClassPath=new StringBuilder();
  String mcBinPath=parent.mcu.getMCFolder() + MCUpdater.sep + ""String_Node_Str""+ MCUpdater.sep;
  sbClassPath.append(mcBinPath + ""String_Node_Str"");
  sbClassPath.append(MCUpdater.cpDelimiter() + mcBinPath + ""String_Node_Str"");
  sbClassPath.append(MCUpdater.cpDelimiter() + mcBinPath + ""String_Node_Str"");
  sbClassPath.append(MCUpdater.cpDelimiter() + mcBinPath + ""String_Node_Str"");
  String jlp=""String_Node_Str"" + mcBinPath + MCUpdater.sep+ ""String_Node_Str"";
  String className=""String_Node_Str"";
  List<String> args=new ArrayList<String>();
  args.add(javaBin);
  args.add(""String_Node_Str"");
  args.add(""String_Node_Str"");
  args.add(""String_Node_Str"");
  args.add(""String_Node_Str"" + this.minMem);
  args.add(""String_Node_Str"" + this.maxMem);
  args.add(""String_Node_Str"");
  args.add(sbClassPath.toString());
  args.add(jlp);
  args.add(className);
  args.add(session.getUserName());
  args.add(session.getSessionId());
  ProcessBuilder pb=new ProcessBuilder(args);
  pb.redirectErrorStream(true);
  BufferedWriter buffWrite=null;
  try {
    buffWrite=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(output)));
  }
 catch (  FileNotFoundException e) {
    log(e.getMessage() + ""String_Node_Str"");
    e.printStackTrace();
  }
  try {
    task=pb.start();
    BufferedReader buffRead=new BufferedReader(new InputStreamReader(task.getInputStream()));
    String line;
    buffRead.mark(1024);
    final String firstLine=buffRead.readLine();
    setReady();
    if (firstLine == null || firstLine.startsWith(""String_Node_Str"") || firstLine.startsWith(""String_Node_Str"")) {
      log(""String_Node_Str"");
      StringBuilder err=new StringBuilder(firstLine);
      while ((line=buffRead.readLine()) != null) {
        err.append('\n');
        err.append(line);
      }
      log(err + ""String_Node_Str"");
      JOptionPane.showMessageDialog(null,err);
    }
 else {
      buffRead.reset();
      minimizeFrame();
      log(""String_Node_Str"");
      int counter=0;
      while ((line=buffRead.readLine()) != null) {
        if (buffWrite != null) {
          buffWrite.write(line);
          buffWrite.newLine();
          counter++;
          if (counter >= 20) {
            buffWrite.flush();
            counter=0;
          }
        }
 else {
          System.out.println(line);
        }
        if (line.length() > 0) {
          log(line + ""String_Node_Str"");
        }
      }
    }
    buffWrite.flush();
    buffWrite.close();
    restoreFrame();
    log(""String_Node_Str"" + (forceKilled ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
}",0.9616832021895312
12352,"private String getTextValue(Element ele,String tagName){
  String textVal=null;
  NodeList nl=ele.getElementsByTagName(tagName);
  if (nl != null && nl.getLength() > 0) {
    Element el=(Element)nl.item(0);
    textVal=el.getFirstChild().getNodeValue();
  }
  return textVal;
}","private String getTextValue(Element ele,String tagName){
  String textVal=null;
  NodeList nl=ele.getElementsByTagName(tagName);
  if (nl != null && nl.getLength() > 0) {
    Element el=(Element)nl.item(0);
    if (el != null) {
      Node node=el.getFirstChild();
      if (node != null)       textVal=node.getNodeValue();
    }
  }
  return textVal;
}",0.8031746031746032
12353,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  Identified other=(Identified)obj;
  if (annotations == null) {
    if (other.annotations != null)     return false;
  }
 else   if (!annotations.containsAll(other.annotations))   return false;
  if (identity == null) {
    if (other.identity != null)     return false;
  }
 else   if (!identity.equals(other.identity))   return false;
  if (persistentIdentity == null) {
    if (other.persistentIdentity != null)     return false;
  }
 else   if (!persistentIdentity.equals(other.persistentIdentity))   return false;
  if (version == null) {
    if (other.version != null)     return false;
  }
 else   if (!version.equals(other.version))   return false;
  if (description == null) {
    if (other.description != null)     return false;
  }
 else   if (!description.equals(other.description))   return false;
  if (displayId == null) {
    if (other.displayId != null)     return false;
  }
 else   if (!displayId.equals(other.displayId))   return false;
  if (name == null) {
    if (other.name != null)     return false;
  }
 else   if (!name.equals(other.name))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  Identified other=(Identified)obj;
  if (annotations == null) {
    if (other.annotations != null)     return false;
  }
 else   if (!annotations.containsAll(other.annotations))   return false;
 else   if (!other.annotations.containsAll(annotations))   return false;
  if (identity == null) {
    if (other.identity != null)     return false;
  }
 else   if (!identity.equals(other.identity))   return false;
  if (persistentIdentity == null) {
    if (other.persistentIdentity != null)     return false;
  }
 else   if (!persistentIdentity.equals(other.persistentIdentity))   return false;
  if (version == null) {
    if (other.version != null)     return false;
  }
 else   if (!version.equals(other.version))   return false;
  if (description == null) {
    if (other.description != null)     return false;
  }
 else   if (!description.equals(other.description))   return false;
  if (displayId == null) {
    if (other.displayId != null)     return false;
  }
 else   if (!displayId.equals(other.displayId))   return false;
  if (name == null) {
    if (other.name != null)     return false;
  }
 else   if (!name.equals(other.name))   return false;
  return true;
}",0.9719554360353438
12354,"/** 
 * Creates a child sequence constraint for this component definition with the given arguments, and then adds to this component definition's list of sequence constraints.
 * @param displayId the display ID of the sequence constraint to be created
 * @param restriction the structural restriction of the subject and object components
 * @param subjectURI the display ID of the subject component
 * @param objectURI the display ID of the object component
 * @return the created sequence constraint
 * @throws SBOLValidationException if any of the following SBOL validation rule was violated:10201, 10202, 10204, 10206, 11402, 11403, 11404, 11405, 11406, 11407, 11412.
 */
public SequenceConstraint createSequenceConstraint(String displayId,RestrictionType restriction,URI subjectURI,URI objectURI) throws SBOLValidationException {
  String URIprefix=this.getPersistentIdentity().toString();
  String version=this.getVersion();
  SequenceConstraint sc=createSequenceConstraint(createCompliantURI(URIprefix,displayId,version),restriction,subjectURI,objectURI);
  sc.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  sc.setDisplayId(displayId);
  sc.setVersion(version);
  return sc;
}","/** 
 * Creates a child sequence constraint for this component definition with the given arguments, and then adds to this component definition's list of sequence constraints.
 * @param displayId the display ID of the sequence constraint to be created
 * @param restriction the structural restriction of the subject and object components
 * @param subjectURI the display ID of the subject component
 * @param objectURI the display ID of the object component
 * @return the created sequence constraint
 * @throws SBOLValidationException if any of the following SBOL validation rule was violated:10201, 10202, 10204, 10206, 11402, 11403, 11404, 11405, 11406, 11407, 11412.
 */
public SequenceConstraint createSequenceConstraint(String displayId,RestrictionType restriction,URI subjectURI,URI objectURI) throws SBOLValidationException {
  String URIprefix=this.getPersistentIdentity().toString();
  String version=this.getVersion();
  if (this.getSBOLDocument() != null && this.getSBOLDocument().isCreateDefaults() && this.getComponent(subjectURI) == null && this.getSBOLDocument().getComponentDefinition(subjectURI) != null) {
    ComponentDefinition subject=this.getSBOLDocument().getComponentDefinition(subjectURI);
    Component subjectComp=this.getComponent(subject.getDisplayId());
    if (subjectComp == null) {
      subjectComp=this.createComponent(subject.getDisplayId(),AccessType.PUBLIC,subjectURI);
    }
    subjectURI=subjectComp.getIdentity();
  }
  if (this.getSBOLDocument() != null && this.getSBOLDocument().isCreateDefaults() && this.getComponent(objectURI) == null && this.getSBOLDocument().getComponentDefinition(objectURI) != null) {
    ComponentDefinition object=this.getSBOLDocument().getComponentDefinition(objectURI);
    Component objectComp=this.getComponent(object.getDisplayId());
    if (objectComp == null) {
      objectComp=this.createComponent(object.getDisplayId(),AccessType.PUBLIC,objectURI);
    }
    objectURI=objectComp.getIdentity();
  }
  SequenceConstraint sc=createSequenceConstraint(createCompliantURI(URIprefix,displayId,version),restriction,subjectURI,objectURI);
  sc.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  sc.setDisplayId(displayId);
  sc.setVersion(version);
  return sc;
}",0.6987951807228916
12355,"/** 
 * Returns the component definition matching the given identity URI from this SBOL document's list of component definitions.
 * @param componentDefinitionURI the given identity URI of the component definition to be retrieved
 * @return the matching component definition if present, or {@code null}otherwise.
 */
public ComponentDefinition getComponentDefinition(URI componentDefinitionURI){
  ComponentDefinition componentDefinition=componentDefinitions.get(componentDefinitionURI);
  if (componentDefinition == null) {
    for (    SynBioHubFrontend frontend : getRegistries()) {
      try {
        SBOLDocument document=frontend.getSBOL(componentDefinitionURI);
        if (document != null) {
          componentDefinition=document.getComponentDefinition(componentDefinitionURI);
          createCopy(document);
        }
      }
 catch (      SynBioHubException|SBOLValidationException e) {
        componentDefinition=null;
      }
    }
  }
  return componentDefinition;
}","/** 
 * Returns the component definition matching the given identity URI from this SBOL document's list of component definitions.
 * @param componentDefinitionURI the given identity URI of the component definition to be retrieved
 * @return the matching component definition if present, or {@code null}otherwise.
 */
public ComponentDefinition getComponentDefinition(URI componentDefinitionURI){
  ComponentDefinition componentDefinition=componentDefinitions.get(componentDefinitionURI);
  if (componentDefinition == null) {
    for (    SynBioHubFrontend frontend : getRegistries()) {
      try {
        SBOLDocument document=frontend.getSBOL(componentDefinitionURI);
        if (document != null) {
          componentDefinition=document.getComponentDefinition(componentDefinitionURI);
          createCopy(document);
        }
      }
 catch (      SynBioHubException|SBOLValidationException e) {
      }
    }
  }
  return componentDefinition;
}",0.9410548086866598
12356,"/** 
 * Returns the plan matching the given display identity URI from this SBOL document's list of plans.
 * @param planURI the identity URI of the top-level to be retrieved
 * @return the matching plan if present, or {@code null} otherwise.
 */
public Plan getPlan(URI planURI){
  Plan plan=plans.get(planURI);
  if (plan == null) {
    for (    SynBioHubFrontend frontend : getRegistries()) {
      try {
        SBOLDocument document=frontend.getSBOL(planURI);
        if (document != null) {
          plan=document.getPlan(planURI);
          createCopy(document);
        }
      }
 catch (      SynBioHubException|SBOLValidationException e) {
        plan=null;
      }
    }
  }
  return plan;
}","/** 
 * Returns the plan matching the given display identity URI from this SBOL document's list of plans.
 * @param planURI the identity URI of the top-level to be retrieved
 * @return the matching plan if present, or {@code null} otherwise.
 */
public Plan getPlan(URI planURI){
  Plan plan=plans.get(planURI);
  if (plan == null) {
    for (    SynBioHubFrontend frontend : getRegistries()) {
      try {
        SBOLDocument document=frontend.getSBOL(planURI);
        if (document != null) {
          plan=document.getPlan(planURI);
          createCopy(document);
        }
      }
 catch (      SynBioHubException|SBOLValidationException e) {
      }
    }
  }
  return plan;
}",0.950252343186734
12357,"/** 
 * Returns the implementation matching the given identity URI from this SBOL document's list of implementations.
 * @param implementationURI the given identity URI of the implementation to be retrieved
 * @return the matching implementation if present, or {@code null}otherwise.
 */
public Implementation getImplementation(URI implementationURI){
  Implementation implementation=implementations.get(implementationURI);
  if (implementation == null) {
    for (    SynBioHubFrontend frontend : getRegistries()) {
      try {
        SBOLDocument document=frontend.getSBOL(implementationURI);
        if (document != null) {
          implementation=document.getImplementation(implementationURI);
          createCopy(document);
        }
      }
 catch (      SynBioHubException|SBOLValidationException e) {
        implementation=null;
      }
    }
  }
  return implementation;
}","/** 
 * Returns the implementation matching the given identity URI from this SBOL document's list of implementations.
 * @param implementationURI the given identity URI of the implementation to be retrieved
 * @return the matching implementation if present, or {@code null}otherwise.
 */
public Implementation getImplementation(URI implementationURI){
  Implementation implementation=implementations.get(implementationURI);
  if (implementation == null) {
    for (    SynBioHubFrontend frontend : getRegistries()) {
      try {
        SBOLDocument document=frontend.getSBOL(implementationURI);
        if (document != null) {
          implementation=document.getImplementation(implementationURI);
          createCopy(document);
        }
      }
 catch (      SynBioHubException|SBOLValidationException e) {
      }
    }
  }
  return implementation;
}",0.9431361286616888
12358,"/** 
 * Returns the module definition matching the given identity URI from this SBOL document object's list of module definitions.
 * @param moduleDefinitionURI the give identity URI of the module definition to be retrieved
 * @return the matching module definition if present, or {@code null} otherwise
 */
public ModuleDefinition getModuleDefinition(URI moduleDefinitionURI){
  ModuleDefinition moduleDefinition=moduleDefinitions.get(moduleDefinitionURI);
  if (moduleDefinition == null) {
    for (    SynBioHubFrontend frontend : getRegistries()) {
      try {
        SBOLDocument document=frontend.getSBOL(moduleDefinitionURI);
        if (document != null) {
          moduleDefinition=document.getModuleDefinition(moduleDefinitionURI);
          createCopy(document);
        }
      }
 catch (      SynBioHubException|SBOLValidationException e) {
        moduleDefinition=null;
      }
    }
  }
  return moduleDefinition;
}","/** 
 * Returns the module definition matching the given identity URI from this SBOL document object's list of module definitions.
 * @param moduleDefinitionURI the give identity URI of the module definition to be retrieved
 * @return the matching module definition if present, or {@code null} otherwise
 */
public ModuleDefinition getModuleDefinition(URI moduleDefinitionURI){
  ModuleDefinition moduleDefinition=moduleDefinitions.get(moduleDefinitionURI);
  if (moduleDefinition == null) {
    for (    SynBioHubFrontend frontend : getRegistries()) {
      try {
        SBOLDocument document=frontend.getSBOL(moduleDefinitionURI);
        if (document != null) {
          moduleDefinition=document.getModuleDefinition(moduleDefinitionURI);
          createCopy(document);
        }
      }
 catch (      SynBioHubException|SBOLValidationException e) {
      }
    }
  }
  return moduleDefinition;
}",0.9427792915531336
12359,"/** 
 * Returns the sequence matching the given   {@code modelURI} from this SBOLdocument's list of sequences.
 * @param sequenceURI takes the given SequenceURI to retrieve the sequence from this SBOL document
 * @return the matching sequence if present, or {@code null} otherwise.
 */
public Sequence getSequence(URI sequenceURI){
  Sequence sequence=sequences.get(sequenceURI);
  if (sequence == null) {
    for (    SynBioHubFrontend frontend : getRegistries()) {
      try {
        SBOLDocument document=frontend.getSBOL(sequenceURI);
        if (document != null) {
          sequence=document.getSequence(sequenceURI);
          createCopy(document);
        }
      }
 catch (      SynBioHubException|SBOLValidationException e) {
        sequence=null;
      }
    }
  }
  return sequence;
}","/** 
 * Returns the sequence matching the given   {@code modelURI} from this SBOLdocument's list of sequences.
 * @param sequenceURI takes the given SequenceURI to retrieve the sequence from this SBOL document
 * @return the matching sequence if present, or {@code null} otherwise.
 */
public Sequence getSequence(URI sequenceURI){
  Sequence sequence=sequences.get(sequenceURI);
  if (sequence == null) {
    for (    SynBioHubFrontend frontend : getRegistries()) {
      try {
        SBOLDocument document=frontend.getSBOL(sequenceURI);
        if (document != null) {
          sequence=document.getSequence(sequenceURI);
          createCopy(document);
        }
      }
 catch (      SynBioHubException|SBOLValidationException e) {
      }
    }
  }
  return sequence;
}",0.9485714285714286
12360,"/** 
 * Returns the top-level matching the given identity URI from this SBOL document's lists of top-levels.
 * @param topLevelURI the identity URI of the top-level to be retrieved
 * @return the matching top-level if present, or {@code null} otherwise.
 */
public TopLevel getTopLevel(URI topLevelURI){
  TopLevel topLevel=getTopLevelLocalOnly(topLevelURI);
  if (topLevel == null) {
    for (    SynBioHubFrontend frontend : getRegistries()) {
      try {
        SBOLDocument document=frontend.getSBOL(topLevelURI);
        if (document != null) {
          topLevel=document.getTopLevel(topLevelURI);
          createCopy(document);
        }
      }
 catch (      SynBioHubException|SBOLValidationException e) {
        topLevel=null;
      }
    }
  }
  return topLevel;
}","/** 
 * Returns the top-level matching the given identity URI from this SBOL document's lists of top-levels.
 * @param topLevelURI the identity URI of the top-level to be retrieved
 * @return the matching top-level if present, or {@code null} otherwise.
 */
public TopLevel getTopLevel(URI topLevelURI){
  TopLevel topLevel=getTopLevelLocalOnly(topLevelURI);
  if (topLevel == null) {
    for (    SynBioHubFrontend frontend : getRegistries()) {
      try {
        SBOLDocument document=frontend.getSBOL(topLevelURI);
        if (document != null) {
          topLevel=document.getTopLevel(topLevelURI);
          createCopy(document);
        }
      }
 catch (      SynBioHubException|SBOLValidationException e) {
      }
    }
  }
  return topLevel;
}",0.9484670580560992
12361,"/** 
 * Returns the model matching the given identity URI from this SBOL document's list of models.
 * @param modelURI the identity URI of the model to be retrieved
 * @return the matching model if present, or {@code null} otherwise
 */
public Model getModel(URI modelURI){
  Model model=models.get(modelURI);
  if (model == null) {
    for (    SynBioHubFrontend frontend : getRegistries()) {
      try {
        SBOLDocument document=frontend.getSBOL(modelURI);
        if (document != null) {
          model=document.getModel(modelURI);
          createCopy(document);
        }
      }
 catch (      SynBioHubException|SBOLValidationException e) {
        model=null;
      }
    }
  }
  return model;
}","/** 
 * Returns the model matching the given identity URI from this SBOL document's list of models.
 * @param modelURI the identity URI of the model to be retrieved
 * @return the matching model if present, or {@code null} otherwise
 */
public Model getModel(URI modelURI){
  Model model=models.get(modelURI);
  if (model == null) {
    for (    SynBioHubFrontend frontend : getRegistries()) {
      try {
        SBOLDocument document=frontend.getSBOL(modelURI);
        if (document != null) {
          model=document.getModel(modelURI);
          createCopy(document);
        }
      }
 catch (      SynBioHubException|SBOLValidationException e) {
      }
    }
  }
  return model;
}",0.9498567335243552
12362,"/** 
 * Returns the generic top-level matching the given display identity URI from this SBOL document's list of generic top-levels.
 * @param genericTopLevelURI the identity URI of the top-level to be retrieved
 * @return the matching generic top-level if present, or {@code null} otherwise.
 */
public GenericTopLevel getGenericTopLevel(URI genericTopLevelURI){
  GenericTopLevel genericTopLevel=genericTopLevels.get(genericTopLevelURI);
  if (genericTopLevel == null) {
    for (    SynBioHubFrontend frontend : getRegistries()) {
      try {
        SBOLDocument document=frontend.getSBOL(genericTopLevelURI);
        if (document != null) {
          genericTopLevel=document.getGenericTopLevel(genericTopLevelURI);
          createCopy(document);
        }
      }
 catch (      SynBioHubException|SBOLValidationException e) {
        genericTopLevel=null;
      }
    }
  }
  return genericTopLevel;
}","/** 
 * Returns the generic top-level matching the given display identity URI from this SBOL document's list of generic top-levels.
 * @param genericTopLevelURI the identity URI of the top-level to be retrieved
 * @return the matching generic top-level if present, or {@code null} otherwise.
 */
public GenericTopLevel getGenericTopLevel(URI genericTopLevelURI){
  GenericTopLevel genericTopLevel=genericTopLevels.get(genericTopLevelURI);
  if (genericTopLevel == null) {
    for (    SynBioHubFrontend frontend : getRegistries()) {
      try {
        SBOLDocument document=frontend.getSBOL(genericTopLevelURI);
        if (document != null) {
          genericTopLevel=document.getGenericTopLevel(genericTopLevelURI);
          createCopy(document);
        }
      }
 catch (      SynBioHubException|SBOLValidationException e) {
      }
    }
  }
  return genericTopLevel;
}",0.9439461883408072
12363,"/** 
 * Returns the combinatorial derivation matching the given identity URI from this SBOL document's list of combinatorial derivations.
 * @param combinatorialDerivationURI the given identity URI of the combinatorial derivation to be retrieved
 * @return the matching combinatorial derivation if present, or {@code null}otherwise.
 */
public CombinatorialDerivation getCombinatorialDerivation(URI combinatorialDerivationURI){
  CombinatorialDerivation combinatorialDerivation=combinatorialDerivations.get(combinatorialDerivationURI);
  if (combinatorialDerivation == null) {
    for (    SynBioHubFrontend frontend : getRegistries()) {
      try {
        SBOLDocument document=frontend.getSBOL(combinatorialDerivationURI);
        if (document != null) {
          combinatorialDerivation=document.getCombinatorialDerivation(combinatorialDerivationURI);
          createCopy(document);
        }
      }
 catch (      SynBioHubException|SBOLValidationException e) {
        combinatorialDerivation=null;
      }
    }
  }
  return combinatorialDerivation;
}","/** 
 * Returns the combinatorial derivation matching the given identity URI from this SBOL document's list of combinatorial derivations.
 * @param combinatorialDerivationURI the given identity URI of the combinatorial derivation to be retrieved
 * @return the matching combinatorial derivation if present, or {@code null}otherwise.
 */
public CombinatorialDerivation getCombinatorialDerivation(URI combinatorialDerivationURI){
  CombinatorialDerivation combinatorialDerivation=combinatorialDerivations.get(combinatorialDerivationURI);
  if (combinatorialDerivation == null) {
    for (    SynBioHubFrontend frontend : getRegistries()) {
      try {
        SBOLDocument document=frontend.getSBOL(combinatorialDerivationURI);
        if (document != null) {
          combinatorialDerivation=document.getCombinatorialDerivation(combinatorialDerivationURI);
          createCopy(document);
        }
      }
 catch (      SynBioHubException|SBOLValidationException e) {
      }
    }
  }
  return combinatorialDerivation;
}",0.9394812680115274
12364,"/** 
 * @param doc
 * @param stringBuffer
 * @param URIPrefix
 * @throws IOException
 * @throws SBOLConversionException
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the following methods:<ul> <li> {@link SBOLDocument#createComponentDefinition(String,String,URI)},</li> <li>  {@link Identified#setAnnotations(List)},</li> <li>  {@link SequenceAnnotation#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,int,OrientationType)},</li> <li>  {@link SequenceAnnotation#setComponent(String)},</li> <li>  {@link SequenceAnnotation#addRange(String,int,int,OrientationType)},</li> <li>  {@link Range#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,OrientationType)},</li> <li>  {@link SBOLDocument#createSequence(String,String,String,URI)}, </li> <li>  {@link ComponentDefinition#addSequence(Sequence)}, or </li> <li>  {@link #createSubComponentDefinitions(SBOLDocument,ComponentDefinition,URI,String,String)}.</li> </ul>
 */
static void read(SBOLDocument doc,String stringBuffer,String URIPrefix,String displayId,String defaultVersion) throws IOException, SBOLConversionException, SBOLValidationException {
  so=new SequenceOntology();
  doc.addNamespace(URI.create(GBNAMESPACE),GBPREFIX);
  doc.addNamespace(URI.create(GBCONVNAMESPACE),GBCONVPREFIX);
  BufferedReader br=new BufferedReader(new StringReader(stringBuffer));
  String strLine;
  int featureCnt=0;
  int refCnt=0;
  nextLine=null;
  String labelType=""String_Node_Str"";
  URI lastRole=null;
  while (true) {
    boolean cont=false;
    String id=displayId;
    String accession=""String_Node_Str"";
    String version=defaultVersion;
    featureMode=false;
    originMode=false;
    StringBuilder sbSequence=new StringBuilder();
    String elements=null;
    String description=""String_Node_Str"";
    URI type=ComponentDefinition.DNA;
    ComponentDefinition topCD=null;
    List<Annotation> annotations=new ArrayList<Annotation>();
    List<Annotation> nestedAnnotations=null;
    Annotation annotation=null;
    boolean circular=false;
    int baseCount=0;
    while ((strLine=readGenBankLine(br)) != null) {
      strLine=strLine.trim();
      if (strLine.startsWith(""String_Node_Str"")) {
        if (id == null || id.equals(""String_Node_Str"")) {
          if (strLine.length() > 28) {
            id=strLine.substring(12,28).trim();
            annotation=new Annotation(new QName(GBNAMESPACE,LOCUS,GBPREFIX),id);
            id=URIcompliance.fixDisplayId(id);
            annotations.add(annotation);
          }
 else {
            id=""String_Node_Str"";
          }
        }
        if (strLine.length() > 40) {
          int startBaseCount=strLine.substring(29,40).lastIndexOf(""String_Node_Str"");
          baseCount=Integer.parseInt(strLine.substring(29 + startBaseCount,40).trim());
        }
        if (strLine.length() > 53) {
          String seqType=strLine.substring(44,53).trim();
          if (seqType.toUpperCase().contains(""String_Node_Str"")) {
            type=ComponentDefinition.RNA;
          }
          annotation=new Annotation(new QName(GBNAMESPACE,MOLECULE,GBPREFIX),seqType);
          annotations.add(annotation);
        }
        if (strLine.length() > 63) {
          String topology=strLine.substring(55,63).trim();
          if (topology.startsWith(""String_Node_Str"") || topology.startsWith(""String_Node_Str"")) {
            if (topology.startsWith(""String_Node_Str""))             circular=true;
          }
          String division=strLine.substring(64,67).trim();
          annotation=new Annotation(new QName(GBNAMESPACE,DIVISION,GBPREFIX),division);
          annotations.add(annotation);
        }
        if (strLine.length() > 79) {
          String date=strLine.substring(68,79).trim();
          annotation=new Annotation(new QName(GBNAMESPACE,DATE,GBPREFIX),date);
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        if (strSplit.length > 1) {
          accession=strSplit[1];
          if (accession.length() > 1) {
            id=accession;
            id=URIcompliance.fixDisplayId(id);
          }
        }
        if (strSplit.length > 3) {
          if (strSplit[2].equals(""String_Node_Str"")) {
            annotation=new Annotation(new QName(GBNAMESPACE,REGION,GBPREFIX),strSplit[3]);
            annotations.add(annotation);
          }
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        if (strSplit.length > 1) {
          if (!accession.equals(strSplit[1])) {
            if (strSplit[1].split(""String_Node_Str"").length > 1) {
              version=strSplit[1].split(""String_Node_Str"")[strSplit[1].split(""String_Node_Str"").length - 1];
            }
            String vId=strSplit[1].split(""String_Node_Str"")[0];
            if (!accession.equals(vId)) {
              throw new SBOLConversionException(""String_Node_Str"");
            }
          }
        }
        if (strSplit.length > 2) {
          annotation=new Annotation(new QName(GBNAMESPACE,GINUMBER,GBPREFIX),strSplit[2]);
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,KEYWORDS,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,SOURCE,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,ORGANISM,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        nestedAnnotations=new ArrayList<Annotation>();
        Annotation labelAnnotation=new Annotation(new QName(GBNAMESPACE,LABEL,GBPREFIX),annotationStr);
        nestedAnnotations.add(labelAnnotation);
        URI nestedURI=URI.create(URIPrefix + id + ""String_Node_Str""+ refCnt);
        refCnt++;
        annotation=new Annotation(new QName(GBNAMESPACE,REFERENCE,GBPREFIX),new QName(GBNAMESPACE,NESTEDREFERENCE,GBPREFIX),nestedURI,nestedAnnotations);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,AUTHORS,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,TITLE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,JOURNAL,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,MEDLINE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,PUBMED,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
        Annotation pubMedAnnotation=new Annotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),annotationStr);
        annotations.add(pubMedAnnotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,COMMENT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,BASECOUNT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        topCD=doc.createComponentDefinition(id,version,type);
        if (circular) {
          topCD.addType(SequenceOntology.CIRCULAR);
        }
 else {
          topCD.addType(SequenceOntology.LINEAR);
        }
        topCD.addRole(SequenceOntology.ENGINEERED_REGION);
        if (!""String_Node_Str"".equals(description)) {
          topCD.setDescription(description);
        }
        topCD.setAnnotations(annotations);
        featureMode=true;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        originMode=true;
        featureMode=false;
      }
 else {
        if (featureMode) {
          if (strLine.startsWith(""String_Node_Str"")) {
            String tag=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
            String value=""String_Node_Str"";
            if ((-1) != strLine.indexOf('=')) {
              String[] splitStr=strLine.split(""String_Node_Str"");
              tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
              value=splitStr[1];
            }
            StringBuilder sbValue=new StringBuilder();
            sbValue.append(value);
            if (value.startsWith(""String_Node_Str"") && !value.endsWith(""String_Node_Str"")) {
              while (true) {
                strLine=readGenBankLine(br).trim();
                sbValue.append(strLine);
                if (strLine.endsWith(""String_Node_Str"")) {
                  break;
                }
              }
            }
            SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
            if (sa != null) {
              if (tag.equals(""String_Node_Str"")) {
                sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                labelType=""String_Node_Str"";
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"")&& !labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"")&& !labelType.equals(""String_Node_Str"")&& !labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
              tag=fixTag(tag);
              if (value.startsWith(""String_Node_Str"")) {
                value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
 else {
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
              sa.addAnnotation(annotation);
            }
          }
 else {
            strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
            String[] strSplit=strLine.split(""String_Node_Str"");
            String featureType=strSplit[0];
            URI role=convertGenBanktoSO(featureType);
            String range=strSplit[1];
            boolean outerComplement=false;
            OrientationType orientation=OrientationType.INLINE;
            if (range.startsWith(""String_Node_Str"")) {
              outerComplement=true;
              orientation=OrientationType.REVERSECOMPLEMENT;
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            }
            if (range.startsWith(""String_Node_Str"") || range.startsWith(""String_Node_Str"")) {
              String multiType=""String_Node_Str"";
              if (range.startsWith(""String_Node_Str"")) {
                multiType=""String_Node_Str"";
              }
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              String[] ranges=range.split(""String_Node_Str"");
              int rangeCnt=0;
              SequenceAnnotation sa=null;
              for (              String r : ranges) {
                orientation=OrientationType.INLINE;
                if (r.startsWith(""String_Node_Str"") || outerComplement) {
                  orientation=OrientationType.REVERSECOMPLEMENT;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean startLessThan=false;
                boolean endGreaterThan=false;
                if (r.contains(""String_Node_Str"")) {
                  startLessThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                if (r.contains(""String_Node_Str"")) {
                  endGreaterThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean singleBaseRange=false;
                String[] rangeSplit=null;
                if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                  rangeSplit=r.split(""String_Node_Str"");
                  singleBaseRange=true;
                }
 else {
                  rangeSplit=r.split(""String_Node_Str"");
                }
                int start=Integer.parseInt(rangeSplit[0]);
                int end=Integer.parseInt(rangeSplit[1]);
                Range newRange=null;
                if (rangeCnt == 0) {
                  sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
                  sa.setName(featureType);
                  sa.addRole(role);
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,MULTIRANGETYPE,GBCONVPREFIX),multiType);
                  sa.addAnnotation(annotation);
                  newRange=(Range)sa.getLocation(""String_Node_Str"" + rangeCnt);
                }
 else                 if (sa != null) {
                  newRange=sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
                }
                if (outerComplement) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + ((ranges.length - 1) - rangeCnt));
                }
 else {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + rangeCnt);
                }
                newRange.addAnnotation(annotation);
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                rangeCnt++;
              }
            }
 else             if (range.contains(""String_Node_Str"")) {
              String[] rangeSplit=range.split(""String_Node_Str"");
              int at=Integer.parseInt(rangeSplit[0]);
              SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
              sa.addRole(role);
              sa.setName(featureType);
            }
 else {
              boolean startLessThan=false;
              boolean endGreaterThan=false;
              if (range.contains(""String_Node_Str"")) {
                startLessThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              if (range.contains(""String_Node_Str"")) {
                endGreaterThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean singleBaseRange=false;
              String[] rangeSplit=null;
              if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                rangeSplit=range.split(""String_Node_Str"");
                singleBaseRange=true;
              }
 else {
                rangeSplit=range.split(""String_Node_Str"");
              }
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[0]);
              if (rangeSplit.length > 1) {
                end=Integer.parseInt(rangeSplit[1]);
              }
              if (start > end && circular) {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,baseCount,orientation);
                sa.addRole(role);
                sa.setName(featureType);
                annotation=new Annotation(new QName(GBCONVNAMESPACE,STRADLESORIGIN,GBCONVPREFIX),""String_Node_Str"");
                sa.addAnnotation(annotation);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                newRange=sa.addRange(""String_Node_Str"",1,end,orientation);
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
 else {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
                sa.addRole(role);
                sa.setName(featureType);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
            }
            labelType=""String_Node_Str"";
            lastRole=role;
            featureCnt++;
          }
        }
 else         if (originMode) {
          if (featureCnt == 1) {
            topCD.clearRoles();
            topCD.addRole(lastRole);
          }
          if (elements == null) {
            elements=new String(""String_Node_Str"");
          }
          if (strLine.startsWith(""String_Node_Str"")) {
            cont=true;
            break;
          }
          String[] strSplit=strLine.split(""String_Node_Str"");
          for (int i=1; i < strSplit.length; i++) {
            sbSequence.append(strSplit[i]);
          }
        }
        cont=false;
      }
    }
    if (topCD != null) {
      Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,sbSequence.toString(),Sequence.IUPAC_DNA);
      topCD.addSequence(sequence);
      createSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);
    }
    if (!cont)     break;
  }
  br.close();
}","/** 
 * @param doc
 * @param stringBuffer
 * @param URIPrefix
 * @throws IOException
 * @throws SBOLConversionException
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the following methods:<ul> <li> {@link SBOLDocument#createComponentDefinition(String,String,URI)},</li> <li>  {@link Identified#setAnnotations(List)},</li> <li>  {@link SequenceAnnotation#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,int,OrientationType)},</li> <li>  {@link SequenceAnnotation#setComponent(String)},</li> <li>  {@link SequenceAnnotation#addRange(String,int,int,OrientationType)},</li> <li>  {@link Range#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,OrientationType)},</li> <li>  {@link SBOLDocument#createSequence(String,String,String,URI)}, </li> <li>  {@link ComponentDefinition#addSequence(Sequence)}, or </li> <li>  {@link #createSubComponentDefinitions(SBOLDocument,ComponentDefinition,URI,String,String)}.</li> </ul>
 */
static void read(SBOLDocument doc,String stringBuffer,String URIPrefix,String displayId,String defaultVersion) throws IOException, SBOLConversionException, SBOLValidationException {
  so=new SequenceOntology();
  doc.addNamespace(URI.create(GBNAMESPACE),GBPREFIX);
  doc.addNamespace(URI.create(GBCONVNAMESPACE),GBCONVPREFIX);
  BufferedReader br=new BufferedReader(new StringReader(stringBuffer));
  String strLine;
  int featureCnt=0;
  int refCnt=0;
  nextLine=null;
  String labelType=""String_Node_Str"";
  URI lastRole=null;
  while (true) {
    boolean cont=false;
    String id=displayId;
    String accession=""String_Node_Str"";
    String version=defaultVersion;
    featureMode=false;
    originMode=false;
    StringBuilder sbSequence=new StringBuilder();
    String elements=null;
    String description=""String_Node_Str"";
    URI type=ComponentDefinition.DNA;
    ComponentDefinition topCD=null;
    List<Annotation> annotations=new ArrayList<Annotation>();
    List<Annotation> nestedAnnotations=null;
    Annotation annotation=null;
    boolean circular=false;
    int baseCount=0;
    while ((strLine=readGenBankLine(br)) != null) {
      strLine=strLine.trim();
      if (strLine.startsWith(""String_Node_Str"")) {
        if (id == null || id.equals(""String_Node_Str"")) {
          if (strLine.length() > 28) {
            id=strLine.substring(12,28).trim();
            annotation=new Annotation(new QName(GBNAMESPACE,LOCUS,GBPREFIX),id);
            id=URIcompliance.fixDisplayId(id);
            annotations.add(annotation);
          }
 else {
            id=""String_Node_Str"";
          }
        }
        if (strLine.length() > 40) {
          int startBaseCount=strLine.substring(29,40).lastIndexOf(""String_Node_Str"");
          baseCount=Integer.parseInt(strLine.substring(29 + startBaseCount,40).trim());
        }
        if (strLine.length() > 53) {
          String seqType=strLine.substring(44,53).trim();
          if (seqType.toUpperCase().contains(""String_Node_Str"")) {
            type=ComponentDefinition.RNA;
          }
          annotation=new Annotation(new QName(GBNAMESPACE,MOLECULE,GBPREFIX),seqType);
          annotations.add(annotation);
        }
        if (strLine.length() > 63) {
          String topology=strLine.substring(55,63).trim();
          if (topology.startsWith(""String_Node_Str"") || topology.startsWith(""String_Node_Str"")) {
            if (topology.startsWith(""String_Node_Str""))             circular=true;
          }
          String division=strLine.substring(64,67).trim();
          annotation=new Annotation(new QName(GBNAMESPACE,DIVISION,GBPREFIX),division);
          annotations.add(annotation);
        }
        if (strLine.length() > 79) {
          String date=strLine.substring(68,79).trim();
          annotation=new Annotation(new QName(GBNAMESPACE,DATE,GBPREFIX),date);
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        if (strSplit.length > 1) {
          accession=strSplit[1];
          if (accession.length() > 1) {
            id=accession;
            id=URIcompliance.fixDisplayId(id);
          }
        }
        if (strSplit.length > 3) {
          if (strSplit[2].equals(""String_Node_Str"")) {
            annotation=new Annotation(new QName(GBNAMESPACE,REGION,GBPREFIX),strSplit[3]);
            annotations.add(annotation);
          }
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        if (strSplit.length > 1) {
          if (!accession.equals(strSplit[1])) {
            if (strSplit[1].split(""String_Node_Str"").length > 1) {
              version=strSplit[1].split(""String_Node_Str"")[strSplit[1].split(""String_Node_Str"").length - 1];
            }
            if (strSplit[1].split(""String_Node_Str"").length > 0) {
              String vId=strSplit[1].split(""String_Node_Str"")[0];
              if (!accession.equals(vId)) {
                throw new SBOLConversionException(""String_Node_Str"");
              }
            }
          }
        }
        if (strSplit.length > 2) {
          annotation=new Annotation(new QName(GBNAMESPACE,GINUMBER,GBPREFIX),strSplit[2]);
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,KEYWORDS,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,SOURCE,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,ORGANISM,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        nestedAnnotations=new ArrayList<Annotation>();
        Annotation labelAnnotation=new Annotation(new QName(GBNAMESPACE,LABEL,GBPREFIX),annotationStr);
        nestedAnnotations.add(labelAnnotation);
        URI nestedURI=URI.create(URIPrefix + id + ""String_Node_Str""+ refCnt);
        refCnt++;
        annotation=new Annotation(new QName(GBNAMESPACE,REFERENCE,GBPREFIX),new QName(GBNAMESPACE,NESTEDREFERENCE,GBPREFIX),nestedURI,nestedAnnotations);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,AUTHORS,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,TITLE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,JOURNAL,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,MEDLINE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,PUBMED,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
        Annotation pubMedAnnotation=new Annotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),annotationStr);
        annotations.add(pubMedAnnotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,COMMENT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,BASECOUNT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        topCD=doc.createComponentDefinition(id,version,type);
        if (circular) {
          topCD.addType(SequenceOntology.CIRCULAR);
        }
 else {
          topCD.addType(SequenceOntology.LINEAR);
        }
        topCD.addRole(SequenceOntology.ENGINEERED_REGION);
        if (!""String_Node_Str"".equals(description)) {
          topCD.setDescription(description);
        }
        topCD.setAnnotations(annotations);
        featureMode=true;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        originMode=true;
        featureMode=false;
      }
 else {
        if (featureMode) {
          if (strLine.startsWith(""String_Node_Str"")) {
            String tag=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
            String value=""String_Node_Str"";
            if ((-1) != strLine.indexOf('=')) {
              String[] splitStr=strLine.split(""String_Node_Str"");
              tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
              value=splitStr[1];
            }
            StringBuilder sbValue=new StringBuilder();
            sbValue.append(value);
            if (value.startsWith(""String_Node_Str"") && !value.endsWith(""String_Node_Str"")) {
              while (true) {
                strLine=readGenBankLine(br).trim();
                sbValue.append(strLine);
                if (strLine.endsWith(""String_Node_Str"")) {
                  break;
                }
              }
            }
            SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
            if (sa != null) {
              if (tag.equals(""String_Node_Str"")) {
                sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                labelType=""String_Node_Str"";
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"")&& !labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"")&& !labelType.equals(""String_Node_Str"")&& !labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
              tag=fixTag(tag);
              if (value.startsWith(""String_Node_Str"")) {
                value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
 else {
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
              sa.addAnnotation(annotation);
            }
          }
 else {
            strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
            String[] strSplit=strLine.split(""String_Node_Str"");
            String featureType=strSplit[0];
            URI role=convertGenBanktoSO(featureType);
            String range=strSplit[1];
            boolean outerComplement=false;
            OrientationType orientation=OrientationType.INLINE;
            if (range.startsWith(""String_Node_Str"")) {
              outerComplement=true;
              orientation=OrientationType.REVERSECOMPLEMENT;
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            }
            if (range.startsWith(""String_Node_Str"") || range.startsWith(""String_Node_Str"")) {
              String multiType=""String_Node_Str"";
              if (range.startsWith(""String_Node_Str"")) {
                multiType=""String_Node_Str"";
              }
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              String[] ranges=range.split(""String_Node_Str"");
              int rangeCnt=0;
              SequenceAnnotation sa=null;
              for (              String r : ranges) {
                orientation=OrientationType.INLINE;
                if (r.startsWith(""String_Node_Str"") || outerComplement) {
                  orientation=OrientationType.REVERSECOMPLEMENT;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean startLessThan=false;
                boolean endGreaterThan=false;
                if (r.contains(""String_Node_Str"")) {
                  startLessThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                if (r.contains(""String_Node_Str"")) {
                  endGreaterThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean singleBaseRange=false;
                String[] rangeSplit=null;
                if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                  rangeSplit=r.split(""String_Node_Str"");
                  singleBaseRange=true;
                }
 else {
                  rangeSplit=r.split(""String_Node_Str"");
                }
                int start=Integer.parseInt(rangeSplit[0]);
                int end=Integer.parseInt(rangeSplit[1]);
                Range newRange=null;
                if (rangeCnt == 0) {
                  sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
                  sa.setName(featureType);
                  sa.addRole(role);
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,MULTIRANGETYPE,GBCONVPREFIX),multiType);
                  sa.addAnnotation(annotation);
                  newRange=(Range)sa.getLocation(""String_Node_Str"" + rangeCnt);
                }
 else                 if (sa != null) {
                  newRange=sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
                }
                if (outerComplement) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + ((ranges.length - 1) - rangeCnt));
                }
 else {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + rangeCnt);
                }
                newRange.addAnnotation(annotation);
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                rangeCnt++;
              }
            }
 else             if (range.contains(""String_Node_Str"")) {
              String[] rangeSplit=range.split(""String_Node_Str"");
              int at=Integer.parseInt(rangeSplit[0]);
              SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
              sa.addRole(role);
              sa.setName(featureType);
            }
 else {
              boolean startLessThan=false;
              boolean endGreaterThan=false;
              if (range.contains(""String_Node_Str"")) {
                startLessThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              if (range.contains(""String_Node_Str"")) {
                endGreaterThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean singleBaseRange=false;
              String[] rangeSplit=null;
              if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                rangeSplit=range.split(""String_Node_Str"");
                singleBaseRange=true;
              }
 else {
                rangeSplit=range.split(""String_Node_Str"");
              }
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[0]);
              if (rangeSplit.length > 1) {
                end=Integer.parseInt(rangeSplit[1]);
              }
              if (start > end && circular) {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,baseCount,orientation);
                sa.addRole(role);
                sa.setName(featureType);
                annotation=new Annotation(new QName(GBCONVNAMESPACE,STRADLESORIGIN,GBCONVPREFIX),""String_Node_Str"");
                sa.addAnnotation(annotation);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                newRange=sa.addRange(""String_Node_Str"",1,end,orientation);
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
 else {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
                sa.addRole(role);
                sa.setName(featureType);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
            }
            labelType=""String_Node_Str"";
            lastRole=role;
            featureCnt++;
          }
        }
 else         if (originMode) {
          if (featureCnt == 1) {
            topCD.clearRoles();
            topCD.addRole(lastRole);
          }
          if (elements == null) {
            elements=new String(""String_Node_Str"");
          }
          if (strLine.startsWith(""String_Node_Str"")) {
            cont=true;
            break;
          }
          String[] strSplit=strLine.split(""String_Node_Str"");
          for (int i=1; i < strSplit.length; i++) {
            sbSequence.append(strSplit[i]);
          }
        }
        cont=false;
      }
    }
    if (topCD != null) {
      Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,sbSequence.toString(),Sequence.IUPAC_DNA);
      topCD.addSequence(sequence);
      createSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);
    }
    if (!cont)     break;
  }
  br.close();
}",0.9976020220786797
12365,"void copy(Component component) throws SBOLValidationException {
  ((ComponentInstance)this).copy((ComponentInstance)component);
  if (!component.getMapsTos().isEmpty()) {
    for (    MapsTo mapsTo : component.getMapsTos()) {
      String displayId=URIcompliance.findDisplayId(mapsTo);
      String localDisplayId=URIcompliance.findDisplayId(mapsTo.getLocal());
      MapsTo newMapsTo=this.createMapsTo(displayId,mapsTo.getRefinement(),localDisplayId,mapsTo.getRemoteURI());
      newMapsTo.copy(mapsTo);
    }
  }
  for (  URI role : component.getRoles()) {
    this.addRole(URI.create(role.toString()));
  }
}","void copy(Component component) throws SBOLValidationException {
  ((ComponentInstance)this).copy((ComponentInstance)component);
  this.mapsTos=new HashMap<>();
  for (  URI role : component.getRoles()) {
    this.addRole(URI.create(role.toString()));
  }
}",0.3760092272202999
12366,"void copy(FunctionalComponent functionalComponent) throws SBOLValidationException {
  ((ComponentInstance)this).copy((ComponentInstance)functionalComponent);
  this.mapsTos=new HashMap<>();
  if (!functionalComponent.getMapsTos().isEmpty()) {
    for (    MapsTo mapsTo : functionalComponent.getMapsTos()) {
      String displayId=URIcompliance.findDisplayId(mapsTo);
      String localDisplayId=URIcompliance.findDisplayId(mapsTo.getLocal());
      MapsTo newMapsTo=this.createMapsTo(displayId,mapsTo.getRefinement(),localDisplayId,mapsTo.getRemoteURI());
      newMapsTo.copy(mapsTo);
    }
  }
}","void copy(FunctionalComponent functionalComponent) throws SBOLValidationException {
  ((ComponentInstance)this).copy((ComponentInstance)functionalComponent);
  this.mapsTos=new HashMap<>();
}",0.4841571609632446
12367,"@SuppressWarnings(""String_Node_Str"") private static Attachment parseAttachment(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  URI source=null;
  URI format=null;
  Long size=null;
  String hash=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Attachment.source)) {
      if (!(namedProperty.getValue() instanceof Literal) || source != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      source=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Attachment.format)) {
      if (!(namedProperty.getValue() instanceof Literal) || format != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      format=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Attachment.size)) {
      if (!(namedProperty.getValue() instanceof Literal) || size != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      size=Long.valueOf(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Attachment.hash)) {
      if (!(namedProperty.getValue() instanceof Literal) || hash != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      hash=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Attachment a=new Attachment(topLevel.getIdentity(),source);
  if (persistentIdentity != null)   a.setPersistentIdentity(persistentIdentity);
  if (version != null)   a.setVersion(version);
  if (displayId != null)   a.setDisplayId(displayId);
  if (name != null)   a.setName(name);
  if (description != null)   a.setDescription(description);
  a.setWasDerivedFroms(wasDerivedFroms);
  a.setWasGeneratedBys(wasGeneratedBys);
  if (!annotations.isEmpty())   a.setAnnotations(annotations);
  if (format != null)   a.setFormat(format);
  if (size != null)   a.setSize(size);
  if (hash != null)   a.setHash(hash);
  Attachment oldA=SBOLDoc.getAttachment(topLevel.getIdentity());
  if (oldA == null) {
    SBOLDoc.addAttachment(a);
  }
 else {
    if (!a.equals(oldA)) {
      throw new SBOLValidationException(""String_Node_Str"",a);
    }
  }
  return a;
}","@SuppressWarnings(""String_Node_Str"") private static Attachment parseAttachment(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  URI source=null;
  URI format=null;
  Long size=null;
  String hash=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Attachment.source)) {
      if (!(namedProperty.getValue() instanceof Literal) || source != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      source=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Attachment.format)) {
      if (!(namedProperty.getValue() instanceof Literal) || format != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      format=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Attachment.size)) {
      if (!(namedProperty.getValue() instanceof Literal) || size != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      size=Long.valueOf(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Attachment.hash)) {
      if (!(namedProperty.getValue() instanceof Literal) || hash != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      hash=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Attachment a=new Attachment(topLevel.getIdentity(),source);
  if (persistentIdentity != null)   a.setPersistentIdentity(persistentIdentity);
  if (version != null)   a.setVersion(version);
  if (displayId != null)   a.setDisplayId(displayId);
  if (name != null)   a.setName(name);
  if (description != null)   a.setDescription(description);
  a.setWasDerivedFroms(wasDerivedFroms);
  a.setWasGeneratedBys(wasGeneratedBys);
  a.setAttachments(attachments);
  if (!annotations.isEmpty())   a.setAnnotations(annotations);
  if (format != null)   a.setFormat(format);
  if (size != null)   a.setSize(size);
  if (hash != null)   a.setHash(hash);
  Attachment oldA=SBOLDoc.getAttachment(topLevel.getIdentity());
  if (oldA == null) {
    SBOLDoc.addAttachment(a);
  }
 else {
    if (!a.equals(oldA)) {
      throw new SBOLValidationException(""String_Node_Str"",a);
    }
  }
  return a;
}",0.997722410104217
12368,"/** 
 * @param SBOLDoc
 * @param topLevel
 * @param nested
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10202, 10203, 10204, 10206, 10208, 10212, 10213, 11602, 11607 or</li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link #parseModule(NestedDocument,Map)},</li> <li>  {@link #parseInteraction(NestedDocument,Map)},</li> <li>  {@link #parseFunctionalComponent(NestedDocument,Map)},</li>	 <li>  {@link ModuleDefinition#ModuleDefinition(URI)}, </li> <li>  {@link ModuleDefinition#setDisplayId(String)}, </li> <li>  {@link ModuleDefinition#setVersion(String)}, </li> <li>  {@link ModuleDefinition#setFunctionalComponents(Set)}, </li> <li>  {@link ModuleDefinition#setInteractions(Set)}, </li> <li>  {@link ModuleDefinition#setModels(Set)}, </li> <li>  {@link ModuleDefinition#setModules(Set)}, </li> <li>  {@link ModuleDefinition#setWasDerivedFrom(URI)}, </li> <li>  {@link ModuleDefinition#setAnnotations(List)}, or</li> <li>  {@link SBOLDocument#addModuleDefinition(ModuleDefinition)}.</li> </ul> </li> </ul>
 */
@SuppressWarnings(""String_Node_Str"") private static ModuleDefinition parseModuleDefinition(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel,Map<URI,NestedDocument<QName>> nested) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  Set<URI> roles=new HashSet<>();
  Set<URI> models=new HashSet<>();
  Set<FunctionalComponent> functionalComponents=new HashSet<>();
  Set<Interaction> interactions=new HashSet<>();
  Set<Module> subModules=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.roles)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasModule) || namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasSubModule)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        NestedDocument<QName> nestedDocument=((NestedDocument<QName>)namedProperty.getValue());
        if (nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.Module.Module)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        subModules.add(parseModule(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        NestedDocument<QName> nestedDocument=nested.get(uri);
        if (nestedDocument == null || nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.Module.Module)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        subModules.add(parseModule(SBOLDoc,nested.get(uri),nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasInteractions)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        NestedDocument<QName> nestedDocument=((NestedDocument<QName>)namedProperty.getValue());
        if (nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.Interaction.Interaction)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        interactions.add(parseInteraction((NestedDocument<QName>)namedProperty.getValue(),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        NestedDocument<QName> nestedDocument=nested.get(uri);
        if (nestedDocument == null || nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.Interaction.Interaction)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        interactions.add(parseInteraction(nested.get(uri),nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasfunctionalComponent) || namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasComponent)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        NestedDocument<QName> nestedDocument=((NestedDocument<QName>)namedProperty.getValue());
        if (nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.FunctionalComponent.FunctionalComponent)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        functionalComponents.add(parseFunctionalComponent(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue(),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        NestedDocument<QName> nestedDocument=nested.get(uri);
        if (nestedDocument == null || nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.FunctionalComponent.FunctionalComponent)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        functionalComponents.add(parseFunctionalComponent(SBOLDoc,nested.get(uri),nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasModels)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        models.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Model.Model)) {
          Model model=parseModel(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          models.add(model.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  ModuleDefinition moduleDefinition=new ModuleDefinition(topLevel.getIdentity());
  if (!roles.isEmpty())   moduleDefinition.setRoles(roles);
  if (persistentIdentity != null)   moduleDefinition.setPersistentIdentity(persistentIdentity);
  if (version != null)   moduleDefinition.setVersion(version);
  if (displayId != null)   moduleDefinition.setDisplayId(displayId);
  if (!functionalComponents.isEmpty())   moduleDefinition.setFunctionalComponents(functionalComponents);
  if (!interactions.isEmpty())   moduleDefinition.setInteractions(interactions);
  if (!models.isEmpty())   moduleDefinition.setModels(models);
  if (!subModules.isEmpty())   moduleDefinition.setModules(subModules);
  if (name != null)   moduleDefinition.setName(name);
  if (description != null)   moduleDefinition.setDescription(description);
  moduleDefinition.setWasDerivedFroms(wasDerivedFroms);
  moduleDefinition.setWasGeneratedBys(wasGeneratedBys);
  if (!annotations.isEmpty())   moduleDefinition.setAnnotations(annotations);
  ModuleDefinition oldM=SBOLDoc.getModuleDefinition(topLevel.getIdentity());
  if (oldM == null) {
    SBOLDoc.addModuleDefinition(moduleDefinition);
  }
 else {
    if (!moduleDefinition.equals(oldM)) {
      throw new SBOLValidationException(""String_Node_Str"",moduleDefinition);
    }
  }
  return moduleDefinition;
}","/** 
 * @param SBOLDoc
 * @param topLevel
 * @param nested
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10202, 10203, 10204, 10206, 10208, 10212, 10213, 11602, 11607 or</li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link #parseModule(NestedDocument,Map)},</li> <li>  {@link #parseInteraction(NestedDocument,Map)},</li> <li>  {@link #parseFunctionalComponent(NestedDocument,Map)},</li>	 <li>  {@link ModuleDefinition#ModuleDefinition(URI)}, </li> <li>  {@link ModuleDefinition#setDisplayId(String)}, </li> <li>  {@link ModuleDefinition#setVersion(String)}, </li> <li>  {@link ModuleDefinition#setFunctionalComponents(Set)}, </li> <li>  {@link ModuleDefinition#setInteractions(Set)}, </li> <li>  {@link ModuleDefinition#setModels(Set)}, </li> <li>  {@link ModuleDefinition#setModules(Set)}, </li> <li>  {@link ModuleDefinition#setWasDerivedFrom(URI)}, </li> <li>  {@link ModuleDefinition#setAnnotations(List)}, or</li> <li>  {@link SBOLDocument#addModuleDefinition(ModuleDefinition)}.</li> </ul> </li> </ul>
 */
@SuppressWarnings(""String_Node_Str"") private static ModuleDefinition parseModuleDefinition(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel,Map<URI,NestedDocument<QName>> nested) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  Set<URI> roles=new HashSet<>();
  Set<URI> models=new HashSet<>();
  Set<FunctionalComponent> functionalComponents=new HashSet<>();
  Set<Interaction> interactions=new HashSet<>();
  Set<Module> subModules=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.roles)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasModule) || namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasSubModule)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        NestedDocument<QName> nestedDocument=((NestedDocument<QName>)namedProperty.getValue());
        if (nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.Module.Module)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        subModules.add(parseModule(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        NestedDocument<QName> nestedDocument=nested.get(uri);
        if (nestedDocument == null || nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.Module.Module)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        subModules.add(parseModule(SBOLDoc,nested.get(uri),nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasInteractions)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        NestedDocument<QName> nestedDocument=((NestedDocument<QName>)namedProperty.getValue());
        if (nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.Interaction.Interaction)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        interactions.add(parseInteraction((NestedDocument<QName>)namedProperty.getValue(),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        NestedDocument<QName> nestedDocument=nested.get(uri);
        if (nestedDocument == null || nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.Interaction.Interaction)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        interactions.add(parseInteraction(nested.get(uri),nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasfunctionalComponent) || namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasComponent)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        NestedDocument<QName> nestedDocument=((NestedDocument<QName>)namedProperty.getValue());
        if (nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.FunctionalComponent.FunctionalComponent)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        functionalComponents.add(parseFunctionalComponent(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue(),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        NestedDocument<QName> nestedDocument=nested.get(uri);
        if (nestedDocument == null || nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.FunctionalComponent.FunctionalComponent)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        functionalComponents.add(parseFunctionalComponent(SBOLDoc,nested.get(uri),nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasModels)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        models.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Model.Model)) {
          Model model=parseModel(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          models.add(model.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  ModuleDefinition moduleDefinition=new ModuleDefinition(topLevel.getIdentity());
  if (!roles.isEmpty())   moduleDefinition.setRoles(roles);
  if (persistentIdentity != null)   moduleDefinition.setPersistentIdentity(persistentIdentity);
  if (version != null)   moduleDefinition.setVersion(version);
  if (displayId != null)   moduleDefinition.setDisplayId(displayId);
  if (!functionalComponents.isEmpty())   moduleDefinition.setFunctionalComponents(functionalComponents);
  if (!interactions.isEmpty())   moduleDefinition.setInteractions(interactions);
  if (!models.isEmpty())   moduleDefinition.setModels(models);
  if (!subModules.isEmpty())   moduleDefinition.setModules(subModules);
  if (name != null)   moduleDefinition.setName(name);
  if (description != null)   moduleDefinition.setDescription(description);
  moduleDefinition.setWasDerivedFroms(wasDerivedFroms);
  moduleDefinition.setWasGeneratedBys(wasGeneratedBys);
  moduleDefinition.setAttachments(attachments);
  if (!annotations.isEmpty())   moduleDefinition.setAnnotations(annotations);
  ModuleDefinition oldM=SBOLDoc.getModuleDefinition(topLevel.getIdentity());
  if (oldM == null) {
    SBOLDoc.addModuleDefinition(moduleDefinition);
  }
 else {
    if (!moduleDefinition.equals(oldM)) {
      throw new SBOLValidationException(""String_Node_Str"",moduleDefinition);
    }
  }
  return moduleDefinition;
}",0.998032786885246
12369,"/** 
 * @param SBOLDoc
 * @param topLevel
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10202, 10203, 10204, 10206, 10208, 10212, 10213, 10502, 10504, 10508; or</li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link Model#Model(URI,URI,URI,URI)}, </li> <li>  {@link Model#setDisplayId(String)}, </li> <li>  {@link Model#setVersion(String)}, </li> <li>  {@link Model#setWasDerivedFrom(URI)}, </li> <li>  {@link Identified#setAnnotations(List)}, or</li> <li>  {@link SBOLDocument#addModel(Model)}.</li> </ul> </li> </ul>
 */
@SuppressWarnings(""String_Node_Str"") private static Model parseModel(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  URI source=null;
  URI language=null;
  URI framework=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.source)) {
      if (!(namedProperty.getValue() instanceof Literal) || source != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      source=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.language)) {
      if (!(namedProperty.getValue() instanceof Literal) || language != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      language=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.framework)) {
      if (!(namedProperty.getValue() instanceof Literal) || framework != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      framework=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Model m=new Model(topLevel.getIdentity(),source,language,framework);
  if (persistentIdentity != null)   m.setPersistentIdentity(persistentIdentity);
  if (version != null)   m.setVersion(version);
  if (displayId != null)   m.setDisplayId(displayId);
  if (name != null)   m.setName(name);
  if (description != null)   m.setDescription(description);
  m.setWasDerivedFroms(wasDerivedFroms);
  m.setWasGeneratedBys(wasGeneratedBys);
  if (!annotations.isEmpty())   m.setAnnotations(annotations);
  Model oldM=SBOLDoc.getModel(topLevel.getIdentity());
  if (oldM == null) {
    SBOLDoc.addModel(m);
  }
 else {
    if (!m.equals(oldM)) {
      throw new SBOLValidationException(""String_Node_Str"",m);
    }
  }
  return m;
}","/** 
 * @param SBOLDoc
 * @param topLevel
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10202, 10203, 10204, 10206, 10208, 10212, 10213, 10502, 10504, 10508; or</li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link Model#Model(URI,URI,URI,URI)}, </li> <li>  {@link Model#setDisplayId(String)}, </li> <li>  {@link Model#setVersion(String)}, </li> <li>  {@link Model#setWasDerivedFrom(URI)}, </li> <li>  {@link Identified#setAnnotations(List)}, or</li> <li>  {@link SBOLDocument#addModel(Model)}.</li> </ul> </li> </ul>
 */
@SuppressWarnings(""String_Node_Str"") private static Model parseModel(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  URI source=null;
  URI language=null;
  URI framework=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.source)) {
      if (!(namedProperty.getValue() instanceof Literal) || source != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      source=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.language)) {
      if (!(namedProperty.getValue() instanceof Literal) || language != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      language=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.framework)) {
      if (!(namedProperty.getValue() instanceof Literal) || framework != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      framework=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Model m=new Model(topLevel.getIdentity(),source,language,framework);
  if (persistentIdentity != null)   m.setPersistentIdentity(persistentIdentity);
  if (version != null)   m.setVersion(version);
  if (displayId != null)   m.setDisplayId(displayId);
  if (name != null)   m.setName(name);
  if (description != null)   m.setDescription(description);
  m.setWasDerivedFroms(wasDerivedFroms);
  m.setWasGeneratedBys(wasGeneratedBys);
  m.setAttachments(attachments);
  if (!annotations.isEmpty())   m.setAnnotations(annotations);
  Model oldM=SBOLDoc.getModel(topLevel.getIdentity());
  if (oldM == null) {
    SBOLDoc.addModel(m);
  }
 else {
    if (!m.equals(oldM)) {
      throw new SBOLValidationException(""String_Node_Str"",m);
    }
  }
  return m;
}",0.9977643791071066
12370,"/** 
 * @param SBOLDoc
 * @param topLevel
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10202, 10203, 10204, 10206, 10208, 10212, 10213, 12102; or</li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link Collection#Collection(URI)}, </li> <li>  {@link Collection#setDisplayId(String)}, </li> <li>  {@link Collection#setVersion(String)}, </li> <li>  {@link Collection#setMembers(Set)}, </li> <li>  {@link Collection#setWasDerivedFrom(URI)}, </li> <li>  {@link Identified#setAnnotations(List)}, or</li> <li>  {@link SBOLDocument#addCollection(Collection)}.</li> </ul> </li> </ul>
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private static Collection parseCollection(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel,Map<URI,NestedDocument<QName>> nested) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  Set<URI> members=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Collection.hasMembers)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        members.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof NestedDocument) {
        if (((IdentifiableDocument)namedProperty).getType().equals(Sbol2Terms.Collection.Collection))         parseCollection(SBOLDoc,(IdentifiableDocument)namedProperty,nested);
 else         if (((IdentifiableDocument)namedProperty).equals(Sbol2Terms.ModuleDefinition.ModuleDefinition))         parseModuleDefinition(SBOLDoc,(IdentifiableDocument)namedProperty,nested);
 else         if (((IdentifiableDocument)namedProperty).equals(Sbol2Terms.Model.Model))         parseModel(SBOLDoc,(IdentifiableDocument)namedProperty);
 else         if (((IdentifiableDocument)namedProperty).equals(Sbol2Terms.Sequence.Sequence))         parseSequence(SBOLDoc,(IdentifiableDocument)namedProperty);
 else         if (((IdentifiableDocument)namedProperty).equals(Sbol2Terms.ComponentDefinition.ComponentDefinition))         parseComponentDefinition(SBOLDoc,(IdentifiableDocument)namedProperty,nested);
 else         if (((IdentifiableDocument)namedProperty).equals(Sbol2Terms.CombinatorialDerivation.CombinatorialDerivation))         parseCombinatorialDerivation(SBOLDoc,(IdentifiableDocument)namedProperty,nested);
 else         if (((IdentifiableDocument)namedProperty).equals(Sbol2Terms.Implementation.Implementation))         parseImplementation(SBOLDoc,(IdentifiableDocument)namedProperty,nested);
 else         if (((IdentifiableDocument)namedProperty).equals(Sbol2Terms.Attachment.Attachment))         parseAttachment(SBOLDoc,(IdentifiableDocument)namedProperty);
 else         if (((IdentifiableDocument)namedProperty).equals(Sbol2Terms.Activity.Activity))         parseActivity(SBOLDoc,(IdentifiableDocument)namedProperty,nested);
 else         if (((IdentifiableDocument)namedProperty).equals(Sbol2Terms.Agent.Agent))         parseAgent(SBOLDoc,(IdentifiableDocument)namedProperty);
 else         if (((IdentifiableDocument)namedProperty).equals(Sbol2Terms.Plan.Plan))         parsePlan(SBOLDoc,(IdentifiableDocument)namedProperty);
 else         parseGenericTopLevel(SBOLDoc,(IdentifiableDocument)namedProperty);
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Collection c=new Collection(topLevel.getIdentity());
  if (displayId != null)   c.setDisplayId(displayId);
  if (version != null)   c.setVersion(version);
  if (persistentIdentity != null)   c.setPersistentIdentity(persistentIdentity);
  if (!members.isEmpty())   c.setMembers(members);
  if (name != null)   c.setName(name);
  if (description != null)   c.setDescription(description);
  c.setWasDerivedFroms(wasDerivedFroms);
  c.setWasGeneratedBys(wasGeneratedBys);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  Collection oldC=SBOLDoc.getCollection(topLevel.getIdentity());
  if (oldC == null) {
    SBOLDoc.addCollection(c);
  }
 else {
    if (!c.equals(oldC)) {
      throw new SBOLValidationException(""String_Node_Str"",c);
    }
  }
  return c;
}","/** 
 * @param SBOLDoc
 * @param topLevel
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10202, 10203, 10204, 10206, 10208, 10212, 10213, 12102; or</li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link Collection#Collection(URI)}, </li> <li>  {@link Collection#setDisplayId(String)}, </li> <li>  {@link Collection#setVersion(String)}, </li> <li>  {@link Collection#setMembers(Set)}, </li> <li>  {@link Collection#setWasDerivedFrom(URI)}, </li> <li>  {@link Identified#setAnnotations(List)}, or</li> <li>  {@link SBOLDocument#addCollection(Collection)}.</li> </ul> </li> </ul>
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private static Collection parseCollection(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel,Map<URI,NestedDocument<QName>> nested) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  Set<URI> members=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Collection.hasMembers)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        members.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof NestedDocument) {
        if (((IdentifiableDocument)namedProperty).getType().equals(Sbol2Terms.Collection.Collection))         parseCollection(SBOLDoc,(IdentifiableDocument)namedProperty,nested);
 else         if (((IdentifiableDocument)namedProperty).equals(Sbol2Terms.ModuleDefinition.ModuleDefinition))         parseModuleDefinition(SBOLDoc,(IdentifiableDocument)namedProperty,nested);
 else         if (((IdentifiableDocument)namedProperty).equals(Sbol2Terms.Model.Model))         parseModel(SBOLDoc,(IdentifiableDocument)namedProperty);
 else         if (((IdentifiableDocument)namedProperty).equals(Sbol2Terms.Sequence.Sequence))         parseSequence(SBOLDoc,(IdentifiableDocument)namedProperty);
 else         if (((IdentifiableDocument)namedProperty).equals(Sbol2Terms.ComponentDefinition.ComponentDefinition))         parseComponentDefinition(SBOLDoc,(IdentifiableDocument)namedProperty,nested);
 else         if (((IdentifiableDocument)namedProperty).equals(Sbol2Terms.CombinatorialDerivation.CombinatorialDerivation))         parseCombinatorialDerivation(SBOLDoc,(IdentifiableDocument)namedProperty,nested);
 else         if (((IdentifiableDocument)namedProperty).equals(Sbol2Terms.Implementation.Implementation))         parseImplementation(SBOLDoc,(IdentifiableDocument)namedProperty,nested);
 else         if (((IdentifiableDocument)namedProperty).equals(Sbol2Terms.Attachment.Attachment))         parseAttachment(SBOLDoc,(IdentifiableDocument)namedProperty);
 else         if (((IdentifiableDocument)namedProperty).equals(Sbol2Terms.Activity.Activity))         parseActivity(SBOLDoc,(IdentifiableDocument)namedProperty,nested);
 else         if (((IdentifiableDocument)namedProperty).equals(Sbol2Terms.Agent.Agent))         parseAgent(SBOLDoc,(IdentifiableDocument)namedProperty);
 else         if (((IdentifiableDocument)namedProperty).equals(Sbol2Terms.Plan.Plan))         parsePlan(SBOLDoc,(IdentifiableDocument)namedProperty);
 else         parseGenericTopLevel(SBOLDoc,(IdentifiableDocument)namedProperty);
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Collection c=new Collection(topLevel.getIdentity());
  if (displayId != null)   c.setDisplayId(displayId);
  if (version != null)   c.setVersion(version);
  if (persistentIdentity != null)   c.setPersistentIdentity(persistentIdentity);
  if (!members.isEmpty())   c.setMembers(members);
  if (name != null)   c.setName(name);
  if (description != null)   c.setDescription(description);
  c.setWasDerivedFroms(wasDerivedFroms);
  c.setWasGeneratedBys(wasGeneratedBys);
  c.setAttachments(attachments);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  Collection oldC=SBOLDoc.getCollection(topLevel.getIdentity());
  if (oldC == null) {
    SBOLDoc.addCollection(c);
  }
 else {
    if (!c.equals(oldC)) {
      throw new SBOLValidationException(""String_Node_Str"",c);
    }
  }
  return c;
}",0.998143250998706
12371,"@SuppressWarnings(""String_Node_Str"") private static Plan parsePlan(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Plan t=new Plan(topLevel.getIdentity());
  if (persistentIdentity != null)   t.setPersistentIdentity(persistentIdentity);
  if (version != null)   t.setVersion(version);
  if (displayId != null)   t.setDisplayId(displayId);
  if (name != null)   t.setName(name);
  if (description != null)   t.setDescription(description);
  t.setWasDerivedFroms(wasDerivedFroms);
  t.setWasGeneratedBys(wasGeneratedBys);
  if (!annotations.isEmpty())   t.setAnnotations(annotations);
  Plan oldA=SBOLDoc.getPlan(topLevel.getIdentity());
  if (oldA == null) {
    SBOLDoc.addPlan(t);
  }
 else {
    if (!t.equals(oldA)) {
      throw new SBOLValidationException(""String_Node_Str"",t);
    }
  }
  return t;
}","@SuppressWarnings(""String_Node_Str"") private static Plan parsePlan(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Plan t=new Plan(topLevel.getIdentity());
  if (persistentIdentity != null)   t.setPersistentIdentity(persistentIdentity);
  if (version != null)   t.setVersion(version);
  if (displayId != null)   t.setDisplayId(displayId);
  if (name != null)   t.setName(name);
  if (description != null)   t.setDescription(description);
  t.setWasDerivedFroms(wasDerivedFroms);
  t.setWasGeneratedBys(wasGeneratedBys);
  t.setAttachments(attachments);
  if (!annotations.isEmpty())   t.setAnnotations(annotations);
  Plan oldA=SBOLDoc.getPlan(topLevel.getIdentity());
  if (oldA == null) {
    SBOLDoc.addPlan(t);
  }
 else {
    if (!t.equals(oldA)) {
      throw new SBOLValidationException(""String_Node_Str"",t);
    }
  }
  return t;
}",0.9968987877079222
12372,"@SuppressWarnings(""String_Node_Str"") private static Agent parseAgent(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Agent t=new Agent(topLevel.getIdentity());
  if (persistentIdentity != null)   t.setPersistentIdentity(persistentIdentity);
  if (version != null)   t.setVersion(version);
  if (displayId != null)   t.setDisplayId(displayId);
  if (name != null)   t.setName(name);
  if (description != null)   t.setDescription(description);
  t.setWasDerivedFroms(wasDerivedFroms);
  t.setWasGeneratedBys(wasGeneratedBys);
  if (!annotations.isEmpty())   t.setAnnotations(annotations);
  Agent oldA=SBOLDoc.getAgent(topLevel.getIdentity());
  if (oldA == null) {
    SBOLDoc.addAgent(t);
  }
 else {
    if (!t.equals(oldA)) {
      throw new SBOLValidationException(""String_Node_Str"",t);
    }
  }
  return t;
}","@SuppressWarnings(""String_Node_Str"") private static Agent parseAgent(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Agent t=new Agent(topLevel.getIdentity());
  if (persistentIdentity != null)   t.setPersistentIdentity(persistentIdentity);
  if (version != null)   t.setVersion(version);
  if (displayId != null)   t.setDisplayId(displayId);
  if (name != null)   t.setName(name);
  if (description != null)   t.setDescription(description);
  t.setWasDerivedFroms(wasDerivedFroms);
  t.setWasGeneratedBys(wasGeneratedBys);
  t.setAttachments(attachments);
  if (!annotations.isEmpty())   t.setAnnotations(annotations);
  Agent oldA=SBOLDoc.getAgent(topLevel.getIdentity());
  if (oldA == null) {
    SBOLDoc.addAgent(t);
  }
 else {
    if (!t.equals(oldA)) {
      throw new SBOLValidationException(""String_Node_Str"",t);
    }
  }
  return t;
}",0.9969028625058658
12373,"/** 
 * @param SBOLDoc
 * @param topLevel
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10202, 10203, 10204, 10206, 10208, 10212, 10213, 10402, 10403, ; or</li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link Sequence#Sequence(URI,String,URI)}, </li> <li>  {@link Sequence#setDisplayId(String)}, </li> <li>  {@link Sequence#setVersion(String)}, </li> <li>  {@link Sequence#setWasDerivedFrom(URI)}, </li> <li>  {@link Identified#setAnnotations(List)}, or</li> <li>  {@link SBOLDocument#addSequence(Sequence)}.</li> </ul> </li> </ul>
 */
@SuppressWarnings(""String_Node_Str"") private static Sequence parseSequence(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  String elements=null;
  URI encoding=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Sequence.elements)) {
      if (!(namedProperty.getValue() instanceof Literal) || elements != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      elements=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Sequence.encoding)) {
      if (!(namedProperty.getValue() instanceof Literal) || encoding != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      encoding=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
      if (encoding.toString().equals(""String_Node_Str"")) {
        encoding=Sequence.IUPAC_DNA;
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Sequence sequence=new Sequence(topLevel.getIdentity(),elements,encoding);
  if (persistentIdentity != null)   sequence.setPersistentIdentity(persistentIdentity);
  if (version != null)   sequence.setVersion(version);
  if (displayId != null)   sequence.setDisplayId(displayId);
  if (name != null)   sequence.setName(name);
  if (description != null)   sequence.setDescription(description);
  sequence.setWasDerivedFroms(wasDerivedFroms);
  sequence.setWasGeneratedBys(wasGeneratedBys);
  if (!annotations.isEmpty())   sequence.setAnnotations(annotations);
  Sequence oldS=SBOLDoc.getSequence(topLevel.getIdentity());
  if (oldS == null) {
    SBOLDoc.addSequence(sequence);
  }
 else {
    if (!sequence.equals(oldS)) {
      throw new SBOLValidationException(""String_Node_Str"",sequence);
    }
  }
  return sequence;
}","/** 
 * @param SBOLDoc
 * @param topLevel
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10202, 10203, 10204, 10206, 10208, 10212, 10213, 10402, 10403, ; or</li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link Sequence#Sequence(URI,String,URI)}, </li> <li>  {@link Sequence#setDisplayId(String)}, </li> <li>  {@link Sequence#setVersion(String)}, </li> <li>  {@link Sequence#setWasDerivedFrom(URI)}, </li> <li>  {@link Identified#setAnnotations(List)}, or</li> <li>  {@link SBOLDocument#addSequence(Sequence)}.</li> </ul> </li> </ul>
 */
@SuppressWarnings(""String_Node_Str"") private static Sequence parseSequence(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  String elements=null;
  URI encoding=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Sequence.elements)) {
      if (!(namedProperty.getValue() instanceof Literal) || elements != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      elements=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Sequence.encoding)) {
      if (!(namedProperty.getValue() instanceof Literal) || encoding != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      encoding=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
      if (encoding.toString().equals(""String_Node_Str"")) {
        encoding=Sequence.IUPAC_DNA;
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Sequence sequence=new Sequence(topLevel.getIdentity(),elements,encoding);
  if (persistentIdentity != null)   sequence.setPersistentIdentity(persistentIdentity);
  if (version != null)   sequence.setVersion(version);
  if (displayId != null)   sequence.setDisplayId(displayId);
  if (name != null)   sequence.setName(name);
  if (description != null)   sequence.setDescription(description);
  sequence.setWasDerivedFroms(wasDerivedFroms);
  sequence.setWasGeneratedBys(wasGeneratedBys);
  sequence.setAttachments(attachments);
  if (!annotations.isEmpty())   sequence.setAnnotations(annotations);
  Sequence oldS=SBOLDoc.getSequence(topLevel.getIdentity());
  if (oldS == null) {
    SBOLDoc.addSequence(sequence);
  }
 else {
    if (!sequence.equals(oldS)) {
      throw new SBOLValidationException(""String_Node_Str"",sequence);
    }
  }
  return sequence;
}",0.9972090427016468
12374,"/** 
 * @param SBOLDoc
 * @param topLevel
 * @param nested
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private static CombinatorialDerivation parseCombinatorialDerivation(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel,Map<URI,NestedDocument<QName>> nested) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  URI template=null;
  StrategyType strategy=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  Set<VariableComponent> variableComponents=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.CombinatorialDerivation.template)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        template=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.ComponentDefinition.ComponentDefinition)) {
          ComponentDefinition cd=parseComponentDefinition(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue(),nested);
          template=cd.getIdentity();
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.CombinatorialDerivation.strategy)) {
      if (!(namedProperty.getValue() instanceof Literal) || strategy != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      String strategyTypeStr=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      try {
        strategy=StrategyType.convertToStrategyType(URI.create(strategyTypeStr));
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.CombinatorialDerivation.hasVariableComponent)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        NestedDocument<QName> nestedDocument=((NestedDocument<QName>)namedProperty.getValue());
        if (nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.VariableComponent.VariableComponent)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        variableComponents.add(parseVariableComponent(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        NestedDocument<QName> nestedDocument=nested.get(uri);
        if (nestedDocument == null || nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.VariableComponent.VariableComponent)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        variableComponents.add(parseVariableComponent(SBOLDoc,nested.get(uri),nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  CombinatorialDerivation c=new CombinatorialDerivation(topLevel.getIdentity(),template);
  if (strategy != null)   c.setStrategy(strategy);
  if (displayId != null)   c.setDisplayId(displayId);
  if (persistentIdentity != null)   c.setPersistentIdentity(persistentIdentity);
  if (name != null)   c.setName(name);
  if (!variableComponents.isEmpty())   c.setVariableComponents(variableComponents);
  if (description != null)   c.setDescription(description);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  if (version != null)   c.setVersion(version);
  c.setWasDerivedFroms(wasDerivedFroms);
  CombinatorialDerivation oldC=SBOLDoc.getCombinatorialDerivation(topLevel.getIdentity());
  if (oldC == null) {
    SBOLDoc.addCombinatorialDerivation(c);
  }
 else {
    if (!c.equals(oldC)) {
      throw new SBOLValidationException(""String_Node_Str"",c);
    }
  }
  return c;
}","/** 
 * @param SBOLDoc
 * @param topLevel
 * @param nested
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private static CombinatorialDerivation parseCombinatorialDerivation(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel,Map<URI,NestedDocument<QName>> nested) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  URI template=null;
  StrategyType strategy=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  Set<VariableComponent> variableComponents=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.CombinatorialDerivation.template)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        template=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.ComponentDefinition.ComponentDefinition)) {
          ComponentDefinition cd=parseComponentDefinition(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue(),nested);
          template=cd.getIdentity();
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.CombinatorialDerivation.strategy)) {
      if (!(namedProperty.getValue() instanceof Literal) || strategy != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      String strategyTypeStr=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      try {
        strategy=StrategyType.convertToStrategyType(URI.create(strategyTypeStr));
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.CombinatorialDerivation.hasVariableComponent)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        NestedDocument<QName> nestedDocument=((NestedDocument<QName>)namedProperty.getValue());
        if (nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.VariableComponent.VariableComponent)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        variableComponents.add(parseVariableComponent(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        NestedDocument<QName> nestedDocument=nested.get(uri);
        if (nestedDocument == null || nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.VariableComponent.VariableComponent)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        variableComponents.add(parseVariableComponent(SBOLDoc,nested.get(uri),nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  CombinatorialDerivation c=new CombinatorialDerivation(topLevel.getIdentity(),template);
  if (strategy != null)   c.setStrategy(strategy);
  if (displayId != null)   c.setDisplayId(displayId);
  if (persistentIdentity != null)   c.setPersistentIdentity(persistentIdentity);
  if (name != null)   c.setName(name);
  if (!variableComponents.isEmpty())   c.setVariableComponents(variableComponents);
  if (description != null)   c.setDescription(description);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  if (version != null)   c.setVersion(version);
  c.setWasDerivedFroms(wasDerivedFroms);
  c.setWasGeneratedBys(wasGeneratedBys);
  c.setAttachments(attachments);
  CombinatorialDerivation oldC=SBOLDoc.getCombinatorialDerivation(topLevel.getIdentity());
  if (oldC == null) {
    SBOLDoc.addCombinatorialDerivation(c);
  }
 else {
    if (!c.equals(oldC)) {
      throw new SBOLValidationException(""String_Node_Str"",c);
    }
  }
  return c;
}",0.9957215541165588
12375,"/** 
 * @param SBOLDoc
 * @param topLevel
 * @param nested
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private static Implementation parseImplementation(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel,Map<URI,NestedDocument<QName>> nested) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  URI built=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Implementation.built)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        built=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.ModuleDefinition.ModuleDefinition)) {
          ModuleDefinition md=parseModuleDefinition(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue(),nested);
          built=md.getIdentity();
        }
 else         if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.ComponentDefinition.ComponentDefinition)) {
          ComponentDefinition md=parseComponentDefinition(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue(),nested);
          built=md.getIdentity();
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Implementation i=new Implementation(topLevel.getIdentity());
  if (displayId != null)   i.setDisplayId(displayId);
  if (persistentIdentity != null)   i.setPersistentIdentity(persistentIdentity);
  if (name != null)   i.setName(name);
  if (description != null)   i.setDescription(description);
  if (!annotations.isEmpty())   i.setAnnotations(annotations);
  if (version != null)   i.setVersion(version);
  if (built != null)   i.setBuilt(built);
  i.setWasDerivedFroms(wasDerivedFroms);
  Implementation oldI=SBOLDoc.getImplementation(topLevel.getIdentity());
  if (oldI == null) {
    SBOLDoc.addImplementation(i);
  }
 else {
    if (!i.equals(oldI)) {
      throw new SBOLValidationException(""String_Node_Str"",i);
    }
  }
  return i;
}","/** 
 * @param SBOLDoc
 * @param topLevel
 * @param nested
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private static Implementation parseImplementation(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel,Map<URI,NestedDocument<QName>> nested) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  URI built=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Implementation.built)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        built=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.ModuleDefinition.ModuleDefinition)) {
          ModuleDefinition md=parseModuleDefinition(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue(),nested);
          built=md.getIdentity();
        }
 else         if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.ComponentDefinition.ComponentDefinition)) {
          ComponentDefinition md=parseComponentDefinition(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue(),nested);
          built=md.getIdentity();
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Implementation i=new Implementation(topLevel.getIdentity());
  if (displayId != null)   i.setDisplayId(displayId);
  if (persistentIdentity != null)   i.setPersistentIdentity(persistentIdentity);
  if (name != null)   i.setName(name);
  if (description != null)   i.setDescription(description);
  if (!annotations.isEmpty())   i.setAnnotations(annotations);
  if (version != null)   i.setVersion(version);
  if (built != null)   i.setBuilt(built);
  i.setWasDerivedFroms(wasDerivedFroms);
  i.setWasGeneratedBys(wasGeneratedBys);
  i.setAttachments(attachments);
  Implementation oldI=SBOLDoc.getImplementation(topLevel.getIdentity());
  if (oldI == null) {
    SBOLDoc.addImplementation(i);
  }
 else {
    if (!i.equals(oldI)) {
      throw new SBOLValidationException(""String_Node_Str"",i);
    }
  }
  return i;
}",0.994604841061534
12376,"/** 
 * @param SBOLDoc
 * @param topLevel
 * @param nested
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10202, 10203, 10204, 10206, 10208, 10212, 10213, 10502, 10507, 10512, or</li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link #parseComponent(NestedDocument,Map)},</li> <li>  {@link #parseSequenceAnnotation(NestedDocument,Map)},</li> <li>  {@link ComponentDefinition#ComponentDefinition(URI,Set)}, </li> <li>  {@link ComponentDefinition#setDisplayId(String)}, </li> <li>  {@link ComponentDefinition#setVersion(String)}, </li> <li>  {@link ComponentDefinition#setWasDerivedFrom(URI)}, </li> <li>  {@link Identified#setAnnotations(List)},</li> <li>  {@link ComponentDefinition#setComponents(Set)},</li> <li>  {@link ComponentDefinition#setSequenceAnnotations(Set)},</li> <li>  {@link ComponentDefinition#setSequenceConstraints(Set)}, or</li> <li>  {@link SBOLDocument#addComponentDefinition(ComponentDefinition)}.</li> </ul> </li> </ul>
 */
@SuppressWarnings(""String_Node_Str"") private static ComponentDefinition parseComponentDefinition(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel,Map<URI,NestedDocument<QName>> nested) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  Set<URI> type=new HashSet<>();
  Set<URI> roles=new HashSet<>();
  Set<URI> sequences=new HashSet<>();
  Set<Component> components=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  Set<SequenceAnnotation> sequenceAnnotations=new HashSet<>();
  Set<SequenceConstraint> sequenceConstraints=new HashSet<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.type)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      type.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.roles)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasComponent) || namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSubComponent)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        NestedDocument<QName> nestedDocument=((NestedDocument<QName>)namedProperty.getValue());
        if (nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.Component.Component)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        components.add(parseComponent(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        NestedDocument<QName> nestedDocument=nested.get(uri);
        if (nestedDocument == null || nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.Component.Component)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        components.add(parseComponent(SBOLDoc,nested.get(uri),nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSequence)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        sequences.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Sequence.Sequence)) {
          Sequence sequence=parseSequence(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          sequences.add(sequence.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSequenceAnnotations)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        NestedDocument<QName> nestedDocument=((NestedDocument<QName>)namedProperty.getValue());
        if (nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.SequenceAnnotation.SequenceAnnotation)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        sequenceAnnotations.add(parseSequenceAnnotation(((NestedDocument<QName>)namedProperty.getValue()),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        NestedDocument<QName> nestedDocument=nested.get(uri);
        if (nestedDocument == null || nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.SequenceAnnotation.SequenceAnnotation)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        sequenceAnnotations.add(parseSequenceAnnotation(nested.get(uri),nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSequenceConstraints)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        NestedDocument<QName> nestedDocument=((NestedDocument<QName>)namedProperty.getValue());
        if (nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.SequenceConstraint.SequenceConstraint)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        sequenceConstraints.add(parseSequenceConstraint(((NestedDocument<QName>)namedProperty.getValue())));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        NestedDocument<QName> nestedDocument=nested.get(uri);
        if (nestedDocument == null || nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.SequenceConstraint.SequenceConstraint)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        sequenceConstraints.add(parseSequenceConstraint(nested.get(uri)));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  ComponentDefinition c=new ComponentDefinition(topLevel.getIdentity(),type);
  if (roles != null)   c.setRoles(roles);
  if (displayId != null)   c.setDisplayId(displayId);
  if (persistentIdentity != null)   c.setPersistentIdentity(persistentIdentity);
  if (!sequences.isEmpty())   c.setSequences(sequences);
  if (!components.isEmpty())   c.setComponents(components);
  if (!sequenceAnnotations.isEmpty())   c.setSequenceAnnotations(sequenceAnnotations);
  if (!sequenceConstraints.isEmpty())   c.setSequenceConstraints(sequenceConstraints);
  if (name != null)   c.setName(name);
  if (description != null)   c.setDescription(description);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  if (version != null)   c.setVersion(version);
  c.setWasDerivedFroms(wasDerivedFroms);
  c.setWasGeneratedBys(wasGeneratedBys);
  ComponentDefinition oldC=SBOLDoc.getComponentDefinition(topLevel.getIdentity());
  if (oldC == null) {
    SBOLDoc.addComponentDefinition(c);
  }
 else {
    if (!c.equals(oldC)) {
      throw new SBOLValidationException(""String_Node_Str"",c);
    }
  }
  return c;
}","/** 
 * @param SBOLDoc
 * @param topLevel
 * @param nested
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10202, 10203, 10204, 10206, 10208, 10212, 10213, 10502, 10507, 10512, or</li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link #parseComponent(NestedDocument,Map)},</li> <li>  {@link #parseSequenceAnnotation(NestedDocument,Map)},</li> <li>  {@link ComponentDefinition#ComponentDefinition(URI,Set)}, </li> <li>  {@link ComponentDefinition#setDisplayId(String)}, </li> <li>  {@link ComponentDefinition#setVersion(String)}, </li> <li>  {@link ComponentDefinition#setWasDerivedFrom(URI)}, </li> <li>  {@link Identified#setAnnotations(List)},</li> <li>  {@link ComponentDefinition#setComponents(Set)},</li> <li>  {@link ComponentDefinition#setSequenceAnnotations(Set)},</li> <li>  {@link ComponentDefinition#setSequenceConstraints(Set)}, or</li> <li>  {@link SBOLDocument#addComponentDefinition(ComponentDefinition)}.</li> </ul> </li> </ul>
 */
@SuppressWarnings(""String_Node_Str"") private static ComponentDefinition parseComponentDefinition(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel,Map<URI,NestedDocument<QName>> nested) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  Set<URI> type=new HashSet<>();
  Set<URI> roles=new HashSet<>();
  Set<URI> sequences=new HashSet<>();
  Set<Component> components=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  Set<SequenceAnnotation> sequenceAnnotations=new HashSet<>();
  Set<SequenceConstraint> sequenceConstraints=new HashSet<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.type)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      type.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.roles)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasComponent) || namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSubComponent)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        NestedDocument<QName> nestedDocument=((NestedDocument<QName>)namedProperty.getValue());
        if (nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.Component.Component)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        components.add(parseComponent(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        NestedDocument<QName> nestedDocument=nested.get(uri);
        if (nestedDocument == null || nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.Component.Component)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        components.add(parseComponent(SBOLDoc,nested.get(uri),nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSequence)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        sequences.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Sequence.Sequence)) {
          Sequence sequence=parseSequence(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          sequences.add(sequence.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSequenceAnnotations)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        NestedDocument<QName> nestedDocument=((NestedDocument<QName>)namedProperty.getValue());
        if (nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.SequenceAnnotation.SequenceAnnotation)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        sequenceAnnotations.add(parseSequenceAnnotation(((NestedDocument<QName>)namedProperty.getValue()),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        NestedDocument<QName> nestedDocument=nested.get(uri);
        if (nestedDocument == null || nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.SequenceAnnotation.SequenceAnnotation)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        sequenceAnnotations.add(parseSequenceAnnotation(nested.get(uri),nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSequenceConstraints)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        NestedDocument<QName> nestedDocument=((NestedDocument<QName>)namedProperty.getValue());
        if (nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.SequenceConstraint.SequenceConstraint)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        sequenceConstraints.add(parseSequenceConstraint(((NestedDocument<QName>)namedProperty.getValue())));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        NestedDocument<QName> nestedDocument=nested.get(uri);
        if (nestedDocument == null || nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.SequenceConstraint.SequenceConstraint)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        sequenceConstraints.add(parseSequenceConstraint(nested.get(uri)));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  ComponentDefinition c=new ComponentDefinition(topLevel.getIdentity(),type);
  if (roles != null)   c.setRoles(roles);
  if (displayId != null)   c.setDisplayId(displayId);
  if (persistentIdentity != null)   c.setPersistentIdentity(persistentIdentity);
  if (!sequences.isEmpty())   c.setSequences(sequences);
  if (!components.isEmpty())   c.setComponents(components);
  if (!sequenceAnnotations.isEmpty())   c.setSequenceAnnotations(sequenceAnnotations);
  if (!sequenceConstraints.isEmpty())   c.setSequenceConstraints(sequenceConstraints);
  if (name != null)   c.setName(name);
  if (description != null)   c.setDescription(description);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  if (version != null)   c.setVersion(version);
  c.setWasDerivedFroms(wasDerivedFroms);
  c.setWasGeneratedBys(wasGeneratedBys);
  c.setAttachments(attachments);
  ComponentDefinition oldC=SBOLDoc.getComponentDefinition(topLevel.getIdentity());
  if (oldC == null) {
    SBOLDoc.addComponentDefinition(c);
  }
 else {
    if (!c.equals(oldC)) {
      throw new SBOLValidationException(""String_Node_Str"",c);
    }
  }
  return c;
}",0.9986684420772304
12377,"/** 
 * @param SBOLDoc
 * @param topLevel
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10202, 10203, 10204, 10206, 10208, 10212, 10213, 12102; or</li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link GenericTopLevel#GenericTopLevel(URI,QName)}, </li> <li>  {@link GenericTopLevel#setDisplayId(String)}, </li> <li>  {@link GenericTopLevel#setVersion(String)}, </li> <li>  {@link GenericTopLevel#setWasDerivedFrom(URI)}, </li> <li>  {@link Identified#setAnnotations(List)}, or</li> <li>  {@link SBOLDocument#addGenericTopLevel(GenericTopLevel)}.</li> </ul> </li> </ul>
 */
@SuppressWarnings(""String_Node_Str"") private static GenericTopLevel parseGenericTopLevel(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  QName type=topLevel.getType();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Description.type)) {
      String typeStr=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      String nameSpace=URIcompliance.extractNamespace(URI.create(typeStr));
      String localPart=URIcompliance.extractDisplayId(URI.create(typeStr));
      String prefix=null;
      if (nameSpace == null) {
        if (typeStr.lastIndexOf('/') > typeStr.lastIndexOf('#')) {
          if (typeStr.lastIndexOf('/') > typeStr.lastIndexOf(':')) {
            nameSpace=typeStr.substring(0,typeStr.lastIndexOf('/') + 1);
            localPart=typeStr.substring(typeStr.lastIndexOf('/') + 1);
          }
 else {
            nameSpace=typeStr.substring(0,typeStr.lastIndexOf(':') + 1);
            localPart=typeStr.substring(typeStr.lastIndexOf(':') + 1);
          }
        }
 else         if (typeStr.lastIndexOf('#') > typeStr.lastIndexOf(':')) {
          nameSpace=typeStr.substring(0,typeStr.lastIndexOf('#') + 1);
          localPart=typeStr.substring(typeStr.lastIndexOf('#') + 1);
        }
 else {
          nameSpace=typeStr.substring(0,typeStr.lastIndexOf(':') + 1);
          localPart=typeStr.substring(typeStr.lastIndexOf(':') + 1);
        }
        prefix=SBOLDoc.getNamespacePrefix(URI.create(nameSpace));
        if (prefix == null) {
          prefix=""String_Node_Str"";
          int prefixCnt=0;
          while (SBOLDoc.getNamespace(prefix) != null) {
            prefixCnt++;
            prefix=""String_Node_Str"" + prefixCnt;
          }
          SBOLDoc.addNamespace(new QName(nameSpace,localPart,prefix));
        }
      }
 else {
        prefix=SBOLDoc.getNamespacePrefix(URI.create(nameSpace));
      }
      if (!nameSpace.equals(Sbol2Terms.sbol2.getNamespaceURI()))       type=new QName(nameSpace,localPart,prefix);
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  GenericTopLevel t=new GenericTopLevel(topLevel.getIdentity(),type);
  if (persistentIdentity != null)   t.setPersistentIdentity(persistentIdentity);
  if (version != null)   t.setVersion(version);
  if (displayId != null)   t.setDisplayId(displayId);
  if (name != null)   t.setName(name);
  if (description != null)   t.setDescription(description);
  t.setWasDerivedFroms(wasDerivedFroms);
  t.setWasGeneratedBys(wasGeneratedBys);
  if (!annotations.isEmpty())   t.setAnnotations(annotations);
  GenericTopLevel oldG=SBOLDoc.getGenericTopLevel(topLevel.getIdentity());
  if (oldG == null) {
    SBOLDoc.addGenericTopLevel(t);
  }
 else {
    if (!t.equals(oldG)) {
      throw new SBOLValidationException(""String_Node_Str"",t);
    }
  }
  return t;
}","/** 
 * @param SBOLDoc
 * @param topLevel
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10202, 10203, 10204, 10206, 10208, 10212, 10213, 12102; or</li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link GenericTopLevel#GenericTopLevel(URI,QName)}, </li> <li>  {@link GenericTopLevel#setDisplayId(String)}, </li> <li>  {@link GenericTopLevel#setVersion(String)}, </li> <li>  {@link GenericTopLevel#setWasDerivedFrom(URI)}, </li> <li>  {@link Identified#setAnnotations(List)}, or</li> <li>  {@link SBOLDocument#addGenericTopLevel(GenericTopLevel)}.</li> </ul> </li> </ul>
 */
@SuppressWarnings(""String_Node_Str"") private static GenericTopLevel parseGenericTopLevel(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  QName type=topLevel.getType();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Description.type)) {
      String typeStr=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      String nameSpace=URIcompliance.extractNamespace(URI.create(typeStr));
      String localPart=URIcompliance.extractDisplayId(URI.create(typeStr));
      String prefix=null;
      if (nameSpace == null) {
        if (typeStr.lastIndexOf('/') > typeStr.lastIndexOf('#')) {
          if (typeStr.lastIndexOf('/') > typeStr.lastIndexOf(':')) {
            nameSpace=typeStr.substring(0,typeStr.lastIndexOf('/') + 1);
            localPart=typeStr.substring(typeStr.lastIndexOf('/') + 1);
          }
 else {
            nameSpace=typeStr.substring(0,typeStr.lastIndexOf(':') + 1);
            localPart=typeStr.substring(typeStr.lastIndexOf(':') + 1);
          }
        }
 else         if (typeStr.lastIndexOf('#') > typeStr.lastIndexOf(':')) {
          nameSpace=typeStr.substring(0,typeStr.lastIndexOf('#') + 1);
          localPart=typeStr.substring(typeStr.lastIndexOf('#') + 1);
        }
 else {
          nameSpace=typeStr.substring(0,typeStr.lastIndexOf(':') + 1);
          localPart=typeStr.substring(typeStr.lastIndexOf(':') + 1);
        }
        prefix=SBOLDoc.getNamespacePrefix(URI.create(nameSpace));
        if (prefix == null) {
          prefix=""String_Node_Str"";
          int prefixCnt=0;
          while (SBOLDoc.getNamespace(prefix) != null) {
            prefixCnt++;
            prefix=""String_Node_Str"" + prefixCnt;
          }
          SBOLDoc.addNamespace(new QName(nameSpace,localPart,prefix));
        }
      }
 else {
        prefix=SBOLDoc.getNamespacePrefix(URI.create(nameSpace));
      }
      if (!nameSpace.equals(Sbol2Terms.sbol2.getNamespaceURI()))       type=new QName(nameSpace,localPart,prefix);
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  GenericTopLevel t=new GenericTopLevel(topLevel.getIdentity(),type);
  if (persistentIdentity != null)   t.setPersistentIdentity(persistentIdentity);
  if (version != null)   t.setVersion(version);
  if (displayId != null)   t.setDisplayId(displayId);
  if (name != null)   t.setName(name);
  if (description != null)   t.setDescription(description);
  t.setWasDerivedFroms(wasDerivedFroms);
  t.setWasGeneratedBys(wasGeneratedBys);
  t.setAttachments(attachments);
  if (!annotations.isEmpty())   t.setAnnotations(annotations);
  GenericTopLevel oldG=SBOLDoc.getGenericTopLevel(topLevel.getIdentity());
  if (oldG == null) {
    SBOLDoc.addGenericTopLevel(t);
  }
 else {
    if (!t.equals(oldG)) {
      throw new SBOLValidationException(""String_Node_Str"",t);
    }
  }
  return t;
}",0.9979365972613018
12378,"@SuppressWarnings(""String_Node_Str"") private static Activity parseActivity(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel,Map<URI,NestedDocument<QName>> nested) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  DateTime startedAtTime=null;
  DateTime endedAtTime=null;
  Set<URI> wasInformedBys=new HashSet<>();
  Set<Association> qualifiedAssociations=new HashSet<>();
  Set<Usage> qualifiedUsages=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Activity.startedAtTime)) {
      if (!(namedProperty.getValue() instanceof Literal) || startedAtTime != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      DateTimeFormatter fmt=ISODateTimeFormat.dateTime();
      startedAtTime=fmt.parseDateTime(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Activity.endedAtTime)) {
      if (!(namedProperty.getValue() instanceof Literal) || endedAtTime != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      DateTimeFormatter fmt=ISODateTimeFormat.dateTime();
      endedAtTime=fmt.parseDateTime(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Activity.wasInformedBy)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        wasInformedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Activity.Activity)) {
          Activity activity=parseActivity(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue(),nested);
          wasInformedBys.add(activity.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Activity.qualifiedAssociation)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        NestedDocument<QName> nestedDocument=((NestedDocument<QName>)namedProperty.getValue());
        if (nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.Association.Association)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        qualifiedAssociations.add(parseAssociation(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        NestedDocument<QName> nestedDocument=nested.get(uri);
        if (nestedDocument == null || nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.Association.Association)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        qualifiedAssociations.add(parseAssociation(SBOLDoc,nestedDocument,nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Activity.qualifiedUsage)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        NestedDocument<QName> nestedDocument=((NestedDocument<QName>)namedProperty.getValue());
        if (nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.Usage.Usage)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        qualifiedUsages.add(parseUsage(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        NestedDocument<QName> nestedDocument=nested.get(uri);
        if (nestedDocument == null || nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.Usage.Usage)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        qualifiedUsages.add(parseUsage(SBOLDoc,nestedDocument,nested));
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Activity t=new Activity(topLevel.getIdentity());
  if (persistentIdentity != null)   t.setPersistentIdentity(persistentIdentity);
  if (version != null)   t.setVersion(version);
  if (displayId != null)   t.setDisplayId(displayId);
  if (name != null)   t.setName(name);
  if (description != null)   t.setDescription(description);
  t.setWasDerivedFroms(wasDerivedFroms);
  t.setWasGeneratedBys(wasGeneratedBys);
  if (!annotations.isEmpty())   t.setAnnotations(annotations);
  if (startedAtTime != null)   t.setStartedAtTime(startedAtTime);
  if (endedAtTime != null)   t.setEndedAtTime(endedAtTime);
  if (!qualifiedAssociations.isEmpty())   t.setAssociations(qualifiedAssociations);
  if (!qualifiedUsages.isEmpty())   t.setUsages(qualifiedUsages);
  if (!wasInformedBys.isEmpty())   t.setWasInformedBys(wasInformedBys);
  if (!attachments.isEmpty())   t.setAttachments(attachments);
  Activity oldA=SBOLDoc.getActivity(topLevel.getIdentity());
  if (oldA == null) {
    SBOLDoc.addActivity(t);
  }
 else {
    if (!t.equals(oldA)) {
      throw new SBOLValidationException(""String_Node_Str"",t);
    }
  }
  return t;
}","@SuppressWarnings(""String_Node_Str"") private static Activity parseActivity(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel,Map<URI,NestedDocument<QName>> nested) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<URI> wasGeneratedBys=new HashSet<>();
  Set<URI> attachments=new HashSet<>();
  DateTime startedAtTime=null;
  DateTime endedAtTime=null;
  Set<URI> wasInformedBys=new HashSet<>();
  Set<Association> qualifiedAssociations=new HashSet<>();
  Set<Usage> qualifiedUsages=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasGeneratedBy)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasGeneratedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.TopLevel.hasAttachment)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        attachments.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Attachment.Attachment)) {
          Attachment attachment=parseAttachment(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue());
          attachments.add(attachment.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Activity.startedAtTime)) {
      if (!(namedProperty.getValue() instanceof Literal) || startedAtTime != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      DateTimeFormatter fmt=ISODateTimeFormat.dateTime();
      try {
        startedAtTime=fmt.parseDateTime(((Literal<QName>)namedProperty.getValue()).getValue().toString());
      }
 catch (      IllegalArgumentException e) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Activity.endedAtTime)) {
      if (!(namedProperty.getValue() instanceof Literal) || endedAtTime != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      DateTimeFormatter fmt=ISODateTimeFormat.dateTime();
      try {
        endedAtTime=fmt.parseDateTime(((Literal<QName>)namedProperty.getValue()).getValue().toString());
      }
 catch (      IllegalArgumentException e) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Activity.wasInformedBy)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        wasInformedBys.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Activity.Activity)) {
          Activity activity=parseActivity(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue(),nested);
          wasInformedBys.add(activity.getIdentity());
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Activity.qualifiedAssociation)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        NestedDocument<QName> nestedDocument=((NestedDocument<QName>)namedProperty.getValue());
        if (nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.Association.Association)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        qualifiedAssociations.add(parseAssociation(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        NestedDocument<QName> nestedDocument=nested.get(uri);
        if (nestedDocument == null || nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.Association.Association)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        qualifiedAssociations.add(parseAssociation(SBOLDoc,nestedDocument,nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Activity.qualifiedUsage)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        NestedDocument<QName> nestedDocument=((NestedDocument<QName>)namedProperty.getValue());
        if (nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.Usage.Usage)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        qualifiedUsages.add(parseUsage(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        NestedDocument<QName> nestedDocument=nested.get(uri);
        if (nestedDocument == null || nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.Usage.Usage)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        qualifiedUsages.add(parseUsage(SBOLDoc,nestedDocument,nested));
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Activity t=new Activity(topLevel.getIdentity());
  if (persistentIdentity != null)   t.setPersistentIdentity(persistentIdentity);
  if (version != null)   t.setVersion(version);
  if (displayId != null)   t.setDisplayId(displayId);
  if (name != null)   t.setName(name);
  if (description != null)   t.setDescription(description);
  t.setWasDerivedFroms(wasDerivedFroms);
  t.setWasGeneratedBys(wasGeneratedBys);
  if (!annotations.isEmpty())   t.setAnnotations(annotations);
  if (startedAtTime != null)   t.setStartedAtTime(startedAtTime);
  if (endedAtTime != null)   t.setEndedAtTime(endedAtTime);
  if (!qualifiedAssociations.isEmpty())   t.setAssociations(qualifiedAssociations);
  if (!qualifiedUsages.isEmpty())   t.setUsages(qualifiedUsages);
  if (!wasInformedBys.isEmpty())   t.setWasInformedBys(wasInformedBys);
  if (!attachments.isEmpty())   t.setAttachments(attachments);
  Activity oldA=SBOLDoc.getActivity(topLevel.getIdentity());
  if (oldA == null) {
    SBOLDoc.addActivity(t);
  }
 else {
    if (!t.equals(oldA)) {
      throw new SBOLValidationException(""String_Node_Str"",t);
    }
  }
  return t;
}",0.92923106833868
12379,"/** 
 * Validates if all URI references to SBOL objects are in the same given SBOL document.
 * @param sbolDocument the given SBOL document to be validated for completeness
 */
private static void validateCompleteness(SBOLDocument sbolDocument){
  for (  Identified identified : sbolDocument.getTopLevels()) {
    checkIdentifiedCompleteness(sbolDocument,identified);
  }
  for (  Collection collection : sbolDocument.getCollections()) {
    checkCollectionCompleteness(sbolDocument,collection);
  }
  for (  ComponentDefinition componentDefinition : sbolDocument.getComponentDefinitions()) {
    checkComponentDefinitionCompleteness(sbolDocument,componentDefinition);
  }
  for (  ModuleDefinition moduleDefinition : sbolDocument.getModuleDefinitions()) {
    checkModuleDefinitionCompleteness(sbolDocument,moduleDefinition);
  }
}","/** 
 * Validates if all URI references to SBOL objects are in the same given SBOL document.
 * @param sbolDocument the given SBOL document to be validated for completeness
 */
private static void validateCompleteness(SBOLDocument sbolDocument){
  for (  Identified identified : sbolDocument.getTopLevels()) {
    checkIdentifiedCompleteness(sbolDocument,identified);
  }
  for (  Collection collection : sbolDocument.getCollections()) {
    checkCollectionCompleteness(sbolDocument,collection);
  }
  for (  ComponentDefinition componentDefinition : sbolDocument.getComponentDefinitions()) {
    checkComponentDefinitionCompleteness(sbolDocument,componentDefinition);
  }
  for (  ModuleDefinition moduleDefinition : sbolDocument.getModuleDefinitions()) {
    checkModuleDefinitionCompleteness(sbolDocument,moduleDefinition);
  }
  for (  Activity activity : sbolDocument.getActivities()) {
    checkActivityCompleteness(sbolDocument,activity);
  }
}",0.9332585530005608
12380,"/** 
 * Creates an implementation, and then adds it to this SBOL document's list of implementations. <p> This method creates a compliant URI for the implementation to be created first. It starts with the given URI prefix after its been successfully validated, followed by the given display ID, and ends with the given version.
 * @param URIprefix the URI prefix used to construct the compliant URI for the implementation to be created
 * @param displayId the display ID of the implementation to be created
 * @param version the version of the implementation to be created
 * @param template the template URI of the implementation to be created
 * @return the created implementation
 * @throws SBOLValidationException if any of the following SBOL validation rules was violated: TODO: 10201, 10202, 10204, 10206, 10220, 10502, 10503.
 */
public Implementation createImplementation(String URIprefix,String displayId,String version) throws SBOLValidationException {
  URIprefix=URIcompliance.checkURIprefix(URIprefix);
  Implementation cd=new Implementation(createCompliantURI(URIprefix,TopLevel.IMPLEMENTATION,displayId,version,typesInURIs));
  cd.setDisplayId(displayId);
  cd.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.IMPLEMENTATION,displayId,""String_Node_Str"",typesInURIs));
  cd.setVersion(version);
  addImplementation(cd);
  return cd;
}","/** 
 * Creates an implementation, and then adds it to this SBOL document's list of implementations. <p> This method creates a compliant URI for the implementation to be created first. It starts with the given URI prefix after its been successfully validated, followed by the given display ID, and ends with the given version.
 * @param URIprefix the URI prefix used to construct the compliant URI for the implementation to be created
 * @param displayId the display ID of the implementation to be created
 * @param version the version of the implementation to be created
 * @return the created implementation
 * @throws SBOLValidationException if any of the following SBOL validation rules was violated: TODO: 10201, 10202, 10204, 10206, 10220, 10502, 10503.
 */
public Implementation createImplementation(String URIprefix,String displayId,String version) throws SBOLValidationException {
  URIprefix=URIcompliance.checkURIprefix(URIprefix);
  Implementation cd=new Implementation(createCompliantURI(URIprefix,TopLevel.IMPLEMENTATION,displayId,version,typesInURIs));
  cd.setDisplayId(displayId);
  cd.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.IMPLEMENTATION,displayId,""String_Node_Str"",typesInURIs));
  cd.setVersion(version);
  addImplementation(cd);
  return cd;
}",0.972768532526475
12381,"/** 
 * Adds the given annotation to the list of annotations.
 * @throws SBOLValidationException if any of the following SBOL validation rules was violated:10401, 10501, 10701, 10801, 10901, 11101, 11201, 11301, 11401, 11501, 11601, 11701, 11801, 11901, 12001, 12101, 12301.
 */
void addAnnotation(Annotation annotation) throws SBOLValidationException {
  if (annotations.contains(annotation)) {
    return;
  }
  if (annotation.getQName().getNamespaceURI().equals(Sbol2Terms.sbol2.getNamespaceURI())) {
    if (this instanceof Sequence) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof ComponentDefinition) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Component) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof MapsTo) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof SequenceAnnotation) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Range) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Cut) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof GenericLocation) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof SequenceConstraint) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Model) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof ModuleDefinition) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Module) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof FunctionalComponent) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Interaction) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Participation) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Collection) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof GenericTopLevel) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Activity) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Usage) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Association) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Plan) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Agent) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof CombinatorialDerivation) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof VariableComponent) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
  }
  addNamespace(annotation);
  annotations.add(annotation);
}","/** 
 * Adds the given annotation to the list of annotations.
 * @throws SBOLValidationException if any of the following SBOL validation rules was violated:10401, 10501, 10701, 10801, 10901, 11101, 11201, 11301, 11401, 11501, 11601, 11701, 11801, 11901, 12001, 12101, 12301.
 */
void addAnnotation(Annotation annotation) throws SBOLValidationException {
  if (annotations.contains(annotation)) {
    return;
  }
  if (annotation.getQName().getNamespaceURI().equals(Sbol2Terms.sbol2.getNamespaceURI())) {
    if (this instanceof Sequence) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof ComponentDefinition) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Component) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof MapsTo) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof SequenceAnnotation) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Range) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Cut) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof GenericLocation) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof SequenceConstraint) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Model) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof ModuleDefinition) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Module) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof FunctionalComponent) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Interaction) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Participation) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Collection) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof GenericTopLevel) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Activity) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Usage) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Association) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Plan) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Agent) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof CombinatorialDerivation) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof VariableComponent) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Implementation) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
  }
  addNamespace(annotation);
  annotations.add(annotation);
}",0.9826642335766425
12382,"/** 
 * Sets the URI of the built property to the given one.
 * @param builtURI the given URI to set to
 * @throws SBOLValidationException on SBOL validation rule violation XXXXX.
 */
public void setBuiltURI(URI builtURI) throws SBOLValidationException {
  if (this.getSBOLDocument().getComponentDefinition(builtURI) == null && this.getSBOLDocument().getModuleDefinition(builtURI) == null) {
    throw new SBOLValidationException(""String_Node_Str"",this);
  }
  this.built=builtURI;
}","/** 
 * Sets the URI of the built property to the given one.
 * @param builtURI the given URI to set to
 * @throws SBOLValidationException on SBOL validation rule violation XXXXX.
 */
public void setBuiltURI(URI builtURI) throws SBOLValidationException {
  if (this.getSBOLDocument() != null && this.getSBOLDocument().getComponentDefinition(builtURI) == null && this.getSBOLDocument().getModuleDefinition(builtURI) == null) {
    throw new SBOLValidationException(""String_Node_Str"",this);
  }
  this.built=builtURI;
}",0.966
12383,"/** 
 * @param document document to copy recursively into
 * @param topLevel topLevel that is being recursively copied from
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in {@link SBOLDocument#createCopy(TopLevel)}.
 */
public void createRecursiveCopy(SBOLDocument document,TopLevel topLevel) throws SBOLValidationException {
  if (document.getTopLevelLocalOnly(topLevel.getIdentity()) != null)   return;
  document.createCopy(topLevel);
  for (  URI wasDerivedFromURI : topLevel.getWasDerivedFroms()) {
    TopLevel wasDerivedFrom=getTopLevelLocalOnly(wasDerivedFromURI);
    if (wasDerivedFrom != null) {
      createRecursiveCopy(document,wasDerivedFrom);
    }
  }
  for (  URI wasGeneratedByURI : topLevel.getWasGeneratedBys()) {
    TopLevel wasGeneratedBy=getTopLevelLocalOnly(wasGeneratedByURI);
    if (wasGeneratedBy != null) {
      createRecursiveCopy(document,wasGeneratedBy);
    }
  }
  if (topLevel instanceof GenericTopLevel || topLevel instanceof Sequence || topLevel instanceof Model|| topLevel instanceof Plan|| topLevel instanceof Agent) {
  }
 else   if (topLevel instanceof Collection) {
    for (    TopLevel member : ((Collection)topLevel).getMembers()) {
      createRecursiveCopy(document,member);
    }
  }
 else   if (topLevel instanceof ComponentDefinition) {
    for (    Component component : ((ComponentDefinition)topLevel).getComponents()) {
      if (component.getDefinition() != null) {
        createRecursiveCopy(document,component.getDefinition());
      }
    }
    for (    TopLevel sequence : ((ComponentDefinition)topLevel).getSequences()) {
      createRecursiveCopy(document,sequence);
    }
  }
 else   if (topLevel instanceof CombinatorialDerivation) {
    if (((CombinatorialDerivation)topLevel).getTemplate() != null) {
      createRecursiveCopy(document,((CombinatorialDerivation)topLevel).getTemplate());
    }
    for (    VariableComponent variableComponent : ((CombinatorialDerivation)topLevel).getVariableComponents()) {
      for (      Collection collection : variableComponent.getVariantCollections()) {
        createRecursiveCopy(document,collection);
      }
      for (      ComponentDefinition componentDefinition : variableComponent.getVariants()) {
        createRecursiveCopy(document,componentDefinition);
      }
      for (      CombinatorialDerivation combinatorialDerivation : variableComponent.getVariantDerivations()) {
        createRecursiveCopy(document,combinatorialDerivation);
      }
    }
  }
 else   if (topLevel instanceof ModuleDefinition) {
    for (    FunctionalComponent functionalComponent : ((ModuleDefinition)topLevel).getFunctionalComponents()) {
      if (functionalComponent.getDefinition() != null) {
        createRecursiveCopy(document,functionalComponent.getDefinition());
      }
    }
    for (    Module module : ((ModuleDefinition)topLevel).getModules()) {
      if (module.getDefinition() != null) {
        createRecursiveCopy(document,module.getDefinition());
      }
    }
    for (    Model model : ((ModuleDefinition)topLevel).getModels()) {
      createRecursiveCopy(document,model);
    }
  }
 else   if (topLevel instanceof Activity) {
    for (    Association association : ((Activity)topLevel).getAssociations()) {
      if (association.getAgent() != null) {
        createRecursiveCopy(document,association.getAgent());
      }
      if (association.getPlan() != null) {
        createRecursiveCopy(document,association.getPlan());
      }
    }
    for (    Usage usage : ((Activity)topLevel).getUsages()) {
      if (usage.getEntity() != null) {
        createRecursiveCopy(document,usage.getEntity());
      }
    }
  }
  for (  Annotation annotation : topLevel.getAnnotations()) {
    if (annotation.isURIValue()) {
      TopLevel gtl=getTopLevelLocalOnly(annotation.getURIValue());
      if (gtl != null)       createRecursiveCopy(document,gtl);
    }
 else     if (annotation.isNestedAnnotations()) {
      for (      Annotation nestedAnnotation : annotation.getAnnotations()) {
        createRecursiveCopy(document,nestedAnnotation);
      }
    }
  }
}","/** 
 * @param document document to copy recursively into
 * @param topLevel topLevel that is being recursively copied from
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in {@link SBOLDocument#createCopy(TopLevel)}.
 */
public void createRecursiveCopy(SBOLDocument document,TopLevel topLevel) throws SBOLValidationException {
  if (document.getTopLevelLocalOnly(topLevel.getIdentity()) != null)   return;
  document.createCopy(topLevel);
  for (  URI wasDerivedFromURI : topLevel.getWasDerivedFroms()) {
    TopLevel wasDerivedFrom=getTopLevelLocalOnly(wasDerivedFromURI);
    if (wasDerivedFrom != null) {
      createRecursiveCopy(document,wasDerivedFrom);
    }
  }
  for (  URI wasGeneratedByURI : topLevel.getWasGeneratedBys()) {
    TopLevel wasGeneratedBy=getTopLevelLocalOnly(wasGeneratedByURI);
    if (wasGeneratedBy != null) {
      createRecursiveCopy(document,wasGeneratedBy);
    }
  }
  if (topLevel instanceof GenericTopLevel || topLevel instanceof Sequence || topLevel instanceof Model|| topLevel instanceof Plan|| topLevel instanceof Agent|| topLevel instanceof Implementation) {
  }
 else   if (topLevel instanceof Collection) {
    for (    TopLevel member : ((Collection)topLevel).getMembers()) {
      createRecursiveCopy(document,member);
    }
  }
 else   if (topLevel instanceof ComponentDefinition) {
    for (    Component component : ((ComponentDefinition)topLevel).getComponents()) {
      if (component.getDefinition() != null) {
        createRecursiveCopy(document,component.getDefinition());
      }
    }
    for (    TopLevel sequence : ((ComponentDefinition)topLevel).getSequences()) {
      createRecursiveCopy(document,sequence);
    }
  }
 else   if (topLevel instanceof CombinatorialDerivation) {
    if (((CombinatorialDerivation)topLevel).getTemplate() != null) {
      createRecursiveCopy(document,((CombinatorialDerivation)topLevel).getTemplate());
    }
    for (    VariableComponent variableComponent : ((CombinatorialDerivation)topLevel).getVariableComponents()) {
      for (      Collection collection : variableComponent.getVariantCollections()) {
        createRecursiveCopy(document,collection);
      }
      for (      ComponentDefinition componentDefinition : variableComponent.getVariants()) {
        createRecursiveCopy(document,componentDefinition);
      }
      for (      CombinatorialDerivation combinatorialDerivation : variableComponent.getVariantDerivations()) {
        createRecursiveCopy(document,combinatorialDerivation);
      }
    }
  }
 else   if (topLevel instanceof ModuleDefinition) {
    for (    FunctionalComponent functionalComponent : ((ModuleDefinition)topLevel).getFunctionalComponents()) {
      if (functionalComponent.getDefinition() != null) {
        createRecursiveCopy(document,functionalComponent.getDefinition());
      }
    }
    for (    Module module : ((ModuleDefinition)topLevel).getModules()) {
      if (module.getDefinition() != null) {
        createRecursiveCopy(document,module.getDefinition());
      }
    }
    for (    Model model : ((ModuleDefinition)topLevel).getModels()) {
      createRecursiveCopy(document,model);
    }
  }
 else   if (topLevel instanceof Activity) {
    for (    Association association : ((Activity)topLevel).getAssociations()) {
      if (association.getAgent() != null) {
        createRecursiveCopy(document,association.getAgent());
      }
      if (association.getPlan() != null) {
        createRecursiveCopy(document,association.getPlan());
      }
    }
    for (    Usage usage : ((Activity)topLevel).getUsages()) {
      if (usage.getEntity() != null) {
        createRecursiveCopy(document,usage.getEntity());
      }
    }
  }
  for (  Annotation annotation : topLevel.getAnnotations()) {
    if (annotation.isURIValue()) {
      TopLevel gtl=getTopLevelLocalOnly(annotation.getURIValue());
      if (gtl != null)       createRecursiveCopy(document,gtl);
    }
 else     if (annotation.isNestedAnnotations()) {
      for (      Annotation nestedAnnotation : annotation.getAnnotations()) {
        createRecursiveCopy(document,nestedAnnotation);
      }
    }
  }
}",0.9955178679588128
12384,"/** 
 * Adds the given collection to this SBOL document's list of collections.
 * @param collection the collection object to be added
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in {@link #addTopLevel(TopLevel,Map,String,Map)}
 */
void addCollection(Collection collection) throws SBOLValidationException {
  addTopLevel(collection,collections,""String_Node_Str"",componentDefinitions,genericTopLevels,activities,plans,agents,models,moduleDefinitions,sequences,combinatorialDerivations);
}","/** 
 * Adds the given collection to this SBOL document's list of collections.
 * @param collection the collection object to be added
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in {@link #addTopLevel(TopLevel,Map,String,Map)}
 */
void addCollection(Collection collection) throws SBOLValidationException {
  addTopLevel(collection,collections,""String_Node_Str"",componentDefinitions,genericTopLevels,activities,plans,agents,models,moduleDefinitions,sequences,combinatorialDerivations,implementations);
}",0.9849340866290018
12385,"@Override public String toString(){
  return ""String_Node_Str"" + activities + ""String_Node_Str""+ agents+ ""String_Node_Str""+ plans+ ""String_Node_Str""+ genericTopLevels+ ""String_Node_Str""+ collections+ ""String_Node_Str""+ componentDefinitions+ ""String_Node_Str""+ models+ ""String_Node_Str""+ moduleDefinitions+ ""String_Node_Str""+ sequences+ ""String_Node_Str""+ nameSpaces+ ""String_Node_Str""+ defaultURIprefix+ ""String_Node_Str""+ complete+ ""String_Node_Str""+ compliant+ ""String_Node_Str""+ typesInURIs+ ""String_Node_Str""+ createDefaults+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + activities + ""String_Node_Str""+ agents+ ""String_Node_Str""+ plans+ ""String_Node_Str""+ implementations+ ""String_Node_Str""+ genericTopLevels+ ""String_Node_Str""+ collections+ ""String_Node_Str""+ componentDefinitions+ ""String_Node_Str""+ models+ ""String_Node_Str""+ moduleDefinitions+ ""String_Node_Str""+ sequences+ ""String_Node_Str""+ nameSpaces+ ""String_Node_Str""+ defaultURIprefix+ ""String_Node_Str""+ complete+ ""String_Node_Str""+ compliant+ ""String_Node_Str""+ typesInURIs+ ""String_Node_Str""+ createDefaults+ ""String_Node_Str"";
}",0.9683098591549296
12386,"/** 
 * @param SBOLDoc
 * @param topLevel
 * @param nested
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private static Implementation parseImplementation(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel,Map<URI,NestedDocument<QName>> nested) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  URI built=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Implementation.built)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        built=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Implementation.Implementation)) {
          Implementation imp=parseImplementation(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue(),nested);
          built=imp.getIdentity();
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Implementation i=new Implementation(topLevel.getIdentity());
  if (displayId != null)   i.setDisplayId(displayId);
  if (persistentIdentity != null)   i.setPersistentIdentity(persistentIdentity);
  if (name != null)   i.setName(name);
  if (description != null)   i.setDescription(description);
  if (!annotations.isEmpty())   i.setAnnotations(annotations);
  if (version != null)   i.setVersion(version);
  i.setWasDerivedFroms(wasDerivedFroms);
  Implementation oldI=SBOLDoc.getImplementation(topLevel.getIdentity());
  if (oldI == null) {
    SBOLDoc.addImplementation(i);
  }
 else {
    if (!i.equals(oldI)) {
      throw new SBOLValidationException(""String_Node_Str"",i);
    }
  }
  return i;
}","/** 
 * @param SBOLDoc
 * @param topLevel
 * @param nested
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private static Implementation parseImplementation(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel,Map<URI,NestedDocument<QName>> nested) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  URI built=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Implementation.built)) {
      if (namedProperty.getValue() instanceof Literal) {
        if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        built=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
      }
 else       if (namedProperty.getValue() instanceof IdentifiableDocument) {
        if (((IdentifiableDocument<QName>)namedProperty).getType().equals(Sbol2Terms.Implementation.Implementation)) {
          Implementation imp=parseImplementation(SBOLDoc,(IdentifiableDocument<QName>)namedProperty.getValue(),nested);
          built=imp.getIdentity();
        }
 else {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
      }
 else {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Implementation i=new Implementation(topLevel.getIdentity());
  if (displayId != null)   i.setDisplayId(displayId);
  if (persistentIdentity != null)   i.setPersistentIdentity(persistentIdentity);
  if (name != null)   i.setName(name);
  if (description != null)   i.setDescription(description);
  if (!annotations.isEmpty())   i.setAnnotations(annotations);
  if (version != null)   i.setVersion(version);
  if (built != null)   i.setBuiltURI(built);
  i.setWasDerivedFroms(wasDerivedFroms);
  Implementation oldI=SBOLDoc.getImplementation(topLevel.getIdentity());
  if (oldI == null) {
    SBOLDoc.addImplementation(i);
  }
 else {
    if (!i.equals(oldI)) {
      throw new SBOLValidationException(""String_Node_Str"",i);
    }
  }
  return i;
}",0.9954632523439862
12387,"private static void formatImplementation(Set<Implementation> implementations,List<TopLevelDocument<QName>> topLevelDoc){
  for (  Implementation implementation : implementations) {
    List<NamedProperty<QName>> list=new ArrayList<>();
    formatCommonTopLevelData(list,implementation);
    list.add(NamedProperty(Sbol2Terms.Implementation.built,implementation.getBuiltURI()));
    topLevelDoc.add(TopLevelDocument(Sbol2Terms.Implementation.Implementation,implementation.getIdentity(),NamedProperties(list)));
  }
}","private static void formatImplementation(Set<Implementation> implementations,List<TopLevelDocument<QName>> topLevelDoc){
  for (  Implementation implementation : implementations) {
    List<NamedProperty<QName>> list=new ArrayList<>();
    formatCommonTopLevelData(list,implementation);
    if (implementation.isSetBuilt()) {
      list.add(NamedProperty(Sbol2Terms.Implementation.built,implementation.getBuiltURI()));
    }
    topLevelDoc.add(TopLevelDocument(Sbol2Terms.Implementation.Implementation,implementation.getIdentity(),NamedProperties(list)));
  }
}",0.95636025998143
12388,"/** 
 * Run SBOL 1.1 / SBOL 2.0 conversion test.
 * @throws Exception
 */
@Test public void test_SBOL2_Files() throws Exception {
  if (file.getAbsolutePath().contains(""String_Node_Str""))   return;
  if (file.getAbsolutePath().contains(""String_Node_Str""))   return;
  try {
    SBOLReader.setURIPrefix(""String_Node_Str"");
    SBOLDocument expected=SBOLReader.read(file);
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    SBOLWriter.write(expected,out);
    SBOLDocument actual=SBOLReader.read(new ByteArrayInputStream(out.toByteArray()));
    if (!actual.equals(expected)) {
      System.out.println(file.getName() + ""String_Node_Str"");
      throw new AssertionError(""String_Node_Str"" + file.getName());
    }
 else {
    }
  }
 catch (  SBOLValidationException e) {
    throw new AssertionError(""String_Node_Str"" + file.getName());
  }
}","/** 
 * Run SBOL 1.1 / SBOL 2.0 conversion test.
 * @throws Exception
 */
@Test public void test_SBOL2_Files() throws Exception {
  if (file.getAbsolutePath().contains(""String_Node_Str""))   return;
  try {
    SBOLReader.setURIPrefix(""String_Node_Str"");
    SBOLDocument expected=SBOLReader.read(file);
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    SBOLWriter.write(expected,out);
    SBOLDocument actual=SBOLReader.read(new ByteArrayInputStream(out.toByteArray()));
    if (!actual.equals(expected)) {
      System.out.println(file.getName() + ""String_Node_Str"");
      throw new AssertionError(""String_Node_Str"" + file.getName());
    }
 else {
    }
  }
 catch (  SBOLValidationException e) {
    throw new AssertionError(""String_Node_Str"" + file.getName());
  }
}",0.9584352078239609
12389,"/** 
 * Adds the given annotation to the list of annotations.
 * @throws SBOLValidationException if any of the following SBOL validation rules was violated:10401, 10501, 10701, 10801, 10901, 11101, 11201, 11301, 11401, 11501, 11601, 11701, 11801, 11901, 12001, 12101, 12301.
 */
void addAnnotation(Annotation annotation) throws SBOLValidationException {
  if (annotations.contains(annotation)) {
    return;
  }
  if (annotation.getQName().getNamespaceURI().equals(Sbol2Terms.sbol2.getNamespaceURI())) {
    if (this instanceof Sequence) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof ComponentDefinition) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Component) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof MapsTo) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof SequenceAnnotation) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Range) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Cut) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof GenericLocation) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof SequenceConstraint) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Model) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof ModuleDefinition) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Module) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof FunctionalComponent) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Interaction) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Participation) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Collection) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof GenericTopLevel) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Activity) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Usage) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Association) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Plan) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Agent) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof CombinatorialDerivation) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof VariableComponent) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Implementation) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
  }
  addNamespace(annotation);
  annotations.add(annotation);
}","/** 
 * Adds the given annotation to the list of annotations.
 * @throws SBOLValidationException if any of the following SBOL validation rules was violated:10401, 10501, 10701, 10801, 10901, 11101, 11201, 11301, 11401, 11501, 11601, 11701, 11801, 11901, 12001, 12101, 12301.
 */
void addAnnotation(Annotation annotation) throws SBOLValidationException {
  if (annotations.contains(annotation)) {
    return;
  }
  if (annotation.getQName().getNamespaceURI().equals(Sbol2Terms.sbol2.getNamespaceURI())) {
    if (this instanceof Sequence) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof ComponentDefinition) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Component) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof MapsTo) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof SequenceAnnotation) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Range) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Cut) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof GenericLocation) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof SequenceConstraint) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Model) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof ModuleDefinition) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Module) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof FunctionalComponent) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Interaction) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Participation) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Collection) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof GenericTopLevel) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Activity) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Usage) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Association) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Plan) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Agent) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof CombinatorialDerivation) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof VariableComponent) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Implementation) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
 else     if (this instanceof Attachment) {
      throw new SBOLValidationException(""String_Node_Str"");
    }
  }
  addNamespace(annotation);
  annotations.add(annotation);
}",0.9838235294117648
12390,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  Implementation other=(Implementation)obj;
  if (!this.built.equals(other.getBuiltURI()))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  Implementation other=(Implementation)obj;
  if (!this.isSetBuilt() || !this.built.equals(other.getBuiltURI()))   return false;
  return true;
}",0.9641693811074918
12391,"/** 
 * Check if this top-level object's and all of its descendants' URIs are all compliant. 
 * @throws SBOLValidationException validation error
 */
abstract void checkDescendantsURIcompliance() throws SBOLValidationException ;","/** 
 * Check if this top-level object's and all of its descendants' URIs are all compliant.
 * @throws SBOLValidationException validation error
 */
abstract void checkDescendantsURIcompliance() throws SBOLValidationException ;",0.9978021978021978
12392,"/** 
 * Make a copy of a top-level object whose URI and its descendants' URIs (children, grandchildren, etc) are all compliant.  It first makes a deep copy of this object, then updates its own identity URI and all of its descendants' identity URIs according to the given   {@code URIprefix, displayId}, and   {@code version}. This method also updates the   {@code displayId}and   {@code version} fields for each updated object.
 * @return the copied top-level object if this object and all of its descendants have compliant URIs, and {@code null} otherwise.
 */
abstract Identified copy(String URIprefix,String displayId,String version) throws SBOLValidationException ;","/** 
 * Make a copy of a top-level object whose URI and its descendants' URIs (children, grandchildren, etc) are all compliant. It first makes a deep copy of this object, then updates its own identity URI and all of its descendants' identity URIs according to the given   {@code URIprefix, displayId}, and  {@code version}. This method also updates the   {@code displayId} and{@code version} fields for each updated object.
 * @return the copied top-level object if this object and all of its descendantshave compliant URIs, and  {@code null} otherwise.
 */
abstract Identified copy(String URIprefix,String displayId,String version) throws SBOLValidationException ;",0.9895052473763118
12393,"/** 
 * Test if the given object's identity URI is compliant.
 * @param objURI
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the following methods:<ul> <li> {@link URIcompliance#isTopLevelURIformCompliant(URI)},</li>  <li>  {@link URIcompliance#isURIcompliant(Identified)}, or</li> <li>  {@link #checkDescendantsURIcompliance()}.</li> </ul>
 */
void isURIcompliant() throws SBOLValidationException {
  try {
    URIcompliance.isURIcompliant(this);
  }
 catch (  SBOLValidationException e) {
    throw new SBOLValidationException(e.getRule(),this);
  }
  this.checkDescendantsURIcompliance();
}","/** 
 * Test if the given object's identity URI is compliant.
 * @param objURI
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the following methods: <ul> <li> {@link URIcompliance#isTopLevelURIformCompliant(URI)},</li> <li>  {@link URIcompliance#isURIcompliant(Identified)}, or</li> <li>  {@link #checkDescendantsURIcompliance()}.</li> </ul>
 */
void isURIcompliant() throws SBOLValidationException {
  try {
    URIcompliance.isURIcompliant(this);
  }
 catch (  SBOLValidationException e) {
    throw new SBOLValidationException(e.getRule(),this);
  }
  this.checkDescendantsURIcompliance();
}",0.9984326018808778
12394,"/** 
 * Creates a child variable component for this combinatorial derivation with the given arguments, and then adds to this combinatorial derivation's list of variable components. <p> This method first creates a compliant URI for the child variable component to be created. This URI starts with this combinatorial derivation's persistent identity, followed by the given display ID and ends with this combinatorial derivation's version.
 * @param displayId the display ID for the variable component to be created
 * @param operator the operator property for the variable component to be created
 * @param variable the component referenced by the variable component to be created
 * @return the created variable component
 * @throws SBOLValidationException if any of the following SBOL validation rules was violated:  10201, 10202, 10204, 10206, 13002, 13003, 13004, 13005.
 */
public VariableComponent createVariableComponent(String displayId,OperatorType operator,Component variable) throws SBOLValidationException {
  String URIprefix=this.getPersistentIdentity().toString();
  String version=this.getVersion();
  VariableComponent c=createVariableComponent(createCompliantURI(URIprefix,displayId,version),operator,variable);
  c.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  c.setDisplayId(displayId);
  c.setVersion(version);
  return c;
}","/** 
 * Creates a child variable component for this combinatorial derivation with the given arguments, and then adds to this combinatorial derivation's list of variable components. <p> This method first creates a compliant URI for the child variable component to be created. This URI starts with this combinatorial derivation's persistent identity, followed by the given display ID and ends with this combinatorial derivation's version.
 * @param displayId the display ID for the variable component to be created
 * @param operator the operator property for the variable component to be created
 * @param variableId the component displayId referenced by the variable component to be created
 * @return the created variable component
 * @throws SBOLValidationException if any of the following SBOL validation rules was violated:  10201, 10202, 10204, 10206, 13002, 13003, 13004, 13005.
 */
public VariableComponent createVariableComponent(String displayId,OperatorType operator,String variableId) throws SBOLValidationException {
  URI variableURI=URIcompliance.createCompliantURI(getTemplate().getPersistentIdentity().toString(),variableId,getTemplate().getVersion());
  return createVariableComponent(displayId,operator,variableURI);
}",0.8085594191822698
12395,"private static void formatVariableComponents(Set<VariableComponent> variableComponents,List<NamedProperty<QName>> properties){
  for (  VariableComponent variableComponent : variableComponents) {
    List<NamedProperty<QName>> list=new ArrayList<>();
    formatCommonIdentifiedData(list,variableComponent);
    list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariable,variableComponent.getVariable().getIdentity()));
    list.add(NamedProperty(Sbol2Terms.VariableComponent.hasOperator,OperatorType.convertToURI(variableComponent.getOperator())));
    for (    URI variant : variableComponent.getVariantURIs()) {
      list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariants,variant));
    }
    for (    URI variantCollection : variableComponent.getVariantCollectionURIs()) {
      list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariantCollections,variantCollection));
    }
    for (    URI variantDerivation : variableComponent.getVariantDerivationURIs()) {
      list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariantDerivations,variantDerivation));
    }
    properties.add(NamedProperty(Sbol2Terms.CombinatorialDerivation.hasVariableComponent,NestedDocument(Sbol2Terms.VariableComponent.VariableComponent,variableComponent.getIdentity(),NamedProperties(list))));
  }
}","private static void formatVariableComponents(Set<VariableComponent> variableComponents,List<NamedProperty<QName>> properties){
  for (  VariableComponent variableComponent : variableComponents) {
    List<NamedProperty<QName>> list=new ArrayList<>();
    formatCommonIdentifiedData(list,variableComponent);
    list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariable,variableComponent.getVariableURI()));
    list.add(NamedProperty(Sbol2Terms.VariableComponent.hasOperator,OperatorType.convertToURI(variableComponent.getOperator())));
    for (    URI variant : variableComponent.getVariantURIs()) {
      list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariants,variant));
    }
    for (    URI variantCollection : variableComponent.getVariantCollectionURIs()) {
      list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariantCollections,variantCollection));
    }
    for (    URI variantDerivation : variableComponent.getVariantDerivationURIs()) {
      list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariantDerivations,variantDerivation));
    }
    properties.add(NamedProperty(Sbol2Terms.CombinatorialDerivation.hasVariableComponent,NestedDocument(Sbol2Terms.VariableComponent.VariableComponent,variableComponent.getIdentity(),NamedProperties(list))));
  }
}",0.627647285329226
12396,"/** 
 * Returns the instance matching the given variable component's variable.
 * @return the matching component if present, or {@code null} otherwise.
 */
public Component getVariable(){
  if (combinatorialDerivation == null)   return null;
  return combinatorialDerivation.getTemplate().getComponent(variable);
}","/** 
 * Returns the instance matching the given variable component's variable.
 * @return the matching component if present, or {@code null} otherwise.
 */
public Component getVariable(){
  if (combinatorialDerivation == null)   return null;
  if (combinatorialDerivation.getTemplate() == null)   return null;
  return combinatorialDerivation.getTemplate().getComponent(variable);
}",0.882183908045977
12397,"public static void main(String[] args){
  try {
    System.out.println(SynBioHubFrontend.getRegistries());
  }
 catch (  SynBioHubException e) {
    e.printStackTrace();
  }
}","public static void main(String[] args) throws SBOLValidationException, IOException, SBOLConversionException {
  SBOLDocument doc=SBOLReader.read(""String_Node_Str"");
  doc=doc.createRecursiveCopy(doc.getTopLevel(URI.create(""String_Node_Str"")));
  doc.write(System.out);
}",0.2696629213483146
12398,"private void updateReferences(HashMap<URI,URI> uriMap) throws SBOLValidationException {
  for (  TopLevel topLevel : getTopLevels()) {
    for (    URI wasDerivedFrom : topLevel.getWasDerivedFroms()) {
      if (uriMap.get(wasDerivedFrom) != null) {
        topLevel.removeWasDerivedFrom(wasDerivedFrom);
        topLevel.addWasDerivedFrom(uriMap.get(wasDerivedFrom));
      }
    }
    for (    URI wasGeneratedBy : topLevel.getWasGeneratedBys()) {
      if (uriMap.get(wasGeneratedBy) != null) {
        topLevel.removeWasGeneratedBy(wasGeneratedBy);
        topLevel.addWasGeneratedBy(uriMap.get(wasGeneratedBy));
      }
    }
  }
  for (  Collection collection : getCollections()) {
    for (    URI memberURI : collection.getMemberURIs()) {
      if (uriMap.get(memberURI) != null) {
        collection.removeMember(memberURI);
        collection.addMember(uriMap.get(memberURI));
      }
    }
    updateReferences(collection,uriMap);
  }
  for (  ComponentDefinition componentDefinition : getComponentDefinitions()) {
    updateReferences(componentDefinition,uriMap);
    for (    Component component : componentDefinition.getComponents()) {
      if (uriMap.get(component.getDefinitionURI()) != null) {
        component.setDefinition(uriMap.get(component.getDefinitionURI()));
        for (        MapsTo mapsTo : component.getMapsTos()) {
          ComponentDefinition cd=getComponentDefinition(component.getDefinitionURI());
          if (cd != null) {
            String displayId=URIcompliance.extractDisplayId(mapsTo.getRemoteURI());
            URI newURI=URIcompliance.createCompliantURI(cd.getPersistentIdentity().toString(),displayId,cd.getVersion());
            mapsTo.setRemote(newURI);
          }
        }
      }
      updateReferences(component,uriMap);
      for (      MapsTo mapsTo : component.getMapsTos()) {
        updateReferences(mapsTo,uriMap);
      }
    }
    for (    SequenceAnnotation sa : componentDefinition.getSequenceAnnotations()) {
      for (      Location loc : sa.getLocations()) {
        updateReferences(loc,uriMap);
      }
      updateReferences(sa,uriMap);
    }
    for (    SequenceConstraint sc : componentDefinition.getSequenceConstraints()) {
      updateReferences(sc,uriMap);
    }
    for (    URI sequenceURI : componentDefinition.getSequenceURIs()) {
      if (uriMap.get(sequenceURI) != null) {
        componentDefinition.removeSequence(sequenceURI);
        componentDefinition.addSequence(uriMap.get(sequenceURI));
      }
    }
  }
  for (  ModuleDefinition moduleDefinition : getModuleDefinitions()) {
    updateReferences(moduleDefinition,uriMap);
    for (    FunctionalComponent functionalComponent : moduleDefinition.getFunctionalComponents()) {
      if (uriMap.get(functionalComponent.getDefinitionURI()) != null) {
        functionalComponent.setDefinition(uriMap.get(functionalComponent.getDefinitionURI()));
        for (        MapsTo mapsTo : functionalComponent.getMapsTos()) {
          ComponentDefinition cd=getComponentDefinition(functionalComponent.getDefinitionURI());
          if (cd != null) {
            String displayId=URIcompliance.extractDisplayId(mapsTo.getRemoteURI());
            URI newURI=URIcompliance.createCompliantURI(cd.getPersistentIdentity().toString(),displayId,cd.getVersion());
            mapsTo.setRemote(newURI);
          }
        }
      }
      updateReferences(functionalComponent,uriMap);
      for (      MapsTo mapsTo : functionalComponent.getMapsTos()) {
        updateReferences(mapsTo,uriMap);
      }
    }
    for (    Module module : moduleDefinition.getModules()) {
      if (uriMap.get(module.getDefinitionURI()) != null) {
        module.setDefinition(uriMap.get(module.getDefinitionURI()));
        for (        MapsTo mapsTo : module.getMapsTos()) {
          ModuleDefinition md=getModuleDefinition(module.getDefinitionURI());
          if (md != null) {
            String displayId=URIcompliance.extractDisplayId(mapsTo.getRemoteURI());
            URI newURI=URIcompliance.createCompliantURI(md.getPersistentIdentity().toString(),displayId,md.getVersion());
            mapsTo.setRemote(newURI);
          }
        }
      }
      updateReferences(module,uriMap);
      for (      MapsTo mapsTo : module.getMapsTos()) {
        updateReferences(mapsTo,uriMap);
      }
    }
    for (    Interaction interaction : moduleDefinition.getInteractions()) {
      updateReferences(interaction,uriMap);
      for (      Participation participation : interaction.getParticipations()) {
        updateReferences(participation,uriMap);
      }
    }
    for (    URI modelURI : moduleDefinition.getModelURIs()) {
      if (uriMap.get(modelURI) != null) {
        moduleDefinition.removeModel(modelURI);
        moduleDefinition.addModel(uriMap.get(modelURI));
      }
    }
  }
  for (  Model model : getModels()) {
    updateReferences(model,uriMap);
  }
  for (  Sequence sequence : getSequences()) {
    updateReferences(sequence,uriMap);
  }
  for (  GenericTopLevel genericTopLevel : getGenericTopLevels()) {
    updateReferences(genericTopLevel,uriMap);
  }
  for (  Activity activity : getActivities()) {
    updateReferences(activity,uriMap);
    for (    Association association : activity.getAssociations()) {
      if (uriMap.get(association.getAgentURI()) != null) {
        association.setAgent(uriMap.get(association.getAgentURI()));
      }
      if (uriMap.get(association.getPlanURI()) != null) {
        association.setPlan(uriMap.get(association.getPlanURI()));
      }
      updateReferences(association,uriMap);
    }
    for (    Usage usage : activity.getUsages()) {
      if (uriMap.get(usage.getEntityURI()) != null) {
        usage.setEntity(uriMap.get(usage.getEntity()));
      }
      updateReferences(usage,uriMap);
    }
  }
  for (  Agent agent : getAgents()) {
    updateReferences(agent,uriMap);
  }
  for (  Plan plan : getPlans()) {
    updateReferences(plan,uriMap);
  }
}","private void updateReferences(HashMap<URI,URI> uriMap) throws SBOLValidationException {
  for (  TopLevel topLevel : getTopLevels()) {
    for (    URI wasDerivedFrom : topLevel.getWasDerivedFroms()) {
      if (uriMap.get(wasDerivedFrom) != null) {
        topLevel.removeWasDerivedFrom(wasDerivedFrom);
        topLevel.addWasDerivedFrom(uriMap.get(wasDerivedFrom));
      }
    }
    for (    URI wasGeneratedBy : topLevel.getWasGeneratedBys()) {
      if (uriMap.get(wasGeneratedBy) != null) {
        topLevel.removeWasGeneratedBy(wasGeneratedBy);
        topLevel.addWasGeneratedBy(uriMap.get(wasGeneratedBy));
      }
    }
  }
  for (  Collection collection : getCollections()) {
    for (    URI memberURI : collection.getMemberURIs()) {
      if (uriMap.get(memberURI) != null) {
        collection.removeMember(memberURI);
        collection.addMember(uriMap.get(memberURI));
      }
    }
    updateReferences(collection,uriMap);
  }
  for (  ComponentDefinition componentDefinition : getComponentDefinitions()) {
    updateReferences(componentDefinition,uriMap);
    for (    Component component : componentDefinition.getComponents()) {
      if (uriMap.get(component.getDefinitionURI()) != null) {
        component.setDefinition(uriMap.get(component.getDefinitionURI()));
        for (        MapsTo mapsTo : component.getMapsTos()) {
          ComponentDefinition cd=getComponentDefinition(component.getDefinitionURI());
          if (cd != null) {
            String displayId=URIcompliance.extractDisplayId(mapsTo.getRemoteURI());
            URI newURI=URIcompliance.createCompliantURI(cd.getPersistentIdentity().toString(),displayId,cd.getVersion());
            mapsTo.setRemote(newURI);
          }
        }
      }
      updateReferences(component,uriMap);
      for (      MapsTo mapsTo : component.getMapsTos()) {
        updateReferences(mapsTo,uriMap);
      }
    }
    for (    SequenceAnnotation sa : componentDefinition.getSequenceAnnotations()) {
      for (      Location loc : sa.getLocations()) {
        updateReferences(loc,uriMap);
      }
      updateReferences(sa,uriMap);
    }
    for (    SequenceConstraint sc : componentDefinition.getSequenceConstraints()) {
      updateReferences(sc,uriMap);
    }
    for (    URI sequenceURI : componentDefinition.getSequenceURIs()) {
      if (uriMap.get(sequenceURI) != null) {
        componentDefinition.removeSequence(sequenceURI);
        componentDefinition.addSequence(uriMap.get(sequenceURI));
      }
    }
  }
  for (  ModuleDefinition moduleDefinition : getModuleDefinitions()) {
    updateReferences(moduleDefinition,uriMap);
    for (    FunctionalComponent functionalComponent : moduleDefinition.getFunctionalComponents()) {
      if (uriMap.get(functionalComponent.getDefinitionURI()) != null) {
        functionalComponent.setDefinition(uriMap.get(functionalComponent.getDefinitionURI()));
        for (        MapsTo mapsTo : functionalComponent.getMapsTos()) {
          ComponentDefinition cd=getComponentDefinition(functionalComponent.getDefinitionURI());
          if (cd != null) {
            String displayId=URIcompliance.extractDisplayId(mapsTo.getRemoteURI());
            URI newURI=URIcompliance.createCompliantURI(cd.getPersistentIdentity().toString(),displayId,cd.getVersion());
            mapsTo.setRemote(newURI);
          }
        }
      }
      updateReferences(functionalComponent,uriMap);
      for (      MapsTo mapsTo : functionalComponent.getMapsTos()) {
        updateReferences(mapsTo,uriMap);
      }
    }
    for (    Module module : moduleDefinition.getModules()) {
      if (uriMap.get(module.getDefinitionURI()) != null) {
        module.setDefinition(uriMap.get(module.getDefinitionURI()));
        for (        MapsTo mapsTo : module.getMapsTos()) {
          ModuleDefinition md=getModuleDefinition(module.getDefinitionURI());
          if (md != null) {
            String displayId=URIcompliance.extractDisplayId(mapsTo.getRemoteURI());
            URI newURI=URIcompliance.createCompliantURI(md.getPersistentIdentity().toString(),displayId,md.getVersion());
            mapsTo.setRemote(newURI);
          }
        }
      }
      updateReferences(module,uriMap);
      for (      MapsTo mapsTo : module.getMapsTos()) {
        updateReferences(mapsTo,uriMap);
      }
    }
    for (    Interaction interaction : moduleDefinition.getInteractions()) {
      updateReferences(interaction,uriMap);
      for (      Participation participation : interaction.getParticipations()) {
        updateReferences(participation,uriMap);
      }
    }
    for (    URI modelURI : moduleDefinition.getModelURIs()) {
      if (uriMap.get(modelURI) != null) {
        moduleDefinition.removeModel(modelURI);
        moduleDefinition.addModel(uriMap.get(modelURI));
      }
    }
  }
  for (  Model model : getModels()) {
    updateReferences(model,uriMap);
  }
  for (  Sequence sequence : getSequences()) {
    updateReferences(sequence,uriMap);
  }
  for (  GenericTopLevel genericTopLevel : getGenericTopLevels()) {
    updateReferences(genericTopLevel,uriMap);
  }
  for (  Activity activity : getActivities()) {
    updateReferences(activity,uriMap);
    for (    Association association : activity.getAssociations()) {
      if (uriMap.get(association.getAgentURI()) != null) {
        association.setAgent(uriMap.get(association.getAgentURI()));
      }
      if (uriMap.get(association.getPlanURI()) != null) {
        association.setPlan(uriMap.get(association.getPlanURI()));
      }
      updateReferences(association,uriMap);
    }
    for (    Usage usage : activity.getUsages()) {
      if (uriMap.get(usage.getEntityURI()) != null) {
        usage.setEntity(uriMap.get(usage.getEntityURI()));
      }
      updateReferences(usage,uriMap);
    }
  }
  for (  Agent agent : getAgents()) {
    updateReferences(agent,uriMap);
  }
  for (  Plan plan : getPlans()) {
    updateReferences(plan,uriMap);
  }
}",0.9997476234541935
12399,"/** 
 * Copy all objects to an a new SBOL Document and change the URI prefix/version of each object
 * @param URIPrefix new URI prefix
 * @param version new version
 * @return new SBOL document with changed URI prefix
 * @throws SBOLValidationException if URIprefix or version provided is invalid
 */
public SBOLDocument changeURIPrefixVersion(String URIPrefix,String version) throws SBOLValidationException {
  SBOLDocument document=new SBOLDocument();
  SBOLDocument fixed=new SBOLDocument();
  fixed.setDefaultURIprefix(URIPrefix);
  this.fixDocumentURIPrefix();
  fixed.createCopy(this);
  String documentURIPrefix=fixed.extractDocumentURIPrefix();
  HashMap<URI,URI> uriMap=new HashMap<URI,URI>();
  for (  TopLevel topLevel : fixed.getTopLevels()) {
    fixed.rename(topLevel,URIPrefix,null,version);
    TopLevel newTL=document.createCopy(topLevel,URIPrefix,null,version);
    uriMap.put(topLevel.getIdentity(),newTL.getIdentity());
    uriMap.put(topLevel.getPersistentIdentity(),newTL.getPersistentIdentity());
  }
  document.updateReferences(uriMap);
  for (  TopLevel topLevel : document.getTopLevels()) {
    document.changeURIPrefixVersion(topLevel,URIPrefix,version,documentURIPrefix);
  }
  document.setDefaultURIprefix(URIPrefix);
  return document;
}","/** 
 * Copy all objects to an a new SBOL Document and change the URI prefix/version of each object
 * @param URIPrefix new URI prefix
 * @param version new version
 * @return new SBOL document with changed URI prefix
 * @throws SBOLValidationException if URIprefix or version provided is invalid
 */
public SBOLDocument changeURIPrefixVersion(String URIPrefix,String version) throws SBOLValidationException {
  SBOLDocument document=new SBOLDocument();
  SBOLDocument fixed=new SBOLDocument();
  fixed.setDefaultURIprefix(URIPrefix);
  this.fixDocumentURIPrefix();
  fixed.createCopy(this);
  String documentURIPrefix=fixed.extractDocumentURIPrefix();
  HashMap<URI,URI> uriMap=new HashMap<URI,URI>();
  for (  TopLevel topLevel : fixed.getTopLevels()) {
    fixed.rename(topLevel,URIPrefix,null,version);
    TopLevel newTL=document.createCopy(topLevel,URIPrefix,null,version);
    uriMap.put(topLevel.getIdentity(),newTL.getIdentity());
    if (!topLevel.getIdentity().equals(topLevel.getPersistentIdentity())) {
      uriMap.put(topLevel.getPersistentIdentity(),newTL.getPersistentIdentity());
    }
  }
  document.updateReferences(uriMap);
  for (  TopLevel topLevel : document.getTopLevels()) {
    document.changeURIPrefixVersion(topLevel,URIPrefix,version,documentURIPrefix);
  }
  document.setDefaultURIprefix(URIPrefix);
  return document;
}",0.9679144385026738
12400,"/** 
 * @param document document to copy recursively into
 * @param topLevel topLevel that is being recursively copied from
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in {@link SBOLDocument#createCopy(TopLevel)}.
 */
public void createRecursiveCopy(SBOLDocument document,TopLevel topLevel) throws SBOLValidationException {
  if (document.getTopLevelLocalOnly(topLevel.getIdentity()) != null)   return;
  for (  URI wasDerivedFromURI : topLevel.getWasDerivedFroms()) {
    TopLevel wasDerivedFrom=document.getTopLevelLocalOnly(wasDerivedFromURI);
    if (wasDerivedFrom != null) {
      createRecursiveCopy(document,wasDerivedFrom);
    }
  }
  for (  URI wasGeneratedByURI : topLevel.getWasGeneratedBys()) {
    TopLevel wasGeneratedBy=document.getTopLevelLocalOnly(wasGeneratedByURI);
    if (wasGeneratedBy != null) {
      createRecursiveCopy(document,wasGeneratedBy);
    }
  }
  if (topLevel instanceof GenericTopLevel || topLevel instanceof Sequence || topLevel instanceof Model|| topLevel instanceof Plan|| topLevel instanceof Agent) {
    document.createCopy(topLevel);
  }
 else   if (topLevel instanceof Collection) {
    for (    TopLevel member : ((Collection)topLevel).getMembers()) {
      createRecursiveCopy(document,member);
    }
    document.createCopy(topLevel);
  }
 else   if (topLevel instanceof ComponentDefinition) {
    for (    Component component : ((ComponentDefinition)topLevel).getComponents()) {
      if (component.getDefinition() != null) {
        createRecursiveCopy(document,component.getDefinition());
      }
    }
    for (    TopLevel sequence : ((ComponentDefinition)topLevel).getSequences()) {
      createRecursiveCopy(document,sequence);
    }
    document.createCopy(topLevel);
  }
 else   if (topLevel instanceof CombinatorialDerivation) {
    if (((CombinatorialDerivation)topLevel).getTemplate() != null) {
      createRecursiveCopy(document,((CombinatorialDerivation)topLevel).getTemplate());
    }
    for (    VariableComponent variableComponent : ((CombinatorialDerivation)topLevel).getVariableComponents()) {
      for (      Collection collection : variableComponent.getVariantCollections()) {
        createRecursiveCopy(document,collection);
      }
      for (      ComponentDefinition componentDefinition : variableComponent.getVariants()) {
        createRecursiveCopy(document,componentDefinition);
      }
      for (      CombinatorialDerivation combinatorialDerivation : variableComponent.getVariantDerivations()) {
        createRecursiveCopy(document,combinatorialDerivation);
      }
    }
    document.createCopy(topLevel);
  }
 else   if (topLevel instanceof ModuleDefinition) {
    for (    FunctionalComponent functionalComponent : ((ModuleDefinition)topLevel).getFunctionalComponents()) {
      if (functionalComponent.getDefinition() != null) {
        createRecursiveCopy(document,functionalComponent.getDefinition());
      }
    }
    for (    Module module : ((ModuleDefinition)topLevel).getModules()) {
      if (module.getDefinition() != null) {
        createRecursiveCopy(document,module.getDefinition());
      }
    }
    for (    Model model : ((ModuleDefinition)topLevel).getModels()) {
      if (document.getModel(model.getIdentity()) != null)       continue;
      document.createCopy(model);
    }
    document.createCopy(topLevel);
  }
 else   if (topLevel instanceof Activity) {
    for (    Association association : ((Activity)topLevel).getAssociations()) {
      if (association.getAgent() != null) {
        createRecursiveCopy(document,association.getAgent());
      }
      if (association.getPlan() != null) {
        createRecursiveCopy(document,association.getPlan());
      }
    }
    for (    Usage usage : ((Activity)topLevel).getUsages()) {
      if (usage.getEntity() != null) {
        createRecursiveCopy(document,usage.getEntity());
      }
    }
    document.createCopy(topLevel);
  }
  for (  Annotation annotation : topLevel.getAnnotations()) {
    if (annotation.isURIValue()) {
      TopLevel gtl=getTopLevelLocalOnly(annotation.getURIValue());
      if (gtl != null)       createRecursiveCopy(document,gtl);
    }
 else     if (annotation.isNestedAnnotations()) {
      for (      Annotation nestedAnnotation : annotation.getAnnotations()) {
        createRecursiveCopy(document,nestedAnnotation);
      }
    }
  }
}","/** 
 * @param document document to copy recursively into
 * @param topLevel topLevel that is being recursively copied from
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in {@link SBOLDocument#createCopy(TopLevel)}.
 */
public void createRecursiveCopy(SBOLDocument document,TopLevel topLevel) throws SBOLValidationException {
  if (document.getTopLevelLocalOnly(topLevel.getIdentity()) != null)   return;
  for (  URI wasDerivedFromURI : topLevel.getWasDerivedFroms()) {
    TopLevel wasDerivedFrom=getTopLevelLocalOnly(wasDerivedFromURI);
    if (wasDerivedFrom != null) {
      createRecursiveCopy(document,wasDerivedFrom);
    }
  }
  for (  URI wasGeneratedByURI : topLevel.getWasGeneratedBys()) {
    TopLevel wasGeneratedBy=getTopLevelLocalOnly(wasGeneratedByURI);
    if (wasGeneratedBy != null) {
      createRecursiveCopy(document,wasGeneratedBy);
    }
  }
  if (topLevel instanceof GenericTopLevel || topLevel instanceof Sequence || topLevel instanceof Model|| topLevel instanceof Plan|| topLevel instanceof Agent) {
    document.createCopy(topLevel);
  }
 else   if (topLevel instanceof Collection) {
    for (    TopLevel member : ((Collection)topLevel).getMembers()) {
      createRecursiveCopy(document,member);
    }
    document.createCopy(topLevel);
  }
 else   if (topLevel instanceof ComponentDefinition) {
    for (    Component component : ((ComponentDefinition)topLevel).getComponents()) {
      if (component.getDefinition() != null) {
        createRecursiveCopy(document,component.getDefinition());
      }
    }
    for (    TopLevel sequence : ((ComponentDefinition)topLevel).getSequences()) {
      createRecursiveCopy(document,sequence);
    }
    document.createCopy(topLevel);
  }
 else   if (topLevel instanceof CombinatorialDerivation) {
    if (((CombinatorialDerivation)topLevel).getTemplate() != null) {
      createRecursiveCopy(document,((CombinatorialDerivation)topLevel).getTemplate());
    }
    for (    VariableComponent variableComponent : ((CombinatorialDerivation)topLevel).getVariableComponents()) {
      for (      Collection collection : variableComponent.getVariantCollections()) {
        createRecursiveCopy(document,collection);
      }
      for (      ComponentDefinition componentDefinition : variableComponent.getVariants()) {
        createRecursiveCopy(document,componentDefinition);
      }
      for (      CombinatorialDerivation combinatorialDerivation : variableComponent.getVariantDerivations()) {
        createRecursiveCopy(document,combinatorialDerivation);
      }
    }
    document.createCopy(topLevel);
  }
 else   if (topLevel instanceof ModuleDefinition) {
    for (    FunctionalComponent functionalComponent : ((ModuleDefinition)topLevel).getFunctionalComponents()) {
      if (functionalComponent.getDefinition() != null) {
        createRecursiveCopy(document,functionalComponent.getDefinition());
      }
    }
    for (    Module module : ((ModuleDefinition)topLevel).getModules()) {
      if (module.getDefinition() != null) {
        createRecursiveCopy(document,module.getDefinition());
      }
    }
    for (    Model model : ((ModuleDefinition)topLevel).getModels()) {
      if (document.getModel(model.getIdentity()) != null)       continue;
      document.createCopy(model);
    }
    document.createCopy(topLevel);
  }
 else   if (topLevel instanceof Activity) {
    for (    Association association : ((Activity)topLevel).getAssociations()) {
      if (association.getAgent() != null) {
        createRecursiveCopy(document,association.getAgent());
      }
      if (association.getPlan() != null) {
        createRecursiveCopy(document,association.getPlan());
      }
    }
    for (    Usage usage : ((Activity)topLevel).getUsages()) {
      if (usage.getEntity() != null) {
        createRecursiveCopy(document,usage.getEntity());
      }
    }
    document.createCopy(topLevel);
  }
  for (  Annotation annotation : topLevel.getAnnotations()) {
    if (annotation.isURIValue()) {
      TopLevel gtl=getTopLevelLocalOnly(annotation.getURIValue());
      if (gtl != null)       createRecursiveCopy(document,gtl);
    }
 else     if (annotation.isNestedAnnotations()) {
      for (      Annotation nestedAnnotation : annotation.getAnnotations()) {
        createRecursiveCopy(document,nestedAnnotation);
      }
    }
  }
}",0.9979357798165136
12401,"/** 
 * Sets the template property to the given one.
 * @param template the given template URI to set to
 * @throws SBOLValidationException if either of the following SBOL validation rules was violated: TODO: 10602, 10604.
 */
public void setTemplate(URI template) throws SBOLValidationException {
  this.template=template;
  if (template == null) {
    throw new SBOLValidationException(""String_Node_Str"",this);
  }
  if (this.getSBOLDocument() != null && this.getSBOLDocument().isComplete()) {
    if (this.getSBOLDocument().getComponentDefinition(template) == null) {
      throw new SBOLValidationException(""String_Node_Str"",this);
    }
  }
  this.template=template;
}","/** 
 * Sets the template property to the given one.
 * @param template the given template URI to set to
 * @throws SBOLValidationException if either of the following SBOL validation rules was violated: TODO: 10602, 10604.
 */
public void setTemplate(URI template) throws SBOLValidationException {
  if (template == null) {
    throw new SBOLValidationException(""String_Node_Str"",this);
  }
  if (this.getSBOLDocument() != null && this.getSBOLDocument().isComplete()) {
    if (this.getSBOLDocument().getComponentDefinition(template) == null) {
      throw new SBOLValidationException(""String_Node_Str"",this);
    }
  }
  this.template=template;
}",0.9803030303030305
12402,"/** 
 * Returns the top-level matching the given identity URI from this SBOL document's lists of top-levels.
 * @param topLevelURI the identity URI of the top-level to be retrieved
 * @return the matching top-level if present, or {@code null} otherwise.
 */
public TopLevel getTopLevel(URI topLevelURI){
  TopLevel topLevel=getTopLevelLocalOnly(topLevelURI);
  if (topLevel == null) {
    for (    SynBioHubFrontend frontend : getRegistries()) {
      try {
        SBOLDocument document=frontend.getSBOL(topLevelURI);
        if (document != null) {
          topLevel=document.getTopLevel(topLevelURI);
          createCopy(document);
        }
      }
 catch (      SynBioHubException|SBOLValidationException e) {
        topLevel=null;
      }
    }
  }
  return null;
}","/** 
 * Returns the top-level matching the given identity URI from this SBOL document's lists of top-levels.
 * @param topLevelURI the identity URI of the top-level to be retrieved
 * @return the matching top-level if present, or {@code null} otherwise.
 */
public TopLevel getTopLevel(URI topLevelURI){
  TopLevel topLevel=getTopLevelLocalOnly(topLevelURI);
  if (topLevel == null) {
    for (    SynBioHubFrontend frontend : getRegistries()) {
      try {
        SBOLDocument document=frontend.getSBOL(topLevelURI);
        if (document != null) {
          topLevel=document.getTopLevel(topLevelURI);
          createCopy(document);
        }
      }
 catch (      SynBioHubException|SBOLValidationException e) {
        topLevel=null;
      }
    }
  }
  return topLevel;
}",0.993556701030928
12403,"private static void formatCombinatorialDerivation(Set<CombinatorialDerivation> combinatorialDerivations,List<TopLevelDocument<QName>> topLevelDoc){
  for (  CombinatorialDerivation combinatorialDerivation : combinatorialDerivations) {
    List<NamedProperty<QName>> list=new ArrayList<>();
    formatCommonTopLevelData(list,combinatorialDerivation);
    list.add(NamedProperty(Sbol2Terms.CombinatorialDerivation.template,combinatorialDerivation.getTemplateURI()));
    list.add(NamedProperty(Sbol2Terms.CombinatorialDerivation.strategy,StrategyType.convertToURI(combinatorialDerivation.getStrategy())));
    formatVariableComponents(combinatorialDerivation.getVariableComponents(),list);
    topLevelDoc.add(TopLevelDocument(Sbol2Terms.CombinatorialDerivation.CombinatorialDerivation,combinatorialDerivation.getIdentity(),NamedProperties(list)));
  }
}","private static void formatCombinatorialDerivation(Set<CombinatorialDerivation> combinatorialDerivations,List<TopLevelDocument<QName>> topLevelDoc){
  for (  CombinatorialDerivation combinatorialDerivation : combinatorialDerivations) {
    List<NamedProperty<QName>> list=new ArrayList<>();
    formatCommonTopLevelData(list,combinatorialDerivation);
    list.add(NamedProperty(Sbol2Terms.CombinatorialDerivation.template,combinatorialDerivation.getTemplateURI()));
    if (combinatorialDerivation.isSetStrategy()) {
      list.add(NamedProperty(Sbol2Terms.CombinatorialDerivation.strategy,StrategyType.convertToURI(combinatorialDerivation.getStrategy())));
    }
    formatVariableComponents(combinatorialDerivation.getVariableComponents(),list);
    topLevelDoc.add(TopLevelDocument(Sbol2Terms.CombinatorialDerivation.CombinatorialDerivation,combinatorialDerivation.getIdentity(),NamedProperties(list)));
  }
}",0.9665343165059558
12404,"public static void main(String[] args){
  try {
    SynBioHubFrontend sbh=new SynBioHubFrontend(""String_Node_Str"",""String_Node_Str"");
    sbh.login(""String_Node_Str"",""String_Node_Str"");
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    String filename=sbh.getAttachment(URI.create(""String_Node_Str""),outputStream);
    File file=new File(""String_Node_Str"" + filename);
    FileOutputStream fileOutputStream=new FileOutputStream(file);
    fileOutputStream.write(outputStream.toByteArray());
    fileOutputStream.close();
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    SBOLDocument doc=new SBOLDocument();
    doc.setDefaultURIprefix(""String_Node_Str"");
    ComponentDefinition cd=doc.createComponentDefinition(""String_Node_Str"",ComponentDefinition.DNA);
    ComponentDefinition variant=doc.createComponentDefinition(""String_Node_Str"",ComponentDefinition.DNA);
    ComponentDefinition variant2=doc.createComponentDefinition(""String_Node_Str"",ComponentDefinition.DNA);
    doc.createComponentDefinition(""String_Node_Str"",ComponentDefinition.DNA);
    Component comp=cd.createComponent(""String_Node_Str"",AccessType.PUBLIC,""String_Node_Str"");
    Component comp2=cd.createComponent(""String_Node_Str"",AccessType.PUBLIC,""String_Node_Str"");
    CombinatorialDerivation combDeriv=doc.createCombinatorialDerivation(""String_Node_Str"",cd.getIdentity());
    VariableComponent vc=combDeriv.createVariableComponent(""String_Node_Str"",OperatorType.ONE,comp);
    vc.addVariant(variant.getIdentity());
    VariableComponent vc2=combDeriv.createVariableComponent(""String_Node_Str"",OperatorType.ONE,comp2);
    vc2.addVariant(variant2.getIdentity());
    SBOLDocument doc2=doc.createRecursiveCopy(combDeriv);
    doc2.write(System.out);
    SBOLValidate.compareDocuments(""String_Node_Str"",doc,""String_Node_Str"",doc2);
    if (SBOLValidate.getNumErrors() > 0) {
      for (      String error : SBOLValidate.getErrors()) {
        System.out.println(error);
      }
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}",0.1220791607057701
12405,"/** 
 * Adds the given variant collection to the list of variant collections.
 * @param uriPrefix TODO: change variable name
 * @param displayId
 * @param version
 * @throws SBOLValidationException 
 */
public void addVariantCollection(String uriPrefix,String displayId,String version) throws SBOLValidationException {
  URI uri=URIcompliance.createCompliantURI(uriPrefix,displayId,version);
  Collection collection=this.getSBOLDocument().getCollection(uri);
  variantCollections.add(collection.getIdentity());
}","/** 
 * Adds the given variant collection to the list of variant collections.
 * @param uriPrefix URI prefix for variant collection
 * @param displayId display id for variant collection
 * @param version version for variant collection
 * @throws SBOLValidationException if the following SBOL validation rule was violated: 
 */
public void addVariantCollection(String uriPrefix,String displayId,String version) throws SBOLValidationException {
  URI uri=URIcompliance.createCompliantURI(uriPrefix,displayId,version);
  Collection collection=this.getSBOLDocument().getCollection(uri);
  variantCollections.add(collection.getIdentity());
}",0.8083623693379791
12406,"/** 
 * Adds the given variant derivation to the list of variant derivations.
 * @param uriPrefix TODO: change variable name
 * @param displayId
 * @param version
 * @throws SBOLValidationException 
 */
public void addVariantDerivation(String uriPrefix,String displayId,String version) throws SBOLValidationException {
  URI uri=URIcompliance.createCompliantURI(uriPrefix,displayId,version);
  CombinatorialDerivation combinatorialDerivation=this.getSBOLDocument().getCombinatorialDerivation(uri);
  variants.add(combinatorialDerivation.getIdentity());
}","/** 
 * Adds the given variant derivation to the list of variant derivations.
 * @param uriPrefix URI prefix for variant derivation
 * @param displayId display id for variant derivation 
 * @param version version for variant derivation
 * @throws SBOLValidationException if the following SBOL validation rule was violated: 
 */
public void addVariantDerivation(String uriPrefix,String displayId,String version) throws SBOLValidationException {
  URI uri=URIcompliance.createCompliantURI(uriPrefix,displayId,version);
  CombinatorialDerivation combinatorialDerivation=this.getSBOLDocument().getCombinatorialDerivation(uri);
  variants.add(combinatorialDerivation.getIdentity());
}",0.8564476885644768
12407,"/** 
 * Adds the given variant to the list of variants.
 * @param uriPrefix TODO: change variable name
 * @param displayId display id for variant
 * @param version version for variant
 * @throws SBOLValidationException 
 */
public void addVariant(String uriPrefix,String displayId,String version) throws SBOLValidationException {
  URI uri=URIcompliance.createCompliantURI(uriPrefix,displayId,version);
  ComponentDefinition componentDefinition=this.getSBOLDocument().getComponentDefinition(uri);
  variants.add(componentDefinition.getIdentity());
}","/** 
 * Adds the given variant to the list of variants.
 * @param uriPrefix URI prefix for variant
 * @param displayId display id for variant
 * @param version version for variant
 * @throws SBOLValidationException if the following SBOL validation rule was violated:
 */
public void addVariant(String uriPrefix,String displayId,String version) throws SBOLValidationException {
  URI uri=URIcompliance.createCompliantURI(uriPrefix,displayId,version);
  ComponentDefinition componentDefinition=this.getSBOLDocument().getComponentDefinition(uri);
  variants.add(componentDefinition.getIdentity());
}",0.91353711790393
12408,"public static void main(String[] args){
  try {
    SBOLDocument doc=new SBOLDocument();
    doc.setDefaultURIprefix(""String_Node_Str"");
    ComponentDefinition cd=doc.createComponentDefinition(""String_Node_Str"",ComponentDefinition.DNA);
    ComponentDefinition variant=doc.createComponentDefinition(""String_Node_Str"",ComponentDefinition.DNA);
    doc.createComponentDefinition(""String_Node_Str"",ComponentDefinition.DNA);
    Component comp=cd.createComponent(""String_Node_Str"",AccessType.PUBLIC,""String_Node_Str"");
    CombinatorialDerivation combDeriv=doc.createCombinatorialDerivation(""String_Node_Str"",cd.getIdentity());
    VariableComponent vc=combDeriv.createVariableComponent(""String_Node_Str"",OperatorType.ONE,comp);
    vc.addVariant(variant.getIdentity());
    doc.write(""String_Node_Str"");
    SBOLDocument doc2=SBOLReader.read(""String_Node_Str"");
    SBOLValidate.compareDocuments(""String_Node_Str"",doc,""String_Node_Str"",doc2);
    if (SBOLValidate.getNumErrors() > 0) {
      for (      String error : SBOLValidate.getErrors()) {
        System.out.println(error);
      }
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    SynBioHubFrontend sbh=new SynBioHubFrontend(""String_Node_Str"",""String_Node_Str"");
    sbh.login(""String_Node_Str"",""String_Node_Str"");
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    String filename=sbh.getAttachment(URI.create(""String_Node_Str""),outputStream);
    File file=new File(""String_Node_Str"" + filename);
    FileOutputStream fileOutputStream=new FileOutputStream(file);
    fileOutputStream.write(outputStream.toByteArray());
    fileOutputStream.close();
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}",0.1881413911060433
12409,"private static void formatVariableComponents(Set<VariableComponent> variableComponents,List<NamedProperty<QName>> properties){
  for (  VariableComponent variableComponent : variableComponents) {
    List<NamedProperty<QName>> list=new ArrayList<>();
    formatCommonIdentifiedData(list,variableComponent);
    list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariable,variableComponent.getVariable()));
    list.add(NamedProperty(Sbol2Terms.VariableComponent.hasOperator,OperatorType.convertToURI(variableComponent.getOperator())));
    for (    URI variant : variableComponent.getVariants()) {
      list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariants,variant));
    }
    for (    URI variantCollection : variableComponent.getVariantCollections()) {
      list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariantCollections,variantCollection));
    }
    for (    URI variantDerivation : variableComponent.getVariantDerivations()) {
      list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariantDerivations,variantDerivation));
    }
    properties.add(NamedProperty(Sbol2Terms.CombinatorialDerivation.hasVariableComponent,NestedDocument(Sbol2Terms.VariableComponent.VariableComponent,variableComponent.getIdentity(),NamedProperties(list))));
  }
}","private static void formatVariableComponents(Set<VariableComponent> variableComponents,List<NamedProperty<QName>> properties){
  for (  VariableComponent variableComponent : variableComponents) {
    List<NamedProperty<QName>> list=new ArrayList<>();
    formatCommonIdentifiedData(list,variableComponent);
    list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariable,variableComponent.getVariable().getIdentity()));
    list.add(NamedProperty(Sbol2Terms.VariableComponent.hasOperator,OperatorType.convertToURI(variableComponent.getOperator())));
    for (    URI variant : variableComponent.getVariantURIs()) {
      list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariants,variant));
    }
    for (    URI variantCollection : variableComponent.getVariantCollections()) {
      list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariantCollections,variantCollection));
    }
    for (    URI variantDerivation : variableComponent.getVariantDerivations()) {
      list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariantDerivations,variantDerivation));
    }
    properties.add(NamedProperty(Sbol2Terms.CombinatorialDerivation.hasVariableComponent,NestedDocument(Sbol2Terms.VariableComponent.VariableComponent,variableComponent.getIdentity(),NamedProperties(list))));
  }
}",0.8189220628150445
12410,"private void updateReferences(HashMap<URI,URI> uriMap) throws SBOLValidationException {
  for (  Collection collection : getCollections()) {
    for (    URI memberURI : collection.getMemberURIs()) {
      if (uriMap.get(memberURI) != null) {
        collection.removeMember(memberURI);
        collection.addMember(uriMap.get(memberURI));
      }
    }
    updateReferences(collection,uriMap);
  }
  for (  ComponentDefinition componentDefinition : getComponentDefinitions()) {
    updateReferences(componentDefinition,uriMap);
    for (    Component component : componentDefinition.getComponents()) {
      if (uriMap.get(component.getDefinitionURI()) != null) {
        component.setDefinition(uriMap.get(component.getDefinitionURI()));
        for (        MapsTo mapsTo : component.getMapsTos()) {
          ComponentDefinition cd=getComponentDefinition(component.getDefinitionURI());
          if (cd != null) {
            String displayId=URIcompliance.extractDisplayId(mapsTo.getRemoteURI());
            URI newURI=URIcompliance.createCompliantURI(cd.getPersistentIdentity().toString(),displayId,cd.getVersion());
            mapsTo.setRemote(newURI);
          }
        }
      }
      updateReferences(component,uriMap);
      for (      MapsTo mapsTo : component.getMapsTos()) {
        updateReferences(mapsTo,uriMap);
      }
    }
    for (    SequenceAnnotation sa : componentDefinition.getSequenceAnnotations()) {
      for (      Location loc : sa.getLocations()) {
        updateReferences(loc,uriMap);
      }
      updateReferences(sa,uriMap);
    }
    for (    SequenceConstraint sc : componentDefinition.getSequenceConstraints()) {
      updateReferences(sc,uriMap);
    }
    for (    URI sequenceURI : componentDefinition.getSequenceURIs()) {
      if (uriMap.get(sequenceURI) != null) {
        componentDefinition.removeSequence(sequenceURI);
        componentDefinition.addSequence(uriMap.get(sequenceURI));
      }
    }
  }
  for (  ModuleDefinition moduleDefinition : getModuleDefinitions()) {
    updateReferences(moduleDefinition,uriMap);
    for (    FunctionalComponent functionalComponent : moduleDefinition.getFunctionalComponents()) {
      if (uriMap.get(functionalComponent.getDefinitionURI()) != null) {
        functionalComponent.setDefinition(uriMap.get(functionalComponent.getDefinitionURI()));
        for (        MapsTo mapsTo : functionalComponent.getMapsTos()) {
          ComponentDefinition cd=getComponentDefinition(functionalComponent.getDefinitionURI());
          if (cd != null) {
            String displayId=URIcompliance.extractDisplayId(mapsTo.getRemoteURI());
            URI newURI=URIcompliance.createCompliantURI(cd.getPersistentIdentity().toString(),displayId,cd.getVersion());
            mapsTo.setRemote(newURI);
          }
        }
      }
      updateReferences(functionalComponent,uriMap);
      for (      MapsTo mapsTo : functionalComponent.getMapsTos()) {
        updateReferences(mapsTo,uriMap);
      }
    }
    for (    Module module : moduleDefinition.getModules()) {
      if (uriMap.get(module.getDefinitionURI()) != null) {
        module.setDefinition(uriMap.get(module.getDefinitionURI()));
        for (        MapsTo mapsTo : module.getMapsTos()) {
          ModuleDefinition md=getModuleDefinition(module.getDefinitionURI());
          if (md != null) {
            String displayId=URIcompliance.extractDisplayId(mapsTo.getRemoteURI());
            URI newURI=URIcompliance.createCompliantURI(md.getPersistentIdentity().toString(),displayId,md.getVersion());
            mapsTo.setRemote(newURI);
          }
        }
      }
      updateReferences(module,uriMap);
      for (      MapsTo mapsTo : module.getMapsTos()) {
        updateReferences(mapsTo,uriMap);
      }
    }
    for (    Interaction interaction : moduleDefinition.getInteractions()) {
      updateReferences(interaction,uriMap);
      for (      Participation participation : interaction.getParticipations()) {
        updateReferences(participation,uriMap);
      }
    }
    for (    URI modelURI : moduleDefinition.getModelURIs()) {
      if (uriMap.get(modelURI) != null) {
        moduleDefinition.removeModel(modelURI);
        moduleDefinition.addModel(uriMap.get(modelURI));
      }
    }
  }
  for (  Model model : getModels()) {
    updateReferences(model,uriMap);
  }
  for (  Sequence sequence : getSequences()) {
    updateReferences(sequence,uriMap);
  }
  for (  GenericTopLevel genericTopLevel : getGenericTopLevels()) {
    updateReferences(genericTopLevel,uriMap);
  }
  for (  Activity activity : getActivities()) {
    updateReferences(activity,uriMap);
    for (    Association association : activity.getAssociations()) {
      if (uriMap.get(association.getAgent()) != null) {
        association.setAgent(uriMap.get(association.getAgent()));
      }
      if (uriMap.get(association.getPlan()) != null) {
        association.setPlan(uriMap.get(association.getPlan()));
      }
      updateReferences(association,uriMap);
    }
    for (    Usage usage : activity.getUsages()) {
      if (uriMap.get(usage.getEntity()) != null) {
        usage.setEntity(uriMap.get(usage.getEntity()));
      }
      updateReferences(usage,uriMap);
    }
  }
  for (  Agent agent : getAgents()) {
    updateReferences(agent,uriMap);
  }
  for (  Plan plan : getPlans()) {
    updateReferences(plan,uriMap);
  }
  for (  Activity activity : getActivities()) {
    updateReferences(activity,uriMap);
    for (    Association association : activity.getAssociations()) {
      if (uriMap.get(association.getAgent()) != null) {
        association.setAgent(uriMap.get(association.getAgent()));
      }
      if (uriMap.get(association.getPlan()) != null) {
        association.setPlan(uriMap.get(association.getPlan()));
      }
      updateReferences(association,uriMap);
    }
    for (    Usage usage : activity.getUsages()) {
      if (uriMap.get(usage.getEntity()) != null) {
        usage.setEntity(uriMap.get(usage.getEntity()));
      }
      updateReferences(usage,uriMap);
    }
  }
  for (  Agent agent : getAgents()) {
    updateReferences(agent,uriMap);
  }
  for (  Plan plan : getPlans()) {
    updateReferences(plan,uriMap);
  }
}","private void updateReferences(HashMap<URI,URI> uriMap) throws SBOLValidationException {
  for (  Collection collection : getCollections()) {
    for (    URI memberURI : collection.getMemberURIs()) {
      if (uriMap.get(memberURI) != null) {
        collection.removeMember(memberURI);
        collection.addMember(uriMap.get(memberURI));
      }
    }
    updateReferences(collection,uriMap);
  }
  for (  ComponentDefinition componentDefinition : getComponentDefinitions()) {
    updateReferences(componentDefinition,uriMap);
    for (    Component component : componentDefinition.getComponents()) {
      if (uriMap.get(component.getDefinitionURI()) != null) {
        component.setDefinition(uriMap.get(component.getDefinitionURI()));
        for (        MapsTo mapsTo : component.getMapsTos()) {
          ComponentDefinition cd=getComponentDefinition(component.getDefinitionURI());
          if (cd != null) {
            String displayId=URIcompliance.extractDisplayId(mapsTo.getRemoteURI());
            URI newURI=URIcompliance.createCompliantURI(cd.getPersistentIdentity().toString(),displayId,cd.getVersion());
            mapsTo.setRemote(newURI);
          }
        }
      }
      updateReferences(component,uriMap);
      for (      MapsTo mapsTo : component.getMapsTos()) {
        updateReferences(mapsTo,uriMap);
      }
    }
    for (    SequenceAnnotation sa : componentDefinition.getSequenceAnnotations()) {
      for (      Location loc : sa.getLocations()) {
        updateReferences(loc,uriMap);
      }
      updateReferences(sa,uriMap);
    }
    for (    SequenceConstraint sc : componentDefinition.getSequenceConstraints()) {
      updateReferences(sc,uriMap);
    }
    for (    URI sequenceURI : componentDefinition.getSequenceURIs()) {
      if (uriMap.get(sequenceURI) != null) {
        componentDefinition.removeSequence(sequenceURI);
        componentDefinition.addSequence(uriMap.get(sequenceURI));
      }
    }
  }
  for (  ModuleDefinition moduleDefinition : getModuleDefinitions()) {
    updateReferences(moduleDefinition,uriMap);
    for (    FunctionalComponent functionalComponent : moduleDefinition.getFunctionalComponents()) {
      if (uriMap.get(functionalComponent.getDefinitionURI()) != null) {
        functionalComponent.setDefinition(uriMap.get(functionalComponent.getDefinitionURI()));
        for (        MapsTo mapsTo : functionalComponent.getMapsTos()) {
          ComponentDefinition cd=getComponentDefinition(functionalComponent.getDefinitionURI());
          if (cd != null) {
            String displayId=URIcompliance.extractDisplayId(mapsTo.getRemoteURI());
            URI newURI=URIcompliance.createCompliantURI(cd.getPersistentIdentity().toString(),displayId,cd.getVersion());
            mapsTo.setRemote(newURI);
          }
        }
      }
      updateReferences(functionalComponent,uriMap);
      for (      MapsTo mapsTo : functionalComponent.getMapsTos()) {
        updateReferences(mapsTo,uriMap);
      }
    }
    for (    Module module : moduleDefinition.getModules()) {
      if (uriMap.get(module.getDefinitionURI()) != null) {
        module.setDefinition(uriMap.get(module.getDefinitionURI()));
        for (        MapsTo mapsTo : module.getMapsTos()) {
          ModuleDefinition md=getModuleDefinition(module.getDefinitionURI());
          if (md != null) {
            String displayId=URIcompliance.extractDisplayId(mapsTo.getRemoteURI());
            URI newURI=URIcompliance.createCompliantURI(md.getPersistentIdentity().toString(),displayId,md.getVersion());
            mapsTo.setRemote(newURI);
          }
        }
      }
      updateReferences(module,uriMap);
      for (      MapsTo mapsTo : module.getMapsTos()) {
        updateReferences(mapsTo,uriMap);
      }
    }
    for (    Interaction interaction : moduleDefinition.getInteractions()) {
      updateReferences(interaction,uriMap);
      for (      Participation participation : interaction.getParticipations()) {
        updateReferences(participation,uriMap);
      }
    }
    for (    URI modelURI : moduleDefinition.getModelURIs()) {
      if (uriMap.get(modelURI) != null) {
        moduleDefinition.removeModel(modelURI);
        moduleDefinition.addModel(uriMap.get(modelURI));
      }
    }
  }
  for (  Model model : getModels()) {
    updateReferences(model,uriMap);
  }
  for (  Sequence sequence : getSequences()) {
    updateReferences(sequence,uriMap);
  }
  for (  GenericTopLevel genericTopLevel : getGenericTopLevels()) {
    updateReferences(genericTopLevel,uriMap);
  }
  for (  Activity activity : getActivities()) {
    updateReferences(activity,uriMap);
    for (    Association association : activity.getAssociations()) {
      if (uriMap.get(association.getAgent()) != null) {
        association.setAgent(uriMap.get(association.getAgent()));
      }
      if (uriMap.get(association.getPlan()) != null) {
        association.setPlan(uriMap.get(association.getPlan()));
      }
      updateReferences(association,uriMap);
    }
    for (    Usage usage : activity.getUsages()) {
      if (uriMap.get(usage.getEntity()) != null) {
        usage.setEntity(uriMap.get(usage.getEntity()));
      }
      updateReferences(usage,uriMap);
    }
  }
  for (  Agent agent : getAgents()) {
    updateReferences(agent,uriMap);
  }
  for (  Plan plan : getPlans()) {
    updateReferences(plan,uriMap);
  }
}",0.9284666494089222
12411,"/** 
 * Creates a child variable component for this combinatorial derivation with the given arguments, and then adds to this combinatorial derivation's list of variable components. <p> This method first creates a compliant URI for the child variable component to be created. This URI starts with this combinatorial derivation's persistent identity, followed by the given display ID and ends with this combinatorial derivation's version.
 * @param displayId the display ID for the variable component to be created
 * @param operator the operator property for the variable component to be created
 * @param variableURI the URI of the component referenced by the variable component to be created
 * @return the created variable component
 * @throws SBOLValidationException if any of the following SBOL validation rules was violated: TODO: 10201, 10202, 10204, 10206, 10602, 10604, 10605, 10607, 10803.
 */
public VariableComponent createVariableComponent(String displayId,OperatorType operator,Component variable) throws SBOLValidationException {
  if (this.getSBOLDocument() != null && this.getSBOLDocument().isComplete()) {
    if (variable == null) {
      throw new SBOLValidationException(""String_Node_Str"",this);
    }
  }
  String URIprefix=this.getPersistentIdentity().toString();
  String version=this.getVersion();
  VariableComponent c=createVariableComponent(createCompliantURI(URIprefix,displayId,version),operator,variable);
  c.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  c.setDisplayId(displayId);
  c.setVersion(version);
  return c;
}","/** 
 * Creates a child variable component for this combinatorial derivation with the given arguments, and then adds to this combinatorial derivation's list of variable components. <p> This method first creates a compliant URI for the child variable component to be created. This URI starts with this combinatorial derivation's persistent identity, followed by the given display ID and ends with this combinatorial derivation's version.
 * @param displayId the display ID for the variable component to be created
 * @param operator the operator property for the variable component to be created
 * @param variable the component referenced by the variable component to be created
 * @return the created variable component
 * @throws SBOLValidationException if any of the following SBOL validation rules was violated: TODO: 10201, 10202, 10204, 10206, 10602, 10604, 10605, 10607, 10803.
 */
public VariableComponent createVariableComponent(String displayId,OperatorType operator,Component variable) throws SBOLValidationException {
  if (this.getSBOLDocument() != null && this.getSBOLDocument().isComplete()) {
    if (variable == null) {
      throw new SBOLValidationException(""String_Node_Str"",this);
    }
  }
  String URIprefix=this.getPersistentIdentity().toString();
  String version=this.getVersion();
  VariableComponent c=createVariableComponent(createCompliantURI(URIprefix,displayId,version),operator,variable);
  c.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  c.setDisplayId(displayId);
  c.setVersion(version);
  return c;
}",0.995575221238938
12412,"/** 
 * @param variableComponents
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the following methods: <ul> <li> {@link #clearVariableComponents()}</li> <li>  {@link #addVariableComponentNoCheck(VariableComponent)}, or</li> <li>  {@link #checkMapsTosLocalURIs()}.</li> </ul>
 */
public void setVariableComponents(Set<VariableComponent> variableComponents){
  this.variableComponents.clear();
  for (  VariableComponent variableComponent : variableComponents) {
    this.variableComponents.put(variableComponent.getIdentity(),variableComponent);
  }
}","/** 
 * @param variableComponents
 */
public void setVariableComponents(Set<VariableComponent> variableComponents){
  this.variableComponents.clear();
  for (  VariableComponent variableComponent : variableComponents) {
    this.variableComponents.put(variableComponent.getIdentity(),variableComponent);
  }
}",0.6836283185840708
12413,"/** 
 * @throws SBOLValidationException an SBOL validation rule violation occurred in either of the following methods: <ul> <li> {@link URIcompliance#isTopLevelURIformCompliant(URI)}, or</li> <li>  {@link URIcompliance#isChildURIcompliant(Identified,Identified)}.</li> </ul>
 */
@Override public void checkDescendantsURIcompliance() throws SBOLValidationException {
  if (!variableComponents.isEmpty()) {
    for (    VariableComponent variableComponent : variableComponents.values()) {
      try {
        isChildURIcompliant(this,variableComponent);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(e.getRule(),variableComponent);
      }
    }
  }
}","/** 
 * @throws SBOLValidationException an SBOL validation rule violation occurred in either of the following methods: <ul> <li> {@link URIcompliance#isChildURIcompliant(Identified,Identified)}.</li> </ul>
 */
@Override public void checkDescendantsURIcompliance() throws SBOLValidationException {
  if (!variableComponents.isEmpty()) {
    for (    VariableComponent variableComponent : variableComponents.values()) {
      try {
        isChildURIcompliant(this,variableComponent);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(e.getRule(),variableComponent);
      }
    }
  }
}",0.947845804988662
12414,"private static VariableComponent parseVariableComponent(SBOLDocument SBOLDoc,NestedDocument<QName> variableComponent,Map<URI,NestedDocument<QName>> nested) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  List<Annotation> annotations=new ArrayList<>();
  URI variable=null;
  OperatorType operator=null;
  HashSet<URI> variants=new HashSet<>();
  HashSet<URI> variantCollections=new HashSet<>();
  HashSet<URI> variantDerivations=new HashSet<>();
  for (  NamedProperty<QName> namedProperty : variableComponent.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.VariableComponent.hasVariants)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent.getIdentity());
      }
      variants.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.VariableComponent.hasVariantCollections)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent.getIdentity());
      }
      variantCollections.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.VariableComponent.hasVariantDerivations)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent.getIdentity());
      }
      variantDerivations.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.VariableComponent.hasOperator)) {
      if (!(namedProperty.getValue() instanceof Literal) || operator != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent.getIdentity());
      }
      String operatorTypeStr=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      if (operatorTypeStr.startsWith(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        operatorTypeStr=operatorTypeStr.replace(""String_Node_Str"",""String_Node_Str"");
      }
      try {
        operator=OperatorType.convertToOperatorType(URI.create(operatorTypeStr));
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.VariableComponent.hasVariable)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent.getIdentity());
      }
      variable=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  VariableComponent c=new VariableComponent(variableComponent.getIdentity(),variable,operator);
  if (persistentIdentity != null)   c.setPersistentIdentity(persistentIdentity);
  if (version != null)   c.setVersion(version);
  if (displayId != null)   c.setDisplayId(displayId);
  if (!variants.isEmpty())   c.setVariants(variants);
  if (!variantCollections.isEmpty())   c.setVariantCollections(variantCollections);
  if (!variantDerivations.isEmpty())   c.setVariantDerivations(variantDerivations);
  if (name != null)   c.setName(name);
  if (description != null)   c.setDescription(description);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  return c;
}","private static VariableComponent parseVariableComponent(SBOLDocument SBOLDoc,NestedDocument<QName> variableComponent,Map<URI,NestedDocument<QName>> nested) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  List<Annotation> annotations=new ArrayList<>();
  Component variable=null;
  OperatorType operator=null;
  HashSet<URI> variants=new HashSet<>();
  HashSet<URI> variantCollections=new HashSet<>();
  HashSet<URI> variantDerivations=new HashSet<>();
  for (  NamedProperty<QName> namedProperty : variableComponent.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.VariableComponent.hasVariants)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent.getIdentity());
      }
      variants.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.VariableComponent.hasVariantCollections)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent.getIdentity());
      }
      variantCollections.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.VariableComponent.hasVariantDerivations)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent.getIdentity());
      }
      variantDerivations.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.VariableComponent.hasOperator)) {
      if (!(namedProperty.getValue() instanceof Literal) || operator != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent.getIdentity());
      }
      String operatorTypeStr=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      if (operatorTypeStr.startsWith(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        operatorTypeStr=operatorTypeStr.replace(""String_Node_Str"",""String_Node_Str"");
      }
      try {
        operator=OperatorType.convertToOperatorType(URI.create(operatorTypeStr));
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent.getIdentity());
      }
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  VariableComponent c=new VariableComponent(variableComponent.getIdentity(),operator,variable);
  if (persistentIdentity != null)   c.setPersistentIdentity(persistentIdentity);
  if (version != null)   c.setVersion(version);
  if (displayId != null)   c.setDisplayId(displayId);
  if (!variants.isEmpty())   c.setVariants(variants);
  if (!variantCollections.isEmpty())   c.setVariantCollections(variantCollections);
  if (!variantDerivations.isEmpty())   c.setVariantDerivations(variantDerivations);
  if (name != null)   c.setName(name);
  if (description != null)   c.setDescription(description);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  return c;
}",0.8608837970540099
12415,"/** 
 * @param SBOLDoc
 * @param topLevel
 * @param nested
 * @return
 */
private static CombinatorialDerivation parseCombinatorialDerivation(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel,Map<URI,NestedDocument<QName>> nested) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  URI template=null;
  StrategyType strategy=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<VariableComponent> variableComponents=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.CombinatorialDerivation.template)) {
      if (!(namedProperty.getValue() instanceof Literal) || template != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      template=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.CombinatorialDerivation.strategy)) {
      if (!(namedProperty.getValue() instanceof Literal) || strategy != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      String strategyTypeStr=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      if (strategyTypeStr.startsWith(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        strategyTypeStr=strategyTypeStr.replace(""String_Node_Str"",""String_Node_Str"");
      }
      try {
        strategy=StrategyType.convertToStrategyType(URI.create(strategyTypeStr));
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.CombinatorialDerivation.variableComponents)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        NestedDocument<QName> nestedDocument=((NestedDocument<QName>)namedProperty.getValue());
        if (nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.VariableComponent.VariableComponent)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        variableComponents.add(parseVariableComponent(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        NestedDocument<QName> nestedDocument=nested.get(uri);
        if (nestedDocument == null || nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.VariableComponent.VariableComponent)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        variableComponents.add(parseVariableComponent(SBOLDoc,nested.get(uri),nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  CombinatorialDerivation c=new CombinatorialDerivation(topLevel.getIdentity(),template,strategy);
  if (displayId != null)   c.setDisplayId(displayId);
  if (persistentIdentity != null)   c.setPersistentIdentity(persistentIdentity);
  if (name != null)   c.setName(name);
  if (!variableComponents.isEmpty())   c.setVariableComponents(variableComponents);
  if (description != null)   c.setDescription(description);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  if (version != null)   c.setVersion(version);
  c.setWasDerivedFroms(wasDerivedFroms);
  CombinatorialDerivation oldC=SBOLDoc.getCombinatorialDerivation(topLevel.getIdentity());
  if (oldC == null) {
    SBOLDoc.addCombinatorialDerivation(c);
  }
 else {
    if (!c.equals(oldC)) {
      throw new SBOLValidationException(""String_Node_Str"",c);
    }
  }
  return c;
}","/** 
 * @param SBOLDoc
 * @param topLevel
 * @param nested
 * @return
 */
private static CombinatorialDerivation parseCombinatorialDerivation(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel,Map<URI,NestedDocument<QName>> nested) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  URI template=null;
  StrategyType strategy=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  Set<VariableComponent> variableComponents=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.CombinatorialDerivation.template)) {
      if (!(namedProperty.getValue() instanceof Literal) || template != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      template=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.CombinatorialDerivation.strategy)) {
      if (!(namedProperty.getValue() instanceof Literal) || strategy != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      String strategyTypeStr=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      if (strategyTypeStr.startsWith(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        strategyTypeStr=strategyTypeStr.replace(""String_Node_Str"",""String_Node_Str"");
      }
      try {
        strategy=StrategyType.convertToStrategyType(URI.create(strategyTypeStr));
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.CombinatorialDerivation.variableComponents)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        NestedDocument<QName> nestedDocument=((NestedDocument<QName>)namedProperty.getValue());
        if (nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.VariableComponent.VariableComponent)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        variableComponents.add(parseVariableComponent(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        NestedDocument<QName> nestedDocument=nested.get(uri);
        if (nestedDocument == null || nestedDocument.getType() == null || !nestedDocument.getType().equals(Sbol2Terms.VariableComponent.VariableComponent)) {
          throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
        }
        variableComponents.add(parseVariableComponent(SBOLDoc,nested.get(uri),nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  CombinatorialDerivation c=new CombinatorialDerivation(topLevel.getIdentity(),strategy,template);
  if (displayId != null)   c.setDisplayId(displayId);
  if (persistentIdentity != null)   c.setPersistentIdentity(persistentIdentity);
  if (name != null)   c.setName(name);
  if (!variableComponents.isEmpty())   c.setVariableComponents(variableComponents);
  if (description != null)   c.setDescription(description);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  if (version != null)   c.setVersion(version);
  c.setWasDerivedFroms(wasDerivedFroms);
  CombinatorialDerivation oldC=SBOLDoc.getCombinatorialDerivation(topLevel.getIdentity());
  if (oldC == null) {
    SBOLDoc.addCombinatorialDerivation(c);
  }
 else {
    if (!c.equals(oldC)) {
      throw new SBOLValidationException(""String_Node_Str"",c);
    }
  }
  return c;
}",0.9975779594308204
12416,"/** 
 * Adds the given variable component to the list of variable components.
 * @param variableComponent
 */
private void addVariableComponent(VariableComponent variableComponent){
  variableComponent.setSBOLDocument(this.getSBOLDocument());
  variableComponent.setCombinatorialDerivation(this);
  for (  CombinatorialDerivation cd : variableComponent.getVariants()) {
    Set<URI> visited=new HashSet<>();
    visited.add(this.getIdentity());
    try {
    }
 catch (    SBOLValidationException e) {
      throw new SBOLValidationException(""String_Node_Str"",variableComponent);
    }
  }
  addChildSafely(variableComponent,variableComponents,""String_Node_Str"");
}","/** 
 * Adds the given variable component to the list of variable components.
 * @param variableComponent
 */
private void addVariableComponent(VariableComponent variableComponent) throws SBOLValidationException {
  variableComponent.setSBOLDocument(this.getSBOLDocument());
  variableComponent.setCombinatorialDerivation(this);
  for (  CombinatorialDerivation cd : variableComponent.getVariants()) {
    Set<URI> visited=new HashSet<>();
    visited.add(this.getIdentity());
    try {
      SBOLValidate.checkCombinatorialDerivationCycle(this.getSBOLDocument(),cd,visited);
    }
 catch (    SBOLValidationException e) {
      throw new SBOLValidationException(""String_Node_Str"",variableComponent);
    }
  }
  addChildSafely(variableComponent,variableComponents,""String_Node_Str"");
}",0.8545830461750517
12417,"public void setCombinatorialDerivation(CombinatorialDerivation combinatorialDerivation){
  this.CombinatorialDerivation=combinatorialDerivation;
}","public void setCombinatorialDerivation(CombinatorialDerivation combinatorialDerivation){
  this.combinatorialDerivation=combinatorialDerivation;
}",0.9931506849315068
12418,"/** 
 * @param componentDefinition
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the following constructors or methods: <ul> <li> {@link TopLevel#TopLevel(TopLevel)},</li> <li>  {@link #addVariableComponent(VariableComponent)},</li> <li>  {@link VariableComponent#deepCopy()}</li> </ul>
 */
private CombinatorialDerivation(CombinatorialDerivation combinatorialDerivation) throws SBOLValidationException {
  super(combinatorialDerivation);
  this.variableComponents=new HashMap<>();
  for (  VariableComponent variableComponent : combinatorialDerivation.getVariableComponents()) {
    this.addVariableComponent(variableComponent.deepCopy());
  }
}","/** 
 * @param combinatorialDerivation
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the following constructors or methods: <ul> <li> {@link TopLevel#TopLevel(TopLevel)},</li> <li>  {@link #addVariableComponent(VariableComponent)},</li> <li>  {@link VariableComponent#deepCopy()}</li> </ul>
 */
private CombinatorialDerivation(CombinatorialDerivation combinatorialDerivation) throws SBOLValidationException {
  super(combinatorialDerivation);
  this.variableComponents=new HashMap<>();
  for (  VariableComponent variableComponent : combinatorialDerivation.getVariableComponents()) {
    this.addVariableComponent(variableComponent.deepCopy());
  }
}",0.9826839826839828
12419,"/** 
 * Adds the given variable component to the list of variable components.
 * @param variableComponent
 */
private void addVariableComponent(VariableComponent variableComponent) throws SBOLValidationException {
  variableComponent.setSBOLDocument(this.getSBOLDocument());
  variableComponent.setCombinatorialDerivation(this);
  for (  CombinatorialDerivation cd : variableComponent.getVariants()) {
    Set<URI> visited=new HashSet<>();
    visited.add(this.getIdentity());
    try {
      SBOLValidate.checkCombinatorialDerivationCycle(this.getSBOLDocument(),cd,visited);
    }
 catch (    SBOLValidationException e) {
      throw new SBOLValidationException(""String_Node_Str"",variableComponent);
    }
  }
  addChildSafely(variableComponent,variableComponents,""String_Node_Str"");
}","/** 
 * Adds the given variable component to the list of variable components.
 * @param variableComponent
 */
private void addVariableComponent(VariableComponent variableComponent) throws SBOLValidationException {
  variableComponent.setSBOLDocument(this.getSBOLDocument());
  variableComponent.setCombinatorialDerivation(this);
  for (  URI cdURI : variableComponent.getVariantDerivationURIs()) {
    CombinatorialDerivation cd=this.getSBOLDocument().getCombinatorialDerivation(cdURI);
    Set<URI> visited=new HashSet<>();
    visited.add(this.getIdentity());
    try {
      SBOLValidate.checkCombinatorialDerivationCycle(this.getSBOLDocument(),cd,visited);
    }
 catch (    SBOLValidationException e) {
      throw new SBOLValidationException(""String_Node_Str"",variableComponent);
    }
  }
  addChildSafely(variableComponent,variableComponents,""String_Node_Str"");
}",0.8895594447797224
12420,"/** 
 * Removes the given combinatorial derivation from this SBOL document's list of combinatorial derivations.
 * @param combinatorialDerivation the combinatorialDerivation to be removed
 * @return {@code true} if the given combinatorial derivation was successfullyremoved,  {@code false} otherwise
 * @throws SBOLValidationException if either of the following SBOL validation rules was violated: TODO: 10604, 12103.
 */
public boolean removeCombinatorialDerivation(CombinatorialDerivation combinatorialDerivation) throws SBOLValidationException {
  if (complete) {
    for (    CombinatorialDerivation cd : combinatorialDerivations.values()) {
      for (      VariableComponent vc : cd.getVariableComponents()) {
        for (        URI variantURI : vc.getVariantDerivations())         if (variantURI.equals(combinatorialDerivation.getIdentity())) {
          throw new SBOLValidationException(""String_Node_Str"",vc);
        }
      }
    }
  }
  return removeTopLevel(combinatorialDerivation,combinatorialDerivations);
}","/** 
 * Removes the given combinatorial derivation from this SBOL document's list of combinatorial derivations.
 * @param combinatorialDerivation the combinatorialDerivation to be removed
 * @return {@code true} if the given combinatorial derivation was successfullyremoved,  {@code false} otherwise
 * @throws SBOLValidationException if either of the following SBOL validation rules was violated: TODO: 10604, 12103.
 */
public boolean removeCombinatorialDerivation(CombinatorialDerivation combinatorialDerivation) throws SBOLValidationException {
  if (complete) {
    for (    CombinatorialDerivation cd : combinatorialDerivations.values()) {
      for (      VariableComponent vc : cd.getVariableComponents()) {
        for (        URI variantURI : vc.getVariantURIs())         if (variantURI.equals(combinatorialDerivation.getIdentity())) {
          throw new SBOLValidationException(""String_Node_Str"",vc);
        }
      }
    }
  }
  return removeTopLevel(combinatorialDerivation,combinatorialDerivations);
}",0.9936368086147822
12421,"/** 
 * @param sbolDocument
 * @param combinatorialDerivation
 * @param visited
 * @throws SBOLValidationException if either of the following SBOL validation rule was violated: TODO: 10603, 10605.
 */
static void checkCombinatorialDerivationCycle(SBOLDocument sbolDocument,CombinatorialDerivation combinatorialDerivation,Set<URI> visited) throws SBOLValidationException {
  if (combinatorialDerivation == null)   return;
  visited.add(combinatorialDerivation.getIdentity());
  for (  VariableComponent variableComponent : combinatorialDerivation.getVariableComponents()) {
    for (    URI variantDerivationURI : variableComponent.getVariantDerivations()) {
      CombinatorialDerivation variantDerivation=combinatorialDerivation.getSBOLDocument().getCombinatorialDerivation(variantDerivationURI);
      if (variantDerivation == null)       continue;
      if (visited.contains(variantDerivation.getIdentity())) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent);
      }
      try {
        checkCombinatorialDerivationCycle(sbolDocument,variantDerivation,visited);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent);
      }
    }
  }
  visited.remove(combinatorialDerivation.getIdentity());
  return;
}","/** 
 * @param sbolDocument
 * @param combinatorialDerivation
 * @param visited
 * @throws SBOLValidationException if either of the following SBOL validation rule was violated: TODO: 10603, 10605.
 */
static void checkCombinatorialDerivationCycle(SBOLDocument sbolDocument,CombinatorialDerivation combinatorialDerivation,Set<URI> visited) throws SBOLValidationException {
  if (combinatorialDerivation == null)   return;
  visited.add(combinatorialDerivation.getIdentity());
  for (  VariableComponent variableComponent : combinatorialDerivation.getVariableComponents()) {
    for (    URI variantDerivationURI : variableComponent.getVariantDerivationURIs()) {
      CombinatorialDerivation variantDerivation=combinatorialDerivation.getSBOLDocument().getCombinatorialDerivation(variantDerivationURI);
      if (variantDerivation == null)       continue;
      if (visited.contains(variantDerivation.getIdentity())) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent);
      }
      try {
        checkCombinatorialDerivationCycle(sbolDocument,variantDerivation,visited);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(""String_Node_Str"",variableComponent);
      }
    }
  }
  visited.remove(combinatorialDerivation.getIdentity());
  return;
}",0.998859749144812
12422,"private static void formatVariableComponents(Set<VariableComponent> variableComponents,List<NamedProperty<QName>> properties){
  for (  VariableComponent variableComponent : variableComponents) {
    List<NamedProperty<QName>> list=new ArrayList<>();
    formatCommonIdentifiedData(list,variableComponent);
    list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariable,variableComponent.getVariable().getIdentity()));
    list.add(NamedProperty(Sbol2Terms.VariableComponent.hasOperator,OperatorType.convertToURI(variableComponent.getOperator())));
    for (    URI variant : variableComponent.getVariantURIs()) {
      list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariants,variant));
    }
    for (    URI variantCollection : variableComponent.getVariantCollections()) {
      list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariantCollections,variantCollection));
    }
    for (    URI variantDerivation : variableComponent.getVariantDerivations()) {
      list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariantDerivations,variantDerivation));
    }
    properties.add(NamedProperty(Sbol2Terms.CombinatorialDerivation.hasVariableComponent,NestedDocument(Sbol2Terms.VariableComponent.VariableComponent,variableComponent.getIdentity(),NamedProperties(list))));
  }
}","private static void formatVariableComponents(Set<VariableComponent> variableComponents,List<NamedProperty<QName>> properties){
  for (  VariableComponent variableComponent : variableComponents) {
    List<NamedProperty<QName>> list=new ArrayList<>();
    formatCommonIdentifiedData(list,variableComponent);
    list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariable,variableComponent.getVariable().getIdentity()));
    list.add(NamedProperty(Sbol2Terms.VariableComponent.hasOperator,OperatorType.convertToURI(variableComponent.getOperator())));
    for (    URI variant : variableComponent.getVariantURIs()) {
      list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariants,variant));
    }
    for (    URI variantCollection : variableComponent.getVariantCollectionURIs()) {
      list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariantCollections,variantCollection));
    }
    for (    URI variantDerivation : variableComponent.getVariantDerivationURIs()) {
      list.add(NamedProperty(Sbol2Terms.VariableComponent.hasVariantDerivations,variantDerivation));
    }
    properties.add(NamedProperty(Sbol2Terms.CombinatorialDerivation.hasVariableComponent,NestedDocument(Sbol2Terms.VariableComponent.VariableComponent,variableComponent.getIdentity(),NamedProperties(list))));
  }
}",0.8339738662567256
12423,"public void setVariants(Set<URI> variants){
  this.variants=(HashSet<URI>)variants;
}","/** 
 * @param variants TODO: validation (null check)
 */
public void setVariants(Set<URI> variants){
  this.variants=(HashSet<URI>)variants;
}",0.7456140350877193
12424,"public void setVariantCollections(Set<URI> variantCollections){
  this.variantCollections=(HashSet<URI>)variantCollections;
}","/** 
 * @param variantCollections TODO: validation (null check)
 */
public void setVariantCollections(Set<URI> variantCollections){
  this.variantCollections=(HashSet<URI>)variantCollections;
}",0.7861635220125787
12425,"public Set<URI> getVariantURIs(){
  return new HashSet<URI>(this.variants);
}","/** 
 * Returns a set of component definition URIs belonging to the variable component.
 * @return the matching set of component definition URIs
 */
public Set<URI> getVariantURIs(){
  return new HashSet<URI>(this.variants);
}",0.5082508250825083
12426,"public Set<CombinatorialDerivation> getVariants(){
  HashSet<CombinatorialDerivation> tempVariants=new HashSet<>();
  for (  URI variantURI : variants) {
    variants.add(this.getSBOLDocument().getCombinatorialDerivation(variantURI).getIdentity());
  }
  return tempVariants;
}","/** 
 * Returns a set of component definitions belonging to the variable component.
 * @return the matching set of component definitions
 */
public Set<ComponentDefinition> getVariants(){
  HashSet<ComponentDefinition> tempVariants=new HashSet<>();
  for (  URI variantURI : variants) {
    variants.add(this.getSBOLDocument().getComponentDefinition(variantURI).getIdentity());
  }
  return tempVariants;
}",0.6881405563689604
12427,"private VariableComponent(VariableComponent variableComponent) throws SBOLValidationException {
  super(variableComponent.getIdentity());
  this.variable=variableComponent.variable;
  this.operator=variableComponent.operator;
  this.variants=variableComponent.variants;
  this.variantCollections=variableComponent.variantCollections;
  this.variantDerivations=variableComponent.variantDerivations;
}","/** 
 * @param variableComponent
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the following constructors or methods: TODO: copy over objects instead of references like in combinatorial derivation
 */
private VariableComponent(VariableComponent variableComponent) throws SBOLValidationException {
  super(variableComponent.getIdentity());
  this.variable=variableComponent.variable;
  this.operator=variableComponent.operator;
  this.variants=variableComponent.variants;
  this.variantCollections=variableComponent.variantCollections;
  this.variantDerivations=variableComponent.variantDerivations;
}",0.6436781609195402
12428,"public OperatorType getOperator(){
  return this.operator;
}","/** 
 * Returns the operator of the given variable component.
 * @return the matching operator if present, or {@code null} otherwise.
 */
public OperatorType getOperator(){
  return this.operator;
}",0.4651162790697674
12429,"public void addVariantCollection(String uriPrefix,String displayId,String version) throws SBOLValidationException {
  URI uri=URIcompliance.createCompliantURI(uriPrefix,displayId,version);
  Collection collection=this.getSBOLDocument().getCollection(uri);
  variantCollections.add(collection.getIdentity());
}","/** 
 * Adds the given variant collection to the list of variant collections.
 * @param uriPrefix TODO: change variable name
 * @param displayId
 * @param version
 */
public void addVariantCollection(String uriPrefix,String displayId,String version) throws SBOLValidationException {
  URI uri=URIcompliance.createCompliantURI(uriPrefix,displayId,version);
  Collection collection=this.getSBOLDocument().getCollection(uri);
  variantCollections.add(collection.getIdentity());
}",0.7872611464968153
12430,"public void addVariantDerivation(String uriPrefix,String displayId,String version) throws SBOLValidationException {
  URI uri=URIcompliance.createCompliantURI(uriPrefix,displayId,version);
  CombinatorialDerivation combinatorialDerivation=this.getSBOLDocument().getCombinatorialDerivation(uri);
  variants.add(combinatorialDerivation.getIdentity());
}","/** 
 * Adds the given variant derivation to the list of variant derivations.
 * @param uriPrefix TODO: change variable name
 * @param displayId
 * @param version
 */
public void addVariantDerivation(String uriPrefix,String displayId,String version) throws SBOLValidationException {
  URI uri=URIcompliance.createCompliantURI(uriPrefix,displayId,version);
  CombinatorialDerivation combinatorialDerivation=this.getSBOLDocument().getCombinatorialDerivation(uri);
  variants.add(combinatorialDerivation.getIdentity());
}",0.807825086306099
12431,"public void setCombinatorialDerivation(CombinatorialDerivation combinatorialDerivation){
  this.combinatorialDerivation=combinatorialDerivation;
}","/** 
 * Sets the parent combinatorial derivation to the given one.
 * @param combinatorialDerivation the given combinatorial derivation to set to
 * @throws SBOLValidationException if either of the following SBOL validation rules was violated: TODO: 10604, 10605.
 */
public void setCombinatorialDerivation(CombinatorialDerivation combinatorialDerivation){
  this.combinatorialDerivation=combinatorialDerivation;
}",0.5214285714285715
12432,"public void setVariantDerivations(Set<URI> variantDerivations){
  this.variantDerivations=(HashSet<URI>)variantDerivations;
}","/** 
 * @param variantDerivations TODO: validation (null check)
 */
public void setVariantDerivations(Set<URI> variantDerivations){
  this.variantDerivations=(HashSet<URI>)variantDerivations;
}",0.7861635220125787
12433,"public Component getVariable(){
  return this.variable;
}","/** 
 * Returns the instance matching the given variable component's variable.
 * @return the matching component if present, or {@code null} otherwise.
 */
public Component getVariable(){
  return this.variable;
}",0.4222222222222222
12434,"public void addVariant(String uriPrefix,String displayId,String version) throws SBOLValidationException {
  URI uri=URIcompliance.createCompliantURI(uriPrefix,displayId,version);
  ComponentDefinition componentDefinition=this.getSBOLDocument().getComponentDefinition(uri);
  variants.add(componentDefinition.getIdentity());
}","/** 
 * Adds the given variant to the list of variants.
 * @param uriPrefix TODO: change variable name
 * @param displayId
 * @param version
 */
public void addVariant(String uriPrefix,String displayId,String version) throws SBOLValidationException {
  URI uri=URIcompliance.createCompliantURI(uriPrefix,displayId,version);
  ComponentDefinition componentDefinition=this.getSBOLDocument().getComponentDefinition(uri);
  variants.add(componentDefinition.getIdentity());
}",0.8176100628930818
12435,"public void submit(String id,String version,String name,String description,String citations,String collections,String overwrite_merge,InputStream fileToUpload) throws SynBioHubException {
  if (user.equals(""String_Node_Str"")) {
    Exception e=new Exception(""String_Node_Str"");
    throw new SynBioHubException(e);
  }
  String url=backendUrl + ""String_Node_Str"";
  HttpPost request=new HttpPost(url);
  request.setHeader(""String_Node_Str"",user);
  request.setHeader(""String_Node_Str"",""String_Node_Str"");
  MultipartEntityBuilder params=MultipartEntityBuilder.create();
  params.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);
  params.addTextBody(""String_Node_Str"",id);
  params.addTextBody(""String_Node_Str"",version);
  params.addTextBody(""String_Node_Str"",name);
  params.addTextBody(""String_Node_Str"",description);
  params.addTextBody(""String_Node_Str"",citations);
  params.addTextBody(""String_Node_Str"",collections);
  params.addTextBody(""String_Node_Str"",overwrite_merge);
  params.addTextBody(""String_Node_Str"",user);
  if (document != null) {
    InputStream stream=new ByteArrayInputStream(serializeDocument(document).getBytes());
    params.addBinaryBody(""String_Node_Str"",stream,ContentType.APPLICATION_XML,""String_Node_Str"");
  }
 else {
    params.addTextBody(""String_Node_Str"",""String_Node_Str"");
  }
  try {
    request.setEntity(params.build());
    HttpResponse response=client.execute(request);
    checkResponseCode(response);
  }
 catch (  Exception e) {
    throw new SynBioHubException(e);
  }
 finally {
    request.releaseConnection();
  }
}","public void submit(String id,String version,String name,String description,String citations,String collections,String overwrite_merge,InputStream upload) throws SynBioHubException {
  if (user.equals(""String_Node_Str"")) {
    Exception e=new Exception(""String_Node_Str"");
    throw new SynBioHubException(e);
  }
  String url=backendUrl + ""String_Node_Str"";
  HttpPost request=new HttpPost(url);
  request.setHeader(""String_Node_Str"",user);
  request.setHeader(""String_Node_Str"",""String_Node_Str"");
  MultipartEntityBuilder params=MultipartEntityBuilder.create();
  params.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);
  params.addTextBody(""String_Node_Str"",id);
  params.addTextBody(""String_Node_Str"",version);
  params.addTextBody(""String_Node_Str"",name);
  params.addTextBody(""String_Node_Str"",description);
  params.addTextBody(""String_Node_Str"",citations);
  params.addTextBody(""String_Node_Str"",collections);
  params.addTextBody(""String_Node_Str"",overwrite_merge);
  params.addTextBody(""String_Node_Str"",user);
  if (upload != null) {
    params.addBinaryBody(""String_Node_Str"",upload,ContentType.APPLICATION_XML,""String_Node_Str"");
  }
 else {
    params.addTextBody(""String_Node_Str"",""String_Node_Str"");
  }
  try {
    request.setEntity(params.build());
    HttpResponse response=client.execute(request);
    checkResponseCode(response);
  }
 catch (  Exception e) {
    throw new SynBioHubException(e);
  }
 finally {
    request.releaseConnection();
  }
}",0.933728981206726
12436,"private void fixDocumentURIPrefix() throws SBOLValidationException {
  String documentURIPrefixAll=extractDocumentURIPrefix();
  if (documentURIPrefixAll.length() >= 9) {
    setDefaultURIprefix(documentURIPrefixAll);
  }
  String documentURIPrefix=documentURIPrefixAll;
  for (  TopLevel topLevel : getTopLevels()) {
    if (documentURIPrefixAll.length() < 9) {
      documentURIPrefix=URIcompliance.extractURIprefix(topLevel.getIdentity());
      String documentURIPrefix2=URIcompliance.extractURIprefix(URI.create(URIcompliance.extractSimpleNamespace(topLevel.getIdentity())));
      if (documentURIPrefix2 != null) {
        documentURIPrefix=documentURIPrefix2;
      }
    }
    if (!topLevel.getIdentity().equals(URIcompliance.createCompliantURI(documentURIPrefix,topLevel.getDisplayId(),topLevel.getVersion()))) {
      String newDisplayId=topLevel.getIdentity().toString().replaceAll(documentURIPrefix,""String_Node_Str"");
      String newVersion=""String_Node_Str"";
      if (topLevel.isSetVersion()) {
        newDisplayId=newDisplayId.replace(""String_Node_Str"" + topLevel.getVersion(),""String_Node_Str"");
        newVersion=topLevel.getVersion();
      }
      newDisplayId=URIcompliance.fixDisplayId(newDisplayId);
      while (getTopLevel(URIcompliance.createCompliantURI(documentURIPrefix,newDisplayId,newVersion)) != null) {
        newDisplayId=newDisplayId.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      TopLevel newTopLevel=this.createCopy(topLevel,newDisplayId,newVersion);
      removeTopLevel(topLevel);
      updateReferences(topLevel.getIdentity(),newTopLevel.getIdentity());
      updateReferences(topLevel.getPersistentIdentity(),newTopLevel.getPersistentIdentity());
    }
  }
}","private void fixDocumentURIPrefix() throws SBOLValidationException {
  String documentURIPrefixAll=extractDocumentURIPrefix();
  if (documentURIPrefixAll != null && documentURIPrefixAll.length() >= 9) {
    setDefaultURIprefix(documentURIPrefixAll);
  }
  String documentURIPrefix=documentURIPrefixAll;
  for (  TopLevel topLevel : getTopLevels()) {
    if (documentURIPrefixAll.length() < 9) {
      documentURIPrefix=URIcompliance.extractURIprefix(topLevel.getIdentity());
      String simpleNamespace=URIcompliance.extractSimpleNamespace(topLevel.getIdentity());
      if (simpleNamespace != null) {
        String documentURIPrefix2=URIcompliance.extractURIprefix(URI.create(simpleNamespace));
        if (documentURIPrefix2 != null) {
          documentURIPrefix=documentURIPrefix2;
        }
      }
      if (documentURIPrefix == null) {
        documentURIPrefix=this.getDefaultURIprefix();
      }
    }
    if (!topLevel.getIdentity().equals(URIcompliance.createCompliantURI(documentURIPrefix,URIcompliance.findDisplayId(topLevel),topLevel.getVersion()))) {
      String newDisplayId=topLevel.getIdentity().toString().replaceAll(documentURIPrefix,""String_Node_Str"");
      String newVersion=""String_Node_Str"";
      if (topLevel.isSetVersion()) {
        newDisplayId=newDisplayId.replace(""String_Node_Str"" + topLevel.getVersion(),""String_Node_Str"");
        newVersion=topLevel.getVersion();
      }
      newDisplayId=URIcompliance.fixDisplayId(newDisplayId);
      while (getTopLevel(URIcompliance.createCompliantURI(documentURIPrefix,newDisplayId,newVersion)) != null) {
        newDisplayId=newDisplayId.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      TopLevel newTopLevel=this.createCopy(topLevel,newDisplayId,newVersion);
      removeTopLevel(topLevel);
      updateReferences(topLevel.getIdentity(),newTopLevel.getIdentity());
      updateReferences(topLevel.getPersistentIdentity(),newTopLevel.getPersistentIdentity());
    }
  }
}",0.9017372421281216
12437,"private String extractDocumentURIPrefix(){
  String documentURIPrefix=""String_Node_Str"";
  for (  TopLevel topLevel : getTopLevels()) {
    if (documentURIPrefix.equals(""String_Node_Str"")) {
      documentURIPrefix=URIcompliance.extractURIprefix(topLevel.getIdentity());
    }
 else {
      for (int i=0; i < documentURIPrefix.length(); i++) {
        if (i >= topLevel.getIdentity().toString().length() || documentURIPrefix.charAt(i) != topLevel.getIdentity().toString().charAt(i)) {
          if (i == 0) {
            documentURIPrefix=""String_Node_Str"";
          }
 else {
            documentURIPrefix=documentURIPrefix.substring(0,i);
          }
          break;
        }
      }
      if (documentURIPrefix.equals(""String_Node_Str""))       break;
    }
  }
  return documentURIPrefix;
}","private String extractDocumentURIPrefix(){
  String documentURIPrefix=null;
  for (  TopLevel topLevel : getTopLevels()) {
    if (documentURIPrefix == null || documentURIPrefix.equals(""String_Node_Str"")) {
      documentURIPrefix=URIcompliance.extractURIprefix(topLevel.getIdentity());
    }
 else {
      for (int i=0; i < documentURIPrefix.length(); i++) {
        if (i >= topLevel.getIdentity().toString().length() || documentURIPrefix.charAt(i) != topLevel.getIdentity().toString().charAt(i)) {
          if (i == 0) {
            documentURIPrefix=""String_Node_Str"";
          }
 else {
            documentURIPrefix=documentURIPrefix.substring(0,i);
          }
          break;
        }
      }
      if (documentURIPrefix.equals(""String_Node_Str""))       break;
    }
  }
  return documentURIPrefix;
}",0.2524875621890547
12438,"/** 
 * Copy all objects to an a new SBOL Document and change the URI prefix/version of each object
 * @param URIPrefix new URI prefix
 * @param version new version
 * @return new SBOL document with changed URI prefix
 * @throws SBOLValidationException if URIprefix or version provided is invalid
 */
public SBOLDocument changeURIPrefixVersion(String URIPrefix,String version) throws SBOLValidationException {
  SBOLDocument document=new SBOLDocument();
  SBOLDocument fixed=new SBOLDocument();
  fixed.setDefaultURIprefix(URIPrefix);
  fixed.createCopy(this);
  fixed.fixDocumentURIPrefix();
  String documentURIPrefix=fixed.extractDocumentURIPrefix();
  HashMap<URI,URI> uriMap=new HashMap<URI,URI>();
  for (  TopLevel topLevel : fixed.getTopLevels()) {
    fixed.rename(topLevel,URIPrefix,null,version);
    TopLevel newTL=document.createCopy(topLevel,URIPrefix,null,version);
    uriMap.put(topLevel.getIdentity(),newTL.getIdentity());
    uriMap.put(topLevel.getPersistentIdentity(),newTL.getPersistentIdentity());
  }
  document.updateReferences(uriMap);
  for (  TopLevel topLevel : document.getTopLevels()) {
    document.changeURIPrefixVersion(topLevel,URIPrefix,version,documentURIPrefix);
  }
  document.setDefaultURIprefix(URIPrefix);
  return document;
}","/** 
 * Copy all objects to an a new SBOL Document and change the URI prefix/version of each object
 * @param URIPrefix new URI prefix
 * @param version new version
 * @return new SBOL document with changed URI prefix
 * @throws SBOLValidationException if URIprefix or version provided is invalid
 */
public SBOLDocument changeURIPrefixVersion(String URIPrefix,String version) throws SBOLValidationException {
  SBOLDocument document=new SBOLDocument();
  SBOLDocument fixed=new SBOLDocument();
  fixed.setDefaultURIprefix(URIPrefix);
  this.fixDocumentURIPrefix();
  fixed.createCopy(this);
  String documentURIPrefix=fixed.extractDocumentURIPrefix();
  HashMap<URI,URI> uriMap=new HashMap<URI,URI>();
  for (  TopLevel topLevel : fixed.getTopLevels()) {
    fixed.rename(topLevel,URIPrefix,null,version);
    TopLevel newTL=document.createCopy(topLevel,URIPrefix,null,version);
    uriMap.put(topLevel.getIdentity(),newTL.getIdentity());
    uriMap.put(topLevel.getPersistentIdentity(),newTL.getPersistentIdentity());
  }
  document.updateReferences(uriMap);
  for (  TopLevel topLevel : document.getTopLevels()) {
    document.changeURIPrefixVersion(topLevel,URIPrefix,version,documentURIPrefix);
  }
  document.setDefaultURIprefix(URIPrefix);
  return document;
}",0.9751479289940828
12439,"/** 
 * Submit to the SynBioHub.
 * @param id The submission identifier
 * @param version The submission version
 * @param name The submission name
 * @param description The submission description
 * @param citations The pubMedIds for this submission
 * @param collections A comma separated list of collections
 * @param overwrite_merge '0' prevent, '1' overwrite, '2' merge and prevent, '3' merge and overwrite
 * @param document the SBOL document to submit
 * @throws SynBioHubException if there was an error communicating with the SynBioHub
 */
public void submit(String id,String version,String name,String description,String citations,String collections,String overwrite_merge,SBOLDocument document) throws SynBioHubException {
  if (user.equals(""String_Node_Str"")) {
    Exception e=new Exception(""String_Node_Str"");
    throw new SynBioHubException(e);
  }
  String url=backendUrl + ""String_Node_Str"";
  HttpPost request=new HttpPost(url);
  request.setHeader(""String_Node_Str"",user);
  request.setHeader(""String_Node_Str"",""String_Node_Str"");
  MultipartEntityBuilder params=MultipartEntityBuilder.create();
  params.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);
  params.addTextBody(""String_Node_Str"",id);
  params.addTextBody(""String_Node_Str"",version);
  params.addTextBody(""String_Node_Str"",name);
  params.addTextBody(""String_Node_Str"",description);
  params.addTextBody(""String_Node_Str"",citations);
  params.addTextBody(""String_Node_Str"",collections);
  params.addTextBody(""String_Node_Str"",overwrite_merge);
  params.addTextBody(""String_Node_Str"",user);
  if (document != null) {
    params.addTextBody(""String_Node_Str"",serializeDocument(document));
  }
 else {
    params.addTextBody(""String_Node_Str"",""String_Node_Str"");
  }
  try {
    request.setEntity(params.build());
    HttpResponse response=client.execute(request);
    checkResponseCode(response);
  }
 catch (  Exception e) {
    throw new SynBioHubException(e);
  }
 finally {
    request.releaseConnection();
  }
}","/** 
 * Submit to the SynBioHub.
 * @param id The submission identifier
 * @param version The submission version
 * @param name The submission name
 * @param description The submission description
 * @param citations The pubMedIds for this submission
 * @param collections A comma separated list of collections
 * @param overwrite_merge '0' prevent, '1' overwrite, '2' merge and prevent, '3' merge and overwrite
 * @param document the SBOL document to submit
 * @throws SynBioHubException if there was an error communicating with the SynBioHub
 */
public void submit(String id,String version,String name,String description,String citations,String collections,String overwrite_merge,SBOLDocument document) throws SynBioHubException {
  if (user.equals(""String_Node_Str"")) {
    Exception e=new Exception(""String_Node_Str"");
    throw new SynBioHubException(e);
  }
  String url=backendUrl + ""String_Node_Str"";
  HttpPost request=new HttpPost(url);
  request.setHeader(""String_Node_Str"",user);
  request.setHeader(""String_Node_Str"",""String_Node_Str"");
  MultipartEntityBuilder params=MultipartEntityBuilder.create();
  params.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);
  params.addTextBody(""String_Node_Str"",id);
  params.addTextBody(""String_Node_Str"",version);
  params.addTextBody(""String_Node_Str"",name);
  params.addTextBody(""String_Node_Str"",description);
  params.addTextBody(""String_Node_Str"",citations);
  params.addTextBody(""String_Node_Str"",collections);
  params.addTextBody(""String_Node_Str"",overwrite_merge);
  params.addTextBody(""String_Node_Str"",user);
  if (document != null) {
    InputStream stream=new ByteArrayInputStream(serializeDocument(document).getBytes());
    params.addBinaryBody(""String_Node_Str"",stream,ContentType.APPLICATION_XML,""String_Node_Str"");
  }
 else {
    params.addTextBody(""String_Node_Str"",""String_Node_Str"");
  }
  try {
    request.setEntity(params.build());
    HttpResponse response=client.execute(request);
    checkResponseCode(response);
  }
 catch (  Exception e) {
    throw new SynBioHubException(e);
  }
 finally {
    request.releaseConnection();
  }
}",0.9415204678362572
12440,"/** 
 * @return the wasInformedBy
 */
public Set<URI> getWasInformedBys(){
  return wasInformedBys;
}","/** 
 * Returns the set of wasInformedBys referenced by this activity.
 * @return the set of wasInformedBys referenced by this activity
 */
public Set<Activity> getWasInformedBys(){
  if (this.getSBOLDocument() == null)   return null;
  Set<Activity> resolved=new HashSet<>();
  for (  URI wib : wasInformedBys) {
    Activity activity=this.getSBOLDocument().getActivity(wib);
    if (activity != null) {
      resolved.add(activity);
    }
  }
  return resolved;
}",0.2190812720848056
12441,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  Activity other=(Activity)obj;
  if (startedAtTime == null) {
    if (other.startedAtTime != null)     return false;
  }
 else   if (!startedAtTime.equals(other.startedAtTime))   return false;
  if (endedAtTime == null) {
    if (other.endedAtTime != null)     return false;
  }
 else   if (!endedAtTime.equals(other.endedAtTime))   return false;
  if (wasInformedBys == null) {
    if (other.wasInformedBys != null)     return false;
  }
 else   if (!wasInformedBys.equals(other.wasInformedBys))   return false;
  if (associations == null) {
    if (other.associations != null)     return false;
  }
 else   if (!associations.equals(other.associations))   return false;
  if (usages == null) {
    if (other.usages != null)     return false;
  }
 else   if (!usages.equals(other.usages))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  Activity other=(Activity)obj;
  if (startedAtTime == null) {
    if (other.startedAtTime != null)     return false;
  }
 else   if (!startedAtTime.equals(other.startedAtTime))   return false;
  if (endedAtTime == null) {
    if (other.endedAtTime != null)     return false;
  }
 else   if (!endedAtTime.equals(other.endedAtTime))   return false;
  if (wasInformedBys == null) {
    if (other.wasInformedBys != null)     return false;
  }
 else   if (!wasInformedBys.equals(other.wasInformedBys)) {
    if (getWasInformedBys().size() != getWasInformedByURIs().size() || other.getWasInformedBys().size() != other.getWasInformedByURIs().size() || !getWasInformedBys().equals(other.getWasInformedBys())) {
      return false;
    }
  }
  if (associations == null) {
    if (other.associations != null)     return false;
  }
 else   if (!associations.equals(other.associations))   return false;
  if (usages == null) {
    if (other.usages != null)     return false;
  }
 else   if (!usages.equals(other.usages))   return false;
  return true;
}",0.8868778280542986
12442,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  Collection other=(Collection)obj;
  if (members == null) {
    if (other.members != null)     return false;
  }
 else   if (!members.equals(other.members))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  Collection other=(Collection)obj;
  if (members == null) {
    if (other.members != null)     return false;
  }
 else   if (!members.equals(other.members)) {
    if (getMembers().size() != getMemberURIs().size() || other.getMembers().size() != other.getMemberURIs().size() || !getMembers().equals(other.getMembers())) {
      return false;
    }
  }
  if (members == null) {
    if (other.members != null)     return false;
  }
 else   if (!members.equals(other.members))   return false;
  return true;
}",0.6372360844529751
12443,"/** 
 * Returns the set of sequence URIs referenced by this component definition.
 * @return the set of sequence URIs referenced by this component definition
 */
public Set<URI> getSequenceURIs(){
  return sequences;
}","/** 
 * Returns the set of sequence URIs referenced by this component definition.
 * @return the set of sequence URIs referenced by this component definition
 */
public Set<URI> getSequenceURIs(){
  Set<URI> result=new HashSet<>();
  result.addAll(sequences);
  return result;
}",0.8145161290322581
12444,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  ComponentDefinition other=(ComponentDefinition)obj;
  if (roles == null) {
    if (other.roles != null)     return false;
  }
 else   if (!roles.equals(other.roles))   return false;
  if (sequences == null) {
    if (other.sequences != null)     return false;
  }
 else   if (!sequences.equals(other.sequences))   return false;
  if (sequenceAnnotations == null) {
    if (other.sequenceAnnotations != null)     return false;
  }
 else   if (!sequenceAnnotations.equals(other.sequenceAnnotations))   return false;
  if (sequenceConstraints == null) {
    if (other.sequenceConstraints != null)     return false;
  }
 else   if (!sequenceConstraints.equals(other.sequenceConstraints))   return false;
  if (components == null) {
    if (other.components != null)     return false;
  }
 else   if (!components.equals(other.components))   return false;
  if (types == null) {
    if (other.types != null)     return false;
  }
 else   if (!types.equals(other.types))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  ComponentDefinition other=(ComponentDefinition)obj;
  if (roles == null) {
    if (other.roles != null)     return false;
  }
 else   if (!roles.equals(other.roles))   return false;
  if (sequences == null) {
    if (other.sequences != null)     return false;
  }
 else   if (!sequences.equals(other.sequences)) {
    if (getSequences().size() != getSequenceURIs().size() || other.getSequences().size() != other.getSequenceURIs().size() || !getSequences().equals(other.getSequences())) {
      return false;
    }
  }
  if (sequenceAnnotations == null) {
    if (other.sequenceAnnotations != null)     return false;
  }
 else   if (!sequenceAnnotations.equals(other.sequenceAnnotations))   return false;
  if (sequenceConstraints == null) {
    if (other.sequenceConstraints != null)     return false;
  }
 else   if (!sequenceConstraints.equals(other.sequenceConstraints))   return false;
  if (components == null) {
    if (other.components != null)     return false;
  }
 else   if (!components.equals(other.components))   return false;
  if (types == null) {
    if (other.types != null)     return false;
  }
 else   if (!types.equals(other.types))   return false;
  return true;
}",0.9131121642969984
12445,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  ComponentInstance other=(ComponentInstance)obj;
  if (definition == null) {
    if (other.definition != null)     return false;
  }
 else   if (!definition.equals(other.definition))   return false;
  if (access != other.access)   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  ComponentInstance other=(ComponentInstance)obj;
  if (definition == null) {
    if (other.definition != null)     return false;
  }
 else   if (!definition.equals(other.definition)) {
    if (getDefinition() == null || other.getDefinition() == null || !getDefinition().equals(other.getDefinition())) {
      return false;
    }
  }
  if (access != other.access)   return false;
  return true;
}",0.7171314741035857
12446,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  MapsTo other=(MapsTo)obj;
  if (local == null) {
    if (other.local != null)     return false;
  }
 else   if (!local.equals(other.local))   return false;
  if (refinement != other.refinement)   return false;
  if (remote == null) {
    if (other.remote != null)     return false;
  }
 else   if (!remote.equals(other.remote))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  MapsTo other=(MapsTo)obj;
  if (local == null) {
    if (other.local != null)     return false;
  }
 else   if (!local.equals(other.local)) {
    if (getLocal() == null || other.getLocal() == null || !getLocal().equals(other.getLocal())) {
      return false;
    }
  }
  if (remote == null) {
    if (other.remote != null)     return false;
  }
 else   if (!remote.equals(other.remote)) {
    if (getRemote() == null || other.getRemote() == null || !getRemote().equals(other.getRemote())) {
      return false;
    }
  }
  if (refinement != other.refinement)   return false;
  return true;
}",0.5714285714285714
12447,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  Module other=(Module)obj;
  if (definition == null) {
    if (other.definition != null)     return false;
  }
 else   if (!definition.equals(other.definition))   return false;
  if (mapsTos == null) {
    if (other.mapsTos != null)     return false;
  }
 else   if (!mapsTos.equals(other.mapsTos))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  Module other=(Module)obj;
  if (definition == null) {
    if (other.definition != null)     return false;
  }
 else   if (!definition.equals(other.definition)) {
    if (getDefinition() == null || other.getDefinition() == null || !getDefinition().equals(other.getDefinition())) {
      return false;
    }
  }
  if (mapsTos == null) {
    if (other.mapsTos != null)     return false;
  }
 else   if (!mapsTos.equals(other.mapsTos))   return false;
  return true;
}",0.8566433566433567
12448,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  ModuleDefinition other=(ModuleDefinition)obj;
  if (functionalComponents == null) {
    if (other.functionalComponents != null)     return false;
  }
 else   if (!functionalComponents.equals(other.functionalComponents))   return false;
  if (interactions == null) {
    if (other.interactions != null)     return false;
  }
 else   if (!interactions.equals(other.interactions))   return false;
  if (models == null) {
    if (other.models != null)     return false;
  }
 else   if (!models.equals(other.models))   return false;
  if (roles == null) {
    if (other.roles != null)     return false;
  }
 else   if (!roles.equals(other.roles))   return false;
  if (modules == null) {
    if (other.modules != null)     return false;
  }
 else   if (!modules.equals(other.modules))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  ModuleDefinition other=(ModuleDefinition)obj;
  if (functionalComponents == null) {
    if (other.functionalComponents != null)     return false;
  }
 else   if (!functionalComponents.equals(other.functionalComponents))   return false;
  if (interactions == null) {
    if (other.interactions != null)     return false;
  }
 else   if (!interactions.equals(other.interactions))   return false;
  if (models == null) {
    if (other.models != null)     return false;
  }
 else   if (!models.equals(other.models)) {
    if (getModels().size() != getModelURIs().size() || other.getModels().size() != other.getModelURIs().size() || !getModels().equals(other.getModels())) {
      return false;
    }
  }
  if (roles == null) {
    if (other.roles != null)     return false;
  }
 else   if (!roles.equals(other.roles))   return false;
  if (modules == null) {
    if (other.modules != null)     return false;
  }
 else   if (!modules.equals(other.modules))   return false;
  return true;
}",0.8490214352283317
12449,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  Participation other=(Participation)obj;
  if (participant == null) {
    if (other.participant != null)     return false;
  }
 else   if (!participant.equals(other.participant))   return false;
  if (roles == null) {
    if (other.roles != null)     return false;
  }
 else   if (!roles.equals(other.roles))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  Participation other=(Participation)obj;
  if (participant == null) {
    if (other.participant != null)     return false;
  }
 else   if (!participant.equals(other.participant)) {
    if (getParticipant() == null || other.getParticipant() == null || !getParticipant().equals(other.getParticipant())) {
      return false;
    }
  }
  if (roles == null) {
    if (other.roles != null)     return false;
  }
 else   if (!roles.equals(other.roles))   return false;
  return true;
}",0.7363013698630136
12450,"private static void formatActivities(Set<Activity> activities,List<TopLevelDocument<QName>> topLevelDoc){
  for (  Activity activity : activities) {
    List<NamedProperty<QName>> list=new ArrayList<>();
    formatCommonTopLevelData(list,activity);
    if (activity.isSetStartedAtTime()) {
      list.add(NamedProperty(Sbol2Terms.Activity.startedAtTime,activity.getStartedAtTime().toString()));
    }
    if (activity.isSetEndedAtTime()) {
      list.add(NamedProperty(Sbol2Terms.Activity.endedAtTime,activity.getEndedAtTime().toString()));
    }
    formatAssociations(activity.getAssociations(),list);
    formatUsages(activity.getUsages(),list);
    topLevelDoc.add(TopLevelDocument(Sbol2Terms.Activity.Activity,activity.getIdentity(),NamedProperties(list)));
  }
}","private static void formatActivities(Set<Activity> activities,List<TopLevelDocument<QName>> topLevelDoc){
  for (  Activity activity : activities) {
    List<NamedProperty<QName>> list=new ArrayList<>();
    formatCommonTopLevelData(list,activity);
    if (activity.isSetStartedAtTime()) {
      list.add(NamedProperty(Sbol2Terms.Activity.startedAtTime,activity.getStartedAtTime().toString()));
    }
    if (activity.isSetEndedAtTime()) {
      list.add(NamedProperty(Sbol2Terms.Activity.endedAtTime,activity.getEndedAtTime().toString()));
    }
    formatAssociations(activity.getAssociations(),list);
    formatUsages(activity.getUsages(),list);
    formatWasInformedByProperties(activity.getWasInformedByURIs(),list);
    topLevelDoc.add(TopLevelDocument(Sbol2Terms.Activity.Activity,activity.getIdentity(),NamedProperties(list)));
  }
}",0.9546302050963332
12451,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  SequenceAnnotation other=(SequenceAnnotation)obj;
  if (component == null) {
    if (other.component != null)     return false;
  }
 else   if (!component.equals(other.component))   return false;
  if (roles == null) {
    if (other.roles != null)     return false;
  }
 else   if (!roles.equals(other.roles))   return false;
  if (locations == null) {
    if (other.locations != null)     return false;
  }
 else   if (!locations.equals(other.locations))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  SequenceAnnotation other=(SequenceAnnotation)obj;
  if (component == null) {
    if (other.component != null)     return false;
  }
 else   if (!component.equals(other.component)) {
    if (getComponent() == null || other.getComponent() == null || !getComponent().equals(other.getComponent())) {
      return false;
    }
  }
  if (roles == null) {
    if (other.roles != null)     return false;
  }
 else   if (!roles.equals(other.roles))   return false;
  if (locations == null) {
    if (other.locations != null)     return false;
  }
 else   if (!locations.equals(other.locations))   return false;
  return true;
}",0.8063186813186813
12452,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  SequenceConstraint other=(SequenceConstraint)obj;
  if (object == null) {
    if (other.object != null)     return false;
  }
 else   if (!object.equals(other.object))   return false;
  if (!restriction.equals(other.restriction))   return false;
  if (subject == null) {
    if (other.subject != null)     return false;
  }
 else   if (!subject.equals(other.subject))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  SequenceConstraint other=(SequenceConstraint)obj;
  if (subject == null) {
    if (other.subject != null)     return false;
  }
 else   if (!subject.equals(other.subject)) {
    if (getSubject() == null || other.getSubject() == null || !getSubject().equals(other.getSubject())) {
      return false;
    }
  }
  if (object == null) {
    if (other.object != null)     return false;
  }
 else   if (!object.equals(other.object)) {
    if (getObject() == null || other.getObject() == null || !getObject().equals(other.getObject())) {
      return false;
    }
  }
  if (!restriction.equals(other.restriction))   return false;
  return true;
}",0.6100719424460431
12453,"private static void formatCombinatorialDerivation(Set<CombinatorialDerivation> combinatorialDerivations,List<TopLevelDocument<QName>> topLevelDoc){
  for (  CombinatorialDerivation combinatorialDerivation : combinatorialDerivations) {
    List<NamedProperty<QName>> list=new ArrayList<>();
    formatCommonTopLevelData(list,combinatorialDerivation);
    list.add(NamedProperty(Sbol2Terms.CombinatorialDerivation.template,combinatorialDerivation.getTemplate()));
    list.add(NamedProperty(Sbol2Terms.CombinatorialDerivation.strategy,combinatorialDerivation.getStrategy()));
    formatVariableComponents(combinatorialDerivation.getVariableComponents(),list);
    topLevelDoc.add(TopLevelDocument(Sbol2Terms.CombinatorialDerivation.CombinatorialDerivation,combinatorialDerivation.getIdentity(),NamedProperties(list)));
  }
}","private static void formatCombinatorialDerivation(Set<CombinatorialDerivation> combinatorialDerivations,List<TopLevelDocument<QName>> topLevelDoc){
  for (  CombinatorialDerivation combinatorialDerivation : combinatorialDerivations) {
    List<NamedProperty<QName>> list=new ArrayList<>();
    formatCommonTopLevelData(list,combinatorialDerivation);
    list.add(NamedProperty(Sbol2Terms.CombinatorialDerivation.template,combinatorialDerivation.getTemplate()));
    list.add(NamedProperty(Sbol2Terms.CombinatorialDerivation.strategy,combinatorialDerivation.getStrategy()));
    formatVariableComponents(new HashSet<VariableComponent>(combinatorialDerivation.getVariableComponents().values()),list);
    topLevelDoc.add(TopLevelDocument(Sbol2Terms.CombinatorialDerivation.CombinatorialDerivation,combinatorialDerivation.getIdentity(),NamedProperties(list)));
  }
}",0.9756676557863502
12454,"private static List<TopLevelDocument<QName>> getTopLevelDocument(SBOLDocument doc){
  List<TopLevelDocument<QName>> topLevelDoc=new ArrayList<>();
  formatCollections(doc.getCollections(),topLevelDoc);
  formatModuleDefinitions(doc.getModuleDefinitions(),topLevelDoc);
  formatModels(doc.getModels(),topLevelDoc);
  formatComponentDefinitions(doc.getComponentDefinitions(),topLevelDoc);
  formatSequences(doc.getSequences(),topLevelDoc);
  formatGenericTopLevel(doc.getGenericTopLevels(),topLevelDoc);
  return topLevelDoc;
}","private static List<TopLevelDocument<QName>> getTopLevelDocument(SBOLDocument doc){
  List<TopLevelDocument<QName>> topLevelDoc=new ArrayList<>();
  formatCollections(doc.getCollections(),topLevelDoc);
  formatModuleDefinitions(doc.getModuleDefinitions(),topLevelDoc);
  formatModels(doc.getModels(),topLevelDoc);
  formatComponentDefinitions(doc.getComponentDefinitions(),topLevelDoc);
  formatSequences(doc.getSequences(),topLevelDoc);
  formatGenericTopLevel(doc.getGenericTopLevels(),topLevelDoc);
  formatCombinatorialDerivation(doc.getCombinatorialDerivations(),topLevelDoc);
  return topLevelDoc;
}",0.9292035398230089
12455,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((URIValue == null) ? 0 : URIValue.hashCode());
  result=prime * result + ((boolValue == null) ? 0 : boolValue.hashCode());
  result=prime * result + ((doubleValue == null) ? 0 : doubleValue.hashCode());
  result=prime * result + ((intValue == null) ? 0 : intValue.hashCode());
  result=prime * result + ((localPart == null) ? 0 : localPart.hashCode());
  result=prime * result + ((namespaceURI == null) ? 0 : namespaceURI.hashCode());
  result=prime * result + ((nestedAnnotations == null) ? 0 : nestedAnnotations.hashCode());
  result=prime * result + ((nestedLocalPart == null) ? 0 : nestedLocalPart.hashCode());
  result=prime * result + ((nestedNamespaceURI == null) ? 0 : nestedNamespaceURI.hashCode());
  result=prime * result + ((nestedPrefix == null) ? 0 : nestedPrefix.hashCode());
  result=prime * result + ((nestedURI == null) ? 0 : nestedURI.hashCode());
  result=prime * result + ((prefix == null) ? 0 : prefix.hashCode());
  result=prime * result + ((stringValue == null) ? 0 : stringValue.hashCode());
  result=prime * result + ((type == null) ? 0 : type.hashCode());
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((URIValue == null) ? 0 : URIValue.hashCode());
  result=prime * result + ((boolValue == null) ? 0 : boolValue.hashCode());
  result=prime * result + ((doubleValue == null) ? 0 : doubleValue.hashCode());
  result=prime * result + ((intValue == null) ? 0 : intValue.hashCode());
  result=prime * result + ((localPart == null) ? 0 : localPart.hashCode());
  result=prime * result + ((namespaceURI == null) ? 0 : namespaceURI.hashCode());
  result=prime * result + ((nestedAnnotations == null) ? 0 : nestedAnnotations.hashCode());
  result=prime * result + ((nestedLocalPart == null) ? 0 : nestedLocalPart.hashCode());
  result=prime * result + ((nestedNamespaceURI == null) ? 0 : nestedNamespaceURI.hashCode());
  result=prime * result + ((nestedURI == null) ? 0 : nestedURI.hashCode());
  result=prime * result + ((stringValue == null) ? 0 : stringValue.hashCode());
  result=prime * result + ((type == null) ? 0 : type.hashCode());
  return result;
}",0.9323241317898486
12456,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  Annotation other=(Annotation)obj;
  if (URIValue == null) {
    if (other.URIValue != null)     return false;
  }
 else   if (!URIValue.equals(other.URIValue))   return false;
  if (boolValue == null) {
    if (other.boolValue != null)     return false;
  }
 else   if (!boolValue.equals(other.boolValue))   return false;
  if (doubleValue == null) {
    if (other.doubleValue != null)     return false;
  }
 else   if (!doubleValue.equals(other.doubleValue))   return false;
  if (intValue == null) {
    if (other.intValue != null)     return false;
  }
 else   if (!intValue.equals(other.intValue))   return false;
  if (localPart == null) {
    if (other.localPart != null)     return false;
  }
 else   if (!localPart.equals(other.localPart))   return false;
  if (namespaceURI == null) {
    if (other.namespaceURI != null)     return false;
  }
 else   if (!namespaceURI.equals(other.namespaceURI))   return false;
  if (nestedAnnotations == null) {
    if (other.nestedAnnotations != null)     return false;
  }
 else   if (!nestedAnnotations.equals(other.nestedAnnotations))   return false;
  if (nestedLocalPart == null) {
    if (other.nestedLocalPart != null)     return false;
  }
 else   if (!nestedLocalPart.equals(other.nestedLocalPart))   return false;
  if (nestedNamespaceURI == null) {
    if (other.nestedNamespaceURI != null)     return false;
  }
 else   if (!nestedNamespaceURI.equals(other.nestedNamespaceURI))   return false;
  if (nestedPrefix == null) {
    if (other.nestedPrefix != null)     return false;
  }
 else   if (!nestedPrefix.equals(other.nestedPrefix))   return false;
  if (nestedURI == null) {
    if (other.nestedURI != null)     return false;
  }
 else   if (!nestedURI.equals(other.nestedURI))   return false;
  if (prefix == null) {
    if (other.prefix != null)     return false;
  }
 else   if (!prefix.equals(other.prefix))   return false;
  if (stringValue == null) {
    if (other.stringValue != null)     return false;
  }
 else   if (!stringValue.equals(other.stringValue))   return false;
  if (type == null) {
    if (other.type != null)     return false;
  }
 else   if (!type.equals(other.type))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  Annotation other=(Annotation)obj;
  if (URIValue == null) {
    if (other.URIValue != null)     return false;
  }
 else   if (!URIValue.equals(other.URIValue))   return false;
  if (boolValue == null) {
    if (other.boolValue != null)     return false;
  }
 else   if (!boolValue.equals(other.boolValue))   return false;
  if (doubleValue == null) {
    if (other.doubleValue != null)     return false;
  }
 else   if (!doubleValue.equals(other.doubleValue))   return false;
  if (intValue == null) {
    if (other.intValue != null)     return false;
  }
 else   if (!intValue.equals(other.intValue))   return false;
  if (localPart == null) {
    if (other.localPart != null)     return false;
  }
 else   if (!localPart.equals(other.localPart))   return false;
  if (namespaceURI == null) {
    if (other.namespaceURI != null)     return false;
  }
 else   if (!namespaceURI.equals(other.namespaceURI))   return false;
  if (nestedAnnotations == null) {
    if (other.nestedAnnotations != null)     return false;
  }
 else   if (!nestedAnnotations.equals(other.nestedAnnotations))   return false;
  if (nestedLocalPart == null) {
    if (other.nestedLocalPart != null)     return false;
  }
 else   if (!nestedLocalPart.equals(other.nestedLocalPart))   return false;
  if (nestedNamespaceURI == null) {
    if (other.nestedNamespaceURI != null)     return false;
  }
 else   if (!nestedNamespaceURI.equals(other.nestedNamespaceURI))   return false;
  if (nestedURI == null) {
    if (other.nestedURI != null)     return false;
  }
 else   if (!nestedURI.equals(other.nestedURI))   return false;
  if (stringValue == null) {
    if (other.stringValue != null)     return false;
  }
 else   if (!stringValue.equals(other.stringValue))   return false;
  if (type == null) {
    if (other.type != null)     return false;
  }
 else   if (!type.equals(other.type))   return false;
  return true;
}",0.90625
12457,"/** 
 * @param doc
 * @param stringBuffer
 * @param URIPrefix
 * @throws IOException
 * @throws SBOLConversionException
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the following methods:<ul> <li> {@link SBOLDocument#createComponentDefinition(String,String,URI)},</li> <li>  {@link Identified#setAnnotations(List)},</li> <li>  {@link SequenceAnnotation#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,int,OrientationType)},</li> <li>  {@link SequenceAnnotation#setComponent(String)},</li> <li>  {@link SequenceAnnotation#addRange(String,int,int,OrientationType)},</li> <li>  {@link Range#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,OrientationType)},</li> <li>  {@link SBOLDocument#createSequence(String,String,String,URI)}, </li> <li>  {@link ComponentDefinition#addSequence(Sequence)}, or </li> <li>  {@link #createSubComponentDefinitions(SBOLDocument,ComponentDefinition,URI,String,String)}.</li> </ul>
 */
static void read(SBOLDocument doc,String stringBuffer,String URIPrefix,String defaultVersion) throws IOException, SBOLConversionException, SBOLValidationException {
  so=new SequenceOntology();
  doc.addNamespace(URI.create(GBNAMESPACE),GBPREFIX);
  doc.addNamespace(URI.create(GBCONVNAMESPACE),GBCONVPREFIX);
  BufferedReader br=new BufferedReader(new StringReader(stringBuffer));
  String strLine;
  int featureCnt=0;
  int refCnt=0;
  nextLine=null;
  String labelType=""String_Node_Str"";
  URI lastRole=null;
  while (true) {
    boolean cont=false;
    String id=""String_Node_Str"";
    String accession=""String_Node_Str"";
    String version=defaultVersion;
    featureMode=false;
    originMode=false;
    StringBuilder sbSequence=new StringBuilder();
    String elements=null;
    String description=""String_Node_Str"";
    URI type=ComponentDefinition.DNA;
    ComponentDefinition topCD=null;
    List<Annotation> annotations=new ArrayList<Annotation>();
    List<Annotation> nestedAnnotations=null;
    Annotation annotation=null;
    boolean circular=false;
    int baseCount=0;
    while ((strLine=readGenBankLine(br)) != null) {
      strLine=strLine.trim();
      if (strLine.startsWith(""String_Node_Str"")) {
        id=strLine.substring(12,28).trim();
        annotation=new Annotation(new QName(GBNAMESPACE,LOCUS,GBPREFIX),id);
        id=URIcompliance.fixDisplayId(id);
        annotations.add(annotation);
        baseCount=Integer.parseInt(strLine.substring(29,40).trim());
        String seqType=strLine.substring(44,53).trim();
        if (seqType.toUpperCase().contains(""String_Node_Str"")) {
          type=ComponentDefinition.RNA;
        }
        annotation=new Annotation(new QName(GBNAMESPACE,MOLECULE,GBPREFIX),seqType);
        annotations.add(annotation);
        String topology=strLine.substring(55,63).trim();
        if (topology.startsWith(""String_Node_Str"") || topology.startsWith(""String_Node_Str"")) {
          if (topology.startsWith(""String_Node_Str""))           circular=true;
        }
        String division=strLine.substring(64,67).trim();
        annotation=new Annotation(new QName(GBNAMESPACE,DIVISION,GBPREFIX),division);
        annotations.add(annotation);
        String date=strLine.substring(68,79).trim();
        annotation=new Annotation(new QName(GBNAMESPACE,DATE,GBPREFIX),date);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        if (strSplit.length > 1) {
          accession=strSplit[1];
          if (accession.length() > 1) {
            id=accession;
            id=URIcompliance.fixDisplayId(id);
          }
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        if (strSplit.length > 1) {
          if (!accession.equals(strSplit[1])) {
            if (strSplit[1].split(""String_Node_Str"").length > 1) {
              version=strSplit[1].split(""String_Node_Str"")[strSplit[1].split(""String_Node_Str"").length - 1];
            }
            String vId=strSplit[1].split(""String_Node_Str"")[0];
            if (!accession.equals(vId)) {
              throw new SBOLConversionException(""String_Node_Str"");
            }
          }
        }
        if (strSplit.length > 2) {
          annotation=new Annotation(new QName(GBNAMESPACE,GINUMBER,GBPREFIX),strSplit[2]);
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,KEYWORDS,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,SOURCE,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,ORGANISM,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        nestedAnnotations=new ArrayList<Annotation>();
        Annotation labelAnnotation=new Annotation(new QName(GBNAMESPACE,LABEL,GBPREFIX),annotationStr);
        nestedAnnotations.add(labelAnnotation);
        URI nestedURI=URI.create(URIPrefix + id + ""String_Node_Str""+ refCnt);
        refCnt++;
        annotation=new Annotation(new QName(GBNAMESPACE,REFERENCE,GBPREFIX),new QName(GBNAMESPACE,NESTEDREFERENCE,GBPREFIX),nestedURI,nestedAnnotations);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,AUTHORS,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,TITLE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,JOURNAL,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,MEDLINE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,PUBMED,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
        Annotation pubMedAnnotation=new Annotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),annotationStr);
        annotations.add(pubMedAnnotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,COMMENT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,BASECOUNT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        topCD=doc.createComponentDefinition(id,version,type);
        if (circular) {
          topCD.addType(SequenceOntology.CIRCULAR);
        }
 else {
          topCD.addType(SequenceOntology.LINEAR);
        }
        topCD.addRole(SequenceOntology.ENGINEERED_REGION);
        if (!""String_Node_Str"".equals(description)) {
          topCD.setDescription(description);
        }
        topCD.setAnnotations(annotations);
        featureMode=true;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        originMode=true;
        featureMode=false;
      }
 else {
        if (featureMode) {
          if (strLine.startsWith(""String_Node_Str"")) {
            String tag=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
            String value=""String_Node_Str"";
            if ((-1) != strLine.indexOf('=')) {
              String[] splitStr=strLine.split(""String_Node_Str"");
              tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
              value=splitStr[1];
            }
            StringBuilder sbValue=new StringBuilder();
            sbValue.append(value);
            if (value.startsWith(""String_Node_Str"") && !value.endsWith(""String_Node_Str"")) {
              while (true) {
                strLine=readGenBankLine(br).trim();
                sbValue.append(strLine);
                if (strLine.endsWith(""String_Node_Str"")) {
                  break;
                }
              }
            }
            SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
            if (sa != null) {
              if (tag.equals(""String_Node_Str"")) {
                sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                labelType=""String_Node_Str"";
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"")&& !labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"")&& !labelType.equals(""String_Node_Str"")&& !labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
              if (value.startsWith(""String_Node_Str"")) {
                value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
 else {
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
              sa.addAnnotation(annotation);
            }
          }
 else {
            strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
            String[] strSplit=strLine.split(""String_Node_Str"");
            String featureType=strSplit[0];
            URI role=convertGenBanktoSO(featureType);
            String range=strSplit[1];
            boolean outerComplement=false;
            OrientationType orientation=OrientationType.INLINE;
            if (range.startsWith(""String_Node_Str"")) {
              outerComplement=true;
              orientation=OrientationType.REVERSECOMPLEMENT;
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            }
            if (range.startsWith(""String_Node_Str"") || range.startsWith(""String_Node_Str"")) {
              String multiType=""String_Node_Str"";
              if (range.startsWith(""String_Node_Str"")) {
                multiType=""String_Node_Str"";
              }
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              String[] ranges=range.split(""String_Node_Str"");
              int rangeCnt=0;
              SequenceAnnotation sa=null;
              for (              String r : ranges) {
                orientation=OrientationType.INLINE;
                if (r.startsWith(""String_Node_Str"") || outerComplement) {
                  orientation=OrientationType.REVERSECOMPLEMENT;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean startLessThan=false;
                boolean endGreaterThan=false;
                if (r.contains(""String_Node_Str"")) {
                  startLessThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                if (r.contains(""String_Node_Str"")) {
                  endGreaterThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean singleBaseRange=false;
                String[] rangeSplit=null;
                if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                  rangeSplit=r.split(""String_Node_Str"");
                  singleBaseRange=true;
                }
 else {
                  rangeSplit=r.split(""String_Node_Str"");
                }
                int start=Integer.parseInt(rangeSplit[0]);
                int end=Integer.parseInt(rangeSplit[1]);
                Range newRange=null;
                if (rangeCnt == 0) {
                  sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
                  sa.setName(featureType);
                  sa.addRole(role);
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,MULTIRANGETYPE,GBCONVPREFIX),multiType);
                  sa.addAnnotation(annotation);
                  newRange=(Range)sa.getLocation(""String_Node_Str"" + rangeCnt);
                }
 else                 if (sa != null) {
                  newRange=sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
                }
                if (outerComplement) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + ((ranges.length - 1) - rangeCnt));
                }
 else {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + rangeCnt);
                }
                newRange.addAnnotation(annotation);
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                rangeCnt++;
              }
            }
 else             if (range.contains(""String_Node_Str"")) {
              String[] rangeSplit=range.split(""String_Node_Str"");
              int at=Integer.parseInt(rangeSplit[0]);
              SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
              sa.addRole(role);
              sa.setName(featureType);
            }
 else {
              boolean startLessThan=false;
              boolean endGreaterThan=false;
              if (range.contains(""String_Node_Str"")) {
                startLessThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              if (range.contains(""String_Node_Str"")) {
                endGreaterThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean singleBaseRange=false;
              String[] rangeSplit=null;
              if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                rangeSplit=range.split(""String_Node_Str"");
                singleBaseRange=true;
              }
 else {
                rangeSplit=range.split(""String_Node_Str"");
              }
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[0]);
              if (rangeSplit.length > 1) {
                end=Integer.parseInt(rangeSplit[1]);
              }
              if (start > end && circular) {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,baseCount,orientation);
                sa.addRole(role);
                sa.setName(featureType);
                annotation=new Annotation(new QName(GBCONVNAMESPACE,STRADLESORIGIN,GBCONVPREFIX),""String_Node_Str"");
                sa.addAnnotation(annotation);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                newRange=sa.addRange(""String_Node_Str"",1,end,orientation);
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
 else {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
                sa.addRole(role);
                sa.setName(featureType);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
            }
            labelType=""String_Node_Str"";
            lastRole=role;
            featureCnt++;
          }
        }
 else         if (originMode) {
          if (featureCnt == 1) {
            topCD.clearRoles();
            topCD.addRole(lastRole);
          }
          if (elements == null) {
            elements=new String(""String_Node_Str"");
          }
          if (strLine.startsWith(""String_Node_Str"")) {
            cont=true;
            break;
          }
          String[] strSplit=strLine.split(""String_Node_Str"");
          for (int i=1; i < strSplit.length; i++) {
            sbSequence.append(strSplit[i]);
          }
        }
        cont=false;
      }
    }
    if (topCD != null) {
      Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,sbSequence.toString(),Sequence.IUPAC_DNA);
      topCD.addSequence(sequence);
      createSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);
    }
    if (!cont)     break;
  }
  br.close();
}","/** 
 * @param doc
 * @param stringBuffer
 * @param URIPrefix
 * @throws IOException
 * @throws SBOLConversionException
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the following methods:<ul> <li> {@link SBOLDocument#createComponentDefinition(String,String,URI)},</li> <li>  {@link Identified#setAnnotations(List)},</li> <li>  {@link SequenceAnnotation#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,int,OrientationType)},</li> <li>  {@link SequenceAnnotation#setComponent(String)},</li> <li>  {@link SequenceAnnotation#addRange(String,int,int,OrientationType)},</li> <li>  {@link Range#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,OrientationType)},</li> <li>  {@link SBOLDocument#createSequence(String,String,String,URI)}, </li> <li>  {@link ComponentDefinition#addSequence(Sequence)}, or </li> <li>  {@link #createSubComponentDefinitions(SBOLDocument,ComponentDefinition,URI,String,String)}.</li> </ul>
 */
static void read(SBOLDocument doc,String stringBuffer,String URIPrefix,String defaultVersion) throws IOException, SBOLConversionException, SBOLValidationException {
  so=new SequenceOntology();
  doc.addNamespace(URI.create(GBNAMESPACE),GBPREFIX);
  doc.addNamespace(URI.create(GBCONVNAMESPACE),GBCONVPREFIX);
  BufferedReader br=new BufferedReader(new StringReader(stringBuffer));
  String strLine;
  int featureCnt=0;
  int refCnt=0;
  nextLine=null;
  String labelType=""String_Node_Str"";
  URI lastRole=null;
  while (true) {
    boolean cont=false;
    String id=""String_Node_Str"";
    String accession=""String_Node_Str"";
    String version=defaultVersion;
    featureMode=false;
    originMode=false;
    StringBuilder sbSequence=new StringBuilder();
    String elements=null;
    String description=""String_Node_Str"";
    URI type=ComponentDefinition.DNA;
    ComponentDefinition topCD=null;
    List<Annotation> annotations=new ArrayList<Annotation>();
    List<Annotation> nestedAnnotations=null;
    Annotation annotation=null;
    boolean circular=false;
    int baseCount=0;
    while ((strLine=readGenBankLine(br)) != null) {
      strLine=strLine.trim();
      if (strLine.startsWith(""String_Node_Str"")) {
        id=strLine.substring(12,28).trim();
        annotation=new Annotation(new QName(GBNAMESPACE,LOCUS,GBPREFIX),id);
        id=URIcompliance.fixDisplayId(id);
        annotations.add(annotation);
        int startBaseCount=strLine.substring(29,40).lastIndexOf(""String_Node_Str"");
        baseCount=Integer.parseInt(strLine.substring(29 + startBaseCount,40).trim());
        String seqType=strLine.substring(44,53).trim();
        if (seqType.toUpperCase().contains(""String_Node_Str"")) {
          type=ComponentDefinition.RNA;
        }
        annotation=new Annotation(new QName(GBNAMESPACE,MOLECULE,GBPREFIX),seqType);
        annotations.add(annotation);
        String topology=strLine.substring(55,63).trim();
        if (topology.startsWith(""String_Node_Str"") || topology.startsWith(""String_Node_Str"")) {
          if (topology.startsWith(""String_Node_Str""))           circular=true;
        }
        String division=strLine.substring(64,67).trim();
        annotation=new Annotation(new QName(GBNAMESPACE,DIVISION,GBPREFIX),division);
        annotations.add(annotation);
        String date=strLine.substring(68,79).trim();
        annotation=new Annotation(new QName(GBNAMESPACE,DATE,GBPREFIX),date);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        if (strSplit.length > 1) {
          accession=strSplit[1];
          if (accession.length() > 1) {
            id=accession;
            id=URIcompliance.fixDisplayId(id);
          }
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        if (strSplit.length > 1) {
          if (!accession.equals(strSplit[1])) {
            if (strSplit[1].split(""String_Node_Str"").length > 1) {
              version=strSplit[1].split(""String_Node_Str"")[strSplit[1].split(""String_Node_Str"").length - 1];
            }
            String vId=strSplit[1].split(""String_Node_Str"")[0];
            if (!accession.equals(vId)) {
              throw new SBOLConversionException(""String_Node_Str"");
            }
          }
        }
        if (strSplit.length > 2) {
          annotation=new Annotation(new QName(GBNAMESPACE,GINUMBER,GBPREFIX),strSplit[2]);
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,KEYWORDS,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,SOURCE,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,ORGANISM,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        nestedAnnotations=new ArrayList<Annotation>();
        Annotation labelAnnotation=new Annotation(new QName(GBNAMESPACE,LABEL,GBPREFIX),annotationStr);
        nestedAnnotations.add(labelAnnotation);
        URI nestedURI=URI.create(URIPrefix + id + ""String_Node_Str""+ refCnt);
        refCnt++;
        annotation=new Annotation(new QName(GBNAMESPACE,REFERENCE,GBPREFIX),new QName(GBNAMESPACE,NESTEDREFERENCE,GBPREFIX),nestedURI,nestedAnnotations);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,AUTHORS,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,TITLE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,JOURNAL,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,MEDLINE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,PUBMED,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
        Annotation pubMedAnnotation=new Annotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),annotationStr);
        annotations.add(pubMedAnnotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,COMMENT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,BASECOUNT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        topCD=doc.createComponentDefinition(id,version,type);
        if (circular) {
          topCD.addType(SequenceOntology.CIRCULAR);
        }
 else {
          topCD.addType(SequenceOntology.LINEAR);
        }
        topCD.addRole(SequenceOntology.ENGINEERED_REGION);
        if (!""String_Node_Str"".equals(description)) {
          topCD.setDescription(description);
        }
        topCD.setAnnotations(annotations);
        featureMode=true;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        originMode=true;
        featureMode=false;
      }
 else {
        if (featureMode) {
          if (strLine.startsWith(""String_Node_Str"")) {
            String tag=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
            String value=""String_Node_Str"";
            if ((-1) != strLine.indexOf('=')) {
              String[] splitStr=strLine.split(""String_Node_Str"");
              tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
              value=splitStr[1];
            }
            StringBuilder sbValue=new StringBuilder();
            sbValue.append(value);
            if (value.startsWith(""String_Node_Str"") && !value.endsWith(""String_Node_Str"")) {
              while (true) {
                strLine=readGenBankLine(br).trim();
                sbValue.append(strLine);
                if (strLine.endsWith(""String_Node_Str"")) {
                  break;
                }
              }
            }
            SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
            if (sa != null) {
              if (tag.equals(""String_Node_Str"")) {
                sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                labelType=""String_Node_Str"";
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"")&& !labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"")&& !labelType.equals(""String_Node_Str"")&& !labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
              if (value.startsWith(""String_Node_Str"")) {
                value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
 else {
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
              sa.addAnnotation(annotation);
            }
          }
 else {
            strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
            String[] strSplit=strLine.split(""String_Node_Str"");
            String featureType=strSplit[0];
            URI role=convertGenBanktoSO(featureType);
            String range=strSplit[1];
            boolean outerComplement=false;
            OrientationType orientation=OrientationType.INLINE;
            if (range.startsWith(""String_Node_Str"")) {
              outerComplement=true;
              orientation=OrientationType.REVERSECOMPLEMENT;
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            }
            if (range.startsWith(""String_Node_Str"") || range.startsWith(""String_Node_Str"")) {
              String multiType=""String_Node_Str"";
              if (range.startsWith(""String_Node_Str"")) {
                multiType=""String_Node_Str"";
              }
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              String[] ranges=range.split(""String_Node_Str"");
              int rangeCnt=0;
              SequenceAnnotation sa=null;
              for (              String r : ranges) {
                orientation=OrientationType.INLINE;
                if (r.startsWith(""String_Node_Str"") || outerComplement) {
                  orientation=OrientationType.REVERSECOMPLEMENT;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean startLessThan=false;
                boolean endGreaterThan=false;
                if (r.contains(""String_Node_Str"")) {
                  startLessThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                if (r.contains(""String_Node_Str"")) {
                  endGreaterThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean singleBaseRange=false;
                String[] rangeSplit=null;
                if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                  rangeSplit=r.split(""String_Node_Str"");
                  singleBaseRange=true;
                }
 else {
                  rangeSplit=r.split(""String_Node_Str"");
                }
                int start=Integer.parseInt(rangeSplit[0]);
                int end=Integer.parseInt(rangeSplit[1]);
                Range newRange=null;
                if (rangeCnt == 0) {
                  sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
                  sa.setName(featureType);
                  sa.addRole(role);
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,MULTIRANGETYPE,GBCONVPREFIX),multiType);
                  sa.addAnnotation(annotation);
                  newRange=(Range)sa.getLocation(""String_Node_Str"" + rangeCnt);
                }
 else                 if (sa != null) {
                  newRange=sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
                }
                if (outerComplement) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + ((ranges.length - 1) - rangeCnt));
                }
 else {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + rangeCnt);
                }
                newRange.addAnnotation(annotation);
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                rangeCnt++;
              }
            }
 else             if (range.contains(""String_Node_Str"")) {
              String[] rangeSplit=range.split(""String_Node_Str"");
              int at=Integer.parseInt(rangeSplit[0]);
              SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
              sa.addRole(role);
              sa.setName(featureType);
            }
 else {
              boolean startLessThan=false;
              boolean endGreaterThan=false;
              if (range.contains(""String_Node_Str"")) {
                startLessThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              if (range.contains(""String_Node_Str"")) {
                endGreaterThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean singleBaseRange=false;
              String[] rangeSplit=null;
              if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                rangeSplit=range.split(""String_Node_Str"");
                singleBaseRange=true;
              }
 else {
                rangeSplit=range.split(""String_Node_Str"");
              }
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[0]);
              if (rangeSplit.length > 1) {
                end=Integer.parseInt(rangeSplit[1]);
              }
              if (start > end && circular) {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,baseCount,orientation);
                sa.addRole(role);
                sa.setName(featureType);
                annotation=new Annotation(new QName(GBCONVNAMESPACE,STRADLESORIGIN,GBCONVPREFIX),""String_Node_Str"");
                sa.addAnnotation(annotation);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                newRange=sa.addRange(""String_Node_Str"",1,end,orientation);
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
 else {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
                sa.addRole(role);
                sa.setName(featureType);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
            }
            labelType=""String_Node_Str"";
            lastRole=role;
            featureCnt++;
          }
        }
 else         if (originMode) {
          if (featureCnt == 1) {
            topCD.clearRoles();
            topCD.addRole(lastRole);
          }
          if (elements == null) {
            elements=new String(""String_Node_Str"");
          }
          if (strLine.startsWith(""String_Node_Str"")) {
            cont=true;
            break;
          }
          String[] strSplit=strLine.split(""String_Node_Str"");
          for (int i=1; i < strSplit.length; i++) {
            sbSequence.append(strSplit[i]);
          }
        }
        cont=false;
      }
    }
    if (topCD != null) {
      Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,sbSequence.toString(),Sequence.IUPAC_DNA);
      topCD.addSequence(sequence);
      createSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);
    }
    if (!cont)     break;
  }
  br.close();
}",0.9977405427171652
12458,"/** 
 * Creates a generic top-level, and then adds it to this SBOL document's list of generic top-levels. <p> This method calls   {@link #createGenericTopLevel(String,String,String,QName)} with the default URIprefix of this SBOL document, the given component definition display ID and version, and the given RDF type. 
 * @param URIprefix the given URI prefix used to create a compliant URI for the generic top-level to be created 
 * @param displayId the display ID of the generic top-level to be created
 * @param version the version of the generic top-level to be created
 * @param rdfType the type of the generic top-level to be created
 * @return the created generic top-level
 * @throws SBOLValidationException if an SBOL validation rules was violated:10201, 10202, 10204, 10206, 10220, 10303, 10304, 10305, 10401, 10501, 10701, 10801, 10901, 11101, 11201, 11301,  11401, 11501, 11601, 11701, 11801, 11901, 12001, 12301, 12302. 
 */
public GenericTopLevel createGenericTopLevel(String URIprefix,String displayId,String version,QName rdfType) throws SBOLValidationException {
  URIprefix=URIcompliance.checkURIprefix(URIprefix);
  if (rdfType.getNamespaceURI().equals(Sbol2Terms.sbol2.getNamespaceURI()) || rdfType.getNamespaceURI().equals(Sbol1Terms.sbol1.getNamespaceURI())) {
    throw new SBOLValidationException(""String_Node_Str"");
  }
  GenericTopLevel g=new GenericTopLevel(createCompliantURI(URIprefix,TopLevel.GENERIC_TOP_LEVEL,displayId,version,typesInURIs),rdfType);
  g.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.GENERIC_TOP_LEVEL,displayId,""String_Node_Str"",typesInURIs));
  g.setDisplayId(displayId);
  g.setVersion(version);
  addGenericTopLevel(g);
  return g;
}","/** 
 * Creates a generic top-level, and then adds it to this SBOL document's list of generic top-levels. <p> This method calls   {@link #createGenericTopLevel(String,String,String,QName)} with the default URIprefix of this SBOL document, the given component definition display ID and version, and the given RDF type. 
 * @param URIprefix the given URI prefix used to create a compliant URI for the generic top-level to be created 
 * @param displayId the display ID of the generic top-level to be created
 * @param version the version of the generic top-level to be created
 * @param rdfType the type of the generic top-level to be created
 * @return the created generic top-level
 * @throws SBOLValidationException if an SBOL validation rules was violated:10201, 10202, 10204, 10206, 10220, 10303, 10304, 10305, 10401, 10501, 10701, 10801, 10901, 11101, 11201, 11301,  11401, 11501, 11601, 11701, 11801, 11901, 12001, 12301, 12302. 
 */
public GenericTopLevel createGenericTopLevel(String URIprefix,String displayId,String version,QName rdfType) throws SBOLValidationException {
  URIprefix=URIcompliance.checkURIprefix(URIprefix);
  if (rdfType.getNamespaceURI().equals(Sbol2Terms.sbol2.getNamespaceURI())) {
    throw new SBOLValidationException(""String_Node_Str"");
  }
  GenericTopLevel g=new GenericTopLevel(createCompliantURI(URIprefix,TopLevel.GENERIC_TOP_LEVEL,displayId,version,typesInURIs),rdfType);
  g.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.GENERIC_TOP_LEVEL,displayId,""String_Node_Str"",typesInURIs));
  g.setDisplayId(displayId);
  g.setVersion(version);
  addGenericTopLevel(g);
  return g;
}",0.9783653846153846
12459,"/** 
 * @param SBOLDoc
 * @param topLevel
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10202, 10203, 10204, 10206, 10208, 10212, 10213, 12102; or</li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link GenericTopLevel#GenericTopLevel(URI,QName)}, </li> <li>  {@link GenericTopLevel#setDisplayId(String)}, </li> <li>  {@link GenericTopLevel#setVersion(String)}, </li> <li>  {@link GenericTopLevel#setWasDerivedFrom(URI)}, </li> <li>  {@link Identified#setAnnotations(List)}, or</li> <li>  {@link SBOLDocument#addGenericTopLevel(GenericTopLevel)}.</li> </ul> </li> </ul>
 */
private static GenericTopLevel parseGenericTopLevel(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  QName type=topLevel.getType();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Description.type)) {
      String typeStr=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      String nameSpace=URIcompliance.extractNamespace(URI.create(typeStr));
      String localPart=URIcompliance.extractDisplayId(URI.create(typeStr));
      String prefix=SBOLDoc.getNamespacePrefix(URI.create(nameSpace));
      type=new QName(nameSpace,localPart,prefix);
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  GenericTopLevel t=new GenericTopLevel(topLevel.getIdentity(),type);
  if (persistentIdentity != null)   t.setPersistentIdentity(persistentIdentity);
  if (version != null)   t.setVersion(version);
  if (displayId != null)   t.setDisplayId(displayId);
  if (name != null)   t.setName(name);
  if (description != null)   t.setDescription(description);
  t.setWasDerivedFroms(wasDerivedFroms);
  if (!annotations.isEmpty())   t.setAnnotations(annotations);
  GenericTopLevel oldG=SBOLDoc.getGenericTopLevel(topLevel.getIdentity());
  if (oldG == null) {
    SBOLDoc.addGenericTopLevel(t);
  }
 else {
    if (!t.equals(oldG)) {
      throw new SBOLValidationException(""String_Node_Str"",t);
    }
  }
  return t;
}","/** 
 * @param SBOLDoc
 * @param topLevel
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10202, 10203, 10204, 10206, 10208, 10212, 10213, 12102; or</li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link GenericTopLevel#GenericTopLevel(URI,QName)}, </li> <li>  {@link GenericTopLevel#setDisplayId(String)}, </li> <li>  {@link GenericTopLevel#setVersion(String)}, </li> <li>  {@link GenericTopLevel#setWasDerivedFrom(URI)}, </li> <li>  {@link Identified#setAnnotations(List)}, or</li> <li>  {@link SBOLDocument#addGenericTopLevel(GenericTopLevel)}.</li> </ul> </li> </ul>
 */
private static GenericTopLevel parseGenericTopLevel(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  QName type=topLevel.getType();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Description.type)) {
      String typeStr=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      String nameSpace=URIcompliance.extractNamespace(URI.create(typeStr));
      String localPart=URIcompliance.extractDisplayId(URI.create(typeStr));
      String prefix=null;
      if (nameSpace == null) {
        if (typeStr.lastIndexOf('/') > typeStr.lastIndexOf('#')) {
          if (typeStr.lastIndexOf('/') > typeStr.lastIndexOf(':')) {
            nameSpace=typeStr.substring(0,typeStr.lastIndexOf('/'));
            localPart=typeStr.substring(typeStr.lastIndexOf('/') + 1);
          }
 else {
            nameSpace=typeStr.substring(0,typeStr.lastIndexOf(':'));
            localPart=typeStr.substring(typeStr.lastIndexOf(':') + 1);
          }
        }
 else         if (typeStr.lastIndexOf('#') > typeStr.lastIndexOf(':')) {
          nameSpace=typeStr.substring(0,typeStr.lastIndexOf('#'));
          localPart=typeStr.substring(typeStr.lastIndexOf('#') + 1);
        }
 else {
          nameSpace=typeStr.substring(0,typeStr.lastIndexOf(':'));
          localPart=typeStr.substring(typeStr.lastIndexOf(':') + 1);
        }
        prefix=SBOLDoc.getNamespacePrefix(URI.create(nameSpace));
        if (prefix == null) {
          prefix=""String_Node_Str"";
          int prefixCnt=0;
          while (SBOLDoc.getNamespace(prefix) != null) {
            prefixCnt++;
            prefix=""String_Node_Str"" + prefixCnt;
          }
          SBOLDoc.addNamespace(new QName(nameSpace,localPart,prefix));
        }
      }
 else {
        prefix=SBOLDoc.getNamespacePrefix(URI.create(nameSpace));
      }
      type=new QName(nameSpace,localPart,prefix);
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  GenericTopLevel t=new GenericTopLevel(topLevel.getIdentity(),type);
  if (persistentIdentity != null)   t.setPersistentIdentity(persistentIdentity);
  if (version != null)   t.setVersion(version);
  if (displayId != null)   t.setDisplayId(displayId);
  if (name != null)   t.setName(name);
  if (description != null)   t.setDescription(description);
  t.setWasDerivedFroms(wasDerivedFroms);
  if (!annotations.isEmpty())   t.setAnnotations(annotations);
  GenericTopLevel oldG=SBOLDoc.getGenericTopLevel(topLevel.getIdentity());
  if (oldG == null) {
    SBOLDoc.addGenericTopLevel(t);
  }
 else {
    if (!t.equals(oldG)) {
      throw new SBOLValidationException(""String_Node_Str"",t);
    }
  }
  return t;
}",0.8857016378928729
12460,"/** 
 * Submit to the SynBioHub.
 * @param id The submission identifier
 * @param version The submission version
 * @param name The submission name
 * @param description The submission description
 * @param citations The pubMedIds for this submission
 * @param collections A comma separated list of collections
 * @param overwrite_merge '0' prevent, '1' overwrite, '2' merge
 * @param document the SBOL document to submit
 * @throws SynBioHubException if there was an error communicating with the SynBioHub
 */
public void submit(String id,String version,String name,String description,String citations,String collections,String overwrite_merge,SBOLDocument document) throws SynBioHubException {
  if (user.equals(""String_Node_Str"")) {
    Exception e=new Exception(""String_Node_Str"");
    throw new SynBioHubException(e);
  }
  String url=backendUrl + ""String_Node_Str"";
  HttpPost request=new HttpPost(url);
  request.setHeader(""String_Node_Str"",user);
  request.setHeader(""String_Node_Str"",""String_Node_Str"");
  MultipartEntity params=new MultipartEntity();
  try {
    params.addPart(""String_Node_Str"",new StringBody(id));
    params.addPart(""String_Node_Str"",new StringBody(version));
    params.addPart(""String_Node_Str"",new StringBody(name));
    params.addPart(""String_Node_Str"",new StringBody(description));
    params.addPart(""String_Node_Str"",new StringBody(citations));
    params.addPart(""String_Node_Str"",new StringBody(collections));
    params.addPart(""String_Node_Str"",new StringBody(overwrite_merge));
    params.addPart(""String_Node_Str"",new StringBody(user));
    if (document != null) {
      params.addPart(""String_Node_Str"",new StringBody(serializeDocument(document)));
    }
 else {
      params.addPart(""String_Node_Str"",new StringBody(""String_Node_Str""));
    }
  }
 catch (  UnsupportedEncodingException e1) {
    throw new SynBioHubException(e1);
  }
  try {
    request.setEntity(params);
    HttpResponse response=client.execute(request);
    checkResponseCode(response);
  }
 catch (  Exception e) {
    throw new SynBioHubException(e);
  }
 finally {
    request.releaseConnection();
  }
}","/** 
 * Submit to the SynBioHub.
 * @param id The submission identifier
 * @param version The submission version
 * @param name The submission name
 * @param description The submission description
 * @param citations The pubMedIds for this submission
 * @param collections A comma separated list of collections
 * @param overwrite_merge '0' prevent, '1' overwrite, '2' merge and prevent, '3' merge and overwrite
 * @param document the SBOL document to submit
 * @throws SynBioHubException if there was an error communicating with the SynBioHub
 */
public void submit(String id,String version,String name,String description,String citations,String collections,String overwrite_merge,SBOLDocument document) throws SynBioHubException {
  if (user.equals(""String_Node_Str"")) {
    Exception e=new Exception(""String_Node_Str"");
    throw new SynBioHubException(e);
  }
  String url=backendUrl + ""String_Node_Str"";
  HttpPost request=new HttpPost(url);
  request.setHeader(""String_Node_Str"",user);
  request.setHeader(""String_Node_Str"",""String_Node_Str"");
  MultipartEntity params=new MultipartEntity();
  try {
    params.addPart(""String_Node_Str"",new StringBody(id));
    params.addPart(""String_Node_Str"",new StringBody(version));
    params.addPart(""String_Node_Str"",new StringBody(name));
    params.addPart(""String_Node_Str"",new StringBody(description));
    params.addPart(""String_Node_Str"",new StringBody(citations));
    params.addPart(""String_Node_Str"",new StringBody(collections));
    params.addPart(""String_Node_Str"",new StringBody(overwrite_merge));
    params.addPart(""String_Node_Str"",new StringBody(user));
    if (document != null) {
      params.addPart(""String_Node_Str"",new StringBody(serializeDocument(document)));
    }
 else {
      params.addPart(""String_Node_Str"",new StringBody(""String_Node_Str""));
    }
  }
 catch (  UnsupportedEncodingException e1) {
    throw new SynBioHubException(e1);
  }
  try {
    request.setEntity(params);
    HttpResponse response=client.execute(request);
    checkResponseCode(response);
  }
 catch (  Exception e) {
    throw new SynBioHubException(e);
  }
 finally {
    request.releaseConnection();
  }
}",0.9913531198878244
12461,"public static void main(String[] args){
  try {
    SynBioHubFrontend sbh=new SynBioHubFrontend(""String_Node_Str"",""String_Node_Str"");
    String result=sbh.sparqlQuery(""String_Node_Str"");
    System.out.println(result);
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    SBOLReader.setURIPrefix(""String_Node_Str"");
    SBOLDocument doc=SBOLReader.read(""String_Node_Str"");
    SBOLValidate.validateSBOL(doc,true,true,true);
    for (    String error : SBOLValidate.getErrors()) {
      System.out.println(error);
    }
    doc.write(""String_Node_Str"");
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}",0.4023845007451564
12462,"/** 
 * @param typeGenLoc
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated: 10203, 10204, 10206, 10208, 10212, 10213,  11002; or   </li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link GenericLocation#GenericLocation(URI)},</li> <li>  {@link GenericLocation#setDisplayId(String)},</li> <li>  {@link GenericLocation#setVersion(String)},</li>	 <li>  {@link GenericLocation#setWasDerivedFrom(URI)}, or</li> <li>  {@link Identified#setAnnotations(List)}.</li> </ul> </li> </ul>
 */
private static GenericLocation parseGenericLocation(NestedDocument<QName> typeGenLoc) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  URI orientation=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : typeGenLoc.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.GenericLocation.orientation)) {
      if (!(namedProperty.getValue() instanceof Literal) || orientation != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",typeGenLoc.getIdentity());
      }
      orientation=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",typeGenLoc.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",typeGenLoc.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",typeGenLoc.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",typeGenLoc.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",typeGenLoc.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",typeGenLoc.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  GenericLocation gl=new GenericLocation(typeGenLoc.getIdentity());
  if (displayId != null)   gl.setDisplayId(displayId);
  if (name != null)   gl.setName(name);
  if (description != null)   gl.setDescription(description);
  if (orientation != null)   try {
    gl.setOrientation(OrientationType.convertToOrientationType(orientation));
  }
 catch (  SBOLValidationException e) {
    throw new SBOLValidationException(""String_Node_Str"",gl);
  }
  if (persistentIdentity != null)   gl.setPersistentIdentity(persistentIdentity);
  if (version != null)   gl.setVersion(version);
  gl.setWasDerivedFroms(wasDerivedFroms);
  if (!annotations.isEmpty())   gl.setAnnotations(annotations);
  return gl;
}","/** 
 * @param typeGenLoc
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated: 10203, 10204, 10206, 10208, 10212, 10213,  11002; or   </li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link GenericLocation#GenericLocation(URI)},</li> <li>  {@link GenericLocation#setDisplayId(String)},</li> <li>  {@link GenericLocation#setVersion(String)},</li>	 <li>  {@link GenericLocation#setWasDerivedFrom(URI)}, or</li> <li>  {@link Identified#setAnnotations(List)}.</li> </ul> </li> </ul>
 */
private static GenericLocation parseGenericLocation(NestedDocument<QName> typeGenLoc) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  URI orientation=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : typeGenLoc.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.GenericLocation.orientation) || namedProperty.getName().equals(Sbol2Terms.GenericLocation.Orientation)) {
      if (!(namedProperty.getValue() instanceof Literal) || orientation != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",typeGenLoc.getIdentity());
      }
      orientation=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",typeGenLoc.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",typeGenLoc.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",typeGenLoc.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",typeGenLoc.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",typeGenLoc.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",typeGenLoc.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  GenericLocation gl=new GenericLocation(typeGenLoc.getIdentity());
  if (displayId != null)   gl.setDisplayId(displayId);
  if (name != null)   gl.setName(name);
  if (description != null)   gl.setDescription(description);
  if (orientation != null)   try {
    gl.setOrientation(OrientationType.convertToOrientationType(orientation));
  }
 catch (  SBOLValidationException e) {
    throw new SBOLValidationException(""String_Node_Str"",gl);
  }
  if (persistentIdentity != null)   gl.setPersistentIdentity(persistentIdentity);
  if (version != null)   gl.setVersion(version);
  gl.setWasDerivedFroms(wasDerivedFroms);
  if (!annotations.isEmpty())   gl.setAnnotations(annotations);
  return gl;
}",0.992459751375586
12463,"private void updateReferences(HashMap<URI,URI> uriMap) throws SBOLValidationException {
  for (  Collection collection : getCollections()) {
    for (    URI memberURI : collection.getMemberURIs()) {
      if (uriMap.get(memberURI) != null) {
        collection.removeMember(memberURI);
        collection.addMember(uriMap.get(memberURI));
      }
    }
    updateReferences(collection,uriMap);
  }
  for (  ComponentDefinition componentDefinition : getComponentDefinitions()) {
    updateReferences(componentDefinition,uriMap);
    for (    Component component : componentDefinition.getComponents()) {
      if (uriMap.get(component.getDefinitionURI()) != null) {
        component.setDefinition(uriMap.get(component.getDefinitionURI()));
        for (        MapsTo mapsTo : component.getMapsTos()) {
          ComponentDefinition cd=getComponentDefinition(uriMap.get(component.getDefinitionURI()));
          if (cd != null) {
            String displayId=URIcompliance.extractDisplayId(mapsTo.getRemoteURI());
            URI newURI=URIcompliance.createCompliantURI(cd.getPersistentIdentity().toString(),displayId,cd.getVersion());
            mapsTo.setRemote(newURI);
          }
        }
      }
      updateReferences(component,uriMap);
      for (      MapsTo mapsTo : component.getMapsTos()) {
        updateReferences(mapsTo,uriMap);
      }
    }
    for (    SequenceAnnotation sa : componentDefinition.getSequenceAnnotations()) {
      for (      Location loc : sa.getLocations()) {
        updateReferences(loc,uriMap);
      }
      updateReferences(sa,uriMap);
    }
    for (    SequenceConstraint sc : componentDefinition.getSequenceConstraints()) {
      updateReferences(sc,uriMap);
    }
    for (    URI sequenceURI : componentDefinition.getSequenceURIs()) {
      if (uriMap.get(sequenceURI) != null) {
        componentDefinition.removeSequence(sequenceURI);
        componentDefinition.addSequence(uriMap.get(sequenceURI));
      }
    }
  }
  for (  ModuleDefinition moduleDefinition : getModuleDefinitions()) {
    updateReferences(moduleDefinition,uriMap);
    for (    FunctionalComponent functionalComponent : moduleDefinition.getFunctionalComponents()) {
      if (uriMap.get(functionalComponent.getDefinitionURI()) != null) {
        functionalComponent.setDefinition(uriMap.get(functionalComponent.getDefinitionURI()));
        for (        MapsTo mapsTo : functionalComponent.getMapsTos()) {
          ComponentDefinition cd=getComponentDefinition(uriMap.get(functionalComponent.getDefinitionURI()));
          if (cd != null) {
            String displayId=URIcompliance.extractDisplayId(mapsTo.getRemoteURI());
            URI newURI=URIcompliance.createCompliantURI(cd.getPersistentIdentity().toString(),displayId,cd.getVersion());
            mapsTo.setRemote(newURI);
          }
        }
      }
      updateReferences(functionalComponent,uriMap);
      for (      MapsTo mapsTo : functionalComponent.getMapsTos()) {
        updateReferences(mapsTo,uriMap);
      }
    }
    for (    Module module : moduleDefinition.getModules()) {
      if (uriMap.get(module.getDefinitionURI()) != null) {
        module.setDefinition(uriMap.get(module.getDefinitionURI()));
        for (        MapsTo mapsTo : module.getMapsTos()) {
          ModuleDefinition md=getModuleDefinition(uriMap.get(module.getDefinitionURI()));
          if (md != null) {
            String displayId=URIcompliance.extractDisplayId(mapsTo.getRemoteURI());
            URI newURI=URIcompliance.createCompliantURI(md.getPersistentIdentity().toString(),displayId,md.getVersion());
            mapsTo.setRemote(newURI);
          }
        }
      }
      updateReferences(module,uriMap);
      for (      MapsTo mapsTo : module.getMapsTos()) {
        updateReferences(mapsTo,uriMap);
      }
    }
    for (    Interaction interaction : moduleDefinition.getInteractions()) {
      updateReferences(interaction,uriMap);
      for (      Participation participation : interaction.getParticipations()) {
        updateReferences(participation,uriMap);
      }
    }
    for (    URI modelURI : moduleDefinition.getModelURIs()) {
      if (uriMap.get(modelURI) != null) {
        moduleDefinition.removeModel(modelURI);
        moduleDefinition.addModel(uriMap.get(modelURI));
      }
    }
  }
  for (  Model model : getModels()) {
    updateReferences(model,uriMap);
  }
  for (  Sequence sequence : getSequences()) {
    updateReferences(sequence,uriMap);
  }
  for (  GenericTopLevel genericTopLevel : getGenericTopLevels()) {
    updateReferences(genericTopLevel,uriMap);
  }
}","private void updateReferences(HashMap<URI,URI> uriMap) throws SBOLValidationException {
  for (  Collection collection : getCollections()) {
    for (    URI memberURI : collection.getMemberURIs()) {
      if (uriMap.get(memberURI) != null) {
        collection.removeMember(memberURI);
        collection.addMember(uriMap.get(memberURI));
      }
    }
    updateReferences(collection,uriMap);
  }
  for (  ComponentDefinition componentDefinition : getComponentDefinitions()) {
    updateReferences(componentDefinition,uriMap);
    for (    Component component : componentDefinition.getComponents()) {
      if (uriMap.get(component.getDefinitionURI()) != null) {
        component.setDefinition(uriMap.get(component.getDefinitionURI()));
        for (        MapsTo mapsTo : component.getMapsTos()) {
          ComponentDefinition cd=getComponentDefinition(component.getDefinitionURI());
          if (cd != null) {
            String displayId=URIcompliance.extractDisplayId(mapsTo.getRemoteURI());
            URI newURI=URIcompliance.createCompliantURI(cd.getPersistentIdentity().toString(),displayId,cd.getVersion());
            mapsTo.setRemote(newURI);
          }
        }
      }
      updateReferences(component,uriMap);
      for (      MapsTo mapsTo : component.getMapsTos()) {
        updateReferences(mapsTo,uriMap);
      }
    }
    for (    SequenceAnnotation sa : componentDefinition.getSequenceAnnotations()) {
      for (      Location loc : sa.getLocations()) {
        updateReferences(loc,uriMap);
      }
      updateReferences(sa,uriMap);
    }
    for (    SequenceConstraint sc : componentDefinition.getSequenceConstraints()) {
      updateReferences(sc,uriMap);
    }
    for (    URI sequenceURI : componentDefinition.getSequenceURIs()) {
      if (uriMap.get(sequenceURI) != null) {
        componentDefinition.removeSequence(sequenceURI);
        componentDefinition.addSequence(uriMap.get(sequenceURI));
      }
    }
  }
  for (  ModuleDefinition moduleDefinition : getModuleDefinitions()) {
    updateReferences(moduleDefinition,uriMap);
    for (    FunctionalComponent functionalComponent : moduleDefinition.getFunctionalComponents()) {
      if (uriMap.get(functionalComponent.getDefinitionURI()) != null) {
        functionalComponent.setDefinition(uriMap.get(functionalComponent.getDefinitionURI()));
        for (        MapsTo mapsTo : functionalComponent.getMapsTos()) {
          ComponentDefinition cd=getComponentDefinition(functionalComponent.getDefinitionURI());
          if (cd != null) {
            String displayId=URIcompliance.extractDisplayId(mapsTo.getRemoteURI());
            URI newURI=URIcompliance.createCompliantURI(cd.getPersistentIdentity().toString(),displayId,cd.getVersion());
            mapsTo.setRemote(newURI);
          }
        }
      }
      updateReferences(functionalComponent,uriMap);
      for (      MapsTo mapsTo : functionalComponent.getMapsTos()) {
        updateReferences(mapsTo,uriMap);
      }
    }
    for (    Module module : moduleDefinition.getModules()) {
      if (uriMap.get(module.getDefinitionURI()) != null) {
        module.setDefinition(uriMap.get(module.getDefinitionURI()));
        for (        MapsTo mapsTo : module.getMapsTos()) {
          ModuleDefinition md=getModuleDefinition(module.getDefinitionURI());
          if (md != null) {
            String displayId=URIcompliance.extractDisplayId(mapsTo.getRemoteURI());
            URI newURI=URIcompliance.createCompliantURI(md.getPersistentIdentity().toString(),displayId,md.getVersion());
            mapsTo.setRemote(newURI);
          }
        }
      }
      updateReferences(module,uriMap);
      for (      MapsTo mapsTo : module.getMapsTos()) {
        updateReferences(mapsTo,uriMap);
      }
    }
    for (    Interaction interaction : moduleDefinition.getInteractions()) {
      updateReferences(interaction,uriMap);
      for (      Participation participation : interaction.getParticipations()) {
        updateReferences(participation,uriMap);
      }
    }
    for (    URI modelURI : moduleDefinition.getModelURIs()) {
      if (uriMap.get(modelURI) != null) {
        moduleDefinition.removeModel(modelURI);
        moduleDefinition.addModel(uriMap.get(modelURI));
      }
    }
  }
  for (  Model model : getModels()) {
    updateReferences(model,uriMap);
  }
  for (  Sequence sequence : getSequences()) {
    updateReferences(sequence,uriMap);
  }
  for (  GenericTopLevel genericTopLevel : getGenericTopLevels()) {
    updateReferences(genericTopLevel,uriMap);
  }
}",0.9960604070912672
12464,"/** 
 * Copy all objects to an a new SBOL Document and change the URI prefix/version of each object
 * @param URIPrefix new URI prefix
 * @param version new version
 * @return new SBOL document with changed URI prefix
 * @throws SBOLValidationException if URIprefix or version provided is invalid
 */
public SBOLDocument changeURIPrefixVersion(String URIPrefix,String version) throws SBOLValidationException {
  SBOLDocument document=new SBOLDocument();
  String documentURIPrefix=extractDocumentURIPrefix();
  HashMap<URI,URI> uriMap=new HashMap<URI,URI>();
  for (  TopLevel topLevel : this.getTopLevels()) {
    TopLevel newTL=document.createCopy(topLevel,URIPrefix,null,version);
    uriMap.put(topLevel.getIdentity(),newTL.getIdentity());
  }
  document.updateReferences(uriMap);
  for (  TopLevel topLevel : document.getTopLevels()) {
    document.changeURIPrefixVersion(topLevel,URIPrefix,version,documentURIPrefix);
  }
  document.setDefaultURIprefix(URIPrefix);
  return document;
}","/** 
 * Copy all objects to an a new SBOL Document and change the URI prefix/version of each object
 * @param URIPrefix new URI prefix
 * @param version new version
 * @return new SBOL document with changed URI prefix
 * @throws SBOLValidationException if URIprefix or version provided is invalid
 */
public SBOLDocument changeURIPrefixVersion(String URIPrefix,String version) throws SBOLValidationException {
  SBOLDocument document=new SBOLDocument();
  String documentURIPrefix=extractDocumentURIPrefix();
  HashMap<URI,URI> uriMap=new HashMap<URI,URI>();
  for (  TopLevel topLevel : this.getTopLevels()) {
    TopLevel newTL=document.createCopy(topLevel,URIPrefix,null,version);
    uriMap.put(topLevel.getIdentity(),newTL.getIdentity());
    uriMap.put(topLevel.getPersistentIdentity(),newTL.getPersistentIdentity());
  }
  document.updateReferences(uriMap);
  for (  TopLevel topLevel : document.getTopLevels()) {
    document.changeURIPrefixVersion(topLevel,URIPrefix,version,documentURIPrefix);
  }
  document.setDefaultURIprefix(URIPrefix);
  return document;
}",0.9612027158098934
12465,"/** 
 * @param SBOLDoc
 * @param topLevel
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10202, 10203, 10204, 10206, 10208, 10212, 10213, 12102; or</li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link GenericTopLevel#GenericTopLevel(URI,QName)}, </li> <li>  {@link GenericTopLevel#setDisplayId(String)}, </li> <li>  {@link GenericTopLevel#setVersion(String)}, </li> <li>  {@link GenericTopLevel#setWasDerivedFrom(URI)}, </li> <li>  {@link Identified#setAnnotations(List)}, or</li> <li>  {@link SBOLDocument#addGenericTopLevel(GenericTopLevel)}.</li> </ul> </li> </ul>
 */
private static GenericTopLevel parseGenericTopLevel(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  QName type=topLevel.getType();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Description.type)) {
      String typeStr=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      String nameSpace=URIcompliance.extractNamespace(URI.create(typeStr));
      String localPart=URIcompliance.extractDisplayId(URI.create(typeStr));
      String prefix=null;
      if (nameSpace == null) {
        if (typeStr.lastIndexOf('/') > typeStr.lastIndexOf('#')) {
          if (typeStr.lastIndexOf('/') > typeStr.lastIndexOf(':')) {
            nameSpace=typeStr.substring(0,typeStr.lastIndexOf('/'));
            localPart=typeStr.substring(typeStr.lastIndexOf('/') + 1);
          }
 else {
            nameSpace=typeStr.substring(0,typeStr.lastIndexOf(':'));
            localPart=typeStr.substring(typeStr.lastIndexOf(':') + 1);
          }
        }
 else         if (typeStr.lastIndexOf('#') > typeStr.lastIndexOf(':')) {
          nameSpace=typeStr.substring(0,typeStr.lastIndexOf('#'));
          localPart=typeStr.substring(typeStr.lastIndexOf('#') + 1);
        }
 else {
          nameSpace=typeStr.substring(0,typeStr.lastIndexOf(':'));
          localPart=typeStr.substring(typeStr.lastIndexOf(':') + 1);
        }
        prefix=SBOLDoc.getNamespacePrefix(URI.create(nameSpace));
        if (prefix == null) {
          prefix=""String_Node_Str"";
          int prefixCnt=0;
          while (SBOLDoc.getNamespace(prefix) != null) {
            prefixCnt++;
            prefix=""String_Node_Str"" + prefixCnt;
          }
          SBOLDoc.addNamespace(new QName(nameSpace,localPart,prefix));
        }
      }
 else {
        prefix=SBOLDoc.getNamespacePrefix(URI.create(nameSpace));
      }
      type=new QName(nameSpace,localPart,prefix);
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  GenericTopLevel t=new GenericTopLevel(topLevel.getIdentity(),type);
  if (persistentIdentity != null)   t.setPersistentIdentity(persistentIdentity);
  if (version != null)   t.setVersion(version);
  if (displayId != null)   t.setDisplayId(displayId);
  if (name != null)   t.setName(name);
  if (description != null)   t.setDescription(description);
  t.setWasDerivedFroms(wasDerivedFroms);
  if (!annotations.isEmpty())   t.setAnnotations(annotations);
  GenericTopLevel oldG=SBOLDoc.getGenericTopLevel(topLevel.getIdentity());
  if (oldG == null) {
    SBOLDoc.addGenericTopLevel(t);
  }
 else {
    if (!t.equals(oldG)) {
      throw new SBOLValidationException(""String_Node_Str"",t);
    }
  }
  return t;
}","/** 
 * @param SBOLDoc
 * @param topLevel
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10202, 10203, 10204, 10206, 10208, 10212, 10213, 12102; or</li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link GenericTopLevel#GenericTopLevel(URI,QName)}, </li> <li>  {@link GenericTopLevel#setDisplayId(String)}, </li> <li>  {@link GenericTopLevel#setVersion(String)}, </li> <li>  {@link GenericTopLevel#setWasDerivedFrom(URI)}, </li> <li>  {@link Identified#setAnnotations(List)}, or</li> <li>  {@link SBOLDocument#addGenericTopLevel(GenericTopLevel)}.</li> </ul> </li> </ul>
 */
private static GenericTopLevel parseGenericTopLevel(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  Set<URI> wasDerivedFroms=new HashSet<>();
  QName type=topLevel.getType();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Description.type)) {
      String typeStr=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      String nameSpace=URIcompliance.extractNamespace(URI.create(typeStr));
      String localPart=URIcompliance.extractDisplayId(URI.create(typeStr));
      String prefix=null;
      if (nameSpace == null) {
        if (typeStr.lastIndexOf('/') > typeStr.lastIndexOf('#')) {
          if (typeStr.lastIndexOf('/') > typeStr.lastIndexOf(':')) {
            nameSpace=typeStr.substring(0,typeStr.lastIndexOf('/') + 1);
            localPart=typeStr.substring(typeStr.lastIndexOf('/') + 1);
          }
 else {
            nameSpace=typeStr.substring(0,typeStr.lastIndexOf(':') + 1);
            localPart=typeStr.substring(typeStr.lastIndexOf(':') + 1);
          }
        }
 else         if (typeStr.lastIndexOf('#') > typeStr.lastIndexOf(':')) {
          nameSpace=typeStr.substring(0,typeStr.lastIndexOf('#') + 1);
          localPart=typeStr.substring(typeStr.lastIndexOf('#') + 1);
        }
 else {
          nameSpace=typeStr.substring(0,typeStr.lastIndexOf(':') + 1);
          localPart=typeStr.substring(typeStr.lastIndexOf(':') + 1);
        }
        prefix=SBOLDoc.getNamespacePrefix(URI.create(nameSpace));
        if (prefix == null) {
          prefix=""String_Node_Str"";
          int prefixCnt=0;
          while (SBOLDoc.getNamespace(prefix) != null) {
            prefixCnt++;
            prefix=""String_Node_Str"" + prefixCnt;
          }
          SBOLDoc.addNamespace(new QName(nameSpace,localPart,prefix));
        }
      }
 else {
        prefix=SBOLDoc.getNamespacePrefix(URI.create(nameSpace));
      }
      type=new QName(nameSpace,localPart,prefix);
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || persistentIdentity != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || version != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || displayId != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || name != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || description != null || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFroms.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  GenericTopLevel t=new GenericTopLevel(topLevel.getIdentity(),type);
  if (persistentIdentity != null)   t.setPersistentIdentity(persistentIdentity);
  if (version != null)   t.setVersion(version);
  if (displayId != null)   t.setDisplayId(displayId);
  if (name != null)   t.setName(name);
  if (description != null)   t.setDescription(description);
  t.setWasDerivedFroms(wasDerivedFroms);
  if (!annotations.isEmpty())   t.setAnnotations(annotations);
  GenericTopLevel oldG=SBOLDoc.getGenericTopLevel(topLevel.getIdentity());
  if (oldG == null) {
    SBOLDoc.addGenericTopLevel(t);
  }
 else {
    if (!t.equals(oldG)) {
      throw new SBOLValidationException(""String_Node_Str"",t);
    }
  }
  return t;
}",0.9987303602602762
12466,"/** 
 * @param doc
 * @param stringBuffer
 * @param URIPrefix
 * @throws IOException
 * @throws SBOLConversionException
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the following methods:<ul> <li> {@link SBOLDocument#createComponentDefinition(String,String,URI)},</li> <li>  {@link Identified#setAnnotations(List)},</li> <li>  {@link SequenceAnnotation#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,int,OrientationType)},</li> <li>  {@link SequenceAnnotation#setComponent(String)},</li> <li>  {@link SequenceAnnotation#addRange(String,int,int,OrientationType)},</li> <li>  {@link Range#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,OrientationType)},</li> <li>  {@link SBOLDocument#createSequence(String,String,String,URI)}, </li> <li>  {@link ComponentDefinition#addSequence(Sequence)}, or </li> <li>  {@link #createSubComponentDefinitions(SBOLDocument,ComponentDefinition,URI,String,String)}.</li> </ul>
 */
static void read(SBOLDocument doc,String stringBuffer,String URIPrefix) throws IOException, SBOLConversionException, SBOLValidationException {
  so=new SequenceOntology();
  doc.addNamespace(URI.create(GBNAMESPACE),GBPREFIX);
  doc.addNamespace(URI.create(GBCONVNAMESPACE),GBCONVPREFIX);
  BufferedReader br=new BufferedReader(new StringReader(stringBuffer));
  String strLine;
  int featureCnt=0;
  int refCnt=0;
  nextLine=null;
  while (true) {
    boolean cont=false;
    String id=""String_Node_Str"";
    String version=""String_Node_Str"";
    featureMode=false;
    originMode=false;
    StringBuilder sbSequence=new StringBuilder();
    String elements=null;
    String description=""String_Node_Str"";
    URI type=ComponentDefinition.DNA;
    ComponentDefinition topCD=null;
    List<Annotation> annotations=new ArrayList<Annotation>();
    List<Annotation> nestedAnnotations=null;
    Annotation annotation=null;
    boolean circular=false;
    int baseCount=0;
    while ((strLine=readGenBankLine(br)) != null) {
      strLine=strLine.trim();
      if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        id=strSplit[1];
        id=URIcompliance.fixDisplayId(id);
        annotation=new Annotation(new QName(GBNAMESPACE,LOCUS,GBPREFIX),strSplit[1]);
        annotations.add(annotation);
        baseCount=Integer.parseInt(strSplit[2]);
        if (strSplit[4].toUpperCase().contains(""String_Node_Str"")) {
          type=ComponentDefinition.RNA;
        }
        annotation=new Annotation(new QName(GBNAMESPACE,MOLECULE,GBPREFIX),strSplit[4]);
        annotations.add(annotation);
        for (int i=5; i < strSplit.length; i++) {
          if (strSplit[i].startsWith(""String_Node_Str"") || strSplit[i].startsWith(""String_Node_Str"")) {
            if (strSplit[i].startsWith(""String_Node_Str""))             circular=true;
          }
 else           if (strSplit[i].length() == 3) {
            annotation=new Annotation(new QName(GBNAMESPACE,DIVISION,GBPREFIX),strSplit[i]);
          }
 else {
            annotation=new Annotation(new QName(GBNAMESPACE,DATE,GBPREFIX),strSplit[i]);
          }
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        String accession=strSplit[1];
        id=accession;
        id=URIcompliance.fixDisplayId(id);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        id=URIcompliance.fixDisplayId(id);
        if (!id.equals(URIcompliance.fixDisplayId(strSplit[1]))) {
          if (strSplit[1].split(""String_Node_Str"").length > 1) {
            version=strSplit[1].split(""String_Node_Str"")[strSplit[1].split(""String_Node_Str"").length - 1];
          }
          String vId=URIcompliance.fixDisplayId(strSplit[1].split(""String_Node_Str"")[0]);
          if (!id.equals(vId)) {
            throw new SBOLConversionException(""String_Node_Str"");
          }
        }
        if (strSplit.length > 2) {
          annotation=new Annotation(new QName(GBNAMESPACE,GINUMBER,GBPREFIX),strSplit[2]);
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,KEYWORDS,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,SOURCE,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,ORGANISM,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        nestedAnnotations=new ArrayList<Annotation>();
        Annotation labelAnnotation=new Annotation(new QName(GBNAMESPACE,LABEL,GBPREFIX),annotationStr);
        nestedAnnotations.add(labelAnnotation);
        URI nestedURI=URI.create(URIPrefix + id + ""String_Node_Str""+ refCnt);
        refCnt++;
        annotation=new Annotation(new QName(GBNAMESPACE,REFERENCE,GBPREFIX),new QName(GBNAMESPACE,NESTEDREFERENCE,GBPREFIX),nestedURI,nestedAnnotations);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,AUTHORS,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,TITLE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,JOURNAL,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,MEDLINE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,PUBMED,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
        Annotation pubMedAnnotation=new Annotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),annotationStr);
        annotations.add(pubMedAnnotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,COMMENT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,BASECOUNT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        topCD=doc.createComponentDefinition(id,version,type);
        if (circular) {
          topCD.addType(SequenceOntology.CIRCULAR);
        }
 else {
          topCD.addType(SequenceOntology.LINEAR);
        }
        topCD.addRole(SequenceOntology.ENGINEERED_REGION);
        if (!""String_Node_Str"".equals(description)) {
          topCD.setDescription(description);
        }
        topCD.setAnnotations(annotations);
        featureMode=true;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        originMode=true;
        featureMode=false;
      }
 else {
        if (featureMode) {
          if (strLine.startsWith(""String_Node_Str"")) {
            String tag=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
            String value=""String_Node_Str"";
            if ((-1) != strLine.indexOf('=')) {
              String[] splitStr=strLine.split(""String_Node_Str"");
              tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
              value=splitStr[1];
            }
            StringBuilder sbValue=new StringBuilder();
            sbValue.append(value);
            if (value.startsWith(""String_Node_Str"") && !value.endsWith(""String_Node_Str"")) {
              while (true) {
                strLine=readGenBankLine(br).trim();
                sbValue.append(strLine);
                if (strLine.endsWith(""String_Node_Str"")) {
                  break;
                }
              }
            }
            SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
            if (null != sa) {
              if (value.startsWith(""String_Node_Str"")) {
                value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
 else {
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
              sa.addAnnotation(annotation);
            }
          }
 else {
            strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
            String[] strSplit=strLine.split(""String_Node_Str"");
            URI role=convertGenBanktoSO(strSplit[0]);
            String range=strSplit[1];
            boolean outerComplement=false;
            OrientationType orientation=OrientationType.INLINE;
            if (range.startsWith(""String_Node_Str"")) {
              outerComplement=true;
              orientation=OrientationType.REVERSECOMPLEMENT;
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            }
            if (range.startsWith(""String_Node_Str"") || range.startsWith(""String_Node_Str"")) {
              String multiType=""String_Node_Str"";
              if (range.startsWith(""String_Node_Str"")) {
                multiType=""String_Node_Str"";
              }
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              String[] ranges=range.split(""String_Node_Str"");
              int rangeCnt=0;
              SequenceAnnotation sa=null;
              for (              String r : ranges) {
                orientation=OrientationType.INLINE;
                if (r.startsWith(""String_Node_Str"") || outerComplement) {
                  orientation=OrientationType.REVERSECOMPLEMENT;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean startLessThan=false;
                boolean endGreaterThan=false;
                if (r.contains(""String_Node_Str"")) {
                  startLessThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                if (r.contains(""String_Node_Str"")) {
                  endGreaterThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean singleBaseRange=false;
                String[] rangeSplit=null;
                if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                  rangeSplit=r.split(""String_Node_Str"");
                  singleBaseRange=true;
                }
 else {
                  rangeSplit=r.split(""String_Node_Str"");
                }
                int start=Integer.parseInt(rangeSplit[0]);
                int end=Integer.parseInt(rangeSplit[1]);
                Range newRange=null;
                if (rangeCnt == 0) {
                  sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
                  sa.addRole(role);
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,MULTIRANGETYPE,GBCONVPREFIX),multiType);
                  sa.addAnnotation(annotation);
                  newRange=(Range)sa.getLocation(""String_Node_Str"" + rangeCnt);
                }
 else                 if (sa != null) {
                  newRange=sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
                }
                if (outerComplement) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + ((ranges.length - 1) - rangeCnt));
                }
 else {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + rangeCnt);
                }
                newRange.addAnnotation(annotation);
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                rangeCnt++;
              }
            }
 else             if (range.contains(""String_Node_Str"")) {
              String[] rangeSplit=range.split(""String_Node_Str"");
              int at=Integer.parseInt(rangeSplit[0]);
              SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
              sa.addRole(role);
            }
 else {
              boolean startLessThan=false;
              boolean endGreaterThan=false;
              if (range.contains(""String_Node_Str"")) {
                startLessThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              if (range.contains(""String_Node_Str"")) {
                endGreaterThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean singleBaseRange=false;
              String[] rangeSplit=null;
              if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                rangeSplit=range.split(""String_Node_Str"");
                singleBaseRange=true;
              }
 else {
                rangeSplit=range.split(""String_Node_Str"");
              }
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[0]);
              if (rangeSplit.length > 1) {
                end=Integer.parseInt(rangeSplit[1]);
              }
              if (start > end && circular) {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,baseCount,orientation);
                sa.addRole(role);
                annotation=new Annotation(new QName(GBCONVNAMESPACE,STRADLESORIGIN,GBCONVPREFIX),""String_Node_Str"");
                sa.addAnnotation(annotation);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                newRange=sa.addRange(""String_Node_Str"",1,end,orientation);
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
 else {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
                sa.addRole(role);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
            }
            featureCnt++;
          }
        }
 else         if (originMode) {
          if (elements == null) {
            elements=new String(""String_Node_Str"");
          }
          if (strLine.startsWith(""String_Node_Str"")) {
            cont=true;
            break;
          }
          String[] strSplit=strLine.split(""String_Node_Str"");
          for (int i=1; i < strSplit.length; i++) {
            sbSequence.append(strSplit[i]);
          }
        }
        cont=false;
      }
    }
    if (topCD != null) {
      Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,sbSequence.toString(),Sequence.IUPAC_DNA);
      topCD.addSequence(sequence);
      createSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);
    }
    if (!cont)     break;
  }
  br.close();
}","/** 
 * @param doc
 * @param stringBuffer
 * @param URIPrefix
 * @throws IOException
 * @throws SBOLConversionException
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the following methods:<ul> <li> {@link SBOLDocument#createComponentDefinition(String,String,URI)},</li> <li>  {@link Identified#setAnnotations(List)},</li> <li>  {@link SequenceAnnotation#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,int,OrientationType)},</li> <li>  {@link SequenceAnnotation#setComponent(String)},</li> <li>  {@link SequenceAnnotation#addRange(String,int,int,OrientationType)},</li> <li>  {@link Range#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,OrientationType)},</li> <li>  {@link SBOLDocument#createSequence(String,String,String,URI)}, </li> <li>  {@link ComponentDefinition#addSequence(Sequence)}, or </li> <li>  {@link #createSubComponentDefinitions(SBOLDocument,ComponentDefinition,URI,String,String)}.</li> </ul>
 */
static void read(SBOLDocument doc,String stringBuffer,String URIPrefix) throws IOException, SBOLConversionException, SBOLValidationException {
  so=new SequenceOntology();
  doc.addNamespace(URI.create(GBNAMESPACE),GBPREFIX);
  doc.addNamespace(URI.create(GBCONVNAMESPACE),GBCONVPREFIX);
  BufferedReader br=new BufferedReader(new StringReader(stringBuffer));
  String strLine;
  int featureCnt=0;
  int refCnt=0;
  nextLine=null;
  String labelType=""String_Node_Str"";
  URI lastRole=null;
  while (true) {
    boolean cont=false;
    String id=""String_Node_Str"";
    String version=""String_Node_Str"";
    featureMode=false;
    originMode=false;
    StringBuilder sbSequence=new StringBuilder();
    String elements=null;
    String description=""String_Node_Str"";
    URI type=ComponentDefinition.DNA;
    ComponentDefinition topCD=null;
    List<Annotation> annotations=new ArrayList<Annotation>();
    List<Annotation> nestedAnnotations=null;
    Annotation annotation=null;
    boolean circular=false;
    int baseCount=0;
    while ((strLine=readGenBankLine(br)) != null) {
      strLine=strLine.trim();
      if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        id=strSplit[1];
        id=URIcompliance.fixDisplayId(id);
        annotation=new Annotation(new QName(GBNAMESPACE,LOCUS,GBPREFIX),strSplit[1]);
        annotations.add(annotation);
        baseCount=Integer.parseInt(strSplit[2]);
        if (strSplit[4].toUpperCase().contains(""String_Node_Str"")) {
          type=ComponentDefinition.RNA;
        }
        annotation=new Annotation(new QName(GBNAMESPACE,MOLECULE,GBPREFIX),strSplit[4]);
        annotations.add(annotation);
        for (int i=5; i < strSplit.length; i++) {
          if (strSplit[i].startsWith(""String_Node_Str"") || strSplit[i].startsWith(""String_Node_Str"")) {
            if (strSplit[i].startsWith(""String_Node_Str""))             circular=true;
          }
 else           if (strSplit[i].length() == 3) {
            annotation=new Annotation(new QName(GBNAMESPACE,DIVISION,GBPREFIX),strSplit[i]);
          }
 else {
            annotation=new Annotation(new QName(GBNAMESPACE,DATE,GBPREFIX),strSplit[i]);
          }
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        if (strSplit.length > 1) {
          String accession=strSplit[1];
          id=accession;
          id=URIcompliance.fixDisplayId(id);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        if (strSplit.length > 1) {
          if (!id.equals(URIcompliance.fixDisplayId(strSplit[1]))) {
            if (strSplit[1].split(""String_Node_Str"").length > 1) {
              version=strSplit[1].split(""String_Node_Str"")[strSplit[1].split(""String_Node_Str"").length - 1];
            }
            String vId=URIcompliance.fixDisplayId(strSplit[1].split(""String_Node_Str"")[0]);
            if (!id.equals(vId)) {
              throw new SBOLConversionException(""String_Node_Str"");
            }
          }
        }
        if (strSplit.length > 2) {
          annotation=new Annotation(new QName(GBNAMESPACE,GINUMBER,GBPREFIX),strSplit[2]);
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,KEYWORDS,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,SOURCE,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,ORGANISM,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        nestedAnnotations=new ArrayList<Annotation>();
        Annotation labelAnnotation=new Annotation(new QName(GBNAMESPACE,LABEL,GBPREFIX),annotationStr);
        nestedAnnotations.add(labelAnnotation);
        URI nestedURI=URI.create(URIPrefix + id + ""String_Node_Str""+ refCnt);
        refCnt++;
        annotation=new Annotation(new QName(GBNAMESPACE,REFERENCE,GBPREFIX),new QName(GBNAMESPACE,NESTEDREFERENCE,GBPREFIX),nestedURI,nestedAnnotations);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,AUTHORS,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,TITLE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,JOURNAL,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,MEDLINE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,PUBMED,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
        Annotation pubMedAnnotation=new Annotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),annotationStr);
        annotations.add(pubMedAnnotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,COMMENT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,BASECOUNT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        topCD=doc.createComponentDefinition(id,version,type);
        if (circular) {
          topCD.addType(SequenceOntology.CIRCULAR);
        }
 else {
          topCD.addType(SequenceOntology.LINEAR);
        }
        topCD.addRole(SequenceOntology.ENGINEERED_REGION);
        if (!""String_Node_Str"".equals(description)) {
          topCD.setDescription(description);
        }
        topCD.setAnnotations(annotations);
        featureMode=true;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        originMode=true;
        featureMode=false;
      }
 else {
        if (featureMode) {
          if (strLine.startsWith(""String_Node_Str"")) {
            String tag=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
            String value=""String_Node_Str"";
            if ((-1) != strLine.indexOf('=')) {
              String[] splitStr=strLine.split(""String_Node_Str"");
              tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
              value=splitStr[1];
            }
            StringBuilder sbValue=new StringBuilder();
            sbValue.append(value);
            if (value.startsWith(""String_Node_Str"") && !value.endsWith(""String_Node_Str"")) {
              while (true) {
                strLine=readGenBankLine(br).trim();
                sbValue.append(strLine);
                if (strLine.endsWith(""String_Node_Str"")) {
                  break;
                }
              }
            }
            SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
            if (sa != null) {
              if (tag.equals(""String_Node_Str"")) {
                sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                labelType=""String_Node_Str"";
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"")&& !labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
 else               if (tag.equals(""String_Node_Str"")) {
                if (!labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"") && !labelType.equals(""String_Node_Str"")&& !labelType.equals(""String_Node_Str"")&& !labelType.equals(""String_Node_Str"")) {
                  sa.setName(value.replace(""String_Node_Str"",""String_Node_Str""));
                  labelType=""String_Node_Str"";
                }
              }
              if (value.startsWith(""String_Node_Str"")) {
                value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
 else {
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
              sa.addAnnotation(annotation);
            }
          }
 else {
            strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
            String[] strSplit=strLine.split(""String_Node_Str"");
            String featureType=strSplit[0];
            URI role=convertGenBanktoSO(featureType);
            String range=strSplit[1];
            boolean outerComplement=false;
            OrientationType orientation=OrientationType.INLINE;
            if (range.startsWith(""String_Node_Str"")) {
              outerComplement=true;
              orientation=OrientationType.REVERSECOMPLEMENT;
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            }
            if (range.startsWith(""String_Node_Str"") || range.startsWith(""String_Node_Str"")) {
              String multiType=""String_Node_Str"";
              if (range.startsWith(""String_Node_Str"")) {
                multiType=""String_Node_Str"";
              }
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              String[] ranges=range.split(""String_Node_Str"");
              int rangeCnt=0;
              SequenceAnnotation sa=null;
              for (              String r : ranges) {
                orientation=OrientationType.INLINE;
                if (r.startsWith(""String_Node_Str"") || outerComplement) {
                  orientation=OrientationType.REVERSECOMPLEMENT;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean startLessThan=false;
                boolean endGreaterThan=false;
                if (r.contains(""String_Node_Str"")) {
                  startLessThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                if (r.contains(""String_Node_Str"")) {
                  endGreaterThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean singleBaseRange=false;
                String[] rangeSplit=null;
                if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                  rangeSplit=r.split(""String_Node_Str"");
                  singleBaseRange=true;
                }
 else {
                  rangeSplit=r.split(""String_Node_Str"");
                }
                int start=Integer.parseInt(rangeSplit[0]);
                int end=Integer.parseInt(rangeSplit[1]);
                Range newRange=null;
                if (rangeCnt == 0) {
                  sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
                  sa.setName(featureType);
                  sa.addRole(role);
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,MULTIRANGETYPE,GBCONVPREFIX),multiType);
                  sa.addAnnotation(annotation);
                  newRange=(Range)sa.getLocation(""String_Node_Str"" + rangeCnt);
                }
 else                 if (sa != null) {
                  newRange=sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
                }
                if (outerComplement) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + ((ranges.length - 1) - rangeCnt));
                }
 else {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + rangeCnt);
                }
                newRange.addAnnotation(annotation);
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                rangeCnt++;
              }
            }
 else             if (range.contains(""String_Node_Str"")) {
              String[] rangeSplit=range.split(""String_Node_Str"");
              int at=Integer.parseInt(rangeSplit[0]);
              SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
              sa.addRole(role);
              sa.setName(featureType);
            }
 else {
              boolean startLessThan=false;
              boolean endGreaterThan=false;
              if (range.contains(""String_Node_Str"")) {
                startLessThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              if (range.contains(""String_Node_Str"")) {
                endGreaterThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean singleBaseRange=false;
              String[] rangeSplit=null;
              if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                rangeSplit=range.split(""String_Node_Str"");
                singleBaseRange=true;
              }
 else {
                rangeSplit=range.split(""String_Node_Str"");
              }
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[0]);
              if (rangeSplit.length > 1) {
                end=Integer.parseInt(rangeSplit[1]);
              }
              if (start > end && circular) {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,baseCount,orientation);
                sa.addRole(role);
                sa.setName(featureType);
                annotation=new Annotation(new QName(GBCONVNAMESPACE,STRADLESORIGIN,GBCONVPREFIX),""String_Node_Str"");
                sa.addAnnotation(annotation);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                newRange=sa.addRange(""String_Node_Str"",1,end,orientation);
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
 else {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
                sa.addRole(role);
                sa.setName(featureType);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
            }
            labelType=""String_Node_Str"";
            lastRole=role;
            featureCnt++;
          }
        }
 else         if (originMode) {
          if (featureCnt == 1) {
            topCD.clearRoles();
            topCD.addRole(lastRole);
          }
          if (elements == null) {
            elements=new String(""String_Node_Str"");
          }
          if (strLine.startsWith(""String_Node_Str"")) {
            cont=true;
            break;
          }
          String[] strSplit=strLine.split(""String_Node_Str"");
          for (int i=1; i < strSplit.length; i++) {
            sbSequence.append(strSplit[i]);
          }
        }
        cont=false;
      }
    }
    if (topCD != null) {
      Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,sbSequence.toString(),Sequence.IUPAC_DNA);
      topCD.addSequence(sequence);
      createSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);
    }
    if (!cont)     break;
  }
  br.close();
}",0.9247892235305356
12467,"/** 
 * @param doc
 * @param stringBuffer
 * @param URIPrefix
 * @throws IOException
 * @throws SBOLConversionException
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the following methods:<ul> <li> {@link SBOLDocument#createComponentDefinition(String,String,URI)},</li> <li>  {@link Identified#setAnnotations(List)},</li> <li>  {@link SequenceAnnotation#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,int,OrientationType)},</li> <li>  {@link SequenceAnnotation#setComponent(String)},</li> <li>  {@link SequenceAnnotation#addRange(String,int,int,OrientationType)},</li> <li>  {@link Range#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,OrientationType)},</li> <li>  {@link SBOLDocument#createSequence(String,String,String,URI)}, </li> <li>  {@link ComponentDefinition#addSequence(Sequence)}, or </li> <li>  {@link #createSubComponentDefinitions(SBOLDocument,ComponentDefinition,URI,String,String)}.</li> </ul>
 */
static void read(SBOLDocument doc,String stringBuffer,String URIPrefix) throws IOException, SBOLConversionException, SBOLValidationException {
  so=new SequenceOntology();
  doc.addNamespace(URI.create(GBNAMESPACE),GBPREFIX);
  doc.addNamespace(URI.create(GBCONVNAMESPACE),GBCONVPREFIX);
  BufferedReader br=new BufferedReader(new StringReader(stringBuffer));
  String strLine;
  int featureCnt=0;
  int refCnt=0;
  while (true) {
    boolean cont=false;
    String id=""String_Node_Str"";
    String version=""String_Node_Str"";
    nextLine=null;
    featureMode=false;
    originMode=false;
    StringBuilder sbSequence=new StringBuilder();
    String elements=null;
    String description=""String_Node_Str"";
    URI type=ComponentDefinition.DNA;
    ComponentDefinition topCD=null;
    List<Annotation> annotations=new ArrayList<Annotation>();
    List<Annotation> nestedAnnotations=null;
    Annotation annotation=null;
    boolean circular=false;
    int baseCount=0;
    while ((strLine=readGenBankLine(br)) != null) {
      strLine=strLine.trim();
      if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        id=strSplit[1];
        annotation=new Annotation(new QName(GBNAMESPACE,LOCUS,GBPREFIX),strSplit[1]);
        annotations.add(annotation);
        baseCount=Integer.parseInt(strSplit[2]);
        if (strSplit[4].toUpperCase().contains(""String_Node_Str"")) {
          type=ComponentDefinition.RNA;
        }
        annotation=new Annotation(new QName(GBNAMESPACE,MOLECULE,GBPREFIX),strSplit[4]);
        annotations.add(annotation);
        for (int i=5; i < strSplit.length; i++) {
          if (strSplit[i].startsWith(""String_Node_Str"") || strSplit[i].startsWith(""String_Node_Str"")) {
            if (strSplit[i].startsWith(""String_Node_Str""))             circular=true;
          }
 else           if (strSplit[i].length() == 3) {
            annotation=new Annotation(new QName(GBNAMESPACE,DIVISION,GBPREFIX),strSplit[i]);
          }
 else {
            annotation=new Annotation(new QName(GBNAMESPACE,DATE,GBPREFIX),strSplit[i]);
          }
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        String accession=strSplit[1];
        id=accession;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        if (strSplit[1].split(""String_Node_Str"").length > 1) {
          version=strSplit[1].split(""String_Node_Str"")[1];
        }
        if (!id.equals(strSplit[1]) && !id.equals(strSplit[1].split(""String_Node_Str"")[0])) {
          throw new SBOLConversionException(""String_Node_Str"");
        }
        id=id.replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (strSplit.length > 2) {
          annotation=new Annotation(new QName(GBNAMESPACE,GINUMBER,GBPREFIX),strSplit[2]);
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,KEYWORDS,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,SOURCE,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,ORGANISM,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        nestedAnnotations=new ArrayList<Annotation>();
        Annotation labelAnnotation=new Annotation(new QName(GBNAMESPACE,LABEL,GBPREFIX),annotationStr);
        nestedAnnotations.add(labelAnnotation);
        URI nestedURI=URI.create(URIPrefix + id + ""String_Node_Str""+ refCnt);
        refCnt++;
        annotation=new Annotation(new QName(GBNAMESPACE,REFERENCE,GBPREFIX),new QName(GBNAMESPACE,NESTEDREFERENCE,GBPREFIX),nestedURI,nestedAnnotations);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,AUTHORS,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,TITLE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,JOURNAL,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,MEDLINE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,PUBMED,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
        Annotation pubMedAnnotation=new Annotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),annotationStr);
        annotations.add(pubMedAnnotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,COMMENT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,BASECOUNT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        topCD=doc.createComponentDefinition(id,version,type);
        if (circular) {
          topCD.addType(SequenceOntology.CIRCULAR);
        }
 else {
          topCD.addType(SequenceOntology.LINEAR);
        }
        topCD.addRole(SequenceOntology.ENGINEERED_REGION);
        if (!""String_Node_Str"".equals(description)) {
          topCD.setDescription(description);
        }
        topCD.setAnnotations(annotations);
        featureMode=true;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        originMode=true;
        featureMode=false;
      }
 else {
        if (featureMode) {
          if (strLine.startsWith(""String_Node_Str"")) {
            String tag=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
            String value=""String_Node_Str"";
            if ((-1) != strLine.indexOf('=')) {
              String[] splitStr=strLine.split(""String_Node_Str"");
              tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
              value=splitStr[1];
            }
            StringBuilder sbValue=new StringBuilder();
            sbValue.append(value);
            if (value.startsWith(""String_Node_Str"") && !value.endsWith(""String_Node_Str"")) {
              while (true) {
                strLine=readGenBankLine(br).trim();
                sbValue.append(strLine);
                if (strLine.endsWith(""String_Node_Str"")) {
                  break;
                }
              }
            }
            SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
            if (null != sa) {
              if (value.startsWith(""String_Node_Str"")) {
                value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
 else {
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
              sa.addAnnotation(annotation);
            }
          }
 else {
            strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
            String[] strSplit=strLine.split(""String_Node_Str"");
            URI role=convertGenBanktoSO(strSplit[0]);
            String range=strSplit[1];
            boolean outerComplement=false;
            OrientationType orientation=OrientationType.INLINE;
            if (range.startsWith(""String_Node_Str"")) {
              outerComplement=true;
              orientation=OrientationType.REVERSECOMPLEMENT;
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            }
            if (range.startsWith(""String_Node_Str"") || range.startsWith(""String_Node_Str"")) {
              String multiType=""String_Node_Str"";
              if (range.startsWith(""String_Node_Str"")) {
                multiType=""String_Node_Str"";
              }
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              String[] ranges=range.split(""String_Node_Str"");
              int rangeCnt=0;
              SequenceAnnotation sa=null;
              for (              String r : ranges) {
                orientation=OrientationType.INLINE;
                if (r.startsWith(""String_Node_Str"") || outerComplement) {
                  orientation=OrientationType.REVERSECOMPLEMENT;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean startLessThan=false;
                boolean endGreaterThan=false;
                if (r.contains(""String_Node_Str"")) {
                  startLessThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                if (r.contains(""String_Node_Str"")) {
                  endGreaterThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean singleBaseRange=false;
                String[] rangeSplit=null;
                if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                  rangeSplit=r.split(""String_Node_Str"");
                  singleBaseRange=true;
                }
 else {
                  rangeSplit=r.split(""String_Node_Str"");
                }
                int start=Integer.parseInt(rangeSplit[0]);
                int end=Integer.parseInt(rangeSplit[1]);
                Range newRange=null;
                if (rangeCnt == 0) {
                  sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
                  sa.addRole(role);
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,MULTIRANGETYPE,GBCONVPREFIX),multiType);
                  sa.addAnnotation(annotation);
                  newRange=(Range)sa.getLocation(""String_Node_Str"" + rangeCnt);
                }
 else                 if (sa != null) {
                  newRange=sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
                }
                if (outerComplement) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + ((ranges.length - 1) - rangeCnt));
                }
 else {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + rangeCnt);
                }
                newRange.addAnnotation(annotation);
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                rangeCnt++;
              }
            }
 else             if (range.contains(""String_Node_Str"")) {
              String[] rangeSplit=range.split(""String_Node_Str"");
              int at=Integer.parseInt(rangeSplit[0]);
              SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
              sa.addRole(role);
            }
 else {
              boolean startLessThan=false;
              boolean endGreaterThan=false;
              if (range.contains(""String_Node_Str"")) {
                startLessThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              if (range.contains(""String_Node_Str"")) {
                endGreaterThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean singleBaseRange=false;
              String[] rangeSplit=null;
              if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                rangeSplit=range.split(""String_Node_Str"");
                singleBaseRange=true;
              }
 else {
                rangeSplit=range.split(""String_Node_Str"");
              }
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[0]);
              if (rangeSplit.length > 1) {
                end=Integer.parseInt(rangeSplit[1]);
              }
              if (start > end && circular) {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,baseCount,orientation);
                sa.addRole(role);
                annotation=new Annotation(new QName(GBCONVNAMESPACE,STRADLESORIGIN,GBCONVPREFIX),""String_Node_Str"");
                sa.addAnnotation(annotation);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                newRange=sa.addRange(""String_Node_Str"",1,end,orientation);
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
 else {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
                sa.addRole(role);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
            }
            featureCnt++;
          }
        }
 else         if (originMode) {
          if (elements == null) {
            elements=new String(""String_Node_Str"");
          }
          if (strLine.startsWith(""String_Node_Str"")) {
            cont=true;
            break;
          }
          String[] strSplit=strLine.split(""String_Node_Str"");
          for (int i=1; i < strSplit.length; i++) {
            sbSequence.append(strSplit[i]);
          }
        }
        cont=false;
      }
    }
    if (topCD != null) {
      Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,sbSequence.toString(),Sequence.IUPAC_DNA);
      topCD.addSequence(sequence);
      createSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);
    }
    if (!cont)     break;
  }
  br.close();
}","/** 
 * @param doc
 * @param stringBuffer
 * @param URIPrefix
 * @throws IOException
 * @throws SBOLConversionException
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the following methods:<ul> <li> {@link SBOLDocument#createComponentDefinition(String,String,URI)},</li> <li>  {@link Identified#setAnnotations(List)},</li> <li>  {@link SequenceAnnotation#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,int,OrientationType)},</li> <li>  {@link SequenceAnnotation#setComponent(String)},</li> <li>  {@link SequenceAnnotation#addRange(String,int,int,OrientationType)},</li> <li>  {@link Range#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,OrientationType)},</li> <li>  {@link SBOLDocument#createSequence(String,String,String,URI)}, </li> <li>  {@link ComponentDefinition#addSequence(Sequence)}, or </li> <li>  {@link #createSubComponentDefinitions(SBOLDocument,ComponentDefinition,URI,String,String)}.</li> </ul>
 */
static void read(SBOLDocument doc,String stringBuffer,String URIPrefix) throws IOException, SBOLConversionException, SBOLValidationException {
  so=new SequenceOntology();
  doc.addNamespace(URI.create(GBNAMESPACE),GBPREFIX);
  doc.addNamespace(URI.create(GBCONVNAMESPACE),GBCONVPREFIX);
  BufferedReader br=new BufferedReader(new StringReader(stringBuffer));
  String strLine;
  int featureCnt=0;
  int refCnt=0;
  while (true) {
    boolean cont=false;
    String id=""String_Node_Str"";
    String version=""String_Node_Str"";
    nextLine=null;
    featureMode=false;
    originMode=false;
    StringBuilder sbSequence=new StringBuilder();
    String elements=null;
    String description=""String_Node_Str"";
    URI type=ComponentDefinition.DNA;
    ComponentDefinition topCD=null;
    List<Annotation> annotations=new ArrayList<Annotation>();
    List<Annotation> nestedAnnotations=null;
    Annotation annotation=null;
    boolean circular=false;
    int baseCount=0;
    while ((strLine=readGenBankLine(br)) != null) {
      strLine=strLine.trim();
      if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        id=strSplit[1];
        annotation=new Annotation(new QName(GBNAMESPACE,LOCUS,GBPREFIX),strSplit[1]);
        annotations.add(annotation);
        baseCount=Integer.parseInt(strSplit[2]);
        if (strSplit[4].toUpperCase().contains(""String_Node_Str"")) {
          type=ComponentDefinition.RNA;
        }
        annotation=new Annotation(new QName(GBNAMESPACE,MOLECULE,GBPREFIX),strSplit[4]);
        annotations.add(annotation);
        for (int i=5; i < strSplit.length; i++) {
          if (strSplit[i].startsWith(""String_Node_Str"") || strSplit[i].startsWith(""String_Node_Str"")) {
            if (strSplit[i].startsWith(""String_Node_Str""))             circular=true;
          }
 else           if (strSplit[i].length() == 3) {
            annotation=new Annotation(new QName(GBNAMESPACE,DIVISION,GBPREFIX),strSplit[i]);
          }
 else {
            annotation=new Annotation(new QName(GBNAMESPACE,DATE,GBPREFIX),strSplit[i]);
          }
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        String accession=strSplit[1];
        id=accession;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        id=URIcompliance.fixDisplayId(id);
        if (!id.equals(URIcompliance.fixDisplayId(strSplit[1]))) {
          if (strSplit[1].split(""String_Node_Str"").length > 1) {
            version=strSplit[1].split(""String_Node_Str"")[strSplit[1].split(""String_Node_Str"").length - 1];
          }
          String vId=URIcompliance.fixDisplayId(strSplit[1].split(""String_Node_Str"")[0]);
          if (!id.equals(vId)) {
            throw new SBOLConversionException(""String_Node_Str"");
          }
        }
        if (strSplit.length > 2) {
          annotation=new Annotation(new QName(GBNAMESPACE,GINUMBER,GBPREFIX),strSplit[2]);
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,KEYWORDS,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,SOURCE,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,ORGANISM,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        nestedAnnotations=new ArrayList<Annotation>();
        Annotation labelAnnotation=new Annotation(new QName(GBNAMESPACE,LABEL,GBPREFIX),annotationStr);
        nestedAnnotations.add(labelAnnotation);
        URI nestedURI=URI.create(URIPrefix + id + ""String_Node_Str""+ refCnt);
        refCnt++;
        annotation=new Annotation(new QName(GBNAMESPACE,REFERENCE,GBPREFIX),new QName(GBNAMESPACE,NESTEDREFERENCE,GBPREFIX),nestedURI,nestedAnnotations);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,AUTHORS,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,TITLE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,JOURNAL,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,MEDLINE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,PUBMED,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
        Annotation pubMedAnnotation=new Annotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),annotationStr);
        annotations.add(pubMedAnnotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,COMMENT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,BASECOUNT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        topCD=doc.createComponentDefinition(id,version,type);
        if (circular) {
          topCD.addType(SequenceOntology.CIRCULAR);
        }
 else {
          topCD.addType(SequenceOntology.LINEAR);
        }
        topCD.addRole(SequenceOntology.ENGINEERED_REGION);
        if (!""String_Node_Str"".equals(description)) {
          topCD.setDescription(description);
        }
        topCD.setAnnotations(annotations);
        featureMode=true;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        originMode=true;
        featureMode=false;
      }
 else {
        if (featureMode) {
          if (strLine.startsWith(""String_Node_Str"")) {
            String tag=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
            String value=""String_Node_Str"";
            if ((-1) != strLine.indexOf('=')) {
              String[] splitStr=strLine.split(""String_Node_Str"");
              tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
              value=splitStr[1];
            }
            StringBuilder sbValue=new StringBuilder();
            sbValue.append(value);
            if (value.startsWith(""String_Node_Str"") && !value.endsWith(""String_Node_Str"")) {
              while (true) {
                strLine=readGenBankLine(br).trim();
                sbValue.append(strLine);
                if (strLine.endsWith(""String_Node_Str"")) {
                  break;
                }
              }
            }
            SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
            if (null != sa) {
              if (value.startsWith(""String_Node_Str"")) {
                value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
 else {
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
              sa.addAnnotation(annotation);
            }
          }
 else {
            strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
            String[] strSplit=strLine.split(""String_Node_Str"");
            URI role=convertGenBanktoSO(strSplit[0]);
            String range=strSplit[1];
            boolean outerComplement=false;
            OrientationType orientation=OrientationType.INLINE;
            if (range.startsWith(""String_Node_Str"")) {
              outerComplement=true;
              orientation=OrientationType.REVERSECOMPLEMENT;
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            }
            if (range.startsWith(""String_Node_Str"") || range.startsWith(""String_Node_Str"")) {
              String multiType=""String_Node_Str"";
              if (range.startsWith(""String_Node_Str"")) {
                multiType=""String_Node_Str"";
              }
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              String[] ranges=range.split(""String_Node_Str"");
              int rangeCnt=0;
              SequenceAnnotation sa=null;
              for (              String r : ranges) {
                orientation=OrientationType.INLINE;
                if (r.startsWith(""String_Node_Str"") || outerComplement) {
                  orientation=OrientationType.REVERSECOMPLEMENT;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean startLessThan=false;
                boolean endGreaterThan=false;
                if (r.contains(""String_Node_Str"")) {
                  startLessThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                if (r.contains(""String_Node_Str"")) {
                  endGreaterThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean singleBaseRange=false;
                String[] rangeSplit=null;
                if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                  rangeSplit=r.split(""String_Node_Str"");
                  singleBaseRange=true;
                }
 else {
                  rangeSplit=r.split(""String_Node_Str"");
                }
                int start=Integer.parseInt(rangeSplit[0]);
                int end=Integer.parseInt(rangeSplit[1]);
                Range newRange=null;
                if (rangeCnt == 0) {
                  sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
                  sa.addRole(role);
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,MULTIRANGETYPE,GBCONVPREFIX),multiType);
                  sa.addAnnotation(annotation);
                  newRange=(Range)sa.getLocation(""String_Node_Str"" + rangeCnt);
                }
 else                 if (sa != null) {
                  newRange=sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
                }
                if (outerComplement) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + ((ranges.length - 1) - rangeCnt));
                }
 else {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + rangeCnt);
                }
                newRange.addAnnotation(annotation);
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                rangeCnt++;
              }
            }
 else             if (range.contains(""String_Node_Str"")) {
              String[] rangeSplit=range.split(""String_Node_Str"");
              int at=Integer.parseInt(rangeSplit[0]);
              SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
              sa.addRole(role);
            }
 else {
              boolean startLessThan=false;
              boolean endGreaterThan=false;
              if (range.contains(""String_Node_Str"")) {
                startLessThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              if (range.contains(""String_Node_Str"")) {
                endGreaterThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean singleBaseRange=false;
              String[] rangeSplit=null;
              if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                rangeSplit=range.split(""String_Node_Str"");
                singleBaseRange=true;
              }
 else {
                rangeSplit=range.split(""String_Node_Str"");
              }
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[0]);
              if (rangeSplit.length > 1) {
                end=Integer.parseInt(rangeSplit[1]);
              }
              if (start > end && circular) {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,baseCount,orientation);
                sa.addRole(role);
                annotation=new Annotation(new QName(GBCONVNAMESPACE,STRADLESORIGIN,GBCONVPREFIX),""String_Node_Str"");
                sa.addAnnotation(annotation);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                newRange=sa.addRange(""String_Node_Str"",1,end,orientation);
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
 else {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
                sa.addRole(role);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
            }
            featureCnt++;
          }
        }
 else         if (originMode) {
          if (elements == null) {
            elements=new String(""String_Node_Str"");
          }
          if (strLine.startsWith(""String_Node_Str"")) {
            cont=true;
            break;
          }
          String[] strSplit=strLine.split(""String_Node_Str"");
          for (int i=1; i < strSplit.length; i++) {
            sbSequence.append(strSplit[i]);
          }
        }
        cont=false;
      }
    }
    if (topCD != null) {
      Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,sbSequence.toString(),Sequence.IUPAC_DNA);
      topCD.addSequence(sequence);
      createSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);
    }
    if (!cont)     break;
  }
  br.close();
}",0.9887323943661972
12468,"/** 
 * Renames the given top-level's URI prefix, display ID, and version with the given ones.   <p> This method first calls   {@link #createCopy(TopLevel,String,String,String)} to make a copy ofthe given top-level with the URI prefix, display ID, and version. It then removes the given top-level and then returns the newly-copied top-level. 
 * @param topLevel the top-level to be renamed
 * @param URIprefix the given URI prefix to be rename to 
 * @param displayId the given display ID to be renamed to  
 * @param version the given version to be renamed to
 * @return the renamed top-level 
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10513, 10604, 11608, 11703, 12103; or</li> <li>an SBOL validation rule violation occurred in the following method:  {@link #createCopy(TopLevel,String,String,String)}.</li> </ul>
 */
public TopLevel rename(TopLevel topLevel,String URIprefix,String displayId,String version) throws SBOLValidationException {
  TopLevel renamedTopLevel=createCopy(topLevel,URIprefix,displayId,version);
  removeTopLevel(topLevel);
  updateReferences(topLevel.getIdentity(),renamedTopLevel.getIdentity());
  updateReferences(topLevel.getPersistentIdentity(),renamedTopLevel.getPersistentIdentity());
  return renamedTopLevel;
}","/** 
 * Renames the given top-level's URI prefix, display ID, and version with the given ones.   <p> This method first calls   {@link #createCopy(TopLevel,String,String,String)} to make a copy ofthe given top-level with the URI prefix, display ID, and version. It then removes the given top-level and then returns the newly-copied top-level. 
 * @param topLevel the top-level to be renamed
 * @param URIprefix the given URI prefix to be rename to 
 * @param displayId the given display ID to be renamed to  
 * @param version the given version to be renamed to
 * @return the renamed top-level 
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10513, 10604, 11608, 11703, 12103; or</li> <li>an SBOL validation rule violation occurred in the following method:  {@link #createCopy(TopLevel,String,String,String)}.</li> </ul>
 */
public TopLevel rename(TopLevel topLevel,String URIprefix,String displayId,String version) throws SBOLValidationException {
  if ((URIprefix == null || URIcompliance.extractURIprefix(topLevel.getIdentity()).equals(URIprefix)) && (displayId == null || topLevel.getDisplayId().equals(displayId)) && (version == null || topLevel.getVersion().equals(version))) {
    return topLevel;
  }
  TopLevel renamedTopLevel=createCopy(topLevel,URIprefix,displayId,version);
  removeTopLevel(topLevel);
  updateReferences(topLevel.getIdentity(),renamedTopLevel.getIdentity());
  updateReferences(topLevel.getPersistentIdentity(),renamedTopLevel.getPersistentIdentity());
  return renamedTopLevel;
}",0.9124579124579124
12469,"/** 
 * The validate function will: - perform validation on the given input SBOL file - perform comparison between 2 SBOL files - perform interconversion between SBOL1 and SBOL2 - convert from SBOL to GenBank - convert from SBOL to FASTA
 * @param fileName - Input SBOL file name
 * @param URIPrefix - Default URI prefix to set the SBOL Document to be read in or to be created.
 * @param complete - Set boolean variable to false to allow SBOL document to be incomplete. True otherwise.
 * @param compliant - Set boolean variable to false to allow non-compliant URIs. True otherwise. 
 * @param bestPractice - Set boolean variable to true to check best practices. False otherwise.
 * @param typesInURI - Set boolean variable to true to indicate that types are inserted into top-level identity URIs when they are created of the SBOL Document.
 * @param version - Specify the version to use for converted SBOL objects.
 * @param keepGoing - Set boolean variable to false to indicate fail on first error and stop program from continuing. True otherwise. 
 * @param compareFile - Second SBOL file to compare to the primary SBOL file.
 * @param compareFileName - The name of the second SBOL file to compare to the primary SBOL file.
 * @param mainFileName - Primary SBOL file to compare to the second SBOL file.
 * @param topLevelURIStr - Specify the top level URI SBOL object contained within the given SBOL Document.
 * @param genBankOut - Set boolean variable to true to convert input file to GenBank. False otherwise. 
 * @param sbolV1out - Set boolean variable to true to convert input file to SBOL1. False otherwise. 
 * @param fastaOut - Set boolean variable to true to convert input file to FASTA. False otherwise. 
 * @param outputFile - The specified output name to be generated if the validation must produce an output file.
 * @param showDetail - Set boolean variable to true to display detailed error trace. False otherwise. 
 * @param noOutput - Set boolean variable to true to indicate no output file to be generated from validation
 */
public static void validate(String fileName,String URIPrefix,boolean complete,boolean compliant,boolean bestPractice,boolean typesInURI,String version,boolean keepGoing,String compareFile,String compareFileName,String mainFileName,String topLevelURIStr,boolean genBankOut,boolean sbolV1out,boolean fastaOut,String outputFile,boolean showDetail,boolean noOutput){
  try {
    SBOLDocument doc=null;
    if (!URIPrefix.equals(""String_Node_Str"")) {
      SBOLReader.setURIPrefix(URIPrefix);
    }
    if (!compliant) {
      SBOLReader.setCompliant(false);
    }
    SBOLReader.setTypesInURI(typesInURI);
    SBOLReader.setVersion(version);
    SBOLReader.setKeepGoing(keepGoing);
    SBOLWriter.setKeepGoing(keepGoing);
    if (FASTA.isFastaFile(fileName)) {
      System.out.println(""String_Node_Str"");
    }
 else     if (GenBank.isGenBankFile(fileName)) {
      System.out.println(""String_Node_Str"");
    }
 else     if (SBOLReader.getSBOLVersion(fileName).equals(SBOLReader.SBOLVERSION1)) {
      System.out.println(""String_Node_Str"");
    }
    doc=SBOLReader.read(fileName);
    doc.setTypesInURIs(typesInURI);
    if (!compareFile.equals(""String_Node_Str"")) {
      SBOLDocument doc2=SBOLReader.read(compareFile);
      if (mainFileName.equals(""String_Node_Str"")) {
        File f=new File(fileName);
        mainFileName=f.getName();
      }
      if (compareFileName.equals(""String_Node_Str"")) {
        File f=new File(compareFile);
        compareFileName=f.getName();
      }
      compareDocuments(mainFileName,doc,compareFileName,doc2);
    }
    if (!topLevelURIStr.equals(""String_Node_Str"")) {
      TopLevel topLevel=doc.getTopLevel(URI.create(topLevelURIStr));
      if (topLevel == null) {
        System.err.println(""String_Node_Str"" + topLevelURIStr + ""String_Node_Str"");
        return;
      }
      if (complete) {
        doc=doc.createRecursiveCopy(topLevel);
      }
 else {
        SBOLDocument newDoc=new SBOLDocument();
        newDoc.createCopy(topLevel);
        doc=newDoc;
      }
    }
    if (!URIPrefix.equals(""String_Node_Str"")) {
      System.out.println(""String_Node_Str"" + URIPrefix);
      if (version != null) {
        System.out.println(""String_Node_Str"" + version);
      }
      doc=doc.changeURIPrefixVersion(URIPrefix,version);
    }
 else     if (version != null) {
      System.err.println(""String_Node_Str"");
      return;
    }
    validateSBOL(doc,complete,compliant,bestPractice);
    if (getNumErrors() == 0 && SBOLReader.getNumErrors() == 0) {
      if (noOutput) {
        System.out.println(""String_Node_Str"");
      }
 else       if (genBankOut) {
        if (outputFile.equals(""String_Node_Str"")) {
          SBOLWriter.write(doc,(System.out),SBOLDocument.GENBANK);
        }
 else {
          System.out.println(""String_Node_Str"");
          SBOLWriter.write(doc,outputFile,SBOLDocument.GENBANK);
        }
      }
 else       if (sbolV1out) {
        if (outputFile.equals(""String_Node_Str"")) {
          SBOLWriter.write(doc,(System.out),SBOLDocument.RDFV1);
        }
 else {
          System.out.println(""String_Node_Str"");
          SBOLWriter.write(doc,outputFile,SBOLDocument.RDFV1);
        }
        if (SBOLWriter.getNumErrors() != 0) {
          for (          String error : SBOLWriter.getErrors()) {
            System.err.println(error);
          }
        }
      }
 else       if (fastaOut) {
        if (outputFile.equals(""String_Node_Str"")) {
          SBOLWriter.write(doc,(System.out),SBOLDocument.FASTAformat);
        }
 else {
          System.out.println(""String_Node_Str"");
          SBOLWriter.write(doc,outputFile,SBOLDocument.FASTAformat);
        }
      }
 else {
        if (outputFile.equals(""String_Node_Str"")) {
          SBOLWriter.write(doc,(System.out));
        }
 else {
          System.out.println(""String_Node_Str"");
          SBOLWriter.write(doc,outputFile);
        }
      }
    }
 else {
      if (getNumErrors() != 0) {
        for (        String error : getErrors()) {
          System.err.println(error);
          System.err.println();
        }
      }
      if (SBOLReader.getNumErrors() != 0) {
        for (        String error : SBOLReader.getErrors()) {
          System.err.println(error);
          System.err.println();
        }
      }
      System.err.println(""String_Node_Str"");
    }
  }
 catch (  SBOLValidationException e) {
    if (showDetail) {
      e.printStackTrace();
    }
    if (e.getMessage() != null) {
      System.err.println(e.getMessage() + ""String_Node_Str"");
    }
 else {
      e.printStackTrace();
      System.err.println(""String_Node_Str"");
    }
  }
catch (  SBOLConversionException e) {
    if (showDetail) {
      e.printStackTrace();
    }
    if (e.getMessage() != null) {
      System.err.println(e.getMessage() + ""String_Node_Str"");
    }
 else {
      e.printStackTrace();
      System.err.println(""String_Node_Str"");
    }
  }
catch (  IOException e) {
    System.err.println(e.getMessage() + ""String_Node_Str"");
    e.printStackTrace();
  }
}","/** 
 * The validate function will: - perform validation on the given input SBOL file - perform comparison between 2 SBOL files - perform interconversion between SBOL1 and SBOL2 - convert from SBOL to GenBank - convert from SBOL to FASTA
 * @param fileName - Input SBOL file name
 * @param URIPrefix - Default URI prefix to set the SBOL Document to be read in or to be created.
 * @param complete - Set boolean variable to false to allow SBOL document to be incomplete. True otherwise.
 * @param compliant - Set boolean variable to false to allow non-compliant URIs. True otherwise. 
 * @param bestPractice - Set boolean variable to true to check best practices. False otherwise.
 * @param typesInURI - Set boolean variable to true to indicate that types are inserted into top-level identity URIs when they are created of the SBOL Document.
 * @param version - Specify the version to use for converted SBOL objects.
 * @param keepGoing - Set boolean variable to false to indicate fail on first error and stop program from continuing. True otherwise. 
 * @param compareFile - Second SBOL file to compare to the primary SBOL file.
 * @param compareFileName - The name of the second SBOL file to compare to the primary SBOL file.
 * @param mainFileName - Primary SBOL file to compare to the second SBOL file.
 * @param topLevelURIStr - Specify the top level URI SBOL object contained within the given SBOL Document.
 * @param genBankOut - Set boolean variable to true to convert input file to GenBank. False otherwise. 
 * @param sbolV1out - Set boolean variable to true to convert input file to SBOL1. False otherwise. 
 * @param fastaOut - Set boolean variable to true to convert input file to FASTA. False otherwise. 
 * @param outputFile - The specified output name to be generated if the validation must produce an output file.
 * @param showDetail - Set boolean variable to true to display detailed error trace. False otherwise. 
 * @param noOutput - Set boolean variable to true to indicate no output file to be generated from validation
 */
public static void validate(String fileName,String URIPrefix,boolean complete,boolean compliant,boolean bestPractice,boolean typesInURI,String version,boolean keepGoing,String compareFile,String compareFileName,String mainFileName,String topLevelURIStr,boolean genBankOut,boolean sbolV1out,boolean fastaOut,String outputFile,boolean showDetail,boolean noOutput){
  try {
    SBOLDocument doc=null;
    if (!URIPrefix.equals(""String_Node_Str"")) {
      SBOLReader.setURIPrefix(URIPrefix);
    }
    if (!compliant) {
      SBOLReader.setCompliant(false);
    }
    SBOLReader.setTypesInURI(typesInURI);
    SBOLReader.setVersion(version);
    SBOLReader.setKeepGoing(keepGoing);
    SBOLWriter.setKeepGoing(keepGoing);
    if (FASTA.isFastaFile(fileName)) {
      System.out.println(""String_Node_Str"");
    }
 else     if (GenBank.isGenBankFile(fileName)) {
      System.out.println(""String_Node_Str"");
    }
 else     if (SBOLReader.getSBOLVersion(fileName).equals(SBOLReader.SBOLVERSION1)) {
      System.out.println(""String_Node_Str"");
    }
    doc=SBOLReader.read(fileName);
    doc.setTypesInURIs(typesInURI);
    if (!compareFile.equals(""String_Node_Str"")) {
      SBOLDocument doc2=SBOLReader.read(compareFile);
      if (mainFileName.equals(""String_Node_Str"")) {
        File f=new File(fileName);
        mainFileName=f.getName();
      }
      if (compareFileName.equals(""String_Node_Str"")) {
        File f=new File(compareFile);
        compareFileName=f.getName();
      }
      compareDocuments(mainFileName,doc,compareFileName,doc2);
    }
    if (!topLevelURIStr.equals(""String_Node_Str"")) {
      TopLevel topLevel=doc.getTopLevel(URI.create(topLevelURIStr));
      if (topLevel == null) {
        System.err.println(""String_Node_Str"" + topLevelURIStr + ""String_Node_Str"");
        return;
      }
      if (complete) {
        doc=doc.createRecursiveCopy(topLevel);
      }
 else {
        SBOLDocument newDoc=new SBOLDocument();
        newDoc.createCopy(topLevel);
        doc=newDoc;
      }
    }
    if (!URIPrefix.equals(""String_Node_Str"") && doc.getTopLevels().size() > 0) {
      System.out.println(""String_Node_Str"" + URIPrefix);
      if (version != null) {
        System.out.println(""String_Node_Str"" + version);
      }
      doc=doc.changeURIPrefixVersion(URIPrefix,version);
    }
 else     if (version != null) {
      System.err.println(""String_Node_Str"");
      return;
    }
    validateSBOL(doc,complete,compliant,bestPractice);
    if (getNumErrors() == 0 && SBOLReader.getNumErrors() == 0) {
      if (noOutput) {
        System.out.println(""String_Node_Str"");
      }
 else       if (genBankOut) {
        if (outputFile.equals(""String_Node_Str"")) {
          SBOLWriter.write(doc,(System.out),SBOLDocument.GENBANK);
        }
 else {
          System.out.println(""String_Node_Str"");
          SBOLWriter.write(doc,outputFile,SBOLDocument.GENBANK);
        }
      }
 else       if (sbolV1out) {
        if (outputFile.equals(""String_Node_Str"")) {
          SBOLWriter.write(doc,(System.out),SBOLDocument.RDFV1);
        }
 else {
          System.out.println(""String_Node_Str"");
          SBOLWriter.write(doc,outputFile,SBOLDocument.RDFV1);
        }
        if (SBOLWriter.getNumErrors() != 0) {
          for (          String error : SBOLWriter.getErrors()) {
            System.err.println(error);
          }
        }
      }
 else       if (fastaOut) {
        if (outputFile.equals(""String_Node_Str"")) {
          SBOLWriter.write(doc,(System.out),SBOLDocument.FASTAformat);
        }
 else {
          System.out.println(""String_Node_Str"");
          SBOLWriter.write(doc,outputFile,SBOLDocument.FASTAformat);
        }
      }
 else {
        if (outputFile.equals(""String_Node_Str"")) {
          SBOLWriter.write(doc,(System.out));
        }
 else {
          System.out.println(""String_Node_Str"");
          SBOLWriter.write(doc,outputFile);
        }
      }
    }
 else {
      if (getNumErrors() != 0) {
        for (        String error : getErrors()) {
          System.err.println(error);
          System.err.println();
        }
      }
      if (SBOLReader.getNumErrors() != 0) {
        for (        String error : SBOLReader.getErrors()) {
          System.err.println(error);
          System.err.println();
        }
      }
      System.err.println(""String_Node_Str"");
    }
  }
 catch (  SBOLValidationException e) {
    if (showDetail) {
      e.printStackTrace();
    }
    if (e.getMessage() != null) {
      System.err.println(e.getMessage() + ""String_Node_Str"");
    }
 else {
      e.printStackTrace();
      System.err.println(""String_Node_Str"");
    }
  }
catch (  SBOLConversionException e) {
    if (showDetail) {
      e.printStackTrace();
    }
    if (e.getMessage() != null) {
      System.err.println(e.getMessage() + ""String_Node_Str"");
    }
 else {
      e.printStackTrace();
      System.err.println(""String_Node_Str"");
    }
  }
catch (  IOException e) {
    System.err.println(e.getMessage() + ""String_Node_Str"");
    e.printStackTrace();
  }
}",0.997664378229174
12470,"/** 
 * @param doc
 * @param stringBuffer
 * @param URIPrefix
 * @throws IOException
 * @throws SBOLConversionException
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the following methods:<ul> <li> {@link SBOLDocument#createComponentDefinition(String,String,URI)},</li> <li>  {@link Identified#setAnnotations(List)},</li> <li>  {@link SequenceAnnotation#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,int,OrientationType)},</li> <li>  {@link SequenceAnnotation#setComponent(String)},</li> <li>  {@link SequenceAnnotation#addRange(String,int,int,OrientationType)},</li> <li>  {@link Range#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,OrientationType)},</li> <li>  {@link SBOLDocument#createSequence(String,String,String,URI)}, </li> <li>  {@link ComponentDefinition#addSequence(Sequence)}, or </li> <li>  {@link #createSubComponentDefinitions(SBOLDocument,ComponentDefinition,URI,String,String)}.</li> </ul>
 */
static void read(SBOLDocument doc,String stringBuffer,String URIPrefix) throws IOException, SBOLConversionException, SBOLValidationException {
  so=new SequenceOntology();
  doc.addNamespace(URI.create(GBNAMESPACE),GBPREFIX);
  doc.addNamespace(URI.create(GBCONVNAMESPACE),GBCONVPREFIX);
  BufferedReader br=new BufferedReader(new StringReader(stringBuffer));
  String strLine;
  int featureCnt=0;
  int refCnt=0;
  while (true) {
    boolean cont=false;
    String id=""String_Node_Str"";
    String version=""String_Node_Str"";
    nextLine=null;
    featureMode=false;
    originMode=false;
    StringBuilder sbSequence=new StringBuilder();
    String elements=null;
    String description=""String_Node_Str"";
    URI type=ComponentDefinition.DNA;
    ComponentDefinition topCD=null;
    List<Annotation> annotations=new ArrayList<Annotation>();
    List<Annotation> nestedAnnotations=null;
    Annotation annotation=null;
    boolean circular=false;
    int baseCount=0;
    while ((strLine=readGenBankLine(br)) != null) {
      strLine=strLine.trim();
      if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        id=strSplit[1];
        annotation=new Annotation(new QName(GBNAMESPACE,LOCUS,GBPREFIX),strSplit[1]);
        annotations.add(annotation);
        baseCount=Integer.parseInt(strSplit[2]);
        if (strSplit[4].toUpperCase().contains(""String_Node_Str"")) {
          type=ComponentDefinition.RNA;
        }
        annotation=new Annotation(new QName(GBNAMESPACE,MOLECULE,GBPREFIX),strSplit[4]);
        annotations.add(annotation);
        for (int i=5; i < strSplit.length; i++) {
          if (strSplit[i].startsWith(""String_Node_Str"") || strSplit[i].startsWith(""String_Node_Str"")) {
            if (strSplit[i].startsWith(""String_Node_Str""))             circular=true;
          }
 else           if (strSplit[i].length() == 3) {
            annotation=new Annotation(new QName(GBNAMESPACE,DIVISION,GBPREFIX),strSplit[i]);
          }
 else {
            annotation=new Annotation(new QName(GBNAMESPACE,DATE,GBPREFIX),strSplit[i]);
          }
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        String accession=strSplit[1];
        id=accession;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        id=URIcompliance.fixDisplayId(id);
        if (!id.equals(URIcompliance.fixDisplayId(strSplit[1]))) {
          if (strSplit[1].split(""String_Node_Str"").length > 1) {
            version=strSplit[1].split(""String_Node_Str"")[strSplit[1].split(""String_Node_Str"").length - 1];
          }
          String vId=URIcompliance.fixDisplayId(strSplit[1].split(""String_Node_Str"")[0]);
          if (!id.equals(vId)) {
            throw new SBOLConversionException(""String_Node_Str"");
          }
        }
        if (strSplit.length > 2) {
          annotation=new Annotation(new QName(GBNAMESPACE,GINUMBER,GBPREFIX),strSplit[2]);
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,KEYWORDS,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,SOURCE,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,ORGANISM,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        nestedAnnotations=new ArrayList<Annotation>();
        Annotation labelAnnotation=new Annotation(new QName(GBNAMESPACE,LABEL,GBPREFIX),annotationStr);
        nestedAnnotations.add(labelAnnotation);
        URI nestedURI=URI.create(URIPrefix + id + ""String_Node_Str""+ refCnt);
        refCnt++;
        annotation=new Annotation(new QName(GBNAMESPACE,REFERENCE,GBPREFIX),new QName(GBNAMESPACE,NESTEDREFERENCE,GBPREFIX),nestedURI,nestedAnnotations);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,AUTHORS,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,TITLE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,JOURNAL,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,MEDLINE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,PUBMED,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
        Annotation pubMedAnnotation=new Annotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),annotationStr);
        annotations.add(pubMedAnnotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,COMMENT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,BASECOUNT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        topCD=doc.createComponentDefinition(id,version,type);
        if (circular) {
          topCD.addType(SequenceOntology.CIRCULAR);
        }
 else {
          topCD.addType(SequenceOntology.LINEAR);
        }
        topCD.addRole(SequenceOntology.ENGINEERED_REGION);
        if (!""String_Node_Str"".equals(description)) {
          topCD.setDescription(description);
        }
        topCD.setAnnotations(annotations);
        featureMode=true;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        originMode=true;
        featureMode=false;
      }
 else {
        if (featureMode) {
          if (strLine.startsWith(""String_Node_Str"")) {
            String tag=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
            String value=""String_Node_Str"";
            if ((-1) != strLine.indexOf('=')) {
              String[] splitStr=strLine.split(""String_Node_Str"");
              tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
              value=splitStr[1];
            }
            StringBuilder sbValue=new StringBuilder();
            sbValue.append(value);
            if (value.startsWith(""String_Node_Str"") && !value.endsWith(""String_Node_Str"")) {
              while (true) {
                strLine=readGenBankLine(br).trim();
                sbValue.append(strLine);
                if (strLine.endsWith(""String_Node_Str"")) {
                  break;
                }
              }
            }
            SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
            if (null != sa) {
              if (value.startsWith(""String_Node_Str"")) {
                value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
 else {
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
              sa.addAnnotation(annotation);
            }
          }
 else {
            strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
            String[] strSplit=strLine.split(""String_Node_Str"");
            URI role=convertGenBanktoSO(strSplit[0]);
            String range=strSplit[1];
            boolean outerComplement=false;
            OrientationType orientation=OrientationType.INLINE;
            if (range.startsWith(""String_Node_Str"")) {
              outerComplement=true;
              orientation=OrientationType.REVERSECOMPLEMENT;
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            }
            if (range.startsWith(""String_Node_Str"") || range.startsWith(""String_Node_Str"")) {
              String multiType=""String_Node_Str"";
              if (range.startsWith(""String_Node_Str"")) {
                multiType=""String_Node_Str"";
              }
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              String[] ranges=range.split(""String_Node_Str"");
              int rangeCnt=0;
              SequenceAnnotation sa=null;
              for (              String r : ranges) {
                orientation=OrientationType.INLINE;
                if (r.startsWith(""String_Node_Str"") || outerComplement) {
                  orientation=OrientationType.REVERSECOMPLEMENT;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean startLessThan=false;
                boolean endGreaterThan=false;
                if (r.contains(""String_Node_Str"")) {
                  startLessThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                if (r.contains(""String_Node_Str"")) {
                  endGreaterThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean singleBaseRange=false;
                String[] rangeSplit=null;
                if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                  rangeSplit=r.split(""String_Node_Str"");
                  singleBaseRange=true;
                }
 else {
                  rangeSplit=r.split(""String_Node_Str"");
                }
                int start=Integer.parseInt(rangeSplit[0]);
                int end=Integer.parseInt(rangeSplit[1]);
                Range newRange=null;
                if (rangeCnt == 0) {
                  sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
                  sa.addRole(role);
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,MULTIRANGETYPE,GBCONVPREFIX),multiType);
                  sa.addAnnotation(annotation);
                  newRange=(Range)sa.getLocation(""String_Node_Str"" + rangeCnt);
                }
 else                 if (sa != null) {
                  newRange=sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
                }
                if (outerComplement) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + ((ranges.length - 1) - rangeCnt));
                }
 else {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + rangeCnt);
                }
                newRange.addAnnotation(annotation);
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                rangeCnt++;
              }
            }
 else             if (range.contains(""String_Node_Str"")) {
              String[] rangeSplit=range.split(""String_Node_Str"");
              int at=Integer.parseInt(rangeSplit[0]);
              SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
              sa.addRole(role);
            }
 else {
              boolean startLessThan=false;
              boolean endGreaterThan=false;
              if (range.contains(""String_Node_Str"")) {
                startLessThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              if (range.contains(""String_Node_Str"")) {
                endGreaterThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean singleBaseRange=false;
              String[] rangeSplit=null;
              if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                rangeSplit=range.split(""String_Node_Str"");
                singleBaseRange=true;
              }
 else {
                rangeSplit=range.split(""String_Node_Str"");
              }
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[0]);
              if (rangeSplit.length > 1) {
                end=Integer.parseInt(rangeSplit[1]);
              }
              if (start > end && circular) {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,baseCount,orientation);
                sa.addRole(role);
                annotation=new Annotation(new QName(GBCONVNAMESPACE,STRADLESORIGIN,GBCONVPREFIX),""String_Node_Str"");
                sa.addAnnotation(annotation);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                newRange=sa.addRange(""String_Node_Str"",1,end,orientation);
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
 else {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
                sa.addRole(role);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
            }
            featureCnt++;
          }
        }
 else         if (originMode) {
          if (elements == null) {
            elements=new String(""String_Node_Str"");
          }
          if (strLine.startsWith(""String_Node_Str"")) {
            cont=true;
            break;
          }
          String[] strSplit=strLine.split(""String_Node_Str"");
          for (int i=1; i < strSplit.length; i++) {
            sbSequence.append(strSplit[i]);
          }
        }
        cont=false;
      }
    }
    if (topCD != null) {
      Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,sbSequence.toString(),Sequence.IUPAC_DNA);
      topCD.addSequence(sequence);
      createSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);
    }
    if (!cont)     break;
  }
  br.close();
}","/** 
 * @param doc
 * @param stringBuffer
 * @param URIPrefix
 * @throws IOException
 * @throws SBOLConversionException
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the following methods:<ul> <li> {@link SBOLDocument#createComponentDefinition(String,String,URI)},</li> <li>  {@link Identified#setAnnotations(List)},</li> <li>  {@link SequenceAnnotation#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,int,OrientationType)},</li> <li>  {@link SequenceAnnotation#setComponent(String)},</li> <li>  {@link SequenceAnnotation#addRange(String,int,int,OrientationType)},</li> <li>  {@link Range#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,OrientationType)},</li> <li>  {@link SBOLDocument#createSequence(String,String,String,URI)}, </li> <li>  {@link ComponentDefinition#addSequence(Sequence)}, or </li> <li>  {@link #createSubComponentDefinitions(SBOLDocument,ComponentDefinition,URI,String,String)}.</li> </ul>
 */
static void read(SBOLDocument doc,String stringBuffer,String URIPrefix) throws IOException, SBOLConversionException, SBOLValidationException {
  so=new SequenceOntology();
  doc.addNamespace(URI.create(GBNAMESPACE),GBPREFIX);
  doc.addNamespace(URI.create(GBCONVNAMESPACE),GBCONVPREFIX);
  BufferedReader br=new BufferedReader(new StringReader(stringBuffer));
  String strLine;
  int featureCnt=0;
  int refCnt=0;
  nextLine=null;
  while (true) {
    boolean cont=false;
    String id=""String_Node_Str"";
    String version=""String_Node_Str"";
    featureMode=false;
    originMode=false;
    StringBuilder sbSequence=new StringBuilder();
    String elements=null;
    String description=""String_Node_Str"";
    URI type=ComponentDefinition.DNA;
    ComponentDefinition topCD=null;
    List<Annotation> annotations=new ArrayList<Annotation>();
    List<Annotation> nestedAnnotations=null;
    Annotation annotation=null;
    boolean circular=false;
    int baseCount=0;
    while ((strLine=readGenBankLine(br)) != null) {
      strLine=strLine.trim();
      if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        id=strSplit[1];
        annotation=new Annotation(new QName(GBNAMESPACE,LOCUS,GBPREFIX),strSplit[1]);
        annotations.add(annotation);
        baseCount=Integer.parseInt(strSplit[2]);
        if (strSplit[4].toUpperCase().contains(""String_Node_Str"")) {
          type=ComponentDefinition.RNA;
        }
        annotation=new Annotation(new QName(GBNAMESPACE,MOLECULE,GBPREFIX),strSplit[4]);
        annotations.add(annotation);
        for (int i=5; i < strSplit.length; i++) {
          if (strSplit[i].startsWith(""String_Node_Str"") || strSplit[i].startsWith(""String_Node_Str"")) {
            if (strSplit[i].startsWith(""String_Node_Str""))             circular=true;
          }
 else           if (strSplit[i].length() == 3) {
            annotation=new Annotation(new QName(GBNAMESPACE,DIVISION,GBPREFIX),strSplit[i]);
          }
 else {
            annotation=new Annotation(new QName(GBNAMESPACE,DATE,GBPREFIX),strSplit[i]);
          }
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        String accession=strSplit[1];
        id=accession;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        id=URIcompliance.fixDisplayId(id);
        if (!id.equals(URIcompliance.fixDisplayId(strSplit[1]))) {
          if (strSplit[1].split(""String_Node_Str"").length > 1) {
            version=strSplit[1].split(""String_Node_Str"")[strSplit[1].split(""String_Node_Str"").length - 1];
          }
          String vId=URIcompliance.fixDisplayId(strSplit[1].split(""String_Node_Str"")[0]);
          if (!id.equals(vId)) {
            throw new SBOLConversionException(""String_Node_Str"");
          }
        }
        if (strSplit.length > 2) {
          annotation=new Annotation(new QName(GBNAMESPACE,GINUMBER,GBPREFIX),strSplit[2]);
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,KEYWORDS,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,SOURCE,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,ORGANISM,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        nestedAnnotations=new ArrayList<Annotation>();
        Annotation labelAnnotation=new Annotation(new QName(GBNAMESPACE,LABEL,GBPREFIX),annotationStr);
        nestedAnnotations.add(labelAnnotation);
        URI nestedURI=URI.create(URIPrefix + id + ""String_Node_Str""+ refCnt);
        refCnt++;
        annotation=new Annotation(new QName(GBNAMESPACE,REFERENCE,GBPREFIX),new QName(GBNAMESPACE,NESTEDREFERENCE,GBPREFIX),nestedURI,nestedAnnotations);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,AUTHORS,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,TITLE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,JOURNAL,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,MEDLINE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,PUBMED,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
        Annotation pubMedAnnotation=new Annotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),annotationStr);
        annotations.add(pubMedAnnotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,COMMENT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,BASECOUNT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        topCD=doc.createComponentDefinition(id,version,type);
        if (circular) {
          topCD.addType(SequenceOntology.CIRCULAR);
        }
 else {
          topCD.addType(SequenceOntology.LINEAR);
        }
        topCD.addRole(SequenceOntology.ENGINEERED_REGION);
        if (!""String_Node_Str"".equals(description)) {
          topCD.setDescription(description);
        }
        topCD.setAnnotations(annotations);
        featureMode=true;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        originMode=true;
        featureMode=false;
      }
 else {
        if (featureMode) {
          if (strLine.startsWith(""String_Node_Str"")) {
            String tag=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
            String value=""String_Node_Str"";
            if ((-1) != strLine.indexOf('=')) {
              String[] splitStr=strLine.split(""String_Node_Str"");
              tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
              value=splitStr[1];
            }
            StringBuilder sbValue=new StringBuilder();
            sbValue.append(value);
            if (value.startsWith(""String_Node_Str"") && !value.endsWith(""String_Node_Str"")) {
              while (true) {
                strLine=readGenBankLine(br).trim();
                sbValue.append(strLine);
                if (strLine.endsWith(""String_Node_Str"")) {
                  break;
                }
              }
            }
            SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
            if (null != sa) {
              if (value.startsWith(""String_Node_Str"")) {
                value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
 else {
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
              sa.addAnnotation(annotation);
            }
          }
 else {
            strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
            String[] strSplit=strLine.split(""String_Node_Str"");
            URI role=convertGenBanktoSO(strSplit[0]);
            String range=strSplit[1];
            boolean outerComplement=false;
            OrientationType orientation=OrientationType.INLINE;
            if (range.startsWith(""String_Node_Str"")) {
              outerComplement=true;
              orientation=OrientationType.REVERSECOMPLEMENT;
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            }
            if (range.startsWith(""String_Node_Str"") || range.startsWith(""String_Node_Str"")) {
              String multiType=""String_Node_Str"";
              if (range.startsWith(""String_Node_Str"")) {
                multiType=""String_Node_Str"";
              }
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              String[] ranges=range.split(""String_Node_Str"");
              int rangeCnt=0;
              SequenceAnnotation sa=null;
              for (              String r : ranges) {
                orientation=OrientationType.INLINE;
                if (r.startsWith(""String_Node_Str"") || outerComplement) {
                  orientation=OrientationType.REVERSECOMPLEMENT;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean startLessThan=false;
                boolean endGreaterThan=false;
                if (r.contains(""String_Node_Str"")) {
                  startLessThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                if (r.contains(""String_Node_Str"")) {
                  endGreaterThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean singleBaseRange=false;
                String[] rangeSplit=null;
                if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                  rangeSplit=r.split(""String_Node_Str"");
                  singleBaseRange=true;
                }
 else {
                  rangeSplit=r.split(""String_Node_Str"");
                }
                int start=Integer.parseInt(rangeSplit[0]);
                int end=Integer.parseInt(rangeSplit[1]);
                Range newRange=null;
                if (rangeCnt == 0) {
                  sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
                  sa.addRole(role);
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,MULTIRANGETYPE,GBCONVPREFIX),multiType);
                  sa.addAnnotation(annotation);
                  newRange=(Range)sa.getLocation(""String_Node_Str"" + rangeCnt);
                }
 else                 if (sa != null) {
                  newRange=sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
                }
                if (outerComplement) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + ((ranges.length - 1) - rangeCnt));
                }
 else {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + rangeCnt);
                }
                newRange.addAnnotation(annotation);
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                rangeCnt++;
              }
            }
 else             if (range.contains(""String_Node_Str"")) {
              String[] rangeSplit=range.split(""String_Node_Str"");
              int at=Integer.parseInt(rangeSplit[0]);
              SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
              sa.addRole(role);
            }
 else {
              boolean startLessThan=false;
              boolean endGreaterThan=false;
              if (range.contains(""String_Node_Str"")) {
                startLessThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              if (range.contains(""String_Node_Str"")) {
                endGreaterThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean singleBaseRange=false;
              String[] rangeSplit=null;
              if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                rangeSplit=range.split(""String_Node_Str"");
                singleBaseRange=true;
              }
 else {
                rangeSplit=range.split(""String_Node_Str"");
              }
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[0]);
              if (rangeSplit.length > 1) {
                end=Integer.parseInt(rangeSplit[1]);
              }
              if (start > end && circular) {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,baseCount,orientation);
                sa.addRole(role);
                annotation=new Annotation(new QName(GBCONVNAMESPACE,STRADLESORIGIN,GBCONVPREFIX),""String_Node_Str"");
                sa.addAnnotation(annotation);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                newRange=sa.addRange(""String_Node_Str"",1,end,orientation);
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
 else {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
                sa.addRole(role);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
            }
            featureCnt++;
          }
        }
 else         if (originMode) {
          if (elements == null) {
            elements=new String(""String_Node_Str"");
          }
          if (strLine.startsWith(""String_Node_Str"")) {
            cont=true;
            break;
          }
          String[] strSplit=strLine.split(""String_Node_Str"");
          for (int i=1; i < strSplit.length; i++) {
            sbSequence.append(strSplit[i]);
          }
        }
        cont=false;
      }
    }
    if (topCD != null) {
      Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,sbSequence.toString(),Sequence.IUPAC_DNA);
      topCD.addSequence(sequence);
      createSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);
    }
    if (!cont)     break;
  }
  br.close();
}",0.9990813983158968
12471,"public static void main(String[] args){
  try {
    SBOLDocument doc2=new SBOLDocument();
    doc2.setDefaultURIprefix(""String_Node_Str"");
    doc2.setComplete(true);
    SynBioHubFrontend sfe=doc2.addRegistry(""String_Node_Str"",""String_Node_Str"");
    HashSet<URI> collections=new HashSet<URI>();
    collections.add(URI.create(""String_Node_Str""));
    System.out.println(sfe.getMatchingComponentDefinitionMetadata(null,null,null,collections,0,10));
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    SBOLReader.setURIPrefix(""String_Node_Str"");
    SBOLDocument doc3=SBOLReader.read(""String_Node_Str"");
    doc3.write(System.out);
    SBOLDocument doc2=new SBOLDocument();
    doc2.setDefaultURIprefix(""String_Node_Str"");
    doc2.setComplete(true);
    SynBioHubFrontend sfe=doc2.addRegistry(""String_Node_Str"",""String_Node_Str"");
    HashSet<URI> collections=new HashSet<URI>();
    collections.add(URI.create(""String_Node_Str""));
    System.out.println(sfe.getMatchingComponentDefinitionMetadata(null,null,null,collections,0,10));
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}",0.8836805555555556
12472,"/** 
 * @param document
 * @param topLevel
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in {@link SBOLDocument#createCopy(TopLevel)}.
 */
private void createRecursiveCopy(SBOLDocument document,TopLevel topLevel) throws SBOLValidationException {
  if (document.getTopLevel(topLevel.getIdentity()) != null)   return;
  for (  Annotation annotation : topLevel.getAnnotations()) {
    if (annotation.isURIValue()) {
      TopLevel gtl=getTopLevel(annotation.getURIValue());
      if (gtl != null)       createRecursiveCopy(document,gtl);
    }
 else     if (annotation.isNestedAnnotations()) {
      for (      Annotation nestedAnnotation : annotation.getAnnotations()) {
        createRecursiveCopy(document,nestedAnnotation);
      }
    }
  }
  if (topLevel instanceof GenericTopLevel || topLevel instanceof Sequence || topLevel instanceof Model) {
    document.createCopy(topLevel);
  }
 else   if (topLevel instanceof Collection) {
    for (    TopLevel member : ((Collection)topLevel).getMembers()) {
      createRecursiveCopy(document,member);
    }
    document.createCopy(topLevel);
  }
 else   if (topLevel instanceof ComponentDefinition) {
    for (    Component component : ((ComponentDefinition)topLevel).getComponents()) {
      if (component.getDefinition() != null) {
        createRecursiveCopy(document,component.getDefinition());
      }
    }
    for (    TopLevel sequence : ((ComponentDefinition)topLevel).getSequences()) {
      createRecursiveCopy(document,sequence);
    }
    document.createCopy(topLevel);
  }
 else   if (topLevel instanceof ModuleDefinition) {
    for (    FunctionalComponent functionalComponent : ((ModuleDefinition)topLevel).getFunctionalComponents()) {
      if (functionalComponent.getDefinition() != null) {
        createRecursiveCopy(document,functionalComponent.getDefinition());
      }
    }
    for (    Module module : ((ModuleDefinition)topLevel).getModules()) {
      if (module.getDefinition() != null) {
        createRecursiveCopy(document,module.getDefinition());
      }
    }
    for (    Model model : ((ModuleDefinition)topLevel).getModels()) {
      if (document.getModel(model.getIdentity()) != null)       continue;
      document.createCopy(model);
    }
    document.createCopy(topLevel);
  }
}","/** 
 * @param document
 * @param topLevel
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in {@link SBOLDocument#createCopy(TopLevel)}.
 */
private void createRecursiveCopy(SBOLDocument document,TopLevel topLevel) throws SBOLValidationException {
  if (document.getTopLevel(topLevel.getIdentity()) != null)   return;
  if (topLevel instanceof GenericTopLevel || topLevel instanceof Sequence || topLevel instanceof Model) {
    document.createCopy(topLevel);
  }
 else   if (topLevel instanceof Collection) {
    for (    TopLevel member : ((Collection)topLevel).getMembers()) {
      createRecursiveCopy(document,member);
    }
    document.createCopy(topLevel);
  }
 else   if (topLevel instanceof ComponentDefinition) {
    for (    Component component : ((ComponentDefinition)topLevel).getComponents()) {
      if (component.getDefinition() != null) {
        createRecursiveCopy(document,component.getDefinition());
      }
    }
    for (    TopLevel sequence : ((ComponentDefinition)topLevel).getSequences()) {
      createRecursiveCopy(document,sequence);
    }
    document.createCopy(topLevel);
  }
 else   if (topLevel instanceof ModuleDefinition) {
    for (    FunctionalComponent functionalComponent : ((ModuleDefinition)topLevel).getFunctionalComponents()) {
      if (functionalComponent.getDefinition() != null) {
        createRecursiveCopy(document,functionalComponent.getDefinition());
      }
    }
    for (    Module module : ((ModuleDefinition)topLevel).getModules()) {
      if (module.getDefinition() != null) {
        createRecursiveCopy(document,module.getDefinition());
      }
    }
    for (    Model model : ((ModuleDefinition)topLevel).getModels()) {
      if (document.getModel(model.getIdentity()) != null)       continue;
      document.createCopy(model);
    }
    document.createCopy(topLevel);
  }
  for (  Annotation annotation : topLevel.getAnnotations()) {
    if (annotation.isURIValue()) {
      TopLevel gtl=getTopLevel(annotation.getURIValue());
      if (gtl != null)       createRecursiveCopy(document,gtl);
    }
 else     if (annotation.isNestedAnnotations()) {
      for (      Annotation nestedAnnotation : annotation.getAnnotations()) {
        createRecursiveCopy(document,nestedAnnotation);
      }
    }
  }
}",0.3388429752066115
12473,"/** 
 * @param SBOLDoc
 * @param topLevel
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10202, 10203, 10204, 10206, 10208, 10212, 10213, 12102; or</li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link GenericTopLevel#GenericTopLevel(URI,QName)}, </li> <li>  {@link GenericTopLevel#setDisplayId(String)}, </li> <li>  {@link GenericTopLevel#setVersion(String)}, </li> <li>  {@link GenericTopLevel#setWasDerivedFrom(URI)}, </li> <li>  {@link Identified#setAnnotations(List)}, or</li> <li>  {@link SBOLDocument#addGenericTopLevel(GenericTopLevel)}.</li> </ul> </li> </ul>
 */
private static GenericTopLevel parseGenericTopLevel(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  URI wasDerivedFrom=null;
  QName type=topLevel.getType();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Description.type)) {
      String typeStr=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      String nameSpace=URIcompliance.extractURIprefix(URI.create(typeStr)) + ""String_Node_Str"";
      String localPart=URIcompliance.extractDisplayId(URI.create(typeStr));
      String prefix=SBOLDoc.getNamespace(URI.create(nameSpace)).getPrefix();
      type=new QName(nameSpace,localPart,prefix);
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  GenericTopLevel t=new GenericTopLevel(topLevel.getIdentity(),type);
  if (persistentIdentity != null)   t.setPersistentIdentity(persistentIdentity);
  if (version != null)   t.setVersion(version);
  if (displayId != null)   t.setDisplayId(displayId);
  if (name != null)   t.setName(name);
  if (description != null)   t.setDescription(description);
  if (wasDerivedFrom != null)   t.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   t.setAnnotations(annotations);
  GenericTopLevel oldG=SBOLDoc.getGenericTopLevel(topLevel.getIdentity());
  if (oldG == null) {
    SBOLDoc.addGenericTopLevel(t);
  }
 else {
    if (!t.equals(oldG)) {
      throw new SBOLValidationException(""String_Node_Str"",t);
    }
  }
  return t;
}","/** 
 * @param SBOLDoc
 * @param topLevel
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10202, 10203, 10204, 10206, 10208, 10212, 10213, 12102; or</li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link GenericTopLevel#GenericTopLevel(URI,QName)}, </li> <li>  {@link GenericTopLevel#setDisplayId(String)}, </li> <li>  {@link GenericTopLevel#setVersion(String)}, </li> <li>  {@link GenericTopLevel#setWasDerivedFrom(URI)}, </li> <li>  {@link Identified#setAnnotations(List)}, or</li> <li>  {@link SBOLDocument#addGenericTopLevel(GenericTopLevel)}.</li> </ul> </li> </ul>
 */
private static GenericTopLevel parseGenericTopLevel(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  URI wasDerivedFrom=null;
  QName type=topLevel.getType();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Description.type)) {
      String typeStr=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      String nameSpace=URIcompliance.extractNamespace(URI.create(typeStr));
      String localPart=URIcompliance.extractDisplayId(URI.create(typeStr));
      String prefix=SBOLDoc.getNamespace(URI.create(nameSpace)).getPrefix();
      type=new QName(nameSpace,localPart,prefix);
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  GenericTopLevel t=new GenericTopLevel(topLevel.getIdentity(),type);
  if (persistentIdentity != null)   t.setPersistentIdentity(persistentIdentity);
  if (version != null)   t.setVersion(version);
  if (displayId != null)   t.setDisplayId(displayId);
  if (name != null)   t.setName(name);
  if (description != null)   t.setDescription(description);
  if (wasDerivedFrom != null)   t.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   t.setAnnotations(annotations);
  GenericTopLevel oldG=SBOLDoc.getGenericTopLevel(topLevel.getIdentity());
  if (oldG == null) {
    SBOLDoc.addGenericTopLevel(t);
  }
 else {
    if (!t.equals(oldG)) {
      throw new SBOLValidationException(""String_Node_Str"",t);
    }
  }
  return t;
}",0.9924704924704923
12474,"public static void main(String[] args) throws Exception {
  String prURI=""String_Node_Str"";
  String prPrefix=""String_Node_Str"";
  SBOLDocument document=new SBOLDocument();
  document.setTypesInURIs(true);
  document.addNamespace(URI.create(prURI),prPrefix);
  document.setDefaultURIprefix(prURI);
  Sequence seqpTetR=document.createSequence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",URI.create(""String_Node_Str""));
  Sequence seqRbs=document.createSequence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",URI.create(""String_Node_Str""));
  Sequence seqCds=document.createSequence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",URI.create(""String_Node_Str""));
  Sequence seqTer=document.createSequence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",URI.create(""String_Node_Str""));
  Sequence seqPluxR=document.createSequence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",URI.create(""String_Node_Str""));
  ComponentDefinition pTetR=document.createComponentDefinition(""String_Node_Str"",""String_Node_Str"",new HashSet<URI>(Arrays.asList(ComponentDefinition.DNA)));
  pTetR.addRole(SequenceOntology.PROMOTER);
  pTetR.setName(""String_Node_Str"");
  pTetR.setDescription(""String_Node_Str"");
  pTetR.addSequence(seqpTetR.getIdentity());
  ComponentDefinition rbs=document.createComponentDefinition(""String_Node_Str"",""String_Node_Str"",new HashSet<URI>(Arrays.asList(ComponentDefinition.DNA)));
  rbs.addRole(SequenceOntology.RIBOSOME_ENTRY_SITE);
  rbs.setName(""String_Node_Str"");
  rbs.setDescription(""String_Node_Str"");
  rbs.addSequence(seqRbs.getIdentity());
  ComponentDefinition cds=document.createComponentDefinition(""String_Node_Str"",""String_Node_Str"",new HashSet<URI>(Arrays.asList(ComponentDefinition.DNA)));
  cds.addRole(SequenceOntology.CDS);
  cds.setName(""String_Node_Str"");
  cds.setDescription(""String_Node_Str"");
  cds.addSequence(seqCds.getIdentity());
  ComponentDefinition ter=document.createComponentDefinition(""String_Node_Str"",""String_Node_Str"",new HashSet<URI>(Arrays.asList(ComponentDefinition.DNA)));
  ter.addRole(URI.create(""String_Node_Str""));
  ter.setName(""String_Node_Str"");
  ter.setDescription(""String_Node_Str"");
  ter.addSequence(seqTer.getIdentity());
  ComponentDefinition pluxR=document.createComponentDefinition(""String_Node_Str"",""String_Node_Str"",new HashSet<URI>(Arrays.asList(ComponentDefinition.DNA)));
  pluxR.addRole(SequenceOntology.PROMOTER);
  pluxR.setName(""String_Node_Str"");
  pluxR.setDescription(""String_Node_Str"");
  pluxR.addSequence(seqPluxR.getIdentity());
  ComponentDefinition device=document.createComponentDefinition(""String_Node_Str"",""String_Node_Str"",new HashSet<URI>(Arrays.asList(ComponentDefinition.DNA)));
  device.addRole(URI.create(""String_Node_Str""));
  device.setName(""String_Node_Str"");
  device.setDescription(""String_Node_Str"");
  Component comPtetR=device.createComponent(""String_Node_Str"",AccessType.PUBLIC,pTetR.getIdentity());
  Component comRbs=device.createComponent(""String_Node_Str"",AccessType.PUBLIC,rbs.getIdentity());
  Component comCds=device.createComponent(""String_Node_Str"",AccessType.PUBLIC,cds.getIdentity());
  Component comTer=device.createComponent(""String_Node_Str"",AccessType.PUBLIC,ter.getIdentity());
  Component comPluxR=device.createComponent(""String_Node_Str"",AccessType.PUBLIC,pluxR.getIdentity());
  int start=1;
  int end=seqPluxR.getElements().length();
  SequenceAnnotation anno=device.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"",start,end,OrientationType.INLINE);
  anno.setComponent(comPtetR.getIdentity());
  start=end + 1;
  end=seqRbs.getElements().length() + end + 1;
  SequenceAnnotation anno2=device.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"",start,end,OrientationType.INLINE);
  anno2.setComponent(comRbs.getIdentity());
  start=end + 1;
  end=seqCds.getElements().length() + end + 1;
  SequenceAnnotation anno3=device.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"",start,end,OrientationType.INLINE);
  anno3.setComponent(comCds.getIdentity());
  start=end + 1;
  end=seqTer.getElements().length() + end + 1;
  SequenceAnnotation anno4=device.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"",start,end,OrientationType.INLINE);
  anno4.setComponent(comTer.getIdentity());
  start=end + 1;
  end=seqPluxR.getElements().length() + end + 1;
  SequenceAnnotation anno5=device.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"",start,end,OrientationType.INLINE);
  anno5.setComponent(comPluxR.getIdentity());
  SBOLWriter.write(document,(System.out));
}","public static void main(String[] args) throws Exception {
  SBOLDocument document=createComponentDefinitionOutput();
  SBOLWriter.write(document,(System.out));
}",0.0664409648751587
12475,"/** 
 * Removes the given namespace URI from this SBOL document's list of namespaces.
 * @param namespaceURI the namespaceURI to be removed
 */
public void removeNamespace(URI namespaceURI){
  if (isRequiredNamespaceBinding(namespaceURI)) {
    throw new IllegalStateException(""String_Node_Str"" + namespaceURI.toString());
  }
  nameSpaces.remove(namespaceURI.toString());
}","/** 
 * Removes the given namespace URI from this SBOL document's list of namespaces.
 * @param namespaceURI the namespaceURI to be removed
 */
public void removeNamespace(URI namespaceURI){
  if (isRequiredNamespaceBinding(namespaceURI)) {
    throw new IllegalStateException(""String_Node_Str"" + namespaceURI.toString());
  }
  String prefix=getNamespace(namespaceURI).getPrefix();
  nameSpaces.remove(prefix);
}",0.8513341804320204
12476,"/** 
 * Removes all non-required namespaces from this SBOL document. <p> This method calls   {@link #removeNamespace(URI)} to iteratively remove each non-required namespace.
 */
public void clearNamespaces(){
  Object[] keySetArray=nameSpaces.keySet().toArray();
  for (  Object key : keySetArray) {
    if (isRequiredNamespaceBinding(URI.create((String)key)))     continue;
    removeNamespace(URI.create((String)key));
  }
}","/** 
 * Removes all non-required namespaces from this SBOL document. <p> This method calls   {@link #removeNamespace(URI)} to iteratively remove each non-required namespace.
 */
public void clearNamespaces(){
  Object[] keySetArray=nameSpaces.keySet().toArray();
  for (  Object key : keySetArray) {
    if (isRequiredNamespaceBinding(URI.create((String)key)))     continue;
    nameSpaces.remove((String)key);
  }
}",0.9501187648456056
12477,"/** 
 * @param SBOLDoc
 * @param topLevel
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10202, 10203, 10204, 10206, 10208, 10212, 10213, 12102; or</li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link GenericTopLevel#GenericTopLevel(URI,QName)}, </li> <li>  {@link GenericTopLevel#setDisplayId(String)}, </li> <li>  {@link GenericTopLevel#setVersion(String)}, </li> <li>  {@link GenericTopLevel#setWasDerivedFrom(URI)}, </li> <li>  {@link Identified#setAnnotations(List)}, or</li> <li>  {@link SBOLDocument#addGenericTopLevel(GenericTopLevel)}.</li> </ul> </li> </ul>
 */
private static GenericTopLevel parseGenericTopLevel(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  URI wasDerivedFrom=null;
  QName type=topLevel.getType();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Description.type)) {
      String typeStr=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      String nameSpace=URIcompliance.extractNamespace(URI.create(typeStr));
      String localPart=URIcompliance.extractDisplayId(URI.create(typeStr));
      String prefix=SBOLDoc.getNamespace(URI.create(nameSpace)).getPrefix();
      type=new QName(nameSpace,localPart,prefix);
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  GenericTopLevel t=new GenericTopLevel(topLevel.getIdentity(),type);
  if (persistentIdentity != null)   t.setPersistentIdentity(persistentIdentity);
  if (version != null)   t.setVersion(version);
  if (displayId != null)   t.setDisplayId(displayId);
  if (name != null)   t.setName(name);
  if (description != null)   t.setDescription(description);
  if (wasDerivedFrom != null)   t.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   t.setAnnotations(annotations);
  GenericTopLevel oldG=SBOLDoc.getGenericTopLevel(topLevel.getIdentity());
  if (oldG == null) {
    SBOLDoc.addGenericTopLevel(t);
  }
 else {
    if (!t.equals(oldG)) {
      throw new SBOLValidationException(""String_Node_Str"",t);
    }
  }
  return t;
}","/** 
 * @param SBOLDoc
 * @param topLevel
 * @return
 * @throws SBOLValidationException if either of the following conditions is satisfied:<ul> <li>any of the following SBOL validation rules was violated:  10202, 10203, 10204, 10206, 10208, 10212, 10213, 12102; or</li> <li>an SBOL validation rule violation occurred in the following constructor or methods: <ul> <li> {@link GenericTopLevel#GenericTopLevel(URI,QName)}, </li> <li>  {@link GenericTopLevel#setDisplayId(String)}, </li> <li>  {@link GenericTopLevel#setVersion(String)}, </li> <li>  {@link GenericTopLevel#setWasDerivedFrom(URI)}, </li> <li>  {@link Identified#setAnnotations(List)}, or</li> <li>  {@link SBOLDocument#addGenericTopLevel(GenericTopLevel)}.</li> </ul> </li> </ul>
 */
private static GenericTopLevel parseGenericTopLevel(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  URI wasDerivedFrom=null;
  QName type=topLevel.getType();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Description.type)) {
      String typeStr=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      String nameSpace=URIcompliance.extractNamespace(URI.create(typeStr));
      String localPart=URIcompliance.extractDisplayId(URI.create(typeStr));
      String prefix=SBOLDoc.getNamespacePrefix(URI.create(nameSpace));
      type=new QName(nameSpace,localPart,prefix);
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(namedProperty.getValue() instanceof Literal) || (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI))) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  GenericTopLevel t=new GenericTopLevel(topLevel.getIdentity(),type);
  if (persistentIdentity != null)   t.setPersistentIdentity(persistentIdentity);
  if (version != null)   t.setVersion(version);
  if (displayId != null)   t.setDisplayId(displayId);
  if (name != null)   t.setName(name);
  if (description != null)   t.setDescription(description);
  if (wasDerivedFrom != null)   t.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   t.setAnnotations(annotations);
  GenericTopLevel oldG=SBOLDoc.getGenericTopLevel(topLevel.getIdentity());
  if (oldG == null) {
    SBOLDoc.addGenericTopLevel(t);
  }
 else {
    if (!t.equals(oldG)) {
      throw new SBOLValidationException(""String_Node_Str"",t);
    }
  }
  return t;
}",0.9981636400734544
12478,"public static void main(String[] args){
  try {
    SBOLDocument doc2=new SBOLDocument();
    doc2.setDefaultURIprefix(""String_Node_Str"");
    SynBioHubFrontend sfe=doc2.addRegistry(""String_Node_Str"",""String_Node_Str"");
    System.out.println(sfe.getRootCollectionMetadata());
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    SBOLDocument doc=SBOLReader.read(""String_Node_Str"");
    doc.write(System.out);
    SBOLDocument doc2=new SBOLDocument();
    doc2.setDefaultURIprefix(""String_Node_Str"");
    SynBioHubFrontend sfe=doc2.addRegistry(""String_Node_Str"",""String_Node_Str"");
    System.out.println(sfe.getRootCollectionMetadata());
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}",0.8809523809523809
12479,"/** 
 * @param doc
 * @param stringBuffer
 * @param URIPrefix
 * @throws IOException
 * @throws SBOLConversionException
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the following methods:<ul> <li> {@link SBOLDocument#createComponentDefinition(String,String,URI)},</li> <li>  {@link Identified#setAnnotations(List)},</li> <li>  {@link SequenceAnnotation#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,int,OrientationType)},</li> <li>  {@link SequenceAnnotation#setComponent(String)},</li> <li>  {@link SequenceAnnotation#addRange(String,int,int,OrientationType)},</li> <li>  {@link Range#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,OrientationType)},</li> <li>  {@link SBOLDocument#createSequence(String,String,String,URI)}, </li> <li>  {@link ComponentDefinition#addSequence(Sequence)}, or </li> <li>  {@link #createSubComponentDefinitions(SBOLDocument,ComponentDefinition,URI,String,String)}.</li> </ul>
 */
static void read(SBOLDocument doc,String stringBuffer,String URIPrefix) throws IOException, SBOLConversionException, SBOLValidationException {
  so=new SequenceOntology();
  doc.addNamespace(URI.create(GBNAMESPACE),GBPREFIX);
  BufferedReader br=new BufferedReader(new StringReader(stringBuffer));
  String strLine;
  int featureCnt=0;
  int refCnt=0;
  while (true) {
    boolean cont=false;
    String id=""String_Node_Str"";
    String version=""String_Node_Str"";
    nextLine=null;
    featureMode=false;
    originMode=false;
    StringBuilder sbSequence=new StringBuilder();
    String elements=null;
    String description=""String_Node_Str"";
    URI type=ComponentDefinition.DNA;
    ComponentDefinition topCD=null;
    List<Annotation> annotations=new ArrayList<Annotation>();
    List<Annotation> nestedAnnotations=null;
    Annotation annotation=null;
    boolean circular=false;
    int baseCount=0;
    while ((strLine=readGenBankLine(br)) != null) {
      strLine=strLine.trim();
      if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        id=strSplit[1];
        annotation=new Annotation(new QName(GBNAMESPACE,LOCUS,GBPREFIX),strSplit[1]);
        annotations.add(annotation);
        baseCount=Integer.parseInt(strSplit[2]);
        if (strSplit[4].toUpperCase().contains(""String_Node_Str"")) {
          type=ComponentDefinition.RNA;
        }
        annotation=new Annotation(new QName(GBNAMESPACE,MOLECULE,GBPREFIX),strSplit[4]);
        annotations.add(annotation);
        for (int i=5; i < strSplit.length; i++) {
          if (strSplit[i].startsWith(""String_Node_Str"") || strSplit[i].startsWith(""String_Node_Str"")) {
            if (strSplit[i].startsWith(""String_Node_Str""))             circular=true;
          }
 else           if (strSplit[i].length() == 3) {
            annotation=new Annotation(new QName(GBNAMESPACE,DIVISION,GBPREFIX),strSplit[i]);
          }
 else {
            annotation=new Annotation(new QName(GBNAMESPACE,DATE,GBPREFIX),strSplit[i]);
          }
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        String accession=strSplit[1];
        id=accession;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        if (strSplit[1].split(""String_Node_Str"").length > 1) {
          version=strSplit[1].split(""String_Node_Str"")[1];
        }
        if (!id.equals(strSplit[1]) && !id.equals(strSplit[1].split(""String_Node_Str"")[0])) {
          throw new SBOLConversionException(""String_Node_Str"");
        }
        id=id.replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (strSplit.length > 2) {
          annotation=new Annotation(new QName(GBNAMESPACE,GINUMBER,GBPREFIX),strSplit[2]);
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,KEYWORDS,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,SOURCE,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,ORGANISM,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        nestedAnnotations=new ArrayList<Annotation>();
        Annotation labelAnnotation=new Annotation(new QName(GBNAMESPACE,LABEL,GBPREFIX),annotationStr);
        nestedAnnotations.add(labelAnnotation);
        URI nestedURI=URI.create(URIPrefix + id + ""String_Node_Str""+ refCnt);
        refCnt++;
        annotation=new Annotation(new QName(GBNAMESPACE,REFERENCE,GBPREFIX),new QName(GBNAMESPACE,NESTEDREFERENCE,GBPREFIX),nestedURI,nestedAnnotations);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,AUTHORS,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,TITLE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,JOURNAL,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,MEDLINE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,PUBMED,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,COMMENT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,BASECOUNT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        topCD=doc.createComponentDefinition(id,version,type);
        if (circular) {
          topCD.addType(SequenceOntology.CIRCULAR);
        }
 else {
          topCD.addType(SequenceOntology.LINEAR);
        }
        topCD.addRole(SequenceOntology.ENGINEERED_REGION);
        if (!""String_Node_Str"".equals(description)) {
          topCD.setDescription(description);
        }
        topCD.setAnnotations(annotations);
        featureMode=true;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        originMode=true;
        featureMode=false;
      }
 else {
        if (featureMode) {
          if (strLine.startsWith(""String_Node_Str"")) {
            String tag=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
            String value=""String_Node_Str"";
            if ((-1) != strLine.indexOf('=')) {
              String[] splitStr=strLine.split(""String_Node_Str"");
              tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
              value=splitStr[1];
            }
            StringBuilder sbValue=new StringBuilder();
            sbValue.append(value);
            if (value.startsWith(""String_Node_Str"") && !value.endsWith(""String_Node_Str"")) {
              while (true) {
                strLine=readGenBankLine(br).trim();
                sbValue.append(strLine);
                if (strLine.endsWith(""String_Node_Str"")) {
                  break;
                }
              }
            }
            SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
            if (null != sa) {
              annotation=new Annotation(new QName(GBNAMESPACE,tag,GBPREFIX),value);
              sa.addAnnotation(annotation);
            }
          }
 else {
            strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
            String[] strSplit=strLine.split(""String_Node_Str"");
            URI role=convertGenBanktoSO(strSplit[0]);
            String range=strSplit[1];
            boolean outerComplement=false;
            OrientationType orientation=OrientationType.INLINE;
            if (range.startsWith(""String_Node_Str"")) {
              outerComplement=true;
              orientation=OrientationType.REVERSECOMPLEMENT;
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            }
            if (range.startsWith(""String_Node_Str"") || range.startsWith(""String_Node_Str"")) {
              String multiType=""String_Node_Str"";
              if (range.startsWith(""String_Node_Str"")) {
                multiType=""String_Node_Str"";
              }
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              String[] ranges=range.split(""String_Node_Str"");
              int rangeCnt=0;
              SequenceAnnotation sa=null;
              for (              String r : ranges) {
                orientation=OrientationType.INLINE;
                if (r.startsWith(""String_Node_Str"") || outerComplement) {
                  orientation=OrientationType.REVERSECOMPLEMENT;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean startLessThan=false;
                boolean endGreaterThan=false;
                if (r.contains(""String_Node_Str"")) {
                  startLessThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                if (r.contains(""String_Node_Str"")) {
                  endGreaterThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean singleBaseRange=false;
                String[] rangeSplit=null;
                if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                  rangeSplit=r.split(""String_Node_Str"");
                  singleBaseRange=true;
                }
 else {
                  rangeSplit=r.split(""String_Node_Str"");
                }
                int start=Integer.parseInt(rangeSplit[0]);
                int end=Integer.parseInt(rangeSplit[1]);
                Range newRange=null;
                if (rangeCnt == 0) {
                  sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
                  sa.addRole(role);
                  annotation=new Annotation(new QName(GBNAMESPACE,MULTIRANGETYPE,GBPREFIX),multiType);
                  sa.addAnnotation(annotation);
                  newRange=(Range)sa.getLocation(""String_Node_Str"" + rangeCnt);
                }
 else                 if (sa != null) {
                  newRange=sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
                }
                if (outerComplement) {
                  annotation=new Annotation(new QName(GBNAMESPACE,POSITION,GBPREFIX),""String_Node_Str"" + ((ranges.length - 1) - rangeCnt));
                }
 else {
                  annotation=new Annotation(new QName(GBNAMESPACE,POSITION,GBPREFIX),""String_Node_Str"" + rangeCnt);
                }
                newRange.addAnnotation(annotation);
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                rangeCnt++;
              }
            }
 else             if (range.contains(""String_Node_Str"")) {
              String[] rangeSplit=range.split(""String_Node_Str"");
              int at=Integer.parseInt(rangeSplit[0]);
              SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
              sa.addRole(role);
            }
 else {
              boolean startLessThan=false;
              boolean endGreaterThan=false;
              if (range.contains(""String_Node_Str"")) {
                startLessThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              if (range.contains(""String_Node_Str"")) {
                endGreaterThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean singleBaseRange=false;
              String[] rangeSplit=null;
              if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                rangeSplit=range.split(""String_Node_Str"");
                singleBaseRange=true;
              }
 else {
                rangeSplit=range.split(""String_Node_Str"");
              }
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[0]);
              if (rangeSplit.length > 1) {
                end=Integer.parseInt(rangeSplit[1]);
              }
              if (start > end && circular) {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,baseCount,orientation);
                sa.addRole(role);
                annotation=new Annotation(new QName(GBNAMESPACE,STRADLESORIGIN,GBPREFIX),""String_Node_Str"");
                sa.addAnnotation(annotation);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                newRange=sa.addRange(""String_Node_Str"",1,end,orientation);
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
 else {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
                sa.addRole(role);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
            }
            featureCnt++;
          }
        }
 else         if (originMode) {
          if (elements == null) {
            elements=new String(""String_Node_Str"");
          }
          if (strLine.startsWith(""String_Node_Str"")) {
            cont=true;
            break;
          }
          String[] strSplit=strLine.split(""String_Node_Str"");
          for (int i=1; i < strSplit.length; i++) {
            sbSequence.append(strSplit[i]);
          }
        }
        cont=false;
      }
    }
    if (topCD != null) {
      Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,sbSequence.toString(),Sequence.IUPAC_DNA);
      topCD.addSequence(sequence);
      createSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);
    }
    if (!cont)     break;
  }
  br.close();
}","/** 
 * @param doc
 * @param stringBuffer
 * @param URIPrefix
 * @throws IOException
 * @throws SBOLConversionException
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the following methods:<ul> <li> {@link SBOLDocument#createComponentDefinition(String,String,URI)},</li> <li>  {@link Identified#setAnnotations(List)},</li> <li>  {@link SequenceAnnotation#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,int,OrientationType)},</li> <li>  {@link SequenceAnnotation#setComponent(String)},</li> <li>  {@link SequenceAnnotation#addRange(String,int,int,OrientationType)},</li> <li>  {@link Range#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,OrientationType)},</li> <li>  {@link SBOLDocument#createSequence(String,String,String,URI)}, </li> <li>  {@link ComponentDefinition#addSequence(Sequence)}, or </li> <li>  {@link #createSubComponentDefinitions(SBOLDocument,ComponentDefinition,URI,String,String)}.</li> </ul>
 */
static void read(SBOLDocument doc,String stringBuffer,String URIPrefix) throws IOException, SBOLConversionException, SBOLValidationException {
  so=new SequenceOntology();
  doc.addNamespace(URI.create(GBNAMESPACE),GBPREFIX);
  doc.addNamespace(URI.create(GBCONVNAMESPACE),GBCONVPREFIX);
  BufferedReader br=new BufferedReader(new StringReader(stringBuffer));
  String strLine;
  int featureCnt=0;
  int refCnt=0;
  while (true) {
    boolean cont=false;
    String id=""String_Node_Str"";
    String version=""String_Node_Str"";
    nextLine=null;
    featureMode=false;
    originMode=false;
    StringBuilder sbSequence=new StringBuilder();
    String elements=null;
    String description=""String_Node_Str"";
    URI type=ComponentDefinition.DNA;
    ComponentDefinition topCD=null;
    List<Annotation> annotations=new ArrayList<Annotation>();
    List<Annotation> nestedAnnotations=null;
    Annotation annotation=null;
    boolean circular=false;
    int baseCount=0;
    while ((strLine=readGenBankLine(br)) != null) {
      strLine=strLine.trim();
      if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        id=strSplit[1];
        annotation=new Annotation(new QName(GBNAMESPACE,LOCUS,GBPREFIX),strSplit[1]);
        annotations.add(annotation);
        baseCount=Integer.parseInt(strSplit[2]);
        if (strSplit[4].toUpperCase().contains(""String_Node_Str"")) {
          type=ComponentDefinition.RNA;
        }
        annotation=new Annotation(new QName(GBNAMESPACE,MOLECULE,GBPREFIX),strSplit[4]);
        annotations.add(annotation);
        for (int i=5; i < strSplit.length; i++) {
          if (strSplit[i].startsWith(""String_Node_Str"") || strSplit[i].startsWith(""String_Node_Str"")) {
            if (strSplit[i].startsWith(""String_Node_Str""))             circular=true;
          }
 else           if (strSplit[i].length() == 3) {
            annotation=new Annotation(new QName(GBNAMESPACE,DIVISION,GBPREFIX),strSplit[i]);
          }
 else {
            annotation=new Annotation(new QName(GBNAMESPACE,DATE,GBPREFIX),strSplit[i]);
          }
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        String accession=strSplit[1];
        id=accession;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        if (strSplit[1].split(""String_Node_Str"").length > 1) {
          version=strSplit[1].split(""String_Node_Str"")[1];
        }
        if (!id.equals(strSplit[1]) && !id.equals(strSplit[1].split(""String_Node_Str"")[0])) {
          throw new SBOLConversionException(""String_Node_Str"");
        }
        id=id.replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (strSplit.length > 2) {
          annotation=new Annotation(new QName(GBNAMESPACE,GINUMBER,GBPREFIX),strSplit[2]);
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,KEYWORDS,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,SOURCE,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,ORGANISM,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        nestedAnnotations=new ArrayList<Annotation>();
        Annotation labelAnnotation=new Annotation(new QName(GBNAMESPACE,LABEL,GBPREFIX),annotationStr);
        nestedAnnotations.add(labelAnnotation);
        URI nestedURI=URI.create(URIPrefix + id + ""String_Node_Str""+ refCnt);
        refCnt++;
        annotation=new Annotation(new QName(GBNAMESPACE,REFERENCE,GBPREFIX),new QName(GBNAMESPACE,NESTEDREFERENCE,GBPREFIX),nestedURI,nestedAnnotations);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,AUTHORS,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,TITLE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,JOURNAL,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,MEDLINE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,PUBMED,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setAnnotations(nestedAnnotations);
        Annotation pubMedAnnotation=new Annotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),annotationStr);
        annotations.add(pubMedAnnotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,COMMENT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,BASECOUNT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        topCD=doc.createComponentDefinition(id,version,type);
        if (circular) {
          topCD.addType(SequenceOntology.CIRCULAR);
        }
 else {
          topCD.addType(SequenceOntology.LINEAR);
        }
        topCD.addRole(SequenceOntology.ENGINEERED_REGION);
        if (!""String_Node_Str"".equals(description)) {
          topCD.setDescription(description);
        }
        topCD.setAnnotations(annotations);
        featureMode=true;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        originMode=true;
        featureMode=false;
      }
 else {
        if (featureMode) {
          if (strLine.startsWith(""String_Node_Str"")) {
            String tag=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
            String value=""String_Node_Str"";
            if ((-1) != strLine.indexOf('=')) {
              String[] splitStr=strLine.split(""String_Node_Str"");
              tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
              value=splitStr[1];
            }
            StringBuilder sbValue=new StringBuilder();
            sbValue.append(value);
            if (value.startsWith(""String_Node_Str"") && !value.endsWith(""String_Node_Str"")) {
              while (true) {
                strLine=readGenBankLine(br).trim();
                sbValue.append(strLine);
                if (strLine.endsWith(""String_Node_Str"")) {
                  break;
                }
              }
            }
            SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
            if (null != sa) {
              if (value.startsWith(""String_Node_Str"")) {
                value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
 else {
                annotation=new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);
              }
              sa.addAnnotation(annotation);
            }
          }
 else {
            strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
            String[] strSplit=strLine.split(""String_Node_Str"");
            URI role=convertGenBanktoSO(strSplit[0]);
            String range=strSplit[1];
            boolean outerComplement=false;
            OrientationType orientation=OrientationType.INLINE;
            if (range.startsWith(""String_Node_Str"")) {
              outerComplement=true;
              orientation=OrientationType.REVERSECOMPLEMENT;
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            }
            if (range.startsWith(""String_Node_Str"") || range.startsWith(""String_Node_Str"")) {
              String multiType=""String_Node_Str"";
              if (range.startsWith(""String_Node_Str"")) {
                multiType=""String_Node_Str"";
              }
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              String[] ranges=range.split(""String_Node_Str"");
              int rangeCnt=0;
              SequenceAnnotation sa=null;
              for (              String r : ranges) {
                orientation=OrientationType.INLINE;
                if (r.startsWith(""String_Node_Str"") || outerComplement) {
                  orientation=OrientationType.REVERSECOMPLEMENT;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean startLessThan=false;
                boolean endGreaterThan=false;
                if (r.contains(""String_Node_Str"")) {
                  startLessThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                if (r.contains(""String_Node_Str"")) {
                  endGreaterThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean singleBaseRange=false;
                String[] rangeSplit=null;
                if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                  rangeSplit=r.split(""String_Node_Str"");
                  singleBaseRange=true;
                }
 else {
                  rangeSplit=r.split(""String_Node_Str"");
                }
                int start=Integer.parseInt(rangeSplit[0]);
                int end=Integer.parseInt(rangeSplit[1]);
                Range newRange=null;
                if (rangeCnt == 0) {
                  sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
                  sa.addRole(role);
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,MULTIRANGETYPE,GBCONVPREFIX),multiType);
                  sa.addAnnotation(annotation);
                  newRange=(Range)sa.getLocation(""String_Node_Str"" + rangeCnt);
                }
 else                 if (sa != null) {
                  newRange=sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
                }
                if (outerComplement) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + ((ranges.length - 1) - rangeCnt));
                }
 else {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),""String_Node_Str"" + rangeCnt);
                }
                newRange.addAnnotation(annotation);
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                rangeCnt++;
              }
            }
 else             if (range.contains(""String_Node_Str"")) {
              String[] rangeSplit=range.split(""String_Node_Str"");
              int at=Integer.parseInt(rangeSplit[0]);
              SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
              sa.addRole(role);
            }
 else {
              boolean startLessThan=false;
              boolean endGreaterThan=false;
              if (range.contains(""String_Node_Str"")) {
                startLessThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              if (range.contains(""String_Node_Str"")) {
                endGreaterThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean singleBaseRange=false;
              String[] rangeSplit=null;
              if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                rangeSplit=range.split(""String_Node_Str"");
                singleBaseRange=true;
              }
 else {
                rangeSplit=range.split(""String_Node_Str"");
              }
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[0]);
              if (rangeSplit.length > 1) {
                end=Integer.parseInt(rangeSplit[1]);
              }
              if (start > end && circular) {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,baseCount,orientation);
                sa.addRole(role);
                annotation=new Annotation(new QName(GBCONVNAMESPACE,STRADLESORIGIN,GBCONVPREFIX),""String_Node_Str"");
                sa.addAnnotation(annotation);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                newRange=sa.addRange(""String_Node_Str"",1,end,orientation);
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
 else {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
                sa.addRole(role);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
            }
            featureCnt++;
          }
        }
 else         if (originMode) {
          if (elements == null) {
            elements=new String(""String_Node_Str"");
          }
          if (strLine.startsWith(""String_Node_Str"")) {
            cont=true;
            break;
          }
          String[] strSplit=strLine.split(""String_Node_Str"");
          for (int i=1; i < strSplit.length; i++) {
            sbSequence.append(strSplit[i]);
          }
        }
        cont=false;
      }
    }
    if (topCD != null) {
      Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,sbSequence.toString(),Sequence.IUPAC_DNA);
      topCD.addSequence(sequence);
      createSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);
    }
    if (!cont)     break;
  }
  br.close();
}",0.9836211175256656
12480,"private static void writeFeature(Writer w,SequenceAnnotation sa,String role,int offset,boolean inline) throws IOException, SBOLConversionException {
  if (sa.getPreciseLocations().size() == 0) {
    throw new SBOLConversionException(""String_Node_Str"" + sa.getIdentity() + ""String_Node_Str"");
  }
 else   if (sa.getPreciseLocations().size() == 1) {
    Location loc=sa.getPreciseLocations().iterator().next();
    boolean locReverse=false;
    if (loc.isSetOrientation()) {
      locReverse=loc.getOrientation().equals(OrientationType.REVERSECOMPLEMENT);
    }
    w.write(""String_Node_Str"" + role + ""String_Node_Str""+ locationStr(loc,offset,((inline && locReverse) || (!inline && !locReverse)),null)+ ""String_Node_Str"");
  }
 else   if (stradlesOrigin(sa)) {
    Location loc=sa.getLocation(""String_Node_Str"");
    Location loc2=sa.getLocation(""String_Node_Str"");
    boolean locReverse=false;
    if (loc.isSetOrientation()) {
      locReverse=loc.getOrientation().equals(OrientationType.REVERSECOMPLEMENT);
    }
    w.write(""String_Node_Str"" + role + ""String_Node_Str""+ locationStr(loc,offset,((inline && locReverse) || (!inline && !locReverse)),loc2)+ ""String_Node_Str"");
  }
 else {
    String multiType=""String_Node_Str"";
    Annotation annotation=sa.getAnnotation(new QName(GBNAMESPACE,MULTIRANGETYPE,GBPREFIX));
    if (annotation != null) {
      multiType=annotation.getStringValue();
    }
    String rangeStr=""String_Node_Str"" + role + ""String_Node_Str""+ multiType+ ""String_Node_Str"";
    boolean first=true;
    for (    Location loc : sa.getSortedLocations()) {
      if (!first)       rangeStr+=""String_Node_Str"";
 else       first=false;
      boolean locReverse=false;
      if (loc.isSetOrientation()) {
        locReverse=loc.getOrientation().equals(OrientationType.REVERSECOMPLEMENT);
      }
      rangeStr+=locationStr(loc,offset,((inline && locReverse) || (!inline && !locReverse)),null);
    }
    rangeStr+=""String_Node_Str"";
    writeGenBankLine(w,rangeStr,80,21);
  }
  for (  Annotation a : sa.getAnnotations()) {
    if (a.getQName().getLocalPart().equals(""String_Node_Str""))     continue;
    if (a.isStringValue()) {
      writeGenBankLine(w,""String_Node_Str"" + a.getQName().getLocalPart() + ""String_Node_Str""+ a.getStringValue(),80,21);
    }
  }
}","private static void writeFeature(Writer w,SequenceAnnotation sa,String role,int offset,boolean inline) throws IOException, SBOLConversionException {
  if (sa.getPreciseLocations().size() == 0) {
    throw new SBOLConversionException(""String_Node_Str"" + sa.getIdentity() + ""String_Node_Str"");
  }
 else   if (sa.getPreciseLocations().size() == 1) {
    Location loc=sa.getPreciseLocations().iterator().next();
    boolean locReverse=false;
    if (loc.isSetOrientation()) {
      locReverse=loc.getOrientation().equals(OrientationType.REVERSECOMPLEMENT);
    }
    w.write(""String_Node_Str"" + role + ""String_Node_Str""+ locationStr(loc,offset,((inline && locReverse) || (!inline && !locReverse)),null)+ ""String_Node_Str"");
  }
 else   if (stradlesOrigin(sa)) {
    Location loc=sa.getLocation(""String_Node_Str"");
    Location loc2=sa.getLocation(""String_Node_Str"");
    boolean locReverse=false;
    if (loc.isSetOrientation()) {
      locReverse=loc.getOrientation().equals(OrientationType.REVERSECOMPLEMENT);
    }
    w.write(""String_Node_Str"" + role + ""String_Node_Str""+ locationStr(loc,offset,((inline && locReverse) || (!inline && !locReverse)),loc2)+ ""String_Node_Str"");
  }
 else {
    String multiType=""String_Node_Str"";
    Annotation annotation=sa.getAnnotation(new QName(GBNAMESPACE,MULTIRANGETYPE,GBCONVPREFIX));
    if (annotation != null) {
      multiType=annotation.getStringValue();
    }
    String rangeStr=""String_Node_Str"" + role + ""String_Node_Str""+ multiType+ ""String_Node_Str"";
    boolean first=true;
    for (    Location loc : sa.getSortedLocations()) {
      if (!first)       rangeStr+=""String_Node_Str"";
 else       first=false;
      boolean locReverse=false;
      if (loc.isSetOrientation()) {
        locReverse=loc.getOrientation().equals(OrientationType.REVERSECOMPLEMENT);
      }
      rangeStr+=locationStr(loc,offset,((inline && locReverse) || (!inline && !locReverse)),null);
    }
    rangeStr+=""String_Node_Str"";
    writeGenBankLine(w,rangeStr,80,21);
  }
  for (  Annotation a : sa.getAnnotations()) {
    if (a.getQName().getLocalPart().equals(""String_Node_Str""))     continue;
    if (a.isStringValue()) {
      try {
        int aInt=Integer.parseInt(a.getStringValue());
        writeGenBankLine(w,""String_Node_Str"" + a.getQName().getLocalPart() + ""String_Node_Str""+ aInt,80,21);
      }
 catch (      NumberFormatException e) {
        writeGenBankLine(w,""String_Node_Str"" + a.getQName().getLocalPart() + ""String_Node_Str""+ ""String_Node_Str""+ a.getStringValue()+ ""String_Node_Str"",80,21);
      }
    }
 else     if (a.isIntegerValue()) {
      writeGenBankLine(w,""String_Node_Str"" + a.getQName().getLocalPart() + ""String_Node_Str""+ a.getIntegerValue(),80,21);
    }
  }
}",0.90501899620076
12481,"private static boolean stradlesOrigin(SequenceAnnotation sa){
  Annotation annotation=sa.getAnnotation(new QName(GBNAMESPACE,STRADLESORIGIN,GBPREFIX));
  if (annotation != null) {
    return true;
  }
  return false;
}","private static boolean stradlesOrigin(SequenceAnnotation sa){
  Annotation annotation=sa.getAnnotation(new QName(GBCONVNAMESPACE,STRADLESORIGIN,GBCONVPREFIX));
  if (annotation != null) {
    return true;
  }
  return false;
}",0.981981981981982
12482,"private static String locationStr(Location location,int offset,boolean complement,Location location2) throws SBOLConversionException {
  int start;
  int end;
  String locationStr=""String_Node_Str"";
  boolean isCut=false;
  if (location instanceof Range) {
    Range range=(Range)location;
    start=offset + range.getStart();
    end=offset + range.getEnd();
  }
 else   if (location instanceof Cut) {
    Cut cut=(Cut)location;
    start=offset + cut.getAt();
    end=offset + cut.getAt() + 1;
    isCut=true;
  }
 else {
    throw new SBOLConversionException(""String_Node_Str"" + location.getIdentity() + ""String_Node_Str"");
  }
  if (location2 != null) {
    if (location2 instanceof Range) {
      Range range=(Range)location2;
      end=offset + range.getEnd();
    }
 else     if (location2 instanceof Cut) {
      Cut cut=(Cut)location2;
      end=offset + cut.getAt() + 1;
    }
  }
  if (complement) {
    locationStr+=""String_Node_Str"";
  }
  if (location.getAnnotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX)) != null) {
    locationStr+=""String_Node_Str"";
  }
  locationStr+=start;
  if (isCut) {
    locationStr+=""String_Node_Str"";
  }
 else   if (location.getAnnotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX)) != null) {
    locationStr+=""String_Node_Str"";
  }
 else {
    locationStr+=""String_Node_Str"";
  }
  if (location.getAnnotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX)) != null) {
    locationStr+=""String_Node_Str"";
  }
  locationStr+=end;
  if (complement) {
    locationStr+=""String_Node_Str"";
  }
  return locationStr;
}","private static String locationStr(Location location,int offset,boolean complement,Location location2) throws SBOLConversionException {
  int start;
  int end;
  String locationStr=""String_Node_Str"";
  boolean isCut=false;
  if (location instanceof Range) {
    Range range=(Range)location;
    start=offset + range.getStart();
    end=offset + range.getEnd();
  }
 else   if (location instanceof Cut) {
    Cut cut=(Cut)location;
    start=offset + cut.getAt();
    end=offset + cut.getAt() + 1;
    isCut=true;
  }
 else {
    throw new SBOLConversionException(""String_Node_Str"" + location.getIdentity() + ""String_Node_Str"");
  }
  if (location2 != null) {
    if (location2 instanceof Range) {
      Range range=(Range)location2;
      end=offset + range.getEnd();
    }
 else     if (location2 instanceof Cut) {
      Cut cut=(Cut)location2;
      end=offset + cut.getAt() + 1;
    }
  }
  if (complement) {
    locationStr+=""String_Node_Str"";
  }
  if (location.getAnnotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX)) != null) {
    locationStr+=""String_Node_Str"";
  }
  locationStr+=start;
  if (isCut) {
    locationStr+=""String_Node_Str"";
  }
 else   if (location.getAnnotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX)) != null) {
    locationStr+=""String_Node_Str"";
  }
 else {
    locationStr+=""String_Node_Str"";
  }
  if (location.getAnnotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX)) != null) {
    locationStr+=""String_Node_Str"";
  }
  locationStr+=end;
  if (complement) {
    locationStr+=""String_Node_Str"";
  }
  return locationStr;
}",0.9924098671726757
12483,"/** 
 * Copy all objects to an a new SBOL Document and change the URI prefix/version of each object
 * @param URIPrefix new URI prefix
 * @param version new version
 * @return new SBOL document with changed URI prefix
 * @throws SBOLValidationException
 */
public SBOLDocument changeURIPrefixVersion(String URIPrefix,String version) throws SBOLValidationException {
  SBOLDocument document=createCopy(URIPrefix,null,version);
  document.setDefaultURIprefix(URIPrefix);
  for (  Collection collection : getCollections()) {
    Set<URI> members=new HashSet<URI>();
    for (    URI memberURI : collection.getMemberURIs()) {
      TopLevel member=getTopLevel(memberURI);
      if (member == null) {
        members.add(memberURI);
      }
 else {
        if (member instanceof Sequence) {
          Sequence tl=document.getSequence(member.getDisplayId(),version != null ? version : member.getVersion());
          members.add(tl.getIdentity());
        }
        if (member instanceof ComponentDefinition) {
          ComponentDefinition tl=document.getComponentDefinition(member.getDisplayId(),version != null ? version : member.getVersion());
          members.add(tl.getIdentity());
        }
        if (member instanceof ModuleDefinition) {
          ModuleDefinition tl=document.getModuleDefinition(member.getDisplayId(),version != null ? version : member.getVersion());
          members.add(tl.getIdentity());
        }
        if (member instanceof Model) {
          Model tl=document.getModel(member.getDisplayId(),version != null ? version : member.getVersion());
          members.add(tl.getIdentity());
        }
        if (member instanceof GenericTopLevel) {
          GenericTopLevel tl=document.getGenericTopLevel(member.getDisplayId(),version != null ? version : member.getVersion());
          members.add(tl.getIdentity());
        }
        if (member instanceof Collection) {
          Collection tl=document.getCollection(member.getDisplayId(),version != null ? version : member.getVersion());
          members.add(tl.getIdentity());
        }
      }
    }
    Collection docCol=document.getCollection(collection.getDisplayId(),version != null ? version : collection.getVersion());
    docCol.setMembers(members);
    changeURIPrefixVersion(docCol,URIPrefix,version);
  }
  for (  ComponentDefinition componentDefinition : getComponentDefinitions()) {
    ComponentDefinition docCD=document.getComponentDefinition(componentDefinition.getDisplayId(),version != null ? version : componentDefinition.getVersion());
    changeURIPrefixVersion(docCD,URIPrefix,version);
    for (    Component component : componentDefinition.getComponents()) {
      Component docComp=docCD.getComponent(component.getDisplayId());
      ComponentDefinition cd=component.getDefinition();
      if (cd == null) {
        docComp.setDefinition(component.getDefinitionURI());
      }
 else {
        ComponentDefinition docRefCD=document.getComponentDefinition(cd.getDisplayId(),version != null ? version : cd.getVersion());
        docComp.setDefinition(docRefCD.getIdentity());
      }
      changeURIPrefixVersion(docComp,URIPrefix,version);
      for (      MapsTo mapsTo : component.getMapsTos()) {
        MapsTo docMapsTo=docComp.getMapsTo(mapsTo.getDisplayId());
        Component remoteComponent=(Component)mapsTo.getRemote();
        if (remoteComponent == null) {
          docMapsTo.setRemote(mapsTo.getRemoteURI());
        }
 else {
          ComponentDefinition docRefCD=document.getComponentDefinition(cd.getDisplayId(),version != null ? version : cd.getVersion());
          Component docRemoteComponent=docRefCD.getComponent(remoteComponent.getDisplayId());
          docMapsTo.setRemote(docRemoteComponent.getIdentity());
        }
        changeURIPrefixVersion(docMapsTo,URIPrefix,version);
      }
    }
    for (    SequenceAnnotation sa : docCD.getSequenceAnnotations()) {
      changeURIPrefixVersion(sa,URIPrefix,version);
    }
    for (    SequenceConstraint sc : docCD.getSequenceConstraints()) {
      changeURIPrefixVersion(sc,URIPrefix,version);
    }
    Set<URI> sequences=new HashSet<URI>();
    for (    URI sequenceURI : componentDefinition.getSequenceURIs()) {
      Sequence sequence=getSequence(sequenceURI);
      if (sequence == null) {
        sequences.add(sequenceURI);
      }
 else {
        Sequence docSeq=document.getSequence(sequence.getDisplayId(),version != null ? version : sequence.getVersion());
        sequences.add(docSeq.getIdentity());
      }
    }
    docCD.setSequences(sequences);
  }
  for (  ModuleDefinition moduleDefinition : getModuleDefinitions()) {
    ModuleDefinition docMD=document.getModuleDefinition(moduleDefinition.getDisplayId(),version != null ? version : moduleDefinition.getVersion());
    changeURIPrefixVersion(docMD,URIPrefix,version);
    for (    FunctionalComponent functionalComponent : moduleDefinition.getFunctionalComponents()) {
      FunctionalComponent docComp=docMD.getFunctionalComponent(functionalComponent.getDisplayId());
      ComponentDefinition cd=functionalComponent.getDefinition();
      if (cd == null) {
        docComp.setDefinition(functionalComponent.getDefinitionURI());
      }
 else {
        ComponentDefinition docRefCD=document.getComponentDefinition(cd.getDisplayId(),version != null ? version : cd.getVersion());
        docComp.setDefinition(docRefCD.getIdentity());
      }
      changeURIPrefixVersion(docComp,URIPrefix,version);
      for (      MapsTo mapsTo : functionalComponent.getMapsTos()) {
        MapsTo docMapsTo=docComp.getMapsTo(mapsTo.getDisplayId());
        ComponentInstance remoteComponent=mapsTo.getRemote();
        if (remoteComponent == null) {
          docMapsTo.setRemote(mapsTo.getRemoteURI());
        }
 else {
          ComponentDefinition docRefCD=document.getComponentDefinition(cd.getDisplayId(),version != null ? version : cd.getVersion());
          Component docRemoteComponent=docRefCD.getComponent(remoteComponent.getDisplayId());
          docMapsTo.setRemote(docRemoteComponent.getIdentity());
        }
        changeURIPrefixVersion(docMapsTo,URIPrefix,version);
      }
    }
    for (    Module module : moduleDefinition.getModules()) {
      Module docModule=docMD.getModule(module.getDisplayId());
      ModuleDefinition md=module.getDefinition();
      if (md == null) {
        docModule.setDefinition(module.getDefinitionURI());
      }
 else {
        ModuleDefinition docRefMD=document.getModuleDefinition(md.getDisplayId(),version != null ? version : md.getVersion());
        docModule.setDefinition(docRefMD.getIdentity());
      }
      changeURIPrefixVersion(docModule,URIPrefix,version);
      for (      MapsTo mapsTo : module.getMapsTos()) {
        MapsTo docMapsTo=docModule.getMapsTo(mapsTo.getDisplayId());
        ComponentInstance remoteComponent=mapsTo.getRemote();
        if (remoteComponent == null) {
          docMapsTo.setRemote(mapsTo.getRemoteURI());
        }
 else {
          ModuleDefinition docRefMD=document.getModuleDefinition(md.getDisplayId(),version != null ? version : md.getVersion());
          FunctionalComponent docRemoteComponent=docRefMD.getFunctionalComponent(remoteComponent.getDisplayId());
          docMapsTo.setRemote(docRemoteComponent.getIdentity());
        }
        changeURIPrefixVersion(docMapsTo,URIPrefix,version);
      }
    }
    for (    Interaction interaction : docMD.getInteractions()) {
      changeURIPrefixVersion(interaction,URIPrefix,version);
      for (      Participation participation : interaction.getParticipations()) {
        changeURIPrefixVersion(participation,URIPrefix,version);
      }
    }
    Set<URI> models=new HashSet<URI>();
    for (    URI modelURI : moduleDefinition.getModelURIs()) {
      Model model=getModel(modelURI);
      if (model == null) {
        models.add(modelURI);
      }
 else {
        Model docMod=document.getModel(model.getDisplayId(),version != null ? version : model.getVersion());
        models.add(docMod.getIdentity());
      }
    }
    docMD.setModels(models);
  }
  for (  Model model : document.getModels()) {
    changeURIPrefixVersion(model,URIPrefix,version);
  }
  for (  Sequence sequence : document.getSequences()) {
    changeURIPrefixVersion(sequence,URIPrefix,version);
  }
  for (  GenericTopLevel genericTopLevel : document.getGenericTopLevels()) {
    changeURIPrefixVersion(genericTopLevel,URIPrefix,version);
  }
  return document;
}","/** 
 * Copy all objects to an a new SBOL Document and change the URI prefix/version of each object
 * @param URIPrefix new URI prefix
 * @param version new version
 * @return new SBOL document with changed URI prefix
 * @throws SBOLValidationException
 */
public SBOLDocument changeURIPrefixVersion(String URIPrefix,String version) throws SBOLValidationException {
  SBOLDocument document=createCopy(URIPrefix,null,version);
  document.setDefaultURIprefix(URIPrefix);
  for (  Collection collection : getCollections()) {
    Set<URI> members=new HashSet<URI>();
    for (    URI memberURI : collection.getMemberURIs()) {
      TopLevel member=getTopLevel(memberURI);
      if (member == null) {
        members.add(memberURI);
      }
 else {
        if (member instanceof Sequence) {
          Sequence tl=document.getSequence(member.getDisplayId(),version != null ? version : member.getVersion());
          members.add(tl.getIdentity());
        }
        if (member instanceof ComponentDefinition) {
          ComponentDefinition tl=document.getComponentDefinition(member.getDisplayId(),version != null ? version : member.getVersion());
          members.add(tl.getIdentity());
        }
        if (member instanceof ModuleDefinition) {
          ModuleDefinition tl=document.getModuleDefinition(member.getDisplayId(),version != null ? version : member.getVersion());
          members.add(tl.getIdentity());
        }
        if (member instanceof Model) {
          Model tl=document.getModel(member.getDisplayId(),version != null ? version : member.getVersion());
          members.add(tl.getIdentity());
        }
        if (member instanceof GenericTopLevel) {
          GenericTopLevel tl=document.getGenericTopLevel(member.getDisplayId(),version != null ? version : member.getVersion());
          members.add(tl.getIdentity());
        }
        if (member instanceof Collection) {
          Collection tl=document.getCollection(member.getDisplayId(),version != null ? version : member.getVersion());
          members.add(tl.getIdentity());
        }
      }
    }
    Collection docCol=document.getCollection(collection.getDisplayId(),version != null ? version : collection.getVersion());
    docCol.setMembers(members);
    changeURIPrefixVersion(docCol,URIPrefix,version);
  }
  for (  ComponentDefinition componentDefinition : getComponentDefinitions()) {
    ComponentDefinition docCD=document.getComponentDefinition(componentDefinition.getDisplayId(),version != null ? version : componentDefinition.getVersion());
    changeURIPrefixVersion(docCD,URIPrefix,version);
    for (    Component component : componentDefinition.getComponents()) {
      Component docComp=docCD.getComponent(component.getDisplayId());
      ComponentDefinition cd=component.getDefinition();
      if (cd == null) {
        docComp.setDefinition(component.getDefinitionURI());
      }
 else {
        ComponentDefinition docRefCD=document.getComponentDefinition(cd.getDisplayId(),version != null ? version : cd.getVersion());
        docComp.setDefinition(docRefCD.getIdentity());
      }
      changeURIPrefixVersion(docComp,URIPrefix,version);
      for (      MapsTo mapsTo : component.getMapsTos()) {
        MapsTo docMapsTo=docComp.getMapsTo(mapsTo.getDisplayId());
        Component remoteComponent=(Component)mapsTo.getRemote();
        if (remoteComponent == null) {
          docMapsTo.setRemote(mapsTo.getRemoteURI());
        }
 else {
          ComponentDefinition docRefCD=document.getComponentDefinition(cd.getDisplayId(),version != null ? version : cd.getVersion());
          Component docRemoteComponent=docRefCD.getComponent(remoteComponent.getDisplayId());
          docMapsTo.setRemote(docRemoteComponent.getIdentity());
        }
        changeURIPrefixVersion(docMapsTo,URIPrefix,version);
      }
    }
    for (    SequenceAnnotation sa : docCD.getSequenceAnnotations()) {
      for (      Location loc : sa.getLocations()) {
        changeURIPrefixVersion(loc,URIPrefix,version);
      }
      changeURIPrefixVersion(sa,URIPrefix,version);
    }
    for (    SequenceConstraint sc : docCD.getSequenceConstraints()) {
      changeURIPrefixVersion(sc,URIPrefix,version);
    }
    Set<URI> sequences=new HashSet<URI>();
    for (    URI sequenceURI : componentDefinition.getSequenceURIs()) {
      Sequence sequence=getSequence(sequenceURI);
      if (sequence == null) {
        sequences.add(sequenceURI);
      }
 else {
        Sequence docSeq=document.getSequence(sequence.getDisplayId(),version != null ? version : sequence.getVersion());
        sequences.add(docSeq.getIdentity());
      }
    }
    docCD.setSequences(sequences);
  }
  for (  ModuleDefinition moduleDefinition : getModuleDefinitions()) {
    ModuleDefinition docMD=document.getModuleDefinition(moduleDefinition.getDisplayId(),version != null ? version : moduleDefinition.getVersion());
    changeURIPrefixVersion(docMD,URIPrefix,version);
    for (    FunctionalComponent functionalComponent : moduleDefinition.getFunctionalComponents()) {
      FunctionalComponent docComp=docMD.getFunctionalComponent(functionalComponent.getDisplayId());
      ComponentDefinition cd=functionalComponent.getDefinition();
      if (cd == null) {
        docComp.setDefinition(functionalComponent.getDefinitionURI());
      }
 else {
        ComponentDefinition docRefCD=document.getComponentDefinition(cd.getDisplayId(),version != null ? version : cd.getVersion());
        docComp.setDefinition(docRefCD.getIdentity());
      }
      changeURIPrefixVersion(docComp,URIPrefix,version);
      for (      MapsTo mapsTo : functionalComponent.getMapsTos()) {
        MapsTo docMapsTo=docComp.getMapsTo(mapsTo.getDisplayId());
        ComponentInstance remoteComponent=mapsTo.getRemote();
        if (remoteComponent == null) {
          docMapsTo.setRemote(mapsTo.getRemoteURI());
        }
 else {
          ComponentDefinition docRefCD=document.getComponentDefinition(cd.getDisplayId(),version != null ? version : cd.getVersion());
          Component docRemoteComponent=docRefCD.getComponent(remoteComponent.getDisplayId());
          docMapsTo.setRemote(docRemoteComponent.getIdentity());
        }
        changeURIPrefixVersion(docMapsTo,URIPrefix,version);
      }
    }
    for (    Module module : moduleDefinition.getModules()) {
      Module docModule=docMD.getModule(module.getDisplayId());
      ModuleDefinition md=module.getDefinition();
      if (md == null) {
        docModule.setDefinition(module.getDefinitionURI());
      }
 else {
        ModuleDefinition docRefMD=document.getModuleDefinition(md.getDisplayId(),version != null ? version : md.getVersion());
        docModule.setDefinition(docRefMD.getIdentity());
      }
      changeURIPrefixVersion(docModule,URIPrefix,version);
      for (      MapsTo mapsTo : module.getMapsTos()) {
        MapsTo docMapsTo=docModule.getMapsTo(mapsTo.getDisplayId());
        ComponentInstance remoteComponent=mapsTo.getRemote();
        if (remoteComponent == null) {
          docMapsTo.setRemote(mapsTo.getRemoteURI());
        }
 else {
          ModuleDefinition docRefMD=document.getModuleDefinition(md.getDisplayId(),version != null ? version : md.getVersion());
          FunctionalComponent docRemoteComponent=docRefMD.getFunctionalComponent(remoteComponent.getDisplayId());
          docMapsTo.setRemote(docRemoteComponent.getIdentity());
        }
        changeURIPrefixVersion(docMapsTo,URIPrefix,version);
      }
    }
    for (    Interaction interaction : docMD.getInteractions()) {
      changeURIPrefixVersion(interaction,URIPrefix,version);
      for (      Participation participation : interaction.getParticipations()) {
        changeURIPrefixVersion(participation,URIPrefix,version);
      }
    }
    Set<URI> models=new HashSet<URI>();
    for (    URI modelURI : moduleDefinition.getModelURIs()) {
      Model model=getModel(modelURI);
      if (model == null) {
        models.add(modelURI);
      }
 else {
        Model docMod=document.getModel(model.getDisplayId(),version != null ? version : model.getVersion());
        models.add(docMod.getIdentity());
      }
    }
    docMD.setModels(models);
  }
  for (  Model model : document.getModels()) {
    changeURIPrefixVersion(model,URIPrefix,version);
  }
  for (  Sequence sequence : document.getSequences()) {
    changeURIPrefixVersion(sequence,URIPrefix,version);
  }
  for (  GenericTopLevel genericTopLevel : document.getGenericTopLevels()) {
    changeURIPrefixVersion(genericTopLevel,URIPrefix,version);
  }
  return document;
}",0.6598023064250412
12484,"/** 
 * @param doc
 * @param stringBuffer
 * @param URIPrefix
 * @throws IOException
 * @throws SBOLConversionException
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the following methods:<ul> <li> {@link SBOLDocument#createComponentDefinition(String,String,URI)},</li> <li>  {@link Identified#setAnnotations(List)},</li> <li>  {@link SequenceAnnotation#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,int,OrientationType)},</li> <li>  {@link SequenceAnnotation#setComponent(String)},</li> <li>  {@link SequenceAnnotation#addRange(String,int,int,OrientationType)},</li> <li>  {@link Range#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,OrientationType)},</li> <li>  {@link SBOLDocument#createSequence(String,String,String,URI)}, </li> <li>  {@link ComponentDefinition#addSequence(Sequence)}, or </li> <li>  {@link #createSubComponentDefinitions(SBOLDocument,ComponentDefinition,URI,String,String)}.</li> </ul>
 */
static void read(SBOLDocument doc,String stringBuffer,String URIPrefix) throws IOException, SBOLConversionException, SBOLValidationException {
  so=new SequenceOntology();
  doc.addNamespace(URI.create(GBNAMESPACE),GBPREFIX);
  BufferedReader br=new BufferedReader(new StringReader(stringBuffer));
  String strLine;
  int featureCnt=0;
  int refCnt=0;
  while (true) {
    boolean cont=false;
    String id=""String_Node_Str"";
    String version=""String_Node_Str"";
    nextLine=null;
    featureMode=false;
    originMode=false;
    StringBuilder sbSequence=new StringBuilder();
    String elements=null;
    String description=""String_Node_Str"";
    URI type=ComponentDefinition.DNA;
    ComponentDefinition topCD=null;
    List<Annotation> annotations=new ArrayList<Annotation>();
    List<Annotation> nestedAnnotations=null;
    Annotation annotation=null;
    boolean circular=false;
    int baseCount=0;
    while ((strLine=readGenBankLine(br)) != null) {
      strLine=strLine.trim();
      if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        id=strSplit[1];
        annotation=new Annotation(new QName(GBNAMESPACE,LOCUS,GBPREFIX),strSplit[1]);
        annotations.add(annotation);
        baseCount=Integer.parseInt(strSplit[2]);
        if (strSplit[4].toUpperCase().contains(""String_Node_Str"")) {
          type=ComponentDefinition.RNA;
        }
        annotation=new Annotation(new QName(GBNAMESPACE,MOLECULE,GBPREFIX),strSplit[4]);
        annotations.add(annotation);
        for (int i=5; i < strSplit.length; i++) {
          if (strSplit[i].startsWith(""String_Node_Str"") || strSplit[i].startsWith(""String_Node_Str"")) {
            if (strSplit[i].startsWith(""String_Node_Str""))             circular=true;
          }
 else           if (strSplit[i].length() == 3) {
            annotation=new Annotation(new QName(GBNAMESPACE,DIVISION,GBPREFIX),strSplit[i]);
          }
 else {
            annotation=new Annotation(new QName(GBNAMESPACE,DATE,GBPREFIX),strSplit[i]);
          }
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        String accession=strSplit[1];
        id=accession;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        version=strSplit[1].split(""String_Node_Str"")[1];
        if (!id.equals(strSplit[1].split(""String_Node_Str"")[0])) {
          throw new SBOLConversionException(""String_Node_Str"");
        }
        if (strSplit.length > 2) {
          annotation=new Annotation(new QName(GBNAMESPACE,GINUMBER,GBPREFIX),strSplit[2]);
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,KEYWORDS,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,SOURCE,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,ORGANISM,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        nestedAnnotations=new ArrayList<Annotation>();
        Annotation labelAnnotation=new Annotation(new QName(GBNAMESPACE,LABEL,GBPREFIX),annotationStr);
        nestedAnnotations.add(labelAnnotation);
        URI nestedURI=URI.create(URIPrefix + ""String_Node_Str"" + id+ ""String_Node_Str""+ refCnt);
        refCnt++;
        annotation=new Annotation(new QName(GBNAMESPACE,REFERENCE,GBPREFIX),new QName(GBNAMESPACE,NESTEDREFERENCE,GBPREFIX),nestedURI,nestedAnnotations);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,AUTHORS,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setNestedAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,TITLE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setNestedAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,JOURNAL,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setNestedAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,MEDLINE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setNestedAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,PUBMED,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setNestedAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,COMMENT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,BASECOUNT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        topCD=doc.createComponentDefinition(id,version,type);
        if (circular) {
          topCD.addType(SequenceOntology.CIRCULAR);
        }
 else {
          topCD.addType(SequenceOntology.LINEAR);
        }
        topCD.addRole(SequenceOntology.ENGINEERED_REGION);
        if (!""String_Node_Str"".equals(description)) {
          topCD.setDescription(description);
        }
        topCD.setAnnotations(annotations);
        featureMode=true;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        originMode=true;
        featureMode=false;
      }
 else {
        if (featureMode) {
          if (strLine.startsWith(""String_Node_Str"")) {
            String tag=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
            String value=""String_Node_Str"";
            if ((-1) != strLine.indexOf('=')) {
              String[] splitStr=strLine.split(""String_Node_Str"");
              tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
              value=splitStr[1];
            }
            StringBuilder sbValue=new StringBuilder();
            sbValue.append(value);
            if (value.startsWith(""String_Node_Str"") && !value.endsWith(""String_Node_Str"")) {
              while (true) {
                strLine=readGenBankLine(br).trim();
                sbValue.append(strLine);
                if (strLine.endsWith(""String_Node_Str"")) {
                  break;
                }
              }
            }
            SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
            if (null != sa) {
              annotation=new Annotation(new QName(GBNAMESPACE,tag,GBPREFIX),value);
              sa.addAnnotation(annotation);
            }
          }
 else {
            strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
            String[] strSplit=strLine.split(""String_Node_Str"");
            URI role=convertGenBanktoSO(strSplit[0]);
            String range=strSplit[1];
            boolean outerComplement=false;
            OrientationType orientation=OrientationType.INLINE;
            if (range.startsWith(""String_Node_Str"")) {
              outerComplement=true;
              orientation=OrientationType.REVERSECOMPLEMENT;
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            }
            if (range.startsWith(""String_Node_Str"") || range.startsWith(""String_Node_Str"")) {
              String multiType=""String_Node_Str"";
              if (range.startsWith(""String_Node_Str"")) {
                multiType=""String_Node_Str"";
              }
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              String[] ranges=range.split(""String_Node_Str"");
              int rangeCnt=0;
              SequenceAnnotation sa=null;
              for (              String r : ranges) {
                orientation=OrientationType.INLINE;
                if (r.startsWith(""String_Node_Str"") || outerComplement) {
                  orientation=OrientationType.REVERSECOMPLEMENT;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean startLessThan=false;
                boolean endGreaterThan=false;
                if (r.contains(""String_Node_Str"")) {
                  startLessThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                if (r.contains(""String_Node_Str"")) {
                  endGreaterThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean singleBaseRange=false;
                String[] rangeSplit=null;
                if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                  rangeSplit=r.split(""String_Node_Str"");
                  singleBaseRange=true;
                }
 else {
                  rangeSplit=r.split(""String_Node_Str"");
                }
                int start=Integer.parseInt(rangeSplit[0]);
                int end=Integer.parseInt(rangeSplit[1]);
                Range newRange=null;
                if (rangeCnt == 0) {
                  sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
                  sa.addRole(role);
                  annotation=new Annotation(new QName(GBNAMESPACE,MULTIRANGETYPE,GBPREFIX),multiType);
                  sa.addAnnotation(annotation);
                  newRange=(Range)sa.getLocation(""String_Node_Str"" + rangeCnt);
                }
 else                 if (sa != null) {
                  newRange=sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
                }
                if (outerComplement) {
                  annotation=new Annotation(new QName(GBNAMESPACE,POSITION,GBPREFIX),""String_Node_Str"" + ((ranges.length - 1) - rangeCnt));
                }
 else {
                  annotation=new Annotation(new QName(GBNAMESPACE,POSITION,GBPREFIX),""String_Node_Str"" + rangeCnt);
                }
                newRange.addAnnotation(annotation);
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                rangeCnt++;
              }
            }
 else             if (range.contains(""String_Node_Str"")) {
              String[] rangeSplit=range.split(""String_Node_Str"");
              int at=Integer.parseInt(rangeSplit[0]);
              SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
              sa.addRole(role);
            }
 else {
              boolean startLessThan=false;
              boolean endGreaterThan=false;
              if (range.contains(""String_Node_Str"")) {
                startLessThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              if (range.contains(""String_Node_Str"")) {
                endGreaterThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean singleBaseRange=false;
              String[] rangeSplit=null;
              if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                rangeSplit=range.split(""String_Node_Str"");
                singleBaseRange=true;
              }
 else {
                rangeSplit=range.split(""String_Node_Str"");
              }
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[1]);
              if (start > end && circular) {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,baseCount,orientation);
                sa.addRole(role);
                annotation=new Annotation(new QName(GBNAMESPACE,STRADLESORIGIN,GBPREFIX),""String_Node_Str"");
                sa.addAnnotation(annotation);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                newRange=sa.addRange(""String_Node_Str"",1,end,orientation);
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
 else {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
                sa.addRole(role);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
            }
            featureCnt++;
          }
        }
 else         if (originMode) {
          if (elements == null) {
            elements=new String(""String_Node_Str"");
          }
          if (strLine.startsWith(""String_Node_Str"")) {
            cont=true;
            break;
          }
          String[] strSplit=strLine.split(""String_Node_Str"");
          for (int i=1; i < strSplit.length; i++) {
            sbSequence.append(strSplit[i]);
          }
        }
        cont=false;
      }
    }
    if (topCD != null) {
      Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,sbSequence.toString(),Sequence.IUPAC_DNA);
      topCD.addSequence(sequence);
      createSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);
    }
    if (!cont)     break;
  }
  br.close();
}","/** 
 * @param doc
 * @param stringBuffer
 * @param URIPrefix
 * @throws IOException
 * @throws SBOLConversionException
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the following methods:<ul> <li> {@link SBOLDocument#createComponentDefinition(String,String,URI)},</li> <li>  {@link Identified#setAnnotations(List)},</li> <li>  {@link SequenceAnnotation#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,int,OrientationType)},</li> <li>  {@link SequenceAnnotation#setComponent(String)},</li> <li>  {@link SequenceAnnotation#addRange(String,int,int,OrientationType)},</li> <li>  {@link Range#addAnnotation(Annotation)},</li> <li>  {@link ComponentDefinition#createSequenceAnnotation(String,String,int,OrientationType)},</li> <li>  {@link SBOLDocument#createSequence(String,String,String,URI)}, </li> <li>  {@link ComponentDefinition#addSequence(Sequence)}, or </li> <li>  {@link #createSubComponentDefinitions(SBOLDocument,ComponentDefinition,URI,String,String)}.</li> </ul>
 */
static void read(SBOLDocument doc,String stringBuffer,String URIPrefix) throws IOException, SBOLConversionException, SBOLValidationException {
  so=new SequenceOntology();
  doc.addNamespace(URI.create(GBNAMESPACE),GBPREFIX);
  BufferedReader br=new BufferedReader(new StringReader(stringBuffer));
  String strLine;
  int featureCnt=0;
  int refCnt=0;
  while (true) {
    boolean cont=false;
    String id=""String_Node_Str"";
    String version=""String_Node_Str"";
    nextLine=null;
    featureMode=false;
    originMode=false;
    StringBuilder sbSequence=new StringBuilder();
    String elements=null;
    String description=""String_Node_Str"";
    URI type=ComponentDefinition.DNA;
    ComponentDefinition topCD=null;
    List<Annotation> annotations=new ArrayList<Annotation>();
    List<Annotation> nestedAnnotations=null;
    Annotation annotation=null;
    boolean circular=false;
    int baseCount=0;
    while ((strLine=readGenBankLine(br)) != null) {
      strLine=strLine.trim();
      if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        id=strSplit[1];
        annotation=new Annotation(new QName(GBNAMESPACE,LOCUS,GBPREFIX),strSplit[1]);
        annotations.add(annotation);
        baseCount=Integer.parseInt(strSplit[2]);
        if (strSplit[4].toUpperCase().contains(""String_Node_Str"")) {
          type=ComponentDefinition.RNA;
        }
        annotation=new Annotation(new QName(GBNAMESPACE,MOLECULE,GBPREFIX),strSplit[4]);
        annotations.add(annotation);
        for (int i=5; i < strSplit.length; i++) {
          if (strSplit[i].startsWith(""String_Node_Str"") || strSplit[i].startsWith(""String_Node_Str"")) {
            if (strSplit[i].startsWith(""String_Node_Str""))             circular=true;
          }
 else           if (strSplit[i].length() == 3) {
            annotation=new Annotation(new QName(GBNAMESPACE,DIVISION,GBPREFIX),strSplit[i]);
          }
 else {
            annotation=new Annotation(new QName(GBNAMESPACE,DATE,GBPREFIX),strSplit[i]);
          }
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        String accession=strSplit[1];
        id=accession;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        version=strSplit[1].split(""String_Node_Str"")[1];
        if (!id.equals(strSplit[1].split(""String_Node_Str"")[0])) {
          throw new SBOLConversionException(""String_Node_Str"");
        }
        if (strSplit.length > 2) {
          annotation=new Annotation(new QName(GBNAMESPACE,GINUMBER,GBPREFIX),strSplit[2]);
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,KEYWORDS,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,SOURCE,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,ORGANISM,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        nestedAnnotations=new ArrayList<Annotation>();
        Annotation labelAnnotation=new Annotation(new QName(GBNAMESPACE,LABEL,GBPREFIX),annotationStr);
        nestedAnnotations.add(labelAnnotation);
        URI nestedURI=URI.create(URIPrefix + id + ""String_Node_Str""+ refCnt);
        refCnt++;
        annotation=new Annotation(new QName(GBNAMESPACE,REFERENCE,GBPREFIX),new QName(GBNAMESPACE,NESTEDREFERENCE,GBPREFIX),nestedURI,nestedAnnotations);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,AUTHORS,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setNestedAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,TITLE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setNestedAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,JOURNAL,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setNestedAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,MEDLINE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setNestedAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,PUBMED,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setNestedAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,COMMENT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,BASECOUNT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        topCD=doc.createComponentDefinition(id,version,type);
        if (circular) {
          topCD.addType(SequenceOntology.CIRCULAR);
        }
 else {
          topCD.addType(SequenceOntology.LINEAR);
        }
        topCD.addRole(SequenceOntology.ENGINEERED_REGION);
        if (!""String_Node_Str"".equals(description)) {
          topCD.setDescription(description);
        }
        topCD.setAnnotations(annotations);
        featureMode=true;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        originMode=true;
        featureMode=false;
      }
 else {
        if (featureMode) {
          if (strLine.startsWith(""String_Node_Str"")) {
            String tag=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
            String value=""String_Node_Str"";
            if ((-1) != strLine.indexOf('=')) {
              String[] splitStr=strLine.split(""String_Node_Str"");
              tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
              value=splitStr[1];
            }
            StringBuilder sbValue=new StringBuilder();
            sbValue.append(value);
            if (value.startsWith(""String_Node_Str"") && !value.endsWith(""String_Node_Str"")) {
              while (true) {
                strLine=readGenBankLine(br).trim();
                sbValue.append(strLine);
                if (strLine.endsWith(""String_Node_Str"")) {
                  break;
                }
              }
            }
            SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
            if (null != sa) {
              annotation=new Annotation(new QName(GBNAMESPACE,tag,GBPREFIX),value);
              sa.addAnnotation(annotation);
            }
          }
 else {
            strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
            String[] strSplit=strLine.split(""String_Node_Str"");
            URI role=convertGenBanktoSO(strSplit[0]);
            String range=strSplit[1];
            boolean outerComplement=false;
            OrientationType orientation=OrientationType.INLINE;
            if (range.startsWith(""String_Node_Str"")) {
              outerComplement=true;
              orientation=OrientationType.REVERSECOMPLEMENT;
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            }
            if (range.startsWith(""String_Node_Str"") || range.startsWith(""String_Node_Str"")) {
              String multiType=""String_Node_Str"";
              if (range.startsWith(""String_Node_Str"")) {
                multiType=""String_Node_Str"";
              }
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              String[] ranges=range.split(""String_Node_Str"");
              int rangeCnt=0;
              SequenceAnnotation sa=null;
              for (              String r : ranges) {
                orientation=OrientationType.INLINE;
                if (r.startsWith(""String_Node_Str"") || outerComplement) {
                  orientation=OrientationType.REVERSECOMPLEMENT;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean startLessThan=false;
                boolean endGreaterThan=false;
                if (r.contains(""String_Node_Str"")) {
                  startLessThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                if (r.contains(""String_Node_Str"")) {
                  endGreaterThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean singleBaseRange=false;
                String[] rangeSplit=null;
                if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                  rangeSplit=r.split(""String_Node_Str"");
                  singleBaseRange=true;
                }
 else {
                  rangeSplit=r.split(""String_Node_Str"");
                }
                int start=Integer.parseInt(rangeSplit[0]);
                int end=Integer.parseInt(rangeSplit[1]);
                Range newRange=null;
                if (rangeCnt == 0) {
                  sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
                  sa.addRole(role);
                  annotation=new Annotation(new QName(GBNAMESPACE,MULTIRANGETYPE,GBPREFIX),multiType);
                  sa.addAnnotation(annotation);
                  newRange=(Range)sa.getLocation(""String_Node_Str"" + rangeCnt);
                }
 else                 if (sa != null) {
                  newRange=sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
                }
                if (outerComplement) {
                  annotation=new Annotation(new QName(GBNAMESPACE,POSITION,GBPREFIX),""String_Node_Str"" + ((ranges.length - 1) - rangeCnt));
                }
 else {
                  annotation=new Annotation(new QName(GBNAMESPACE,POSITION,GBPREFIX),""String_Node_Str"" + rangeCnt);
                }
                newRange.addAnnotation(annotation);
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                rangeCnt++;
              }
            }
 else             if (range.contains(""String_Node_Str"")) {
              String[] rangeSplit=range.split(""String_Node_Str"");
              int at=Integer.parseInt(rangeSplit[0]);
              SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
              sa.addRole(role);
            }
 else {
              boolean startLessThan=false;
              boolean endGreaterThan=false;
              if (range.contains(""String_Node_Str"")) {
                startLessThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              if (range.contains(""String_Node_Str"")) {
                endGreaterThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean singleBaseRange=false;
              String[] rangeSplit=null;
              if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                rangeSplit=range.split(""String_Node_Str"");
                singleBaseRange=true;
              }
 else {
                rangeSplit=range.split(""String_Node_Str"");
              }
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[1]);
              if (start > end && circular) {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,baseCount,orientation);
                sa.addRole(role);
                annotation=new Annotation(new QName(GBNAMESPACE,STRADLESORIGIN,GBPREFIX),""String_Node_Str"");
                sa.addAnnotation(annotation);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                newRange=sa.addRange(""String_Node_Str"",1,end,orientation);
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
 else {
                SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
                sa.addRole(role);
                Range newRange=(Range)sa.getLocation(""String_Node_Str"");
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
            }
            featureCnt++;
          }
        }
 else         if (originMode) {
          if (elements == null) {
            elements=new String(""String_Node_Str"");
          }
          if (strLine.startsWith(""String_Node_Str"")) {
            cont=true;
            break;
          }
          String[] strSplit=strLine.split(""String_Node_Str"");
          for (int i=1; i < strSplit.length; i++) {
            sbSequence.append(strSplit[i]);
          }
        }
        cont=false;
      }
    }
    if (topCD != null) {
      Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,sbSequence.toString(),Sequence.IUPAC_DNA);
      topCD.addSequence(sequence);
      createSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);
    }
    if (!cont)     break;
  }
  br.close();
}",0.9993275773958418
12485,"public static void main(String[] args){
  try {
    SBOLDocument doc2=new SBOLDocument();
    doc2.setDefaultURIprefix(""String_Node_Str"");
    doc2.setComplete(true);
    SynBioHubFrontend sfe=doc2.addRegistry(""String_Node_Str"",""String_Node_Str"");
    System.out.println(sfe.getCountTopLevels(""String_Node_Str""));
    doc2.getComponentDefinition(URI.create(""String_Node_Str""));
    SBOLWriter.write(doc2,System.out);
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    SBOLDocument doc2=new SBOLDocument();
    doc2.setDefaultURIprefix(""String_Node_Str"");
    doc2.setComplete(true);
    SynBioHubFrontend sfe=doc2.addRegistry(""String_Node_Str"",""String_Node_Str"");
    System.out.println(sfe.getCountTopLevels(""String_Node_Str""));
    doc2.getComponentDefinition(URI.create(""String_Node_Str""));
    SBOLWriter.write(doc2,System.out);
    sfe.login(""String_Node_Str"",""String_Node_Str"");
    sfe.submit(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",doc2);
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}",0.8263888888888888
12486,"private static void writeFeature(Writer w,SequenceAnnotation sa,String role,int offset,boolean inline) throws IOException, SBOLConversionException {
  if (sa.getPreciseLocations().size() == 0) {
    throw new SBOLConversionException(""String_Node_Str"" + sa.getIdentity() + ""String_Node_Str"");
  }
 else   if (sa.getPreciseLocations().size() == 1) {
    Location loc=sa.getPreciseLocations().iterator().next();
    boolean locReverse=false;
    if (loc.isSetOrientation()) {
      locReverse=loc.getOrientation().equals(OrientationType.REVERSECOMPLEMENT);
    }
    w.write(""String_Node_Str"" + role + ""String_Node_Str""+ locationStr(loc,offset,((inline && locReverse) || (!inline && !locReverse)),null)+ ""String_Node_Str"");
  }
 else   if (stradlesOrigin(sa)) {
    Location loc=sa.getLocation(""String_Node_Str"");
    Location loc2=sa.getLocation(""String_Node_Str"");
    boolean locReverse=false;
    if (loc.isSetOrientation()) {
      locReverse=loc.getOrientation().equals(OrientationType.REVERSECOMPLEMENT);
    }
    w.write(""String_Node_Str"" + role + ""String_Node_Str""+ locationStr(loc,offset,((inline && locReverse) || (!inline && !locReverse)),loc2)+ ""String_Node_Str"");
  }
 else {
    String multiType=""String_Node_Str"";
    Annotation annotation=sa.getAnnotation(new QName(GBNAMESPACE,MULTIRANGETYPE,GBPREFIX));
    if (annotation != null) {
      multiType=annotation.getStringValue();
    }
    String rangeStr=""String_Node_Str"" + role + ""String_Node_Str""+ multiType+ ""String_Node_Str"";
    boolean first=true;
    for (    Location loc : sa.getSortedLocations()) {
      if (!first)       rangeStr+=""String_Node_Str"";
 else       first=false;
      boolean locReverse=false;
      if (loc.isSetOrientation()) {
        locReverse=loc.getOrientation().equals(OrientationType.REVERSECOMPLEMENT);
      }
      rangeStr+=locationStr(loc,offset,((inline && locReverse) || (!inline && !locReverse)),null);
    }
    rangeStr+=""String_Node_Str"";
    writeGenBankLine(w,rangeStr,80,21);
  }
  for (  Annotation a : sa.getAnnotations()) {
    if (a.getQName().getLocalPart().equals(""String_Node_Str""))     continue;
    writeGenBankLine(w,""String_Node_Str"" + a.getQName().getLocalPart() + ""String_Node_Str""+ a.getStringValue(),80,21);
  }
}","private static void writeFeature(Writer w,SequenceAnnotation sa,String role,int offset,boolean inline) throws IOException, SBOLConversionException {
  if (sa.getPreciseLocations().size() == 0) {
    throw new SBOLConversionException(""String_Node_Str"" + sa.getIdentity() + ""String_Node_Str"");
  }
 else   if (sa.getPreciseLocations().size() == 1) {
    Location loc=sa.getPreciseLocations().iterator().next();
    boolean locReverse=false;
    if (loc.isSetOrientation()) {
      locReverse=loc.getOrientation().equals(OrientationType.REVERSECOMPLEMENT);
    }
    w.write(""String_Node_Str"" + role + ""String_Node_Str""+ locationStr(loc,offset,((inline && locReverse) || (!inline && !locReverse)),null)+ ""String_Node_Str"");
  }
 else   if (stradlesOrigin(sa)) {
    Location loc=sa.getLocation(""String_Node_Str"");
    Location loc2=sa.getLocation(""String_Node_Str"");
    boolean locReverse=false;
    if (loc.isSetOrientation()) {
      locReverse=loc.getOrientation().equals(OrientationType.REVERSECOMPLEMENT);
    }
    w.write(""String_Node_Str"" + role + ""String_Node_Str""+ locationStr(loc,offset,((inline && locReverse) || (!inline && !locReverse)),loc2)+ ""String_Node_Str"");
  }
 else {
    String multiType=""String_Node_Str"";
    Annotation annotation=sa.getAnnotation(new QName(GBNAMESPACE,MULTIRANGETYPE,GBPREFIX));
    if (annotation != null) {
      multiType=annotation.getStringValue();
    }
    String rangeStr=""String_Node_Str"" + role + ""String_Node_Str""+ multiType+ ""String_Node_Str"";
    boolean first=true;
    for (    Location loc : sa.getSortedLocations()) {
      if (!first)       rangeStr+=""String_Node_Str"";
 else       first=false;
      boolean locReverse=false;
      if (loc.isSetOrientation()) {
        locReverse=loc.getOrientation().equals(OrientationType.REVERSECOMPLEMENT);
      }
      rangeStr+=locationStr(loc,offset,((inline && locReverse) || (!inline && !locReverse)),null);
    }
    rangeStr+=""String_Node_Str"";
    writeGenBankLine(w,rangeStr,80,21);
  }
  for (  Annotation a : sa.getAnnotations()) {
    if (a.getQName().getLocalPart().equals(""String_Node_Str""))     continue;
    if (a.isStringValue()) {
      writeGenBankLine(w,""String_Node_Str"" + a.getQName().getLocalPart() + ""String_Node_Str""+ a.getStringValue(),80,21);
    }
  }
}",0.9918195887685164
12487,"/** 
 * Sets the wasDerivedFrom property of this instance to the given one.
 * @param wasDerivedFrom the wasDerivedFrom property to set to 
 * @throws SBOLValidationException if the following SBOL validation rules was violated: 10303, 10304, 10305. 
 */
public void setWasDerivedFrom(URI wasDerivedFrom) throws SBOLValidationException {
  if (sbolDocument != null) {
    if (!SBOLValidate.checkWasDerivedFromVersion(sbolDocument,this,wasDerivedFrom)) {
      throw new SBOLValidationException(""String_Node_Str"",this);
    }
    SBOLValidate.checkWasDerivedFromCycle(sbolDocument,this,wasDerivedFrom,new HashSet<URI>());
  }
  this.wasDerivedFrom=wasDerivedFrom;
}","/** 
 * Sets the wasDerivedFrom property of this instance to the given one.
 * @param wasDerivedFrom the wasDerivedFrom property to set to 
 * @throws SBOLValidationException if the following SBOL validation rules was violated: 10303, 10304, 10305. 
 */
public void setWasDerivedFrom(URI wasDerivedFrom) throws SBOLValidationException {
  if (sbolDocument != null) {
    if (!SBOLValidate.checkWasDerivedFromVersion(sbolDocument,this,wasDerivedFrom)) {
      throw new SBOLValidationException(""String_Node_Str"",this);
    }
    SBOLValidate.checkWasDerivedFromCycle(sbolDocument,this,wasDerivedFrom,new HashSet<URI>());
  }
  clearWasDerivedFroms();
  addWasDerivedFrom(wasDerivedFrom);
}",0.931162102146558
12488,"/** 
 * Test if the wasDerivedFrom property is set.
 * @return {@code true} if it is not {@code null}, or   {@code false} otherwise
 */
public boolean isSetWasDerivedFrom(){
  return wasDerivedFrom != null;
}","/** 
 * Test if the wasDerivedFrom property is set.
 * @return {@code true} if it is not {@code null}, or   {@code false} otherwise
 */
public boolean isSetWasDerivedFrom(){
  return wasDerivedFroms.size() > 0;
}",0.9523809523809524
12489,"/** 
 * Sets the wasDerivedFrom property to   {@code null}.
 */
public void unsetWasDerivedFrom(){
  wasDerivedFrom=null;
}","/** 
 * Sets the wasDerivedFrom property to   {@code null}.
 */
public void unsetWasDerivedFrom(){
  clearWasDerivedFroms();
}",0.9397590361445785
12490,"/** 
 * This copy constructor creates a new Identified instance and copies all of its fields.
 * @param identified the identified instance to be copied
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the followingmethods: <ul> <li> {@link #setIdentity(URI)},</li> <li>  {@link #setAnnotations(List)},</li> <li>  {@link #setDisplayId(String)},</li> <li>  {@link #setVersion(String)}, or </li> <li>  {@link #setWasDerivedFrom(URI)}.</li> </ul>
 */
Identified(Identified identified) throws SBOLValidationException {
  this.setIdentity(identified.getIdentity());
  this.annotations=new ArrayList<>();
  if (identified.hasAnnotations()) {
    List<Annotation> clonedAnnotations=new ArrayList<>();
    for (    Annotation annotation : identified.getAnnotations()) {
      clonedAnnotations.add(annotation.copy());
    }
    this.setAnnotations(clonedAnnotations);
  }
  if (identified.isSetDisplayId()) {
    this.setDisplayId(identified.getDisplayId());
  }
  if (identified.isSetVersion()) {
    this.setVersion(identified.getVersion());
  }
  if (identified.isSetPersistentIdentity()) {
    this.setPersistentIdentity(URI.create(identified.getPersistentIdentity().toString()));
  }
  if (identified.isSetWasDerivedFrom()) {
    this.setWasDerivedFrom(URI.create(identified.getWasDerivedFrom().toString()));
  }
  if (identified.isSetName()) {
    this.setName(identified.getName());
  }
  if (identified.isSetDescription()) {
    this.setDescription(identified.getDescription());
  }
}","/** 
 * This copy constructor creates a new Identified instance and copies all of its fields.
 * @param identified the identified instance to be copied
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in any of the followingmethods: <ul> <li> {@link #setIdentity(URI)},</li> <li>  {@link #setAnnotations(List)},</li> <li>  {@link #setDisplayId(String)},</li> <li>  {@link #setVersion(String)}, or </li> <li>  {@link #setWasDerivedFrom(URI)}.</li> </ul>
 */
Identified(Identified identified) throws SBOLValidationException {
  this.setIdentity(identified.getIdentity());
  this.wasDerivedFroms=new HashSet<URI>();
  this.annotations=new ArrayList<>();
  if (identified.hasAnnotations()) {
    List<Annotation> clonedAnnotations=new ArrayList<>();
    for (    Annotation annotation : identified.getAnnotations()) {
      clonedAnnotations.add(annotation.copy());
    }
    this.setAnnotations(clonedAnnotations);
  }
  if (identified.isSetDisplayId()) {
    this.setDisplayId(identified.getDisplayId());
  }
  if (identified.isSetVersion()) {
    this.setVersion(identified.getVersion());
  }
  if (identified.isSetPersistentIdentity()) {
    this.setPersistentIdentity(URI.create(identified.getPersistentIdentity().toString()));
  }
  for (  URI wasDerivedFrom : identified.getWasDerivedFroms()) {
    this.addWasDerivedFrom(URI.create(wasDerivedFrom.toString()));
  }
  if (identified.isSetWasDerivedFrom()) {
    this.setWasDerivedFrom(URI.create(identified.getWasDerivedFrom().toString()));
  }
  if (identified.isSetName()) {
    this.setName(identified.getName());
  }
  if (identified.isSetDescription()) {
    this.setDescription(identified.getDescription());
  }
}",0.8968720966243419
12491,"/** 
 * Returns the wasDerivedFrom property of this instance.
 * @return the wasDerivedFrom property of this instance.
 */
public URI getWasDerivedFrom(){
  return wasDerivedFrom;
}","/** 
 * Returns the wasDerivedFrom property of this instance.
 * @return the wasDerivedFrom property of this instance.
 */
public URI getWasDerivedFrom(){
  URI wasDerivedFrom=null;
  if (wasDerivedFroms.size() > 0) {
    wasDerivedFrom=(URI)wasDerivedFroms.toArray()[0];
  }
  return wasDerivedFrom;
}",0.6625258799171843
12492,"@Override public String toString(){
  return ""String_Node_Str"" + identity + (this.isSetPersistentIdentity() ? ""String_Node_Str"" + persistentIdentity : ""String_Node_Str"")+ (this.isSetDisplayId() ? ""String_Node_Str"" + displayId : ""String_Node_Str"")+ (this.isSetVersion() ? ""String_Node_Str"" + version : ""String_Node_Str"")+ (this.isSetName() ? ""String_Node_Str"" + name : ""String_Node_Str"")+ (this.isSetDescription() ? ""String_Node_Str"" + description : ""String_Node_Str"")+ (annotations.size() > 0 ? ""String_Node_Str"" + annotations : ""String_Node_Str"")+ (this.isSetWasDerivedFrom() ? ""String_Node_Str"" + wasDerivedFrom : ""String_Node_Str"");
}","@Override public String toString(){
  return ""String_Node_Str"" + identity + (this.isSetPersistentIdentity() ? ""String_Node_Str"" + persistentIdentity : ""String_Node_Str"")+ (this.isSetDisplayId() ? ""String_Node_Str"" + displayId : ""String_Node_Str"")+ (this.isSetVersion() ? ""String_Node_Str"" + version : ""String_Node_Str"")+ (this.isSetName() ? ""String_Node_Str"" + name : ""String_Node_Str"")+ (this.isSetDescription() ? ""String_Node_Str"" + description : ""String_Node_Str"")+ (annotations.size() > 0 ? ""String_Node_Str"" + annotations : ""String_Node_Str"")+ (wasDerivedFroms.size() > 0 ? ""String_Node_Str"" + wasDerivedFroms : ""String_Node_Str"");
}",0.923921568627451
12493,"void addNamespaceBinding(NamespaceBinding namespaceBinding) throws SBOLValidationException {
  if (!namespaceBinding.getNamespaceURI().endsWith(""String_Node_Str"") && !namespaceBinding.getNamespaceURI().endsWith(""String_Node_Str"") && !namespaceBinding.getNamespaceURI().endsWith(""String_Node_Str"")) {
    throw new SBOLValidationException(""String_Node_Str"");
  }
  nameSpaces.put(namespaceBinding.getPrefix(),namespaceBinding);
}","void addNamespaceBinding(NamespaceBinding namespaceBinding) throws SBOLValidationException {
  if (!namespaceBinding.getNamespaceURI().endsWith(""String_Node_Str"") && !namespaceBinding.getNamespaceURI().endsWith(""String_Node_Str"") && !namespaceBinding.getNamespaceURI().endsWith(""String_Node_Str"")) {
    throw new SBOLValidationException(""String_Node_Str"");
  }
  nameSpaces.put(namespaceBinding.getNamespaceURI(),namespaceBinding);
}",0.9791183294663574
12494,"/** 
 * Creates a new SBOLDocument instance with one empty list for the namespaces and one for each top-level instance, and then adds the following namespaces:   {@link Sbol2Terms#sbol2},   {@link Sbol1Terms#rdf},   {@link Sbol2Terms#dc}, and   {@link Sbol2Terms#prov}.
 */
public SBOLDocument(){
  genericTopLevels=new HashMap<>();
  collections=new HashMap<>();
  componentDefinitions=new HashMap<>();
  models=new HashMap<>();
  moduleDefinitions=new HashMap<>();
  sequences=new HashMap<>();
  nameSpaces=new HashMap<>();
  nameSpaces.put(Sbol2Terms.sbol2.getPrefix(),Sbol2Terms.sbol2);
  nameSpaces.put(Sbol1Terms.rdf.getPrefix(),Sbol1Terms.rdf);
  nameSpaces.put(Sbol2Terms.dc.getPrefix(),Sbol2Terms.dc);
  nameSpaces.put(Sbol2Terms.prov.getPrefix(),Sbol2Terms.prov);
  prefixes=new HashSet<>();
  registries=new HashMap<>();
}","/** 
 * Creates a new SBOLDocument instance with one empty list for the namespaces and one for each top-level instance, and then adds the following namespaces:   {@link Sbol2Terms#sbol2},   {@link Sbol1Terms#rdf},   {@link Sbol2Terms#dc}, and   {@link Sbol2Terms#prov}.
 */
public SBOLDocument(){
  genericTopLevels=new HashMap<>();
  collections=new HashMap<>();
  componentDefinitions=new HashMap<>();
  models=new HashMap<>();
  moduleDefinitions=new HashMap<>();
  sequences=new HashMap<>();
  nameSpaces=new HashMap<>();
  nameSpaces.put(Sbol2Terms.sbol2.getNamespaceURI(),Sbol2Terms.sbol2);
  nameSpaces.put(Sbol1Terms.rdf.getNamespaceURI(),Sbol1Terms.rdf);
  nameSpaces.put(Sbol2Terms.dc.getNamespaceURI(),Sbol2Terms.dc);
  nameSpaces.put(Sbol2Terms.prov.getNamespaceURI(),Sbol2Terms.prov);
  prefixes=new HashSet<>();
  registries=new HashMap<>();
}",0.8532544378698225
12495,"@Test public void test_namespaceMethods() throws URISyntaxException, SBOLValidationException {
  List<QName> doc_namespaces=doc.getNamespaces();
  doc_namespaces.get(0);
  assertTrue(doc.getNamespaces().size() == 4);
  QName created_ns=new QName(""String_Node_Str"");
  doc.addNamespace(created_ns);
  assertTrue(doc.getNamespaces().size() == 5);
  doc.removeNamespace(new URI(created_ns.getNamespaceURI()));
  assertTrue(doc.getNamespace(new URI(created_ns.getNamespaceURI())).toString().length() == 0);
  doc.addNamespace(created_ns);
  assertTrue(doc.getNamespaces().size() == 5);
  doc.clearNamespaces();
}","@Test public void test_namespaceMethods() throws URISyntaxException, SBOLValidationException {
  List<QName> doc_namespaces=doc.getNamespaces();
  doc_namespaces.get(0);
  assertTrue(doc.getNamespaces().size() == 4);
  QName created_ns=new QName(""String_Node_Str"",""String_Node_Str"");
  doc.addNamespace(created_ns);
  assertTrue(doc.getNamespaces().size() == 5);
  doc.addNamespace(created_ns);
  assertTrue(doc.getNamespaces().size() == 5);
  doc.clearNamespaces();
}",0.7472118959107806
12496,"/** 
 * Copy all objects to an a new SBOL Document and change the URI prefix/version of each object
 * @param URIPrefix new URI prefix
 * @param version new version
 * @return new SBOL document with changed URI prefix
 * @throws SBOLValidationException
 */
public SBOLDocument changeURIPrefixVersion(String URIPrefix,String version) throws SBOLValidationException {
  SBOLDocument document=createCopy(URIPrefix,null,version);
  document.setDefaultURIprefix(URIPrefix);
  for (  Collection collection : getCollections()) {
    Set<URI> members=new HashSet<URI>();
    for (    TopLevel member : collection.getMembers()) {
      if (member instanceof Sequence) {
        Sequence tl=document.getSequence(member.getDisplayId(),version != null ? version : member.getVersion());
        members.add(tl.getIdentity());
      }
      if (member instanceof ComponentDefinition) {
        ComponentDefinition tl=document.getComponentDefinition(member.getDisplayId(),version != null ? version : member.getVersion());
        members.add(tl.getIdentity());
      }
      if (member instanceof ModuleDefinition) {
        ModuleDefinition tl=document.getModuleDefinition(member.getDisplayId(),version != null ? version : member.getVersion());
        members.add(tl.getIdentity());
      }
      if (member instanceof Model) {
        Model tl=document.getModel(member.getDisplayId(),version != null ? version : member.getVersion());
        members.add(tl.getIdentity());
      }
      if (member instanceof GenericTopLevel) {
        GenericTopLevel tl=document.getGenericTopLevel(member.getDisplayId(),version != null ? version : member.getVersion());
        members.add(tl.getIdentity());
      }
      if (member instanceof Collection) {
        Collection tl=document.getCollection(member.getDisplayId(),version != null ? version : member.getVersion());
        members.add(tl.getIdentity());
      }
    }
    document.getCollection(collection.getDisplayId(),collection.getVersion()).setMembers(members);
  }
  for (  ComponentDefinition componentDefinition : getComponentDefinitions()) {
    ComponentDefinition docCD=document.getComponentDefinition(componentDefinition.getDisplayId(),version != null ? version : componentDefinition.getVersion());
    for (    Component component : componentDefinition.getComponents()) {
      ComponentDefinition cd=component.getDefinition();
      ComponentDefinition docRefCD=document.getComponentDefinition(cd.getDisplayId(),version != null ? version : cd.getVersion());
      Component docComp=docCD.getComponent(component.getDisplayId());
      docComp.setDefinition(docRefCD.getIdentity());
      for (      MapsTo mapsTo : component.getMapsTos()) {
        Component remoteComponent=(Component)mapsTo.getRemote();
        Component docRemoteComponent=docRefCD.getComponent(remoteComponent.getDisplayId());
        docComp.getMapsTo(mapsTo.getDisplayId()).setRemote(docRemoteComponent.getIdentity());
      }
    }
    Set<URI> sequences=new HashSet<URI>();
    for (    Sequence sequence : componentDefinition.getSequences()) {
      Sequence docSeq=document.getSequence(sequence.getDisplayId(),version != null ? version : sequence.getVersion());
      sequences.add(docSeq.getIdentity());
    }
    docCD.setSequences(sequences);
  }
  for (  ModuleDefinition moduleDefinition : getModuleDefinitions()) {
    ModuleDefinition docMD=document.getModuleDefinition(moduleDefinition.getDisplayId(),version != null ? version : moduleDefinition.getVersion());
    for (    FunctionalComponent functionalComponent : moduleDefinition.getFunctionalComponents()) {
      ComponentDefinition cd=functionalComponent.getDefinition();
      ComponentDefinition docRefCD=document.getComponentDefinition(cd.getDisplayId(),version != null ? version : cd.getVersion());
      FunctionalComponent docComp=docMD.getFunctionalComponent(functionalComponent.getDisplayId());
      docComp.setDefinition(docRefCD.getIdentity());
      for (      MapsTo mapsTo : functionalComponent.getMapsTos()) {
        ComponentInstance remoteComponent=mapsTo.getRemote();
        Component docRemoteComponent=docRefCD.getComponent(remoteComponent.getDisplayId());
        docComp.getMapsTo(mapsTo.getDisplayId()).setRemote(docRemoteComponent.getIdentity());
      }
    }
    for (    Module module : moduleDefinition.getModules()) {
      ModuleDefinition md=module.getDefinition();
      ModuleDefinition docRefMD=document.getModuleDefinition(md.getDisplayId(),version != null ? version : md.getVersion());
      Module docModule=docMD.getModule(module.getDisplayId());
      docModule.setDefinition(docRefMD.getIdentity());
      for (      MapsTo mapsTo : module.getMapsTos()) {
        ComponentInstance remoteComponent=mapsTo.getRemote();
        FunctionalComponent docRemoteComponent=docRefMD.getFunctionalComponent(remoteComponent.getDisplayId());
        docModule.getMapsTo(mapsTo.getDisplayId()).setRemote(docRemoteComponent.getIdentity());
      }
    }
    Set<URI> models=new HashSet<URI>();
    for (    Model model : moduleDefinition.getModels()) {
      Model docMod=document.getModel(model.getDisplayId(),version != null ? version : model.getVersion());
      models.add(docMod.getIdentity());
    }
    docMD.setModels(models);
  }
  return document;
}","/** 
 * Copy all objects to an a new SBOL Document and change the URI prefix/version of each object
 * @param URIPrefix new URI prefix
 * @param version new version
 * @return new SBOL document with changed URI prefix
 * @throws SBOLValidationException
 */
public SBOLDocument changeURIPrefixVersion(String URIPrefix,String version) throws SBOLValidationException {
  SBOLDocument document=createCopy(URIPrefix,null,version);
  document.setDefaultURIprefix(URIPrefix);
  for (  Collection collection : getCollections()) {
    Set<URI> members=new HashSet<URI>();
    for (    TopLevel member : collection.getMembers()) {
      if (member instanceof Sequence) {
        Sequence tl=document.getSequence(member.getDisplayId(),version != null ? version : member.getVersion());
        members.add(tl.getIdentity());
      }
      if (member instanceof ComponentDefinition) {
        ComponentDefinition tl=document.getComponentDefinition(member.getDisplayId(),version != null ? version : member.getVersion());
        members.add(tl.getIdentity());
      }
      if (member instanceof ModuleDefinition) {
        ModuleDefinition tl=document.getModuleDefinition(member.getDisplayId(),version != null ? version : member.getVersion());
        members.add(tl.getIdentity());
      }
      if (member instanceof Model) {
        Model tl=document.getModel(member.getDisplayId(),version != null ? version : member.getVersion());
        members.add(tl.getIdentity());
      }
      if (member instanceof GenericTopLevel) {
        GenericTopLevel tl=document.getGenericTopLevel(member.getDisplayId(),version != null ? version : member.getVersion());
        members.add(tl.getIdentity());
      }
      if (member instanceof Collection) {
        Collection tl=document.getCollection(member.getDisplayId(),version != null ? version : member.getVersion());
        members.add(tl.getIdentity());
      }
    }
    document.getCollection(collection.getDisplayId(),version != null ? version : collection.getVersion()).setMembers(members);
  }
  for (  ComponentDefinition componentDefinition : getComponentDefinitions()) {
    ComponentDefinition docCD=document.getComponentDefinition(componentDefinition.getDisplayId(),version != null ? version : componentDefinition.getVersion());
    for (    Component component : componentDefinition.getComponents()) {
      ComponentDefinition cd=component.getDefinition();
      ComponentDefinition docRefCD=document.getComponentDefinition(cd.getDisplayId(),version != null ? version : cd.getVersion());
      Component docComp=docCD.getComponent(component.getDisplayId());
      docComp.setDefinition(docRefCD.getIdentity());
      for (      MapsTo mapsTo : component.getMapsTos()) {
        Component remoteComponent=(Component)mapsTo.getRemote();
        Component docRemoteComponent=docRefCD.getComponent(remoteComponent.getDisplayId());
        docComp.getMapsTo(mapsTo.getDisplayId()).setRemote(docRemoteComponent.getIdentity());
      }
    }
    Set<URI> sequences=new HashSet<URI>();
    for (    Sequence sequence : componentDefinition.getSequences()) {
      Sequence docSeq=document.getSequence(sequence.getDisplayId(),version != null ? version : sequence.getVersion());
      sequences.add(docSeq.getIdentity());
    }
    docCD.setSequences(sequences);
  }
  for (  ModuleDefinition moduleDefinition : getModuleDefinitions()) {
    ModuleDefinition docMD=document.getModuleDefinition(moduleDefinition.getDisplayId(),version != null ? version : moduleDefinition.getVersion());
    for (    FunctionalComponent functionalComponent : moduleDefinition.getFunctionalComponents()) {
      ComponentDefinition cd=functionalComponent.getDefinition();
      ComponentDefinition docRefCD=document.getComponentDefinition(cd.getDisplayId(),version != null ? version : cd.getVersion());
      FunctionalComponent docComp=docMD.getFunctionalComponent(functionalComponent.getDisplayId());
      docComp.setDefinition(docRefCD.getIdentity());
      for (      MapsTo mapsTo : functionalComponent.getMapsTos()) {
        ComponentInstance remoteComponent=mapsTo.getRemote();
        Component docRemoteComponent=docRefCD.getComponent(remoteComponent.getDisplayId());
        docComp.getMapsTo(mapsTo.getDisplayId()).setRemote(docRemoteComponent.getIdentity());
      }
    }
    for (    Module module : moduleDefinition.getModules()) {
      ModuleDefinition md=module.getDefinition();
      ModuleDefinition docRefMD=document.getModuleDefinition(md.getDisplayId(),version != null ? version : md.getVersion());
      Module docModule=docMD.getModule(module.getDisplayId());
      docModule.setDefinition(docRefMD.getIdentity());
      for (      MapsTo mapsTo : module.getMapsTos()) {
        ComponentInstance remoteComponent=mapsTo.getRemote();
        FunctionalComponent docRemoteComponent=docRefMD.getFunctionalComponent(remoteComponent.getDisplayId());
        docModule.getMapsTo(mapsTo.getDisplayId()).setRemote(docRemoteComponent.getIdentity());
      }
    }
    Set<URI> models=new HashSet<URI>();
    for (    Model model : moduleDefinition.getModels()) {
      Model docMod=document.getModel(model.getDisplayId(),version != null ? version : model.getVersion());
      models.add(docMod.getIdentity());
    }
    docMD.setModels(models);
  }
  return document;
}",0.9973529967857818
12497,"/** 
 * Removes the given namespace URI from this SBOL document's list of namespaces.
 * @param namespaceURI the namespaceURI to be removed
 */
public void removeNamespace(URI namespaceURI){
  if (isRequiredNamespaceBinding(namespaceURI)) {
    throw new IllegalStateException(""String_Node_Str"" + namespaceURI.toString());
  }
  nameSpaces.remove(namespaceURI);
}","/** 
 * Removes the given namespace URI from this SBOL document's list of namespaces.
 * @param namespaceURI the namespaceURI to be removed
 */
public void removeNamespace(URI namespaceURI){
  if (isRequiredNamespaceBinding(namespaceURI)) {
    throw new IllegalStateException(""String_Node_Str"" + namespaceURI.toString());
  }
  nameSpaces.remove(namespaceURI.toString());
}",0.9850746268656716
12498,"@Test public void test_namespaceMethods() throws URISyntaxException, SBOLValidationException {
  List<QName> doc_namespaces=doc.getNamespaces();
  doc_namespaces.get(0);
  assertTrue(doc.getNamespaces().size() == 4);
  QName created_ns=new QName(""String_Node_Str"",""String_Node_Str"");
  doc.addNamespace(created_ns);
  assertTrue(doc.getNamespaces().size() == 5);
  doc.addNamespace(created_ns);
  assertTrue(doc.getNamespaces().size() == 5);
  doc.clearNamespaces();
}","@Test public void test_namespaceMethods() throws URISyntaxException, SBOLValidationException {
  List<QName> doc_namespaces=doc.getNamespaces();
  doc_namespaces.get(0);
  assertTrue(doc.getNamespaces().size() == 4);
  QName created_ns=new QName(""String_Node_Str"",""String_Node_Str"");
  doc.addNamespace(created_ns);
  assertTrue(doc.getNamespaces().size() == 5);
  doc.removeNamespace(new URI(created_ns.getNamespaceURI()));
  assertTrue(doc.getNamespace(new URI(created_ns.getNamespaceURI())) == null);
  doc.addNamespace(created_ns);
  assertTrue(doc.getNamespaces().size() == 5);
  doc.clearNamespaces();
}",0.8263695450324977
12499,"/** 
 * Copy all objects to an a new SBOL Document and change the URI prefix/version of each object
 * @param URIPrefix new URI prefix
 * @param version new version
 * @return new SBOL document with changed URI prefix
 * @throws SBOLValidationException
 */
public SBOLDocument changeURIPrefixVersion(String URIPrefix,String version) throws SBOLValidationException {
  SBOLDocument document=createCopy(URIPrefix,null,version);
  document.setDefaultURIprefix(URIPrefix);
  for (  Collection collection : getCollections()) {
    Set<URI> members=new HashSet<URI>();
    for (    TopLevel member : collection.getMembers()) {
      if (member instanceof Sequence) {
        Sequence tl=document.getSequence(member.getDisplayId(),version != null ? version : member.getVersion());
        members.add(tl.getIdentity());
      }
      if (member instanceof ComponentDefinition) {
        ComponentDefinition tl=document.getComponentDefinition(member.getDisplayId(),version != null ? version : member.getVersion());
        members.add(tl.getIdentity());
      }
      if (member instanceof ModuleDefinition) {
        ModuleDefinition tl=document.getModuleDefinition(member.getDisplayId(),version != null ? version : member.getVersion());
        members.add(tl.getIdentity());
      }
      if (member instanceof Model) {
        Model tl=document.getModel(member.getDisplayId(),version != null ? version : member.getVersion());
        members.add(tl.getIdentity());
      }
      if (member instanceof GenericTopLevel) {
        GenericTopLevel tl=document.getGenericTopLevel(member.getDisplayId(),version != null ? version : member.getVersion());
        members.add(tl.getIdentity());
      }
      if (member instanceof Collection) {
        Collection tl=document.getCollection(member.getDisplayId(),version != null ? version : member.getVersion());
        members.add(tl.getIdentity());
      }
    }
    Collection docCol=document.getCollection(collection.getDisplayId(),version != null ? version : collection.getVersion());
    docCol.setMembers(members);
    changeURIPrefixVersion(docCol,URIPrefix,version);
  }
  for (  ComponentDefinition componentDefinition : getComponentDefinitions()) {
    ComponentDefinition docCD=document.getComponentDefinition(componentDefinition.getDisplayId(),version != null ? version : componentDefinition.getVersion());
    changeURIPrefixVersion(docCD,URIPrefix,version);
    for (    Component component : componentDefinition.getComponents()) {
      ComponentDefinition cd=component.getDefinition();
      ComponentDefinition docRefCD=document.getComponentDefinition(cd.getDisplayId(),version != null ? version : cd.getVersion());
      Component docComp=docCD.getComponent(component.getDisplayId());
      docComp.setDefinition(docRefCD.getIdentity());
      changeURIPrefixVersion(docComp,URIPrefix,version);
      for (      MapsTo mapsTo : component.getMapsTos()) {
        Component remoteComponent=(Component)mapsTo.getRemote();
        Component docRemoteComponent=docRefCD.getComponent(remoteComponent.getDisplayId());
        MapsTo docMapsTo=docComp.getMapsTo(mapsTo.getDisplayId());
        docMapsTo.setRemote(docRemoteComponent.getIdentity());
        changeURIPrefixVersion(docMapsTo,URIPrefix,version);
      }
    }
    for (    SequenceAnnotation sa : docCD.getSequenceAnnotations()) {
      changeURIPrefixVersion(sa,URIPrefix,version);
    }
    for (    SequenceConstraint sc : docCD.getSequenceConstraints()) {
      changeURIPrefixVersion(sc,URIPrefix,version);
    }
    Set<URI> sequences=new HashSet<URI>();
    for (    Sequence sequence : componentDefinition.getSequences()) {
      Sequence docSeq=document.getSequence(sequence.getDisplayId(),version != null ? version : sequence.getVersion());
      sequences.add(docSeq.getIdentity());
    }
    docCD.setSequences(sequences);
  }
  for (  ModuleDefinition moduleDefinition : getModuleDefinitions()) {
    ModuleDefinition docMD=document.getModuleDefinition(moduleDefinition.getDisplayId(),version != null ? version : moduleDefinition.getVersion());
    changeURIPrefixVersion(docMD,URIPrefix,version);
    for (    FunctionalComponent functionalComponent : moduleDefinition.getFunctionalComponents()) {
      ComponentDefinition cd=functionalComponent.getDefinition();
      ComponentDefinition docRefCD=document.getComponentDefinition(cd.getDisplayId(),version != null ? version : cd.getVersion());
      FunctionalComponent docComp=docMD.getFunctionalComponent(functionalComponent.getDisplayId());
      docComp.setDefinition(docRefCD.getIdentity());
      changeURIPrefixVersion(docComp,URIPrefix,version);
      for (      MapsTo mapsTo : functionalComponent.getMapsTos()) {
        ComponentInstance remoteComponent=mapsTo.getRemote();
        Component docRemoteComponent=docRefCD.getComponent(remoteComponent.getDisplayId());
        MapsTo docMapsTo=docComp.getMapsTo(mapsTo.getDisplayId());
        docMapsTo.setRemote(docRemoteComponent.getIdentity());
        changeURIPrefixVersion(docMapsTo,URIPrefix,version);
      }
    }
    for (    Module module : moduleDefinition.getModules()) {
      ModuleDefinition md=module.getDefinition();
      ModuleDefinition docRefMD=document.getModuleDefinition(md.getDisplayId(),version != null ? version : md.getVersion());
      Module docModule=docMD.getModule(module.getDisplayId());
      docModule.setDefinition(docRefMD.getIdentity());
      changeURIPrefixVersion(docModule,URIPrefix,version);
      for (      MapsTo mapsTo : module.getMapsTos()) {
        ComponentInstance remoteComponent=mapsTo.getRemote();
        FunctionalComponent docRemoteComponent=docRefMD.getFunctionalComponent(remoteComponent.getDisplayId());
        MapsTo docMapsTo=docModule.getMapsTo(mapsTo.getDisplayId());
        docMapsTo.setRemote(docRemoteComponent.getIdentity());
        changeURIPrefixVersion(docMapsTo,URIPrefix,version);
      }
    }
    for (    Interaction interaction : docMD.getInteractions()) {
      changeURIPrefixVersion(interaction,URIPrefix,version);
      for (      Participation participation : interaction.getParticipations()) {
        changeURIPrefixVersion(participation,URIPrefix,version);
      }
    }
    Set<URI> models=new HashSet<URI>();
    for (    Model model : moduleDefinition.getModels()) {
      Model docMod=document.getModel(model.getDisplayId(),version != null ? version : model.getVersion());
      models.add(docMod.getIdentity());
    }
    docMD.setModels(models);
  }
  for (  Model model : document.getModels()) {
    changeURIPrefixVersion(model,URIPrefix,version);
  }
  for (  Sequence sequence : document.getSequences()) {
    changeURIPrefixVersion(sequence,URIPrefix,version);
  }
  for (  GenericTopLevel genericTopLevel : document.getGenericTopLevels()) {
    changeURIPrefixVersion(genericTopLevel,URIPrefix,version);
  }
  return document;
}","/** 
 * Copy all objects to an a new SBOL Document and change the URI prefix/version of each object
 * @param URIPrefix new URI prefix
 * @param version new version
 * @return new SBOL document with changed URI prefix
 * @throws SBOLValidationException
 */
public SBOLDocument changeURIPrefixVersion(String URIPrefix,String version) throws SBOLValidationException {
  SBOLDocument document=createCopy(URIPrefix,null,version);
  document.setDefaultURIprefix(URIPrefix);
  for (  Collection collection : getCollections()) {
    Set<URI> members=new HashSet<URI>();
    for (    URI memberURI : collection.getMemberURIs()) {
      TopLevel member=getTopLevel(memberURI);
      if (member == null) {
        members.add(memberURI);
      }
 else {
        if (member instanceof Sequence) {
          Sequence tl=document.getSequence(member.getDisplayId(),version != null ? version : member.getVersion());
          members.add(tl.getIdentity());
        }
        if (member instanceof ComponentDefinition) {
          ComponentDefinition tl=document.getComponentDefinition(member.getDisplayId(),version != null ? version : member.getVersion());
          members.add(tl.getIdentity());
        }
        if (member instanceof ModuleDefinition) {
          ModuleDefinition tl=document.getModuleDefinition(member.getDisplayId(),version != null ? version : member.getVersion());
          members.add(tl.getIdentity());
        }
        if (member instanceof Model) {
          Model tl=document.getModel(member.getDisplayId(),version != null ? version : member.getVersion());
          members.add(tl.getIdentity());
        }
        if (member instanceof GenericTopLevel) {
          GenericTopLevel tl=document.getGenericTopLevel(member.getDisplayId(),version != null ? version : member.getVersion());
          members.add(tl.getIdentity());
        }
        if (member instanceof Collection) {
          Collection tl=document.getCollection(member.getDisplayId(),version != null ? version : member.getVersion());
          members.add(tl.getIdentity());
        }
      }
    }
    Collection docCol=document.getCollection(collection.getDisplayId(),version != null ? version : collection.getVersion());
    docCol.setMembers(members);
    changeURIPrefixVersion(docCol,URIPrefix,version);
  }
  for (  ComponentDefinition componentDefinition : getComponentDefinitions()) {
    ComponentDefinition docCD=document.getComponentDefinition(componentDefinition.getDisplayId(),version != null ? version : componentDefinition.getVersion());
    changeURIPrefixVersion(docCD,URIPrefix,version);
    for (    Component component : componentDefinition.getComponents()) {
      ComponentDefinition cd=component.getDefinition();
      Component docComp=docCD.getComponent(component.getDisplayId());
      ComponentDefinition docRefCD=document.getComponentDefinition(cd.getDisplayId(),version != null ? version : cd.getVersion());
      if (docRefCD == null) {
        docComp.setDefinition(component.getDefinitionURI());
      }
 else {
        docComp.setDefinition(docRefCD.getIdentity());
      }
      changeURIPrefixVersion(docComp,URIPrefix,version);
      for (      MapsTo mapsTo : component.getMapsTos()) {
        Component remoteComponent=(Component)mapsTo.getRemote();
        MapsTo docMapsTo=docComp.getMapsTo(mapsTo.getDisplayId());
        if (docRefCD == null) {
          docMapsTo.setRemote(mapsTo.getRemoteURI());
        }
 else {
          Component docRemoteComponent=docRefCD.getComponent(remoteComponent.getDisplayId());
          docMapsTo.setRemote(docRemoteComponent.getIdentity());
        }
        changeURIPrefixVersion(docMapsTo,URIPrefix,version);
      }
    }
    for (    SequenceAnnotation sa : docCD.getSequenceAnnotations()) {
      changeURIPrefixVersion(sa,URIPrefix,version);
    }
    for (    SequenceConstraint sc : docCD.getSequenceConstraints()) {
      changeURIPrefixVersion(sc,URIPrefix,version);
    }
    Set<URI> sequences=new HashSet<URI>();
    for (    URI sequenceURI : componentDefinition.getSequenceURIs()) {
      Sequence sequence=getSequence(sequenceURI);
      if (sequence == null) {
        sequences.add(sequenceURI);
      }
 else {
        Sequence docSeq=document.getSequence(sequence.getDisplayId(),version != null ? version : sequence.getVersion());
        sequences.add(docSeq.getIdentity());
      }
    }
    docCD.setSequences(sequences);
  }
  for (  ModuleDefinition moduleDefinition : getModuleDefinitions()) {
    ModuleDefinition docMD=document.getModuleDefinition(moduleDefinition.getDisplayId(),version != null ? version : moduleDefinition.getVersion());
    changeURIPrefixVersion(docMD,URIPrefix,version);
    for (    FunctionalComponent functionalComponent : moduleDefinition.getFunctionalComponents()) {
      ComponentDefinition cd=functionalComponent.getDefinition();
      FunctionalComponent docComp=docMD.getFunctionalComponent(functionalComponent.getDisplayId());
      ComponentDefinition docRefCD=document.getComponentDefinition(cd.getDisplayId(),version != null ? version : cd.getVersion());
      if (docRefCD == null) {
        docComp.setDefinition(functionalComponent.getDefinitionURI());
      }
 else {
        docComp.setDefinition(docRefCD.getIdentity());
      }
      changeURIPrefixVersion(docComp,URIPrefix,version);
      for (      MapsTo mapsTo : functionalComponent.getMapsTos()) {
        ComponentInstance remoteComponent=mapsTo.getRemote();
        MapsTo docMapsTo=docComp.getMapsTo(mapsTo.getDisplayId());
        if (docRefCD == null) {
          docMapsTo.setRemote(mapsTo.getRemoteURI());
        }
 else {
          Component docRemoteComponent=docRefCD.getComponent(remoteComponent.getDisplayId());
          docMapsTo.setRemote(docRemoteComponent.getIdentity());
        }
        changeURIPrefixVersion(docMapsTo,URIPrefix,version);
      }
    }
    for (    Module module : moduleDefinition.getModules()) {
      ModuleDefinition md=module.getDefinition();
      Module docModule=docMD.getModule(module.getDisplayId());
      ModuleDefinition docRefMD=document.getModuleDefinition(md.getDisplayId(),version != null ? version : md.getVersion());
      if (docRefMD == null) {
        docModule.setDefinition(module.getDefinitionURI());
      }
 else {
        docModule.setDefinition(docRefMD.getIdentity());
      }
      changeURIPrefixVersion(docModule,URIPrefix,version);
      for (      MapsTo mapsTo : module.getMapsTos()) {
        ComponentInstance remoteComponent=mapsTo.getRemote();
        MapsTo docMapsTo=docModule.getMapsTo(mapsTo.getDisplayId());
        if (docRefMD == null) {
          docMapsTo.setRemote(mapsTo.getRemoteURI());
        }
 else {
          FunctionalComponent docRemoteComponent=docRefMD.getFunctionalComponent(remoteComponent.getDisplayId());
          docMapsTo.setRemote(docRemoteComponent.getIdentity());
        }
        changeURIPrefixVersion(docMapsTo,URIPrefix,version);
      }
    }
    for (    Interaction interaction : docMD.getInteractions()) {
      changeURIPrefixVersion(interaction,URIPrefix,version);
      for (      Participation participation : interaction.getParticipations()) {
        changeURIPrefixVersion(participation,URIPrefix,version);
      }
    }
    Set<URI> models=new HashSet<URI>();
    for (    URI modelURI : moduleDefinition.getModelURIs()) {
      Model model=getModel(modelURI);
      if (model == null) {
        models.add(modelURI);
      }
 else {
        Model docMod=document.getModel(model.getDisplayId(),version != null ? version : model.getVersion());
        models.add(docMod.getIdentity());
      }
    }
    docMD.setModels(models);
  }
  for (  Model model : document.getModels()) {
    changeURIPrefixVersion(model,URIPrefix,version);
  }
  for (  Sequence sequence : document.getSequences()) {
    changeURIPrefixVersion(sequence,URIPrefix,version);
  }
  for (  GenericTopLevel genericTopLevel : document.getGenericTopLevels()) {
    changeURIPrefixVersion(genericTopLevel,URIPrefix,version);
  }
  return document;
}",0.8128062286059468
12500,"public static void main(String[] args){
  try {
    SBOLDocument doc2=new SBOLDocument();
    doc2.setDefaultURIprefix(""String_Node_Str"");
    doc2.setComplete(false);
    doc2.createSequence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Sequence.IUPAC_DNA);
    StackFrontend sfe=doc2.addRegistry(""String_Node_Str"");
    sfe.login(""String_Node_Str"",""String_Node_Str"");
    sfe.submit(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",doc2);
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    SBOLDocument doc2=new SBOLDocument();
    doc2.setDefaultURIprefix(""String_Node_Str"");
    doc2.setComplete(false);
    ComponentDefinition cd=doc2.createComponentDefinition(""String_Node_Str"",""String_Node_Str"",ComponentDefinition.DNA);
    cd.addSequence(URI.create(""String_Node_Str""));
    SBOLWriter.write(doc2,System.out);
    StackFrontend sfe=doc2.addRegistry(""String_Node_Str"");
    sfe.login(""String_Node_Str"",""String_Node_Str"");
    sfe.submit(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",doc2);
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}",0.8078967350037966
12501,"static boolean checkWasDerivedFromVersion(SBOLDocument sbolDocument,Identified identified,URI wasDerivedFrom){
  Identified derivedFrom=sbolDocument.getTopLevel(wasDerivedFrom);
  if ((derivedFrom != null) && (derivedFrom.isSetPersistentIdentity() && identified.isSetPersistentIdentity()) && (derivedFrom.getPersistentIdentity().equals(identified.getPersistentIdentity()))&& (derivedFrom.isSetVersion() && identified.isSetVersion())&& (Version.isFirstVersionNewer(derivedFrom.getVersion(),identified.getVersion()))) {
    return false;
  }
  return true;
}","static boolean checkWasDerivedFromVersion(SBOLDocument sbolDocument,Identified identified,URI wasDerivedFrom){
  String wasDerivedFromPI=URIcompliance.extractPersistentId(wasDerivedFrom);
  if (wasDerivedFromPI == null || !wasDerivedFromPI.equals(identified.getPersistentIdentity())) {
    return true;
  }
  Identified derivedFrom=sbolDocument.getTopLevel(wasDerivedFrom);
  if ((derivedFrom != null) && (derivedFrom.isSetPersistentIdentity() && identified.isSetPersistentIdentity()) && (derivedFrom.getPersistentIdentity().equals(identified.getPersistentIdentity()))&& (derivedFrom.isSetVersion() && identified.isSetVersion())&& (Version.isFirstVersionNewer(derivedFrom.getVersion(),identified.getVersion()))) {
    return false;
  }
  return true;
}",0.8501529051987767
12502,"/** 
 * Removes all registries from this SBOL document. <p> This method calls   {@link #removeRegistry(URI)} to iteratively remove each registry.
 */
public void clearRegistries(){
  Object[] keySetArray=registries.keySet().toArray();
  for (  Object key : keySetArray) {
    removeRegistry((String)key);
  }
}","/** 
 * Removes all registries from this SBOL document. <p> This method calls   {@link #removeRegistry(String)} to iteratively remove each registry.
 */
public void clearRegistries(){
  Object[] keySetArray=registries.keySet().toArray();
  for (  Object key : keySetArray) {
    removeRegistry((String)key);
  }
}",0.985553772070626
12503,"static boolean checkWasDerivedFromVersion(SBOLDocument sbolDocument,Identified identified,URI wasDerivedFrom){
  String wasDerivedFromPI=URIcompliance.extractPersistentId(wasDerivedFrom);
  if (wasDerivedFromPI == null || !wasDerivedFromPI.equals(identified.getPersistentIdentity())) {
    return true;
  }
  Identified derivedFrom=sbolDocument.getTopLevel(wasDerivedFrom);
  if ((derivedFrom != null) && (derivedFrom.isSetPersistentIdentity() && identified.isSetPersistentIdentity()) && (derivedFrom.getPersistentIdentity().equals(identified.getPersistentIdentity()))&& (derivedFrom.isSetVersion() && identified.isSetVersion())&& (Version.isFirstVersionNewer(derivedFrom.getVersion(),identified.getVersion()))) {
    return false;
  }
  return true;
}","static boolean checkWasDerivedFromVersion(SBOLDocument sbolDocument,Identified identified,URI wasDerivedFrom){
  String wasDerivedFromPI=URIcompliance.extractPersistentId(wasDerivedFrom);
  if (wasDerivedFromPI == null || !wasDerivedFromPI.equals(identified.getPersistentIdentity().toString())) {
    return true;
  }
  Identified derivedFrom=sbolDocument.getTopLevel(wasDerivedFrom);
  if ((derivedFrom != null) && (derivedFrom.isSetPersistentIdentity() && identified.isSetPersistentIdentity()) && (derivedFrom.getPersistentIdentity().equals(identified.getPersistentIdentity()))&& (derivedFrom.isSetVersion() && identified.isSetVersion())&& (Version.isFirstVersionNewer(derivedFrom.getVersion(),identified.getVersion()))) {
    return false;
  }
  return true;
}",0.9927392739273928
12504,"private static void checkComponentDefinitionCompleteness(SBOLDocument sbolDocument,ComponentDefinition componentDefinition){
  for (  URI sequenceURI : componentDefinition.getSequenceURIs()) {
    if (sbolDocument.getSequence(sequenceURI) == null) {
      errors.add(new SBOLValidationException(""String_Node_Str"",componentDefinition).getMessage());
    }
  }
  for (  Component component : componentDefinition.getComponents()) {
    if (component.getDefinition() == null) {
      errors.add(new SBOLValidationException(""String_Node_Str"",component).getMessage());
    }
    for (    MapsTo mapsTo : component.getMapsTos()) {
      if (mapsTo.getRemote() == null) {
        errors.add(new SBOLValidationException(""String_Node_Str"",mapsTo).getMessage());
        continue;
      }
      if (mapsTo.getRemote().getAccess().equals(AccessType.PRIVATE)) {
        errors.add(new SBOLValidationException(""String_Node_Str"",mapsTo).getMessage());
      }
      if (mapsTo.getRefinement().equals(RefinementType.VERIFYIDENTICAL)) {
        if (!mapsTo.getLocal().getDefinitionURI().equals(mapsTo.getRemote().getDefinitionURI())) {
          errors.add(new SBOLValidationException(""String_Node_Str"").getMessage());
        }
      }
    }
  }
}","private static void checkComponentDefinitionCompleteness(SBOLDocument sbolDocument,ComponentDefinition componentDefinition){
  for (  URI sequenceURI : componentDefinition.getSequenceURIs()) {
    if (sbolDocument.getSequence(sequenceURI) == null) {
      errors.add(new SBOLValidationException(""String_Node_Str"",componentDefinition).getMessage());
    }
  }
  for (  Component component : componentDefinition.getComponents()) {
    if (component.getDefinition() == null) {
      errors.add(new SBOLValidationException(""String_Node_Str"",component).getMessage());
    }
    for (    MapsTo mapsTo : component.getMapsTos()) {
      if (mapsTo.getRemote() == null) {
        errors.add(new SBOLValidationException(""String_Node_Str"",mapsTo).getMessage());
        continue;
      }
      if (mapsTo.getRemote().getAccess().equals(AccessType.PRIVATE)) {
        errors.add(new SBOLValidationException(""String_Node_Str"",mapsTo).getMessage());
      }
      if (mapsTo.getRefinement().equals(RefinementType.VERIFYIDENTICAL)) {
        if (!mapsTo.getLocal().getDefinitionURI().equals(mapsTo.getRemote().getDefinitionURI())) {
          errors.add(new SBOLValidationException(""String_Node_Str"",mapsTo).getMessage());
        }
      }
    }
  }
}",0.9971648440664236
12505,"private static void checkModuleDefinitionCompleteness(SBOLDocument sbolDocument,ModuleDefinition moduleDefinition){
  for (  URI modelURI : moduleDefinition.getModelURIs()) {
    if (sbolDocument.getModel(modelURI) == null) {
      errors.add(new SBOLValidationException(""String_Node_Str"",moduleDefinition).getMessage());
    }
  }
  for (  FunctionalComponent functionalComponent : moduleDefinition.getFunctionalComponents()) {
    if (functionalComponent.getDefinition() == null) {
      errors.add(new SBOLValidationException(""String_Node_Str"",functionalComponent).getMessage());
    }
    for (    MapsTo mapsTo : functionalComponent.getMapsTos()) {
      if (mapsTo.getRemote() == null) {
        errors.add(new SBOLValidationException(""String_Node_Str"",mapsTo).getMessage());
        continue;
      }
      if (mapsTo.getRemote().getAccess().equals(AccessType.PRIVATE)) {
        errors.add(new SBOLValidationException(""String_Node_Str"",mapsTo).getMessage());
      }
      if (mapsTo.getRefinement().equals(RefinementType.VERIFYIDENTICAL)) {
        if (!mapsTo.getLocal().getDefinitionURI().equals(mapsTo.getRemote().getDefinitionURI())) {
          errors.add(new SBOLValidationException(""String_Node_Str"").getMessage());
        }
      }
    }
  }
  for (  Module module : moduleDefinition.getModules()) {
    if (module.getDefinition() == null) {
      errors.add(new SBOLValidationException(""String_Node_Str"",module).getMessage());
    }
    for (    MapsTo mapsTo : module.getMapsTos()) {
      if (mapsTo.getRemote() == null) {
        errors.add(new SBOLValidationException(""String_Node_Str"",mapsTo).getMessage());
        continue;
      }
      if (mapsTo.getRemote().getAccess().equals(AccessType.PRIVATE)) {
        errors.add(new SBOLValidationException(""String_Node_Str"",mapsTo).getMessage());
      }
      if (mapsTo.getRefinement().equals(RefinementType.VERIFYIDENTICAL)) {
        if (!mapsTo.getLocal().getDefinitionURI().equals(mapsTo.getRemote().getDefinitionURI())) {
          errors.add(new SBOLValidationException(""String_Node_Str"").getMessage());
        }
      }
    }
  }
}","private static void checkModuleDefinitionCompleteness(SBOLDocument sbolDocument,ModuleDefinition moduleDefinition){
  for (  URI modelURI : moduleDefinition.getModelURIs()) {
    if (sbolDocument.getModel(modelURI) == null) {
      errors.add(new SBOLValidationException(""String_Node_Str"",moduleDefinition).getMessage());
    }
  }
  for (  FunctionalComponent functionalComponent : moduleDefinition.getFunctionalComponents()) {
    if (functionalComponent.getDefinition() == null) {
      errors.add(new SBOLValidationException(""String_Node_Str"",functionalComponent).getMessage());
    }
    for (    MapsTo mapsTo : functionalComponent.getMapsTos()) {
      if (mapsTo.getRemote() == null) {
        errors.add(new SBOLValidationException(""String_Node_Str"",mapsTo).getMessage());
        continue;
      }
      if (mapsTo.getRemote().getAccess().equals(AccessType.PRIVATE)) {
        errors.add(new SBOLValidationException(""String_Node_Str"",mapsTo).getMessage());
      }
      if (mapsTo.getRefinement().equals(RefinementType.VERIFYIDENTICAL)) {
        if (!mapsTo.getLocal().getDefinitionURI().equals(mapsTo.getRemote().getDefinitionURI())) {
          errors.add(new SBOLValidationException(""String_Node_Str"",mapsTo).getMessage());
        }
      }
    }
  }
  for (  Module module : moduleDefinition.getModules()) {
    if (module.getDefinition() == null) {
      errors.add(new SBOLValidationException(""String_Node_Str"",module).getMessage());
    }
    for (    MapsTo mapsTo : module.getMapsTos()) {
      if (mapsTo.getRemote() == null) {
        errors.add(new SBOLValidationException(""String_Node_Str"",mapsTo).getMessage());
        continue;
      }
      if (mapsTo.getRemote().getAccess().equals(AccessType.PRIVATE)) {
        errors.add(new SBOLValidationException(""String_Node_Str"",mapsTo).getMessage());
      }
      if (mapsTo.getRefinement().equals(RefinementType.VERIFYIDENTICAL)) {
        if (!mapsTo.getLocal().getDefinitionURI().equals(mapsTo.getRemote().getDefinitionURI())) {
          errors.add(new SBOLValidationException(""String_Node_Str"",mapsTo).getMessage());
        }
      }
    }
  }
}",0.9966949952785646
12506,"void copy(Component component) throws SBOLValidationException {
  ((ComponentInstance)this).copy((ComponentInstance)component);
  if (!component.getMapsTos().isEmpty()) {
    for (    MapsTo mapsTo : component.getMapsTos()) {
      MapsTo newMapsTo=this.createMapsTo(mapsTo.getDisplayId(),mapsTo.getRefinement(),mapsTo.getLocalURI(),mapsTo.getRemoteURI());
      newMapsTo.copy(mapsTo);
    }
  }
  for (  URI role : component.getRoles()) {
    this.addRole(URI.create(role.toString()));
  }
}","void copy(Component component) throws SBOLValidationException {
  ((ComponentInstance)this).copy((ComponentInstance)component);
  if (!component.getMapsTos().isEmpty()) {
    for (    MapsTo mapsTo : component.getMapsTos()) {
      MapsTo newMapsTo=this.createMapsTo(mapsTo.getDisplayId(),mapsTo.getRefinement(),mapsTo.getLocal().getDisplayId(),mapsTo.getRemoteURI());
      newMapsTo.copy(mapsTo);
    }
  }
  for (  URI role : component.getRoles()) {
    this.addRole(URI.create(role.toString()));
  }
}",0.9819639278557114
12507,"void copy(FunctionalComponent functionalComponent) throws SBOLValidationException {
  ((ComponentInstance)this).copy((ComponentInstance)functionalComponent);
  this.mapsTos=new HashMap<>();
  if (!functionalComponent.getMapsTos().isEmpty()) {
    for (    MapsTo mapsTo : functionalComponent.getMapsTos()) {
      MapsTo newMapsTo=this.createMapsTo(mapsTo.getDisplayId(),mapsTo.getRefinement(),mapsTo.getLocalURI(),mapsTo.getRemoteURI());
      newMapsTo.copy(mapsTo);
    }
  }
}","void copy(FunctionalComponent functionalComponent) throws SBOLValidationException {
  ((ComponentInstance)this).copy((ComponentInstance)functionalComponent);
  this.mapsTos=new HashMap<>();
  if (!functionalComponent.getMapsTos().isEmpty()) {
    for (    MapsTo mapsTo : functionalComponent.getMapsTos()) {
      MapsTo newMapsTo=this.createMapsTo(mapsTo.getDisplayId(),mapsTo.getRefinement(),mapsTo.getLocal().getDisplayId(),mapsTo.getRemoteURI());
      newMapsTo.copy(mapsTo);
    }
  }
}",0.9423868312757202
12508,"void copy(Interaction interaction) throws SBOLValidationException {
  ((Identified)this).copy(interaction);
  for (  Participation participation : interaction.getParticipations()) {
    Participation newParticipation=this.createParticipation(participation.getDisplayId(),participation.getParticipantURI(),participation.getRoles());
    newParticipation.copy(participation);
  }
}","void copy(Interaction interaction) throws SBOLValidationException {
  ((Identified)this).copy(interaction);
  for (  Participation participation : interaction.getParticipations()) {
    Participation newParticipation=this.createParticipation(participation.getDisplayId(),participation.getParticipant().getDisplayId(),participation.getRoles());
    newParticipation.copy(participation);
  }
}",0.9246753246753248
12509,"void copy(Module module) throws SBOLValidationException {
  ((Identified)this).copy((Identified)module);
  if (!module.getMapsTos().isEmpty()) {
    for (    MapsTo mapsTo : module.getMapsTos()) {
      MapsTo newMapsTo=this.createMapsTo(mapsTo.getDisplayId(),mapsTo.getRefinement(),mapsTo.getLocalURI(),mapsTo.getRemoteURI());
      newMapsTo.copy(mapsTo);
    }
  }
}","void copy(Module module) throws SBOLValidationException {
  ((Identified)this).copy((Identified)module);
  if (!module.getMapsTos().isEmpty()) {
    for (    MapsTo mapsTo : module.getMapsTos()) {
      MapsTo newMapsTo=this.createMapsTo(mapsTo.getDisplayId(),mapsTo.getRefinement(),mapsTo.getLocal().getDisplayId(),mapsTo.getRemoteURI());
      newMapsTo.copy(mapsTo);
    }
  }
}",0.9253333333333332
12510,"void copy(SequenceAnnotation sequenceAnnotation) throws SBOLValidationException {
  ((Identified)this).copy((Identified)sequenceAnnotation);
  for (  Location location : sequenceAnnotation.getLocations()) {
    if (location instanceof Range) {
      Range range=(Range)location;
      if (range.isSetOrientation()) {
        this.addRange(range.getDisplayId(),range.getStart(),range.getEnd(),range.getOrientation());
      }
 else {
        this.addRange(range.getDisplayId(),range.getStart(),range.getEnd());
      }
    }
 else     if (location instanceof Cut) {
      Cut cut=(Cut)location;
      if (cut.isSetOrientation()) {
        this.addCut(cut.getDisplayId(),cut.getAt(),cut.getOrientation());
      }
 else {
        this.addCut(cut.getDisplayId(),cut.getAt());
      }
    }
 else     if (location instanceof GenericLocation) {
      GenericLocation genericLocation=(GenericLocation)location;
      if (genericLocation.isSetOrientation()) {
        this.addGenericLocation(genericLocation.getDisplayId(),genericLocation.getOrientation());
      }
 else {
        this.addGenericLocation(genericLocation.getDisplayId());
      }
    }
  }
  Location location=this.getLocation(""String_Node_Str"");
  if (location != null) {
    this.removeLocation(location);
  }
  if (sequenceAnnotation.isSetComponent()) {
    this.setComponent(sequenceAnnotation.getComponentURI());
  }
  this.roles=new HashSet<>();
  for (  URI role : sequenceAnnotation.getRoles()) {
    this.addRole(URI.create(role.toString()));
  }
}","void copy(SequenceAnnotation sequenceAnnotation) throws SBOLValidationException {
  ((Identified)this).copy((Identified)sequenceAnnotation);
  for (  Location location : sequenceAnnotation.getLocations()) {
    if (location instanceof Range) {
      Range range=(Range)location;
      Range newRange;
      if (range.isSetOrientation()) {
        newRange=this.addRange(range.getDisplayId(),range.getStart(),range.getEnd(),range.getOrientation());
      }
 else {
        newRange=this.addRange(range.getDisplayId(),range.getStart(),range.getEnd());
      }
      newRange.copy(range);
    }
 else     if (location instanceof Cut) {
      Cut cut=(Cut)location;
      Cut newCut;
      if (cut.isSetOrientation()) {
        newCut=this.addCut(cut.getDisplayId(),cut.getAt(),cut.getOrientation());
      }
 else {
        newCut=this.addCut(cut.getDisplayId(),cut.getAt());
      }
      newCut.copy(cut);
    }
 else     if (location instanceof GenericLocation) {
      GenericLocation genericLocation=(GenericLocation)location;
      GenericLocation newGenericLocation;
      if (genericLocation.isSetOrientation()) {
        newGenericLocation=this.addGenericLocation(genericLocation.getDisplayId(),genericLocation.getOrientation());
      }
 else {
        newGenericLocation=this.addGenericLocation(genericLocation.getDisplayId());
      }
      newGenericLocation.copy(genericLocation);
    }
  }
  Location location=this.getLocation(""String_Node_Str"");
  if (location != null) {
    this.removeLocation(location);
  }
  if (sequenceAnnotation.isSetComponent()) {
    this.setComponent(sequenceAnnotation.getComponent().getDisplayId());
  }
  this.roles=new HashSet<>();
  for (  URI role : sequenceAnnotation.getRoles()) {
    this.addRole(URI.create(role.toString()));
  }
}",0.8580958156458459
12511,"/** 
 * @param componentDefinition
 * @param sequenceConstraint
 * @throws SBOLValidationException if any of the following SBOL validation rules was violated:11409, 11410, 11411.
 */
static void checkSequenceConstraint(ComponentDefinition componentDefinition,SequenceConstraint sequenceConstraint) throws SBOLValidationException {
  SequenceAnnotation saSubject=componentDefinition.getSequenceAnnotation(sequenceConstraint.getSubject());
  SequenceAnnotation saObject=componentDefinition.getSequenceAnnotation(sequenceConstraint.getObject());
  if (saSubject == null || saObject == null)   return;
  if (sequenceConstraint.getRestriction().equals(RestrictionType.PRECEDES)) {
    if (saObject.compareTo(saSubject) < 0) {
      throw new SBOLValidationException(""String_Node_Str"",sequenceConstraint);
    }
  }
 else   if (sequenceConstraint.getRestriction().equals(RestrictionType.SAME_ORIENTATION_AS)) {
    for (    Location locSubject : saSubject.getLocations()) {
      for (      Location locObject : saObject.getLocations()) {
        if (!locSubject.getOrientation().equals(locObject.getOrientation())) {
          throw new SBOLValidationException(""String_Node_Str"",sequenceConstraint);
        }
      }
    }
  }
 else   if (sequenceConstraint.getRestriction().equals(RestrictionType.OPPOSITE_ORIENTATION_AS)) {
    for (    Location locSubject : saSubject.getLocations()) {
      for (      Location locObject : saObject.getLocations()) {
        if (locSubject.getOrientation().equals(locObject.getOrientation())) {
          throw new SBOLValidationException(""String_Node_Str"",sequenceConstraint);
        }
      }
    }
  }
}","/** 
 * @param componentDefinition
 * @param sequenceConstraint
 * @throws SBOLValidationException if any of the following SBOL validation rules was violated:11409, 11410, 11411.
 */
static void checkSequenceConstraint(ComponentDefinition componentDefinition,SequenceConstraint sequenceConstraint) throws SBOLValidationException {
  SequenceAnnotation saSubject=componentDefinition.getSequenceAnnotation(sequenceConstraint.getSubject());
  SequenceAnnotation saObject=componentDefinition.getSequenceAnnotation(sequenceConstraint.getObject());
  if (saSubject == null || saObject == null)   return;
  if (sequenceConstraint.getRestriction().equals(RestrictionType.PRECEDES)) {
    if (saObject.compareTo(saSubject) != (-1) * Integer.MAX_VALUE && saObject.compareTo(saSubject) < 0) {
      throw new SBOLValidationException(""String_Node_Str"",sequenceConstraint);
    }
  }
 else   if (sequenceConstraint.getRestriction().equals(RestrictionType.SAME_ORIENTATION_AS)) {
    for (    Location locSubject : saSubject.getLocations()) {
      for (      Location locObject : saObject.getLocations()) {
        if (!locSubject.getOrientation().equals(locObject.getOrientation())) {
          throw new SBOLValidationException(""String_Node_Str"",sequenceConstraint);
        }
      }
    }
  }
 else   if (sequenceConstraint.getRestriction().equals(RestrictionType.OPPOSITE_ORIENTATION_AS)) {
    for (    Location locSubject : saSubject.getLocations()) {
      for (      Location locObject : saObject.getLocations()) {
        if (locSubject.getOrientation().equals(locObject.getOrientation())) {
          throw new SBOLValidationException(""String_Node_Str"",sequenceConstraint);
        }
      }
    }
  }
}",0.9817419934151452
12512,"@Override void checkDescendantsURIcompliance() throws SBOLValidationException {
  URIcompliance.isTopLevelURIformCompliant(this.getIdentity());
}","@Override void checkDescendantsURIcompliance(){
}",0.5051546391752577
12513,"/** 
 * @throws SBOLValidationException an SBOL validation rule violation occurred in either of the following methods:<ul> <li> {@link URIcompliance#isTopLevelURIformCompliant(URI)}, or</li> <li>  {@link URIcompliance#isChildURIcompliant(Identified,Identified)}.</li> </ul>
 */
@Override void checkDescendantsURIcompliance() throws SBOLValidationException {
  isTopLevelURIformCompliant(this.getIdentity());
  if (!this.getSequenceConstraints().isEmpty()) {
    for (    SequenceConstraint sequenceConstraint : this.getSequenceConstraints()) {
      try {
        isChildURIcompliant(this,sequenceConstraint);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(e.getRule(),sequenceConstraint);
      }
    }
  }
  if (!this.getComponents().isEmpty()) {
    for (    Component component : this.getComponents()) {
      try {
        isChildURIcompliant(this,component);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(e.getRule(),component);
      }
      if (!component.getMapsTos().isEmpty()) {
        for (        MapsTo mapsTo : component.getMapsTos()) {
          try {
            isChildURIcompliant(component,mapsTo);
          }
 catch (          SBOLValidationException e) {
            throw new SBOLValidationException(e.getRule(),mapsTo);
          }
        }
      }
    }
  }
  if (!this.getSequenceAnnotations().isEmpty()) {
    for (    SequenceAnnotation sequenceAnnotation : this.getSequenceAnnotations()) {
      try {
        isChildURIcompliant(this,sequenceAnnotation);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(e.getRule(),sequenceAnnotation);
      }
      Set<Location> locations=sequenceAnnotation.getLocations();
      for (      Location location : locations) {
        if (location instanceof Range) {
          try {
            isChildURIcompliant(sequenceAnnotation,location);
          }
 catch (          SBOLValidationException e) {
            throw new SBOLValidationException(e.getRule(),location);
          }
        }
        if (location instanceof Cut) {
          try {
            isChildURIcompliant(sequenceAnnotation,location);
          }
 catch (          SBOLValidationException e) {
            throw new SBOLValidationException(e.getRule(),location);
          }
        }
        if (location instanceof GenericLocation) {
          try {
            isChildURIcompliant(sequenceAnnotation,location);
          }
 catch (          SBOLValidationException e) {
            throw new SBOLValidationException(e.getRule(),location);
          }
        }
      }
    }
  }
}","/** 
 * @throws SBOLValidationException an SBOL validation rule violation occurred in either of the following methods:<ul> <li> {@link URIcompliance#isTopLevelURIformCompliant(URI)}, or</li> <li>  {@link URIcompliance#isChildURIcompliant(Identified,Identified)}.</li> </ul>
 */
@Override void checkDescendantsURIcompliance() throws SBOLValidationException {
  if (!this.getSequenceConstraints().isEmpty()) {
    for (    SequenceConstraint sequenceConstraint : this.getSequenceConstraints()) {
      try {
        isChildURIcompliant(this,sequenceConstraint);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(e.getRule(),sequenceConstraint);
      }
    }
  }
  if (!this.getComponents().isEmpty()) {
    for (    Component component : this.getComponents()) {
      try {
        isChildURIcompliant(this,component);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(e.getRule(),component);
      }
      if (!component.getMapsTos().isEmpty()) {
        for (        MapsTo mapsTo : component.getMapsTos()) {
          try {
            isChildURIcompliant(component,mapsTo);
          }
 catch (          SBOLValidationException e) {
            throw new SBOLValidationException(e.getRule(),mapsTo);
          }
        }
      }
    }
  }
  if (!this.getSequenceAnnotations().isEmpty()) {
    for (    SequenceAnnotation sequenceAnnotation : this.getSequenceAnnotations()) {
      try {
        isChildURIcompliant(this,sequenceAnnotation);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(e.getRule(),sequenceAnnotation);
      }
      Set<Location> locations=sequenceAnnotation.getLocations();
      for (      Location location : locations) {
        if (location instanceof Range) {
          try {
            isChildURIcompliant(sequenceAnnotation,location);
          }
 catch (          SBOLValidationException e) {
            throw new SBOLValidationException(e.getRule(),location);
          }
        }
        if (location instanceof Cut) {
          try {
            isChildURIcompliant(sequenceAnnotation,location);
          }
 catch (          SBOLValidationException e) {
            throw new SBOLValidationException(e.getRule(),location);
          }
        }
        if (location instanceof GenericLocation) {
          try {
            isChildURIcompliant(sequenceAnnotation,location);
          }
 catch (          SBOLValidationException e) {
            throw new SBOLValidationException(e.getRule(),location);
          }
        }
      }
    }
  }
}",0.9905267146646456
12514,"@Override void checkDescendantsURIcompliance() throws SBOLValidationException {
  URIcompliance.isTopLevelURIformCompliant(this.getIdentity());
}","@Override void checkDescendantsURIcompliance(){
}",0.5051546391752577
12515,"@Override void checkDescendantsURIcompliance() throws SBOLValidationException {
  URIcompliance.isTopLevelURIformCompliant(this.getIdentity());
}","@Override void checkDescendantsURIcompliance(){
}",0.5051546391752577
12516,"@Override public String toString(){
  return ""String_Node_Str"" + super.toString() + ""String_Node_Str""+ source+ ""String_Node_Str""+ language+ ""String_Node_Str""+ framework+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + this.getIdentity() + (this.isSetDisplayId() ? ""String_Node_Str"" + this.getDisplayId() : ""String_Node_Str"")+ (this.isSetName() ? ""String_Node_Str"" + this.getName() : ""String_Node_Str"")+ (this.isSetDescription() ? ""String_Node_Str"" + this.getDescription() : ""String_Node_Str"")+ ""String_Node_Str""+ source+ ""String_Node_Str""+ language+ ""String_Node_Str""+ framework+ ""String_Node_Str"";
}",0.5296803652968036
12517,"@Override void checkDescendantsURIcompliance() throws SBOLValidationException {
  isTopLevelURIformCompliant(this.getIdentity());
  if (!this.getModules().isEmpty()) {
    for (    Module module : this.getModules()) {
      try {
        isChildURIcompliant(this,module);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(e.getRule(),module);
      }
      if (!module.getMapsTos().isEmpty()) {
        for (        MapsTo mapsTo : module.getMapsTos()) {
          try {
            isChildURIcompliant(module,mapsTo);
          }
 catch (          SBOLValidationException e) {
            throw new SBOLValidationException(e.getRule(),mapsTo);
          }
        }
      }
    }
  }
  if (!this.getFunctionalComponents().isEmpty()) {
    for (    FunctionalComponent functionalComponent : this.getFunctionalComponents()) {
      try {
        isChildURIcompliant(this,functionalComponent);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(e.getRule(),functionalComponent);
      }
      if (!functionalComponent.getMapsTos().isEmpty()) {
        for (        MapsTo mapsTo : functionalComponent.getMapsTos()) {
          try {
            isChildURIcompliant(functionalComponent,mapsTo);
          }
 catch (          SBOLValidationException e) {
            throw new SBOLValidationException(e.getRule(),mapsTo);
          }
        }
      }
    }
  }
  if (!this.getInteractions().isEmpty()) {
    for (    Interaction interaction : this.getInteractions()) {
      try {
        isChildURIcompliant(this,interaction);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(e.getRule(),interaction);
      }
      for (      Participation participation : interaction.getParticipations()) {
        try {
          isChildURIcompliant(interaction,participation);
        }
 catch (        SBOLValidationException e) {
          throw new SBOLValidationException(e.getRule(),participation);
        }
      }
    }
  }
}","@Override void checkDescendantsURIcompliance() throws SBOLValidationException {
  if (!this.getModules().isEmpty()) {
    for (    Module module : this.getModules()) {
      try {
        isChildURIcompliant(this,module);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(e.getRule(),module);
      }
      if (!module.getMapsTos().isEmpty()) {
        for (        MapsTo mapsTo : module.getMapsTos()) {
          try {
            isChildURIcompliant(module,mapsTo);
          }
 catch (          SBOLValidationException e) {
            throw new SBOLValidationException(e.getRule(),mapsTo);
          }
        }
      }
    }
  }
  if (!this.getFunctionalComponents().isEmpty()) {
    for (    FunctionalComponent functionalComponent : this.getFunctionalComponents()) {
      try {
        isChildURIcompliant(this,functionalComponent);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(e.getRule(),functionalComponent);
      }
      if (!functionalComponent.getMapsTos().isEmpty()) {
        for (        MapsTo mapsTo : functionalComponent.getMapsTos()) {
          try {
            isChildURIcompliant(functionalComponent,mapsTo);
          }
 catch (          SBOLValidationException e) {
            throw new SBOLValidationException(e.getRule(),mapsTo);
          }
        }
      }
    }
  }
  if (!this.getInteractions().isEmpty()) {
    for (    Interaction interaction : this.getInteractions()) {
      try {
        isChildURIcompliant(this,interaction);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(e.getRule(),interaction);
      }
      for (      Participation participation : interaction.getParticipations()) {
        try {
          isChildURIcompliant(interaction,participation);
        }
 catch (        SBOLValidationException e) {
          throw new SBOLValidationException(e.getRule(),participation);
        }
      }
    }
  }
}",0.9876360039564788
12518,"/** 
 * @param identity a given identifier for this object
 * @return the new module definition
 * @throws SBOLValidationException if any of the following SBOL validation rules was violated: 10201, 10202, 10220.
 */
private ModuleDefinition createModuleDefinition(URI identity) throws SBOLValidationException {
  ModuleDefinition newModule=new ModuleDefinition(identity);
  addModuleDefinition(newModule);
  return newModule;
}","/** 
 * Creates a module definition with the given arguments, and then adds it to this SBOL document's list of module definitions. <p> This method first creates a compliant URI for the module definition to be retrieved. It starts with  the given URI prefix after its been successfully validated, optionally followed by its type, namely   {@link TopLevel#MODULE_DEFINITION}, followed by the given display ID, and ends with the given version.
 * @param URIprefix the URI prefix used to construct the compliant URI for the module definition to be created
 * @param displayId the display ID of the module definition to be created
 * @param version the version of the module definition to be created
 * @return the created module definition
 * @throws SBOLValidationException if any of the following SBOL validation rules was violated: 10201, 10202, 10204, 10206, 10220.
 */
public ModuleDefinition createModuleDefinition(String URIprefix,String displayId,String version) throws SBOLValidationException {
  URIprefix=URIcompliance.checkURIprefix(URIprefix);
  ModuleDefinition md=new ModuleDefinition(createCompliantURI(URIprefix,TopLevel.MODULE_DEFINITION,displayId,version,typesInURIs));
  md.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.MODULE_DEFINITION,displayId,""String_Node_Str"",typesInURIs));
  md.setDisplayId(displayId);
  md.setVersion(version);
  addModuleDefinition(md);
  return md;
}",0.2986376021798365
12519,"/** 
 * @param identity a given identifier for this object
 * @param rdfType a given QName for this annotated GenericTopLevel object
 * @return the new generic top level
 * @throws SBOLValidationException if any of the following condition is satisfied:<ul> <li>the following SBOL validation rule was violated: 12302;</li> <li>an SBOL validation rule violation occurred in  {@link GenericTopLevel#GenericTopLevel(URI,QName)}; or </li> <li>an SBOL validation rule violation occurred in   {@link #addGenericTopLevel(GenericTopLevel)}.</li> </ul>
 */
private GenericTopLevel createGenericTopLevel(URI identity,QName rdfType) throws SBOLValidationException {
  if (rdfType.getNamespaceURI().equals(Sbol2Terms.sbol2.getNamespaceURI()) || rdfType.getNamespaceURI().equals(Sbol1Terms.sbol1.getNamespaceURI())) {
    throw new SBOLValidationException(""String_Node_Str"");
  }
  GenericTopLevel newGenericTopLevel=new GenericTopLevel(identity,rdfType);
  addGenericTopLevel(newGenericTopLevel);
  return newGenericTopLevel;
}","/** 
 * Creates a generic top-level, and then adds it to this SBOL document's list of generic top-levels. <p> This method calls   {@link #createGenericTopLevel(String,String,String,QName)} with the default URIprefix of this SBOL document, the given component definition display ID and version, and the given RDF type. 
 * @param URIprefix the given URI prefix used to create a compliant URI for the generic top-level to be created 
 * @param displayId the display ID of the generic top-level to be created
 * @param version the version of the generic top-level to be created
 * @param rdfType the type of the generic top-level to be created
 * @return the created generic top-level
 * @throws SBOLValidationException if an SBOL validation rules was violated:10201, 10202, 10204, 10206, 10220, 10303, 10304, 10305, 10401, 10501, 10701, 10801, 10901, 11101, 11201, 11301,  11401, 11501, 11601, 11701, 11801, 11901, 12001, 12301, 12302. 
 */
public GenericTopLevel createGenericTopLevel(String URIprefix,String displayId,String version,QName rdfType) throws SBOLValidationException {
  URIprefix=URIcompliance.checkURIprefix(URIprefix);
  if (rdfType.getNamespaceURI().equals(Sbol2Terms.sbol2.getNamespaceURI()) || rdfType.getNamespaceURI().equals(Sbol1Terms.sbol1.getNamespaceURI())) {
    throw new SBOLValidationException(""String_Node_Str"");
  }
  GenericTopLevel g=new GenericTopLevel(createCompliantURI(URIprefix,TopLevel.GENERIC_TOP_LEVEL,displayId,version,typesInURIs),rdfType);
  g.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.GENERIC_TOP_LEVEL,displayId,""String_Node_Str"",typesInURIs));
  g.setDisplayId(displayId);
  g.setVersion(version);
  addGenericTopLevel(g);
  return g;
}",0.3795136330140015
12520,"/** 
 * @param identity a given identifier for this object
 * @param version The given version for this object
 * @param source location of the actual content of the model
 * @param language the language in which the model is implemented
 * @param framework the framework in which the model is implemented
 * @return the new model
 * @throws SBOLValidationException if an SBOL validation rule violation occurred in either of the followingconstructor or method: <ul> <li> {@link Model#Model(URI,URI,URI,URI)}, or</li> <li>  {@link #addModel(Model)}.</li> </ul>
 */
private Model createModel(URI identity,URI source,URI language,URI framework) throws SBOLValidationException {
  Model newModel=new Model(identity,source,language,framework);
  addModel(newModel);
  return newModel;
}","/** 
 * Creates a model, and then adds it to this SBOL document's list of models. <p> This method first creates a compliant URI for the model to be created. It starts with the  given URI prefix, followed by the given display ID, and ends with the given version. 
 * @param URIprefix the URI prefix used to construct the compliant URI for the model to be created
 * @param displayId the display ID of the model to be created
 * @param version the version of the model to be created
 * @param source the source of the model to be created
 * @param language the language of the model to be created
 * @param framework the framework of the model to be created
 * @return the created model 
 * @throws SBOLValidationException if any of the following SBOL validation rules was violated: 10201, 10202, 10204, 10206, 10220,   10303, 10304, 10305, 10401, 10501, 10701, 10801, 10901, 11101, 11201, 11301, 11401,  11501, 11502, 11504, 11508,  11601, 11701, 11801, 11901, 12001, 12301.
 */
public Model createModel(String URIprefix,String displayId,String version,URI source,URI language,URI framework) throws SBOLValidationException {
  URIprefix=URIcompliance.checkURIprefix(URIprefix);
  Model model=new Model(createCompliantURI(URIprefix,TopLevel.MODEL,displayId,version,typesInURIs),source,language,framework);
  model.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.MODEL,displayId,""String_Node_Str"",typesInURIs));
  model.setDisplayId(displayId);
  model.setVersion(version);
  addModel(model);
  return model;
}",0.2660869565217391
12521,"/** 
 * Creates a Sequence instance with the given arguments, and then adds it to this SBOLDocument object's list of Sequence instances. <p> If the given   {@code URIprefix} does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it. <p> This method requires that the given  {@code URIprefix}, display ID, and version are not   {@code null} and are valid.<p> A Sequence instance is created with a compliant URI. This URI is composed from the given  {@code URIprefix}, the optional type   {@link TopLevel#SEQUENCE}, the given display ID, and version. The display ID, persistent identity, and version fields of this instance are then set accordingly.
 * @param URIprefix maps to a domain over which the user has control
 * @param displayId  an intermediate between name and identity that is machine-readable
 * @param version The given version for this object
 * @param elements characters that represents the constituents of a biological or chemical molecule (i.e. nucleotide bases of a molecule of DNA, the amino acid residues of a protein, or the atoms and chemical bonds of a small molecule)
 * @param encoding Indicate how the elements property of a Sequence must be formed and interpreted
 * @return the created Sequence instance
 * @throws SBOLValidationException if if any of the following SBOL validation rules was violated:10201, 10202, 10204, 10206, 10220, 10402, 10403, 10405. 
 */
public Sequence createSequence(String URIprefix,String displayId,String version,String elements,URI encoding) throws SBOLValidationException {
  URIprefix=URIcompliance.checkURIprefix(URIprefix);
  Sequence s=createSequence(createCompliantURI(URIprefix,TopLevel.SEQUENCE,displayId,version,typesInURIs),elements,encoding);
  s.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.SEQUENCE,displayId,""String_Node_Str"",typesInURIs));
  s.setDisplayId(displayId);
  s.setVersion(version);
  return s;
}","/** 
 * Creates a Sequence instance with the given arguments, and then adds it to this SBOLDocument object's list of Sequence instances. <p> If the given   {@code URIprefix} does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it. <p> This method requires that the given  {@code URIprefix}, display ID, and version are not   {@code null} and are valid.<p> A Sequence instance is created with a compliant URI. This URI is composed from the given  {@code URIprefix}, the optional type   {@link TopLevel#SEQUENCE}, the given display ID, and version. The display ID, persistent identity, and version fields of this instance are then set accordingly.
 * @param URIprefix maps to a domain over which the user has control
 * @param displayId  an intermediate between name and identity that is machine-readable
 * @param version The given version for this object
 * @param elements characters that represents the constituents of a biological or chemical molecule (i.e. nucleotide bases of a molecule of DNA, the amino acid residues of a protein, or the atoms and chemical bonds of a small molecule)
 * @param encoding Indicate how the elements property of a Sequence must be formed and interpreted
 * @return the created Sequence instance
 * @throws SBOLValidationException if if any of the following SBOL validation rules was violated:10201, 10202, 10204, 10206, 10220, 10402, 10403, 10405. 
 */
public Sequence createSequence(String URIprefix,String displayId,String version,String elements,URI encoding) throws SBOLValidationException {
  URIprefix=URIcompliance.checkURIprefix(URIprefix);
  Sequence s=new Sequence(createCompliantURI(URIprefix,TopLevel.SEQUENCE,displayId,version,typesInURIs),elements,encoding);
  s.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.SEQUENCE,displayId,""String_Node_Str"",typesInURIs));
  s.setDisplayId(displayId);
  s.setVersion(version);
  addSequence(s);
  return s;
}",0.992827868852459
12522,"/** 
 * @param newTopLevel
 * @param instancesMap
 * @param typeName
 * @param maps
 * @throws SBOLValidationException if either of the following SBOL validation rules was violated:10202, 10220. 
 */
@SafeVarargs private final <TL extends TopLevel>void addTopLevel(TL newTopLevel,Map<URI,TL> instancesMap,String typeName,Map<URI,? extends Identified>... maps) throws SBOLValidationException {
  boolean childrenCompliant=true;
  try {
    newTopLevel.checkDescendantsURIcompliance();
  }
 catch (  SBOLValidationException e) {
    childrenCompliant=false;
  }
  if (compliant && childrenCompliant) {
    URI persistentId=URI.create(extractPersistentId(newTopLevel.getIdentity()));
    if (keyExistsInAnyMap(persistentId,maps))     throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
    if (instancesMap.containsKey(newTopLevel.getIdentity()))     throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
    String prefix=extractURIprefix(persistentId);
    while (prefix != null) {
      if (keyExistsInAnyMap(URI.create(prefix),maps))       throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
      if (instancesMap.containsKey(URI.create(prefix)))       throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
      prefix=extractURIprefix(URI.create(prefix));
    }
    if (prefixes.contains(persistentId.toString())) {
      throw new IllegalArgumentException(""String_Node_Str"" + persistentId.toString() + ""String_Node_Str"");
    }
    prefix=extractURIprefix(persistentId);
    while (prefix != null) {
      prefixes.add(prefix);
      prefix=extractURIprefix(URI.create(prefix));
    }
    instancesMap.put(newTopLevel.getIdentity(),newTopLevel);
    Identified latest=instancesMap.get(persistentId);
    if (latest == null) {
      instancesMap.put(persistentId,newTopLevel);
    }
 else {
      if (isFirstVersionNewer(extractVersion(newTopLevel.getIdentity()),extractVersion(latest.getIdentity()))) {
        instancesMap.put(persistentId,newTopLevel);
      }
    }
  }
 else {
    if (keyExistsInAnyMap(newTopLevel.getIdentity()))     throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
    if (instancesMap.containsKey(newTopLevel.getIdentity()))     throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
    instancesMap.put(newTopLevel.getIdentity(),newTopLevel);
    if (newTopLevel.isSetPersistentIdentity()) {
      Identified latest=instancesMap.get(newTopLevel.getPersistentIdentity());
      if (latest == null) {
        instancesMap.put(newTopLevel.getPersistentIdentity(),newTopLevel);
      }
 else {
        if (isFirstVersionNewer(extractVersion(newTopLevel.getIdentity()),extractVersion(latest.getIdentity()))) {
          instancesMap.put(newTopLevel.getPersistentIdentity(),newTopLevel);
        }
      }
    }
  }
  newTopLevel.setSBOLDocument(this);
}","/** 
 * @param newTopLevel
 * @param instancesMap
 * @param typeName
 * @param maps
 * @throws SBOLValidationException if either of the following SBOL validation rules was violated:10202, 10220. 
 */
@SafeVarargs private final <TL extends TopLevel>void addTopLevel(TL newTopLevel,Map<URI,TL> instancesMap,String typeName,Map<URI,? extends Identified>... maps) throws SBOLValidationException {
  boolean childrenCompliant=true;
  try {
    URIcompliance.isURIcompliant(newTopLevel);
  }
 catch (  SBOLValidationException e) {
    childrenCompliant=false;
  }
  if (compliant && childrenCompliant) {
    URI persistentId=URI.create(extractPersistentId(newTopLevel.getIdentity()));
    if (keyExistsInAnyMap(persistentId,maps))     throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
    if (instancesMap.containsKey(newTopLevel.getIdentity()))     throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
    String prefix=extractURIprefix(persistentId);
    while (prefix != null) {
      if (keyExistsInAnyMap(URI.create(prefix),maps))       throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
      if (instancesMap.containsKey(URI.create(prefix)))       throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
      prefix=extractURIprefix(URI.create(prefix));
    }
    if (prefixes.contains(persistentId.toString())) {
      throw new IllegalArgumentException(""String_Node_Str"" + persistentId.toString() + ""String_Node_Str"");
    }
    prefix=extractURIprefix(persistentId);
    while (prefix != null) {
      prefixes.add(prefix);
      prefix=extractURIprefix(URI.create(prefix));
    }
    instancesMap.put(newTopLevel.getIdentity(),newTopLevel);
    Identified latest=instancesMap.get(persistentId);
    if (latest == null) {
      instancesMap.put(persistentId,newTopLevel);
    }
 else {
      if (isFirstVersionNewer(extractVersion(newTopLevel.getIdentity()),extractVersion(latest.getIdentity()))) {
        instancesMap.put(persistentId,newTopLevel);
      }
    }
  }
 else {
    if (keyExistsInAnyMap(newTopLevel.getIdentity()))     throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
    if (instancesMap.containsKey(newTopLevel.getIdentity()))     throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
    instancesMap.put(newTopLevel.getIdentity(),newTopLevel);
    if (newTopLevel.isSetPersistentIdentity()) {
      Identified latest=instancesMap.get(newTopLevel.getPersistentIdentity());
      if (latest == null) {
        instancesMap.put(newTopLevel.getPersistentIdentity(),newTopLevel);
      }
 else {
        if (isFirstVersionNewer(extractVersion(newTopLevel.getIdentity()),extractVersion(latest.getIdentity()))) {
          instancesMap.put(newTopLevel.getPersistentIdentity(),newTopLevel);
        }
      }
    }
  }
  newTopLevel.setSBOLDocument(this);
}",0.9902029391182644
12523,"/** 
 * Creates a collection first, and then adds to this SBOL document's list of collections. <p> This method creates a compliant URI for the collection to be created first. It starts with  the given URI prefix after its been successfully validated, followed by the given display ID,  and ends with the given version.
 * @param URIprefix the URI prefix for the collection to be created
 * @param displayId the display ID of the collection to be created
 * @param version the version of the collection to be created
 * @return the created collection 
 * @throws SBOLValidationException if any of the following SBOL validation rules was violated:10201, 10204, 10206.
 */
public Collection createCollection(String URIprefix,String displayId,String version) throws SBOLValidationException {
  URIprefix=URIcompliance.checkURIprefix(URIprefix);
  Collection c=createCollection(createCompliantURI(URIprefix,TopLevel.COLLECTION,displayId,version,typesInURIs));
  c.setDisplayId(displayId);
  c.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.COLLECTION,displayId,""String_Node_Str"",typesInURIs));
  c.setVersion(version);
  return c;
}","/** 
 * Creates a collection first, and then adds to this SBOL document's list of collections. <p> This method creates a compliant URI for the collection to be created first. It starts with  the given URI prefix after its been successfully validated, followed by the given display ID,  and ends with the given version.
 * @param URIprefix the URI prefix for the collection to be created
 * @param displayId the display ID of the collection to be created
 * @param version the version of the collection to be created
 * @return the created collection 
 * @throws SBOLValidationException if any of the following SBOL validation rules was violated:10201, 10204, 10206.
 */
public Collection createCollection(String URIprefix,String displayId,String version) throws SBOLValidationException {
  URIprefix=URIcompliance.checkURIprefix(URIprefix);
  Collection c=new Collection(createCompliantURI(URIprefix,TopLevel.COLLECTION,displayId,version,typesInURIs));
  c.setDisplayId(displayId);
  c.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.COLLECTION,displayId,""String_Node_Str"",typesInURIs));
  c.setVersion(version);
  addCollection(c);
  return c;
}",0.9869451697127938
12524,"/** 
 * Removes all non-required namespaces from this SBOL document. <p> This method calls   {@link #removeNamespace(URI)} to iteratively remove each non-required namespace.
 */
public void clearNamespaces(){
  Object[] keySetArray=nameSpaces.keySet().toArray();
  for (  Object key : keySetArray) {
    if (isRequiredNamespaceBinding((URI)key))     continue;
    removeNamespace((URI)key);
  }
}","/** 
 * Removes all non-required namespaces from this SBOL document. <p> This method calls   {@link #removeNamespace(URI)} to iteratively remove each non-required namespace.
 */
public void clearNamespaces(){
  Object[] keySetArray=nameSpaces.keySet().toArray();
  for (  Object key : keySetArray) {
    if (isRequiredNamespaceBinding(URI.create((String)key)))     continue;
    removeNamespace(URI.create((String)key));
  }
}",0.9391727493917276
12525,"@Test public void test_namespaceMethods() throws URISyntaxException {
  List<QName> doc_namespaces=doc.getNamespaces();
  QName namespace=doc_namespaces.get(0);
  assertTrue(doc.getNamespaces().size() == 4);
  QName created_ns=new QName(""String_Node_Str"");
  doc.addNamespace(created_ns);
  assertTrue(doc.getNamespaces().size() == 5);
  doc.removeNamespace(new URI(created_ns.getNamespaceURI()));
  assertTrue(doc.getNamespace(new URI(created_ns.getNamespaceURI())).toString().length() == 0);
  doc.addNamespace(created_ns);
  assertTrue(doc.getNamespaces().size() == 5);
}","@Test public void test_namespaceMethods() throws URISyntaxException {
  List<QName> doc_namespaces=doc.getNamespaces();
  QName namespace=doc_namespaces.get(0);
  assertTrue(doc.getNamespaces().size() == 4);
  QName created_ns=new QName(""String_Node_Str"");
  doc.addNamespace(created_ns);
  assertTrue(doc.getNamespaces().size() == 5);
  doc.removeNamespace(new URI(created_ns.getNamespaceURI()));
  assertTrue(doc.getNamespace(new URI(created_ns.getNamespaceURI())).toString().length() == 0);
  doc.addNamespace(created_ns);
  assertTrue(doc.getNamespaces().size() == 5);
  doc.clearNamespaces();
}",0.9786871270247228
12526,"/** 
 * Sets the reference definition URI to this module. <p> This method creates a compliant local and a compliant remote URIs. They are created with this Module object's persistent ID, the given   {@code localId} or {@code remoteId}, and this Module object's version. It then calls   {@link #createMapsTo(String,RefinementType,URI,URI)} to createa MapsTo instance.
 * @param definitionURI The definition URI for this Module.
 * @throws SBOLValidationException if either of the following SBOL validation rule was violated: 11702, 11703.
 */
public void setDefinition(URI definitionURI) throws SBOLValidationException {
  if (definitionURI == null) {
    throw new SBOLValidationException(""String_Node_Str"",this);
  }
  if (sbolDocument != null && sbolDocument.isComplete()) {
    if (sbolDocument.getModuleDefinition(definitionURI) == null) {
      throw new SBOLValidationException(""String_Node_Str"",this);
    }
  }
  this.definition=definitionURI;
}","/** 
 * Sets the reference definition URI to this module. <p> This method creates a compliant local and a compliant remote URIs. They are created with this Module object's persistent ID, the given   {@code localId} or {@code remoteId}, and this Module object's version. It then calls   {@link #createMapsTo(String,RefinementType,URI,URI)} to createa MapsTo instance.
 * @param definitionURI The definition URI for this Module.
 * @throws SBOLValidationException if either of the following SBOL validation rule was violated: 11702, 11703, 11704, 11705.
 */
public void setDefinition(URI definitionURI) throws SBOLValidationException {
  if (definitionURI == null) {
    throw new SBOLValidationException(""String_Node_Str"",this);
  }
  if (sbolDocument != null) {
    if (sbolDocument.isComplete()) {
      if (sbolDocument.getModuleDefinition(definitionURI) == null) {
        throw new SBOLValidationException(""String_Node_Str"",this);
      }
    }
    if (moduleDefinition != null) {
      ModuleDefinition md=sbolDocument.getModuleDefinition(definitionURI);
      if (md != null && moduleDefinition.getIdentity().equals(md.getIdentity())) {
        throw new SBOLValidationException(""String_Node_Str"",this);
      }
      Set<URI> visited=new HashSet<>();
      visited.add(moduleDefinition.getIdentity());
      try {
        SBOLValidate.checkModuleDefinitionCycle(sbolDocument,md,visited);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(""String_Node_Str"",this);
      }
    }
  }
  this.definition=definitionURI;
}",0.7418586179507546
12527,"/** 
 * Top level types
 * @param args 
 * @throws SBOLValidationException 
 * @throws SBOLConversionException 
 * @throws IOException 
 * @throws CoreIoException 
 * @throws XMLStreamException 
 */
public static void main(String[] args) throws SBOLValidationException, SBOLConversionException, IOException {
  SequenceOntology seqOn=new SequenceOntology();
  System.out.println(seqOn.isDescendantOf(SequenceOntology.TERMINATOR,URI.create(""String_Node_Str"")));
  for (  URI child : seqOn.getDescendantURIsOf(SequenceOntology.TERMINATOR)) {
    System.out.println(child.toString());
  }
  SBOLDocument document=new SBOLDocument();
  document.setDefaultURIprefix(""String_Node_Str"");
  ComponentDefinition cd=document.createComponentDefinition(""String_Node_Str"",ComponentDefinition.DNA);
  document.createComponentDefinition(""String_Node_Str"",ComponentDefinition.DNA);
  Component comp=cd.createComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"");
  comp.addRole(SequenceOntology.PROMOTER);
  comp.setRoleIntegration(RoleIntegrationType.MERGEROLES);
  SequenceAnnotation sa=cd.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"");
  sa.addRole(SequenceOntology.PROMOTER);
  sa.setRoleIntegration(RoleIntegrationType.OVERRIDEROLES);
  SBOLDocument actual=SBOLTestUtils.writeAndRead(document,true);
  actual.write(System.out);
  Sequence seq=document.createSequence(""String_Node_Str"",""String_Node_Str"",org.sbolstandard.core2.Sequence.IUPAC_DNA);
  document.addNamespace(URI.create(""String_Node_Str""),""String_Node_Str"");
  Annotation an=new Annotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
  Annotation an2=new Annotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
  List<Annotation> annos=new ArrayList<Annotation>();
  annos.add(an);
  annos.add(an2);
  seq.createAnnotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),URI.create(""String_Node_Str""),annos);
  get_myParts(sbolDocument);
  sbolDocument.getComponentDefinition(""String_Node_Str"",""String_Node_Str"");
  SBOLValidate.validateSBOL(sbolDocument,true,true,true);
  if (SBOLValidate.getNumErrors() > 0) {
    for (    String error : SBOLValidate.getErrors()) {
      System.out.println(error);
    }
  }
  SBOLWriter.write(sbolDocument,(System.out),SBOLDocument.RDFV1);
}","/** 
 * Top level types
 * @param args 
 * @throws SBOLValidationException 
 * @throws SBOLConversionException 
 * @throws IOException 
 * @throws CoreIoException 
 * @throws XMLStreamException 
 */
public static void main(String[] args) throws SBOLValidationException, SBOLConversionException, IOException {
  SequenceOntology seqOn=new SequenceOntology();
  System.out.println(seqOn.isDescendantOf(SequenceOntology.TERMINATOR,URI.create(""String_Node_Str"")));
  for (  URI child : seqOn.getDescendantURIsOf(SequenceOntology.TERMINATOR)) {
    System.out.println(child.toString());
  }
  SBOLDocument document=new SBOLDocument();
  document.setDefaultURIprefix(""String_Node_Str"");
  ComponentDefinition cd=document.createComponentDefinition(""String_Node_Str"",ComponentDefinition.DNA);
  document.createComponentDefinition(""String_Node_Str"",ComponentDefinition.DNA);
  Component comp=cd.createComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"");
  comp.setDefinition(cd.getIdentity());
  comp.addRole(SequenceOntology.PROMOTER);
  comp.setRoleIntegration(RoleIntegrationType.MERGEROLES);
  SequenceAnnotation sa=cd.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"");
  sa.addRole(SequenceOntology.PROMOTER);
  sa.setRoleIntegration(RoleIntegrationType.OVERRIDEROLES);
  SBOLDocument actual=SBOLTestUtils.writeAndRead(document,true);
  actual.write(System.out);
  Sequence seq=document.createSequence(""String_Node_Str"",""String_Node_Str"",org.sbolstandard.core2.Sequence.IUPAC_DNA);
  document.addNamespace(URI.create(""String_Node_Str""),""String_Node_Str"");
  Annotation an=new Annotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
  Annotation an2=new Annotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
  List<Annotation> annos=new ArrayList<Annotation>();
  annos.add(an);
  annos.add(an2);
  seq.createAnnotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),URI.create(""String_Node_Str""),annos);
  get_myParts(sbolDocument);
  sbolDocument.getComponentDefinition(""String_Node_Str"",""String_Node_Str"");
  SBOLValidate.validateSBOL(sbolDocument,true,true,true);
  if (SBOLValidate.getNumErrors() > 0) {
    for (    String error : SBOLValidate.getErrors()) {
      System.out.println(error);
    }
  }
  SBOLWriter.write(sbolDocument,(System.out),SBOLDocument.RDFV1);
}",0.9918066366243344
12528,"/** 
 * Returns a set of child ids that are descendants of a given parent URI. 
 * @param parentURI the URI of the parent term
 * @return a set of child ids that are descendants of a given parent URI. 
 */
public final Set<String> getDescendantsOf(URI parentURI){
  String parentId=getId(parentURI);
  return getDescendantsOf(parentId);
}","/** 
 * Returns a set of child ids that are descendants of a given parent URI. 
 * @param parentURI the URI of the parent term
 * @return a set of child ids that are descendants of a given parent URI. 
 */
public final Set<String> getDescendantsOf(URI parentURI){
  String parentId=getId(parentURI);
  if (parentId == null)   return new HashSet<String>();
  return getDescendantsOf(parentId);
}",0.9234972677595628
12529,"/** 
 * Returns   {@code true} if the stanza with childURI is a descendant of the stanza with parentURI.
 * @param childURI the given stanza's URI
 * @param parentURI the given stanza's URI
 * @return {@code true} if the stanza with childURI is a descendant of the stanza with parentURI, {@code false} otherwise.
 */
public final boolean isDescendantOf(URI childURI,URI parentURI){
  String childId=getId(childURI);
  String parentId=getId(parentURI);
  return isDescendantOf(childId,parentId);
}","/** 
 * Returns   {@code true} if the stanza with childURI is a descendant of the stanza with parentURI.
 * @param childURI the given stanza's URI
 * @param parentURI the given stanza's URI
 * @return {@code true} if the stanza with childURI is a descendant of the stanza with parentURI, {@code false} otherwise.
 */
public final boolean isDescendantOf(URI childURI,URI parentURI){
  String childId=getId(childURI);
  String parentId=getId(parentURI);
  if (childId == null || parentId == null)   return false;
  return isDescendantOf(childId,parentId);
}",0.9438629876308278
12530,"/** 
 * Creates a new URI from the EDAM Ontology namespace with the given local name. For example, the function call <code>term(""format_1915"")</code> will return the URI <a>http://purl.obolibrary.org/edam/format_1915</a>
 * @param localName the given local name
 * @return the created URI
 */
public static final URI type(String localName){
  return URI.create(URI_PREFIX + localName);
}","/** 
 * Creates a new URI from the EDAM Ontology namespace with the given local name. For example, the function call <code>term(""format_1915"")</code> will return the URI <a>http://purl.obolibrary.org/edam/format_1915</a>
 * @param localName the given local name
 * @return the created URI
 */
static final URI type(String localName){
  return URI.create(URI_PREFIX + localName);
}",0.9908735332464146
12531,"/** 
 * Returns a set of child ids that are descendants of a given parent URI. 
 * @param parentURI the URI of the parent term
 * @return a set of child ids that are descendants of a given parent URI. 
 */
public final Set<String> getDescendantsOf(URI parentURI){
  String parentId=getId(parentURI);
  return getDescendantsOf(parentId);
}","/** 
 * Returns a set of child ids that are descendants of a given parent URI. 
 * @param parentURI the URI of the parent term
 * @return a set of child ids that are descendants of a given parent URI. 
 */
public final Set<String> getDescendantsOf(URI parentURI){
  String parentId=getId(parentURI);
  if (parentId == null)   return new HashSet<String>();
  return getDescendantsOf(parentId);
}",0.9234972677595628
12532,"/** 
 * Returns   {@code true} if the term with childURI is a descendant of the term with parentURI. This method firstextracts IDs for the child and parent terms, and then pass them to  {@link #isDescendantOf(String,String)}.  
 * @param childURI the URI of the child term
 * @param parentURI the URI of the parent term
 * @return {@code true} if the term with childURI is a descendant of the term with parentURI, {@code false} otherwise.
 */
public final boolean isDescendantOf(URI childURI,URI parentURI){
  String childId=getId(childURI);
  String parentId=getId(parentURI);
  return isDescendantOf(childId,parentId);
}","/** 
 * Returns   {@code true} if the term with childURI is a descendant of the term with parentURI. This method firstextracts IDs for the child and parent terms, and then pass them to  {@link #isDescendantOf(String,String)}.  
 * @param childURI the URI of the child term
 * @param parentURI the URI of the parent term
 * @return {@code true} if the term with childURI is a descendant of the term with parentURI, {@code false} otherwise.
 */
public final boolean isDescendantOf(URI childURI,URI parentURI){
  String childId=getId(childURI);
  String parentId=getId(parentURI);
  if (childId == null || parentId == null)   return false;
  return isDescendantOf(childId,parentId);
}",0.9547198772064468
12533,"/** 
 * Creates a new URI from the Sequence Ontology (SO) namespace, i.e. ""http://identifiers.org/so/"", with the given ID.  For example, the method call <code>type(""SO:0000001"")</code> will return the URI <a>http://identifiers.org/so/SO:0000001</a>
 * @param id the ID of an SO term
 * @return the created URI
 */
public static final URI type(String id){
  return URI.create(URI_PREFIX + id);
}","/** 
 * Creates a new URI from the Sequence Ontology (SO) namespace, i.e. ""http://identifiers.org/so/"", with the given ID.  For example, the method call <code>type(""SO:0000001"")</code> will return the URI <a>http://identifiers.org/so/SO:0000001</a>
 * @param id the ID of an SO term
 * @return the created URI
 */
static final URI type(String id){
  return URI.create(URI_PREFIX + id);
}",0.9910371318822024
12534,"/** 
 * Returns a set of child ids that are descendants of a given parent URI. 
 * @param parentURI the URI of the parent term
 * @return a set of child ids that are descendants of a given parent URI. 
 */
public final Set<String> getDescendantsOf(URI parentURI){
  String parentId=getId(parentURI);
  return getDescendantsOf(parentId);
}","/** 
 * Returns a set of child ids that are descendants of a given parent URI. 
 * @param parentURI the URI of the parent term
 * @return a set of child ids that are descendants of a given parent URI. 
 */
public final Set<String> getDescendantsOf(URI parentURI){
  String parentId=getId(parentURI);
  if (parentId == null)   return new HashSet<String>();
  return getDescendantsOf(parentId);
}",0.9234972677595628
12535,"/** 
 * Creates a new URI from the Systems Biology Ontology (SBO) namespace with the given local name. For example, the method call <code>term(""SBO_0000001"")</code> will return the URI <a>http://purl.obolibrary.org/obo/SBO_0000001</a>
 * @param id the ID of a SBO term
 * @return the created URI
 */
public static final URI type(String id){
  return URI.create(URI_PREFIX + id);
}","/** 
 * Creates a new URI from the Systems Biology Ontology (SBO) namespace with the given local name. For example, the method call <code>term(""SBO_0000001"")</code> will return the URI <a>http://purl.obolibrary.org/obo/SBO_0000001</a>
 * @param id the ID of a SBO term
 * @return the created URI
 */
static final URI type(String id){
  return URI.create(URI_PREFIX + id);
}",0.9907038512616202
12536,"/** 
 * Top level types
 * @param args 
 * @throws SBOLValidationException 
 * @throws SBOLConversionException 
 * @throws IOException 
 * @throws CoreIoException 
 * @throws XMLStreamException 
 */
public static void main(String[] args) throws SBOLValidationException, SBOLConversionException, IOException {
  SequenceOntology seqOn=new SequenceOntology();
  for (  URI child : seqOn.getDescendantURIsOf(SequenceOntology.TERMINATOR)) {
    System.out.println(child.toString());
  }
  SBOLDocument document=new SBOLDocument();
  document.setDefaultURIprefix(""String_Node_Str"");
  ComponentDefinition cd=document.createComponentDefinition(""String_Node_Str"",ComponentDefinition.DNA);
  document.createComponentDefinition(""String_Node_Str"",ComponentDefinition.DNA);
  Component comp=cd.createComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"");
  comp.addRole(SequenceOntology.PROMOTER);
  comp.setRoleIntegration(RoleIntegrationType.MERGEROLES);
  SequenceAnnotation sa=cd.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"");
  sa.addRole(SequenceOntology.PROMOTER);
  sa.setRoleIntegration(RoleIntegrationType.OVERRIDEROLES);
  SBOLDocument actual=SBOLTestUtils.writeAndRead(document,true);
  actual.write(System.out);
  Sequence seq=document.createSequence(""String_Node_Str"",""String_Node_Str"",org.sbolstandard.core2.Sequence.IUPAC_DNA);
  document.addNamespace(URI.create(""String_Node_Str""),""String_Node_Str"");
  Annotation an=new Annotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
  Annotation an2=new Annotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
  List<Annotation> annos=new ArrayList<Annotation>();
  annos.add(an);
  annos.add(an2);
  seq.createAnnotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),URI.create(""String_Node_Str""),annos);
  get_myParts(sbolDocument);
  sbolDocument.getComponentDefinition(""String_Node_Str"",""String_Node_Str"");
  SBOLValidate.validateSBOL(sbolDocument,true,true,true);
  if (SBOLValidate.getNumErrors() > 0) {
    for (    String error : SBOLValidate.getErrors()) {
      System.out.println(error);
    }
  }
  SBOLWriter.write(sbolDocument,(System.out),SBOLDocument.RDFV1);
}","/** 
 * Top level types
 * @param args 
 * @throws SBOLValidationException 
 * @throws SBOLConversionException 
 * @throws IOException 
 * @throws CoreIoException 
 * @throws XMLStreamException 
 */
public static void main(String[] args) throws SBOLValidationException, SBOLConversionException, IOException {
  SequenceOntology seqOn=new SequenceOntology();
  System.out.println(seqOn.isDescendantOf(SequenceOntology.TERMINATOR,URI.create(""String_Node_Str"")));
  for (  URI child : seqOn.getDescendantURIsOf(SequenceOntology.TERMINATOR)) {
    System.out.println(child.toString());
  }
  SBOLDocument document=new SBOLDocument();
  document.setDefaultURIprefix(""String_Node_Str"");
  ComponentDefinition cd=document.createComponentDefinition(""String_Node_Str"",ComponentDefinition.DNA);
  document.createComponentDefinition(""String_Node_Str"",ComponentDefinition.DNA);
  Component comp=cd.createComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"");
  comp.addRole(SequenceOntology.PROMOTER);
  comp.setRoleIntegration(RoleIntegrationType.MERGEROLES);
  SequenceAnnotation sa=cd.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"");
  sa.addRole(SequenceOntology.PROMOTER);
  sa.setRoleIntegration(RoleIntegrationType.OVERRIDEROLES);
  SBOLDocument actual=SBOLTestUtils.writeAndRead(document,true);
  actual.write(System.out);
  Sequence seq=document.createSequence(""String_Node_Str"",""String_Node_Str"",org.sbolstandard.core2.Sequence.IUPAC_DNA);
  document.addNamespace(URI.create(""String_Node_Str""),""String_Node_Str"");
  Annotation an=new Annotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
  Annotation an2=new Annotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
  List<Annotation> annos=new ArrayList<Annotation>();
  annos.add(an);
  annos.add(an2);
  seq.createAnnotation(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),URI.create(""String_Node_Str""),annos);
  get_myParts(sbolDocument);
  sbolDocument.getComponentDefinition(""String_Node_Str"",""String_Node_Str"");
  SBOLValidate.validateSBOL(sbolDocument,true,true,true);
  if (SBOLValidate.getNumErrors() > 0) {
    for (    String error : SBOLValidate.getErrors()) {
      System.out.println(error);
    }
  }
  SBOLWriter.write(sbolDocument,(System.out),SBOLDocument.RDFV1);
}",0.9782654568474362
12537,"@Override public int compareTo(Location location){
  int thisPos=-1;
  Annotation annotation=this.getAnnotation(new QName(GenBank.GBNAMESPACE,GenBank.POSITION,GenBank.GBPREFIX));
  if (annotation != null) {
    thisPos=Integer.parseInt(annotation.getStringValue());
  }
  int otherPos=-1;
  annotation=location.getAnnotation(new QName(GenBank.GBNAMESPACE,GenBank.POSITION,GenBank.GBPREFIX));
  if (annotation != null) {
    otherPos=Integer.parseInt(annotation.getStringValue());
  }
  if (thisPos != -1 && otherPos != -1) {
    int result=thisPos - otherPos;
    return result;
  }
  if (location instanceof Range) {
    int result=this.at - ((Range)location).getStart();
    if (result == 0) {
      result=((Range)location).getEnd() - this.at;
    }
    return result;
  }
 else   if (location instanceof Cut) {
    return this.at - ((Cut)location).getAt();
  }
  return this.at;
}","@Override public int compareTo(Location location){
  int thisPos=-1;
  Annotation annotation=this.getAnnotation(new QName(GenBank.GBNAMESPACE,GenBank.POSITION,GenBank.GBPREFIX));
  if (annotation != null) {
    thisPos=Integer.parseInt(annotation.getStringValue().replace(""String_Node_Str"",""String_Node_Str""));
  }
  int otherPos=-1;
  annotation=location.getAnnotation(new QName(GenBank.GBNAMESPACE,GenBank.POSITION,GenBank.GBPREFIX));
  if (annotation != null) {
    otherPos=Integer.parseInt(annotation.getStringValue().replace(""String_Node_Str"",""String_Node_Str""));
  }
  if (thisPos != -1 && otherPos != -1) {
    int result=thisPos - otherPos;
    return result;
  }
  if (location instanceof Range) {
    int result=this.at - ((Range)location).getStart();
    if (result == 0) {
      result=((Range)location).getEnd() - this.at;
    }
    return result;
  }
 else   if (location instanceof Cut) {
    return this.at - ((Cut)location).getAt();
  }
  return this.at;
}",0.9515608180839612
12538,"static void read(SBOLDocument doc,String stringBuffer,String URIPrefix) throws IOException, SBOLConversionException, SBOLValidationException {
  so=new SequenceOntology();
  doc.addNamespace(URI.create(GBNAMESPACE),GBPREFIX);
  BufferedReader br=new BufferedReader(new StringReader(stringBuffer));
  String strLine;
  int featureCnt=0;
  int refCnt=0;
  while (true) {
    boolean cont=false;
    String id=""String_Node_Str"";
    String version=""String_Node_Str"";
    nextLine=null;
    featureMode=false;
    originMode=false;
    StringBuilder sbSequence=new StringBuilder();
    String elements=null;
    String description=""String_Node_Str"";
    URI type=ComponentDefinition.DNA;
    ComponentDefinition topCD=null;
    List<Annotation> annotations=new ArrayList<Annotation>();
    List<Annotation> nestedAnnotations=null;
    Annotation annotation=null;
    while ((strLine=readGenBankLine(br)) != null) {
      strLine=strLine.trim();
      if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        id=strSplit[1];
        annotation=new Annotation(new QName(GBNAMESPACE,LOCUS,GBPREFIX),strSplit[1]);
        annotations.add(annotation);
        if (strSplit[4].toUpperCase().contains(""String_Node_Str"")) {
          type=ComponentDefinition.RNA;
        }
        annotation=new Annotation(new QName(GBNAMESPACE,MOLECULE,GBPREFIX),strSplit[4]);
        annotations.add(annotation);
        for (int i=5; i < strSplit.length; i++) {
          if (strSplit[i].startsWith(""String_Node_Str"") || strSplit[i].startsWith(""String_Node_Str"")) {
            annotation=new Annotation(new QName(GBNAMESPACE,TOPOLOGY,GBPREFIX),strSplit[i]);
          }
 else           if (strSplit[i].length() == 3) {
            annotation=new Annotation(new QName(GBNAMESPACE,DIVISION,GBPREFIX),strSplit[i]);
          }
 else {
            annotation=new Annotation(new QName(GBNAMESPACE,DATE,GBPREFIX),strSplit[i]);
          }
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        String accession=strSplit[1];
        id=accession;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        version=strSplit[1].split(""String_Node_Str"")[1];
        if (!id.equals(strSplit[1].split(""String_Node_Str"")[0])) {
          throw new SBOLConversionException(""String_Node_Str"");
        }
        if (strSplit.length > 2) {
          annotation=new Annotation(new QName(GBNAMESPACE,GINUMBER,GBPREFIX),strSplit[2]);
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,KEYWORDS,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,SOURCE,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,ORGANISM,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        nestedAnnotations=new ArrayList<Annotation>();
        Annotation labelAnnotation=new Annotation(new QName(GBNAMESPACE,LABEL,GBPREFIX),annotationStr);
        nestedAnnotations.add(labelAnnotation);
        URI nestedURI=URI.create(URIPrefix + ""String_Node_Str"" + id+ ""String_Node_Str""+ refCnt);
        refCnt++;
        annotation=new Annotation(new QName(GBNAMESPACE,REFERENCE,GBPREFIX),new QName(GBNAMESPACE,NESTEDREFERENCE,GBPREFIX),nestedURI,nestedAnnotations);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,AUTHORS,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setNestedAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,TITLE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setNestedAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,JOURNAL,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setNestedAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,MEDLINE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setNestedAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,PUBMED,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setNestedAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,COMMENT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,BASECOUNT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        topCD=doc.createComponentDefinition(id,version,type);
        topCD.addRole(SequenceOntology.ENGINEERED_REGION);
        if (!""String_Node_Str"".equals(description)) {
          topCD.setDescription(description);
        }
        topCD.setAnnotations(annotations);
        featureMode=true;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        originMode=true;
        featureMode=false;
      }
 else {
        if (featureMode) {
          if (strLine.startsWith(""String_Node_Str"")) {
            String tag=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
            String value=""String_Node_Str"";
            if ((-1) != strLine.indexOf('=')) {
              String[] splitStr=strLine.split(""String_Node_Str"");
              tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
              value=splitStr[1];
            }
            StringBuilder sbValue=new StringBuilder();
            sbValue.append(value);
            if (value.startsWith(""String_Node_Str"") && !value.endsWith(""String_Node_Str"")) {
              while (true) {
                strLine=readGenBankLine(br).trim();
                sbValue.append(strLine);
                if (strLine.endsWith(""String_Node_Str"")) {
                  break;
                }
              }
            }
            SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
            if (null != sa) {
              annotation=new Annotation(new QName(GBNAMESPACE,tag,GBPREFIX),value);
              sa.addAnnotation(annotation);
            }
          }
 else {
            strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
            String[] strSplit=strLine.split(""String_Node_Str"");
            URI role=convertGenBanktoSO(strSplit[0]);
            ComponentDefinition feature=doc.createComponentDefinition(""String_Node_Str"" + featureCnt,version,type);
            feature.addRole(role);
            String range=strSplit[1];
            boolean outerComplement=false;
            OrientationType orientation=OrientationType.INLINE;
            if (range.startsWith(""String_Node_Str"")) {
              outerComplement=true;
              orientation=OrientationType.REVERSECOMPLEMENT;
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            }
            if (range.startsWith(""String_Node_Str"") || range.startsWith(""String_Node_Str"")) {
              String multiType=""String_Node_Str"";
              if (range.startsWith(""String_Node_Str"")) {
                multiType=""String_Node_Str"";
              }
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              String[] ranges=range.split(""String_Node_Str"");
              int rangeCnt=0;
              SequenceAnnotation sa=null;
              for (              String r : ranges) {
                orientation=OrientationType.INLINE;
                if (r.startsWith(""String_Node_Str"") || outerComplement) {
                  orientation=OrientationType.REVERSECOMPLEMENT;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean startLessThan=false;
                boolean endGreaterThan=false;
                if (r.contains(""String_Node_Str"")) {
                  startLessThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                if (r.contains(""String_Node_Str"")) {
                  endGreaterThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean singleBaseRange=false;
                String[] rangeSplit=null;
                if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                  rangeSplit=r.split(""String_Node_Str"");
                  singleBaseRange=true;
                }
 else {
                  rangeSplit=r.split(""String_Node_Str"");
                }
                int start=Integer.parseInt(rangeSplit[0]);
                int end=Integer.parseInt(rangeSplit[1]);
                Range newRange=null;
                if (rangeCnt == 0) {
                  sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
                  sa.setComponent(""String_Node_Str"" + featureCnt);
                  annotation=new Annotation(new QName(GBNAMESPACE,MULTIRANGETYPE,GBPREFIX),multiType);
                  sa.addAnnotation(annotation);
                  newRange=(Range)sa.getLocation(""String_Node_Str"" + rangeCnt);
                }
 else                 if (sa != null) {
                  newRange=sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
                }
                if (outerComplement) {
                  annotation=new Annotation(new QName(GBNAMESPACE,POSITION,GBPREFIX),((ranges.length - 1) - rangeCnt) + ""String_Node_Str"");
                }
 else {
                  annotation=new Annotation(new QName(GBNAMESPACE,POSITION,GBPREFIX),rangeCnt + ""String_Node_Str"");
                }
                newRange.addAnnotation(annotation);
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                rangeCnt++;
              }
            }
 else             if (range.contains(""String_Node_Str"")) {
              String[] rangeSplit=range.split(""String_Node_Str"");
              int at=Integer.parseInt(rangeSplit[0]);
              SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
              sa.setComponent(""String_Node_Str"" + featureCnt);
            }
 else {
              boolean startLessThan=false;
              boolean endGreaterThan=false;
              if (range.contains(""String_Node_Str"")) {
                startLessThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              if (range.contains(""String_Node_Str"")) {
                endGreaterThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean singleBaseRange=false;
              String[] rangeSplit=null;
              if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                rangeSplit=range.split(""String_Node_Str"");
                singleBaseRange=true;
              }
 else {
                rangeSplit=range.split(""String_Node_Str"");
              }
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[1]);
              if (start > end) {
                int temp=start;
                start=end;
                end=temp;
              }
              SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
              sa.setComponent(""String_Node_Str"" + featureCnt);
              Range newRange=(Range)sa.getLocation(""String_Node_Str"");
              if (startLessThan) {
                annotation=new Annotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX),""String_Node_Str"");
                newRange.addAnnotation(annotation);
              }
              if (endGreaterThan) {
                annotation=new Annotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX),""String_Node_Str"");
                newRange.addAnnotation(annotation);
              }
              if (singleBaseRange) {
                annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                newRange.addAnnotation(annotation);
              }
            }
            featureCnt++;
          }
        }
 else         if (originMode) {
          if (elements == null) {
            elements=new String(""String_Node_Str"");
          }
          if (strLine.startsWith(""String_Node_Str"")) {
            cont=true;
            break;
          }
          String[] strSplit=strLine.split(""String_Node_Str"");
          for (int i=1; i < strSplit.length; i++) {
            sbSequence.append(strSplit[i]);
          }
        }
        cont=false;
      }
    }
    if (topCD != null) {
      Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,sbSequence.toString(),Sequence.IUPAC_DNA);
      topCD.addSequence(sequence);
      createSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);
    }
    if (!cont)     break;
  }
  br.close();
}","static void read(SBOLDocument doc,String stringBuffer,String URIPrefix) throws IOException, SBOLConversionException, SBOLValidationException {
  so=new SequenceOntology();
  doc.addNamespace(URI.create(GBNAMESPACE),GBPREFIX);
  BufferedReader br=new BufferedReader(new StringReader(stringBuffer));
  String strLine;
  int featureCnt=0;
  int refCnt=0;
  while (true) {
    boolean cont=false;
    String id=""String_Node_Str"";
    String version=""String_Node_Str"";
    nextLine=null;
    featureMode=false;
    originMode=false;
    StringBuilder sbSequence=new StringBuilder();
    String elements=null;
    String description=""String_Node_Str"";
    URI type=ComponentDefinition.DNA;
    ComponentDefinition topCD=null;
    List<Annotation> annotations=new ArrayList<Annotation>();
    List<Annotation> nestedAnnotations=null;
    Annotation annotation=null;
    while ((strLine=readGenBankLine(br)) != null) {
      strLine=strLine.trim();
      if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        id=strSplit[1];
        annotation=new Annotation(new QName(GBNAMESPACE,LOCUS,GBPREFIX),strSplit[1]);
        annotations.add(annotation);
        if (strSplit[4].toUpperCase().contains(""String_Node_Str"")) {
          type=ComponentDefinition.RNA;
        }
        annotation=new Annotation(new QName(GBNAMESPACE,MOLECULE,GBPREFIX),strSplit[4]);
        annotations.add(annotation);
        for (int i=5; i < strSplit.length; i++) {
          if (strSplit[i].startsWith(""String_Node_Str"") || strSplit[i].startsWith(""String_Node_Str"")) {
            annotation=new Annotation(new QName(GBNAMESPACE,TOPOLOGY,GBPREFIX),strSplit[i]);
          }
 else           if (strSplit[i].length() == 3) {
            annotation=new Annotation(new QName(GBNAMESPACE,DIVISION,GBPREFIX),strSplit[i]);
          }
 else {
            annotation=new Annotation(new QName(GBNAMESPACE,DATE,GBPREFIX),strSplit[i]);
          }
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        String accession=strSplit[1];
        id=accession;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        version=strSplit[1].split(""String_Node_Str"")[1];
        if (!id.equals(strSplit[1].split(""String_Node_Str"")[0])) {
          throw new SBOLConversionException(""String_Node_Str"");
        }
        if (strSplit.length > 2) {
          annotation=new Annotation(new QName(GBNAMESPACE,GINUMBER,GBPREFIX),strSplit[2]);
          annotations.add(annotation);
        }
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,KEYWORDS,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,SOURCE,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,ORGANISM,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        nestedAnnotations=new ArrayList<Annotation>();
        Annotation labelAnnotation=new Annotation(new QName(GBNAMESPACE,LABEL,GBPREFIX),annotationStr);
        nestedAnnotations.add(labelAnnotation);
        URI nestedURI=URI.create(URIPrefix + ""String_Node_Str"" + id+ ""String_Node_Str""+ refCnt);
        refCnt++;
        annotation=new Annotation(new QName(GBNAMESPACE,REFERENCE,GBPREFIX),new QName(GBNAMESPACE,NESTEDREFERENCE,GBPREFIX),nestedURI,nestedAnnotations);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,AUTHORS,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setNestedAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,TITLE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setNestedAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,JOURNAL,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setNestedAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,MEDLINE,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setNestedAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,PUBMED,GBPREFIX),annotationStr);
        nestedAnnotations.add(nestedAnnotation);
        annotation.setNestedAnnotations(nestedAnnotations);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,COMMENT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
        annotation=new Annotation(new QName(GBNAMESPACE,BASECOUNT,GBPREFIX),annotationStr);
        annotations.add(annotation);
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        topCD=doc.createComponentDefinition(id,version,type);
        topCD.addRole(SequenceOntology.ENGINEERED_REGION);
        if (!""String_Node_Str"".equals(description)) {
          topCD.setDescription(description);
        }
        topCD.setAnnotations(annotations);
        featureMode=true;
      }
 else       if (strLine.startsWith(""String_Node_Str"")) {
        originMode=true;
        featureMode=false;
      }
 else {
        if (featureMode) {
          if (strLine.startsWith(""String_Node_Str"")) {
            String tag=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
            String value=""String_Node_Str"";
            if ((-1) != strLine.indexOf('=')) {
              String[] splitStr=strLine.split(""String_Node_Str"");
              tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
              value=splitStr[1];
            }
            StringBuilder sbValue=new StringBuilder();
            sbValue.append(value);
            if (value.startsWith(""String_Node_Str"") && !value.endsWith(""String_Node_Str"")) {
              while (true) {
                strLine=readGenBankLine(br).trim();
                sbValue.append(strLine);
                if (strLine.endsWith(""String_Node_Str"")) {
                  break;
                }
              }
            }
            SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
            if (null != sa) {
              annotation=new Annotation(new QName(GBNAMESPACE,tag,GBPREFIX),value);
              sa.addAnnotation(annotation);
            }
          }
 else {
            strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
            String[] strSplit=strLine.split(""String_Node_Str"");
            URI role=convertGenBanktoSO(strSplit[0]);
            ComponentDefinition feature=doc.createComponentDefinition(""String_Node_Str"" + featureCnt,version,type);
            feature.addRole(role);
            String range=strSplit[1];
            boolean outerComplement=false;
            OrientationType orientation=OrientationType.INLINE;
            if (range.startsWith(""String_Node_Str"")) {
              outerComplement=true;
              orientation=OrientationType.REVERSECOMPLEMENT;
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            }
            if (range.startsWith(""String_Node_Str"") || range.startsWith(""String_Node_Str"")) {
              String multiType=""String_Node_Str"";
              if (range.startsWith(""String_Node_Str"")) {
                multiType=""String_Node_Str"";
              }
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              String[] ranges=range.split(""String_Node_Str"");
              int rangeCnt=0;
              SequenceAnnotation sa=null;
              for (              String r : ranges) {
                orientation=OrientationType.INLINE;
                if (r.startsWith(""String_Node_Str"") || outerComplement) {
                  orientation=OrientationType.REVERSECOMPLEMENT;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean startLessThan=false;
                boolean endGreaterThan=false;
                if (r.contains(""String_Node_Str"")) {
                  startLessThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                if (r.contains(""String_Node_Str"")) {
                  endGreaterThan=true;
                  r=r.replace(""String_Node_Str"",""String_Node_Str"");
                }
                boolean singleBaseRange=false;
                String[] rangeSplit=null;
                if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                  rangeSplit=r.split(""String_Node_Str"");
                  singleBaseRange=true;
                }
 else {
                  rangeSplit=r.split(""String_Node_Str"");
                }
                int start=Integer.parseInt(rangeSplit[0]);
                int end=Integer.parseInt(rangeSplit[1]);
                Range newRange=null;
                if (rangeCnt == 0) {
                  sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
                  sa.setComponent(""String_Node_Str"" + featureCnt);
                  annotation=new Annotation(new QName(GBNAMESPACE,MULTIRANGETYPE,GBPREFIX),multiType);
                  sa.addAnnotation(annotation);
                  newRange=(Range)sa.getLocation(""String_Node_Str"" + rangeCnt);
                }
 else                 if (sa != null) {
                  newRange=sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
                }
                if (outerComplement) {
                  annotation=new Annotation(new QName(GBNAMESPACE,POSITION,GBPREFIX),""String_Node_Str"" + ((ranges.length - 1) - rangeCnt));
                }
 else {
                  annotation=new Annotation(new QName(GBNAMESPACE,POSITION,GBPREFIX),""String_Node_Str"" + rangeCnt);
                }
                newRange.addAnnotation(annotation);
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                rangeCnt++;
              }
            }
 else             if (range.contains(""String_Node_Str"")) {
              String[] rangeSplit=range.split(""String_Node_Str"");
              int at=Integer.parseInt(rangeSplit[0]);
              SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
              sa.setComponent(""String_Node_Str"" + featureCnt);
            }
 else {
              boolean startLessThan=false;
              boolean endGreaterThan=false;
              if (range.contains(""String_Node_Str"")) {
                startLessThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              if (range.contains(""String_Node_Str"")) {
                endGreaterThan=true;
                range=range.replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean singleBaseRange=false;
              String[] rangeSplit=null;
              if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                rangeSplit=range.split(""String_Node_Str"");
                singleBaseRange=true;
              }
 else {
                rangeSplit=range.split(""String_Node_Str"");
              }
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[1]);
              if (start > end) {
                int temp=start;
                start=end;
                end=temp;
              }
              SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
              sa.setComponent(""String_Node_Str"" + featureCnt);
              Range newRange=(Range)sa.getLocation(""String_Node_Str"");
              if (startLessThan) {
                annotation=new Annotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX),""String_Node_Str"");
                newRange.addAnnotation(annotation);
              }
              if (endGreaterThan) {
                annotation=new Annotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX),""String_Node_Str"");
                newRange.addAnnotation(annotation);
              }
              if (singleBaseRange) {
                annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                newRange.addAnnotation(annotation);
              }
            }
            featureCnt++;
          }
        }
 else         if (originMode) {
          if (elements == null) {
            elements=new String(""String_Node_Str"");
          }
          if (strLine.startsWith(""String_Node_Str"")) {
            cont=true;
            break;
          }
          String[] strSplit=strLine.split(""String_Node_Str"");
          for (int i=1; i < strSplit.length; i++) {
            sbSequence.append(strSplit[i]);
          }
        }
        cont=false;
      }
    }
    if (topCD != null) {
      Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,sbSequence.toString(),Sequence.IUPAC_DNA);
      topCD.addSequence(sequence);
      createSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);
    }
    if (!cont)     break;
  }
  br.close();
}",0.9975253650086612
12539,"@Override public int compareTo(Location location){
  int thisPos=-1;
  Annotation annotation=this.getAnnotation(new QName(GenBank.GBNAMESPACE,GenBank.POSITION,GenBank.GBPREFIX));
  if (annotation != null) {
    thisPos=Integer.parseInt(annotation.getStringValue());
  }
  int otherPos=-1;
  annotation=location.getAnnotation(new QName(GenBank.GBNAMESPACE,GenBank.POSITION,GenBank.GBPREFIX));
  if (annotation != null) {
    otherPos=Integer.parseInt(annotation.getStringValue());
  }
  if (thisPos != -1 && otherPos != -1) {
    int result=thisPos - otherPos;
    return result;
  }
  if (location instanceof Range) {
    int result=this.start - ((Range)location).getStart();
    if (result == 0) {
      result=((Range)location).getEnd() - this.end;
    }
    return result;
  }
 else   if (location instanceof Cut) {
    int result=this.start - ((Cut)location).getAt();
    if (result == 0) {
      result=((Cut)location).getAt() - this.end;
    }
    return result;
  }
  return this.start;
}","@Override public int compareTo(Location location){
  int thisPos=-1;
  Annotation annotation=this.getAnnotation(new QName(GenBank.GBNAMESPACE,GenBank.POSITION,GenBank.GBPREFIX));
  if (annotation != null) {
    thisPos=Integer.parseInt(annotation.getStringValue().replace(""String_Node_Str"",""String_Node_Str""));
  }
  int otherPos=-1;
  annotation=location.getAnnotation(new QName(GenBank.GBNAMESPACE,GenBank.POSITION,GenBank.GBPREFIX));
  if (annotation != null) {
    otherPos=Integer.parseInt(annotation.getStringValue().replace(""String_Node_Str"",""String_Node_Str""));
  }
  if (thisPos != -1 && otherPos != -1) {
    int result=thisPos - otherPos;
    return result;
  }
  if (location instanceof Range) {
    int result=this.start - ((Range)location).getStart();
    if (result == 0) {
      result=((Range)location).getEnd() - this.end;
    }
    return result;
  }
 else   if (location instanceof Cut) {
    int result=this.start - ((Cut)location).getAt();
    if (result == 0) {
      result=((Cut)location).getAt() - this.end;
    }
    return result;
  }
  return this.start;
}",0.9567307692307692
12540,"@Test public void test_GenBank_Files(){
  File file_base=null;
  try {
    file_base=new File(ValidationTest.class.getResource(""String_Node_Str"").toURI());
  }
 catch (  URISyntaxException e1) {
    e1.printStackTrace();
  }
  File file;
  for (  File f : file_base.listFiles()) {
    if (f.isDirectory()) {
      continue;
    }
    file=new File(f.getAbsolutePath());
    try {
      SBOLReader.setURIPrefix(""String_Node_Str"");
      SBOLDocument actual=SBOLReader.read(file);
      ByteArrayOutputStream out=new ByteArrayOutputStream();
      SBOLWriter.write(actual,System.out,SBOLDocument.GENBANK);
      runTest(""String_Node_Str"" + f.getName().replace(""String_Node_Str"",""String_Node_Str""),actual,""String_Node_Str"",true);
    }
 catch (    Exception e) {
      throw new AssertionError(""String_Node_Str"" + f.getName(),e);
    }
  }
}","@Test public void test_GenBank_Files(){
  File file_base=null;
  try {
    file_base=new File(ValidationTest.class.getResource(""String_Node_Str"").toURI());
  }
 catch (  URISyntaxException e1) {
    e1.printStackTrace();
  }
  File file;
  for (  File f : file_base.listFiles()) {
    if (f.isDirectory()) {
      continue;
    }
    file=new File(f.getAbsolutePath());
    try {
      SBOLReader.setURIPrefix(""String_Node_Str"");
      SBOLDocument actual=SBOLReader.read(file);
      ByteArrayOutputStream out=new ByteArrayOutputStream();
      SBOLWriter.write(actual,out,SBOLDocument.GENBANK);
      runTest(""String_Node_Str"" + f.getName().replace(""String_Node_Str"",""String_Node_Str""),actual,""String_Node_Str"",true);
    }
 catch (    Exception e) {
      throw new AssertionError(""String_Node_Str"" + f.getName(),e);
    }
  }
}",0.9958058717795086
12541,"/** 
 * Takes in the given FASTA filename and converts the file to an SBOLDocument. <p> This method calls   {@link #read(File)}.
 * @param fileName the given FASTA filename
 * @param URIprefix the URI prefix used for generated Sequence objects
 * @param displayId the base displayId to use for generated Sequence objects (null will use description as id)
 * @param version the verison used for generated Sequence objects
 * @param encoding the encoding assumed for generated Sequence objects
 * @return the converted SBOLDocument
 * @throws SBOLConversionException violates conversion limitations
 * @throws SBOLValidationException violates sbol validation rule
 * @throws IOException input/output operation failed
 */
public static SBOLDocument read(String fileName,String URIprefix,String displayId,String version,URI encoding) throws IOException, SBOLConversionException, SBOLValidationException {
  return read(new File(fileName),URIprefix,displayId,version,encoding);
}","/** 
 * Takes in the given FASTA filename and converts the file to an SBOLDocument.
 * @param fileName the given FASTA filename
 * @param URIprefix the URI prefix used for generated Sequence objects
 * @param displayId the base displayId to use for generated Sequence objects (null will use description as id)
 * @param version the verison used for generated Sequence objects
 * @param encoding the encoding assumed for generated Sequence objects
 * @return the converted SBOLDocument
 * @throws SBOLConversionException violates conversion limitations
 * @throws SBOLValidationException violates sbol validation rule
 * @throws IOException input/output operation failed
 */
public static SBOLDocument read(String fileName,String URIprefix,String displayId,String version,URI encoding) throws IOException, SBOLConversionException, SBOLValidationException {
  return read(new File(fileName),URIprefix,displayId,version,encoding);
}",0.976353126642144
12542,"/** 
 * Validates the given SBOL document. Errors encountered either throw exceptions or, if not fatal, are added to the list of errors that can be accessed using the   {@link #getErrors()} method. Interpretations of the complete, compliant, and bestPractice parameters are as follows: <li> complete: A  {@code true} value means that ALL references in the given SBOLDocument object can dereference to objects in the same document;  {@code false} otherwise.<li> compliant: A  {@code true} value means that ALL URIs in the given SBOLDocument object are compliant; {@code false} otherwise.<li> best practice: A  {@code true} value means that validation rules with the RECOMMENDED condition in the SBOL specification arechecked against the given SBOLDocuemnt object;  {@code false} otherwise.</ul><p>
 * @param sbolDocument the given {@code SBOLDocument} object
 * @param complete the given {@code complete} flag 
 * @param compliant the given {@code compliant} flag
 * @param bestPractice the given {@code bestPractice} flag
 */
public static void validateSBOL(SBOLDocument sbolDocument,boolean complete,boolean compliant,boolean bestPractice){
  clearErrors();
  validateSequenceEncodings(sbolDocument);
  validateWasDerivedFromVersion(sbolDocument);
  validateCircularReferences(sbolDocument);
  validateURIuniqueness(sbolDocument);
  validatePersistentIdentityUniqueness(sbolDocument);
  validateSequenceConstraints(sbolDocument);
  validateMapsTos(sbolDocument);
  if (compliant)   validateCompliance(sbolDocument);
  if (complete)   validateCompleteness(sbolDocument);
  if (bestPractice) {
    validateOntologyUsage(sbolDocument);
    validateSequenceAnnotations(sbolDocument);
    validateComponentDefinitionSequences(sbolDocument);
  }
}","/** 
 * Validates the given SBOL document. Errors encountered either throw exceptions or, if not fatal, are added to the list of errors that can be accessed using the   {@link #getErrors()} method. Interpretations of the complete, compliant, and bestPractice parameters are as follows: <ul> <li> complete: A  {@code true} value means that ALL references in the given SBOLDocument object can dereference to objects in the same document;  {@code false} otherwise.<li> compliant: A  {@code true} value means that ALL URIs in the given SBOLDocument object are compliant; {@code false} otherwise.<li> best practice: A  {@code true} value means that validation rules with the RECOMMENDED condition in the SBOL specification arechecked against the given SBOLDocuemnt object;  {@code false} otherwise.</ul><p>
 * @param sbolDocument the given {@code SBOLDocument} object
 * @param complete the given {@code complete} flag 
 * @param compliant the given {@code compliant} flag
 * @param bestPractice the given {@code bestPractice} flag
 */
public static void validateSBOL(SBOLDocument sbolDocument,boolean complete,boolean compliant,boolean bestPractice){
  clearErrors();
  validateSequenceEncodings(sbolDocument);
  validateWasDerivedFromVersion(sbolDocument);
  validateCircularReferences(sbolDocument);
  validateURIuniqueness(sbolDocument);
  validatePersistentIdentityUniqueness(sbolDocument);
  validateSequenceConstraints(sbolDocument);
  validateMapsTos(sbolDocument);
  if (compliant)   validateCompliance(sbolDocument);
  if (complete)   validateCompleteness(sbolDocument);
  if (bestPractice) {
    validateOntologyUsage(sbolDocument);
    validateSequenceAnnotations(sbolDocument);
    validateComponentDefinitionSequences(sbolDocument);
  }
}",0.998566924620235
12543,"/** 
 * The getRandomNumber returns a random number in the range [min..max]  (both inclusive). If the min > max, then the method returns -1.
 * @param min ... the minimum number
 * @param max ... the maximum number
 * @return a random number in the range [min..max]
 */
public int getRandomNumber(int min,int max){
  if (min <= max) {
    return new Random().nextInt((max - min) + 1) + min;
  }
  return -1;
}","/** 
 * The getRandomNumber returns a random number in the range [min..max]  (both inclusive). If the min greater than max, then the method returns -1.
 * @param min ... the minimum number
 * @param max ... the maximum number
 * @return a random number in the range [min..max]
 */
public int getRandomNumber(int min,int max){
  if (min <= max) {
    return new Random().nextInt((max - min) + 1) + min;
  }
  return -1;
}",0.9843184559710496
12544,"/** 
 * Test <code>null<\code> for grand child URI not compliant in extractPersistentId.
 */
@Test public void testExtractURIprefix1(){
  String extractedPrefix=extractURIprefix(uri8);
  assertNull(extractedPrefix);
}","/** 
 * Test null for grand child URI not compliant in extractPersistentId.
 */
@Test public void testExtractURIprefix1(){
  String extractedPrefix=extractURIprefix(uri8);
  assertNull(extractedPrefix);
}",0.9501187648456056
12545,"/** 
 * Test <code>null<\code> for extractVersion for the compliant top-level URI.
 */
@Test public void testExtractVersion1(){
  String extractedVersion=extractVersion(uri4);
  assertNull(extractedVersion);
}","/** 
 * Test null for extractVersion for the compliant top-level URI.
 */
@Test public void testExtractVersion1(){
  String extractedVersion=extractVersion(uri4);
  assertNull(extractedVersion);
}",0.9679012345679012
12546,"/** 
 * Test <code>null<\code> for extractVersion for the compliant child URI.
 */
@Test public void testExtractVersion2(){
  String extractedVersion=extractVersion(uri6);
  assertNull(extractedVersion);
}","/** 
 * Test null for extractVersion for the compliant child URI.
 */
@Test public void testExtractVersion2(){
  String extractedVersion=extractVersion(uri6);
  assertNull(extractedVersion);
}",0.9672544080604534
12547,"/** 
 * Test <code>null<\code> for extractVersion for the compliant grand child URI.
 */
@Test public void testExtractVersion3(){
  String extractedVersion=extractVersion(uri8);
  assertNull(extractedVersion);
}","/** 
 * Test null for extractVersion for the compliant grand child URI.
 */
@Test public void testExtractVersion3(){
  String extractedVersion=extractVersion(uri8);
  assertNull(extractedVersion);
}",0.9682151589242054
12548,"/** 
 * Test <code>null<\code> for extractVersion for the compliant great grand child URI.
 */
@Test public void testExtractVersion4(){
  String extractedVersion=extractVersion(uri9);
  assertNull(extractedVersion);
}","/** 
 * Test null for extractVersion for the compliant great grand child URI.
 */
@Test public void testExtractVersion4(){
  String extractedVersion=extractVersion(uri9);
  assertNull(extractedVersion);
}",0.9501187648456056
12549,"/** 
 * Test <code>null<\code> for top-level URI not compliant in extractPersistentId.
 */
@Test public void testExtractPersistentId1(){
  if (extractPersistentId(uri4) == null) {
    return;
  }
  assert(false);
}","/** 
 * Test null for top-level URI not compliant in extractPersistentId.
 */
@Test public void testExtractPersistentId1(){
  if (extractPersistentId(uri4) == null) {
    return;
  }
  assert(false);
}",0.9493975903614458
12550,"/** 
 * Test <code>null<\code> for child URI not compliant in extractPersistentId.
 */
@Test public void testExtractPersistentId3(){
  if (extractPersistentId(uri6) == null) {
    return;
  }
  assert(false);
}","/** 
 * Test null for child URI not compliant in extractPersistentId.
 */
@Test public void testExtractPersistentId3(){
  if (extractPersistentId(uri6) == null) {
    return;
  }
  assert(false);
}",0.968058968058968
12551,"/** 
 * Test <code>null<\code> for grand child URI not compliant in extractPersistentId.
 */
@Test public void testExtractPersistentId5(){
  if (extractPersistentId(uri8) == null) {
    return;
  }
  assert(false);
}","/** 
 * Test null for grand child URI not compliant in extractPersistentId.
 */
@Test public void testExtractPersistentId5(){
  if (extractPersistentId(uri8) == null) {
    return;
  }
  assert(false);
}",0.9498806682577564
12552,"/** 
 * Test <code>null<\code> for great grand child URI not compliant in extractPersistentId.
 */
@Test public void testExtractPersistentId7(){
  if (extractPersistentId(uri9) == null) {
    return;
  }
  assert(false);
}","/** 
 * Test null for great grand child URI not compliant in extractPersistentId.
 */
@Test public void testExtractPersistentId7(){
  if (extractPersistentId(uri9) == null) {
    return;
  }
  assert(false);
}",0.951276102088167
12553,"private static void read(SBOLDocument doc,InputStream in) throws IOException, SBOLConversionException, SBOLValidationException {
  so=new SequenceOntology();
  nextLine=null;
  featureMode=false;
  originMode=false;
  lineCounter=0;
  doc.addNamespace(URI.create(GBNAMESPACE),GBPREFIX);
  BufferedReader br=new BufferedReader(new InputStreamReader(in));
  String strLine;
  String id=""String_Node_Str"";
  String version=""String_Node_Str"";
  int featureCnt=0;
  int refCnt=0;
  StringBuilder sbSequence=new StringBuilder();
  String elements=null;
  String description=""String_Node_Str"";
  URI type=ComponentDefinition.DNA;
  ComponentDefinition topCD=null;
  List<Annotation> annotations=new ArrayList<Annotation>();
  List<Annotation> nestedAnnotations=null;
  Annotation annotation=null;
  while ((strLine=readGenBankLine(br)) != null) {
    strLine=strLine.trim();
    if (strLine.startsWith(""String_Node_Str"")) {
      String[] strSplit=strLine.split(""String_Node_Str"");
      id=strSplit[1];
      annotation=new Annotation(new QName(GBNAMESPACE,LOCUS,GBPREFIX),strSplit[1]);
      annotations.add(annotation);
      if (strSplit[4].toUpperCase().contains(""String_Node_Str"")) {
        type=ComponentDefinition.RNA;
      }
      annotation=new Annotation(new QName(GBNAMESPACE,MOLECULE,GBPREFIX),strSplit[4]);
      annotations.add(annotation);
      for (int i=5; i < strSplit.length; i++) {
        if (strSplit[i].startsWith(""String_Node_Str"") || strSplit[i].startsWith(""String_Node_Str"")) {
          annotation=new Annotation(new QName(GBNAMESPACE,TOPOLOGY,GBPREFIX),strSplit[i]);
        }
 else         if (strSplit[i].length() == 3) {
          annotation=new Annotation(new QName(GBNAMESPACE,DIVISION,GBPREFIX),strSplit[i]);
        }
 else {
          annotation=new Annotation(new QName(GBNAMESPACE,DATE,GBPREFIX),strSplit[i]);
        }
        annotations.add(annotation);
      }
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String[] strSplit=strLine.split(""String_Node_Str"");
      String accession=strSplit[1];
      id=accession;
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String[] strSplit=strLine.split(""String_Node_Str"");
      version=strSplit[1].split(""String_Node_Str"")[1];
      if (!id.equals(strSplit[1].split(""String_Node_Str"")[0])) {
        throw new SBOLConversionException(""String_Node_Str"");
      }
      if (strSplit.length > 2) {
        annotation=new Annotation(new QName(GBNAMESPACE,GINUMBER,GBPREFIX),strSplit[2]);
        annotations.add(annotation);
      }
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(GBNAMESPACE,KEYWORDS,GBPREFIX),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(GBNAMESPACE,SOURCE,GBPREFIX),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(GBNAMESPACE,ORGANISM,GBPREFIX),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      nestedAnnotations=new ArrayList<Annotation>();
      Annotation labelAnnotation=new Annotation(new QName(GBNAMESPACE,LABEL,GBPREFIX),annotationStr);
      nestedAnnotations.add(labelAnnotation);
      URI nestedURI=URI.create(URIPrefix + ""String_Node_Str"" + id+ ""String_Node_Str""+ refCnt);
      refCnt++;
      annotation=new Annotation(new QName(GBNAMESPACE,REFERENCE,GBPREFIX),new QName(GBNAMESPACE,NESTEDREFERENCE,GBPREFIX),nestedURI,nestedAnnotations);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,AUTHORS,GBPREFIX),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,TITLE,GBPREFIX),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,JOURNAL,GBPREFIX),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,MEDLINE,GBPREFIX),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,PUBMED,GBPREFIX),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(GBNAMESPACE,COMMENT,GBPREFIX),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(GBNAMESPACE,BASECOUNT,GBPREFIX),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      topCD=doc.createComponentDefinition(id,version,type);
      topCD.addRole(SequenceOntology.ENGINEERED_REGION);
      if (!""String_Node_Str"".equals(description)) {
        topCD.setDescription(description);
      }
      topCD.setAnnotations(annotations);
      featureMode=true;
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      originMode=true;
      featureMode=false;
    }
 else {
      if (featureMode) {
        if (strLine.startsWith(""String_Node_Str"")) {
          String tag=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
          String value=""String_Node_Str"";
          if ((-1) != strLine.indexOf('=')) {
            String[] splitStr=strLine.split(""String_Node_Str"");
            tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
            value=splitStr[1];
          }
          StringBuilder sbValue=new StringBuilder();
          sbValue.append(value);
          if (value.startsWith(""String_Node_Str"") && !value.endsWith(""String_Node_Str"")) {
            while (true) {
              strLine=readGenBankLine(br).trim();
              sbValue.append(strLine);
              if (strLine.endsWith(""String_Node_Str"")) {
                break;
              }
            }
          }
          SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
          if (null != sa) {
            annotation=new Annotation(new QName(GBNAMESPACE,tag,GBPREFIX),value);
            sa.addAnnotation(annotation);
          }
        }
 else {
          strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
          String[] strSplit=strLine.split(""String_Node_Str"");
          URI role=convertGenBanktoSO(strSplit[0]);
          ComponentDefinition feature=doc.createComponentDefinition(""String_Node_Str"" + featureCnt,version,type);
          feature.addRole(role);
          String range=strSplit[1];
          OrientationType orientation=OrientationType.INLINE;
          if (range.startsWith(""String_Node_Str"")) {
            orientation=OrientationType.REVERSECOMPLEMENT;
            range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
          }
          if (range.startsWith(""String_Node_Str"") || range.startsWith(""String_Node_Str"")) {
            String multiType=""String_Node_Str"";
            if (range.startsWith(""String_Node_Str"")) {
              multiType=""String_Node_Str"";
            }
            range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            String[] ranges=range.split(""String_Node_Str"");
            int rangeCnt=0;
            SequenceAnnotation sa=null;
            for (            String r : ranges) {
              if (r.startsWith(""String_Node_Str"")) {
                orientation=OrientationType.REVERSECOMPLEMENT;
                r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean startLessThan=false;
              boolean endGreaterThan=false;
              if (r.contains(""String_Node_Str"")) {
                startLessThan=true;
                r=r.replace(""String_Node_Str"",""String_Node_Str"");
              }
              if (r.contains(""String_Node_Str"")) {
                endGreaterThan=true;
                r=r.replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean singleBaseRange=false;
              String[] rangeSplit=null;
              if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                rangeSplit=r.split(""String_Node_Str"");
                singleBaseRange=true;
              }
 else {
                rangeSplit=r.split(""String_Node_Str"");
              }
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[1]);
              if (rangeCnt == 0) {
                sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
                sa.setComponent(""String_Node_Str"" + featureCnt);
                annotation=new Annotation(new QName(GBNAMESPACE,MULTIRANGETYPE,GBPREFIX),multiType);
                sa.addAnnotation(annotation);
              }
 else               if (sa != null) {
                Range newRange=sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
              rangeCnt++;
            }
          }
 else           if (range.contains(""String_Node_Str"")) {
            String[] rangeSplit=range.split(""String_Node_Str"");
            int at=Integer.parseInt(rangeSplit[0]);
            SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
            sa.setComponent(""String_Node_Str"" + featureCnt);
          }
 else {
            boolean startLessThan=false;
            boolean endGreaterThan=false;
            if (range.contains(""String_Node_Str"")) {
              startLessThan=true;
              range=range.replace(""String_Node_Str"",""String_Node_Str"");
            }
            if (range.contains(""String_Node_Str"")) {
              endGreaterThan=true;
              range=range.replace(""String_Node_Str"",""String_Node_Str"");
            }
            boolean singleBaseRange=false;
            String[] rangeSplit=null;
            if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
              rangeSplit=range.split(""String_Node_Str"");
              singleBaseRange=true;
            }
 else {
              rangeSplit=range.split(""String_Node_Str"");
            }
            try {
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[1]);
              if (start > end) {
                int temp=start;
                start=end;
                end=temp;
              }
              SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
              sa.setComponent(""String_Node_Str"" + featureCnt);
              Range newRange=(Range)sa.getLocation(""String_Node_Str"");
              if (startLessThan) {
                annotation=new Annotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX),""String_Node_Str"");
                newRange.addAnnotation(annotation);
              }
              if (endGreaterThan) {
                annotation=new Annotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX),""String_Node_Str"");
                newRange.addAnnotation(annotation);
              }
              if (singleBaseRange) {
                annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                newRange.addAnnotation(annotation);
              }
            }
 catch (            Exception e) {
              System.out.println(lineCounter + ""String_Node_Str"" + strLine);
            }
          }
          featureCnt++;
        }
      }
 else       if (originMode) {
        if (elements == null) {
          elements=new String(""String_Node_Str"");
        }
        String[] strSplit=strLine.split(""String_Node_Str"");
        for (int i=1; i < strSplit.length; i++) {
          sbSequence.append(strSplit[i]);
        }
      }
    }
  }
  Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,sbSequence.toString(),Sequence.IUPAC_DNA);
  topCD.addSequence(sequence);
  createSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);
  br.close();
}","private static void read(SBOLDocument doc,InputStream in) throws IOException, SBOLConversionException, SBOLValidationException {
  so=new SequenceOntology();
  nextLine=null;
  featureMode=false;
  originMode=false;
  lineCounter=0;
  doc.addNamespace(URI.create(GBNAMESPACE),GBPREFIX);
  BufferedReader br=new BufferedReader(new InputStreamReader(in));
  String strLine;
  String id=""String_Node_Str"";
  String version=""String_Node_Str"";
  int featureCnt=0;
  int refCnt=0;
  StringBuilder sbSequence=new StringBuilder();
  String elements=null;
  String description=""String_Node_Str"";
  URI type=ComponentDefinition.DNA;
  ComponentDefinition topCD=null;
  List<Annotation> annotations=new ArrayList<Annotation>();
  List<Annotation> nestedAnnotations=null;
  Annotation annotation=null;
  while ((strLine=readGenBankLine(br)) != null) {
    strLine=strLine.trim();
    if (strLine.startsWith(""String_Node_Str"")) {
      String[] strSplit=strLine.split(""String_Node_Str"");
      id=strSplit[1];
      annotation=new Annotation(new QName(GBNAMESPACE,LOCUS,GBPREFIX),strSplit[1]);
      annotations.add(annotation);
      if (strSplit[4].toUpperCase().contains(""String_Node_Str"")) {
        type=ComponentDefinition.RNA;
      }
      annotation=new Annotation(new QName(GBNAMESPACE,MOLECULE,GBPREFIX),strSplit[4]);
      annotations.add(annotation);
      for (int i=5; i < strSplit.length; i++) {
        if (strSplit[i].startsWith(""String_Node_Str"") || strSplit[i].startsWith(""String_Node_Str"")) {
          annotation=new Annotation(new QName(GBNAMESPACE,TOPOLOGY,GBPREFIX),strSplit[i]);
        }
 else         if (strSplit[i].length() == 3) {
          annotation=new Annotation(new QName(GBNAMESPACE,DIVISION,GBPREFIX),strSplit[i]);
        }
 else {
          annotation=new Annotation(new QName(GBNAMESPACE,DATE,GBPREFIX),strSplit[i]);
        }
        annotations.add(annotation);
      }
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String[] strSplit=strLine.split(""String_Node_Str"");
      String accession=strSplit[1];
      id=accession;
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String[] strSplit=strLine.split(""String_Node_Str"");
      version=strSplit[1].split(""String_Node_Str"")[1];
      if (!id.equals(strSplit[1].split(""String_Node_Str"")[0])) {
        throw new SBOLConversionException(""String_Node_Str"");
      }
      if (strSplit.length > 2) {
        annotation=new Annotation(new QName(GBNAMESPACE,GINUMBER,GBPREFIX),strSplit[2]);
        annotations.add(annotation);
      }
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(GBNAMESPACE,KEYWORDS,GBPREFIX),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(GBNAMESPACE,SOURCE,GBPREFIX),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(GBNAMESPACE,ORGANISM,GBPREFIX),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      nestedAnnotations=new ArrayList<Annotation>();
      Annotation labelAnnotation=new Annotation(new QName(GBNAMESPACE,LABEL,GBPREFIX),annotationStr);
      nestedAnnotations.add(labelAnnotation);
      URI nestedURI=URI.create(URIPrefix + ""String_Node_Str"" + id+ ""String_Node_Str""+ refCnt);
      refCnt++;
      annotation=new Annotation(new QName(GBNAMESPACE,REFERENCE,GBPREFIX),new QName(GBNAMESPACE,NESTEDREFERENCE,GBPREFIX),nestedURI,nestedAnnotations);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,AUTHORS,GBPREFIX),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,TITLE,GBPREFIX),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,JOURNAL,GBPREFIX),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,MEDLINE,GBPREFIX),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,PUBMED,GBPREFIX),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(GBNAMESPACE,COMMENT,GBPREFIX),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(GBNAMESPACE,BASECOUNT,GBPREFIX),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      topCD=doc.createComponentDefinition(id,version,type);
      topCD.addRole(SequenceOntology.ENGINEERED_REGION);
      if (!""String_Node_Str"".equals(description)) {
        topCD.setDescription(description);
      }
      topCD.setAnnotations(annotations);
      featureMode=true;
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      originMode=true;
      featureMode=false;
    }
 else {
      if (featureMode) {
        if (strLine.startsWith(""String_Node_Str"")) {
          String tag=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
          String value=""String_Node_Str"";
          if ((-1) != strLine.indexOf('=')) {
            String[] splitStr=strLine.split(""String_Node_Str"");
            tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
            value=splitStr[1];
          }
          StringBuilder sbValue=new StringBuilder();
          sbValue.append(value);
          if (value.startsWith(""String_Node_Str"") && !value.endsWith(""String_Node_Str"")) {
            while (true) {
              strLine=readGenBankLine(br).trim();
              sbValue.append(strLine);
              if (strLine.endsWith(""String_Node_Str"")) {
                break;
              }
            }
          }
          SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
          if (null != sa) {
            annotation=new Annotation(new QName(GBNAMESPACE,tag,GBPREFIX),value);
            sa.addAnnotation(annotation);
          }
        }
 else {
          strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
          String[] strSplit=strLine.split(""String_Node_Str"");
          URI role=convertGenBanktoSO(strSplit[0]);
          ComponentDefinition feature=doc.createComponentDefinition(""String_Node_Str"" + featureCnt,version,type);
          feature.addRole(role);
          String range=strSplit[1];
          OrientationType orientation=OrientationType.INLINE;
          if (range.startsWith(""String_Node_Str"")) {
            orientation=OrientationType.REVERSECOMPLEMENT;
            range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
          }
          if (range.startsWith(""String_Node_Str"") || range.startsWith(""String_Node_Str"")) {
            String multiType=""String_Node_Str"";
            if (range.startsWith(""String_Node_Str"")) {
              multiType=""String_Node_Str"";
            }
            range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            String[] ranges=range.split(""String_Node_Str"");
            int rangeCnt=0;
            SequenceAnnotation sa=null;
            for (            String r : ranges) {
              orientation=OrientationType.INLINE;
              if (r.startsWith(""String_Node_Str"")) {
                orientation=OrientationType.REVERSECOMPLEMENT;
                r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean startLessThan=false;
              boolean endGreaterThan=false;
              if (r.contains(""String_Node_Str"")) {
                startLessThan=true;
                r=r.replace(""String_Node_Str"",""String_Node_Str"");
              }
              if (r.contains(""String_Node_Str"")) {
                endGreaterThan=true;
                r=r.replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean singleBaseRange=false;
              String[] rangeSplit=null;
              if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                rangeSplit=r.split(""String_Node_Str"");
                singleBaseRange=true;
              }
 else {
                rangeSplit=r.split(""String_Node_Str"");
              }
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[1]);
              if (rangeCnt == 0) {
                sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
                sa.setComponent(""String_Node_Str"" + featureCnt);
                annotation=new Annotation(new QName(GBNAMESPACE,MULTIRANGETYPE,GBPREFIX),multiType);
                sa.addAnnotation(annotation);
              }
 else               if (sa != null) {
                Range newRange=sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
              rangeCnt++;
            }
          }
 else           if (range.contains(""String_Node_Str"")) {
            String[] rangeSplit=range.split(""String_Node_Str"");
            int at=Integer.parseInt(rangeSplit[0]);
            SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
            sa.setComponent(""String_Node_Str"" + featureCnt);
          }
 else {
            boolean startLessThan=false;
            boolean endGreaterThan=false;
            if (range.contains(""String_Node_Str"")) {
              startLessThan=true;
              range=range.replace(""String_Node_Str"",""String_Node_Str"");
            }
            if (range.contains(""String_Node_Str"")) {
              endGreaterThan=true;
              range=range.replace(""String_Node_Str"",""String_Node_Str"");
            }
            boolean singleBaseRange=false;
            String[] rangeSplit=null;
            if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
              rangeSplit=range.split(""String_Node_Str"");
              singleBaseRange=true;
            }
 else {
              rangeSplit=range.split(""String_Node_Str"");
            }
            try {
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[1]);
              if (start > end) {
                int temp=start;
                start=end;
                end=temp;
              }
              SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
              sa.setComponent(""String_Node_Str"" + featureCnt);
              Range newRange=(Range)sa.getLocation(""String_Node_Str"");
              if (startLessThan) {
                annotation=new Annotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX),""String_Node_Str"");
                newRange.addAnnotation(annotation);
              }
              if (endGreaterThan) {
                annotation=new Annotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX),""String_Node_Str"");
                newRange.addAnnotation(annotation);
              }
              if (singleBaseRange) {
                annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                newRange.addAnnotation(annotation);
              }
            }
 catch (            Exception e) {
              System.out.println(lineCounter + ""String_Node_Str"" + strLine);
            }
          }
          featureCnt++;
        }
      }
 else       if (originMode) {
        if (elements == null) {
          elements=new String(""String_Node_Str"");
        }
        String[] strSplit=strLine.split(""String_Node_Str"");
        for (int i=1; i < strSplit.length; i++) {
          sbSequence.append(strSplit[i]);
        }
      }
    }
  }
  Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,sbSequence.toString(),Sequence.IUPAC_DNA);
  topCD.addSequence(sequence);
  createSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);
  br.close();
}",0.9983259675907326
12554,"static void read(SBOLDocument doc,BufferedReader br,String URIprefix,String version,URI encoding) throws SBOLValidationException, IOException {
  nextLine=null;
  String strLine;
  StringBuilder sbSequence=new StringBuilder();
  String elements=null;
  String description=""String_Node_Str"";
  boolean sequenceMode=false;
  String displayId;
  while ((strLine=readFASTALine(br)) != null) {
    strLine=strLine.trim();
    if (strLine.startsWith(""String_Node_Str"")) {
      if (sequenceMode) {
        sequenceMode=false;
        displayId=URIcompliance.fixDisplayId(description);
        Sequence sequence=doc.createSequence(URIprefix,displayId,version,sbSequence.toString(),encoding);
        sequence.setDescription(description);
        description=""String_Node_Str"";
        sbSequence=new StringBuilder();
      }
      description+=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"").trim();
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      if (sequenceMode) {
        sequenceMode=false;
        displayId=URIcompliance.fixDisplayId(description);
        Sequence sequence=doc.createSequence(URIprefix,displayId,version,sbSequence.toString(),encoding);
        sequence.setDescription(description);
        description=""String_Node_Str"";
        sbSequence=new StringBuilder();
      }
      description+=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"").trim();
    }
 else {
      sequenceMode=true;
      if (elements == null) {
        elements=new String(""String_Node_Str"");
      }
      String[] strSplit=strLine.split(""String_Node_Str"");
      for (int i=0; i < strSplit.length; i++) {
        sbSequence.append(strSplit[i]);
      }
    }
  }
  displayId=URIcompliance.fixDisplayId(description);
  Sequence sequence=doc.createSequence(URIprefix,displayId,version,sbSequence.toString(),encoding);
  sequence.setDescription(description);
}","static void read(SBOLDocument doc,String stringBuffer,String URIprefix,String version,URI encoding) throws SBOLValidationException, IOException {
  nextLine=null;
  String strLine;
  StringBuilder sbSequence=new StringBuilder();
  String elements=null;
  String description=""String_Node_Str"";
  boolean sequenceMode=false;
  String displayId;
  BufferedReader br=new BufferedReader(new StringReader(stringBuffer));
  while ((strLine=readFASTALine(br)) != null) {
    strLine=strLine.trim();
    if (strLine.startsWith(""String_Node_Str"")) {
      if (sequenceMode) {
        sequenceMode=false;
        displayId=URIcompliance.fixDisplayId(description);
        Sequence sequence=doc.createSequence(URIprefix,displayId,version,sbSequence.toString(),encoding);
        sequence.setDescription(description);
        description=""String_Node_Str"";
        sbSequence=new StringBuilder();
      }
      description+=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"").trim();
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      if (sequenceMode) {
        sequenceMode=false;
        displayId=URIcompliance.fixDisplayId(description);
        Sequence sequence=doc.createSequence(URIprefix,displayId,version,sbSequence.toString(),encoding);
        sequence.setDescription(description);
        description=""String_Node_Str"";
        sbSequence=new StringBuilder();
      }
      description+=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"").trim();
    }
 else {
      sequenceMode=true;
      if (elements == null) {
        elements=new String(""String_Node_Str"");
      }
      String[] strSplit=strLine.split(""String_Node_Str"");
      for (int i=0; i < strSplit.length; i++) {
        sbSequence.append(strSplit[i]);
      }
    }
  }
  displayId=URIcompliance.fixDisplayId(description);
  Sequence sequence=doc.createSequence(URIprefix,displayId,version,sbSequence.toString(),encoding);
  sequence.setDescription(description);
  br.close();
}",0.9714730290456433
12555,"static void read(SBOLDocument doc,BufferedReader br,String URIPrefix) throws IOException, SBOLConversionException, SBOLValidationException {
  so=new SequenceOntology();
  nextLine=null;
  featureMode=false;
  originMode=false;
  doc.addNamespace(URI.create(GBNAMESPACE),GBPREFIX);
  String strLine;
  String id=""String_Node_Str"";
  String version=""String_Node_Str"";
  int featureCnt=0;
  int refCnt=0;
  StringBuilder sbSequence=new StringBuilder();
  String elements=null;
  String description=""String_Node_Str"";
  URI type=ComponentDefinition.DNA;
  ComponentDefinition topCD=null;
  List<Annotation> annotations=new ArrayList<Annotation>();
  List<Annotation> nestedAnnotations=null;
  Annotation annotation=null;
  while ((strLine=readGenBankLine(br)) != null) {
    strLine=strLine.trim();
    if (strLine.startsWith(""String_Node_Str"")) {
      String[] strSplit=strLine.split(""String_Node_Str"");
      id=strSplit[1];
      annotation=new Annotation(new QName(GBNAMESPACE,LOCUS,GBPREFIX),strSplit[1]);
      annotations.add(annotation);
      if (strSplit[4].toUpperCase().contains(""String_Node_Str"")) {
        type=ComponentDefinition.RNA;
      }
      annotation=new Annotation(new QName(GBNAMESPACE,MOLECULE,GBPREFIX),strSplit[4]);
      annotations.add(annotation);
      for (int i=5; i < strSplit.length; i++) {
        if (strSplit[i].startsWith(""String_Node_Str"") || strSplit[i].startsWith(""String_Node_Str"")) {
          annotation=new Annotation(new QName(GBNAMESPACE,TOPOLOGY,GBPREFIX),strSplit[i]);
        }
 else         if (strSplit[i].length() == 3) {
          annotation=new Annotation(new QName(GBNAMESPACE,DIVISION,GBPREFIX),strSplit[i]);
        }
 else {
          annotation=new Annotation(new QName(GBNAMESPACE,DATE,GBPREFIX),strSplit[i]);
        }
        annotations.add(annotation);
      }
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String[] strSplit=strLine.split(""String_Node_Str"");
      String accession=strSplit[1];
      id=accession;
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String[] strSplit=strLine.split(""String_Node_Str"");
      version=strSplit[1].split(""String_Node_Str"")[1];
      if (!id.equals(strSplit[1].split(""String_Node_Str"")[0])) {
        throw new SBOLConversionException(""String_Node_Str"");
      }
      if (strSplit.length > 2) {
        annotation=new Annotation(new QName(GBNAMESPACE,GINUMBER,GBPREFIX),strSplit[2]);
        annotations.add(annotation);
      }
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(GBNAMESPACE,KEYWORDS,GBPREFIX),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(GBNAMESPACE,SOURCE,GBPREFIX),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(GBNAMESPACE,ORGANISM,GBPREFIX),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      nestedAnnotations=new ArrayList<Annotation>();
      Annotation labelAnnotation=new Annotation(new QName(GBNAMESPACE,LABEL,GBPREFIX),annotationStr);
      nestedAnnotations.add(labelAnnotation);
      URI nestedURI=URI.create(URIPrefix + ""String_Node_Str"" + id+ ""String_Node_Str""+ refCnt);
      refCnt++;
      annotation=new Annotation(new QName(GBNAMESPACE,REFERENCE,GBPREFIX),new QName(GBNAMESPACE,NESTEDREFERENCE,GBPREFIX),nestedURI,nestedAnnotations);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,AUTHORS,GBPREFIX),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,TITLE,GBPREFIX),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,JOURNAL,GBPREFIX),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,MEDLINE,GBPREFIX),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,PUBMED,GBPREFIX),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(GBNAMESPACE,COMMENT,GBPREFIX),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(GBNAMESPACE,BASECOUNT,GBPREFIX),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      topCD=doc.createComponentDefinition(id,version,type);
      topCD.addRole(SequenceOntology.ENGINEERED_REGION);
      if (!""String_Node_Str"".equals(description)) {
        topCD.setDescription(description);
      }
      topCD.setAnnotations(annotations);
      featureMode=true;
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      originMode=true;
      featureMode=false;
    }
 else {
      if (featureMode) {
        if (strLine.startsWith(""String_Node_Str"")) {
          String tag=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
          String value=""String_Node_Str"";
          if ((-1) != strLine.indexOf('=')) {
            String[] splitStr=strLine.split(""String_Node_Str"");
            tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
            value=splitStr[1];
          }
          StringBuilder sbValue=new StringBuilder();
          sbValue.append(value);
          if (value.startsWith(""String_Node_Str"") && !value.endsWith(""String_Node_Str"")) {
            while (true) {
              strLine=readGenBankLine(br).trim();
              sbValue.append(strLine);
              if (strLine.endsWith(""String_Node_Str"")) {
                break;
              }
            }
          }
          SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
          if (null != sa) {
            annotation=new Annotation(new QName(GBNAMESPACE,tag,GBPREFIX),value);
            sa.addAnnotation(annotation);
          }
        }
 else {
          strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
          String[] strSplit=strLine.split(""String_Node_Str"");
          URI role=convertGenBanktoSO(strSplit[0]);
          ComponentDefinition feature=doc.createComponentDefinition(""String_Node_Str"" + featureCnt,version,type);
          feature.addRole(role);
          String range=strSplit[1];
          OrientationType orientation=OrientationType.INLINE;
          if (range.startsWith(""String_Node_Str"")) {
            orientation=OrientationType.REVERSECOMPLEMENT;
            range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
          }
          if (range.startsWith(""String_Node_Str"") || range.startsWith(""String_Node_Str"")) {
            String multiType=""String_Node_Str"";
            if (range.startsWith(""String_Node_Str"")) {
              multiType=""String_Node_Str"";
            }
            range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            String[] ranges=range.split(""String_Node_Str"");
            int rangeCnt=0;
            SequenceAnnotation sa=null;
            for (            String r : ranges) {
              orientation=OrientationType.INLINE;
              if (r.startsWith(""String_Node_Str"")) {
                orientation=OrientationType.REVERSECOMPLEMENT;
                r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean startLessThan=false;
              boolean endGreaterThan=false;
              if (r.contains(""String_Node_Str"")) {
                startLessThan=true;
                r=r.replace(""String_Node_Str"",""String_Node_Str"");
              }
              if (r.contains(""String_Node_Str"")) {
                endGreaterThan=true;
                r=r.replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean singleBaseRange=false;
              String[] rangeSplit=null;
              if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                rangeSplit=r.split(""String_Node_Str"");
                singleBaseRange=true;
              }
 else {
                rangeSplit=r.split(""String_Node_Str"");
              }
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[1]);
              if (rangeCnt == 0) {
                sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
                sa.setComponent(""String_Node_Str"" + featureCnt);
                annotation=new Annotation(new QName(GBNAMESPACE,MULTIRANGETYPE,GBPREFIX),multiType);
                sa.addAnnotation(annotation);
              }
 else               if (sa != null) {
                Range newRange=sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
              rangeCnt++;
            }
          }
 else           if (range.contains(""String_Node_Str"")) {
            String[] rangeSplit=range.split(""String_Node_Str"");
            int at=Integer.parseInt(rangeSplit[0]);
            SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
            sa.setComponent(""String_Node_Str"" + featureCnt);
          }
 else {
            boolean startLessThan=false;
            boolean endGreaterThan=false;
            if (range.contains(""String_Node_Str"")) {
              startLessThan=true;
              range=range.replace(""String_Node_Str"",""String_Node_Str"");
            }
            if (range.contains(""String_Node_Str"")) {
              endGreaterThan=true;
              range=range.replace(""String_Node_Str"",""String_Node_Str"");
            }
            boolean singleBaseRange=false;
            String[] rangeSplit=null;
            if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
              rangeSplit=range.split(""String_Node_Str"");
              singleBaseRange=true;
            }
 else {
              rangeSplit=range.split(""String_Node_Str"");
            }
            int start=Integer.parseInt(rangeSplit[0]);
            int end=Integer.parseInt(rangeSplit[1]);
            if (start > end) {
              int temp=start;
              start=end;
              end=temp;
            }
            SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
            sa.setComponent(""String_Node_Str"" + featureCnt);
            Range newRange=(Range)sa.getLocation(""String_Node_Str"");
            if (startLessThan) {
              annotation=new Annotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX),""String_Node_Str"");
              newRange.addAnnotation(annotation);
            }
            if (endGreaterThan) {
              annotation=new Annotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX),""String_Node_Str"");
              newRange.addAnnotation(annotation);
            }
            if (singleBaseRange) {
              annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
              newRange.addAnnotation(annotation);
            }
          }
          featureCnt++;
        }
      }
 else       if (originMode) {
        if (elements == null) {
          elements=new String(""String_Node_Str"");
        }
        String[] strSplit=strLine.split(""String_Node_Str"");
        for (int i=1; i < strSplit.length; i++) {
          sbSequence.append(strSplit[i]);
        }
      }
    }
  }
  if (topCD == null) {
    throw new SBOLConversionException(""String_Node_Str"");
  }
  Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,sbSequence.toString(),Sequence.IUPAC_DNA);
  topCD.addSequence(sequence);
  createSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);
  br.close();
}","static void read(SBOLDocument doc,String stringBuffer,String URIPrefix) throws IOException, SBOLConversionException, SBOLValidationException {
  so=new SequenceOntology();
  nextLine=null;
  featureMode=false;
  originMode=false;
  doc.addNamespace(URI.create(GBNAMESPACE),GBPREFIX);
  BufferedReader br=new BufferedReader(new StringReader(stringBuffer));
  String strLine;
  String id=""String_Node_Str"";
  String version=""String_Node_Str"";
  int featureCnt=0;
  int refCnt=0;
  StringBuilder sbSequence=new StringBuilder();
  String elements=null;
  String description=""String_Node_Str"";
  URI type=ComponentDefinition.DNA;
  ComponentDefinition topCD=null;
  List<Annotation> annotations=new ArrayList<Annotation>();
  List<Annotation> nestedAnnotations=null;
  Annotation annotation=null;
  while ((strLine=readGenBankLine(br)) != null) {
    strLine=strLine.trim();
    if (strLine.startsWith(""String_Node_Str"")) {
      String[] strSplit=strLine.split(""String_Node_Str"");
      id=strSplit[1];
      annotation=new Annotation(new QName(GBNAMESPACE,LOCUS,GBPREFIX),strSplit[1]);
      annotations.add(annotation);
      if (strSplit[4].toUpperCase().contains(""String_Node_Str"")) {
        type=ComponentDefinition.RNA;
      }
      annotation=new Annotation(new QName(GBNAMESPACE,MOLECULE,GBPREFIX),strSplit[4]);
      annotations.add(annotation);
      for (int i=5; i < strSplit.length; i++) {
        if (strSplit[i].startsWith(""String_Node_Str"") || strSplit[i].startsWith(""String_Node_Str"")) {
          annotation=new Annotation(new QName(GBNAMESPACE,TOPOLOGY,GBPREFIX),strSplit[i]);
        }
 else         if (strSplit[i].length() == 3) {
          annotation=new Annotation(new QName(GBNAMESPACE,DIVISION,GBPREFIX),strSplit[i]);
        }
 else {
          annotation=new Annotation(new QName(GBNAMESPACE,DATE,GBPREFIX),strSplit[i]);
        }
        annotations.add(annotation);
      }
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String[] strSplit=strLine.split(""String_Node_Str"");
      String accession=strSplit[1];
      id=accession;
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String[] strSplit=strLine.split(""String_Node_Str"");
      version=strSplit[1].split(""String_Node_Str"")[1];
      if (!id.equals(strSplit[1].split(""String_Node_Str"")[0])) {
        throw new SBOLConversionException(""String_Node_Str"");
      }
      if (strSplit.length > 2) {
        annotation=new Annotation(new QName(GBNAMESPACE,GINUMBER,GBPREFIX),strSplit[2]);
        annotations.add(annotation);
      }
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(GBNAMESPACE,KEYWORDS,GBPREFIX),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(GBNAMESPACE,SOURCE,GBPREFIX),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(GBNAMESPACE,ORGANISM,GBPREFIX),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      nestedAnnotations=new ArrayList<Annotation>();
      Annotation labelAnnotation=new Annotation(new QName(GBNAMESPACE,LABEL,GBPREFIX),annotationStr);
      nestedAnnotations.add(labelAnnotation);
      URI nestedURI=URI.create(URIPrefix + ""String_Node_Str"" + id+ ""String_Node_Str""+ refCnt);
      refCnt++;
      annotation=new Annotation(new QName(GBNAMESPACE,REFERENCE,GBPREFIX),new QName(GBNAMESPACE,NESTEDREFERENCE,GBPREFIX),nestedURI,nestedAnnotations);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,AUTHORS,GBPREFIX),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,TITLE,GBPREFIX),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,JOURNAL,GBPREFIX),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,MEDLINE,GBPREFIX),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(GBNAMESPACE,PUBMED,GBPREFIX),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(GBNAMESPACE,COMMENT,GBPREFIX),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(GBNAMESPACE,BASECOUNT,GBPREFIX),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      topCD=doc.createComponentDefinition(id,version,type);
      topCD.addRole(SequenceOntology.ENGINEERED_REGION);
      if (!""String_Node_Str"".equals(description)) {
        topCD.setDescription(description);
      }
      topCD.setAnnotations(annotations);
      featureMode=true;
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      originMode=true;
      featureMode=false;
    }
 else {
      if (featureMode) {
        if (strLine.startsWith(""String_Node_Str"")) {
          String tag=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
          String value=""String_Node_Str"";
          if ((-1) != strLine.indexOf('=')) {
            String[] splitStr=strLine.split(""String_Node_Str"");
            tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
            value=splitStr[1];
          }
          StringBuilder sbValue=new StringBuilder();
          sbValue.append(value);
          if (value.startsWith(""String_Node_Str"") && !value.endsWith(""String_Node_Str"")) {
            while (true) {
              strLine=readGenBankLine(br).trim();
              sbValue.append(strLine);
              if (strLine.endsWith(""String_Node_Str"")) {
                break;
              }
            }
          }
          SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
          if (null != sa) {
            annotation=new Annotation(new QName(GBNAMESPACE,tag,GBPREFIX),value);
            sa.addAnnotation(annotation);
          }
        }
 else {
          strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
          String[] strSplit=strLine.split(""String_Node_Str"");
          URI role=convertGenBanktoSO(strSplit[0]);
          ComponentDefinition feature=doc.createComponentDefinition(""String_Node_Str"" + featureCnt,version,type);
          feature.addRole(role);
          String range=strSplit[1];
          OrientationType orientation=OrientationType.INLINE;
          if (range.startsWith(""String_Node_Str"")) {
            orientation=OrientationType.REVERSECOMPLEMENT;
            range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
          }
          if (range.startsWith(""String_Node_Str"") || range.startsWith(""String_Node_Str"")) {
            String multiType=""String_Node_Str"";
            if (range.startsWith(""String_Node_Str"")) {
              multiType=""String_Node_Str"";
            }
            range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            String[] ranges=range.split(""String_Node_Str"");
            int rangeCnt=0;
            SequenceAnnotation sa=null;
            for (            String r : ranges) {
              orientation=OrientationType.INLINE;
              if (r.startsWith(""String_Node_Str"")) {
                orientation=OrientationType.REVERSECOMPLEMENT;
                r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean startLessThan=false;
              boolean endGreaterThan=false;
              if (r.contains(""String_Node_Str"")) {
                startLessThan=true;
                r=r.replace(""String_Node_Str"",""String_Node_Str"");
              }
              if (r.contains(""String_Node_Str"")) {
                endGreaterThan=true;
                r=r.replace(""String_Node_Str"",""String_Node_Str"");
              }
              boolean singleBaseRange=false;
              String[] rangeSplit=null;
              if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
                rangeSplit=r.split(""String_Node_Str"");
                singleBaseRange=true;
              }
 else {
                rangeSplit=r.split(""String_Node_Str"");
              }
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[1]);
              if (rangeCnt == 0) {
                sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
                sa.setComponent(""String_Node_Str"" + featureCnt);
                annotation=new Annotation(new QName(GBNAMESPACE,MULTIRANGETYPE,GBPREFIX),multiType);
                sa.addAnnotation(annotation);
              }
 else               if (sa != null) {
                Range newRange=sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
                if (startLessThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (endGreaterThan) {
                  annotation=new Annotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
                if (singleBaseRange) {
                  annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
                  newRange.addAnnotation(annotation);
                }
              }
              rangeCnt++;
            }
          }
 else           if (range.contains(""String_Node_Str"")) {
            String[] rangeSplit=range.split(""String_Node_Str"");
            int at=Integer.parseInt(rangeSplit[0]);
            SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
            sa.setComponent(""String_Node_Str"" + featureCnt);
          }
 else {
            boolean startLessThan=false;
            boolean endGreaterThan=false;
            if (range.contains(""String_Node_Str"")) {
              startLessThan=true;
              range=range.replace(""String_Node_Str"",""String_Node_Str"");
            }
            if (range.contains(""String_Node_Str"")) {
              endGreaterThan=true;
              range=range.replace(""String_Node_Str"",""String_Node_Str"");
            }
            boolean singleBaseRange=false;
            String[] rangeSplit=null;
            if (range.contains(""String_Node_Str"") && !range.contains(""String_Node_Str"")) {
              rangeSplit=range.split(""String_Node_Str"");
              singleBaseRange=true;
            }
 else {
              rangeSplit=range.split(""String_Node_Str"");
            }
            int start=Integer.parseInt(rangeSplit[0]);
            int end=Integer.parseInt(rangeSplit[1]);
            if (start > end) {
              int temp=start;
              start=end;
              end=temp;
            }
            SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
            sa.setComponent(""String_Node_Str"" + featureCnt);
            Range newRange=(Range)sa.getLocation(""String_Node_Str"");
            if (startLessThan) {
              annotation=new Annotation(new QName(GBNAMESPACE,STARTLESSTHAN,GBPREFIX),""String_Node_Str"");
              newRange.addAnnotation(annotation);
            }
            if (endGreaterThan) {
              annotation=new Annotation(new QName(GBNAMESPACE,ENDGREATERTHAN,GBPREFIX),""String_Node_Str"");
              newRange.addAnnotation(annotation);
            }
            if (singleBaseRange) {
              annotation=new Annotation(new QName(GBNAMESPACE,SINGLEBASERANGE,GBPREFIX),""String_Node_Str"");
              newRange.addAnnotation(annotation);
            }
          }
          featureCnt++;
        }
      }
 else       if (originMode) {
        if (elements == null) {
          elements=new String(""String_Node_Str"");
        }
        String[] strSplit=strLine.split(""String_Node_Str"");
        for (int i=1; i < strSplit.length; i++) {
          sbSequence.append(strSplit[i]);
        }
      }
    }
  }
  if (topCD == null) {
    throw new SBOLConversionException(""String_Node_Str"");
  }
  Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,sbSequence.toString(),Sequence.IUPAC_DNA);
  topCD.addSequence(sequence);
  createSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);
  br.close();
}",0.996758289997974
12556,"static void read(SBOLDocument SBOLDoc,InputStream in,String fileType) throws SBOLValidationException, IOException, SBOLConversionException {
  compliant=SBOLDoc.isCompliant();
  Scanner scanner=new Scanner(in,""String_Node_Str"");
  String inputStreamString=scanner.useDelimiter(""String_Node_Str"").next();
  clearErrors();
  DocumentRoot<QName> document=null;
  try {
    if (FASTA.isFastaString(inputStreamString)) {
      SBOLDoc.setCreateDefaults(true);
      if (URIPrefix == null) {
        scanner.close();
        throw new SBOLConversionException(""String_Node_Str"");
      }
      SBOLDoc.setDefaultURIprefix(URIPrefix);
      FASTA.read(SBOLDoc,new BufferedReader(new StringReader(inputStreamString)),URIPrefix,version,defaultSequenceEncoding);
      scanner.close();
      return;
    }
 else     if (GenBank.isGenBankString(inputStreamString)) {
      SBOLDoc.setCreateDefaults(true);
      if (URIPrefix == null) {
        scanner.close();
        throw new SBOLConversionException(""String_Node_Str"");
      }
      SBOLDoc.setDefaultURIprefix(URIPrefix);
      GenBank.read(SBOLDoc,new BufferedReader(new StringReader(inputStreamString)),URIPrefix);
      scanner.close();
      return;
    }
 else     if (fileType.equals(SBOLDocument.JSON)) {
      document=readJSON(new StringReader(inputStreamString));
    }
 else     if (fileType.equals(SBOLDocument.TURTLE)) {
      document=readTurtle(new StringReader(inputStreamString));
    }
 else {
      document=readRDF(new StringReader(inputStreamString));
    }
    if (getSBOLVersion(document).equals(SBOLVERSION1)) {
      scanner.close();
      readV1(SBOLDoc,document);
      return;
    }
  }
 catch (  SBOLValidationException e) {
    if (keepGoing) {
      errors.add(e.getMessage());
      return;
    }
 else {
      throw new SBOLValidationException(e);
    }
  }
  for (  NamespaceBinding n : document.getNamespaceBindings()) {
    if (SBOLDoc.getNamespace(URI.create(n.getNamespaceURI())) == null) {
      if (n.getPrefix() == null) {
        SBOLDoc.addNamespaceBinding(NamespaceBinding(n.getNamespaceURI(),""String_Node_Str""));
      }
 else {
        SBOLDoc.addNamespaceBinding(NamespaceBinding(n.getNamespaceURI(),n.getPrefix()));
      }
    }
  }
  readTopLevelDocs(SBOLDoc,document);
  scanner.close();
  SBOLValidate.clearErrors();
  SBOLValidate.validateCompliance(SBOLDoc);
  if (SBOLValidate.getNumErrors() > 0) {
    SBOLDoc.setCompliant(false);
  }
}","static void read(SBOLDocument SBOLDoc,InputStream in,String fileType) throws SBOLValidationException, IOException, SBOLConversionException {
  compliant=SBOLDoc.isCompliant();
  Scanner scanner=new Scanner(in,""String_Node_Str"");
  String inputStreamString=scanner.useDelimiter(""String_Node_Str"").next();
  clearErrors();
  DocumentRoot<QName> document=null;
  try {
    if (FASTA.isFastaString(inputStreamString)) {
      SBOLDoc.setCreateDefaults(true);
      SBOLDoc.setCompliant(true);
      if (URIPrefix == null) {
        scanner.close();
        throw new SBOLConversionException(""String_Node_Str"");
      }
      SBOLDoc.setDefaultURIprefix(URIPrefix);
      FASTA.read(SBOLDoc,inputStreamString,URIPrefix,version,defaultSequenceEncoding);
      scanner.close();
      return;
    }
 else     if (GenBank.isGenBankString(inputStreamString)) {
      SBOLDoc.setCreateDefaults(true);
      SBOLDoc.setCompliant(true);
      if (URIPrefix == null) {
        scanner.close();
        throw new SBOLConversionException(""String_Node_Str"");
      }
      SBOLDoc.setDefaultURIprefix(URIPrefix);
      GenBank.read(SBOLDoc,inputStreamString,URIPrefix);
      scanner.close();
      return;
    }
 else     if (fileType.equals(SBOLDocument.JSON)) {
      document=readJSON(new StringReader(inputStreamString));
    }
 else     if (fileType.equals(SBOLDocument.TURTLE)) {
      document=readTurtle(new StringReader(inputStreamString));
    }
 else {
      document=readRDF(new StringReader(inputStreamString));
    }
    if (getSBOLVersion(document).equals(SBOLVERSION1)) {
      scanner.close();
      readV1(SBOLDoc,document);
      return;
    }
  }
 catch (  SBOLValidationException e) {
    if (keepGoing) {
      errors.add(e.getMessage());
      return;
    }
 else {
      throw new SBOLValidationException(e);
    }
  }
  for (  NamespaceBinding n : document.getNamespaceBindings()) {
    if (SBOLDoc.getNamespace(URI.create(n.getNamespaceURI())) == null) {
      if (n.getPrefix() == null) {
        SBOLDoc.addNamespaceBinding(NamespaceBinding(n.getNamespaceURI(),""String_Node_Str""));
      }
 else {
        SBOLDoc.addNamespaceBinding(NamespaceBinding(n.getNamespaceURI(),n.getPrefix()));
      }
    }
  }
  readTopLevelDocs(SBOLDoc,document);
  scanner.close();
  SBOLValidate.clearErrors();
  SBOLValidate.validateCompliance(SBOLDoc);
  if (SBOLValidate.getNumErrors() > 0) {
    SBOLDoc.setCompliant(false);
  }
}",0.9564144736842104
12557,"@Test public void test_GenBank_Files() throws Exception {
  File file_base=null;
  try {
    file_base=new File(ValidationTest.class.getResource(""String_Node_Str"").toURI());
  }
 catch (  URISyntaxException e1) {
    e1.printStackTrace();
  }
  File file;
  for (  File f : file_base.listFiles()) {
    if (f.isDirectory()) {
      continue;
    }
    file=new File(f.getAbsolutePath());
    try {
      SBOLReader.setURIPrefix(""String_Node_Str"");
      SBOLDocument actual=SBOLReader.read(file);
      ByteArrayOutputStream out=new ByteArrayOutputStream();
      SBOLWriter.write(actual,out,SBOLDocument.GENBANK);
      runTest(""String_Node_Str"" + f.getName().replace(""String_Node_Str"",""String_Node_Str""),actual,""String_Node_Str"",true);
    }
 catch (    SBOLValidationException e) {
      throw new AssertionError(""String_Node_Str"" + f.getName(),e);
    }
  }
}","@Test public void test_GenBank_Files(){
  File file_base=null;
  try {
    file_base=new File(ValidationTest.class.getResource(""String_Node_Str"").toURI());
  }
 catch (  URISyntaxException e1) {
    e1.printStackTrace();
  }
  File file;
  for (  File f : file_base.listFiles()) {
    if (f.isDirectory()) {
      continue;
    }
    file=new File(f.getAbsolutePath());
    try {
      SBOLReader.setURIPrefix(""String_Node_Str"");
      SBOLDocument actual=SBOLReader.read(file);
      ByteArrayOutputStream out=new ByteArrayOutputStream();
      SBOLWriter.write(actual,out,SBOLDocument.GENBANK);
      runTest(""String_Node_Str"" + f.getName().replace(""String_Node_Str"",""String_Node_Str""),actual,""String_Node_Str"",true);
    }
 catch (    Exception e) {
      throw new AssertionError(""String_Node_Str"" + f.getName(),e);
    }
  }
}",0.9811097992916176
12558,"/** 
 * Takes in a given InputStream and fileType, and add the data read to this SBOLDocument.
 * @param in a given RDF InputStream
 * @param fileType the fileType that this file is in
 * @throws FactoryConfigurationError - TODO
 * @throws XMLStreamException invalid xml file
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 */
void read(InputStream in,String fileType) throws FactoryConfigurationError, SBOLValidationException {
  SBOLReader.read(this,in,fileType);
}","/** 
 * Takes in a given InputStream and fileType, and add the data read to this SBOLDocument.
 * @param in a given RDF InputStream
 * @param fileType the fileType that this file is in
 * @throws FactoryConfigurationError - TODO
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 */
void read(InputStream in,String fileType) throws FactoryConfigurationError, SBOLValidationException {
  SBOLReader.read(this,in,fileType);
}",0.6799580272822665
12559,"/** 
 * Serializes SBOLDocument and outputs the data from the serialization to the given output stream in RDF format
 * @param out the given output stream
 * @throws CoreIoException - TODO
 * @throws FactoryConfigurationError - TODO
 * @throws XMLStreamException invalid xml file
 * @throws IOException - TODO
 */
public static void write(OutputStream out) throws XMLStreamException, FactoryConfigurationError, CoreIoException {
  document.write(out);
}","/** 
 * Serializes SBOLDocument and outputs the data from the serialization to the given output stream in RDF format
 * @param out the given output stream
 * @throws CoreIoException - TODO
 * @throws FactoryConfigurationError - TODO
 * @throws XMLStreamException invalid xml file
 */
public static void write(OutputStream out) throws XMLStreamException, FactoryConfigurationError, CoreIoException {
  document.write(out);
}",0.9657534246575342
12560,"/** 
 * Sets the default URI prefix to the given   {@code defaultURIprefix}.
 * @param defaultURIprefix the given default URI prefix
 * @throws SBOLValidationException  if this SBOLDocument object is not compliant
 */
public static void setDefaultURIprefix(String defaultURIprefix){
  document.setDefaultURIprefix(defaultURIprefix);
}","/** 
 * Sets the default URI prefix to the given   {@code defaultURIprefix}.
 * @param defaultURIprefix the given default URI prefix
 */
public static void setDefaultURIprefix(String defaultURIprefix){
  document.setDefaultURIprefix(defaultURIprefix);
}",0.8620102214650767
12561,"public static SBOLDocument writeThenRead(SBOLDocument doc) throws SBOLValidationException, IOException, XMLStreamException, FactoryConfigurationError, CoreIoException {
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  SBOLWriter.write(doc,out);
  return SBOLReader.read(new ByteArrayInputStream(out.toByteArray()));
}","public static SBOLDocument writeThenRead(SBOLDocument doc) throws SBOLValidationException, IOException, XMLStreamException, FactoryConfigurationError, CoreIoException, SBOLConversionException {
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  SBOLWriter.write(doc,out);
  return SBOLReader.read(new ByteArrayInputStream(out.toByteArray()));
}",0.9631811487481592
12562,"public static void main(String[] args) throws XMLStreamException, FactoryConfigurationError, CoreIoException, IOException, SBOLValidationException {
  String prURI=""String_Node_Str"";
  String prPrefix=""String_Node_Str"";
  String myersLabURI=""String_Node_Str"";
  String myersLabPrefix=""String_Node_Str"";
  SBOLDocument document=new SBOLDocument();
  document.setDefaultURIprefix(prURI);
  document.setTypesInURIs(true);
  document.setComplete(true);
  document.setCreateDefaults(true);
  document.addNamespace(URI.create(prURI),prPrefix);
  document.addNamespace(URI.create(myersLabURI),myersLabPrefix);
  HashSet<URI> types=new HashSet<URI>(Arrays.asList(ComponentDefinition.DNA,URI.create(""String_Node_Str"")));
  ComponentDefinition TetR_promoter=document.createComponentDefinition(""String_Node_Str"",types);
  ComponentDefinition LacI_repressor=document.createComponentDefinition(""String_Node_Str"",types);
  ComponentDefinition pIKELeftCassette=document.createComponentDefinition(""String_Node_Str"",types);
  Sequence seq_187=document.createSequence(""String_Node_Str"",""String_Node_Str"",Sequence.IUPAC_DNA);
  String element2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Sequence seq_153=document.createSequence(""String_Node_Str"",element2,Sequence.IUPAC_DNA);
  TetR_promoter.setName(""String_Node_Str"");
  LacI_repressor.setName(""String_Node_Str"");
  TetR_promoter.setDescription(""String_Node_Str"");
  LacI_repressor.setDescription(""String_Node_Str"");
  if (TetR_promoter.isSetName()) {
    TetR_promoter.unsetName();
  }
  TetR_promoter.setName(""String_Node_Str"");
  TetR_promoter.addRole(SequenceOntology.PROMOTER);
  LacI_repressor.addRole(SequenceOntology.CDS);
  URI TetR_promoter_role2=URI.create(""String_Node_Str"");
  TetR_promoter.addRole(TetR_promoter_role2);
  if (TetR_promoter.containsRole(TetR_promoter_role2)) {
    TetR_promoter.removeRole(TetR_promoter_role2);
  }
  TetR_promoter.clearRoles();
  if (!TetR_promoter.getRoles().isEmpty()) {
    System.out.println(""String_Node_Str"");
  }
  TetR_promoter.setRoles(new HashSet<URI>(Arrays.asList(SequenceOntology.PROMOTER)));
  TetR_promoter.addSequence(seq_187);
  LacI_repressor.addSequence(seq_153);
  pIKELeftCassette.addSequence(seq_187);
  pIKELeftCassette.clearSequences();
  TetR_promoter.createAnnotation(new QName(prURI,""String_Node_Str"",prPrefix),URI.create(""String_Node_Str""));
  GenericTopLevel datasheet=document.createGenericTopLevel(""String_Node_Str"",""String_Node_Str"",new QName(myersLabURI,""String_Node_Str"",myersLabPrefix));
  datasheet.setName(""String_Node_Str"");
  datasheet.createAnnotation(new QName(myersLabURI,""String_Node_Str"",myersLabPrefix),URI.create(myersLabURI + ""String_Node_Str""));
  datasheet.createAnnotation(new QName(myersLabURI,""String_Node_Str"",myersLabPrefix),""String_Node_Str"");
  TetR_promoter.createAnnotation(new QName(myersLabURI,""String_Node_Str"",myersLabPrefix),datasheet.getIdentity());
  pIKELeftCassette.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,TetR_promoter.getDisplayId(),LacI_repressor.getDisplayId());
  if (pIKELeftCassette.getComponent(""String_Node_Str"") == null) {
    System.out.println(""String_Node_Str"");
  }
  if (pIKELeftCassette.getComponent(""String_Node_Str"") == null) {
    System.out.println(""String_Node_Str"");
  }
  ComponentDefinition TetR_promoter_copy=(ComponentDefinition)document.createCopy(TetR_promoter,""String_Node_Str"");
  Sequence seq=document.createSequence(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",Sequence.IUPAC_DNA);
  TetR_promoter_copy.addSequence(seq);
  SBOLWriter.write(document,""String_Node_Str"");
  writeThenRead(document);
}","public static void main(String[] args) throws XMLStreamException, FactoryConfigurationError, CoreIoException, IOException, SBOLValidationException, SBOLConversionException {
  String prURI=""String_Node_Str"";
  String prPrefix=""String_Node_Str"";
  String myersLabURI=""String_Node_Str"";
  String myersLabPrefix=""String_Node_Str"";
  SBOLDocument document=new SBOLDocument();
  document.setDefaultURIprefix(prURI);
  document.setTypesInURIs(true);
  document.setComplete(true);
  document.setCreateDefaults(true);
  document.addNamespace(URI.create(prURI),prPrefix);
  document.addNamespace(URI.create(myersLabURI),myersLabPrefix);
  HashSet<URI> types=new HashSet<URI>(Arrays.asList(ComponentDefinition.DNA,URI.create(""String_Node_Str"")));
  ComponentDefinition TetR_promoter=document.createComponentDefinition(""String_Node_Str"",types);
  ComponentDefinition LacI_repressor=document.createComponentDefinition(""String_Node_Str"",types);
  ComponentDefinition pIKELeftCassette=document.createComponentDefinition(""String_Node_Str"",types);
  Sequence seq_187=document.createSequence(""String_Node_Str"",""String_Node_Str"",Sequence.IUPAC_DNA);
  String element2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Sequence seq_153=document.createSequence(""String_Node_Str"",element2,Sequence.IUPAC_DNA);
  TetR_promoter.setName(""String_Node_Str"");
  LacI_repressor.setName(""String_Node_Str"");
  TetR_promoter.setDescription(""String_Node_Str"");
  LacI_repressor.setDescription(""String_Node_Str"");
  if (TetR_promoter.isSetName()) {
    TetR_promoter.unsetName();
  }
  TetR_promoter.setName(""String_Node_Str"");
  TetR_promoter.addRole(SequenceOntology.PROMOTER);
  LacI_repressor.addRole(SequenceOntology.CDS);
  URI TetR_promoter_role2=URI.create(""String_Node_Str"");
  TetR_promoter.addRole(TetR_promoter_role2);
  if (TetR_promoter.containsRole(TetR_promoter_role2)) {
    TetR_promoter.removeRole(TetR_promoter_role2);
  }
  TetR_promoter.clearRoles();
  if (!TetR_promoter.getRoles().isEmpty()) {
    System.out.println(""String_Node_Str"");
  }
  TetR_promoter.setRoles(new HashSet<URI>(Arrays.asList(SequenceOntology.PROMOTER)));
  TetR_promoter.addSequence(seq_187);
  LacI_repressor.addSequence(seq_153);
  pIKELeftCassette.addSequence(seq_187);
  pIKELeftCassette.clearSequences();
  TetR_promoter.createAnnotation(new QName(prURI,""String_Node_Str"",prPrefix),URI.create(""String_Node_Str""));
  GenericTopLevel datasheet=document.createGenericTopLevel(""String_Node_Str"",""String_Node_Str"",new QName(myersLabURI,""String_Node_Str"",myersLabPrefix));
  datasheet.setName(""String_Node_Str"");
  datasheet.createAnnotation(new QName(myersLabURI,""String_Node_Str"",myersLabPrefix),URI.create(myersLabURI + ""String_Node_Str""));
  datasheet.createAnnotation(new QName(myersLabURI,""String_Node_Str"",myersLabPrefix),""String_Node_Str"");
  TetR_promoter.createAnnotation(new QName(myersLabURI,""String_Node_Str"",myersLabPrefix),datasheet.getIdentity());
  pIKELeftCassette.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,TetR_promoter.getDisplayId(),LacI_repressor.getDisplayId());
  if (pIKELeftCassette.getComponent(""String_Node_Str"") == null) {
    System.out.println(""String_Node_Str"");
  }
  if (pIKELeftCassette.getComponent(""String_Node_Str"") == null) {
    System.out.println(""String_Node_Str"");
  }
  ComponentDefinition TetR_promoter_copy=(ComponentDefinition)document.createCopy(TetR_promoter,""String_Node_Str"");
  Sequence seq=document.createSequence(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",Sequence.IUPAC_DNA);
  TetR_promoter_copy.addSequence(seq);
  SBOLWriter.write(document,""String_Node_Str"");
  writeThenRead(document);
}",0.99685098878952
12563,"public static SBOLDocument writeThenRead(SBOLDocument doc) throws SBOLValidationException, IOException, XMLStreamException, FactoryConfigurationError, CoreIoException {
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  SBOLWriter.write(doc,out);
  return SBOLReader.read(new ByteArrayInputStream(out.toByteArray()));
}","public static SBOLDocument writeThenRead(SBOLDocument doc) throws SBOLValidationException, IOException, XMLStreamException, FactoryConfigurationError, CoreIoException, SBOLConversionException {
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  SBOLWriter.write(doc,out);
  return SBOLReader.read(new ByteArrayInputStream(out.toByteArray()));
}",0.9631811487481592
12564,"public static void main(String[] args) throws URISyntaxException, SBOLValidationException {
  SBOLDocument doc=new SBOLDocument();
  doc.setDefaultURIprefix(""String_Node_Str"");
  doc.setComplete(true);
  doc.setCreateDefaults(true);
  String version=""String_Node_Str"";
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.RNA).addRole(SequenceOntology.SGRNA);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.COMPLEX);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA).addRole(SequenceOntology.PROMOTER);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  ModuleDefinition CRISPR_Template=doc.createModuleDefinition(""String_Node_Str"",version);
  Interaction Cas9Complex_Formation=CRISPR_Template.createInteraction(""String_Node_Str"",SystemsBiologyOntology.NON_COVALENT_BINDING);
  Cas9Complex_Formation.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.REACTANT);
  Cas9Complex_Formation.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.REACTANT);
  Cas9Complex_Formation.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PRODUCT);
  Interaction EYFP_production=CRISPR_Template.createInteraction(""String_Node_Str"",SystemsBiologyOntology.GENETIC_PRODUCTION);
  EYFP_production.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PROMOTER);
  EYFP_production.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PRODUCT);
  Interaction target_generic_gene_inhibition=CRISPR_Template.createInteraction(""String_Node_Str"",SystemsBiologyOntology.INHIBITION);
  target_generic_gene_inhibition.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.INHIBITOR);
  target_generic_gene_inhibition.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PROMOTER);
  String CRa_U6_seq_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,CRa_U6_seq_elements,Sequence.IUPAC_DNA);
  String gRNA_b_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,gRNA_b_elements,Sequence.IUPAC_DNA);
  String mKate_seq_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,mKate_seq_elements,Sequence.IUPAC_DNA);
  String CRP_b_seq_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,CRP_b_seq_elements,Sequence.IUPAC_DNA);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA).addRole(SequenceOntology.PROMOTER);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA).addRole(SequenceOntology.CDS);
  ComponentDefinition cas9m_BFP_gene=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  cas9m_BFP_gene.addRole(SequenceOntology.PROMOTER);
  cas9m_BFP_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  ComponentDefinition CRa_U6=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  CRa_U6.addRole(SequenceOntology.PROMOTER);
  CRa_U6.addSequence(""String_Node_Str"");
  ComponentDefinition gRNA_b_nc=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  gRNA_b_nc.addRole(SequenceOntology.CDS);
  gRNA_b_nc.addSequence(""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA).addRole(SequenceOntology.TERMINATOR);
  ComponentDefinition gRNA_b_gene=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  gRNA_b_gene.addRole(SequenceOntology.PROMOTER);
  gRNA_b_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  gRNA_b_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.RNA).addRole(SequenceOntology.SGRNA);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.COMPLEX);
  ComponentDefinition mKate_cds=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  mKate_cds.addRole(SequenceOntology.CDS);
  mKate_cds.addSequence(""String_Node_Str"");
  ComponentDefinition mKate_gene=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  mKate_gene.addRole(SequenceOntology.PROMOTER);
  mKate_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  ComponentDefinition Gal4VP16_cds=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  Gal4VP16_cds.addRole(SequenceOntology.CDS);
  ComponentDefinition Gal4VP16_gene=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  Gal4VP16_gene.addRole(SequenceOntology.PROMOTER);
  Gal4VP16_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  ComponentDefinition CRP_b=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  CRP_b.addRole(SequenceOntology.PROMOTER);
  CRP_b.addSequence(""String_Node_Str"");
  ComponentDefinition EYFP_cds=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  EYFP_cds.addRole(SequenceOntology.CDS);
  ComponentDefinition EYFP_gene=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  EYFP_gene.addRole(SequenceOntology.PROMOTER);
  EYFP_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  ModuleDefinition CRPb_circuit=doc.createModuleDefinition(""String_Node_Str"",version);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  Interaction mKate_production=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.GENETIC_PRODUCTION);
  mKate_production.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PRODUCT);
  mKate_production.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PROMOTER);
  Interaction GAL4VP16_production=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.GENETIC_PRODUCTION);
  GAL4VP16_production.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PROMOTER);
  GAL4VP16_production.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PRODUCT);
  Interaction cas9m_BFP_production=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.GENETIC_PRODUCTION);
  cas9m_BFP_production.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PROMOTER);
  cas9m_BFP_production.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PRODUCT);
  Interaction gRNA_b_production=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.GENETIC_PRODUCTION);
  gRNA_b_production.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PROMOTER);
  gRNA_b_production.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PRODUCT);
  Interaction EYFP_Activation=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.STIMULATION);
  EYFP_Activation.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.STIMULATOR);
  EYFP_Activation.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PROMOTER);
  Interaction mKate_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  mKate_deg.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.REACTANT);
  Interaction GAL4VP16_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  GAL4VP16_deg.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.REACTANT);
  Interaction cas9m_BFP_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  cas9m_BFP_deg.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.REACTANT);
  Interaction gRNA_b_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  gRNA_b_deg.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.REACTANT);
  Interaction EYFP_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  EYFP_deg.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.REACTANT);
  Interaction cas9m_BFP_gRNA_b_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  cas9m_BFP_gRNA_b_deg.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.REACTANT);
  Module Template_Module=CRPb_circuit.createModule(""String_Node_Str"",""String_Node_Str"",version);
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  ComponentDefinition cas9_generic1=doc.getComponentDefinition(""String_Node_Str"",version);
  ComponentDefinition cas9_generic2=doc.getComponentDefinition(""String_Node_Str"",null);
  if (cas9_generic1.equals(cas9_generic2)) {
    System.out.println(""String_Node_Str"");
  }
  gRNA_b_gene.getSequenceConstraint(""String_Node_Str"");
  CRISPR_Template.setName(""String_Node_Str"");
  if (CRISPR_Template.isSetName()) {
    CRISPR_Template.unsetName();
    CRISPR_Template.setName(""String_Node_Str"");
  }
  CRISPR_Template.setDescription(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  URI gRNA_b_gene_role2=URI.create(""String_Node_Str"");
  gRNA_b_gene.addRole(gRNA_b_gene_role2);
  if (gRNA_b_gene.containsRole(gRNA_b_gene_role2)) {
    gRNA_b_gene.removeRole(gRNA_b_gene_role2);
  }
  gRNA_b_gene.clearRoles();
  if (!gRNA_b_gene.getRoles().isEmpty()) {
    System.out.println(""String_Node_Str"");
  }
  gRNA_b_gene.setRoles(new HashSet<URI>(Arrays.asList(SequenceOntology.PROMOTER)));
  CRP_b.clearSequences();
  CRP_b.addSequence(""String_Node_Str"");
  String prURI=""String_Node_Str"";
  String prPrefix=""String_Node_Str"";
  doc.addNamespace(URI.create(prURI),prPrefix);
  ComponentDefinition pConst=doc.getComponentDefinition(""String_Node_Str"",version);
  pConst.createAnnotation(new QName(prURI,""String_Node_Str"",prPrefix),URI.create(""String_Node_Str""));
  String myersLabURI=""String_Node_Str"";
  String myersLabPrefix=""String_Node_Str"";
  doc.addNamespace(URI.create(myersLabURI),myersLabPrefix);
  GenericTopLevel datasheet=doc.createGenericTopLevel(""String_Node_Str"",""String_Node_Str"",new QName(myersLabURI,""String_Node_Str"",myersLabPrefix));
  datasheet.setName(""String_Node_Str"");
  datasheet.createAnnotation(new QName(myersLabURI,""String_Node_Str"",myersLabPrefix),URI.create(myersLabURI + ""String_Node_Str""));
  datasheet.createAnnotation(new QName(myersLabURI,""String_Node_Str"",myersLabPrefix),0.75);
  pConst.createAnnotation(new QName(myersLabURI,""String_Node_Str"",myersLabPrefix),datasheet.getIdentity());
  ComponentDefinition pConst_alt=(ComponentDefinition)doc.createCopy(pConst,""String_Node_Str"");
  Sequence pConst_alt_seq=doc.createSequence(""String_Node_Str"",version,""String_Node_Str"",Sequence.IUPAC_DNA);
  pConst_alt.addSequence(pConst_alt_seq);
  SBOLValidate.validateSBOL(doc,true,true,true);
  if (SBOLValidate.getNumErrors() > 0) {
    for (    String error : SBOLValidate.getErrors()) {
      System.out.println(error);
    }
    return;
  }
  try {
    SBOLWriter.write(doc,(System.out));
  }
 catch (  XMLStreamException|FactoryConfigurationError|CoreIoException e) {
    e.printStackTrace();
  }
  try {
    SBOLWriter.write(doc,""String_Node_Str"");
  }
 catch (  XMLStreamException|FactoryConfigurationError|CoreIoException|IOException e) {
    e.printStackTrace();
  }
}","public static void main(String[] args) throws URISyntaxException, SBOLValidationException {
  SBOLDocument doc=new SBOLDocument();
  doc.setDefaultURIprefix(""String_Node_Str"");
  doc.setComplete(true);
  doc.setCreateDefaults(true);
  String version=""String_Node_Str"";
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.RNA).addRole(SequenceOntology.SGRNA);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.COMPLEX);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA).addRole(SequenceOntology.PROMOTER);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  ModuleDefinition CRISPR_Template=doc.createModuleDefinition(""String_Node_Str"",version);
  Interaction Cas9Complex_Formation=CRISPR_Template.createInteraction(""String_Node_Str"",SystemsBiologyOntology.NON_COVALENT_BINDING);
  Cas9Complex_Formation.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.REACTANT);
  Cas9Complex_Formation.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.REACTANT);
  Cas9Complex_Formation.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PRODUCT);
  Interaction EYFP_production=CRISPR_Template.createInteraction(""String_Node_Str"",SystemsBiologyOntology.GENETIC_PRODUCTION);
  EYFP_production.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PROMOTER);
  EYFP_production.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PRODUCT);
  Interaction target_generic_gene_inhibition=CRISPR_Template.createInteraction(""String_Node_Str"",SystemsBiologyOntology.INHIBITION);
  target_generic_gene_inhibition.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.INHIBITOR);
  target_generic_gene_inhibition.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PROMOTER);
  String CRa_U6_seq_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,CRa_U6_seq_elements,Sequence.IUPAC_DNA);
  String gRNA_b_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,gRNA_b_elements,Sequence.IUPAC_DNA);
  String mKate_seq_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,mKate_seq_elements,Sequence.IUPAC_DNA);
  String CRP_b_seq_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,CRP_b_seq_elements,Sequence.IUPAC_DNA);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA).addRole(SequenceOntology.PROMOTER);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA).addRole(SequenceOntology.CDS);
  ComponentDefinition cas9m_BFP_gene=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  cas9m_BFP_gene.addRole(SequenceOntology.PROMOTER);
  cas9m_BFP_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  ComponentDefinition CRa_U6=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  CRa_U6.addRole(SequenceOntology.PROMOTER);
  CRa_U6.addSequence(""String_Node_Str"");
  ComponentDefinition gRNA_b_nc=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  gRNA_b_nc.addRole(SequenceOntology.CDS);
  gRNA_b_nc.addSequence(""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA).addRole(SequenceOntology.TERMINATOR);
  ComponentDefinition gRNA_b_gene=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  gRNA_b_gene.addRole(SequenceOntology.PROMOTER);
  gRNA_b_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  gRNA_b_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.RNA).addRole(SequenceOntology.SGRNA);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.COMPLEX);
  ComponentDefinition mKate_cds=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  mKate_cds.addRole(SequenceOntology.CDS);
  mKate_cds.addSequence(""String_Node_Str"");
  ComponentDefinition mKate_gene=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  mKate_gene.addRole(SequenceOntology.PROMOTER);
  mKate_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  ComponentDefinition Gal4VP16_cds=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  Gal4VP16_cds.addRole(SequenceOntology.CDS);
  ComponentDefinition Gal4VP16_gene=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  Gal4VP16_gene.addRole(SequenceOntology.PROMOTER);
  Gal4VP16_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  ComponentDefinition CRP_b=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  CRP_b.addRole(SequenceOntology.PROMOTER);
  CRP_b.addSequence(""String_Node_Str"");
  ComponentDefinition EYFP_cds=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  EYFP_cds.addRole(SequenceOntology.CDS);
  ComponentDefinition EYFP_gene=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  EYFP_gene.addRole(SequenceOntology.PROMOTER);
  EYFP_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  ModuleDefinition CRPb_circuit=doc.createModuleDefinition(""String_Node_Str"",version);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  Interaction mKate_production=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.GENETIC_PRODUCTION);
  mKate_production.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PRODUCT);
  mKate_production.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PROMOTER);
  Interaction GAL4VP16_production=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.GENETIC_PRODUCTION);
  GAL4VP16_production.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PROMOTER);
  GAL4VP16_production.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PRODUCT);
  Interaction cas9m_BFP_production=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.GENETIC_PRODUCTION);
  cas9m_BFP_production.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PROMOTER);
  cas9m_BFP_production.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PRODUCT);
  Interaction gRNA_b_production=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.GENETIC_PRODUCTION);
  gRNA_b_production.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PROMOTER);
  gRNA_b_production.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PRODUCT);
  Interaction EYFP_Activation=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.STIMULATION);
  EYFP_Activation.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.STIMULATOR);
  EYFP_Activation.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.PROMOTER);
  Interaction mKate_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  mKate_deg.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.REACTANT);
  Interaction GAL4VP16_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  GAL4VP16_deg.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.REACTANT);
  Interaction cas9m_BFP_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  cas9m_BFP_deg.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.REACTANT);
  Interaction gRNA_b_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  gRNA_b_deg.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.REACTANT);
  Interaction EYFP_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  EYFP_deg.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.REACTANT);
  Interaction cas9m_BFP_gRNA_b_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  cas9m_BFP_gRNA_b_deg.createParticipation(""String_Node_Str"",""String_Node_Str"",SystemsBiologyOntology.REACTANT);
  Module Template_Module=CRPb_circuit.createModule(""String_Node_Str"",""String_Node_Str"",version);
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  ComponentDefinition cas9_generic1=doc.getComponentDefinition(""String_Node_Str"",version);
  ComponentDefinition cas9_generic2=doc.getComponentDefinition(""String_Node_Str"",null);
  if (cas9_generic1.equals(cas9_generic2)) {
    System.out.println(""String_Node_Str"");
  }
  gRNA_b_gene.getSequenceConstraint(""String_Node_Str"");
  CRISPR_Template.setName(""String_Node_Str"");
  if (CRISPR_Template.isSetName()) {
    CRISPR_Template.unsetName();
    CRISPR_Template.setName(""String_Node_Str"");
  }
  CRISPR_Template.setDescription(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  URI gRNA_b_gene_role2=URI.create(""String_Node_Str"");
  gRNA_b_gene.addRole(gRNA_b_gene_role2);
  if (gRNA_b_gene.containsRole(gRNA_b_gene_role2)) {
    gRNA_b_gene.removeRole(gRNA_b_gene_role2);
  }
  gRNA_b_gene.clearRoles();
  if (!gRNA_b_gene.getRoles().isEmpty()) {
    System.out.println(""String_Node_Str"");
  }
  gRNA_b_gene.setRoles(new HashSet<URI>(Arrays.asList(SequenceOntology.PROMOTER)));
  CRP_b.clearSequences();
  CRP_b.addSequence(""String_Node_Str"");
  String prURI=""String_Node_Str"";
  String prPrefix=""String_Node_Str"";
  doc.addNamespace(URI.create(prURI),prPrefix);
  ComponentDefinition pConst=doc.getComponentDefinition(""String_Node_Str"",version);
  pConst.createAnnotation(new QName(prURI,""String_Node_Str"",prPrefix),URI.create(""String_Node_Str""));
  String myersLabURI=""String_Node_Str"";
  String myersLabPrefix=""String_Node_Str"";
  doc.addNamespace(URI.create(myersLabURI),myersLabPrefix);
  GenericTopLevel datasheet=doc.createGenericTopLevel(""String_Node_Str"",""String_Node_Str"",new QName(myersLabURI,""String_Node_Str"",myersLabPrefix));
  datasheet.setName(""String_Node_Str"");
  datasheet.createAnnotation(new QName(myersLabURI,""String_Node_Str"",myersLabPrefix),URI.create(myersLabURI + ""String_Node_Str""));
  datasheet.createAnnotation(new QName(myersLabURI,""String_Node_Str"",myersLabPrefix),0.75);
  pConst.createAnnotation(new QName(myersLabURI,""String_Node_Str"",myersLabPrefix),datasheet.getIdentity());
  ComponentDefinition pConst_alt=(ComponentDefinition)doc.createCopy(pConst,""String_Node_Str"");
  Sequence pConst_alt_seq=doc.createSequence(""String_Node_Str"",version,""String_Node_Str"",Sequence.IUPAC_DNA);
  pConst_alt.addSequence(pConst_alt_seq);
  SBOLValidate.validateSBOL(doc,true,true,true);
  if (SBOLValidate.getNumErrors() > 0) {
    for (    String error : SBOLValidate.getErrors()) {
      System.out.println(error);
    }
    return;
  }
  try {
    SBOLWriter.write(doc,(System.out));
  }
 catch (  FactoryConfigurationError|SBOLConversionException e) {
    e.printStackTrace();
  }
  try {
    SBOLWriter.write(doc,""String_Node_Str"");
  }
 catch (  FactoryConfigurationError|IOException|SBOLConversionException e) {
    e.printStackTrace();
  }
}",0.9864493191118268
12565,"private static void read(SBOLDocument doc,BufferedInputStream in) throws IOException, SBOLValidationException {
  so=new SequenceOntology();
  nextLine=null;
  featureMode=false;
  originMode=false;
  doc.addNamespace(URI.create(gbNamespace),gbPrefix);
  BufferedReader br=new BufferedReader(new InputStreamReader(in));
  String strLine;
  String id=""String_Node_Str"";
  String version=""String_Node_Str"";
  boolean featureMode=false;
  int featureCnt=0;
  int refCnt=0;
  boolean seqMode=false;
  String elements=""String_Node_Str"";
  String description=""String_Node_Str"";
  URI type=ComponentDefinition.DNA;
  ComponentDefinition topCD=null;
  List<Annotation> annotations=new ArrayList<Annotation>();
  List<Annotation> nestedAnnotations=null;
  Annotation annotation=null;
  while ((strLine=readGenBankLine(br)) != null) {
    strLine=strLine.trim();
    if (strLine.startsWith(""String_Node_Str"")) {
      String[] strSplit=strLine.split(""String_Node_Str"");
      id=strSplit[1];
      if (strSplit[4].toUpperCase().contains(""String_Node_Str"")) {
        type=ComponentDefinition.RNA;
      }
      annotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),strSplit[4]);
      annotations.add(annotation);
      for (int i=5; i < strSplit.length; i++) {
        if (strSplit[i].startsWith(""String_Node_Str"") || strSplit[i].startsWith(""String_Node_Str"")) {
          annotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),strSplit[i]);
        }
 else         if (strSplit[i].length() == 3) {
          annotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),strSplit[i]);
        }
 else {
          annotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),strSplit[i]);
        }
        annotations.add(annotation);
      }
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String[] strSplit=strLine.split(""String_Node_Str"");
      String accession=strSplit[1];
      id=accession;
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String[] strSplit=strLine.split(""String_Node_Str"");
      version=strSplit[1].split(""String_Node_Str"")[1];
      if (!id.equals(strSplit[1].split(""String_Node_Str"")[0])) {
        throw new SBOLValidationException(""String_Node_Str"");
      }
      if (strSplit.length > 2) {
        annotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),strSplit[2]);
        annotations.add(annotation);
      }
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      nestedAnnotations=new ArrayList<Annotation>();
      Annotation labelAnnotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),annotationStr);
      nestedAnnotations.add(labelAnnotation);
      URI nestedURI=URI.create(URIPrefix + ""String_Node_Str"" + id+ ""String_Node_Str""+ refCnt);
      refCnt++;
      annotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),new QName(gbNamespace,""String_Node_Str"",gbPrefix),nestedURI,nestedAnnotations);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      topCD=doc.createComponentDefinition(id,version,type);
      topCD.addRole(SequenceOntology.ENGINEERED_REGION);
      if (!description.equals(""String_Node_Str"")) {
        topCD.setDescription(description);
      }
      topCD.setAnnotations(annotations);
      featureMode=true;
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      seqMode=true;
      featureMode=false;
    }
 else {
      if (featureMode) {
        if (strLine.startsWith(""String_Node_Str"")) {
          String[] splitStr=strLine.split(""String_Node_Str"");
          String tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
          String value=splitStr[1];
          SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
          annotation=new Annotation(new QName(gbNamespace,tag,gbPrefix),value);
          sa.addAnnotation(annotation);
          continue;
        }
        strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
        String[] strSplit=strLine.split(""String_Node_Str"");
        URI role=convertGenBanktoSO(strSplit[0]);
        ComponentDefinition feature=doc.createComponentDefinition(""String_Node_Str"" + featureCnt,version,type);
        feature.addRole(role);
        String range=strSplit[1];
        OrientationType orientation=OrientationType.INLINE;
        if (range.startsWith(""String_Node_Str"")) {
          orientation=OrientationType.REVERSECOMPLEMENT;
          range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
        }
        if (range.startsWith(""String_Node_Str"")) {
          range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
          String[] ranges=range.split(""String_Node_Str"");
          int rangeCnt=0;
          SequenceAnnotation sa=null;
          for (          String r : ranges) {
            r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            String[] rangeSplit=r.split(""String_Node_Str"");
            int start=Integer.parseInt(rangeSplit[0]);
            int end=Integer.parseInt(rangeSplit[1]);
            if (rangeCnt == 0) {
              sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
              sa.setComponent(""String_Node_Str"" + featureCnt);
            }
 else             if (sa != null) {
              sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
            }
            rangeCnt++;
          }
        }
 else         if (range.contains(""String_Node_Str"")) {
          String[] rangeSplit=range.split(""String_Node_Str"");
          int at=Integer.parseInt(rangeSplit[0]);
          SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
          sa.setComponent(""String_Node_Str"" + featureCnt);
        }
 else {
          range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
          String[] rangeSplit=range.split(""String_Node_Str"");
          int start=Integer.parseInt(rangeSplit[0]);
          int end=Integer.parseInt(rangeSplit[1]);
          if (start > end) {
            int temp=start;
            start=end;
            end=temp;
          }
          SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
          sa.setComponent(""String_Node_Str"" + featureCnt);
        }
        featureCnt++;
      }
      if (seqMode) {
        String[] strSplit=strLine.split(""String_Node_Str"");
        for (int i=1; i < strSplit.length; i++) {
          elements+=strSplit[i];
        }
      }
    }
  }
  Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,elements,Sequence.IUPAC_DNA);
  topCD.addSequence(sequence);
  createSubComponentDefinitions(doc,topCD,type,elements,version);
  br.close();
}","private static void read(SBOLDocument doc,BufferedInputStream in) throws IOException, SBOLValidationException {
  so=new SequenceOntology();
  nextLine=null;
  featureMode=false;
  originMode=false;
  lineCounter=0;
  doc.addNamespace(URI.create(gbNamespace),gbPrefix);
  BufferedReader br=new BufferedReader(new InputStreamReader(in));
  String strLine;
  String id=""String_Node_Str"";
  String version=""String_Node_Str"";
  int featureCnt=0;
  int refCnt=0;
  StringBuilder sbSequence=new StringBuilder();
  String elements=null;
  String description=""String_Node_Str"";
  URI type=ComponentDefinition.DNA;
  ComponentDefinition topCD=null;
  List<Annotation> annotations=new ArrayList<Annotation>();
  List<Annotation> nestedAnnotations=null;
  Annotation annotation=null;
  while ((strLine=readGenBankLine(br)) != null) {
    strLine=strLine.trim();
    if (strLine.startsWith(""String_Node_Str"")) {
      String[] strSplit=strLine.split(""String_Node_Str"");
      id=strSplit[1];
      if (strSplit[4].toUpperCase().contains(""String_Node_Str"")) {
        type=ComponentDefinition.RNA;
      }
      annotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),strSplit[4]);
      annotations.add(annotation);
      for (int i=5; i < strSplit.length; i++) {
        if (strSplit[i].startsWith(""String_Node_Str"") || strSplit[i].startsWith(""String_Node_Str"")) {
          annotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),strSplit[i]);
        }
 else         if (strSplit[i].length() == 3) {
          annotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),strSplit[i]);
        }
 else {
          annotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),strSplit[i]);
        }
        annotations.add(annotation);
      }
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      description=strLine.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String[] strSplit=strLine.split(""String_Node_Str"");
      String accession=strSplit[1];
      id=accession;
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String[] strSplit=strLine.split(""String_Node_Str"");
      version=strSplit[1].split(""String_Node_Str"")[1];
      if (!id.equals(strSplit[1].split(""String_Node_Str"")[0])) {
        throw new SBOLValidationException(""String_Node_Str"");
      }
      if (strSplit.length > 2) {
        annotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),strSplit[2]);
        annotations.add(annotation);
      }
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      nestedAnnotations=new ArrayList<Annotation>();
      Annotation labelAnnotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),annotationStr);
      nestedAnnotations.add(labelAnnotation);
      URI nestedURI=URI.create(URIPrefix + ""String_Node_Str"" + id+ ""String_Node_Str""+ refCnt);
      refCnt++;
      annotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),new QName(gbNamespace,""String_Node_Str"",gbPrefix),nestedURI,nestedAnnotations);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      Annotation nestedAnnotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),annotationStr);
      nestedAnnotations.add(nestedAnnotation);
      annotation.setNestedAnnotations(nestedAnnotations);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      String annotationStr=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
      annotation=new Annotation(new QName(gbNamespace,""String_Node_Str"",gbPrefix),annotationStr);
      annotations.add(annotation);
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      topCD=doc.createComponentDefinition(id,version,type);
      topCD.addRole(SequenceOntology.ENGINEERED_REGION);
      if (!""String_Node_Str"".equals(description)) {
        topCD.setDescription(description);
      }
      topCD.setAnnotations(annotations);
      featureMode=true;
    }
 else     if (strLine.startsWith(""String_Node_Str"")) {
      originMode=true;
      featureMode=false;
    }
 else {
      if (featureMode) {
        if (strLine.startsWith(""String_Node_Str"")) {
          String tag=strLine.replace(""String_Node_Str"",""String_Node_Str"").trim();
          String value=""String_Node_Str"";
          if ((-1) != strLine.indexOf('=')) {
            String[] splitStr=strLine.split(""String_Node_Str"");
            tag=splitStr[0].replace(""String_Node_Str"",""String_Node_Str"");
            value=splitStr[1];
          }
          StringBuilder sbValue=new StringBuilder();
          sbValue.append(value);
          if (value.startsWith(""String_Node_Str"") && !value.endsWith(""String_Node_Str"")) {
            while (true) {
              strLine=readGenBankLine(br).trim();
              sbValue.append(strLine);
              if (strLine.endsWith(""String_Node_Str"")) {
                break;
              }
            }
          }
          SequenceAnnotation sa=topCD.getSequenceAnnotation(""String_Node_Str"" + (featureCnt - 1));
          if (null != sa) {
            annotation=new Annotation(new QName(gbNamespace,tag,gbPrefix),value);
            sa.addAnnotation(annotation);
          }
        }
 else {
          strLine=strLine.replace(""String_Node_Str"",""String_Node_Str"");
          String[] strSplit=strLine.split(""String_Node_Str"");
          URI role=convertGenBanktoSO(strSplit[0]);
          ComponentDefinition feature=doc.createComponentDefinition(""String_Node_Str"" + featureCnt,version,type);
          feature.addRole(role);
          String range=strSplit[1];
          OrientationType orientation=OrientationType.INLINE;
          if (range.startsWith(""String_Node_Str"")) {
            orientation=OrientationType.REVERSECOMPLEMENT;
            range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
          }
          if (range.startsWith(""String_Node_Str"")) {
            range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            String[] ranges=range.split(""String_Node_Str"");
            int rangeCnt=0;
            SequenceAnnotation sa=null;
            for (            String r : ranges) {
              r=r.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              String[] rangeSplit=r.split(""String_Node_Str"");
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[1]);
              if (rangeCnt == 0) {
                sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"" + rangeCnt,start,end,orientation);
                sa.setComponent(""String_Node_Str"" + featureCnt);
              }
 else               if (sa != null) {
                sa.addRange(""String_Node_Str"" + rangeCnt,start,end,orientation);
              }
              rangeCnt++;
            }
          }
 else           if (range.contains(""String_Node_Str"")) {
            String[] rangeSplit=range.split(""String_Node_Str"");
            int at=Integer.parseInt(rangeSplit[0]);
            SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",at,orientation);
            sa.setComponent(""String_Node_Str"" + featureCnt);
          }
 else {
            range=range.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            String[] rangeSplit=range.split(""String_Node_Str"");
            try {
              int start=Integer.parseInt(rangeSplit[0]);
              int end=Integer.parseInt(rangeSplit[1]);
              if (start > end) {
                int temp=start;
                start=end;
                end=temp;
              }
              SequenceAnnotation sa=topCD.createSequenceAnnotation(""String_Node_Str"" + featureCnt,""String_Node_Str"",start,end,orientation);
              sa.setComponent(""String_Node_Str"" + featureCnt);
            }
 catch (            Exception e) {
              System.out.println(lineCounter + ""String_Node_Str"" + strLine);
            }
          }
          featureCnt++;
        }
      }
 else       if (originMode) {
        if (elements == null) {
          elements=new String(""String_Node_Str"");
        }
        String[] strSplit=strLine.split(""String_Node_Str"");
        for (int i=1; i < strSplit.length; i++) {
          sbSequence.append(strSplit[i]);
        }
      }
    }
  }
  Sequence sequence=doc.createSequence(id + ""String_Node_Str"",version,sbSequence.toString(),Sequence.IUPAC_DNA);
  topCD.addSequence(sequence);
  createSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);
  br.close();
}",0.917503194013506
12566,"private static URI convertGenBanktoSO(String genBankTerm){
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  return null;
}","private static URI convertGenBanktoSO(String genBankTerm){
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  if (genBankTerm.equals(""String_Node_Str"")) {
    return so.getURIbyId(""String_Node_Str"");
  }
  return null;
}",0.9897942386831275
12567,"private static String readGenBankLine(BufferedReader br) throws IOException {
  String newLine=""String_Node_Str"";
  if (nextLine == null) {
    newLine=br.readLine();
    if (newLine == null)     return null;
    newLine=newLine.trim();
  }
 else {
    newLine=nextLine;
  }
  while (true) {
    nextLine=br.readLine();
    if (nextLine == null)     return newLine;
    nextLine=nextLine.trim();
    if (featureMode) {
      if (nextLine.startsWith(""String_Node_Str"")) {
        return newLine;
      }
      String[] strSplit=nextLine.split(""String_Node_Str"");
      URI role=convertGenBanktoSO(strSplit[0]);
      if (role != null)       return newLine;
    }
    if (originMode)     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str"")) {
      featureMode=true;
      return newLine;
    }
    if (nextLine.startsWith(""String_Node_Str"")) {
      originMode=true;
      return newLine;
    }
    if (featureMode) {
      newLine+=nextLine;
    }
 else {
      newLine+=""String_Node_Str"" + nextLine;
    }
  }
}","private static String readGenBankLine(BufferedReader br) throws IOException {
  String newLine=""String_Node_Str"";
  if (nextLine == null) {
    newLine=br.readLine();
    lineCounter++;
    if (newLine == null)     return null;
    newLine=newLine.trim();
  }
 else {
    newLine=nextLine;
  }
  while (true) {
    nextLine=br.readLine();
    if (nextLine == null)     return newLine;
    nextLine=nextLine.trim();
    if (featureMode) {
      if (nextLine.startsWith(""String_Node_Str"")) {
        return newLine;
      }
      String[] strSplit=nextLine.split(""String_Node_Str"");
      URI role=convertGenBanktoSO(strSplit[0]);
      if (role != null)       return newLine;
    }
    if (originMode)     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str""))     return newLine;
    if (nextLine.startsWith(""String_Node_Str"")) {
      featureMode=true;
      return newLine;
    }
    if (nextLine.startsWith(""String_Node_Str"")) {
      originMode=true;
      return newLine;
    }
    if (featureMode) {
      newLine+=nextLine;
    }
 else {
      newLine+=""String_Node_Str"" + nextLine;
    }
    lineCounter++;
  }
}",0.9729591836734692
12568,"@Test public void test_GenBank_Files() throws Exception {
  File file_base=null;
  try {
    file_base=new File(ValidationTest.class.getResource(""String_Node_Str"").toURI());
  }
 catch (  URISyntaxException e1) {
    e1.printStackTrace();
  }
  File file;
  for (  File f : file_base.listFiles()) {
    file=new File(f.getAbsolutePath());
    try {
      GenBank.setURIPrefix(""String_Node_Str"");
      SBOLDocument actual=GenBank.read(file);
      GenBank.write(actual.getRootComponentDefinitions().iterator().next(),""String_Node_Str"" + f.getName());
      runTest(""String_Node_Str"" + f.getName().replace(""String_Node_Str"",""String_Node_Str""),actual,""String_Node_Str"",true);
    }
 catch (    SBOLValidationException e) {
      throw new AssertionError(""String_Node_Str"" + f.getName(),e);
    }
  }
}","@Test public void test_GenBank_Files() throws Exception {
  File file_base=null;
  try {
    file_base=new File(ValidationTest.class.getResource(""String_Node_Str"").toURI());
  }
 catch (  URISyntaxException e1) {
    e1.printStackTrace();
  }
  File file;
  for (  File f : file_base.listFiles()) {
    if (f.isDirectory()) {
      continue;
    }
    file=new File(f.getAbsolutePath());
    try {
      GenBank.setURIPrefix(""String_Node_Str"");
      SBOLDocument actual=GenBank.read(file);
      GenBank.write(actual.getRootComponentDefinitions().iterator().next(),""String_Node_Str"" + f.getName());
      runTest(""String_Node_Str"" + f.getName().replace(""String_Node_Str"",""String_Node_Str""),actual,""String_Node_Str"",true);
    }
 catch (    SBOLValidationException e) {
      throw new AssertionError(""String_Node_Str"" + f.getName(),e);
    }
  }
}",0.9702489374620522
12569,"/** 
 * Adds the specified instance to the list of components.
 * @throws SBOLValidationException 
 */
void addComponent(Component component) throws SBOLValidationException {
  component.setSBOLDocument(this.sbolDocument);
  component.setComponentDefinition(this);
  if (sbolDocument != null && sbolDocument.isComplete()) {
    if (component.getDefinition() == null) {
      throw new SBOLValidationException(""String_Node_Str"",component);
    }
  }
  Set<URI> visited=new HashSet<>();
  visited.add(this.getIdentity());
  SBOLValidate.checkComponentDefinitionCycle(sbolDocument,component.getDefinition(),visited);
  addChildSafely(component,components,""String_Node_Str"",sequenceAnnotations,sequenceConstraints);
  for (  MapsTo mapsTo : component.getMapsTos()) {
    if (this.getComponent(mapsTo.getLocalURI()) == null) {
      throw new SBOLValidationException(""String_Node_Str"",mapsTo);
    }
    mapsTo.setSBOLDocument(sbolDocument);
    mapsTo.setComponentDefinition(this);
    mapsTo.setComponentInstance(component);
  }
}","/** 
 * Adds the specified instance to the list of components.
 * @throws SBOLValidationException 
 */
void addComponent(Component component) throws SBOLValidationException {
  component.setSBOLDocument(this.sbolDocument);
  component.setComponentDefinition(this);
  if (sbolDocument != null && sbolDocument.isComplete()) {
    if (component.getDefinition() == null) {
      throw new SBOLValidationException(""String_Node_Str"",component);
    }
  }
  if (this.getIdentity().equals(component.getDefinitionURI())) {
    throw new SBOLValidationException(""String_Node_Str"",component);
  }
  Set<URI> visited=new HashSet<>();
  visited.add(this.getIdentity());
  SBOLValidate.checkComponentDefinitionCycle(sbolDocument,component.getDefinition(),visited);
  addChildSafely(component,components,""String_Node_Str"",sequenceAnnotations,sequenceConstraints);
  for (  MapsTo mapsTo : component.getMapsTos()) {
    if (this.getComponent(mapsTo.getLocalURI()) == null) {
      throw new SBOLValidationException(""String_Node_Str"",mapsTo);
    }
    mapsTo.setSBOLDocument(sbolDocument);
    mapsTo.setComponentDefinition(this);
    mapsTo.setComponentInstance(component);
  }
}",0.9374714742126884
12570,"void addComponentNoCheck(Component component) throws SBOLValidationException {
  component.setSBOLDocument(this.sbolDocument);
  component.setComponentDefinition(this);
  if (sbolDocument != null && sbolDocument.isComplete()) {
    if (component.getDefinition() == null) {
      throw new SBOLValidationException(""String_Node_Str"",component);
    }
  }
  Set<URI> visited=new HashSet<>();
  visited.add(this.getIdentity());
  SBOLValidate.checkComponentDefinitionCycle(sbolDocument,component.getDefinition(),visited);
  addChildSafely(component,components,""String_Node_Str"",sequenceAnnotations,sequenceConstraints);
}","void addComponentNoCheck(Component component) throws SBOLValidationException {
  component.setSBOLDocument(this.sbolDocument);
  component.setComponentDefinition(this);
  if (sbolDocument != null && sbolDocument.isComplete()) {
    if (component.getDefinition() == null) {
      throw new SBOLValidationException(""String_Node_Str"",component);
    }
  }
  if (this.getIdentity().equals(component.getDefinitionURI())) {
    throw new SBOLValidationException(""String_Node_Str"",component);
  }
  Set<URI> visited=new HashSet<>();
  visited.add(this.getIdentity());
  SBOLValidate.checkComponentDefinitionCycle(sbolDocument,component.getDefinition(),visited);
  addChildSafely(component,components,""String_Node_Str"",sequenceAnnotations,sequenceConstraints);
}",0.900072939460248
12571,"/** 
 * Adds the specified instance to the list of references.
 * @throws SBOLValidationException 
 */
void addMapsTo(MapsTo mapsTo) throws SBOLValidationException {
  if (sbolDocument != null) {
    if (moduleDefinition.getFunctionalComponent(mapsTo.getLocalURI()) == null) {
      throw new SBOLValidationException(""String_Node_Str"",mapsTo);
    }
  }
  if (sbolDocument != null && sbolDocument.isComplete()) {
    if (getDefinition().getComponent(mapsTo.getRemoteURI()) == null) {
      throw new SBOLValidationException(""String_Node_Str"",mapsTo);
    }
    if (getDefinition().getComponent(mapsTo.getRemoteURI()).getAccess().equals(AccessType.PRIVATE)) {
      throw new SBOLValidationException(""String_Node_Str"",mapsTo);
    }
    if (mapsTo.getRefinement().equals(RefinementType.VERIFYIDENTICAL)) {
      if (!mapsTo.getLocal().getDefinitionURI().equals(mapsTo.getRemote().getDefinitionURI())) {
        throw new SBOLValidationException(""String_Node_Str"",mapsTo);
      }
    }
  }
  addChildSafely(mapsTo,mapsTos,""String_Node_Str"");
  mapsTo.setSBOLDocument(this.sbolDocument);
  mapsTo.setModuleDefinition(moduleDefinition);
  mapsTo.setComponentInstance(this);
}","/** 
 * Adds the specified instance to the list of references.
 * @throws SBOLValidationException 
 */
void addMapsTo(MapsTo mapsTo) throws SBOLValidationException {
  mapsTo.setSBOLDocument(this.sbolDocument);
  mapsTo.setModuleDefinition(moduleDefinition);
  mapsTo.setComponentInstance(this);
  if (sbolDocument != null) {
    if (moduleDefinition.getFunctionalComponent(mapsTo.getLocalURI()) == null) {
      throw new SBOLValidationException(""String_Node_Str"",mapsTo);
    }
  }
  if (sbolDocument != null && sbolDocument.isComplete()) {
    if (getDefinition().getComponent(mapsTo.getRemoteURI()) == null) {
      throw new SBOLValidationException(""String_Node_Str"",mapsTo);
    }
    if (getDefinition().getComponent(mapsTo.getRemoteURI()).getAccess().equals(AccessType.PRIVATE)) {
      throw new SBOLValidationException(""String_Node_Str"",mapsTo);
    }
    if (mapsTo.getRefinement().equals(RefinementType.VERIFYIDENTICAL)) {
      if (!mapsTo.getLocal().getDefinitionURI().equals(mapsTo.getRemote().getDefinitionURI())) {
        throw new SBOLValidationException(""String_Node_Str"",mapsTo);
      }
    }
  }
  addChildSafely(mapsTo,mapsTos,""String_Node_Str"");
}",0.8890784982935154
12572,"/** 
 * Returns the   {@link QName} instance matching the given {@code modelURI} from thisSBOLDocument object's list of namespace QName instances.
 * @param namespaceURI
 * @return the matching instance if present, or {@code null} otherwise.
 */
public QName getNamespace(URI namespaceURI){
  if (nameSpaces.get(namespaceURI) == null)   return null;
  return new QName(namespaceURI.toString(),""String_Node_Str"",nameSpaces.get(namespaceURI).getPrefix());
}","/** 
 * Returns the   {@link QName} instance matching the given {@code modelURI} from thisSBOLDocument object's list of namespace QName instances.
 * @param namespaceURI
 * @return the matching instance if present, or {@code null} otherwise.
 */
public QName getNamespace(URI namespaceURI){
  for (  NamespaceBinding namespaceBinding : nameSpaces.values()) {
    if (namespaceBinding.getNamespaceURI().equals(namespaceURI.toString())) {
      return new QName(namespaceBinding.getNamespaceURI(),""String_Node_Str"",namespaceBinding.getPrefix());
    }
  }
  return null;
}",0.7297560975609756
12573,"private static GenericTopLevel parseGenericTopLevel(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  URI wasDerivedFrom=null;
  QName type=topLevel.getType();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Description.type)) {
      String typeStr=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      type=new QName(URIcompliance.extractURIprefix(URI.create(typeStr)) + ""String_Node_Str"",URIcompliance.extractDisplayId(URI.create(typeStr)));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String)) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String)) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String)) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String)) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  GenericTopLevel t=new GenericTopLevel(topLevel.getIdentity(),type);
  if (persistentIdentity != null)   t.setPersistentIdentity(persistentIdentity);
  if (version != null)   t.setVersion(version);
  if (displayId != null)   t.setDisplayId(displayId);
  if (name != null)   t.setName(name);
  if (description != null)   t.setDescription(description);
  if (wasDerivedFrom != null)   t.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   t.setAnnotations(annotations);
  GenericTopLevel oldG=SBOLDoc.getGenericTopLevel(topLevel.getIdentity());
  if (oldG == null) {
    SBOLDoc.addGenericTopLevel(t);
  }
 else {
    if (!t.equals(oldG)) {
      throw new SBOLValidationException(""String_Node_Str"",t);
    }
  }
  return t;
}","private static GenericTopLevel parseGenericTopLevel(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel) throws SBOLValidationException {
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  URI wasDerivedFrom=null;
  QName type=topLevel.getType();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Description.type)) {
      String typeStr=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      String nameSpace=URIcompliance.extractURIprefix(URI.create(typeStr)) + ""String_Node_Str"";
      String localPart=URIcompliance.extractDisplayId(URI.create(typeStr));
      String prefix=SBOLDoc.getNamespace(URI.create(nameSpace)).getPrefix();
      type=new QName(nameSpace,localPart,prefix);
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String)) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String)) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String)) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof String)) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      if (!(((Literal<QName>)namedProperty.getValue()).getValue() instanceof URI)) {
        throw new SBOLValidationException(""String_Node_Str"",topLevel.getIdentity());
      }
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  GenericTopLevel t=new GenericTopLevel(topLevel.getIdentity(),type);
  if (persistentIdentity != null)   t.setPersistentIdentity(persistentIdentity);
  if (version != null)   t.setVersion(version);
  if (displayId != null)   t.setDisplayId(displayId);
  if (name != null)   t.setName(name);
  if (description != null)   t.setDescription(description);
  if (wasDerivedFrom != null)   t.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   t.setAnnotations(annotations);
  GenericTopLevel oldG=SBOLDoc.getGenericTopLevel(topLevel.getIdentity());
  if (oldG == null) {
    SBOLDoc.addGenericTopLevel(t);
  }
 else {
    if (!t.equals(oldG)) {
      throw new SBOLValidationException(""String_Node_Str"",t);
    }
  }
  return t;
}",0.4062334918119387
12574,"@Override public void runTest(final String fileName,final SBOLDocument expected,String fileType,boolean compliant) throws Exception {
  assumeNotNull(expected);
  SBOLValidate.validateSBOL(expected,false,false,false);
  if (SBOLValidate.getNumErrors() > 0) {
    for (    String error : SBOLValidate.getErrors()) {
      System.err.println(error);
    }
    assertTrue(false);
  }
  SBOLDocument actual=SBOLTestUtils.writeAndRead(expected,compliant);
  assertTrue(actual.equals(expected));
}","@Override public void runTest(final String fileName,final SBOLDocument expected,String fileType,boolean compliant) throws Exception {
  assumeNotNull(expected);
  SBOLValidate.validateSBOL(expected,false,false,false);
  if (SBOLValidate.getNumErrors() > 0) {
    for (    String error : SBOLValidate.getErrors()) {
      System.err.println(error);
    }
    assertTrue(false);
  }
  SBOLDocument actual=SBOLTestUtils.writeAndRead(expected,compliant);
  if (!actual.equals(expected)) {
    System.out.println(""String_Node_Str"" + expected.toString());
    SBOLWriter.write(expected,(System.out));
    System.out.println(""String_Node_Str"" + actual.toString());
  }
  assertTrue(actual.equals(expected));
}",0.8231349538977368
12575,"/** 
 * Adds the specified instance to the list of sequenceConstraints.
 * @throws SBOLValidationException 
 */
void addSequenceConstraint(SequenceConstraint sequenceConstraint) throws SBOLValidationException {
  sequenceConstraint.setSBOLDocument(this.sbolDocument);
  sequenceConstraint.setComponentDefinition(this);
  if (sequenceConstraint.getSubject() == null) {
    throw new SBOLValidationException(""String_Node_Str"",sequenceConstraint);
  }
  if (sequenceConstraint.getObject() == null) {
    throw new SBOLValidationException(""String_Node_Str"",sequenceConstraint);
  }
  addChildSafely(sequenceConstraint,sequenceConstraints,""String_Node_Str"",components,sequenceAnnotations);
}","/** 
 * Adds the specified instance to the list of sequenceConstraints.
 * @throws SBOLValidationException 
 */
void addSequenceConstraint(SequenceConstraint sequenceConstraint) throws SBOLValidationException {
  sequenceConstraint.setSBOLDocument(this.sbolDocument);
  sequenceConstraint.setComponentDefinition(this);
  if (sequenceConstraint.getSubject() == null) {
    throw new SBOLValidationException(""String_Node_Str"",sequenceConstraint);
  }
  if (sequenceConstraint.getObject() == null) {
    throw new SBOLValidationException(""String_Node_Str"",sequenceConstraint);
  }
  if (sequenceConstraint.getSubjectURI().equals(sequenceConstraint.getObjectURI())) {
    throw new SBOLValidationException(""String_Node_Str"",sequenceConstraint);
  }
  addChildSafely(sequenceConstraint,sequenceConstraints,""String_Node_Str"",components,sequenceAnnotations);
}",0.8226120857699805
12576,"/** 
 * Sets the reference subject Component URI to the given   {@code subjectURI}. <p> If this SequenceConstraint subject belongs to an SBOLDocument instance, then the SBOLDcouement instance is checked for compliance first.  Only a compliant SBOLDocument instance is allowed to be edited.
 * @param subjectURI
 * @throws SBOLValidationException if the associated SBOLDocument is not compliant
 * @throws SBOLValidationException if the associated ComponentDefinition subjectis not  {@code null}, and the given   {@code subjectURI} does not exist in its associated ComponentDefinition subject's list of Component instances.
 * @throws SBOLValidationException if the given {@code subjectURI} is {@code null}.
 */
public void setSubject(URI subjectURI) throws SBOLValidationException {
  if (sbolDocument != null)   sbolDocument.checkReadOnly();
  if (componentDefinition != null) {
    if (componentDefinition.getComponent(subjectURI) == null) {
      throw new SBOLValidationException(""String_Node_Str"",this);
    }
  }
  if (subjectURI == null) {
    throw new SBOLValidationException(""String_Node_Str"",this);
  }
  if (subjectURI == object) {
    throw new SBOLValidationException(""String_Node_Str"",this);
  }
  this.subject=subjectURI;
}","/** 
 * Sets the reference subject Component URI to the given   {@code subjectURI}. <p> If this SequenceConstraint subject belongs to an SBOLDocument instance, then the SBOLDcouement instance is checked for compliance first.  Only a compliant SBOLDocument instance is allowed to be edited.
 * @param subjectURI
 * @throws SBOLValidationException if the associated SBOLDocument is not compliant
 * @throws SBOLValidationException if the associated ComponentDefinition subjectis not  {@code null}, and the given   {@code subjectURI} does not exist in its associated ComponentDefinition subject's list of Component instances.
 * @throws SBOLValidationException if the given {@code subjectURI} is {@code null}.
 */
public void setSubject(URI subjectURI) throws SBOLValidationException {
  if (sbolDocument != null)   sbolDocument.checkReadOnly();
  if (componentDefinition != null) {
    if (componentDefinition.getComponent(subjectURI) == null) {
      throw new SBOLValidationException(""String_Node_Str"",this);
    }
  }
  if (subjectURI == null) {
    throw new SBOLValidationException(""String_Node_Str"",this);
  }
  if (subjectURI.equals(object)) {
    throw new SBOLValidationException(""String_Node_Str"",this);
  }
  this.subject=subjectURI;
}",0.9899315344341524
12577,"/** 
 * Top level types
 * @throws SBOLValidationException 
 */
public static void main(String[] args) throws FactoryConfigurationError, SBOLValidationException {
  get_myParts(sbolDocument);
  sbolDocument.getComponentDefinition(""String_Node_Str"",""String_Node_Str"");
  SBOLValidate.validateSBOL(sbolDocument,true,true,true);
  if (SBOLValidate.getNumErrors() > 0) {
    for (    String error : SBOLValidate.getErrors()) {
      System.out.println(error);
    }
  }
}","/** 
 * Top level types
 * @throws SBOLValidationException 
 * @throws CoreIoException 
 * @throws XMLStreamException 
 */
public static void main(String[] args) throws FactoryConfigurationError, SBOLValidationException, XMLStreamException, CoreIoException {
  SBOLDocument document=new SBOLDocument();
  document.createSequence(""String_Node_Str"",""String_Node_Str"",org.sbolstandard.core2.Sequence.IUPAC_DNA);
  SBOLWriter.write(document,(System.out));
  get_myParts(sbolDocument);
  sbolDocument.getComponentDefinition(""String_Node_Str"",""String_Node_Str"");
  SBOLValidate.validateSBOL(sbolDocument,true,true,true);
  if (SBOLValidate.getNumErrors() > 0) {
    for (    String error : SBOLValidate.getErrors()) {
      System.out.println(error);
    }
  }
}",0.7636958299264105
12578,"/** 
 * Check if this top-level object's and all of its descendants' URIs are all compliant. 
 * @return {@code true} if they are all compliant, {@code false} otherwise.
 * @throws SBOLValidationException 
 */
protected abstract void checkDescendantsURIcompliance() throws SBOLValidationException ;","/** 
 * Check if this top-level object's and all of its descendants' URIs are all compliant. 
 * @throws SBOLValidationException 
 */
protected abstract void checkDescendantsURIcompliance() throws SBOLValidationException ;",0.8538461538461538
12579,"/** 
 * Test if the given object's identity URI is compliant with the form   {@code ⟨prefix⟩/(⟨displayId⟩/)}{1,3}⟨version⟩. The prefix is established by the owner of this object. The number of displayIds can range from 1 to 4, depending on the level of the given object. 
 * @param objURI
 * @return <code>true</code> if the identity URI is compliant, <code>false</code> otherwise.
 * @throws SBOLValidationException 
 */
void isURIcompliant() throws SBOLValidationException {
  URIcompliance.isTopLevelURIformCompliant(this.getIdentity());
  try {
    URIcompliance.isURIcompliant(this);
  }
 catch (  SBOLValidationException e) {
    throw new SBOLValidationException(e.getRule(),this);
  }
  this.checkDescendantsURIcompliance();
}","/** 
 * Test if the given object's identity URI is compliant with the form   {@code ⟨prefix⟩/(⟨displayId⟩/)}{1,3}⟨version⟩. The prefix is established by the owner of this object. The number of displayIds can range from 1 to 4, depending on the level of the given object. 
 * @param objURI
 * @throws SBOLValidationException 
 */
void isURIcompliant() throws SBOLValidationException {
  URIcompliance.isTopLevelURIformCompliant(this.getIdentity());
  try {
    URIcompliance.isURIcompliant(this);
  }
 catch (  SBOLValidationException e) {
    throw new SBOLValidationException(e.getRule(),this);
  }
  this.checkDescendantsURIcompliance();
}",0.9323636363636364
12580,"/** 
 * Test if the given object's identity URI is compliant with the form   {@code ⟨prefix⟩/(⟨displayId⟩/)}{1,3}⟨version⟩. The prefix is established by the owner of this object. The number of displayIds can range from 1 to 4, depending on the level of the given object. 
 * @param objURI
 * @return <code>true</code> if the identity URI is compliant, <code>false</code> otherwise.
 * @throws SBOLValidationException 
 */
static final void isTopLevelURIformCompliant(URI topLevelURI) throws SBOLValidationException {
  Pattern r;
  String URIstr=topLevelURI.toString();
  r=Pattern.compile(toplevelURIpattern);
  Matcher m=r.matcher(URIstr);
  if (!m.matches()) {
    throw new SBOLValidationException(""String_Node_Str"");
  }
}","/** 
 * Test if the given object's identity URI is compliant with the form   {@code ⟨prefix⟩/(⟨displayId⟩/)}{1,3}⟨version⟩. The prefix is established by the owner of this object. The number of displayIds can range from 1 to 4, depending on the level of the given object. 
 * @param objURI
 * @throws SBOLValidationException 
 */
static final void isTopLevelURIformCompliant(URI topLevelURI) throws SBOLValidationException {
  Pattern r;
  String URIstr=topLevelURI.toString();
  r=Pattern.compile(toplevelURIpattern);
  Matcher m=r.matcher(URIstr);
  if (!m.matches()) {
    throw new SBOLValidationException(""String_Node_Str"");
  }
}",0.9316678912564292
12581,"/** 
 * Set field variable <code>displayId</code> to the specified element.
 * @throws SBOLValidationException 
 */
void setDisplayId(String displayId) throws SBOLValidationException {
  if (!URIcompliance.isDisplayIdValid(displayId)) {
    throw new SBOLValidationException(""String_Node_Str"");
  }
  this.displayId=displayId;
}","/** 
 * Set field variable <code>displayId</code> to the specified element.
 * @throws SBOLValidationException 
 */
void setDisplayId(String displayId) throws SBOLValidationException {
  if (!URIcompliance.isDisplayIdValid(displayId)) {
    throw new SBOLValidationException(""String_Node_Str"",this);
  }
  this.displayId=displayId;
}",0.9924357034795764
12582,"/** 
 * Creates a copy of the given TopLevel instance with the given arguments, and then adds it to the corresponding top-level list owned by this SBOLDocument object. <p> This SBOLDcouement object is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the given   {@code URIprefix} is {@code null}, then it is extracted from the given  {@code topLevel} instance. If it does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it. <p> If either the given  {@code displayId} or {@code version}, then the corresponding field is extracted from the given   {@code topLevel} instance. Both extracted fields are requiredto be valid and not  {@code null}. <p> A top-level instance with a compliant URI is created using the given arguments, and then its display ID, persistent identity, and version fields are set. This instance is then added to the corresponding top-level list owned by this SBOLDocument object.
 * @param topLevel
 * @param URIprefix
 * @param displayId
 * @param version
 * @return the created top-level instance
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 * @throws SBOLValidationException if the {@code defaultURIprefix} is {@code null}
 * @throws SBOLValidationException if the given {@code URIprefix} is {@code null}
 * @throws SBOLValidationException if the given {@code URIprefix} is non-compliant
 * @throws SBOLValidationException if the given {@code displayId} is invalid
 * @throws SBOLValidationException if the given {@code version} is invalid
 * @throws SBOLValidationException if the created top-level instance's persistentidentity exists in this SBOLDocument object's other lists of top-level instances.
 * @throws SBOLValidationException if the created top-level instance's identity URIalready exists.
 * @throws SBOLValidationException if the given {@code topLevel} instance is not an instanceof a top-level object
 */
public TopLevel createCopy(TopLevel topLevel,String URIprefix,String displayId,String version) throws SBOLValidationException {
  checkReadOnly();
  topLevel.isURIcompliant();
  if (URIprefix == null) {
    URIprefix=extractURIprefix(topLevel.getIdentity());
    URIprefix=URIcompliance.checkURIprefix(URIprefix);
  }
 else {
    URIprefix=URIcompliance.checkURIprefix(URIprefix);
  }
  if (displayId == null) {
    displayId=topLevel.getDisplayId();
  }
  if (version == null) {
    version=topLevel.getVersion();
  }
  validateIdVersion(displayId,version);
  if (topLevel instanceof Collection) {
    Collection newCollection=((Collection)topLevel).copy(URIprefix,displayId,version);
    addCollection(newCollection);
    return newCollection;
  }
 else   if (topLevel instanceof ComponentDefinition) {
    ComponentDefinition newComponentDefinition=((ComponentDefinition)topLevel).copy(URIprefix,displayId,version);
    addComponentDefinition(newComponentDefinition);
    return newComponentDefinition;
  }
 else   if (topLevel instanceof Model) {
    Model newModel=((Model)topLevel).copy(URIprefix,displayId,version);
    addModel(newModel);
    return newModel;
  }
 else   if (topLevel instanceof ModuleDefinition) {
    ModuleDefinition newModuleDefinition=((ModuleDefinition)topLevel).copy(URIprefix,displayId,version);
    addModuleDefinition(newModuleDefinition);
    return newModuleDefinition;
  }
 else   if (topLevel instanceof Sequence) {
    Sequence newSequence=((Sequence)topLevel).copy(URIprefix,displayId,version);
    addSequence(newSequence);
    return newSequence;
  }
 else   if (topLevel instanceof GenericTopLevel) {
    GenericTopLevel newGenericTopLevel=((GenericTopLevel)topLevel).copy(URIprefix,displayId,version);
    addGenericTopLevel(newGenericTopLevel);
    return newGenericTopLevel;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + topLevel.getIdentity());
  }
}","/** 
 * Creates a copy of the given TopLevel instance with the given arguments, and then adds it to the corresponding top-level list owned by this SBOLDocument object. <p> This SBOLDcouement object is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the given   {@code URIprefix} is {@code null}, then it is extracted from the given  {@code topLevel} instance. If it does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it. <p> If either the given  {@code displayId} or {@code version}, then the corresponding field is extracted from the given   {@code topLevel} instance. Both extracted fields are requiredto be valid and not  {@code null}. <p> A top-level instance with a compliant URI is created using the given arguments, and then its display ID, persistent identity, and version fields are set. This instance is then added to the corresponding top-level list owned by this SBOLDocument object.
 * @param topLevel
 * @param URIprefix
 * @param displayId
 * @param version
 * @return the created top-level instance
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 * @throws SBOLValidationException if the {@code defaultURIprefix} is {@code null}
 * @throws SBOLValidationException if the given {@code URIprefix} is {@code null}
 * @throws SBOLValidationException if the given {@code URIprefix} is non-compliant
 * @throws SBOLValidationException if the given {@code displayId} is invalid
 * @throws SBOLValidationException if the given {@code version} is invalid
 * @throws SBOLValidationException if the created top-level instance's persistentidentity exists in this SBOLDocument object's other lists of top-level instances.
 * @throws SBOLValidationException if the created top-level instance's identity URIalready exists.
 * @throws SBOLValidationException if the given {@code topLevel} instance is not an instanceof a top-level object
 */
public TopLevel createCopy(TopLevel topLevel,String URIprefix,String displayId,String version) throws SBOLValidationException {
  checkReadOnly();
  topLevel.isURIcompliant();
  if (URIprefix == null) {
    URIprefix=extractURIprefix(topLevel.getIdentity());
    URIprefix=URIcompliance.checkURIprefix(URIprefix);
  }
 else {
    URIprefix=URIcompliance.checkURIprefix(URIprefix);
  }
  if (displayId == null) {
    displayId=topLevel.getDisplayId();
  }
  if (version == null) {
    version=topLevel.getVersion();
  }
  if (topLevel instanceof Collection) {
    Collection newCollection=((Collection)topLevel).copy(URIprefix,displayId,version);
    addCollection(newCollection);
    return newCollection;
  }
 else   if (topLevel instanceof ComponentDefinition) {
    ComponentDefinition newComponentDefinition=((ComponentDefinition)topLevel).copy(URIprefix,displayId,version);
    addComponentDefinition(newComponentDefinition);
    return newComponentDefinition;
  }
 else   if (topLevel instanceof Model) {
    Model newModel=((Model)topLevel).copy(URIprefix,displayId,version);
    addModel(newModel);
    return newModel;
  }
 else   if (topLevel instanceof ModuleDefinition) {
    ModuleDefinition newModuleDefinition=((ModuleDefinition)topLevel).copy(URIprefix,displayId,version);
    addModuleDefinition(newModuleDefinition);
    return newModuleDefinition;
  }
 else   if (topLevel instanceof Sequence) {
    Sequence newSequence=((Sequence)topLevel).copy(URIprefix,displayId,version);
    addSequence(newSequence);
    return newSequence;
  }
 else   if (topLevel instanceof GenericTopLevel) {
    GenericTopLevel newGenericTopLevel=((GenericTopLevel)topLevel).copy(URIprefix,displayId,version);
    addGenericTopLevel(newGenericTopLevel);
    return newGenericTopLevel;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + topLevel.getIdentity());
  }
}",0.9948493432912696
12583,"/** 
 * @param identity
 * @param rdfType
 * @return the new generic top level
 * @throws SBOLValidationException 
 */
GenericTopLevel createGenericTopLevel(URI identity,QName rdfType) throws SBOLValidationException {
  if (rdfType.getNamespaceURI().equals(Sbol2Terms.sbol2.getNamespaceURI()) || rdfType.getNamespaceURI().equals(Sbol1Terms.sbol1.getNamespaceURI())) {
    throw new SBOLValidationException(""String_Node_Str"");
  }
  GenericTopLevel newGenericTopLevel=new GenericTopLevel(identity,rdfType);
  addGenericTopLevel(newGenericTopLevel);
  return newGenericTopLevel;
}","/** 
 * @param identity
 * @param rdfType
 * @return the new generic top level
 * @throws SBOLValidationException 
 */
GenericTopLevel createGenericTopLevel(URI identity,QName rdfType) throws SBOLValidationException {
  if (rdfType.getNamespaceURI().equals(Sbol2Terms.sbol2.getNamespaceURI()) || rdfType.getNamespaceURI().equals(Sbol1Terms.sbol1.getNamespaceURI())) {
    throw new SBOLValidationException(rdfType.getLocalPart() + ""String_Node_Str"");
  }
  GenericTopLevel newGenericTopLevel=new GenericTopLevel(identity,rdfType);
  addGenericTopLevel(newGenericTopLevel);
  return newGenericTopLevel;
}",0.97883149872989
12584,"/** 
 * Creates a Sequence instance with the given arguments, and then adds it to this SBOLDocument object's list of Sequence instances. <p> This SBOLDcouement object is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the given   {@code URIprefix} does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it. <p> This method requires that the given  {@code URIprefix},   {@code displayId}, and   {@code version} are not {@code null} and are valid.<p> A Sequence instance is created with a compliant URI. This URI is composed from the given  {@code URIprefix}, the optional type   {@link TopLevel#SEQUENCE}, the given   {@code displayId}, and   {@code version}. The display ID, persistent identity, and version fields of this instance are then set accordingly.
 * @param URIprefix
 * @param displayId
 * @param version
 * @param elements
 * @param encoding
 * @return the created Sequence instance
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 * @throws SBOLValidationException if the {@code defaultURIprefix} is {@code null}
 * @throws SBOLValidationException if the given {@code URIprefix} is {@code null}
 * @throws SBOLValidationException if the given {@code URIprefix} is non-compliant
 * @throws SBOLValidationException if the given {@code displayId} is invalid
 * @throws SBOLValidationException if the given {@code version} is invalid
 * @throws SBOLValidationException if the created Sequence instance's persistentidentity exists in this SBOLDocument object's other lists of top-level instances.
 * @throws SBOLValidationException if the created Sequence instance's identity URIexists in this SBOLDocument object's list of Sequence instances.
 */
public Sequence createSequence(String URIprefix,String displayId,String version,String elements,URI encoding) throws SBOLValidationException {
  checkReadOnly();
  URIprefix=URIcompliance.checkURIprefix(URIprefix);
  validateIdVersion(displayId,version);
  Sequence s=createSequence(createCompliantURI(URIprefix,TopLevel.SEQUENCE,displayId,version,typesInURIs),elements,encoding);
  s.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.SEQUENCE,displayId,""String_Node_Str"",typesInURIs));
  s.setDisplayId(displayId);
  s.setVersion(version);
  return s;
}","/** 
 * Creates a Sequence instance with the given arguments, and then adds it to this SBOLDocument object's list of Sequence instances. <p> This SBOLDcouement object is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the given   {@code URIprefix} does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it. <p> This method requires that the given  {@code URIprefix},   {@code displayId}, and   {@code version} are not {@code null} and are valid.<p> A Sequence instance is created with a compliant URI. This URI is composed from the given  {@code URIprefix}, the optional type   {@link TopLevel#SEQUENCE}, the given   {@code displayId}, and   {@code version}. The display ID, persistent identity, and version fields of this instance are then set accordingly.
 * @param URIprefix
 * @param displayId
 * @param version
 * @param elements
 * @param encoding
 * @return the created Sequence instance
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 * @throws SBOLValidationException if the {@code defaultURIprefix} is {@code null}
 * @throws SBOLValidationException if the given {@code URIprefix} is {@code null}
 * @throws SBOLValidationException if the given {@code URIprefix} is non-compliant
 * @throws SBOLValidationException if the given {@code displayId} is invalid
 * @throws SBOLValidationException if the given {@code version} is invalid
 * @throws SBOLValidationException if the created Sequence instance's persistentidentity exists in this SBOLDocument object's other lists of top-level instances.
 * @throws SBOLValidationException if the created Sequence instance's identity URIexists in this SBOLDocument object's list of Sequence instances.
 */
public Sequence createSequence(String URIprefix,String displayId,String version,String elements,URI encoding) throws SBOLValidationException {
  checkReadOnly();
  URIprefix=URIcompliance.checkURIprefix(URIprefix);
  Sequence s=createSequence(createCompliantURI(URIprefix,TopLevel.SEQUENCE,displayId,version,typesInURIs),elements,encoding);
  s.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.SEQUENCE,displayId,""String_Node_Str"",typesInURIs));
  s.setDisplayId(displayId);
  s.setVersion(version);
  return s;
}",0.9914273467638234
12585,"/** 
 * Creates a Collection instance with the given arguments, and then adds it to this SBOLDocument object's list of Collection instances. <p> This SBOLDcouement object is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the given   {@code URIprefix} does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it. <p> This method requires the  {@code defaultURIprefix} field to be set, andthe given  {@code URIprefix},   {@code displayId}, and   {@code version} are not{@code null} and valid.<p> A Collection instance is created with a compliant URI. This URI is composed from the given  {@code URIprefix}, the optional type   {@link TopLevel#COLLECTION}, the given   {@code displayId}, and   {@code version}. The display ID, persistent identity, and version fields of this instance are then set accordingly.
 * @param URIprefix
 * @param displayId
 * @param version
 * @return the created Collection instance
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 * @throws SBOLValidationException if the defaultURIprefix is {@code null}
 * @throws SBOLValidationException if the given {@code URIprefix} is {@code null}
 * @throws SBOLValidationException if the given {@code URIprefix} is non-compliant
 * @throws SBOLValidationException if the given {@code displayId} is invalid
 * @throws SBOLValidationException if the given {@code version} is invalid
 * @throws SBOLValidationException if the created Collection instance's persistentidentity exists in this SBOLDocument object's other lists of top-level instances.
 * @throws SBOLValidationException if the created Collection instance's identity URIexists in this SBOLDocument object's list of Collection instances.
 */
public Collection createCollection(String URIprefix,String displayId,String version) throws SBOLValidationException {
  checkReadOnly();
  URIprefix=URIcompliance.checkURIprefix(URIprefix);
  validateIdVersion(displayId,version);
  Collection c=createCollection(createCompliantURI(URIprefix,TopLevel.COLLECTION,displayId,version,typesInURIs));
  c.setDisplayId(displayId);
  c.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.COLLECTION,displayId,""String_Node_Str"",typesInURIs));
  c.setVersion(version);
  return c;
}","/** 
 * Creates a Collection instance with the given arguments, and then adds it to this SBOLDocument object's list of Collection instances. <p> This SBOLDcouement object is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the given   {@code URIprefix} does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it. <p> This method requires the  {@code defaultURIprefix} field to be set, andthe given  {@code URIprefix},   {@code displayId}, and   {@code version} are not{@code null} and valid.<p> A Collection instance is created with a compliant URI. This URI is composed from the given  {@code URIprefix}, the optional type   {@link TopLevel#COLLECTION}, the given   {@code displayId}, and   {@code version}. The display ID, persistent identity, and version fields of this instance are then set accordingly.
 * @param URIprefix
 * @param displayId
 * @param version
 * @return the created Collection instance
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 * @throws SBOLValidationException if the defaultURIprefix is {@code null}
 * @throws SBOLValidationException if the given {@code URIprefix} is {@code null}
 * @throws SBOLValidationException if the given {@code URIprefix} is non-compliant
 * @throws SBOLValidationException if the given {@code displayId} is invalid
 * @throws SBOLValidationException if the given {@code version} is invalid
 * @throws SBOLValidationException if the created Collection instance's persistentidentity exists in this SBOLDocument object's other lists of top-level instances.
 * @throws SBOLValidationException if the created Collection instance's identity URIexists in this SBOLDocument object's list of Collection instances.
 */
public Collection createCollection(String URIprefix,String displayId,String version) throws SBOLValidationException {
  checkReadOnly();
  URIprefix=URIcompliance.checkURIprefix(URIprefix);
  Collection c=createCollection(createCompliantURI(URIprefix,TopLevel.COLLECTION,displayId,version,typesInURIs));
  c.setDisplayId(displayId);
  c.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.COLLECTION,displayId,""String_Node_Str"",typesInURIs));
  c.setVersion(version);
  return c;
}",0.9913344887348352
12586,"static URI createCompliantURI(String prefix,String type,String displayId,String version,boolean useType) throws SBOLValidationException {
  validateIdVersion(displayId,version);
  if (!useType)   return createCompliantURI(prefix,displayId,version);
  if (!prefix.endsWith(""String_Node_Str"") && !prefix.endsWith(""String_Node_Str"") && !prefix.endsWith(""String_Node_Str"")) {
    prefix+=""String_Node_Str"";
  }
  if (version == null || version.equals(""String_Node_Str"")) {
    return URI.create(prefix + type + '/'+ displayId);
  }
  return URI.create(prefix + type + '/'+ displayId+ '/'+ version);
}","static URI createCompliantURI(String prefix,String type,String displayId,String version,boolean useType) throws SBOLValidationException {
  if (prefix == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  validateIdVersion(displayId,version);
  if (!useType)   return createCompliantURI(prefix,displayId,version);
  if (!prefix.endsWith(""String_Node_Str"") && !prefix.endsWith(""String_Node_Str"") && !prefix.endsWith(""String_Node_Str"")) {
    prefix+=""String_Node_Str"";
  }
  if (version == null || version.equals(""String_Node_Str"")) {
    return URI.create(prefix + type + '/'+ displayId);
  }
  return URI.create(prefix + type + '/'+ displayId+ '/'+ version);
}",0.9319781078967944
12587,"@Override protected boolean checkDescendantsURIcompliance(){
  return isTopLevelURIformCompliant(this.getIdentity());
}","@Override protected void checkDescendantsURIcompliance() throws SBOLValidationException {
  URIcompliance.isTopLevelURIformCompliant(this.getIdentity());
}",0.781021897810219
12588,"@Override protected boolean checkDescendantsURIcompliance(){
  if (!isTopLevelURIformCompliant(this.getIdentity()))   return false;
  boolean allDescendantsCompliant=true;
  if (!this.getSequenceConstraints().isEmpty()) {
    for (    SequenceConstraint sequenceConstraint : this.getSequenceConstraints()) {
      allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(this,sequenceConstraint);
      if (!allDescendantsCompliant) {
        return allDescendantsCompliant;
      }
    }
  }
  if (!this.getComponents().isEmpty()) {
    for (    Component component : this.getComponents()) {
      allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(this,component);
      if (!allDescendantsCompliant) {
        return allDescendantsCompliant;
      }
      if (!component.getMapsTos().isEmpty()) {
        for (        MapsTo mapsTo : component.getMapsTos()) {
          allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(component,mapsTo);
          if (!allDescendantsCompliant) {
            return allDescendantsCompliant;
          }
        }
      }
    }
  }
  if (!this.getSequenceAnnotations().isEmpty()) {
    for (    SequenceAnnotation sequenceAnnotation : this.getSequenceAnnotations()) {
      allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(this,sequenceAnnotation);
      if (!allDescendantsCompliant) {
        return allDescendantsCompliant;
      }
      Set<Location> locations=sequenceAnnotation.getLocations();
      for (      Location location : locations) {
        if (location instanceof Range) {
          allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(sequenceAnnotation,location);
          if (!allDescendantsCompliant) {
            return allDescendantsCompliant;
          }
        }
        if (location instanceof Cut) {
          allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(sequenceAnnotation,location);
          if (!allDescendantsCompliant) {
            return allDescendantsCompliant;
          }
        }
        if (location instanceof GenericLocation) {
          allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(sequenceAnnotation,location);
          if (!allDescendantsCompliant) {
            return allDescendantsCompliant;
          }
        }
      }
    }
  }
  return allDescendantsCompliant;
}","@Override protected void checkDescendantsURIcompliance() throws SBOLValidationException {
  isTopLevelURIformCompliant(this.getIdentity());
  if (!this.getSequenceConstraints().isEmpty()) {
    for (    SequenceConstraint sequenceConstraint : this.getSequenceConstraints()) {
      try {
        isChildURIcompliant(this,sequenceConstraint);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(e.getRule(),sequenceConstraint);
      }
    }
  }
  if (!this.getComponents().isEmpty()) {
    for (    Component component : this.getComponents()) {
      try {
        isChildURIcompliant(this,component);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(e.getRule(),component);
      }
      if (!component.getMapsTos().isEmpty()) {
        for (        MapsTo mapsTo : component.getMapsTos()) {
          try {
            isChildURIcompliant(component,mapsTo);
          }
 catch (          SBOLValidationException e) {
            throw new SBOLValidationException(e.getRule(),mapsTo);
          }
        }
      }
    }
  }
  if (!this.getSequenceAnnotations().isEmpty()) {
    for (    SequenceAnnotation sequenceAnnotation : this.getSequenceAnnotations()) {
      try {
        isChildURIcompliant(this,sequenceAnnotation);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(e.getRule(),sequenceAnnotation);
      }
      Set<Location> locations=sequenceAnnotation.getLocations();
      for (      Location location : locations) {
        if (location instanceof Range) {
          try {
            isChildURIcompliant(sequenceAnnotation,location);
          }
 catch (          SBOLValidationException e) {
            throw new SBOLValidationException(e.getRule(),location);
          }
        }
        if (location instanceof Cut) {
          try {
            isChildURIcompliant(sequenceAnnotation,location);
          }
 catch (          SBOLValidationException e) {
            throw new SBOLValidationException(e.getRule(),location);
          }
        }
        if (location instanceof GenericLocation) {
          try {
            isChildURIcompliant(sequenceAnnotation,location);
          }
 catch (          SBOLValidationException e) {
            throw new SBOLValidationException(e.getRule(),location);
          }
        }
      }
    }
  }
}",0.4779166666666666
12589,"@Override protected boolean checkDescendantsURIcompliance(){
  return isTopLevelURIformCompliant(this.getIdentity());
}","@Override protected void checkDescendantsURIcompliance() throws SBOLValidationException {
  URIcompliance.isTopLevelURIformCompliant(this.getIdentity());
}",0.781021897810219
12590,"@Override protected boolean checkDescendantsURIcompliance(){
  return isTopLevelURIformCompliant(this.getIdentity());
}","@Override protected void checkDescendantsURIcompliance() throws SBOLValidationException {
  URIcompliance.isTopLevelURIformCompliant(this.getIdentity());
}",0.781021897810219
12591,"@Override protected boolean checkDescendantsURIcompliance(){
  if (!isTopLevelURIformCompliant(this.getIdentity()))   return false;
  boolean allDescendantsCompliant=true;
  if (!this.getModules().isEmpty()) {
    for (    Module module : this.getModules()) {
      allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(this,module);
      if (!allDescendantsCompliant) {
        return allDescendantsCompliant;
      }
      if (!module.getMapsTos().isEmpty()) {
        for (        MapsTo mapsTo : module.getMapsTos()) {
          allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(module,mapsTo);
          if (!allDescendantsCompliant) {
            return allDescendantsCompliant;
          }
        }
      }
    }
  }
  if (!this.getFunctionalComponents().isEmpty()) {
    for (    FunctionalComponent functionalComponent : this.getFunctionalComponents()) {
      allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(this,functionalComponent);
      if (!allDescendantsCompliant) {
        return allDescendantsCompliant;
      }
      if (!functionalComponent.getMapsTos().isEmpty()) {
        for (        MapsTo mapsTo : functionalComponent.getMapsTos()) {
          allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(functionalComponent,mapsTo);
          if (!allDescendantsCompliant) {
            return allDescendantsCompliant;
          }
        }
      }
    }
  }
  if (!this.getInteractions().isEmpty()) {
    for (    Interaction interaction : this.getInteractions()) {
      allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(this,interaction);
      if (!allDescendantsCompliant) {
        return allDescendantsCompliant;
      }
      for (      Participation participation : interaction.getParticipations()) {
        allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(interaction,participation);
        if (!allDescendantsCompliant) {
          return allDescendantsCompliant;
        }
      }
    }
  }
  return allDescendantsCompliant;
}","@Override protected void checkDescendantsURIcompliance() throws SBOLValidationException {
  isTopLevelURIformCompliant(this.getIdentity());
  if (!this.getModules().isEmpty()) {
    for (    Module module : this.getModules()) {
      try {
        isChildURIcompliant(this,module);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(e.getRule(),module);
      }
      if (!module.getMapsTos().isEmpty()) {
        for (        MapsTo mapsTo : module.getMapsTos()) {
          try {
            isChildURIcompliant(module,mapsTo);
          }
 catch (          SBOLValidationException e) {
            throw new SBOLValidationException(e.getRule(),mapsTo);
          }
        }
      }
    }
  }
  if (!this.getFunctionalComponents().isEmpty()) {
    for (    FunctionalComponent functionalComponent : this.getFunctionalComponents()) {
      try {
        isChildURIcompliant(this,functionalComponent);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(e.getRule(),functionalComponent);
      }
      if (!functionalComponent.getMapsTos().isEmpty()) {
        for (        MapsTo mapsTo : functionalComponent.getMapsTos()) {
          try {
            isChildURIcompliant(functionalComponent,mapsTo);
          }
 catch (          SBOLValidationException e) {
            throw new SBOLValidationException(e.getRule(),mapsTo);
          }
        }
      }
    }
  }
  if (!this.getInteractions().isEmpty()) {
    for (    Interaction interaction : this.getInteractions()) {
      try {
        isChildURIcompliant(this,interaction);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(e.getRule(),interaction);
      }
      for (      Participation participation : interaction.getParticipations()) {
        try {
          isChildURIcompliant(interaction,participation);
        }
 catch (        SBOLValidationException e) {
          throw new SBOLValidationException(e.getRule(),participation);
        }
      }
    }
  }
}",0.3825163004105288
12592,"/** 
 * Creates a copy of the given TopLevel instance with the given arguments, and then adds it to the corresponding top-level list owned by this SBOLDocument object. <p> This SBOLDcouement object is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the given   {@code URIprefix} is {@code null}, then it is extracted from the given  {@code topLevel} instance. If it does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it. <p> If either the given  {@code displayId} or {@code version}, then the corresponding field is extracted from the given   {@code topLevel} instance. Both extracted fields are requiredto be valid and not  {@code null}. <p> A top-level instance with a compliant URI is created using the given arguments, and then its display ID, persistent identity, and version fields are set. This instance is then added to the corresponding top-level list owned by this SBOLDocument object.
 * @param topLevel
 * @param URIprefix
 * @param displayId
 * @param version
 * @return the created top-level instance
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 * @throws SBOLValidationException if the {@code defaultURIprefix} is {@code null}
 * @throws SBOLValidationException if the given {@code URIprefix} is {@code null}
 * @throws SBOLValidationException if the given {@code URIprefix} is non-compliant
 * @throws SBOLValidationException if the given {@code displayId} is invalid
 * @throws SBOLValidationException if the given {@code version} is invalid
 * @throws SBOLValidationException if the created top-level instance's persistentidentity exists in this SBOLDocument object's other lists of top-level instances.
 * @throws SBOLValidationException if the created top-level instance's identity URIalready exists.
 * @throws SBOLValidationException if the given {@code topLevel} instance is not an instanceof a top-level object
 */
public TopLevel createCopy(TopLevel topLevel,String URIprefix,String displayId,String version) throws SBOLValidationException {
  checkReadOnly();
  if (!URIcompliance.isTopLevelURIcompliant(topLevel)) {
    throw new SBOLValidationException(""String_Node_Str"");
  }
  if (URIprefix == null) {
    URIprefix=extractURIprefix(topLevel.getIdentity());
    URIprefix=URIcompliance.checkURIprefix(URIprefix);
  }
 else {
    URIprefix=URIcompliance.checkURIprefix(URIprefix);
  }
  if (displayId == null) {
    displayId=topLevel.getDisplayId();
  }
  if (version == null) {
    version=topLevel.getVersion();
  }
  validateIdVersion(displayId,version);
  if (topLevel instanceof Collection) {
    Collection newCollection=((Collection)topLevel).copy(URIprefix,displayId,version);
    addCollection(newCollection);
    return newCollection;
  }
 else   if (topLevel instanceof ComponentDefinition) {
    ComponentDefinition newComponentDefinition=((ComponentDefinition)topLevel).copy(URIprefix,displayId,version);
    addComponentDefinition(newComponentDefinition);
    return newComponentDefinition;
  }
 else   if (topLevel instanceof Model) {
    Model newModel=((Model)topLevel).copy(URIprefix,displayId,version);
    addModel(newModel);
    return newModel;
  }
 else   if (topLevel instanceof ModuleDefinition) {
    ModuleDefinition newModuleDefinition=((ModuleDefinition)topLevel).copy(URIprefix,displayId,version);
    addModuleDefinition(newModuleDefinition);
    return newModuleDefinition;
  }
 else   if (topLevel instanceof Sequence) {
    Sequence newSequence=((Sequence)topLevel).copy(URIprefix,displayId,version);
    addSequence(newSequence);
    return newSequence;
  }
 else   if (topLevel instanceof GenericTopLevel) {
    GenericTopLevel newGenericTopLevel=((GenericTopLevel)topLevel).copy(URIprefix,displayId,version);
    addGenericTopLevel(newGenericTopLevel);
    return newGenericTopLevel;
  }
 else {
    throw new SBOLValidationException(""String_Node_Str"" + topLevel.getIdentity());
  }
}","/** 
 * Creates a copy of the given TopLevel instance with the given arguments, and then adds it to the corresponding top-level list owned by this SBOLDocument object. <p> This SBOLDcouement object is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the given   {@code URIprefix} is {@code null}, then it is extracted from the given  {@code topLevel} instance. If it does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it. <p> If either the given  {@code displayId} or {@code version}, then the corresponding field is extracted from the given   {@code topLevel} instance. Both extracted fields are requiredto be valid and not  {@code null}. <p> A top-level instance with a compliant URI is created using the given arguments, and then its display ID, persistent identity, and version fields are set. This instance is then added to the corresponding top-level list owned by this SBOLDocument object.
 * @param topLevel
 * @param URIprefix
 * @param displayId
 * @param version
 * @return the created top-level instance
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 * @throws SBOLValidationException if the {@code defaultURIprefix} is {@code null}
 * @throws SBOLValidationException if the given {@code URIprefix} is {@code null}
 * @throws SBOLValidationException if the given {@code URIprefix} is non-compliant
 * @throws SBOLValidationException if the given {@code displayId} is invalid
 * @throws SBOLValidationException if the given {@code version} is invalid
 * @throws SBOLValidationException if the created top-level instance's persistentidentity exists in this SBOLDocument object's other lists of top-level instances.
 * @throws SBOLValidationException if the created top-level instance's identity URIalready exists.
 * @throws SBOLValidationException if the given {@code topLevel} instance is not an instanceof a top-level object
 */
public TopLevel createCopy(TopLevel topLevel,String URIprefix,String displayId,String version) throws SBOLValidationException {
  checkReadOnly();
  topLevel.isURIcompliant();
  if (URIprefix == null) {
    URIprefix=extractURIprefix(topLevel.getIdentity());
    URIprefix=URIcompliance.checkURIprefix(URIprefix);
  }
 else {
    URIprefix=URIcompliance.checkURIprefix(URIprefix);
  }
  if (displayId == null) {
    displayId=topLevel.getDisplayId();
  }
  if (version == null) {
    version=topLevel.getVersion();
  }
  validateIdVersion(displayId,version);
  if (topLevel instanceof Collection) {
    Collection newCollection=((Collection)topLevel).copy(URIprefix,displayId,version);
    addCollection(newCollection);
    return newCollection;
  }
 else   if (topLevel instanceof ComponentDefinition) {
    ComponentDefinition newComponentDefinition=((ComponentDefinition)topLevel).copy(URIprefix,displayId,version);
    addComponentDefinition(newComponentDefinition);
    return newComponentDefinition;
  }
 else   if (topLevel instanceof Model) {
    Model newModel=((Model)topLevel).copy(URIprefix,displayId,version);
    addModel(newModel);
    return newModel;
  }
 else   if (topLevel instanceof ModuleDefinition) {
    ModuleDefinition newModuleDefinition=((ModuleDefinition)topLevel).copy(URIprefix,displayId,version);
    addModuleDefinition(newModuleDefinition);
    return newModuleDefinition;
  }
 else   if (topLevel instanceof Sequence) {
    Sequence newSequence=((Sequence)topLevel).copy(URIprefix,displayId,version);
    addSequence(newSequence);
    return newSequence;
  }
 else   if (topLevel instanceof GenericTopLevel) {
    GenericTopLevel newGenericTopLevel=((GenericTopLevel)topLevel).copy(URIprefix,displayId,version);
    addGenericTopLevel(newGenericTopLevel);
    return newGenericTopLevel;
  }
 else {
    throw new SBOLValidationException(""String_Node_Str"" + topLevel.getIdentity());
  }
}",0.9853052951608816
12593,"/** 
 * Creates a ComponentDefinition instance with the given arguments, and then adds it to this SBOLDocument object's list of ComponentDefinition instances. <p> This SBOLDcouement object is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the given   {@code URIprefix} does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it. <p> This method requires that the given  {@code URIprefix},   {@code displayId}, and   {@code version} are not {@code null} and are valid.<p> A ComponentDefinition instance is created with a compliant URI. This URI is composed from the given  {@code URIprefix}, the optional type   {@link TopLevel#COMPONENT_DEFINITION}, the given   {@code displayId}, and   {@code version}. The display ID, persistent identity, and version fields of this instance are then set accordingly.
 * @param URIprefix
 * @param displayId
 * @param version
 * @param type
 * @return the created ComponentDefinition instance
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 * @throws SBOLValidationException if the {@code defaultURIprefix} is {@code null}
 * @throws SBOLValidationException if the given {@code URIprefix} is {@code null}
 * @throws SBOLValidationException if the given {@code URIprefix} is non-compliant
 * @throws SBOLValidationException if the given {@code displayId} is invalid
 * @throws SBOLValidationException if the given {@code version} is invalid
 * @throws SBOLValidationException if the created ComponentDefinition instance's persistentidentity exists in this SBOLDocument object's other lists of top-level instances.
 * @throws SBOLValidationException if the created ComponentDefinition instance's identity URIexists in this SBOLDocument object's list of ComponentDefinition instances.
 */
public ComponentDefinition createComponentDefinition(String URIprefix,String displayId,String version,URI type) throws SBOLValidationException {
  checkReadOnly();
  URIprefix=URIcompliance.checkURIprefix(URIprefix);
  validateIdVersion(displayId,version);
  HashSet<URI> types=new HashSet<URI>();
  types.add(type);
  ComponentDefinition cd=createComponentDefinition(createCompliantURI(URIprefix,TopLevel.COMPONENT_DEFINITION,displayId,version,typesInURIs),types);
  cd.setDisplayId(displayId);
  cd.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.COMPONENT_DEFINITION,displayId,""String_Node_Str"",typesInURIs));
  cd.setVersion(version);
  return cd;
}","/** 
 * Creates a ComponentDefinition instance with the given arguments, and then adds it to this SBOLDocument object's list of ComponentDefinition instances. <p> This SBOLDcouement object is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the given   {@code URIprefix} does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it. <p> This method requires that the given  {@code URIprefix},   {@code displayId}, and   {@code version} are not {@code null} and are valid.<p> A ComponentDefinition instance is created with a compliant URI. This URI is composed from the given  {@code URIprefix}, the optional type   {@link TopLevel#COMPONENT_DEFINITION}, the given   {@code displayId}, and   {@code version}. The display ID, persistent identity, and version fields of this instance are then set accordingly.
 * @param URIprefix
 * @param displayId
 * @param version
 * @param type
 * @return the created ComponentDefinition instance
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 * @throws SBOLValidationException if the {@code defaultURIprefix} is {@code null}
 * @throws SBOLValidationException if the given {@code URIprefix} is {@code null}
 * @throws SBOLValidationException if the given {@code URIprefix} is non-compliant
 * @throws SBOLValidationException if the given {@code displayId} is invalid
 * @throws SBOLValidationException if the given {@code version} is invalid
 * @throws SBOLValidationException if the created ComponentDefinition instance's persistentidentity exists in this SBOLDocument object's other lists of top-level instances.
 * @throws SBOLValidationException if the created ComponentDefinition instance's identity URIexists in this SBOLDocument object's list of ComponentDefinition instances.
 */
public ComponentDefinition createComponentDefinition(String URIprefix,String displayId,String version,URI type) throws SBOLValidationException {
  HashSet<URI> types=new HashSet<URI>();
  types.add(type);
  return createComponentDefinition(URIprefix,displayId,version,types);
}",0.911006018916595
12594,"@SafeVarargs private final <TL extends TopLevel>void addTopLevel(TL newTopLevel,Map<URI,TL> instancesMap,String typeName,Map<URI,? extends Identified>... maps) throws SBOLValidationException {
  if (compliant && newTopLevel.checkDescendantsURIcompliance()) {
    URI persistentId=URI.create(extractPersistentId(newTopLevel.getIdentity()));
    if (keyExistsInAnyMap(persistentId,maps))     throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
    if (instancesMap.containsKey(newTopLevel.getIdentity()))     throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
    String prefix=extractURIprefix(persistentId);
    while (prefix != null) {
      if (keyExistsInAnyMap(URI.create(prefix),maps))       throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
      if (instancesMap.containsKey(URI.create(prefix)))       throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
      prefix=extractURIprefix(URI.create(prefix));
    }
    if (prefixes.contains(persistentId.toString())) {
      throw new SBOLValidationException(""String_Node_Str"" + persistentId.toString() + ""String_Node_Str"");
    }
    prefix=extractURIprefix(persistentId);
    while (prefix != null) {
      prefixes.add(prefix);
      prefix=extractURIprefix(URI.create(prefix));
    }
    instancesMap.put(newTopLevel.getIdentity(),newTopLevel);
    Identified latest=instancesMap.get(persistentId);
    if (latest == null) {
      instancesMap.put(persistentId,newTopLevel);
    }
 else {
      if (isFirstVersionNewer(extractVersion(newTopLevel.getIdentity()),extractVersion(latest.getIdentity()))) {
        instancesMap.put(persistentId,newTopLevel);
      }
    }
  }
 else {
    if (keyExistsInAnyMap(newTopLevel.getIdentity()))     throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
    if (instancesMap.containsKey(newTopLevel.getIdentity()))     throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
    instancesMap.put(newTopLevel.getIdentity(),newTopLevel);
    if (newTopLevel.isSetPersistentIdentity()) {
      Identified latest=instancesMap.get(newTopLevel.getPersistentIdentity());
      if (latest == null) {
        instancesMap.put(newTopLevel.getPersistentIdentity(),newTopLevel);
      }
 else {
        if (isFirstVersionNewer(extractVersion(newTopLevel.getIdentity()),extractVersion(latest.getIdentity()))) {
          instancesMap.put(newTopLevel.getPersistentIdentity(),newTopLevel);
        }
      }
    }
  }
  newTopLevel.setSBOLDocument(this);
}","@SafeVarargs private final <TL extends TopLevel>void addTopLevel(TL newTopLevel,Map<URI,TL> instancesMap,String typeName,Map<URI,? extends Identified>... maps) throws SBOLValidationException {
  boolean childrenCompliant=true;
  try {
    newTopLevel.checkDescendantsURIcompliance();
  }
 catch (  SBOLValidationException e) {
    childrenCompliant=false;
  }
  if (compliant && childrenCompliant) {
    URI persistentId=URI.create(extractPersistentId(newTopLevel.getIdentity()));
    if (keyExistsInAnyMap(persistentId,maps))     throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
    if (instancesMap.containsKey(newTopLevel.getIdentity()))     throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
    String prefix=extractURIprefix(persistentId);
    while (prefix != null) {
      if (keyExistsInAnyMap(URI.create(prefix),maps))       throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
      if (instancesMap.containsKey(URI.create(prefix)))       throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
      prefix=extractURIprefix(URI.create(prefix));
    }
    if (prefixes.contains(persistentId.toString())) {
      throw new SBOLValidationException(""String_Node_Str"" + persistentId.toString() + ""String_Node_Str"");
    }
    prefix=extractURIprefix(persistentId);
    while (prefix != null) {
      prefixes.add(prefix);
      prefix=extractURIprefix(URI.create(prefix));
    }
    instancesMap.put(newTopLevel.getIdentity(),newTopLevel);
    Identified latest=instancesMap.get(persistentId);
    if (latest == null) {
      instancesMap.put(persistentId,newTopLevel);
    }
 else {
      if (isFirstVersionNewer(extractVersion(newTopLevel.getIdentity()),extractVersion(latest.getIdentity()))) {
        instancesMap.put(persistentId,newTopLevel);
      }
    }
  }
 else {
    if (keyExistsInAnyMap(newTopLevel.getIdentity()))     throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
    if (instancesMap.containsKey(newTopLevel.getIdentity()))     throw new SBOLValidationException(""String_Node_Str"",newTopLevel);
    instancesMap.put(newTopLevel.getIdentity(),newTopLevel);
    if (newTopLevel.isSetPersistentIdentity()) {
      Identified latest=instancesMap.get(newTopLevel.getPersistentIdentity());
      if (latest == null) {
        instancesMap.put(newTopLevel.getPersistentIdentity(),newTopLevel);
      }
 else {
        if (isFirstVersionNewer(extractVersion(newTopLevel.getIdentity()),extractVersion(latest.getIdentity()))) {
          instancesMap.put(newTopLevel.getPersistentIdentity(),newTopLevel);
        }
      }
    }
  }
  newTopLevel.setSBOLDocument(this);
}",0.9596135265700484
12595,"/** 
 * Validate SBOL objects are compliant in the given   {@code sbolDocument}.
 * @param sbolDocument
 * @throws SBOLValidationException if any top-level objects or any of their children or grandchildren in the given  {@code sbolDocument} contain a non-compliant URI.
 */
static void validateCompliance(SBOLDocument sbolDocument){
  for (  Collection collection : sbolDocument.getCollections()) {
    if (!URIcompliance.isTopLevelURIcompliant(collection) || !collection.checkDescendantsURIcompliance()) {
      errors.add(""String_Node_Str"" + collection.getIdentity() + ""String_Node_Str"");
    }
  }
  for (  Sequence sequence : sbolDocument.getSequences()) {
    if (!URIcompliance.isTopLevelURIcompliant(sequence) || !sequence.checkDescendantsURIcompliance()) {
      errors.add(""String_Node_Str"" + sequence.getIdentity() + ""String_Node_Str"");
    }
  }
  for (  ComponentDefinition componentDefinition : sbolDocument.getComponentDefinitions()) {
    if (!URIcompliance.isTopLevelURIcompliant(componentDefinition) || !componentDefinition.checkDescendantsURIcompliance()) {
      errors.add(""String_Node_Str"" + componentDefinition.getIdentity() + ""String_Node_Str"");
    }
  }
  for (  ModuleDefinition moduleDefinition : sbolDocument.getModuleDefinitions()) {
    if (!URIcompliance.isTopLevelURIcompliant(moduleDefinition) || !moduleDefinition.checkDescendantsURIcompliance())     errors.add(""String_Node_Str"" + moduleDefinition.getIdentity() + ""String_Node_Str"");
  }
  for (  Model model : sbolDocument.getModels()) {
    if (!URIcompliance.isTopLevelURIcompliant(model) || !model.checkDescendantsURIcompliance())     errors.add(""String_Node_Str"" + model.getIdentity() + ""String_Node_Str"");
  }
  for (  GenericTopLevel genericTopLevel : sbolDocument.getGenericTopLevels()) {
    if (!URIcompliance.isTopLevelURIcompliant(genericTopLevel) || !genericTopLevel.checkDescendantsURIcompliance())     errors.add(""String_Node_Str"" + genericTopLevel.getIdentity() + ""String_Node_Str"");
  }
}","/** 
 * Validate SBOL objects are compliant in the given   {@code sbolDocument}.
 * @param sbolDocument
 * @throws SBOLValidationException if any top-level objects or any of their children or grandchildren in the given  {@code sbolDocument} contain a non-compliant URI.
 */
static void validateCompliance(SBOLDocument sbolDocument){
  for (  TopLevel topLevel : sbolDocument.getTopLevels()) {
    try {
      topLevel.isURIcompliant();
    }
 catch (    SBOLValidationException e) {
      errors.add(e.getMessage());
    }
  }
}",0.3200953137410643
12596,"@Override protected boolean checkDescendantsURIcompliance(){
  return isTopLevelURIformCompliant(this.getIdentity());
}","@Override protected void checkDescendantsURIcompliance() throws SBOLValidationException {
  URIcompliance.isTopLevelURIformCompliant(this.getIdentity());
}",0.781021897810219
12597,"/** 
 * Adds the specified instance to the list of components.
 * @throws SBOLValidationException 
 */
void addComponent(Component component) throws SBOLValidationException {
  component.setSBOLDocument(this.sbolDocument);
  component.setComponentDefinition(this);
  if (sbolDocument != null && sbolDocument.isComplete()) {
    if (component.getDefinition() == null) {
      throw new SBOLValidationException(""String_Node_Str"",component);
    }
  }
  Set<URI> visited=new HashSet<>();
  visited.add(this.getIdentity());
  if (SBOLValidate.checkComponentDefinitionCycle(sbolDocument,component.getDefinition(),visited)) {
    throw new SBOLValidationException(""String_Node_Str"" + component.getIdentity() + ""String_Node_Str"");
  }
  addChildSafely(component,components,""String_Node_Str"",sequenceAnnotations,sequenceConstraints);
  for (  MapsTo mapsTo : component.getMapsTos()) {
    mapsTo.setSBOLDocument(sbolDocument);
    mapsTo.setComponentDefinition(this);
    mapsTo.setComponentInstance(component);
  }
}","/** 
 * Adds the specified instance to the list of components.
 * @throws SBOLValidationException 
 */
void addComponent(Component component) throws SBOLValidationException {
  component.setSBOLDocument(this.sbolDocument);
  component.setComponentDefinition(this);
  if (sbolDocument != null && sbolDocument.isComplete()) {
    if (component.getDefinition() == null) {
      throw new SBOLValidationException(""String_Node_Str"",component);
    }
  }
  Set<URI> visited=new HashSet<>();
  visited.add(this.getIdentity());
  SBOLValidate.checkComponentDefinitionCycle(sbolDocument,component.getDefinition(),visited);
  addChildSafely(component,components,""String_Node_Str"",sequenceAnnotations,sequenceConstraints);
  for (  MapsTo mapsTo : component.getMapsTos()) {
    mapsTo.setSBOLDocument(sbolDocument);
    mapsTo.setComponentDefinition(this);
    mapsTo.setComponentInstance(component);
  }
}",0.6659663865546218
12598,"/** 
 * Sets the   {@code wasDerivedFrom} property of this object to the specified one.<p> If this object belongs to an SBOLDocument instance, then the SBOLDcouement instance is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited.
 * @param wasDerivedFrom The URI for with an SBOL object with this property refers to another SBOL object or non-SBOL resource from which this object was derived
 * @throws SBOLValidationException if the associated SBOLDocument is not compliant.
 */
public void setWasDerivedFrom(URI wasDerivedFrom) throws SBOLValidationException {
  if (sbolDocument != null) {
    sbolDocument.checkReadOnly();
    if (!SBOLValidate.checkWasDerivedFromVersion(sbolDocument,this,wasDerivedFrom)) {
      throw new SBOLValidationException(""String_Node_Str"",this);
    }
    if (SBOLValidate.checkWasDerivedFromCycle(sbolDocument,this,wasDerivedFrom,new HashSet<URI>())) {
      throw new SBOLValidationException(""String_Node_Str"" + getIdentity() + ""String_Node_Str"");
    }
  }
  this.wasDerivedFrom=wasDerivedFrom;
}","/** 
 * Sets the   {@code wasDerivedFrom} property of this object to the specified one.<p> If this object belongs to an SBOLDocument instance, then the SBOLDcouement instance is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited.
 * @param wasDerivedFrom The URI for with an SBOL object with this property refers to another SBOL object or non-SBOL resource from which this object was derived
 * @throws SBOLValidationException if the associated SBOLDocument is not compliant.
 */
public void setWasDerivedFrom(URI wasDerivedFrom) throws SBOLValidationException {
  if (sbolDocument != null) {
    sbolDocument.checkReadOnly();
    if (!SBOLValidate.checkWasDerivedFromVersion(sbolDocument,this,wasDerivedFrom)) {
      throw new SBOLValidationException(""String_Node_Str"",this);
    }
    SBOLValidate.checkWasDerivedFromCycle(sbolDocument,this,wasDerivedFrom,new HashSet<URI>());
  }
  this.wasDerivedFrom=wasDerivedFrom;
}",0.9116781157998036
12599,"/** 
 * Adds the given   {@code module} argument to this ModuleDefinition's list ofModule instances, and then associates it with the SBOLDocument instance that also contains this ModuleDefinition object.
 * @param module
 * @throws SBOLValidationException 
 */
void addModule(Module module) throws SBOLValidationException {
  module.setSBOLDocument(this.sbolDocument);
  module.setModuleDefinition(this);
  if (sbolDocument != null && sbolDocument.isComplete()) {
    if (module.getDefinition() == null) {
      throw new SBOLValidationException(""String_Node_Str"",module);
    }
  }
  Set<URI> visited=new HashSet<>();
  visited.add(this.getIdentity());
  if (SBOLValidate.checkModuleDefinitionCycle(sbolDocument,module.getDefinition(),visited)) {
    throw new SBOLValidationException(""String_Node_Str"",module);
  }
  addChildSafely(module,modules,""String_Node_Str"",functionalComponents,interactions);
  for (  MapsTo mapsTo : module.getMapsTos()) {
    mapsTo.setSBOLDocument(sbolDocument);
    mapsTo.setModuleDefinition(this);
    mapsTo.setModule(module);
  }
}","/** 
 * Adds the given   {@code module} argument to this ModuleDefinition's list ofModule instances, and then associates it with the SBOLDocument instance that also contains this ModuleDefinition object.
 * @param module
 * @throws SBOLValidationException 
 */
void addModule(Module module) throws SBOLValidationException {
  module.setSBOLDocument(this.sbolDocument);
  module.setModuleDefinition(this);
  if (sbolDocument != null && sbolDocument.isComplete()) {
    if (module.getDefinition() == null) {
      throw new SBOLValidationException(""String_Node_Str"",module);
    }
  }
  Set<URI> visited=new HashSet<>();
  visited.add(this.getIdentity());
  SBOLValidate.checkModuleDefinitionCycle(sbolDocument,module.getDefinition(),visited);
  addChildSafely(module,modules,""String_Node_Str"",functionalComponents,interactions);
  for (  MapsTo mapsTo : module.getMapsTos()) {
    mapsTo.setSBOLDocument(sbolDocument);
    mapsTo.setModuleDefinition(this);
    mapsTo.setModule(module);
  }
}",0.7389402041808459
12600,"protected static boolean checkWasDerivedFromCycle(SBOLDocument sbolDocument,Identified identified,URI wasDerivedFrom,Set<URI> visited){
  visited.add(identified.getIdentity());
  TopLevel tl=sbolDocument.getTopLevel(wasDerivedFrom);
  if (tl != null) {
    if (visited.contains(tl.getIdentity()))     return true;
    if (tl.isSetWasDerivedFrom()) {
      if (checkWasDerivedFromCycle(sbolDocument,tl,tl.getWasDerivedFrom(),visited))       return true;
    }
 else {
      return false;
    }
  }
  visited.remove(identified.getIdentity());
  return false;
}","protected static void checkWasDerivedFromCycle(SBOLDocument sbolDocument,Identified identified,URI wasDerivedFrom,Set<URI> visited) throws SBOLValidationException {
  visited.add(identified.getIdentity());
  TopLevel tl=sbolDocument.getTopLevel(wasDerivedFrom);
  if (tl != null) {
    if (visited.contains(tl.getIdentity())) {
      throw new SBOLValidationException(""String_Node_Str"",identified);
    }
    if (tl.isSetWasDerivedFrom()) {
      try {
        checkWasDerivedFromCycle(sbolDocument,tl,tl.getWasDerivedFrom(),visited);
      }
 catch (      SBOLValidationException e) {
        throw new SBOLValidationException(""String_Node_Str"",identified);
      }
    }
 else {
      return;
    }
  }
  visited.remove(identified.getIdentity());
  return;
}",0.6403641881638846
12601,"/** 
 * Validate if there are circular references in given   {@code sbolDocument}.
 * @param sbolDocument
 */
static void validateCircularReferences(SBOLDocument sbolDocument){
  for (  TopLevel topLevel : sbolDocument.getTopLevels()) {
    if (topLevel.isSetWasDerivedFrom()) {
      if (checkWasDerivedFromCycle(sbolDocument,topLevel,topLevel.getWasDerivedFrom(),new HashSet<URI>())) {
        errors.add(""String_Node_Str"" + topLevel.getIdentity() + ""String_Node_Str"");
      }
    }
  }
  for (  ComponentDefinition componentDefinition : sbolDocument.getComponentDefinitions()) {
    if (checkComponentDefinitionCycle(sbolDocument,componentDefinition,new HashSet<URI>())) {
      errors.add(""String_Node_Str"" + componentDefinition.getIdentity() + ""String_Node_Str"");
    }
  }
  for (  ModuleDefinition moduleDefinition : sbolDocument.getModuleDefinitions()) {
    if (checkModuleDefinitionCycle(sbolDocument,moduleDefinition,new HashSet<URI>())) {
      errors.add(""String_Node_Str"" + moduleDefinition.getIdentity() + ""String_Node_Str"");
    }
  }
}","/** 
 * Validate if there are circular references in given   {@code sbolDocument}.
 * @param sbolDocument
 */
static void validateCircularReferences(SBOLDocument sbolDocument){
  for (  TopLevel topLevel : sbolDocument.getTopLevels()) {
    if (topLevel.isSetWasDerivedFrom()) {
      try {
        checkWasDerivedFromCycle(sbolDocument,topLevel,topLevel.getWasDerivedFrom(),new HashSet<URI>());
      }
 catch (      SBOLValidationException e) {
        errors.add(e.getMessage());
      }
    }
  }
  for (  ComponentDefinition componentDefinition : sbolDocument.getComponentDefinitions()) {
    try {
      checkComponentDefinitionCycle(sbolDocument,componentDefinition,new HashSet<URI>());
    }
 catch (    SBOLValidationException e) {
      errors.add(e.getMessage());
    }
  }
  for (  ModuleDefinition moduleDefinition : sbolDocument.getModuleDefinitions()) {
    try {
      checkModuleDefinitionCycle(sbolDocument,moduleDefinition,new HashSet<URI>());
    }
 catch (    SBOLValidationException e) {
      errors.add(e.getMessage());
    }
  }
}",0.5370018975332068
12602,"protected static boolean checkModuleDefinitionCycle(SBOLDocument sbolDocument,ModuleDefinition moduleDefinition,Set<URI> visited){
  if (moduleDefinition == null)   return false;
  visited.add(moduleDefinition.getIdentity());
  for (  Module module : moduleDefinition.getModules()) {
    ModuleDefinition md=module.getDefinition();
    if (md == null)     continue;
    if (visited.contains(md.getIdentity()))     return true;
    if (checkModuleDefinitionCycle(sbolDocument,md,visited))     return true;
  }
  visited.remove(moduleDefinition.getIdentity());
  return false;
}","protected static void checkModuleDefinitionCycle(SBOLDocument sbolDocument,ModuleDefinition moduleDefinition,Set<URI> visited) throws SBOLValidationException {
  if (moduleDefinition == null)   return;
  visited.add(moduleDefinition.getIdentity());
  for (  Module module : moduleDefinition.getModules()) {
    ModuleDefinition md=module.getDefinition();
    if (md == null)     continue;
    if (visited.contains(md.getIdentity())) {
      throw new SBOLValidationException(""String_Node_Str"",module);
    }
    try {
      checkModuleDefinitionCycle(sbolDocument,md,visited);
    }
 catch (    SBOLValidationException e) {
      throw new SBOLValidationException(""String_Node_Str"",module);
    }
  }
  visited.remove(moduleDefinition.getIdentity());
  return;
}",0.7683109118086696
12603,"protected static boolean checkComponentDefinitionCycle(SBOLDocument sbolDocument,ComponentDefinition componentDefinition,Set<URI> visited){
  if (componentDefinition == null)   return false;
  visited.add(componentDefinition.getIdentity());
  for (  Component component : componentDefinition.getComponents()) {
    ComponentDefinition cd=component.getDefinition();
    if (cd == null)     continue;
    if (visited.contains(cd.getIdentity()))     return true;
    if (checkComponentDefinitionCycle(sbolDocument,cd,visited))     return true;
  }
  visited.remove(componentDefinition.getIdentity());
  return false;
}","protected static void checkComponentDefinitionCycle(SBOLDocument sbolDocument,ComponentDefinition componentDefinition,Set<URI> visited) throws SBOLValidationException {
  if (componentDefinition == null)   return;
  visited.add(componentDefinition.getIdentity());
  for (  Component component : componentDefinition.getComponents()) {
    ComponentDefinition cd=component.getDefinition();
    if (cd == null)     continue;
    if (visited.contains(cd.getIdentity())) {
      throw new SBOLValidationException(""String_Node_Str"",component);
    }
    try {
      checkComponentDefinitionCycle(sbolDocument,cd,visited);
    }
 catch (    SBOLValidationException e) {
      throw new SBOLValidationException(""String_Node_Str"",component);
    }
  }
  visited.remove(componentDefinition.getIdentity());
  return;
}",0.7876230661040787
12604,"/** 
 * Text which is written for users to read and interpret.  It should describe what the component is used for and/or what it does. Suggestion: it should provide information that cannot yet be represented in the rest of the DNA components computable fields. Do not include <> tags such as HTML or XML inside as that may break the RDF. Don't include {} tags as that may break the Json.
 * @param description human readable text describing the component
 */
@Override void setDescription(String description);","/** 
 * Text which is written for users to read and interpret.  It should describe what the component is used for and/or what it does. Suggestion: it should provide information that cannot yet be represented in the rest of the DNA components computable fields. Do not include tags such as HTML or XML inside as that may break the RDF. Don't include {} tags as that may break the Json.
 * @param description human readable text describing the component
 */
@Override void setDescription(String description);",0.9970443349753696
12605,"/** 
 * Creates a new URI from the Sequence Ontology namespace with the given local name. For example, the function call <value>term(""SO_0000001"")</value> will return the URI <value>http://purl.obolibrary.org/obo/SO_0000001</value>
 */
public static final URI type(String localName){
  return NAMESPACE.resolve(localName);
}","/** 
 * Creates a new URI from the Sequence Ontology namespace with the given local name. For example, the function call term(""SO_0000001"") will return the URI http://purl.obolibrary.org/obo/SO_0000001
 */
public static final URI type(String localName){
  return NAMESPACE.resolve(localName);
}",0.9514563106796116
12606,"private static String formatMessage(String message,java.util.Collection<? extends Identified> objects){
  final StringBuilder sb=new StringBuilder(message);
  if (message.startsWith(""String_Node_Str"")) {
    if (validationRules == null) {
      validationRules=new LinkedHashMap<String,SBOLValidationRule>();
      InputStreamReader f=new InputStreamReader(SBOLValidationRule.class.getResourceAsStream(""String_Node_Str""));
      try {
        parse(new BufferedReader(f));
        String key=message.trim();
        SBOLValidationRule rule=validationRules.get(key);
        if (rule == null) {
          throw new RuntimeException(""String_Node_Str"");
        }
        sb.append(""String_Node_Str"" + rule.getDescription() + ""String_Node_Str"");
        if (!objects.isEmpty()) {
          sb.append(""String_Node_Str"");
          boolean first=true;
          for (          Identified obj : objects) {
            if (first) {
              first=false;
            }
 else {
              sb.append(""String_Node_Str"");
            }
            if (obj.getIdentity() != null) {
              sb.append(obj.getIdentity());
            }
          }
        }
      }
 catch (      IOException e) {
      }
    }
  }
 else {
    if (!objects.isEmpty()) {
      sb.append(""String_Node_Str"");
      boolean first=true;
      for (      Identified obj : objects) {
        if (first) {
          first=false;
        }
 else {
          sb.append(""String_Node_Str"");
        }
        if (obj.getIdentity() != null) {
          sb.append(obj.getIdentity());
        }
      }
    }
  }
  return sb.toString();
}","private static String formatMessage(String message,java.util.Collection<? extends Identified> objects){
  final StringBuilder sb=new StringBuilder(message);
  if (message.startsWith(""String_Node_Str"")) {
    if (validationRules == null) {
      validationRules=new LinkedHashMap<String,SBOLValidationRule>();
      InputStreamReader f=new InputStreamReader(SBOLValidationRule.class.getResourceAsStream(""String_Node_Str""));
      try {
        parse(new BufferedReader(f));
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    String key=message.trim();
    SBOLValidationRule rule=validationRules.get(key);
    if (rule == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"" + rule.getDescription() + ""String_Node_Str"");
    if (!objects.isEmpty()) {
      sb.append(""String_Node_Str"");
      boolean first=true;
      for (      Identified obj : objects) {
        if (first) {
          first=false;
        }
 else {
          sb.append(""String_Node_Str"");
        }
        if (obj.getIdentity() != null) {
          sb.append(obj.getIdentity());
        }
      }
    }
  }
 else {
    if (!objects.isEmpty()) {
      sb.append(""String_Node_Str"");
      boolean first=true;
      for (      Identified obj : objects) {
        if (first) {
          first=false;
        }
 else {
          sb.append(""String_Node_Str"");
        }
        if (obj.getIdentity() != null) {
          sb.append(obj.getIdentity());
        }
      }
    }
  }
  return sb.toString();
}",0.5565768621236133
12607,"@Test public void testValidation() throws CoreIoException, XMLStreamException, FactoryConfigurationError {
  File file_base=null;
  try {
    file_base=new File(ValidationTest.class.getResource(""String_Node_Str"").toURI());
  }
 catch (  URISyntaxException e1) {
    e1.printStackTrace();
  }
  File file;
  SBOLDocument doc=null;
  for (  File f : file_base.listFiles()) {
    file=new File(f.getAbsolutePath());
    System.out.println(f.getName().replace(""String_Node_Str"",""String_Node_Str""));
    SBOLReader.setKeepGoing(true);
    try {
      doc=SBOLReader.read(file);
    }
 catch (    SBOLValidationException e) {
      e.printStackTrace();
    }
catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
    SBOLValidate.validateSBOL(doc,true,true,true);
    if (SBOLReader.getNumErrors() > 0) {
      for (      String error : SBOLReader.getErrors()) {
        System.out.println(""String_Node_Str"" + error);
        if (!error.split(""String_Node_Str"")[0].equals((f.getName()).replace(""String_Node_Str"",""String_Node_Str""))) {
        }
      }
    }
 else     if (SBOLValidate.getNumErrors() > 0) {
      for (      String error : SBOLValidate.getErrors()) {
        System.out.println(""String_Node_Str"" + error);
        if (!error.split(""String_Node_Str"")[0].equals(f.getName())) {
        }
      }
    }
 else {
    }
  }
}","@Test public void testValidation() throws CoreIoException, XMLStreamException, FactoryConfigurationError {
  File file_base=null;
  try {
    file_base=new File(ValidationTest.class.getResource(""String_Node_Str"").toURI());
  }
 catch (  URISyntaxException e1) {
    e1.printStackTrace();
  }
  File file;
  SBOLDocument doc=null;
  for (  File f : file_base.listFiles()) {
    file=new File(f.getAbsolutePath());
    System.out.println(f.getName().replace(""String_Node_Str"",""String_Node_Str""));
    SBOLReader.setKeepGoing(true);
    try {
      doc=SBOLReader.read(file);
    }
 catch (    SBOLValidationException e) {
      e.printStackTrace();
    }
catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
    SBOLValidate.validateSBOL(doc,true,true,true);
    if (SBOLReader.getNumErrors() > 0) {
      for (      String error : SBOLReader.getErrors()) {
        System.out.println(""String_Node_Str"" + error);
        if (!error.split(""String_Node_Str"")[0].equals((f.getName()).replace(""String_Node_Str"",""String_Node_Str""))) {
        }
      }
    }
 else     if (SBOLValidate.getNumErrors() > 0) {
      for (      String error : SBOLValidate.getErrors()) {
        System.out.println(""String_Node_Str"" + error);
        if (!error.split(""String_Node_Str"")[0].equals(f.getName().replace(""String_Node_Str"",""String_Node_Str""))) {
        }
      }
    }
 else {
    }
  }
}",0.9835706462212488
12608,"/** 
 * Command line method for reading an input file and producing an output file.  <p> By default, validations on compliance and completeness are performed, and types for top-level objects are not used in URIs. <p> Options: <p>  ""-t"" uses types in URIs, <p> ""-i"" turns off completeness checking, <p> ""-b"" turns on best practice checking, <p> ""-n"" indicates a non-compliant SBOL document, <p> ""-g"" indicates conversion of GenBank file, <p> ""-c"" specifies a selected top-level component definition <p> ""-o"" specifies an output filename, <p> ""-p"" specifies the default URI prefix of the output file, <p> ""-v"" specifies version to use for converted objects,  <p> ""-f"" fail on first error, and <p> ""-d"" show detailed error trace.
 * @param args
 */
public static void main(String[] args){
  String fileName=""String_Node_Str"";
  String outputFile=""String_Node_Str"";
  String componentDefinitionStr=""String_Node_Str"";
  String URIPrefix=""String_Node_Str"";
  String version=""String_Node_Str"";
  boolean complete=true;
  boolean compliant=true;
  boolean typesInURI=false;
  boolean bestPractice=false;
  boolean keepGoing=true;
  boolean showDetail=false;
  boolean genBankIn=false;
  boolean genBankOut=false;
  int i=0;
  while (i < args.length) {
    if (args[i].equals(""String_Node_Str"")) {
      complete=false;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      typesInURI=true;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      bestPractice=true;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      compliant=false;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      genBankIn=true;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      keepGoing=false;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      showDetail=true;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      genBankOut=true;
      if (i + 1 >= args.length) {
        usage();
      }
      componentDefinitionStr=args[i + 1];
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        usage();
      }
      outputFile=args[i + 1];
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        usage();
      }
      URIPrefix=args[i + 1];
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        usage();
      }
      version=args[i + 1];
      i++;
    }
 else     if (fileName.equals(""String_Node_Str"")) {
      fileName=args[i];
    }
 else {
      usage();
    }
    i++;
  }
  if (fileName.equals(""String_Node_Str""))   usage();
  try {
    SBOLDocument doc=null;
    if (genBankIn) {
      if (!URIPrefix.equals(""String_Node_Str"")) {
        GenBank.setURIPrefix(URIPrefix);
      }
      doc=GenBank.read(fileName);
    }
 else {
      if (!URIPrefix.equals(""String_Node_Str"")) {
        SBOLReader.setURIPrefix(URIPrefix);
      }
      if (!compliant) {
        SBOLReader.setCompliant(false);
      }
      SBOLReader.setTypesInURI(typesInURI);
      SBOLReader.setVersion(version);
      SBOLReader.setKeepGoing(keepGoing);
      if (SBOLReader.getSBOLVersion(fileName).equals(SBOLReader.SBOLVERSION1)) {
        System.err.println(""String_Node_Str"");
      }
      doc=SBOLReader.read(fileName);
      doc.setTypesInURIs(typesInURI);
    }
    validateSBOL(doc,complete,compliant,bestPractice);
    if (getNumErrors() == 0 && SBOLReader.getNumErrors() == 0) {
      if (outputFile.equals(""String_Node_Str"")) {
        if (genBankOut) {
          ComponentDefinition componentDefinition=doc.getComponentDefinition(URI.create(componentDefinitionStr));
          GenBank.write(componentDefinition,(System.out));
        }
 else {
          SBOLWriter.write(doc,(System.out));
        }
      }
 else {
        System.out.println(""String_Node_Str"");
        if (genBankOut) {
          ComponentDefinition componentDefinition=doc.getComponentDefinition(URI.create(componentDefinitionStr));
          GenBank.write(componentDefinition,outputFile);
        }
 else {
          SBOLWriter.write(doc,outputFile);
        }
      }
    }
 else {
      for (      String error : SBOLReader.getErrors()) {
        System.err.println(error);
      }
      for (      String error : getErrors()) {
        System.err.println(error);
      }
      System.err.println(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    if (showDetail) {
      e.printStackTrace();
    }
    System.err.println(e.getMessage() + ""String_Node_Str"");
  }
catch (  Throwable e) {
    if (showDetail) {
      e.printStackTrace();
    }
    System.err.println(e.getMessage() + ""String_Node_Str"");
  }
}","/** 
 * Command line method for reading an input file and producing an output file.  <p> By default, validations on compliance and completeness are performed, and types for top-level objects are not used in URIs. <p> Options: <p>  ""-t"" uses types in URIs, <p> ""-i"" turns off completeness checking, <p> ""-b"" turns on best practice checking, <p> ""-n"" indicates a non-compliant SBOL document, <p> ""-g"" indicates conversion of GenBank file, <p> ""-c"" specifies a selected top-level component definition <p> ""-o"" specifies an output filename, <p> ""-p"" specifies the default URI prefix of the output file, <p> ""-v"" specifies version to use for converted objects,  <p> ""-f"" fail on first error, and <p> ""-d"" show detailed error trace.
 * @param args
 */
public static void main(String[] args){
  String fileName=""String_Node_Str"";
  String outputFile=""String_Node_Str"";
  String componentDefinitionStr=""String_Node_Str"";
  String URIPrefix=""String_Node_Str"";
  String version=""String_Node_Str"";
  boolean complete=true;
  boolean compliant=true;
  boolean typesInURI=false;
  boolean bestPractice=false;
  boolean keepGoing=true;
  boolean showDetail=false;
  boolean genBankIn=false;
  boolean genBankOut=false;
  int i=0;
  while (i < args.length) {
    if (args[i].equals(""String_Node_Str"")) {
      complete=false;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      typesInURI=true;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      bestPractice=true;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      compliant=false;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      genBankIn=true;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      keepGoing=false;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      showDetail=true;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      genBankOut=true;
      if (i + 1 >= args.length) {
        usage();
      }
      componentDefinitionStr=args[i + 1];
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        usage();
      }
      outputFile=args[i + 1];
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        usage();
      }
      URIPrefix=args[i + 1];
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        usage();
      }
      version=args[i + 1];
      i++;
    }
 else     if (fileName.equals(""String_Node_Str"")) {
      fileName=args[i];
    }
 else {
      usage();
    }
    i++;
  }
  if (fileName.equals(""String_Node_Str""))   usage();
  try {
    SBOLDocument doc=null;
    if (genBankIn) {
      if (!URIPrefix.equals(""String_Node_Str"")) {
        GenBank.setURIPrefix(URIPrefix);
      }
      doc=GenBank.read(fileName);
    }
 else {
      if (!URIPrefix.equals(""String_Node_Str"")) {
        SBOLReader.setURIPrefix(URIPrefix);
      }
      if (!compliant) {
        SBOLReader.setCompliant(false);
      }
      SBOLReader.setTypesInURI(typesInURI);
      SBOLReader.setVersion(version);
      SBOLReader.setKeepGoing(keepGoing);
      if (SBOLReader.getSBOLVersion(fileName).equals(SBOLReader.SBOLVERSION1)) {
        System.err.println(""String_Node_Str"");
      }
      doc=SBOLReader.read(fileName);
      doc.setTypesInURIs(typesInURI);
    }
    validateSBOL(doc,complete,compliant,bestPractice);
    if (getNumErrors() == 0 && SBOLReader.getNumErrors() == 0) {
      if (outputFile.equals(""String_Node_Str"")) {
        if (genBankOut) {
          ComponentDefinition componentDefinition=doc.getComponentDefinition(URI.create(componentDefinitionStr));
          GenBank.write(componentDefinition,(System.out));
        }
 else {
          SBOLWriter.write(doc,(System.out));
        }
      }
 else {
        System.out.println(""String_Node_Str"");
        if (genBankOut) {
          ComponentDefinition componentDefinition=doc.getComponentDefinition(URI.create(componentDefinitionStr));
          GenBank.write(componentDefinition,outputFile);
        }
 else {
          SBOLWriter.write(doc,outputFile);
        }
      }
    }
 else {
      if (getNumErrors() != 0) {
        for (        String error : getErrors()) {
          System.err.println(error);
        }
      }
      if (SBOLReader.getNumErrors() != 0) {
        for (        String error : SBOLReader.getErrors()) {
          System.err.println(error);
        }
      }
      System.err.println(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    if (showDetail) {
      e.printStackTrace();
    }
    System.err.println(e.getMessage() + ""String_Node_Str"");
  }
catch (  Throwable e) {
    if (showDetail) {
      e.printStackTrace();
    }
    System.err.println(e.getMessage() + ""String_Node_Str"");
  }
}",0.970131926121372
12609,"public static void main(String[] args) throws URISyntaxException {
  SBOLDocument doc=new SBOLDocument();
  doc.setDefaultURIprefix(""String_Node_Str"");
  doc.setComplete(true);
  doc.setCreateDefaults(true);
  String version=""String_Node_Str"";
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.RNA);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.COMPLEX);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA).addRole(SequenceOntology.PROMOTER);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  ModuleDefinition CRISPR_Template=doc.createModuleDefinition(""String_Node_Str"",version);
  Interaction Cas9Complex_Formation=CRISPR_Template.createInteraction(""String_Node_Str"",SystemsBiologyOntology.NON_COVALENT_BINDING);
  Cas9Complex_Formation.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.REACTANT);
  Cas9Complex_Formation.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.REACTANT);
  Cas9Complex_Formation.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  Interaction EYFP_production=CRISPR_Template.createInteraction(""String_Node_Str"",SystemsBiologyOntology.GENETIC_PRODUCTION);
  EYFP_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  EYFP_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  Interaction target_generic_gene_inhibition=CRISPR_Template.createInteraction(""String_Node_Str"",SystemsBiologyOntology.INHIBITION);
  target_generic_gene_inhibition.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.INHIBITOR);
  target_generic_gene_inhibition.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  String CRa_U6_seq_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,CRa_U6_seq_elements,Sequence.IUPAC_DNA);
  String gRNA_b_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,gRNA_b_elements,Sequence.IUPAC_DNA);
  String mKate_seq_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,mKate_seq_elements,Sequence.IUPAC_DNA);
  String CRP_b_seq_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,CRP_b_seq_elements,Sequence.IUPAC_DNA);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA).addRole(SequenceOntology.PROMOTER);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA).addRole(SequenceOntology.CDS);
  ComponentDefinition cas9m_BFP_gene=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  cas9m_BFP_gene.addRole(SequenceOntology.PROMOTER);
  cas9m_BFP_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  ComponentDefinition CRa_U6=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  CRa_U6.addRole(SequenceOntology.PROMOTER);
  CRa_U6.addSequence(""String_Node_Str"");
  ComponentDefinition gRNA_b_nc=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  gRNA_b_nc.addRole(SequenceOntology.CDS);
  gRNA_b_nc.addSequence(""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA).addRole(SequenceOntology.TERMINATOR);
  ComponentDefinition gRNA_b_gene=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  gRNA_b_gene.addRole(SequenceOntology.PROMOTER);
  cas9m_BFP_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  cas9m_BFP_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.RNA);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.COMPLEX);
  ComponentDefinition mKate_cds=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  mKate_cds.addRole(SequenceOntology.CDS);
  mKate_cds.addSequence(""String_Node_Str"");
  ComponentDefinition mKate_gene=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  mKate_gene.addRole(SequenceOntology.PROMOTER);
  mKate_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  ComponentDefinition Gal4VP16_cds=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  Gal4VP16_cds.addRole(SequenceOntology.CDS);
  ComponentDefinition Gal4VP16_gene=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  Gal4VP16_gene.addRole(SequenceOntology.PROMOTER);
  Gal4VP16_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  ComponentDefinition CRP_b=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  CRP_b.addRole(SequenceOntology.PROMOTER);
  CRP_b.addSequence(""String_Node_Str"");
  ComponentDefinition EYFP_cds=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  EYFP_cds.addRole(SequenceOntology.CDS);
  ComponentDefinition EYFP_gene=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  EYFP_gene.addRole(SequenceOntology.PROMOTER);
  EYFP_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  ModuleDefinition CRPb_circuit=doc.createModuleDefinition(""String_Node_Str"",version);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  Interaction mKate_production=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.GENETIC_PRODUCTION);
  mKate_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  mKate_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  Interaction GAL4VP16_production=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.GENETIC_PRODUCTION);
  GAL4VP16_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  GAL4VP16_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  Interaction cas9m_BFP_production=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.GENETIC_PRODUCTION);
  cas9m_BFP_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  cas9m_BFP_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  Interaction gRNA_b_production=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.GENETIC_PRODUCTION);
  gRNA_b_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  gRNA_b_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  Interaction EYFP_Activation=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.STIMULATION);
  EYFP_Activation.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.STIMULATOR);
  EYFP_Activation.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  Interaction mKate_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  mKate_deg.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.REACTANT);
  Interaction GAL4VP16_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  GAL4VP16_deg.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.REACTANT);
  Interaction cas9m_BFP_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  cas9m_BFP_deg.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.REACTANT);
  Interaction gRNA_b_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  gRNA_b_deg.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.REACTANT);
  Interaction EYFP_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  EYFP_deg.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.REACTANT);
  Interaction cas9m_BFP_gRNA_b_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  cas9m_BFP_gRNA_b_deg.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.REACTANT);
  Module Template_Module=CRPb_circuit.createModule(""String_Node_Str"",""String_Node_Str"",version);
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  try {
    SBOLWriter.write(doc,System.out);
  }
 catch (  XMLStreamException|FactoryConfigurationError|CoreIoException e) {
    e.printStackTrace();
  }
}","public static void main(String[] args) throws URISyntaxException {
  SBOLDocument doc=new SBOLDocument();
  doc.setDefaultURIprefix(""String_Node_Str"");
  doc.setComplete(true);
  doc.setCreateDefaults(true);
  String version=""String_Node_Str"";
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.RNA);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.COMPLEX);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA).addRole(SequenceOntology.PROMOTER);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  ModuleDefinition CRISPR_Template=doc.createModuleDefinition(""String_Node_Str"",version);
  Interaction Cas9Complex_Formation=CRISPR_Template.createInteraction(""String_Node_Str"",SystemsBiologyOntology.NON_COVALENT_BINDING);
  Cas9Complex_Formation.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.REACTANT);
  Cas9Complex_Formation.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.REACTANT);
  Cas9Complex_Formation.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  Interaction EYFP_production=CRISPR_Template.createInteraction(""String_Node_Str"",SystemsBiologyOntology.GENETIC_PRODUCTION);
  EYFP_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  EYFP_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  Interaction target_generic_gene_inhibition=CRISPR_Template.createInteraction(""String_Node_Str"",SystemsBiologyOntology.INHIBITION);
  target_generic_gene_inhibition.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.INHIBITOR);
  target_generic_gene_inhibition.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  String CRa_U6_seq_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,CRa_U6_seq_elements,Sequence.IUPAC_DNA);
  String gRNA_b_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,gRNA_b_elements,Sequence.IUPAC_DNA);
  String mKate_seq_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,mKate_seq_elements,Sequence.IUPAC_DNA);
  String CRP_b_seq_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,CRP_b_seq_elements,Sequence.IUPAC_DNA);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA).addRole(SequenceOntology.PROMOTER);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA).addRole(SequenceOntology.CDS);
  ComponentDefinition cas9m_BFP_gene=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  cas9m_BFP_gene.addRole(SequenceOntology.PROMOTER);
  cas9m_BFP_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  ComponentDefinition CRa_U6=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  CRa_U6.addRole(SequenceOntology.PROMOTER);
  CRa_U6.addSequence(""String_Node_Str"");
  ComponentDefinition gRNA_b_nc=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  gRNA_b_nc.addRole(SequenceOntology.CDS);
  gRNA_b_nc.addSequence(""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA).addRole(SequenceOntology.TERMINATOR);
  ComponentDefinition gRNA_b_gene=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  gRNA_b_gene.addRole(SequenceOntology.PROMOTER);
  gRNA_b_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  gRNA_b_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.RNA);
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.COMPLEX);
  ComponentDefinition mKate_cds=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  mKate_cds.addRole(SequenceOntology.CDS);
  mKate_cds.addSequence(""String_Node_Str"");
  ComponentDefinition mKate_gene=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  mKate_gene.addRole(SequenceOntology.PROMOTER);
  mKate_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  ComponentDefinition Gal4VP16_cds=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  Gal4VP16_cds.addRole(SequenceOntology.CDS);
  ComponentDefinition Gal4VP16_gene=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  Gal4VP16_gene.addRole(SequenceOntology.PROMOTER);
  Gal4VP16_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  ComponentDefinition CRP_b=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  CRP_b.addRole(SequenceOntology.PROMOTER);
  CRP_b.addSequence(""String_Node_Str"");
  ComponentDefinition EYFP_cds=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  EYFP_cds.addRole(SequenceOntology.CDS);
  ComponentDefinition EYFP_gene=doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.DNA);
  EYFP_gene.addRole(SequenceOntology.PROMOTER);
  EYFP_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ComponentDefinition.PROTEIN);
  ModuleDefinition CRPb_circuit=doc.createModuleDefinition(""String_Node_Str"",version);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRPb_circuit.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  Interaction mKate_production=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.GENETIC_PRODUCTION);
  mKate_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  mKate_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  Interaction GAL4VP16_production=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.GENETIC_PRODUCTION);
  GAL4VP16_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  GAL4VP16_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  Interaction cas9m_BFP_production=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.GENETIC_PRODUCTION);
  cas9m_BFP_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  cas9m_BFP_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  Interaction gRNA_b_production=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.GENETIC_PRODUCTION);
  gRNA_b_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  gRNA_b_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  Interaction EYFP_Activation=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.STIMULATION);
  EYFP_Activation.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.STIMULATOR);
  EYFP_Activation.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  Interaction mKate_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  mKate_deg.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.REACTANT);
  Interaction GAL4VP16_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  GAL4VP16_deg.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.REACTANT);
  Interaction cas9m_BFP_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  cas9m_BFP_deg.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.REACTANT);
  Interaction gRNA_b_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  gRNA_b_deg.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.REACTANT);
  Interaction EYFP_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  EYFP_deg.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.REACTANT);
  Interaction cas9m_BFP_gRNA_b_deg=CRPb_circuit.createInteraction(""String_Node_Str"",SystemsBiologyOntology.DEGRADATION);
  cas9m_BFP_gRNA_b_deg.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.REACTANT);
  Module Template_Module=CRPb_circuit.createModule(""String_Node_Str"",""String_Node_Str"",version);
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  try {
    SBOLWriter.write(doc,System.out);
  }
 catch (  XMLStreamException|FactoryConfigurationError|CoreIoException e) {
    e.printStackTrace();
  }
}",0.9987893462469734
12610,"public static void validateSBOL(SBOLDocument sbolDocument,boolean complete,boolean compliant,boolean bestPractice){
  clearErrors();
  validateSequenceEncodings(sbolDocument);
  validateWasDerivedFromVersion(sbolDocument);
  validateCircularReferences(sbolDocument);
  validateURIuniqueness(sbolDocument);
  if (compliant)   validateCompliance(sbolDocument);
  if (complete)   validateCompleteness(sbolDocument);
  if (bestPractice)   validateOntologyUsage(sbolDocument);
}","public static void validateSBOL(SBOLDocument sbolDocument,boolean complete,boolean compliant,boolean bestPractice){
  clearErrors();
  validateSequenceEncodings(sbolDocument);
  validateWasDerivedFromVersion(sbolDocument);
  validateCircularReferences(sbolDocument);
  validateURIuniqueness(sbolDocument);
  if (compliant)   validateCompliance(sbolDocument);
  if (complete)   validateCompleteness(sbolDocument);
  if (bestPractice) {
    validateOntologyUsage(sbolDocument);
    validateSequenceAnnotations(sbolDocument);
  }
}",0.945054945054945
12611,"/** 
 * Creates a Range instance with the given arguments and then adds to this SequenceAnnotation object's list of locations. <p> This method creates the Range instance's identity URI with the persistent identity of this SequenceAnnotation object, the given   {@code displayId} of the Range instance. The orientation propertyof the created Range instance is set to the given  {@code orientation}.
 * @param displayId
 * @param start
 * @param end
 * @param orientation
 */
public void addRange(String displayId,int start,int end,OrientationType orientation){
  URI identity=createCompliantURI(this.getPersistentIdentity().toString(),displayId,this.getVersion());
  Range range=new Range(identity,start,end);
  range.setOrientation(orientation);
  addLocation(range);
}","/** 
 * Creates a Range instance with the given arguments and then adds to this SequenceAnnotation object's list of locations. <p> This method creates the Range instance's identity URI with the persistent identity of this SequenceAnnotation object, the given   {@code displayId} of the Range instance. The orientation propertyof the created Range instance is set to the given  {@code orientation}.
 * @param displayId
 * @param start
 * @param end
 * @param orientation
 */
public void addRange(String displayId,int start,int end,OrientationType orientation){
  URI identity=createCompliantURI(this.getPersistentIdentity().toString(),displayId,this.getVersion());
  Range range=new Range(identity,start,end);
  range.setPersistentIdentity(createCompliantURI(this.getPersistentIdentity().toString(),displayId,""String_Node_Str""));
  range.setDisplayId(displayId);
  range.setVersion(this.getVersion());
  range.setOrientation(orientation);
  addLocation(range);
}",0.8890173410404625
12612,"/** 
 * Creates a Cut instance with the given arguments and then adds to this SequenceAnnotation object's list of locations. <p> This method creates the Cut instance's identity URI with the persistent identity of this SequenceAnnotation object, the given   {@code displayId} of the Cut instance. The orientation propertyof the created Cut instance is set to the given  {@code orientation}.
 * @param displayId
 * @param at
 * @param orientation
 */
public void addCut(String displayId,int at,OrientationType orientation){
  URI identity=createCompliantURI(this.getPersistentIdentity().toString(),displayId,this.getVersion());
  Cut cut=new Cut(identity,at);
  cut.setOrientation(orientation);
  addLocation(cut);
}","/** 
 * Creates a Cut instance with the given arguments and then adds to this SequenceAnnotation object's list of locations. <p> This method creates the Cut instance's identity URI with the persistent identity of this SequenceAnnotation object, the given   {@code displayId} of the Cut instance. The orientation propertyof the created Cut instance is set to the given  {@code orientation}.
 * @param displayId
 * @param at
 * @param orientation
 */
public void addCut(String displayId,int at,OrientationType orientation){
  URI identity=createCompliantURI(this.getPersistentIdentity().toString(),displayId,this.getVersion());
  Cut cut=new Cut(identity,at);
  cut.setPersistentIdentity(createCompliantURI(this.getPersistentIdentity().toString(),displayId,""String_Node_Str""));
  cut.setDisplayId(displayId);
  cut.setVersion(this.getVersion());
  cut.setOrientation(orientation);
  addLocation(cut);
}",0.8847583643122676
12613,"/** 
 * Creates a GenericLocation instance with the given arguments and then adds to this SequenceAnnotation object's list of locations. <p> This method creates the GenericLocation instance's identity URI with the persistent identity of this SequenceAnnotation object, the given   {@code displayId} of the GenericLocation instance. The orientation property of the created GenericLocation instance is set to the given  {@code orientation}.
 * @param displayId
 * @param orientation
 */
public void addGenericLocation(String displayId,OrientationType orientation){
  URI identity=createCompliantURI(this.getPersistentIdentity().toString(),displayId,this.getVersion());
  GenericLocation genericLocation=new GenericLocation(identity);
  genericLocation.setOrientation(orientation);
  addLocation(genericLocation);
}","/** 
 * Creates a GenericLocation instance with the given arguments and then adds to this SequenceAnnotation object's list of locations. <p> This method creates the GenericLocation instance's identity URI with the persistent identity of this SequenceAnnotation object, the given   {@code displayId} of the GenericLocation instance. The orientation property of the created GenericLocation instance is set to the given  {@code orientation}.
 * @param displayId
 * @param orientation
 */
public void addGenericLocation(String displayId,OrientationType orientation){
  URI identity=createCompliantURI(this.getPersistentIdentity().toString(),displayId,this.getVersion());
  GenericLocation genericLocation=new GenericLocation(identity);
  genericLocation.setPersistentIdentity(createCompliantURI(this.getPersistentIdentity().toString(),displayId,""String_Node_Str""));
  genericLocation.setDisplayId(displayId);
  genericLocation.setVersion(this.getVersion());
  genericLocation.setOrientation(orientation);
  addLocation(genericLocation);
}",0.8797399783315276
12614,"/** 
 * Top level types
 */
public static void main(String[] args) throws XMLStreamException, FactoryConfigurationError, CoreIoException {
  SBOLDocument doc=new SBOLDocument();
  doc.createCollection(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  doc.createCollection(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  get_myParts(SBOL2Doc_test);
}","/** 
 * Top level types
 */
public static void main(String[] args) throws XMLStreamException, FactoryConfigurationError, CoreIoException {
  get_myParts(sbolDocument);
  ComponentDefinition cd=sbolDocument.getComponentDefinition(""String_Node_Str"",""String_Node_Str"");
  SequenceAnnotation sa=cd.getSequenceAnnotation(""String_Node_Str"");
  sa.addCut(""String_Node_Str"",12);
  SBOLValidate.validateSBOL(sbolDocument,true,true,true);
  if (SBOLValidate.getNumErrors() > 0) {
    for (    String error : SBOLValidate.getErrors()) {
      System.out.println(error);
    }
  }
}",0.3649946638207044
12615,"/** 
 * Sets the reference component URI to the given   {@code componentURI}. <p> If this SequenceAnnotation object belongs to an SBOLDocument instance, then the SBOLDcouement instance is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited.
 * @param componentURI
 * @throws SBOLValidationException if the associated SBOLDocument is not compliant
 * @throws IllegalArgumentException if the associated ComponentDefinition object is not {@code null}, and the given   {@code componentURI} does not exist in its associated ComponentDefinition object'slist of Component instances.
 */
public void setComponent(URI componentURI){
  if (sbolDocument != null)   sbolDocument.checkReadOnly();
  if (componentDefinition != null) {
    if (componentDefinition.getComponent(componentURI) == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + componentURI + ""String_Node_Str"");
    }
    for (    SequenceAnnotation sa : componentDefinition.getSequenceAnnotations()) {
      if (sa.isSetComponent() && sa.getComponentURI().equals(componentURI)) {
        throw new SBOLValidationException(""String_Node_Str"");
      }
    }
  }
  this.component=componentURI;
}","/** 
 * Sets the reference component URI to the given   {@code componentURI}. <p> If this SequenceAnnotation object belongs to an SBOLDocument instance, then the SBOLDcouement instance is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited.
 * @param componentURI
 * @throws SBOLValidationException if the associated SBOLDocument is not compliant
 * @throws IllegalArgumentException if the associated ComponentDefinition object is not {@code null}, and the given   {@code componentURI} does not exist in its associated ComponentDefinition object'slist of Component instances.
 */
public void setComponent(URI componentURI){
  if (sbolDocument != null)   sbolDocument.checkReadOnly();
  if (componentDefinition != null) {
    if (componentDefinition.getComponent(componentURI) == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + componentURI + ""String_Node_Str"");
    }
    for (    SequenceAnnotation sa : componentDefinition.getSequenceAnnotations()) {
      if (sa.getIdentity().equals(this.getIdentity()))       continue;
      if (sa.isSetComponent() && sa.getComponentURI().equals(componentURI)) {
        throw new SBOLValidationException(""String_Node_Str"");
      }
    }
  }
  this.component=componentURI;
}",0.9713825070536074
12616,"private static Sequence parseSequences(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel){
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  String elements=null;
  URI encoding=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Sequence.elements)) {
      elements=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Sequence.encoding)) {
      encoding=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Sequence sequence=new Sequence(topLevel.getIdentity(),elements,encoding);
  if (persistentIdentity != null)   sequence.setPersistentIdentity(persistentIdentity);
  if (version != null)   sequence.setVersion(version);
  if (displayId != null)   sequence.setDisplayId(displayId);
  if (name != null)   sequence.setName(name);
  if (description != null)   sequence.setDescription(description);
  if (wasDerivedFrom != null)   sequence.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   sequence.setAnnotations(annotations);
  Sequence oldS=SBOLDoc.getSequence(topLevel.getIdentity());
  if (oldS == null) {
    SBOLDoc.addSequence(sequence);
  }
 else {
    if (!sequence.equals(oldS)) {
      throw new SBOLValidationException(""String_Node_Str"" + topLevel.getIdentity());
    }
  }
  return sequence;
}","private static Sequence parseSequences(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel){
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  String elements=null;
  URI encoding=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Sequence.elements)) {
      elements=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Sequence.encoding)) {
      encoding=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
      if (encoding.toString().equals(""String_Node_Str"")) {
        encoding=Sequence.IUPAC_DNA;
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Sequence sequence=new Sequence(topLevel.getIdentity(),elements,encoding);
  if (persistentIdentity != null)   sequence.setPersistentIdentity(persistentIdentity);
  if (version != null)   sequence.setVersion(version);
  if (displayId != null)   sequence.setDisplayId(displayId);
  if (name != null)   sequence.setName(name);
  if (description != null)   sequence.setDescription(description);
  if (wasDerivedFrom != null)   sequence.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   sequence.setAnnotations(annotations);
  Sequence oldS=SBOLDoc.getSequence(topLevel.getIdentity());
  if (oldS == null) {
    SBOLDoc.addSequence(sequence);
  }
 else {
    if (!sequence.equals(oldS)) {
      throw new SBOLValidationException(""String_Node_Str"" + topLevel.getIdentity());
    }
  }
  return sequence;
}",0.9811046511627908
12617,"private static Sequence parseDnaSequenceV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel){
  String elements=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI identity=topLevel.getIdentity();
  URI persistentIdentity=topLevel.getIdentity();
  URI encoding=Sbol2Terms.SequenceURI.DnaSequenceV1;
  List<Annotation> annotations=new ArrayList<>();
  if (URIPrefix != null) {
    displayId=findDisplayId(topLevel.getIdentity().toString());
    identity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,version,typesInURI);
    persistentIdentity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,""String_Node_Str"",typesInURI);
  }
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNASequence.nucleotides)) {
      elements=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      if (URIPrefix != null) {
        identity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,version,typesInURI);
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Sequence sequence=new Sequence(identity,elements,encoding);
  if (persistentIdentity != null) {
    sequence.setPersistentIdentity(persistentIdentity);
    sequence.setVersion(version);
  }
  if (identity != topLevel.getIdentity())   sequence.setWasDerivedFrom(topLevel.getIdentity());
  if (displayId != null)   sequence.setDisplayId(displayId);
  if (name != null)   sequence.setName(name);
  if (description != null)   sequence.setDescription(description);
  if (!annotations.isEmpty())   sequence.setAnnotations(annotations);
  Sequence oldS=SBOLDoc.getSequence(identity);
  if (oldS == null) {
    SBOLDoc.addSequence(sequence);
  }
 else   if (sequence.isSetWasDerivedFrom() && oldS.isSetWasDerivedFrom() && !sequence.getWasDerivedFrom().equals(oldS.getWasDerivedFrom())) {
    Set<TopLevel> topLevels=SBOLDoc.getByWasDerivedFrom(sequence.getWasDerivedFrom());
    for (    TopLevel top : topLevels) {
      if (top instanceof Sequence) {
        return (Sequence)top;
      }
    }
    do {
      displayId=displayId + ""String_Node_Str"";
      identity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,version,typesInURI);
      persistentIdentity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,""String_Node_Str"",typesInURI);
    }
 while (SBOLDoc.getSequence(identity) != null);
    sequence.setIdentity(identity);
    sequence.setDisplayId(displayId);
    sequence.setPersistentIdentity(persistentIdentity);
    SBOLDoc.addSequence(sequence);
  }
 else   if (dropObjectsWithDuplicateURIs) {
    return oldS;
  }
 else {
    if (!sequence.equals(oldS)) {
      throw new SBOLValidationException(""String_Node_Str"" + identity);
    }
  }
  return sequence;
}","private static Sequence parseDnaSequenceV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel){
  String elements=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI identity=topLevel.getIdentity();
  URI persistentIdentity=topLevel.getIdentity();
  URI encoding=Sequence.IUPAC_DNA;
  List<Annotation> annotations=new ArrayList<>();
  if (URIPrefix != null) {
    displayId=findDisplayId(topLevel.getIdentity().toString());
    identity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,version,typesInURI);
    persistentIdentity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,""String_Node_Str"",typesInURI);
  }
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNASequence.nucleotides)) {
      elements=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      if (URIPrefix != null) {
        identity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,version,typesInURI);
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Sequence sequence=new Sequence(identity,elements,encoding);
  if (persistentIdentity != null) {
    sequence.setPersistentIdentity(persistentIdentity);
    sequence.setVersion(version);
  }
  if (identity != topLevel.getIdentity())   sequence.setWasDerivedFrom(topLevel.getIdentity());
  if (displayId != null)   sequence.setDisplayId(displayId);
  if (name != null)   sequence.setName(name);
  if (description != null)   sequence.setDescription(description);
  if (!annotations.isEmpty())   sequence.setAnnotations(annotations);
  Sequence oldS=SBOLDoc.getSequence(identity);
  if (oldS == null) {
    SBOLDoc.addSequence(sequence);
  }
 else   if (sequence.isSetWasDerivedFrom() && oldS.isSetWasDerivedFrom() && !sequence.getWasDerivedFrom().equals(oldS.getWasDerivedFrom())) {
    Set<TopLevel> topLevels=SBOLDoc.getByWasDerivedFrom(sequence.getWasDerivedFrom());
    for (    TopLevel top : topLevels) {
      if (top instanceof Sequence) {
        return (Sequence)top;
      }
    }
    do {
      displayId=displayId + ""String_Node_Str"";
      identity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,version,typesInURI);
      persistentIdentity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,""String_Node_Str"",typesInURI);
    }
 while (SBOLDoc.getSequence(identity) != null);
    sequence.setIdentity(identity);
    sequence.setDisplayId(displayId);
    sequence.setPersistentIdentity(persistentIdentity);
    SBOLDoc.addSequence(sequence);
  }
 else   if (dropObjectsWithDuplicateURIs) {
    return oldS;
  }
 else {
    if (!sequence.equals(oldS)) {
      throw new SBOLValidationException(""String_Node_Str"" + identity);
    }
  }
  return sequence;
}",0.9927470534904804
12618,"static URI convertSeqOntologyV1(String term){
  String v1SO=""String_Node_Str"";
  String v2SO=""String_Node_Str"";
  String convertedSO=term;
  if (term.startsWith(v1SO)) {
    convertedSO=convertedSO.replace(v1SO,v2SO);
    return URI.create(convertedSO);
  }
  return URI.create(convertedSO);
}","static URI convertSeqOntologyV1(String term){
  String v1SO=""String_Node_Str"";
  String v2SO=""String_Node_Str"";
  String convertedSO=term;
  if (term.startsWith(v1SO)) {
    convertedSO=convertedSO.replace(v1SO,v2SO);
    return URI.create(convertedSO);
  }
 else   if (term.startsWith(""String_Node_Str"")) {
    convertedSO=convertedSO.replace(""String_Node_Str"",v2SO);
  }
 else   if (term.startsWith(""String_Node_Str"")) {
    convertedSO=convertedSO.replace(""String_Node_Str"",v2SO);
  }
  return URI.create(convertedSO);
}",0.7181372549019608
12619,"@Test public void test_singleComponentDefinition() throws Exception {
  SBOLDocument document=new SBOLDocument();
  document.setComplete(true);
  document.setDefaultURIprefix(""String_Node_Str"");
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  Set<URI> type=SBOLTestUtils.getSetPropertyURI(""String_Node_Str"");
  Set<URI> role=SBOLTestUtils.getSetPropertyURI(""String_Node_Str"");
  ComponentDefinition pLac=document.createComponentDefinition(""String_Node_Str"",VERSION_1_0,type);
  pLac.setRoles(role);
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}","@Test public void test_singleComponentDefinition() throws Exception {
  SBOLDocument document=new SBOLDocument();
  document.setComplete(true);
  document.setDefaultURIprefix(""String_Node_Str"");
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  Set<URI> type=new HashSet<URI>();
  type.add(ComponentDefinition.DNA);
  Set<URI> role=new HashSet<URI>();
  role.add(SequenceOntology.PROMOTER);
  ComponentDefinition pLac=document.createComponentDefinition(""String_Node_Str"",VERSION_1_0,type);
  pLac.setRoles(role);
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}",0.8451519536903039
12620,"@Test public void test_CreateAndRemoveModel() throws Exception {
  SBOLDocument document=new SBOLDocument();
  document.setComplete(true);
  document.setDefaultURIprefix(""String_Node_Str"");
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  Sequence s=document.createSequence(""String_Node_Str"",VERSION_1_0,""String_Node_Str"",URI.create(""String_Node_Str""));
  document.removeSequence(s);
  for (int i=1; i < 4; i++) {
    document.createCollection(""String_Node_Str"" + i,VERSION_1_0);
  }
  document.clearSequences();
  document.createSequence(""String_Node_Str"",VERSION_1_0,""String_Node_Str"",URI.create(""String_Node_Str""));
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}","@Test public void test_CreateAndRemoveModel() throws Exception {
  SBOLDocument document=new SBOLDocument();
  document.setComplete(true);
  document.setDefaultURIprefix(""String_Node_Str"");
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  Sequence s=document.createSequence(""String_Node_Str"",VERSION_1_0,""String_Node_Str"",Sequence.IUPAC_DNA);
  document.removeSequence(s);
  for (int i=1; i < 4; i++) {
    document.createCollection(""String_Node_Str"" + i,VERSION_1_0);
  }
  document.clearSequences();
  document.createSequence(""String_Node_Str"",VERSION_1_0,""String_Node_Str"",Sequence.IUPAC_DNA);
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}",0.9432534678436316
12621,"@Test public void test_memberAnnotations() throws Exception {
  SBOLDocument document=new SBOLDocument();
  document.setComplete(true);
  document.setDefaultURIprefix(""String_Node_Str"");
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  String id=""String_Node_Str"";
  URI source=URI.create(id + ""String_Node_Str"");
  URI language=URI.create(id + ""String_Node_Str"");
  URI framework=URI.create(id + ""String_Node_Str"");
  Collection myParts=document.createCollection(""String_Node_Str"",VERSION_1_0);
  myParts.addAnnotation(new Annotation(NamedProperty(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")));
  Model someModel=document.createModel(id,VERSION_1_0,source,language,framework);
  someModel.addAnnotation(new Annotation(NamedProperty(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")));
  ModuleDefinition someModDef=document.createModuleDefinition(""String_Node_Str"",VERSION_1_0);
  someModDef.addAnnotation(new Annotation(NamedProperty(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")));
  Set<URI> interactionType=new HashSet<URI>();
  interactionType.add(URI.create(""String_Node_Str""));
  Interaction someInteraction=someModDef.createInteraction(""String_Node_Str"",interactionType);
  Module someModule=someModDef.createModule(""String_Node_Str"",""String_Node_Str"",VERSION_1_0);
  String someMapsTo_id=""String_Node_Str"";
  String seq_id=""String_Node_Str"";
  Sequence someSeq=document.createSequence(seq_id,VERSION_1_0,seq_id + ""String_Node_Str"",URI.create(""String_Node_Str""));
  someSeq.addAnnotation(new Annotation(NamedProperty(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")));
  Set<URI> types=new HashSet<URI>();
  types.add(URI.create(""String_Node_Str""));
  ComponentDefinition someCompDef=document.createComponentDefinition(""String_Node_Str"",VERSION_1_0,types);
  someCompDef.addAnnotation(new Annotation(NamedProperty(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")));
  Component someComponent=someCompDef.createComponent(""String_Node_Str"",AccessType.PUBLIC,""String_Node_Str"",VERSION_1_0);
  someComponent.addAnnotation(new Annotation(NamedProperty(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")));
  SequenceAnnotation someSequenceAnnotation=someCompDef.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"",1,10);
  someSequenceAnnotation.addAnnotation(new Annotation(NamedProperty(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")));
  SequenceAnnotation someSequenceAnnotation2=someCompDef.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"",1,OrientationType.INLINE);
  SequenceConstraint someSequenceConstraint=someCompDef.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  someSequenceConstraint.addAnnotation(new Annotation(NamedProperty(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")));
  GenericTopLevel someGenericTopLevel=document.createGenericTopLevel(""String_Node_Str"",VERSION_1_0,new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  someGenericTopLevel.addAnnotation(new Annotation(NamedProperty(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")));
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}","@Test public void test_memberAnnotations() throws Exception {
  SBOLDocument document=new SBOLDocument();
  document.setComplete(true);
  document.setDefaultURIprefix(""String_Node_Str"");
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  String id=""String_Node_Str"";
  URI source=URI.create(id + ""String_Node_Str"");
  Collection myParts=document.createCollection(""String_Node_Str"",VERSION_1_0);
  myParts.addAnnotation(new Annotation(NamedProperty(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")));
  Model someModel=document.createModel(id,VERSION_1_0,source,Model.SBML,SystemsBiologyOntology.CONTINUOUS_FRAMEWORK);
  someModel.addAnnotation(new Annotation(NamedProperty(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")));
  ModuleDefinition someModDef=document.createModuleDefinition(""String_Node_Str"",VERSION_1_0);
  someModDef.addAnnotation(new Annotation(NamedProperty(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")));
  Set<URI> interactionType=new HashSet<URI>();
  interactionType.add(SystemsBiologyOntology.NON_COVALENT_BINDING);
  Interaction someInteraction=someModDef.createInteraction(""String_Node_Str"",interactionType);
  Module someModule=someModDef.createModule(""String_Node_Str"",""String_Node_Str"",VERSION_1_0);
  String someMapsTo_id=""String_Node_Str"";
  String seq_id=""String_Node_Str"";
  Sequence someSeq=document.createSequence(seq_id,VERSION_1_0,seq_id + ""String_Node_Str"",Sequence.IUPAC_DNA);
  someSeq.addAnnotation(new Annotation(NamedProperty(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")));
  Set<URI> types=new HashSet<URI>();
  types.add(ComponentDefinition.DNA);
  ComponentDefinition someCompDef=document.createComponentDefinition(""String_Node_Str"",VERSION_1_0,types);
  someCompDef.addAnnotation(new Annotation(NamedProperty(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")));
  someCompDef.addRole(SequenceOntology.PROMOTER);
  Component someComponent=someCompDef.createComponent(""String_Node_Str"",AccessType.PUBLIC,""String_Node_Str"",VERSION_1_0);
  someComponent.addAnnotation(new Annotation(NamedProperty(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")));
  SequenceAnnotation someSequenceAnnotation=someCompDef.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"",1,10);
  someSequenceAnnotation.addAnnotation(new Annotation(NamedProperty(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")));
  SequenceAnnotation someSequenceAnnotation2=someCompDef.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"",1,OrientationType.INLINE);
  SequenceConstraint someSequenceConstraint=someCompDef.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  someSequenceConstraint.addAnnotation(new Annotation(NamedProperty(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")));
  GenericTopLevel someGenericTopLevel=document.createGenericTopLevel(""String_Node_Str"",VERSION_1_0,new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  someGenericTopLevel.addAnnotation(new Annotation(NamedProperty(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")));
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}",0.9452093284630514
12622,"@Test public void test_Model_remove() throws Exception {
  String prURI=""String_Node_Str"";
  String prPrefix=""String_Node_Str"";
  SBOLDocument document=new SBOLDocument();
  document.setDefaultURIprefix(prURI);
  document.setTypesInURIs(true);
  document.addNamespace(URI.create(prURI),prPrefix);
  String M1_ID=""String_Node_Str"";
  String M1_Version=""String_Node_Str"";
  String M1_Source=""String_Node_Str"";
  String M1_Language=""String_Node_Str"";
  String M1_Framework=""String_Node_Str"";
  URI M1_URISource=URI.create(M1_Source);
  URI M1_URILanguage=URI.create(M1_Language);
  URI M1_URI_Framework=URI.create(M1_Framework);
  Model M1=document.createModel(M1_ID,M1_Version,M1_URISource,M1_URILanguage,M1_URI_Framework);
  document.removeModel(M1);
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}","@Test public void test_Model_remove() throws Exception {
  String prURI=""String_Node_Str"";
  String prPrefix=""String_Node_Str"";
  SBOLDocument document=new SBOLDocument();
  document.setDefaultURIprefix(prURI);
  document.setTypesInURIs(true);
  document.addNamespace(URI.create(prURI),prPrefix);
  String M1_ID=""String_Node_Str"";
  String M1_Version=""String_Node_Str"";
  String M1_Source=""String_Node_Str"";
  URI M1_URISource=URI.create(M1_Source);
  Model M1=document.createModel(M1_ID,M1_Version,M1_URISource,Model.SBML,SystemsBiologyOntology.CONTINUOUS_FRAMEWORK);
  document.removeModel(M1);
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}",0.7792207792207793
12623,"@Test public void test_singleModel() throws Exception {
  SBOLDocument document=new SBOLDocument();
  document.setComplete(true);
  document.setDefaultURIprefix(""String_Node_Str"");
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  String id=""String_Node_Str"";
  document.createModel(id,VERSION_1_0,URI.create(id + ""String_Node_Str""),URI.create(id + ""String_Node_Str""),URI.create(id + ""String_Node_Str""));
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}","@Test public void test_singleModel() throws Exception {
  SBOLDocument document=new SBOLDocument();
  document.setComplete(true);
  document.setDefaultURIprefix(""String_Node_Str"");
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  String id=""String_Node_Str"";
  document.createModel(id,VERSION_1_0,URI.create(id + ""String_Node_Str""),Model.SBML,SystemsBiologyOntology.CONTINUOUS_FRAMEWORK);
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}",0.8993981083404987
12624,"@Test public void test_CreateAndRemoveComponentDefintion() throws Exception {
  SBOLDocument document=new SBOLDocument();
  document.setComplete(true);
  document.setDefaultURIprefix(""String_Node_Str"");
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  Set<URI> types=new HashSet<URI>();
  types.add((URI.create(""String_Node_Str"")));
  ComponentDefinition cd=document.createComponentDefinition(""String_Node_Str"",VERSION_1_0,types);
  document.removeComponentDefinition(cd);
  for (int i=1; i < 4; i++) {
    document.createComponentDefinition(""String_Node_Str"" + i,VERSION_1_0,types);
  }
  document.clearComponentDefinitions();
  document.createComponentDefinition(""String_Node_Str"",VERSION_1_0,types);
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}","@Test public void test_CreateAndRemoveComponentDefintion() throws Exception {
  SBOLDocument document=new SBOLDocument();
  document.setComplete(true);
  document.setDefaultURIprefix(""String_Node_Str"");
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  Set<URI> types=new HashSet<URI>();
  types.add(ComponentDefinition.PROTEIN);
  ComponentDefinition cd=document.createComponentDefinition(""String_Node_Str"",VERSION_1_0,types);
  document.removeComponentDefinition(cd);
  for (int i=1; i < 4; i++) {
    document.createComponentDefinition(""String_Node_Str"" + i,VERSION_1_0,types);
  }
  document.clearComponentDefinitions();
  document.createComponentDefinition(""String_Node_Str"",VERSION_1_0,types);
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}",0.9695259593679458
12625,"@Test public void test_singleFunctionalComponent() throws Exception {
  SBOLDocument document=new SBOLDocument();
  document.setComplete(true);
  document.setDefaultURIprefix(""String_Node_Str"");
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  Set<URI> type=SBOLTestUtils.getSetPropertyURI(""String_Node_Str"");
  Set<URI> role=SBOLTestUtils.getSetPropertyURI(""String_Node_Str"");
  ComponentDefinition LacIIn=document.createComponentDefinition(""String_Node_Str"",VERSION_1_0,type);
  String compDef_id=LacIIn.getDisplayId();
  LacIIn.createComponent(""String_Node_Str"",AccessType.PUBLIC,compDef_id,VERSION_1_0);
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}","@Test public void test_singleFunctionalComponent() throws Exception {
  SBOLDocument document=new SBOLDocument();
  document.setComplete(true);
  document.setDefaultURIprefix(""String_Node_Str"");
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  Set<URI> type=new HashSet<URI>();
  type.add(ComponentDefinition.PROTEIN);
  ComponentDefinition LacIIn=document.createComponentDefinition(""String_Node_Str"",VERSION_1_0,type);
  String compDef_id=LacIIn.getDisplayId();
  LacIIn.createComponent(""String_Node_Str"",AccessType.PUBLIC,compDef_id,VERSION_1_0);
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}",0.8984937786509496
12626,"@Test public void test_multipleSquences() throws Exception {
  SBOLDocument document=new SBOLDocument();
  document.setComplete(true);
  document.setDefaultURIprefix(""String_Node_Str"");
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  String id=""String_Node_Str"";
  String id2=""String_Node_Str"";
  String id3=""String_Node_Str"";
  document.createSequence(id,VERSION_1_0,id + ""String_Node_Str"",URI.create(id + ""String_Node_Str""));
  document.createSequence(id2,VERSION_1_0,id2 + ""String_Node_Str"",URI.create(id2 + ""String_Node_Str""));
  document.createSequence(id3,VERSION_1_0,id3 + ""String_Node_Str"",URI.create(id3 + ""String_Node_Str""));
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}","@Test public void test_multipleSquences() throws Exception {
  SBOLDocument document=new SBOLDocument();
  document.setComplete(true);
  document.setDefaultURIprefix(""String_Node_Str"");
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  String id=""String_Node_Str"";
  String id2=""String_Node_Str"";
  String id3=""String_Node_Str"";
  document.createSequence(id,VERSION_1_0,id + ""String_Node_Str"",Sequence.IUPAC_DNA);
  document.createSequence(id2,VERSION_1_0,id2 + ""String_Node_Str"",Sequence.IUPAC_DNA);
  document.createSequence(id3,VERSION_1_0,id3 + ""String_Node_Str"",Sequence.IUPAC_DNA);
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}",0.904642409033877
12627,"@Test public void test_ComponentDefinitionOutput() throws Exception {
  String prURI=""String_Node_Str"";
  String prPrefix=""String_Node_Str"";
  SBOLDocument document=new SBOLDocument();
  document.setTypesInURIs(true);
  document.addNamespace(URI.create(prURI),prPrefix);
  document.setDefaultURIprefix(prURI);
  Sequence seqpTetR=document.createSequence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",URI.create(""String_Node_Str""));
  Sequence seqRbs=document.createSequence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",URI.create(""String_Node_Str""));
  Sequence seqCds=document.createSequence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",URI.create(""String_Node_Str""));
  Sequence seqTer=document.createSequence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",URI.create(""String_Node_Str""));
  Sequence seqPluxR=document.createSequence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",URI.create(""String_Node_Str""));
  ComponentDefinition pTetR=document.createComponentDefinition(""String_Node_Str"",""String_Node_Str"",new HashSet<URI>(Arrays.asList(ComponentDefinition.DNA)));
  pTetR.addRole(SequenceOntology.PROMOTER);
  pTetR.setName(""String_Node_Str"");
  pTetR.setDescription(""String_Node_Str"");
  pTetR.addSequence(seqpTetR.getIdentity());
  ComponentDefinition rbs=document.createComponentDefinition(""String_Node_Str"",""String_Node_Str"",new HashSet<URI>(Arrays.asList(ComponentDefinition.DNA)));
  rbs.addRole(SequenceOntology.RIBOSOME_ENTRY_SITE);
  rbs.setName(""String_Node_Str"");
  rbs.setDescription(""String_Node_Str"");
  rbs.addSequence(seqRbs.getIdentity());
  ComponentDefinition cds=document.createComponentDefinition(""String_Node_Str"",""String_Node_Str"",new HashSet<URI>(Arrays.asList(ComponentDefinition.DNA)));
  cds.addRole(SequenceOntology.CDS);
  cds.setName(""String_Node_Str"");
  cds.setDescription(""String_Node_Str"");
  cds.addSequence(seqCds.getIdentity());
  ComponentDefinition ter=document.createComponentDefinition(""String_Node_Str"",""String_Node_Str"",new HashSet<URI>(Arrays.asList(ComponentDefinition.DNA)));
  ter.addRole(URI.create(""String_Node_Str""));
  ter.setName(""String_Node_Str"");
  ter.setDescription(""String_Node_Str"");
  ter.addSequence(seqTer.getIdentity());
  ComponentDefinition pluxR=document.createComponentDefinition(""String_Node_Str"",""String_Node_Str"",new HashSet<URI>(Arrays.asList(ComponentDefinition.DNA)));
  pluxR.addRole(SequenceOntology.PROMOTER);
  pluxR.setName(""String_Node_Str"");
  pluxR.setDescription(""String_Node_Str"");
  pluxR.addSequence(seqPluxR.getIdentity());
  ComponentDefinition device=document.createComponentDefinition(""String_Node_Str"",""String_Node_Str"",new HashSet<URI>(Arrays.asList(ComponentDefinition.DNA)));
  device.addRole(URI.create(""String_Node_Str""));
  device.setName(""String_Node_Str"");
  device.setDescription(""String_Node_Str"");
  Component comPtetR=device.createComponent(""String_Node_Str"",AccessType.PUBLIC,pTetR.getIdentity());
  Component comRbs=device.createComponent(""String_Node_Str"",AccessType.PUBLIC,cds.getIdentity());
  Component comCds=device.createComponent(""String_Node_Str"",AccessType.PUBLIC,rbs.getIdentity());
  Component comTer=device.createComponent(""String_Node_Str"",AccessType.PUBLIC,ter.getIdentity());
  Component comPluxR=device.createComponent(""String_Node_Str"",AccessType.PUBLIC,pluxR.getIdentity());
  int start=1;
  int end=seqPluxR.getElements().length();
  SequenceAnnotation anno=device.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"",start,end,OrientationType.INLINE);
  anno.setComponent(comPtetR.getIdentity());
  start=end + 1;
  end=seqRbs.getElements().length() + end + 1;
  SequenceAnnotation anno2=device.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"",start,end,OrientationType.INLINE);
  anno2.setComponent(comRbs.getIdentity());
  start=end + 1;
  end=seqCds.getElements().length() + end + 1;
  SequenceAnnotation anno3=device.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"",start,end,OrientationType.INLINE);
  anno3.setComponent(comCds.getIdentity());
  start=end + 1;
  end=seqTer.getElements().length() + end + 1;
  SequenceAnnotation anno4=device.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"",start,end,OrientationType.INLINE);
  anno4.setComponent(comTer.getIdentity());
  start=end + 1;
  end=seqPluxR.getElements().length() + end + 1;
  SequenceAnnotation anno5=device.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"",start,end,OrientationType.INLINE);
  anno5.setComponent(comPluxR.getIdentity());
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}","@Test public void test_ComponentDefinitionOutput() throws Exception {
  String prURI=""String_Node_Str"";
  String prPrefix=""String_Node_Str"";
  SBOLDocument document=new SBOLDocument();
  document.setTypesInURIs(true);
  document.addNamespace(URI.create(prURI),prPrefix);
  document.setDefaultURIprefix(prURI);
  Sequence seqpTetR=document.createSequence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Sequence.IUPAC_DNA);
  Sequence seqRbs=document.createSequence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Sequence.IUPAC_DNA);
  Sequence seqCds=document.createSequence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Sequence.IUPAC_DNA);
  Sequence seqTer=document.createSequence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Sequence.IUPAC_DNA);
  Sequence seqPluxR=document.createSequence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Sequence.IUPAC_DNA);
  ComponentDefinition pTetR=document.createComponentDefinition(""String_Node_Str"",""String_Node_Str"",new HashSet<URI>(Arrays.asList(ComponentDefinition.DNA)));
  pTetR.addRole(SequenceOntology.PROMOTER);
  pTetR.setName(""String_Node_Str"");
  pTetR.setDescription(""String_Node_Str"");
  pTetR.addSequence(seqpTetR.getIdentity());
  ComponentDefinition rbs=document.createComponentDefinition(""String_Node_Str"",""String_Node_Str"",new HashSet<URI>(Arrays.asList(ComponentDefinition.DNA)));
  rbs.addRole(SequenceOntology.RIBOSOME_ENTRY_SITE);
  rbs.setName(""String_Node_Str"");
  rbs.setDescription(""String_Node_Str"");
  rbs.addSequence(seqRbs.getIdentity());
  ComponentDefinition cds=document.createComponentDefinition(""String_Node_Str"",""String_Node_Str"",new HashSet<URI>(Arrays.asList(ComponentDefinition.DNA)));
  cds.addRole(SequenceOntology.CDS);
  cds.setName(""String_Node_Str"");
  cds.setDescription(""String_Node_Str"");
  cds.addSequence(seqCds.getIdentity());
  ComponentDefinition ter=document.createComponentDefinition(""String_Node_Str"",""String_Node_Str"",new HashSet<URI>(Arrays.asList(ComponentDefinition.DNA)));
  ter.addRole(URI.create(""String_Node_Str""));
  ter.setName(""String_Node_Str"");
  ter.setDescription(""String_Node_Str"");
  ter.addSequence(seqTer.getIdentity());
  ComponentDefinition pluxR=document.createComponentDefinition(""String_Node_Str"",""String_Node_Str"",new HashSet<URI>(Arrays.asList(ComponentDefinition.DNA)));
  pluxR.addRole(SequenceOntology.PROMOTER);
  pluxR.setName(""String_Node_Str"");
  pluxR.setDescription(""String_Node_Str"");
  pluxR.addSequence(seqPluxR.getIdentity());
  ComponentDefinition device=document.createComponentDefinition(""String_Node_Str"",""String_Node_Str"",new HashSet<URI>(Arrays.asList(ComponentDefinition.DNA)));
  device.addRole(URI.create(""String_Node_Str""));
  device.setName(""String_Node_Str"");
  device.setDescription(""String_Node_Str"");
  Component comPtetR=device.createComponent(""String_Node_Str"",AccessType.PUBLIC,pTetR.getIdentity());
  Component comRbs=device.createComponent(""String_Node_Str"",AccessType.PUBLIC,cds.getIdentity());
  Component comCds=device.createComponent(""String_Node_Str"",AccessType.PUBLIC,rbs.getIdentity());
  Component comTer=device.createComponent(""String_Node_Str"",AccessType.PUBLIC,ter.getIdentity());
  Component comPluxR=device.createComponent(""String_Node_Str"",AccessType.PUBLIC,pluxR.getIdentity());
  int start=1;
  int end=seqPluxR.getElements().length();
  SequenceAnnotation anno=device.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"",start,end,OrientationType.INLINE);
  anno.setComponent(comPtetR.getIdentity());
  start=end + 1;
  end=seqRbs.getElements().length() + end + 1;
  SequenceAnnotation anno2=device.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"",start,end,OrientationType.INLINE);
  anno2.setComponent(comRbs.getIdentity());
  start=end + 1;
  end=seqCds.getElements().length() + end + 1;
  SequenceAnnotation anno3=device.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"",start,end,OrientationType.INLINE);
  anno3.setComponent(comCds.getIdentity());
  start=end + 1;
  end=seqTer.getElements().length() + end + 1;
  SequenceAnnotation anno4=device.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"",start,end,OrientationType.INLINE);
  anno4.setComponent(comTer.getIdentity());
  start=end + 1;
  end=seqPluxR.getElements().length() + end + 1;
  SequenceAnnotation anno5=device.createSequenceAnnotation(""String_Node_Str"",""String_Node_Str"",start,end,OrientationType.INLINE);
  anno5.setComponent(comPluxR.getIdentity());
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}",0.9753478689602278
12628,"@Test public void test_singleSequence() throws Exception {
  SBOLDocument document=new SBOLDocument();
  document.setComplete(true);
  document.setDefaultURIprefix(""String_Node_Str"");
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  String id=""String_Node_Str"";
  document.createSequence(id,VERSION_1_0,id + ""String_Node_Str"",URI.create(id + ""String_Node_Str""));
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}","@Test public void test_singleSequence() throws Exception {
  SBOLDocument document=new SBOLDocument();
  document.setComplete(true);
  document.setDefaultURIprefix(""String_Node_Str"");
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  String id=""String_Node_Str"";
  document.createSequence(id,VERSION_1_0,id + ""String_Node_Str"",Sequence.IUPAC_DNA);
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}",0.9537037037037036
12629,"@Test public void test_SimpleModuleDefinition() throws Exception {
  SBOLDocument document=new SBOLDocument();
  setDefaultNameSpace(document,SBOLTestUtils.example.getNamespaceURI());
  document.setTypesInURIs(true);
  ModuleDefinition module=document.createModuleDefinition(""String_Node_Str"");
  FunctionalComponent cds=module.createFunctionalComponent(""String_Node_Str"",AccessType.PUBLIC,URI.create(""String_Node_Str""),DirectionType.IN);
  FunctionalComponent protein=module.createFunctionalComponent(""String_Node_Str"",AccessType.PUBLIC,URI.create(""String_Node_Str""),DirectionType.OUT);
  module.createInteraction(""String_Node_Str"",new HashSet<URI>(Arrays.asList(URI.create(""String_Node_Str""))));
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}","@Test public void test_SimpleModuleDefinition() throws Exception {
  SBOLDocument document=new SBOLDocument();
  setDefaultNameSpace(document,SBOLTestUtils.example.getNamespaceURI());
  document.setTypesInURIs(true);
  ModuleDefinition module=document.createModuleDefinition(""String_Node_Str"");
  FunctionalComponent cds=module.createFunctionalComponent(""String_Node_Str"",AccessType.PUBLIC,URI.create(""String_Node_Str""),DirectionType.IN);
  FunctionalComponent protein=module.createFunctionalComponent(""String_Node_Str"",AccessType.PUBLIC,URI.create(""String_Node_Str""),DirectionType.OUT);
  module.createInteraction(""String_Node_Str"",new HashSet<URI>(Arrays.asList(SystemsBiologyOntology.TRANSCRIPTION)));
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}",0.9585253456221198
12630,"@Test public void test_singleCompDef_withSeq() throws Exception {
  SBOLDocument document=new SBOLDocument();
  document.setComplete(true);
  document.setDefaultURIprefix(""String_Node_Str"");
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  Set<URI> type=SBOLTestUtils.getSetPropertyURI(""String_Node_Str"");
  Set<URI> role=SBOLTestUtils.getSetPropertyURI(""String_Node_Str"");
  ComponentDefinition pLac=document.createComponentDefinition(""String_Node_Str"",VERSION_1_0,type);
  pLac.setRoles(role);
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}","@Test public void test_singleCompDef_withSeq() throws Exception {
  SBOLDocument document=new SBOLDocument();
  document.setComplete(true);
  document.setDefaultURIprefix(""String_Node_Str"");
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  document.addNamespaceBinding(NamespaceBinding(""String_Node_Str"",""String_Node_Str""));
  Set<URI> type=new HashSet<URI>();
  type.add(ComponentDefinition.DNA);
  Set<URI> role=new HashSet<URI>();
  role.add(SequenceOntology.PROMOTER);
  ComponentDefinition pLac=document.createComponentDefinition(""String_Node_Str"",VERSION_1_0,type);
  pLac.setRoles(role);
  runTest(""String_Node_Str"",document,""String_Node_Str"");
}",0.8442503639010189
12631,"public static void main(String[] args) throws URISyntaxException {
  HashSet<URI> ProteinType=new HashSet<URI>();
  ProteinType.add(ComponentDefinition.PROTEIN);
  HashSet<URI> DNAType=new HashSet<URI>();
  DNAType.add(ComponentDefinition.DNA);
  HashSet<URI> RNAType=new HashSet<URI>();
  RNAType.add(ComponentDefinition.RNA);
  HashSet<URI> ComplexType=new HashSet<URI>();
  RNAType.add(ComponentDefinition.COMPLEX);
  HashSet<URI> non_covalent_type=new HashSet<URI>();
  non_covalent_type.add(SystemsBiologyOntology.NON_COVALENT_BINDING);
  HashSet<URI> enhancement=new HashSet<URI>();
  enhancement.add(SystemsBiologyOntology.GENETIC_ENHANCEMENT);
  HashSet<URI> production=new HashSet<URI>();
  production.add(SystemsBiologyOntology.GENETIC_PRODUCTION);
  HashSet<URI> suppression=new HashSet<URI>();
  suppression.add(SystemsBiologyOntology.GENETIC_SUPPRESSION);
  SBOLDocument doc=new SBOLDocument();
  doc.setDefaultURIprefix(""String_Node_Str"");
  doc.setTypesInURIs(false);
  doc.setComplete(true);
  doc.setCreateDefaults(true);
  String version=""String_Node_Str"";
  doc.createComponentDefinition(""String_Node_Str"",version,DNAType).addRole(SequenceOntology.PROMOTER);
  doc.createComponentDefinition(""String_Node_Str"",version,ProteinType);
  doc.createComponentDefinition(""String_Node_Str"",version,DNAType).addRole(SequenceOntology.PROMOTER);
  doc.createComponentDefinition(""String_Node_Str"",version,RNAType);
  doc.createComponentDefinition(""String_Node_Str"",version,ComplexType);
  doc.createComponentDefinition(""String_Node_Str"",version,DNAType).addRole(SequenceOntology.PROMOTER);
  doc.createComponentDefinition(""String_Node_Str"",version,ProteinType);
  ModuleDefinition CRISPR_Template=doc.createModuleDefinition(""String_Node_Str"",version);
  Interaction Cas9Complex_Formation=CRISPR_Template.createInteraction(""String_Node_Str"",non_covalent_type);
  Cas9Complex_Formation.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.REACTANT);
  Cas9Complex_Formation.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.REACTANT);
  Cas9Complex_Formation.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  Interaction cas9m_production=CRISPR_Template.createInteraction(""String_Node_Str"",production);
  cas9m_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  cas9m_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  Interaction gRNA_production=CRISPR_Template.createInteraction(""String_Node_Str"",production);
  gRNA_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  gRNA_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  Interaction EYFP_production=CRISPR_Template.createInteraction(""String_Node_Str"",production);
  EYFP_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  EYFP_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  Interaction target_generic_gene_inhibition=CRISPR_Template.createInteraction(""String_Node_Str"",suppression);
  target_generic_gene_inhibition.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.INHIBITOR);
  target_generic_gene_inhibition.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  String CRa_U6_seq_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,CRa_U6_seq_elements,Sequence.IUPAC_DNA);
  String gRNA_b_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,gRNA_b_elements,Sequence.IUPAC_DNA);
  String mKate_seq_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,mKate_seq_elements,Sequence.IUPAC_DNA);
  String CRP_b_seq_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,CRP_b_seq_elements,Sequence.IUPAC_DNA);
  doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  ComponentDefinition cas9m_BFP_gene=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  cas9m_BFP_gene.addRole(SequenceOntology.PROMOTER);
  cas9m_BFP_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ProteinType);
  ComponentDefinition CRa_U6=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  CRa_U6.addRole(SequenceOntology.PROMOTER);
  CRa_U6.addSequence(""String_Node_Str"",version);
  ComponentDefinition gRNA_b_cds=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  gRNA_b_cds.addRole(SequenceOntology.CDS);
  gRNA_b_cds.addSequence(""String_Node_Str"",version);
  doc.createComponentDefinition(""String_Node_Str"",version,DNAType).addRole(SequenceOntology.TERMINATOR);
  ComponentDefinition gRNA_b_gene=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  gRNA_b_gene.addRole(SequenceOntology.PROMOTER);
  cas9m_BFP_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  cas9m_BFP_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,RNAType);
  doc.createComponentDefinition(""String_Node_Str"",version,ComplexType);
  ComponentDefinition mKate_cds=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  mKate_cds.addRole(SequenceOntology.CDS);
  mKate_cds.addSequence(""String_Node_Str"",version);
  ComponentDefinition mKate_gene=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  mKate_gene.addRole(SequenceOntology.PROMOTER);
  mKate_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ProteinType);
  ComponentDefinition Gal4VP16_cds=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  Gal4VP16_cds.addRole(SequenceOntology.CDS);
  ComponentDefinition Gal4VP16_gene=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  Gal4VP16_gene.addRole(SequenceOntology.PROMOTER);
  Gal4VP16_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ProteinType);
  ComponentDefinition CRP_b=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  CRP_b.addRole(SequenceOntology.PROMOTER);
  CRP_b.addSequence(""String_Node_Str"",version);
  ComponentDefinition EYFP_cds=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  EYFP_cds.addRole(SequenceOntology.CDS);
  ComponentDefinition EYFP_gene=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  EYFP_gene.addRole(SequenceOntology.PROMOTER);
  EYFP_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ProteinType);
  ModuleDefinition CRISPR_Repression=doc.createModuleDefinition(""String_Node_Str"",version);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  Interaction mKate_production=CRISPR_Repression.createInteraction(""String_Node_Str"",production);
  mKate_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  mKate_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  Interaction GAL4VP16_production=CRISPR_Repression.createInteraction(""String_Node_Str"",production);
  GAL4VP16_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  GAL4VP16_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  Interaction EYFP_Activation=CRISPR_Repression.createInteraction(""String_Node_Str"",enhancement);
  EYFP_Activation.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.STIMULATOR);
  EYFP_Activation.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  Module Template_Module=CRISPR_Repression.createModule(""String_Node_Str"",""String_Node_Str"",version);
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  try {
    SBOLWriter.write(doc,""String_Node_Str"");
  }
 catch (  XMLStreamException|FactoryConfigurationError|CoreIoException|IOException e) {
    e.printStackTrace();
  }
}","public static void main(String[] args) throws URISyntaxException {
  HashSet<URI> ProteinType=new HashSet<URI>();
  ProteinType.add(ComponentDefinition.PROTEIN);
  HashSet<URI> DNAType=new HashSet<URI>();
  DNAType.add(ComponentDefinition.DNA);
  HashSet<URI> RNAType=new HashSet<URI>();
  RNAType.add(ComponentDefinition.RNA);
  HashSet<URI> ComplexType=new HashSet<URI>();
  ComplexType.add(ComponentDefinition.COMPLEX);
  HashSet<URI> non_covalent_type=new HashSet<URI>();
  non_covalent_type.add(SystemsBiologyOntology.NON_COVALENT_BINDING);
  HashSet<URI> enhancement=new HashSet<URI>();
  enhancement.add(SystemsBiologyOntology.GENETIC_ENHANCEMENT);
  HashSet<URI> production=new HashSet<URI>();
  production.add(SystemsBiologyOntology.GENETIC_PRODUCTION);
  HashSet<URI> suppression=new HashSet<URI>();
  suppression.add(SystemsBiologyOntology.GENETIC_SUPPRESSION);
  SBOLDocument doc=new SBOLDocument();
  doc.setDefaultURIprefix(""String_Node_Str"");
  doc.setComplete(true);
  doc.setCreateDefaults(true);
  String version=""String_Node_Str"";
  doc.createComponentDefinition(""String_Node_Str"",version,DNAType).addRole(SequenceOntology.PROMOTER);
  doc.createComponentDefinition(""String_Node_Str"",version,ProteinType);
  doc.createComponentDefinition(""String_Node_Str"",version,DNAType).addRole(SequenceOntology.PROMOTER);
  doc.createComponentDefinition(""String_Node_Str"",version,RNAType);
  doc.createComponentDefinition(""String_Node_Str"",version,ComplexType);
  doc.createComponentDefinition(""String_Node_Str"",version,DNAType).addRole(SequenceOntology.PROMOTER);
  doc.createComponentDefinition(""String_Node_Str"",version,ProteinType);
  ModuleDefinition CRISPR_Template=doc.createModuleDefinition(""String_Node_Str"",version);
  Interaction Cas9Complex_Formation=CRISPR_Template.createInteraction(""String_Node_Str"",non_covalent_type);
  Cas9Complex_Formation.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.REACTANT);
  Cas9Complex_Formation.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.REACTANT);
  Cas9Complex_Formation.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  Interaction cas9m_production=CRISPR_Template.createInteraction(""String_Node_Str"",production);
  cas9m_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  cas9m_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  Interaction gRNA_production=CRISPR_Template.createInteraction(""String_Node_Str"",production);
  gRNA_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  gRNA_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  Interaction EYFP_production=CRISPR_Template.createInteraction(""String_Node_Str"",production);
  EYFP_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  EYFP_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  Interaction target_generic_gene_inhibition=CRISPR_Template.createInteraction(""String_Node_Str"",suppression);
  target_generic_gene_inhibition.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.INHIBITOR);
  target_generic_gene_inhibition.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  String CRa_U6_seq_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,CRa_U6_seq_elements,Sequence.IUPAC_DNA);
  String gRNA_b_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,gRNA_b_elements,Sequence.IUPAC_DNA);
  String mKate_seq_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,mKate_seq_elements,Sequence.IUPAC_DNA);
  String CRP_b_seq_elements=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  doc.createSequence(""String_Node_Str"",version,CRP_b_seq_elements,Sequence.IUPAC_DNA);
  doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  ComponentDefinition cas9m_BFP_gene=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  cas9m_BFP_gene.addRole(SequenceOntology.PROMOTER);
  cas9m_BFP_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ProteinType);
  ComponentDefinition CRa_U6=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  CRa_U6.addRole(SequenceOntology.PROMOTER);
  CRa_U6.addSequence(""String_Node_Str"",version);
  ComponentDefinition gRNA_b_cds=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  gRNA_b_cds.addRole(SequenceOntology.CDS);
  gRNA_b_cds.addSequence(""String_Node_Str"",version);
  doc.createComponentDefinition(""String_Node_Str"",version,DNAType).addRole(SequenceOntology.TERMINATOR);
  ComponentDefinition gRNA_b_gene=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  gRNA_b_gene.addRole(SequenceOntology.PROMOTER);
  cas9m_BFP_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  cas9m_BFP_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,RNAType);
  doc.createComponentDefinition(""String_Node_Str"",version,ComplexType);
  ComponentDefinition mKate_cds=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  mKate_cds.addRole(SequenceOntology.CDS);
  mKate_cds.addSequence(""String_Node_Str"",version);
  ComponentDefinition mKate_gene=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  mKate_gene.addRole(SequenceOntology.PROMOTER);
  mKate_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ProteinType);
  ComponentDefinition Gal4VP16_cds=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  Gal4VP16_cds.addRole(SequenceOntology.CDS);
  ComponentDefinition Gal4VP16_gene=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  Gal4VP16_gene.addRole(SequenceOntology.PROMOTER);
  Gal4VP16_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ProteinType);
  ComponentDefinition CRP_b=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  CRP_b.addRole(SequenceOntology.PROMOTER);
  CRP_b.addSequence(""String_Node_Str"",version);
  ComponentDefinition EYFP_cds=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  EYFP_cds.addRole(SequenceOntology.CDS);
  ComponentDefinition EYFP_gene=doc.createComponentDefinition(""String_Node_Str"",version,DNAType);
  EYFP_gene.addRole(SequenceOntology.PROMOTER);
  EYFP_gene.createSequenceConstraint(""String_Node_Str"",RestrictionType.PRECEDES,""String_Node_Str"",""String_Node_Str"");
  doc.createComponentDefinition(""String_Node_Str"",version,ProteinType);
  ModuleDefinition CRISPR_Repression=doc.createModuleDefinition(""String_Node_Str"",version);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  CRISPR_Repression.createFunctionalComponent(""String_Node_Str"",AccessType.PRIVATE,""String_Node_Str"",version,DirectionType.NONE);
  Interaction mKate_production=CRISPR_Repression.createInteraction(""String_Node_Str"",production);
  mKate_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  mKate_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  Interaction GAL4VP16_production=CRISPR_Repression.createInteraction(""String_Node_Str"",production);
  GAL4VP16_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  GAL4VP16_production.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PRODUCT);
  Interaction EYFP_Activation=CRISPR_Repression.createInteraction(""String_Node_Str"",enhancement);
  EYFP_Activation.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.STIMULATOR);
  EYFP_Activation.createParticipation(""String_Node_Str"",""String_Node_Str"").addRole(SystemsBiologyOntology.PROMOTER);
  Module Template_Module=CRISPR_Repression.createModule(""String_Node_Str"",""String_Node_Str"",version);
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  Template_Module.createMapsTo(""String_Node_Str"",RefinementType.USELOCAL,""String_Node_Str"",""String_Node_Str"");
  try {
    SBOLWriter.write(doc,""String_Node_Str"");
  }
 catch (  XMLStreamException|FactoryConfigurationError|CoreIoException|IOException e) {
    e.printStackTrace();
  }
}",0.9983345432805228
12632,"private static ComponentDefinition parseComponentDefinitions(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel,Map<URI,NestedDocument<QName>> nested){
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  URI structure=null;
  String version=null;
  URI wasDerivedFrom=null;
  Set<URI> type=new HashSet<>();
  Set<URI> roles=new HashSet<>();
  List<Component> components=new ArrayList<>();
  List<Annotation> annotations=new ArrayList<>();
  List<SequenceAnnotation> sequenceAnnotations=new ArrayList<>();
  List<SequenceConstraint> sequenceConstraints=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.type)) {
      type.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.roles)) {
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasComponent)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        components.add(parseComponent(((NestedDocument<QName>)namedProperty.getValue()),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        components.add(parseComponent(nested.get(uri),nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSubComponent)) {
      System.out.println(""String_Node_Str"");
      if (namedProperty.getValue() instanceof NestedDocument) {
        components.add(parseComponent(((NestedDocument<QName>)namedProperty.getValue()),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        components.add(parseComponent(nested.get(uri),nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSequence)) {
      structure=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSequenceAnnotations)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        sequenceAnnotations.add(parseSequenceAnnotation(((NestedDocument<QName>)namedProperty.getValue()),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        sequenceAnnotations.add(parseSequenceAnnotation(nested.get(uri),nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSequenceConstraints)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        sequenceConstraints.add(parseSequenceConstraint(((NestedDocument<QName>)namedProperty.getValue())));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        sequenceConstraints.add(parseSequenceConstraint(nested.get(uri)));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  ComponentDefinition c=new ComponentDefinition(topLevel.getIdentity(),type);
  if (roles != null)   c.setRoles(roles);
  if (displayId != null)   c.setDisplayId(displayId);
  if (persistentIdentity != null)   c.setPersistentIdentity(persistentIdentity);
  if (structure != null)   c.addSequence(structure);
  if (!components.isEmpty())   c.setComponents(components);
  if (!sequenceAnnotations.isEmpty())   c.setSequenceAnnotations(sequenceAnnotations);
  if (!sequenceConstraints.isEmpty())   c.setSequenceConstraints(sequenceConstraints);
  if (name != null)   c.setName(name);
  if (description != null)   c.setDescription(description);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  if (version != null)   c.setVersion(version);
  if (wasDerivedFrom != null)   c.setWasDerivedFrom(wasDerivedFrom);
  ComponentDefinition oldC=SBOLDoc.getComponentDefinition(topLevel.getIdentity());
  if (oldC == null) {
    SBOLDoc.addComponentDefinition(c);
  }
 else {
    if (!c.equals(oldC)) {
      throw new SBOLValidationException(""String_Node_Str"" + topLevel.getIdentity());
    }
  }
  return c;
}","private static ComponentDefinition parseComponentDefinitions(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel,Map<URI,NestedDocument<QName>> nested){
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  String version=null;
  URI wasDerivedFrom=null;
  Set<URI> type=new HashSet<>();
  Set<URI> roles=new HashSet<>();
  Set<URI> structures=new HashSet<>();
  List<Component> components=new ArrayList<>();
  List<Annotation> annotations=new ArrayList<>();
  List<SequenceAnnotation> sequenceAnnotations=new ArrayList<>();
  List<SequenceConstraint> sequenceConstraints=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.type)) {
      type.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.roles)) {
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasComponent)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        components.add(parseComponent(((NestedDocument<QName>)namedProperty.getValue()),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        components.add(parseComponent(nested.get(uri),nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSubComponent)) {
      System.out.println(""String_Node_Str"");
      if (namedProperty.getValue() instanceof NestedDocument) {
        components.add(parseComponent(((NestedDocument<QName>)namedProperty.getValue()),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        components.add(parseComponent(nested.get(uri),nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSequence)) {
      structures.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSequenceAnnotations)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        sequenceAnnotations.add(parseSequenceAnnotation(((NestedDocument<QName>)namedProperty.getValue()),nested));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        sequenceAnnotations.add(parseSequenceAnnotation(nested.get(uri),nested));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSequenceConstraints)) {
      if (namedProperty.getValue() instanceof NestedDocument) {
        sequenceConstraints.add(parseSequenceConstraint(((NestedDocument<QName>)namedProperty.getValue())));
      }
 else {
        URI uri=(URI)((Literal<QName>)namedProperty.getValue()).getValue();
        sequenceConstraints.add(parseSequenceConstraint(nested.get(uri)));
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  ComponentDefinition c=new ComponentDefinition(topLevel.getIdentity(),type);
  if (roles != null)   c.setRoles(roles);
  if (displayId != null)   c.setDisplayId(displayId);
  if (persistentIdentity != null)   c.setPersistentIdentity(persistentIdentity);
  if (!structures.isEmpty())   c.setSequences(structures);
  if (!components.isEmpty())   c.setComponents(components);
  if (!sequenceAnnotations.isEmpty())   c.setSequenceAnnotations(sequenceAnnotations);
  if (!sequenceConstraints.isEmpty())   c.setSequenceConstraints(sequenceConstraints);
  if (name != null)   c.setName(name);
  if (description != null)   c.setDescription(description);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  if (version != null)   c.setVersion(version);
  if (wasDerivedFrom != null)   c.setWasDerivedFrom(wasDerivedFrom);
  ComponentDefinition oldC=SBOLDoc.getComponentDefinition(topLevel.getIdentity());
  if (oldC == null) {
    SBOLDoc.addComponentDefinition(c);
  }
 else {
    if (!c.equals(oldC)) {
      throw new SBOLValidationException(""String_Node_Str"" + topLevel.getIdentity());
    }
  }
  return c;
}",0.713977283394349
12633,"private static Sequence parseDnaSequenceV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel){
  String elements=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI identity=topLevel.getIdentity();
  URI persistentIdentity=null;
  URI encoding=Sbol2Terms.SequenceURI.DnaSequenceV1;
  List<Annotation> annotations=new ArrayList<>();
  if (URIPrefix != null) {
    displayId=findDisplayId(topLevel.getIdentity().toString());
    identity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,version,typesInURI);
    persistentIdentity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,""String_Node_Str"",typesInURI);
  }
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNASequence.nucleotides)) {
      elements=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      if (URIPrefix != null) {
        identity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,version,typesInURI);
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Sequence sequence=new Sequence(identity,elements,encoding);
  if (persistentIdentity != null) {
    sequence.setPersistentIdentity(persistentIdentity);
    sequence.setVersion(version);
  }
  if (identity != topLevel.getIdentity())   sequence.setWasDerivedFrom(topLevel.getIdentity());
  if (displayId != null)   sequence.setDisplayId(displayId);
  if (name != null)   sequence.setName(name);
  if (description != null)   sequence.setDescription(description);
  if (!annotations.isEmpty())   sequence.setAnnotations(annotations);
  Sequence oldS=SBOLDoc.getSequence(identity);
  if (oldS == null) {
    SBOLDoc.addSequence(sequence);
  }
 else {
    if (!sequence.equals(oldS)) {
      throw new SBOLValidationException(""String_Node_Str"" + identity);
    }
  }
  return sequence;
}","private static Sequence parseDnaSequenceV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel){
  String elements=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI identity=topLevel.getIdentity();
  URI persistentIdentity=null;
  URI encoding=Sbol2Terms.SequenceURI.DnaSequenceV1;
  List<Annotation> annotations=new ArrayList<>();
  if (URIPrefix != null) {
    displayId=findDisplayId(topLevel.getIdentity().toString());
    identity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,version,typesInURI);
    persistentIdentity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,""String_Node_Str"",typesInURI);
  }
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNASequence.nucleotides)) {
      elements=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      if (URIPrefix != null) {
        identity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,version,typesInURI);
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Sequence sequence=new Sequence(identity,elements,encoding);
  if (persistentIdentity != null) {
    sequence.setPersistentIdentity(persistentIdentity);
    sequence.setVersion(version);
  }
  if (identity != topLevel.getIdentity())   sequence.setWasDerivedFrom(topLevel.getIdentity());
  if (displayId != null)   sequence.setDisplayId(displayId);
  if (name != null)   sequence.setName(name);
  if (description != null)   sequence.setDescription(description);
  if (!annotations.isEmpty())   sequence.setAnnotations(annotations);
  Sequence oldS=SBOLDoc.getSequence(identity);
  if (oldS == null) {
    SBOLDoc.addSequence(sequence);
  }
 else   if (sequence.isSetWasDerivedFrom() && oldS.isSetWasDerivedFrom() && !sequence.getWasDerivedFrom().equals(oldS.getWasDerivedFrom())) {
    do {
      displayId=displayId + ""String_Node_Str"";
      identity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,version,typesInURI);
      persistentIdentity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,""String_Node_Str"",typesInURI);
    }
 while (SBOLDoc.getSequence(identity) != null);
    sequence.setIdentity(identity);
    sequence.setDisplayId(displayId);
    sequence.setPersistentIdentity(persistentIdentity);
    SBOLDoc.addSequence(sequence);
  }
 else   if (dropObjectsWithDuplicateURIs) {
    return oldS;
  }
 else {
    if (!sequence.equals(oldS)) {
      throw new SBOLValidationException(""String_Node_Str"" + identity);
    }
  }
  return sequence;
}",0.8739526411657559
12634,"private static ComponentDefinition parseDnaComponentV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> componentDef){
  String displayId=null;
  String name=null;
  String description=null;
  URI seq_identity=null;
  Set<URI> roles=new HashSet<>();
  URI identity=componentDef.getIdentity();
  String persIdentity=""String_Node_Str"";
  List<Annotation> annotations=new ArrayList<>();
  List<SequenceAnnotation> sequenceAnnotations=new ArrayList<>();
  List<Component> components=new ArrayList<>();
  List<SequenceConstraint> sequenceConstraints=new ArrayList<>();
  List<SBOLPair> precedePairs=new ArrayList<>();
  Map<URI,URI> componentDefMap=new HashMap<>();
  Set<URI> type=new HashSet<>();
  type.add(ComponentDefinition.DNA);
  int component_num=0;
  int sa_num=0;
  if (URIPrefix != null) {
    displayId=findDisplayId(componentDef.getIdentity().toString());
    identity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,version,typesInURI);
    persIdentity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,""String_Node_Str"",typesInURI).toString();
  }
  for (  NamedProperty<QName> namedProperty : componentDef.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      displayId=fixDisplayId(displayId);
      if (URIPrefix != null) {
        persIdentity=createCompliantURI(URIPrefix,TopLevel.COMPONENT_DEFINITION,displayId,""String_Node_Str"",typesInURI).toString();
        identity=createCompliantURI(URIPrefix,TopLevel.COMPONENT_DEFINITION,displayId,version,typesInURI);
      }
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.name)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.type)) {
      URI convertedSO=SequenceOntology.convertSeqOntologyV1(((Literal<QName>)namedProperty.getValue()).getValue().toString());
      roles.add(convertedSO);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.annotations)) {
      SequenceAnnotation sa=parseSequenceAnnotationV1(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),precedePairs,persIdentity,++sa_num);
      sequenceAnnotations.add(sa);
      URI component_identity=createCompliantURI(persIdentity,""String_Node_Str"" + component_num,version);
      AccessType access=AccessType.PUBLIC;
      URI instantiatedComponent=sa.getComponentURI();
      URI originalURI=((NestedDocument<QName>)namedProperty.getValue()).getIdentity();
      componentDefMap.put(originalURI,component_identity);
      sa.setComponent(component_identity);
      Component component=new Component(component_identity,access,instantiatedComponent);
      if (!persIdentity.equals(""String_Node_Str"")) {
        component.setPersistentIdentity(createCompliantURI(persIdentity,""String_Node_Str"" + component_num,""String_Node_Str""));
        component.setDisplayId(""String_Node_Str"" + component_num);
        component.setVersion(version);
      }
      component_num++;
      components.add(component);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.dnaSequence)) {
      seq_identity=parseDnaSequenceV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  if (roles.isEmpty())   roles.add(SequenceOntology.ENGINEERED_REGION);
  int sc_number=0;
  for (  SBOLPair pair : precedePairs) {
    URI sc_identity=createCompliantURI(persIdentity,""String_Node_Str"" + ++sc_number,version);
    URI restrictionURI=RestrictionType.convertToURI(RestrictionType.PRECEDES);
    URI subject=null;
    URI object=null;
    for (    URI key : componentDefMap.keySet()) {
      if (pair.getLeft().equals(key)) {
        subject=componentDefMap.get(key);
      }
 else       if (pair.getRight().equals(key)) {
        object=componentDefMap.get(key);
      }
    }
    SequenceConstraint sc=new SequenceConstraint(sc_identity,restrictionURI,subject,object);
    if (!persIdentity.equals(""String_Node_Str"")) {
      sc.setPersistentIdentity(createCompliantURI(persIdentity,""String_Node_Str"" + sc_number,version));
      sc.setDisplayId(""String_Node_Str"" + sc_number);
      sc.setVersion(version);
    }
    sequenceConstraints.add(sc);
  }
  ComponentDefinition c=new ComponentDefinition(identity,type);
  if (!persIdentity.equals(""String_Node_Str"")) {
    c.setPersistentIdentity(URI.create(persIdentity));
    c.setVersion(version);
  }
  if (roles != null)   c.setRoles(roles);
  if (identity != componentDef.getIdentity())   c.setWasDerivedFrom(componentDef.getIdentity());
  if (displayId != null)   c.setDisplayId(displayId);
  if (name != null && !name.isEmpty())   c.setName(name);
  if (description != null && !description.isEmpty())   c.setDescription(description);
  if (seq_identity != null)   c.addSequence(seq_identity);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  if (!sequenceAnnotations.isEmpty())   c.setSequenceAnnotations(sequenceAnnotations);
  if (!components.isEmpty())   c.setComponents(components);
  if (!sequenceConstraints.isEmpty())   c.setSequenceConstraints(sequenceConstraints);
  ComponentDefinition oldC=SBOLDoc.getComponentDefinition(identity);
  if (oldC == null) {
    SBOLDoc.addComponentDefinition(c);
  }
 else {
    if (!c.equals(oldC)) {
      throw new SBOLValidationException(""String_Node_Str"" + identity);
    }
  }
  return c;
}","private static ComponentDefinition parseDnaComponentV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> componentDef){
  String displayId=null;
  String name=null;
  String description=null;
  URI seq_identity=null;
  Set<URI> roles=new HashSet<>();
  URI identity=componentDef.getIdentity();
  String persIdentity=""String_Node_Str"";
  List<Annotation> annotations=new ArrayList<>();
  List<SequenceAnnotation> sequenceAnnotations=new ArrayList<>();
  List<Component> components=new ArrayList<>();
  List<SequenceConstraint> sequenceConstraints=new ArrayList<>();
  List<SBOLPair> precedePairs=new ArrayList<>();
  Map<URI,URI> componentDefMap=new HashMap<>();
  Set<URI> type=new HashSet<>();
  type.add(ComponentDefinition.DNA);
  int component_num=0;
  int sa_num=0;
  if (URIPrefix != null) {
    displayId=findDisplayId(componentDef.getIdentity().toString());
    identity=createCompliantURI(URIPrefix,TopLevel.COMPONENT_DEFINITION,displayId,version,typesInURI);
    persIdentity=createCompliantURI(URIPrefix,TopLevel.COMPONENT_DEFINITION,displayId,""String_Node_Str"",typesInURI).toString();
  }
  for (  NamedProperty<QName> namedProperty : componentDef.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      displayId=fixDisplayId(displayId);
      if (URIPrefix != null) {
        persIdentity=createCompliantURI(URIPrefix,TopLevel.COMPONENT_DEFINITION,displayId,""String_Node_Str"",typesInURI).toString();
        identity=createCompliantURI(URIPrefix,TopLevel.COMPONENT_DEFINITION,displayId,version,typesInURI);
      }
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.name)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.type)) {
      URI convertedSO=SequenceOntology.convertSeqOntologyV1(((Literal<QName>)namedProperty.getValue()).getValue().toString());
      roles.add(convertedSO);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.annotations)) {
      SequenceAnnotation sa=parseSequenceAnnotationV1(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),precedePairs,persIdentity,++sa_num);
      sequenceAnnotations.add(sa);
      URI component_identity=createCompliantURI(persIdentity,""String_Node_Str"" + component_num,version);
      AccessType access=AccessType.PUBLIC;
      URI instantiatedComponent=sa.getComponentURI();
      URI originalURI=((NestedDocument<QName>)namedProperty.getValue()).getIdentity();
      componentDefMap.put(originalURI,component_identity);
      sa.setComponent(component_identity);
      Component component=new Component(component_identity,access,instantiatedComponent);
      if (!persIdentity.equals(""String_Node_Str"")) {
        component.setPersistentIdentity(createCompliantURI(persIdentity,""String_Node_Str"" + component_num,""String_Node_Str""));
        component.setDisplayId(""String_Node_Str"" + component_num);
        component.setVersion(version);
      }
      component_num++;
      components.add(component);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.dnaSequence)) {
      seq_identity=parseDnaSequenceV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  if (roles.isEmpty())   roles.add(SequenceOntology.ENGINEERED_REGION);
  int sc_number=0;
  for (  SBOLPair pair : precedePairs) {
    URI sc_identity=createCompliantURI(persIdentity,""String_Node_Str"" + ++sc_number,version);
    URI restrictionURI=RestrictionType.convertToURI(RestrictionType.PRECEDES);
    URI subject=null;
    URI object=null;
    for (    URI key : componentDefMap.keySet()) {
      if (pair.getLeft().equals(key)) {
        subject=componentDefMap.get(key);
      }
 else       if (pair.getRight().equals(key)) {
        object=componentDefMap.get(key);
      }
    }
    SequenceConstraint sc=new SequenceConstraint(sc_identity,restrictionURI,subject,object);
    if (!persIdentity.equals(""String_Node_Str"")) {
      sc.setPersistentIdentity(createCompliantURI(persIdentity,""String_Node_Str"" + sc_number,version));
      sc.setDisplayId(""String_Node_Str"" + sc_number);
      sc.setVersion(version);
    }
    sequenceConstraints.add(sc);
  }
  ComponentDefinition c=new ComponentDefinition(identity,type);
  if (!persIdentity.equals(""String_Node_Str"")) {
    c.setPersistentIdentity(URI.create(persIdentity));
    c.setVersion(version);
  }
  if (roles != null)   c.setRoles(roles);
  if (identity != componentDef.getIdentity())   c.setWasDerivedFrom(componentDef.getIdentity());
  if (displayId != null)   c.setDisplayId(displayId);
  if (name != null && !name.isEmpty())   c.setName(name);
  if (description != null && !description.isEmpty())   c.setDescription(description);
  if (seq_identity != null)   c.addSequence(seq_identity);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  if (!sequenceAnnotations.isEmpty())   c.setSequenceAnnotations(sequenceAnnotations);
  if (!components.isEmpty())   c.setComponents(components);
  if (!sequenceConstraints.isEmpty())   c.setSequenceConstraints(sequenceConstraints);
  ComponentDefinition oldC=SBOLDoc.getComponentDefinition(identity);
  if (oldC == null) {
    SBOLDoc.addComponentDefinition(c);
  }
 else   if (c.isSetWasDerivedFrom() && oldC.isSetWasDerivedFrom() && !c.getWasDerivedFrom().equals(oldC.getWasDerivedFrom())) {
    do {
      displayId=displayId + ""String_Node_Str"";
      identity=createCompliantURI(URIPrefix,TopLevel.COMPONENT_DEFINITION,displayId,version,typesInURI);
      persIdentity=createCompliantURI(URIPrefix,TopLevel.COMPONENT_DEFINITION,displayId,""String_Node_Str"",typesInURI).toString();
    }
 while (SBOLDoc.getComponentDefinition(identity) != null);
    c=c.copy(URIPrefix,displayId,version);
    if (identity != componentDef.getIdentity())     c.setWasDerivedFrom(componentDef.getIdentity());
    SBOLDoc.addComponentDefinition(c);
  }
 else   if (dropObjectsWithDuplicateURIs) {
    return oldC;
  }
 else {
    if (!c.equals(oldC)) {
      throw new SBOLValidationException(""String_Node_Str"" + identity);
    }
  }
  return c;
}",0.935684987694832
12635,"/** 
 * Extract the persistent identity URI from the given URI. The persistent identity is simply the identity URI without the version.
 * @return the extracted persistent identity URI, <code>null</code> otherwise.
 */
static String extractPersistentId(URI objURI){
  String URIstr=objURI.toString();
  Pattern r=Pattern.compile(genericURIpattern1);
  Matcher m=r.matcher(URIstr);
  if (m.matches()) {
    return m.group(1);
  }
 else {
    throw new IllegalArgumentException(objURI + ""String_Node_Str"");
  }
}","/** 
 * Extract the persistent identity URI from the given URI. The persistent identity is simply the identity URI without the version.
 * @return the extracted persistent identity URI, <code>null</code> otherwise.
 */
static String extractPersistentId(URI objURI){
  String URIstr=objURI.toString();
  Pattern r=Pattern.compile(genericURIpattern1);
  Matcher m=r.matcher(URIstr);
  if (m.matches()) {
    return m.group(1);
  }
 else {
    return null;
  }
}",0.9246646026831784
12636,"static void read(SBOLDocument SBOLDoc,InputStream in){
  Scanner scanner=new Scanner(in,""String_Node_Str"");
  String inputStreamString=scanner.useDelimiter(""String_Node_Str"").next();
  try {
    DocumentRoot<QName> document=readRDF(new StringReader(inputStreamString));
    boolean sbol2=false;
    for (    NamespaceBinding n : document.getNamespaceBindings()) {
      if (n.getNamespaceURI().equals(Sbol2Terms.sbol2.getNamespaceURI())) {
        sbol2=true;
      }
      SBOLDoc.addNamespaceBinding(NamespaceBinding(n.getNamespaceURI(),n.getPrefix()));
    }
    if (!sbol2) {
      scanner.close();
      readV1(document);
    }
    readTopLevelDocs(SBOLDoc,document);
  }
 catch (  Exception e) {
    scanner.close();
    e.printStackTrace();
  }
  scanner.close();
}","static void read(SBOLDocument SBOLDoc,InputStream in){
  Scanner scanner=new Scanner(in,""String_Node_Str"");
  String inputStreamString=scanner.useDelimiter(""String_Node_Str"").next();
  try {
    DocumentRoot<QName> document=readRDF(new StringReader(inputStreamString));
    for (    NamespaceBinding n : document.getNamespaceBindings()) {
      if (n.getNamespaceURI().equals(Sbol1Terms.sbol1.getNamespaceURI())) {
        scanner.close();
        readV1(SBOLDoc,document);
        return;
      }
    }
    for (    NamespaceBinding n : document.getNamespaceBindings()) {
      SBOLDoc.addNamespaceBinding(NamespaceBinding(n.getNamespaceURI(),n.getPrefix()));
    }
    readTopLevelDocs(SBOLDoc,document);
  }
 catch (  Exception e) {
    scanner.close();
    e.printStackTrace();
  }
  scanner.close();
}",0.8238276299112801
12637,"private static SBOLDocument readV1(DocumentRoot<QName> document){
  SBOLDocument SBOLDoc=new SBOLDocument();
  for (  NamespaceBinding n : document.getNamespaceBindings()) {
    if (n.getNamespaceURI().equals(Sbol1Terms.sbol1.getNamespaceURI())) {
      SBOLDoc.addNamespaceBinding(NamespaceBinding(Sbol2Terms.sbol2.getNamespaceURI(),Sbol2Terms.sbol2.getPrefix()));
    }
 else {
      SBOLDoc.addNamespaceBinding(NamespaceBinding(n.getNamespaceURI(),n.getPrefix()));
    }
  }
  SBOLDoc.addNamespaceBinding(NamespaceBinding(Sbol2Terms.prov.getNamespaceURI(),Sbol2Terms.prov.getPrefix()));
  readTopLevelDocsV1(SBOLDoc,document);
  try {
    SBOLValidate.validateCompliance(SBOLDoc);
  }
 catch (  SBOLValidationException e) {
    SBOLDoc.setCompliant(false);
  }
  return SBOLDoc;
}","private static SBOLDocument readV1(SBOLDocument SBOLDoc,DocumentRoot<QName> document){
  for (  NamespaceBinding n : document.getNamespaceBindings()) {
    if (n.getNamespaceURI().equals(Sbol1Terms.sbol1.getNamespaceURI())) {
      SBOLDoc.addNamespaceBinding(NamespaceBinding(Sbol2Terms.sbol2.getNamespaceURI(),Sbol2Terms.sbol2.getPrefix()));
    }
 else {
      SBOLDoc.addNamespaceBinding(NamespaceBinding(n.getNamespaceURI(),n.getPrefix()));
    }
  }
  SBOLDoc.addNamespaceBinding(NamespaceBinding(Sbol2Terms.prov.getNamespaceURI(),Sbol2Terms.prov.getPrefix()));
  readTopLevelDocsV1(SBOLDoc,document);
  try {
    SBOLValidate.validateCompliance(SBOLDoc);
  }
 catch (  SBOLValidationException e) {
    SBOLDoc.setCompliant(false);
  }
  return SBOLDoc;
}",0.9585492227979274
12638,"@Override public String toString(){
  return ""String_Node_Str"" + mapsTos + ""String_Node_Str""+ componentDefinition+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + mapsTos + ""String_Node_Str"";
}",0.8260869565217391
12639,"@Override public String toString(){
  return ""String_Node_Str"" + direction + ""String_Node_Str""+ mapsTos+ ""String_Node_Str""+ moduleDefinition+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + direction + ""String_Node_Str""+ mapsTos+ ""String_Node_Str"";
}",0.8710801393728222
12640,"@Override public String toString(){
  return ""String_Node_Str"" + types + ""String_Node_Str""+ participations+ ""String_Node_Str""+ moduleDefinition+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + types + ""String_Node_Str""+ participations+ ""String_Node_Str"";
}",0.8737201365187713
12641,"@Override public String toString(){
  return ""String_Node_Str"" + refinement + ""String_Node_Str""+ local+ ""String_Node_Str""+ remote+ ""String_Node_Str""+ moduleDefinition+ ""String_Node_Str""+ module+ ""String_Node_Str""+ componentDefinition+ ""String_Node_Str""+ componentInstance+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + refinement + ""String_Node_Str""+ local+ ""String_Node_Str""+ remote+ ""String_Node_Str"";
}",0.6801801801801802
12642,"@Override public String toString(){
  return ""String_Node_Str"" + mapsTos + ""String_Node_Str""+ definition+ ""String_Node_Str""+ moduleDefinition+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + mapsTos + ""String_Node_Str""+ definition+ ""String_Node_Str"";
}",0.8719723183391004
12643,"@Override public String toString(){
  return ""String_Node_Str"" + roles + ""String_Node_Str""+ participant+ ""String_Node_Str""+ moduleDefinition+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + roles + ""String_Node_Str""+ participant+ ""String_Node_Str"";
}",0.8710801393728222
12644,"@Override public String toString(){
  return ""String_Node_Str"" + locations + ""String_Node_Str""+ component+ ""String_Node_Str""+ componentDefinition+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + locations + ""String_Node_Str""+ component+ ""String_Node_Str"";
}",0.8639455782312925
12645,"@Override public String toString(){
  return ""String_Node_Str"" + restriction + ""String_Node_Str""+ subject+ ""String_Node_Str""+ object+ ""String_Node_Str""+ componentDefinition+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + restriction + ""String_Node_Str""+ subject+ ""String_Node_Str""+ object+ ""String_Node_Str"";
}",0.8850574712643678
12646,"/** 
 * Appends the specified   {@code ModuleDefinition} object to the end of the list of module definitions.
 */
void addModuleDefinition(ModuleDefinition newModuleDefinition){
  addTopLevel(newModuleDefinition,moduleDefinitions,""String_Node_Str"",collections,componentDefinitions,genericTopLevels,models,sequences);
}","/** 
 * Appends the specified   {@code ModuleDefinition} object to the end of the list of module definitions.
 */
void addModuleDefinition(ModuleDefinition newModuleDefinition){
  addTopLevel(newModuleDefinition,moduleDefinitions,""String_Node_Str"",collections,componentDefinitions,genericTopLevels,models,sequences);
  for (  FunctionalComponent functionalComponent : newModuleDefinition.getFunctionalComponents()) {
    functionalComponent.setSBOLDocument(this);
    for (    MapsTo mapsTo : functionalComponent.getMapsTos()) {
      mapsTo.setSBOLDocument(this);
    }
  }
  for (  Module module : newModuleDefinition.getModules()) {
    module.setSBOLDocument(this);
    for (    MapsTo mapsTo : module.getMapsTos()) {
      mapsTo.setSBOLDocument(this);
    }
  }
  for (  Interaction interaction : newModuleDefinition.getInteractions()) {
    interaction.setSBOLDocument(this);
    for (    Participation participation : interaction.getParticipations()) {
      participation.setSBOLDocument(this);
    }
  }
}",0.477119279819955
12647,"/** 
 * Appends the specified element to the end of the list of component definitions.
 */
void addComponentDefinition(ComponentDefinition newComponentDefinition){
  addTopLevel(newComponentDefinition,componentDefinitions,""String_Node_Str"",collections,genericTopLevels,models,moduleDefinitions,sequences);
}","/** 
 * Appends the specified element to the end of the list of component definitions.
 */
void addComponentDefinition(ComponentDefinition newComponentDefinition){
  addTopLevel(newComponentDefinition,componentDefinitions,""String_Node_Str"",collections,genericTopLevels,models,moduleDefinitions,sequences);
  for (  Component component : newComponentDefinition.getComponents()) {
    component.setSBOLDocument(this);
    for (    MapsTo mapsTo : component.getMapsTos()) {
      mapsTo.setSBOLDocument(this);
    }
  }
  for (  SequenceAnnotation sequenceAnnotation : newComponentDefinition.getSequenceAnnotations()) {
    sequenceAnnotation.setSBOLDocument(this);
    for (    Location location : sequenceAnnotation.getLocations()) {
      location.setSBOLDocument(this);
    }
  }
  for (  SequenceConstraint sequenceConstraint : newComponentDefinition.getSequenceConstraints()) {
    sequenceConstraint.setSBOLDocument(this);
  }
}",0.4955609362389023
12648,"@Test public void Test_Sequence_CopyCreate_Create(){
  String prURI=""String_Node_Str"";
  String prPrefix=""String_Node_Str"";
  SBOLDocument document=new SBOLDocument();
  document.setDefaultURIprefix(prURI);
  document.setTypesInURIs(true);
  String prURI1=""String_Node_Str"";
  String prPrefix1=""String_Node_Str"";
  SBOLDocument document2=new SBOLDocument();
  document.setDefaultURIprefix(prURI1);
  document.setTypesInURIs(true);
  String SequenceDisplayID=""String_Node_Str"";
  String SequenceVersion=""String_Node_Str"";
  String SequenceElements=""String_Node_Str"";
  String SequenceURI=""String_Node_Str"" + SequenceDisplayID;
  String createCopyID=""String_Node_Str"";
  String createCopyVersion=""String_Node_Str"";
  String createCopyURI=""String_Node_Str"";
  URI SeqURI=URI.create(SequenceURI);
  Sequence seq=document.createSequence(SequenceDisplayID,SequenceVersion,SequenceElements,SeqURI);
  Sequence seq2=(Sequence)document2.createCopy(seq,SequenceURI,SequenceDisplayID,SequenceVersion);
  Sequence seq3=(Sequence)document2.createCopy(seq);
  seq2.unsetWasDerivedFrom();
  seq3.unsetWasDerivedFrom();
  assertTrue(seq.equals(seq2));
  assertTrue(seq.equals(seq3));
  assertEquals(seq,seq3);
}","@Test public void Test_Sequence_CopyCreate_Create(){
  String prURI=""String_Node_Str"";
  String prPrefix=""String_Node_Str"";
  SBOLDocument document=new SBOLDocument();
  document.setDefaultURIprefix(prURI);
  document.setTypesInURIs(true);
  String prURI1=""String_Node_Str"";
  String prPrefix1=""String_Node_Str"";
  SBOLDocument document2=new SBOLDocument();
  document.setDefaultURIprefix(prURI1);
  document.setTypesInURIs(true);
  String SequenceDisplayID=""String_Node_Str"";
  String SequenceVersion=""String_Node_Str"";
  String SequenceElements=""String_Node_Str"";
  String SequenceURI=""String_Node_Str"" + SequenceDisplayID;
  String createCopyID=""String_Node_Str"";
  String createCopyVersion=""String_Node_Str"";
  String createCopyURI=""String_Node_Str"";
  URI SeqURI=URI.create(SequenceURI);
  Sequence seq=document.createSequence(SequenceDisplayID,SequenceVersion,SequenceElements,SeqURI);
  Sequence seq2=(Sequence)document2.createCopy(seq,SequenceURI,SequenceDisplayID,SequenceVersion);
  Sequence seq3=(Sequence)document2.createCopy(seq);
  seq2.unsetWasDerivedFrom();
  seq3.unsetWasDerivedFrom();
  assertTrue(seq.equals(seq3));
  assertEquals(seq,seq3);
}",0.9711620016963528
12649,"/** 
 * Test if the display ID is set.
 * @return {@code true} if it is not {@code null}
 */
boolean isSetDisplayId(){
  return displayId != null;
}","/** 
 * Test if the display ID is set.
 * @return {@code true} if it is not {@code null}
 */
public boolean isSetDisplayId(){
  return displayId != null;
}",0.976897689768977
12650,"/** 
 * Test if the persistent identity URI is set.
 * @return {@code true} if it is not {@code null}
 */
boolean isSetPersistentIdentity(){
  return persistentIdentity != null;
}","/** 
 * Test if the persistent identity URI is set.
 * @return {@code true} if it is not {@code null}
 */
public boolean isSetPersistentIdentity(){
  return persistentIdentity != null;
}",0.9808219178082191
12651,"/** 
 * Creates a copy of the given TopLevel instance with the given arguments, and then adds it to  the corresponding top-level list owned by this SBOLDocument object. <p> This SBOLDcouement object is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the given   {@code URIprefix} is {@code null}, then it is extracted from the given  {@code topLevel} instance. If it does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it.   <p> If either the given  {@code displayId} or {@code version}, then the corresponding field is extracted from the given   {@code topLevel} instance. Both extracted fields are requiredto be valid and not  {@code null}. <p> A top-level instance with a compliant URI is created using the given arguments, and then its display ID, persistent identity, and version fields are set. This  instance is then added to the corresponding top-level list owned by this SBOLDocument object. 
 * @param topLevel
 * @param URIprefix
 * @param displayId
 * @param version
 * @return the created top-level instance
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 * @throws IllegalArgumentException if the {@code defaultURIprefix} is {@code null}
 * @throws IllegalArgumentException if the given {@code URIprefix} is {@code null}
 * @throws IllegalArgumentException if the given {@code URIprefix} is non-compliant
 * @throws IllegalArgumentException if the given {@code displayId} is invalid
 * @throws IllegalArgumentException if the given {@code version} is invalid
 * @throws IllegalArgumentException if the created top-level instance's persistentidentity exists in this SBOLDocument object's other lists of top-level instances.
 * @throws IllegalArgumentException if the created top-level instance's identity URIalready exists.
 * @throws IllegalArgumentException if the given {@code topLevel} instance is not an instanceof a top-level object
 */
public TopLevel createCopy(TopLevel topLevel,String URIprefix,String displayId,String version){
  checkReadOnly();
  if (URIprefix == null) {
    URIprefix=extractURIprefix(topLevel.getIdentity());
    URIprefix=checkURIprefix(URIprefix);
  }
 else {
    URIprefix=checkURIprefix(URIprefix);
  }
  if (displayId == null) {
    displayId=topLevel.getDisplayId();
  }
  if (version == null) {
    version=topLevel.getVersion();
  }
  validateIdVersion(displayId,version);
  if (topLevel instanceof Collection) {
    Collection newCollection=((Collection)topLevel).copy(URIprefix,displayId,version);
    addCollection(newCollection);
    return newCollection;
  }
 else   if (topLevel instanceof ComponentDefinition) {
    ComponentDefinition newComponentDefinition=((ComponentDefinition)topLevel).copy(URIprefix,displayId,version);
    addComponentDefinition(newComponentDefinition);
    return newComponentDefinition;
  }
 else   if (topLevel instanceof Model) {
    Model newModel=((Model)topLevel).copy(URIprefix,displayId,version);
    addModel(newModel);
    return newModel;
  }
 else   if (topLevel instanceof ModuleDefinition) {
    ModuleDefinition newModuleDefinition=((ModuleDefinition)topLevel).copy(URIprefix,displayId,version);
    addModuleDefinition(newModuleDefinition);
    return newModuleDefinition;
  }
 else   if (topLevel instanceof Sequence) {
    Sequence newSequence=((Sequence)topLevel).copy(URIprefix,displayId,version);
    addSequence(newSequence);
    return newSequence;
  }
 else   if (topLevel instanceof GenericTopLevel) {
    GenericTopLevel newGenericTopLevel=((GenericTopLevel)topLevel).copy(URIprefix,displayId,version);
    addGenericTopLevel(newGenericTopLevel);
    return newGenericTopLevel;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + topLevel.getIdentity());
  }
}","/** 
 * Creates a copy of the given TopLevel instance with the given arguments, and then adds it to  the corresponding top-level list owned by this SBOLDocument object. <p> This SBOLDcouement object is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the given   {@code URIprefix} is {@code null}, then it is extracted from the given  {@code topLevel} instance. If it does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it.   <p> If either the given  {@code displayId} or {@code version}, then the corresponding field is extracted from the given   {@code topLevel} instance. Both extracted fields are requiredto be valid and not  {@code null}. <p> A top-level instance with a compliant URI is created using the given arguments, and then its display ID, persistent identity, and version fields are set. This  instance is then added to the corresponding top-level list owned by this SBOLDocument object. 
 * @param topLevel
 * @param URIprefix
 * @param displayId
 * @param version
 * @return the created top-level instance
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 * @throws IllegalArgumentException if the {@code defaultURIprefix} is {@code null}
 * @throws IllegalArgumentException if the given {@code URIprefix} is {@code null}
 * @throws IllegalArgumentException if the given {@code URIprefix} is non-compliant
 * @throws IllegalArgumentException if the given {@code displayId} is invalid
 * @throws IllegalArgumentException if the given {@code version} is invalid
 * @throws IllegalArgumentException if the created top-level instance's persistentidentity exists in this SBOLDocument object's other lists of top-level instances.
 * @throws IllegalArgumentException if the created top-level instance's identity URIalready exists.
 * @throws IllegalArgumentException if the given {@code topLevel} instance is not an instanceof a top-level object
 */
public TopLevel createCopy(TopLevel topLevel,String URIprefix,String displayId,String version){
  checkReadOnly();
  if (!URIcompliance.isTopLevelURIcompliant(topLevel)) {
    throw new SBOLValidationException(""String_Node_Str"");
  }
  if (URIprefix == null) {
    URIprefix=extractURIprefix(topLevel.getIdentity());
    URIprefix=checkURIprefix(URIprefix);
  }
 else {
    URIprefix=checkURIprefix(URIprefix);
  }
  if (displayId == null) {
    displayId=topLevel.getDisplayId();
  }
  if (version == null) {
    version=topLevel.getVersion();
  }
  validateIdVersion(displayId,version);
  if (topLevel instanceof Collection) {
    Collection newCollection=((Collection)topLevel).copy(URIprefix,displayId,version);
    addCollection(newCollection);
    return newCollection;
  }
 else   if (topLevel instanceof ComponentDefinition) {
    ComponentDefinition newComponentDefinition=((ComponentDefinition)topLevel).copy(URIprefix,displayId,version);
    addComponentDefinition(newComponentDefinition);
    return newComponentDefinition;
  }
 else   if (topLevel instanceof Model) {
    Model newModel=((Model)topLevel).copy(URIprefix,displayId,version);
    addModel(newModel);
    return newModel;
  }
 else   if (topLevel instanceof ModuleDefinition) {
    ModuleDefinition newModuleDefinition=((ModuleDefinition)topLevel).copy(URIprefix,displayId,version);
    addModuleDefinition(newModuleDefinition);
    return newModuleDefinition;
  }
 else   if (topLevel instanceof Sequence) {
    Sequence newSequence=((Sequence)topLevel).copy(URIprefix,displayId,version);
    addSequence(newSequence);
    return newSequence;
  }
 else   if (topLevel instanceof GenericTopLevel) {
    GenericTopLevel newGenericTopLevel=((GenericTopLevel)topLevel).copy(URIprefix,displayId,version);
    addGenericTopLevel(newGenericTopLevel);
    return newGenericTopLevel;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + topLevel.getIdentity());
  }
}",0.9846905956516144
12652,"@Override protected boolean checkDescendantsURIcompliance(){
  return isURIcompliant(this.getIdentity());
}","@Override protected boolean checkDescendantsURIcompliance(){
  return isTopLevelURIformCompliant(this.getIdentity());
}",0.9380530973451328
12653,"@Override protected boolean checkDescendantsURIcompliance(){
  if (!isURIcompliant(this.getIdentity())) {
    return false;
  }
  boolean allDescendantsCompliant=true;
  if (!this.getSequenceConstraints().isEmpty()) {
    for (    SequenceConstraint sequenceConstraint : this.getSequenceConstraints()) {
      allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(this.getIdentity(),sequenceConstraint.getIdentity());
      if (!allDescendantsCompliant) {
        return allDescendantsCompliant;
      }
    }
  }
  if (!this.getComponents().isEmpty()) {
    for (    Component component : this.getComponents()) {
      allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(this.getIdentity(),component.getIdentity());
      if (!allDescendantsCompliant) {
        return allDescendantsCompliant;
      }
      if (!component.getMapsTos().isEmpty()) {
        for (        MapsTo mapsTo : component.getMapsTos()) {
          allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(component.getIdentity(),mapsTo.getIdentity());
          if (!allDescendantsCompliant) {
            return allDescendantsCompliant;
          }
        }
      }
    }
  }
  if (!this.getSequenceAnnotations().isEmpty()) {
    for (    SequenceAnnotation sequenceAnnotation : this.getSequenceAnnotations()) {
      allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(this.getIdentity(),sequenceAnnotation.getIdentity());
      if (!allDescendantsCompliant) {
        return allDescendantsCompliant;
      }
      Set<Location> locations=sequenceAnnotation.getLocations();
      for (      Location location : locations) {
        if (location instanceof Range) {
          allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(sequenceAnnotation.getIdentity(),location.getIdentity());
          if (!allDescendantsCompliant) {
            return allDescendantsCompliant;
          }
        }
        if (location instanceof Cut) {
          allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(sequenceAnnotation.getIdentity(),location.getIdentity());
          if (!allDescendantsCompliant) {
            return allDescendantsCompliant;
          }
        }
        if (location instanceof GenericLocation) {
          allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(sequenceAnnotation.getIdentity(),location.getIdentity());
          if (!allDescendantsCompliant) {
            return allDescendantsCompliant;
          }
        }
      }
    }
  }
  return allDescendantsCompliant;
}","@Override protected boolean checkDescendantsURIcompliance(){
  if (!isTopLevelURIformCompliant(this.getIdentity()))   return false;
  boolean allDescendantsCompliant=true;
  if (!this.getSequenceConstraints().isEmpty()) {
    for (    SequenceConstraint sequenceConstraint : this.getSequenceConstraints()) {
      allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(this,sequenceConstraint);
      if (!allDescendantsCompliant) {
        return allDescendantsCompliant;
      }
    }
  }
  if (!this.getComponents().isEmpty()) {
    for (    Component component : this.getComponents()) {
      allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(this,component);
      if (!allDescendantsCompliant) {
        return allDescendantsCompliant;
      }
      if (!component.getMapsTos().isEmpty()) {
        for (        MapsTo mapsTo : component.getMapsTos()) {
          allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(component,mapsTo);
          if (!allDescendantsCompliant) {
            return allDescendantsCompliant;
          }
        }
      }
    }
  }
  if (!this.getSequenceAnnotations().isEmpty()) {
    for (    SequenceAnnotation sequenceAnnotation : this.getSequenceAnnotations()) {
      allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(this,sequenceAnnotation);
      if (!allDescendantsCompliant) {
        return allDescendantsCompliant;
      }
      Set<Location> locations=sequenceAnnotation.getLocations();
      for (      Location location : locations) {
        if (location instanceof Range) {
          allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(sequenceAnnotation,location);
          if (!allDescendantsCompliant) {
            return allDescendantsCompliant;
          }
        }
        if (location instanceof Cut) {
          allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(sequenceAnnotation,location);
          if (!allDescendantsCompliant) {
            return allDescendantsCompliant;
          }
        }
        if (location instanceof GenericLocation) {
          allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(sequenceAnnotation,location);
          if (!allDescendantsCompliant) {
            return allDescendantsCompliant;
          }
        }
      }
    }
  }
  return allDescendantsCompliant;
}",0.9564
12654,"@Override protected boolean checkDescendantsURIcompliance(){
  return isURIcompliant(this.getIdentity());
}","@Override protected boolean checkDescendantsURIcompliance(){
  return isTopLevelURIformCompliant(this.getIdentity());
}",0.9380530973451328
12655,"@SafeVarargs protected final <I extends Identified>void addChildSafely(I child,Map<URI,I> siblingsMap,String typeName,Map<URI,? extends Identified>... maps){
  if (isChildURIcompliant(this.getIdentity(),child.getIdentity())) {
    URI persistentId=URI.create(extractPersistentId(child.getIdentity()));
    if (keyExistsInAnyMap(persistentId,maps))     throw new IllegalArgumentException(""String_Node_Str"" + child.identity + ""String_Node_Str""+ persistentId+ ""String_Node_Str""+ typeName);
    if (siblingsMap.containsKey(child.getIdentity()))     throw new IllegalArgumentException(""String_Node_Str"" + child.identity + ""String_Node_Str""+ persistentId+ ""String_Node_Str""+ typeName);
    siblingsMap.put(child.getIdentity(),child);
    I latest=siblingsMap.get(persistentId);
    if (latest == null) {
      siblingsMap.put(persistentId,child);
    }
 else {
      if (isFirstVersionNewer(extractVersion(child.getIdentity()),extractVersion(latest.getIdentity()))) {
        siblingsMap.put(persistentId,child);
      }
    }
  }
 else {
    if (keyExistsInAnyMap(child.getIdentity(),maps))     throw new IllegalArgumentException(""String_Node_Str"" + child.identity + ""String_Node_Str""+ typeName);
    if (siblingsMap.containsKey(child.getIdentity()))     throw new IllegalArgumentException(""String_Node_Str"" + child.identity + ""String_Node_Str""+ typeName);
    siblingsMap.put(child.getIdentity(),child);
  }
}","@SafeVarargs protected final <I extends Identified>void addChildSafely(I child,Map<URI,I> siblingsMap,String typeName,Map<URI,? extends Identified>... maps){
  if (isChildURIformCompliant(this.getIdentity(),child.getIdentity())) {
    URI persistentId=URI.create(extractPersistentId(child.getIdentity()));
    if (keyExistsInAnyMap(persistentId,maps))     throw new IllegalArgumentException(""String_Node_Str"" + child.identity + ""String_Node_Str""+ persistentId+ ""String_Node_Str""+ typeName);
    if (siblingsMap.containsKey(child.getIdentity()))     throw new IllegalArgumentException(""String_Node_Str"" + child.identity + ""String_Node_Str""+ persistentId+ ""String_Node_Str""+ typeName);
    siblingsMap.put(child.getIdentity(),child);
    I latest=siblingsMap.get(persistentId);
    if (latest == null) {
      siblingsMap.put(persistentId,child);
    }
 else {
      if (isFirstVersionNewer(extractVersion(child.getIdentity()),extractVersion(latest.getIdentity()))) {
        siblingsMap.put(persistentId,child);
      }
    }
  }
 else {
    if (keyExistsInAnyMap(child.getIdentity(),maps))     throw new IllegalArgumentException(""String_Node_Str"" + child.identity + ""String_Node_Str""+ typeName);
    if (siblingsMap.containsKey(child.getIdentity()))     throw new IllegalArgumentException(""String_Node_Str"" + child.identity + ""String_Node_Str""+ typeName);
    siblingsMap.put(child.getIdentity(),child);
  }
}",0.997867803837953
12656,"@Override protected boolean checkDescendantsURIcompliance(){
  return isURIcompliant(this.getIdentity());
}","@Override protected boolean checkDescendantsURIcompliance(){
  return isTopLevelURIformCompliant(this.getIdentity());
}",0.9380530973451328
12657,"protected boolean checkDescendantsURIcompliance(){
  if (!isURIcompliant(this.getIdentity())) {
    return false;
  }
  boolean allDescendantsCompliant=true;
  if (!this.getModules().isEmpty()) {
    for (    Module module : this.getModules()) {
      allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(this.getIdentity(),module.getIdentity());
      if (!allDescendantsCompliant) {
        return allDescendantsCompliant;
      }
      if (!module.getMapsTos().isEmpty()) {
        for (        MapsTo mapsTo : module.getMapsTos()) {
          allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(module.getIdentity(),mapsTo.getIdentity());
          if (!allDescendantsCompliant) {
            return allDescendantsCompliant;
          }
        }
      }
    }
  }
  if (!this.getFunctionalComponents().isEmpty()) {
    for (    FunctionalComponent functionalComponent : this.getFunctionalComponents()) {
      allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(this.getIdentity(),functionalComponent.getIdentity());
      if (!allDescendantsCompliant) {
        return allDescendantsCompliant;
      }
      if (!functionalComponent.getMapsTos().isEmpty()) {
        for (        MapsTo mapsTo : functionalComponent.getMapsTos()) {
          allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(functionalComponent.getIdentity(),mapsTo.getIdentity());
          if (!allDescendantsCompliant) {
            return allDescendantsCompliant;
          }
        }
      }
    }
  }
  if (!this.getInteractions().isEmpty()) {
    for (    Interaction interaction : this.getInteractions()) {
      allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(this.getIdentity(),interaction.getIdentity());
      if (!allDescendantsCompliant) {
        return allDescendantsCompliant;
      }
      for (      Participation participation : interaction.getParticipations()) {
        allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(interaction.getIdentity(),participation.getIdentity());
        if (!allDescendantsCompliant) {
          return allDescendantsCompliant;
        }
      }
    }
  }
  return allDescendantsCompliant;
}","protected boolean checkDescendantsURIcompliance(){
  if (!isTopLevelURIformCompliant(this.getIdentity()))   return false;
  boolean allDescendantsCompliant=true;
  if (!this.getModules().isEmpty()) {
    for (    Module module : this.getModules()) {
      allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(this,module);
      if (!allDescendantsCompliant) {
        return allDescendantsCompliant;
      }
      if (!module.getMapsTos().isEmpty()) {
        for (        MapsTo mapsTo : module.getMapsTos()) {
          allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(module,mapsTo);
          if (!allDescendantsCompliant) {
            return allDescendantsCompliant;
          }
        }
      }
    }
  }
  if (!this.getFunctionalComponents().isEmpty()) {
    for (    FunctionalComponent functionalComponent : this.getFunctionalComponents()) {
      allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(this,functionalComponent);
      if (!allDescendantsCompliant) {
        return allDescendantsCompliant;
      }
      if (!functionalComponent.getMapsTos().isEmpty()) {
        for (        MapsTo mapsTo : functionalComponent.getMapsTos()) {
          allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(functionalComponent,mapsTo);
          if (!allDescendantsCompliant) {
            return allDescendantsCompliant;
          }
        }
      }
    }
  }
  if (!this.getInteractions().isEmpty()) {
    for (    Interaction interaction : this.getInteractions()) {
      allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(this,interaction);
      if (!allDescendantsCompliant) {
        return allDescendantsCompliant;
      }
      for (      Participation participation : interaction.getParticipations()) {
        allDescendantsCompliant=allDescendantsCompliant && isChildURIcompliant(interaction,participation);
        if (!allDescendantsCompliant) {
          return allDescendantsCompliant;
        }
      }
    }
  }
  return allDescendantsCompliant;
}",0.9559369202226344
12658,"private static Sequence parseDnaSequenceV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel){
  String elements=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI identity=topLevel.getIdentity();
  URI persistentIdentity=null;
  URI encoding=Sbol2Terms.SequenceURI.DnaSequenceV1;
  List<Annotation> annotations=new ArrayList<>();
  if (URIPrefix != null) {
    if (topLevel.getIdentity().toString().lastIndexOf('/') != -1) {
      displayId=topLevel.getIdentity().toString().substring(topLevel.getIdentity().toString().lastIndexOf('/') + 1);
      displayId=fixDisplayId(displayId);
      identity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,version,typesInURI);
      persistentIdentity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,""String_Node_Str"",typesInURI);
    }
  }
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNASequence.nucleotides)) {
      elements=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      if (URIPrefix != null) {
        identity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,version,typesInURI);
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Sequence sequence=SBOLDoc.getSequence(identity);
  if (sequence == null) {
    sequence=SBOLDoc.createSequence(identity,elements,encoding);
    if (persistentIdentity != null) {
      sequence.setPersistentIdentity(persistentIdentity);
      sequence.setVersion(version);
    }
    if (identity != topLevel.getIdentity())     sequence.setWasDerivedFrom(topLevel.getIdentity());
    if (displayId != null)     sequence.setDisplayId(displayId);
    if (name != null)     sequence.setName(name);
    if (description != null)     sequence.setDescription(description);
    if (!annotations.isEmpty())     sequence.setAnnotations(annotations);
  }
  return sequence;
}","private static Sequence parseDnaSequenceV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel){
  String elements=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI identity=topLevel.getIdentity();
  URI persistentIdentity=null;
  URI encoding=Sbol2Terms.SequenceURI.DnaSequenceV1;
  List<Annotation> annotations=new ArrayList<>();
  if (URIPrefix != null) {
    int slash=topLevel.getIdentity().toString().lastIndexOf('/');
    int pound=topLevel.getIdentity().toString().lastIndexOf('#');
    int colon=topLevel.getIdentity().toString().lastIndexOf(':');
    if (slash != -1 && slash > pound && slash > colon) {
      displayId=topLevel.getIdentity().toString().substring(slash + 1);
    }
 else     if (pound != -1 && pound > colon) {
      displayId=topLevel.getIdentity().toString().substring(pound + 1);
    }
 else     if (colon != -1) {
      displayId=topLevel.getIdentity().toString().substring(colon + 1);
    }
 else {
      displayId=topLevel.getIdentity().toString();
    }
    displayId=fixDisplayId(displayId);
    identity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,version,typesInURI);
    persistentIdentity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,""String_Node_Str"",typesInURI);
  }
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNASequence.nucleotides)) {
      elements=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      if (URIPrefix != null) {
        identity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,version,typesInURI);
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Sequence sequence=SBOLDoc.getSequence(identity);
  if (sequence == null) {
    sequence=SBOLDoc.createSequence(identity,elements,encoding);
    if (persistentIdentity != null) {
      sequence.setPersistentIdentity(persistentIdentity);
      sequence.setVersion(version);
    }
    if (identity != topLevel.getIdentity())     sequence.setWasDerivedFrom(topLevel.getIdentity());
    if (displayId != null)     sequence.setDisplayId(displayId);
    if (name != null)     sequence.setName(name);
    if (description != null)     sequence.setDescription(description);
    if (!annotations.isEmpty())     sequence.setAnnotations(annotations);
  }
  return sequence;
}",0.8875562218890555
12659,"private static ComponentDefinition parseDnaComponentV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> componentDef){
  String displayId=null;
  String name=null;
  String description=null;
  URI seq_identity=null;
  Set<URI> roles=new HashSet<>();
  URI identity=componentDef.getIdentity();
  String persIdentity=""String_Node_Str"";
  List<Annotation> annotations=new ArrayList<>();
  List<SequenceAnnotation> sequenceAnnotations=new ArrayList<>();
  List<Component> components=new ArrayList<>();
  List<SequenceConstraint> sequenceConstraints=new ArrayList<>();
  List<SBOLPair> precedePairs=new ArrayList<>();
  Map<URI,URI> componentDefMap=new HashMap<>();
  Set<URI> type=new HashSet<>();
  type.add(Sbol2Terms.DnaComponentV1URI.type);
  int component_num=0;
  int sa_num=0;
  for (  NamedProperty<QName> namedProperty : componentDef.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      displayId=fixDisplayId(displayId);
      if (URIPrefix != null) {
        persIdentity=createCompliantURI(URIPrefix,TopLevel.COMPONENT_DEFINITION,displayId,""String_Node_Str"",typesInURI).toString();
        identity=createCompliantURI(URIPrefix,TopLevel.COMPONENT_DEFINITION,displayId,version,typesInURI);
      }
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.name)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.type)) {
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.annotations)) {
      SequenceAnnotation sa=parseSequenceAnnotationV1(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),precedePairs,persIdentity,++sa_num);
      sequenceAnnotations.add(sa);
      URI component_identity=createCompliantURI(persIdentity,""String_Node_Str"" + component_num,version);
      AccessType access=AccessType.PUBLIC;
      URI instantiatedComponent=sa.getComponentURI();
      URI originalURI=((NestedDocument<QName>)namedProperty.getValue()).getIdentity();
      componentDefMap.put(originalURI,component_identity);
      sa.setComponent(component_identity);
      Component component=new Component(component_identity,access,instantiatedComponent);
      if (!persIdentity.equals(""String_Node_Str"")) {
        component.setPersistentIdentity(createCompliantURI(persIdentity,""String_Node_Str"" + component_num,""String_Node_Str""));
        component.setDisplayId(""String_Node_Str"" + component_num);
        component.setVersion(version);
      }
      component_num++;
      components.add(component);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.dnaSequence)) {
      seq_identity=parseDnaSequenceV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  if (roles.isEmpty())   roles.add(Sbol2Terms.DnaComponentV1URI.roles);
  int sc_number=0;
  for (  SBOLPair pair : precedePairs) {
    URI sc_identity=createCompliantURI(persIdentity,""String_Node_Str"" + ++sc_number,version);
    URI restrictionURI=RestrictionType.convertToURI(RestrictionType.PRECEDES);
    URI subject=null;
    URI object=null;
    for (    URI key : componentDefMap.keySet()) {
      if (pair.getLeft().equals(key)) {
        subject=componentDefMap.get(key);
      }
 else       if (pair.getRight().equals(key)) {
        object=componentDefMap.get(key);
      }
    }
    SequenceConstraint sc=new SequenceConstraint(sc_identity,restrictionURI,subject,object);
    if (!persIdentity.equals(""String_Node_Str"")) {
      sc.setPersistentIdentity(createCompliantURI(persIdentity,""String_Node_Str"" + sc_number,version));
      sc.setDisplayId(""String_Node_Str"" + sc_number);
      sc.setVersion(version);
    }
    sequenceConstraints.add(sc);
  }
  ComponentDefinition c=SBOLDoc.getComponentDefinition(identity);
  if (c == null) {
    c=SBOLDoc.createComponentDefinition(identity,type);
    if (!persIdentity.equals(""String_Node_Str"")) {
      c.setPersistentIdentity(URI.create(persIdentity));
      c.setVersion(version);
    }
    if (roles != null)     c.setRoles(roles);
    if (identity != componentDef.getIdentity())     c.setWasDerivedFrom(componentDef.getIdentity());
    if (displayId != null)     c.setDisplayId(displayId);
    if (name != null && !name.isEmpty())     c.setName(name);
    if (description != null && !description.isEmpty())     c.setDescription(description);
    if (seq_identity != null)     c.addSequence(seq_identity);
    if (!annotations.isEmpty())     c.setAnnotations(annotations);
    if (!sequenceAnnotations.isEmpty())     c.setSequenceAnnotations(sequenceAnnotations);
    if (!components.isEmpty())     c.setComponents(components);
    if (!sequenceConstraints.isEmpty())     c.setSequenceConstraints(sequenceConstraints);
  }
  return c;
}","private static ComponentDefinition parseDnaComponentV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> componentDef){
  String displayId=null;
  String name=null;
  String description=null;
  URI seq_identity=null;
  Set<URI> roles=new HashSet<>();
  URI identity=componentDef.getIdentity();
  String persIdentity=""String_Node_Str"";
  List<Annotation> annotations=new ArrayList<>();
  List<SequenceAnnotation> sequenceAnnotations=new ArrayList<>();
  List<Component> components=new ArrayList<>();
  List<SequenceConstraint> sequenceConstraints=new ArrayList<>();
  List<SBOLPair> precedePairs=new ArrayList<>();
  Map<URI,URI> componentDefMap=new HashMap<>();
  Set<URI> type=new HashSet<>();
  type.add(Sbol2Terms.DnaComponentV1URI.type);
  int component_num=0;
  int sa_num=0;
  if (URIPrefix != null) {
    int slash=componentDef.getIdentity().toString().lastIndexOf('/');
    int pound=componentDef.getIdentity().toString().lastIndexOf('#');
    int colon=componentDef.getIdentity().toString().lastIndexOf(':');
    if (slash != -1 && slash > pound && slash > colon) {
      displayId=componentDef.getIdentity().toString().substring(slash + 1);
    }
 else     if (pound != -1 && pound > colon) {
      displayId=componentDef.getIdentity().toString().substring(pound + 1);
    }
 else     if (colon != -1) {
      displayId=componentDef.getIdentity().toString().substring(colon + 1);
    }
 else {
      displayId=componentDef.getIdentity().toString();
    }
    displayId=fixDisplayId(displayId);
    identity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,version,typesInURI);
    persIdentity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,""String_Node_Str"",typesInURI).toString();
  }
  for (  NamedProperty<QName> namedProperty : componentDef.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      displayId=fixDisplayId(displayId);
      if (URIPrefix != null) {
        persIdentity=createCompliantURI(URIPrefix,TopLevel.COMPONENT_DEFINITION,displayId,""String_Node_Str"",typesInURI).toString();
        identity=createCompliantURI(URIPrefix,TopLevel.COMPONENT_DEFINITION,displayId,version,typesInURI);
      }
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.name)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.type)) {
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.annotations)) {
      SequenceAnnotation sa=parseSequenceAnnotationV1(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),precedePairs,persIdentity,++sa_num);
      sequenceAnnotations.add(sa);
      URI component_identity=createCompliantURI(persIdentity,""String_Node_Str"" + component_num,version);
      AccessType access=AccessType.PUBLIC;
      URI instantiatedComponent=sa.getComponentURI();
      URI originalURI=((NestedDocument<QName>)namedProperty.getValue()).getIdentity();
      componentDefMap.put(originalURI,component_identity);
      sa.setComponent(component_identity);
      Component component=new Component(component_identity,access,instantiatedComponent);
      if (!persIdentity.equals(""String_Node_Str"")) {
        component.setPersistentIdentity(createCompliantURI(persIdentity,""String_Node_Str"" + component_num,""String_Node_Str""));
        component.setDisplayId(""String_Node_Str"" + component_num);
        component.setVersion(version);
      }
      component_num++;
      components.add(component);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.dnaSequence)) {
      seq_identity=parseDnaSequenceV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  if (roles.isEmpty())   roles.add(Sbol2Terms.DnaComponentV1URI.roles);
  int sc_number=0;
  for (  SBOLPair pair : precedePairs) {
    URI sc_identity=createCompliantURI(persIdentity,""String_Node_Str"" + ++sc_number,version);
    URI restrictionURI=RestrictionType.convertToURI(RestrictionType.PRECEDES);
    URI subject=null;
    URI object=null;
    for (    URI key : componentDefMap.keySet()) {
      if (pair.getLeft().equals(key)) {
        subject=componentDefMap.get(key);
      }
 else       if (pair.getRight().equals(key)) {
        object=componentDefMap.get(key);
      }
    }
    SequenceConstraint sc=new SequenceConstraint(sc_identity,restrictionURI,subject,object);
    if (!persIdentity.equals(""String_Node_Str"")) {
      sc.setPersistentIdentity(createCompliantURI(persIdentity,""String_Node_Str"" + sc_number,version));
      sc.setDisplayId(""String_Node_Str"" + sc_number);
      sc.setVersion(version);
    }
    sequenceConstraints.add(sc);
  }
  ComponentDefinition c=SBOLDoc.getComponentDefinition(identity);
  if (c == null) {
    c=SBOLDoc.createComponentDefinition(identity,type);
    if (!persIdentity.equals(""String_Node_Str"")) {
      c.setPersistentIdentity(URI.create(persIdentity));
      c.setVersion(version);
    }
    if (roles != null)     c.setRoles(roles);
    if (identity != componentDef.getIdentity())     c.setWasDerivedFrom(componentDef.getIdentity());
    if (displayId != null)     c.setDisplayId(displayId);
    if (name != null && !name.isEmpty())     c.setName(name);
    if (description != null && !description.isEmpty())     c.setDescription(description);
    if (seq_identity != null)     c.addSequence(seq_identity);
    if (!annotations.isEmpty())     c.setAnnotations(annotations);
    if (!sequenceAnnotations.isEmpty())     c.setSequenceAnnotations(sequenceAnnotations);
    if (!components.isEmpty())     c.setComponents(components);
    if (!sequenceConstraints.isEmpty())     c.setSequenceConstraints(sequenceConstraints);
  }
  return c;
}",0.9181132737155884
12660,"/** 
 * Validate SBOL objects are compliant in the given   {@code sbolDocument}.
 * @param sbolDocument
 * @throws SBOLValidationException if any top-level objects or any of their children or grandchildren in the given  {@code sbolDocument} contain a non-compliant URI.
 */
public static void validateCompliance(SBOLDocument sbolDocument){
  for (  Collection collection : sbolDocument.getCollections()) {
    if (!collection.checkDescendantsURIcompliance())     throw new SBOLValidationException(""String_Node_Str"",collection);
  }
  for (  Sequence sequence : sbolDocument.getSequences()) {
    if (!sequence.checkDescendantsURIcompliance())     throw new SBOLValidationException(""String_Node_Str"",sequence);
  }
  for (  ComponentDefinition componentDefinition : sbolDocument.getComponentDefinitions()) {
    if (!componentDefinition.checkDescendantsURIcompliance())     throw new SBOLValidationException(""String_Node_Str"",componentDefinition);
  }
  for (  ModuleDefinition moduleDefinition : sbolDocument.getModuleDefinitions()) {
    if (!moduleDefinition.checkDescendantsURIcompliance())     throw new SBOLValidationException(""String_Node_Str"",moduleDefinition);
  }
  for (  Model model : sbolDocument.getModels()) {
    if (!model.checkDescendantsURIcompliance())     throw new SBOLValidationException(""String_Node_Str"",model);
  }
  for (  GenericTopLevel genericTopLevel : sbolDocument.getGenericTopLevels()) {
    if (!genericTopLevel.checkDescendantsURIcompliance())     throw new SBOLValidationException(""String_Node_Str"",genericTopLevel);
  }
}","/** 
 * Validate SBOL objects are compliant in the given   {@code sbolDocument}.
 * @param sbolDocument
 * @throws SBOLValidationException if any top-level objects or any of their children or grandchildren in the given  {@code sbolDocument} contain a non-compliant URI.
 */
public static void validateCompliance(SBOLDocument sbolDocument){
  for (  Collection collection : sbolDocument.getCollections()) {
    if (!URIcompliance.isTopLevelURIcompliant(collection) || !collection.checkDescendantsURIcompliance())     throw new SBOLValidationException(""String_Node_Str"",collection);
  }
  for (  Sequence sequence : sbolDocument.getSequences()) {
    if (!URIcompliance.isTopLevelURIcompliant(sequence) || !sequence.checkDescendantsURIcompliance()) {
      throw new SBOLValidationException(""String_Node_Str"",sequence);
    }
  }
  for (  ComponentDefinition componentDefinition : sbolDocument.getComponentDefinitions()) {
    if (!URIcompliance.isTopLevelURIcompliant(componentDefinition) || !componentDefinition.checkDescendantsURIcompliance()) {
      throw new SBOLValidationException(""String_Node_Str"",componentDefinition);
    }
  }
  for (  ModuleDefinition moduleDefinition : sbolDocument.getModuleDefinitions()) {
    if (!URIcompliance.isTopLevelURIcompliant(moduleDefinition) || !moduleDefinition.checkDescendantsURIcompliance())     throw new SBOLValidationException(""String_Node_Str"",moduleDefinition);
  }
  for (  Model model : sbolDocument.getModels()) {
    if (!URIcompliance.isTopLevelURIcompliant(model) || !model.checkDescendantsURIcompliance())     throw new SBOLValidationException(""String_Node_Str"",model);
  }
  for (  GenericTopLevel genericTopLevel : sbolDocument.getGenericTopLevels()) {
    if (!URIcompliance.isTopLevelURIcompliant(genericTopLevel) || !genericTopLevel.checkDescendantsURIcompliance())     throw new SBOLValidationException(""String_Node_Str"",genericTopLevel);
  }
}",0.7943466974329392
12661,"@Override protected boolean checkDescendantsURIcompliance(){
  return isURIcompliant(this.getIdentity());
}","@Override protected boolean checkDescendantsURIcompliance(){
  return isTopLevelURIformCompliant(this.getIdentity());
}",0.9380530973451328
12662,"/** 
 * Creates a copy of the given TopLevel instance with the given arguments, and then adds it to  the corresponding top-level list owned by this SBOLDocument object. <p> This SBOLDcouement object is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the given   {@code URIprefix} is {@code null}, then it is extracted from the given  {@code topLevel} instance. If it does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it.   <p> If either the given  {@code displayId} or {@code version}, then the corresponding field is extracted from the given   {@code topLevel} instance. Both extracted fields are requiredto be valid and not  {@code null}. <p> A top-level instance with a compliant URI is created using the given arguments, and then its display ID, persistent identity, and version fields are set. This  instance is then added to the corresponding top-level list owned by this SBOLDocument object. 
 * @param topLevel
 * @param URIprefix
 * @param displayId
 * @param version
 * @return the created top-level instance
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 * @throws IllegalArgumentException if the {@code defaultURIprefix} is {@code null}
 * @throws IllegalArgumentException if the given {@code URIprefix} is {@code null}
 * @throws IllegalArgumentException if the given {@code URIprefix} is non-compliant
 * @throws IllegalArgumentException if the given {@code displayId} is invalid
 * @throws IllegalArgumentException if the given {@code version} is invalid
 * @throws IllegalArgumentException if the created top-level instance's persistentidentity exists in this SBOLDocument object's other lists of top-level instances.
 * @throws IllegalArgumentException if the created top-level instance's identity URIalready exists.
 * @throws IllegalArgumentException if the given {@code topLevel} instance is not an instanceof a top-level object
 */
public TopLevel createCopy(TopLevel topLevel,String URIprefix,String displayId,String version){
  checkReadOnly();
  if (URIprefix == null) {
    URIprefix=extractURIprefix(topLevel.getIdentity());
    URIprefix=checkURIprefix(URIprefix);
  }
 else {
    URIprefix=checkURIprefix(URIprefix);
  }
  if (displayId == null) {
    displayId=topLevel.getDisplayId();
  }
  if (version == null) {
    version=topLevel.getVersion();
  }
  validateIdentityData(displayId,version);
  if (topLevel instanceof Collection) {
    Collection newCollection=((Collection)topLevel).copy(URIprefix,displayId,version);
    addCollection(newCollection);
    return newCollection;
  }
 else   if (topLevel instanceof ComponentDefinition) {
    ComponentDefinition newComponentDefinition=((ComponentDefinition)topLevel).copy(URIprefix,displayId,version);
    addComponentDefinition(newComponentDefinition);
    return newComponentDefinition;
  }
 else   if (topLevel instanceof Model) {
    Model newModel=((Model)topLevel).copy(URIprefix,displayId,version);
    addModel(newModel);
    return newModel;
  }
 else   if (topLevel instanceof ModuleDefinition) {
    ModuleDefinition newModuleDefinition=((ModuleDefinition)topLevel).copy(URIprefix,displayId,version);
    addModuleDefinition(newModuleDefinition);
    return newModuleDefinition;
  }
 else   if (topLevel instanceof Sequence) {
    Sequence newSequence=((Sequence)topLevel).copy(URIprefix,displayId,version);
    addSequence(newSequence);
    return newSequence;
  }
 else   if (topLevel instanceof GenericTopLevel) {
    GenericTopLevel newGenericTopLevel=((GenericTopLevel)topLevel).copy(URIprefix,displayId,version);
    addGenericTopLevel(newGenericTopLevel);
    return newGenericTopLevel;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + topLevel.getIdentity());
  }
}","/** 
 * Creates a copy of the given TopLevel instance with the given arguments, and then adds it to  the corresponding top-level list owned by this SBOLDocument object. <p> This SBOLDcouement object is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the given   {@code URIprefix} is {@code null}, then it is extracted from the given  {@code topLevel} instance. If it does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it.   <p> If either the given  {@code displayId} or {@code version}, then the corresponding field is extracted from the given   {@code topLevel} instance. Both extracted fields are requiredto be valid and not  {@code null}. <p> A top-level instance with a compliant URI is created using the given arguments, and then its display ID, persistent identity, and version fields are set. This  instance is then added to the corresponding top-level list owned by this SBOLDocument object. 
 * @param topLevel
 * @param URIprefix
 * @param displayId
 * @param version
 * @return the created top-level instance
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 * @throws IllegalArgumentException if the {@code defaultURIprefix} is {@code null}
 * @throws IllegalArgumentException if the given {@code URIprefix} is {@code null}
 * @throws IllegalArgumentException if the given {@code URIprefix} is non-compliant
 * @throws IllegalArgumentException if the given {@code displayId} is invalid
 * @throws IllegalArgumentException if the given {@code version} is invalid
 * @throws IllegalArgumentException if the created top-level instance's persistentidentity exists in this SBOLDocument object's other lists of top-level instances.
 * @throws IllegalArgumentException if the created top-level instance's identity URIalready exists.
 * @throws IllegalArgumentException if the given {@code topLevel} instance is not an instanceof a top-level object
 */
public TopLevel createCopy(TopLevel topLevel,String URIprefix,String displayId,String version){
  checkReadOnly();
  if (URIprefix == null) {
    URIprefix=extractURIprefix(topLevel.getIdentity());
    URIprefix=checkURIprefix(URIprefix);
  }
 else {
    URIprefix=checkURIprefix(URIprefix);
  }
  if (displayId == null) {
    displayId=topLevel.getDisplayId();
  }
  if (version == null) {
    version=topLevel.getVersion();
  }
  validateIdVersion(displayId,version);
  if (topLevel instanceof Collection) {
    Collection newCollection=((Collection)topLevel).copy(URIprefix,displayId,version);
    addCollection(newCollection);
    return newCollection;
  }
 else   if (topLevel instanceof ComponentDefinition) {
    ComponentDefinition newComponentDefinition=((ComponentDefinition)topLevel).copy(URIprefix,displayId,version);
    addComponentDefinition(newComponentDefinition);
    return newComponentDefinition;
  }
 else   if (topLevel instanceof Model) {
    Model newModel=((Model)topLevel).copy(URIprefix,displayId,version);
    addModel(newModel);
    return newModel;
  }
 else   if (topLevel instanceof ModuleDefinition) {
    ModuleDefinition newModuleDefinition=((ModuleDefinition)topLevel).copy(URIprefix,displayId,version);
    addModuleDefinition(newModuleDefinition);
    return newModuleDefinition;
  }
 else   if (topLevel instanceof Sequence) {
    Sequence newSequence=((Sequence)topLevel).copy(URIprefix,displayId,version);
    addSequence(newSequence);
    return newSequence;
  }
 else   if (topLevel instanceof GenericTopLevel) {
    GenericTopLevel newGenericTopLevel=((GenericTopLevel)topLevel).copy(URIprefix,displayId,version);
    addGenericTopLevel(newGenericTopLevel);
    return newGenericTopLevel;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + topLevel.getIdentity());
  }
}",0.9977798093248008
12663,"/** 
 * Creates a ComponentDefinition instance with the given arguments, and then adds it to this SBOLDocument object's list of ComponentDefinition instances. <p> This SBOLDcouement object is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the given   {@code URIprefix} does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it. <p> This method requires that the given  {@code URIprefix},   {@code displayId},  and   {@code version} are not {@code null} and are valid. <p> A ComponentDefinition instance is created with a compliant URI. This URI is composed from  the given  {@code URIprefix}, the optional type   {@link TopLevel#COMPONENT_DEFINITION},  the given   {@code displayId}, and   {@code version}.  The display ID, persistent identity, and version fields of this instance are then set accordingly.
 * @param URIprefix
 * @param displayId
 * @param version
 * @param types
 * @return the created ComponentDefinition instance
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 * @throws IllegalArgumentException if the {@code defaultURIprefix} is {@code null}
 * @throws IllegalArgumentException if the given {@code URIprefix} is {@code null}
 * @throws IllegalArgumentException if the given {@code URIprefix} is non-compliant
 * @throws IllegalArgumentException if the given {@code displayId} is invalid
 * @throws IllegalArgumentException if the given {@code version} is invalid
 * @throws IllegalArgumentException if the created ComponentDefinition instance's persistentidentity exists in this SBOLDocument object's other lists of top-level instances.
 * @throws IllegalArgumentException if the created ComponentDefinition instance's identity URIexists in this SBOLDocument object's list of ComponentDefinition instances.
 */
public ComponentDefinition createComponentDefinition(String URIprefix,String displayId,String version,Set<URI> types){
  checkReadOnly();
  URIprefix=checkURIprefix(URIprefix);
  validateIdentityData(displayId,version);
  ComponentDefinition cd=createComponentDefinition(createCompliantURI(URIprefix,TopLevel.COMPONENT_DEFINITION,displayId,version,typesInURIs),types);
  cd.setDisplayId(displayId);
  cd.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.COMPONENT_DEFINITION,displayId,""String_Node_Str"",typesInURIs));
  cd.setVersion(version);
  return cd;
}","/** 
 * Creates a ComponentDefinition instance with the given arguments, and then adds it to this SBOLDocument object's list of ComponentDefinition instances. <p> This SBOLDcouement object is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the given   {@code URIprefix} does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it. <p> This method requires that the given  {@code URIprefix},   {@code displayId},  and   {@code version} are not {@code null} and are valid. <p> A ComponentDefinition instance is created with a compliant URI. This URI is composed from  the given  {@code URIprefix}, the optional type   {@link TopLevel#COMPONENT_DEFINITION},  the given   {@code displayId}, and   {@code version}.  The display ID, persistent identity, and version fields of this instance are then set accordingly.
 * @param URIprefix
 * @param displayId
 * @param version
 * @param types
 * @return the created ComponentDefinition instance
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 * @throws IllegalArgumentException if the {@code defaultURIprefix} is {@code null}
 * @throws IllegalArgumentException if the given {@code URIprefix} is {@code null}
 * @throws IllegalArgumentException if the given {@code URIprefix} is non-compliant
 * @throws IllegalArgumentException if the given {@code displayId} is invalid
 * @throws IllegalArgumentException if the given {@code version} is invalid
 * @throws IllegalArgumentException if the created ComponentDefinition instance's persistentidentity exists in this SBOLDocument object's other lists of top-level instances.
 * @throws IllegalArgumentException if the created ComponentDefinition instance's identity URIexists in this SBOLDocument object's list of ComponentDefinition instances.
 */
public ComponentDefinition createComponentDefinition(String URIprefix,String displayId,String version,Set<URI> types){
  checkReadOnly();
  URIprefix=checkURIprefix(URIprefix);
  validateIdVersion(displayId,version);
  ComponentDefinition cd=createComponentDefinition(createCompliantURI(URIprefix,TopLevel.COMPONENT_DEFINITION,displayId,version,typesInURIs),types);
  cd.setDisplayId(displayId);
  cd.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.COMPONENT_DEFINITION,displayId,""String_Node_Str"",typesInURIs));
  cd.setVersion(version);
  return cd;
}",0.9965085233107416
12664,"/** 
 * Creates a Sequence instance with the given arguments, and then adds it to this SBOLDocument object's list of Sequence instances. <p> This SBOLDcouement object is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the given   {@code URIprefix} does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it. <p> This method requires that the given  {@code URIprefix},   {@code displayId},  and   {@code version} are not {@code null} and are valid. <p> A Sequence instance is created with a compliant URI. This URI is composed from  the given  {@code URIprefix}, the optional type   {@link TopLevel#SEQUENCE},  the given   {@code displayId}, and   {@code version}.  The display ID, persistent identity, and version fields of this instance are then set accordingly. 
 * @param URIprefix
 * @param displayId
 * @param version
 * @param elements
 * @param encoding
 * @return the created Sequence instance
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 * @throws IllegalArgumentException if the {@code defaultURIprefix} is {@code null}
 * @throws IllegalArgumentException if the given {@code URIprefix} is {@code null}
 * @throws IllegalArgumentException if the given {@code URIprefix} is non-compliant
 * @throws IllegalArgumentException if the given {@code displayId} is invalid
 * @throws IllegalArgumentException if the given {@code version} is invalid
 * @throws IllegalArgumentException if the created Sequence instance's persistentidentity exists in this SBOLDocument object's other lists of top-level instances.
 * @throws IllegalArgumentException if the created Sequence instance's identity URIexists in this SBOLDocument object's list of Sequence instances.
 */
public Sequence createSequence(String URIprefix,String displayId,String version,String elements,URI encoding){
  checkReadOnly();
  URIprefix=checkURIprefix(URIprefix);
  validateIdentityData(displayId,version);
  Sequence s=createSequence(createCompliantURI(URIprefix,TopLevel.SEQUENCE,displayId,version,typesInURIs),elements,encoding);
  s.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.SEQUENCE,displayId,""String_Node_Str"",typesInURIs));
  s.setDisplayId(displayId);
  s.setVersion(version);
  return s;
}","/** 
 * Creates a Sequence instance with the given arguments, and then adds it to this SBOLDocument object's list of Sequence instances. <p> This SBOLDcouement object is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the given   {@code URIprefix} does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it. <p> This method requires that the given  {@code URIprefix},   {@code displayId},  and   {@code version} are not {@code null} and are valid. <p> A Sequence instance is created with a compliant URI. This URI is composed from  the given  {@code URIprefix}, the optional type   {@link TopLevel#SEQUENCE},  the given   {@code displayId}, and   {@code version}.  The display ID, persistent identity, and version fields of this instance are then set accordingly. 
 * @param URIprefix
 * @param displayId
 * @param version
 * @param elements
 * @param encoding
 * @return the created Sequence instance
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 * @throws IllegalArgumentException if the {@code defaultURIprefix} is {@code null}
 * @throws IllegalArgumentException if the given {@code URIprefix} is {@code null}
 * @throws IllegalArgumentException if the given {@code URIprefix} is non-compliant
 * @throws IllegalArgumentException if the given {@code displayId} is invalid
 * @throws IllegalArgumentException if the given {@code version} is invalid
 * @throws IllegalArgumentException if the created Sequence instance's persistentidentity exists in this SBOLDocument object's other lists of top-level instances.
 * @throws IllegalArgumentException if the created Sequence instance's identity URIexists in this SBOLDocument object's list of Sequence instances.
 */
public Sequence createSequence(String URIprefix,String displayId,String version,String elements,URI encoding){
  checkReadOnly();
  URIprefix=checkURIprefix(URIprefix);
  validateIdVersion(displayId,version);
  Sequence s=createSequence(createCompliantURI(URIprefix,TopLevel.SEQUENCE,displayId,version,typesInURIs),elements,encoding);
  s.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.SEQUENCE,displayId,""String_Node_Str"",typesInURIs));
  s.setDisplayId(displayId);
  s.setVersion(version);
  return s;
}",0.996338574197717
12665,"/** 
 * Creates a Collection instance with the given arguments, and then adds it to this SBOLDocument object's list of Collection instances. <p> This SBOLDcouement object is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the given   {@code URIprefix} does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it. <p> This method requires the  {@code defaultURIprefix} field to be set, andthe given  {@code URIprefix},   {@code displayId}, and   {@code version} are not{@code null} and valid.<p> A Collection instance is created with a compliant URI. This URI is composed from  the given  {@code URIprefix}, the optional type   {@link TopLevel#COLLECTION},  the given   {@code displayId}, and   {@code version}.  The display ID, persistent identity, and version fields of this instance are then set accordingly.
 * @param URIprefix
 * @param displayId
 * @param version
 * @return the created Collection instance
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 * @throws IllegalArgumentException if the defaultURIprefix is {@code null}
 * @throws IllegalArgumentException if the given {@code URIprefix} is {@code null}
 * @throws IllegalArgumentException if the given {@code URIprefix} is non-compliant
 * @throws IllegalArgumentException if the given {@code displayId} is invalid
 * @throws IllegalArgumentException if the given {@code version} is invalid
 * @throws IllegalArgumentException if the created Collection instance's persistentidentity exists in this SBOLDocument object's other lists of top-level instances.
 * @throws IllegalArgumentException if the created Collection instance's identity URIexists in this SBOLDocument object's list of Collection instances.
 */
public Collection createCollection(String URIprefix,String displayId,String version){
  checkReadOnly();
  URIprefix=checkURIprefix(URIprefix);
  validateIdentityData(displayId,version);
  Collection c=createCollection(createCompliantURI(URIprefix,TopLevel.COLLECTION,displayId,version,typesInURIs));
  c.setDisplayId(displayId);
  c.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.COLLECTION,displayId,""String_Node_Str"",typesInURIs));
  c.setVersion(version);
  return c;
}","/** 
 * Creates a Collection instance with the given arguments, and then adds it to this SBOLDocument object's list of Collection instances. <p> This SBOLDcouement object is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the given   {@code URIprefix} does not end with one of the following delimiters: ""/"", "":"", or ""#"", then""/"" is appended to the end of it. <p> This method requires the  {@code defaultURIprefix} field to be set, andthe given  {@code URIprefix},   {@code displayId}, and   {@code version} are not{@code null} and valid.<p> A Collection instance is created with a compliant URI. This URI is composed from  the given  {@code URIprefix}, the optional type   {@link TopLevel#COLLECTION},  the given   {@code displayId}, and   {@code version}.  The display ID, persistent identity, and version fields of this instance are then set accordingly.
 * @param URIprefix
 * @param displayId
 * @param version
 * @return the created Collection instance
 * @throws SBOLValidationException if this SBOLDocument object is not compliant
 * @throws IllegalArgumentException if the defaultURIprefix is {@code null}
 * @throws IllegalArgumentException if the given {@code URIprefix} is {@code null}
 * @throws IllegalArgumentException if the given {@code URIprefix} is non-compliant
 * @throws IllegalArgumentException if the given {@code displayId} is invalid
 * @throws IllegalArgumentException if the given {@code version} is invalid
 * @throws IllegalArgumentException if the created Collection instance's persistentidentity exists in this SBOLDocument object's other lists of top-level instances.
 * @throws IllegalArgumentException if the created Collection instance's identity URIexists in this SBOLDocument object's list of Collection instances.
 */
public Collection createCollection(String URIprefix,String displayId,String version){
  checkReadOnly();
  URIprefix=checkURIprefix(URIprefix);
  validateIdVersion(displayId,version);
  Collection c=createCollection(createCompliantURI(URIprefix,TopLevel.COLLECTION,displayId,version,typesInURIs));
  c.setDisplayId(displayId);
  c.setPersistentIdentity(createCompliantURI(URIprefix,TopLevel.COLLECTION,displayId,""String_Node_Str"",typesInURIs));
  c.setVersion(version);
  return c;
}",0.9962938739917158
12666,"private static ComponentDefinition parseDnaComponentV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> componentDef){
  String displayId=null;
  String name=null;
  String description=null;
  URI seq_identity=null;
  Set<URI> roles=new HashSet<>();
  URI identity=componentDef.getIdentity();
  String persIdentity=""String_Node_Str"";
  List<Annotation> annotations=new ArrayList<>();
  List<SequenceAnnotation> sequenceAnnotations=new ArrayList<>();
  List<Component> components=new ArrayList<>();
  List<SequenceConstraint> sequenceConstraints=new ArrayList<>();
  List<SBOLPair> precedePairs=new ArrayList<>();
  Map<URI,URI> componentDefMap=new HashMap<>();
  Set<URI> type=new HashSet<>();
  type.add(Sbol2Terms.DnaComponentV1URI.type);
  int component_num=0;
  int sa_num=0;
  for (  NamedProperty<QName> namedProperty : componentDef.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      displayId=fixDisplayId(displayId);
      if (URIPrefix != null) {
        persIdentity=createCompliantURI(URIPrefix,TopLevel.COMPONENT_DEFINITION,displayId,""String_Node_Str"",typesInURI).toString();
        identity=createCompliantURI(URIPrefix,TopLevel.COMPONENT_DEFINITION,displayId,version,typesInURI);
      }
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.name)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.type)) {
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.annotations)) {
      SequenceAnnotation sa=parseSequenceAnnotationV1(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),precedePairs,persIdentity,++sa_num);
      sequenceAnnotations.add(sa);
      URI component_identity=createCompliantURI(persIdentity,""String_Node_Str"" + ++component_num,version);
      AccessType access=AccessType.PUBLIC;
      URI instantiatedComponent=sa.getComponentURI();
      URI originalURI=((NestedDocument<QName>)namedProperty.getValue()).getIdentity();
      componentDefMap.put(originalURI,component_identity);
      sa.setComponent(component_identity);
      Component component=new Component(component_identity,access,instantiatedComponent);
      if (!persIdentity.equals(""String_Node_Str"")) {
        component.setPersistentIdentity(createCompliantURI(persIdentity,""String_Node_Str"" + ++component_num,""String_Node_Str""));
        component.setDisplayId(""String_Node_Str"" + component_num);
        component.setVersion(version);
      }
      components.add(component);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.dnaSequence)) {
      seq_identity=parseDnaSequenceV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  if (roles.isEmpty())   roles.add(Sbol2Terms.DnaComponentV1URI.roles);
  int sc_number=0;
  for (  SBOLPair pair : precedePairs) {
    URI sc_identity=createCompliantURI(persIdentity,""String_Node_Str"" + ++sc_number,version);
    URI restrictionURI=RestrictionType.convertToURI(RestrictionType.PRECEDES);
    URI subject=null;
    URI object=null;
    for (    URI key : componentDefMap.keySet()) {
      if (pair.getLeft().equals(key)) {
        subject=componentDefMap.get(key);
      }
 else       if (pair.getRight().equals(key)) {
        object=componentDefMap.get(key);
      }
    }
    SequenceConstraint sc=new SequenceConstraint(sc_identity,restrictionURI,subject,object);
    if (!persIdentity.equals(""String_Node_Str"")) {
      sc.setPersistentIdentity(createCompliantURI(persIdentity,""String_Node_Str"" + sc_number,version));
      sc.setDisplayId(""String_Node_Str"" + sc_number);
      sc.setVersion(version);
    }
    sequenceConstraints.add(sc);
  }
  ComponentDefinition c=SBOLDoc.getComponentDefinition(identity);
  if (c == null) {
    c=SBOLDoc.createComponentDefinition(identity,type);
    if (!persIdentity.equals(""String_Node_Str"")) {
      c.setPersistentIdentity(URI.create(persIdentity));
      c.setVersion(version);
    }
    if (roles != null)     c.setRoles(roles);
    if (identity != componentDef.getIdentity())     c.setWasDerivedFrom(componentDef.getIdentity());
    if (displayId != null)     c.setDisplayId(displayId);
    if (name != null && !name.isEmpty())     c.setName(name);
    if (description != null && !description.isEmpty())     c.setDescription(description);
    if (seq_identity != null)     c.addSequence(seq_identity);
    if (!annotations.isEmpty())     c.setAnnotations(annotations);
    if (!sequenceAnnotations.isEmpty())     c.setSequenceAnnotations(sequenceAnnotations);
    if (!components.isEmpty())     c.setComponents(components);
    if (!sequenceConstraints.isEmpty())     c.setSequenceConstraints(sequenceConstraints);
  }
  return c;
}","private static ComponentDefinition parseDnaComponentV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> componentDef){
  String displayId=null;
  String name=null;
  String description=null;
  URI seq_identity=null;
  Set<URI> roles=new HashSet<>();
  URI identity=componentDef.getIdentity();
  String persIdentity=""String_Node_Str"";
  List<Annotation> annotations=new ArrayList<>();
  List<SequenceAnnotation> sequenceAnnotations=new ArrayList<>();
  List<Component> components=new ArrayList<>();
  List<SequenceConstraint> sequenceConstraints=new ArrayList<>();
  List<SBOLPair> precedePairs=new ArrayList<>();
  Map<URI,URI> componentDefMap=new HashMap<>();
  Set<URI> type=new HashSet<>();
  type.add(Sbol2Terms.DnaComponentV1URI.type);
  int component_num=0;
  int sa_num=0;
  for (  NamedProperty<QName> namedProperty : componentDef.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      displayId=fixDisplayId(displayId);
      if (URIPrefix != null) {
        persIdentity=createCompliantURI(URIPrefix,TopLevel.COMPONENT_DEFINITION,displayId,""String_Node_Str"",typesInURI).toString();
        identity=createCompliantURI(URIPrefix,TopLevel.COMPONENT_DEFINITION,displayId,version,typesInURI);
      }
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.name)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.type)) {
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.annotations)) {
      SequenceAnnotation sa=parseSequenceAnnotationV1(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),precedePairs,persIdentity,++sa_num);
      sequenceAnnotations.add(sa);
      URI component_identity=createCompliantURI(persIdentity,""String_Node_Str"" + component_num,version);
      AccessType access=AccessType.PUBLIC;
      URI instantiatedComponent=sa.getComponentURI();
      URI originalURI=((NestedDocument<QName>)namedProperty.getValue()).getIdentity();
      componentDefMap.put(originalURI,component_identity);
      sa.setComponent(component_identity);
      Component component=new Component(component_identity,access,instantiatedComponent);
      if (!persIdentity.equals(""String_Node_Str"")) {
        component.setPersistentIdentity(createCompliantURI(persIdentity,""String_Node_Str"" + component_num,""String_Node_Str""));
        component.setDisplayId(""String_Node_Str"" + component_num);
        component.setVersion(version);
      }
      component_num++;
      components.add(component);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.dnaSequence)) {
      seq_identity=parseDnaSequenceV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  if (roles.isEmpty())   roles.add(Sbol2Terms.DnaComponentV1URI.roles);
  int sc_number=0;
  for (  SBOLPair pair : precedePairs) {
    URI sc_identity=createCompliantURI(persIdentity,""String_Node_Str"" + ++sc_number,version);
    URI restrictionURI=RestrictionType.convertToURI(RestrictionType.PRECEDES);
    URI subject=null;
    URI object=null;
    for (    URI key : componentDefMap.keySet()) {
      if (pair.getLeft().equals(key)) {
        subject=componentDefMap.get(key);
      }
 else       if (pair.getRight().equals(key)) {
        object=componentDefMap.get(key);
      }
    }
    SequenceConstraint sc=new SequenceConstraint(sc_identity,restrictionURI,subject,object);
    if (!persIdentity.equals(""String_Node_Str"")) {
      sc.setPersistentIdentity(createCompliantURI(persIdentity,""String_Node_Str"" + sc_number,version));
      sc.setDisplayId(""String_Node_Str"" + sc_number);
      sc.setVersion(version);
    }
    sequenceConstraints.add(sc);
  }
  ComponentDefinition c=SBOLDoc.getComponentDefinition(identity);
  if (c == null) {
    c=SBOLDoc.createComponentDefinition(identity,type);
    if (!persIdentity.equals(""String_Node_Str"")) {
      c.setPersistentIdentity(URI.create(persIdentity));
      c.setVersion(version);
    }
    if (roles != null)     c.setRoles(roles);
    if (identity != componentDef.getIdentity())     c.setWasDerivedFrom(componentDef.getIdentity());
    if (displayId != null)     c.setDisplayId(displayId);
    if (name != null && !name.isEmpty())     c.setName(name);
    if (description != null && !description.isEmpty())     c.setDescription(description);
    if (seq_identity != null)     c.addSequence(seq_identity);
    if (!annotations.isEmpty())     c.setAnnotations(annotations);
    if (!sequenceAnnotations.isEmpty())     c.setSequenceAnnotations(sequenceAnnotations);
    if (!components.isEmpty())     c.setComponents(components);
    if (!sequenceConstraints.isEmpty())     c.setSequenceConstraints(sequenceConstraints);
  }
  return c;
}",0.9974170094709652
12667,"public static void main(String[] args){
  try {
    InputStream file=readTester.class.getResourceAsStream(path + filenameV1_1);
    if (file == null)     file=readTester.class.getResourceAsStream(""String_Node_Str"" + path + filenameV1_1);
    SBOLReader.setURIPrefix(""String_Node_Str"");
    SBOLReader.setVersion(""String_Node_Str"");
    SBOLReader.setTypesInURI(true);
    SBOLDocument document1=SBOLReader.read(file);
    document1=SBOLTestUtils.writeAndRead(document1);
    SBOLWriter.writeRDF(document1,(System.out));
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    InputStream file=readTester.class.getResourceAsStream(path + filenameV1_1);
    if (file == null)     file=readTester.class.getResourceAsStream(""String_Node_Str"" + path + filenameV1_1);
    SBOLReader.setURIPrefix(""String_Node_Str"");
    SBOLReader.setVersion(""String_Node_Str"");
    SBOLReader.setTypesInURI(true);
    SBOLDocument document1=SBOLReader.read(file);
    SBOLDocument document2=new SBOLDocument();
    for (    ComponentDefinition cd : document1.getComponentDefinitions()) {
      document2.createCopy(cd);
    }
    document2=SBOLTestUtils.writeAndRead(document2);
    SBOLWriter.writeRDF(document2,(System.out));
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}",0.8742424242424243
12668,"/** 
 * Returns the type of the nested   {@code value} property.
 * @return the type of the nested QName {@code value} property if its value isof a NestedDocument type (see  {@link uk.ac.ncl.intbio.core.datatree.NestedDocument}), or   {@code null} otherwise.
 */
public QName getNestedQName(){
  if (value.getValue() instanceof NestedDocument<?>) {
    return ((NestedDocument<QName>)value.getValue()).getType();
  }
  return null;
}","/** 
 * Returns the type of the nested   {@code value} property.
 * @return the nested QName of the {@code value} property if its value isof a nested list of Annotations, or  {@code null} otherwise.
 */
public QName getNestedQName(){
  if (value.getValue() instanceof NestedDocument<?>) {
    return ((NestedDocument<QName>)value.getValue()).getType();
  }
  return null;
}",0.7096774193548387
12669,"/** 
 * Returns a string representation of the   {@code value} property.
 * @return a string representation of the {@code value} property if its value is of a StringLiteral type defined by  {@link uk.ac.ncl.intbio.core.datatree.StringLiteral}, or   {@code null}otherwise.
 */
public String getStringValue(){
  if (value.getValue() instanceof StringLiteral) {
    return ((Literal<QName>)value.getValue()).getValue().toString();
  }
  return null;
}","/** 
 * Returns a string representation of the   {@code value} property.
 * @return a string representation of the {@code value} property if its value is of String type, or  {@code null} otherwise.
 */
public String getStringValue(){
  if (value.getValue() instanceof StringLiteral) {
    return ((Literal<QName>)value.getValue()).getValue().toString();
  }
  return null;
}",0.8540145985401459
12670,"/** 
 * Returns a URI representation of the   {@code value} property.
 * @return a URI representation of the {@code value} property if itsthe value is of a UriLiteral type defined by  {@link uk.ac.ncl.intbio.core.datatree.UriLiteral},  or   {@code null} otherwise.
 */
public URI getURIValue(){
  if (value.getValue() instanceof UriLiteral) {
    return ((UriLiteral<QName>)value.getValue()).getValue();
  }
  return null;
}","/** 
 * Returns a URI representation of the   {@code value} property.
 * @return a URI representation of the {@code value} property if itsthe value is of a URI type, or  {@code null} otherwise.
 */
public URI getURIValue(){
  if (value.getValue() instanceof UriLiteral) {
    return ((UriLiteral<QName>)value.getValue()).getValue();
  }
  return null;
}",0.8983268983268984
12671,"/** 
 * Returns a Double representation of the   {@code value} property.
 * @return a Double representation of the {@code value} property if its value is of a DoubleLiteral type defined by  {@link uk.ac.ncl.intbio.core.datatree.DoubleLiteral}, or   {@code null}otherwise.
 */
public Double getDoubleValue(){
  if (value.getValue() instanceof DoubleLiteral) {
    return ((DoubleLiteral<QName>)value.getValue()).getValue();
  }
  return null;
}","/** 
 * Returns a Double representation of the   {@code value} property.
 * @return a Double representation of the {@code value} property if its value is of Double type, or  {@code null} otherwise.
 */
public Double getDoubleValue(){
  if (value.getValue() instanceof DoubleLiteral) {
    return ((DoubleLiteral<QName>)value.getValue()).getValue();
  }
  return null;
}",0.8522167487684729
12672,"/** 
 * Returns the list of Annotations of the nested   {@code value} property.
 * @return the list of Annotations of the nested {@code value} property if its value isof a NestedDocument type (see  {@link uk.ac.ncl.intbio.core.datatree.NestedDocument}), or   {@code null} otherwise.
 */
public List<Annotation> getAnnotations(){
  if (value.getValue() instanceof NestedDocument<?>) {
    List<Annotation> annotations=new ArrayList<>();
    for (    NamedProperty<QName> namedProperty : ((NestedDocument<QName>)value.getValue()).getProperties()) {
      annotations.add(new Annotation(namedProperty));
    }
    return annotations;
  }
  return null;
}","/** 
 * Returns the list of Annotations of the nested   {@code value} property.
 * @return the list of Annotations of the nested {@code value} property if its value isof a nested list of Annotations, or  {@code null} otherwise.
 */
public List<Annotation> getAnnotations(){
  if (value.getValue() instanceof NestedDocument<?>) {
    List<Annotation> annotations=new ArrayList<>();
    for (    NamedProperty<QName> namedProperty : ((NestedDocument<QName>)value.getValue()).getProperties()) {
      annotations.add(new Annotation(namedProperty));
    }
    return annotations;
  }
  return null;
}",0.9141940657578188
12673,"/** 
 * Returns a Integer representation of the   {@code value} property.
 * @return a Integer representation of the {@code value} property if its value is of a IntegerLiteral type defined by  {@link uk.ac.ncl.intbio.core.datatree.IntegerLiteral}, or   {@code null}otherwise.
 */
public Integer getIntegerValue(){
  if (value.getValue() instanceof IntegerLiteral) {
    return ((IntegerLiteral<QName>)value.getValue()).getValue();
  }
  return null;
}","/** 
 * Returns a Integer representation of the   {@code value} property.
 * @return a Integer representation of the {@code value} property if its value is of Integer type, or  {@code null} otherwise.
 */
public Integer getIntegerValue(){
  if (value.getValue() instanceof IntegerLiteral) {
    return ((IntegerLiteral<QName>)value.getValue()).getValue();
  }
  return null;
}",0.8512696493349455
12674,"/** 
 * Returns the identity URI of the nested   {@code value} property.
 * @return the identity URI of the nested QName {@code value} property if its value isof a NestedDocument type (see  {@link uk.ac.ncl.intbio.core.datatree.NestedDocument}), or   {@code null} otherwise.
 */
public URI getNestedIdentity(){
  if (value.getValue() instanceof NestedDocument<?>) {
    return ((NestedDocument<QName>)value.getValue()).getIdentity();
  }
  return null;
}","/** 
 * Returns the identity URI of the nested   {@code value} property.
 * @return the identity URI of the nested QName {@code value} property if its value isof a nested list of Annotations, or  {@code null} otherwise.
 */
public URI getNestedIdentity(){
  if (value.getValue() instanceof NestedDocument<?>) {
    return ((NestedDocument<QName>)value.getValue()).getIdentity();
  }
  return null;
}",0.8745603751465416
12675,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  Annotation other=(Annotation)obj;
  if (value == null) {
    if (other.value != null)     return false;
  }
 else   if (!value.equals(other.value)) {
    if (!this.getQName().equals(other.getQName())) {
      return false;
    }
 else     if ((this.getValue().getValue() instanceof Literal<?>) && (other.getValue().getValue() instanceof Literal<?>)) {
      if (!this.getStringValue().equals(other.getStringValue())) {
        return false;
      }
    }
 else     if ((this.getValue().getValue() instanceof NestedDocument<?>) && (other.getValue().getValue() instanceof NestedDocument<?>)) {
      if (!this.getNestedQName().equals(other.getNestedQName())) {
        return false;
      }
      if (!this.getNestedIdentity().equals(other.getNestedIdentity())) {
        return false;
      }
      if (this.getAnnotations().size() != other.getAnnotations().size()) {
        return false;
      }
      for (      Annotation annotation1 : this.getAnnotations()) {
        boolean foundIt=false;
        for (        Annotation annotation2 : other.getAnnotations()) {
          if (annotation1.equals(annotation2)) {
            foundIt=true;
            break;
          }
        }
        if (foundIt == false)         break;
      }
    }
 else {
      return false;
    }
    return true;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  Annotation other=(Annotation)obj;
  if (value == null) {
    if (other.value != null)     return false;
  }
 else   if (!value.equals(other.value)) {
    if (!this.getQName().equals(other.getQName())) {
      return false;
    }
 else     if ((this.getValue().getValue() instanceof StringLiteral<?>) && (other.getValue().getValue() instanceof StringLiteral<?>)) {
      if (!this.getStringValue().equals(other.getStringValue())) {
        return false;
      }
    }
 else     if ((this.getValue().getValue() instanceof BooleanLiteral<?>) && (other.getValue().getValue() instanceof BooleanLiteral<?>)) {
      if (!this.getBooleanValue().equals(other.getBooleanValue())) {
        return false;
      }
    }
 else     if ((this.getValue().getValue() instanceof DoubleLiteral<?>) && (other.getValue().getValue() instanceof DoubleLiteral<?>)) {
      if (!this.getDoubleValue().equals(other.getDoubleValue())) {
        return false;
      }
    }
 else     if ((this.getValue().getValue() instanceof IntegerLiteral<?>) && (other.getValue().getValue() instanceof IntegerLiteral<?>)) {
      if (!this.getIntegerValue().equals(other.getIntegerValue())) {
        return false;
      }
    }
 else     if ((this.getValue().getValue() instanceof UriLiteral<?>) && (other.getValue().getValue() instanceof UriLiteral<?>)) {
      if (!this.getURIValue().equals(other.getURIValue())) {
        return false;
      }
    }
 else     if ((this.getValue().getValue() instanceof NestedDocument<?>) && (other.getValue().getValue() instanceof NestedDocument<?>)) {
      if (!this.getNestedQName().equals(other.getNestedQName())) {
        return false;
      }
      if (!this.getNestedIdentity().equals(other.getNestedIdentity())) {
        return false;
      }
      if (this.getAnnotations().size() != other.getAnnotations().size()) {
        return false;
      }
      for (      Annotation annotation1 : this.getAnnotations()) {
        boolean foundIt=false;
        for (        Annotation annotation2 : other.getAnnotations()) {
          if (annotation1.equals(annotation2)) {
            foundIt=true;
            break;
          }
        }
        if (foundIt == false)         break;
      }
    }
 else {
      return false;
    }
    return true;
  }
  return true;
}",0.7409484956654768
12676,"/** 
 * Returns a Boolean representation of the   {@code value} property.
 * @return a Boolean representation of the {@code value} property if its value is of a BooleanLiteral type defined by  {@link uk.ac.ncl.intbio.core.datatree.BooleanLiteral}, or   {@code null}otherwise.
 */
public Boolean getBooleanValue(){
  if (value.getValue() instanceof BooleanLiteral) {
    return ((BooleanLiteral<QName>)value.getValue()).getValue();
  }
  return null;
}","/** 
 * Returns a Boolean representation of the   {@code value} property.
 * @return a Boolean representation of the {@code value} property if its value is of Boolean type, or  {@code null} otherwise.
 */
public Boolean getBooleanValue(){
  if (value.getValue() instanceof BooleanLiteral) {
    return ((BooleanLiteral<QName>)value.getValue()).getValue();
  }
  return null;
}",0.8512696493349455
12677,"/** 
 * Adds the URI of the given Sequence instance to this ComponentDefinition object's set of reference Sequence URIs. <p> If this ComponentDefinition object belongs to an SBOLDocument instance, then the SBOLDcouement instance is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> This method creates a compliant Sequence URI with the default URI prefix for this SBOLDocument instance, and the given   {@code sequence} and {@code version}. It then calls   {@link #addSequence(URI)} with this Sequence URI.
 * @param sequence
 * @param version
 * @return {@code true} if this set did not already contain the given Sequence instance URI.
 * @throws SBOLException if the associated SBOLDocument is not compliant
 */
public boolean addSequence(String sequence,String version){
  if (sbolDocument != null)   sbolDocument.checkReadOnly();
  URI sequenceURI=URIcompliance.createCompliantURI(sbolDocument.getDefaultURIprefix(),TopLevel.SEQUENCE,sequence,version,sbolDocument.isTypesInURIs());
  return addSequence(sequenceURI);
}","/** 
 * Adds the URI of the given Sequence instance to this ComponentDefinition object's set of reference Sequence URIs. <p> If this ComponentDefinition object belongs to an SBOLDocument instance, then the SBOLDcouement instance is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> This method creates a compliant Sequence URI with the default URI prefix for this SBOLDocument instance, and the given   {@code sequence} and {@code version}. It then calls   {@link #addSequence(URI)} with this Sequence URI.
 * @param sequenceId
 * @param version
 * @return {@code true} if this set did not already contain the given Sequence instance URI.
 * @throws SBOLException if the associated SBOLDocument is not compliant
 */
public boolean addSequence(String sequenceId,String version){
  if (sbolDocument != null)   sbolDocument.checkReadOnly();
  URI sequenceURI=URIcompliance.createCompliantURI(sbolDocument.getDefaultURIprefix(),TopLevel.SEQUENCE,sequenceId,version,sbolDocument.isTypesInURIs());
  return addSequence(sequenceURI);
}",0.9972041006523764
12678,"/** 
 * Adds the given type URI to this ComponentDefinition's set of reference type URIs. <p> If this ComponentDefinition object belongs to an SBOLDocument instance, then the SBOLDcouement instance is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited.
 * @param typeURI
 * @return @return {@code true} if this set did not already contain the given Sequence instance URI.
 * @throws SBOLException if the associated SBOLDocument is not compliant
 */
public boolean addType(URI typeURI){
  if (sbolDocument != null)   sbolDocument.checkReadOnly();
  return types.add(typeURI);
}","/** 
 * Adds the given type URI to this ComponentDefinition's set of reference type URIs. <p> If this ComponentDefinition object belongs to an SBOLDocument instance, then the SBOLDcouement instance is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited.
 * @param typeURI
 * @return @return {@code true} if this set did not already contain the given Sequence instance URI.
 * @throws SBOLException if the associated SBOLDocument is not compliant
 */
public boolean addType(URI typeURI){
  if (sbolDocument != null)   sbolDocument.checkReadOnly();
  if (typeURI.equals(DNA) || typeURI.equals(RNA) || typeURI.equals(PROTEIN)|| typeURI.equals(SMALL_MOLECULE)) {
    if (this.containsType(DNA) || this.containsType(RNA) || this.containsType(PROTEIN)|| this.containsType(SMALL_MOLECULE)) {
      throw new IllegalArgumentException(""String_Node_Str"" + this.getIdentity() + ""String_Node_Str"");
    }
  }
  return types.add(typeURI);
}",0.7490542244640606
12679,"/** 
 * Creates a child FunctionalComponent instance for this ModuleDefinition object with the given arguments, and then adds to this ModuleDefinition's list of FunctionalComponent instances. <p> If this ModuleDefinition object belongs to an SBOLDocument instance, then the SBOLDcouement instance is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the SBOLDocument instance already completely specifies all URIs and the given   {@code fcURI} is not found in them, then an {@link IllegalArgumentException} is thrown.<p> This method creates a compliant FunctionalComponent URI with the default URI prefix for this SBOLDocument instance, the given  {@code displayId}, and this ModuleDefinition object's version.
 * @param displayId
 * @param access
 * @param fcURI
 * @param direction
 * @return a FunctionalComponent instance
 * @throws SBOLException if the associated SBOLDocument is not compliant.
 * @throws IllegalArgumentException if the associated SBOLDocument instance already completelyspecifies all URIs and the given  {@code definitionURI} is not found in them.
 */
public FunctionalComponent createFunctionalComponent(String displayId,AccessType access,URI fcURI,DirectionType direction){
  if (sbolDocument != null)   sbolDocument.checkReadOnly();
  if (sbolDocument != null && sbolDocument.isComplete()) {
    if (sbolDocument.getComponentDefinition(fcURI) == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + fcURI + ""String_Node_Str"");
    }
  }
  String URIprefix=this.getPersistentIdentity().toString();
  String version=this.getVersion();
  URI functionalComponentURI=createCompliantURI(URIprefix,displayId,version);
  FunctionalComponent fc=createFunctionalComponent(functionalComponentURI,access,fcURI,direction);
  fc.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  fc.setDisplayId(displayId);
  fc.setVersion(version);
  return fc;
}","/** 
 * Creates a child FunctionalComponent instance for this ModuleDefinition object with the given arguments, and then adds to this ModuleDefinition's list of FunctionalComponent instances. <p> If this ModuleDefinition object belongs to an SBOLDocument instance, then the SBOLDcouement instance is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited. <p> If the SBOLDocument instance already completely specifies all URIs and the given   {@code fcURI} is not found in them, then an {@link IllegalArgumentException} is thrown.<p> This method creates a compliant FunctionalComponent URI with the default URI prefix for this SBOLDocument instance, the given  {@code displayId}, and this ModuleDefinition object's version.
 * @param displayId
 * @param access
 * @param componentDefinitionURI
 * @param direction
 * @return a FunctionalComponent instance
 * @throws SBOLException if the associated SBOLDocument is not compliant.
 * @throws IllegalArgumentException if the associated SBOLDocument instance already completelyspecifies all URIs and the given  {@code definitionURI} is not found in them.
 */
public FunctionalComponent createFunctionalComponent(String displayId,AccessType access,URI componentDefinitionURI,DirectionType direction){
  if (sbolDocument != null)   sbolDocument.checkReadOnly();
  if (sbolDocument != null && sbolDocument.isComplete()) {
    if (sbolDocument.getComponentDefinition(componentDefinitionURI) == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + componentDefinitionURI + ""String_Node_Str"");
    }
  }
  String URIprefix=this.getPersistentIdentity().toString();
  String version=this.getVersion();
  URI functionalComponentURI=createCompliantURI(URIprefix,displayId,version);
  FunctionalComponent fc=createFunctionalComponent(functionalComponentURI,access,componentDefinitionURI,direction);
  fc.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  fc.setDisplayId(displayId);
  fc.setVersion(version);
  return fc;
}",0.9737958572498128
12680,"/** 
 * Returns the FunctionalComponent instance matching the given   {@code componentURI} from thisModuleDefinition object's list of FunctionalComponent instances.
 * @param componentURI
 * @return the matching FunctionalComponent instance if present, or{@code null} otherwise.
 */
public FunctionalComponent getFunctionalComponent(URI componentURI){
  return functionalComponents.get(componentURI);
}","/** 
 * Returns the FunctionalComponent instance matching the given   {@code componentURI} from thisModuleDefinition object's list of FunctionalComponent instances.
 * @param functionalComponentURI
 * @return the matching FunctionalComponent instance if present, or{@code null} otherwise.
 */
public FunctionalComponent getFunctionalComponent(URI functionalComponentURI){
  return functionalComponents.get(functionalComponentURI);
}",0.9568345323741008
12681,"protected boolean isComplete(){
  if (sbolDocument == null)   return false;
  if (sequences.isEmpty()) {
    return false;
  }
  for (  Component component : getComponents()) {
    if (component.getDefinition() == null)     return false;
  }
  return true;
}","protected boolean isComplete(){
  if (sbolDocument == null)   return false;
  for (  URI sequenceURI : sequences) {
    if (sbolDocument.getSequence(sequenceURI) == null)     return false;
  }
  for (  Component component : getComponents()) {
    if (component.getDefinition() == null)     return false;
  }
  return true;
}",0.5532646048109966
12682,"public static void main(String[] args){
  String fileName=""String_Node_Str"";
  String outputFile=""String_Node_Str"";
  String URIPrefix=""String_Node_Str"";
  String version=""String_Node_Str"";
  boolean complete=true;
  boolean compliant=true;
  boolean typesInURI=false;
  int i=0;
  while (i < args.length) {
    if (args[i].equals(""String_Node_Str"")) {
      complete=false;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      typesInURI=true;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      compliant=false;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        usage();
      }
      outputFile=args[i + 1];
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        usage();
      }
      URIPrefix=args[i + 1];
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        usage();
      }
      version=args[i + 1];
      i++;
    }
 else     if (fileName.equals(""String_Node_Str"")) {
      fileName=args[i];
    }
 else {
      usage();
    }
    i++;
  }
  if (fileName.equals(""String_Node_Str""))   usage();
  try {
    if (!URIPrefix.equals(""String_Node_Str"")) {
      SBOLReader.setURIPrefix(URIPrefix);
    }
    SBOLReader.setTypesInURI(typesInURI);
    SBOLReader.setVersion(version);
    SBOLDocument doc=SBOLReader.read(fileName);
    if (compliant)     validateCompliance(doc);
    if (complete)     validateCompleteness(doc);
    System.out.println(""String_Node_Str"");
    if (outputFile.equals(""String_Node_Str"")) {
      SBOLWriter.write(doc,(System.out));
    }
 else {
      SBOLWriter.write(doc,outputFile);
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
  }
catch (  Throwable e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
  }
}","public static void main(String[] args){
  String fileName=""String_Node_Str"";
  String outputFile=""String_Node_Str"";
  String URIPrefix=""String_Node_Str"";
  String version=""String_Node_Str"";
  boolean complete=true;
  boolean compliant=true;
  boolean typesInURI=false;
  int i=0;
  while (i < args.length) {
    if (args[i].equals(""String_Node_Str"")) {
      complete=false;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      typesInURI=true;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      compliant=false;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        usage();
      }
      outputFile=args[i + 1];
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        usage();
      }
      URIPrefix=args[i + 1];
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        usage();
      }
      version=args[i + 1];
      i++;
    }
 else     if (fileName.equals(""String_Node_Str"")) {
      fileName=args[i];
    }
 else {
      usage();
    }
    i++;
  }
  if (fileName.equals(""String_Node_Str""))   usage();
  try {
    if (!URIPrefix.equals(""String_Node_Str"")) {
      SBOLReader.setURIPrefix(URIPrefix);
    }
    SBOLReader.setTypesInURI(typesInURI);
    SBOLReader.setVersion(version);
    SBOLDocument doc=SBOLReader.read(fileName);
    doc.setTypesInURIs(typesInURI);
    if (compliant)     validateCompliance(doc);
    if (complete)     validateCompleteness(doc);
    System.out.println(""String_Node_Str"");
    if (outputFile.equals(""String_Node_Str"")) {
      SBOLWriter.write(doc,(System.out));
    }
 else {
      SBOLWriter.write(doc,outputFile);
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
  }
catch (  Throwable e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
  }
}",0.9905511811023622
12683,"/** 
 * Sets the access property of this object to the given one. <p> If this object belongs to an SBOLDocument instance, then the SBOLDcouement instance is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited.
 * @param access
 * @throws SBOLException if the associated SBOLDocument is not compliant.
 * @throws if the given {@code access} argument is {@code null}
 */
public void setAccess(AccessType access){
  if (sbolDocument != null)   sbolDocument.checkReadOnly();
  if (access == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.access=access;
}","/** 
 * Sets the access property of this object to the given one. <p> If this object belongs to an SBOLDocument instance, then the SBOLDcouement instance is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited.
 * @param access
 * @throws SBOLException if the associated SBOLDocument is not compliant.
 * @throws IllegalArgumentException if the given {@code access} argument is {@code null}
 */
public void setAccess(AccessType access){
  if (sbolDocument != null)   sbolDocument.checkReadOnly();
  if (access == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.access=access;
}",0.9802994483845549
12684,"/** 
 * Sets the definition property of this object to the given one. <p> If this object belongs to an SBOLDocument instance, then the SBOLDcouement instance is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited.
 * @param definition
 * @throws SBOLException if the associated SBOLDocument is not compliant.
 * @throws if the given {@code definition} argument is {@code null}
 * @throws IllegalArgumentException if the associated SBOLDocument instance already completely specifies all URIs and the given definition URI is not found in them.
 */
public void setDefinition(URI definition){
  if (sbolDocument != null)   sbolDocument.checkReadOnly();
  if (definition == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + this.getIdentity() + ""String_Node_Str"");
  }
  if (sbolDocument != null && sbolDocument.isComplete()) {
    if (sbolDocument.getComponentDefinition(definition) == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + definition + ""String_Node_Str"");
    }
  }
  this.definition=definition;
}","/** 
 * Sets the definition property of this object to the given one. <p> If this object belongs to an SBOLDocument instance, then the SBOLDcouement instance is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited.
 * @param definition
 * @throws SBOLException if the associated SBOLDocument is not compliant.
 * @throws IllegalArgumentException if the given {@code definition} argument is {@code null}
 * @throws IllegalArgumentException if the associated SBOLDocument instance already completely specifies all URIs and the given definition URI is not found in them.
 */
public void setDefinition(URI definition){
  if (sbolDocument != null)   sbolDocument.checkReadOnly();
  if (definition == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + this.getIdentity() + ""String_Node_Str"");
  }
  if (sbolDocument != null && sbolDocument.isComplete()) {
    if (sbolDocument.getComponentDefinition(definition) == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + definition + ""String_Node_Str"");
    }
  }
  this.definition=definition;
}",0.988589685075308
12685,"/** 
 * Sets the participant property of this object to the given one. <p> If this object belongs to an SBOLDocument instance, then the SBOLDcouement instance is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited.
 * @param participant
 * @throws SBOLException if the associated SBOLDocument is not compliant.
 * @throws if the given {@code participant} argument is {@code null}
 * @throws IllegalArgumentException if the associated ModuleDefinition instance is not {@code null} andgiven  {@code participant} URI is not found in its list of FunctionalComponent instances.
 */
public void setParticipant(URI participant){
  if (sbolDocument != null)   sbolDocument.checkReadOnly();
  if (participant == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (moduleDefinition != null && moduleDefinition.getFunctionalComponent(participant) == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + participant + ""String_Node_Str"");
  }
  this.participant=participant;
}","/** 
 * Sets the participant property of this object to the given one. <p> If this object belongs to an SBOLDocument instance, then the SBOLDcouement instance is checked for compliance first. Only a compliant SBOLDocument instance is allowed to be edited.
 * @param participant
 * @throws SBOLException if the associated SBOLDocument is not compliant.
 * @throws IllegalArgumentException if the given {@code participant} argument is {@code null}
 * @throws IllegalArgumentException if the associated ModuleDefinition instance is not {@code null} andgiven  {@code participant} URI is not found in its list of FunctionalComponent instances.
 */
public void setParticipant(URI participant){
  if (sbolDocument != null)   sbolDocument.checkReadOnly();
  if (participant == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (moduleDefinition != null && moduleDefinition.getFunctionalComponent(participant) == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + participant + ""String_Node_Str"");
  }
  this.participant=participant;
}",0.9881572714353388
12686,"/** 
 * Test if the given object's identity URI is compliant with the form   {@code} ⟨prefix⟩/(⟨displayId⟩/)1,4}⟨version⟩. The prefix is established by the owner of this object. The number of displayIds can range from 1 to 4, depending on the level of the given object. If the given index is 0, then  {@code objURI} is checked as a top-level URI for compliance;if the given index is 1, then  {@code objURI} is checked as a child of a top-level URI for compliance;if the given index is 2, then  {@code objURI} is checked as a grand child of a top-level URI for compliance; andif the given index is 3, then  {@code objURI} is checked as a great grand child of a top-level URI for compliance.
 * @param objURI
 * @param index
 * @return <code>true</code> if the identity URI is compliant, <code>false</code> otherwise.
 */
static final boolean isURIcompliant(URI objURI,int index){
  if (index < 0 || index > 3) {
    return false;
  }
  Pattern r;
  String URIstr=objURI.toString();
  if (index == 0) {
    r=Pattern.compile(toplevelURIpattern);
  }
 else   if (index == 1) {
    r=Pattern.compile(childURIpattern);
  }
 else   if (index == 2) {
    r=Pattern.compile(grandchildURIpattern);
  }
 else {
    r=Pattern.compile(greatGrandchildURIpattern);
  }
  Matcher m=r.matcher(URIstr);
  if (!m.matches()) {
  }
  return m.matches();
}","/** 
 * Test if the given object's identity URI is compliant with the form   {@code ⟨prefix⟩/(⟨displayId⟩/)}{1,4}⟨version⟩. The prefix is established by the owner of this object. The number of displayIds can range from 1 to 4, depending on the level of the given object. If the given index is 0, then   {@code objURI} is checked as a top-level URI for compliance;if the given index is 1, then  {@code objURI} is checked as a child of a top-level URI for compliance;if the given index is 2, then  {@code objURI} is checked as a grand child of a top-level URI for compliance; andif the given index is 3, then  {@code objURI} is checked as a great grand child of a top-level URI for compliance.
 * @param objURI
 * @param index
 * @return <code>true</code> if the identity URI is compliant, <code>false</code> otherwise.
 */
static final boolean isURIcompliant(URI objURI,int index){
  if (index < 0 || index > 3) {
    return false;
  }
  Pattern r;
  String URIstr=objURI.toString();
  if (index == 0) {
    r=Pattern.compile(toplevelURIpattern);
  }
 else   if (index == 1) {
    r=Pattern.compile(childURIpattern);
  }
 else   if (index == 2) {
    r=Pattern.compile(grandchildURIpattern);
  }
 else {
    r=Pattern.compile(greatGrandchildURIpattern);
  }
  Matcher m=r.matcher(URIstr);
  if (!m.matches()) {
  }
  return m.matches();
}",0.998502994011976
12687,"/** 
 * Assume this Component object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String displayId,String version){
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(createCompliantURI(URIprefix,displayId,version));
  this.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  this.setDisplayId(displayId);
  this.setVersion(version);
  for (  MapsTo mapsTo : this.getMapsTos()) {
    mapsTo.updateCompliantURI(this.getPersistentIdentity().toString(),mapsTo.getDisplayId(),version);
  }
}","/** 
 * Assume this Component object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String displayId,String version){
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(createCompliantURI(URIprefix,displayId,version));
  this.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  this.setDisplayId(displayId);
  this.setVersion(version);
  for (  MapsTo mapsTo : this.getMapsTos()) {
    mapsTo.updateCompliantURI(this.getPersistentIdentity().toString(),mapsTo.getDisplayId(),version);
    this.removeChildSafely(mapsTo,this.mapsTos);
    this.addMapsTo(mapsTo);
  }
}",0.9504823151125402
12688,"ComponentDefinition copy(String URIprefix,String displayId,String version){
  ComponentDefinition cloned=this.deepCopy();
  cloned.setWasDerivedFrom(this.getIdentity());
  cloned.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  cloned.setDisplayId(displayId);
  cloned.setVersion(version);
  URI newIdentity=createCompliantURI(URIprefix,displayId,version);
  cloned.setIdentity(newIdentity);
  int count=0;
  for (  Component component : cloned.getComponents()) {
    cloned.removeChildSafely(component,components);
    if (!component.isSetDisplayId())     component.setDisplayId(""String_Node_Str"" + ++count);
    component.updateCompliantURI(cloned.getPersistentIdentity().toString(),component.getDisplayId(),version);
    cloned.addComponent(component);
  }
  count=0;
  for (  SequenceConstraint sequenceConstraint : cloned.getSequenceConstraints()) {
    if (!sequenceConstraint.isSetDisplayId())     sequenceConstraint.setDisplayId(""String_Node_Str"" + ++count);
    sequenceConstraint.updateCompliantURI(cloned.getPersistentIdentity().toString(),sequenceConstraint.getDisplayId(),version);
  }
  count=0;
  for (  SequenceAnnotation sequenceAnnotation : cloned.getSequenceAnnotations()) {
    if (!sequenceAnnotation.isSetDisplayId())     sequenceAnnotation.setDisplayId(""String_Node_Str"" + ++count);
    sequenceAnnotation.updateCompliantURI(cloned.getPersistentIdentity().toString(),sequenceAnnotation.getDisplayId(),version);
  }
  return cloned;
}","ComponentDefinition copy(String URIprefix,String displayId,String version){
  ComponentDefinition cloned=this.deepCopy();
  cloned.setWasDerivedFrom(this.getIdentity());
  cloned.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  cloned.setDisplayId(displayId);
  cloned.setVersion(version);
  URI newIdentity=createCompliantURI(URIprefix,displayId,version);
  cloned.setIdentity(newIdentity);
  int count=0;
  for (  Component component : cloned.getComponents()) {
    if (!component.isSetDisplayId())     component.setDisplayId(""String_Node_Str"" + ++count);
    component.updateCompliantURI(cloned.getPersistentIdentity().toString(),component.getDisplayId(),version);
    cloned.removeChildSafely(component,cloned.components);
    cloned.addComponent(component);
  }
  count=0;
  for (  SequenceConstraint sequenceConstraint : cloned.getSequenceConstraints()) {
    if (!sequenceConstraint.isSetDisplayId())     sequenceConstraint.setDisplayId(""String_Node_Str"" + ++count);
    sequenceConstraint.updateCompliantURI(cloned.getPersistentIdentity().toString(),sequenceConstraint.getDisplayId(),version);
    cloned.removeChildSafely(sequenceConstraint,cloned.sequenceConstraints);
    cloned.addSequenceConstraint(sequenceConstraint);
  }
  count=0;
  for (  SequenceAnnotation sequenceAnnotation : cloned.getSequenceAnnotations()) {
    if (!sequenceAnnotation.isSetDisplayId())     sequenceAnnotation.setDisplayId(""String_Node_Str"" + ++count);
    sequenceAnnotation.updateCompliantURI(cloned.getPersistentIdentity().toString(),sequenceAnnotation.getDisplayId(),version);
    cloned.removeChildSafely(sequenceAnnotation,cloned.sequenceAnnotations);
    cloned.addSequenceAnnotation(sequenceAnnotation);
  }
  return cloned;
}",0.885266071977853
12689,"/** 
 * Assume this Component object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String displayId,String version){
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(createCompliantURI(URIprefix,displayId,version));
  this.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  this.setDisplayId(displayId);
  this.setVersion(version);
  for (  MapsTo mapsTo : this.getMapsTos()) {
    mapsTo.updateCompliantURI(this.getPersistentIdentity().toString(),mapsTo.getDisplayId(),version);
  }
}","/** 
 * Assume this Component object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String displayId,String version){
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(createCompliantURI(URIprefix,displayId,version));
  this.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  this.setDisplayId(displayId);
  this.setVersion(version);
  for (  MapsTo mapsTo : this.getMapsTos()) {
    mapsTo.updateCompliantURI(this.getPersistentIdentity().toString(),mapsTo.getDisplayId(),version);
    this.removeChildSafely(mapsTo,this.mapsTos);
    this.addMapsTo(mapsTo);
  }
}",0.9504823151125402
12690,"/** 
 * Assume this Component object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String displayId,String version){
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(createCompliantURI(URIprefix,displayId,version));
  this.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  this.setDisplayId(displayId);
  this.setVersion(version);
  int count=0;
  for (  Participation participation : this.getParticipations()) {
    if (!participation.isSetDisplayId())     participation.setDisplayId(""String_Node_Str"" + ++count);
    participation.updateCompliantURI(this.getPersistentIdentity().toString(),participation.getDisplayId(),version);
  }
}","/** 
 * Assume this Component object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String displayId,String version){
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(createCompliantURI(URIprefix,displayId,version));
  this.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  this.setDisplayId(displayId);
  this.setVersion(version);
  int count=0;
  for (  Participation participation : this.getParticipations()) {
    if (!participation.isSetDisplayId())     participation.setDisplayId(""String_Node_Str"" + ++count);
    participation.updateCompliantURI(this.getPersistentIdentity().toString(),participation.getDisplayId(),version);
    this.removeChildSafely(participation,this.participations);
    this.addParticipation(participation);
    String participantId=extractDisplayId(participation.getParticipantURI());
    participation.setParticipant(createCompliantURI(URIprefix,participantId,version));
  }
}",0.868421052631579
12691,"/** 
 * Assume this Module object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ModuleDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String displayId,String version){
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(createCompliantURI(URIprefix,displayId,version));
  this.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  this.setDisplayId(displayId);
  this.setVersion(version);
  for (  MapsTo mapsTo : this.getMapsTos()) {
    mapsTo.updateCompliantURI(this.getPersistentIdentity().toString(),mapsTo.getDisplayId(),version);
  }
}","/** 
 * Assume this Module object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ModuleDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String displayId,String version){
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(createCompliantURI(URIprefix,displayId,version));
  this.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  this.setDisplayId(displayId);
  this.setVersion(version);
  for (  MapsTo mapsTo : this.getMapsTos()) {
    mapsTo.updateCompliantURI(this.getPersistentIdentity().toString(),mapsTo.getDisplayId(),version);
    this.removeChildSafely(mapsTo,this.mapsTos);
    this.addMapsTo(mapsTo);
  }
}",0.950097213220998
12692,"/** 
 * Check if the specified key exists in any hash maps in this class other than the one with the specified keySet. This method constructs a set of key sets for other hash maps first, and then checks if the key exists.
 * @return <code>true</code> if the specified key exists in other hash maps.
 */
@Override ModuleDefinition copy(String URIprefix,String displayId,String version){
  ModuleDefinition cloned=this.deepCopy();
  cloned.setWasDerivedFrom(this.getIdentity());
  cloned.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  cloned.setDisplayId(displayId);
  cloned.setVersion(version);
  URI newIdentity=createCompliantURI(URIprefix,displayId,version);
  cloned.setIdentity(newIdentity);
  int count=0;
  for (  Module module : cloned.getModules()) {
    if (!module.isSetDisplayId())     module.setDisplayId(""String_Node_Str"" + ++count);
    module.updateCompliantURI(this.getPersistentIdentity().toString(),module.getDisplayId(),version);
  }
  count=0;
  for (  Interaction interaction : cloned.getInteractions()) {
    if (!interaction.isSetDisplayId())     interaction.setDisplayId(""String_Node_Str"" + ++count);
    interaction.updateCompliantURI(this.getPersistentIdentity().toString(),interaction.getDisplayId(),version);
  }
  count=0;
  for (  FunctionalComponent component : cloned.getFunctionalComponents()) {
    if (!component.isSetDisplayId())     component.setDisplayId(""String_Node_Str"" + ++count);
    component.updateCompliantURI(this.getPersistentIdentity().toString(),component.getDisplayId(),version);
  }
  return cloned;
}","/** 
 * Check if the specified key exists in any hash maps in this class other than the one with the specified keySet. This method constructs a set of key sets for other hash maps first, and then checks if the key exists.
 * @return <code>true</code> if the specified key exists in other hash maps.
 */
@Override ModuleDefinition copy(String URIprefix,String displayId,String version){
  ModuleDefinition cloned=this.deepCopy();
  cloned.setWasDerivedFrom(this.getIdentity());
  cloned.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  cloned.setDisplayId(displayId);
  cloned.setVersion(version);
  URI newIdentity=createCompliantURI(URIprefix,displayId,version);
  cloned.setIdentity(newIdentity);
  int count=0;
  for (  FunctionalComponent component : cloned.getFunctionalComponents()) {
    if (!component.isSetDisplayId())     component.setDisplayId(""String_Node_Str"" + ++count);
    component.updateCompliantURI(this.getPersistentIdentity().toString(),component.getDisplayId(),version);
    cloned.removeChildSafely(component,cloned.functionalComponents);
    cloned.addFunctionalComponent(component);
  }
  count=0;
  for (  Module module : cloned.getModules()) {
    if (!module.isSetDisplayId())     module.setDisplayId(""String_Node_Str"" + ++count);
    module.updateCompliantURI(this.getPersistentIdentity().toString(),module.getDisplayId(),version);
    cloned.removeChildSafely(module,cloned.modules);
    cloned.addModule(module);
  }
  count=0;
  for (  Interaction interaction : cloned.getInteractions()) {
    if (!interaction.isSetDisplayId())     interaction.setDisplayId(""String_Node_Str"" + ++count);
    interaction.updateCompliantURI(this.getPersistentIdentity().toString(),interaction.getDisplayId(),version);
    cloned.removeChildSafely(interaction,cloned.interactions);
    cloned.addInteraction(interaction);
  }
  return cloned;
}",0.7958656330749354
12693,"/** 
 * Assume this SequenceAnnotation object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 * @param URIprefix
 * @param parentDisplayId
 * @param version
 */
void updateCompliantURI(String URIprefix,String displayId,String version){
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(createCompliantURI(URIprefix,displayId,version));
  this.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  this.setDisplayId(displayId);
  this.setVersion(version);
  int count=0;
  for (  Location location : this.getLocations()) {
    if (!location.isSetDisplayId())     location.setDisplayId(""String_Node_Str"" + ++count);
    location.updateCompliantURI(this.getPersistentIdentity().toString(),location.getDisplayId(),version);
  }
}","/** 
 * Assume this SequenceAnnotation object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 * @param URIprefix
 * @param parentDisplayId
 * @param version
 */
void updateCompliantURI(String URIprefix,String displayId,String version){
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(createCompliantURI(URIprefix,displayId,version));
  this.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  this.setDisplayId(displayId);
  this.setVersion(version);
  String componentId=extractDisplayId(component);
  this.setComponent(createCompliantURI(URIprefix,componentId,version));
  int count=0;
  for (  Location location : this.getLocations()) {
    if (!location.isSetDisplayId())     location.setDisplayId(""String_Node_Str"" + ++count);
    location.updateCompliantURI(this.getPersistentIdentity().toString(),location.getDisplayId(),version);
    this.removeChildSafely(location,this.locations);
    this.addLocation(location);
  }
}",0.893900563813429
12694,"private static NamedProperty<QName> getLocation(Location location){
  List<NamedProperty<QName>> property=new ArrayList<>();
  formatCommonIdentifiedData(property,location);
  if (location instanceof Range) {
    Range range=(Range)location;
    property.add(NamedProperty(Sbol2Terms.Range.start,range.getStart()));
    property.add(NamedProperty(Sbol2Terms.Range.end,range.getEnd()));
    if (range.isSetOrientation())     property.add(NamedProperty(Sbol2Terms.Range.orientation,OrientationType.convertToURI(range.getOrientation())));
    return NamedProperty(Sbol2Terms.Location.Location,NestedDocument(Sbol2Terms.Range.Range,range.getIdentity(),NamedProperties(property)));
  }
 else   if (location instanceof Cut) {
    Cut cut=(Cut)location;
    property.add(NamedProperty(Sbol2Terms.Cut.at,cut.getAt()));
    property.add(NamedProperty(Sbol2Terms.Cut.orientation,OrientationType.convertToURI(cut.getOrientation())));
    return NamedProperty(Sbol2Terms.Location.Location,NestedDocument(Sbol2Terms.Cut.Cut,cut.getIdentity(),NamedProperties(property)));
  }
 else   if (location instanceof GenericLocation) {
    GenericLocation genericLocation=(GenericLocation)location;
    property.add(NamedProperty(Sbol2Terms.GenericLocation.orientation,OrientationType.convertToURI(genericLocation.getOrientation())));
    return NamedProperty(Sbol2Terms.Location.Location,NestedDocument(Sbol2Terms.GenericLocation.GenericLocation,genericLocation.getIdentity(),NamedProperties(property)));
  }
  return NamedProperty(Sbol2Terms.Location.Location,NestedDocument(Sbol2Terms.Range.Range,location.getIdentity(),NamedProperties(property)));
}","private static NamedProperty<QName> getLocation(Location location){
  List<NamedProperty<QName>> property=new ArrayList<>();
  formatCommonIdentifiedData(property,location);
  if (location instanceof Range) {
    Range range=(Range)location;
    property.add(NamedProperty(Sbol2Terms.Range.start,range.getStart()));
    property.add(NamedProperty(Sbol2Terms.Range.end,range.getEnd()));
    if (range.isSetOrientation())     property.add(NamedProperty(Sbol2Terms.Range.orientation,OrientationType.convertToURI(range.getOrientation())));
    return NamedProperty(Sbol2Terms.Location.Location,NestedDocument(Sbol2Terms.Range.Range,range.getIdentity(),NamedProperties(property)));
  }
 else   if (location instanceof Cut) {
    Cut cut=(Cut)location;
    property.add(NamedProperty(Sbol2Terms.Cut.at,cut.getAt()));
    if (cut.isSetOrientation())     property.add(NamedProperty(Sbol2Terms.Cut.orientation,OrientationType.convertToURI(cut.getOrientation())));
    return NamedProperty(Sbol2Terms.Location.Location,NestedDocument(Sbol2Terms.Cut.Cut,cut.getIdentity(),NamedProperties(property)));
  }
 else   if (location instanceof GenericLocation) {
    GenericLocation genericLocation=(GenericLocation)location;
    if (genericLocation.isSetOrientation())     property.add(NamedProperty(Sbol2Terms.GenericLocation.orientation,OrientationType.convertToURI(genericLocation.getOrientation())));
    return NamedProperty(Sbol2Terms.Location.Location,NestedDocument(Sbol2Terms.GenericLocation.GenericLocation,genericLocation.getIdentity(),NamedProperties(property)));
  }
  return NamedProperty(Sbol2Terms.Location.Location,NestedDocument(Sbol2Terms.Range.Range,location.getIdentity(),NamedProperties(property)));
}",0.9772182254196644
12695,"private Collection(Collection collection){
  super(collection.getIdentity());
  Set<URI> newMembers=new HashSet<>();
  for (  URI member : collection.getMemberURIs()) {
    newMembers.add(member);
  }
  this.setMembers(newMembers);
}","private Collection(Collection collection){
  super(collection.getIdentity());
  this.members=new HashSet<>();
  Set<URI> newMembers=new HashSet<>();
  for (  URI member : collection.getMemberURIs()) {
    newMembers.add(member);
  }
  this.setMembers(newMembers);
}",0.9357429718875502
12696,"@Override Collection copy(String URIprefix,String displayId,String version){
  if (this.checkDescendantsURIcompliance() && isURIprefixCompliant(URIprefix) && isDisplayIdCompliant(displayId)&& isVersionCompliant(version)) {
    Collection cloned=this.deepCopy();
    cloned.setWasDerivedFrom(this.getIdentity());
    cloned.setPersistentIdentity(URI.create(URIprefix + '/' + displayId));
    cloned.setDisplayId(displayId);
    cloned.setVersion(version);
    URI newIdentity=URI.create(URIprefix + '/' + displayId+ '/'+ version);
    cloned.setIdentity(newIdentity);
    return cloned;
  }
 else {
    return null;
  }
}","@Override Collection copy(String URIprefix,String displayId,String version){
  if (this.checkDescendantsURIcompliance() && isURIprefixCompliant(URIprefix) && isDisplayIdCompliant(displayId)&& isVersionCompliant(version)) {
    Collection cloned=this.deepCopy();
    cloned.setWasDerivedFrom(this.getIdentity());
    cloned.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
    cloned.setDisplayId(displayId);
    cloned.setVersion(version);
    URI newIdentity=createCompliantURI(URIprefix,displayId,version);
    cloned.setIdentity(newIdentity);
    return cloned;
  }
 else {
    return null;
  }
}",0.889776357827476
12697,"ComponentDefinition copy(String URIprefix,String displayId,String version){
  if (this.checkDescendantsURIcompliance() && isURIprefixCompliant(URIprefix) && isDisplayIdCompliant(displayId)&& isVersionCompliant(version)) {
    ComponentDefinition cloned=this.deepCopy();
    cloned.setWasDerivedFrom(this.getIdentity());
    cloned.setPersistentIdentity(URI.create(URIprefix + '/' + displayId));
    cloned.setDisplayId(displayId);
    cloned.setVersion(version);
    URI newIdentity=URI.create(URIprefix + '/' + displayId+ '/'+ version);
    cloned.setIdentity(newIdentity);
    if (!cloned.getSequenceConstraints().isEmpty()) {
      for (      SequenceConstraint sequenceConstraint : cloned.getSequenceConstraints()) {
        sequenceConstraint.updateCompliantURI(URIprefix,displayId,version);
      }
    }
    if (!cloned.getSequenceAnnotations().isEmpty()) {
      for (      SequenceAnnotation SequenceAnnotation : cloned.getSequenceAnnotations()) {
        SequenceAnnotation.updateCompliantURI(URIprefix,displayId,version);
      }
    }
    if (!cloned.getComponents().isEmpty()) {
      for (      Component component : cloned.getComponents()) {
        component.updateCompliantURI(URIprefix,displayId,version);
      }
    }
    return cloned;
  }
 else {
    return null;
  }
}","ComponentDefinition copy(String URIprefix,String displayId,String version){
  if (this.checkDescendantsURIcompliance() && isURIprefixCompliant(URIprefix) && isDisplayIdCompliant(displayId)&& isVersionCompliant(version)) {
    ComponentDefinition cloned=this.deepCopy();
    cloned.setWasDerivedFrom(this.getIdentity());
    cloned.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
    cloned.setDisplayId(displayId);
    cloned.setVersion(version);
    URI newIdentity=createCompliantURI(URIprefix,displayId,version);
    cloned.setIdentity(newIdentity);
    if (!cloned.getSequenceConstraints().isEmpty()) {
      for (      SequenceConstraint sequenceConstraint : cloned.getSequenceConstraints()) {
        sequenceConstraint.updateCompliantURI(cloned.getPersistentIdentity().toString(),sequenceConstraint.getDisplayId(),version);
      }
    }
    if (!cloned.getSequenceAnnotations().isEmpty()) {
      for (      SequenceAnnotation SequenceAnnotation : cloned.getSequenceAnnotations()) {
        SequenceAnnotation.updateCompliantURI(URIprefix,displayId,version);
      }
    }
    if (!cloned.getComponents().isEmpty()) {
      for (      Component component : cloned.getComponents()) {
        component.updateCompliantURI(URIprefix,displayId,version);
      }
    }
    return cloned;
  }
 else {
    return null;
  }
}",0.6920754716981132
12698,"private ComponentDefinition(ComponentDefinition componentDefinition){
  super(componentDefinition);
  Set<URI> types=new HashSet<>();
  for (  URI type : componentDefinition.getTypes()) {
    types.add(URI.create(type.toString()));
  }
  setTypes(types);
  if (!componentDefinition.getRoles().isEmpty()) {
    Set<URI> roles=new HashSet<>();
    for (    URI role : componentDefinition.getRoles()) {
      roles.add(URI.create(role.toString()));
    }
    this.setRoles(roles);
  }
  if (!componentDefinition.getComponents().isEmpty()) {
    List<Component> subComponents=new ArrayList<>();
    for (    Component subComponent : componentDefinition.getComponents()) {
      subComponents.add(subComponent.deepCopy());
    }
    this.setComponents(subComponents);
  }
  if (!componentDefinition.getSequenceConstraints().isEmpty()) {
    List<SequenceConstraint> sequenceConstraints=new ArrayList<>();
    for (    SequenceConstraint sequenceConstraint : componentDefinition.getSequenceConstraints()) {
      sequenceConstraints.add(sequenceConstraint.deepCopy());
    }
    this.setSequenceConstraints(sequenceConstraints);
  }
  if (!componentDefinition.getSequenceAnnotations().isEmpty()) {
    List<SequenceAnnotation> sequenceAnnotations=new ArrayList<>();
    for (    SequenceAnnotation sequenceAnnotation : componentDefinition.getSequenceAnnotations()) {
      sequenceAnnotations.add(sequenceAnnotation.deepCopy());
    }
    this.setSequenceAnnotations(sequenceAnnotations);
  }
  this.setSequences(componentDefinition.getSequenceURIs());
}","private ComponentDefinition(ComponentDefinition componentDefinition){
  super(componentDefinition);
  this.types=new HashSet<>();
  this.roles=new HashSet<>();
  this.sequences=new HashSet<>();
  this.components=new HashMap<>();
  this.sequenceAnnotations=new HashMap<>();
  this.sequenceConstraints=new HashMap<>();
  Set<URI> types=new HashSet<>();
  for (  URI type : componentDefinition.getTypes()) {
    types.add(URI.create(type.toString()));
  }
  setTypes(types);
  if (!componentDefinition.getRoles().isEmpty()) {
    Set<URI> roles=new HashSet<>();
    for (    URI role : componentDefinition.getRoles()) {
      roles.add(URI.create(role.toString()));
    }
    this.setRoles(roles);
  }
  if (!componentDefinition.getComponents().isEmpty()) {
    List<Component> subComponents=new ArrayList<>();
    for (    Component subComponent : componentDefinition.getComponents()) {
      subComponents.add(subComponent.deepCopy());
    }
    this.setComponents(subComponents);
  }
  if (!componentDefinition.getSequenceConstraints().isEmpty()) {
    List<SequenceConstraint> sequenceConstraints=new ArrayList<>();
    for (    SequenceConstraint sequenceConstraint : componentDefinition.getSequenceConstraints()) {
      sequenceConstraints.add(sequenceConstraint.deepCopy());
    }
    this.setSequenceConstraints(sequenceConstraints);
  }
  if (!componentDefinition.getSequenceAnnotations().isEmpty()) {
    List<SequenceAnnotation> sequenceAnnotations=new ArrayList<>();
    for (    SequenceAnnotation sequenceAnnotation : componentDefinition.getSequenceAnnotations()) {
      sequenceAnnotations.add(sequenceAnnotation.deepCopy());
    }
    this.setSequenceAnnotations(sequenceAnnotations);
  }
  this.setSequences(componentDefinition.getSequenceURIs());
}",0.9345004527618472
12699,"protected ComponentInstance(ComponentInstance component){
  super(component);
  setAccess(component.getAccess());
  setDefinition(component.getDefinitionURI());
  if (!component.getMapsTos().isEmpty()) {
    List<MapsTo> mapsTos=new ArrayList<>();
    for (    MapsTo mapsTo : component.getMapsTos()) {
      mapsTos.add(mapsTo.deepCopy());
    }
    this.setMapsTo(mapsTos);
  }
}","protected ComponentInstance(ComponentInstance component){
  super(component);
  this.mapsTos=new HashMap<>();
  setAccess(component.getAccess());
  setDefinition(component.getDefinitionURI());
  if (!component.getMapsTos().isEmpty()) {
    List<MapsTo> mapsTos=new ArrayList<>();
    for (    MapsTo mapsTo : component.getMapsTos()) {
      mapsTos.add(mapsTo.deepCopy());
    }
    this.setMapsTo(mapsTos);
  }
}",0.9596977329974812
12700,"@Override GenericTopLevel copy(String URIprefix,String displayId,String version){
  if (this.checkDescendantsURIcompliance() && isURIprefixCompliant(URIprefix) && isDisplayIdCompliant(displayId)&& isVersionCompliant(version)) {
    GenericTopLevel cloned=this.deepCopy();
    cloned.setWasDerivedFrom(this.getIdentity());
    cloned.setPersistentIdentity(URI.create(URIprefix + '/' + displayId));
    cloned.setDisplayId(displayId);
    cloned.setVersion(version);
    URI newIdentity=URI.create(URIprefix + '/' + displayId+ '/'+ version);
    cloned.setIdentity(newIdentity);
    return cloned;
  }
 else {
    return null;
  }
}","@Override GenericTopLevel copy(String URIprefix,String displayId,String version){
  if (this.checkDescendantsURIcompliance() && isURIprefixCompliant(URIprefix) && isDisplayIdCompliant(displayId)&& isVersionCompliant(version)) {
    GenericTopLevel cloned=this.deepCopy();
    cloned.setWasDerivedFrom(this.getIdentity());
    cloned.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
    cloned.setDisplayId(displayId);
    cloned.setVersion(version);
    URI newIdentity=createCompliantURI(URIprefix,displayId,version);
    cloned.setIdentity(newIdentity);
    return cloned;
  }
 else {
    return null;
  }
}",0.8915094339622641
12701,"/** 
 * This copy constructor creates a new   {@link Identified} class and copies all fields specified by the <code>identified</code> object.
 */
protected Identified(Identified identified){
  this.setIdentity(identified.getIdentity());
  if (identified.hasAnnotations()) {
    List<Annotation> clonedAnnotations=new ArrayList<>();
    for (    Annotation annotation : identified.getAnnotations()) {
      clonedAnnotations.add(annotation.copy());
    }
    this.setAnnotations(clonedAnnotations);
  }
  if (identified.isSetVersion()) {
    this.setVersion(identified.getVersion());
  }
  if (identified.isSetPersistentIdentity()) {
    this.setPersistentIdentity(URI.create(identified.getPersistentIdentity().toString()));
  }
  if (identified.isSetWasDerivedFrom()) {
    this.setWasDerivedFrom(URI.create(identified.getWasDerivedFrom().toString()));
  }
  if (identified.isSetName()) {
    this.setName(identified.getName());
  }
  if (identified.isSetDescription()) {
    this.setDescription(identified.getDescription());
  }
}","/** 
 * This copy constructor creates a new   {@link Identified} class and copies all fields specified by the <code>identified</code> object.
 */
protected Identified(Identified identified){
  this.setIdentity(identified.getIdentity());
  this.annotations=new ArrayList<>();
  if (identified.hasAnnotations()) {
    List<Annotation> clonedAnnotations=new ArrayList<>();
    for (    Annotation annotation : identified.getAnnotations()) {
      clonedAnnotations.add(annotation.copy());
    }
    this.setAnnotations(clonedAnnotations);
  }
  if (identified.isSetVersion()) {
    this.setVersion(identified.getVersion());
  }
  if (identified.isSetPersistentIdentity()) {
    this.setPersistentIdentity(URI.create(identified.getPersistentIdentity().toString()));
  }
  if (identified.isSetWasDerivedFrom()) {
    this.setWasDerivedFrom(URI.create(identified.getWasDerivedFrom().toString()));
  }
  if (identified.isSetName()) {
    this.setName(identified.getName());
  }
  if (identified.isSetDescription()) {
    this.setDescription(identified.getDescription());
  }
}",0.981904761904762
12702,"Interaction(Interaction interaction){
  super(interaction);
  Set<URI> type=new HashSet<>();
  for (  URI typeElement : interaction.getTypes()) {
    type.add(URI.create(typeElement.toString()));
  }
  this.setTypes(type);
  List<Participation> participations=new ArrayList<>();
  for (  Participation participation : interaction.getParticipations()) {
    participations.add(participation.deepCopy());
  }
  this.setParticipations(participations);
}","Interaction(Interaction interaction){
  super(interaction);
  this.types=new HashSet<>();
  this.participations=new HashMap<>();
  Set<URI> type=new HashSet<>();
  for (  URI typeElement : interaction.getTypes()) {
    type.add(URI.create(typeElement.toString()));
  }
  this.setTypes(type);
  List<Participation> participations=new ArrayList<>();
  for (  Participation participation : interaction.getParticipations()) {
    participations.add(participation.deepCopy());
  }
  this.setParticipations(participations);
}",0.9287925696594428
12703,"@Override Model copy(String URIprefix,String displayId,String version){
  if (this.checkDescendantsURIcompliance() && isURIprefixCompliant(URIprefix) && isDisplayIdCompliant(displayId)&& isVersionCompliant(version)) {
    Model cloned=this.deepCopy();
    cloned.setWasDerivedFrom(this.getIdentity());
    cloned.setPersistentIdentity(URI.create(URIprefix + '/' + displayId));
    cloned.setDisplayId(displayId);
    cloned.setVersion(version);
    URI newIdentity=URI.create(URIprefix + '/' + displayId+ '/'+ version);
    cloned.setIdentity(newIdentity);
    return cloned;
  }
 else {
    return null;
  }
}","@Override Model copy(String URIprefix,String displayId,String version){
  if (this.checkDescendantsURIcompliance() && isURIprefixCompliant(URIprefix) && isDisplayIdCompliant(displayId)&& isVersionCompliant(version)) {
    Model cloned=this.deepCopy();
    cloned.setWasDerivedFrom(this.getIdentity());
    cloned.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
    cloned.setDisplayId(displayId);
    cloned.setVersion(version);
    URI newIdentity=createCompliantURI(URIprefix,displayId,version);
    cloned.setIdentity(newIdentity);
    return cloned;
  }
 else {
    return null;
  }
}",0.887987012987013
12704,"/** 
 * Check if the specified key exists in any hash maps in this class other than the one with the specified keySet. This method constructs a set of key sets for other hash maps first, and then checks if the key exists.
 * @return <code>true</code> if the specified key exists in other hash maps.
 */
@Override ModuleDefinition copy(String URIprefix,String displayId,String version){
  if (this.checkDescendantsURIcompliance() && isURIprefixCompliant(URIprefix) && isDisplayIdCompliant(displayId)&& isVersionCompliant(version)) {
    ModuleDefinition cloned=this.deepCopy();
    cloned.setWasDerivedFrom(this.getIdentity());
    cloned.setPersistentIdentity(URI.create(URIprefix + '/' + displayId));
    cloned.setDisplayId(displayId);
    cloned.setVersion(version);
    URI newIdentity=URI.create(URIprefix + '/' + displayId+ '/'+ version);
    cloned.setIdentity(newIdentity);
    if (!cloned.getModules().isEmpty()) {
      for (      Module module : cloned.getModules()) {
        module.updateCompliantURI(URIprefix,displayId,version);
      }
    }
    if (!cloned.getInteractions().isEmpty()) {
      for (      Interaction SequenceAnnotation : cloned.getInteractions()) {
        SequenceAnnotation.updateCompliantURI(URIprefix,displayId,version);
      }
    }
    if (!cloned.getFunctionalComponents().isEmpty()) {
      for (      FunctionalComponent component : cloned.getFunctionalComponents()) {
        component.updateCompliantURI(URIprefix,displayId,version);
      }
    }
    return cloned;
  }
 else {
    return null;
  }
}","/** 
 * Check if the specified key exists in any hash maps in this class other than the one with the specified keySet. This method constructs a set of key sets for other hash maps first, and then checks if the key exists.
 * @return <code>true</code> if the specified key exists in other hash maps.
 */
@Override ModuleDefinition copy(String URIprefix,String displayId,String version){
  if (this.checkDescendantsURIcompliance() && isURIprefixCompliant(URIprefix) && isDisplayIdCompliant(displayId)&& isVersionCompliant(version)) {
    ModuleDefinition cloned=this.deepCopy();
    cloned.setWasDerivedFrom(this.getIdentity());
    cloned.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
    cloned.setDisplayId(displayId);
    cloned.setVersion(version);
    URI newIdentity=createCompliantURI(URIprefix,displayId,version);
    cloned.setIdentity(newIdentity);
    if (!cloned.getModules().isEmpty()) {
      for (      Module module : cloned.getModules()) {
        module.updateCompliantURI(URIprefix,displayId,version);
      }
    }
    if (!cloned.getInteractions().isEmpty()) {
      for (      Interaction SequenceAnnotation : cloned.getInteractions()) {
        SequenceAnnotation.updateCompliantURI(URIprefix,displayId,version);
      }
    }
    if (!cloned.getFunctionalComponents().isEmpty()) {
      for (      FunctionalComponent component : cloned.getFunctionalComponents()) {
        component.updateCompliantURI(URIprefix,displayId,version);
      }
    }
    return cloned;
  }
 else {
    return null;
  }
}",0.9594333547971668
12705,"private ModuleDefinition(ModuleDefinition moduleDefinition){
  super(moduleDefinition);
  Set<URI> roles=new HashSet<>();
  for (  URI role : moduleDefinition.getRoles()) {
    roles.add(role);
  }
  this.setRoles(roles);
  if (!moduleDefinition.getModules().isEmpty()) {
    List<Module> subModules=new ArrayList<>();
    for (    Module subModule : moduleDefinition.getModules()) {
      subModules.add(subModule.deepCopy());
    }
    this.setModules(subModules);
  }
  if (!moduleDefinition.getInteractions().isEmpty()) {
    List<Interaction> interactions=new ArrayList<>();
    for (    Interaction interaction : moduleDefinition.getInteractions()) {
      interactions.add(interaction.deepCopy());
    }
    this.setInteractions(interactions);
  }
  if (!moduleDefinition.getFunctionalComponents().isEmpty()) {
    List<FunctionalComponent> components=new ArrayList<>();
    for (    FunctionalComponent component : moduleDefinition.getFunctionalComponents()) {
      components.add(component.deepCopy());
    }
    this.setFunctionalComponents(components);
  }
  if (!moduleDefinition.getModels().isEmpty()) {
    Set<URI> models=new HashSet<>();
    for (    URI model : moduleDefinition.getModelURIs()) {
      models.add(model);
    }
    this.setModels(models);
  }
}","private ModuleDefinition(ModuleDefinition moduleDefinition){
  super(moduleDefinition);
  this.roles=new HashSet<>();
  this.modules=new HashMap<>();
  this.interactions=new HashMap<>();
  this.functionalComponents=new HashMap<>();
  this.models=new HashSet<>();
  for (  URI role : moduleDefinition.getRoles()) {
    roles.add(role);
  }
  this.setRoles(roles);
  if (!moduleDefinition.getModules().isEmpty()) {
    List<Module> subModules=new ArrayList<>();
    for (    Module subModule : moduleDefinition.getModules()) {
      subModules.add(subModule.deepCopy());
    }
    this.setModules(subModules);
  }
  if (!moduleDefinition.getInteractions().isEmpty()) {
    List<Interaction> interactions=new ArrayList<>();
    for (    Interaction interaction : moduleDefinition.getInteractions()) {
      interactions.add(interaction.deepCopy());
    }
    this.setInteractions(interactions);
  }
  if (!moduleDefinition.getFunctionalComponents().isEmpty()) {
    List<FunctionalComponent> components=new ArrayList<>();
    for (    FunctionalComponent component : moduleDefinition.getFunctionalComponents()) {
      components.add(component.deepCopy());
    }
    this.setFunctionalComponents(components);
  }
  if (!moduleDefinition.getModels().isEmpty()) {
    Set<URI> models=new HashSet<>();
    for (    URI model : moduleDefinition.getModelURIs()) {
      models.add(model);
    }
    this.setModels(models);
  }
}",0.1652463875509447
12706,"private Participation(Participation participation){
  super(participation);
  Set<URI> roles=new HashSet<>();
  for (  URI role : participation.getRoles()) {
    roles.add(role);
  }
  this.setRoles(roles);
  this.setParticipant(participation.getParticipantURI());
}","private Participation(Participation participation){
  super(participation);
  roles=new HashSet<>();
  for (  URI role : participation.getRoles()) {
    roles.add(role);
  }
  this.setRoles(roles);
  this.setParticipant(participation.getParticipantURI());
}",0.982791586998088
12707,"/** 
 * Assume this Range object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link MultiRange#updateCompliantURI(String,String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String greatGrandparentDisplayId,String grandparentDisplayId,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity());
  URI newIdentity=URI.create(URIprefix + '/' + greatGrandparentDisplayId+ '/'+ grandparentDisplayId+ '/'+ parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}","/** 
 * Assume this Range object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link SequenceAnnotation#updateCompliantURI(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String grandparentDisplayId,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity());
  URI newIdentity=URI.create(URIprefix + '/' + grandparentDisplayId+ '/'+ parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}",0.9200652528548124
12708,"/** 
 * This method is ONLY valid for compliant URIs. Create a copy of the given top-level object, which is i.e.  {@link Collection},   {@link ComponentDefinition},   {@link Model},   {@link ModuleDefinition},  {@link Sequence}, or   {@link GenericTopLevel} with the given URIprefix, display ID, and version. Then add it to its corresponding top-level objects list.
 * @return the copied {@link TopLevel} object
 */
public TopLevel createCopy(TopLevel toplevel,String URIprefix,String displayId,String version){
  checkReadOnly();
  if (URIprefix == null) {
    URIprefix=extractURIprefix(toplevel.getIdentity());
  }
  if (displayId == null) {
    displayId=extractDisplayId(toplevel.getIdentity());
  }
  if (version == null) {
    version=extractVersion(toplevel.getIdentity());
  }
  if (toplevel instanceof Collection) {
    Collection newCollection=((Collection)toplevel).copy(URIprefix,displayId,version);
    addCollection(newCollection);
    return newCollection;
  }
 else   if (toplevel instanceof ComponentDefinition) {
    ComponentDefinition newComponentDefinition=((ComponentDefinition)toplevel).copy(URIprefix,displayId,version);
    addComponentDefinition(newComponentDefinition);
    return newComponentDefinition;
  }
 else   if (toplevel instanceof Model) {
    Model newModel=((Model)toplevel).copy(URIprefix,displayId,version);
    addModel(newModel);
    return newModel;
  }
 else   if (toplevel instanceof ModuleDefinition) {
    ModuleDefinition newModuleDefinition=((ModuleDefinition)toplevel).copy(URIprefix,displayId,version);
    addModuleDefinition(newModuleDefinition);
    return newModuleDefinition;
  }
 else   if (toplevel instanceof Sequence) {
    Sequence newSequence=((Sequence)toplevel).copy(URIprefix,displayId,version);
    addSequence(newSequence);
    return newSequence;
  }
 else   if (toplevel instanceof GenericTopLevel) {
    GenericTopLevel newGenericTopLevel=((GenericTopLevel)toplevel).copy(URIprefix,displayId,version);
    addGenericTopLevel(newGenericTopLevel);
    return newGenericTopLevel;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + toplevel.getIdentity());
  }
}","/** 
 * This method is ONLY valid for compliant URIs. Create a copy of the given top-level object, which is i.e.  {@link Collection},   {@link ComponentDefinition},   {@link Model},   {@link ModuleDefinition},  {@link Sequence}, or   {@link GenericTopLevel} with the given URIprefix, display ID, and version. Then add it to its corresponding top-level objects list.
 * @return the copied {@link TopLevel} object
 */
public TopLevel createCopy(TopLevel topLevel,String URIprefix,String displayId,String version){
  checkReadOnly();
  if (URIprefix == null) {
    URIprefix=extractURIprefix(topLevel.getIdentity());
    URIprefix=checkURIprefix(URIprefix);
  }
 else {
    URIprefix=checkURIprefix(URIprefix);
  }
  if (displayId == null) {
    displayId=topLevel.getDisplayId();
  }
  if (version == null) {
    version=topLevel.getVersion();
  }
  validateIdentityData(displayId,version);
  if (topLevel instanceof Collection) {
    Collection newCollection=((Collection)topLevel).copy(URIprefix,displayId,version);
    addCollection(newCollection);
    return newCollection;
  }
 else   if (topLevel instanceof ComponentDefinition) {
    ComponentDefinition newComponentDefinition=((ComponentDefinition)topLevel).copy(URIprefix,displayId,version);
    addComponentDefinition(newComponentDefinition);
    return newComponentDefinition;
  }
 else   if (topLevel instanceof Model) {
    Model newModel=((Model)topLevel).copy(URIprefix,displayId,version);
    addModel(newModel);
    return newModel;
  }
 else   if (topLevel instanceof ModuleDefinition) {
    ModuleDefinition newModuleDefinition=((ModuleDefinition)topLevel).copy(URIprefix,displayId,version);
    addModuleDefinition(newModuleDefinition);
    return newModuleDefinition;
  }
 else   if (topLevel instanceof Sequence) {
    Sequence newSequence=((Sequence)topLevel).copy(URIprefix,displayId,version);
    addSequence(newSequence);
    return newSequence;
  }
 else   if (topLevel instanceof GenericTopLevel) {
    GenericTopLevel newGenericTopLevel=((GenericTopLevel)topLevel).copy(URIprefix,displayId,version);
    addGenericTopLevel(newGenericTopLevel);
    return newGenericTopLevel;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + topLevel.getIdentity());
  }
}",0.9393595275948216
12709,"@Override protected Sequence copy(String URIprefix,String displayId,String version){
  if (this.checkDescendantsURIcompliance() && isURIprefixCompliant(URIprefix) && isDisplayIdCompliant(displayId)&& isVersionCompliant(version)) {
    Sequence cloned=this.deepCopy();
    cloned.setWasDerivedFrom(this.getIdentity());
    cloned.setPersistentIdentity(URI.create(URIprefix + '/' + displayId));
    cloned.setDisplayId(displayId);
    cloned.setVersion(version);
    URI newIdentity=URI.create(URIprefix + '/' + displayId+ '/'+ version);
    cloned.setIdentity(newIdentity);
    return cloned;
  }
 else {
    return null;
  }
}","@Override protected Sequence copy(String URIprefix,String displayId,String version){
  if (this.checkDescendantsURIcompliance() && isURIprefixCompliant(URIprefix) && isDisplayIdCompliant(displayId)&& isVersionCompliant(version)) {
    Sequence cloned=this.deepCopy();
    cloned.setWasDerivedFrom(this.getIdentity());
    cloned.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
    cloned.setDisplayId(displayId);
    cloned.setVersion(version);
    URI newIdentity=createCompliantURI(URIprefix,displayId,version);
    cloned.setIdentity(newIdentity);
    return cloned;
  }
 else {
    return null;
  }
}",0.8908227848101266
12710,"private SequenceAnnotation(SequenceAnnotation sequenceAnnotation){
  super(sequenceAnnotation.getIdentity());
  if (!sequenceAnnotation.getLocations().isEmpty()) {
    List<Location> locations=new ArrayList<>();
    for (    Location location : sequenceAnnotation.getLocations()) {
      locations.add(location.deepCopy());
    }
    this.setLocations(locations);
  }
  if (sequenceAnnotation.isSetComponent()) {
    this.setComponent(sequenceAnnotation.getComponentURI());
  }
}","private SequenceAnnotation(SequenceAnnotation sequenceAnnotation){
  super(sequenceAnnotation.getIdentity());
  this.locations=new HashMap<>();
  if (!sequenceAnnotation.getLocations().isEmpty()) {
    List<Location> locations=new ArrayList<>();
    for (    Location location : sequenceAnnotation.getLocations()) {
      locations.add(location.deepCopy());
    }
    this.setLocations(locations);
  }
  if (sequenceAnnotation.isSetComponent()) {
    this.setComponent(sequenceAnnotation.getComponentURI());
  }
}",0.9657258064516128
12711,"/** 
 * Assume this SequenceConstraint object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity());
  URI newIdentity=URI.create(URIprefix + '/' + parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}","/** 
 * Assume this SequenceConstraint object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String displayId,String version){
  URI newIdentity=createCompliantURI(URIprefix,displayId,version);
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}",0.6061246040126715
12712,"/** 
 * Assume this Component object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String displayId,String version){
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(createCompliantURI(URIprefix,displayId,version));
  this.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  this.setDisplayId(displayId);
  this.setVersion(version);
  for (  MapsTo mapsTo : this.getMapsTos()) {
    mapsTo.updateCompliantURI(this.getPersistentIdentity().toString(),mapsTo.getDisplayId(),version);
    this.removeChildSafely(mapsTo,this.mapsTos);
    this.addMapsTo(mapsTo);
  }
}","/** 
 * Assume this Component object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String displayId,String version){
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(createCompliantURI(URIprefix,displayId,version));
  this.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  this.setDisplayId(displayId);
  this.setVersion(version);
  for (  MapsTo mapsTo : this.getMapsTos()) {
    mapsTo.updateCompliantURI(this.getPersistentIdentity().toString(),mapsTo.getDisplayId(),version);
    this.removeChildSafely(mapsTo,this.mapsTos);
    this.addMapsTo(mapsTo);
    String localId=extractDisplayId(mapsTo.getLocalURI());
    mapsTo.setLocal(createCompliantURI(URIprefix,localId,version));
  }
}",0.9277998862990336
12713,"/** 
 * Assume this Component object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String displayId,String version){
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(createCompliantURI(URIprefix,displayId,version));
  this.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  this.setDisplayId(displayId);
  this.setVersion(version);
  for (  MapsTo mapsTo : this.getMapsTos()) {
    mapsTo.updateCompliantURI(this.getPersistentIdentity().toString(),mapsTo.getDisplayId(),version);
    this.removeChildSafely(mapsTo,this.mapsTos);
    this.addMapsTo(mapsTo);
  }
}","/** 
 * Assume this Component object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String displayId,String version){
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(createCompliantURI(URIprefix,displayId,version));
  this.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  this.setDisplayId(displayId);
  this.setVersion(version);
  for (  MapsTo mapsTo : this.getMapsTos()) {
    mapsTo.updateCompliantURI(this.getPersistentIdentity().toString(),mapsTo.getDisplayId(),version);
    this.removeChildSafely(mapsTo,this.mapsTos);
    this.addMapsTo(mapsTo);
    String localId=extractDisplayId(mapsTo.getLocalURI());
    mapsTo.setLocal(createCompliantURI(URIprefix,localId,version));
  }
}",0.9277998862990336
12714,"/** 
 * Assume this Module object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ModuleDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String displayId,String version){
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(createCompliantURI(URIprefix,displayId,version));
  this.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  this.setDisplayId(displayId);
  this.setVersion(version);
  for (  MapsTo mapsTo : this.getMapsTos()) {
    mapsTo.updateCompliantURI(this.getPersistentIdentity().toString(),mapsTo.getDisplayId(),version);
    this.removeChildSafely(mapsTo,this.mapsTos);
    this.addMapsTo(mapsTo);
  }
}","/** 
 * Assume this Module object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ModuleDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String displayId,String version){
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(createCompliantURI(URIprefix,displayId,version));
  this.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  this.setDisplayId(displayId);
  this.setVersion(version);
  for (  MapsTo mapsTo : this.getMapsTos()) {
    mapsTo.updateCompliantURI(this.getPersistentIdentity().toString(),mapsTo.getDisplayId(),version);
    this.removeChildSafely(mapsTo,this.mapsTos);
    this.addMapsTo(mapsTo);
    String localId=extractDisplayId(mapsTo.getLocalURI());
    mapsTo.setLocal(createCompliantURI(URIprefix,localId,version));
  }
}",0.9273039496279336
12715,"private Module(Module module){
  super(module);
  this.setDefinition(module.getDefinitionURI());
  if (!module.getMapsTos().isEmpty()) {
    List<MapsTo> mappings=new ArrayList<>();
    for (    MapsTo mapping : module.getMapsTos()) {
      mappings.add(mapping.deepCopy());
    }
    this.setMapsTos(mappings);
  }
}","private Module(Module module){
  super(module);
  this.mapsTos=new HashMap<>();
  this.setDefinition(module.getDefinitionURI());
  for (  MapsTo mapping : module.getMapsTos()) {
    this.addMapsTo(mapping.deepCopy());
  }
}",0.4037037037037037
12716,"/** 
 * Check if the specified key exists in any hash maps in this class other than the one with the specified keySet. This method constructs a set of key sets for other hash maps first, and then checks if the key exists.
 * @return <code>true</code> if the specified key exists in other hash maps.
 */
@Override ModuleDefinition copy(String URIprefix,String displayId,String version){
  ModuleDefinition cloned=this.deepCopy();
  cloned.setWasDerivedFrom(this.getIdentity());
  cloned.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  cloned.setDisplayId(displayId);
  cloned.setVersion(version);
  URI newIdentity=createCompliantURI(URIprefix,displayId,version);
  cloned.setIdentity(newIdentity);
  int count=0;
  for (  FunctionalComponent component : cloned.getFunctionalComponents()) {
    if (!component.isSetDisplayId())     component.setDisplayId(""String_Node_Str"" + ++count);
    component.updateCompliantURI(this.getPersistentIdentity().toString(),component.getDisplayId(),version);
    cloned.removeChildSafely(component,cloned.functionalComponents);
    cloned.addFunctionalComponent(component);
  }
  count=0;
  for (  Module module : cloned.getModules()) {
    if (!module.isSetDisplayId())     module.setDisplayId(""String_Node_Str"" + ++count);
    module.updateCompliantURI(this.getPersistentIdentity().toString(),module.getDisplayId(),version);
    cloned.removeChildSafely(module,cloned.modules);
    cloned.addModule(module);
  }
  count=0;
  for (  Interaction interaction : cloned.getInteractions()) {
    if (!interaction.isSetDisplayId())     interaction.setDisplayId(""String_Node_Str"" + ++count);
    interaction.updateCompliantURI(this.getPersistentIdentity().toString(),interaction.getDisplayId(),version);
    cloned.removeChildSafely(interaction,cloned.interactions);
    cloned.addInteraction(interaction);
  }
  return cloned;
}","/** 
 * Check if the specified key exists in any hash maps in this class other than the one with the specified keySet. This method constructs a set of key sets for other hash maps first, and then checks if the key exists.
 * @return <code>true</code> if the specified key exists in other hash maps.
 */
@Override ModuleDefinition copy(String URIprefix,String displayId,String version){
  ModuleDefinition cloned=this.deepCopy();
  cloned.setWasDerivedFrom(this.getIdentity());
  cloned.setPersistentIdentity(createCompliantURI(URIprefix,displayId,""String_Node_Str""));
  cloned.setDisplayId(displayId);
  cloned.setVersion(version);
  URI newIdentity=createCompliantURI(URIprefix,displayId,version);
  cloned.setIdentity(newIdentity);
  int count=0;
  for (  FunctionalComponent component : cloned.getFunctionalComponents()) {
    if (!component.isSetDisplayId())     component.setDisplayId(""String_Node_Str"" + ++count);
    component.updateCompliantURI(cloned.getPersistentIdentity().toString(),component.getDisplayId(),version);
    cloned.removeChildSafely(component,cloned.functionalComponents);
    cloned.addFunctionalComponent(component);
  }
  count=0;
  for (  Module module : cloned.getModules()) {
    if (!module.isSetDisplayId())     module.setDisplayId(""String_Node_Str"" + ++count);
    module.updateCompliantURI(cloned.getPersistentIdentity().toString(),module.getDisplayId(),version);
    cloned.removeChildSafely(module,cloned.modules);
    cloned.addModule(module);
  }
  count=0;
  for (  Interaction interaction : cloned.getInteractions()) {
    if (!interaction.isSetDisplayId())     interaction.setDisplayId(""String_Node_Str"" + ++count);
    interaction.updateCompliantURI(cloned.getPersistentIdentity().toString(),interaction.getDisplayId(),version);
    cloned.removeChildSafely(interaction,cloned.interactions);
    cloned.addInteraction(interaction);
  }
  return cloned;
}",0.992084432717678
12717,"/** 
 * Set the specified authority as the prefix to all member's identity
 */
public static void setURIPrefix(String authority){
  SBOLReader.setURIPrefix=authority;
}","/** 
 * Set the specified authority as the prefix to all member's identity
 */
public static void setURIPrefix(String URIprefix){
  SBOLReader.URIPrefix=URIprefix;
}",0.9069069069069068
12718,"private static Collection parseCollectionV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel){
  URI identity=topLevel.getIdentity();
  URI persistentIdentity=null;
  String displayId=null;
  String name=null;
  String description=null;
  Set<URI> members=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.Collection.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      displayId=fixDisplayId(displayId);
      if (setURIPrefix != null) {
        identity=URI.create(setURIPrefix + ""String_Node_Str"" + TopLevel.COLLECTION+ ""String_Node_Str""+ displayId+ ""String_Node_Str"");
        persistentIdentity=URI.create(setURIPrefix + ""String_Node_Str"" + TopLevel.COLLECTION+ ""String_Node_Str""+ displayId);
      }
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.Collection.name)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.Collection.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.Collection.component)) {
      members.add(parseDnaComponentV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Collection c=SBOLDoc.createCollection(identity);
  if (persistentIdentity != null) {
    c.setPersistentIdentity(persistentIdentity);
    c.setVersion(""String_Node_Str"");
  }
  if (identity != topLevel.getIdentity())   c.setWasDerivedFrom(topLevel.getIdentity());
  if (displayId != null)   c.setDisplayId(displayId);
  if (name != null)   c.setName(name);
  if (description != null)   c.setDescription(description);
  if (!members.isEmpty())   c.setMembers(members);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  return c;
}","private static Collection parseCollectionV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel){
  URI identity=topLevel.getIdentity();
  URI persistentIdentity=null;
  String displayId=null;
  String name=null;
  String description=null;
  Set<URI> members=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.Collection.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      displayId=fixDisplayId(displayId);
      if (URIPrefix != null) {
        identity=createCompliantURI(URIPrefix,TopLevel.COLLECTION,displayId,version,typesInURI);
        persistentIdentity=createCompliantURI(URIPrefix,TopLevel.COLLECTION,displayId,""String_Node_Str"",typesInURI);
      }
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.Collection.name)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.Collection.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.Collection.component)) {
      members.add(parseDnaComponentV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Collection c=SBOLDoc.createCollection(identity);
  if (persistentIdentity != null) {
    c.setPersistentIdentity(persistentIdentity);
    c.setVersion(version);
  }
  if (identity != topLevel.getIdentity())   c.setWasDerivedFrom(topLevel.getIdentity());
  if (displayId != null)   c.setDisplayId(displayId);
  if (name != null)   c.setName(name);
  if (description != null)   c.setDescription(description);
  if (!members.isEmpty())   c.setMembers(members);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  return c;
}",0.9261083743842364
12719,"private static Sequence parseDnaSequenceV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel){
  String elements=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI identity=topLevel.getIdentity();
  URI persistentIdentity=null;
  URI encoding=Sbol2Terms.SequenceURI.DnaSequenceV1;
  List<Annotation> annotations=new ArrayList<>();
  if (setURIPrefix != null) {
    if (topLevel.getIdentity().toString().lastIndexOf('/') != -1) {
      displayId=topLevel.getIdentity().toString().substring(topLevel.getIdentity().toString().lastIndexOf('/') + 1);
      displayId=fixDisplayId(displayId);
      identity=URI.create(setURIPrefix + ""String_Node_Str"" + TopLevel.SEQUENCE+ ""String_Node_Str""+ displayId+ ""String_Node_Str"");
      persistentIdentity=URI.create(setURIPrefix + ""String_Node_Str"" + TopLevel.SEQUENCE+ ""String_Node_Str""+ displayId);
    }
  }
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNASequence.nucleotides)) {
      elements=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      if (setURIPrefix != null) {
        identity=URI.create(setURIPrefix + ""String_Node_Str"" + displayId+ ""String_Node_Str"");
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Sequence sequence=SBOLDoc.getSequence(identity);
  if (sequence == null) {
    sequence=SBOLDoc.createSequence(identity,elements,encoding);
    if (persistentIdentity != null) {
      sequence.setPersistentIdentity(persistentIdentity);
      sequence.setVersion(""String_Node_Str"");
    }
    if (identity != topLevel.getIdentity())     sequence.setWasDerivedFrom(topLevel.getIdentity());
    if (displayId != null)     sequence.setDisplayId(displayId);
    if (name != null)     sequence.setName(name);
    if (description != null)     sequence.setDescription(description);
    if (!annotations.isEmpty())     sequence.setAnnotations(annotations);
  }
  return sequence;
}","private static Sequence parseDnaSequenceV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel){
  String elements=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI identity=topLevel.getIdentity();
  URI persistentIdentity=null;
  URI encoding=Sbol2Terms.SequenceURI.DnaSequenceV1;
  List<Annotation> annotations=new ArrayList<>();
  if (URIPrefix != null) {
    if (topLevel.getIdentity().toString().lastIndexOf('/') != -1) {
      displayId=topLevel.getIdentity().toString().substring(topLevel.getIdentity().toString().lastIndexOf('/') + 1);
      displayId=fixDisplayId(displayId);
      identity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,version,typesInURI);
      persistentIdentity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,""String_Node_Str"",typesInURI);
    }
  }
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNASequence.nucleotides)) {
      elements=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      if (URIPrefix != null) {
        identity=createCompliantURI(URIPrefix,TopLevel.SEQUENCE,displayId,version,typesInURI);
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Sequence sequence=SBOLDoc.getSequence(identity);
  if (sequence == null) {
    sequence=SBOLDoc.createSequence(identity,elements,encoding);
    if (persistentIdentity != null) {
      sequence.setPersistentIdentity(persistentIdentity);
      sequence.setVersion(version);
    }
    if (identity != topLevel.getIdentity())     sequence.setWasDerivedFrom(topLevel.getIdentity());
    if (displayId != null)     sequence.setDisplayId(displayId);
    if (name != null)     sequence.setName(name);
    if (description != null)     sequence.setDescription(description);
    if (!annotations.isEmpty())     sequence.setAnnotations(annotations);
  }
  return sequence;
}",0.7634971796937954
12720,"private static ComponentDefinition parseDnaComponentV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> componentDef){
  String displayId=null;
  String name=null;
  String description=null;
  URI seq_identity=null;
  Set<URI> roles=new HashSet<>();
  URI identity=componentDef.getIdentity();
  String persIdentity=""String_Node_Str"";
  List<Annotation> annotations=new ArrayList<>();
  List<SequenceAnnotation> sequenceAnnotations=new ArrayList<>();
  List<Component> components=new ArrayList<>();
  List<SequenceConstraint> sequenceConstraints=new ArrayList<>();
  List<SBOLPair> precedePairs=new ArrayList<>();
  Map<URI,URI> componentDefMap=new HashMap<>();
  Set<URI> type=new HashSet<>();
  type.add(Sbol2Terms.DnaComponentV1URI.type);
  int component_num=0;
  int sa_num=0;
  for (  NamedProperty<QName> namedProperty : componentDef.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      displayId=fixDisplayId(displayId);
      if (setURIPrefix != null) {
        persIdentity=setURIPrefix + ""String_Node_Str"" + TopLevel.COMPONENT_DEFINITION+ ""String_Node_Str""+ displayId;
        identity=URI.create(persIdentity + ""String_Node_Str"");
      }
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.name)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.type)) {
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.annotations)) {
      SequenceAnnotation sa=parseSequenceAnnotationV1(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),precedePairs,persIdentity,++sa_num);
      sequenceAnnotations.add(sa);
      URI component_identity=URI.create(persIdentity + ""String_Node_Str"" + ++component_num+ ""String_Node_Str"");
      AccessType access=AccessType.PUBLIC;
      URI instantiatedComponent=sa.getComponentURI();
      URI originalURI=((NestedDocument<QName>)namedProperty.getValue()).getIdentity();
      componentDefMap.put(originalURI,component_identity);
      sa.setComponent(component_identity);
      Component component=new Component(component_identity,access,instantiatedComponent);
      if (!persIdentity.equals(""String_Node_Str"")) {
        component.setPersistentIdentity(URI.create(persIdentity + ""String_Node_Str"" + component_num));
        component.setDisplayId(""String_Node_Str"" + component_num);
        component.setVersion(""String_Node_Str"");
      }
      components.add(component);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.dnaSequence)) {
      seq_identity=parseDnaSequenceV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  if (roles.isEmpty())   roles.add(Sbol2Terms.DnaComponentV1URI.roles);
  int sc_number=0;
  for (  SBOLPair pair : precedePairs) {
    URI sc_identity=URI.create(persIdentity + ""String_Node_Str"" + ++sc_number+ ""String_Node_Str"");
    URI restrictionURI=Sbol2Terms.DnaComponentV1URI.restriction;
    RestrictionType restriction=RestrictionType.convertToRestrictionType(restrictionURI);
    URI subject=null;
    URI object=null;
    for (    URI key : componentDefMap.keySet()) {
      if (pair.getLeft().equals(key)) {
        subject=componentDefMap.get(key);
      }
 else       if (pair.getRight().equals(key)) {
        object=componentDefMap.get(key);
      }
    }
    SequenceConstraint sc=new SequenceConstraint(sc_identity,restriction,subject,object);
    if (!persIdentity.equals(""String_Node_Str"")) {
      sc.setPersistentIdentity(URI.create(persIdentity + ""String_Node_Str"" + sc_number));
      sc.setDisplayId(""String_Node_Str"" + sc_number);
      sc.setVersion(""String_Node_Str"");
    }
    sequenceConstraints.add(sc);
  }
  ComponentDefinition c=SBOLDoc.getComponentDefinition(identity);
  if (c == null) {
    c=SBOLDoc.createComponentDefinition(identity,type);
    if (!persIdentity.equals(""String_Node_Str"")) {
      c.setPersistentIdentity(URI.create(persIdentity));
      c.setVersion(""String_Node_Str"");
    }
    if (roles != null)     c.setRoles(roles);
    if (identity != componentDef.getIdentity())     c.setWasDerivedFrom(componentDef.getIdentity());
    if (displayId != null)     c.setDisplayId(displayId);
    if (name != null && !name.isEmpty())     c.setName(name);
    if (description != null && !description.isEmpty())     c.setDescription(description);
    if (seq_identity != null)     c.addSequence(seq_identity);
    if (!annotations.isEmpty())     c.setAnnotations(annotations);
    if (!sequenceAnnotations.isEmpty())     c.setSequenceAnnotations(sequenceAnnotations);
    if (!components.isEmpty())     c.setComponents(components);
    if (!sequenceConstraints.isEmpty())     c.setSequenceConstraints(sequenceConstraints);
  }
  return c;
}","private static ComponentDefinition parseDnaComponentV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> componentDef){
  String displayId=null;
  String name=null;
  String description=null;
  URI seq_identity=null;
  Set<URI> roles=new HashSet<>();
  URI identity=componentDef.getIdentity();
  String persIdentity=""String_Node_Str"";
  List<Annotation> annotations=new ArrayList<>();
  List<SequenceAnnotation> sequenceAnnotations=new ArrayList<>();
  List<Component> components=new ArrayList<>();
  List<SequenceConstraint> sequenceConstraints=new ArrayList<>();
  List<SBOLPair> precedePairs=new ArrayList<>();
  Map<URI,URI> componentDefMap=new HashMap<>();
  Set<URI> type=new HashSet<>();
  type.add(Sbol2Terms.DnaComponentV1URI.type);
  int component_num=0;
  int sa_num=0;
  for (  NamedProperty<QName> namedProperty : componentDef.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      displayId=fixDisplayId(displayId);
      if (URIPrefix != null) {
        persIdentity=createCompliantURI(URIPrefix,TopLevel.COMPONENT_DEFINITION,displayId,""String_Node_Str"",typesInURI).toString();
        identity=createCompliantURI(URIPrefix,TopLevel.COMPONENT_DEFINITION,displayId,version,typesInURI);
      }
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.name)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.type)) {
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.annotations)) {
      SequenceAnnotation sa=parseSequenceAnnotationV1(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),precedePairs,persIdentity,++sa_num);
      sequenceAnnotations.add(sa);
      URI component_identity=createCompliantURI(persIdentity,""String_Node_Str"" + ++component_num,version);
      AccessType access=AccessType.PUBLIC;
      URI instantiatedComponent=sa.getComponentURI();
      URI originalURI=((NestedDocument<QName>)namedProperty.getValue()).getIdentity();
      componentDefMap.put(originalURI,component_identity);
      sa.setComponent(component_identity);
      Component component=new Component(component_identity,access,instantiatedComponent);
      if (!persIdentity.equals(""String_Node_Str"")) {
        component.setPersistentIdentity(createCompliantURI(persIdentity,""String_Node_Str"" + ++component_num,""String_Node_Str""));
        component.setDisplayId(""String_Node_Str"" + component_num);
        component.setVersion(version);
      }
      components.add(component);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.dnaSequence)) {
      seq_identity=parseDnaSequenceV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  if (roles.isEmpty())   roles.add(Sbol2Terms.DnaComponentV1URI.roles);
  int sc_number=0;
  for (  SBOLPair pair : precedePairs) {
    URI sc_identity=createCompliantURI(persIdentity,""String_Node_Str"" + ++sc_number,version);
    URI restrictionURI=Sbol2Terms.DnaComponentV1URI.restriction;
    RestrictionType restriction=RestrictionType.convertToRestrictionType(restrictionURI);
    URI subject=null;
    URI object=null;
    for (    URI key : componentDefMap.keySet()) {
      if (pair.getLeft().equals(key)) {
        subject=componentDefMap.get(key);
      }
 else       if (pair.getRight().equals(key)) {
        object=componentDefMap.get(key);
      }
    }
    SequenceConstraint sc=new SequenceConstraint(sc_identity,restriction,subject,object);
    if (!persIdentity.equals(""String_Node_Str"")) {
      sc.setPersistentIdentity(createCompliantURI(persIdentity,""String_Node_Str"" + sc_number,version));
      sc.setDisplayId(""String_Node_Str"" + sc_number);
      sc.setVersion(version);
    }
    sequenceConstraints.add(sc);
  }
  ComponentDefinition c=SBOLDoc.getComponentDefinition(identity);
  if (c == null) {
    c=SBOLDoc.createComponentDefinition(identity,type);
    if (!persIdentity.equals(""String_Node_Str"")) {
      c.setPersistentIdentity(URI.create(persIdentity));
      c.setVersion(version);
    }
    if (roles != null)     c.setRoles(roles);
    if (identity != componentDef.getIdentity())     c.setWasDerivedFrom(componentDef.getIdentity());
    if (displayId != null)     c.setDisplayId(displayId);
    if (name != null && !name.isEmpty())     c.setName(name);
    if (description != null && !description.isEmpty())     c.setDescription(description);
    if (seq_identity != null)     c.addSequence(seq_identity);
    if (!annotations.isEmpty())     c.setAnnotations(annotations);
    if (!sequenceAnnotations.isEmpty())     c.setSequenceAnnotations(sequenceAnnotations);
    if (!components.isEmpty())     c.setComponents(components);
    if (!sequenceConstraints.isEmpty())     c.setSequenceConstraints(sequenceConstraints);
  }
  return c;
}",0.9304446978335232
12721,"private static SequenceAnnotation parseSequenceAnnotationV1(SBOLDocument SBOLDoc,NestedDocument<QName> sequenceAnnotation,List<SBOLPair> precedePairs,String parentURI,int sa_num){
  Integer start=null;
  Integer end=null;
  String strand=null;
  URI componentURI=null;
  URI identity=sequenceAnnotation.getIdentity();
  String persIdentity=""String_Node_Str"";
  List<Annotation> annotations=new ArrayList<>();
  if (setURIPrefix != null) {
    persIdentity=parentURI + ""String_Node_Str"" + sa_num;
    identity=URI.create(persIdentity + ""String_Node_Str"");
  }
  for (  NamedProperty<QName> namedProperty : sequenceAnnotation.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.bioStart)) {
      String temp=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      start=Integer.parseInt(temp);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.bioEnd)) {
      String temp2=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      end=Integer.parseInt(temp2);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.strand)) {
      strand=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.subComponent)) {
      componentURI=parseDnaComponentV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.precedes)) {
      URI left=sequenceAnnotation.getIdentity();
      URI right=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
      SBOLPair pair=new SBOLPair(left,right);
      precedePairs.add(pair);
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Location location=null;
  if (start != null && end != null) {
    URI range_identity=URI.create(persIdentity + ""String_Node_Str"");
    Location r=new Range(range_identity,start,end);
    if (!persIdentity.equals(""String_Node_Str"")) {
      r.setPersistentIdentity(URI.create(persIdentity + ""String_Node_Str""));
      r.setDisplayId(""String_Node_Str"");
      r.setVersion(""String_Node_Str"");
    }
    if (strand != null) {
      if (strand.equals(""String_Node_Str"")) {
        r.setOrientation(OrientationType.convertToOrientationType(OrientationType.inline));
      }
 else       if (strand.equals(""String_Node_Str"")) {
        r.setOrientation(OrientationType.convertToOrientationType(OrientationType.reverseComplement));
      }
      location=r;
    }
  }
 else {
    URI dummyGenericLoc_id=URI.create(persIdentity + ""String_Node_Str"");
    GenericLocation dummyGenericLoc=new GenericLocation(dummyGenericLoc_id);
    if (!persIdentity.equals(""String_Node_Str"")) {
      dummyGenericLoc.setPersistentIdentity(URI.create(persIdentity + ""String_Node_Str""));
      dummyGenericLoc.setDisplayId(""String_Node_Str"");
      dummyGenericLoc.setVersion(""String_Node_Str"");
    }
    if (strand != null) {
      if (strand.equals(""String_Node_Str"")) {
        dummyGenericLoc.setOrientation(OrientationType.convertToOrientationType(OrientationType.inline));
      }
 else       if (strand.equals(""String_Node_Str"")) {
        dummyGenericLoc.setOrientation(OrientationType.convertToOrientationType(OrientationType.reverseComplement));
      }
      location=dummyGenericLoc;
    }
  }
  List<Location> locations=new ArrayList<>();
  locations.add(location);
  SequenceAnnotation s=new SequenceAnnotation(identity,locations);
  if (!persIdentity.equals(""String_Node_Str"")) {
    s.setPersistentIdentity(URI.create(persIdentity));
    s.setDisplayId(""String_Node_Str"" + sa_num);
    s.setVersion(""String_Node_Str"");
  }
  if (identity != sequenceAnnotation.getIdentity())   s.setWasDerivedFrom(sequenceAnnotation.getIdentity());
  if (componentURI != null)   s.setComponent(componentURI);
  if (!annotations.isEmpty())   s.setAnnotations(annotations);
  return s;
}","private static SequenceAnnotation parseSequenceAnnotationV1(SBOLDocument SBOLDoc,NestedDocument<QName> sequenceAnnotation,List<SBOLPair> precedePairs,String parentURI,int sa_num){
  Integer start=null;
  Integer end=null;
  String strand=null;
  URI componentURI=null;
  URI identity=sequenceAnnotation.getIdentity();
  String persIdentity=""String_Node_Str"";
  List<Annotation> annotations=new ArrayList<>();
  if (URIPrefix != null) {
    persIdentity=createCompliantURI(parentURI,""String_Node_Str"" + sa_num,""String_Node_Str"").toString();
    identity=createCompliantURI(parentURI,""String_Node_Str"" + sa_num,version);
  }
  for (  NamedProperty<QName> namedProperty : sequenceAnnotation.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.bioStart)) {
      String temp=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      start=Integer.parseInt(temp);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.bioEnd)) {
      String temp2=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      end=Integer.parseInt(temp2);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.strand)) {
      strand=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.subComponent)) {
      componentURI=parseDnaComponentV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.precedes)) {
      URI left=sequenceAnnotation.getIdentity();
      URI right=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
      SBOLPair pair=new SBOLPair(left,right);
      precedePairs.add(pair);
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Location location=null;
  if (start != null && end != null) {
    URI range_identity=createCompliantURI(persIdentity,""String_Node_Str"",version);
    Location r=new Range(range_identity,start,end);
    if (!persIdentity.equals(""String_Node_Str"")) {
      r.setPersistentIdentity(createCompliantURI(persIdentity,""String_Node_Str"",""String_Node_Str""));
      r.setDisplayId(""String_Node_Str"");
      r.setVersion(version);
    }
    if (strand != null) {
      if (strand.equals(""String_Node_Str"")) {
        r.setOrientation(OrientationType.convertToOrientationType(OrientationType.inline));
      }
 else       if (strand.equals(""String_Node_Str"")) {
        r.setOrientation(OrientationType.convertToOrientationType(OrientationType.reverseComplement));
      }
      location=r;
    }
  }
 else {
    URI dummyGenericLoc_id=createCompliantURI(persIdentity,""String_Node_Str"",version);
    GenericLocation dummyGenericLoc=new GenericLocation(dummyGenericLoc_id);
    if (!persIdentity.equals(""String_Node_Str"")) {
      dummyGenericLoc.setPersistentIdentity(createCompliantURI(persIdentity,""String_Node_Str"",""String_Node_Str""));
      dummyGenericLoc.setDisplayId(""String_Node_Str"");
      dummyGenericLoc.setVersion(version);
    }
    if (strand != null) {
      if (strand.equals(""String_Node_Str"")) {
        dummyGenericLoc.setOrientation(OrientationType.convertToOrientationType(OrientationType.inline));
      }
 else       if (strand.equals(""String_Node_Str"")) {
        dummyGenericLoc.setOrientation(OrientationType.convertToOrientationType(OrientationType.reverseComplement));
      }
      location=dummyGenericLoc;
    }
  }
  List<Location> locations=new ArrayList<>();
  locations.add(location);
  SequenceAnnotation s=new SequenceAnnotation(identity,locations);
  if (!persIdentity.equals(""String_Node_Str"")) {
    s.setPersistentIdentity(URI.create(persIdentity));
    s.setDisplayId(""String_Node_Str"" + sa_num);
    s.setVersion(version);
  }
  if (identity != sequenceAnnotation.getIdentity())   s.setWasDerivedFrom(sequenceAnnotation.getIdentity());
  if (componentURI != null)   s.setComponent(componentURI);
  if (!annotations.isEmpty())   s.setAnnotations(annotations);
  return s;
}",0.9335310106251544
12722,"public static void main(String[] args){
  try {
    InputStream file=readTester.class.getResourceAsStream(path + filenameV1_1);
    if (file == null)     file=readTester.class.getResourceAsStream(""String_Node_Str"" + path + filenameV1_1);
    SBOLReader.setURIPrefix(""String_Node_Str"");
    SBOLDocument document1=SBOLReader.read(file);
    document1=SBOLTestUtils.writeAndRead(document1);
    SBOLWriter.writeRDF(document1,(System.out));
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    InputStream file=readTester.class.getResourceAsStream(path + filenameV1_1);
    if (file == null)     file=readTester.class.getResourceAsStream(""String_Node_Str"" + path + filenameV1_1);
    SBOLReader.setURIPrefix(""String_Node_Str"");
    SBOLReader.setVersion(""String_Node_Str"");
    SBOLReader.setTypesInURI(true);
    SBOLDocument document1=SBOLReader.read(file);
    document1=SBOLTestUtils.writeAndRead(document1);
    SBOLWriter.writeRDF(document1,(System.out));
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}",0.9237918215613384
12723,"/** 
 * Top level types
 */
public static void main(String[] args) throws XMLStreamException, FactoryConfigurationError, CoreIoException {
  get_myParts(SBOL2Doc_test);
  SBOLDocument sbolDoc=new SBOLDocument();
  sbolDoc.setDefaultURIprefix(""String_Node_Str"");
  ComponentDefinition cd=SBOL2Doc_test.getComponentDefinition(""String_Node_Str"",""String_Node_Str"");
  sbolDoc.createCopy(cd,""String_Node_Str"",""String_Node_Str"");
  cd=SBOL2Doc_test.getComponentDefinition(""String_Node_Str"",""String_Node_Str"");
  sbolDoc.createCopy(cd,""String_Node_Str"",""String_Node_Str"");
  ModuleDefinition md=SBOL2Doc_test.getModuleDefinition(""String_Node_Str"",""String_Node_Str"");
  sbolDoc.createCopy(md,""String_Node_Str"",""String_Node_Str"");
  writeRdfOutputStream(sbolDoc);
}","/** 
 * Top level types
 */
public static void main(String[] args) throws XMLStreamException, FactoryConfigurationError, CoreIoException {
  get_myParts(SBOL2Doc_test);
  writeRdfOutputStream(SBOL2Doc_test);
}",0.3937823834196891
12724,"private static Cut parseCut(NestedDocument<QName> typeCut){
  URI persistentIdentity=null;
  String displayId=null;
  Integer at=null;
  URI orientation=null;
  String version=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : typeCut.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Cut.at)) {
      String temp=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      at=Integer.parseInt(temp);
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Cut.orientation)) {
      orientation=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  if (at == null) {
    System.out.println(""String_Node_Str"");
  }
  Cut c=new Cut(typeCut.getIdentity(),at);
  if (persistentIdentity != null)   c.setPersistentIdentity(persistentIdentity);
  if (displayId != null)   c.setDisplayId(displayId);
  if (orientation != null)   c.setOrientation(orientation);
  if (version != null)   c.setVersion(version);
  if (wasDerivedFrom != null)   c.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  return c;
}","private static Cut parseCut(NestedDocument<QName> typeCut){
  URI persistentIdentity=null;
  String displayId=null;
  Integer at=null;
  URI orientation=null;
  String version=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : typeCut.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Cut.at)) {
      String temp=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      at=Integer.parseInt(temp);
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Cut.orientation)) {
      orientation=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  if (at == null) {
    System.out.println(""String_Node_Str"");
  }
  Cut c=new Cut(typeCut.getIdentity(),at);
  if (persistentIdentity != null)   c.setPersistentIdentity(persistentIdentity);
  if (displayId != null)   c.setDisplayId(displayId);
  if (orientation != null)   c.setOrientation(orientation);
  if (version != null)   c.setVersion(version);
  if (wasDerivedFrom != null)   c.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  return c;
}",0.9942050894431846
12725,"private static SequenceConstraint parseSequenceConstraint(NestedDocument<QName> sequenceConstraints){
  URI persistentIdentity=null;
  String displayId=null;
  RestrictionType restriction=null;
  URI subject=null;
  URI object=null;
  String version=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : sequenceConstraints.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.SequenceConstraint.restriction)) {
      restriction=SequenceConstraint.RestrictionType.convertToRestrictionType(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.SequenceConstraint.hasSubject)) {
      subject=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.SequenceConstraint.hasObject)) {
      object=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  SequenceConstraint s=new SequenceConstraint(sequenceConstraints.getIdentity(),restriction,subject,object);
  if (displayId != null)   s.setDisplayId(displayId);
  if (persistentIdentity != null)   s.setPersistentIdentity(persistentIdentity);
  if (version != null)   s.setVersion(version);
  if (wasDerivedFrom != null)   s.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   s.setAnnotations(annotations);
  return s;
}","private static SequenceConstraint parseSequenceConstraint(NestedDocument<QName> sequenceConstraints){
  URI persistentIdentity=null;
  String displayId=null;
  RestrictionType restriction=null;
  URI subject=null;
  URI object=null;
  String version=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : sequenceConstraints.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.SequenceConstraint.restriction)) {
      restriction=SequenceConstraint.RestrictionType.convertToRestrictionType(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.SequenceConstraint.hasSubject)) {
      subject=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.SequenceConstraint.hasObject)) {
      object=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  SequenceConstraint s=new SequenceConstraint(sequenceConstraints.getIdentity(),restriction,subject,object);
  if (displayId != null)   s.setDisplayId(displayId);
  if (persistentIdentity != null)   s.setPersistentIdentity(persistentIdentity);
  if (version != null)   s.setVersion(version);
  if (wasDerivedFrom != null)   s.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   s.setAnnotations(annotations);
  return s;
}",0.9949328045825072
12726,"private static Range parseRange(NestedDocument<QName> typeRange){
  URI persistentIdentity=null;
  String displayId=null;
  Integer start=null;
  Integer end=null;
  URI orientation=null;
  String version=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : typeRange.getProperties()) {
    String temp;
    if (namedProperty.getName().equals(Sbol2Terms.Range.start)) {
      temp=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      start=Integer.parseInt(temp);
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Range.end)) {
      temp=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      end=Integer.parseInt(temp);
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Range.orientation)) {
      orientation=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Range r=new Range(typeRange.getIdentity(),start,end);
  if (displayId != null)   r.setDisplayId(displayId);
  if (persistentIdentity != null)   r.setPersistentIdentity(persistentIdentity);
  if (orientation != null)   r.setOrientation(orientation);
  if (version != null)   r.setVersion(version);
  if (wasDerivedFrom != null)   r.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   r.setAnnotations(annotations);
  return r;
}","private static Range parseRange(NestedDocument<QName> typeRange){
  URI persistentIdentity=null;
  String displayId=null;
  Integer start=null;
  Integer end=null;
  URI orientation=null;
  String version=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : typeRange.getProperties()) {
    String temp;
    if (namedProperty.getName().equals(Sbol2Terms.Range.start)) {
      temp=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      start=Integer.parseInt(temp);
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Range.end)) {
      temp=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      end=Integer.parseInt(temp);
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Range.orientation)) {
      orientation=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Range r=new Range(typeRange.getIdentity(),start,end);
  if (displayId != null)   r.setDisplayId(displayId);
  if (persistentIdentity != null)   r.setPersistentIdentity(persistentIdentity);
  if (orientation != null)   r.setOrientation(orientation);
  if (version != null)   r.setVersion(version);
  if (wasDerivedFrom != null)   r.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   r.setAnnotations(annotations);
  return r;
}",0.9946967950195988
12727,"private static ModuleDefinition parseModuleDefinition(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI wasDerivedFrom=null;
  Set<URI> roles=new HashSet<>();
  Set<URI> models=new HashSet<>();
  List<FunctionalComponent> functionalComponents=new ArrayList<>();
  List<Interaction> interactions=new ArrayList<>();
  List<Module> subModules=new ArrayList<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.roles)) {
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasModule)) {
      subModules.add(parseSubModule(((NestedDocument<QName>)namedProperty.getValue())));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasInteractions)) {
      interactions.add(parseInteraction(((NestedDocument<QName>)namedProperty.getValue())));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasfunctionalComponent)) {
      functionalComponents.add(parseFunctionalComponents((NestedDocument<QName>)namedProperty.getValue()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasModels)) {
      models.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  ModuleDefinition moduleDefinition=SBOLDoc.createModuleDefinition(topLevel.getIdentity());
  if (!roles.isEmpty())   moduleDefinition.setRoles(roles);
  if (persistentIdentity != null)   moduleDefinition.setPersistentIdentity(persistentIdentity);
  if (version != null)   moduleDefinition.setVersion(version);
  if (displayId != null)   moduleDefinition.setDisplayId(displayId);
  if (!functionalComponents.isEmpty())   moduleDefinition.setFunctionalComponents(functionalComponents);
  if (!interactions.isEmpty())   moduleDefinition.setInteractions(interactions);
  if (!models.isEmpty())   moduleDefinition.setModels(models);
  if (!subModules.isEmpty())   moduleDefinition.setModules(subModules);
  if (name != null)   moduleDefinition.setName(name);
  if (description != null)   moduleDefinition.setDescription(description);
  if (wasDerivedFrom != null)   moduleDefinition.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   moduleDefinition.setAnnotations(annotations);
  return moduleDefinition;
}","private static ModuleDefinition parseModuleDefinition(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI wasDerivedFrom=null;
  Set<URI> roles=new HashSet<>();
  Set<URI> models=new HashSet<>();
  List<FunctionalComponent> functionalComponents=new ArrayList<>();
  List<Interaction> interactions=new ArrayList<>();
  List<Module> subModules=new ArrayList<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.roles)) {
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasModule)) {
      subModules.add(parseSubModule(((NestedDocument<QName>)namedProperty.getValue())));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasInteractions)) {
      interactions.add(parseInteraction(((NestedDocument<QName>)namedProperty.getValue())));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasfunctionalComponent)) {
      functionalComponents.add(parseFunctionalComponents((NestedDocument<QName>)namedProperty.getValue()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasModels)) {
      models.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  ModuleDefinition moduleDefinition=SBOLDoc.createModuleDefinition(topLevel.getIdentity());
  if (!roles.isEmpty())   moduleDefinition.setRoles(roles);
  if (persistentIdentity != null)   moduleDefinition.setPersistentIdentity(persistentIdentity);
  if (version != null)   moduleDefinition.setVersion(version);
  if (displayId != null)   moduleDefinition.setDisplayId(displayId);
  if (!functionalComponents.isEmpty())   moduleDefinition.setFunctionalComponents(functionalComponents);
  if (!interactions.isEmpty())   moduleDefinition.setInteractions(interactions);
  if (!models.isEmpty())   moduleDefinition.setModels(models);
  if (!subModules.isEmpty())   moduleDefinition.setModules(subModules);
  if (name != null)   moduleDefinition.setName(name);
  if (description != null)   moduleDefinition.setDescription(description);
  if (wasDerivedFrom != null)   moduleDefinition.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   moduleDefinition.setAnnotations(annotations);
  return moduleDefinition;
}",0.9969098481794976
12728,"private static MapsTo parseMapsTo(NestedDocument<QName> mappings){
  URI persistentIdentity=null;
  String displayId=null;
  String version=null;
  URI remote=null;
  RefinementType refinement=null;
  URI local=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> m : mappings.getProperties()) {
    if (m.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)m.getValue()).getValue().toString());
    }
 else     if (m.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)m.getValue()).getValue().toString();
    }
 else     if (m.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)m.getValue()).getValue().toString();
    }
 else     if (m.getName().equals(Sbol2Terms.MapsTo.refinement)) {
      refinement=RefinementType.convertToRefinementType(URI.create(((Literal<QName>)m.getValue()).getValue().toString()));
    }
 else     if (m.getName().equals(Sbol2Terms.MapsTo.hasRemote)) {
      remote=URI.create(((Literal<QName>)m.getValue()).getValue().toString());
    }
 else     if (m.getName().equals(Sbol2Terms.MapsTo.hasLocal)) {
      local=URI.create(((Literal<QName>)m.getValue()).getValue().toString());
    }
 else     if (m.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)m.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(m));
    }
  }
  MapsTo map=new MapsTo(mappings.getIdentity(),refinement,local,remote);
  if (displayId != null)   map.setDisplayId(displayId);
  if (persistentIdentity != null)   map.setPersistentIdentity(persistentIdentity);
  if (version != null)   map.setVersion(version);
  if (wasDerivedFrom != null)   map.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   map.setAnnotations(annotations);
  return map;
}","private static MapsTo parseMapsTo(NestedDocument<QName> mappings){
  URI persistentIdentity=null;
  String displayId=null;
  String version=null;
  URI remote=null;
  RefinementType refinement=null;
  URI local=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> m : mappings.getProperties()) {
    if (m.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)m.getValue()).getValue().toString());
    }
 else     if (m.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)m.getValue()).getValue().toString();
    }
 else     if (m.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)m.getValue()).getValue().toString();
    }
 else     if (m.getName().equals(Sbol2Terms.MapsTo.refinement)) {
      refinement=RefinementType.convertToRefinementType(URI.create(((Literal<QName>)m.getValue()).getValue().toString()));
    }
 else     if (m.getName().equals(Sbol2Terms.MapsTo.hasRemote)) {
      remote=URI.create(((Literal<QName>)m.getValue()).getValue().toString());
    }
 else     if (m.getName().equals(Sbol2Terms.MapsTo.hasLocal)) {
      local=URI.create(((Literal<QName>)m.getValue()).getValue().toString());
    }
 else     if (m.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)m.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(m));
    }
  }
  MapsTo map=new MapsTo(mappings.getIdentity(),refinement,local,remote);
  if (displayId != null)   map.setDisplayId(displayId);
  if (persistentIdentity != null)   map.setPersistentIdentity(persistentIdentity);
  if (version != null)   map.setVersion(version);
  if (wasDerivedFrom != null)   map.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   map.setAnnotations(annotations);
  return map;
}",0.9940736923473332
12729,"private static Sequence parseSequences(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  String elements=null;
  URI encoding=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Sequence.elements)) {
      elements=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Sequence.encoding)) {
      encoding=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Sequence sequence=SBOLDoc.createSequence(topLevel.getIdentity(),elements,encoding);
  if (persistentIdentity != null)   sequence.setPersistentIdentity(persistentIdentity);
  if (version != null)   sequence.setVersion(version);
  if (displayId != null)   sequence.setDisplayId(displayId);
  if (name != null)   sequence.setName(name);
  if (description != null)   sequence.setDescription(description);
  if (wasDerivedFrom != null)   sequence.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   sequence.setAnnotations(annotations);
  return sequence;
}","private static Sequence parseSequences(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  String elements=null;
  URI encoding=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Sequence.elements)) {
      elements=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Sequence.encoding)) {
      encoding=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Sequence sequence=SBOLDoc.createSequence(topLevel.getIdentity(),elements,encoding);
  if (persistentIdentity != null)   sequence.setPersistentIdentity(persistentIdentity);
  if (version != null)   sequence.setVersion(version);
  if (displayId != null)   sequence.setDisplayId(displayId);
  if (name != null)   sequence.setName(name);
  if (description != null)   sequence.setDescription(description);
  if (wasDerivedFrom != null)   sequence.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   sequence.setAnnotations(annotations);
  return sequence;
}",0.9953013278855976
12730,"private static Participation parseParticipation(NestedDocument<QName> participation){
  URI persistentIdentity=null;
  String displayId=null;
  String version=null;
  Set<URI> roles=new HashSet<>();
  URI participant=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> p : participation.getProperties()) {
    if (p.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)p.getValue()).getValue().toString());
    }
 else     if (p.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)p.getValue()).getValue().toString();
    }
 else     if (p.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)p.getValue()).getValue().toString();
    }
 else     if (p.getName().equals(Sbol2Terms.Participation.role)) {
      roles.add(URI.create(((Literal<QName>)p.getValue()).getValue().toString()));
    }
 else     if (p.getName().equals(Sbol2Terms.Participation.hasParticipant)) {
      participant=URI.create(((Literal<QName>)p.getValue()).getValue().toString());
    }
 else     if (p.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)p.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(p));
    }
  }
  Participation p=new Participation(participation.getIdentity(),participant);
  if (!roles.isEmpty())   p.setRoles(roles);
  if (displayId != null)   p.setDisplayId(displayId);
  if (persistentIdentity != null)   p.setPersistentIdentity(persistentIdentity);
  if (version != null)   p.setVersion(version);
  if (wasDerivedFrom != null)   p.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   p.setAnnotations(annotations);
  return p;
}","private static Participation parseParticipation(NestedDocument<QName> participation){
  URI persistentIdentity=null;
  String displayId=null;
  String version=null;
  Set<URI> roles=new HashSet<>();
  URI participant=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> p : participation.getProperties()) {
    if (p.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)p.getValue()).getValue().toString());
    }
 else     if (p.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)p.getValue()).getValue().toString();
    }
 else     if (p.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)p.getValue()).getValue().toString();
    }
 else     if (p.getName().equals(Sbol2Terms.Participation.role)) {
      roles.add(URI.create(((Literal<QName>)p.getValue()).getValue().toString()));
    }
 else     if (p.getName().equals(Sbol2Terms.Participation.hasParticipant)) {
      participant=URI.create(((Literal<QName>)p.getValue()).getValue().toString());
    }
 else     if (p.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)p.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(p));
    }
  }
  Participation p=new Participation(participation.getIdentity(),participant);
  if (!roles.isEmpty())   p.setRoles(roles);
  if (displayId != null)   p.setDisplayId(displayId);
  if (persistentIdentity != null)   p.setPersistentIdentity(persistentIdentity);
  if (version != null)   p.setVersion(version);
  if (wasDerivedFrom != null)   p.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   p.setAnnotations(annotations);
  return p;
}",0.9936795823028304
12731,"private static SequenceAnnotation parseSequenceAnnotation(NestedDocument<QName> sequenceAnnotation){
  URI persistentIdentity=null;
  String displayId=null;
  Location location=null;
  URI componentURI=null;
  String name=null;
  String description=null;
  String version=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : sequenceAnnotation.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Location.Location)) {
      location=parseLocation((NestedDocument<QName>)namedProperty.getValue());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.SequenceAnnotation.hasComponent)) {
      componentURI=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  SequenceAnnotation s=new SequenceAnnotation(sequenceAnnotation.getIdentity(),location);
  if (persistentIdentity != null)   s.setPersistentIdentity(persistentIdentity);
  if (version != null)   s.setVersion(version);
  if (displayId != null)   s.setDisplayId(displayId);
  if (componentURI != null)   s.setComponent(componentURI);
  if (name != null)   s.setName(name);
  if (description != null)   s.setDescription(description);
  if (wasDerivedFrom != null)   s.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   s.setAnnotations(annotations);
  return s;
}","private static SequenceAnnotation parseSequenceAnnotation(NestedDocument<QName> sequenceAnnotation){
  URI persistentIdentity=null;
  String displayId=null;
  Location location=null;
  URI componentURI=null;
  String name=null;
  String description=null;
  String version=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : sequenceAnnotation.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Location.Location)) {
      location=parseLocation((NestedDocument<QName>)namedProperty.getValue());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.SequenceAnnotation.hasComponent)) {
      componentURI=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  SequenceAnnotation s=new SequenceAnnotation(sequenceAnnotation.getIdentity(),location);
  if (persistentIdentity != null)   s.setPersistentIdentity(persistentIdentity);
  if (version != null)   s.setVersion(version);
  if (displayId != null)   s.setDisplayId(displayId);
  if (componentURI != null)   s.setComponent(componentURI);
  if (name != null)   s.setName(name);
  if (description != null)   s.setDescription(description);
  if (wasDerivedFrom != null)   s.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   s.setAnnotations(annotations);
  return s;
}",0.9953880088229397
12732,"private static MultiRange parseMultiRange(NestedDocument<QName> typeMultiRange){
  URI persistentIdentity=null;
  String version=null;
  URI wasDerivedFrom=null;
  String displayId=null;
  List<Range> ranges=new ArrayList<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : typeMultiRange.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.MultiRange.hasRanges)) {
      ranges.add(parseRange((NestedDocument<QName>)namedProperty.getValue()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  MultiRange multiRange=new MultiRange(typeMultiRange.getIdentity(),ranges);
  if (displayId != null)   multiRange.setDisplayId(displayId);
  if (persistentIdentity != null)   multiRange.setPersistentIdentity(persistentIdentity);
  if (version != null)   multiRange.setVersion(version);
  if (wasDerivedFrom != null)   multiRange.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   multiRange.setAnnotations(annotations);
  return multiRange;
}","private static MultiRange parseMultiRange(NestedDocument<QName> typeMultiRange){
  URI persistentIdentity=null;
  String version=null;
  URI wasDerivedFrom=null;
  String displayId=null;
  List<Range> ranges=new ArrayList<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : typeMultiRange.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.MultiRange.hasRanges)) {
      ranges.add(parseRange((NestedDocument<QName>)namedProperty.getValue()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  MultiRange multiRange=new MultiRange(typeMultiRange.getIdentity(),ranges);
  if (displayId != null)   multiRange.setDisplayId(displayId);
  if (persistentIdentity != null)   multiRange.setPersistentIdentity(persistentIdentity);
  if (version != null)   multiRange.setVersion(version);
  if (wasDerivedFrom != null)   multiRange.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   multiRange.setAnnotations(annotations);
  return multiRange;
}",0.9934973141080012
12733,"private static Interaction parseInteraction(NestedDocument<QName> interaction){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI wasDerivedFrom=null;
  Set<URI> type=new HashSet<>();
  List<Participation> participations=new ArrayList<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> i : interaction.getProperties()) {
    if (i.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)i.getValue()).getValue().toString());
    }
 else     if (i.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)i.getValue()).getValue().toString();
    }
 else     if (i.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)i.getValue()).getValue().toString();
    }
 else     if (i.getName().equals(Sbol2Terms.Interaction.type)) {
      type.add(URI.create(((Literal<QName>)i.getValue()).getValue().toString()));
    }
 else     if (i.getName().equals(Sbol2Terms.Interaction.hasParticipations)) {
      participations.add(parseParticipation((NestedDocument<QName>)i.getValue()));
    }
 else     if (i.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)i.getValue()).getValue().toString();
    }
 else     if (i.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)i.getValue()).getValue().toString();
    }
 else     if (i.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)i.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(i));
    }
  }
  Interaction i=new Interaction(interaction.getIdentity(),type);
  if (!participations.isEmpty())   i.setParticipations(participations);
  if (persistentIdentity != null)   i.setPersistentIdentity(persistentIdentity);
  if (version != null)   i.setVersion(version);
  if (displayId != null)   i.setDisplayId(displayId);
  if (name != null)   i.setName(name);
  if (description != null)   i.setDescription(description);
  if (wasDerivedFrom != null)   i.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   i.setAnnotations(annotations);
  return i;
}","private static Interaction parseInteraction(NestedDocument<QName> interaction){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI wasDerivedFrom=null;
  Set<URI> type=new HashSet<>();
  List<Participation> participations=new ArrayList<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> i : interaction.getProperties()) {
    if (i.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)i.getValue()).getValue().toString());
    }
 else     if (i.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)i.getValue()).getValue().toString();
    }
 else     if (i.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)i.getValue()).getValue().toString();
    }
 else     if (i.getName().equals(Sbol2Terms.Interaction.type)) {
      type.add(URI.create(((Literal<QName>)i.getValue()).getValue().toString()));
    }
 else     if (i.getName().equals(Sbol2Terms.Interaction.hasParticipations)) {
      participations.add(parseParticipation((NestedDocument<QName>)i.getValue()));
    }
 else     if (i.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)i.getValue()).getValue().toString();
    }
 else     if (i.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)i.getValue()).getValue().toString();
    }
 else     if (i.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)i.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(i));
    }
  }
  Interaction i=new Interaction(interaction.getIdentity(),type);
  if (!participations.isEmpty())   i.setParticipations(participations);
  if (persistentIdentity != null)   i.setPersistentIdentity(persistentIdentity);
  if (version != null)   i.setVersion(version);
  if (displayId != null)   i.setDisplayId(displayId);
  if (name != null)   i.setName(name);
  if (description != null)   i.setDescription(description);
  if (wasDerivedFrom != null)   i.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   i.setAnnotations(annotations);
  return i;
}",0.9949660757277304
12734,"private static ComponentDefinition parseComponentDefinitions(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel){
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  URI structure=null;
  String version=null;
  URI wasDerivedFrom=null;
  Set<URI> type=new HashSet<>();
  Set<URI> roles=new HashSet<>();
  List<Component> components=new ArrayList<>();
  List<Annotation> annotations=new ArrayList<>();
  List<SequenceAnnotation> sequenceAnnotations=new ArrayList<>();
  List<SequenceConstraint> sequenceConstraints=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.type)) {
      type.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.roles)) {
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasComponent)) {
      components.add(parseSubComponent(((NestedDocument<QName>)namedProperty.getValue())));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSequence)) {
      structure=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSequenceAnnotations)) {
      sequenceAnnotations.add(parseSequenceAnnotation((NestedDocument<QName>)namedProperty.getValue()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSequenceConstraints)) {
      sequenceConstraints.add(parseSequenceConstraint(((NestedDocument<QName>)namedProperty.getValue())));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  ComponentDefinition c=SBOLDoc.createComponentDefinition(topLevel.getIdentity(),type);
  if (roles != null)   c.setRoles(roles);
  if (displayId != null)   c.setDisplayId(displayId);
  if (persistentIdentity != null)   c.setPersistentIdentity(persistentIdentity);
  if (structure != null)   c.setSequence(structure);
  if (!components.isEmpty())   c.setComponents(components);
  if (!sequenceAnnotations.isEmpty())   c.setSequenceAnnotations(sequenceAnnotations);
  if (!sequenceConstraints.isEmpty())   c.setSequenceConstraints(sequenceConstraints);
  if (name != null)   c.setName(name);
  if (description != null)   c.setDescription(description);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  if (version != null)   c.setVersion(version);
  if (wasDerivedFrom != null)   c.setWasDerivedFrom(wasDerivedFrom);
  return c;
}","private static ComponentDefinition parseComponentDefinitions(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel){
  String displayId=null;
  String name=null;
  String description=null;
  URI persistentIdentity=null;
  URI structure=null;
  String version=null;
  URI wasDerivedFrom=null;
  Set<URI> type=new HashSet<>();
  Set<URI> roles=new HashSet<>();
  List<Component> components=new ArrayList<>();
  List<Annotation> annotations=new ArrayList<>();
  List<SequenceAnnotation> sequenceAnnotations=new ArrayList<>();
  List<SequenceConstraint> sequenceConstraints=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.type)) {
      type.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.roles)) {
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasComponent)) {
      components.add(parseSubComponent(((NestedDocument<QName>)namedProperty.getValue())));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSequence)) {
      structure=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSequenceAnnotations)) {
      sequenceAnnotations.add(parseSequenceAnnotation((NestedDocument<QName>)namedProperty.getValue()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentDefinition.hasSequenceConstraints)) {
      sequenceConstraints.add(parseSequenceConstraint(((NestedDocument<QName>)namedProperty.getValue())));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  ComponentDefinition c=SBOLDoc.createComponentDefinition(topLevel.getIdentity(),type);
  if (roles != null)   c.setRoles(roles);
  if (displayId != null)   c.setDisplayId(displayId);
  if (persistentIdentity != null)   c.setPersistentIdentity(persistentIdentity);
  if (structure != null)   c.setSequence(structure);
  if (!components.isEmpty())   c.setComponents(components);
  if (!sequenceAnnotations.isEmpty())   c.setSequenceAnnotations(sequenceAnnotations);
  if (!sequenceConstraints.isEmpty())   c.setSequenceConstraints(sequenceConstraints);
  if (name != null)   c.setName(name);
  if (description != null)   c.setDescription(description);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  if (version != null)   c.setVersion(version);
  if (wasDerivedFrom != null)   c.setWasDerivedFrom(wasDerivedFrom);
  return c;
}",0.9969716919025676
12735,"private static Component parseSubComponent(NestedDocument<QName> subComponents){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI subComponentURI=null;
  AccessType access=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  List<MapsTo> mapsTo=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : subComponents.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentInstance.access)) {
      access=ComponentInstance.AccessType.convertToAccessType(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Module.hasMapsTo)) {
      mapsTo.add(parseMapsTo((NestedDocument<QName>)namedProperty.getValue()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentInstance.hasComponentDefinition)) {
      subComponentURI=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Component c=new Component(subComponents.getIdentity(),access,subComponentURI);
  if (persistentIdentity != null)   c.setPersistentIdentity(persistentIdentity);
  if (version != null)   c.setVersion(version);
  if (displayId != null)   c.setDisplayId(displayId);
  if (access != null)   c.setAccess(access);
  if (!mapsTo.isEmpty())   c.setMapsTo(mapsTo);
  if (subComponentURI != null)   c.setDefinition(subComponentURI);
  if (name != null)   c.setName(name);
  if (description != null)   c.setDescription(description);
  if (wasDerivedFrom != null)   c.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  return c;
}","private static Component parseSubComponent(NestedDocument<QName> subComponents){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI subComponentURI=null;
  AccessType access=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  List<MapsTo> mapsTo=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : subComponents.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentInstance.access)) {
      access=ComponentInstance.AccessType.convertToAccessType(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Module.hasMapsTo)) {
      mapsTo.add(parseMapsTo((NestedDocument<QName>)namedProperty.getValue()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ComponentInstance.hasComponentDefinition)) {
      subComponentURI=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Component c=new Component(subComponents.getIdentity(),access,subComponentURI);
  if (persistentIdentity != null)   c.setPersistentIdentity(persistentIdentity);
  if (version != null)   c.setVersion(version);
  if (displayId != null)   c.setDisplayId(displayId);
  if (access != null)   c.setAccess(access);
  if (!mapsTo.isEmpty())   c.setMapsTo(mapsTo);
  if (subComponentURI != null)   c.setDefinition(subComponentURI);
  if (name != null)   c.setName(name);
  if (description != null)   c.setDescription(description);
  if (wasDerivedFrom != null)   c.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  return c;
}",0.9959613696224758
12736,"private static Module parseSubModule(NestedDocument<QName> module){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  URI definitionURI=null;
  String name=null;
  String description=null;
  URI wasDerivedFrom=null;
  List<MapsTo> mappings=new ArrayList<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : module.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Module.hasMapsTo)) {
      mappings.add(parseMapsTo((NestedDocument<QName>)namedProperty.getValue()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Module.hasDefinition)) {
      definitionURI=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Module submodule=new Module(module.getIdentity(),definitionURI);
  if (persistentIdentity != null)   submodule.setPersistentIdentity(persistentIdentity);
  if (version != null)   submodule.setVersion(version);
  if (displayId != null)   submodule.setDisplayId(displayId);
  if (!mappings.isEmpty())   submodule.setMapsTos(mappings);
  if (name != null)   submodule.setName(name);
  if (description != null)   submodule.setDescription(description);
  if (wasDerivedFrom != null)   submodule.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   submodule.setAnnotations(annotations);
  return submodule;
}","private static Module parseSubModule(NestedDocument<QName> module){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  URI definitionURI=null;
  String name=null;
  String description=null;
  URI wasDerivedFrom=null;
  List<MapsTo> mappings=new ArrayList<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : module.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Module.hasMapsTo)) {
      mappings.add(parseMapsTo((NestedDocument<QName>)namedProperty.getValue()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Module.hasDefinition)) {
      definitionURI=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Module submodule=new Module(module.getIdentity(),definitionURI);
  if (persistentIdentity != null)   submodule.setPersistentIdentity(persistentIdentity);
  if (version != null)   submodule.setVersion(version);
  if (displayId != null)   submodule.setDisplayId(displayId);
  if (!mappings.isEmpty())   submodule.setMapsTos(mappings);
  if (name != null)   submodule.setName(name);
  if (description != null)   submodule.setDescription(description);
  if (wasDerivedFrom != null)   submodule.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   submodule.setAnnotations(annotations);
  return submodule;
}",0.9954009198160368
12737,"private static Model parseModels(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI source=null;
  URI language=null;
  URI framework=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.source)) {
      source=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.language)) {
      language=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.framework)) {
      framework=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Model m=SBOLDoc.createModel(topLevel.getIdentity(),source,language,framework);
  if (persistentIdentity != null)   m.setPersistentIdentity(persistentIdentity);
  if (version != null)   m.setVersion(version);
  if (displayId != null)   m.setDisplayId(displayId);
  if (name != null)   m.setName(name);
  if (description != null)   m.setDescription(description);
  if (wasDerivedFrom != null)   m.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   m.setAnnotations(annotations);
  return m;
}","private static Model parseModels(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI source=null;
  URI language=null;
  URI framework=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.source)) {
      source=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.language)) {
      language=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.framework)) {
      framework=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Model m=SBOLDoc.createModel(topLevel.getIdentity(),source,language,framework);
  if (persistentIdentity != null)   m.setPersistentIdentity(persistentIdentity);
  if (version != null)   m.setVersion(version);
  if (displayId != null)   m.setDisplayId(displayId);
  if (name != null)   m.setName(name);
  if (description != null)   m.setDescription(description);
  if (wasDerivedFrom != null)   m.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   m.setAnnotations(annotations);
  return m;
}",0.9955348476024072
12738,"private static FunctionalComponent parseFunctionalComponents(NestedDocument<QName> functionalComponent){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  AccessType access=null;
  DirectionType direction=null;
  URI functionalComponentURI=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  List<MapsTo> mappings=new ArrayList<>();
  for (  NamedProperty<QName> f : functionalComponent.getProperties()) {
    if (f.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)f.getValue()).getValue().toString());
    }
 else     if (f.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)f.getValue()).getValue().toString();
    }
 else     if (f.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)f.getValue()).getValue().toString();
    }
 else     if (f.getName().equals(Sbol2Terms.ComponentInstance.access)) {
      access=ComponentInstance.AccessType.convertToAccessType(URI.create(((Literal<QName>)f.getValue()).getValue().toString()));
    }
 else     if (f.getName().equals(Sbol2Terms.FunctionalComponent.direction)) {
      direction=FunctionalComponent.DirectionType.convertToDirectionType(URI.create(((Literal<QName>)f.getValue()).getValue().toString()));
    }
 else     if (f.getName().equals(Sbol2Terms.ComponentInstance.hasMapsTo)) {
      mappings.add(parseMapsTo((NestedDocument<QName>)f.getValue()));
    }
 else     if (f.getName().equals(Sbol2Terms.ComponentInstance.hasComponentDefinition)) {
      functionalComponentURI=URI.create(((Literal<QName>)f.getValue()).getValue().toString());
    }
 else     if (f.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)f.getValue()).getValue().toString();
    }
 else     if (f.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)f.getValue()).getValue().toString();
    }
 else     if (f.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)f.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(f));
    }
  }
  FunctionalComponent fc=new FunctionalComponent(functionalComponent.getIdentity(),access,functionalComponentURI,direction);
  if (persistentIdentity != null)   fc.setPersistentIdentity(persistentIdentity);
  if (version != null)   fc.setVersion(version);
  if (displayId != null)   fc.setDisplayId(displayId);
  if (!mappings.isEmpty())   fc.setMapsTo(mappings);
  if (name != null)   fc.setName(name);
  if (description != null)   fc.setDescription(description);
  if (wasDerivedFrom != null)   fc.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   fc.setAnnotations(annotations);
  return fc;
}","private static FunctionalComponent parseFunctionalComponents(NestedDocument<QName> functionalComponent){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  AccessType access=null;
  DirectionType direction=null;
  URI functionalComponentURI=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  List<MapsTo> mappings=new ArrayList<>();
  for (  NamedProperty<QName> f : functionalComponent.getProperties()) {
    if (f.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)f.getValue()).getValue().toString());
    }
 else     if (f.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)f.getValue()).getValue().toString();
    }
 else     if (f.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)f.getValue()).getValue().toString();
    }
 else     if (f.getName().equals(Sbol2Terms.ComponentInstance.access)) {
      access=ComponentInstance.AccessType.convertToAccessType(URI.create(((Literal<QName>)f.getValue()).getValue().toString()));
    }
 else     if (f.getName().equals(Sbol2Terms.FunctionalComponent.direction)) {
      direction=FunctionalComponent.DirectionType.convertToDirectionType(URI.create(((Literal<QName>)f.getValue()).getValue().toString()));
    }
 else     if (f.getName().equals(Sbol2Terms.ComponentInstance.hasMapsTo)) {
      mappings.add(parseMapsTo((NestedDocument<QName>)f.getValue()));
    }
 else     if (f.getName().equals(Sbol2Terms.ComponentInstance.hasComponentDefinition)) {
      functionalComponentURI=URI.create(((Literal<QName>)f.getValue()).getValue().toString());
    }
 else     if (f.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)f.getValue()).getValue().toString();
    }
 else     if (f.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)f.getValue()).getValue().toString();
    }
 else     if (f.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)f.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(f));
    }
  }
  FunctionalComponent fc=new FunctionalComponent(functionalComponent.getIdentity(),access,functionalComponentURI,direction);
  if (persistentIdentity != null)   fc.setPersistentIdentity(persistentIdentity);
  if (version != null)   fc.setVersion(version);
  if (displayId != null)   fc.setDisplayId(displayId);
  if (!mappings.isEmpty())   fc.setMapsTo(mappings);
  if (name != null)   fc.setName(name);
  if (description != null)   fc.setDescription(description);
  if (wasDerivedFrom != null)   fc.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   fc.setAnnotations(annotations);
  return fc;
}",0.9959895379250218
12739,"private static Collection parseCollections(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI wasDerivedFrom=null;
  Set<URI> members=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Collection.hasMembers)) {
      members.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Collection c=SBOLDoc.createCollection(topLevel.getIdentity());
  if (displayId != null)   c.setDisplayId(displayId);
  if (version != null)   c.setVersion(version);
  if (persistentIdentity != null)   c.setPersistentIdentity(persistentIdentity);
  if (!members.isEmpty())   c.setMembers(members);
  if (name != null)   c.setName(name);
  if (description != null)   c.setDescription(description);
  if (wasDerivedFrom != null)   c.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  return c;
}","private static Collection parseCollections(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI wasDerivedFrom=null;
  Set<URI> members=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Collection.hasMembers)) {
      members.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Collection c=SBOLDoc.createCollection(topLevel.getIdentity());
  if (displayId != null)   c.setDisplayId(displayId);
  if (version != null)   c.setVersion(version);
  if (persistentIdentity != null)   c.setPersistentIdentity(persistentIdentity);
  if (!members.isEmpty())   c.setMembers(members);
  if (name != null)   c.setName(name);
  if (description != null)   c.setDescription(description);
  if (wasDerivedFrom != null)   c.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  return c;
}",0.9949103784023012
12740,"private static GenericLocation parseGenericLocation(NestedDocument<QName> typeGenLoc){
  URI persistentIdentity=null;
  String displayId=null;
  URI orientation=null;
  String version=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : typeGenLoc.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.GenericLocation.orientation)) {
      orientation=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  GenericLocation gl=new GenericLocation(typeGenLoc.getIdentity());
  if (displayId != null)   gl.setDisplayId(displayId);
  if (orientation != null)   gl.setOrientation(orientation);
  if (persistentIdentity != null)   gl.setPersistentIdentity(persistentIdentity);
  if (version != null)   gl.setVersion(version);
  if (wasDerivedFrom != null)   gl.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   gl.setAnnotations(annotations);
  return gl;
}","private static GenericLocation parseGenericLocation(NestedDocument<QName> typeGenLoc){
  URI persistentIdentity=null;
  String displayId=null;
  URI orientation=null;
  String version=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : typeGenLoc.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.GenericLocation.orientation)) {
      orientation=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  GenericLocation gl=new GenericLocation(typeGenLoc.getIdentity());
  if (displayId != null)   gl.setDisplayId(displayId);
  if (orientation != null)   gl.setOrientation(orientation);
  if (persistentIdentity != null)   gl.setPersistentIdentity(persistentIdentity);
  if (version != null)   gl.setVersion(version);
  if (wasDerivedFrom != null)   gl.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   gl.setAnnotations(annotations);
  return gl;
}",0.9935483870967742
12741,"private static GenericTopLevel parseGenericTopLevel(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  GenericTopLevel t=SBOLDoc.createGenericTopLevel(topLevel.getIdentity(),topLevel.getType());
  if (persistentIdentity != null)   t.setPersistentIdentity(persistentIdentity);
  if (version != null)   t.setVersion(version);
  if (displayId != null)   t.setDisplayId(displayId);
  if (name != null)   t.setName(name);
  if (description != null)   t.setDescription(description);
  if (wasDerivedFrom != null)   t.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   t.setAnnotations(annotations);
  return t;
}","private static GenericTopLevel parseGenericTopLevel(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  GenericTopLevel t=SBOLDoc.createGenericTopLevel(topLevel.getIdentity(),topLevel.getType());
  if (persistentIdentity != null)   t.setPersistentIdentity(persistentIdentity);
  if (version != null)   t.setVersion(version);
  if (displayId != null)   t.setDisplayId(displayId);
  if (name != null)   t.setName(name);
  if (description != null)   t.setDescription(description);
  if (wasDerivedFrom != null)   t.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   t.setAnnotations(annotations);
  return t;
}",0.9943223895334484
12742,"public static void main(String[] args){
  try {
    InputStream file=readTester.class.getResourceAsStream(path + filenameV1_11);
    if (file == null)     file=readTester.class.getResourceAsStream(""String_Node_Str"" + path + filenameV1_11);
    SBOLDocument document1=SBOLReader.read(file);
    SBOLWriter.writeRDF(document1,(System.out));
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    InputStream file=readTester.class.getResourceAsStream(path + filenameV1_11);
    if (file == null)     file=readTester.class.getResourceAsStream(""String_Node_Str"" + path + filenameV1_11);
    SBOLReader.setURIPrefix(""String_Node_Str"");
    SBOLDocument document1=SBOLReader.read(file);
    document1=SBOLTestUtils.writeAndRead(document1);
    SBOLWriter.writeRDF(document1,(System.out));
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}",0.887402452619844
12743,"private Collection(Collection collection){
  super(collection.getIdentity());
  Set<URI> newMembers=new HashSet<>();
  for (  URI member : collection.getMemberURIs()) {
    newMembers.add(member);
  }
}","private Collection(Collection collection){
  super(collection.getIdentity());
  Set<URI> newMembers=new HashSet<>();
  for (  URI member : collection.getMemberURIs()) {
    newMembers.add(member);
  }
  this.setMembers(newMembers);
}",0.928735632183908
12744,"private ModuleDefinition(ModuleDefinition moduleDefinition){
  super(moduleDefinition);
  Set<URI> roles=new HashSet<>();
  for (  URI role : moduleDefinition.getRoles()) {
    roles.add(role);
  }
  this.setRoles(roles);
  if (!moduleDefinition.getModules().isEmpty()) {
    List<Module> subModules=new ArrayList<>();
    for (    Module subModule : moduleDefinition.getModules()) {
      subModules.add(subModule.deepCopy());
    }
    this.setModules(subModules);
  }
  if (!moduleDefinition.getInteractions().isEmpty()) {
    List<Interaction> interactions=new ArrayList<>();
    for (    Interaction interaction : moduleDefinition.getInteractions()) {
      interactions.add(interaction.deepCopy());
    }
    this.setInteractions(interactions);
  }
  if (!moduleDefinition.getFunctionalComponents().isEmpty()) {
    List<FunctionalComponent> components=new ArrayList<>();
    for (    FunctionalComponent component : moduleDefinition.getFunctionalComponents()) {
      components.add(component.deepCopy());
    }
    this.setFunctionalComponents(components);
  }
  if (!moduleDefinition.getModels().isEmpty()) {
    Set<URI> models=new HashSet<>();
    for (    URI model : moduleDefinition.getModelURIs()) {
      models.add(model);
    }
  }
}","private ModuleDefinition(ModuleDefinition moduleDefinition){
  super(moduleDefinition);
  Set<URI> roles=new HashSet<>();
  for (  URI role : moduleDefinition.getRoles()) {
    roles.add(role);
  }
  this.setRoles(roles);
  if (!moduleDefinition.getModules().isEmpty()) {
    List<Module> subModules=new ArrayList<>();
    for (    Module subModule : moduleDefinition.getModules()) {
      subModules.add(subModule.deepCopy());
    }
    this.setModules(subModules);
  }
  if (!moduleDefinition.getInteractions().isEmpty()) {
    List<Interaction> interactions=new ArrayList<>();
    for (    Interaction interaction : moduleDefinition.getInteractions()) {
      interactions.add(interaction.deepCopy());
    }
    this.setInteractions(interactions);
  }
  if (!moduleDefinition.getFunctionalComponents().isEmpty()) {
    List<FunctionalComponent> components=new ArrayList<>();
    for (    FunctionalComponent component : moduleDefinition.getFunctionalComponents()) {
      components.add(component.deepCopy());
    }
    this.setFunctionalComponents(components);
  }
  if (!moduleDefinition.getModels().isEmpty()) {
    Set<URI> models=new HashSet<>();
    for (    URI model : moduleDefinition.getModelURIs()) {
      models.add(model);
    }
    this.setModels(models);
  }
}",0.9889328063241106
12745,"private static ModuleDefinition parseModuleDefinition(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI wasDerivedFrom=null;
  Set<URI> roles=new HashSet<>();
  Set<URI> models=new HashSet<>();
  List<FunctionalComponent> functionalComponents=new ArrayList<>();
  List<Interaction> interactions=new ArrayList<>();
  List<Module> subModules=new ArrayList<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.roles)) {
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasModule)) {
      subModules.add(parseSubModule(((NestedDocument<QName>)namedProperty.getValue())));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasInteractions)) {
      interactions.add(parseInteraction(((NestedDocument<QName>)namedProperty.getValue())));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasfunctionalComponent)) {
      functionalComponents.add(parseFunctionalComponents((NestedDocument<QName>)namedProperty.getValue()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasModels)) {
      models.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  ModuleDefinition moduleDefinition=SBOLDoc.createModuleDefinition(topLevel.getIdentity());
  if (roles != null)   moduleDefinition.setRoles(roles);
  if (persistentIdentity != null)   moduleDefinition.setPersistentIdentity(persistentIdentity);
  if (version != null)   moduleDefinition.setVersion(version);
  if (displayId != null)   moduleDefinition.setDisplayId(displayId);
  if (!functionalComponents.isEmpty())   moduleDefinition.setFunctionalComponents(functionalComponents);
  if (!interactions.isEmpty())   moduleDefinition.setInteractions(interactions);
  if (!models.isEmpty())   moduleDefinition.setModels(models);
  if (!subModules.isEmpty())   moduleDefinition.setModules(subModules);
  if (name != null)   moduleDefinition.setName(name);
  if (description != null)   moduleDefinition.setDescription(description);
  if (wasDerivedFrom != null)   moduleDefinition.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   moduleDefinition.setAnnotations(annotations);
  return moduleDefinition;
}","private static ModuleDefinition parseModuleDefinition(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI wasDerivedFrom=null;
  Set<URI> roles=new HashSet<>();
  Set<URI> models=new HashSet<>();
  List<FunctionalComponent> functionalComponents=new ArrayList<>();
  List<Interaction> interactions=new ArrayList<>();
  List<Module> subModules=new ArrayList<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.roles)) {
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasModule)) {
      subModules.add(parseSubModule(((NestedDocument<QName>)namedProperty.getValue())));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasInteractions)) {
      interactions.add(parseInteraction(((NestedDocument<QName>)namedProperty.getValue())));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasfunctionalComponent)) {
      functionalComponents.add(parseFunctionalComponents((NestedDocument<QName>)namedProperty.getValue()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.ModuleDefinition.hasModels)) {
      models.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  ModuleDefinition moduleDefinition=SBOLDoc.createModuleDefinition(topLevel.getIdentity());
  if (!roles.isEmpty())   moduleDefinition.setRoles(roles);
  if (persistentIdentity != null)   moduleDefinition.setPersistentIdentity(persistentIdentity);
  if (version != null)   moduleDefinition.setVersion(version);
  if (displayId != null)   moduleDefinition.setDisplayId(displayId);
  if (!functionalComponents.isEmpty())   moduleDefinition.setFunctionalComponents(functionalComponents);
  if (!interactions.isEmpty())   moduleDefinition.setInteractions(interactions);
  if (!models.isEmpty())   moduleDefinition.setModels(models);
  if (!subModules.isEmpty())   moduleDefinition.setModules(subModules);
  if (name != null)   moduleDefinition.setName(name);
  if (description != null)   moduleDefinition.setDescription(description);
  if (wasDerivedFrom != null)   moduleDefinition.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   moduleDefinition.setAnnotations(annotations);
  return moduleDefinition;
}",0.8195883223462935
12746,"private static Participation parseParticipation(NestedDocument<QName> participation){
  URI persistentIdentity=null;
  String displayId=null;
  String version=null;
  Set<URI> role=new HashSet<>();
  URI participant=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> p : participation.getProperties()) {
    if (p.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)p.getValue()).getValue().toString());
    }
 else     if (p.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)p.getValue()).getValue().toString();
    }
 else     if (p.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)p.getValue()).getValue().toString();
    }
 else     if (p.getName().equals(Sbol2Terms.Participation.role)) {
      role.add(URI.create(((Literal<QName>)p.getValue()).getValue().toString()));
    }
 else     if (p.getName().equals(Sbol2Terms.Participation.hasParticipant)) {
      participant=URI.create(((Literal<QName>)p.getValue()).getValue().toString());
    }
 else     if (p.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)p.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(p));
    }
  }
  Participation p=new Participation(participation.getIdentity(),participant);
  if (role != null)   p.setRoles(role);
  if (displayId != null)   p.setDisplayId(displayId);
  if (persistentIdentity != null)   p.setPersistentIdentity(persistentIdentity);
  if (version != null)   p.setVersion(version);
  if (wasDerivedFrom != null)   p.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   p.setAnnotations(annotations);
  return p;
}","private static Participation parseParticipation(NestedDocument<QName> participation){
  URI persistentIdentity=null;
  String displayId=null;
  String version=null;
  Set<URI> roles=new HashSet<>();
  URI participant=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> p : participation.getProperties()) {
    if (p.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)p.getValue()).getValue().toString());
    }
 else     if (p.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)p.getValue()).getValue().toString();
    }
 else     if (p.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)p.getValue()).getValue().toString();
    }
 else     if (p.getName().equals(Sbol2Terms.Participation.role)) {
      roles.add(URI.create(((Literal<QName>)p.getValue()).getValue().toString()));
    }
 else     if (p.getName().equals(Sbol2Terms.Participation.hasParticipant)) {
      participant=URI.create(((Literal<QName>)p.getValue()).getValue().toString());
    }
 else     if (p.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)p.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(p));
    }
  }
  Participation p=new Participation(participation.getIdentity(),participant);
  if (!roles.isEmpty())   p.setRoles(roles);
  if (displayId != null)   p.setDisplayId(displayId);
  if (persistentIdentity != null)   p.setPersistentIdentity(persistentIdentity);
  if (version != null)   p.setVersion(version);
  if (wasDerivedFrom != null)   p.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   p.setAnnotations(annotations);
  return p;
}",0.8982068965517241
12747,"private static Interaction parseInteraction(NestedDocument<QName> interaction){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI wasDerivedFrom=null;
  Set<URI> type=new HashSet<>();
  List<Participation> participations=new ArrayList<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> i : interaction.getProperties()) {
    if (i.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)i.getValue()).getValue().toString());
    }
 else     if (i.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)i.getValue()).getValue().toString();
    }
 else     if (i.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)i.getValue()).getValue().toString();
    }
 else     if (i.getName().equals(Sbol2Terms.Interaction.type)) {
      type.add(URI.create(((Literal<QName>)i.getValue()).getValue().toString()));
    }
 else     if (i.getName().equals(Sbol2Terms.Interaction.hasParticipations)) {
      participations.add(parseParticipation((NestedDocument<QName>)i.getValue()));
    }
 else     if (i.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)i.getValue()).getValue().toString();
    }
 else     if (i.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)i.getValue()).getValue().toString();
    }
 else     if (i.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)i.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(i));
    }
  }
  Interaction i=new Interaction(interaction.getIdentity(),type);
  if (participations != null) {
    i.setParticipations(participations);
  }
  if (persistentIdentity != null)   i.setPersistentIdentity(persistentIdentity);
  if (version != null)   i.setVersion(version);
  if (displayId != null)   i.setDisplayId(displayId);
  if (name != null)   i.setName(name);
  if (description != null)   i.setDescription(description);
  if (wasDerivedFrom != null)   i.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   i.setAnnotations(annotations);
  return i;
}","private static Interaction parseInteraction(NestedDocument<QName> interaction){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI wasDerivedFrom=null;
  Set<URI> type=new HashSet<>();
  List<Participation> participations=new ArrayList<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> i : interaction.getProperties()) {
    if (i.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)i.getValue()).getValue().toString());
    }
 else     if (i.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)i.getValue()).getValue().toString();
    }
 else     if (i.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)i.getValue()).getValue().toString();
    }
 else     if (i.getName().equals(Sbol2Terms.Interaction.type)) {
      type.add(URI.create(((Literal<QName>)i.getValue()).getValue().toString()));
    }
 else     if (i.getName().equals(Sbol2Terms.Interaction.hasParticipations)) {
      participations.add(parseParticipation((NestedDocument<QName>)i.getValue()));
    }
 else     if (i.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)i.getValue()).getValue().toString();
    }
 else     if (i.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)i.getValue()).getValue().toString();
    }
 else     if (i.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)i.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(i));
    }
  }
  Interaction i=new Interaction(interaction.getIdentity(),type);
  if (!participations.isEmpty())   i.setParticipations(participations);
  if (persistentIdentity != null)   i.setPersistentIdentity(persistentIdentity);
  if (version != null)   i.setVersion(version);
  if (displayId != null)   i.setDisplayId(displayId);
  if (name != null)   i.setName(name);
  if (description != null)   i.setDescription(description);
  if (wasDerivedFrom != null)   i.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   i.setAnnotations(annotations);
  return i;
}",0.8789139478870156
12748,"private static Model parseModels(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI source=null;
  URI language=null;
  URI framework=null;
  URI wasDerivedFrom=null;
  Set<URI> roles=new HashSet<>();
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.source)) {
      source=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.language)) {
      language=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.framework)) {
      framework=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.roles)) {
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Model m=SBOLDoc.createModel(topLevel.getIdentity(),source,language,framework);
  if (persistentIdentity != null)   m.setPersistentIdentity(persistentIdentity);
  if (version != null)   m.setVersion(version);
  if (displayId != null)   m.setDisplayId(displayId);
  if (name != null)   m.setName(name);
  if (description != null)   m.setDescription(description);
  if (wasDerivedFrom != null)   m.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   m.setAnnotations(annotations);
  return m;
}","private static Model parseModels(SBOLDocument SBOLDoc,TopLevelDocument<QName> topLevel){
  URI persistentIdentity=null;
  String version=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI source=null;
  URI language=null;
  URI framework=null;
  URI wasDerivedFrom=null;
  List<Annotation> annotations=new ArrayList<>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol2Terms.Identified.persistentIdentity)) {
      persistentIdentity=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Identified.version)) {
      version=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.source)) {
      source=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.language)) {
      language=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Model.framework)) {
      framework=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(ProvTerms.Prov.wasDerivedFrom)) {
      wasDerivedFrom=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Model m=SBOLDoc.createModel(topLevel.getIdentity(),source,language,framework);
  if (persistentIdentity != null)   m.setPersistentIdentity(persistentIdentity);
  if (version != null)   m.setVersion(version);
  if (displayId != null)   m.setDisplayId(displayId);
  if (name != null)   m.setName(name);
  if (description != null)   m.setDescription(description);
  if (wasDerivedFrom != null)   m.setWasDerivedFrom(wasDerivedFrom);
  if (!annotations.isEmpty())   m.setAnnotations(annotations);
  return m;
}",0.9613156419360868
12749,"private static Collection parseCollectionV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel){
  URI identity=topLevel.getIdentity();
  String displayId=null;
  String name=null;
  String description=null;
  Set<URI> members=new HashSet<URI>();
  List<Annotation> annotations=new ArrayList<Annotation>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.Collection.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      if (setURIPrefix != null) {
        identity=URI.create(setURIPrefix + ""String_Node_Str"" + displayId+ ""String_Node_Str"");
      }
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.Collection.name)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.Collection.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.Collection.component)) {
      members.add(parseDnaComponentV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Collection c=SBOLDoc.createCollection(identity);
  if (identity != topLevel.getIdentity())   c.setWasDerivedFrom(topLevel.getIdentity());
  if (displayId != null)   c.setDisplayId(displayId);
  if (name != null)   c.setName(name);
  if (description != null)   c.setDescription(description);
  if (!members.isEmpty())   c.setMembers(members);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  return c;
}","private static Collection parseCollectionV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel){
  URI identity=topLevel.getIdentity();
  String displayId=null;
  String name=null;
  String description=null;
  Set<URI> members=new HashSet<URI>();
  List<Annotation> annotations=new ArrayList<Annotation>();
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.Collection.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      if (setURIPrefix != null) {
        identity=URI.create(setURIPrefix + ""String_Node_Str"" + SBOLDocument.TopLevelTypes.collection+ ""String_Node_Str""+ displayId+ ""String_Node_Str"");
      }
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.Collection.name)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.Collection.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.Collection.component)) {
      members.add(parseDnaComponentV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity());
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Collection c=SBOLDoc.createCollection(identity);
  if (identity != topLevel.getIdentity())   c.setWasDerivedFrom(topLevel.getIdentity());
  if (displayId != null)   c.setDisplayId(displayId);
  if (name != null)   c.setName(name);
  if (description != null)   c.setDescription(description);
  if (!members.isEmpty())   c.setMembers(members);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  return c;
}",0.6605293440736478
12750,"private static Sequence parseDnaSequenceV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel){
  String elements=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI identity=topLevel.getIdentity();
  URI encoding=Sbol2Terms.SequenceURI.DnaSequenceV1;
  List<Annotation> annotations=new ArrayList<Annotation>();
  if (setURIPrefix != null) {
    if (topLevel.getIdentity().toString().lastIndexOf('/') != -1) {
      displayId=topLevel.getIdentity().toString().substring(topLevel.getIdentity().toString().lastIndexOf('/') + 1);
      identity=URI.create(setURIPrefix + ""String_Node_Str"" + displayId+ ""String_Node_Str"");
    }
  }
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNASequence.nucleotides)) {
      elements=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      if (setURIPrefix != null) {
        identity=URI.create(setURIPrefix + ""String_Node_Str"" + displayId+ ""String_Node_Str"");
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Sequence sequence=SBOLDoc.createSequence(identity,elements,encoding);
  if (identity != topLevel.getIdentity())   sequence.setWasDerivedFrom(topLevel.getIdentity());
  if (displayId != null)   sequence.setDisplayId(displayId);
  if (name != null)   sequence.setName(name);
  if (description != null)   sequence.setDescription(description);
  if (!annotations.isEmpty())   sequence.setAnnotations(annotations);
  return sequence;
}","private static Sequence parseDnaSequenceV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> topLevel){
  String elements=null;
  String displayId=null;
  String name=null;
  String description=null;
  URI identity=topLevel.getIdentity();
  URI encoding=Sbol2Terms.SequenceURI.DnaSequenceV1;
  List<Annotation> annotations=new ArrayList<Annotation>();
  if (setURIPrefix != null) {
    if (topLevel.getIdentity().toString().lastIndexOf('/') != -1) {
      displayId=topLevel.getIdentity().toString().substring(topLevel.getIdentity().toString().lastIndexOf('/') + 1);
      identity=URI.create(setURIPrefix + ""String_Node_Str"" + SBOLDocument.TopLevelTypes.sequence+ ""String_Node_Str""+ displayId+ ""String_Node_Str"");
    }
  }
  for (  NamedProperty<QName> namedProperty : topLevel.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNASequence.nucleotides)) {
      elements=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      if (setURIPrefix != null) {
        identity=URI.create(setURIPrefix + ""String_Node_Str"" + displayId+ ""String_Node_Str"");
      }
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.title)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol2Terms.Documented.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Sequence sequence=SBOLDoc.createSequence(identity,elements,encoding);
  if (identity != topLevel.getIdentity())   sequence.setWasDerivedFrom(topLevel.getIdentity());
  if (displayId != null)   sequence.setDisplayId(displayId);
  if (name != null)   sequence.setName(name);
  if (description != null)   sequence.setDescription(description);
  if (!annotations.isEmpty())   sequence.setAnnotations(annotations);
  return sequence;
}",0.4183919114106885
12751,"private static ComponentDefinition parseDnaComponentV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> componentDef){
  String displayId=null;
  String name=null;
  String description=null;
  URI seq_identity=null;
  Set<URI> roles=new HashSet<URI>();
  URI identity=componentDef.getIdentity();
  List<Annotation> annotations=new ArrayList<Annotation>();
  List<SequenceAnnotation> sequenceAnnotations=new ArrayList<SequenceAnnotation>();
  List<Component> components=new ArrayList<Component>();
  List<SequenceConstraint> sequenceConstraints=new ArrayList<SequenceConstraint>();
  List<SBOLPair> precedePairs=new ArrayList<SBOLPair>();
  Map<URI,URI> componentDefMap=new HashMap<URI,URI>();
  Set<URI> type=new HashSet<URI>();
  type.add(Sbol2Terms.DnaComponentV1URI.type);
  int component_num=0;
  int sa_num=0;
  for (  NamedProperty<QName> namedProperty : componentDef.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      if (setURIPrefix != null) {
        identity=URI.create(setURIPrefix + ""String_Node_Str"" + SBOLDocument.TopLevelTypes.componentDefinition+ ""String_Node_Str""+ displayId+ ""String_Node_Str"");
      }
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.name)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.type)) {
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.annotations)) {
      SequenceAnnotation sa=parseSequenceAnnotationV1(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),precedePairs,identity,++sa_num);
      sequenceAnnotations.add(sa);
      URI component_identity=URI.create(getParentURI(identity) + ""String_Node_Str"" + ++component_num+ ""String_Node_Str"");
      AccessType access=AccessType.PUBLIC;
      URI instantiatedComponent=sa.getComponentURI();
      URI originalURI=((NestedDocument<QName>)namedProperty.getValue()).getIdentity();
      componentDefMap.put(originalURI,component_identity);
      sa.setComponent(component_identity);
      Component component=new Component(component_identity,access,instantiatedComponent);
      components.add(component);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.dnaSequence)) {
      seq_identity=parseDnaSequenceV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  if (roles.isEmpty())   roles.add(Sbol2Terms.DnaComponentV1URI.roles);
  int sc_number=0;
  for (  SBOLPair pair : precedePairs) {
    URI sc_identity=URI.create(getParentURI(identity) + ""String_Node_Str"" + ++sc_number+ ""String_Node_Str"");
    URI restrictionURI=Sbol2Terms.DnaComponentV1URI.restriction;
    RestrictionType restriction=SequenceConstraint.RestrictionType.convertToRestrictionType(restrictionURI);
    URI subject=null;
    URI object=null;
    for (    URI key : componentDefMap.keySet()) {
      if (pair.getLeft().equals(key)) {
        subject=componentDefMap.get(key);
      }
 else       if (pair.getRight().equals(key)) {
        object=componentDefMap.get(key);
      }
    }
    SequenceConstraint sc=new SequenceConstraint(sc_identity,restriction,subject,object);
    sequenceConstraints.add(sc);
  }
  ComponentDefinition c=SBOLDoc.createComponentDefinition(identity,type);
  if (roles != null)   c.setRoles(roles);
  if (identity != componentDef.getIdentity())   c.setWasDerivedFrom(componentDef.getIdentity());
  if (displayId != null)   c.setDisplayId(displayId);
  if (name != null && !name.isEmpty())   c.setName(name);
  if (description != null && !description.isEmpty())   c.setDescription(description);
  if (seq_identity != null)   c.setSequence(seq_identity);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  if (!sequenceAnnotations.isEmpty())   c.setSequenceAnnotations(sequenceAnnotations);
  if (!components.isEmpty())   c.setComponents(components);
  if (!sequenceConstraints.isEmpty())   c.setSequenceConstraints(sequenceConstraints);
  return c;
}","private static ComponentDefinition parseDnaComponentV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> componentDef){
  String displayId=null;
  String name=null;
  String description=null;
  URI seq_identity=null;
  Set<URI> roles=new HashSet<URI>();
  URI identity=componentDef.getIdentity();
  String persIdentity=""String_Node_Str"";
  List<Annotation> annotations=new ArrayList<Annotation>();
  List<SequenceAnnotation> sequenceAnnotations=new ArrayList<SequenceAnnotation>();
  List<Component> components=new ArrayList<Component>();
  List<SequenceConstraint> sequenceConstraints=new ArrayList<SequenceConstraint>();
  List<SBOLPair> precedePairs=new ArrayList<SBOLPair>();
  Map<URI,URI> componentDefMap=new HashMap<URI,URI>();
  Set<URI> type=new HashSet<URI>();
  type.add(Sbol2Terms.DnaComponentV1URI.type);
  int component_num=0;
  int sa_num=0;
  for (  NamedProperty<QName> namedProperty : componentDef.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      if (setURIPrefix != null) {
        persIdentity=setURIPrefix + ""String_Node_Str"" + SBOLDocument.TopLevelTypes.componentDefinition+ ""String_Node_Str""+ displayId;
        identity=URI.create(persIdentity + ""String_Node_Str"");
      }
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.name)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.type)) {
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.annotations)) {
      SequenceAnnotation sa=parseSequenceAnnotationV1(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),precedePairs,persIdentity,++sa_num);
      sequenceAnnotations.add(sa);
      URI component_identity=URI.create(persIdentity + ""String_Node_Str"" + ++component_num+ ""String_Node_Str"");
      AccessType access=AccessType.PUBLIC;
      URI instantiatedComponent=sa.getComponentURI();
      URI originalURI=((NestedDocument<QName>)namedProperty.getValue()).getIdentity();
      componentDefMap.put(originalURI,component_identity);
      sa.setComponent(component_identity);
      Component component=new Component(component_identity,access,instantiatedComponent);
      components.add(component);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.dnaSequence)) {
      seq_identity=parseDnaSequenceV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  if (roles.isEmpty())   roles.add(Sbol2Terms.DnaComponentV1URI.roles);
  int sc_number=0;
  for (  SBOLPair pair : precedePairs) {
    URI sc_identity=URI.create(persIdentity + ""String_Node_Str"" + ++sc_number+ ""String_Node_Str"");
    URI restrictionURI=Sbol2Terms.DnaComponentV1URI.restriction;
    RestrictionType restriction=SequenceConstraint.RestrictionType.convertToRestrictionType(restrictionURI);
    URI subject=null;
    URI object=null;
    for (    URI key : componentDefMap.keySet()) {
      if (pair.getLeft().equals(key)) {
        subject=componentDefMap.get(key);
      }
 else       if (pair.getRight().equals(key)) {
        object=componentDefMap.get(key);
      }
    }
    SequenceConstraint sc=new SequenceConstraint(sc_identity,restriction,subject,object);
    sequenceConstraints.add(sc);
  }
  ComponentDefinition c=SBOLDoc.createComponentDefinition(identity,type);
  if (roles != null)   c.setRoles(roles);
  if (identity != componentDef.getIdentity())   c.setWasDerivedFrom(componentDef.getIdentity());
  if (displayId != null)   c.setDisplayId(displayId);
  if (name != null && !name.isEmpty())   c.setName(name);
  if (description != null && !description.isEmpty())   c.setDescription(description);
  if (seq_identity != null)   c.setSequence(seq_identity);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  if (!sequenceAnnotations.isEmpty())   c.setSequenceAnnotations(sequenceAnnotations);
  if (!components.isEmpty())   c.setComponents(components);
  if (!sequenceConstraints.isEmpty())   c.setSequenceConstraints(sequenceConstraints);
  return c;
}",0.9805100790733936
12752,"private static SequenceAnnotation parseSequenceAnnotationV1(SBOLDocument SBOLDoc,NestedDocument<QName> sequenceAnnotation,List<SBOLPair> precedePairs,URI parentURI,int sa_num){
  Integer start=null;
  Integer end=null;
  String strand=null;
  URI componentURI=null;
  URI identity=sequenceAnnotation.getIdentity();
  List<Annotation> annotations=new ArrayList<Annotation>();
  if (setURIPrefix != null) {
    identity=URI.create(getParentURI(parentURI) + ""String_Node_Str"" + sa_num+ ""String_Node_Str"");
  }
  for (  NamedProperty<QName> namedProperty : sequenceAnnotation.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.bioStart)) {
      String temp=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      start=Integer.parseInt(temp);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.bioEnd)) {
      String temp2=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      end=Integer.parseInt(temp2);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.strand)) {
      strand=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.subComponent)) {
      componentURI=parseDnaComponentV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.precedes)) {
      URI left=sequenceAnnotation.getIdentity();
      URI right=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
      SBOLPair pair=new SBOLPair(left,right);
      precedePairs.add(pair);
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Location location=null;
  if (start != null && end != null) {
    URI range_identity=URI.create(getParentURI(identity) + ""String_Node_Str"");
    Range r=new Range(range_identity,start,end);
    if (strand != null) {
      if (strand.equals(""String_Node_Str"")) {
        r.setOrientation(Sbol2Terms.Orientation.inline);
      }
 else       if (strand.equals(""String_Node_Str"")) {
        r.setOrientation(Sbol2Terms.Orientation.reverseComplement);
      }
      location=r;
    }
  }
 else {
    URI dummyGenericLoc_id=URI.create(getParentURI(identity) + ""String_Node_Str"");
    GenericLocation dummyGenericLoc=new GenericLocation(dummyGenericLoc_id);
    if (strand != null) {
      if (strand.equals(""String_Node_Str"")) {
        dummyGenericLoc.setOrientation(Sbol2Terms.Orientation.inline);
      }
 else       if (strand.equals(""String_Node_Str"")) {
        dummyGenericLoc.setOrientation(Sbol2Terms.Orientation.reverseComplement);
      }
      location=dummyGenericLoc;
    }
  }
  SequenceAnnotation s=new SequenceAnnotation(identity,location);
  if (identity != sequenceAnnotation.getIdentity())   s.setWasDerivedFrom(sequenceAnnotation.getIdentity());
  if (componentURI != null)   s.setComponent(componentURI);
  if (!annotations.isEmpty())   s.setAnnotations(annotations);
  return s;
}","private static SequenceAnnotation parseSequenceAnnotationV1(SBOLDocument SBOLDoc,NestedDocument<QName> sequenceAnnotation,List<SBOLPair> precedePairs,String parentURI,int sa_num){
  Integer start=null;
  Integer end=null;
  String strand=null;
  URI componentURI=null;
  URI identity=sequenceAnnotation.getIdentity();
  String persIdentity=""String_Node_Str"";
  List<Annotation> annotations=new ArrayList<Annotation>();
  if (setURIPrefix != null) {
    persIdentity=parentURI + ""String_Node_Str"" + sa_num;
    identity=URI.create(persIdentity + ""String_Node_Str"");
  }
  for (  NamedProperty<QName> namedProperty : sequenceAnnotation.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.bioStart)) {
      String temp=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      start=Integer.parseInt(temp);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.bioEnd)) {
      String temp2=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      end=Integer.parseInt(temp2);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.strand)) {
      strand=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.subComponent)) {
      componentURI=parseDnaComponentV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.precedes)) {
      URI left=sequenceAnnotation.getIdentity();
      URI right=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
      SBOLPair pair=new SBOLPair(left,right);
      precedePairs.add(pair);
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Location location=null;
  if (start != null && end != null) {
    URI range_identity=URI.create(persIdentity + ""String_Node_Str"");
    Range r=new Range(range_identity,start,end);
    if (strand != null) {
      if (strand.equals(""String_Node_Str"")) {
        r.setOrientation(Sbol2Terms.Orientation.inline);
      }
 else       if (strand.equals(""String_Node_Str"")) {
        r.setOrientation(Sbol2Terms.Orientation.reverseComplement);
      }
      location=r;
    }
  }
 else {
    URI dummyGenericLoc_id=URI.create(persIdentity + ""String_Node_Str"");
    GenericLocation dummyGenericLoc=new GenericLocation(dummyGenericLoc_id);
    if (strand != null) {
      if (strand.equals(""String_Node_Str"")) {
        dummyGenericLoc.setOrientation(Sbol2Terms.Orientation.inline);
      }
 else       if (strand.equals(""String_Node_Str"")) {
        dummyGenericLoc.setOrientation(Sbol2Terms.Orientation.reverseComplement);
      }
      location=dummyGenericLoc;
    }
  }
  SequenceAnnotation s=new SequenceAnnotation(identity,location);
  if (identity != sequenceAnnotation.getIdentity())   s.setWasDerivedFrom(sequenceAnnotation.getIdentity());
  if (componentURI != null)   s.setComponent(componentURI);
  if (!annotations.isEmpty())   s.setAnnotations(annotations);
  return s;
}",0.6256046436633345
12753,"private static NamedProperty<QName> getLocation(Location location){
  List<NamedProperty<QName>> property=new ArrayList<NamedProperty<QName>>();
  formatCommonIdentifiedData(property,location);
  if (location instanceof Range) {
    Range range=(Range)location;
    property.add(NamedProperty(Sbol2Terms.Range.start,range.getStart()));
    property.add(NamedProperty(Sbol2Terms.Range.end,range.getEnd()));
    if (range.isSetOrientation())     property.add(NamedProperty(Sbol2Terms.Range.orientation,range.getOrientationURI()));
    return NamedProperty(Sbol2Terms.Location.Location,NestedDocument(Sbol2Terms.Range.Range,range.getIdentity(),NamedProperties(property)));
  }
 else   if (location instanceof MultiRange) {
    MultiRange multiRange=(MultiRange)location;
    for (    Range r : multiRange.getRanges())     property.add(NamedProperty(Sbol2Terms.MultiRange.hasRanges,r.getIdentity()));
    return NamedProperty(Sbol2Terms.Location.Location,NestedDocument(Sbol2Terms.MultiRange.MultiRange,multiRange.getIdentity(),NamedProperties(property)));
  }
 else   if (location instanceof Cut) {
    Cut cut=(Cut)location;
    property.add(NamedProperty(Sbol2Terms.Cut.at,cut.getAt()));
    property.add(NamedProperty(Sbol2Terms.Cut.orientation,cut.getOrientationURI()));
    return NamedProperty(Sbol2Terms.Location.Location,NestedDocument(Sbol2Terms.Cut.Cut,cut.getIdentity(),NamedProperties(property)));
  }
  return NamedProperty(Sbol2Terms.Location.Location,NestedDocument(Sbol2Terms.Range.Range,location.getIdentity(),NamedProperties(property)));
}","private static NamedProperty<QName> getLocation(Location location){
  List<NamedProperty<QName>> property=new ArrayList<NamedProperty<QName>>();
  formatCommonIdentifiedData(property,location);
  if (location instanceof Range) {
    Range range=(Range)location;
    property.add(NamedProperty(Sbol2Terms.Range.start,range.getStart()));
    property.add(NamedProperty(Sbol2Terms.Range.end,range.getEnd()));
    if (range.isSetOrientation())     property.add(NamedProperty(Sbol2Terms.Range.orientation,range.getOrientationURI()));
    return NamedProperty(Sbol2Terms.Location.Location,NestedDocument(Sbol2Terms.Range.Range,range.getIdentity(),NamedProperties(property)));
  }
 else   if (location instanceof MultiRange) {
    MultiRange multiRange=(MultiRange)location;
    for (    Range r : multiRange.getRanges())     property.add(NamedProperty(Sbol2Terms.MultiRange.hasRanges,r.getIdentity()));
    return NamedProperty(Sbol2Terms.Location.Location,NestedDocument(Sbol2Terms.MultiRange.MultiRange,multiRange.getIdentity(),NamedProperties(property)));
  }
 else   if (location instanceof Cut) {
    Cut cut=(Cut)location;
    property.add(NamedProperty(Sbol2Terms.Cut.at,cut.getAt()));
    property.add(NamedProperty(Sbol2Terms.Cut.orientation,cut.getOrientationURI()));
    return NamedProperty(Sbol2Terms.Location.Location,NestedDocument(Sbol2Terms.Cut.Cut,cut.getIdentity(),NamedProperties(property)));
  }
 else   if (location instanceof GenericLocation) {
    GenericLocation genericLocation=(GenericLocation)location;
    property.add(NamedProperty(Sbol2Terms.GenericLocation.orientation,genericLocation.getOrientationURI()));
    return NamedProperty(Sbol2Terms.Location.Location,NestedDocument(Sbol2Terms.GenericLocation.GenericLocation,genericLocation.getIdentity(),NamedProperties(property)));
  }
  return NamedProperty(Sbol2Terms.Location.Location,NestedDocument(Sbol2Terms.Range.Range,location.getIdentity(),NamedProperties(property)));
}",0.8562464346833999
12754,"public static URI createCompliantURI(String prefix,String type,String displayId,String version){
  return URI.create(prefix + '/' + type+ '/'+ displayId+ '/'+ version);
}","public static URI createCompliantURI(String prefix,String type,String displayId,String version){
  if (version == null || version.equals(""String_Node_Str"")) {
    return URI.create(prefix + '/' + type+ '/'+ displayId);
  }
  return URI.create(prefix + '/' + type+ '/'+ displayId+ '/'+ version);
}",0.6266094420600858
12755,"public static void main(String[] args){
  try {
    InputStream file=readTester.class.getResourceAsStream(path + filenameV1_1);
    if (file == null)     file=readTester.class.getResourceAsStream(""String_Node_Str"" + path + filenameV1_1);
    SBOLReader.setURIPrefix(""String_Node_Str"");
    SBOLDocument document1=SBOLReader.read(file);
    SBOLWriter.writeRDF(document1,(System.out));
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    InputStream file=readTester.class.getResourceAsStream(path + filenameV1_1);
    if (file == null)     file=readTester.class.getResourceAsStream(""String_Node_Str"" + path + filenameV1_1);
    SBOLReader.setURIPrefix(""String_Node_Str"");
    SBOLDocument document1=SBOLReader.read(file);
    SBOLWriter.writeRDF(SBOLTestUtils.writeAndRead(document1),(System.out));
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}",0.9497816593886464
12756,"/** 
 * Assume this Component object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity(),1);
  URI newIdentity=URI.create(URIprefix + '/' + parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  if (!this.getMapsTos().isEmpty()) {
    for (    MapsTo mapsTo : this.getMapsTos()) {
      mapsTo.updateCompliantURI(URIprefix,parentDisplayId,thisObjDisplayId,version);
    }
  }
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}","/** 
 * Assume this Component object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity());
  URI newIdentity=URI.create(URIprefix + '/' + parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  if (!this.getMapsTos().isEmpty()) {
    for (    MapsTo mapsTo : this.getMapsTos()) {
      mapsTo.updateCompliantURI(URIprefix,parentDisplayId,thisObjDisplayId,version);
    }
  }
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}",0.9986807387862796
12757,"/** 
 * Assume this Cut object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link SequenceAnnotation#updateCompliantURI(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String grandparentDisplayId,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity(),2);
  URI newIdentity=URI.create(URIprefix + '/' + grandparentDisplayId+ '/'+ parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}","/** 
 * Assume this Cut object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link SequenceAnnotation#updateCompliantURI(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String grandparentDisplayId,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity());
  URI newIdentity=URI.create(URIprefix + '/' + grandparentDisplayId+ '/'+ parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}",0.9982758620689656
12758,"/** 
 * Assume this Component object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity(),1);
  URI newIdentity=URI.create(URIprefix + '/' + parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  if (!this.getMapsTos().isEmpty()) {
    for (    MapsTo mapsTo : this.getMapsTos()) {
      mapsTo.updateCompliantURI(URIprefix,parentDisplayId,thisObjDisplayId,version);
    }
  }
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}","/** 
 * Assume this Component object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity());
  URI newIdentity=URI.create(URIprefix + '/' + parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  if (!this.getMapsTos().isEmpty()) {
    for (    MapsTo mapsTo : this.getMapsTos()) {
      mapsTo.updateCompliantURI(URIprefix,parentDisplayId,thisObjDisplayId,version);
    }
  }
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}",0.9986807387862796
12759,"/** 
 * Assume this GenericLocation object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link SequenceAnnotation#updateCompliantURI(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String grandparentDisplayId,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity(),2);
  URI newIdentity=URI.create(URIprefix + '/' + grandparentDisplayId+ '/'+ parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}","/** 
 * Assume this GenericLocation object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link SequenceAnnotation#updateCompliantURI(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String grandparentDisplayId,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity());
  URI newIdentity=URI.create(URIprefix + '/' + grandparentDisplayId+ '/'+ parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}",0.9983108108108107
12760,"/** 
 * Assume this Component object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity(),1);
  URI newIdentity=URI.create(URIprefix + '/' + parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  if (!this.getParticipations().isEmpty()) {
    for (    Participation participation : this.getParticipations()) {
      participation.updateCompliantURI(URIprefix,parentDisplayId,thisObjDisplayId,version);
    }
  }
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}","/** 
 * Assume this Component object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity());
  URI newIdentity=URI.create(URIprefix + '/' + parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  if (!this.getParticipations().isEmpty()) {
    for (    Participation participation : this.getParticipations()) {
      participation.updateCompliantURI(URIprefix,parentDisplayId,thisObjDisplayId,version);
    }
  }
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}",0.9987389659520808
12761,"/** 
 * Assume this MapsTo object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link Component#updateCompliantURI(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String grandparentDisplayId,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity(),2);
  URI newIdentity=URI.create(URIprefix + '/' + grandparentDisplayId+ '/'+ parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}","/** 
 * Assume this MapsTo object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link Component#updateCompliantURI(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String grandparentDisplayId,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity());
  URI newIdentity=URI.create(URIprefix + '/' + grandparentDisplayId+ '/'+ parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}",0.9982578397212544
12762,"/** 
 * Assume this Module object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ModuleDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity(),1);
  URI newIdentity=URI.create(URIprefix + '/' + parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  if (!this.getMapsTos().isEmpty()) {
    for (    MapsTo mapsTo : this.getMapsTos()) {
      mapsTo.updateCompliantURI(URIprefix,parentDisplayId,thisObjDisplayId,version);
    }
  }
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}","/** 
 * Assume this Module object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ModuleDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity());
  URI newIdentity=URI.create(URIprefix + '/' + parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  if (!this.getMapsTos().isEmpty()) {
    for (    MapsTo mapsTo : this.getMapsTos()) {
      mapsTo.updateCompliantURI(URIprefix,parentDisplayId,thisObjDisplayId,version);
    }
  }
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}",0.9986702127659576
12763,"/** 
 * Assume this MultiRange object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link SequenceAnnotation#updateCompliantURI(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String grandparentDisplayId,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity(),2);
  URI newIdentity=URI.create(URIprefix + '/' + grandparentDisplayId+ '/'+ parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  if (!this.getRanges().isEmpty()) {
    for (    Range range : this.getRanges()) {
      range.updateCompliantURI(URIprefix,grandparentDisplayId,parentDisplayId,thisObjDisplayId,version);
    }
  }
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}","/** 
 * Assume this MultiRange object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link SequenceAnnotation#updateCompliantURI(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String grandparentDisplayId,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity());
  URI newIdentity=URI.create(URIprefix + '/' + grandparentDisplayId+ '/'+ parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  if (!this.getRanges().isEmpty()) {
    for (    Range range : this.getRanges()) {
      range.updateCompliantURI(URIprefix,grandparentDisplayId,parentDisplayId,thisObjDisplayId,version);
    }
  }
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}",0.9987277353689568
12764,"/** 
 * Assume this Participation object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link Interaction#updateCompliantURI(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String grandparentDisplayId,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity(),2);
  URI newIdentity=URI.create(URIprefix + '/' + grandparentDisplayId+ '/'+ parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}","/** 
 * Assume this Participation object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link Interaction#updateCompliantURI(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String grandparentDisplayId,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity());
  URI newIdentity=URI.create(URIprefix + '/' + grandparentDisplayId+ '/'+ parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}",0.9982847341337908
12765,"/** 
 * Assume this Range object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link MultiRange#updateCompliantURI(String,String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String greatGrandparentDisplayId,String grandparentDisplayId,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity(),3);
  URI newIdentity=URI.create(URIprefix + '/' + greatGrandparentDisplayId+ '/'+ grandparentDisplayId+ '/'+ parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}","/** 
 * Assume this Range object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link MultiRange#updateCompliantURI(String,String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String greatGrandparentDisplayId,String grandparentDisplayId,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity());
  URI newIdentity=URI.create(URIprefix + '/' + greatGrandparentDisplayId+ '/'+ grandparentDisplayId+ '/'+ parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}",0.9984520123839008
12766,"/** 
 * This method is ONLY valid for compliant URIs. Create a copy of the given top-level object, which is i.e.  {@link Collection},   {@link ComponentDefinition},   {@link Model},   {@link ModuleDefinition},  {@link Sequence}, or   {@link GenericTopLevel} with the given URIprefix, display ID, and version. Then add it to its corresponding top-level objects list.
 * @return the copied {@link TopLevel} object
 */
public Identified createCopy(Identified toplevel,String URIprefix,String displayId,String version){
  if (URIprefix == null) {
    URIprefix=extractURIprefix(toplevel.getIdentity());
  }
  if (displayId == null) {
    displayId=extractDisplayId(toplevel.getIdentity(),0);
  }
  if (version == null) {
    version=extractVersion(toplevel.getIdentity());
  }
  if (toplevel instanceof Collection) {
    Collection newCollection=((Collection)toplevel).copy(URIprefix,displayId,version);
    addCollection(newCollection);
    return newCollection;
  }
 else   if (toplevel instanceof ComponentDefinition) {
    ComponentDefinition newComponentDefinition=((ComponentDefinition)toplevel).copy(URIprefix,displayId,version);
    addComponentDefinition(newComponentDefinition);
    return newComponentDefinition;
  }
 else   if (toplevel instanceof Model) {
    Model newModel=((Model)toplevel).copy(URIprefix,displayId,version);
    addModel(newModel);
    return newModel;
  }
 else   if (toplevel instanceof ModuleDefinition) {
    ModuleDefinition newModuleDefinition=((ModuleDefinition)toplevel).copy(URIprefix,displayId,version);
    addModuleDefinition(newModuleDefinition);
    return newModuleDefinition;
  }
 else   if (toplevel instanceof Sequence) {
    Sequence newSequence=((Sequence)toplevel).copy(URIprefix,displayId,version);
    addSequence(newSequence);
    return newSequence;
  }
 else   if (toplevel instanceof GenericTopLevel) {
    GenericTopLevel newGenericTopLevel=((GenericTopLevel)toplevel).copy(URIprefix,displayId,version);
    addGenericTopLevel(newGenericTopLevel);
    return newGenericTopLevel;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + toplevel.getIdentity());
  }
}","/** 
 * This method is ONLY valid for compliant URIs. Create a copy of the given top-level object, which is i.e.  {@link Collection},   {@link ComponentDefinition},   {@link Model},   {@link ModuleDefinition},  {@link Sequence}, or   {@link GenericTopLevel} with the given URIprefix, display ID, and version. Then add it to its corresponding top-level objects list.
 * @return the copied {@link TopLevel} object
 */
public Identified createCopy(Identified toplevel,String URIprefix,String displayId,String version){
  if (URIprefix == null) {
    URIprefix=extractURIprefix(toplevel.getIdentity());
  }
  if (displayId == null) {
    displayId=extractDisplayId(toplevel.getIdentity());
  }
  if (version == null) {
    version=extractVersion(toplevel.getIdentity());
  }
  if (toplevel instanceof Collection) {
    Collection newCollection=((Collection)toplevel).copy(URIprefix,displayId,version);
    addCollection(newCollection);
    return newCollection;
  }
 else   if (toplevel instanceof ComponentDefinition) {
    ComponentDefinition newComponentDefinition=((ComponentDefinition)toplevel).copy(URIprefix,displayId,version);
    addComponentDefinition(newComponentDefinition);
    return newComponentDefinition;
  }
 else   if (toplevel instanceof Model) {
    Model newModel=((Model)toplevel).copy(URIprefix,displayId,version);
    addModel(newModel);
    return newModel;
  }
 else   if (toplevel instanceof ModuleDefinition) {
    ModuleDefinition newModuleDefinition=((ModuleDefinition)toplevel).copy(URIprefix,displayId,version);
    addModuleDefinition(newModuleDefinition);
    return newModuleDefinition;
  }
 else   if (toplevel instanceof Sequence) {
    Sequence newSequence=((Sequence)toplevel).copy(URIprefix,displayId,version);
    addSequence(newSequence);
    return newSequence;
  }
 else   if (toplevel instanceof GenericTopLevel) {
    GenericTopLevel newGenericTopLevel=((GenericTopLevel)toplevel).copy(URIprefix,displayId,version);
    addGenericTopLevel(newGenericTopLevel);
    return newGenericTopLevel;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + toplevel.getIdentity());
  }
}",0.9995318352059924
12767,"/** 
 * Assume this SequenceAnnotation object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 * @param URIprefix
 * @param parentDisplayId
 * @param version
 */
void updateCompliantURI(String URIprefix,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity(),1);
  URI newIdentity=URI.create(URIprefix + '/' + parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  Location location=this.getLocation();
  if (location instanceof Range) {
    ((Range)location).updateCompliantURI(URIprefix,parentDisplayId,thisObjDisplayId,version);
  }
  if (location instanceof Cut) {
    ((Cut)location).updateCompliantURI(URIprefix,parentDisplayId,thisObjDisplayId,version);
  }
  if (location instanceof GenericLocation) {
    ((GenericLocation)location).updateCompliantURI(URIprefix,parentDisplayId,thisObjDisplayId,version);
  }
  if (location instanceof MultiRange) {
    ((MultiRange)location).updateCompliantURI(URIprefix,parentDisplayId,thisObjDisplayId,version);
  }
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}","/** 
 * Assume this SequenceAnnotation object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 * @param URIprefix
 * @param parentDisplayId
 * @param version
 */
void updateCompliantURI(String URIprefix,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity());
  URI newIdentity=URI.create(URIprefix + '/' + parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  Location location=this.getLocation();
  if (location instanceof Range) {
    ((Range)location).updateCompliantURI(URIprefix,parentDisplayId,thisObjDisplayId,version);
  }
  if (location instanceof Cut) {
    ((Cut)location).updateCompliantURI(URIprefix,parentDisplayId,thisObjDisplayId,version);
  }
  if (location instanceof GenericLocation) {
    ((GenericLocation)location).updateCompliantURI(URIprefix,parentDisplayId,thisObjDisplayId,version);
  }
  if (location instanceof MultiRange) {
    ((MultiRange)location).updateCompliantURI(URIprefix,parentDisplayId,thisObjDisplayId,version);
  }
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}",0.9991589571068124
12768,"/** 
 * Assume this SequenceConstraint object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity(),1);
  URI newIdentity=URI.create(URIprefix + '/' + parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}","/** 
 * Assume this SequenceConstraint object has compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity());
  URI newIdentity=URI.create(URIprefix + '/' + parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}",0.9981024667931688
12769,"/** 
 * Extract the object's display ID from the given object's identity URI, according to the given index. The given URI is first checked for compliance. If the given index is 0, the extracted display ID is the top-level object's display ID; if the given index is 1, the extracted display ID is the child object's display ID; if the given index is 2, the extracted display ID is the grand child object's display ID; if the given index is 3, the extracted display ID is the great grand child object's display ID.
 * @return the extracted display ID.
 */
public static String extractDisplayId(URI objURI,int index){
  if (index < 0 || index > 3) {
    return null;
  }
  String URIstr=objURI.toString();
  Pattern r=Pattern.compile(genericURIpattern1);
  Matcher m=r.matcher(URIstr);
  if (m.matches()) {
    return m.group(4);
  }
 else   return null;
}","/** 
 * Extract the object's display ID from the given object's identity URI, according to the given index. The given URI is first checked for compliance. If the given index is 0, the extracted display ID is the top-level object's display ID; if the given index is 1, the extracted display ID is the child object's display ID; if the given index is 2, the extracted display ID is the grand child object's display ID; if the given index is 3, the extracted display ID is the great grand child object's display ID.
 * @return the extracted display ID.
 */
public static String extractDisplayId(URI objURI){
  String URIstr=objURI.toString();
  Pattern r=Pattern.compile(genericURIpattern1);
  Matcher m=r.matcher(URIstr);
  if (m.matches()) {
    return m.group(4);
  }
 else   return null;
}",0.9616555082166768
12770,"public static final boolean isChildURIcompliant(URI parentURI,URI childURI){
  String parentPersistentId=extractPersistentId(parentURI);
  if (parentPersistentId == null)   return false;
  String childDisplayId=extractDisplayId(childURI,0);
  if (childDisplayId == null)   return false;
  String parentVersion=extractVersion(parentURI);
  if (parentVersion == null) {
    return childURI.toString().equals(parentPersistentId + ""String_Node_Str"" + childDisplayId);
  }
 else {
    return childURI.toString().equals(parentPersistentId + ""String_Node_Str"" + childDisplayId+ ""String_Node_Str""+ parentVersion);
  }
}","public static final boolean isChildURIcompliant(URI parentURI,URI childURI){
  String parentPersistentId=extractPersistentId(parentURI);
  if (parentPersistentId == null)   return false;
  String childDisplayId=extractDisplayId(childURI);
  if (childDisplayId == null)   return false;
  String parentVersion=extractVersion(parentURI);
  if (parentVersion == null) {
    return childURI.toString().equals(parentPersistentId + ""String_Node_Str"" + childDisplayId);
  }
 else {
    return childURI.toString().equals(parentPersistentId + ""String_Node_Str"" + childDisplayId+ ""String_Node_Str""+ parentVersion);
  }
}",0.9983606557377048
12771,"/** 
 * Test <code>null<\code> for extractDisplayId for the compliant great grand child URI.
 */
@Test public void testExtractDisplayId13(){
  String extractedDisplayId=extractDisplayId(uri9,3);
  assertNull(extractedDisplayId);
}","/** 
 * Test <code>null<\code> for extractDisplayId for the compliant great grand child URI.
 */
@Test public void testExtractDisplayId13(){
  String extractedDisplayId=extractDisplayId(uri9);
  assertNull(extractedDisplayId);
}",0.9956331877729258
12772,"/** 
 * Test <code>null<\code> for extractDisplayId for the compliant grand child URI.
 */
@Test public void testExtractDisplayId12(){
  String extractedDisplayId=extractDisplayId(uri8,3);
  assertNull(extractedDisplayId);
}","/** 
 * Test <code>null<\code> for extractDisplayId for the compliant grand child URI.
 */
@Test public void testExtractDisplayId12(){
  String extractedDisplayId=extractDisplayId(uri8);
  assertNull(extractedDisplayId);
}",0.9955156950672646
12773,"/** 
 * Test <code>null<\code> for extractDisplayId for the compliant child URI.
 */
@Test public void testExtractDisplayId11(){
  String extractedDisplayId=extractDisplayId(uri6,3);
  assertNull(extractedDisplayId);
}","/** 
 * Test <code>null<\code> for extractDisplayId for the compliant child URI.
 */
@Test public void testExtractDisplayId11(){
  String extractedDisplayId=extractDisplayId(uri6);
  assertNull(extractedDisplayId);
}",0.9953917050691244
12774,"/** 
 * Test the extracted top-level display ID string for the compliant top-level URI.
 */
@Test public void testExtractDisplayId1(){
  String extractedDisplayId=extractDisplayId(uri1,0);
  assertEquals(uri1toplevelDisplayId,extractedDisplayId);
}","/** 
 * Test the extracted top-level display ID string for the compliant top-level URI.
 */
@Test public void testExtractDisplayId1(){
  String extractedDisplayId=extractDisplayId(uri1);
  assertEquals(uri1toplevelDisplayId,extractedDisplayId);
}",0.9959514170040484
12775,"/** 
 * Extract the object's display ID from the given object's identity URI, according to the given index. The given URI is first checked for compliance. If the given index is 0, the extracted display ID is the top-level object's display ID; if the given index is 1, the extracted display ID is the child object's display ID; if the given index is 2, the extracted display ID is the grand child object's display ID; if the given index is 3, the extracted display ID is the great grand child object's display ID.
 * @return the extracted display ID.
 */
public static String extractDisplayId(URI objURI,int index){
  if (index < 0 || index > 3) {
    return null;
  }
  String URIstr=objURI.toString();
  Pattern r=Pattern.compile(genericURIpattern2);
  Matcher m=r.matcher(URIstr);
  if (m.matches()) {
    String displayIds=m.group(1);
    String[] displayIdArray=displayIds.substring(0,displayIds.lastIndexOf('/')).split(""String_Node_Str"");
    return displayIdArray[index];
  }
 else   return null;
}","/** 
 * Extract the object's display ID from the given object's identity URI, according to the given index. The given URI is first checked for compliance. If the given index is 0, the extracted display ID is the top-level object's display ID; if the given index is 1, the extracted display ID is the child object's display ID; if the given index is 2, the extracted display ID is the grand child object's display ID; if the given index is 3, the extracted display ID is the great grand child object's display ID.
 * @return the extracted display ID.
 */
public static String extractDisplayId(URI objURI,int index){
  if (index < 0 || index > 3) {
    return null;
  }
  String URIstr=objURI.toString();
  Pattern r=Pattern.compile(genericURIpattern1);
  Matcher m=r.matcher(URIstr);
  if (m.matches()) {
    return m.group(4);
  }
 else   return null;
}",0.8874528809908454
12776,"/** 
 * Extract the persistent identity URI from the given URI. The persistent identity is simply the identity URI without the version.
 * @return the extracted persistent identity URI, <code>null</code> otherwise.
 */
public static String extractPersistentId(URI objURI){
  String URIstr=objURI.toString();
  Pattern r=Pattern.compile(genericURIpattern1);
  Matcher m=r.matcher(URIstr);
  if (m.matches()) {
    return m.group(1).substring(0,m.group(1).lastIndexOf('/'));
  }
 else {
    return null;
  }
}","/** 
 * Extract the persistent identity URI from the given URI. The persistent identity is simply the identity URI without the version.
 * @return the extracted persistent identity URI, <code>null</code> otherwise.
 */
public static String extractPersistentId(URI objURI){
  String URIstr=objURI.toString();
  Pattern r=Pattern.compile(genericURIpattern1);
  Matcher m=r.matcher(URIstr);
  if (m.matches()) {
    return m.group(1);
  }
 else {
    return null;
  }
}",0.9578622816032888
12777,"public static final boolean isChildURIcompliant(URI parentURI,URI childURI){
  String parentURIstr=parentURI.toString();
  Pattern URIpattern=Pattern.compile(genericURIpattern1);
  Matcher parentMatcher=URIpattern.matcher(parentURIstr);
  if (parentMatcher.matches()) {
    String childURIstr=childURI.toString();
    Matcher childMatcher=URIpattern.matcher(childURIstr);
    if (childMatcher.matches()) {
      String parentPersistentId=parentMatcher.group(1).substring(0,parentMatcher.group(1).lastIndexOf('/'));
      String childPersistentId=childMatcher.group(1).substring(0,childMatcher.group(1).lastIndexOf('/'));
      String parentPartOfChildPersistId=childPersistentId.substring(0,childPersistentId.lastIndexOf('/'));
      if (parentPartOfChildPersistId.equals(parentPersistentId)) {
        String parentVersion=parentMatcher.group(3);
        String childVersion=childMatcher.group(3);
        return parentVersion.equals(childVersion);
      }
 else {
        return false;
      }
    }
 else {
      return false;
    }
  }
 else {
    return false;
  }
}","public static final boolean isChildURIcompliant(URI parentURI,URI childURI){
  String parentPersistentId=extractPersistentId(parentURI);
  if (parentPersistentId == null)   return false;
  String childDisplayId=extractDisplayId(childURI,0);
  if (childDisplayId == null)   return false;
  String parentVersion=extractVersion(parentURI);
  if (parentVersion == null) {
    return childURI.toString().equals(parentPersistentId + ""String_Node_Str"" + childDisplayId);
  }
 else {
    return childURI.toString().equals(parentPersistentId + ""String_Node_Str"" + childDisplayId+ ""String_Node_Str""+ parentVersion);
  }
}",0.1414982164090368
12778,"/** 
 * Extract the version from this object's identity URI.
 * @return the version if the given URI is compliant, <code>null</code> otherwise.
 */
public static String extractVersion(URI objURI){
  String URIstr=objURI.toString();
  Pattern r=Pattern.compile(genericURIpattern1);
  Matcher m=r.matcher(URIstr);
  if (m.matches())   return m.group(3);
 else   return null;
}","/** 
 * Extract the version from this object's identity URI.
 * @return the version if the given URI is compliant, <code>null</code> otherwise.
 */
public static String extractVersion(URI objURI){
  String URIstr=objURI.toString();
  Pattern r=Pattern.compile(genericURIpattern1);
  Matcher m=r.matcher(URIstr);
  if (m.matches() && m.groupCount() >= 6)   return m.group(6);
 else   return null;
}",0.9182879377431906
12779,"/** 
 * Test if the given object's identity URI is compliant with the form   {@code} ⟨prefix⟩/(⟨displayId⟩/)1,4}⟨version⟩. The prefix is established by the owner of this object. The number of displayIds can range from 1 to 4, depending on the level of the given object. If the given index is 0, then  {@code objURI} is checked as a top-level URI for compliance;if the given index is 1, then  {@code objURI} is checked as a child of a top-level URI for compliance;if the given index is 2, then  {@code objURI} is checked as a grand child of a top-level URI for compliance; andif the given index is 3, then  {@code objURI} is checked as a great grand child of a top-level URI for compliance.
 * @param objURI
 * @param index
 * @return <code>true</code> if the identity URI is compliant, <code>false</code> otherwise.
 */
public static final boolean isURIcompliant(URI objURI,int index){
  if (index < 0 || index > 3) {
    return false;
  }
  Pattern r;
  String URIstr=objURI.toString();
  if (index == 0) {
    r=Pattern.compile(toplevelURIpattern);
  }
 else   if (index == 1) {
    r=Pattern.compile(childURIpattern);
  }
 else   if (index == 2) {
    r=Pattern.compile(grandchildURIpattern);
  }
 else {
    r=Pattern.compile(greatGrandchildURIpattern);
  }
  Matcher m=r.matcher(URIstr);
  return m.matches();
}","/** 
 * Test if the given object's identity URI is compliant with the form   {@code} ⟨prefix⟩/(⟨displayId⟩/)1,4}⟨version⟩. The prefix is established by the owner of this object. The number of displayIds can range from 1 to 4, depending on the level of the given object. If the given index is 0, then  {@code objURI} is checked as a top-level URI for compliance;if the given index is 1, then  {@code objURI} is checked as a child of a top-level URI for compliance;if the given index is 2, then  {@code objURI} is checked as a grand child of a top-level URI for compliance; andif the given index is 3, then  {@code objURI} is checked as a great grand child of a top-level URI for compliance.
 * @param objURI
 * @param index
 * @return <code>true</code> if the identity URI is compliant, <code>false</code> otherwise.
 */
public static final boolean isURIcompliant(URI objURI,int index){
  if (index < 0 || index > 3) {
    return false;
  }
  Pattern r;
  String URIstr=objURI.toString();
  if (index == 0) {
    r=Pattern.compile(toplevelURIpattern);
  }
 else   if (index == 1) {
    r=Pattern.compile(childURIpattern);
  }
 else   if (index == 2) {
    r=Pattern.compile(grandchildURIpattern);
  }
 else {
    r=Pattern.compile(greatGrandchildURIpattern);
  }
  Matcher m=r.matcher(URIstr);
  if (!m.matches()) {
    System.out.println(URIstr + ""String_Node_Str"");
  }
  return m.matches();
}",0.959409594095941
12780,"public static void validateIdVersion(String displayId,String version){
  if (!isDisplayIdCompliant(displayId)) {
    throw new IllegalArgumentException(""String_Node_Str"" + displayId + ""String_Node_Str"");
  }
  if (!isVersionCompliant(version)) {
    throw new IllegalArgumentException(""String_Node_Str"" + version + ""String_Node_Str"");
  }
}","public static void validateIdVersion(String displayId,String version){
  if (!isDisplayIdCompliant(displayId)) {
    throw new IllegalArgumentException(""String_Node_Str"" + displayId + ""String_Node_Str"");
  }
  if (version != null && !version.equals(""String_Node_Str"") && !isVersionCompliant(version)) {
    throw new IllegalArgumentException(""String_Node_Str"" + version + ""String_Node_Str"");
  }
}",0.9226594301221168
12781,"/** 
 * Compare the given two versions based on the Maven version scheme.
 * @return <code>true</code> if the <code>version1</code> is newer than <code>version2</code>, <code>false</code> otherwise.
 */
public static final boolean isFirstVersionNewer(String version1,String version2){
  ComparableVersion v1=new ComparableVersion(version1);
  ComparableVersion v2=new ComparableVersion(version2);
  return v1.compareTo(v2) > 0;
}","/** 
 * Compare the given two versions based on the Maven version scheme.
 * @return <code>true</code> if the <code>version1</code> is newer than <code>version2</code>, <code>false</code> otherwise.
 */
public static final boolean isFirstVersionNewer(String version1,String version2){
  if (version1 == null)   return true;
  if (version2 == null)   return false;
  ComparableVersion v1=new ComparableVersion(version1);
  ComparableVersion v2=new ComparableVersion(version2);
  return v1.compareTo(v2) > 0;
}",0.9156883671291356
12782,public void removeComponent(DnaComponent component);,void removeComponent(DnaComponent component);,0.9278350515463918
12783,"/** 
 * Elements that are intended as engineering components in synthetic biology. For example, standard biological parts, BioBricks, oligo components, vector plasmids, genomes, or any other DNA segment of interest as a building block of biological systems.
 * @return 0 or more <code>DnaComponent</code>[s] that are in this Collection
 */
public java.util.Collection<DnaComponent> getComponents();","/** 
 * Elements that are intended as engineering components in synthetic biology. For example, standard biological parts, BioBricks, oligo components, vector plasmids, genomes, or any other DNA segment of interest as a building block of biological systems.
 * @return 0 or more <code>DnaComponent</code>[s] that are in this Collection
 */
java.util.Collection<DnaComponent> getComponents();",0.991128010139417
12784,"/** 
 * Defined DNA segment for engineering biological systems, which belongs to this Collection. Any one of the following, standard biological parts, BioBricks, oligo components, vector plasmids, genomes, or any other DNA segment of interest as a building block of biological systems.
 * @param component a <code>DnaComponent</code> that should be a member of this collection
 */
public void addComponent(DnaComponent component);","/** 
 * Defined DNA segment for engineering biological systems, which belongs to this Collection. Any one of the following, standard biological parts, BioBricks, oligo components, vector plasmids, genomes, or any other DNA segment of interest as a building block of biological systems.
 * @param component a <code>DnaComponent</code> that should be a member of this collection
 */
void addComponent(DnaComponent component);",0.9917936694021102
12785,"/** 
 * Common name of DNA component, confers meaning of what it is. (eg. pLac-O1) Often this name is the short meaningful string that is informally used to identify the DNA component. Sometimes it is an acronym which makes it likely to be short.
 * @param name its name, commonly used to refer to this DnaComponent (eg. pLac-O1)
 * @see #getName
 */
public void setName(String name);","/** 
 * Common name of DNA component, confers meaning of what it is. (eg. pLac-O1) Often this name is the short meaningful string that is informally used to identify the DNA component. Sometimes it is an acronym which makes it likely to be short.
 * @param name its name, commonly used to refer to this DnaComponent (eg. pLac-O1)
 * @see #getName
 */
void setName(String name);",0.990801576872536
12786,"/** 
 * The name is the most recognizable known identifier, it is often ambiguous. (eg. pLac-O1) Useful for display to carry common meaning, see work on ""shared understanding"" in CSCW field for more.
 * @return its name, commonly used to refer to this DnaComponent
 */
public String getName();","/** 
 * The name is the most recognizable known identifier, it is often ambiguous. (eg. pLac-O1) Useful for display to carry common meaning, see work on ""shared understanding"" in CSCW field for more.
 * @return its name, commonly used to refer to this DnaComponent
 */
String getName();",0.9879101899827288
12787,public void removeType(URI type);,void removeType(URI type);,0.8813559322033898
12788,"/** 
 * Identifier to display to users.
 * @return a human readable identifier
 */
public String getDisplayId();","/** 
 * Identifier to display to users.
 * @return a human readable identifier
 */
String getDisplayId();",0.967741935483871
12789,"/** 
 * Text which is written for users to read and interpret.  It should describe what the component is used for and/or what it does. Suggestion: it should provide information that cannot yet be represented in the rest of the DNA components computable fields. Do not include <> tags such as HTML or XML inside as that may break the RDF. Don't include {} tags as that may break the Json.
 * @param description human readable text describing the component
 */
public void setDescription(String description);","/** 
 * Text which is written for users to read and interpret.  It should describe what the component is used for and/or what it does. Suggestion: it should provide information that cannot yet be represented in the rest of the DNA components computable fields. Do not include <> tags such as HTML or XML inside as that may break the RDF. Don't include {} tags as that may break the Json.
 * @param description human readable text describing the component
 */
void setDescription(String description);",0.9930348258706468
12790,"/** 
 * Positions and directions of <code>SequenceFeature</code>[s] that describe the DNA sequence.
 * @return 0 or more <code>SequenceAnnotation</code>[s] that describe the DNA composition
 * @see #addAnnotation
 */
public List<SequenceAnnotation> getAnnotations();","/** 
 * Positions and directions of <code>SequenceFeature</code>[s] that describe the DNA sequence.
 * @return 0 or more <code>SequenceAnnotation</code>[s] that describe the DNA composition
 * @see #addAnnotation
 */
List<SequenceAnnotation> getAnnotations();",0.9866666666666668
12791,"/** 
 * Text which is for users to read and interpret what this component is. (eg. engineered Lac promoter, repressible by LacI). Could be lengthy, so it is the responsibility of the user application to format and allow for arbitrary length.
 * @return Human readable text describing the component
 * @see #setDescription
 */
public String getDescription();","/** 
 * Text which is for users to read and interpret what this component is. (eg. engineered Lac promoter, repressible by LacI). Could be lengthy, so it is the responsibility of the user application to format and allow for arbitrary length.
 * @return Human readable text describing the component
 * @see #setDescription
 */
String getDescription();",0.99009900990099
12792,"/** 
 * DNA sequence which this DnaComponent object represents.
 * @param dnaSequence specify the DnaSequence of this DnaComponent
 */
public void setDnaSequence(DnaSequence dnaSequence);","/** 
 * DNA sequence which this DnaComponent object represents.
 * @param dnaSequence specify the DnaSequence of this DnaComponent
 */
void setDnaSequence(DnaSequence dnaSequence);",0.9809264305177112
12793,"/** 
 * New position and direction of a <code>SequenceFeature</code> that describes the DNA sequence. The DnaComponent could be left un-annotated, but that condition is not a very useful to users.
 * @param annotation a <code>SequenceAnnotation</code> that describes the DNA composition
 */
public void addAnnotation(SequenceAnnotation annotation);","/** 
 * New position and direction of a <code>SequenceFeature</code> that describes the DNA sequence. The DnaComponent could be left un-annotated, but that condition is not a very useful to users.
 * @param annotation a <code>SequenceAnnotation</code> that describes the DNA composition
 */
void addAnnotation(SequenceAnnotation annotation);",0.9898403483309144
12794,public void removeAnnotation(SequenceAnnotation annotation);,void removeAnnotation(SequenceAnnotation annotation);,0.9380530973451328
12795,"/** 
 * DNA sequence which this DnaComponent object represents.
 * @return 1 {@link DnaSequence} specifying the DNA sequence of this DnaComponent
 * @see DnaSequence
 */
public DnaSequence getDnaSequence();","/** 
 * DNA sequence which this DnaComponent object represents.
 * @return 1 {@link DnaSequence} specifying the DNA sequence of this DnaComponent
 * @see DnaSequence
 */
DnaSequence getDnaSequence();",0.982716049382716
12796,"/** 
 * Sequence Ontology vocabulary provides a defined term for types of DNA components.
 * @param type Sequence Ontology URI specifying the type of the DnaComponent
 */
public void addType(URI type);","/** 
 * Sequence Ontology vocabulary provides a defined term for types of DNA components.
 * @param type Sequence Ontology URI specifying the type of the DnaComponent
 */
void addType(URI type);",0.9822784810126582
12797,"/** 
 * Identifier that users will see as reference to the DNA construct. It should be unambiguous and is likely imported from source data. Otherwise it should be generated. It should be restricted to alphanumeric/underscore and starting with a letter or underscore.
 * @param displayId a human readable identifier
 */
public void setDisplayId(String displayId);","/** 
 * Identifier that users will see as reference to the DNA construct. It should be unambiguous and is likely imported from source data. Otherwise it should be generated. It should be restricted to alphanumeric/underscore and starting with a letter or underscore.
 * @param displayId a human readable identifier
 */
void setDisplayId(String displayId);",0.99023709902371
12798,"/** 
 * Sequence Ontology vocabulary provides a defined term for types of DNA components. TO DO: implement use of SO within libSBOLj.
 * @return a Sequence Ontology (SO) vocabulary term to describe the type of DnaComponent.
 */
public Collection<URI> getTypes();","/** 
 * Sequence Ontology vocabulary provides a defined term for types of DNA components. TO DO: implement use of SO within libSBOLj.
 * @return a Sequence Ontology (SO) vocabulary term to describe the type of DnaComponent.
 */
Collection<URI> getTypes();",0.986460348162476
12799,"/** 
 * The sequence of DNA base pairs which are described.
 * @return a string representation of the DNA base-pair sequence
 */
public String getNucleotides();","/** 
 * The sequence of DNA base pairs which are described.
 * @return a string representation of the DNA base-pair sequence
 */
String getNucleotides();",0.977635782747604
12800,"/** 
 * The sequence of DNA base pairs which are going to be described. a.The DNA sequence will use the IUPAC ambiguity recommendation. (See http://www.genomatix.de/online_help/help/sequence_formats.html) b.Blank lines, spaces, or other symbols must not be included in the sequence text. c.The sequence text must be in ASCII or UTF-8 encoding. For the alphabets used, the two are identical.
 * @param nucleotides a sequence of [a|c|t|g] letters
 */
public void setNucleotides(String nucleotides);","/** 
 * The sequence of DNA base pairs which are going to be described. a.The DNA sequence will use the IUPAC ambiguity recommendation. (See http://www.genomatix.de/online_help/help/sequence_formats.html) b.Blank lines, spaces, or other symbols must not be included in the sequence text. c.The sequence text must be in ASCII or UTF-8 encoding. For the alphabets used, the two are identical.
 * @param nucleotides a sequence of [a|c|t|g] letters
 */
void setNucleotides(String nucleotides);",0.9928934010152284
12801,"/** 
 * Resolve the ID or return null.
 * @param id    the identifier
 * @return      the resolution of the identifier, or null if it could not be resolved
 */
public E resolve(ID id) throws MergerException ;","/** 
 * Resolve the ID or return null.
 * @param id    the identifier
 * @return      the resolution of the identifier, or null if it could not be resolved
 */
E resolve(ID id) throws MergerException ;",0.982885085574572
12802,"/** 
 * Returns the top-level objects contained in this document. Top level objects may contain other SBOL objects. For example, a   {@link DnaComponent} may contain a {@link DnaSequence} and multiple {@link SequenceAnnotation}s which will not be included in the results of this function. To get all the objects contained in a document you can use the   {@link SBOLObjectCollector} function.
 */
public List<SBOLRootObject> getContents();","/** 
 * Returns the top-level objects contained in this document. Top level objects may contain other SBOL objects. For example, a   {@link DnaComponent} may contain a {@link DnaSequence} and multiple {@link SequenceAnnotation}s which will not be included in the results of this function. To get all the objects contained in a document you can use the   {@link SBOLObjectCollector} function.
 */
List<SBOLRootObject> getContents();",0.9919447640966628
12803,"/** 
 * Adds a new top level object to the document. Only top-level objects need to be added explicitly to a document.
 */
public void addContent(SBOLRootObject obj);","/** 
 * Adds a new top level object to the document. Only top-level objects need to be added explicitly to a document.
 */
void addContent(SBOLRootObject obj);",0.9784615384615384
12804,"/** 
 * Removes a top level object from the document.
 */
public void removeContent(SBOLRootObject obj);","/** 
 * Removes a top level object from the document.
 */
void removeContent(SBOLRootObject obj);",0.965174129353234
12805,"/** 
 * Sets the identifier for this object.
 */
public void setURI(URI uri);","/** 
 * Sets the identifier for this object.
 */
void setURI(URI uri);",0.9523809523809524
12806,"/** 
 * Returns the identifier for this object.
 */
public URI getURI();","/** 
 * Returns the identifier for this object.
 */
URI getURI();",0.948905109489051
12807,"/** 
 * Reads the contents of an SBOL document from the given input stream into a newly created document instance.
 * @throws IOException if an IO error occurs while reading the contents of this document
 * @throws SBOLValidationException if a validation error occurs while reading the contents of the document
 */
public SBOLDocument read(InputStream in) throws IOException, SBOLValidationException ;","/** 
 * Reads the contents of an SBOL document from the given input stream into a newly created document instance.
 * @throws IOException if an IO error occurs while reading the contents of this document
 * @throws SBOLValidationException if a validation error occurs while reading the contents of the document
 */
SBOLDocument read(InputStream in) throws IOException, SBOLValidationException ;",0.9911949685534592
12808,"/** 
 * Validates the contents of the document and throws a   {@link SBOLValidationException} if validation fails. The function returns without an exception if the validation is successful.
 * @param doc
 * @throws SBOLValidationException
 */
public void validate(SBOLDocument doc) throws SBOLValidationException ;","/** 
 * Validates the contents of the document and throws a   {@link SBOLValidationException} if validation fails. The function returns without an exception if the validation is successful.
 * @param doc
 * @throws SBOLValidationException
 */
void validate(SBOLDocument doc) throws SBOLValidationException ;",0.9887278582930756
12809,"/** 
 * The default equals implementation which returns <code>true</code> only if the given object is <code>==</code> to this object.
 */
public boolean equals(Object obj);","/** 
 * The default equals implementation which returns <code>true</code> only if the given object is <code>==</code> to this object.
 */
boolean equals(Object obj);",0.9792284866468842
12810,"/** 
 * Calls the appropriate visit function from the   {@link SBOLVisitor} class.
 * @param visitor the visitor to accept
 * @throws T if the visitor throws T
 */
public <T extends Throwable>void accept(SBOLVisitor<T> visitor) throws T ;","/** 
 * Calls the appropriate visit function from the   {@link SBOLVisitor} class.
 * @param visitor the visitor to accept
 * @throws T if the visitor throws T
 */
<T extends Throwable>void accept(SBOLVisitor<T> visitor) throws T ;",0.9850746268656716
12811,public void visit(SequenceAnnotation annotation) throws T ;,void visit(SequenceAnnotation annotation) throws T ;,0.9369369369369368
12812,"/** 
 * Writes the contents of the given SBOL document to the given output stream.
 * @throws IOException if an IO error occurs while writing the contents of this document
 * @throws SBOLValidationException if a validation error occurs while writing the contents of the document
 */
public void write(SBOLDocument doc,OutputStream out) throws IOException, SBOLValidationException ;","/** 
 * Writes the contents of the given SBOL document to the given output stream.
 * @throws IOException if an IO error occurs while writing the contents of this document
 * @throws SBOLValidationException if a validation error occurs while writing the contents of the document
 */
void write(SBOLDocument doc,OutputStream out) throws IOException, SBOLValidationException ;",0.990728476821192
12813,public UriResolver<DnaComponent> getComponentUriResolver();,UriResolver<DnaComponent> getComponentUriResolver();,0.9369369369369368
12814,public UriResolver<SequenceAnnotation> getAnnotationUriResolver();,UriResolver<SequenceAnnotation> getAnnotationUriResolver();,0.944
12815,public UriResolver<Collection> getCollectionUriResolver();,UriResolver<Collection> getCollectionUriResolver();,0.9357798165137616
12816,public DisplayIdResolver<DnaComponent> getComponentDisplayIdResolver();,DisplayIdResolver<DnaComponent> getComponentDisplayIdResolver();,0.9481481481481482
12817,public DisplayIdResolver<Collection> getCollectionDisplayIdResolver();,DisplayIdResolver<Collection> getCollectionDisplayIdResolver();,0.9473684210526316
12818,public UriResolver<DnaSequence> getSequenceUriResolver();,UriResolver<DnaSequence> getSequenceUriResolver();,0.9345794392523364
12819,"/** 
 * Orientation of feature is the + or - strand. Sequences used are by convention assumed 5' to 3', therefore the  <code>+</code> strand is 5' to 3' and the <code>-</code> strand  is 3' to 5'.
 * @return <code>+</code> if feature aligns in same direction as DnaComponent,<code>-</code> if feature aligns in opposite direction as DnaComponent.
 */
public StrandType getStrand();","/** 
 * Orientation of feature is the + or - strand. Sequences used are by convention assumed 5' to 3', therefore the  <code>+</code> strand is 5' to 3' and the <code>-</code> strand  is 3' to 5'.
 * @return <code>+</code> if feature aligns in same direction as DnaComponent,<code>-</code> if feature aligns in opposite direction as DnaComponent.
 */
StrandType getStrand();",0.990728476821192
12820,public void setSubComponent(DnaComponent subComponent);,void setSubComponent(DnaComponent subComponent);,0.9320388349514565
12821,public List<SequenceAnnotation> getPrecedes();,List<SequenceAnnotation> getPrecedes();,0.9176470588235294
12822,public void removePrecede(SequenceAnnotation precede);,void removePrecede(SequenceAnnotation precede);,0.9306930693069309
12823,"/** 
 * Last position of the Sequence Feature on the DnaComponent. Coordinate in terms of the DnaSequence of the DnaComponent annotated.
 * @return positive integer coordinate of last base of the SequenceFeature
 */
public Integer getBioEnd();","/** 
 * Last position of the Sequence Feature on the DnaComponent. Coordinate in terms of the DnaSequence of the DnaComponent annotated.
 * @return positive integer coordinate of last base of the SequenceFeature
 */
Integer getBioEnd();",0.9853862212943632
12824,public DnaComponent getSubComponent();,DnaComponent getSubComponent();,0.8985507246376812
12825,public void setBioEnd(Integer bioEnd);,void setBioEnd(Integer bioEnd);,0.8985507246376812
12826,public void addPrecede(SequenceAnnotation precede);,void addPrecede(SequenceAnnotation precede);,0.9263157894736842
12827,public void setBioStart(Integer bioStart);,void setBioStart(Integer bioStart);,0.9090909090909092
12828,public void setStrand(StrandType strand);,void setStrand(StrandType strand);,0.9066666666666666
12829,"/** 
 * First position of the Sequence Feature being annotated. Start coordinate is in terms of the DnaSequence of the DnaComponent annotated.
 * @return positive integer coordinate of first base of the SequenceFeature.
 */
public Integer getBioStart();","/** 
 * First position of the Sequence Feature being annotated. Start coordinate is in terms of the DnaSequence of the DnaComponent annotated.
 * @return positive integer coordinate of first base of the SequenceFeature.
 */
Integer getBioStart();",0.9859719438877756
12830,"public List<Element> getAny(){
  if (any == null) {
    any=new ArrayList<Element>();
  }
  return this.any;
}","public List<Element> getAny(){
  if (any == null) {
    any=new ArrayList<>();
  }
  return this.any;
}",0.9671361502347418
12831,"/** 
 * Sets the value of this Annotation object to the specified argument.
 * @param value
 */
public void setValue(NamedProperty<QName> value){
  this.value=value;
}","/** 
 * Sets the value of this Annotation object to the specified argument.
 */
public void setValue(NamedProperty<QName> value){
  this.value=value;
}",0.949685534591195
12832,"/** 
 * Makes a deep copy of this Annotation object. 
 * @return an Annotation object that is the exact copy of this object. 
 */
public Annotation copy(){
  Annotation cloned=this.deepCopy();
  return cloned;
}","/** 
 * Makes a deep copy of this Annotation object. 
 * @return an Annotation object that is the exact copy of this object. 
 */
public Annotation copy(){
  return this.deepCopy();
}",0.9086294416243654
12833,"/** 
 * Makes a deep copy of this Annotation object. 
 * @param displayId
 * @return an Annotation object that is the exact copy of this object. 
 */
private Annotation deepCopy(){
  return new Annotation(this);
}","/** 
 * Makes a deep copy of this Annotation object. 
 * @return an Annotation object that is the exact copy of this object.
 */
private Annotation deepCopy(){
  return new Annotation(this);
}",0.9481481481481482
12834,"/** 
 * Adds the specified member URI to the list of members.  
 * @param memberURI
 */
public void addMember(URI memberURI){
  if (sbolDocument != null && sbolDocument.isComplete()) {
    if (sbolDocument.getTopLevel(memberURI) == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + memberURI + ""String_Node_Str"");
    }
  }
  members.add(memberURI);
}","/** 
 * Adds the specified member URI to the list of members.  
 */
public void addMember(URI memberURI){
  if (sbolDocument != null && sbolDocument.isComplete()) {
    if (sbolDocument.getTopLevel(memberURI) == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + memberURI + ""String_Node_Str"");
    }
  }
  members.add(memberURI);
}",0.9722222222222222
12835,"/** 
 * Returns the set of member URIs referenced by this object.
 * @return the set of member URIs referenced by this object.
 */
public Set<URI> getMemberURIs(){
  Set<URI> result=new HashSet<URI>();
  result.addAll(members);
  return result;
}","/** 
 * Returns the set of member URIs referenced by this object.
 * @return the set of member URIs referenced by this object.
 */
public Set<URI> getMemberURIs(){
  Set<URI> result=new HashSet<>();
  result.addAll(members);
  return result;
}",0.9938650306748468
12836,"/** 
 * Removes the member matching the specified URI from the list of members if present.
 * @param memberURI
 * @return the matching instance if present, or <code>null</code> if not present.
 */
public boolean removeMember(URI memberURI){
  return members.remove(memberURI);
}","/** 
 * Removes the member matching the specified URI from the list of members if present.
 * @return the matching instance if present, or <code>null</code> if not present.
 */
public boolean removeMember(URI memberURI){
  return members.remove(memberURI);
}",0.9626865671641792
12837,"@Override protected boolean checkDescendantsURIcompliance(){
  if (!isURIcompliant(this.getIdentity(),0)) {
    return false;
  }
  return true;
}","@Override protected boolean checkDescendantsURIcompliance(){
  return isURIcompliant(this.getIdentity(),0);
}",0.807843137254902
12838,"private Collection(Collection collection){
  super(collection.getIdentity());
  Set<URI> newMembers=new HashSet<URI>();
  for (  URI member : collection.getMemberURIs()) {
    newMembers.add(member);
  }
}","private Collection(Collection collection){
  super(collection.getIdentity());
  Set<URI> newMembers=new HashSet<>();
  for (  URI member : collection.getMemberURIs()) {
    newMembers.add(member);
  }
}",0.9926289926289926
12839,"/** 
 * Clears the existing list of members, then set the members of this object to   the specified list of members.
 * @param members
 */
public void setMembers(Set<URI> members){
  clearMembers();
  for (  URI member : members) {
    addMember(member);
  }
}","/** 
 * Clears the existing list of members, then set the members of this object to   the specified list of members.
 */
public void setMembers(Set<URI> members){
  clearMembers();
  for (  URI member : members) {
    addMember(member);
  }
}",0.9641434262948207
12840,"/** 
 * Returns the set of members referenced by this object.
 * @return the set of members referenced by this object.
 */
public Set<TopLevel> getMembers(){
  Set<TopLevel> result=new HashSet<TopLevel>();
  for (  URI memberURI : members) {
    TopLevel member=sbolDocument.getTopLevel(memberURI);
    result.add(member);
  }
  return result;
}","/** 
 * Returns the set of members referenced by this object.
 * @return the set of members referenced by this object.
 */
public Set<TopLevel> getMembers(){
  Set<TopLevel> result=new HashSet<>();
  for (  URI memberURI : members) {
    TopLevel member=sbolDocument.getTopLevel(memberURI);
    result.add(member);
  }
  return result;
}",0.9882697947214076
12841,"/** 
 * Returns a comparable value for a qualifier. This method takes into account the ordering of known qualifiers then unknown qualifiers with lexical ordering. just returning an Integer with the index here is faster, but requires a lot of if/then/else to check for -1 or QUALIFIERS.size and then resort to lexical ordering. Most comparisons are decided by the first character, so this is still fast. If more characters are needed then it requires a lexical sort anyway.
 * @param qualifier
 * @return an equivalent value that can be used with lexical comparison
 */
public static String comparableQualifier(String qualifier){
  int i=_QUALIFIERS.indexOf(qualifier);
  return i == -1 ? (_QUALIFIERS.size() + ""String_Node_Str"" + qualifier) : String.valueOf(i);
}","/** 
 * Returns a comparable value for a qualifier. This method takes into account the ordering of known qualifiers then unknown qualifiers with lexical ordering. just returning an Integer with the index here is faster, but requires a lot of if/then/else to check for -1 or QUALIFIERS.size and then resort to lexical ordering. Most comparisons are decided by the first character, so this is still fast. If more characters are needed then it requires a lexical sort anyway.
 * @return an equivalent value that can be used with lexical comparison
 */
public static String comparableQualifier(String qualifier){
  int i=_QUALIFIERS.indexOf(qualifier);
  return i == -1 ? (_QUALIFIERS.size() + ""String_Node_Str"" + qualifier) : String.valueOf(i);
}",0.9867197875166004
12842,"public final void parseVersion(String version){
  this.value=version;
  items=new ListItem();
  version=version.toLowerCase(Locale.ENGLISH);
  ListItem list=items;
  Stack<Item> stack=new Stack<Item>();
  stack.push(list);
  boolean isDigit=false;
  int startIndex=0;
  for (int i=0; i < version.length(); i++) {
    char c=version.charAt(i);
    if (c == '.') {
      if (i == startIndex) {
        list.add(IntegerItem.ZERO);
      }
 else {
        list.add(parseItem(isDigit,version.substring(startIndex,i)));
      }
      startIndex=i + 1;
    }
 else     if (c == '-') {
      if (i == startIndex) {
        list.add(IntegerItem.ZERO);
      }
 else {
        list.add(parseItem(isDigit,version.substring(startIndex,i)));
      }
      startIndex=i + 1;
      if (isDigit) {
        list.normalize();
        if ((i + 1 < version.length()) && Character.isDigit(version.charAt(i + 1))) {
          list.add(list=new ListItem());
          stack.push(list);
        }
      }
    }
 else     if (Character.isDigit(c)) {
      if (!isDigit && i > startIndex) {
        list.add(new StringItem(version.substring(startIndex,i),true));
        startIndex=i;
      }
      isDigit=true;
    }
 else {
      if (isDigit && i > startIndex) {
        list.add(parseItem(true,version.substring(startIndex,i)));
        startIndex=i;
      }
      isDigit=false;
    }
  }
  if (version.length() > startIndex) {
    list.add(parseItem(isDigit,version.substring(startIndex)));
  }
  while (!stack.isEmpty()) {
    list=(ListItem)stack.pop();
    list.normalize();
  }
  canonical=items.toString();
}","public final void parseVersion(String version){
  this.value=version;
  items=new ListItem();
  version=version.toLowerCase(Locale.ENGLISH);
  ListItem list=items;
  Stack<Item> stack=new Stack<>();
  stack.push(list);
  boolean isDigit=false;
  int startIndex=0;
  for (int i=0; i < version.length(); i++) {
    char c=version.charAt(i);
    if (c == '.') {
      if (i == startIndex) {
        list.add(IntegerItem.ZERO);
      }
 else {
        list.add(parseItem(isDigit,version.substring(startIndex,i)));
      }
      startIndex=i + 1;
    }
 else     if (c == '-') {
      if (i == startIndex) {
        list.add(IntegerItem.ZERO);
      }
 else {
        list.add(parseItem(isDigit,version.substring(startIndex,i)));
      }
      startIndex=i + 1;
      if (isDigit) {
        list.normalize();
        if ((i + 1 < version.length()) && Character.isDigit(version.charAt(i + 1))) {
          list.add(list=new ListItem());
          stack.push(list);
        }
      }
    }
 else     if (Character.isDigit(c)) {
      if (!isDigit && i > startIndex) {
        list.add(new StringItem(version.substring(startIndex,i),true));
        startIndex=i;
      }
      isDigit=true;
    }
 else {
      if (isDigit && i > startIndex) {
        list.add(parseItem(true,version.substring(startIndex,i)));
        startIndex=i;
      }
      isDigit=false;
    }
  }
  if (version.length() > startIndex) {
    list.add(parseItem(isDigit,version.substring(startIndex)));
  }
  while (!stack.isEmpty()) {
    list=(ListItem)stack.pop();
    list.normalize();
  }
  canonical=items.toString();
}",0.9987429289754872
12843,"/** 
 * Assume this Component object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 * @param URIprefix
 * @param parentDisplayId
 * @param version
 */
void updateCompliantURI(String URIprefix,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity(),1);
  URI newIdentity=URI.create(URIprefix + '/' + parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  if (!this.getMapsTos().isEmpty()) {
    for (    MapsTo mapsTo : this.getMapsTos()) {
      mapsTo.updateCompliantURI(URIprefix,parentDisplayId,thisObjDisplayId,version);
    }
  }
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}","/** 
 * Assume this Component object and all its descendants (children, grand children, etc) have compliant URI, and all given parameters have compliant forms. This method is called by   {@link ComponentDefinition#copy(String,String,String)}.
 */
void updateCompliantURI(String URIprefix,String parentDisplayId,String version){
  String thisObjDisplayId=extractDisplayId(this.getIdentity(),1);
  URI newIdentity=URI.create(URIprefix + '/' + parentDisplayId+ '/'+ thisObjDisplayId+ '/'+ version);
  if (!this.getMapsTos().isEmpty()) {
    for (    MapsTo mapsTo : this.getMapsTos()) {
      mapsTo.updateCompliantURI(URIprefix,parentDisplayId,thisObjDisplayId,version);
    }
  }
  this.setWasDerivedFrom(this.getIdentity());
  this.setIdentity(newIdentity);
}",0.9595448798988622
12844,"private static ComponentDefinition get_pLac(SBOLDocument SBOL2Doc_test){
  Sequence temp=get_pLacSeq(SBOL2Doc_test);
  return createComponentDefinitionData(SBOL2Doc_test,getSetPropertyURI(""String_Node_Str""),getSetPropertyURI(""String_Node_Str""),getData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),get_pLacSeq(SBOL2Doc_test),null,null,null);
}","private static ComponentDefinition get_pLac(SBOLDocument SBOL2Doc_test){
  return createComponentDefinitionData(SBOL2Doc_test,getSetPropertyURI(""String_Node_Str""),getSetPropertyURI(""String_Node_Str""),getData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),get_pLacSeq(SBOL2Doc_test),null,null,null);
}",0.9427083333333334
12845,"private static Model createModelData(SBOLDocument doc,List<String> modeldata,Set<URI> roles,URI source,URI language,URI framework){
  URI identity=getURI(modeldata.get(0));
  URI persistentIdentity=getURI(modeldata.get(1));
  String version=modeldata.get(2);
  String displayId=modeldata.get(3);
  String name=modeldata.get(4);
  String description=modeldata.get(5);
  Model model=doc.createModel(identity,source,language,framework,roles);
  setCommonTopLevelData(model,identity,persistentIdentity,version,displayId,name,description);
  return model;
}","private static Model createModelData(SBOLDocument doc,List<String> modeldata,Set<URI> roles,URI source,URI language,URI framework){
  URI identity=getURI(modeldata.get(0));
  URI persistentIdentity=getURI(modeldata.get(1));
  String version=modeldata.get(2);
  String displayId=modeldata.get(3);
  String name=modeldata.get(4);
  String description=modeldata.get(5);
  Model model=doc.createModel(identity,source,language,framework,roles);
  if (model == null) {
    model=doc.getModel(identity);
  }
 else {
    setCommonTopLevelData(model,identity,persistentIdentity,version,displayId,name,description);
  }
  return model;
}",0.9363867684478372
12846,"private static ComponentDefinition createComponentDefinitionData(SBOLDocument SBOL2Doc_test,Set<URI> type,Set<URI> roles,List<String> componentData,Sequence structureData,List<Component> structureInstantiationData,List<SequenceAnnotation> structureAnnotationData,List<SequenceConstraint> structureConstraintData){
  URI identity=getURI(componentData.get(0));
  URI persistentIdentity=getURI(componentData.get(1));
  String version=componentData.get(2);
  String displayId=componentData.get(3);
  String name=componentData.get(4);
  String description=componentData.get(5);
  ComponentDefinition c=SBOL2Doc_test.createComponentDefinition(identity,type);
  c.setRoles(roles);
  setCommonTopLevelData(c,identity,persistentIdentity,version,displayId,name,description);
  if (structureData != null)   c.setSequence(structureData.getIdentity());
  if (structureInstantiationData != null) {
    if (structureAnnotationData != null && structureConstraintData == null)     c.setSequenceAnnotations(structureAnnotationData);
 else     if (structureConstraintData != null)     c.setSequenceConstraints(structureConstraintData);
  }
  return c;
}","private static ComponentDefinition createComponentDefinitionData(SBOLDocument SBOL2Doc_test,Set<URI> type,Set<URI> roles,List<String> componentData,Sequence structureData,List<Component> structureInstantiationData,List<SequenceAnnotation> structureAnnotationData,List<SequenceConstraint> structureConstraintData){
  URI identity=getURI(componentData.get(0));
  URI persistentIdentity=getURI(componentData.get(1));
  String version=componentData.get(2);
  String displayId=componentData.get(3);
  String name=componentData.get(4);
  String description=componentData.get(5);
  ComponentDefinition c=SBOL2Doc_test.createComponentDefinition(identity,type);
  if (c == null) {
    c=SBOL2Doc_test.getComponentDefinition(identity);
  }
 else {
    c.setRoles(roles);
    setCommonTopLevelData(c,identity,persistentIdentity,version,displayId,name,description);
  }
  if (structureData != null)   c.setSequence(structureData.getIdentity());
  if (structureInstantiationData != null) {
    if (structureAnnotationData != null && structureConstraintData == null)     c.setSequenceAnnotations(structureAnnotationData);
 else     if (structureConstraintData != null)     c.setSequenceConstraints(structureConstraintData);
  }
  return c;
}",0.9597628123676408
12847,"private static ModuleDefinition createModuleDefinitionData(SBOLDocument SBOL2Doc_test,Set<URI> type,Set<URI> roles,List<String> module_data,List<FunctionalComponent> functionalInstantiation_data,List<Interaction> interactionData,List<Module> moduleInstantiation_data,Set<URI> model_data,List<Annotation> annotations){
  URI identity=getURI(module_data.get(0));
  URI persistentIdentity=getURI(module_data.get(1));
  String version=module_data.get(2);
  String displayId=module_data.get(3);
  String name=module_data.get(4);
  String description=module_data.get(5);
  ModuleDefinition m=SBOL2Doc_test.createModuleDefinition(identity,roles);
  setCommonTopLevelData(m,identity,persistentIdentity,version,displayId,name,description);
  if (annotations != null)   m.setAnnotations(annotations);
  if (functionalInstantiation_data != null)   m.setFunctionalComponents(functionalInstantiation_data);
  if (interactionData != null)   m.setInteractions(interactionData);
  if (moduleInstantiation_data != null)   m.setModules(moduleInstantiation_data);
  if (model_data != null)   m.setModels(model_data);
  return m;
}","private static ModuleDefinition createModuleDefinitionData(SBOLDocument SBOL2Doc_test,Set<URI> type,Set<URI> roles,List<String> module_data,List<FunctionalComponent> functionalInstantiation_data,List<Interaction> interactionData,List<Module> moduleInstantiation_data,Set<URI> model_data,List<Annotation> annotations){
  URI identity=getURI(module_data.get(0));
  URI persistentIdentity=getURI(module_data.get(1));
  String version=module_data.get(2);
  String displayId=module_data.get(3);
  String name=module_data.get(4);
  String description=module_data.get(5);
  ModuleDefinition m=SBOL2Doc_test.createModuleDefinition(identity,roles);
  if (m == null) {
    m=SBOL2Doc_test.getModuleDefinition(identity);
  }
 else {
    setCommonTopLevelData(m,identity,persistentIdentity,version,displayId,name,description);
    if (annotations != null)     m.setAnnotations(annotations);
    if (functionalInstantiation_data != null)     m.setFunctionalComponents(functionalInstantiation_data);
    if (interactionData != null)     m.setInteractions(interactionData);
    if (moduleInstantiation_data != null)     m.setModules(moduleInstantiation_data);
    if (model_data != null)     m.setModels(model_data);
  }
  return m;
}",0.9450643776824036
12848,"private static Sequence createSequenceData(SBOLDocument SBOL2Doc_test,List<String> structureData,URI encoding){
  URI identity=getURI(structureData.get(0));
  URI persistentIdentity=getURI(structureData.get(1));
  String version=structureData.get(2);
  String displayId=structureData.get(3);
  String name=structureData.get(4);
  String description=structureData.get(5);
  String element=structureData.get(6);
  Sequence structure=SBOL2Doc_test.createSequence(identity,element,encoding);
  setCommonTopLevelData(structure,identity,persistentIdentity,version,displayId,name,description);
  return structure;
}","private static Sequence createSequenceData(SBOLDocument SBOL2Doc_test,List<String> structureData,URI encoding){
  URI identity=getURI(structureData.get(0));
  URI persistentIdentity=getURI(structureData.get(1));
  String version=structureData.get(2);
  String displayId=structureData.get(3);
  String name=structureData.get(4);
  String description=structureData.get(5);
  String element=structureData.get(6);
  Sequence structure=SBOL2Doc_test.createSequence(identity,element,encoding);
  if (structure == null) {
    structure=SBOL2Doc_test.getSequence(identity);
  }
 else {
    setCommonTopLevelData(structure,identity,persistentIdentity,version,displayId,name,description);
  }
  return structure;
}",0.899390243902439
12849,"private static Model createModelData(SBOLDocument doc,List<String> modeldata,Set<URI> roles,URI source,URI language,URI framework){
  URI identity=getURI(modeldata.get(0));
  URI persistentIdentity=getURI(modeldata.get(1));
  String version=modeldata.get(2);
  String displayId=modeldata.get(3);
  String name=modeldata.get(4);
  String description=modeldata.get(5);
  Model model=doc.createModel(identity,source,language,framework,roles);
  setCommonTopLevelData(model,identity,persistentIdentity,version,displayId,name,description);
  return model;
}","private static Model createModelData(SBOLDocument doc,List<String> modeldata,Set<URI> roles,URI source,URI language,URI framework){
  URI identity=getURI(modeldata.get(0));
  URI persistentIdentity=getURI(modeldata.get(1));
  String version=modeldata.get(2);
  String displayId=modeldata.get(3);
  String name=modeldata.get(4);
  String description=modeldata.get(5);
  Model model=doc.createModel(identity,source,language,framework,roles);
  if (model == null) {
    model=doc.getModel(identity);
  }
 else {
    setCommonTopLevelData(model,identity,persistentIdentity,version,displayId,name,description);
  }
  return model;
}",0.9363867684478372
12850,"private static ComponentDefinition createComponentDefinitionData(SBOLDocument SBOL2Doc_test,Set<URI> type,Set<URI> roles,List<String> componentData,Sequence structureData,List<Component> structureInstantiationData,List<SequenceAnnotation> structureAnnotationData,List<SequenceConstraint> structureConstraintData){
  URI identity=getURI(componentData.get(0));
  URI persistentIdentity=getURI(componentData.get(1));
  String version=componentData.get(2);
  String displayId=componentData.get(3);
  String name=componentData.get(4);
  String description=componentData.get(5);
  ComponentDefinition c=SBOL2Doc_test.createComponentDefinition(identity,type,roles);
  setCommonTopLevelData(c,identity,persistentIdentity,version,displayId,name,description);
  if (structureData != null)   c.setSequence(structureData.getIdentity());
  if (structureInstantiationData != null) {
    c.setComponents(structureInstantiationData);
    if (structureAnnotationData != null && structureConstraintData == null)     c.setSequenceAnnotations(structureAnnotationData);
 else     if (structureConstraintData != null)     c.setSequenceConstraints(structureConstraintData);
  }
  return c;
}","private static ComponentDefinition createComponentDefinitionData(SBOLDocument SBOL2Doc_test,Set<URI> type,Set<URI> roles,List<String> componentData,Sequence structureData,List<Component> structureInstantiationData,List<SequenceAnnotation> structureAnnotationData,List<SequenceConstraint> structureConstraintData){
  URI identity=getURI(componentData.get(0));
  URI persistentIdentity=getURI(componentData.get(1));
  String version=componentData.get(2);
  String displayId=componentData.get(3);
  String name=componentData.get(4);
  String description=componentData.get(5);
  ComponentDefinition c=SBOL2Doc_test.createComponentDefinition(identity,type,roles);
  if (c == null) {
    c=SBOL2Doc_test.getComponentDefinition(identity);
  }
 else {
    setCommonTopLevelData(c,identity,persistentIdentity,version,displayId,name,description);
    if (structureData != null)     c.setSequence(structureData.getIdentity());
    if (structureInstantiationData != null) {
      c.setComponents(structureInstantiationData);
      if (structureAnnotationData != null && structureConstraintData == null)       c.setSequenceAnnotations(structureAnnotationData);
 else       if (structureConstraintData != null)       c.setSequenceConstraints(structureConstraintData);
    }
  }
  return c;
}",0.947239263803681
12851,"private static ModuleDefinition createModuleDefinitionData(SBOLDocument SBOL2Doc_test,Set<URI> type,Set<URI> roles,List<String> module_data,List<FunctionalComponent> functionalInstantiation_data,List<Interaction> interactionData,List<Module> moduleInstantiation_data,Set<URI> model_data,List<Annotation> annotations){
  URI identity=getURI(module_data.get(0));
  URI persistentIdentity=getURI(module_data.get(1));
  String version=module_data.get(2);
  String displayId=module_data.get(3);
  String name=module_data.get(4);
  String description=module_data.get(5);
  ModuleDefinition m=SBOL2Doc_test.createModuleDefinition(identity,roles);
  setCommonTopLevelData(m,identity,persistentIdentity,version,displayId,name,description);
  if (annotations != null)   m.setAnnotations(annotations);
  if (functionalInstantiation_data != null)   m.setFunctionalComponents(functionalInstantiation_data);
  if (interactionData != null)   m.setInteractions(interactionData);
  if (moduleInstantiation_data != null)   m.setModules(moduleInstantiation_data);
  if (model_data != null)   m.setModels(model_data);
  return m;
}","private static ModuleDefinition createModuleDefinitionData(SBOLDocument SBOL2Doc_test,Set<URI> type,Set<URI> roles,List<String> module_data,List<FunctionalComponent> functionalInstantiation_data,List<Interaction> interactionData,List<Module> moduleInstantiation_data,Set<URI> model_data,List<Annotation> annotations){
  URI identity=getURI(module_data.get(0));
  URI persistentIdentity=getURI(module_data.get(1));
  String version=module_data.get(2);
  String displayId=module_data.get(3);
  String name=module_data.get(4);
  String description=module_data.get(5);
  ModuleDefinition m=SBOL2Doc_test.createModuleDefinition(identity,roles);
  if (m == null) {
    m=SBOL2Doc_test.getModuleDefinition(identity);
  }
 else {
    setCommonTopLevelData(m,identity,persistentIdentity,version,displayId,name,description);
    if (annotations != null)     m.setAnnotations(annotations);
    if (functionalInstantiation_data != null)     m.setFunctionalComponents(functionalInstantiation_data);
    if (interactionData != null)     m.setInteractions(interactionData);
    if (moduleInstantiation_data != null)     m.setModules(moduleInstantiation_data);
    if (model_data != null)     m.setModels(model_data);
  }
  return m;
}",0.9450643776824036
12852,"private static ComponentDefinition parseDnaComponentV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> componentDef){
  String displayId=null;
  String name=null;
  String description=null;
  URI seq_identity=null;
  Set<URI> roles=new HashSet<URI>();
  URI identity=componentDef.getIdentity();
  List<Annotation> annotations=new ArrayList<Annotation>();
  List<SequenceAnnotation> sequenceAnnotations=new ArrayList<SequenceAnnotation>();
  List<Component> components=new ArrayList<Component>();
  List<SequenceConstraint> sequenceConstraints=new ArrayList<SequenceConstraint>();
  List<SBOLPair> precedePairs=new ArrayList<SBOLPair>();
  Map<URI,URI> componentDefMap=new HashMap<URI,URI>();
  Set<URI> type=new HashSet<URI>();
  type.add(Sbol2Terms.DnaComponentV1URI.type);
  int component_num=0;
  for (  NamedProperty<QName> namedProperty : componentDef.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      if (authority != null) {
        identity=URI.create(authority + ""String_Node_Str"" + displayId+ ""String_Node_Str"");
      }
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.name)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.type)) {
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.annotations)) {
      SequenceAnnotation sa=parseSequenceAnnotationV1(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),precedePairs,identity);
      sequenceAnnotations.add(sa);
      URI component_identity=URI.create(getParentURI(identity) + ""String_Node_Str"" + ++component_num+ ""String_Node_Str"");
      URI access=Sbol2Terms.Access.PUBLIC;
      URI instantiatedComponent=sa.getComponent();
      componentDefMap.put(sa.getIdentity(),component_identity);
      sa.setComponent(component_identity);
      Component component=new Component(component_identity,access,instantiatedComponent);
      components.add(component);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.dnaSequence)) {
      seq_identity=parseDnaSequenceV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  if (roles.isEmpty())   roles.add(Sbol2Terms.DnaComponentV1URI.roles);
  int sc_number=0;
  for (  SBOLPair pair : precedePairs) {
    URI sc_identity=URI.create(getParentURI(identity) + ""String_Node_Str"" + ++sc_number+ ""String_Node_Str"");
    URI restriction=Sbol2Terms.DnaComponentV1URI.restriction;
    URI subject=null;
    URI object=null;
    for (    URI key : componentDefMap.keySet()) {
      if (pair.getLeft().equals(key)) {
        subject=componentDefMap.get(key);
      }
 else       if (pair.getRight().equals(key)) {
        object=componentDefMap.get(key);
      }
    }
    SequenceConstraint sc=new SequenceConstraint(sc_identity,restriction,subject,object);
    sequenceConstraints.add(sc);
  }
  ComponentDefinition c=SBOLDoc.createComponentDefinition(identity,type,roles);
  if (displayId != null)   c.setDisplayId(displayId);
  if (name != null && !name.isEmpty())   c.setName(name);
  if (description != null && !description.isEmpty())   c.setDescription(description);
  if (seq_identity != null)   c.setSequence(seq_identity);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  if (!sequenceAnnotations.isEmpty())   c.setSequenceAnnotations(sequenceAnnotations);
  if (!components.isEmpty())   c.setSubComponents(components);
  if (!sequenceConstraints.isEmpty())   c.setSequenceConstraints(sequenceConstraints);
  return c;
}","private static ComponentDefinition parseDnaComponentV1(SBOLDocument SBOLDoc,IdentifiableDocument<QName> componentDef){
  String displayId=null;
  String name=null;
  String description=null;
  URI seq_identity=null;
  Set<URI> roles=new HashSet<URI>();
  URI identity=componentDef.getIdentity();
  List<Annotation> annotations=new ArrayList<Annotation>();
  List<SequenceAnnotation> sequenceAnnotations=new ArrayList<SequenceAnnotation>();
  List<Component> components=new ArrayList<Component>();
  List<SequenceConstraint> sequenceConstraints=new ArrayList<SequenceConstraint>();
  List<SBOLPair> precedePairs=new ArrayList<SBOLPair>();
  Map<URI,URI> componentDefMap=new HashMap<URI,URI>();
  Set<URI> type=new HashSet<URI>();
  type.add(Sbol2Terms.DnaComponentV1URI.type);
  int component_num=0;
  int sa_num=0;
  for (  NamedProperty<QName> namedProperty : componentDef.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.displayId)) {
      displayId=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      if (authority != null) {
        identity=URI.create(authority + ""String_Node_Str"" + displayId+ ""String_Node_Str"");
      }
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.name)) {
      name=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.description)) {
      description=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.type)) {
      roles.add(URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString()));
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.annotations)) {
      SequenceAnnotation sa=parseSequenceAnnotationV1(SBOLDoc,((NestedDocument<QName>)namedProperty.getValue()),precedePairs,identity,++sa_num);
      sequenceAnnotations.add(sa);
      URI component_identity=URI.create(getParentURI(identity) + ""String_Node_Str"" + ++component_num+ ""String_Node_Str"");
      URI access=Sbol2Terms.Access.PUBLIC;
      URI instantiatedComponent=sa.getComponent();
      URI originalURI=((NestedDocument<QName>)namedProperty.getValue()).getIdentity();
      componentDefMap.put(originalURI,component_identity);
      sa.setComponent(component_identity);
      Component component=new Component(component_identity,access,instantiatedComponent);
      components.add(component);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.DNAComponent.dnaSequence)) {
      seq_identity=parseDnaSequenceV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity();
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  if (roles.isEmpty())   roles.add(Sbol2Terms.DnaComponentV1URI.roles);
  int sc_number=0;
  for (  SBOLPair pair : precedePairs) {
    URI sc_identity=URI.create(getParentURI(identity) + ""String_Node_Str"" + ++sc_number+ ""String_Node_Str"");
    URI restriction=Sbol2Terms.DnaComponentV1URI.restriction;
    URI subject=null;
    URI object=null;
    for (    URI key : componentDefMap.keySet()) {
      if (pair.getLeft().equals(key)) {
        subject=componentDefMap.get(key);
      }
 else       if (pair.getRight().equals(key)) {
        object=componentDefMap.get(key);
      }
    }
    SequenceConstraint sc=new SequenceConstraint(sc_identity,restriction,subject,object);
    sequenceConstraints.add(sc);
  }
  ComponentDefinition c=SBOLDoc.createComponentDefinition(identity,type,roles);
  if (displayId != null)   c.setDisplayId(displayId);
  if (name != null && !name.isEmpty())   c.setName(name);
  if (description != null && !description.isEmpty())   c.setDescription(description);
  if (seq_identity != null)   c.setSequence(seq_identity);
  if (!annotations.isEmpty())   c.setAnnotations(annotations);
  if (!sequenceAnnotations.isEmpty())   c.setSequenceAnnotations(sequenceAnnotations);
  if (!components.isEmpty())   c.setSubComponents(components);
  if (!sequenceConstraints.isEmpty())   c.setSequenceConstraints(sequenceConstraints);
  return c;
}",0.9832415902140672
12853,"private static SequenceAnnotation parseSequenceAnnotationV1(SBOLDocument SBOLDoc,NestedDocument<QName> sequenceAnnotation,List<SBOLPair> precedePairs,URI parentURI){
  int sa_value=0;
  Integer start=null;
  Integer end=null;
  String strand=null;
  URI componentURI=null;
  URI identity=sequenceAnnotation.getIdentity();
  List<Annotation> annotations=new ArrayList<Annotation>();
  for (  NamedProperty<QName> namedProperty : sequenceAnnotation.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.uri)) {
      if (authority != null) {
        identity=URI.create(getParentURI(parentURI) + ""String_Node_Str"" + identity+ ++sa_value+ ""String_Node_Str"");
      }
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.bioStart)) {
      String temp=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      start=Integer.parseInt(temp);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.bioEnd)) {
      String temp2=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      end=Integer.parseInt(temp2);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.strand)) {
      strand=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.subComponent)) {
      componentURI=parseDnaComponentV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.precedes)) {
      URI left=sequenceAnnotation.getIdentity();
      URI right=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
      SBOLPair pair=new SBOLPair(left,right);
      precedePairs.add(pair);
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Location location=null;
  if (start != null && end != null) {
    URI range_identity=URI.create(getParentURI(sequenceAnnotation.getIdentity()) + ""String_Node_Str"");
    Range r=new Range(range_identity,start,end);
    if (strand != null) {
      if (strand.equals(""String_Node_Str"")) {
        r.setOrientation(Sbol2Terms.Orientation.inline);
      }
 else       if (strand.equals(""String_Node_Str"")) {
        r.setOrientation(Sbol2Terms.Orientation.reverseComplement);
      }
      location=r;
    }
  }
 else {
    URI dummyRange_id=URI.create(getParentURI(sequenceAnnotation.getIdentity()) + ""String_Node_Str"");
    int dummy_start=0;
    int dummy_end=0;
    Range dummyRange=new Range(dummyRange_id,dummy_start,dummy_end);
    location=dummyRange;
  }
  SequenceAnnotation s=new SequenceAnnotation(sequenceAnnotation.getIdentity(),location);
  if (componentURI != null)   s.setComponent(componentURI);
  if (!annotations.isEmpty())   s.setAnnotations(annotations);
  return s;
}","private static SequenceAnnotation parseSequenceAnnotationV1(SBOLDocument SBOLDoc,NestedDocument<QName> sequenceAnnotation,List<SBOLPair> precedePairs,URI parentURI,int sa_num){
  Integer start=null;
  Integer end=null;
  String strand=null;
  URI componentURI=null;
  URI identity=sequenceAnnotation.getIdentity();
  List<Annotation> annotations=new ArrayList<Annotation>();
  if (authority != null) {
    identity=URI.create(getParentURI(parentURI) + ""String_Node_Str"" + sa_num+ ""String_Node_Str"");
  }
  for (  NamedProperty<QName> namedProperty : sequenceAnnotation.getProperties()) {
    if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.bioStart)) {
      String temp=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      start=Integer.parseInt(temp);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.bioEnd)) {
      String temp2=((Literal<QName>)namedProperty.getValue()).getValue().toString();
      end=Integer.parseInt(temp2);
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.strand)) {
      strand=((Literal<QName>)namedProperty.getValue()).getValue().toString();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.subComponent)) {
      componentURI=parseDnaComponentV1(SBOLDoc,(NestedDocument<QName>)namedProperty.getValue()).getIdentity();
    }
 else     if (namedProperty.getName().equals(Sbol1Terms.SequenceAnnotations.precedes)) {
      URI left=sequenceAnnotation.getIdentity();
      URI right=URI.create(((Literal<QName>)namedProperty.getValue()).getValue().toString());
      SBOLPair pair=new SBOLPair(left,right);
      precedePairs.add(pair);
    }
 else {
      annotations.add(new Annotation(namedProperty));
    }
  }
  Location location=null;
  if (start != null && end != null) {
    URI range_identity=URI.create(getParentURI(identity) + ""String_Node_Str"");
    Range r=new Range(range_identity,start,end);
    if (strand != null) {
      if (strand.equals(""String_Node_Str"")) {
        r.setOrientation(Sbol2Terms.Orientation.inline);
      }
 else       if (strand.equals(""String_Node_Str"")) {
        r.setOrientation(Sbol2Terms.Orientation.reverseComplement);
      }
      location=r;
    }
  }
 else {
    URI dummyRange_id=URI.create(getParentURI(identity) + ""String_Node_Str"");
    int dummy_start=0;
    int dummy_end=0;
    Range dummyRange=new Range(dummyRange_id,dummy_start,dummy_end);
    location=dummyRange;
  }
  SequenceAnnotation s=new SequenceAnnotation(identity,location);
  if (componentURI != null)   s.setComponent(componentURI);
  if (!annotations.isEmpty())   s.setAnnotations(annotations);
  return s;
}",0.8672280953234187
12854,"public static SBOLDocument createDocument(TopLevel... contents){
  SBOLDocument document=new SBOLDocument();
  for (  TopLevel topLevel : contents) {
    if (topLevel instanceof Collection) {
      document.addCollection((Collection)topLevel);
    }
 else     if (topLevel instanceof ModuleDefinition) {
      document.addModuleDefinition((ModuleDefinition)topLevel);
    }
 else     if (topLevel instanceof Model) {
      document.addModel((Model)topLevel);
    }
 else     if (topLevel instanceof ComponentDefinition) {
      document.addComponentDefinition((ComponentDefinition)topLevel);
    }
 else     if (topLevel instanceof Sequence) {
      document.addSequence((Sequence)topLevel);
    }
 else     if (topLevel instanceof GenericTopLevel) {
      document.addGenericTopLevel((GenericTopLevel)topLevel);
      document.addNameSpaceBinding(URI.create(""String_Node_Str""),""String_Node_Str"");
    }
  }
  return document;
}","public static SBOLDocument createDocument(TopLevel... contents){
  SBOLDocument document=new SBOLDocument();
  document.addNameSpaceBinding(URI.create(""String_Node_Str""),""String_Node_Str"");
  for (  TopLevel topLevel : contents) {
    if (topLevel instanceof Collection) {
      document.addCollection((Collection)topLevel);
    }
 else     if (topLevel instanceof ModuleDefinition) {
      document.addModuleDefinition((ModuleDefinition)topLevel);
    }
 else     if (topLevel instanceof Model) {
      document.addModel((Model)topLevel);
    }
 else     if (topLevel instanceof ComponentDefinition) {
      document.addComponentDefinition((ComponentDefinition)topLevel);
    }
 else     if (topLevel instanceof Sequence) {
      document.addSequence((Sequence)topLevel);
    }
 else     if (topLevel instanceof GenericTopLevel) {
      document.addGenericTopLevel((GenericTopLevel)topLevel);
      document.addNameSpaceBinding(URI.create(""String_Node_Str""),""String_Node_Str"");
    }
  }
  return document;
}",0.2106350025813113
12855,"private static List<NestedDocument> getParticipations(List<Participation> participations){
  List<NestedDocument> nestedDoc=new ArrayList<NestedDocument>();
  for (  Participation p : participations) {
    List<NamedProperty<QName>> list=new ArrayList<NamedProperty<QName>>();
    list.add(NamedProperty(Sbol2Terms.Identified.identity,p.getIdentity()));
    if (p.getRoles() != null)     for (    URI r : p.getRoles())     list.add(NamedProperty(Sbol2Terms.Participation.role,r));
    if (p.getParticipant() != null)     list.add(NamedProperty(Sbol2Terms.Participation.hasParticipant,p.getParticipant()));
    nestedDoc.add(NestedDocument(Sbol2Terms.Participation.Participation,p.getIdentity(),NamedProperties(list)));
  }
  return nestedDoc;
}","private static List<NestedDocument> getParticipations(List<Participation> participations){
  List<NestedDocument> nestedDoc=new ArrayList<NestedDocument>();
  for (  Participation p : participations) {
    List<NamedProperty<QName>> list=new ArrayList<NamedProperty<QName>>();
    if (p.getRoles() != null)     for (    URI r : p.getRoles())     list.add(NamedProperty(Sbol2Terms.Participation.role,r));
    if (p.getParticipant() != null)     list.add(NamedProperty(Sbol2Terms.Participation.hasParticipant,p.getParticipant()));
    nestedDoc.add(NestedDocument(Sbol2Terms.Participation.Participation,p.getIdentity(),NamedProperties(list)));
  }
  return nestedDoc;
}",0.9454287739192062
12856,"private static void getCommonDocumentedData(List<NamedProperty<QName>> list,Documented d){
  getCommonIdentifiedData(list,d);
  if (d.getDisplayId() != null)   list.add(NamedProperty(Sbol2Terms.Documented.displayId,d.getDisplayId()));
  if (d.getName() != null)   list.add(NamedProperty(Sbol2Terms.Documented.name,d.getName()));
  if (d.getDescription() != null)   list.add(NamedProperty(Sbol2Terms.Documented.description,d.getDescription()));
}","private static void getCommonDocumentedData(List<NamedProperty<QName>> list,Documented d){
  getCommonIdentifiedData(list,d);
  if (d.getName() != null)   list.add(NamedProperty(Sbol2Terms.Documented.name,d.getName()));
  if (d.getDescription() != null)   list.add(NamedProperty(Sbol2Terms.Documented.description,d.getDescription()));
}",0.8604353393085787
12857,"private static void write(Writer stream,DocumentRoot<QName> document) throws Exception {
  XMLStreamWriter xmlWriter=new IndentingXMLStreamWriter(XMLOutputFactory.newInstance().createXMLStreamWriter(stream));
  RdfIo rdfIo=new RdfIo();
  rdfIo.createIoWriter(xmlWriter).write(document);
  xmlWriter.flush();
  xmlWriter.close();
}","/** 
 * Serializes a given SBOLDocument and outputs the data from the serialization to the given output stream
 * @param doc
 * @param out
 */
public static void write(SBOLDocument doc,OutputStream out){
  List<TopLevelDocument<QName>> topLevelDoc=new ArrayList<TopLevelDocument<QName>>();
  formatCollections(doc.getCollections(),topLevelDoc);
  formatModules(doc.getModules(),topLevelDoc);
  formatModels(doc.getModels(),topLevelDoc);
  formatComponents(doc.getComponents(),topLevelDoc);
  formatStructures(doc.getStructures(),topLevelDoc);
  try {
    writeRdf(new OutputStreamWriter(out),DocumentRoot(TopLevelDocuments(topLevelDoc)));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.0894941634241245
12858,"private static void getCommonIdentifiedData(List<NamedProperty<QName>> list,Identified t){
  if (t.getPersistentIdentity() != null)   list.add(NamedProperty(Sbol2Terms.Documented.persistentIdentity,t.getPersistentIdentity()));
  if (t.getVersion() != null)   list.add(NamedProperty(Sbol2Terms.Documented.version,t.getVersion()));
  if (t.getTimeStamp() != null)   list.add(NamedProperty(Sbol2Terms.Documented.timeStamp,t.getTimeStamp().toString()));
}","private static void getCommonIdentifiedData(List<NamedProperty<QName>> list,Identified t){
  if (t.getTimeStamp() != null)   list.add(NamedProperty(Sbol2Terms.Documented.timeStamp,t.getTimeStamp().toString()));
}",0.6395173453996983
12859,"/** 
 * Returns the list of structuralAnnotation instances owned by this instance. 
 * @return the list of structuralAnnotation instances owned by this instance.
 */
public List<Annotation> getAnnotations(){
  return (List<Annotation>)annotations.values();
}","/** 
 * Returns the list of structuralAnnotation instances owned by this instance. 
 * @return the list of structuralAnnotation instances owned by this instance.
 */
public List<Annotation> getAnnotations(){
  return new ArrayList<Annotation>(annotations.values());
}",0.918095238095238
12860,"/** 
 * Merge the two entities. The result should contain all the data in the two inputs. If the data is incompattible, raise an exception.
 * @param e1    the first entity
 * @param e2    the second entity
 * @return      a merge of the two
 */
public E merge(E e1,E e2);","@Override public E merge(E e1,E e2) throws MergerException {
  if (e1 == null)   return e2;
  if (e2 == null)   return e1;
  return delegate.merge(e1,e2);
}",0.1401869158878504
12861,"/** 
 * Resolve the ID or return null.
 * @param id    the identifier
 * @return      the resolution of the identifier, or null if it could not be resolved
 */
public E resolve(ID id);","/** 
 * Resolve the ID or return null.
 * @param id    the identifier
 * @return      the resolution of the identifier, or null if it could not be resolved
 */
public E resolve(ID id) throws MergerException ;",0.9387755102040816
12862,"/** 
 * Calls the appropriate visit function from the   {@link SBOLVisitor} class.
 */
public void accept(SBOLVisitor visitor);","/** 
 * Calls the appropriate visit function from the   {@link SBOLVisitor} class.
 * @param visitor the visitor to accept
 * @throws T if the visitor throws T
 */
public <T extends Throwable>void accept(SBOLVisitor<T> visitor) throws T ;",0.6958904109589041
12863,public void visit(SequenceAnnotation annotation);,public void visit(SequenceAnnotation annotation) throws T ;,0.9074074074074074
12864,"protected <A>A nullSafeIdentical(A a1,A a2,String fieldName){
  return nullSafeMerge(a1,a2,fieldName,new MergeIdentical<A>());
}","protected <A>A nullSafeIdentical(A a1,A a2,String fieldName) throws MergerException {
  return nullSafeMerge(a1,a2,fieldName,new MergeIdentical<A>());
}",0.9142857142857144
12865,"protected <A,C extends Collection<A>>C nullSafeCollectionMerge(C c1,C c2,String fieldName,C empty,Merger<A> merger){
  OUTER:   for (  A a1 : c1) {
    for (    A a2 : c2) {
      if (a1.equals(a2)) {
        empty.add(merger.merge(a1,a2));
        continue OUTER;
      }
    }
    empty.add(a1);
  }
  for (  A a2 : c2) {
    if (!c1.contains(a2)) {
      empty.add(a2);
    }
  }
  return empty;
}","protected <A,C extends Collection<A>>C nullSafeCollectionMerge(C c1,C c2,String fieldName,C empty,Merger<A> merger) throws MergerException {
  OUTER:   for (  A a1 : c1) {
    for (    A a2 : c2) {
      if (a1.equals(a2)) {
        empty.add(merger.merge(a1,a2));
        continue OUTER;
      }
    }
    empty.add(a1);
  }
  for (  A a2 : c2) {
    if (!c1.contains(a2)) {
      empty.add(a2);
    }
  }
  return empty;
}",0.970873786407767
12866,"protected <A>A nullSafeMerge(A a1,A a2,String fieldName,Merger<A> merger){
  if (a1 != null && a2 != null) {
    try {
      return merger.merge(a1,a2);
    }
 catch (    IllegalArgumentException iae) {
      throw new IllegalArgumentException(""String_Node_Str"" + fieldName,iae);
    }
  }
 else   if (a1 != null) {
    return a1;
  }
 else {
    return a2;
  }
}","protected <A>A nullSafeMerge(A a1,A a2,String fieldName,Merger<A> merger) throws MergerException {
  if (a1 != null && a2 != null) {
    try {
      return merger.merge(a1,a2);
    }
 catch (    IllegalArgumentException iae) {
      throw new IllegalArgumentException(""String_Node_Str"" + fieldName,iae);
    }
  }
 else   if (a1 != null) {
    return a1;
  }
 else {
    return a2;
  }
}",0.968
12867,"@Override public E resolve(ID id){
  E found=null;
  for (  Resolver<E,ID> r : resolvers) {
    E e=r.resolve(id);
    if (e != null) {
      if (stopSearching(id,e)) {
        return e;
      }
 else       if (found == null) {
        found=e;
      }
 else {
        found=getMerger().merge(found,e);
      }
    }
  }
  return found;
}","@Override public E resolve(ID id) throws MergerException {
  E found=null;
  for (  Resolver<E,ID> r : resolvers) {
    E e=r.resolve(id);
    if (e != null) {
      if (stopSearching(id,e)) {
        return e;
      }
 else       if (found == null) {
        found=e;
      }
 else {
        found=getMerger().merge(found,e);
      }
    }
  }
  return found;
}",0.9657142857142856
12868,"/** 
 * {@inheritDoc}
 */
@Override public void accept(SBOLVisitor visitor){
  visitor.visit(this);
}","/** 
 * {@inheritDoc}
 */
@Override public <T extends Throwable>void accept(SBOLVisitor<T> visitor) throws T {
  visitor.visit(this);
}",0.8559322033898306
12869,"@Override public Collection merge(Collection e1,Collection e2){
  CollectionImpl m=new CollectionImpl();
  m.setDescription(nullSafeIdentical(e1.getDescription(),e2.getDescription(),""String_Node_Str""));
  m.setDisplayId(nullSafeIdentical(e1.getDisplayId(),e2.getDisplayId(),""String_Node_Str""));
  m.setName(nullSafeIdentical(e1.getName(),e2.getName(),""String_Node_Str""));
  m.setURI(nullSafeIdentical(e1.getURI(),e2.getURI(),""String_Node_Str""));
  componentMerger=new MergeIdentical<DnaComponent>();
  java.util.Collection<DnaComponent> dc=nullSafeCollectionMerge(e1.getComponents(),e2.getComponents(),""String_Node_Str"",new ArrayList<DnaComponent>(),componentMerger);
  for (  DnaComponent c : dc) {
    m.addComponent(c);
  }
  return m;
}","@Override public Collection merge(Collection e1,Collection e2) throws MergerException {
  CollectionImpl m=new CollectionImpl();
  m.setDescription(nullSafeIdentical(e1.getDescription(),e2.getDescription(),""String_Node_Str""));
  m.setDisplayId(nullSafeIdentical(e1.getDisplayId(),e2.getDisplayId(),""String_Node_Str""));
  m.setName(nullSafeIdentical(e1.getName(),e2.getName(),""String_Node_Str""));
  m.setURI(nullSafeIdentical(e1.getURI(),e2.getURI(),""String_Node_Str""));
  java.util.Collection<DnaComponent> dc=nullSafeCollectionMerge(e1.getComponents(),e2.getComponents(),""String_Node_Str"",new ArrayList<DnaComponent>(),getComponentMerger());
  for (  DnaComponent c : dc) {
    m.addComponent(c);
  }
  return m;
}",0.9415807560137456
12870,"public CollectionMerger(Merger<DnaComponent> componentMerger){
  this.componentMerger=componentMerger;
}","public CollectionMerger(){
}",0.4242424242424242
12871,"public Merger<DnaComponent> getComponentMerger(){
  return componentMerger;
}",public abstract Merger<DnaComponent> getComponentMerger();,0.725925925925926
12872,"/** 
 * {@inheritDoc}
 */
@Override public void accept(SBOLVisitor visitor){
  visitor.visit(this);
}","/** 
 * {@inheritDoc}
 */
@Override public <T extends Throwable>void accept(SBOLVisitor<T> visitor) throws T {
  visitor.visit(this);
}",0.8559322033898306
12873,"public DnaComponentMerger(Merger<DnaSequence> dnaSequenceMerger,Merger<SequenceAnnotation> annotationMerger){
  this.dnaSequenceMerger=dnaSequenceMerger;
  this.annotationMerger=annotationMerger;
}","public DnaComponentMerger(){
}",0.2643171806167401
12874,"public Merger<DnaSequence> getDnaSequenceMerger(){
  return dnaSequenceMerger;
}",public abstract Merger<DnaSequence> getDnaSequenceMerger();,0.7194244604316546
12875,"public Merger<SequenceAnnotation> getAnnotationMerger(){
  return annotationMerger;
}",public abstract Merger<SequenceAnnotation> getAnnotationMerger();,0.7466666666666667
12876,"@Override public DnaComponent merge(DnaComponent e1,DnaComponent e2){
  DnaComponentImpl m=new DnaComponentImpl();
  m.setDescription(nullSafeIdentical(e1.getDescription(),e2.getDescription(),""String_Node_Str""));
  m.setDisplayId(nullSafeIdentical(e1.getDisplayId(),e2.getDisplayId(),""String_Node_Str""));
  m.setDnaSequence(nullSafeMerge(e1.getDnaSequence(),e2.getDnaSequence(),""String_Node_Str"",dnaSequenceMerger));
  m.setName(nullSafeIdentical(e1.getName(),e2.getName(),""String_Node_Str""));
  m.setURI(nullSafeIdentical(e1.getURI(),e2.getURI(),""String_Node_Str""));
  java.util.Collection<SequenceAnnotation> ac=nullSafeCollectionMerge(e1.getAnnotations(),e2.getAnnotations(),""String_Node_Str"",new ArrayList<SequenceAnnotation>(),annotationMerger);
  for (  SequenceAnnotation a : ac) {
    m.addAnnotation(a);
  }
  java.util.Collection<URI> tp=nullSafeCollectionMerge(e1.getTypes(),e2.getTypes(),""String_Node_Str"",new ArrayList<URI>(),identicalUri);
  for (  URI t : tp) {
    m.addType(t);
  }
  return m;
}","@Override public DnaComponent merge(DnaComponent e1,DnaComponent e2) throws MergerException {
  DnaComponentImpl m=new DnaComponentImpl();
  m.setDescription(nullSafeIdentical(e1.getDescription(),e2.getDescription(),""String_Node_Str""));
  m.setDisplayId(nullSafeIdentical(e1.getDisplayId(),e2.getDisplayId(),""String_Node_Str""));
  m.setDnaSequence(nullSafeMerge(e1.getDnaSequence(),e2.getDnaSequence(),""String_Node_Str"",getDnaSequenceMerger()));
  m.setName(nullSafeIdentical(e1.getName(),e2.getName(),""String_Node_Str""));
  m.setURI(nullSafeIdentical(e1.getURI(),e2.getURI(),""String_Node_Str""));
  java.util.Collection<SequenceAnnotation> ac=nullSafeCollectionMerge(e1.getAnnotations(),e2.getAnnotations(),""String_Node_Str"",new ArrayList<SequenceAnnotation>(),getAnnotationMerger());
  for (  SequenceAnnotation a : ac) {
    m.addAnnotation(a);
  }
  java.util.Collection<URI> tp=nullSafeCollectionMerge(e1.getTypes(),e2.getTypes(),""String_Node_Str"",new ArrayList<URI>(),identicalUri);
  for (  URI t : tp) {
    m.addType(t);
  }
  return m;
}",0.9815354713313896
12877,"/** 
 * {@inheritDoc}
 */
@Override public void accept(SBOLVisitor visitor){
  visitor.visit(this);
}","/** 
 * {@inheritDoc}
 */
@Override public <T extends Throwable>void accept(SBOLVisitor<T> visitor) throws T {
  visitor.visit(this);
}",0.8559322033898306
12878,"@Override public DnaSequence merge(DnaSequence e1,DnaSequence e2){
  DnaSequenceImpl m=new DnaSequenceImpl();
  m.setURI(nullSafeIdentical(e1.getURI(),e2.getURI(),""String_Node_Str""));
  m.setNucleotides(nullSafeIdentical(e1.getNucleotides(),e2.getNucleotides(),""String_Node_Str""));
  return m;
}","@Override public DnaSequence merge(DnaSequence e1,DnaSequence e2) throws MergerException {
  DnaSequenceImpl m=new DnaSequenceImpl();
  m.setURI(nullSafeIdentical(e1.getURI(),e2.getURI(),""String_Node_Str""));
  m.setNucleotides(nullSafeIdentical(e1.getNucleotides(),e2.getNucleotides(),""String_Node_Str""));
  return m;
}",0.9609120521172638
12879,"@Override public E merge(E e1,E e2){
  if (e1.equals(e2)) {
    return e1;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","@Override public E merge(E e1,E e2) throws MergerException {
  if (e1.equals(e2)) {
    return e1;
  }
 else {
    throw new MergerException(String.format(""String_Node_Str"",e1,e2));
  }
}",0.8284023668639053
12880,"public Iterator<Item> findByColor(String cat,Collection<String> features,CIELabColor color,double dist,int minPrice,int maxPrice){
  Vector<Iterator<Item>> iters=new Vector<Iterator<Item>>();
  Collection<ItemFinder> categories;
  if ((cat != ""String_Node_Str"") && (cat != null)) {
    categories=categoryMap.itemFinders(cat);
  }
 else {
    categories=categoryMap.values();
  }
  for (  ItemFinder f : categories) {
    iters.add(f.findItemsWithFeaturesAndColor(features,color,dist,minPrice,maxPrice));
  }
  return new CombinedIterator(iters);
}","public Iterator<Item> findByColor(String cat,Collection<String> features,CIELabColor color,double dist,int minPrice,int maxPrice){
  if (dist < 0) {
    color=null;
  }
  Vector<Iterator<Item>> iters=new Vector<Iterator<Item>>();
  Collection<ItemFinder> categories;
  if ((cat != ""String_Node_Str"") && (cat != null)) {
    categories=categoryMap.itemFinders(cat);
  }
 else {
    categories=categoryMap.values();
  }
  for (  ItemFinder f : categories) {
    iters.add(f.findItemsWithFeaturesAndColor(features,color,dist,minPrice,maxPrice));
  }
  return new CombinedIterator(iters);
}",0.9664902998236332
12881,"public Iterator<Item> findItemsWithFeatures(Collection<String> features,int minPrice,int maxPrice){
  if (features == null || features.size() == 0)   return items.iterator();
  features=new Vector<String>(features);
  int minSize=Integer.MAX_VALUE;
  ItemFinder bestFinder=this;
  String bestFeature=null;
  for (  String f : features) {
    Feature feature=Feature.getFeature(f);
    ItemFinder finder=featureIndex.get(feature);
    if ((finder != null) && (finder.size() < minSize)) {
      bestFinder=finder;
      minSize=bestFinder.size();
      bestFeature=f;
    }
  }
  if (bestFinder == this) {
    return new FeaturesFilterIterator(items.iterator(),features);
  }
  features.remove(bestFeature);
  return bestFinder.findItemsWithFeatures(features,minPrice,maxPrice);
}","public Iterator<Item> findItemsWithFeatures(Collection<String> features,int minPrice,int maxPrice){
  if (features == null || features.size() == 0)   return items.iterator();
  features=new Vector<String>(features);
  int minSize=Integer.MAX_VALUE;
  ItemFinder bestFinder=this;
  String bestFeature=null;
  for (  String f : features) {
    Feature feature=Feature.getFeature(f);
    ItemFinder finder=featureIndex.get(feature);
    if ((finder != null) && (finder.size() < minSize)) {
      bestFinder=finder;
      minSize=bestFinder.size();
      bestFeature=f;
    }
  }
  if (bestFinder == this) {
    Iterator<Item> iterator=items.iterator();
    if (minPrice > 0 || maxPrice < Integer.MAX_VALUE) {
      iterator=new CostFilterIterator(iterator,minPrice,maxPrice);
    }
    return new FeaturesFilterIterator(iterator,features);
  }
  features.remove(bestFeature);
  return bestFinder.findItemsWithFeatures(features,minPrice,maxPrice);
}",0.7254788160185722
12882,"public List<String> find(String category_name,List<String> features,byte red,byte green,byte blue,double colorDist,int cost_min,int cost_max,int page) throws TException {
  Vector<String> result=new Vector<String>(pageSize);
  int count=0;
  Iterator<Item> iter;
  if (colorDist >= 0) {
    iter=index.findByColor(category_name,features,CIELabColor.CIELabFromRGB(red,green,blue),colorDist,cost_min,cost_max);
  }
 else {
    iter=index.find(category_name,features,cost_min,cost_max);
  }
  while (iter.hasNext()) {
    Item item=iter.next();
    if (count >= page * pageSize) {
      result.add(item.id);
    }
    if (count >= (page + 1) * pageSize) {
      break;
    }
    count+=1;
  }
  return result;
}","public List<String> find(String category_name,List<String> features,byte red,byte green,byte blue,double colorDist,int cost_min,int cost_max,int page) throws TException {
  Vector<String> result=new Vector<String>(pageSize);
  int count=0;
  Iterator<Item> iter;
  if (colorDist > 0) {
    iter=index.findByColor(category_name,features,CIELabColor.CIELabFromRGB(red,green,blue),colorDist,cost_min,cost_max);
  }
 else {
    iter=index.find(category_name,features,cost_min,cost_max);
  }
  while (iter.hasNext()) {
    Item item=iter.next();
    if (count >= page * pageSize) {
      result.add(item.id);
    }
    if (count >= (page + 1) * pageSize) {
      break;
    }
    count+=1;
  }
  return result;
}",0.9992932862190812
12883,"public static void main(String[] args){
  Vector<Item> items=new Vector<Item>();
  for (int i=0; i < 10; i++) {
    Vector<String> f=new Vector<String>();
    f.add(""String_Node_Str"");
    if (i % 2 == 0)     f.add(""String_Node_Str"");
    if (i % 3 == 0)     items.add(new Item(""String_Node_Str"" + i,""String_Node_Str"",f,i,null,0));
    if (i % 3 == 1)     items.add(new Item(""String_Node_Str"" + i,""String_Node_Str"",f,i,null,0));
    if (i % 3 == 2)     items.add(new Item(""String_Node_Str"" + i,""String_Node_Str"",f,i,null,0));
  }
  HoboIndex idx=new HoboIndex(items);
  Vector<String> f=new Vector<String>();
  f.add(""String_Node_Str"");
  f.add(""String_Node_Str"");
  for (Iterator<Item> i=idx.find(""String_Node_Str"",f,0,Integer.MAX_VALUE); i.hasNext(); ) {
    Item item=(Item)i.next();
    System.out.println(item.id + ""String_Node_Str"" + item.category+ ""String_Node_Str""+ item.quality);
  }
}","public static void main(String[] args){
  Vector<Item> items=new Vector<Item>();
  for (int i=0; i < 10; i++) {
    Vector<String> f=new Vector<String>();
    f.add(""String_Node_Str"");
    if (i % 2 == 0)     f.add(""String_Node_Str"");
    if (i % 3 == 0)     items.add(new Item(""String_Node_Str"" + i,""String_Node_Str"",f,i,null,i));
    if (i % 3 == 1)     items.add(new Item(""String_Node_Str"" + i,""String_Node_Str"",f,i,null,i));
    if (i % 3 == 2)     items.add(new Item(""String_Node_Str"" + i,""String_Node_Str"",f,i,null,i));
  }
  HoboIndex idx=new HoboIndex(items);
  Vector<String> f=new Vector<String>();
  f.add(""String_Node_Str"");
  f.add(""String_Node_Str"");
  for (Iterator<Item> i=idx.find(""String_Node_Str"",f,0,Integer.MAX_VALUE); i.hasNext(); ) {
    Item item=(Item)i.next();
    System.out.println(item.id + ""String_Node_Str"" + item.category+ ""String_Node_Str""+ item.quality+ ""String_Node_Str""+ item.cost);
  }
}",0.9801980198019802
12884,"public Iterator<Item> findItemsWithFeatures(Collection<String> features,int minPrice,int maxPrice){
  if (features == null || features.size() == 0)   return items.iterator();
  Iterator<Item> iterator=items.iterator();
  if (minPrice > 0 && maxPrice < Integer.MAX_VALUE) {
    iterator=new CostFilterIterator(iterator,minPrice,maxPrice);
  }
  return new FeaturesFilterIterator(iterator,features);
}","public Iterator<Item> findItemsWithFeatures(Collection<String> features,int minPrice,int maxPrice){
  if (features == null || features.size() == 0)   return items.iterator();
  Iterator<Item> iterator=items.iterator();
  if (minPrice > 0 || maxPrice < Integer.MAX_VALUE) {
    iterator=new CostFilterIterator(iterator,minPrice,maxPrice);
  }
  return new FeaturesFilterIterator(iterator,features);
}",0.9949874686716792
12885,"public boolean predicate(Item item){
  return item.cost > min && item.cost <= max;
}","public boolean predicate(Item item){
  return item.cost >= min && item.cost <= max;
}",0.9940828402366864
12886,"public void handlePacket(byte[] bytes,int d){
  if (last != null && d != last_demod && Arrays.equals(last,bytes)) {
    dup_count++;
    if (last_demod == 0)     d0_count--;
 else     d6_count--;
    both_count++;
  }
 else {
    packet_count++;
    if (d == 0)     d0_count++;
 else     d6_count++;
    last_demod=d;
    last=Arrays.copyOf(bytes,bytes.length);
    if (h != null)     h.handlePacket(bytes);
  }
}","public void handlePacket(byte[] bytes,int d){
  if (last != null && d != last_demod && java.util.Arrays.equals(last,bytes)) {
    dup_count++;
    if (last_demod == 0)     d0_count--;
 else     d6_count--;
    both_count++;
  }
 else {
    packet_count++;
    if (d == 0)     d0_count++;
 else     d6_count++;
    last_demod=d;
    last=Arrays.copyOf(bytes,bytes.length);
    if (h != null)     h.handlePacket(bytes);
  }
}",0.9880382775119616
12887,"public static String[] copyOfRange(String[] src,int from,int to){
  String[] dest=new String[to - from];
  System.arraycopy(src,from,dest,0,to - from);
  return dest;
}","public static String[] copyOfRange(String[] src,int from,int to){
  String[] dest=new String[to - from];
  int len=to - from;
  if (len > src.length)   len=src.length - from;
  System.arraycopy(src,from,dest,0,len);
  return dest;
}",0.765
12888,"@Override public InputStream getInputStream() throws IOException {
  if (isClosed)   throw new IOException(""String_Node_Str"");
  if (outputstream != null && outputstream.getBuffer().length != 0) {
    return new BookInputStream(outputstream);
  }
  return new BookInputStream(book,binarymode);
}","@Override public BookInputStream getInputStream() throws IOException {
  if (isClosed)   throw new IOException(""String_Node_Str"");
  if (outputstream != null && outputstream.getBuffer().length != 0) {
    return new BookInputStream(outputstream);
  }
  return new BookInputStream(book,binarymode);
}",0.9932659932659932
12889,"/** 
 * Creates a return address from a ticket
 * @param inv the inventory containing the ticket
 * @return the return address
 */
@SuppressWarnings(""String_Node_Str"") public final static <T extends Address>T getAddress(Inventory inv){
  int slot;
  if ((slot=Ticket.getTicketslot(inv)) != -1)   return (T)new ReturnAddressBook(new Ticket(BookFile.getFrom(inv,slot,false,ByteCart.myPlugin.getConfig().getString(""String_Node_Str"")),Conf.NETWORK),Parameter.RETURN);
  return null;
}","/** 
 * Creates a return address from a ticket
 * @param inv the inventory containing the ticket
 * @return the return address
 */
@SuppressWarnings(""String_Node_Str"") public final static <T extends Address>T getAddress(Inventory inv){
  int slot;
  if ((slot=Ticket.getTicketslot(inv)) != -1)   return (T)new ReturnAddressBook(new Ticket(BookFile.getFrom(inv,slot,false,""String_Node_Str""),Conf.NETWORK),Parameter.RETURN);
  return null;
}",0.955386289445049
12890,"@EventHandler(ignoreCancelled=true) public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  Entity entity;
  Inventory inv;
  if (event.getPlayer().equals(Player) && ((entity=event.getRightClicked()) instanceof InventoryHolder)) {
    this.Execute.SetParam(inv=((InventoryHolder)entity).getInventory());
    this.Execute.run();
    event.setCancelled(true);
    if (isUpdater) {
      StorageMinecart v=(StorageMinecart)inv.getHolder();
      UpdaterCreateEvent e=new UpdaterCreateEvent(v.getEntityId(),v.getLocation());
      ByteCart.myPlugin.getServer().getPluginManager().callEvent(e);
    }
  }
  PlayerInteractEntityEvent.getHandlerList().unregister(this);
}","@EventHandler(ignoreCancelled=false) public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  Entity entity;
  Inventory inv;
  if (event.getPlayer().equals(Player) && ((entity=event.getRightClicked()) instanceof InventoryHolder)) {
    this.Execute.SetParam(inv=((InventoryHolder)entity).getInventory());
    this.Execute.run();
    event.setCancelled(true);
    if (isUpdater) {
      StorageMinecart v=(StorageMinecart)inv.getHolder();
      UpdaterCreateEvent e=new UpdaterCreateEvent(v.getEntityId(),v.getLocation());
      ByteCart.myPlugin.getServer().getPluginManager().callEvent(e);
    }
  }
  PlayerInteractEntityEvent.getHandlerList().unregister(this);
}",0.9948491537895512
12891,"public AbstractRouter(BlockFace from,org.bukkit.Location loc,boolean isOldVersion){
  super(loc);
  this.setFrom(from);
  this.addIO(from,loc.getBlock());
  this.IsOldVersion=isOldVersion;
}","public AbstractRouter(BlockFace from,org.bukkit.Location loc,boolean isOldVersion){
  super(loc);
  this.setFrom(from);
  this.IsOldVersion=isOldVersion;
  this.addIO(from,loc.getBlock());
}",0.8210526315789474
12892,"BC9001(org.bukkit.block.Block block,org.bukkit.entity.Vehicle vehicle){
  super(block,vehicle);
  this.netmask=8;
}","BC9001(org.bukkit.block.Block block,org.bukkit.entity.Vehicle vehicle){
  super(block,vehicle);
  this.netmask=ByteCartAPI.MAXSTATIONLOG;
}",0.8976377952755905
12893,"private final int getFreeSubnet(int netmask){
  boolean free;
  int start=getFirstStationNumber();
  int end=getLastStationNumber();
  int step=256 >> netmask;
  if (ByteCart.debug)   ByteCart.log.info(""String_Node_Str"" + start + ""String_Node_Str""+ end+ ""String_Node_Str""+ step+ ""String_Node_Str""+ this.getCounter().toString());
  for (int i=start; i < end; i+=step) {
    free=true;
    for (int j=i; j < i + step; j++) {
      free&=(this.getCounter().getCount(j) == 0);
    }
    if (free) {
      if (ByteCart.debug)       ByteCart.log.info(""String_Node_Str"" + i + ""String_Node_Str""+ free);
      return i;
    }
    if (ByteCart.debug)     ByteCart.log.info(""String_Node_Str"" + i + ""String_Node_Str""+ free);
  }
  LogUtil.sendError(this.getContent().getPlayer(),""String_Node_Str"" + this.getCenter().getLocation().toString() + ""String_Node_Str""+ ""String_Node_Str""+ step+ ""String_Node_Str""+ this.buildAddress(start));
  return -1;
}","private final int getFreeSubnet(int netmask){
  boolean free;
  int start=getFirstStationNumber();
  int end=getLastStationNumber();
  int step=ByteCartAPI.MAXSTATION >> netmask;
  if (ByteCart.debug)   ByteCart.log.info(""String_Node_Str"" + start + ""String_Node_Str""+ end+ ""String_Node_Str""+ step+ ""String_Node_Str""+ this.getCounter().toString());
  for (int i=start; i < end; i+=step) {
    free=true;
    for (int j=i; j < i + step; j++) {
      free&=(this.getCounter().getCount(j) == 0);
    }
    if (free) {
      if (ByteCart.debug)       ByteCart.log.info(""String_Node_Str"" + i + ""String_Node_Str""+ free);
      return i;
    }
    if (ByteCart.debug)     ByteCart.log.info(""String_Node_Str"" + i + ""String_Node_Str""+ free);
  }
  LogUtil.sendError(this.getContent().getPlayer(),""String_Node_Str"" + this.getCenter().getLocation().toString() + ""String_Node_Str""+ ""String_Node_Str""+ step+ ""String_Node_Str""+ this.buildAddress(start));
  return -1;
}",0.9867654843832716
12894,"@Override public void doAction(Side to){
  if (this.getNetmask() == 8) {
    if (((BC9001)this.getBcSign()).getStationName().equals(""String_Node_Str"")) {
      (new ComponentSign(this.getCenter())).setLine(2,""String_Node_Str"");
    }
    UpdaterPassStationEvent event=new UpdaterPassStationEvent(this,this.getSignAddress(),((BC9001)this.getBcSign()).getStationName());
    Bukkit.getServer().getPluginManager().callEvent(event);
  }
  if (this.getStart().empty() ^ this.getEnd().empty())   return;
  int start;
  if (to.Value() != Side.LEVER_ON.Value() && this.getNetmask() < 8) {
    if (this.isExactSubnet((start=this.getFirstStationNumber()),this.getNetmask())) {
      this.getSignAddress().setAddress(buildAddress(start));
      this.getSignAddress().finalizeAddress();
      ByteCart.myPlugin.getWandererManager().getFactory(""String_Node_Str"").updateTimestamp(this.getContent());
      this.leaveSubnet();
      this.save();
    }
    return;
  }
  int length=(256 >> this.getNetmask());
  if (!getSignAddress().isValid() || this.needUpdate()) {
    Address old=this.getSignAddress();
    if ((start=this.getFreeSubnet(getNetmask())) != -1) {
      String address=buildAddress(start);
      this.getSignAddress().setAddress(address);
      this.getSignAddress().finalizeAddress();
      Address reloadAddress=AddressFactory.getAddress(address);
      this.setSignAddress(reloadAddress);
      ByteCart.myPlugin.getWandererManager().getFactory(""String_Node_Str"").updateTimestamp(this.getContent());
      if (length > 1) {
        UpdaterSetSubnetEvent event=new UpdaterSetSubnetEvent(this,old,reloadAddress,length);
        Bukkit.getServer().getPluginManager().callEvent(event);
      }
 else {
        UpdaterSetStationEvent event=new UpdaterSetStationEvent(this,old,reloadAddress,((BC9001)this.getBcSign()).getStationName());
        Bukkit.getServer().getPluginManager().callEvent(event);
      }
      if (ByteCart.debug)       ByteCart.log.info(""String_Node_Str"" + address + ""String_Node_Str""+ this.getSignAddress().toString()+ ""String_Node_Str"");
    }
  }
  int stationfield=-1;
  if (getSignAddress().isValid())   stationfield=this.getSignAddress().getStation().getAmount();
  if (length != 1) {
    if (!this.isInSubnet(stationfield,this.getNetmask()))     leaveSubnet();
    if (stationfield != -1) {
      Stack<Integer> startstack=this.getStart();
      Stack<Integer> endstack=this.getEnd();
      int oldstart=getFirstStationNumber();
      int oldend=getLastStationNumber();
      startstack.push(stationfield);
      endstack.push(stationfield + length);
      UpdaterEnterSubnetEvent event=new UpdaterEnterSubnetEvent(this,getSignAddress(),length,AddressFactory.getAddress(buildAddress(oldstart)),oldend - oldstart);
      Bukkit.getServer().getPluginManager().callEvent(event);
    }
  }
 else   if (stationfield != -1)   this.getCounter().incrementCount(stationfield,64);
  save();
}","@Override public void doAction(Side to){
  if (this.getNetmask() == ByteCartAPI.MAXSTATIONLOG) {
    if (((BC9001)this.getBcSign()).getStationName().equals(""String_Node_Str"")) {
      (new ComponentSign(this.getCenter())).setLine(2,""String_Node_Str"");
    }
    UpdaterPassStationEvent event=new UpdaterPassStationEvent(this,this.getSignAddress(),((BC9001)this.getBcSign()).getStationName());
    Bukkit.getServer().getPluginManager().callEvent(event);
  }
  if (this.getStart().empty() ^ this.getEnd().empty())   return;
  int start;
  if (to.Value() != Side.LEVER_ON.Value() && this.getNetmask() < ByteCartAPI.MAXSTATIONLOG) {
    if (this.isExactSubnet((start=this.getFirstStationNumber()),this.getNetmask())) {
      this.getSignAddress().setAddress(buildAddress(start));
      this.getSignAddress().finalizeAddress();
      ByteCart.myPlugin.getWandererManager().getFactory(""String_Node_Str"").updateTimestamp(this.getContent());
      this.leaveSubnet();
      this.save();
    }
    return;
  }
  int length=(ByteCartAPI.MAXSTATION >> this.getNetmask());
  if (!getSignAddress().isValid() || this.needUpdate()) {
    Address old=this.getSignAddress();
    if ((start=this.getFreeSubnet(getNetmask())) != -1) {
      String address=buildAddress(start);
      this.getSignAddress().setAddress(address);
      this.getSignAddress().finalizeAddress();
      Address reloadAddress=AddressFactory.getAddress(address);
      this.setSignAddress(reloadAddress);
      ByteCart.myPlugin.getWandererManager().getFactory(""String_Node_Str"").updateTimestamp(this.getContent());
      if (length > 1) {
        UpdaterSetSubnetEvent event=new UpdaterSetSubnetEvent(this,old,reloadAddress,length);
        Bukkit.getServer().getPluginManager().callEvent(event);
      }
 else {
        UpdaterSetStationEvent event=new UpdaterSetStationEvent(this,old,reloadAddress,((BC9001)this.getBcSign()).getStationName());
        Bukkit.getServer().getPluginManager().callEvent(event);
      }
      if (ByteCart.debug)       ByteCart.log.info(""String_Node_Str"" + address + ""String_Node_Str""+ this.getSignAddress().toString()+ ""String_Node_Str"");
    }
  }
  int stationfield=-1;
  if (getSignAddress().isValid())   stationfield=this.getSignAddress().getStation().getAmount();
  if (length != 1) {
    if (!this.isInSubnet(stationfield,this.getNetmask()))     leaveSubnet();
    if (stationfield != -1) {
      Stack<Integer> startstack=this.getStart();
      Stack<Integer> endstack=this.getEnd();
      int oldstart=getFirstStationNumber();
      int oldend=getLastStationNumber();
      startstack.push(stationfield);
      endstack.push(stationfield + length);
      UpdaterEnterSubnetEvent event=new UpdaterEnterSubnetEvent(this,getSignAddress(),length,AddressFactory.getAddress(buildAddress(oldstart)),oldend - oldstart);
      Bukkit.getServer().getPluginManager().callEvent(event);
    }
  }
 else   if (stationfield != -1)   this.getCounter().incrementCount(stationfield,64);
  save();
}",0.9869158878504672
12895,"private final boolean isInSubnet(int address,int netmask){
  return (address >= this.getFirstStationNumber() && (address | (255 >> netmask)) < this.getLastStationNumber());
}","private final boolean isInSubnet(int address,int netmask){
  return (address >= this.getFirstStationNumber() && (address | ((ByteCartAPI.MAXSTATION - 1) >> netmask)) < this.getLastStationNumber());
}",0.9168900804289544
12896,"@Override public void doAction(Side to){
  Address address=this.getSignAddress();
  int mask=this.getNetmask();
  if (mask < 8) {
    Stack<Integer> end=this.getEnd();
    if (to.equals(Side.LEVER_ON) && (end.isEmpty() || mask > end.peek())) {
      end.push(mask);
      if (ByteCart.debug)       ByteCart.log.info(""String_Node_Str"" + mask + ""String_Node_Str"");
    }
 else     if (to.equals(Side.LEVER_OFF) && !end.isEmpty()) {
      if (ByteCart.debug)       ByteCart.log.info(""String_Node_Str"" + end.peek() + ""String_Node_Str"");
      end.pop();
    }
  }
  save();
  if (getContent().getCurrent() != getContent().getRegion())   return;
  if (address.isValid()) {
    if (this.getContent().isFullreset()) {
      if (this.getNetmask() == 8) {
        UpdaterClearStationEvent event=new UpdaterClearStationEvent(this,address,((BC9001)this.getBcSign()).getStationName());
        Bukkit.getServer().getPluginManager().callEvent(event);
      }
 else {
        UpdaterClearSubnetEvent event=new UpdaterClearSubnetEvent(this,address,256 >> this.getNetmask());
        Bukkit.getServer().getPluginManager().callEvent(event);
      }
      address.remove();
      if (ByteCart.debug)       ByteCart.log.info(""String_Node_Str"");
    }
  }
 else {
    UpdaterSignInvalidateEvent event=new UpdaterSignInvalidateEvent(this);
    Bukkit.getServer().getPluginManager().callEvent(event);
    address.remove();
    if (ByteCart.debug)     ByteCart.log.info(""String_Node_Str"");
  }
}","@Override public void doAction(Side to){
  Address address=this.getSignAddress();
  int mask=this.getNetmask();
  if (mask < 8) {
    Stack<Integer> end=this.getEnd();
    if (to.equals(Side.LEVER_ON) && (end.isEmpty() || mask > end.peek())) {
      end.push(mask);
      if (ByteCart.debug)       ByteCart.log.info(""String_Node_Str"" + mask + ""String_Node_Str"");
    }
 else     if (to.equals(Side.LEVER_OFF) && !end.isEmpty()) {
      if (ByteCart.debug)       ByteCart.log.info(""String_Node_Str"" + end.peek() + ""String_Node_Str"");
      end.pop();
    }
  }
  save();
  if (getContent().getCurrent() != getContent().getRegion())   return;
  if (address.isValid()) {
    if (this.getContent().isFullreset()) {
      if (this.getNetmask() == 8) {
        UpdaterClearStationEvent event=new UpdaterClearStationEvent(this,address,((BC9001)this.getBcSign()).getStationName());
        Bukkit.getServer().getPluginManager().callEvent(event);
      }
 else {
        UpdaterClearSubnetEvent event=new UpdaterClearSubnetEvent(this,address,ByteCartAPI.MAXSTATION >> this.getNetmask());
        Bukkit.getServer().getPluginManager().callEvent(event);
      }
      address.remove();
      if (ByteCart.debug)       ByteCart.log.info(""String_Node_Str"");
    }
  }
 else {
    UpdaterSignInvalidateEvent event=new UpdaterSignInvalidateEvent(this);
    Bukkit.getServer().getPluginManager().callEvent(event);
    address.remove();
    if (ByteCart.debug)     ByteCart.log.info(""String_Node_Str"");
  }
}",0.9915626054674316
12897,"/** 
 * Get an IC with a code declared 2 blocks behind the clicked sign
 * @param block the sign clicked
 * @param player the player who clicked the sign
 * @return a Clickable IC, or null
 */
static final public Clickable getBackwardClickedIC(Block block,Player player){
  Material type=block.getState().getType();
  if (type.equals(Material.SIGN_POST) || type.equals(Material.WALL_SIGN)) {
    BlockFace f=((org.bukkit.material.Sign)block.getState().getData()).getFacing().getOppositeFace();
    f=MathUtil.straightUp(f);
    final Block relative=block.getRelative(f,2);
    if (AbstractIC.checkEligibility(relative)) {
      return ClickedSignFactory.getClickedIC(block,((Sign)relative.getState()).getLine(1),player);
    }
  }
  return null;
}","/** 
 * Get an IC with a code declared 2 blocks behind the clicked sign
 * @param block the sign clicked
 * @param player the player who clicked the sign
 * @return a Clickable IC, or null
 */
static final public Clickable getBackwardClickedIC(Block block,Player player){
  Material type=block.getState().getType();
  if (type.equals(Material.SIGN_POST) || type.equals(Material.WALL_SIGN)) {
    BlockFace f=((org.bukkit.material.Sign)block.getState().getData()).getFacing().getOppositeFace();
    f=MathUtil.straightUp(f);
    final Block relative=block.getRelative(f,2);
    if (AbstractIC.checkEligibility(relative)) {
      return ClickedSignFactory.getClickedIC(relative,((Sign)relative.getState()).getLine(1),player);
    }
  }
  return null;
}",0.991315965263861
12898,"BC8010(Block block,org.bukkit.entity.Vehicle vehicle) throws ClassNotFoundException, IOException {
  super(block,vehicle);
  this.IsTrackNumberProvider=true;
  From=this.getCardinal().getOppositeFace();
  destination=AddressFactory.getAddress(this.getInventory());
  Sign=AddressFactory.getAddress(this.getBlock(),3);
  center=this.getBlock().getRelative(this.getCardinal(),6).getRelative(MathUtil.clockwise(this.getCardinal()));
  BlockState blockstate;
  if ((blockstate=center.getRelative(BlockFace.UP,5).getState()) instanceof InventoryHolder) {
    Inventory ChestInventory=((InventoryHolder)blockstate).getInventory();
    RoutingTable=RoutingTableFactory.getRoutingTable(ChestInventory);
  }
 else {
    RoutingTable=null;
  }
}","BC8010(Block block,org.bukkit.entity.Vehicle vehicle) throws ClassNotFoundException, IOException {
  super(block,vehicle);
  this.IsTrackNumberProvider=true;
  From=this.getCardinal().getOppositeFace();
  destination=AddressFactory.getAddress(this.getInventory());
  if (destination == null) {
    destination=AddressFactory.getDefaultTicket(this.getInventory());
  }
  Sign=AddressFactory.getAddress(this.getBlock(),3);
  center=this.getBlock().getRelative(this.getCardinal(),6).getRelative(MathUtil.clockwise(this.getCardinal()));
  BlockState blockstate;
  if ((blockstate=center.getRelative(BlockFace.UP,5).getState()) instanceof InventoryHolder) {
    Inventory ChestInventory=((InventoryHolder)blockstate).getInventory();
    RoutingTable=RoutingTableFactory.getRoutingTable(ChestInventory);
  }
 else {
    RoutingTable=null;
  }
}",0.9345200254291164
12899,"/** 
 * Static method to check the format of an address A resolvable name will return true This method does not check if the address fields are in a valid range
 * @param s the string containing the address to check
 * @return true if the address is in the valid format or a resolvable name
 */
static public boolean isResolvableAddressOrName(String s){
  if (!(s.matches(""String_Node_Str"")) || !isResolvableName(s)) {
    return false;
  }
  return true;
}","/** 
 * Static method to check the format of an address A resolvable name will return true This method does not check if the address fields are in a valid range
 * @param s the string containing the address to check
 * @return true if the address is in the valid format or a resolvable name
 */
static public boolean isResolvableAddressOrName(String s){
  if ((s.matches(""String_Node_Str"")) || isResolvableName(s)) {
    return true;
  }
  return false;
}",0.9824561403508772
12900,"@Override protected SimpleCollisionAvoider.Side route(){
  SignPreSubnetEvent event;
  AddressRouted dst=this.getDestinationAddress();
  int ttl;
  if (this.isAddressMatching() && (ttl=dst.getTTL()) != 0) {
    dst.updateTTL(ttl - 1);
    event=new SignPreSubnetEvent(this,Side.RIGHT);
  }
 else   event=new SignPreSubnetEvent(this,Side.LEFT);
  Bukkit.getServer().getPluginManager().callEvent(event);
  return event.getSide();
}","@Override protected SimpleCollisionAvoider.Side route(){
  SignPreSubnetEvent event;
  AddressRouted dst=this.getDestinationAddress();
  int ttl;
  if (this.isAddressMatching() && (ttl=dst.getTTL()) != 0) {
    dst.updateTTL(ttl - 1);
    dst.finalizeAddress();
    event=new SignPreSubnetEvent(this,Side.RIGHT);
  }
 else   event=new SignPreSubnetEvent(this,Side.LEFT);
  Bukkit.getServer().getPluginManager().callEvent(event);
  return event.getSide();
}",0.9694915254237289
12901,"private final boolean isExactSubnet(int address,int netmask){
  return (address == this.getCurrentSubnet() && (address | (255 >> netmask)) == (this.getNext() - 1));
}","private final boolean isExactSubnet(int address,int netmask){
  return (address == this.getFirstStationNumber() && (address | (255 >> netmask)) == (this.getLastStationNumber() - 1));
}",0.8971428571428571
12902,"private final boolean isInSubnet(int address,int netmask){
  return (address >= this.getCurrentSubnet() && (address | (255 >> netmask)) < this.getNext());
}","private final boolean isInSubnet(int address,int netmask){
  return (address >= this.getFirstStationNumber() && (address | (255 >> netmask)) < this.getLastStationNumber());
}",0.8909090909090909
12903,"public final void leaveSubnet(){
  if (!this.getStart().empty() && !this.getEnd().empty()) {
    this.fillSubnet();
    Stack<Integer> startstack=this.getStart();
    Stack<Integer> endstack=this.getEnd();
    int start=startstack.pop();
    int end=endstack.pop();
    int newstart=startstack.peek();
    int newend=endstack.peek();
    UpdaterLeaveSubnetEvent event=new UpdaterLeaveSubnetEvent(this,AddressFactory.getAddress(buildAddress(start)),end - start,AddressFactory.getAddress(buildAddress(newstart)),newend - newstart);
    Bukkit.getServer().getPluginManager().callEvent(event);
  }
}","public final void leaveSubnet(){
  if (!this.getStart().empty() && !this.getEnd().empty()) {
    this.fillSubnet();
    Stack<Integer> startstack=this.getStart();
    Stack<Integer> endstack=this.getEnd();
    int start=startstack.pop();
    int end=endstack.pop();
    int newstart=getFirstStationNumber();
    int newend=getLastStationNumber();
    UpdaterLeaveSubnetEvent event=new UpdaterLeaveSubnetEvent(this,AddressFactory.getAddress(buildAddress(start)),end - start,AddressFactory.getAddress(buildAddress(newstart)),newend - newstart);
    Bukkit.getServer().getPluginManager().callEvent(event);
  }
}",0.942643391521197
12904,"private final int getFreeSubnet(int netmask){
  boolean free;
  int start=(this.getStart().empty() ? 0 : this.getStart().peek());
  int end=(this.getEnd().empty()) ? 256 : this.getEnd().peek();
  int step=256 >> netmask;
  if (ByteCart.debug)   ByteCart.log.info(""String_Node_Str"" + start + ""String_Node_Str""+ end+ ""String_Node_Str""+ step+ ""String_Node_Str""+ this.getCounter().toString());
  for (int i=start; i < end; i+=step) {
    free=true;
    for (int j=i; j < i + step; j++) {
      free&=(this.getCounter().getCount(j) == 0);
    }
    if (free) {
      if (ByteCart.debug)       ByteCart.log.info(""String_Node_Str"" + i + ""String_Node_Str""+ free);
      return i;
    }
    if (ByteCart.debug)     ByteCart.log.info(""String_Node_Str"" + i + ""String_Node_Str""+ free);
  }
  LogUtil.sendError(this.getContent().getPlayer(),""String_Node_Str"" + this.getCenter().getLocation().toString() + ""String_Node_Str""+ ""String_Node_Str""+ step+ ""String_Node_Str""+ this.buildAddress(start));
  return -1;
}","private final int getFreeSubnet(int netmask){
  boolean free;
  int start=getFirstStationNumber();
  int end=getLastStationNumber();
  int step=256 >> netmask;
  if (ByteCart.debug)   ByteCart.log.info(""String_Node_Str"" + start + ""String_Node_Str""+ end+ ""String_Node_Str""+ step+ ""String_Node_Str""+ this.getCounter().toString());
  for (int i=start; i < end; i+=step) {
    free=true;
    for (int j=i; j < i + step; j++) {
      free&=(this.getCounter().getCount(j) == 0);
    }
    if (free) {
      if (ByteCart.debug)       ByteCart.log.info(""String_Node_Str"" + i + ""String_Node_Str""+ free);
      return i;
    }
    if (ByteCart.debug)     ByteCart.log.info(""String_Node_Str"" + i + ""String_Node_Str""+ free);
  }
  LogUtil.sendError(this.getContent().getPlayer(),""String_Node_Str"" + this.getCenter().getLocation().toString() + ""String_Node_Str""+ ""String_Node_Str""+ step+ ""String_Node_Str""+ this.buildAddress(start));
  return -1;
}",0.9269808389435524
12905,"private final void fillSubnet(){
  int start=this.getCurrentSubnet();
  int end=this.getNext();
  if (ByteCart.debug)   ByteCart.log.info(""String_Node_Str"" + start + ""String_Node_Str""+ end);
  for (int i=start; i < end; i++)   this.getCounter().incrementCount(i,64);
}","private final void fillSubnet(){
  int start=this.getFirstStationNumber();
  int end=this.getLastStationNumber();
  if (ByteCart.debug)   ByteCart.log.info(""String_Node_Str"" + start + ""String_Node_Str""+ end);
  for (int i=start; i < end; i++)   this.getCounter().incrementCount(i,64);
}",0.9061371841155236
12906,"@Override public void doAction(Side to){
  if (this.getNetmask() == 8) {
    UpdaterPassStationEvent event=new UpdaterPassStationEvent(this,this.getSignAddress());
    Bukkit.getServer().getPluginManager().callEvent(event);
  }
  if (this.getStart().empty() ^ this.getEnd().empty())   return;
  int start;
  if (to.Value() != Side.RIGHT.Value() && this.getNetmask() < 8) {
    if (this.isExactSubnet((start=this.getCurrentSubnet()),this.getNetmask())) {
      if (!this.getSignAddress().isValid()) {
        this.getSignAddress().setAddress(buildAddress(start));
        this.getSignAddress().finalizeAddress();
        this.getContent().updateTimestamp();
      }
      this.leaveSubnet();
      this.save();
    }
    return;
  }
  int length=(256 >> this.getNetmask());
  if (!getSignAddress().isValid() || this.needUpdate()) {
    Address old=this.getSignAddress();
    if ((start=this.getFreeSubnet(getNetmask())) != -1) {
      String address=buildAddress(start);
      this.getSignAddress().setAddress(address);
      this.getSignAddress().finalizeAddress();
      Address reloadAddress=AddressFactory.getAddress(address);
      this.setSignAddress(reloadAddress);
      this.getContent().updateTimestamp();
      if (length > 1) {
        UpdaterSetSubnetEvent event=new UpdaterSetSubnetEvent(this,old,reloadAddress,length);
        Bukkit.getServer().getPluginManager().callEvent(event);
      }
 else {
        UpdaterSetStationEvent event=new UpdaterSetStationEvent(this,old,reloadAddress);
        Bukkit.getServer().getPluginManager().callEvent(event);
      }
      if (ByteCart.debug)       ByteCart.log.info(""String_Node_Str"" + address + ""String_Node_Str""+ this.getSignAddress().toString()+ ""String_Node_Str"");
    }
  }
  int stationfield=-1;
  if (getSignAddress().isValid())   stationfield=this.getSignAddress().getStation().getAmount();
  if (length != 1) {
    if (!this.isInSubnet(stationfield,this.getNetmask()))     leaveSubnet();
    if (stationfield != -1) {
      Stack<Integer> startstack=this.getStart();
      Stack<Integer> endstack=this.getEnd();
      Integer oldstart=startstack.peek();
      Integer oldend=endstack.peek();
      startstack.push(stationfield);
      endstack.push(stationfield + length);
      UpdaterEnterSubnetEvent event=new UpdaterEnterSubnetEvent(this,getSignAddress(),length,AddressFactory.getAddress(buildAddress(oldstart)),oldend - oldstart);
      Bukkit.getServer().getPluginManager().callEvent(event);
    }
  }
 else   if (stationfield != -1)   this.getCounter().incrementCount(stationfield,64);
  save();
}","@Override public void doAction(Side to){
  if (this.getNetmask() == 8) {
    UpdaterPassStationEvent event=new UpdaterPassStationEvent(this,this.getSignAddress());
    Bukkit.getServer().getPluginManager().callEvent(event);
  }
  if (this.getStart().empty() ^ this.getEnd().empty())   return;
  int start;
  if (to.Value() != Side.RIGHT.Value() && this.getNetmask() < 8) {
    if (this.isExactSubnet((start=this.getFirstStationNumber()),this.getNetmask())) {
      if (!this.getSignAddress().isValid()) {
        this.getSignAddress().setAddress(buildAddress(start));
        this.getSignAddress().finalizeAddress();
        this.getContent().updateTimestamp();
      }
      this.leaveSubnet();
      this.save();
    }
    return;
  }
  int length=(256 >> this.getNetmask());
  if (!getSignAddress().isValid() || this.needUpdate()) {
    Address old=this.getSignAddress();
    if ((start=this.getFreeSubnet(getNetmask())) != -1) {
      String address=buildAddress(start);
      this.getSignAddress().setAddress(address);
      this.getSignAddress().finalizeAddress();
      Address reloadAddress=AddressFactory.getAddress(address);
      this.setSignAddress(reloadAddress);
      this.getContent().updateTimestamp();
      if (length > 1) {
        UpdaterSetSubnetEvent event=new UpdaterSetSubnetEvent(this,old,reloadAddress,length);
        Bukkit.getServer().getPluginManager().callEvent(event);
      }
 else {
        UpdaterSetStationEvent event=new UpdaterSetStationEvent(this,old,reloadAddress);
        Bukkit.getServer().getPluginManager().callEvent(event);
      }
      if (ByteCart.debug)       ByteCart.log.info(""String_Node_Str"" + address + ""String_Node_Str""+ this.getSignAddress().toString()+ ""String_Node_Str"");
    }
  }
  int stationfield=-1;
  if (getSignAddress().isValid())   stationfield=this.getSignAddress().getStation().getAmount();
  if (length != 1) {
    if (!this.isInSubnet(stationfield,this.getNetmask()))     leaveSubnet();
    if (stationfield != -1) {
      Stack<Integer> startstack=this.getStart();
      Stack<Integer> endstack=this.getEnd();
      int oldstart=getFirstStationNumber();
      int oldend=getLastStationNumber();
      startstack.push(stationfield);
      endstack.push(stationfield + length);
      UpdaterEnterSubnetEvent event=new UpdaterEnterSubnetEvent(this,getSignAddress(),length,AddressFactory.getAddress(buildAddress(oldstart)),oldend - oldstart);
      Bukkit.getServer().getPluginManager().callEvent(event);
    }
  }
 else   if (stationfield != -1)   this.getCounter().incrementCount(stationfield,64);
  save();
}",0.9732142857142856
12907,"@Override public Side giveSimpleDirection(){
  if (this.getNetmask() < 8 && (!(this.getStart().empty() ^ this.getEnd().empty())) && !this.isExactSubnet(this.getCurrentSubnet(),this.getNetmask()))   return Side.RIGHT;
  return Side.LEFT;
}","@Override public Side giveSimpleDirection(){
  if (this.getNetmask() < 8 && (!(this.getStart().empty() ^ this.getEnd().empty())) && !this.isExactSubnet(this.getFirstStationNumber(),this.getNetmask()))   return Side.RIGHT;
  return Side.LEFT;
}",0.9397089397089398
12908,"@Override public void doAction(Side to){
  Address address=this.getSignAddress();
  if (address.isValid() && (address.getRegion().getAmount() != getContent().getRegion() || address.getTrack().getAmount() == 0))   return;
  if (address.isValid() && this.getContent().isFullreset()) {
    if (this.getNetmask() == 8) {
      UpdaterClearStationEvent event=new UpdaterClearStationEvent(this,address);
      Bukkit.getServer().getPluginManager().callEvent(event);
    }
 else {
      UpdaterClearSubnetEvent event=new UpdaterClearSubnetEvent(this,address,256 >> this.getNetmask());
      Bukkit.getServer().getPluginManager().callEvent(event);
    }
  }
 else {
    UpdaterSignInvalidateEvent event=new UpdaterSignInvalidateEvent(this);
    Bukkit.getServer().getPluginManager().callEvent(event);
    if (!this.getContent().isFullreset())     return;
  }
  address.remove();
  if (ByteCart.debug)   ByteCart.log.info(""String_Node_Str"");
  int mask=this.getNetmask();
  if (mask < 8) {
    Stack<Integer> end=this.getEnd();
    if (to.equals(Side.RIGHT) && (end.isEmpty() || mask > end.peek())) {
      end.push(mask);
    }
 else     if (to.equals(Side.LEFT) && !end.isEmpty()) {
      end.pop();
    }
  }
  save();
}","@Override public void doAction(Side to){
  Address address=this.getSignAddress();
  int mask=this.getNetmask();
  if (mask < 8) {
    Stack<Integer> end=this.getEnd();
    if (to.equals(Side.RIGHT) && (end.isEmpty() || mask > end.peek())) {
      end.push(mask);
      if (ByteCart.debug)       ByteCart.log.info(""String_Node_Str"" + mask + ""String_Node_Str"");
    }
 else     if (to.equals(Side.LEFT) && !end.isEmpty()) {
      if (ByteCart.debug)       ByteCart.log.info(""String_Node_Str"" + end.peek() + ""String_Node_Str"");
      end.pop();
    }
  }
  save();
  if (address.isValid() && (address.getRegion().getAmount() != getContent().getRegion() || address.getTrack().getAmount() == 0))   return;
  if (address.isValid() && this.getContent().isFullreset()) {
    if (this.getNetmask() == 8) {
      UpdaterClearStationEvent event=new UpdaterClearStationEvent(this,address);
      Bukkit.getServer().getPluginManager().callEvent(event);
    }
 else {
      UpdaterClearSubnetEvent event=new UpdaterClearSubnetEvent(this,address,256 >> this.getNetmask());
      Bukkit.getServer().getPluginManager().callEvent(event);
    }
  }
 else {
    UpdaterSignInvalidateEvent event=new UpdaterSignInvalidateEvent(this);
    Bukkit.getServer().getPluginManager().callEvent(event);
    if (!this.getContent().isFullreset())     return;
  }
  address.remove();
  if (ByteCart.debug)   ByteCart.log.info(""String_Node_Str"");
}",0.2754946727549467
12909,"@Override protected void initChannel(Channel ch){
  ch.pipeline().addLast(new LoggingHandler(),new ConnectionStateHandler(),HandshakeHandler.produceLoginHandshake(),new LoginServerCodec(),new MessageDemuxDecoder());
}","@Override protected void initChannel(Channel ch){
  ch.pipeline().addLast(new LoggingHandler(),new ConnectionStateHandler(),HandshakeHandler.produceLoginHandshake(encrypted),new LoginServerCodec(),new MessageDemuxDecoder());
}",0.979683972911964
12910,"@Override public Channel getServerChannel(ServerBootstrap bootstrap) throws InterruptedException {
  bootstrap.childAttr(ClientBean.HANDLE_KEY,null);
  bootstrap.childHandler(new LoginShardChannelInitializer());
  return bootstrap.bind(8112).sync().channel();
}","@Override public Channel getServerChannel(ServerBootstrap bootstrap) throws InterruptedException {
  bootstrap.childAttr(ClientBean.HANDLE_KEY,null);
  bootstrap.childHandler(new LoginShardChannelInitializer(EncryptionOptions.Enable));
  return bootstrap.bind(8112).sync().channel();
}",0.956043956043956
12911,"/** 
 * Executed when a client wants to log in.
 * @param action 
 */
@Event.Handler public void onAccountLogin(P004_AccountLogin action){
  LOGGER.debug(""String_Node_Str"");
  Channel channel=action.getChannel();
  String email=action.getEmail();
  String password=new String(action.getPassword(),CHARSET_UTF16);
  String characterName=action.getCharacterName();
  LoginModel model=new LoginModel(email,characterName);
  if (!model.isValid(password)) {
    StreamTerminatorView.send(channel,model.getErrorCode());
    LOGGER.debug(""String_Node_Str"");
    return;
  }
  LOGGER.info(""String_Node_Str"",email);
  ClientBean client=new ClientBean(channel,action.getLoginCount(),model.getAccount(),model.getChara());
  ClientBean.set(channel,clientHandleRegistry.register(client));
  LoginView.sendLoginInfo(channel,model.getAccount());
}","/** 
 * Executed when a client wants to log in.
 * @param action 
 */
@Event.Handler public void onAccountLogin(P004_AccountLogin action){
  LOGGER.debug(""String_Node_Str"");
  Channel channel=action.getChannel();
  ClientBean.setLoginCount(channel,action.getLoginCount());
  String email=action.getEmail();
  String password=new String(action.getPassword(),CHARSET_UTF16);
  String characterName=action.getCharacterName();
  if (email == null || characterName == null) {
    return;
  }
  LoginModel model=new LoginModel(email,characterName);
  if (!model.isValid(password)) {
    StreamTerminatorView.send(channel,model.getErrorCode());
    LOGGER.debug(""String_Node_Str"");
    return;
  }
  LOGGER.info(""String_Node_Str"",email);
  ClientBean client=new ClientBean(channel,model.getAccount(),model.getChara());
  ClientBean.set(channel,clientHandleRegistry.register(client));
  LoginView.sendLoginInfo(channel,model.getAccount());
}",0.7694050991501417
12912,"/** 
 * Event handler.
 * @param event 
 */
@Event.Handler public void onNewClient(NetworkClientConnectedEvent event){
  LOGGER.debug(""String_Node_Str"");
  event.getChannel().attr(GameAppContextKey.KEY).set(context);
  event.getChannel().attr(GameAppContextKey.IS_SET).set(true);
}","/** 
 * Event handler.
 * @param event 
 */
@Event.Handler public void onNewClient(NetworkClientConnectedEvent event){
  LOGGER.debug(""String_Node_Str"");
  event.getChannel().attr(GameAppContextKey.KEY).set(context);
  event.getChannel().attr(GameAppContextKey.IS_SET).set(true);
  event.getChannel().attr(ClientBean.LOGIN_COUNT).set(0);
}",0.9064516129032258
12913,"public ClientBean(Channel channel,long loginCount,Account acc,Character chara){
  this.channel=channel;
  this.loginCount=loginCount;
  this.account=acc;
  this.character=chara;
}","public ClientBean(Channel channel,Account acc,Character chara){
  this.channel=channel;
  this.account=acc;
  this.character=chara;
}",0.8525641025641025
12914,"public long getLoginCount(){
  return loginCount;
}","public long getLoginCount(){
  return channel.attr(ClientBean.LOGIN_COUNT).get();
}",0.6716417910447762
12915,"public void setLoginCount(long loginCount){
  this.loginCount=loginCount;
}","public static void setLoginCount(Channel channel,long loginCount){
  channel.attr(ClientBean.LOGIN_COUNT).set((int)loginCount);
}",0.6078431372549019
12916,"public static void sendAccountGuiInfo(Channel channel){
  LOGGER.debug(""String_Node_Str"");
  P022_AccountGuiInfo accountGuiSettings=new P022_AccountGuiInfo();
  accountGuiSettings.init(channel);
  accountGuiSettings.setLoginCount(ClientBean.get(channel).getLoginCount());
  channel.write(accountGuiSettings);
  sendFriendInfo(channel,ErrorCode.None);
}","public static void sendAccountGuiInfo(Channel channel){
  LOGGER.debug(""String_Node_Str"");
  P022_AccountGuiInfo accountGuiSettings=new P022_AccountGuiInfo();
  accountGuiSettings.init(channel);
  accountGuiSettings.setLoginCount(ClientBean.get(channel).getLoginCount());
  accountGuiSettings.setSettings(new byte[]{});
  channel.writeAndFlush(accountGuiSettings);
  sendFriendInfo(channel,ErrorCode.None);
}",0.8947368421052632
12917,"public static void sendFriendInfo(Channel channel,ErrorCode errorNumber){
  LOGGER.debug(""String_Node_Str"");
  P020_FriendsListEnd friendListEnd=new P020_FriendsListEnd();
  friendListEnd.init(channel);
  friendListEnd.setLoginCount(ClientBean.get(channel).getLoginCount());
  friendListEnd.setUnknown1(1);
  channel.write(friendListEnd);
  LOGGER.debug(""String_Node_Str"");
  P017_AccountPermissions accountPermissions=new P017_AccountPermissions();
  accountPermissions.init(channel);
  accountPermissions.setLoginCount(ClientBean.get(channel).getLoginCount());
  accountPermissions.setTerritory(2);
  accountPermissions.setTerritoryChanges(4);
  accountPermissions.setUnknown1(new byte[]{0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00});
  accountPermissions.setUnknown2(new byte[]{-0x80,0x3F,0x02,0x00,0x03,0x00,0x08,0x00});
  accountPermissions.setUnknown3(new byte[]{0x37,0x4B,0x09,-0x45,-0x3E,-0x0A,0x74,0x43,-0x56,-0x55,0x35,0x4D,-0x12,-0x49,-0x51,0x08});
  accountPermissions.setUnknown4(new byte[]{0x55,-0x4A,0x77,0x59,0x0C,0x0C,0x15,0x46,-0x53,-0x56,0x33,0x43,0x4A,-0x6F,0x23,0x6A});
  accountPermissions.setChangeAccountSettings(8);
  accountPermissions.setAccountFeatures(new byte[]{0x01,0x00,0x06,0x00,0x57,0x00,0x01,0x00});
  accountPermissions.setEulaAccepted((byte)23);
  accountPermissions.setUnknown5(0);
  channel.write(accountPermissions);
  LOGGER.debug(""String_Node_Str"");
  StreamTerminatorView.send(channel,errorNumber);
}","public static void sendFriendInfo(Channel channel,ErrorCode errorNumber){
  LOGGER.debug(""String_Node_Str"");
  P020_FriendsListEnd friendListEnd=new P020_FriendsListEnd();
  friendListEnd.init(channel);
  friendListEnd.setLoginCount(ClientBean.get(channel).getLoginCount());
  friendListEnd.setUnknown1(1);
  channel.writeAndFlush(friendListEnd);
  LOGGER.debug(""String_Node_Str"");
  P017_AccountPermissions accountPermissions=new P017_AccountPermissions();
  accountPermissions.init(channel);
  accountPermissions.setLoginCount(ClientBean.get(channel).getLoginCount());
  accountPermissions.setTerritory(2);
  accountPermissions.setTerritoryChanges(4);
  accountPermissions.setUnknown1(new byte[]{0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00});
  accountPermissions.setUnknown2(new byte[]{-0x80,0x3F,0x02,0x00,0x03,0x00,0x08,0x00});
  accountPermissions.setUnknown3(new byte[]{0x37,0x4B,0x09,-0x45,-0x3E,-0x0A,0x74,0x43,-0x56,-0x55,0x35,0x4D,-0x12,-0x49,-0x51,0x08});
  accountPermissions.setUnknown4(new byte[]{0x55,-0x4A,0x77,0x59,0x0C,0x0C,0x15,0x46,-0x53,-0x56,0x33,0x43,0x4A,-0x6F,0x23,0x6A});
  accountPermissions.setChangeAccountSettings(8);
  accountPermissions.setAccountFeatures(new byte[]{0x01,0x00,0x06,0x00,0x57,0x00,0x01,0x00});
  accountPermissions.setEulaAccepted((byte)23);
  accountPermissions.setUnknown5(0);
  channel.writeAndFlush(accountPermissions);
  LOGGER.debug(""String_Node_Str"");
  StreamTerminatorView.send(channel,errorNumber);
}",0.9944713199723566
12918,"public static void sendLoginInfo(Channel channel,Account account){
  LOGGER.debug(""String_Node_Str"");
  for (  Character character : account.getCharacterCollection()) {
    P007_CharacterInfo characterInfo=new P007_CharacterInfo();
    characterInfo.init(channel);
    characterInfo.setLoginCount(ClientBean.get(channel).getLoginCount());
    characterInfo.setUnknown1(new byte[16]);
    characterInfo.setUnknown2(0);
    characterInfo.setCharacterName(character.getName());
    ByteBuffer buffer=ByteBuffer.allocate(100).order(ByteOrder.LITTLE_ENDIAN);
    buffer.putShort((short)6);
    buffer.putShort((short)character.getLastOutpost().getGameID());
    buffer.put(new byte[]{0x33,0x36,0x31,0x30});
    buffer.put((byte)((character.getSkin().byteValue() << 5) | (character.getHeight().byteValue() << 1) | character.getSex().byteValue()));
    buffer.put((byte)((character.getFace().byteValue() << 7) | (character.getHaircolor().byteValue() << 2) | (character.getSkin().byteValue() >> 3)));
    buffer.put((byte)((character.getPrimaryProfession().getId().byteValue() << 4) | (character.getFace().byteValue() >> 1)));
    buffer.put((byte)((character.getCampaign().byteValue() << 6) | character.getHairstyle().byteValue()));
    buffer.put(new byte[16]);
    byte level=character.getLevel().getLevel().byteValue();
    buffer.put((byte)((level << 4) | character.getCampaign()));
    buffer.put(new byte[]{-1,-0x23,-0x23,0,-0x23,-0x23,-0x23,-0x23});
    byte[] a=new byte[buffer.position()];
    buffer.position(0);
    buffer.get(a);
    characterInfo.setCharacterInfo(a);
    channel.write(characterInfo);
  }
  sendAccountGuiInfo(channel);
}","public static void sendLoginInfo(Channel channel,Account account){
  LOGGER.debug(""String_Node_Str"");
  for (  Character character : account.getCharacterCollection()) {
    P007_CharacterInfo characterInfo=new P007_CharacterInfo();
    characterInfo.init(channel);
    characterInfo.setLoginCount(ClientBean.get(channel).getLoginCount());
    characterInfo.setUnknown1(new byte[16]);
    characterInfo.setUnknown2(0);
    characterInfo.setCharacterName(character.getName());
    ByteBuffer buffer=ByteBuffer.allocate(100).order(ByteOrder.LITTLE_ENDIAN);
    buffer.putShort((short)6);
    buffer.putShort((short)character.getLastOutpost().getGameID());
    buffer.put(new byte[]{0x33,0x36,0x31,0x30});
    buffer.put((byte)((character.getSkin().byteValue() << 5) | (character.getHeight().byteValue() << 1) | character.getSex().byteValue()));
    buffer.put((byte)((character.getFace().byteValue() << 7) | (character.getHaircolor().byteValue() << 2) | (character.getSkin().byteValue() >> 3)));
    buffer.put((byte)((character.getPrimaryProfession().getId().byteValue() << 4) | (character.getFace().byteValue() >> 1)));
    buffer.put((byte)((character.getCampaign().byteValue() << 6) | character.getHairstyle().byteValue()));
    buffer.put(new byte[16]);
    byte level=0;
    buffer.put((byte)((level << 4) | character.getCampaign()));
    buffer.put(new byte[]{-1,-0x23,-0x23,0,-0x23,-0x23,-0x23,-0x23});
    byte[] a=new byte[buffer.position()];
    buffer.position(0);
    buffer.get(a);
    characterInfo.setCharacterInfo(a);
    channel.writeAndFlush(characterInfo);
  }
  sendAccountGuiInfo(channel);
}",0.984019668100799
12919,"/** 
 * This method is used to refer the client (session) to a game server. Note that the UUIDs of the internal client and server are only given to the client as their hashCode()
 * @param channel
 * @param address                 Of the map shard's server socket.
 * @param serverUid
 * @param clientUid
 * @param gameMapId 
 */
public static void referToGameServer(Channel channel,InetSocketAddress address,UUID serverUid,UUID clientUid,int gameMapId){
  P009_ReferToGameServer referToGameServer=new P009_ReferToGameServer();
  referToGameServer.init(channel);
  referToGameServer.setLoginCount(ClientBean.get(channel).getLoginCount());
  referToGameServer.setSecurityKey1(serverUid.hashCode());
  referToGameServer.setGameMapID(gameMapId);
  ByteBuffer buf=ByteBuffer.allocate(24);
  buf.order(ByteOrder.LITTLE_ENDIAN);
  buf.putShort((short)2);
  buf.order(ByteOrder.BIG_ENDIAN);
  buf.putShort((short)address.getPort());
  buf.order(ByteOrder.LITTLE_ENDIAN);
  buf.put(address.getAddress().getAddress());
  referToGameServer.setServerConnectionInfo(buf.array());
  referToGameServer.setSecurityKey2(clientUid.hashCode());
  channel.write(referToGameServer);
}","/** 
 * This method is used to refer the client (session) to a game server. Note that the UUIDs of the internal client and server are only given to the client as their hashCode()
 * @param channel
 * @param address                 Of the map shard's server socket.
 * @param serverUid
 * @param clientUid
 * @param gameMapId 
 */
public static void referToGameServer(Channel channel,InetSocketAddress address,UUID serverUid,UUID clientUid,int gameMapId){
  P009_ReferToGameServer referToGameServer=new P009_ReferToGameServer();
  referToGameServer.init(channel);
  referToGameServer.setLoginCount(ClientBean.get(channel).getLoginCount());
  referToGameServer.setSecurityKey1(serverUid.hashCode());
  referToGameServer.setGameMapID(gameMapId);
  ByteBuffer buf=ByteBuffer.allocate(24);
  buf.order(ByteOrder.LITTLE_ENDIAN);
  buf.putShort((short)2);
  buf.order(ByteOrder.BIG_ENDIAN);
  buf.putShort((short)address.getPort());
  buf.order(ByteOrder.LITTLE_ENDIAN);
  buf.put(address.getAddress().getAddress());
  referToGameServer.setServerConnectionInfo(buf.array());
  referToGameServer.setSecurityKey2(clientUid.hashCode());
  channel.writeAndFlush(referToGameServer);
}",0.9965753424657534
12920,"/** 
 * Static computer user stuff...
 * @param channel 
 */
public static void computerInfoReply(Channel channel){
  LOGGER.debug(""String_Node_Str"");
  P001_ComputerInfoReply computerInfoReply=new P001_ComputerInfoReply();
  computerInfoReply.init(channel);
  computerInfoReply.setUnknown1(1905605949);
  computerInfoReply.setLoginCount(ClientBean.get(channel).getLoginCount());
  computerInfoReply.setUnknown2(0);
  computerInfoReply.setUnknown3(1);
  channel.write(computerInfoReply);
}","/** 
 * Static computer user stuff...
 * @param channel 
 */
public static void computerInfoReply(Channel channel){
  LOGGER.debug(""String_Node_Str"");
  P001_ComputerInfoReply computerInfoReply=new P001_ComputerInfoReply();
  computerInfoReply.init(channel);
  computerInfoReply.setUnknown1(1905605949);
  computerInfoReply.setLoginCount(ClientBean.getPerformedActionsCount(channel));
  computerInfoReply.setUnknown2(0);
  computerInfoReply.setUnknown3(1);
  channel.writeAndFlush(computerInfoReply);
}",0.9505549949545912
12921,"public static void send(Channel channel,ErrorCode errorCode){
  P003_StreamTerminator streamTerminator=new P003_StreamTerminator();
  streamTerminator.init(channel);
  streamTerminator.setLoginCount(ClientBean.get(channel).getLoginCount());
  streamTerminator.setErrorCode(errorCode.get());
  if (errorCode != ErrorCode.None) {
    LOGGER.debug(String.format(""String_Node_Str"",channel.remoteAddress().toString(),errorCode.message()));
  }
  channel.write(streamTerminator);
}","public static void send(Channel channel,ErrorCode errorCode){
  P003_StreamTerminator streamTerminator=new P003_StreamTerminator();
  streamTerminator.init(channel);
  streamTerminator.setLoginCount(ClientBean.getPerformedActionsCount(channel));
  streamTerminator.setErrorCode(errorCode.get());
  if (errorCode != ErrorCode.None) {
    LOGGER.debug(String.format(""String_Node_Str"",channel.remoteAddress().toString(),errorCode.message()));
  }
  channel.writeAndFlush(streamTerminator);
}",0.9491173416407062
12922,"@Override protected void initChannel(Channel ch){
  Collection<Integer> outBlackList=new ArrayList<>();
  outBlackList.add(0);
  ch.pipeline().addLast(new ConnectionStateHandler(),HandshakeHandler.produceGameHandshake(),new GameServerCodec(),new MessageDemuxDecoder(),new NettyGWLoggingHandler(BlackList,new ArrayList<Integer>(),outBlackList));
}","@Override protected void initChannel(Channel ch){
  Collection<Integer> outBlackList=new ArrayList<>();
  outBlackList.add(0);
  ch.pipeline().addLast(new LoggingHandler(),new ConnectionStateHandler(),HandshakeHandler.produceGameHandshake(encrypted),new GameServerCodec(),new MessageDemuxDecoder(),new NettyGWLoggingHandler(BlackList,new ArrayList<Integer>(),outBlackList));
}",0.9584487534626038
12923,"@Override public Channel getServerChannel(ServerBootstrap bootstrap) throws InterruptedException {
  bootstrap.childAttr(ClientBean.HANDLE_KEY,null);
  bootstrap.childHandler(new MapShardChannelInitializer());
  return bootstrap.bind(9112).sync().channel();
}","@Override public Channel getServerChannel(ServerBootstrap bootstrap) throws InterruptedException {
  bootstrap.childAttr(ClientBean.HANDLE_KEY,null);
  bootstrap.childHandler(new MapShardChannelInitializer(EncryptionOptions.Enable));
  return bootstrap.bind(9112).sync().channel();
}",0.955719557195572
12924,"@Override public boolean initGameApp(Handle<GameAppContext> thisContext,Handle<GameAppContext> parentContext,java.util.Map<String,String> additionalParams){
  if (parentContext == null || additionalParams.isEmpty()) {
    return false;
  }
  Map mapEntity=MapJpaController.get().findMap(Integer.parseInt(additionalParams.get(""String_Node_Str"")));
  boolean isPvP=Boolean.parseBoolean(additionalParams.get(""String_Node_Str""));
  int instanceNum=Integer.parseInt(additionalParams.get(""String_Node_Str""));
  DistrictRegion region=DistrictRegion.valueOf(additionalParams.get(""String_Node_Str""));
  DistrictLanguage language=DistrictLanguage.valueOf(additionalParams.get(""String_Node_Str""));
  if (mapEntity == null) {
    return false;
  }
  WorldBean world=new WorldBean(mapEntity,instanceNum,region,language,isPvP);
  EventAggregator eventAgg=thisContext.get().getEventAggregator();
  HandleRegistry<ClientBean> clientRegistry=new HandleRegistryNotificationDecorator<>(eventAgg);
  EntityManager entityManager=new EntityManager();
  thisContext.get().getEventAggregator().register(new ClientConnect(thisContext,parentContext,clientRegistry,world,entityManager)).register(new ClientDisconnect(thisContext,parentContext,entityManager)).register(new ShutDown(thisContext,parentContext)).register(new LatencyAndSynchonization(clientRegistry)).register(new CharacterCreation()).register(new Chat(eventAgg)).register(new InstanceLoad(world,entityManager)).register(new MoveRotateClick(eventAgg)).register(new AgentVisibilitySystem(eventAgg,entityManager)).register(new ChatSystem(eventAgg,clientRegistry)).register(new CommandSystem(eventAgg,entityManager,clientRegistry)).register(new MovementSystem(eventAgg,entityManager,clientRegistry)).register(new SchedulingSystem(eventAgg)).register(new SpawningSystem(eventAgg,clientRegistry));
  return true;
}","@Override public boolean initGameApp(Handle<GameAppContext> thisContext,Handle<GameAppContext> parentContext,java.util.Map<String,String> additionalParams){
  if (parentContext == null || additionalParams.isEmpty()) {
    return false;
  }
  Map mapEntity=MapJpaController.get().findMap(Integer.parseInt(additionalParams.get(""String_Node_Str"")));
  boolean isPvP=Boolean.parseBoolean(additionalParams.get(""String_Node_Str""));
  int instanceNum=Integer.parseInt(additionalParams.get(""String_Node_Str""));
  DistrictRegion region=DistrictRegion.valueOf(additionalParams.get(""String_Node_Str""));
  DistrictLanguage language=DistrictLanguage.valueOf(additionalParams.get(""String_Node_Str""));
  if (mapEntity == null) {
    return false;
  }
  WorldBean world=new WorldBean(mapEntity,instanceNum,region,language,isPvP);
  EventAggregator eventAgg=thisContext.get().getEventAggregator();
  HandleRegistry<ClientBean> clientRegistry=new HandleRegistryNotificationDecorator<>(eventAgg);
  EntityManager entityManager=new EntityManager();
  thisContext.get().getEventAggregator().register(new ClientConnect(thisContext,parentContext,clientRegistry,world)).register(new ClientDisconnect(thisContext,parentContext,entityManager)).register(new ShutDown(thisContext,parentContext)).register(new LatencyAndSynchonization(clientRegistry)).register(new CharacterCreation()).register(new Chat(eventAgg)).register(new InstanceLoad(world,entityManager)).register(new MoveRotateClick(eventAgg)).register(new AgentVisibilitySystem(eventAgg,entityManager)).register(new ChatSystem(eventAgg,clientRegistry)).register(new CommandSystem(eventAgg,entityManager,clientRegistry)).register(new MovementSystem(eventAgg,entityManager,clientRegistry)).register(new SchedulingSystem(eventAgg)).register(new SpawningSystem(eventAgg,clientRegistry));
  return true;
}",0.9961915125136016
12925,"/** 
 * Handles movement events. This only concerns entities that just started moving or changed direction.
 * @param startMove
 */
@EventHandler public void onStartMoving(StartMovingEvent startMove){
  Entity et=startMove.getThisEntity();
  int agentID=et.get(AgentIdentifiers.class).agentID;
  GWVector pos=et.get(Position.class).position;
  GWVector dir=startMove.getDirection();
  et.get(Direction.class).direction=dir;
  Movement move=et.get(Movement.class);
  move.moveType=startMove.getType();
  move.moveState=MovementState.Moving;
  GWVector futurePos=pos.add(dir.mul(0.001F * heartBeatInterval));
  for (  Session session : lookupTable.getAllSessions()) {
    MovementView.sendChangeDirection(session,agentID,dir,move.moveType);
    MovementView.sendUpdateMovement(session,agentID,futurePos,move.moveType);
  }
}","/** 
 * Handles movement events. This only concerns entities that just started moving or changed direction.
 * @param startMove
 */
@EventHandler public void onStartMoving(StartMovingEvent startMove){
  Entity et=startMove.getThisEntity();
  int agentID=et.get(AgentIdentifiers.class).agentID;
  GWVector pos=et.get(Position.class).position;
  GWVector dir=startMove.getDirection();
  et.get(Direction.class).direction=dir.getUnit();
  Movement move=et.get(Movement.class);
  move.moveType=startMove.getType();
  move.moveState=MovementState.Moving;
  GWVector futurePos=pos.add(dir.mul(0.001F * heartBeatInterval));
  for (  Session session : lookupTable.getAllSessions()) {
    MovementView.sendChangeDirection(session,agentID,dir,move.moveType);
    MovementView.sendUpdateMovement(session,agentID,futurePos,move.moveType);
  }
}",0.9939540507859734
12926,"/** 
 * Event handler. Rotate event, this siganls that an entity changed its direction while not moving.
 * @param rot
 */
@EventHandler public void onRotate(RotateEvent rot){
  Entity et=rot.getThisEntity();
  int agentID=et.get(AgentIdentifiers.class).agentID;
  Direction dir=et.get(Direction.class);
  dir.direction=rot.getNewDirection();
  float rotation=dir.direction.toRotation();
  for (  Session session : lookupTable.getAllSessions()) {
    MovementView.sendRotateAgent(session,agentID,rotation);
  }
}","/** 
 * Event handler. Rotate event, this siganls that an entity changed its direction while not moving.
 * @param rot
 */
@EventHandler public void onRotate(RotateEvent rot){
  Entity et=rot.getThisEntity();
  int agentID=et.get(AgentIdentifiers.class).agentID;
  Direction dir=et.get(Direction.class);
  dir.direction=rot.getNewDirection().getUnit();
  float rotation=dir.direction.toRotation();
  for (  Session session : lookupTable.getAllSessions()) {
    MovementView.sendRotateAgent(session,agentID,rotation);
  }
}",0.9903288201160542
12927,"/** 
 * This is invoked periodically. (Or never, depending on the interval)
 * @param timeDelta
 */
@Override protected void update(int timeDelta){
  Collection<Entity> entities=entityManager.getEntitiesWith(AgentIdentifiers.class,Position.class,Direction.class,Movement.class);
  for (  Entity entity : entities) {
    if (entity.get(Movement.class).moveState == MovementState.NotMoving) {
      continue;
    }
    int agentID=entity.get(AgentIdentifiers.class).agentID;
    GWVector pos=entity.get(Position.class).position;
    GWVector dir=entity.get(Direction.class).direction;
    Movement move=entity.get(Movement.class);
    float timeDiff=0.001F * timeDelta;
    GWVector newDir=dir.mul(move.speed * timeDiff);
    GWVector futurePos=pos.add(newDir);
    entity.get(Position.class).position=futurePos;
    for (    Session session : lookupTable.getAllSessions()) {
      MovementView.sendUpdateMovement(session,agentID,futurePos,move.moveType);
    }
  }
}","/** 
 * This is invoked periodically. (Or never, depending on the interval)
 * @param timeDelta
 */
@Override protected void update(int timeDelta){
  Collection<Entity> entities=entityManager.getEntitiesWith(AgentIdentifiers.class,Position.class,Direction.class,Movement.class);
  for (  Entity entity : entities) {
    if (entity.get(Movement.class).moveState == MovementState.NotMoving) {
      continue;
    }
    int agentID=entity.get(AgentIdentifiers.class).agentID;
    GWVector pos=entity.get(Position.class).position;
    GWVector dir=entity.get(Direction.class).direction.getUnit();
    Movement move=entity.get(Movement.class);
    float timeDiff=0.001F * timeDelta;
    GWVector newDir=dir.mul(move.speed * timeDiff);
    GWVector futurePos=pos.add(newDir);
    entity.get(Position.class).position=futurePos;
    for (    Session session : lookupTable.getAllSessions()) {
      MovementView.sendUpdateMovement(session,agentID,futurePos,move.moveType);
    }
  }
}",0.9948453608247424
12928,"/** 
 * Helper.
 * @return 
 */
private GameAppFactory produceMapShard(){
  GameAppFactory mapshard=new GenericGameAppFactory(""String_Node_Str"",""String_Node_Str"",250,false,new HashMap<String,String>());
  Map<String,String> dummy=new HashMap<>();
  mapshard.addShardlet(new com.gamerevision.gwlpr.mapshard.controllers.StartUp(),dbParams).addShardlet(new com.gamerevision.gwlpr.mapshard.controllers.Handshake(),dummy).addShardlet(new CharacterCreation(),dummy).addShardlet(new InstanceLoad(),dummy).addShardlet(new com.gamerevision.gwlpr.mapshard.controllers.StaticReply(),dummy);
  return mapshard;
}","/** 
 * Helper.
 * @return 
 */
private GameAppFactory produceMapShard(){
  GameAppFactory mapshard=new GenericGameAppFactory(""String_Node_Str"",""String_Node_Str"",250,false,new HashMap<String,String>());
  Map<String,String> dummy=new HashMap<>();
  mapshard.addShardlet(new com.gamerevision.gwlpr.mapshard.controllers.StartUp(),dbParams).addShardlet(new com.gamerevision.gwlpr.mapshard.controllers.Handshake(),dummy).addShardlet(new HeartBeat(),dummy).addShardlet(new CharacterCreation(),dummy).addShardlet(new InstanceLoad(),dummy).addShardlet(new com.gamerevision.gwlpr.mapshard.controllers.StaticReply(),dummy);
  return mapshard;
}",0.97165991902834
12929,"/** 
 * Executed when a client wants to log in.
 * @param action 
 */
@EventHandler public void onAccountLogin(P004_AccountLoginAction action){
  LOGGER.debug(""String_Node_Str"");
  Session session=action.getSession();
  SessionAttachment attach=(SessionAttachment)session.getAttachment();
  attach.setLoginCount(action.getLoginCount());
  String email=new String(action.getEmail());
  String password=new String(action.getPassword(),Charset.forName(""String_Node_Str""));
  String characterName=new String(action.getCharacterName());
  CheckLoginInfo checkInfo=new CheckLoginInfo(db,email);
  if (!(checkInfo.isValid(password) || true)) {
    StreamTerminatorView.create(session,checkInfo.getErrorCode());
    LOGGER.debug(""String_Node_Str"");
    return;
  }
  LOGGER.info(""String_Node_Str"",email);
  attach.setAccountId(DBAccount.getByEMail(db,email).getId());
  attach.setCharacterId(DBCharacter.getCharacter(db,characterName).getId());
  loginView.sendLoginInfo(session,attach.getAccountId());
}","/** 
 * Executed when a client wants to log in.
 * @param action 
 */
@EventHandler public void onAccountLogin(P004_AccountLoginAction action){
  LOGGER.debug(""String_Node_Str"");
  Session session=action.getSession();
  SessionAttachment attach=(SessionAttachment)session.getAttachment();
  attach.setLoginCount(action.getLoginCount());
  String email=new String(action.getEmail());
  String password=new String(action.getPassword(),Charset.forName(""String_Node_Str""));
  String characterName=new String(action.getCharacterName());
  CheckLoginInfo checkInfo=new CheckLoginInfo(db,email,characterName);
  if (!checkInfo.isValid(password)) {
    StreamTerminatorView.create(session,checkInfo.getErrorCode());
    LOGGER.debug(""String_Node_Str"");
    return;
  }
  LOGGER.info(""String_Node_Str"",email);
  attach.setAccountId(DBAccount.getByEMail(db,email).getId());
  attach.setCharacterId(DBCharacter.getCharacter(db,characterName).getId());
  loginView.sendLoginInfo(session,attach.getAccountId());
}",0.9879759519038076
12930,"public boolean isValid(String password){
  if (account == null) {
    errorCode=227;
    return false;
  }
  if (password.startsWith(account.getPassword())) {
    return true;
  }
  errorCode=227;
  return false;
}","/** 
 * Returns boolean whether the login information is valid or not. TODO: Extend it (better validation, banned, ...)
 */
public boolean isValid(String password){
  if (account == null) {
    errorCode=227;
    return false;
  }
  if (false && !password.startsWith(account.getPassword())) {
    errorCode=227;
    return false;
  }
  if (chara == null) {
    errorCode=227;
    return false;
  }
  return true;
}",0.6050955414012739
12931,"public CheckLoginInfo(DatabaseConnectionProvider connectionProvider,String eMail){
  this.account=DBAccount.getByEMail(connectionProvider,eMail);
}","/** 
 * Constructor.
 */
public CheckLoginInfo(DatabaseConnectionProvider connectionProvider,String eMail,String charName){
  this.account=DBAccount.getByEMail(connectionProvider,eMail);
  this.chara=DBCharacter.getCharacter(connectionProvider,charName);
}",0.7295285359801489
12932,"/** 
 * Event handler. Handshake step: This is the actual interaction with the client.
 * @param action 
 */
@EventHandler public void onClientSeed(P16896_ClientSeedAction action){
  LOGGER.debug(""String_Node_Str"");
  Session session=action.getSession();
  SessionAttachment attach=((SessionAttachment)session.getAttachment());
  HandshakeView.serverSeed(session);
  HandshakeView.instanceHead(session);
  if (mapData.getMapID() == 0) {
    LOGGER.debug(""String_Node_Str"");
    CharacterCreationView.charCreateHead(session);
    return;
  }
  LoadCharacter loader=new LoadCharacter(db,attach.getCharacterId(),mapData.getSpawn());
  Entity player=loader.createPlayerEntityFor(entityManager);
  attach.setEntity(player);
  attach.setCharacterName(player.get(Name.class));
  attach.setAgentID(player.get(AgentID.class));
  attach.setLocalID(player.get(LocalID.class));
  HandshakeView.charName(session,attach.getCharacterName().name);
  HandshakeView.districtInfo(session,attach.getLocalID().localID,mapData.getMapID());
}","/** 
 * Event handler. Handshake step: This is the actual interaction with the client.
 * @param action 
 */
@EventHandler public void onClientSeed(P16896_ClientSeedAction action){
  LOGGER.debug(""String_Node_Str"");
  Session session=action.getSession();
  SessionAttachment attach=((SessionAttachment)session.getAttachment());
  HandshakeView.serverSeed(session);
  HandshakeView.instanceHead(session);
  if (mapData.getMapID() == 0) {
    LOGGER.debug(""String_Node_Str"");
    CharacterCreationView.charCreateHead(session);
    return;
  }
  LoadCharacter loader=new LoadCharacter(db,attach.getCharacterId(),mapData.getSpawn());
  Entity player=loader.createPlayerEntityFor(entityManager);
  attach.setEntity(player);
  attach.setCharacterName(player.get(Name.class));
  attach.setAgentID(player.get(AgentID.class));
  attach.setLocalID(player.get(LocalID.class));
  clientlookup.addClient(session,player);
  HandshakeView.charName(session,attach.getCharacterName().name);
  HandshakeView.districtInfo(session,attach.getLocalID().localID,mapData.getMapID());
}",0.9798076923076924
12933,"@EventHandler public void onInstanceLoadRequestPlayerData(P137_UnknownAction action){
  LOGGER.debug(""String_Node_Str"");
  Session session=action.getSession();
  SessionAttachment attachment=(SessionAttachment)session.getAttachment();
  P230_UnknownAction zoneBeginCharInfo=new P230_UnknownAction();
  zoneBeginCharInfo.init(session);
  zoneBeginCharInfo.setUnknown1(1886151033);
  session.send(zoneBeginCharInfo);
  LOGGER.debug(""String_Node_Str"");
  UpdateAttribPtsView.create(session);
  LOGGER.debug(""String_Node_Str"");
  UpdatePrivateProfessionsView.create(session);
  P206_UpdateSkillBarAction updateSkillbar=new P206_UpdateSkillBarAction();
  updateSkillbar.init(session);
  updateSkillbar.setAgentID(50);
  updateSkillbar.setSkillBar(new int[8]);
  updateSkillbar.setSkillBarPvPMask(new int[8]);
  updateSkillbar.setData3((byte)1);
  session.send(updateSkillbar);
  LOGGER.debug(""String_Node_Str"");
  UpdateGenericValueView.create(session,50,UpdateGenericValueView.Type.Energy,20);
  LOGGER.debug(""String_Node_Str"");
  UpdateGenericValueView.create(session,50,UpdateGenericValueView.Type.Health,20);
  LOGGER.debug(""String_Node_Str"");
  UpdateGenericValueView.create(session,50,UpdateGenericValueView.Type.EnergyRegen,0.033F);
  LOGGER.debug(""String_Node_Str"");
  UpdateGenericValueView.create(session,50,UpdateGenericValueView.Type.HealthRegen,0);
  LOGGER.debug(""String_Node_Str"");
  UpdateGenericValueView.create(session,50,UpdateGenericValueView.Type.PublicLevel,1);
  P127_UnknownAction zoneDataPrepMapData=new P127_UnknownAction();
  zoneDataPrepMapData.init(session);
  zoneDataPrepMapData.setUnknown1(64);
  zoneDataPrepMapData.setUnknown2(128);
  zoneDataPrepMapData.setUnknown3(27);
  session.send(zoneDataPrepMapData);
  P126_UnknownAction zoneDataMapData=new P126_UnknownAction();
  zoneDataMapData.init(session);
  zoneDataMapData.setUnknown1(new int[1]);
  session.send(zoneDataMapData);
  P221_UpdateFactionAction updateFaction=new P221_UpdateFactionAction();
  updateFaction.init(session);
  updateFaction.setLevel(1);
  updateFaction.setMorale(100);
  session.send(updateFaction);
  P207_UnknownAction updateAvailableSkills=new P207_UnknownAction();
  updateAvailableSkills.init(session);
  updateAvailableSkills.setUnknown1(new int[]{0x000B0000,0x0354FFFF,0x043A043B,0x00E8043A,0x00000000,0x00000000,0x17000000});
  session.send(updateAvailableSkills);
  P077_UnknownAction updateAgentAppearance=new P077_UnknownAction();
  updateAgentAppearance.init(session);
  updateAgentAppearance.setUnknown1(1);
  updateAgentAppearance.setUnknown2(50);
  updateAgentAppearance.setUnknown3(0);
  updateAgentAppearance.setUnknown6(0x3cbfa094);
  updateAgentAppearance.setUnknown7(attachment.getCharacterName().name.toCharArray());
  session.send(updateAgentAppearance);
  P021_UnknownAction spawnObject=new P021_UnknownAction();
  spawnObject.init(session);
  spawnObject.setUnknown1(50);
  spawnObject.setUnknown2((0x30 << 24) | 1);
  spawnObject.setUnknown3((byte)1);
  spawnObject.setUnknown4((byte)5);
  spawnObject.setUnknown5(new float[]{-6558,-6010});
  spawnObject.setUnknown6((short)0);
  spawnObject.setUnknown7(new float[]{Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY});
  spawnObject.setUnknown8((byte)1);
  spawnObject.setUnknown9(42);
  spawnObject.setUnknown10(Float.POSITIVE_INFINITY);
  spawnObject.setUnknown11(0x41400000);
  spawnObject.setUnknown12(1886151033);
  spawnObject.setUnknown18(new float[]{Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY});
  spawnObject.setUnknown19(new float[]{Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY});
  spawnObject.setUnknown22(new float[]{Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY});
  session.send(spawnObject);
  P023_UnknownAction fadeIntoMap=new P023_UnknownAction();
  fadeIntoMap.init(session);
  fadeIntoMap.setUnknown1(50);
  fadeIntoMap.setUnknown2(3);
  session.send(fadeIntoMap);
}","@EventHandler public void onInstanceLoadRequestPlayerData(P137_UnknownAction action){
  LOGGER.debug(""String_Node_Str"");
  Session session=action.getSession();
  SessionAttachment attachment=(SessionAttachment)session.getAttachment();
  P230_UnknownAction zoneBeginCharInfo=new P230_UnknownAction();
  zoneBeginCharInfo.init(session);
  zoneBeginCharInfo.setUnknown1(1886151033);
  session.send(zoneBeginCharInfo);
  LOGGER.debug(""String_Node_Str"");
  UpdateAttribPtsView.create(session);
  LOGGER.debug(""String_Node_Str"");
  UpdatePrivateProfessionsView.create(session);
  P206_UpdateSkillBarAction updateSkillbar=new P206_UpdateSkillBarAction();
  updateSkillbar.init(session);
  updateSkillbar.setAgentID(50);
  updateSkillbar.setSkillBar(new int[8]);
  updateSkillbar.setSkillBarPvPMask(new int[8]);
  updateSkillbar.setData3((byte)1);
  session.send(updateSkillbar);
  LOGGER.debug(""String_Node_Str"");
  UpdateGenericValueView.create(session,50,UpdateGenericValueView.Type.Energy,20);
  LOGGER.debug(""String_Node_Str"");
  UpdateGenericValueView.create(session,50,UpdateGenericValueView.Type.Health,20);
  LOGGER.debug(""String_Node_Str"");
  UpdateGenericValueView.create(session,50,UpdateGenericValueView.Type.EnergyRegen,0.033F);
  LOGGER.debug(""String_Node_Str"");
  UpdateGenericValueView.create(session,50,UpdateGenericValueView.Type.HealthRegen,0);
  LOGGER.debug(""String_Node_Str"");
  UpdateGenericValueView.create(session,50,UpdateGenericValueView.Type.PublicLevel,1);
  P127_UnknownAction zoneDataPrepMapData=new P127_UnknownAction();
  zoneDataPrepMapData.init(session);
  zoneDataPrepMapData.setUnknown1(64);
  zoneDataPrepMapData.setUnknown2(128);
  zoneDataPrepMapData.setUnknown3(27);
  session.send(zoneDataPrepMapData);
  P126_UnknownAction zoneDataMapData=new P126_UnknownAction();
  zoneDataMapData.init(session);
  zoneDataMapData.setUnknown1(new int[1]);
  session.send(zoneDataMapData);
  P221_UpdateFactionAction updateFaction=new P221_UpdateFactionAction();
  updateFaction.init(session);
  updateFaction.setLevel(1);
  updateFaction.setMorale(100);
  session.send(updateFaction);
  P207_UnknownAction updateAvailableSkills=new P207_UnknownAction();
  updateAvailableSkills.init(session);
  updateAvailableSkills.setUnknown1(new int[]{0x000B0000,0x0354FFFF,0x043A043B,0x00E8043A,0x00000000,0x00000000,0x17000000});
  session.send(updateAvailableSkills);
  P077_UnknownAction updateAgentAppearance=new P077_UnknownAction();
  updateAgentAppearance.init(session);
  updateAgentAppearance.setUnknown1(1);
  updateAgentAppearance.setUnknown2(50);
  updateAgentAppearance.setUnknown3(0);
  updateAgentAppearance.setUnknown6(0x3cbfa094);
  updateAgentAppearance.setUnknown7(attachment.getCharacterName().name.toCharArray());
  session.send(updateAgentAppearance);
  P021_UnknownAction spawnObject=new P021_UnknownAction();
  spawnObject.init(session);
  spawnObject.setUnknown1(50);
  spawnObject.setUnknown2((0x30 << 24) | 1);
  spawnObject.setUnknown3((byte)1);
  spawnObject.setUnknown4((byte)5);
  spawnObject.setUnknown5(new float[]{-6558,-6010});
  spawnObject.setUnknown6((short)0);
  spawnObject.setUnknown7(new float[]{Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY});
  spawnObject.setUnknown8((byte)1);
  spawnObject.setUnknown9(42);
  spawnObject.setUnknown10(Float.POSITIVE_INFINITY);
  spawnObject.setUnknown11(0x41400000);
  spawnObject.setUnknown12(1886151033);
  spawnObject.setUnknown18(new float[]{Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY});
  spawnObject.setUnknown19(new float[]{Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY});
  spawnObject.setUnknown22(new float[]{Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY});
  session.send(spawnObject);
  P023_UnknownAction fadeIntoMap=new P023_UnknownAction();
  fadeIntoMap.init(session);
  fadeIntoMap.setUnknown1(50);
  fadeIntoMap.setUnknown2(3);
  session.send(fadeIntoMap);
  attachment.setHeartBeatEnabled(true);
}",0.9948665297741272
12934,"/** 
 * Helper. Generates the map data we need for this mapshard.
 * @param dbMapID                 The map ID as used for the db records.
 * @return      The completed map data.
 */
private MapData loadMapData(int dbMapID){
  int mapID=0;
  int mapFileHash=165811;
  float spawnX=-6558;
  float spawnY=-6010;
  int spawnPlane=0;
  return new MapData(mapID,mapFileHash,new GWVector(spawnX,spawnY,spawnPlane));
}","/** 
 * Helper. Generates the map data we need for this mapshard.
 * @param dbMapID                 The map ID as used for the db records.
 * @return      The completed map data.
 */
private MapData loadMapData(int dbMapID){
  int mapID=dbMapID;
  int mapFileHash=165811;
  float spawnX=-6558;
  float spawnY=-6010;
  int spawnPlane=0;
  return new MapData(mapID,mapFileHash,new GWVector(spawnX,spawnY,spawnPlane));
}",0.9903381642512076
12935,"/** 
 * Constructor.
 * @param aggregator
 * @param entityManager
 * @param clientLookupTable 
 */
public AgentVisibility(EventAggregator aggregator,EntityManager entityManager,ClientLookupTable clientLookupTable){
  super(aggregator,UPDATEINTERVAL);
}","/** 
 * Constructor.
 * @param aggregator
 * @param entityManager
 * @param clientLookupTable 
 */
public AgentVisibility(EventAggregator aggregator,EntityManager entityManager,ClientLookupTable clientLookupTable){
  super(aggregator,UPDATEINTERVAL);
  this.entityManager=entityManager;
  this.clientLookup=clientLookupTable;
}",0.8704663212435233
12936,"@Test public void runTest() throws InterruptedException {
}","@Test public void runTest() throws InterruptedException {
  GlobalExecutor.init(new ScheduledThreadPoolExecutor(12));
  EventAggregator agg=new ConcurrentEventAggregator();
  TestSystem sys=new TestSystem(agg);
  agg.register(sys);
  sys.gotUpdate=false;
  sys.gotTestEvent=false;
  Method[] methods=sys.getClass().getMethods();
  for (  Method method : methods) {
    if (method.getAnnotation(EventHandler.class) == null) {
      continue;
    }
    LOGGER.info(""String_Node_Str"",method.getName());
  }
  agg.triggerEvent(new HeartBeatEvent(10));
  sys.gotUpdate=false;
  sys.gotTestEvent=false;
  agg.triggerEvent(new TestEvent());
  LOGGER.info(""String_Node_Str"");
}",0.1620879120879121
12937,"private DBCharacter(ResultSet resultSet){
  try {
    this.name=resultSet.getString(""String_Node_Str"");
    this.appearance=resultSet.getBytes(""String_Node_Str"");
  }
 catch (  SQLException ex) {
    LOGGER.error(""String_Node_Str"");
  }
}","private DBCharacter(ResultSet resultSet){
  try {
    this.name=resultSet.getString(""String_Node_Str"");
    this.skin=resultSet.getByte(""String_Node_Str"");
    this.sex=resultSet.getByte(""String_Node_Str"");
    this.height=resultSet.getByte(""String_Node_Str"");
    this.haircolor=resultSet.getByte(""String_Node_Str"");
    this.face=resultSet.getByte(""String_Node_Str"");
    this.primaryProfession=resultSet.getByte(""String_Node_Str"");
    this.hairstyle=resultSet.getByte(""String_Node_Str"");
    this.campaign=resultSet.getByte(""String_Node_Str"");
  }
 catch (  SQLException ex) {
    LOGGER.error(""String_Node_Str"");
  }
}",0.4901277584204414
12938,"public static boolean createNewCharacter(DatabaseConnectionProvider connectionProvider,int accountId,String name,byte[] appearance){
  try {
    Connection connection=connectionProvider.getConnection();
    PreparedStatement ps=connection.prepareStatement(""String_Node_Str"");
    ps.setInt(1,accountId);
    ps.setString(2,name);
    ps.setBytes(3,appearance);
    int rows=ps.executeUpdate();
    ps.close();
    connection.close();
    return rows == 1;
  }
 catch (  SQLException ex) {
    LOGGER.error(""String_Node_Str"");
  }
  return false;
}","public static boolean createNewCharacter(DatabaseConnectionProvider connectionProvider,int accountId,String characterName,byte sex,byte height,byte skin,byte haircolor,byte face,byte primaryProfession,byte hairstyle,byte campaign){
  try {
    Connection connection=connectionProvider.getConnection();
    PreparedStatement ps=connection.prepareStatement(""String_Node_Str"");
    ps.setInt(1,accountId);
    ps.setString(2,characterName);
    ps.setByte(3,sex);
    ps.setByte(4,height);
    ps.setByte(5,skin);
    ps.setByte(6,haircolor);
    ps.setByte(7,face);
    ps.setByte(8,primaryProfession);
    ps.setByte(9,hairstyle);
    ps.setByte(10,campaign);
    int rows=ps.executeUpdate();
    ps.close();
    connection.close();
    return rows == 1;
  }
 catch (  SQLException ex) {
    LOGGER.error(""String_Node_Str"");
  }
  return false;
}",0.7485632183908046
12939,"public void addCharacter(Session session,DBCharacter character){
  LOGGER.debug(""String_Node_Str"");
  P007_UnknownAction characterInfo=new P007_UnknownAction();
  characterInfo.init(session);
  characterInfo.setUnknown1(SessionAttachment.getLoginCount(session));
  characterInfo.setUnknown2(new byte[16]);
  characterInfo.setUnknown3(0);
  characterInfo.setUnknown4(character.getName().toCharArray());
  ByteBuffer buffer=ByteBuffer.allocate(100).order(ByteOrder.LITTLE_ENDIAN);
  buffer.putShort((short)6);
  buffer.putShort((short)248);
  buffer.put(new byte[]{0x33,0x36,0x31,0x30});
  buffer.put(character.getAppearance());
  buffer.put(new byte[16]);
  buffer.put(new byte[]{0,-1,-0x23,-0x23,0,-0x23,-0x23,-0x23,-0x23});
  byte[] a=new byte[buffer.position()];
  buffer.position(0);
  buffer.get(a);
  characterInfo.setUnknown5(a);
  shardletContext.sendAction(characterInfo);
}","public void addCharacter(Session session,DBCharacter character){
  LOGGER.debug(""String_Node_Str"");
  P007_UnknownAction characterInfo=new P007_UnknownAction();
  characterInfo.init(session);
  characterInfo.setUnknown1(SessionAttachment.getLoginCount(session));
  characterInfo.setUnknown2(new byte[16]);
  characterInfo.setUnknown3(0);
  characterInfo.setUnknown4(character.getName().toCharArray());
  ByteBuffer buffer=ByteBuffer.allocate(100).order(ByteOrder.LITTLE_ENDIAN);
  buffer.putShort((short)6);
  buffer.putShort((short)248);
  buffer.put(new byte[]{0x33,0x36,0x31,0x30});
  buffer.put((byte)((character.getSkin() << 5) | (character.getHeight() << 1) | character.getSex()));
  buffer.put((byte)((character.getFace() << 7) | (character.getSkin() >> 3)));
  buffer.put((byte)((character.getPrimaryProfession() << 4) | (character.getFace() >> 1)));
  buffer.put((byte)((character.getCampaign() << 6) | character.getHairstyle()));
  buffer.put(new byte[16]);
  byte level=0;
  buffer.put((byte)((level << 4) | character.getCampaign()));
  buffer.put(new byte[]{-1,-0x23,-0x23,0,-0x23,-0x23,-0x23,-0x23});
  byte[] a=new byte[buffer.position()];
  buffer.position(0);
  buffer.get(a);
  characterInfo.setUnknown5(a);
  shardletContext.sendAction(characterInfo);
}",0.7951695308871343
12940,"@EventHandler public void validateCreatedCharacterActionHandler(P132_UnknownAction action){
  LOGGER.debug(""String_Node_Str"");
  Session session=action.getSession();
  SessionAttachment attachment=(SessionAttachment)session.getAttachment();
  P141_UnknownAction dAction=new P141_UnknownAction();
  dAction.init(session);
  dAction.setUnknown1((short)248);
  sendAction(dAction);
  String characterName=new String(action.getUnknown1());
  byte[] appearance=action.getUnknown2();
  DBCharacter.createNewCharacter(connectionProvider,attachment.getAccountId(),characterName,appearance);
  P378_UnknownAction sAction=new P378_UnknownAction();
  sAction.init(session);
  sAction.setUnknown1(new byte[16]);
  sAction.setUnknown2(action.getUnknown1());
  sAction.setUnknown3((short)81);
  ByteBuffer buffer=ByteBuffer.allocate(100).order(ByteOrder.LITTLE_ENDIAN);
  buffer.putShort((short)6);
  buffer.putShort((short)248);
  buffer.put(new byte[]{0x33,0x36,0x31,0x30});
  buffer.put(action.getUnknown2());
  buffer.put(new byte[16]);
  buffer.put(new byte[]{0,-1,-0x23,-0x23,0,-0x23,-0x23,-0x23,-0x23});
  byte[] a=new byte[buffer.position()];
  buffer.position(0);
  buffer.get(a);
  sAction.setUnknown4(a);
  sendAction(sAction);
}","@EventHandler public void validateCreatedCharacterActionHandler(P132_UnknownAction action){
  LOGGER.debug(""String_Node_Str"");
  Session session=action.getSession();
  SessionAttachment attachment=(SessionAttachment)session.getAttachment();
  P141_UnknownAction dAction=new P141_UnknownAction();
  dAction.init(session);
  dAction.setUnknown1((short)248);
  sendAction(dAction);
  String characterName=new String(action.getUnknown1());
  byte[] appearance=action.getUnknown2();
  byte sex=(byte)(appearance[0] & 1);
  byte height=(byte)((appearance[0] >> 1) & 0xF);
  byte skin=(byte)(((appearance[0] >> 5) | (appearance[1] << 3)) & 0x1F);
  byte haircolor=(byte)((appearance[1] >> 2) & 0x1F);
  byte face=(byte)(((appearance[1] >> 7) | (appearance[2] << 1)) & 0x1F);
  byte primary=(byte)((appearance[2] >> 4) & 0xF);
  byte hairstyle=(byte)(appearance[3] & 0x1F);
  byte campaign=(byte)((appearance[3] >> 6) & 3);
  DBCharacter.createNewCharacter(connectionProvider,attachment.getAccountId(),characterName,sex,height,skin,haircolor,face,primary,hairstyle,campaign);
  P378_UnknownAction sAction=new P378_UnknownAction();
  sAction.init(session);
  sAction.setUnknown1(new byte[16]);
  sAction.setUnknown2(action.getUnknown1());
  sAction.setUnknown3((short)81);
  ByteBuffer buffer=ByteBuffer.allocate(100).order(ByteOrder.LITTLE_ENDIAN);
  buffer.putShort((short)6);
  buffer.putShort((short)248);
  buffer.put(new byte[]{0x33,0x36,0x31,0x30});
  buffer.put((byte)((skin << 5) | (height << 1) | sex));
  buffer.put((byte)((face << 7) | (skin >> 3)));
  buffer.put((byte)((primary << 4) | (face >> 1)));
  buffer.put((byte)((campaign << 6) | hairstyle));
  buffer.put(new byte[16]);
  byte level=0;
  buffer.put((byte)((level << 4) | campaign));
  buffer.put(new byte[]{-1,-0x23,-0x23,0,-0x23,-0x23,-0x23,-0x23});
  byte[] a=new byte[buffer.position()];
  buffer.position(0);
  buffer.get(a);
  sAction.setUnknown4(a);
  sendAction(sAction);
}",0.7549668874172185
12941,"/** 
 * This handler will be triggered by the R:S server when the game-app has been initialized completely.
 * @param event                   The event carrying the context information.
 */
@EventHandler public void gameAppCreatedEventHandler(GameAppCreatedEvent event){
  LoginShardView.SetLoginShardContext(event.getParent());
  DatabaseConnectionProvider connectionProvider=new DatabaseConnectionProvider(this.getInitParameter(""String_Node_Str""),this.getInitParameter(""String_Node_Str""),this.getInitParameter(""String_Node_Str""),this.getInitParameter(""String_Node_Str""),this.getInitParameter(""String_Node_Str""));
  EntitySystemFacade entitySystem=new EntitySystemFacade();
  ClientLookupTable lookupTable=new ClientLookupTable();
  MapShardStartupEvent ev=new MapShardStartupEvent(connectionProvider,entitySystem,lookupTable);
  publishEvent(ev);
}","/** 
 * This handler will be triggered by the R:S server when the game-app has been initialized completely.
 * @param event                   The event carrying the context information.
 */
@EventHandler public void gameAppCreatedEventHandler(GameAppCreatedEvent event){
  LoginShardView.SetLoginShardContext(event.getParent());
  DatabaseConnectionProvider connectionProvider=new DatabaseConnectionProvider(this.getInitParameter(""String_Node_Str""),this.getInitParameter(""String_Node_Str""),this.getInitParameter(""String_Node_Str""),this.getInitParameter(""String_Node_Str""),this.getInitParameter(""String_Node_Str""));
  ClientLookupTable lookupTable=new ClientLookupTable();
  MapShardStartupEvent ev=new MapShardStartupEvent(connectionProvider,null,lookupTable);
  publishEvent(ev);
}",0.7757352941176471
12942,"/** 
 * Constructor
 * @param opts parsed argument list
 * @throws IOException error parsing options
 */
private Match(ArgList opts) throws IOException {
  this(JenaConnect.parseConfig(opts.get(""String_Node_Str""),opts.getValueMap(""String_Node_Str"")),JenaConnect.parseConfig(opts.get(""String_Node_Str""),opts.getValueMap(""String_Node_Str"")),JenaConnect.parseConfig(opts.get(""String_Node_Str""),opts.getValueMap(""String_Node_Str"")),opts.has(""String_Node_Str""),Float.parseFloat(opts.get(""String_Node_Str"")),opts.getValueMap(""String_Node_Str""),opts.has(""String_Node_Str""),Integer.parseInt(opts.get(""String_Node_Str"")));
}","/** 
 * Constructor
 * @param opts parsed argument list
 * @throws IOException error parsing options
 */
private Match(ArgList opts) throws IOException {
  this(JenaConnect.parseConfig(opts.get(""String_Node_Str""),opts.getValueMap(""String_Node_Str"")),JenaConnect.parseConfig(opts.get(""String_Node_Str""),opts.getValueMap(""String_Node_Str"")),JenaConnect.parseConfig(opts.get(""String_Node_Str""),opts.getValueMap(""String_Node_Str"")),Boolean.parseBoolean(opts.get(""String_Node_Str"")),Float.parseFloat(opts.get(""String_Node_Str"")),opts.getValueMap(""String_Node_Str""),Boolean.parseBoolean(opts.get(""String_Node_Str"")),Integer.parseInt(opts.get(""String_Node_Str"")));
}",0.8838304552590267
12943,"/** 
 * @throws IOException error executing the ""mv"" command 
 */
private void transferImages() throws IOException {
  Process p1;
  Process p2;
  Process p3;
  Process p4;
  String fileName;
  try {
    for (    File f : this.folder.listFiles()) {
      fileName=f.getName();
      if (this.ufidSet.contains(fileName.substring(0,8))) {
        p1=Runtime.getRuntime().exec(""String_Node_Str"" + this.pathToImageScriptDirectory + ""String_Node_Str""+ fileName+ ""String_Node_Str""+ this.pathToImageScriptDirectory+ ""String_Node_Str"");
        p2=Runtime.getRuntime().exec(""String_Node_Str"" + this.pathToImageScriptDirectory + ""String_Node_Str""+ ""String_Node_Str""+ fileName+ ""String_Node_Str""+ this.pathToImageScriptDirectory+ ""String_Node_Str"");
        p1.waitFor();
        p1.getInputStream().close();
        p1.getOutputStream().close();
        p1.getErrorStream().close();
        p2.waitFor();
        p2.getInputStream().close();
        p2.getOutputStream().close();
        p2.getErrorStream().close();
      }
 else {
        p3=Runtime.getRuntime().exec(""String_Node_Str"" + this.pathToImageScriptDirectory + ""String_Node_Str""+ fileName+ ""String_Node_Str""+ this.pathToImageScriptDirectory+ ""String_Node_Str"");
        p4=Runtime.getRuntime().exec(""String_Node_Str"" + this.pathToImageScriptDirectory + ""String_Node_Str""+ ""String_Node_Str""+ fileName+ ""String_Node_Str""+ this.pathToImageScriptDirectory+ ""String_Node_Str"");
        p3.waitFor();
        p3.getInputStream().close();
        p3.getOutputStream().close();
        p3.getErrorStream().close();
        p4.waitFor();
        p4.getInputStream().close();
        p4.getOutputStream().close();
        p4.getErrorStream().close();
      }
    }
  }
 catch (  IOException e) {
    throw new IOException(e);
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
}","/** 
 * @throws IOException error executing the ""mv"" command 
 */
private void transferImages() throws IOException {
  Process p1;
  Process p2;
  Process p3;
  Process p4;
  String fileName;
  try {
    for (    File f : this.folder.listFiles()) {
      fileName=f.getName();
      if ((fileName.length() >= 8) && (this.ufidSet.contains(fileName.substring(0,8)))) {
        p1=Runtime.getRuntime().exec(""String_Node_Str"" + this.pathToImageScriptDirectory + ""String_Node_Str""+ fileName+ ""String_Node_Str""+ this.pathToImageScriptDirectory+ ""String_Node_Str"");
        p2=Runtime.getRuntime().exec(""String_Node_Str"" + this.pathToImageScriptDirectory + ""String_Node_Str""+ ""String_Node_Str""+ fileName+ ""String_Node_Str""+ this.pathToImageScriptDirectory+ ""String_Node_Str"");
        p1.waitFor();
        p1.getInputStream().close();
        p1.getOutputStream().close();
        p1.getErrorStream().close();
        p2.waitFor();
        p2.getInputStream().close();
        p2.getOutputStream().close();
        p2.getErrorStream().close();
      }
 else {
        p3=Runtime.getRuntime().exec(""String_Node_Str"" + this.pathToImageScriptDirectory + ""String_Node_Str""+ fileName+ ""String_Node_Str""+ this.pathToImageScriptDirectory+ ""String_Node_Str"");
        p4=Runtime.getRuntime().exec(""String_Node_Str"" + this.pathToImageScriptDirectory + ""String_Node_Str""+ ""String_Node_Str""+ fileName+ ""String_Node_Str""+ this.pathToImageScriptDirectory+ ""String_Node_Str"");
        p3.waitFor();
        p3.getInputStream().close();
        p3.getOutputStream().close();
        p3.getErrorStream().close();
        p4.waitFor();
        p4.getInputStream().close();
        p4.getOutputStream().close();
        p4.getErrorStream().close();
      }
    }
  }
 catch (  IOException e) {
    throw new IOException(e);
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
}",0.9919093851132686
12944,"/** 
 * This function get the XML tag values  for example : for Tag ""DateUpdated"" it will give you the updatedate, for Image Tag it will give  you the encoded Image String
 * @param base64String text encoded Image ,path Path to store the Image,This process repeats for every received message
 * @throwsI OException
 */
public static String getCharacterDataFromElement(Element e){
  Node child=e.getFirstChild();
  if (child instanceof CharacterData) {
    CharacterData cd=(CharacterData)child;
    return cd.getData();
  }
  return ""String_Node_Str"";
}","/** 
 * TODO: Fix this documentation to match actual method. This function get the XML tag values  for example : for Tag ""DateUpdated"" it will give you the updatedate, for Image Tag it will give  you the encoded Image String
 * @param base64String text encoded Image ,path Path to store the Image,This process repeats for every received message
 * @throwsI OException
 */
public static String getCharacterDataFromElement(Element e){
  Node child=e.getFirstChild();
  if (child instanceof CharacterData) {
    CharacterData cd=(CharacterData)child;
    return cd.getData();
  }
  return ""String_Node_Str"";
}",0.9542709232096636
12945,"/** 
 * This fucntion parsed the XML image 
 * @param Content of the ImageChange TAG to process
 */
public static void getUfidsAndImages(String xmlText){
  try {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    InputSource is=new InputSource();
    is.setCharacterStream(new StringReader(xmlText));
    Document doc=db.parse(is);
    NodeList DateUpdated=doc.getElementsByTagName(""String_Node_Str"");
    Element line1=(Element)DateUpdated.item(0);
    String date=getCharacterDataFromElement(line1);
    NodeList Image=doc.getElementsByTagName(""String_Node_Str"");
    Element line2=(Element)Image.item(0);
    String Image_base_64=getCharacterDataFromElement(line2);
    NodeList Ufid=doc.getElementsByTagName(""String_Node_Str"");
    Element line3=(Element)Ufid.item(0);
    String id=getCharacterDataFromElement(line3);
    log.info(""String_Node_Str"" + id + ""String_Node_Str""+ imagedir);
    WriteImageFromBase64(getCharacterDataFromElement(line2),imagedir + id);
    log.info(""String_Node_Str"" + id + ""String_Node_Str""+ date);
  }
 catch (  Exception e) {
    log.info(e.toString());
  }
}","/** 
 * This fucntion parsed the XML image 
 * @param Content of the ImageChange TAG to process
 */
public static void getUfidsAndImages(String xmlText){
  try {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    InputSource is=new InputSource();
    is.setCharacterStream(new StringReader(xmlText));
    Document doc=db.parse(is);
    NodeList DateUpdated=doc.getElementsByTagName(""String_Node_Str"");
    Element line1=(Element)DateUpdated.item(0);
    String date=getCharacterDataFromElement(line1);
    NodeList Image=doc.getElementsByTagName(""String_Node_Str"");
    Element line2=(Element)Image.item(0);
    String Image_base_64=getCharacterDataFromElement(line2);
    NodeList Ufid=doc.getElementsByTagName(""String_Node_Str"");
    Element line3=(Element)Ufid.item(0);
    String id=getCharacterDataFromElement(line3);
    log.info(""String_Node_Str"" + id + ""String_Node_Str""+ imagedir);
    WriteImageFromBase64(Image_base_64,imagedir + id);
    log.info(""String_Node_Str"" + id + ""String_Node_Str""+ date);
  }
 catch (  Exception e) {
    log.info(e.toString());
  }
}",0.8755960121369745
12946,"/** 
 * Consume all Message from the ActiveMQ queue
 * @throws JMSException 
 */
public static void getUpdatesFromQueue() throws JMSException {
  int failcount=0;
  Message message=null;
  if (maxnum == 0) {
    log.info(""String_Node_Str"");
    return;
  }
  if (maxnum > browsecount) {
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"" + browsecount);
    ;
    maxnum=browsecount;
  }
  for (int i=1; (i <= maxnum); i++) {
    if ((message=consumer.receive(30000)) == null) {
      failcount++;
      continue;
    }
    processMessage(message);
  }
  log.info(""String_Node_Str"" + failcount);
}","/** 
 * Consume all Message from the ActiveMQ queue
 * @throws JMSException 
 */
public static void getUpdatesFromQueue() throws JMSException {
  int failcount=0;
  Message message=null;
  if (maxnum == 0) {
    log.info(""String_Node_Str"");
    return;
  }
  if (maxnum > browsecount) {
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"" + browsecount);
    maxnum=browsecount;
  }
  for (int i=1; (i <= maxnum); i++) {
    if ((message=consumer.receive(30000)) == null) {
      failcount++;
      continue;
    }
    processMessage(message);
  }
  log.info(""String_Node_Str"" + failcount);
}",0.9950576606260296
12947,"/** 
 * Main method
 * @param args commandline arguments
 */
public static void main(String... args){
  Exception error=null;
  try {
    InitLog.initLogger(args,getParser());
    log.info(""String_Node_Str"");
    new ImagePreservationDuringPrivacy(args).execute();
  }
 catch (  IllegalArgumentException e) {
    log.error(e.getMessage());
    log.debug(""String_Node_Str"",e);
    System.out.println(getParser(""String_Node_Str"",database).getUsage());
    error=e;
  }
catch (  UsageException e) {
    log.info(""String_Node_Str"");
    System.out.println(getParser(""String_Node_Str"",database).getUsage());
    error=e;
  }
catch (  Exception e) {
    log.error(e.getMessage());
    log.debug(""String_Node_Str"",e);
    error=e;
  }
 finally {
    log.info(""String_Node_Str"");
    if (error != null) {
      System.exit(1);
    }
  }
}","/** 
 * Main method
 * @param args commandline arguments
 */
public static void main(String... args){
  Exception error=null;
  try {
    InitLog.initLogger(args,getParser());
    log.info(""String_Node_Str"");
    new ImagePreservationDuringPrivacy(args).execute();
  }
 catch (  IllegalArgumentException e) {
    log.error(e.getMessage());
    log.debug(""String_Node_Str"",e);
    System.out.println(getParser().getUsage());
    error=e;
  }
catch (  UsageException e) {
    log.info(""String_Node_Str"");
    System.out.println(getParser().getUsage());
    error=e;
  }
catch (  Exception e) {
    log.error(e.getMessage());
    log.debug(""String_Node_Str"",e);
    error=e;
  }
 finally {
    log.info(""String_Node_Str"");
    if (error != null) {
      System.exit(1);
    }
  }
}",0.9676616915422884
12948,"public void execute(){
}","/** 
 */
public void execute(){
}",0.8421052631578947
12949,"/** 
 * Consume all Message from the ActiveMQ queue
 * @throws JMSException 
 */
public static void getUpdatesFromQueue() throws JMSException {
  for (int i=0; i < 5; i++) {
    Message message=null;
    message=consumer.receiveNoWait();
    if (message == null)     System.out.println(""String_Node_Str"");
    processMessage(message);
  }
}","/** 
 * Consume all Message from the ActiveMQ queue
 * @throws JMSException 
 */
public static void getUpdatesFromQueue() throws JMSException {
  for (int i=0; i < 5; i++) {
    Message message=null;
    message=consumer.receiveNoWait();
    if (message == null)     System.out.println(""String_Node_Str"");
 else     processMessage(message);
  }
}",0.9912536443148688
12950,"@Override public String[] runESearch(String term,boolean logMessage) throws IOException {
  String[] env=new String[4];
  try {
    StringBuilder urlSb=new StringBuilder();
    urlSb.append(""String_Node_Str"");
    urlSb.append(""String_Node_Str"");
    urlSb.append(database);
    urlSb.append(""String_Node_Str"");
    urlSb.append(getToolName());
    urlSb.append(""String_Node_Str"");
    urlSb.append(getEmailAddress());
    urlSb.append(""String_Node_Str"");
    urlSb.append(""String_Node_Str"");
    urlSb.append(""String_Node_Str"");
    urlSb.append(term);
    if (logMessage) {
    }
    DocumentBuilderFactory docBuildFactory=DocumentBuilderFactory.newInstance();
    docBuildFactory.setIgnoringComments(true);
    Document doc=docBuildFactory.newDocumentBuilder().parse(new InputSource(new ByteArrayInputStream(WebAide.getURLContents(urlSb.toString()).getBytes())));
    env[0]=doc.getElementsByTagName(""String_Node_Str"").item(0).getTextContent();
    env[1]=doc.getElementsByTagName(""String_Node_Str"").item(0).getTextContent();
    env[2]=doc.getElementsByTagName(""String_Node_Str"").item(0).getTextContent();
    env[3]=doc.getElementsByTagName(""String_Node_Str"").item(0).getTextContent();
    if (logMessage) {
      log.info(""String_Node_Str"" + env[2] + ""String_Node_Str"");
    }
  }
 catch (  MalformedURLException e) {
    throw new IOException(e);
  }
catch (  SAXException e) {
    throw new IOException(e);
  }
catch (  ParserConfigurationException e) {
    throw new IOException(e);
  }
  return env;
}","@Override public String[] runESearch(String term,boolean logMessage) throws IOException {
  String[] env=new String[4];
  try {
    StringBuilder urlSb=new StringBuilder();
    urlSb.append(""String_Node_Str"");
    urlSb.append(""String_Node_Str"");
    urlSb.append(database);
    urlSb.append(""String_Node_Str"");
    urlSb.append(getToolName());
    urlSb.append(""String_Node_Str"");
    urlSb.append(getEmailAddress());
    urlSb.append(""String_Node_Str"");
    urlSb.append(""String_Node_Str"");
    urlSb.append(""String_Node_Str"");
    urlSb.append(term);
    if (logMessage) {
    }
    DocumentBuilderFactory docBuildFactory=DocumentBuilderFactory.newInstance();
    docBuildFactory.setIgnoringComments(true);
    Document doc=docBuildFactory.newDocumentBuilder().parse(new InputSource(new ByteArrayInputStream(WebAide.getURLContents(urlSb.toString()).getBytes(""String_Node_Str""))));
    env[0]=doc.getElementsByTagName(""String_Node_Str"").item(0).getTextContent();
    env[1]=doc.getElementsByTagName(""String_Node_Str"").item(0).getTextContent();
    env[2]=doc.getElementsByTagName(""String_Node_Str"").item(0).getTextContent();
    env[3]=doc.getElementsByTagName(""String_Node_Str"").item(0).getTextContent();
    if (logMessage) {
      log.info(""String_Node_Str"" + env[2] + ""String_Node_Str"");
    }
  }
 catch (  MalformedURLException e) {
    throw new IOException(e);
  }
catch (  SAXException e) {
    throw new IOException(e);
  }
catch (  ParserConfigurationException e) {
    throw new IOException(e);
  }
  return env;
}",0.9944060546232312
12951,"/** 
 * Test method for  {@link org.vivoweb.harvester.fetch.nih.PubmedFetch#PubmedFetch(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.vivoweb.harvester.util.repo.RecordHandler) PubmedFetch(String emailAddress, String searchTerm, String maxRecords, String batchSize, RecordHandler rh)}.
 * @throws IOException error
 * @throws ParserConfigurationException error
 * @throws SAXException error
 */
public final void testPubmedFetchOneRecord() throws IOException, ParserConfigurationException, SAXException {
  log.info(""String_Node_Str"");
  new PubmedFetch(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",this.rh).execute();
  assertTrue(this.rh.iterator().hasNext());
  DocumentBuilder docB=DocumentBuilderFactory.newInstance().newDocumentBuilder();
  int count=0;
  for (  Record r : this.rh) {
    log.debug(""String_Node_Str"" + r.getID());
    Document doc=docB.parse(new ByteArrayInputStream(r.getData().getBytes()));
    Element elem=doc.getDocumentElement();
    traverseNodes(elem.getChildNodes());
    count++;
  }
  assertEquals(1,count);
  log.info(""String_Node_Str"");
}","/** 
 * Test method for  {@link org.vivoweb.harvester.fetch.nih.PubmedFetch#PubmedFetch(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.vivoweb.harvester.util.repo.RecordHandler) PubmedFetch(String emailAddress, String searchTerm, String maxRecords, String batchSize, RecordHandler rh)}.
 * @throws IOException error
 * @throws ParserConfigurationException error
 * @throws SAXException error
 */
public final void testPubmedFetchOneRecord() throws IOException, ParserConfigurationException, SAXException {
  log.info(""String_Node_Str"");
  new PubmedFetch(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",this.rh).execute();
  assertTrue(this.rh.iterator().hasNext());
  DocumentBuilder docB=DocumentBuilderFactory.newInstance().newDocumentBuilder();
  int count=0;
  for (  Record r : this.rh) {
    log.debug(""String_Node_Str"" + r.getID());
    Document doc=docB.parse(new ByteArrayInputStream(r.getData().getBytes(""String_Node_Str"")));
    Element elem=doc.getDocumentElement();
    traverseNodes(elem.getChildNodes());
    count++;
  }
  assertEquals(1,count);
  log.info(""String_Node_Str"");
}",0.992514310876266
12952,"/** 
 * checks again for the necessary file and makes sure that they exist
 * @throws IOException error processing
 */
public void execute() throws IOException {
  int translated=0;
  int passed=0;
  for (  Record r : this.inStore) {
    if (this.force || r.needsProcessed(this.getClass())) {
      log.trace(""String_Node_Str"" + r.getID());
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      xmlTranslate(new ByteArrayInputStream(r.getData().getBytes()),baos,new ByteArrayInputStream(this.translationString.getBytes()));
      this.outStore.addRecord(r.getID(),baos.toString(),this.getClass());
      r.setProcessed(this.getClass());
      baos.close();
      translated++;
    }
 else {
      log.trace(""String_Node_Str"" + r.getID());
      passed++;
    }
  }
  log.info(Integer.toString(translated) + ""String_Node_Str"");
  log.info(Integer.toString(passed) + ""String_Node_Str"");
}","/** 
 * checks again for the necessary file and makes sure that they exist
 * @throws IOException error processing
 */
public void execute() throws IOException {
  int translated=0;
  int passed=0;
  for (  Record r : this.inStore) {
    if (this.force || r.needsProcessed(this.getClass())) {
      log.trace(""String_Node_Str"" + r.getID());
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      xmlTranslate(new ByteArrayInputStream(r.getData().getBytes(""String_Node_Str"")),baos,new ByteArrayInputStream(this.translationString.getBytes()));
      this.outStore.addRecord(r.getID(),baos.toString(),this.getClass());
      r.setProcessed(this.getClass());
      baos.close();
      translated++;
    }
 else {
      log.trace(""String_Node_Str"" + r.getID());
      passed++;
    }
  }
  log.info(Integer.toString(translated) + ""String_Node_Str"");
  log.info(Integer.toString(passed) + ""String_Node_Str"");
}",0.9906439185470556
12953,"/** 
 * Main method
 * @param args commandline arguments
 */
public static void main(String... args){
  Exception error=null;
  try {
    InitLog.initLogger(args,getParser());
    log.info(getParser().getAppName() + ""String_Node_Str"");
    new DatabaseClone(args).execute();
  }
 catch (  IllegalArgumentException e) {
    log.error(e.getMessage(),e);
    System.out.println(getParser().getUsage());
    error=e;
  }
catch (  Exception e) {
    log.error(e.getMessage(),e);
    error=e;
  }
 finally {
    log.info(getParser().getAppName() + ""String_Node_Str"");
    if (error != null) {
      System.exit(1);
    }
  }
}","/** 
 * Main method
 * @param args commandline arguments
 */
public static void main(String... args){
  Exception error=null;
  try {
    InitLog.initLogger(args,getParser());
    log.info(getParser().getAppName() + ""String_Node_Str"");
    new DatabaseClone(args).execute();
  }
 catch (  IllegalArgumentException e) {
    log.error(e.getMessage());
    log.debug(""String_Node_Str"",e);
    System.out.println(getParser().getUsage());
    error=e;
  }
catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    error=e;
  }
 finally {
    log.info(getParser().getAppName() + ""String_Node_Str"");
    if (error != null) {
      System.exit(1);
    }
  }
}",0.9490994518402506
12954,"/** 
 * Clone a database
 * @throws SQLException error connecting
 * @throws DatabaseUnitException error
 * @throws IOException error resolving connections
 */
public void execute() throws SQLException, DatabaseUnitException, IOException {
  if (this.tableTypes == null || this.tableTypes.length == 0) {
    this.tableTypes=new String[]{""String_Node_Str""};
  }
  IDataSet data;
  if (this.db1 != null) {
    DatabaseConfig config=this.db1.getConfig();
    config.setProperty(""String_Node_Str"",this.tableTypes);
    if (this.dbUnitFeatures != null) {
      for (      String feature : this.dbUnitFeatures.keySet()) {
        Boolean b=Boolean.valueOf(this.dbUnitFeatures.get(feature));
        log.debug(""String_Node_Str"" + feature + ""String_Node_Str""+ b);
        config.setProperty(feature,b);
      }
    }
    if (this.tables != null && this.tables.length > 0) {
      log.info(""String_Node_Str"");
    }
 else {
      log.info(""String_Node_Str"");
      Set<String> tableSet=new HashSet<String>();
      ResultSet tableRS=this.db1.getConnection().getMetaData().getTables(null,null,null,this.tableTypes);
      while (tableRS.next()) {
        tableSet.add(tableRS.getString(""String_Node_Str""));
      }
      this.tables=tableSet.toArray(new String[]{});
    }
    QueryDataSet partialDataSet=new QueryDataSet(this.db1);
    for (    String table : this.tables) {
      log.debug(""String_Node_Str"" + table + ""String_Node_Str"");
      String sql=""String_Node_Str"" + table;
      log.trace(""String_Node_Str"" + table + ""String_Node_Str""+ sql);
      partialDataSet.addTable(table,sql);
    }
    data=partialDataSet;
  }
 else   if (this.inFile != null) {
    if (this.dbUnitFeatures != null) {
      for (      String feature : this.dbUnitFeatures.keySet()) {
        log.warn(""String_Node_Str"" + feature + ""String_Node_Str"");
      }
    }
    data=new FlatDtdDataSet(this.inFile);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (this.db2 != null) {
    log.info(""String_Node_Str"");
    Map<Integer,String> dbTypes=new HashMap<Integer,String>();
    Connection db2conn=this.db2.getConnection();
    ResultSet dbTypeInfo=db2conn.getMetaData().getTypeInfo();
    while (dbTypeInfo.next()) {
      Integer typeCode=Integer.valueOf(dbTypeInfo.getInt(""String_Node_Str""));
      String typeName=dbTypeInfo.getString(""String_Node_Str"");
      if (!dbTypes.containsKey(typeCode)) {
        dbTypes.put(typeCode,typeName);
      }
    }
    ResultSet tableData=db2conn.getMetaData().getTables(db2conn.getCatalog(),null,""String_Node_Str"",this.tableTypes);
    while (tableData.next()) {
      String db2tableName=tableData.getString(""String_Node_Str"");
      for (      String db1table : data.getTableNames()) {
        if (db1table.trim().equalsIgnoreCase(db2tableName.trim())) {
          log.debug(""String_Node_Str"" + db2tableName + ""String_Node_Str"");
          String sql=""String_Node_Str"" + db2tableName;
          log.trace(""String_Node_Str"" + sql);
          db2conn.createStatement().executeUpdate(sql);
        }
      }
    }
    for (    String table : data.getTableNames()) {
      log.debug(""String_Node_Str"" + table + ""String_Node_Str"");
      ResultSet columnRS=this.db1.getConnection().getMetaData().getColumns(null,null,table,null);
      int count=0;
      StringBuilder createTableSB=new StringBuilder();
      createTableSB.append(""String_Node_Str"" + table + ""String_Node_Str"");
      while (columnRS.next()) {
        if (columnRS.getString(""String_Node_Str"").equals(table)) {
          if (count != 0) {
            createTableSB.append(',');
          }
          createTableSB.append(""String_Node_Str"");
          createTableSB.append(columnRS.getString(""String_Node_Str""));
          createTableSB.append(""String_Node_Str"");
          createTableSB.append(dbTypes.get(Integer.valueOf(columnRS.getInt(""String_Node_Str""))));
          int size=columnRS.getInt(""String_Node_Str"");
          if (size != 0) {
            createTableSB.append(""String_Node_Str"");
            createTableSB.append(size);
            createTableSB.append(""String_Node_Str"");
          }
          count++;
        }
      }
      createTableSB.append(""String_Node_Str"");
      log.trace(""String_Node_Str"" + createTableSB);
      this.db2.getConnection().createStatement().executeUpdate(createTableSB.toString());
    }
    log.info(""String_Node_Str"");
    DatabaseOperation.INSERT.execute(this.db2,data);
    log.info(""String_Node_Str"");
  }
  if (this.outFile != null) {
    FlatDtdDataSet.write(data,this.outFile);
  }
}","/** 
 * Clone a database
 * @throws SQLException error connecting
 * @throws DatabaseUnitException error
 * @throws IOException error resolving connections
 */
public void execute() throws SQLException, DatabaseUnitException, IOException {
  if (this.tableTypes == null || this.tableTypes.length == 0) {
    this.tableTypes=new String[]{""String_Node_Str""};
  }
  IDataSet data=getDataSet();
  if (this.db2 != null) {
    log.info(""String_Node_Str"");
    Connection db1conn=this.db1.getConnection();
    Connection db2conn=this.db2.getConnection();
    Map<Integer,Map<String,String>> inputDbTypes=getDbTypes(db1conn,""String_Node_Str"");
    Map<Integer,Map<String,String>> outputDbTypes=getDbTypes(db2conn,""String_Node_Str"");
    ResultSet tableData=db2conn.getMetaData().getTables(db2conn.getCatalog(),null,""String_Node_Str"",this.tableTypes);
    while (tableData.next()) {
      String db2tableName=tableData.getString(""String_Node_Str"");
      for (      String db1table : data.getTableNames()) {
        if (db1table.trim().equalsIgnoreCase(db2tableName.trim())) {
          log.debug(""String_Node_Str"" + db2tableName + ""String_Node_Str"");
          String sql=""String_Node_Str"" + db2tableName;
          log.trace(""String_Node_Str"" + sql);
          db2conn.createStatement().executeUpdate(sql);
        }
      }
    }
    for (    String table : data.getTableNames()) {
      log.debug(""String_Node_Str"" + table + ""String_Node_Str"");
      ResultSet columnRS=db1conn.getMetaData().getColumns(null,null,table,null);
      int count=0;
      StringBuilder createTableSB=new StringBuilder();
      createTableSB.append(""String_Node_Str"" + table + ""String_Node_Str"");
      while (columnRS.next()) {
        if (columnRS.getString(""String_Node_Str"").equals(table)) {
          String colName=columnRS.getString(""String_Node_Str"");
          log.debug(""String_Node_Str"" + colName + ""String_Node_Str"");
          Integer typeCode=Integer.valueOf(columnRS.getInt(""String_Node_Str""));
          int size=columnRS.getInt(""String_Node_Str"");
          if (!outputDbTypes.containsKey(typeCode)) {
            if (typeCode.intValue() == Types.BIT) {
              typeCode=Integer.valueOf(Types.BOOLEAN);
              size=0;
            }
 else {
              if (inputDbTypes.containsKey(typeCode)) {
                log.warn(""String_Node_Str"" + inputDbTypes.get(typeCode).get(""String_Node_Str"") + ""String_Node_Str"");
              }
 else {
                log.error(""String_Node_Str"" + typeCode + ""String_Node_Str"");
              }
              typeCode=Integer.valueOf(12);
            }
          }
 else {
            log.trace(""String_Node_Str"" + typeCode);
          }
          Map<String,String> map=outputDbTypes.get(typeCode);
          String typeName=map.get(""String_Node_Str"");
          String params=map.get(""String_Node_Str"");
          if (StringUtils.isBlank(params)) {
            params=map.get(""String_Node_Str"");
          }
          boolean needParam=(StringUtils.isNotBlank(params) && (size != 0));
          log.trace(""String_Node_Str"" + colName + ""String_Node_Str""+ typeCode+ ""String_Node_Str""+ typeName+ ((needParam) ? ""String_Node_Str"" + size + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
          if (count != 0) {
            createTableSB.append(',');
          }
          createTableSB.append(""String_Node_Str"");
          createTableSB.append(colName);
          createTableSB.append(""String_Node_Str"");
          createTableSB.append(typeName);
          if (needParam) {
            createTableSB.append(""String_Node_Str"");
            createTableSB.append(size);
            createTableSB.append(""String_Node_Str"");
          }
          count++;
        }
      }
      createTableSB.append(""String_Node_Str"");
      log.trace(""String_Node_Str"" + createTableSB);
      db2conn.createStatement().executeUpdate(createTableSB.toString());
    }
    log.info(""String_Node_Str"");
    DatabaseOperation.INSERT.execute(this.db2,data);
    log.info(""String_Node_Str"");
  }
  if (this.outFile != null) {
    FlatDtdDataSet.write(data,this.outFile);
  }
}",0.2909679657684746
12955,"/** 
 * Test method for   {@link org.vivoweb.harvester.util.DatabaseClone#execute() execute()}.
 * @throws Exception error
 */
public final void testExecute() throws Exception {
  new DatabaseClone(this.inputConn,null,this.outputConn,null,null,null,null).execute();
  Statement cursor=this.outputConn.createStatement();
  ResultSet rs=cursor.executeQuery(""String_Node_Str"");
  assertTrue(rs.next());
  int count=0;
  Set<String> ids=new HashSet<String>();
  ids.add(""String_Node_Str"");
  ids.add(""String_Node_Str"");
  ids.add(""String_Node_Str"");
  ids.add(""String_Node_Str"");
  do {
    assertTrue(ids.remove(rs.getString(""String_Node_Str"")));
    count++;
  }
 while (rs.next());
  assertEquals(4,count);
}","/** 
 * Test method for   {@link org.vivoweb.harvester.util.DatabaseClone#execute() execute()}.
 * @throws Exception error
 */
public final void testExecute() throws Exception {
  new DatabaseClone(this.inputConn,null,this.outputConn,null,null,null,null).execute();
  Statement cursor=this.outputConn.createStatement();
  ResultSet rs=cursor.executeQuery(""String_Node_Str"");
  assertTrue(rs.next());
  int count=0;
  Set<String> ids=new HashSet<String>();
  ids.add(""String_Node_Str"");
  ids.add(""String_Node_Str"");
  ids.add(""String_Node_Str"");
  ids.add(""String_Node_Str"");
  Map<String,String> current=new HashMap<String,String>();
  current.put(""String_Node_Str"",""String_Node_Str"");
  current.put(""String_Node_Str"",""String_Node_Str"");
  current.put(""String_Node_Str"",""String_Node_Str"");
  current.put(""String_Node_Str"",""String_Node_Str"");
  do {
    String deptid=rs.getString(""String_Node_Str"");
    log.trace(""String_Node_Str"" + deptid);
    assertTrue(ids.remove(deptid));
    String currentVal=current.get(deptid);
    log.trace(""String_Node_Str"" + currentVal);
    String is_current=Boolean.valueOf(rs.getBoolean(""String_Node_Str"")).toString().toUpperCase();
    log.trace(""String_Node_Str"" + is_current);
    assertEquals(currentVal,is_current);
    count++;
  }
 while (rs.next());
  assertEquals(4,count);
}",0.6663376110562685
12956,"@Override protected void setUp() throws Exception {
  InitLog.initLogger(null,null);
  Class.forName(inputDriverClass);
  this.inputConn=DriverManager.getConnection(inputConnLine,inputUsername,inputPassword);
  Class.forName(outputDriverClass);
  this.outputConn=DriverManager.getConnection(outputConnLine,outputUsername,outputPassword);
  Statement cursor=this.inputConn.createStatement();
  cursor.executeUpdate(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  cursor.executeUpdate(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Override protected void setUp() throws Exception {
  try {
    InitLog.initLogger(null,null);
    Class.forName(inputDriverClass);
    this.inputConn=DriverManager.getConnection(inputConnLine,inputUsername,inputPassword);
    Class.forName(outputDriverClass);
    this.outputConn=DriverManager.getConnection(outputConnLine,outputUsername,outputPassword);
    Statement cursor=this.inputConn.createStatement();
    cursor.executeUpdate(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    cursor.executeUpdate(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
 catch (  Exception e) {
    if (this.inputConn != null) {
      try {
        this.inputConn.createStatement().executeUpdate(""String_Node_Str"");
      }
 catch (      SQLException e2) {
      }
      try {
        this.inputConn.close();
      }
 catch (      SQLException e2) {
      }
    }
    if (this.outputConn != null) {
      try {
        this.outputConn.createStatement().executeUpdate(""String_Node_Str"");
      }
 catch (      SQLException e2) {
      }
      try {
        this.outputConn.close();
      }
 catch (      SQLException e2) {
      }
    }
    FileAide.delete(""String_Node_Str"");
    throw e;
  }
}",0.6846681922196797
12957,"/** 
 * Export all RDF
 * @param out output stream to write rdf to
 * @throws IOException error writing to stream
 */
public void exportRdfToStream(OutputStream out) throws IOException {
  RDFWriter fasterWriter=this.jenaModel.getWriter(""String_Node_Str"");
  fasterWriter.setProperty(""String_Node_Str"",""String_Node_Str"");
  fasterWriter.setProperty(""String_Node_Str"",""String_Node_Str"");
  fasterWriter.setProperty(""String_Node_Str"",""String_Node_Str"");
  OutputStreamWriter osw=new OutputStreamWriter(out,Charset.availableCharsets().get(""String_Node_Str""));
  fasterWriter.write(this.jenaModel,osw,""String_Node_Str"");
  osw.flush();
  out.flush();
}","/** 
 * Export all RDF
 * @param m the model to export from
 * @param out output stream to write rdf to
 * @param language the language the rdf is in. Predefined values for lang are ""RDF/XML"", ""N-TRIPLE"", ""TURTLE"" (or""TTL"") and ""N3"". null represents the default language, ""RDF/XML"". ""RDF/XML-ABBREV"" is a synonym for ""RDF/XML""
 * @throws IOException error writing to stream
 */
private static void exportRdfToStream(Model m,OutputStream out,String language) throws IOException {
  RDFWriter fasterWriter=m.getWriter(language);
  fasterWriter.setProperty(""String_Node_Str"",""String_Node_Str"");
  fasterWriter.setProperty(""String_Node_Str"",""String_Node_Str"");
  fasterWriter.setProperty(""String_Node_Str"",""String_Node_Str"");
  OutputStreamWriter osw=new OutputStreamWriter(out,Charset.availableCharsets().get(""String_Node_Str""));
  fasterWriter.write(m,osw,""String_Node_Str"");
  osw.flush();
  out.flush();
}",0.7237604636188023
12958,"/** 
 * Export the RDF to a file
 * @param fileName the file to write to
 * @param append append to the file
 * @throws IOException error writing to file
 */
public void exportRdfToFile(String fileName,boolean append) throws IOException {
  exportRdfToStream(FileAide.getOutputStream(fileName,append));
}","/** 
 * Export the RDF to a file
 * @param fileName the file to write to
 * @param language the language the rdf is in. Predefined values for lang are ""RDF/XML"", ""N-TRIPLE"", ""TURTLE"" (or""TTL"") and ""N3"". null represents the default language, ""RDF/XML"". ""RDF/XML-ABBREV"" is a synonym for ""RDF/XML""
 * @param append append to the file
 * @throws IOException error writing to file
 */
public void exportRdfToFile(String fileName,String language,boolean append) throws IOException {
  exportRdfToStream(FileAide.getOutputStream(fileName,append),language);
}",0.7102803738317757
12959,"/** 
 * Export all RDF
 * @return the rdf
 * @throws IOException error writing to string
 */
public String exportRdfToString() throws IOException {
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  exportRdfToStream(baos);
  return baos.toString();
}","/** 
 * Export all RDF
 * @param language the language the rdf is in. Predefined values for lang are ""RDF/XML"", ""N-TRIPLE"", ""TURTLE"" (or""TTL"") and ""N3"". null represents the default language, ""RDF/XML"". ""RDF/XML-ABBREV"" is a synonym for ""RDF/XML""
 * @return the rdf
 * @throws IOException error writing to string
 */
public String exportRdfToString(String language) throws IOException {
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  exportRdfToStream(baos,language);
  return baos.toString();
}",0.6779661016949152
12960,"/** 
 * Execute a Query
 * @param queryParam the query
 * @param resultFormatParam the format to return the results in ('RS_TEXT' default for select queries / 'RDF/XML'default for construct/describe queries)
 * @param output output stream to write to - null uses System.out
 * @param datasetMode run against dataset rather than model
 * @throws IOException error writing to output
 */
public void executeQuery(String queryParam,String resultFormatParam,OutputStream output,boolean datasetMode) throws IOException {
  OutputStream out=(output != null) ? output : System.out;
  QueryExecution qe=null;
  try {
    Query query=QueryFactory.create(queryParam,Syntax.syntaxARQ);
    if (datasetMode) {
      qe=QueryExecutionFactory.create(query,getDataset());
    }
 else {
      qe=QueryExecutionFactory.create(query,getJenaModel());
    }
    if (query.isSelectType()) {
      ResultSetFormat rsf=formatSymbols.get(resultFormatParam);
      if (rsf == null) {
        rsf=ResultSetFormat.syntaxText;
      }
      ResultSetFormatter.output(out,qe.execSelect(),rsf);
    }
 else     if (query.isAskType()) {
      out.write((Boolean.toString(qe.execAsk()) + ""String_Node_Str"").getBytes());
    }
 else {
      Model resultModel=null;
      if (query.isConstructType()) {
        resultModel=qe.execConstruct();
      }
 else       if (query.isDescribeType()) {
        resultModel=qe.execDescribe();
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      resultModel.write(out,resultFormatParam);
    }
  }
 catch (  QueryParseException e1) {
    try {
      executeUpdateQuery(queryParam,datasetMode);
      log.info(""String_Node_Str"");
    }
 catch (    QueryParseException e2) {
      log.error(""String_Node_Str"" + queryParam);
      log.trace(""String_Node_Str"",e1);
      log.trace(""String_Node_Str"",e2);
    }
  }
 finally {
    if (qe != null) {
      qe.close();
    }
  }
}","/** 
 * Execute a Query
 * @param queryParam the query
 * @param resultFormatParam the format to return the results in ('RS_TEXT' default for select queries / 'RDF/XML'default for construct/describe queries)
 * @param output output stream to write to - null uses System.out
 * @param datasetMode run against dataset rather than model
 * @throws IOException error writing to output
 */
public void executeQuery(String queryParam,String resultFormatParam,OutputStream output,boolean datasetMode) throws IOException {
  OutputStream out=(output != null) ? output : System.out;
  QueryExecution qe=null;
  try {
    Query query=QueryFactory.create(queryParam,Syntax.syntaxARQ);
    if (datasetMode) {
      qe=QueryExecutionFactory.create(query,getDataset());
    }
 else {
      qe=QueryExecutionFactory.create(query,getJenaModel());
    }
    if (query.isSelectType()) {
      ResultSetFormat rsf=formatSymbols.get(resultFormatParam);
      if (rsf == null) {
        rsf=ResultSetFormat.syntaxText;
      }
      ResultSetFormatter.output(out,qe.execSelect(),rsf);
    }
 else     if (query.isAskType()) {
      out.write((Boolean.toString(qe.execAsk()) + ""String_Node_Str"").getBytes());
    }
 else {
      Model resultModel=null;
      if (query.isConstructType()) {
        resultModel=qe.execConstruct();
      }
 else       if (query.isDescribeType()) {
        resultModel=qe.execDescribe();
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      exportRdfToStream(resultModel,out,resultFormatParam);
    }
  }
 catch (  QueryParseException e1) {
    try {
      executeUpdateQuery(queryParam,datasetMode);
      log.info(""String_Node_Str"");
    }
 catch (    QueryParseException e2) {
      log.error(""String_Node_Str"" + queryParam);
      log.trace(""String_Node_Str"",e1);
      log.trace(""String_Node_Str"",e2);
    }
  }
 finally {
    if (qe != null) {
      qe.close();
    }
  }
}",0.9932362122788762
12961,"/** 
 * Execute is that method where the smushResoures method is ran for each predicate.
 */
public void execute(){
  Model outModel=this.outputJena.getJenaModel();
  for (  String runName : this.inputPredicates) {
    JenaConnect results=smushResources(this.inputJena,runName,this.namespace);
    outModel.add(results.getJenaModel());
  }
  if (this.inPlace) {
    JenaConnect additions=new MemJenaConnect();
    JenaConnect subtractions=new MemJenaConnect();
    Diff.diff(this.inputJena,this.outputJena,subtractions,null);
    Diff.diff(this.outputJena,this.inputJena,additions,null);
    this.inputJena.removeRdfFromJC(subtractions);
    this.inputJena.loadRdfFromJC(additions);
  }
}","/** 
 * Execute is that method where the smushResoures method is ran for each predicate.
 */
public void execute(){
  Model outModel=this.outputJena.getJenaModel();
  for (  String runName : this.inputPredicates) {
    JenaConnect results=smushResources(this.inputJena,runName,this.namespace);
    outModel.add(results.getJenaModel());
  }
  if (this.inPlace) {
    JenaConnect additions=new MemJenaConnect();
    JenaConnect subtractions=new MemJenaConnect();
    try {
      Diff.diff(this.inputJena,this.outputJena,subtractions,null);
      Diff.diff(this.outputJena,this.inputJena,additions,null);
    }
 catch (    FileSystemException e) {
      log.debug(e.getMessage(),e);
    }
    this.inputJena.removeRdfFromJC(subtractions);
    this.inputJena.loadRdfFromJC(additions);
  }
}",0.9335142469470828
12962,"/** 
 * Checks to make sure the bibutils base path is a directory and the input format is one of the acceptable values.  If not, log errors and explode.
 * @throws RuntimeException if either input path or output path is not a directory
 */
private void checkValidInputs(){
  File bibutilsBaseDir=new File(this.bibutilsBasePath);
  String errorMessage=""String_Node_Str"";
  if (!bibutilsBaseDir.isDirectory()) {
    String oneLineError=""String_Node_Str"" + this.bibutilsBasePath;
    log.error(oneLineError);
    errorMessage+=oneLineError + ""String_Node_Str"";
  }
  if (Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").contains(this.inputFormat)) {
    String oneLineError=""String_Node_Str"" + this.inputFormat;
    log.error(oneLineError);
    errorMessage+=oneLineError + ""String_Node_Str"";
  }
  if (!errorMessage.equals(""String_Node_Str"")) {
    errorMessage=errorMessage.substring(0,errorMessage.length() - 1);
    throw new RuntimeException(errorMessage);
  }
}","/** 
 * Checks to make sure the bibutils base path is a directory and the input format is one of the acceptable values.  If not, log errors and explode.
 * @throws RuntimeException if either input path or output path is not a directory
 */
private void checkValidInputs(){
  File bibutilsBaseDir=new File(this.bibutilsBasePath);
  String errorMessage=""String_Node_Str"";
  if (!bibutilsBaseDir.isDirectory()) {
    String oneLineError=""String_Node_Str"" + this.bibutilsBasePath;
    log.error(oneLineError);
    errorMessage+=oneLineError + ""String_Node_Str"";
  }
  if (!Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").contains(this.inputFormat)) {
    String oneLineError=""String_Node_Str"" + this.inputFormat;
    log.error(oneLineError);
    errorMessage+=oneLineError + ""String_Node_Str"";
  }
  if (!errorMessage.equals(""String_Node_Str"")) {
    errorMessage=errorMessage.substring(0,errorMessage.length() - 1);
    throw new RuntimeException(errorMessage);
  }
}",0.9995346672871104
12963,"/** 
 * Converts all special characters to encoded-entities
 * @param s input string
 * @param encodeType the type of encoding
 * @param exceptions force these characters to be encoded
 * @return encoded string
 */
private static String encode(String s,String encodeType,char... exceptions){
  Map<String,String> encodeMap;
  List<Character> accept=new LinkedList<Character>(getAcceptedChars());
  for (  char c : exceptions) {
    accept.remove(Character.valueOf(c));
  }
  if (encodeType.equalsIgnoreCase(""String_Node_Str"")) {
    encodeMap=getHtmlEncode();
  }
 else   if (encodeType.equalsIgnoreCase(""String_Node_Str"")) {
    encodeMap=getXmlEncode();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  StringBuilder b=new StringBuilder(s.length());
  for (int i=0; i < s.length(); i++) {
    char ch=s.charAt(i);
    if (accept.contains(Character.valueOf(ch))) {
      b.append(ch);
    }
 else {
      StringBuilder b2=new StringBuilder();
      if (Character.isWhitespace(ch)) {
        b2.append(""String_Node_Str"").append((int)ch).append(""String_Node_Str"");
      }
 else       if (Character.isISOControl(ch)) {
      }
 else       if (Character.isHighSurrogate(ch)) {
        int codePoint;
        if (i + 1 < s.length() && Character.isSurrogatePair(ch,s.charAt(i + 1)) && Character.isDefined(codePoint=(Character.toCodePoint(ch,s.charAt(i + 1))))) {
          b2.append(""String_Node_Str"").append(codePoint).append(""String_Node_Str"");
        }
        i++;
      }
 else       if (Character.isLowSurrogate(ch)) {
        i++;
      }
 else       if (Character.isDefined(ch)) {
        b2.append(""String_Node_Str"").append((int)ch).append(""String_Node_Str"");
      }
      if (encodeMap.containsKey(b2.toString())) {
        b.append(encodeMap.get(b2.toString()));
      }
 else {
        b.append(b2.toString());
      }
    }
  }
  return b.toString();
}","/** 
 * Converts all special characters to encoded-entities
 * @param s input string
 * @param encodeType the type of encoding
 * @param exceptions force these characters to be encoded
 * @return encoded string
 */
private static String encode(String s,String encodeType,char... exceptions){
  Map<String,String> encodeMap;
  List<Character> accept=new LinkedList<Character>(getAcceptedChars());
  for (  char c : exceptions) {
    accept.remove(Character.valueOf(c));
  }
  if (encodeType.equalsIgnoreCase(""String_Node_Str"")) {
    encodeMap=getHtmlEncode();
  }
 else   if (encodeType.equalsIgnoreCase(""String_Node_Str"")) {
    encodeMap=getXmlEncode();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  StringBuilder b=new StringBuilder(s.length());
  for (int i=0; i < s.length(); i++) {
    char ch=s.charAt(i);
    if (accept.contains(Character.valueOf(ch))) {
      b.append(ch);
    }
 else {
      StringBuilder b2=new StringBuilder();
      if (Character.isISOControl(ch)) {
      }
 else       if (Character.isWhitespace(ch)) {
        b2.append(""String_Node_Str"").append((int)ch).append(""String_Node_Str"");
      }
 else       if (Character.isHighSurrogate(ch)) {
        int codePoint;
        if (i + 1 < s.length() && Character.isSurrogatePair(ch,s.charAt(i + 1)) && Character.isDefined(codePoint=(Character.toCodePoint(ch,s.charAt(i + 1))))) {
          b2.append(""String_Node_Str"").append(codePoint).append(""String_Node_Str"");
        }
        i++;
      }
 else       if (Character.isLowSurrogate(ch)) {
        i++;
      }
 else       if (Character.isDefined(ch)) {
        b2.append(""String_Node_Str"").append((int)ch).append(""String_Node_Str"");
      }
      if (encodeMap.containsKey(b2.toString())) {
        b.append(encodeMap.get(b2.toString()));
      }
 else {
        b.append(b2.toString());
      }
    }
  }
  return b.toString();
}",0.9714436805922791
12964,"/** 
 * Executes the task
 * @throws IOException error processing record handler or jdbc connection
 */
public void execute() throws IOException {
  try {
    for (    String tableName : getTableNames()) {
      StringBuilder sb=new StringBuilder();
      ResultSet rs=this.cursor.executeQuery(buildSelect(tableName));
      while (rs.next()) {
        StringBuilder recID=new StringBuilder();
        recID.append(""String_Node_Str"");
        for (        String idField : getIDFields(tableName)) {
          recID.append(""String_Node_Str"");
          String id=rs.getString(idField);
          if (id != null) {
            id=id.trim();
          }
          id=SpecialEntities.xmlEncode(id);
          recID.append(id);
        }
        String tableNS=""String_Node_Str"" + tableName;
        sb=new StringBuilder();
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(tableNS);
        sb.append(""String_Node_Str"");
        sb.append(buildTableFieldNS(tableName));
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(buildTableRecordNS(tableName));
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(recID);
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(buildTableType(tableName));
        sb.append(""String_Node_Str"");
        List<String> dataFieldList;
        if (this.queryStrings != null && this.queryStrings.containsKey(tableName)) {
          dataFieldList=getResultSetFields(rs);
        }
 else {
          dataFieldList=getDataFields(tableName);
        }
        for (        String dataField : dataFieldList) {
          String field=tableNS + ""String_Node_Str"" + dataField.replaceAll(""String_Node_Str"",""String_Node_Str"");
          sb.append(""String_Node_Str"");
          sb.append(field);
          sb.append(""String_Node_Str"");
          if (rs.getString(dataField) != null) {
            sb.append(SpecialEntities.xmlEncode(rs.getString(dataField).trim()));
          }
          sb.append(""String_Node_Str"");
          sb.append(field);
          sb.append(""String_Node_Str"");
        }
        for (        String relationField : getFkRelationFields(tableName).keySet()) {
          sb.append(""String_Node_Str"");
          sb.append(tableNS);
          sb.append(""String_Node_Str"");
          sb.append(relationField.replaceAll(""String_Node_Str"",""String_Node_Str""));
          sb.append(""String_Node_Str"");
          sb.append(this.buildTableRecordNS(getFkRelationFields(tableName).get(relationField)));
          sb.append(""String_Node_Str"" + rs.getString(relationField).trim());
          sb.append(""String_Node_Str"");
        }
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        log.trace(""String_Node_Str"" + tableName + ""String_Node_Str""+ recID);
        this.rh.addRecord(tableName + ""String_Node_Str"" + recID,sb.toString(),this.getClass());
      }
    }
  }
 catch (  SQLException e) {
    throw new IOException(e.getMessage(),e);
  }
}","/** 
 * Executes the task
 * @throws IOException error processing record handler or jdbc connection
 */
public void execute() throws IOException {
  try {
    for (    String tableName : getTableNames()) {
      StringBuilder sb=new StringBuilder();
      ResultSet rs=this.cursor.executeQuery(buildSelect(tableName));
      while (rs.next()) {
        StringBuilder recID=new StringBuilder();
        recID.append(""String_Node_Str"");
        for (        String idField : getIDFields(tableName)) {
          recID.append(""String_Node_Str"");
          String id=rs.getString(idField);
          if (id != null) {
            id=id.trim();
          }
          id=SpecialEntities.xmlEncode(id);
          recID.append(id);
        }
        String tableNS=""String_Node_Str"" + tableName;
        sb=new StringBuilder();
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(tableNS);
        sb.append(""String_Node_Str"");
        sb.append(buildTableFieldNS(tableName));
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(buildTableRecordNS(tableName));
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(recID);
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(buildTableType(tableName));
        sb.append(""String_Node_Str"");
        List<String> dataFieldList;
        if (this.queryStrings != null && this.queryStrings.containsKey(tableName)) {
          dataFieldList=getResultSetFields(rs);
        }
 else {
          dataFieldList=getDataFields(tableName);
        }
        for (        String dataField : dataFieldList) {
          String field=tableNS + ""String_Node_Str"" + dataField.replaceAll(""String_Node_Str"",""String_Node_Str"");
          sb.append(""String_Node_Str"");
          sb.append(SpecialEntities.xmlEncode(field));
          sb.append(""String_Node_Str"");
          if (rs.getString(dataField) != null) {
            sb.append(SpecialEntities.xmlEncode(rs.getString(dataField).trim()));
          }
          sb.append(""String_Node_Str"");
          sb.append(SpecialEntities.xmlEncode(field));
          sb.append(""String_Node_Str"");
        }
        for (        String relationField : getFkRelationFields(tableName).keySet()) {
          String field=tableNS + ""String_Node_Str"" + relationField.replaceAll(""String_Node_Str"",""String_Node_Str"");
          sb.append(""String_Node_Str"");
          sb.append(SpecialEntities.xmlEncode(field));
          sb.append(""String_Node_Str"");
          sb.append(this.buildTableRecordNS(getFkRelationFields(tableName).get(relationField)));
          sb.append(""String_Node_Str"" + rs.getString(relationField).trim());
          sb.append(""String_Node_Str"");
        }
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        log.trace(""String_Node_Str"" + tableName + ""String_Node_Str""+ recID);
        this.rh.addRecord(tableName + ""String_Node_Str"" + recID,sb.toString(),this.getClass());
      }
    }
  }
 catch (  SQLException e) {
    throw new IOException(e.getMessage(),e);
  }
}",0.9505800095344034
12965,"/** 
 * Get the fields from a result set
 * @param rs the resultset
 * @return the list of fields
 * @throws SQLException error reading resultset
 */
private List<String> getResultSetFields(ResultSet rs) throws SQLException {
  ResultSetMetaData rsmd=rs.getMetaData();
  int count=rsmd.getColumnCount();
  List<String> fields=new ArrayList<String>(count);
  for (int x=1; x <= count; x++) {
    fields.add(rsmd.getColumnName(x));
  }
  return fields;
}","/** 
 * Get the fields from a result set
 * @param rs the resultset
 * @return the list of fields
 * @throws SQLException error reading resultset
 */
private List<String> getResultSetFields(ResultSet rs) throws SQLException {
  ResultSetMetaData rsmd=rs.getMetaData();
  int count=rsmd.getColumnCount();
  List<String> fields=new ArrayList<String>(count);
  for (int x=1; x <= count; x++) {
    fields.add(rsmd.getColumnLabel(x));
  }
  return fields;
}",0.9900552486187846
12966,"/** 
 * Test EqualityTest Algorithm
 * @throws IOException error
 */
public void testEmailLastNameEqualityTest() throws IOException {
  log.info(""String_Node_Str"");
  HashMap<String,Class<? extends Algorithm>> algorithms=new HashMap<String,Class<? extends Algorithm>>();
  algorithms.put(""String_Node_Str"",EqualityTest.class);
  algorithms.put(""String_Node_Str"",NormalizedDoubleMetaphoneDifference.class);
  algorithms.put(""String_Node_Str"",NormalizedDoubleMetaphoneDifference.class);
  HashMap<String,String> inputPredicates=new HashMap<String,String>();
  inputPredicates.put(""String_Node_Str"",""String_Node_Str"");
  inputPredicates.put(""String_Node_Str"",""String_Node_Str"");
  inputPredicates.put(""String_Node_Str"",""String_Node_Str"");
  HashMap<String,String> vivoPredicates=new HashMap<String,String>();
  vivoPredicates.put(""String_Node_Str"",""String_Node_Str"");
  vivoPredicates.put(""String_Node_Str"",""String_Node_Str"");
  vivoPredicates.put(""String_Node_Str"",""String_Node_Str"");
  HashMap<String,Double> weights=new HashMap<String,Double>();
  weights.put(""String_Node_Str"",Double.valueOf(1 / 2f));
  weights.put(""String_Node_Str"",Double.valueOf(4 / 6f));
  weights.put(""String_Node_Str"",Double.valueOf(2 / 6f));
  new Score(this.input,this.vivo,this.score,algorithms,inputPredicates,vivoPredicates,""String_Node_Str"",weights).execute();
  log.info(""String_Node_Str"");
}","/** 
 * Test EqualityTest Algorithm
 * @throws IOException error
 */
public void testEmailLastNameEqualityTest() throws IOException {
  log.info(""String_Node_Str"");
  HashMap<String,Class<? extends Algorithm>> algorithms=new HashMap<String,Class<? extends Algorithm>>();
  algorithms.put(""String_Node_Str"",EqualityTest.class);
  algorithms.put(""String_Node_Str"",NormalizedDoubleMetaphoneDifference.class);
  algorithms.put(""String_Node_Str"",NormalizedDoubleMetaphoneDifference.class);
  HashMap<String,String> inputPredicates=new HashMap<String,String>();
  inputPredicates.put(""String_Node_Str"",""String_Node_Str"");
  inputPredicates.put(""String_Node_Str"",""String_Node_Str"");
  inputPredicates.put(""String_Node_Str"",""String_Node_Str"");
  HashMap<String,String> vivoPredicates=new HashMap<String,String>();
  vivoPredicates.put(""String_Node_Str"",""String_Node_Str"");
  vivoPredicates.put(""String_Node_Str"",""String_Node_Str"");
  vivoPredicates.put(""String_Node_Str"",""String_Node_Str"");
  HashMap<String,Double> weights=new HashMap<String,Double>();
  weights.put(""String_Node_Str"",Double.valueOf(1 / 2f));
  weights.put(""String_Node_Str"",Double.valueOf(1 / 3f));
  weights.put(""String_Node_Str"",Double.valueOf(1 / 6f));
  new Score(this.input,this.vivo,this.score,algorithms,inputPredicates,vivoPredicates,""String_Node_Str"",weights).execute();
  log.debug(""String_Node_Str"" + this.score.exportRdfToString());
  log.info(""String_Node_Str"");
}",0.8452508004268944
12967,"/** 
 * Find all nodes in the given namepsace matching on the given predicates
 * @throws IOException error connecting to dataset
 */
private void match() throws IOException {
  StringBuilder sQuery=new StringBuilder(""String_Node_Str"" + ""String_Node_Str"");
  StringBuilder vivoOptionals=new StringBuilder();
  StringBuilder inputOptionals=new StringBuilder();
  List<String> filters=new ArrayList<String>();
  List<String> vivoUnions=new ArrayList<String>();
  List<String> inputUnions=new ArrayList<String>();
  for (  String runName : this.inputPredicates.keySet()) {
    String inputProperty=this.inputPredicates.get(runName);
    String vivoProperty=this.vivoPredicates.get(runName);
    sQuery.append(""String_Node_Str"" + runName);
    sQuery.append(""String_Node_Str"" + runName);
    vivoUnions.add(""String_Node_Str"" + inputProperty + ""String_Node_Str""+ runName+ ""String_Node_Str"");
    vivoOptionals.append(""String_Node_Str"").append(inputProperty).append(""String_Node_Str"").append(""String_Node_Str"" + runName).append(""String_Node_Str"");
    inputUnions.add(""String_Node_Str"" + vivoProperty + ""String_Node_Str""+ runName+ ""String_Node_Str"");
    inputOptionals.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").append(vivoProperty).append(""String_Node_Str"").append(""String_Node_Str"" + runName).append(""String_Node_Str"" + ""String_Node_Str"");
    filters.add(""String_Node_Str"" + runName + ""String_Node_Str""+ runName+ ""String_Node_Str"");
  }
  sQuery.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  sQuery.append(""String_Node_Str"");
  sQuery.append(StringUtils.join(vivoUnions,""String_Node_Str""));
  sQuery.append(""String_Node_Str"");
  sQuery.append(vivoOptionals.toString());
  sQuery.append(""String_Node_Str"");
  sQuery.append(""String_Node_Str"" + ""String_Node_Str"");
  sQuery.append(StringUtils.join(inputUnions,""String_Node_Str""));
  sQuery.append(""String_Node_Str"");
  sQuery.append(inputOptionals.toString());
  sQuery.append(""String_Node_Str"");
  sQuery.append(""String_Node_Str"");
  sQuery.append(StringUtils.join(filters,""String_Node_Str""));
  sQuery.append(""String_Node_Str"");
  if (this.namespace != null) {
    sQuery.append(""String_Node_Str"" + this.namespace + ""String_Node_Str"");
  }
  sQuery.append(""String_Node_Str"");
  sQuery.append(""String_Node_Str"");
  log.debug(""String_Node_Str"" + sQuery.toString());
  JenaConnect unionModel=new MemJenaConnect();
  JenaConnect vivoClone=unionModel.neighborConnectClone(""String_Node_Str"");
  vivoClone.loadRdfFromJC(this.vivo);
  JenaConnect inputClone=unionModel.neighborConnectClone(""String_Node_Str"");
  inputClone.loadRdfFromJC(this.input);
  Dataset ds=unionModel.getConnectionDataSet();
  Query query=QueryFactory.create(sQuery.toString(),Syntax.syntaxARQ);
  QueryExecution queryExec=QueryExecutionFactory.create(query,ds);
  for (  QuerySolution solution : IterableAdaptor.adapt(queryExec.execSelect())) {
    String sInputURI=solution.getResource(""String_Node_Str"").getURI();
    String sVivoURI=solution.getResource(""String_Node_Str"").getURI();
    StringBuilder rdf=new StringBuilder();
    rdf.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + sVivoURI + ""String_Node_Str""+ ""String_Node_Str""+ sInputURI+ ""String_Node_Str"");
    log.debug(""String_Node_Str"" + sInputURI + ""String_Node_Str""+ sVivoURI+ ""String_Node_Str"");
    for (    String runName : this.vivoPredicates.keySet()) {
      RDFNode os=solution.get(""String_Node_Str"" + runName);
      RDFNode op=solution.get(""String_Node_Str"" + runName);
      log.debug(""String_Node_Str"" + runName + ""String_Node_Str""+ os);
      log.debug(""String_Node_Str"" + runName + ""String_Node_Str""+ op);
      double score=0 / 1;
      if (os != null && op != null) {
        if (os.isResource() && op.isResource() && os.asResource().getURI().equals(op.asResource().getURI())) {
          score=1 / 1;
        }
 else         if (os.isLiteral() && op.isLiteral()) {
          String osStrValue=os.asLiteral().getValue().toString();
          String opStrValue=op.asLiteral().getValue().toString();
          Algorithm alg;
          try {
            alg=this.algorithms.get(runName).newInstance();
          }
 catch (          IllegalAccessException e) {
            throw new IllegalArgumentException(e.getMessage(),e);
          }
catch (          InstantiationException e) {
            throw new IllegalArgumentException(e.getMessage(),e);
          }
          score=alg.calculate(osStrValue,opStrValue);
        }
      }
      double weight=this.weights.get(runName).doubleValue();
      rdf.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + this.vivoPredicates.get(runName) + ""String_Node_Str""+ ""String_Node_Str""+ this.inputPredicates.get(runName)+ ""String_Node_Str""+ ""String_Node_Str""+ this.algorithms.get(runName).getName()+ ""String_Node_Str""+ ""String_Node_Str""+ score+ ""String_Node_Str""+ ""String_Node_Str""+ weight+ ""String_Node_Str""+ ""String_Node_Str""+ (weight * score)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    rdf.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    log.debug(""String_Node_Str"" + sInputURI + ""String_Node_Str""+ sVivoURI+ ""String_Node_Str""+ rdf.toString());
    this.scoreData.loadRdfFromString(rdf.toString(),null,null);
  }
}","/** 
 * Find all nodes in the given namepsace matching on the given predicates
 * @throws IOException error connecting to dataset
 */
private void match() throws IOException {
  StringBuilder sQuery=new StringBuilder(""String_Node_Str"" + ""String_Node_Str"");
  StringBuilder vivoOptionals=new StringBuilder();
  StringBuilder inputOptionals=new StringBuilder();
  List<String> filters=new ArrayList<String>();
  List<String> vivoUnions=new ArrayList<String>();
  List<String> inputUnions=new ArrayList<String>();
  for (  String runName : this.inputPredicates.keySet()) {
    String vivoProperty=this.vivoPredicates.get(runName);
    String inputProperty=this.inputPredicates.get(runName);
    sQuery.append(""String_Node_Str"" + runName);
    sQuery.append(""String_Node_Str"" + runName);
    vivoUnions.add(""String_Node_Str"" + vivoProperty + ""String_Node_Str""+ runName+ ""String_Node_Str"");
    vivoOptionals.append(""String_Node_Str"").append(vivoProperty).append(""String_Node_Str"").append(""String_Node_Str"" + runName).append(""String_Node_Str"");
    inputUnions.add(""String_Node_Str"" + inputProperty + ""String_Node_Str""+ runName+ ""String_Node_Str"");
    inputOptionals.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").append(inputProperty).append(""String_Node_Str"").append(""String_Node_Str"" + runName).append(""String_Node_Str"" + ""String_Node_Str"");
    filters.add(""String_Node_Str"" + runName + ""String_Node_Str""+ runName+ ""String_Node_Str"");
  }
  sQuery.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  sQuery.append(""String_Node_Str"");
  sQuery.append(StringUtils.join(vivoUnions,""String_Node_Str""));
  sQuery.append(""String_Node_Str"");
  sQuery.append(vivoOptionals.toString());
  sQuery.append(""String_Node_Str"");
  sQuery.append(""String_Node_Str"" + ""String_Node_Str"");
  sQuery.append(StringUtils.join(inputUnions,""String_Node_Str""));
  sQuery.append(""String_Node_Str"");
  sQuery.append(inputOptionals.toString());
  sQuery.append(""String_Node_Str"");
  sQuery.append(""String_Node_Str"");
  sQuery.append(StringUtils.join(filters,""String_Node_Str""));
  sQuery.append(""String_Node_Str"");
  if (this.namespace != null) {
    sQuery.append(""String_Node_Str"" + this.namespace + ""String_Node_Str"");
  }
  sQuery.append(""String_Node_Str"");
  sQuery.append(""String_Node_Str"");
  log.debug(""String_Node_Str"" + sQuery.toString());
  JenaConnect unionModel=new MemJenaConnect();
  JenaConnect vivoClone=unionModel.neighborConnectClone(""String_Node_Str"");
  vivoClone.loadRdfFromJC(this.vivo);
  JenaConnect inputClone=unionModel.neighborConnectClone(""String_Node_Str"");
  inputClone.loadRdfFromJC(this.input);
  Dataset ds=unionModel.getConnectionDataSet();
  Query query=QueryFactory.create(sQuery.toString(),Syntax.syntaxARQ);
  QueryExecution queryExec=QueryExecutionFactory.create(query,ds);
  for (  QuerySolution solution : IterableAdaptor.adapt(queryExec.execSelect())) {
    String sInputURI=solution.getResource(""String_Node_Str"").getURI();
    String sVivoURI=solution.getResource(""String_Node_Str"").getURI();
    StringBuilder rdf=new StringBuilder();
    rdf.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + sVivoURI + ""String_Node_Str""+ ""String_Node_Str""+ sInputURI+ ""String_Node_Str"");
    log.debug(""String_Node_Str"" + sInputURI + ""String_Node_Str""+ sVivoURI+ ""String_Node_Str"");
    for (    String runName : this.vivoPredicates.keySet()) {
      RDFNode os=solution.get(""String_Node_Str"" + runName);
      RDFNode op=solution.get(""String_Node_Str"" + runName);
      double score=0 / 1;
      if (os != null && op != null) {
        if (os.isResource() && op.isResource() && os.asResource().getURI().equals(op.asResource().getURI())) {
          score=1 / 1;
        }
 else         if (os.isLiteral() && op.isLiteral()) {
          String osStrValue=os.asLiteral().getValue().toString();
          String opStrValue=op.asLiteral().getValue().toString();
          Algorithm alg;
          try {
            alg=this.algorithms.get(runName).newInstance();
          }
 catch (          IllegalAccessException e) {
            throw new IllegalArgumentException(e.getMessage(),e);
          }
catch (          InstantiationException e) {
            throw new IllegalArgumentException(e.getMessage(),e);
          }
          score=alg.calculate(osStrValue,opStrValue);
        }
      }
      log.trace(""String_Node_Str"" + runName + ""String_Node_Str""+ os+ ""String_Node_Str"");
      log.trace(""String_Node_Str"" + runName + ""String_Node_Str""+ op+ ""String_Node_Str"");
      log.trace(""String_Node_Str"" + score);
      double weight=this.weights.get(runName).doubleValue();
      rdf.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + this.vivoPredicates.get(runName) + ""String_Node_Str""+ ""String_Node_Str""+ this.inputPredicates.get(runName)+ ""String_Node_Str""+ ""String_Node_Str""+ this.algorithms.get(runName).getName()+ ""String_Node_Str""+ ""String_Node_Str""+ score+ ""String_Node_Str""+ ""String_Node_Str""+ weight+ ""String_Node_Str""+ ""String_Node_Str""+ (weight * score)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    rdf.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    this.scoreData.loadRdfFromString(rdf.toString(),null,null);
  }
}",0.8626174309366571
12968,"/** 
 * Remove all predicates in a given namespace
 * @param ns the namespace to remove all statements from
 */
private void rmNamespace(String ns){
  String predicateQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + ns + ""String_Node_Str""+ ""String_Node_Str"";
  log.debug(predicateQuery);
  ResultSet propList=this.model.executeSelectQuery(predicateQuery);
  HashSet<Property> propArray=new HashSet<Property>();
  while (propList.hasNext()) {
    QuerySolution solution=propList.next();
    Resource pres=solution.getResource(""String_Node_Str"");
    Property p=pres.as(Property.class);
    propArray.add(p);
  }
  for (  Property p : propArray) {
    this.model.getJenaModel().removeAll(null,p,null);
  }
  this.model.getJenaModel().commit();
  log.info(""String_Node_Str"" + propArray.size() + ""String_Node_Str"");
}","/** 
 * Remove all predicates in a given namespace
 * @param ns the namespace to remove all statements from
 */
private void rmNamespace(String ns){
  String predicateQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + ns + ""String_Node_Str""+ ""String_Node_Str"";
  log.debug(predicateQuery);
  ResultSet propList=this.model.executeSelectQuery(predicateQuery);
  HashSet<Property> propArray=new HashSet<Property>();
  while (propList.hasNext()) {
    propArray.add(ResourceFactory.createProperty(propList.next().getResource(""String_Node_Str"").getURI()));
  }
  for (  Property p : propArray) {
    this.model.getJenaModel().removeAll(null,p,null);
  }
  this.model.getJenaModel().commit();
  log.info(""String_Node_Str"" + propArray.size() + ""String_Node_Str"");
}",0.6491959499702203
12969,"@Override protected void setUp() throws Exception {
  InitLog.initLogger(DiffTest.class);
  this.previousRDF=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  this.incomingRDF=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  this.expectedAddRDF=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  this.expectedSubRDF=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
}","@Override protected void setUp() throws Exception {
  InitLog.initLogger(DiffTest.class);
  this.previousRDF=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  this.incomingRDF=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  this.expectedAddRDF=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  this.expectedSubRDF=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
}",0.929368029739777
12970,"/** 
 * @throws IOException error
 */
public void testDiff() throws IOException {
  log.info(""String_Node_Str"");
  JenaConnect diffJC;
  try {
    diffJC=new SDBJenaConnect(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    throw new IOException(e.getMessage(),e);
  }
  JenaConnect previousJC=diffJC.neighborConnectClone(""String_Node_Str"");
  previousJC.loadRdfFromString(this.previousRDF,null,null);
  JenaConnect incomingJC=diffJC.neighborConnectClone(""String_Node_Str"");
  incomingJC.loadRdfFromString(this.incomingRDF,null,null);
  Diff.diff(incomingJC,previousJC,diffJC,null);
  assertEquals(this.expectedAddRDF,diffJC.getJenaModel().difference(new MemJenaConnect(new ByteArrayInputStream(this.expectedAddRDF.getBytes()),null,null).getJenaModel()).toString());
  diffJC.truncate();
  Diff.diff(previousJC,incomingJC,diffJC,null);
  assertEquals(this.expectedSubRDF,diffJC.getJenaModel().difference(new MemJenaConnect(new ByteArrayInputStream(this.expectedSubRDF.getBytes()),null,null).getJenaModel()).toString());
  log.info(""String_Node_Str"");
}","/** 
 * @throws IOException error
 */
public void testDiff() throws IOException {
  log.info(""String_Node_Str"");
  JenaConnect diffJC=new MemJenaConnect();
  JenaConnect previousJC=new MemJenaConnect(new ByteArrayInputStream(this.previousRDF.getBytes()),null,null);
  JenaConnect incomingJC=new MemJenaConnect(new ByteArrayInputStream(this.incomingRDF.getBytes()),null,null);
  JenaConnect expectedAddDiff=new MemJenaConnect(new ByteArrayInputStream(this.expectedAddRDF.getBytes()),null,null);
  JenaConnect expectedSubDiff=new MemJenaConnect(new ByteArrayInputStream(this.expectedSubRDF.getBytes()),null,null);
  Diff.diff(incomingJC,previousJC,diffJC,null);
  assertEquals(""String_Node_Str"",diffJC.getJenaModel().difference(expectedAddDiff.getJenaModel()).toString());
  diffJC=new MemJenaConnect();
  System.out.println(diffJC.getJenaModel().toString());
  Diff.diff(previousJC,incomingJC,diffJC,null);
  assertEquals(""String_Node_Str"",diffJC.getJenaModel().difference(expectedSubDiff.getJenaModel()).toString());
  log.info(""String_Node_Str"");
}",0.289568345323741
12971,"/** 
 * Called before every test case method.
 */
@Override protected void setUp(){
  InitLog.initLogger(ScoreTest.class);
  try {
    this.scoreInput=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    BufferedWriter out=new BufferedWriter(new FileWriter(this.scoreInput));
    out.write(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    out.close();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
  try {
    this.vivoRDF=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    BufferedWriter out=new BufferedWriter(new FileWriter(this.vivoRDF));
    out.write(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    out.close();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
  try {
    this.vivoXML=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    BufferedWriter out=new BufferedWriter(new FileWriter(this.vivoXML));
    out.write(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    out.close();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
}","/** 
 * Called before every test case method.
 */
@Override protected void setUp(){
  InitLog.initLogger(ScoreTest.class);
  try {
    this.scoreInput=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    BufferedWriter out=new BufferedWriter(new FileWriter(this.scoreInput));
    out.write(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    out.close();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
  try {
    this.vivoRDF=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    BufferedWriter out=new BufferedWriter(new FileWriter(this.vivoRDF));
    out.write(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    out.close();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
  try {
    this.vivoXML=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    BufferedWriter out=new BufferedWriter(new FileWriter(this.vivoXML));
    out.write(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    out.close();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
}",0.9964485981308412
12972,"/** 
 * Test Scoring Algorithms
 * @throws IOException error
 */
public void testAlgorithims() throws IOException {
  log.info(""String_Node_Str"");
  Score Test;
  List<String> workEmail=Arrays.asList(""String_Node_Str"");
  List<String> blank=Arrays.asList();
  JenaConnect input;
  JenaConnect output;
  JenaConnect vivo;
  Properties inputProp=new Properties();
  inputProp.put(""String_Node_Str"",""String_Node_Str"");
  input=JenaConnect.parseConfig(this.vivoXML,inputProp);
  input.loadRdfFromStream(VFS.getManager().toFileObject(this.scoreInput).getContent().getInputStream(),null,null);
  Properties vivoProp=new Properties();
  vivoProp.put(""String_Node_Str"",""String_Node_Str"");
  vivo=JenaConnect.parseConfig(this.vivoXML,vivoProp);
  vivo.loadRdfFromStream(VFS.getManager().toFileObject(this.vivoRDF).getContent().getInputStream(),null,null);
  Properties outputProp=new Properties();
  outputProp.put(""String_Node_Str"",""String_Node_Str"");
  output=JenaConnect.parseConfig(this.vivoXML,outputProp);
  Test=new Score(input,vivo,output,false,false,blank,blank,blank,""String_Node_Str"",null,null,null);
  Test.execute();
  if (Test.getScoreOutput().getJenaModel().isEmpty()) {
    log.error(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
  Test.getScoreOutput().getJenaModel().removeAll();
  Test=new Score(input,vivo,output,false,false,workEmail,blank,blank,null,null,null,null);
  Test.execute();
  if (output.getJenaModel().isEmpty()) {
    log.error(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
  Test.getScoreOutput().getJenaModel().removeAll();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  input.getJenaModel().write(baos,""String_Node_Str"");
  baos.flush();
  baos.close();
  new Score(new String[]{""String_Node_Str"",this.vivoXML.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}).execute();
  if (output.getJenaModel().isEmpty()) {
    log.error(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
  output.getJenaModel().removeAll();
  new Score(new String[]{""String_Node_Str"",this.vivoXML.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}).execute();
  if (output.getJenaModel().containsLiteral(null,null,""String_Node_Str"")) {
    log.error(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
  Test.close();
  input.close();
  vivo.close();
  output.close();
  log.info(""String_Node_Str"");
}","/** 
 * Test Scoring Algorithms
 * @throws IOException error
 */
public void testAlgorithims() throws IOException {
  log.info(""String_Node_Str"");
  Score Test;
  List<String> workEmail=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  List<String> blank=Arrays.asList();
  JenaConnect input;
  JenaConnect output;
  JenaConnect vivo;
  Properties inputProp=new Properties();
  inputProp.put(""String_Node_Str"",""String_Node_Str"");
  input=JenaConnect.parseConfig(this.vivoXML,inputProp);
  input.loadRdfFromStream(VFS.getManager().toFileObject(this.scoreInput).getContent().getInputStream(),null,null);
  Properties vivoProp=new Properties();
  vivoProp.put(""String_Node_Str"",""String_Node_Str"");
  vivo=JenaConnect.parseConfig(this.vivoXML,vivoProp);
  vivo.loadRdfFromStream(VFS.getManager().toFileObject(this.vivoRDF).getContent().getInputStream(),null,null);
  Properties outputProp=new Properties();
  outputProp.put(""String_Node_Str"",""String_Node_Str"");
  output=JenaConnect.parseConfig(this.vivoXML,outputProp);
  Test=new Score(input,vivo,output,false,false,workEmail,true,""String_Node_Str"");
  Test.execute();
  if (output.getJenaModel().isEmpty()) {
    log.error(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
  Test.getScoreOutput().getJenaModel().removeAll();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  input.getJenaModel().write(baos,""String_Node_Str"");
  baos.flush();
  baos.close();
  new Score(new String[]{""String_Node_Str"",this.vivoXML.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}).execute();
  if (output.getJenaModel().isEmpty()) {
    log.error(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
  output.getJenaModel().removeAll();
  new Score(new String[]{""String_Node_Str"",this.vivoXML.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}).execute();
  if (output.getJenaModel().containsLiteral(null,null,""String_Node_Str"")) {
    log.error(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
  input.close();
  vivo.close();
  output.close();
  log.info(""String_Node_Str"");
}",0.9239391513210568
12973,"/** 
 * @param xmlFile	The file to Translate
 * @param xmlOutput	The expected Output
 * @throws IOException	FIXME
 * @throws ClassNotFoundException FIXME
 */
private void xslTranslateTest(String xmlFile,String xmlOutput,String mapFile) throws IOException, ClassNotFoundException {
  VFS.getManager().resolveFile(new File(""String_Node_Str""),""String_Node_Str"").createFolder();
  VFS.getManager().resolveFile(new File(""String_Node_Str""),""String_Node_Str"").createFolder();
  VFS.getManager().resolveFile(new File(""String_Node_Str""),""String_Node_Str"").createFolder();
  File inFile=new File(""String_Node_Str"");
  Writer output=new BufferedWriter(new FileWriter(inFile));
  output.write(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  output.close();
  File outFile=new File(""String_Node_Str"");
  output=new BufferedWriter(new FileWriter(outFile));
  output.write(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  output.close();
  TextFileRecordHandler rh=new TextFileRecordHandler(""String_Node_Str"");
  rh.addRecord(""String_Node_Str"",xmlFile,Class.forName(""String_Node_Str""));
  String[] argsToBePassed=new String[6];
  argsToBePassed[0]=""String_Node_Str"";
  argsToBePassed[1]=mapFile;
  argsToBePassed[2]=""String_Node_Str"";
  argsToBePassed[3]=""String_Node_Str"";
  argsToBePassed[4]=""String_Node_Str"";
  argsToBePassed[5]=""String_Node_Str"";
  XSLTranslator.main(argsToBePassed);
  File resultantOutput=new File(""String_Node_Str"");
  StringBuilder resultantXML=new StringBuilder(""String_Node_Str"");
  BufferedReader inputReader=new BufferedReader(new FileReader(resultantOutput));
  try {
    String line=null;
    while ((line=inputReader.readLine()) != null) {
      resultantXML.append(line);
    }
  }
  finally {
    inputReader.close();
  }
  assertEquals(resultantXML.toString(),xmlOutput);
  VFS.getManager().resolveFile(""String_Node_Str"").delete(new AllFileSelector());
  VFS.getManager().resolveFile(""String_Node_Str"").delete(new AllFileSelector());
  VFS.getManager().resolveFile(""String_Node_Str"").delete(new AllFileSelector());
}","/** 
 * @param xmlFile	The file to Translate
 * @param xmlOutput	The expected Output
 * @param mapFile FIXME
 * @throws IOException	FIXME
 * @throws ClassNotFoundException FIXME
 */
private void xslTranslateTest(String xmlFile,String xmlOutput,String mapFile) throws IOException, ClassNotFoundException {
  VFS.getManager().resolveFile(new File(""String_Node_Str""),""String_Node_Str"").createFolder();
  VFS.getManager().resolveFile(new File(""String_Node_Str""),""String_Node_Str"").createFolder();
  VFS.getManager().resolveFile(new File(""String_Node_Str""),""String_Node_Str"").createFolder();
  File inFile=new File(""String_Node_Str"");
  Writer output=new BufferedWriter(new FileWriter(inFile));
  output.write(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  output.close();
  File outFile=new File(""String_Node_Str"");
  output=new BufferedWriter(new FileWriter(outFile));
  output.write(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  output.close();
  TextFileRecordHandler rh=new TextFileRecordHandler(""String_Node_Str"");
  rh.addRecord(""String_Node_Str"",xmlFile,Class.forName(""String_Node_Str""));
  String[] argsToBePassed=new String[6];
  argsToBePassed[0]=""String_Node_Str"";
  argsToBePassed[1]=mapFile;
  argsToBePassed[2]=""String_Node_Str"";
  argsToBePassed[3]=""String_Node_Str"";
  argsToBePassed[4]=""String_Node_Str"";
  argsToBePassed[5]=""String_Node_Str"";
  XSLTranslator.main(argsToBePassed);
  File resultantOutput=new File(""String_Node_Str"");
  StringBuilder resultantXML=new StringBuilder(""String_Node_Str"");
  BufferedReader inputReader=new BufferedReader(new FileReader(resultantOutput));
  try {
    String line=null;
    while ((line=inputReader.readLine()) != null) {
      resultantXML.append(line);
    }
  }
  finally {
    inputReader.close();
  }
  assertEquals(resultantXML.toString(),xmlOutput);
  VFS.getManager().resolveFile(""String_Node_Str"").delete(new AllFileSelector());
  VFS.getManager().resolveFile(""String_Node_Str"").delete(new AllFileSelector());
  VFS.getManager().resolveFile(""String_Node_Str"").delete(new AllFileSelector());
}",0.9943235572374646
12974,"/** 
 * ` Executes an author name matching algorithm for author disambiguation
 * @param minChars minimum number of chars to require for first name portion of match 
 */
public void authorNameMatch(int minChars){
  String queryString;
  Resource paperResource;
  RDFNode lastNameNode;
  RDFNode foreNameNode;
  RDFNode paperNode;
  RDFNode authorNode=null;
  RDFNode matchNode=null;
  RDFNode loopNode;
  ResultSet vivoResult;
  QuerySolution scoreSolution;
  QuerySolution vivoSolution;
  ResultSet scoreInputResult;
  String scoreMatch;
  ArrayList<QuerySolution> matchNodes=new ArrayList<QuerySolution>();
  int loop;
  String matchQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  log.info(""String_Node_Str"");
  log.debug(matchQuery);
  scoreInputResult=executeQuery(this.scoreInput,matchQuery);
  if (!scoreInputResult.hasNext()) {
    log.info(""String_Node_Str"");
  }
 else {
    log.info(""String_Node_Str"");
  }
  while (scoreInputResult.hasNext()) {
    scoreSolution=scoreInputResult.next();
    lastNameNode=scoreSolution.get(""String_Node_Str"");
    foreNameNode=scoreSolution.get(""String_Node_Str"");
    paperNode=scoreSolution.get(""String_Node_Str"");
    paperResource=scoreSolution.getResource(""String_Node_Str"");
    matchNodes.clear();
    matchNode=null;
    authorNode=null;
    log.info(""String_Node_Str"" + lastNameNode.toString() + ""String_Node_Str""+ foreNameNode.toString()+ ""String_Node_Str""+ paperNode.toString()+ ""String_Node_Str"");
    scoreMatch=lastNameNode.toString();
    queryString=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + scoreMatch + ""String_Node_Str"";
    log.debug(queryString);
    vivoResult=executeQuery(this.vivo,queryString);
    while (vivoResult.hasNext()) {
      vivoSolution=vivoResult.next();
      log.trace(vivoSolution.toString());
      loopNode=vivoSolution.get(""String_Node_Str"");
      if (loopNode != null && foreNameNode != null) {
        log.trace(""String_Node_Str"" + loopNode);
        if (foreNameNode.toString().substring(0,1).equals(loopNode.toString().substring(0,1))) {
          matchNodes.add(vivoSolution);
        }
 else {
        }
      }
    }
    Iterator<QuerySolution> matches=matchNodes.iterator();
    while (matches.hasNext()) {
      vivoSolution=matches.next();
      loopNode=vivoSolution.get(""String_Node_Str"");
      loop=0;
      while (loopNode.toString().regionMatches(true,0,foreNameNode.toString(),0,loop)) {
        loop++;
      }
      loop--;
      if (loop < minChars) {
        log.trace(loopNode.toString() + ""String_Node_Str"" + loop+ ""String_Node_Str""+ foreNameNode.toString().length()+ ""String_Node_Str""+ minChars);
      }
 else {
        if (matchNode == null || !matchNode.toString().regionMatches(true,0,foreNameNode.toString(),0,loop)) {
          log.trace(""String_Node_Str"" + loopNode.toString() + ""String_Node_Str""+ loop+ ""String_Node_Str""+ foreNameNode.toString().length());
          matchNode=loopNode;
          authorNode=vivoSolution.get(""String_Node_Str"");
        }
      }
    }
    if (matchNode != null && authorNode != null) {
      log.trace(""String_Node_Str"" + matchNode.toString());
      commitResultNode(this.scoreOutput,authorNode,paperResource,matchNode,paperNode);
    }
  }
}","/** 
 * ` Executes an author name matching algorithm for author disambiguation
 * @param minChars minimum number of chars to require for first name portion of match 
 */
public void authorNameMatch(int minChars){
  String queryString;
  Resource paperResource;
  RDFNode lastNameNode;
  RDFNode foreNameNode;
  RDFNode paperNode;
  RDFNode authorNode=null;
  RDFNode matchNode=null;
  RDFNode loopNode;
  ResultSet vivoResult;
  QuerySolution scoreSolution;
  QuerySolution vivoSolution;
  ResultSet scoreInputResult;
  String scoreMatch;
  ArrayList<QuerySolution> matchNodes=new ArrayList<QuerySolution>();
  int loop;
  String matchQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  log.info(""String_Node_Str"");
  log.debug(matchQuery);
  scoreInputResult=executeQuery(this.scoreInput,matchQuery);
  if (!scoreInputResult.hasNext()) {
    log.info(""String_Node_Str"");
  }
 else {
    log.info(""String_Node_Str"");
  }
  while (scoreInputResult.hasNext()) {
    scoreSolution=scoreInputResult.next();
    lastNameNode=scoreSolution.get(""String_Node_Str"");
    foreNameNode=scoreSolution.get(""String_Node_Str"");
    paperNode=scoreSolution.get(""String_Node_Str"");
    paperResource=scoreSolution.getResource(""String_Node_Str"");
    matchNodes.clear();
    matchNode=null;
    authorNode=null;
    log.info(""String_Node_Str"" + lastNameNode.toString() + ""String_Node_Str""+ foreNameNode.toString()+ ""String_Node_Str""+ paperNode.toString()+ ""String_Node_Str"");
    scoreMatch=lastNameNode.toString();
    queryString=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + scoreMatch + ""String_Node_Str"";
    log.debug(queryString);
    vivoResult=executeQuery(this.vivo,queryString);
    while (vivoResult.hasNext()) {
      vivoSolution=vivoResult.next();
      log.trace(vivoSolution.toString());
      loopNode=vivoSolution.get(""String_Node_Str"");
      if (loopNode.toString() != null && foreNameNode.toString() != null) {
        log.trace(""String_Node_Str"" + loopNode);
        if (foreNameNode.toString().substring(0,1).equals(loopNode.toString().substring(0,1))) {
          matchNodes.add(vivoSolution);
        }
 else {
        }
      }
    }
    Iterator<QuerySolution> matches=matchNodes.iterator();
    while (matches.hasNext()) {
      vivoSolution=matches.next();
      loopNode=vivoSolution.get(""String_Node_Str"");
      loop=0;
      while (loopNode.toString().regionMatches(true,0,foreNameNode.toString(),0,loop)) {
        loop++;
      }
      loop--;
      if (loop < minChars) {
        log.trace(loopNode.toString() + ""String_Node_Str"" + loop+ ""String_Node_Str""+ foreNameNode.toString().length()+ ""String_Node_Str""+ minChars);
      }
 else {
        if (matchNode == null || !matchNode.toString().regionMatches(true,0,foreNameNode.toString(),0,loop)) {
          log.trace(""String_Node_Str"" + loopNode.toString() + ""String_Node_Str""+ loop+ ""String_Node_Str""+ foreNameNode.toString().length());
          matchNode=loopNode;
          authorNode=vivoSolution.get(""String_Node_Str"");
        }
      }
    }
    if (matchNode != null && authorNode != null) {
      log.trace(""String_Node_Str"" + matchNode.toString());
      commitResultNode(this.scoreOutput,authorNode,paperResource,matchNode,paperNode);
    }
  }
}",0.9966504263093788
12975,"/** 
 * ` Executes an author name matching algorithm for author disambiguation
 * @param minChars minimum number of chars to require for first name portion of match 
 */
public void authorNameMatch(int minChars){
  String queryString;
  Resource paperResource;
  RDFNode lastNameNode;
  RDFNode foreNameNode;
  RDFNode paperNode;
  RDFNode authorNode=null;
  RDFNode matchNode=null;
  RDFNode loopNode;
  ResultSet vivoResult;
  QuerySolution scoreSolution;
  QuerySolution vivoSolution;
  ResultSet scoreInputResult;
  String scoreMatch;
  ArrayList<QuerySolution> matchNodes=new ArrayList<QuerySolution>();
  int loop;
  String matchQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  log.info(""String_Node_Str"");
  log.debug(matchQuery);
  scoreInputResult=executeQuery(this.scoreInput,matchQuery);
  if (!scoreInputResult.hasNext()) {
    log.info(""String_Node_Str"");
  }
 else {
    log.info(""String_Node_Str"");
  }
  while (scoreInputResult.hasNext()) {
    scoreSolution=scoreInputResult.next();
    lastNameNode=scoreSolution.get(""String_Node_Str"");
    foreNameNode=scoreSolution.get(""String_Node_Str"");
    paperNode=scoreSolution.get(""String_Node_Str"");
    paperResource=scoreSolution.getResource(""String_Node_Str"");
    matchNodes.clear();
    log.info(""String_Node_Str"" + lastNameNode.toString() + ""String_Node_Str""+ foreNameNode.toString()+ ""String_Node_Str""+ paperNode.toString()+ ""String_Node_Str"");
    scoreMatch=lastNameNode.toString();
    queryString=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + scoreMatch + ""String_Node_Str"";
    log.debug(queryString);
    vivoResult=executeQuery(this.vivo,queryString);
    while (vivoResult.hasNext()) {
      vivoSolution=vivoResult.next();
      log.trace(vivoSolution.toString());
      loopNode=vivoSolution.get(""String_Node_Str"");
      if (loopNode != null && foreNameNode != null) {
        log.trace(""String_Node_Str"" + loopNode);
        if (foreNameNode.toString().substring(0,1).equals(loopNode.toString().substring(0,1))) {
          matchNodes.add(vivoSolution);
        }
 else {
        }
      }
    }
    Iterator<QuerySolution> matches=matchNodes.iterator();
    while (matches.hasNext()) {
      vivoSolution=matches.next();
      loopNode=vivoSolution.get(""String_Node_Str"");
      loop=0;
      while (loopNode.toString().regionMatches(true,0,foreNameNode.toString(),0,loop)) {
        loop++;
      }
      loop--;
      if (loop < minChars) {
        log.trace(loopNode.toString() + ""String_Node_Str"" + loop+ ""String_Node_Str""+ foreNameNode.toString().length()+ ""String_Node_Str""+ minChars);
      }
 else {
        if (matchNode == null || !matchNode.toString().regionMatches(true,0,foreNameNode.toString(),0,loop)) {
          log.trace(""String_Node_Str"" + loopNode.toString() + ""String_Node_Str""+ loop+ ""String_Node_Str""+ foreNameNode.toString().length());
          matchNode=loopNode;
          authorNode=vivoSolution.get(""String_Node_Str"");
        }
      }
    }
    if (matchNode != null && authorNode != null) {
      log.trace(""String_Node_Str"" + matchNode.toString());
      commitResultNode(this.scoreOutput,authorNode,paperResource,matchNode,paperNode);
    }
  }
}","/** 
 * ` Executes an author name matching algorithm for author disambiguation
 * @param minChars minimum number of chars to require for first name portion of match 
 */
public void authorNameMatch(int minChars){
  String queryString;
  Resource paperResource;
  RDFNode lastNameNode;
  RDFNode foreNameNode;
  RDFNode paperNode;
  RDFNode authorNode=null;
  RDFNode matchNode=null;
  RDFNode loopNode;
  ResultSet vivoResult;
  QuerySolution scoreSolution;
  QuerySolution vivoSolution;
  ResultSet scoreInputResult;
  String scoreMatch;
  ArrayList<QuerySolution> matchNodes=new ArrayList<QuerySolution>();
  int loop;
  String matchQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  log.info(""String_Node_Str"");
  log.debug(matchQuery);
  scoreInputResult=executeQuery(this.scoreInput,matchQuery);
  if (!scoreInputResult.hasNext()) {
    log.info(""String_Node_Str"");
  }
 else {
    log.info(""String_Node_Str"");
  }
  while (scoreInputResult.hasNext()) {
    scoreSolution=scoreInputResult.next();
    lastNameNode=scoreSolution.get(""String_Node_Str"");
    foreNameNode=scoreSolution.get(""String_Node_Str"");
    paperNode=scoreSolution.get(""String_Node_Str"");
    paperResource=scoreSolution.getResource(""String_Node_Str"");
    matchNodes.clear();
    matchNode=null;
    authorNode=null;
    log.info(""String_Node_Str"" + lastNameNode.toString() + ""String_Node_Str""+ foreNameNode.toString()+ ""String_Node_Str""+ paperNode.toString()+ ""String_Node_Str"");
    scoreMatch=lastNameNode.toString();
    queryString=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + scoreMatch + ""String_Node_Str"";
    log.debug(queryString);
    vivoResult=executeQuery(this.vivo,queryString);
    while (vivoResult.hasNext()) {
      vivoSolution=vivoResult.next();
      log.trace(vivoSolution.toString());
      loopNode=vivoSolution.get(""String_Node_Str"");
      if (loopNode != null && foreNameNode != null) {
        log.trace(""String_Node_Str"" + loopNode);
        if (foreNameNode.toString().substring(0,1).equals(loopNode.toString().substring(0,1))) {
          matchNodes.add(vivoSolution);
        }
 else {
        }
      }
    }
    Iterator<QuerySolution> matches=matchNodes.iterator();
    while (matches.hasNext()) {
      vivoSolution=matches.next();
      loopNode=vivoSolution.get(""String_Node_Str"");
      loop=0;
      while (loopNode.toString().regionMatches(true,0,foreNameNode.toString(),0,loop)) {
        loop++;
      }
      loop--;
      if (loop < minChars) {
        log.trace(loopNode.toString() + ""String_Node_Str"" + loop+ ""String_Node_Str""+ foreNameNode.toString().length()+ ""String_Node_Str""+ minChars);
      }
 else {
        if (matchNode == null || !matchNode.toString().regionMatches(true,0,foreNameNode.toString(),0,loop)) {
          log.trace(""String_Node_Str"" + loopNode.toString() + ""String_Node_Str""+ loop+ ""String_Node_Str""+ foreNameNode.toString().length());
          matchNode=loopNode;
          authorNode=vivoSolution.get(""String_Node_Str"");
        }
      }
    }
    if (matchNode != null && authorNode != null) {
      log.trace(""String_Node_Str"" + matchNode.toString());
      commitResultNode(this.scoreOutput,authorNode,paperResource,matchNode,paperNode);
    }
  }
}",0.99369715603382
12976,"/** 
 * Get the OptionParser
 * @return the OptionParser
 */
private static ArgParser getParser(){
  ArgParser parser=new ArgParser(""String_Node_Str"");
  parser.addArgument(new ArgDef().setShortOption('i').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str"").withParameter(true,""String_Node_Str"").setRequired(true));
  parser.addArgument(new ArgDef().setShortOption('V').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str"").withParameter(true,""String_Node_Str"").setRequired(true));
  parser.addArgument(new ArgDef().setShortOption('T').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str"").withParameter(true,""String_Node_Str""));
  parser.addArgument(new ArgDef().setShortOption('O').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str"").withParameter(true,""String_Node_Str""));
  parser.addArgument(new ArgDef().setShortOption('e').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str"").withParameters(true,""String_Node_Str"").setDefaultValue(""String_Node_Str""));
  parser.addArgument(new ArgDef().setShortOption('p').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str"").withParameters(true,""String_Node_Str""));
  parser.addArgument(new ArgDef().setShortOption('a').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str"").withParameter(true,""String_Node_Str"").setDefaultValue(""String_Node_Str""));
  parser.addArgument(new ArgDef().setShortOption('r').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str"").withParameters(true,""String_Node_Str""));
  parser.addArgument(new ArgDef().setShortOption('t').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str"").withParameter(true,""String_Node_Str"").setDefaultValue(""String_Node_Str""));
  parser.addArgument(new ArgDef().setShortOption('o').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str"").withParameter(true,""String_Node_Str"").setDefaultValue(""String_Node_Str""));
  parser.addArgument(new ArgDef().setShortOption('f').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str""));
  parser.addArgument(new ArgDef().setShortOption('n').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str""));
  parser.addArgument(new ArgDef().setShortOption('k').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str""));
  return parser;
}","/** 
 * Get the OptionParser
 * @return the OptionParser
 */
private static ArgParser getParser(){
  ArgParser parser=new ArgParser(""String_Node_Str"");
  parser.addArgument(new ArgDef().setShortOption('i').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str"").withParameter(true,""String_Node_Str"").setRequired(true));
  parser.addArgument(new ArgDef().setShortOption('V').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str"").withParameter(true,""String_Node_Str"").setRequired(true));
  parser.addArgument(new ArgDef().setShortOption('T').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str"").withParameter(true,""String_Node_Str""));
  parser.addArgument(new ArgDef().setShortOption('O').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str"").withParameter(true,""String_Node_Str""));
  parser.addArgument(new ArgDef().setShortOption('e').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str"").withParameters(true,""String_Node_Str""));
  parser.addArgument(new ArgDef().setShortOption('p').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str"").withParameters(true,""String_Node_Str""));
  parser.addArgument(new ArgDef().setShortOption('a').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str"").withParameter(true,""String_Node_Str"").setDefaultValue(""String_Node_Str""));
  parser.addArgument(new ArgDef().setShortOption('r').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str"").withParameters(true,""String_Node_Str""));
  parser.addArgument(new ArgDef().setShortOption('t').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str"").withParameter(true,""String_Node_Str"").setDefaultValue(""String_Node_Str""));
  parser.addArgument(new ArgDef().setShortOption('o').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str"").withParameter(true,""String_Node_Str"").setDefaultValue(""String_Node_Str""));
  parser.addArgument(new ArgDef().setShortOption('f').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str""));
  parser.addArgument(new ArgDef().setShortOption('n').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str""));
  parser.addArgument(new ArgDef().setShortOption('k').setLongOpt(""String_Node_Str"").setDescription(""String_Node_Str""));
  return parser;
}",0.9922958397534668
12977,"/** 
 * Setter for model
 * @param configFileName the config file that describes the model to set
 * @throws IOException error connecting to model
 */
private void setModel(String configFileName) throws IOException {
  try {
    if (this.modelName != null) {
      this.model=(new JenaConnect(JenaConnect.parseConfig(configFileName),this.modelName)).getJenaModel();
    }
 else {
      this.model=JenaConnect.parseConfig(configFileName).getJenaModel();
    }
  }
 catch (  ParserConfigurationException e) {
    throw new IOException(e.getMessage(),e);
  }
catch (  SAXException e) {
    throw new IOException(e.getMessage(),e);
  }
catch (  IOException e) {
    throw new IOException(e.getMessage(),e);
  }
}","/** 
 * Setter for model
 * @param configFileName the config file that describes the model to set
 * @throws IOException error connecting to model
 */
private void setModel(String configFileName) throws IOException {
  try {
    if (this.modelName != null) {
      log.trace(""String_Node_Str"" + this.modelName + ""String_Node_Str"");
      this.model=(new JenaConnect(JenaConnect.parseConfig(configFileName),this.modelName)).getJenaModel();
    }
 else {
      this.model=JenaConnect.parseConfig(configFileName).getJenaModel();
    }
  }
 catch (  ParserConfigurationException e) {
    throw new IOException(e.getMessage(),e);
  }
catch (  SAXException e) {
    throw new IOException(e.getMessage(),e);
  }
catch (  IOException e) {
    throw new IOException(e.getMessage(),e);
  }
}",0.9509738079247816
12978,"/** 
 * Performs an ESearch against PubMed database and returns the query web environment/query key data
 * @param term The search term to run against pubmed
 * @param maxNumRecords The maximum number of records to fetch
 * @param retStart record number (out of the total - eg: '1200' out of 15000 records), not the PMID
 * @return String[] = {WebEnv, QueryKey, number of records found, first PMID} from the search - used by fetchPubMedEnv
 * @author Chris Haines
 * @author Dale Scheppler
 */
public String[] runESearch(String term,Integer maxNumRecords,Integer retStart){
  String[] env=new String[4];
  try {
    EUtilsServiceStub service=new EUtilsServiceStub();
    EUtilsServiceStub.ESearchRequest req=new EUtilsServiceStub.ESearchRequest();
    req.setDb(""String_Node_Str"");
    req.setTerm(term);
    req.setRetMax(maxNumRecords.toString());
    req.setRetStart(retStart.toString());
    req.setUsehistory(""String_Node_Str"");
    EUtilsServiceStub.ESearchResult res=service.run_eSearch(req);
    IdListType a=res.getIdList();
    String[] b=a.getId();
    int numRec=b.length;
    log.trace(""String_Node_Str"" + numRec + ""String_Node_Str"");
    env[0]=res.getWebEnv();
    env[1]=res.getQueryKey();
    env[2]=""String_Node_Str"" + res.getIdList().getId().length;
    env[3]=res.getIdList().getId()[0];
  }
 catch (  RemoteException e) {
    log.error(""String_Node_Str"",e);
  }
  return env;
}","/** 
 * Performs an ESearch against PubMed database and returns the query web environment/query key data
 * @param term The search term to run against pubmed
 * @param maxNumRecords The maximum number of records to fetch
 * @param retStart record number (out of the total - eg: '1200' out of 15000 records), not the PMID
 * @return String[] = {WebEnv, QueryKey, number of records found, first PMID} from the search - used by fetchPubMedEnv
 * @author Chris Haines
 * @author Dale Scheppler
 */
public String[] runESearch(String term,Integer maxNumRecords,Integer retStart){
  String[] env=new String[4];
  try {
    EUtilsServiceStub service=new EUtilsServiceStub();
    EUtilsServiceStub.ESearchRequest req=new EUtilsServiceStub.ESearchRequest();
    req.setDb(""String_Node_Str"");
    req.setTerm(term);
    req.setRetMax(maxNumRecords.toString());
    req.setRetStart(retStart.toString());
    req.setUsehistory(""String_Node_Str"");
    EUtilsServiceStub.ESearchResult res=service.run_eSearch(req);
    env[0]=res.getWebEnv();
    env[1]=res.getQueryKey();
    env[2]=""String_Node_Str"" + res.getIdList().getId().length;
    env[3]=res.getIdList().getId()[0];
    log.trace(""String_Node_Str"" + env[2] + ""String_Node_Str"");
  }
 catch (  RemoteException e) {
    log.error(""String_Node_Str"",e);
  }
  return env;
}",0.9221689413500552
12979,"@Override protected void runTask() throws NumberFormatException {
  Integer recToFetch;
  if (this.strMaxRecords.equalsIgnoreCase(""String_Node_Str"")) {
    recToFetch=Integer.valueOf(getHighestRecordNumber());
  }
 else {
    recToFetch=Integer.valueOf(this.strMaxRecords);
  }
  int intBatchSize=Integer.parseInt(this.strBatchSize);
  if (recToFetch.intValue() <= intBatchSize) {
    fetchPubMed(runESearch(this.strSearchTerm,recToFetch));
  }
 else {
    String[] env=runESearch(this.strSearchTerm,recToFetch);
    String WebEnv=env[0];
    String QueryKey=env[1];
    for (int x=recToFetch.intValue(); x > 0; x-=intBatchSize) {
      int maxRec=(x <= intBatchSize) ? x : intBatchSize;
      int startRec=recToFetch.intValue() - x;
      System.out.println(""String_Node_Str"" + maxRec);
      System.out.println(""String_Node_Str"" + startRec);
      fetchPubMed(WebEnv,QueryKey,startRec + ""String_Node_Str"",maxRec + ""String_Node_Str"");
    }
  }
}","@Override protected void runTask() throws NumberFormatException {
  Integer recToFetch;
  if (this.strMaxRecords.equalsIgnoreCase(""String_Node_Str"")) {
    recToFetch=Integer.valueOf(getHighestRecordNumber());
  }
 else {
    recToFetch=Integer.valueOf(this.strMaxRecords);
  }
  int intBatchSize=Integer.parseInt(this.strBatchSize);
  if (recToFetch.intValue() <= intBatchSize) {
    fetchPubMed(runESearch(this.strSearchTerm,recToFetch));
  }
 else {
    String[] env=runESearch(this.strSearchTerm,recToFetch);
    String WebEnv=env[0];
    String QueryKey=env[1];
    if (Integer.parseInt(env[2]) < recToFetch.intValue()) {
      recToFetch=Integer.getInteger(env[2]);
    }
    for (int x=recToFetch.intValue(); x > 0; x-=intBatchSize) {
      int maxRec=(x <= intBatchSize) ? x : intBatchSize;
      int startRec=recToFetch.intValue() - x;
      log.debug(""String_Node_Str"" + maxRec);
      log.debug(""String_Node_Str"" + startRec);
      fetchPubMed(WebEnv,QueryKey,startRec + ""String_Node_Str"",maxRec + ""String_Node_Str"");
    }
  }
}",0.9089079013588324
12980,"/** 
 * Sets the extended type.
 * @param extendedType
 */
public void setExtendedType(String extendedType){
  if (!isValid(extendedType)) {
    throw new RuntimeException(Messages.i18n.format(""String_Node_Str"",extendedType));
  }
  this.extendedType=extendedType;
}","/** 
 * Sets the extended type.
 * @param extendedType
 */
public void setExtendedType(String extendedType){
  if (extendedType != null && !isValid(extendedType)) {
    throw new RuntimeException(Messages.i18n.format(""String_Node_Str"",extendedType));
  }
  this.extendedType=extendedType;
}",0.9568345323741008
12981,"/** 
 * @see org.overlord.sramp.common.repository.PersistenceManager#persistOntology(org.overlord.sramp.common.ontology.SrampOntology)
 */
@Override public SrampOntology persistOntology(SrampOntology ontology) throws SrampException {
  Session session=null;
  if (ontology.getUuid() == null) {
    ontology.setUuid(UUID.randomUUID().toString());
  }
  String ontologyPath=MapToJCRPath.getOntologyPath(ontology.getUuid());
  try {
    session=JCRRepositoryFactory.getSession();
    if (session.nodeExists(ontologyPath)) {
      throw new OntologyAlreadyExistsException(ontology.getUuid());
    }
 else {
      JCRUtils tools=new JCRUtils();
      Node ontologiesNode=tools.findOrCreateNode(session,""String_Node_Str"",""String_Node_Str"");
      Node ontologyNode=ontologiesNode.addNode(ontology.getUuid(),""String_Node_Str"");
      o2jcr.write(ontology,ontologyNode);
      session.save();
      log.debug(Messages.i18n.format(""String_Node_Str"",ontology.getUuid()));
      return ontology;
    }
  }
 catch (  SrampException se) {
    throw se;
  }
catch (  Throwable t) {
    throw new SrampServerException(t);
  }
 finally {
    JCRRepositoryFactory.logoutQuietly(session);
  }
}","/** 
 * @see org.overlord.sramp.common.repository.PersistenceManager#persistOntology(org.overlord.sramp.common.ontology.SrampOntology)
 */
@Override public SrampOntology persistOntology(SrampOntology ontology) throws SrampException {
  Session session=null;
  if (ontology.getUuid() == null) {
    ontology.setUuid(UUID.randomUUID().toString());
  }
  String ontologyPath=MapToJCRPath.getOntologyPath(ontology.getUuid());
  List<SrampOntology> ontologies=getOntologies();
  for (  SrampOntology existingOntology : ontologies) {
    if (existingOntology.getBase().equals(ontology.getBase())) {
      throw new OntologyAlreadyExistsException();
    }
  }
  try {
    session=JCRRepositoryFactory.getSession();
    if (session.nodeExists(ontologyPath)) {
      throw new OntologyAlreadyExistsException(ontology.getUuid());
    }
 else {
      JCRUtils tools=new JCRUtils();
      Node ontologiesNode=tools.findOrCreateNode(session,""String_Node_Str"",""String_Node_Str"");
      Node ontologyNode=ontologiesNode.addNode(ontology.getUuid(),""String_Node_Str"");
      o2jcr.write(ontology,ontologyNode);
      session.save();
      log.debug(Messages.i18n.format(""String_Node_Str"",ontology.getUuid()));
      return ontology;
    }
  }
 catch (  SrampException se) {
    throw se;
  }
catch (  Throwable t) {
    throw new SrampServerException(t);
  }
 finally {
    JCRRepositoryFactory.logoutQuietly(session);
  }
}",0.9105691056910568
12982,"/** 
 * Called when the user clicks one of the ontologies in the list.
 * @param ontology
 * @param widget
 */
protected void onOntologyClicked(OntologySummaryBean ontology,Widget widget){
  if (widget == selectedOntologyWidget) {
    editor.setValue(null);
    widget.getElement().getParentElement().removeClassName(""String_Node_Str"");
    selectedOntologyWidget=null;
    return;
  }
  if (selectedOntologyWidget != null) {
    if (editor.isDirty()) {
      Window.alert(""String_Node_Str"");
      return;
    }
    selectedOntologyWidget.getElement().getParentElement().removeClassName(""String_Node_Str"");
    selectedOntologyWidget=null;
  }
  widget.getElement().getParentElement().addClassName(""String_Node_Str"");
  selectedOntologyWidget=widget;
  editor.clear();
  ontologyService.get(ontology.getUuid(),true,new IRpcServiceInvocationHandler<OntologyBean>(){
    @Override public void onReturn(    OntologyBean data){
      editor.setValue(data);
    }
    @Override public void onError(    Throwable error){
      notificationService.sendErrorNotification(i18n.format(""String_Node_Str""),error);
      editor.clear();
    }
  }
);
}","/** 
 * Called when the user clicks one of the ontologies in the list.
 * @param ontology
 * @param widget
 */
protected void onOntologyClicked(OntologySummaryBean ontology,Widget widget){
  if (widget == selectedOntologyWidget) {
    editor.setValue(null);
    widget.getElement().getParentElement().removeClassName(""String_Node_Str"");
    selectedOntologyWidget=null;
    return;
  }
  if (selectedOntologyWidget != null) {
    if (editor.isDirty()) {
      Window.alert(i18n.format(""String_Node_Str""));
      return;
    }
    selectedOntologyWidget.getElement().getParentElement().removeClassName(""String_Node_Str"");
    selectedOntologyWidget=null;
  }
  widget.getElement().getParentElement().addClassName(""String_Node_Str"");
  selectedOntologyWidget=widget;
  editor.clear();
  ontologyService.get(ontology.getUuid(),true,new IRpcServiceInvocationHandler<OntologyBean>(){
    @Override public void onReturn(    OntologyBean data){
      editor.setValue(data);
    }
    @Override public void onError(    Throwable error){
      notificationService.sendErrorNotification(i18n.format(""String_Node_Str""),error);
      editor.clear();
    }
  }
);
}",0.994325621999127
12983,"/** 
 * Tests the BRMS packages.
 * @throws Exception
 */
@Test public void testBrmsPackages() throws Exception {
  String artifactFileName=""String_Node_Str"";
  InputStream contentStream=this.getClass().getResourceAsStream(""String_Node_Str"" + artifactFileName);
  ClientRequest request=new ClientRequest(generateURL(""String_Node_Str""));
  request.header(""String_Node_Str"",artifactFileName);
  request.body(""String_Node_Str"",contentStream);
  ClientResponse<Entry> response=request.post(Entry.class);
  Entry entry=response.getEntity();
  BaseArtifactType arty=SrampAtomUtils.unwrapSrampArtifact(entry);
  ClientRequest request1=new ClientRequest(generateURL(""String_Node_Str""));
  ClientResponse<InputStream> response1=request1.get(InputStream.class);
  if (response1.getStatus() != 200) {
    throw new RuntimeException(""String_Node_Str"" + response1.getStatus());
  }
  InputStream in=response1.getEntity();
  File file=new File(""String_Node_Str"");
  OutputStream out=new FileOutputStream(file);
  IOUtils.copy(in,out);
  out.flush();
  IOUtils.closeQuietly(in);
  IOUtils.closeQuietly(out);
  ClientRequest request2=new ClientRequest(generateURL(""String_Node_Str""));
  ClientResponse<Packages> response2=request2.get(Packages.class);
  Packages packages=response2.getEntity();
  Assert.assertEquals(1,packages.getPackage().size());
  Assert.assertEquals(""String_Node_Str"",packages.getPackage().get(0).getTitle());
  Assert.assertTrue(arty instanceof ExtendedDocument);
  ExtendedDocument brmsPkgDocument=(ExtendedDocument)arty;
  Property assetsProperty=new Property();
  assetsProperty.setPropertyName(BrmsConstants.ASSET_INFO_XML);
  InputStream assetsInputStream=this.getClass().getResourceAsStream(""String_Node_Str"");
  String assetsXml=TestUtils.convertStreamToString(assetsInputStream);
  IOUtils.closeQuietly(assetsInputStream);
  assetsXml=assetsXml.replaceAll(""String_Node_Str"",""String_Node_Str"");
  assetsProperty.setPropertyValue(assetsXml);
  brmsPkgDocument.getProperty().add(assetsProperty);
  Entry entry3=new Entry();
  ClientRequest request3=new ClientRequest(generateURL(""String_Node_Str"" + brmsPkgDocument.getUuid()));
  Artifact artifact=new Artifact();
  artifact.setExtendedDocument(brmsPkgDocument);
  entry3.setAnyOtherJAXBObject(artifact);
  request3.body(MediaType.APPLICATION_ATOM_XML_ENTRY,entry3);
  request3.put(Void.class);
  ClientRequest request4=new ClientRequest(generateURL(""String_Node_Str""));
  ClientResponse<Assets> response4=request4.get(Assets.class);
  Assets assets=response4.getEntity();
  Assert.assertEquals(8,assets.getAsset().size());
  for (  Assets.Asset asset : assets.getAsset()) {
    String fileFormat=asset.getMetadata().getFormat().toLowerCase();
    if (fileFormat.equals(""String_Node_Str"")) {
    }
 else {
      String fileName=asset.getTitle() + ""String_Node_Str"" + asset.getMetadata().getFormat();
      String uuid=asset.getMetadata().getUuid();
      InputStream assetInputStream=this.getClass().getResourceAsStream(""String_Node_Str"" + fileName);
      @SuppressWarnings(""String_Node_Str"") ArtifactType artifactType=ArtifactType.fromFileExtension(asset.getMetadata().getFormat());
      BaseArtifactType baseArtifactType=artifactType.newArtifactInstance();
      baseArtifactType.setName(fileName);
      baseArtifactType.setUuid(uuid);
      String path=""String_Node_Str"" + artifactType.getModel() + ""String_Node_Str""+ artifactType.getType();
      ClientRequest request5=new ClientRequest(generateURL(path));
      MultipartRelatedOutput output=new MultipartRelatedOutput();
      Entry atomEntry=new Entry();
      MediaType mediaType=new MediaType(""String_Node_Str"",""String_Node_Str"");
      artifact=new Artifact();
      String methodStr=""String_Node_Str"" + artifactType.getArtifactType();
      Method method=artifact.getClass().getMethod(methodStr,artifactType.getArtifactType().getTypeClass());
      method.invoke(artifact,baseArtifactType);
      atomEntry.setAnyOtherJAXBObject(artifact);
      output.addPart(atomEntry,mediaType);
      MediaType mediaType2=MediaType.getInstance(artifactType.getMimeType());
      output.addPart(assetInputStream,mediaType2);
      System.out.println(""String_Node_Str"" + fileName + ""String_Node_Str""+ artifactType);
      request5.body(MultipartConstants.MULTIPART_RELATED,output);
      ClientResponse<Entry> assetResponse=request5.post(Entry.class);
      IOUtils.closeQuietly(assetInputStream);
      Entry assetEntry=assetResponse.getEntity();
      BaseArtifactType assetArtifact=SrampAtomUtils.unwrapSrampArtifact(assetEntry);
      System.out.println(""String_Node_Str"" + assetArtifact.getName() + ""String_Node_Str""+ assetArtifact.getUuid());
    }
  }
  ClientRequest request7=new ClientRequest(generateURL(""String_Node_Str""));
  ClientResponse<InputStream> response7=request7.get(InputStream.class);
  if (response1.getStatus() != 200) {
    throw new RuntimeException(""String_Node_Str"" + response.getStatus());
  }
  InputStream in7=response7.getEntity();
  File file7=new File(""String_Node_Str"");
  OutputStream out7=new FileOutputStream(file7);
  IOUtils.copy(in7,out7);
  out7.flush();
  IOUtils.closeQuietly(in7);
  IOUtils.closeQuietly(out7);
  Assert.assertTrue(file7.exists());
  long size=file7.length();
  Assert.assertTrue(size >= 12483L);
  ClientRequest request8=new ClientRequest(generateURL(""String_Node_Str""));
  ClientResponse<InputStream> response8=request8.get(InputStream.class);
  if (response1.getStatus() != 200) {
    throw new RuntimeException(""String_Node_Str"" + response.getStatus());
  }
  InputStream in8=response8.getEntity();
  File file8=new File(""String_Node_Str"");
  OutputStream out8=new FileOutputStream(file8);
  IOUtils.copy(in8,out8);
  out8.flush();
  IOUtils.closeQuietly(in8);
  IOUtils.closeQuietly(out8);
  Assert.assertTrue(file8.exists());
  Assert.assertEquals(14029l,file8.length());
}","/** 
 * Tests the BRMS packages.
 * @throws Exception
 */
@Test public void testBrmsPackages() throws Exception {
  String artifactFileName=""String_Node_Str"";
  InputStream contentStream=this.getClass().getResourceAsStream(""String_Node_Str"" + artifactFileName);
  ClientRequest request=new ClientRequest(generateURL(""String_Node_Str""));
  request.header(""String_Node_Str"",artifactFileName);
  request.body(""String_Node_Str"",contentStream);
  ClientResponse<Entry> response=request.post(Entry.class);
  Entry entry=response.getEntity();
  BaseArtifactType arty=SrampAtomUtils.unwrapSrampArtifact(entry);
  ClientRequest request1=new ClientRequest(generateURL(""String_Node_Str""));
  ClientResponse<InputStream> response1=request1.get(InputStream.class);
  if (response1.getStatus() != 200) {
    throw new RuntimeException(""String_Node_Str"" + response1.getStatus());
  }
  InputStream in=response1.getEntity();
  File file=new File(""String_Node_Str"");
  OutputStream out=new FileOutputStream(file);
  IOUtils.copy(in,out);
  out.flush();
  IOUtils.closeQuietly(in);
  IOUtils.closeQuietly(out);
  ClientRequest request2=new ClientRequest(generateURL(""String_Node_Str""));
  ClientResponse<Packages> response2=request2.get(Packages.class);
  Packages packages=response2.getEntity();
  Assert.assertEquals(1,packages.getPackage().size());
  Assert.assertEquals(""String_Node_Str"",packages.getPackage().get(0).getTitle());
  Assert.assertTrue(arty instanceof ExtendedDocument);
  ExtendedDocument brmsPkgDocument=(ExtendedDocument)arty;
  Property assetsProperty=new Property();
  assetsProperty.setPropertyName(BrmsConstants.ASSET_INFO_XML);
  InputStream assetsInputStream=this.getClass().getResourceAsStream(""String_Node_Str"");
  String assetsXml=TestUtils.convertStreamToString(assetsInputStream);
  IOUtils.closeQuietly(assetsInputStream);
  assetsXml=assetsXml.replaceAll(""String_Node_Str"",""String_Node_Str"");
  assetsProperty.setPropertyValue(assetsXml);
  brmsPkgDocument.getProperty().add(assetsProperty);
  Entry entry3=new Entry();
  ClientRequest request3=new ClientRequest(generateURL(""String_Node_Str"" + brmsPkgDocument.getUuid()));
  Artifact artifact=new Artifact();
  artifact.setExtendedDocument(brmsPkgDocument);
  entry3.setAnyOtherJAXBObject(artifact);
  request3.body(MediaType.APPLICATION_ATOM_XML_ENTRY,entry3);
  request3.put(Void.class);
  ClientRequest request4=new ClientRequest(generateURL(""String_Node_Str""));
  ClientResponse<Assets> response4=request4.get(Assets.class);
  Assets assets=response4.getEntity();
  Assert.assertEquals(8,assets.getAsset().size());
  for (  Assets.Asset asset : assets.getAsset()) {
    String fileFormat=asset.getMetadata().getFormat().toLowerCase();
    if (fileFormat.equals(""String_Node_Str"")) {
    }
 else {
      String fileName=asset.getTitle() + ""String_Node_Str"" + asset.getMetadata().getFormat();
      String uuid=asset.getMetadata().getUuid();
      InputStream assetInputStream=this.getClass().getResourceAsStream(""String_Node_Str"" + fileName);
      @SuppressWarnings(""String_Node_Str"") ArtifactType artifactType=ArtifactType.fromFileExtension(asset.getMetadata().getFormat());
      if (artifactType.isExtendedType()) {
        artifactType=ArtifactType.ExtendedDocument(artifactType.getExtendedType());
      }
      BaseArtifactType baseArtifactType=artifactType.newArtifactInstance();
      baseArtifactType.setName(fileName);
      baseArtifactType.setUuid(uuid);
      String path=""String_Node_Str"" + artifactType.getModel() + ""String_Node_Str""+ artifactType.getType();
      ClientRequest request5=new ClientRequest(generateURL(path));
      MultipartRelatedOutput output=new MultipartRelatedOutput();
      Entry atomEntry=new Entry();
      MediaType mediaType=new MediaType(""String_Node_Str"",""String_Node_Str"");
      artifact=new Artifact();
      System.out.println(""String_Node_Str"" + artifactType.getArtifactType().getTypeClass());
      String methodStr=""String_Node_Str"" + artifactType.getArtifactType();
      Method method=artifact.getClass().getMethod(methodStr,artifactType.getArtifactType().getTypeClass());
      method.invoke(artifact,baseArtifactType);
      atomEntry.setAnyOtherJAXBObject(artifact);
      output.addPart(atomEntry,mediaType);
      MediaType mediaType2=MediaType.getInstance(artifactType.getMimeType());
      output.addPart(assetInputStream,mediaType2);
      System.out.println(""String_Node_Str"" + fileName + ""String_Node_Str""+ artifactType);
      request5.body(MultipartConstants.MULTIPART_RELATED,output);
      ClientResponse<Entry> assetResponse=request5.post(Entry.class);
      IOUtils.closeQuietly(assetInputStream);
      Entry assetEntry=assetResponse.getEntity();
      BaseArtifactType assetArtifact=SrampAtomUtils.unwrapSrampArtifact(assetEntry);
      System.out.println(""String_Node_Str"" + assetArtifact.getName() + ""String_Node_Str""+ assetArtifact.getUuid());
    }
  }
  ClientRequest request7=new ClientRequest(generateURL(""String_Node_Str""));
  ClientResponse<InputStream> response7=request7.get(InputStream.class);
  if (response1.getStatus() != 200) {
    throw new RuntimeException(""String_Node_Str"" + response.getStatus());
  }
  InputStream in7=response7.getEntity();
  File file7=new File(""String_Node_Str"");
  OutputStream out7=new FileOutputStream(file7);
  IOUtils.copy(in7,out7);
  out7.flush();
  IOUtils.closeQuietly(in7);
  IOUtils.closeQuietly(out7);
  Assert.assertTrue(file7.exists());
  long size=file7.length();
  Assert.assertTrue(size >= 12483L);
  ClientRequest request8=new ClientRequest(generateURL(""String_Node_Str""));
  ClientResponse<InputStream> response8=request8.get(InputStream.class);
  if (response1.getStatus() != 200) {
    throw new RuntimeException(""String_Node_Str"" + response.getStatus());
  }
  InputStream in8=response8.getEntity();
  File file8=new File(""String_Node_Str"");
  OutputStream out8=new FileOutputStream(file8);
  IOUtils.copy(in8,out8);
  out8.flush();
  IOUtils.closeQuietly(in8);
  IOUtils.closeQuietly(out8);
  Assert.assertTrue(file8.exists());
  Assert.assertEquals(14029l,file8.length());
}",0.9808981233243969
12984,"/** 
 * @see org.overlord.sramp.ui.client.shared.services.IArtifactSearchService#search(org.overlord.sramp.ui.client.shared.beans.ArtifactFilterBean,java.lang.String,int)
 */
@Override public ArtifactResultSetBean search(ArtifactFilterBean filters,String searchText,int page) throws SrampUiException {
  int pageSize=20;
  try {
    ArtifactResultSetBean rval=new ArtifactResultSetBean();
    int req_startIndex=(page - 1) * pageSize;
    SrampClientQuery query=null;
    if (searchText != null && searchText.startsWith(""String_Node_Str"")) {
      query=clientAccessor.getClient().buildQuery(searchText);
    }
 else {
      query=createQuery(filters,searchText);
    }
    QueryResultSet resultSet=query.startIndex(req_startIndex).orderBy(""String_Node_Str"").ascending().count(pageSize + 1).query();
    ArrayList<ArtifactSummaryBean> artifacts=new ArrayList<ArtifactSummaryBean>();
    for (    ArtifactSummary artifactSummary : resultSet) {
      ArtifactSummaryBean bean=new ArtifactSummaryBean();
      ArtifactType artifactType=artifactSummary.getType();
      bean.setModel(artifactType.getArtifactType().getModel());
      bean.setType(artifactType.getType());
      bean.setRawType(artifactType.getArtifactType().getType());
      bean.setUuid(artifactSummary.getUuid());
      bean.setName(artifactSummary.getName());
      bean.setDescription(artifactSummary.getDescription());
      bean.setCreatedBy(artifactSummary.getCreatedBy());
      bean.setCreatedOn(artifactSummary.getCreatedTimestamp());
      bean.setUpdatedOn(artifactSummary.getLastModifiedTimestamp());
      bean.setDerived(artifactType.getArtifactType().isDerived());
      artifacts.add(bean);
    }
    boolean hasMorePages=false;
    if (artifacts.size() > pageSize) {
      artifacts.remove(artifacts.get(artifacts.size() - 1));
      hasMorePages=true;
    }
    if (resultSet.getTotalResults() != -1) {
      rval.setItemsPerPage(pageSize);
      rval.setStartIndex(resultSet.getStartIndex());
      rval.setTotalResults(resultSet.getTotalResults());
    }
 else {
      rval.setItemsPerPage(pageSize);
      rval.setTotalResults(hasMorePages ? pageSize + 1 : artifacts.size());
      rval.setStartIndex(req_startIndex);
    }
    rval.setArtifacts(artifacts);
    return rval;
  }
 catch (  SrampClientException e) {
    throw new SrampUiException(e.getMessage());
  }
catch (  SrampAtomException e) {
    throw new SrampUiException(e.getMessage());
  }
}","/** 
 * @see org.overlord.sramp.ui.client.shared.services.IArtifactSearchService#search(org.overlord.sramp.ui.client.shared.beans.ArtifactFilterBean,java.lang.String,int)
 */
@Override public ArtifactResultSetBean search(ArtifactFilterBean filters,String searchText,int page) throws SrampUiException {
  int pageSize=20;
  try {
    ArtifactResultSetBean rval=new ArtifactResultSetBean();
    int req_startIndex=(page - 1) * pageSize;
    SrampClientQuery query=null;
    if (searchText != null && searchText.startsWith(""String_Node_Str"")) {
      query=clientAccessor.getClient().buildQuery(searchText);
    }
 else {
      query=createQuery(filters,searchText);
    }
    QueryResultSet resultSet=query.startIndex(req_startIndex).orderBy(""String_Node_Str"").ascending().count(pageSize + 1).query();
    ArrayList<ArtifactSummaryBean> artifacts=new ArrayList<ArtifactSummaryBean>();
    for (    ArtifactSummary artifactSummary : resultSet) {
      ArtifactSummaryBean bean=new ArtifactSummaryBean();
      ArtifactType artifactType=artifactSummary.getType();
      bean.setModel(artifactType.getArtifactType().getModel());
      bean.setType(artifactType.getType());
      bean.setRawType(artifactType.getArtifactType().getType());
      bean.setUuid(artifactSummary.getUuid());
      bean.setName(artifactSummary.getName());
      bean.setDescription(artifactSummary.getDescription());
      bean.setCreatedBy(artifactSummary.getCreatedBy());
      bean.setCreatedOn(artifactSummary.getCreatedTimestamp());
      bean.setUpdatedOn(artifactSummary.getLastModifiedTimestamp());
      bean.setDerived(artifactType.isDerived());
      artifacts.add(bean);
    }
    boolean hasMorePages=false;
    if (artifacts.size() > pageSize) {
      artifacts.remove(artifacts.get(artifacts.size() - 1));
      hasMorePages=true;
    }
    if (resultSet.getTotalResults() != -1) {
      rval.setItemsPerPage(pageSize);
      rval.setStartIndex(resultSet.getStartIndex());
      rval.setTotalResults(resultSet.getTotalResults());
    }
 else {
      rval.setItemsPerPage(pageSize);
      rval.setTotalResults(hasMorePages ? pageSize + 1 : artifacts.size());
      rval.setStartIndex(req_startIndex);
    }
    rval.setArtifacts(artifacts);
    return rval;
  }
 catch (  SrampClientException e) {
    throw new SrampUiException(e.getMessage());
  }
catch (  SrampAtomException e) {
    throw new SrampUiException(e.getMessage());
  }
}",0.9962962962962963
12985,"/** 
 * @see org.overlord.sramp.ui.client.shared.services.IArtifactService#get(java.lang.String)
 */
@Override public ArtifactBean get(String uuid) throws SrampUiException {
  try {
    BaseArtifactType artifact=clientAccessor.getClient().getArtifactMetaData(uuid);
    ArtifactType artifactType=ArtifactType.valueOf(artifact);
    ArtifactBean bean=new ArtifactBean();
    bean.setModel(artifactType.getArtifactType().getModel());
    bean.setType(artifactType.getType());
    bean.setRawType(artifactType.getArtifactType().getType());
    bean.setUuid(artifact.getUuid());
    bean.setName(artifact.getName());
    bean.setDescription(artifact.getDescription());
    bean.setVersion(artifact.getVersion());
    bean.setCreatedBy(artifact.getCreatedBy());
    bean.setCreatedOn(artifact.getCreatedTimestamp().toGregorianCalendar().getTime());
    bean.setUpdatedOn(artifact.getLastModifiedTimestamp().toGregorianCalendar().getTime());
    bean.setUpdatedBy(artifact.getLastModifiedBy());
    bean.setDerived(artifactType.getArtifactType().isDerived());
    if (SrampModelUtils.isDocumentArtifact(artifact)) {
      DocumentArtifactType doc=(DocumentArtifactType)artifact;
      bean.setContentSize(doc.getContentSize());
      bean.setContentType(doc.getContentType());
      if (SrampModelUtils.isTextDocumentArtifact(doc)) {
        bean.setTextDocument(true);
      }
    }
    for (    Property property : artifact.getProperty()) {
      bean.setProperty(property.getPropertyName(),property.getPropertyValue());
    }
    bean.getClassifiedBy().addAll(artifact.getClassifiedBy());
    int numRelationships=artifact.getRelationship() == null ? 0 : artifact.getRelationship().size();
    bean.setNumRelationships(numRelationships);
    return bean;
  }
 catch (  SrampClientException e) {
    throw new SrampUiException(e.getMessage());
  }
catch (  SrampAtomException e) {
    throw new SrampUiException(e.getMessage());
  }
}","/** 
 * @see org.overlord.sramp.ui.client.shared.services.IArtifactService#get(java.lang.String)
 */
@Override public ArtifactBean get(String uuid) throws SrampUiException {
  try {
    BaseArtifactType artifact=clientAccessor.getClient().getArtifactMetaData(uuid);
    ArtifactType artifactType=ArtifactType.valueOf(artifact);
    ArtifactBean bean=new ArtifactBean();
    bean.setModel(artifactType.getArtifactType().getModel());
    bean.setType(artifactType.getType());
    bean.setRawType(artifactType.getArtifactType().getType());
    bean.setUuid(artifact.getUuid());
    bean.setName(artifact.getName());
    bean.setDescription(artifact.getDescription());
    bean.setVersion(artifact.getVersion());
    bean.setCreatedBy(artifact.getCreatedBy());
    bean.setCreatedOn(artifact.getCreatedTimestamp().toGregorianCalendar().getTime());
    bean.setUpdatedOn(artifact.getLastModifiedTimestamp().toGregorianCalendar().getTime());
    bean.setUpdatedBy(artifact.getLastModifiedBy());
    bean.setDerived(artifactType.isDerived());
    if (SrampModelUtils.isDocumentArtifact(artifact)) {
      DocumentArtifactType doc=(DocumentArtifactType)artifact;
      bean.setContentSize(doc.getContentSize());
      bean.setContentType(doc.getContentType());
      if (SrampModelUtils.isTextDocumentArtifact(doc)) {
        bean.setTextDocument(true);
      }
    }
    for (    Property property : artifact.getProperty()) {
      bean.setProperty(property.getPropertyName(),property.getPropertyValue());
    }
    bean.getClassifiedBy().addAll(artifact.getClassifiedBy());
    int numRelationships=artifact.getRelationship() == null ? 0 : artifact.getRelationship().size();
    bean.setNumRelationships(numRelationships);
    return bean;
  }
 catch (  SrampClientException e) {
    throw new SrampUiException(e.getMessage());
  }
catch (  SrampAtomException e) {
    throw new SrampUiException(e.getMessage());
  }
}",0.9953149401353462
12986,"private void processNamespaces(final Element xmiElement){
  final NamedNodeMap attributes=xmiElement.getAttributes();
  for (int i=0, numAttrs=attributes.getLength(); i < numAttrs; ++i) {
    final Node attr=attributes.item(i);
    if (TeiidModel.XmiId.XML_NAMESPACE.equals(attr.getPrefix())) {
      this.namespaceContext.addMapping(attr.getLocalName(),attr.getNodeValue());
      LOGGER.debug(""String_Node_Str"",attr.getLocalName(),attr.getNodeValue());
    }
  }
}","/** 
 * Adds namespace mappings to the current namespace context based on prefix mappings defined on the given element.
 * @param xmiElement
 * @param xmlDeriverContext
 */
private void processNamespaces(final Element xmiElement,final XmlDeriverContext xmlDeriverContext){
  final NamedNodeMap attributes=xmiElement.getAttributes();
  for (int i=0, numAttrs=attributes.getLength(); i < numAttrs; ++i) {
    final Node attr=attributes.item(i);
    if (TeiidModel.XmiId.XML_NAMESPACE.equals(attr.getPrefix())) {
      xmlDeriverContext.addNamespaceMapping(attr.getLocalName(),attr.getNodeValue());
      LOGGER.debug(""String_Node_Str"",attr.getLocalName(),attr.getNodeValue());
    }
  }
}",0.7743055555555556
12987,"/** 
 * {@inheritDoc}
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.w3c.dom.Element,javax.xml.xpath.XPath)
 */
@Override protected void derive(final Collection<BaseArtifactType> derivedArtifacts,final BaseArtifactType artifact,final Element rootElement,final XPath xpath) throws IOException {
  LOGGER.debug(""String_Node_Str"",rootElement.getLocalName(),artifact.getName());
  if (!(artifact instanceof ExtendedDocument) || !TeiidArtifactType.MODEL.extendedType().equals(((ExtendedDocument)artifact).getExtendedType())) {
    throw new IllegalArgumentException(Messages.I18N.format(""String_Node_Str"",artifact.getName()));
  }
  final ExtendedDocument modelArtifact=(ExtendedDocument)artifact;
  try {
    if (!TeiidModel.XmiId.ROOT_ELEMENT.equals(rootElement.getLocalName())) {
      throw new IllegalArgumentException(Messages.I18N.format(""String_Node_Str"",artifact.getName()));
    }
    processNamespaces(rootElement);
    processModelAnnotation(derivedArtifacts,modelArtifact,rootElement,xpath);
  }
 catch (  final Exception e) {
    throw new IOException(e);
  }
}","/** 
 * {@inheritDoc}
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.overlord.sramp.common.derived.AbstractXmlDeriver.XmlDeriverContext)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,XmlDeriverContext xmlDeriverContext) throws IOException {
  LOGGER.debug(""String_Node_Str"",xmlDeriverContext.getRootElement().getLocalName(),artifact.getName());
  if (!(artifact instanceof ExtendedDocument) || !TeiidArtifactType.MODEL.extendedType().equals(((ExtendedDocument)artifact).getExtendedType())) {
    throw new IllegalArgumentException(Messages.I18N.format(""String_Node_Str"",artifact.getName()));
  }
  final ExtendedDocument modelArtifact=(ExtendedDocument)artifact;
  try {
    if (!TeiidModel.XmiId.ROOT_ELEMENT.equals(xmlDeriverContext.getRootElement().getLocalName())) {
      throw new IllegalArgumentException(Messages.I18N.format(""String_Node_Str"",artifact.getName()));
    }
    processNamespaces(xmlDeriverContext.getRootElement(),xmlDeriverContext);
    processModelAnnotation(derivedArtifacts,modelArtifact,xmlDeriverContext.getRootElement(),xmlDeriverContext.getXpath());
  }
 catch (  final Exception e) {
    throw new IOException(e);
  }
}",0.8360128617363344
12988,"/** 
 * {@inheritDoc}
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.w3c.dom.Element,javax.xml.xpath.XPath)
 */
@Override protected void derive(final Collection<BaseArtifactType> derivedArtifacts,final BaseArtifactType artifact,final Element rootElement,final XPath xpath) throws IOException {
  LOGGER.debug(""String_Node_Str"",rootElement.getLocalName(),artifact.getName());
  this.sources.clear();
  this.translators.clear();
  if (!(artifact instanceof ExtendedDocument) || !VdbManifest.ARTIFACT_TYPE.extendedType().equals(((ExtendedDocument)artifact).getExtendedType())) {
    throw new IllegalArgumentException(Messages.I18N.format(""String_Node_Str"",artifact.getName()));
  }
  final ExtendedDocument vdbArtifact=(ExtendedDocument)artifact;
  try {
    if (!VdbManifest.ManifestId.VDB_ELEMENT.equals(rootElement.getLocalName())) {
      throw new IllegalArgumentException(Messages.I18N.format(""String_Node_Str"",artifact.getName()));
    }
    processVdb(derivedArtifacts,vdbArtifact,rootElement,xpath);
  }
 catch (  final Exception e) {
    throw new IOException(e);
  }
}","/** 
 * {@inheritDoc}
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.overlord.sramp.common.derived.AbstractXmlDeriver.XmlDeriverContext)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,XmlDeriverContext xmlDeriverContext) throws IOException {
  Element rootElement=xmlDeriverContext.getRootElement();
  LOGGER.debug(""String_Node_Str"",rootElement.getLocalName(),artifact.getName());
  this.sources.clear();
  this.translators.clear();
  if (!(artifact instanceof ExtendedDocument) || !VdbManifest.ARTIFACT_TYPE.extendedType().equals(((ExtendedDocument)artifact).getExtendedType())) {
    throw new IllegalArgumentException(Messages.I18N.format(""String_Node_Str"",artifact.getName()));
  }
  final ExtendedDocument vdbArtifact=(ExtendedDocument)artifact;
  try {
    if (!VdbManifest.ManifestId.VDB_ELEMENT.equals(rootElement.getLocalName())) {
      throw new IllegalArgumentException(Messages.I18N.format(""String_Node_Str"",artifact.getName()));
    }
    processVdb(derivedArtifacts,vdbArtifact,rootElement,xmlDeriverContext.getXpath());
  }
 catch (  final Exception e) {
    throw new IOException(e);
  }
}",0.889795918367347
12989,"/** 
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.s_ramp.xmlns._2010.s_ramp.BaseArtifactType,org.w3c.dom.Element,javax.xml.xpath.XPath)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,Element rootElement,XPath xpath) throws IOException {
  try {
    processDescriptor(derivedArtifacts,artifact,rootElement,xpath);
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}","/** 
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.overlord.sramp.common.derived.AbstractXmlDeriver.XmlDeriverContext)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,XmlDeriverContext xmlDeriverContext) throws IOException {
  try {
    processDescriptor(derivedArtifacts,artifact,xmlDeriverContext.getRootElement(),xmlDeriverContext.getXpath());
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}",0.7464655984919887
12990,"/** 
 * @see com.google.gwt.user.client.ui.HasValue#setValue(java.lang.Object,boolean)
 */
@Override public void setValue(Map<String,String> value,boolean fireEvents){
  this.value=new HashMap<String,String>(value);
  clear();
  if (value == null || value.isEmpty()) {
  }
 else {
    Set<String> keys=new TreeSet<String>(value.keySet());
    for (    final String propName : keys) {
      String propValue=value.get(propName);
      InlineLabel propLabel=new InlineLabel(propName + ""String_Node_Str"");
      propLabel.setStyleName(""String_Node_Str"");
      CustomPropertyEditableInlineLabel propValueWidget=propValueLabelFactory.get();
      propValueWidget.addValueChangeHandler(new ValueChangeHandler<String>(){
        @Override public void onValueChange(        ValueChangeEvent<String> event){
          Map<String,String> newValue=new HashMap<String,String>(CustomPropertiesPanel.this.value);
          String val=event.getValue();
          if (val == null) {
            newValue.remove(propName);
          }
 else {
            newValue.put(propName,val);
          }
          setValue(newValue,true);
        }
      }
);
      propValueWidget.setValue(propValue);
      propValueWidget.setStyleName(""String_Node_Str"");
      InlineLabel clearFix=new InlineLabel();
      clearFix.setStyleName(""String_Node_Str"");
      add(propLabel);
      add(propValueWidget);
      add(clearFix);
    }
  }
  if (fireEvents) {
    ValueChangeEvent.fire(this,this.value);
  }
}","/** 
 * @see com.google.gwt.user.client.ui.HasValue#setValue(java.lang.Object,boolean)
 */
@Override public void setValue(Map<String,String> value,boolean fireEvents){
  this.value=new HashMap<String,String>(value);
  clear();
  if (value == null || value.isEmpty()) {
  }
 else {
    Set<String> keys=new TreeSet<String>(value.keySet());
    for (    final String propName : keys) {
      String propValue=value.get(propName);
      Label propLabel=new Label(propName + ""String_Node_Str"");
      propLabel.setStyleName(""String_Node_Str"");
      CustomPropertyEditableInlineLabel propValueWidget=propValueLabelFactory.get();
      propValueWidget.addValueChangeHandler(new ValueChangeHandler<String>(){
        @Override public void onValueChange(        ValueChangeEvent<String> event){
          Map<String,String> newValue=new HashMap<String,String>(CustomPropertiesPanel.this.value);
          String val=event.getValue();
          if (val == null) {
            newValue.remove(propName);
          }
 else {
            newValue.put(propName,val);
          }
          setValue(newValue,true);
        }
      }
);
      propValueWidget.setValue(propValue);
      propValueWidget.setStyleName(""String_Node_Str"");
      Label clearFix=new Label();
      clearFix.setStyleName(""String_Node_Str"");
      add(propLabel);
      add(propValueWidget);
      add(clearFix);
    }
  }
  if (fireEvents) {
    ValueChangeEvent.fire(this,this.value);
  }
}",0.9918088737201364
12991,"/** 
 * Derives content for the given artifact.
 * @param derivedArtifacts
 * @param artifact
 * @param rootElement
 * @param xpath
 * @throws IOException
 */
protected abstract void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,Element rootElement,XPath xpath) throws IOException ;","/** 
 * Derives content for the given artifact.
 * @param derivedArtifacts
 * @param artifact
 * @param xmlDeriverContext
 * @throws IOException
 */
protected abstract void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,XmlDeriverContext xmlDeriverContext) throws IOException ;",0.8269230769230769
12992,"/** 
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.w3c.dom.Element,javax.xml.xpath.XPath)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,Element rootElement,XPath xpath) throws IOException {
}","/** 
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.overlord.sramp.common.derived.AbstractXmlDeriver.XmlDeriverContext)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,XmlDeriverContext xmlDeriverContext) throws IOException {
}",0.7791164658634538
12993,"/** 
 * @see org.overlord.sramp.common.repository.derived.XsdDeriver#derive(org.overlord.sramp.common.repository.derived.IndexedArtifactCollection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.w3c.dom.Element,javax.xml.xpath.XPath)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,Element rootElement,XPath xpath) throws IOException {
  String targetNS=rootElement.getAttribute(""String_Node_Str"");
  ((WsdlDocument)artifact).setTargetNamespace(targetNS);
  try {
    processDefinitions((IndexedArtifactCollection)derivedArtifacts,artifact,rootElement,xpath);
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}","/** 
 * @see org.overlord.sramp.common.derived.XsdDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.overlord.sramp.common.derived.AbstractXmlDeriver.XmlDeriverContext)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,XmlDeriverContext xmlDeriverContext) throws IOException {
  String targetNS=xmlDeriverContext.getRootElement().getAttribute(""String_Node_Str"");
  ((WsdlDocument)artifact).setTargetNamespace(targetNS);
  try {
    processDefinitions((IndexedArtifactCollection)derivedArtifacts,artifact,xmlDeriverContext.getRootElement(),xmlDeriverContext.getXpath());
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}",0.7777003484320557
12994,"/** 
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.w3c.dom.Element,javax.xml.xpath.XPath)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,Element rootElement,XPath xpath) throws IOException {
  try {
    processSchema(derivedArtifacts,artifact,rootElement,xpath);
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}","/** 
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.overlord.sramp.common.derived.AbstractXmlDeriver.XmlDeriverContext)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,XmlDeriverContext xmlDeriverContext) throws IOException {
  try {
    processSchema(derivedArtifacts,artifact,xmlDeriverContext.getRootElement(),xmlDeriverContext.getXpath());
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}",0.7958607714016933
12995,"/** 
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.s_ramp.xmlns._2010.s_ramp.BaseArtifactType,org.w3c.dom.Element,javax.xml.xpath.XPath)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,Element rootElement,XPath xpath) throws IOException {
  try {
    processDescriptor(derivedArtifacts,artifact,rootElement,xpath);
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}","/** 
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.overlord.sramp.common.derived.AbstractXmlDeriver.XmlDeriverContext)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,XmlDeriverContext xmlDeriverContext) throws IOException {
  try {
    processDescriptor(derivedArtifacts,artifact,xmlDeriverContext.getRootElement(),xmlDeriverContext.getXpath());
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}",0.7464655984919887
12996,"/** 
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.s_ramp.xmlns._2010.s_ramp.BaseArtifactType,org.w3c.dom.Element,javax.xml.xpath.XPath)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,Element rootElement,XPath xpath) throws IOException {
  try {
    String targetNS=rootElement.getAttribute(""String_Node_Str"");
    SrampModelUtils.setCustomProperty(artifact,""String_Node_Str"",targetNS);
    if (""String_Node_Str"".equals(artifact.getName()) && rootElement.hasAttribute(""String_Node_Str"")) {
      String name=rootElement.getAttribute(""String_Node_Str"");
      artifact.setName(name);
    }
    processComponents(derivedArtifacts,artifact,rootElement,xpath);
    processServices(derivedArtifacts,artifact,rootElement,xpath);
    processTransformers(derivedArtifacts,artifact,rootElement,xpath);
    processValidators(derivedArtifacts,artifact,rootElement,xpath);
  }
 catch (  XPathExpressionException e) {
    throw new IOException(e);
  }
}","/** 
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.overlord.sramp.common.derived.AbstractXmlDeriver.XmlDeriverContext)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,XmlDeriverContext xmlDeriverContext) throws IOException {
  try {
    Element rootElement=xmlDeriverContext.getRootElement();
    XPath xpath=xmlDeriverContext.getXpath();
    String targetNS=rootElement.getAttribute(""String_Node_Str"");
    SrampModelUtils.setCustomProperty(artifact,""String_Node_Str"",targetNS);
    if (""String_Node_Str"".equals(artifact.getName()) && rootElement.hasAttribute(""String_Node_Str"")) {
      String name=rootElement.getAttribute(""String_Node_Str"");
      artifact.setName(name);
    }
    processComponents(derivedArtifacts,artifact,rootElement,xpath);
    processServices(derivedArtifacts,artifact,rootElement,xpath);
    processTransformers(derivedArtifacts,artifact,rootElement,xpath);
    processValidators(derivedArtifacts,artifact,rootElement,xpath);
  }
 catch (  XPathExpressionException e) {
    throw new IOException(e);
  }
}",0.1425389755011135
12997,"/** 
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.w3c.dom.Element,javax.xml.xpath.XPath)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,Element rootElement,XPath xpath) throws IOException {
  try {
    processRoot(derivedArtifacts,artifact,rootElement,xpath);
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}","/** 
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.overlord.sramp.common.derived.AbstractXmlDeriver.XmlDeriverContext)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,XmlDeriverContext xmlDeriverContext) throws IOException {
  try {
    processRoot(derivedArtifacts,artifact,xmlDeriverContext.getRootElement(),xmlDeriverContext.getXpath());
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}",0.7950897072710104
12998,"/** 
 * @see com.google.gwt.user.client.ui.HasValue#setValue(java.lang.Object,boolean)
 */
@Override public void setValue(Map<String,String> value,boolean fireEvents){
  this.value=new HashMap<String,String>(value);
  clear();
  if (value == null || value.isEmpty()) {
  }
 else {
    Set<String> keys=new TreeSet<String>(value.keySet());
    for (    final String propName : keys) {
      String propValue=value.get(propName);
      InlineLabel propLabel=new InlineLabel(propName + ""String_Node_Str"");
      propLabel.setStyleName(""String_Node_Str"");
      CustomPropertyEditableInlineLabel propValueWidget=propValueLabelFactory.get();
      propValueWidget.addValueChangeHandler(new ValueChangeHandler<String>(){
        @Override public void onValueChange(        ValueChangeEvent<String> event){
          Map<String,String> newValue=new HashMap<String,String>(CustomPropertiesPanel.this.value);
          String val=event.getValue();
          if (val == null) {
            newValue.remove(propName);
          }
 else {
            newValue.put(propName,val);
          }
          setValue(newValue,true);
        }
      }
);
      propValueWidget.setValue(propValue);
      propValueWidget.setStyleName(""String_Node_Str"");
      InlineLabel clearFix=new InlineLabel();
      clearFix.setStyleName(""String_Node_Str"");
      add(propLabel);
      add(propValueWidget);
      add(clearFix);
    }
  }
  if (fireEvents) {
    ValueChangeEvent.fire(this,this.value);
  }
}","/** 
 * @see com.google.gwt.user.client.ui.HasValue#setValue(java.lang.Object,boolean)
 */
@Override public void setValue(Map<String,String> value,boolean fireEvents){
  this.value=new HashMap<String,String>(value);
  clear();
  if (value == null || value.isEmpty()) {
  }
 else {
    Set<String> keys=new TreeSet<String>(value.keySet());
    for (    final String propName : keys) {
      String propValue=value.get(propName);
      Label propLabel=new Label(propName + ""String_Node_Str"");
      propLabel.setStyleName(""String_Node_Str"");
      CustomPropertyEditableInlineLabel propValueWidget=propValueLabelFactory.get();
      propValueWidget.addValueChangeHandler(new ValueChangeHandler<String>(){
        @Override public void onValueChange(        ValueChangeEvent<String> event){
          Map<String,String> newValue=new HashMap<String,String>(CustomPropertiesPanel.this.value);
          String val=event.getValue();
          if (val == null) {
            newValue.remove(propName);
          }
 else {
            newValue.put(propName,val);
          }
          setValue(newValue,true);
        }
      }
);
      propValueWidget.setValue(propValue);
      propValueWidget.setStyleName(""String_Node_Str"");
      Label clearFix=new Label();
      clearFix.setStyleName(""String_Node_Str"");
      add(propLabel);
      add(propValueWidget);
      add(clearFix);
    }
  }
  if (fireEvents) {
    ValueChangeEvent.fire(this,this.value);
  }
}",0.9918088737201364
12999,"/** 
 * @see org.overlord.sramp.integration.switchyard.model.SwitchYardArtifactVisitor#visitService(org.oasis_open.docs.s_ramp.ns.s_ramp_v1.ExtendedArtifactType)
 */
@Override public void visitService(ExtendedArtifactType artifact){
}","/** 
 * @see org.overlord.sramp.integration.switchyard.model.SwitchYardArtifactVisitor#visitService(org.oasis_open.docs.s_ramp.ns.s_ramp_v1.ExtendedArtifactType)
 */
@Override public void visitService(ExtendedArtifactType artifact){
  Relationship relationship=SrampModelUtils.getGenericRelationship(artifact,SwitchYardModel.REL_IMPLEMENTS);
  if (relationship != null && relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF)) {
    String ref=relationship.getOtherAttributes().remove(SwitchYardXmlDeriver.UNRESOLVED_REF);
    if (ref.startsWith(""String_Node_Str"")) {
      String refInterfaceName=ref.substring(5);
      BaseArtifactType artifactRef=findJavaInterfaceArtifact(refInterfaceName);
      if (artifactRef != null) {
        Target target=new Target();
        target.setValue(artifactRef.getUuid());
        relationship.getRelationshipTarget().add(target);
      }
    }
 else     if (ref.startsWith(""String_Node_Str"")) {
      String refWsdl=ref.substring(5);
      BaseArtifactType artifactRef=findWsdlArtifact(refWsdl);
      if (artifactRef != null) {
        Target target=new Target();
        target.setValue(artifactRef.getUuid());
        relationship.getRelationshipTarget().add(target);
      }
    }
  }
}",0.3132530120481928
13000,"/** 
 * Create derived services found in the switchyard.xml.
 * @param derivedArtifacts
 * @param sourceArtifact
 * @param rootElement
 * @param xpath
 * @throws XPathExpressionException
 */
private void processServices(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType sourceArtifact,Element rootElement,XPath xpath) throws XPathExpressionException {
  NodeList nodes=(NodeList)this.query(xpath,rootElement,""String_Node_Str"",XPathConstants.NODESET);
  for (int idx=0; idx < nodes.getLength(); idx++) {
    Element node=(Element)nodes.item(idx);
    String name=node.getAttribute(""String_Node_Str"");
    ExtendedArtifactType serviceArtifact=SwitchYardModel.newServiceArtifact(name);
    derivedArtifacts.add(serviceArtifact);
    if (node.hasAttribute(""String_Node_Str"")) {
      String promote=node.getAttribute(""String_Node_Str"");
      BaseArtifactType component=findComponentByName(derivedArtifacts,promote);
      if (component != null) {
        SrampModelUtils.addGenericRelationship(serviceArtifact,SwitchYardModel.REL_PROMOTES,component.getUuid());
      }
    }
  }
}","/** 
 * Create derived services found in the switchyard.xml.
 * @param derivedArtifacts
 * @param sourceArtifact
 * @param rootElement
 * @param xpath
 * @throws XPathExpressionException
 */
private void processServices(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType sourceArtifact,Element rootElement,XPath xpath) throws XPathExpressionException {
  NodeList nodes=(NodeList)this.query(xpath,rootElement,""String_Node_Str"",XPathConstants.NODESET);
  for (int idx=0; idx < nodes.getLength(); idx++) {
    Element node=(Element)nodes.item(idx);
    String name=node.getAttribute(""String_Node_Str"");
    ExtendedArtifactType serviceArtifact=SwitchYardModel.newServiceArtifact(name);
    derivedArtifacts.add(serviceArtifact);
    if (node.hasAttribute(""String_Node_Str"")) {
      String promote=node.getAttribute(""String_Node_Str"");
      BaseArtifactType component=findComponentByName(derivedArtifacts,promote);
      if (component != null) {
        SrampModelUtils.addGenericRelationship(serviceArtifact,SwitchYardModel.REL_PROMOTES,component.getUuid());
      }
    }
    Element iface=(Element)this.query(xpath,node,""String_Node_Str"",XPathConstants.NODE);
    if (iface != null) {
      if (iface.hasAttribute(""String_Node_Str"")) {
        String ifaceName=iface.getAttribute(""String_Node_Str"");
        Relationship relationship=SrampModelUtils.addGenericRelationship(serviceArtifact,SwitchYardModel.REL_IMPLEMENTS,null);
        relationship.getOtherAttributes().put(UNRESOLVED_REF,""String_Node_Str"" + ifaceName);
      }
    }
    iface=(Element)this.query(xpath,node,""String_Node_Str"",XPathConstants.NODE);
    if (iface != null) {
      if (iface.hasAttribute(""String_Node_Str"")) {
        String wsdlInfo=iface.getAttribute(""String_Node_Str"");
        Relationship relationship=SrampModelUtils.addGenericRelationship(serviceArtifact,SwitchYardModel.REL_IMPLEMENTS,null);
        relationship.getOtherAttributes().put(UNRESOLVED_REF,""String_Node_Str"" + wsdlInfo);
      }
    }
  }
}",0.7041343669250646
