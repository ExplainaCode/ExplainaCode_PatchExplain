record_number,buggy_code,fixed_code,code_similarity
10001,"@Test public void testMinVersion(){
  Assert.assertTrue(isMinVersionOK(splitVersion(""String_Node_Str""),splitVersion(""String_Node_Str"")));
  Assert.assertTrue(isMinVersionOK(splitVersion(""String_Node_Str""),splitVersion(""String_Node_Str"")));
  Assert.assertTrue(isMinVersionOK(splitVersion(""String_Node_Str""),splitVersion(""String_Node_Str"")));
  Assert.assertFalse(isMinVersionOK(splitVersion(""String_Node_Str""),splitVersion(""String_Node_Str"")));
  Assert.assertFalse(isMinVersionOK(splitVersion(""String_Node_Str""),splitVersion(""String_Node_Str"")));
  Assert.assertTrue(isMinVersionOK(splitVersion(""String_Node_Str""),splitVersion(""String_Node_Str"")));
}","@Test public void testMinVersion(){
  Assert.assertTrue(isMinVersionOK(splitVersion(""String_Node_Str""),splitVersion(""String_Node_Str"")));
  Assert.assertTrue(isMinVersionOK(splitVersion(""String_Node_Str""),splitVersion(""String_Node_Str"")));
  Assert.assertTrue(isMinVersionOK(splitVersion(""String_Node_Str""),splitVersion(""String_Node_Str"")));
  Assert.assertFalse(isMinVersionOK(splitVersion(""String_Node_Str""),splitVersion(""String_Node_Str"")));
  Assert.assertFalse(isMinVersionOK(splitVersion(""String_Node_Str""),splitVersion(""String_Node_Str"")));
  Assert.assertTrue(isMinVersionOK(splitVersion(""String_Node_Str""),splitVersion(""String_Node_Str"")));
  Assert.assertTrue(isMinVersionOK(splitVersion(""String_Node_Str""),splitVersion(""String_Node_Str"")));
  Assert.assertTrue(isMinVersionOK(splitVersion(""String_Node_Str""),splitVersion(""String_Node_Str"")));
  Assert.assertTrue(isMinVersionOK(splitVersion(""String_Node_Str""),splitVersion(""String_Node_Str"")));
  Assert.assertTrue(isMinVersionOK(splitVersion(""String_Node_Str""),splitVersion(""String_Node_Str"")));
  Assert.assertFalse(isMinVersionOK(splitVersion(""String_Node_Str""),splitVersion(""String_Node_Str"")));
}",0.7181467181467182
10002,"@BeforeClass public void createRoot() throws URISyntaxException {
  root=new File(new File(getClass().getResource(""String_Node_Str"").toURI()),""String_Node_Str"");
}","@BeforeClass public void createRoot() throws IOException {
  root=new File(""String_Node_Str"").getCanonicalFile();
}",0.7194244604316546
10003,"@Test public void resolveAbsolute(){
  File file=new File(root,""String_Node_Str"");
  Assert.assertTrue(file.exists());
  File rfile=SourceFileResolver.resolveSourceFile(file.getAbsolutePath(),null,null,null);
  Assert.assertTrue(rfile.exists());
  MatcherAssert.assertThat(rfile.getName(),CoreMatchers.equalTo(""String_Node_Str""));
  MatcherAssert.assertThat(rfile,CoreMatchers.equalTo(file));
}","@Test public void resolveAbsolute() throws IOException {
  File file=new File(root,""String_Node_Str"").getCanonicalFile();
  Assert.assertTrue(file.exists());
  File rfile=SourceFileResolver.resolveSourceFile(file.getAbsolutePath(),null,null,null);
  Assert.assertTrue(rfile.exists());
  MatcherAssert.assertThat(rfile.getName(),CoreMatchers.equalTo(""String_Node_Str""));
  MatcherAssert.assertThat(rfile,CoreMatchers.equalTo(file));
}",0.9528415961305924
10004,"/** 
 * Setup before compilation of source
 */
@SuppressWarnings(""String_Node_Str"") @Override public void setUp() throws MojoExecutionException, MojoFailureException {
  processLocales();
  if (sourcePaths == null) {
    List<String> sourceRoots;
    if (project.getExecutionProject() != null) {
      sourceRoots=project.getExecutionProject().getCompileSourceRoots();
    }
 else {
      sourceRoots=project.getCompileSourceRoots();
    }
    List<File> sources=getValidSourceRoots(sourceRoots);
    if (compiledLocales != null) {
      sources.add(new File(resourceBundlePath));
    }
    sourcePaths=sources.toArray(new File[sources.size()]);
  }
  if (configFile == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        configFile=cfg;
        break;
      }
    }
  }
  if (configFile != null) {
    getLog().info(""String_Node_Str"" + configFile);
  }
  if (services == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        services=cfg;
        break;
      }
    }
  }
  if (rslUrls == null) {
    rslUrls=DEFAULT_RSL_URLS;
  }
  if (policyFileUrls == null) {
    policyFileUrls=new String[]{""String_Node_Str""};
  }
  if (metadata == null) {
    metadata=new Metadata();
    if (project.getDevelopers() != null && !project.getDevelopers().isEmpty()) {
      List<Developer> developers=project.getDevelopers();
      for (      Developer d : developers) {
        metadata.setCreator(d.getName());
        break;
      }
    }
    if (project.getContributors() != null && !project.getContributors().isEmpty()) {
      List<Contributor> contributors=project.getContributors();
      for (      Contributor c : contributors) {
        metadata.setContributor(c.getName());
        break;
      }
    }
    metadata.setDate(new Date());
  }
  if (licenses == null) {
    licenses=getLicenses();
  }
  validateLocales(runtimeLocales);
  validateLocales(compiledLocales);
  configuration=builder.getDefaultConfiguration();
  configure();
  compilationData=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
  setMavenPathResolver();
  getOutput().getParentFile().mkdirs();
}","/** 
 * Setup before compilation of source
 */
@SuppressWarnings(""String_Node_Str"") @Override public void setUp() throws MojoExecutionException, MojoFailureException {
  processLocales();
  if (sourcePaths == null) {
    List<String> sourceRoots;
    if (project.getExecutionProject() != null) {
      sourceRoots=project.getExecutionProject().getCompileSourceRoots();
    }
 else {
      sourceRoots=project.getCompileSourceRoots();
    }
    List<File> sources=getValidSourceRoots(sourceRoots);
    if (compiledLocales != null) {
      sources.add(new File(resourceBundlePath));
    }
    sourcePaths=sources.toArray(new File[sources.size()]);
  }
  if (configFile == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        configFile=cfg;
        break;
      }
    }
  }
  if (configFile != null) {
    getLog().info(""String_Node_Str"" + configFile);
  }
  if (services == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        services=cfg;
        break;
      }
    }
  }
  if (rslUrls == null) {
    rslUrls=DEFAULT_RSL_URLS;
  }
  if (policyFileUrls == null) {
    policyFileUrls=new String[]{""String_Node_Str""};
  }
  if (runtimeLocaleOutputPath == null) {
    runtimeLocaleOutputPath=DEFAULT_RUNTIME_LOCALE_OUTPUT_PATH;
  }
  if (metadata == null) {
    metadata=new Metadata();
    if (project.getDevelopers() != null && !project.getDevelopers().isEmpty()) {
      List<Developer> developers=project.getDevelopers();
      for (      Developer d : developers) {
        metadata.setCreator(d.getName());
        break;
      }
    }
    if (project.getContributors() != null && !project.getContributors().isEmpty()) {
      List<Contributor> contributors=project.getContributors();
      for (      Contributor c : contributors) {
        metadata.setContributor(c.getName());
        break;
      }
    }
    metadata.setDate(new Date());
  }
  if (licenses == null) {
    licenses=getLicenses();
  }
  validateLocales(runtimeLocales);
  validateLocales(compiledLocales);
  configuration=builder.getDefaultConfiguration();
  configure();
  compilationData=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
  setMavenPathResolver();
  getOutput().getParentFile().mkdirs();
}",0.9778139629554244
10005,"/** 
 * Get RslUrls
 * @param artifact
 * @param extension
 * @return Array of url's
 */
private String[] getRslUrls(Artifact artifact,String extension){
  String[] rsls=new String[rslUrls.length];
  for (int i=0; i < rslUrls.length; i++) {
    String rsl=rslUrls[i];
    if (contextRoot != null) {
      rsl=rsl.replace(""String_Node_Str"",contextRoot);
    }
    rsl=rsl.replace(""String_Node_Str"",artifact.getGroupId());
    rsl=rsl.replace(""String_Node_Str"",artifact.getArtifactId());
    rsl=rsl.replace(""String_Node_Str"",artifact.getVersion());
    rsl=rsl.replace(""String_Node_Str"",extension);
    rsls[i]=rsl;
  }
  return rsls;
}","/** 
 * Get RslUrls
 * @param artifact
 * @param extension
 * @return Array of url's
 */
private String[] getRslUrls(Artifact artifact,String extension){
  String[] rsls=new String[rslUrls.length];
  for (int i=0; i < rslUrls.length; i++) {
    String rsl=rslUrls[i];
    if (contextRoot == null || ""String_Node_Str"".equals(contextRoot)) {
      rsl=rsl.replace(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      rsl=rsl.replace(""String_Node_Str"",contextRoot);
    }
    rsl=MavenUtils.getRslUrl(rsl,artifact,extension);
    rsls[i]=rsl;
  }
  return rsls;
}",0.63
10006,"/** 
 * Get array of files for dependency artfacts for given scope
 * @param scope for which to get files
 * @return Array of dependency artifact files
 * @throws MojoExecutionException
 */
protected File[] getDependenciesPath(String scope) throws MojoExecutionException {
  if (scope == null)   return null;
  List<File> files=new ArrayList<File>();
  for (  Artifact a : getDependencyArtifacts(scope)) {
    if (""String_Node_Str"".equals(a.getArtifactId()) || ""String_Node_Str"".equals(a.getArtifactId())) {
      continue;
    }
    files.add(a.getFile());
  }
  return files.toArray(new File[files.size()]);
}","/** 
 * Get array of files for dependency artifacts for given scope
 * @param scope for which to get files
 * @return Array of dependency artifact files
 * @throws MojoExecutionException
 */
protected File[] getDependenciesPath(String scope) throws MojoExecutionException {
  if (scope == null)   return null;
  List<File> files=new ArrayList<File>();
  for (  Artifact a : getDependencyArtifacts(scope)) {
    if (""String_Node_Str"".equals(a.getArtifactId()) || ""String_Node_Str"".equals(a.getArtifactId())) {
      continue;
    }
    files.add(a.getFile());
  }
  return files.toArray(new File[files.size()]);
}",0.999182338511856
10007,"protected File getRuntimeLocaleOutputFile(String locale,String extension){
  String path=runtimeLocaleOutputPath;
  path=path.replace(""String_Node_Str"",locale);
  path=path.replace(""String_Node_Str"",extension);
  File output=new File(path);
  output.getParentFile().mkdirs();
  return output;
}","protected File getRuntimeLocaleOutputFile(String locale,String extension){
  String path=runtimeLocaleOutputPath.replace(""String_Node_Str"",project.getBuild().getDirectory());
  File output=new File(MavenUtils.getRuntimeLocaleOutputPath(path,project.getArtifact(),locale,extension));
  output.getParentFile().mkdirs();
  return output;
}",0.692063492063492
10008,"@Override protected void writeResourceBundle(String[] bundles,String locale,File localePath) throws MojoExecutionException {
  getLog().info(""String_Node_Str"" + locale);
  Library localized=new Library();
  localized.setConfiguration(configuration);
  configuration.setLibraryPath(new File[0]);
  localized.setLogger(new CompileLogger(getLog()));
  configuration.addLibraryPath(new File[]{getOutput()});
  setLocales(new String[]{locale});
  configuration.setSourcePath(new File[]{localePath});
  for (  String bundle : bundles) {
    localized.addResourceBundle(bundle);
  }
  configuration.addLibraryPath(getResourcesBundles(locale));
  File output=getRuntimeLocaleOutputFile(locale,RB_SWC);
  localized.setOutput(output);
  build(localized);
  projectHelper.attachArtifact(project,RB_SWC,locale,output);
}","@Override protected void writeResourceBundle(String[] bundles,String locale,File localePath) throws MojoExecutionException {
  Library localized=new Library();
  localized.setConfiguration(configuration);
  configuration.setLibraryPath(new File[0]);
  localized.setLogger(new CompileLogger(getLog()));
  configuration.addLibraryPath(new File[]{getOutput()});
  setLocales(new String[]{locale});
  configuration.setSourcePath(new File[]{localePath});
  for (  String bundle : bundles) {
    localized.addResourceBundle(bundle);
  }
  configuration.addLibraryPath(getResourcesBundles(locale));
  File output=getRuntimeLocaleOutputFile(locale,RB_SWC);
  localized.setOutput(output);
  build(localized);
  projectHelper.attachArtifact(project,RB_SWC,locale,output);
}",0.9713558243157224
10009,"private void copyFolderTemplate(String path) throws MojoExecutionException {
  File source=new File(path);
  if (!source.exists() || !source.isDirectory()) {
    throw new MojoExecutionException(""String_Node_Str"" + source);
  }
  try {
    FileUtils.copyDirectory(source,templateOutputDirectory,FileFilterUtils.makeSVNAware(FileFilterUtils.makeCVSAware(null)));
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"" + templateOutputDirectory,e);
  }
}","private void copyFolderTemplate(String path) throws MojoExecutionException {
  File source=new File(path);
  if (!source.isAbsolute()) {
    source=new File(project.getBasedir(),path);
  }
  if (!source.exists() || !source.isDirectory()) {
    throw new MojoExecutionException(""String_Node_Str"" + source);
  }
  try {
    FileUtils.copyDirectory(source,templateOutputDirectory,FileFilterUtils.makeSVNAware(FileFilterUtils.makeCVSAware(null)));
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"" + templateOutputDirectory,e);
  }
}",0.9217557251908396
10010,"@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  isSetProjectFile=false;
  linkReport=false;
  loadExterns=null;
  if (includeTestFiles == null) {
    includeTestFiles=new String[]{""String_Node_Str"",""String_Node_Str""};
  }
  File outputFolder=new File(build.getTestOutputDirectory());
  if (!outputFolder.exists()) {
    outputFolder.mkdirs();
  }
  testClasses=getTestClasses();
  File testSourceFile;
  try {
    testSourceFile=generateTester(testClasses);
  }
 catch (  Exception e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  sourceFile=null;
  source=testSourceFile;
  outputFile=new File(build.getTestOutputDirectory(),""String_Node_Str"");
  super.setUp();
}","@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  isSetProjectFile=false;
  linkReport=false;
  loadExterns=null;
  if (includeTestFiles == null) {
    includeTestFiles=new String[]{""String_Node_Str"",""String_Node_Str""};
  }
  File outputFolder=new File(build.getTestOutputDirectory());
  if (!outputFolder.exists()) {
    outputFolder.mkdirs();
  }
  testClasses=getTestClasses();
  File testSourceFile;
  try {
    testSourceFile=generateTester(testClasses);
  }
 catch (  Exception e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  sourceFile=null;
  source=testSourceFile;
  super.setUp();
}",0.9395484340859432
10011,"@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  isSetProjectFile=false;
  File outputFolder=new File(build.getTestOutputDirectory());
  if (!outputFolder.exists()) {
    outputFolder.mkdirs();
  }
  outputFile=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
  includeSources=getValidSourceRoots(project.getTestCompileSourceRoots()).toArray(new File[0]);
  super.setUp();
}","@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  isSetProjectFile=false;
  File outputFolder=new File(build.getTestOutputDirectory());
  if (!outputFolder.exists()) {
    outputFolder.mkdirs();
  }
  includeSources=getValidSourceRoots(project.getTestCompileSourceRoots()).toArray(new File[0]);
  super.setUp();
}",0.8903061224489796
10012,"@Override protected void tearDown() throws MojoExecutionException, MojoFailureException {
  super.tearDown();
  projectHelper.attachArtifact(project,""String_Node_Str"",""String_Node_Str"",outputFile);
}","@Override protected void tearDown() throws MojoExecutionException, MojoFailureException {
  super.tearDown();
  projectHelper.attachArtifact(project,""String_Node_Str"",""String_Node_Str"",getOutput());
}",0.9473684210526316
10013,"/** 
 * Setup before compilation of source
 */
@SuppressWarnings(""String_Node_Str"") @Override public void setUp() throws MojoExecutionException, MojoFailureException {
  processLocales();
  if (sourcePaths == null) {
    List<String> sourceRoots=project.getCompileSourceRoots();
    List<File> sources=getValidSourceRoots(sourceRoots);
    if (compiledLocales != null) {
      sources.add(new File(resourceBundlePath));
    }
    sourcePaths=sources.toArray(new File[sources.size()]);
  }
  if (configFile == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        configFile=cfg;
        break;
      }
    }
  }
  if (configFile == null) {
    getLog().debug(""String_Node_Str"");
    configFile=MavenUtils.getConfigFile(build);
  }
  if (!configFile.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + configFile);
  }
 else {
    getLog().info(""String_Node_Str"" + configFile);
  }
  if (services == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        services=cfg;
        break;
      }
    }
  }
  if (rslUrls == null) {
    rslUrls=new String[]{""String_Node_Str""};
  }
  if (policyFileUrls == null) {
    policyFileUrls=new String[]{""String_Node_Str""};
  }
  if (metadata == null) {
    metadata=new Metadata();
    if (project.getDevelopers() != null && !project.getDevelopers().isEmpty()) {
      List<Developer> developers=project.getDevelopers();
      for (      Developer d : developers) {
        metadata.setCreator(d.getName());
        break;
      }
    }
    if (project.getContributors() != null && !project.getContributors().isEmpty()) {
      List<Contributor> contributors=project.getContributors();
      for (      Contributor c : contributors) {
        metadata.setContributor(c.getName());
        break;
      }
    }
    metadata.setDate(new Date());
  }
  if (licenses == null) {
    licenses=getLicenses();
  }
  validateLocales(runtimeLocales);
  validateLocales(compiledLocales);
  configuration=builder.getDefaultConfiguration();
  configure();
  compilationData=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
  setMavenPathResolver();
}","/** 
 * Setup before compilation of source
 */
@SuppressWarnings(""String_Node_Str"") @Override public void setUp() throws MojoExecutionException, MojoFailureException {
  processLocales();
  if (sourcePaths == null) {
    List<String> sourceRoots;
    if (project.getExecutionProject() != null) {
      sourceRoots=project.getExecutionProject().getCompileSourceRoots();
    }
 else {
      sourceRoots=project.getCompileSourceRoots();
    }
    List<File> sources=getValidSourceRoots(sourceRoots);
    if (compiledLocales != null) {
      sources.add(new File(resourceBundlePath));
    }
    sourcePaths=sources.toArray(new File[sources.size()]);
  }
  if (configFile == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        configFile=cfg;
        break;
      }
    }
  }
  if (configFile == null) {
    getLog().debug(""String_Node_Str"");
    configFile=MavenUtils.getConfigFile(build);
  }
  if (!configFile.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + configFile);
  }
 else {
    getLog().info(""String_Node_Str"" + configFile);
  }
  if (services == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        services=cfg;
        break;
      }
    }
  }
  if (rslUrls == null) {
    rslUrls=new String[]{""String_Node_Str""};
  }
  if (policyFileUrls == null) {
    policyFileUrls=new String[]{""String_Node_Str""};
  }
  if (metadata == null) {
    metadata=new Metadata();
    if (project.getDevelopers() != null && !project.getDevelopers().isEmpty()) {
      List<Developer> developers=project.getDevelopers();
      for (      Developer d : developers) {
        metadata.setCreator(d.getName());
        break;
      }
    }
    if (project.getContributors() != null && !project.getContributors().isEmpty()) {
      List<Contributor> contributors=project.getContributors();
      for (      Contributor c : contributors) {
        metadata.setContributor(c.getName());
        break;
      }
    }
    metadata.setDate(new Date());
  }
  if (licenses == null) {
    licenses=getLicenses();
  }
  validateLocales(runtimeLocales);
  validateLocales(compiledLocales);
  configuration=builder.getDefaultConfiguration();
  configure();
  compilationData=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
  setMavenPathResolver();
  getOutput().getParentFile().mkdirs();
}",0.9597142290136932
10014,"@SuppressWarnings(""String_Node_Str"") private boolean isCompilationRequired() throws MojoExecutionException {
  if (!quick) {
    return true;
  }
  Artifact artifact=artifactFactory.createArtifact(project.getGroupId(),project.getArtifactId(),project.getVersion(),null,project.getPackaging());
  try {
    resolver.resolve(artifact,remoteRepositories,localRepository);
  }
 catch (  AbstractArtifactResolutionException e) {
    return true;
  }
  File artifactFile=artifact.getFile();
  if (artifactFile == null || !artifactFile.exists()) {
    getLog().warn(""String_Node_Str"");
    return true;
  }
  try {
    FileUtils.copyFile(artifactFile,outputFile);
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  long lastCompiledArtifact=artifactFile.lastModified();
  Set<Artifact> dependencies=getDependencyArtifacts();
  for (  Artifact dependency : dependencies) {
    if (FileUtils.isFileNewer(dependency.getFile(),lastCompiledArtifact)) {
      getLog().warn(""String_Node_Str"" + dependency);
      return true;
    }
  }
  List<File> paths=new ArrayList<File>(Arrays.asList(sourcePaths));
  if (compiledLocales != null) {
    paths.remove(new File(resourceBundlePath));
    for (    String locale : compiledLocales) {
      paths.add(MavenUtils.getLocaleResourcePath(resourceBundlePath,locale));
    }
  }
  if (runtimeLocales != null) {
    for (    String locale : runtimeLocales) {
      paths.add(MavenUtils.getLocaleResourcePath(resourceBundlePath,locale));
    }
  }
  for (  File sourcePath : paths) {
    Collection<File> files=FileUtils.listFiles(sourcePath,new AgeFileFilter(lastCompiledArtifact,false),TrueFileFilter.INSTANCE);
    if (files.size() > 0) {
      getLog().warn(""String_Node_Str"");
      return true;
    }
  }
  return false;
}","@SuppressWarnings(""String_Node_Str"") private boolean isCompilationRequired() throws MojoExecutionException {
  if (!quick) {
    return true;
  }
  Artifact artifact=artifactFactory.createArtifact(project.getGroupId(),project.getArtifactId(),project.getVersion(),null,project.getPackaging());
  try {
    resolver.resolve(artifact,remoteRepositories,localRepository);
  }
 catch (  AbstractArtifactResolutionException e) {
    return true;
  }
  File artifactFile=artifact.getFile();
  if (artifactFile == null || !artifactFile.exists()) {
    getLog().warn(""String_Node_Str"");
    return true;
  }
  try {
    FileUtils.copyFile(artifactFile,getOutput());
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  long lastCompiledArtifact=artifactFile.lastModified();
  Set<Artifact> dependencies=getDependencyArtifacts();
  for (  Artifact dependency : dependencies) {
    if (FileUtils.isFileNewer(dependency.getFile(),lastCompiledArtifact)) {
      getLog().warn(""String_Node_Str"" + dependency);
      return true;
    }
  }
  List<File> paths=new ArrayList<File>(Arrays.asList(sourcePaths));
  if (compiledLocales != null) {
    paths.remove(new File(resourceBundlePath));
    for (    String locale : compiledLocales) {
      paths.add(MavenUtils.getLocaleResourcePath(resourceBundlePath,locale));
    }
  }
  if (runtimeLocales != null) {
    for (    String locale : runtimeLocales) {
      paths.add(MavenUtils.getLocaleResourcePath(resourceBundlePath,locale));
    }
  }
  for (  File sourcePath : paths) {
    Collection<File> files=FileUtils.listFiles(sourcePath,new AgeFileFilter(lastCompiledArtifact,false),TrueFileFilter.INSTANCE);
    if (files.size() > 0) {
      getLog().warn(""String_Node_Str"");
      return true;
    }
  }
  return false;
}",0.9941650458460684
10015,"/** 
 * Perform actions after compilation has run
 */
@Override protected void tearDown() throws MojoExecutionException, MojoFailureException {
  if (isSetProjectFile) {
    project.getArtifact().setFile(outputFile);
  }
  Report report=builder.getReport();
  if (linkReport) {
    writeLinkReport(report);
  }
  if (configurationReport) {
    writeConfigurationReport(report);
  }
  if (runtimeLocales != null) {
    writeResourceBundle(report);
  }
}","/** 
 * Perform actions after compilation has run
 */
@Override protected void tearDown() throws MojoExecutionException, MojoFailureException {
  if (isSetProjectFile) {
    project.getArtifact().setFile(getOutput());
  }
  Report report=builder.getReport();
  if (linkReport) {
    writeLinkReport(report);
  }
  if (configurationReport) {
    writeConfigurationReport(report);
  }
  if (runtimeLocales != null) {
    writeResourceBundle(report);
  }
}",0.9767955801104972
10016,"private void updateSecuritySandbox() throws MojoExecutionException {
  File fpTrustFolder=FlashPlayerUtils.getTrustDir();
  File mavenCfg=new File(fpTrustFolder,""String_Node_Str"");
  if (!mavenCfg.exists()) {
    try {
      mavenCfg.createNewFile();
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"" + mavenCfg.getAbsolutePath(),e);
    }
  }
  try {
    FileReader input=new FileReader(mavenCfg);
    String cfg=IOUtils.toString(input);
    input.close();
    String trustedFile=outputFile.getAbsolutePath();
    if (cfg.contains(trustedFile)) {
      getLog().info(""String_Node_Str"" + trustedFile);
      return;
    }
 else {
      getLog().info(""String_Node_Str"" + trustedFile);
    }
    if (!cfg.endsWith(""String_Node_Str"")) {
      cfg=cfg + '\n';
    }
    cfg=cfg + trustedFile + '\n';
    FileWriter output=new FileWriter(mavenCfg);
    IOUtils.write(cfg,output);
    output.flush();
    output.close();
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"" + mavenCfg.getAbsolutePath(),e);
  }
}","private void updateSecuritySandbox() throws MojoExecutionException {
  File fpTrustFolder=FlashPlayerUtils.getTrustDir();
  File mavenCfg=new File(fpTrustFolder,""String_Node_Str"");
  if (!mavenCfg.exists()) {
    try {
      mavenCfg.createNewFile();
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"" + mavenCfg.getAbsolutePath(),e);
    }
  }
  try {
    FileReader input=new FileReader(mavenCfg);
    String cfg=IOUtils.toString(input);
    input.close();
    String trustedFile=getOutput().getAbsolutePath();
    if (cfg.contains(trustedFile)) {
      getLog().info(""String_Node_Str"" + trustedFile);
      return;
    }
 else {
      getLog().info(""String_Node_Str"" + trustedFile);
    }
    if (!cfg.endsWith(""String_Node_Str"")) {
      cfg=cfg + '\n';
    }
    cfg=cfg + trustedFile + '\n';
    FileWriter output=new FileWriter(mavenCfg);
    IOUtils.write(cfg,output);
    output.flush();
    output.close();
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"" + mavenCfg.getAbsolutePath(),e);
  }
}",0.9902912621359224
10017,"@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  File sourceDirectory=new File(build.getSourceDirectory());
  if (!sourceDirectory.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + sourceDirectory);
  }
  if (source == null) {
    getLog().warn(""String_Node_Str"");
    source=resolveSourceFile(project,sourceFile);
  }
  if (source == null) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
  if (!source.exists()) {
    throw new MojoFailureException(""String_Node_Str"" + sourceFile);
  }
  try {
    builder=new Application(source);
  }
 catch (  FileNotFoundException e) {
    throw new MojoFailureException(""String_Node_Str"" + source);
  }
  if (moduleFiles != null) {
    modules=new ArrayList<File>();
    for (    String modulePath : moduleFiles) {
      File module=new File(sourceDirectory,modulePath);
      if (!module.exists()) {
        throw new MojoExecutionException(""String_Node_Str"" + module + ""String_Node_Str"");
      }
      modules.add(module);
    }
    if (loadExternsOnModules) {
      super.linkReport=true;
    }
  }
  super.setUp();
  if (outputFile == null) {
    if (output == null) {
      outputFile=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
    }
 else {
      outputFile=new File(build.getDirectory(),output);
    }
  }
  builder.setOutput(outputFile);
}","@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  File sourceDirectory=new File(build.getSourceDirectory());
  if (!sourceDirectory.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + sourceDirectory);
  }
  if (source == null) {
    getLog().warn(""String_Node_Str"");
    source=resolveSourceFile(project,sourceFile);
  }
  if (source == null) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
  if (!source.exists()) {
    throw new MojoFailureException(""String_Node_Str"" + sourceFile);
  }
  try {
    builder=new Application(source);
  }
 catch (  FileNotFoundException e) {
    throw new MojoFailureException(""String_Node_Str"" + source);
  }
  if (moduleFiles != null) {
    modules=new ArrayList<File>();
    for (    String modulePath : moduleFiles) {
      File module=new File(sourceDirectory,modulePath);
      if (!module.exists()) {
        throw new MojoExecutionException(""String_Node_Str"" + module + ""String_Node_Str"");
      }
      modules.add(module);
    }
    if (loadExternsOnModules) {
      super.linkReport=true;
    }
  }
  super.setUp();
  builder.setOutput(getOutput());
}",0.8945511564092513
10018,"@Override protected void writeResourceBundle(String[] bundles,String locale,File localePath) throws MojoExecutionException {
  getLog().info(""String_Node_Str"" + locale);
  Library localized=new Library();
  localized.setConfiguration(configuration);
  configuration.setLibraryPath(new File[0]);
  localized.setLogger(new CompileLogger(getLog()));
  configuration.addLibraryPath(new File[]{outputFile});
  setLocales(new String[]{locale});
  configuration.setSourcePath(new File[]{localePath});
  for (  String bundle : bundles) {
    localized.addResourceBundle(bundle);
  }
  configuration.addLibraryPath(getResourcesBundles(locale));
  File output=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"" + locale+ ""String_Node_Str"");
  localized.setOutput(output);
  build(localized);
  projectHelper.attachArtifact(project,""String_Node_Str"",locale,output);
}","@Override protected void writeResourceBundle(String[] bundles,String locale,File localePath) throws MojoExecutionException {
  getLog().info(""String_Node_Str"" + locale);
  Library localized=new Library();
  localized.setConfiguration(configuration);
  configuration.setLibraryPath(new File[0]);
  localized.setLogger(new CompileLogger(getLog()));
  configuration.addLibraryPath(new File[]{getOutput()});
  setLocales(new String[]{locale});
  configuration.setSourcePath(new File[]{localePath});
  for (  String bundle : bundles) {
    localized.addResourceBundle(bundle);
  }
  configuration.addLibraryPath(getResourcesBundles(locale));
  File output=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"" + locale+ ""String_Node_Str"");
  localized.setOutput(output);
  build(localized);
  projectHelper.attachArtifact(project,""String_Node_Str"",locale,output);
}",0.9880205362236166
10019,"@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  builder=new Library();
  if (directory != null) {
    builder.setDirectory(directory);
  }
  super.setUp();
  if (outputFile == null) {
    if (output == null) {
      outputFile=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
    }
 else {
      outputFile=new File(build.getDirectory(),output);
    }
  }
  builder.setOutput(outputFile);
  if (checkNullOrEmpty(includeClasses) && checkNullOrEmpty(includeFiles) && checkNullOrEmpty(includeNamespaces)&& checkNullOrEmpty(includeResourceBundles)&& checkNullOrEmpty(includeResourceBundlesArtifact)&& checkNullOrEmpty(includeSources)&& checkNullOrEmpty(includeStylesheet)) {
    getLog().warn(""String_Node_Str"");
    List<File> sourcePaths=new ArrayList<File>(Arrays.asList(this.sourcePaths));
    sourcePaths.remove(new File(resourceBundlePath));
    includeSources=sourcePaths.toArray(new File[0]);
    includeFiles=listAllResources();
  }
  if (!checkNullOrEmpty(includeClasses)) {
    for (    String asClass : includeClasses) {
      builder.addComponent(asClass);
    }
  }
  if (!checkNullOrEmpty(includeFiles)) {
    for (    String includeFile : includeFiles) {
      if (includeFile == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      File file=MavenUtils.resolveResourceFile(project,includeFile);
      File folder=getResourceFolder(file);
      String relativePath=PathUtil.getRelativePath(folder,file);
      if (relativePath.startsWith(""String_Node_Str"")) {
        relativePath=file.getName();
      }
      builder.addArchiveFile(relativePath.replace('\\','/'),file);
    }
  }
  if (!checkNullOrEmpty(includeNamespaces)) {
    for (    String uri : includeNamespaces) {
      try {
        builder.addComponent(new URI(uri));
      }
 catch (      URISyntaxException e) {
        throw new MojoExecutionException(""String_Node_Str"" + uri,e);
      }
    }
  }
  if (!checkNullOrEmpty(includeResourceBundles)) {
    for (    String rb : includeResourceBundles) {
      builder.addResourceBundle(rb);
    }
  }
  if (!checkNullOrEmpty(includeResourceBundlesArtifact)) {
    for (    MavenArtifact mvnArtifact : includeResourceBundlesArtifact) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      String bundleFile;
      try {
        bundleFile=FileUtils.readFileToString(artifact.getFile());
      }
 catch (      IOException e) {
        throw new MojoExecutionException(""String_Node_Str"" + artifact,e);
      }
      String[] bundles=bundleFile.split(""String_Node_Str"");
      for (      String bundle : bundles) {
        builder.addResourceBundle(bundle);
      }
    }
  }
  if (!checkNullOrEmpty(includeSources)) {
    for (    File file : includeSources) {
      if (file == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      if (!file.getName().contains(""String_Node_Str"") && !file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
      }
      builder.addComponent(file);
    }
  }
  includeStylesheet();
  computeDigest();
  if (addMavenDescriptor) {
    builder.addArchiveFile(""String_Node_Str"" + project.getGroupId() + ""String_Node_Str""+ project.getArtifactId()+ ""String_Node_Str"",new File(project.getBasedir(),""String_Node_Str""));
  }
}","@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  builder=new Library();
  if (directory != null) {
    builder.setDirectory(directory);
  }
  super.setUp();
  builder.setOutput(getOutput());
  if (checkNullOrEmpty(includeClasses) && checkNullOrEmpty(includeFiles) && checkNullOrEmpty(includeNamespaces)&& checkNullOrEmpty(includeResourceBundles)&& checkNullOrEmpty(includeResourceBundlesArtifact)&& checkNullOrEmpty(includeSources)&& checkNullOrEmpty(includeStylesheet)) {
    getLog().warn(""String_Node_Str"");
    List<File> sourcePaths=new ArrayList<File>(Arrays.asList(this.sourcePaths));
    sourcePaths.remove(new File(resourceBundlePath));
    includeSources=sourcePaths.toArray(new File[0]);
    includeFiles=listAllResources();
  }
  if (!checkNullOrEmpty(includeClasses)) {
    for (    String asClass : includeClasses) {
      builder.addComponent(asClass);
    }
  }
  if (!checkNullOrEmpty(includeFiles)) {
    for (    String includeFile : includeFiles) {
      if (includeFile == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      File file=MavenUtils.resolveResourceFile(project,includeFile);
      File folder=getResourceFolder(file);
      String relativePath=PathUtil.getRelativePath(folder,file);
      if (relativePath.startsWith(""String_Node_Str"")) {
        relativePath=file.getName();
      }
      builder.addArchiveFile(relativePath.replace('\\','/'),file);
    }
  }
  if (!checkNullOrEmpty(includeNamespaces)) {
    for (    String uri : includeNamespaces) {
      try {
        builder.addComponent(new URI(uri));
      }
 catch (      URISyntaxException e) {
        throw new MojoExecutionException(""String_Node_Str"" + uri,e);
      }
    }
  }
  if (!checkNullOrEmpty(includeResourceBundles)) {
    for (    String rb : includeResourceBundles) {
      builder.addResourceBundle(rb);
    }
  }
  if (!checkNullOrEmpty(includeResourceBundlesArtifact)) {
    for (    MavenArtifact mvnArtifact : includeResourceBundlesArtifact) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      String bundleFile;
      try {
        bundleFile=FileUtils.readFileToString(artifact.getFile());
      }
 catch (      IOException e) {
        throw new MojoExecutionException(""String_Node_Str"" + artifact,e);
      }
      String[] bundles=bundleFile.split(""String_Node_Str"");
      for (      String bundle : bundles) {
        builder.addResourceBundle(bundle);
      }
    }
  }
  if (!checkNullOrEmpty(includeSources)) {
    for (    File file : includeSources) {
      if (file == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      if (!file.getName().contains(""String_Node_Str"") && !file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
      }
      builder.addComponent(file);
    }
  }
  includeStylesheet();
  computeDigest();
  if (addMavenDescriptor) {
    builder.addArchiveFile(""String_Node_Str"" + project.getGroupId() + ""String_Node_Str""+ project.getArtifactId()+ ""String_Node_Str"",new File(project.getBasedir(),""String_Node_Str""));
  }
}",0.963907812726482
10020,"@SuppressWarnings(""String_Node_Str"") private File getResourceFolder(File file){
  String absolutePath=file.getAbsolutePath();
  for (  File sourcePath : sourcePaths) {
    if (absolutePath.startsWith(sourcePath.getAbsolutePath())) {
      return sourcePath;
    }
  }
  for (  String sourcePath : (List<String>)project.getCompileSourceRoots()) {
    if (absolutePath.startsWith(sourcePath)) {
      return new File(sourcePath);
    }
  }
  for (  Resource resource : (List<Resource>)project.getResources()) {
    if (absolutePath.startsWith(resource.getDirectory())) {
      return new File(resource.getDirectory());
    }
  }
  return project.getBasedir();
}","@SuppressWarnings(""String_Node_Str"") private File getResourceFolder(File file){
  String absolutePath=file.getAbsolutePath();
  for (  File sourcePath : sourcePaths) {
    if (absolutePath.startsWith(sourcePath.getAbsolutePath())) {
      return sourcePath;
    }
  }
  List<String> sourceRoots;
  if (project.getExecutionProject() != null) {
    sourceRoots=project.getExecutionProject().getCompileSourceRoots();
  }
 else {
    sourceRoots=project.getCompileSourceRoots();
  }
  for (  String sourcePath : sourceRoots) {
    if (absolutePath.startsWith(sourcePath)) {
      return new File(sourcePath);
    }
  }
  for (  Resource resource : (List<Resource>)project.getResources()) {
    if (absolutePath.startsWith(resource.getDirectory())) {
      return new File(resource.getDirectory());
    }
  }
  return project.getBasedir();
}",0.8401337792642141
10021,"@Override protected void tearDown() throws MojoExecutionException, MojoFailureException {
  super.tearDown();
  if (updateSecuritySandbox) {
    updateSecuritySandbox();
  }
  if (modules != null) {
    configuration.addExterns(new File[]{linkReportFile});
    for (    File module : modules) {
      getLog().info(""String_Node_Str"" + module);
      String moduleName=module.getName();
      moduleName=moduleName.substring(0,moduleName.lastIndexOf('.'));
      Application moduleBuilder;
      try {
        moduleBuilder=new Application(module);
      }
 catch (      FileNotFoundException e) {
        throw new MojoFailureException(""String_Node_Str"" + module);
      }
      moduleBuilder.setConfiguration(configuration);
      moduleBuilder.setLogger(new CompileLogger(getLog()));
      File outputModule=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"" + moduleName+ ""String_Node_Str""+ project.getPackaging());
      moduleBuilder.setOutput(outputModule);
      build(moduleBuilder);
      projectHelper.attachArtifact(project,""String_Node_Str"",moduleName,outputModule);
    }
  }
}","@Override protected void tearDown() throws MojoExecutionException, MojoFailureException {
  super.tearDown();
  if (updateSecuritySandbox) {
    updateSecuritySandbox();
  }
  if (modules != null) {
    compileModules();
  }
}",0.309880239520958
10022,"/** 
 * Run the SWF that contains the FlexUnit tests.
 * @param swf the SWF.
 * @throws Exception if there is an error launching the tests.
 */
public void runTests(File swf) throws Exception {
  System.err.println(""String_Node_Str"" + Arrays.asList(launcherCommand));
  if (launcherCommand != null) {
    launcherCommand=StringUtils.concat(launcherCommand,new String[]{swf.getAbsolutePath()});
    System.err.println(""String_Node_Str"" + Arrays.asList(launcherCommand));
    Runtime.getRuntime().exec(launcherCommand);
  }
 else   if (MavenUtils.isWindows()) {
    Runtime.getRuntime().exec(StringUtils.concat(WINDOWS_CMD,new String[]{swf.getAbsolutePath()}));
  }
 else   if (MavenUtils.isMac()) {
    Runtime.getRuntime().exec(StringUtils.concat(MAC_CMD,new String[]{swf.getAbsolutePath()}));
  }
 else {
    Process p=Runtime.getRuntime().exec(StringUtils.concat(UNIX_CMD,new String[]{swf.getAbsolutePath()}));
    int exitValue=p.waitFor();
    if (exitValue != 0) {
      Runtime.getRuntime().exec(StringUtils.concat(UNIX_CMD,new String[]{swf.getAbsolutePath()}));
    }
  }
}","/** 
 * Run the SWF that contains the FlexUnit tests.
 * @param swf the SWF.
 * @throws Exception if there is an error launching the tests.
 */
public void runTests(File swf) throws Exception {
  if (launcherCommand != null) {
    launcherCommand=StringUtils.concat(launcherCommand,new String[]{swf.getAbsolutePath()});
    log.debug(""String_Node_Str"" + Arrays.asList(launcherCommand));
    Commandline cl=new Commandline();
    cl.setExecutable(launcherCommand[0]);
    for (int i=1; i < launcherCommand.length; i++) {
      cl.createArg().setValue(launcherCommand[i]);
    }
    StreamConsumer stdout=new StreamConsumer(){
      public void consumeLine(      String line){
        log.debug(""String_Node_Str"" + line);
      }
    }
;
    StreamConsumer stderr=new StreamConsumer(){
      public void consumeLine(      String line){
        log.debug(""String_Node_Str"" + line);
      }
    }
;
    log.debug(""String_Node_Str"" + cl);
    int result=CommandLineUtils.executeCommandLine(cl,stdout,stderr);
    log.debug(""String_Node_Str"" + result);
  }
 else   if (MavenUtils.isWindows()) {
    Runtime.getRuntime().exec(StringUtils.concat(WINDOWS_CMD,new String[]{swf.getAbsolutePath()}));
  }
 else   if (MavenUtils.isMac()) {
    Runtime.getRuntime().exec(StringUtils.concat(MAC_CMD,new String[]{swf.getAbsolutePath()}));
  }
 else {
    Process p=Runtime.getRuntime().exec(StringUtils.concat(UNIX_CMD,new String[]{swf.getAbsolutePath()}));
    int exitValue=p.waitFor();
    if (exitValue != 0) {
      Runtime.getRuntime().exec(StringUtils.concat(UNIX_CMD,new String[]{swf.getAbsolutePath()}));
    }
  }
}",0.7065823726292302
10023,"public FlexUnitLauncher(List<String> command){
  if (command != null) {
    launcherCommand=command.toArray(new String[]{});
  }
 else {
    launcherCommand=getPlatformDefaultCommand();
  }
}","public FlexUnitLauncher(List<String> command,Log logger){
  if (command != null) {
    launcherCommand=command.toArray(new String[]{});
  }
 else {
    launcherCommand=getPlatformDefaultCommand();
  }
  log=logger;
}",0.9336609336609336
10024,"@Override protected void run() throws MojoExecutionException, MojoFailureException {
  receiveFlexUnitResults();
  getLog().info(""String_Node_Str"" + flexUnitCommand);
  final FlexUnitLauncher browser=new FlexUnitLauncher(flexUnitCommand);
  try {
    browser.runTests(swf);
  }
 catch (  Exception e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  while (!complete) {
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
      throw new MojoExecutionException(e.getMessage(),e);
    }
  }
}","@Override protected void run() throws MojoExecutionException, MojoFailureException {
  receiveFlexUnitResults();
  getLog().info(""String_Node_Str"" + flexUnitCommand);
  final FlexUnitLauncher browser=new FlexUnitLauncher(flexUnitCommand,getLog());
  try {
    browser.runTests(swf);
  }
 catch (  Exception e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  while (!complete) {
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
      throw new MojoExecutionException(e.getMessage(),e);
    }
  }
}",0.9916897506925209
10025,"private String get0(String[] a){
  return a == null ? null : (a.length < 1 ? null : a[0]);
}","private String get0(String[] a){
  return this.get0Or1(a,0);
}",0.6363636363636364
10026,"private String get1(String[] a){
  return a == null ? null : (a.length < 2 ? null : a[1]);
}","private String get1(String[] a){
  return this.get0Or1(a,1);
}",0.6363636363636364
10027,"/** 
 * Setup before compilation of source
 */
@SuppressWarnings(""String_Node_Str"") @Override public void setUp() throws MojoExecutionException, MojoFailureException {
  processLocales();
  if (sourcePaths == null) {
    List<String> sourceRoots=project.getCompileSourceRoots();
    List<File> sources=getValidSourceRoots(sourceRoots);
    if (compiledLocales != null) {
      sources.add(new File(resourceBundlePath));
    }
    sourcePaths=sources.toArray(new File[sources.size()]);
  }
  if (configFile == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        configFile=cfg;
        break;
      }
    }
  }
  if (configFile == null) {
    getLog().debug(""String_Node_Str"");
    configFile=MavenUtils.getConfigFile(build);
  }
  if (!configFile.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + configFile);
  }
 else {
    getLog().info(""String_Node_Str"" + configFile);
  }
  if (services == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        services=cfg;
        break;
      }
    }
  }
  if (rslUrls == null) {
    rslUrls=new String[]{""String_Node_Str""};
  }
  if (policyFileUrls == null) {
    policyFileUrls=new String[]{""String_Node_Str""};
  }
  if (metadata == null) {
    metadata=new Metadata();
    if (project.getDevelopers() != null && !project.getDevelopers().isEmpty()) {
      List<Developer> developers=project.getDevelopers();
      for (      Developer d : developers) {
        metadata.setCreator(d.getName());
        break;
      }
    }
    if (project.getContributors() != null && !project.getContributors().isEmpty()) {
      List<Contributor> contributors=project.getContributors();
      for (      Contributor c : contributors) {
        metadata.setContributor(c.getName());
        break;
      }
    }
    metadata.setDate(new Date());
  }
  if (licenses == null) {
    licenses=getLicenses();
  }
  validateLocales(runtimeLocales);
  validateLocales(compiledLocales);
  configuration=builder.getDefaultConfiguration();
  configure();
  compilationData=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
  setMavenPathResolver();
}","/** 
 * Setup before compilation of source
 */
@SuppressWarnings(""String_Node_Str"") @Override public void setUp() throws MojoExecutionException, MojoFailureException {
  processLocales();
  if (sourcePaths == null) {
    List<String> sourceRoots=project.getCompileSourceRoots();
    List<File> sources=getValidSourceRoots(sourceRoots);
    if (compiledLocales != null) {
      sources.addAll(getResourceBundlePath());
    }
    sourcePaths=sources.toArray(new File[sources.size()]);
  }
  if (configFile == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        configFile=cfg;
        break;
      }
    }
  }
  if (configFile == null) {
    getLog().debug(""String_Node_Str"");
    configFile=MavenUtils.getConfigFile(build);
  }
  if (!configFile.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + configFile);
  }
 else {
    getLog().info(""String_Node_Str"" + configFile);
  }
  if (services == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        services=cfg;
        break;
      }
    }
  }
  if (rslUrls == null) {
    rslUrls=new String[]{""String_Node_Str""};
  }
  if (policyFileUrls == null) {
    policyFileUrls=new String[]{""String_Node_Str""};
  }
  if (metadata == null) {
    metadata=new Metadata();
    if (project.getDevelopers() != null && !project.getDevelopers().isEmpty()) {
      List<Developer> developers=project.getDevelopers();
      for (      Developer d : developers) {
        metadata.setCreator(d.getName());
        break;
      }
    }
    if (project.getContributors() != null && !project.getContributors().isEmpty()) {
      List<Contributor> contributors=project.getContributors();
      for (      Contributor c : contributors) {
        metadata.setContributor(c.getName());
        break;
      }
    }
    metadata.setDate(new Date());
  }
  if (licenses == null) {
    licenses=getLicenses();
  }
  validateLocales(runtimeLocales);
  validateLocales(compiledLocales);
  configuration=builder.getDefaultConfiguration();
  configure();
  compilationData=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
  setMavenPathResolver();
}",0.9958643507030605
10028,"private void updateSecuritySandbox() throws MojoExecutionException {
  File userHome=new File(System.getProperty(""String_Node_Str""));
  File fpTrustFolder=new File(userHome,getFPTrustFolder());
  if (!fpTrustFolder.exists()) {
    fpTrustFolder.mkdirs();
  }
  File mavenCfg=new File(fpTrustFolder,""String_Node_Str"");
  if (!mavenCfg.exists()) {
    try {
      mavenCfg.createNewFile();
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"" + mavenCfg.getAbsolutePath(),e);
    }
  }
  try {
    FileReader input=new FileReader(mavenCfg);
    String cfg=IOUtils.toString(input);
    input.close();
    String trustedFile=outputFile.getAbsolutePath();
    if (cfg.contains(trustedFile)) {
      getLog().info(""String_Node_Str"" + trustedFile);
      return;
    }
 else {
      getLog().info(""String_Node_Str"" + trustedFile);
    }
    if (!cfg.endsWith(""String_Node_Str"")) {
      cfg=cfg + '\n';
    }
    cfg=cfg + trustedFile + '\n';
    FileWriter output=new FileWriter(mavenCfg);
    IOUtils.write(cfg,output);
    output.flush();
    output.close();
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"" + mavenCfg.getAbsolutePath(),e);
  }
}","private void updateSecuritySandbox() throws MojoExecutionException {
  File fpTrustFolder=FlashPlayerUtils.getTrustDir();
  File mavenCfg=new File(fpTrustFolder,""String_Node_Str"");
  if (!mavenCfg.exists()) {
    try {
      mavenCfg.createNewFile();
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"" + mavenCfg.getAbsolutePath(),e);
    }
  }
  try {
    FileReader input=new FileReader(mavenCfg);
    String cfg=IOUtils.toString(input);
    input.close();
    String trustedFile=outputFile.getAbsolutePath();
    if (cfg.contains(trustedFile)) {
      getLog().info(""String_Node_Str"" + trustedFile);
      return;
    }
 else {
      getLog().info(""String_Node_Str"" + trustedFile);
    }
    if (!cfg.endsWith(""String_Node_Str"")) {
      cfg=cfg + '\n';
    }
    cfg=cfg + trustedFile + '\n';
    FileWriter output=new FileWriter(mavenCfg);
    IOUtils.write(cfg,output);
    output.flush();
    output.close();
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"" + mavenCfg.getAbsolutePath(),e);
  }
}",0.907351022183558
10029,"@Override protected void configure() throws MojoExecutionException {
  compiledLocales=getLocales();
  runtimeLocales=null;
  super.configure();
  configuration.addSourcePath(new File[]{new File(build.getTestOutputDirectory())});
  configuration.addSourcePath(getValidSourceRoots(project.getTestCompileSourceRoots()).toArray(new File[0]));
  configuration.allowSourcePathOverlap(true);
  configuration.enableDebugging(true,super.debugPassword);
}","@Override protected void configure() throws MojoExecutionException, MojoFailureException {
  compiledLocales=getLocales();
  runtimeLocales=null;
  super.configure();
  configuration.addSourcePath(new File[]{new File(build.getTestOutputDirectory())});
  configuration.addSourcePath(getValidSourceRoots(project.getTestCompileSourceRoots()).toArray(new File[0]));
  configuration.allowSourcePathOverlap(true);
  configuration.enableDebugging(true,super.debugPassword);
}",0.975929978118162
10030,"@Override protected void resolveDependencies() throws MojoExecutionException {
  configuration.setExternalLibraryPath(getGlobalDependency());
  configuration.setLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(merge(getResourcesBundles(getDefaultLocale()),getResourcesBundles(runtimeLocales),getResourcesBundles(compiledLocales)));
  configuration.includeLibraries(merge(getDependenciesPath(""String_Node_Str""),getDependenciesPath(""String_Node_Str""),getDependenciesPath(""String_Node_Str""),getDependenciesPath(""String_Node_Str""),getDependenciesPath(""String_Node_Str"")));
}","@Override protected void resolveDependencies() throws MojoExecutionException, MojoFailureException {
  configuration.setExternalLibraryPath(getGlobalDependency());
  configuration.setLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(merge(getResourcesBundles(getDefaultLocale()),getResourcesBundles(runtimeLocales),getResourcesBundles(compiledLocales)));
  configuration.includeLibraries(merge(getDependenciesPath(""String_Node_Str""),getDependenciesPath(""String_Node_Str""),getDependenciesPath(""String_Node_Str""),getDependenciesPath(""String_Node_Str""),getDependenciesPath(""String_Node_Str"")));
  configuration.setTheme(getThemes());
}",0.9568904593639576
10031,"@Override protected void configure() throws MojoExecutionException {
  super.configure();
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addSourcePath(getValidSourceRoots(project.getTestCompileSourceRoots()).toArray(new File[0]));
}","@Override protected void configure() throws MojoExecutionException, MojoFailureException {
  super.configure();
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addSourcePath(getValidSourceRoots(project.getTestCompileSourceRoots()).toArray(new File[0]));
}",0.9612676056338028
10032,"/** 
 * Setup builder configuration
 * @throws MojoExecutionException
 */
protected void configure() throws MojoExecutionException {
  resolveDependencies();
  configuration.enableAccessibility(accessible);
  configuration.allowSourcePathOverlap(allowSourcePathOverlap);
  configuration.useActionScript3(as3);
  configuration.enableDebugging(isDebug(),debugPassword);
  configuration.useECMAScript(es);
  if (fonts != null) {
    configureFontsAntiAliasing();
    enableFlashType();
    configuration.setFontManagers(fonts.getManagers());
    configuration.setMaximumCachedFonts(fonts.getMaxCachedFonts());
    configuration.setMaximumGlyphsPerFace(fonts.getMaxGlyphsPerFace());
    if (fonts.getLanguages() != null && !fonts.getLanguages().isEmpty()) {
      for (      String language : fonts.getLanguages().keySet()) {
        configuration.setFontLanguageRange(language,fonts.getLanguages().get(language));
      }
    }
  }
  File fontsSnapshot=getFontsSnapshot();
  if (fontsSnapshot == null || !fontsSnapshot.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + fontsSnapshot);
  }
  configuration.setLocalFontSnapshot(fontsSnapshot);
  configuration.setActionScriptMetadata(keepAs3Metadatas);
  configuration.keepCompilerGeneratedActionScript(keepGeneratedActionscript);
  if (licenses != null) {
    for (    String licenseName : licenses.keySet()) {
      String key=licenses.get(licenseName);
      configuration.setLicense(licenseName,key);
    }
  }
  addDefines();
  if (compiledLocales == null && runtimeLocales == null && isApplication()) {
    setLocales(getDefaultLocale());
  }
 else   if (compiledLocales != null) {
    setLocales(compiledLocales);
  }
 else {
    setLocales(new String[0]);
  }
  List<Namespace> fdkNamespaces=MavenUtils.getFdkNamespaces(getDependencyArtifacts(),build);
  if (this.namespaces != null) {
    fdkNamespaces.addAll(Arrays.asList(this.namespaces));
  }
  this.namespaces=fdkNamespaces.toArray(new Namespace[0]);
  if (namespaces != null) {
    for (    Namespace namespace : namespaces) {
      File manifest=namespace.getManifest();
      configuration.setComponentManifest(namespace.getUri(),manifest);
    }
  }
  configuration.optimize(optimize);
  if (this.warnings != null) {
    configureWarnings(configuration);
  }
  configuration.setSourcePath(sourcePaths);
  configuration.enableStrictChecking(strict);
  configuration.useNetwork(useNetwork);
  configuration.enableVerboseStacktraces(verboseStacktraces);
  if (contextRoot != null) {
    configuration.setContextRoot(contextRoot);
  }
  configuration.keepLinkReport(linkReport);
  configuration.keepConfigurationReport(configurationReport);
  configuration.setConfiguration(configFile);
  configuration.setServiceConfiguration(services);
  if (loadExterns != null) {
    List<File> externsFiles=new ArrayList<File>();
    for (    MavenArtifact mvnArtifact : loadExterns) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      externsFiles.add(artifact.getFile());
    }
    configuration.setExterns(externsFiles.toArray(new File[externsFiles.size()]));
  }
  if (rawMetadata != null) {
    configuration.setSWFMetaData(rawMetadata);
  }
  if (metadata != null) {
    if (metadata.getContributor() != null) {
      configuration.setSWFMetaData(Configuration.CONTRIBUTOR,metadata.getContributor());
    }
    if (metadata.getCreator() != null) {
      configuration.setSWFMetaData(Configuration.CREATOR,metadata.getCreator());
    }
    if (metadata.getDate() != null) {
      configuration.setSWFMetaData(Configuration.DATE,metadata.getDate());
    }
    if (metadata.getDescriptions() != null) {
      configuration.setSWFMetaData(Configuration.DESCRIPTION,metadata.getDescriptions());
    }
    if (metadata.getTitles() != null) {
      configuration.setSWFMetaData(Configuration.TITLE,metadata.getTitles());
    }
    if (metadata.getLanguage() != null) {
      configuration.setSWFMetaData(Configuration.LANGUAGE,metadata.getLanguage());
    }
  }
  setCompatibilityMode();
  configuration.setActionScriptFileEncoding(encoding);
  setTargetPlayer();
  if (defaultsCss != null)   configuration.setDefaultCSS(defaultsCss);
  configuration.setDefaultBackgroundColor(Integer.parseInt(defaultBackgroundColor,16));
  configuration.setDefaultFrameRate(defaultFrameRate);
  configuration.setDefaultScriptLimits(scriptMaxRecursionDepth,scriptMaxExecutionTime);
  configuration.setDefaultSize(defaultSizeWidth,defaultSizeHeight);
  if (externs != null && externs.length > 0) {
    configuration.setExterns(externs);
  }
  if (frames != null && frames.length > 0) {
    for (    FrameLabel frame : frames) {
      configuration.setFrameLabel(frame.getLabel(),frame.getClassNames());
    }
  }
  if (includes != null && includes.length > 0) {
    configuration.setIncludes(includes);
  }
  configuration.useHeadlessServer(headlessServer);
  configuration.keepAllTypeSelectors(keepAllTypeSelectors);
  configuration.useResourceBundleMetaData(useResourceBundleMetadata);
  verifyDigests();
}","/** 
 * Setup builder configuration
 * @throws MojoExecutionException
 * @throws MojoFailureException
 */
protected void configure() throws MojoExecutionException, MojoFailureException {
  resolveDependencies();
  configuration.enableAccessibility(accessible);
  configuration.allowSourcePathOverlap(allowSourcePathOverlap);
  configuration.useActionScript3(as3);
  configuration.enableDebugging(isDebug(),debugPassword);
  configuration.useECMAScript(es);
  if (fonts != null) {
    configureFontsAntiAliasing();
    enableFlashType();
    configuration.setFontManagers(fonts.getManagers());
    configuration.setMaximumCachedFonts(fonts.getMaxCachedFonts());
    configuration.setMaximumGlyphsPerFace(fonts.getMaxGlyphsPerFace());
    if (fonts.getLanguages() != null && !fonts.getLanguages().isEmpty()) {
      for (      String language : fonts.getLanguages().keySet()) {
        configuration.setFontLanguageRange(language,fonts.getLanguages().get(language));
      }
    }
  }
  File fontsSnapshot=getFontsSnapshot();
  if (fontsSnapshot == null || !fontsSnapshot.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + fontsSnapshot);
  }
  configuration.setLocalFontSnapshot(fontsSnapshot);
  configuration.setActionScriptMetadata(keepAs3Metadatas);
  configuration.keepCompilerGeneratedActionScript(keepGeneratedActionscript);
  if (licenses != null) {
    for (    String licenseName : licenses.keySet()) {
      String key=licenses.get(licenseName);
      configuration.setLicense(licenseName,key);
    }
  }
  addDefines();
  if (compiledLocales == null && runtimeLocales == null && isApplication()) {
    setLocales(getDefaultLocale());
  }
 else   if (compiledLocales != null) {
    setLocales(compiledLocales);
  }
 else {
    setLocales(new String[0]);
  }
  List<Namespace> fdkNamespaces=MavenUtils.getFdkNamespaces(getDependencyArtifacts(),build);
  if (this.namespaces != null) {
    fdkNamespaces.addAll(Arrays.asList(this.namespaces));
  }
  this.namespaces=fdkNamespaces.toArray(new Namespace[0]);
  if (namespaces != null) {
    for (    Namespace namespace : namespaces) {
      File manifest=namespace.getManifest();
      configuration.setComponentManifest(namespace.getUri(),manifest);
    }
  }
  configuration.optimize(optimize);
  if (this.warnings != null) {
    configureWarnings(configuration);
  }
  configuration.setSourcePath(sourcePaths);
  configuration.enableStrictChecking(strict);
  configuration.useNetwork(useNetwork);
  configuration.enableVerboseStacktraces(verboseStacktraces);
  if (contextRoot != null) {
    configuration.setContextRoot(contextRoot);
  }
  configuration.keepLinkReport(linkReport);
  configuration.keepConfigurationReport(configurationReport);
  configuration.setConfiguration(configFile);
  configuration.setServiceConfiguration(services);
  if (loadExterns != null) {
    List<File> externsFiles=new ArrayList<File>();
    for (    MavenArtifact mvnArtifact : loadExterns) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      externsFiles.add(artifact.getFile());
    }
    configuration.setExterns(externsFiles.toArray(new File[externsFiles.size()]));
  }
  if (rawMetadata != null) {
    configuration.setSWFMetaData(rawMetadata);
  }
  if (metadata != null) {
    if (metadata.getContributor() != null) {
      configuration.setSWFMetaData(Configuration.CONTRIBUTOR,metadata.getContributor());
    }
    if (metadata.getCreator() != null) {
      configuration.setSWFMetaData(Configuration.CREATOR,metadata.getCreator());
    }
    if (metadata.getDate() != null) {
      configuration.setSWFMetaData(Configuration.DATE,metadata.getDate());
    }
    if (metadata.getDescriptions() != null) {
      configuration.setSWFMetaData(Configuration.DESCRIPTION,metadata.getDescriptions());
    }
    if (metadata.getTitles() != null) {
      configuration.setSWFMetaData(Configuration.TITLE,metadata.getTitles());
    }
    if (metadata.getLanguage() != null) {
      configuration.setSWFMetaData(Configuration.LANGUAGE,metadata.getLanguage());
    }
  }
  setCompatibilityMode();
  configuration.setActionScriptFileEncoding(encoding);
  setTargetPlayer();
  if (defaultsCss != null)   configuration.setDefaultCSS(defaultsCss);
  configuration.setDefaultBackgroundColor(Integer.parseInt(defaultBackgroundColor,16));
  configuration.setDefaultFrameRate(defaultFrameRate);
  configuration.setDefaultScriptLimits(scriptMaxRecursionDepth,scriptMaxExecutionTime);
  configuration.setDefaultSize(defaultSizeWidth,defaultSizeHeight);
  if (externs != null && externs.length > 0) {
    configuration.setExterns(externs);
  }
  if (frames != null && frames.length > 0) {
    for (    FrameLabel frame : frames) {
      configuration.setFrameLabel(frame.getLabel(),frame.getClassNames());
    }
  }
  if (includes != null && includes.length > 0) {
    configuration.setIncludes(includes);
  }
  configuration.useHeadlessServer(headlessServer);
  configuration.keepAllTypeSelectors(keepAllTypeSelectors);
  configuration.useResourceBundleMetaData(useResourceBundleMetadata);
  verifyDigests();
}",0.9880022852789944
10033,"protected void resolveDependencies() throws MojoExecutionException {
  configuration.setExternalLibraryPath(getGlobalDependency());
  configuration.addExternalLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.includeLibraries(getDependenciesPath(""String_Node_Str""));
  configuration.setLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  if (compiledLocales == null && runtimeLocales == null && isApplication()) {
    configuration.addLibraryPath(getResourcesBundles(getDefaultLocale()));
  }
 else   if (compiledLocales != null) {
    configuration.addLibraryPath(getResourcesBundles(compiledLocales));
  }
  resolveRuntimeLibraries();
  configuration.setTheme(getDependenciesPath(""String_Node_Str""));
}","protected void resolveDependencies() throws MojoExecutionException, MojoFailureException {
  configuration.setExternalLibraryPath(getGlobalDependency());
  configuration.addExternalLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.includeLibraries(getDependenciesPath(""String_Node_Str""));
  configuration.setLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  if (compiledLocales == null && runtimeLocales == null && isApplication()) {
    configuration.addLibraryPath(getResourcesBundles(getDefaultLocale()));
  }
 else   if (compiledLocales != null) {
    configuration.addLibraryPath(getResourcesBundles(compiledLocales));
  }
  resolveRuntimeLibraries();
  configuration.setTheme(getThemes());
}",0.8774355751099937
10034,"@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  builder=new Library();
  if (directory != null) {
    builder.setDirectory(directory);
  }
  super.setUp();
  if (outputFile == null) {
    if (output == null) {
      outputFile=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
    }
 else {
      outputFile=new File(build.getDirectory(),output);
    }
  }
  builder.setOutput(outputFile);
  if (checkNullOrEmpty(includeClasses) && checkNullOrEmpty(includeFiles) && checkNullOrEmpty(includeNamespaces)&& checkNullOrEmpty(includeResourceBundles)&& checkNullOrEmpty(includeResourceBundlesArtifact)&& checkNullOrEmpty(includeSources)&& checkNullOrEmpty(includeStylesheet)) {
    getLog().warn(""String_Node_Str"");
    includeSources=sourcePaths.clone();
    includeFiles=listAllResources();
  }
  if (!checkNullOrEmpty(includeClasses)) {
    for (    String asClass : includeClasses) {
      builder.addComponent(asClass);
    }
  }
  if (!checkNullOrEmpty(includeFiles)) {
    for (    String includeFile : includeFiles) {
      if (includeFile == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      File file=new File(includeFile);
      if (!file.exists()) {
        file=MavenUtils.resolveResourceFile(project,includeFile);
      }
      if (file == null || !file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + includeFile + ""String_Node_Str"");
      }
      File folder=getResourceFolder(file);
      String relativePath=PathUtil.getRelativePath(folder,file);
      if (relativePath.startsWith(""String_Node_Str"")) {
        relativePath=file.getName();
      }
      builder.addArchiveFile(relativePath.replace('\\','/'),file);
    }
  }
  if (!checkNullOrEmpty(includeNamespaces)) {
    for (    String uri : includeNamespaces) {
      try {
        builder.addComponent(new URI(uri));
      }
 catch (      URISyntaxException e) {
        throw new MojoExecutionException(""String_Node_Str"" + uri,e);
      }
    }
  }
  if (!checkNullOrEmpty(includeResourceBundles)) {
    for (    String rb : includeResourceBundles) {
      builder.addResourceBundle(rb);
    }
  }
  if (!checkNullOrEmpty(includeResourceBundlesArtifact)) {
    for (    MavenArtifact mvnArtifact : includeResourceBundlesArtifact) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      String bundleFile;
      try {
        bundleFile=FileUtils.readFileToString(artifact.getFile());
      }
 catch (      IOException e) {
        throw new MojoExecutionException(""String_Node_Str"" + artifact,e);
      }
      String[] bundles=bundleFile.split(""String_Node_Str"");
      for (      String bundle : bundles) {
        builder.addResourceBundle(bundle);
      }
    }
  }
  if (!checkNullOrEmpty(includeSources)) {
    for (    File file : includeSources) {
      if (file == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      if (!file.getName().contains(""String_Node_Str"") && !file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
      }
      builder.addComponent(file);
    }
  }
  includeStylesheet();
  computeDigest();
  if (addMavenDescriptor) {
    builder.addArchiveFile(""String_Node_Str"" + project.getGroupId() + ""String_Node_Str""+ project.getArtifactId()+ ""String_Node_Str"",new File(project.getBasedir(),""String_Node_Str""));
  }
}","@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  builder=new Library();
  if (directory != null) {
    builder.setDirectory(directory);
  }
  super.setUp();
  if (outputFile == null) {
    if (output == null) {
      outputFile=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
    }
 else {
      outputFile=new File(build.getDirectory(),output);
    }
  }
  builder.setOutput(outputFile);
  if (checkNullOrEmpty(includeClasses) && checkNullOrEmpty(includeFiles) && checkNullOrEmpty(includeNamespaces)&& checkNullOrEmpty(includeResourceBundles)&& checkNullOrEmpty(includeResourceBundlesArtifact)&& checkNullOrEmpty(includeSources)&& checkNullOrEmpty(includeStylesheet)) {
    getLog().warn(""String_Node_Str"");
    includeSources=sourcePaths.clone();
    includeFiles=listAllResources();
  }
  if (!checkNullOrEmpty(includeClasses)) {
    for (    String asClass : includeClasses) {
      builder.addComponent(asClass);
    }
  }
  if (!checkNullOrEmpty(includeFiles)) {
    for (    String includeFile : includeFiles) {
      if (includeFile == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      File file=MavenUtils.resolveResourceFile(project,includeFile);
      File folder=getResourceFolder(file);
      String relativePath=PathUtil.getRelativePath(folder,file);
      if (relativePath.startsWith(""String_Node_Str"")) {
        relativePath=file.getName();
      }
      builder.addArchiveFile(relativePath.replace('\\','/'),file);
    }
  }
  if (!checkNullOrEmpty(includeNamespaces)) {
    for (    String uri : includeNamespaces) {
      try {
        builder.addComponent(new URI(uri));
      }
 catch (      URISyntaxException e) {
        throw new MojoExecutionException(""String_Node_Str"" + uri,e);
      }
    }
  }
  if (!checkNullOrEmpty(includeResourceBundles)) {
    for (    String rb : includeResourceBundles) {
      builder.addResourceBundle(rb);
    }
  }
  if (!checkNullOrEmpty(includeResourceBundlesArtifact)) {
    for (    MavenArtifact mvnArtifact : includeResourceBundlesArtifact) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      String bundleFile;
      try {
        bundleFile=FileUtils.readFileToString(artifact.getFile());
      }
 catch (      IOException e) {
        throw new MojoExecutionException(""String_Node_Str"" + artifact,e);
      }
      String[] bundles=bundleFile.split(""String_Node_Str"");
      for (      String bundle : bundles) {
        builder.addResourceBundle(bundle);
      }
    }
  }
  if (!checkNullOrEmpty(includeSources)) {
    for (    File file : includeSources) {
      if (file == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      if (!file.getName().contains(""String_Node_Str"") && !file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
      }
      builder.addComponent(file);
    }
  }
  includeStylesheet();
  computeDigest();
  if (addMavenDescriptor) {
    builder.addArchiveFile(""String_Node_Str"" + project.getGroupId() + ""String_Node_Str""+ project.getArtifactId()+ ""String_Node_Str"",new File(project.getBasedir(),""String_Node_Str""));
  }
}",0.9595342893653273
10035,"/** 
 * Resolve a resource file in a maven project resources folders
 * @param project maven project
 * @param resourceFile sugested name on pom
 * @return source file or null if source not found
 */
@SuppressWarnings(""String_Node_Str"") public static File resolveResourceFile(MavenProject project,String resourceFile){
  List<Resource> resources=project.getBuild().getResources();
  for (  Resource resourceFolder : resources) {
    File resource=new File(resourceFolder.getDirectory(),resourceFile);
    if (resource.exists()) {
      return resource;
    }
  }
  return null;
}","/** 
 * Resolve a resource file in a maven project resources folders
 * @param project maven project
 * @param fileName sugested name on pom
 * @return source file or null if source not found
 * @throws MojoFailureException
 */
@SuppressWarnings(""String_Node_Str"") public static File resolveResourceFile(MavenProject project,String fileName) throws MojoFailureException {
  File file=new File(fileName);
  if (file.exists()) {
    return file;
  }
  if (file.isAbsolute()) {
    throw new MojoFailureException(""String_Node_Str"" + fileName + ""String_Node_Str"");
  }
  List<Resource> resources=project.getBuild().getResources();
  for (  Resource resourceFolder : resources) {
    File resource=new File(resourceFolder.getDirectory(),fileName);
    if (resource.exists()) {
      return resource;
    }
  }
  throw new MojoFailureException(""String_Node_Str"" + fileName + ""String_Node_Str"");
}",0.7256637168141593
10036,"@Override protected void run() throws MojoExecutionException, MojoFailureException {
  receiveFlexUnitResults();
  getLog().info(""String_Node_Str"" + flexUnitCommand);
  final FlexUnitLauncher browser=new FlexUnitLauncher();
  try {
    browser.runTests(swf);
  }
 catch (  Exception e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  while (!complete) {
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
      throw new MojoExecutionException(e.getMessage(),e);
    }
  }
}","@Override protected void run() throws MojoExecutionException, MojoFailureException {
  receiveFlexUnitResults();
  getLog().info(""String_Node_Str"" + flexUnitCommand);
  final FlexUnitLauncher browser=new FlexUnitLauncher(flexUnitCommand);
  try {
    browser.runTests(swf);
  }
 catch (  Exception e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  while (!complete) {
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
      throw new MojoExecutionException(e.getMessage(),e);
    }
  }
}",0.9858356940509916
10037,"/** 
 * Setup builder configuration
 * @throws MojoExecutionException
 */
protected void configure() throws MojoExecutionException {
  resolveDependencies();
  configuration.enableAccessibility(accessible);
  configuration.allowSourcePathOverlap(allowSourcePathOverlap);
  configuration.useActionScript3(as3);
  configuration.enableDebugging(debug,debugPassword);
  configuration.useECMAScript(es);
  if (fonts != null) {
    configureFontsAntiAliasing();
    enableFlashType();
    configuration.setFontManagers(fonts.getManagers());
    configuration.setMaximumCachedFonts(fonts.getMaxCachedFonts());
    configuration.setMaximumGlyphsPerFace(fonts.getMaxGlyphsPerFace());
    if (fonts.getLanguages() != null && !fonts.getLanguages().isEmpty()) {
      for (      String language : fonts.getLanguages().keySet()) {
        configuration.setFontLanguageRange(language,fonts.getLanguages().get(language));
      }
    }
  }
  File fontsSnapshot=getFontsSnapshot();
  if (fontsSnapshot == null || !fontsSnapshot.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + fontsSnapshot);
  }
  configuration.setLocalFontSnapshot(fontsSnapshot);
  configuration.setActionScriptMetadata(keepAs3Metadatas);
  configuration.keepCompilerGeneratedActionScript(keepGeneratedActionscript);
  if (licenses != null) {
    for (    String licenseName : licenses.keySet()) {
      String key=licenses.get(licenseName);
      configuration.setLicense(licenseName,key);
    }
  }
  addDefines();
  if (mergeResourceBundle == null || mergeResourceBundle) {
    setLocales(locales);
  }
 else {
    setLocales(new String[0]);
  }
  List<Namespace> fdkNamespaces=MavenUtils.getFdkNamespaces(getDependencyArtifacts(),build);
  if (this.namespaces != null) {
    fdkNamespaces.addAll(Arrays.asList(this.namespaces));
  }
  this.namespaces=fdkNamespaces.toArray(new Namespace[0]);
  if (namespaces != null) {
    for (    Namespace namespace : namespaces) {
      File manifest=namespace.getManifest();
      configuration.setComponentManifest(namespace.getUri(),manifest);
    }
  }
  configuration.optimize(optimize);
  if (this.warnings != null) {
    configureWarnings(configuration);
  }
  configuration.setSourcePath(sourcePaths);
  configuration.enableStrictChecking(strict);
  configuration.useNetwork(useNetwork);
  configuration.enableVerboseStacktraces(verboseStacktraces);
  if (contextRoot != null) {
    configuration.setContextRoot(contextRoot);
  }
  configuration.keepLinkReport(linkReport);
  configuration.keepConfigurationReport(configurationReport);
  configuration.setConfiguration(configFile);
  configuration.setServiceConfiguration(services);
  if (loadExterns != null) {
    List<File> externsFiles=new ArrayList<File>();
    for (    MavenArtifact mvnArtifact : loadExterns) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      externsFiles.add(artifact.getFile());
    }
    configuration.setExterns(externsFiles.toArray(new File[externsFiles.size()]));
  }
  if (rawMetadata != null) {
    configuration.setSWFMetaData(rawMetadata);
  }
  if (metadata != null) {
    if (metadata.getContributor() != null) {
      configuration.setSWFMetaData(Configuration.CONTRIBUTOR,metadata.getContributor());
    }
    if (metadata.getCreator() != null) {
      configuration.setSWFMetaData(Configuration.CREATOR,metadata.getCreator());
    }
    if (metadata.getDate() != null) {
      configuration.setSWFMetaData(Configuration.DATE,metadata.getDate());
    }
    if (metadata.getDescriptions() != null) {
      configuration.setSWFMetaData(Configuration.DESCRIPTION,metadata.getDescriptions());
    }
    if (metadata.getTitles() != null) {
      configuration.setSWFMetaData(Configuration.TITLE,metadata.getTitles());
    }
    if (metadata.getLanguage() != null) {
      configuration.setSWFMetaData(Configuration.LANGUAGE,metadata.getLanguage());
    }
  }
  setCompatibilityMode();
  configuration.setActionScriptFileEncoding(encoding);
  setTargetPlayer();
  if (defaultsCss != null)   configuration.setDefaultCSS(defaultsCss);
  configuration.setDefaultBackgroundColor(Integer.parseInt(defaultBackgroundColor,16));
  configuration.setDefaultFrameRate(defaultFrameRate);
  configuration.setDefaultScriptLimits(scriptMaxRecursionDepth,scriptMaxExecutionTime);
  configuration.setDefaultSize(defaultSizeWidth,defaultSizeHeight);
  if (externs != null && externs.length > 0) {
    configuration.setExterns(externs);
  }
  if (frames != null && frames.length > 0) {
    for (    FrameLabel frame : frames) {
      configuration.setFrameLabel(frame.getLabel(),frame.getClassNames());
    }
  }
  if (includes != null && includes.length > 0) {
    configuration.setIncludes(includes);
  }
  configuration.useHeadlessServer(headlessServer);
  configuration.keepAllTypeSelectors(keepAllTypeSelectors);
  configuration.useResourceBundleMetaData(useResourceBundleMetadata);
  verifyDigests();
}","/** 
 * Setup builder configuration
 * @throws MojoExecutionException
 */
protected void configure() throws MojoExecutionException {
  resolveDependencies();
  configuration.enableAccessibility(accessible);
  configuration.allowSourcePathOverlap(allowSourcePathOverlap);
  configuration.useActionScript3(as3);
  configuration.enableDebugging(isDebug(),debugPassword);
  configuration.useECMAScript(es);
  if (fonts != null) {
    configureFontsAntiAliasing();
    enableFlashType();
    configuration.setFontManagers(fonts.getManagers());
    configuration.setMaximumCachedFonts(fonts.getMaxCachedFonts());
    configuration.setMaximumGlyphsPerFace(fonts.getMaxGlyphsPerFace());
    if (fonts.getLanguages() != null && !fonts.getLanguages().isEmpty()) {
      for (      String language : fonts.getLanguages().keySet()) {
        configuration.setFontLanguageRange(language,fonts.getLanguages().get(language));
      }
    }
  }
  File fontsSnapshot=getFontsSnapshot();
  if (fontsSnapshot == null || !fontsSnapshot.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + fontsSnapshot);
  }
  configuration.setLocalFontSnapshot(fontsSnapshot);
  configuration.setActionScriptMetadata(keepAs3Metadatas);
  configuration.keepCompilerGeneratedActionScript(keepGeneratedActionscript);
  if (licenses != null) {
    for (    String licenseName : licenses.keySet()) {
      String key=licenses.get(licenseName);
      configuration.setLicense(licenseName,key);
    }
  }
  addDefines();
  if (mergeResourceBundle == null || mergeResourceBundle) {
    setLocales(locales);
  }
 else {
    setLocales(new String[0]);
  }
  List<Namespace> fdkNamespaces=MavenUtils.getFdkNamespaces(getDependencyArtifacts(),build);
  if (this.namespaces != null) {
    fdkNamespaces.addAll(Arrays.asList(this.namespaces));
  }
  this.namespaces=fdkNamespaces.toArray(new Namespace[0]);
  if (namespaces != null) {
    for (    Namespace namespace : namespaces) {
      File manifest=namespace.getManifest();
      configuration.setComponentManifest(namespace.getUri(),manifest);
    }
  }
  configuration.optimize(optimize);
  if (this.warnings != null) {
    configureWarnings(configuration);
  }
  configuration.setSourcePath(sourcePaths);
  configuration.enableStrictChecking(strict);
  configuration.useNetwork(useNetwork);
  configuration.enableVerboseStacktraces(verboseStacktraces);
  if (contextRoot != null) {
    configuration.setContextRoot(contextRoot);
  }
  configuration.keepLinkReport(linkReport);
  configuration.keepConfigurationReport(configurationReport);
  configuration.setConfiguration(configFile);
  configuration.setServiceConfiguration(services);
  if (loadExterns != null) {
    List<File> externsFiles=new ArrayList<File>();
    for (    MavenArtifact mvnArtifact : loadExterns) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      externsFiles.add(artifact.getFile());
    }
    configuration.setExterns(externsFiles.toArray(new File[externsFiles.size()]));
  }
  if (rawMetadata != null) {
    configuration.setSWFMetaData(rawMetadata);
  }
  if (metadata != null) {
    if (metadata.getContributor() != null) {
      configuration.setSWFMetaData(Configuration.CONTRIBUTOR,metadata.getContributor());
    }
    if (metadata.getCreator() != null) {
      configuration.setSWFMetaData(Configuration.CREATOR,metadata.getCreator());
    }
    if (metadata.getDate() != null) {
      configuration.setSWFMetaData(Configuration.DATE,metadata.getDate());
    }
    if (metadata.getDescriptions() != null) {
      configuration.setSWFMetaData(Configuration.DESCRIPTION,metadata.getDescriptions());
    }
    if (metadata.getTitles() != null) {
      configuration.setSWFMetaData(Configuration.TITLE,metadata.getTitles());
    }
    if (metadata.getLanguage() != null) {
      configuration.setSWFMetaData(Configuration.LANGUAGE,metadata.getLanguage());
    }
  }
  setCompatibilityMode();
  configuration.setActionScriptFileEncoding(encoding);
  setTargetPlayer();
  if (defaultsCss != null)   configuration.setDefaultCSS(defaultsCss);
  configuration.setDefaultBackgroundColor(Integer.parseInt(defaultBackgroundColor,16));
  configuration.setDefaultFrameRate(defaultFrameRate);
  configuration.setDefaultScriptLimits(scriptMaxRecursionDepth,scriptMaxExecutionTime);
  configuration.setDefaultSize(defaultSizeWidth,defaultSizeHeight);
  if (externs != null && externs.length > 0) {
    configuration.setExterns(externs);
  }
  if (frames != null && frames.length > 0) {
    for (    FrameLabel frame : frames) {
      configuration.setFrameLabel(frame.getLabel(),frame.getClassNames());
    }
  }
  if (includes != null && includes.length > 0) {
    configuration.setIncludes(includes);
  }
  configuration.useHeadlessServer(headlessServer);
  configuration.keepAllTypeSelectors(keepAllTypeSelectors);
  configuration.useResourceBundleMetaData(useResourceBundleMetadata);
  verifyDigests();
}",0.9994137189759624
10038,"@SuppressWarnings(""String_Node_Str"") private File[] listAllResources(){
  List<File> resources=new ArrayList<File>();
  List<Resource> resourcesDirs=project.getResources();
  for (  Resource resource : resourcesDirs) {
    File resourceDir=new File(resource.getDirectory());
    if (!resourceDir.exists()) {
      continue;
    }
    Collection<File> files=FileUtils.listFiles(resourceDir,null,true);
    resources.addAll(files);
  }
  return resources.toArray(new File[resources.size()]);
}","@SuppressWarnings(""String_Node_Str"") private File[] listAllResources(){
  List<File> resources=new ArrayList<File>();
  List<Resource> resourcesDirs=project.getResources();
  for (  Resource resource : resourcesDirs) {
    File resourceDir=new File(resource.getDirectory());
    if (!resourceDir.exists()) {
      continue;
    }
    Collection<File> files=FileUtils.listFiles(resourceDir,HiddenFileFilter.VISIBLE,TrueFileFilter.INSTANCE);
    resources.addAll(files);
  }
  return resources.toArray(new File[resources.size()]);
}",0.9461312438785504
10039,"private String getFPTrustFolder() throws MojoExecutionException {
  if (MavenUtils.isWindows()) {
    if (MavenUtils.isWindowsVista()) {
      return ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  if (MavenUtils.isLinux()) {
    return ""String_Node_Str"";
  }
  if (MavenUtils.isMac()) {
    return ""String_Node_Str"";
  }
  throw new MojoExecutionException(""String_Node_Str"" + MavenUtils.osString());
}","private String getFPTrustFolder() throws MojoExecutionException {
  if (MavenUtils.isWindows()) {
    if (MavenUtils.isWindowsVista()) {
      return ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  if (MavenUtils.isUnixBased()) {
    return ""String_Node_Str"";
  }
  if (MavenUtils.isMac()) {
    return ""String_Node_Str"";
  }
  throw new MojoExecutionException(""String_Node_Str"" + MavenUtils.osString());
}",0.9856115107913668
10040,"@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  builder=new Library();
  if (directory != null) {
    builder.setDirectory(directory);
  }
  super.setUp();
  if (outputFile == null) {
    if (output == null) {
      outputFile=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
    }
 else {
      outputFile=new File(build.getDirectory(),output);
    }
  }
  builder.setOutput(outputFile);
  if (checkNullOrEmpty(includeClasses) && checkNullOrEmpty(includeFiles) && checkNullOrEmpty(includeNamespaces)&& checkNullOrEmpty(includeResourceBundles)&& checkNullOrEmpty(includeResourceBundlesArtifact)&& checkNullOrEmpty(includeSources)&& checkNullOrEmpty(includeStylesheet)) {
    getLog().warn(""String_Node_Str"");
    includeSources=sourcePaths.clone();
    includeFiles=listAllResources();
  }
  if (!checkNullOrEmpty(includeClasses)) {
    for (    String asClass : includeClasses) {
      builder.addComponent(asClass);
    }
  }
  if (!checkNullOrEmpty(includeFiles)) {
    for (    String includeFile : includeFiles) {
      if (includeFile == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      File file=new File(includeFile);
      if (!file.exists()) {
        file=MavenUtils.resolveResourceFile(project,includeFile);
      }
      if (file == null || !file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + includeFile + ""String_Node_Str"");
      }
      File folder=getResourceFolder(file);
      String relativePath=PathUtil.getRelativePath(folder,file);
      if (relativePath.startsWith(""String_Node_Str"")) {
        relativePath=file.getName();
      }
      builder.addArchiveFile(relativePath.replace('\\','/'),file);
    }
  }
  if (!checkNullOrEmpty(includeNamespaces)) {
    for (    String uri : includeNamespaces) {
      try {
        builder.addComponent(new URI(uri));
      }
 catch (      URISyntaxException e) {
        throw new MojoExecutionException(""String_Node_Str"" + uri,e);
      }
    }
  }
  if (!checkNullOrEmpty(includeResourceBundles)) {
    for (    String rb : includeResourceBundles) {
      builder.addResourceBundle(rb);
    }
  }
  if (!checkNullOrEmpty(includeResourceBundlesArtifact)) {
    for (    MavenArtifact mvnArtifact : includeResourceBundlesArtifact) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      String bundleFile;
      try {
        bundleFile=FileUtils.readFileToString(artifact.getFile());
      }
 catch (      IOException e) {
        throw new MojoExecutionException(""String_Node_Str"" + artifact,e);
      }
      String[] bundles=bundleFile.split(""String_Node_Str"");
      for (      String bundle : bundles) {
        builder.addResourceBundle(bundle);
      }
    }
  }
  if (!checkNullOrEmpty(includeSources)) {
    for (    File file : includeSources) {
      if (file == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      if (!file.getName().contains(""String_Node_Str"") && !file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
      }
      builder.addComponent(file);
    }
  }
  includeStylesheet();
  computeDigest();
  builder.addArchiveFile(""String_Node_Str"" + project.getGroupId() + ""String_Node_Str""+ project.getArtifactId()+ ""String_Node_Str"",new File(project.getBasedir(),""String_Node_Str""));
}","@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  builder=new Library();
  if (directory != null) {
    builder.setDirectory(directory);
  }
  super.setUp();
  if (outputFile == null) {
    if (output == null) {
      outputFile=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
    }
 else {
      outputFile=new File(build.getDirectory(),output);
    }
  }
  builder.setOutput(outputFile);
  if (checkNullOrEmpty(includeClasses) && checkNullOrEmpty(includeFiles) && checkNullOrEmpty(includeNamespaces)&& checkNullOrEmpty(includeResourceBundles)&& checkNullOrEmpty(includeResourceBundlesArtifact)&& checkNullOrEmpty(includeSources)&& checkNullOrEmpty(includeStylesheet)) {
    getLog().warn(""String_Node_Str"");
    includeSources=sourcePaths.clone();
    includeFiles=listAllResources();
  }
  if (!checkNullOrEmpty(includeClasses)) {
    for (    String asClass : includeClasses) {
      builder.addComponent(asClass);
    }
  }
  if (!checkNullOrEmpty(includeFiles)) {
    for (    String includeFile : includeFiles) {
      if (includeFile == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      File file=new File(includeFile);
      if (!file.exists()) {
        file=MavenUtils.resolveResourceFile(project,includeFile);
      }
      if (file == null || !file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + includeFile + ""String_Node_Str"");
      }
      File folder=getResourceFolder(file);
      String relativePath=PathUtil.getRelativePath(folder,file);
      if (relativePath.startsWith(""String_Node_Str"")) {
        relativePath=file.getName();
      }
      builder.addArchiveFile(relativePath.replace('\\','/'),file);
    }
  }
  if (!checkNullOrEmpty(includeNamespaces)) {
    for (    String uri : includeNamespaces) {
      try {
        builder.addComponent(new URI(uri));
      }
 catch (      URISyntaxException e) {
        throw new MojoExecutionException(""String_Node_Str"" + uri,e);
      }
    }
  }
  if (!checkNullOrEmpty(includeResourceBundles)) {
    for (    String rb : includeResourceBundles) {
      builder.addResourceBundle(rb);
    }
  }
  if (!checkNullOrEmpty(includeResourceBundlesArtifact)) {
    for (    MavenArtifact mvnArtifact : includeResourceBundlesArtifact) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      String bundleFile;
      try {
        bundleFile=FileUtils.readFileToString(artifact.getFile());
      }
 catch (      IOException e) {
        throw new MojoExecutionException(""String_Node_Str"" + artifact,e);
      }
      String[] bundles=bundleFile.split(""String_Node_Str"");
      for (      String bundle : bundles) {
        builder.addResourceBundle(bundle);
      }
    }
  }
  if (!checkNullOrEmpty(includeSources)) {
    for (    File file : includeSources) {
      if (file == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      if (!file.getName().contains(""String_Node_Str"") && !file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
      }
      builder.addComponent(file);
    }
  }
  includeStylesheet();
  computeDigest();
  if (addMavenDescriptor) {
    builder.addArchiveFile(""String_Node_Str"" + project.getGroupId() + ""String_Node_Str""+ project.getArtifactId()+ ""String_Node_Str"",new File(project.getBasedir(),""String_Node_Str""));
  }
}",0.995294768890119
10041,"@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  builder=new Library();
  if (directory != null) {
    builder.setDirectory(directory);
  }
  super.setUp();
  if (outputFile == null) {
    if (output == null) {
      outputFile=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
    }
 else {
      outputFile=new File(build.getDirectory(),output);
    }
  }
  builder.setOutput(outputFile);
  if (checkNullOrEmpty(includeClasses) && checkNullOrEmpty(includeFiles) && checkNullOrEmpty(includeNamespaces)&& checkNullOrEmpty(includeResourceBundles)&& checkNullOrEmpty(includeResourceBundlesArtifact)&& checkNullOrEmpty(includeSources)&& checkNullOrEmpty(includeStylesheet)) {
    getLog().warn(""String_Node_Str"");
    includeSources=sourcePaths.clone();
  }
  if (!checkNullOrEmpty(includeClasses)) {
    for (    String asClass : includeClasses) {
      builder.addComponent(asClass);
    }
  }
  if (!checkNullOrEmpty(includeFiles)) {
    for (    String includeFile : includeFiles) {
      if (includeFile == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      File file=new File(includeFile);
      if (!file.exists()) {
        file=MavenUtils.resolveResourceFile(project,includeFile);
      }
      if (file == null || !file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + includeFile + ""String_Node_Str"");
      }
      File folder=getResourceFolder(file);
      String relativePath=PathUtil.getRelativePath(folder,file);
      if (relativePath.startsWith(""String_Node_Str"")) {
        relativePath=file.getName();
      }
      builder.addArchiveFile(relativePath,file);
    }
  }
  if (!checkNullOrEmpty(includeNamespaces)) {
    for (    String uri : includeNamespaces) {
      try {
        builder.addComponent(new URI(uri));
      }
 catch (      URISyntaxException e) {
        throw new MojoExecutionException(""String_Node_Str"" + uri,e);
      }
    }
  }
  if (!checkNullOrEmpty(includeResourceBundles)) {
    for (    String rb : includeResourceBundles) {
      builder.addResourceBundle(rb);
    }
  }
  if (!checkNullOrEmpty(includeResourceBundlesArtifact)) {
    for (    MavenArtifact mvnArtifact : includeResourceBundlesArtifact) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      String bundleFile;
      try {
        bundleFile=FileUtils.readFileToString(artifact.getFile());
      }
 catch (      IOException e) {
        throw new MojoExecutionException(""String_Node_Str"" + artifact,e);
      }
      String[] bundles=bundleFile.split(""String_Node_Str"");
      for (      String bundle : bundles) {
        builder.addResourceBundle(bundle);
      }
    }
  }
  if (!checkNullOrEmpty(includeSources)) {
    for (    File file : includeSources) {
      if (file == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      if (!file.getName().contains(""String_Node_Str"") && !file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
      }
      builder.addComponent(file);
    }
  }
  includeStylesheet();
  computeDigest();
  builder.addArchiveFile(""String_Node_Str"" + project.getGroupId() + ""String_Node_Str""+ project.getArtifactId()+ ""String_Node_Str"",new File(project.getBasedir(),""String_Node_Str""));
}","@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  builder=new Library();
  if (directory != null) {
    builder.setDirectory(directory);
  }
  super.setUp();
  if (outputFile == null) {
    if (output == null) {
      outputFile=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
    }
 else {
      outputFile=new File(build.getDirectory(),output);
    }
  }
  builder.setOutput(outputFile);
  if (checkNullOrEmpty(includeClasses) && checkNullOrEmpty(includeFiles) && checkNullOrEmpty(includeNamespaces)&& checkNullOrEmpty(includeResourceBundles)&& checkNullOrEmpty(includeResourceBundlesArtifact)&& checkNullOrEmpty(includeSources)&& checkNullOrEmpty(includeStylesheet)) {
    getLog().warn(""String_Node_Str"");
    includeSources=sourcePaths.clone();
    includeFiles=listAllResources();
  }
  if (!checkNullOrEmpty(includeClasses)) {
    for (    String asClass : includeClasses) {
      builder.addComponent(asClass);
    }
  }
  if (!checkNullOrEmpty(includeFiles)) {
    for (    File file : includeFiles) {
      if (file == null || !file.isFile()) {
        throw new MojoFailureException(""String_Node_Str"" + file + ""String_Node_Str"");
      }
      File folder=getResourceFolder(file);
      String relativePath=PathUtil.getRelativePath(folder,file);
      if (relativePath.startsWith(""String_Node_Str"")) {
        relativePath=file.getName();
      }
      builder.addArchiveFile(relativePath.replace('\\','/'),file);
    }
  }
  if (!checkNullOrEmpty(includeNamespaces)) {
    for (    String uri : includeNamespaces) {
      try {
        builder.addComponent(new URI(uri));
      }
 catch (      URISyntaxException e) {
        throw new MojoExecutionException(""String_Node_Str"" + uri,e);
      }
    }
  }
  if (!checkNullOrEmpty(includeResourceBundles)) {
    for (    String rb : includeResourceBundles) {
      builder.addResourceBundle(rb);
    }
  }
  if (!checkNullOrEmpty(includeResourceBundlesArtifact)) {
    for (    MavenArtifact mvnArtifact : includeResourceBundlesArtifact) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      String bundleFile;
      try {
        bundleFile=FileUtils.readFileToString(artifact.getFile());
      }
 catch (      IOException e) {
        throw new MojoExecutionException(""String_Node_Str"" + artifact,e);
      }
      String[] bundles=bundleFile.split(""String_Node_Str"");
      for (      String bundle : bundles) {
        builder.addResourceBundle(bundle);
      }
    }
  }
  if (!checkNullOrEmpty(includeSources)) {
    for (    File file : includeSources) {
      if (file == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      if (!file.getName().contains(""String_Node_Str"") && !file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
      }
      builder.addComponent(file);
    }
  }
  includeStylesheet();
  computeDigest();
  builder.addArchiveFile(""String_Node_Str"" + project.getGroupId() + ""String_Node_Str""+ project.getArtifactId()+ ""String_Node_Str"",new File(project.getBasedir(),""String_Node_Str""));
}",0.9473837209302326
10042,"protected void run() throws MojoExecutionException, MojoFailureException {
  List<String> args=new ArrayList<String>();
  addDocSources(args);
  addDocClasses(args);
  addDocNamespaces(args);
  addSourcePath(args);
  addLibraries(args);
  addCompatibility(args);
  addPackageDescriptions(args);
  addDefines(args);
  addExcludeClasses(args);
  addFooter(args);
  args.add(""String_Node_Str"" + templatesPath.getAbsolutePath());
  args.add(""String_Node_Str"" + windowTitle);
  args.add(""String_Node_Str"" + mainTitle);
  args.add(""String_Node_Str"" + leftFramesetWidth);
  args.add(""String_Node_Str"" + excludeDependencies);
  args.add(""String_Node_Str"" + fontsSnapshot.getAbsolutePath());
  if (headlessServer) {
    args.add(""String_Node_Str"");
  }
  args.add(""String_Node_Str"" + configFile.getAbsolutePath());
  args.add(""String_Node_Str"" + output.getAbsolutePath());
  getLog().info(args.toString());
  ASDoc.asdoc(args.toArray(new String[args.size()]));
  int errorCount=ThreadLocalToolkit.errorCount();
  if (errorCount > 0) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
}","protected void run() throws MojoExecutionException, MojoFailureException {
  List<String> args=new ArrayList<String>();
  addNamespaces(args);
  addDocSources(args);
  addDocClasses(args);
  addDocNamespaces(args);
  addSourcePath(args);
  addLibraries(args);
  addCompatibility(args);
  addPackageDescriptions(args);
  addDefines(args);
  addExcludeClasses(args);
  addFooter(args);
  args.add(""String_Node_Str"" + templatesPath.getAbsolutePath());
  args.add(""String_Node_Str"" + windowTitle);
  args.add(""String_Node_Str"" + mainTitle);
  args.add(""String_Node_Str"" + leftFramesetWidth);
  args.add(""String_Node_Str"" + excludeDependencies);
  args.add(""String_Node_Str"" + fontsSnapshot.getAbsolutePath());
  if (headlessServer) {
    args.add(""String_Node_Str"");
  }
  args.add(""String_Node_Str"" + configFile.getAbsolutePath());
  args.add(""String_Node_Str"" + output.getAbsolutePath());
  getLog().info(args.toString());
  ASDoc.asdoc(args.toArray(new String[args.size()]));
  int errorCount=ThreadLocalToolkit.errorCount();
  if (errorCount > 0) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
}",0.9895407003183264
10043,"@SuppressWarnings(""String_Node_Str"") protected void setUp() throws MojoExecutionException, MojoFailureException {
  if (sourcePaths == null) {
    List<String> sourceRoots=project.getCompileSourceRoots();
    List<File> sources=new ArrayList<File>();
    for (    String sourceRoot : sourceRoots) {
      File source=new File(sourceRoot);
      if (source.exists()) {
        sources.add(source);
      }
    }
    sourcePaths=sources.toArray(new File[sources.size()]);
  }
  if (docSources == null && docClasses == null && docNamespaces == null) {
    getLog().warn(""String_Node_Str"");
    docSources=sourcePaths;
  }
  libraries=new ArrayList<File>();
  for (  Artifact artifact : MavenUtils.getDependencyArtifacts(project,resolver,localRepository,remoteRepositories,artifactMetadataSource)) {
    if (""String_Node_Str"".equals(artifact.getType())) {
      libraries.add(artifact.getFile());
    }
  }
  if (output == null) {
    output=new File(build.getDirectory(),""String_Node_Str"");
    if (!output.exists()) {
      output.mkdirs();
    }
  }
  if (configFile == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),getConfigFileName());
      if (cfg.exists()) {
        configFile=cfg;
        break;
      }
    }
  }
  if (configFile == null) {
    URL url=getClass().getResource(""String_Node_Str"" + getConfigFileName());
    configFile=new File(build.getDirectory(),getConfigFileName());
    try {
      FileUtils.copyURLToFile(url,configFile);
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"");
    }
  }
  if (!configFile.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + configFile);
  }
  if (fontsSnapshot == null) {
    URL url;
    if (MavenUtils.isMac()) {
      url=getClass().getResource(""String_Node_Str"");
    }
 else {
      url=getClass().getResource(""String_Node_Str"");
    }
    File fontsSer=new File(build.getDirectory(),""String_Node_Str"");
    try {
      FileUtils.copyURLToFile(url,fontsSer);
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"");
    }
    fontsSnapshot=fontsSer;
  }
  if (templatesPath == null) {
    templatesPath=generateDefaultTemplate();
  }
}","@SuppressWarnings(""String_Node_Str"") protected void setUp() throws MojoExecutionException, MojoFailureException {
  if (sourcePaths == null) {
    List<String> sourceRoots=project.getCompileSourceRoots();
    List<File> sources=new ArrayList<File>();
    for (    String sourceRoot : sourceRoots) {
      File source=new File(sourceRoot);
      if (source.exists()) {
        sources.add(source);
      }
    }
    sourcePaths=sources.toArray(new File[sources.size()]);
  }
  if (docSources == null && docClasses == null && docNamespaces == null) {
    getLog().warn(""String_Node_Str"");
    docSources=sourcePaths;
  }
  libraries=new ArrayList<File>();
  for (  Artifact artifact : getDependencyArtifacts()) {
    if (""String_Node_Str"".equals(artifact.getType())) {
      libraries.add(artifact.getFile());
    }
  }
  if (output == null) {
    output=new File(build.getDirectory(),""String_Node_Str"");
    if (!output.exists()) {
      output.mkdirs();
    }
  }
  if (configFile == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),getConfigFileName());
      if (cfg.exists()) {
        configFile=cfg;
        break;
      }
    }
  }
  if (configFile == null) {
    URL url=getClass().getResource(""String_Node_Str"" + getConfigFileName());
    configFile=new File(build.getDirectory(),getConfigFileName());
    try {
      FileUtils.copyURLToFile(url,configFile);
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"");
    }
  }
  if (!configFile.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + configFile);
  }
  if (fontsSnapshot == null) {
    URL url;
    if (MavenUtils.isMac()) {
      url=getClass().getResource(""String_Node_Str"");
    }
 else {
      url=getClass().getResource(""String_Node_Str"");
    }
    File fontsSer=new File(build.getDirectory(),""String_Node_Str"");
    try {
      FileUtils.copyURLToFile(url,fontsSer);
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"");
    }
    fontsSnapshot=fontsSer;
  }
  if (templatesPath == null) {
    templatesPath=generateDefaultTemplate();
  }
  List<Namespace> fdkNamespaces=MavenUtils.getFdkNamespaces(getDependencyArtifacts(),build);
  if (this.namespaces != null) {
    fdkNamespaces.addAll(Arrays.asList(this.namespaces));
  }
  this.namespaces=fdkNamespaces.toArray(new Namespace[0]);
}",0.9302813943721124
10044,"@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  File sourceDirectory=new File(build.getSourceDirectory());
  if (!sourceDirectory.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + sourceDirectory);
  }
  if (source == null) {
    source=resolveSourceFile(project,sourceFile);
  }
  if (source == null) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
  if (!source.exists()) {
    throw new MojoFailureException(""String_Node_Str"" + sourceFile);
  }
  try {
    builder=new Application(source);
  }
 catch (  FileNotFoundException e) {
    throw new MojoFailureException(""String_Node_Str"" + source);
  }
  if (moduleFiles != null) {
    modules=new ArrayList<File>();
    for (    String modulePath : moduleFiles) {
      File module=new File(sourceDirectory,modulePath);
      if (!module.exists()) {
        throw new MojoExecutionException(""String_Node_Str"" + module + ""String_Node_Str"");
      }
      modules.add(module);
    }
    if (loadExternsOnModules) {
      super.linkReport=true;
    }
  }
  super.setUp();
  if (outputFile == null) {
    if (output == null) {
      outputFile=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
    }
 else {
      outputFile=new File(build.getDirectory(),output);
    }
  }
  builder.setOutput(outputFile);
}","@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  File sourceDirectory=new File(build.getSourceDirectory());
  if (!sourceDirectory.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + sourceDirectory);
  }
  if (source == null) {
    getLog().warn(""String_Node_Str"");
    source=resolveSourceFile(project,sourceFile);
  }
  if (source == null) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
  if (!source.exists()) {
    throw new MojoFailureException(""String_Node_Str"" + sourceFile);
  }
  try {
    builder=new Application(source);
  }
 catch (  FileNotFoundException e) {
    throw new MojoFailureException(""String_Node_Str"" + source);
  }
  if (moduleFiles != null) {
    modules=new ArrayList<File>();
    for (    String modulePath : moduleFiles) {
      File module=new File(sourceDirectory,modulePath);
      if (!module.exists()) {
        throw new MojoExecutionException(""String_Node_Str"" + module + ""String_Node_Str"");
      }
      modules.add(module);
    }
    if (loadExternsOnModules) {
      super.linkReport=true;
    }
  }
  super.setUp();
  if (outputFile == null) {
    if (output == null) {
      outputFile=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
    }
 else {
      outputFile=new File(build.getDirectory(),output);
    }
  }
  builder.setOutput(outputFile);
}",0.9861111111111112
10045,"private void installFlexFrameworkArtifacts() throws MojoExecutionException {
  getLog().info(""String_Node_Str"");
  Collection<Artifact> swcArtifacts=new ArrayList<Artifact>();
  File swcLibFolder=new File(sdkFolder,""String_Node_Str"");
  Collection<File> swcs=listFiles(swcLibFolder,SWCS,true);
  for (  File swc : swcs) {
    Artifact artifact=createArtifact(swc,FRAMEWORK_GROUP_ID);
    if (""String_Node_Str"".equals(artifact.getArtifactId())) {
      if (artifact.getVersion().startsWith(defaultPlayerVersion)) {
        swcArtifacts.add(artifact);
      }
    }
 else {
      swcArtifacts.add(artifact);
    }
    installArtifact(swc,artifact);
    Artifact pomArtifact=createPomArtifact(artifact);
    generatePom(pomArtifact);
  }
  installResourceBundleArtifacts(swcArtifacts);
  installRslArtifacts();
  installConfigFiles(swcArtifacts);
  Collection<Artifact> flexArtifacts=filter(swcArtifacts,null,new String[]{""String_Node_Str"",""String_Node_Str""});
  Artifact flexSdk=artifactFactory.createArtifact(FRAMEWORK_GROUP_ID,""String_Node_Str"",version,""String_Node_Str"",""String_Node_Str"");
  generatePom(flexSdk,flexArtifacts);
  Collection<Artifact> airArtifacts=filter(swcArtifacts,null,new String[]{""String_Node_Str""});
  Artifact airSdk=artifactFactory.createArtifact(FRAMEWORK_GROUP_ID,""String_Node_Str"",version,""String_Node_Str"",""String_Node_Str"");
  generatePom(airSdk,airArtifacts);
}","private void installFlexFrameworkArtifacts() throws MojoExecutionException {
  getLog().info(""String_Node_Str"");
  Collection<Artifact> swcArtifacts=new ArrayList<Artifact>();
  File swcLibFolder=new File(sdkFolder,""String_Node_Str"");
  IOFileFilter dirFilter=new NotFileFilter(new NameFileFilter(""String_Node_Str""));
  Collection<File> swcs=listFiles(swcLibFolder,new SuffixFileFilter(SWCS),dirFilter);
  for (  File swc : swcs) {
    Artifact artifact=createArtifact(swc,FRAMEWORK_GROUP_ID);
    if (""String_Node_Str"".equals(artifact.getArtifactId())) {
      if (artifact.getVersion().startsWith(defaultPlayerVersion)) {
        swcArtifacts.add(artifact);
      }
    }
 else {
      swcArtifacts.add(artifact);
    }
    installArtifact(swc,artifact);
    Artifact pomArtifact=createPomArtifact(artifact);
    generatePom(pomArtifact);
  }
  installResourceBundleArtifacts(swcArtifacts);
  installRslArtifacts();
  installConfigFiles(swcArtifacts);
  Collection<Artifact> flexArtifacts=filter(swcArtifacts,null,new String[]{""String_Node_Str"",""String_Node_Str""});
  Artifact flexSdk=artifactFactory.createArtifact(FRAMEWORK_GROUP_ID,""String_Node_Str"",version,""String_Node_Str"",""String_Node_Str"");
  generatePom(flexSdk,flexArtifacts);
  Collection<Artifact> airArtifacts=filter(swcArtifacts,null,new String[]{""String_Node_Str""});
  Artifact airSdk=artifactFactory.createArtifact(FRAMEWORK_GROUP_ID,""String_Node_Str"",version,""String_Node_Str"",""String_Node_Str"");
  generatePom(airSdk,airArtifacts);
}",0.9585635359116024
10046,"private void installResourceBundleBeacon(File swcLocalesFolder,Collection<Artifact> flexArtifacts) throws MojoExecutionException {
  Collection<File> localizedSwcs=listFiles(swcLocalesFolder,SWCS,true);
  Set<String> localizedSwcsNames=new HashSet<String>();
  for (  File localizedSwc : localizedSwcs) {
    String name=getResourceName(localizedSwc);
    localizedSwcsNames.add(name);
  }
  for (  String swcName : localizedSwcsNames) {
    Artifact artifact=artifactFactory.createArtifactWithClassifier(FRAMEWORK_GROUP_ID,swcName,version,""String_Node_Str"",""String_Node_Str"");
    File tempFile=createTempFile(swcName,""String_Node_Str"");
    try {
      FileUtils.copyURLToFile(getClass().getResource(""String_Node_Str""),tempFile);
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"" + artifact,e);
    }
    installArtifact(tempFile,artifact);
    flexArtifacts.add(artifact);
  }
}","private void installResourceBundleBeacon(File swcLocalesFolder,Collection<Artifact> flexArtifacts) throws MojoExecutionException {
  if (!swcLocalesFolder.exists()) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
  Collection<File> localizedSwcs=listFiles(swcLocalesFolder,SWCS,true);
  Set<String> localizedSwcsNames=new HashSet<String>();
  for (  File localizedSwc : localizedSwcs) {
    String name=getResourceName(localizedSwc);
    localizedSwcsNames.add(name);
  }
  for (  String swcName : localizedSwcsNames) {
    Artifact artifact=artifactFactory.createArtifactWithClassifier(FRAMEWORK_GROUP_ID,swcName,version,""String_Node_Str"",""String_Node_Str"");
    File tempFile=createTempFile(swcName,""String_Node_Str"");
    try {
      FileUtils.copyURLToFile(getClass().getResource(""String_Node_Str""),tempFile);
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"" + artifact,e);
    }
    installArtifact(tempFile,artifact);
    flexArtifacts.add(artifact);
  }
}",0.9500772002058672
10047,"private void installConfigFiles(Collection<Artifact> swcArtifacts) throws MojoExecutionException {
  File frameworks=new File(sdkFolder,""String_Node_Str"");
  Collection<File> files=listFiles(frameworks,new String[]{""String_Node_Str"",""String_Node_Str""},false);
  File zipFile=createTempFile(""String_Node_Str"",""String_Node_Str"");
  try {
    ZipOutputStream outStream=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile)));
    for (    File file : files) {
      ZipEntry entry=new ZipEntry(file.getName());
      outStream.putNextEntry(entry);
      byte[] content=FileUtils.readFileToByteArray(file);
      IOUtils.write(content,outStream);
      outStream.flush();
    }
    outStream.close();
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  Artifact artifact=artifactFactory.createArtifactWithClassifier(FRAMEWORK_GROUP_ID,""String_Node_Str"",version,""String_Node_Str"",""String_Node_Str"");
  installArtifact(zipFile,artifact);
  swcArtifacts.add(artifact);
}","private void installConfigFiles(Collection<Artifact> swcArtifacts) throws MojoExecutionException {
  File frameworks=new File(sdkFolder,""String_Node_Str"");
  Collection<File> files=listFiles(frameworks,new String[]{""String_Node_Str"",""String_Node_Str""},false);
  if (files.isEmpty()) {
    return;
  }
  File zipFile=createTempFile(""String_Node_Str"",""String_Node_Str"");
  try {
    ZipOutputStream outStream=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile)));
    for (    File file : files) {
      ZipEntry entry=new ZipEntry(file.getName());
      outStream.putNextEntry(entry);
      byte[] content=FileUtils.readFileToByteArray(file);
      IOUtils.write(content,outStream);
      outStream.flush();
    }
    outStream.close();
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  Artifact artifact=artifactFactory.createArtifactWithClassifier(FRAMEWORK_GROUP_ID,""String_Node_Str"",version,""String_Node_Str"",""String_Node_Str"");
  installArtifact(zipFile,artifact);
  swcArtifacts.add(artifact);
}",0.9804482594182165
10048,"/** 
 * Setup builder configuration
 * @throws MojoExecutionException
 */
protected void configure() throws MojoExecutionException {
  configuration.setExternalLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addExternalLibraryPath(getGlobalDependency());
  configuration.includeLibraries(getDependenciesPath(""String_Node_Str""));
  configuration.setLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  if (mergeResourceBundle == null || mergeResourceBundle) {
    configuration.addLibraryPath(getResourcesBundles());
  }
  resolveRuntimeLibraries();
  configuration.setTheme(getDependenciesPath(""String_Node_Str""));
  configuration.enableAccessibility(accessible);
  configuration.allowSourcePathOverlap(allowSourcePathOverlap);
  configuration.useActionScript3(as3);
  configuration.enableDebugging(debug,debugPassword);
  configuration.useECMAScript(es);
  if (fonts != null) {
    configureFontsAntiAliasing();
    enableFlashType();
    configuration.setFontManagers(fonts.getManagers());
    configuration.setMaximumCachedFonts(fonts.getMaxCachedFonts());
    configuration.setMaximumGlyphsPerFace(fonts.getMaxGlyphsPerFace());
    if (fonts.getLanguages() != null && !fonts.getLanguages().isEmpty()) {
      for (      String language : fonts.getLanguages().keySet()) {
        configuration.setFontLanguageRange(language,fonts.getLanguages().get(language));
      }
    }
  }
  File fontsSnapshot=getFontsSnapshot();
  if (fontsSnapshot == null || !fontsSnapshot.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + fontsSnapshot);
  }
  configuration.setLocalFontSnapshot(fontsSnapshot);
  configuration.setActionScriptMetadata(keepAs3Metadatas);
  configuration.keepCompilerGeneratedActionScript(keepGeneratedActionscript);
  if (licenses != null) {
    for (    String licenseName : licenses.keySet()) {
      String key=licenses.get(licenseName);
      configuration.setLicense(licenseName,key);
    }
  }
  addDefines();
  if (mergeResourceBundle == null || mergeResourceBundle) {
    setLocales(locales);
  }
 else {
    setLocales(new String[0]);
  }
  if (namespaces != null) {
    for (    Namespace namespace : namespaces) {
      configuration.setComponentManifest(namespace.getUri(),namespace.getManifest());
    }
  }
  configuration.optimize(optimize);
  if (this.warnings != null) {
    configureWarnings(configuration);
  }
  configuration.setSourcePath(sourcePaths);
  configuration.enableStrictChecking(strict);
  configuration.useNetwork(useNetwork);
  configuration.enableVerboseStacktraces(verboseStacktraces);
  if (contextRoot != null) {
    configuration.setContextRoot(contextRoot);
  }
  configuration.keepLinkReport(linkReport);
  configuration.keepConfigurationReport(configurationReport);
  configuration.setConfiguration(configFile);
  configuration.setServiceConfiguration(services);
  if (loadExterns != null) {
    List<File> externsFiles=new ArrayList<File>();
    for (    MavenArtifact mvnArtifact : loadExterns) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      externsFiles.add(artifact.getFile());
    }
    configuration.setExterns(externsFiles.toArray(new File[externsFiles.size()]));
  }
  if (rawMetadata != null) {
    configuration.setSWFMetaData(rawMetadata);
  }
  if (metadata != null) {
    if (metadata.getContributor() != null) {
      configuration.setSWFMetaData(Configuration.CONTRIBUTOR,metadata.getContributor());
    }
    if (metadata.getCreator() != null) {
      configuration.setSWFMetaData(Configuration.CREATOR,metadata.getCreator());
    }
    if (metadata.getDate() != null) {
      configuration.setSWFMetaData(Configuration.DATE,metadata.getDate());
    }
    if (metadata.getDescriptions() != null) {
      configuration.setSWFMetaData(Configuration.DESCRIPTION,metadata.getDescriptions());
    }
    if (metadata.getTitles() != null) {
      configuration.setSWFMetaData(Configuration.TITLE,metadata.getTitles());
    }
    if (metadata.getLanguage() != null) {
      configuration.setSWFMetaData(Configuration.LANGUAGE,metadata.getLanguage());
    }
  }
  setCompatibilityMode();
  configuration.setActionScriptFileEncoding(encoding);
  setTargetPlayer();
  if (defaultsCss != null)   configuration.setDefaultCSS(defaultsCss);
  configuration.setDefaultBackgroundColor(Integer.parseInt(defaultBackgroundColor,16));
  configuration.setDefaultFrameRate(defaultFrameRate);
  configuration.setDefaultScriptLimits(scriptMaxRecursionDepth,scriptMaxExecutionTime);
  configuration.setDefaultSize(defaultSizeWidth,defaultSizeHeight);
  if (externs != null && externs.length > 0) {
    configuration.setExterns(externs);
  }
  if (frames != null && frames.length > 0) {
    for (    FrameLabel frame : frames) {
      configuration.setFrameLabel(frame.getLabel(),frame.getClassNames());
    }
  }
  if (includes != null && includes.length > 0) {
    configuration.setIncludes(includes);
  }
  configuration.useHeadlessServer(headlessServer);
  configuration.keepAllTypeSelectors(keepAllTypeSelectors);
  configuration.useResourceBundleMetaData(useResourceBundleMetadata);
  verifyDigests();
}","/** 
 * Setup builder configuration
 * @throws MojoExecutionException
 */
protected void configure() throws MojoExecutionException {
  configuration.setExternalLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addExternalLibraryPath(getGlobalDependency());
  configuration.includeLibraries(getDependenciesPath(""String_Node_Str""));
  configuration.setLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  if (mergeResourceBundle == null || mergeResourceBundle) {
    configuration.addLibraryPath(getResourcesBundles());
  }
  resolveRuntimeLibraries();
  configuration.setTheme(getDependenciesPath(""String_Node_Str""));
  configuration.enableAccessibility(accessible);
  configuration.allowSourcePathOverlap(allowSourcePathOverlap);
  configuration.useActionScript3(as3);
  configuration.enableDebugging(debug,debugPassword);
  configuration.useECMAScript(es);
  if (fonts != null) {
    configureFontsAntiAliasing();
    enableFlashType();
    configuration.setFontManagers(fonts.getManagers());
    configuration.setMaximumCachedFonts(fonts.getMaxCachedFonts());
    configuration.setMaximumGlyphsPerFace(fonts.getMaxGlyphsPerFace());
    if (fonts.getLanguages() != null && !fonts.getLanguages().isEmpty()) {
      for (      String language : fonts.getLanguages().keySet()) {
        configuration.setFontLanguageRange(language,fonts.getLanguages().get(language));
      }
    }
  }
  File fontsSnapshot=getFontsSnapshot();
  if (fontsSnapshot == null || !fontsSnapshot.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + fontsSnapshot);
  }
  configuration.setLocalFontSnapshot(fontsSnapshot);
  configuration.setActionScriptMetadata(keepAs3Metadatas);
  configuration.keepCompilerGeneratedActionScript(keepGeneratedActionscript);
  if (licenses != null) {
    for (    String licenseName : licenses.keySet()) {
      String key=licenses.get(licenseName);
      configuration.setLicense(licenseName,key);
    }
  }
  addDefines();
  if (mergeResourceBundle == null || mergeResourceBundle) {
    setLocales(locales);
  }
 else {
    setLocales(new String[0]);
  }
  addFdkNamespaces();
  if (namespaces != null) {
    for (    Namespace namespace : namespaces) {
      configuration.setComponentManifest(namespace.getUri(),namespace.getManifest());
    }
  }
  configuration.optimize(optimize);
  if (this.warnings != null) {
    configureWarnings(configuration);
  }
  configuration.setSourcePath(sourcePaths);
  configuration.enableStrictChecking(strict);
  configuration.useNetwork(useNetwork);
  configuration.enableVerboseStacktraces(verboseStacktraces);
  if (contextRoot != null) {
    configuration.setContextRoot(contextRoot);
  }
  configuration.keepLinkReport(linkReport);
  configuration.keepConfigurationReport(configurationReport);
  configuration.setConfiguration(configFile);
  configuration.setServiceConfiguration(services);
  if (loadExterns != null) {
    List<File> externsFiles=new ArrayList<File>();
    for (    MavenArtifact mvnArtifact : loadExterns) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      externsFiles.add(artifact.getFile());
    }
    configuration.setExterns(externsFiles.toArray(new File[externsFiles.size()]));
  }
  if (rawMetadata != null) {
    configuration.setSWFMetaData(rawMetadata);
  }
  if (metadata != null) {
    if (metadata.getContributor() != null) {
      configuration.setSWFMetaData(Configuration.CONTRIBUTOR,metadata.getContributor());
    }
    if (metadata.getCreator() != null) {
      configuration.setSWFMetaData(Configuration.CREATOR,metadata.getCreator());
    }
    if (metadata.getDate() != null) {
      configuration.setSWFMetaData(Configuration.DATE,metadata.getDate());
    }
    if (metadata.getDescriptions() != null) {
      configuration.setSWFMetaData(Configuration.DESCRIPTION,metadata.getDescriptions());
    }
    if (metadata.getTitles() != null) {
      configuration.setSWFMetaData(Configuration.TITLE,metadata.getTitles());
    }
    if (metadata.getLanguage() != null) {
      configuration.setSWFMetaData(Configuration.LANGUAGE,metadata.getLanguage());
    }
  }
  setCompatibilityMode();
  configuration.setActionScriptFileEncoding(encoding);
  setTargetPlayer();
  if (defaultsCss != null)   configuration.setDefaultCSS(defaultsCss);
  configuration.setDefaultBackgroundColor(Integer.parseInt(defaultBackgroundColor,16));
  configuration.setDefaultFrameRate(defaultFrameRate);
  configuration.setDefaultScriptLimits(scriptMaxRecursionDepth,scriptMaxExecutionTime);
  configuration.setDefaultSize(defaultSizeWidth,defaultSizeHeight);
  if (externs != null && externs.length > 0) {
    configuration.setExterns(externs);
  }
  if (frames != null && frames.length > 0) {
    for (    FrameLabel frame : frames) {
      configuration.setFrameLabel(frame.getLabel(),frame.getClassNames());
    }
  }
  if (includes != null && includes.length > 0) {
    configuration.setIncludes(includes);
  }
  configuration.useHeadlessServer(headlessServer);
  configuration.keepAllTypeSelectors(keepAllTypeSelectors);
  configuration.useResourceBundleMetaData(useResourceBundleMetadata);
  verifyDigests();
}",0.9979633401221996
10049,"public Namespace(){
  super();
}","public Namespace(String uri,File manifest){
  super();
  this.uri=uri;
  this.manifest=manifest;
}",0.4923076923076923
10050,"private void generatePom(Artifact artifact,Collection<Artifact> artifacts) throws MojoExecutionException {
  Model model=new Model();
  model.setModelVersion(""String_Node_Str"");
  model.setGroupId(artifact.getGroupId());
  model.setArtifactId(artifact.getArtifactId());
  model.setVersion(artifact.getVersion());
  model.setPackaging(artifact.getType());
  model.setDescription(""String_Node_Str"");
  for (  Artifact artifactDependency : artifacts) {
    Dependency dep=new Dependency();
    dep.setGroupId(artifactDependency.getGroupId());
    dep.setArtifactId(artifactDependency.getArtifactId());
    dep.setVersion(artifactDependency.getVersion());
    dep.setType(artifactDependency.getType());
    model.addDependency(dep);
  }
  try {
    File tempFile=createTempFile(artifact.getArtifactId(),""String_Node_Str"");
    FileWriter fw=new FileWriter(tempFile);
    tempFile.deleteOnExit();
    new MavenXpp3Writer().write(fw,model);
    fw.flush();
    fw.close();
    installArtifact(tempFile,artifact);
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"" + e.getMessage(),e);
  }
}","private void generatePom(Artifact artifact,Collection<Artifact> artifacts) throws MojoExecutionException {
  Model model=new Model();
  model.setModelVersion(""String_Node_Str"");
  model.setGroupId(artifact.getGroupId());
  model.setArtifactId(artifact.getArtifactId());
  model.setVersion(artifact.getVersion());
  model.setPackaging(artifact.getType());
  model.setDescription(""String_Node_Str"");
  for (  Artifact artifactDependency : artifacts) {
    Dependency dep=new Dependency();
    dep.setGroupId(artifactDependency.getGroupId());
    dep.setArtifactId(artifactDependency.getArtifactId());
    dep.setVersion(artifactDependency.getVersion());
    dep.setType(artifactDependency.getType());
    dep.setClassifier(artifactDependency.getClassifier());
    model.addDependency(dep);
  }
  try {
    File tempFile=createTempFile(artifact.getArtifactId(),""String_Node_Str"");
    FileWriter fw=new FileWriter(tempFile);
    tempFile.deleteOnExit();
    new MavenXpp3Writer().write(fw,model);
    fw.flush();
    fw.close();
    installArtifact(tempFile,artifact);
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"" + e.getMessage(),e);
  }
}",0.9743143230300392
10051,"private void installFlexFrameworkArtifacts() throws MojoExecutionException {
  getLog().info(""String_Node_Str"");
  Collection<Artifact> swcArtifacts=new ArrayList<Artifact>();
  File swcLibFolder=new File(sdkFolder,""String_Node_Str"");
  Collection<File> swcs=listFiles(swcLibFolder,SWCS,true);
  for (  File swc : swcs) {
    Artifact artifact=createArtifact(swc,FRAMEWORK_GROUP_ID);
    if (""String_Node_Str"".equals(artifact.getArtifactId())) {
      if (artifact.getVersion().startsWith(defaultPlayerVersion)) {
        swcArtifacts.add(artifact);
      }
    }
 else {
      swcArtifacts.add(artifact);
    }
    installArtifact(swc,artifact);
    Artifact pomArtifact=createPomArtifact(artifact);
    generatePom(pomArtifact);
  }
  installResourceBundleArtifacts(swcArtifacts);
  installRslArtifacts();
  Collection<Artifact> flexArtifacts=filter(swcArtifacts,null,new String[]{""String_Node_Str"",""String_Node_Str""});
  Artifact flexSdk=artifactFactory.createArtifact(FRAMEWORK_GROUP_ID,""String_Node_Str"",version,""String_Node_Str"",""String_Node_Str"");
  generatePom(flexSdk,flexArtifacts);
  Collection<Artifact> airArtifacts=filter(swcArtifacts,null,new String[]{""String_Node_Str""});
  Artifact airSdk=artifactFactory.createArtifact(FRAMEWORK_GROUP_ID,""String_Node_Str"",version,""String_Node_Str"",""String_Node_Str"");
  generatePom(airSdk,airArtifacts);
}","private void installFlexFrameworkArtifacts() throws MojoExecutionException {
  getLog().info(""String_Node_Str"");
  Collection<Artifact> swcArtifacts=new ArrayList<Artifact>();
  File swcLibFolder=new File(sdkFolder,""String_Node_Str"");
  Collection<File> swcs=listFiles(swcLibFolder,SWCS,true);
  for (  File swc : swcs) {
    Artifact artifact=createArtifact(swc,FRAMEWORK_GROUP_ID);
    if (""String_Node_Str"".equals(artifact.getArtifactId())) {
      if (artifact.getVersion().startsWith(defaultPlayerVersion)) {
        swcArtifacts.add(artifact);
      }
    }
 else {
      swcArtifacts.add(artifact);
    }
    installArtifact(swc,artifact);
    Artifact pomArtifact=createPomArtifact(artifact);
    generatePom(pomArtifact);
  }
  installResourceBundleArtifacts(swcArtifacts);
  installRslArtifacts();
  installConfigFiles(swcArtifacts);
  Collection<Artifact> flexArtifacts=filter(swcArtifacts,null,new String[]{""String_Node_Str"",""String_Node_Str""});
  Artifact flexSdk=artifactFactory.createArtifact(FRAMEWORK_GROUP_ID,""String_Node_Str"",version,""String_Node_Str"",""String_Node_Str"");
  generatePom(flexSdk,flexArtifacts);
  Collection<Artifact> airArtifacts=filter(swcArtifacts,null,new String[]{""String_Node_Str""});
  Artifact airSdk=artifactFactory.createArtifact(FRAMEWORK_GROUP_ID,""String_Node_Str"",version,""String_Node_Str"",""String_Node_Str"");
  generatePom(airSdk,airArtifacts);
}",0.986909090909091
10052,"public void execute() throws MojoExecutionException, MojoFailureException {
  if (sdkFolder == null) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
  if (!sdkFolder.exists() || !sdkFolder.isDirectory()) {
    throw new MojoExecutionException(""String_Node_Str"" + sdkFolder.getAbsolutePath());
  }
  installCompilerArtifacts();
  installAsdocTemplateArtifact();
  installConfigFiles();
  installFlexFrameworkArtifacts();
}","public void execute() throws MojoExecutionException, MojoFailureException {
  if (sdkFolder == null) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
  if (!sdkFolder.exists() || !sdkFolder.isDirectory()) {
    throw new MojoExecutionException(""String_Node_Str"" + sdkFolder.getAbsolutePath());
  }
  installCompilerArtifacts();
  installAsdocTemplateArtifact();
  installFlexFrameworkArtifacts();
}",0.9716981132075472
10053,"private void installConfigFiles() throws MojoExecutionException {
  File frameworks=new File(sdkFolder,""String_Node_Str"");
  Collection<File> files=listFiles(frameworks,new String[]{""String_Node_Str"",""String_Node_Str""},false);
  File zipFile=createTempFile(""String_Node_Str"",""String_Node_Str"");
  try {
    ZipOutputStream outStream=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile)));
    for (    File file : files) {
      ZipEntry entry=new ZipEntry(file.getName());
      outStream.putNextEntry(entry);
      byte[] content=FileUtils.readFileToByteArray(file);
      IOUtils.write(content,outStream);
      outStream.flush();
    }
    outStream.close();
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  Artifact artifact=artifactFactory.createArtifactWithClassifier(COMPILER_GROUP_ID,""String_Node_Str"",version,""String_Node_Str"",""String_Node_Str"");
  installArtifact(zipFile,artifact);
}","private void installConfigFiles(Collection<Artifact> swcArtifacts) throws MojoExecutionException {
  File frameworks=new File(sdkFolder,""String_Node_Str"");
  Collection<File> files=listFiles(frameworks,new String[]{""String_Node_Str"",""String_Node_Str""},false);
  File zipFile=createTempFile(""String_Node_Str"",""String_Node_Str"");
  try {
    ZipOutputStream outStream=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile)));
    for (    File file : files) {
      ZipEntry entry=new ZipEntry(file.getName());
      outStream.putNextEntry(entry);
      byte[] content=FileUtils.readFileToByteArray(file);
      IOUtils.write(content,outStream);
      outStream.flush();
    }
    outStream.close();
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  Artifact artifact=artifactFactory.createArtifactWithClassifier(FRAMEWORK_GROUP_ID,""String_Node_Str"",version,""String_Node_Str"",""String_Node_Str"");
  installArtifact(zipFile,artifact);
  swcArtifacts.add(artifact);
}",0.9618473895582328
10054,"@SuppressWarnings(""String_Node_Str"") private Map<Artifact,List<Artifact>> getDependencies(List<Artifact> rslArtifacts) throws MojoExecutionException {
  Map<Artifact,List<Artifact>> dependencies=new HashMap<Artifact,List<Artifact>>();
  for (  Artifact pomArtifact : rslArtifacts) {
    try {
      MavenProject pomProject=mavenProjectBuilder.buildFromRepository(pomArtifact,remoteRepositories,localRepository);
      Set pomArtifacts=pomProject.createArtifacts(artifactFactory,null,null);
      ArtifactResolutionResult arr=resolver.resolveTransitively(pomArtifacts,pomArtifact,remoteRepositories,localRepository,artifactMetadataSource);
      List<Artifact> artifactDependencies=new ArrayList(arr.getArtifacts());
      artifactDependencies=removeNonRSLDependencies(rslArtifacts,artifactDependencies);
      dependencies.put(pomArtifact,artifactDependencies);
    }
 catch (    Exception e) {
      throw new MojoExecutionException(e.getMessage(),e);
    }
  }
  return dependencies;
}","@SuppressWarnings(""String_Node_Str"") private Map<Artifact,List<Artifact>> getDependencies(List<Artifact> rslArtifacts) throws MojoExecutionException {
  Map<Artifact,List<Artifact>> dependencies=new HashMap<Artifact,List<Artifact>>();
  for (  Artifact pomArtifact : rslArtifacts) {
    try {
      MavenProject pomProject=mavenProjectBuilder.buildFromRepository(pomArtifact,remoteRepositories,localRepository);
      Set pomArtifacts=pomProject.createArtifacts(artifactFactory,null,null);
      ArtifactResolutionResult arr=resolver.resolveTransitively(pomArtifacts,pomArtifact,remoteRepositories,localRepository,artifactMetadataSource);
      List<Artifact> artifactDependencies=new ArrayList<Artifact>(arr.getArtifacts());
      artifactDependencies=removeNonRSLDependencies(rslArtifacts,artifactDependencies);
      dependencies.put(pomArtifact,artifactDependencies);
    }
 catch (    Exception e) {
      throw new MojoExecutionException(e.getMessage(),e);
    }
  }
  return dependencies;
}",0.9949596774193548
10055,"/** 
 * Get resource bundles
 * @return Array of resource bundle files
 * @throws MojoExecutionException
 */
protected File[] getResourcesBundles() throws MojoExecutionException {
  if (locales == null) {
    return new File[0];
  }
  List<File> resourceBundles=new ArrayList<File>();
  for (  Artifact artifact : getDependencyArtifacts()) {
    if (!""String_Node_Str"".equals(artifact.getType())) {
      continue;
    }
    for (    String locale : locales) {
      Artifact localeArtifact=artifactFactory.createArtifactWithClassifier(artifact.getGroupId(),artifact.getArtifactId(),artifact.getVersion(),artifact.getType(),locale);
      resolveArtifact(localeArtifact,resolver,localRepository,remoteRepositories);
      resourceBundles.add(localeArtifact.getFile());
    }
  }
  return resourceBundles.toArray(new File[resourceBundles.size()]);
}","/** 
 * Get resource bundles for the given locale
 * @param locale the locale for which you want bundles, null for all locales
 * @return Array of resource bundle files
 * @throws MojoExecutionException
 */
protected File[] getResourcesBundles(String locale) throws MojoExecutionException {
  if (locales == null) {
    return new File[0];
  }
  List<File> resourceBundles=new ArrayList<File>();
  for (  Artifact artifact : getDependencyArtifacts()) {
    if (!""String_Node_Str"".equals(artifact.getType())) {
      continue;
    }
    for (    String mylocale : locales) {
      if (locale == null || mylocale.equals(locale)) {
        Artifact localeArtifact=artifactFactory.createArtifactWithClassifier(artifact.getGroupId(),artifact.getArtifactId(),artifact.getVersion(),artifact.getType(),mylocale);
        resolveArtifact(localeArtifact,resolver,localRepository,remoteRepositories);
        resourceBundles.add(localeArtifact.getFile());
      }
    }
  }
  getLog().debug(""String_Node_Str"" + locale + ""String_Node_Str""+ resourceBundles);
  return resourceBundles.toArray(new File[resourceBundles.size()]);
}",0.8578706062149771
10056,"@Override protected void writeResourceBundle(String[] bundles,String locale,File localePath) throws MojoExecutionException {
  File output=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"" + locale+ ""String_Node_Str"");
  String bundlesString=Arrays.toString(bundles).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  ArrayList<File> external=new ArrayList<File>();
  ArrayList<File> internal=new ArrayList<File>();
  ArrayList<File> merged=new ArrayList<File>();
  external.addAll(asList(getGlobalDependency()));
  external.addAll(asList(getDependenciesPath(""String_Node_Str"")));
  external.addAll(asList(getDependenciesPath(""String_Node_Str"")));
  internal.addAll(asList(getDependenciesPath(""String_Node_Str"")));
  merged.addAll(asList(getDependenciesPath(""String_Node_Str"")));
  merged.addAll(asList(getDependenciesPath(""String_Node_Str"")));
  merged.addAll(asList(getResourcesBundles()));
  Set<String> args=new HashSet<String>();
  args.add(""String_Node_Str"" + locale);
  args.add(""String_Node_Str"" + localePath.getAbsolutePath());
  args.add(""String_Node_Str"" + bundlesString);
  args.add(""String_Node_Str"" + output.getAbsolutePath());
  args.add(""String_Node_Str"" + getFontsSnapshot().getAbsolutePath());
  args.add(""String_Node_Str"" + configFile.getAbsolutePath());
  args.add(""String_Node_Str"" + toString(external));
  args.add(""String_Node_Str"" + toString(internal));
  args.add(""String_Node_Str"" + toString(merged));
  forkMxmlc(args);
  runMxmlc(args);
  projectHelper.attachArtifact(project,""String_Node_Str"",locale,output);
}","@Override protected void writeResourceBundle(String[] bundles,String locale,File localePath) throws MojoExecutionException {
  File output=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"" + locale+ ""String_Node_Str"");
  String bundlesString=Arrays.toString(bundles).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  ArrayList<File> external=new ArrayList<File>();
  ArrayList<File> internal=new ArrayList<File>();
  ArrayList<File> merged=new ArrayList<File>();
  external.addAll(asList(getGlobalDependency()));
  external.addAll(asList(getDependenciesPath(""String_Node_Str"")));
  external.addAll(asList(getDependenciesPath(""String_Node_Str"")));
  internal.addAll(asList(getDependenciesPath(""String_Node_Str"")));
  merged.addAll(asList(getDependenciesPath(""String_Node_Str"")));
  merged.addAll(asList(getDependenciesPath(""String_Node_Str"")));
  merged.addAll(asList(getResourcesBundles(locale)));
  Set<String> args=new HashSet<String>();
  args.add(""String_Node_Str"" + locale);
  args.add(""String_Node_Str"" + localePath.getAbsolutePath());
  args.add(""String_Node_Str"" + bundlesString);
  args.add(""String_Node_Str"" + output.getAbsolutePath());
  args.add(""String_Node_Str"" + getFontsSnapshot().getAbsolutePath());
  args.add(""String_Node_Str"" + configFile.getAbsolutePath());
  args.add(""String_Node_Str"" + toString(external));
  args.add(""String_Node_Str"" + toString(internal));
  args.add(""String_Node_Str"" + toString(merged));
  getLog().debug(""String_Node_Str"" + args.toString());
  forkMxmlc(args);
  runMxmlc(args);
  projectHelper.attachArtifact(project,""String_Node_Str"",locale,output);
}",0.9818181818181818
10057,"@Override protected void writeResourceBundle(String[] bundles,String locale,File localePath) throws MojoExecutionException {
  getLog().info(""String_Node_Str"" + locale);
  Library localized=new Library();
  localized.setConfiguration(configuration);
  localized.setLogger(new CompileLogger(getLog()));
  configuration.addLibraryPath(new File[]{outputFile});
  setLocales(new String[]{locale});
  configuration.setSourcePath(new File[]{localePath});
  for (  String bundle : bundles) {
    localized.addResourceBundle(bundle);
  }
  configuration.addLibraryPath(getResourcesBundles());
  File output=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"" + locale+ ""String_Node_Str"");
  localized.setOutput(output);
  build(localized);
  projectHelper.attachArtifact(project,""String_Node_Str"",locale,output);
}","@Override protected void writeResourceBundle(String[] bundles,String locale,File localePath) throws MojoExecutionException {
  getLog().info(""String_Node_Str"" + locale);
  Library localized=new Library();
  localized.setConfiguration(configuration);
  configuration.setLibraryPath(new File[0]);
  localized.setLogger(new CompileLogger(getLog()));
  configuration.addLibraryPath(new File[]{outputFile});
  setLocales(new String[]{locale});
  configuration.setSourcePath(new File[]{localePath});
  for (  String bundle : bundles) {
    localized.addResourceBundle(bundle);
  }
  configuration.addLibraryPath(getResourcesBundles(locale));
  File output=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"" + locale+ ""String_Node_Str"");
  localized.setOutput(output);
  build(localized);
  projectHelper.attachArtifact(project,""String_Node_Str"",locale,output);
}",0.9700176366843032
10058,"@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  builder=new Library();
  if (directory != null) {
    builder.setDirectory(directory);
  }
  super.setUp();
  if (outputFile == null) {
    if (output == null) {
      outputFile=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
    }
 else {
      outputFile=new File(build.getDirectory(),output);
    }
  }
  builder.setOutput(outputFile);
  if (checkNullOrEmpty(includeClasses) && checkNullOrEmpty(includeFiles) && checkNullOrEmpty(includeNamespaces)&& checkNullOrEmpty(includeResourceBundles)&& checkNullOrEmpty(includeResourceBundlesArtifact)&& checkNullOrEmpty(includeSources)&& checkNullOrEmpty(includeStylesheet)) {
    getLog().warn(""String_Node_Str"");
    includeSources=sourcePaths.clone();
  }
  if (!checkNullOrEmpty(includeClasses)) {
    for (    String asClass : includeClasses) {
      builder.addComponent(asClass);
    }
  }
  if (!checkNullOrEmpty(includeFiles)) {
    for (    String includeFile : includeFiles) {
      if (includeFile == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      File file=new File(includeFile);
      if (!file.exists()) {
        file=MavenUtils.resolveResourceFile(project,includeFile);
      }
      if (file == null || !file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + includeFile + ""String_Node_Str"");
      }
      File folder=getResourceFolder(file);
      String relativePath=PathUtil.getRelativePath(folder,file);
      if (relativePath.startsWith(""String_Node_Str"")) {
        relativePath=file.getName();
      }
      builder.addArchiveFile(relativePath,file);
    }
  }
  if (!checkNullOrEmpty(includeNamespaces)) {
    for (    String uri : includeNamespaces) {
      try {
        builder.addComponent(new URI(uri));
      }
 catch (      URISyntaxException e) {
        throw new MojoExecutionException(""String_Node_Str"" + uri,e);
      }
    }
  }
  if (!checkNullOrEmpty(includeResourceBundles)) {
    for (    String rb : includeResourceBundles) {
      builder.addResourceBundle(rb);
    }
  }
  if (!checkNullOrEmpty(includeResourceBundlesArtifact)) {
    for (    MavenArtifact mvnArtifact : includeResourceBundlesArtifact) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      String bundleFile;
      try {
        bundleFile=FileUtils.readFileToString(artifact.getFile());
      }
 catch (      IOException e) {
        throw new MojoExecutionException(""String_Node_Str"" + artifact,e);
      }
      String[] bundles=bundleFile.split(""String_Node_Str"");
      for (      String bundle : bundles) {
        builder.addResourceBundle(bundle);
      }
    }
  }
  if (!checkNullOrEmpty(includeSources)) {
    for (    File file : includeSources) {
      if (file == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      if (!file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
      }
      builder.addComponent(file);
    }
  }
  includeStylesheet();
  computeDigest();
  builder.addArchiveFile(""String_Node_Str"" + project.getGroupId() + ""String_Node_Str""+ project.getArtifactId()+ ""String_Node_Str"",new File(project.getBasedir(),""String_Node_Str""));
}","@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  builder=new Library();
  if (directory != null) {
    builder.setDirectory(directory);
  }
  super.setUp();
  if (outputFile == null) {
    if (output == null) {
      outputFile=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
    }
 else {
      outputFile=new File(build.getDirectory(),output);
    }
  }
  builder.setOutput(outputFile);
  if (checkNullOrEmpty(includeClasses) && checkNullOrEmpty(includeFiles) && checkNullOrEmpty(includeNamespaces)&& checkNullOrEmpty(includeResourceBundles)&& checkNullOrEmpty(includeResourceBundlesArtifact)&& checkNullOrEmpty(includeSources)&& checkNullOrEmpty(includeStylesheet)) {
    getLog().warn(""String_Node_Str"");
    includeSources=sourcePaths.clone();
  }
  if (!checkNullOrEmpty(includeClasses)) {
    for (    String asClass : includeClasses) {
      builder.addComponent(asClass);
    }
  }
  if (!checkNullOrEmpty(includeFiles)) {
    for (    String includeFile : includeFiles) {
      if (includeFile == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      File file=new File(includeFile);
      if (!file.exists()) {
        file=MavenUtils.resolveResourceFile(project,includeFile);
      }
      if (file == null || !file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + includeFile + ""String_Node_Str"");
      }
      File folder=getResourceFolder(file);
      String relativePath=PathUtil.getRelativePath(folder,file);
      if (relativePath.startsWith(""String_Node_Str"")) {
        relativePath=file.getName();
      }
      builder.addArchiveFile(relativePath,file);
    }
  }
  if (!checkNullOrEmpty(includeNamespaces)) {
    for (    String uri : includeNamespaces) {
      try {
        builder.addComponent(new URI(uri));
      }
 catch (      URISyntaxException e) {
        throw new MojoExecutionException(""String_Node_Str"" + uri,e);
      }
    }
  }
  if (!checkNullOrEmpty(includeResourceBundles)) {
    for (    String rb : includeResourceBundles) {
      builder.addResourceBundle(rb);
    }
  }
  if (!checkNullOrEmpty(includeResourceBundlesArtifact)) {
    for (    MavenArtifact mvnArtifact : includeResourceBundlesArtifact) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      String bundleFile;
      try {
        bundleFile=FileUtils.readFileToString(artifact.getFile());
      }
 catch (      IOException e) {
        throw new MojoExecutionException(""String_Node_Str"" + artifact,e);
      }
      String[] bundles=bundleFile.split(""String_Node_Str"");
      for (      String bundle : bundles) {
        builder.addResourceBundle(bundle);
      }
    }
  }
  if (!checkNullOrEmpty(includeSources)) {
    for (    File file : includeSources) {
      if (file == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      if (!file.getName().contains(""String_Node_Str"") && !file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
      }
      builder.addComponent(file);
    }
  }
  includeStylesheet();
  computeDigest();
  builder.addArchiveFile(""String_Node_Str"" + project.getGroupId() + ""String_Node_Str""+ project.getArtifactId()+ ""String_Node_Str"",new File(project.getBasedir(),""String_Node_Str""));
}",0.993319118692253
10059,"@SuppressWarnings(""String_Node_Str"") protected void setUp() throws MojoExecutionException, MojoFailureException {
  if (sourcePaths == null) {
    sourcePaths=MavenUtils.getSourcePaths(build);
  }
  if (docSources == null && docClasses == null && docNamespaces == null) {
    getLog().warn(""String_Node_Str"");
    docSources=MavenUtils.getSourcePaths(build);
  }
  libraries=new ArrayList<File>();
  for (  Artifact artifact : MavenUtils.getDependencyArtifacts(project,resolver,localRepository,remoteRepositories,artifactMetadataSource)) {
    if (""String_Node_Str"".equals(artifact.getType())) {
      libraries.add(artifact.getFile());
    }
  }
  if (output == null) {
    output=new File(build.getDirectory(),""String_Node_Str"");
    if (!output.exists()) {
      output.mkdirs();
    }
  }
  if (configFile == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),getConfigFileName());
      if (cfg.exists()) {
        configFile=cfg;
        break;
      }
    }
  }
  if (configFile == null) {
    URL url=getClass().getResource(""String_Node_Str"" + getConfigFileName());
    configFile=new File(build.getDirectory(),getConfigFileName());
    try {
      FileUtils.copyURLToFile(url,configFile);
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"");
    }
  }
  if (!configFile.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + configFile);
  }
  if (fontsSnapshot == null) {
    URL url;
    if (MavenUtils.isMac()) {
      url=getClass().getResource(""String_Node_Str"");
    }
 else {
      url=getClass().getResource(""String_Node_Str"");
    }
    File fontsSer=new File(build.getDirectory(),""String_Node_Str"");
    try {
      FileUtils.copyURLToFile(url,fontsSer);
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"");
    }
    fontsSnapshot=fontsSer;
  }
  if (templatesPath == null) {
    templatesPath=generateDefaultTemplate();
  }
}","@SuppressWarnings(""String_Node_Str"") protected void setUp() throws MojoExecutionException, MojoFailureException {
  if (sourcePaths == null) {
    sourcePaths=MavenUtils.getSourcePaths(project,build);
  }
  if (docSources == null && docClasses == null && docNamespaces == null) {
    getLog().warn(""String_Node_Str"");
    docSources=sourcePaths;
  }
  libraries=new ArrayList<File>();
  for (  Artifact artifact : MavenUtils.getDependencyArtifacts(project,resolver,localRepository,remoteRepositories,artifactMetadataSource)) {
    if (""String_Node_Str"".equals(artifact.getType())) {
      libraries.add(artifact.getFile());
    }
  }
  if (output == null) {
    output=new File(build.getDirectory(),""String_Node_Str"");
    if (!output.exists()) {
      output.mkdirs();
    }
  }
  if (configFile == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),getConfigFileName());
      if (cfg.exists()) {
        configFile=cfg;
        break;
      }
    }
  }
  if (configFile == null) {
    URL url=getClass().getResource(""String_Node_Str"" + getConfigFileName());
    configFile=new File(build.getDirectory(),getConfigFileName());
    try {
      FileUtils.copyURLToFile(url,configFile);
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"");
    }
  }
  if (!configFile.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + configFile);
  }
  if (fontsSnapshot == null) {
    URL url;
    if (MavenUtils.isMac()) {
      url=getClass().getResource(""String_Node_Str"");
    }
 else {
      url=getClass().getResource(""String_Node_Str"");
    }
    File fontsSer=new File(build.getDirectory(),""String_Node_Str"");
    try {
      FileUtils.copyURLToFile(url,fontsSer);
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"");
    }
    fontsSnapshot=fontsSer;
  }
  if (templatesPath == null) {
    templatesPath=generateDefaultTemplate();
  }
}",0.9923926380368098
10060,"@Override protected void configure() throws MojoExecutionException {
  super.configure();
  configuration.setExternalLibraryPath(getGlobalDependency());
  configuration.includeLibraries(null);
  configuration.setRuntimeSharedLibraries(null);
  configuration.setLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getResourcesBundles());
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.includeLibraries(merge(getDependenciesPath(""String_Node_Str""),getDependenciesPath(""String_Node_Str"")));
  configuration.addSourcePath(new File[]{new File(build.getTestOutputDirectory())});
  configuration.addSourcePath(MavenUtils.getTestSourcePaths(build));
  configuration.allowSourcePathOverlap(true);
}","@Override protected void configure() throws MojoExecutionException {
  super.configure();
  configuration.setExternalLibraryPath(getGlobalDependency());
  configuration.includeLibraries(null);
  configuration.setRuntimeSharedLibraries(null);
  configuration.setLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getResourcesBundles());
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.includeLibraries(merge(getDependenciesPath(""String_Node_Str""),getDependenciesPath(""String_Node_Str"")));
  configuration.addSourcePath(new File[]{new File(build.getTestOutputDirectory())});
  configuration.addSourcePath(MavenUtils.getTestSourcePaths(project,build));
  configuration.allowSourcePathOverlap(true);
}",0.9956043956043956
10061,"@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  isSetProjectFile=false;
  File outputFolder=new File(build.getTestOutputDirectory());
  if (!outputFolder.exists()) {
    outputFolder.mkdirs();
  }
  outputFile=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
  includeSources=MavenUtils.getTestSourcePaths(build);
  super.setUp();
}","@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  isSetProjectFile=false;
  File outputFolder=new File(build.getTestOutputDirectory());
  if (!outputFolder.exists()) {
    outputFolder.mkdirs();
  }
  outputFile=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
  includeSources=MavenUtils.getTestSourcePaths(project,build);
  super.setUp();
}",0.9899497487437184
10062,"@Override protected void configure() throws MojoExecutionException {
  super.configure();
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addSourcePath(MavenUtils.getTestSourcePaths(build));
}","@Override protected void configure() throws MojoExecutionException {
  super.configure();
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addSourcePath(MavenUtils.getTestSourcePaths(project,build));
}",0.9830508474576272
10063,"/** 
 * Setup before compilation of source
 */
@SuppressWarnings(""String_Node_Str"") @Override public void setUp() throws MojoExecutionException, MojoFailureException {
  if (sourcePaths == null) {
    sourcePaths=MavenUtils.getSourcePaths(build);
    if (mergeResourceBundle != null && mergeResourceBundle) {
      List<File> paths=new ArrayList<File>(Arrays.asList(sourcePaths));
      paths.add(new File(resourceBundlePath));
      sourcePaths=paths.toArray(new File[paths.size()]);
    }
  }
  if (configFile == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        configFile=cfg;
        break;
      }
    }
  }
  if (configFile == null) {
    getLog().debug(""String_Node_Str"");
    configFile=MavenUtils.getConfigFile(build);
  }
  if (!configFile.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + configFile);
  }
 else {
    getLog().info(""String_Node_Str"" + configFile);
  }
  if (services == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        services=cfg;
        break;
      }
    }
  }
  if (rslUrls == null) {
    rslUrls=new String[]{""String_Node_Str""};
  }
  if (policyFileUrls == null) {
    policyFileUrls=new String[]{""String_Node_Str""};
  }
  if (metadata == null) {
    metadata=new Metadata();
    if (project.getDevelopers() != null && !project.getDevelopers().isEmpty()) {
      List<Developer> developers=project.getDevelopers();
      for (      Developer d : developers) {
        metadata.setCreator(d.getName());
        break;
      }
    }
    if (project.getContributors() != null && !project.getContributors().isEmpty()) {
      List<Contributor> contributors=project.getContributors();
      for (      Contributor c : contributors) {
        metadata.setContributor(c.getName());
        break;
      }
    }
    metadata.setDate(new Date());
    if (locales != null) {
      metadata.setLanguage(locales[0]);
      metadata.addDescription(locales[0],project.getDescription());
      metadata.addTitle(locales[0],project.getName());
    }
  }
  if (licenses == null) {
    licenses=getLicenses();
  }
  configuration=builder.getDefaultConfiguration();
  configure();
  compilationData=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
  setMavenPathResolver();
}","/** 
 * Setup before compilation of source
 */
@SuppressWarnings(""String_Node_Str"") @Override public void setUp() throws MojoExecutionException, MojoFailureException {
  if (sourcePaths == null) {
    sourcePaths=MavenUtils.getSourcePaths(project,build);
    if (mergeResourceBundle != null && mergeResourceBundle) {
      List<File> paths=new ArrayList<File>(Arrays.asList(sourcePaths));
      paths.add(new File(resourceBundlePath));
      sourcePaths=paths.toArray(new File[paths.size()]);
    }
  }
  if (configFile == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        configFile=cfg;
        break;
      }
    }
  }
  if (configFile == null) {
    getLog().debug(""String_Node_Str"");
    configFile=MavenUtils.getConfigFile(build);
  }
  if (!configFile.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + configFile);
  }
 else {
    getLog().info(""String_Node_Str"" + configFile);
  }
  if (services == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        services=cfg;
        break;
      }
    }
  }
  if (rslUrls == null) {
    rslUrls=new String[]{""String_Node_Str""};
  }
  if (policyFileUrls == null) {
    policyFileUrls=new String[]{""String_Node_Str""};
  }
  if (metadata == null) {
    metadata=new Metadata();
    if (project.getDevelopers() != null && !project.getDevelopers().isEmpty()) {
      List<Developer> developers=project.getDevelopers();
      for (      Developer d : developers) {
        metadata.setCreator(d.getName());
        break;
      }
    }
    if (project.getContributors() != null && !project.getContributors().isEmpty()) {
      List<Contributor> contributors=project.getContributors();
      for (      Contributor c : contributors) {
        metadata.setContributor(c.getName());
        break;
      }
    }
    metadata.setDate(new Date());
    if (locales != null) {
      metadata.setLanguage(locales[0]);
      metadata.addDescription(locales[0],project.getDescription());
      metadata.addTitle(locales[0],project.getName());
    }
  }
  if (licenses == null) {
    licenses=getLicenses();
  }
  configuration=builder.getDefaultConfiguration();
  configure();
  compilationData=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
  setMavenPathResolver();
}",0.9984338292873924
10064,"/** 
 * Get the test-source paths for all resources in the test-source directory.
 * @param build Build for this to get all test-source paths
 * @return Array of test-source paths for all resources in the test-source directory
 */
@SuppressWarnings(""String_Node_Str"") public static File[] getTestSourcePaths(Build build){
  return getFiles(build.getTestSourceDirectory(),build.getTestResources());
}","/** 
 * Get the test-source paths for all resources in the test-source directory.
 * @param build Build for this to get all test-source paths
 * @return Array of test-source paths for all resources in the test-source directory
 */
@SuppressWarnings(""String_Node_Str"") public static File[] getTestSourcePaths(MavenProject project,Build build){
  return getFiles(build.getTestSourceDirectory(),build.getTestResources(),project.getTestCompileSourceRoots());
}",0.9333333333333332
10065,"/** 
 * Resolve a resource file in a maven project resources folders
 * @param project maven project
 * @param resourceFile sugested name on pom
 * @return source file or null if source not found
 */
@SuppressWarnings(""String_Node_Str"") public static File resolveResourceFile(MavenProject project,String resourceFile){
  File[] resoucesFolders=getFiles(project.getBasedir().getAbsolutePath(),project.getBuild().getResources());
  for (  File resourceFolder : resoucesFolders) {
    File resource=new File(resourceFolder,resourceFile);
    if (resource.exists()) {
      return resource;
    }
  }
  return null;
}","/** 
 * Resolve a resource file in a maven project resources folders
 * @param project maven project
 * @param resourceFile sugested name on pom
 * @return source file or null if source not found
 */
@SuppressWarnings(""String_Node_Str"") public static File resolveResourceFile(MavenProject project,String resourceFile){
  File[] resoucesFolders=getFiles(project.getBasedir().getAbsolutePath(),project.getBuild().getResources(),Collections.EMPTY_LIST);
  for (  File resourceFolder : resoucesFolders) {
    File resource=new File(resourceFolder,resourceFile);
    if (resource.exists()) {
      return resource;
    }
  }
  return null;
}",0.9815852682145716
10066,"public static Map<String,File> getManifests(File configZip,Build build) throws MojoExecutionException {
  File outputFolder=new File(build.getOutputDirectory(),""String_Node_Str"");
  outputFolder.mkdirs();
  ZipExtractor ze;
  try {
    ze=new ZipExtractor(configZip);
    ze.extract(outputFolder);
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  Map<String,File> manifests=new LinkedHashMap<String,File>();
  File configFile=new File(outputFolder,""String_Node_Str"");
  if (!configFile.isFile()) {
    return manifests;
  }
  SAXReader reader=new SAXReader();
  Document document;
  try {
    document=reader.read(configFile);
  }
 catch (  DocumentException e) {
    throw new MojoExecutionException(""String_Node_Str"" + configFile.getAbsolutePath(),e);
  }
  List<Node> list=document.selectNodes(""String_Node_Str"");
  for (  Node node : list) {
    String uri=node.valueOf(""String_Node_Str"");
    File manifest=new File(outputFolder,node.valueOf(""String_Node_Str""));
    if (!manifest.exists()) {
      throw new MojoExecutionException(""String_Node_Str"" + uri + ""String_Node_Str""+ manifest.getAbsolutePath());
    }
    manifests.put(uri,manifest);
  }
  return manifests;
}","@SuppressWarnings(""String_Node_Str"") public static Map<String,File> getManifests(File configZip,Build build) throws MojoExecutionException {
  File outputFolder=new File(build.getOutputDirectory(),""String_Node_Str"");
  outputFolder.mkdirs();
  ZipExtractor ze;
  try {
    ze=new ZipExtractor(configZip);
    ze.extract(outputFolder);
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  Map<String,File> manifests=new LinkedHashMap<String,File>();
  File configFile=new File(outputFolder,""String_Node_Str"");
  if (!configFile.isFile()) {
    return manifests;
  }
  SAXReader reader=new SAXReader();
  Document document;
  try {
    document=reader.read(configFile);
  }
 catch (  DocumentException e) {
    throw new MojoExecutionException(""String_Node_Str"" + configFile.getAbsolutePath(),e);
  }
  List<Node> list=document.selectNodes(""String_Node_Str"");
  for (  Node node : list) {
    String uri=node.valueOf(""String_Node_Str"");
    File manifest=new File(outputFolder,node.valueOf(""String_Node_Str""));
    if (!manifest.exists()) {
      throw new MojoExecutionException(""String_Node_Str"" + uri + ""String_Node_Str""+ manifest.getAbsolutePath());
    }
    manifests.put(uri,manifest);
  }
  return manifests;
}",0.985086658605401
10067,"/** 
 * Get array of Files for all resources in the resources list.
 * @param sourceDirectory path to source directory
 * @param resources List of Resources
 * @return Array of Files for given source directory and resources
 */
private static File[] getFiles(String sourceDirectory,List<Resource> resources){
  List<File> files=new ArrayList<File>();
  File source=new File(sourceDirectory);
  if (source.exists()) {
    files.add(source);
  }
  for (  Resource resource : resources) {
    File resourceFile=new File(resource.getDirectory());
    if (resourceFile.exists()) {
      files.add(resourceFile);
    }
  }
  return files.toArray(new File[files.size()]);
}","/** 
 * Get array of Files for all resources in the resources list.
 * @param project
 * @param sourceDirectory path to source directory
 * @param resources List of Resources
 * @param compilePaths
 * @return Array of Files for given source directory and resources
 */
private static File[] getFiles(String sourceDirectory,List<Resource> resources,List<String> compilePaths){
  Set<File> files=new HashSet<File>();
  File source=new File(sourceDirectory);
  if (source.exists()) {
    files.add(source);
  }
  for (  Resource resource : resources) {
    File resourceFile=new File(resource.getDirectory());
    if (resourceFile.exists()) {
      files.add(resourceFile);
    }
  }
  for (  String path : compilePaths) {
    File filePath=new File(path);
    if (filePath.exists()) {
      files.add(filePath);
    }
  }
  return files.toArray(new File[files.size()]);
}",0.8534201954397395
10068,"/** 
 * Get the source paths for all resources in the source directory.
 * @param build Build for this to get all source paths
 * @return Array of source paths for all resources in the source directory
 */
@SuppressWarnings(""String_Node_Str"") public static File[] getSourcePaths(Build build){
  return getFiles(build.getSourceDirectory(),build.getResources());
}","/** 
 * Get the source paths for all resources in the source directory.
 * @param build Build for this to get all source paths
 * @return Array of source paths for all resources in the source directory
 */
@SuppressWarnings(""String_Node_Str"") public static File[] getSourcePaths(MavenProject project,Build build){
  return getFiles(build.getSourceDirectory(),build.getResources(),project.getCompileSourceRoots());
}",0.9317889317889316
10069,"@Override protected void configure() throws MojoExecutionException {
  super.configure();
  configuration.setExternalLibraryPath(getGlobalDependency());
  configuration.setIncludes(null);
  configuration.setRuntimeSharedLibraries(null);
  configuration.setLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getResourcesBundles());
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addSourcePath(new File[]{new File(build.getTestOutputDirectory())});
  configuration.addSourcePath(MavenUtils.getTestSourcePaths(build));
  configuration.allowSourcePathOverlap(true);
}","@Override protected void configure() throws MojoExecutionException {
  super.configure();
  configuration.setExternalLibraryPath(getGlobalDependency());
  configuration.includeLibraries(null);
  configuration.setRuntimeSharedLibraries(null);
  configuration.setLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getResourcesBundles());
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.includeLibraries(merge(getDependenciesPath(""String_Node_Str""),getDependenciesPath(""String_Node_Str"")));
  configuration.addSourcePath(new File[]{new File(build.getTestOutputDirectory())});
  configuration.addSourcePath(MavenUtils.getTestSourcePaths(build));
  configuration.allowSourcePathOverlap(true);
}",0.9546695794647734
10070,"/** 
 * Called by Ant to execute the task.
 */
@Override protected void setUp() throws MojoExecutionException, MojoFailureException {
  swf=new File(build.getTestOutputDirectory(),""String_Node_Str"");
  reportPath=new File(build.getDirectory(),""String_Node_Str"");
  reportPath.mkdirs();
  if (updateSecuritySandbox) {
    updateSecuritySandbox();
  }
}","/** 
 * Called by Ant to execute the task.
 */
@Override protected void setUp() throws MojoExecutionException, MojoFailureException {
  swf=new File(build.getTestOutputDirectory(),""String_Node_Str"");
  reportPath=new File(build.getDirectory(),""String_Node_Str"");
  reportPath.mkdirs();
}",0.8996865203761756
10071,"@Override protected void tearDown() throws MojoExecutionException, MojoFailureException {
  super.tearDown();
  if (modules != null) {
    configuration.addExterns(new File[]{linkReportFile});
    for (    File module : modules) {
      getLog().info(""String_Node_Str"" + module);
      String moduleName=module.getName();
      moduleName=moduleName.substring(0,moduleName.lastIndexOf('.'));
      Application moduleBuilder;
      try {
        moduleBuilder=new Application(module);
      }
 catch (      FileNotFoundException e) {
        throw new MojoFailureException(""String_Node_Str"" + module);
      }
      moduleBuilder.setConfiguration(configuration);
      moduleBuilder.setLogger(new CompileLogger(getLog()));
      File outputModule=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"" + moduleName+ ""String_Node_Str""+ project.getPackaging());
      moduleBuilder.setOutput(outputModule);
      build(moduleBuilder);
      projectHelper.attachArtifact(project,""String_Node_Str"",moduleName,outputModule);
    }
  }
}","@Override protected void tearDown() throws MojoExecutionException, MojoFailureException {
  super.tearDown();
  if (updateSecuritySandbox) {
    updateSecuritySandbox();
  }
  if (modules != null) {
    configuration.addExterns(new File[]{linkReportFile});
    for (    File module : modules) {
      getLog().info(""String_Node_Str"" + module);
      String moduleName=module.getName();
      moduleName=moduleName.substring(0,moduleName.lastIndexOf('.'));
      Application moduleBuilder;
      try {
        moduleBuilder=new Application(module);
      }
 catch (      FileNotFoundException e) {
        throw new MojoFailureException(""String_Node_Str"" + module);
      }
      moduleBuilder.setConfiguration(configuration);
      moduleBuilder.setLogger(new CompileLogger(getLog()));
      File outputModule=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"" + moduleName+ ""String_Node_Str""+ project.getPackaging());
      moduleBuilder.setOutput(outputModule);
      build(moduleBuilder);
      projectHelper.attachArtifact(project,""String_Node_Str"",moduleName,outputModule);
    }
  }
}",0.9703153988868276
10072,"/** 
 * Setup before compilation of source
 */
@SuppressWarnings(""String_Node_Str"") @Override public void setUp() throws MojoExecutionException, MojoFailureException {
  if (sourcePaths == null) {
    sourcePaths=MavenUtils.getSourcePaths(build);
    if (mergeResourceBundle != null && mergeResourceBundle) {
      List<File> paths=new ArrayList<File>(Arrays.asList(sourcePaths));
      paths.add(new File(resourceBundlePath));
      sourcePaths=paths.toArray(new File[paths.size()]);
    }
  }
  if (configFile == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        configFile=cfg;
        break;
      }
    }
  }
  if (configFile == null) {
    getLog().debug(""String_Node_Str"");
    configFile=MavenUtils.getConfigFile(build);
  }
  if (!configFile.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + configFile);
  }
 else {
    getLog().info(""String_Node_Str"" + configFile);
  }
  if (services == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        services=cfg;
        break;
      }
    }
  }
  if (rslUrls == null) {
    rslUrls=new String[]{""String_Node_Str""};
  }
  if (policyFileUrls == null) {
    policyFileUrls=new String[]{""String_Node_Str""};
  }
  if (metadata == null) {
    metadata=new Metadata();
    if (project.getDevelopers() != null && !project.getDevelopers().isEmpty()) {
      List<Developer> developers=project.getDevelopers();
      for (      Developer d : developers) {
        metadata.setCreator(d.getName());
        break;
      }
    }
    if (project.getContributors() != null && !project.getContributors().isEmpty()) {
      List<Contributor> contributors=project.getContributors();
      for (      Contributor c : contributors) {
        metadata.setContributor(c.getName());
        break;
      }
    }
    metadata.setDate(new Date());
    if (locales != null) {
      metadata.setLanguage(locales[0]);
      metadata.addDescription(locales[0],project.getDescription());
      metadata.addTitle(locales[0],project.getName());
    }
  }
  if (licenses == null) {
    licenses=getLicenses();
  }
  configuration=builder.getDefaultConfiguration();
  configure();
  compilationData=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
}","/** 
 * Setup before compilation of source
 */
@SuppressWarnings(""String_Node_Str"") @Override public void setUp() throws MojoExecutionException, MojoFailureException {
  if (sourcePaths == null) {
    sourcePaths=MavenUtils.getSourcePaths(build);
    if (mergeResourceBundle != null && mergeResourceBundle) {
      List<File> paths=new ArrayList<File>(Arrays.asList(sourcePaths));
      paths.add(new File(resourceBundlePath));
      sourcePaths=paths.toArray(new File[paths.size()]);
    }
  }
  if (configFile == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        configFile=cfg;
        break;
      }
    }
  }
  if (configFile == null) {
    getLog().debug(""String_Node_Str"");
    configFile=MavenUtils.getConfigFile(build);
  }
  if (!configFile.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + configFile);
  }
 else {
    getLog().info(""String_Node_Str"" + configFile);
  }
  if (services == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        services=cfg;
        break;
      }
    }
  }
  if (rslUrls == null) {
    rslUrls=new String[]{""String_Node_Str""};
  }
  if (policyFileUrls == null) {
    policyFileUrls=new String[]{""String_Node_Str""};
  }
  if (metadata == null) {
    metadata=new Metadata();
    if (project.getDevelopers() != null && !project.getDevelopers().isEmpty()) {
      List<Developer> developers=project.getDevelopers();
      for (      Developer d : developers) {
        metadata.setCreator(d.getName());
        break;
      }
    }
    if (project.getContributors() != null && !project.getContributors().isEmpty()) {
      List<Contributor> contributors=project.getContributors();
      for (      Contributor c : contributors) {
        metadata.setContributor(c.getName());
        break;
      }
    }
    metadata.setDate(new Date());
    if (locales != null) {
      metadata.setLanguage(locales[0]);
      metadata.addDescription(locales[0],project.getDescription());
      metadata.addTitle(locales[0],project.getName());
    }
  }
  if (licenses == null) {
    licenses=getLicenses();
  }
  configuration=builder.getDefaultConfiguration();
  configure();
  compilationData=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
  if (enableMavenResourcesResolver) {
    builder.setPathResolver(new MavenPathResolver(build.getResources()));
  }
}",0.9775367931835788
10073,"private void addFooter(List<String> args){
  if (footer != null) {
    args.add(""String_Node_Str"" + footer);
  }
}","private void addFooter(List<String> args){
  if (footer != null) {
    args.add(""String_Node_Str"");
    args.add(footer);
  }
}",0.9377593360995852
10074,"/** 
 * Get resource bundles
 * @return Array of resource bundle files
 * @throws MojoExecutionException
 */
protected File[] getResourcesBundles() throws MojoExecutionException {
  List<File> resouceBundles=new ArrayList<File>();
  for (  Artifact artifact : getDependencyArtifacts()) {
    if (!""String_Node_Str"".equals(artifact.getType())) {
      continue;
    }
    for (    String locale : locales) {
      Artifact localeArtifact=artifactFactory.createArtifactWithClassifier(artifact.getGroupId(),artifact.getArtifactId(),artifact.getVersion(),artifact.getType(),locale);
      resolveArtifact(localeArtifact,resolver,localRepository,resouceBundles);
      resouceBundles.add(localeArtifact.getFile());
    }
  }
  return resouceBundles.toArray(new File[resouceBundles.size()]);
}","/** 
 * Get resource bundles
 * @return Array of resource bundle files
 * @throws MojoExecutionException
 */
protected File[] getResourcesBundles() throws MojoExecutionException {
  List<File> resourceBundles=new ArrayList<File>();
  for (  Artifact artifact : getDependencyArtifacts()) {
    if (!""String_Node_Str"".equals(artifact.getType())) {
      continue;
    }
    for (    String locale : locales) {
      Artifact localeArtifact=artifactFactory.createArtifactWithClassifier(artifact.getGroupId(),artifact.getArtifactId(),artifact.getVersion(),artifact.getType(),locale);
      resolveArtifact(localeArtifact,resolver,localRepository,remoteRepositories);
      resourceBundles.add(localeArtifact.getFile());
    }
  }
  return resourceBundles.toArray(new File[resourceBundles.size()]);
}",0.8558786346396966
10075,"@Override protected void writeResourceBundle(String[] bundles,String locale,File localePath) throws MojoExecutionException {
  File output=new File(build.getDirectory(),project.getArtifactId() + ""String_Node_Str"" + project.getVersion()+ ""String_Node_Str""+ locale+ ""String_Node_Str"");
  String bundlesString=Arrays.toString(bundles).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  ArrayList<File> external=new ArrayList<File>();
  ArrayList<File> internal=new ArrayList<File>();
  ArrayList<File> merged=new ArrayList<File>();
  external.addAll(asList(getDependenciesPath(""String_Node_Str"")));
  external.addAll(asList(getDependenciesPath(""String_Node_Str"")));
  internal.addAll(asList(getDependenciesPath(""String_Node_Str"")));
  merged.addAll(asList(getDependenciesPath(""String_Node_Str"")));
  merged.addAll(asList(getDependenciesPath(""String_Node_Str"")));
  merged.addAll(asList(getResourcesBundles()));
  Set<String> args=new HashSet<String>();
  args.add(""String_Node_Str"" + locale);
  args.add(""String_Node_Str"" + localePath.getAbsolutePath());
  args.add(""String_Node_Str"" + bundlesString);
  args.add(""String_Node_Str"" + output.getAbsolutePath());
  args.add(""String_Node_Str"" + getFontsSnapshot().getAbsolutePath());
  args.add(""String_Node_Str"" + configFile.getAbsolutePath());
  args.add(""String_Node_Str"" + toString(external));
  args.add(""String_Node_Str"" + toString(internal));
  args.add(""String_Node_Str"" + toString(merged));
  flex2.tools.Compiler.mxmlc(args.toArray(new String[args.size()]));
  projectHelper.attachArtifact(project,""String_Node_Str"",locale,output);
}","@Override protected void writeResourceBundle(String[] bundles,String locale,File localePath) throws MojoExecutionException {
  File output=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"" + locale+ ""String_Node_Str"");
  String bundlesString=Arrays.toString(bundles).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  ArrayList<File> external=new ArrayList<File>();
  ArrayList<File> internal=new ArrayList<File>();
  ArrayList<File> merged=new ArrayList<File>();
  external.addAll(asList(getDependenciesPath(""String_Node_Str"")));
  external.addAll(asList(getDependenciesPath(""String_Node_Str"")));
  internal.addAll(asList(getDependenciesPath(""String_Node_Str"")));
  merged.addAll(asList(getDependenciesPath(""String_Node_Str"")));
  merged.addAll(asList(getDependenciesPath(""String_Node_Str"")));
  merged.addAll(asList(getResourcesBundles()));
  Set<String> args=new HashSet<String>();
  args.add(""String_Node_Str"" + locale);
  args.add(""String_Node_Str"" + localePath.getAbsolutePath());
  args.add(""String_Node_Str"" + bundlesString);
  args.add(""String_Node_Str"" + output.getAbsolutePath());
  args.add(""String_Node_Str"" + getFontsSnapshot().getAbsolutePath());
  args.add(""String_Node_Str"" + configFile.getAbsolutePath());
  args.add(""String_Node_Str"" + toString(external));
  args.add(""String_Node_Str"" + toString(internal));
  args.add(""String_Node_Str"" + toString(merged));
  flex2.tools.Compiler.mxmlc(args.toArray(new String[args.size()]));
  projectHelper.attachArtifact(project,""String_Node_Str"",locale,output);
}",0.9757722592368262
10076,"@Override protected void writeResourceBundle(String[] bundles,String locale,File localePath) throws MojoExecutionException {
  getLog().info(""String_Node_Str"" + locale);
  Library localized=new Library();
  localized.setConfiguration(configuration);
  localized.setLogger(new CompileLogger(getLog()));
  configuration.addLibraryPath(new File[]{outputFile});
  configuration.setLocale(new String[]{locale});
  configuration.setSourcePath(new File[]{localePath});
  for (  String bundle : bundles) {
    localized.addResourceBundle(bundle);
  }
  configuration.addLibraryPath(getResourcesBundles());
  File output=new File(build.getDirectory(),project.getArtifactId() + ""String_Node_Str"" + project.getVersion()+ ""String_Node_Str""+ locale+ ""String_Node_Str"");
  localized.setOutput(output);
  build(localized);
  projectHelper.attachArtifact(project,""String_Node_Str"",locale,output);
}","@Override protected void writeResourceBundle(String[] bundles,String locale,File localePath) throws MojoExecutionException {
  getLog().info(""String_Node_Str"" + locale);
  Library localized=new Library();
  localized.setConfiguration(configuration);
  localized.setLogger(new CompileLogger(getLog()));
  configuration.addLibraryPath(new File[]{outputFile});
  configuration.setLocale(new String[]{locale});
  configuration.setSourcePath(new File[]{localePath});
  for (  String bundle : bundles) {
    localized.addResourceBundle(bundle);
  }
  configuration.addLibraryPath(getResourcesBundles());
  File output=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"" + locale+ ""String_Node_Str"");
  localized.setOutput(output);
  build(localized);
  projectHelper.attachArtifact(project,""String_Node_Str"",locale,output);
}",0.8313953488372093
10077,"@SuppressWarnings(""String_Node_Str"") private boolean isCompilationRequired() throws MojoExecutionException {
  if (!quick) {
    return true;
  }
  Artifact artifact=artifactFactory.createArtifact(project.getGroupId(),project.getArtifactId(),project.getVersion(),null,project.getPackaging());
  try {
    resolver.resolve(artifact,remoteRepositories,localRepository);
  }
 catch (  AbstractArtifactResolutionException e) {
    return true;
  }
  File artifactFile=artifact.getFile();
  if (artifactFile == null || !artifactFile.exists()) {
    getLog().warn(""String_Node_Str"");
    return true;
  }
  try {
    FileUtils.copyFile(artifactFile,outputFile);
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  long lastCompiledArtifact=artifactFile.lastModified();
  Set<Artifact> dependencies=getDependencyArtifacts();
  for (  Artifact dependency : dependencies) {
    if (FileUtils.isFileNewer(dependency.getFile(),lastCompiledArtifact)) {
      getLog().warn(""String_Node_Str"" + dependency);
      return true;
    }
  }
  for (  File sourcePath : sourcePaths) {
    Collection<File> files=FileUtils.listFiles(sourcePath,new AgeFileFilter(lastCompiledArtifact,false),null);
    if (files.size() > 0) {
      getLog().warn(""String_Node_Str"");
      return true;
    }
  }
  return false;
}","@SuppressWarnings(""String_Node_Str"") private boolean isCompilationRequired() throws MojoExecutionException {
  if (!quick) {
    return true;
  }
  Artifact artifact=artifactFactory.createArtifact(project.getGroupId(),project.getArtifactId(),project.getVersion(),null,project.getPackaging());
  try {
    resolver.resolve(artifact,remoteRepositories,localRepository);
  }
 catch (  AbstractArtifactResolutionException e) {
    return true;
  }
  File artifactFile=artifact.getFile();
  if (artifactFile == null || !artifactFile.exists()) {
    getLog().warn(""String_Node_Str"");
    return true;
  }
  try {
    FileUtils.copyFile(artifactFile,outputFile);
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  long lastCompiledArtifact=artifactFile.lastModified();
  Set<Artifact> dependencies=getDependencyArtifacts();
  for (  Artifact dependency : dependencies) {
    if (FileUtils.isFileNewer(dependency.getFile(),lastCompiledArtifact)) {
      getLog().warn(""String_Node_Str"" + dependency);
      return true;
    }
  }
  List<File> paths=new ArrayList<File>(Arrays.asList(sourcePaths));
  paths.remove(new File(resourceBundlePath));
  for (  String locale : locales) {
    paths.add(MavenUtils.getLocaleResourcePath(resourceBundlePath,locale));
  }
  for (  File sourcePath : paths) {
    Collection<File> files=FileUtils.listFiles(sourcePath,new AgeFileFilter(lastCompiledArtifact,false),null);
    if (files.size() > 0) {
      getLog().warn(""String_Node_Str"");
      return true;
    }
  }
  return false;
}",0.8748271092669433
10078,"/** 
 * Setup before compilation of source
 */
@SuppressWarnings(""String_Node_Str"") @Override public void setUp() throws MojoExecutionException, MojoFailureException {
  if (sourcePaths == null) {
    sourcePaths=MavenUtils.getSourcePaths(build);
    if (mergeResourceBundle != null && mergeResourceBundle) {
      List<File> paths=new ArrayList<File>(Arrays.asList(sourcePaths));
      for (      String locale : locales) {
        File localeResourcePath=MavenUtils.getLocaleResourcePath(resourceBundlePath,locale);
        paths.add(localeResourcePath);
      }
      sourcePaths=paths.toArray(new File[paths.size()]);
    }
  }
  if (configFile == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        configFile=cfg;
        break;
      }
    }
  }
  if (configFile == null) {
    getLog().debug(""String_Node_Str"");
    configFile=MavenUtils.getConfigFile(build);
  }
  if (!configFile.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + configFile);
  }
 else {
    getLog().info(""String_Node_Str"" + configFile);
  }
  if (services == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        services=cfg;
        break;
      }
    }
  }
  if (rslUrls == null) {
    rslUrls=new String[]{""String_Node_Str""};
  }
  if (policyFileUrls == null) {
    policyFileUrls=new String[]{""String_Node_Str""};
  }
  if (metadata == null) {
    metadata=new Metadata();
    if (project.getDevelopers() != null && !project.getDevelopers().isEmpty()) {
      List<Developer> developers=project.getDevelopers();
      for (      Developer d : developers) {
        metadata.setCreator(d.getName());
        break;
      }
    }
    if (project.getContributors() != null && !project.getContributors().isEmpty()) {
      List<Contributor> contributors=project.getContributors();
      for (      Contributor c : contributors) {
        metadata.setContributor(c.getName());
        break;
      }
    }
    metadata.setDate(new Date());
    if (locales != null) {
      metadata.setLanguage(locales[0]);
      metadata.addDescription(locales[0],project.getDescription());
      metadata.addTitle(locales[0],project.getName());
    }
  }
  if (licenses == null) {
    licenses=getLicenses();
  }
  configuration=builder.getDefaultConfiguration();
  configure();
  compilationData=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
}","/** 
 * Setup before compilation of source
 */
@SuppressWarnings(""String_Node_Str"") @Override public void setUp() throws MojoExecutionException, MojoFailureException {
  if (sourcePaths == null) {
    sourcePaths=MavenUtils.getSourcePaths(build);
    if (mergeResourceBundle != null && mergeResourceBundle) {
      List<File> paths=new ArrayList<File>(Arrays.asList(sourcePaths));
      paths.add(new File(resourceBundlePath));
      sourcePaths=paths.toArray(new File[paths.size()]);
    }
  }
  if (configFile == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        configFile=cfg;
        break;
      }
    }
  }
  if (configFile == null) {
    getLog().debug(""String_Node_Str"");
    configFile=MavenUtils.getConfigFile(build);
  }
  if (!configFile.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + configFile);
  }
 else {
    getLog().info(""String_Node_Str"" + configFile);
  }
  if (services == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        services=cfg;
        break;
      }
    }
  }
  if (rslUrls == null) {
    rslUrls=new String[]{""String_Node_Str""};
  }
  if (policyFileUrls == null) {
    policyFileUrls=new String[]{""String_Node_Str""};
  }
  if (metadata == null) {
    metadata=new Metadata();
    if (project.getDevelopers() != null && !project.getDevelopers().isEmpty()) {
      List<Developer> developers=project.getDevelopers();
      for (      Developer d : developers) {
        metadata.setCreator(d.getName());
        break;
      }
    }
    if (project.getContributors() != null && !project.getContributors().isEmpty()) {
      List<Contributor> contributors=project.getContributors();
      for (      Contributor c : contributors) {
        metadata.setContributor(c.getName());
        break;
      }
    }
    metadata.setDate(new Date());
    if (locales != null) {
      metadata.setLanguage(locales[0]);
      metadata.addDescription(locales[0],project.getDescription());
      metadata.addTitle(locales[0],project.getName());
    }
  }
  if (licenses == null) {
    licenses=getLicenses();
  }
  configuration=builder.getDefaultConfiguration();
  configure();
  compilationData=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"");
}",0.9620057859209258
10079,"/** 
 * Called by Ant to execute the task.
 */
@Override protected void setUp() throws MojoExecutionException, MojoFailureException {
  swf=new File(build.getTestOutputDirectory(),""String_Node_Str"");
  reportPath=new File(build.getDirectory(),""String_Node_Str"");
  reportPath.mkdirs();
}","/** 
 * Called by Ant to execute the task.
 */
@Override protected void setUp() throws MojoExecutionException, MojoFailureException {
  swf=new File(build.getTestOutputDirectory(),""String_Node_Str"");
  reportPath=new File(build.getDirectory(),""String_Node_Str"");
  reportPath.mkdirs();
  if (updateSecuritySandbox) {
    updateSecuritySandbox();
  }
}",0.8996865203761756
10080,"private void addPackageDescriptions(List<String> args){
  if (packageDescriptions == null) {
    return;
  }
  for (  String pack : packageDescriptions.keySet()) {
    args.add(""String_Node_Str"" + pack + ""String_Node_Str""+ packageDescriptions.get(pack));
  }
}","private void addPackageDescriptions(List<String> args){
  if (packageDescriptions == null) {
    return;
  }
  for (  String pack : packageDescriptions.keySet()) {
    args.add(""String_Node_Str"");
    args.add(pack);
    args.add(packageDescriptions.get(pack));
  }
}",0.8766603415559773
10081,"@Override public void execute() throws MojoExecutionException, MojoFailureException {
  setUp();
  if (skipTests) {
    getLog().warn(""String_Node_Str"");
  }
 else   if (swf == null || !swf.exists()) {
    getLog().warn(""String_Node_Str"" + swf);
  }
 else {
    run();
    tearDown();
  }
}","@Override public void execute() throws MojoExecutionException, MojoFailureException {
  setUp();
  if (skip || skipTest) {
    getLog().info(""String_Node_Str"");
  }
 else   if (swf == null || !swf.exists()) {
    getLog().warn(""String_Node_Str"" + swf);
  }
 else {
    run();
    tearDown();
  }
}",0.9710391822827938
10082,"protected void run() throws MojoExecutionException, MojoFailureException {
  if (docSources == null || docSources.length == 0) {
    getLog().warn(""String_Node_Str"");
    return;
  }
  List<String> args=new ArrayList<String>();
  addDocSources(args);
  addDocClasses(args);
  addDocNamespaces(args);
  addSourcePath(args);
  addLibraries(args);
  addCompatibility(args);
  addPackageDescriptions(args);
  addExcludeClasses(args);
  addFooter(args);
  args.add(""String_Node_Str"" + templatesPath.getAbsolutePath());
  args.add(""String_Node_Str"" + windowTitle);
  args.add(""String_Node_Str"" + mainTitle);
  args.add(""String_Node_Str"" + leftFramesetWidth);
  args.add(""String_Node_Str"" + excludeDependencies);
  args.add(""String_Node_Str"" + fontsSnapshot.getAbsolutePath());
  if (headlessServer) {
    args.add(""String_Node_Str"");
  }
  args.add(""String_Node_Str"" + configFile.getAbsolutePath());
  args.add(""String_Node_Str"" + output.getAbsolutePath());
  getLog().info(args.toString());
  ASDoc.asdoc(args.toArray(new String[args.size()]));
  int errorCount=ThreadLocalToolkit.errorCount();
  if (errorCount > 0) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
}","protected void run() throws MojoExecutionException, MojoFailureException {
  if (docSources == null || docSources.length == 0) {
    getLog().warn(""String_Node_Str"");
    return;
  }
  List<String> args=new ArrayList<String>();
  addDocSources(args);
  addDocClasses(args);
  addDocNamespaces(args);
  addSourcePath(args);
  addLibraries(args);
  addCompatibility(args);
  addPackageDescriptions(args);
  addDefines(args);
  addExcludeClasses(args);
  addFooter(args);
  args.add(""String_Node_Str"" + templatesPath.getAbsolutePath());
  args.add(""String_Node_Str"" + windowTitle);
  args.add(""String_Node_Str"" + mainTitle);
  args.add(""String_Node_Str"" + leftFramesetWidth);
  args.add(""String_Node_Str"" + excludeDependencies);
  args.add(""String_Node_Str"" + fontsSnapshot.getAbsolutePath());
  if (headlessServer) {
    args.add(""String_Node_Str"");
  }
  args.add(""String_Node_Str"" + configFile.getAbsolutePath());
  args.add(""String_Node_Str"" + output.getAbsolutePath());
  getLog().info(args.toString());
  ASDoc.asdoc(args.toArray(new String[args.size()]));
  int errorCount=ThreadLocalToolkit.errorCount();
  if (errorCount > 0) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
}",0.9915682967959528
10083,"@SuppressWarnings(""String_Node_Str"") public static String getCompilerPluginSetting(MavenProject project,String optionName){
  String value=findCompilerPluginSettingInPlugins(project.getModel().getBuild().getPlugins(),optionName);
  if (value == null && project.getModel().getBuild().getPluginManagement() != null) {
    value=findCompilerPluginSettingInPlugins(project.getModel().getBuild().getPluginManagement().getPlugins(),optionName);
  }
  return value;
}","public static String getCompilerPluginSetting(MavenProject project,String optionName){
  Xpp3Dom value=getCompilerPluginConfiguration(project,optionName);
  return value.getValue();
}",0.4727838258164852
10084,"/** 
 * Returns a compiler plugin settings from a list of plugins .
 * @param project maven project
 * @return option value (may be null)
 */
@SuppressWarnings(""String_Node_Str"") private static String findCompilerPluginSettingInPlugins(List<Plugin> plugins,String optionName){
  String value=null;
  for (Iterator<Plugin> it=plugins.iterator(); it.hasNext(); ) {
    Plugin plugin=(Plugin)it.next();
    if (plugin.getArtifactId().equals(""String_Node_Str"")) {
      Xpp3Dom o=(Xpp3Dom)plugin.getConfiguration();
      if (o != null && o.getChild(optionName) != null) {
        value=o.getChild(optionName).getValue();
      }
      List<PluginExecution> executions=plugin.getExecutions();
      for (Iterator<PluginExecution> iter=executions.iterator(); iter.hasNext(); ) {
        PluginExecution execution=(PluginExecution)iter.next();
        o=(Xpp3Dom)execution.getConfiguration();
        if (o != null && o.getChild(optionName) != null) {
          value=o.getChild(optionName).getValue();
        }
      }
    }
  }
  return value;
}","/** 
 * Returns a compiler plugin settings from a list of plugins .
 * @param project maven project
 * @return option value (may be null)
 */
@SuppressWarnings(""String_Node_Str"") private static Xpp3Dom findCompilerPluginSettingInPlugins(List<Plugin> plugins,String optionName){
  for (Iterator<Plugin> it=plugins.iterator(); it.hasNext(); ) {
    Plugin plugin=(Plugin)it.next();
    if (plugin.getArtifactId().equals(""String_Node_Str"")) {
      Xpp3Dom o=(Xpp3Dom)plugin.getConfiguration();
      Xpp3Dom value=null;
      if (o != null && o.getChild(optionName) != null) {
        value=o.getChild(optionName);
      }
      List<PluginExecution> executions=plugin.getExecutions();
      for (Iterator<PluginExecution> iter=executions.iterator(); iter.hasNext(); ) {
        PluginExecution execution=(PluginExecution)iter.next();
        o=(Xpp3Dom)execution.getConfiguration();
        if (o != null && o.getChild(optionName) != null) {
          value=o.getChild(optionName);
        }
      }
      return value;
    }
  }
  return null;
}",0.9468136080498324
10085,"@Override protected void tearDown() throws MojoExecutionException, MojoFailureException {
  if (executionError != null) {
    throw executionError;
  }
  handleFailures();
}","@Override protected void tearDown() throws MojoExecutionException, MojoFailureException {
  if (!testFailureIgnore) {
    if (executionError != null) {
      throw executionError;
    }
    if (failures) {
      throw new MojoExecutionException(""String_Node_Str"");
    }
  }
 else {
    if (executionError != null) {
      getLog().error(executionError.getMessage(),executionError);
    }
    if (failures) {
      getLog().error(""String_Node_Str"");
    }
  }
}",0.4889589905362776
10086,"private File extractTemplate() throws MojoExecutionException {
  getLog().info(""String_Node_Str"");
  File template=new File(build.getOutputDirectory(),""String_Node_Str"");
  URL url;
  try {
    URI uri=new URI(templateURI);
    url=getUrl(uri);
  }
 catch (  Exception e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  try {
    FileUtils.copyURLToFile(url,template);
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"" + template,e);
  }
  File outputDir=new File(build.getOutputDirectory(),""String_Node_Str"");
  outputDir.mkdirs();
  try {
    ZipExtractor ze=new ZipExtractor(template);
    ze.extract(outputDir);
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  return outputDir;
}","private File extractTemplate() throws MojoExecutionException {
  getLog().info(""String_Node_Str"");
  File outputDir=new File(build.getOutputDirectory(),""String_Node_Str"");
  outputDir.mkdirs();
  URI uri;
  try {
    uri=new URI(templateURI);
  }
 catch (  URISyntaxException e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  String scheme=uri.getScheme();
  if (""String_Node_Str"".equals(scheme)) {
    copyEmbedTemplate(uri.getSchemeSpecificPart(),outputDir);
  }
 else   if (""String_Node_Str"".equals(scheme)) {
    copyZipTemplate(uri.getSchemeSpecificPart(),outputDir);
  }
 else   if (""String_Node_Str"".equals(scheme)) {
    copyFolderTemplate(uri.getSchemeSpecificPart(),outputDir);
  }
 else {
    throw new MojoExecutionException(""String_Node_Str"" + scheme);
  }
  return outputDir;
}",0.440826549780839
10087,"public void execute() throws MojoExecutionException, MojoFailureException {
  try {
    getLog().error(getClass().getResource(""String_Node_Str"").toURI().toString());
  }
 catch (  URISyntaxException e) {
    e.printStackTrace();
  }
  init();
  File templateFolder=extractTemplate();
  File targetFolder=new File(build.getDirectory());
  copyTemplates(templateFolder,targetFolder);
  copyIndex(templateFolder,targetFolder);
}","public void execute() throws MojoExecutionException, MojoFailureException {
  init();
  File templateFolder=extractTemplate();
  File targetFolder=new File(build.getDirectory());
  copyTemplates(templateFolder,targetFolder);
  copyIndex(templateFolder,targetFolder);
}",0.7734487734487735
10088,"protected void run() throws MojoExecutionException, MojoFailureException {
  if (docSources == null || docSources.length == 0) {
    getLog().warn(""String_Node_Str"");
    return;
  }
  List<String> args=new ArrayList<String>();
  addDocSources(args);
  addDocClasses(args);
  addDocNamespaces(args);
  addSourcePath(args);
  addLibraries(args);
  addCompatibility(args);
  addPackageDescriptions(args);
  addExcludeClasses(args);
  addFooter(args);
  args.add(""String_Node_Str"" + templatesPath.getAbsolutePath());
  args.add(""String_Node_Str"" + windowTitle);
  args.add(""String_Node_Str"" + mainTitle);
  args.add(""String_Node_Str"" + leftFramesetWidth);
  args.add(""String_Node_Str"" + excludeDependencies);
  args.add(""String_Node_Str"" + fontsSnapshot.getAbsolutePath());
  args.add(""String_Node_Str"" + configFile.getAbsolutePath());
  args.add(""String_Node_Str"" + output.getAbsolutePath());
  getLog().info(args.toString());
  ASDoc.asdoc(args.toArray(new String[args.size()]));
  int errorCount=ThreadLocalToolkit.errorCount();
  if (errorCount > 0) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
}","protected void run() throws MojoExecutionException, MojoFailureException {
  if (docSources == null || docSources.length == 0) {
    getLog().warn(""String_Node_Str"");
    return;
  }
  List<String> args=new ArrayList<String>();
  addDocSources(args);
  addDocClasses(args);
  addDocNamespaces(args);
  addSourcePath(args);
  addLibraries(args);
  addCompatibility(args);
  addPackageDescriptions(args);
  addExcludeClasses(args);
  addFooter(args);
  args.add(""String_Node_Str"" + templatesPath.getAbsolutePath());
  args.add(""String_Node_Str"" + windowTitle);
  args.add(""String_Node_Str"" + mainTitle);
  args.add(""String_Node_Str"" + leftFramesetWidth);
  args.add(""String_Node_Str"" + excludeDependencies);
  args.add(""String_Node_Str"" + fontsSnapshot.getAbsolutePath());
  if (headlessServer) {
    args.add(""String_Node_Str"");
  }
  args.add(""String_Node_Str"" + configFile.getAbsolutePath());
  args.add(""String_Node_Str"" + output.getAbsolutePath());
  getLog().info(args.toString());
  ASDoc.asdoc(args.toArray(new String[args.size()]));
  int errorCount=ThreadLocalToolkit.errorCount();
  if (errorCount > 0) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
}",0.973374072457442
10089,"private void makeHelperExecutable(File templates) throws MojoExecutionException {
  if (!MavenUtils.isWindows()) {
    Runtime runtime=Runtime.getRuntime();
    String statement=String.format(""String_Node_Str"",templates.getAbsolutePath(),""String_Node_Str"" + (MavenUtils.isLinux() ? ""String_Node_Str"" : ""String_Node_Str""));
    try {
      Process p=runtime.exec(statement);
      if (0 != p.waitFor()) {
        throw new MojoExecutionException(String.format(""String_Node_Str""));
      }
    }
 catch (    Exception e) {
      throw new MojoExecutionException(String.format(""String_Node_Str"",statement));
    }
  }
}","private void makeHelperExecutable(File templates) throws MojoExecutionException {
  if (!MavenUtils.isWindows()) {
    Runtime runtime=Runtime.getRuntime();
    String pathname=String.format(""String_Node_Str"",templates.getAbsolutePath(),""String_Node_Str"" + (MavenUtils.isLinux() ? ""String_Node_Str"" : ""String_Node_Str""));
    String[] statements=new String[]{""String_Node_Str"",""String_Node_Str"",pathname};
    try {
      Process p=runtime.exec(statements);
      int result=p.waitFor();
      if (0 != result) {
        throw new MojoExecutionException(String.format(""String_Node_Str"",Arrays.asList(statements),result));
      }
    }
 catch (    Exception e) {
      throw new MojoExecutionException(String.format(""String_Node_Str"",Arrays.asList(statements)));
    }
  }
}",0.6762589928057554
10090,"@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  builder=new Library();
  if (directory != null) {
    builder.setDirectory(directory);
  }
  super.setUp();
  builder.setOutput(outputFile);
  if (checkNullOrEmpty(includeClasses) && checkNullOrEmpty(includeFiles) && checkNullOrEmpty(includeNamespaces)&& checkNullOrEmpty(includeResourceBundles)&& checkNullOrEmpty(includeResourceBundlesArtifact)&& checkNullOrEmpty(includeSources)&& checkNullOrEmpty(includeStylesheet)) {
    getLog().warn(""String_Node_Str"");
    includeSources=sourcePaths.clone();
  }
  if (!checkNullOrEmpty(includeClasses)) {
    for (    String asClass : includeClasses) {
      builder.addComponent(asClass);
    }
  }
  if (!checkNullOrEmpty(includeFiles)) {
    for (    File file : includeFiles) {
      if (file == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      if (!file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
      }
      builder.addArchiveFile(file.getName(),file);
    }
  }
  if (!checkNullOrEmpty(includeNamespaces)) {
    for (    String uri : includeNamespaces) {
      try {
        builder.addComponent(new URI(uri));
      }
 catch (      URISyntaxException e) {
        throw new MojoExecutionException(""String_Node_Str"" + uri,e);
      }
    }
  }
  if (!checkNullOrEmpty(includeResourceBundles)) {
    for (    String rb : includeResourceBundles) {
      builder.addResourceBundle(rb);
    }
  }
  if (!checkNullOrEmpty(includeResourceBundlesArtifact)) {
    for (    MavenArtifact mvnArtifact : includeResourceBundlesArtifact) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      String bundleFile;
      try {
        bundleFile=FileUtils.readFileToString(artifact.getFile());
      }
 catch (      IOException e) {
        throw new MojoExecutionException(""String_Node_Str"" + artifact,e);
      }
      String[] bundles=bundleFile.split(""String_Node_Str"");
      for (      String bundle : bundles) {
        builder.addResourceBundle(bundle);
      }
    }
  }
  if (!checkNullOrEmpty(includeSources)) {
    for (    File file : includeSources) {
      if (file == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      if (!file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
      }
      builder.addComponent(file);
    }
  }
  if (!checkNullOrEmpty(includeStylesheet)) {
    for (    Stylesheet sheet : includeStylesheet) {
      if (!sheet.getPath().exists()) {
        throw new MojoExecutionException(""String_Node_Str"" + sheet.getPath());
      }
      builder.addStyleSheet(sheet.getName(),sheet.getPath());
    }
  }
  configuration.enableDigestComputation(computeDigest);
}","@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  builder=new Library();
  if (directory != null) {
    builder.setDirectory(directory);
  }
  super.setUp();
  builder.setOutput(outputFile);
  if (checkNullOrEmpty(includeClasses) && checkNullOrEmpty(includeFiles) && checkNullOrEmpty(includeNamespaces)&& checkNullOrEmpty(includeResourceBundles)&& checkNullOrEmpty(includeResourceBundlesArtifact)&& checkNullOrEmpty(includeSources)&& checkNullOrEmpty(includeStylesheet)) {
    getLog().warn(""String_Node_Str"");
    includeSources=sourcePaths.clone();
  }
  if (!checkNullOrEmpty(includeClasses)) {
    for (    String asClass : includeClasses) {
      builder.addComponent(asClass);
    }
  }
  if (!checkNullOrEmpty(includeFiles)) {
    for (    File file : includeFiles) {
      if (file == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      if (!file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
      }
      builder.addArchiveFile(file.getName(),file);
    }
  }
  if (!checkNullOrEmpty(includeNamespaces)) {
    for (    String uri : includeNamespaces) {
      try {
        builder.addComponent(new URI(uri));
      }
 catch (      URISyntaxException e) {
        throw new MojoExecutionException(""String_Node_Str"" + uri,e);
      }
    }
  }
  if (!checkNullOrEmpty(includeResourceBundles)) {
    for (    String rb : includeResourceBundles) {
      builder.addResourceBundle(rb);
    }
  }
  if (!checkNullOrEmpty(includeResourceBundlesArtifact)) {
    for (    MavenArtifact mvnArtifact : includeResourceBundlesArtifact) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      String bundleFile;
      try {
        bundleFile=FileUtils.readFileToString(artifact.getFile());
      }
 catch (      IOException e) {
        throw new MojoExecutionException(""String_Node_Str"" + artifact,e);
      }
      String[] bundles=bundleFile.split(""String_Node_Str"");
      for (      String bundle : bundles) {
        builder.addResourceBundle(bundle);
      }
    }
  }
  if (!checkNullOrEmpty(includeSources)) {
    for (    File file : includeSources) {
      if (file == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      if (!file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
      }
      builder.addComponent(file);
    }
  }
  if (!checkNullOrEmpty(includeStylesheet)) {
    for (    Stylesheet sheet : includeStylesheet) {
      if (!sheet.getPath().exists()) {
        throw new MojoExecutionException(""String_Node_Str"" + sheet.getPath());
      }
      builder.addStyleSheet(sheet.getName(),sheet.getPath());
    }
  }
  configuration.enableDigestComputation(computeDigest);
  builder.addArchiveFile(""String_Node_Str"" + project.getGroupId() + ""String_Node_Str""+ project.getArtifactId()+ ""String_Node_Str"",new File(project.getBasedir(),""String_Node_Str""));
}",0.9709330335635136
10091,"/** 
 * Get dependency artifacts for given scope
 * @param scope for which to get artifacts
 * @return List of artifacts
 * @throws MojoExecutionException
 */
protected List<Artifact> getDependencyArtifacts(String scope) throws MojoExecutionException {
  if (scope == null)   return null;
  List<Artifact> artifacts=new ArrayList<Artifact>();
  for (  Artifact artifact : getDependencyArtifacts()) {
    if (""String_Node_Str"".equals(artifact.getType()) && scope.equals(artifact.getScope())) {
      artifacts.add(artifact);
    }
  }
  return artifacts;
}","/** 
 * Get dependency artifacts for given scope
 * @param scope for which to get artifacts
 * @return List of artifacts
 * @throws MojoExecutionException
 */
protected List<Artifact> getDependencyArtifacts(String... scopes) throws MojoExecutionException {
  if (scopes == null)   return null;
  if (scopes.length == 0) {
    return new ArrayList<Artifact>();
  }
  List<String> scopesList=Arrays.asList(scopes);
  List<Artifact> artifacts=new ArrayList<Artifact>();
  for (  Artifact artifact : getDependencyArtifacts()) {
    if (""String_Node_Str"".equals(artifact.getType()) && scopesList.contains(artifact.getScope())) {
      artifacts.add(artifact);
    }
  }
  return artifacts;
}",0.8751007252215954
10092,"protected void run() throws MojoExecutionException, MojoFailureException {
  if (docSources == null || docSources.length == 0) {
    getLog().warn(""String_Node_Str"");
    return;
  }
  List<String> args=new ArrayList<String>();
  addDocSources(args);
  addDocClasses(args);
  addDocNamespaces(args);
  addSourcePath(args);
  addLibraries(args);
  addCompatibility(args);
  addPackageDescriptions(args);
  addExcludeClasses(args);
  addFooter(args);
  args.add(""String_Node_Str"" + templatesPath.getAbsolutePath());
  args.add(""String_Node_Str"" + windowTitle);
  args.add(""String_Node_Str"" + mainTitle);
  args.add(""String_Node_Str"" + leftFramesetWidth);
  args.add(""String_Node_Str"" + excludeDependencies);
  args.add(""String_Node_Str"" + fontsSnapshot.getAbsolutePath());
  args.add(""String_Node_Str"" + configFile.getAbsolutePath());
  args.add(""String_Node_Str"" + output.getAbsolutePath());
  getLog().info(args.toString());
  ASDoc.asdoc(args.toArray(new String[args.size()]));
}","protected void run() throws MojoExecutionException, MojoFailureException {
  if (docSources == null || docSources.length == 0) {
    getLog().warn(""String_Node_Str"");
    return;
  }
  List<String> args=new ArrayList<String>();
  addDocSources(args);
  addDocClasses(args);
  addDocNamespaces(args);
  addSourcePath(args);
  addLibraries(args);
  addCompatibility(args);
  addPackageDescriptions(args);
  addExcludeClasses(args);
  addFooter(args);
  args.add(""String_Node_Str"" + templatesPath.getAbsolutePath());
  args.add(""String_Node_Str"" + windowTitle);
  args.add(""String_Node_Str"" + mainTitle);
  args.add(""String_Node_Str"" + leftFramesetWidth);
  args.add(""String_Node_Str"" + excludeDependencies);
  args.add(""String_Node_Str"" + fontsSnapshot.getAbsolutePath());
  args.add(""String_Node_Str"" + configFile.getAbsolutePath());
  args.add(""String_Node_Str"" + output.getAbsolutePath());
  getLog().info(args.toString());
  ASDoc.asdoc(args.toArray(new String[args.size()]));
  int errorCount=ThreadLocalToolkit.errorCount();
  if (errorCount > 0) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
}",0.935560859188544
10093,"/** 
 * Setup builder configuration
 * @throws MojoExecutionException
 */
protected void configure() throws MojoExecutionException {
  configuration.setExternalLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.includeLibraries(getDependenciesPath(""String_Node_Str""));
  configuration.setLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  if (mergeResourceBundle == null || mergeResourceBundle) {
    configuration.addLibraryPath(getResourcesBundles());
  }
  resolveRuntimeLibraries(""String_Node_Str"",""String_Node_Str"");
  resolveRuntimeLibraries(""String_Node_Str"",""String_Node_Str"");
  configuration.setTheme(getDependenciesPath(""String_Node_Str""));
  configuration.enableAccessibility(accessible);
  configuration.allowSourcePathOverlap(allowSourcePathOverlap);
  configuration.useActionScript3(as3);
  configuration.enableDebugging(debug,debugPassword);
  configuration.useECMAScript(es);
  if (fonts != null) {
    configuration.enableAdvancedAntiAliasing(fonts.isAdvancedAntiAliasing());
    configuration.enableFlashType(fonts.isFlashType());
    configuration.setFontManagers(fonts.getManagers());
    configuration.setMaximumCachedFonts(fonts.getMaxCachedFonts());
    configuration.setMaximumGlyphsPerFace(fonts.getMaxGlyphsPerFace());
    if (fonts.getLanguages() != null && !fonts.getLanguages().isEmpty()) {
      for (      String language : fonts.getLanguages().keySet()) {
        configuration.setFontLanguageRange(language,fonts.getLanguages().get(language));
      }
    }
  }
  File fontsSnapshot=getFontsSnapshot();
  if (fontsSnapshot == null || !fontsSnapshot.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + fontsSnapshot);
  }
  configuration.setLocalFontSnapshot(fontsSnapshot);
  configuration.setActionScriptMetadata(keepAs3Metadatas);
  configuration.keepCompilerGeneratedActionScript(keepGeneratedActionscript);
  if (licenses != null) {
    for (    String licenseName : licenses.keySet()) {
      String key=licenses.get(licenseName);
      configuration.setLicense(licenseName,key);
    }
  }
  if (defines != null) {
    for (    String defineName : defines.keySet()) {
      String value=defines.get(defineName);
      getLog().info(""String_Node_Str"" + defineName + ""String_Node_Str""+ value);
      configuration.addDefineDirective(defineName,value);
    }
  }
  if (mergeResourceBundle == null || mergeResourceBundle) {
    configuration.setLocale(locales);
  }
 else {
    configuration.setLocale(new String[0]);
  }
  if (namespaces != null) {
    for (    Namespace namespace : namespaces) {
      configuration.setComponentManifest(namespace.getUri(),namespace.getManifest());
    }
  }
  configuration.optimize(optimize);
  if (this.warnigs != null) {
    configureWarnings(configuration);
  }
  configuration.setSourcePath(sourcePaths);
  configuration.enableStrictChecking(strict);
  configuration.useNetwork(useNetwork);
  configuration.enableVerboseStacktraces(verboseStacktraces);
  if (contextRoot != null) {
    configuration.setContextRoot(contextRoot);
  }
  configuration.keepLinkReport(linkReport);
  configuration.keepConfigurationReport(configurationReport);
  configuration.setConfiguration(configFile);
  configuration.setServiceConfiguration(services);
  if (loadExterns != null) {
    List<File> externsFiles=new ArrayList<File>();
    for (    MavenArtifact mvnArtifact : loadExterns) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      externsFiles.add(artifact.getFile());
    }
    configuration.setExterns(externsFiles.toArray(new File[externsFiles.size()]));
  }
  if (rawMetadata != null) {
    configuration.setSWFMetaData(rawMetadata);
  }
  if (metadata != null) {
    if (metadata.getContributors() != null) {
      for (      String contributor : metadata.getContributors()) {
        configuration.setSWFMetaData(Configuration.CONTRIBUTOR,contributor);
      }
    }
    if (metadata.getCreators() != null) {
      for (      String creator : metadata.getCreators()) {
        configuration.setSWFMetaData(Configuration.CREATOR,creator);
      }
    }
    if (metadata.getDate() != null) {
      configuration.setSWFMetaData(Configuration.DATE,metadata.getDate());
    }
    if (metadata.getDescription() != null) {
      configuration.setSWFMetaData(Configuration.DESCRIPTION,metadata.getDescription());
    }
    if (metadata.getLanguages() != null) {
      configuration.setSWFMetaData(Configuration.LANGUAGE,metadata.getLanguages());
    }
  }
  if (compatibilityVersion != null) {
    if (!COMPATIBILITY_2_0_0.equals(compatibilityVersion) && !COMPATIBILITY_2_0_1.equals(compatibilityVersion)) {
      throw new MojoExecutionException(""String_Node_Str"" + compatibilityVersion);
    }
 else     if (COMPATIBILITY_2_0_0.equals(compatibilityVersion)) {
      configuration.setCompatibilityVersion(2,0,0);
    }
 else     if (COMPATIBILITY_2_0_1.equals(compatibilityVersion)) {
      configuration.setCompatibilityVersion(2,0,1);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  configuration.setActionScriptFileEncoding(encoding);
  if (targetPlayer != null) {
    String[] nodes=targetPlayer.split(""String_Node_Str"");
    if (nodes.length != 3) {
      throw new MojoExecutionException(""String_Node_Str"" + targetPlayer);
    }
    int[] versions=new int[nodes.length];
    for (int i=0; i < nodes.length; i++) {
      try {
        versions[i]=Integer.parseInt(nodes[i]);
      }
 catch (      NumberFormatException e) {
        throw new MojoExecutionException(""String_Node_Str"" + targetPlayer);
      }
    }
    if (versions[0] < 9) {
      throw new MojoExecutionException(""String_Node_Str"" + targetPlayer);
    }
    configuration.setTargetPlayer(versions[0],versions[1],versions[2]);
  }
  if (defaultsCss != null)   configuration.setDefaultCSS(defaultsCss);
  configuration.setDefaultBackgroundColor(Integer.parseInt(defaultBackgroundColor,16));
  configuration.setDefaultFrameRate(defaultFrameRate);
  configuration.setDefaultScriptLimits(scriptMaxRecursionDepth,scriptMaxExecutionTime);
  configuration.setDefaultSize(defaultSizeWidth,defaultSizeHeight);
  if (externs != null && externs.length > 0) {
    configuration.setExterns(externs);
  }
  if (frames != null && frames.length > 0) {
    for (    FrameLabel frame : frames) {
      configuration.setFrameLabel(frame.getLabel(),frame.getClassNames());
    }
  }
  if (includes != null && includes.length > 0) {
    configuration.setIncludes(includes);
  }
  configuration.useHeadlessServer(headlessServer);
  configuration.keepAllTypeSelectors(keepAllTypeSelectors);
  configuration.useResourceBundleMetaData(useResourceBundleMetadata);
  configuration.enableDigestVerification(verifyDigests);
}","/** 
 * Setup builder configuration
 * @throws MojoExecutionException
 */
protected void configure() throws MojoExecutionException {
  configuration.setExternalLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.includeLibraries(getDependenciesPath(""String_Node_Str""));
  configuration.setLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  if (mergeResourceBundle == null || mergeResourceBundle) {
    configuration.addLibraryPath(getResourcesBundles());
  }
  resolveRuntimeLibraries(""String_Node_Str"",""String_Node_Str"");
  resolveRuntimeLibraries(""String_Node_Str"",""String_Node_Str"");
  configuration.setTheme(getDependenciesPath(""String_Node_Str""));
  configuration.enableAccessibility(accessible);
  configuration.allowSourcePathOverlap(allowSourcePathOverlap);
  configuration.useActionScript3(as3);
  configuration.enableDebugging(debug,debugPassword);
  configuration.useECMAScript(es);
  if (fonts != null) {
    configuration.enableAdvancedAntiAliasing(fonts.isAdvancedAntiAliasing());
    configuration.enableFlashType(fonts.isFlashType());
    configuration.setFontManagers(fonts.getManagers());
    configuration.setMaximumCachedFonts(fonts.getMaxCachedFonts());
    configuration.setMaximumGlyphsPerFace(fonts.getMaxGlyphsPerFace());
    if (fonts.getLanguages() != null && !fonts.getLanguages().isEmpty()) {
      for (      String language : fonts.getLanguages().keySet()) {
        configuration.setFontLanguageRange(language,fonts.getLanguages().get(language));
      }
    }
  }
  File fontsSnapshot=getFontsSnapshot();
  if (fontsSnapshot == null || !fontsSnapshot.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + fontsSnapshot);
  }
  configuration.setLocalFontSnapshot(fontsSnapshot);
  configuration.setActionScriptMetadata(keepAs3Metadatas);
  configuration.keepCompilerGeneratedActionScript(keepGeneratedActionscript);
  if (licenses != null) {
    for (    String licenseName : licenses.keySet()) {
      String key=licenses.get(licenseName);
      configuration.setLicense(licenseName,key);
    }
  }
  if (defines != null) {
    for (    String defineName : defines.keySet()) {
      String value=defines.get(defineName);
      getLog().info(""String_Node_Str"" + defineName + ""String_Node_Str""+ value);
      configuration.addDefineDirective(defineName,value);
    }
  }
  if (mergeResourceBundle == null || mergeResourceBundle) {
    configuration.setLocale(locales);
  }
 else {
    configuration.setLocale(new String[0]);
  }
  if (namespaces != null) {
    for (    Namespace namespace : namespaces) {
      configuration.setComponentManifest(namespace.getUri(),namespace.getManifest());
    }
  }
  configuration.optimize(optimize);
  if (this.warnigs != null) {
    configureWarnings(configuration);
  }
  configuration.setSourcePath(sourcePaths);
  configuration.enableStrictChecking(strict);
  configuration.useNetwork(useNetwork);
  configuration.enableVerboseStacktraces(verboseStacktraces);
  if (contextRoot != null) {
    configuration.setContextRoot(contextRoot);
  }
  configuration.keepLinkReport(linkReport);
  configuration.keepConfigurationReport(configurationReport);
  configuration.setConfiguration(configFile);
  configuration.setServiceConfiguration(services);
  if (loadExterns != null) {
    List<File> externsFiles=new ArrayList<File>();
    for (    MavenArtifact mvnArtifact : loadExterns) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      externsFiles.add(artifact.getFile());
    }
    configuration.setExterns(externsFiles.toArray(new File[externsFiles.size()]));
  }
  if (rawMetadata != null) {
    configuration.setSWFMetaData(rawMetadata);
  }
  if (metadata != null) {
    if (metadata.getContributor() != null) {
      configuration.setSWFMetaData(Configuration.CONTRIBUTOR,metadata.getContributor());
    }
    if (metadata.getCreator() != null) {
      configuration.setSWFMetaData(Configuration.CREATOR,metadata.getCreator());
    }
    if (metadata.getDate() != null) {
      configuration.setSWFMetaData(Configuration.DATE,metadata.getDate());
    }
    if (metadata.getDescriptions() != null) {
      configuration.setSWFMetaData(Configuration.DESCRIPTION,metadata.getDescriptions());
    }
    if (metadata.getTitles() != null) {
      configuration.setSWFMetaData(Configuration.TITLE,metadata.getTitles());
    }
    if (metadata.getLanguage() != null) {
      configuration.setSWFMetaData(Configuration.LANGUAGE,metadata.getLanguage());
    }
  }
  if (compatibilityVersion != null) {
    if (!COMPATIBILITY_2_0_0.equals(compatibilityVersion) && !COMPATIBILITY_2_0_1.equals(compatibilityVersion)) {
      throw new MojoExecutionException(""String_Node_Str"" + compatibilityVersion);
    }
 else     if (COMPATIBILITY_2_0_0.equals(compatibilityVersion)) {
      configuration.setCompatibilityVersion(2,0,0);
    }
 else     if (COMPATIBILITY_2_0_1.equals(compatibilityVersion)) {
      configuration.setCompatibilityVersion(2,0,1);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  configuration.setActionScriptFileEncoding(encoding);
  if (targetPlayer != null) {
    String[] nodes=targetPlayer.split(""String_Node_Str"");
    if (nodes.length != 3) {
      throw new MojoExecutionException(""String_Node_Str"" + targetPlayer);
    }
    int[] versions=new int[nodes.length];
    for (int i=0; i < nodes.length; i++) {
      try {
        versions[i]=Integer.parseInt(nodes[i]);
      }
 catch (      NumberFormatException e) {
        throw new MojoExecutionException(""String_Node_Str"" + targetPlayer);
      }
    }
    if (versions[0] < 9) {
      throw new MojoExecutionException(""String_Node_Str"" + targetPlayer);
    }
    configuration.setTargetPlayer(versions[0],versions[1],versions[2]);
  }
  if (defaultsCss != null)   configuration.setDefaultCSS(defaultsCss);
  configuration.setDefaultBackgroundColor(Integer.parseInt(defaultBackgroundColor,16));
  configuration.setDefaultFrameRate(defaultFrameRate);
  configuration.setDefaultScriptLimits(scriptMaxRecursionDepth,scriptMaxExecutionTime);
  configuration.setDefaultSize(defaultSizeWidth,defaultSizeHeight);
  if (externs != null && externs.length > 0) {
    configuration.setExterns(externs);
  }
  if (frames != null && frames.length > 0) {
    for (    FrameLabel frame : frames) {
      configuration.setFrameLabel(frame.getLabel(),frame.getClassNames());
    }
  }
  if (includes != null && includes.length > 0) {
    configuration.setIncludes(includes);
  }
  configuration.useHeadlessServer(headlessServer);
  configuration.keepAllTypeSelectors(keepAllTypeSelectors);
  configuration.useResourceBundleMetaData(useResourceBundleMetadata);
  configuration.enableDigestVerification(verifyDigests);
}",0.9752857142857144
10094,"/** 
 * Setup before compilation of source
 */
@SuppressWarnings(""String_Node_Str"") @Override public void setUp() throws MojoExecutionException, MojoFailureException {
  if (locales == null) {
    locales=new String[]{""String_Node_Str""};
  }
  if (sourcePaths == null) {
    sourcePaths=MavenUtils.getSourcePaths(build);
    if (mergeResourceBundle != null && mergeResourceBundle) {
      List<File> paths=new ArrayList<File>(Arrays.asList(sourcePaths));
      for (      String locale : locales) {
        File localeResourcePath=MavenUtils.getLocaleResourcePath(resourceBundlePath,locale);
        paths.add(localeResourcePath);
      }
      sourcePaths=paths.toArray(new File[paths.size()]);
    }
  }
  if (outputFile == null) {
    if (output == null) {
      outputFile=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"" + project.getPackaging());
    }
 else {
      outputFile=new File(build.getDirectory(),output);
    }
  }
  if (configFile == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        configFile=cfg;
        break;
      }
    }
  }
  if (configFile == null) {
    getLog().debug(""String_Node_Str"");
    configFile=MavenUtils.getConfigFile(build);
  }
  if (!configFile.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + configFile);
  }
 else {
    getLog().info(""String_Node_Str"" + configFile);
  }
  if (services == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        services=cfg;
        break;
      }
    }
  }
  if (rslUrls == null) {
    rslUrls=new String[]{""String_Node_Str""};
  }
  if (policyFileUrls == null) {
    policyFileUrls=new String[]{""String_Node_Str""};
  }
  if (metadata == null) {
    metadata=new Metadata();
    if (project.getContributors() != null && !project.getContributors().isEmpty()) {
      List<Contributor> contributors=project.getContributors();
      for (      Contributor c : contributors) {
        metadata.addContributor(c.getName());
      }
      metadata.addCreator(contributors.get(0).getName());
    }
    metadata.setDate(DateFormat.getDateInstance().format(new Date()));
    metadata.setDescription(project.getDescription());
    metadata.setLanguages(Arrays.asList(locales));
    metadata.setTitle(project.getName());
  }
  configuration=builder.getDefaultConfiguration();
  configure();
  compilationData=new File(build.getDirectory(),project.getArtifactId() + ""String_Node_Str"" + project.getVersion()+ ""String_Node_Str"");
}","/** 
 * Setup before compilation of source
 */
@SuppressWarnings(""String_Node_Str"") @Override public void setUp() throws MojoExecutionException, MojoFailureException {
  if (locales == null || locales.length == 0) {
    locales=new String[]{""String_Node_Str""};
  }
  if (sourcePaths == null) {
    sourcePaths=MavenUtils.getSourcePaths(build);
    if (mergeResourceBundle != null && mergeResourceBundle) {
      List<File> paths=new ArrayList<File>(Arrays.asList(sourcePaths));
      for (      String locale : locales) {
        File localeResourcePath=MavenUtils.getLocaleResourcePath(resourceBundlePath,locale);
        paths.add(localeResourcePath);
      }
      sourcePaths=paths.toArray(new File[paths.size()]);
    }
  }
  if (outputFile == null) {
    if (output == null) {
      outputFile=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"" + project.getPackaging());
    }
 else {
      outputFile=new File(build.getDirectory(),output);
    }
  }
  if (configFile == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        configFile=cfg;
        break;
      }
    }
  }
  if (configFile == null) {
    getLog().debug(""String_Node_Str"");
    configFile=MavenUtils.getConfigFile(build);
  }
  if (!configFile.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + configFile);
  }
 else {
    getLog().info(""String_Node_Str"" + configFile);
  }
  if (services == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),""String_Node_Str"");
      if (cfg.exists()) {
        services=cfg;
        break;
      }
    }
  }
  if (rslUrls == null) {
    rslUrls=new String[]{""String_Node_Str""};
  }
  if (policyFileUrls == null) {
    policyFileUrls=new String[]{""String_Node_Str""};
  }
  if (metadata == null) {
    metadata=new Metadata();
    if (project.getDevelopers() != null && !project.getDevelopers().isEmpty()) {
      List<Developer> developers=project.getDevelopers();
      for (      Developer d : developers) {
        metadata.setCreator(developers.get(0).getName());
        break;
      }
    }
    if (project.getContributors() != null && !project.getContributors().isEmpty()) {
      List<Contributor> contributors=project.getContributors();
      for (      Contributor c : contributors) {
        metadata.setContributor(c.getName());
        break;
      }
    }
    metadata.setDate(DateFormat.getDateInstance().format(new Date()));
    metadata.setLanguage(locales[0]);
    metadata.addDescription(locales[0],project.getDescription());
    metadata.addTitle(locales[0],project.getName());
  }
  if (licenses == null) {
    licenses=getLicenses();
  }
  configuration=builder.getDefaultConfiguration();
  configure();
  compilationData=new File(build.getDirectory(),project.getArtifactId() + ""String_Node_Str"" + project.getVersion()+ ""String_Node_Str"");
}",0.8524251805985552
10095,"@Override protected void tearDown() throws MojoExecutionException, MojoFailureException {
  super.tearDown();
  if (modules != null) {
    LibraryCache libCache=builder.getSwcCache();
    configuration.addExterns(new File[]{linkReportFile});
    for (    File module : modules) {
      getLog().info(""String_Node_Str"" + module);
      String moduleName=module.getName();
      moduleName=moduleName.substring(0,moduleName.lastIndexOf('.'));
      Application moduleBuilder;
      try {
        moduleBuilder=new Application(module);
      }
 catch (      FileNotFoundException e) {
        throw new MojoFailureException(""String_Node_Str"" + module);
      }
      moduleBuilder.setConfiguration(configuration);
      moduleBuilder.setLogger(new CompileLogger(getLog()));
      if (libCache != null) {
        moduleBuilder.setSwcCache(libCache);
      }
      File outputModule=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"" + moduleName+ ""String_Node_Str""+ project.getPackaging());
      moduleBuilder.setOutput(outputModule);
      build(moduleBuilder);
      projectHelper.attachArtifact(project,""String_Node_Str"",moduleName,outputModule);
    }
  }
}","@Override protected void tearDown() throws MojoExecutionException, MojoFailureException {
  super.tearDown();
  if (modules != null) {
    configuration.addExterns(new File[]{linkReportFile});
    for (    File module : modules) {
      getLog().info(""String_Node_Str"" + module);
      String moduleName=module.getName();
      moduleName=moduleName.substring(0,moduleName.lastIndexOf('.'));
      Application moduleBuilder;
      try {
        moduleBuilder=new Application(module);
      }
 catch (      FileNotFoundException e) {
        throw new MojoFailureException(""String_Node_Str"" + module);
      }
      moduleBuilder.setConfiguration(configuration);
      moduleBuilder.setLogger(new CompileLogger(getLog()));
      File outputModule=new File(build.getDirectory(),build.getFinalName() + ""String_Node_Str"" + moduleName+ ""String_Node_Str""+ project.getPackaging());
      moduleBuilder.setOutput(outputModule);
      build(moduleBuilder);
      projectHelper.attachArtifact(project,""String_Node_Str"",moduleName,outputModule);
    }
  }
}",0.9406474820143884
10096,"@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  builder=new Library();
  if (directory != null) {
    builder.setDirectory(directory);
  }
  super.setUp();
  builder.setOutput(outputFile);
  if (checkNullOrEmpty(includeClasses) && checkNullOrEmpty(includeFiles) && checkNullOrEmpty(includeNamespaces)&& checkNullOrEmpty(includeResourceBundles)&& checkNullOrEmpty(includeResourceBundlesArtifact)&& checkNullOrEmpty(includeSources)&& checkNullOrEmpty(includeStylesheet)) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
  if (!checkNullOrEmpty(includeClasses)) {
    for (    String asClass : includeClasses) {
      builder.addComponent(asClass);
    }
  }
  if (!checkNullOrEmpty(includeFiles)) {
    for (    File file : includeFiles) {
      if (file == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      if (!file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
      }
      builder.addArchiveFile(file.getName(),file);
    }
  }
  if (!checkNullOrEmpty(includeNamespaces)) {
    for (    String uri : includeNamespaces) {
      try {
        builder.addComponent(new URI(uri));
      }
 catch (      URISyntaxException e) {
        throw new MojoExecutionException(""String_Node_Str"" + uri,e);
      }
    }
  }
  if (!checkNullOrEmpty(includeResourceBundles)) {
    for (    String rb : includeResourceBundles) {
      builder.addResourceBundle(rb);
    }
  }
  if (!checkNullOrEmpty(includeResourceBundlesArtifact)) {
    for (    MavenArtifact mvnArtifact : includeResourceBundlesArtifact) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      String bundleFile;
      try {
        bundleFile=FileUtils.readFileToString(artifact.getFile());
      }
 catch (      IOException e) {
        throw new MojoExecutionException(""String_Node_Str"" + artifact,e);
      }
      String[] bundles=bundleFile.split(""String_Node_Str"");
      for (      String bundle : bundles) {
        builder.addResourceBundle(bundle);
      }
    }
  }
  if (!checkNullOrEmpty(includeSources)) {
    for (    File file : includeSources) {
      if (file == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      if (!file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
      }
      builder.addComponent(file);
    }
  }
  if (checkNullOrEmpty(includeStylesheet)) {
    for (    Stylesheet sheet : includeStylesheet) {
      if (!sheet.getPath().exists()) {
        throw new MojoExecutionException(""String_Node_Str"" + sheet.getPath());
      }
      builder.addStyleSheet(sheet.getName(),sheet.getPath());
    }
  }
  configuration.enableDigestComputation(computeDigest);
}","@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  builder=new Library();
  if (directory != null) {
    builder.setDirectory(directory);
  }
  super.setUp();
  builder.setOutput(outputFile);
  if (checkNullOrEmpty(includeClasses) && checkNullOrEmpty(includeFiles) && checkNullOrEmpty(includeNamespaces)&& checkNullOrEmpty(includeResourceBundles)&& checkNullOrEmpty(includeResourceBundlesArtifact)&& checkNullOrEmpty(includeSources)&& checkNullOrEmpty(includeStylesheet)) {
    getLog().warn(""String_Node_Str"");
    includeSources=sourcePaths.clone();
  }
  if (!checkNullOrEmpty(includeClasses)) {
    for (    String asClass : includeClasses) {
      builder.addComponent(asClass);
    }
  }
  if (!checkNullOrEmpty(includeFiles)) {
    for (    File file : includeFiles) {
      if (file == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      if (!file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
      }
      builder.addArchiveFile(file.getName(),file);
    }
  }
  if (!checkNullOrEmpty(includeNamespaces)) {
    for (    String uri : includeNamespaces) {
      try {
        builder.addComponent(new URI(uri));
      }
 catch (      URISyntaxException e) {
        throw new MojoExecutionException(""String_Node_Str"" + uri,e);
      }
    }
  }
  if (!checkNullOrEmpty(includeResourceBundles)) {
    for (    String rb : includeResourceBundles) {
      builder.addResourceBundle(rb);
    }
  }
  if (!checkNullOrEmpty(includeResourceBundlesArtifact)) {
    for (    MavenArtifact mvnArtifact : includeResourceBundlesArtifact) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      String bundleFile;
      try {
        bundleFile=FileUtils.readFileToString(artifact.getFile());
      }
 catch (      IOException e) {
        throw new MojoExecutionException(""String_Node_Str"" + artifact,e);
      }
      String[] bundles=bundleFile.split(""String_Node_Str"");
      for (      String bundle : bundles) {
        builder.addResourceBundle(bundle);
      }
    }
  }
  if (!checkNullOrEmpty(includeSources)) {
    for (    File file : includeSources) {
      if (file == null) {
        throw new MojoFailureException(""String_Node_Str"");
      }
      if (!file.exists()) {
        throw new MojoFailureException(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
      }
      builder.addComponent(file);
    }
  }
  if (!checkNullOrEmpty(includeStylesheet)) {
    for (    Stylesheet sheet : includeStylesheet) {
      if (!sheet.getPath().exists()) {
        throw new MojoExecutionException(""String_Node_Str"" + sheet.getPath());
      }
      builder.addStyleSheet(sheet.getName(),sheet.getPath());
    }
  }
  configuration.enableDigestComputation(computeDigest);
}",0.9863877822045152
10097,"@SuppressWarnings(""String_Node_Str"") protected void setUp() throws MojoExecutionException, MojoFailureException {
  if (docSources == null) {
    docSources=MavenUtils.getSourcePaths(build);
  }
  libraries=new ArrayList<File>();
  for (  Artifact artifact : MavenUtils.getDependencyArtifacts(project,resolver,localRepository,remoteRepositories,artifactMetadataSource)) {
    libraries.add(artifact.getFile());
  }
  if (output == null) {
    output=new File(build.getDirectory(),""String_Node_Str"");
    if (!output.exists()) {
      output.mkdirs();
    }
  }
  if (configFile == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),getConfigFileName());
      if (cfg.exists()) {
        configFile=cfg;
        break;
      }
    }
  }
  if (configFile == null) {
    URL url=getClass().getResource(""String_Node_Str"" + getConfigFileName());
    configFile=new File(build.getDirectory(),getConfigFileName());
    try {
      FileUtils.copyURLToFile(url,configFile);
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"");
    }
  }
  if (!configFile.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + configFile);
  }
  if (fontsSnapshot == null) {
    String os=System.getProperty(""String_Node_Str"").toLowerCase();
    URL url;
    if (os.contains(""String_Node_Str"")) {
      url=getClass().getResource(""String_Node_Str"");
    }
 else {
      url=getClass().getResource(""String_Node_Str"");
    }
    File fontsSer=new File(build.getDirectory(),""String_Node_Str"");
    try {
      FileUtils.copyURLToFile(url,fontsSer);
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"");
    }
    fontsSnapshot=fontsSer;
  }
  if (templatesPath == null) {
    templatesPath=generateDefaultTemplate();
  }
}","@SuppressWarnings(""String_Node_Str"") protected void setUp() throws MojoExecutionException, MojoFailureException {
  if (docSources == null) {
    docSources=MavenUtils.getSourcePaths(build);
  }
  libraries=new ArrayList<File>();
  for (  Artifact artifact : MavenUtils.getDependencyArtifacts(project,resolver,localRepository,remoteRepositories,artifactMetadataSource)) {
    if (""String_Node_Str"".equals(artifact.getType())) {
      libraries.add(artifact.getFile());
    }
  }
  if (output == null) {
    output=new File(build.getDirectory(),""String_Node_Str"");
    if (!output.exists()) {
      output.mkdirs();
    }
  }
  if (configFile == null) {
    List<Resource> resources=build.getResources();
    for (    Resource resource : resources) {
      File cfg=new File(resource.getDirectory(),getConfigFileName());
      if (cfg.exists()) {
        configFile=cfg;
        break;
      }
    }
  }
  if (configFile == null) {
    URL url=getClass().getResource(""String_Node_Str"" + getConfigFileName());
    configFile=new File(build.getDirectory(),getConfigFileName());
    try {
      FileUtils.copyURLToFile(url,configFile);
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"");
    }
  }
  if (!configFile.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + configFile);
  }
  if (fontsSnapshot == null) {
    String os=System.getProperty(""String_Node_Str"").toLowerCase();
    URL url;
    if (os.contains(""String_Node_Str"")) {
      url=getClass().getResource(""String_Node_Str"");
    }
 else {
      url=getClass().getResource(""String_Node_Str"");
    }
    File fontsSer=new File(build.getDirectory(),""String_Node_Str"");
    try {
      FileUtils.copyURLToFile(url,fontsSer);
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"");
    }
    fontsSnapshot=fontsSer;
  }
  if (templatesPath == null) {
    templatesPath=generateDefaultTemplate();
  }
}",0.983359334373375
10098,"/** 
 * Setup builder configuration
 * @throws MojoExecutionException
 */
protected void configure() throws MojoExecutionException {
  configuration.setExternalLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.includeLibraries(getDependenciesPath(""String_Node_Str""));
  configuration.setLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  if (mergeResourceBundle == null || mergeResourceBundle) {
    configuration.addLibraryPath(getResourcesBundles());
  }
  resolveRuntimeLibraries(""String_Node_Str"",""String_Node_Str"");
  resolveRuntimeLibraries(""String_Node_Str"",""String_Node_Str"");
  configuration.setTheme(getDependenciesPath(""String_Node_Str""));
  configuration.enableAccessibility(accessible);
  configuration.allowSourcePathOverlap(allowSourcePathOverlap);
  configuration.useActionScript3(as3);
  configuration.enableDebugging(debug,debugPassword);
  configuration.useECMAScript(es);
  if (fonts != null) {
    configuration.enableAdvancedAntiAliasing(fonts.isAdvancedAntiAliasing());
    configuration.setFontManagers(fonts.getManagers());
    configuration.setMaximumCachedFonts(fonts.getMaxCachedFonts());
    configuration.setMaximumGlyphsPerFace(fonts.getMaxGlyphsPerFace());
  }
  File fontsSnapshot=getFontsSnapshot();
  if (fontsSnapshot == null || !fontsSnapshot.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + fontsSnapshot);
  }
  configuration.setLocalFontSnapshot(fontsSnapshot);
  configuration.setActionScriptMetadata(keepAs3Metadatas);
  configuration.keepCompilerGeneratedActionScript(keepGeneratedActionscript);
  if (licenses != null) {
    for (    String licenseName : licenses.keySet()) {
      String key=licenses.get(licenseName);
      configuration.setLicense(licenseName,key);
    }
  }
  if (mergeResourceBundle == null || mergeResourceBundle) {
    configuration.setLocale(locales);
  }
 else {
    configuration.setLocale(new String[0]);
  }
  if (namespaces != null) {
    for (    Namespace namespace : namespaces) {
      configuration.setComponentManifest(namespace.getUri(),namespace.getManifest());
    }
  }
  configuration.optimize(optimize);
  if (this.warnigs != null) {
    configureWarnings(configuration);
  }
  configuration.setSourcePath(sourcePaths);
  configuration.enableStrictChecking(strict);
  configuration.useNetwork(useNetwork);
  configuration.enableVerboseStacktraces(verboseStacktraces);
  if (contextRoot != null) {
    configuration.setContextRoot(contextRoot);
  }
  configuration.keepLinkReport(linkReport);
  configuration.keepConfigurationReport(configurationReport);
  configuration.setConfiguration(configFile);
  configuration.setServiceConfiguration(services);
  if (loadExterns != null) {
    List<File> externsFiles=new ArrayList<File>();
    for (    MavenArtifact mvnArtifact : loadExterns) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      externsFiles.add(artifact.getFile());
    }
    configuration.setExterns(externsFiles.toArray(new File[externsFiles.size()]));
  }
  if (metadata != null) {
    configuration.setSWFMetaData(metadata);
  }
}","/** 
 * Setup builder configuration
 * @throws MojoExecutionException
 */
protected void configure() throws MojoExecutionException {
  configuration.setExternalLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.includeLibraries(getDependenciesPath(""String_Node_Str""));
  configuration.setLibraryPath(getDependenciesPath(""String_Node_Str""));
  configuration.addLibraryPath(getDependenciesPath(""String_Node_Str""));
  if (mergeResourceBundle == null || mergeResourceBundle) {
    configuration.addLibraryPath(getResourcesBundles());
  }
  resolveRuntimeLibraries(""String_Node_Str"",""String_Node_Str"");
  resolveRuntimeLibraries(""String_Node_Str"",""String_Node_Str"");
  configuration.setTheme(getDependenciesPath(""String_Node_Str""));
  configuration.enableAccessibility(accessible);
  configuration.allowSourcePathOverlap(allowSourcePathOverlap);
  configuration.useActionScript3(as3);
  configuration.enableDebugging(debug,debugPassword);
  configuration.useECMAScript(es);
  if (fonts != null) {
    configuration.enableAdvancedAntiAliasing(fonts.isAdvancedAntiAliasing());
    configuration.setFontManagers(fonts.getManagers());
    configuration.setMaximumCachedFonts(fonts.getMaxCachedFonts());
    configuration.setMaximumGlyphsPerFace(fonts.getMaxGlyphsPerFace());
  }
  File fontsSnapshot=getFontsSnapshot();
  if (fontsSnapshot == null || !fontsSnapshot.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + fontsSnapshot);
  }
  configuration.setLocalFontSnapshot(fontsSnapshot);
  configuration.setActionScriptMetadata(keepAs3Metadatas);
  configuration.keepCompilerGeneratedActionScript(keepGeneratedActionscript);
  if (licenses != null) {
    for (    String licenseName : licenses.keySet()) {
      String key=licenses.get(licenseName);
      configuration.setLicense(licenseName,key);
    }
  }
  if (mergeResourceBundle == null || mergeResourceBundle) {
    configuration.setLocale(locales);
  }
 else {
    configuration.setLocale(new String[0]);
  }
  if (namespaces != null) {
    for (    Namespace namespace : namespaces) {
      configuration.setComponentManifest(namespace.getUri(),namespace.getManifest());
    }
  }
  configuration.optimize(optimize);
  if (this.warnigs != null) {
    configureWarnings(configuration);
  }
  configuration.setSourcePath(sourcePaths);
  configuration.enableStrictChecking(strict);
  configuration.useNetwork(useNetwork);
  configuration.enableVerboseStacktraces(verboseStacktraces);
  if (contextRoot != null) {
    configuration.setContextRoot(contextRoot);
  }
  configuration.keepLinkReport(linkReport);
  configuration.keepConfigurationReport(configurationReport);
  configuration.setConfiguration(configFile);
  configuration.setServiceConfiguration(services);
  if (loadExterns != null) {
    List<File> externsFiles=new ArrayList<File>();
    for (    MavenArtifact mvnArtifact : loadExterns) {
      Artifact artifact=artifactFactory.createArtifactWithClassifier(mvnArtifact.getGroupId(),mvnArtifact.getArtifactId(),mvnArtifact.getVersion(),""String_Node_Str"",""String_Node_Str"");
      resolveArtifact(artifact,resolver,localRepository,remoteRepositories);
      externsFiles.add(artifact.getFile());
    }
    configuration.setExterns(externsFiles.toArray(new File[externsFiles.size()]));
  }
  if (metadata != null) {
    configuration.setSWFMetaData(metadata);
  }
  if (compatibilityVersion != null) {
    if (!COMPATIBILITY_2_0_0.equals(compatibilityVersion) && !COMPATIBILITY_2_0_1.equals(compatibilityVersion)) {
      throw new MojoExecutionException(""String_Node_Str"" + compatibilityVersion);
    }
 else     if (COMPATIBILITY_2_0_0.equals(compatibilityVersion)) {
      configuration.setCompatibilityVersion(2,0,0);
    }
 else     if (COMPATIBILITY_2_0_1.equals(compatibilityVersion)) {
      configuration.setCompatibilityVersion(2,0,1);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
}",0.9226125137211856
10099,"/** 
 * Get array of files for dependency artfacts for given scope
 * @param scope for which to get files
 * @return Array of dependency artifact files
 * @throws MojoExecutionException
 */
protected File[] getDependenciesPath(String scope) throws MojoExecutionException {
  if (scope == null)   return null;
  List<File> files=new ArrayList<File>();
  for (  Artifact a : getDependencyArtifacts(scope)) {
    files.add(MavenUtils.getArtifactFile(a,scope,build));
  }
  return files.toArray(new File[files.size()]);
}","/** 
 * Get array of files for dependency artfacts for given scope
 * @param scope for which to get files
 * @return Array of dependency artifact files
 * @throws MojoExecutionException
 */
protected File[] getDependenciesPath(String scope) throws MojoExecutionException {
  if (scope == null)   return null;
  List<File> files=new ArrayList<File>();
  for (  Artifact a : getDependencyArtifacts(scope)) {
    if (a.getGroupId().equals(""String_Node_Str"") && a.getArtifactId().equals(""String_Node_Str"")) {
      files.add(MavenUtils.getArtifactFile(a,scope,build));
    }
 else {
      files.add(a.getFile());
    }
  }
  return files.toArray(new File[files.size()]);
}",0.8725738396624473
10100,"protected void run() throws MojoExecutionException, MojoFailureException {
  List<String> args=new ArrayList<String>();
  addDocSources(args);
  addSourcePath(args);
  addLibraries(args);
  addConfigFile(args);
  addFontsSnapshot(args);
  addTemplates(args);
  addOutput(args);
  System.out.println(args);
  ASDoc.asdoc(args.toArray(new String[args.size()]));
}","protected void run() throws MojoExecutionException, MojoFailureException {
  if (docSources == null || docSources.length == 0) {
    getLog().warn(""String_Node_Str"");
    return;
  }
  List<String> args=new ArrayList<String>();
  addDocSources(args);
  addSourcePath(args);
  addLibraries(args);
  addConfigFile(args);
  addFontsSnapshot(args);
  addTemplates(args);
  addCompatibility(args);
  addOutput(args);
  System.out.println(args);
  ASDoc.asdoc(args.toArray(new String[args.size()]));
}",0.8434579439252337
10101,"private void linuxPatch() throws MojoExecutionException {
  if (!isWindows()) {
    Runtime runtime=Runtime.getRuntime();
    String statement=String.format(""String_Node_Str"",templatesPath.getAbsolutePath(),""String_Node_Str"");
    try {
      Process p=runtime.exec(statement);
      if (0 != p.waitFor()) {
        throw new MojoExecutionException(String.format(""String_Node_Str""));
      }
    }
 catch (    Exception e) {
      throw new MojoExecutionException(String.format(""String_Node_Str"",statement));
    }
  }
}","private void linuxPatch(File templates) throws MojoExecutionException {
  if (!isWindows()) {
    Runtime runtime=Runtime.getRuntime();
    String statement=String.format(""String_Node_Str"",templates.getAbsolutePath(),""String_Node_Str"");
    try {
      Process p=runtime.exec(statement);
      if (0 != p.waitFor()) {
        throw new MojoExecutionException(String.format(""String_Node_Str""));
      }
    }
 catch (    Exception e) {
      throw new MojoExecutionException(String.format(""String_Node_Str"",statement));
    }
  }
}",0.9828571428571428
10102,"/** 
 * Return a boolean to show if we are running on Windows.
 * @return true if we are running on Windows.
 */
private boolean isWindows(){
  String os=System.getProperty(""String_Node_Str"");
  if (os.startsWith(WINDOWS_OS)) {
    return true;
  }
 else {
    return false;
  }
}","/** 
 * Return a boolean to show if we are running on Windows.
 * @return true if we are running on Windows.
 */
private static boolean isWindows(){
  String os=System.getProperty(""String_Node_Str"");
  if (os.startsWith(WINDOWS_OS)) {
    return true;
  }
 else {
    return false;
  }
}",0.9876543209876544
10103,"private File generateDefaultTemplate() throws MojoExecutionException {
  File templates=new File(build.getDirectory(),""String_Node_Str"");
  templates.mkdirs();
  try {
    for (    Artifact artifact : pluginArtifacts) {
      if (""String_Node_Str"".equals(artifact.getClassifier())) {
        UnzipUtils.unzip(new FileInputStream(artifact.getFile()),templates);
        return templates;
      }
    }
    throw new MojoExecutionException(""String_Node_Str"");
  }
 catch (  IOException e) {
    throw new MojoExecutionException(e.getMessage(),e);
  }
 finally {
    linuxPatch();
  }
}","private File generateDefaultTemplate() throws MojoExecutionException {
  File templates=new File(build.getDirectory(),""String_Node_Str"");
  templates.mkdirs();
  try {
    for (    Artifact artifact : pluginArtifacts) {
      if (""String_Node_Str"".equals(artifact.getClassifier())) {
        UnzipUtils.unzip(new FileInputStream(artifact.getFile()),templates);
        return templates;
      }
    }
    throw new MojoExecutionException(""String_Node_Str"");
  }
 catch (  IOException e) {
    throw new MojoExecutionException(e.getMessage(),e);
  }
 finally {
    linuxPatch(templates);
  }
}",0.9923404255319148
10104,"private File generateDefaultTemplate() throws MojoExecutionException {
  File templates=new File(build.getDirectory(),""String_Node_Str"");
  templates.mkdirs();
  try {
    for (    Artifact artifact : pluginArtifacts) {
      if (""String_Node_Str"".equals(artifact.getClassifier())) {
        UnzipUtils.unzip(new FileInputStream(artifact.getFile()),templates);
        return templates;
      }
    }
    throw new MojoExecutionException(""String_Node_Str"");
  }
 catch (  IOException e) {
    throw new MojoExecutionException(e.getMessage(),e);
  }
 finally {
    linuxPatch(templates);
  }
}","private File generateDefaultTemplate() throws MojoExecutionException {
  File templates=new File(build.getDirectory(),""String_Node_Str"");
  templates.mkdirs();
  try {
    for (    Artifact artifact : pluginArtifacts) {
      if (""String_Node_Str"".equals(artifact.getClassifier())) {
        UnzipUtils.unzip(new FileInputStream(artifact.getFile()),templates);
        return templates;
      }
    }
    throw new MojoExecutionException(""String_Node_Str"");
  }
 catch (  IOException e) {
    throw new MojoExecutionException(e.getMessage(),e);
  }
 finally {
    makeHelperExecutable(templates);
  }
}",0.9748743718592964
10105,"/** 
 * Perform compilation of Flex source
 */
public void run() throws MojoExecutionException, MojoFailureException {
  builder.setLogger(new CompileLogger(getLog()));
  builder.setConfiguration(configuration);
  getLog().info(""String_Node_Str"" + configuration.toString().replace(""String_Node_Str"",""String_Node_Str""));
  long bytes;
  try {
    if (incremental && compilationData.exists()) {
      builder.load(loadCompilationData());
    }
    bytes=builder.build(incremental);
    if (incremental) {
      if (compilationData.exists()) {
        compilationData.delete();
        compilationData.createNewFile();
      }
      builder.save(saveCompilationData());
    }
  }
 catch (  IOException e) {
    throw new MojoExecutionException(e.getMessage(),e);
  }
catch (  MojoExecutionException e) {
    throw e;
  }
catch (  Exception e) {
    throw new MojoExecutionException(e.getMessage(),e);
  }
  if (bytes == 0) {
    throw new MojoFailureException(""String_Node_Str"");
  }
}","/** 
 * Perform compilation of Flex source
 */
public void run() throws MojoExecutionException, MojoFailureException {
  builder.setLogger(new CompileLogger(getLog()));
  builder.setConfiguration(configuration);
  getLog().info(""String_Node_Str"" + configuration.toString().replace(""String_Node_Str"",""String_Node_Str""));
  build(builder);
}",0.4920514761544284
10106,"/** 
 * Writes a report to a file.
 * @param report Report containing info to write to file
 * @param type Type of report to write. Valid types are <code>link</code> and <code>config</code>.
 * @throws MojoExecutionException throw if an error occurs during writing of report to file
 */
private void writeReport(Report report,String type) throws MojoExecutionException {
  File fileReport=new File(build.getDirectory(),project.getArtifactId() + ""String_Node_Str"" + project.getVersion()+ ""String_Node_Str""+ type+ ""String_Node_Str"");
  Writer writer=null;
  try {
    writer=new FileWriter(fileReport);
    if (""String_Node_Str"".equals(type)) {
      report.writeLinkReport(writer);
    }
 else     if (""String_Node_Str"".equals(type)) {
      report.writeConfigurationReport(writer);
    }
    getLog().info(""String_Node_Str"" + type + ""String_Node_Str""+ fileReport);
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"" + type + ""String_Node_Str"",e);
  }
 finally {
    try {
      if (null != writer) {
        writer.flush();
        writer.close();
      }
    }
 catch (    IOException e) {
      getLog().error(""String_Node_Str"",e);
    }
  }
  projectHelper.attachArtifact(project,""String_Node_Str"",type + ""String_Node_Str"",fileReport);
}","/** 
 * Writes a report to a file.
 * @param report Report containing info to write to file
 * @param type Type of report to write. Valid types are <code>link</code> and <code>config</code>.
 * @throws MojoExecutionException throw if an error occurs during writing of report to file
 */
private void writeReport(Report report,String type) throws MojoExecutionException {
  File fileReport=new File(build.getDirectory(),project.getArtifactId() + ""String_Node_Str"" + project.getVersion()+ ""String_Node_Str""+ type+ ""String_Node_Str"");
  Writer writer=null;
  try {
    writer=new FileWriter(fileReport);
    if (""String_Node_Str"".equals(type)) {
      report.writeLinkReport(writer);
      linkReportFile=fileReport;
    }
 else     if (""String_Node_Str"".equals(type)) {
      report.writeConfigurationReport(writer);
    }
    getLog().info(""String_Node_Str"" + type + ""String_Node_Str""+ fileReport);
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"" + type + ""String_Node_Str"",e);
  }
 finally {
    try {
      if (null != writer) {
        writer.flush();
        writer.close();
      }
    }
 catch (    IOException e) {
      getLog().error(""String_Node_Str"",e);
    }
  }
  projectHelper.attachArtifact(project,""String_Node_Str"",type + ""String_Node_Str"",fileReport);
}",0.9872241579558652
10107,"@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  File sourceDirectory=new File(build.getSourceDirectory());
  if (!sourceDirectory.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + sourceDirectory);
  }
  if (source == null) {
    source=resolveSourceFile(project,sourceFile);
  }
  if (source == null) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
  if (!source.exists()) {
    throw new MojoFailureException(""String_Node_Str"" + sourceFile);
  }
  try {
    builder=new Application(source);
  }
 catch (  FileNotFoundException e) {
    throw new MojoFailureException(""String_Node_Str"" + source);
  }
  super.setUp();
  builder.setOutput(outputFile);
}","@Override public void setUp() throws MojoExecutionException, MojoFailureException {
  File sourceDirectory=new File(build.getSourceDirectory());
  if (!sourceDirectory.exists()) {
    throw new MojoExecutionException(""String_Node_Str"" + sourceDirectory);
  }
  if (source == null) {
    source=resolveSourceFile(project,sourceFile);
  }
  if (source == null) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
  if (!source.exists()) {
    throw new MojoFailureException(""String_Node_Str"" + sourceFile);
  }
  try {
    builder=new Application(source);
  }
 catch (  FileNotFoundException e) {
    throw new MojoFailureException(""String_Node_Str"" + source);
  }
  if (moduleFiles != null) {
    modules=new ArrayList<File>();
    for (    String modulePath : moduleFiles) {
      File module=new File(sourceDirectory,modulePath);
      if (!module.exists()) {
        throw new MojoExecutionException(""String_Node_Str"" + module + ""String_Node_Str"");
      }
      modules.add(module);
    }
    if (loadExternsOnModules) {
      super.linkReport=true;
    }
  }
  super.setUp();
  builder.setOutput(outputFile);
}",0.7783783783783784
10108,"@Override protected void writeResourceBundle(String[] bundles,String locale,File localePath) throws MojoExecutionException {
  getLog().info(""String_Node_Str"" + locale);
  Library localized=new Library();
  localized.setConfiguration(configuration);
  localized.setLogger(new CompileLogger(getLog()));
  configuration.addLibraryPath(new File[]{outputFile});
  configuration.setLocale(new String[]{locale});
  configuration.setSourcePath(new File[]{localePath});
  for (  String bundle : bundles) {
    localized.addResourceBundle(bundle);
  }
  configuration.addLibraryPath(getResourcesBundles());
  File output=new File(build.getDirectory(),project.getArtifactId() + ""String_Node_Str"" + project.getVersion()+ ""String_Node_Str""+ locale+ ""String_Node_Str"");
  localized.setOutput(output);
  long bytes;
  try {
    bytes=localized.build(false);
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
  if (bytes == 0) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
  projectHelper.attachArtifact(project,""String_Node_Str"",locale,output);
}","@Override protected void writeResourceBundle(String[] bundles,String locale,File localePath) throws MojoExecutionException {
  getLog().info(""String_Node_Str"" + locale);
  Library localized=new Library();
  localized.setConfiguration(configuration);
  localized.setLogger(new CompileLogger(getLog()));
  configuration.addLibraryPath(new File[]{outputFile});
  configuration.setLocale(new String[]{locale});
  configuration.setSourcePath(new File[]{localePath});
  for (  String bundle : bundles) {
    localized.addResourceBundle(bundle);
  }
  configuration.addLibraryPath(getResourcesBundles());
  File output=new File(build.getDirectory(),project.getArtifactId() + ""String_Node_Str"" + project.getVersion()+ ""String_Node_Str""+ locale+ ""String_Node_Str"");
  localized.setOutput(output);
  build(localized);
  projectHelper.attachArtifact(project,""String_Node_Str"",locale,output);
}",0.8850632911392405
10109,"@Override @SuppressWarnings(""String_Node_Str"") public void run(){
  while (true) {
    int newTopic;
    try {
      newTopic=newTopics.take();
    }
 catch (    InterruptedException e) {
      continue;
    }
    String lastMod=null;
    Topic oldTopic=topics.get(newTopic);
    if (oldTopic != null) {
      oldTopic.lock.readLock().lock();
      lastMod=oldTopic.getLastMod();
      oldTopic.lock.readLock().unlock();
    }
    long startTime=DateTime.now().getMillis();
    Topic topic;
    try {
      topic=sourceBoard.getThread(newTopic,lastMod);
    }
 catch (    HttpGetException e) {
      if (e.getHttpStatus() == 304) {
        pingTopic(oldTopic);
        debug(TALK,newTopic + ""String_Node_Str"");
        continue;
      }
 else       if (e.getHttpStatus() == 404) {
        if (oldTopic != null) {
          oldTopic.lock.writeLock().lock();
          if (oldTopic.getLastPage() < pageLimbo) {
            if (oldTopic.getAllPosts().size() > 1) {
              int op=oldTopic.getAllPosts().iterator().next();
              try {
                deletedPosts.put(op);
              }
 catch (              InterruptedException e1) {
              }
            }
            topicUpdates.add(oldTopic);
            debug(TALK,newTopic + ""String_Node_Str"" + oldTopic.getLastPage()+ ""String_Node_Str"");
          }
          topics.remove(newTopic);
          oldTopic.lock.writeLock().unlock();
        }
        continue;
      }
 else {
        pingTopic(oldTopic);
        debug(WARN,newTopic + ""String_Node_Str"" + e.getMessage());
        continue;
      }
    }
catch (    ContentGetException e) {
      pingTopic(oldTopic);
      debug(WARN,newTopic + ""String_Node_Str"" + e.getMessage());
      continue;
    }
catch (    ContentParseException e) {
      pingTopic(oldTopic);
      debug(ERROR,newTopic + ""String_Node_Str"" + e.getMessage());
      continue;
    }
    if (topic == null) {
      pingTopic(oldTopic);
      debug(WARN,newTopic + ""String_Node_Str"");
      continue;
    }
    topic.setLastHit(startTime);
    topic.lock.writeLock().lock();
    if (oldTopic != null) {
      oldTopic.lock.writeLock().lock();
      if (oldTopic.getLastHit() > startTime) {
        debug(ERROR,""String_Node_Str"" + oldTopic.getNum());
        oldTopic.lock.writeLock().unlock();
        topic.lock.readLock().unlock();
        continue;
      }
      findDeleted(oldTopic,topic,true);
      topic.setLastPage(oldTopic.getLastPage());
      topic.setLastModTimestamp(oldTopic.getLastModTimestamp());
      topics.put(newTopic,topic);
      oldTopic.lock.writeLock().unlock();
    }
 else {
      topics.put(newTopic,topic);
    }
    topicUpdates.add(topic);
    topic.lock.writeLock().unlock();
    debug(TALK,newTopic + ""String_Node_Str"" + (oldTopic != null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public void run(){
  while (true) {
    int newTopic;
    try {
      newTopic=newTopics.take();
    }
 catch (    InterruptedException e) {
      continue;
    }
    String lastMod=null;
    Topic oldTopic=topics.get(newTopic);
    if (oldTopic != null) {
      oldTopic.lock.readLock().lock();
      lastMod=oldTopic.getLastMod();
      oldTopic.lock.readLock().unlock();
    }
    long startTime=DateTime.now().getMillis();
    Topic topic;
    try {
      topic=sourceBoard.getThread(newTopic,lastMod);
    }
 catch (    HttpGetException e) {
      if (e.getHttpStatus() == 304) {
        pingTopic(oldTopic);
        debug(TALK,newTopic + ""String_Node_Str"");
        continue;
      }
 else       if (e.getHttpStatus() == 404) {
        if (oldTopic != null) {
          oldTopic.lock.writeLock().lock();
          if (oldTopic.getLastPage() < pageLimbo) {
            if (oldTopic.getAllPosts().size() > 1) {
              int op=oldTopic.getAllPosts().iterator().next();
              try {
                deletedPosts.put(op);
              }
 catch (              InterruptedException e1) {
              }
            }
            topicUpdates.add(oldTopic);
            debug(TALK,newTopic + ""String_Node_Str"" + oldTopic.getLastPage()+ ""String_Node_Str"");
          }
          topics.remove(newTopic);
          oldTopic.lock.writeLock().unlock();
        }
        continue;
      }
 else {
        pingTopic(oldTopic);
        debug(WARN,newTopic + ""String_Node_Str"" + e.getMessage());
        continue;
      }
    }
catch (    ContentGetException e) {
      pingTopic(oldTopic);
      debug(WARN,newTopic + ""String_Node_Str"" + e.getMessage());
      continue;
    }
catch (    ContentParseException e) {
      pingTopic(oldTopic);
      debug(ERROR,newTopic + ""String_Node_Str"" + e.getMessage());
      continue;
    }
    if (topic == null) {
      pingTopic(oldTopic);
      debug(WARN,newTopic + ""String_Node_Str"");
      continue;
    }
    topic.setLastHit(startTime);
    topic.lock.writeLock().lock();
    if (oldTopic != null) {
      oldTopic.lock.writeLock().lock();
      if (oldTopic.getLastHit() > startTime) {
        debug(ERROR,""String_Node_Str"" + oldTopic.getNum());
        oldTopic.lock.writeLock().unlock();
        topic.lock.readLock().unlock();
        continue;
      }
      findDeleted(oldTopic,topic,true);
      topic.setLastPage(oldTopic.getLastPage());
      topic.setLastModTimestamp(oldTopic.getLastModTimestamp());
      topics.put(newTopic,topic);
      oldTopic.lock.writeLock().unlock();
    }
 else {
      topics.put(newTopic,topic);
    }
    topicUpdates.add(topic);
    topic.lock.writeLock().unlock();
    debug(TALK,newTopic + ""String_Node_Str"" + ((oldTopic != null && oldTopic.getLastMod() != null) ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}",0.9938347718865598
10110,"@Override @SuppressWarnings(""String_Node_Str"") public void run(){
  while (true) {
    long startTime=DateTime.now().getMillis();
    Page threadList;
    try {
      threadList=sourceBoard.getAllThreads(lastMod);
    }
 catch (    HttpGetException e) {
      if (e.getHttpStatus() == 304)       debug(TALK,(""String_Node_Str""));
 else       debug(WARN,""String_Node_Str"" + e.getMessage());
      sleepRemaining(startTime);
      continue;
    }
catch (    ContentGetException e) {
      debug(WARN,""String_Node_Str"" + e.getMessage());
      sleepRemaining(startTime);
      continue;
    }
    lastMod=threadList.getLastMod();
    Map<Integer,Topic> threadMap=new HashMap<Integer,Topic>();
    for (    Topic topic : threadList.getThreads()) {
      threadMap.put(topic.getNum(),topic);
    }
    for (    Topic oldTopic : topics.values()) {
      oldTopic.lock.readLock().lock();
      Topic newTopic=threadMap.remove(oldTopic.getNum());
      if (newTopic != null) {
        if (oldTopic.getLastModTimestamp() < newTopic.getLastModTimestamp()) {
          debug(TALK,""String_Node_Str"" + oldTopic.getNum());
          if (!newTopics.contains(newTopic.getNum()))           newTopics.add(newTopic.getNum());
        }
        oldTopic.lock.writeLock().lock();
        oldTopic.setLastModTimestamp(newTopic.getLastModTimestamp());
        oldTopic.setLastPage(newTopic.getLastPage());
        oldTopic.lock.writeLock().unlock();
      }
 else {
        if (!newTopics.contains(oldTopic.getNum()))         newTopics.add(oldTopic.getNum());
      }
      oldTopic.lock.readLock().unlock();
    }
    for (    Topic topic : threadMap.values()) {
      topic.lock.writeLock().lock();
      topics.put(topic.getNum(),topic);
      if (!newTopics.contains(topic.getNum()))       newTopics.add(topic.getNum());
      topic.lock.writeLock().unlock();
    }
    debug(TALK,""String_Node_Str"");
    sleepRemaining(startTime);
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public void run(){
  while (true) {
    long startTime=DateTime.now().getMillis();
    Page threadList;
    try {
      threadList=sourceBoard.getAllThreads(lastMod);
    }
 catch (    HttpGetException e) {
      if (e.getHttpStatus() == 304)       debug(TALK,(""String_Node_Str""));
 else       debug(WARN,""String_Node_Str"" + e.getMessage());
      sleepRemaining(startTime);
      continue;
    }
catch (    ContentGetException e) {
      debug(WARN,""String_Node_Str"" + e.getMessage());
      sleepRemaining(startTime);
      continue;
    }
    lastMod=threadList.getLastMod();
    Map<Integer,Topic> threadMap=new HashMap<Integer,Topic>();
    for (    Topic topic : threadList.getThreads()) {
      threadMap.put(topic.getNum(),topic);
    }
    for (    Topic oldTopic : topics.values()) {
      oldTopic.lock.readLock().lock();
      int oldTopicNum=oldTopic.getNum();
      int oldTopicLastMod=oldTopic.getLastModTimestamp();
      oldTopic.lock.readLock().unlock();
      Topic newTopic=threadMap.remove(oldTopicNum);
      if (newTopic != null) {
        if (oldTopicLastMod < newTopic.getLastModTimestamp()) {
          debug(TALK,""String_Node_Str"" + oldTopicNum);
          if (!newTopics.contains(newTopic.getNum()))           newTopics.add(newTopic.getNum());
        }
        oldTopic.lock.writeLock().lock();
        oldTopic.setLastModTimestamp(newTopic.getLastModTimestamp());
        oldTopic.setLastPage(newTopic.getLastPage());
        oldTopic.lock.writeLock().unlock();
      }
 else {
        if (!newTopics.contains(oldTopicNum))         newTopics.add(oldTopicNum);
      }
    }
    for (    Topic topic : threadMap.values()) {
      topic.lock.writeLock().lock();
      topics.put(topic.getNum(),topic);
      if (!newTopics.contains(topic.getNum())) {
        newTopics.add(topic.getNum());
      }
      topic.lock.writeLock().unlock();
    }
    debug(TALK,""String_Node_Str"");
    sleepRemaining(startTime);
  }
}",0.847926267281106
10111,"@Override public void run(){
  while (true) {
    long now=DateTime.now().getMillis();
    for (    int pageNo : pageNos) {
      String lastMod=pagesLastMods[pageNo];
      Page page;
      long startTime=DateTime.now().getMillis();
      try {
        page=sourceBoard.getPage(pageNo,lastMod);
      }
 catch (      HttpGetException e) {
        if (e.getHttpStatus() == 304)         debug(TALK,(pageNo == 0 ? ""String_Node_Str"" : ""String_Node_Str"" + pageNo) + ""String_Node_Str"");
 else         debug(WARN,""String_Node_Str"" + pageNo + ""String_Node_Str""+ e.getMessage());
        continue;
      }
catch (      ContentGetException e) {
        debug(WARN,""String_Node_Str"" + pageNo + ""String_Node_Str""+ e.getMessage());
        continue;
      }
catch (      ContentParseException e) {
        debug(WARN,""String_Node_Str"" + pageNo + ""String_Node_Str""+ e.getMessage());
        continue;
      }
      if (page == null) {
        debug(WARN,(pageNo == 0 ? ""String_Node_Str"" : ""String_Node_Str"" + pageNo) + ""String_Node_Str"");
        continue;
      }
      pagesLastMods[pageNo]=page.getLastMod();
      debug(INFO,""String_Node_Str"" + pageNo);
      for (      Topic newTopic : page.getThreads()) {
        int num=newTopic.getNum();
synchronized (newTopics) {
          if (newTopics.contains(num))           continue;
        }
        if (!topics.containsKey(num)) {
          try {
            newTopics.put(num);
          }
 catch (          InterruptedException e) {
          }
          continue;
        }
        Topic fullTopic=topics.get(num);
        if (fullTopic == null)         continue;
        fullTopic.lock.writeLock().lock();
        if (fullTopic.getLastHit() > startTime) {
          fullTopic.lock.writeLock().unlock();
          continue;
        }
        fullTopic.setLastPage(pageNo);
        int oldPosts=0;
        int newPosts=0;
        boolean mustRefresh=false;
        if (findDeleted(fullTopic,newTopic,false)) {
          mustRefresh=true;
          newPosts++;
        }
        for (Iterator<Post> it=newTopic.getPosts().iterator(); it.hasNext(); ) {
          Post newPost=it.next();
          if (fullTopic.findPost(newPost.getNum())) {
            if (newPost.isOmitted())             it.remove();
            oldPosts++;
            continue;
          }
          fullTopic.addPost(newPost.getNum());
          newPosts++;
          if (newPost.isOmitted())           mustRefresh=true;
        }
        fullTopic.setLastHit(startTime);
        fullTopic.lock.writeLock().unlock();
        if (oldPosts != 0 && newPosts == 0)         continue;
        debug(TALK,(pageNo == 0 ? ""String_Node_Str"" : ""String_Node_Str"" + pageNo) + ""String_Node_Str"");
        newTopic.lock.readLock().lock();
        topicUpdates.add(newTopic);
        newTopic.lock.readLock().unlock();
        if (mustRefresh || oldPosts < 2) {
          debug(TALK,num + ""String_Node_Str"");
          try {
            newTopics.put(num);
          }
 catch (          InterruptedException e) {
          }
        }
      }
    }
    long left=this.wait - (DateTime.now().getMillis() - now);
    if (left > 0) {
      try {
        Thread.sleep(left);
      }
 catch (      InterruptedException e) {
      }
    }
  }
}","@Override public void run(){
  while (true) {
    long startTime=DateTime.now().getMillis();
    for (    int pageNo : pageNos) {
      String lastMod=pagesLastMods[pageNo];
      Page page;
      long pageStartTime=DateTime.now().getMillis();
      try {
        page=sourceBoard.getPage(pageNo,lastMod);
      }
 catch (      HttpGetException e) {
        if (e.getHttpStatus() == 304)         debug(TALK,(pageNo == 0 ? ""String_Node_Str"" : ""String_Node_Str"" + pageNo) + ""String_Node_Str"");
 else         debug(WARN,""String_Node_Str"" + pageNo + ""String_Node_Str""+ e.getMessage());
        continue;
      }
catch (      ContentGetException e) {
        debug(WARN,""String_Node_Str"" + pageNo + ""String_Node_Str""+ e.getMessage());
        continue;
      }
catch (      ContentParseException e) {
        debug(WARN,""String_Node_Str"" + pageNo + ""String_Node_Str""+ e.getMessage());
        continue;
      }
      if (page == null) {
        debug(WARN,(pageNo == 0 ? ""String_Node_Str"" : ""String_Node_Str"" + pageNo) + ""String_Node_Str"");
        continue;
      }
      pagesLastMods[pageNo]=page.getLastMod();
      debug(INFO,""String_Node_Str"" + pageNo);
      for (      Topic newTopic : page.getThreads()) {
        int num=newTopic.getNum();
synchronized (newTopics) {
          if (newTopics.contains(num))           continue;
        }
        if (!topics.containsKey(num)) {
          try {
            newTopics.put(num);
          }
 catch (          InterruptedException e) {
          }
          continue;
        }
        Topic fullTopic=topics.get(num);
        if (fullTopic == null)         continue;
        fullTopic.lock.writeLock().lock();
        if (fullTopic.getLastHit() > pageStartTime) {
          fullTopic.lock.writeLock().unlock();
          continue;
        }
        fullTopic.setLastPage(pageNo);
        int oldPosts=0;
        int newPosts=0;
        boolean mustRefresh=false;
        if (findDeleted(fullTopic,newTopic,false)) {
          mustRefresh=true;
          newPosts++;
        }
        for (Iterator<Post> it=newTopic.getPosts().iterator(); it.hasNext(); ) {
          Post newPost=it.next();
          if (fullTopic.findPost(newPost.getNum())) {
            if (newPost.isOmitted())             it.remove();
            oldPosts++;
            continue;
          }
          fullTopic.addPost(newPost.getNum());
          newPosts++;
          if (newPost.isOmitted())           mustRefresh=true;
        }
        fullTopic.setLastHit(pageStartTime);
        fullTopic.lock.writeLock().unlock();
        if (oldPosts != 0 && newPosts == 0)         continue;
        debug(TALK,(pageNo == 0 ? ""String_Node_Str"" : ""String_Node_Str"" + pageNo) + ""String_Node_Str"");
        newTopic.lock.readLock().lock();
        topicUpdates.add(newTopic);
        newTopic.lock.readLock().unlock();
        if (mustRefresh || oldPosts < 2) {
          debug(TALK,num + ""String_Node_Str"");
          try {
            newTopics.put(num);
          }
 catch (          InterruptedException e) {
          }
        }
      }
    }
    long left=this.wait - (DateTime.now().getMillis() - startTime);
    if (left > 0) {
      try {
        Thread.sleep(left);
      }
 catch (      InterruptedException e) {
      }
    }
  }
}",0.9935304990757856
10112,"@Override public void run(){
  while (true) {
    long now=DateTime.now().getMillis();
    Page threadList;
    try {
      threadList=sourceBoard.getAllThreads(lastMod);
    }
 catch (    HttpGetException e) {
      if (e.getHttpStatus() == 304)       debug(TALK,(""String_Node_Str""));
 else       debug(WARN,""String_Node_Str"" + e.getMessage());
      continue;
    }
catch (    ContentGetException e) {
      debug(WARN,""String_Node_Str"" + e.getMessage());
      continue;
    }
    lastMod=threadList.getLastMod();
    if (threadList == null) {
      debug(WARN,(""String_Node_Str""));
      continue;
    }
    Map<Integer,Topic> threadMap=new HashMap<Integer,Topic>();
    for (    Topic topic : threadList.getThreads()) {
      threadMap.put(topic.getNum(),topic);
    }
    for (    Topic oldTopic : topics.values()) {
      oldTopic.lock.writeLock().lock();
      Topic newTopic=threadMap.remove(oldTopic.getNum());
      if (newTopic != null) {
        if (oldTopic.getLastModTimestamp() < newTopic.getLastModTimestamp()) {
          debug(TALK,""String_Node_Str"" + oldTopic.getNum());
          if (!newTopics.contains(newTopic.getNum()))           newTopics.add(newTopic.getNum());
        }
        oldTopic.setLastModTimestamp(newTopic.getLastModTimestamp());
        oldTopic.setLastPage(newTopic.getLastPage());
      }
 else {
        if (!newTopics.contains(oldTopic.getNum()))         newTopics.add(oldTopic.getNum());
      }
      oldTopic.lock.writeLock().unlock();
    }
    for (    Topic topic : threadMap.values()) {
      topic.lock.writeLock().lock();
      topics.put(topic.getNum(),topic);
      if (!newTopics.contains(topic.getNum()))       newTopics.add(topic.getNum());
      topic.lock.writeLock().unlock();
    }
    debug(TALK,""String_Node_Str"");
    long left=this.wait - (DateTime.now().getMillis() - now);
    if (left > 0) {
      try {
        Thread.sleep(left);
      }
 catch (      InterruptedException e) {
      }
    }
  }
}","@Override public void run(){
  while (true) {
    long startTime=DateTime.now().getMillis();
    Page threadList;
    try {
      threadList=sourceBoard.getAllThreads(lastMod);
    }
 catch (    HttpGetException e) {
      if (e.getHttpStatus() == 304)       debug(TALK,(""String_Node_Str""));
 else       debug(WARN,""String_Node_Str"" + e.getMessage());
      sleepRemaining(startTime);
      continue;
    }
catch (    ContentGetException e) {
      debug(WARN,""String_Node_Str"" + e.getMessage());
      sleepRemaining(startTime);
      continue;
    }
    lastMod=threadList.getLastMod();
    if (threadList == null) {
      debug(WARN,(""String_Node_Str""));
      sleepRemaining(startTime);
      continue;
    }
    Map<Integer,Topic> threadMap=new HashMap<Integer,Topic>();
    for (    Topic topic : threadList.getThreads()) {
      threadMap.put(topic.getNum(),topic);
    }
    for (    Topic oldTopic : topics.values()) {
      oldTopic.lock.writeLock().lock();
      Topic newTopic=threadMap.remove(oldTopic.getNum());
      if (newTopic != null) {
        if (oldTopic.getLastModTimestamp() < newTopic.getLastModTimestamp()) {
          debug(TALK,""String_Node_Str"" + oldTopic.getNum());
          if (!newTopics.contains(newTopic.getNum()))           newTopics.add(newTopic.getNum());
        }
        oldTopic.setLastModTimestamp(newTopic.getLastModTimestamp());
        oldTopic.setLastPage(newTopic.getLastPage());
      }
 else {
        if (!newTopics.contains(oldTopic.getNum()))         newTopics.add(oldTopic.getNum());
      }
      oldTopic.lock.writeLock().unlock();
    }
    for (    Topic topic : threadMap.values()) {
      topic.lock.writeLock().lock();
      topics.put(topic.getNum(),topic);
      if (!newTopics.contains(topic.getNum()))       newTopics.add(topic.getNum());
      topic.lock.writeLock().unlock();
    }
    debug(TALK,""String_Node_Str"");
    sleepRemaining(startTime);
  }
}",0.9182098765432098
10113,"public Post newYotsubaPost(String link,String mediaOrig,boolean spoiler,String filesize,int width,int height,String filename,int tWidth,int tHeight,String md5,int num,String title,String email,String name,String trip,String capcode,int dateUtc,boolean sticky,String comment,boolean omitted,int threadNum,String posterHash,String posterCountry) throws ContentParseException {
  String type=""String_Node_Str"";
  String previewOrig=null;
  String exif=null;
  int timeStampExpired=0;
  if (threadNum == 0)   threadNum=num;
  boolean op=(threadNum == num);
  if (name.equals(""String_Node_Str""))   name=null;
  if (comment.equals(""String_Node_Str""))   comment=null;
  if (title.equals(""String_Node_Str""))   title=null;
  if (posterCountry != null && (posterCountry.equals(""String_Node_Str"") || posterCountry.equals(""String_Node_Str"")))   posterCountry=null;
  if (link != null) {
    Pattern pat=Pattern.compile(""String_Node_Str"");
    Matcher mat=pat.matcher(link);
    if (mat.find()) {
      String number=mat.group(1);
      type=mat.group(2);
      filename=(filename != null) ? filename : (number + ""String_Node_Str"" + type);
      if (mediaOrig == null)       mediaOrig=number + ""String_Node_Str"" + type;
      previewOrig=number + ""String_Node_Str"";
    }
  }
  if (spoiler) {
    tWidth=0;
    tHeight=0;
  }
  int timeStamp;
  int mediaSize;
  try {
    timeStamp=this.parseDate(dateUtc);
    mediaSize=this.parseFilesize(filesize);
  }
 catch (  IllegalArgumentException e) {
    throw new ContentParseException(""String_Node_Str"" + num,e);
  }
  Post post=new Post();
  post.setLink(link);
  post.setType(type);
  post.setMediaOrig(mediaOrig);
  post.setMediaHash(md5);
  post.setMediaFilename(filename);
  post.setMediaSize(mediaSize);
  post.setMediaW(width);
  post.setMediaH(height);
  post.setPreviewOrig(previewOrig);
  post.setPreviewW(tWidth);
  post.setPreviewH(tHeight);
  post.setExif(exif);
  post.setNum(num);
  post.setThreadNum(threadNum);
  post.setOp(op);
  post.setTitle(this.cleanSimple(title));
  post.setEmail(email);
  post.setName(this.cleanSimple(name));
  post.setTrip(trip);
  post.setDate(timeStamp);
  post.setDateExpired(timeStampExpired);
  post.setComment(this.doClean(comment));
  post.setSpoiler(spoiler);
  post.setDeleted(false);
  post.setSticky(sticky);
  post.setCapcode(capcode);
  post.setPosterHash(posterHash);
  post.setPosterCountry(posterCountry);
  post.setOmitted(omitted);
  return post;
}","public Post newYotsubaPost(String link,String mediaOrig,boolean spoiler,String filesize,int width,int height,String filename,int tWidth,int tHeight,String md5,int num,String title,String email,String name,String trip,String capcode,int dateUtc,boolean sticky,String comment,boolean omitted,int threadNum,String posterHash,String posterCountry) throws ContentParseException {
  String type=""String_Node_Str"";
  String previewOrig=null;
  String exif=null;
  int timeStampExpired=0;
  if (threadNum == 0)   threadNum=num;
  boolean op=(threadNum == num);
  if (name.equals(""String_Node_Str""))   name=null;
  if (comment.equals(""String_Node_Str""))   comment=null;
  if (title.equals(""String_Node_Str""))   title=null;
  if (posterCountry != null && (posterCountry.equals(""String_Node_Str"") || posterCountry.equals(""String_Node_Str"")))   posterCountry=null;
  if (link != null) {
    Pattern pat=Pattern.compile(""String_Node_Str"");
    Matcher mat=pat.matcher(link);
    if (mat.find()) {
      String number=mat.group(1);
      type=mat.group(2);
      filename=(filename != null) ? filename : (number + ""String_Node_Str"" + type);
      if (mediaOrig == null)       mediaOrig=number + ""String_Node_Str"" + type;
      previewOrig=number + ""String_Node_Str"";
    }
  }
  if (spoiler) {
    tWidth=0;
    tHeight=0;
  }
  int timeStamp;
  int mediaSize;
  try {
    timeStamp=this.parseDate(dateUtc);
    mediaSize=this.parseFilesize(filesize);
  }
 catch (  IllegalArgumentException e) {
    throw new ContentParseException(""String_Node_Str"" + num,e);
  }
  Post post=new Post();
  post.setLink(link);
  post.setType(type);
  post.setMediaOrig(mediaOrig);
  post.setMediaHash(md5);
  post.setMediaFilename(filename);
  post.setMediaSize(mediaSize);
  post.setMediaW(width);
  post.setMediaH(height);
  post.setPreviewOrig(previewOrig);
  post.setPreviewW(tWidth);
  post.setPreviewH(tHeight);
  post.setExif(exif);
  post.setNum(num);
  post.setThreadNum(threadNum);
  post.setOp(op);
  post.setTitle(this.cleanSimple(title));
  post.setEmail(this.cleanSimple(email));
  post.setName(this.cleanSimple(name));
  post.setTrip(trip);
  post.setDate(timeStamp);
  post.setDateExpired(timeStampExpired);
  post.setComment(this.doClean(comment));
  post.setSpoiler(spoiler);
  post.setDeleted(false);
  post.setSticky(sticky);
  post.setCapcode(capcode);
  post.setPosterHash(posterHash);
  post.setPosterCountry(posterCountry);
  post.setOmitted(omitted);
  return post;
}",0.9942903752039152
10114,"public void insertMedia(MediaPost h,Board source,boolean preview) throws ContentGetException, ContentStoreException {
  if ((preview && h.getPreview() == null) || (!preview && h.getMedia() == null))   return;
  Media mediaRow;
  try {
    mediaRow=db.getMedia(h);
  }
 catch (  DBConnectionException e) {
    throw new ContentStoreException(""String_Node_Str"",e);
  }
  if (mediaRow.getBanned() == 1)   return;
  String filename;
  if (this.useOldDirectoryStructure)   filename=preview ? h.getPreview() : h.getMedia();
 else   filename=preview ? (h.isOp() ? mediaRow.getPreviewOp() : mediaRow.getPreviewReply()) : mediaRow.getMedia();
  if (filename == null)   return;
  String outputDir;
  if (this.useOldDirectoryStructure)   outputDir=makeDir(h,preview ? DIR_THUMB : DIR_MEDIA,FULL_FILE);
 else   outputDir=makeDir(filename,preview ? DIR_THUMB : DIR_MEDIA,FULL_FILE);
  File outputFile=new File(outputDir + ""String_Node_Str"" + filename);
  if (outputFile.exists()) {
    if (preview == false)     outputFile.setLastModified(System.currentTimeMillis());
    return;
  }
  String tempFilePath;
  if (this.useOldDirectoryStructure)   tempFilePath=makeDir(h,preview ? DIR_THUMB : DIR_MEDIA,TEMP_FILE);
 else   tempFilePath=makeDir(filename,preview ? DIR_THUMB : DIR_MEDIA,TEMP_FILE);
  File tempFile=new File(tempFilePath + ""String_Node_Str"" + filename);
  if (tempFile.exists())   return;
  InputStream inStream=preview ? source.getMediaPreview(h) : source.getMedia(h);
  OutputStream outFile=null;
  try {
    outFile=new BufferedOutputStream(new FileOutputStream(tempFile));
    ByteStreams.copy(inStream,outFile);
  }
 catch (  FileNotFoundException e) {
    throw new ContentStoreException(""String_Node_Str"",e);
  }
catch (  IOException e) {
    if (!tempFile.delete())     throw new ContentStoreException(""String_Node_Str"" + tempFilePath + ""String_Node_Str"",e);
    throw new ContentStoreException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (outFile != null)       outFile.close();
      inStream.close();
    }
 catch (    IOException e) {
      throw new ContentStoreException(""String_Node_Str"",e);
    }
  }
  if (!tempFile.renameTo(outputFile))   throw new ContentStoreException(""String_Node_Str"" + tempFilePath + ""String_Node_Str"");
  try {
    if (this.webGroupId != 0) {
      posix.chmod(outputFile.getCanonicalPath(),0664);
      posix.chown(outputFile.getCanonicalPath(),-1,this.webGroupId);
    }
  }
 catch (  IOException e) {
    throw new ContentStoreException(""String_Node_Str"",e);
  }
}","public void insertMedia(MediaPost h,Board source,boolean preview) throws ContentGetException, ContentStoreException {
  if ((preview && h.getPreview() == null) || (!preview && h.getMedia() == null))   return;
  Media mediaRow;
  try {
    mediaRow=db.getMedia(h);
  }
 catch (  DBConnectionException e) {
    throw new ContentStoreException(""String_Node_Str"",e);
  }
  if (mediaRow.getBanned() == 1)   return;
  String filename;
  if (this.useOldDirectoryStructure)   filename=preview ? h.getPreview() : h.getMedia();
 else   filename=preview ? (h.isOp() ? mediaRow.getPreviewOp() : mediaRow.getPreviewReply()) : mediaRow.getMedia();
  if (filename == null)   return;
  String outputDir;
  if (this.useOldDirectoryStructure)   outputDir=makeDir(h,preview ? DIR_THUMB : DIR_MEDIA,FULL_FILE);
 else   outputDir=makeDir(filename,preview ? DIR_THUMB : DIR_MEDIA,FULL_FILE);
  File outputFile=new File(outputDir + ""String_Node_Str"" + filename);
  if (outputFile.exists()) {
    if (preview == false)     outputFile.setLastModified(System.currentTimeMillis());
    return;
  }
  String tempFilePath;
  if (this.useOldDirectoryStructure)   tempFilePath=makeDir(h,preview ? DIR_THUMB : DIR_MEDIA,TEMP_FILE);
 else   tempFilePath=makeDir(filename,preview ? DIR_THUMB : DIR_MEDIA,TEMP_FILE);
  File tempFile=new File(tempFilePath + ""String_Node_Str"" + filename);
  if (tempFile.exists())   return;
  InputStream inStream=preview ? source.getMediaPreview(h) : source.getMedia(h);
  OutputStream outFile=null;
  try {
    outFile=new BufferedOutputStream(new FileOutputStream(tempFile));
    ByteStreams.copy(inStream,outFile);
  }
 catch (  FileNotFoundException e) {
    throw new ContentStoreException(""String_Node_Str"",e);
  }
catch (  IOException e) {
    if (!tempFile.delete())     throw new ContentStoreException(""String_Node_Str"" + tempFilePath + ""String_Node_Str""+ filename+ ""String_Node_Str"",e);
    throw new ContentStoreException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (outFile != null)       outFile.close();
      inStream.close();
    }
 catch (    IOException e) {
      throw new ContentStoreException(""String_Node_Str"",e);
    }
  }
  if (!tempFile.renameTo(outputFile))   throw new ContentStoreException(""String_Node_Str"" + tempFilePath + ""String_Node_Str""+ filename+ ""String_Node_Str"");
  try {
    if (this.webGroupId != 0) {
      posix.chmod(outputFile.getCanonicalPath(),0664);
      posix.chown(outputFile.getCanonicalPath(),-1,this.webGroupId);
    }
  }
 catch (  IOException e) {
    throw new ContentStoreException(""String_Node_Str"",e);
  }
}",0.98861852433281
10115,"public String doCleanLink(String link){
  if (link == null)   return null;
  try {
    if (link.endsWith(""String_Node_Str""))     link=link + ""String_Node_Str"";
    link=URLDecoder.decode(link,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
  }
  return link;
}","public String doCleanLink(String link){
  if (link == null)   return null;
  try {
    link=URLDecoder.decode(link,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
  }
  return link;
}",0.8405797101449275
10116,"public String doClean(String text){
  if (text == null)   return null;
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return this.cleanSimple(text);
}","public String doClean(String text){
  if (text == null)   return null;
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return this.cleanSimple(text);
}",0.9671513193322564
10117,"public String cleanLink(String text){
  return super.doCleanLink(super.doClean(text));
}","public String cleanLink(String text){
  if (text == null)   return null;
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return super.doCleanLink(super.doClean(text));
}",0.6470588235294118
10118,"public String doClean(String text){
  if (text == null)   return null;
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return this.cleanSimple(text);
}","public String doClean(String text){
  if (text == null)   return null;
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return this.cleanSimple(text);
}",0.9671513193322564
10119,"private Post makePostFromJson(PostJson pj) throws ContentParseException {
  if (pj.getNo() == 0) {
    throw new ContentParseException(""String_Node_Str"");
  }
  if (pj.getTime() == 0) {
    throw new ContentParseException(""String_Node_Str"");
  }
  Post p=new Post();
  if (pj.getFilename() != null) {
    p.setMediaFilename(pj.getFilename() + pj.getExt());
    p.setMediaOrig(pj.getTim() + pj.getExt());
    p.setPreviewOrig(pj.getTim() + ""String_Node_Str"");
  }
  String capcode=pj.getCapcode();
  if (capcode != null)   capcode=capcode.substring(0,1).toUpperCase();
  String posterCountry=pj.getCountry();
  if (posterCountry != null && (posterCountry.equals(""String_Node_Str"") || posterCountry.equals(""String_Node_Str"")))   posterCountry=null;
  p.setType(pj.getExt());
  p.setMediaHash(pj.getMd5());
  p.setMediaSize(pj.getFsize());
  p.setMediaW(pj.getW());
  p.setMediaH(pj.getH());
  p.setPreviewW(pj.getTnW());
  p.setPreviewH(pj.getTnH());
  p.setNum(pj.getNo());
  p.setThreadNum(pj.getResto() == 0 ? pj.getNo() : pj.getResto());
  p.setOp(pj.getResto() == 0);
  p.setTitle(this.cleanSimple(pj.getSub()));
  p.setEmail(this.cleanLink(pj.getEmail()));
  p.setName(this.cleanSimple(pj.getName()));
  p.setTrip(pj.getTrip());
  p.setDate(this.parseDate(pj.getTime()));
  p.setComment(this.doClean(pj.getCom()));
  p.setSpoiler(pj.isSpoiler());
  p.setDeleted(false);
  p.setSticky(pj.isSticky());
  p.setCapcode(capcode);
  p.setPosterHash(pj.getId());
  p.setPosterCountry(posterCountry);
  p.setDateExpired(0);
  p.setExif(null);
  return p;
}","private Post makePostFromJson(PostJson pj) throws ContentParseException {
  if (pj.getNo() == 0) {
    throw new ContentParseException(""String_Node_Str"");
  }
  if (pj.getTime() == 0) {
    throw new ContentParseException(""String_Node_Str"");
  }
  Post p=new Post();
  if (pj.getFilename() != null) {
    p.setMediaFilename(pj.getFilename() + pj.getExt());
    p.setMediaOrig(pj.getTim() + pj.getExt());
    p.setPreviewOrig(pj.getTim() + ""String_Node_Str"");
  }
  String capcode=pj.getCapcode();
  if (capcode != null)   capcode=capcode.substring(0,1).toUpperCase();
  String posterHash=pj.getId();
  if (posterHash != null && posterHash.equals(""String_Node_Str""))   posterHash=""String_Node_Str"";
  String posterCountry=pj.getCountry();
  if (posterCountry != null && (posterCountry.equals(""String_Node_Str"") || posterCountry.equals(""String_Node_Str"")))   posterCountry=null;
  p.setType(pj.getExt());
  p.setMediaHash(pj.getMd5());
  p.setMediaSize(pj.getFsize());
  p.setMediaW(pj.getW());
  p.setMediaH(pj.getH());
  p.setPreviewW(pj.getTnW());
  p.setPreviewH(pj.getTnH());
  p.setNum(pj.getNo());
  p.setThreadNum(pj.getResto() == 0 ? pj.getNo() : pj.getResto());
  p.setOp(pj.getResto() == 0);
  p.setTitle(this.cleanSimple(pj.getSub()));
  p.setEmail(this.cleanLink(pj.getEmail()));
  p.setName(this.cleanSimple(pj.getName()));
  p.setTrip(pj.getTrip());
  p.setDate(this.parseDate(pj.getTime()));
  p.setComment(this.doClean(pj.getCom()));
  p.setSpoiler(pj.isSpoiler());
  p.setDeleted(false);
  p.setSticky(pj.isSticky());
  p.setCapcode(capcode);
  p.setPosterHash(posterHash);
  p.setPosterCountry(posterCountry);
  p.setDateExpired(0);
  p.setExif(null);
  return p;
}",0.9282622139764996
10120,"public synchronized void createTables() throws BoardInitException, SQLException {
  return;
}","public synchronized void createTables() throws BoardInitException, SQLException {
  PreparedStatement pst=conn.prepareStatement(""String_Node_Str"");
  ResultSet res=null;
  String commonSql=null;
  try {
    pst.setString(1,""String_Node_Str"");
    res=pst.executeQuery();
    if (!res.isBeforeFirst()) {
      try {
        commonSql=Resources.toString(Resources.getResource(""String_Node_Str""),Charsets.UTF_8);
      }
 catch (      IOException e) {
        throw new BoardInitException(e);
      }
catch (      IllegalArgumentException e) {
        throw new BoardInitException(e);
      }
    }
  }
  finally {
    pst.close();
    conn.commit();
  }
  pst=conn.prepareStatement(""String_Node_Str"");
  try {
    pst.setString(1,this.table);
    res=pst.executeQuery();
    if (res.isBeforeFirst())     return;
  }
  finally {
    pst.close();
    conn.commit();
  }
  String boardSql;
  try {
    boardSql=Resources.toString(Resources.getResource(""String_Node_Str""),Charsets.UTF_8);
    boardSql=boardSql.replaceAll(""String_Node_Str"",table);
  }
 catch (  IOException e) {
    throw new BoardInitException(e);
  }
catch (  IllegalArgumentException e) {
    throw new BoardInitException(e);
  }
  String triggersSql;
  try {
    triggersSql=Resources.toString(Resources.getResource(""String_Node_Str""),Charsets.UTF_8);
    triggersSql=triggersSql.replaceAll(""String_Node_Str"",table);
  }
 catch (  IOException e) {
    throw new BoardInitException(e);
  }
catch (  IllegalArgumentException e) {
    throw new BoardInitException(e);
  }
  Statement st=conn.createStatement();
  try {
    if (commonSql != null)     st.executeUpdate(commonSql);
    st.executeUpdate(boardSql);
    st.executeUpdate(triggersSql);
    conn.commit();
  }
  finally {
    st.close();
  }
}",0.0915455035002692
10121,"public synchronized void init(String connStr,String path,BoardSettings info) throws BoardInitException {
  this.table=info.getTable();
  if (this.insertQuery == null) {
    this.insertQuery=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",this.table,this.table);
  }
  this.updateQuery=String.format(""String_Node_Str"" + ""String_Node_Str"",table);
  String selectMediaQuery=String.format(""String_Node_Str"",table);
  try {
    conn=DriverManager.getConnection(connStr);
    conn.setAutoCommit(true);
    conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
    this.createTables();
    insertStmt=conn.prepareStatement(insertQuery);
    updateStmt=conn.prepareStatement(updateQuery);
    selectMediaStmt=conn.prepareStatement(selectMediaQuery);
  }
 catch (  SQLException e) {
    throw new BoardInitException(e);
  }
}","public synchronized void init(String connStr,String path,BoardSettings info) throws BoardInitException {
  this.table=info.getTable();
  if (this.insertQuery == null) {
    this.insertQuery=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",this.table,this.table);
  }
  this.updateQuery=String.format(""String_Node_Str"" + ""String_Node_Str"",table);
  String selectMediaQuery=String.format(""String_Node_Str"",table);
  try {
    conn=DriverManager.getConnection(connStr);
    conn.setAutoCommit(false);
    conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
    this.createTables();
    insertStmt=conn.prepareStatement(insertQuery);
    updateStmt=conn.prepareStatement(updateQuery);
    selectMediaStmt=conn.prepareStatement(selectMediaQuery);
  }
 catch (  SQLException e) {
    throw new BoardInitException(e);
  }
}",0.9961559582646896
10122,"public synchronized Media getMedia(Post post) throws ContentGetException {
  Media media=null;
  ResultSet mediaRs=null;
  try {
    selectMediaStmt.setString(1,post.getMediaHash());
    mediaRs=selectMediaStmt.executeQuery();
  }
 catch (  SQLException e) {
    throw new ContentGetException(e);
  }
  try {
    if (mediaRs.next()) {
      media=new Media(mediaRs.getInt(""String_Node_Str""),mediaRs.getString(""String_Node_Str""),mediaRs.getString(""String_Node_Str""),mediaRs.getString(""String_Node_Str""),mediaRs.getString(""String_Node_Str""),mediaRs.getInt(""String_Node_Str""),mediaRs.getInt(""String_Node_Str""));
    }
  }
 catch (  SQLException e) {
    throw new ContentGetException(e);
  }
 finally {
    try {
      mediaRs.close();
    }
 catch (    SQLException e) {
      throw new ContentGetException(e);
    }
  }
  if (media == null) {
    throw new ContentGetException(""String_Node_Str"" + post.getMediaHash() + ""String_Node_Str"");
  }
  return media;
}","public synchronized Media getMedia(Post post) throws ContentGetException {
  Media media=null;
  ResultSet mediaRs=null;
  try {
    selectMediaStmt.setString(1,post.getMediaHash());
    mediaRs=selectMediaStmt.executeQuery();
  }
 catch (  SQLException e) {
    throw new ContentGetException(e);
  }
  try {
    conn.commit();
  }
 catch (  SQLException e) {
    try {
      conn.rollback();
    }
 catch (    SQLException e1) {
      e1.setNextException(e);
      throw new ContentGetException(e1);
    }
 finally {
      try {
        mediaRs.close();
      }
 catch (      SQLException e1) {
        throw new ContentGetException(e1);
      }
    }
    throw new ContentGetException(e);
  }
  try {
    if (mediaRs.next()) {
      media=new Media(mediaRs.getInt(""String_Node_Str""),mediaRs.getString(""String_Node_Str""),mediaRs.getString(""String_Node_Str""),mediaRs.getString(""String_Node_Str""),mediaRs.getString(""String_Node_Str""),mediaRs.getInt(""String_Node_Str""),mediaRs.getInt(""String_Node_Str""));
    }
  }
 catch (  SQLException e) {
    throw new ContentGetException(e);
  }
 finally {
    try {
      mediaRs.close();
    }
 catch (    SQLException e) {
      throw new ContentGetException(e);
    }
  }
  if (media == null) {
    throw new ContentGetException(""String_Node_Str"" + post.getMediaHash() + ""String_Node_Str"");
  }
  return media;
}",0.509515570934256
10123,"public synchronized void insert(Topic topic) throws ContentStoreException {
  try {
    for (    Post post : topic.getPosts()) {
      int c=1;
      updateStmt.setString(c++,post.getComment());
      updateStmt.setBoolean(c++,post.isDeleted());
      updateStmt.setString(c++,post.getMedia());
      updateStmt.setBoolean(c++,post.isSticky());
      updateStmt.setInt(c++,post.getNum());
      updateStmt.setInt(c++,post.getSubnum());
      updateStmt.addBatch();
      c=1;
      insertStmt.setInt(c++,post.getId());
      insertStmt.setInt(c++,post.getNum());
      insertStmt.setInt(c++,post.getSubnum());
      insertStmt.setInt(c++,post.getParent());
      insertStmt.setInt(c++,post.getDate());
      insertStmt.setString(c++,post.getPreview());
      insertStmt.setInt(c++,post.getPreviewW());
      insertStmt.setInt(c++,post.getPreviewH());
      insertStmt.setString(c++,post.getMedia());
      insertStmt.setInt(c++,post.getMediaW());
      insertStmt.setInt(c++,post.getMediaH());
      insertStmt.setInt(c++,post.getMediaSize());
      insertStmt.setString(c++,post.getMediaHash());
      insertStmt.setString(c++,post.getMediaFilename());
      insertStmt.setBoolean(c++,post.isSpoiler());
      insertStmt.setBoolean(c++,post.isDeleted());
      insertStmt.setString(c++,(post.getCapcode() != null) ? post.getCapcode() : ""String_Node_Str"");
      insertStmt.setString(c++,post.getEmail());
      insertStmt.setString(c++,post.getName());
      insertStmt.setString(c++,post.getTrip());
      insertStmt.setString(c++,post.getTitle());
      insertStmt.setString(c++,post.getComment());
      insertStmt.setString(c++,post.getDelpass());
      insertStmt.setBoolean(c++,post.isSticky());
      insertStmt.setInt(c++,post.getNum());
      insertStmt.setInt(c++,post.getSubnum());
      insertStmt.addBatch();
    }
    insertStmt.executeBatch();
    updateStmt.executeBatch();
  }
 catch (  SQLException e) {
    throw new ContentStoreException(e);
  }
}","public synchronized void insert(Topic topic) throws ContentStoreException {
  try {
    for (    Post post : topic.getPosts()) {
      int c=1;
      updateStmt.setString(c++,post.getComment());
      updateStmt.setBoolean(c++,post.isDeleted());
      updateStmt.setString(c++,post.getMedia());
      updateStmt.setBoolean(c++,post.isSticky());
      updateStmt.setInt(c++,post.getNum());
      updateStmt.setInt(c++,post.getSubnum());
      updateStmt.addBatch();
      c=1;
      insertStmt.setInt(c++,post.getId());
      insertStmt.setInt(c++,post.getNum());
      insertStmt.setInt(c++,post.getSubnum());
      insertStmt.setInt(c++,post.getParent());
      insertStmt.setInt(c++,post.getDate());
      insertStmt.setString(c++,post.getPreview());
      insertStmt.setInt(c++,post.getPreviewW());
      insertStmt.setInt(c++,post.getPreviewH());
      insertStmt.setString(c++,post.getMedia());
      insertStmt.setInt(c++,post.getMediaW());
      insertStmt.setInt(c++,post.getMediaH());
      insertStmt.setInt(c++,post.getMediaSize());
      insertStmt.setString(c++,post.getMediaHash());
      insertStmt.setString(c++,post.getMediaFilename());
      insertStmt.setBoolean(c++,post.isSpoiler());
      insertStmt.setBoolean(c++,post.isDeleted());
      insertStmt.setString(c++,(post.getCapcode() != null) ? post.getCapcode() : ""String_Node_Str"");
      insertStmt.setString(c++,post.getEmail());
      insertStmt.setString(c++,post.getName());
      insertStmt.setString(c++,post.getTrip());
      insertStmt.setString(c++,post.getTitle());
      insertStmt.setString(c++,post.getComment());
      insertStmt.setString(c++,post.getDelpass());
      insertStmt.setBoolean(c++,post.isSticky());
      insertStmt.setInt(c++,post.getNum());
      insertStmt.setInt(c++,post.getSubnum());
      insertStmt.addBatch();
    }
    insertStmt.executeBatch();
    updateStmt.executeBatch();
    conn.commit();
  }
 catch (  SQLException e) {
    try {
      conn.rollback();
    }
 catch (    SQLException e1) {
      e1.setNextException(e);
      throw new ContentStoreException(e1);
    }
    throw new ContentStoreException(e);
  }
}",0.9468810916179338
10124,"protected Column createColumn(ByteBuffer name,ByteBuffer value){
  Column column=new Column();
  column.setName(name);
  column.setValue(value);
  column.setTimestamp(getTimestamp());
  return column;
}","protected Column createColumn(ByteBuffer name,ByteBuffer value){
  Column column=new Column();
  column.setName(name);
  column.setValue(value);
  column.setTimestamp(getTimestamp() + 1);
  return column;
}",0.9901960784313726
10125,"protected long getTimestamp(){
  return System.currentTimeMillis() * 1000;
}","protected long getTimestamp(){
  return System.nanoTime() * 10;
}",0.8794326241134752
10126,"public dEntity getEntityFrom(dPlayer player,dNPC npc){
  dEntity entity=null;
  try {
    if (contains(""String_Node_Str"")) {
      String entityType=TagManager.tag((getString(""String_Node_Str"",""String_Node_Str"")),new BukkitTagContext(player,npc,false,null,shouldDebug(),new dScript(this)));
      entity=dEntity.valueOf(entityType);
    }
 else {
      throw new Exception(""String_Node_Str"");
    }
    Set<StringHolder> strings=getConfigurationSection(""String_Node_Str"").getKeys(false);
    for (    StringHolder string : strings) {
      if (!string.low.equals(""String_Node_Str"") && !string.low.equals(""String_Node_Str"")) {
        String value=TagManager.tag((getString(string.low,""String_Node_Str"")),new BukkitTagContext(player,npc,false,null,shouldDebug(),new dScript(this)));
        entity.adjust(new Mechanism(new Element(string.low),new Element(value)));
      }
    }
    if (entity == null || entity.isUnique()) {
      return null;
    }
    entity.setEntityScript(getName());
  }
 catch (  Exception e) {
    dB.echoError(""String_Node_Str"");
    dB.echoError(e);
    entity=null;
  }
  return entity;
}","public dEntity getEntityFrom(dPlayer player,dNPC npc){
  dEntity entity=null;
  try {
    if (contains(""String_Node_Str"")) {
      String entityType=TagManager.tag((getString(""String_Node_Str"",""String_Node_Str"")),new BukkitTagContext(player,npc,false,null,shouldDebug(),new dScript(this)));
      entity=dEntity.valueOf(entityType);
    }
 else {
      throw new Exception(""String_Node_Str"");
    }
    Set<StringHolder> strings=getConfigurationSection(""String_Node_Str"").getKeys(false);
    for (    StringHolder string : strings) {
      if (!string.low.equals(""String_Node_Str"") && !string.low.equals(""String_Node_Str"") && !string.low.equals(""String_Node_Str"")) {
        String value=TagManager.tag((getString(string.low,""String_Node_Str"")),new BukkitTagContext(player,npc,false,null,shouldDebug(),new dScript(this)));
        entity.adjust(new Mechanism(new Element(string.low),new Element(value)));
      }
    }
    if (entity == null || entity.isUnique()) {
      return null;
    }
    entity.setEntityScript(getName());
  }
 catch (  Exception e) {
    dB.echoError(""String_Node_Str"");
    dB.echoError(e);
    entity=null;
  }
  return entity;
}",0.9819462791721708
10127,"@Override public String identify(){
  for (  Field field : Color.class.getFields()) {
    try {
      if (((Color)field.get(null)).asRGB() == getColor().asRGB()) {
        return ""String_Node_Str"" + field.getName();
      }
    }
 catch (    Exception e) {
      dB.echoError(""String_Node_Str"");
    }
  }
  return ""String_Node_Str"" + getColor().getRed() + ""String_Node_Str""+ getColor().getGreen()+ ""String_Node_Str""+ getColor().getBlue();
}","@Override public String identify(){
  for (  Field field : Color.class.getFields()) {
    try {
      if (Color.class.isAssignableFrom(field.getType()) && ((Color)field.get(null)).asRGB() == getColor().asRGB()) {
        return ""String_Node_Str"" + field.getName();
      }
    }
 catch (    Exception e) {
      dB.echoError(""String_Node_Str"" + e.getClass().getCanonicalName() + ""String_Node_Str""+ e.getMessage());
    }
  }
  return ""String_Node_Str"" + getColor().getRed() + ""String_Node_Str""+ getColor().getGreen()+ ""String_Node_Str""+ getColor().getBlue();
}",0.8811188811188811
10128,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null) {
    return null;
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    Material mat=item.getItemStack().getType();
    if (NMSHandler.getVersion().isAtLeast(NMSVersion.v1_9_R2) && (mat == Material.POTION || mat == Material.LINGERING_POTION || mat == Material.SPLASH_POTION)) {
      return new dColor(((PotionMeta)item.getItemStack().getItemMeta()).getColor()).getAttribute(attribute.fulfill((1)));
    }
    return new dColor(((LeatherArmorMeta)item.getItemStack().getItemMeta()).getColor()).getAttribute(attribute.fulfill(1));
  }
  return null;
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null) {
    return null;
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    Material mat=item.getItemStack().getType();
    if (NMSHandler.getVersion().isAtLeast(NMSVersion.v1_9_R2) && (mat == Material.POTION || mat == Material.LINGERING_POTION || mat == Material.SPLASH_POTION)) {
      PotionMeta pm=(PotionMeta)item.getItemStack().getItemMeta();
      if (!pm.hasColor()) {
        return new dColor(Color.WHITE).getAttribute(attribute.fulfill((1)));
      }
      return new dColor(pm.getColor()).getAttribute(attribute.fulfill((1)));
    }
    return new dColor(((LeatherArmorMeta)item.getItemStack().getItemMeta()).getColor()).getAttribute(attribute.fulfill(1));
  }
  return null;
}",0.7080828323313293
10129,"@Override public String getPropertyString(){
  Material mat=item.getItemStack().getType();
  if (NMSHandler.getVersion().isAtLeast(NMSVersion.v1_9_R2) && (mat == Material.POTION || mat == Material.LINGERING_POTION || mat == Material.SPLASH_POTION)) {
    return new dColor(((PotionMeta)item.getItemStack().getItemMeta()).getColor()).identify();
  }
  return new dColor(((LeatherArmorMeta)item.getItemStack().getItemMeta()).getColor()).identify();
}","@Override public String getPropertyString(){
  Material mat=item.getItemStack().getType();
  if (NMSHandler.getVersion().isAtLeast(NMSVersion.v1_9_R2) && (mat == Material.POTION || mat == Material.LINGERING_POTION || mat == Material.SPLASH_POTION)) {
    PotionMeta pm=(PotionMeta)item.getItemStack().getItemMeta();
    if (!pm.hasColor()) {
      return null;
    }
    return new dColor(pm.getColor()).identify();
  }
  return new dColor(((LeatherArmorMeta)item.getItemStack().getItemMeta()).getColor()).identify();
}",0.6990692864529473
10130,"@Override public void adjust(Mechanism mechanism){
  Element value=mechanism.getValue();
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireObject(dScript.class)) {
    getAssignmentTrait().setAssignment(value.asType(dScript.class).getName(),null);
  }
  if (mechanism.matches(""String_Node_Str"")) {
    getAssignmentTrait().removeAssignment(null);
  }
  if (mechanism.matches(""String_Node_Str"")) {
    getNicknameTrait().setNickname(value.asString());
  }
  if (mechanism.matches(""String_Node_Str"")) {
    getNicknameTrait().removeNickname();
  }
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireObject(dEntity.class)) {
    getCitizen().setBukkitEntityType(value.asType(dEntity.class).getBukkitEntityType());
  }
  if (mechanism.matches(""String_Node_Str"") || mechanism.matches(""String_Node_Str"")) {
    getCitizen().setName(value.asString().length() > 64 ? value.asString().substring(0,64) : value.asString());
  }
  if (mechanism.matches(""String_Node_Str"")) {
    getCitizen().getTrait(Owner.class).setOwner(value.asString());
  }
  if (mechanism.matches(""String_Node_Str"")) {
    if (!mechanism.hasValue()) {
      getCitizen().data().remove(""String_Node_Str"");
      getCitizen().data().remove(NPC.PLAYER_SKIN_TEXTURE_PROPERTIES_METADATA);
      getCitizen().data().remove(NPC.PLAYER_SKIN_TEXTURE_PROPERTIES_SIGN_METADATA);
      if (getCitizen().isSpawned()) {
        getCitizen().despawn(DespawnReason.PENDING_RESPAWN);
        getCitizen().spawn(getCitizen().getStoredLocation());
      }
    }
 else {
      String[] dat=mechanism.getValue().asString().split(""String_Node_Str"");
      getCitizen().data().remove(""String_Node_Str"");
      getCitizen().data().setPersistent(NPC.PLAYER_SKIN_TEXTURE_PROPERTIES_METADATA,dat[0]);
      getCitizen().data().setPersistent(NPC.PLAYER_SKIN_TEXTURE_PROPERTIES_SIGN_METADATA,dat.length > 0 ? dat[1] : null);
      if (dat.length > 1) {
        getCitizen().data().setPersistent(NPC.PLAYER_SKIN_UUID_METADATA,dat[2]);
      }
      if (getCitizen().isSpawned() && getCitizen().getEntity() instanceof SkinnableEntity) {
        ((SkinnableEntity)getCitizen().getEntity()).setSkinPersistent(dat.length > 1 ? dat[2] : ""String_Node_Str"",dat.length > 0 ? dat[1] : null,dat[0]);
        ((SkinnableEntity)getCitizen().getEntity()).getSkinTracker().notifySkinChange(true);
      }
    }
  }
  if (mechanism.matches(""String_Node_Str"")) {
    if (!mechanism.hasValue()) {
      getCitizen().data().remove(NPC.PLAYER_SKIN_UUID_METADATA);
    }
 else {
      getCitizen().data().setPersistent(NPC.PLAYER_SKIN_UUID_METADATA,mechanism.getValue().asString());
    }
    if (getCitizen().isSpawned()) {
      getCitizen().despawn(DespawnReason.PENDING_RESPAWN);
      getCitizen().spawn(getCitizen().getStoredLocation());
    }
  }
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireObject(dItem.class)) {
    dItem item=mechanism.getValue().asType(dItem.class);
    Material mat=item.getMaterial().getMaterial();
    int data=item.getMaterial().getData((byte)0);
switch (getEntity().getType()) {
case DROPPED_ITEM:
      ((org.bukkit.entity.Item)getEntity()).getItemStack().setType(mat);
    break;
case ITEM_FRAME:
  ((ItemFrame)getEntity()).getItem().setType(mat);
break;
case FALLING_BLOCK:
break;
default :
dB.echoError(""String_Node_Str"");
break;
}
if (getCitizen().isSpawned()) {
getCitizen().despawn();
getCitizen().spawn(getCitizen().getStoredLocation());
}
}
if (mechanism.matches(""String_Node_Str"")) {
if (mechanism.requireObject(""String_Node_Str"",dLocation.class)) {
getCitizen().spawn(value.asType(dLocation.class));
}
 else {
getCitizen().spawn(getCitizen().getStoredLocation());
}
}
if (mechanism.matches(""String_Node_Str"") && mechanism.requireFloat()) {
getCitizen().getNavigator().getDefaultParameters().range(mechanism.getValue().asFloat());
}
if (mechanism.matches(""String_Node_Str"") && mechanism.requireFloat()) {
getCitizen().getNavigator().getDefaultParameters().attackRange(mechanism.getValue().asFloat());
}
if (mechanism.matches(""String_Node_Str"") && mechanism.requireFloat()) {
getCitizen().getNavigator().getDefaultParameters().speedModifier(mechanism.getValue().asFloat());
}
if (mechanism.matches(""String_Node_Str"")) {
getCitizen().despawn(DespawnReason.PLUGIN);
}
if (mechanism.matches(""String_Node_Str"") && mechanism.requireBoolean()) {
getCitizen().setProtected(value.asBoolean());
}
if (mechanism.matches(""String_Node_Str"") && mechanism.requireBoolean()) {
getLookCloseTrait().lookClose(value.asBoolean());
}
if (mechanism.matches(""String_Node_Str"")) {
if (mechanism.getValue().toString().equalsIgnoreCase(""String_Node_Str"")) {
getNavigator().getLocalParameters().clearExaminers();
getNavigator().getLocalParameters().examiner(new MinecraftBlockExaminer());
}
 else if (mechanism.getValue().toString().equalsIgnoreCase(""String_Node_Str"")) {
getNavigator().getLocalParameters().clearExaminers();
getNavigator().getLocalParameters().examiner(new FlyingBlockExaminer());
}
 else if (mechanism.getValue().toString().equalsIgnoreCase(""String_Node_Str"")) {
getNavigator().getLocalParameters().clearExaminers();
getNavigator().getLocalParameters().examiner(new PathBlockExaminer(this,null));
}
}
if (mechanism.matches(""String_Node_Str"") && mechanism.requireBoolean()) {
if (value.asBoolean()) {
getNavigator().getDefaultParameters().stuckAction(TeleportStuckAction.INSTANCE);
}
 else {
getNavigator().getDefaultParameters().stuckAction(null);
}
}
if (mechanism.matches(""String_Node_Str"") && mechanism.requireDouble()) {
getNavigator().getDefaultParameters().distanceMargin(mechanism.getValue().asDouble());
}
if (mechanism.matches(""String_Node_Str"") && mechanism.requireObject(dLocation.class)) {
if (!getCitizen().hasTrait(Waypoints.class)) {
getCitizen().addTrait(Waypoints.class);
}
Waypoints wp=getCitizen().getTrait(Waypoints.class);
if ((wp.getCurrentProvider() instanceof WaypointProvider.EnumerableWaypointProvider)) {
((List<Waypoint>)((WaypointProvider.EnumerableWaypointProvider)wp.getCurrentProvider()).waypoints()).add(new Waypoint(value.asType(dLocation.class)));
}
}
for (Property property : PropertyParser.getProperties(this)) {
property.adjust(mechanism);
if (mechanism.fulfilled()) {
break;
}
}
if (!mechanism.fulfilled()) {
if (isSpawned()) {
new dEntity(getEntity()).adjust(mechanism);
}
 else {
mechanism.reportInvalid();
}
}
}","@Override public void adjust(Mechanism mechanism){
  Element value=mechanism.getValue();
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireObject(dScript.class)) {
    getAssignmentTrait().setAssignment(value.asType(dScript.class).getName(),null);
  }
  if (mechanism.matches(""String_Node_Str"")) {
    getAssignmentTrait().removeAssignment(null);
  }
  if (mechanism.matches(""String_Node_Str"")) {
    getNicknameTrait().setNickname(value.asString());
  }
  if (mechanism.matches(""String_Node_Str"")) {
    getNicknameTrait().removeNickname();
  }
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireObject(dEntity.class)) {
    getCitizen().setBukkitEntityType(value.asType(dEntity.class).getBukkitEntityType());
  }
  if (mechanism.matches(""String_Node_Str"") || mechanism.matches(""String_Node_Str"")) {
    getCitizen().setName(value.asString().length() > 64 ? value.asString().substring(0,64) : value.asString());
  }
  if (mechanism.matches(""String_Node_Str"")) {
    getCitizen().getTrait(Owner.class).setOwner(value.asString());
  }
  if (mechanism.matches(""String_Node_Str"")) {
    if (!mechanism.hasValue()) {
      getCitizen().data().remove(""String_Node_Str"");
      getCitizen().data().remove(NPC.PLAYER_SKIN_TEXTURE_PROPERTIES_METADATA);
      getCitizen().data().remove(NPC.PLAYER_SKIN_TEXTURE_PROPERTIES_SIGN_METADATA);
      if (getCitizen().isSpawned()) {
        getCitizen().despawn(DespawnReason.PENDING_RESPAWN);
        getCitizen().spawn(getCitizen().getStoredLocation());
      }
    }
 else {
      String[] dat=mechanism.getValue().asString().split(""String_Node_Str"");
      getCitizen().data().remove(""String_Node_Str"");
      getCitizen().data().setPersistent(NPC.PLAYER_SKIN_TEXTURE_PROPERTIES_METADATA,dat[0]);
      getCitizen().data().setPersistent(NPC.PLAYER_SKIN_TEXTURE_PROPERTIES_SIGN_METADATA,dat.length > 1 ? dat[1] : null);
      if (dat.length > 2) {
        getCitizen().data().setPersistent(NPC.PLAYER_SKIN_UUID_METADATA,dat[2]);
      }
      if (getCitizen().isSpawned() && getCitizen().getEntity() instanceof SkinnableEntity) {
        ((SkinnableEntity)getCitizen().getEntity()).setSkinPersistent(dat.length > 2 ? dat[2] : ""String_Node_Str"",dat.length > 1 ? dat[1] : null,dat[0]);
        ((SkinnableEntity)getCitizen().getEntity()).getSkinTracker().notifySkinChange(true);
      }
    }
  }
  if (mechanism.matches(""String_Node_Str"")) {
    if (!mechanism.hasValue()) {
      getCitizen().data().remove(NPC.PLAYER_SKIN_UUID_METADATA);
    }
 else {
      getCitizen().data().setPersistent(NPC.PLAYER_SKIN_UUID_METADATA,mechanism.getValue().asString());
    }
    if (getCitizen().isSpawned()) {
      getCitizen().despawn(DespawnReason.PENDING_RESPAWN);
      getCitizen().spawn(getCitizen().getStoredLocation());
    }
  }
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireObject(dItem.class)) {
    dItem item=mechanism.getValue().asType(dItem.class);
    Material mat=item.getMaterial().getMaterial();
    int data=item.getMaterial().getData((byte)0);
switch (getEntity().getType()) {
case DROPPED_ITEM:
      ((org.bukkit.entity.Item)getEntity()).getItemStack().setType(mat);
    break;
case ITEM_FRAME:
  ((ItemFrame)getEntity()).getItem().setType(mat);
break;
case FALLING_BLOCK:
break;
default :
dB.echoError(""String_Node_Str"");
break;
}
if (getCitizen().isSpawned()) {
getCitizen().despawn();
getCitizen().spawn(getCitizen().getStoredLocation());
}
}
if (mechanism.matches(""String_Node_Str"")) {
if (mechanism.requireObject(""String_Node_Str"",dLocation.class)) {
getCitizen().spawn(value.asType(dLocation.class));
}
 else {
getCitizen().spawn(getCitizen().getStoredLocation());
}
}
if (mechanism.matches(""String_Node_Str"") && mechanism.requireFloat()) {
getCitizen().getNavigator().getDefaultParameters().range(mechanism.getValue().asFloat());
}
if (mechanism.matches(""String_Node_Str"") && mechanism.requireFloat()) {
getCitizen().getNavigator().getDefaultParameters().attackRange(mechanism.getValue().asFloat());
}
if (mechanism.matches(""String_Node_Str"") && mechanism.requireFloat()) {
getCitizen().getNavigator().getDefaultParameters().speedModifier(mechanism.getValue().asFloat());
}
if (mechanism.matches(""String_Node_Str"")) {
getCitizen().despawn(DespawnReason.PLUGIN);
}
if (mechanism.matches(""String_Node_Str"") && mechanism.requireBoolean()) {
getCitizen().setProtected(value.asBoolean());
}
if (mechanism.matches(""String_Node_Str"") && mechanism.requireBoolean()) {
getLookCloseTrait().lookClose(value.asBoolean());
}
if (mechanism.matches(""String_Node_Str"")) {
if (mechanism.getValue().toString().equalsIgnoreCase(""String_Node_Str"")) {
getNavigator().getLocalParameters().clearExaminers();
getNavigator().getLocalParameters().examiner(new MinecraftBlockExaminer());
}
 else if (mechanism.getValue().toString().equalsIgnoreCase(""String_Node_Str"")) {
getNavigator().getLocalParameters().clearExaminers();
getNavigator().getLocalParameters().examiner(new FlyingBlockExaminer());
}
 else if (mechanism.getValue().toString().equalsIgnoreCase(""String_Node_Str"")) {
getNavigator().getLocalParameters().clearExaminers();
getNavigator().getLocalParameters().examiner(new PathBlockExaminer(this,null));
}
}
if (mechanism.matches(""String_Node_Str"") && mechanism.requireBoolean()) {
if (value.asBoolean()) {
getNavigator().getDefaultParameters().stuckAction(TeleportStuckAction.INSTANCE);
}
 else {
getNavigator().getDefaultParameters().stuckAction(null);
}
}
if (mechanism.matches(""String_Node_Str"") && mechanism.requireDouble()) {
getNavigator().getDefaultParameters().distanceMargin(mechanism.getValue().asDouble());
}
if (mechanism.matches(""String_Node_Str"") && mechanism.requireObject(dLocation.class)) {
if (!getCitizen().hasTrait(Waypoints.class)) {
getCitizen().addTrait(Waypoints.class);
}
Waypoints wp=getCitizen().getTrait(Waypoints.class);
if ((wp.getCurrentProvider() instanceof WaypointProvider.EnumerableWaypointProvider)) {
((List<Waypoint>)((WaypointProvider.EnumerableWaypointProvider)wp.getCurrentProvider()).waypoints()).add(new Waypoint(value.asType(dLocation.class)));
}
}
for (Property property : PropertyParser.getProperties(this)) {
property.adjust(mechanism);
if (mechanism.fulfilled()) {
break;
}
}
if (!mechanism.fulfilled()) {
if (isSpawned()) {
new dEntity(getEntity()).adjust(mechanism);
}
 else {
mechanism.reportInvalid();
}
}
}",0.999369383572442
10131,"/** 
 * Get the location of this entity
 * @return The Location
 */
public dLocation getLocation(){
  if (isUnique() && entity != null) {
    return new dLocation(entity.getLocation());
  }
  return null;
}","/** 
 * Get the location of this entity
 * @return The Location
 */
public dLocation getLocation(){
  if (entity != null) {
    return new dLocation(entity.getLocation());
  }
  return null;
}",0.964824120603015
10132,"public dItem getSpecialRecipeResult(ItemStack[] matrix,Player player){
  master:   for (  Map.Entry<ItemScriptContainer,List<dItem>> entry : ItemScriptContainer.specialrecipesMap.entrySet()) {
    for (int n=0; n < 9; n++) {
      dItem valueN=entry.getValue().get(n);
      dItem matrixN=matrix.length <= n || matrix[n] == null ? new dItem(Material.AIR) : new dItem(matrix[n].clone());
      if (valueN.isItemscript() != matrixN.isItemscript()) {
        continue master;
      }
      if (valueN.isItemscript() && matrixN.isItemscript()) {
        if (!valueN.getScriptName().equalsIgnoreCase(matrixN.getScriptName())) {
          continue master;
        }
      }
 else       if (!valueN.getMaterial().matchesMaterialData(matrixN.getMaterial().getMaterialData())) {
        continue master;
      }
    }
    return entry.getKey().getItemFrom(dPlayer.mirrorBukkitPlayer(player),null);
  }
  primary:   for (  Map.Entry<ItemScriptContainer,List<dItem>> entry : ItemScriptContainer.shapelessRecipesMap.entrySet()) {
    for (int i=0; i < entry.getValue().size(); i++) {
      if (!containsAny(entry.getValue().get(i),matrix)) {
        continue primary;
      }
    }
    int c=0;
    for (int i=0; i < matrix.length; i++) {
      if (matrix[i] != null && matrix[i].getType() != Material.AIR) {
        c++;
      }
    }
    if (c != entry.getValue().size()) {
      continue primary;
    }
    return entry.getKey().getItemFrom(dPlayer.mirrorBukkitPlayer(player),null);
  }
  return null;
}","public dItem getSpecialRecipeResult(ItemStack[] matrix,Player player){
  Map.Entry<ItemScriptContainer,List<dItem>> recipeEntry=getSpecialRecipeEntry(matrix);
  if (recipeEntry != null) {
    return recipeEntry.getKey().getItemFrom(dPlayer.mirrorBukkitPlayer(player),null);
  }
  return null;
}",0.2293064876957494
10133,"@EventHandler public void specialRecipeClick(InventoryClickEvent event){
  if (ItemScriptContainer.specialrecipesMap.isEmpty() && ItemScriptContainer.shapelessRecipesMap.isEmpty()) {
    return;
  }
  if (!(event.getInventory() instanceof CraftingInventory)) {
    return;
  }
  SlotType slotType=event.getSlotType();
  if (slotType.equals(InventoryType.SlotType.CRAFTING) || slotType.equals(InventoryType.SlotType.RESULT)) {
    CraftingInventory inventory=(CraftingInventory)event.getInventory();
    Player player=(Player)event.getWhoClicked();
    if (slotType == SlotType.RESULT && inventory.getResult() != null && inventory.getResult().getData().getItemType() != Material.AIR) {
      PlayerCraftsItemScriptEvent scriptEvent=PlayerCraftsItemScriptEvent.instance;
      scriptEvent.inventory=inventory;
      scriptEvent.result=new dItem(inventory.getResult());
      dList recipeList=new dList();
      for (      ItemStack item : inventory.getMatrix()) {
        if (item != null) {
          recipeList.add(new dItem(item.clone()).identify());
        }
 else {
          recipeList.add(new dItem(Material.AIR).identify());
        }
      }
      scriptEvent.recipe=recipeList;
      scriptEvent.player=dPlayer.mirrorBukkitPlayer(player);
      scriptEvent.resultChanged=false;
      scriptEvent.cancelled=false;
      scriptEvent.fire();
      if (scriptEvent.cancelled) {
        event.setCancelled(true);
        return;
      }
 else       if (scriptEvent.resultChanged) {
        event.setCurrentItem(scriptEvent.result.getItemStack());
      }
    }
    boolean clicked;
    if (slotType == SlotType.RESULT && event.isShiftClick()) {
      clicked=emulateSpecialRecipeResultShiftClick(inventory,player);
    }
 else {
      clicked=processSpecialRecipes(inventory,player);
    }
    if (clicked && slotType.equals(SlotType.RESULT)) {
      removeOneFromEachSlot(inventory,player);
    }
  }
}","@EventHandler public void specialRecipeClick(InventoryClickEvent event){
  if (ItemScriptContainer.specialrecipesMap.isEmpty() && ItemScriptContainer.shapelessRecipesMap.isEmpty()) {
    return;
  }
  if (!(event.getInventory() instanceof CraftingInventory)) {
    return;
  }
  SlotType slotType=event.getSlotType();
  if (slotType.equals(InventoryType.SlotType.CRAFTING) || slotType.equals(InventoryType.SlotType.RESULT)) {
    CraftingInventory inventory=(CraftingInventory)event.getInventory();
    Player player=(Player)event.getWhoClicked();
    Map.Entry<ItemScriptContainer,List<dItem>> recipeEntry=null;
    if (slotType == SlotType.RESULT && inventory.getResult() != null && inventory.getResult().getData().getItemType() != Material.AIR) {
      if (!event.isShiftClick() && event.getCursor().getData().getItemType() != Material.AIR && (!event.getCursor().isSimilar(inventory.getResult()) || event.getCursor().getAmount() + inventory.getResult().getAmount() > event.getCursor().getMaxStackSize())) {
        return;
      }
      recipeEntry=getSpecialRecipeEntry(inventory.getMatrix());
      if (recipeEntry == null) {
        return;
      }
      PlayerCraftsItemScriptEvent scriptEvent=PlayerCraftsItemScriptEvent.instance;
      scriptEvent.inventory=inventory;
      scriptEvent.result=new dItem(inventory.getResult());
      dList recipeList=new dList();
      for (      ItemStack item : inventory.getMatrix()) {
        if (item != null) {
          recipeList.add(new dItem(item.clone()).identify());
        }
 else {
          recipeList.add(new dItem(Material.AIR).identify());
        }
      }
      scriptEvent.recipe=recipeList;
      scriptEvent.player=dPlayer.mirrorBukkitPlayer(player);
      scriptEvent.resultChanged=false;
      scriptEvent.cancelled=false;
      scriptEvent.fire();
      if (scriptEvent.cancelled) {
        event.setCancelled(true);
        return;
      }
 else       if (scriptEvent.resultChanged) {
        event.setCurrentItem(scriptEvent.result.getItemStack());
      }
    }
    boolean clicked;
    if (slotType == SlotType.RESULT && event.isShiftClick()) {
      clicked=emulateSpecialRecipeResultShiftClick(inventory,player);
    }
 else {
      clicked=processSpecialRecipes(inventory,player);
    }
    if (clicked && slotType.equals(SlotType.RESULT)) {
      removeFromEachSlot(inventory,recipeEntry.getValue(),player);
    }
  }
}",0.8847583643122676
10134,"public boolean emulateSpecialRecipeResultShiftClick(CraftingInventory inventory,Player player){
  ItemStack[] matrix=inventory.getMatrix();
  for (int i=0; i < matrix.length; i++) {
    matrix[i]=matrix[i] == null ? new ItemStack(Material.AIR) : matrix[i].clone();
  }
  dItem result=getSpecialRecipeResult(matrix,player);
  if (result != null) {
    int lowestAmount=0;
    for (int n=0; n < matrix.length; n++) {
      if ((matrix[n].getAmount() > 0 && matrix[n].getAmount() < lowestAmount) || lowestAmount == 0) {
        lowestAmount=matrix[n].getAmount();
      }
    }
    for (int n=0; n < matrix.length; n++) {
      if (matrix[n].getAmount() > 0) {
        matrix[n].setAmount(matrix[n].getAmount() - lowestAmount);
        if (matrix[n].getAmount() <= 0) {
          matrix[n]=null;
        }
      }
    }
    if (lowestAmount > 1) {
      ItemStack resultStack=result.getItemStack().clone();
      resultStack.setAmount(lowestAmount * resultStack.getAmount());
      inventory.setMatrix(matrix);
      inventory.setResult(resultStack);
      player.updateInventory();
    }
    return true;
  }
  return false;
}","public boolean emulateSpecialRecipeResultShiftClick(CraftingInventory inventory,Player player){
  ItemStack[] matrix=inventory.getMatrix();
  for (int i=0; i < matrix.length; i++) {
    matrix[i]=matrix[i] == null ? new ItemStack(Material.AIR) : matrix[i].clone();
  }
  Map.Entry<ItemScriptContainer,List<dItem>> recipeEntry=getSpecialRecipeEntry(matrix);
  if (recipeEntry != null) {
    List<dItem> recipe=recipeEntry.getValue();
    dItem result=recipeEntry.getKey().getItemFrom(dPlayer.mirrorBukkitPlayer(player),null);
    int lowestAmount=0;
    for (int n=0; n < matrix.length; n++) {
      if (matrix[n].getAmount() == 0 || recipe.get(n).getAmount() == 0)       continue;
      if ((matrix[n].getAmount() / recipe.get(n).getAmount() < lowestAmount) || lowestAmount == 0) {
        lowestAmount=matrix[n].getAmount() / recipe.get(n).getAmount();
      }
    }
    for (int n=0; n < matrix.length; n++) {
      if (matrix[n].getAmount() > 0) {
        matrix[n].setAmount(matrix[n].getAmount() - lowestAmount * recipe.get(n).getAmount());
        if (matrix[n].getAmount() <= 0) {
          matrix[n]=null;
        }
      }
    }
    if (lowestAmount > 1) {
      ItemStack resultStack=result.getItemStack().clone();
      resultStack.setAmount(lowestAmount * resultStack.getAmount());
      inventory.setMatrix(matrix);
      inventory.setResult(resultStack);
      player.updateInventory();
    }
    return true;
  }
  return false;
}",0.8010899182561307
10135,"public String getPropertyString(){
  ItemStack itemStack=item.getItemStack();
  if (itemStack.hasItemMeta() && itemStack.getItemMeta().spigot().isUnbreakable()) {
    return ""String_Node_Str"";
  }
  return null;
}","public String getPropertyString(){
  ItemStack itemStack=item.getItemStack();
  if (NMSHandler.getVersion().isAtLeast(NMSVersion.v1_11_R1)) {
    return (itemStack.hasItemMeta() && itemStack.getItemMeta().isUnbreakable()) ? ""String_Node_Str"" : null;
  }
  return (itemStack.hasItemMeta() && itemStack.getItemMeta().spigot().isUnbreakable()) ? ""String_Node_Str"" : null;
}",0.6243567753001715
10136,"@Override public void render(MapView mapView,MapCanvas mapCanvas,Player player){
  if (active) {
    try {
      UUID uuid=player.getUniqueId();
      dPlayer p=dPlayer.mirrorBukkitPlayer(player);
      for (      MapObject object : mapObjects) {
        if (autoUpdate) {
          object.update(p,uuid);
        }
        if (object.isVisibleTo(p,uuid)) {
          object.render(mapView,mapCanvas,p,uuid);
        }
      }
    }
 catch (    Exception e) {
      dB.echoError(e);
      mapView.removeRenderer(this);
    }
  }
 else {
    mapView.removeRenderer(this);
  }
}","@Override public void render(MapView mapView,MapCanvas mapCanvas,Player player){
  if (!DenizenAPI.getCurrentInstance().isEnabled()) {
    return;
  }
  if (active) {
    try {
      UUID uuid=player.getUniqueId();
      dPlayer p=dPlayer.mirrorBukkitPlayer(player);
      for (      MapObject object : mapObjects) {
        if (autoUpdate) {
          object.update(p,uuid);
        }
        if (object.isVisibleTo(p,uuid)) {
          object.render(mapView,mapCanvas,p,uuid);
        }
      }
    }
 catch (    Exception e) {
      dB.echoError(e);
      mapView.removeRenderer(this);
    }
  }
 else {
    mapView.removeRenderer(this);
  }
}",0.9427168576104746
10137,"public dItem getSpecialRecipeResult(ItemStack[] matrix,Player player){
  master:   for (  Map.Entry<ItemScriptContainer,List<dItem>> entry : ItemScriptContainer.specialrecipesMap.entrySet()) {
    for (int n=0; n < 9; n++) {
      dItem valueN=entry.getValue().get(n);
      dItem matrixN=matrix.length <= n || matrix[n] == null ? new dItem(Material.AIR) : new dItem(matrix[n].clone());
      if (valueN.isItemscript() != matrixN.isItemscript()) {
        continue master;
      }
      if (valueN.isItemscript() && matrixN.isItemscript()) {
        if (!valueN.getScriptName().equalsIgnoreCase(matrixN.getScriptName())) {
          continue master;
        }
      }
 else       if (!valueN.getMaterial().matchesMaterialData(matrixN.getMaterial().getMaterialData())) {
        continue master;
      }
    }
    return entry.getKey().getItemFrom(dPlayer.mirrorBukkitPlayer(player),null);
  }
  primary:   for (  Map.Entry<ItemScriptContainer,List<dItem>> entry : ItemScriptContainer.shapelessRecipesMap.entrySet()) {
    for (int i=0; i < entry.getValue().size(); i++) {
      if (!containsAny(entry.getValue().get(i),matrix)) {
        continue primary;
      }
    }
    return entry.getKey().getItemFrom(dPlayer.mirrorBukkitPlayer(player),null);
  }
  return null;
}","public dItem getSpecialRecipeResult(ItemStack[] matrix,Player player){
  master:   for (  Map.Entry<ItemScriptContainer,List<dItem>> entry : ItemScriptContainer.specialrecipesMap.entrySet()) {
    for (int n=0; n < 9; n++) {
      dItem valueN=entry.getValue().get(n);
      dItem matrixN=matrix.length <= n || matrix[n] == null ? new dItem(Material.AIR) : new dItem(matrix[n].clone());
      if (valueN.isItemscript() != matrixN.isItemscript()) {
        continue master;
      }
      if (valueN.isItemscript() && matrixN.isItemscript()) {
        if (!valueN.getScriptName().equalsIgnoreCase(matrixN.getScriptName())) {
          continue master;
        }
      }
 else       if (!valueN.getMaterial().matchesMaterialData(matrixN.getMaterial().getMaterialData())) {
        continue master;
      }
    }
    return entry.getKey().getItemFrom(dPlayer.mirrorBukkitPlayer(player),null);
  }
  primary:   for (  Map.Entry<ItemScriptContainer,List<dItem>> entry : ItemScriptContainer.shapelessRecipesMap.entrySet()) {
    for (int i=0; i < entry.getValue().size(); i++) {
      if (!containsAny(entry.getValue().get(i),matrix)) {
        continue primary;
      }
    }
    int c=0;
    for (int i=0; i < matrix.length; i++) {
      if (matrix[i] != null && matrix[i].getType() != Material.AIR) {
        c++;
      }
    }
    if (c != entry.getValue().size()) {
      continue primary;
    }
    return entry.getKey().getItemFrom(dPlayer.mirrorBukkitPlayer(player),null);
  }
  return null;
}",0.918958031837916
10138,"public static void updatePlayerProfiles(PacketPlayOutPlayerInfo packet){
  PacketPlayOutPlayerInfo.EnumPlayerInfoAction action=ReflectionHelper.getFieldValue(PacketPlayOutPlayerInfo.class,""String_Node_Str"",packet);
  if (action != PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER) {
    return;
  }
  List<?> dataList=ReflectionHelper.getFieldValue(PacketPlayOutPlayerInfo.class,""String_Node_Str"",packet);
  if (dataList != null) {
    try {
      for (      Object data : dataList) {
        GameProfile gameProfile=(GameProfile)playerInfoData_gameProfile.get(data);
        if (fakeProfiles.containsKey(gameProfile.getId())) {
          playerInfoData_gameProfile.set(data,getGameProfile(fakeProfiles.get(gameProfile.getId())));
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","public static void updatePlayerProfiles(PacketPlayOutPlayerInfo packet){
  PacketPlayOutPlayerInfo.EnumPlayerInfoAction action=ReflectionHelper.getFieldValue(PacketPlayOutPlayerInfo.class,""String_Node_Str"",packet);
  if (action != PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER) {
    return;
  }
  List<PacketPlayOutPlayerInfo.PlayerInfoData> dataList=ReflectionHelper.getFieldValue(PacketPlayOutPlayerInfo.class,""String_Node_Str"",packet);
  if (dataList != null) {
    try {
      for (      PacketPlayOutPlayerInfo.PlayerInfoData data : dataList) {
        GameProfile gameProfile=(GameProfile)playerInfoData_gameProfile.get(data);
        if (fakeProfiles.containsKey(gameProfile.getId())) {
          playerInfoData_gameProfile.set(data,getGameProfile(fakeProfiles.get(gameProfile.getId())));
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.9529889727219966
10139,"public PacketOutChat_v1_12_R1(PacketPlayOutChat internal){
  this.internal=internal;
  try {
    IChatBaseComponent baseComponent=(IChatBaseComponent)MESSAGE.get(internal);
    if (baseComponent != null) {
      message=baseComponent.toPlainText();
      rawJson=IChatBaseComponent.ChatSerializer.a(baseComponent);
    }
 else {
      message=BaseComponent.toPlainText(internal.components);
      rawJson=ComponentSerializer.toString(internal.components);
      bungee=true;
    }
    position=POSITION.getInt(internal);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public PacketOutChat_v1_12_R1(PacketPlayOutChat internal){
  this.internal=internal;
  try {
    IChatBaseComponent baseComponent=(IChatBaseComponent)MESSAGE.get(internal);
    if (baseComponent != null) {
      message=baseComponent.toPlainText();
      rawJson=IChatBaseComponent.ChatSerializer.a(baseComponent);
    }
 else {
      message=BaseComponent.toPlainText(internal.components);
      rawJson=ComponentSerializer.toString(internal.components);
      bungee=true;
    }
    position=(ChatMessageType)POSITION.get(internal);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9829642248722316
10140,"@Override public int getPosition(){
  return position;
}","@Override public int getPosition(){
  return position.ordinal();
}",0.918032786885246
10141,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"",""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",new Element(true));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",new Element(false));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",new Element(false));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"",""String_Node_Str"") && arg.matchesArgumentType(Duration.class)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asType(Duration.class));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Double)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && PotionEffectType.getByName(arg.asElement().asString()) != null) {
      scriptEntry.addObject(""String_Node_Str"",PotionEffectType.getByName(arg.asElement().asString()));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentList(dEntity.class)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asType(dList.class).filter(dEntity.class));
    }
 else {
      arg.reportUnhandled();
    }
  }
  scriptEntry.defaultObject(""String_Node_Str"",(((BukkitScriptEntryData)scriptEntry.entryData).hasPlayer() ? Arrays.asList(((BukkitScriptEntryData)scriptEntry.entryData).getPlayer().getDenizenEntity()) : null),(((BukkitScriptEntryData)scriptEntry.entryData).hasNPC() ? Arrays.asList(((BukkitScriptEntryData)scriptEntry.entryData).getNPC().getDenizenEntity()) : null));
  if (!scriptEntry.hasObject(""String_Node_Str"")) {
    throw new InvalidArgumentsException(""String_Node_Str"");
  }
  scriptEntry.defaultObject(""String_Node_Str"",new Duration(60));
  scriptEntry.defaultObject(""String_Node_Str"",new Element(1));
  scriptEntry.defaultObject(""String_Node_Str"",new Element(false));
  scriptEntry.defaultObject(""String_Node_Str"",new Element(true));
  scriptEntry.defaultObject(""String_Node_Str"",new Element(true));
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"",""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",new Element(true));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",new Element(false));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",new Element(false));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"",""String_Node_Str"") && arg.matchesArgumentType(Duration.class)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asType(Duration.class));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Double)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && PotionEffectType.getByName(arg.asElement().asString()) != null) {
      scriptEntry.addObject(""String_Node_Str"",PotionEffectType.getByName(arg.asElement().asString()));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentList(dEntity.class)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asType(dList.class).filter(dEntity.class));
    }
 else {
      arg.reportUnhandled();
    }
  }
  scriptEntry.defaultObject(""String_Node_Str"",(((BukkitScriptEntryData)scriptEntry.entryData).hasPlayer() ? Arrays.asList(((BukkitScriptEntryData)scriptEntry.entryData).getPlayer().getDenizenEntity()) : null),(((BukkitScriptEntryData)scriptEntry.entryData).hasNPC() && ((BukkitScriptEntryData)scriptEntry.entryData).getNPC().isSpawned() ? Arrays.asList(((BukkitScriptEntryData)scriptEntry.entryData).getNPC().getDenizenEntity()) : null));
  if (!scriptEntry.hasObject(""String_Node_Str"")) {
    throw new InvalidArgumentsException(""String_Node_Str"");
  }
  scriptEntry.defaultObject(""String_Node_Str"",new Duration(60));
  scriptEntry.defaultObject(""String_Node_Str"",new Element(1));
  scriptEntry.defaultObject(""String_Node_Str"",new Element(false));
  scriptEntry.defaultObject(""String_Node_Str"",new Element(true));
  scriptEntry.defaultObject(""String_Node_Str"",new Element(true));
}",0.9858762681519792
10142,"@Override public void run(){
  sendPacket(new PacketPlayOutMount(entity.getVehicle()));
}","@Override public void run(){
  sendPacket(new PacketPlayOutPlayerInfo(EnumPlayerInfoAction.REMOVE_PLAYER,fakePlayer));
}",0.6794258373205742
10143,"/** 
 * Listens for spawn of an NPC and updates its health with the max health information for this trait.
 */
@Override public void onSpawn(){
  dying=false;
  setHealth();
  void_watcher_task=Bukkit.getScheduler().scheduleSyncRepeatingTask(DenizenAPI.getCurrentInstance(),new Runnable(){
    @Override public void run(){
      if (!npc.isSpawned()) {
        Bukkit.getScheduler().cancelTask(void_watcher_task);
        return;
      }
      if (npc.getEntity().getLocation().getY() < -1000) {
        npc.despawn(DespawnReason.DEATH);
        if (respawn) {
          if (npc.isSpawned()) {
            npc.getEntity().teleport(getRespawnLocation());
          }
 else {
            npc.spawn(getRespawnLocation());
          }
        }
      }
    }
  }
,200,200);
}","/** 
 * Listens for spawn of an NPC and updates its health with the max health information for this trait.
 */
@Override public void onSpawn(){
  dying=false;
  setHealth();
  void_watcher_task=Bukkit.getScheduler().scheduleSyncRepeatingTask(DenizenAPI.getCurrentInstance(),new Runnable(){
    @Override public void run(){
      if (!npc.isSpawned()) {
        Bukkit.getScheduler().cancelTask(void_watcher_task);
        return;
      }
      if (npc.getEntity().getLocation().getY() < -1000) {
        npc.despawn(DespawnReason.DEATH);
        if (respawn) {
          Location res=getRespawnLocation();
          res.setY(res.getWorld().getHighestBlockYAt(res.getBlockX(),res.getBlockZ()));
          if (npc.isSpawned()) {
            npc.getEntity().teleport(res);
          }
 else {
            npc.spawn(res);
          }
        }
      }
    }
  }
,200,200);
}",0.890920170627666
10144,"public EntityFakeArrow_v1_10_R1(CraftWorld craftWorld,Location location){
  super(craftWorld.getHandle());
  setPositionRotation(location.getX(),location.getY(),location.getZ(),location.getYaw(),location.getPitch());
  world.addEntity(this);
  bukkitEntity=new CraftFakeArrow_v1_10_R1((CraftServer)Bukkit.getServer(),this);
}","public EntityFakeArrow_v1_10_R1(CraftWorld craftWorld,Location location){
  super(craftWorld.getHandle());
  bukkitEntity=new CraftFakeArrow_v1_10_R1((CraftServer)Bukkit.getServer(),this);
  setPositionRotation(location.getX(),location.getY(),location.getZ(),location.getYaw(),location.getPitch());
  world.addEntity(this);
}",0.5846153846153846
10145,"public EntityItemProjectile_v1_10_R1(CraftWorld craftWorld,Location location,org.bukkit.inventory.ItemStack itemStack){
  super(craftWorld.getHandle());
  this.pickupDelay=Integer.MAX_VALUE;
  setPositionRotation(location.getX(),location.getY(),location.getZ(),location.getYaw(),location.getPitch());
  this.setSize(0.25F,0.25F);
  this.setItemStack(CraftItemStack.asNMSCopy(itemStack));
  world.addEntity(this);
  bukkitEntity=new CraftItemProjectile_v1_10_R1((CraftServer)Bukkit.getServer(),this);
}","public EntityItemProjectile_v1_10_R1(CraftWorld craftWorld,Location location,org.bukkit.inventory.ItemStack itemStack){
  super(craftWorld.getHandle());
  bukkitEntity=new CraftItemProjectile_v1_10_R1((CraftServer)Bukkit.getServer(),this);
  this.pickupDelay=Integer.MAX_VALUE;
  setPositionRotation(location.getX(),location.getY(),location.getZ(),location.getYaw(),location.getPitch());
  this.setSize(0.25F,0.25F);
  this.setItemStack(CraftItemStack.asNMSCopy(itemStack));
  world.addEntity(this);
}",0.8263473053892215
10146,"public EntityFakeArrow_v1_8_R3(CraftWorld craftWorld,Location location){
  super(craftWorld.getHandle());
  setPositionRotation(location.getX(),location.getY(),location.getZ(),location.getYaw(),location.getPitch());
  world.addEntity(this);
  bukkitEntity=new CraftFakeArrow_v1_8_R3((CraftServer)Bukkit.getServer(),this);
}","public EntityFakeArrow_v1_8_R3(CraftWorld craftWorld,Location location){
  super(craftWorld.getHandle());
  bukkitEntity=new CraftFakeArrow_v1_8_R3((CraftServer)Bukkit.getServer(),this);
  setPositionRotation(location.getX(),location.getY(),location.getZ(),location.getYaw(),location.getPitch());
  world.addEntity(this);
}",0.5820433436532507
10147,"public EntityItemProjectile_v1_8_R3(CraftWorld craftWorld,Location location,org.bukkit.inventory.ItemStack itemStack){
  super(craftWorld.getHandle());
  this.pickupDelay=Integer.MAX_VALUE;
  setPositionRotation(location.getX(),location.getY(),location.getZ(),location.getYaw(),location.getPitch());
  this.setSize(0.25F,0.25F);
  this.setItemStack(CraftItemStack.asNMSCopy(itemStack));
  world.addEntity(this);
  bukkitEntity=new CraftItemProjectile_v1_8_R3((CraftServer)Bukkit.getServer(),this);
}","public EntityItemProjectile_v1_8_R3(CraftWorld craftWorld,Location location,org.bukkit.inventory.ItemStack itemStack){
  super(craftWorld.getHandle());
  bukkitEntity=new CraftItemProjectile_v1_8_R3((CraftServer)Bukkit.getServer(),this);
  this.pickupDelay=Integer.MAX_VALUE;
  setPositionRotation(location.getX(),location.getY(),location.getZ(),location.getYaw(),location.getPitch());
  this.setSize(0.25F,0.25F);
  this.setItemStack(CraftItemStack.asNMSCopy(itemStack));
  world.addEntity(this);
}",0.8276553106212425
10148,"public EntityFakeArrow_v1_9_R2(CraftWorld craftWorld,Location location){
  super(craftWorld.getHandle());
  setPositionRotation(location.getX(),location.getY(),location.getZ(),location.getYaw(),location.getPitch());
  world.addEntity(this);
  bukkitEntity=new CraftFakeArrow_v1_9_R2((CraftServer)Bukkit.getServer(),this);
}","public EntityFakeArrow_v1_9_R2(CraftWorld craftWorld,Location location){
  super(craftWorld.getHandle());
  bukkitEntity=new CraftFakeArrow_v1_9_R2((CraftServer)Bukkit.getServer(),this);
  setPositionRotation(location.getX(),location.getY(),location.getZ(),location.getYaw(),location.getPitch());
  world.addEntity(this);
}",0.5820433436532507
10149,"public EntityItemProjectile_v1_9_R2(CraftWorld craftWorld,Location location,org.bukkit.inventory.ItemStack itemStack){
  super(craftWorld.getHandle());
  this.pickupDelay=Integer.MAX_VALUE;
  setPositionRotation(location.getX(),location.getY(),location.getZ(),location.getYaw(),location.getPitch());
  this.setSize(0.25F,0.25F);
  this.setItemStack(CraftItemStack.asNMSCopy(itemStack));
  world.addEntity(this);
  bukkitEntity=new CraftItemProjectile_v1_9_R2((CraftServer)Bukkit.getServer(),this);
}","public EntityItemProjectile_v1_9_R2(CraftWorld craftWorld,Location location,org.bukkit.inventory.ItemStack itemStack){
  super(craftWorld.getHandle());
  bukkitEntity=new CraftItemProjectile_v1_9_R2((CraftServer)Bukkit.getServer(),this);
  this.pickupDelay=Integer.MAX_VALUE;
  setPositionRotation(location.getX(),location.getY(),location.getZ(),location.getYaw(),location.getPitch());
  this.setSize(0.25F,0.25F);
  this.setItemStack(CraftItemStack.asNMSCopy(itemStack));
  world.addEntity(this);
}",0.8276553106212425
10150,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(final ScriptEntry scriptEntry) throws CommandExecutionException {
  final List<dEntity> entities=(List<dEntity>)scriptEntry.getObject(""String_Node_Str"");
  final Duration duration=(Duration)scriptEntry.getObject(""String_Node_Str"");
  final Duration frequency=(Duration)scriptEntry.getObject(""String_Node_Str"");
  final Element yaw=(Element)scriptEntry.getObject(""String_Node_Str"");
  final Element pitch=(Element)scriptEntry.getObject(""String_Node_Str"");
  boolean cancel=scriptEntry.hasObject(""String_Node_Str"");
  final boolean infinite=scriptEntry.hasObject(""String_Node_Str"");
  dB.report(scriptEntry,getName(),(cancel ? aH.debugObj(""String_Node_Str"",cancel) : ""String_Node_Str"") + aH.debugObj(""String_Node_Str"",entities.toString()) + (infinite ? aH.debugObj(""String_Node_Str"",""String_Node_Str"") : duration.debug())+ frequency.debug()+ yaw.debug()+ pitch.debug());
  for (  dEntity entity : entities) {
    if (cancel) {
      rotatingEntities.remove(entity.getUUID());
    }
 else {
      rotatingEntities.add(entity.getUUID());
    }
  }
  if (cancel) {
    return;
  }
  BukkitRunnable task=new BukkitRunnable(){
    int ticks=0;
    int maxTicks=duration.getTicksAsInt();
    Collection<dEntity> unusedEntities=new LinkedList<dEntity>();
    @Override public void run(){
      if (entities.isEmpty()) {
        scriptEntry.setFinished(true);
        this.cancel();
      }
 else       if (infinite || ticks < maxTicks) {
        for (        dEntity entity : entities) {
          if (entity.isSpawned() && rotatingEntities.contains(entity.getUUID())) {
            NMSHandler.getInstance().getEntityHelper().rotate(entity.getBukkitEntity(),NMSHandler.getInstance().getEntityHelper().normalizeYaw(entity.getLocation().getYaw() + yaw.asFloat()),entity.getLocation().getPitch() + pitch.asFloat());
          }
 else {
            rotatingEntities.remove(entity.getUUID());
            unusedEntities.add(entity);
          }
        }
        if (!unusedEntities.isEmpty()) {
          for (          dEntity unusedEntity : unusedEntities) {
            entities.remove(unusedEntity);
          }
          unusedEntities.clear();
        }
        ticks=(int)(ticks + frequency.getTicks());
      }
 else {
        scriptEntry.setFinished(true);
        this.cancel();
      }
    }
  }
;
  task.runTaskTimer(DenizenAPI.getCurrentInstance(),0,frequency.getTicks());
}","@SuppressWarnings(""String_Node_Str"") @Override public void execute(final ScriptEntry scriptEntry) throws CommandExecutionException {
  final List<dEntity> entities=new ArrayList<dEntity>((List<dEntity>)scriptEntry.getObject(""String_Node_Str""));
  final Duration duration=(Duration)scriptEntry.getObject(""String_Node_Str"");
  final Duration frequency=(Duration)scriptEntry.getObject(""String_Node_Str"");
  final Element yaw=(Element)scriptEntry.getObject(""String_Node_Str"");
  final Element pitch=(Element)scriptEntry.getObject(""String_Node_Str"");
  boolean cancel=scriptEntry.hasObject(""String_Node_Str"");
  final boolean infinite=scriptEntry.hasObject(""String_Node_Str"");
  dB.report(scriptEntry,getName(),(cancel ? aH.debugObj(""String_Node_Str"",cancel) : ""String_Node_Str"") + aH.debugObj(""String_Node_Str"",entities.toString()) + (infinite ? aH.debugObj(""String_Node_Str"",""String_Node_Str"") : duration.debug())+ frequency.debug()+ yaw.debug()+ pitch.debug());
  for (  dEntity entity : entities) {
    if (cancel) {
      rotatingEntities.remove(entity.getUUID());
    }
 else {
      rotatingEntities.add(entity.getUUID());
    }
  }
  if (cancel) {
    return;
  }
  BukkitRunnable task=new BukkitRunnable(){
    int ticks=0;
    int maxTicks=duration.getTicksAsInt();
    Collection<dEntity> unusedEntities=new LinkedList<dEntity>();
    @Override public void run(){
      if (entities.isEmpty()) {
        scriptEntry.setFinished(true);
        this.cancel();
      }
 else       if (infinite || ticks < maxTicks) {
        for (        dEntity entity : entities) {
          if (entity.isSpawned() && rotatingEntities.contains(entity.getUUID())) {
            NMSHandler.getInstance().getEntityHelper().rotate(entity.getBukkitEntity(),NMSHandler.getInstance().getEntityHelper().normalizeYaw(entity.getLocation().getYaw() + yaw.asFloat()),entity.getLocation().getPitch() + pitch.asFloat());
          }
 else {
            rotatingEntities.remove(entity.getUUID());
            unusedEntities.add(entity);
          }
        }
        if (!unusedEntities.isEmpty()) {
          for (          dEntity unusedEntity : unusedEntities) {
            entities.remove(unusedEntity);
          }
          unusedEntities.clear();
        }
        ticks=(int)(ticks + frequency.getTicks());
      }
 else {
        scriptEntry.setFinished(true);
        this.cancel();
      }
    }
  }
;
  task.runTaskTimer(DenizenAPI.getCurrentInstance(),0,frequency.getTicks());
}",0.9951080309824704
10151,"@Override public void run(){
  sendPacket(new PacketPlayOutPlayerInfo(EnumPlayerInfoAction.REMOVE_PLAYER,fakePlayer));
}","@Override public void run(){
  sendPacket(new PacketPlayOutMount(entity.getVehicle()));
}",0.6985645933014354
10152,"public void handle(Packet packet){
  if (packet instanceof PacketPlayOutChat) {
    if (!packetHandler.sendPacket(player.getBukkitEntity(),new PacketOutChat_v1_8_R3((PacketPlayOutChat)packet))) {
      oldManager.handle(packet);
    }
  }
 else   if (packet instanceof PacketPlayOutNamedEntitySpawn || packet instanceof PacketPlayOutSpawnEntity || packet instanceof PacketPlayOutSpawnEntityLiving|| packet instanceof PacketPlayOutSpawnEntityPainting|| packet instanceof PacketPlayOutSpawnEntityExperienceOrb) {
    PacketOutSpawnEntity spawnEntity=new PacketOutSpawnEntity_v1_8_R3(player,packet);
    UUID uuid=spawnEntity.getEntityUuid();
    if (!NMSHandler.getInstance().getEntityHelper().isHidden(player.getBukkitEntity(),uuid)) {
      Entity entity=((WorldServer)player.getWorld()).getEntity(uuid);
      if (entity instanceof EntityFakePlayer_v1_8_R3) {
        final EntityFakePlayer_v1_8_R3 fakePlayer=(EntityFakePlayer_v1_8_R3)entity;
        handle(new PacketPlayOutPlayerInfo(EnumPlayerInfoAction.ADD_PLAYER,fakePlayer));
        Bukkit.getScheduler().runTaskLater(NMSHandler.getJavaPlugin(),new Runnable(){
          @Override public void run(){
            handle(new PacketPlayOutPlayerInfo(EnumPlayerInfoAction.REMOVE_PLAYER,fakePlayer));
          }
        }
,5);
      }
      oldManager.handle(packet);
    }
  }
 else   if (packet instanceof PacketPlayOutEntityMetadata) {
    if (!packetHandler.sendPacket(player.getBukkitEntity(),new PacketOutEntityMetadata_v1_8_R3((PacketPlayOutEntityMetadata)packet))) {
      oldManager.handle(packet);
    }
  }
 else {
    oldManager.handle(packet);
  }
}","public void handle(Packet packet){
  if (packet instanceof PacketPlayOutChat) {
    if (!packetHandler.sendPacket(player.getBukkitEntity(),new PacketOutChat_v1_8_R3((PacketPlayOutChat)packet))) {
      oldManager.handle(packet);
    }
  }
 else   if (packet instanceof PacketPlayOutNamedEntitySpawn || packet instanceof PacketPlayOutSpawnEntity || packet instanceof PacketPlayOutSpawnEntityLiving|| packet instanceof PacketPlayOutSpawnEntityPainting|| packet instanceof PacketPlayOutSpawnEntityExperienceOrb) {
    PacketOutSpawnEntity spawnEntity=new PacketOutSpawnEntity_v1_8_R3(player,packet);
    UUID uuid=spawnEntity.getEntityUuid();
    if (!NMSHandler.getInstance().getEntityHelper().isHidden(player.getBukkitEntity(),uuid)) {
      Entity entity=((WorldServer)player.getWorld()).getEntity(uuid);
      if (entity != null) {
        if (entity instanceof EntityFakePlayer_v1_8_R3) {
          final EntityFakePlayer_v1_8_R3 fakePlayer=(EntityFakePlayer_v1_8_R3)entity;
          handle(new PacketPlayOutPlayerInfo(EnumPlayerInfoAction.ADD_PLAYER,fakePlayer));
          Bukkit.getScheduler().runTaskLater(NMSHandler.getJavaPlugin(),new Runnable(){
            @Override public void run(){
              handle(new PacketPlayOutPlayerInfo(EnumPlayerInfoAction.REMOVE_PLAYER,fakePlayer));
            }
          }
,5);
        }
      }
      oldManager.handle(packet);
    }
  }
 else   if (packet instanceof PacketPlayOutEntityMetadata) {
    if (!packetHandler.sendPacket(player.getBukkitEntity(),new PacketOutEntityMetadata_v1_8_R3((PacketPlayOutEntityMetadata)packet))) {
      oldManager.handle(packet);
    }
  }
 else {
    oldManager.handle(packet);
  }
}",0.9835766423357664
10153,"@Override public void run(){
  sendPacket(new PacketPlayOutPlayerInfo(EnumPlayerInfoAction.REMOVE_PLAYER,fakePlayer));
}","@Override public void run(){
  sendPacket(new PacketPlayOutMount(entity.getVehicle()));
}",0.6985645933014354
10154,"public Sidebar_v1_10_R1(Player player){
  super(player);
  this.obj1=new ScoreboardObjective(dummyScoreboard,""String_Node_Str"",dummyCriteria);
  this.obj2=new ScoreboardObjective(dummyScoreboard,""String_Node_Str"",dummyCriteria);
}","public Sidebar_v1_10_R1(Player player){
  super(player);
  this.obj1=new ScoreboardObjective(dummyScoreboard,""String_Node_Str"",dummyCriteria);
  this.obj2=new ScoreboardObjective(dummyScoreboard,""String_Node_Str"",dummyCriteria);
  setDisplayName(title);
}",0.9484536082474226
10155,"@Override protected void setDisplayName(String title){
  this.obj1.setDisplayName(title);
  this.obj2.setDisplayName(title);
}","@Override protected void setDisplayName(String title){
  if (this.obj1 != null) {
    this.obj1.setDisplayName(title);
    this.obj2.setDisplayName(title);
  }
}",0.8780487804878049
10156,"public Sidebar_v1_8_R3(Player player){
  super(player);
  this.obj1=new ScoreboardObjective(dummyScoreboard,""String_Node_Str"",dummyCriteria);
  this.obj2=new ScoreboardObjective(dummyScoreboard,""String_Node_Str"",dummyCriteria);
}","public Sidebar_v1_8_R3(Player player){
  super(player);
  this.obj1=new ScoreboardObjective(dummyScoreboard,""String_Node_Str"",dummyCriteria);
  this.obj2=new ScoreboardObjective(dummyScoreboard,""String_Node_Str"",dummyCriteria);
  setDisplayName(title);
}",0.94824016563147
10157,"@Override protected void setDisplayName(String title){
  this.obj1.setDisplayName(title);
  this.obj2.setDisplayName(title);
}","@Override protected void setDisplayName(String title){
  if (this.obj1 != null) {
    this.obj1.setDisplayName(title);
    this.obj2.setDisplayName(title);
  }
}",0.8780487804878049
10158,"public Sidebar_v1_9_R2(Player player){
  super(player);
  this.obj1=new ScoreboardObjective(dummyScoreboard,""String_Node_Str"",dummyCriteria);
  this.obj2=new ScoreboardObjective(dummyScoreboard,""String_Node_Str"",dummyCriteria);
}","public Sidebar_v1_9_R2(Player player){
  super(player);
  this.obj1=new ScoreboardObjective(dummyScoreboard,""String_Node_Str"",dummyCriteria);
  this.obj2=new ScoreboardObjective(dummyScoreboard,""String_Node_Str"",dummyCriteria);
  setDisplayName(title);
}",0.94824016563147
10159,"@Override protected void setDisplayName(String title){
  this.obj1.setDisplayName(title);
  this.obj2.setDisplayName(title);
}","@Override protected void setDisplayName(String title){
  if (this.obj1 != null) {
    this.obj1.setDisplayName(title);
    this.obj2.setDisplayName(title);
  }
}",0.8780487804878049
10160,"private void reel(){
  DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",null);
  int chance=(int)(Math.random() * 100);
  try {
    fishHook.remove();
  }
 catch (  Exception e) {
  }
  if (catchPercent > chance && fishHook != null && catchType != FishingHelper.CatchType.NONE) {
    try {
      fish.remove();
    }
 catch (    Exception e) {
    }
    Location location=fishHook.getLocation();
    fish=location.getWorld().spawn(location,Item.class);
    fish.setItemStack(NMSHandler.getInstance().getFishingHelper().getResult(fishHook,catchType));
    Location npcLocation=npc.getEntity().getLocation();
    double d5=npcLocation.getX() - location.getX();
    double d6=npcLocation.getY() - location.getY();
    double d7=npcLocation.getZ() - location.getZ();
    double d8=Math.sqrt(d5 * d5 + d6 * d6 + d7 * d7);
    double d9=0.1D;
    fish.setVelocity(new Vector(d5 * d9,d6 * d9 + Math.sqrt(d8) * 0.08D,d7 * d9));
    DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",null);
  }
  PlayerAnimation.ARM_SWING.play((Player)npc.getEntity());
}","private void reel(){
  DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",null);
  int chance=(int)(Math.random() * 100);
  try {
    fishHook.remove();
  }
 catch (  Exception e) {
  }
  if (catchPercent > chance && fishHook != null && catchType != FishingHelper.CatchType.NONE) {
    try {
      fish.remove();
    }
 catch (    Exception e) {
    }
    Location location=fishHook.getLocation();
    ItemStack result=NMSHandler.getInstance().getFishingHelper().getResult(fishHook,catchType);
    if (result != null) {
      fish=location.getWorld().dropItem(location,result);
      Location npcLocation=npc.getEntity().getLocation();
      double d5=npcLocation.getX() - location.getX();
      double d6=npcLocation.getY() - location.getY();
      double d7=npcLocation.getZ() - location.getZ();
      double d8=Math.sqrt(d5 * d5 + d6 * d6 + d7 * d7);
      double d9=0.1D;
      fish.setVelocity(new Vector(d5 * d9,d6 * d9 + Math.sqrt(d8) * 0.08D,d7 * d9));
    }
    DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",null);
  }
  PlayerAnimation.ARM_SWING.play((Player)npc.getEntity());
}",0.9151599443671766
10161,"private void cast(){
  DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",null);
  if (fishingLocation == null) {
    dB.echoError(""String_Node_Str"");
    return;
  }
  double v=34;
  double g=20;
  Location from=npc.getEntity().getLocation();
  from=from.add(0,.33,0);
  Location to=fishingLocation;
  Vector test=to.clone().subtract(from).toVector();
  Double elev=test.getY();
  Double testAngle=launchAngle(from,to,v,elev,g);
  if (testAngle == null) {
    return;
  }
  Double hangtime=hangtime(testAngle,v,elev,g);
  Vector victor=to.clone().subtract(from).toVector();
  Double dist=Math.sqrt(Math.pow(victor.getX(),2) + Math.pow(victor.getZ(),2));
  elev=victor.getY();
  if (dist == 0) {
    return;
  }
  Double launchAngle=launchAngle(from,to,v,elev,g);
  if (launchAngle == null) {
    return;
  }
  victor.setY(Math.tan(launchAngle) * dist);
  victor=normalizeVector(victor);
  v=v + (.5 * Math.pow(hangtime,2));
  v=v + (CoreUtilities.getRandom().nextDouble() - .8) / 2;
  victor=victor.multiply(v / 20.0);
  fishHook=from.getWorld().spawn(from,FishHook.class);
  fishHook.setShooter((ProjectileSource)npc.getEntity());
  fishHook.setVelocity(victor);
  PlayerAnimation.ARM_SWING.play((Player)npc.getEntity());
}","private void cast(){
  DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",null);
  if (fishingLocation == null) {
    dB.echoError(""String_Node_Str"");
    return;
  }
  double v=34;
  double g=20;
  Location from=npc.getEntity().getLocation();
  from=from.add(0,.33,0);
  Location to=fishingLocation;
  Vector test=to.clone().subtract(from).toVector();
  Double elev=test.getY();
  Double testAngle=launchAngle(from,to,v,elev,g);
  if (testAngle == null) {
    return;
  }
  Double hangtime=hangtime(testAngle,v,elev,g);
  Vector victor=to.clone().subtract(from).toVector();
  Double dist=Math.sqrt(Math.pow(victor.getX(),2) + Math.pow(victor.getZ(),2));
  elev=victor.getY();
  if (dist == 0) {
    return;
  }
  Double launchAngle=launchAngle(from,to,v,elev,g);
  if (launchAngle == null) {
    return;
  }
  victor.setY(Math.tan(launchAngle) * dist);
  victor=normalizeVector(victor);
  v=v + (.5 * Math.pow(hangtime,2));
  v=v + (CoreUtilities.getRandom().nextDouble() - .8) / 2;
  victor=victor.multiply(v / 20.0);
  fishHook=NMSHandler.getInstance().getFishingHelper().spawnHook(from,(Player)npc.getEntity());
  fishHook.setShooter((ProjectileSource)npc.getEntity());
  fishHook.setVelocity(victor);
  PlayerAnimation.ARM_SWING.play((Player)npc.getEntity());
}",0.957983193277311
10162,"@Override public void removeWorldAccess(World world){
  if (!worldAccessMap.containsKey(world)) {
    return;
  }
  WorldServer worldServer=((CraftWorld)world).getHandle();
  List<IWorldAccess> list=ReflectionHelper.getFieldValue(World.class,""String_Node_Str"",worldServer);
  if (list != null) {
    list.remove(worldAccessMap.get(world));
  }
  worldAccessMap.remove(world);
}","@Override public void removeWorldAccess(World world){
  if (!worldAccessMap.containsKey(world)) {
    return;
  }
  net.minecraft.server.v1_10_R1.World nmsWorld=((CraftWorld)world).getHandle();
  List<IWorldAccess> list=ReflectionHelper.getFieldValue(net.minecraft.server.v1_10_R1.World.class,""String_Node_Str"",nmsWorld);
  if (list != null) {
    list.remove(worldAccessMap.get(world));
  }
  worldAccessMap.remove(world);
}",0.8553615960099751
10163,"@Override public void removeWorldAccess(World world){
  if (!worldAccessMap.containsKey(world)) {
    return;
  }
  WorldServer worldServer=((CraftWorld)world).getHandle();
  List<IWorldAccess> list=ReflectionHelper.getFieldValue(World.class,""String_Node_Str"",worldServer);
  if (list != null) {
    list.remove(worldAccessMap.get(world));
  }
  worldAccessMap.remove(world);
}","@Override public void removeWorldAccess(World world){
  if (!worldAccessMap.containsKey(world)) {
    return;
  }
  net.minecraft.server.v1_9_R2.World nmsWorld=((CraftWorld)world).getHandle();
  List<IWorldAccess> list=ReflectionHelper.getFieldValue(net.minecraft.server.v1_9_R2.World.class,""String_Node_Str"",nmsWorld);
  if (list != null) {
    list.remove(worldAccessMap.get(world));
  }
  worldAccessMap.remove(world);
}",0.8575
10164,"@Override public void setStatic(World world,boolean isStatic){
  WorldServer worldServer=((CraftWorld)world).getHandle();
  ReflectionHelper.setFieldValue(worldServer.getClass(),""String_Node_Str"",worldServer,isStatic);
}","@Override public void setStatic(World world,boolean isStatic){
  WorldServer worldServer=((CraftWorld)world).getHandle();
  ReflectionHelper.setFieldValue(net.minecraft.server.v1_10_R1.World.class,""String_Node_Str"",worldServer,isStatic);
}",0.8627450980392157
10165,"public PacketOutSpawnEntity_v1_10_R1(Packet internal){
  this.internal=internal;
  Integer integer=ReflectionHelper.getFieldValue(internal.getClass(),""String_Node_Str"",internal);
  entityId=integer != null ? integer : -1;
  entityUuid=ReflectionHelper.getFieldValue(internal.getClass(),""String_Node_Str"",internal);
}","public PacketOutSpawnEntity_v1_10_R1(EntityPlayer player,Packet internal){
  this.internal=internal;
  Integer integer=ReflectionHelper.getFieldValue(internal.getClass(),""String_Node_Str"",internal);
  entityId=integer != null ? integer : -1;
  if (!(internal instanceof PacketPlayOutSpawnEntityExperienceOrb)) {
    entityUuid=ReflectionHelper.getFieldValue(internal.getClass(),""String_Node_Str"",internal);
  }
 else {
    EntityTracker tracker=((WorldServer)player.world).tracker;
    EntityTrackerEntry entry=tracker.trackedEntities.get(entityId);
    entityUuid=entry != null ? entry.b().getUniqueID() : null;
  }
}",0.6766595289079229
10166,"@Override public void setStatic(World world,boolean isStatic){
  WorldServer worldServer=((CraftWorld)world).getHandle();
  ReflectionHelper.setFieldValue(worldServer.getClass(),""String_Node_Str"",worldServer,isStatic);
}","@Override public void setStatic(World world,boolean isStatic){
  WorldServer worldServer=((CraftWorld)world).getHandle();
  ReflectionHelper.setFieldValue(net.minecraft.server.v1_8_R3.World.class,""String_Node_Str"",worldServer,isStatic);
}",0.8646288209606987
10167,"@Override public void setStatic(World world,boolean isStatic){
  WorldServer worldServer=((CraftWorld)world).getHandle();
  ReflectionHelper.setFieldValue(worldServer.getClass(),""String_Node_Str"",worldServer,isStatic);
}","@Override public void setStatic(World world,boolean isStatic){
  WorldServer worldServer=((CraftWorld)world).getHandle();
  ReflectionHelper.setFieldValue(net.minecraft.server.v1_9_R2.World.class,""String_Node_Str"",worldServer,isStatic);
}",0.8646288209606987
10168,"public PacketOutSpawnEntity_v1_9_R2(Packet internal){
  this.internal=internal;
  Integer integer=ReflectionHelper.getFieldValue(internal.getClass(),""String_Node_Str"",internal);
  entityId=integer != null ? integer : -1;
  entityUuid=ReflectionHelper.getFieldValue(internal.getClass(),""String_Node_Str"",internal);
}","public PacketOutSpawnEntity_v1_9_R2(EntityPlayer player,Packet internal){
  this.internal=internal;
  Integer integer=ReflectionHelper.getFieldValue(internal.getClass(),""String_Node_Str"",internal);
  entityId=integer != null ? integer : -1;
  if (!(internal instanceof PacketPlayOutSpawnEntityExperienceOrb)) {
    entityUuid=ReflectionHelper.getFieldValue(internal.getClass(),""String_Node_Str"",internal);
  }
 else {
    EntityTracker tracker=((WorldServer)player.world).tracker;
    EntityTrackerEntry entry=tracker.trackedEntities.get(entityId);
    entityUuid=entry != null ? entry.b().getUniqueID() : null;
  }
}",0.6759656652360515
10169,"@Override public void removeWorldAccess(World world){
  if (!worldAccessMap.containsKey(world)) {
    return;
  }
  WorldServer worldServer=((CraftWorld)world).getHandle();
  List<IWorldAccess> list=ReflectionHelper.getFieldValue(worldServer.getClass(),""String_Node_Str"",worldServer);
  if (list != null) {
    list.remove(worldAccessMap.get(world));
  }
  worldAccessMap.remove(world);
}","@Override public void removeWorldAccess(World world){
  if (!worldAccessMap.containsKey(world)) {
    return;
  }
  WorldServer worldServer=((CraftWorld)world).getHandle();
  List<IWorldAccess> list=ReflectionHelper.getFieldValue(World.class,""String_Node_Str"",worldServer);
  if (list != null) {
    list.remove(worldAccessMap.get(world));
  }
  worldAccessMap.remove(world);
}",0.9568627450980391
10170,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(final ScriptEntry scriptEntry) throws CommandExecutionException {
  String direction=scriptEntry.hasObject(""String_Node_Str"") ? ((Element)scriptEntry.getObject(""String_Node_Str"")).asString() : null;
  Element typeElement=scriptEntry.getElement(""String_Node_Str"");
  dList text=(dList)scriptEntry.getObject(""String_Node_Str"");
  dLocation location=(dLocation)scriptEntry.getObject(""String_Node_Str"");
  dB.report(scriptEntry,getName(),typeElement.debug() + location.debug() + text.debug());
  Type type=Type.valueOf(typeElement.asString().toUpperCase());
  Block sign=location.getBlock();
  if (type != Type.AUTOMATIC || (sign.getType() != Material.WALL_SIGN && sign.getType() != Material.SIGN_POST)) {
    sign.setType(type == Type.WALL_SIGN ? Material.WALL_SIGN : Material.SIGN_POST);
  }
  BlockState signState=sign.getState();
  Utilities.setSignLines((Sign)signState,text.toArray(4));
  if (direction != null) {
    Utilities.setSignRotation(signState,direction);
  }
 else   if (type == Type.WALL_SIGN) {
    Utilities.setSignRotation(signState);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void execute(final ScriptEntry scriptEntry) throws CommandExecutionException {
  String direction=scriptEntry.hasObject(""String_Node_Str"") ? ((Element)scriptEntry.getObject(""String_Node_Str"")).asString() : null;
  Element typeElement=scriptEntry.getElement(""String_Node_Str"");
  dList text=(dList)scriptEntry.getObject(""String_Node_Str"");
  dLocation location=(dLocation)scriptEntry.getObject(""String_Node_Str"");
  dB.report(scriptEntry,getName(),typeElement.debug() + location.debug() + text.debug());
  Type type=Type.valueOf(typeElement.asString().toUpperCase());
  Block sign=location.getBlock();
  if (type != Type.AUTOMATIC || (sign.getType() != Material.WALL_SIGN && sign.getType() != Material.SIGN_POST)) {
    sign.setType(type == Type.WALL_SIGN ? Material.WALL_SIGN : Material.SIGN_POST,false);
  }
  BlockState signState=sign.getState();
  Utilities.setSignLines((Sign)signState,text.toArray(4));
  if (direction != null) {
    Utilities.setSignRotation(signState,direction);
  }
 else   if (type == Type.WALL_SIGN) {
    Utilities.setSignRotation(signState);
  }
}",0.997338065661047
10171,"public static void registerTags(){
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      if (attribute.hasContext(1)) {
        return new dList(((dCuboid)object).getBlocks(dList.valueOf(attribute.getContext(1)).filter(dMaterial.class))).getAttribute(attribute.fulfill(1));
      }
 else {
        return new dList(((dCuboid)object).getBlocks()).getAttribute(attribute.fulfill(1));
      }
    }
  }
);
  registerTag(""String_Node_Str"",registeredTags.get(""String_Node_Str""));
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      return new Element(((dCuboid)object).pairs.size()).getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      int member=attribute.getIntContext(1);
      if (member < 1) {
        member=1;
      }
      if (member > ((dCuboid)object).pairs.size()) {
        member=((dCuboid)object).pairs.size();
      }
      return new dCuboid(((dCuboid)object).pairs.get(member - 1).low,((dCuboid)object).pairs.get(member - 1).high).getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",registeredTags.get(""String_Node_Str""));
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      if (attribute.hasContext(1)) {
        return new dList(((dCuboid)object).getSpawnableBlocks(dList.valueOf(attribute.getContext(1)).filter(dMaterial.class))).getAttribute(attribute.fulfill(1));
      }
 else {
        return new dList(((dCuboid)object).getSpawnableBlocks()).getAttribute(attribute.fulfill(1));
      }
    }
  }
);
  registerTag(""String_Node_Str"",registeredTags.get(""String_Node_Str""));
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      return new dList(((dCuboid)object).getOutline()).getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",registeredTags.get(""String_Node_Str""));
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      return new dList(((dCuboid)object).filter).getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      if (!attribute.hasContext(1)) {
        dB.echoError(""String_Node_Str"");
        return null;
      }
      dCuboid cub2=dCuboid.valueOf(attribute.getContext(1));
      if (cub2 != null) {
        boolean intersects=false;
        whole_loop:         for (        LocationPair pair : ((dCuboid)object).pairs) {
          for (          LocationPair pair2 : cub2.pairs) {
            if (!pair.low.getWorld().getName().equalsIgnoreCase(pair2.low.getWorld().getName())) {
              return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
            }
            if (pair2.low.getX() <= pair.high.getX() && pair2.low.getY() <= pair.high.getY() && pair2.low.getZ() <= pair.high.getZ() && pair2.high.getX() >= pair.low.getX() && pair2.high.getY() >= pair.low.getY() && pair2.high.getZ() >= pair.low.getZ()) {
              intersects=true;
              break whole_loop;
            }
          }
        }
        return new Element(intersects).getAttribute(attribute.fulfill(1));
      }
      return null;
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      if (!attribute.hasContext(1)) {
        dB.echoError(""String_Node_Str"");
        return null;
      }
      dCuboid cub2=dCuboid.valueOf(attribute.getContext(1));
      if (cub2 != null) {
        boolean contains=true;
        for (        LocationPair pair2 : ((dCuboid)object).pairs) {
          boolean contained=false;
          for (          LocationPair pair : cub2.pairs) {
            if (!pair.low.getWorld().getName().equalsIgnoreCase(pair2.low.getWorld().getName())) {
              if (net.aufdemrand.denizencore.utilities.debugging.dB.verbose) {
                dB.log(""String_Node_Str"");
              }
              return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
            }
            if (pair2.low.getX() >= pair.low.getX() && pair2.low.getY() >= pair.low.getY() && pair2.low.getZ() >= pair.low.getZ() && pair2.high.getX() <= pair.high.getX() && pair2.high.getY() <= pair.high.getY() && pair2.high.getZ() <= pair.high.getZ()) {
              contained=true;
              break;
            }
          }
          if (!contained) {
            contains=false;
            break;
          }
        }
        return new Element(contains).getAttribute(attribute.fulfill(1));
      }
      return null;
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      LocationPair pair;
      if (!attribute.hasContext(1)) {
        pair=((dCuboid)object).pairs.get(0);
      }
 else {
        int member=attribute.getIntContext(1);
        if (member < 1) {
          member=1;
        }
        if (member > ((dCuboid)object).pairs.size()) {
          member=((dCuboid)object).pairs.size();
        }
        pair=((dCuboid)object).pairs.get(member - 1);
      }
      Location base=pair.high.clone().add(pair.low.clone());
      base.setX(base.getX() / 2);
      base.setY(base.getY() / 2);
      base.setZ(base.getZ() / 2);
      return new dLocation(base).getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      LocationPair pair;
      if (!attribute.hasContext(1)) {
        pair=((dCuboid)object).pairs.get(0);
      }
 else {
        int member=attribute.getIntContext(1);
        if (member < 1) {
          member=1;
        }
        if (member > ((dCuboid)object).pairs.size()) {
          member=((dCuboid)object).pairs.size();
        }
        pair=((dCuboid)object).pairs.get(member - 1);
      }
      Location base=pair.high.clone().subtract(pair.low.clone()).add(1,1,1);
      return new dLocation(base).getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      if (!attribute.hasContext(1)) {
        return ((dCuboid)object).pairs.get(0).high.getAttribute(attribute.fulfill(1));
      }
 else {
        int member=attribute.getIntContext(1);
        if (member < 1) {
          member=1;
        }
        if (member > ((dCuboid)object).pairs.size()) {
          member=((dCuboid)object).pairs.size();
        }
        return ((dCuboid)object).pairs.get(member - 1).high.getAttribute(attribute.fulfill(1));
      }
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      if (!attribute.hasContext(1)) {
        return ((dCuboid)object).pairs.get(0).low.getAttribute(attribute.fulfill(1));
      }
 else {
        int member=attribute.getIntContext(1);
        if (member < 1) {
          member=1;
        }
        if (member > ((dCuboid)object).pairs.size()) {
          member=((dCuboid)object).pairs.size();
        }
        return ((dCuboid)object).pairs.get(member - 1).low.getAttribute(attribute.fulfill(1));
      }
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      if (!attribute.hasContext(1)) {
        dB.echoError(""String_Node_Str"");
        return null;
      }
      try {
        dLocation loc=dLocation.valueOf(attribute.getContext(1));
        dCuboid cuboid=((dCuboid)object).clone();
        if (loc != null) {
          if (loc.getX() < cuboid.pairs.get(0).low.getX()) {
            cuboid.pairs.get(0).low=new dLocation(cuboid.pairs.get(0).low.getWorld(),loc.getX(),cuboid.pairs.get(0).low.getY(),cuboid.pairs.get(0).low.getZ());
          }
          if (loc.getY() < cuboid.pairs.get(0).low.getY()) {
            cuboid.pairs.get(0).low=new dLocation(cuboid.pairs.get(0).low.getWorld(),cuboid.pairs.get(0).low.getX(),loc.getY(),cuboid.pairs.get(0).low.getZ());
          }
          if (loc.getZ() < cuboid.pairs.get(0).low.getZ()) {
            cuboid.pairs.get(0).low=new dLocation(cuboid.pairs.get(0).low.getWorld(),cuboid.pairs.get(0).low.getX(),cuboid.pairs.get(0).low.getY(),loc.getZ());
          }
          if (loc.getX() > cuboid.pairs.get(0).high.getX()) {
            cuboid.pairs.get(0).high=new dLocation(cuboid.pairs.get(0).high.getWorld(),loc.getX(),cuboid.pairs.get(0).high.getY(),cuboid.pairs.get(0).high.getZ());
          }
          if (loc.getY() > cuboid.pairs.get(0).high.getY()) {
            cuboid.pairs.get(0).high=new dLocation(cuboid.pairs.get(0).high.getWorld(),cuboid.pairs.get(0).high.getX(),loc.getY(),cuboid.pairs.get(0).high.getZ());
          }
          if (loc.getZ() > cuboid.pairs.get(0).high.getZ()) {
            cuboid.pairs.get(0).high=new dLocation(cuboid.pairs.get(0).high.getWorld(),cuboid.pairs.get(0).high.getX(),cuboid.pairs.get(0).high.getY(),loc.getZ());
          }
          return cuboid.getAttribute(attribute.fulfill(1));
        }
      }
 catch (      CloneNotSupportedException ex) {
        dB.echoError(ex);
      }
      return null;
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      ArrayList<dPlayer> players=new ArrayList<dPlayer>();
      for (      Player player : Bukkit.getOnlinePlayers()) {
        if (((dCuboid)object).isInsideCuboid(player.getLocation())) {
          players.add(dPlayer.mirrorBukkitPlayer(player));
        }
      }
      return new dList(players).getAttribute(attribute.fulfill(1));
    }
  }
);
  if (Depends.citizens != null) {
    registerTag(""String_Node_Str"",new TagRunnable(){
      @Override public String run(      Attribute attribute,      dObject object){
        ArrayList<dNPC> npcs=new ArrayList<dNPC>();
        for (        NPC npc : CitizensAPI.getNPCRegistry()) {
          dNPC dnpc=dNPC.mirrorCitizensNPC(npc);
          if (((dCuboid)object).isInsideCuboid(dnpc.getLocation())) {
            npcs.add(dnpc);
          }
        }
        return new dList(npcs).getAttribute(attribute.fulfill(1));
      }
    }
);
  }
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      ArrayList<dEntity> entities=new ArrayList<dEntity>();
      dList types=new dList();
      if (attribute.hasContext(1)) {
        types=dList.valueOf(attribute.getContext(1));
      }
      for (      Entity ent : ((dCuboid)object).getWorld().getEntities()) {
        dEntity current=new dEntity(ent);
        if (ent.isValid() && ((dCuboid)object).isInsideCuboid(ent.getLocation())) {
          if (!types.isEmpty()) {
            for (            String type : types) {
              if (current.identifySimpleType().equalsIgnoreCase(type)) {
                entities.add(current);
                break;
              }
            }
          }
 else {
            entities.add(new dEntity(ent));
          }
        }
      }
      return new dList(entities).getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      ArrayList<dEntity> entities=new ArrayList<dEntity>();
      for (      Entity ent : ((dCuboid)object).getWorld().getLivingEntities()) {
        if (ent.isValid() && ((dCuboid)object).isInsideCuboid(ent.getLocation()) && !dEntity.isCitizensNPC(ent)) {
          entities.add(new dEntity(ent));
        }
      }
      return new dList(entities).getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      Set<Chunk> chunks=new HashSet<Chunk>();
      dCuboid obj=(dCuboid)object;
      for (      LocationPair pair : obj.pairs) {
        int minY=pair.low.getBlockY();
        Chunk minChunk=pair.low.getChunk();
        if (obj.isInsideCuboid(new Location(obj.getWorld(),minChunk.getX() * 16,minY,minChunk.getZ() * 16))) {
          chunks.add(minChunk);
        }
        Chunk maxChunk=pair.high.getChunk();
        if (obj.isInsideCuboid(new Location(obj.getWorld(),maxChunk.getX() * 16 + 15,minY,maxChunk.getZ() * 16 + 15))) {
          chunks.add(maxChunk);
        }
        dB.log(""String_Node_Str"" + minChunk.getX() + ""String_Node_Str""+ minChunk.getZ());
        dB.log(""String_Node_Str"" + maxChunk.getX() + ""String_Node_Str""+ maxChunk.getZ());
        for (int x=minChunk.getX() + 1; x <= maxChunk.getX() - 1; x++) {
          for (int z=minChunk.getZ() + 1; z <= maxChunk.getZ() - 1; z++) {
            chunks.add(obj.getWorld().getChunkAt(x,z));
          }
        }
      }
      dList list=new dList();
      for (      Chunk chunk : chunks) {
        list.add(new dChunk(chunk).identify());
      }
      return list.getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      Set<Chunk> chunks=new HashSet<Chunk>();
      for (      LocationPair pair : ((dCuboid)object).pairs) {
        Chunk minChunk=pair.low.getChunk();
        Chunk maxChunk=pair.high.getChunk();
        dB.log(""String_Node_Str"" + minChunk.getX() + ""String_Node_Str""+ minChunk.getZ());
        dB.log(""String_Node_Str"" + maxChunk.getX() + ""String_Node_Str""+ maxChunk.getZ());
        for (int x=minChunk.getX(); x <= maxChunk.getX(); x++) {
          for (int z=minChunk.getZ(); z <= maxChunk.getZ(); z++) {
            chunks.add(((dCuboid)object).getWorld().getChunkAt(x,z));
          }
        }
      }
      dList list=new dList();
      for (      Chunk chunk : chunks) {
        list.add(new dChunk(chunk).identify());
      }
      return list.getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      return new Element(NotableManager.getSavedId((dCuboid)object)).getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      return new Element(((dCuboid)object).identifyFull()).getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
  }
);
}","public static void registerTags(){
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      if (attribute.hasContext(1)) {
        return new dList(((dCuboid)object).getBlocks(dList.valueOf(attribute.getContext(1)).filter(dMaterial.class))).getAttribute(attribute.fulfill(1));
      }
 else {
        return new dList(((dCuboid)object).getBlocks()).getAttribute(attribute.fulfill(1));
      }
    }
  }
);
  registerTag(""String_Node_Str"",registeredTags.get(""String_Node_Str""));
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      return new Element(((dCuboid)object).pairs.size()).getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      int member=attribute.getIntContext(1);
      if (member < 1) {
        member=1;
      }
      if (member > ((dCuboid)object).pairs.size()) {
        member=((dCuboid)object).pairs.size();
      }
      return new dCuboid(((dCuboid)object).pairs.get(member - 1).low,((dCuboid)object).pairs.get(member - 1).high).getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",registeredTags.get(""String_Node_Str""));
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      if (attribute.hasContext(1)) {
        return new dList(((dCuboid)object).getSpawnableBlocks(dList.valueOf(attribute.getContext(1)).filter(dMaterial.class))).getAttribute(attribute.fulfill(1));
      }
 else {
        return new dList(((dCuboid)object).getSpawnableBlocks()).getAttribute(attribute.fulfill(1));
      }
    }
  }
);
  registerTag(""String_Node_Str"",registeredTags.get(""String_Node_Str""));
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      return new dList(((dCuboid)object).getOutline()).getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",registeredTags.get(""String_Node_Str""));
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      return new dList(((dCuboid)object).filter).getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      if (!attribute.hasContext(1)) {
        dB.echoError(""String_Node_Str"");
        return null;
      }
      dCuboid cub2=dCuboid.valueOf(attribute.getContext(1));
      if (cub2 != null) {
        boolean intersects=false;
        whole_loop:         for (        LocationPair pair : ((dCuboid)object).pairs) {
          for (          LocationPair pair2 : cub2.pairs) {
            if (!pair.low.getWorld().getName().equalsIgnoreCase(pair2.low.getWorld().getName())) {
              return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
            }
            if (pair2.low.getX() <= pair.high.getX() && pair2.low.getY() <= pair.high.getY() && pair2.low.getZ() <= pair.high.getZ() && pair2.high.getX() >= pair.low.getX() && pair2.high.getY() >= pair.low.getY() && pair2.high.getZ() >= pair.low.getZ()) {
              intersects=true;
              break whole_loop;
            }
          }
        }
        return new Element(intersects).getAttribute(attribute.fulfill(1));
      }
      return null;
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      if (!attribute.hasContext(1)) {
        dB.echoError(""String_Node_Str"");
        return null;
      }
      dCuboid cub2=dCuboid.valueOf(attribute.getContext(1));
      if (cub2 != null) {
        boolean contains=true;
        for (        LocationPair pair2 : ((dCuboid)object).pairs) {
          boolean contained=false;
          for (          LocationPair pair : cub2.pairs) {
            if (!pair.low.getWorld().getName().equalsIgnoreCase(pair2.low.getWorld().getName())) {
              if (net.aufdemrand.denizencore.utilities.debugging.dB.verbose) {
                dB.log(""String_Node_Str"");
              }
              return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
            }
            if (pair2.low.getX() >= pair.low.getX() && pair2.low.getY() >= pair.low.getY() && pair2.low.getZ() >= pair.low.getZ() && pair2.high.getX() <= pair.high.getX() && pair2.high.getY() <= pair.high.getY() && pair2.high.getZ() <= pair.high.getZ()) {
              contained=true;
              break;
            }
          }
          if (!contained) {
            contains=false;
            break;
          }
        }
        return new Element(contains).getAttribute(attribute.fulfill(1));
      }
      return null;
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      LocationPair pair;
      if (!attribute.hasContext(1)) {
        pair=((dCuboid)object).pairs.get(0);
      }
 else {
        int member=attribute.getIntContext(1);
        if (member < 1) {
          member=1;
        }
        if (member > ((dCuboid)object).pairs.size()) {
          member=((dCuboid)object).pairs.size();
        }
        pair=((dCuboid)object).pairs.get(member - 1);
      }
      Location base=pair.high.clone().add(pair.low.clone()).add(1.0,1.0,1.0);
      base.setX(base.getX() / 2.0);
      base.setY(base.getY() / 2.0);
      base.setZ(base.getZ() / 2.0);
      return new dLocation(base).getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      LocationPair pair;
      if (!attribute.hasContext(1)) {
        pair=((dCuboid)object).pairs.get(0);
      }
 else {
        int member=attribute.getIntContext(1);
        if (member < 1) {
          member=1;
        }
        if (member > ((dCuboid)object).pairs.size()) {
          member=((dCuboid)object).pairs.size();
        }
        pair=((dCuboid)object).pairs.get(member - 1);
      }
      Location base=pair.high.clone().subtract(pair.low.clone()).add(1,1,1);
      return new dLocation(base).getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      if (!attribute.hasContext(1)) {
        return ((dCuboid)object).pairs.get(0).high.getAttribute(attribute.fulfill(1));
      }
 else {
        int member=attribute.getIntContext(1);
        if (member < 1) {
          member=1;
        }
        if (member > ((dCuboid)object).pairs.size()) {
          member=((dCuboid)object).pairs.size();
        }
        return ((dCuboid)object).pairs.get(member - 1).high.getAttribute(attribute.fulfill(1));
      }
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      if (!attribute.hasContext(1)) {
        return ((dCuboid)object).pairs.get(0).low.getAttribute(attribute.fulfill(1));
      }
 else {
        int member=attribute.getIntContext(1);
        if (member < 1) {
          member=1;
        }
        if (member > ((dCuboid)object).pairs.size()) {
          member=((dCuboid)object).pairs.size();
        }
        return ((dCuboid)object).pairs.get(member - 1).low.getAttribute(attribute.fulfill(1));
      }
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      if (!attribute.hasContext(1)) {
        dB.echoError(""String_Node_Str"");
        return null;
      }
      try {
        dLocation loc=dLocation.valueOf(attribute.getContext(1));
        dCuboid cuboid=((dCuboid)object).clone();
        if (loc != null) {
          if (loc.getX() < cuboid.pairs.get(0).low.getX()) {
            cuboid.pairs.get(0).low=new dLocation(cuboid.pairs.get(0).low.getWorld(),loc.getX(),cuboid.pairs.get(0).low.getY(),cuboid.pairs.get(0).low.getZ());
          }
          if (loc.getY() < cuboid.pairs.get(0).low.getY()) {
            cuboid.pairs.get(0).low=new dLocation(cuboid.pairs.get(0).low.getWorld(),cuboid.pairs.get(0).low.getX(),loc.getY(),cuboid.pairs.get(0).low.getZ());
          }
          if (loc.getZ() < cuboid.pairs.get(0).low.getZ()) {
            cuboid.pairs.get(0).low=new dLocation(cuboid.pairs.get(0).low.getWorld(),cuboid.pairs.get(0).low.getX(),cuboid.pairs.get(0).low.getY(),loc.getZ());
          }
          if (loc.getX() > cuboid.pairs.get(0).high.getX()) {
            cuboid.pairs.get(0).high=new dLocation(cuboid.pairs.get(0).high.getWorld(),loc.getX(),cuboid.pairs.get(0).high.getY(),cuboid.pairs.get(0).high.getZ());
          }
          if (loc.getY() > cuboid.pairs.get(0).high.getY()) {
            cuboid.pairs.get(0).high=new dLocation(cuboid.pairs.get(0).high.getWorld(),cuboid.pairs.get(0).high.getX(),loc.getY(),cuboid.pairs.get(0).high.getZ());
          }
          if (loc.getZ() > cuboid.pairs.get(0).high.getZ()) {
            cuboid.pairs.get(0).high=new dLocation(cuboid.pairs.get(0).high.getWorld(),cuboid.pairs.get(0).high.getX(),cuboid.pairs.get(0).high.getY(),loc.getZ());
          }
          return cuboid.getAttribute(attribute.fulfill(1));
        }
      }
 catch (      CloneNotSupportedException ex) {
        dB.echoError(ex);
      }
      return null;
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      ArrayList<dPlayer> players=new ArrayList<dPlayer>();
      for (      Player player : Bukkit.getOnlinePlayers()) {
        if (((dCuboid)object).isInsideCuboid(player.getLocation())) {
          players.add(dPlayer.mirrorBukkitPlayer(player));
        }
      }
      return new dList(players).getAttribute(attribute.fulfill(1));
    }
  }
);
  if (Depends.citizens != null) {
    registerTag(""String_Node_Str"",new TagRunnable(){
      @Override public String run(      Attribute attribute,      dObject object){
        ArrayList<dNPC> npcs=new ArrayList<dNPC>();
        for (        NPC npc : CitizensAPI.getNPCRegistry()) {
          dNPC dnpc=dNPC.mirrorCitizensNPC(npc);
          if (((dCuboid)object).isInsideCuboid(dnpc.getLocation())) {
            npcs.add(dnpc);
          }
        }
        return new dList(npcs).getAttribute(attribute.fulfill(1));
      }
    }
);
  }
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      ArrayList<dEntity> entities=new ArrayList<dEntity>();
      dList types=new dList();
      if (attribute.hasContext(1)) {
        types=dList.valueOf(attribute.getContext(1));
      }
      for (      Entity ent : ((dCuboid)object).getWorld().getEntities()) {
        dEntity current=new dEntity(ent);
        if (ent.isValid() && ((dCuboid)object).isInsideCuboid(ent.getLocation())) {
          if (!types.isEmpty()) {
            for (            String type : types) {
              if (current.identifySimpleType().equalsIgnoreCase(type)) {
                entities.add(current);
                break;
              }
            }
          }
 else {
            entities.add(new dEntity(ent));
          }
        }
      }
      return new dList(entities).getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      ArrayList<dEntity> entities=new ArrayList<dEntity>();
      for (      Entity ent : ((dCuboid)object).getWorld().getLivingEntities()) {
        if (ent.isValid() && ((dCuboid)object).isInsideCuboid(ent.getLocation()) && !dEntity.isCitizensNPC(ent)) {
          entities.add(new dEntity(ent));
        }
      }
      return new dList(entities).getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      Set<Chunk> chunks=new HashSet<Chunk>();
      dCuboid obj=(dCuboid)object;
      for (      LocationPair pair : obj.pairs) {
        int minY=pair.low.getBlockY();
        Chunk minChunk=pair.low.getChunk();
        if (obj.isInsideCuboid(new Location(obj.getWorld(),minChunk.getX() * 16,minY,minChunk.getZ() * 16))) {
          chunks.add(minChunk);
        }
        Chunk maxChunk=pair.high.getChunk();
        if (obj.isInsideCuboid(new Location(obj.getWorld(),maxChunk.getX() * 16 + 15,minY,maxChunk.getZ() * 16 + 15))) {
          chunks.add(maxChunk);
        }
        dB.log(""String_Node_Str"" + minChunk.getX() + ""String_Node_Str""+ minChunk.getZ());
        dB.log(""String_Node_Str"" + maxChunk.getX() + ""String_Node_Str""+ maxChunk.getZ());
        for (int x=minChunk.getX() + 1; x <= maxChunk.getX() - 1; x++) {
          for (int z=minChunk.getZ() + 1; z <= maxChunk.getZ() - 1; z++) {
            chunks.add(obj.getWorld().getChunkAt(x,z));
          }
        }
      }
      dList list=new dList();
      for (      Chunk chunk : chunks) {
        list.add(new dChunk(chunk).identify());
      }
      return list.getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      Set<Chunk> chunks=new HashSet<Chunk>();
      for (      LocationPair pair : ((dCuboid)object).pairs) {
        Chunk minChunk=pair.low.getChunk();
        Chunk maxChunk=pair.high.getChunk();
        dB.log(""String_Node_Str"" + minChunk.getX() + ""String_Node_Str""+ minChunk.getZ());
        dB.log(""String_Node_Str"" + maxChunk.getX() + ""String_Node_Str""+ maxChunk.getZ());
        for (int x=minChunk.getX(); x <= maxChunk.getX(); x++) {
          for (int z=minChunk.getZ(); z <= maxChunk.getZ(); z++) {
            chunks.add(((dCuboid)object).getWorld().getChunkAt(x,z));
          }
        }
      }
      dList list=new dList();
      for (      Chunk chunk : chunks) {
        list.add(new dChunk(chunk).identify());
      }
      return list.getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      return new Element(NotableManager.getSavedId((dCuboid)object)).getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      return new Element(((dCuboid)object).identifyFull()).getAttribute(attribute.fulfill(1));
    }
  }
);
  registerTag(""String_Node_Str"",new TagRunnable(){
    @Override public String run(    Attribute attribute,    dObject object){
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
  }
);
}",0.9992392418880032
10172,"public void setTitle(String title){
  if (!getIdType().equals(""String_Node_Str"") || title == null) {
    return;
  }
 else   if (inventory == null) {
    inventory=Bukkit.getServer().createInventory(null,maxSlots,title);
    loadIdentifiers();
    return;
  }
  ItemStack[] contents=inventory.getContents();
  if (inventory.getType() == InventoryType.CHEST) {
    inventory=Bukkit.getServer().createInventory(null,inventory.getSize(),title);
  }
 else {
    inventory=Bukkit.getServer().createInventory(null,inventory.getType(),title);
  }
  inventory.setContents(contents);
  loadIdentifiers();
}","public void setTitle(String title){
  if (!(getIdType().equals(""String_Node_Str"") || getIdType().equals(""String_Node_Str"")) || title == null) {
    return;
  }
 else   if (inventory == null) {
    inventory=Bukkit.getServer().createInventory(null,maxSlots,title);
    loadIdentifiers();
    return;
  }
  ItemStack[] contents=inventory.getContents();
  if (inventory.getType() == InventoryType.CHEST) {
    inventory=Bukkit.getServer().createInventory(null,inventory.getSize(),title);
  }
 else {
    inventory=Bukkit.getServer().createInventory(null,inventory.getType(),title);
  }
  inventory.setContents(contents);
  loadIdentifiers();
}",0.9652384801940178
10173,"/** 
 * Handles all packets going out from the server.
 * @param player the player the packet is being sent to
 * @param packet the client-bound packet
 * @return whether to cancel sending the packet
 */
public static boolean sendPacket(final EntityPlayer player,final Packet packet){
  try {
    if (packet instanceof PacketPlayOutChat) {
      if (ExecuteCommand.silencedPlayers.contains(player.getUniqueID())) {
        return true;
      }
      final PlayerReceivesMessageScriptEvent event=PlayerReceivesMessageScriptEvent.instance;
      if (event.loaded) {
        FutureTask<Boolean> futureTask=new FutureTask<Boolean>(new Callable<Boolean>(){
          @Override public Boolean call() throws Exception {
            PacketPlayOutChat cPacket=(PacketPlayOutChat)packet;
            int pos=chat_position.getInt(cPacket);
            if (pos != 2) {
              IChatBaseComponent baseComponent=(IChatBaseComponent)chat_message.get(cPacket);
              boolean bungee=false;
              if (baseComponent != null) {
                event.message=new Element(baseComponent.toPlainText());
                event.rawJson=new Element(IChatBaseComponent.ChatSerializer.a(baseComponent));
              }
 else               if (cPacket.components != null) {
                event.message=new Element(BaseComponent.toPlainText(cPacket.components));
                event.rawJson=new Element(ComponentSerializer.toString(cPacket.components));
                bungee=true;
              }
              event.system=new Element(pos == 1);
              event.player=dPlayer.mirrorBukkitPlayer(player.getBukkitEntity());
              event.cancelled=false;
              event.fire();
              if (event.messageModified) {
                if (!bungee) {
                  chat_message.set(cPacket,new ChatComponentText(event.message.asString()));
                }
 else {
                  cPacket.components=new BaseComponent[]{new TextComponent(event.message.asString())};
                }
              }
 else               if (event.rawJsonModified) {
                if (!bungee) {
                  chat_message.set(cPacket,IChatBaseComponent.ChatSerializer.a(event.rawJson.asString()));
                }
 else {
                  cPacket.components=ComponentSerializer.parse(event.rawJson.asString());
                }
              }
              return event.cancelled;
            }
            return false;
          }
        }
);
        Bukkit.getScheduler().runTask(DenizenAPI.getCurrentInstance(),futureTask);
        return futureTask.get();
      }
    }
 else     if (packet instanceof PacketPlayOutSetSlot) {
      PacketPlayOutSetSlot ssPacket=(PacketPlayOutSetSlot)packet;
      ItemStack itemStack=(ItemStack)set_slot_itemStack.get(ssPacket);
      set_slot_itemStack.set(ssPacket,removeItemScriptLore(itemStack));
    }
 else     if (packet instanceof PacketPlayOutWindowItems) {
      PacketPlayOutWindowItems wiPacket=(PacketPlayOutWindowItems)packet;
      ItemStack[] itemStacks=(ItemStack[])window_items_itemStackArray.get(wiPacket);
      for (int i=0; i < itemStacks.length; i++) {
        itemStacks[i]=removeItemScriptLore(itemStacks[i]);
      }
      window_items_itemStackArray.set(wiPacket,itemStacks);
    }
 else     if (packet instanceof PacketPlayOutNamedEntitySpawn) {
      PacketPlayOutNamedEntitySpawn nesPacket=(PacketPlayOutNamedEntitySpawn)packet;
      int entityId=named_spawn_entityId.getInt(nesPacket);
      if (entityIsHiding(player,entityId)) {
        return true;
      }
      UUID entityUUID=(UUID)named_spawn_entityUUID.get(nesPacket);
      final Entity entity=((WorldServer)player.getWorld()).getEntity(entityUUID);
      if (entity instanceof EntityFakePlayer) {
        player.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER,(EntityFakePlayer)entity));
        Bukkit.getScheduler().runTaskLater(DenizenAPI.getCurrentInstance(),new Runnable(){
          @Override public void run(){
            player.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.REMOVE_PLAYER,(EntityFakePlayer)entity));
          }
        }
,5);
      }
    }
 else     if (packet instanceof PacketPlayOutSpawnEntity) {
      PacketPlayOutSpawnEntity sePacket=(PacketPlayOutSpawnEntity)packet;
      int entityId=spawn_entityId.getInt(sePacket);
      return entityIsHiding(player,entityId);
    }
 else     if (packet instanceof PacketPlayOutSpawnEntityLiving) {
      PacketPlayOutSpawnEntityLiving selPacket=(PacketPlayOutSpawnEntityLiving)packet;
      int entityId=spawn_living_entityId.getInt(selPacket);
      return entityIsHiding(player,entityId);
    }
 else     if (packet instanceof PacketPlayOutSpawnEntityPainting) {
      PacketPlayOutSpawnEntityPainting sepPacket=(PacketPlayOutSpawnEntityPainting)packet;
      int entityId=spawn_painting_entityId.getInt(sepPacket);
      return entityIsHiding(player,entityId);
    }
 else     if (packet instanceof PacketPlayOutSpawnEntityExperienceOrb) {
      PacketPlayOutSpawnEntityExperienceOrb seePacket=(PacketPlayOutSpawnEntityExperienceOrb)packet;
      int entityId=spawn_experience_entityId.getInt(seePacket);
      return entityIsHiding(player,entityId);
    }
 else     if (packet instanceof PacketPlayOutEntityMetadata) {
      PacketPlayOutEntityMetadata emPacket=(PacketPlayOutEntityMetadata)packet;
      int eid=metadata_eid.getInt(emPacket);
      HashSet<UUID> players=GlowCommand.glowViewers.get(eid);
      if (players == null) {
        return false;
      }
      List<DataWatcher.Item<?>> items=(List<DataWatcher.Item<?>>)metadata_data.get(emPacket);
      for (      DataWatcher.Item<?> it : items) {
        if (it.a().a() == 0) {
          return !players.contains(player.getUniqueID());
        }
      }
      return false;
    }
 else     if (packet instanceof PacketPlayOutPlayerInfo) {
      PlayerProfileEditor.updatePlayerProfiles((PacketPlayOutPlayerInfo)packet);
    }
 else     if (packet instanceof PacketPlayOutCustomPayload) {
      PacketPlayOutCustomPayload cPacket=(PacketPlayOutCustomPayload)packet;
      String name=(String)custom_name.get(cPacket);
      if (name.equals(""String_Node_Str"")) {
        PacketDataSerializer serializer=(PacketDataSerializer)custom_serializer.get(cPacket);
        PacketDataSerializer newSerializer=new PacketDataSerializer(Unpooled.buffer());
        newSerializer.writeInt(serializer.readInt());
        byte trades=serializer.readByte();
        newSerializer.writeByte(trades);
        for (int i=0; i < trades; i++) {
          ItemStack buyItem1=serializer.k();
          newSerializer.a(removeItemScriptLore(buyItem1));
          ItemStack buyItem3=serializer.k();
          newSerializer.a(removeItemScriptLore(buyItem3));
          boolean hasItem2=serializer.readBoolean();
          newSerializer.writeBoolean(hasItem2);
          if (hasItem2) {
            ItemStack buyItem2=serializer.k();
            newSerializer.a(removeItemScriptLore(buyItem2));
          }
          boolean usedMax=serializer.readBoolean();
          newSerializer.writeBoolean(usedMax);
          int uses=serializer.readInt();
          newSerializer.writeInt(uses);
          int maxUses=serializer.readInt();
          newSerializer.writeInt(maxUses);
        }
        custom_serializer.set(cPacket,newSerializer);
      }
    }
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  return false;
}","/** 
 * Handles all packets going out from the server.
 * @param player the player the packet is being sent to
 * @param packet the client-bound packet
 * @return whether to cancel sending the packet
 */
public static boolean sendPacket(final EntityPlayer player,final Packet packet){
  try {
    if (packet instanceof PacketPlayOutChat) {
      if (ExecuteCommand.silencedPlayers.contains(player.getUniqueID())) {
        return true;
      }
      final PlayerReceivesMessageScriptEvent event=PlayerReceivesMessageScriptEvent.instance;
      if (event.loaded) {
        FutureTask<Boolean> futureTask=new FutureTask<Boolean>(new Callable<Boolean>(){
          @Override public Boolean call() throws Exception {
            PacketPlayOutChat cPacket=(PacketPlayOutChat)packet;
            int pos=chat_position.getInt(cPacket);
            if (pos != 2) {
              IChatBaseComponent baseComponent=(IChatBaseComponent)chat_message.get(cPacket);
              boolean bungee=false;
              if (baseComponent != null) {
                event.message=new Element(baseComponent.toPlainText());
                event.rawJson=new Element(IChatBaseComponent.ChatSerializer.a(baseComponent));
              }
 else               if (cPacket.components != null) {
                event.message=new Element(BaseComponent.toPlainText(cPacket.components));
                event.rawJson=new Element(ComponentSerializer.toString(cPacket.components));
                bungee=true;
              }
              event.system=new Element(pos == 1);
              event.player=dPlayer.mirrorBukkitPlayer(player.getBukkitEntity());
              event.cancelled=false;
              event.fire();
              if (event.messageModified) {
                if (!bungee) {
                  chat_message.set(cPacket,new ChatComponentText(event.message.asString()));
                }
 else {
                  cPacket.components=new BaseComponent[]{new TextComponent(event.message.asString())};
                }
              }
 else               if (event.rawJsonModified) {
                if (!bungee) {
                  chat_message.set(cPacket,IChatBaseComponent.ChatSerializer.a(event.rawJson.asString()));
                }
 else {
                  cPacket.components=ComponentSerializer.parse(event.rawJson.asString());
                }
              }
              return event.cancelled;
            }
            return false;
          }
        }
);
        if (Bukkit.isPrimaryThread()) {
          futureTask.run();
        }
 else {
          Bukkit.getScheduler().runTask(DenizenAPI.getCurrentInstance(),futureTask);
        }
        return futureTask.get();
      }
    }
 else     if (packet instanceof PacketPlayOutSetSlot) {
      PacketPlayOutSetSlot ssPacket=(PacketPlayOutSetSlot)packet;
      ItemStack itemStack=(ItemStack)set_slot_itemStack.get(ssPacket);
      set_slot_itemStack.set(ssPacket,removeItemScriptLore(itemStack));
    }
 else     if (packet instanceof PacketPlayOutWindowItems) {
      PacketPlayOutWindowItems wiPacket=(PacketPlayOutWindowItems)packet;
      ItemStack[] itemStacks=(ItemStack[])window_items_itemStackArray.get(wiPacket);
      for (int i=0; i < itemStacks.length; i++) {
        itemStacks[i]=removeItemScriptLore(itemStacks[i]);
      }
      window_items_itemStackArray.set(wiPacket,itemStacks);
    }
 else     if (packet instanceof PacketPlayOutNamedEntitySpawn) {
      PacketPlayOutNamedEntitySpawn nesPacket=(PacketPlayOutNamedEntitySpawn)packet;
      int entityId=named_spawn_entityId.getInt(nesPacket);
      if (entityIsHiding(player,entityId)) {
        return true;
      }
      UUID entityUUID=(UUID)named_spawn_entityUUID.get(nesPacket);
      final Entity entity=((WorldServer)player.getWorld()).getEntity(entityUUID);
      if (entity instanceof EntityFakePlayer) {
        player.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER,(EntityFakePlayer)entity));
        Bukkit.getScheduler().runTaskLater(DenizenAPI.getCurrentInstance(),new Runnable(){
          @Override public void run(){
            player.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.REMOVE_PLAYER,(EntityFakePlayer)entity));
          }
        }
,5);
      }
    }
 else     if (packet instanceof PacketPlayOutSpawnEntity) {
      PacketPlayOutSpawnEntity sePacket=(PacketPlayOutSpawnEntity)packet;
      int entityId=spawn_entityId.getInt(sePacket);
      return entityIsHiding(player,entityId);
    }
 else     if (packet instanceof PacketPlayOutSpawnEntityLiving) {
      PacketPlayOutSpawnEntityLiving selPacket=(PacketPlayOutSpawnEntityLiving)packet;
      int entityId=spawn_living_entityId.getInt(selPacket);
      return entityIsHiding(player,entityId);
    }
 else     if (packet instanceof PacketPlayOutSpawnEntityPainting) {
      PacketPlayOutSpawnEntityPainting sepPacket=(PacketPlayOutSpawnEntityPainting)packet;
      int entityId=spawn_painting_entityId.getInt(sepPacket);
      return entityIsHiding(player,entityId);
    }
 else     if (packet instanceof PacketPlayOutSpawnEntityExperienceOrb) {
      PacketPlayOutSpawnEntityExperienceOrb seePacket=(PacketPlayOutSpawnEntityExperienceOrb)packet;
      int entityId=spawn_experience_entityId.getInt(seePacket);
      return entityIsHiding(player,entityId);
    }
 else     if (packet instanceof PacketPlayOutEntityMetadata) {
      PacketPlayOutEntityMetadata emPacket=(PacketPlayOutEntityMetadata)packet;
      int eid=metadata_eid.getInt(emPacket);
      HashSet<UUID> players=GlowCommand.glowViewers.get(eid);
      if (players == null) {
        return false;
      }
      List<DataWatcher.Item<?>> items=(List<DataWatcher.Item<?>>)metadata_data.get(emPacket);
      for (      DataWatcher.Item<?> it : items) {
        if (it.a().a() == 0) {
          return !players.contains(player.getUniqueID());
        }
      }
      return false;
    }
 else     if (packet instanceof PacketPlayOutPlayerInfo) {
      PlayerProfileEditor.updatePlayerProfiles((PacketPlayOutPlayerInfo)packet);
    }
 else     if (packet instanceof PacketPlayOutCustomPayload) {
      PacketPlayOutCustomPayload cPacket=(PacketPlayOutCustomPayload)packet;
      String name=(String)custom_name.get(cPacket);
      if (name.equals(""String_Node_Str"")) {
        PacketDataSerializer serializer=(PacketDataSerializer)custom_serializer.get(cPacket);
        PacketDataSerializer newSerializer=new PacketDataSerializer(Unpooled.buffer());
        newSerializer.writeInt(serializer.readInt());
        byte trades=serializer.readByte();
        newSerializer.writeByte(trades);
        for (int i=0; i < trades; i++) {
          ItemStack buyItem1=serializer.k();
          newSerializer.a(removeItemScriptLore(buyItem1));
          ItemStack buyItem3=serializer.k();
          newSerializer.a(removeItemScriptLore(buyItem3));
          boolean hasItem2=serializer.readBoolean();
          newSerializer.writeBoolean(hasItem2);
          if (hasItem2) {
            ItemStack buyItem2=serializer.k();
            newSerializer.a(removeItemScriptLore(buyItem2));
          }
          boolean usedMax=serializer.readBoolean();
          newSerializer.writeBoolean(usedMax);
          int uses=serializer.readInt();
          newSerializer.writeInt(uses);
          int maxUses=serializer.readInt();
          newSerializer.writeInt(maxUses);
        }
        custom_serializer.set(cPacket,newSerializer);
      }
    }
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  return false;
}",0.9935073539154632
10174,"private void loadIdentifiers(final InventoryHolder holder){
  if (inventory == null) {
    return;
  }
  if (holder != null) {
    if (holder instanceof dNPC) {
      idType=""String_Node_Str"";
      idHolder=((dNPC)holder).identify();
      return;
    }
 else     if (holder instanceof Player) {
      if (inventory.getType() == InventoryType.ENDER_CHEST) {
        idType=""String_Node_Str"";
      }
 else       if (inventory.getType() == InventoryType.WORKBENCH) {
        idType=""String_Node_Str"";
      }
 else {
        idType=""String_Node_Str"";
      }
      idHolder=new dPlayer((Player)holder).identify();
      return;
    }
 else     if (holder instanceof Entity) {
      idType=""String_Node_Str"";
      idHolder=new dEntity((Entity)holder).identify();
      return;
    }
 else {
      idType=""String_Node_Str"";
      try {
        idHolder=getLocation(holder).identify();
      }
 catch (      NullPointerException e) {
        idHolder=""String_Node_Str"";
      }
      return;
    }
  }
 else   if (getIdType().equals(""String_Node_Str"")) {
    for (    Map.Entry<UUID,PlayerInventory> inv : InventoryScriptHelper.offlineInventories.entrySet()) {
      if (((CraftInventory)inv.getValue()).getInventory().equals(((CraftInventory)inventory).getInventory())) {
        idHolder=new dPlayer(inv.getKey()).identify();
        return;
      }
    }
  }
 else   if (getIdType().equals(""String_Node_Str"")) {
    for (    Map.Entry<UUID,Inventory> inv : InventoryScriptHelper.offlineEnderChests.entrySet()) {
      if (((CraftInventory)inv.getValue()).getInventory().equals(((CraftInventory)inventory).getInventory())) {
        idHolder=new dPlayer(inv.getKey()).identify();
        return;
      }
    }
  }
 else   if (getIdType().equals(""String_Node_Str"")) {
    if (InventoryScriptHelper.tempInventoryScripts.containsKey(inventory)) {
      idHolder=InventoryScriptHelper.tempInventoryScripts.get(inventory);
      return;
    }
  }
  idType=""String_Node_Str"";
  idHolder=getInventory().getType().name();
}","private void loadIdentifiers(final InventoryHolder holder){
  if (inventory == null) {
    return;
  }
  if (holder != null) {
    if (holder instanceof dNPC) {
      idType=""String_Node_Str"";
      idHolder=((dNPC)holder).identify();
      return;
    }
 else     if (holder instanceof Player) {
      if (Depends.citizens != null && CitizensAPI.getNPCRegistry().isNPC((Player)holder)) {
        idType=""String_Node_Str"";
        idHolder=(dNPC.fromEntity((Player)holder)).identify();
      }
      if (inventory.getType() == InventoryType.ENDER_CHEST) {
        idType=""String_Node_Str"";
      }
 else       if (inventory.getType() == InventoryType.WORKBENCH) {
        idType=""String_Node_Str"";
      }
 else {
        idType=""String_Node_Str"";
      }
      idHolder=new dPlayer((Player)holder).identify();
      return;
    }
 else     if (holder instanceof Entity) {
      idType=""String_Node_Str"";
      idHolder=new dEntity((Entity)holder).identify();
      return;
    }
 else {
      idType=""String_Node_Str"";
      try {
        idHolder=getLocation(holder).identify();
      }
 catch (      NullPointerException e) {
        idHolder=""String_Node_Str"";
      }
      return;
    }
  }
 else   if (getIdType().equals(""String_Node_Str"")) {
    for (    Map.Entry<UUID,PlayerInventory> inv : InventoryScriptHelper.offlineInventories.entrySet()) {
      if (((CraftInventory)inv.getValue()).getInventory().equals(((CraftInventory)inventory).getInventory())) {
        idHolder=new dPlayer(inv.getKey()).identify();
        return;
      }
    }
  }
 else   if (getIdType().equals(""String_Node_Str"")) {
    for (    Map.Entry<UUID,Inventory> inv : InventoryScriptHelper.offlineEnderChests.entrySet()) {
      if (((CraftInventory)inv.getValue()).getInventory().equals(((CraftInventory)inventory).getInventory())) {
        idHolder=new dPlayer(inv.getKey()).identify();
        return;
      }
    }
  }
 else   if (getIdType().equals(""String_Node_Str"")) {
    if (InventoryScriptHelper.tempInventoryScripts.containsKey(inventory)) {
      idHolder=InventoryScriptHelper.tempInventoryScripts.get(inventory);
      return;
    }
  }
  idType=""String_Node_Str"";
  idHolder=getInventory().getType().name();
}",0.9533948426780222
10175,"@EventHandler public void entityDamage(EntityDamageEvent event){
  Entity entity=event.getEntity();
  dPlayer pl=dEntity.getPlayerFrom(entity);
  if (pl == null) {
    return;
  }
  final Player player=pl.getPlayerEntity();
  final ItemStack[] oldArmor=player.getInventory().getArmorContents();
  new BukkitRunnable(){
    @Override public void run(){
      if (!player.isValid() || player.isDead()) {
        return;
      }
      ItemStack[] newArmor=player.getInventory().getArmorContents();
      for (int i=0; i < 4; i++) {
        ItemStack o=oldArmor[i].clone();
        ItemStack n=newArmor[i].clone();
        if (o != null) {
          o.setDurability((short)0);
          if (n != null) {
            n.setDurability((short)0);
          }
          if (n == null || !n.equals(o)) {
            if (playerUnequipsArmorEvent(player,o,""String_Node_Str"")) {
              newArmor[i]=o;
            }
          }
        }
        player.getInventory().setArmorContents(newArmor);
      }
    }
  }
.runTaskLater(DenizenAPI.getCurrentInstance(),1);
}","@EventHandler public void entityDamage(EntityDamageEvent event){
  Entity entity=event.getEntity();
  dPlayer pl=dEntity.getPlayerFrom(entity);
  if (pl == null) {
    return;
  }
  final Player player=pl.getPlayerEntity();
  final ItemStack[] oldArmor=player.getInventory().getArmorContents();
  new BukkitRunnable(){
    @Override public void run(){
      if (!player.isValid() || player.isDead()) {
        return;
      }
      ItemStack[] newArmor=player.getInventory().getArmorContents();
      for (int i=0; i < 4; i++) {
        ItemStack o=oldArmor[i] == null ? null : oldArmor[i].clone();
        ItemStack n=newArmor[i] == null ? null : newArmor[i].clone();
        if (o != null) {
          o.setDurability((short)0);
          if (n != null) {
            n.setDurability((short)0);
          }
          if (n == null || !n.equals(o)) {
            if (playerUnequipsArmorEvent(player,o,""String_Node_Str"")) {
              newArmor[i]=o;
            }
          }
        }
        player.getInventory().setArmorContents(newArmor);
      }
    }
  }
.runTaskLater(DenizenAPI.getCurrentInstance(),1);
}",0.9733210671573136
10176,"@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Element action=scriptEntry.getElement(""String_Node_Str"");
  Element elTitle=scriptEntry.getElement(""String_Node_Str"");
  Element elLines=scriptEntry.getElement(""String_Node_Str"");
  Element elValue=scriptEntry.getElement(""String_Node_Str"");
  Element elIncrement=scriptEntry.getElement(""String_Node_Str"");
  Element elStart=scriptEntry.getElement(""String_Node_Str"");
  Element elPlayers=scriptEntry.getElement(""String_Node_Str"");
  Element elPerPlayer=scriptEntry.getElement(""String_Node_Str"");
  dList players=dList.valueOf(TagManager.tag(elPlayers.asString(),new BukkitTagContext(scriptEntry,false)));
  boolean per_player=elPerPlayer.asBoolean();
  String perTitle=null;
  String perLines=null;
  String perValue=null;
  String perIncrement=null;
  String perStart=null;
  Element title=null;
  dList lines=null;
  dList value=null;
  Element increment=null;
  Element start=null;
  String debug;
  if (per_player) {
    if (elTitle != null) {
      perTitle=elTitle.asString();
    }
    if (elLines != null) {
      perLines=elLines.asString();
    }
    if (elValue != null) {
      perValue=elValue.asString();
    }
    if (elIncrement != null) {
      perIncrement=elIncrement.asString();
    }
    if (elStart != null) {
      perStart=start.asString();
    }
    debug=action.debug() + (elTitle != null ? elTitle.debug() : ""String_Node_Str"") + (elLines != null ? elLines.debug() : ""String_Node_Str"")+ (elValue != null ? elValue.debug() : ""String_Node_Str"")+ (elIncrement != null ? elIncrement.debug() : ""String_Node_Str"")+ (elStart != null ? elStart.debug() : ""String_Node_Str"")+ players.debug();
  }
 else {
    BukkitTagContext context=new BukkitTagContext(scriptEntry,false);
    if (elTitle != null) {
      title=new Element(TagManager.tag(elTitle.asString(),context));
    }
    if (elLines != null) {
      lines=dList.valueOf(TagManager.tag(elLines.asString(),context));
    }
    if (elValue != null) {
      value=dList.valueOf(TagManager.tag(elValue.asString(),context));
    }
    if (elIncrement != null) {
      increment=new Element(TagManager.tag(elIncrement.asString(),context));
    }
    if (elStart != null) {
      start=new Element(TagManager.tag(elStart.asString(),context));
    }
    debug=action.debug() + (title != null ? title.debug() : ""String_Node_Str"") + (lines != null ? lines.debug() : ""String_Node_Str"")+ (value != null ? value.debug() : ""String_Node_Str"")+ (increment != null ? increment.debug() : ""String_Node_Str"")+ (start != null ? start.debug() : ""String_Node_Str"")+ players.debug();
  }
  dB.report(scriptEntry,getName(),debug);
switch (Action.valueOf(action.asString())) {
case ADD:
    for (    dPlayer player : players.filter(dPlayer.class)) {
      Sidebar sidebar=createSidebar(player);
      if (sidebar == null) {
        continue;
      }
      List<String> current=sidebar.getLines();
      if (per_player) {
        TagContext context=new BukkitTagContext(player,null,false,scriptEntry,scriptEntry.shouldDebug(),scriptEntry.getScript());
        value=dList.valueOf(TagManager.tag(perValue,context));
        if (perLines != null) {
          lines=dList.valueOf(TagManager.tag(perLines,context));
        }
      }
      if (lines != null) {
        try {
          for (int i=0; i < lines.size(); i++) {
            int index=Integer.valueOf(lines.get(i)) - 1;
            String line=value.get(i);
            current.add(index,line);
          }
        }
 catch (        Exception e) {
          dB.echoError(e);
          continue;
        }
      }
 else {
        current.addAll(value);
      }
      sidebar.setLines(current);
      sidebar.sendUpdate();
    }
  break;
case REMOVE:
for (dPlayer player : players.filter(dPlayer.class)) {
  Sidebar sidebar=createSidebar(player);
  if (sidebar == null) {
    continue;
  }
  List<String> current=sidebar.getLines();
  if (per_player) {
    TagContext context=new BukkitTagContext(player,null,false,scriptEntry,scriptEntry.shouldDebug(),scriptEntry.getScript());
    if (perValue != null) {
      value=dList.valueOf(TagManager.tag(perValue,context));
    }
    if (perLines != null) {
      lines=dList.valueOf(TagManager.tag(perLines,context));
    }
  }
  if (lines != null) {
    try {
      int offset=0;
      for (      String line : lines) {
        int index=Integer.valueOf(line) - 1 - offset;
        current.remove(index);
        offset++;
      }
    }
 catch (    Exception e) {
      dB.echoError(e);
      continue;
    }
    sidebar.setLines(current);
    sidebar.sendUpdate();
  }
 else   if (value != null) {
    try {
      Iterator<String> it=current.iterator();
      while (it.hasNext()) {
        String next=it.next();
        for (        String line : value) {
          if (next.equalsIgnoreCase(line)) {
            it.remove();
          }
        }
      }
      for (      String line : value) {
        for (int i=0; i < current.size(); i++) {
          if (current.get(i).equalsIgnoreCase(line)) {
            current.remove(i);
          }
        }
      }
    }
 catch (    Exception e) {
      dB.echoError(e);
      continue;
    }
    sidebar.setLines(current);
    sidebar.sendUpdate();
  }
 else {
    sidebar.remove();
  }
}
break;
case SET:
for (dPlayer player : players.filter(dPlayer.class)) {
Sidebar sidebar=createSidebar(player);
if (sidebar == null) {
continue;
}
List<String> current=sidebar.getLines();
boolean currEdited=false;
if (per_player) {
TagContext context=new BukkitTagContext(player,null,false,scriptEntry,scriptEntry.shouldDebug(),scriptEntry.getScript());
if (perValue != null) {
  value=dList.valueOf(TagManager.tag(perValue,context));
}
if (perLines != null) {
  lines=dList.valueOf(TagManager.tag(perLines,context));
}
if (perStart != null) {
  start=new Element(TagManager.tag(perStart,context));
}
if (perIncrement != null) {
  increment=new Element(TagManager.tag(perIncrement,context));
}
if (perTitle != null) {
  title=new Element(TagManager.tag(perTitle,context));
}
}
if (lines != null) {
try {
  for (int i=0; i < lines.size(); i++) {
    int index=Integer.valueOf(lines.get(i)) - 1;
    String line=value.get(i);
    if (index > current.size()) {
      current.add(line);
    }
 else {
      current.set(index,line);
    }
  }
}
 catch (Exception e) {
  dB.echoError(e);
  continue;
}
currEdited=true;
}
 else if (value != null) {
current=value;
currEdited=true;
}
if (start != null) {
sidebar.setStart(start.asInt());
currEdited=true;
}
if (increment != null) {
sidebar.setIncrement(increment.asInt());
currEdited=true;
}
if (title != null) {
sidebar.setTitle(title.asString());
}
if (currEdited) {
sidebar.setLines(current);
}
sidebar.sendUpdate();
}
break;
}
}","@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Element action=scriptEntry.getElement(""String_Node_Str"");
  Element elTitle=scriptEntry.getElement(""String_Node_Str"");
  Element elLines=scriptEntry.getElement(""String_Node_Str"");
  Element elValue=scriptEntry.getElement(""String_Node_Str"");
  Element elIncrement=scriptEntry.getElement(""String_Node_Str"");
  Element elStart=scriptEntry.getElement(""String_Node_Str"");
  Element elPlayers=scriptEntry.getElement(""String_Node_Str"");
  Element elPerPlayer=scriptEntry.getElement(""String_Node_Str"");
  dList players=dList.valueOf(TagManager.tag(elPlayers.asString(),new BukkitTagContext(scriptEntry,false)));
  boolean per_player=elPerPlayer.asBoolean();
  String perTitle=null;
  String perLines=null;
  String perValue=null;
  String perIncrement=null;
  String perStart=null;
  Element title=null;
  dList lines=null;
  dList value=null;
  Element increment=null;
  Element start=null;
  String debug;
  if (per_player) {
    if (elTitle != null) {
      perTitle=elTitle.asString();
    }
    if (elLines != null) {
      perLines=elLines.asString();
    }
    if (elValue != null) {
      perValue=elValue.asString();
    }
    if (elIncrement != null) {
      perIncrement=elIncrement.asString();
    }
    if (elStart != null) {
      perStart=elStart.asString();
    }
    debug=action.debug() + (elTitle != null ? elTitle.debug() : ""String_Node_Str"") + (elLines != null ? elLines.debug() : ""String_Node_Str"")+ (elValue != null ? elValue.debug() : ""String_Node_Str"")+ (elIncrement != null ? elIncrement.debug() : ""String_Node_Str"")+ (elStart != null ? elStart.debug() : ""String_Node_Str"")+ players.debug();
  }
 else {
    BukkitTagContext context=new BukkitTagContext(scriptEntry,false);
    if (elTitle != null) {
      title=new Element(TagManager.tag(elTitle.asString(),context));
    }
    if (elLines != null) {
      lines=dList.valueOf(TagManager.tag(elLines.asString(),context));
    }
    if (elValue != null) {
      value=dList.valueOf(TagManager.tag(elValue.asString(),context));
    }
    if (elIncrement != null) {
      increment=new Element(TagManager.tag(elIncrement.asString(),context));
    }
    if (elStart != null) {
      start=new Element(TagManager.tag(elStart.asString(),context));
    }
    debug=action.debug() + (title != null ? title.debug() : ""String_Node_Str"") + (lines != null ? lines.debug() : ""String_Node_Str"")+ (value != null ? value.debug() : ""String_Node_Str"")+ (increment != null ? increment.debug() : ""String_Node_Str"")+ (start != null ? start.debug() : ""String_Node_Str"")+ players.debug();
  }
  dB.report(scriptEntry,getName(),debug);
switch (Action.valueOf(action.asString())) {
case ADD:
    for (    dPlayer player : players.filter(dPlayer.class)) {
      Sidebar sidebar=createSidebar(player);
      if (sidebar == null) {
        continue;
      }
      List<String> current=sidebar.getLines();
      if (per_player) {
        TagContext context=new BukkitTagContext(player,null,false,scriptEntry,scriptEntry.shouldDebug(),scriptEntry.getScript());
        value=dList.valueOf(TagManager.tag(perValue,context));
        if (perLines != null) {
          lines=dList.valueOf(TagManager.tag(perLines,context));
        }
      }
      if (lines != null) {
        try {
          for (int i=0; i < lines.size(); i++) {
            int index=Integer.valueOf(lines.get(i)) - 1;
            String line=value.get(i);
            current.add(index,line);
          }
        }
 catch (        Exception e) {
          dB.echoError(e);
          continue;
        }
      }
 else {
        current.addAll(value);
      }
      sidebar.setLines(current);
      sidebar.sendUpdate();
    }
  break;
case REMOVE:
for (dPlayer player : players.filter(dPlayer.class)) {
  Sidebar sidebar=createSidebar(player);
  if (sidebar == null) {
    continue;
  }
  List<String> current=sidebar.getLines();
  if (per_player) {
    TagContext context=new BukkitTagContext(player,null,false,scriptEntry,scriptEntry.shouldDebug(),scriptEntry.getScript());
    if (perValue != null) {
      value=dList.valueOf(TagManager.tag(perValue,context));
    }
    if (perLines != null) {
      lines=dList.valueOf(TagManager.tag(perLines,context));
    }
  }
  if (lines != null) {
    try {
      int offset=0;
      for (      String line : lines) {
        int index=Integer.valueOf(line) - 1 - offset;
        current.remove(index);
        offset++;
      }
    }
 catch (    Exception e) {
      dB.echoError(e);
      continue;
    }
    sidebar.setLines(current);
    sidebar.sendUpdate();
  }
 else   if (value != null) {
    try {
      Iterator<String> it=current.iterator();
      while (it.hasNext()) {
        String next=it.next();
        for (        String line : value) {
          if (next.equalsIgnoreCase(line)) {
            it.remove();
          }
        }
      }
      for (      String line : value) {
        for (int i=0; i < current.size(); i++) {
          if (current.get(i).equalsIgnoreCase(line)) {
            current.remove(i);
          }
        }
      }
    }
 catch (    Exception e) {
      dB.echoError(e);
      continue;
    }
    sidebar.setLines(current);
    sidebar.sendUpdate();
  }
 else {
    sidebar.remove();
  }
}
break;
case SET:
for (dPlayer player : players.filter(dPlayer.class)) {
Sidebar sidebar=createSidebar(player);
if (sidebar == null) {
continue;
}
List<String> current=sidebar.getLines();
boolean currEdited=false;
if (per_player) {
TagContext context=new BukkitTagContext(player,null,false,scriptEntry,scriptEntry.shouldDebug(),scriptEntry.getScript());
if (perValue != null) {
  value=dList.valueOf(TagManager.tag(perValue,context));
}
if (perLines != null) {
  lines=dList.valueOf(TagManager.tag(perLines,context));
}
if (perStart != null) {
  start=new Element(TagManager.tag(perStart,context));
}
if (perIncrement != null) {
  increment=new Element(TagManager.tag(perIncrement,context));
}
if (perTitle != null) {
  title=new Element(TagManager.tag(perTitle,context));
}
}
if (lines != null) {
try {
  for (int i=0; i < lines.size(); i++) {
    int index=Integer.valueOf(lines.get(i)) - 1;
    String line=value.get(i);
    if (index > current.size()) {
      current.add(line);
    }
 else {
      current.set(index,line);
    }
  }
}
 catch (Exception e) {
  dB.echoError(e);
  continue;
}
currEdited=true;
}
 else if (value != null) {
current=value;
currEdited=true;
}
if (start != null) {
sidebar.setStart(start.asInt());
currEdited=true;
}
if (increment != null) {
sidebar.setIncrement(increment.asInt());
currEdited=true;
}
if (title != null) {
sidebar.setTitle(title.asString());
}
if (currEdited) {
sidebar.setLines(current);
}
sidebar.sendUpdate();
}
break;
}
}",0.9997038353324448
10177,"@Override public boolean matches(ScriptContainer scriptContainer,String s){
  if (entity.isValid() && entity.isLivingEntity()) {
    if (final_damage.asDouble() <= entity.getLivingEntity().getHealth()) {
      return false;
    }
  }
  String lower=CoreUtilities.toLowerCase(s);
  String cmd=CoreUtilities.getXthArg(1,lower);
  String arg0=CoreUtilities.getXthArg(0,lower);
  String arg2=CoreUtilities.getXthArg(2,lower);
  String arg3=CoreUtilities.getXthArg(3,lower);
  String attacker=cmd.equals(""String_Node_Str"") ? arg0 : arg2.equals(""String_Node_Str"") ? arg3 : ""String_Node_Str"";
  String target=cmd.equals(""String_Node_Str"") ? arg2 : arg0;
  if (attacker.length() > 0) {
    if (damager != null) {
      if (!damager.matchesEntity(attacker) && !cause.asString().equals(attacker)) {
        return false;
      }
    }
 else     if (!cause.asString().equals(attacker)) {
      return false;
    }
  }
  if (!entity.matchesEntity(target)) {
    return false;
  }
  return runInCheck(scriptContainer,s,lower,entity.getLocation());
}","@Override public boolean matches(ScriptContainer scriptContainer,String s){
  if (entity.isValid() && entity.isLivingEntity()) {
    if (final_damage.asDouble() < entity.getLivingEntity().getHealth()) {
      return false;
    }
  }
  String lower=CoreUtilities.toLowerCase(s);
  String cmd=CoreUtilities.getXthArg(1,lower);
  String arg0=CoreUtilities.getXthArg(0,lower);
  String arg2=CoreUtilities.getXthArg(2,lower);
  String arg3=CoreUtilities.getXthArg(3,lower);
  String attacker=cmd.equals(""String_Node_Str"") ? arg0 : arg2.equals(""String_Node_Str"") ? arg3 : ""String_Node_Str"";
  String target=cmd.equals(""String_Node_Str"") ? arg2 : arg0;
  if (attacker.length() > 0) {
    if (damager != null) {
      if (!damager.matchesEntity(attacker) && !cause.asString().equals(attacker)) {
        return false;
      }
    }
 else     if (!cause.asString().equals(attacker)) {
      return false;
    }
  }
  if (!entity.matchesEntity(target)) {
    return false;
  }
  return runInCheck(scriptContainer,s,lower,entity.getLocation());
}",0.9995171414775472
10178,"@EventHandler public void scriptReload(ScriptReloadEvent event){
  for (  Map.Entry<ItemScriptContainer,List<String>> entry : recipes_to_register.entrySet()) {
    ItemScriptContainer container=entry.getKey();
    List<String> recipeList=entry.getValue();
    for (int n=0; n < recipeList.size(); n++) {
      recipeList.set(n,TagManager.tag(recipeList.get(n),new BukkitTagContext(container.player,container.npc,false,null,dB.shouldDebug(container),new dScript(container))));
    }
    List<dItem> ingredients=new ArrayList<dItem>();
    boolean shouldRegister=true;
    recipeLoop:     for (    String recipeRow : recipeList) {
      String[] elements=recipeRow.split(""String_Node_Str"",3);
      for (      String element : elements) {
        dItem ingredient=dItem.valueOf(element.replaceAll(""String_Node_Str"",""String_Node_Str""));
        if (ingredient == null) {
          dB.echoError(""String_Node_Str"" + container.getName() + ""String_Node_Str""+ element);
          shouldRegister=false;
          break recipeLoop;
        }
        ingredients.add(ingredient);
      }
    }
    if (shouldRegister) {
      ItemScriptContainer.specialrecipesMap.put(container,ingredients);
    }
  }
  for (  Map.Entry<ItemScriptContainer,String> entry : shapeless_to_register.entrySet()) {
    ItemScriptContainer container=entry.getKey();
    String string=entry.getValue();
    String list=TagManager.tag(string,new BukkitTagContext(container.player,container.npc,false,null,dB.shouldDebug(container),new dScript(container)));
    List<dItem> ingredients=new ArrayList<dItem>();
    boolean shouldRegister=true;
    for (    String element : dList.valueOf(list)) {
      dItem ingredient=dItem.valueOf(element.replaceAll(""String_Node_Str"",""String_Node_Str""));
      if (ingredient == null) {
        dB.echoError(""String_Node_Str"" + container.getName() + ""String_Node_Str""+ element);
        shouldRegister=false;
        break;
      }
      ingredients.add(ingredient);
    }
    if (shouldRegister) {
      ItemScriptContainer.shapelessRecipesMap.put(container,ingredients);
    }
  }
}","@EventHandler public void scriptReload(ScriptReloadEvent event){
  for (  Map.Entry<ItemScriptContainer,List<String>> entry : recipes_to_register.entrySet()) {
    ItemScriptContainer container=entry.getKey();
    List<String> recipeList=entry.getValue();
    for (int n=0; n < recipeList.size(); n++) {
      recipeList.set(n,TagManager.tag(recipeList.get(n),new BukkitTagContext(container.player,container.npc,false,null,dB.shouldDebug(container),new dScript(container))));
    }
    List<dItem> ingredients=new ArrayList<dItem>();
    boolean shouldRegister=true;
    recipeLoop:     for (    String recipeRow : recipeList) {
      String[] elements=recipeRow.split(""String_Node_Str"",3);
      for (      String element : elements) {
        dItem ingredient=dItem.valueOf(element.replaceAll(""String_Node_Str"",""String_Node_Str""));
        if (ingredient == null) {
          dB.echoError(""String_Node_Str"" + container.getName() + ""String_Node_Str""+ element);
          shouldRegister=false;
          break recipeLoop;
        }
        ingredients.add(ingredient);
      }
    }
    if (shouldRegister) {
      ItemScriptContainer.specialrecipesMap.put(container,ingredients);
    }
  }
  for (  Map.Entry<ItemScriptContainer,String> entry : shapeless_to_register.entrySet()) {
    ItemScriptContainer container=entry.getKey();
    String string=entry.getValue();
    String list=TagManager.tag(string,new BukkitTagContext(container.player,container.npc,false,null,dB.shouldDebug(container),new dScript(container)));
    List<dItem> ingredients=new ArrayList<dItem>();
    boolean shouldRegister=true;
    for (    String element : dList.valueOf(list)) {
      dItem ingredient=dItem.valueOf(element.replaceAll(""String_Node_Str"",""String_Node_Str""));
      if (ingredient == null) {
        dB.echoError(""String_Node_Str"" + container.getName() + ""String_Node_Str""+ element);
        shouldRegister=false;
        break;
      }
      ingredients.add(ingredient);
    }
    if (shouldRegister) {
      ItemScriptContainer.shapelessRecipesMap.put(container,ingredients);
    }
  }
  recipes_to_register.clear();
  shapeless_to_register.clear();
}",0.984869976359338
10179,"@Override public ScriptEntryData getScriptEntryData(){
  return new BukkitScriptEntryData(entity.isPlayer() ? dEntity.getPlayerFrom(event.getRemover()) : null,entity.isCitizensNPC() ? dEntity.getNPCFrom(event.getRemover()) : null);
}","@Override public ScriptEntryData getScriptEntryData(){
  return new BukkitScriptEntryData(entity.isPlayer() ? entity.getDenizenPlayer() : null,entity.isCitizensNPC() ? entity.getDenizenNPC() : null);
}",0.815668202764977
10180,"@Override public boolean couldMatch(ScriptContainer scriptContainer,String s){
  return CoreUtilities.getXthArg(1,CoreUtilities.toLowerCase(s)).equals(""String_Node_Str"");
}","@Override public boolean couldMatch(ScriptContainer scriptContainer,String s){
  String lower=CoreUtilities.toLowerCase(s);
  return CoreUtilities.getXthArg(1,lower).equals(""String_Node_Str"") && !CoreUtilities.getXthArg(2,lower).equals(""String_Node_Str"");
}",0.7365967365967366
10181,"@Override public boolean matches(ScriptContainer scriptContainer,String s){
  String lower=CoreUtilities.toLowerCase(s);
  String hangCheck=CoreUtilities.getXthArg(0,lower);
  if (!hangCheck.equals(""String_Node_Str"") && hanging.matchesEntity(hangCheck)) {
    return false;
  }
  if (CoreUtilities.xthArgEquals(2,lower,""String_Node_Str"")) {
    if (!CoreUtilities.getXthArg(3,lower).equals(CoreUtilities.toLowerCase(cause.asString()))) {
      return false;
    }
  }
  if (!runInCheck(scriptContainer,s,lower,location)) {
    return false;
  }
  return true;
}","@Override public boolean matches(ScriptContainer scriptContainer,String s){
  String lower=CoreUtilities.toLowerCase(s);
  String hangCheck=CoreUtilities.getXthArg(0,lower);
  if (!hangCheck.equals(""String_Node_Str"") && !hanging.matchesEntity(hangCheck)) {
    return false;
  }
  if (CoreUtilities.xthArgEquals(2,lower,""String_Node_Str"")) {
    if (!CoreUtilities.getXthArg(3,lower).equals(CoreUtilities.toLowerCase(cause.asString()))) {
      return false;
    }
  }
  if (!runInCheck(scriptContainer,s,lower,location)) {
    return false;
  }
  return true;
}",0.9991095280498664
10182,"@EventHandler public void onEntityDamaged(EntityDamageEvent event){
  entity=new dEntity(event.getEntity());
  damage=new Element(event.getDamage());
  final_damage=new Element(event.getFinalDamage());
  cause=new Element(event.getCause().name().toLowerCase());
  damager=null;
  projectile=null;
  held=null;
  if (event instanceof EntityDamageByEntityEvent) {
    damager=new dEntity(((EntityDamageByEntityEvent)event).getDamager());
    if (damager.isProjectile()) {
      projectile=damager;
      if (damager.hasShooter()) {
        damager=damager.getShooter();
      }
    }
    if (damager != null) {
      held=damager.getItemInHand();
      held.setAmount(1);
    }
  }
  cancelled=event.isCancelled();
  this.event=event;
  fire();
  event.setCancelled(cancelled);
  event.setDamage(damage.asDouble());
}","@EventHandler public void onEntityDamaged(EntityDamageEvent event){
  entity=new dEntity(event.getEntity());
  damage=new Element(event.getDamage());
  final_damage=new Element(event.getFinalDamage());
  cause=new Element(event.getCause().name().toLowerCase());
  damager=null;
  projectile=null;
  held=null;
  if (event instanceof EntityDamageByEntityEvent) {
    damager=new dEntity(((EntityDamageByEntityEvent)event).getDamager());
    if (damager.isProjectile()) {
      projectile=damager;
      if (damager.hasShooter()) {
        damager=damager.getShooter();
      }
    }
    if (damager != null) {
      held=damager.getItemInHand();
      if (held != null) {
        held.setAmount(1);
      }
    }
  }
  cancelled=event.isCancelled();
  this.event=event;
  fire();
  event.setCancelled(cancelled);
  event.setDamage(damage.asDouble());
}",0.978391356542617
10183,"@Override public boolean matches(ScriptContainer scriptContainer,String s){
  String lower=CoreUtilities.toLowerCase(s);
  String cmd=CoreUtilities.getXthArg(1,lower);
  String attacker=cmd.equals(""String_Node_Str"") ? CoreUtilities.getXthArg(0,lower) : CoreUtilities.getXthArg(3,lower);
  String target=cmd.equals(""String_Node_Str"") ? CoreUtilities.getXthArg(2,lower) : CoreUtilities.getXthArg(0,lower);
  if (attacker.length() > 0) {
    if (damager != null) {
      boolean projectileMatched=false;
      if (projectile != null) {
        projectileMatched=projectile.matchesEntity(attacker);
      }
      if (!projectileMatched && !damager.matchesEntity(attacker) && !cause.asString().equals(attacker)) {
        return false;
      }
    }
 else {
      if (!cause.asString().equals(attacker)) {
        return false;
      }
    }
  }
  if (target.length() > 0) {
    if (!entity.matchesEntity(target)) {
      return false;
    }
  }
  if (!runInCheck(scriptContainer,s,lower,entity.getLocation())) {
    return false;
  }
  String with=getSwitch(s,""String_Node_Str"");
  if (with != null) {
    dItem it=dItem.valueOf(with);
    if (it == null) {
      dB.echoError(""String_Node_Str"" + getName() + ""String_Node_Str""+ s+ ""String_Node_Str""+ scriptContainer.getName());
      return false;
    }
    if (!it.identify().equalsIgnoreCase(held.identify())) {
      return false;
    }
  }
  return true;
}","@Override public boolean matches(ScriptContainer scriptContainer,String s){
  String lower=CoreUtilities.toLowerCase(s);
  String cmd=CoreUtilities.getXthArg(1,lower);
  String attacker=cmd.equals(""String_Node_Str"") ? CoreUtilities.getXthArg(0,lower) : CoreUtilities.getXthArg(3,lower);
  String target=cmd.equals(""String_Node_Str"") ? CoreUtilities.getXthArg(2,lower) : CoreUtilities.getXthArg(0,lower);
  if (attacker.length() > 0) {
    if (damager != null) {
      boolean projectileMatched=false;
      if (projectile != null) {
        projectileMatched=projectile.matchesEntity(attacker);
      }
      if (!projectileMatched && !damager.matchesEntity(attacker) && !cause.asString().equals(attacker)) {
        return false;
      }
    }
 else {
      if (!cause.asString().equals(attacker)) {
        return false;
      }
    }
  }
  if (target.length() > 0) {
    if (!entity.matchesEntity(target)) {
      return false;
    }
  }
  if (!runInCheck(scriptContainer,s,lower,entity.getLocation())) {
    return false;
  }
  String with=getSwitch(s,""String_Node_Str"");
  if (with != null) {
    dItem it=dItem.valueOf(with);
    if (it == null) {
      dB.echoError(""String_Node_Str"" + getName() + ""String_Node_Str""+ s+ ""String_Node_Str""+ scriptContainer.getName());
      return false;
    }
    if (held == null || !it.identify().equalsIgnoreCase(held.identify())) {
      return false;
    }
  }
  return true;
}",0.9943422913719944
10184,"@EventHandler public void onBlockIgnites(BlockIgniteEvent event){
  location=new dLocation(event.getBlock().getLocation());
  material=dMaterial.getMaterialFrom(event.getBlock().getType(),event.getBlock().getData());
  if (event.getIgnitingEntity() != null) {
    entity=new dEntity(event.getIgnitingEntity());
  }
  if (event.getIgnitingBlock() != null) {
    origin_location=new dLocation(event.getIgnitingBlock().getLocation());
  }
  cause=new Element(event.getCause().toString());
  cancelled=event.isCancelled();
  this.event=event;
  fire();
  event.setCancelled(cancelled);
}","@EventHandler public void onBlockIgnites(BlockIgniteEvent event){
  location=new dLocation(event.getBlock().getLocation());
  material=dMaterial.getMaterialFrom(event.getBlock().getType(),event.getBlock().getData());
  entity=null;
  if (event.getIgnitingEntity() != null) {
    entity=new dEntity(event.getIgnitingEntity());
  }
  origin_location=null;
  if (event.getIgnitingBlock() != null) {
    origin_location=new dLocation(event.getIgnitingBlock().getLocation());
  }
  cause=new Element(event.getCause().toString());
  cancelled=event.isCancelled();
  this.event=event;
  fire();
  event.setCancelled(cancelled);
}",0.9676348547717842
10185,"@EventHandler public void onEntityDamaged(EntityDamageEvent event){
  entity=new dEntity(event.getEntity());
  damage=new Element(event.getDamage());
  final_damage=new Element(event.getFinalDamage());
  cause=new Element(event.getCause().name().toLowerCase());
  damager=null;
  if (event instanceof EntityDamageByEntityEvent) {
    damager=new dEntity(((EntityDamageByEntityEvent)event).getDamager());
    if (damager.isProjectile()) {
      projectile=damager;
      if (damager.hasShooter()) {
        damager=damager.getShooter();
      }
    }
  }
  cancelled=event.isCancelled();
  this.event=event;
  fire();
  event.setCancelled(cancelled);
  event.setDamage(damage.asDouble());
}","@EventHandler public void onEntityDamaged(EntityDamageEvent event){
  entity=new dEntity(event.getEntity());
  damage=new Element(event.getDamage());
  final_damage=new Element(event.getFinalDamage());
  cause=new Element(event.getCause().name().toLowerCase());
  damager=null;
  projectile=null;
  if (event instanceof EntityDamageByEntityEvent) {
    damager=new dEntity(((EntityDamageByEntityEvent)event).getDamager());
    if (damager.isProjectile()) {
      projectile=damager;
      if (damager.hasShooter()) {
        damager=damager.getShooter();
      }
    }
  }
  cancelled=event.isCancelled();
  this.event=event;
  fire();
  event.setCancelled(cancelled);
  event.setDamage(damage.asDouble());
}",0.9863994273443092
10186,"@EventHandler public void onEntityDeath(EntityDeathEvent event){
  entity=new dEntity(event.getEntity());
  dPlayer player=null;
  if (entity.isPlayer()) {
    player=entity.getDenizenPlayer();
  }
  EntityDamageEvent lastDamage=entity.getBukkitEntity().getLastDamageCause();
  if (lastDamage != null && lastDamage instanceof EntityDamageByEntityEvent) {
    damager=new dEntity(((EntityDamageByEntityEvent)lastDamage).getDamager());
  }
  message=null;
  PlayerDeathEvent subEvent=null;
  if (event instanceof PlayerDeathEvent) {
    subEvent=(PlayerDeathEvent)event;
    message=new Element(subEvent.getDeathMessage());
    if (player != null) {
      inventory=player.getInventory();
    }
  }
  if (event.getEntity().getLastDamageCause() != null) {
    cause=new Element(event.getEntity().getLastDamageCause().getCause().toString());
  }
  drops=new dList();
  for (  ItemStack stack : event.getDrops()) {
    if (stack == null) {
      drops.add(""String_Node_Str"");
    }
 else {
      drops.add(new dItem(stack).identify());
    }
  }
  changed_drops=false;
  xp=event.getDroppedExp();
  this.event=event;
  fire();
  event.setDroppedExp(xp);
  if (changed_drops) {
    for (    String drop : drops) {
      dItem item=dItem.valueOf(drop);
      if (item != null) {
        event.getDrops().add(item.getItemStack());
      }
    }
  }
  if (message != null) {
    subEvent.setDeathMessage(message.asString());
  }
}","@EventHandler public void onEntityDeath(EntityDeathEvent event){
  entity=new dEntity(event.getEntity());
  dPlayer player=null;
  if (entity.isPlayer()) {
    player=entity.getDenizenPlayer();
  }
  damager=null;
  EntityDamageEvent lastDamage=entity.getBukkitEntity().getLastDamageCause();
  if (lastDamage != null) {
    if (lastDamage instanceof EntityDamageByEntityEvent) {
      damager=new dEntity(((EntityDamageByEntityEvent)lastDamage).getDamager()).getDenizenObject();
    }
  }
  message=null;
  inventory=null;
  PlayerDeathEvent subEvent=null;
  if (event instanceof PlayerDeathEvent) {
    subEvent=(PlayerDeathEvent)event;
    message=new Element(subEvent.getDeathMessage());
    if (player != null) {
      inventory=player.getInventory();
    }
  }
  cause=null;
  if (event.getEntity().getLastDamageCause() != null) {
    cause=new Element(event.getEntity().getLastDamageCause().getCause().toString());
  }
  drops=new dList();
  for (  ItemStack stack : event.getDrops()) {
    if (stack == null) {
      drops.add(""String_Node_Str"");
    }
 else {
      drops.add(new dItem(stack).identify());
    }
  }
  changed_drops=false;
  xp=event.getDroppedExp();
  this.event=event;
  fire();
  event.setDroppedExp(xp);
  if (changed_drops) {
    event.getDrops().clear();
    for (    String drop : drops) {
      dItem item=dItem.valueOf(drop);
      if (item != null) {
        event.getDrops().add(item.getItemStack());
      }
    }
  }
  if (message != null) {
    subEvent.setDeathMessage(message.asString());
  }
}",0.9529610829103214
10187,"@EventHandler public void onEntityKilled(EntityDamageEvent event){
  entity=new dEntity(event.getEntity());
  damage=new Element(event.getDamage());
  final_damage=new Element(event.getFinalDamage());
  cause=new Element(event.getCause().name().toLowerCase());
  damager=null;
  if (event instanceof EntityDamageByEntityEvent) {
    damager=new dEntity(((EntityDamageByEntityEvent)event).getDamager());
    if (damager.isProjectile()) {
      projectile=damager;
      if (damager.hasShooter()) {
        damager=damager.getShooter();
      }
    }
  }
  cancelled=event.isCancelled();
  this.event=event;
  fire();
  event.setCancelled(cancelled);
  event.setDamage(damage.asDouble());
}","@EventHandler public void onEntityKilled(EntityDamageEvent event){
  entity=new dEntity(event.getEntity());
  damage=new Element(event.getDamage());
  final_damage=new Element(event.getFinalDamage());
  cause=new Element(event.getCause().name().toLowerCase());
  damager=null;
  projectile=null;
  if (event instanceof EntityDamageByEntityEvent) {
    damager=new dEntity(((EntityDamageByEntityEvent)event).getDamager());
    if (damager.isProjectile()) {
      projectile=damager;
      if (damager.hasShooter()) {
        damager=damager.getShooter();
      }
    }
  }
  cancelled=event.isCancelled();
  this.event=event;
  fire();
  event.setCancelled(cancelled);
  event.setDamage(damage.asDouble());
}",0.9863799283154122
10188,"public int getId(){
  return getCitizen().getId();
}","public int getId(){
  return npcid;
}",0.7640449438202247
10189,"public boolean isSpawned(){
  return getCitizen().isSpawned();
}","public boolean isSpawned(){
  NPC npc=CitizensAPI.getNPCRegistry().getById(npcid);
  return npc != null && npc.isSpawned();
}",0.5608465608465608
10190,"public void checkHeld(NavigationEvent e){
  if (e.getNPC() == null)   return;
  for (int i=0; i < WalkCommand.held.size(); i++) {
    ScriptEntry entry=WalkCommand.held.get(i);
    List<dNPC> tally=(List<dNPC>)entry.getObject(""String_Node_Str"");
    tally.remove(dNPC.mirrorCitizensNPC(e.getNPC()));
    if (tally.isEmpty()) {
      entry.setFinished(true);
      WalkCommand.held.remove(i);
      i--;
    }
  }
}","public void checkHeld(NavigationEvent e){
  if (e.getNPC() == null)   return;
  for (int i=0; i < WalkCommand.held.size(); i++) {
    ScriptEntry entry=WalkCommand.held.get(i);
    List<dNPC> tally=(List<dNPC>)entry.getObject(""String_Node_Str"");
    for (int x=0; x < tally.size(); x++) {
      if (!tally.get(x).isSpawned()) {
        tally.remove(x--);
      }
    }
    tally.remove(dNPC.mirrorCitizensNPC(e.getNPC()));
    if (tally.isEmpty()) {
      entry.setFinished(true);
      WalkCommand.held.remove(i);
      i--;
    }
  }
}",0.580441640378549
10191,"@EventHandler public void entityDeath(EntityDeathEvent event){
  dPlayer player=null;
  dNPC npc=null;
  Map<String,dObject> context=new HashMap<String,dObject>();
  dEntity entity=new dEntity(event.getEntity());
  context.put(""String_Node_Str"",entity.getDenizenObject());
  if (event.getEntity().getLastDamageCause() != null)   context.put(""String_Node_Str"",new Element(event.getEntity().getLastDamageCause().getCause().toString()));
  dList drops_dlist=new dList();
  for (  ItemStack stack : event.getDrops()) {
    if (stack == null) {
      drops_dlist.add(""String_Node_Str"");
    }
 else {
      drops_dlist.add(new dItem(stack).identify());
    }
  }
  context.put(""String_Node_Str"",drops_dlist);
  if (entity.isCitizensNPC())   npc=entity.getDenizenNPC();
 else   if (entity.isPlayer())   player=entity.getDenizenPlayer();
  EntityDamageEvent lastDamage=entity.getBukkitEntity().getLastDamageCause();
  if (lastDamage != null && lastDamage instanceof EntityDamageByEntityEvent) {
    context.put(""String_Node_Str"",new dEntity(((EntityDamageByEntityEvent)lastDamage).getDamager()).getDenizenObject());
  }
  PlayerDeathEvent subEvent=null;
  if (event instanceof PlayerDeathEvent) {
    subEvent=(PlayerDeathEvent)event;
    context.put(""String_Node_Str"",new Element(subEvent.getDeathMessage()));
    if (player != null)     context.put(""String_Node_Str"",player.getInventory());
  }
  List<String> determinations=OldEventManager.doEvents(Arrays.asList(""String_Node_Str"",entity.identifyType() + ""String_Node_Str"",entity.identifySimple() + ""String_Node_Str"",entity.identifySimple() + ""String_Node_Str"",""String_Node_Str"",entity.identifyType() + ""String_Node_Str""),new BukkitScriptEntryData(player,npc),context,true);
  for (  String determination : determinations) {
    if (determination.toUpperCase().startsWith(""String_Node_Str"")) {
      determination=determination.substring(6);
    }
    if (determination.toUpperCase().startsWith(""String_Node_Str"")) {
      event.getDrops().clear();
      if (determination.endsWith(""String_Node_Str"")) {
        event.setDroppedExp(0);
      }
    }
 else     if (determination.toUpperCase().equals(""String_Node_Str"")) {
      event.setDroppedExp(0);
    }
 else     if (aH.Argument.valueOf(determination).matchesPrimitive(aH.PrimitiveType.Integer)) {
      int xp=Integer.valueOf(determination.substring(3));
      event.setDroppedExp(xp);
    }
 else     if (aH.Argument.valueOf(determination).matchesArgumentList(dItem.class)) {
      dList drops=dList.valueOf(determination);
      drops.filter(dItem.class);
      event.getDrops().clear();
      for (      String drop : drops) {
        dItem item=dItem.valueOf(drop);
        if (item != null)         event.getDrops().add(item.getItemStack());
      }
    }
 else     if (!determination.toUpperCase().equals(""String_Node_Str"")) {
      if (event instanceof PlayerDeathEvent) {
        subEvent.setDeathMessage(determination);
      }
    }
  }
}","@EventHandler public void entityDeath(EntityDeathEvent event){
  dPlayer player=null;
  dNPC npc=null;
  Map<String,dObject> context=new HashMap<String,dObject>();
  dEntity entity=new dEntity(event.getEntity());
  context.put(""String_Node_Str"",entity.getDenizenObject());
  if (event.getEntity().getLastDamageCause() != null)   context.put(""String_Node_Str"",new Element(event.getEntity().getLastDamageCause().getCause().toString()));
  dList drops_dlist=new dList();
  for (  ItemStack stack : event.getDrops()) {
    if (stack == null) {
      drops_dlist.add(""String_Node_Str"");
    }
 else {
      drops_dlist.add(new dItem(stack).identify());
    }
  }
  context.put(""String_Node_Str"",drops_dlist);
  if (entity.isCitizensNPC())   npc=entity.getDenizenNPC();
 else   if (entity.isPlayer())   player=entity.getDenizenPlayer();
  EntityDamageEvent lastDamage=entity.getBukkitEntity().getLastDamageCause();
  if (lastDamage != null && lastDamage instanceof EntityDamageByEntityEvent) {
    context.put(""String_Node_Str"",new dEntity(((EntityDamageByEntityEvent)lastDamage).getDamager()).getDenizenObject());
  }
  PlayerDeathEvent subEvent=null;
  if (event instanceof PlayerDeathEvent) {
    subEvent=(PlayerDeathEvent)event;
    context.put(""String_Node_Str"",new Element(subEvent.getDeathMessage()));
    if (player != null)     context.put(""String_Node_Str"",player.getInventory());
  }
  List<String> determinations=OldEventManager.doEvents(Arrays.asList(""String_Node_Str"",entity.identifyType() + ""String_Node_Str"",entity.identifySimple() + ""String_Node_Str"",entity.identifySimple() + ""String_Node_Str"",""String_Node_Str"",entity.identifyType() + ""String_Node_Str""),new BukkitScriptEntryData(player,npc),context,true);
  for (  String determination : determinations) {
    if (determination.toUpperCase().startsWith(""String_Node_Str"")) {
      determination=determination.substring(6);
    }
    if (determination.toUpperCase().startsWith(""String_Node_Str"")) {
      event.getDrops().clear();
      if (determination.endsWith(""String_Node_Str"")) {
        event.setDroppedExp(0);
      }
    }
 else     if (determination.toUpperCase().equals(""String_Node_Str"")) {
      event.setDroppedExp(0);
    }
 else     if (aH.Argument.valueOf(determination).matchesPrimitive(aH.PrimitiveType.Integer)) {
      int xp=Integer.valueOf(determination);
      event.setDroppedExp(xp);
    }
 else     if (aH.Argument.valueOf(determination).matchesArgumentList(dItem.class)) {
      dList drops=dList.valueOf(determination);
      drops.filter(dItem.class);
      event.getDrops().clear();
      for (      String drop : drops) {
        dItem item=dItem.valueOf(drop);
        if (item != null)         event.getDrops().add(item.getItemStack());
      }
    }
 else     if (!determination.toUpperCase().equals(""String_Node_Str"")) {
      if (event instanceof PlayerDeathEvent) {
        subEvent.setDeathMessage(determination);
      }
    }
  }
}",0.9977909940526763
10192,"public static GameProfile fillGameProfile(GameProfile gameProfile){
  if (gameProfile != null) {
    GameProfile gameProfile1;
    if (gameProfile.getName() != null) {
      gameProfile1=MinecraftServer.getServer().getUserCache().getProfile(gameProfile.getName());
    }
 else     if (gameProfile.getId() != null) {
      gameProfile1=MinecraftServer.getServer().getUserCache().a(gameProfile.getId());
    }
 else {
      gameProfile1=gameProfile;
    }
    if (Iterables.getFirst(gameProfile1.getProperties().get(""String_Node_Str""),null) == null) {
      gameProfile1=MinecraftServer.getServer().aC().fillProfileProperties(gameProfile1,true);
    }
    return gameProfile1;
  }
  return null;
}","public static GameProfile fillGameProfile(GameProfile gameProfile){
  if (gameProfile != null) {
    GameProfile gameProfile1=null;
    if (gameProfile.getName() != null) {
      gameProfile1=MinecraftServer.getServer().getUserCache().getProfile(gameProfile.getName());
    }
    if (gameProfile1 == null) {
      gameProfile1=MinecraftServer.getServer().getUserCache().a(gameProfile.getId());
    }
    if (gameProfile1 == null) {
      gameProfile1=gameProfile;
    }
    if (Iterables.getFirst(gameProfile1.getProperties().get(""String_Node_Str""),null) == null) {
      gameProfile1=MinecraftServer.getServer().aC().fillProfileProperties(gameProfile1,true);
    }
    return gameProfile1;
  }
  return null;
}",0.833570412517781
10193,"/** 
 * Gets a dInventory from an Object, which can be a dEntity, dLocation, dInventory, or a dList of dItems
 * @param arg An argument to parse
 * @return The dInventory retrieved by parsing the argument
 */
public static dInventory getInventory(Argument arg,ScriptEntry scriptEntry){
  String string=arg.getValue();
  if (dInventory.matches(string)) {
    return dInventory.valueOf(string,((BukkitScriptEntryData)scriptEntry.getData()).getTagContext());
  }
 else   if (arg.matchesArgumentList(dItem.class)) {
    List<dItem> list=dList.valueOf(string).filter(dItem.class);
    ItemStack[] items=convertItems(list).toArray(new ItemStack[list.size()]);
    dInventory inventory=new dInventory(dInventory.maxSlots);
    inventory.setContents(items);
    return inventory;
  }
 else   if (dLocation.matches(string)) {
    return dLocation.valueOf(string).getInventory();
  }
 else   if (dEntity.matches(string)) {
    return dEntity.valueOf(string).getInventory();
  }
  return null;
}","/** 
 * Gets a dInventory from an Object, which can be a dEntity, dLocation, dInventory, or a dList of dItems
 * @param arg An argument to parse
 * @return The dInventory retrieved by parsing the argument
 */
public static dInventory getInventory(Argument arg,ScriptEntry scriptEntry){
  String string=arg.getValue();
  if (dInventory.matches(string)) {
    BukkitScriptEntryData data=(BukkitScriptEntryData)scriptEntry.getData();
    if (data != null)     return dInventory.valueOf(string,((BukkitScriptEntryData)scriptEntry.getData()).getTagContext());
 else     return dInventory.valueOf(string);
  }
 else   if (arg.matchesArgumentList(dItem.class)) {
    List<dItem> list=dList.valueOf(string).filter(dItem.class,scriptEntry);
    ItemStack[] items=convertItems(list).toArray(new ItemStack[list.size()]);
    dInventory inventory=new dInventory(dInventory.maxSlots);
    inventory.setContents(items);
    return inventory;
  }
 else   if (dLocation.matches(string)) {
    return dLocation.valueOf(string).getInventory();
  }
 else   if (dEntity.matches(string)) {
    return dEntity.valueOf(string).getInventory();
  }
  return null;
}",0.8879472693032016
10194,"public dList flags(){
}","public dList flags(){
  dList output=new dList();
  for (  ItemFlag flag : item.getItemStack().getItemMeta().getItemFlags()) {
    output.add(flag.name());
  }
  return output;
}",0.2288557213930348
10195,"@Override public void adjust(Mechanism mechanism){
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireInteger()) {
    if (entity.isCitizensNPC()) {
      if (entity.getDenizenNPC().getCitizen().hasTrait(HealthTrait.class))       entity.getDenizenNPC().getCitizen().getTrait(HealthTrait.class).setMaxhealth(mechanism.getValue().asInt());
 else       dB.echoError(""String_Node_Str"");
    }
 else     if (entity.isLivingEntity()) {
      entity.getLivingEntity().setMaxHealth(mechanism.getValue().asDouble());
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireDouble()) {
    if (entity.isLivingEntity()) {
      entity.getLivingEntity().setHealth(mechanism.getValue().asDouble());
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
  if (mechanism.matches(""String_Node_Str"")) {
    if (entity.isLivingEntity()) {
      List<String> values=CoreUtilities.split(mechanism.getValue().asString(),'/');
      entity.getLivingEntity().setHealth(Double.valueOf(values.get(0)));
      entity.getLivingEntity().setMaxHealth(Double.valueOf(values.get(1)));
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
}","@Override public void adjust(Mechanism mechanism){
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireInteger()) {
    if (entity.isCitizensNPC()) {
      if (entity.getDenizenNPC().getCitizen().hasTrait(HealthTrait.class))       entity.getDenizenNPC().getCitizen().getTrait(HealthTrait.class).setMaxhealth(mechanism.getValue().asInt());
 else       dB.echoError(""String_Node_Str"");
    }
 else     if (entity.isLivingEntity()) {
      entity.getLivingEntity().setMaxHealth(mechanism.getValue().asDouble());
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireDouble()) {
    if (entity.isLivingEntity()) {
      entity.getLivingEntity().setHealth(mechanism.getValue().asDouble());
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
  if (mechanism.matches(""String_Node_Str"")) {
    if (entity.isLivingEntity()) {
      List<String> values=CoreUtilities.split(mechanism.getValue().asString(),'/');
      entity.getLivingEntity().setMaxHealth(Double.valueOf(values.get(1)));
      entity.getLivingEntity().setHealth(Double.valueOf(values.get(0)));
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
}",0.9958643507030605
10196,"private static byte[] imageToBytes(Image image,int width,int height){
  BufferedImage temp=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);
  Graphics2D graphics=temp.createGraphics();
  graphics.drawImage(image,0,0,width,height,null);
  graphics.dispose();
  int[] pixels=new int[width * height];
  temp.getRGB(0,0,width,height,pixels,0,width);
  byte[] result=new byte[width * height];
  for (int i=0; i < pixels.length; i++) {
    result[i]=matchColor(new Color(pixels[i]));
  }
  return result;
}","private static byte[] imageToBytes(Image image,int width,int height){
  BufferedImage temp=new BufferedImage(image.getWidth(null),image.getHeight(null),BufferedImage.TYPE_INT_ARGB);
  Graphics2D graphics=temp.createGraphics();
  graphics.drawImage(image,0,0,width,height,null);
  graphics.dispose();
  int[] pixels=new int[width * height];
  temp.getRGB(0,0,width,height,pixels,0,width);
  byte[] result=new byte[width * height];
  for (int i=0; i < pixels.length; i++) {
    result[i]=matchColor(new Color(pixels[i]));
  }
  return result;
}",0.9487666034155596
10197,"/** 
 * Get the eye location of this entity
 * @return  The location
 */
public dLocation getEyeLocation(){
  if (!isGeneric() && isLivingEntity()) {
    return new dLocation(getLivingEntity().getEyeLocation());
  }
 else   if (!isGeneric()) {
    return new dLocation(getBukkitEntity().getLocation());
  }
  return null;
}","/** 
 * Get the eye location of this entity
 * @return  The location
 */
public dLocation getEyeLocation(){
  if (isPlayer()) {
    return new dLocation(getPlayer().getEyeLocation());
  }
 else   if (!isGeneric() && isLivingEntity()) {
    return new dLocation(getLivingEntity().getEyeLocation());
  }
 else   if (!isGeneric()) {
    return new dLocation(getBukkitEntity().getLocation());
  }
  return null;
}",0.8825136612021858
10198,"@EventHandler public void specialRecipeClick(InventoryClickEvent event){
  if (ItemScriptContainer.specialrecipesMap.isEmpty() && ItemScriptContainer.shapelessRecipesMap.isEmpty())   return;
  if (!(event.getInventory() instanceof CraftingInventory))   return;
  SlotType slotType=event.getSlotType();
  if (slotType.equals(InventoryType.SlotType.CRAFTING) || slotType.equals(InventoryType.SlotType.RESULT)) {
    CraftingInventory inventory=(CraftingInventory)event.getInventory();
    Player player=(Player)event.getWhoClicked();
    if (slotType.equals(InventoryType.SlotType.RESULT) && event.isShiftClick()) {
      emulateSpecialRecipeResultShiftClick(inventory,player);
    }
 else {
      processSpecialRecipes(inventory,player);
    }
    if (slotType.equals(SlotType.RESULT)) {
      removeOneFromEachSlot(inventory,player);
    }
  }
}","@EventHandler public void specialRecipeClick(InventoryClickEvent event){
  if (ItemScriptContainer.specialrecipesMap.isEmpty() && ItemScriptContainer.shapelessRecipesMap.isEmpty())   return;
  if (!(event.getInventory() instanceof CraftingInventory))   return;
  SlotType slotType=event.getSlotType();
  if (slotType.equals(InventoryType.SlotType.CRAFTING) || slotType.equals(InventoryType.SlotType.RESULT)) {
    CraftingInventory inventory=(CraftingInventory)event.getInventory();
    Player player=(Player)event.getWhoClicked();
    boolean clicked;
    if (slotType.equals(InventoryType.SlotType.RESULT) && event.isShiftClick()) {
      clicked=emulateSpecialRecipeResultShiftClick(inventory,player);
    }
 else {
      clicked=processSpecialRecipes(inventory,player);
    }
    if (clicked && slotType.equals(SlotType.RESULT)) {
      removeOneFromEachSlot(inventory,player);
    }
  }
}",0.9723820483314154
10199,"public void processSpecialRecipes(final CraftingInventory inventory,final Player player){
  Bukkit.getScheduler().scheduleSyncDelayedTask(DenizenAPI.getCurrentInstance(),new Runnable(){
    @Override public void run(){
      ItemStack[] matrix=inventory.getMatrix();
      dItem result=getSpecialRecipeResult(matrix);
      if (result != null) {
        Map<String,dObject> context=new HashMap<String,dObject>();
        context.put(""String_Node_Str"",new dInventory(inventory));
        context.put(""String_Node_Str"",result);
        dList recipeList=new dList();
        for (        ItemStack item : inventory.getMatrix()) {
          if (item != null)           recipeList.add(new dItem(item).identify());
 else           recipeList.add(new dItem(Material.AIR).identify());
        }
        context.put(""String_Node_Str"",recipeList);
        List<String> determinations=OldEventManager.doEvents(Arrays.asList(""String_Node_Str"",result.identifySimple() + ""String_Node_Str"",result.identifyMaterial() + ""String_Node_Str""),new BukkitScriptEntryData(dEntity.getPlayerFrom(player),null),context);
        for (        String determination : determinations) {
          if (determination.toUpperCase().startsWith(""String_Node_Str""))           return;
 else           if (dItem.matches(determination)) {
            result=dItem.valueOf(determination);
          }
        }
        inventory.setResult(result.getItemStack());
        player.updateInventory();
      }
    }
  }
,0);
}","public boolean processSpecialRecipes(final CraftingInventory inventory,final Player player){
  ItemStack[] matrix1=inventory.getMatrix();
  dItem result1=getSpecialRecipeResult(matrix1);
  boolean returnme=result1 != null;
  Bukkit.getScheduler().scheduleSyncDelayedTask(DenizenAPI.getCurrentInstance(),new Runnable(){
    @Override public void run(){
      ItemStack[] matrix=inventory.getMatrix();
      dItem result=getSpecialRecipeResult(matrix);
      if (result != null) {
        Map<String,dObject> context=new HashMap<String,dObject>();
        context.put(""String_Node_Str"",new dInventory(inventory));
        context.put(""String_Node_Str"",result);
        dList recipeList=new dList();
        for (        ItemStack item : inventory.getMatrix()) {
          if (item != null)           recipeList.add(new dItem(item).identify());
 else           recipeList.add(new dItem(Material.AIR).identify());
        }
        context.put(""String_Node_Str"",recipeList);
        List<String> determinations=OldEventManager.doEvents(Arrays.asList(""String_Node_Str"",result.identifySimple() + ""String_Node_Str"",result.identifyMaterial() + ""String_Node_Str""),new BukkitScriptEntryData(dEntity.getPlayerFrom(player),null),context);
        for (        String determination : determinations) {
          if (determination.toUpperCase().startsWith(""String_Node_Str""))           return;
 else           if (dItem.matches(determination)) {
            result=dItem.valueOf(determination);
          }
        }
        inventory.setResult(result.getItemStack());
        player.updateInventory();
      }
    }
  }
,0);
  return returnme;
}",0.948586118251928
10200,"public void emulateSpecialRecipeResultShiftClick(CraftingInventory inventory,Player player){
  ItemStack[] matrix=inventory.getMatrix();
  dItem result=getSpecialRecipeResult(matrix);
  if (result != null) {
    int lowestAmount=0;
    for (int n=0; n < matrix.length - 1; n++) {
      if ((matrix[n].getAmount() > 0 && matrix[n].getAmount() < lowestAmount) || lowestAmount == 0) {
        lowestAmount=matrix[n].getAmount();
      }
    }
    for (int n=0; n < matrix.length - 1; n++) {
      if (matrix[n].getAmount() > 0) {
        matrix[n].setAmount(matrix[n].getAmount() - lowestAmount);
        if (matrix[n].getAmount() <= 0) {
          matrix[n]=null;
        }
      }
    }
    if (lowestAmount > 1) {
      ItemStack resultStack=result.getItemStack().clone();
      resultStack.setAmount(lowestAmount * resultStack.getAmount());
      inventory.setContents(matrix);
      inventory.setResult(resultStack);
      player.updateInventory();
    }
  }
}","public boolean emulateSpecialRecipeResultShiftClick(CraftingInventory inventory,Player player){
  ItemStack[] matrix=inventory.getMatrix();
  dItem result=getSpecialRecipeResult(matrix);
  if (result != null) {
    int lowestAmount=0;
    for (int n=0; n < matrix.length - 1; n++) {
      if ((matrix[n].getAmount() > 0 && matrix[n].getAmount() < lowestAmount) || lowestAmount == 0) {
        lowestAmount=matrix[n].getAmount();
      }
    }
    for (int n=0; n < matrix.length - 1; n++) {
      if (matrix[n].getAmount() > 0) {
        matrix[n].setAmount(matrix[n].getAmount() - lowestAmount);
        if (matrix[n].getAmount() <= 0) {
          matrix[n]=null;
        }
      }
    }
    if (lowestAmount > 1) {
      ItemStack resultStack=result.getItemStack().clone();
      resultStack.setAmount(lowestAmount * resultStack.getAmount());
      inventory.setContents(matrix);
      inventory.setResult(resultStack);
      player.updateInventory();
    }
    return true;
  }
  return false;
}",0.9775510204081632
10201,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (offlinePlayer == null)   return null;
  if (attribute.startsWith(""String_Node_Str"")) {
    return Element.TRUE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE.toString()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dList(PlayerTags.playerChatHistory.get(getName())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    int x=1;
    if (attribute.hasContext(1) && aH.matchesInteger(attribute.getContext(1)))     x=attribute.getIntContext(1);
    if (!PlayerTags.playerChatHistory.containsKey(getName()))     return null;
 else     return new Element(PlayerTags.playerChatHistory.get(getName()).get(x - 1)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return null;
    if (attribute.getAttribute(2).equalsIgnoreCase(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(!FlagManager.playerHasFlag(this,flag_name)).getAttribute(attribute.fulfill(2));
    if (attribute.getAttribute(2).equalsIgnoreCase(""String_Node_Str"") && !FlagManager.playerHasFlag(this,flag_name))     return new Element(0).getAttribute(attribute.fulfill(2));
    if (FlagManager.playerHasFlag(this,flag_name)) {
      FlagManager.Flag flag=DenizenAPI.getCurrentInstance().flagManager().getPlayerFlag(this,flag_name);
      return new dList(flag.toString(),true,flag.values()).getAttribute(attribute.fulfill(1));
    }
    return new Element(identify()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return null;
    return new Element(FlagManager.playerHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dList allFlags=new dList(DenizenAPI.getCurrentInstance().flagManager().listPlayerFlags(this));
    dList searchFlags=null;
    if (!allFlags.isEmpty() && attribute.hasContext(1)) {
      searchFlags=new dList();
      String search=attribute.getContext(1).toLowerCase();
      if (search.startsWith(""String_Node_Str"")) {
        try {
          Pattern pattern=Pattern.compile(search.substring(6));
          for (          String flag : allFlags)           if (pattern.matcher(flag).matches())           searchFlags.add(flag);
        }
 catch (        Exception e) {
          dB.echoError(e);
        }
      }
 else {
        for (        String flag : allFlags)         if (flag.toLowerCase().contains(search))         searchFlags.add(flag);
      }
    }
    return searchFlags == null ? allFlags.getAttribute(attribute.fulfill(1)) : searchFlags.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String outcome=""String_Node_Str"";
    if (attribute.hasContext(1)) {
      try {
        outcome=DenizenAPI.getCurrentInstance().getSaves().getString(""String_Node_Str"" + getName() + ""String_Node_Str""+ dScript.valueOf(attribute.getContext(1)).getName()+ ""String_Node_Str"");
      }
 catch (      Exception e) {
        outcome=""String_Node_Str"";
      }
    }
    return new Element(outcome).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.economy != null) {
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Depends.economy.currencyNameSingular()).getAttribute(attribute.fulfill(2));
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Depends.economy.currencyNamePlural()).getAttribute(attribute.fulfill(2));
      return new Element(Depends.economy.getBalance(getName())).getAttribute(attribute.fulfill(1));
    }
 else {
      if (!attribute.hasAlternative())       dB.echoError(""String_Node_Str"");
      return null;
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    int range=50;
    int attribs=1;
    if (attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2) && aH.matchesInteger(attribute.getContext(2))) {
      attribs=2;
      range=attribute.getIntContext(2);
    }
    List<Entity> entities=getPlayerEntity().getNearbyEntities(range,range,range);
    ArrayList<LivingEntity> possibleTargets=new ArrayList<LivingEntity>();
    for (    Entity entity : entities) {
      if (entity instanceof LivingEntity) {
        if (attribute.hasContext(1)) {
          String context=attribute.getContext(1);
          if (context.toLowerCase().startsWith(""String_Node_Str""))           context=context.substring(3);
          for (          String ent : context.split(""String_Node_Str"")) {
            boolean valid=false;
            if (ent.equalsIgnoreCase(""String_Node_Str"") && Depends.citizens != null && CitizensAPI.getNPCRegistry().isNPC(entity)) {
              valid=true;
            }
 else             if (dEntity.matches(ent)) {
              if (dEntity.valueOf(ent).isGeneric()) {
                if (Depends.citizens == null || !CitizensAPI.getNPCRegistry().isNPC(entity)) {
                  valid=true;
                }
              }
 else {
                valid=true;
              }
            }
            if (valid)             possibleTargets.add((LivingEntity)entity);
          }
        }
 else {
          possibleTargets.add((LivingEntity)entity);
          entity.getType();
        }
      }
    }
    BlockIterator bi;
    try {
      bi=new BlockIterator(getPlayerEntity(),range);
    }
 catch (    IllegalStateException e) {
      return null;
    }
    Block b;
    Location l;
    int bx, by, bz;
    double ex, ey, ez;
    while (bi.hasNext()) {
      b=bi.next();
      bx=b.getX();
      by=b.getY();
      bz=b.getZ();
      if (b.getType() != Material.AIR) {
        break;
      }
 else {
        for (        LivingEntity possibleTarget : possibleTargets) {
          l=possibleTarget.getLocation();
          ex=l.getX();
          ey=l.getY();
          ez=l.getZ();
          if ((bx - .50 <= ex && ex <= bx + 1.50) && (bz - .50 <= ez && ez <= bz + 1.50) && (by - 1 <= ey && ey <= by + 2.5)) {
            return new dEntity(possibleTarget).getAttribute(attribute.fulfill(attribs));
          }
        }
      }
    }
    return null;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    List<String> players=new ArrayList<String>();
    if (attribute.startsWith(""String_Node_Str"")) {
      for (      Player player : Bukkit.getOnlinePlayers())       players.add(player.getName());
      return new dList(players).getAttribute(attribute.fulfill(2));
    }
 else     if (attribute.startsWith(""String_Node_Str"")) {
      for (      OfflinePlayer player : Bukkit.getOfflinePlayers()) {
        if (!player.isOnline())         players.add(""String_Node_Str"" + player.getUniqueId().toString());
      }
      return new dList(players).getAttribute(attribute.fulfill(2));
    }
 else {
      for (      OfflinePlayer player : Bukkit.getOfflinePlayers())       players.add(""String_Node_Str"" + player.getUniqueId().toString());
      return new dList(players).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && !isOnline())   return new Element(getName()).getAttribute(attribute.fulfill(1));
 else   if (attribute.startsWith(""String_Node_Str"") && !isOnline())   return new Element(offlinePlayer.getUniqueId().toString()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getSaveName()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getOfflinePlayer().getBedSpawnLocation()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && !isOnline()) {
    return getLocation().getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(getOfflinePlayer().getFirstPlayed()).getAttribute(attribute.fulfill(1));
 else     return new Duration(getOfflinePlayer().getFirstPlayed() / 50).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(true).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isHealthScaled()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getHealthScale()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getMaximumAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getRemainingAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isBanned()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(isOnline()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isOp()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isWhitelisted()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(getOfflinePlayer().getLastPlayed()).getAttribute(attribute.fulfill(1));
 else     return new Duration(getOfflinePlayer().getLastPlayed() / 50).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.permissions == null) {
      if (!attribute.hasAlternative())       dB.echoError(""String_Node_Str"");
      return null;
    }
    dList list=new dList();
    for (    String group : Depends.permissions.getGroups()) {
      if (Depends.permissions.playerInGroup(null,offlinePlayer,group)) {
        list.add(group);
      }
    }
    return list.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.permissions == null) {
      if (!attribute.hasAlternative())       dB.echoError(""String_Node_Str"");
      return null;
    }
    String group=attribute.getContext(1);
    if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.playerInGroup((World)null,getName(),group)).getAttribute(attribute.fulfill(2));
 else     if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.playerInGroup(attribute.getContext(2),getName(),group)).getAttribute(attribute.fulfill(2));
 else     if (isOnline())     return new Element(Depends.permissions.playerInGroup(getPlayerEntity(),group)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    String permission=attribute.getContext(1);
    if (Depends.permissions == null) {
      if (!attribute.hasAlternative()) {
        dB.echoError(""String_Node_Str"");
      }
      return null;
    }
    if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.has((World)null,getName(),permission)).getAttribute(attribute.fulfill(2));
 else     if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.has(attribute.getContext(2),getName(),permission)).getAttribute(attribute.fulfill(2));
 else     if (isOnline())     return new Element(getPlayerEntity().hasPermission(permission)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return getInventory().getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return getEnderChest().getAttribute(attribute.fulfill(1));
  if (!isOnline())   return new Element(identify()).getAttribute(attribute);
  if (attribute.startsWith(""String_Node_Str""))   return new dInventory(getPlayerEntity().getOpenInventory().getTopInventory()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dItem(getPlayerEntity().getItemOnCursor()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getPlayerEntity().getInventory().getHeldItemSlot() + 1).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getPlayerEntity().hasMetadata(""String_Node_Str""))     return getSelectedNPC().getAttribute(attribute.fulfill(1));
 else     return null;
  }
  if (attribute.startsWith(""String_Node_Str"") && !attribute.startsWith(""String_Node_Str""))   return new dEntity(getPlayerEntity()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str""))     return new Element(getPlayerEntity().getAddress().toString()).getAttribute(attribute.fulfill(1));
    return new Element(getPlayerEntity().getAddress().getHostName()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getDisplayName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerListName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getName()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dScript script=dScript.valueOf(attribute.getContext(1));
    if (script == null)     return Element.FALSE.getAttribute(attribute.fulfill(1));
    return new Element(FinishCommand.getScriptCompletes(getName(),script.getName()) > 0).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dScript script=dScript.valueOf(attribute.getContext(1));
    if (script == null)     return Element.FALSE.getAttribute(attribute.fulfill(1));
    return new Element(FailCommand.getScriptFails(getName(),script.getName()) > 0).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getPlayerEntity().getCompassTarget()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getAllowFlight()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getFlySpeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHunger=getPlayerEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHunger=attribute.getIntContext(2);
    if (getPlayerEntity().getFoodLevel() / maxHunger < .10)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < .40)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < .75)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < 1)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getSaturation()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getFoodLevel()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getMaximumAir()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getRemainingAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str""))     return new Element(getPlayerEntity().getGameMode().getValue()).getAttribute(attribute.fulfill(1));
    return new Element(getPlayerEntity().getGameMode().name()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isBlocking()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(((CraftPlayer)getPlayerEntity()).getHandle().ping).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isFlying()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSleeping()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSneaking()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSprinting()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    Statistic statistic=Statistic.valueOf(attribute.getContext(1).toUpperCase());
    if (attribute.getAttribute(2).startsWith(""String_Node_Str"")) {
      if (statistic == null)       return null;
      dObject obj=ObjectFetcher.pickObjectFor(attribute.getContext(2));
      if (obj instanceof dMaterial)       return new Element(getPlayerEntity().getStatistic(statistic,((dMaterial)obj).getMaterial())).getAttribute(attribute.fulfill(2));
 else       if (obj instanceof dEntity)       return new Element(getPlayerEntity().getStatistic(statistic,((dEntity)obj).getEntityType())).getAttribute(attribute.fulfill(2));
 else       return null;
    }
    if (statistic == null)     return null;
    return new Element(getPlayerEntity().getStatistic(statistic)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(getPlayerEntity().getSleepTicks() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerTime()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getWalkSpeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getPlayerEntity().getPlayerWeather() != null)     return new Element(getPlayerEntity().getPlayerWeather().name()).getAttribute(attribute.fulfill(1));
 else     return null;
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getLevel()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getExpToLevel()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getTotalExperience()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getExp() * 100).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new dEntity(getPlayerEntity()).getAttribute(attribute);
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (offlinePlayer == null)   return null;
  if (attribute.startsWith(""String_Node_Str"")) {
    return Element.TRUE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE.toString()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dList(PlayerTags.playerChatHistory.get(getName())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    int x=1;
    if (attribute.hasContext(1) && aH.matchesInteger(attribute.getContext(1)))     x=attribute.getIntContext(1);
    if (!PlayerTags.playerChatHistory.containsKey(getName()))     return null;
 else     return new Element(PlayerTags.playerChatHistory.get(getName()).get(x - 1)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return null;
    if (attribute.getAttribute(2).equalsIgnoreCase(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(!FlagManager.playerHasFlag(this,flag_name)).getAttribute(attribute.fulfill(2));
    if (attribute.getAttribute(2).equalsIgnoreCase(""String_Node_Str"") && !FlagManager.playerHasFlag(this,flag_name))     return new Element(0).getAttribute(attribute.fulfill(2));
    if (FlagManager.playerHasFlag(this,flag_name)) {
      FlagManager.Flag flag=DenizenAPI.getCurrentInstance().flagManager().getPlayerFlag(this,flag_name);
      return new dList(flag.toString(),true,flag.values()).getAttribute(attribute.fulfill(1));
    }
    return new Element(identify()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return null;
    return new Element(FlagManager.playerHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dList allFlags=new dList(DenizenAPI.getCurrentInstance().flagManager().listPlayerFlags(this));
    dList searchFlags=null;
    if (!allFlags.isEmpty() && attribute.hasContext(1)) {
      searchFlags=new dList();
      String search=attribute.getContext(1).toLowerCase();
      if (search.startsWith(""String_Node_Str"")) {
        try {
          Pattern pattern=Pattern.compile(search.substring(6));
          for (          String flag : allFlags)           if (pattern.matcher(flag).matches())           searchFlags.add(flag);
        }
 catch (        Exception e) {
          dB.echoError(e);
        }
      }
 else {
        for (        String flag : allFlags)         if (flag.toLowerCase().contains(search))         searchFlags.add(flag);
      }
    }
    return searchFlags == null ? allFlags.getAttribute(attribute.fulfill(1)) : searchFlags.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String outcome=""String_Node_Str"";
    if (attribute.hasContext(1)) {
      try {
        outcome=DenizenAPI.getCurrentInstance().getSaves().getString(""String_Node_Str"" + getName() + ""String_Node_Str""+ dScript.valueOf(attribute.getContext(1)).getName()+ ""String_Node_Str"");
      }
 catch (      Exception e) {
        outcome=""String_Node_Str"";
      }
    }
    return new Element(outcome).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.economy != null) {
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Depends.economy.currencyNameSingular()).getAttribute(attribute.fulfill(2));
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Depends.economy.currencyNamePlural()).getAttribute(attribute.fulfill(2));
      return new Element(Depends.economy.getBalance(getName())).getAttribute(attribute.fulfill(1));
    }
 else {
      if (!attribute.hasAlternative())       dB.echoError(""String_Node_Str"");
      return null;
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    int range=50;
    int attribs=1;
    if (attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2) && aH.matchesInteger(attribute.getContext(2))) {
      attribs=2;
      range=attribute.getIntContext(2);
    }
    List<Entity> entities=getPlayerEntity().getNearbyEntities(range,range,range);
    ArrayList<LivingEntity> possibleTargets=new ArrayList<LivingEntity>();
    for (    Entity entity : entities) {
      if (entity instanceof LivingEntity) {
        if (attribute.hasContext(1)) {
          String context=attribute.getContext(1);
          if (context.toLowerCase().startsWith(""String_Node_Str""))           context=context.substring(3);
          for (          String ent : context.split(""String_Node_Str"")) {
            boolean valid=false;
            if (ent.equalsIgnoreCase(""String_Node_Str"") && Depends.citizens != null && CitizensAPI.getNPCRegistry().isNPC(entity)) {
              valid=true;
            }
 else             if (dEntity.matches(ent)) {
              if (dEntity.valueOf(ent).isGeneric()) {
                if (Depends.citizens == null || !CitizensAPI.getNPCRegistry().isNPC(entity)) {
                  valid=true;
                }
              }
 else {
                valid=true;
              }
            }
            if (valid)             possibleTargets.add((LivingEntity)entity);
          }
        }
 else {
          possibleTargets.add((LivingEntity)entity);
          entity.getType();
        }
      }
    }
    BlockIterator bi;
    try {
      bi=new BlockIterator(getPlayerEntity(),range);
    }
 catch (    IllegalStateException e) {
      return null;
    }
    Block b;
    Location l;
    int bx, by, bz;
    double ex, ey, ez;
    while (bi.hasNext()) {
      b=bi.next();
      bx=b.getX();
      by=b.getY();
      bz=b.getZ();
      if (b.getType() != Material.AIR) {
        break;
      }
 else {
        for (        LivingEntity possibleTarget : possibleTargets) {
          l=possibleTarget.getLocation();
          ex=l.getX();
          ey=l.getY();
          ez=l.getZ();
          if ((bx - .50 <= ex && ex <= bx + 1.50) && (bz - .50 <= ez && ez <= bz + 1.50) && (by - 1 <= ey && ey <= by + 2.5)) {
            return new dEntity(possibleTarget).getAttribute(attribute.fulfill(attribs));
          }
        }
      }
    }
    return null;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    List<String> players=new ArrayList<String>();
    if (attribute.startsWith(""String_Node_Str"")) {
      for (      Player player : Bukkit.getOnlinePlayers())       players.add(player.getName());
      return new dList(players).getAttribute(attribute.fulfill(2));
    }
 else     if (attribute.startsWith(""String_Node_Str"")) {
      for (      OfflinePlayer player : Bukkit.getOfflinePlayers()) {
        if (!player.isOnline())         players.add(""String_Node_Str"" + player.getUniqueId().toString());
      }
      return new dList(players).getAttribute(attribute.fulfill(2));
    }
 else {
      for (      OfflinePlayer player : Bukkit.getOfflinePlayers())       players.add(""String_Node_Str"" + player.getUniqueId().toString());
      return new dList(players).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && !isOnline())   return new Element(getName()).getAttribute(attribute.fulfill(1));
 else   if (attribute.startsWith(""String_Node_Str"") && !isOnline())   return new Element(offlinePlayer.getUniqueId().toString()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getSaveName()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getOfflinePlayer().getBedSpawnLocation() == null) {
      return null;
    }
    return new dLocation(getOfflinePlayer().getBedSpawnLocation()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && !isOnline()) {
    return getLocation().getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(getOfflinePlayer().getFirstPlayed()).getAttribute(attribute.fulfill(1));
 else     return new Duration(getOfflinePlayer().getFirstPlayed() / 50).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(true).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isHealthScaled()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getHealthScale()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getMaximumAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getRemainingAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isBanned()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(isOnline()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isOp()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isWhitelisted()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(getOfflinePlayer().getLastPlayed()).getAttribute(attribute.fulfill(1));
 else     return new Duration(getOfflinePlayer().getLastPlayed() / 50).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.permissions == null) {
      if (!attribute.hasAlternative())       dB.echoError(""String_Node_Str"");
      return null;
    }
    dList list=new dList();
    for (    String group : Depends.permissions.getGroups()) {
      if (Depends.permissions.playerInGroup(null,offlinePlayer,group)) {
        list.add(group);
      }
    }
    return list.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.permissions == null) {
      if (!attribute.hasAlternative())       dB.echoError(""String_Node_Str"");
      return null;
    }
    String group=attribute.getContext(1);
    if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.playerInGroup((World)null,getName(),group)).getAttribute(attribute.fulfill(2));
 else     if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.playerInGroup(attribute.getContext(2),getName(),group)).getAttribute(attribute.fulfill(2));
 else     if (isOnline())     return new Element(Depends.permissions.playerInGroup(getPlayerEntity(),group)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    String permission=attribute.getContext(1);
    if (Depends.permissions == null) {
      if (!attribute.hasAlternative()) {
        dB.echoError(""String_Node_Str"");
      }
      return null;
    }
    if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.has((World)null,getName(),permission)).getAttribute(attribute.fulfill(2));
 else     if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.has(attribute.getContext(2),getName(),permission)).getAttribute(attribute.fulfill(2));
 else     if (isOnline())     return new Element(getPlayerEntity().hasPermission(permission)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return getInventory().getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return getEnderChest().getAttribute(attribute.fulfill(1));
  if (!isOnline())   return new Element(identify()).getAttribute(attribute);
  if (attribute.startsWith(""String_Node_Str""))   return new dInventory(getPlayerEntity().getOpenInventory().getTopInventory()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dItem(getPlayerEntity().getItemOnCursor()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getPlayerEntity().getInventory().getHeldItemSlot() + 1).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getPlayerEntity().hasMetadata(""String_Node_Str""))     return getSelectedNPC().getAttribute(attribute.fulfill(1));
 else     return null;
  }
  if (attribute.startsWith(""String_Node_Str"") && !attribute.startsWith(""String_Node_Str""))   return new dEntity(getPlayerEntity()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str""))     return new Element(getPlayerEntity().getAddress().toString()).getAttribute(attribute.fulfill(1));
    return new Element(getPlayerEntity().getAddress().getHostName()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getDisplayName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerListName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getName()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dScript script=dScript.valueOf(attribute.getContext(1));
    if (script == null)     return Element.FALSE.getAttribute(attribute.fulfill(1));
    return new Element(FinishCommand.getScriptCompletes(getName(),script.getName()) > 0).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dScript script=dScript.valueOf(attribute.getContext(1));
    if (script == null)     return Element.FALSE.getAttribute(attribute.fulfill(1));
    return new Element(FailCommand.getScriptFails(getName(),script.getName()) > 0).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getPlayerEntity().getCompassTarget()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getAllowFlight()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getFlySpeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHunger=getPlayerEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHunger=attribute.getIntContext(2);
    if (getPlayerEntity().getFoodLevel() / maxHunger < .10)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < .40)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < .75)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < 1)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getSaturation()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getFoodLevel()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getMaximumAir()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getRemainingAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str""))     return new Element(getPlayerEntity().getGameMode().getValue()).getAttribute(attribute.fulfill(1));
    return new Element(getPlayerEntity().getGameMode().name()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isBlocking()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(((CraftPlayer)getPlayerEntity()).getHandle().ping).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isFlying()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSleeping()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSneaking()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSprinting()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    Statistic statistic=Statistic.valueOf(attribute.getContext(1).toUpperCase());
    if (attribute.getAttribute(2).startsWith(""String_Node_Str"")) {
      if (statistic == null)       return null;
      dObject obj=ObjectFetcher.pickObjectFor(attribute.getContext(2));
      if (obj instanceof dMaterial)       return new Element(getPlayerEntity().getStatistic(statistic,((dMaterial)obj).getMaterial())).getAttribute(attribute.fulfill(2));
 else       if (obj instanceof dEntity)       return new Element(getPlayerEntity().getStatistic(statistic,((dEntity)obj).getEntityType())).getAttribute(attribute.fulfill(2));
 else       return null;
    }
    if (statistic == null)     return null;
    return new Element(getPlayerEntity().getStatistic(statistic)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(getPlayerEntity().getSleepTicks() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerTime()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getWalkSpeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getPlayerEntity().getPlayerWeather() != null)     return new Element(getPlayerEntity().getPlayerWeather().name()).getAttribute(attribute.fulfill(1));
 else     return null;
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getLevel()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getExpToLevel()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getTotalExperience()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getExp() * 100).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new dEntity(getPlayerEntity()).getAttribute(attribute);
}",0.9970886850152904
10202,"@Command(aliases={""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",modifiers={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},min=1,max=5,permission=""String_Node_Str"",flags=""String_Node_Str"") public void debug(CommandContext args,CommandSender sender) throws CommandException {
  if (args.hasFlag('s')) {
    if (!dB.showDebug)     dB.toggle();
    dB.showStackTraces=!dB.showStackTraces;
    Messaging.sendInfo(sender,(dB.showStackTraces ? ""String_Node_Str"" + ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('c')) {
    if (!dB.showDebug)     dB.toggle();
    dB.showColor=!dB.showColor;
    Messaging.sendInfo(sender,(dB.showColor ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('o')) {
    if (!dB.showDebug)     dB.toggle();
    dB.debugOverride=!dB.debugOverride;
    Messaging.sendInfo(sender,(dB.debugOverride ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('e')) {
    if (!dB.showDebug)     dB.toggle();
    net.aufdemrand.denizencore.utilities.debugging.dB.showEventsTrimming=!net.aufdemrand.denizencore.utilities.debugging.dB.showEventsTrimming;
    Messaging.sendInfo(sender,(net.aufdemrand.denizencore.utilities.debugging.dB.showEventsTrimming ? ""String_Node_Str"" + ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('b')) {
    if (!dB.showDebug)     dB.toggle();
    net.aufdemrand.denizencore.utilities.debugging.dB.showScriptBuilder=!net.aufdemrand.denizencore.utilities.debugging.dB.showScriptBuilder;
    Messaging.sendInfo(sender,(net.aufdemrand.denizencore.utilities.debugging.dB.showScriptBuilder ? ""String_Node_Str"" + ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('r')) {
    if (!dB.showDebug)     dB.toggle();
    dB.record=!dB.record;
    dB.Recording=new StringBuilder();
    Messaging.sendInfo(sender,(dB.record ? ""String_Node_Str"" + ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('r')) {
    if (!dB.showDebug)     dB.toggle();
    net.aufdemrand.denizencore.utilities.debugging.dB.verbose=!net.aufdemrand.denizencore.utilities.debugging.dB.verbose;
    Messaging.sendInfo(sender,(dB.record ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('x')) {
    dB.filter=new ArrayList<String>();
    Messaging.sendInfo(sender,""String_Node_Str"");
  }
  if (args.hasFlag('n')) {
    if (!dB.showDebug)     dB.toggle();
    dB.shouldTrim=!dB.shouldTrim;
    Messaging.sendInfo(sender,(dB.shouldTrim ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasValueFlag(""String_Node_Str"")) {
    if (!dB.showDebug)     dB.toggle();
    for (    String filter : args.getFlag(""String_Node_Str"").split(""String_Node_Str""))     dB.filter.add(filter);
    Messaging.sendInfo(sender,""String_Node_Str"" + dB.filter.toString());
  }
 else   if (args.getFlags().isEmpty()) {
    dB.toggle();
    Messaging.sendInfo(sender,""String_Node_Str"" + (dB.showDebug ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}","@Command(aliases={""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",modifiers={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},min=1,max=5,permission=""String_Node_Str"",flags=""String_Node_Str"") public void debug(CommandContext args,CommandSender sender) throws CommandException {
  if (args.hasFlag('s')) {
    if (!dB.showDebug)     dB.toggle();
    dB.showStackTraces=!dB.showStackTraces;
    Messaging.sendInfo(sender,(dB.showStackTraces ? ""String_Node_Str"" + ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('c')) {
    if (!dB.showDebug)     dB.toggle();
    dB.showColor=!dB.showColor;
    Messaging.sendInfo(sender,(dB.showColor ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('o')) {
    if (!dB.showDebug)     dB.toggle();
    dB.debugOverride=!dB.debugOverride;
    Messaging.sendInfo(sender,(dB.debugOverride ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('e')) {
    if (!dB.showDebug)     dB.toggle();
    net.aufdemrand.denizencore.utilities.debugging.dB.showEventsTrimming=!net.aufdemrand.denizencore.utilities.debugging.dB.showEventsTrimming;
    Messaging.sendInfo(sender,(net.aufdemrand.denizencore.utilities.debugging.dB.showEventsTrimming ? ""String_Node_Str"" + ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('b')) {
    if (!dB.showDebug)     dB.toggle();
    net.aufdemrand.denizencore.utilities.debugging.dB.showScriptBuilder=!net.aufdemrand.denizencore.utilities.debugging.dB.showScriptBuilder;
    Messaging.sendInfo(sender,(net.aufdemrand.denizencore.utilities.debugging.dB.showScriptBuilder ? ""String_Node_Str"" + ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('r')) {
    if (!dB.showDebug)     dB.toggle();
    dB.record=!dB.record;
    dB.Recording=new StringBuilder();
    Messaging.sendInfo(sender,(dB.record ? ""String_Node_Str"" + ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('v')) {
    if (!dB.showDebug)     dB.toggle();
    net.aufdemrand.denizencore.utilities.debugging.dB.verbose=!net.aufdemrand.denizencore.utilities.debugging.dB.verbose;
    Messaging.sendInfo(sender,(dB.record ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('x')) {
    dB.filter=new ArrayList<String>();
    Messaging.sendInfo(sender,""String_Node_Str"");
  }
  if (args.hasFlag('n')) {
    if (!dB.showDebug)     dB.toggle();
    dB.shouldTrim=!dB.shouldTrim;
    Messaging.sendInfo(sender,(dB.shouldTrim ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasValueFlag(""String_Node_Str"")) {
    if (!dB.showDebug)     dB.toggle();
    for (    String filter : args.getFlag(""String_Node_Str"").split(""String_Node_Str""))     dB.filter.add(filter);
    Messaging.sendInfo(sender,""String_Node_Str"" + dB.filter.toString());
  }
 else   if (args.getFlags().isEmpty()) {
    dB.toggle();
    Messaging.sendInfo(sender,""String_Node_Str"" + (dB.showDebug ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}",0.9996631862579992
10203,"@Override public void execute(final ScriptEntry scriptEntry) throws CommandExecutionException {
  final dList materials=scriptEntry.getdObject(""String_Node_Str"");
  final List<dLocation> locations=(List<dLocation>)scriptEntry.getObject(""String_Node_Str"");
  final dList location_list=scriptEntry.getdObject(""String_Node_Str"");
  final Element physics=scriptEntry.getElement(""String_Node_Str"");
  final Element natural=scriptEntry.getElement(""String_Node_Str"");
  final Element delayed=scriptEntry.getElement(""String_Node_Str"");
  final Element radiusElement=scriptEntry.getElement(""String_Node_Str"");
  final Element heightElement=scriptEntry.getElement(""String_Node_Str"");
  final Element depthElement=scriptEntry.getElement(""String_Node_Str"");
  final dScript script=scriptEntry.getdObject(""String_Node_Str"");
  final List<dMaterial> materialList=materials.filter(dMaterial.class);
  dB.report(scriptEntry,getName(),(locations == null ? location_list.debug() : aH.debugList(""String_Node_Str"",locations)) + materials.debug() + physics.debug()+ radiusElement.debug()+ heightElement.debug()+ depthElement.debug()+ natural.debug()+ delayed.debug()+ (script != null ? script.debug() : ""String_Node_Str""));
  final boolean doPhysics=physics.asBoolean();
  final boolean isNatural=natural.asBoolean();
  final int radius=radiusElement.asInt();
  final int height=heightElement.asInt();
  final int depth=depthElement.asInt();
  if ((locations == null || locations.size() == 0) && (location_list == null || location_list.size() == 0))   dB.echoError(""String_Node_Str"");
  if (materials.size() == 0)   dB.echoError(""String_Node_Str"");
  no_physics=!doPhysics;
  if (delayed.asBoolean()) {
    new BukkitRunnable(){
      int index=0;
      @Override public void run(){
        long start=System.currentTimeMillis();
        dLocation loc;
        if (locations != null) {
          loc=locations.get(0);
        }
 else {
          loc=dLocation.valueOf(location_list.get(0));
        }
        boolean was_static=preSetup(loc);
        while ((locations != null && locations.size() > index) || (location_list != null && location_list.size() > index)) {
          dLocation nLoc;
          if (locations != null) {
            nLoc=locations.get(index);
          }
 else {
            nLoc=dLocation.valueOf(location_list.get(index));
          }
          handleLocation(nLoc,index,materialList,doPhysics,isNatural,radius,height,depth);
          index++;
          if (System.currentTimeMillis() - start > 50) {
            break;
          }
        }
        postComplete(loc,was_static);
        if ((locations != null && locations.size() == index) || (location_list != null && location_list.size() == index)) {
          if (script != null) {
            List<ScriptEntry> entries=script.getContainer().getBaseEntries(scriptEntry.entryData.clone());
            ScriptQueue queue=InstantQueue.getQueue(ScriptQueue.getNextId(script.getContainer().getName())).addEntries(entries);
            queue.start();
          }
          scriptEntry.setFinished(true);
          cancel();
        }
      }
    }
.runTaskTimer(DenizenAPI.getCurrentInstance(),1,1);
  }
 else {
    dLocation loc;
    if (locations != null) {
      loc=locations.get(0);
    }
 else {
      loc=dLocation.valueOf(location_list.get(0));
    }
    boolean was_static=preSetup(loc);
    int index=0;
    if (locations != null) {
      for (      dObject obj : locations) {
        handleLocation((dLocation)obj,index,materialList,doPhysics,isNatural,radius,height,depth);
        index++;
      }
    }
 else {
      for (      String str : location_list) {
        handleLocation(dLocation.valueOf(str),index,materialList,doPhysics,isNatural,radius,height,depth);
        index++;
      }
    }
    postComplete(loc,was_static);
    scriptEntry.setFinished(true);
  }
}","@Override public void execute(final ScriptEntry scriptEntry) throws CommandExecutionException {
  final dList materials=scriptEntry.getdObject(""String_Node_Str"");
  final List<dLocation> locations=(List<dLocation>)scriptEntry.getObject(""String_Node_Str"");
  final dList location_list=scriptEntry.getdObject(""String_Node_Str"");
  final Element physics=scriptEntry.getElement(""String_Node_Str"");
  final Element natural=scriptEntry.getElement(""String_Node_Str"");
  final Element delayed=scriptEntry.getElement(""String_Node_Str"");
  final Element radiusElement=scriptEntry.getElement(""String_Node_Str"");
  final Element heightElement=scriptEntry.getElement(""String_Node_Str"");
  final Element depthElement=scriptEntry.getElement(""String_Node_Str"");
  final dScript script=scriptEntry.getdObject(""String_Node_Str"");
  final List<dMaterial> materialList=materials.filter(dMaterial.class);
  dB.report(scriptEntry,getName(),(locations == null ? location_list.debug() : aH.debugList(""String_Node_Str"",locations)) + materials.debug() + physics.debug()+ radiusElement.debug()+ heightElement.debug()+ depthElement.debug()+ natural.debug()+ delayed.debug()+ (script != null ? script.debug() : ""String_Node_Str""));
  final boolean doPhysics=physics.asBoolean();
  final boolean isNatural=natural.asBoolean();
  final int radius=radiusElement.asInt();
  final int height=heightElement.asInt();
  final int depth=depthElement.asInt();
  if ((locations == null || locations.size() == 0) && (location_list == null || location_list.size() == 0))   dB.echoError(""String_Node_Str"");
  if (materialList.size() == 0)   dB.echoError(""String_Node_Str"");
  no_physics=!doPhysics;
  if (delayed.asBoolean()) {
    new BukkitRunnable(){
      int index=0;
      @Override public void run(){
        long start=System.currentTimeMillis();
        dLocation loc;
        if (locations != null) {
          loc=locations.get(0);
        }
 else {
          loc=dLocation.valueOf(location_list.get(0));
        }
        boolean was_static=preSetup(loc);
        while ((locations != null && locations.size() > index) || (location_list != null && location_list.size() > index)) {
          dLocation nLoc;
          if (locations != null) {
            nLoc=locations.get(index);
          }
 else {
            nLoc=dLocation.valueOf(location_list.get(index));
          }
          handleLocation(nLoc,index,materialList,doPhysics,isNatural,radius,height,depth);
          index++;
          if (System.currentTimeMillis() - start > 50) {
            break;
          }
        }
        postComplete(loc,was_static);
        if ((locations != null && locations.size() == index) || (location_list != null && location_list.size() == index)) {
          if (script != null) {
            List<ScriptEntry> entries=script.getContainer().getBaseEntries(scriptEntry.entryData.clone());
            ScriptQueue queue=InstantQueue.getQueue(ScriptQueue.getNextId(script.getContainer().getName())).addEntries(entries);
            queue.start();
          }
          scriptEntry.setFinished(true);
          cancel();
        }
      }
    }
.runTaskTimer(DenizenAPI.getCurrentInstance(),1,1);
  }
 else {
    dLocation loc;
    if (locations != null) {
      loc=locations.get(0);
    }
 else {
      loc=dLocation.valueOf(location_list.get(0));
    }
    boolean was_static=preSetup(loc);
    int index=0;
    if (locations != null) {
      for (      dObject obj : locations) {
        handleLocation((dLocation)obj,index,materialList,doPhysics,isNatural,radius,height,depth);
        index++;
      }
    }
 else {
      for (      String str : location_list) {
        handleLocation(dLocation.valueOf(str),index,materialList,doPhysics,isNatural,radius,height,depth);
        index++;
      }
    }
    postComplete(loc,was_static);
    scriptEntry.setFinished(true);
  }
}",0.9993490430933472
10204,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(final ScriptEntry scriptEntry) throws CommandExecutionException {
  List<dEntity> entities=(List<dEntity>)scriptEntry.getObject(""String_Node_Str"");
  dEntity target=(dEntity)scriptEntry.getObject(""String_Node_Str"");
  Boolean cancel=scriptEntry.hasObject(""String_Node_Str"");
  dB.report(scriptEntry,getName(),(cancel ? aH.debugObj(""String_Node_Str"",cancel) : ""String_Node_Str"") + aH.debugObj(""String_Node_Str"",entities.toString()) + (target != null ? aH.debugObj(""String_Node_Str"",target) : ""String_Node_Str""));
  for (  dEntity entity : entities) {
    if (entity.isNPC()) {
      Navigator nav=entity.getDenizenNPC().getCitizen().getNavigator();
      if (cancel.equals(false)) {
        nav.setTarget(target.getBukkitEntity(),true);
      }
 else {
        if (nav.isNavigating() && nav.getTargetType().equals(TargetType.ENTITY) && nav.getEntityTarget().isAggressive()) {
          nav.cancelNavigation();
        }
      }
    }
 else {
      if (cancel.equals(false)) {
        entity.target(target.getLivingEntity());
      }
 else {
        entity.target(null);
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void execute(final ScriptEntry scriptEntry) throws CommandExecutionException {
  List<dEntity> entities=(List<dEntity>)scriptEntry.getObject(""String_Node_Str"");
  dEntity target=(dEntity)scriptEntry.getObject(""String_Node_Str"");
  boolean cancel=scriptEntry.hasObject(""String_Node_Str"");
  dB.report(scriptEntry,getName(),(cancel ? aH.debugObj(""String_Node_Str"",""String_Node_Str"") : ""String_Node_Str"") + aH.debugObj(""String_Node_Str"",entities.toString()) + (target != null ? aH.debugObj(""String_Node_Str"",target) : ""String_Node_Str""));
  for (  dEntity entity : entities) {
    if (entity.isNPC()) {
      Navigator nav=entity.getDenizenNPC().getCitizen().getNavigator();
      if (!cancel) {
        nav.setTarget(target.getBukkitEntity(),true);
      }
 else {
        if (nav.isNavigating() && nav.getTargetType().equals(TargetType.ENTITY) && nav.getEntityTarget().isAggressive()) {
          nav.cancelNavigation();
        }
      }
    }
 else {
      if (!cancel) {
        entity.target(target.getLivingEntity());
      }
 else {
        entity.target(null);
      }
    }
  }
}",0.8836601307189542
10205,"@Command(aliases={""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",modifiers={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},min=1,max=5,permission=""String_Node_Str"",flags=""String_Node_Str"") public void debug(CommandContext args,CommandSender sender) throws CommandException {
  if (args.hasFlag('s')) {
    if (!dB.showDebug)     dB.toggle();
    dB.showStackTraces=!dB.showStackTraces;
    Messaging.sendInfo(sender,(dB.showStackTraces ? ""String_Node_Str"" + ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('c')) {
    if (!dB.showDebug)     dB.toggle();
    dB.showColor=!dB.showColor;
    Messaging.sendInfo(sender,(dB.showColor ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('o')) {
    if (!dB.showDebug)     dB.toggle();
    dB.debugOverride=!dB.debugOverride;
    Messaging.sendInfo(sender,(dB.debugOverride ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('e')) {
    if (!dB.showDebug)     dB.toggle();
    net.aufdemrand.denizencore.utilities.debugging.dB.showEventsTrimming=!net.aufdemrand.denizencore.utilities.debugging.dB.showEventsTrimming;
    Messaging.sendInfo(sender,(net.aufdemrand.denizencore.utilities.debugging.dB.showEventsTrimming ? ""String_Node_Str"" + ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('b')) {
    if (!dB.showDebug)     dB.toggle();
    net.aufdemrand.denizencore.utilities.debugging.dB.showScriptBuilder=!net.aufdemrand.denizencore.utilities.debugging.dB.showScriptBuilder;
    Messaging.sendInfo(sender,(net.aufdemrand.denizencore.utilities.debugging.dB.showScriptBuilder ? ""String_Node_Str"" + ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('r')) {
    if (!dB.showDebug)     dB.toggle();
    dB.record=!dB.record;
    dB.Recording=new StringBuilder();
    Messaging.sendInfo(sender,(dB.record ? ""String_Node_Str"" + ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('v')) {
    if (!dB.showDebug)     dB.toggle();
    net.aufdemrand.denizencore.utilities.debugging.dB.verbose=!net.aufdemrand.denizencore.utilities.debugging.dB.verbose;
    Messaging.sendInfo(sender,(dB.record ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('x')) {
    dB.filter=new ArrayList<String>();
    Messaging.sendInfo(sender,""String_Node_Str"");
  }
  if (args.hasFlag('n')) {
    if (!dB.showDebug)     dB.toggle();
    dB.shouldTrim=!dB.shouldTrim;
    Messaging.sendInfo(sender,(dB.shouldTrim ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasValueFlag(""String_Node_Str"")) {
    if (!dB.showDebug)     dB.toggle();
    for (    String filter : args.getFlag(""String_Node_Str"").split(""String_Node_Str""))     dB.filter.add(filter);
    Messaging.sendInfo(sender,""String_Node_Str"" + dB.filter.toString());
  }
 else   if (args.getFlags().isEmpty()) {
    dB.toggle();
    Messaging.sendInfo(sender,""String_Node_Str"" + (dB.showDebug ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}","@Command(aliases={""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",modifiers={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},min=1,max=5,permission=""String_Node_Str"",flags=""String_Node_Str"") public void debug(CommandContext args,CommandSender sender) throws CommandException {
  if (args.hasFlag('s')) {
    if (!dB.showDebug)     dB.toggle();
    dB.showStackTraces=!dB.showStackTraces;
    Messaging.sendInfo(sender,(dB.showStackTraces ? ""String_Node_Str"" + ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('c')) {
    if (!dB.showDebug)     dB.toggle();
    dB.showColor=!dB.showColor;
    Messaging.sendInfo(sender,(dB.showColor ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('o')) {
    if (!dB.showDebug)     dB.toggle();
    dB.debugOverride=!dB.debugOverride;
    Messaging.sendInfo(sender,(dB.debugOverride ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('e')) {
    if (!dB.showDebug)     dB.toggle();
    net.aufdemrand.denizencore.utilities.debugging.dB.showEventsTrimming=!net.aufdemrand.denizencore.utilities.debugging.dB.showEventsTrimming;
    Messaging.sendInfo(sender,(net.aufdemrand.denizencore.utilities.debugging.dB.showEventsTrimming ? ""String_Node_Str"" + ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('b')) {
    if (!dB.showDebug)     dB.toggle();
    net.aufdemrand.denizencore.utilities.debugging.dB.showScriptBuilder=!net.aufdemrand.denizencore.utilities.debugging.dB.showScriptBuilder;
    Messaging.sendInfo(sender,(net.aufdemrand.denizencore.utilities.debugging.dB.showScriptBuilder ? ""String_Node_Str"" + ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('r')) {
    if (!dB.showDebug)     dB.toggle();
    dB.record=!dB.record;
    dB.Recording=new StringBuilder();
    Messaging.sendInfo(sender,(dB.record ? ""String_Node_Str"" + ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('v')) {
    if (!dB.showDebug)     dB.toggle();
    net.aufdemrand.denizencore.utilities.debugging.dB.verbose=!net.aufdemrand.denizencore.utilities.debugging.dB.verbose;
    Messaging.sendInfo(sender,(net.aufdemrand.denizencore.utilities.debugging.dB.verbose ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasFlag('x')) {
    dB.filter=new ArrayList<String>();
    Messaging.sendInfo(sender,""String_Node_Str"");
  }
  if (args.hasFlag('n')) {
    if (!dB.showDebug)     dB.toggle();
    dB.shouldTrim=!dB.shouldTrim;
    Messaging.sendInfo(sender,(dB.shouldTrim ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (args.hasValueFlag(""String_Node_Str"")) {
    if (!dB.showDebug)     dB.toggle();
    for (    String filter : args.getFlag(""String_Node_Str"").split(""String_Node_Str""))     dB.filter.add(filter);
    Messaging.sendInfo(sender,""String_Node_Str"" + dB.filter.toString());
  }
 else   if (args.getFlags().isEmpty()) {
    dB.toggle();
    Messaging.sendInfo(sender,""String_Node_Str"" + (dB.showDebug ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}",0.989976612094888
10206,"private void cancelBlock(){
  if (currentTask != null) {
    currentTask.cancel();
    currentTask=null;
  }
  cancelTime=-1;
  location.getBlock().getState().update();
}","private void cancelBlock(){
  if (currentTask != null) {
    currentTask.cancel();
    currentTask=null;
  }
  cancelTime=-1;
  material=null;
  location.getBlock().getState().update();
}",0.9523809523809524
10207,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"") && arg.matchesArgumentType(dWorld.class)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asType(dWorld.class));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"",""String_Node_Str"") && arg.matchesArgumentType(dLocation.class)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asType(dLocation.class));
      scriptEntry.addObject(""String_Node_Str"",Element.TRUE);
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",Element.TRUE);
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",Element.TRUE);
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Integer)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Integer)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"",""String_Node_Str"") && arg.matchesArgumentType(dScript.class)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asType(dScript.class));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Double)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Double)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Integer)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
  }
  if (!scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str"")&& !scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.defaultObject(""String_Node_Str"",Element.FALSE).defaultObject(""String_Node_Str"",Element.FALSE).defaultObject(""String_Node_Str"",new Element(0)).defaultObject(""String_Node_Str"",new Element(0));
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"") && arg.matchesArgumentType(dWorld.class)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asType(dWorld.class));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"",""String_Node_Str"") && arg.matchesArgumentType(dLocation.class)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asType(dLocation.class));
      scriptEntry.addObject(""String_Node_Str"",new Element(true));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",new Element(true));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",new Element(true));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Integer)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Integer)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"",""String_Node_Str"") && arg.matchesArgumentType(dScript.class)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asType(dScript.class));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Double)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Double)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Integer)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
  }
  if (!scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str"")&& !scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.defaultObject(""String_Node_Str"",new Element(false)).defaultObject(""String_Node_Str"",new Element(false)).defaultObject(""String_Node_Str"",new Element(0)).defaultObject(""String_Node_Str"",new Element(0));
}",0.3434538152610442
10208,"public PropertyParser(){
  properties.clear();
  describes.clear();
  getFrom.clear();
  registerProperty(BukkitScriptProperties.class,dScript.class);
  registerProperty(EntityAge.class,dEntity.class);
  registerProperty(EntityAngry.class,dEntity.class);
  registerProperty(EntityColor.class,dEntity.class);
  registerProperty(EntityCritical.class,dEntity.class);
  registerProperty(EntityFirework.class,dEntity.class);
  registerProperty(EntityFramed.class,dEntity.class);
  registerProperty(EntityInfected.class,dEntity.class);
  registerProperty(EntityItem.class,dEntity.class);
  registerProperty(EntityJumpStrength.class,dEntity.class);
  registerProperty(EntityKnockback.class,dEntity.class);
  registerProperty(EntityPainting.class,dEntity.class);
  registerProperty(EntityPotion.class,dEntity.class);
  registerProperty(EntityPowered.class,dEntity.class);
  registerProperty(EntityProfession.class,dEntity.class);
  registerProperty(EntityRotation.class,dEntity.class);
  registerProperty(EntitySitting.class,dEntity.class);
  registerProperty(EntitySize.class,dEntity.class);
  registerProperty(EntitySkeleton.class,dEntity.class);
  registerProperty(EntityTame.class,dEntity.class);
  registerProperty(InventoryHolder.class,dInventory.class);
  registerProperty(InventoryContents.class,dInventory.class);
  registerProperty(InventorySize.class,dInventory.class);
  registerProperty(InventoryTitle.class,dInventory.class);
  registerProperty(ItemApple.class,dItem.class);
  registerProperty(ItemBook.class,dItem.class);
  registerProperty(ItemDisplayname.class,dItem.class);
  registerProperty(ItemDurability.class,dItem.class);
  registerProperty(ItemDye.class,dItem.class);
  registerProperty(ItemEnchantments.class,dItem.class);
  registerProperty(ItemFirework.class,dItem.class);
  registerProperty(ItemLore.class,dItem.class);
  registerProperty(ItemMap.class,dItem.class);
  registerProperty(ItemPlantgrowth.class,dItem.class);
  registerProperty(ItemPotion.class,dItem.class);
  registerProperty(ItemQuantity.class,dItem.class);
  registerProperty(ItemSkullskin.class,dItem.class);
  registerProperty(ItemSpawnEgg.class,dItem.class);
}","public PropertyParser(){
  properties.clear();
  describes.clear();
  getFrom.clear();
  registerProperty(BukkitScriptProperties.class,dScript.class);
  registerProperty(EntityAge.class,dEntity.class);
  registerProperty(EntityAngry.class,dEntity.class);
  registerProperty(EntityColor.class,dEntity.class);
  registerProperty(EntityCritical.class,dEntity.class);
  registerProperty(EntityFirework.class,dEntity.class);
  registerProperty(EntityFramed.class,dEntity.class);
  registerProperty(EntityInfected.class,dEntity.class);
  registerProperty(EntityItem.class,dEntity.class);
  registerProperty(EntityJumpStrength.class,dEntity.class);
  registerProperty(EntityKnockback.class,dEntity.class);
  registerProperty(EntityPainting.class,dEntity.class);
  registerProperty(EntityPotion.class,dEntity.class);
  registerProperty(EntityPowered.class,dEntity.class);
  registerProperty(EntityProfession.class,dEntity.class);
  registerProperty(EntityRotation.class,dEntity.class);
  registerProperty(EntitySitting.class,dEntity.class);
  registerProperty(EntitySize.class,dEntity.class);
  registerProperty(EntitySkeleton.class,dEntity.class);
  registerProperty(EntityTame.class,dEntity.class);
  registerProperty(InventoryHolder.class,dInventory.class);
  registerProperty(InventorySize.class,dInventory.class);
  registerProperty(InventoryContents.class,dInventory.class);
  registerProperty(InventoryTitle.class,dInventory.class);
  registerProperty(ItemApple.class,dItem.class);
  registerProperty(ItemBook.class,dItem.class);
  registerProperty(ItemDisplayname.class,dItem.class);
  registerProperty(ItemDurability.class,dItem.class);
  registerProperty(ItemDye.class,dItem.class);
  registerProperty(ItemEnchantments.class,dItem.class);
  registerProperty(ItemFirework.class,dItem.class);
  registerProperty(ItemLore.class,dItem.class);
  registerProperty(ItemMap.class,dItem.class);
  registerProperty(ItemPlantgrowth.class,dItem.class);
  registerProperty(ItemPotion.class,dItem.class);
  registerProperty(ItemQuantity.class,dItem.class);
  registerProperty(ItemSkullskin.class,dItem.class);
  registerProperty(ItemSpawnEgg.class,dItem.class);
}",0.9730357973035796
10209,"@Override public void onEnable(){
  try {
    net.minecraft.server.v1_7_R4.Block.getById(0);
  }
 catch (  NoClassDefFoundError e) {
    getLogger().warning(""String_Node_Str"");
    getLogger().warning(""String_Node_Str"");
    getLogger().warning(""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(this);
    startedSuccessful=false;
    return;
  }
  try {
    versionTag=this.getDescription().getVersion();
    DenizenCore.init(this);
    depends.initialize();
    if (Depends.citizens == null || !Depends.citizens.isEnabled()) {
      getLogger().warning(""String_Node_Str"");
    }
    startedSuccessful=true;
    dB.log(ChatColor.LIGHT_PURPLE + ""String_Node_Str"");
    dB.log(ChatColor.YELLOW + ""String_Node_Str"");
    dB.log(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
    dB.log(""String_Node_Str"");
    dB.log(ChatColor.GRAY + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
    dB.log(ChatColor.GRAY + ""String_Node_Str"" + ChatColor.WHITE+ versionTag);
    dB.log(ChatColor.LIGHT_PURPLE + ""String_Node_Str"");
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  try {
    MetricsLite metrics=new MetricsLite(this);
    metrics.start();
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  try {
    dNPCRegistry=new dNPCRegistry(this);
    commandManager=new CommandManager();
    commandManager.setInjector(new Injector(this));
    commandManager.register(DenizenCommandHandler.class);
    if (Depends.citizens != null) {
      Depends.citizens.registerCommandClass(NPCCommandHandler.class);
    }
    for (    OfflinePlayer player : Bukkit.getOfflinePlayers()) {
      dPlayer.notePlayer(player);
    }
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  try {
    DenizenCore.setCommandRegistry(getCommandRegistry());
    getCommandRegistry().registerCoreMembers();
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  try {
    ScriptRegistry._registerCoreTypes();
    saveDefaultConfig();
    reloadConfig();
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  try {
    new File(getDataFolder() + ""String_Node_Str"").mkdirs();
    new File(getDataFolder() + ""String_Node_Str"").mkdirs();
    new File(getDataFolder() + ""String_Node_Str"").mkdirs();
    if (!new File(getDataFolder() + ""String_Node_Str"").exists()) {
      String sourceFile=URLDecoder.decode(Denizen.class.getProtectionDomain().getCodeSource().getLocation().getFile());
      dB.log(""String_Node_Str"" + sourceFile);
      Utilities.extractFile(new File(sourceFile),""String_Node_Str"",getDataFolder() + ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  try {
    if (!getConfig().isSet(""String_Node_Str"") || getConfig().getInt(""String_Node_Str"",0) != configVersion) {
      dB.echoError(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    }
    ws_helper=new WorldScriptHelper();
    ItemScriptHelper is_helper=new ItemScriptHelper();
    InventoryScriptHelper in_helper=new InventoryScriptHelper();
    EntityScriptHelper es_helper=new EntityScriptHelper();
    CommandScriptHelper cs_helper=new CommandScriptHelper();
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  try {
    if (Depends.citizens != null) {
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(TriggerTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(PushableTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(AssignmentTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(NicknameTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(HealthTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(ConstantsTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(HungerTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(SittingTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(FishingTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(SleepingTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(ParticlesTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(SneakingTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(InvisibleTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(MobproxTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getSpeechFactory().register(DenizenChat.class,""String_Node_Str"");
    }
    if (Depends.hasProgramAB)     CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(ChatbotTrait.class).withName(""String_Node_Str""));
    runtimeCompiler=new RuntimeCompiler(this);
    runtimeCompiler.loader();
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  try {
    getTriggerRegistry().registerCoreMembers();
    getRequirementRegistry().registerCoreMembers();
    getListenerRegistry().registerCoreMembers();
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  try {
    tagManager().registerCoreTags();
    eventManager=new EventManager();
    eventManager().registerCoreMembers();
    ObjectFetcher._registerCoreObjects();
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  try {
    dMaterial._initialize();
    propertyParser=new PropertyParser();
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
    @Override public void run(){
      try {
        DenizenCore.loadScripts();
        notableManager.reloadNotables();
        reloadSaves();
        dB.log(ChatColor.LIGHT_PURPLE + ""String_Node_Str"");
        ws_helper.serverStartEvent();
      }
 catch (      Exception e) {
        dB.echoError(e);
      }
    }
  }
,1);
}","@Override public void onEnable(){
  try {
    net.minecraft.server.v1_7_R4.Block.getById(0);
  }
 catch (  NoClassDefFoundError e) {
    getLogger().warning(""String_Node_Str"");
    getLogger().warning(""String_Node_Str"");
    getLogger().warning(""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(this);
    startedSuccessful=false;
    return;
  }
  try {
    versionTag=this.getDescription().getVersion();
    DenizenCore.init(this);
    depends.initialize();
    if (Depends.citizens == null || !Depends.citizens.isEnabled()) {
      getLogger().warning(""String_Node_Str"");
    }
    startedSuccessful=true;
    dB.log(ChatColor.LIGHT_PURPLE + ""String_Node_Str"");
    dB.log(ChatColor.YELLOW + ""String_Node_Str"");
    dB.log(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
    dB.log(""String_Node_Str"");
    dB.log(ChatColor.GRAY + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
    dB.log(ChatColor.GRAY + ""String_Node_Str"" + ChatColor.WHITE+ versionTag);
    dB.log(ChatColor.LIGHT_PURPLE + ""String_Node_Str"");
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  try {
    MetricsLite metrics=new MetricsLite(this);
    metrics.start();
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  try {
    dNPCRegistry=new dNPCRegistry(this);
    commandManager=new CommandManager();
    commandManager.setInjector(new Injector(this));
    commandManager.register(DenizenCommandHandler.class);
    if (Depends.citizens != null) {
      Depends.citizens.registerCommandClass(NPCCommandHandler.class);
    }
    for (    OfflinePlayer player : Bukkit.getOfflinePlayers()) {
      dPlayer.notePlayer(player);
    }
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  try {
    DenizenCore.setCommandRegistry(getCommandRegistry());
    getCommandRegistry().registerCoreMembers();
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  try {
    ScriptRegistry._registerCoreTypes();
    saveDefaultConfig();
    reloadConfig();
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  try {
    new File(getDataFolder() + ""String_Node_Str"").mkdirs();
    new File(getDataFolder() + ""String_Node_Str"").mkdirs();
    new File(getDataFolder() + ""String_Node_Str"").mkdirs();
    if (!new File(getDataFolder() + ""String_Node_Str"").exists()) {
      String sourceFile=URLDecoder.decode(Denizen.class.getProtectionDomain().getCodeSource().getLocation().getFile());
      dB.log(""String_Node_Str"" + sourceFile);
      Utilities.extractFile(new File(sourceFile),""String_Node_Str"",getDataFolder() + ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  try {
    if (!getConfig().isSet(""String_Node_Str"") || getConfig().getInt(""String_Node_Str"",0) != configVersion) {
      dB.echoError(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    }
    ws_helper=new WorldScriptHelper();
    ItemScriptHelper is_helper=new ItemScriptHelper();
    InventoryScriptHelper in_helper=new InventoryScriptHelper();
    EntityScriptHelper es_helper=new EntityScriptHelper();
    CommandScriptHelper cs_helper=new CommandScriptHelper();
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  try {
    if (Depends.citizens != null) {
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(TriggerTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(PushableTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(AssignmentTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(NicknameTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(HealthTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(ConstantsTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(HungerTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(SittingTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(FishingTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(SleepingTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(ParticlesTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(SneakingTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(InvisibleTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(MobproxTrait.class).withName(""String_Node_Str""));
      CitizensAPI.getSpeechFactory().register(DenizenChat.class,""String_Node_Str"");
    }
    if (Depends.hasProgramAB)     CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(ChatbotTrait.class).withName(""String_Node_Str""));
    runtimeCompiler=new RuntimeCompiler(this);
    runtimeCompiler.loader();
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  try {
    if (Depends.citizens != null)     getTriggerRegistry().registerCoreMembers();
    getRequirementRegistry().registerCoreMembers();
    getListenerRegistry().registerCoreMembers();
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  try {
    tagManager().registerCoreTags();
    eventManager=new EventManager();
    eventManager().registerCoreMembers();
    ObjectFetcher._registerCoreObjects();
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  try {
    dMaterial._initialize();
    propertyParser=new PropertyParser();
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
    @Override public void run(){
      try {
        DenizenCore.loadScripts();
        notableManager.reloadNotables();
        reloadSaves();
        dB.log(ChatColor.LIGHT_PURPLE + ""String_Node_Str"");
        ws_helper.serverStartEvent();
      }
 catch (      Exception e) {
        dB.echoError(e);
      }
    }
  }
,1);
}",0.9972681986180298
10210,"@Override public void onBuild(List<aH.Argument> args){
  for (  aH.Argument arg : args) {
    if (arg.matchesEnum(KillType.values()) && type == null)     this.type=KillType.valueOf(arg.getValue().toUpperCase());
 else     if (arg.matchesPrefix(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Integer))     this.required=aH.getIntegerFrom(arg.getValue());
 else     if (arg.matchesPrefix(""String_Node_Str""))     this.region=arg.getValue();
 else     if (arg.matchesPrefix(""String_Node_Str"") && arg.matchesArgumentType(dCuboid.class))     this.cuboid=arg.asType(dCuboid.class);
 else     if (arg.matchesPrefix(""String_Node_Str""))     targets=arg.asType(dList.class);
 else     if (arg.matchesPrefix(""String_Node_Str"")) {
      names=arg.asType(dList.class);
    }
  }
  if (targets == null)   targets=new dList(""String_Node_Str"");
  if (names == null) {
    names=new dList(""String_Node_Str"");
  }
  if (type == null) {
    dB.echoError(""String_Node_Str"");
    cancel();
  }
}","@Override public void onBuild(List<aH.Argument> args){
  for (  aH.Argument arg : args) {
    if (arg.matchesEnum(KillType.values()) && type == null)     this.type=KillType.valueOf(arg.getValue().toUpperCase());
 else     if (arg.matchesPrefix(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Integer))     this.required=aH.getIntegerFrom(arg.getValue());
 else     if (arg.matchesPrefix(""String_Node_Str""))     this.region=arg.getValue();
 else     if (arg.matchesPrefix(""String_Node_Str"") && arg.matchesArgumentType(dCuboid.class))     this.cuboid=arg.asType(dCuboid.class);
 else     if (arg.matchesPrefix(""String_Node_Str""))     targets=arg.asType(dList.class);
 else     if (arg.matchesPrefix(""String_Node_Str"")) {
      names=arg.asType(dList.class);
    }
  }
  if (targets == null)   targets=new dList(""String_Node_Str"");
  if (names == null) {
    names=new dList(""String_Node_Str"");
  }
  if (type == null) {
    dB.echoError(""String_Node_Str"");
    cancel();
  }
 else   if (type == KillType.NPC && Depends.citizens == null) {
    dB.echoError(""String_Node_Str"");
    cancel();
  }
}",0.943089430894309
10211,"@EventHandler public void listen(EntityDeathEvent event){
  if (event.getEntity().getKiller() != player.getPlayerEntity())   return;
  if (region != null) {
  }
  if (cuboid != null)   if (!cuboid.isInsideCuboid(player.getLocation()))   return;
  if (type == KillType.ENTITY) {
    dEntity ent=new dEntity(event.getEntity());
    boolean count_it=false;
    for (    String target : targets) {
      if (dEntity.valueOf(target) != null)       if (ent.comparesTo(dEntity.valueOf(target)) == 1)       count_it=true;
    }
    boolean right_name=false;
    for (    String name : names) {
      if (ChatColor.stripColor(ent.getName()).contains(name)) {
        right_name=true;
      }
    }
    if (count_it || targets.contains(""String_Node_Str"")) {
      if (right_name || names.contains(""String_Node_Str"")) {
        kills_so_far++;
        dB.log(player.getName() + ""String_Node_Str"" + ent.identify()+ ""String_Node_Str""+ kills_so_far+ ""String_Node_Str""+ required+ ""String_Node_Str"");
        check();
      }
    }
  }
 else   if (type == KillType.NPC) {
    if (!CitizensAPI.getNPCRegistry().isNPC(event.getEntity()))     return;
    dNPC npc=dNPC.mirrorCitizensNPC(CitizensAPI.getNPCRegistry().getNPC(event.getEntity()));
    boolean count_it=false;
    for (    String target : targets) {
      if (dNPC.valueOf(target) != null) {
        if (dNPC.valueOf(target).getId() == npc.getId())         count_it=true;
      }
      if (npc.getName().equalsIgnoreCase(target.toLowerCase().replace(""String_Node_Str"",""String_Node_Str"")))       count_it=true;
    }
    if (count_it || targets.contains(""String_Node_Str"")) {
      kills_so_far++;
      dB.log(player.getName() + ""String_Node_Str"" + npc.toString()+ ""String_Node_Str""+ kills_so_far+ ""String_Node_Str""+ required+ ""String_Node_Str"");
      check();
    }
  }
 else   if (type == KillType.PLAYER) {
    if (event.getEntityType() != EntityType.PLAYER)     return;
    if (CitizensAPI.getNPCRegistry().isNPC(event.getEntity()))     return;
    dPlayer player=dPlayer.mirrorBukkitPlayer((Player)event.getEntity());
    boolean count_it=false;
    for (    String target : targets) {
      if (dPlayer.valueOf(target) != null)       if (dPlayer.valueOf(target).getName().equalsIgnoreCase(player.getName()))       count_it=true;
    }
    if (count_it || targets.contains(""String_Node_Str"")) {
      kills_so_far++;
      dB.log(player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str""+ kills_so_far+ ""String_Node_Str""+ required+ ""String_Node_Str"");
      check();
    }
  }
 else   if (type == KillType.GROUP) {
    if (event.getEntityType() == EntityType.PLAYER)     for (    String group : Depends.permissions.getPlayerGroups((Player)event.getEntity()))     if (targets.contains(group.toUpperCase())) {
      kills_so_far++;
      dB.log(player.getName() + ""String_Node_Str"" + ((Player)event.getEntity()).getName().toUpperCase()+ ""String_Node_Str""+ group+ ""String_Node_Str"");
      check();
      break;
    }
  }
}","@EventHandler public void listen(EntityDeathEvent event){
  if (event.getEntity().getKiller() != player.getPlayerEntity())   return;
  if (region != null) {
  }
  if (cuboid != null)   if (!cuboid.isInsideCuboid(player.getLocation()))   return;
  if (type == KillType.ENTITY) {
    dEntity ent=new dEntity(event.getEntity());
    boolean count_it=false;
    for (    String target : targets) {
      if (dEntity.valueOf(target) != null)       if (ent.comparesTo(dEntity.valueOf(target)) == 1)       count_it=true;
    }
    boolean right_name=false;
    for (    String name : names) {
      if (ChatColor.stripColor(ent.getName()).contains(name)) {
        right_name=true;
      }
    }
    if (count_it || targets.contains(""String_Node_Str"")) {
      if (right_name || names.contains(""String_Node_Str"")) {
        kills_so_far++;
        dB.log(player.getName() + ""String_Node_Str"" + ent.identify()+ ""String_Node_Str""+ kills_so_far+ ""String_Node_Str""+ required+ ""String_Node_Str"");
        check();
      }
    }
  }
 else   if (type == KillType.NPC) {
    if (!CitizensAPI.getNPCRegistry().isNPC(event.getEntity()))     return;
    dNPC npc=dNPC.mirrorCitizensNPC(CitizensAPI.getNPCRegistry().getNPC(event.getEntity()));
    boolean count_it=false;
    for (    String target : targets) {
      if (dNPC.valueOf(target) != null) {
        if (dNPC.valueOf(target).getId() == npc.getId())         count_it=true;
      }
      if (npc.getName().equalsIgnoreCase(target.toLowerCase().replace(""String_Node_Str"",""String_Node_Str"")))       count_it=true;
    }
    if (count_it || targets.contains(""String_Node_Str"")) {
      kills_so_far++;
      dB.log(player.getName() + ""String_Node_Str"" + npc.toString()+ ""String_Node_Str""+ kills_so_far+ ""String_Node_Str""+ required+ ""String_Node_Str"");
      check();
    }
  }
 else   if (type == KillType.PLAYER) {
    if (event.getEntityType() != EntityType.PLAYER)     return;
    if (Depends.citizens != null && CitizensAPI.getNPCRegistry().isNPC(event.getEntity()))     return;
    dPlayer player=dPlayer.mirrorBukkitPlayer((Player)event.getEntity());
    boolean count_it=false;
    for (    String target : targets) {
      if (dPlayer.valueOf(target) != null)       if (dPlayer.valueOf(target).getName().equalsIgnoreCase(player.getName()))       count_it=true;
    }
    if (count_it || targets.contains(""String_Node_Str"")) {
      kills_so_far++;
      dB.log(player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str""+ kills_so_far+ ""String_Node_Str""+ required+ ""String_Node_Str"");
      check();
    }
  }
 else   if (type == KillType.GROUP) {
    if (event.getEntityType() == EntityType.PLAYER)     for (    String group : Depends.permissions.getPlayerGroups((Player)event.getEntity()))     if (targets.contains(group.toUpperCase())) {
      kills_so_far++;
      dB.log(player.getName() + ""String_Node_Str"" + ((Player)event.getEntity()).getName().toUpperCase()+ ""String_Node_Str""+ group+ ""String_Node_Str"");
      check();
      break;
    }
  }
}",0.9953333333333332
10212,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1))     return new dList(getBlocks(dList.valueOf(attribute.getContext(1)).filter(dMaterial.class))).getAttribute(attribute.fulfill(1));
 else     return new dList(getBlocks()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(pairs.size()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    int member=attribute.getIntContext(1);
    if (member < 1)     member=1;
    if (member > pairs.size())     member=pairs.size();
    return new dCuboid(pairs.get(member - 1).low,pairs.get(member - 1).high).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1))     return new dList(getSpawnableBlocks(dList.valueOf(attribute.getContext(1)).filter(dMaterial.class))).getAttribute(attribute.fulfill(1));
 else     return new dList(getSpawnableBlocks()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dList(getOutline()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dList(filter).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    dLocation loc=dLocation.valueOf(attribute.getContext(1));
    if (loc != null)     return new Element(isInsideCuboid(loc)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    dCuboid cub2=dCuboid.valueOf(attribute.getContext(1));
    if (cub2 != null) {
      boolean intersects=false;
      for (      LocationPair pair : pairs) {
        for (        LocationPair pair2 : cub2.pairs) {
          if (pair2.low.getX() <= pair.high.getX() && pair2.low.getY() <= pair.high.getY() && pair2.low.getZ() <= pair.high.getZ() && pair2.high.getX() >= pair.low.getX() && pair2.high.getY() >= pair.low.getY() && pair2.high.getZ() >= pair.low.getZ()) {
            intersects=true;
            break;
          }
        }
      }
      return new Element(intersects).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    LocationPair pair;
    if (!attribute.hasContext(1))     pair=pairs.get(0);
 else {
      int member=attribute.getIntContext(1);
      if (member < 1)       member=1;
      if (member > pairs.size())       member=pairs.size();
      pair=pairs.get(member - 1);
    }
    Location base=pair.high.clone().add(pair.low.clone());
    base.setX(base.getX() / 2);
    base.setY(base.getY() / 2);
    base.setZ(base.getZ() / 2);
    return new dLocation(base).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!attribute.hasContext(1))     return pairs.get(0).high.getAttribute(attribute.fulfill(1));
 else {
      int member=attribute.getIntContext(1);
      if (member < 1)       member=1;
      if (member > pairs.size())       member=pairs.size();
      return pairs.get(member - 1).high.getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!attribute.hasContext(1))     return pairs.get(0).low.getAttribute(attribute.fulfill(1));
 else {
      int member=attribute.getIntContext(1);
      if (member < 1)       member=1;
      if (member > pairs.size())       member=pairs.size();
      return pairs.get(member - 1).low.getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    try {
      dLocation loc=dLocation.valueOf(attribute.getContext(1));
      dCuboid cuboid=this.clone();
      if (loc != null) {
        if (loc.getX() < cuboid.pairs.get(0).low.getX())         cuboid.pairs.get(0).low=new dLocation(cuboid.pairs.get(0).low.getWorld(),loc.getX(),cuboid.pairs.get(0).low.getY(),cuboid.pairs.get(0).low.getZ());
        if (loc.getY() < cuboid.pairs.get(0).low.getY())         cuboid.pairs.get(0).low=new dLocation(cuboid.pairs.get(0).low.getWorld(),cuboid.pairs.get(0).low.getX(),loc.getY(),cuboid.pairs.get(0).low.getZ());
        if (loc.getZ() < cuboid.pairs.get(0).low.getZ())         cuboid.pairs.get(0).low=new dLocation(cuboid.pairs.get(0).low.getWorld(),cuboid.pairs.get(0).low.getX(),cuboid.pairs.get(0).low.getY(),loc.getZ());
        if (loc.getX() > cuboid.pairs.get(0).high.getX())         cuboid.pairs.get(0).high=new dLocation(cuboid.pairs.get(0).high.getWorld(),loc.getX(),cuboid.pairs.get(0).high.getY(),cuboid.pairs.get(0).high.getZ());
        if (loc.getY() > cuboid.pairs.get(0).high.getY())         cuboid.pairs.get(0).high=new dLocation(cuboid.pairs.get(0).high.getWorld(),cuboid.pairs.get(0).high.getX(),loc.getY(),cuboid.pairs.get(0).high.getZ());
        if (loc.getZ() > cuboid.pairs.get(0).high.getZ())         cuboid.pairs.get(0).high=new dLocation(cuboid.pairs.get(0).high.getWorld(),cuboid.pairs.get(0).high.getX(),cuboid.pairs.get(0).high.getY(),loc.getZ());
        return cuboid.getAttribute(attribute.fulfill(1));
      }
    }
 catch (    CloneNotSupportedException ex) {
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    Player player : Bukkit.getOnlinePlayers())     if (isInsideCuboid(player.getLocation()))     players.add(dPlayer.mirrorBukkitPlayer(player));
    return new dList(players).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dNPC> npcs=new ArrayList<dNPC>();
    for (    NPC npc : CitizensAPI.getNPCRegistry()) {
      dNPC dnpc=dNPC.mirrorCitizensNPC(npc);
      if (isInsideCuboid(dnpc.getLocation()))       npcs.add(dnpc);
    }
    return new dList(npcs).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dEntity> entities=new ArrayList<dEntity>();
    dList types=new dList();
    if (attribute.hasContext(1)) {
      types=dList.valueOf(attribute.getContext(1));
    }
    for (    Entity ent : getWorld().getEntities()) {
      dEntity current=new dEntity(ent);
      if (ent.isValid() && isInsideCuboid(ent.getLocation())) {
        if (!types.isEmpty()) {
          for (          String type : types) {
            if (current.identifySimpleType().equalsIgnoreCase(type)) {
              entities.add(current);
              break;
            }
          }
        }
 else         entities.add(new dEntity(ent));
      }
    }
    return new dList(entities).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dEntity> entities=new ArrayList<dEntity>();
    for (    Entity ent : getWorld().getLivingEntities()) {
      if (ent.isValid() && isInsideCuboid(ent.getLocation()) && !CitizensAPI.getNPCRegistry().isNPC(ent))       entities.add(new dEntity(ent));
    }
    return new dList(entities).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    Set<Chunk> chunks=new HashSet<Chunk>();
    for (    LocationPair pair : pairs) {
      int minY=pair.low.getBlockY();
      Chunk minChunk=pair.low.getChunk();
      if (isInsideCuboid(new Location(getWorld(),minChunk.getX() * 16,minY,minChunk.getZ() * 16)))       chunks.add(minChunk);
      Chunk maxChunk=pair.high.getChunk();
      if (isInsideCuboid(new Location(getWorld(),maxChunk.getX() * 16 + 15,minY,maxChunk.getZ() * 16 + 15)))       chunks.add(maxChunk);
      dB.log(""String_Node_Str"" + minChunk.getX() + ""String_Node_Str""+ minChunk.getZ());
      dB.log(""String_Node_Str"" + maxChunk.getX() + ""String_Node_Str""+ maxChunk.getZ());
      for (int x=minChunk.getX() + 1; x <= maxChunk.getX() - 1; x++) {
        for (int z=minChunk.getZ() + 1; z <= maxChunk.getZ() - 1; z++) {
          chunks.add(getWorld().getChunkAt(x,z));
        }
      }
    }
    dList list=new dList();
    for (    Chunk chunk : chunks)     list.add(new dChunk(chunk).identify());
    return list.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    Set<Chunk> chunks=new HashSet<Chunk>();
    for (    LocationPair pair : pairs) {
      Chunk minChunk=pair.low.getChunk();
      Chunk maxChunk=pair.high.getChunk();
      dB.log(""String_Node_Str"" + minChunk.getX() + ""String_Node_Str""+ minChunk.getZ());
      dB.log(""String_Node_Str"" + maxChunk.getX() + ""String_Node_Str""+ maxChunk.getZ());
      for (int x=minChunk.getX(); x <= maxChunk.getX(); x++) {
        for (int z=minChunk.getZ(); z <= maxChunk.getZ(); z++) {
          chunks.add(getWorld().getChunkAt(x,z));
        }
      }
    }
    dList list=new dList();
    for (    Chunk chunk : chunks)     list.add(new dChunk(chunk).identify());
    return list.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(NotableManager.getSavedId(this)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(identifyFull()).getAttribute(attribute.fulfill(1));
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new Element(identify()).getAttribute(attribute);
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1))     return new dList(getBlocks(dList.valueOf(attribute.getContext(1)).filter(dMaterial.class))).getAttribute(attribute.fulfill(1));
 else     return new dList(getBlocks()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(pairs.size()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    int member=attribute.getIntContext(1);
    if (member < 1)     member=1;
    if (member > pairs.size())     member=pairs.size();
    return new dCuboid(pairs.get(member - 1).low,pairs.get(member - 1).high).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1))     return new dList(getSpawnableBlocks(dList.valueOf(attribute.getContext(1)).filter(dMaterial.class))).getAttribute(attribute.fulfill(1));
 else     return new dList(getSpawnableBlocks()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dList(getOutline()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dList(filter).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    dLocation loc=dLocation.valueOf(attribute.getContext(1));
    if (loc != null)     return new Element(isInsideCuboid(loc)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    dCuboid cub2=dCuboid.valueOf(attribute.getContext(1));
    if (cub2 != null) {
      boolean intersects=false;
      for (      LocationPair pair : pairs) {
        for (        LocationPair pair2 : cub2.pairs) {
          if (pair2.low.getX() <= pair.high.getX() && pair2.low.getY() <= pair.high.getY() && pair2.low.getZ() <= pair.high.getZ() && pair2.high.getX() >= pair.low.getX() && pair2.high.getY() >= pair.low.getY() && pair2.high.getZ() >= pair.low.getZ()) {
            intersects=true;
            break;
          }
        }
      }
      return new Element(intersects).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    LocationPair pair;
    if (!attribute.hasContext(1))     pair=pairs.get(0);
 else {
      int member=attribute.getIntContext(1);
      if (member < 1)       member=1;
      if (member > pairs.size())       member=pairs.size();
      pair=pairs.get(member - 1);
    }
    Location base=pair.high.clone().add(pair.low.clone());
    base.setX(base.getX() / 2);
    base.setY(base.getY() / 2);
    base.setZ(base.getZ() / 2);
    return new dLocation(base).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!attribute.hasContext(1))     return pairs.get(0).high.getAttribute(attribute.fulfill(1));
 else {
      int member=attribute.getIntContext(1);
      if (member < 1)       member=1;
      if (member > pairs.size())       member=pairs.size();
      return pairs.get(member - 1).high.getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!attribute.hasContext(1))     return pairs.get(0).low.getAttribute(attribute.fulfill(1));
 else {
      int member=attribute.getIntContext(1);
      if (member < 1)       member=1;
      if (member > pairs.size())       member=pairs.size();
      return pairs.get(member - 1).low.getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    try {
      dLocation loc=dLocation.valueOf(attribute.getContext(1));
      dCuboid cuboid=this.clone();
      if (loc != null) {
        if (loc.getX() < cuboid.pairs.get(0).low.getX())         cuboid.pairs.get(0).low=new dLocation(cuboid.pairs.get(0).low.getWorld(),loc.getX(),cuboid.pairs.get(0).low.getY(),cuboid.pairs.get(0).low.getZ());
        if (loc.getY() < cuboid.pairs.get(0).low.getY())         cuboid.pairs.get(0).low=new dLocation(cuboid.pairs.get(0).low.getWorld(),cuboid.pairs.get(0).low.getX(),loc.getY(),cuboid.pairs.get(0).low.getZ());
        if (loc.getZ() < cuboid.pairs.get(0).low.getZ())         cuboid.pairs.get(0).low=new dLocation(cuboid.pairs.get(0).low.getWorld(),cuboid.pairs.get(0).low.getX(),cuboid.pairs.get(0).low.getY(),loc.getZ());
        if (loc.getX() > cuboid.pairs.get(0).high.getX())         cuboid.pairs.get(0).high=new dLocation(cuboid.pairs.get(0).high.getWorld(),loc.getX(),cuboid.pairs.get(0).high.getY(),cuboid.pairs.get(0).high.getZ());
        if (loc.getY() > cuboid.pairs.get(0).high.getY())         cuboid.pairs.get(0).high=new dLocation(cuboid.pairs.get(0).high.getWorld(),cuboid.pairs.get(0).high.getX(),loc.getY(),cuboid.pairs.get(0).high.getZ());
        if (loc.getZ() > cuboid.pairs.get(0).high.getZ())         cuboid.pairs.get(0).high=new dLocation(cuboid.pairs.get(0).high.getWorld(),cuboid.pairs.get(0).high.getX(),cuboid.pairs.get(0).high.getY(),loc.getZ());
        return cuboid.getAttribute(attribute.fulfill(1));
      }
    }
 catch (    CloneNotSupportedException ex) {
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    Player player : Bukkit.getOnlinePlayers())     if (isInsideCuboid(player.getLocation()))     players.add(dPlayer.mirrorBukkitPlayer(player));
    return new dList(players).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && Depends.citizens != null) {
    ArrayList<dNPC> npcs=new ArrayList<dNPC>();
    for (    NPC npc : CitizensAPI.getNPCRegistry()) {
      dNPC dnpc=dNPC.mirrorCitizensNPC(npc);
      if (isInsideCuboid(dnpc.getLocation()))       npcs.add(dnpc);
    }
    return new dList(npcs).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dEntity> entities=new ArrayList<dEntity>();
    dList types=new dList();
    if (attribute.hasContext(1)) {
      types=dList.valueOf(attribute.getContext(1));
    }
    for (    Entity ent : getWorld().getEntities()) {
      dEntity current=new dEntity(ent);
      if (ent.isValid() && isInsideCuboid(ent.getLocation())) {
        if (!types.isEmpty()) {
          for (          String type : types) {
            if (current.identifySimpleType().equalsIgnoreCase(type)) {
              entities.add(current);
              break;
            }
          }
        }
 else         entities.add(new dEntity(ent));
      }
    }
    return new dList(entities).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dEntity> entities=new ArrayList<dEntity>();
    for (    Entity ent : getWorld().getLivingEntities()) {
      if (ent.isValid() && isInsideCuboid(ent.getLocation()) && (Depends.citizens == null || !CitizensAPI.getNPCRegistry().isNPC(ent)))       entities.add(new dEntity(ent));
    }
    return new dList(entities).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    Set<Chunk> chunks=new HashSet<Chunk>();
    for (    LocationPair pair : pairs) {
      int minY=pair.low.getBlockY();
      Chunk minChunk=pair.low.getChunk();
      if (isInsideCuboid(new Location(getWorld(),minChunk.getX() * 16,minY,minChunk.getZ() * 16)))       chunks.add(minChunk);
      Chunk maxChunk=pair.high.getChunk();
      if (isInsideCuboid(new Location(getWorld(),maxChunk.getX() * 16 + 15,minY,maxChunk.getZ() * 16 + 15)))       chunks.add(maxChunk);
      dB.log(""String_Node_Str"" + minChunk.getX() + ""String_Node_Str""+ minChunk.getZ());
      dB.log(""String_Node_Str"" + maxChunk.getX() + ""String_Node_Str""+ maxChunk.getZ());
      for (int x=minChunk.getX() + 1; x <= maxChunk.getX() - 1; x++) {
        for (int z=minChunk.getZ() + 1; z <= maxChunk.getZ() - 1; z++) {
          chunks.add(getWorld().getChunkAt(x,z));
        }
      }
    }
    dList list=new dList();
    for (    Chunk chunk : chunks)     list.add(new dChunk(chunk).identify());
    return list.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    Set<Chunk> chunks=new HashSet<Chunk>();
    for (    LocationPair pair : pairs) {
      Chunk minChunk=pair.low.getChunk();
      Chunk maxChunk=pair.high.getChunk();
      dB.log(""String_Node_Str"" + minChunk.getX() + ""String_Node_Str""+ minChunk.getZ());
      dB.log(""String_Node_Str"" + maxChunk.getX() + ""String_Node_Str""+ maxChunk.getZ());
      for (int x=minChunk.getX(); x <= maxChunk.getX(); x++) {
        for (int z=minChunk.getZ(); z <= maxChunk.getZ(); z++) {
          chunks.add(getWorld().getChunkAt(x,z));
        }
      }
    }
    dList list=new dList();
    for (    Chunk chunk : chunks)     list.add(new dChunk(chunk).identify());
    return list.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(NotableManager.getSavedId(this)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(identifyFull()).getAttribute(attribute.fulfill(1));
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new Element(identify()).getAttribute(attribute);
}",0.996923729712528
10213,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (offlinePlayer == null)   return null;
  if (attribute.startsWith(""String_Node_Str"")) {
    return Element.TRUE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE.toString()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dList(PlayerTags.playerChatHistory.get(getName())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    int x=1;
    if (attribute.hasContext(1) && aH.matchesInteger(attribute.getContext(1)))     x=attribute.getIntContext(1);
    if (!PlayerTags.playerChatHistory.containsKey(getName()))     return null;
 else     return new Element(PlayerTags.playerChatHistory.get(getName()).get(x - 1)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return null;
    if (attribute.getAttribute(2).equalsIgnoreCase(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(!FlagManager.playerHasFlag(this,flag_name)).getAttribute(attribute.fulfill(2));
    if (attribute.getAttribute(2).equalsIgnoreCase(""String_Node_Str"") && !FlagManager.playerHasFlag(this,flag_name))     return new Element(0).getAttribute(attribute.fulfill(2));
    if (FlagManager.playerHasFlag(this,flag_name))     return new dList(DenizenAPI.getCurrentInstance().flagManager().getPlayerFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
    return new Element(identify()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return null;
    return new Element(FlagManager.playerHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dList allFlags=new dList(DenizenAPI.getCurrentInstance().flagManager().listPlayerFlags(this));
    dList searchFlags=null;
    if (!allFlags.isEmpty() && attribute.hasContext(1)) {
      searchFlags=new dList();
      String search=attribute.getContext(1).toLowerCase();
      if (search.startsWith(""String_Node_Str"")) {
        try {
          Pattern pattern=Pattern.compile(search.substring(6));
          for (          String flag : allFlags)           if (pattern.matcher(flag).matches())           searchFlags.add(flag);
        }
 catch (        Exception e) {
          dB.echoError(e);
        }
      }
 else {
        for (        String flag : allFlags)         if (flag.toLowerCase().contains(search))         searchFlags.add(flag);
      }
    }
    return searchFlags == null ? allFlags.getAttribute(attribute.fulfill(1)) : searchFlags.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String outcome=""String_Node_Str"";
    if (attribute.hasContext(1)) {
      try {
        outcome=DenizenAPI.getCurrentInstance().getSaves().getString(""String_Node_Str"" + getName() + ""String_Node_Str""+ dScript.valueOf(attribute.getContext(1)).getName()+ ""String_Node_Str"");
      }
 catch (      Exception e) {
        outcome=""String_Node_Str"";
      }
    }
    return new Element(outcome).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.economy != null) {
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Depends.economy.currencyNameSingular()).getAttribute(attribute.fulfill(2));
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Depends.economy.currencyNamePlural()).getAttribute(attribute.fulfill(2));
      return new Element(Depends.economy.getBalance(getName())).getAttribute(attribute.fulfill(1));
    }
 else {
      dB.echoError(""String_Node_Str"");
      return null;
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    int range=50;
    int attribs=1;
    if (attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2) && aH.matchesInteger(attribute.getContext(2))) {
      attribs=2;
      range=attribute.getIntContext(2);
    }
    List<Entity> entities=getPlayerEntity().getNearbyEntities(range,range,range);
    ArrayList<LivingEntity> possibleTargets=new ArrayList<LivingEntity>();
    for (    Entity entity : entities) {
      if (entity instanceof LivingEntity) {
        if (attribute.hasContext(1)) {
          String context=attribute.getContext(1);
          if (context.toLowerCase().startsWith(""String_Node_Str""))           context=context.substring(3);
          for (          String ent : context.split(""String_Node_Str"")) {
            boolean valid=false;
            if (ent.equalsIgnoreCase(""String_Node_Str"") && CitizensAPI.getNPCRegistry().isNPC(entity)) {
              valid=true;
            }
 else             if (dEntity.matches(ent)) {
              if (dEntity.valueOf(ent).isGeneric()) {
                if (!CitizensAPI.getNPCRegistry().isNPC(entity)) {
                  valid=true;
                }
              }
 else {
                valid=true;
              }
            }
            if (valid)             possibleTargets.add((LivingEntity)entity);
          }
        }
 else {
          possibleTargets.add((LivingEntity)entity);
          entity.getType();
        }
      }
    }
    BlockIterator bi;
    try {
      bi=new BlockIterator(getPlayerEntity(),range);
    }
 catch (    IllegalStateException e) {
      return null;
    }
    Block b;
    Location l;
    int bx, by, bz;
    double ex, ey, ez;
    while (bi.hasNext()) {
      b=bi.next();
      bx=b.getX();
      by=b.getY();
      bz=b.getZ();
      if (b.getType() != Material.AIR) {
        break;
      }
 else {
        for (        LivingEntity possibleTarget : possibleTargets) {
          l=possibleTarget.getLocation();
          ex=l.getX();
          ey=l.getY();
          ez=l.getZ();
          if ((bx - .50 <= ex && ex <= bx + 1.50) && (bz - .50 <= ez && ez <= bz + 1.50) && (by - 1 <= ey && ey <= by + 2.5)) {
            return new dEntity(possibleTarget).getAttribute(attribute.fulfill(attribs));
          }
        }
      }
    }
    return null;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    List<String> players=new ArrayList<String>();
    if (attribute.startsWith(""String_Node_Str"")) {
      for (      Player player : Bukkit.getOnlinePlayers())       players.add(player.getName());
      return new dList(players).getAttribute(attribute.fulfill(2));
    }
 else     if (attribute.startsWith(""String_Node_Str"")) {
      for (      OfflinePlayer player : Bukkit.getOfflinePlayers()) {
        if (!player.isOnline())         players.add(""String_Node_Str"" + player.getUniqueId().toString());
      }
      return new dList(players).getAttribute(attribute.fulfill(2));
    }
 else {
      for (      OfflinePlayer player : Bukkit.getOfflinePlayers())       players.add(""String_Node_Str"" + player.getUniqueId().toString());
      return new dList(players).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && !isOnline())   return new Element(getName()).getAttribute(attribute.fulfill(1));
 else   if (attribute.startsWith(""String_Node_Str"") && !isOnline())   return new Element(offlinePlayer.getUniqueId().toString()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getSaveName()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getOfflinePlayer().getBedSpawnLocation()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"") && !isOnline()) {
    return getLocation().getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(getOfflinePlayer().getFirstPlayed()).getAttribute(attribute.fulfill(1));
 else     return new Duration(getOfflinePlayer().getFirstPlayed() / 50).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(true).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isHealthScaled()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getHealthScale()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getMaximumAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getRemainingAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isBanned()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(isOnline()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isOp()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isWhitelisted()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(getOfflinePlayer().getLastPlayed()).getAttribute(attribute.fulfill(1));
 else     return new Duration(getOfflinePlayer().getLastPlayed() / 50).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.permissions == null) {
      dB.echoError(""String_Node_Str"");
      return null;
    }
    dList list=new dList();
    for (    String group : Depends.permissions.getGroups()) {
      if (Depends.permissions.playerInGroup(null,offlinePlayer,group)) {
        list.add(group);
      }
    }
    return list.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.permissions == null) {
      dB.echoError(""String_Node_Str"");
      return null;
    }
    String group=attribute.getContext(1);
    if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.playerInGroup((World)null,getName(),group)).getAttribute(attribute.fulfill(2));
 else     if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.playerInGroup(attribute.getContext(2),getName(),group)).getAttribute(attribute.fulfill(2));
 else     if (isOnline())     return new Element(Depends.permissions.playerInGroup(getPlayerEntity(),group)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    String permission=attribute.getContext(1);
    if (Depends.permissions == null) {
      dB.echoError(""String_Node_Str"");
      return null;
    }
    if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.has((World)null,getName(),permission)).getAttribute(attribute.fulfill(2));
 else     if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.has(attribute.getContext(2),getName(),permission)).getAttribute(attribute.fulfill(2));
 else     if (isOnline())     return new Element(getPlayerEntity().hasPermission(permission)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return getInventory().getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return getEnderChest().getAttribute(attribute.fulfill(1));
  if (!isOnline())   return new Element(identify()).getAttribute(attribute);
  if (attribute.startsWith(""String_Node_Str""))   return new dInventory(getPlayerEntity().getOpenInventory().getTopInventory()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dItem(getPlayerEntity().getItemOnCursor()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getPlayerEntity().getInventory().getHeldItemSlot() + 1).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getPlayerEntity().hasMetadata(""String_Node_Str""))     return getSelectedNPC().getAttribute(attribute.fulfill(1));
 else     return null;
  }
  if (attribute.startsWith(""String_Node_Str"") && !attribute.startsWith(""String_Node_Str""))   return new dEntity(getPlayerEntity()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str""))     return new Element(getPlayerEntity().getAddress().toString()).getAttribute(attribute.fulfill(1));
    return new Element(getPlayerEntity().getAddress().getHostName()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getDisplayName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerListName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getName()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dScript script=dScript.valueOf(attribute.getContext(1));
    if (script == null)     return Element.FALSE.getAttribute(attribute.fulfill(1));
    return new Element(FinishCommand.getScriptCompletes(getName(),script.getName()) > 0).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dScript script=dScript.valueOf(attribute.getContext(1));
    if (script == null)     return Element.FALSE.getAttribute(attribute.fulfill(1));
    return new Element(FailCommand.getScriptFails(getName(),script.getName()) > 0).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getPlayerEntity().getCompassTarget()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getAllowFlight()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getFlySpeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHunger=getPlayerEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHunger=attribute.getIntContext(2);
    if (getPlayerEntity().getFoodLevel() / maxHunger < .10)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < .40)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < .75)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < 1)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getSaturation()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getFoodLevel()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getMaximumAir()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getRemainingAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str""))     return new Element(getPlayerEntity().getGameMode().getValue()).getAttribute(attribute.fulfill(1));
    return new Element(getPlayerEntity().getGameMode().name()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isBlocking()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isFlying()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSleeping()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSneaking()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSprinting()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    Statistic statistic=Statistic.valueOf(attribute.getContext(1).toUpperCase());
    if (attribute.getAttribute(2).startsWith(""String_Node_Str"")) {
      if (statistic == null)       return null;
      dObject obj=ObjectFetcher.pickObjectFor(attribute.getContext(2));
      if (obj instanceof dMaterial)       return new Element(getPlayerEntity().getStatistic(statistic,((dMaterial)obj).getMaterial())).getAttribute(attribute.fulfill(2));
 else       if (obj instanceof dEntity)       return new Element(getPlayerEntity().getStatistic(statistic,((dEntity)obj).getEntityType())).getAttribute(attribute.fulfill(2));
 else       return null;
    }
    if (statistic == null)     return null;
    return new Element(getPlayerEntity().getStatistic(statistic)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(getPlayerEntity().getSleepTicks() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerTime()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getWalkSpeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getPlayerEntity().getPlayerWeather() != null)     return new Element(getPlayerEntity().getPlayerWeather().name()).getAttribute(attribute.fulfill(1));
 else     return null;
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getLevel()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getExpToLevel()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getTotalExperience()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getExp() * 100).getAttribute(attribute.fulfill(1));
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new dEntity(getPlayerEntity()).getAttribute(attribute);
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (offlinePlayer == null)   return null;
  if (attribute.startsWith(""String_Node_Str"")) {
    return Element.TRUE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE.toString()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dList(PlayerTags.playerChatHistory.get(getName())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    int x=1;
    if (attribute.hasContext(1) && aH.matchesInteger(attribute.getContext(1)))     x=attribute.getIntContext(1);
    if (!PlayerTags.playerChatHistory.containsKey(getName()))     return null;
 else     return new Element(PlayerTags.playerChatHistory.get(getName()).get(x - 1)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return null;
    if (attribute.getAttribute(2).equalsIgnoreCase(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(!FlagManager.playerHasFlag(this,flag_name)).getAttribute(attribute.fulfill(2));
    if (attribute.getAttribute(2).equalsIgnoreCase(""String_Node_Str"") && !FlagManager.playerHasFlag(this,flag_name))     return new Element(0).getAttribute(attribute.fulfill(2));
    if (FlagManager.playerHasFlag(this,flag_name))     return new dList(DenizenAPI.getCurrentInstance().flagManager().getPlayerFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
    return new Element(identify()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return null;
    return new Element(FlagManager.playerHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dList allFlags=new dList(DenizenAPI.getCurrentInstance().flagManager().listPlayerFlags(this));
    dList searchFlags=null;
    if (!allFlags.isEmpty() && attribute.hasContext(1)) {
      searchFlags=new dList();
      String search=attribute.getContext(1).toLowerCase();
      if (search.startsWith(""String_Node_Str"")) {
        try {
          Pattern pattern=Pattern.compile(search.substring(6));
          for (          String flag : allFlags)           if (pattern.matcher(flag).matches())           searchFlags.add(flag);
        }
 catch (        Exception e) {
          dB.echoError(e);
        }
      }
 else {
        for (        String flag : allFlags)         if (flag.toLowerCase().contains(search))         searchFlags.add(flag);
      }
    }
    return searchFlags == null ? allFlags.getAttribute(attribute.fulfill(1)) : searchFlags.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String outcome=""String_Node_Str"";
    if (attribute.hasContext(1)) {
      try {
        outcome=DenizenAPI.getCurrentInstance().getSaves().getString(""String_Node_Str"" + getName() + ""String_Node_Str""+ dScript.valueOf(attribute.getContext(1)).getName()+ ""String_Node_Str"");
      }
 catch (      Exception e) {
        outcome=""String_Node_Str"";
      }
    }
    return new Element(outcome).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.economy != null) {
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Depends.economy.currencyNameSingular()).getAttribute(attribute.fulfill(2));
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Depends.economy.currencyNamePlural()).getAttribute(attribute.fulfill(2));
      return new Element(Depends.economy.getBalance(getName())).getAttribute(attribute.fulfill(1));
    }
 else {
      dB.echoError(""String_Node_Str"");
      return null;
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    int range=50;
    int attribs=1;
    if (attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2) && aH.matchesInteger(attribute.getContext(2))) {
      attribs=2;
      range=attribute.getIntContext(2);
    }
    List<Entity> entities=getPlayerEntity().getNearbyEntities(range,range,range);
    ArrayList<LivingEntity> possibleTargets=new ArrayList<LivingEntity>();
    for (    Entity entity : entities) {
      if (entity instanceof LivingEntity) {
        if (attribute.hasContext(1)) {
          String context=attribute.getContext(1);
          if (context.toLowerCase().startsWith(""String_Node_Str""))           context=context.substring(3);
          for (          String ent : context.split(""String_Node_Str"")) {
            boolean valid=false;
            if (ent.equalsIgnoreCase(""String_Node_Str"") && Depends.citizens != null && CitizensAPI.getNPCRegistry().isNPC(entity)) {
              valid=true;
            }
 else             if (dEntity.matches(ent)) {
              if (dEntity.valueOf(ent).isGeneric()) {
                if (Depends.citizens == null || !CitizensAPI.getNPCRegistry().isNPC(entity)) {
                  valid=true;
                }
              }
 else {
                valid=true;
              }
            }
            if (valid)             possibleTargets.add((LivingEntity)entity);
          }
        }
 else {
          possibleTargets.add((LivingEntity)entity);
          entity.getType();
        }
      }
    }
    BlockIterator bi;
    try {
      bi=new BlockIterator(getPlayerEntity(),range);
    }
 catch (    IllegalStateException e) {
      return null;
    }
    Block b;
    Location l;
    int bx, by, bz;
    double ex, ey, ez;
    while (bi.hasNext()) {
      b=bi.next();
      bx=b.getX();
      by=b.getY();
      bz=b.getZ();
      if (b.getType() != Material.AIR) {
        break;
      }
 else {
        for (        LivingEntity possibleTarget : possibleTargets) {
          l=possibleTarget.getLocation();
          ex=l.getX();
          ey=l.getY();
          ez=l.getZ();
          if ((bx - .50 <= ex && ex <= bx + 1.50) && (bz - .50 <= ez && ez <= bz + 1.50) && (by - 1 <= ey && ey <= by + 2.5)) {
            return new dEntity(possibleTarget).getAttribute(attribute.fulfill(attribs));
          }
        }
      }
    }
    return null;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    List<String> players=new ArrayList<String>();
    if (attribute.startsWith(""String_Node_Str"")) {
      for (      Player player : Bukkit.getOnlinePlayers())       players.add(player.getName());
      return new dList(players).getAttribute(attribute.fulfill(2));
    }
 else     if (attribute.startsWith(""String_Node_Str"")) {
      for (      OfflinePlayer player : Bukkit.getOfflinePlayers()) {
        if (!player.isOnline())         players.add(""String_Node_Str"" + player.getUniqueId().toString());
      }
      return new dList(players).getAttribute(attribute.fulfill(2));
    }
 else {
      for (      OfflinePlayer player : Bukkit.getOfflinePlayers())       players.add(""String_Node_Str"" + player.getUniqueId().toString());
      return new dList(players).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && !isOnline())   return new Element(getName()).getAttribute(attribute.fulfill(1));
 else   if (attribute.startsWith(""String_Node_Str"") && !isOnline())   return new Element(offlinePlayer.getUniqueId().toString()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getSaveName()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getOfflinePlayer().getBedSpawnLocation()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"") && !isOnline()) {
    return getLocation().getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(getOfflinePlayer().getFirstPlayed()).getAttribute(attribute.fulfill(1));
 else     return new Duration(getOfflinePlayer().getFirstPlayed() / 50).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(true).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isHealthScaled()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getHealthScale()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getMaximumAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getRemainingAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isBanned()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(isOnline()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isOp()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isWhitelisted()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(getOfflinePlayer().getLastPlayed()).getAttribute(attribute.fulfill(1));
 else     return new Duration(getOfflinePlayer().getLastPlayed() / 50).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.permissions == null) {
      dB.echoError(""String_Node_Str"");
      return null;
    }
    dList list=new dList();
    for (    String group : Depends.permissions.getGroups()) {
      if (Depends.permissions.playerInGroup(null,offlinePlayer,group)) {
        list.add(group);
      }
    }
    return list.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.permissions == null) {
      dB.echoError(""String_Node_Str"");
      return null;
    }
    String group=attribute.getContext(1);
    if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.playerInGroup((World)null,getName(),group)).getAttribute(attribute.fulfill(2));
 else     if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.playerInGroup(attribute.getContext(2),getName(),group)).getAttribute(attribute.fulfill(2));
 else     if (isOnline())     return new Element(Depends.permissions.playerInGroup(getPlayerEntity(),group)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    String permission=attribute.getContext(1);
    if (Depends.permissions == null) {
      dB.echoError(""String_Node_Str"");
      return null;
    }
    if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.has((World)null,getName(),permission)).getAttribute(attribute.fulfill(2));
 else     if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.has(attribute.getContext(2),getName(),permission)).getAttribute(attribute.fulfill(2));
 else     if (isOnline())     return new Element(getPlayerEntity().hasPermission(permission)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return getInventory().getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return getEnderChest().getAttribute(attribute.fulfill(1));
  if (!isOnline())   return new Element(identify()).getAttribute(attribute);
  if (attribute.startsWith(""String_Node_Str""))   return new dInventory(getPlayerEntity().getOpenInventory().getTopInventory()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dItem(getPlayerEntity().getItemOnCursor()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getPlayerEntity().getInventory().getHeldItemSlot() + 1).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getPlayerEntity().hasMetadata(""String_Node_Str""))     return getSelectedNPC().getAttribute(attribute.fulfill(1));
 else     return null;
  }
  if (attribute.startsWith(""String_Node_Str"") && !attribute.startsWith(""String_Node_Str""))   return new dEntity(getPlayerEntity()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str""))     return new Element(getPlayerEntity().getAddress().toString()).getAttribute(attribute.fulfill(1));
    return new Element(getPlayerEntity().getAddress().getHostName()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getDisplayName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerListName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getName()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dScript script=dScript.valueOf(attribute.getContext(1));
    if (script == null)     return Element.FALSE.getAttribute(attribute.fulfill(1));
    return new Element(FinishCommand.getScriptCompletes(getName(),script.getName()) > 0).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dScript script=dScript.valueOf(attribute.getContext(1));
    if (script == null)     return Element.FALSE.getAttribute(attribute.fulfill(1));
    return new Element(FailCommand.getScriptFails(getName(),script.getName()) > 0).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getPlayerEntity().getCompassTarget()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getAllowFlight()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getFlySpeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHunger=getPlayerEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHunger=attribute.getIntContext(2);
    if (getPlayerEntity().getFoodLevel() / maxHunger < .10)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < .40)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < .75)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < 1)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getSaturation()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getFoodLevel()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getMaximumAir()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getRemainingAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str""))     return new Element(getPlayerEntity().getGameMode().getValue()).getAttribute(attribute.fulfill(1));
    return new Element(getPlayerEntity().getGameMode().name()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isBlocking()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isFlying()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSleeping()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSneaking()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSprinting()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    Statistic statistic=Statistic.valueOf(attribute.getContext(1).toUpperCase());
    if (attribute.getAttribute(2).startsWith(""String_Node_Str"")) {
      if (statistic == null)       return null;
      dObject obj=ObjectFetcher.pickObjectFor(attribute.getContext(2));
      if (obj instanceof dMaterial)       return new Element(getPlayerEntity().getStatistic(statistic,((dMaterial)obj).getMaterial())).getAttribute(attribute.fulfill(2));
 else       if (obj instanceof dEntity)       return new Element(getPlayerEntity().getStatistic(statistic,((dEntity)obj).getEntityType())).getAttribute(attribute.fulfill(2));
 else       return null;
    }
    if (statistic == null)     return null;
    return new Element(getPlayerEntity().getStatistic(statistic)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(getPlayerEntity().getSleepTicks() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerTime()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getWalkSpeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getPlayerEntity().getPlayerWeather() != null)     return new Element(getPlayerEntity().getPlayerWeather().name()).getAttribute(attribute.fulfill(1));
 else     return null;
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getLevel()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getExpToLevel()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getTotalExperience()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getExp() * 100).getAttribute(attribute.fulfill(1));
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new dEntity(getPlayerEntity()).getAttribute(attribute);
}",0.9985877843344934
10214,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dEntity> entities=new ArrayList<dEntity>();
    for (    Entity entity : getWorld().getEntities()) {
      entities.add(new dEntity(entity));
    }
    return new dList(entities).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dEntity> entities=new ArrayList<dEntity>();
    for (    Entity entity : getWorld().getLivingEntities()) {
      entities.add(new dEntity(entity));
    }
    return new dList(entities).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    Player player : getWorld().getPlayers()) {
      if (!CitizensAPI.getNPCRegistry().isNPC(player))       players.add(new dPlayer(player));
    }
    return new dList(players).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().canGenerateStructures()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dList chunks=new dList();
    for (    Chunk ent : this.getWorld().getLoadedChunks())     chunks.add(new dChunk((CraftChunk)ent).identify());
    return chunks.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    int random=CoreUtilities.getRandom().nextInt(getWorld().getLoadedChunks().length);
    return new dChunk((CraftChunk)getWorld().getLoadedChunks()[random]).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getSeaLevel()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getWorld().getSpawnLocation()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getName()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getSeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getAllowAnimals()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getAllowMonsters()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getPVP()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getAmbientSpawnLimit()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getAnimalSpawnLimit()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().isAutoSave()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getDifficulty().name()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getDifficulty().name()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getMaxHeight()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getMonsterSpawnLimit()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(getWorld().getTicksPerAnimalSpawns()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(getWorld().getTicksPerMonsterSpawns()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getWaterAnimalSpawnLimit()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    long time=getWorld().getTime();
    String period;
    if (time >= 23000)     period=""String_Node_Str"";
 else     if (time >= 13500)     period=""String_Node_Str"";
 else     if (time >= 12500)     period=""String_Node_Str"";
 else     period=""String_Node_Str"";
    return new Element(period).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getFullTime()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getTime()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element((int)((getWorld().getFullTime() / 24000) % 8) + 1).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().hasStorm()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getWorld().getThunderDuration()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().isThundering()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getWorld().getWeatherDuration()).getAttribute(attribute.fulfill(1));
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new Element(identify()).getAttribute(attribute);
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dEntity> entities=new ArrayList<dEntity>();
    for (    Entity entity : getWorld().getEntities()) {
      entities.add(new dEntity(entity));
    }
    return new dList(entities).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dEntity> entities=new ArrayList<dEntity>();
    for (    Entity entity : getWorld().getLivingEntities()) {
      entities.add(new dEntity(entity));
    }
    return new dList(entities).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    Player player : getWorld().getPlayers()) {
      if (Depends.citizens == null || !CitizensAPI.getNPCRegistry().isNPC(player))       players.add(new dPlayer(player));
    }
    return new dList(players).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().canGenerateStructures()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dList chunks=new dList();
    for (    Chunk ent : this.getWorld().getLoadedChunks())     chunks.add(new dChunk((CraftChunk)ent).identify());
    return chunks.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    int random=CoreUtilities.getRandom().nextInt(getWorld().getLoadedChunks().length);
    return new dChunk((CraftChunk)getWorld().getLoadedChunks()[random]).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getSeaLevel()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getWorld().getSpawnLocation()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getName()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getSeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getAllowAnimals()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getAllowMonsters()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getPVP()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getAmbientSpawnLimit()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getAnimalSpawnLimit()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().isAutoSave()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getDifficulty().name()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getDifficulty().name()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getMaxHeight()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getMonsterSpawnLimit()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(getWorld().getTicksPerAnimalSpawns()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(getWorld().getTicksPerMonsterSpawns()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getWaterAnimalSpawnLimit()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    long time=getWorld().getTime();
    String period;
    if (time >= 23000)     period=""String_Node_Str"";
 else     if (time >= 13500)     period=""String_Node_Str"";
 else     if (time >= 12500)     period=""String_Node_Str"";
 else     period=""String_Node_Str"";
    return new Element(period).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getFullTime()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().getTime()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element((int)((getWorld().getFullTime() / 24000) % 8) + 1).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().hasStorm()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getWorld().getThunderDuration()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getWorld().isThundering()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getWorld().getWeatherDuration()).getAttribute(attribute.fulfill(1));
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new Element(identify()).getAttribute(attribute);
}",0.9975347772495158
10215,"public void switchBlock(ScriptEntry scriptEntry,Location interactLocation,SwitchState switchState,Player player){
  World world=interactLocation.getWorld();
  boolean currentState=(interactLocation.getBlock().getData() & 0x8) > 0;
  String state=switchState.toString();
  CraftPlayer craftPlayer=(CraftPlayer)player;
  if (craftPlayer == null && Bukkit.getOnlinePlayers().size() > 0) {
    if (Bukkit.getOnlinePlayers().size() > 0) {
      craftPlayer=(CraftPlayer)Bukkit.getOnlinePlayers().toArray()[0];
    }
 else {
      for (      NPC npc : CitizensAPI.getNPCRegistry()) {
        if (npc.isSpawned() && npc.getEntity() instanceof Player) {
          craftPlayer=(CraftPlayer)npc.getEntity();
          break;
        }
      }
    }
  }
  if ((state.equals(""String_Node_Str"") && !currentState) || (state.equals(""String_Node_Str"") && currentState) || state.equals(""String_Node_Str"")) {
    try {
      if (interactLocation.getBlock().getType() == Material.IRON_DOOR_BLOCK) {
        interactLocation.getBlock().setData((byte)(interactLocation.getBlock().getData() ^ 4));
        Location block=null;
        if (interactLocation.clone().add(0,1,0).getBlock().getType() == Material.IRON_DOOR_BLOCK)         block=interactLocation.clone().add(0,1,0);
 else         if (interactLocation.clone().add(0,-1,0).getBlock().getType() == Material.IRON_DOOR_BLOCK)         block=interactLocation.clone().add(0,-1,0);
        if (block != null)         block.getBlock().setData((byte)(block.getBlock().getData() ^ 4));
      }
 else {
        Block.getById(interactLocation.getBlock().getType().getId()).interact(((CraftWorld)world).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),craftPlayer != null ? craftPlayer.getHandle() : null,0,0f,0f,0f);
      }
      dB.echoDebug(scriptEntry,""String_Node_Str"" + interactLocation.getBlock().getType().toString() + ""String_Node_Str""+ ((interactLocation.getBlock().getData() & 0x8) > 0 ? ""String_Node_Str"" : ""String_Node_Str""));
    }
 catch (    NullPointerException e) {
      dB.echoError(""String_Node_Str"" + interactLocation.getBlock().getType().toString() + ""String_Node_Str"");
    }
  }
}","public void switchBlock(ScriptEntry scriptEntry,Location interactLocation,SwitchState switchState,Player player){
  World world=interactLocation.getWorld();
  boolean currentState=(interactLocation.getBlock().getData() & 0x8) > 0;
  String state=switchState.toString();
  CraftPlayer craftPlayer=(CraftPlayer)player;
  if (craftPlayer == null && Bukkit.getOnlinePlayers().size() > 0) {
    if (Bukkit.getOnlinePlayers().size() > 0) {
      craftPlayer=(CraftPlayer)Bukkit.getOnlinePlayers().toArray()[0];
    }
 else     if (Depends.citizens != null) {
      for (      NPC npc : CitizensAPI.getNPCRegistry()) {
        if (npc.isSpawned() && npc.getEntity() instanceof Player) {
          craftPlayer=(CraftPlayer)npc.getEntity();
          break;
        }
      }
    }
  }
  if ((state.equals(""String_Node_Str"") && !currentState) || (state.equals(""String_Node_Str"") && currentState) || state.equals(""String_Node_Str"")) {
    try {
      if (interactLocation.getBlock().getType() == Material.IRON_DOOR_BLOCK) {
        interactLocation.getBlock().setData((byte)(interactLocation.getBlock().getData() ^ 4));
        Location block=null;
        if (interactLocation.clone().add(0,1,0).getBlock().getType() == Material.IRON_DOOR_BLOCK)         block=interactLocation.clone().add(0,1,0);
 else         if (interactLocation.clone().add(0,-1,0).getBlock().getType() == Material.IRON_DOOR_BLOCK)         block=interactLocation.clone().add(0,-1,0);
        if (block != null)         block.getBlock().setData((byte)(block.getBlock().getData() ^ 4));
      }
 else {
        Block.getById(interactLocation.getBlock().getType().getId()).interact(((CraftWorld)world).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),craftPlayer != null ? craftPlayer.getHandle() : null,0,0f,0f,0f);
      }
      dB.echoDebug(scriptEntry,""String_Node_Str"" + interactLocation.getBlock().getType().toString() + ""String_Node_Str""+ ((interactLocation.getBlock().getData() & 0x8) > 0 ? ""String_Node_Str"" : ""String_Node_Str""));
    }
 catch (    NullPointerException e) {
      dB.echoError(""String_Node_Str"" + interactLocation.getBlock().getType().toString() + ""String_Node_Str"");
    }
  }
}",0.9922586520947176
10216,"@EventHandler public void onCombust(EntityCombustEvent event){
  Map<String,dObject> context=new HashMap<String,dObject>();
  dEntity entity=new dEntity(event.getEntity());
  Duration dura=new Duration((long)event.getDuration());
  context.put(""String_Node_Str"",entity);
  context.put(""String_Node_Str"",dura);
  dPlayer player=null;
  dNPC npc=null;
  if (CitizensAPI.getNPCRegistry().isNPC(entity.getBukkitEntity())) {
    npc=dNPC.mirrorCitizensNPC(CitizensAPI.getNPCRegistry().getNPC(entity.getBukkitEntity()));
  }
 else   if (entity.getBukkitEntity() instanceof Player) {
    player=new dPlayer((Player)entity.getBukkitEntity());
  }
  String determination=EventManager.doEvents(Arrays.asList(""String_Node_Str"",entity.identifySimple() + ""String_Node_Str"",entity.identifyType() + ""String_Node_Str""),npc,player,context);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
 else   if (Duration.matches(determination))   event.setDuration(Duration.valueOf(determination).getTicksAsInt());
}","@EventHandler public void onCombust(EntityCombustEvent event){
  Map<String,dObject> context=new HashMap<String,dObject>();
  dEntity entity=new dEntity(event.getEntity());
  Duration dura=new Duration((long)event.getDuration());
  context.put(""String_Node_Str"",entity);
  context.put(""String_Node_Str"",dura);
  dPlayer player=null;
  dNPC npc=null;
  if (Depends.citizens != null && CitizensAPI.getNPCRegistry().isNPC(entity.getBukkitEntity())) {
    npc=dNPC.mirrorCitizensNPC(CitizensAPI.getNPCRegistry().getNPC(entity.getBukkitEntity()));
  }
 else   if (entity.getBukkitEntity() instanceof Player) {
    player=new dPlayer((Player)entity.getBukkitEntity());
  }
  String determination=EventManager.doEvents(Arrays.asList(""String_Node_Str"",entity.identifySimple() + ""String_Node_Str"",entity.identifyType() + ""String_Node_Str""),npc,player,context);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
 else   if (Duration.matches(determination))   event.setDuration(Duration.valueOf(determination).getTicksAsInt());
}",0.9866284622731614
10217,"public void registerCoreTags(){
  new CuboidTags(denizen);
  new EntityTags(denizen);
  new ListTags(denizen);
  new LocationTags(denizen);
  if (Depends.citizens != null)   new NPCTags(denizen);
  new PlayerTags(denizen);
  new QueueTags(denizen);
  new ScriptTags(denizen);
  new UtilTags(denizen);
  new ProcedureScriptTag(denizen);
  new ContextTags(denizen);
  new TextTags(denizen);
  new EscapeTags(denizen);
  new DefinitionTags(denizen);
  new ParseTags(denizen);
  new AnchorTags(denizen);
  new FlagTags(denizen);
  new ConstantTags(denizen);
  new NotableLocationTags(denizen);
  denizen.getServer().getPluginManager().registerEvents(this,denizen);
}","public void registerCoreTags(){
  new CuboidTags(denizen);
  new EntityTags(denizen);
  new ListTags(denizen);
  new LocationTags(denizen);
  if (Depends.citizens != null)   new NPCTags(denizen);
  new PlayerTags(denizen);
  new QueueTags(denizen);
  new ScriptTags(denizen);
  new UtilTags(denizen);
  new ProcedureScriptTag(denizen);
  new ContextTags(denizen);
  new TextTags(denizen);
  new EscapeTags(denizen);
  new DefinitionTags(denizen);
  new ParseTags(denizen);
  if (Depends.citizens != null) {
    new AnchorTags(denizen);
    new ConstantTags(denizen);
  }
  new FlagTags(denizen);
  new NotableLocationTags(denizen);
  denizen.getServer().getPluginManager().registerEvents(this,denizen);
}",0.9267935578330894
10218,"@EventHandler public void serverTag(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") || event.replaced())   return;
  Attribute attribute=new Attribute(event.raw_tag,event.getScriptEntry()).fulfill(1);
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else {
      event.setReplaced(""String_Node_Str"");
      return;
    }
    event.setReplaced(new Element(FlagManager.serverHasFlag(flag_name)).getAttribute(attribute.fulfill(1)));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else {
      event.setReplaced(""String_Node_Str"");
      return;
    }
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
      event.setReplaced(new Element(!FlagManager.serverHasFlag(flag_name)).getAttribute(attribute.fulfill(1)));
      return;
    }
    if (attribute.startsWith(""String_Node_Str"") && !FlagManager.serverHasFlag(flag_name)) {
      event.setReplaced(new Element(0).getAttribute(attribute.fulfill(1)));
      return;
    }
    if (FlagManager.serverHasFlag(flag_name))     event.setReplaced(new dList(DenizenAPI.getCurrentInstance().flagManager().getGlobalFlag(flag_name)).getAttribute(attribute));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dList allMats=new dList();
    for (    Material mat : Material.values())     allMats.add(mat.name());
    event.setReplaced(allMats.getAttribute(attribute.fulfill(1)));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dList allFlags=new dList(DenizenAPI.getCurrentInstance().flagManager().listGlobalFlags());
    dList searchFlags=null;
    if (!allFlags.isEmpty() && attribute.hasContext(1)) {
      searchFlags=new dList();
      String search=attribute.getContext(1).toLowerCase();
      if (search.startsWith(""String_Node_Str"")) {
        String regex=search.substring(6);
        try {
          Pattern pattern=Pattern.compile(search.substring(6));
          for (          String flag : allFlags)           if (pattern.matcher(flag).matches())           searchFlags.add(flag);
        }
 catch (        Exception e) {
          dB.echoError(e);
        }
      }
 else {
        for (        String flag : allFlags)         if (flag.toLowerCase().contains(search))         searchFlags.add(flag);
      }
    }
    event.setReplaced(searchFlags == null ? allFlags.getAttribute(attribute.fulfill(1)) : searchFlags.getAttribute(attribute.fulfill(1)));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new Element(System.currentTimeMillis()).getAttribute(attribute.fulfill(1)));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    event.setReplaced(new Element(EventManager.eventExists(attribute.getContext(1)) || EventManager.eventExists(EventManager.StripIdentifiers(attribute.getContext(1)))).getAttribute(attribute.fulfill(1)));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String eventName=attribute.getContext(1).toUpperCase();
    List<WorldScriptContainer> EventsOne=EventManager.events.get(""String_Node_Str"" + eventName);
    List<WorldScriptContainer> EventsTwo=EventManager.events.get(""String_Node_Str"" + EventManager.StripIdentifiers(eventName));
    if (EventsOne == null && EventsTwo == null) {
      dB.echoError(""String_Node_Str"" + eventName + ""String_Node_Str"");
    }
 else {
      dList list=new dList();
      if (EventsOne != null) {
        for (        WorldScriptContainer script : EventsOne) {
          list.add(""String_Node_Str"" + script.getName());
        }
      }
      if (EventsTwo != null) {
        for (        WorldScriptContainer script : EventsTwo) {
          if (!list.contains(""String_Node_Str"" + script.getName()))           list.add(""String_Node_Str"" + script.getName());
        }
      }
      event.setReplaced(list.getAttribute(attribute.fulfill(1)));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    NPC npc=((Citizens)Bukkit.getPluginManager().getPlugin(""String_Node_Str"")).getNPCSelector().getSelected(Bukkit.getConsoleSender());
    if (npc == null)     return;
 else     event.setReplaced(new dNPC(npc).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    ArrayList<dNPC> npcs=new ArrayList<dNPC>();
    for (    NPC npc : CitizensAPI.getNPCRegistry())     if (npc.getName().equalsIgnoreCase(attribute.getContext(1)))     npcs.add(dNPC.mirrorCitizensNPC(npc));
    event.setReplaced(new dList(npcs).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    event.setReplaced(new Element(new File(DenizenAPI.getCurrentInstance().getDataFolder(),attribute.getContext(1)).exists()).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new Element(DenizenAPI.getCurrentInstance().getDescription().getVersion()).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new Element(Bukkit.getBukkitVersion()).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new Element(Bukkit.getServer().getVersion()).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new Element(System.getProperty(""String_Node_Str"")).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new Element(Bukkit.getServer().getMaxPlayers()).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dList list=new dList();
    for (    Map.Entry<String,Connection> entry : SQLCommand.connections.entrySet()) {
      try {
        if (!entry.getValue().isClosed()) {
          list.add(entry.getKey());
        }
 else {
          SQLCommand.connections.remove(entry.getKey());
        }
      }
 catch (      SQLException e) {
        dB.echoError(attribute.getScriptEntry().getResidingQueue(),e);
      }
    }
    event.setReplaced(list.getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.permissions == null) {
      dB.echoError(""String_Node_Str"");
      return;
    }
    event.setReplaced(new dList(Arrays.asList(Depends.permissions.getGroups())).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dList plugins=new dList();
    for (    Plugin plugin : Bukkit.getServer().getPluginManager().getPlugins())     plugins.add(plugin.getName());
    event.setReplaced(plugins.getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dList scripts=new dList();
    for (    String str : ScriptRegistry._getScriptNames())     scripts.add(""String_Node_Str"" + str);
    event.setReplaced(scripts.getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    Player matchPlayer=null;
    String matchInput=attribute.getContext(1).toLowerCase();
    for (    Player player : Bukkit.getOnlinePlayers()) {
      if (player.getName().toLowerCase().equals(matchInput)) {
        matchPlayer=player;
        break;
      }
 else       if (player.getName().toLowerCase().contains(matchInput) && matchPlayer == null) {
        matchPlayer=player;
      }
    }
    if (matchPlayer == null) {
      event.setReplaced(""String_Node_Str"");
    }
 else {
      event.setReplaced(new dPlayer(matchPlayer).getAttribute(attribute.fulfill(1)));
    }
    return;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    dScript script=dScript.valueOf(attribute.getContext(1));
    if (script == null || !(script.getContainer() instanceof AssignmentScriptContainer)) {
      dB.echoError(""String_Node_Str"");
    }
 else {
      ArrayList<dNPC> npcs=new ArrayList<dNPC>();
      for (      NPC npc : CitizensAPI.getNPCRegistry()) {
        if (npc.hasTrait(AssignmentTrait.class) && npc.getTrait(AssignmentTrait.class).hasAssignment() && npc.getTrait(AssignmentTrait.class).getAssignment().getName().equalsIgnoreCase(script.getName()))         npcs.add(dNPC.mirrorCitizensNPC(npc));
      }
      event.setReplaced(new dList(npcs).getAttribute(attribute.fulfill(1)));
      return;
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String flag=attribute.getContext(1);
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    Player player : Bukkit.getOnlinePlayers()) {
      if (DenizenAPI.getCurrentInstance().flagManager().getPlayerFlag(new dPlayer(player),flag).size() > 0)       players.add(new dPlayer(player));
    }
    event.setReplaced(new dList(players).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String flag=attribute.getContext(1);
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    Map.Entry<String,UUID> entry : dPlayer.getAllPlayers().entrySet()) {
      if (DenizenAPI.getCurrentInstance().flagManager().getPlayerFlag(entry.getValue(),flag).size() > 0)       players.add(new dPlayer(entry.getValue()));
    }
    event.setReplaced(new dList(players).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String flag=attribute.getContext(1);
    ArrayList<dNPC> npcs=new ArrayList<dNPC>();
    for (    NPC npc : CitizensAPI.getNPCRegistry()) {
      dNPC dNpc=dNPC.mirrorCitizensNPC(npc);
      if (dNpc.isSpawned() && FlagManager.npcHasFlag(dNpc,flag))       npcs.add(dNpc);
    }
    event.setReplaced(new dList(npcs).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String flag=attribute.getContext(1);
    ArrayList<dNPC> npcs=new ArrayList<dNPC>();
    for (    NPC npc : CitizensAPI.getNPCRegistry()) {
      dNPC dNpc=dNPC.mirrorCitizensNPC(npc);
      if (FlagManager.npcHasFlag(dNpc,flag))       npcs.add(dNpc);
    }
    event.setReplaced(new dList(npcs).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dNPC> npcs=new ArrayList<dNPC>();
    for (    NPC npc : CitizensAPI.getNPCRegistry())     npcs.add(dNPC.mirrorCitizensNPC(npc));
    event.setReplaced(new dList(npcs).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dWorld> worlds=new ArrayList<dWorld>();
    for (    World world : Bukkit.getWorlds())     worlds.add(dWorld.mirrorBukkitWorld(world));
    event.setReplaced(new dList(worlds).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlugin> plugins=new ArrayList<dPlugin>();
    for (    Plugin plugin : Bukkit.getServer().getPluginManager().getPlugins())     plugins.add(new dPlugin(plugin));
    event.setReplaced(new dList(plugins).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    OfflinePlayer player : Bukkit.getOfflinePlayers())     players.add(dPlayer.mirrorBukkitPlayer(player));
    event.setReplaced(new dList(players).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    Player player : Bukkit.getOnlinePlayers())     players.add(dPlayer.mirrorBukkitPlayer(player));
    event.setReplaced(new dList(players).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    OfflinePlayer player : Bukkit.getOfflinePlayers())     if (!player.isOnline())     players.add(dPlayer.mirrorBukkitPlayer(player));
    event.setReplaced(new dList(players).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    OfflinePlayer player : Bukkit.getOfflinePlayers())     if (player.isOp())     players.add(dPlayer.mirrorBukkitPlayer(player));
    event.setReplaced(new dList(players).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    Player player : Bukkit.getOnlinePlayers())     if (player.isOp())     players.add(dPlayer.mirrorBukkitPlayer(player));
    event.setReplaced(new dList(players).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    OfflinePlayer player : Bukkit.getOfflinePlayers())     if (player.isOp() && !player.isOnline())     players.add(dPlayer.mirrorBukkitPlayer(player));
    event.setReplaced(new dList(players).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new Element(Bukkit.getServer().getMotd()).getAttribute(attribute.fulfill(1)));
    return;
  }
}","@EventHandler public void serverTag(ReplaceableTagEvent event){
}",0.0094766000874763
10219,"public String getName(){
  if (isNPC())   return getDenizenNPC().getCitizen().getName();
  if (entity instanceof Player)   return ((Player)entity).getName();
  if (isLivingEntity()) {
    String customName=getLivingEntity().getCustomName();
    if (customName != null)     return customName;
  }
  return entity.getType().getName();
}","public String getName(){
  if (isNPC())   return getDenizenNPC().getCitizen().getName();
  if (entity instanceof Player)   return ((Player)entity).getName();
  if (isLivingEntity()) {
    String customName=getLivingEntity().getCustomName();
    if (customName != null)     return customName;
  }
  return entity_type.name();
}",0.9757575757575756
10220,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && (attribute.startsWith(""String_Node_Str"",2) || attribute.startsWith(""String_Node_Str"",2))&& attribute.hasContext(2)) {
    Comparable com=new net.aufdemrand.denizen.scripts.commands.core.Comparable();
    String operator;
    if (attribute.getContext(1).startsWith(""String_Node_Str"")) {
      operator=attribute.getContext(1).substring(1);
      com.setNegativeLogic();
    }
 else     operator=attribute.getContext(1);
    Comparable.Operator comparableOperator=null;
    try {
      comparableOperator=Comparable.Operator.valueOf(operator.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").toUpperCase());
    }
 catch (    IllegalArgumentException e) {
    }
    if (comparableOperator != null) {
      com.setOperator(comparableOperator);
      com.setComparable(element);
      com.setComparedto(attribute.getContext(2));
      return new Element(com.determineOutcome()).getAttribute(attribute.fulfill(2));
    }
 else {
      dB.echoError(""String_Node_Str"" + operator + ""String_Node_Str"");
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Double.valueOf(element)).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    if (!attribute.hasAlternative())     dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Math.round(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    if (!attribute.hasAlternative())     dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    try {
      DecimalFormat d=new DecimalFormat(""String_Node_Str"");
      return new Element(d.format(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
    }
 catch (    NumberFormatException e) {
      if (!attribute.hasAlternative())       dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dChunk.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dColor.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dCuboid.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dEntity.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dInventory.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dItem.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dList.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dLocation.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dMaterial.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dNPC.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlayer.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlugin.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dScript.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,Duration.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dWorld.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,ScriptQueue.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.Escape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(SQLEscaper.escapeSQL(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.unEscape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dList list=dList.valueOf(attribute.getContext(1));
    for (    String list_element : list) {
      if (element.contains(list_element)) {
        return Element.TRUE.getAttribute(attribute.fulfill(1));
      }
    }
    return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dList list=dList.valueOf(attribute.getContext(1));
    String ellow=element.toLowerCase();
    for (    String list_element : list) {
      if (ellow.contains(list_element.toLowerCase())) {
        return Element.TRUE.getAttribute(attribute.fulfill(1));
      }
    }
    return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String contains=attribute.getContext(1);
    if (element.contains(contains))     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String contains=attribute.getContext(1);
    if (contains.toLowerCase().startsWith(""String_Node_Str"")) {
      if (Pattern.compile(contains.substring((""String_Node_Str"").length()),Pattern.CASE_INSENSITIVE).matcher(element).matches())       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
 else     if (element.toLowerCase().contains(contains.toLowerCase()))     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase().endsWith(attribute.getContext(1).toLowerCase())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equals(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.matches(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && attribute.hasContext(2)) {
    String regex=attribute.getContext(1);
    Matcher m=Pattern.compile(regex).matcher(element);
    if (!m.matches()) {
      return Element.NULL.getAttribute(attribute.fulfill(2));
    }
    int group=new Element(attribute.getContext(2)).asInt();
    if (group < 0)     group=0;
    if (group > m.groupCount())     group=m.groupCount();
    return new Element(m.group(group)).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.getLastColors(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(element.length()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(!element.equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equalsIgnoreCase(""String_Node_Str"") && attribute.getContext(1).equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equalsIgnoreCase(""String_Node_Str"") || attribute.getContext(1).equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equalsIgnoreCase(""String_Node_Str"") != attribute.getContext(1).equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equals(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase().startsWith(attribute.getContext(1).toLowerCase())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.toLowerCase().indexOf(attribute.getContext(1).toLowerCase()) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.toLowerCase().lastIndexOf(attribute.getContext(1).toLowerCase()) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    int index=attribute.getIntContext(1) - 1;
    if (index < 0 || index >= element.length())     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return new Element(String.valueOf(element.charAt(index))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(element.toLowerCase().lastIndexOf(delimiter.toLowerCase()) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(element.toLowerCase().indexOf(delimiter.toLowerCase()) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(0,element.toLowerCase().lastIndexOf(delimiter.toLowerCase()))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(0,element.toLowerCase().indexOf(delimiter.toLowerCase()))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String replace=attribute.getContext(1);
    String replacement=""String_Node_Str"";
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"")) {
      if (attribute.hasContext(1)) {
        replacement=attribute.getContext(1);
        if (replacement == null)         replacement=""String_Node_Str"";
        attribute.fulfill(1);
      }
    }
    if (replace.startsWith(""String_Node_Str""))     return new Element(element.replaceAll(replace.substring(""String_Node_Str"".length()),replacement)).getAttribute(attribute);
    if (replace.startsWith(""String_Node_Str""))     return new Element(element.replaceFirst(replace.substring(""String_Node_Str"".length()),replacement)).getAttribute(attribute);
 else     return new Element(element.replaceAll(""String_Node_Str"" + Pattern.quote(replace),replacement)).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.startsWith(""String_Node_Str"",2)) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    Integer limit=(attribute.hasContext(2) ? attribute.getIntContext(2) : 1);
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1],limit))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(element.split(""String_Node_Str"" + Pattern.quote(split_string),limit))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1]))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(element.split(""String_Node_Str"" + Pattern.quote(split_string)))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    try {
      int decimal=element.indexOf('.');
      String shortelement;
      String afterdecimal;
      if (decimal != -1) {
        shortelement=element.substring(0,decimal);
        afterdecimal=element.substring(decimal);
      }
 else {
        shortelement=element;
        afterdecimal=""String_Node_Str"";
      }
      String intform=Long.valueOf(shortelement.replace(""String_Node_Str"",""String_Node_Str"")).toString();
      String negative=""String_Node_Str"";
      if (intform.startsWith(""String_Node_Str"")) {
        negative=""String_Node_Str"";
        intform=intform.substring(1,intform.length());
      }
      for (int i=intform.length() - 3; i > 0; i-=3) {
        intform=intform.substring(0,i) + ""String_Node_Str"" + intform.substring(i,intform.length());
      }
      return new Element(negative + intform + afterdecimal).getAttribute(attribute.fulfill(1));
    }
 catch (    Exception ex) {
      dB.echoError(ex);
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    FormatScriptContainer format=ScriptRegistry.getScriptContainer(attribute.getContext(1));
    if (format == null) {
      dB.echoError(""String_Node_Str"" + attribute.getContext(1) + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
 else {
      return new Element(format.getFormattedText(element,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getNPC() : null,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getPlayer() : null)).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dList list=new dList();
    for (int i=0; i < element.length(); i++) {
      list.add(String.valueOf(element.charAt(i)));
    }
    return list.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.stripColor(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(element.trim()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toUpperCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (element.length() == 0) {
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
    StringBuilder TitleCase=new StringBuilder(element.length());
    String Upper=element.toUpperCase();
    String Lower=element.toLowerCase();
    TitleCase.append(Upper.charAt(0));
    for (int i=1; i < element.length(); i++) {
      if (element.charAt(i - 1) == ' ')       TitleCase.append(Upper.charAt(i));
 else       TitleCase.append(Lower.charAt(i));
    }
    return new Element(TitleCase.toString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    int beginning_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[0]).asInt() - 1;
    int ending_index;
    if (attribute.getContext(1).split(""String_Node_Str"").length > 1)     ending_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[1]).asInt();
 else     ending_index=element.length();
    if (beginning_index < 0)     beginning_index=0;
    if (beginning_index > element.length())     beginning_index=element.length();
    if (ending_index > element.length())     ending_index=element.length();
    if (ending_index < beginning_index)     ending_index=beginning_index;
    return new Element(element.substring(beginning_index,ending_index)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    String padded=element;
    while (padded.length() < length) {
      padded=with + padded;
    }
    return new Element(padded).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    StringBuilder padded=new StringBuilder(element);
    while (padded.length() < length) {
      padded.append(with);
    }
    return new Element(padded.toString()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.abs(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() + aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() / aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() * aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() - aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() + aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() / aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() % aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() * aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() - aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sqrt(asDouble())).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.pow(asDouble(),aH.getDoubleFrom(attribute.getContext(1)))).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.asin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.acos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.atan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.cos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.tan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toDegrees(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toRadians(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.ceil(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.floor(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.round(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.attributes.size() > 0) {
    if (!attribute.hasAlternative())     dB.echoDebug(attribute.getScriptEntry(),""String_Node_Str"" + attribute.attributes.toString() + ""String_Node_Str""+ attribute.getOrigin()+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
 else {
    return element;
  }
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && (attribute.startsWith(""String_Node_Str"",2) || attribute.startsWith(""String_Node_Str"",2))&& attribute.hasContext(2)) {
    Comparable com=new net.aufdemrand.denizen.scripts.commands.core.Comparable();
    String operator;
    if (attribute.getContext(1).startsWith(""String_Node_Str"")) {
      operator=attribute.getContext(1).substring(1);
      com.setNegativeLogic();
    }
 else     operator=attribute.getContext(1);
    Comparable.Operator comparableOperator=null;
    try {
      comparableOperator=Comparable.Operator.valueOf(operator.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").toUpperCase());
    }
 catch (    IllegalArgumentException e) {
    }
    if (comparableOperator != null) {
      com.setOperator(comparableOperator);
      com.setComparable(element);
      com.setComparedto(attribute.getContext(2));
      return new Element(com.determineOutcome()).getAttribute(attribute.fulfill(2));
    }
 else {
      dB.echoError(""String_Node_Str"" + operator + ""String_Node_Str"");
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Double.valueOf(element)).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    if (!attribute.hasAlternative())     dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Math.round(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    if (!attribute.hasAlternative())     dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    try {
      DecimalFormat d=new DecimalFormat(""String_Node_Str"");
      return new Element(d.format(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
    }
 catch (    NumberFormatException e) {
      if (!attribute.hasAlternative())       dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dChunk.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dColor.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dCuboid.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dEntity.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dInventory.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dItem.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dList.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dLocation.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dMaterial.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dNPC.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlayer.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlugin.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dScript.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,Duration.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dWorld.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,ScriptQueue.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.Escape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(SQLEscaper.escapeSQL(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.unEscape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dList list=dList.valueOf(attribute.getContext(1));
    for (    String list_element : list) {
      if (element.contains(list_element)) {
        return Element.TRUE.getAttribute(attribute.fulfill(1));
      }
    }
    return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dList list=dList.valueOf(attribute.getContext(1));
    String ellow=element.toLowerCase();
    for (    String list_element : list) {
      if (ellow.contains(list_element.toLowerCase())) {
        return Element.TRUE.getAttribute(attribute.fulfill(1));
      }
    }
    return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String contains=attribute.getContext(1);
    if (element.contains(contains))     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String contains=attribute.getContext(1);
    if (contains.toLowerCase().startsWith(""String_Node_Str"")) {
      if (Pattern.compile(contains.substring((""String_Node_Str"").length()),Pattern.CASE_INSENSITIVE).matcher(element).matches())       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
 else     if (element.toLowerCase().contains(contains.toLowerCase()))     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase().endsWith(attribute.getContext(1).toLowerCase())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equals(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.matches(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && attribute.hasContext(2)) {
    String regex=attribute.getContext(1);
    Matcher m=Pattern.compile(regex).matcher(element);
    if (!m.matches()) {
      return Element.NULL.getAttribute(attribute.fulfill(2));
    }
    int group=new Element(attribute.getContext(2)).asInt();
    if (group < 0)     group=0;
    if (group > m.groupCount())     group=m.groupCount();
    return new Element(m.group(group)).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.getLastColors(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(element.length()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(!element.equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equalsIgnoreCase(""String_Node_Str"") && attribute.getContext(1).equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equalsIgnoreCase(""String_Node_Str"") || attribute.getContext(1).equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equalsIgnoreCase(""String_Node_Str"") != attribute.getContext(1).equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equals(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase().startsWith(attribute.getContext(1).toLowerCase())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.toLowerCase().indexOf(attribute.getContext(1).toLowerCase()) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.toLowerCase().lastIndexOf(attribute.getContext(1).toLowerCase()) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    int index=attribute.getIntContext(1) - 1;
    if (index < 0 || index >= element.length())     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return new Element(String.valueOf(element.charAt(index))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.toLowerCase().contains(delimiter.toLowerCase()))     return new Element(element.substring(element.toLowerCase().lastIndexOf(delimiter.toLowerCase()) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.toLowerCase().contains(delimiter.toLowerCase()))     return new Element(element.substring(element.toLowerCase().indexOf(delimiter.toLowerCase()) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.toLowerCase().contains(delimiter.toLowerCase()))     return new Element(element.substring(0,element.toLowerCase().lastIndexOf(delimiter.toLowerCase()))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.toLowerCase().contains(delimiter.toLowerCase()))     return new Element(element.substring(0,element.toLowerCase().indexOf(delimiter.toLowerCase()))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String replace=attribute.getContext(1);
    String replacement=""String_Node_Str"";
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"")) {
      if (attribute.hasContext(1)) {
        replacement=attribute.getContext(1);
        if (replacement == null)         replacement=""String_Node_Str"";
        attribute.fulfill(1);
      }
    }
    if (replace.startsWith(""String_Node_Str""))     return new Element(element.replaceAll(replace.substring(""String_Node_Str"".length()),replacement)).getAttribute(attribute);
    if (replace.startsWith(""String_Node_Str""))     return new Element(element.replaceFirst(replace.substring(""String_Node_Str"".length()),replacement)).getAttribute(attribute);
 else     return new Element(element.replaceAll(""String_Node_Str"" + Pattern.quote(replace),replacement)).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.startsWith(""String_Node_Str"",2)) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    Integer limit=(attribute.hasContext(2) ? attribute.getIntContext(2) : 1);
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1],limit))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(element.split(""String_Node_Str"" + Pattern.quote(split_string),limit))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1]))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(element.split(""String_Node_Str"" + Pattern.quote(split_string)))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    try {
      int decimal=element.indexOf('.');
      String shortelement;
      String afterdecimal;
      if (decimal != -1) {
        shortelement=element.substring(0,decimal);
        afterdecimal=element.substring(decimal);
      }
 else {
        shortelement=element;
        afterdecimal=""String_Node_Str"";
      }
      String intform=Long.valueOf(shortelement.replace(""String_Node_Str"",""String_Node_Str"")).toString();
      String negative=""String_Node_Str"";
      if (intform.startsWith(""String_Node_Str"")) {
        negative=""String_Node_Str"";
        intform=intform.substring(1,intform.length());
      }
      for (int i=intform.length() - 3; i > 0; i-=3) {
        intform=intform.substring(0,i) + ""String_Node_Str"" + intform.substring(i,intform.length());
      }
      return new Element(negative + intform + afterdecimal).getAttribute(attribute.fulfill(1));
    }
 catch (    Exception ex) {
      dB.echoError(ex);
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    FormatScriptContainer format=ScriptRegistry.getScriptContainer(attribute.getContext(1));
    if (format == null) {
      dB.echoError(""String_Node_Str"" + attribute.getContext(1) + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
 else {
      return new Element(format.getFormattedText(element,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getNPC() : null,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getPlayer() : null)).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dList list=new dList();
    for (int i=0; i < element.length(); i++) {
      list.add(String.valueOf(element.charAt(i)));
    }
    return list.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.stripColor(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(element.trim()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toUpperCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (element.length() == 0) {
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
    StringBuilder TitleCase=new StringBuilder(element.length());
    String Upper=element.toUpperCase();
    String Lower=element.toLowerCase();
    TitleCase.append(Upper.charAt(0));
    for (int i=1; i < element.length(); i++) {
      if (element.charAt(i - 1) == ' ')       TitleCase.append(Upper.charAt(i));
 else       TitleCase.append(Lower.charAt(i));
    }
    return new Element(TitleCase.toString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    int beginning_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[0]).asInt() - 1;
    int ending_index;
    if (attribute.getContext(1).split(""String_Node_Str"").length > 1)     ending_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[1]).asInt();
 else     ending_index=element.length();
    if (beginning_index < 0)     beginning_index=0;
    if (beginning_index > element.length())     beginning_index=element.length();
    if (ending_index > element.length())     ending_index=element.length();
    if (ending_index < beginning_index)     ending_index=beginning_index;
    return new Element(element.substring(beginning_index,ending_index)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    String padded=element;
    while (padded.length() < length) {
      padded=with + padded;
    }
    return new Element(padded).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    StringBuilder padded=new StringBuilder(element);
    while (padded.length() < length) {
      padded.append(with);
    }
    return new Element(padded.toString()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.abs(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() + aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() / aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() * aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() - aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() + aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() / aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() % aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() * aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() - aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sqrt(asDouble())).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.pow(asDouble(),aH.getDoubleFrom(attribute.getContext(1)))).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.asin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.acos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.atan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.cos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.tan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toDegrees(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toRadians(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.ceil(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.floor(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.round(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.attributes.size() > 0) {
    if (!attribute.hasAlternative())     dB.echoDebug(attribute.getScriptEntry(),""String_Node_Str"" + attribute.attributes.toString() + ""String_Node_Str""+ attribute.getOrigin()+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
 else {
    return element;
  }
}",0.9980534603218744
10221,"public void applyProperty(Mechanism mechanism){
  if (idType == null)   mechanisms.add(mechanism);
 else   if (idType.equals(""String_Node_Str"") || mechanism.matches(""String_Node_Str""))   adjust(mechanism);
 else   dB.echoError(""String_Node_Str"");
}","public void applyProperty(Mechanism mechanism){
  if (idType == null)   mechanisms.add(mechanism);
 else   if (idType.equals(""String_Node_Str"") || mechanism.matches(""String_Node_Str""))   adjust(mechanism);
 else   if (!(idType.equals(""String_Node_Str"") && mechanism.matches(""String_Node_Str"")))   dB.echoError(""String_Node_Str"");
}",0.8566493955094991
10222,"@Override public String getPropertyString(){
  return getTitle();
}","@Override public String getPropertyString(){
  if (inventory.isUnique() || inventory.getIdType().equals(""String_Node_Str"") || inventory.getIdType().equals(""String_Node_Str""))   return getTitle();
 else   return null;
}",0.3578947368421052
10223,"public Argument(String string){
  raw_value=string;
  string=string.trim();
  int first_colon=string.indexOf(':');
  int first_space=string.indexOf(' ');
  if ((first_space > -1 && first_space < first_colon) || first_colon == -1) {
    value=string;
    lower_value=string.toLowerCase();
  }
 else {
    has_prefix=true;
    String[] split=StringUtils.split(string,""String_Node_Str"",2);
    prefix=split[0];
    lower_prefix=prefix.toLowerCase();
    value=split[1];
    lower_value=value.toLowerCase();
  }
}","public Argument(String string){
  raw_value=string;
  string=string.trim();
  int first_colon=string.indexOf(':');
  int first_space=string.indexOf(' ');
  if ((first_space > -1 && first_space < first_colon) || first_colon == -1) {
    value=string;
    lower_value=string.toLowerCase();
  }
 else {
    has_prefix=true;
    String[] split=StringUtils.split(string,""String_Node_Str"",2);
    prefix=split[0];
    lower_prefix=prefix.toLowerCase();
    if (split.length == 2)     value=split[1];
 else     value=""String_Node_Str"";
    lower_value=value.toLowerCase();
  }
}",0.9425925925925924
10224,"/** 
 * Notes that the player exists, for easy dPlayer valueOf handling.
 */
public static void notePlayer(OfflinePlayer player){
  if (!playerNames.containsKey(player.getName().toLowerCase())) {
    playerNames.put(player.getName().toLowerCase(),player.getUniqueId());
  }
}","/** 
 * Notes that the player exists, for easy dPlayer valueOf handling.
 */
public static void notePlayer(OfflinePlayer player){
  if (player.getName() == null) {
    dB.echoError(""String_Node_Str"" + player.toString());
    return;
  }
  if (!playerNames.containsKey(player.getName().toLowerCase())) {
    playerNames.put(player.getName().toLowerCase(),player.getUniqueId());
  }
}",0.837138508371385
10225,"public void checkHeld(NavigationEvent e){
  for (int i=0; i < held.size(); i++) {
    ScriptEntry entry=held.get(i);
    List<dNPC> tally=(List<dNPC>)entry.getObject(""String_Node_Str"");
    tally.remove(dNPC.mirrorCitizensNPC(e.getNPC()));
    if (tally.isEmpty()) {
      entry.setFinished(true);
      held.remove(i);
      i--;
    }
  }
}","public void checkHeld(NavigationEvent e){
  if (e.getNPC() == null)   return;
  for (int i=0; i < held.size(); i++) {
    ScriptEntry entry=held.get(i);
    List<dNPC> tally=(List<dNPC>)entry.getObject(""String_Node_Str"");
    tally.remove(dNPC.mirrorCitizensNPC(e.getNPC()));
    if (tally.isEmpty()) {
      entry.setFinished(true);
      held.remove(i);
      i--;
    }
  }
}",0.95
10226,"@Override public boolean shouldDebug() throws Exception {
  return script.getContainer().shouldDebug();
}","@Override public boolean shouldDebug() throws Exception {
  if (script != null && script.getContainer() != null)   return script.getContainer().shouldDebug();
 else   return true;
}",0.7342657342657343
10227,"private static void echo(String string,Debuggable caller){
  boolean should_send=true;
  if (caller != null)   try {
    if (filter.isEmpty())     should_send=caller.shouldDebug();
 else {
      should_send=false;
      for (      String criteria : filter)       if (caller.shouldFilter(criteria)) {
        should_send=true;
        break;
      }
    }
  }
 catch (  Exception e) {
    should_send=true;
  }
  if (should_send)   ConsoleSender.sendMessage(string);
}","private static void echo(String string,Debuggable caller){
  if (shouldDebug(caller))   ConsoleSender.sendMessage(string);
}",0.4196277495769882
10228,"@EventHandler public void playerJoin(PlayerJoinEvent event){
  Denizen denizen=DenizenAPI.getCurrentInstance();
  dPlayer player=new dPlayer(event.getPlayer());
  if (!denizen.getSaves().contains(""String_Node_Str"" + player.getSaveName()))   return;
  Set<String> inProgress=denizen.getSaves().getConfigurationSection(""String_Node_Str"" + event.getPlayer().getName()).getKeys(false);
  if (inProgress.isEmpty())   return;
  String path=""String_Node_Str"" + player.getSaveName() + ""String_Node_Str"";
  for (  String listenerId : inProgress) {
    try {
      String type=denizen.getSaves().getString(path + listenerId + ""String_Node_Str"");
      dNPC npc=null;
      if (denizen.getSaves().contains(path + listenerId + ""String_Node_Str""))       npc=DenizenAPI.getDenizenNPC(CitizensAPI.getNPCRegistry().getById(denizen.getSaves().getInt(path + listenerId + ""String_Node_Str"")));
      if (get(type) == null)       return;
      dB.log(event.getPlayer().getName() + ""String_Node_Str"" + listenerId+ ""String_Node_Str"");
      get(type).createInstance(dPlayer.mirrorBukkitPlayer(event.getPlayer()),listenerId).load(dPlayer.mirrorBukkitPlayer(event.getPlayer()),npc,listenerId,type);
    }
 catch (    Exception e) {
      dB.log(event.getPlayer() + ""String_Node_Str"" + listenerId+ ""String_Node_Str"");
    }
  }
}","@EventHandler public void playerJoin(PlayerJoinEvent event){
  Denizen denizen=DenizenAPI.getCurrentInstance();
  dPlayer player=new dPlayer(event.getPlayer());
  if (!denizen.getSaves().contains(""String_Node_Str"" + player.getSaveName()))   return;
  Set<String> inProgress=denizen.getSaves().getConfigurationSection(""String_Node_Str"" + player.getSaveName()).getKeys(false);
  if (inProgress.isEmpty())   return;
  String path=""String_Node_Str"" + player.getSaveName() + ""String_Node_Str"";
  for (  String listenerId : inProgress) {
    try {
      String type=denizen.getSaves().getString(path + listenerId + ""String_Node_Str"");
      dNPC npc=null;
      if (denizen.getSaves().contains(path + listenerId + ""String_Node_Str""))       npc=DenizenAPI.getDenizenNPC(CitizensAPI.getNPCRegistry().getById(denizen.getSaves().getInt(path + listenerId + ""String_Node_Str"")));
      if (get(type) == null)       return;
      dB.log(event.getPlayer().getName() + ""String_Node_Str"" + listenerId+ ""String_Node_Str"");
      get(type).createInstance(dPlayer.mirrorBukkitPlayer(event.getPlayer()),listenerId).load(dPlayer.mirrorBukkitPlayer(event.getPlayer()),npc,listenerId,type);
    }
 catch (    Exception e) {
      dB.log(event.getPlayer() + ""String_Node_Str"" + listenerId+ ""String_Node_Str"");
    }
  }
}",0.9865436370626682
10229,"@EventHandler public void signChange(final SignChangeEvent event){
  Map<String,dObject> context=new HashMap<String,dObject>();
  dPlayer player=new dPlayer(event.getPlayer());
  Block block=event.getBlock();
  if (block == null || !(block.getState() instanceof Sign)) {
    return;
  }
  Sign sign=(Sign)block.getState();
  dMaterial material=dMaterial.getMaterialFrom(block.getType(),block.getData());
  context.put(""String_Node_Str"",new dList(Arrays.asList(sign.getLines())));
  context.put(""String_Node_Str"",new dList(Arrays.asList(event.getLines())));
  dList old_escaped=new dList();
  for (  String str : sign.getLines()) {
    old_escaped.add(EscapeTags.Escape(str));
  }
  context.put(""String_Node_Str"",old_escaped);
  dList new_escaped=new dList();
  for (  String str : event.getLines()) {
    new_escaped.add(EscapeTags.Escape(str));
  }
  context.put(""String_Node_Str"",new_escaped);
  context.put(""String_Node_Str"",new dLocation(block.getLocation()));
  context.put(""String_Node_Str"",material);
  String determination=EventManager.doEvents(Arrays.asList(""String_Node_Str"",""String_Node_Str"" + material.identifySimple()),null,player,context,true);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
 else   if (determination.length() > 0 && !determination.equalsIgnoreCase(""String_Node_Str"")) {
    dList lines=new dList(determination);
    for (int i=0; i < 4 && i < lines.size(); i++) {
      event.setLine(i,EscapeTags.unEscape(lines.get(i)));
    }
  }
}","@EventHandler public void signChange(final SignChangeEvent event){
  Map<String,dObject> context=new HashMap<String,dObject>();
  dPlayer player=new dPlayer(event.getPlayer());
  Block block=event.getBlock();
  if (block == null || !(block.getState() instanceof Sign)) {
    return;
  }
  Sign sign=(Sign)block.getState();
  dMaterial material=dMaterial.getMaterialFrom(block.getType(),block.getData());
  context.put(""String_Node_Str"",new dList(Arrays.asList(sign.getLines())));
  context.put(""String_Node_Str"",new dList(Arrays.asList(event.getLines())));
  dList old_escaped=new dList();
  for (  String str : sign.getLines()) {
    old_escaped.add(EscapeTags.Escape(str));
  }
  context.put(""String_Node_Str"",old_escaped);
  dList new_escaped=new dList();
  for (  String str : event.getLines()) {
    new_escaped.add(EscapeTags.Escape(str));
  }
  context.put(""String_Node_Str"",new_escaped);
  context.put(""String_Node_Str"",new dLocation(block.getLocation()));
  context.put(""String_Node_Str"",material);
  String determination=EventManager.doEvents(Arrays.asList(""String_Node_Str"",""String_Node_Str"" + material.identifySimple()),null,player,context,true);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
 else   if (determination.length() > 0 && !determination.equalsIgnoreCase(""String_Node_Str"")) {
    dList lines=dList.valueOf(determination);
    for (int i=0; i < 4 && i < lines.size(); i++) {
      event.setLine(i,EscapeTags.unEscape(lines.get(i)));
    }
  }
}",0.992729676140119
10230,"@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onDamage(EntityDamageEvent event){
  if (event.getEntity() != npc.getBukkitEntity() || dying)   return;
  if (this.getHealth() - event.getDamage() > 0)   return;
  dying=true;
  player=null;
  entityId=npc.getBukkitEntity().getEntityId();
  String deathCause=event.getCause().toString().toLowerCase().replace('_',' ');
  Map<String,dObject> context=new HashMap<String,dObject>();
  context.put(""String_Node_Str"",new Element(event.getDamage()));
  context.put(""String_Node_Str"",new Element(deathCause));
  if (event instanceof EntityDamageByEntityEvent) {
    Entity killerEntity=((EntityDamageByEntityEvent)event).getDamager();
    context.put(""String_Node_Str"",new dEntity(killerEntity));
    if (killerEntity instanceof Player)     player=dPlayer.mirrorBukkitPlayer((Player)killerEntity);
 else     if (killerEntity instanceof Projectile) {
      ProjectileSource shooter=((Projectile)killerEntity).getShooter();
      if (shooter != null && shooter instanceof LivingEntity) {
        context.put(""String_Node_Str"",new dEntity((LivingEntity)shooter));
        if (shooter instanceof Player)         player=dPlayer.mirrorBukkitPlayer((Player)shooter);
        DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"" + ((LivingEntity)shooter).getType().toString(),player,context);
      }
    }
    DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",player,context);
    DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"" + killerEntity.getType().toString(),player,context);
  }
 else   if (event instanceof EntityDamageByBlockEvent) {
    DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",player,context);
  }
  DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",player,context);
  DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"" + deathCause,player,context);
  if (npc.getBukkitEntity() == null)   return;
  loc=dLocation.valueOf(TagManager.tag(null,DenizenAPI.getDenizenNPC(npc),respawnLocation,false));
  if (loc == null)   loc=npc.getBukkitEntity().getLocation();
  if (animatedeath) {
    npc.getNavigator().cancelNavigation();
  }
  die();
  if (respawn) {
    Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(DenizenAPI.getCurrentInstance(),new Runnable(){
      public void run(){
        if (CitizensAPI.getNPCRegistry().getById(npc.getId()) == null || npc.isSpawned())         return;
 else         npc.spawn(loc);
      }
    }
,(Duration.valueOf(respawnDelay).getTicks()));
  }
}","@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onDamage(EntityDamageEvent event){
  if (event.getEntity() != npc.getBukkitEntity() || dying)   return;
  if (this.getHealth() - event.getDamage() > 0)   return;
  dying=true;
  player=null;
  entityId=npc.getBukkitEntity().getEntityId();
  String deathCause=event.getCause().toString().toLowerCase().replace('_',' ');
  Map<String,dObject> context=new HashMap<String,dObject>();
  context.put(""String_Node_Str"",new Element(event.getDamage()));
  context.put(""String_Node_Str"",new Element(deathCause));
  if (event instanceof EntityDamageByEntityEvent) {
    Entity killerEntity=((EntityDamageByEntityEvent)event).getDamager();
    context.put(""String_Node_Str"",new dEntity(killerEntity));
    if (killerEntity instanceof Player)     player=dPlayer.mirrorBukkitPlayer((Player)killerEntity);
 else     if (killerEntity instanceof Projectile) {
      ProjectileSource shooter=((Projectile)killerEntity).getShooter();
      if (shooter != null && shooter instanceof LivingEntity) {
        context.put(""String_Node_Str"",new dEntity((LivingEntity)shooter));
        if (shooter instanceof Player)         player=dPlayer.mirrorBukkitPlayer((Player)shooter);
        DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"" + ((LivingEntity)shooter).getType().toString(),player,context);
      }
    }
    DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",player,context);
    DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"" + killerEntity.getType().toString(),player,context);
  }
 else   if (event instanceof EntityDamageByBlockEvent) {
    DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",player,context);
  }
  DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",player,context);
  DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"" + deathCause,player,context);
  if (npc.getBukkitEntity() == null)   return;
  loc=dLocation.valueOf(TagManager.tag(null,DenizenAPI.getDenizenNPC(npc),respawnLocation,false));
  if (loc == null)   loc=npc.getBukkitEntity().getLocation();
  if (animatedeath) {
    npc.getNavigator().cancelNavigation();
  }
  die();
  if (respawn && (Duration.valueOf(respawnDelay).getTicks() > 0)) {
    Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(DenizenAPI.getCurrentInstance(),new Runnable(){
      public void run(){
        if (CitizensAPI.getNPCRegistry().getById(npc.getId()) == null || npc.isSpawned())         return;
 else         npc.spawn(loc);
      }
    }
,(Duration.valueOf(respawnDelay).getTicks()));
  }
}",0.9899149693494168
10231,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && (attribute.startsWith(""String_Node_Str"",2) || attribute.startsWith(""String_Node_Str"",2))&& attribute.hasContext(2)) {
    Comparable com=new net.aufdemrand.denizen.scripts.commands.core.Comparable();
    String operator;
    if (attribute.getContext(1).startsWith(""String_Node_Str"")) {
      operator=attribute.getContext(1).substring(1);
      com.setNegativeLogic();
    }
 else     operator=attribute.getContext(1);
    Comparable.Operator comparableOperator=null;
    try {
      comparableOperator=Comparable.Operator.valueOf(operator.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").toUpperCase());
    }
 catch (    IllegalArgumentException e) {
    }
    if (comparableOperator != null) {
      com.setOperator(comparableOperator);
      com.setComparable(element);
      com.setComparedto(attribute.getContext(2));
      return new Element(com.determineOutcome()).getAttribute(attribute.fulfill(2));
    }
 else {
      dB.echoError(""String_Node_Str"" + operator + ""String_Node_Str"");
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Double.valueOf(element)).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Math.round(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    try {
      DecimalFormat d=new DecimalFormat(""String_Node_Str"");
      return new Element(d.format(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
    }
 catch (    NumberFormatException e) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dChunk.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dCuboid.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dEntity.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dInventory.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dItem.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dList.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dLocation.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dMaterial.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dNPC.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlayer.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlugin.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dScript.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,Duration.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dWorld.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,ScriptQueue.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.Escape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.unEscape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    String contains=attribute.getContext(1);
    if (contains.toLowerCase().startsWith(""String_Node_Str"")) {
      if (Pattern.compile(contains.substring((""String_Node_Str"").length()),Pattern.CASE_INSENSITIVE).matcher(element).matches())       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
 else     if (element.toLowerCase().contains(contains.toLowerCase()))     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.endsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.matches(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && attribute.hasContext(2)) {
    String regex=attribute.getContext(1);
    Matcher m=Pattern.compile(regex).matcher(element);
    if (!m.matches()) {
      return Element.NULL.getAttribute(attribute.fulfill(2));
    }
    int group=new Element(attribute.getContext(2)).asInt();
    if (group < 0)     group=0;
    if (group > m.groupCount())     group=m.groupCount();
    return new Element(m.group(group)).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.getLastColors(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(element.length()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(!element.equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equalsIgnoreCase(""String_Node_Str"") && attribute.getContext(1).equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equalsIgnoreCase(""String_Node_Str"") || attribute.getContext(1).equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equalsIgnoreCase(""String_Node_Str"") != attribute.getContext(1).equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equals(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.startsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.indexOf(attribute.getContext(1)) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.lastIndexOf(attribute.getContext(1)) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    int index=attribute.getIntContext(1) - 1;
    if (index < 0 || index >= element.length())     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return new Element(String.valueOf(element.charAt(index))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(element.lastIndexOf(delimiter) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(element.indexOf(delimiter) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(0,element.lastIndexOf(delimiter))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(0,element.indexOf(delimiter))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String replace=attribute.getContext(1);
    String replacement=""String_Node_Str"";
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"")) {
      if (attribute.hasContext(1)) {
        replacement=attribute.getContext(1);
        if (replacement == null)         replacement=""String_Node_Str"";
        attribute.fulfill(1);
      }
    }
    if (replace.startsWith(""String_Node_Str""))     return new Element(element.replaceAll(replace.substring(""String_Node_Str"".length()),replacement)).getAttribute(attribute);
    if (replace.startsWith(""String_Node_Str""))     return new Element(element.replaceFirst(replace.substring(""String_Node_Str"".length()),replacement)).getAttribute(attribute);
 else     return new Element(element.replaceAll(""String_Node_Str"" + Pattern.quote(replace),replacement)).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.startsWith(""String_Node_Str"",2)) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    Integer limit=(attribute.hasContext(2) ? attribute.getIntContext(2) : 1);
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1],limit))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string,limit))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1]))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    try {
      int decimal=element.indexOf('.');
      String shortelement;
      String afterdecimal;
      if (decimal != -1) {
        shortelement=element.substring(0,decimal);
        afterdecimal=element.substring(decimal);
      }
 else {
        shortelement=element;
        afterdecimal=""String_Node_Str"";
      }
      String intform=Long.valueOf(shortelement.replace(""String_Node_Str"",""String_Node_Str"")).toString();
      String negative=""String_Node_Str"";
      if (intform.startsWith(""String_Node_Str"")) {
        negative=""String_Node_Str"";
        intform=intform.substring(1,intform.length());
      }
      for (int i=intform.length() - 3; i > 0; i-=3) {
        intform=intform.substring(0,i) + ""String_Node_Str"" + intform.substring(i,intform.length());
      }
      return new Element(negative + intform + afterdecimal).getAttribute(attribute.fulfill(1));
    }
 catch (    Exception ex) {
      dB.echoError(ex);
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    FormatScriptContainer format=ScriptRegistry.getScriptContainer(attribute.getContext(1));
    if (format == null) {
      dB.echoError(""String_Node_Str"" + attribute.getContext(1) + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
 else {
      return new Element(format.getFormattedText(element,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getNPC() : null,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getPlayer() : null)).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dList list=new dList();
    for (int i=0; i < element.length(); i++) {
      list.add(String.valueOf(element.charAt(i)));
    }
    return list.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.stripColor(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(element.trim()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toUpperCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (element.length() == 0) {
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
    StringBuilder TitleCase=new StringBuilder(element.length());
    String Upper=element.toUpperCase();
    String Lower=element.toLowerCase();
    TitleCase.append(Upper.charAt(0));
    for (int i=1; i < element.length(); i++) {
      if (element.charAt(i - 1) == ' ')       TitleCase.append(Upper.charAt(i));
 else       TitleCase.append(Lower.charAt(i));
    }
    return new Element(TitleCase.toString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    int beginning_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[0]).asInt() - 1;
    int ending_index;
    if (attribute.getContext(1).split(""String_Node_Str"").length > 1)     ending_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[1]).asInt();
 else     ending_index=element.length();
    if (beginning_index < 0)     beginning_index=0;
    if (beginning_index > element.length())     beginning_index=element.length();
    if (ending_index > element.length())     ending_index=element.length();
    if (ending_index < beginning_index)     ending_index=beginning_index;
    return new Element(element.substring(beginning_index,ending_index)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    String padded=element;
    while (padded.length() < length) {
      padded=with + padded;
    }
    return new Element(padded).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    StringBuilder padded=new StringBuilder(element);
    while (padded.length() < length) {
      padded.append(with);
    }
    return new Element(padded.toString()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.abs(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() + aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() / aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() * aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() - aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() + aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() / aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() % aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() * aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() - aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sqrt(asDouble())).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.pow(asDouble(),aH.getDoubleFrom(attribute.getContext(1)))).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.asin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.acos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.atan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.cos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.tan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toDegrees(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toRadians(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.ceil(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.floor(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.round(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.attributes.size() > 0) {
    dB.echoDebug(attribute.getScriptEntry(),""String_Node_Str"" + attribute.attributes.toString() + ""String_Node_Str""+ attribute.getOrigin()+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
 else {
    return element;
  }
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && (attribute.startsWith(""String_Node_Str"",2) || attribute.startsWith(""String_Node_Str"",2))&& attribute.hasContext(2)) {
    Comparable com=new net.aufdemrand.denizen.scripts.commands.core.Comparable();
    String operator;
    if (attribute.getContext(1).startsWith(""String_Node_Str"")) {
      operator=attribute.getContext(1).substring(1);
      com.setNegativeLogic();
    }
 else     operator=attribute.getContext(1);
    Comparable.Operator comparableOperator=null;
    try {
      comparableOperator=Comparable.Operator.valueOf(operator.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").toUpperCase());
    }
 catch (    IllegalArgumentException e) {
    }
    if (comparableOperator != null) {
      com.setOperator(comparableOperator);
      com.setComparable(element);
      com.setComparedto(attribute.getContext(2));
      return new Element(com.determineOutcome()).getAttribute(attribute.fulfill(2));
    }
 else {
      dB.echoError(""String_Node_Str"" + operator + ""String_Node_Str"");
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Double.valueOf(element)).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Math.round(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    try {
      DecimalFormat d=new DecimalFormat(""String_Node_Str"");
      return new Element(d.format(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
    }
 catch (    NumberFormatException e) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dChunk.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dCuboid.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dEntity.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dInventory.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dItem.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dList.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dLocation.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dMaterial.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dNPC.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlayer.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlugin.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dScript.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,Duration.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dWorld.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,ScriptQueue.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.Escape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.unEscape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    String contains=attribute.getContext(1);
    if (contains.toLowerCase().startsWith(""String_Node_Str"")) {
      if (Pattern.compile(contains.substring((""String_Node_Str"").length()),Pattern.CASE_INSENSITIVE).matcher(element).matches())       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
 else     if (element.toLowerCase().contains(contains.toLowerCase()))     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase().endsWith(attribute.getContext(1).toLowerCase())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.matches(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && attribute.hasContext(2)) {
    String regex=attribute.getContext(1);
    Matcher m=Pattern.compile(regex).matcher(element);
    if (!m.matches()) {
      return Element.NULL.getAttribute(attribute.fulfill(2));
    }
    int group=new Element(attribute.getContext(2)).asInt();
    if (group < 0)     group=0;
    if (group > m.groupCount())     group=m.groupCount();
    return new Element(m.group(group)).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.getLastColors(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(element.length()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(!element.equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equalsIgnoreCase(""String_Node_Str"") && attribute.getContext(1).equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equalsIgnoreCase(""String_Node_Str"") || attribute.getContext(1).equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equalsIgnoreCase(""String_Node_Str"") != attribute.getContext(1).equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equals(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase().startsWith(attribute.getContext(1).toLowerCase())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.toLowerCase().indexOf(attribute.getContext(1).toLowerCase()) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.toLowerCase().lastIndexOf(attribute.getContext(1).toLowerCase()) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    int index=attribute.getIntContext(1) - 1;
    if (index < 0 || index >= element.length())     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return new Element(String.valueOf(element.charAt(index))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(element.lastIndexOf(delimiter) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(element.indexOf(delimiter) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(0,element.lastIndexOf(delimiter))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(0,element.indexOf(delimiter))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String replace=attribute.getContext(1);
    String replacement=""String_Node_Str"";
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"")) {
      if (attribute.hasContext(1)) {
        replacement=attribute.getContext(1);
        if (replacement == null)         replacement=""String_Node_Str"";
        attribute.fulfill(1);
      }
    }
    if (replace.startsWith(""String_Node_Str""))     return new Element(element.replaceAll(replace.substring(""String_Node_Str"".length()),replacement)).getAttribute(attribute);
    if (replace.startsWith(""String_Node_Str""))     return new Element(element.replaceFirst(replace.substring(""String_Node_Str"".length()),replacement)).getAttribute(attribute);
 else     return new Element(element.replaceAll(""String_Node_Str"" + Pattern.quote(replace),replacement)).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.startsWith(""String_Node_Str"",2)) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    Integer limit=(attribute.hasContext(2) ? attribute.getIntContext(2) : 1);
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1],limit))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string,limit))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1]))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    try {
      int decimal=element.indexOf('.');
      String shortelement;
      String afterdecimal;
      if (decimal != -1) {
        shortelement=element.substring(0,decimal);
        afterdecimal=element.substring(decimal);
      }
 else {
        shortelement=element;
        afterdecimal=""String_Node_Str"";
      }
      String intform=Long.valueOf(shortelement.replace(""String_Node_Str"",""String_Node_Str"")).toString();
      String negative=""String_Node_Str"";
      if (intform.startsWith(""String_Node_Str"")) {
        negative=""String_Node_Str"";
        intform=intform.substring(1,intform.length());
      }
      for (int i=intform.length() - 3; i > 0; i-=3) {
        intform=intform.substring(0,i) + ""String_Node_Str"" + intform.substring(i,intform.length());
      }
      return new Element(negative + intform + afterdecimal).getAttribute(attribute.fulfill(1));
    }
 catch (    Exception ex) {
      dB.echoError(ex);
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    FormatScriptContainer format=ScriptRegistry.getScriptContainer(attribute.getContext(1));
    if (format == null) {
      dB.echoError(""String_Node_Str"" + attribute.getContext(1) + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
 else {
      return new Element(format.getFormattedText(element,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getNPC() : null,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getPlayer() : null)).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dList list=new dList();
    for (int i=0; i < element.length(); i++) {
      list.add(String.valueOf(element.charAt(i)));
    }
    return list.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.stripColor(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(element.trim()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toUpperCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (element.length() == 0) {
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
    StringBuilder TitleCase=new StringBuilder(element.length());
    String Upper=element.toUpperCase();
    String Lower=element.toLowerCase();
    TitleCase.append(Upper.charAt(0));
    for (int i=1; i < element.length(); i++) {
      if (element.charAt(i - 1) == ' ')       TitleCase.append(Upper.charAt(i));
 else       TitleCase.append(Lower.charAt(i));
    }
    return new Element(TitleCase.toString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    int beginning_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[0]).asInt() - 1;
    int ending_index;
    if (attribute.getContext(1).split(""String_Node_Str"").length > 1)     ending_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[1]).asInt();
 else     ending_index=element.length();
    if (beginning_index < 0)     beginning_index=0;
    if (beginning_index > element.length())     beginning_index=element.length();
    if (ending_index > element.length())     ending_index=element.length();
    if (ending_index < beginning_index)     ending_index=beginning_index;
    return new Element(element.substring(beginning_index,ending_index)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    String padded=element;
    while (padded.length() < length) {
      padded=with + padded;
    }
    return new Element(padded).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    StringBuilder padded=new StringBuilder(element);
    while (padded.length() < length) {
      padded.append(with);
    }
    return new Element(padded.toString()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.abs(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() + aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() / aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() * aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() - aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() + aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() / aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() % aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() * aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() - aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sqrt(asDouble())).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.pow(asDouble(),aH.getDoubleFrom(attribute.getContext(1)))).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.asin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.acos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.atan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.cos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.tan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toDegrees(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toRadians(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.ceil(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.floor(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.round(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.attributes.size() > 0) {
    dB.echoDebug(attribute.getScriptEntry(),""String_Node_Str"" + attribute.attributes.toString() + ""String_Node_Str""+ attribute.getOrigin()+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
 else {
    return element;
  }
}",0.9979302953025097
10232,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && (attribute.startsWith(""String_Node_Str"",2) || attribute.startsWith(""String_Node_Str"",2))&& attribute.hasContext(2)) {
    Comparable com=new net.aufdemrand.denizen.scripts.commands.core.Comparable();
    String operator;
    if (attribute.getContext(1).startsWith(""String_Node_Str"")) {
      operator=attribute.getContext(1).substring(1);
      com.setNegativeLogic();
    }
 else     operator=attribute.getContext(1);
    Comparable.Operator comparableOperator=null;
    try {
      comparableOperator=Comparable.Operator.valueOf(operator.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").toUpperCase());
    }
 catch (    IllegalArgumentException e) {
    }
    if (comparableOperator != null) {
      com.setOperator(comparableOperator);
      com.setComparable(element);
      com.setComparedto(attribute.getContext(2));
      return new Element(com.determineOutcome()).getAttribute(attribute.fulfill(2));
    }
 else {
      dB.echoError(""String_Node_Str"" + operator + ""String_Node_Str"");
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Double.valueOf(element)).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Math.round(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    try {
      DecimalFormat d=new DecimalFormat(""String_Node_Str"");
      return new Element(d.format(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
    }
 catch (    NumberFormatException e) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dChunk.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dCuboid.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dEntity.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dInventory.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dItem.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dList.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dLocation.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dMaterial.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dNPC.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlayer.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlugin.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dScript.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,Duration.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dWorld.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,ScriptQueue.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.Escape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.unEscape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    String contains=attribute.getContext(1);
    if (contains.toLowerCase().startsWith(""String_Node_Str"")) {
      if (Pattern.compile(contains.substring((""String_Node_Str"").length()),Pattern.CASE_INSENSITIVE).matcher(element).matches())       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
 else     if (element.toLowerCase().contains(contains.toLowerCase()))     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase().endsWith(attribute.getContext(1).toLowerCase())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.matches(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && attribute.hasContext(2)) {
    String regex=attribute.getContext(1);
    Matcher m=Pattern.compile(regex).matcher(element);
    if (!m.matches()) {
      return Element.NULL.getAttribute(attribute.fulfill(2));
    }
    int group=new Element(attribute.getContext(2)).asInt();
    if (group < 0)     group=0;
    if (group > m.groupCount())     group=m.groupCount();
    return new Element(m.group(group)).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.getLastColors(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(element.length()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(!element.equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equalsIgnoreCase(""String_Node_Str"") && attribute.getContext(1).equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equalsIgnoreCase(""String_Node_Str"") || attribute.getContext(1).equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equalsIgnoreCase(""String_Node_Str"") != attribute.getContext(1).equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equals(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase().startsWith(attribute.getContext(1).toLowerCase())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.toLowerCase().indexOf(attribute.getContext(1).toLowerCase()) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.toLowerCase().lastIndexOf(attribute.getContext(1).toLowerCase()) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    int index=attribute.getIntContext(1) - 1;
    if (index < 0 || index >= element.length())     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return new Element(String.valueOf(element.charAt(index))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(element.lastIndexOf(delimiter) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(element.indexOf(delimiter) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(0,element.lastIndexOf(delimiter))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(0,element.indexOf(delimiter))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String replace=attribute.getContext(1);
    String replacement=""String_Node_Str"";
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"")) {
      if (attribute.hasContext(1)) {
        replacement=attribute.getContext(1);
        if (replacement == null)         replacement=""String_Node_Str"";
        attribute.fulfill(1);
      }
    }
    if (replace.startsWith(""String_Node_Str""))     return new Element(element.replaceAll(replace.substring(""String_Node_Str"".length()),replacement)).getAttribute(attribute);
    if (replace.startsWith(""String_Node_Str""))     return new Element(element.replaceFirst(replace.substring(""String_Node_Str"".length()),replacement)).getAttribute(attribute);
 else     return new Element(element.replaceAll(""String_Node_Str"" + Pattern.quote(replace),replacement)).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.startsWith(""String_Node_Str"",2)) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    Integer limit=(attribute.hasContext(2) ? attribute.getIntContext(2) : 1);
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1],limit))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string,limit))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1]))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    try {
      int decimal=element.indexOf('.');
      String shortelement;
      String afterdecimal;
      if (decimal != -1) {
        shortelement=element.substring(0,decimal);
        afterdecimal=element.substring(decimal);
      }
 else {
        shortelement=element;
        afterdecimal=""String_Node_Str"";
      }
      String intform=Long.valueOf(shortelement.replace(""String_Node_Str"",""String_Node_Str"")).toString();
      String negative=""String_Node_Str"";
      if (intform.startsWith(""String_Node_Str"")) {
        negative=""String_Node_Str"";
        intform=intform.substring(1,intform.length());
      }
      for (int i=intform.length() - 3; i > 0; i-=3) {
        intform=intform.substring(0,i) + ""String_Node_Str"" + intform.substring(i,intform.length());
      }
      return new Element(negative + intform + afterdecimal).getAttribute(attribute.fulfill(1));
    }
 catch (    Exception ex) {
      dB.echoError(ex);
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    FormatScriptContainer format=ScriptRegistry.getScriptContainer(attribute.getContext(1));
    if (format == null) {
      dB.echoError(""String_Node_Str"" + attribute.getContext(1) + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
 else {
      return new Element(format.getFormattedText(element,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getNPC() : null,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getPlayer() : null)).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dList list=new dList();
    for (int i=0; i < element.length(); i++) {
      list.add(String.valueOf(element.charAt(i)));
    }
    return list.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.stripColor(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(element.trim()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toUpperCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (element.length() == 0) {
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
    StringBuilder TitleCase=new StringBuilder(element.length());
    String Upper=element.toUpperCase();
    String Lower=element.toLowerCase();
    TitleCase.append(Upper.charAt(0));
    for (int i=1; i < element.length(); i++) {
      if (element.charAt(i - 1) == ' ')       TitleCase.append(Upper.charAt(i));
 else       TitleCase.append(Lower.charAt(i));
    }
    return new Element(TitleCase.toString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    int beginning_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[0]).asInt() - 1;
    int ending_index;
    if (attribute.getContext(1).split(""String_Node_Str"").length > 1)     ending_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[1]).asInt();
 else     ending_index=element.length();
    if (beginning_index < 0)     beginning_index=0;
    if (beginning_index > element.length())     beginning_index=element.length();
    if (ending_index > element.length())     ending_index=element.length();
    if (ending_index < beginning_index)     ending_index=beginning_index;
    return new Element(element.substring(beginning_index,ending_index)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    String padded=element;
    while (padded.length() < length) {
      padded=with + padded;
    }
    return new Element(padded).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    StringBuilder padded=new StringBuilder(element);
    while (padded.length() < length) {
      padded.append(with);
    }
    return new Element(padded.toString()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.abs(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() + aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() / aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() * aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() - aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() + aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() / aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() % aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() * aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() - aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sqrt(asDouble())).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.pow(asDouble(),aH.getDoubleFrom(attribute.getContext(1)))).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.asin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.acos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.atan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.cos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.tan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toDegrees(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toRadians(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.ceil(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.floor(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.round(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.attributes.size() > 0) {
    dB.echoDebug(attribute.getScriptEntry(),""String_Node_Str"" + attribute.attributes.toString() + ""String_Node_Str""+ attribute.getOrigin()+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
 else {
    return element;
  }
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && (attribute.startsWith(""String_Node_Str"",2) || attribute.startsWith(""String_Node_Str"",2))&& attribute.hasContext(2)) {
    Comparable com=new net.aufdemrand.denizen.scripts.commands.core.Comparable();
    String operator;
    if (attribute.getContext(1).startsWith(""String_Node_Str"")) {
      operator=attribute.getContext(1).substring(1);
      com.setNegativeLogic();
    }
 else     operator=attribute.getContext(1);
    Comparable.Operator comparableOperator=null;
    try {
      comparableOperator=Comparable.Operator.valueOf(operator.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").toUpperCase());
    }
 catch (    IllegalArgumentException e) {
    }
    if (comparableOperator != null) {
      com.setOperator(comparableOperator);
      com.setComparable(element);
      com.setComparedto(attribute.getContext(2));
      return new Element(com.determineOutcome()).getAttribute(attribute.fulfill(2));
    }
 else {
      dB.echoError(""String_Node_Str"" + operator + ""String_Node_Str"");
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Double.valueOf(element)).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Math.round(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    try {
      DecimalFormat d=new DecimalFormat(""String_Node_Str"");
      return new Element(d.format(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
    }
 catch (    NumberFormatException e) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dChunk.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dCuboid.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dEntity.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dInventory.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dItem.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dList.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dLocation.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dMaterial.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dNPC.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlayer.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlugin.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dScript.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,Duration.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dWorld.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,ScriptQueue.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.Escape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.unEscape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    String contains=attribute.getContext(1);
    if (contains.toLowerCase().startsWith(""String_Node_Str"")) {
      if (Pattern.compile(contains.substring((""String_Node_Str"").length()),Pattern.CASE_INSENSITIVE).matcher(element).matches())       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
 else     if (element.toLowerCase().contains(contains.toLowerCase()))     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase().endsWith(attribute.getContext(1).toLowerCase())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.matches(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && attribute.hasContext(2)) {
    String regex=attribute.getContext(1);
    Matcher m=Pattern.compile(regex).matcher(element);
    if (!m.matches()) {
      return Element.NULL.getAttribute(attribute.fulfill(2));
    }
    int group=new Element(attribute.getContext(2)).asInt();
    if (group < 0)     group=0;
    if (group > m.groupCount())     group=m.groupCount();
    return new Element(m.group(group)).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.getLastColors(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(element.length()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(!element.equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equalsIgnoreCase(""String_Node_Str"") && attribute.getContext(1).equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equalsIgnoreCase(""String_Node_Str"") || attribute.getContext(1).equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equalsIgnoreCase(""String_Node_Str"") != attribute.getContext(1).equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.equals(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase().startsWith(attribute.getContext(1).toLowerCase())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.toLowerCase().indexOf(attribute.getContext(1).toLowerCase()) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.toLowerCase().lastIndexOf(attribute.getContext(1).toLowerCase()) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    int index=attribute.getIntContext(1) - 1;
    if (index < 0 || index >= element.length())     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return new Element(String.valueOf(element.charAt(index))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(element.toLowerCase().lastIndexOf(delimiter.toLowerCase()) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(element.toLowerCase().indexOf(delimiter.toLowerCase()) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(0,element.toLowerCase().lastIndexOf(delimiter.toLowerCase()))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(0,element.toLowerCase().indexOf(delimiter.toLowerCase()))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String replace=attribute.getContext(1);
    String replacement=""String_Node_Str"";
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"")) {
      if (attribute.hasContext(1)) {
        replacement=attribute.getContext(1);
        if (replacement == null)         replacement=""String_Node_Str"";
        attribute.fulfill(1);
      }
    }
    if (replace.startsWith(""String_Node_Str""))     return new Element(element.replaceAll(replace.substring(""String_Node_Str"".length()),replacement)).getAttribute(attribute);
    if (replace.startsWith(""String_Node_Str""))     return new Element(element.replaceFirst(replace.substring(""String_Node_Str"".length()),replacement)).getAttribute(attribute);
 else     return new Element(element.replaceAll(""String_Node_Str"" + Pattern.quote(replace),replacement)).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.startsWith(""String_Node_Str"",2)) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    Integer limit=(attribute.hasContext(2) ? attribute.getIntContext(2) : 1);
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1],limit))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string,limit))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1]))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    try {
      int decimal=element.indexOf('.');
      String shortelement;
      String afterdecimal;
      if (decimal != -1) {
        shortelement=element.substring(0,decimal);
        afterdecimal=element.substring(decimal);
      }
 else {
        shortelement=element;
        afterdecimal=""String_Node_Str"";
      }
      String intform=Long.valueOf(shortelement.replace(""String_Node_Str"",""String_Node_Str"")).toString();
      String negative=""String_Node_Str"";
      if (intform.startsWith(""String_Node_Str"")) {
        negative=""String_Node_Str"";
        intform=intform.substring(1,intform.length());
      }
      for (int i=intform.length() - 3; i > 0; i-=3) {
        intform=intform.substring(0,i) + ""String_Node_Str"" + intform.substring(i,intform.length());
      }
      return new Element(negative + intform + afterdecimal).getAttribute(attribute.fulfill(1));
    }
 catch (    Exception ex) {
      dB.echoError(ex);
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    FormatScriptContainer format=ScriptRegistry.getScriptContainer(attribute.getContext(1));
    if (format == null) {
      dB.echoError(""String_Node_Str"" + attribute.getContext(1) + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
 else {
      return new Element(format.getFormattedText(element,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getNPC() : null,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getPlayer() : null)).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dList list=new dList();
    for (int i=0; i < element.length(); i++) {
      list.add(String.valueOf(element.charAt(i)));
    }
    return list.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.stripColor(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(element.trim()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toUpperCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (element.length() == 0) {
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
    StringBuilder TitleCase=new StringBuilder(element.length());
    String Upper=element.toUpperCase();
    String Lower=element.toLowerCase();
    TitleCase.append(Upper.charAt(0));
    for (int i=1; i < element.length(); i++) {
      if (element.charAt(i - 1) == ' ')       TitleCase.append(Upper.charAt(i));
 else       TitleCase.append(Lower.charAt(i));
    }
    return new Element(TitleCase.toString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    int beginning_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[0]).asInt() - 1;
    int ending_index;
    if (attribute.getContext(1).split(""String_Node_Str"").length > 1)     ending_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[1]).asInt();
 else     ending_index=element.length();
    if (beginning_index < 0)     beginning_index=0;
    if (beginning_index > element.length())     beginning_index=element.length();
    if (ending_index > element.length())     ending_index=element.length();
    if (ending_index < beginning_index)     ending_index=beginning_index;
    return new Element(element.substring(beginning_index,ending_index)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    String padded=element;
    while (padded.length() < length) {
      padded=with + padded;
    }
    return new Element(padded).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    StringBuilder padded=new StringBuilder(element);
    while (padded.length() < length) {
      padded.append(with);
    }
    return new Element(padded.toString()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.abs(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() + aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() / aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() * aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asLong() - aH.getLongFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() + aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() / aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() % aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() * aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() - aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sqrt(asDouble())).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.pow(asDouble(),aH.getDoubleFrom(attribute.getContext(1)))).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.asin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.acos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.atan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.cos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.tan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toDegrees(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toRadians(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.ceil(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.floor(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.round(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.attributes.size() > 0) {
    dB.echoDebug(attribute.getScriptEntry(),""String_Node_Str"" + attribute.attributes.toString() + ""String_Node_Str""+ attribute.getOrigin()+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
 else {
    return element;
  }
}",0.9979388273399832
10233,"public void makeUnique(String id){
  String title=inventory.getTitle();
  if (title == null || title.startsWith(""String_Node_Str""))   title=inventory.getType().getDefaultTitle();
  if (title.length() > 26)   title=title.substring(0,title.charAt(25) == '§' ? 25 : 26);
  String colors;
  while (true) {
    colors=Utilities.generateRandomColors(3);
    if (!InventoryScriptHelper.notableInventories.containsKey(title + colors)) {
      ItemStack[] contents=inventory.getContents();
      if (getInventoryType() == InventoryType.CHEST) {
        inventory=Bukkit.getServer().createInventory(null,inventory.getSize(),title + colors);
      }
 else {
        inventory=Bukkit.getServer().createInventory(null,inventory.getType(),title + colors);
      }
      inventory.setContents(contents);
      InventoryScriptHelper.notableInventories.put(title + colors,this);
      break;
    }
  }
  loadIdentifiers();
  NotableManager.saveAs(this,id);
}","public void makeUnique(String id){
  String title=inventory.getTitle();
  if (title == null || title.startsWith(""String_Node_Str""))   title=inventory.getType().getDefaultTitle();
  if (title.length() > 26)   title=title.substring(0,title.charAt(25) == '§' ? 25 : 26);
  String colors;
  while (true) {
    colors=Utilities.generateRandomColors(3);
    if (!InventoryScriptHelper.notableInventories.containsKey(title + colors)) {
      ItemStack[] contents=inventory.getContents();
      if (getInventoryType() == InventoryType.CHEST) {
        inventory=Bukkit.getServer().createInventory(null,inventory.getSize(),title + colors);
      }
 else {
        inventory=Bukkit.getServer().createInventory(null,inventory.getType(),title + colors);
      }
      inventory.setContents(contents);
      InventoryScriptHelper.notableInventories.put(title + colors,this);
      break;
    }
  }
  idType=null;
  idHolder=null;
  loadIdentifiers();
  NotableManager.saveAs(this,id);
}",0.9832810867293624
10234,"public dInventory getInventoryFrom(dPlayer player,dNPC npc){
  dInventory inventory=null;
  try {
    if (contains(""String_Node_Str"")) {
      if (InventoryType.valueOf(getString(""String_Node_Str"")) != null) {
        inventory=new dInventory(InventoryType.valueOf(getString(""String_Node_Str"")));
        inventory.setIdentifiers(""String_Node_Str"",getName());
      }
 else {
        dB.echoError(""String_Node_Str"");
      }
    }
    if (contains(""String_Node_Str"")) {
      if (inventory != null && !getInventoryType().name().equalsIgnoreCase(""String_Node_Str"")) {
        dB.echoError(""String_Node_Str"");
      }
 else {
        int size=aH.getIntegerFrom(getString(""String_Node_Str""));
        if (size == 0) {
          size=27;
          dB.echoError(""String_Node_Str"");
        }
        if (size % 9 != 0) {
          size=(int)Math.ceil(size / 9) * 9;
          dB.echoError(""String_Node_Str"" + size + ""String_Node_Str"");
        }
        if (size < 0) {
          size=size * -1;
          dB.echoError(""String_Node_Str"" + size + ""String_Node_Str"");
        }
        inventory=new dInventory(size,contains(""String_Node_Str"") ? TagManager.tag(player,npc,getString(""String_Node_Str"")) : ""String_Node_Str"");
        inventory.setIdentifiers(""String_Node_Str"",getName());
      }
    }
    if (contains(""String_Node_Str"")) {
      ItemStack[] finalItems=new ItemStack[getSize()];
      int itemsAdded=0;
      for (      String items : getStringList(""String_Node_Str"")) {
        items=TagManager.tag(player,npc,items);
        String[] itemsInLine=items.split(""String_Node_Str"");
        for (        String item : itemsInLine) {
          Matcher m=fromPattern.matcher(item);
          if (!m.matches()) {
            dB.echoError(""String_Node_Str"" + getName() + ""String_Node_Str"");
            return null;
          }
          if (contains(""String_Node_Str"" + m.group(2)) && dItem.matches(getString(""String_Node_Str"" + m.group(2)))) {
            finalItems[itemsAdded]=dItem.valueOf(TagManager.tag(player,npc,getString(""String_Node_Str"" + m.group(2)))).getItemStack();
          }
 else           if (dItem.matches(m.group(2))) {
            finalItems[itemsAdded]=dItem.valueOf(TagManager.tag(player,npc,m.group(2))).getItemStack();
          }
 else {
            finalItems[itemsAdded]=new ItemStack(Material.AIR);
            if (!m.group(2).trim().isEmpty()) {
              dB.echoError(""String_Node_Str"" + getName() + ""String_Node_Str""+ m.group(2)+ ""String_Node_Str"");
            }
          }
          itemsAdded++;
        }
      }
      if (inventory == null) {
        int size=finalItems.length % 9 == 0 ? finalItems.length : Math.round(finalItems.length / 9) * 9;
        inventory=new dInventory(size == 0 ? 9 : size,contains(""String_Node_Str"") ? TagManager.tag(player,npc,getString(""String_Node_Str"")) : ""String_Node_Str"");
      }
      inventory.setContents(finalItems);
    }
  }
 catch (  Exception e) {
    dB.echoError(""String_Node_Str"");
    dB.echoError(e);
    inventory=null;
  }
  return inventory;
}","public dInventory getInventoryFrom(dPlayer player,dNPC npc){
  dInventory inventory=null;
  try {
    if (contains(""String_Node_Str"")) {
      if (InventoryType.valueOf(getString(""String_Node_Str"").toUpperCase()) != null) {
        inventory=new dInventory(InventoryType.valueOf(getString(""String_Node_Str"").toUpperCase()));
        inventory.setIdentifiers(""String_Node_Str"",getName());
      }
 else {
        dB.echoError(""String_Node_Str"");
      }
    }
    if (contains(""String_Node_Str"")) {
      if (inventory != null && !getInventoryType().name().equalsIgnoreCase(""String_Node_Str"")) {
        dB.echoError(""String_Node_Str"");
      }
 else {
        int size=aH.getIntegerFrom(getString(""String_Node_Str""));
        if (size == 0) {
          size=27;
          dB.echoError(""String_Node_Str"");
        }
        if (size % 9 != 0) {
          size=(int)Math.ceil(size / 9) * 9;
          dB.echoError(""String_Node_Str"" + size + ""String_Node_Str"");
        }
        if (size < 0) {
          size=size * -1;
          dB.echoError(""String_Node_Str"" + size + ""String_Node_Str"");
        }
        inventory=new dInventory(size,contains(""String_Node_Str"") ? TagManager.tag(player,npc,getString(""String_Node_Str"")) : ""String_Node_Str"");
        inventory.setIdentifiers(""String_Node_Str"",getName());
      }
    }
    if (contains(""String_Node_Str"")) {
      ItemStack[] finalItems=new ItemStack[getSize()];
      int itemsAdded=0;
      for (      String items : getStringList(""String_Node_Str"")) {
        items=TagManager.tag(player,npc,items);
        String[] itemsInLine=items.split(""String_Node_Str"");
        for (        String item : itemsInLine) {
          Matcher m=fromPattern.matcher(item);
          if (!m.matches()) {
            dB.echoError(""String_Node_Str"" + getName() + ""String_Node_Str"");
            return null;
          }
          if (contains(""String_Node_Str"" + m.group(2)) && dItem.matches(getString(""String_Node_Str"" + m.group(2)))) {
            finalItems[itemsAdded]=dItem.valueOf(TagManager.tag(player,npc,getString(""String_Node_Str"" + m.group(2)))).getItemStack();
          }
 else           if (dItem.matches(m.group(2))) {
            finalItems[itemsAdded]=dItem.valueOf(TagManager.tag(player,npc,m.group(2))).getItemStack();
          }
 else {
            finalItems[itemsAdded]=new ItemStack(Material.AIR);
            if (!m.group(2).trim().isEmpty()) {
              dB.echoError(""String_Node_Str"" + getName() + ""String_Node_Str""+ m.group(2)+ ""String_Node_Str"");
            }
          }
          itemsAdded++;
        }
      }
      if (inventory == null) {
        int size=finalItems.length % 9 == 0 ? finalItems.length : Math.round(finalItems.length / 9) * 9;
        inventory=new dInventory(size == 0 ? 9 : size,contains(""String_Node_Str"") ? TagManager.tag(player,npc,getString(""String_Node_Str"")) : ""String_Node_Str"");
      }
      inventory.setContents(finalItems);
    }
  }
 catch (  Exception e) {
    dB.echoError(""String_Node_Str"");
    dB.echoError(e);
    inventory=null;
  }
  return inventory;
}",0.995420346745175
10235,"@EventHandler(priority=EventPriority.MONITOR) public void onHit(EntityDamageByEntityEvent event){
  if (event.getDamager() != npc.getBukkitEntity()) {
    if (event.getDamager() instanceof Projectile) {
      if (((Projectile)event.getDamager()).getShooter() != npc.getBukkitEntity())       return;
    }
 else     return;
  }
  dPlayer player=null;
  if (event.getEntity() instanceof Player)   player=dPlayer.mirrorBukkitPlayer((Player)event.getEntity());
  DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",player);
  DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"" + event.getEntityType().name(),player);
  if (event.getEntity() instanceof LivingEntity) {
    if (((LivingEntity)event.getEntity()).getHealth() - event.getDamage() <= 0) {
      DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",player);
      DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"" + event.getEntityType().name(),player);
    }
  }
}","@EventHandler(priority=EventPriority.MONITOR) public void onHit(EntityDamageByEntityEvent event){
  if (event.getDamager() != npc.getEntity()) {
    if (event.getDamager() instanceof Projectile) {
      if (((Projectile)event.getDamager()).getShooter() != npc.getEntity())       return;
    }
 else     return;
  }
  dPlayer player=null;
  if (event.getEntity() instanceof Player)   player=dPlayer.mirrorBukkitPlayer((Player)event.getEntity());
  DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",player);
  DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"" + event.getEntityType().name(),player);
  if (event.getEntity() instanceof LivingEntity) {
    if (((LivingEntity)event.getEntity()).getHealth() - event.getDamage() <= 0) {
      DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",player);
      DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"" + event.getEntityType().name(),player);
    }
  }
}",0.7018299246501615
10236,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Element stop=scriptEntry.getElement(""String_Node_Str"");
  Element next=scriptEntry.getElement(""String_Node_Str"");
  Element callback=scriptEntry.getElement(""String_Node_Str"");
  dList list=(dList)scriptEntry.getObject(""String_Node_Str"");
  if (stop != null && stop.asBoolean()) {
    dB.report(scriptEntry,getName(),stop.debug());
    boolean hasnext=false;
    for (int i=0; i < scriptEntry.getResidingQueue().getQueueSize(); i++) {
      ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(i);
      List<String> args=entry.getOriginalArguments();
      if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
        hasnext=true;
        break;
      }
    }
    if (hasnext) {
      while (scriptEntry.getResidingQueue().getQueueSize() > 0) {
        ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(0);
        List<String> args=entry.getOriginalArguments();
        if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
          scriptEntry.getResidingQueue().removeEntry(0);
          break;
        }
        scriptEntry.getResidingQueue().removeEntry(0);
      }
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
    return;
  }
 else   if (next != null && next.asBoolean()) {
    dB.report(scriptEntry,getName(),next.debug());
    boolean hasnext=false;
    for (int i=0; i < scriptEntry.getResidingQueue().getQueueSize(); i++) {
      ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(i);
      List<String> args=entry.getOriginalArguments();
      if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
        hasnext=true;
        break;
      }
    }
    if (hasnext) {
      while (scriptEntry.getResidingQueue().getQueueSize() > 0) {
        ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(0);
        List<String> args=entry.getOriginalArguments();
        if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
          break;
        }
        scriptEntry.getResidingQueue().removeEntry(0);
      }
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
    return;
  }
 else   if (callback != null && callback.asBoolean()) {
    if (scriptEntry.getOwner() != null && (scriptEntry.getOwner().getCommandName().equalsIgnoreCase(""String_Node_Str"") || scriptEntry.getOwner().getBracedSet() == null || scriptEntry.getOwner().getBracedSet().size() == 0 || scriptEntry.getBracedSet().get(""String_Node_Str"").get(scriptEntry.getBracedSet().get(""String_Node_Str"").size() - 1) != scriptEntry)) {
      ForeachData data=(ForeachData)scriptEntry.getOwner().getData();
      data.index++;
      if (data.index <= data.list.size()) {
        dB.echoDebug(scriptEntry,dB.DebugElement.Header,""String_Node_Str"" + data.index);
        scriptEntry.getResidingQueue().addDefinition(""String_Node_Str"",String.valueOf(data.index));
        scriptEntry.getResidingQueue().addDefinition(""String_Node_Str"",String.valueOf(data.list.get(data.index - 1)));
        ArrayList<ScriptEntry> bracedCommands=BracedCommand.getBracedCommands(scriptEntry.getOwner()).get(""String_Node_Str"");
        ScriptEntry callbackEntry=null;
        try {
          callbackEntry=new ScriptEntry(""String_Node_Str"",new String[]{""String_Node_Str""},(scriptEntry.getScript() != null ? scriptEntry.getScript().getContainer() : null));
        }
 catch (        ScriptEntryCreationException e) {
          dB.echoError(e);
        }
        callbackEntry.setOwner(scriptEntry.getOwner());
        bracedCommands.add(callbackEntry);
        for (int i=0; i < bracedCommands.size(); i++) {
          bracedCommands.get(i).setInstant(true);
        }
        scriptEntry.getResidingQueue().injectEntries(bracedCommands,0);
      }
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
 else {
    ArrayList<ScriptEntry> bracedCommandsList=((LinkedHashMap<String,ArrayList<ScriptEntry>>)scriptEntry.getObject(""String_Node_Str"")).get(""String_Node_Str"");
    if (bracedCommandsList == null || bracedCommandsList.isEmpty()) {
      dB.echoError(""String_Node_Str"");
      return;
    }
    dB.report(scriptEntry,getName(),list.debug());
    int target=list.size();
    if (target <= 0) {
      dB.echoDebug(scriptEntry,""String_Node_Str"");
      return;
    }
    ForeachData datum=new ForeachData();
    datum.list=list;
    datum.index=1;
    scriptEntry.setData(datum);
    ScriptEntry callbackEntry=null;
    try {
      callbackEntry=new ScriptEntry(""String_Node_Str"",new String[]{""String_Node_Str""},(scriptEntry.getScript() != null ? scriptEntry.getScript().getContainer() : null));
    }
 catch (    ScriptEntryCreationException e) {
      dB.echoError(e);
    }
    callbackEntry.setOwner(scriptEntry);
    bracedCommandsList.add(callbackEntry);
    scriptEntry.getResidingQueue().addDefinition(""String_Node_Str"",list.get(0));
    scriptEntry.getResidingQueue().addDefinition(""String_Node_Str"",""String_Node_Str"");
    for (int i=0; i < bracedCommandsList.size(); i++) {
      bracedCommandsList.get(i).setInstant(true);
    }
    scriptEntry.getResidingQueue().injectEntries(bracedCommandsList,0);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Element stop=scriptEntry.getElement(""String_Node_Str"");
  Element next=scriptEntry.getElement(""String_Node_Str"");
  Element callback=scriptEntry.getElement(""String_Node_Str"");
  dList list=(dList)scriptEntry.getObject(""String_Node_Str"");
  if (stop != null && stop.asBoolean()) {
    dB.report(scriptEntry,getName(),stop.debug());
    boolean hasnext=false;
    for (int i=0; i < scriptEntry.getResidingQueue().getQueueSize(); i++) {
      ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(i);
      List<String> args=entry.getOriginalArguments();
      if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
        hasnext=true;
        break;
      }
    }
    if (hasnext) {
      while (scriptEntry.getResidingQueue().getQueueSize() > 0) {
        ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(0);
        List<String> args=entry.getOriginalArguments();
        if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
          scriptEntry.getResidingQueue().removeEntry(0);
          break;
        }
        scriptEntry.getResidingQueue().removeEntry(0);
      }
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
    return;
  }
 else   if (next != null && next.asBoolean()) {
    dB.report(scriptEntry,getName(),next.debug());
    boolean hasnext=false;
    for (int i=0; i < scriptEntry.getResidingQueue().getQueueSize(); i++) {
      ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(i);
      List<String> args=entry.getOriginalArguments();
      if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
        hasnext=true;
        break;
      }
    }
    if (hasnext) {
      while (scriptEntry.getResidingQueue().getQueueSize() > 0) {
        ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(0);
        List<String> args=entry.getOriginalArguments();
        if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
          break;
        }
        scriptEntry.getResidingQueue().removeEntry(0);
      }
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
    return;
  }
 else   if (callback != null && callback.asBoolean()) {
    if (scriptEntry.getOwner() != null && (scriptEntry.getOwner().getCommandName().equalsIgnoreCase(""String_Node_Str"") || scriptEntry.getOwner().getBracedSet() == null || scriptEntry.getOwner().getBracedSet().size() == 0 || scriptEntry.getBracedSet().get(""String_Node_Str"").get(scriptEntry.getBracedSet().get(""String_Node_Str"").size() - 1) != scriptEntry)) {
      ForeachData data=(ForeachData)scriptEntry.getOwner().getData();
      data.index++;
      if (data.index <= data.list.size()) {
        dB.echoDebug(scriptEntry,dB.DebugElement.Header,""String_Node_Str"" + data.index);
        scriptEntry.getResidingQueue().addDefinition(""String_Node_Str"",String.valueOf(data.index));
        scriptEntry.getResidingQueue().addDefinition(""String_Node_Str"",String.valueOf(data.list.get(data.index - 1)));
        ArrayList<ScriptEntry> bracedCommands=BracedCommand.getBracedCommands(scriptEntry.getOwner()).get(""String_Node_Str"");
        ScriptEntry callbackEntry=null;
        try {
          callbackEntry=new ScriptEntry(""String_Node_Str"",new String[]{""String_Node_Str""},(scriptEntry.getScript() != null ? scriptEntry.getScript().getContainer() : null));
          callbackEntry.copyFrom(scriptEntry);
        }
 catch (        ScriptEntryCreationException e) {
          dB.echoError(e);
        }
        callbackEntry.setOwner(scriptEntry.getOwner());
        bracedCommands.add(callbackEntry);
        for (int i=0; i < bracedCommands.size(); i++) {
          bracedCommands.get(i).setInstant(true);
        }
        scriptEntry.getResidingQueue().injectEntries(bracedCommands,0);
      }
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
 else {
    ArrayList<ScriptEntry> bracedCommandsList=((LinkedHashMap<String,ArrayList<ScriptEntry>>)scriptEntry.getObject(""String_Node_Str"")).get(""String_Node_Str"");
    if (bracedCommandsList == null || bracedCommandsList.isEmpty()) {
      dB.echoError(""String_Node_Str"");
      return;
    }
    dB.report(scriptEntry,getName(),list.debug());
    int target=list.size();
    if (target <= 0) {
      dB.echoDebug(scriptEntry,""String_Node_Str"");
      return;
    }
    ForeachData datum=new ForeachData();
    datum.list=list;
    datum.index=1;
    scriptEntry.setData(datum);
    ScriptEntry callbackEntry=null;
    try {
      callbackEntry=new ScriptEntry(""String_Node_Str"",new String[]{""String_Node_Str""},(scriptEntry.getScript() != null ? scriptEntry.getScript().getContainer() : null));
      callbackEntry.copyFrom(scriptEntry);
    }
 catch (    ScriptEntryCreationException e) {
      dB.echoError(e);
    }
    callbackEntry.setOwner(scriptEntry);
    bracedCommandsList.add(callbackEntry);
    scriptEntry.getResidingQueue().addDefinition(""String_Node_Str"",list.get(0));
    scriptEntry.getResidingQueue().addDefinition(""String_Node_Str"",""String_Node_Str"");
    for (int i=0; i < bracedCommandsList.size(); i++) {
      bracedCommandsList.get(i).setInstant(true);
    }
    scriptEntry.getResidingQueue().injectEntries(bracedCommandsList,0);
  }
}",0.9918522542096686
10237,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Element stop=scriptEntry.getElement(""String_Node_Str"");
  Element next=scriptEntry.getElement(""String_Node_Str"");
  Element callback=scriptEntry.getElement(""String_Node_Str"");
  Element quantity=scriptEntry.getElement(""String_Node_Str"");
  if (stop != null && stop.asBoolean()) {
    dB.report(scriptEntry,getName(),stop.debug());
    boolean hasnext=false;
    for (int i=0; i < scriptEntry.getResidingQueue().getQueueSize(); i++) {
      ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(i);
      List<String> args=entry.getOriginalArguments();
      if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
        hasnext=true;
        break;
      }
    }
    if (hasnext) {
      while (scriptEntry.getResidingQueue().getQueueSize() > 0) {
        ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(0);
        List<String> args=entry.getOriginalArguments();
        if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
          scriptEntry.getResidingQueue().removeEntry(0);
          break;
        }
        scriptEntry.getResidingQueue().removeEntry(0);
      }
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
    return;
  }
 else   if (next != null && next.asBoolean()) {
    dB.report(scriptEntry,getName(),next.debug());
    boolean hasnext=false;
    for (int i=0; i < scriptEntry.getResidingQueue().getQueueSize(); i++) {
      ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(i);
      List<String> args=entry.getOriginalArguments();
      if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
        hasnext=true;
        break;
      }
    }
    if (hasnext) {
      while (scriptEntry.getResidingQueue().getQueueSize() > 0) {
        ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(0);
        List<String> args=entry.getOriginalArguments();
        if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
          break;
        }
        scriptEntry.getResidingQueue().removeEntry(0);
      }
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
    return;
  }
 else   if (callback != null && callback.asBoolean()) {
    if (scriptEntry.getOwner() != null && (scriptEntry.getOwner().getCommandName().equalsIgnoreCase(""String_Node_Str"") || scriptEntry.getOwner().getBracedSet() == null || scriptEntry.getOwner().getBracedSet().size() == 0 || scriptEntry.getBracedSet().get(""String_Node_Str"").get(scriptEntry.getBracedSet().get(""String_Node_Str"").size() - 1) != scriptEntry)) {
      RepeatData data=(RepeatData)scriptEntry.getOwner().getData();
      data.index++;
      if (data.index <= data.target) {
        dB.echoDebug(scriptEntry,dB.DebugElement.Header,""String_Node_Str"" + data.index);
        scriptEntry.getResidingQueue().addDefinition(""String_Node_Str"",String.valueOf(data.index));
        ArrayList<ScriptEntry> bracedCommands=BracedCommand.getBracedCommands(scriptEntry.getOwner()).get(""String_Node_Str"");
        ScriptEntry callbackEntry=null;
        try {
          callbackEntry=new ScriptEntry(""String_Node_Str"",new String[]{""String_Node_Str""},(scriptEntry.getScript() != null ? scriptEntry.getScript().getContainer() : null));
        }
 catch (        ScriptEntryCreationException e) {
          dB.echoError(e);
        }
        callbackEntry.setOwner(scriptEntry.getOwner());
        bracedCommands.add(callbackEntry);
        for (int i=0; i < bracedCommands.size(); i++) {
          bracedCommands.get(i).setInstant(true);
        }
        scriptEntry.getResidingQueue().injectEntries(bracedCommands,0);
      }
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
 else {
    ArrayList<ScriptEntry> bracedCommandsList=((LinkedHashMap<String,ArrayList<ScriptEntry>>)scriptEntry.getObject(""String_Node_Str"")).get(""String_Node_Str"");
    if (bracedCommandsList == null || bracedCommandsList.isEmpty()) {
      dB.echoError(""String_Node_Str"");
      return;
    }
    dB.report(scriptEntry,getName(),quantity.debug());
    int target=quantity.asInt();
    if (target <= 0) {
      dB.echoDebug(scriptEntry,""String_Node_Str"");
      return;
    }
    RepeatData datum=new RepeatData();
    datum.target=target;
    datum.index=1;
    scriptEntry.setData(datum);
    ScriptEntry callbackEntry=null;
    try {
      callbackEntry=new ScriptEntry(""String_Node_Str"",new String[]{""String_Node_Str""},(scriptEntry.getScript() != null ? scriptEntry.getScript().getContainer() : null));
    }
 catch (    ScriptEntryCreationException e) {
      dB.echoError(e);
    }
    callbackEntry.setOwner(scriptEntry);
    bracedCommandsList.add(callbackEntry);
    scriptEntry.getResidingQueue().addDefinition(""String_Node_Str"",""String_Node_Str"");
    for (int i=0; i < bracedCommandsList.size(); i++) {
      bracedCommandsList.get(i).setInstant(true);
    }
    scriptEntry.getResidingQueue().injectEntries(bracedCommandsList,0);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Element stop=scriptEntry.getElement(""String_Node_Str"");
  Element next=scriptEntry.getElement(""String_Node_Str"");
  Element callback=scriptEntry.getElement(""String_Node_Str"");
  Element quantity=scriptEntry.getElement(""String_Node_Str"");
  if (stop != null && stop.asBoolean()) {
    dB.report(scriptEntry,getName(),stop.debug());
    boolean hasnext=false;
    for (int i=0; i < scriptEntry.getResidingQueue().getQueueSize(); i++) {
      ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(i);
      List<String> args=entry.getOriginalArguments();
      if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
        hasnext=true;
        break;
      }
    }
    if (hasnext) {
      while (scriptEntry.getResidingQueue().getQueueSize() > 0) {
        ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(0);
        List<String> args=entry.getOriginalArguments();
        if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
          scriptEntry.getResidingQueue().removeEntry(0);
          break;
        }
        scriptEntry.getResidingQueue().removeEntry(0);
      }
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
    return;
  }
 else   if (next != null && next.asBoolean()) {
    dB.report(scriptEntry,getName(),next.debug());
    boolean hasnext=false;
    for (int i=0; i < scriptEntry.getResidingQueue().getQueueSize(); i++) {
      ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(i);
      List<String> args=entry.getOriginalArguments();
      if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
        hasnext=true;
        break;
      }
    }
    if (hasnext) {
      while (scriptEntry.getResidingQueue().getQueueSize() > 0) {
        ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(0);
        List<String> args=entry.getOriginalArguments();
        if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
          break;
        }
        scriptEntry.getResidingQueue().removeEntry(0);
      }
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
    return;
  }
 else   if (callback != null && callback.asBoolean()) {
    if (scriptEntry.getOwner() != null && (scriptEntry.getOwner().getCommandName().equalsIgnoreCase(""String_Node_Str"") || scriptEntry.getOwner().getBracedSet() == null || scriptEntry.getOwner().getBracedSet().size() == 0 || scriptEntry.getBracedSet().get(""String_Node_Str"").get(scriptEntry.getBracedSet().get(""String_Node_Str"").size() - 1) != scriptEntry)) {
      RepeatData data=(RepeatData)scriptEntry.getOwner().getData();
      data.index++;
      if (data.index <= data.target) {
        dB.echoDebug(scriptEntry,dB.DebugElement.Header,""String_Node_Str"" + data.index);
        scriptEntry.getResidingQueue().addDefinition(""String_Node_Str"",String.valueOf(data.index));
        ArrayList<ScriptEntry> bracedCommands=BracedCommand.getBracedCommands(scriptEntry.getOwner()).get(""String_Node_Str"");
        ScriptEntry callbackEntry=null;
        try {
          callbackEntry=new ScriptEntry(""String_Node_Str"",new String[]{""String_Node_Str""},(scriptEntry.getScript() != null ? scriptEntry.getScript().getContainer() : null));
          callbackEntry.copyFrom(scriptEntry);
        }
 catch (        ScriptEntryCreationException e) {
          dB.echoError(e);
        }
        callbackEntry.setOwner(scriptEntry.getOwner());
        bracedCommands.add(callbackEntry);
        for (int i=0; i < bracedCommands.size(); i++) {
          bracedCommands.get(i).setInstant(true);
        }
        scriptEntry.getResidingQueue().injectEntries(bracedCommands,0);
      }
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
 else {
    ArrayList<ScriptEntry> bracedCommandsList=((LinkedHashMap<String,ArrayList<ScriptEntry>>)scriptEntry.getObject(""String_Node_Str"")).get(""String_Node_Str"");
    if (bracedCommandsList == null || bracedCommandsList.isEmpty()) {
      dB.echoError(""String_Node_Str"");
      return;
    }
    dB.report(scriptEntry,getName(),quantity.debug());
    int target=quantity.asInt();
    if (target <= 0) {
      dB.echoDebug(scriptEntry,""String_Node_Str"");
      return;
    }
    RepeatData datum=new RepeatData();
    datum.target=target;
    datum.index=1;
    scriptEntry.setData(datum);
    ScriptEntry callbackEntry=null;
    try {
      callbackEntry=new ScriptEntry(""String_Node_Str"",new String[]{""String_Node_Str""},(scriptEntry.getScript() != null ? scriptEntry.getScript().getContainer() : null));
      callbackEntry.copyFrom(scriptEntry);
    }
 catch (    ScriptEntryCreationException e) {
      dB.echoError(e);
    }
    callbackEntry.setOwner(scriptEntry);
    bracedCommandsList.add(callbackEntry);
    scriptEntry.getResidingQueue().addDefinition(""String_Node_Str"",""String_Node_Str"");
    for (int i=0; i < bracedCommandsList.size(); i++) {
      bracedCommandsList.get(i).setInstant(true);
    }
    scriptEntry.getResidingQueue().injectEntries(bracedCommandsList,0);
  }
}",0.9915524685564108
10238,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Element stop=scriptEntry.getElement(""String_Node_Str"");
  Element next=scriptEntry.getElement(""String_Node_Str"");
  Element callback=scriptEntry.getElement(""String_Node_Str"");
  if (stop != null && stop.asBoolean()) {
    dB.report(scriptEntry,getName(),stop.debug());
    boolean hasnext=false;
    for (int i=0; i < scriptEntry.getResidingQueue().getQueueSize(); i++) {
      ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(i);
      List<String> args=entry.getOriginalArguments();
      if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
        hasnext=true;
        break;
      }
    }
    if (hasnext) {
      while (scriptEntry.getResidingQueue().getQueueSize() > 0) {
        ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(0);
        List<String> args=entry.getOriginalArguments();
        if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
          scriptEntry.getResidingQueue().removeEntry(0);
          break;
        }
        scriptEntry.getResidingQueue().removeEntry(0);
      }
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
    return;
  }
 else   if (next != null && next.asBoolean()) {
    dB.report(scriptEntry,getName(),next.debug());
    boolean hasnext=false;
    for (int i=0; i < scriptEntry.getResidingQueue().getQueueSize(); i++) {
      ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(i);
      List<String> args=entry.getOriginalArguments();
      if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
        hasnext=true;
        break;
      }
    }
    if (hasnext) {
      while (scriptEntry.getResidingQueue().getQueueSize() > 0) {
        ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(0);
        List<String> args=entry.getOriginalArguments();
        if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
          break;
        }
        scriptEntry.getResidingQueue().removeEntry(0);
      }
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
    return;
  }
 else   if (callback != null && callback.asBoolean()) {
    if (scriptEntry.getOwner() != null && (scriptEntry.getOwner().getCommandName().equalsIgnoreCase(""String_Node_Str"") || scriptEntry.getOwner().getBracedSet() == null || scriptEntry.getOwner().getBracedSet().size() == 0 || scriptEntry.getBracedSet().get(""String_Node_Str"").get(scriptEntry.getBracedSet().get(""String_Node_Str"").size() - 1) != scriptEntry)) {
      WhileData data=(WhileData)scriptEntry.getOwner().getData();
      data.index++;
      int max=Settings.WhileMaxLoops();
      if (data.index > max && max != 0)       return;
      if (TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),data.value,false,scriptEntry).equalsIgnoreCase(""String_Node_Str"")) {
        dB.echoDebug(scriptEntry,dB.DebugElement.Header,""String_Node_Str"" + data.index);
        scriptEntry.getResidingQueue().addDefinition(""String_Node_Str"",String.valueOf(data.index));
        ArrayList<ScriptEntry> bracedCommands=BracedCommand.getBracedCommands(scriptEntry.getOwner()).get(""String_Node_Str"");
        ScriptEntry callbackEntry=null;
        try {
          callbackEntry=new ScriptEntry(""String_Node_Str"",new String[]{""String_Node_Str""},(scriptEntry.getScript() != null ? scriptEntry.getScript().getContainer() : null));
        }
 catch (        ScriptEntryCreationException e) {
          dB.echoError(e);
        }
        callbackEntry.setOwner(scriptEntry.getOwner());
        bracedCommands.add(callbackEntry);
        for (int i=0; i < bracedCommands.size(); i++) {
          bracedCommands.get(i).setInstant(true);
        }
        scriptEntry.getResidingQueue().injectEntries(bracedCommands,0);
      }
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
 else {
    Element value=scriptEntry.getElement(""String_Node_Str"");
    ArrayList<ScriptEntry> bracedCommandsList=((LinkedHashMap<String,ArrayList<ScriptEntry>>)scriptEntry.getObject(""String_Node_Str"")).get(""String_Node_Str"");
    if (bracedCommandsList == null || bracedCommandsList.isEmpty()) {
      dB.echoError(""String_Node_Str"");
      return;
    }
    dB.report(scriptEntry,getName(),value.debug());
    if (!TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),value.asString(),false,scriptEntry).equalsIgnoreCase(""String_Node_Str""))     return;
    WhileData datum=new WhileData();
    datum.index=1;
    datum.value=value.asString();
    scriptEntry.setData(datum);
    ScriptEntry callbackEntry=null;
    try {
      callbackEntry=new ScriptEntry(""String_Node_Str"",new String[]{""String_Node_Str""},(scriptEntry.getScript() != null ? scriptEntry.getScript().getContainer() : null));
    }
 catch (    ScriptEntryCreationException e) {
      dB.echoError(e);
    }
    callbackEntry.setOwner(scriptEntry);
    bracedCommandsList.add(callbackEntry);
    scriptEntry.getResidingQueue().addDefinition(""String_Node_Str"",""String_Node_Str"");
    for (int i=0; i < bracedCommandsList.size(); i++) {
      bracedCommandsList.get(i).setInstant(true);
    }
    scriptEntry.getResidingQueue().injectEntries(bracedCommandsList,0);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Element stop=scriptEntry.getElement(""String_Node_Str"");
  Element next=scriptEntry.getElement(""String_Node_Str"");
  Element callback=scriptEntry.getElement(""String_Node_Str"");
  if (stop != null && stop.asBoolean()) {
    dB.report(scriptEntry,getName(),stop.debug());
    boolean hasnext=false;
    for (int i=0; i < scriptEntry.getResidingQueue().getQueueSize(); i++) {
      ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(i);
      List<String> args=entry.getOriginalArguments();
      if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
        hasnext=true;
        break;
      }
    }
    if (hasnext) {
      while (scriptEntry.getResidingQueue().getQueueSize() > 0) {
        ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(0);
        List<String> args=entry.getOriginalArguments();
        if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
          scriptEntry.getResidingQueue().removeEntry(0);
          break;
        }
        scriptEntry.getResidingQueue().removeEntry(0);
      }
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
    return;
  }
 else   if (next != null && next.asBoolean()) {
    dB.report(scriptEntry,getName(),next.debug());
    boolean hasnext=false;
    for (int i=0; i < scriptEntry.getResidingQueue().getQueueSize(); i++) {
      ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(i);
      List<String> args=entry.getOriginalArguments();
      if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
        hasnext=true;
        break;
      }
    }
    if (hasnext) {
      while (scriptEntry.getResidingQueue().getQueueSize() > 0) {
        ScriptEntry entry=scriptEntry.getResidingQueue().getEntry(0);
        List<String> args=entry.getOriginalArguments();
        if (entry.getCommandName().equalsIgnoreCase(""String_Node_Str"") && args.size() > 0 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
          break;
        }
        scriptEntry.getResidingQueue().removeEntry(0);
      }
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
    return;
  }
 else   if (callback != null && callback.asBoolean()) {
    if (scriptEntry.getOwner() != null && (scriptEntry.getOwner().getCommandName().equalsIgnoreCase(""String_Node_Str"") || scriptEntry.getOwner().getBracedSet() == null || scriptEntry.getOwner().getBracedSet().size() == 0 || scriptEntry.getBracedSet().get(""String_Node_Str"").get(scriptEntry.getBracedSet().get(""String_Node_Str"").size() - 1) != scriptEntry)) {
      WhileData data=(WhileData)scriptEntry.getOwner().getData();
      data.index++;
      int max=Settings.WhileMaxLoops();
      if (data.index > max && max != 0)       return;
      if (TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),data.value,false,scriptEntry).equalsIgnoreCase(""String_Node_Str"")) {
        dB.echoDebug(scriptEntry,dB.DebugElement.Header,""String_Node_Str"" + data.index);
        scriptEntry.getResidingQueue().addDefinition(""String_Node_Str"",String.valueOf(data.index));
        ArrayList<ScriptEntry> bracedCommands=BracedCommand.getBracedCommands(scriptEntry.getOwner()).get(""String_Node_Str"");
        ScriptEntry callbackEntry=null;
        try {
          callbackEntry=new ScriptEntry(""String_Node_Str"",new String[]{""String_Node_Str""},(scriptEntry.getScript() != null ? scriptEntry.getScript().getContainer() : null));
          callbackEntry.copyFrom(scriptEntry);
        }
 catch (        ScriptEntryCreationException e) {
          dB.echoError(e);
        }
        callbackEntry.setOwner(scriptEntry.getOwner());
        bracedCommands.add(callbackEntry);
        for (int i=0; i < bracedCommands.size(); i++) {
          bracedCommands.get(i).setInstant(true);
        }
        scriptEntry.getResidingQueue().injectEntries(bracedCommands,0);
      }
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
 else {
    Element value=scriptEntry.getElement(""String_Node_Str"");
    ArrayList<ScriptEntry> bracedCommandsList=((LinkedHashMap<String,ArrayList<ScriptEntry>>)scriptEntry.getObject(""String_Node_Str"")).get(""String_Node_Str"");
    if (bracedCommandsList == null || bracedCommandsList.isEmpty()) {
      dB.echoError(""String_Node_Str"");
      return;
    }
    dB.report(scriptEntry,getName(),value.debug());
    if (!TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),value.asString(),false,scriptEntry).equalsIgnoreCase(""String_Node_Str""))     return;
    WhileData datum=new WhileData();
    datum.index=1;
    datum.value=value.asString();
    scriptEntry.setData(datum);
    ScriptEntry callbackEntry=null;
    try {
      callbackEntry=new ScriptEntry(""String_Node_Str"",new String[]{""String_Node_Str""},(scriptEntry.getScript() != null ? scriptEntry.getScript().getContainer() : null));
      callbackEntry.copyFrom(scriptEntry);
    }
 catch (    ScriptEntryCreationException e) {
      dB.echoError(e);
    }
    callbackEntry.setOwner(scriptEntry);
    bracedCommandsList.add(callbackEntry);
    scriptEntry.getResidingQueue().addDefinition(""String_Node_Str"",""String_Node_Str"");
    for (int i=0; i < bracedCommandsList.size(); i++) {
      bracedCommandsList.get(i).setInstant(true);
    }
    scriptEntry.getResidingQueue().injectEntries(bracedCommandsList,0);
  }
}",0.9918904307082356
10239,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  List<Comparable> comparables=new ArrayList<Comparable>();
  comparables.add(new Comparable());
  boolean buildingComparables=true;
  TreeMap<Integer,ArrayList<String>> thenOutcome=new TreeMap<Integer,ArrayList<String>>();
  TreeMap<Integer,ArrayList<String>> elseOutcome=new TreeMap<Integer,ArrayList<String>>();
  boolean insideElse=false;
  boolean usedOperator=false;
  boolean newCommand=false;
  int bracketsEntered=0;
  List<aH.Argument> OriginalArguments=aH.interpret(scriptEntry.getOriginalArguments());
  List<aH.Argument> Arguments=aH.interpret(scriptEntry.getArguments());
  for (int i=0; i < Arguments.size(); i++) {
    aH.Argument arg=Arguments.get(i);
    aH.Argument originalArg=OriginalArguments.get(i);
    if (buildingComparables) {
      if (arg.startsWith(""String_Node_Str"")) {
        comparables.get(comparables.size() - 1).setNegativeLogic();
        if (arg.getValue().length() == 1)         continue;
        if (arg.startsWith(""String_Node_Str""))         arg.replaceValue(""String_Node_Str"");
 else         arg.replaceValue(arg.getValue().substring(1));
      }
      if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
      if (arg.matchesEnum(Comparable.Bridge.values())) {
        comparables.add(new Comparable());
        comparables.get(comparables.size() - 1).bridge=Comparable.Bridge.valueOf(arg.getValue().toUpperCase());
      }
 else       if (arg.matchesEnum(Comparable.Operator.values())) {
        comparables.get(comparables.size() - 1).operator=Comparable.Operator.valueOf(arg.getValue().toUpperCase());
        usedOperator=true;
      }
 else       if (comparables.get(comparables.size() - 1).comparable == null) {
        comparables.get(comparables.size() - 1).setComparable(arg.getValue());
      }
 else       if (!usedOperator && arg.matches(""String_Node_Str"")) {
        buildingComparables=false;
      }
 else       if (!usedOperator && denizen.getCommandRegistry().get(arg.getValue().replace(""String_Node_Str"",""String_Node_Str"")) != null) {
        buildingComparables=false;
      }
 else {
        comparables.get(comparables.size() - 1).setComparedto(arg.getValue());
        usedOperator=false;
      }
    }
    if (!buildingComparables) {
      if (arg.matches(""String_Node_Str"") && bracketsEntered < 2) {
        newCommand=true;
      }
 else       if (!insideElse) {
        if (arg.matches(""String_Node_Str"") && bracketsEntered == 0) {
          insideElse=true;
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered++;
          if (bracketsEntered > 1) {
            thenOutcome.get(thenOutcome.lastKey()).add(originalArg.raw_value);
          }
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered--;
          if (bracketsEntered > 0) {
            thenOutcome.get(thenOutcome.lastKey()).add(originalArg.raw_value);
          }
        }
 else         if (newCommand || thenOutcome.size() == 0) {
          thenOutcome.put(thenOutcome.size(),new ArrayList<String>());
          thenOutcome.get(thenOutcome.lastKey()).add(originalArg.raw_value);
          newCommand=false;
        }
 else {
          thenOutcome.get(thenOutcome.lastKey()).add(originalArg.raw_value);
        }
      }
 else       if (insideElse) {
        if (arg.matches(""String_Node_Str"")) {
          bracketsEntered++;
          if (bracketsEntered > 1) {
            elseOutcome.get(elseOutcome.lastKey()).add(originalArg.raw_value);
          }
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered--;
          if (bracketsEntered > 0) {
            elseOutcome.get(elseOutcome.lastKey()).add(originalArg.raw_value);
          }
        }
 else         if (newCommand || elseOutcome.size() == 0) {
          newCommand=false;
          if (arg.matches(""String_Node_Str"") && elseOutcome.size() == 0) {
            bracketsEntered++;
          }
          elseOutcome.put(elseOutcome.size(),new ArrayList<String>());
          elseOutcome.get(elseOutcome.lastKey()).add(originalArg.raw_value);
        }
 else {
          elseOutcome.get(elseOutcome.lastKey()).add(originalArg.raw_value);
        }
      }
    }
  }
  scriptEntry.addObject(""String_Node_Str"",comparables).addObject(""String_Node_Str"",thenOutcome).addObject(""String_Node_Str"",elseOutcome);
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  List<Comparable> comparables=new ArrayList<Comparable>();
  comparables.add(new Comparable());
  boolean buildingComparables=true;
  TreeMap<Integer,ArrayList<String>> thenOutcome=new TreeMap<Integer,ArrayList<String>>();
  TreeMap<Integer,ArrayList<String>> elseOutcome=new TreeMap<Integer,ArrayList<String>>();
  boolean insideElse=false;
  boolean usedOperator=false;
  boolean newCommand=false;
  int bracketsEntered=0;
  List<aH.Argument> OriginalArguments=aH.interpret(scriptEntry.getOriginalArguments());
  List<aH.Argument> Arguments=aH.interpret(scriptEntry.getArguments());
  for (int i=0; i < Arguments.size(); i++) {
    aH.Argument arg=Arguments.get(i);
    aH.Argument originalArg=OriginalArguments.get(i);
    if (buildingComparables) {
      if (arg.startsWith(""String_Node_Str"")) {
        comparables.get(comparables.size() - 1).setNegativeLogic();
        if (arg.getValue().length() == 1)         continue;
        if (arg.startsWith(""String_Node_Str""))         arg.replaceValue(""String_Node_Str"");
 else         arg.replaceValue(arg.getValue().substring(1));
      }
      if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
      if (arg.matchesEnum(Comparable.Bridge.values())) {
        comparables.add(new Comparable());
        comparables.get(comparables.size() - 1).bridge=Comparable.Bridge.valueOf(arg.getValue().toUpperCase());
      }
 else       if (arg.matchesEnum(Comparable.Operator.values())) {
        comparables.get(comparables.size() - 1).operator=Comparable.Operator.valueOf(arg.getValue().toUpperCase());
        usedOperator=true;
      }
 else       if (comparables.get(comparables.size() - 1).comparable == null) {
        comparables.get(comparables.size() - 1).setComparable(arg.getValue());
      }
 else       if (!usedOperator && arg.matches(""String_Node_Str"")) {
        buildingComparables=false;
      }
 else       if (!usedOperator && denizen.getCommandRegistry().get(arg.getValue().replace(""String_Node_Str"",""String_Node_Str"")) != null) {
        buildingComparables=false;
      }
 else {
        comparables.get(comparables.size() - 1).setComparedto(arg.getValue());
        usedOperator=false;
      }
    }
    if (!buildingComparables) {
      if (arg.matches(""String_Node_Str"") && bracketsEntered < 2) {
        newCommand=true;
      }
 else       if (!insideElse) {
        if (arg.matches(""String_Node_Str"") && bracketsEntered == 0) {
          insideElse=true;
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered++;
          if (bracketsEntered > 1) {
            thenOutcome.get(thenOutcome.lastKey()).add(originalArg.raw_value);
          }
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered--;
          if (bracketsEntered > 0) {
            thenOutcome.get(thenOutcome.lastKey()).add(originalArg.raw_value);
          }
        }
 else         if (newCommand || thenOutcome.size() == 0) {
          thenOutcome.put(thenOutcome.size(),new ArrayList<String>());
          thenOutcome.get(thenOutcome.lastKey()).add(originalArg.raw_value);
          newCommand=false;
        }
 else {
          thenOutcome.get(thenOutcome.lastKey()).add(originalArg.raw_value);
        }
      }
 else       if (insideElse) {
        if (arg.matches(""String_Node_Str"")) {
          bracketsEntered++;
          if (bracketsEntered > 1) {
            elseOutcome.get(elseOutcome.lastKey()).add(originalArg.raw_value);
          }
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered--;
          if (bracketsEntered > 0) {
            elseOutcome.get(elseOutcome.lastKey()).add(originalArg.raw_value);
          }
        }
 else         if (newCommand || elseOutcome.size() == 0) {
          newCommand=false;
          if (arg.matches(""String_Node_Str"") && elseOutcome.size() == 0 && bracketsEntered < 1) {
            bracketsEntered++;
          }
          elseOutcome.put(elseOutcome.size(),new ArrayList<String>());
          elseOutcome.get(elseOutcome.lastKey()).add(originalArg.raw_value);
        }
 else {
          elseOutcome.get(elseOutcome.lastKey()).add(originalArg.raw_value);
        }
      }
    }
  }
  scriptEntry.addObject(""String_Node_Str"",comparables).addObject(""String_Node_Str"",thenOutcome).addObject(""String_Node_Str"",elseOutcome);
}",0.9977220956719818
10240,"@Override public ScriptEntry clone() throws CloneNotSupportedException {
  return (ScriptEntry)super.clone();
}","@Override public ScriptEntry clone() throws CloneNotSupportedException {
  ScriptEntry se=(ScriptEntry)super.clone();
  se.objects=new HashMap<String,Object>();
  return se;
}",0.7412587412587412
10241,"public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(2)) {
      int qty=1;
      int attribs=2;
      String search_string=attribute.getContext(2);
      boolean strict=false;
      if (search_string.toLowerCase().startsWith(""String_Node_Str"")) {
        strict=true;
        search_string=search_string.substring(7);
      }
      if (attribute.hasContext(3) && attribute.getAttribute(3).startsWith(""String_Node_Str"") && aH.matchesInteger(attribute.getContext(3))) {
        qty=attribute.getIntContext(3);
        attribs=3;
      }
      int found_items=0;
      if (strict) {
        for (        ItemStack item : getContents()) {
          if (item != null && item.hasItemMeta() && item.getItemMeta().hasDisplayName() && item.getItemMeta().getDisplayName().equalsIgnoreCase(search_string)) {
            found_items+=item.getAmount();
            if (found_items >= qty)             break;
          }
        }
      }
 else {
        for (        ItemStack item : getContents()) {
          if (item != null && item.hasItemMeta() && item.getItemMeta().hasDisplayName() && item.getItemMeta().getDisplayName().toLowerCase().contains(search_string.toLowerCase())) {
            found_items+=item.getAmount();
            if (found_items >= qty)             break;
          }
        }
      }
      return (found_items >= qty ? Element.TRUE.getAttribute(attribute.fulfill(attribs)) : Element.FALSE.getAttribute(attribute.fulfill(attribs)));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(2)) {
      int qty=1;
      int attribs=2;
      String search_string=attribute.getContext(2);
      boolean strict=false;
      if (search_string.toLowerCase().startsWith(""String_Node_Str"")) {
        strict=true;
        search_string=search_string.substring(7);
      }
      dList lore=dList.valueOf(search_string);
      if (attribute.hasContext(3) && attribute.getAttribute(3).startsWith(""String_Node_Str"") && aH.matchesInteger(attribute.getContext(3))) {
        qty=attribute.getIntContext(3);
        attribs=3;
      }
      int found_items=0;
      if (strict) {
        strict_items:         for (        ItemStack item : getContents()) {
          if (item != null && item.hasItemMeta() && item.getItemMeta().hasLore()) {
            List<String> item_lore=item.getItemMeta().getLore();
            for (int i=0; i < item_lore.size(); i++) {
              if (lore.get(i).equalsIgnoreCase(item_lore.get(i))) {
                found_items++;
                if (found_items >= qty)                 break strict_items;
              }
            }
          }
        }
      }
 else {
        items:         for (        ItemStack item : getContents()) {
          if (item != null && item.hasItemMeta() && item.getItemMeta().hasLore()) {
            List<String> item_lore=item.getItemMeta().getLore();
            int loreCount=0;
            lines:             for (            String line : lore) {
              for (              String item_line : item_lore) {
                if (item_line.toLowerCase().contains(line.toLowerCase())) {
                  loreCount++;
                  continue lines;
                }
              }
            }
            if (loreCount == lore.size()) {
              found_items++;
              if (found_items >= qty)               break;
            }
          }
        }
      }
      return (found_items >= qty ? Element.TRUE.getAttribute(attribute.fulfill(attribs)) : Element.FALSE.getAttribute(attribute.fulfill(attribs)));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(2)) {
      int qty=1;
      int attribs=2;
      dMaterial material=dMaterial.valueOf(attribute.getContext(2));
      if (attribute.hasContext(3) && attribute.getAttribute(3).startsWith(""String_Node_Str"") && aH.matchesInteger(attribute.getContext(3))) {
        qty=attribute.getIntContext(3);
        attribs=3;
      }
      int found_items=0;
      for (      ItemStack item : getContents()) {
        if (item != null && item.getType() == material.getMaterial()) {
          found_items++;
          if (found_items >= qty)           break;
        }
      }
      return (found_items >= qty ? Element.TRUE.getAttribute(attribute.fulfill(attribs)) : Element.FALSE.getAttribute(attribute.fulfill(attribs)));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && dItem.matches(attribute.getContext(1))) {
      int qty=1;
      int attribs=1;
      if (attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2) && aH.matchesInteger(attribute.getContext(2))) {
        qty=attribute.getIntContext(2);
        attribs=2;
      }
      return new Element(getInventory().containsAtLeast(dItem.valueOf(attribute.getContext(1),attribute.getScriptEntry().getPlayer(),attribute.getScriptEntry().getNPC()).getItemStack(),qty)).getAttribute(attribute.fulfill(attribs));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && dItem.matches(attribute.getContext(1))) {
      int qty=1;
      int attribs=1;
      if (attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2) && aH.matchesInteger(attribute.getContext(2))) {
        qty=attribute.getIntContext(2);
        attribs=2;
      }
      return new Element(getInventory().containsAtLeast(dItem.valueOf(attribute.getContext(1),attribute.getScriptEntry().getPlayer(),attribute.getScriptEntry().getNPC()).getItemStack(),qty)).getAttribute(attribute.fulfill(attribs));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(2) && dMaterial.matches(attribute.getContext(2))) {
    dMaterial material=dMaterial.valueOf(attribute.getContext(2));
    int slot=-1;
    for (int i=0; i < inventory.getSize(); i++) {
      if (inventory.getItem(i) != null && inventory.getItem(i).getType() == material.getMaterial()) {
        slot=i + 1;
        break;
      }
    }
    return new Element(slot).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && dItem.matches(attribute.getContext(1))) {
    dItem item=dItem.valueOf(attribute.getContext(1),attribute.getScriptEntry().getPlayer(),attribute.getScriptEntry().getNPC());
    item.setAmount(1);
    int slot=-1;
    for (int i=0; i < inventory.getSize(); i++) {
      if (inventory.getItem(i) != null) {
        dItem compare_to=new dItem(inventory.getItem(i).clone());
        compare_to.setAmount(1);
        if (item.identify().equalsIgnoreCase(compare_to.identify())) {
          slot=i + 1;
          break;
        }
      }
    }
    return new Element(slot).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(idType).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dLocation location=getLocation();
    if (location != null)     return location.getAttribute(attribute.fulfill(1));
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   if (attribute.hasContext(1) && dItem.matches(attribute.getContext(1)))   return new Element(count(dItem.valueOf(attribute.getContext(1),attribute.getScriptEntry().getPlayer(),attribute.getScriptEntry().getNPC()).getItemStack(),false)).getAttribute(attribute.fulfill(1));
 else   return new Element(count(null,false)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   if (attribute.hasContext(1) && dItem.matches(attribute.getContext(1)))   return new Element(count(dItem.valueOf(attribute.getContext(1),attribute.getScriptEntry().getPlayer(),attribute.getScriptEntry().getNPC()).getItemStack(),true)).getAttribute(attribute.fulfill(1));
 else   return new Element(count(null,true)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && aH.matchesInteger(attribute.getContext(1))) {
    int slot=new Element(attribute.getContext(1)).asInt() - 1;
    if (slot < 0)     slot=0;
    if (slot > getInventory().getSize() - 1)     slot=getInventory().getSize() - 1;
    return new dItem(getInventory().getItem(slot)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getInventory().getType().name()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dList equipment=getEquipment();
    if (equipment == null)     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return equipment.getAttribute(attribute.fulfill(1));
  }
  if (inventory instanceof CraftingInventory) {
    CraftingInventory craftingInventory=(CraftingInventory)inventory;
    if (attribute.startsWith(""String_Node_Str"")) {
      dList recipeList=new dList();
      for (      ItemStack item : craftingInventory.getMatrix()) {
        if (item != null)         recipeList.add(new dItem(item).identify());
 else         recipeList.add(new dItem(Material.AIR).identify());
      }
      return recipeList.getAttribute(attribute.fulfill(1));
    }
    if (attribute.startsWith(""String_Node_Str"")) {
      if (craftingInventory.getResult() != null)       return new dItem(craftingInventory.getResult()).getAttribute(attribute.fulfill(1));
 else       return Element.NULL.getAttribute(attribute.fulfill(1));
    }
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new Element(identify()).getAttribute(attribute);
}","public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(2)) {
      int qty=1;
      int attribs=2;
      String search_string=attribute.getContext(2);
      boolean strict=false;
      if (search_string.toLowerCase().startsWith(""String_Node_Str"") && search_string.length() > 7) {
        strict=true;
        search_string=search_string.substring(7);
      }
      if (attribute.getAttribute(3).startsWith(""String_Node_Str"") && attribute.hasContext(3) && aH.matchesInteger(attribute.getContext(3))) {
        qty=attribute.getIntContext(3);
        attribs=3;
      }
      int found_items=0;
      if (strict) {
        for (        ItemStack item : getContents()) {
          if (item != null && item.hasItemMeta() && item.getItemMeta().hasDisplayName() && item.getItemMeta().getDisplayName().equalsIgnoreCase(search_string)) {
            found_items+=item.getAmount();
            if (found_items >= qty)             break;
          }
        }
      }
 else {
        for (        ItemStack item : getContents()) {
          if (item != null && item.hasItemMeta() && item.getItemMeta().hasDisplayName() && item.getItemMeta().getDisplayName().toLowerCase().contains(search_string.toLowerCase())) {
            found_items+=item.getAmount();
            if (found_items >= qty)             break;
          }
        }
      }
      return (found_items >= qty ? Element.TRUE.getAttribute(attribute.fulfill(attribs)) : Element.FALSE.getAttribute(attribute.fulfill(attribs)));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(2)) {
      int qty=1;
      int attribs=2;
      String search_string=attribute.getContext(2);
      boolean strict=false;
      if (search_string.toLowerCase().startsWith(""String_Node_Str"")) {
        strict=true;
        search_string=search_string.substring(7);
      }
      dList lore=dList.valueOf(search_string);
      if (attribute.getAttribute(3).startsWith(""String_Node_Str"") && attribute.hasContext(3) && aH.matchesInteger(attribute.getContext(3))) {
        qty=attribute.getIntContext(3);
        attribs=3;
      }
      int found_items=0;
      if (strict) {
        strict_items:         for (        ItemStack item : getContents()) {
          if (item != null && item.hasItemMeta() && item.getItemMeta().hasLore()) {
            List<String> item_lore=item.getItemMeta().getLore();
            if (lore.size() != item_lore.size())             continue;
            for (int i=0; i < item_lore.size(); i++) {
              if (lore.get(i).equalsIgnoreCase(item_lore.get(i))) {
                if (i == lore.size()) {
                  found_items+=item.getAmount();
                  if (found_items >= qty)                   break strict_items;
                }
              }
 else               continue strict_items;
            }
          }
        }
      }
 else {
        items:         for (        ItemStack item : getContents()) {
          if (item != null && item.hasItemMeta() && item.getItemMeta().hasLore()) {
            List<String> item_lore=item.getItemMeta().getLore();
            int loreCount=0;
            lines:             for (            String line : lore) {
              for (              String item_line : item_lore) {
                if (item_line.toLowerCase().contains(line.toLowerCase())) {
                  loreCount++;
                  continue lines;
                }
              }
            }
            if (loreCount == lore.size()) {
              found_items+=item.getAmount();
              if (found_items >= qty)               break;
            }
          }
        }
      }
      return (found_items >= qty ? Element.TRUE.getAttribute(attribute.fulfill(attribs)) : Element.FALSE.getAttribute(attribute.fulfill(attribs)));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(2)) {
      int qty=1;
      int attribs=2;
      dMaterial material=dMaterial.valueOf(attribute.getContext(2));
      if (attribute.getAttribute(3).startsWith(""String_Node_Str"") && attribute.hasContext(3) && aH.matchesInteger(attribute.getContext(3))) {
        qty=attribute.getIntContext(3);
        attribs=3;
      }
      int found_items=0;
      for (      ItemStack item : getContents()) {
        if (item != null && item.getType() == material.getMaterial()) {
          found_items+=item.getAmount();
          if (found_items >= qty)           break;
        }
      }
      return (found_items >= qty ? Element.TRUE.getAttribute(attribute.fulfill(attribs)) : Element.FALSE.getAttribute(attribute.fulfill(attribs)));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && dItem.matches(attribute.getContext(1))) {
      int qty=1;
      int attribs=1;
      if (attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2) && aH.matchesInteger(attribute.getContext(2))) {
        qty=attribute.getIntContext(2);
        attribs=2;
      }
      return new Element(getInventory().containsAtLeast(dItem.valueOf(attribute.getContext(1),attribute.getScriptEntry().getPlayer(),attribute.getScriptEntry().getNPC()).getItemStack(),qty)).getAttribute(attribute.fulfill(attribs));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && dItem.matches(attribute.getContext(1))) {
      int qty=1;
      int attribs=1;
      if (attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2) && aH.matchesInteger(attribute.getContext(2))) {
        qty=attribute.getIntContext(2);
        attribs=2;
      }
      return new Element(getInventory().containsAtLeast(dItem.valueOf(attribute.getContext(1),attribute.getScriptEntry().getPlayer(),attribute.getScriptEntry().getNPC()).getItemStack(),qty)).getAttribute(attribute.fulfill(attribs));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(2) && dMaterial.matches(attribute.getContext(2))) {
    dMaterial material=dMaterial.valueOf(attribute.getContext(2));
    int slot=-1;
    for (int i=0; i < inventory.getSize(); i++) {
      if (inventory.getItem(i) != null && inventory.getItem(i).getType() == material.getMaterial()) {
        slot=i + 1;
        break;
      }
    }
    return new Element(slot).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && dItem.matches(attribute.getContext(1))) {
    dItem item=dItem.valueOf(attribute.getContext(1),attribute.getScriptEntry().getPlayer(),attribute.getScriptEntry().getNPC());
    item.setAmount(1);
    int slot=-1;
    for (int i=0; i < inventory.getSize(); i++) {
      if (inventory.getItem(i) != null) {
        dItem compare_to=new dItem(inventory.getItem(i).clone());
        compare_to.setAmount(1);
        if (item.identify().equalsIgnoreCase(compare_to.identify())) {
          slot=i + 1;
          break;
        }
      }
    }
    return new Element(slot).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(idType).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dLocation location=getLocation();
    if (location != null)     return location.getAttribute(attribute.fulfill(1));
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   if (attribute.hasContext(1) && dItem.matches(attribute.getContext(1)))   return new Element(count(dItem.valueOf(attribute.getContext(1),attribute.getScriptEntry().getPlayer(),attribute.getScriptEntry().getNPC()).getItemStack(),false)).getAttribute(attribute.fulfill(1));
 else   return new Element(count(null,false)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   if (attribute.hasContext(1) && dItem.matches(attribute.getContext(1)))   return new Element(count(dItem.valueOf(attribute.getContext(1),attribute.getScriptEntry().getPlayer(),attribute.getScriptEntry().getNPC()).getItemStack(),true)).getAttribute(attribute.fulfill(1));
 else   return new Element(count(null,true)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && aH.matchesInteger(attribute.getContext(1))) {
    int slot=new Element(attribute.getContext(1)).asInt() - 1;
    if (slot < 0)     slot=0;
    if (slot > getInventory().getSize() - 1)     slot=getInventory().getSize() - 1;
    return new dItem(getInventory().getItem(slot)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getInventory().getType().name()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dList equipment=getEquipment();
    if (equipment == null)     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return equipment.getAttribute(attribute.fulfill(1));
  }
  if (inventory instanceof CraftingInventory) {
    CraftingInventory craftingInventory=(CraftingInventory)inventory;
    if (attribute.startsWith(""String_Node_Str"")) {
      dList recipeList=new dList();
      for (      ItemStack item : craftingInventory.getMatrix()) {
        if (item != null)         recipeList.add(new dItem(item).identify());
 else         recipeList.add(new dItem(Material.AIR).identify());
      }
      return recipeList.getAttribute(attribute.fulfill(1));
    }
    if (attribute.startsWith(""String_Node_Str"")) {
      if (craftingInventory.getResult() != null)       return new dItem(craftingInventory.getResult()).getAttribute(attribute.fulfill(1));
 else       return Element.NULL.getAttribute(attribute.fulfill(1));
    }
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new Element(identify()).getAttribute(attribute);
}",0.8908778317152104
10242,"/** 
 * Gets a Location Object from a string form of id,x,y,z,world or a dScript argument (location:)x,y,z,world. If including an Id, this location will persist and can be recalled at any time.
 * @param string  the string or dScript argument String
 * @return  a Location, or null if incorrectly formatted
 */
@Fetchable(""String_Node_Str"") public static dCuboid valueOf(String string){
  if (string == null)   return null;
  String[] positions=string.replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  if (positions.length > 1 && dLocation.matches(positions[0]) && dLocation.matches(positions[1])) {
    if (positions.length % 2 != 0) {
      dB.echoError(""String_Node_Str"" + string + ""String_Node_Str"");
      return null;
    }
    dCuboid toReturn=new dCuboid();
    for (int i=0; i < positions.length; i+=2) {
      dLocation pos_1=dLocation.valueOf(positions[i]);
      dLocation pos_2=dLocation.valueOf(positions[i + 1]);
      if (pos_1 == null || pos_2 == null) {
        dB.echoError(""String_Node_Str"" + string + ""String_Node_Str"");
        return null;
      }
      toReturn.addPair(pos_1,pos_2);
    }
    if (toReturn.pairs.size() > 0)     return toReturn;
  }
  Matcher m;
  m=item_by_saved.matcher(string);
  if (m.matches() && NotableManager.isType(m.group(2),dCuboid.class))   return (dCuboid)NotableManager.getSavedObject(m.group(2));
  dB.echoError(""String_Node_Str"" + string);
  return null;
}","/** 
 * Gets a Location Object from a string form of id,x,y,z,world or a dScript argument (location:)x,y,z,world. If including an Id, this location will persist and can be recalled at any time.
 * @param string  the string or dScript argument String
 * @return  a Location, or null if incorrectly formatted
 */
@Fetchable(""String_Node_Str"") public static dCuboid valueOf(String string){
  if (string == null)   return null;
  dList positions=dList.valueOf(string.replace(""String_Node_Str"",""String_Node_Str""));
  if (positions.size() > 1 && dLocation.matches(positions.get(0)) && dLocation.matches(positions.get(1))) {
    if (positions.size() % 2 != 0) {
      dB.echoError(""String_Node_Str"" + string + ""String_Node_Str"");
      return null;
    }
    dCuboid toReturn=new dCuboid();
    for (int i=0; i < positions.size(); i+=2) {
      dLocation pos_1=dLocation.valueOf(positions.get(i));
      dLocation pos_2=dLocation.valueOf(positions.get(i + 1));
      if (pos_1 == null || pos_2 == null) {
        dB.echoError(""String_Node_Str"" + string + ""String_Node_Str"");
        return null;
      }
      toReturn.addPair(pos_1,pos_2);
    }
    if (toReturn.pairs.size() > 0)     return toReturn;
  }
  Matcher m;
  m=item_by_saved.matcher(string);
  if (m.matches() && NotableManager.isType(m.group(2),dCuboid.class))   return (dCuboid)NotableManager.getSavedObject(m.group(2));
  dB.echoError(""String_Node_Str"" + string);
  return null;
}",0.944695652173913
10243,"@Override public void adjust(Mechanism mechanism){
  Element value=mechanism.getValue();
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireObject(dScript.class)) {
    getAssignmentTrait().setAssignment(value.asType(dScript.class).getName(),null);
  }
  if (mechanism.matches(""String_Node_Str"")) {
    getAssignmentTrait().removeAssignment(null);
  }
  if (mechanism.matches(""String_Node_Str"")) {
    getNicknameTrait().setNickname(value.asString());
  }
  if (mechanism.matches(""String_Node_Str"")) {
    getNicknameTrait().removeNickname();
  }
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireObject(dEntity.class)) {
    getCitizen().setBukkitEntityType(value.asType(dEntity.class).getEntityType());
  }
  if (mechanism.matches(""String_Node_Str"")) {
    getCitizen().setName(value.asString().length() > 16 ? value.asString().substring(0,16) : value.asString());
  }
  if (mechanism.matches(""String_Node_Str"")) {
    if (mechanism.requireObject(""String_Node_Str"",dLocation.class))     getCitizen().spawn(value.asType(dLocation.class));
 else     getCitizen().spawn(getCitizen().getStoredLocation());
  }
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireFloat()) {
    getCitizen().getNavigator().getDefaultParameters().speedModifier(mechanism.getValue().asFloat());
  }
  if (mechanism.matches(""String_Node_Str"")) {
    getCitizen().despawn(DespawnReason.PLUGIN);
  }
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireBoolean()) {
    getCitizen().setProtected(value.asBoolean());
  }
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireBoolean()) {
    getLookCloseTrait().lookClose(value.asBoolean());
  }
  if (mechanism.matches(""String_Node_Str"")) {
    if (mechanism.getValue().toString().equalsIgnoreCase(""String_Node_Str"")) {
      getNavigator().getLocalParameters().clearExaminers();
      getNavigator().getLocalParameters().examiner(new MinecraftBlockExaminer());
    }
 else     if (mechanism.getValue().toString().equalsIgnoreCase(""String_Node_Str"")) {
      getNavigator().getLocalParameters().clearExaminers();
      getNavigator().getLocalParameters().examiner(new FlyingBlockExaminer());
    }
 else     if (mechanism.getValue().toString().equalsIgnoreCase(""String_Node_Str"")) {
      getNavigator().getLocalParameters().clearExaminers();
      getNavigator().getLocalParameters().examiner(new PathBlockExaminer(this,null));
    }
  }
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireDouble()) {
    getNavigator().getDefaultParameters().distanceMargin(mechanism.getValue().asDouble());
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    property.adjust(mechanism);
    if (mechanism.fulfilled())     break;
  }
  if (!mechanism.fulfilled()) {
    Adjustable entity=new dEntity(getEntity());
    entity.adjust(mechanism);
  }
}","@Override public void adjust(Mechanism mechanism){
  Element value=mechanism.getValue();
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireObject(dScript.class)) {
    getAssignmentTrait().setAssignment(value.asType(dScript.class).getName(),null);
  }
  if (mechanism.matches(""String_Node_Str"")) {
    getAssignmentTrait().removeAssignment(null);
  }
  if (mechanism.matches(""String_Node_Str"")) {
    getNicknameTrait().setNickname(value.asString());
  }
  if (mechanism.matches(""String_Node_Str"")) {
    getNicknameTrait().removeNickname();
  }
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireObject(dEntity.class)) {
    getCitizen().setBukkitEntityType(value.asType(dEntity.class).getEntityType());
  }
  if (mechanism.matches(""String_Node_Str"")) {
    getCitizen().setName(value.asString().length() > 16 ? value.asString().substring(0,16) : value.asString());
  }
  if (mechanism.matches(""String_Node_Str"")) {
    if (mechanism.requireObject(""String_Node_Str"",dLocation.class))     getCitizen().spawn(value.asType(dLocation.class));
 else     getCitizen().spawn(getCitizen().getStoredLocation());
  }
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireFloat()) {
    getCitizen().getNavigator().getDefaultParameters().speedModifier(mechanism.getValue().asFloat());
  }
  if (mechanism.matches(""String_Node_Str"")) {
    getCitizen().despawn(DespawnReason.PLUGIN);
  }
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireBoolean()) {
    getCitizen().setProtected(value.asBoolean());
  }
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireBoolean()) {
    getLookCloseTrait().lookClose(value.asBoolean());
  }
  if (mechanism.matches(""String_Node_Str"")) {
    if (mechanism.getValue().toString().equalsIgnoreCase(""String_Node_Str"")) {
      getNavigator().getLocalParameters().clearExaminers();
      getNavigator().getLocalParameters().examiner(new MinecraftBlockExaminer());
    }
 else     if (mechanism.getValue().toString().equalsIgnoreCase(""String_Node_Str"")) {
      getNavigator().getLocalParameters().clearExaminers();
      getNavigator().getLocalParameters().examiner(new FlyingBlockExaminer());
    }
 else     if (mechanism.getValue().toString().equalsIgnoreCase(""String_Node_Str"")) {
      getNavigator().getLocalParameters().clearExaminers();
      getNavigator().getLocalParameters().examiner(new PathBlockExaminer(this,null));
    }
  }
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireDouble()) {
    getNavigator().getDefaultParameters().distanceMargin(mechanism.getValue().asDouble());
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    property.adjust(mechanism);
    if (mechanism.fulfilled())     break;
  }
  if (!mechanism.fulfilled()) {
    if (isSpawned())     new dEntity(getEntity()).adjust(mechanism);
 else     mechanism.reportInvalid();
  }
}",0.9734544184421936
10244,"public TriggerContext trigger(AbstractTrigger triggerClass,dPlayer player,Map<String,dObject> context){
  String determination=DetermineCommand.DETERMINE_NONE;
  String trigger_type=triggerClass.getName();
  if (!DenizenAPI.getCurrentInstance().getTriggerRegistry().checkCooldown(npc,player,triggerClass,getCooldownType(trigger_type)))   return new TriggerContext(false);
  if (EngageCommand.getEngaged(npc)) {
    context.put(""String_Node_Str"",new Element(trigger_type));
    if (dNPCRegistry.getDenizen(npc).action(""String_Node_Str"",player,context).equalsIgnoreCase(""String_Node_Str"")) {
    }
 else     return new TriggerContext(false);
  }
  DenizenAPI.getCurrentInstance().getTriggerRegistry().setCooldown(npc,player,triggerClass,getCooldownDuration(trigger_type),getCooldownType(trigger_type));
  determination=dNPCRegistry.getDenizen(npc).action(trigger_type,player,context);
  return new TriggerContext(determination,true);
}","public TriggerContext trigger(AbstractTrigger triggerClass,dPlayer player,Map<String,dObject> context){
  String trigger_type=triggerClass.getName();
  if (!DenizenAPI.getCurrentInstance().getTriggerRegistry().checkCooldown(npc,player,triggerClass,getCooldownType(trigger_type)))   return new TriggerContext(false);
  if (context == null)   context=new HashMap<String,dObject>();
  if (EngageCommand.getEngaged(npc)) {
    context.put(""String_Node_Str"",new Element(trigger_type));
    if (dNPCRegistry.getDenizen(npc).action(""String_Node_Str"",player,context).equalsIgnoreCase(""String_Node_Str"")) {
    }
 else     return new TriggerContext(false);
  }
  DenizenAPI.getCurrentInstance().getTriggerRegistry().setCooldown(npc,player,triggerClass,getCooldownDuration(trigger_type),getCooldownType(trigger_type));
  String determination=dNPCRegistry.getDenizen(npc).action(trigger_type,player,context);
  return new TriggerContext(determination,true);
}",0.932482721956406
10245,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(this.add(0,1,0)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(this.add(0,-1,0)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dLocation(getWorld(),getBlockX(),getBlockY(),getBlockZ()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dLocation(getWorld().getHighestBlockAt(this).getLocation().add(0,-1,0)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getBlock().getState() instanceof InventoryHolder).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return Element.HandleNull(identify() + ""String_Node_Str"",getInventory(),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return dMaterial.getMaterialFrom(getBlock().getType(),getBlock().getData()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element((getBlock().getData() & 0x8) > 0).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getBlock().getState() instanceof Sign) {
      dList toReturn=new dList();
      for (      String line : ((Sign)getBlock().getState()).getLines())       toReturn.add(EscapeTags.Escape(line));
      return toReturn.getAttribute(attribute.fulfill(2));
    }
 else     return ""String_Node_Str"";
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getBlock().getState() instanceof Sign) {
      return new dList(Arrays.asList(((Sign)getBlock().getState()).getLines())).getAttribute(attribute.fulfill(1));
    }
 else     return ""String_Node_Str"";
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(""String_Node_Str"" + getBlockX() + ""String_Node_Str""+ getBlockY()+ ""String_Node_Str""+ getBlockZ()+ ""String_Node_Str""+ getWorld().getName()+ ""String_Node_Str"").getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getBlockX() + ""String_Node_Str"" + getBlockY()+ ""String_Node_Str""+ getBlockZ()+ ""String_Node_Str""+ getWorld().getName()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    double xzLen=Math.cos((getPitch() % 360) * (Math.PI / 180));
    double nx=xzLen * Math.sin(-getYaw() * (Math.PI / 180));
    double ny=Math.sin(getPitch() * (Math.PI / 180));
    double nz=xzLen * Math.cos(getYaw() * (Math.PI / 180));
    return new dLocation(getWorld(),nx,-ny,nz).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && dLocation.matches(attribute.getContext(1))) {
      dLocation target=dLocation.valueOf(attribute.getContext(1));
      attribute=attribute.fulfill(1);
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Rotation.normalizeYaw(Rotation.getYaw(target.toVector().subtract(this.toVector()).normalize()))).getAttribute(attribute.fulfill(1));
 else       return new Element(Rotation.getCardinal(Rotation.getYaw(target.toVector().subtract(this.toVector()).normalize()))).getAttribute(attribute);
    }
 else {
      return new Element(Rotation.getCardinal(getYaw())).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1)) {
      int degrees=45;
      int attributePos=1;
      if (attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2) && aH.matchesInteger(attribute.getContext(2))) {
        degrees=attribute.getIntContext(2);
        attributePos++;
      }
      if (dLocation.matches(attribute.getContext(1))) {
        return new Element(Rotation.isFacingLocation(this,dLocation.valueOf(attribute.getContext(1)),degrees)).getAttribute(attribute.fulfill(attributePos));
      }
 else       if (dEntity.matches(attribute.getContext(1))) {
        return new Element(Rotation.isFacingLocation(this,dEntity.valueOf(attribute.getContext(1)).getBukkitEntity().getLocation(),degrees)).getAttribute(attribute.fulfill(attributePos));
      }
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getPitch()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String context=attribute.getContext(1);
    Float pitch=0f;
    Float yaw=0f;
    if (dEntity.matches(context)) {
      dEntity ent=dEntity.valueOf(context);
      if (ent.isSpawned()) {
        pitch=ent.getBukkitEntity().getLocation().getPitch();
        yaw=ent.getBukkitEntity().getLocation().getYaw();
      }
    }
 else     if (context.split(""String_Node_Str"").length == 2) {
      String[] split=context.split(""String_Node_Str"");
      pitch=Float.valueOf(split[0]);
      yaw=Float.valueOf(split[1]);
    }
    dLocation loc=dLocation.valueOf(identify());
    loc.setPitch(pitch);
    loc.setYaw(yaw);
    return loc.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    float yaw=Rotation.normalizeYaw(getYaw());
    if (yaw < 45)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (yaw < 135)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (yaw < 225)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (yaw < 315)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getYaw()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(Rotation.normalizeYaw(getYaw())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2)) {
      ArrayList<dLocation> found=new ArrayList<dLocation>();
      double radius=aH.matchesDouble(attribute.getContext(2)) ? attribute.getDoubleContext(2) : 10;
      List<dMaterial> materials=new ArrayList<dMaterial>();
      if (attribute.hasContext(1))       materials=dList.valueOf(attribute.getContext(1)).filter(dMaterial.class);
      if (materials == null)       return Element.NULL.getAttribute(attribute.fulfill(2));
      attribute.fulfill(2);
      for (double x=-(radius); x <= radius; x++)       for (double y=-(radius); y <= radius; y++)       for (double z=-(radius); z <= radius; z++)       if (!materials.isEmpty()) {
        for (        dMaterial material : materials)         if (material.matchesMaterialData(getBlock().getLocation().add(x,y,z).getBlock().getType().getNewData(getBlock().getLocation().add(x,y,z).getBlock().getData())))         found.add(new dLocation(getBlock().getLocation().add(x + 0.5,y,z + 0.5)));
      }
 else       found.add(new dLocation(getBlock().getLocation().add(x + 0.5,y,z + 0.5)));
      Collections.sort(found,new Comparator<dLocation>(){
        @Override public int compare(        dLocation loc1,        dLocation loc2){
          return Compare(loc1,loc2);
        }
      }
);
      return new dList(found).getAttribute(attribute);
    }
 else     if (attribute.startsWith(""String_Node_Str"") && attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2)) {
      ArrayList<dLocation> found=new ArrayList<dLocation>();
      double radius=aH.matchesDouble(attribute.getContext(2)) ? attribute.getDoubleContext(2) : 10;
      List<dMaterial> materials=new ArrayList<dMaterial>();
      if (attribute.hasContext(1))       materials=dList.valueOf(attribute.getContext(1)).filter(dMaterial.class);
      if (materials == null)       return Element.NULL.getAttribute(attribute.fulfill(2));
      attribute.fulfill(2);
      for (double x=-(radius); x <= radius; x++)       for (double y=-(radius); y <= radius; y++)       for (double z=-(radius); z <= radius; z++) {
        Location l=getBlock().getLocation().clone().add(x,y,z);
        if (!materials.isEmpty()) {
          for (          dMaterial material : materials) {
            if (material.matchesMaterialData(getBlock().getLocation().clone().add(x,y,z).getBlock().getType().getNewData(getBlock().getLocation().clone().add(x,y,z).getBlock().getData()))) {
              if (l.clone().add(0,1,0).getBlock().getType() == Material.AIR && l.clone().add(0,2,0).getBlock().getType() == Material.AIR && l.getBlock().getType() != Material.AIR)               found.add(new dLocation(getBlock().getLocation().clone().add(x + 0.5,y,z + 0.5)));
            }
          }
        }
 else {
          if (l.clone().add(0,1,0).getBlock().getType() == Material.AIR && l.clone().add(0,2,0).getBlock().getType() == Material.AIR && l.getBlock().getType() != Material.AIR) {
            found.add(new dLocation(getBlock().getLocation().clone().add(x + 0.5,y,z + 0.5)));
          }
        }
      }
      Collections.sort(found,new Comparator<dLocation>(){
        @Override public int compare(        dLocation loc1,        dLocation loc2){
          return Compare(loc1,loc2);
        }
      }
);
      return new dList(found).getAttribute(attribute);
    }
 else     if (attribute.startsWith(""String_Node_Str"") && attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2)) {
      ArrayList<dPlayer> found=new ArrayList<dPlayer>();
      double radius=aH.matchesDouble(attribute.getContext(2)) ? attribute.getDoubleContext(2) : 10;
      attribute.fulfill(2);
      for (      Player player : Bukkit.getOnlinePlayers())       if (!player.isDead() && Utilities.checkLocation(this,player.getLocation(),radius))       found.add(new dPlayer(player));
      Collections.sort(found,new Comparator<dPlayer>(){
        @Override public int compare(        dPlayer pl1,        dPlayer pl2){
          return Compare(pl1.getLocation(),pl2.getLocation());
        }
      }
);
      return new dList(found).getAttribute(attribute);
    }
 else     if (attribute.startsWith(""String_Node_Str"") && attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2)) {
      ArrayList<dNPC> found=new ArrayList<dNPC>();
      double radius=aH.matchesDouble(attribute.getContext(2)) ? attribute.getDoubleContext(2) : 10;
      attribute.fulfill(2);
      for (      dNPC npc : DenizenAPI.getSpawnedNPCs())       if (Utilities.checkLocation(this,npc.getLocation(),radius))       found.add(npc);
      Collections.sort(found,new Comparator<dNPC>(){
        @Override public int compare(        dNPC npc1,        dNPC npc2){
          return Compare(npc1.getLocation(),npc2.getLocation());
        }
      }
);
      return new dList(found).getAttribute(attribute);
    }
 else     if (attribute.startsWith(""String_Node_Str"") && attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2)) {
      dList ent_list=new dList();
      if (attribute.hasContext(1)) {
        for (        String ent : dList.valueOf(attribute.getContext(1))) {
          if (dEntity.matches(ent))           ent_list.add(ent.toUpperCase());
        }
      }
      ArrayList<dEntity> found=new ArrayList<dEntity>();
      double radius=aH.matchesDouble(attribute.getContext(2)) ? attribute.getDoubleContext(2) : 10;
      attribute.fulfill(2);
      for (      Entity entity : getWorld().getEntities()) {
        if (Utilities.checkLocation(this,entity.getLocation(),radius)) {
          dEntity current=new dEntity(entity);
          if (!ent_list.isEmpty()) {
            for (            String ent : ent_list) {
              if (entity.getType().name().equals(ent) || current.identify().equalsIgnoreCase(ent)) {
                found.add(current);
                break;
              }
            }
          }
 else           found.add(current);
        }
      }
      Collections.sort(found,new Comparator<dEntity>(){
        @Override public int compare(        dEntity ent1,        dEntity ent2){
          return Compare(ent1.getLocation(),ent2.getLocation());
        }
      }
);
      return new dList(found).getAttribute(attribute);
    }
 else     if (attribute.startsWith(""String_Node_Str"") && attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2)) {
      ArrayList<dEntity> found=new ArrayList<dEntity>();
      double radius=aH.matchesDouble(attribute.getContext(2)) ? attribute.getDoubleContext(2) : 10;
      attribute.fulfill(2);
      for (      Entity entity : getWorld().getEntities())       if (entity instanceof LivingEntity && Utilities.checkLocation(this,entity.getLocation(),radius))       found.add(new dEntity(entity));
      Collections.sort(found,new Comparator<dEntity>(){
        @Override public int compare(        dEntity ent1,        dEntity ent2){
          return Compare(ent1.getLocation(),ent2.getLocation());
        }
      }
);
      return new dList(found).getAttribute(attribute);
    }
    return new Element(""String_Node_Str"").getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getX() + ""String_Node_Str"" + getY()+ ""String_Node_Str""+ getZ()+ ""String_Node_Str""+ getWorld().getName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(""String_Node_Str"" + getX() + ""String_Node_Str""+ getY()+ ""String_Node_Str""+ getZ()+ ""String_Node_Str""+ getWorld().getName()+ ""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new dChunk(this).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dLocation rawLocation=new dLocation(this);
    rawLocation.setRaw(true);
    return rawLocation.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return dWorld.mirrorBukkitWorld(getWorld()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getX()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getY()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getZ()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (attribute.getContext(1).split(""String_Node_Str"").length == 3) {
      String[] ints=attribute.getContext(1).split(""String_Node_Str"",3);
      if ((aH.matchesDouble(ints[0]) || aH.matchesInteger(ints[0])) && (aH.matchesDouble(ints[1]) || aH.matchesInteger(ints[1])) && (aH.matchesDouble(ints[2]) || aH.matchesInteger(ints[2]))) {
        return new dLocation(this.clone().add(Double.valueOf(ints[0]),Double.valueOf(ints[1]),Double.valueOf(ints[2]))).getAttribute(attribute.fulfill(1));
      }
    }
 else     if (dLocation.matches(attribute.getContext(1))) {
      return new dLocation(this.clone().add(dLocation.valueOf(attribute.getContext(1)))).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (attribute.getContext(1).split(""String_Node_Str"").length == 3) {
      String[] ints=attribute.getContext(1).split(""String_Node_Str"",3);
      if ((aH.matchesDouble(ints[0]) || aH.matchesInteger(ints[0])) && (aH.matchesDouble(ints[1]) || aH.matchesInteger(ints[1])) && (aH.matchesDouble(ints[2]) || aH.matchesInteger(ints[2]))) {
        return new dLocation(this.clone().subtract(Double.valueOf(ints[0]),Double.valueOf(ints[1]),Double.valueOf(ints[2]))).getAttribute(attribute.fulfill(1));
      }
    }
 else     if (dLocation.matches(attribute.getContext(1))) {
      return new dLocation(this.clone().subtract(dLocation.valueOf(attribute.getContext(1)))).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new dLocation(this.clone().multiply(Double.parseDouble(attribute.getContext(1)))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new dLocation(this.clone().multiply(1D / Double.parseDouble(attribute.getContext(1)))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(Math.sqrt(Math.pow(getX(),2) + Math.pow(getY(),2) + Math.pow(getZ(),2))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (dLocation.matches(attribute.getContext(1))) {
      dLocation toLocation=dLocation.valueOf(attribute.getContext(1));
      if (attribute.getAttribute(2).startsWith(""String_Node_Str"")) {
        if (attribute.getAttribute(3).startsWith(""String_Node_Str""))         return new Element(Math.sqrt(Math.pow(this.getX() - toLocation.getX(),2) + Math.pow(this.getZ() - toLocation.getZ(),2))).getAttribute(attribute.fulfill(3));
 else         if (this.getWorld() == toLocation.getWorld())         return new Element(Math.sqrt(Math.pow(this.getX() - toLocation.getX(),2) + Math.pow(this.getZ() - toLocation.getZ(),2))).getAttribute(attribute.fulfill(2));
      }
 else       if (attribute.getAttribute(2).startsWith(""String_Node_Str"")) {
        if (attribute.getAttribute(3).startsWith(""String_Node_Str""))         return new Element(Math.abs(this.getY() - toLocation.getY())).getAttribute(attribute.fulfill(3));
 else         if (this.getWorld() == toLocation.getWorld())         return new Element(Math.abs(this.getY() - toLocation.getY())).getAttribute(attribute.fulfill(2));
      }
 else       return new Element(this.distance(toLocation)).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    dCuboid cuboid=dCuboid.valueOf(attribute.getContext(1));
    if (cuboid != null)     return new Element(cuboid.isInsideCuboid(this)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().getBiome().name().toLowerCase().replace('_',' ')).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().getHumidity()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().getTemperature()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().getBiome().name()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    List<dCuboid> cuboids=dCuboid.getNotableCuboidsContaining(this);
    dList cuboid_list=new dList();
    for (    dCuboid cuboid : cuboids) {
      cuboid_list.add(cuboid.identify());
    }
    return cuboid_list.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().isLiquid()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().getLightFromBlocks()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().getLightFromSky()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().getLightLevel()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().getBlockPower()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.worldGuard == null) {
      dB.echoError(""String_Node_Str"");
      return null;
    }
    if (attribute.hasContext(1)) {
      dList region_list=dList.valueOf(attribute.getContext(1));
      for (      String region : region_list)       if (WorldGuardUtilities.inRegion(this,region))       return Element.TRUE.getAttribute(attribute.fulfill(1));
      return Element.FALSE.getAttribute(attribute.fulfill(1));
    }
 else {
      return new Element(WorldGuardUtilities.inRegion(this)).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.worldGuard == null) {
      dB.echoError(""String_Node_Str"");
      return null;
    }
    return new dList(WorldGuardUtilities.getRegions(this)).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new Element(identify()).getAttribute(attribute);
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(this.add(0,1,0)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(this.add(0,-1,0)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dLocation(getWorld(),getBlockX(),getBlockY(),getBlockZ()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dLocation(getWorld().getHighestBlockAt(this).getLocation().add(0,-1,0)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getBlock().getState() instanceof InventoryHolder).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return Element.HandleNull(identify() + ""String_Node_Str"",getInventory(),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return dMaterial.getMaterialFrom(getBlock().getType(),getBlock().getData()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element((getBlock().getData() & 0x8) > 0).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getBlock().getState() instanceof Sign) {
      dList toReturn=new dList();
      for (      String line : ((Sign)getBlock().getState()).getLines())       toReturn.add(EscapeTags.Escape(line));
      return toReturn.getAttribute(attribute.fulfill(2));
    }
 else     return ""String_Node_Str"";
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getBlock().getState() instanceof Sign) {
      return new dList(Arrays.asList(((Sign)getBlock().getState()).getLines())).getAttribute(attribute.fulfill(1));
    }
 else     return ""String_Node_Str"";
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(""String_Node_Str"" + getBlockX() + ""String_Node_Str""+ getBlockY()+ ""String_Node_Str""+ getBlockZ()+ ""String_Node_Str""+ getWorld().getName()+ ""String_Node_Str"").getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getBlockX() + ""String_Node_Str"" + getBlockY()+ ""String_Node_Str""+ getBlockZ()+ ""String_Node_Str""+ getWorld().getName()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    double xzLen=Math.cos((getPitch() % 360) * (Math.PI / 180));
    double nx=xzLen * Math.sin(-getYaw() * (Math.PI / 180));
    double ny=Math.sin(getPitch() * (Math.PI / 180));
    double nz=xzLen * Math.cos(getYaw() * (Math.PI / 180));
    return new dLocation(getWorld(),nx,-ny,nz).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && dLocation.matches(attribute.getContext(1))) {
      dLocation target=dLocation.valueOf(attribute.getContext(1));
      attribute=attribute.fulfill(1);
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Rotation.normalizeYaw(Rotation.getYaw(target.toVector().subtract(this.toVector()).normalize()))).getAttribute(attribute.fulfill(1));
 else       return new Element(Rotation.getCardinal(Rotation.getYaw(target.toVector().subtract(this.toVector()).normalize()))).getAttribute(attribute);
    }
 else {
      return new Element(Rotation.getCardinal(getYaw())).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1)) {
      int degrees=45;
      int attributePos=1;
      if (attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2) && aH.matchesInteger(attribute.getContext(2))) {
        degrees=attribute.getIntContext(2);
        attributePos++;
      }
      if (dLocation.matches(attribute.getContext(1))) {
        return new Element(Rotation.isFacingLocation(this,dLocation.valueOf(attribute.getContext(1)),degrees)).getAttribute(attribute.fulfill(attributePos));
      }
 else       if (dEntity.matches(attribute.getContext(1))) {
        return new Element(Rotation.isFacingLocation(this,dEntity.valueOf(attribute.getContext(1)).getBukkitEntity().getLocation(),degrees)).getAttribute(attribute.fulfill(attributePos));
      }
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getPitch()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String context=attribute.getContext(1);
    Float pitch=0f;
    Float yaw=0f;
    if (dEntity.matches(context)) {
      dEntity ent=dEntity.valueOf(context);
      if (ent.isSpawned()) {
        pitch=ent.getBukkitEntity().getLocation().getPitch();
        yaw=ent.getBukkitEntity().getLocation().getYaw();
      }
    }
 else     if (context.split(""String_Node_Str"").length == 2) {
      String[] split=context.split(""String_Node_Str"");
      pitch=Float.valueOf(split[0]);
      yaw=Float.valueOf(split[1]);
    }
    dLocation loc=dLocation.valueOf(identify());
    loc.setPitch(pitch);
    loc.setYaw(yaw);
    return loc.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    float yaw=Rotation.normalizeYaw(getYaw());
    if (yaw < 45)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (yaw < 135)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (yaw < 225)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (yaw < 315)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getYaw()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(Rotation.normalizeYaw(getYaw())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2)) {
      ArrayList<dLocation> found=new ArrayList<dLocation>();
      double radius=aH.matchesDouble(attribute.getContext(2)) ? attribute.getDoubleContext(2) : 10;
      List<dMaterial> materials=new ArrayList<dMaterial>();
      if (attribute.hasContext(1))       materials=dList.valueOf(attribute.getContext(1)).filter(dMaterial.class);
      if (materials == null)       return Element.NULL.getAttribute(attribute.fulfill(2));
      attribute.fulfill(2);
      for (double x=-(radius); x <= radius; x++)       for (double y=-(radius); y <= radius; y++)       for (double z=-(radius); z <= radius; z++)       if (!materials.isEmpty()) {
        for (        dMaterial material : materials)         if (material.matchesMaterialData(getBlock().getLocation().add(x,y,z).getBlock().getType().getNewData(getBlock().getLocation().add(x,y,z).getBlock().getData())))         found.add(new dLocation(getBlock().getLocation().add(x + 0.5,y,z + 0.5)));
      }
 else       found.add(new dLocation(getBlock().getLocation().add(x + 0.5,y,z + 0.5)));
      Collections.sort(found,new Comparator<dLocation>(){
        @Override public int compare(        dLocation loc1,        dLocation loc2){
          return Compare(loc1,loc2);
        }
      }
);
      return new dList(found).getAttribute(attribute);
    }
 else     if (attribute.startsWith(""String_Node_Str"") && attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2)) {
      ArrayList<dLocation> found=new ArrayList<dLocation>();
      double radius=aH.matchesDouble(attribute.getContext(2)) ? attribute.getDoubleContext(2) : 10;
      List<dMaterial> materials=new ArrayList<dMaterial>();
      if (attribute.hasContext(1))       materials=dList.valueOf(attribute.getContext(1)).filter(dMaterial.class);
      if (materials == null)       return Element.NULL.getAttribute(attribute.fulfill(2));
      attribute.fulfill(2);
      for (double x=-(radius); x <= radius; x++)       for (double y=-(radius); y <= radius; y++)       for (double z=-(radius); z <= radius; z++) {
        Location l=getBlock().getLocation().clone().add(x,y,z);
        if (!materials.isEmpty()) {
          for (          dMaterial material : materials) {
            if (material.matchesMaterialData(getBlock().getLocation().clone().add(x,y,z).getBlock().getType().getNewData(getBlock().getLocation().clone().add(x,y,z).getBlock().getData()))) {
              if (l.clone().add(0,1,0).getBlock().getType() == Material.AIR && l.clone().add(0,2,0).getBlock().getType() == Material.AIR && l.getBlock().getType() != Material.AIR)               found.add(new dLocation(getBlock().getLocation().clone().add(x + 0.5,y,z + 0.5)));
            }
          }
        }
 else {
          if (l.clone().add(0,1,0).getBlock().getType() == Material.AIR && l.clone().add(0,2,0).getBlock().getType() == Material.AIR && l.getBlock().getType() != Material.AIR) {
            found.add(new dLocation(getBlock().getLocation().clone().add(x + 0.5,y,z + 0.5)));
          }
        }
      }
      Collections.sort(found,new Comparator<dLocation>(){
        @Override public int compare(        dLocation loc1,        dLocation loc2){
          return Compare(loc1,loc2);
        }
      }
);
      return new dList(found).getAttribute(attribute);
    }
 else     if (attribute.startsWith(""String_Node_Str"") && attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2)) {
      ArrayList<dPlayer> found=new ArrayList<dPlayer>();
      double radius=aH.matchesDouble(attribute.getContext(2)) ? attribute.getDoubleContext(2) : 10;
      attribute.fulfill(2);
      for (      Player player : Bukkit.getOnlinePlayers())       if (!player.isDead() && Utilities.checkLocation(this,player.getLocation(),radius))       found.add(new dPlayer(player));
      Collections.sort(found,new Comparator<dPlayer>(){
        @Override public int compare(        dPlayer pl1,        dPlayer pl2){
          return Compare(pl1.getLocation(),pl2.getLocation());
        }
      }
);
      return new dList(found).getAttribute(attribute);
    }
 else     if (attribute.startsWith(""String_Node_Str"") && attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2)) {
      ArrayList<dNPC> found=new ArrayList<dNPC>();
      double radius=aH.matchesDouble(attribute.getContext(2)) ? attribute.getDoubleContext(2) : 10;
      attribute.fulfill(2);
      for (      dNPC npc : DenizenAPI.getSpawnedNPCs())       if (Utilities.checkLocation(this,npc.getLocation(),radius))       found.add(npc);
      Collections.sort(found,new Comparator<dNPC>(){
        @Override public int compare(        dNPC npc1,        dNPC npc2){
          return Compare(npc1.getLocation(),npc2.getLocation());
        }
      }
);
      return new dList(found).getAttribute(attribute);
    }
 else     if (attribute.startsWith(""String_Node_Str"") && attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2)) {
      dList ent_list=new dList();
      if (attribute.hasContext(1)) {
        for (        String ent : dList.valueOf(attribute.getContext(1))) {
          if (dEntity.matches(ent))           ent_list.add(ent.toUpperCase());
        }
      }
      ArrayList<dEntity> found=new ArrayList<dEntity>();
      double radius=aH.matchesDouble(attribute.getContext(2)) ? attribute.getDoubleContext(2) : 10;
      attribute.fulfill(2);
      for (      Entity entity : getWorld().getEntities()) {
        if (Utilities.checkLocation(this,entity.getLocation(),radius)) {
          dEntity current=new dEntity(entity);
          if (!ent_list.isEmpty()) {
            for (            String ent : ent_list) {
              if ((entity.getType().name().equals(ent) || current.identify().equalsIgnoreCase(ent)) && entity.isValid()) {
                found.add(current);
                break;
              }
            }
          }
 else           found.add(current);
        }
      }
      Collections.sort(found,new Comparator<dEntity>(){
        @Override public int compare(        dEntity ent1,        dEntity ent2){
          return Compare(ent1.getLocation(),ent2.getLocation());
        }
      }
);
      return new dList(found).getAttribute(attribute);
    }
 else     if (attribute.startsWith(""String_Node_Str"") && attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2)) {
      ArrayList<dEntity> found=new ArrayList<dEntity>();
      double radius=aH.matchesDouble(attribute.getContext(2)) ? attribute.getDoubleContext(2) : 10;
      attribute.fulfill(2);
      for (      Entity entity : getWorld().getEntities())       if (entity instanceof LivingEntity && Utilities.checkLocation(this,entity.getLocation(),radius))       found.add(new dEntity(entity));
      Collections.sort(found,new Comparator<dEntity>(){
        @Override public int compare(        dEntity ent1,        dEntity ent2){
          return Compare(ent1.getLocation(),ent2.getLocation());
        }
      }
);
      return new dList(found).getAttribute(attribute);
    }
    return new Element(""String_Node_Str"").getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getX() + ""String_Node_Str"" + getY()+ ""String_Node_Str""+ getZ()+ ""String_Node_Str""+ getWorld().getName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(""String_Node_Str"" + getX() + ""String_Node_Str""+ getY()+ ""String_Node_Str""+ getZ()+ ""String_Node_Str""+ getWorld().getName()+ ""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new dChunk(this).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dLocation rawLocation=new dLocation(this);
    rawLocation.setRaw(true);
    return rawLocation.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return dWorld.mirrorBukkitWorld(getWorld()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getX()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getY()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getZ()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (attribute.getContext(1).split(""String_Node_Str"").length == 3) {
      String[] ints=attribute.getContext(1).split(""String_Node_Str"",3);
      if ((aH.matchesDouble(ints[0]) || aH.matchesInteger(ints[0])) && (aH.matchesDouble(ints[1]) || aH.matchesInteger(ints[1])) && (aH.matchesDouble(ints[2]) || aH.matchesInteger(ints[2]))) {
        return new dLocation(this.clone().add(Double.valueOf(ints[0]),Double.valueOf(ints[1]),Double.valueOf(ints[2]))).getAttribute(attribute.fulfill(1));
      }
    }
 else     if (dLocation.matches(attribute.getContext(1))) {
      return new dLocation(this.clone().add(dLocation.valueOf(attribute.getContext(1)))).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (attribute.getContext(1).split(""String_Node_Str"").length == 3) {
      String[] ints=attribute.getContext(1).split(""String_Node_Str"",3);
      if ((aH.matchesDouble(ints[0]) || aH.matchesInteger(ints[0])) && (aH.matchesDouble(ints[1]) || aH.matchesInteger(ints[1])) && (aH.matchesDouble(ints[2]) || aH.matchesInteger(ints[2]))) {
        return new dLocation(this.clone().subtract(Double.valueOf(ints[0]),Double.valueOf(ints[1]),Double.valueOf(ints[2]))).getAttribute(attribute.fulfill(1));
      }
    }
 else     if (dLocation.matches(attribute.getContext(1))) {
      return new dLocation(this.clone().subtract(dLocation.valueOf(attribute.getContext(1)))).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new dLocation(this.clone().multiply(Double.parseDouble(attribute.getContext(1)))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new dLocation(this.clone().multiply(1D / Double.parseDouble(attribute.getContext(1)))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(Math.sqrt(Math.pow(getX(),2) + Math.pow(getY(),2) + Math.pow(getZ(),2))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (dLocation.matches(attribute.getContext(1))) {
      dLocation toLocation=dLocation.valueOf(attribute.getContext(1));
      if (attribute.getAttribute(2).startsWith(""String_Node_Str"")) {
        if (attribute.getAttribute(3).startsWith(""String_Node_Str""))         return new Element(Math.sqrt(Math.pow(this.getX() - toLocation.getX(),2) + Math.pow(this.getZ() - toLocation.getZ(),2))).getAttribute(attribute.fulfill(3));
 else         if (this.getWorld() == toLocation.getWorld())         return new Element(Math.sqrt(Math.pow(this.getX() - toLocation.getX(),2) + Math.pow(this.getZ() - toLocation.getZ(),2))).getAttribute(attribute.fulfill(2));
      }
 else       if (attribute.getAttribute(2).startsWith(""String_Node_Str"")) {
        if (attribute.getAttribute(3).startsWith(""String_Node_Str""))         return new Element(Math.abs(this.getY() - toLocation.getY())).getAttribute(attribute.fulfill(3));
 else         if (this.getWorld() == toLocation.getWorld())         return new Element(Math.abs(this.getY() - toLocation.getY())).getAttribute(attribute.fulfill(2));
      }
 else       return new Element(this.distance(toLocation)).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    dCuboid cuboid=dCuboid.valueOf(attribute.getContext(1));
    if (cuboid != null)     return new Element(cuboid.isInsideCuboid(this)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().getBiome().name().toLowerCase().replace('_',' ')).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().getHumidity()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().getTemperature()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().getBiome().name()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    List<dCuboid> cuboids=dCuboid.getNotableCuboidsContaining(this);
    dList cuboid_list=new dList();
    for (    dCuboid cuboid : cuboids) {
      cuboid_list.add(cuboid.identify());
    }
    return cuboid_list.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().isLiquid()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().getLightFromBlocks()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().getLightFromSky()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().getLightLevel()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().getBlockPower()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.worldGuard == null) {
      dB.echoError(""String_Node_Str"");
      return null;
    }
    if (attribute.hasContext(1)) {
      dList region_list=dList.valueOf(attribute.getContext(1));
      for (      String region : region_list)       if (WorldGuardUtilities.inRegion(this,region))       return Element.TRUE.getAttribute(attribute.fulfill(1));
      return Element.FALSE.getAttribute(attribute.fulfill(1));
    }
 else {
      return new Element(WorldGuardUtilities.inRegion(this)).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.worldGuard == null) {
      dB.echoError(""String_Node_Str"");
      return null;
    }
    return new dList(WorldGuardUtilities.getRegions(this)).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new Element(identify()).getAttribute(attribute);
}",0.9994782526205948
10246,"int Compare(dLocation loc1,dLocation loc2){
  if (loc1 == null || loc1.equals(loc2))   return 0;
 else {
    double dist=distanceSquared(loc1) - distanceSquared(loc2);
    return dist == 0 ? 0 : (dist > 0 ? 1 : -1);
  }
}","int Compare(dLocation loc1,dLocation loc2){
  if (loc1 == null || loc2 == null || loc1.equals(loc2))   return 0;
 else {
    double dist=distanceSquared(loc1) - distanceSquared(loc2);
    return dist == 0 ? 0 : (dist > 0 ? 1 : -1);
  }
}",0.965065502183406
10247,"/** 
 * Notes that the player exists, for easy dPlayer valueOf handling.
 */
public static void notePlayer(OfflinePlayer player){
  if (!playerNames.contains(player.getName().toLowerCase())) {
    playerNames.add(player.getName().toLowerCase());
  }
}","/** 
 * Notes that the player exists, for easy dPlayer valueOf handling.
 */
public static void notePlayer(OfflinePlayer player){
  if (!playerNames.containsKey(player.getName().toLowerCase())) {
    playerNames.put(player.getName().toLowerCase(),player.getUniqueId());
  }
}",0.9429657794676806
10248,"static dPlayer valueOfInternal(String string,boolean announce){
  if (string == null)   return null;
  string=string.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  if (string.indexOf('-') >= 0) {
    try {
      UUID uuid=UUID.fromString(string);
      if (uuid != null) {
        OfflinePlayer player=Bukkit.getOfflinePlayer(uuid);
        if (player != null) {
          return new dPlayer(player);
        }
      }
    }
 catch (    IllegalArgumentException e) {
    }
  }
  if (playerNameIsValid(string)) {
    OfflinePlayer player=Bukkit.getOfflinePlayer(string);
    if (player.hasPlayedBefore())     return new dPlayer(player);
  }
  if (announce)   dB.echoError(""String_Node_Str"" + string + ""String_Node_Str"");
  return null;
}","static dPlayer valueOfInternal(String string,boolean announce){
  if (string == null)   return null;
  string=string.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  if (string.indexOf('-') >= 0) {
    try {
      UUID uuid=UUID.fromString(string);
      if (uuid != null) {
        OfflinePlayer player=Bukkit.getOfflinePlayer(uuid);
        if (player != null) {
          return new dPlayer(player);
        }
      }
    }
 catch (    IllegalArgumentException e) {
    }
  }
  if (playerNames.containsKey(string.toLowerCase())) {
    OfflinePlayer player=Bukkit.getOfflinePlayer(playerNames.get(string.toLowerCase()));
    if (player.hasPlayedBefore())     return new dPlayer(player);
  }
  if (announce)   dB.echoError(""String_Node_Str"" + string + ""String_Node_Str"");
  return null;
}",0.9436532507739938
10249,"public static boolean matches(String arg){
  if (arg == null)   return false;
  if (arg.toLowerCase().startsWith(""String_Node_Str""))   return true;
  arg=arg.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  if (arg.indexOf('-') >= 0) {
    try {
      UUID uuid=UUID.fromString(arg);
      if (uuid != null) {
        OfflinePlayer player=Bukkit.getOfflinePlayer(uuid);
        if (player != null) {
          return true;
        }
      }
    }
 catch (    IllegalArgumentException e) {
    }
  }
  arg=arg.toUpperCase();
  for (  String name : playerNames) {
    if (arg.equals(name)) {
      return true;
    }
  }
  return false;
}","public static boolean matches(String arg){
  if (arg == null)   return false;
  if (arg.toLowerCase().startsWith(""String_Node_Str""))   return true;
  arg=arg.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  if (arg.indexOf('-') >= 0) {
    try {
      UUID uuid=UUID.fromString(arg);
      if (uuid != null) {
        OfflinePlayer player=Bukkit.getOfflinePlayer(uuid);
        if (player != null) {
          return true;
        }
      }
    }
 catch (    IllegalArgumentException e) {
    }
  }
  return playerNames.containsKey(arg.toLowerCase());
}",0.8676585747846516
10250,"public static boolean playerNameIsValid(String arg){
  arg=arg.toLowerCase();
  for (  String name : playerNames) {
    if (arg.equals(name)) {
      return true;
    }
  }
  return false;
}","public static boolean playerNameIsValid(String name){
  return playerNames.containsKey(name.toLowerCase());
}",0.4949832775919732
10251,"public dItem getItemFrom(dPlayer player,dNPC npc){
  dItem stack=null;
  try {
    if (contains(""String_Node_Str"")) {
      String material=TagManager.tag(player,npc,getString(""String_Node_Str""));
      if (material.startsWith(""String_Node_Str""))       material=material.substring(2);
      stack=dItem.valueOf(material);
    }
    if (stack == null)     return null;
    ItemMeta meta=stack.getItemStack().getItemMeta();
    List<String> lore=new ArrayList<String>();
    boolean hideLore=false;
    if (contains(""String_Node_Str"")) {
      hideLore=Boolean.valueOf(getString(""String_Node_Str""));
    }
    if (!hideLore)     lore.add(hash);
    if (contains(""String_Node_Str"")) {
      String displayName=TagManager.tag(player,npc,getString(""String_Node_Str""));
      meta.setDisplayName(displayName);
    }
    if (contains(""String_Node_Str"")) {
      bound=Boolean.valueOf(TagManager.tag(player,npc,getString(""String_Node_Str"")));
    }
    if (contains(""String_Node_Str"")) {
      for (      String l : getStringList(""String_Node_Str"")) {
        l=TagManager.tag(player,npc,l);
        lore.add(l);
      }
    }
    meta.setLore(lore);
    stack.getItemStack().setItemMeta(meta);
    if (contains(""String_Node_Str"")) {
      for (      String enchantment : getStringList(""String_Node_Str"")) {
        enchantment=TagManager.tag(player,npc,enchantment);
        try {
          int level=1;
          if (enchantment.split(""String_Node_Str"").length > 1) {
            level=Integer.valueOf(enchantment.split(""String_Node_Str"")[1]);
            enchantment=enchantment.split(""String_Node_Str"")[0];
          }
          Enchantment ench=Enchantment.getByName(enchantment.toUpperCase());
          stack.getItemStack().addUnsafeEnchantment(ench,level);
        }
 catch (        Exception e) {
          dB.echoError(""String_Node_Str"" + getName() + ""String_Node_Str""+ enchantment+ ""String_Node_Str"");
        }
      }
    }
    if (contains(""String_Node_Str"")) {
      String color=TagManager.tag(player,npc,getString(""String_Node_Str""));
      LeatherColorer.colorArmor(stack,color);
    }
    if (contains(""String_Node_Str"")) {
      BookScriptContainer book=ScriptRegistry.getScriptContainerAs(getString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""),BookScriptContainer.class);
      stack=book.writeBookTo(stack,player,npc);
    }
  }
 catch (  Exception e) {
    dB.echoError(""String_Node_Str"");
    dB.echoError(e);
    stack=null;
  }
  return stack;
}","public dItem getItemFrom(dPlayer player,dNPC npc){
  dItem stack=null;
  try {
    if (contains(""String_Node_Str"")) {
      String material=TagManager.tag(player,npc,getString(""String_Node_Str""));
      if (material.startsWith(""String_Node_Str""))       material=material.substring(2);
      stack=dItem.valueOf(material);
    }
    if (stack == null)     return null;
    ItemMeta meta=stack.getItemStack().getItemMeta();
    List<String> lore=new ArrayList<String>();
    boolean hideLore=false;
    if (contains(""String_Node_Str"")) {
      hideLore=Boolean.valueOf(getString(""String_Node_Str""));
    }
    if (!hideLore)     lore.add(hash);
    if (contains(""String_Node_Str"")) {
      String displayName=TagManager.tag(player,npc,getString(""String_Node_Str""));
      meta.setDisplayName(displayName);
    }
    if (contains(""String_Node_Str"")) {
      bound=Boolean.valueOf(TagManager.tag(player,npc,getString(""String_Node_Str"")));
    }
    if (contains(""String_Node_Str"")) {
      for (      String l : getStringList(""String_Node_Str"")) {
        l=TagManager.tag(player,npc,l);
        lore.add(l);
      }
    }
    meta.setLore(lore);
    stack.getItemStack().setItemMeta(meta);
    if (contains(""String_Node_Str"")) {
      for (      String enchantment : getStringList(""String_Node_Str"")) {
        enchantment=TagManager.tag(player,npc,enchantment);
        try {
          int level=1;
          String[] split=enchantment.split(""String_Node_Str"");
          if (split.length > 1) {
            level=Integer.valueOf(split[1].replace(""String_Node_Str"",""String_Node_Str""));
            enchantment=split[0].replace(""String_Node_Str"",""String_Node_Str"");
          }
          Enchantment ench=Enchantment.getByName(enchantment.toUpperCase());
          stack.getItemStack().addUnsafeEnchantment(ench,level);
        }
 catch (        Exception e) {
          dB.echoError(""String_Node_Str"" + getName() + ""String_Node_Str""+ enchantment+ ""String_Node_Str"");
        }
      }
    }
    if (contains(""String_Node_Str"")) {
      String color=TagManager.tag(player,npc,getString(""String_Node_Str""));
      LeatherColorer.colorArmor(stack,color);
    }
    if (contains(""String_Node_Str"")) {
      BookScriptContainer book=ScriptRegistry.getScriptContainerAs(getString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""),BookScriptContainer.class);
      stack=book.writeBookTo(stack,player,npc);
    }
  }
 catch (  Exception e) {
    dB.echoError(""String_Node_Str"");
    dB.echoError(e);
    stack=null;
  }
  return stack;
}",0.945063694267516
10252,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && (attribute.startsWith(""String_Node_Str"",2) || attribute.startsWith(""String_Node_Str"",2))&& attribute.hasContext(2)) {
    Comparable com=new net.aufdemrand.denizen.scripts.commands.core.Comparable();
    String operator;
    if (attribute.getContext(1).startsWith(""String_Node_Str"")) {
      operator=attribute.getContext(1).substring(1);
      com.setNegativeLogic();
    }
 else     operator=attribute.getContext(1);
    Comparable.Operator comparableOperator=null;
    try {
      comparableOperator=Comparable.Operator.valueOf(operator.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").toUpperCase());
    }
 catch (    IllegalArgumentException e) {
    }
    if (comparableOperator != null) {
      com.setOperator(comparableOperator);
      com.setComparable(element);
      com.setComparedto(attribute.getContext(2));
      return new Element(com.determineOutcome()).getAttribute(attribute.fulfill(2));
    }
 else {
      dB.echoError(""String_Node_Str"" + operator + ""String_Node_Str"");
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Double.valueOf(element)).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Math.round(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    try {
      DecimalFormat d=new DecimalFormat(""String_Node_Str"");
      return new Element(d.format(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
    }
 catch (    NumberFormatException e) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dCuboid.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dEntity.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dInventory.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dItem.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dList.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dLocation.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dMaterial.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dNPC.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlayer.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlugin.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dScript.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,Duration.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dWorld.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,ScriptQueue.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.Escape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.unEscape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    String contains=attribute.getContext(1);
    if (contains.toLowerCase().startsWith(""String_Node_Str"")) {
      if (Pattern.compile(contains.substring((""String_Node_Str"").length()),Pattern.CASE_INSENSITIVE).matcher(element).matches())       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
 else     if (element.toLowerCase().contains(contains.toLowerCase()))     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.endsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1))   return new Element(element.matches(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.getLastColors(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(element.length()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.startsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.indexOf(attribute.getContext(1)) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.lastIndexOf(attribute.getContext(1)) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    int index=attribute.getIntContext(1) - 1;
    if (index < 0 || index >= element.length())     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return new Element(String.valueOf(element.charAt(index))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(element.indexOf(delimiter) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(0,element.indexOf(delimiter))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String replace=attribute.getContext(1);
    String replacement=""String_Node_Str"";
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"")) {
      if (attribute.hasContext(1)) {
        replacement=attribute.getContext(1);
        if (replacement == null)         replacement=""String_Node_Str"";
        attribute.fulfill(1);
      }
    }
    return new Element(element.replace(replace,replacement)).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.startsWith(""String_Node_Str"",2)) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    Integer limit=(attribute.hasContext(2) ? attribute.getIntContext(2) : 1);
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1],limit))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string,limit))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1]))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    try {
      int decimal=element.indexOf('.');
      String shortelement;
      String afterdecimal;
      if (decimal != -1) {
        shortelement=element.substring(0,decimal);
        afterdecimal=element.substring(decimal);
      }
 else {
        shortelement=element;
        afterdecimal=""String_Node_Str"";
      }
      String intform=Long.valueOf(shortelement.replace(""String_Node_Str"",""String_Node_Str"")).toString();
      for (int i=intform.length() - 3; i > 0; i-=3) {
        intform=intform.substring(0,i) + ""String_Node_Str"" + intform.substring(i,intform.length());
      }
      return new Element(intform + afterdecimal).getAttribute(attribute.fulfill(1));
    }
 catch (    Exception ex) {
      dB.echoError(ex);
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    FormatScriptContainer format=ScriptRegistry.getScriptContainerAs(attribute.getContext(1),FormatScriptContainer.class);
    if (format == null) {
      dB.echoError(""String_Node_Str"" + attribute.getContext(1) + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
 else {
      return new Element(format.getFormattedText(element,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getNPC() : null,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getPlayer() : null)).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.stripColor(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(element.trim()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toUpperCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (element.length() == 0) {
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
    StringBuilder TitleCase=new StringBuilder(element.length());
    String Upper=element.toUpperCase();
    String Lower=element.toLowerCase();
    TitleCase.append(Upper.charAt(0));
    for (int i=1; i < element.length(); i++) {
      if (element.charAt(i - 1) == ' ')       TitleCase.append(Upper.charAt(i));
 else       TitleCase.append(Lower.charAt(i));
    }
    return new Element(TitleCase.toString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    int beginning_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[0]).asInt() - 1;
    int ending_index;
    if (attribute.getContext(1).split(""String_Node_Str"").length > 1)     ending_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[1]).asInt();
 else     ending_index=element.length();
    if (beginning_index < 0)     beginning_index=0;
    if (beginning_index > element.length())     beginning_index=element.length();
    if (ending_index > element.length())     ending_index=element.length();
    if (ending_index < beginning_index)     ending_index=beginning_index;
    return new Element(element.substring(beginning_index,ending_index)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    String padded=element;
    while (padded.length() < length) {
      padded=with + padded;
    }
    return new Element(padded).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    StringBuilder padded=new StringBuilder(element);
    while (padded.length() < length) {
      padded.append(with);
    }
    return new Element(padded.toString()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.abs(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() + aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() / aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() % aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() * aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sqrt(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() - aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.pow(asDouble(),aH.getDoubleFrom(attribute.getContext(1)))).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.asin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.acos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.atan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.cos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.tan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toDegrees(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toRadians(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.ceil(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.floor(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.round(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.attributes.size() > 0) {
    dB.echoDebug(attribute.getScriptEntry(),""String_Node_Str"" + attribute.attributes.toString() + ""String_Node_Str""+ attribute.getOrigin()+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
 else {
    return element;
  }
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && (attribute.startsWith(""String_Node_Str"",2) || attribute.startsWith(""String_Node_Str"",2))&& attribute.hasContext(2)) {
    Comparable com=new net.aufdemrand.denizen.scripts.commands.core.Comparable();
    String operator;
    if (attribute.getContext(1).startsWith(""String_Node_Str"")) {
      operator=attribute.getContext(1).substring(1);
      com.setNegativeLogic();
    }
 else     operator=attribute.getContext(1);
    Comparable.Operator comparableOperator=null;
    try {
      comparableOperator=Comparable.Operator.valueOf(operator.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").toUpperCase());
    }
 catch (    IllegalArgumentException e) {
    }
    if (comparableOperator != null) {
      com.setOperator(comparableOperator);
      com.setComparable(element);
      com.setComparedto(attribute.getContext(2));
      return new Element(com.determineOutcome()).getAttribute(attribute.fulfill(2));
    }
 else {
      dB.echoError(""String_Node_Str"" + operator + ""String_Node_Str"");
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Double.valueOf(element)).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Math.round(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    try {
      DecimalFormat d=new DecimalFormat(""String_Node_Str"");
      return new Element(d.format(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
    }
 catch (    NumberFormatException e) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dChunk.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dCuboid.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dEntity.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dInventory.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dItem.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dList.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dLocation.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dMaterial.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dNPC.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlayer.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlugin.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dScript.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,Duration.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dWorld.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,ScriptQueue.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.Escape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.unEscape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    String contains=attribute.getContext(1);
    if (contains.toLowerCase().startsWith(""String_Node_Str"")) {
      if (Pattern.compile(contains.substring((""String_Node_Str"").length()),Pattern.CASE_INSENSITIVE).matcher(element).matches())       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
 else     if (element.toLowerCase().contains(contains.toLowerCase()))     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.endsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1))   return new Element(element.matches(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.getLastColors(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(element.length()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.startsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.indexOf(attribute.getContext(1)) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.lastIndexOf(attribute.getContext(1)) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    int index=attribute.getIntContext(1) - 1;
    if (index < 0 || index >= element.length())     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return new Element(String.valueOf(element.charAt(index))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(element.indexOf(delimiter) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(0,element.indexOf(delimiter))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String replace=attribute.getContext(1);
    String replacement=""String_Node_Str"";
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"")) {
      if (attribute.hasContext(1)) {
        replacement=attribute.getContext(1);
        if (replacement == null)         replacement=""String_Node_Str"";
        attribute.fulfill(1);
      }
    }
    return new Element(element.replace(replace,replacement)).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.startsWith(""String_Node_Str"",2)) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    Integer limit=(attribute.hasContext(2) ? attribute.getIntContext(2) : 1);
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1],limit))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string,limit))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1]))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    try {
      int decimal=element.indexOf('.');
      String shortelement;
      String afterdecimal;
      if (decimal != -1) {
        shortelement=element.substring(0,decimal);
        afterdecimal=element.substring(decimal);
      }
 else {
        shortelement=element;
        afterdecimal=""String_Node_Str"";
      }
      String intform=Long.valueOf(shortelement.replace(""String_Node_Str"",""String_Node_Str"")).toString();
      String negative=""String_Node_Str"";
      if (intform.startsWith(""String_Node_Str"")) {
        negative=""String_Node_Str"";
        intform=intform.substring(1,intform.length());
      }
      for (int i=intform.length() - 3; i > 0; i-=3) {
        intform=intform.substring(0,i) + ""String_Node_Str"" + intform.substring(i,intform.length());
      }
      return new Element(negative + intform + afterdecimal).getAttribute(attribute.fulfill(1));
    }
 catch (    Exception ex) {
      dB.echoError(ex);
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    FormatScriptContainer format=ScriptRegistry.getScriptContainerAs(attribute.getContext(1),FormatScriptContainer.class);
    if (format == null) {
      dB.echoError(""String_Node_Str"" + attribute.getContext(1) + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
 else {
      return new Element(format.getFormattedText(element,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getNPC() : null,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getPlayer() : null)).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.stripColor(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(element.trim()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toUpperCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (element.length() == 0) {
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
    StringBuilder TitleCase=new StringBuilder(element.length());
    String Upper=element.toUpperCase();
    String Lower=element.toLowerCase();
    TitleCase.append(Upper.charAt(0));
    for (int i=1; i < element.length(); i++) {
      if (element.charAt(i - 1) == ' ')       TitleCase.append(Upper.charAt(i));
 else       TitleCase.append(Lower.charAt(i));
    }
    return new Element(TitleCase.toString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    int beginning_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[0]).asInt() - 1;
    int ending_index;
    if (attribute.getContext(1).split(""String_Node_Str"").length > 1)     ending_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[1]).asInt();
 else     ending_index=element.length();
    if (beginning_index < 0)     beginning_index=0;
    if (beginning_index > element.length())     beginning_index=element.length();
    if (ending_index > element.length())     ending_index=element.length();
    if (ending_index < beginning_index)     ending_index=beginning_index;
    return new Element(element.substring(beginning_index,ending_index)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    String padded=element;
    while (padded.length() < length) {
      padded=with + padded;
    }
    return new Element(padded).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    StringBuilder padded=new StringBuilder(element);
    while (padded.length() < length) {
      padded.append(with);
    }
    return new Element(padded.toString()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.abs(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() + aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() / aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() % aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() * aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sqrt(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() - aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.pow(asDouble(),aH.getDoubleFrom(attribute.getContext(1)))).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.asin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.acos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.atan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.cos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.tan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toDegrees(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toRadians(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.ceil(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.floor(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.round(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.attributes.size() > 0) {
    dB.echoDebug(attribute.getScriptEntry(),""String_Node_Str"" + attribute.attributes.toString() + ""String_Node_Str""+ attribute.getOrigin()+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
 else {
    return element;
  }
}",0.9911181354762594
10253,"public boolean execute(ScriptEntry scriptEntry){
  Matcher m;
  StringBuffer sb;
  if (scriptEntry.getCommandName().indexOf('%') != -1) {
    m=definition_pattern.matcher(scriptEntry.getCommandName());
    sb=new StringBuffer();
    while (m.find()) {
      String definition=scriptEntry.getResidingQueue().getDefinition(m.group(1));
      if (definition == null)       definition=""String_Node_Str"";
      m.appendReplacement(sb,definition);
    }
    m.appendTail(sb);
    scriptEntry.setCommandName(sb.toString());
  }
  AbstractCommand command=plugin.getCommandRegistry().get(scriptEntry.getCommandName());
  if (command == null) {
    dB.echoDebug(scriptEntry,DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName());
    dB.echoError(scriptEntry.getCommandName() + ""String_Node_Str"");
    dB.echoDebug(scriptEntry,DebugElement.Footer);
    return false;
  }
  if (scriptEntry.getPlayer() != null)   dB.echoDebug(scriptEntry,DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName() + ""String_Node_Str""+ scriptEntry.getPlayer().getName());
 else   dB.echoDebug(scriptEntry,DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName() + (scriptEntry.getNPC() != null ? ""String_Node_Str"" + scriptEntry.getNPC().getName() : ""String_Node_Str""));
  boolean keepGoing=true;
  try {
    if (command.getOptions().REQUIRED_ARGS > scriptEntry.getArguments().size())     throw new InvalidArgumentsException(""String_Node_Str"");
    if (scriptEntry.has_tags)     scriptEntry.setArguments(TagManager.fillArguments(scriptEntry.getArguments(),scriptEntry,true));
    List<String> newArgs=new ArrayList<String>();
    int nested_depth=0;
    boolean if_ignore=false;
    for (    aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
      if (arg.getValue().equals(""String_Node_Str""))       nested_depth++;
      if (arg.getValue().equals(""String_Node_Str""))       nested_depth--;
      if (nested_depth > 0) {
        newArgs.add(arg.raw_value);
        continue;
      }
      if (arg.raw_value.indexOf('%') != -1) {
        m=definition_pattern.matcher(arg.raw_value);
        sb=new StringBuffer();
        while (m.find()) {
          String definition=TagManager.EscapeOutput(scriptEntry.getResidingQueue().getDefinition(m.group(1)));
          if (definition == null)           definition=""String_Node_Str"";
          m.appendReplacement(sb,definition);
        }
        m.appendTail(sb);
        arg=aH.Argument.valueOf(sb.toString());
      }
      if (command.getName().equalsIgnoreCase(""String_Node_Str"") && DenizenAPI.getCurrentInstance().getCommandRegistry().get(arg.getValue()) != null)       if_ignore=true;
      if (arg.matchesPrefix(""String_Node_Str"") && !if_ignore) {
        dB.echoDebug(scriptEntry,""String_Node_Str"" + arg.getValue());
        String value=TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),arg.getValue(),false,scriptEntry);
        dPlayer player=dPlayer.valueOf(value);
        if (player == null || !player.isValid()) {
          dB.echoError(value + ""String_Node_Str"");
          return false;
        }
        scriptEntry.setPlayer(player);
      }
 else       if (arg.matchesPrefix(""String_Node_Str"") && !if_ignore) {
        dB.echoDebug(scriptEntry,""String_Node_Str"" + arg.getValue());
        String value=TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),arg.getValue(),false,scriptEntry);
        dNPC npc=dNPC.valueOf(value);
        if (npc == null || !npc.isValid()) {
          dB.echoError(value + ""String_Node_Str"");
          return false;
        }
        scriptEntry.setNPC(npc);
      }
 else       if (arg.matchesPrefix(""String_Node_Str"") && !if_ignore) {
        String saveName=TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),arg.getValue(),false,scriptEntry);
        dB.echoDebug(scriptEntry,""String_Node_Str"" + saveName + ""String_Node_Str"");
        scriptEntry.getResidingQueue().holdScriptEntry(saveName,scriptEntry);
      }
 else       newArgs.add(arg.raw_value);
    }
    scriptEntry.setArguments(newArgs);
    scriptEntry.setArguments(TagManager.fillArguments(scriptEntry.getArguments(),scriptEntry,false));
    command.parseArgs(scriptEntry);
  }
 catch (  InvalidArgumentsException e) {
    keepGoing=false;
    dB.echoError(""String_Node_Str"");
    if (e.getMessage() != null && e.getMessage().length() > 0)     dB.log(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
    dB.log(""String_Node_Str"" + command.getUsageHint());
    dB.echoDebug(scriptEntry,DebugElement.Footer);
    scriptEntry.setFinished(true);
  }
catch (  Exception e) {
    keepGoing=false;
    dB.echoError(""String_Node_Str"");
    dB.echoError(e);
    dB.echoDebug(scriptEntry,DebugElement.Footer);
    scriptEntry.setFinished(true);
  }
 finally {
    if (keepGoing)     try {
      command.execute(scriptEntry);
    }
 catch (    Exception e) {
      dB.echoError(""String_Node_Str"");
      dB.echoError(e);
      scriptEntry.setFinished(true);
    }
  }
  return true;
}","public boolean execute(ScriptEntry scriptEntry){
  Matcher m;
  StringBuffer sb;
  if (scriptEntry.getCommandName().indexOf('%') != -1) {
    m=definition_pattern.matcher(scriptEntry.getCommandName());
    sb=new StringBuffer();
    while (m.find()) {
      String definition=scriptEntry.getResidingQueue().getDefinition(m.group(1));
      if (definition == null)       definition=""String_Node_Str"";
      m.appendReplacement(sb,definition.replace(""String_Node_Str"",""String_Node_Str""));
    }
    m.appendTail(sb);
    scriptEntry.setCommandName(sb.toString());
  }
  AbstractCommand command=plugin.getCommandRegistry().get(scriptEntry.getCommandName());
  if (command == null) {
    dB.echoDebug(scriptEntry,DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName());
    dB.echoError(scriptEntry.getCommandName() + ""String_Node_Str"");
    dB.echoDebug(scriptEntry,DebugElement.Footer);
    return false;
  }
  if (scriptEntry.getPlayer() != null)   dB.echoDebug(scriptEntry,DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName() + ""String_Node_Str""+ scriptEntry.getPlayer().getName());
 else   dB.echoDebug(scriptEntry,DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName() + (scriptEntry.getNPC() != null ? ""String_Node_Str"" + scriptEntry.getNPC().getName() : ""String_Node_Str""));
  boolean keepGoing=true;
  try {
    if (command.getOptions().REQUIRED_ARGS > scriptEntry.getArguments().size())     throw new InvalidArgumentsException(""String_Node_Str"");
    if (scriptEntry.has_tags)     scriptEntry.setArguments(TagManager.fillArguments(scriptEntry.getArguments(),scriptEntry,true));
    List<String> newArgs=new ArrayList<String>();
    int nested_depth=0;
    boolean if_ignore=false;
    for (    aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
      if (arg.getValue().equals(""String_Node_Str""))       nested_depth++;
      if (arg.getValue().equals(""String_Node_Str""))       nested_depth--;
      if (nested_depth > 0) {
        newArgs.add(arg.raw_value);
        continue;
      }
      if (arg.raw_value.indexOf('%') != -1) {
        m=definition_pattern.matcher(arg.raw_value);
        sb=new StringBuffer();
        while (m.find()) {
          String definition=TagManager.EscapeOutput(scriptEntry.getResidingQueue().getDefinition(m.group(1)));
          if (definition == null)           definition=""String_Node_Str"";
          m.appendReplacement(sb,definition.replace(""String_Node_Str"",""String_Node_Str""));
        }
        m.appendTail(sb);
        arg=aH.Argument.valueOf(sb.toString());
      }
      if (command.getName().equalsIgnoreCase(""String_Node_Str"") && DenizenAPI.getCurrentInstance().getCommandRegistry().get(arg.getValue()) != null)       if_ignore=true;
      if (arg.matchesPrefix(""String_Node_Str"") && !if_ignore) {
        dB.echoDebug(scriptEntry,""String_Node_Str"" + arg.getValue());
        String value=TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),arg.getValue(),false,scriptEntry);
        dPlayer player=dPlayer.valueOf(value);
        if (player == null || !player.isValid()) {
          dB.echoError(value + ""String_Node_Str"");
          return false;
        }
        scriptEntry.setPlayer(player);
      }
 else       if (arg.matchesPrefix(""String_Node_Str"") && !if_ignore) {
        dB.echoDebug(scriptEntry,""String_Node_Str"" + arg.getValue());
        String value=TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),arg.getValue(),false,scriptEntry);
        dNPC npc=dNPC.valueOf(value);
        if (npc == null || !npc.isValid()) {
          dB.echoError(value + ""String_Node_Str"");
          return false;
        }
        scriptEntry.setNPC(npc);
      }
 else       if (arg.matchesPrefix(""String_Node_Str"") && !if_ignore) {
        String saveName=TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),arg.getValue(),false,scriptEntry);
        dB.echoDebug(scriptEntry,""String_Node_Str"" + saveName + ""String_Node_Str"");
        scriptEntry.getResidingQueue().holdScriptEntry(saveName,scriptEntry);
      }
 else       newArgs.add(arg.raw_value);
    }
    scriptEntry.setArguments(newArgs);
    scriptEntry.setArguments(TagManager.fillArguments(scriptEntry.getArguments(),scriptEntry,false));
    command.parseArgs(scriptEntry);
  }
 catch (  InvalidArgumentsException e) {
    keepGoing=false;
    dB.echoError(""String_Node_Str"");
    if (e.getMessage() != null && e.getMessage().length() > 0)     dB.log(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
    dB.log(""String_Node_Str"" + command.getUsageHint());
    dB.echoDebug(scriptEntry,DebugElement.Footer);
    scriptEntry.setFinished(true);
  }
catch (  Exception e) {
    keepGoing=false;
    dB.echoError(""String_Node_Str"");
    dB.echoError(e);
    dB.echoDebug(scriptEntry,DebugElement.Footer);
    scriptEntry.setFinished(true);
  }
 finally {
    if (keepGoing)     try {
      command.execute(scriptEntry);
    }
 catch (    Exception e) {
      dB.echoError(""String_Node_Str"");
      dB.echoError(e);
      scriptEntry.setFinished(true);
    }
  }
  return true;
}",0.991150442477876
10254,"public boolean execute(ScriptEntry scriptEntry){
  Matcher m;
  StringBuffer sb;
  if (scriptEntry.getCommandName().indexOf('%') != -1) {
    m=definition_pattern.matcher(scriptEntry.getCommandName());
    sb=new StringBuffer();
    while (m.find()) {
      String definition=scriptEntry.getResidingQueue().getDefinition(m.group(1));
      if (definition == null)       definition=""String_Node_Str"";
      m.appendReplacement(sb,definition.replace(""String_Node_Str"",""String_Node_Str""));
    }
    m.appendTail(sb);
    scriptEntry.setCommandName(sb.toString());
  }
  AbstractCommand command=plugin.getCommandRegistry().get(scriptEntry.getCommandName());
  if (command == null) {
    dB.echoDebug(scriptEntry,DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName());
    dB.echoError(scriptEntry.getCommandName() + ""String_Node_Str"");
    dB.echoDebug(scriptEntry,DebugElement.Footer);
    return false;
  }
  if (scriptEntry.getPlayer() != null)   dB.echoDebug(scriptEntry,DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName() + ""String_Node_Str""+ scriptEntry.getPlayer().getName());
 else   dB.echoDebug(scriptEntry,DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName() + (scriptEntry.getNPC() != null ? ""String_Node_Str"" + scriptEntry.getNPC().getName() : ""String_Node_Str""));
  boolean keepGoing=true;
  try {
    if (command.getOptions().REQUIRED_ARGS > scriptEntry.getArguments().size())     throw new InvalidArgumentsException(""String_Node_Str"");
    if (scriptEntry.has_tags)     scriptEntry.setArguments(TagManager.fillArguments(scriptEntry.getArguments(),scriptEntry,true));
    List<String> newArgs=new ArrayList<String>();
    int nested_depth=0;
    boolean if_ignore=false;
    for (    aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
      if (arg.getValue().equals(""String_Node_Str""))       nested_depth++;
      if (arg.getValue().equals(""String_Node_Str""))       nested_depth--;
      if (nested_depth > 0) {
        newArgs.add(arg.raw_value);
        continue;
      }
      if (arg.raw_value.indexOf('%') != -1) {
        m=definition_pattern.matcher(arg.raw_value);
        sb=new StringBuffer();
        while (m.find()) {
          String definition=TagManager.EscapeOutput(scriptEntry.getResidingQueue().getDefinition(m.group(1)));
          if (definition == null)           definition=""String_Node_Str"";
          m.appendReplacement(sb,definition.replace(""String_Node_Str"",""String_Node_Str""));
        }
        m.appendTail(sb);
        arg=aH.Argument.valueOf(sb.toString());
      }
      if (command.getName().equalsIgnoreCase(""String_Node_Str"") && DenizenAPI.getCurrentInstance().getCommandRegistry().get(arg.getValue()) != null)       if_ignore=true;
      if (arg.matchesPrefix(""String_Node_Str"") && !if_ignore) {
        dB.echoDebug(scriptEntry,""String_Node_Str"" + arg.getValue());
        String value=TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),arg.getValue(),false,scriptEntry);
        dPlayer player=dPlayer.valueOf(value);
        if (player == null || !player.isValid()) {
          dB.echoError(value + ""String_Node_Str"");
          return false;
        }
        scriptEntry.setPlayer(player);
      }
 else       if (arg.matchesPrefix(""String_Node_Str"") && !if_ignore) {
        dB.echoDebug(scriptEntry,""String_Node_Str"" + arg.getValue());
        String value=TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),arg.getValue(),false,scriptEntry);
        dNPC npc=dNPC.valueOf(value);
        if (npc == null || !npc.isValid()) {
          dB.echoError(value + ""String_Node_Str"");
          return false;
        }
        scriptEntry.setNPC(npc);
      }
 else       if (arg.matchesPrefix(""String_Node_Str"") && !if_ignore) {
        String saveName=TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),arg.getValue(),false,scriptEntry);
        dB.echoDebug(scriptEntry,""String_Node_Str"" + saveName + ""String_Node_Str"");
        scriptEntry.getResidingQueue().holdScriptEntry(saveName,scriptEntry);
      }
 else       newArgs.add(arg.raw_value);
    }
    scriptEntry.setArguments(newArgs);
    scriptEntry.setArguments(TagManager.fillArguments(scriptEntry.getArguments(),scriptEntry,false));
    command.parseArgs(scriptEntry);
  }
 catch (  InvalidArgumentsException e) {
    keepGoing=false;
    dB.echoError(""String_Node_Str"");
    if (e.getMessage() != null && e.getMessage().length() > 0)     dB.log(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
    dB.log(""String_Node_Str"" + command.getUsageHint());
    dB.echoDebug(scriptEntry,DebugElement.Footer);
    scriptEntry.setFinished(true);
  }
catch (  Exception e) {
    keepGoing=false;
    dB.echoError(""String_Node_Str"");
    dB.echoError(e);
    dB.echoDebug(scriptEntry,DebugElement.Footer);
    scriptEntry.setFinished(true);
  }
 finally {
    if (keepGoing)     try {
      command.execute(scriptEntry);
    }
 catch (    Exception e) {
      dB.echoError(""String_Node_Str"");
      dB.echoError(e);
      scriptEntry.setFinished(true);
    }
  }
  return true;
}","public boolean execute(ScriptEntry scriptEntry){
  Matcher m;
  StringBuffer sb;
  if (scriptEntry.getCommandName().indexOf('%') != -1) {
    m=definition_pattern.matcher(scriptEntry.getCommandName());
    sb=new StringBuffer();
    while (m.find()) {
      String definition=scriptEntry.getResidingQueue().getDefinition(m.group(1));
      if (definition == null)       definition=""String_Node_Str"";
      m.appendReplacement(sb,definition.replace(""String_Node_Str"",""String_Node_Str""));
    }
    m.appendTail(sb);
    scriptEntry.setCommandName(sb.toString());
  }
  AbstractCommand command=plugin.getCommandRegistry().get(scriptEntry.getCommandName());
  if (command == null) {
    dB.echoDebug(scriptEntry,DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName());
    dB.echoError(scriptEntry.getCommandName() + ""String_Node_Str"");
    dB.echoDebug(scriptEntry,DebugElement.Footer);
    return false;
  }
  if (scriptEntry.hasNPC() && scriptEntry.getNPC().getCitizen() == null)   scriptEntry.setNPC(null);
  if (scriptEntry.getPlayer() != null)   dB.echoDebug(scriptEntry,DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName() + ""String_Node_Str""+ scriptEntry.getPlayer().getName());
 else   dB.echoDebug(scriptEntry,DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName() + (scriptEntry.getNPC() != null ? ""String_Node_Str"" + scriptEntry.getNPC().getName() : ""String_Node_Str""));
  boolean keepGoing=true;
  try {
    if (command.getOptions().REQUIRED_ARGS > scriptEntry.getArguments().size())     throw new InvalidArgumentsException(""String_Node_Str"");
    if (scriptEntry.has_tags)     scriptEntry.setArguments(TagManager.fillArguments(scriptEntry.getArguments(),scriptEntry,true));
    List<String> newArgs=new ArrayList<String>();
    int nested_depth=0;
    boolean if_ignore=false;
    for (    aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
      if (arg.getValue().equals(""String_Node_Str""))       nested_depth++;
      if (arg.getValue().equals(""String_Node_Str""))       nested_depth--;
      if (nested_depth > 0) {
        newArgs.add(arg.raw_value);
        continue;
      }
      if (arg.raw_value.indexOf('%') != -1) {
        m=definition_pattern.matcher(arg.raw_value);
        sb=new StringBuffer();
        while (m.find()) {
          String definition=TagManager.EscapeOutput(scriptEntry.getResidingQueue().getDefinition(m.group(1)));
          if (definition == null)           definition=""String_Node_Str"";
          m.appendReplacement(sb,definition.replace(""String_Node_Str"",""String_Node_Str""));
        }
        m.appendTail(sb);
        arg=aH.Argument.valueOf(sb.toString());
      }
      if (command.getName().equalsIgnoreCase(""String_Node_Str"") && DenizenAPI.getCurrentInstance().getCommandRegistry().get(arg.getValue()) != null)       if_ignore=true;
      if (arg.matchesPrefix(""String_Node_Str"") && !if_ignore) {
        dB.echoDebug(scriptEntry,""String_Node_Str"" + arg.getValue());
        String value=TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),arg.getValue(),false,scriptEntry);
        dPlayer player=dPlayer.valueOf(value);
        if (player == null || !player.isValid()) {
          dB.echoError(value + ""String_Node_Str"");
          return false;
        }
        scriptEntry.setPlayer(player);
      }
 else       if (arg.matchesPrefix(""String_Node_Str"") && !if_ignore) {
        dB.echoDebug(scriptEntry,""String_Node_Str"" + arg.getValue());
        String value=TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),arg.getValue(),false,scriptEntry);
        dNPC npc=dNPC.valueOf(value);
        if (npc == null || !npc.isValid()) {
          dB.echoError(value + ""String_Node_Str"");
          return false;
        }
        scriptEntry.setNPC(npc);
      }
 else       if (arg.matchesPrefix(""String_Node_Str"") && !if_ignore) {
        String saveName=TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),arg.getValue(),false,scriptEntry);
        dB.echoDebug(scriptEntry,""String_Node_Str"" + saveName + ""String_Node_Str"");
        scriptEntry.getResidingQueue().holdScriptEntry(saveName,scriptEntry);
      }
 else       newArgs.add(arg.raw_value);
    }
    scriptEntry.setArguments(newArgs);
    scriptEntry.setArguments(TagManager.fillArguments(scriptEntry.getArguments(),scriptEntry,false));
    command.parseArgs(scriptEntry);
  }
 catch (  InvalidArgumentsException e) {
    keepGoing=false;
    dB.echoError(""String_Node_Str"");
    if (e.getMessage() != null && e.getMessage().length() > 0)     dB.log(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
    dB.log(""String_Node_Str"" + command.getUsageHint());
    dB.echoDebug(scriptEntry,DebugElement.Footer);
    scriptEntry.setFinished(true);
  }
catch (  Exception e) {
    keepGoing=false;
    dB.echoError(""String_Node_Str"");
    dB.echoError(e);
    dB.echoDebug(scriptEntry,DebugElement.Footer);
    scriptEntry.setFinished(true);
  }
 finally {
    if (keepGoing)     try {
      command.execute(scriptEntry);
    }
 catch (    Exception e) {
      dB.echoError(""String_Node_Str"");
      dB.echoError(e);
      scriptEntry.setFinished(true);
    }
  }
  return true;
}",0.9902519061866616
10255,"@Override public void execute(final ScriptEntry scriptEntry) throws CommandExecutionException {
  Element name=(Element)scriptEntry.getObject(""String_Node_Str"");
  dB.report(scriptEntry,getName(),name.debug());
  NPC npc=scriptEntry.getNPC().getCitizen();
  Location prev=npc.isSpawned() ? npc.getEntity().getLocation() : null;
  npc.despawn(DespawnReason.PENDING_RESPAWN);
  npc.setName(name.asString().length() > 16 ? name.asString().substring(0,16) : name.asString());
  if (prev != null)   npc.spawn(prev);
}","@Override public void execute(final ScriptEntry scriptEntry) throws CommandExecutionException {
  Element name=(Element)scriptEntry.getObject(""String_Node_Str"");
  dB.report(scriptEntry,getName(),name.debug());
  NPC npc=scriptEntry.getNPC().getCitizen();
  Location prev=npc.isSpawned() ? npc.getEntity().getLocation() : null;
  npc.despawn(DespawnReason.PENDING_RESPAWN);
  npc.setName(name.asString().length() > 100 ? name.asString().substring(0,100) : name.asString());
  if (prev != null)   npc.spawn(prev);
}",0.9941520467836256
10256,"public void switchBlock(Location interactLocation,SwitchState switchState,Player player){
  World world=interactLocation.getWorld();
  boolean currentState=(interactLocation.getBlock().getData() & 0x8) > 0;
  String state=switchState.toString();
  CraftPlayer craftPlayer=(CraftPlayer)player;
  if (craftPlayer == null && Bukkit.getOnlinePlayers().length > 0) {
    if (Bukkit.getOnlinePlayers().length > 0) {
      craftPlayer=(CraftPlayer)Bukkit.getOnlinePlayers()[0];
    }
 else {
      for (      NPC npc : CitizensAPI.getNPCRegistry()) {
        if (npc.isSpawned() && npc.getEntity() instanceof Player) {
          craftPlayer=(CraftPlayer)npc.getEntity();
          break;
        }
      }
    }
  }
  if ((state.equals(""String_Node_Str"") && !currentState) || (state.equals(""String_Node_Str"") && currentState) || state.equals(""String_Node_Str"")) {
    try {
      Block.e(interactLocation.getBlock().getType().getId()).interact(((CraftWorld)world).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),craftPlayer != null ? craftPlayer.getHandle() : null,0,0f,0f,0f);
      dB.log(""String_Node_Str"" + interactLocation.getBlock().getType().toString() + ""String_Node_Str""+ ((interactLocation.getBlock().getData() & 0x8) > 0 ? ""String_Node_Str"" : ""String_Node_Str""));
    }
 catch (    NullPointerException e) {
      dB.echoError(""String_Node_Str"" + interactLocation.getBlock().getType().toString() + ""String_Node_Str"");
    }
  }
}","public void switchBlock(Location interactLocation,SwitchState switchState,Player player){
  World world=interactLocation.getWorld();
  boolean currentState=(interactLocation.getBlock().getData() & 0x8) > 0;
  String state=switchState.toString();
  CraftPlayer craftPlayer=(CraftPlayer)player;
  if (craftPlayer == null && Bukkit.getOnlinePlayers().size() > 0) {
    if (Bukkit.getOnlinePlayers().size() > 0) {
      craftPlayer=(CraftPlayer)Bukkit.getOnlinePlayers().toArray()[0];
    }
 else {
      for (      NPC npc : CitizensAPI.getNPCRegistry()) {
        if (npc.isSpawned() && npc.getEntity() instanceof Player) {
          craftPlayer=(CraftPlayer)npc.getEntity();
          break;
        }
      }
    }
  }
  if ((state.equals(""String_Node_Str"") && !currentState) || (state.equals(""String_Node_Str"") && currentState) || state.equals(""String_Node_Str"")) {
    try {
      Block.e(interactLocation.getBlock().getType().getId()).interact(((CraftWorld)world).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),craftPlayer != null ? craftPlayer.getHandle() : null,0,0f,0f,0f);
      dB.log(""String_Node_Str"" + interactLocation.getBlock().getType().toString() + ""String_Node_Str""+ ((interactLocation.getBlock().getData() & 0x8) > 0 ? ""String_Node_Str"" : ""String_Node_Str""));
    }
 catch (    NullPointerException e) {
      dB.echoError(""String_Node_Str"" + interactLocation.getBlock().getType().toString() + ""String_Node_Str"");
    }
  }
}",0.9885829415715244
10257,"public dItem getSpecialRecipeResult(ItemStack[] matrix){
  master:   for (  Map.Entry<dItem,dList> entry : ItemScriptContainer.specialrecipesMap.entrySet()) {
    for (int n=0; n < 9; n++) {
      dItem valueN=dItem.valueOf(entry.getValue().get(n));
      dItem matrixN=matrix[n] == null ? new dItem(Material.AIR) : new dItem(matrix[n].clone());
      valueN.setStackSize(1);
      matrixN.setStackSize(1);
      if (!valueN.identify().equals(matrixN.identify())) {
        continue master;
      }
    }
    return entry.getKey();
  }
  return null;
}","public dItem getSpecialRecipeResult(ItemStack[] matrix){
  master:   for (  Map.Entry<dItem,dList> entry : ItemScriptContainer.specialrecipesMap.entrySet()) {
    for (int n=0; n < 9; n++) {
      dItem valueN=dItem.valueOf(entry.getValue().get(n));
      dItem matrixN=matrix.length <= n || matrix[n] == null ? new dItem(Material.AIR) : new dItem(matrix[n].clone());
      valueN.setStackSize(1);
      matrixN.setStackSize(1);
      if (!valueN.identify().equals(matrixN.identify())) {
        continue master;
      }
    }
    return entry.getKey();
  }
  return null;
}",0.9804618117229128
10258,"/** 
 * Finds the closest Player to a particular location.
 * @param location    The location to find the closest Player to.
 * @param range    The maximum range to look for the Player.
 * @return    The closest Player to the location, or null if no Player was foundwithin the range specified.
 */
public static Player getClosestPlayer(Location location,int range){
  Player closestPlayer=null;
  double closestDistance=Math.pow(range,2);
  List<Player> playerList=new ArrayList<Player>(Arrays.asList(Bukkit.getOnlinePlayers()));
  Iterator<Player> it=playerList.iterator();
  while (it.hasNext()) {
    Player player=it.next();
    Location loc=player.getLocation();
    if (loc.getWorld().equals(location.getWorld()) && loc.distanceSquared(location) < closestDistance) {
      closestPlayer=player;
      closestDistance=player.getLocation().distanceSquared(location);
    }
  }
  return closestPlayer;
}","/** 
 * Finds the closest Player to a particular location.
 * @param location    The location to find the closest Player to.
 * @param range    The maximum range to look for the Player.
 * @return    The closest Player to the location, or null if no Player was foundwithin the range specified.
 */
public static Player getClosestPlayer(Location location,int range){
  Player closestPlayer=null;
  double closestDistance=Math.pow(range,2);
  List<Player> playerList=new ArrayList<Player>(Bukkit.getOnlinePlayers());
  Iterator<Player> it=playerList.iterator();
  while (it.hasNext()) {
    Player player=it.next();
    Location loc=player.getLocation();
    if (loc.getWorld().equals(location.getWorld()) && loc.distanceSquared(location) < closestDistance) {
      closestPlayer=player;
      closestDistance=player.getLocation().distanceSquared(location);
    }
  }
  return closestPlayer;
}",0.991652754590985
10259,"/** 
 * Finds the closest Players to a particular location.
 * @param location    The location to find the closest Player to.
 * @param range    The maximum range to look for the Player.
 * @return    The closest Player to the location, or null if no Player was foundwithin the range specified.
 */
public static List<dPlayer> getClosestPlayers(Location location,int range){
  List<dPlayer> closestPlayers=new ArrayList<dPlayer>();
  double closestDistance=Math.pow(range,2);
  List<Player> playerList=new ArrayList<Player>(Arrays.asList(Bukkit.getOnlinePlayers()));
  Iterator<Player> it=playerList.iterator();
  while (it.hasNext()) {
    Player player=it.next();
    Location loc=player.getLocation();
    if (loc.getWorld().equals(location.getWorld()) && loc.distanceSquared(location) < closestDistance) {
      closestPlayers.add(dPlayer.mirrorBukkitPlayer(player));
    }
  }
  return closestPlayers;
}","/** 
 * Finds the closest Players to a particular location.
 * @param location    The location to find the closest Player to.
 * @param range    The maximum range to look for the Player.
 * @return    The closest Player to the location, or null if no Player was foundwithin the range specified.
 */
public static List<dPlayer> getClosestPlayers(Location location,int range){
  List<dPlayer> closestPlayers=new ArrayList<dPlayer>();
  double closestDistance=Math.pow(range,2);
  List<Player> playerList=new ArrayList<Player>(Bukkit.getOnlinePlayers());
  Iterator<Player> it=playerList.iterator();
  while (it.hasNext()) {
    Player player=it.next();
    Location loc=player.getLocation();
    if (loc.getWorld().equals(location.getWorld()) && loc.distanceSquared(location) < closestDistance) {
      closestPlayers.add(dPlayer.mirrorBukkitPlayer(player));
    }
  }
  return closestPlayers;
}",0.991671293725708
10260,"@Override public void run(){
  BufferedReader in=null;
  try {
    URL url=new URL(""String_Node_Str"");
    HttpURLConnection uc=(HttpURLConnection)url.openConnection();
    uc.setDoInput(true);
    uc.setDoOutput(true);
    uc.setConnectTimeout(10000);
    uc.connect();
    StringBuilder pluginlist=new StringBuilder();
    int newlineLength=0;
    int pluginCount=Bukkit.getPluginManager().getPlugins().length;
    for (    Plugin pl : Bukkit.getPluginManager().getPlugins()) {
      String temp=((char)0x01) + (pl.isEnabled() ? ""String_Node_Str"" : ""String_Node_Str"") + pl.getName()+ ""String_Node_Str""+ pl.getDescription().getVersion()+ ""String_Node_Str"";
      pluginlist.append(temp);
      newlineLength+=temp.length();
      if (newlineLength > 80) {
        newlineLength=0;
        pluginlist.append(""String_Node_Str"");
      }
    }
    StringBuilder worldlist=new StringBuilder();
    newlineLength=0;
    int worldCount=Bukkit.getWorlds().size();
    for (    World w : Bukkit.getWorlds()) {
      String temp=w.getName() + ""String_Node_Str"";
      worldlist.append(temp);
      newlineLength+=temp.length();
      if (newlineLength > 80) {
        newlineLength=0;
        worldlist.append(""String_Node_Str"");
      }
    }
    StringBuilder playerlist=new StringBuilder();
    newlineLength=0;
    int playerCount=Bukkit.getOnlinePlayers().length;
    for (    Player pla : Bukkit.getOnlinePlayers()) {
      String temp=pla.getDisplayName().replace(ChatColor.COLOR_CHAR,(char)0x01) + ((char)0x01) + ""String_Node_Str""+ pla.getName()+ ""String_Node_Str"";
      playerlist.append(temp);
      newlineLength+=temp.length();
      if (newlineLength > 80) {
        newlineLength=0;
        playerlist.append(""String_Node_Str"");
      }
    }
    if (playerlist.length() < 2)     playerlist.append(""String_Node_Str"");
    uc.getOutputStream().write((""String_Node_Str"" + ""String_Node_Str"" + URLEncoder.encode(Bukkit.getServer().getMotd().replace(ChatColor.COLOR_CHAR,(char)0x01)) + ""String_Node_Str""+ URLEncoder.encode(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ Bukkit.getServer().getVersion()+ ""String_Node_Str""+ pluginCount+ ""String_Node_Str""+ pluginlist.substring(0,pluginlist.length() - 2)+ ""String_Node_Str""+ worldCount+ ""String_Node_Str""+ worldlist.substring(0,worldlist.length() - 2)+ ""String_Node_Str""+ playerCount+ ""String_Node_Str""+ playerlist.substring(0,playerlist.length() - 2)+ ""String_Node_Str"")+ recording).getBytes(""String_Node_Str""));
    in=new BufferedReader(new InputStreamReader(uc.getInputStream()));
    Result=in.readLine();
    in.close();
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
 finally {
    try {
      if (in != null)       in.close();
    }
 catch (    Exception e) {
      dB.echoError(e);
    }
  }
}","@Override public void run(){
  BufferedReader in=null;
  try {
    URL url=new URL(""String_Node_Str"");
    HttpURLConnection uc=(HttpURLConnection)url.openConnection();
    uc.setDoInput(true);
    uc.setDoOutput(true);
    uc.setConnectTimeout(10000);
    uc.connect();
    StringBuilder pluginlist=new StringBuilder();
    int newlineLength=0;
    int pluginCount=Bukkit.getPluginManager().getPlugins().length;
    for (    Plugin pl : Bukkit.getPluginManager().getPlugins()) {
      String temp=((char)0x01) + (pl.isEnabled() ? ""String_Node_Str"" : ""String_Node_Str"") + pl.getName()+ ""String_Node_Str""+ pl.getDescription().getVersion()+ ""String_Node_Str"";
      pluginlist.append(temp);
      newlineLength+=temp.length();
      if (newlineLength > 80) {
        newlineLength=0;
        pluginlist.append(""String_Node_Str"");
      }
    }
    StringBuilder worldlist=new StringBuilder();
    newlineLength=0;
    int worldCount=Bukkit.getWorlds().size();
    for (    World w : Bukkit.getWorlds()) {
      String temp=w.getName() + ""String_Node_Str"";
      worldlist.append(temp);
      newlineLength+=temp.length();
      if (newlineLength > 80) {
        newlineLength=0;
        worldlist.append(""String_Node_Str"");
      }
    }
    StringBuilder playerlist=new StringBuilder();
    newlineLength=0;
    int playerCount=Bukkit.getOnlinePlayers().size();
    for (    Player pla : Bukkit.getOnlinePlayers()) {
      String temp=pla.getDisplayName().replace(ChatColor.COLOR_CHAR,(char)0x01) + ((char)0x01) + ""String_Node_Str""+ pla.getName()+ ""String_Node_Str"";
      playerlist.append(temp);
      newlineLength+=temp.length();
      if (newlineLength > 80) {
        newlineLength=0;
        playerlist.append(""String_Node_Str"");
      }
    }
    if (playerlist.length() < 2)     playerlist.append(""String_Node_Str"");
    uc.getOutputStream().write((""String_Node_Str"" + ""String_Node_Str"" + URLEncoder.encode(Bukkit.getServer().getMotd().replace(ChatColor.COLOR_CHAR,(char)0x01)) + ""String_Node_Str""+ URLEncoder.encode(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ Bukkit.getServer().getVersion()+ ""String_Node_Str""+ pluginCount+ ""String_Node_Str""+ pluginlist.substring(0,pluginlist.length() - 2)+ ""String_Node_Str""+ worldCount+ ""String_Node_Str""+ worldlist.substring(0,worldlist.length() - 2)+ ""String_Node_Str""+ playerCount+ ""String_Node_Str""+ playerlist.substring(0,playerlist.length() - 2)+ ""String_Node_Str"")+ recording).getBytes(""String_Node_Str""));
    in=new BufferedReader(new InputStreamReader(uc.getInputStream()));
    Result=in.readLine();
    in.close();
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
 finally {
    try {
      if (in != null)       in.close();
    }
 catch (    Exception e) {
      dB.echoError(e);
    }
  }
}",0.9978494623655914
10261,"public boolean isInsideCuboid(Location location){
  for (  LocationPair pair : pairs) {
    if (!location.getWorld().equals(pair.low.getWorld()))     continue;
    if (!Utilities.isBetween(pair.low.getBlockX(),pair.high.getBlockX(),location.getBlockX()))     continue;
    if (!Utilities.isBetween(pair.low.getBlockY(),pair.high.getBlockY(),location.getBlockY()))     continue;
    if (Utilities.isBetween(pair.low.getBlockZ(),pair.high.getBlockZ(),location.getZ()))     return true;
  }
  return false;
}","public boolean isInsideCuboid(Location location){
  for (  LocationPair pair : pairs) {
    if (!location.getWorld().equals(pair.low.getWorld()))     continue;
    if (!Utilities.isBetween(pair.low.getBlockX(),pair.high.getBlockX(),location.getBlockX()))     continue;
    if (!Utilities.isBetween(pair.low.getBlockY(),pair.high.getBlockY(),location.getBlockY()))     continue;
    if (Utilities.isBetween(pair.low.getBlockZ(),pair.high.getBlockZ(),location.getBlockZ()))     return true;
  }
  return false;
}",0.9950738916256158
10262,"@Override public String identify(){
  if (isUnique())   return ""String_Node_Str"" + NotableManager.getSavedId(this);
 else {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    for (    LocationPair pair : pairs) {
      sb.append(pair.low.getBlockX()).append(',').append(pair.low.getBlockY()).append(',').append(pair.low.getBlockZ()).append(',').append(pair.low.getWorld().getName()).append('|').append(pair.high.getBlockX()).append(',').append(pair.high.getBlockZ()).append(',').append(pair.high.getBlockZ()).append(',').append(pair.high.getWorld().getName()).append('|');
    }
    return sb.toString().substring(0,sb.toString().length() - 1);
  }
}","@Override public String identify(){
  if (isUnique())   return ""String_Node_Str"" + NotableManager.getSavedId(this);
 else {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    for (    LocationPair pair : pairs) {
      sb.append(pair.low.getBlockX()).append(',').append(pair.low.getBlockY()).append(',').append(pair.low.getBlockZ()).append(',').append(pair.low.getWorld().getName()).append('|').append(pair.high.getBlockX()).append(',').append(pair.high.getBlockY()).append(',').append(pair.high.getBlockZ()).append(',').append(pair.high.getWorld().getName()).append('|');
    }
    return sb.toString().substring(0,sb.toString().length() - 1);
  }
}",0.9985272459499264
10263,"public static void reloadEntities(){
  if (entities == null)   entities=new HashMap<UUID,String>();
  entities.clear();
  ConfigurationSection entity_scripts=DenizenAPI.getCurrentInstance().getEntities().getConfigurationSection(""String_Node_Str"");
  if (entity_scripts == null)   return;
  for (  String Path : entity_scripts.getKeys(false)) {
    UUID id=UUID.fromString(Path);
    String scriptname=entity_scripts.getString(Path + ""String_Node_Str"");
    entities.put(id,scriptname);
  }
}","public static void reloadEntities(){
  entities.clear();
  ConfigurationSection entity_scripts=DenizenAPI.getCurrentInstance().getEntities().getConfigurationSection(""String_Node_Str"");
  if (entity_scripts == null)   return;
  for (  String Path : entity_scripts.getKeys(false)) {
    UUID id=UUID.fromString(Path);
    String scriptname=entity_scripts.getString(Path + ""String_Node_Str"");
    entities.put(id,scriptname);
  }
}",0.9314472252448314
10264,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && (attribute.startsWith(""String_Node_Str"",2) || attribute.startsWith(""String_Node_Str"",2))&& attribute.hasContext(2)) {
    Comparable com=new net.aufdemrand.denizen.scripts.commands.core.Comparable();
    String operator;
    if (attribute.getContext(1).startsWith(""String_Node_Str"")) {
      operator=attribute.getContext(1).substring(1);
      com.setNegativeLogic();
    }
 else     operator=attribute.getContext(1);
    Comparable.Operator comparableOperator=null;
    try {
      comparableOperator=Comparable.Operator.valueOf(operator.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").toUpperCase());
    }
 catch (    IllegalArgumentException e) {
    }
    if (comparableOperator != null) {
      com.setOperator(comparableOperator);
      com.setComparable(element);
      com.setComparedto(attribute.getContext(2));
      return new Element(com.determineOutcome()).getAttribute(attribute.fulfill(2));
    }
 else {
      dB.echoError(""String_Node_Str"" + operator + ""String_Node_Str"");
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Double.valueOf(element)).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Math.round(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    try {
      DecimalFormat d=new DecimalFormat(""String_Node_Str"");
      return new Element(d.format(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
    }
 catch (    NumberFormatException e) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dCuboid.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dEntity.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dInventory.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dItem.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dList.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dLocation.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dMaterial.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dNPC.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlayer.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlugin.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dScript.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,Duration.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dWorld.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.Escape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.unEscape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    String contains=attribute.getContext(1);
    if (contains.toLowerCase().startsWith(""String_Node_Str"")) {
      if (Pattern.compile(contains.substring((""String_Node_Str"").length()),Pattern.CASE_INSENSITIVE).matcher(element).matches())       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
 else     if (element.toLowerCase().contains(contains.toLowerCase()))     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.endsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1))   return new Element(element.matches(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.getLastColors(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(element.length()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.startsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.indexOf(attribute.getContext(1)) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.lastIndexOf(attribute.getContext(1)) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    int index=attribute.getIntContext(1) - 1;
    if (index < 0 || index >= element.length())     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return new Element(String.valueOf(element.charAt(index))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(element.indexOf(delimiter) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(0,element.indexOf(delimiter))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String replace=attribute.getContext(1);
    String replacement=""String_Node_Str"";
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"")) {
      if (attribute.hasContext(1)) {
        replacement=attribute.getContext(1);
        if (replacement == null)         replacement=""String_Node_Str"";
        attribute.fulfill(1);
      }
    }
    return new Element(element.replace(replace,replacement)).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.startsWith(""String_Node_Str"",2)) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    Integer limit=(attribute.hasContext(2) ? attribute.getIntContext(2) : 1);
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1],limit))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string,limit))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1]))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    FormatScriptContainer format=ScriptRegistry.getScriptContainerAs(attribute.getContext(1),FormatScriptContainer.class);
    if (format == null) {
      dB.echoError(""String_Node_Str"" + attribute.getContext(1) + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
 else {
      return new Element(format.getFormattedText(element,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getNPC() : null,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getPlayer() : null)).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.stripColor(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(element.trim()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toUpperCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (element.length() == 0) {
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
    StringBuilder TitleCase=new StringBuilder(element.length());
    String Upper=element.toUpperCase();
    String Lower=element.toLowerCase();
    TitleCase.append(Upper.charAt(0));
    for (int i=1; i < element.length(); i++) {
      if (element.charAt(i - 1) == ' ')       TitleCase.append(Upper.charAt(i));
 else       TitleCase.append(Lower.charAt(i));
    }
    return new Element(TitleCase.toString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    int beginning_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[0]).asInt() - 1;
    int ending_index;
    if (attribute.getContext(1).split(""String_Node_Str"").length > 1)     ending_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[1]).asInt();
 else     ending_index=element.length();
    if (beginning_index < 0)     beginning_index=0;
    if (beginning_index > element.length())     beginning_index=element.length();
    if (ending_index > element.length())     ending_index=element.length();
    if (ending_index < beginning_index)     ending_index=beginning_index;
    return new Element(element.substring(beginning_index,ending_index)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    String padded=element;
    while (padded.length() < length) {
      padded=with + padded;
    }
    return new Element(padded).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    StringBuilder padded=new StringBuilder(element);
    while (padded.length() < length) {
      padded.append(with);
    }
    return new Element(padded.toString()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.abs(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() + aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() / aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() % aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() * aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sqrt(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() - aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.pow(asDouble(),aH.getDoubleFrom(attribute.getContext(1)))).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.asin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.acos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.atan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.cos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.tan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toDegrees(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toRadians(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.ceil(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.floor(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.round(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.attributes.size() > 0) {
    dB.echoDebug(attribute.getScriptEntry(),""String_Node_Str"" + attribute.attributes.toString() + ""String_Node_Str""+ attribute.getOrigin()+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
 else {
    return element;
  }
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && (attribute.startsWith(""String_Node_Str"",2) || attribute.startsWith(""String_Node_Str"",2))&& attribute.hasContext(2)) {
    Comparable com=new net.aufdemrand.denizen.scripts.commands.core.Comparable();
    String operator;
    if (attribute.getContext(1).startsWith(""String_Node_Str"")) {
      operator=attribute.getContext(1).substring(1);
      com.setNegativeLogic();
    }
 else     operator=attribute.getContext(1);
    Comparable.Operator comparableOperator=null;
    try {
      comparableOperator=Comparable.Operator.valueOf(operator.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").toUpperCase());
    }
 catch (    IllegalArgumentException e) {
    }
    if (comparableOperator != null) {
      com.setOperator(comparableOperator);
      com.setComparable(element);
      com.setComparedto(attribute.getContext(2));
      return new Element(com.determineOutcome()).getAttribute(attribute.fulfill(2));
    }
 else {
      dB.echoError(""String_Node_Str"" + operator + ""String_Node_Str"");
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Double.valueOf(element)).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Math.round(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    try {
      DecimalFormat d=new DecimalFormat(""String_Node_Str"");
      return new Element(d.format(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
    }
 catch (    NumberFormatException e) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dCuboid.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dEntity.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dInventory.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dItem.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dList.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dLocation.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dMaterial.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dNPC.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlayer.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlugin.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dScript.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,Duration.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dWorld.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,ScriptQueue.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.Escape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.unEscape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    String contains=attribute.getContext(1);
    if (contains.toLowerCase().startsWith(""String_Node_Str"")) {
      if (Pattern.compile(contains.substring((""String_Node_Str"").length()),Pattern.CASE_INSENSITIVE).matcher(element).matches())       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
 else     if (element.toLowerCase().contains(contains.toLowerCase()))     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.endsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1))   return new Element(element.matches(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.getLastColors(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(element.length()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.startsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.indexOf(attribute.getContext(1)) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.lastIndexOf(attribute.getContext(1)) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    int index=attribute.getIntContext(1) - 1;
    if (index < 0 || index >= element.length())     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return new Element(String.valueOf(element.charAt(index))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(element.indexOf(delimiter) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(0,element.indexOf(delimiter))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String replace=attribute.getContext(1);
    String replacement=""String_Node_Str"";
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"")) {
      if (attribute.hasContext(1)) {
        replacement=attribute.getContext(1);
        if (replacement == null)         replacement=""String_Node_Str"";
        attribute.fulfill(1);
      }
    }
    return new Element(element.replace(replace,replacement)).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.startsWith(""String_Node_Str"",2)) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    Integer limit=(attribute.hasContext(2) ? attribute.getIntContext(2) : 1);
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1],limit))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string,limit))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1]))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    FormatScriptContainer format=ScriptRegistry.getScriptContainerAs(attribute.getContext(1),FormatScriptContainer.class);
    if (format == null) {
      dB.echoError(""String_Node_Str"" + attribute.getContext(1) + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
 else {
      return new Element(format.getFormattedText(element,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getNPC() : null,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getPlayer() : null)).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.stripColor(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(element.trim()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toUpperCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (element.length() == 0) {
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
    StringBuilder TitleCase=new StringBuilder(element.length());
    String Upper=element.toUpperCase();
    String Lower=element.toLowerCase();
    TitleCase.append(Upper.charAt(0));
    for (int i=1; i < element.length(); i++) {
      if (element.charAt(i - 1) == ' ')       TitleCase.append(Upper.charAt(i));
 else       TitleCase.append(Lower.charAt(i));
    }
    return new Element(TitleCase.toString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    int beginning_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[0]).asInt() - 1;
    int ending_index;
    if (attribute.getContext(1).split(""String_Node_Str"").length > 1)     ending_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[1]).asInt();
 else     ending_index=element.length();
    if (beginning_index < 0)     beginning_index=0;
    if (beginning_index > element.length())     beginning_index=element.length();
    if (ending_index > element.length())     ending_index=element.length();
    if (ending_index < beginning_index)     ending_index=beginning_index;
    return new Element(element.substring(beginning_index,ending_index)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    String padded=element;
    while (padded.length() < length) {
      padded=with + padded;
    }
    return new Element(padded).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    StringBuilder padded=new StringBuilder(element);
    while (padded.length() < length) {
      padded.append(with);
    }
    return new Element(padded.toString()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.abs(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() + aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() / aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() % aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() * aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sqrt(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() - aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.pow(asDouble(),aH.getDoubleFrom(attribute.getContext(1)))).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.asin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.acos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.atan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.cos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.tan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toDegrees(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toRadians(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.ceil(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.floor(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.round(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.attributes.size() > 0) {
    dB.echoDebug(attribute.getScriptEntry(),""String_Node_Str"" + attribute.attributes.toString() + ""String_Node_Str""+ attribute.getOrigin()+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
 else {
    return element;
  }
}",0.9952730846632658
10265,"public dItem getSpecialRecipeResult(ItemStack[] matrix){
  master:   for (  Map.Entry<dItem,dList> entry : ItemScriptContainer.specialrecipesMap.entrySet()) {
    for (int n=0; n < 9; n++) {
      if (!dItem.valueOf(entry.getValue().get(n)).identify().equals(new dItem(matrix[n]).identify())) {
        continue master;
      }
    }
    return entry.getKey();
  }
  return null;
}","public dItem getSpecialRecipeResult(ItemStack[] matrix){
  master:   for (  Map.Entry<dItem,dList> entry : ItemScriptContainer.specialrecipesMap.entrySet()) {
    for (int n=0; n < 9; n++) {
      dItem valueN=dItem.valueOf(entry.getValue().get(n));
      dItem matrixN=new dItem(matrix[n].clone());
      valueN.setStackSize(1);
      matrixN.setStackSize(1);
      if (!valueN.identify().equals(matrixN.identify())) {
        continue master;
      }
    }
    return entry.getKey();
  }
  return null;
}",0.7891770011273957
10266,"@EventHandler public void playerEggThrow(PlayerEggThrowEvent event){
  Map<String,dObject> context=new HashMap<String,dObject>();
  dEntity egg=new dEntity(event.getEgg());
  context.put(""String_Node_Str"",egg);
  context.put(""String_Node_Str"",new Element(event.isHatching()));
  List<String> events=new ArrayList<String>();
  events.add(""String_Node_Str"");
  if (event.isHatching())   events.add(""String_Node_Str"");
 else   events.add(""String_Node_Str"");
  String determination=EventManager.doEvents(events,null,new dPlayer(event.getPlayer()),context);
  if (dEntity.matches(determination)) {
    event.setHatching(true);
    event.setHatchingType(dEntity.valueOf(determination).getEntityType());
  }
}","@EventHandler public void playerEggThrow(PlayerEggThrowEvent event){
  Map<String,dObject> context=new HashMap<String,dObject>();
  dEntity egg=new dEntity(event.getEgg());
  context.put(""String_Node_Str"",egg);
  context.put(""String_Node_Str"",new Element(event.isHatching()));
  List<String> events=new ArrayList<String>();
  events.add(""String_Node_Str"");
  if (event.isHatching())   events.add(""String_Node_Str"");
 else   events.add(""String_Node_Str"");
  String determination=EventManager.doEvents(events,null,new dPlayer(event.getPlayer()),context);
  if (determination.equalsIgnoreCase(""String_Node_Str"")) {
    event.setHatching(false);
  }
 else   if (dEntity.matches(determination)) {
    event.setHatching(true);
    event.setHatchingType(dEntity.valueOf(determination).getEntityType());
  }
}",0.934131736526946
10267,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(id).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(script_entries.size()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String state;
    if (is_started)     state=""String_Node_Str"";
 else     if (is_stopping)     state=""String_Node_Str"";
 else     state=""String_Node_Str"";
    return new Element(state).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getAllDefinitions().toString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (reqId < 0 || !DetermineCommand.hasOutcome(reqId))     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return ObjectFetcher.pickObjectFor(DetermineCommand.readOutcome(reqId)).getAttribute(attribute.fulfill(1));
  }
  return new Element(identify()).getAttribute(attribute);
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(id).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(script_entries.size()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String state;
    if (is_started)     state=""String_Node_Str"";
 else     if (is_stopping)     state=""String_Node_Str"";
 else     state=""String_Node_Str"";
    return new Element(state).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && script != null) {
    return script.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dList commands=new dList();
    for (    ScriptEntry entry : script_entries) {
      StringBuilder sb=new StringBuilder();
      sb.append(entry.getCommandName()).append(""String_Node_Str"");
      for (      String arg : entry.getOriginalArguments()) {
        sb.append(arg).append(""String_Node_Str"");
      }
      commands.add(sb.substring(0,sb.length() - 1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getAllDefinitions().toString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (reqId < 0 || !DetermineCommand.hasOutcome(reqId))     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return ObjectFetcher.pickObjectFor(DetermineCommand.readOutcome(reqId)).getAttribute(attribute.fulfill(1));
  }
  return new Element(identify()).getAttribute(attribute);
}",0.802438149874507
10268,"/** 
 * Gets a Queue Object from a string form of q@queue_name.
 * @param string  the string or dScript argument String
 * @return  a ScriptQueue, or null if incorrectly formatted
 */
@Fetchable(""String_Node_Str"") public static ScriptQueue valueOf(String string){
  if (string == null)   return null;
  if (_queueExists(string))   return _getExistingQueue(string);
  return null;
}","/** 
 * Gets a Queue Object from a string form of q@queue_name.
 * @param string  the string or dScript argument String
 * @return  a ScriptQueue, or null if incorrectly formatted
 */
@Fetchable(""String_Node_Str"") public static ScriptQueue valueOf(String string){
  if (string == null)   return null;
  if (string.startsWith(""String_Node_Str"") && string.length() > 2)   string=string.substring(2);
  if (_queueExists(string))   return _getExistingQueue(string);
  return null;
}",0.8870779976717112
10269,"/** 
 * Starts the script queue.
 */
public void start(){
  if (is_started)   return;
  is_started=true;
  boolean is_delayed=delay_time > System.currentTimeMillis();
  Class<? extends ScriptQueue> clazz=this.cachedClass == null ? this.cachedClass=getClass() : this.cachedClass;
  String name=classNameCache.get(clazz);
  if (name == null)   classNameCache.put(clazz,name=clazz.getSimpleName());
  if (is_delayed) {
    dB.echoDebug(this,""String_Node_Str"" + name + ""String_Node_Str""+ id+ ""String_Node_Str""+ ""String_Node_Str""+ new Duration(((double)(delay_time - System.currentTimeMillis())) / 1000f).identify()+ ""String_Node_Str"");
  }
 else   dB.echoDebug(this,""String_Node_Str"" + name + ""String_Node_Str""+ id+ ""String_Node_Str"");
  if (is_delayed) {
    Bukkit.getScheduler().scheduleSyncDelayedTask(DenizenAPI.getCurrentInstance(),new Runnable(){
      @Override public void run(){
        onStart();
      }
    }
,(long)(((double)(delay_time - System.currentTimeMillis())) / 1000 * 20));
  }
 else   onStart();
}","/** 
 * Starts the script queue.
 */
public void start(){
  if (is_started)   return;
  is_started=true;
  boolean is_delayed=delay_time > System.currentTimeMillis();
  if (script_entries.size() > 0)   script=script_entries.get(0).getScript();
  Class<? extends ScriptQueue> clazz=this.cachedClass == null ? this.cachedClass=getClass() : this.cachedClass;
  String name=classNameCache.get(clazz);
  if (name == null)   classNameCache.put(clazz,name=clazz.getSimpleName());
  if (is_delayed) {
    dB.echoDebug(this,""String_Node_Str"" + name + ""String_Node_Str""+ id+ ""String_Node_Str""+ ""String_Node_Str""+ new Duration(((double)(delay_time - System.currentTimeMillis())) / 1000f).identify()+ ""String_Node_Str"");
  }
 else   dB.echoDebug(this,""String_Node_Str"" + name + ""String_Node_Str""+ id+ ""String_Node_Str"");
  if (is_delayed) {
    Bukkit.getScheduler().scheduleSyncDelayedTask(DenizenAPI.getCurrentInstance(),new Runnable(){
      @Override public void run(){
        onStart();
      }
    }
,(long)(((double)(delay_time - System.currentTimeMillis())) / 1000 * 20));
  }
 else   onStart();
}",0.9635243960208432
10270,"@EventHandler public void queueTag(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  Attribute attribute=new Attribute(event.raw_tag,event.getScriptEntry()).fulfill(1);
  if (event.hasNameContext()) {
    if (ScriptQueue._queueExists(event.getNameContext()))     event.setReplaced(Element.NULL.getAttribute(attribute.fulfill(1)));
 else     event.setReplaced(ScriptQueue._getExistingQueue(event.getNameContext()).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    event.setReplaced(new Element(ScriptQueue._queueExists(attribute.getContext(1))).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new Element(ScriptQueue._getStats()).getAttribute(attribute.fulfill(1)));
    return;
  }
  event.setReplaced(event.getScriptEntry().getResidingQueue().getAttribute(attribute));
}","@EventHandler public void queueTag(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  Attribute attribute=new Attribute(event.raw_tag,event.getScriptEntry()).fulfill(1);
  if (event.hasNameContext()) {
    if (ScriptQueue._queueExists(event.getNameContext()))     event.setReplaced(Element.NULL.getAttribute(attribute.fulfill(1)));
 else     event.setReplaced(ScriptQueue._getExistingQueue(event.getNameContext()).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    event.setReplaced(new Element(ScriptQueue._queueExists(attribute.getContext(1))).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new Element(ScriptQueue._getStats()).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new dList(ScriptQueue._getQueues()).getAttribute(attribute.fulfill(1)));
    return;
  }
  event.setReplaced(event.getScriptEntry().getResidingQueue().getAttribute(attribute));
}",0.9231508165225744
10271,"public void setComparedto(String arg){
  if (operator == Comparable.Operator.MATCHES)   comparable=String.valueOf(comparable);
  if (comparable instanceof String)   comparedto=arg;
 else   if (comparable instanceof Double || comparable instanceof Integer) {
    if (aH.matchesInteger(arg))     comparedto=aH.getIntegerFrom(arg);
 else     if (aH.matchesDouble(arg))     comparedto=aH.getDoubleFrom(arg);
 else {
      dB.log(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ comparable+ ""String_Node_Str""+ arg+ ""String_Node_Str"");
      comparedto=Double.NaN;
    }
  }
 else   if (comparable instanceof Boolean) {
    comparedto=aH.getBooleanFrom(arg);
  }
 else   if (comparable instanceof dList) {
    if (dList.matches(arg))     comparedto=dList.valueOf(arg);
 else     comparedto=arg;
  }
 else   comparedto=arg;
}","public void setComparedto(String arg){
  if (operator == Comparable.Operator.MATCHES)   comparable=String.valueOf(comparable);
  if (comparable instanceof String)   comparedto=arg;
 else   if (comparable instanceof Double || comparable instanceof Integer) {
    if (aH.matchesInteger(arg))     comparedto=aH.getIntegerFrom(arg);
 else     if (aH.matchesDouble(arg))     comparedto=aH.getDoubleFrom(arg);
 else {
      if (!arg.equalsIgnoreCase(""String_Node_Str""))       dB.log(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ comparable+ ""String_Node_Str""+ arg+ ""String_Node_Str"");
      comparedto=Double.NaN;
    }
  }
 else   if (comparable instanceof Boolean) {
    comparedto=aH.getBooleanFrom(arg);
  }
 else   if (comparable instanceof dList) {
    if (dList.matches(arg))     comparedto=dList.valueOf(arg);
 else     comparedto=arg;
  }
 else   comparedto=arg;
}",0.9701149425287356
10272,"@EventHandler public void blockForm(BlockFormEvent event){
  Map<String,dObject> context=new HashMap<String,dObject>();
  dMaterial material=dMaterial.getMaterialFrom(event.getBlock().getType(),event.getBlock().getData());
  context.put(""String_Node_Str"",new dLocation(event.getBlock().getLocation()));
  context.put(""String_Node_Str"",material);
  String determination=EventManager.doEvents(Arrays.asList(""String_Node_Str"",material.identifySimple() + ""String_Node_Str""),null,null,context,true);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
}","@EventHandler public void blockForm(BlockFormEvent event){
  Map<String,dObject> context=new HashMap<String,dObject>();
  dMaterial material=dMaterial.getMaterialFrom(event.getNewState().getType(),event.getNewState().getData().getData());
  context.put(""String_Node_Str"",new dLocation(event.getBlock().getLocation()));
  context.put(""String_Node_Str"",material);
  String determination=EventManager.doEvents(Arrays.asList(""String_Node_Str"",material.identifySimple() + ""String_Node_Str""),null,null,context,true);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
}",0.9698492462311558
10273,"public int asInt(){
  return Integer.valueOf(element.replaceAll(""String_Node_Str"",""String_Node_Str""));
}","public int asInt(){
  try {
    return Integer.valueOf(element.replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  NumberFormatException ex) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return 0;
  }
}",0.6028985507246377
10274,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && (attribute.startsWith(""String_Node_Str"",2) || attribute.startsWith(""String_Node_Str"",2))&& attribute.hasContext(2)) {
    Comparable com=new net.aufdemrand.denizen.scripts.commands.core.Comparable();
    com.setComparable(element);
    com.setComparedto(attribute.getContext(2));
    String operator;
    if (attribute.getContext(1).startsWith(""String_Node_Str"")) {
      operator=attribute.getContext(1).substring(1);
      com.setNegativeLogic();
    }
 else     operator=attribute.getContext(1);
    Comparable.Operator comparableOperator=null;
    try {
      comparableOperator=Comparable.Operator.valueOf(operator.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").toUpperCase());
    }
 catch (    IllegalArgumentException e) {
    }
    if (comparableOperator != null) {
      com.setOperator(comparableOperator);
      return new Element(com.determineOutcome()).getAttribute(attribute.fulfill(2));
    }
 else {
      dB.echoError(""String_Node_Str"" + operator + ""String_Node_Str"");
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(Boolean.valueOf(element).toString()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Double.valueOf(element)).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Math.round(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    try {
      DecimalFormat d=new DecimalFormat(""String_Node_Str"");
      return new Element(d.format(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
    }
 catch (    NumberFormatException e) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dCuboid.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dEntity.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dInventory.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dItem.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dList.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dLocation.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dMaterial.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dNPC.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlayer.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlugin.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dScript.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,Duration.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dWorld.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.Escape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    String contains=attribute.getContext(1);
    if (contains.toLowerCase().startsWith(""String_Node_Str"")) {
      if (Pattern.compile(contains.substring((""String_Node_Str"").length()),Pattern.CASE_INSENSITIVE).matcher(element).matches())       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
 else     if (element.toLowerCase().contains(contains.toLowerCase()))     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.endsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1))   return new Element(element.matches(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.getLastColors(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(element.length()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.startsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.indexOf(attribute.getContext(1)) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.lastIndexOf(attribute.getContext(1)) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    int index=attribute.getIntContext(1) - 1;
    if (index < 0 || index >= element.length())     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return new Element(String.valueOf(element.charAt(index))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(element.indexOf(delimiter) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(0,element.indexOf(delimiter))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String replace=attribute.getContext(1);
    String replacement=""String_Node_Str"";
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"")) {
      if (attribute.hasContext(1)) {
        replacement=attribute.getContext(1);
        if (replacement == null)         replacement=""String_Node_Str"";
        attribute.fulfill(1);
      }
    }
    return new Element(element.replace(replace,replacement)).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.startsWith(""String_Node_Str"",2)) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    Integer limit=(attribute.hasContext(2) ? attribute.getIntContext(2) : 1);
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1],limit))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string,limit))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1]))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    FormatScriptContainer format=ScriptRegistry.getScriptContainerAs(attribute.getContext(1),FormatScriptContainer.class);
    if (format == null) {
      dB.echoError(""String_Node_Str"" + attribute.getContext(1) + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
 else {
      return new Element(format.getFormattedText(element,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getNPC() : null,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getPlayer() : null)).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.stripColor(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(element.trim()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toUpperCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (element.length() == 0) {
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
    StringBuilder TitleCase=new StringBuilder(element.length());
    String Upper=element.toUpperCase();
    String Lower=element.toLowerCase();
    TitleCase.append(Upper.charAt(0));
    for (int i=1; i < element.length(); i++) {
      if (element.charAt(i - 1) == ' ')       TitleCase.append(Upper.charAt(i));
 else       TitleCase.append(Lower.charAt(i));
    }
    return new Element(TitleCase.toString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    int beginning_index=Integer.valueOf(attribute.getContext(1).split(""String_Node_Str"")[0]) - 1;
    int ending_index;
    if (attribute.getContext(1).split(""String_Node_Str"").length > 1)     ending_index=Integer.valueOf(attribute.getContext(1).split(""String_Node_Str"")[1]);
 else     ending_index=element.length();
    if (beginning_index < 0)     beginning_index=0;
    if (beginning_index > element.length())     beginning_index=element.length();
    if (ending_index > element.length())     ending_index=element.length();
    if (ending_index < beginning_index)     ending_index=beginning_index;
    return new Element(element.substring(beginning_index,ending_index)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    String padded=element;
    while (padded.length() < length) {
      padded=with + padded;
    }
    return new Element(padded).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    StringBuilder padded=new StringBuilder(element);
    while (padded.length() < length) {
      padded.append(with);
    }
    return new Element(padded.toString()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.abs(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() + aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() / aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() % aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() * aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sqrt(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() - aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.pow(asDouble(),aH.getDoubleFrom(attribute.getContext(1)))).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.asin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.acos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.atan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.cos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.tan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toDegrees(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toRadians(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.ceil(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.floor(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.round(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.attributes.size() > 0) {
    dB.echoDebug(attribute.getScriptEntry(),""String_Node_Str"" + attribute.attributes.toString() + ""String_Node_Str""+ attribute.getOrigin()+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
 else {
    return element;
  }
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && (attribute.startsWith(""String_Node_Str"",2) || attribute.startsWith(""String_Node_Str"",2))&& attribute.hasContext(2)) {
    Comparable com=new net.aufdemrand.denizen.scripts.commands.core.Comparable();
    com.setComparable(element);
    com.setComparedto(attribute.getContext(2));
    String operator;
    if (attribute.getContext(1).startsWith(""String_Node_Str"")) {
      operator=attribute.getContext(1).substring(1);
      com.setNegativeLogic();
    }
 else     operator=attribute.getContext(1);
    Comparable.Operator comparableOperator=null;
    try {
      comparableOperator=Comparable.Operator.valueOf(operator.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").toUpperCase());
    }
 catch (    IllegalArgumentException e) {
    }
    if (comparableOperator != null) {
      com.setOperator(comparableOperator);
      return new Element(com.determineOutcome()).getAttribute(attribute.fulfill(2));
    }
 else {
      dB.echoError(""String_Node_Str"" + operator + ""String_Node_Str"");
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"") || element.equalsIgnoreCase(""String_Node_Str"")).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Double.valueOf(element)).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Math.round(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    try {
      DecimalFormat d=new DecimalFormat(""String_Node_Str"");
      return new Element(d.format(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
    }
 catch (    NumberFormatException e) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dCuboid.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dEntity.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dInventory.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dItem.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dList.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dLocation.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dMaterial.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dNPC.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlayer.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlugin.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dScript.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,Duration.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dWorld.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EscapeTags.Escape(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    String contains=attribute.getContext(1);
    if (contains.toLowerCase().startsWith(""String_Node_Str"")) {
      if (Pattern.compile(contains.substring((""String_Node_Str"").length()),Pattern.CASE_INSENSITIVE).matcher(element).matches())       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
 else     if (element.toLowerCase().contains(contains.toLowerCase()))     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.endsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1))   return new Element(element.matches(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.getLastColors(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(element.length()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.startsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.indexOf(attribute.getContext(1)) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.lastIndexOf(attribute.getContext(1)) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    int index=attribute.getIntContext(1) - 1;
    if (index < 0 || index >= element.length())     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return new Element(String.valueOf(element.charAt(index))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(element.indexOf(delimiter) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(0,element.indexOf(delimiter))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String replace=attribute.getContext(1);
    String replacement=""String_Node_Str"";
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"")) {
      if (attribute.hasContext(1)) {
        replacement=attribute.getContext(1);
        if (replacement == null)         replacement=""String_Node_Str"";
        attribute.fulfill(1);
      }
    }
    return new Element(element.replace(replace,replacement)).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.startsWith(""String_Node_Str"",2)) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    Integer limit=(attribute.hasContext(2) ? attribute.getIntContext(2) : 1);
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1],limit))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string,limit))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1]))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    FormatScriptContainer format=ScriptRegistry.getScriptContainerAs(attribute.getContext(1),FormatScriptContainer.class);
    if (format == null) {
      dB.echoError(""String_Node_Str"" + attribute.getContext(1) + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
 else {
      return new Element(format.getFormattedText(element,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getNPC() : null,attribute.getScriptEntry() != null ? attribute.getScriptEntry().getPlayer() : null)).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.stripColor(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(element.trim()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toUpperCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (element.length() == 0) {
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
    StringBuilder TitleCase=new StringBuilder(element.length());
    String Upper=element.toUpperCase();
    String Lower=element.toLowerCase();
    TitleCase.append(Upper.charAt(0));
    for (int i=1; i < element.length(); i++) {
      if (element.charAt(i - 1) == ' ')       TitleCase.append(Upper.charAt(i));
 else       TitleCase.append(Lower.charAt(i));
    }
    return new Element(TitleCase.toString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    int beginning_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[0]).asInt() - 1;
    int ending_index;
    if (attribute.getContext(1).split(""String_Node_Str"").length > 1)     ending_index=new Element(attribute.getContext(1).split(""String_Node_Str"")[1]).asInt();
 else     ending_index=element.length();
    if (beginning_index < 0)     beginning_index=0;
    if (beginning_index > element.length())     beginning_index=element.length();
    if (ending_index > element.length())     ending_index=element.length();
    if (ending_index < beginning_index)     ending_index=beginning_index;
    return new Element(element.substring(beginning_index,ending_index)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    String padded=element;
    while (padded.length() < length) {
      padded=with + padded;
    }
    return new Element(padded).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String with=String.valueOf((char)0x00A0);
    int length=attribute.getIntContext(1);
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
      with=String.valueOf(attribute.getContext(1).charAt(0));
      attribute=attribute.fulfill(1);
    }
    StringBuilder padded=new StringBuilder(element);
    while (padded.length() < length) {
      padded.append(with);
    }
    return new Element(padded.toString()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.abs(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() + aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() / aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() % aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() * aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sqrt(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() - aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.pow(asDouble(),aH.getDoubleFrom(attribute.getContext(1)))).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.asin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.acos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.atan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.cos(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sin(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.tan(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toDegrees(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.toRadians(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.ceil(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.floor(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.round(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.attributes.size() > 0) {
    dB.echoDebug(attribute.getScriptEntry(),""String_Node_Str"" + attribute.attributes.toString() + ""String_Node_Str""+ attribute.getOrigin()+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
 else {
    return element;
  }
}",0.9943529635078062
10275,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && !arg.matchesPrefix(""String_Node_Str"") && arg.matchesArgumentType(dItem.class)) {
      scriptEntry.addObject(""String_Node_Str"",new Element(Action.DROP_ITEM.toString()).setPrefix(""String_Node_Str""));
      scriptEntry.addObject(""String_Node_Str"",dItem.valueOf(arg.getValue(),scriptEntry.getPlayer(),scriptEntry.getNPC()).setPrefix(""String_Node_Str""));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",new Element(Action.DROP_EXP.toString()).setPrefix(""String_Node_Str""));
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(dEntity.class)) {
      scriptEntry.addObject(""String_Node_Str"",new Element(Action.DROP_ENTITY.toString()).setPrefix(""String_Node_Str""));
      scriptEntry.addObject(""String_Node_Str"",arg.asType(dEntity.class).setPrefix(""String_Node_Str""));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(dLocation.class))     scriptEntry.addObject(""String_Node_Str"",arg.asType(dLocation.class).setPrefix(""String_Node_Str""));
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Double))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Integer))     scriptEntry.addObject(""String_Node_Str"",arg.asElement().setPrefix(""String_Node_Str""));
 else     arg.reportUnhandled();
  }
  if (!scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!scriptEntry.hasObject(""String_Node_Str""))   if (scriptEntry.getPlayer() != null && scriptEntry.getPlayer().isOnline()) {
    scriptEntry.addObject(""String_Node_Str"",scriptEntry.getPlayer().getLocation().setPrefix(""String_Node_Str""));
    dB.echoDebug(scriptEntry,""String_Node_Str"");
  }
 else   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!scriptEntry.hasObject(""String_Node_Str""))   scriptEntry.addObject(""String_Node_Str"",Element.valueOf(""String_Node_Str"").setPrefix(""String_Node_Str""));
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && !arg.matchesPrefix(""String_Node_Str"") && arg.matchesArgumentList(dItem.class)) {
      scriptEntry.addObject(""String_Node_Str"",new Element(Action.DROP_ITEM.toString()).setPrefix(""String_Node_Str""));
      scriptEntry.addObject(""String_Node_Str"",arg.asType(dList.class).filter(dItem.class));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",new Element(Action.DROP_EXP.toString()).setPrefix(""String_Node_Str""));
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(dEntity.class)) {
      scriptEntry.addObject(""String_Node_Str"",new Element(Action.DROP_ENTITY.toString()).setPrefix(""String_Node_Str""));
      scriptEntry.addObject(""String_Node_Str"",arg.asType(dEntity.class).setPrefix(""String_Node_Str""));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(dLocation.class))     scriptEntry.addObject(""String_Node_Str"",arg.asType(dLocation.class).setPrefix(""String_Node_Str""));
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Double))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Integer))     scriptEntry.addObject(""String_Node_Str"",arg.asElement().setPrefix(""String_Node_Str""));
 else     arg.reportUnhandled();
  }
  if (!scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!scriptEntry.hasObject(""String_Node_Str""))   if (scriptEntry.getPlayer() != null && scriptEntry.getPlayer().isOnline()) {
    scriptEntry.addObject(""String_Node_Str"",scriptEntry.getPlayer().getLocation().setPrefix(""String_Node_Str""));
    dB.echoDebug(scriptEntry,""String_Node_Str"");
  }
 else   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!scriptEntry.hasObject(""String_Node_Str""))   scriptEntry.addObject(""String_Node_Str"",Element.valueOf(""String_Node_Str"").setPrefix(""String_Node_Str""));
}",0.970200085142614
10276,"@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  dLocation location=(dLocation)scriptEntry.getObject(""String_Node_Str"");
  Element qty=scriptEntry.getElement(""String_Node_Str"");
  Element action=scriptEntry.getElement(""String_Node_Str"");
  Element speed=scriptEntry.getElement(""String_Node_Str"");
  dItem item=(dItem)scriptEntry.getObject(""String_Node_Str"");
  dEntity entity=(dEntity)scriptEntry.getObject(""String_Node_Str"");
  dB.report(scriptEntry,getName(),action.debug() + location.debug() + qty.debug()+ (item != null ? item.debug() : ""String_Node_Str"")+ (entity != null ? entity.debug() : ""String_Node_Str"")+ (speed != null ? speed.debug() : ""String_Node_Str""));
  dList entityList=new dList();
switch (Action.valueOf(action.asString())) {
case DROP_EXP:
    dEntity orb=new dEntity(location.getWorld().spawnEntity(location,EntityType.EXPERIENCE_ORB));
  ((ExperienceOrb)orb.getBukkitEntity()).setExperience(qty.asInt());
entityList.add(orb.toString());
break;
case DROP_ITEM:
if (qty.asInt() > 1 && item.isUnique()) dB.echoDebug(scriptEntry,""String_Node_Str"");
for (int x=0; x < qty.asInt(); x++) {
dEntity e=new dEntity(location.getWorld().dropItemNaturally(location,item.getItemStack()));
e.setVelocity(e.getVelocity().multiply(speed != null ? speed.asDouble() : 1d));
entityList.add(e.toString());
}
break;
case DROP_ENTITY:
if (qty.asInt() > 1 && entity.isUnique()) {
dB.echoDebug(scriptEntry,""String_Node_Str"");
entity.spawnAt(location);
entityList.add(entity.toString());
break;
}
for (int x=0; x < qty.asInt(); x++) {
ArrayList<Mechanism> mechanisms=new ArrayList<Mechanism>();
for (Mechanism mechanism : entity.getWaitingMechanisms()) {
mechanisms.add(new Mechanism(new Element(mechanism.getName()),mechanism.getValue()));
}
dEntity ent=new dEntity(entity.getEntityType(),mechanisms);
ent.spawnAt(location);
entityList.add(ent.toString());
}
break;
}
scriptEntry.addObject(""String_Node_Str"",entityList);
}","@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  dLocation location=(dLocation)scriptEntry.getObject(""String_Node_Str"");
  Element qty=scriptEntry.getElement(""String_Node_Str"");
  Element action=scriptEntry.getElement(""String_Node_Str"");
  Element speed=scriptEntry.getElement(""String_Node_Str"");
  List<dItem> items=(List<dItem>)scriptEntry.getObject(""String_Node_Str"");
  dEntity entity=(dEntity)scriptEntry.getObject(""String_Node_Str"");
  dB.report(scriptEntry,getName(),action.debug() + location.debug() + qty.debug()+ (items != null ? aH.debugList(""String_Node_Str"",items) : ""String_Node_Str"")+ (entity != null ? entity.debug() : ""String_Node_Str"")+ (speed != null ? speed.debug() : ""String_Node_Str""));
  dList entityList=new dList();
switch (Action.valueOf(action.asString())) {
case DROP_EXP:
    dEntity orb=new dEntity(location.getWorld().spawnEntity(location,EntityType.EXPERIENCE_ORB));
  ((ExperienceOrb)orb.getBukkitEntity()).setExperience(qty.asInt());
entityList.add(orb.toString());
break;
case DROP_ITEM:
for (dItem item : items) {
if (qty.asInt() > 1 && item.isUnique()) dB.echoDebug(scriptEntry,""String_Node_Str"");
for (int x=0; x < qty.asInt(); x++) {
dEntity e=new dEntity(location.getWorld().dropItemNaturally(location,item.getItemStack()));
e.setVelocity(e.getVelocity().multiply(speed != null ? speed.asDouble() : 1d));
entityList.add(e.toString());
}
}
break;
case DROP_ENTITY:
if (qty.asInt() > 1 && entity.isUnique()) {
dB.echoDebug(scriptEntry,""String_Node_Str"");
entity.spawnAt(location);
entityList.add(entity.toString());
break;
}
for (int x=0; x < qty.asInt(); x++) {
ArrayList<Mechanism> mechanisms=new ArrayList<Mechanism>();
for (Mechanism mechanism : entity.getWaitingMechanisms()) {
mechanisms.add(new Mechanism(new Element(mechanism.getName()),mechanism.getValue()));
}
dEntity ent=new dEntity(entity.getEntityType(),mechanisms);
ent.spawnAt(location);
entityList.add(ent.toString());
}
break;
}
scriptEntry.addObject(""String_Node_Str"",entityList);
}",0.974974974974975
10277,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (entity == null && entity_type == null) {
    if (npc != null) {
      return new Element(identify()).getAttribute(attribute);
    }
    dB.echoError(""String_Node_Str"");
    return Element.NULL.getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE.toString()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getObjectType()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(entity_type.name()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isSpawned()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getEntityId()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getUUID().toString()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(EntityScript == null ? ""String_Node_Str"" : EntityScript).getAttribute(attribute.fulfill(1));
  }
  if (entity == null) {
    return new Element(identify()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (CustomNBT.hasCustomNBT(getLivingEntity(),""String_Node_Str""))     return new dScript(CustomNBT.getCustomNBT(getLivingEntity(),""String_Node_Str"")).getAttribute(attribute.fulfill(1));
 else     return new Element(entity.getType().name()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isLivingEntity() || getLivingEntity().getCustomName() == null)     return Element.NULL.getAttribute(attribute.fulfill(1));
    return new Element(getLivingEntity().getCustomName()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isLivingEntity())     return Element.NULL.getAttribute(attribute.fulfill(2));
    return new Element(getLivingEntity().isCustomNameVisible()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isNPC())     return new Element(getNPC().getName()).getAttribute(attribute.fulfill(1));
    if (entity instanceof Player)     return new Element(((Player)entity).getName()).getAttribute(attribute.fulfill(1));
    return new Element(entity.getType().getName()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (entity.getMetadata(""String_Node_Str"").size() == 0)     return ""String_Node_Str"";
    return new Element(entity.getMetadata(""String_Node_Str"").get(0).asString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getBoots() != null) {
      return new dItem(getLivingEntity().getEquipment().getBoots()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getChestplate() != null) {
      return new dItem(getLivingEntity().getEquipment().getChestplate()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getHelmet() != null) {
      return new dItem(getLivingEntity().getEquipment().getHelmet()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getLeggings() != null) {
      return new dItem(getLivingEntity().getEquipment().getLeggings()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"")) {
    return getEquipment().getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new dItem(getLivingEntity().getEquipment().getItemInHand()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && dEntity.matches(attribute.getContext(1))) {
      dEntity toEntity=dEntity.valueOf(attribute.getContext(1));
      return new Element(getLivingEntity().hasLineOfSight(toEntity.getBukkitEntity())).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getEyeLocation()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity())     return new Element(getLivingEntity().getEyeHeight()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    int range=attribute.getIntContext(2);
    if (range < 1)     range=50;
    return new dLocation(getLivingEntity().getTargetBlock(null,range).getLocation().clone()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(entity.getLocation().clone().add(0,-1,0)).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dLocation(entity.getLocation()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dLocation(entity.getVelocity().toLocation(entity.getWorld())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dWorld(entity.getWorld()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getCanPickupItems()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getFallDistance()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(entity.getFireTicks() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity() && getLivingEntity().isLeashed()) {
      return new dEntity(getLivingEntity().getLeashHolder()).getAttribute(attribute.fulfill(1));
    }
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!entity.isEmpty())     return new dEntity(entity.getPassenger()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (isProjectile() && hasShooter())     return getShooter().getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (entity.isInsideVehicle())     return new dEntity(entity.getVehicle()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    Boolean returnElement=false;
    if (attribute.hasContext(1)) {
      for (      org.bukkit.potion.PotionEffect effect : getLivingEntity().getActivePotionEffects())       if (effect.getType().equals(PotionEffectType.getByName(attribute.getContext(1))))       returnElement=true;
    }
 else     if (!getLivingEntity().getActivePotionEffects().isEmpty())     returnElement=true;
    return new Element(returnElement).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHealth=getLivingEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHealth=attribute.getIntContext(2);
    if ((float)getLivingEntity().getHealth() / maxHealth < .10)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < .40)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < .75)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < 1)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getMaxHealth()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHealth=getLivingEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHealth=attribute.getIntContext(2);
    return new Element((getLivingEntity().getHealth() / maxHealth) * 100).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getHealth()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.isEmpty()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.isInsideVehicle()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity())     return new Element(getLivingEntity().isLeashed()).getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.isOnGround()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity())     return new Element(!getLivingEntity().getRemoveWhenFarAway()).getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dPlayer(getLivingEntity().getKiller()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getLastDamage()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getLastDamageCause().getCause().name()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getLivingEntity().getNoDamageTicks()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getLivingEntity().getMaximumAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getLivingEntity().getRemainingAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getRemoveWhenFarAway()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(entity.getTicksLived() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isLivingEntity()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isPlayer() && !isNPC())     return Element.TRUE.getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isNPC()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isPlayer()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isProjectile()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityTame.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityAge.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityFramed.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityColor.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityPowered.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntitySize.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityFirework.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(""String_Node_Str"" + getEntityType().name().toLowerCase() + PropertyParser.getPropertiesString(this)).getAttribute(attribute.fulfill(1));
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new Element(identify()).getAttribute(attribute);
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (entity == null && entity_type == null) {
    if (npc != null) {
      return new Element(identify()).getAttribute(attribute);
    }
    dB.echoError(""String_Node_Str"");
    return Element.NULL.getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE.toString()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getObjectType()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(entity_type.name()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isSpawned()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getEntityId()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getUUID().toString()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(EntityScript == null ? ""String_Node_Str"" : EntityScript).getAttribute(attribute.fulfill(1));
  }
  if (entity == null) {
    return new Element(identify()).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (CustomNBT.hasCustomNBT(getLivingEntity(),""String_Node_Str""))     return new dScript(CustomNBT.getCustomNBT(getLivingEntity(),""String_Node_Str"")).getAttribute(attribute.fulfill(1));
 else     return new Element(entity.getType().name()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isLivingEntity() || getLivingEntity().getCustomName() == null)     return Element.NULL.getAttribute(attribute.fulfill(1));
    return new Element(getLivingEntity().getCustomName()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isLivingEntity())     return Element.NULL.getAttribute(attribute.fulfill(2));
    return new Element(getLivingEntity().isCustomNameVisible()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isNPC())     return new Element(getNPC().getName()).getAttribute(attribute.fulfill(1));
    if (entity instanceof Player)     return new Element(((Player)entity).getName()).getAttribute(attribute.fulfill(1));
    return new Element(entity.getType().getName()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getBoots() != null) {
      return new dItem(getLivingEntity().getEquipment().getBoots()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getChestplate() != null) {
      return new dItem(getLivingEntity().getEquipment().getChestplate()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getHelmet() != null) {
      return new dItem(getLivingEntity().getEquipment().getHelmet()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getLeggings() != null) {
      return new dItem(getLivingEntity().getEquipment().getLeggings()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"")) {
    return getEquipment().getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new dItem(getLivingEntity().getEquipment().getItemInHand()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && dEntity.matches(attribute.getContext(1))) {
      dEntity toEntity=dEntity.valueOf(attribute.getContext(1));
      return new Element(getLivingEntity().hasLineOfSight(toEntity.getBukkitEntity())).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getEyeLocation()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity())     return new Element(getLivingEntity().getEyeHeight()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    int range=attribute.getIntContext(2);
    if (range < 1)     range=50;
    return new dLocation(getLivingEntity().getTargetBlock(null,range).getLocation().clone()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(entity.getLocation().clone().add(0,-1,0)).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dLocation(entity.getLocation()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dLocation(entity.getVelocity().toLocation(entity.getWorld())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dWorld(entity.getWorld()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getCanPickupItems()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getFallDistance()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(entity.getFireTicks() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity() && getLivingEntity().isLeashed()) {
      return new dEntity(getLivingEntity().getLeashHolder()).getAttribute(attribute.fulfill(1));
    }
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!entity.isEmpty())     return new dEntity(entity.getPassenger()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (isProjectile() && hasShooter())     return getShooter().getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (entity.isInsideVehicle())     return new dEntity(entity.getVehicle()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    Boolean returnElement=false;
    if (attribute.hasContext(1)) {
      for (      org.bukkit.potion.PotionEffect effect : getLivingEntity().getActivePotionEffects())       if (effect.getType().equals(PotionEffectType.getByName(attribute.getContext(1))))       returnElement=true;
    }
 else     if (!getLivingEntity().getActivePotionEffects().isEmpty())     returnElement=true;
    return new Element(returnElement).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHealth=getLivingEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHealth=attribute.getIntContext(2);
    if ((float)getLivingEntity().getHealth() / maxHealth < .10)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < .40)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < .75)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < 1)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getMaxHealth()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHealth=getLivingEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHealth=attribute.getIntContext(2);
    return new Element((getLivingEntity().getHealth() / maxHealth) * 100).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getHealth()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.isEmpty()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.isInsideVehicle()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity())     return new Element(getLivingEntity().isLeashed()).getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.isOnGround()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity())     return new Element(!getLivingEntity().getRemoveWhenFarAway()).getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dPlayer(getLivingEntity().getKiller()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getLastDamage()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getLastDamageCause().getCause().name()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getLivingEntity().getNoDamageTicks()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getLivingEntity().getMaximumAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getLivingEntity().getRemainingAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getRemoveWhenFarAway()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(entity.getTicksLived() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isLivingEntity()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isPlayer() && !isNPC())     return Element.TRUE.getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isNPC()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isPlayer()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isProjectile()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityTame.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityAge.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityFramed.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityColor.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityPowered.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntitySize.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityFirework.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(""String_Node_Str"" + getEntityType().name().toLowerCase() + PropertyParser.getPropertiesString(this)).getAttribute(attribute.fulfill(1));
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new Element(identify()).getAttribute(attribute);
}",0.9904621072088724
10278,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",Element.TRUE);
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(dList.class)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asType(dList.class));
      scriptEntry.addObject(""String_Node_Str"",getBracedCommands(scriptEntry,1));
      break;
    }
 else     arg.reportUnhandled();
  }
  if (!scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",Element.TRUE);
      break;
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(dList.class)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asType(dList.class));
      scriptEntry.addObject(""String_Node_Str"",getBracedCommands(scriptEntry,1));
      break;
    }
 else {
      arg.reportUnhandled();
      break;
    }
  }
  if (!scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
}",0.9709228824273072
10279,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Integer)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
      break;
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",Element.TRUE);
 else     arg.reportUnhandled();
  }
  if (!scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.addObject(""String_Node_Str"",getBracedCommands(scriptEntry,1));
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Integer)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
      break;
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",Element.TRUE);
      break;
    }
 else {
      arg.reportUnhandled();
      break;
    }
  }
  if (!scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.addObject(""String_Node_Str"",getBracedCommands(scriptEntry,1));
}",0.97084917617237
10280,"@EventHandler public void inventoryClickEvent(InventoryClickEvent event){
  Map<String,dObject> context=new HashMap<String,dObject>();
  dItem item=null;
  dItem holding;
  dPlayer player=new dPlayer((Player)event.getWhoClicked());
  String type=event.getInventory().getType().name();
  String click=event.getClick().name();
  String slotType=event.getSlotType().name();
  List<String> events=new ArrayList<String>();
  events.add(""String_Node_Str"");
  events.add(""String_Node_Str"" + type);
  String interaction=""String_Node_Str"" + click + ""String_Node_Str"";
  events.add(interaction + ""String_Node_Str"");
  events.add(interaction + ""String_Node_Str"" + type);
  if (event.getCursor() != null) {
    holding=new dItem(event.getCursor());
    context.put(""String_Node_Str"",holding);
    events.add(interaction + ""String_Node_Str"" + holding.identifySimple());
    events.add(interaction + ""String_Node_Str"" + type+ ""String_Node_Str""+ holding.identifySimple());
    events.add(interaction + ""String_Node_Str"" + holding.identifyMaterial());
    events.add(interaction + ""String_Node_Str"" + type+ ""String_Node_Str""+ holding.identifyMaterial());
    events.add(""String_Node_Str"" + holding.identifySimple());
    events.add(""String_Node_Str"" + type + ""String_Node_Str""+ holding.identifySimple());
    events.add(""String_Node_Str"" + holding.identifyMaterial());
    events.add(""String_Node_Str"" + type + ""String_Node_Str""+ holding.identifyMaterial());
  }
  if (event.getCurrentItem() != null) {
    item=new dItem(event.getCurrentItem());
    events.add(""String_Node_Str"" + item.identifySimple() + ""String_Node_Str"");
    events.add(interaction + item.identifySimple() + ""String_Node_Str"");
    events.add(""String_Node_Str"" + item.identifySimple() + ""String_Node_Str""+ type);
    events.add(interaction + item.identifySimple() + ""String_Node_Str""+ type);
    events.add(""String_Node_Str"" + item.identifyMaterial() + ""String_Node_Str"");
    events.add(interaction + item.identifyMaterial() + ""String_Node_Str"");
    events.add(""String_Node_Str"" + item.identifyMaterial() + ""String_Node_Str""+ type);
    events.add(interaction + item.identifyMaterial() + ""String_Node_Str""+ type);
    if (event.getCursor() != null) {
      holding=new dItem(event.getCursor());
      events.add(""String_Node_Str"" + item.identifySimple() + ""String_Node_Str""+ holding.identifySimple());
      events.add(interaction + item.identifySimple() + ""String_Node_Str""+ holding.identifySimple());
      events.add(interaction + item.identifySimple() + ""String_Node_Str""+ type+ ""String_Node_Str""+ holding.identifySimple());
      events.add(""String_Node_Str"" + item.identifySimple() + ""String_Node_Str""+ holding.identifyMaterial());
      events.add(interaction + item.identifySimple() + ""String_Node_Str""+ holding.identifyMaterial());
      events.add(interaction + item.identifySimple() + ""String_Node_Str""+ type+ ""String_Node_Str""+ holding.identifyMaterial());
      events.add(""String_Node_Str"" + item.identifyMaterial() + ""String_Node_Str""+ holding.identifyMaterial());
      events.add(interaction + item.identifyMaterial() + ""String_Node_Str""+ holding.identifyMaterial());
      events.add(interaction + item.identifyMaterial() + ""String_Node_Str""+ type+ ""String_Node_Str""+ holding.identifyMaterial());
      events.add(""String_Node_Str"" + item.identifyMaterial() + ""String_Node_Str""+ holding.identifySimple());
      events.add(interaction + item.identifyMaterial() + ""String_Node_Str""+ holding.identifySimple());
      events.add(interaction + item.identifyMaterial() + ""String_Node_Str""+ type+ ""String_Node_Str""+ holding.identifySimple());
    }
  }
  events=EventManager.trimEvents(events);
  if (events.size() == 0)   return;
  context.put(""String_Node_Str"",item);
  context.put(""String_Node_Str"",dInventory.mirrorBukkitInventory(event.getInventory()));
  context.put(""String_Node_Str"",new Element(click));
  context.put(""String_Node_Str"",new Element(slotType));
  context.put(""String_Node_Str"",new Element(event.getSlot() + 1));
  context.put(""String_Node_Str"",new Element(event.isShiftClick()));
  context.put(""String_Node_Str"",new Element(event.getAction().name()));
  String determination=EventManager.doEvents(events,null,player,context,true);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
}","@EventHandler public void inventoryClickEvent(InventoryClickEvent event){
  Map<String,dObject> context=new HashMap<String,dObject>();
  dItem item=null;
  dItem holding;
  dPlayer player=new dPlayer((Player)event.getWhoClicked());
  String type=event.getInventory().getType().name();
  String click=event.getClick().name();
  String slotType=event.getSlotType().name();
  List<String> events=new ArrayList<String>();
  events.add(""String_Node_Str"");
  events.add(""String_Node_Str"" + type);
  String interaction=""String_Node_Str"" + click + ""String_Node_Str"";
  events.add(interaction + ""String_Node_Str"");
  events.add(interaction + ""String_Node_Str"" + type);
  if (event.getCursor() != null) {
    holding=new dItem(event.getCursor());
    context.put(""String_Node_Str"",holding);
    events.add(interaction + ""String_Node_Str"" + holding.identifySimple());
    events.add(interaction + ""String_Node_Str"" + type+ ""String_Node_Str""+ holding.identifySimple());
    events.add(interaction + ""String_Node_Str"" + holding.identifyMaterial());
    events.add(interaction + ""String_Node_Str"" + type+ ""String_Node_Str""+ holding.identifyMaterial());
    events.add(""String_Node_Str"" + holding.identifySimple());
    events.add(""String_Node_Str"" + type + ""String_Node_Str""+ holding.identifySimple());
    events.add(""String_Node_Str"" + holding.identifyMaterial());
    events.add(""String_Node_Str"" + type + ""String_Node_Str""+ holding.identifyMaterial());
  }
  if (event.getCurrentItem() != null) {
    item=new dItem(event.getCurrentItem());
    events.add(""String_Node_Str"" + item.identifySimple() + ""String_Node_Str"");
    events.add(interaction + item.identifySimple() + ""String_Node_Str"");
    events.add(""String_Node_Str"" + item.identifySimple() + ""String_Node_Str""+ type);
    events.add(interaction + item.identifySimple() + ""String_Node_Str""+ type);
    events.add(""String_Node_Str"" + item.identifyMaterial() + ""String_Node_Str"");
    events.add(interaction + item.identifyMaterial() + ""String_Node_Str"");
    events.add(""String_Node_Str"" + item.identifyMaterial() + ""String_Node_Str""+ type);
    events.add(interaction + item.identifyMaterial() + ""String_Node_Str""+ type);
    if (event.getCursor() != null) {
      holding=new dItem(event.getCursor());
      events.add(""String_Node_Str"" + item.identifySimple() + ""String_Node_Str""+ holding.identifySimple());
      events.add(interaction + item.identifySimple() + ""String_Node_Str""+ holding.identifySimple());
      events.add(interaction + item.identifySimple() + ""String_Node_Str""+ type+ ""String_Node_Str""+ holding.identifySimple());
      events.add(""String_Node_Str"" + item.identifySimple() + ""String_Node_Str""+ holding.identifyMaterial());
      events.add(interaction + item.identifySimple() + ""String_Node_Str""+ holding.identifyMaterial());
      events.add(interaction + item.identifySimple() + ""String_Node_Str""+ type+ ""String_Node_Str""+ holding.identifyMaterial());
      events.add(""String_Node_Str"" + item.identifyMaterial() + ""String_Node_Str""+ holding.identifyMaterial());
      events.add(interaction + item.identifyMaterial() + ""String_Node_Str""+ holding.identifyMaterial());
      events.add(interaction + item.identifyMaterial() + ""String_Node_Str""+ type+ ""String_Node_Str""+ holding.identifyMaterial());
      events.add(""String_Node_Str"" + item.identifyMaterial() + ""String_Node_Str""+ holding.identifySimple());
      events.add(interaction + item.identifyMaterial() + ""String_Node_Str""+ holding.identifySimple());
      events.add(interaction + item.identifyMaterial() + ""String_Node_Str""+ type+ ""String_Node_Str""+ holding.identifySimple());
    }
  }
  context.put(""String_Node_Str"",item);
  context.put(""String_Node_Str"",dInventory.mirrorBukkitInventory(event.getInventory()));
  context.put(""String_Node_Str"",new Element(click));
  context.put(""String_Node_Str"",new Element(slotType));
  context.put(""String_Node_Str"",new Element(event.getSlot() + 1));
  context.put(""String_Node_Str"",new Element(event.isShiftClick()));
  context.put(""String_Node_Str"",new Element(event.getAction().name()));
  String determination=EventManager.doEvents(events,null,player,context,true);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
}",0.9908835904628333
10281,"@EventHandler public void playerFish(PlayerFishEvent event){
  dNPC npc=null;
  String state=event.getState().name();
  Map<String,dObject> context=new HashMap<String,dObject>();
  context.put(""String_Node_Str"",new dEntity(event.getHook()));
  context.put(""String_Node_Str"",new Element(state));
  List<String> events=new ArrayList<String>();
  events.add(""String_Node_Str"");
  events.add(""String_Node_Str"" + state);
  if (event.getCaught() != null) {
    dEntity entity=new dEntity(event.getCaught());
    context.put(""String_Node_Str"",entity.getDenizenObject());
    if (entity.isNPC())     npc=entity.getDenizenNPC();
    events.add(""String_Node_Str"" + entity.identifyType());
    events.add(""String_Node_Str"" + entity.identifyType() + ""String_Node_Str""+ state);
  }
  String determination=EventManager.doEvents(events,npc,new dPlayer(event.getPlayer()),context,true);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
}","@EventHandler public void playerFish(PlayerFishEvent event){
  dNPC npc=null;
  String state=event.getState().name();
  Map<String,dObject> context=new HashMap<String,dObject>();
  context.put(""String_Node_Str"",new dEntity(event.getHook()));
  context.put(""String_Node_Str"",new Element(state));
  List<String> events=new ArrayList<String>();
  events.add(""String_Node_Str"");
  events.add(""String_Node_Str"" + state);
  if (event.getCaught() != null) {
    Entity caught=event.getCaught();
    dEntity entity=new dEntity(caught);
    context.put(""String_Node_Str"",entity.getDenizenObject());
    if (caught instanceof Item) {
      context.put(""String_Node_Str"",new dItem(((Item)caught).getItemStack()));
    }
    if (entity.isNPC())     npc=entity.getDenizenNPC();
    events.add(""String_Node_Str"" + entity.identifyType());
    events.add(""String_Node_Str"" + entity.identifyType() + ""String_Node_Str""+ state);
  }
  String determination=EventManager.doEvents(events,npc,new dPlayer(event.getPlayer()),context,true);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
}",0.9118072289156628
10282,"@EventHandler(priority=EventPriority.MONITOR) public void creatureSpawn(CreatureSpawnEvent event){
  String reason=event.getSpawnReason().name();
  Entity entity=event.getEntity();
  entity.setMetadata(""String_Node_Str"",new FixedMetadataValue(DenizenAPI.getCurrentInstance(),reason));
}","@EventHandler(priority=EventPriority.MONITOR) public void creatureSpawn(CreatureSpawnEvent event){
  String reason=event.getSpawnReason().name();
  Entity entity=event.getEntity();
}",0.7777777777777778
10283,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (attribute.startsWith(""String_Node_Str"")) {
    if (item.getItemStack().getData() instanceof Crops)     return new Element(((Crops)item.getItemStack().getData()).getState().name()).getAttribute(attribute.fulfill(1));
 else     if (item.getItemStack().getData() instanceof NetherWarts)     return new Element(((NetherWarts)item.getItemStack().getData()).getState().name()).getAttribute(attribute.fulfill(1));
 else     if (item.getItemStack().getData() instanceof CocoaPlant)     return new Element(((CocoaPlant)item.getItemStack().getData()).getSize().name()).getAttribute(attribute.fulfill(1));
  }
  return null;
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (attribute.startsWith(""String_Node_Str"")) {
    if (item.getItemStack().getData() instanceof Crops)     return new Element(((Crops)item.getItemStack().getData()).getState().name()).getAttribute(attribute.fulfill(1));
 else     if (item.getItemStack().getData() instanceof NetherWarts)     return new Element(((NetherWarts)item.getItemStack().getData()).getState().name()).getAttribute(attribute.fulfill(1));
 else     if (item.getItemStack().getData() instanceof CocoaPlant)     return new Element(((CocoaPlant)item.getItemStack().getData()).getSize().name()).getAttribute(attribute.fulfill(1));
 else     return new Element(item.getItemStack().getData().getData()).getAttribute(attribute.fulfill(1));
  }
  return null;
}",0.9325699745547074
10284,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  List<Comparable> comparables=new ArrayList<Comparable>();
  comparables.add(new Comparable());
  boolean buildingComparables=true;
  TreeMap<Integer,ArrayList<String>> thenOutcome=new TreeMap<Integer,ArrayList<String>>();
  TreeMap<Integer,ArrayList<String>> elseOutcome=new TreeMap<Integer,ArrayList<String>>();
  boolean insideElse=false;
  boolean usedOperator=false;
  boolean newCommand=false;
  int bracketsEntered=0;
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (buildingComparables) {
      if (arg.startsWith(""String_Node_Str"")) {
        comparables.get(comparables.size() - 1).setNegativeLogic();
        if (arg.getValue().length() == 1)         continue;
        if (arg.startsWith(""String_Node_Str""))         arg.replaceValue(""String_Node_Str"");
 else         arg.replaceValue(arg.getValue().substring(1));
      }
      if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
      if (arg.matchesEnum(Comparable.Bridge.values())) {
        comparables.add(new Comparable());
        comparables.get(comparables.size() - 1).bridge=Comparable.Bridge.valueOf(arg.getValue().toUpperCase());
      }
 else       if (arg.matchesEnum(Comparable.Operator.values())) {
        comparables.get(comparables.size() - 1).operator=Comparable.Operator.valueOf(arg.getValue().toUpperCase());
        usedOperator=true;
      }
 else       if (comparables.get(comparables.size() - 1).comparable == null) {
        comparables.get(comparables.size() - 1).setComparable(arg.getValue());
      }
 else       if (!usedOperator && arg.matches(""String_Node_Str"")) {
        buildingComparables=false;
      }
 else       if (!usedOperator && denizen.getCommandRegistry().get(arg.getValue().replace(""String_Node_Str"",""String_Node_Str"")) != null) {
        buildingComparables=false;
      }
 else {
        comparables.get(comparables.size() - 1).setComparedto(arg.getValue());
        usedOperator=false;
      }
    }
    if (!buildingComparables) {
      if (arg.matches(""String_Node_Str"") && bracketsEntered < 2) {
        newCommand=true;
      }
 else       if (!insideElse) {
        if (arg.matches(""String_Node_Str"") && bracketsEntered == 0) {
          insideElse=true;
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered++;
          if (bracketsEntered > 1) {
            thenOutcome.get(thenOutcome.lastKey()).add(arg.raw_value);
          }
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered--;
          if (bracketsEntered > 0) {
            thenOutcome.get(thenOutcome.lastKey()).add(arg.raw_value);
          }
        }
 else         if (newCommand || thenOutcome.size() == 0) {
          thenOutcome.put(thenOutcome.size(),new ArrayList<String>());
          thenOutcome.get(thenOutcome.lastKey()).add(arg.raw_value);
          newCommand=false;
        }
 else {
          thenOutcome.get(thenOutcome.lastKey()).add(arg.raw_value);
        }
      }
 else       if (insideElse) {
        if (arg.matches(""String_Node_Str"")) {
          bracketsEntered++;
          if (bracketsEntered > 1) {
            elseOutcome.get(elseOutcome.lastKey()).add(arg.raw_value);
          }
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered--;
          if (bracketsEntered > 0) {
            elseOutcome.get(elseOutcome.lastKey()).add(arg.raw_value);
          }
        }
 else         if (newCommand || elseOutcome.size() == 0) {
          newCommand=false;
          if (arg.matches(""String_Node_Str"") && elseOutcome.size() == 0) {
            bracketsEntered++;
          }
          elseOutcome.put(elseOutcome.size(),new ArrayList<String>());
          elseOutcome.get(elseOutcome.lastKey()).add(arg.raw_value);
        }
 else {
          elseOutcome.get(elseOutcome.lastKey()).add(arg.raw_value);
        }
      }
    }
  }
  scriptEntry.addObject(""String_Node_Str"",comparables).addObject(""String_Node_Str"",thenOutcome).addObject(""String_Node_Str"",elseOutcome);
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  List<Comparable> comparables=new ArrayList<Comparable>();
  comparables.add(new Comparable());
  boolean buildingComparables=true;
  TreeMap<Integer,ArrayList<String>> thenOutcome=new TreeMap<Integer,ArrayList<String>>();
  TreeMap<Integer,ArrayList<String>> elseOutcome=new TreeMap<Integer,ArrayList<String>>();
  boolean insideElse=false;
  boolean usedOperator=false;
  boolean newCommand=false;
  int bracketsEntered=0;
  List<aH.Argument> OriginalArguments=aH.interpret(scriptEntry.getOriginalArguments());
  List<aH.Argument> Arguments=aH.interpret(scriptEntry.getArguments());
  for (int i=0; i < Arguments.size(); i++) {
    aH.Argument arg=Arguments.get(i);
    aH.Argument originalArg=OriginalArguments.get(i);
    if (buildingComparables) {
      if (arg.startsWith(""String_Node_Str"")) {
        comparables.get(comparables.size() - 1).setNegativeLogic();
        if (arg.getValue().length() == 1)         continue;
        if (arg.startsWith(""String_Node_Str""))         arg.replaceValue(""String_Node_Str"");
 else         arg.replaceValue(arg.getValue().substring(1));
      }
      if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
 else       if (arg.getValue().equals(""String_Node_Str""))       arg.replaceValue(""String_Node_Str"");
      if (arg.matchesEnum(Comparable.Bridge.values())) {
        comparables.add(new Comparable());
        comparables.get(comparables.size() - 1).bridge=Comparable.Bridge.valueOf(arg.getValue().toUpperCase());
      }
 else       if (arg.matchesEnum(Comparable.Operator.values())) {
        comparables.get(comparables.size() - 1).operator=Comparable.Operator.valueOf(arg.getValue().toUpperCase());
        usedOperator=true;
      }
 else       if (comparables.get(comparables.size() - 1).comparable == null) {
        comparables.get(comparables.size() - 1).setComparable(arg.getValue());
      }
 else       if (!usedOperator && arg.matches(""String_Node_Str"")) {
        buildingComparables=false;
      }
 else       if (!usedOperator && denizen.getCommandRegistry().get(arg.getValue().replace(""String_Node_Str"",""String_Node_Str"")) != null) {
        buildingComparables=false;
      }
 else {
        comparables.get(comparables.size() - 1).setComparedto(arg.getValue());
        usedOperator=false;
      }
    }
    if (!buildingComparables) {
      if (arg.matches(""String_Node_Str"") && bracketsEntered < 2) {
        newCommand=true;
      }
 else       if (!insideElse) {
        if (arg.matches(""String_Node_Str"") && bracketsEntered == 0) {
          insideElse=true;
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered++;
          if (bracketsEntered > 1) {
            thenOutcome.get(thenOutcome.lastKey()).add(originalArg.raw_value);
          }
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered--;
          if (bracketsEntered > 0) {
            thenOutcome.get(thenOutcome.lastKey()).add(originalArg.raw_value);
          }
        }
 else         if (newCommand || thenOutcome.size() == 0) {
          thenOutcome.put(thenOutcome.size(),new ArrayList<String>());
          thenOutcome.get(thenOutcome.lastKey()).add(originalArg.raw_value);
          newCommand=false;
        }
 else {
          thenOutcome.get(thenOutcome.lastKey()).add(originalArg.raw_value);
        }
      }
 else       if (insideElse) {
        if (arg.matches(""String_Node_Str"")) {
          bracketsEntered++;
          if (bracketsEntered > 1) {
            elseOutcome.get(elseOutcome.lastKey()).add(originalArg.raw_value);
          }
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered--;
          if (bracketsEntered > 0) {
            elseOutcome.get(elseOutcome.lastKey()).add(originalArg.raw_value);
          }
        }
 else         if (newCommand || elseOutcome.size() == 0) {
          newCommand=false;
          if (arg.matches(""String_Node_Str"") && elseOutcome.size() == 0) {
            bracketsEntered++;
          }
          elseOutcome.put(elseOutcome.size(),new ArrayList<String>());
          elseOutcome.get(elseOutcome.lastKey()).add(originalArg.raw_value);
        }
 else {
          elseOutcome.get(elseOutcome.lastKey()).add(originalArg.raw_value);
        }
      }
    }
  }
  scriptEntry.addObject(""String_Node_Str"",comparables).addObject(""String_Node_Str"",thenOutcome).addObject(""String_Node_Str"",elseOutcome);
}",0.9617743254292724
10285,"@EventHandler public void entityExplode(EntityExplodeEvent event){
  Map<String,dObject> context=new HashMap<String,dObject>();
  if (event.getEntity() == null) {
    return;
  }
  dEntity entity=new dEntity(event.getEntity());
  context.put(""String_Node_Str"",entity.getDenizenObject());
  context.put(""String_Node_Str"",new dLocation(event.getLocation()));
  String blocks=""String_Node_Str"";
  for (  Block block : event.blockList()) {
    blocks=blocks + new dLocation(block.getLocation()) + ""String_Node_Str"";
  }
  context.put(""String_Node_Str"",blocks.length() > 0 ? new dList(blocks) : null);
  String determination=EventManager.doEvents(Arrays.asList(""String_Node_Str"",entity.identifyType() + ""String_Node_Str""),null,null,context,true);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
 else   if (determination.length() > 0 && !determination.equalsIgnoreCase(""String_Node_Str"")) {
    dList list=dList.valueOf(determination);
    event.blockList().clear();
    for (    String loc : list) {
      dLocation location=dLocation.valueOf(loc);
      if (location == null)       dB.echoError(""String_Node_Str"" + loc + ""String_Node_Str"");
 else       event.blockList().add(location.getWorld().getBlockAt(location));
    }
  }
}","@EventHandler public void entityExplode(EntityExplodeEvent event){
  Map<String,dObject> context=new HashMap<String,dObject>();
  if (event.getEntity() == null) {
    return;
  }
  dEntity entity=new dEntity(event.getEntity());
  context.put(""String_Node_Str"",entity.getDenizenObject());
  context.put(""String_Node_Str"",new dLocation(event.getLocation()));
  String blocks=""String_Node_Str"";
  for (  Block block : event.blockList()) {
    blocks=blocks + new dLocation(block.getLocation()) + ""String_Node_Str"";
  }
  context.put(""String_Node_Str"",new dList(blocks));
  String determination=EventManager.doEvents(Arrays.asList(""String_Node_Str"",entity.identifyType() + ""String_Node_Str""),null,null,context,true);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
 else   if (determination.length() > 0 && !determination.equalsIgnoreCase(""String_Node_Str"")) {
    dList list=dList.valueOf(determination);
    event.blockList().clear();
    for (    String loc : list) {
      dLocation location=dLocation.valueOf(loc);
      if (location == null)       dB.echoError(""String_Node_Str"" + loc + ""String_Node_Str"");
 else       event.blockList().add(location.getWorld().getBlockAt(location));
    }
  }
}",0.9797055312375648
10286,"public dObject getHolder(){
  if (inventory.getInventory() == null)   return null;
  if (inventory.getIdType() != null && inventory.getIdType().equals(""String_Node_Str"") && inventory.getIdHolder() != null)   return dPlayer.valueOf(inventory.getIdHolder());
  org.bukkit.inventory.InventoryHolder holder=inventory.getInventory().getHolder();
  if (holder != null) {
    if (holder instanceof Entity && CitizensAPI.getNPCRegistry().isNPC((Entity)holder)) {
      return new dNPC(CitizensAPI.getNPCRegistry().getNPC((Entity)holder));
    }
 else     if (holder instanceof Player) {
      return new dPlayer((Player)holder);
    }
 else     if (holder instanceof Entity) {
      return new dEntity((Entity)holder);
    }
 else     if (holder instanceof BlockState) {
      return new dLocation(((BlockState)holder).getLocation());
    }
  }
 else   return new Element(inventory.getIdHolder());
  return null;
}","public dObject getHolder(){
  if (inventory.getInventory() == null)   return null;
  if (inventory.getIdType() != null && inventory.getIdType().equals(""String_Node_Str"") && inventory.getIdHolder() != null)   return dPlayer.valueOf(inventory.getIdHolder());
  org.bukkit.inventory.InventoryHolder holder=inventory.getInventory().getHolder();
  if (holder != null) {
    if (holder instanceof Entity && CitizensAPI.getNPCRegistry().isNPC((Entity)holder)) {
      return new dNPC(CitizensAPI.getNPCRegistry().getNPC((Entity)holder));
    }
 else     if (holder instanceof Player) {
      return new dPlayer((Player)holder);
    }
 else     if (holder instanceof Entity) {
      return new dEntity((Entity)holder);
    }
 else     if (holder instanceof DoubleChest) {
      return new dLocation(((DoubleChest)holder).getLocation());
    }
 else     if (holder instanceof BlockState) {
      return new dLocation(((BlockState)holder).getLocation());
    }
  }
 else   return new Element(inventory.getIdHolder());
  return null;
}",0.938860103626943
10287,"public void Set(YamlConfiguration yaml,int index,String key,String value){
  if (index == -1) {
    yaml.set(key,value);
  }
 else {
    List<String> list=yaml.getStringList(key);
    if (index < 0)     index=0;
    if (index > list.size())     index=list.size() - 1;
    list.set(index,value);
    yaml.set(key,list);
  }
}","public void Set(YamlConfiguration yaml,int index,String key,String value){
  if (index == -1) {
    yaml.set(key,value);
  }
 else {
    List<String> list=yaml.getStringList(key);
    if (index < 0)     index=0;
    if (index > list.size())     index=list.size() - 1;
    if (list.size() == 0)     list.add(""String_Node_Str"");
    list.set(index,value);
    yaml.set(key,list);
  }
}",0.9165487977369166
10288,"public String Get(YamlConfiguration yaml,int index,String key,String def){
  if (index == -1) {
    return yaml.getString(key,def);
  }
 else {
    List<String> list=yaml.getStringList(key);
    if (index < 0)     index=0;
    if (index > list.size())     index=list.size() - 1;
    return list.get(index);
  }
}","public String Get(YamlConfiguration yaml,int index,String key,String def){
  if (index == -1) {
    return yaml.getString(key,def);
  }
 else {
    List<String> list=yaml.getStringList(key);
    if (index < 0)     index=0;
    if (index > list.size())     index=list.size() - 1;
    if (list.size() == 0)     return ""String_Node_Str"";
    return list.get(index);
  }
}",0.9176470588235294
10289,"@Override public void breakDown(){
  AsyncPlayerChatEvent.getHandlerList().unregister(this);
}","@Override public void breakDown(){
  PlayerChatEvent.getHandlerList().unregister(this);
}",0.9726775956284152
10290,"/** 
 * Makes the NPC sit a the specified location
 * @param location
 */
public void sit(Location location){
  DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",null);
  if (npc.getBukkitEntity().getType() != EntityType.PLAYER) {
    return;
  }
  eh.getBukkitEntity().teleport(location.add(0.5,0,0.5));
  dB.log(""String_Node_Str"");
  eh.getDataWatcher().watch(0,Byte.valueOf((byte)0x04));
  sitting=true;
  chairLocation=location;
}","/** 
 * Makes the NPC sit a the specified location
 * @param location where to sit
 */
public void sit(Location location){
  DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",null);
  if (npc.getBukkitEntity().getType() != EntityType.PLAYER) {
    return;
  }
  eh.getBukkitEntity().teleport(location.add(0.5,0,0.5));
  dB.log(""String_Node_Str"");
  eh.getDataWatcher().watch(0,Byte.valueOf((byte)0x04));
  sitting=true;
  chairLocation=location;
}",0.9854096520763188
10291,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  boolean remove_original=false;
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (arg.matchesArgumentType(dLocation.class) && !scriptEntry.hasObject(""String_Node_Str"") && !arg.matchesPrefix(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.asType(dLocation.class));
 else     if (arg.matchesArgumentType(dCuboid.class) && !scriptEntry.hasObject(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.asType(dCuboid.class));
 else     if (arg.matchesArgumentType(dLocation.class) && arg.matchesPrefix(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.asType(dLocation.class));
 else     if (arg.matches(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",Element.TRUE);
 else     arg.reportUnhandled();
  }
  if (!scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.defaultObject(""String_Node_Str"",Element.FALSE);
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (arg.matchesArgumentType(dLocation.class) && !scriptEntry.hasObject(""String_Node_Str"") && !arg.matchesPrefix(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.asType(dLocation.class));
 else     if (arg.matchesArgumentType(dCuboid.class) && !scriptEntry.hasObject(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.asType(dCuboid.class));
 else     if (arg.matchesArgumentType(dLocation.class) && arg.matchesPrefix(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.asType(dLocation.class));
 else     if (arg.matches(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",Element.TRUE);
 else     arg.reportUnhandled();
  }
  if (!scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.defaultObject(""String_Node_Str"",Element.FALSE);
}",0.9861866889912098
10292,"public static void _saveLocations(){
  List<String> loclist=new ArrayList<String>();
  for (  Map.Entry<String,dLocation> entry : uniqueObjects.entrySet())   loclist.add(entry.getKey() + ""String_Node_Str"" + (entry.getValue().getBlockX() + 0.5)+ ""String_Node_Str""+ entry.getValue().getBlockY()+ ""String_Node_Str""+ (entry.getValue().getBlockZ() + 0.5)+ ""String_Node_Str""+ entry.getValue().getYaw()+ ""String_Node_Str""+ entry.getValue().getPitch()+ ""String_Node_Str""+ entry.getValue().getWorld().getName());
  DenizenAPI.getCurrentInstance().getSaves().set(""String_Node_Str"",loclist);
}","public static void _saveLocations(){
  List<String> loclist=new ArrayList<String>();
  for (  Map.Entry<String,dLocation> entry : uniqueObjects.entrySet()) {
    if (entry == null || entry.getValue() == null || entry.getValue().getWorld() == null)     continue;
    loclist.add(entry.getKey() + ""String_Node_Str"" + (entry.getValue().getBlockX() + 0.5)+ ""String_Node_Str""+ entry.getValue().getBlockY()+ ""String_Node_Str""+ (entry.getValue().getBlockZ() + 0.5)+ ""String_Node_Str""+ entry.getValue().getYaw()+ ""String_Node_Str""+ entry.getValue().getPitch()+ ""String_Node_Str""+ entry.getValue().getWorld().getName());
  }
  DenizenAPI.getCurrentInstance().getSaves().set(""String_Node_Str"",loclist);
}",0.9122257053291536
10293,"@Command(aliases={""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",modifiers={""String_Node_Str""},min=1,max=3,permission=""String_Node_Str"") public void submit(CommandContext args,final CommandSender sender,NPC npc) throws CommandException {
  if (!dB.record) {
    Messaging.send(sender,ChatColor.RED + ""String_Node_Str"");
    return;
  }
  dB.record=false;
  Messaging.send(sender,ChatColor.GREEN + ""String_Node_Str"");
  final DebugSubmit submit=new DebugSubmit();
  submit.recording=dB.Recording.toString();
  dB.Recording=new StringBuilder();
  submit.start();
  BukkitRunnable task=new BukkitRunnable(){
    public void run(){
      if (!submit.isAlive()) {
        if (submit.Result == null) {
          Messaging.send(sender,ChatColor.RED + ""String_Node_Str"");
        }
 else {
          Messaging.send(sender,ChatColor.GREEN + ""String_Node_Str"" + submit.Result);
        }
        this.cancel();
      }
    }
  }
;
  task.runTaskTimer(DenizenAPI.getCurrentInstance(),0,20);
}","@Command(aliases={""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",modifiers={""String_Node_Str""},min=1,max=3,permission=""String_Node_Str"") public void submit(CommandContext args,final CommandSender sender,NPC npc) throws CommandException {
  if (!dB.record) {
    Messaging.send(sender,ChatColor.RED + ""String_Node_Str"");
    return;
  }
  dB.record=false;
  Messaging.send(sender,ChatColor.GREEN + ""String_Node_Str"");
  final DebugSubmit submit=new DebugSubmit();
  submit.recording=dB.Recording.toString();
  dB.Recording=new StringBuilder();
  submit.start();
  BukkitRunnable task=new BukkitRunnable(){
    public void run(){
      if (!submit.isAlive()) {
        if (submit.Result == null) {
          Messaging.send(sender,ChatColor.RED + ""String_Node_Str"");
        }
 else {
          Messaging.send(sender,ChatColor.GREEN + ""String_Node_Str"" + submit.Result);
        }
        this.cancel();
      }
    }
  }
;
  task.runTaskTimer(DenizenAPI.getCurrentInstance(),0,10);
}",0.999
10294,"@Override public void deconstructed(){
  InventoryClickEvent.getHandlerList().unregister(this);
}","@Override public void deconstructed(){
  InventoryClickEvent.getHandlerList().unregister(this);
  PlayerFishEvent.getHandlerList().unregister(this);
}",0.7854251012145749
10295,"public static <T extends dObject>T getObjectFrom(Class<T> dClass,String value,dPlayer player,dNPC npc){
  try {
    Matcher m=PROPERTIES_PATTERN.matcher(value);
    boolean matched=m.matches() && Adjustable.class.isAssignableFrom(dClass);
    T gotten=(T)((dClass.equals(dItem.class)) ? dItem.valueOf(matched ? m.group(1) : value,player,npc) : valueof.get(dClass).invoke(null,matched ? m.group(1) : value));
    if (gotten != null && matched) {
      String[] properties=m.group(2).split(""String_Node_Str"");
      for (      String property : properties) {
        String[] data=property.split(""String_Node_Str"",2);
        ((Adjustable)gotten).adjust(new Mechanism(new Element(data[0]),new Element(data[1].replace((char)0x2011,';'))));
      }
    }
    return gotten;
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  return null;
}","public static <T extends dObject>T getObjectFrom(Class<T> dClass,String value,dPlayer player,dNPC npc){
  try {
    List<String> matches=SeparateProperties(value);
    boolean matched=matches != null && Adjustable.class.isAssignableFrom(dClass);
    T gotten=(T)((dClass.equals(dItem.class)) ? dItem.valueOf(matched ? matches.get(0) : value,player,npc) : valueof.get(dClass).invoke(null,matched ? matches.get(0) : value));
    if (gotten != null && matched) {
      for (int i=1; i < matches.size(); i++) {
        String[] data=matches.get(i).split(""String_Node_Str"",2);
        ((Adjustable)gotten).adjust(new Mechanism(new Element(data[0]),new Element(data[1].replace((char)0x2011,';'))));
      }
    }
    return gotten;
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  return null;
}",0.8007334963325183
10296,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dItem(getPotion().getItem()).getAttribute(attribute.fulfill(2));
  }
  return null;
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dItem(getPotion().getItem()).getAttribute(attribute.fulfill(1));
  }
  return null;
}",0.9961685823754788
10297,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(item.getMaterial().getData() > 0).getAttribute(attribute.fulfill(1));
  }
  if (item.getMaterial().getData() > 0) {
    if (attribute.startsWith(""String_Node_Str"")) {
      attribute=attribute.fulfill(1);
      if (attribute.startsWith(""String_Node_Str"")) {
        return new Element(Potion.fromItemStack(item.getItemStack()).isSplash()).getAttribute(attribute.fulfill(1));
      }
      if (attribute.startsWith(""String_Node_Str"")) {
        return new Element(Potion.fromItemStack(item.getItemStack()).hasExtendedDuration()).getAttribute(attribute.fulfill(1));
      }
      if (attribute.startsWith(""String_Node_Str"")) {
        return new Element(Potion.fromItemStack(item.getItemStack()).getLevel()).getAttribute(attribute.fulfill(1));
      }
      if (attribute.startsWith(""String_Node_Str"")) {
        return new Element(Potion.fromItemStack(item.getItemStack()).getType().name()).getAttribute(attribute.fulfill(1));
      }
      return new Element(getPropertyString()).getAttribute(attribute);
    }
  }
  return null;
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(item.getItemStack().getDurability() > 0).getAttribute(attribute.fulfill(1));
  }
  if (item.getItemStack().getDurability() > 0) {
    if (attribute.startsWith(""String_Node_Str"")) {
      attribute=attribute.fulfill(1);
      if (attribute.startsWith(""String_Node_Str"")) {
        return new Element(Potion.fromItemStack(item.getItemStack()).isSplash()).getAttribute(attribute.fulfill(1));
      }
      if (attribute.startsWith(""String_Node_Str"")) {
        return new Element(Potion.fromItemStack(item.getItemStack()).hasExtendedDuration()).getAttribute(attribute.fulfill(1));
      }
      if (attribute.startsWith(""String_Node_Str"")) {
        return new Element(Potion.fromItemStack(item.getItemStack()).getLevel()).getAttribute(attribute.fulfill(1));
      }
      if (attribute.startsWith(""String_Node_Str"")) {
        return new Element(Potion.fromItemStack(item.getItemStack()).getType().name()).getAttribute(attribute.fulfill(1));
      }
      return new Element(getPropertyString()).getAttribute(attribute);
    }
  }
  return null;
}",0.9762684124386252
10298,"@Override public String getPropertyString(){
  if (item.getMaterial().getData() == 0)   return null;
  Potion pot=Potion.fromItemStack(item.getItemStack());
  return pot.getType().name() + ""String_Node_Str"" + pot.getLevel()+ ""String_Node_Str""+ pot.hasExtendedDuration()+ ""String_Node_Str""+ pot.isSplash();
}","@Override public String getPropertyString(){
  if (item.getItemStack().getDurability() == 0)   return null;
  Potion pot=Potion.fromItemStack(item.getItemStack());
  return pot.getType().name() + ""String_Node_Str"" + pot.getLevel()+ ""String_Node_Str""+ pot.hasExtendedDuration()+ ""String_Node_Str""+ pot.isSplash();
}",0.9533011272141708
10299,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && (attribute.startsWith(""String_Node_Str"",2) || attribute.startsWith(""String_Node_Str"",2))&& attribute.hasContext(2)) {
    Comparable com=new net.aufdemrand.denizen.scripts.commands.core.Comparable();
    com.setComparable(element);
    com.setComparedto(attribute.getContext(2));
    String operator;
    if (attribute.getContext(1).startsWith(""String_Node_Str"")) {
      operator=attribute.getContext(1).substring(1);
      com.setNegativeLogic();
    }
 else     operator=attribute.getContext(1);
    Comparable.Operator comparableOperator=null;
    try {
      comparableOperator=Comparable.Operator.valueOf(operator.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").toUpperCase());
    }
 catch (    IllegalArgumentException e) {
    }
    if (comparableOperator != null) {
      com.setOperator(comparableOperator);
      return new Element(com.determineOutcome()).getAttribute(attribute.fulfill(2));
    }
 else {
      dB.echoError(""String_Node_Str"" + operator + ""String_Node_Str"");
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(Boolean.valueOf(element).toString()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Double.valueOf(element)).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Math.round(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    try {
      DecimalFormat d=new DecimalFormat(""String_Node_Str"");
      return new Element(d.format(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
    }
 catch (    NumberFormatException e) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dCuboid.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dEntity.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dInventory.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dItem.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dList.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dLocation.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dMaterial.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dNPC.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlayer.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlugin.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dScript.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,Duration.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dWorld.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    String contains=attribute.getContext(1);
    if (contains.toLowerCase().startsWith(""String_Node_Str"")) {
      if (Pattern.compile(contains.substring((""String_Node_Str"").length()),Pattern.CASE_INSENSITIVE).matcher(element).matches())       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
 else     if (element.toLowerCase().contains(contains.toLowerCase()))     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.endsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.getLastColors(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(element.length()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.startsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.indexOf(attribute.getContext(1)) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.lastIndexOf(attribute.getContext(1)) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    int index=attribute.getIntContext(1) - 1;
    if (index < 0 || index >= element.length())     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return new Element(String.valueOf(element.charAt(index))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(element.indexOf(delimiter) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(0,element.indexOf(delimiter))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String replace=attribute.getContext(1);
    String replacement=""String_Node_Str"";
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"")) {
      if (attribute.hasContext(1)) {
        replacement=attribute.getContext(1);
        if (replacement == null)         replacement=""String_Node_Str"";
        attribute.fulfill(1);
      }
    }
    return new Element(element.replace(replace,replacement)).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.startsWith(""String_Node_Str"",2)) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    Integer limit=(attribute.hasContext(2) ? attribute.getIntContext(2) : 1);
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1],limit))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string,limit))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1]))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.stripColor(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(element.trim()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toUpperCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (element.length() == 0) {
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
    StringBuilder TitleCase=new StringBuilder(element.length());
    String Upper=element.toUpperCase();
    String Lower=element.toLowerCase();
    TitleCase.append(Upper.charAt(0));
    for (int i=1; i < element.length(); i++) {
      if (element.charAt(i - 1) == ' ')       TitleCase.append(Upper.charAt(i));
 else       TitleCase.append(Lower.charAt(i));
    }
    return new Element(TitleCase.toString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    int beginning_index=Integer.valueOf(attribute.getContext(1).split(""String_Node_Str"")[0]) - 1;
    int ending_index;
    if (attribute.getContext(1).split(""String_Node_Str"").length > 1)     ending_index=Integer.valueOf(attribute.getContext(1).split(""String_Node_Str"")[1]);
 else     ending_index=element.length();
    if (beginning_index < 0)     beginning_index=0;
    if (beginning_index > element.length())     beginning_index=element.length();
    if (ending_index > element.length())     ending_index=element.length();
    if (ending_index < beginning_index)     ending_index=beginning_index;
    return new Element(element.substring(beginning_index,ending_index)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.abs(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() + aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() / aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() % aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() * aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sqrt(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() - aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.ceil(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.floor(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.round(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.attributes.size() > 0) {
    dB.echoDebug(attribute.getScriptEntry(),""String_Node_Str"" + attribute.attributes.toString() + ""String_Node_Str""+ attribute.getOrigin()+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
 else {
    return element;
  }
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && (attribute.startsWith(""String_Node_Str"",2) || attribute.startsWith(""String_Node_Str"",2))&& attribute.hasContext(2)) {
    Comparable com=new net.aufdemrand.denizen.scripts.commands.core.Comparable();
    com.setComparable(element);
    com.setComparedto(attribute.getContext(2));
    String operator;
    if (attribute.getContext(1).startsWith(""String_Node_Str"")) {
      operator=attribute.getContext(1).substring(1);
      com.setNegativeLogic();
    }
 else     operator=attribute.getContext(1);
    Comparable.Operator comparableOperator=null;
    try {
      comparableOperator=Comparable.Operator.valueOf(operator.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").toUpperCase());
    }
 catch (    IllegalArgumentException e) {
    }
    if (comparableOperator != null) {
      com.setOperator(comparableOperator);
      return new Element(com.determineOutcome()).getAttribute(attribute.fulfill(2));
    }
 else {
      dB.echoError(""String_Node_Str"" + operator + ""String_Node_Str"");
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(Boolean.valueOf(element).toString()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Double.valueOf(element)).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Math.round(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    try {
      DecimalFormat d=new DecimalFormat(""String_Node_Str"");
      return new Element(d.format(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
    }
 catch (    NumberFormatException e) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dCuboid.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dEntity.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dInventory.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dItem.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dList.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dLocation.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dMaterial.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dNPC.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlayer.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dPlugin.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dScript.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,Duration.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return HandleNull(element,dWorld.valueOf(element),""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    String contains=attribute.getContext(1);
    if (contains.toLowerCase().startsWith(""String_Node_Str"")) {
      if (Pattern.compile(contains.substring((""String_Node_Str"").length()),Pattern.CASE_INSENSITIVE).matcher(element).matches())       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
 else     if (element.toLowerCase().contains(contains.toLowerCase()))     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.endsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.getLastColors(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(element.length()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.startsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.indexOf(attribute.getContext(1)) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(element.lastIndexOf(attribute.getContext(1)) + 1).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    int index=attribute.getIntContext(1) - 1;
    if (index < 0 || index >= element.length())     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return new Element(String.valueOf(element.charAt(index))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(element.indexOf(delimiter) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(0,element.indexOf(delimiter))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String replace=attribute.getContext(1);
    String replacement=""String_Node_Str"";
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"")) {
      if (attribute.hasContext(1)) {
        replacement=attribute.getContext(1);
        if (replacement == null)         replacement=""String_Node_Str"";
        attribute.fulfill(1);
      }
    }
    return new Element(element.replace(replace,replacement)).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.startsWith(""String_Node_Str"",2)) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    Integer limit=(attribute.hasContext(2) ? attribute.getIntContext(2) : 1);
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1],limit))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string,limit))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1]))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.stripColor(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(element.trim()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toUpperCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.toLowerCase()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (element.length() == 0) {
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
    StringBuilder TitleCase=new StringBuilder(element.length());
    String Upper=element.toUpperCase();
    String Lower=element.toLowerCase();
    TitleCase.append(Upper.charAt(0));
    for (int i=1; i < element.length(); i++) {
      if (element.charAt(i - 1) == ' ')       TitleCase.append(Upper.charAt(i));
 else       TitleCase.append(Lower.charAt(i));
    }
    return new Element(TitleCase.toString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    int beginning_index=Integer.valueOf(attribute.getContext(1).split(""String_Node_Str"")[0]) - 1;
    int ending_index;
    if (attribute.getContext(1).split(""String_Node_Str"").length > 1)     ending_index=Integer.valueOf(attribute.getContext(1).split(""String_Node_Str"")[1]);
 else     ending_index=element.length();
    if (beginning_index < 0)     beginning_index=0;
    if (beginning_index > element.length())     beginning_index=element.length();
    if (ending_index > element.length())     ending_index=element.length();
    if (ending_index < beginning_index)     ending_index=beginning_index;
    return new Element(element.substring(beginning_index,ending_index)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.abs(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() + aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() / aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() % aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() * aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(Math.sqrt(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element(asDouble() - aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.ceil(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.floor(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isDouble()) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    return new Element((int)Math.round(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.attributes.size() > 0) {
    dB.echoDebug(attribute.getScriptEntry(),""String_Node_Str"" + attribute.attributes.toString() + ""String_Node_Str""+ attribute.getOrigin()+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
 else {
    return element;
  }
}",0.997562347646728
10300,"@Override public String getPropertyString(){
  StringBuilder output=new StringBuilder();
  BookMeta bookInfo=(BookMeta)item.getItemStack().getItemMeta();
  if (item.getItemStack().getType().equals(Material.WRITTEN_BOOK)) {
    output.append(""String_Node_Str"").append(EscapeTags.Escape(bookInfo.getAuthor())).append(""String_Node_Str"").append(EscapeTags.Escape(bookInfo.getTitle())).append(""String_Node_Str"");
  }
  output.append(""String_Node_Str"");
  for (  String page : bookInfo.getPages()) {
    output.append(EscapeTags.Escape(page)).append(""String_Node_Str"");
  }
  if (output.length() == 6)   return null;
 else   return output.substring(0,output.length() - 1);
}","@Override public String getPropertyString(){
  StringBuilder output=new StringBuilder();
  BookMeta bookInfo=(BookMeta)item.getItemStack().getItemMeta();
  if (item.getItemStack().getType().equals(Material.WRITTEN_BOOK) && bookInfo.hasAuthor() && bookInfo.hasTitle()) {
    output.append(""String_Node_Str"").append(EscapeTags.Escape(bookInfo.getAuthor())).append(""String_Node_Str"").append(EscapeTags.Escape(bookInfo.getTitle())).append(""String_Node_Str"");
  }
  output.append(""String_Node_Str"");
  if (bookInfo.hasPages()) {
    for (    String page : bookInfo.getPages()) {
      output.append(EscapeTags.Escape(page)).append(""String_Node_Str"");
    }
  }
  if (output.length() <= 6)   return null;
 else   return output.substring(0,output.length() - 1);
}",0.9297752808988764
10301,"/** 
 * A quick function to escape book Strings. This is just to prevent tag reading errors.
 * @param input the unescaped data.
 * @return the escaped data.
 */
public static String Escape(String input){
  return TagManager.CleanOutputFully(input).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
}","/** 
 * A quick function to escape book Strings. This is just to prevent tag reading errors.
 * @param input the unescaped data.
 * @return the escaped data.
 */
public static String Escape(String input){
  if (input == null)   return null;
  return TagManager.CleanOutputFully(input).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
}",0.9764397905759162
10302,"/** 
 * A quick function to reverse a book string escaping. This is just to prevent tag reading errors.
 * @param input the escaped data.
 * @return the unescaped data.
 */
public static String unEscape(String input){
  return TagManager.CleanOutputFully(input).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",String.valueOf((char)0x00A0)).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
}","/** 
 * A quick function to reverse a book string escaping. This is just to prevent tag reading errors.
 * @param input the escaped data.
 * @return the unescaped data.
 */
public static String unEscape(String input){
  if (input == null)   return null;
  return TagManager.CleanOutputFully(input).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",String.valueOf((char)0x00A0)).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
}",0.9836808703535812
10303,"@Override public void onEnable(){
  depends.initialize();
  if (Depends.citizens == null || !Depends.citizens.isEnabled()) {
    dB.echoError(""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(this);
    return;
  }
 else   startedSuccessful=true;
  versionTag=this.getDescription().getVersion();
  dB.log(ChatColor.LIGHT_PURPLE + ""String_Node_Str"");
  dB.log(ChatColor.YELLOW + ""String_Node_Str"");
  dB.log(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
  dB.log(""String_Node_Str"");
  dB.log(ChatColor.GRAY + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  dB.log(ChatColor.GRAY + ""String_Node_Str"" + ChatColor.WHITE+ versionTag);
  dB.log(ChatColor.LIGHT_PURPLE + ""String_Node_Str"");
  dNPCRegistry=new dNPCRegistry(this);
  for (  OfflinePlayer player : Bukkit.getOfflinePlayers())   dPlayer.offlinePlayers.add(player);
  commandHandler=new CommandHandler(Depends.citizens);
  ScriptRegistry._registerCoreTypes();
  saveDefaultConfig();
  reloadConfig();
  new File(getDataFolder() + ""String_Node_Str"").mkdirs();
  new File(getDataFolder() + ""String_Node_Str"").mkdirs();
  new File(getDataFolder() + ""String_Node_Str"").mkdirs();
  if (!new File(getDataFolder() + ""String_Node_Str"").exists()) {
    String sourceFile=URLDecoder.decode(Denizen.class.getProtectionDomain().getCodeSource().getLocation().getFile());
    dB.log(""String_Node_Str"" + sourceFile);
    Utilities.extractFile(new File(sourceFile),""String_Node_Str"",getDataFolder() + ""String_Node_Str"");
  }
  if (!getConfig().isSet(""String_Node_Str"") || getConfig().getInt(""String_Node_Str"",0) != configVersion) {
    dB.echoError(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  }
  reloadSaves();
  WorldScriptHelper ws_helper=new WorldScriptHelper();
  ItemScriptHelper is_helper=new ItemScriptHelper();
  InventoryScriptHelper in_helper=new InventoryScriptHelper();
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(TriggerTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(PushableTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(AssignmentTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(NicknameTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(HealthTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(ConstantsTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(NameplateTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(HungerTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(SittingTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(FishingTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(SleepingTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(ParticlesTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(SneakingTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(InvisibleTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(MobproxTrait.class).withName(""String_Node_Str""));
  if (Depends.hasProgramAB)   CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(ChatbotTrait.class).withName(""String_Node_Str""));
  if (Depends.protocolManager != null) {
    new PacketHelper(this);
    dB.echoApproval(""String_Node_Str"");
  }
  runtimeCompiler=new RuntimeCompiler(this);
  runtimeCompiler.loader();
  getCommandRegistry().registerCoreMembers();
  getTriggerRegistry().registerCoreMembers();
  getRequirementRegistry().registerCoreMembers();
  getListenerRegistry().registerCoreMembers();
  tagManager().registerCoreTags();
  eventManager=new EventManager();
  eventManager().registerCoreMembers();
  Depends.citizens.registerCommandClass(CommandHandler.class);
  try {
    ObjectFetcher._registerCoreObjects();
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  dMaterial._initialize();
  propertyParser=new PropertyParser();
  ScriptHelper.reloadScripts();
  dB.log(ChatColor.LIGHT_PURPLE + ""String_Node_Str"");
  ws_helper.serverStartEvent();
}","@Override public void onEnable(){
  depends.initialize();
  if (Depends.citizens == null || !Depends.citizens.isEnabled()) {
    dB.echoError(""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(this);
    return;
  }
 else   startedSuccessful=true;
  versionTag=this.getDescription().getVersion();
  dB.log(ChatColor.LIGHT_PURPLE + ""String_Node_Str"");
  dB.log(ChatColor.YELLOW + ""String_Node_Str"");
  dB.log(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
  dB.log(""String_Node_Str"");
  dB.log(ChatColor.GRAY + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  dB.log(ChatColor.GRAY + ""String_Node_Str"" + ChatColor.WHITE+ versionTag);
  dB.log(ChatColor.LIGHT_PURPLE + ""String_Node_Str"");
  dNPCRegistry=new dNPCRegistry(this);
  dPlayer.offlinePlayers.clear();
  for (  OfflinePlayer player : Bukkit.getOfflinePlayers())   dPlayer.offlinePlayers.add(player);
  commandHandler=new CommandHandler(Depends.citizens);
  ScriptRegistry._registerCoreTypes();
  saveDefaultConfig();
  reloadConfig();
  new File(getDataFolder() + ""String_Node_Str"").mkdirs();
  new File(getDataFolder() + ""String_Node_Str"").mkdirs();
  new File(getDataFolder() + ""String_Node_Str"").mkdirs();
  if (!new File(getDataFolder() + ""String_Node_Str"").exists()) {
    String sourceFile=URLDecoder.decode(Denizen.class.getProtectionDomain().getCodeSource().getLocation().getFile());
    dB.log(""String_Node_Str"" + sourceFile);
    Utilities.extractFile(new File(sourceFile),""String_Node_Str"",getDataFolder() + ""String_Node_Str"");
  }
  if (!getConfig().isSet(""String_Node_Str"") || getConfig().getInt(""String_Node_Str"",0) != configVersion) {
    dB.echoError(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  }
  reloadSaves();
  WorldScriptHelper ws_helper=new WorldScriptHelper();
  ItemScriptHelper is_helper=new ItemScriptHelper();
  InventoryScriptHelper in_helper=new InventoryScriptHelper();
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(TriggerTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(PushableTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(AssignmentTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(NicknameTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(HealthTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(ConstantsTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(NameplateTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(HungerTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(SittingTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(FishingTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(SleepingTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(ParticlesTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(SneakingTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(InvisibleTrait.class).withName(""String_Node_Str""));
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(MobproxTrait.class).withName(""String_Node_Str""));
  if (Depends.hasProgramAB)   CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(ChatbotTrait.class).withName(""String_Node_Str""));
  if (Depends.protocolManager != null) {
    new PacketHelper(this);
    dB.echoApproval(""String_Node_Str"");
  }
  runtimeCompiler=new RuntimeCompiler(this);
  runtimeCompiler.loader();
  getCommandRegistry().registerCoreMembers();
  getTriggerRegistry().registerCoreMembers();
  getRequirementRegistry().registerCoreMembers();
  getListenerRegistry().registerCoreMembers();
  tagManager().registerCoreTags();
  eventManager=new EventManager();
  eventManager().registerCoreMembers();
  Depends.citizens.registerCommandClass(CommandHandler.class);
  try {
    ObjectFetcher._registerCoreObjects();
  }
 catch (  Exception e) {
    dB.echoError(e);
  }
  dMaterial._initialize();
  propertyParser=new PropertyParser();
  ScriptHelper.reloadScripts();
  dB.log(ChatColor.LIGHT_PURPLE + ""String_Node_Str"");
  ws_helper.serverStartEvent();
}",0.9963211426098249
10304,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (player_name == null)   return Element.NULL.getAttribute(attribute);
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE.toString()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dList(PlayerTags.playerChatHistory.get(player_name)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    int x=1;
    if (attribute.hasContext(1) && aH.matchesInteger(attribute.getContext(1)))     x=attribute.getIntContext(1);
    if (!PlayerTags.playerChatHistory.containsKey(player_name))     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return new Element(PlayerTags.playerChatHistory.get(player_name).get(x - 1)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(!FlagManager.playerHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
    if (attribute.startsWith(""String_Node_Str"") && !FlagManager.playerHasFlag(this,flag_name))     return new Element(0).getAttribute(attribute.fulfill(1));
    if (FlagManager.playerHasFlag(this,flag_name))     return new dList(DenizenAPI.getCurrentInstance().flagManager().getPlayerFlag(getName(),flag_name)).getAttribute(attribute);
 else     return Element.NULL.getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
    return new Element(FlagManager.playerHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String outcome=""String_Node_Str"";
    if (attribute.hasContext(1)) {
      try {
        outcome=DenizenAPI.getCurrentInstance().getSaves().getString(""String_Node_Str"" + getName() + ""String_Node_Str""+ dScript.valueOf(attribute.getContext(1)).getName()+ ""String_Node_Str"");
      }
 catch (      Exception e) {
        outcome=""String_Node_Str"";
      }
    }
    return new Element(outcome).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.economy != null) {
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Depends.economy.currencyNameSingular()).getAttribute(attribute.fulfill(2));
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Depends.economy.currencyNamePlural()).getAttribute(attribute.fulfill(2));
      return new Element(Depends.economy.getBalance(player_name)).getAttribute(attribute.fulfill(1));
    }
 else {
      dB.echoError(""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    int range=50;
    int attribs=1;
    if (attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2) && aH.matchesInteger(attribute.getContext(2))) {
      attribs=2;
      range=attribute.getIntContext(2);
    }
    List<Entity> entities=getPlayerEntity().getNearbyEntities(range,range,range);
    ArrayList<LivingEntity> possibleTargets=new ArrayList<LivingEntity>();
    for (    Entity entity : entities) {
      if (entity instanceof LivingEntity) {
        if (attribute.hasContext(1)) {
          String context=attribute.getContext(1);
          if (context.toLowerCase().startsWith(""String_Node_Str""))           context=context.substring(3);
          for (          String ent : context.split(""String_Node_Str"")) {
            boolean valid=false;
            if (ent.equalsIgnoreCase(""String_Node_Str"") && CitizensAPI.getNPCRegistry().isNPC(entity)) {
              valid=true;
            }
 else             if (dEntity.matches(ent)) {
              if (dEntity.valueOf(ent).isGeneric()) {
                if (!CitizensAPI.getNPCRegistry().isNPC(entity)) {
                  valid=true;
                }
              }
 else {
                valid=true;
              }
            }
            if (valid)             possibleTargets.add((LivingEntity)entity);
          }
        }
 else {
          possibleTargets.add((LivingEntity)entity);
          entity.getType();
        }
      }
    }
    BlockIterator bi;
    try {
      bi=new BlockIterator(getPlayerEntity(),range);
    }
 catch (    IllegalStateException e) {
      return Element.NULL.getAttribute(attribute.fulfill(attribs));
    }
    Block b;
    Location l;
    int bx, by, bz;
    double ex, ey, ez;
    while (bi.hasNext()) {
      b=bi.next();
      bx=b.getX();
      by=b.getY();
      bz=b.getZ();
      if (b.getType() != Material.AIR) {
        break;
      }
 else {
        for (        LivingEntity possibleTarget : possibleTargets) {
          l=possibleTarget.getLocation();
          ex=l.getX();
          ey=l.getY();
          ez=l.getZ();
          if ((bx - .50 <= ex && ex <= bx + 1.50) && (bz - .50 <= ez && ez <= bz + 1.50) && (by - 1 <= ey && ey <= by + 2.5)) {
            return new dEntity(possibleTarget).getAttribute(attribute.fulfill(attribs));
          }
        }
      }
    }
    return Element.NULL.getAttribute(attribute.fulfill(attribs));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    List<String> players=new ArrayList<String>();
    if (attribute.startsWith(""String_Node_Str"")) {
      for (      Player player : Bukkit.getOnlinePlayers())       players.add(player.getName());
      return new dList(players).getAttribute(attribute.fulfill(2));
    }
 else     if (attribute.startsWith(""String_Node_Str"")) {
      for (      OfflinePlayer player : offlinePlayers) {
        if (!Bukkit.getOnlinePlayers().toString().contains(player.getName()))         players.add(player.getName());
      }
      return new dList(players).getAttribute(attribute.fulfill(2));
    }
 else {
      for (      OfflinePlayer player : offlinePlayers)       players.add(player.getName());
      return new dList(players).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && !isOnline())   return new Element(player_name).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getOfflinePlayer().getBedSpawnLocation()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(getOfflinePlayer().getFirstPlayed()).getAttribute(attribute.fulfill(1));
 else     return new Duration(getOfflinePlayer().getFirstPlayed() / 50).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(true).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isHealthScaled()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getHealthScale()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isBanned()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(isOnline()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isOp()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isWhitelisted()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(getOfflinePlayer().getLastPlayed()).getAttribute(attribute.fulfill(1));
 else     return new Duration(getOfflinePlayer().getLastPlayed() / 50).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return getInventory().getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && !isOnline()) {
    return getLocation().getAttribute(attribute.fulfill(1));
  }
  if (!isOnline())   return new Element(identify()).getAttribute(attribute);
  if (attribute.startsWith(""String_Node_Str""))   return new dInventory(getPlayerEntity().getOpenInventory().getTopInventory()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dItem(getPlayerEntity().getItemOnCursor()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getPlayerEntity().hasMetadata(""String_Node_Str""))     return getSelectedNPC().getAttribute(attribute.fulfill(1));
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && !attribute.startsWith(""String_Node_Str""))   return new dEntity(getPlayerEntity()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getAddress().getHostName()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getDisplayName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerListName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(player_name).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (Depends.permissions == null) {
      dB.echoError(""String_Node_Str"");
      return null;
    }
    String permission=attribute.getContext(1);
    if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.has((World)null,player_name,permission)).getAttribute(attribute.fulfill(2));
 else     if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.has(attribute.getContext(2),player_name,permission)).getAttribute(attribute.fulfill(2));
    return new Element(Depends.permissions.has(getPlayerEntity(),permission)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (Depends.permissions == null) {
      dB.echoError(""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    String group=attribute.getContext(1);
    if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.playerInGroup((World)null,player_name,group)).getAttribute(attribute.fulfill(2));
 else     if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.playerInGroup(attribute.getContext(2),player_name,group)).getAttribute(attribute.fulfill(2));
    return new Element(Depends.permissions.playerInGroup(getPlayerEntity(),group)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dScript script=dScript.valueOf(attribute.getContext(1));
    if (script == null)     return Element.FALSE.getAttribute(attribute.fulfill(1));
    return new Element(FinishCommand.getScriptCompletes(getName(),script.getName()) > 0).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dScript script=dScript.valueOf(attribute.getContext(1));
    if (script == null)     return Element.FALSE.getAttribute(attribute.fulfill(1));
    return new Element(FailCommand.getScriptFails(getName(),script.getName()) > 0).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getPlayerEntity().getCompassTarget()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getAllowFlight()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getFlySpeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHunger=getPlayerEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHunger=attribute.getIntContext(2);
    if (getPlayerEntity().getFoodLevel() / maxHunger < .10)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < .40)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < .75)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < 1)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getSaturation()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getFoodLevel()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getMaximumAir()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getRemainingAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getGameMode().getValue()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getGameMode().name()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isBlocking()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isFlying()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSleeping()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSneaking()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSprinting()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(getPlayerEntity().getSleepTicks() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerTime()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getWalkSpeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerWeather().name()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getLevel()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getExpToLevel()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getTotalExperience()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getExp() * 100).getAttribute(attribute.fulfill(1));
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new dEntity(getPlayerEntity()).getAttribute(attribute);
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (player_name == null)   return Element.NULL.getAttribute(attribute);
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE.toString()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dList(PlayerTags.playerChatHistory.get(player_name)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    int x=1;
    if (attribute.hasContext(1) && aH.matchesInteger(attribute.getContext(1)))     x=attribute.getIntContext(1);
    if (!PlayerTags.playerChatHistory.containsKey(player_name))     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return new Element(PlayerTags.playerChatHistory.get(player_name).get(x - 1)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(!FlagManager.playerHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
    if (attribute.startsWith(""String_Node_Str"") && !FlagManager.playerHasFlag(this,flag_name))     return new Element(0).getAttribute(attribute.fulfill(1));
    if (FlagManager.playerHasFlag(this,flag_name))     return new dList(DenizenAPI.getCurrentInstance().flagManager().getPlayerFlag(getName(),flag_name)).getAttribute(attribute);
 else     return Element.NULL.getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
    return new Element(FlagManager.playerHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String outcome=""String_Node_Str"";
    if (attribute.hasContext(1)) {
      try {
        outcome=DenizenAPI.getCurrentInstance().getSaves().getString(""String_Node_Str"" + getName() + ""String_Node_Str""+ dScript.valueOf(attribute.getContext(1)).getName()+ ""String_Node_Str"");
      }
 catch (      Exception e) {
        outcome=""String_Node_Str"";
      }
    }
    return new Element(outcome).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.economy != null) {
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Depends.economy.currencyNameSingular()).getAttribute(attribute.fulfill(2));
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Depends.economy.currencyNamePlural()).getAttribute(attribute.fulfill(2));
      return new Element(Depends.economy.getBalance(player_name)).getAttribute(attribute.fulfill(1));
    }
 else {
      dB.echoError(""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    int range=50;
    int attribs=1;
    if (attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2) && aH.matchesInteger(attribute.getContext(2))) {
      attribs=2;
      range=attribute.getIntContext(2);
    }
    List<Entity> entities=getPlayerEntity().getNearbyEntities(range,range,range);
    ArrayList<LivingEntity> possibleTargets=new ArrayList<LivingEntity>();
    for (    Entity entity : entities) {
      if (entity instanceof LivingEntity) {
        if (attribute.hasContext(1)) {
          String context=attribute.getContext(1);
          if (context.toLowerCase().startsWith(""String_Node_Str""))           context=context.substring(3);
          for (          String ent : context.split(""String_Node_Str"")) {
            boolean valid=false;
            if (ent.equalsIgnoreCase(""String_Node_Str"") && CitizensAPI.getNPCRegistry().isNPC(entity)) {
              valid=true;
            }
 else             if (dEntity.matches(ent)) {
              if (dEntity.valueOf(ent).isGeneric()) {
                if (!CitizensAPI.getNPCRegistry().isNPC(entity)) {
                  valid=true;
                }
              }
 else {
                valid=true;
              }
            }
            if (valid)             possibleTargets.add((LivingEntity)entity);
          }
        }
 else {
          possibleTargets.add((LivingEntity)entity);
          entity.getType();
        }
      }
    }
    BlockIterator bi;
    try {
      bi=new BlockIterator(getPlayerEntity(),range);
    }
 catch (    IllegalStateException e) {
      return Element.NULL.getAttribute(attribute.fulfill(attribs));
    }
    Block b;
    Location l;
    int bx, by, bz;
    double ex, ey, ez;
    while (bi.hasNext()) {
      b=bi.next();
      bx=b.getX();
      by=b.getY();
      bz=b.getZ();
      if (b.getType() != Material.AIR) {
        break;
      }
 else {
        for (        LivingEntity possibleTarget : possibleTargets) {
          l=possibleTarget.getLocation();
          ex=l.getX();
          ey=l.getY();
          ez=l.getZ();
          if ((bx - .50 <= ex && ex <= bx + 1.50) && (bz - .50 <= ez && ez <= bz + 1.50) && (by - 1 <= ey && ey <= by + 2.5)) {
            return new dEntity(possibleTarget).getAttribute(attribute.fulfill(attribs));
          }
        }
      }
    }
    return Element.NULL.getAttribute(attribute.fulfill(attribs));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    List<String> players=new ArrayList<String>();
    if (attribute.startsWith(""String_Node_Str"")) {
      for (      Player player : Bukkit.getOnlinePlayers())       players.add(player.getName());
      return new dList(players).getAttribute(attribute.fulfill(2));
    }
 else     if (attribute.startsWith(""String_Node_Str"")) {
      for (      OfflinePlayer player : offlinePlayers) {
        if (!player.isOnline())         players.add(player.getName());
      }
      return new dList(players).getAttribute(attribute.fulfill(2));
    }
 else {
      for (      OfflinePlayer player : offlinePlayers)       players.add(player.getName());
      return new dList(players).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && !isOnline())   return new Element(player_name).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getOfflinePlayer().getBedSpawnLocation()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(getOfflinePlayer().getFirstPlayed()).getAttribute(attribute.fulfill(1));
 else     return new Duration(getOfflinePlayer().getFirstPlayed() / 50).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(true).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isHealthScaled()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getHealthScale()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isBanned()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(isOnline()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isOp()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isWhitelisted()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(getOfflinePlayer().getLastPlayed()).getAttribute(attribute.fulfill(1));
 else     return new Duration(getOfflinePlayer().getLastPlayed() / 50).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return getInventory().getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && !isOnline()) {
    return getLocation().getAttribute(attribute.fulfill(1));
  }
  if (!isOnline())   return new Element(identify()).getAttribute(attribute);
  if (attribute.startsWith(""String_Node_Str""))   return new dInventory(getPlayerEntity().getOpenInventory().getTopInventory()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dItem(getPlayerEntity().getItemOnCursor()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getPlayerEntity().hasMetadata(""String_Node_Str""))     return getSelectedNPC().getAttribute(attribute.fulfill(1));
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && !attribute.startsWith(""String_Node_Str""))   return new dEntity(getPlayerEntity()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getAddress().getHostName()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getDisplayName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerListName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(player_name).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (Depends.permissions == null) {
      dB.echoError(""String_Node_Str"");
      return null;
    }
    String permission=attribute.getContext(1);
    if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.has((World)null,player_name,permission)).getAttribute(attribute.fulfill(2));
 else     if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.has(attribute.getContext(2),player_name,permission)).getAttribute(attribute.fulfill(2));
    return new Element(Depends.permissions.has(getPlayerEntity(),permission)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (Depends.permissions == null) {
      dB.echoError(""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    String group=attribute.getContext(1);
    if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.playerInGroup((World)null,player_name,group)).getAttribute(attribute.fulfill(2));
 else     if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.playerInGroup(attribute.getContext(2),player_name,group)).getAttribute(attribute.fulfill(2));
    return new Element(Depends.permissions.playerInGroup(getPlayerEntity(),group)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dScript script=dScript.valueOf(attribute.getContext(1));
    if (script == null)     return Element.FALSE.getAttribute(attribute.fulfill(1));
    return new Element(FinishCommand.getScriptCompletes(getName(),script.getName()) > 0).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dScript script=dScript.valueOf(attribute.getContext(1));
    if (script == null)     return Element.FALSE.getAttribute(attribute.fulfill(1));
    return new Element(FailCommand.getScriptFails(getName(),script.getName()) > 0).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getPlayerEntity().getCompassTarget()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getAllowFlight()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getFlySpeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHunger=getPlayerEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHunger=attribute.getIntContext(2);
    if (getPlayerEntity().getFoodLevel() / maxHunger < .10)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < .40)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < .75)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < 1)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getSaturation()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getFoodLevel()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getMaximumAir()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getRemainingAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getGameMode().getValue()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getGameMode().name()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isBlocking()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isFlying()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSleeping()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSneaking()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSprinting()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(getPlayerEntity().getSleepTicks() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerTime()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getWalkSpeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerWeather().name()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getLevel()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getExpToLevel()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getTotalExperience()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getExp() * 100).getAttribute(attribute.fulfill(1));
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new dEntity(getPlayerEntity()).getAttribute(attribute);
}",0.998020158387329
10305,"@EventHandler public void serverTag(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str"") || event.replaced())   return;
  Attribute attribute=new Attribute(event.raw_tag,event.getScriptEntry()).fulfill(1);
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else {
      event.setReplaced(""String_Node_Str"");
      return;
    }
    event.setReplaced(new Element(FlagManager.serverHasFlag(flag_name)).getAttribute(attribute.fulfill(1)));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else {
      event.setReplaced(""String_Node_Str"");
      return;
    }
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
      event.setReplaced(new Element(!FlagManager.serverHasFlag(flag_name)).getAttribute(attribute.fulfill(1)));
      return;
    }
    if (attribute.startsWith(""String_Node_Str"") && !FlagManager.serverHasFlag(flag_name)) {
      event.setReplaced(new Element(0).getAttribute(attribute.fulfill(1)));
      return;
    }
    if (FlagManager.serverHasFlag(flag_name))     event.setReplaced(new dList(DenizenAPI.getCurrentInstance().flagManager().getGlobalFlag(flag_name)).getAttribute(attribute));
 else     event.setReplaced(""String_Node_Str"");
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new Element(System.currentTimeMillis()).getAttribute(attribute.fulfill(1)));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    NPC npc=((Citizens)Bukkit.getPluginManager().getPlugin(""String_Node_Str"")).getNPCSelector().getSelected(Bukkit.getConsoleSender());
    if (npc == null)     event.setReplaced(Element.NULL.getAttribute(attribute.fulfill(1)));
 else     event.setReplaced(new dNPC(npc).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    ArrayList<dNPC> npcs=new ArrayList<dNPC>();
    for (    NPC npc : CitizensAPI.getNPCRegistry())     if (npc.getName().equalsIgnoreCase(attribute.getContext(1)))     npcs.add(dNPC.mirrorCitizensNPC(npc));
    event.setReplaced(new dList(npcs).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    event.setReplaced(new Element(new File(DenizenAPI.getCurrentInstance().getDataFolder(),attribute.getContext(1)).exists()).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new Element(DenizenAPI.getCurrentInstance().getDescription().getVersion()).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new Element(Bukkit.getBukkitVersion()).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new Element(Bukkit.getServer().getVersion()).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dList plugins=new dList();
    for (    Plugin plugin : Bukkit.getServer().getPluginManager().getPlugins())     plugins.add(plugin.getName());
    event.setReplaced(plugins.getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    Player matchPlayer=null;
    String matchInput=attribute.getContext(1).toLowerCase();
    for (    Player player : Bukkit.getOnlinePlayers()) {
      if (player.getName().toLowerCase().equals(matchInput)) {
        matchPlayer=player;
        break;
      }
 else       if (player.getName().toLowerCase().contains(matchInput) && matchPlayer == null) {
        matchPlayer=player;
      }
    }
    if (matchPlayer == null) {
      event.setReplaced(""String_Node_Str"");
    }
 else {
      event.setReplaced(new dPlayer(matchPlayer).getAttribute(attribute.fulfill(1)));
    }
    return;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    dScript script=dScript.valueOf(attribute.getContext(1));
    if (script == null || !(script.getContainer() instanceof AssignmentScriptContainer)) {
      dB.echoError(""String_Node_Str"");
    }
 else {
      ArrayList<dNPC> npcs=new ArrayList<dNPC>();
      for (      NPC npc : CitizensAPI.getNPCRegistry()) {
        if (npc.hasTrait(AssignmentTrait.class) && npc.getTrait(AssignmentTrait.class).hasAssignment() && npc.getTrait(AssignmentTrait.class).getAssignment().getName().equalsIgnoreCase(script.getName()))         npcs.add(dNPC.mirrorCitizensNPC(npc));
      }
      event.setReplaced(new dList(npcs).getAttribute(attribute.fulfill(1)));
      return;
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dNPC> npcs=new ArrayList<dNPC>();
    for (    NPC npc : CitizensAPI.getNPCRegistry())     npcs.add(dNPC.mirrorCitizensNPC(npc));
    event.setReplaced(new dList(npcs).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dWorld> worlds=new ArrayList<dWorld>();
    for (    World world : Bukkit.getWorlds())     worlds.add(dWorld.mirrorBukkitWorld(world));
    event.setReplaced(new dList(worlds).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    Player player : Bukkit.getOnlinePlayers())     players.add(dPlayer.mirrorBukkitPlayer(player));
    for (    OfflinePlayer player : dPlayer.offlinePlayers)     players.add(dPlayer.mirrorBukkitPlayer(player));
    event.setReplaced(new dList(players).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlugin> plugins=new ArrayList<dPlugin>();
    for (    Plugin plugin : Bukkit.getServer().getPluginManager().getPlugins())     plugins.add(new dPlugin(plugin));
    event.setReplaced(new dList(plugins).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    Player player : Bukkit.getOnlinePlayers())     players.add(dPlayer.mirrorBukkitPlayer(player));
    event.setReplaced(new dList(players).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    OfflinePlayer player : dPlayer.offlinePlayers)     players.add(dPlayer.mirrorBukkitPlayer(player));
    event.setReplaced(new dList(players).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    Player player : Bukkit.getOnlinePlayers())     if (player.isOp())     players.add(dPlayer.mirrorBukkitPlayer(player));
    for (    OfflinePlayer player : dPlayer.offlinePlayers)     if (player.isOp())     players.add(dPlayer.mirrorBukkitPlayer(player));
    event.setReplaced(new dList(players).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    Player player : Bukkit.getOnlinePlayers())     if (player.isOp())     players.add(dPlayer.mirrorBukkitPlayer(player));
    event.setReplaced(new dList(players).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    OfflinePlayer player : dPlayer.offlinePlayers)     if (player.isOp())     players.add(dPlayer.mirrorBukkitPlayer(player));
    event.setReplaced(new dList(players).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new Element(Bukkit.getServer().getMotd()).getAttribute(attribute.fulfill(1)));
    return;
  }
}","@EventHandler public void serverTag(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str"") || event.replaced())   return;
  Attribute attribute=new Attribute(event.raw_tag,event.getScriptEntry()).fulfill(1);
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else {
      event.setReplaced(""String_Node_Str"");
      return;
    }
    event.setReplaced(new Element(FlagManager.serverHasFlag(flag_name)).getAttribute(attribute.fulfill(1)));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else {
      event.setReplaced(""String_Node_Str"");
      return;
    }
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
      event.setReplaced(new Element(!FlagManager.serverHasFlag(flag_name)).getAttribute(attribute.fulfill(1)));
      return;
    }
    if (attribute.startsWith(""String_Node_Str"") && !FlagManager.serverHasFlag(flag_name)) {
      event.setReplaced(new Element(0).getAttribute(attribute.fulfill(1)));
      return;
    }
    if (FlagManager.serverHasFlag(flag_name))     event.setReplaced(new dList(DenizenAPI.getCurrentInstance().flagManager().getGlobalFlag(flag_name)).getAttribute(attribute));
 else     event.setReplaced(""String_Node_Str"");
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new Element(System.currentTimeMillis()).getAttribute(attribute.fulfill(1)));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    NPC npc=((Citizens)Bukkit.getPluginManager().getPlugin(""String_Node_Str"")).getNPCSelector().getSelected(Bukkit.getConsoleSender());
    if (npc == null)     event.setReplaced(Element.NULL.getAttribute(attribute.fulfill(1)));
 else     event.setReplaced(new dNPC(npc).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    ArrayList<dNPC> npcs=new ArrayList<dNPC>();
    for (    NPC npc : CitizensAPI.getNPCRegistry())     if (npc.getName().equalsIgnoreCase(attribute.getContext(1)))     npcs.add(dNPC.mirrorCitizensNPC(npc));
    event.setReplaced(new dList(npcs).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    event.setReplaced(new Element(new File(DenizenAPI.getCurrentInstance().getDataFolder(),attribute.getContext(1)).exists()).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new Element(DenizenAPI.getCurrentInstance().getDescription().getVersion()).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new Element(Bukkit.getBukkitVersion()).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new Element(Bukkit.getServer().getVersion()).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dList plugins=new dList();
    for (    Plugin plugin : Bukkit.getServer().getPluginManager().getPlugins())     plugins.add(plugin.getName());
    event.setReplaced(plugins.getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    Player matchPlayer=null;
    String matchInput=attribute.getContext(1).toLowerCase();
    for (    Player player : Bukkit.getOnlinePlayers()) {
      if (player.getName().toLowerCase().equals(matchInput)) {
        matchPlayer=player;
        break;
      }
 else       if (player.getName().toLowerCase().contains(matchInput) && matchPlayer == null) {
        matchPlayer=player;
      }
    }
    if (matchPlayer == null) {
      event.setReplaced(""String_Node_Str"");
    }
 else {
      event.setReplaced(new dPlayer(matchPlayer).getAttribute(attribute.fulfill(1)));
    }
    return;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    dScript script=dScript.valueOf(attribute.getContext(1));
    if (script == null || !(script.getContainer() instanceof AssignmentScriptContainer)) {
      dB.echoError(""String_Node_Str"");
    }
 else {
      ArrayList<dNPC> npcs=new ArrayList<dNPC>();
      for (      NPC npc : CitizensAPI.getNPCRegistry()) {
        if (npc.hasTrait(AssignmentTrait.class) && npc.getTrait(AssignmentTrait.class).hasAssignment() && npc.getTrait(AssignmentTrait.class).getAssignment().getName().equalsIgnoreCase(script.getName()))         npcs.add(dNPC.mirrorCitizensNPC(npc));
      }
      event.setReplaced(new dList(npcs).getAttribute(attribute.fulfill(1)));
      return;
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dNPC> npcs=new ArrayList<dNPC>();
    for (    NPC npc : CitizensAPI.getNPCRegistry())     npcs.add(dNPC.mirrorCitizensNPC(npc));
    event.setReplaced(new dList(npcs).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dWorld> worlds=new ArrayList<dWorld>();
    for (    World world : Bukkit.getWorlds())     worlds.add(dWorld.mirrorBukkitWorld(world));
    event.setReplaced(new dList(worlds).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlugin> plugins=new ArrayList<dPlugin>();
    for (    Plugin plugin : Bukkit.getServer().getPluginManager().getPlugins())     plugins.add(new dPlugin(plugin));
    event.setReplaced(new dList(plugins).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    OfflinePlayer player : dPlayer.offlinePlayers)     players.add(dPlayer.mirrorBukkitPlayer(player));
    event.setReplaced(new dList(players).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    Player player : Bukkit.getOnlinePlayers())     players.add(dPlayer.mirrorBukkitPlayer(player));
    event.setReplaced(new dList(players).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    OfflinePlayer player : dPlayer.offlinePlayers)     if (!player.isOnline())     players.add(dPlayer.mirrorBukkitPlayer(player));
    event.setReplaced(new dList(players).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    OfflinePlayer player : dPlayer.offlinePlayers)     if (player.isOp())     players.add(dPlayer.mirrorBukkitPlayer(player));
    event.setReplaced(new dList(players).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    Player player : Bukkit.getOnlinePlayers())     if (player.isOp())     players.add(dPlayer.mirrorBukkitPlayer(player));
    event.setReplaced(new dList(players).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dPlayer> players=new ArrayList<dPlayer>();
    for (    OfflinePlayer player : dPlayer.offlinePlayers)     if (player.isOp() && !player.isOnline())     players.add(dPlayer.mirrorBukkitPlayer(player));
    event.setReplaced(new dList(players).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new Element(Bukkit.getServer().getMotd()).getAttribute(attribute.fulfill(1)));
    return;
  }
}",0.8280789721090567
10306,"public void spawnAt(Location location){
  if (isNPC()) {
    if (getNPC().isSpawned())     getNPC().teleport(location,TeleportCause.PLUGIN);
 else {
      getNPC().spawn(location);
      entity=getNPC().getEntity();
      uuid=getNPC().getEntity().getUniqueId();
    }
  }
 else   if (entity != null && isUnique())   entity.teleport(location);
 else {
    if (entity_type != null) {
      if (despawned_entity != null) {
        if (despawned_entity.custom_script != null) {
        }
 else         entity=location.getWorld().spawnEntity(location,entity_type);
        getLivingEntity().teleport(location);
        getLivingEntity().getEquipment().setArmorContents(despawned_entity.equipment);
        getLivingEntity().setHealth(despawned_entity.health);
        despawned_entity=null;
      }
 else {
        org.bukkit.entity.Entity ent=null;
        if (entity_type.name().matches(""String_Node_Str"")) {
          NPC npc=CitizensAPI.getNPCRegistry().createNPC(EntityType.PLAYER,data1);
          npc.spawn(location);
          entity=npc.getEntity();
          uuid=entity.getUniqueId();
        }
 else         if (entity_type.name().matches(""String_Node_Str"")) {
          Material material=null;
          if (data1 != null && dMaterial.matches(data1)) {
            material=dMaterial.valueOf(data1).getMaterial();
            while (data1.equalsIgnoreCase(""String_Node_Str"") && ((!material.isBlock()) || material == Material.AIR || material == Material.PORTAL || material == Material.ENDER_PORTAL)) {
              material=dMaterial.valueOf(data1).getMaterial();
            }
          }
          if (material == null || (!material.isBlock())) {
            material=Material.SAND;
          }
          byte materialData=0;
          if (data2 != null && aH.matchesInteger(data2)) {
            materialData=(byte)aH.getIntegerFrom(data2);
          }
          ent=location.getWorld().spawnFallingBlock(location,material,materialData);
          entity=ent;
          uuid=entity.getUniqueId();
        }
 else {
          ent=location.getWorld().spawnEntity(location,entity_type);
          entity=ent;
          uuid=entity.getUniqueId();
          if (entity_type.name().matches(""String_Node_Str"")) {
            if (!dItem.matches(data1)) {
              data1=""String_Node_Str"";
            }
            ((PigZombie)entity).getEquipment().setItemInHand(dItem.valueOf(data1).getItemStack());
          }
 else           if (entity_type.name().matches(""String_Node_Str"")) {
            if (!dItem.matches(data2)) {
              data2=""String_Node_Str"";
            }
            ((Skeleton)entity).getEquipment().setItemInHand(dItem.valueOf(data2).getItemStack());
          }
          if (data1 != null) {
            try {
              if (ent instanceof Creeper && data1.equalsIgnoreCase(""String_Node_Str"")) {
                ((Creeper)entity).setPowered(true);
              }
 else               if (ent instanceof Enderman && dMaterial.matches(data1)) {
                ((Enderman)entity).setCarriedMaterial(dMaterial.valueOf(data1).getMaterialData());
              }
 else               if (ent instanceof Horse) {
                setSubtype(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",data1);
                if (data2 != null) {
                  setSubtype(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",data2);
                }
              }
 else               if (ent instanceof Ocelot) {
                setSubtype(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",data1);
              }
 else               if (ent instanceof Sheep) {
                setSubtype(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",data1);
              }
 else               if (ent instanceof Skeleton) {
                setSubtype(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",data1);
              }
 else               if (ent instanceof Slime && aH.matchesInteger(data1)) {
                ((Slime)entity).setSize(aH.getIntegerFrom(data1));
              }
 else               if (ent instanceof Villager) {
                setSubtype(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",data1);
              }
            }
 catch (            Exception e) {
              dB.echoError(e);
            }
          }
        }
      }
    }
 else     dB.echoError(""String_Node_Str"");
    for (    Mechanism mechanism : mechanisms) {
      adjust(mechanism);
    }
    mechanisms.clear();
  }
}","public void spawnAt(Location location){
  if (isNPC()) {
    if (getNPC().isSpawned())     getNPC().teleport(location,TeleportCause.PLUGIN);
 else {
      getNPC().spawn(location);
      entity=getNPC().getEntity();
      uuid=getNPC().getEntity().getUniqueId();
    }
  }
 else   if (entity != null && isUnique())   entity.teleport(location);
 else {
    if (entity_type != null) {
      if (despawned_entity != null) {
        if (despawned_entity.custom_script != null) {
        }
 else         entity=location.getWorld().spawnEntity(location,entity_type);
        getLivingEntity().teleport(location);
        getLivingEntity().getEquipment().setArmorContents(despawned_entity.equipment);
        getLivingEntity().setHealth(despawned_entity.health);
        despawned_entity=null;
      }
 else {
        org.bukkit.entity.Entity ent=null;
        if (entity_type.name().matches(""String_Node_Str"")) {
          NPC npc=CitizensAPI.getNPCRegistry().createNPC(EntityType.PLAYER,data1);
          npc.spawn(location);
          entity=npc.getEntity();
          uuid=entity.getUniqueId();
        }
 else         if (entity_type.name().matches(""String_Node_Str"")) {
          Material material=null;
          if (data1 != null && dMaterial.matches(data1)) {
            material=dMaterial.valueOf(data1).getMaterial();
            while (data1.equalsIgnoreCase(""String_Node_Str"") && ((!material.isBlock()) || material == Material.AIR || material == Material.PORTAL || material == Material.ENDER_PORTAL)) {
              material=dMaterial.valueOf(data1).getMaterial();
            }
          }
          if (material == null || (!material.isBlock())) {
            material=Material.SAND;
          }
          byte materialData=0;
          if (data2 != null && aH.matchesInteger(data2)) {
            materialData=(byte)aH.getIntegerFrom(data2);
          }
          ent=location.getWorld().spawnFallingBlock(location,material,materialData);
          entity=ent;
          uuid=entity.getUniqueId();
        }
 else {
          ent=location.getWorld().spawnEntity(location,entity_type);
          entity=ent;
          uuid=entity.getUniqueId();
          if (entity_type.name().matches(""String_Node_Str"")) {
            if (!dItem.matches(data1)) {
              data1=""String_Node_Str"";
            }
            ((PigZombie)entity).getEquipment().setItemInHand(dItem.valueOf(data1).getItemStack());
          }
 else           if (entity_type.name().matches(""String_Node_Str"")) {
            if (!dItem.matches(data2)) {
              data2=""String_Node_Str"";
            }
            ((Skeleton)entity).getEquipment().setItemInHand(dItem.valueOf(data2).getItemStack());
          }
          if (data1 != null) {
            try {
              if (ent instanceof Creeper && data1.equalsIgnoreCase(""String_Node_Str"")) {
                ((Creeper)entity).setPowered(true);
              }
 else               if (ent instanceof Enderman && dMaterial.matches(data1)) {
                ((Enderman)entity).setCarriedMaterial(dMaterial.valueOf(data1).getMaterialData());
              }
 else               if (ent instanceof Horse) {
                setSubtype(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",data1);
                if (data2 != null) {
                  setSubtype(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",data2);
                }
              }
 else               if (ent instanceof Ocelot) {
                setSubtype(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",data1);
              }
 else               if (ent instanceof Sheep) {
                setSubtype(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",data1);
              }
 else               if (ent instanceof Skeleton) {
                setSubtype(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",data1);
              }
 else               if (ent instanceof Slime && aH.matchesInteger(data1)) {
                ((Slime)entity).setSize(aH.getIntegerFrom(data1));
              }
 else               if (ent instanceof Villager) {
                setSubtype(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",data1);
              }
            }
 catch (            Exception e) {
              dB.echoError(""String_Node_Str"");
              dB.echoError(e);
            }
          }
        }
      }
    }
 else     dB.echoError(""String_Node_Str"");
    if (!isUnique()) {
      dB.echoError(""String_Node_Str"");
      return;
    }
    for (    Mechanism mechanism : mechanisms) {
      adjust(mechanism);
    }
    mechanisms.clear();
  }
}",0.985728509790906
10307,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (attribute.startsWith(""String_Node_Str"")) {
    NPC citizen=getCitizen();
    return new Element(citizen.hasTrait(NicknameTrait.class) && citizen.getTrait(NicknameTrait.class).hasNickname()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getCitizen().hasTrait(NicknameTrait.class) ? getCitizen().getTrait(NicknameTrait.class).getNickname() : getName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.stripColor(getName())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    List<String> list=new ArrayList<String>();
    for (    Trait trait : getCitizen().getTraits())     list.add(trait.getName());
    return new dList(list).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1)) {
      Class<? extends Trait> trait=CitizensAPI.getTraitFactory().getTraitClass(attribute.getContext(1));
      if (trait != null)       return new Element(getCitizen().hasTrait(trait)).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    List<String> list=new ArrayList<String>();
    for (    Anchor anchor : getCitizen().getTrait(Anchors.class).getAnchors())     list.add(anchor.getName());
    return new dList(list).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return (new Element(getCitizen().getTrait(Anchors.class).getAnchors().size() > 0)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && getCitizen().getTrait(Anchors.class).getAnchor(attribute.getContext(1)) != null)     return new dLocation(getCitizen().getTrait(Anchors.class).getAnchor(attribute.getContext(1)).getLocation()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
    return new Element(FlagManager.npcHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(!FlagManager.npcHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
    if (attribute.startsWith(""String_Node_Str"") && !FlagManager.npcHasFlag(this,flag_name))     return new Element(0).getAttribute(attribute.fulfill(1));
    if (FlagManager.npcHasFlag(this,flag_name))     return new dList(DenizenAPI.getCurrentInstance().flagManager().getNPCFlag(getId(),flag_name)).getAttribute(attribute);
 else     return Element.NULL.getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String constant_name;
    if (attribute.hasContext(1)) {
      if (getCitizen().hasTrait(ConstantsTrait.class) && getCitizen().getTrait(ConstantsTrait.class).getConstant(attribute.getContext(1)) != null) {
        return new Element(getCitizen().getTrait(ConstantsTrait.class).getConstant(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
      }
 else {
        return Element.NULL.getAttribute(attribute.fulfill(1));
      }
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1))     return new Element(getCitizen().getTrait(Poses.class).hasPose(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1)) {
      Pose pose=getCitizen().getTrait(Poses.class).getPose(attribute.getContext(1));
      return new dLocation(org.bukkit.Bukkit.getWorlds().get(0),0,0,0,pose.getYaw(),pose.getPitch()).getAttribute(attribute.fulfill(1));
    }
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(isEngaged()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getId()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (dPlayer.matches(getOwner())) {
      return dPlayer.valueOf(getOwner()).getAttribute(attribute.fulfill(1));
    }
 else     return new Element(getOwner()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return getDenizenEntity().getInventory().getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(isSpawned()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getCitizen().isProtected()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    NPC citizen=getCitizen();
    if (citizen.hasTrait(LookClose.class)) {
      String lookclose=citizen.getTrait(LookClose.class).toString();
      lookclose=lookclose.substring(10,lookclose.length() - 1);
      return new Element(Boolean.valueOf(lookclose)).getAttribute(attribute.fulfill(1));
    }
    return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return (NPCTags.previousLocations.containsKey(getId()) ? NPCTags.previousLocations.get(getId()).getAttribute(attribute.fulfill(2)) : Element.NULL.getAttribute(attribute.fulfill(2)));
  if (attribute.startsWith(""String_Node_Str"")) {
    NPC citizen=getCitizen();
    return new Element(citizen.hasTrait(AssignmentTrait.class) && citizen.getTrait(AssignmentTrait.class).hasAssignment()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    NPC citizen=getCitizen();
    if (!citizen.hasTrait(AssignmentTrait.class) || !citizen.getTrait(AssignmentTrait.class).hasAssignment()) {
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
 else {
      return new Element(citizen.getTrait(AssignmentTrait.class).getAssignment().getName()).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().isNavigating()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().speed()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().range()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().attackStrategy().toString()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().speedModifier()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().baseSpeed()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().avoidWater()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return (getNavigator().getTargetAsLocation() != null ? new dLocation(getNavigator().getTargetAsLocation()).getAttribute(attribute.fulfill(2)) : Element.NULL.getAttribute(attribute.fulfill(2)));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getEntityTarget() != null && getNavigator().getEntityTarget().isAggressive()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getTargetType() == null ? Element.NULL.getAttribute(attribute.fulfill(2)) : getNavigator().getTargetType().toString()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return (getNavigator().getEntityTarget() != null && getNavigator().getEntityTarget().getTarget() != null ? new dEntity(getNavigator().getEntityTarget().getTarget()).getAttribute(attribute.fulfill(2)) : Element.NULL.getAttribute(attribute.fulfill(2)));
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return (getEntity() != null ? new dEntity(getCitizen()).getAttribute(attribute) : new Element(identify()).getAttribute(attribute));
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (attribute.startsWith(""String_Node_Str"")) {
    return Element.TRUE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    NPC citizen=getCitizen();
    return new Element(citizen.hasTrait(NicknameTrait.class) && citizen.getTrait(NicknameTrait.class).hasNickname()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getCitizen().hasTrait(NicknameTrait.class) ? getCitizen().getTrait(NicknameTrait.class).getNickname() : getName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.stripColor(getName())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    List<String> list=new ArrayList<String>();
    for (    Trait trait : getCitizen().getTraits())     list.add(trait.getName());
    return new dList(list).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1)) {
      Class<? extends Trait> trait=CitizensAPI.getTraitFactory().getTraitClass(attribute.getContext(1));
      if (trait != null)       return new Element(getCitizen().hasTrait(trait)).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    List<String> list=new ArrayList<String>();
    for (    Anchor anchor : getCitizen().getTrait(Anchors.class).getAnchors())     list.add(anchor.getName());
    return new dList(list).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return (new Element(getCitizen().getTrait(Anchors.class).getAnchors().size() > 0)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && getCitizen().getTrait(Anchors.class).getAnchor(attribute.getContext(1)) != null)     return new dLocation(getCitizen().getTrait(Anchors.class).getAnchor(attribute.getContext(1)).getLocation()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
    return new Element(FlagManager.npcHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(!FlagManager.npcHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
    if (attribute.startsWith(""String_Node_Str"") && !FlagManager.npcHasFlag(this,flag_name))     return new Element(0).getAttribute(attribute.fulfill(1));
    if (FlagManager.npcHasFlag(this,flag_name))     return new dList(DenizenAPI.getCurrentInstance().flagManager().getNPCFlag(getId(),flag_name)).getAttribute(attribute);
 else     return Element.NULL.getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String constant_name;
    if (attribute.hasContext(1)) {
      if (getCitizen().hasTrait(ConstantsTrait.class) && getCitizen().getTrait(ConstantsTrait.class).getConstant(attribute.getContext(1)) != null) {
        return new Element(getCitizen().getTrait(ConstantsTrait.class).getConstant(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
      }
 else {
        return Element.NULL.getAttribute(attribute.fulfill(1));
      }
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1))     return new Element(getCitizen().getTrait(Poses.class).hasPose(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1)) {
      Pose pose=getCitizen().getTrait(Poses.class).getPose(attribute.getContext(1));
      return new dLocation(org.bukkit.Bukkit.getWorlds().get(0),0,0,0,pose.getYaw(),pose.getPitch()).getAttribute(attribute.fulfill(1));
    }
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(isEngaged()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getId()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (dPlayer.matches(getOwner())) {
      return dPlayer.valueOf(getOwner()).getAttribute(attribute.fulfill(1));
    }
 else     return new Element(getOwner()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return getDenizenEntity().getInventory().getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(isSpawned()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getCitizen().isProtected()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    NPC citizen=getCitizen();
    if (citizen.hasTrait(LookClose.class)) {
      String lookclose=citizen.getTrait(LookClose.class).toString();
      lookclose=lookclose.substring(10,lookclose.length() - 1);
      return new Element(Boolean.valueOf(lookclose)).getAttribute(attribute.fulfill(1));
    }
    return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return (NPCTags.previousLocations.containsKey(getId()) ? NPCTags.previousLocations.get(getId()).getAttribute(attribute.fulfill(2)) : Element.NULL.getAttribute(attribute.fulfill(2)));
  if (attribute.startsWith(""String_Node_Str"")) {
    NPC citizen=getCitizen();
    return new Element(citizen.hasTrait(AssignmentTrait.class) && citizen.getTrait(AssignmentTrait.class).hasAssignment()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    NPC citizen=getCitizen();
    if (!citizen.hasTrait(AssignmentTrait.class) || !citizen.getTrait(AssignmentTrait.class).hasAssignment()) {
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
 else {
      return new Element(citizen.getTrait(AssignmentTrait.class).getAssignment().getName()).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().isNavigating()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().speed()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().range()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().attackStrategy().toString()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().speedModifier()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().baseSpeed()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().avoidWater()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return (getNavigator().getTargetAsLocation() != null ? new dLocation(getNavigator().getTargetAsLocation()).getAttribute(attribute.fulfill(2)) : Element.NULL.getAttribute(attribute.fulfill(2)));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getEntityTarget() != null && getNavigator().getEntityTarget().isAggressive()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getTargetType() == null ? Element.NULL.getAttribute(attribute.fulfill(2)) : getNavigator().getTargetType().toString()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return (getNavigator().getEntityTarget() != null && getNavigator().getEntityTarget().getTarget() != null ? new dEntity(getNavigator().getEntityTarget().getTarget()).getAttribute(attribute.fulfill(2)) : Element.NULL.getAttribute(attribute.fulfill(2)));
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return (getEntity() != null ? new dEntity(getCitizen()).getAttribute(attribute) : new Element(identify()).getAttribute(attribute));
}",0.9937001728271172
10308,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (player_name == null)   return Element.NULL.getAttribute(attribute);
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE.toString()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dList(PlayerTags.playerChatHistory.get(player_name)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    int x=1;
    if (attribute.hasContext(1) && aH.matchesInteger(attribute.getContext(1)))     x=attribute.getIntContext(1);
    if (!PlayerTags.playerChatHistory.containsKey(player_name))     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return new Element(PlayerTags.playerChatHistory.get(player_name).get(x - 1)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(!FlagManager.playerHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
    if (attribute.startsWith(""String_Node_Str"") && !FlagManager.playerHasFlag(this,flag_name))     return new Element(0).getAttribute(attribute.fulfill(1));
    if (FlagManager.playerHasFlag(this,flag_name))     return new dList(DenizenAPI.getCurrentInstance().flagManager().getPlayerFlag(getName(),flag_name)).getAttribute(attribute);
 else     return Element.NULL.getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
    return new Element(FlagManager.playerHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String outcome=""String_Node_Str"";
    if (attribute.hasContext(1)) {
      try {
        outcome=DenizenAPI.getCurrentInstance().getSaves().getString(""String_Node_Str"" + getName() + ""String_Node_Str""+ dScript.valueOf(attribute.getContext(1)).getName()+ ""String_Node_Str"");
      }
 catch (      Exception e) {
        outcome=""String_Node_Str"";
      }
    }
    return new Element(outcome).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.economy != null) {
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Depends.economy.currencyNameSingular()).getAttribute(attribute.fulfill(2));
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Depends.economy.currencyNamePlural()).getAttribute(attribute.fulfill(2));
      return new Element(Depends.economy.getBalance(player_name)).getAttribute(attribute.fulfill(1));
    }
 else {
      dB.echoError(""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    int range=50;
    int attribs=1;
    if (attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2) && aH.matchesInteger(attribute.getContext(2))) {
      attribs=2;
      range=attribute.getIntContext(2);
    }
    List<Entity> entities=getPlayerEntity().getNearbyEntities(range,range,range);
    ArrayList<LivingEntity> possibleTargets=new ArrayList<LivingEntity>();
    for (    Entity entity : entities) {
      if (entity instanceof LivingEntity) {
        if (attribute.hasContext(1)) {
          String context=attribute.getContext(1);
          if (context.toLowerCase().startsWith(""String_Node_Str""))           context=context.substring(3);
          for (          String ent : context.split(""String_Node_Str"")) {
            boolean valid=false;
            if (ent.equalsIgnoreCase(""String_Node_Str"") && CitizensAPI.getNPCRegistry().isNPC(entity)) {
              valid=true;
            }
 else             if (dEntity.matches(ent)) {
              if (dEntity.valueOf(ent).isGeneric()) {
                if (!CitizensAPI.getNPCRegistry().isNPC(entity)) {
                  valid=true;
                }
              }
 else {
                valid=true;
              }
            }
            if (valid)             possibleTargets.add((LivingEntity)entity);
          }
        }
 else {
          possibleTargets.add((LivingEntity)entity);
          entity.getType();
        }
      }
    }
    BlockIterator bi;
    try {
      bi=new BlockIterator(getPlayerEntity(),range);
    }
 catch (    IllegalStateException e) {
      return Element.NULL.getAttribute(attribute.fulfill(attribs));
    }
    Block b;
    Location l;
    int bx, by, bz;
    double ex, ey, ez;
    while (bi.hasNext()) {
      b=bi.next();
      bx=b.getX();
      by=b.getY();
      bz=b.getZ();
      if (b.getType() != Material.AIR) {
        break;
      }
 else {
        for (        LivingEntity possibleTarget : possibleTargets) {
          l=possibleTarget.getLocation();
          ex=l.getX();
          ey=l.getY();
          ez=l.getZ();
          if ((bx - .50 <= ex && ex <= bx + 1.50) && (bz - .50 <= ez && ez <= bz + 1.50) && (by - 1 <= ey && ey <= by + 2.5)) {
            return new dEntity(possibleTarget).getAttribute(attribute.fulfill(attribs));
          }
        }
      }
    }
    return Element.NULL.getAttribute(attribute.fulfill(attribs));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    List<String> players=new ArrayList<String>();
    if (attribute.startsWith(""String_Node_Str"")) {
      for (      Player player : Bukkit.getOnlinePlayers())       players.add(player.getName());
      return new dList(players).getAttribute(attribute.fulfill(2));
    }
 else     if (attribute.startsWith(""String_Node_Str"")) {
      for (      OfflinePlayer player : offlinePlayers) {
        if (!player.isOnline())         players.add(player.getName());
      }
      return new dList(players).getAttribute(attribute.fulfill(2));
    }
 else {
      for (      OfflinePlayer player : offlinePlayers)       players.add(player.getName());
      return new dList(players).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && !isOnline())   return new Element(player_name).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getOfflinePlayer().getBedSpawnLocation()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(getOfflinePlayer().getFirstPlayed()).getAttribute(attribute.fulfill(1));
 else     return new Duration(getOfflinePlayer().getFirstPlayed() / 50).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(true).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isHealthScaled()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getHealthScale()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isBanned()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(isOnline()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isOp()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isWhitelisted()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(getOfflinePlayer().getLastPlayed()).getAttribute(attribute.fulfill(1));
 else     return new Duration(getOfflinePlayer().getLastPlayed() / 50).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return getInventory().getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && !isOnline()) {
    return getLocation().getAttribute(attribute.fulfill(1));
  }
  if (!isOnline())   return new Element(identify()).getAttribute(attribute);
  if (attribute.startsWith(""String_Node_Str""))   return new dInventory(getPlayerEntity().getOpenInventory().getTopInventory()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dItem(getPlayerEntity().getItemOnCursor()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getPlayerEntity().hasMetadata(""String_Node_Str""))     return getSelectedNPC().getAttribute(attribute.fulfill(1));
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && !attribute.startsWith(""String_Node_Str""))   return new dEntity(getPlayerEntity()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getAddress().getHostName()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getDisplayName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerListName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(player_name).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (Depends.permissions == null) {
      dB.echoError(""String_Node_Str"");
      return null;
    }
    String permission=attribute.getContext(1);
    if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.has((World)null,player_name,permission)).getAttribute(attribute.fulfill(2));
 else     if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.has(attribute.getContext(2),player_name,permission)).getAttribute(attribute.fulfill(2));
    return new Element(Depends.permissions.has(getPlayerEntity(),permission)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (Depends.permissions == null) {
      dB.echoError(""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    String group=attribute.getContext(1);
    if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.playerInGroup((World)null,player_name,group)).getAttribute(attribute.fulfill(2));
 else     if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.playerInGroup(attribute.getContext(2),player_name,group)).getAttribute(attribute.fulfill(2));
    return new Element(Depends.permissions.playerInGroup(getPlayerEntity(),group)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dScript script=dScript.valueOf(attribute.getContext(1));
    if (script == null)     return Element.FALSE.getAttribute(attribute.fulfill(1));
    return new Element(FinishCommand.getScriptCompletes(getName(),script.getName()) > 0).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dScript script=dScript.valueOf(attribute.getContext(1));
    if (script == null)     return Element.FALSE.getAttribute(attribute.fulfill(1));
    return new Element(FailCommand.getScriptFails(getName(),script.getName()) > 0).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getPlayerEntity().getCompassTarget()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getAllowFlight()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getFlySpeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHunger=getPlayerEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHunger=attribute.getIntContext(2);
    if (getPlayerEntity().getFoodLevel() / maxHunger < .10)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < .40)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < .75)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < 1)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getSaturation()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getFoodLevel()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getMaximumAir()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getRemainingAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getGameMode().getValue()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getGameMode().name()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isBlocking()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isFlying()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSleeping()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSneaking()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSprinting()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(getPlayerEntity().getSleepTicks() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerTime()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getWalkSpeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerWeather().name()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getLevel()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getExpToLevel()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getTotalExperience()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getExp() * 100).getAttribute(attribute.fulfill(1));
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new dEntity(getPlayerEntity()).getAttribute(attribute);
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (player_name == null)   return Element.NULL.getAttribute(attribute);
  if (attribute.startsWith(""String_Node_Str"")) {
    return Element.TRUE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE.toString()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dList(PlayerTags.playerChatHistory.get(player_name)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    int x=1;
    if (attribute.hasContext(1) && aH.matchesInteger(attribute.getContext(1)))     x=attribute.getIntContext(1);
    if (!PlayerTags.playerChatHistory.containsKey(player_name))     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return new Element(PlayerTags.playerChatHistory.get(player_name).get(x - 1)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(!FlagManager.playerHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
    if (attribute.startsWith(""String_Node_Str"") && !FlagManager.playerHasFlag(this,flag_name))     return new Element(0).getAttribute(attribute.fulfill(1));
    if (FlagManager.playerHasFlag(this,flag_name))     return new dList(DenizenAPI.getCurrentInstance().flagManager().getPlayerFlag(getName(),flag_name)).getAttribute(attribute);
 else     return Element.NULL.getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
    return new Element(FlagManager.playerHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String outcome=""String_Node_Str"";
    if (attribute.hasContext(1)) {
      try {
        outcome=DenizenAPI.getCurrentInstance().getSaves().getString(""String_Node_Str"" + getName() + ""String_Node_Str""+ dScript.valueOf(attribute.getContext(1)).getName()+ ""String_Node_Str"");
      }
 catch (      Exception e) {
        outcome=""String_Node_Str"";
      }
    }
    return new Element(outcome).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.economy != null) {
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Depends.economy.currencyNameSingular()).getAttribute(attribute.fulfill(2));
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Depends.economy.currencyNamePlural()).getAttribute(attribute.fulfill(2));
      return new Element(Depends.economy.getBalance(player_name)).getAttribute(attribute.fulfill(1));
    }
 else {
      dB.echoError(""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    int range=50;
    int attribs=1;
    if (attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2) && aH.matchesInteger(attribute.getContext(2))) {
      attribs=2;
      range=attribute.getIntContext(2);
    }
    List<Entity> entities=getPlayerEntity().getNearbyEntities(range,range,range);
    ArrayList<LivingEntity> possibleTargets=new ArrayList<LivingEntity>();
    for (    Entity entity : entities) {
      if (entity instanceof LivingEntity) {
        if (attribute.hasContext(1)) {
          String context=attribute.getContext(1);
          if (context.toLowerCase().startsWith(""String_Node_Str""))           context=context.substring(3);
          for (          String ent : context.split(""String_Node_Str"")) {
            boolean valid=false;
            if (ent.equalsIgnoreCase(""String_Node_Str"") && CitizensAPI.getNPCRegistry().isNPC(entity)) {
              valid=true;
            }
 else             if (dEntity.matches(ent)) {
              if (dEntity.valueOf(ent).isGeneric()) {
                if (!CitizensAPI.getNPCRegistry().isNPC(entity)) {
                  valid=true;
                }
              }
 else {
                valid=true;
              }
            }
            if (valid)             possibleTargets.add((LivingEntity)entity);
          }
        }
 else {
          possibleTargets.add((LivingEntity)entity);
          entity.getType();
        }
      }
    }
    BlockIterator bi;
    try {
      bi=new BlockIterator(getPlayerEntity(),range);
    }
 catch (    IllegalStateException e) {
      return Element.NULL.getAttribute(attribute.fulfill(attribs));
    }
    Block b;
    Location l;
    int bx, by, bz;
    double ex, ey, ez;
    while (bi.hasNext()) {
      b=bi.next();
      bx=b.getX();
      by=b.getY();
      bz=b.getZ();
      if (b.getType() != Material.AIR) {
        break;
      }
 else {
        for (        LivingEntity possibleTarget : possibleTargets) {
          l=possibleTarget.getLocation();
          ex=l.getX();
          ey=l.getY();
          ez=l.getZ();
          if ((bx - .50 <= ex && ex <= bx + 1.50) && (bz - .50 <= ez && ez <= bz + 1.50) && (by - 1 <= ey && ey <= by + 2.5)) {
            return new dEntity(possibleTarget).getAttribute(attribute.fulfill(attribs));
          }
        }
      }
    }
    return Element.NULL.getAttribute(attribute.fulfill(attribs));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    List<String> players=new ArrayList<String>();
    if (attribute.startsWith(""String_Node_Str"")) {
      for (      Player player : Bukkit.getOnlinePlayers())       players.add(player.getName());
      return new dList(players).getAttribute(attribute.fulfill(2));
    }
 else     if (attribute.startsWith(""String_Node_Str"")) {
      for (      OfflinePlayer player : offlinePlayers) {
        if (!player.isOnline())         players.add(player.getName());
      }
      return new dList(players).getAttribute(attribute.fulfill(2));
    }
 else {
      for (      OfflinePlayer player : offlinePlayers)       players.add(player.getName());
      return new dList(players).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && !isOnline())   return new Element(player_name).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getOfflinePlayer().getBedSpawnLocation()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(getOfflinePlayer().getFirstPlayed()).getAttribute(attribute.fulfill(1));
 else     return new Duration(getOfflinePlayer().getFirstPlayed() / 50).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(true).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isHealthScaled()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getHealthScale()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isBanned()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(isOnline()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isOp()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isWhitelisted()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute=attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(getOfflinePlayer().getLastPlayed()).getAttribute(attribute.fulfill(1));
 else     return new Duration(getOfflinePlayer().getLastPlayed() / 50).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return getInventory().getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && !isOnline()) {
    return getLocation().getAttribute(attribute.fulfill(1));
  }
  if (!isOnline())   return new Element(identify()).getAttribute(attribute);
  if (attribute.startsWith(""String_Node_Str""))   return new dInventory(getPlayerEntity().getOpenInventory().getTopInventory()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dItem(getPlayerEntity().getItemOnCursor()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getPlayerEntity().hasMetadata(""String_Node_Str""))     return getSelectedNPC().getAttribute(attribute.fulfill(1));
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && !attribute.startsWith(""String_Node_Str""))   return new dEntity(getPlayerEntity()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getAddress().getHostName()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getDisplayName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerListName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(player_name).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (Depends.permissions == null) {
      dB.echoError(""String_Node_Str"");
      return null;
    }
    String permission=attribute.getContext(1);
    if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.has((World)null,player_name,permission)).getAttribute(attribute.fulfill(2));
 else     if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.has(attribute.getContext(2),player_name,permission)).getAttribute(attribute.fulfill(2));
    return new Element(Depends.permissions.has(getPlayerEntity(),permission)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (Depends.permissions == null) {
      dB.echoError(""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    String group=attribute.getContext(1);
    if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.playerInGroup((World)null,player_name,group)).getAttribute(attribute.fulfill(2));
 else     if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.playerInGroup(attribute.getContext(2),player_name,group)).getAttribute(attribute.fulfill(2));
    return new Element(Depends.permissions.playerInGroup(getPlayerEntity(),group)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dScript script=dScript.valueOf(attribute.getContext(1));
    if (script == null)     return Element.FALSE.getAttribute(attribute.fulfill(1));
    return new Element(FinishCommand.getScriptCompletes(getName(),script.getName()) > 0).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dScript script=dScript.valueOf(attribute.getContext(1));
    if (script == null)     return Element.FALSE.getAttribute(attribute.fulfill(1));
    return new Element(FailCommand.getScriptFails(getName(),script.getName()) > 0).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getPlayerEntity().getCompassTarget()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getAllowFlight()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getFlySpeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHunger=getPlayerEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHunger=attribute.getIntContext(2);
    if (getPlayerEntity().getFoodLevel() / maxHunger < .10)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < .40)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < .75)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < 1)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getSaturation()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getFoodLevel()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getMaximumAir()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getRemainingAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getGameMode().getValue()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getGameMode().name()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isBlocking()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isFlying()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSleeping()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSneaking()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSprinting()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(getPlayerEntity().getSleepTicks() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerTime()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getWalkSpeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerWeather().name()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getLevel()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getExpToLevel()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getTotalExperience()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getExp() * 100).getAttribute(attribute.fulfill(1));
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new dEntity(getPlayerEntity()).getAttribute(attribute);
}",0.994281950722989
10309,"@EventHandler public void utilTag(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  String type=event.getType() != null ? event.getType() : ""String_Node_Str"";
  String typeContext=event.getTypeContext() != null ? event.getTypeContext() : ""String_Node_Str"";
  String subType=event.getSubType() != null ? event.getSubType() : ""String_Node_Str"";
  String subTypeContext=event.getSubTypeContext() != null ? event.getSubTypeContext().toUpperCase() : ""String_Node_Str"";
  String specifier=event.getSpecifier() != null ? event.getSpecifier() : ""String_Node_Str"";
  String specifierContext=event.getSpecifierContext() != null ? event.getSpecifierContext().toUpperCase() : ""String_Node_Str"";
  Attribute attribute=new Attribute(event.raw_tag,event.getScriptEntry()).fulfill(1);
  if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      if (specifier.equalsIgnoreCase(""String_Node_Str"")) {
        if (aH.matchesInteger(subTypeContext) && aH.matchesInteger(specifierContext)) {
          int min=aH.getIntegerFrom(subTypeContext);
          int max=aH.getIntegerFrom(specifierContext);
          if (min > max) {
            int store=min;
            min=max;
            max=store;
          }
          event.setReplaced(new Element(String.valueOf(Utilities.getRandom().nextInt(max - min + 1) + min)).getAttribute(attribute.fulfill(3)));
        }
      }
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      dList list=dList.valueOf(subTypeContext);
      event.setReplaced(new Element(list.get(new Random().nextInt(list.size()))).getAttribute(attribute.fulfill(2)));
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(new Element(UUID.randomUUID().toString()).getAttribute(attribute.fulfill(2)));
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(new Element(ScriptQueue._getNextId()).getAttribute(attribute.fulfill(2)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"") || type.equalsIgnoreCase(""String_Node_Str"") || type.equalsIgnoreCase(""String_Node_Str"")) {
    String text=event.getTypeContext();
    int from=1;
    int to=text.length() + 1;
    int tags=2;
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      from=text.toUpperCase().indexOf(subTypeContext) + subTypeContext.length() + 1;
    }
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      to=text.toUpperCase().indexOf(subTypeContext) + 1;
    }
    try {
      if (subType.equalsIgnoreCase(""String_Node_Str""))       from=Integer.valueOf(subTypeContext);
    }
 catch (    NumberFormatException e) {
    }
    try {
      if (specifier.equalsIgnoreCase(""String_Node_Str"")) {
        to=Integer.valueOf(specifierContext);
        tags=3;
      }
    }
 catch (    NumberFormatException e) {
    }
    if (to > text.length())     to=text.length() + 1;
    event.setReplaced(new Element(text.substring(from - 1,to - 1)).getAttribute(attribute.fulfill(tags)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    String item_to_replace=event.getTypeContext();
    String replace=event.getSubTypeContext();
    String replacement=event.getSpecifierContext();
    event.setReplaced(new Element(item_to_replace.replace(replace,replacement)).getAttribute(attribute.fulfill(3)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    dEntity ent=dEntity.valueOf(event.getTypeContext());
    event.setReplaced(new Element((ent != null && ent.isUnique() && ent.isSpawned()) ? ""String_Node_Str"" : ""String_Node_Str"").getAttribute(attribute.fulfill(1)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    String item_to_uppercase=event.getTypeContext();
    event.setReplaced(new Element(item_to_uppercase.toUpperCase()).getAttribute(attribute.fulfill(1)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    String item_to_uppercase=event.getTypeContext();
    event.setReplaced(new Element(item_to_uppercase.toLowerCase()).getAttribute(attribute.fulfill(1)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    Calendar calendar=Calendar.getInstance();
    Date currentDate=new Date();
    SimpleDateFormat format=new SimpleDateFormat();
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      if (specifier.equalsIgnoreCase(""String_Node_Str"")) {
        format.applyPattern(""String_Node_Str"");
        event.setReplaced(new Element(format.format(currentDate)).getAttribute(attribute.fulfill(3)));
      }
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.YEAR)).getAttribute(attribute.fulfill(3)));
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.MONTH) + 1).getAttribute(attribute.fulfill(3)));
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.DAY_OF_MONTH)).getAttribute(attribute.fulfill(3)));
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.HOUR_OF_DAY)).getAttribute(attribute.fulfill(3)));
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.MINUTE)).getAttribute(attribute.fulfill(3)));
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.SECOND)).getAttribute(attribute.fulfill(3)));
 else {
        format.applyPattern(""String_Node_Str"");
        event.setReplaced(format.format(currentDate));
      }
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str"") && !subTypeContext.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        format.applyPattern(event.getSubTypeContext());
        event.setReplaced(format.format(currentDate));
      }
 catch (      Exception ex) {
        dB.echoError(""String_Node_Str"" + event.getSubTypeContext() + ""String_Node_Str"");
        dB.echoError(ex);
      }
    }
 else {
      format.applyPattern(""String_Node_Str"");
      event.setReplaced(format.format(currentDate));
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(new Element(typeContext).getAttribute(attribute.fulfill(1)));
  }
}","@EventHandler public void utilTag(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  String type=event.getType() != null ? event.getType() : ""String_Node_Str"";
  String typeContext=event.getTypeContext() != null ? event.getTypeContext() : ""String_Node_Str"";
  String subType=event.getSubType() != null ? event.getSubType() : ""String_Node_Str"";
  String subTypeContext=event.getSubTypeContext() != null ? event.getSubTypeContext().toUpperCase() : ""String_Node_Str"";
  String specifier=event.getSpecifier() != null ? event.getSpecifier() : ""String_Node_Str"";
  String specifierContext=event.getSpecifierContext() != null ? event.getSpecifierContext().toUpperCase() : ""String_Node_Str"";
  Attribute attribute=new Attribute(event.raw_tag,event.getScriptEntry()).fulfill(1);
  if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      if (specifier.equalsIgnoreCase(""String_Node_Str"")) {
        if (aH.matchesInteger(subTypeContext) && aH.matchesInteger(specifierContext)) {
          int min=aH.getIntegerFrom(subTypeContext);
          int max=aH.getIntegerFrom(specifierContext);
          if (min > max) {
            int store=min;
            min=max;
            max=store;
          }
          event.setReplaced(new Element(String.valueOf(Utilities.getRandom().nextInt(max - min + 1) + min)).getAttribute(attribute.fulfill(3)));
        }
      }
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      dList list=dList.valueOf(subTypeContext);
      event.setReplaced(new Element(list.get(new Random().nextInt(list.size()))).getAttribute(attribute.fulfill(2)));
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(new Element(UUID.randomUUID().toString()).getAttribute(attribute.fulfill(2)));
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(new Element(ScriptQueue._getNextId()).getAttribute(attribute.fulfill(2)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"") || type.equalsIgnoreCase(""String_Node_Str"") || type.equalsIgnoreCase(""String_Node_Str"")) {
    String text=event.getTypeContext();
    int from=1;
    int to=text.length() + 1;
    int tags=2;
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      from=text.toUpperCase().indexOf(subTypeContext) + subTypeContext.length() + 1;
    }
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      to=text.toUpperCase().indexOf(subTypeContext) + 1;
    }
    try {
      if (subType.equalsIgnoreCase(""String_Node_Str""))       from=Integer.valueOf(subTypeContext);
    }
 catch (    NumberFormatException e) {
    }
    try {
      if (specifier.equalsIgnoreCase(""String_Node_Str"")) {
        to=Integer.valueOf(specifierContext);
        tags=3;
      }
    }
 catch (    NumberFormatException e) {
    }
    if (to > text.length())     to=text.length() + 1;
    event.setReplaced(new Element(text.substring(from - 1,to - 1)).getAttribute(attribute.fulfill(tags)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    String item_to_replace=event.getTypeContext();
    String replace=event.getSubTypeContext();
    String replacement=event.getSpecifierContext();
    event.setReplaced(new Element(item_to_replace.replace(replace,replacement)).getAttribute(attribute.fulfill(3)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"") && event.hasTypeContext()) {
    dEntity ent=dEntity.valueOf(event.getTypeContext());
    event.setReplaced(new Element((ent != null && ent.isUnique() && ent.isSpawned()) ? ""String_Node_Str"" : ""String_Node_Str"").getAttribute(attribute.fulfill(1)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"") && event.hasTypeContext()) {
    dNPC npc=dNPC.valueOf(event.getTypeContext());
    event.setReplaced(new Element((npc != null && npc.isValid())).getAttribute(attribute.fulfill(1)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    String item_to_uppercase=event.getTypeContext();
    event.setReplaced(new Element(item_to_uppercase.toUpperCase()).getAttribute(attribute.fulfill(1)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    String item_to_uppercase=event.getTypeContext();
    event.setReplaced(new Element(item_to_uppercase.toLowerCase()).getAttribute(attribute.fulfill(1)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    Calendar calendar=Calendar.getInstance();
    Date currentDate=new Date();
    SimpleDateFormat format=new SimpleDateFormat();
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      if (specifier.equalsIgnoreCase(""String_Node_Str"")) {
        format.applyPattern(""String_Node_Str"");
        event.setReplaced(new Element(format.format(currentDate)).getAttribute(attribute.fulfill(3)));
      }
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.YEAR)).getAttribute(attribute.fulfill(3)));
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.MONTH) + 1).getAttribute(attribute.fulfill(3)));
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.DAY_OF_MONTH)).getAttribute(attribute.fulfill(3)));
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.HOUR_OF_DAY)).getAttribute(attribute.fulfill(3)));
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.MINUTE)).getAttribute(attribute.fulfill(3)));
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.SECOND)).getAttribute(attribute.fulfill(3)));
 else {
        format.applyPattern(""String_Node_Str"");
        event.setReplaced(format.format(currentDate));
      }
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str"") && !subTypeContext.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        format.applyPattern(event.getSubTypeContext());
        event.setReplaced(format.format(currentDate));
      }
 catch (      Exception ex) {
        dB.echoError(""String_Node_Str"" + event.getSubTypeContext() + ""String_Node_Str"");
        dB.echoError(ex);
      }
    }
 else {
      format.applyPattern(""String_Node_Str"");
      event.setReplaced(format.format(currentDate));
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(new Element(typeContext).getAttribute(attribute.fulfill(1)));
  }
}",0.972587889112591
10310,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (entity == null) {
    dB.echoError(""String_Node_Str"");
    return Element.NULL.getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE.toString()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getObjectType()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (CustomNBT.hasCustomNBT(getLivingEntity(),""String_Node_Str""))     return new dScript(CustomNBT.getCustomNBT(getLivingEntity(),""String_Node_Str"")).getAttribute(attribute.fulfill(1));
 else     return new Element(entity.getType().name()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getCustomName() == null)     return ""String_Node_Str"";
    return new Element(getLivingEntity().getCustomName()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().isCustomNameVisible()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getEntityId()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isNPC())     return new Element(getNPC().getName()).getAttribute(attribute.fulfill(1));
    if (entity instanceof Player)     return new Element(((Player)entity).getName()).getAttribute(attribute.fulfill(1));
    return new Element(entity.getType().getName()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (entity.getMetadata(""String_Node_Str"").size() == 0)     return ""String_Node_Str"";
    return new Element(entity.getMetadata(""String_Node_Str"").get(0).asString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getUUID().toString()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getBoots() != null) {
      return new dItem(getLivingEntity().getEquipment().getBoots()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getChestplate() != null) {
      return new dItem(getLivingEntity().getEquipment().getChestplate()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getHelmet() != null) {
      return new dItem(getLivingEntity().getEquipment().getHelmet()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getLeggings() != null) {
      return new dItem(getLivingEntity().getEquipment().getLeggings()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"")) {
    return getEquipment().getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new dItem(getLivingEntity().getEquipment().getItemInHand()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && dEntity.matches(attribute.getContext(1))) {
      dEntity toEntity=dEntity.valueOf(attribute.getContext(1));
      return new Element(getLivingEntity().hasLineOfSight(toEntity.getBukkitEntity())).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getEyeLocation()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity())     return new Element(getLivingEntity().getEyeHeight()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    int range=attribute.getIntContext(2);
    if (range < 1)     range=50;
    return new dLocation(getLivingEntity().getTargetBlock(null,range).getLocation().clone()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(entity.getLocation().clone().add(0,-1,0)).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dLocation(entity.getLocation()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dLocation(entity.getVelocity().toLocation(entity.getWorld())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dWorld(entity.getWorld()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getCanPickupItems()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getFallDistance()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(entity.getFireTicks() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity() && getLivingEntity().isLeashed()) {
      return new dEntity(getLivingEntity().getLeashHolder()).getAttribute(attribute.fulfill(1));
    }
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!entity.isEmpty())     return new dEntity(entity.getPassenger()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (isProjectile() && hasShooter())     return getShooter().getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (entity.isInsideVehicle())     return new dEntity(entity.getVehicle()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    Boolean returnElement=false;
    if (attribute.hasContext(1))     for (    org.bukkit.potion.PotionEffect effect : getLivingEntity().getActivePotionEffects())     if (effect.getType().equals(PotionEffectType.getByName(attribute.getContext(1))))     returnElement=true;
 else     if (!getLivingEntity().getActivePotionEffects().isEmpty())     returnElement=true;
    return new Element(returnElement).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHealth=getLivingEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHealth=attribute.getIntContext(2);
    if ((float)getLivingEntity().getHealth() / maxHealth < .10)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < .40)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < .75)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < 1)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getMaxHealth()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHealth=getLivingEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHealth=attribute.getIntContext(2);
    return new Element((getLivingEntity().getHealth() / maxHealth) * 100).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getHealth()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.isEmpty()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.isInsideVehicle()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity())     return new Element(getLivingEntity().isLeashed()).getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.isOnGround()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity())     return new Element(!getLivingEntity().getRemoveWhenFarAway()).getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isSpawned()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dPlayer(getLivingEntity().getKiller()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getLastDamage()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getLastDamageCause().getCause().name()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getLivingEntity().getNoDamageTicks()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getLivingEntity().getMaximumAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getLivingEntity().getRemainingAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getRemoveWhenFarAway()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(entity.getTicksLived() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(entity_type.name()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isLivingEntity()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isPlayer() && !isNPC())     return Element.TRUE.getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isNPC()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isPlayer()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isProjectile()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityTame.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityAge.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityFramed.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityColor.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityPowered.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(""String_Node_Str"" + getEntityType().name().toLowerCase() + PropertyParser.getPropertiesString(this)).getAttribute(attribute.fulfill(1));
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new Element(identify()).getAttribute(attribute);
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (entity == null) {
    dB.echoError(""String_Node_Str"");
    return Element.NULL.getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE.toString()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getObjectType()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (CustomNBT.hasCustomNBT(getLivingEntity(),""String_Node_Str""))     return new dScript(CustomNBT.getCustomNBT(getLivingEntity(),""String_Node_Str"")).getAttribute(attribute.fulfill(1));
 else     return new Element(entity.getType().name()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isLivingEntity() || getLivingEntity().getCustomName() == null)     return Element.NULL.getAttribute(attribute.fulfill(1));
    return new Element(getLivingEntity().getCustomName()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isLivingEntity())     return Element.NULL.getAttribute(attribute.fulfill(2));
    return new Element(getLivingEntity().isCustomNameVisible()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getEntityId()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isNPC())     return new Element(getNPC().getName()).getAttribute(attribute.fulfill(1));
    if (entity instanceof Player)     return new Element(((Player)entity).getName()).getAttribute(attribute.fulfill(1));
    return new Element(entity.getType().getName()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (entity.getMetadata(""String_Node_Str"").size() == 0)     return ""String_Node_Str"";
    return new Element(entity.getMetadata(""String_Node_Str"").get(0).asString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getUUID().toString()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getBoots() != null) {
      return new dItem(getLivingEntity().getEquipment().getBoots()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getChestplate() != null) {
      return new dItem(getLivingEntity().getEquipment().getChestplate()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getHelmet() != null) {
      return new dItem(getLivingEntity().getEquipment().getHelmet()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getLeggings() != null) {
      return new dItem(getLivingEntity().getEquipment().getLeggings()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"")) {
    return getEquipment().getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new dItem(getLivingEntity().getEquipment().getItemInHand()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && dEntity.matches(attribute.getContext(1))) {
      dEntity toEntity=dEntity.valueOf(attribute.getContext(1));
      return new Element(getLivingEntity().hasLineOfSight(toEntity.getBukkitEntity())).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getEyeLocation()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity())     return new Element(getLivingEntity().getEyeHeight()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    int range=attribute.getIntContext(2);
    if (range < 1)     range=50;
    return new dLocation(getLivingEntity().getTargetBlock(null,range).getLocation().clone()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(entity.getLocation().clone().add(0,-1,0)).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dLocation(entity.getLocation()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dLocation(entity.getVelocity().toLocation(entity.getWorld())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dWorld(entity.getWorld()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getCanPickupItems()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getFallDistance()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(entity.getFireTicks() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity() && getLivingEntity().isLeashed()) {
      return new dEntity(getLivingEntity().getLeashHolder()).getAttribute(attribute.fulfill(1));
    }
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!entity.isEmpty())     return new dEntity(entity.getPassenger()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (isProjectile() && hasShooter())     return getShooter().getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (entity.isInsideVehicle())     return new dEntity(entity.getVehicle()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    Boolean returnElement=false;
    if (attribute.hasContext(1))     for (    org.bukkit.potion.PotionEffect effect : getLivingEntity().getActivePotionEffects())     if (effect.getType().equals(PotionEffectType.getByName(attribute.getContext(1))))     returnElement=true;
 else     if (!getLivingEntity().getActivePotionEffects().isEmpty())     returnElement=true;
    return new Element(returnElement).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHealth=getLivingEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHealth=attribute.getIntContext(2);
    if ((float)getLivingEntity().getHealth() / maxHealth < .10)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < .40)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < .75)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < 1)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getMaxHealth()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHealth=getLivingEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHealth=attribute.getIntContext(2);
    return new Element((getLivingEntity().getHealth() / maxHealth) * 100).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getHealth()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.isEmpty()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.isInsideVehicle()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity())     return new Element(getLivingEntity().isLeashed()).getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.isOnGround()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity())     return new Element(!getLivingEntity().getRemoveWhenFarAway()).getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isSpawned()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dPlayer(getLivingEntity().getKiller()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getLastDamage()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getLastDamageCause().getCause().name()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getLivingEntity().getNoDamageTicks()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getLivingEntity().getMaximumAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getLivingEntity().getRemainingAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getRemoveWhenFarAway()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(entity.getTicksLived() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(entity_type.name()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isLivingEntity()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isPlayer() && !isNPC())     return Element.TRUE.getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isNPC()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isPlayer()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isProjectile()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityTame.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityAge.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityFramed.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityColor.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(EntityPowered.describes(this)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(""String_Node_Str"" + getEntityType().name().toLowerCase() + PropertyParser.getPropertiesString(this)).getAttribute(attribute.fulfill(1));
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new Element(identify()).getAttribute(attribute);
}",0.9931146526380936
10311,"@EventHandler public void savedEntryTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str"") || event.getScriptEntry() == null)   return;
  if (event.getScriptEntry().getResidingQueue() != null && event.getScriptEntry().getResidingQueue().getHeldScriptEntry(event.getNameContext()) != null) {
    String id=event.getNameContext();
    Attribute attribute=new Attribute(event.raw_tag,event.getScriptEntry());
    ScriptEntry held=event.getScriptEntry().getResidingQueue().getHeldScriptEntry(id);
    if (held == null) {
      dB.echoError(""String_Node_Str"" + id);
    }
 else {
      if (!held.hasObject(attribute.getAttribute(2)) || held.getdObject(attribute.getAttribute(2)) == null) {
        dB.echoError(""String_Node_Str"" + attribute.getAttribute(2));
      }
 else {
        event.setReplaced(held.getdObject(attribute.getAttribute(2)).getAttribute(attribute.fulfill(2)));
      }
    }
  }
 else   event.setReplaced(""String_Node_Str"");
}","@EventHandler public void savedEntryTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str"") || event.getScriptEntry() == null || !event.hasNameContext())   return;
  if (event.getScriptEntry().getResidingQueue() != null) {
    String id=event.getNameContext();
    Attribute attribute=new Attribute(event.raw_tag,event.getScriptEntry());
    ScriptEntry held=event.getScriptEntry().getResidingQueue().getHeldScriptEntry(id);
    if (held == null) {
      dB.echoError(""String_Node_Str"" + id);
    }
 else {
      if (!held.hasObject(attribute.getAttribute(2)) || held.getdObject(attribute.getAttribute(2)) == null) {
        dB.echoError(""String_Node_Str"" + attribute.getAttribute(2));
      }
 else {
        event.setReplaced(held.getdObject(attribute.getAttribute(2)).getAttribute(attribute.fulfill(2)));
      }
    }
  }
 else   event.setReplaced(""String_Node_Str"");
}",0.9334775554353704
10312,"public PropertyParser(){
  properties.clear();
  describes.clear();
  getFrom.clear();
  registerProperty(EntityAge.class,dEntity.class);
  registerProperty(EntityColor.class,dEntity.class);
  registerProperty(EntityFramed.class,dEntity.class);
  registerProperty(EntityInfected.class,dEntity.class);
  registerProperty(EntityProfession.class,dEntity.class);
  registerProperty(InventoryContents.class,dInventory.class);
  registerProperty(InventoryHolder.class,dInventory.class);
  registerProperty(InventorySize.class,dInventory.class);
  registerProperty(InventoryTitle.class,dInventory.class);
  registerProperty(ItemBook.class,dItem.class);
  registerProperty(ItemDisplayname.class,dItem.class);
  registerProperty(ItemDurability.class,dItem.class);
  registerProperty(ItemEnchantments.class,dItem.class);
  registerProperty(ItemLore.class,dItem.class);
  registerProperty(ItemPlantgrowth.class,dItem.class);
  registerProperty(ItemQuantity.class,dItem.class);
  registerProperty(ItemSkullskin.class,dItem.class);
}","public PropertyParser(){
  properties.clear();
  describes.clear();
  getFrom.clear();
  registerProperty(EntityAge.class,dEntity.class);
  registerProperty(EntityColor.class,dEntity.class);
  registerProperty(EntityFramed.class,dEntity.class);
  registerProperty(EntityInfected.class,dEntity.class);
  registerProperty(EntityPowered.class,dEntity.class);
  registerProperty(EntityProfession.class,dEntity.class);
  registerProperty(InventoryContents.class,dInventory.class);
  registerProperty(InventoryHolder.class,dInventory.class);
  registerProperty(InventorySize.class,dInventory.class);
  registerProperty(InventoryTitle.class,dInventory.class);
  registerProperty(ItemBook.class,dItem.class);
  registerProperty(ItemDisplayname.class,dItem.class);
  registerProperty(ItemDurability.class,dItem.class);
  registerProperty(ItemEnchantments.class,dItem.class);
  registerProperty(ItemLore.class,dItem.class);
  registerProperty(ItemPlantgrowth.class,dItem.class);
  registerProperty(ItemQuantity.class,dItem.class);
  registerProperty(ItemSkullskin.class,dItem.class);
}",0.973747016706444
10313,"private String getPowered(){
  if (powered == null)   return null;
  return String.valueOf(((Creeper)(powered.getBukkitEntity())).isPowered());
}","private Boolean getPowered(){
  if (powered == null)   return null;
  return ((Creeper)(powered.getBukkitEntity())).isPowered();
}",0.901818181818182
10314,"@Override public void adjust(Mechanism mechanism){
  if (mechanism.matches(""String_Node_Str"")) {
    ((Creeper)(powered.getBukkitEntity())).setPowered(mechanism.getValue().asBoolean());
  }
}","@Override public void adjust(Mechanism mechanism){
  if (mechanism.matches(""String_Node_Str"")) {
    setPowered(mechanism.getValue().asBoolean());
  }
}",0.8862973760932945
10315,"@Override public String getPropertyString(){
  return getPowered();
}","@Override public String getPropertyString(){
  if (!getPowered())   return null;
 else   return ""String_Node_Str"";
}",0.6810810810810811
10316,"private Boolean getPowered(){
  if (powered == null)   return null;
  return ((Creeper)(powered.getBukkitEntity())).isPowered();
}","private boolean getPowered(){
  return ((Creeper)(powered.getBukkitEntity())).isPowered();
}",0.8198198198198198
10317,"@Override public void adjust(Mechanism mechanism){
  if (mechanism.matches(""String_Node_Str"")) {
    setPowered(mechanism.getValue().asBoolean());
  }
}","@Override public void adjust(Mechanism mechanism){
  if (mechanism.matches(""String_Node_Str"") && mechanism.requireBoolean()) {
    setPowered(mechanism.getValue().asBoolean());
  }
}",0.9101796407185628
10318,"@EventHandler public void miscTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  String type=event.getType() != null ? event.getType() : ""String_Node_Str"";
  String typeContext=event.getTypeContext() != null ? event.getTypeContext() : ""String_Node_Str"";
  String subType=event.getSubType() != null ? event.getSubType() : ""String_Node_Str"";
  String subTypeContext=event.getSubTypeContext() != null ? event.getSubTypeContext().toUpperCase() : ""String_Node_Str"";
  String specifier=event.getSpecifier() != null ? event.getSpecifier() : ""String_Node_Str"";
  String specifierContext=event.getSpecifierContext() != null ? event.getSpecifierContext().toUpperCase() : ""String_Node_Str"";
  Attribute attribute=new Attribute(event.raw_tag,event.getScriptEntry()).fulfill(1);
  if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      if (specifier.equalsIgnoreCase(""String_Node_Str"")) {
        if (aH.matchesInteger(subTypeContext) && aH.matchesInteger(specifierContext)) {
          int min=aH.getIntegerFrom(subTypeContext);
          int max=aH.getIntegerFrom(specifierContext);
          if (min > max) {
            int store=min;
            min=max;
            max=store;
          }
          event.setReplaced(new Element(String.valueOf(Utilities.getRandom().nextInt(max - min + 1) + min)).getAttribute(attribute.fulfill(3)));
        }
      }
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      dList list=dList.valueOf(subTypeContext);
      event.setReplaced(new Element(list.get(new Random().nextInt(list.size()))).getAttribute(attribute.fulfill(2)));
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(new Element(UUID.randomUUID().toString()).getAttribute(attribute.fulfill(2)));
    if (attribute.startsWith(""String_Node_Str""))     event.setReplaced(new Element(ScriptQueue._getNextId()).getAttribute(attribute.fulfill(2)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"") || type.equalsIgnoreCase(""String_Node_Str"") || type.equalsIgnoreCase(""String_Node_Str"")) {
    String text=event.getTypeContext();
    int from=1;
    int to=text.length() + 1;
    int tags=2;
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      from=text.toUpperCase().indexOf(subTypeContext) + subTypeContext.length() + 1;
    }
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      to=text.toUpperCase().indexOf(subTypeContext) + 1;
    }
    try {
      if (subType.equalsIgnoreCase(""String_Node_Str""))       from=Integer.valueOf(subTypeContext);
    }
 catch (    NumberFormatException e) {
    }
    try {
      if (specifier.equalsIgnoreCase(""String_Node_Str"")) {
        to=Integer.valueOf(specifierContext);
        tags=3;
      }
    }
 catch (    NumberFormatException e) {
    }
    if (to > text.length())     to=text.length() + 1;
    event.setReplaced(new Element(text.substring(from - 1,to - 1)).getAttribute(attribute.fulfill(tags)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    String item_to_replace=event.getTypeContext();
    String replace=event.getSubTypeContext();
    String replacement=event.getSpecifierContext();
    event.setReplaced(new Element(item_to_replace.replace(replace,replacement)).getAttribute(attribute.fulfill(3)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    dEntity ent=dEntity.valueOf(event.getTypeContext());
    event.setReplaced(new Element((ent != null && ent.isUnique() && ent.isSpawned()) ? ""String_Node_Str"" : ""String_Node_Str"").getAttribute(attribute.fulfill(1)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    String item_to_uppercase=event.getTypeContext();
    event.setReplaced(new Element(item_to_uppercase.toUpperCase()).getAttribute(attribute.fulfill(1)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    String item_to_uppercase=event.getTypeContext();
    event.setReplaced(new Element(item_to_uppercase.toLowerCase()).getAttribute(attribute.fulfill(1)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    Calendar calendar=Calendar.getInstance();
    Date currentDate=new Date();
    SimpleDateFormat format=new SimpleDateFormat();
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      if (specifier.equalsIgnoreCase(""String_Node_Str"")) {
        format.applyPattern(""String_Node_Str"");
        event.setReplaced(new Element(format.format(currentDate)).getAttribute(attribute.fulfill(3)));
      }
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.YEAR)).getAttribute(attribute.fulfill(3)));
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.MONTH) + 1).getAttribute(attribute.fulfill(3)));
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.DAY_OF_MONTH)).getAttribute(attribute.fulfill(3)));
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.HOUR_OF_DAY)).getAttribute(attribute.fulfill(3)));
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.MINUTE)).getAttribute(attribute.fulfill(3)));
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.SECOND)).getAttribute(attribute.fulfill(3)));
 else {
        format.applyPattern(""String_Node_Str"");
        event.setReplaced(format.format(currentDate));
      }
    }
 else {
      format.applyPattern(""String_Node_Str"");
      event.setReplaced(format.format(currentDate));
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(new Element(typeContext).getAttribute(attribute.fulfill(1)));
  }
}","@EventHandler public void miscTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  String type=event.getType() != null ? event.getType() : ""String_Node_Str"";
  String typeContext=event.getTypeContext() != null ? event.getTypeContext() : ""String_Node_Str"";
  String subType=event.getSubType() != null ? event.getSubType() : ""String_Node_Str"";
  String subTypeContext=event.getSubTypeContext() != null ? event.getSubTypeContext().toUpperCase() : ""String_Node_Str"";
  String specifier=event.getSpecifier() != null ? event.getSpecifier() : ""String_Node_Str"";
  String specifierContext=event.getSpecifierContext() != null ? event.getSpecifierContext().toUpperCase() : ""String_Node_Str"";
  Attribute attribute=new Attribute(event.raw_tag,event.getScriptEntry()).fulfill(1);
  if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      if (specifier.equalsIgnoreCase(""String_Node_Str"")) {
        if (aH.matchesInteger(subTypeContext) && aH.matchesInteger(specifierContext)) {
          int min=aH.getIntegerFrom(subTypeContext);
          int max=aH.getIntegerFrom(specifierContext);
          if (min > max) {
            int store=min;
            min=max;
            max=store;
          }
          event.setReplaced(new Element(String.valueOf(Utilities.getRandom().nextInt(max - min + 1) + min)).getAttribute(attribute.fulfill(3)));
        }
      }
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      dList list=dList.valueOf(subTypeContext);
      event.setReplaced(new Element(list.get(new Random().nextInt(list.size()))).getAttribute(attribute.fulfill(2)));
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(new Element(UUID.randomUUID().toString()).getAttribute(attribute.fulfill(2)));
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(new Element(ScriptQueue._getNextId()).getAttribute(attribute.fulfill(2)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"") || type.equalsIgnoreCase(""String_Node_Str"") || type.equalsIgnoreCase(""String_Node_Str"")) {
    String text=event.getTypeContext();
    int from=1;
    int to=text.length() + 1;
    int tags=2;
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      from=text.toUpperCase().indexOf(subTypeContext) + subTypeContext.length() + 1;
    }
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      to=text.toUpperCase().indexOf(subTypeContext) + 1;
    }
    try {
      if (subType.equalsIgnoreCase(""String_Node_Str""))       from=Integer.valueOf(subTypeContext);
    }
 catch (    NumberFormatException e) {
    }
    try {
      if (specifier.equalsIgnoreCase(""String_Node_Str"")) {
        to=Integer.valueOf(specifierContext);
        tags=3;
      }
    }
 catch (    NumberFormatException e) {
    }
    if (to > text.length())     to=text.length() + 1;
    event.setReplaced(new Element(text.substring(from - 1,to - 1)).getAttribute(attribute.fulfill(tags)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    String item_to_replace=event.getTypeContext();
    String replace=event.getSubTypeContext();
    String replacement=event.getSpecifierContext();
    event.setReplaced(new Element(item_to_replace.replace(replace,replacement)).getAttribute(attribute.fulfill(3)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    dEntity ent=dEntity.valueOf(event.getTypeContext());
    event.setReplaced(new Element((ent != null && ent.isUnique() && ent.isSpawned()) ? ""String_Node_Str"" : ""String_Node_Str"").getAttribute(attribute.fulfill(1)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    String item_to_uppercase=event.getTypeContext();
    event.setReplaced(new Element(item_to_uppercase.toUpperCase()).getAttribute(attribute.fulfill(1)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    String item_to_uppercase=event.getTypeContext();
    event.setReplaced(new Element(item_to_uppercase.toLowerCase()).getAttribute(attribute.fulfill(1)));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    Calendar calendar=Calendar.getInstance();
    Date currentDate=new Date();
    SimpleDateFormat format=new SimpleDateFormat();
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      if (specifier.equalsIgnoreCase(""String_Node_Str"")) {
        format.applyPattern(""String_Node_Str"");
        event.setReplaced(new Element(format.format(currentDate)).getAttribute(attribute.fulfill(3)));
      }
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.YEAR)).getAttribute(attribute.fulfill(3)));
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.MONTH) + 1).getAttribute(attribute.fulfill(3)));
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.DAY_OF_MONTH)).getAttribute(attribute.fulfill(3)));
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.HOUR_OF_DAY)).getAttribute(attribute.fulfill(3)));
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.MINUTE)).getAttribute(attribute.fulfill(3)));
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(new Element(calendar.get(Calendar.SECOND)).getAttribute(attribute.fulfill(3)));
 else {
        format.applyPattern(""String_Node_Str"");
        event.setReplaced(format.format(currentDate));
      }
    }
 else {
      format.applyPattern(""String_Node_Str"");
      event.setReplaced(format.format(currentDate));
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(new Element(typeContext).getAttribute(attribute.fulfill(1)));
  }
}",0.9945891105850524
10319,"@EventHandler public void queueTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  Attribute attribute=new Attribute(event.raw_tag,event.getScriptEntry()).fulfill(1);
  if (event.hasNameContext()) {
    if (ScriptQueue._queueExists(event.getNameContext()))     event.setReplaced(Element.NULL.getAttribute(attribute.fulfill(1)));
 else     event.setReplaced(ScriptQueue._getExistingQueue(event.getNameContext()).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1))   event.setReplaced(new Element(ScriptQueue._queueExists(attribute.getContext(1))).getAttribute(attribute.fulfill(1)));
  if (attribute.startsWith(""String_Node_Str""))   event.setReplaced(new Element(ScriptQueue._getStats()).getAttribute(attribute.fulfill(1)));
  event.setReplaced(event.getScriptEntry().getResidingQueue().getAttribute(attribute.fulfill(1)));
}","@EventHandler public void queueTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  Attribute attribute=new Attribute(event.raw_tag,event.getScriptEntry()).fulfill(1);
  if (event.hasNameContext()) {
    if (ScriptQueue._queueExists(event.getNameContext()))     event.setReplaced(Element.NULL.getAttribute(attribute.fulfill(1)));
 else     event.setReplaced(ScriptQueue._getExistingQueue(event.getNameContext()).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1))   event.setReplaced(new Element(ScriptQueue._queueExists(attribute.getContext(1))).getAttribute(attribute.fulfill(1)));
  if (attribute.startsWith(""String_Node_Str""))   event.setReplaced(new Element(ScriptQueue._getStats()).getAttribute(attribute.fulfill(1)));
  event.setReplaced(event.getScriptEntry().getResidingQueue().getAttribute(attribute));
}",0.9940700808625336
10320,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(container.getContainerType()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dPlayer player=(attribute.hasContext(1) ? dPlayer.valueOf(attribute.getContext(1)) : attribute.getScriptEntry().getPlayer());
    if (player != null && player.isValid())     return new Element(container.checkCooldown(player)).getAttribute(attribute.fulfill(1));
 else     return ""String_Node_Str"";
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dPlayer player=(attribute.hasContext(1) ? dPlayer.valueOf(attribute.getContext(1)) : attribute.getScriptEntry().getPlayer());
    if (attribute.hasContext(2))     return new Element(container.checkRequirements(player,attribute.getScriptEntry().getNPC(),attribute.getContext(2))).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dPlayer player=(attribute.hasContext(1) ? dPlayer.valueOf(attribute.getContext(1)) : attribute.getScriptEntry().getPlayer());
    return CooldownCommand.getCooldownDuration((player != null ? player.getName() : null),container.getName()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(name).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!attribute.hasContext(1))     return Element.NULL.getAttribute(attribute.fulfill(1));
    Object obj=getContainer().getConfigurationSection(""String_Node_Str"").get(attribute.getContext(1).toUpperCase());
    if (obj == null)     return Element.NULL.getAttribute(attribute.fulfill(1));
    if (obj instanceof List) {
      dList list=new dList(""String_Node_Str"");
      for (      Object each : (List<Object>)obj)       list.add(each.toString());
      return list.getAttribute(attribute.fulfill(1));
    }
 else     return new Element(obj.toString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(prefix).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getObjectType()).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new Element(identify()).getAttribute(attribute);
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(container.getContainerType()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dPlayer player=(attribute.hasContext(1) ? dPlayer.valueOf(attribute.getContext(1)) : attribute.getScriptEntry().getPlayer());
    if (player != null && player.isValid())     return new Element(container.checkCooldown(player)).getAttribute(attribute.fulfill(1));
 else     return ""String_Node_Str"";
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dPlayer player=(attribute.hasContext(1) ? dPlayer.valueOf(attribute.getContext(1)) : attribute.getScriptEntry().getPlayer());
    if (attribute.hasContext(2))     return new Element(container.checkRequirements(player,attribute.getScriptEntry().getNPC(),attribute.getContext(2))).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dPlayer player=(attribute.hasContext(1) ? dPlayer.valueOf(attribute.getContext(1)) : attribute.getScriptEntry().getPlayer());
    return CooldownCommand.getCooldownDuration((player != null ? player.getName() : null),container.getName()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(name).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!attribute.hasContext(1))     return Element.NULL.getAttribute(attribute.fulfill(1));
    Object obj=getContainer().getConfigurationSection(""String_Node_Str"").get(attribute.getContext(1).toUpperCase());
    if (obj == null)     return Element.NULL.getAttribute(attribute.fulfill(1));
    if (obj instanceof List) {
      dList list=new dList();
      for (      Object each : (List<Object>)obj)       list.add(each.toString());
      return list.getAttribute(attribute.fulfill(1));
    }
 else     return new Element(obj.toString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(prefix).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getObjectType()).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new Element(identify()).getAttribute(attribute);
}",0.896245607545774
10321,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(dLocation.class)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asType(dLocation.class));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str"")) {
      if (arg.matchesEnum(ParticleEffect.values())) {
        scriptEntry.addObject(""String_Node_Str"",ParticleEffect.valueOf(arg.getValue().toUpperCase()));
      }
 else       if (arg.matches(""String_Node_Str"")) {
        ParticleEffect effect=null;
        while (effect == null || effect.toString().matches(""String_Node_Str"")) {
          effect=ParticleEffect.values()[Utilities.getRandom().nextInt(ParticleEffect.values().length)];
        }
        scriptEntry.addObject(""String_Node_Str"",effect);
      }
 else       if (arg.startsWith(""String_Node_Str"")) {
        Element typeId=new Element(arg.getValue().substring(10));
        if (typeId.isInt())         scriptEntry.addObject(""String_Node_Str"",typeId);
      }
 else       if (arg.matchesEnum(Effect.values())) {
        scriptEntry.addObject(""String_Node_Str"",Effect.valueOf(arg.getValue().toUpperCase()));
      }
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Double) && arg.matchesPrefix(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Double) && arg.matchesPrefix(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Integer) && arg.matchesPrefix(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Double) && arg.matchesPrefix(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     arg.reportUnhandled();
  }
  scriptEntry.defaultObject(""String_Node_Str"",scriptEntry.hasNPC() ? scriptEntry.getNPC().getLocation() : null,scriptEntry.hasPlayer() ? scriptEntry.getPlayer().getLocation() : null);
  scriptEntry.defaultObject(""String_Node_Str"",new Element(0));
  scriptEntry.defaultObject(""String_Node_Str"",new Element(15));
  scriptEntry.defaultObject(""String_Node_Str"",new Element(1));
  scriptEntry.defaultObject(""String_Node_Str"",new Element(0.5));
  if (!scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(dLocation.class)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asType(dLocation.class));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str"")) {
      if (arg.matchesEnum(ParticleEffect.values())) {
        scriptEntry.addObject(""String_Node_Str"",ParticleEffect.valueOf(arg.getValue().toUpperCase()));
      }
 else       if (arg.matches(""String_Node_Str"")) {
        ParticleEffect effect=null;
        while (effect == null || effect.toString().matches(""String_Node_Str"")) {
          effect=ParticleEffect.values()[Utilities.getRandom().nextInt(ParticleEffect.values().length)];
        }
        scriptEntry.addObject(""String_Node_Str"",effect);
      }
 else       if (arg.startsWith(""String_Node_Str"")) {
        Element typeId=new Element(arg.getValue().substring(10));
        if (typeId.isInt() && typeId.asInt() > 0 && Material.getMaterial(typeId.asInt()) != null)         scriptEntry.addObject(""String_Node_Str"",typeId);
 else         dB.echoError(""String_Node_Str"");
      }
 else       if (arg.matchesEnum(Effect.values())) {
        scriptEntry.addObject(""String_Node_Str"",Effect.valueOf(arg.getValue().toUpperCase()));
      }
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Double) && arg.matchesPrefix(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Double) && arg.matchesPrefix(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Integer) && arg.matchesPrefix(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Double) && arg.matchesPrefix(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     arg.reportUnhandled();
  }
  scriptEntry.defaultObject(""String_Node_Str"",scriptEntry.hasNPC() ? scriptEntry.getNPC().getLocation() : null,scriptEntry.hasPlayer() ? scriptEntry.getPlayer().getLocation() : null);
  scriptEntry.defaultObject(""String_Node_Str"",new Element(0));
  scriptEntry.defaultObject(""String_Node_Str"",new Element(15));
  scriptEntry.defaultObject(""String_Node_Str"",new Element(1));
  scriptEntry.defaultObject(""String_Node_Str"",new Element(0.5));
  if (!scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
}",0.9810587663914522
10322,"@EventHandler public void yaml(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  if (!event.hasNameContext() || !event.hasTypeContext()) {
    dB.echoError(""String_Node_Str"" + event.raw_tag + ""String_Node_Str"");
    return;
  }
  String id=event.getNameContext();
  String path=event.getTypeContext();
  if (!yamls.containsKey(id.toUpperCase())) {
    dB.echoError(""String_Node_Str"" + event.raw_tag + ""String_Node_Str""+ ""String_Node_Str"");
    return;
  }
  Attribute attribute=new Attribute(event.raw_tag,event.getScriptEntry());
  attribute.fulfill(1);
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new Element(getYaml(id).contains(path)).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"")) {
      List<String> list=getYaml(id).getStringList(path);
      if (list == null) {
        dB.echoDebug(event.getScriptEntry(),""String_Node_Str"" + event.raw_tag + ""String_Node_Str"");
        event.setReplaced(new Element(""String_Node_Str"").getAttribute(attribute));
        return;
      }
      event.setReplaced(new dList(list).getAttribute(attribute.fulfill(1)));
      return;
    }
    String value=getYaml(id).getString(path);
    if (value == null) {
      dB.echoDebug(event.getScriptEntry(),""String_Node_Str"" + event.raw_tag + ""String_Node_Str"");
      event.setReplaced(new Element(""String_Node_Str"").getAttribute(attribute));
      return;
    }
 else {
      event.setReplaced(new Element(value).getAttribute(attribute.fulfill(1)));
      return;
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ConfigurationSection section=getYaml(id).getConfigurationSection(path);
    if (section == null) {
      dB.echoDebug(event.getScriptEntry(),""String_Node_Str"" + event.raw_tag + ""String_Node_Str"");
      event.setReplaced(new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1)));
      return;
    }
    Set<String> keys=section.getKeys(false);
    if (keys == null) {
      dB.echoDebug(event.getScriptEntry(),""String_Node_Str"" + event.raw_tag + ""String_Node_Str"");
      event.setReplaced(new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1)));
      return;
    }
 else {
      ArrayList<String> list=new ArrayList<String>();
      list.addAll(keys);
      event.setReplaced(new dList(list).getAttribute(attribute.fulfill(1)));
      return;
    }
  }
}","@EventHandler public void yaml(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  if (!event.hasNameContext() || !event.hasTypeContext()) {
    dB.echoError(""String_Node_Str"" + event.raw_tag + ""String_Node_Str"");
    return;
  }
  String id=event.getNameContext();
  String path=event.getTypeContext();
  if (!yamls.containsKey(id.toUpperCase())) {
    dB.echoError(""String_Node_Str"" + event.raw_tag + ""String_Node_Str""+ ""String_Node_Str"");
    return;
  }
  Attribute attribute=new Attribute(event.raw_tag,event.getScriptEntry());
  attribute.fulfill(1);
  if (attribute.startsWith(""String_Node_Str"")) {
    event.setReplaced(new Element(getYaml(id).contains(path)).getAttribute(attribute.fulfill(1)));
    return;
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"")) {
      List<String> list=getYaml(id).getStringList(path);
      if (list == null) {
        dB.echoDebug(event.getScriptEntry(),""String_Node_Str"" + event.raw_tag + ""String_Node_Str"");
        event.setReplaced(new Element(""String_Node_Str"").getAttribute(attribute));
        return;
      }
      event.setReplaced(new dList(list).getAttribute(attribute.fulfill(1)));
      return;
    }
    String value=getYaml(id).getString(path);
    if (value == null) {
      dB.echoDebug(event.getScriptEntry(),""String_Node_Str"" + event.raw_tag + ""String_Node_Str"");
      event.setReplaced(new Element(""String_Node_Str"").getAttribute(attribute));
      return;
    }
 else {
      event.setReplaced(new Element(value).getAttribute(attribute));
      return;
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ConfigurationSection section=getYaml(id).getConfigurationSection(path);
    if (section == null) {
      dB.echoDebug(event.getScriptEntry(),""String_Node_Str"" + event.raw_tag + ""String_Node_Str"");
      event.setReplaced(new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1)));
      return;
    }
    Set<String> keys=section.getKeys(false);
    if (keys == null) {
      dB.echoDebug(event.getScriptEntry(),""String_Node_Str"" + event.raw_tag + ""String_Node_Str"");
      event.setReplaced(new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1)));
      return;
    }
 else {
      ArrayList<String> list=new ArrayList<String>();
      list.addAll(keys);
      event.setReplaced(new dList(list).getAttribute(attribute.fulfill(1)));
      return;
    }
  }
}",0.9977728285077953
10323,"public void start(){
  if (is_started)   return;
  is_started=true;
  boolean is_delayed=delay_time > System.currentTimeMillis();
  if (is_delayed) {
    Bukkit.getScheduler().scheduleSyncDelayedTask(DenizenAPI.getCurrentInstance(),new Runnable(){
      @Override public void run(){
        onStart();
      }
    }
,(delay_time - System.currentTimeMillis()) / 1000 * 20);
  }
 else   onStart();
  Class<? extends ScriptQueue> clazz=getClass();
  String name=classNameCache.get(clazz);
  if (name == null)   classNameCache.put(clazz,name=clazz.getSimpleName());
  if (is_delayed) {
    dB.echoDebug(this,""String_Node_Str"" + name + ""String_Node_Str""+ id+ ""String_Node_Str""+ ""String_Node_Str""+ new Duration((delay_time - System.currentTimeMillis()) / 1000 * 20).identify()+ ""String_Node_Str"");
  }
 else   dB.echoDebug(this,""String_Node_Str"" + name + ""String_Node_Str""+ id+ ""String_Node_Str"");
}","public void start(){
  if (is_started)   return;
  is_started=true;
  boolean is_delayed=delay_time > System.currentTimeMillis();
  Class<? extends ScriptQueue> clazz=getClass();
  String name=classNameCache.get(clazz);
  if (name == null)   classNameCache.put(clazz,name=clazz.getSimpleName());
  if (is_delayed) {
    dB.echoDebug(this,""String_Node_Str"" + name + ""String_Node_Str""+ id+ ""String_Node_Str""+ ""String_Node_Str""+ new Duration((delay_time - System.currentTimeMillis()) / 1000 * 20).identify()+ ""String_Node_Str"");
  }
 else   dB.echoDebug(this,""String_Node_Str"" + name + ""String_Node_Str""+ id+ ""String_Node_Str"");
  if (is_delayed) {
    Bukkit.getScheduler().scheduleSyncDelayedTask(DenizenAPI.getCurrentInstance(),new Runnable(){
      @Override public void run(){
        onStart();
      }
    }
,(delay_time - System.currentTimeMillis()) / 1000 * 20);
  }
 else   onStart();
}",0.3381858902575588
10324,"@Override public String getAttribute(Attribute attribute){
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.hasGravity()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.getId()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.isBlock()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.isBurnable()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.isEdible()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.isFlammable()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.isOccluding()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.isRecord()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.isSolid()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.isTransparent()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.getMaxDurability()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.getMaxStackSize()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dMaterial compared=dMaterial.valueOf(attribute.getContext(1));
    if (compared == null)     return Element.FALSE.getAttribute(attribute.fulfill(1));
 else     return new Element(material.name().equalsIgnoreCase(compared.getMaterial().name())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.name()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getData()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dItem(this,1).getAttribute(attribute.fulfill(1));
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new Element(identify()).getAttribute(attribute.fulfill(0));
}","@Override public String getAttribute(Attribute attribute){
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.hasGravity()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.getId()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.isBlock()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.isBurnable()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.isEdible()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.isFlammable()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.isOccluding()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.isRecord()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.isSolid()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.isTransparent()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.getMaxDurability()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.getMaxStackSize()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dMaterial compared=dMaterial.valueOf(attribute.getContext(1));
    if (compared == null)     return Element.FALSE.getAttribute(attribute.fulfill(1));
 else     return new Element(material.name().equalsIgnoreCase(compared.forcedIdentity != null ? compared.forcedIdentity : compared.getMaterial().name())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(material.name()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getData()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dItem(this,1).getAttribute(attribute.fulfill(1));
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new Element(identify()).getAttribute(attribute.fulfill(0));
}",0.9881843245372194
10325,"public boolean matchesMaterialData(MaterialData data){
  if (hasData())   return (material == data.getItemType() && data.getData() == data.getData());
 else   return material == data.getItemType();
}","public boolean matchesMaterialData(MaterialData data){
  if (hasData())   return (material == data.getItemType() && this.data == data.getData());
 else   return material == data.getItemType();
}",0.9618320610687024
10326,"public String getContext(int attribute){
  if (hasContext(attribute)) {
    dB.log(getAttribute(attribute));
    String text=getAttribute(attribute);
    Matcher contextMatcher=Pattern.compile(""String_Node_Str"").matcher(text);
    if (contextMatcher.find()) {
      return text.substring(contextMatcher.start() + 1,contextMatcher.end() - 1);
    }
  }
  return null;
}","public String getContext(int attribute){
  if (hasContext(attribute)) {
    String text=getAttribute(attribute);
    Matcher contextMatcher=Pattern.compile(""String_Node_Str"").matcher(text);
    if (contextMatcher.find()) {
      return text.substring(contextMatcher.start() + 1,contextMatcher.end() - 1);
    }
  }
  return null;
}",0.9470672389127324
10327,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",new Element(""String_Node_Str""));
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",new Element(""String_Node_Str""));
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",new Element(""String_Node_Str""));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",new Element(""String_Node_Str""));
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     arg.reportUnhandled();
  }
  if (!scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!scriptEntry.hasObject(""String_Node_Str"") && scriptEntry.getElement(""String_Node_Str"").asString().equalsIgnoreCase(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",new Element(""String_Node_Str""));
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",new Element(""String_Node_Str""));
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",new Element(""String_Node_Str""));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",new Element(""String_Node_Str""));
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"")) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     arg.reportUnhandled();
  }
  if (!scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!scriptEntry.hasObject(""String_Node_Str"") && scriptEntry.getElement(""String_Node_Str"").asString().equalsIgnoreCase(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.defaultObject(""String_Node_Str"",new Element(""String_Node_Str""));
}",0.979292267365662
10328,"@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  dLocation location=(dLocation)scriptEntry.getObject(""String_Node_Str"");
  Effect effect=(Effect)scriptEntry.getObject(""String_Node_Str"");
  ParticleEffect particleEffect=(ParticleEffect)scriptEntry.getObject(""String_Node_Str"");
  int iconcrack=scriptEntry.getElement(""String_Node_Str"").asInt();
  double visibility=scriptEntry.getElement(""String_Node_Str"").asDouble();
  float data=scriptEntry.getElement(""String_Node_Str"").asFloat();
  int qty=scriptEntry.getElement(""String_Node_Str"").asInt();
  float offset=scriptEntry.getElement(""String_Node_Str"").asFloat();
  location.add(0,1,0);
  dB.report(scriptEntry,getName(),(effect != null ? aH.debugObj(""String_Node_Str"",effect.name()) : particleEffect != null ? aH.debugObj(""String_Node_Str"",particleEffect.name()) : aH.debugObj(""String_Node_Str"",iconcrack)) + aH.debugObj(""String_Node_Str"",location.toString()) + aH.debugObj(""String_Node_Str"",visibility)+ aH.debugObj(""String_Node_Str"",data)+ aH.debugObj(""String_Node_Str"",qty)+ (effect != null ? ""String_Node_Str"" : aH.debugObj(""String_Node_Str"",offset)));
  if (effect != null) {
    for (int n=0; n < qty; n++) {
      location.getWorld().playEffect(location,effect,(int)data,(int)visibility);
    }
  }
 else   if (particleEffect != null) {
    particleEffect.display(location,visibility,offset,offset,offset,data,qty);
  }
 else {
    ParticleEffect.displayIconCrack(location,visibility,iconcrack,offset,offset,offset,data,qty);
  }
}","@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  dLocation location=(dLocation)scriptEntry.getObject(""String_Node_Str"");
  Effect effect=(Effect)scriptEntry.getObject(""String_Node_Str"");
  ParticleEffect particleEffect=(ParticleEffect)scriptEntry.getObject(""String_Node_Str"");
  Element iconcrack=scriptEntry.getElement(""String_Node_Str"");
  Element radius=scriptEntry.getElement(""String_Node_Str"");
  Element data=scriptEntry.getElement(""String_Node_Str"");
  Element qty=scriptEntry.getElement(""String_Node_Str"");
  Element offset=scriptEntry.getElement(""String_Node_Str"");
  location.add(0,1,0);
  dB.report(scriptEntry,getName(),(effect != null ? aH.debugObj(""String_Node_Str"",effect.name()) : particleEffect != null ? aH.debugObj(""String_Node_Str"",particleEffect.name()) : iconcrack.debug()) + location.debug() + radius.debug()+ data.debug()+ qty.debug()+ (effect != null ? ""String_Node_Str"" : offset.debug()));
  if (effect != null) {
    for (int n=0; n < qty.asInt(); n++) {
      location.getWorld().playEffect(location,effect,data.asInt(),radius.asInt());
    }
  }
 else   if (particleEffect != null) {
    float os=offset.asFloat();
    particleEffect.display(location,radius.asDouble(),os,os,os,data.asFloat(),qty.asInt());
  }
 else {
    float os=offset.asFloat();
    ParticleEffect.displayIconCrack(location,radius.asDouble(),iconcrack.asInt(),os,os,os,data.asFloat(),qty.asInt());
  }
}",0.3943567349680887
10329,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  dList locations=new dList();
  dList entities=new dList();
  boolean added_entities=false;
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (arg.matchesPrefix(""String_Node_Str"")) {
      for (      String entity : dList.valueOf(arg.getValue()))       if (dPlayer.matches(entity))       entities.add(entity);
      added_entities=true;
    }
 else     if (arg.matchesArgumentType(dList.class)) {
      for (      String item : dList.valueOf(arg.getValue()))       if (dLocation.matches(item))       locations.add(item);
    }
 else     if (arg.matchesArgumentType(dLocation.class))     locations.add(arg.getValue());
 else     if (arg.matchesPrefix(""String_Node_Str"") && arg.matchesArgumentType(Duration.class))     scriptEntry.addObject(""String_Node_Str"",arg.asType(Duration.class));
 else     if (arg.matchesArgumentType(dMaterial.class))     scriptEntry.addObject(""String_Node_Str"",arg.asType(dMaterial.class));
 else     arg.reportUnhandled();
  }
  if (entities.isEmpty())   entities.add(scriptEntry.getPlayer().identify());
  if (locations.isEmpty())   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!added_entities && (scriptEntry.getPlayer() == null || !scriptEntry.getPlayer().isOnline()))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (entities.isEmpty() && added_entities)   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.addObject(""String_Node_Str"",entities);
  scriptEntry.addObject(""String_Node_Str"",locations);
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  dList locations=new dList();
  dList entities=new dList();
  boolean added_entities=false;
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (arg.matchesPrefix(""String_Node_Str"")) {
      for (      String entity : dList.valueOf(arg.getValue()))       if (dPlayer.matches(entity))       entities.add(entity);
      added_entities=true;
    }
 else     if (arg.matchesArgumentType(dList.class)) {
      for (      String item : dList.valueOf(arg.getValue()))       if (dLocation.matches(item))       locations.add(item);
    }
 else     if (arg.matchesArgumentType(dLocation.class))     locations.add(arg.getValue());
 else     if (arg.matchesPrefix(""String_Node_Str"") && arg.matchesArgumentType(Duration.class))     scriptEntry.addObject(""String_Node_Str"",arg.asType(Duration.class));
 else     if (arg.matchesArgumentType(dMaterial.class))     scriptEntry.addObject(""String_Node_Str"",arg.asType(dMaterial.class));
 else     arg.reportUnhandled();
  }
  if (entities.isEmpty() && scriptEntry.hasPlayer())   entities.add(scriptEntry.getPlayer().identify());
  if (locations.isEmpty())   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!added_entities && (scriptEntry.getPlayer() == null || !scriptEntry.getPlayer().isOnline()))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (entities.isEmpty() && added_entities)   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.addObject(""String_Node_Str"",entities);
  scriptEntry.addObject(""String_Node_Str"",locations);
}",0.9916537867078824
10330,"@EventHandler public void entityDeath(EntityDeathEvent event){
  Player player=null;
  dNPC npc=null;
  Map<String,dObject> context=new HashMap<String,dObject>();
  dEntity entity=new dEntity(event.getEntity());
  context.put(""String_Node_Str"",entity.getDenizenObject());
  if (entity.isNPC())   npc=entity.getDenizenNPC();
 else   if (entity.isPlayer())   player=entity.getPlayer();
  if (entityKillers.containsKey(entity.getUUID())) {
    context.put(""String_Node_Str"",entityKillers.get(entity.getUUID()));
    entityKillers.remove(entity.getUUID());
  }
  PlayerDeathEvent subEvent=null;
  if (event instanceof PlayerDeathEvent) {
    subEvent=(PlayerDeathEvent)event;
    context.put(""String_Node_Str"",new Element(subEvent.getDeathMessage()));
    if (player != null)     context.put(""String_Node_Str"",dInventory.mirrorBukkitInventory(player.getInventory()));
  }
  String determination=EventManager.doEvents(Arrays.asList(""String_Node_Str"",entity.identifyType() + ""String_Node_Str"",""String_Node_Str"",entity.identifyType() + ""String_Node_Str""),npc,player,context,true).toUpperCase();
  if (determination.startsWith(""String_Node_Str"")) {
    determination=determination.substring(6);
  }
  if (determination.startsWith(""String_Node_Str"")) {
    event.getDrops().clear();
    if (determination.endsWith(""String_Node_Str"")) {
      event.setDroppedExp(0);
    }
  }
 else   if (determination.equals(""String_Node_Str"")) {
    event.setDroppedExp(0);
  }
 else   if (Argument.valueOf(determination).matchesArgumentList(dItem.class)) {
    dList drops=dList.valueOf(determination.substring(6));
    drops.filter(dItem.class);
    event.getDrops().clear();
    for (    String drop : drops) {
      dItem item=dItem.valueOf(drop);
      if (item != null)       event.getDrops().add(item.getItemStack());
    }
  }
 else   if (Argument.valueOf(determination).matchesPrimitive(aH.PrimitiveType.Integer)) {
    int xp=Integer.valueOf(determination.substring(3));
    event.setDroppedExp(xp);
  }
 else   if (!determination.equals(""String_Node_Str"")) {
    if (event instanceof PlayerDeathEvent) {
      subEvent.setDeathMessage(determination);
    }
  }
}","@EventHandler public void entityDeath(EntityDeathEvent event){
  Player player=null;
  dNPC npc=null;
  Map<String,dObject> context=new HashMap<String,dObject>();
  dEntity entity=new dEntity(event.getEntity());
  context.put(""String_Node_Str"",entity.getDenizenObject());
  if (entity.isNPC())   npc=entity.getDenizenNPC();
 else   if (entity.isPlayer())   player=entity.getPlayer();
  if (entityKillers.containsKey(entity.getUUID())) {
    context.put(""String_Node_Str"",entityKillers.get(entity.getUUID()));
    entityKillers.remove(entity.getUUID());
  }
  PlayerDeathEvent subEvent=null;
  if (event instanceof PlayerDeathEvent) {
    subEvent=(PlayerDeathEvent)event;
    context.put(""String_Node_Str"",new Element(subEvent.getDeathMessage()));
    if (player != null)     context.put(""String_Node_Str"",dInventory.mirrorBukkitInventory(player.getInventory()));
  }
  String determination=EventManager.doEvents(Arrays.asList(""String_Node_Str"",entity.identifyType() + ""String_Node_Str"",""String_Node_Str"",entity.identifyType() + ""String_Node_Str""),npc,player,context,true);
  if (determination.toUpperCase().startsWith(""String_Node_Str"")) {
    determination=determination.substring(6);
  }
  if (determination.toUpperCase().startsWith(""String_Node_Str"")) {
    event.getDrops().clear();
    if (determination.endsWith(""String_Node_Str"")) {
      event.setDroppedExp(0);
    }
  }
 else   if (determination.toUpperCase().equals(""String_Node_Str"")) {
    event.setDroppedExp(0);
  }
 else   if (Argument.valueOf(determination).matchesArgumentList(dItem.class)) {
    dList drops=dList.valueOf(determination);
    drops.filter(dItem.class);
    event.getDrops().clear();
    for (    String drop : drops) {
      dItem item=dItem.valueOf(drop);
      if (item != null)       event.getDrops().add(item.getItemStack());
    }
  }
 else   if (Argument.valueOf(determination).matchesPrimitive(aH.PrimitiveType.Integer)) {
    int xp=Integer.valueOf(determination.substring(3));
    event.setDroppedExp(xp);
  }
 else   if (!determination.equals(""String_Node_Str"")) {
    if (event instanceof PlayerDeathEvent) {
      subEvent.setDeathMessage(determination);
    }
  }
}",0.9807558543936936
10331,"@Override public void execute(final ScriptEntry scriptEntry) throws CommandExecutionException {
  Element name=(Element)scriptEntry.getObject(""String_Node_Str"");
  dB.report(scriptEntry,getName(),name.debug());
  NPC npc=scriptEntry.getNPC().getCitizen();
  Location prev=npc.isSpawned() ? npc.getEntity().getLocation() : null;
  npc.despawn(DespawnReason.PENDING_RESPAWN);
  npc.setName(name.asString());
  if (prev != null)   npc.spawn(prev);
}","@Override public void execute(final ScriptEntry scriptEntry) throws CommandExecutionException {
  Element name=(Element)scriptEntry.getObject(""String_Node_Str"");
  dB.report(scriptEntry,getName(),name.debug());
  NPC npc=scriptEntry.getNPC().getCitizen();
  Location prev=npc.isSpawned() ? npc.getEntity().getLocation() : null;
  npc.despawn(DespawnReason.PENDING_RESPAWN);
  npc.setName(name.asString().length() > 16 ? name.asString().substring(0,16) : name.asString());
  if (prev != null)   npc.spawn(prev);
}",0.931106471816284
10332,"@EventHandler public void projectileHit(ProjectileHitEvent event){
  Player player=null;
  dNPC npc=null;
  if (event.getEntity() == null)   return;
  dEntity projectile=new dEntity(event.getEntity());
  if (projectile.getLocation() == null)   return;
  Block block=null;
  BlockIterator bi=new BlockIterator(projectile.getLocation().getWorld(),projectile.getLocation().toVector(),projectile.getLocation().getDirection().normalize(),0,4);
  while (bi.hasNext()) {
    block=bi.next();
    if (block.getTypeId() != 0) {
      break;
    }
  }
  if (block == null)   return;
  dEntity shooter=projectile.getShooter();
  dMaterial material=dMaterial.getMaterialFrom(block.getType(),block.getData());
  Map<String,dObject> context=new HashMap<String,dObject>();
  context.put(""String_Node_Str"",projectile);
  context.put(""String_Node_Str"",new dLocation(block.getLocation()));
  List<String> events=new ArrayList<String>();
  events.add(""String_Node_Str"");
  events.add(""String_Node_Str"" + material.identify());
  events.add(projectile.identifyType() + ""String_Node_Str"");
  events.add(projectile.identifyType() + ""String_Node_Str"" + material.identify());
  if (shooter != null) {
    context.put(""String_Node_Str"",shooter.getDenizenObject());
    if (shooter.isNPC()) {
      npc=shooter.getDenizenNPC();
    }
 else     if (shooter.isPlayer()) {
      player=shooter.getPlayer();
    }
    events.add(""String_Node_Str"");
    events.add(""String_Node_Str"" + projectile.identifyType());
    events.add(""String_Node_Str"" + material.identify() + ""String_Node_Str""+ projectile.identifyType());
    events.add(shooter.identifyType() + ""String_Node_Str"");
    events.add(shooter.identifyType() + ""String_Node_Str"" + projectile.identifyType());
    events.add(shooter.identifyType() + ""String_Node_Str"" + material.identify()+ ""String_Node_Str""+ projectile.identifyType());
  }
  EventManager.doEvents(events,npc,player,context,true);
}","@EventHandler public void projectileHit(ProjectileHitEvent event){
  Player player=null;
  dNPC npc=null;
  if (event.getEntity() == null)   return;
  dEntity projectile=new dEntity(event.getEntity());
  if (projectile.getLocation() == null)   return;
  if (Double.isNaN(projectile.getLocation().getDirection().normalize().getX()))   return;
  Block block=null;
  BlockIterator bi=new BlockIterator(projectile.getLocation().getWorld(),projectile.getLocation().toVector(),projectile.getLocation().getDirection().normalize(),0,4);
  while (bi.hasNext()) {
    block=bi.next();
    if (block.getTypeId() != 0) {
      break;
    }
  }
  if (block == null)   return;
  dEntity shooter=projectile.getShooter();
  dMaterial material=dMaterial.getMaterialFrom(block.getType(),block.getData());
  Map<String,dObject> context=new HashMap<String,dObject>();
  context.put(""String_Node_Str"",projectile);
  context.put(""String_Node_Str"",new dLocation(block.getLocation()));
  List<String> events=new ArrayList<String>();
  events.add(""String_Node_Str"");
  events.add(""String_Node_Str"" + material.identify());
  events.add(projectile.identifyType() + ""String_Node_Str"");
  events.add(projectile.identifyType() + ""String_Node_Str"" + material.identify());
  if (shooter != null) {
    context.put(""String_Node_Str"",shooter.getDenizenObject());
    if (shooter.isNPC()) {
      npc=shooter.getDenizenNPC();
    }
 else     if (shooter.isPlayer()) {
      player=shooter.getPlayer();
    }
    events.add(""String_Node_Str"");
    events.add(""String_Node_Str"" + projectile.identifyType());
    events.add(""String_Node_Str"" + material.identify() + ""String_Node_Str""+ projectile.identifyType());
    events.add(shooter.identifyType() + ""String_Node_Str"");
    events.add(shooter.identifyType() + ""String_Node_Str"" + projectile.identifyType());
    events.add(shooter.identifyType() + ""String_Node_Str"" + material.identify()+ ""String_Node_Str""+ projectile.identifyType());
  }
  EventManager.doEvents(events,npc,player,context,true);
}",0.9771341463414634
10333,"@EventHandler public void inventoryCloseEvent(InventoryCloseEvent event){
  Map<String,dObject> context=new HashMap<String,dObject>();
  Player player=(Player)event.getPlayer();
  String type=event.getInventory().getType().name();
  context.put(""String_Node_Str"",dInventory.mirrorBukkitInventory(event.getInventory()));
  if (event.getInventory().getHolder() instanceof Player) {
    PlayerInventory inv=(PlayerInventory)event.getInventory();
    ItemStack[] armor_contents=inv.getArmorContents();
    for (int s=0; s < 4; s++) {
      if (armor_contents[0].getType() != Material.AIR)       playerEquipsArmorEvent((Player)inv.getHolder(),armor_contents[s],inv.firstEmpty());
    }
  }
  EventManager.doEvents(Arrays.asList(""String_Node_Str"",""String_Node_Str"" + type),null,player,context);
}","@EventHandler public void inventoryCloseEvent(InventoryCloseEvent event){
  Map<String,dObject> context=new HashMap<String,dObject>();
  Player player=(Player)event.getPlayer();
  String type=event.getInventory().getType().name();
  context.put(""String_Node_Str"",dInventory.mirrorBukkitInventory(event.getInventory()));
  if (event.getInventory().getHolder() instanceof Player) {
    PlayerInventory inv=(PlayerInventory)event.getInventory().getHolder().getInventory();
    ItemStack[] armor_contents=inv.getArmorContents();
    for (int s=0; s < 4; s++) {
      if (armor_contents[0].getType() != Material.AIR)       playerEquipsArmorEvent((Player)inv.getHolder(),armor_contents[s],inv.firstEmpty());
    }
  }
  EventManager.doEvents(Arrays.asList(""String_Node_Str"",""String_Node_Str"" + type),null,player,context);
}",0.9831985065339142
10334,"/** 
 * Gets the InteractScript from a NPC Denizen for a Player and returns the appropriate ScriptContainer. Returns null if no script found.
 * @param npc  the NPC involved
 * @param player  the Player involved
 * @param trigger  the class of the trigger being used
 * @return  the highest priority InteractScriptContainer that meets requirements, if any.
 */
public static InteractScriptContainer getInteractScript(dNPC npc,dPlayer player,Class<? extends AbstractTrigger> trigger){
  if (npc == null || player == null || trigger == null)   return null;
  AssignmentScriptContainer assignmentScript=npc.getAssignmentTrait().getAssignment();
  if (assignmentScript == null)   return null;
  List<String> assignedScripts=new ArrayList<String>();
  if (assignmentScript.contains(""String_Node_Str""))   assignedScripts=assignmentScript.getStringList(""String_Node_Str"");
  if (assignedScripts.isEmpty())   return null;
  dB.log(dB.DebugElement.Header + ""String_Node_Str"" + npc.getName()+ ""String_Node_Str""+ player.getName());
  List<PriorityPair> interactableScripts=new ArrayList<PriorityPair>();
  for (  String entry : assignedScripts) {
    entry=entry.toUpperCase();
    String name=null;
    Integer priority;
    if (Character.isDigit(entry.charAt(0))) {
      try {
        priority=Integer.valueOf(entry.split(""String_Node_Str"",2)[0]);
        name=entry.split(""String_Node_Str"",2)[1].replace(""String_Node_Str"",""String_Node_Str"");
      }
 catch (      Exception e) {
        dB.echoError(""String_Node_Str"" + entry + ""String_Node_Str"");
        continue;
      }
    }
 else {
      dB.echoError(""String_Node_Str"" + name + ""String_Node_Str"");
      name=entry;
      entry=""String_Node_Str"" + entry;
      priority=0;
    }
    try {
      InteractScriptContainer interactScript=ScriptRegistry.getScriptContainerAs(name,InteractScriptContainer.class);
      if (interactScript != null) {
        if (interactScript.checkBaseRequirements(player,npc)) {
          dB.echoApproval(""String_Node_Str"" + entry + ""String_Node_Str"");
          if (interactScript.checkCooldown(player))           interactableScripts.add(new PriorityPair(priority,entry.split(""String_Node_Str"",2)[1]));
 else           dB.log(ChatColor.GOLD + ""String_Node_Str"");
        }
 else {
          dB.log(""String_Node_Str"" + entry + ""String_Node_Str"");
        }
      }
 else {
        dB.log(""String_Node_Str"" + entry + ""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      dB.echoError(ChatColor.RED + ""String_Node_Str"" + entry+ ""String_Node_Str"");
      dB.echoError(e);
    }
    dB.log(dB.DebugElement.Spacer,null);
  }
  if (interactableScripts.size() == 1) {
    String script=interactableScripts.get(0).getName();
    dB.echoApproval(""String_Node_Str"" + script + ""String_Node_Str"");
    dB.log(dB.DebugElement.Footer.toString());
    return ScriptRegistry.getScriptContainerAs(script.replace(""String_Node_Str"",""String_Node_Str""),InteractScriptContainer.class);
  }
 else   if (interactableScripts.isEmpty()) {
    dB.log(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
    dB.log(dB.DebugElement.Footer.toString());
    return null;
  }
 else   Collections.sort(interactableScripts);
  for (int a=interactableScripts.size() - 1; a >= 0; a--) {
    InteractScriptContainer interactScript=ScriptRegistry.getScriptContainerAs(interactableScripts.get(a).name.replace(""String_Node_Str"",""String_Node_Str""),InteractScriptContainer.class);
    dB.log(""String_Node_Str"" + interactableScripts.get(a).getName() + ""String_Node_Str"");
    if (interactableScripts.get(a).getName().startsWith(""String_Node_Str"")) {
      if (interactScript.containsTriggerInStep(getCurrentStep(player,interactScript.getName()),trigger)) {
        dB.log(""String_Node_Str"");
        dB.echoApproval(""String_Node_Str"" + interactScript.getName() + ""String_Node_Str"");
        dB.log(dB.DebugElement.Footer.toString());
        return interactScript;
      }
 else       dB.log(""String_Node_Str"");
    }
 else {
      dB.log(""String_Node_Str"");
      dB.echoApproval(""String_Node_Str"" + interactScript.getName() + ""String_Node_Str"");
      dB.log(""String_Node_Str"" + getCurrentStep(player,interactScript.getName()));
      dB.log(dB.DebugElement.Footer.toString());
      return interactScript;
    }
  }
  return null;
}","/** 
 * Gets the InteractScript from a NPC Denizen for a Player and returns the appropriate ScriptContainer. Returns null if no script found.
 * @param npc  the NPC involved
 * @param player  the Player involved
 * @param trigger  the class of the trigger being used
 * @return  the highest priority InteractScriptContainer that meets requirements, if any.
 */
public static InteractScriptContainer getInteractScript(dNPC npc,dPlayer player,Class<? extends AbstractTrigger> trigger){
  if (npc == null || player == null || trigger == null)   return null;
  AssignmentScriptContainer assignmentScript=npc.getAssignmentTrait().getAssignment();
  if (assignmentScript == null)   return null;
  List<String> assignedScripts=new ArrayList<String>();
  if (assignmentScript.contains(""String_Node_Str""))   assignedScripts=assignmentScript.getStringList(""String_Node_Str"");
  if (assignedScripts.isEmpty())   return null;
  dB.log(dB.DebugElement.Header,""String_Node_Str"" + npc.getName() + ""String_Node_Str""+ player.getName());
  List<PriorityPair> interactableScripts=new ArrayList<PriorityPair>();
  for (  String entry : assignedScripts) {
    entry=entry.toUpperCase();
    String name=null;
    Integer priority;
    if (Character.isDigit(entry.charAt(0))) {
      try {
        priority=Integer.valueOf(entry.split(""String_Node_Str"",2)[0]);
        name=entry.split(""String_Node_Str"",2)[1].replace(""String_Node_Str"",""String_Node_Str"");
      }
 catch (      Exception e) {
        dB.echoError(""String_Node_Str"" + entry + ""String_Node_Str"");
        continue;
      }
    }
 else {
      dB.echoError(""String_Node_Str"" + name + ""String_Node_Str"");
      name=entry;
      entry=""String_Node_Str"" + entry;
      priority=0;
    }
    try {
      InteractScriptContainer interactScript=ScriptRegistry.getScriptContainerAs(name,InteractScriptContainer.class);
      if (interactScript != null) {
        if (interactScript.checkBaseRequirements(player,npc)) {
          dB.echoApproval(""String_Node_Str"" + entry + ""String_Node_Str"");
          if (interactScript.checkCooldown(player))           interactableScripts.add(new PriorityPair(priority,entry.split(""String_Node_Str"",2)[1]));
 else           dB.log(ChatColor.GOLD + ""String_Node_Str"");
        }
 else {
          dB.log(""String_Node_Str"" + entry + ""String_Node_Str"");
        }
      }
 else {
        dB.log(""String_Node_Str"" + entry + ""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      dB.echoError(ChatColor.RED + ""String_Node_Str"" + entry+ ""String_Node_Str"");
      dB.echoError(e);
    }
    dB.log(dB.DebugElement.Spacer,null);
  }
  if (interactableScripts.size() == 1) {
    String script=interactableScripts.get(0).getName();
    dB.echoApproval(""String_Node_Str"" + script + ""String_Node_Str"");
    dB.log(dB.DebugElement.Footer,""String_Node_Str"");
    return ScriptRegistry.getScriptContainerAs(script.replace(""String_Node_Str"",""String_Node_Str""),InteractScriptContainer.class);
  }
 else   if (interactableScripts.isEmpty()) {
    dB.log(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
    dB.log(dB.DebugElement.Footer,""String_Node_Str"");
    return null;
  }
 else   Collections.sort(interactableScripts);
  for (int a=interactableScripts.size() - 1; a >= 0; a--) {
    InteractScriptContainer interactScript=ScriptRegistry.getScriptContainerAs(interactableScripts.get(a).name.replace(""String_Node_Str"",""String_Node_Str""),InteractScriptContainer.class);
    dB.log(""String_Node_Str"" + interactableScripts.get(a).getName() + ""String_Node_Str"");
    if (interactableScripts.get(a).getName().startsWith(""String_Node_Str"")) {
      if (interactScript.containsTriggerInStep(getCurrentStep(player,interactScript.getName()),trigger)) {
        dB.log(""String_Node_Str"");
        dB.echoApproval(""String_Node_Str"" + interactScript.getName() + ""String_Node_Str"");
        dB.log(dB.DebugElement.Footer,""String_Node_Str"");
        return interactScript;
      }
 else       dB.log(""String_Node_Str"");
    }
 else {
      dB.log(""String_Node_Str"");
      dB.echoApproval(""String_Node_Str"" + interactScript.getName() + ""String_Node_Str"");
      dB.log(""String_Node_Str"" + getCurrentStep(player,interactScript.getName()));
      dB.log(dB.DebugElement.Footer,""String_Node_Str"");
      return interactScript;
    }
  }
  return null;
}",0.9820581085773816
10335,"@Override public void onBuild(List<aH.Argument> args){
  for (  aH.Argument arg : args) {
    if (type == null && arg.matchesEnum(TravelType.values()))     type=TravelType.valueOf(arg.getValue().toUpperCase());
 else     if (arg.matchesArgumentType(dCuboid.class))     end_cuboid=arg.asType(dCuboid.class);
 else     if (arg.matchesArgumentType(dLocation.class))     end_point=arg.asType(dLocation.class);
 else     if (arg.matchesArgumentType(dNPC.class))     target=arg.asType(dNPC.class);
 else     if (arg.matchesPrefix(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Integer))     distance_required=aH.getIntegerFrom(arg.getValue());
 else     if (arg.matchesPrefix(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Integer))     radius=aH.getIntegerFrom(arg.getValue());
  }
  if (type == null) {
    dB.echoError(""String_Node_Str"");
    cancel();
  }
}","@Override public void onBuild(List<aH.Argument> args){
  for (  aH.Argument arg : args) {
    if (type == null && arg.matchesEnum(TravelType.values()))     type=TravelType.valueOf(arg.getValue().toUpperCase());
 else     if (arg.matchesPrefix(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Integer))     distance_required=aH.getIntegerFrom(arg.getValue());
 else     if (arg.matchesPrefix(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Integer))     radius=aH.getIntegerFrom(arg.getValue());
 else     if (arg.matchesArgumentType(dCuboid.class))     end_cuboid=arg.asType(dCuboid.class);
 else     if (arg.matchesArgumentType(dLocation.class))     end_point=arg.asType(dLocation.class);
 else     if (arg.matchesArgumentType(dNPC.class))     target=arg.asType(dNPC.class);
  }
  if (type == null) {
    dB.echoError(""String_Node_Str"");
    cancel();
  }
  if (type == TravelType.DISTANCE && distance_required == null) {
    dB.echoError(""String_Node_Str"");
    cancel();
  }
  if (type == TravelType.TOCUBOID && end_cuboid == null) {
    dB.echoError(""String_Node_Str"");
    cancel();
  }
  if (type == TravelType.TOLOCATION && end_point == null) {
    dB.echoError(""String_Node_Str"");
    cancel();
  }
  if (type == TravelType.TONPC && target == null) {
    dB.echoError(""String_Node_Str"");
    cancel();
  }
}",0.4849031095087877
10336,"public static boolean matches(String string){
  string=string.toUpperCase().replace(""String_Node_Str"",""String_Node_Str"");
  NPC npc;
  if (aH.matchesInteger(string)) {
    npc=CitizensAPI.getNPCRegistry().getById(aH.getIntegerFrom(string));
    if (npc != null)     return true;
  }
 else {
    for (    NPC test : CitizensAPI.getNPCRegistry()) {
      if (test.getName().equalsIgnoreCase(string)) {
        return true;
      }
    }
  }
  return false;
}","public static boolean matches(String string){
  if (string.toLowerCase().startsWith(""String_Node_Str""))   return true;
  string=string.toUpperCase().replace(""String_Node_Str"",""String_Node_Str"");
  NPC npc;
  if (aH.matchesInteger(string)) {
    npc=CitizensAPI.getNPCRegistry().getById(aH.getIntegerFrom(string));
    if (npc != null)     return true;
  }
 else {
    for (    NPC test : CitizensAPI.getNPCRegistry()) {
      if (test.getName().equalsIgnoreCase(string)) {
        return true;
      }
    }
  }
  return false;
}",0.9258883248730964
10337,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"")) {
      if (!scriptEntry.hasPlayer())       throw new InvalidArgumentsException(""String_Node_Str"");
      scriptEntry.addObject(""String_Node_Str"",Arrays.asList(scriptEntry.getPlayer()));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Integer))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentList(dEntity.class))     scriptEntry.addObject(""String_Node_Str"",arg.asType(dList.class).filter(dEntity.class,scriptEntry));
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
 else     arg.reportUnhandled();
  }
  if (!scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!scriptEntry.hasObject(""String_Node_Str"")) {
    if (!scriptEntry.hasNPC())     throw new InvalidArgumentsException(""String_Node_Str"");
    scriptEntry.addObject(""String_Node_Str"",Arrays.asList(scriptEntry.getNPC()));
  }
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"")) {
      if (!scriptEntry.hasPlayer())       throw new InvalidArgumentsException(""String_Node_Str"");
      scriptEntry.addObject(""String_Node_Str"",Arrays.asList(scriptEntry.getPlayer().getDenizenEntity()));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Integer))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentList(dEntity.class))     scriptEntry.addObject(""String_Node_Str"",arg.asType(dList.class).filter(dEntity.class,scriptEntry));
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
 else     arg.reportUnhandled();
  }
  if (!scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!scriptEntry.hasObject(""String_Node_Str"")) {
    if (!scriptEntry.hasNPC())     throw new InvalidArgumentsException(""String_Node_Str"");
    scriptEntry.addObject(""String_Node_Str"",Arrays.asList(scriptEntry.getNPC().getDenizenEntity()));
  }
}",0.9865152590489707
10338,"public static List<String> trimEvents(List<String> event){
  List<String> parsed=new ArrayList<String>();
  if (dB.showEventsTrimming)   dB.echoApproval(""String_Node_Str"" + event.toString() + '\'');
  for (int i=0; i < event.size(); i++) {
    for (int x=0; x < event.size(); x++) {
      if (i != x && event.get(i).equalsIgnoreCase(event.get(x))) {
        event.remove(i);
        i--;
        break;
      }
    }
  }
  for (  String e : event)   if (events.containsKey(""String_Node_Str"" + e.toUpperCase()))   parsed.add(e);
  return parsed;
}","public static List<String> trimEvents(List<String> original){
  List<String> event=new ArrayList<String>();
  event.addAll(original);
  List<String> parsed=new ArrayList<String>();
  if (dB.showEventsTrimming)   dB.echoApproval(""String_Node_Str"" + event.toString() + '\'');
  for (int i=0; i < event.size(); i++) {
    for (int x=0; x < event.size(); x++) {
      if (i != x && event.get(i).equalsIgnoreCase(event.get(x))) {
        event.remove(i);
        i--;
        break;
      }
    }
  }
  for (  String e : event)   if (events.containsKey(""String_Node_Str"" + e.toUpperCase()))   parsed.add(e);
  return parsed;
}",0.9271636675235648
10339,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getItemStack().getAmount()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(identify()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getItemStack().getTypeId()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getItemStack().getMaxStackSize()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getItemStack().getData().getData()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getItemStack().getDurability()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(isRepairable()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    String id=item.getType().name().toLowerCase().replace('_',' ');
    if (id.equals(""String_Node_Str""))     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
    if (id.equals(""String_Node_Str"") || id.equals(""String_Node_Str""))     return new Element(id).getAttribute(attribute.fulfill(2));
    if (getItemStack().getAmount() > 1) {
      if (id.equals(""String_Node_Str""))       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
      if (id.endsWith(""String_Node_Str""))       return new Element(id.substring(0,id.length() - 1) + ""String_Node_Str"").getAttribute(attribute.fulfill(2));
      if (id.endsWith(""String_Node_Str""))       return new Element(id).getAttribute(attribute.fulfill(2));
      return new Element(id + ""String_Node_Str"").getAttribute(attribute.fulfill(2));
    }
 else {
      if (id.equals(""String_Node_Str""))       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
      if (id.endsWith(""String_Node_Str""))       return new Element(id).getAttribute(attribute.fulfill(2));
      if (id.startsWith(""String_Node_Str"") || id.startsWith(""String_Node_Str"") || id.startsWith(""String_Node_Str"")|| id.startsWith(""String_Node_Str"")|| id.startsWith(""String_Node_Str""))       return new Element(""String_Node_Str"" + id).getAttribute(attribute.fulfill(2));
      return new Element(""String_Node_Str"" + id).getAttribute(attribute.fulfill(2));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return getMaterial().getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (ItemDisplayname.describes(this))     return Element.TRUE.getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getItemStack().getType() == Material.SKULL_ITEM) {
      SkullMeta skullInfo=(SkullMeta)getItemStack().getItemMeta();
      if (skullInfo.hasOwner()) {
        return new Element(skullInfo.getOwner()).getAttribute(attribute.fulfill(1));
      }
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getItemStack().getType() == Material.WRITTEN_BOOK) {
      attribute.fulfill(1);
      BookMeta bookInfo=(BookMeta)getItemStack().getItemMeta();
      if (attribute.startsWith(""String_Node_Str""))       return new Element(bookInfo.getAuthor()).getAttribute(attribute.fulfill(1));
      if (attribute.startsWith(""String_Node_Str""))       return new Element(bookInfo.getTitle()).getAttribute(attribute.fulfill(1));
      if (attribute.startsWith(""String_Node_Str""))       return new Element(bookInfo.getPageCount()).getAttribute(attribute.fulfill(1));
      if (attribute.startsWith(""String_Node_Str"") && aH.matchesInteger(attribute.getContext(1)))       return new Element(bookInfo.getPage(attribute.getIntContext(1))).getAttribute(attribute.fulfill(1));
      if (attribute.startsWith(""String_Node_Str""))       return new dList(bookInfo.getPages()).getAttribute(attribute.fulfill(1));
    }
 else {
      dB.echoError(""String_Node_Str"");
      return ""String_Node_Str"";
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   if (isItemscript()) {
    return new Element(getLore(itemscriptIdentifier)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE.toString()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new Element(identify()).getAttribute(attribute);
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getItemStack().getAmount()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(identify()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getItemStack().getTypeId()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getItemStack().getMaxStackSize()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getItemStack().getData().getData()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getItemStack().getDurability()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(isRepairable()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    String id=item.getType().name().toLowerCase().replace('_',' ');
    if (id.equals(""String_Node_Str""))     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
    if (id.equals(""String_Node_Str"") || id.equals(""String_Node_Str""))     return new Element(id).getAttribute(attribute.fulfill(2));
    if (getItemStack().getAmount() > 1) {
      if (id.equals(""String_Node_Str""))       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
      if (id.endsWith(""String_Node_Str""))       return new Element(id.substring(0,id.length() - 1) + ""String_Node_Str"").getAttribute(attribute.fulfill(2));
      if (id.endsWith(""String_Node_Str""))       return new Element(id).getAttribute(attribute.fulfill(2));
      return new Element(id + ""String_Node_Str"").getAttribute(attribute.fulfill(2));
    }
 else {
      if (id.equals(""String_Node_Str""))       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
      if (id.endsWith(""String_Node_Str""))       return new Element(id).getAttribute(attribute.fulfill(2));
      if (id.startsWith(""String_Node_Str"") || id.startsWith(""String_Node_Str"") || id.startsWith(""String_Node_Str"")|| id.startsWith(""String_Node_Str"")|| id.startsWith(""String_Node_Str""))       return new Element(""String_Node_Str"" + id).getAttribute(attribute.fulfill(2));
      return new Element(""String_Node_Str"" + id).getAttribute(attribute.fulfill(2));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return getMaterial().getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ItemDisplayname.describes(this)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getItemStack().getType() == Material.SKULL_ITEM) {
      SkullMeta skullInfo=(SkullMeta)getItemStack().getItemMeta();
      if (skullInfo.hasOwner()) {
        return new Element(skullInfo.getOwner()).getAttribute(attribute.fulfill(1));
      }
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getItemStack().getType() == Material.WRITTEN_BOOK) {
      attribute.fulfill(1);
      BookMeta bookInfo=(BookMeta)getItemStack().getItemMeta();
      if (attribute.startsWith(""String_Node_Str""))       return new Element(bookInfo.getAuthor()).getAttribute(attribute.fulfill(1));
      if (attribute.startsWith(""String_Node_Str""))       return new Element(bookInfo.getTitle()).getAttribute(attribute.fulfill(1));
      if (attribute.startsWith(""String_Node_Str""))       return new Element(bookInfo.getPageCount()).getAttribute(attribute.fulfill(1));
      if (attribute.startsWith(""String_Node_Str"") && aH.matchesInteger(attribute.getContext(1)))       return new Element(bookInfo.getPage(attribute.getIntContext(1))).getAttribute(attribute.fulfill(1));
      if (attribute.startsWith(""String_Node_Str""))       return new dList(bookInfo.getPages()).getAttribute(attribute.fulfill(1));
    }
 else {
      dB.echoError(""String_Node_Str"");
      return ""String_Node_Str"";
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   if (isItemscript()) {
    return new Element(getLore(itemscriptIdentifier)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE.toString()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new Element(identify()).getAttribute(attribute);
}",0.9889742075211656
10340,"public List<dObject> filter(Class<? extends dObject> dClass,ScriptEntry entry){
  List<dObject> results=new ArrayList<dObject>();
  for (  String element : this) {
    try {
      if (ObjectFetcher.checkMatch(dClass,element)) {
        dObject object=ObjectFetcher.getObjectFrom(dClass,element,entry.getPlayer(),entry.getNPC());
        if (object != null) {
          results.add(object);
        }
      }
    }
 catch (    Exception e) {
      dB.echoError(e);
    }
  }
  if (results.size() > 0)   return results;
 else   return null;
}","public List<dObject> filter(Class<? extends dObject> dClass,ScriptEntry entry){
  List<dObject> results=new ArrayList<dObject>();
  for (  String element : this) {
    try {
      if (ObjectFetcher.checkMatch(dClass,element)) {
        dObject object=ObjectFetcher.getObjectFrom(dClass,element,(entry != null ? entry.getPlayer() : null),(entry != null ? entry.getNPC() : null));
        if (object != null) {
          results.add(object);
        }
      }
    }
 catch (    Exception e) {
      dB.echoError(e);
    }
  }
  if (results.size() > 0)   return results;
 else   return null;
}",0.9557522123893806
10341,"public static String CleanOutput(String input){
  return input.replace((char)0x01,'<').replace((char)0x02,'>').replace(dList.internal_escape_char,'|');
}","/** 
 * Cleans escaped symbols generated within Tag Manager so that they can be parsed now.
 * @param input the potentially escaped input string.
 * @return the cleaned output string.
 */
public static String CleanOutput(String input){
  return input.replace((char)0x01,'<').replace((char)0x02,'>').replace(dList.internal_escape_char,'|');
}",0.6194331983805668
10342,"public static String CleanOutputFully(String input){
  return input.replace((char)0x01,'<').replace((char)0x02,'>').replace((char)0x2011,';').replace(dList.internal_escape_char,'|');
}","/** 
 * Cleans any potential internal escape characters (secret characters used to hold the place of symbols that might get parsed weirdly like > or | ) back into their proper form. Use this function when outputting information that is going to be read by a person.
 * @param input the potentially escaped input string.
 * @return the cleaned output string.
 */
public static String CleanOutputFully(String input){
  return input.replace((char)0x01,'<').replace((char)0x02,'>').replace((char)0x2011,';').replace(dList.internal_escape_char,'|');
}",0.5041095890410959
10343,"public dLocation(World world,double x,double y,double z,float yaw,float pitch){
  super(world,x,y,z,pitch,yaw);
}","public dLocation(World world,double x,double y,double z,float yaw,float pitch){
  super(world,x,y,z,yaw,pitch);
}",0.9646017699115044
10344,"public dLocation(World world,double x,double y,double z,float yaw,float pitch){
  super(world,x,y,z,yaw,pitch);
}","public dLocation(World world,double x,double y,double z,float yaw,float pitch){
  super(world,x,y,z,pitch,yaw);
}",0.9646017699115044
10345,"@EventHandler public void fetchObject(ReplaceableTagEvent event){
  if (!event.getName().contains(""String_Node_Str""))   return;
  String object_type=event.getName().split(""String_Node_Str"")[0].toLowerCase();
  Class object_class=ObjectFetcher.getObjectClass(object_type);
  if (object_class == null) {
    dB.echoError(""String_Node_Str"" + object_type + ""String_Node_Str"");
    event.setReplaced(""String_Node_Str"");
    return;
  }
  dObject arg;
  try {
    if (!ObjectFetcher.checkMatch(object_class,event.hasNameContext() ? event.getName() + '[' + event.getNameContext()+ ']' : event.getName())) {
      dB.echoDebug(event.getScriptEntry(),""String_Node_Str"" + event.getName() + ""String_Node_Str""+ object_class.getSimpleName()+ ""String_Node_Str"");
      event.setReplaced(""String_Node_Str"");
      return;
    }
    arg=ObjectFetcher.getObjectFrom(object_class,event.hasNameContext() ? event.getName() + '[' + event.getNameContext()+ ']' : event.getName());
    if (arg == null) {
      dB.echoError((event.hasNameContext() ? event.getName() + '[' + event.getNameContext()+ ']' : event.getName() + ""String_Node_Str""));
      return;
    }
    Attribute attribute=new Attribute(event.raw_tag,event.getScriptEntry());
    event.setReplaced(arg.getAttribute(attribute.fulfill(1)));
  }
 catch (  Exception e) {
    dB.echoError(""String_Node_Str"");
    dB.echoError(e);
  }
}","@EventHandler public void fetchObject(ReplaceableTagEvent event){
  if (!event.getName().contains(""String_Node_Str""))   return;
  String object_type=event.getName().split(""String_Node_Str"")[0].toLowerCase();
  Class object_class=ObjectFetcher.getObjectClass(object_type);
  if (object_class == null) {
    dB.echoError(""String_Node_Str"" + object_type + ""String_Node_Str"");
    event.setReplaced(""String_Node_Str"");
    return;
  }
  dObject arg;
  try {
    if (!ObjectFetcher.checkMatch(object_class,event.hasNameContext() ? event.getName() + '[' + event.getNameContext()+ ']' : event.getName())) {
      dB.echoDebug(event.getScriptEntry(),""String_Node_Str"" + event.getName() + ""String_Node_Str""+ object_class.getSimpleName()+ ""String_Node_Str"");
      event.setReplaced(""String_Node_Str"");
      return;
    }
    arg=ObjectFetcher.getObjectFrom(object_class,event.hasNameContext() ? event.getName() + '[' + event.getNameContext()+ ']' : event.getName());
    if (arg == null) {
      dB.echoError(((event.hasNameContext() ? event.getName() + '[' + event.getNameContext()+ ']' : event.getName()) + ""String_Node_Str""));
      return;
    }
    Attribute attribute=new Attribute(event.raw_tag,event.getScriptEntry());
    event.setReplaced(arg.getAttribute(attribute.fulfill(1)));
  }
 catch (  Exception e) {
    dB.echoError(""String_Node_Str"");
    dB.echoError(e);
  }
}",0.9992716678805535
10346,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (player_name == null)   return Element.NULL.getAttribute(attribute);
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE.toString()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dList(PlayerTags.playerChatHistory.get(player_name)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    int x=1;
    if (attribute.hasContext(1) && aH.matchesInteger(attribute.getContext(1)))     x=attribute.getIntContext(1);
    if (!PlayerTags.playerChatHistory.containsKey(player_name))     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return new Element(PlayerTags.playerChatHistory.get(player_name).get(x - 1)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(!FlagManager.playerHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
    if (attribute.startsWith(""String_Node_Str"") && !FlagManager.playerHasFlag(this,flag_name))     return new Element(0).getAttribute(attribute.fulfill(1));
    if (FlagManager.playerHasFlag(this,flag_name))     return new dList(DenizenAPI.getCurrentInstance().flagManager().getPlayerFlag(getName(),flag_name)).getAttribute(attribute);
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
    return new Element(FlagManager.playerHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String outcome=""String_Node_Str"";
    if (attribute.hasContext(1)) {
      try {
        outcome=DenizenAPI.getCurrentInstance().getSaves().getString(""String_Node_Str"" + getName() + ""String_Node_Str""+ dScript.valueOf(attribute.getContext(1)).getName()+ ""String_Node_Str"");
      }
 catch (      Exception e) {
        outcome=""String_Node_Str"";
      }
    }
    return new Element(outcome).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.economy != null) {
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Depends.economy.currencyNameSingular()).getAttribute(attribute.fulfill(2));
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Depends.economy.currencyNamePlural()).getAttribute(attribute.fulfill(2));
      return new Element(Depends.economy.getBalance(player_name)).getAttribute(attribute.fulfill(1));
    }
 else {
      dB.echoError(""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    List<String> players=new ArrayList<String>();
    if (attribute.startsWith(""String_Node_Str"")) {
      for (      Player player : Bukkit.getOnlinePlayers())       players.add(player.getName());
      return new dList(players).getAttribute(attribute.fulfill(2));
    }
 else     if (attribute.startsWith(""String_Node_Str"")) {
      for (      OfflinePlayer player : Bukkit.getOfflinePlayers()) {
        if (!Bukkit.getOnlinePlayers().toString().contains(player.getName()))         players.add(player.getName());
      }
      return new dList(players).getAttribute(attribute.fulfill(2));
    }
 else {
      for (      OfflinePlayer player : Bukkit.getOfflinePlayers())       players.add(player.getName());
      return new dList(players).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && !isOnline())   return new Element(player_name).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getOfflinePlayer().getBedSpawnLocation()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().getFirstPlayed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(true).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isHealthScaled()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getHealthScale()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isBanned()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(isOnline()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isOp()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isWhitelisted()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().getLastPlayed()).getAttribute(attribute.fulfill(1));
  if (!isOnline())   return new Element(identify()).getAttribute(attribute);
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getPlayerEntity().hasMetadata(""String_Node_Str""))     return getSelectedNPC().getAttribute(attribute.fulfill(1));
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && !attribute.startsWith(""String_Node_Str""))   return new dEntity(getPlayerEntity()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getAddress().getHostName()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getDisplayName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerListName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(player_name).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dInventory(getPlayerEntity().getInventory()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dItem(getPlayerEntity().getItemOnCursor()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (Depends.permissions == null) {
      dB.echoError(""String_Node_Str"");
      return null;
    }
    String permission=attribute.getContext(1);
    if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.has((World)null,player_name,permission)).getAttribute(attribute.fulfill(2));
 else     if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.has(attribute.getContext(2),player_name,permission)).getAttribute(attribute.fulfill(2));
    return new Element(Depends.permissions.has(getPlayerEntity(),permission)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (Depends.permissions == null) {
      dB.echoError(""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    String group=attribute.getContext(1);
    if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.playerInGroup((World)null,player_name,group)).getAttribute(attribute.fulfill(2));
 else     if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.playerInGroup(attribute.getContext(2),player_name,group)).getAttribute(attribute.fulfill(2));
    return new Element(Depends.permissions.playerInGroup(getPlayerEntity(),group)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getPlayerEntity().getCompassTarget()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getAllowFlight()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getFlySpeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHunger=getPlayerEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHunger=attribute.getIntContext(2);
    if (getPlayerEntity().getFoodLevel() / maxHunger < .10)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < .40)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < .75)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < 1)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getSaturation()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getFoodLevel()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getMaximumAir()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getRemainingAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getGameMode().getValue()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getGameMode().name()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isBlocking()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isFlying()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSleeping()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSneaking()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSprinting()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(getPlayerEntity().getSleepTicks() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerTime()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getWalkSpeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerWeather().name()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getLevel()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getExpToLevel()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getTotalExperience()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getExp() * 100).getAttribute(attribute.fulfill(1));
  return new dEntity(getPlayerEntity()).getAttribute(attribute);
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (player_name == null)   return Element.NULL.getAttribute(attribute);
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE.toString()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dList(PlayerTags.playerChatHistory.get(player_name)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    int x=1;
    if (attribute.hasContext(1) && aH.matchesInteger(attribute.getContext(1)))     x=attribute.getIntContext(1);
    if (!PlayerTags.playerChatHistory.containsKey(player_name))     return Element.NULL.getAttribute(attribute.fulfill(1));
 else     return new Element(PlayerTags.playerChatHistory.get(player_name).get(x - 1)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(!FlagManager.playerHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
    if (attribute.startsWith(""String_Node_Str"") && !FlagManager.playerHasFlag(this,flag_name))     return new Element(0).getAttribute(attribute.fulfill(1));
    if (FlagManager.playerHasFlag(this,flag_name))     return new dList(DenizenAPI.getCurrentInstance().flagManager().getPlayerFlag(getName(),flag_name)).getAttribute(attribute);
 else     return Element.NULL.getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
    return new Element(FlagManager.playerHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String outcome=""String_Node_Str"";
    if (attribute.hasContext(1)) {
      try {
        outcome=DenizenAPI.getCurrentInstance().getSaves().getString(""String_Node_Str"" + getName() + ""String_Node_Str""+ dScript.valueOf(attribute.getContext(1)).getName()+ ""String_Node_Str"");
      }
 catch (      Exception e) {
        outcome=""String_Node_Str"";
      }
    }
    return new Element(outcome).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.economy != null) {
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Depends.economy.currencyNameSingular()).getAttribute(attribute.fulfill(2));
      if (attribute.startsWith(""String_Node_Str""))       return new Element(Depends.economy.currencyNamePlural()).getAttribute(attribute.fulfill(2));
      return new Element(Depends.economy.getBalance(player_name)).getAttribute(attribute.fulfill(1));
    }
 else {
      dB.echoError(""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    List<String> players=new ArrayList<String>();
    if (attribute.startsWith(""String_Node_Str"")) {
      for (      Player player : Bukkit.getOnlinePlayers())       players.add(player.getName());
      return new dList(players).getAttribute(attribute.fulfill(2));
    }
 else     if (attribute.startsWith(""String_Node_Str"")) {
      for (      OfflinePlayer player : Bukkit.getOfflinePlayers()) {
        if (!Bukkit.getOnlinePlayers().toString().contains(player.getName()))         players.add(player.getName());
      }
      return new dList(players).getAttribute(attribute.fulfill(2));
    }
 else {
      for (      OfflinePlayer player : Bukkit.getOfflinePlayers())       players.add(player.getName());
      return new dList(players).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") && !isOnline())   return new Element(player_name).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getOfflinePlayer().getBedSpawnLocation()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().getFirstPlayed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(true).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isHealthScaled()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getHealthScale()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isBanned()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(isOnline()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isOp()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().isWhitelisted()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOfflinePlayer().getLastPlayed()).getAttribute(attribute.fulfill(1));
  if (!isOnline())   return new Element(identify()).getAttribute(attribute);
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getPlayerEntity().hasMetadata(""String_Node_Str""))     return getSelectedNPC().getAttribute(attribute.fulfill(1));
 else     return Element.NULL.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && !attribute.startsWith(""String_Node_Str""))   return new dEntity(getPlayerEntity()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getAddress().getHostName()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getDisplayName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerListName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(player_name).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dInventory(getPlayerEntity().getInventory()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dItem(getPlayerEntity().getItemOnCursor()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (Depends.permissions == null) {
      dB.echoError(""String_Node_Str"");
      return null;
    }
    String permission=attribute.getContext(1);
    if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.has((World)null,player_name,permission)).getAttribute(attribute.fulfill(2));
 else     if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.has(attribute.getContext(2),player_name,permission)).getAttribute(attribute.fulfill(2));
    return new Element(Depends.permissions.has(getPlayerEntity(),permission)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (Depends.permissions == null) {
      dB.echoError(""String_Node_Str"");
      return Element.NULL.getAttribute(attribute.fulfill(1));
    }
    String group=attribute.getContext(1);
    if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.playerInGroup((World)null,player_name,group)).getAttribute(attribute.fulfill(2));
 else     if (attribute.getAttribute(2).startsWith(""String_Node_Str""))     return new Element(Depends.permissions.playerInGroup(attribute.getContext(2),player_name,group)).getAttribute(attribute.fulfill(2));
    return new Element(Depends.permissions.playerInGroup(getPlayerEntity(),group)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getPlayerEntity().getCompassTarget()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getAllowFlight()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getFlySpeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHunger=getPlayerEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHunger=attribute.getIntContext(2);
    if (getPlayerEntity().getFoodLevel() / maxHunger < .10)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < .40)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < .75)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if (getPlayerEntity().getFoodLevel() / maxHunger < 1)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getSaturation()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getFoodLevel()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getMaximumAir()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getRemainingAir()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getGameMode().getValue()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getGameMode().name()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isBlocking()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isFlying()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSleeping()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSneaking()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().isSprinting()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(getPlayerEntity().getSleepTicks() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerTime()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getWalkSpeed()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getPlayerWeather().name()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getLevel()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getExpToLevel()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getTotalExperience()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getPlayerEntity().getExp() * 100).getAttribute(attribute.fulfill(1));
  return new dEntity(getPlayerEntity()).getAttribute(attribute);
}",0.9995680006283628
10347,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && (attribute.startsWith(""String_Node_Str"",2) || attribute.startsWith(""String_Node_Str"",2))&& attribute.hasContext(2)) {
    Comparable com=new net.aufdemrand.denizen.scripts.commands.core.Comparable();
    com.setComparable(element);
    com.setComparedto(attribute.getContext(2));
    String operator;
    if (attribute.getContext(1).startsWith(""String_Node_Str"")) {
      operator=attribute.getContext(1).substring(1);
      com.setNegativeLogic();
    }
 else     operator=attribute.getContext(1);
    com.setOperator(Comparable.Operator.valueOf(operator.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")));
    return new Element(com.determineOutcome()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(Boolean.valueOf(element).toString()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Double.valueOf(element)).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return Duration.valueOf(element).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return dEntity.valueOf(element).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   try {
    return new Element((int)Math.ceil(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   try {
    return new Element((int)Math.floor(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Math.round(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return dItem.valueOf(element).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return dList.valueOf(element).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return dLocation.valueOf(element).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    try {
      DecimalFormat d=new DecimalFormat(""String_Node_Str"");
      return new Element(d.format(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
    }
 catch (    NumberFormatException e) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return dNPC.valueOf(element).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return dPlayer.valueOf(element).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return dScript.valueOf(element).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    String contains=attribute.getContext(1);
    if (contains.toLowerCase().startsWith(""String_Node_Str"")) {
      if (Pattern.compile(contains.substring((""String_Node_Str"").length()),Pattern.CASE_INSENSITIVE).matcher(element).matches())       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
 else     if (element.toLowerCase().contains(contains.toLowerCase()))     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.endsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.getLastColors(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(element.length()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.startsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(element.indexOf(delimiter) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(0,element.indexOf(delimiter))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String replace=attribute.getContext(1);
    String replacement=""String_Node_Str"";
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"")) {
      if (attribute.hasContext(1)) {
        replacement=attribute.getContext(1);
        if (replacement == null)         replacement=""String_Node_Str"";
        attribute.fulfill(1);
      }
    }
    return new Element(element.replace(replace,replacement)).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.startsWith(""String_Node_Str"",2)) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    Integer limit=(attribute.hasContext(2) ? attribute.getIntContext(2) : 1);
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1],limit))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string,limit))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1]))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.stripColor(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(element.trim()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    int beginning_index=Integer.valueOf(attribute.getContext(1).split(""String_Node_Str"")[0]) - 1;
    int ending_index;
    if (attribute.getContext(1).split(""String_Node_Str"").length > 1)     ending_index=Integer.valueOf(attribute.getContext(1).split(""String_Node_Str"")[1]) - 1;
 else     ending_index=element.length();
    if (beginning_index < 0)     beginning_index=0;
    if (ending_index > element.length())     ending_index=element.length();
    return new Element(element.substring(beginning_index,ending_index)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(Math.abs(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(asDouble() + aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(asDouble() / aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(asDouble() % aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(asDouble() * aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(Math.sqrt(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(asDouble() - aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.attributes.size() > 0) {
    dB.echoDebug(attribute.getScriptEntry(),""String_Node_Str"" + attribute.attributes.toString() + ""String_Node_Str""+ ""String_Node_Str""+ attribute.getOrigin()+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
 else {
    dB.echoDebug(attribute.getScriptEntry(),""String_Node_Str"" + attribute.getOrigin() + ""String_Node_Str""+ element.replace((char)0x01,'<').replace((char)0x02,'>').replace(dList.internal_escape,""String_Node_Str"")+ ""String_Node_Str"");
    return element;
  }
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1) && (attribute.startsWith(""String_Node_Str"",2) || attribute.startsWith(""String_Node_Str"",2))&& attribute.hasContext(2)) {
    Comparable com=new net.aufdemrand.denizen.scripts.commands.core.Comparable();
    com.setComparable(element);
    com.setComparedto(attribute.getContext(2));
    String operator;
    if (attribute.getContext(1).startsWith(""String_Node_Str"")) {
      operator=attribute.getContext(1).substring(1);
      com.setNegativeLogic();
    }
 else     operator=attribute.getContext(1);
    com.setOperator(Comparable.Operator.valueOf(operator.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")));
    return new Element(com.determineOutcome()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(Boolean.valueOf(element).toString()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Double.valueOf(element)).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return Duration.valueOf(element).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return dEntity.valueOf(element).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   try {
    return new Element((int)Math.ceil(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   try {
    return new Element((int)Math.floor(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   try {
    return new Element(Math.round(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
  }
 catch (  NumberFormatException e) {
    dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
    return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return dItem.valueOf(element).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return dList.valueOf(element).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return dLocation.valueOf(element).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    try {
      DecimalFormat d=new DecimalFormat(""String_Node_Str"");
      return new Element(d.format(Double.valueOf(element))).getAttribute(attribute.fulfill(1));
    }
 catch (    NumberFormatException e) {
      dB.echoError(""String_Node_Str"" + element + ""String_Node_Str"");
      return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return dNPC.valueOf(element).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return dPlayer.valueOf(element).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return dScript.valueOf(element).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    String contains=attribute.getContext(1);
    if (contains.toLowerCase().startsWith(""String_Node_Str"")) {
      if (Pattern.compile(contains.substring((""String_Node_Str"").length()),Pattern.CASE_INSENSITIVE).matcher(element).matches())       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
    }
 else     if (element.toLowerCase().contains(contains.toLowerCase()))     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.endsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.getLastColors(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(element.length()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(element.startsWith(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(element.indexOf(delimiter) + delimiter.length())).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String delimiter=attribute.getContext(1);
    if (element.contains(delimiter))     return new Element(element.substring(0,element.indexOf(delimiter))).getAttribute(attribute.fulfill(1));
 else     return new Element(element).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    String replace=attribute.getContext(1);
    String replacement=""String_Node_Str"";
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"")) {
      if (attribute.hasContext(1)) {
        replacement=attribute.getContext(1);
        if (replacement == null)         replacement=""String_Node_Str"";
        attribute.fulfill(1);
      }
    }
    return new Element(element.replace(replace,replacement)).getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.startsWith(""String_Node_Str"",2)) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    Integer limit=(attribute.hasContext(2) ? attribute.getIntContext(2) : 1);
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1],limit))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string,limit))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String split_string=(attribute.hasContext(1) ? attribute.getContext(1) : ""String_Node_Str"");
    if (split_string.toLowerCase().startsWith(""String_Node_Str""))     return new dList(Arrays.asList(element.split(split_string.split(""String_Node_Str"",2)[1]))).getAttribute(attribute.fulfill(1));
 else     return new dList(Arrays.asList(StringUtils.split(element,split_string))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.stripColor(element)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(element.trim()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    int beginning_index=Integer.valueOf(attribute.getContext(1).split(""String_Node_Str"")[0]) - 1;
    int ending_index;
    if (attribute.getContext(1).split(""String_Node_Str"").length > 1)     ending_index=Integer.valueOf(attribute.getContext(1).split(""String_Node_Str"")[1]);
 else     ending_index=element.length();
    if (beginning_index < 0)     beginning_index=0;
    if (beginning_index > element.length())     beginning_index=element.length();
    if (ending_index > element.length())     ending_index=element.length();
    if (ending_index < beginning_index)     ending_index=beginning_index;
    return new Element(element.substring(beginning_index,ending_index)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(Math.abs(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(asDouble() + aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(asDouble() / aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(asDouble() % aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(asDouble() * aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(Math.sqrt(asDouble())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") && attribute.hasContext(1)) {
    return new Element(asDouble() - aH.getDoubleFrom(attribute.getContext(1))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.attributes.size() > 0) {
    dB.echoDebug(attribute.getScriptEntry(),""String_Node_Str"" + attribute.attributes.toString() + ""String_Node_Str""+ ""String_Node_Str""+ attribute.getOrigin()+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
 else {
    dB.echoDebug(attribute.getScriptEntry(),""String_Node_Str"" + attribute.getOrigin() + ""String_Node_Str""+ element.replace((char)0x01,'<').replace((char)0x02,'>').replace(dList.internal_escape,""String_Node_Str"")+ ""String_Node_Str"");
    return element;
  }
}",0.9924061810154524
10348,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (entity == null) {
    dB.echoError(""String_Node_Str"");
    return Element.NULL.getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE.toString()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getObjectType()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (CustomNBT.hasCustomNBT(getLivingEntity(),""String_Node_Str""))     return new dScript(CustomNBT.getCustomNBT(getLivingEntity(),""String_Node_Str"")).getAttribute(attribute.fulfill(1));
 else     return new Element(entity.getType().name()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getCustomName() == null)     return ""String_Node_Str"";
    return new Element(getLivingEntity().getCustomName()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getEntityId()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isNPC())     return new Element(getNPC().getName()).getAttribute(attribute.fulfill(1));
    if (entity instanceof Player)     return new Element(((Player)entity).getName()).getAttribute(attribute.fulfill(1));
    return new Element(entity.getType().getName()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getUUID().toString()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getBoots() != null) {
      return new dItem(getLivingEntity().getEquipment().getBoots()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getChestplate() != null) {
      return new dItem(getLivingEntity().getEquipment().getChestplate()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getHelmet() != null) {
      return new dItem(getLivingEntity().getEquipment().getHelmet()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getLeggings() != null) {
      return new dItem(getLivingEntity().getEquipment().getLeggings()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"")) {
    return getEquipment().getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new dItem(getLivingEntity().getEquipment().getItemInHand()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && dEntity.matches(attribute.getContext(1))) {
      dEntity toEntity=dEntity.valueOf(attribute.getContext(1));
      return new Element(getLivingEntity().hasLineOfSight(toEntity.getBukkitEntity())).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getEyeLocation()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity())     return new Element(getLivingEntity().getEyeHeight()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    int range=attribute.getIntContext(2);
    if (range < 1)     range=50;
    return new dLocation(getLivingEntity().getTargetBlock(null,range).getLocation()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(entity.getLocation().add(0,-1,0)).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dLocation(entity.getLocation()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dWorld(entity.getWorld()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getCanPickupItems()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getFallDistance()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(entity.getFireTicks() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity() && getLivingEntity().isLeashed()) {
      return new dEntity(getLivingEntity().getLeashHolder()).getAttribute(attribute.fulfill(1));
    }
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (entity instanceof Tameable && ((Tameable)entity).isTamed())     return new dPlayer((Player)((Tameable)entity).getOwner()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!entity.isEmpty())     return new dEntity(entity.getPassenger()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (isProjectile() && hasShooter())     return getShooter().getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (entity.isInsideVehicle())     return new dEntity(entity.getVehicle()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    Boolean returnElement=false;
    if (attribute.hasContext(1))     for (    org.bukkit.potion.PotionEffect effect : getLivingEntity().getActivePotionEffects())     if (effect.getType().equals(PotionEffectType.getByName(attribute.getContext(1))))     returnElement=true;
 else     if (!getLivingEntity().getActivePotionEffects().isEmpty())     returnElement=true;
    return new Element(returnElement).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHealth=getLivingEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHealth=attribute.getIntContext(2);
    if ((float)getLivingEntity().getHealth() / maxHealth < .10)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < .40)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < .75)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < 1)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getMaxHealth()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHealth=getLivingEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHealth=attribute.getIntContext(2);
    return new Element((getLivingEntity().getHealth() / maxHealth) * 100).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getHealth()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.isEmpty()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.isInsideVehicle()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity())     return new Element(getLivingEntity().isLeashed()).getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.isOnGround()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity())     return new Element(!getLivingEntity().getRemoveWhenFarAway()).getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isSpawned()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (entity instanceof Tameable)     return new Element(((Tameable)entity).isTamed()).getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dPlayer(getLivingEntity().getKiller()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getLastDamage()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getLastDamageCause().getCause().name()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getLivingEntity().getNoDamageTicks()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(entity.getTicksLived() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(entity_type.name()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isLivingEntity()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isPlayer() && !isNPC())     return Element.TRUE.getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isNPC()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isPlayer()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isProjectile()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity instanceof Tameable).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(""String_Node_Str"" + getEntityType().name().toLowerCase() + '['+ PropertyParser.getPropertiesString(this)+ ']').getAttribute(attribute.fulfill(1));
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new Element(identify()).getAttribute(attribute);
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (entity == null) {
    dB.echoError(""String_Node_Str"");
    return Element.NULL.getAttribute(attribute);
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE.toString()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getObjectType()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (CustomNBT.hasCustomNBT(getLivingEntity(),""String_Node_Str""))     return new dScript(CustomNBT.getCustomNBT(getLivingEntity(),""String_Node_Str"")).getAttribute(attribute.fulfill(1));
 else     return new Element(entity.getType().name()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getCustomName() == null)     return ""String_Node_Str"";
    return new Element(getLivingEntity().getCustomName()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getEntityId()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isNPC())     return new Element(getNPC().getName()).getAttribute(attribute.fulfill(1));
    if (entity instanceof Player)     return new Element(((Player)entity).getName()).getAttribute(attribute.fulfill(1));
    return new Element(entity.getType().getName()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getUUID().toString()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getBoots() != null) {
      return new dItem(getLivingEntity().getEquipment().getBoots()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getChestplate() != null) {
      return new dItem(getLivingEntity().getEquipment().getChestplate()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getHelmet() != null) {
      return new dItem(getLivingEntity().getEquipment().getHelmet()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getEquipment().getLeggings() != null) {
      return new dItem(getLivingEntity().getEquipment().getLeggings()).getAttribute(attribute.fulfill(2));
    }
  }
 else   if (attribute.startsWith(""String_Node_Str"")) {
    return getEquipment().getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new dItem(getLivingEntity().getEquipment().getItemInHand()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && dEntity.matches(attribute.getContext(1))) {
      dEntity toEntity=dEntity.valueOf(attribute.getContext(1));
      return new Element(getLivingEntity().hasLineOfSight(toEntity.getBukkitEntity())).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getEyeLocation()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity())     return new Element(getLivingEntity().getEyeHeight()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    int range=attribute.getIntContext(2);
    if (range < 1)     range=50;
    return new dLocation(getLivingEntity().getTargetBlock(null,range).getLocation().clone()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(entity.getLocation().clone().add(0,-1,0)).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dLocation(entity.getLocation()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dWorld(entity.getWorld()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getCanPickupItems()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getFallDistance()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(entity.getFireTicks() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity() && getLivingEntity().isLeashed()) {
      return new dEntity(getLivingEntity().getLeashHolder()).getAttribute(attribute.fulfill(1));
    }
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (entity instanceof Tameable && ((Tameable)entity).isTamed())     return new dPlayer((Player)((Tameable)entity).getOwner()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!entity.isEmpty())     return new dEntity(entity.getPassenger()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    if (isProjectile() && hasShooter())     return getShooter().getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (entity.isInsideVehicle())     return new dEntity(entity.getVehicle()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    Boolean returnElement=false;
    if (attribute.hasContext(1))     for (    org.bukkit.potion.PotionEffect effect : getLivingEntity().getActivePotionEffects())     if (effect.getType().equals(PotionEffectType.getByName(attribute.getContext(1))))     returnElement=true;
 else     if (!getLivingEntity().getActivePotionEffects().isEmpty())     returnElement=true;
    return new Element(returnElement).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHealth=getLivingEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHealth=attribute.getIntContext(2);
    if ((float)getLivingEntity().getHealth() / maxHealth < .10)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < .40)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < .75)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < 1)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getMaxHealth()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHealth=getLivingEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHealth=attribute.getIntContext(2);
    return new Element((getLivingEntity().getHealth() / maxHealth) * 100).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getHealth()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.isEmpty()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.isInsideVehicle()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity())     return new Element(getLivingEntity().isLeashed()).getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.isOnGround()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isLivingEntity())     return new Element(!getLivingEntity().getRemoveWhenFarAway()).getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isSpawned()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (entity instanceof Tameable)     return new Element(((Tameable)entity).isTamed()).getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dPlayer(getLivingEntity().getKiller()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getLastDamage()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getLastDamageCause().getCause().name()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getLivingEntity().getNoDamageTicks()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(entity.getTicksLived() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(entity_type.name()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isLivingEntity()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!isPlayer() && !isNPC())     return Element.TRUE.getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isNPC()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isPlayer()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(isProjectile()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity instanceof Tameable).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(""String_Node_Str"" + getEntityType().name().toLowerCase() + '['+ PropertyParser.getPropertiesString(this)+ ']').getAttribute(attribute.fulfill(1));
  for (  Property property : PropertyParser.getProperties(this)) {
    String returned=property.getAttribute(attribute);
    if (returned != null)     return returned;
  }
  return new Element(identify()).getAttribute(attribute);
}",0.9993255206137762
10349,"@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Boolean player=(Boolean)scriptEntry.getObject(""String_Node_Str"");
  ChatColor color=(ChatColor)scriptEntry.getObject(""String_Node_Str"");
  String text=(String)scriptEntry.getObject(""String_Node_Str"");
  if (text != null) {
    if (text.equalsIgnoreCase(""String_Node_Str"")) {
      scriptEntry.getNPC().getEntity().setCustomNameVisible(false);
      dB.echoDebug(scriptEntry,""String_Node_Str"");
    }
 else {
      scriptEntry.getNPC().getEntity().setCustomNameVisible(true);
      scriptEntry.getNPC().getEntity().setCustomName(text);
      dB.echoDebug(scriptEntry,text);
    }
    if (scriptEntry.getNPC().getEntity() instanceof Player)     ((Player)scriptEntry.getNPC().getEntity()).setDisplayName(text);
  }
  if (color != null) {
    if (!scriptEntry.getNPC().getCitizen().hasTrait(NameplateTrait.class))     scriptEntry.getNPC().getCitizen().addTrait(NameplateTrait.class);
    NameplateTrait trait=scriptEntry.getNPC().getCitizen().getTrait(NameplateTrait.class);
    if (player)     trait.setColor(color,scriptEntry.getPlayer().getName());
 else     trait.setColor(color);
  }
}","@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Boolean player=(Boolean)scriptEntry.getObject(""String_Node_Str"");
  ChatColor color=(ChatColor)scriptEntry.getObject(""String_Node_Str"");
  String text=(String)scriptEntry.getObject(""String_Node_Str"");
  if (text != null) {
    if (text.equalsIgnoreCase(""String_Node_Str"")) {
      scriptEntry.getNPC().getLivingEntity().setCustomNameVisible(false);
      dB.echoDebug(scriptEntry,""String_Node_Str"");
    }
 else {
      scriptEntry.getNPC().getLivingEntity().setCustomNameVisible(true);
      scriptEntry.getNPC().getLivingEntity().setCustomName(text);
      dB.echoDebug(scriptEntry,text);
    }
    if (scriptEntry.getNPC().getEntity() instanceof Player)     ((Player)scriptEntry.getNPC().getEntity()).setDisplayName(text);
  }
  if (color != null) {
    if (!scriptEntry.getNPC().getCitizen().hasTrait(NameplateTrait.class))     scriptEntry.getNPC().getCitizen().addTrait(NameplateTrait.class);
    NameplateTrait trait=scriptEntry.getNPC().getCitizen().getTrait(NameplateTrait.class);
    if (player)     trait.setColor(color,scriptEntry.getPlayer().getName());
 else     trait.setColor(color);
  }
}",0.9924178601516428
10350,"@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  dList talkers=(dList)scriptEntry.getdObject(""String_Node_Str"");
  dObject targets=scriptEntry.getdObject(""String_Node_Str"");
  Element message=scriptEntry.getElement(""String_Node_Str"");
  dB.report(scriptEntry,getName(),talkers.debug() + targets.debug() + message.debug());
  SpeechContext context=new SpeechContext(message.asString());
  if (targets != Element.FALSE) {
    if (targets instanceof dPlayer) {
      dPlayer player=(dPlayer)targets;
      if (player.isOnline())       context.addRecipient(player.getPlayerEntity());
    }
 else {
      dList target_list=(dList)targets;
      for (      dObject obj : target_list.filter(dEntity.class)) {
        dEntity ent=(dEntity)obj;
        if (ent.isLivingEntity())         context.addRecipient(ent.getLivingEntity());
      }
    }
  }
  for (  String talker : talkers) {
    if (dNPC.matches(talker)) {
      dNPC npc=dNPC.valueOf(talker);
      context.setTalker(npc.getEntity());
      npc.getCitizen().getDefaultSpeechController().speak(context,""String_Node_Str"");
    }
 else     if (dPlayer.matches(talker)) {
    }
  }
}","@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  dList talkers=(dList)scriptEntry.getdObject(""String_Node_Str"");
  dObject targets=scriptEntry.getdObject(""String_Node_Str"");
  Element message=scriptEntry.getElement(""String_Node_Str"");
  dB.report(scriptEntry,getName(),talkers.debug() + targets.debug() + message.debug());
  SpeechContext context=new SpeechContext(message.asString());
  if (!targets.equals(Element.FALSE)) {
    if (targets instanceof dPlayer) {
      dPlayer player=(dPlayer)targets;
      if (player.isOnline())       context.addRecipient(player.getPlayerEntity());
    }
 else {
      dList target_list=(dList)targets;
      for (      dObject obj : target_list.filter(dEntity.class)) {
        dEntity ent=(dEntity)obj;
        if (ent.isLivingEntity())         context.addRecipient(ent.getLivingEntity());
      }
    }
  }
  for (  String talker : talkers) {
    if (dNPC.matches(talker)) {
      dNPC npc=dNPC.valueOf(talker);
      context.setTalker(npc.getEntity());
      npc.getCitizen().getDefaultSpeechController().speak(context,""String_Node_Str"");
    }
 else     if (dPlayer.matches(talker)) {
    }
  }
}",0.9889643463497452
10351,"public void revolve(ScriptQueue scriptQueue){
  if (scriptQueue.getLastEntryExecuted() != null && scriptQueue.getLastEntryExecuted().shouldWaitFor())   if (!scriptQueue.getLastEntryExecuted().isDone())   return;
  ScriptEntry scriptEntry=scriptQueue.getNext();
  while (scriptEntry != null) {
    scriptEntry.setSendingQueue(scriptQueue);
    try {
      getScriptExecuter().execute(scriptEntry);
    }
 catch (    Throwable e) {
      dB.echoError(""String_Node_Str"");
      if (!dB.showStackTraces)       dB.echoError(""String_Node_Str"");
 else       e.printStackTrace();
    }
    scriptQueue.setLastEntryExecuted(scriptEntry);
    if (scriptQueue instanceof Delayable) {
      if (((Delayable)scriptQueue).isDelayed())       break;
    }
    if (scriptEntry.isInstant()) {
      scriptEntry=scriptQueue.getNext();
    }
 else     break;
  }
}","public void revolve(ScriptQueue scriptQueue){
  if (scriptQueue.getLastEntryExecuted() != null && scriptQueue.getLastEntryExecuted().shouldWaitFor())   return;
  ScriptEntry scriptEntry=scriptQueue.getNext();
  while (scriptEntry != null) {
    scriptEntry.setSendingQueue(scriptQueue);
    try {
      getScriptExecuter().execute(scriptEntry);
    }
 catch (    Throwable e) {
      dB.echoError(""String_Node_Str"");
      if (!dB.showStackTraces)       dB.echoError(""String_Node_Str"");
 else       e.printStackTrace();
    }
    scriptQueue.setLastEntryExecuted(scriptEntry);
    if (scriptQueue instanceof Delayable) {
      if (((Delayable)scriptQueue).isDelayed())       break;
    }
    if (scriptEntry.isInstant()) {
      scriptEntry=scriptQueue.getNext();
    }
 else     break;
  }
}",0.9682151589242054
10352,"public boolean startsWith(String string,int attribute){
  string=string.toLowerCase();
  if (attributes.isEmpty())   return false;
  if (attributes.size() < attribute)   return false;
  return raw_tag.split(""String_Node_Str"",attribute)[attribute - 1].toLowerCase().startsWith(string);
}","public boolean startsWith(String string,int attribute){
  if (attributes.isEmpty())   return false;
  if (attributes.size() < attribute)   return false;
  return getAttribute(attribute).startsWith(string);
}",0.7464503042596349
10353,"/** 
 * Checks if c is in between a and b.
 * @param a
 * @param b
 * @param c
 * @return  true if c is in between.
 */
public static boolean isBetween(double a,double b,double c){
  return b > a ? c > a && c < b : c > b && c < a;
}","/** 
 * Checks if c is in between a and b, or equal to a or b.
 * @param a first number
 * @param b second number
 * @param c number to check if between
 * @return  true if c is in between.
 */
public static boolean isBetween(double a,double b,double c){
  return a == c || b == c || (b > a ? c > a && c < b : c > b && c < a);
}",0.8285714285714286
10354,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(final ScriptEntry scriptEntry) throws CommandExecutionException {
  List<dEntity> entities=(List<dEntity>)scriptEntry.getObject(""String_Node_Str"");
  AgeType ageType=(AgeType)scriptEntry.getObject(""String_Node_Str"");
  int age=scriptEntry.getElement(""String_Node_Str"").asInt();
  boolean lock=scriptEntry.hasObject(""String_Node_Str"");
  dB.report(getName(),(lock ? aH.debugObj(""String_Node_Str"",lock) : ""String_Node_Str"") + (ageType != null ? aH.debugObj(""String_Node_Str"",ageType) : aH.debugObj(""String_Node_Str"",age)) + aH.debugObj(""String_Node_Str"",entities.toString()));
  for (  dEntity entity : entities) {
    if (entity.isSpawned()) {
      if (entity.isAgeable()) {
        if (ageType != null) {
          if (ageType.equals(AgeType.BABY))           entity.getAgeable().setBaby(true);
 else           entity.getAgeable().setBaby(false);
        }
 else         entity.getAgeable().setAge(age);
        if (lock)         entity.getAgeable().setLock(true);
      }
 else       if (entity.getBukkitEntity() instanceof Zombie) {
        if (ageType.equals(ageType.BABY))         ((Zombie)entity.getBukkitEntity()).setBaby(true);
 else         ((Zombie)entity.getBukkitEntity()).setBaby(false);
      }
 else {
        dB.echoError(entity.identify() + ""String_Node_Str"");
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void execute(final ScriptEntry scriptEntry) throws CommandExecutionException {
  List<dEntity> entities=(List<dEntity>)scriptEntry.getObject(""String_Node_Str"");
  AgeType ageType=(AgeType)scriptEntry.getObject(""String_Node_Str"");
  int age=scriptEntry.getElement(""String_Node_Str"").asInt();
  boolean lock=scriptEntry.hasObject(""String_Node_Str"");
  dB.report(getName(),(lock ? aH.debugObj(""String_Node_Str"",lock) : ""String_Node_Str"") + (ageType != null ? aH.debugObj(""String_Node_Str"",ageType) : aH.debugObj(""String_Node_Str"",age)) + aH.debugObj(""String_Node_Str"",entities.toString()));
  for (  dEntity entity : entities) {
    if (entity.isSpawned()) {
      if (EntityAge.describes(entity)) {
        EntityAge property=EntityAge.getFrom(entity);
        if (ageType != null) {
          if (ageType.equals(AgeType.BABY))           property.setBaby(true);
 else           property.setBaby(false);
        }
 else         property.setAge(age);
        if (lock)         property.setLock(true);
      }
 else       dB.echoError(entity.identify() + ""String_Node_Str"");
    }
  }
}",0.66693354683747
10355,"@EventHandler public void listen(EntityDeathEvent event){
  if (event.getEntity().getKiller() != player.getPlayerEntity())   return;
  if (region != null)   if (!WorldGuardUtilities.inRegion(player.getLocation(),region))   return;
  if (cuboid != null)   if (!cuboid.isInsideCuboid(player.getLocation()))   return;
  if (type == KillType.ENTITY) {
    dEntity ent=new dEntity(event.getEntity());
    boolean count_it=false;
    for (    String target : targets) {
      if (dEntity.valueOf(target) != null)       if (ent.comparesTo(dEntity.valueOf(target)) == 1)       count_it=true;
    }
    if (count_it || targets.contains(""String_Node_Str"")) {
      kills_so_far++;
      dB.log(player.getName() + ""String_Node_Str"" + ent.identify()+ ""String_Node_Str""+ kills_so_far+ ""String_Node_Str""+ required+ ""String_Node_Str"");
      check();
    }
  }
 else   if (type == KillType.NPC) {
    if (!CitizensAPI.getNPCRegistry().isNPC(event.getEntity()))     return;
    dNPC npc=dNPC.mirrorCitizensNPC(CitizensAPI.getNPCRegistry().getNPC(event.getEntity()));
    boolean count_it=false;
    for (    String target : targets) {
      if (dNPC.valueOf(target) != null) {
        if (dNPC.valueOf(target).getId() == npc.getId())         count_it=true;
      }
 else       if (npc.getName().equalsIgnoreCase(target))       count_it=true;
    }
    if (count_it || targets.contains(""String_Node_Str"")) {
      kills_so_far++;
      dB.log(player.getName() + ""String_Node_Str"" + npc.toString()+ ""String_Node_Str""+ kills_so_far+ ""String_Node_Str""+ required+ ""String_Node_Str"");
      check();
    }
  }
 else   if (type == KillType.PLAYER) {
    if (event.getEntityType() != EntityType.PLAYER)     return;
    if (CitizensAPI.getNPCRegistry().isNPC(event.getEntity()))     return;
    dPlayer player=dPlayer.mirrorBukkitPlayer((Player)event.getEntity());
    boolean count_it=false;
    for (    String target : targets) {
      if (dPlayer.valueOf(target) != null)       if (dPlayer.valueOf(target).getName().equalsIgnoreCase(player.getName()))       count_it=true;
    }
    if (count_it || targets.contains(""String_Node_Str"")) {
      kills_so_far++;
      dB.log(player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str""+ kills_so_far+ ""String_Node_Str""+ required+ ""String_Node_Str"");
      check();
    }
  }
 else   if (type == KillType.GROUP) {
    if (event.getEntityType() == EntityType.PLAYER)     for (    String group : Depends.permissions.getPlayerGroups((Player)event.getEntity()))     if (targets.contains(group.toUpperCase())) {
      kills_so_far++;
      dB.log(player.getName() + ""String_Node_Str"" + ((Player)event.getEntity()).getName().toUpperCase()+ ""String_Node_Str""+ group+ ""String_Node_Str"");
      check();
      break;
    }
  }
}","@EventHandler public void listen(EntityDeathEvent event){
  if (event.getEntity().getKiller() != player.getPlayerEntity())   return;
  if (region != null)   if (!WorldGuardUtilities.inRegion(player.getLocation(),region))   return;
  if (cuboid != null)   if (!cuboid.isInsideCuboid(player.getLocation()))   return;
  if (type == KillType.ENTITY) {
    dEntity ent=new dEntity(event.getEntity());
    boolean count_it=false;
    for (    String target : targets) {
      if (dEntity.valueOf(target) != null)       if (ent.comparesTo(dEntity.valueOf(target)) == 1)       count_it=true;
    }
    if (count_it || targets.contains(""String_Node_Str"")) {
      kills_so_far++;
      dB.log(player.getName() + ""String_Node_Str"" + ent.identify()+ ""String_Node_Str""+ kills_so_far+ ""String_Node_Str""+ required+ ""String_Node_Str"");
      check();
    }
  }
 else   if (type == KillType.NPC) {
    if (!CitizensAPI.getNPCRegistry().isNPC(event.getEntity()))     return;
    dNPC npc=dNPC.mirrorCitizensNPC(CitizensAPI.getNPCRegistry().getNPC(event.getEntity()));
    boolean count_it=false;
    for (    String target : targets) {
      if (dNPC.valueOf(target) != null) {
        if (dNPC.valueOf(target).getId() == npc.getId())         count_it=true;
      }
      if (npc.getName().equalsIgnoreCase(target.toLowerCase().replace(""String_Node_Str"",""String_Node_Str"")))       count_it=true;
    }
    if (count_it || targets.contains(""String_Node_Str"")) {
      kills_so_far++;
      dB.log(player.getName() + ""String_Node_Str"" + npc.toString()+ ""String_Node_Str""+ kills_so_far+ ""String_Node_Str""+ required+ ""String_Node_Str"");
      check();
    }
  }
 else   if (type == KillType.PLAYER) {
    if (event.getEntityType() != EntityType.PLAYER)     return;
    if (CitizensAPI.getNPCRegistry().isNPC(event.getEntity()))     return;
    dPlayer player=dPlayer.mirrorBukkitPlayer((Player)event.getEntity());
    boolean count_it=false;
    for (    String target : targets) {
      if (dPlayer.valueOf(target) != null)       if (dPlayer.valueOf(target).getName().equalsIgnoreCase(player.getName()))       count_it=true;
    }
    if (count_it || targets.contains(""String_Node_Str"")) {
      kills_so_far++;
      dB.log(player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str""+ kills_so_far+ ""String_Node_Str""+ required+ ""String_Node_Str"");
      check();
    }
  }
 else   if (type == KillType.GROUP) {
    if (event.getEntityType() == EntityType.PLAYER)     for (    String group : Depends.permissions.getPlayerGroups((Player)event.getEntity()))     if (targets.contains(group.toUpperCase())) {
      kills_so_far++;
      dB.log(player.getName() + ""String_Node_Str"" + ((Player)event.getEntity()).getName().toUpperCase()+ ""String_Node_Str""+ group+ ""String_Node_Str"");
      check();
      break;
    }
  }
}",0.988332435828397
10356,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  boolean specified_target=false;
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"") && arg.matchesArgumentType(Duration.class)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asType(Duration.class));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"")) {
      specified_target=true;
      scriptEntry.addObject(""String_Node_Str"",scriptEntry.getNPC());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"")) {
      specified_target=true;
      scriptEntry.addObject(""String_Node_Str"",new Element(""String_Node_Str""));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"")) {
      specified_target=true;
      scriptEntry.addObject(""String_Node_Str"",scriptEntry.getPlayer());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(dNPC.class) && arg.startsWith(""String_Node_Str"")) {
      specified_target=true;
      scriptEntry.addObject(""String_Node_Str"",arg.asType(dNPC.class));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(dPlayer.class) && arg.startsWith(""String_Node_Str"")) {
      specified_target=true;
      scriptEntry.addObject(""String_Node_Str"",arg.asType(dPlayer.class));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.raw_value.split(""String_Node_Str"",3).length == 1) {
      scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.SET_BOOLEAN);
      scriptEntry.addObject(""String_Node_Str"",Element.TRUE);
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.raw_value.split(""String_Node_Str"",3).length == 2) {
      String[] flagArgs=arg.raw_value.split(""String_Node_Str"",2);
      scriptEntry.addObject(""String_Node_Str"",new Element(flagArgs[0].toUpperCase()));
      if (flagArgs[1].equals(""String_Node_Str"") || flagArgs[1].equals(""String_Node_Str"")) {
        scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.INCREASE);
        scriptEntry.addObject(""String_Node_Str"",new Element(1));
      }
 else       if (flagArgs[1].equals(""String_Node_Str"") || flagArgs[1].equals(""String_Node_Str"")) {
        scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.DECREASE);
        scriptEntry.addObject(""String_Node_Str"",new Element(1));
      }
 else       if (flagArgs[1].equals(""String_Node_Str"")) {
        scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.DELETE);
        scriptEntry.addObject(""String_Node_Str"",Element.FALSE);
      }
 else       if (flagArgs[1].equals(""String_Node_Str"")) {
        scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.REMOVE);
        scriptEntry.addObject(""String_Node_Str"",Element.FALSE);
      }
 else {
        scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.SET_VALUE);
        scriptEntry.addObject(""String_Node_Str"",new Element(flagArgs[1]));
      }
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.raw_value.split(""String_Node_Str"",3).length == 3) {
      String[] flagArgs=arg.raw_value.split(""String_Node_Str"",3);
      scriptEntry.addObject(""String_Node_Str"",new Element(flagArgs[0].toUpperCase()));
      scriptEntry.addObject(""String_Node_Str"",new Element(flagArgs[2]));
      if (flagArgs[1].startsWith(""String_Node_Str""))       scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.INSERT);
 else       if (flagArgs[1].startsWith(""String_Node_Str""))       scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.REMOVE);
 else       if (flagArgs[1].startsWith(""String_Node_Str""))       scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.SPLIT);
 else       if (flagArgs[1].startsWith(""String_Node_Str""))       scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.INCREASE);
 else       if (flagArgs[1].startsWith(""String_Node_Str""))       scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.DECREASE);
 else       if (flagArgs[1].startsWith(""String_Node_Str""))       scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.MULTIPLY);
 else       if (flagArgs[1].startsWith(""String_Node_Str""))       scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.DIVIDE);
    }
 else     dB.echoDebug(""String_Node_Str"" + arg.raw_value);
  }
  if (!specified_target)   scriptEntry.defaultObject(""String_Node_Str"",scriptEntry.getPlayer());
  if (!scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  boolean specified_target=false;
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"") && arg.matchesArgumentType(Duration.class)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asType(Duration.class));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"")) {
      specified_target=true;
      scriptEntry.addObject(""String_Node_Str"",scriptEntry.getNPC());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"")) {
      specified_target=true;
      scriptEntry.addObject(""String_Node_Str"",Element.SERVER);
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matches(""String_Node_Str"")) {
      specified_target=true;
      scriptEntry.addObject(""String_Node_Str"",scriptEntry.getPlayer());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.startsWith(""String_Node_Str"")) {
      if (dNPC.valueOf(arg.getValue()) == null)       throw new InvalidArgumentsException(""String_Node_Str"");
      specified_target=true;
      scriptEntry.addObject(""String_Node_Str"",arg.asType(dNPC.class));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.startsWith(""String_Node_Str"")) {
      if (dPlayer.valueOf(arg.getValue()) == null)       throw new InvalidArgumentsException(""String_Node_Str"");
      specified_target=true;
      scriptEntry.addObject(""String_Node_Str"",arg.asType(dPlayer.class));
    }
 else     if (arg.raw_value.split(""String_Node_Str"",3).length == 1) {
      scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.SET_BOOLEAN);
      scriptEntry.addObject(""String_Node_Str"",Element.TRUE);
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (arg.raw_value.split(""String_Node_Str"",3).length == 2) {
      String[] flagArgs=arg.raw_value.split(""String_Node_Str"",2);
      scriptEntry.addObject(""String_Node_Str"",new Element(flagArgs[0].toUpperCase()));
      if (flagArgs[1].equals(""String_Node_Str"") || flagArgs[1].equals(""String_Node_Str"")) {
        scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.INCREASE);
        scriptEntry.addObject(""String_Node_Str"",new Element(1));
      }
 else       if (flagArgs[1].equals(""String_Node_Str"") || flagArgs[1].equals(""String_Node_Str"")) {
        scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.DECREASE);
        scriptEntry.addObject(""String_Node_Str"",new Element(1));
      }
 else       if (flagArgs[1].equals(""String_Node_Str"")) {
        scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.DELETE);
        scriptEntry.addObject(""String_Node_Str"",Element.FALSE);
      }
 else       if (flagArgs[1].equals(""String_Node_Str"")) {
        scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.REMOVE);
        scriptEntry.addObject(""String_Node_Str"",Element.FALSE);
      }
 else {
        scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.SET_VALUE);
        scriptEntry.addObject(""String_Node_Str"",new Element(flagArgs[1]));
      }
    }
 else     if (arg.raw_value.split(""String_Node_Str"",3).length == 3) {
      String[] flagArgs=arg.raw_value.split(""String_Node_Str"",3);
      scriptEntry.addObject(""String_Node_Str"",new Element(flagArgs[0].toUpperCase()));
      scriptEntry.addObject(""String_Node_Str"",new Element(flagArgs[2]));
      if (flagArgs[1].startsWith(""String_Node_Str""))       scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.INSERT);
 else       if (flagArgs[1].startsWith(""String_Node_Str""))       scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.REMOVE);
 else       if (flagArgs[1].startsWith(""String_Node_Str""))       scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.SPLIT);
 else       if (flagArgs[1].startsWith(""String_Node_Str""))       scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.INCREASE);
 else       if (flagArgs[1].startsWith(""String_Node_Str""))       scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.DECREASE);
 else       if (flagArgs[1].startsWith(""String_Node_Str""))       scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.MULTIPLY);
 else       if (flagArgs[1].startsWith(""String_Node_Str""))       scriptEntry.addObject(""String_Node_Str"",FlagManager.Action.DIVIDE);
    }
 else     arg.reportUnhandled();
  }
  if (!specified_target)   scriptEntry.defaultObject(""String_Node_Str"",scriptEntry.getPlayer());
  if (!scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
}",0.7887353216252728
10357,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  List<Comparable> comparables=new ArrayList<Comparable>();
  comparables.add(new Comparable());
  boolean buildingComparables=true;
  TreeMap<Integer,ArrayList<String>> thenOutcome=new TreeMap<Integer,ArrayList<String>>();
  TreeMap<Integer,ArrayList<String>> elseOutcome=new TreeMap<Integer,ArrayList<String>>();
  boolean insideElse=false;
  boolean usedOperator=false;
  boolean newCommand=false;
  int bracketsEntered=0;
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (buildingComparables) {
      if (arg.startsWith(""String_Node_Str"")) {
        comparables.get(comparables.size() - 1).setNegativeLogic();
        if (arg.getValue().length() == 1)         continue;
        if (arg.startsWith(""String_Node_Str""))         arg.replaceValue(""String_Node_Str"");
 else         arg.replaceValue(arg.getValue().substring(1));
      }
      arg.replaceValue(arg.getValue().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      if (arg.matchesEnum(Comparable.Bridge.values())) {
        comparables.add(new Comparable());
        comparables.get(comparables.size() - 1).bridge=Comparable.Bridge.valueOf(arg.getValue().toUpperCase());
      }
 else       if (arg.matchesEnum(Comparable.Operator.values())) {
        comparables.get(comparables.size() - 1).operator=Comparable.Operator.valueOf(arg.getValue().toUpperCase());
        usedOperator=true;
      }
 else       if (comparables.get(comparables.size() - 1).comparable == null) {
        comparables.get(comparables.size() - 1).setComparable(arg.getValue());
      }
 else       if (!usedOperator && arg.matches(""String_Node_Str"")) {
        buildingComparables=false;
      }
 else       if (!usedOperator && denizen.getCommandRegistry().get(arg.getValue().replace(""String_Node_Str"",""String_Node_Str"")) != null) {
        buildingComparables=false;
      }
 else {
        comparables.get(comparables.size() - 1).setComparedto(arg.getValue());
        usedOperator=false;
      }
    }
    if (!buildingComparables) {
      if (arg.matches(""String_Node_Str"") && bracketsEntered < 2) {
        newCommand=true;
      }
 else       if (!insideElse) {
        if (arg.matches(""String_Node_Str"") && bracketsEntered == 0) {
          insideElse=true;
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered++;
          if (bracketsEntered > 1) {
            thenOutcome.get(thenOutcome.lastKey()).add(arg.raw_value);
          }
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered--;
          if (bracketsEntered > 0) {
            thenOutcome.get(thenOutcome.lastKey()).add(arg.raw_value);
          }
        }
 else         if (newCommand || thenOutcome.size() == 0) {
          thenOutcome.put(thenOutcome.size(),new ArrayList<String>());
          thenOutcome.get(thenOutcome.lastKey()).add(arg.raw_value);
          newCommand=false;
        }
 else {
          thenOutcome.get(thenOutcome.lastKey()).add(arg.raw_value);
        }
      }
 else       if (insideElse) {
        if (arg.matches(""String_Node_Str"")) {
          bracketsEntered++;
          if (bracketsEntered > 1) {
            elseOutcome.get(elseOutcome.lastKey()).add(arg.raw_value);
          }
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered--;
          if (bracketsEntered > 0) {
            elseOutcome.get(elseOutcome.lastKey()).add(arg.raw_value);
          }
        }
 else         if (newCommand || elseOutcome.size() == 0) {
          newCommand=false;
          elseOutcome.put(elseOutcome.size(),new ArrayList<String>());
          elseOutcome.get(elseOutcome.lastKey()).add(arg.raw_value);
        }
 else {
          elseOutcome.get(elseOutcome.lastKey()).add(arg.raw_value);
        }
      }
    }
  }
  scriptEntry.addObject(""String_Node_Str"",comparables).addObject(""String_Node_Str"",thenOutcome).addObject(""String_Node_Str"",elseOutcome);
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  List<Comparable> comparables=new ArrayList<Comparable>();
  comparables.add(new Comparable());
  boolean buildingComparables=true;
  TreeMap<Integer,ArrayList<String>> thenOutcome=new TreeMap<Integer,ArrayList<String>>();
  TreeMap<Integer,ArrayList<String>> elseOutcome=new TreeMap<Integer,ArrayList<String>>();
  boolean insideElse=false;
  boolean usedOperator=false;
  boolean newCommand=false;
  int bracketsEntered=0;
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (buildingComparables) {
      if (arg.startsWith(""String_Node_Str"")) {
        comparables.get(comparables.size() - 1).setNegativeLogic();
        if (arg.getValue().length() == 1)         continue;
        if (arg.startsWith(""String_Node_Str""))         arg.replaceValue(""String_Node_Str"");
 else         arg.replaceValue(arg.getValue().substring(1));
      }
      arg.replaceValue(arg.getValue().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      if (arg.matchesEnum(Comparable.Bridge.values())) {
        comparables.add(new Comparable());
        comparables.get(comparables.size() - 1).bridge=Comparable.Bridge.valueOf(arg.getValue().toUpperCase());
      }
 else       if (arg.matchesEnum(Comparable.Operator.values())) {
        comparables.get(comparables.size() - 1).operator=Comparable.Operator.valueOf(arg.getValue().toUpperCase());
        usedOperator=true;
      }
 else       if (comparables.get(comparables.size() - 1).comparable == null) {
        comparables.get(comparables.size() - 1).setComparable(arg.getValue());
      }
 else       if (!usedOperator && arg.matches(""String_Node_Str"")) {
        buildingComparables=false;
      }
 else       if (!usedOperator && denizen.getCommandRegistry().get(arg.getValue().replace(""String_Node_Str"",""String_Node_Str"")) != null) {
        buildingComparables=false;
      }
 else {
        comparables.get(comparables.size() - 1).setComparedto(arg.getValue());
        usedOperator=false;
      }
    }
    if (!buildingComparables) {
      if (arg.matches(""String_Node_Str"") && bracketsEntered < 2) {
        newCommand=true;
      }
 else       if (!insideElse) {
        if (arg.matches(""String_Node_Str"") && bracketsEntered == 0) {
          insideElse=true;
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered++;
          if (bracketsEntered > 1) {
            thenOutcome.get(thenOutcome.lastKey()).add(arg.raw_value);
          }
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered--;
          if (bracketsEntered > 0) {
            thenOutcome.get(thenOutcome.lastKey()).add(arg.raw_value);
          }
        }
 else         if (newCommand || thenOutcome.size() == 0) {
          thenOutcome.put(thenOutcome.size(),new ArrayList<String>());
          thenOutcome.get(thenOutcome.lastKey()).add(arg.raw_value);
          newCommand=false;
        }
 else {
          thenOutcome.get(thenOutcome.lastKey()).add(arg.raw_value);
        }
      }
 else       if (insideElse) {
        if (arg.matches(""String_Node_Str"")) {
          bracketsEntered++;
          if (bracketsEntered > 1) {
            elseOutcome.get(elseOutcome.lastKey()).add(arg.raw_value);
          }
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered--;
          if (bracketsEntered > 0) {
            elseOutcome.get(elseOutcome.lastKey()).add(arg.raw_value);
          }
        }
 else         if (newCommand || elseOutcome.size() == 0) {
          newCommand=false;
          elseOutcome.put(elseOutcome.size(),new ArrayList<String>());
          elseOutcome.get(elseOutcome.lastKey()).add(arg.raw_value);
          if (arg.matches(""String_Node_Str"")) {
            bracketsEntered++;
          }
        }
 else {
          elseOutcome.get(elseOutcome.lastKey()).add(arg.raw_value);
        }
      }
    }
  }
  scriptEntry.addObject(""String_Node_Str"",comparables).addObject(""String_Node_Str"",thenOutcome).addObject(""String_Node_Str"",elseOutcome);
}",0.9894882753840822
10358,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  List<Comparable> comparables=new ArrayList<Comparable>();
  comparables.add(new Comparable());
  boolean buildingComparables=true;
  TreeMap<Integer,ArrayList<String>> thenOutcome=new TreeMap<Integer,ArrayList<String>>();
  TreeMap<Integer,ArrayList<String>> elseOutcome=new TreeMap<Integer,ArrayList<String>>();
  boolean insideElse=false;
  boolean usedOperator=false;
  boolean newCommand=false;
  int bracketsEntered=0;
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (buildingComparables) {
      if (arg.startsWith(""String_Node_Str"")) {
        comparables.get(comparables.size() - 1).setNegativeLogic();
        if (arg.getValue().length() == 1)         continue;
        if (arg.startsWith(""String_Node_Str""))         arg.replaceValue(""String_Node_Str"");
 else         arg.replaceValue(arg.getValue().substring(1));
      }
      arg.replaceValue(arg.getValue().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      if (arg.matchesEnum(Comparable.Bridge.values())) {
        comparables.add(new Comparable());
        comparables.get(comparables.size() - 1).bridge=Comparable.Bridge.valueOf(arg.getValue().toUpperCase());
      }
 else       if (arg.matchesEnum(Comparable.Operator.values())) {
        comparables.get(comparables.size() - 1).operator=Comparable.Operator.valueOf(arg.getValue().toUpperCase());
        usedOperator=true;
      }
 else       if (comparables.get(comparables.size() - 1).comparable == null) {
        comparables.get(comparables.size() - 1).setComparable(arg.getValue());
      }
 else       if (!usedOperator && arg.matches(""String_Node_Str"")) {
        buildingComparables=false;
      }
 else       if (!usedOperator && denizen.getCommandRegistry().get(arg.getValue().replace(""String_Node_Str"",""String_Node_Str"")) != null) {
        buildingComparables=false;
      }
 else {
        comparables.get(comparables.size() - 1).setComparedto(arg.getValue());
        usedOperator=false;
      }
    }
    if (!buildingComparables) {
      if (arg.matches(""String_Node_Str"") && bracketsEntered < 2) {
        newCommand=true;
      }
 else       if (!insideElse) {
        if (arg.matches(""String_Node_Str"") && bracketsEntered == 0) {
          insideElse=true;
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered++;
          if (bracketsEntered > 1) {
            thenOutcome.get(thenOutcome.lastKey()).add(arg.raw_value);
          }
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered--;
          if (bracketsEntered > 0) {
            thenOutcome.get(thenOutcome.lastKey()).add(arg.raw_value);
          }
        }
 else         if (newCommand || thenOutcome.size() == 0) {
          thenOutcome.put(thenOutcome.size(),new ArrayList<String>());
          thenOutcome.get(thenOutcome.lastKey()).add(arg.raw_value);
          newCommand=false;
        }
 else {
          thenOutcome.get(thenOutcome.lastKey()).add(arg.raw_value);
        }
      }
 else       if (insideElse) {
        if (arg.matches(""String_Node_Str"")) {
          bracketsEntered++;
          if (bracketsEntered > 1) {
            elseOutcome.get(elseOutcome.lastKey()).add(arg.raw_value);
          }
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered--;
          if (bracketsEntered > 0) {
            elseOutcome.get(elseOutcome.lastKey()).add(arg.raw_value);
          }
        }
 else         if (newCommand || elseOutcome.size() == 0) {
          newCommand=false;
          elseOutcome.put(elseOutcome.size(),new ArrayList<String>());
          elseOutcome.get(elseOutcome.lastKey()).add(arg.raw_value);
          if (arg.matches(""String_Node_Str"")) {
            bracketsEntered++;
          }
        }
 else {
          elseOutcome.get(elseOutcome.lastKey()).add(arg.raw_value);
        }
      }
    }
  }
  scriptEntry.addObject(""String_Node_Str"",comparables).addObject(""String_Node_Str"",thenOutcome).addObject(""String_Node_Str"",elseOutcome);
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  List<Comparable> comparables=new ArrayList<Comparable>();
  comparables.add(new Comparable());
  boolean buildingComparables=true;
  TreeMap<Integer,ArrayList<String>> thenOutcome=new TreeMap<Integer,ArrayList<String>>();
  TreeMap<Integer,ArrayList<String>> elseOutcome=new TreeMap<Integer,ArrayList<String>>();
  boolean insideElse=false;
  boolean usedOperator=false;
  boolean newCommand=false;
  int bracketsEntered=0;
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (buildingComparables) {
      if (arg.startsWith(""String_Node_Str"")) {
        comparables.get(comparables.size() - 1).setNegativeLogic();
        if (arg.getValue().length() == 1)         continue;
        if (arg.startsWith(""String_Node_Str""))         arg.replaceValue(""String_Node_Str"");
 else         arg.replaceValue(arg.getValue().substring(1));
      }
      arg.replaceValue(arg.getValue().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      if (arg.matchesEnum(Comparable.Bridge.values())) {
        comparables.add(new Comparable());
        comparables.get(comparables.size() - 1).bridge=Comparable.Bridge.valueOf(arg.getValue().toUpperCase());
      }
 else       if (arg.matchesEnum(Comparable.Operator.values())) {
        comparables.get(comparables.size() - 1).operator=Comparable.Operator.valueOf(arg.getValue().toUpperCase());
        usedOperator=true;
      }
 else       if (comparables.get(comparables.size() - 1).comparable == null) {
        comparables.get(comparables.size() - 1).setComparable(arg.getValue());
      }
 else       if (!usedOperator && arg.matches(""String_Node_Str"")) {
        buildingComparables=false;
      }
 else       if (!usedOperator && denizen.getCommandRegistry().get(arg.getValue().replace(""String_Node_Str"",""String_Node_Str"")) != null) {
        buildingComparables=false;
      }
 else {
        comparables.get(comparables.size() - 1).setComparedto(arg.getValue());
        usedOperator=false;
      }
    }
    if (!buildingComparables) {
      if (arg.matches(""String_Node_Str"") && bracketsEntered < 2) {
        newCommand=true;
      }
 else       if (!insideElse) {
        if (arg.matches(""String_Node_Str"") && bracketsEntered == 0) {
          insideElse=true;
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered++;
          if (bracketsEntered > 1) {
            thenOutcome.get(thenOutcome.lastKey()).add(arg.raw_value);
          }
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered--;
          if (bracketsEntered > 0) {
            thenOutcome.get(thenOutcome.lastKey()).add(arg.raw_value);
          }
        }
 else         if (newCommand || thenOutcome.size() == 0) {
          thenOutcome.put(thenOutcome.size(),new ArrayList<String>());
          thenOutcome.get(thenOutcome.lastKey()).add(arg.raw_value);
          newCommand=false;
        }
 else {
          thenOutcome.get(thenOutcome.lastKey()).add(arg.raw_value);
        }
      }
 else       if (insideElse) {
        if (arg.matches(""String_Node_Str"")) {
          bracketsEntered++;
          if (bracketsEntered > 1) {
            elseOutcome.get(elseOutcome.lastKey()).add(arg.raw_value);
          }
        }
 else         if (arg.matches(""String_Node_Str"")) {
          bracketsEntered--;
          if (bracketsEntered > 0) {
            elseOutcome.get(elseOutcome.lastKey()).add(arg.raw_value);
          }
        }
 else         if (newCommand || elseOutcome.size() == 0) {
          newCommand=false;
          elseOutcome.put(elseOutcome.size(),new ArrayList<String>());
          elseOutcome.get(elseOutcome.lastKey()).add(arg.raw_value);
        }
 else {
          elseOutcome.get(elseOutcome.lastKey()).add(arg.raw_value);
        }
      }
    }
  }
  scriptEntry.addObject(""String_Node_Str"",comparables).addObject(""String_Node_Str"",thenOutcome).addObject(""String_Node_Str"",elseOutcome);
}",0.9379692734203536
10359,"@Override public String identify(){
  if (item == null)   return ""String_Node_Str"";
  if (item.getTypeId() != 0) {
    if (isUnique()) {
      return ""String_Node_Str"" + NotableManager.getSavedId(this);
    }
 else     if (isItemscript()) {
      return ""String_Node_Str"" + getLore(""String_Node_Str"");
    }
  }
  return ""String_Node_Str"" + item.getType().name().toLowerCase();
}","@Override public String identify(){
  if (item == null)   return ""String_Node_Str"";
  if (item.getTypeId() != 0) {
    if (isUnique()) {
      return ""String_Node_Str"" + NotableManager.getSavedId(this);
    }
 else     if (isItemscript()) {
      return ""String_Node_Str"" + getLore(""String_Node_Str"");
    }
  }
  return ""String_Node_Str"" + dMaterial.getMaterialFrom(item.getType(),item.getData().getData()).identify().replace(""String_Node_Str"",""String_Node_Str"");
}",0.8497041420118343
10360,"/** 
 * Gets a Item Object from a string form.
 * @param string  The string or dScript argument String
 * @param player  The dPlayer to be used for player contextswhere applicable.
 * @param npc     The dNPC to be used for NPC contextswhere applicable.
 * @return  an Item, or null if incorrectly formatted
 */
@ObjectFetcher(""String_Node_Str"") public static dItem valueOf(String string,dPlayer player,dNPC npc){
  if (string == null)   return null;
  Matcher m;
  dItem stack=null;
  final Pattern item_by_entity_id=Pattern.compile(""String_Node_Str"");
  m=item_by_entity_id.matcher(string);
  if (m.matches()) {
    for (    World world : Bukkit.getWorlds()) {
      for (      Entity entity : world.getEntitiesByClass(Item.class)) {
        if (entity.getEntityId() == Integer.valueOf(m.group(2))) {
          stack=new dItem(((Item)entity).getItemStack());
          if (m.group(3) != null) {
            stack.setAmount(Integer.valueOf(m.group(3)));
          }
          return stack;
        }
      }
    }
  }
  final Pattern item_by_saved=Pattern.compile(""String_Node_Str"");
  m=item_by_saved.matcher(string);
  if (m.matches() && NotableManager.isSaved(m.group(2)) && NotableManager.isType(m.group(2),dItem.class)) {
    stack=(dItem)NotableManager.getSavedObject(m.group(2));
    if (m.group(3) != null) {
      stack.setAmount(Integer.valueOf(m.group(3)));
    }
    return stack;
  }
  string=string.replace(""String_Node_Str"",""String_Node_Str"");
  m=ITEM_PATTERN.matcher(string);
  if (m.matches()) {
    try {
      if (ScriptRegistry.containsScript(m.group(1),ItemScriptContainer.class)) {
        stack=ScriptRegistry.getScriptContainerAs(m.group(1),ItemScriptContainer.class).getItemFrom(player,npc);
      }
 else       if (ScriptRegistry.containsScript(m.group(1),BookScriptContainer.class)) {
        stack=ScriptRegistry.getScriptContainerAs(m.group(1),BookScriptContainer.class).getBookFrom(player,npc);
      }
      if (stack != null) {
        if (m.group(3) != null) {
          stack.setAmount(Integer.valueOf(m.group(3)));
        }
        return stack;
      }
    }
 catch (    Exception e) {
    }
    try {
      String material=m.group(1).toUpperCase();
      if (aH.matchesInteger(material)) {
        stack=new dItem(Integer.valueOf(material));
      }
 else {
        stack=new dItem(Material.valueOf(material));
      }
      if (m.group(2) != null) {
        stack.setDurability(Short.valueOf(m.group(2)));
      }
      if (m.group(3) != null) {
        stack.setAmount(Integer.valueOf(m.group(3)));
      }
      return stack;
    }
 catch (    Exception e) {
      if (!string.equalsIgnoreCase(""String_Node_Str""))       dB.log(""String_Node_Str"" + string);
    }
  }
  if (!nope)   dB.log(""String_Node_Str"" + string);
  return null;
}","/** 
 * Gets a Item Object from a string form.
 * @param string  The string or dScript argument String
 * @param player  The dPlayer to be used for player contextswhere applicable.
 * @param npc     The dNPC to be used for NPC contextswhere applicable.
 * @return  an Item, or null if incorrectly formatted
 */
@ObjectFetcher(""String_Node_Str"") public static dItem valueOf(String string,dPlayer player,dNPC npc){
  if (string == null)   return null;
  Matcher m;
  dItem stack=null;
  final Pattern item_by_entity_id=Pattern.compile(""String_Node_Str"");
  m=item_by_entity_id.matcher(string);
  if (m.matches()) {
    for (    World world : Bukkit.getWorlds()) {
      for (      Entity entity : world.getEntitiesByClass(Item.class)) {
        if (entity.getEntityId() == Integer.valueOf(m.group(2))) {
          stack=new dItem(((Item)entity).getItemStack());
          if (m.group(3) != null) {
            stack.setAmount(Integer.valueOf(m.group(3)));
          }
          return stack;
        }
      }
    }
  }
  final Pattern item_by_saved=Pattern.compile(""String_Node_Str"");
  m=item_by_saved.matcher(string);
  if (m.matches() && NotableManager.isSaved(m.group(2)) && NotableManager.isType(m.group(2),dItem.class)) {
    stack=(dItem)NotableManager.getSavedObject(m.group(2));
    if (m.group(3) != null) {
      stack.setAmount(Integer.valueOf(m.group(3)));
    }
    return stack;
  }
  string=string.replace(""String_Node_Str"",""String_Node_Str"");
  m=ITEM_PATTERN.matcher(string);
  if (m.matches()) {
    try {
      if (ScriptRegistry.containsScript(m.group(1),ItemScriptContainer.class)) {
        stack=ScriptRegistry.getScriptContainerAs(m.group(1),ItemScriptContainer.class).getItemFrom(player,npc);
      }
 else       if (ScriptRegistry.containsScript(m.group(1),BookScriptContainer.class)) {
        stack=ScriptRegistry.getScriptContainerAs(m.group(1),BookScriptContainer.class).getBookFrom(player,npc);
      }
      if (stack != null) {
        if (m.group(3) != null) {
          stack.setAmount(Integer.valueOf(m.group(3)));
        }
        return stack;
      }
    }
 catch (    Exception e) {
    }
    try {
      String material=m.group(1).toUpperCase();
      if (aH.matchesInteger(material)) {
        stack=new dItem(Integer.valueOf(material));
      }
 else {
        stack=new dItem(dMaterial.valueOf(material).getMaterial());
      }
      if (m.group(2) != null) {
        stack.setDurability(Short.valueOf(m.group(2)));
      }
      if (m.group(3) != null) {
        stack.setAmount(Integer.valueOf(m.group(3)));
      }
      return stack;
    }
 catch (    Exception e) {
      if (!string.equalsIgnoreCase(""String_Node_Str""))       dB.log(""String_Node_Str"" + string);
    }
  }
  if (!nope)   dB.log(""String_Node_Str"" + string);
  return null;
}",0.9973045822102424
10361,"@EventHandler public void playerInteract(PlayerInteractEvent event){
  Map<String,dObject> context=new HashMap<String,dObject>();
  Action action=event.getAction();
  dItem item=null;
  dMaterial itemMaterial=null;
  List<String> events=new ArrayList<String>();
  String interaction;
  if (action == Action.LEFT_CLICK_AIR || action == Action.LEFT_CLICK_BLOCK)   interaction=""String_Node_Str"";
 else   if (action == Action.RIGHT_CLICK_AIR || action == Action.RIGHT_CLICK_BLOCK)   interaction=""String_Node_Str"";
 else   interaction=""String_Node_Str"";
  events.add(interaction);
  if (event.hasItem()) {
    item=new dItem(event.getItem());
    itemMaterial=item.getMaterial();
    context.put(""String_Node_Str"",item);
    events.add(interaction + ""String_Node_Str"");
    events.add(interaction + ""String_Node_Str"" + item.identify());
    events.add(interaction + ""String_Node_Str"" + itemMaterial.identify());
  }
  if (event.hasBlock()) {
    Block block=event.getClickedBlock();
    dMaterial blockMaterial=new dMaterial(block.getType());
    context.put(""String_Node_Str"",new dLocation(block.getLocation()));
    events.add(interaction + ""String_Node_Str"");
    events.add(interaction + ""String_Node_Str"" + blockMaterial.identify());
    if (event.hasItem()) {
      events.add(interaction + ""String_Node_Str"");
      events.add(interaction + ""String_Node_Str"" + item.identify());
      events.add(interaction + ""String_Node_Str"" + itemMaterial.identify());
      events.add(interaction + ""String_Node_Str"" + blockMaterial.identify()+ ""String_Node_Str"");
      events.add(interaction + ""String_Node_Str"" + blockMaterial.identify()+ ""String_Node_Str""+ item.identify());
      events.add(interaction + ""String_Node_Str"" + blockMaterial.identify()+ ""String_Node_Str""+ itemMaterial.identify());
    }
  }
  String determination=doEvents(events,null,event.getPlayer(),context);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
}","@EventHandler public void playerInteract(PlayerInteractEvent event){
  Map<String,dObject> context=new HashMap<String,dObject>();
  Action action=event.getAction();
  dItem item=null;
  dMaterial itemMaterial=null;
  List<String> events=new ArrayList<String>();
  String interaction;
  if (action == Action.LEFT_CLICK_AIR || action == Action.LEFT_CLICK_BLOCK)   interaction=""String_Node_Str"";
 else   if (action == Action.RIGHT_CLICK_AIR || action == Action.RIGHT_CLICK_BLOCK)   interaction=""String_Node_Str"";
 else   interaction=""String_Node_Str"";
  events.add(interaction);
  if (event.hasItem()) {
    item=new dItem(event.getItem());
    itemMaterial=item.getMaterial();
    context.put(""String_Node_Str"",item);
    events.add(interaction + ""String_Node_Str"");
    events.add(interaction + ""String_Node_Str"" + item.identify());
    events.add(interaction + ""String_Node_Str"" + itemMaterial.identify());
  }
  if (event.hasBlock()) {
    Block block=event.getClickedBlock();
    dMaterial blockMaterial=dMaterial.getMaterialFrom(block.getType(),block.getData());
    context.put(""String_Node_Str"",new dLocation(block.getLocation()));
    events.add(interaction + ""String_Node_Str"");
    events.add(interaction + ""String_Node_Str"" + blockMaterial.identify());
    if (event.hasItem()) {
      events.add(interaction + ""String_Node_Str"");
      events.add(interaction + ""String_Node_Str"" + item.identify());
      events.add(interaction + ""String_Node_Str"" + itemMaterial.identify());
      events.add(interaction + ""String_Node_Str"" + blockMaterial.identify()+ ""String_Node_Str"");
      events.add(interaction + ""String_Node_Str"" + blockMaterial.identify()+ ""String_Node_Str""+ item.identify());
      events.add(interaction + ""String_Node_Str"" + blockMaterial.identify()+ ""String_Node_Str""+ itemMaterial.identify());
    }
  }
  String determination=doEvents(events,null,event.getPlayer(),context);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
}",0.9909136799596164
10362,"/** 
 * Removes a value from the Flag's current values. If an index is specified, that specific value is removed. If no index is specified (or -1 is specified as the index), the first value that matches (values are checked as Double and String.equalsIgnoreCase) is removed. If a positive index is specified that does not exist, no removal is done.
 */
public void remove(Object obj,int index){
  checkExpired();
  if (index <= 0 && obj != null) {
    int x=0;
    for (    String val : value.values) {
      if (val.equalsIgnoreCase(String.valueOf(obj))) {
        value.values.remove(x);
        break;
      }
      try {
        if (Double.valueOf(val).equals(Double.valueOf((String)obj))) {
          value.values.remove(x);
          break;
        }
      }
 catch (      Exception e) {
      }
      x++;
    }
  }
 else   if (index < size())   value.values.remove(index - 1);
  save();
  rebuild();
}","/** 
 * Removes a value from the Flag's current values. If an index is specified, that specific value is removed. If no index is specified (or -1 is specified as the index), the first value that matches (values are checked as Double and String.equalsIgnoreCase) is removed. If a positive index is specified that does not exist, no removal is done.
 */
public void remove(Object obj,int index){
  checkExpired();
  if (index <= 0 && obj != null) {
    int x=0;
    for (    String val : value.values) {
      if (val.equalsIgnoreCase(String.valueOf(obj))) {
        value.values.remove(x);
        break;
      }
      try {
        if (Double.valueOf(val).equals(Double.valueOf((String)obj))) {
          value.values.remove(x);
          break;
        }
      }
 catch (      Exception e) {
      }
      x++;
    }
  }
 else   if (index <= size())   value.values.remove(index - 1);
  save();
  rebuild();
}",0.999449642267474
10363,"public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && dItem.matches(attribute.getContext(1))) {
      int qty=1;
      if (attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2) && aH.matchesInteger(attribute.getContext(2))) {
        qty=attribute.getIntContext(2);
      }
      return new Element(getInventory().containsAtLeast(dItem.valueOf(attribute.getContext(1)).getItemStack(),qty)).getAttribute(attribute.fulfill(qty == 1 ? 1 : 2));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dLocation(getLocation()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   if (attribute.hasContext(1) && dItem.matches(attribute.getContext(1)))   return new Element(count(dItem.valueOf(attribute.getContext(1)).getItemStack(),false)).getAttribute(attribute.fulfill(1));
 else   return new Element(count(null,false)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getSize()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   if (attribute.hasContext(1) && dItem.matches(attribute.getContext(1)))   return new Element(count(dItem.valueOf(attribute.getContext(1)).getItemStack(),true)).getAttribute(attribute.fulfill(1));
 else   return new Element(count(null,true)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getInventory().getType().name()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getInventory() instanceof PlayerInventory) {
      String identifier=null;
      if (CitizensAPI.getNPCRegistry().isNPC((LivingEntity)getInventory().getHolder())) {
        if (inventory.getHolder() instanceof Player)         identifier=""String_Node_Str"" + CitizensAPI.getNPCRegistry().getNPC((LivingEntity)getInventory().getHolder()).getId();
 else         return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
      }
 else       if (inventory.getHolder() instanceof Player)       identifier=""String_Node_Str"" + ((Player)getInventory().getHolder()).getName();
 else       if (inventory.getHolder() instanceof LivingEntity)       identifier=""String_Node_Str"" + ((Player)getInventory().getHolder()).getEntityId();
 else       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
      return new dInventory(InventoryType.CRAFTING,""String_Node_Str"",identifier).add(((PlayerInventory)getInventory()).getArmorContents()).getAttribute(attribute.fulfill(1));
    }
 else     if (getInventory() instanceof HorseInventory) {
      return new dInventory(InventoryType.CRAFTING,""String_Node_Str"",(getInventory().getHolder() != null ? ""String_Node_Str"" + String.valueOf(((LivingEntity)getInventory().getHolder()).getEntityId()) : getInventory().getName())).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dItem> items=new ArrayList<dItem>();
    for (    ItemStack item : getContents()) {
      if (item != null && item.getType() != Material.AIR)       items.add(new dItem(item));
    }
    return new dList(items).getAttribute(attribute.fulfill(1));
  }
  return new Element(identify()).getAttribute(attribute);
}","public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && dItem.matches(attribute.getContext(1))) {
      int qty=1;
      int attribs=1;
      if (attribute.getAttribute(2).startsWith(""String_Node_Str"") && attribute.hasContext(2) && aH.matchesInteger(attribute.getContext(2))) {
        qty=attribute.getIntContext(2);
        attribs=2;
      }
      return new Element(getInventory().containsAtLeast(dItem.valueOf(attribute.getContext(1)).getItemStack(),qty)).getAttribute(attribute.fulfill(attribs));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dLocation(getLocation()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   if (attribute.hasContext(1) && dItem.matches(attribute.getContext(1)))   return new Element(count(dItem.valueOf(attribute.getContext(1)).getItemStack(),false)).getAttribute(attribute.fulfill(1));
 else   return new Element(count(null,false)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getSize()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   if (attribute.hasContext(1) && dItem.matches(attribute.getContext(1)))   return new Element(count(dItem.valueOf(attribute.getContext(1)).getItemStack(),true)).getAttribute(attribute.fulfill(1));
 else   return new Element(count(null,true)).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getInventory().getType().name()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getInventory() instanceof PlayerInventory) {
      String identifier=null;
      if (CitizensAPI.getNPCRegistry().isNPC((LivingEntity)getInventory().getHolder())) {
        if (inventory.getHolder() instanceof Player)         identifier=""String_Node_Str"" + CitizensAPI.getNPCRegistry().getNPC((LivingEntity)getInventory().getHolder()).getId();
 else         return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
      }
 else       if (inventory.getHolder() instanceof Player)       identifier=""String_Node_Str"" + ((Player)getInventory().getHolder()).getName();
 else       if (inventory.getHolder() instanceof LivingEntity)       identifier=""String_Node_Str"" + ((Player)getInventory().getHolder()).getEntityId();
 else       return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
      return new dInventory(InventoryType.CRAFTING,""String_Node_Str"",identifier).add(((PlayerInventory)getInventory()).getArmorContents()).getAttribute(attribute.fulfill(1));
    }
 else     if (getInventory() instanceof HorseInventory) {
      return new dInventory(InventoryType.CRAFTING,""String_Node_Str"",(getInventory().getHolder() != null ? ""String_Node_Str"" + String.valueOf(((LivingEntity)getInventory().getHolder()).getEntityId()) : getInventory().getName())).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    ArrayList<dItem> items=new ArrayList<dItem>();
    for (    ItemStack item : getContents()) {
      if (item != null && item.getType() != Material.AIR)       items.add(new dItem(item));
    }
    return new dList(items).getAttribute(attribute.fulfill(1));
  }
  return new Element(identify()).getAttribute(attribute);
}",0.9907638176220496
10364,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getCitizen().hasTrait(NicknameTrait.class) ? getCitizen().getTrait(NicknameTrait.class).getNickname() : getName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.stripColor(getName())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    List<String> list=new ArrayList<String>();
    for (    Trait trait : getCitizen().getTraits())     list.add(trait.getName());
    return new dList(list).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1)) {
      Class<? extends Trait> trait=CitizensAPI.getTraitFactory().getTraitClass(attribute.getContext(1));
      if (trait != null)       return new Element(getCitizen().hasTrait(trait)).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    List<String> list=new ArrayList<String>();
    for (    Anchor anchor : getCitizen().getTrait(Anchors.class).getAnchors())     list.add(anchor.getName());
    return new dList(list).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return (new Element(getCitizen().getTrait(Anchors.class).getAnchors().size() > 0)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && getCitizen().getTrait(Anchors.class).getAnchor(attribute.getContext(1)) != null)     return new dLocation(getCitizen().getTrait(Anchors.class).getAnchor(attribute.getContext(1)).getLocation()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return ""String_Node_Str"";
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(!FlagManager.npcHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
    if (attribute.startsWith(""String_Node_Str"") && !FlagManager.npcHasFlag(this,flag_name))     return new Element(0).getAttribute(attribute.fulfill(1));
    if (FlagManager.npcHasFlag(this,flag_name))     return new dList(DenizenAPI.getCurrentInstance().flagManager().getNPCFlag(getId(),flag_name)).getAttribute(attribute);
 else     return ""String_Node_Str"";
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getId()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOwner()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dInventory(getEntity()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(isSpawned()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return (NPCTags.previousLocations.containsKey(getId()) ? NPCTags.previousLocations.get(getId()).getAttribute(attribute.fulfill(2)) : ""String_Node_Str"");
  if (attribute.startsWith(""String_Node_Str"")) {
    NPC citizen=getCitizen();
    if (!citizen.hasTrait(AssignmentTrait.class) || !citizen.getTrait(AssignmentTrait.class).hasAssignment()) {
      return ""String_Node_Str"";
    }
 else {
      return new Element(citizen.getTrait(AssignmentTrait.class).getAssignment().getName()).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().isNavigating()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().speed()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().range()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().attackStrategy().toString()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().speedModifier()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().baseSpeed()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().avoidWater()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return (getNavigator().getTargetAsLocation() != null ? new dLocation(getNavigator().getTargetAsLocation()).getAttribute(attribute.fulfill(2)) : ""String_Node_Str"");
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getEntityTarget().isAggressive()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getTargetType().toString()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return (getNavigator().getEntityTarget().getTarget() != null ? new dEntity(getNavigator().getEntityTarget().getTarget()).getAttribute(attribute.fulfill(2)) : ""String_Node_Str"");
  return (getEntity() != null ? new dEntity(getEntity()).getAttribute(attribute) : new Element(identify()).getAttribute(attribute));
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return ""String_Node_Str"";
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getCitizen().hasTrait(NicknameTrait.class) ? getCitizen().getTrait(NicknameTrait.class).getNickname() : getName()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(ChatColor.stripColor(getName())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    List<String> list=new ArrayList<String>();
    for (    Trait trait : getCitizen().getTraits())     list.add(trait.getName());
    return new dList(list).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1)) {
      Class<? extends Trait> trait=CitizensAPI.getTraitFactory().getTraitClass(attribute.getContext(1));
      if (trait != null)       return new Element(getCitizen().hasTrait(trait)).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str"")) {
    List<String> list=new ArrayList<String>();
    for (    Anchor anchor : getCitizen().getTrait(Anchors.class).getAnchors())     list.add(anchor.getName());
    return new dList(list).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return (new Element(getCitizen().getTrait(Anchors.class).getAnchors().size() > 0)).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && getCitizen().getTrait(Anchors.class).getAnchor(attribute.getContext(1)) != null)     return new dLocation(getCitizen().getTrait(Anchors.class).getAnchor(attribute.getContext(1)).getLocation()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    String flag_name;
    if (attribute.hasContext(1))     flag_name=attribute.getContext(1);
 else     return ""String_Node_Str"";
    attribute.fulfill(1);
    if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))     return new Element(!FlagManager.npcHasFlag(this,flag_name)).getAttribute(attribute.fulfill(1));
    if (attribute.startsWith(""String_Node_Str"") && !FlagManager.npcHasFlag(this,flag_name))     return new Element(0).getAttribute(attribute.fulfill(1));
    if (FlagManager.npcHasFlag(this,flag_name))     return new dList(DenizenAPI.getCurrentInstance().flagManager().getNPCFlag(getId(),flag_name)).getAttribute(attribute);
 else     return ""String_Node_Str"";
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getId()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getOwner()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dInventory(getEntity()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(isSpawned()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return (NPCTags.previousLocations.containsKey(getId()) ? NPCTags.previousLocations.get(getId()).getAttribute(attribute.fulfill(2)) : ""String_Node_Str"");
  if (attribute.startsWith(""String_Node_Str"")) {
    NPC citizen=getCitizen();
    if (!citizen.hasTrait(AssignmentTrait.class) || !citizen.getTrait(AssignmentTrait.class).hasAssignment()) {
      return ""String_Node_Str"";
    }
 else {
      return new Element(citizen.getTrait(AssignmentTrait.class).getAssignment().getName()).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().isNavigating()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().speed()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().range()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().attackStrategy().toString()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().speedModifier()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().baseSpeed()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getLocalParameters().avoidWater()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return (getNavigator().getTargetAsLocation() != null ? new dLocation(getNavigator().getTargetAsLocation()).getAttribute(attribute.fulfill(2)) : ""String_Node_Str"");
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getEntityTarget().isAggressive()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getNavigator().getTargetType().toString()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return (getNavigator().getEntityTarget().getTarget() != null ? new dEntity(getNavigator().getEntityTarget().getTarget()).getAttribute(attribute.fulfill(2)) : ""String_Node_Str"");
  return (getEntity() != null ? new dEntity(getCitizen()).getAttribute(attribute) : new Element(identify()).getAttribute(attribute));
}",0.990244339031594
10365,"@EventHandler public void playerInteractEntity(PlayerInteractEntityEvent event){
  String determination;
  dNPC npc=null;
  dItem item=new dItem(event.getPlayer().getItemInHand());
  dMaterial itemMaterial=item.getMaterial();
  dEntity entity=new dEntity(event.getRightClicked());
  String entityType=entity.getEntityType().name();
  Map<String,dObject> context=new HashMap<String,dObject>();
  context.put(""String_Node_Str"",new dLocation(event.getRightClicked().getLocation()));
  context.put(""String_Node_Str"",entity.getDenizenObject());
  if (entity.isNPC()) {
    npc=entity.getDenizenNPC();
    entityType=""String_Node_Str"";
  }
  List<String> events=new ArrayList<String>();
  events.add(""String_Node_Str"");
  events.add(""String_Node_Str"" + entityType);
  events.add(""String_Node_Str"" + item.identify());
  events.add(""String_Node_Str"" + entityType + ""String_Node_Str""+ item.identify());
  events.add(""String_Node_Str"" + itemMaterial.identify());
  events.add(""String_Node_Str"" + entityType + ""String_Node_Str""+ itemMaterial.identify());
  if (entity.getBukkitEntity() instanceof ItemFrame) {
    dItem itemFrame=new dItem(((ItemFrame)entity).getItem());
    dMaterial itemFrameMaterial=itemFrame.getMaterial();
    context.put(""String_Node_Str"",itemFrame);
    events.add(""String_Node_Str"" + entityType + ""String_Node_Str""+ itemFrame.identify());
    events.add(""String_Node_Str"" + entityType + ""String_Node_Str""+ itemFrameMaterial.identify());
  }
  determination=doEvents(events,npc,event.getPlayer(),context);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
}","@EventHandler public void playerInteractEntity(PlayerInteractEntityEvent event){
  String determination;
  dNPC npc=null;
  dItem item=new dItem(event.getPlayer().getItemInHand());
  dMaterial itemMaterial=item.getMaterial();
  dEntity entity=new dEntity(event.getRightClicked());
  String entityType=entity.getEntityType().name();
  Map<String,dObject> context=new HashMap<String,dObject>();
  context.put(""String_Node_Str"",new dLocation(event.getRightClicked().getLocation()));
  context.put(""String_Node_Str"",entity.getDenizenObject());
  if (entity.isNPC()) {
    npc=entity.getDenizenNPC();
    entityType=""String_Node_Str"";
  }
  List<String> events=new ArrayList<String>();
  events.add(""String_Node_Str"");
  events.add(""String_Node_Str"" + entityType);
  events.add(""String_Node_Str"" + item.identify());
  events.add(""String_Node_Str"" + entityType + ""String_Node_Str""+ item.identify());
  events.add(""String_Node_Str"" + itemMaterial.identify());
  events.add(""String_Node_Str"" + entityType + ""String_Node_Str""+ itemMaterial.identify());
  if (entity.getBukkitEntity() instanceof ItemFrame) {
    dItem itemFrame=new dItem(((ItemFrame)entity.getBukkitEntity()).getItem());
    dMaterial itemFrameMaterial=itemFrame.getMaterial();
    context.put(""String_Node_Str"",itemFrame);
    events.add(""String_Node_Str"" + entityType + ""String_Node_Str""+ itemFrame.identify());
    events.add(""String_Node_Str"" + entityType + ""String_Node_Str""+ itemFrameMaterial.identify());
  }
  determination=doEvents(events,npc,event.getPlayer(),context);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
}",0.9944547134935304
10366,"public boolean matchesArgumentList(Class<? extends dObject> dClass){
  dList list=new dList(this.getValue());
  return list.filter(dClass) != null;
}","public boolean matchesArgumentList(Class<? extends dObject> dClass){
  dList list=new dList(this.getValue().replace(""String_Node_Str"",""String_Node_Str""));
  return list.filter(dClass) != null;
}",0.8688046647230321
10367,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (arg.matchesPrefix(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
 else     if (arg.matchesPrefix(""String_Node_Str"") && arg.matchesArgumentType(dPlayer.class))     scriptEntry.setPlayer((dPlayer)arg.asType(dPlayer.class));
 else     if (arg.matchesPrefix(""String_Node_Str"") && arg.matchesArgumentType(dNPC.class))     scriptEntry.setNPC((dNPC)arg.asType(dNPC.class));
 else     if (arg.matchesPrefix(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.asType(dList.class));
 else     if (arg.matches(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",new Element(true));
 else     if (arg.matchesPrefix(""String_Node_Str"") && arg.matchesArgumentType(Duration.class))     scriptEntry.addObject(""String_Node_Str"",arg.asType(Duration.class));
 else     if (arg.matches(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",new Element(true));
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(dScript.class))     scriptEntry.addObject(""String_Node_Str"",arg.asType(dScript.class));
 else     if (!scriptEntry.hasObject(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
  }
  if (!scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!scriptEntry.hasObject(""String_Node_Str"") && scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (arg.matchesPrefix(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
 else     if (arg.matchesPrefix(""String_Node_Str"") && arg.matchesArgumentType(dPlayer.class))     scriptEntry.setPlayer((dPlayer)arg.asType(dPlayer.class));
 else     if (arg.matchesPrefix(""String_Node_Str"") && arg.matchesArgumentType(dNPC.class))     scriptEntry.setNPC((dNPC)arg.asType(dNPC.class));
 else     if (arg.matchesPrefix(""String_Node_Str""))     dB.echoDebug(""String_Node_Str"");
 else     if (arg.matchesPrefix(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.asType(dList.class));
 else     if (arg.matches(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",new Element(true));
 else     if (arg.matchesPrefix(""String_Node_Str"") && arg.matchesArgumentType(Duration.class))     scriptEntry.addObject(""String_Node_Str"",arg.asType(Duration.class));
 else     if (arg.matches(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",new Element(true));
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(dScript.class))     scriptEntry.addObject(""String_Node_Str"",arg.asType(dScript.class));
 else     if (!scriptEntry.hasObject(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
  }
  if (!scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (!scriptEntry.hasObject(""String_Node_Str"") && scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
}",0.9742103738046944
10368,"@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  dB.report(getName(),(scriptEntry.hasObject(""String_Node_Str"") ? scriptEntry.getdObject(""String_Node_Str"").debug() : scriptEntry.getScript().debug()) + (scriptEntry.hasObject(""String_Node_Str"") ? scriptEntry.getdObject(""String_Node_Str"").debug() : ""String_Node_Str"") + (scriptEntry.hasObject(""String_Node_Str"") ? scriptEntry.getElement(""String_Node_Str"").debug() : ""String_Node_Str"")+ (scriptEntry.hasObject(""String_Node_Str"") ? scriptEntry.getElement(""String_Node_Str"").debug() : ""String_Node_Str"")+ (scriptEntry.hasObject(""String_Node_Str"") ? scriptEntry.getdObject(""String_Node_Str"").debug() : ""String_Node_Str""));
  dScript script=(dScript)scriptEntry.getObject(""String_Node_Str"");
  List<ScriptEntry> entries;
  if (scriptEntry.hasObject(""String_Node_Str""))   entries=scriptEntry.getScript().getContainer().getEntries(scriptEntry.getPlayer(),scriptEntry.getNPC(),scriptEntry.getElement(""String_Node_Str"").asString());
 else   if (scriptEntry.hasObject(""String_Node_Str""))   entries=script.getContainer().getEntries(scriptEntry.getPlayer(),scriptEntry.getNPC(),scriptEntry.getElement(""String_Node_Str"").asString());
 else   entries=script.getContainer().getBaseEntries(scriptEntry.getPlayer(),scriptEntry.getNPC());
  String id=(scriptEntry.hasObject(""String_Node_Str"") ? (scriptEntry.getElement(""String_Node_Str"")).asString() : ScriptQueue._getNextId());
  ScriptQueue queue;
  if (scriptEntry.hasObject(""String_Node_Str""))   queue=InstantQueue.getQueue(id).addEntries(entries);
 else   queue=TimedQueue.getQueue(id).addEntries(entries);
  if (scriptEntry.hasObject(""String_Node_Str""))   queue.delayUntil(System.currentTimeMillis() + ((Duration)scriptEntry.getObject(""String_Node_Str"")).getMillis());
  if (scriptEntry.hasObject(""String_Node_Str"")) {
    int x=1;
    dList definitions=(dList)scriptEntry.getObject(""String_Node_Str"");
    String[] definition_names=null;
    try {
      definition_names=script.getContainer().getString(""String_Node_Str"").split(""String_Node_Str"");
    }
 catch (    Exception e) {
    }
    for (    String definition : definitions) {
      queue.addDefinition(definition_names != null && definition_names.length >= x ? definition_names[x - 1].trim() : String.valueOf(x),definition);
      x++;
    }
  }
  queue.start();
}","@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  dB.report(getName(),(scriptEntry.hasObject(""String_Node_Str"") ? scriptEntry.getdObject(""String_Node_Str"").debug() : scriptEntry.getScript().debug()) + (scriptEntry.hasObject(""String_Node_Str"") ? scriptEntry.getdObject(""String_Node_Str"").debug() : ""String_Node_Str"") + (scriptEntry.hasObject(""String_Node_Str"") ? scriptEntry.getElement(""String_Node_Str"").debug() : ""String_Node_Str"")+ (scriptEntry.hasObject(""String_Node_Str"") ? scriptEntry.getElement(""String_Node_Str"").debug() : ""String_Node_Str"")+ (scriptEntry.hasObject(""String_Node_Str"") ? scriptEntry.getdObject(""String_Node_Str"").debug() : ""String_Node_Str""));
  dScript script=(dScript)scriptEntry.getObject(""String_Node_Str"");
  List<ScriptEntry> entries;
  if (scriptEntry.hasObject(""String_Node_Str""))   entries=scriptEntry.getScript().getContainer().getEntries(scriptEntry.getPlayer(),scriptEntry.getNPC(),scriptEntry.getElement(""String_Node_Str"").asString());
 else   if (scriptEntry.hasObject(""String_Node_Str"") && scriptEntry.getObject(""String_Node_Str"") != null)   entries=script.getContainer().getEntries(scriptEntry.getPlayer(),scriptEntry.getNPC(),scriptEntry.getElement(""String_Node_Str"").asString());
 else   entries=script.getContainer().getBaseEntries(scriptEntry.getPlayer(),scriptEntry.getNPC());
  String id=(scriptEntry.hasObject(""String_Node_Str"") ? (scriptEntry.getElement(""String_Node_Str"")).asString() : ScriptQueue._getNextId());
  ScriptQueue queue;
  if (scriptEntry.hasObject(""String_Node_Str""))   queue=InstantQueue.getQueue(id).addEntries(entries);
 else   queue=TimedQueue.getQueue(id).addEntries(entries);
  if (scriptEntry.hasObject(""String_Node_Str""))   queue.delayUntil(System.currentTimeMillis() + ((Duration)scriptEntry.getObject(""String_Node_Str"")).getMillis());
  if (scriptEntry.hasObject(""String_Node_Str"")) {
    int x=1;
    dList definitions=(dList)scriptEntry.getObject(""String_Node_Str"");
    String[] definition_names=null;
    try {
      definition_names=script.getContainer().getString(""String_Node_Str"").split(""String_Node_Str"");
    }
 catch (    Exception e) {
    }
    for (    String definition : definitions) {
      queue.addDefinition(definition_names != null && definition_names.length >= x ? definition_names[x - 1].trim() : String.valueOf(x),definition);
      x++;
    }
  }
  queue.start();
}",0.9890664423885618
10369,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (entity == null) {
    dB.echoDebug(""String_Node_Str"");
    return ""String_Node_Str"";
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getBukkitEntity().isInsideVehicle())     return new dEntity(getBukkitEntity().getVehicle()).getAttribute(attribute.fulfill(1));
 else     return ""String_Node_Str"";
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getCustomName() == null)     return ""String_Node_Str"";
    return new Element(getLivingEntity().getCustomName()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isNPC())     return new Element(getNPC().getName()).getAttribute(attribute.fulfill(1));
    if (entity instanceof Player)     return new Element(((Player)entity).getName()).getAttribute(attribute.fulfill(1));
    return new Element(entity.getType().getName()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(entity_type.toString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (CustomNBT.hasCustomNBT(getLivingEntity(),""String_Node_Str""))     return new dScript(CustomNBT.getCustomNBT(getLivingEntity(),""String_Node_Str"")).getAttribute(attribute.fulfill(1));
 else     return new Element(getBukkitEntity().getType().name()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    int range=attribute.getIntContext(2);
    if (range < 1)     range=50;
    return new dLocation(getLivingEntity().getTargetBlock(null,range).getLocation()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(entity.getLocation().add(0,-1,0)).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getEyeLocation()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (entity instanceof Player) {
      dLocation location=new dLocation(entity.getLocation());
      location.setYaw(location.getYaw() - 90);
      return location.getAttribute(attribute.fulfill(1));
    }
 else {
      return new dLocation(entity.getLocation()).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHealth=getLivingEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHealth=attribute.getIntContext(2);
    if ((float)getLivingEntity().getHealth() / maxHealth < .10)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < .40)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < .75)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < 1)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHealth=getLivingEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHealth=attribute.getIntContext(2);
    return new Element((getLivingEntity().getHealth() / maxHealth) * 100).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getMaxHealth()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getHealth()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity instanceof Tameable).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (entity instanceof Tameable)     return new Element(((Tameable)entity).isTamed()).getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (entity instanceof Tameable && ((Tameable)entity).isTamed())     return new dPlayer((Player)((Tameable)entity).getOwner()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.isInsideVehicle()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dPlayer(getLivingEntity().getKiller()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getLastDamageCause().getCause().name()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getLastDamage()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getLivingEntity().getNoDamageTicks()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(entity.getTicksLived() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && dEntity.matches(attribute.getContext(1))) {
      dEntity toEntity=dEntity.valueOf(attribute.getContext(1));
      return new Element(getLivingEntity().hasLineOfSight(toEntity.getBukkitEntity())).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getCanPickupItems()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getEntityId()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getFallDistance()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getUniqueId().toString()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    Boolean returnElement=false;
    if (attribute.hasContext(1))     for (    org.bukkit.potion.PotionEffect effect : getLivingEntity().getActivePotionEffects())     if (effect.getType().equals(org.bukkit.potion.PotionType.valueOf(attribute.getContext(1))))     returnElement=true;
 else     if (!getLivingEntity().getActivePotionEffects().isEmpty())     returnElement=true;
    return new Element(returnElement).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dInventory(getLivingEntity()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dWorld(entity.getWorld()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(CitizensAPI.getNPCRegistry().isNPC(getBukkitEntity())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!(getBukkitEntity() instanceof Player) && !CitizensAPI.getNPCRegistry().isNPC(getBukkitEntity()))     return Element.TRUE.getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE.toString()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getObjectType()).getAttribute(attribute.fulfill(1));
  }
  return new Element(identify()).getAttribute(attribute.fulfill(0));
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (entity == null) {
    dB.echoDebug(""String_Node_Str"");
    return ""String_Node_Str"";
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getBukkitEntity().isInsideVehicle())     return new dEntity(getBukkitEntity().getVehicle()).getAttribute(attribute.fulfill(1));
 else     return ""String_Node_Str"";
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getLivingEntity().getCustomName() == null)     return ""String_Node_Str"";
    return new Element(getLivingEntity().getCustomName()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (isNPC())     return new Element(getNPC().getName()).getAttribute(attribute.fulfill(1));
    if (entity instanceof Player)     return new Element(((Player)entity).getName()).getAttribute(attribute.fulfill(1));
    return new Element(entity.getType().getName()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(entity_type.toString()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (CustomNBT.hasCustomNBT(getLivingEntity(),""String_Node_Str""))     return new dScript(CustomNBT.getCustomNBT(getLivingEntity(),""String_Node_Str"")).getAttribute(attribute.fulfill(1));
 else     return new Element(getBukkitEntity().getType().name()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    int range=attribute.getIntContext(2);
    if (range < 1)     range=50;
    return new dLocation(getLivingEntity().getTargetBlock(null,range).getLocation()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(entity.getLocation().add(0,-1,0)).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(getEyeLocation()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (entity instanceof Player) {
      dLocation location=new dLocation(entity.getLocation());
      location.setYaw(location.getYaw() - 90);
      return location.getAttribute(attribute.fulfill(1));
    }
 else {
      return new dLocation(entity.getLocation()).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHealth=getLivingEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHealth=attribute.getIntContext(2);
    if ((float)getLivingEntity().getHealth() / maxHealth < .10)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < .40)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < .75)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     if ((float)getLivingEntity().getHealth() / maxHealth < 1)     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    double maxHealth=getLivingEntity().getMaxHealth();
    if (attribute.hasContext(2))     maxHealth=attribute.getIntContext(2);
    return new Element((getLivingEntity().getHealth() / maxHealth) * 100).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getMaxHealth()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getHealth()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity instanceof Tameable).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (entity instanceof Tameable)     return new Element(((Tameable)entity).isTamed()).getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (entity instanceof Tameable && ((Tameable)entity).isTamed())     return new dPlayer((Player)((Tameable)entity).getOwner()).getAttribute(attribute.fulfill(1));
 else     return new Element(""String_Node_Str"").getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.isInsideVehicle()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dPlayer(getLivingEntity().getKiller()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getLastDamageCause().getCause().name()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getLastDamage()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration((long)getLivingEntity().getNoDamageTicks()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Duration(entity.getTicksLived() / 20).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && dEntity.matches(attribute.getContext(1))) {
      dEntity toEntity=dEntity.valueOf(attribute.getContext(1));
      return new Element(getLivingEntity().hasLineOfSight(toEntity.getBukkitEntity())).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getLivingEntity().getCanPickupItems()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getEntityId()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getFallDistance()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(entity.getUniqueId().toString()).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    Boolean returnElement=false;
    if (attribute.hasContext(1))     for (    org.bukkit.potion.PotionEffect effect : getLivingEntity().getActivePotionEffects())     if (effect.getType().equals(org.bukkit.potion.PotionType.valueOf(attribute.getContext(1))))     returnElement=true;
 else     if (!getLivingEntity().getActivePotionEffects().isEmpty())     returnElement=true;
    return new Element(returnElement).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dInventory(getLivingEntity()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new dWorld(entity.getWorld()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(CitizensAPI.getNPCRegistry().isNPC(getBukkitEntity())).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (!(getBukkitEntity() instanceof Player) && !CitizensAPI.getNPCRegistry().isNPC(getBukkitEntity()))     return Element.TRUE.getAttribute(attribute.fulfill(1));
 else     return Element.FALSE.getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(prefix).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    dB.log(debug());
    return new Element(Boolean.TRUE.toString()).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(ChatColor.stripColor(debug())).getAttribute(attribute.fulfill(2));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(debug()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getObjectType()).getAttribute(attribute.fulfill(1));
  }
  return new Element(identify()).getAttribute(attribute.fulfill(0));
}",0.9998766498088072
10370,"@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  dB.report(getName(),(scriptEntry.hasObject(""String_Node_Str"") ? scriptEntry.getdObject(""String_Node_Str"").debug() : scriptEntry.getScript().debug()) + (scriptEntry.hasObject(""String_Node_Str"") ? scriptEntry.getdObject(""String_Node_Str"").debug() : ""String_Node_Str"") + (scriptEntry.hasObject(""String_Node_Str"") ? scriptEntry.getElement(""String_Node_Str"").debug() : ""String_Node_Str"")+ (scriptEntry.hasObject(""String_Node_Str"") ? scriptEntry.getElement(""String_Node_Str"").debug() : ""String_Node_Str""));
  dScript script=(dScript)scriptEntry.getObject(""String_Node_Str"");
  List<ScriptEntry> entries;
  if (scriptEntry.hasObject(""String_Node_Str""))   entries=scriptEntry.getScript().getContainer().getEntries(scriptEntry.getPlayer(),scriptEntry.getNPC(),scriptEntry.getElement(""String_Node_Str"").asString());
 else   if (scriptEntry.hasObject(""String_Node_Str""))   entries=script.getContainer().getEntries(scriptEntry.getPlayer(),scriptEntry.getNPC(),scriptEntry.getElement(""String_Node_Str"").asString());
 else   entries=script.getContainer().getBaseEntries(scriptEntry.getPlayer(),scriptEntry.getNPC());
  if (scriptEntry.hasObject(""String_Node_Str""))   for (  ScriptEntry entry : entries)   entry.setInstant(true);
  scriptEntry.getResidingQueue().injectEntries(entries,0);
}","@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  dB.report(getName(),(scriptEntry.hasObject(""String_Node_Str"") ? scriptEntry.getdObject(""String_Node_Str"").debug() : scriptEntry.getScript().debug()) + (scriptEntry.hasObject(""String_Node_Str"") ? scriptEntry.getdObject(""String_Node_Str"").debug() : ""String_Node_Str"") + (scriptEntry.hasObject(""String_Node_Str"") ? scriptEntry.getElement(""String_Node_Str"").debug() : ""String_Node_Str"")+ (scriptEntry.hasObject(""String_Node_Str"") ? scriptEntry.getElement(""String_Node_Str"").debug() : ""String_Node_Str""));
  dScript script=(dScript)scriptEntry.getObject(""String_Node_Str"");
  List<ScriptEntry> entries;
  if (scriptEntry.hasObject(""String_Node_Str""))   entries=scriptEntry.getScript().getContainer().getEntries(scriptEntry.getPlayer(),scriptEntry.getNPC(),scriptEntry.getElement(""String_Node_Str"").asString());
 else   if (scriptEntry.hasObject(""String_Node_Str""))   entries=script.getContainer().getEntries(scriptEntry.getPlayer(),scriptEntry.getNPC(),scriptEntry.getElement(""String_Node_Str"").asString());
 else   entries=script.getContainer().getBaseEntries(scriptEntry.getPlayer(),scriptEntry.getNPC());
  if (scriptEntry.hasObject(""String_Node_Str""))   for (  ScriptEntry entry : entries)   entry.setInstant(true);
  ScriptBuilder.addObjectToEntries(entries,""String_Node_Str"",scriptEntry.getObject(""String_Node_Str""));
  scriptEntry.getResidingQueue().injectEntries(entries,0);
}",0.963354474982382
10371,"public static void _buildCoreYamlScriptContainers(FileConfiguration yamlScripts){
  Set<String> scripts=yamlScripts.getKeys(false);
  for (  String scriptName : scripts)   if (yamlScripts.contains(scriptName + ""String_Node_Str"")) {
    String type=yamlScripts.getString(scriptName + ""String_Node_Str"");
    if (!scriptContainerTypes.containsKey(type.toUpperCase())) {
      dB.log(""String_Node_Str"" + scriptName + ""String_Node_Str""+ type+ ""String_Node_Str"");
      continue;
    }
    Class typeClass=scriptContainerTypes.get(type.toUpperCase());
    try {
      scriptContainers.put(scriptName,typeClass.getConstructor(ConfigurationSection.class,String.class).newInstance(ScriptHelper._gs().getConfigurationSection(scriptName),scriptName));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","public static void _buildCoreYamlScriptContainers(FileConfiguration yamlScripts){
  scriptContainers.clear();
  WorldScriptHelper.world_scripts.clear();
  ItemScriptHelper.item_scripts.clear();
  Set<String> scripts=yamlScripts.getKeys(false);
  for (  String scriptName : scripts)   if (yamlScripts.contains(scriptName + ""String_Node_Str"")) {
    String type=yamlScripts.getString(scriptName + ""String_Node_Str"");
    if (!scriptContainerTypes.containsKey(type.toUpperCase())) {
      dB.log(""String_Node_Str"" + scriptName + ""String_Node_Str""+ type+ ""String_Node_Str"");
      continue;
    }
    Class typeClass=scriptContainerTypes.get(type.toUpperCase());
    try {
      scriptContainers.put(scriptName,typeClass.getConstructor(ConfigurationSection.class,String.class).newInstance(ScriptHelper._gs().getConfigurationSection(scriptName),scriptName));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.9355581127733028
10372,"@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Element engrave=scriptEntry.getElement(""String_Node_Str"");
  dInventory inventory=(dInventory)scriptEntry.getObject(""String_Node_Str"");
  Element qty=scriptEntry.getElement(""String_Node_Str"");
  Type type=(Type)scriptEntry.getObject(""String_Node_Str"");
  dList list_of_items=(dList)scriptEntry.getObject(""String_Node_Str"");
  Object items_object=null;
  List<dItem> items=null;
  if (list_of_items != null)   items_object=list_of_items.filter(dItem.class);
  if (items_object != null)   items=(List<dItem>)items_object;
  dB.report(getName(),aH.debugObj(""String_Node_Str"",type.name()) + aH.debugObj(""String_Node_Str"",qty.asDouble()) + engrave.debug()+ (items != null ? aH.debugObj(""String_Node_Str"",items) : ""String_Node_Str""));
switch (type) {
case MONEY:
    if (Depends.economy != null)     Depends.economy.depositPlayer(scriptEntry.getPlayer().getName(),qty.asDouble());
 else     dB.echoError(""String_Node_Str"");
  break;
case EXP:
scriptEntry.getPlayer().getPlayerEntity().giveExp(qty.asInt());
break;
case ITEM:
for (dItem item : items) {
ItemStack is=item.getItemStack();
is.setAmount(qty.asInt());
if (engrave.asBoolean()) is=CustomNBT.addCustomNBT(item.getItemStack(),""String_Node_Str"",scriptEntry.getPlayer().getName());
HashMap<Integer,ItemStack> leftovers=inventory.addWithLeftovers(is);
if (!leftovers.isEmpty()) {
dB.echoDebug(""String_Node_Str"");
for (ItemStack leftoverItem : leftovers.values()) inventory.getLocation().getWorld().dropItem(inventory.getLocation(),leftoverItem);
}
}
break;
}
}","@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Element engrave=scriptEntry.getElement(""String_Node_Str"");
  dInventory inventory=(dInventory)scriptEntry.getObject(""String_Node_Str"");
  Element qty=scriptEntry.getElement(""String_Node_Str"");
  Type type=(Type)scriptEntry.getObject(""String_Node_Str"");
  Object items_object=((dList)scriptEntry.getObject(""String_Node_Str"")).filter(dItem.class);
  List<dItem> items=(List<dItem>)items_object;
  if (items_object != null)   items=(List<dItem>)items_object;
  dB.report(getName(),aH.debugObj(""String_Node_Str"",type.name()) + aH.debugObj(""String_Node_Str"",qty.asDouble()) + engrave.debug()+ (items != null ? aH.debugObj(""String_Node_Str"",items) : ""String_Node_Str""));
switch (type) {
case MONEY:
    if (Depends.economy != null)     Depends.economy.depositPlayer(scriptEntry.getPlayer().getName(),qty.asDouble());
 else     dB.echoError(""String_Node_Str"");
  break;
case EXP:
scriptEntry.getPlayer().getPlayerEntity().giveExp(qty.asInt());
break;
case ITEM:
for (dItem item : items) {
ItemStack is=item.getItemStack();
is.setAmount(qty.asInt());
if (engrave.asBoolean()) is=CustomNBT.addCustomNBT(item.getItemStack(),""String_Node_Str"",scriptEntry.getPlayer().getName());
HashMap<Integer,ItemStack> leftovers=inventory.addWithLeftovers(is);
if (!leftovers.isEmpty()) {
dB.echoDebug(""String_Node_Str"");
for (ItemStack leftoverItem : leftovers.values()) inventory.getLocation().getWorld().dropItem(inventory.getLocation(),leftoverItem);
}
}
break;
}
}",0.9069471000637348
10373,"@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  dInventory inventory=(dInventory)scriptEntry.getObject(""String_Node_Str"");
  Element qty=scriptEntry.getElement(""String_Node_Str"");
  Type type=(Type)scriptEntry.getObject(""String_Node_Str"");
  dList list_of_items=(dList)scriptEntry.getObject(""String_Node_Str"");
  Object items_object=null;
  List<dItem> items=null;
  if (list_of_items != null)   items_object=list_of_items.filter(dItem.class);
  if (items_object != null)   items=(List<dItem>)items_object;
  dB.report(getName(),aH.debugObj(""String_Node_Str"",type.name()) + qty.debug() + inventory.debug()+ aH.debugObj(""String_Node_Str"",items));
switch (type) {
case INVENTORY:
    inventory.clear();
  break;
case ITEMINHAND:
int inHandAmt=scriptEntry.getPlayer().getPlayerEntity().getItemInHand().getAmount();
int theAmount=qty.asInt();
ItemStack newHandItem=new ItemStack(0);
if (theAmount > inHandAmt) {
dB.echoDebug(""String_Node_Str"");
scriptEntry.getPlayer().getPlayerEntity().setItemInHand(newHandItem);
}
 else {
if (theAmount == inHandAmt) {
scriptEntry.getPlayer().getPlayerEntity().setItemInHand(newHandItem);
}
 else {
newHandItem=new ItemStack(scriptEntry.getPlayer().getPlayerEntity().getItemInHand().getType(),inHandAmt - theAmount,scriptEntry.getPlayer().getPlayerEntity().getItemInHand().getData().getData());
newHandItem.setItemMeta(scriptEntry.getPlayer().getPlayerEntity().getItemInHand().getItemMeta());
scriptEntry.getPlayer().getPlayerEntity().setItemInHand(newHandItem);
scriptEntry.getPlayer().getPlayerEntity().updateInventory();
}
}
break;
case MONEY:
if (Depends.economy != null) {
dB.echoDebug(""String_Node_Str"" + qty.asDouble() + ""String_Node_Str"");
Depends.economy.withdrawPlayer(scriptEntry.getPlayer().getName(),qty.asDouble());
}
 else {
dB.echoError(""String_Node_Str"");
}
break;
case ITEM:
for (dItem item : items) {
ItemStack is=item.getItemStack();
if (is.getItemMeta() instanceof BookMeta) inventory.removeBook(is);
is.setAmount(qty.asInt());
if (!inventory.getInventory().removeItem(is).isEmpty()) dB.echoError(""String_Node_Str"" + qty.asInt() + ""String_Node_Str""+ item.identify()+ ""String_Node_Str"");
}
break;
}
}","@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  dInventory inventory=(dInventory)scriptEntry.getObject(""String_Node_Str"");
  Element qty=scriptEntry.getElement(""String_Node_Str"");
  Type type=(Type)scriptEntry.getObject(""String_Node_Str"");
  Object items_object=((dList)scriptEntry.getObject(""String_Node_Str"")).filter(dItem.class);
  List<dItem> items=(List<dItem>)items_object;
  if (items_object != null)   items=(List<dItem>)items_object;
  dB.report(getName(),aH.debugObj(""String_Node_Str"",type.name()) + qty.debug() + inventory.debug()+ aH.debugObj(""String_Node_Str"",items));
switch (type) {
case INVENTORY:
    inventory.clear();
  break;
case ITEMINHAND:
int inHandAmt=scriptEntry.getPlayer().getPlayerEntity().getItemInHand().getAmount();
int theAmount=qty.asInt();
ItemStack newHandItem=new ItemStack(0);
if (theAmount > inHandAmt) {
dB.echoDebug(""String_Node_Str"");
scriptEntry.getPlayer().getPlayerEntity().setItemInHand(newHandItem);
}
 else {
if (theAmount == inHandAmt) {
scriptEntry.getPlayer().getPlayerEntity().setItemInHand(newHandItem);
}
 else {
newHandItem=new ItemStack(scriptEntry.getPlayer().getPlayerEntity().getItemInHand().getType(),inHandAmt - theAmount,scriptEntry.getPlayer().getPlayerEntity().getItemInHand().getData().getData());
newHandItem.setItemMeta(scriptEntry.getPlayer().getPlayerEntity().getItemInHand().getItemMeta());
scriptEntry.getPlayer().getPlayerEntity().setItemInHand(newHandItem);
scriptEntry.getPlayer().getPlayerEntity().updateInventory();
}
}
break;
case MONEY:
if (Depends.economy != null) {
dB.echoDebug(""String_Node_Str"" + qty.asDouble() + ""String_Node_Str"");
Depends.economy.withdrawPlayer(scriptEntry.getPlayer().getName(),qty.asDouble());
}
 else {
dB.echoError(""String_Node_Str"");
}
break;
case ITEM:
for (dItem item : items) {
ItemStack is=item.getItemStack();
if (is.getItemMeta() instanceof BookMeta) inventory.removeBook(is);
is.setAmount(qty.asInt());
if (!inventory.getInventory().removeItem(is).isEmpty()) dB.echoError(""String_Node_Str"" + qty.asInt() + ""String_Node_Str""+ item.identify()+ ""String_Node_Str"");
}
break;
}
}",0.9325323475046212
10374,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && !arg.matchesPrefix(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.getValue().toLowerCase());
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && !arg.matchesPrefix(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.getValue());
  }
  if (!scriptEntry.hasObject(""String_Node_Str"") || !scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && !arg.matchesPrefix(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.getValue().toLowerCase());
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && !arg.matchesPrefix(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.raw_value);
  }
  if (!scriptEntry.hasObject(""String_Node_Str"") || !scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
}",0.99147947327653
10375,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesEnum(Action.values()))     scriptEntry.addObject(""String_Node_Str"",Action.valueOf(arg.getValue().toUpperCase()));
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Double) && arg.matchesPrefix(RANGE_ARG))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(ID_ARG))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(dLocation.class))     scriptEntry.addObject(""String_Node_Str"",arg.asType(dLocation.class));
 else     dB.echoError(""String_Node_Str"" + arg.raw_value + ""String_Node_Str"");
  }
  if (!scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesEnum(Action.values()))     scriptEntry.addObject(""String_Node_Str"",Action.valueOf(arg.getValue().toUpperCase()));
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Double) && arg.matchesPrefix(RANGE_ARG))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(ID_ARG))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(dLocation.class))     scriptEntry.addObject(""String_Node_Str"",arg.asType(dLocation.class));
 else     dB.echoError(""String_Node_Str"" + arg.raw_value + '\'');
  }
  if (!scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"" + Action.values());
}",0.9815078236130867
10376,"@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Element action=scriptEntry.getElement(""String_Node_Str"");
  Element type=scriptEntry.getElement(""String_Node_Str"");
  Element id=scriptEntry.getElement(""String_Node_Str"");
  dScript finish_script=(dScript)scriptEntry.getObject(""String_Node_Str"");
  dB.report(getName(),action.debug() + (type != null ? type.debug() : ""String_Node_Str"") + id.debug()+ (finish_script != null ? finish_script.debug() : ""String_Node_Str""));
  List<aH.Argument> arguments=(ArrayList<aH.Argument>)scriptEntry.getObject(""String_Node_Str"");
switch (Action.valueOf(action.asString().toUpperCase())) {
case NEW:
    if (denizen.getListenerRegistry().getListenersFor(scriptEntry.getPlayer()) != null && denizen.getListenerRegistry().getListenersFor(scriptEntry.getPlayer()).containsKey(id.asString().toLowerCase())) {
      dB.echoError(""String_Node_Str"" + id.asString() + ""String_Node_Str"");
      break;
    }
  try {
    denizen.getListenerRegistry().get(type.asString()).createInstance(scriptEntry.getPlayer(),id.asString()).build(scriptEntry.getPlayer(),id.asString(),type.asString(),arguments,finish_script,scriptEntry.getNPC());
  }
 catch (  Exception e) {
    dB.echoDebug(""String_Node_Str"");
    e.printStackTrace();
    try {
      denizen.getListenerRegistry().getListenerFor(scriptEntry.getPlayer(),id.asString()).cancel();
    }
 catch (    Exception ex) {
    }
  }
break;
case FINISH:
if (denizen.getListenerRegistry().getListenerFor(scriptEntry.getPlayer(),id.asString()) != null) denizen.getListenerRegistry().getListenerFor(scriptEntry.getPlayer(),id.asString()).finish();
break;
case CANCEL:
if (scriptEntry.getPlayer() != null) {
if (denizen.getListenerRegistry().getListenerFor(scriptEntry.getPlayer(),id.asString()) != null) denizen.getListenerRegistry().getListenerFor(scriptEntry.getPlayer(),id.asString()).cancel();
break;
}
 else denizen.getSaves().set(""String_Node_Str"" + scriptEntry.getPlayer().getName() + ""String_Node_Str""+ id,null);
}
}","@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Element action=scriptEntry.getElement(""String_Node_Str"");
  Element type=scriptEntry.getElement(""String_Node_Str"");
  Element id=scriptEntry.getElement(""String_Node_Str"");
  dScript finish_script=(dScript)scriptEntry.getObject(""String_Node_Str"");
  dB.report(getName(),action.debug() + (type != null ? type.debug() : ""String_Node_Str"") + id.debug()+ (finish_script != null ? finish_script.debug() : ""String_Node_Str""));
  List<aH.Argument> arguments=(ArrayList<aH.Argument>)scriptEntry.getObject(""String_Node_Str"");
switch (Action.valueOf(action.asString().toUpperCase())) {
case NEW:
    if (denizen.getListenerRegistry().getListenersFor(scriptEntry.getPlayer()) != null && denizen.getListenerRegistry().getListenersFor(scriptEntry.getPlayer()).containsKey(id.asString().toLowerCase())) {
      dB.echoError(""String_Node_Str"" + id.asString() + ""String_Node_Str"");
      break;
    }
  try {
    denizen.getListenerRegistry().get(type.asString()).createInstance(scriptEntry.getPlayer(),id.asString()).build(scriptEntry.getPlayer(),id.asString(),type.asString(),arguments,finish_script,scriptEntry.getNPC());
  }
 catch (  Exception e) {
    dB.echoDebug(""String_Node_Str"");
    if (denizen.getListenerRegistry().get(type.asString()) == null)     dB.echoError(""String_Node_Str"");
 else     e.printStackTrace();
    try {
      denizen.getListenerRegistry().getListenerFor(scriptEntry.getPlayer(),id.asString()).cancel();
    }
 catch (    Exception ex) {
    }
  }
break;
case FINISH:
if (denizen.getListenerRegistry().getListenerFor(scriptEntry.getPlayer(),id.asString()) != null) denizen.getListenerRegistry().getListenerFor(scriptEntry.getPlayer(),id.asString()).finish();
break;
case CANCEL:
if (scriptEntry.getPlayer() != null) {
if (denizen.getListenerRegistry().getListenerFor(scriptEntry.getPlayer(),id.asString()) != null) denizen.getListenerRegistry().getListenerFor(scriptEntry.getPlayer(),id.asString()).cancel();
break;
}
 else denizen.getSaves().set(""String_Node_Str"" + scriptEntry.getPlayer().getName() + ""String_Node_Str""+ id,null);
}
}",0.9734131736526946
10377,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  if (scriptEntry.getArguments().size() > 4)   throw new InvalidArgumentsException(Messages.ERROR_LOTS_OF_ARGUMENTS);
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"")) {
      FormatScriptContainer format=null;
      String formatStr=arg.asElement().asString();
      format=ScriptRegistry.getScriptContainerAs(formatStr,FormatScriptContainer.class);
      if (format == null)       dB.echoError(""String_Node_Str"" + formatStr);
      scriptEntry.addObject(""String_Node_Str"",format);
    }
 else     if ((arg.matchesPrefix(""String_Node_Str"") || arg.matchesPrefix(""String_Node_Str""))) {
      scriptEntry.addObject(""String_Node_Str"",((dList)arg.asType(dList.class)).filter(dPlayer.class));
    }
 else {
      if (!scriptEntry.hasObject(""String_Node_Str""))       scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
  }
  if (!scriptEntry.hasObject(""String_Node_Str""))   scriptEntry.addObject(""String_Node_Str"",(scriptEntry.hasPlayer() ? Arrays.asList(scriptEntry.getPlayer()) : null));
  if (!scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(Messages.ERROR_NO_TEXT);
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  if (scriptEntry.getArguments().size() > 4)   throw new InvalidArgumentsException(Messages.ERROR_LOTS_OF_ARGUMENTS);
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(FORMAT_ARG)) {
      FormatScriptContainer format=null;
      String formatStr=arg.getValue();
      format=ScriptRegistry.getScriptContainerAs(formatStr,FormatScriptContainer.class);
      if (format == null)       dB.echoError(""String_Node_Str"" + formatStr + '\'');
      scriptEntry.addObject(""String_Node_Str"",format);
    }
 else     if ((arg.matchesPrefix(""String_Node_Str"") || arg.matchesPrefix(TARGET_ARG))) {
      scriptEntry.addObject(""String_Node_Str"",((dList)arg.asType(dList.class)).filter(dPlayer.class));
    }
 else {
      if (!scriptEntry.hasObject(""String_Node_Str""))       scriptEntry.addObject(""String_Node_Str"",new Element(arg.raw_value));
    }
  }
  if (!scriptEntry.hasObject(""String_Node_Str""))   scriptEntry.addObject(""String_Node_Str"",(scriptEntry.hasPlayer() ? Arrays.asList(scriptEntry.getPlayer()) : null));
  if (!scriptEntry.hasObject(""String_Node_Str""))   throw new InvalidArgumentsException(Messages.ERROR_NO_TEXT);
}",0.9511077158135982
10378,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  List<aH.Argument> arguments=new ArrayList<aH.Argument>();
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesEnum(Action.values()))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
 else     if (!scriptEntry.hasObject(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"") && arg.matchesArgumentType(dScript.class))     scriptEntry.addObject(""String_Node_Str"",arg.asType(dScript.class));
    arguments.add(arg);
  }
  scriptEntry.defaultObject(""String_Node_Str"",new Element(""String_Node_Str""));
  scriptEntry.defaultObject(""String_Node_Str"",new Element(UUID.randomUUID().toString()));
  if (!scriptEntry.hasObject(""String_Node_Str"") && scriptEntry.getElement(""String_Node_Str"").asString().equalsIgnoreCase(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (scriptEntry.getPlayer() == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.addObject(""String_Node_Str"",arguments);
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  List<aH.Argument> arguments=new ArrayList<aH.Argument>();
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesEnum(Action.values()))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrefix(""String_Node_Str"") && arg.matchesArgumentType(dScript.class))     scriptEntry.addObject(""String_Node_Str"",arg.asType(dScript.class));
 else     if (!scriptEntry.hasObject(""String_Node_Str""))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    arguments.add(arg);
  }
  scriptEntry.defaultObject(""String_Node_Str"",new Element(""String_Node_Str""));
  scriptEntry.defaultObject(""String_Node_Str"",new Element(UUID.randomUUID().toString()));
  if (!scriptEntry.hasObject(""String_Node_Str"") && scriptEntry.getElement(""String_Node_Str"").asString().equalsIgnoreCase(""String_Node_Str""))   throw new InvalidArgumentsException(""String_Node_Str"");
  if (scriptEntry.getPlayer() == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.addObject(""String_Node_Str"",arguments);
}",0.9233498935415188
10379,"@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Element action=scriptEntry.getElement(""String_Node_Str"");
  Element type=scriptEntry.getElement(""String_Node_Str"");
  Element id=scriptEntry.getElement(""String_Node_Str"");
  dScript finish_script=(dScript)scriptEntry.getObject(""String_Node_Str"");
  dB.report(getName(),action.debug() + type.debug() + id.debug()+ (finish_script != null ? finish_script.debug() : ""String_Node_Str""));
  List<aH.Argument> arguments=(ArrayList<aH.Argument>)scriptEntry.getObject(""String_Node_Str"");
switch (Action.valueOf(action.asString().toUpperCase())) {
case NEW:
    if (denizen.getListenerRegistry().getListenersFor(scriptEntry.getPlayer()) != null && denizen.getListenerRegistry().getListenersFor(scriptEntry.getPlayer()).containsKey(id.asString().toLowerCase())) {
      dB.echoError(""String_Node_Str"" + id.asString() + ""String_Node_Str"");
      break;
    }
  try {
    denizen.getListenerRegistry().get(type.asString()).createInstance(scriptEntry.getPlayer(),id.asString()).build(scriptEntry.getPlayer(),id.asString(),type.asString(),arguments,finish_script,scriptEntry.getNPC());
  }
 catch (  Exception e) {
    dB.echoDebug(""String_Node_Str"");
    e.printStackTrace();
    try {
      denizen.getListenerRegistry().getListenerFor(scriptEntry.getPlayer(),id.asString()).cancel();
    }
 catch (    Exception ex) {
    }
  }
break;
case FINISH:
if (denizen.getListenerRegistry().getListenerFor(scriptEntry.getPlayer(),id.asString()) != null) denizen.getListenerRegistry().getListenerFor(scriptEntry.getPlayer(),id.asString()).finish();
break;
case CANCEL:
if (scriptEntry.getPlayer() != null) {
if (denizen.getListenerRegistry().getListenerFor(scriptEntry.getPlayer(),id.asString()) != null) denizen.getListenerRegistry().getListenerFor(scriptEntry.getPlayer(),id.asString()).cancel();
break;
}
 else denizen.getSaves().set(""String_Node_Str"" + scriptEntry.getPlayer().getName() + ""String_Node_Str""+ id,null);
}
}","@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Element action=scriptEntry.getElement(""String_Node_Str"");
  Element type=scriptEntry.getElement(""String_Node_Str"");
  Element id=scriptEntry.getElement(""String_Node_Str"");
  dScript finish_script=(dScript)scriptEntry.getObject(""String_Node_Str"");
  dB.report(getName(),action.debug() + (type != null ? type.debug() : ""String_Node_Str"") + id.debug()+ (finish_script != null ? finish_script.debug() : ""String_Node_Str""));
  List<aH.Argument> arguments=(ArrayList<aH.Argument>)scriptEntry.getObject(""String_Node_Str"");
switch (Action.valueOf(action.asString().toUpperCase())) {
case NEW:
    if (denizen.getListenerRegistry().getListenersFor(scriptEntry.getPlayer()) != null && denizen.getListenerRegistry().getListenersFor(scriptEntry.getPlayer()).containsKey(id.asString().toLowerCase())) {
      dB.echoError(""String_Node_Str"" + id.asString() + ""String_Node_Str"");
      break;
    }
  try {
    denizen.getListenerRegistry().get(type.asString()).createInstance(scriptEntry.getPlayer(),id.asString()).build(scriptEntry.getPlayer(),id.asString(),type.asString(),arguments,finish_script,scriptEntry.getNPC());
  }
 catch (  Exception e) {
    dB.echoDebug(""String_Node_Str"");
    e.printStackTrace();
    try {
      denizen.getListenerRegistry().getListenerFor(scriptEntry.getPlayer(),id.asString()).cancel();
    }
 catch (    Exception ex) {
    }
  }
break;
case FINISH:
if (denizen.getListenerRegistry().getListenerFor(scriptEntry.getPlayer(),id.asString()) != null) denizen.getListenerRegistry().getListenerFor(scriptEntry.getPlayer(),id.asString()).finish();
break;
case CANCEL:
if (scriptEntry.getPlayer() != null) {
if (denizen.getListenerRegistry().getListenerFor(scriptEntry.getPlayer(),id.asString()) != null) denizen.getListenerRegistry().getListenerFor(scriptEntry.getPlayer(),id.asString()).cancel();
break;
}
 else denizen.getSaves().set(""String_Node_Str"" + scriptEntry.getPlayer().getName() + ""String_Node_Str""+ id,null);
}
}",0.9908120188726098
10380,"@EventHandler public void entityDamage(EntityDamageEvent event){
  Map<String,dObject> context=new HashMap<String,dObject>();
  boolean isFatal=false;
  dEntity entity=new dEntity(event.getEntity());
  String entityType=entity.getEntityType().name();
  String cause=event.getCause().name();
  String determination;
  dPlayer player=null;
  dNPC npc=null;
  if (entity.isNPC()) {
    npc=new dNPC(entity.getNPC());
    context.put(""String_Node_Str"",npc);
    entityType=""String_Node_Str"";
  }
 else   if (entity.isPlayer()) {
    player=new dPlayer(entity.getPlayer());
    context.put(""String_Node_Str"",player);
  }
 else {
    context.put(""String_Node_Str"",entity);
  }
  context.put(""String_Node_Str"",new Element(event.getDamage()));
  context.put(""String_Node_Str"",new Element(event.getCause().name()));
  if (entity instanceof LivingEntity) {
    if (event.getDamage() >= ((LivingEntity)entity).getHealth()) {
      isFatal=true;
    }
  }
  List<String> events=new ArrayList<String>();
  events.add(""String_Node_Str"");
  events.add(""String_Node_Str"" + cause);
  events.add(entityType + ""String_Node_Str"");
  events.add(entityType + ""String_Node_Str"" + cause);
  if (isFatal) {
    events.add(""String_Node_Str"");
    events.add(""String_Node_Str"" + cause);
    events.add(entityType + ""String_Node_Str"");
    events.add(entityType + ""String_Node_Str"" + cause);
  }
  if (event instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent subEvent=(EntityDamageByEntityEvent)event;
    dPlayer subPlayer=null;
    dNPC subNPC=null;
    dEntity damager=new dEntity(subEvent.getDamager());
    String damagerType=damager.getEntityType().name();
    if (damager.isNPC()) {
      subNPC=new dNPC(damager.getNPC());
      context.put(""String_Node_Str"",subNPC);
      damagerType=""String_Node_Str"";
      if (npc == null)       npc=subNPC;
    }
 else     if (damager.isPlayer()) {
      subPlayer=new dPlayer(damager.getPlayer());
      context.put(""String_Node_Str"",subPlayer);
      if (player == null)       player=subPlayer;
    }
 else {
      context.put(""String_Node_Str"",damager);
      if (damager.getBukkitEntity() instanceof Projectile) {
        if (((Projectile)damager.getBukkitEntity()).getShooter() != null) {
          dEntity shooter=new dEntity(((Projectile)damager.getBukkitEntity()).getShooter());
          if (shooter.isNPC()) {
            context.put(""String_Node_Str"",new dNPC(shooter.getNPC()));
          }
 else           if (shooter.isPlayer()) {
            context.put(""String_Node_Str"",new dPlayer(shooter.getPlayer()));
          }
 else {
            context.put(""String_Node_Str"",shooter);
          }
        }
 else {
          context.put(""String_Node_Str"",new Element(""String_Node_Str""));
        }
      }
    }
    events.add(""String_Node_Str"");
    events.add(""String_Node_Str"" + damagerType);
    events.add(entityType + ""String_Node_Str"");
    events.add(entityType + ""String_Node_Str"" + damagerType);
    List<String> subEvents=new ArrayList<String>();
    subEvents.add(""String_Node_Str"");
    subEvents.add(""String_Node_Str"" + entityType);
    subEvents.add(damagerType + ""String_Node_Str"");
    subEvents.add(damagerType + ""String_Node_Str"" + entityType);
    if (isFatal) {
      events.add(""String_Node_Str"");
      events.add(""String_Node_Str"" + damagerType);
      events.add(entityType + ""String_Node_Str"");
      events.add(entityType + ""String_Node_Str"" + damagerType);
      subEvents.add(""String_Node_Str"");
      subEvents.add(""String_Node_Str"" + entityType);
      subEvents.add(damagerType + ""String_Node_Str"");
      subEvents.add(damagerType + ""String_Node_Str"" + entityType);
    }
    determination=doEvents(subEvents,(subNPC != null ? subNPC : null),(subPlayer != null ? subPlayer.getPlayerEntity() : null),context);
    if (determination.toUpperCase().startsWith(""String_Node_Str""))     event.setCancelled(true);
 else     if (Argument.valueOf(determination).matchesPrimitive(aH.PrimitiveType.Double)) {
      event.setDamage(aH.getDoubleFrom(determination));
    }
  }
  determination=doEvents(events,(npc != null ? npc : null),(player != null && player.isOnline() ? player.getPlayerEntity() : null),context);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
 else   if (Argument.valueOf(determination).matchesPrimitive(aH.PrimitiveType.Double)) {
    event.setDamage(aH.getDoubleFrom(determination));
  }
}","@EventHandler public void entityDamage(EntityDamageEvent event){
  Map<String,dObject> context=new HashMap<String,dObject>();
  boolean isFatal=false;
  dEntity entity=new dEntity(event.getEntity());
  String entityType=entity.getEntityType().name();
  String cause=event.getCause().name();
  String determination;
  dPlayer player=null;
  dNPC npc=null;
  if (entity.isNPC()) {
    npc=new dNPC(entity.getNPC());
    context.put(""String_Node_Str"",npc);
    entityType=""String_Node_Str"";
  }
 else   if (entity.isPlayer()) {
    player=new dPlayer(entity.getPlayer());
    context.put(""String_Node_Str"",player);
  }
 else {
    context.put(""String_Node_Str"",entity);
  }
  context.put(""String_Node_Str"",new Element(event.getDamage()));
  context.put(""String_Node_Str"",new Element(event.getCause().name()));
  if (entity.getLivingEntity() != null) {
    if (event.getDamage() >= entity.getLivingEntity().getHealth()) {
      isFatal=true;
    }
  }
  List<String> events=new ArrayList<String>();
  events.add(""String_Node_Str"");
  events.add(""String_Node_Str"" + cause);
  events.add(entityType + ""String_Node_Str"");
  events.add(entityType + ""String_Node_Str"" + cause);
  if (isFatal) {
    events.add(""String_Node_Str"");
    events.add(""String_Node_Str"" + cause);
    events.add(entityType + ""String_Node_Str"");
    events.add(entityType + ""String_Node_Str"" + cause);
  }
  if (event instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent subEvent=(EntityDamageByEntityEvent)event;
    dPlayer subPlayer=null;
    dNPC subNPC=null;
    dEntity damager=new dEntity(subEvent.getDamager());
    String damagerType=damager.getEntityType().name();
    if (damager.isNPC()) {
      subNPC=new dNPC(damager.getNPC());
      context.put(""String_Node_Str"",subNPC);
      damagerType=""String_Node_Str"";
      if (npc == null)       npc=subNPC;
    }
 else     if (damager.isPlayer()) {
      subPlayer=new dPlayer(damager.getPlayer());
      context.put(""String_Node_Str"",subPlayer);
      if (player == null)       player=subPlayer;
    }
 else {
      context.put(""String_Node_Str"",damager);
      if (damager.getBukkitEntity() instanceof Projectile) {
        if (((Projectile)damager.getBukkitEntity()).getShooter() != null) {
          dEntity shooter=new dEntity(((Projectile)damager.getBukkitEntity()).getShooter());
          if (shooter.isNPC()) {
            context.put(""String_Node_Str"",new dNPC(shooter.getNPC()));
          }
 else           if (shooter.isPlayer()) {
            context.put(""String_Node_Str"",new dPlayer(shooter.getPlayer()));
          }
 else {
            context.put(""String_Node_Str"",shooter);
          }
        }
 else {
          context.put(""String_Node_Str"",new Element(""String_Node_Str""));
        }
      }
    }
    events.add(""String_Node_Str"");
    events.add(""String_Node_Str"" + damagerType);
    events.add(entityType + ""String_Node_Str"");
    events.add(entityType + ""String_Node_Str"" + damagerType);
    List<String> subEvents=new ArrayList<String>();
    subEvents.add(""String_Node_Str"");
    subEvents.add(""String_Node_Str"" + entityType);
    subEvents.add(damagerType + ""String_Node_Str"");
    subEvents.add(damagerType + ""String_Node_Str"" + entityType);
    if (isFatal) {
      events.add(""String_Node_Str"");
      events.add(""String_Node_Str"" + damagerType);
      events.add(entityType + ""String_Node_Str"");
      events.add(entityType + ""String_Node_Str"" + damagerType);
      subEvents.add(""String_Node_Str"");
      subEvents.add(""String_Node_Str"" + entityType);
      subEvents.add(damagerType + ""String_Node_Str"");
      subEvents.add(damagerType + ""String_Node_Str"" + entityType);
    }
    determination=doEvents(subEvents,(subNPC != null ? subNPC : null),(subPlayer != null ? subPlayer.getPlayerEntity() : null),context);
    if (determination.toUpperCase().startsWith(""String_Node_Str""))     event.setCancelled(true);
 else     if (Argument.valueOf(determination).matchesPrimitive(aH.PrimitiveType.Double)) {
      event.setDamage(aH.getDoubleFrom(determination));
    }
  }
  determination=doEvents(events,(npc != null ? npc : null),(player != null && player.isOnline() ? player.getPlayerEntity() : null),context);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
 else   if (Argument.valueOf(determination).matchesPrimitive(aH.PrimitiveType.Double)) {
    event.setDamage(aH.getDoubleFrom(determination));
  }
}",0.9948046080867404
10381,"@Command(aliases={""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",modifiers={""String_Node_Str""},min=1,max=3,permission=""String_Node_Str"",flags=""String_Node_Str"") public void reload(CommandContext args,CommandSender sender,NPC npc) throws CommandException {
  Denizen denizen=(Denizen)plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (args.hasFlag('a')) {
    denizen.reloadSaves();
    denizen.reloadConfig();
    ScriptHelper.resetHadAnError();
    ScriptHelper.reloadScripts();
    Messaging.send(sender,ChatColor.GREEN + ""String_Node_Str"");
    if (ScriptHelper.getHadAnError()) {
      Messaging.send(sender,ChatColor.RED + ""String_Node_Str"");
    }
    List<String> events=new ArrayList<String>();
    Map<String,Object> context=new HashMap<String,Object>();
    events.add(""String_Node_Str"");
    context.put(""String_Node_Str"",Element.TRUE);
    context.put(""String_Node_Str"",new Element(sender.getName()));
    context.put(""String_Node_Str"",new Element(ScriptHelper.getHadAnError()));
    WorldScriptHelper.doEvents(events,null,(sender instanceof Player) ? ((Player)sender) : null,context);
    return;
  }
  if (args.length() > 2) {
    if (args.getString(1).equalsIgnoreCase(""String_Node_Str"")) {
      denizen.reloadSaves();
      Messaging.send(sender,ChatColor.GREEN + ""String_Node_Str"");
      return;
    }
 else     if (args.getString(1).equalsIgnoreCase(""String_Node_Str"")) {
      denizen.reloadConfig();
      Messaging.send(sender,ChatColor.GREEN + ""String_Node_Str"");
      return;
    }
 else     if (args.getString(1).equalsIgnoreCase(""String_Node_Str"")) {
      ScriptHelper.resetHadAnError();
      ScriptHelper.reloadScripts();
      Messaging.send(sender,ChatColor.GREEN + ""String_Node_Str"");
      if (ScriptHelper.getHadAnError()) {
        Messaging.send(sender,ChatColor.RED + ""String_Node_Str"");
      }
      List<String> events=new ArrayList<String>();
      Map<String,Object> context=new HashMap<String,Object>();
      events.add(""String_Node_Str"");
      context.put(""String_Node_Str"",Element.FALSE);
      context.put(""String_Node_Str"",new Element(ScriptHelper.getHadAnError()));
      context.put(""String_Node_Str"",new Element(sender.getName()));
      WorldScriptHelper.doEvents(events,null,(sender instanceof Player) ? ((Player)sender) : null,context);
      return;
    }
  }
  Messaging.send(sender,""String_Node_Str"");
  Messaging.send(sender,""String_Node_Str"");
  Messaging.send(sender,""String_Node_Str"");
  Messaging.send(sender,""String_Node_Str"");
  Messaging.send(sender,""String_Node_Str"");
}","@Command(aliases={""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",modifiers={""String_Node_Str""},min=1,max=3,permission=""String_Node_Str"",flags=""String_Node_Str"") public void reload(CommandContext args,CommandSender sender,NPC npc) throws CommandException {
  Denizen denizen=(Denizen)plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (args.hasFlag('a')) {
    denizen.reloadSaves();
    denizen.reloadConfig();
    ScriptHelper.resetHadAnError();
    ScriptHelper.reloadScripts();
    Messaging.send(sender,ChatColor.GREEN + ""String_Node_Str"");
    if (ScriptHelper.getHadAnError()) {
      Messaging.send(sender,ChatColor.RED + ""String_Node_Str"");
    }
    List<String> events=new ArrayList<String>();
    Map<String,dObject> context=new HashMap<String,dObject>();
    events.add(""String_Node_Str"");
    context.put(""String_Node_Str"",Element.TRUE);
    context.put(""String_Node_Str"",new Element(sender.getName()));
    context.put(""String_Node_Str"",new Element(ScriptHelper.getHadAnError()));
    WorldScriptHelper.doEvents(events,null,(sender instanceof Player) ? ((Player)sender) : null,context);
    return;
  }
  if (args.length() > 2) {
    if (args.getString(1).equalsIgnoreCase(""String_Node_Str"")) {
      denizen.reloadSaves();
      Messaging.send(sender,ChatColor.GREEN + ""String_Node_Str"");
      return;
    }
 else     if (args.getString(1).equalsIgnoreCase(""String_Node_Str"")) {
      denizen.reloadConfig();
      Messaging.send(sender,ChatColor.GREEN + ""String_Node_Str"");
      return;
    }
 else     if (args.getString(1).equalsIgnoreCase(""String_Node_Str"")) {
      ScriptHelper.resetHadAnError();
      ScriptHelper.reloadScripts();
      Messaging.send(sender,ChatColor.GREEN + ""String_Node_Str"");
      if (ScriptHelper.getHadAnError()) {
        Messaging.send(sender,ChatColor.RED + ""String_Node_Str"");
      }
      List<String> events=new ArrayList<String>();
      Map<String,dObject> context=new HashMap<String,dObject>();
      events.add(""String_Node_Str"");
      context.put(""String_Node_Str"",Element.FALSE);
      context.put(""String_Node_Str"",new Element(ScriptHelper.getHadAnError()));
      context.put(""String_Node_Str"",new Element(sender.getName()));
      WorldScriptHelper.doEvents(events,null,(sender instanceof Player) ? ((Player)sender) : null,context);
      return;
    }
  }
  Messaging.send(sender,""String_Node_Str"");
  Messaging.send(sender,""String_Node_Str"");
  Messaging.send(sender,""String_Node_Str"");
  Messaging.send(sender,""String_Node_Str"");
  Messaging.send(sender,""String_Node_Str"");
}",0.9992257065427798
10382,"/** 
 * Saves the current values in this object to the Denizen saves.yml. This is called internally when needed, but might be useful to call if you are extending the usage of Flags yourself.
 */
public void save(){
  List<String> world_script_events=new ArrayList<String>();
  Map<String,Object> context=new HashMap<String,Object>();
  dPlayer player=null;
  if (dPlayer.matches(flagOwner))   player=dPlayer.valueOf(flagOwner);
  dNPC npc=null;
  if (dNPC.matches(flagOwner))   npc=dNPC.valueOf(flagOwner);
  String type;
  if (player != null) {
    type=""String_Node_Str"";
    world_script_events.add(""String_Node_Str"");
    world_script_events.add(""String_Node_Str"" + flagName + ""String_Node_Str"");
  }
 else   if (npc != null) {
    type=""String_Node_Str"";
    world_script_events.add(""String_Node_Str"");
    world_script_events.add(""String_Node_Str"" + flagName + ""String_Node_Str"");
  }
 else {
    type=""String_Node_Str"";
    world_script_events.add(""String_Node_Str"");
    world_script_events.add(""String_Node_Str"" + flagName + ""String_Node_Str"");
  }
  context.put(""String_Node_Str"",flagOwner);
  context.put(""String_Node_Str"",flagName);
  context.put(""String_Node_Str"",type);
  context.put(""String_Node_Str"",value.size() > 1 ? new dList(denizen.getSaves().getStringList(flagPath)) : value.size() == 1 ? new Element(value.get(0).asString()) : ""String_Node_Str"");
  world_script_events.add(""String_Node_Str"");
  denizen.getSaves().set(flagPath,value.values);
  denizen.getSaves().set(flagPath + ""String_Node_Str"",(expiration > 0 ? expiration : null));
  rebuild();
  WorldScriptHelper.doEvents(world_script_events,npc,player != null ? player.getPlayerEntity() : null,context);
}","/** 
 * Saves the current values in this object to the Denizen saves.yml. This is called internally when needed, but might be useful to call if you are extending the usage of Flags yourself.
 */
public void save(){
  List<String> world_script_events=new ArrayList<String>();
  Map<String,dObject> context=new HashMap<String,dObject>();
  dPlayer player=null;
  if (dPlayer.matches(flagOwner))   player=dPlayer.valueOf(flagOwner);
  dNPC npc=null;
  if (dNPC.matches(flagOwner))   npc=dNPC.valueOf(flagOwner);
  String type;
  if (player != null) {
    type=""String_Node_Str"";
    world_script_events.add(""String_Node_Str"");
    world_script_events.add(""String_Node_Str"" + flagName + ""String_Node_Str"");
  }
 else   if (npc != null) {
    type=""String_Node_Str"";
    world_script_events.add(""String_Node_Str"");
    world_script_events.add(""String_Node_Str"" + flagName + ""String_Node_Str"");
  }
 else {
    type=""String_Node_Str"";
    world_script_events.add(""String_Node_Str"");
    world_script_events.add(""String_Node_Str"" + flagName + ""String_Node_Str"");
  }
  context.put(""String_Node_Str"",Element.valueOf(flagOwner));
  context.put(""String_Node_Str"",Element.valueOf(flagName));
  context.put(""String_Node_Str"",Element.valueOf(type));
  context.put(""String_Node_Str"",value.size() > 1 ? new dList(denizen.getSaves().getStringList(flagPath)) : value.size() == 1 ? new Element(value.get(0).asString()) : Element.valueOf(""String_Node_Str""));
  world_script_events.add(""String_Node_Str"");
  denizen.getSaves().set(flagPath,value.values);
  denizen.getSaves().set(flagPath + ""String_Node_Str"",(expiration > 0 ? expiration : null));
  rebuild();
  WorldScriptHelper.doEvents(world_script_events,npc,player != null ? player.getPlayerEntity() : null,context);
}",0.9592786503781268
10383,"/** 
 * Clears all values from a flag, essentially making it null.
 */
public void clear(){
  List<String> world_script_events=new ArrayList<String>();
  Map<String,Object> context=new HashMap<String,Object>();
  dPlayer player=null;
  if (dPlayer.matches(flagOwner))   player=dPlayer.valueOf(flagOwner);
  dNPC npc=null;
  if (dNPC.matches(flagOwner))   npc=dNPC.valueOf(flagOwner);
  String type;
  if (player != null) {
    type=""String_Node_Str"";
    world_script_events.add(""String_Node_Str"");
    world_script_events.add(""String_Node_Str"" + flagName + ""String_Node_Str"");
  }
 else   if (npc != null) {
    type=""String_Node_Str"";
    world_script_events.add(""String_Node_Str"");
    world_script_events.add(""String_Node_Str"" + flagName + ""String_Node_Str"");
  }
 else {
    type=""String_Node_Str"";
    world_script_events.add(""String_Node_Str"");
    world_script_events.add(""String_Node_Str"" + flagName + ""String_Node_Str"");
  }
  context.put(""String_Node_Str"",flagOwner);
  context.put(""String_Node_Str"",flagName);
  context.put(""String_Node_Str"",type);
  context.put(""String_Node_Str"",value.size() > 1 ? new dList(denizen.getSaves().getStringList(flagPath)) : value.size() == 1 ? new Element(value.get(0).asString()) : ""String_Node_Str"");
  world_script_events.add(""String_Node_Str"");
  denizen.getSaves().set(flagPath,null);
  denizen.getSaves().set(flagPath + ""String_Node_Str"",null);
  rebuild();
  WorldScriptHelper.doEvents(world_script_events,npc,player != null ? player.getPlayerEntity() : null,context);
}","/** 
 * Clears all values from a flag, essentially making it null.
 */
public void clear(){
  List<String> world_script_events=new ArrayList<String>();
  Map<String,dObject> context=new HashMap<String,dObject>();
  dPlayer player=null;
  if (dPlayer.matches(flagOwner))   player=dPlayer.valueOf(flagOwner);
  dNPC npc=null;
  if (dNPC.matches(flagOwner))   npc=dNPC.valueOf(flagOwner);
  String type;
  if (player != null) {
    type=""String_Node_Str"";
    world_script_events.add(""String_Node_Str"");
    world_script_events.add(""String_Node_Str"" + flagName + ""String_Node_Str"");
  }
 else   if (npc != null) {
    type=""String_Node_Str"";
    world_script_events.add(""String_Node_Str"");
    world_script_events.add(""String_Node_Str"" + flagName + ""String_Node_Str"");
  }
 else {
    type=""String_Node_Str"";
    world_script_events.add(""String_Node_Str"");
    world_script_events.add(""String_Node_Str"" + flagName + ""String_Node_Str"");
  }
  context.put(""String_Node_Str"",Element.valueOf(flagOwner));
  context.put(""String_Node_Str"",Element.valueOf(flagName));
  context.put(""String_Node_Str"",Element.valueOf(type));
  context.put(""String_Node_Str"",value.size() > 1 ? new dList(denizen.getSaves().getStringList(flagPath)) : value.size() == 1 ? new Element(value.get(0).asString()) : Element.valueOf(""String_Node_Str""));
  world_script_events.add(""String_Node_Str"");
  denizen.getSaves().set(flagPath,null);
  denizen.getSaves().set(flagPath + ""String_Node_Str"",null);
  rebuild();
  WorldScriptHelper.doEvents(world_script_events,npc,player != null ? player.getPlayerEntity() : null,context);
}",0.9550128534704372
10384,"private void callAction(String act,Entity ent){
  Map<String,Object> context=new HashMap<String,Object>();
  context.put(""String_Node_Str"",new dEntity(ent));
  dnpc.action(""String_Node_Str"" + act + ""String_Node_Str"",null,context);
  dnpc.action(ent.getType().name() + ""String_Node_Str"" + act+ ""String_Node_Str"",null,context);
}","private void callAction(String act,Entity ent){
  Map<String,dObject> context=new HashMap<String,dObject>();
  context.put(""String_Node_Str"",new dEntity(ent));
  dnpc.action(""String_Node_Str"" + act + ""String_Node_Str"",null,context);
  dnpc.action(ent.getType().name() + ""String_Node_Str"" + act+ ""String_Node_Str"",null,context);
}",0.9969512195121952
10385,"@EventHandler public void inventoryDragEvent(InventoryDragEvent event){
  Map<String,Object> context=new HashMap<String,Object>();
  dItem item=new dItem(event.getOldCursor());
  Player player=(Player)event.getWhoClicked();
  String type=event.getInventory().getType().name();
  context.put(""String_Node_Str"",item);
  context.put(""String_Node_Str"",new dInventory(event.getInventory()));
  List<String> events=new ArrayList<String>();
  events.add(""String_Node_Str"");
  events.add(""String_Node_Str"");
  events.add(""String_Node_Str"" + type + ""String_Node_Str"");
  if (item.getItemStack() != null) {
    events.add(""String_Node_Str"" + item.identify());
    events.add(""String_Node_Str"" + item.identify() + ""String_Node_Str"");
    events.add(""String_Node_Str"" + item.identify() + ""String_Node_Str""+ type+ ""String_Node_Str"");
    if (!item.identify().equals(item.identify().split(""String_Node_Str"")[0])) {
      events.add(""String_Node_Str"" + item.identify().split(""String_Node_Str"")[0]);
      events.add(""String_Node_Str"" + item.identify().split(""String_Node_Str"")[0] + ""String_Node_Str"");
      events.add(""String_Node_Str"" + item.identify().split(""String_Node_Str"")[0] + ""String_Node_Str""+ type+ ""String_Node_Str"");
    }
    if (item.isItemscript()) {
      events.add(""String_Node_Str"" + item.getMaterial());
      events.add(""String_Node_Str"" + item.getMaterial() + ""String_Node_Str"");
      events.add(""String_Node_Str"" + item.getMaterial() + ""String_Node_Str""+ type+ ""String_Node_Str"");
    }
  }
  String determination=doEvents(events,null,player,context);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
}","@EventHandler public void inventoryDragEvent(InventoryDragEvent event){
  Map<String,dObject> context=new HashMap<String,dObject>();
  dItem item=new dItem(event.getOldCursor());
  Player player=(Player)event.getWhoClicked();
  String type=event.getInventory().getType().name();
  context.put(""String_Node_Str"",item);
  context.put(""String_Node_Str"",new dInventory(event.getInventory()));
  List<String> events=new ArrayList<String>();
  events.add(""String_Node_Str"");
  events.add(""String_Node_Str"");
  events.add(""String_Node_Str"" + type + ""String_Node_Str"");
  if (item.getItemStack() != null) {
    events.add(""String_Node_Str"" + item.identify());
    events.add(""String_Node_Str"" + item.identify() + ""String_Node_Str"");
    events.add(""String_Node_Str"" + item.identify() + ""String_Node_Str""+ type+ ""String_Node_Str"");
    if (!item.identify().equals(item.identify().split(""String_Node_Str"")[0])) {
      events.add(""String_Node_Str"" + item.identify().split(""String_Node_Str"")[0]);
      events.add(""String_Node_Str"" + item.identify().split(""String_Node_Str"")[0] + ""String_Node_Str"");
      events.add(""String_Node_Str"" + item.identify().split(""String_Node_Str"")[0] + ""String_Node_Str""+ type+ ""String_Node_Str"");
    }
    if (item.isItemscript()) {
      events.add(""String_Node_Str"" + item.getMaterial());
      events.add(""String_Node_Str"" + item.getMaterial() + ""String_Node_Str"");
      events.add(""String_Node_Str"" + item.getMaterial() + ""String_Node_Str""+ type+ ""String_Node_Str"");
    }
  }
  String determination=doEvents(events,null,player,context);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
}",0.9993964996982498
10386,"@EventHandler public void contextTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str"") || event.getScriptEntry() == null)   return;
  String type=event.getType();
  if (event.getScriptEntry().getResidingQueue().hasContext(type)) {
    Attribute attribute=new Attribute(event.raw_tag,event.getScriptEntry());
    event.setReplaced(event.getScriptEntry().getResidingQueue().getContext(type).getAttribute(attriute.fulfill(2)));
  }
  if (!ScriptRegistry.containsScript(event.getScriptEntry().getScript().getName(),TaskScriptContainer.class))   return;
  TaskScriptContainer script=ScriptRegistry.getScriptContainerAs(event.getScriptEntry().getScript().getName(),TaskScriptContainer.class);
  ScriptEntry entry=event.getScriptEntry();
  if (entry.hasObject(""String_Node_Str"")) {
    Map<String,String> context=(HashMap<String,String>)entry.getObject(""String_Node_Str"");
    Map<String,Integer> id=script.getContextMap();
    if (context.containsKey(String.valueOf(id.get(type.toUpperCase())))) {
      event.setReplaced(context.get(String.valueOf(id.get(type.toUpperCase()))));
    }
  }
 else   event.setReplaced(""String_Node_Str"");
}","@EventHandler public void contextTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str"") || event.getScriptEntry() == null)   return;
  String type=event.getType();
  if (event.getScriptEntry().getResidingQueue().hasContext(type)) {
    Attribute attribute=new Attribute(event.raw_tag,event.getScriptEntry());
    event.setReplaced(event.getScriptEntry().getResidingQueue().getContext(type).getAttribute(attribute.fulfill(2)));
  }
  if (!ScriptRegistry.containsScript(event.getScriptEntry().getScript().getName(),TaskScriptContainer.class))   return;
  TaskScriptContainer script=ScriptRegistry.getScriptContainerAs(event.getScriptEntry().getScript().getName(),TaskScriptContainer.class);
  ScriptEntry entry=event.getScriptEntry();
  if (entry.hasObject(""String_Node_Str"")) {
    Map<String,String> context=(HashMap<String,String>)entry.getObject(""String_Node_Str"");
    Map<String,Integer> id=script.getContextMap();
    if (context.containsKey(String.valueOf(id.get(type.toUpperCase())))) {
      event.setReplaced(context.get(String.valueOf(id.get(type.toUpperCase()))));
    }
  }
 else   event.setReplaced(""String_Node_Str"");
}",0.9995654063450674
10387,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Double))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(dList.class)) {
      scriptEntry.addObject(""String_Node_Str"",((dList)arg.asType(dList.class)).filter(dEntity.class));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(dEntity.class)) {
      scriptEntry.addObject(""String_Node_Str"",Arrays.asList(arg.asType(dEntity.class)));
    }
  }
  if (!scriptEntry.hasObject(""String_Node_Str""))   scriptEntry.addObject(""String_Node_Str"",new Element(Integer.MAX_VALUE));
  if (!scriptEntry.hasObject(""String_Node_Str"")) {
    List<dEntity> entities=new ArrayList<dEntity>();
    if (scriptEntry.getPlayer() != null)     entities.add(scriptEntry.getPlayer().getDenizenEntity());
 else     if (scriptEntry.getNPC() != null)     entities.add(scriptEntry.getNPC().getDenizenEntity());
 else     throw new InvalidArgumentsException(""String_Node_Str"");
    scriptEntry.addObject(""String_Node_Str"",entities);
  }
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesPrimitive(aH.PrimitiveType.Double))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(dList.class)) {
      scriptEntry.addObject(""String_Node_Str"",((dList)arg.asType(dList.class)).filter(dEntity.class));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(dEntity.class)) {
      scriptEntry.addObject(""String_Node_Str"",Arrays.asList(arg.asType(dEntity.class)));
    }
  }
  if (!scriptEntry.hasObject(""String_Node_Str""))   scriptEntry.addObject(""String_Node_Str"",new Element(-1));
  if (!scriptEntry.hasObject(""String_Node_Str"")) {
    List<dEntity> entities=new ArrayList<dEntity>();
    if (scriptEntry.getPlayer() != null)     entities.add(scriptEntry.getPlayer().getDenizenEntity());
 else     if (scriptEntry.getNPC() != null)     entities.add(scriptEntry.getNPC().getDenizenEntity());
 else     throw new InvalidArgumentsException(""String_Node_Str"");
    scriptEntry.addObject(""String_Node_Str"",entities);
  }
}",0.9926098794243484
10388,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  List<dEntity> entities=(List<dEntity>)scriptEntry.getObject(""String_Node_Str"");
  Element amountelement=scriptEntry.getElement(""String_Node_Str"");
  dB.report(getName(),amountelement.debug() + aH.debugObj(""String_Node_Str"",entities));
  if (amountelement.asInt() == Integer.MAX_VALUE)   for (  dEntity entity : entities)   entity.getLivingEntity().setHealth(entity.getLivingEntity().getMaxHealth());
 else {
    double amount=amountelement.asDouble();
    for (    dEntity entity : entities)     if (entity.getLivingEntity().getHealth() + amount < entity.getLivingEntity().getMaxHealth())     entity.getLivingEntity().setHealth(entity.getLivingEntity().getHealth() + amount);
 else     entity.getLivingEntity().setHealth(entity.getLivingEntity().getMaxHealth());
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  List<dEntity> entities=(List<dEntity>)scriptEntry.getObject(""String_Node_Str"");
  Element amountelement=scriptEntry.getElement(""String_Node_Str"");
  dB.report(getName(),amountelement.debug() + aH.debugObj(""String_Node_Str"",entities));
  if (amountelement.asDouble() == -1)   for (  dEntity entity : entities)   entity.getLivingEntity().setHealth(entity.getLivingEntity().getMaxHealth());
 else {
    double amount=amountelement.asDouble();
    for (    dEntity entity : entities)     if (entity.getLivingEntity().getHealth() + amount < entity.getLivingEntity().getMaxHealth())     entity.getLivingEntity().setHealth(entity.getLivingEntity().getHealth() + amount);
 else     entity.getLivingEntity().setHealth(entity.getLivingEntity().getMaxHealth());
  }
}",0.9842873176206508
10389,"public boolean execute(ScriptEntry scriptEntry){
  Matcher m=definition_pattern.matcher(scriptEntry.getCommandName());
  StringBuffer sb=new StringBuffer();
  while (m.find()) {
    if (scriptEntry.getResidingQueue().hasContext(m.group(1).toLowerCase()))     m.appendReplacement(sb,scriptEntry.getResidingQueue().getContext(m.group(1).toLowerCase()));
 else     m.appendReplacement(sb,""String_Node_Str"");
  }
  m.appendTail(sb);
  scriptEntry.setCommandName(sb.toString());
  if (plugin.getCommandRegistry().get(scriptEntry.getCommandName()) == null) {
    dB.echoDebug(DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName());
    dB.echoError(scriptEntry.getCommandName() + ""String_Node_Str"");
    dB.echoDebug(DebugElement.Footer);
    return false;
  }
  AbstractCommand command=plugin.getCommandRegistry().get(scriptEntry.getCommandName());
  if (scriptEntry.getPlayer() != null)   dB.echoDebug(DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName() + ""String_Node_Str""+ scriptEntry.getPlayer().getName());
 else   dB.echoDebug(DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName() + (scriptEntry.getNPC() != null ? ""String_Node_Str"" + scriptEntry.getNPC().getName() : ""String_Node_Str""));
  boolean keepGoing=true;
  try {
    if (command.getOptions().REQUIRED_ARGS > scriptEntry.getArguments().size())     throw new InvalidArgumentsException(""String_Node_Str"");
    if (scriptEntry.has_tags)     scriptEntry.setArguments(TagManager.fillArguments(scriptEntry.getArguments(),scriptEntry,true));
    List<String> newArgs=new ArrayList<String>();
    int nested_depth=0;
    for (    aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
      if (arg.getValue().equals(""String_Node_Str""))       nested_depth++;
      if (arg.getValue().equals(""String_Node_Str""))       nested_depth--;
      if (nested_depth > 0) {
        newArgs.add(arg.getValue());
        continue;
      }
      m=definition_pattern.matcher(arg.getValue());
      sb=new StringBuffer();
      while (m.find()) {
        if (scriptEntry.getResidingQueue().hasContext(m.group(1).toLowerCase()))         m.appendReplacement(sb,scriptEntry.getResidingQueue().getContext(m.group(1).toLowerCase()));
 else         m.appendReplacement(sb,""String_Node_Str"");
      }
      m.appendTail(sb);
      arg=aH.Argument.valueOf(sb.toString());
      if (arg.matchesPrefix(""String_Node_Str"")) {
        dB.echoDebug(""String_Node_Str"");
        String value=TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),arg.getValue(),false);
        if (!dPlayer.valueOf(arg.getValue()).isValid()) {
          dB.echoError(arg.getValue() + ""String_Node_Str"");
          return false;
        }
        scriptEntry.setPlayer(dPlayer.valueOf(value));
      }
 else       if (arg.matchesPrefix(""String_Node_Str"")) {
        dB.echoDebug(""String_Node_Str"");
        String value=TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),arg.getValue(),false);
        if (!dNPC.valueOf(arg.getValue()).isValid()) {
          dB.echoError(arg.getValue() + ""String_Node_Str"");
          return false;
        }
        scriptEntry.setNPC(dNPC.valueOf(value));
      }
 else       newArgs.add(arg.getValue());
    }
    scriptEntry.setArguments(newArgs);
    if (scriptEntry.has_tags)     scriptEntry.setArguments(TagManager.fillArguments(scriptEntry.getArguments(),scriptEntry,false));
    command.parseArgs(scriptEntry);
  }
 catch (  InvalidArgumentsException e) {
    keepGoing=false;
    dB.echoError(""String_Node_Str"");
    dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
    dB.echoDebug(""String_Node_Str"" + command.getUsageHint());
    dB.echoDebug(DebugElement.Footer);
  }
catch (  Exception e) {
    keepGoing=false;
    dB.echoError(""String_Node_Str"");
    if (!dB.showStackTraces)     dB.echoError(""String_Node_Str"");
 else     e.printStackTrace();
    dB.echoDebug(DebugElement.Footer);
  }
 finally {
    if (keepGoing)     try {
      ScriptEntryExecuteEvent event=new ScriptEntryExecuteEvent(scriptEntry);
      Bukkit.getServer().getPluginManager().callEvent(event);
      if (event.isAltered())       scriptEntry=event.getScriptEntry();
      if (!event.isCancelled())       command.execute(scriptEntry);
 else       dB.echoDebug(""String_Node_Str"");
    }
 catch (    Exception e) {
      dB.echoError(""String_Node_Str"");
      if (!dB.showStackTraces)       dB.echoError(""String_Node_Str"");
 else       e.printStackTrace();
    }
  }
  return true;
}","public boolean execute(ScriptEntry scriptEntry){
  Matcher m=definition_pattern.matcher(scriptEntry.getCommandName());
  StringBuffer sb=new StringBuffer();
  while (m.find()) {
    if (scriptEntry.getResidingQueue().hasContext(m.group(1).toLowerCase()))     m.appendReplacement(sb,scriptEntry.getResidingQueue().getContext(m.group(1).toLowerCase()));
 else     m.appendReplacement(sb,""String_Node_Str"");
  }
  m.appendTail(sb);
  scriptEntry.setCommandName(sb.toString());
  if (plugin.getCommandRegistry().get(scriptEntry.getCommandName()) == null) {
    dB.echoDebug(DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName());
    dB.echoError(scriptEntry.getCommandName() + ""String_Node_Str"");
    dB.echoDebug(DebugElement.Footer);
    return false;
  }
  AbstractCommand command=plugin.getCommandRegistry().get(scriptEntry.getCommandName());
  if (scriptEntry.getPlayer() != null)   dB.echoDebug(DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName() + ""String_Node_Str""+ scriptEntry.getPlayer().getName());
 else   dB.echoDebug(DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName() + (scriptEntry.getNPC() != null ? ""String_Node_Str"" + scriptEntry.getNPC().getName() : ""String_Node_Str""));
  boolean keepGoing=true;
  try {
    if (command.getOptions().REQUIRED_ARGS > scriptEntry.getArguments().size())     throw new InvalidArgumentsException(""String_Node_Str"");
    if (scriptEntry.has_tags)     scriptEntry.setArguments(TagManager.fillArguments(scriptEntry.getArguments(),scriptEntry,true));
    List<String> newArgs=new ArrayList<String>();
    int nested_depth=0;
    for (    aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
      if (arg.getValue().equals(""String_Node_Str""))       nested_depth++;
      if (arg.getValue().equals(""String_Node_Str""))       nested_depth--;
      if (nested_depth > 0) {
        newArgs.add(arg.getValue());
        continue;
      }
      m=definition_pattern.matcher(arg.getValue());
      sb=new StringBuffer();
      while (m.find()) {
        if (scriptEntry.getResidingQueue().hasContext(m.group(1).toLowerCase()))         m.appendReplacement(sb,scriptEntry.getResidingQueue().getContext(m.group(1).toLowerCase()));
 else         m.appendReplacement(sb,""String_Node_Str"");
      }
      m.appendTail(sb);
      arg=aH.Argument.valueOf(sb.toString());
      dPlayer player=scriptEntry.getPlayer();
      dNPC npc=scriptEntry.getNPC();
      if (arg.matchesPrefix(""String_Node_Str"")) {
        dB.echoDebug(""String_Node_Str"");
        String value=TagManager.tag(player,npc,arg.getValue(),false);
        if (!player.isValid()) {
          dB.echoError(value + ""String_Node_Str"");
          return false;
        }
        scriptEntry.setPlayer(player);
      }
 else       if (arg.matchesPrefix(""String_Node_Str"")) {
        dB.echoDebug(""String_Node_Str"");
        String value=TagManager.tag(player,npc,arg.getValue(),false);
        if (!npc.isValid()) {
          dB.echoError(value + ""String_Node_Str"");
          return false;
        }
        scriptEntry.setNPC(dNPC.valueOf(value));
      }
 else       newArgs.add(arg.getValue());
    }
    scriptEntry.setArguments(newArgs);
    if (scriptEntry.has_tags)     scriptEntry.setArguments(TagManager.fillArguments(scriptEntry.getArguments(),scriptEntry,false));
    command.parseArgs(scriptEntry);
  }
 catch (  InvalidArgumentsException e) {
    keepGoing=false;
    dB.echoError(""String_Node_Str"");
    dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
    dB.echoDebug(""String_Node_Str"" + command.getUsageHint());
    dB.echoDebug(DebugElement.Footer);
  }
catch (  Exception e) {
    keepGoing=false;
    dB.echoError(""String_Node_Str"");
    if (!dB.showStackTraces)     dB.echoError(""String_Node_Str"");
 else     e.printStackTrace();
    dB.echoDebug(DebugElement.Footer);
  }
 finally {
    if (keepGoing)     try {
      ScriptEntryExecuteEvent event=new ScriptEntryExecuteEvent(scriptEntry);
      Bukkit.getServer().getPluginManager().callEvent(event);
      if (event.isAltered())       scriptEntry=event.getScriptEntry();
      if (!event.isCancelled())       command.execute(scriptEntry);
 else       dB.echoDebug(""String_Node_Str"");
    }
 catch (    Exception e) {
      dB.echoError(""String_Node_Str"");
      if (!dB.showStackTraces)       dB.echoError(""String_Node_Str"");
 else       e.printStackTrace();
    }
  }
  return true;
}",0.8816037213423413
10390,"@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  String name=scriptEntry.getElement(""String_Node_Str"").asString();
  String value=scriptEntry.getElement(""String_Node_Str"").asString();
  Action action=(Action)scriptEntry.getObject(""String_Node_Str"");
  Duration duration=(Duration)scriptEntry.getObject(""String_Node_Str"");
  dEntity target=null;
  if (scriptEntry.getObject(""String_Node_Str"") instanceof dEntity)   target=(dEntity)scriptEntry.getObject(""String_Node_Str"");
  int index=-1;
  if (name.contains(""String_Node_Str"")) {
    try {
      index=Integer.valueOf(name.split(""String_Node_Str"")[1].replace(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    Exception e) {
      index=-1;
    }
    name=name.split(""String_Node_Str"")[0];
  }
  dB.report(getName(),aH.debugObj(""String_Node_Str"",name) + (index > 0 ? aH.debugObj(""String_Node_Str"",String.valueOf(index)) : ""String_Node_Str"") + aH.debugUniqueObj(""String_Node_Str"",action.toString(),(value != null ? value : ""String_Node_Str""))+ (duration.getSeconds() > 0 ? duration.debug() : ""String_Node_Str"")+ aH.debugObj(""String_Node_Str"",(target != null ? (target.isNPC() ? target.getNPC() : target.isPlayer() ? target.getPlayer() : target.getType()) : ""String_Node_Str"")));
  Flag flag=null;
  if (target == null)   flag=denizen.flagManager().getGlobalFlag(name);
 else   if (target.isPlayer())   flag=denizen.flagManager().getPlayerFlag(target.getPlayer().getName(),name);
 else   if (target.isNPC())   flag=denizen.flagManager().getNPCFlag(target.getNPC().getId(),name);
switch (action) {
case INCREASE:
case DECREASE:
case MULTIPLY:
case DIVIDE:
    double currentValue=flag.get(index).asDouble();
  flag.set(Double.toString(math(currentValue,Double.valueOf(value),action)),index);
break;
case SET_BOOLEAN:
flag.set(""String_Node_Str"",index);
break;
case SET_VALUE:
flag.set(value,index);
break;
case INSERT:
flag.add(value);
break;
case REMOVE:
flag.remove(value,index);
break;
case SPLIT:
flag.split(value);
break;
case DELETE:
flag.clear();
}
if (duration.getSeconds() > 0) flag.setExpiration(System.currentTimeMillis() + Double.valueOf(duration.getSeconds() * 1000).longValue());
 else flag.setExpiration(0L);
}","@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  String name=scriptEntry.getElement(""String_Node_Str"").asString();
  String value=scriptEntry.getElement(""String_Node_Str"").asString();
  Action action=(Action)scriptEntry.getObject(""String_Node_Str"");
  Duration duration=(Duration)scriptEntry.getObject(""String_Node_Str"");
  dEntity target=null;
  if (scriptEntry.getObject(""String_Node_Str"") instanceof dEntity)   target=(dEntity)scriptEntry.getObject(""String_Node_Str"");
  int index=-1;
  if (name.contains(""String_Node_Str"")) {
    try {
      index=Integer.valueOf(name.split(""String_Node_Str"")[1].replace(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    Exception e) {
      index=-1;
    }
    name=name.split(""String_Node_Str"")[0];
  }
  dB.report(getName(),aH.debugObj(""String_Node_Str"",name) + (index > 0 ? aH.debugObj(""String_Node_Str"",String.valueOf(index)) : ""String_Node_Str"") + aH.debugUniqueObj(""String_Node_Str"",action.toString(),(value != null ? value : ""String_Node_Str""))+ (duration.getSeconds() > 0 ? duration.debug() : ""String_Node_Str"")+ aH.debugObj(""String_Node_Str"",(target != null ? (target.isNPC() ? target.getNPC().getId() : target.isPlayer() ? target.getPlayer().getName() : target.getType()) : ""String_Node_Str"")));
  Flag flag=null;
  if (target == null)   flag=denizen.flagManager().getGlobalFlag(name);
 else   if (target.isPlayer())   flag=denizen.flagManager().getPlayerFlag(target.getPlayer().getName(),name);
 else   if (target.isNPC())   flag=denizen.flagManager().getNPCFlag(target.getNPC().getId(),name);
switch (action) {
case INCREASE:
case DECREASE:
case MULTIPLY:
case DIVIDE:
    double currentValue=flag.get(index).asDouble();
  flag.set(Double.toString(math(currentValue,Double.valueOf(value),action)),index);
break;
case SET_BOOLEAN:
flag.set(""String_Node_Str"",index);
break;
case SET_VALUE:
flag.set(value,index);
break;
case INSERT:
flag.add(value);
break;
case REMOVE:
flag.remove(value,index);
break;
case SPLIT:
flag.split(value);
break;
case DELETE:
flag.clear();
}
if (duration.getSeconds() > 0) flag.setExpiration(System.currentTimeMillis() + Double.valueOf(duration.getSeconds() * 1000).longValue());
 else flag.setExpiration(0L);
}",0.9959623149394348
10391,"@EventHandler public void entityDamage(EntityDamageEvent event){
  Map<String,Object> context=new HashMap<String,Object>();
  boolean isFatal=false;
  Entity entity=event.getEntity();
  String entityType=entity.getType().name();
  String cause=event.getCause().name();
  String determination;
  Player player=null;
  dNPC npc=null;
  if (CitizensAPI.getNPCRegistry().isNPC(entity)) {
    npc=DenizenAPI.getDenizenNPC(CitizensAPI.getNPCRegistry().getNPC(entity));
    context.put(""String_Node_Str"",npc);
    entityType=""String_Node_Str"";
  }
 else   if (entity instanceof Player) {
    player=(Player)entity;
    context.put(""String_Node_Str"",new dPlayer((Player)entity));
  }
 else {
    context.put(""String_Node_Str"",new dEntity(entity));
  }
  context.put(""String_Node_Str"",new Element(event.getDamage()));
  context.put(""String_Node_Str"",new Element(event.getCause().name()));
  if (entity instanceof LivingEntity) {
    if (event.getDamage() >= ((LivingEntity)entity).getHealth()) {
      isFatal=true;
    }
  }
  List<String> events=new ArrayList<String>();
  events.add(""String_Node_Str"");
  events.add(""String_Node_Str"" + cause);
  events.add(entityType + ""String_Node_Str"");
  events.add(entityType + ""String_Node_Str"" + cause);
  if (isFatal == true) {
    events.add(""String_Node_Str"");
    events.add(""String_Node_Str"" + cause);
    events.add(entityType + ""String_Node_Str"");
    events.add(entityType + ""String_Node_Str"" + cause);
  }
  if (event instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent subEvent=(EntityDamageByEntityEvent)event;
    Player subPlayer=null;
    dNPC subNPC=null;
    Entity damager=subEvent.getDamager();
    String damagerType=damager.getType().name();
    if (CitizensAPI.getNPCRegistry().isNPC(damager)) {
      subNPC=DenizenAPI.getDenizenNPC(CitizensAPI.getNPCRegistry().getNPC(entity));
      context.put(""String_Node_Str"",DenizenAPI.getDenizenNPC(CitizensAPI.getNPCRegistry().getNPC(damager)));
      damagerType=""String_Node_Str"";
      if (npc == null)       npc=subNPC;
    }
 else     if (damager instanceof Player) {
      subPlayer=(Player)damager;
      context.put(""String_Node_Str"",new dPlayer((Player)damager));
      if (player == null)       player=subPlayer;
    }
 else {
      context.put(""String_Node_Str"",new dEntity(damager));
      if (damager instanceof Projectile) {
        if (((Projectile)damager).getShooter() != null)         context.put(""String_Node_Str"",new dEntity(((Projectile)damager).getShooter()));
 else         context.put(""String_Node_Str"",Element.valueOf(""String_Node_Str""));
      }
    }
    events.add(""String_Node_Str"");
    events.add(""String_Node_Str"" + damagerType);
    events.add(entityType + ""String_Node_Str"");
    events.add(entityType + ""String_Node_Str"" + damagerType);
    List<String> subEvents=new ArrayList<String>();
    subEvents.add(""String_Node_Str"");
    subEvents.add(""String_Node_Str"" + entityType);
    subEvents.add(damagerType + ""String_Node_Str"");
    subEvents.add(damagerType + ""String_Node_Str"" + entityType);
    if (isFatal == true) {
      events.add(""String_Node_Str"");
      events.add(""String_Node_Str"" + damagerType);
      events.add(entityType + ""String_Node_Str"");
      events.add(entityType + ""String_Node_Str"" + damagerType);
      subEvents.add(""String_Node_Str"");
      subEvents.add(""String_Node_Str"" + entityType);
      subEvents.add(damagerType + ""String_Node_Str"");
      subEvents.add(damagerType + ""String_Node_Str"" + entityType);
    }
    determination=doEvents(subEvents,subNPC,subPlayer,context);
    if (determination.toUpperCase().startsWith(""String_Node_Str""))     event.setCancelled(true);
 else     if (Argument.valueOf(determination).matchesPrimitive(aH.PrimitiveType.Double)) {
      event.setDamage(aH.getDoubleFrom(determination));
    }
  }
  determination=doEvents(events,npc,player,context);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
 else   if (Argument.valueOf(determination).matchesPrimitive(aH.PrimitiveType.Double)) {
    event.setDamage(aH.getDoubleFrom(determination));
  }
}","@EventHandler public void entityDamage(EntityDamageEvent event){
  Map<String,Object> context=new HashMap<String,Object>();
  boolean isFatal=false;
  dEntity entity=new dEntity(event.getEntity());
  String entityType=entity.getType();
  String cause=event.getCause().name();
  String determination;
  dPlayer player=null;
  dNPC npc=null;
  if (entity.isNPC()) {
    context.put(""String_Node_Str"",new dNPC(entity.getNPC()));
    entityType=""String_Node_Str"";
  }
 else   if (entity.isPlayer()) {
    player=new dPlayer(entity.getPlayer());
    context.put(""String_Node_Str"",new dPlayer(entity.getPlayer()));
  }
 else {
    context.put(""String_Node_Str"",entity);
  }
  context.put(""String_Node_Str"",new Element(event.getDamage()));
  context.put(""String_Node_Str"",new Element(event.getCause().name()));
  if (entity instanceof LivingEntity) {
    if (event.getDamage() >= ((LivingEntity)entity).getHealth()) {
      isFatal=true;
    }
  }
  List<String> events=new ArrayList<String>();
  events.add(""String_Node_Str"");
  events.add(""String_Node_Str"" + cause);
  events.add(entityType + ""String_Node_Str"");
  events.add(entityType + ""String_Node_Str"" + cause);
  if (isFatal == true) {
    events.add(""String_Node_Str"");
    events.add(""String_Node_Str"" + cause);
    events.add(entityType + ""String_Node_Str"");
    events.add(entityType + ""String_Node_Str"" + cause);
  }
  if (event instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent subEvent=(EntityDamageByEntityEvent)event;
    dPlayer subPlayer=null;
    dNPC subNPC=null;
    dEntity damager=new dEntity(subEvent.getDamager());
    String damagerType=damager.getType();
    if (damager.isNPC()) {
      subNPC=new dNPC(entity.getNPC());
      context.put(""String_Node_Str"",new dNPC(damager.getNPC()));
      damagerType=""String_Node_Str"";
      if (npc == null)       npc=subNPC;
    }
 else     if (damager.isPlayer()) {
      subPlayer=new dPlayer(damager.getPlayer());
      context.put(""String_Node_Str"",new dPlayer((Player)damager));
      if (player == null)       player=subPlayer;
    }
 else {
      context.put(""String_Node_Str"",damager);
      if (damager instanceof Projectile) {
        if (((Projectile)damager).getShooter() != null)         context.put(""String_Node_Str"",new dEntity(((Projectile)damager).getShooter()));
 else         context.put(""String_Node_Str"",Element.valueOf(""String_Node_Str""));
      }
    }
    events.add(""String_Node_Str"");
    events.add(""String_Node_Str"" + damagerType);
    events.add(entityType + ""String_Node_Str"");
    events.add(entityType + ""String_Node_Str"" + damagerType);
    List<String> subEvents=new ArrayList<String>();
    subEvents.add(""String_Node_Str"");
    subEvents.add(""String_Node_Str"" + entityType);
    subEvents.add(damagerType + ""String_Node_Str"");
    subEvents.add(damagerType + ""String_Node_Str"" + entityType);
    if (isFatal == true) {
      events.add(""String_Node_Str"");
      events.add(""String_Node_Str"" + damagerType);
      events.add(entityType + ""String_Node_Str"");
      events.add(entityType + ""String_Node_Str"" + damagerType);
      subEvents.add(""String_Node_Str"");
      subEvents.add(""String_Node_Str"" + entityType);
      subEvents.add(damagerType + ""String_Node_Str"");
      subEvents.add(damagerType + ""String_Node_Str"" + entityType);
    }
    determination=doEvents(subEvents,subNPC,subPlayer.getPlayerEntity(),context);
    if (determination.toUpperCase().startsWith(""String_Node_Str""))     event.setCancelled(true);
 else     if (Argument.valueOf(determination).matchesPrimitive(aH.PrimitiveType.Double)) {
      event.setDamage(aH.getDoubleFrom(determination));
    }
  }
  determination=doEvents(events,npc,player.getPlayerEntity(),context);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
 else   if (Argument.valueOf(determination).matchesPrimitive(aH.PrimitiveType.Double)) {
    event.setDamage(aH.getDoubleFrom(determination));
  }
}",0.8202902145603373
10392,"public boolean execute(ScriptEntry scriptEntry){
  Matcher m=definition_pattern.matcher(scriptEntry.getCommandName());
  StringBuffer sb=new StringBuffer();
  while (m.find()) {
    if (scriptEntry.getResidingQueue().hasContext(m.group(1).toLowerCase()))     m.appendReplacement(sb,scriptEntry.getResidingQueue().getContext(m.group(1).toLowerCase()));
 else     m.appendReplacement(sb,""String_Node_Str"");
  }
  m.appendTail(sb);
  scriptEntry.setCommandName(sb.toString());
  if (plugin.getCommandRegistry().get(scriptEntry.getCommandName()) == null) {
    dB.echoDebug(DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName());
    dB.echoError(scriptEntry.getCommandName() + ""String_Node_Str"");
    dB.echoDebug(DebugElement.Footer);
    return false;
  }
  AbstractCommand command=plugin.getCommandRegistry().get(scriptEntry.getCommandName());
  if (scriptEntry.getPlayer() != null)   dB.echoDebug(DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName() + ""String_Node_Str""+ scriptEntry.getPlayer().getName());
 else   dB.echoDebug(DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName() + (scriptEntry.getNPC() != null ? ""String_Node_Str"" + scriptEntry.getNPC().getName() : ""String_Node_Str""));
  boolean keepGoing=true;
  try {
    if (command.getOptions().REQUIRED_ARGS > scriptEntry.getArguments().size())     throw new InvalidArgumentsException(""String_Node_Str"");
    if (scriptEntry.has_tags)     scriptEntry.setArguments(TagManager.fillArguments(scriptEntry.getArguments(),scriptEntry,true));
    List<String> newArgs=new ArrayList<String>();
    int nested_depth=0;
    for (    aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
      if (arg.getValue().equals(""String_Node_Str""))       nested_depth++;
      if (arg.getValue().equals(""String_Node_Str""))       nested_depth--;
      if (nested_depth > 0) {
        newArgs.add(arg.getValue());
        continue;
      }
      m=definition_pattern.matcher(arg.getValue());
      sb=new StringBuffer();
      while (m.find()) {
        if (scriptEntry.getResidingQueue().hasContext(m.group(1).toLowerCase()))         m.appendReplacement(sb,scriptEntry.getResidingQueue().getContext(m.group(1).toLowerCase()));
 else         m.appendReplacement(sb,""String_Node_Str"");
      }
      m.appendTail(sb);
      arg=aH.Argument.valueOf(sb.toString());
      if (arg.matchesPrefix(""String_Node_Str"")) {
        dB.echoDebug(""String_Node_Str"");
        dPlayer player=dPlayer.valueOf(arg.getValue());
        String value=TagManager.tag(player,scriptEntry.getNPC(),arg.getValue(),false);
        if (!player.isValid()) {
          dB.echoError(value + ""String_Node_Str"");
          return false;
        }
        scriptEntry.setPlayer(player);
      }
 else       if (arg.matchesPrefix(""String_Node_Str"")) {
        dB.echoDebug(""String_Node_Str"");
        dNPC npc=dNPC.valueOf(arg.getValue());
        String value=TagManager.tag(scriptEntry.getPlayer(),npc,arg.getValue(),false);
        if (!npc.isValid()) {
          dB.echoError(value + ""String_Node_Str"");
          return false;
        }
        scriptEntry.setNPC(npc);
      }
 else       newArgs.add(arg.getValue());
    }
    scriptEntry.setArguments(newArgs);
    if (scriptEntry.has_tags)     scriptEntry.setArguments(TagManager.fillArguments(scriptEntry.getArguments(),scriptEntry,false));
    command.parseArgs(scriptEntry);
  }
 catch (  InvalidArgumentsException e) {
    keepGoing=false;
    dB.echoError(""String_Node_Str"");
    dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
    dB.echoDebug(""String_Node_Str"" + command.getUsageHint());
    dB.echoDebug(DebugElement.Footer);
  }
catch (  Exception e) {
    keepGoing=false;
    dB.echoError(""String_Node_Str"");
    if (!dB.showStackTraces)     dB.echoError(""String_Node_Str"");
 else     e.printStackTrace();
    dB.echoDebug(DebugElement.Footer);
  }
 finally {
    if (keepGoing)     try {
      ScriptEntryExecuteEvent event=new ScriptEntryExecuteEvent(scriptEntry);
      Bukkit.getServer().getPluginManager().callEvent(event);
      if (event.isAltered())       scriptEntry=event.getScriptEntry();
      if (!event.isCancelled())       command.execute(scriptEntry);
 else       dB.echoDebug(""String_Node_Str"");
    }
 catch (    Exception e) {
      dB.echoError(""String_Node_Str"");
      if (!dB.showStackTraces)       dB.echoError(""String_Node_Str"");
 else       e.printStackTrace();
    }
  }
  return true;
}","public boolean execute(ScriptEntry scriptEntry){
  Matcher m=definition_pattern.matcher(scriptEntry.getCommandName());
  StringBuffer sb=new StringBuffer();
  while (m.find()) {
    if (scriptEntry.getResidingQueue().hasContext(m.group(1).toLowerCase()))     m.appendReplacement(sb,scriptEntry.getResidingQueue().getContext(m.group(1).toLowerCase()));
 else     m.appendReplacement(sb,""String_Node_Str"");
  }
  m.appendTail(sb);
  scriptEntry.setCommandName(sb.toString());
  if (plugin.getCommandRegistry().get(scriptEntry.getCommandName()) == null) {
    dB.echoDebug(DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName());
    dB.echoError(scriptEntry.getCommandName() + ""String_Node_Str"");
    dB.echoDebug(DebugElement.Footer);
    return false;
  }
  AbstractCommand command=plugin.getCommandRegistry().get(scriptEntry.getCommandName());
  if (scriptEntry.getPlayer() != null)   dB.echoDebug(DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName() + ""String_Node_Str""+ scriptEntry.getPlayer().getName());
 else   dB.echoDebug(DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName() + (scriptEntry.getNPC() != null ? ""String_Node_Str"" + scriptEntry.getNPC().getName() : ""String_Node_Str""));
  boolean keepGoing=true;
  try {
    if (command.getOptions().REQUIRED_ARGS > scriptEntry.getArguments().size())     throw new InvalidArgumentsException(""String_Node_Str"");
    if (scriptEntry.has_tags)     scriptEntry.setArguments(TagManager.fillArguments(scriptEntry.getArguments(),scriptEntry,true));
    List<String> newArgs=new ArrayList<String>();
    int nested_depth=0;
    boolean if_ignore=false;
    for (    aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
      if (arg.getValue().equals(""String_Node_Str""))       nested_depth++;
      if (arg.getValue().equals(""String_Node_Str""))       nested_depth--;
      if (nested_depth > 0) {
        newArgs.add(arg.getValue());
        continue;
      }
      if (command.getName().equalsIgnoreCase(""String_Node_Str"") && DenizenAPI.getCurrentInstance().getCommandRegistry().get(arg.getValue()) != null)       if_ignore=true;
      m=definition_pattern.matcher(arg.getValue());
      sb=new StringBuffer();
      while (m.find()) {
        if (scriptEntry.getResidingQueue().hasContext(m.group(1).toLowerCase()))         m.appendReplacement(sb,scriptEntry.getResidingQueue().getContext(m.group(1).toLowerCase()));
 else         m.appendReplacement(sb,""String_Node_Str"");
      }
      m.appendTail(sb);
      arg=aH.Argument.valueOf(sb.toString());
      if (arg.matchesPrefix(""String_Node_Str"") && !if_ignore) {
        dB.echoDebug(""String_Node_Str"");
        String value=TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),arg.getValue(),false);
        dPlayer player=dPlayer.valueOf(arg.getValue());
        if (!player.isValid()) {
          dB.echoError(value + ""String_Node_Str"");
          return false;
        }
        scriptEntry.setPlayer(player);
      }
 else       if (arg.matchesPrefix(""String_Node_Str"") && !if_ignore) {
        dB.echoDebug(""String_Node_Str"");
        String value=TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),arg.getValue(),false);
        dNPC npc=dNPC.valueOf(arg.getValue());
        if (!npc.isValid()) {
          dB.echoError(value + ""String_Node_Str"");
          return false;
        }
        scriptEntry.setNPC(npc);
      }
 else       newArgs.add(arg.getValue());
    }
    scriptEntry.setArguments(newArgs);
    if (scriptEntry.has_tags)     scriptEntry.setArguments(TagManager.fillArguments(scriptEntry.getArguments(),scriptEntry,false));
    command.parseArgs(scriptEntry);
  }
 catch (  InvalidArgumentsException e) {
    keepGoing=false;
    dB.echoError(""String_Node_Str"");
    dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
    dB.echoDebug(""String_Node_Str"" + command.getUsageHint());
    dB.echoDebug(DebugElement.Footer);
  }
catch (  Exception e) {
    keepGoing=false;
    dB.echoError(""String_Node_Str"");
    if (!dB.showStackTraces)     dB.echoError(""String_Node_Str"");
 else     e.printStackTrace();
    dB.echoDebug(DebugElement.Footer);
  }
 finally {
    if (keepGoing)     try {
      ScriptEntryExecuteEvent event=new ScriptEntryExecuteEvent(scriptEntry);
      Bukkit.getServer().getPluginManager().callEvent(event);
      if (event.isAltered())       scriptEntry=event.getScriptEntry();
      if (!event.isCancelled())       command.execute(scriptEntry);
 else       dB.echoDebug(""String_Node_Str"");
    }
 catch (    Exception e) {
      dB.echoError(""String_Node_Str"");
      if (!dB.showStackTraces)       dB.echoError(""String_Node_Str"");
 else       e.printStackTrace();
    }
  }
  return true;
}",0.9384813938481392
10393,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str"") && arg.hasPrefix()&& arg.getPrefix().matchesArgumentType(dScript.class)) {
      scriptEntry.addObject(""String_Node_Str"",arg.getPrefix().asType(dScript.class));
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(dScript.class)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asType(dScript.class));
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && (arg.matchesPrimitive(aH.PrimitiveType.String) || arg.matchesPrimitive(aH.PrimitiveType.Integer))) {
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
      dB.echoDebug(Messages.DEBUG_SET_STEP,arg.toString());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(Duration.class)) {
      scriptEntry.addObject(""String_Node_Str"",arg.asType(Duration.class));
    }
  }
  if (!scriptEntry.hasObject(""String_Node_Str""))   scriptEntry.addObject(""String_Node_Str"",scriptEntry.getScript());
  if (!scriptEntry.hasObject(""String_Node_Str""))   scriptEntry.addObject(""String_Node_Str"",new Duration(-1d));
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  for (  aH.Argument arg : aH.interpret(scriptEntry.getArguments())) {
    if (!scriptEntry.hasObject(""String_Node_Str"") && !scriptEntry.hasObject(""String_Node_Str"") && arg.hasPrefix()&& arg.getPrefix().matchesArgumentType(dScript.class)) {
      scriptEntry.addObject(""String_Node_Str"",arg.getPrefix().asType(dScript.class));
      scriptEntry.addObject(""String_Node_Str"",arg.asElement());
    }
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(dScript.class))     scriptEntry.addObject(""String_Node_Str"",arg.asType(dScript.class));
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && (arg.matchesPrimitive(aH.PrimitiveType.String) || arg.matchesPrimitive(aH.PrimitiveType.Integer)))     scriptEntry.addObject(""String_Node_Str"",arg.asElement());
 else     if (!scriptEntry.hasObject(""String_Node_Str"") && arg.matchesArgumentType(Duration.class))     scriptEntry.addObject(""String_Node_Str"",arg.asType(Duration.class));
  }
  if (!scriptEntry.hasObject(""String_Node_Str""))   scriptEntry.addObject(""String_Node_Str"",scriptEntry.getScript());
  if (!scriptEntry.hasPlayer() || !scriptEntry.getPlayer().isValid())   throw new InvalidArgumentsException(""String_Node_Str"");
}",0.9092945128779396
10394,"@Override public void execute(final ScriptEntry scriptEntry) throws CommandExecutionException {
  final dScript script=(dScript)scriptEntry.getObject(""String_Node_Str"");
  String step=scriptEntry.getElement(""String_Node_Str"").asString();
  Duration duration=(Duration)scriptEntry.getObject(""String_Node_Str"");
  String currentStep=InteractScriptHelper.getCurrentStep(scriptEntry.getPlayer(),script.getName());
  if (step == null) {
    if (aH.matchesInteger(currentStep)) {
      step=String.valueOf(aH.getIntegerFrom(currentStep) + 1);
    }
 else     step=""String_Node_Str"";
  }
  if (durations.containsKey(scriptEntry.getPlayer().getName() + ""String_Node_Str"" + script.getName()))   try {
    denizen.getServer().getScheduler().cancelTask(durations.get(scriptEntry.getPlayer().getName() + ""String_Node_Str"" + script.getName()));
  }
 catch (  Exception e) {
  }
  if (duration.getSeconds() > 0) {
    scriptEntry.addObject(""String_Node_Str"",currentStep);
    scriptEntry.addObject(""String_Node_Str"",new Duration(-1d));
    long delay=(long)(duration.getSeconds() * 20);
    dB.echoDebug(Messages.DEBUG_SETTING_DELAYED_TASK,""String_Node_Str"" + script + ""String_Node_Str"");
    durations.put(scriptEntry.getPlayer().getName() + ""String_Node_Str"" + script.getName(),denizen.getServer().getScheduler().scheduleSyncDelayedTask(denizen,new Runnable(){
      @Override public void run(){
        dB.log(Messages.DEBUG_RUNNING_DELAYED_TASK,""String_Node_Str"" + script.getName() + ""String_Node_Str"");
        try {
          durations.remove(scriptEntry.getPlayer().getName() + ""String_Node_Str"" + script.getName().toUpperCase());
          execute(scriptEntry);
        }
 catch (        CommandExecutionException e) {
          dB.echoError(""String_Node_Str"");
          if (dB.showStackTraces)           e.printStackTrace();
        }
      }
    }
,delay));
  }
  denizen.getSaves().set(""String_Node_Str"" + scriptEntry.getPlayer().getName() + ""String_Node_Str""+ script.getName().toUpperCase()+ ""String_Node_Str""+ ""String_Node_Str"",step);
}","@Override public void execute(final ScriptEntry scriptEntry) throws CommandExecutionException {
  final dScript script=(dScript)scriptEntry.getObject(""String_Node_Str"");
  String step=scriptEntry.getElement(""String_Node_Str"").asString();
  Duration duration=(Duration)scriptEntry.getObject(""String_Node_Str"");
  dB.report(getName(),scriptEntry.getPlayer().debug() + script.debug() + scriptEntry.getElement(""String_Node_Str"").debug()+ (duration != null ? duration.debug() : ""String_Node_Str""));
  String currentStep=InteractScriptHelper.getCurrentStep(scriptEntry.getPlayer(),script.getName());
  if (step == null) {
    if (aH.matchesInteger(currentStep)) {
      step=String.valueOf(aH.getIntegerFrom(currentStep) + 1);
    }
 else     step=""String_Node_Str"";
  }
  if (durations.containsKey(scriptEntry.getPlayer().getName() + ""String_Node_Str"" + script.getName()))   try {
    denizen.getServer().getScheduler().cancelTask(durations.get(scriptEntry.getPlayer().getName() + ""String_Node_Str"" + script.getName()));
  }
 catch (  Exception e) {
  }
  if (duration != null && duration.getSeconds() > 0) {
    scriptEntry.addObject(""String_Node_Str"",currentStep);
    scriptEntry.addObject(""String_Node_Str"",Duration.ZERO);
    long delay=(long)(duration.getSeconds() * 20);
    dB.echoDebug(Messages.DEBUG_SETTING_DELAYED_TASK,""String_Node_Str"" + script + ""String_Node_Str"");
    durations.put(scriptEntry.getPlayer().getName() + ""String_Node_Str"" + script.getName(),denizen.getServer().getScheduler().scheduleSyncDelayedTask(denizen,new Runnable(){
      @Override public void run(){
        dB.log(Messages.DEBUG_RUNNING_DELAYED_TASK,""String_Node_Str"" + script.getName() + ""String_Node_Str"");
        try {
          durations.remove(scriptEntry.getPlayer().getName() + ""String_Node_Str"" + script.getName().toUpperCase());
          execute(scriptEntry);
        }
 catch (        CommandExecutionException e) {
          dB.echoError(""String_Node_Str"");
          if (dB.showStackTraces)           e.printStackTrace();
        }
      }
    }
,delay));
  }
  denizen.getSaves().set(""String_Node_Str"" + scriptEntry.getPlayer().getName() + ""String_Node_Str""+ script.getName().toUpperCase()+ ""String_Node_Str""+ ""String_Node_Str"",step);
}",0.9489700374531836
10395,"@EventHandler public static void blockBreaks(BlockBreakEvent event){
  dLocation location=new dLocation(event.getBlock().getLocation());
  for (  Viewer viewer : viewers.values())   if (location.equals(viewer.getLocation())) {
    event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
  }
}","@EventHandler public static void blockBreaks(BlockBreakEvent event){
  dLocation location=new dLocation(event.getBlock().getLocation());
  for (  Viewer viewer : viewers.values())   if (Utilities.isBlock(location,viewer.getLocation())) {
    event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
  }
}",0.9362962962962964
10396,"@EventHandler public static void reloadViewers(SavesReloadEvent event){
  for (  Viewer viewer : viewers.values()) {
    Bukkit.getScheduler().cancelTask(viewer.getTask());
  }
  viewers.clear();
  FileConfiguration saves=DenizenAPI.getCurrentInstance().getSaves();
  for (  String key : saves.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
    Viewer viewer=new Viewer(key,saves.getString(""String_Node_Str"" + key.toLowerCase() + ""String_Node_Str""),dLocation.valueOf(saves.getString(""String_Node_Str"" + key.toLowerCase() + ""String_Node_Str"")));
    viewers.put(key,viewer);
    final Sign sign=(Sign)viewer.getLocation().getBlock().getState();
    final String[] content=viewer.getContent().split(""String_Node_Str"");
    if (viewer.getContent().startsWith(""String_Node_Str"")) {
      int task=Bukkit.getScheduler().scheduleSyncRepeatingTask(DenizenAPI.getCurrentInstance(),new Runnable(){
        public void run(){
          Player player=Bukkit.getPlayerExact(content[1]);
          if (player == null)           Utilities.setSignLines((Sign)sign,new String[]{""String_Node_Str"",content[1],""String_Node_Str"",""String_Node_Str""});
 else           Utilities.setSignLines((Sign)sign,new String[]{String.valueOf(player.getLocation().getX()),String.valueOf(player.getLocation().getY()),String.valueOf(player.getLocation().getZ()),player.getWorld().getName()});
        }
      }
,0,20);
      viewer.setTask(task);
    }
  }
}","@EventHandler public static void reloadViewers(SavesReloadEvent event){
  for (  Viewer viewer : viewers.values()) {
    Bukkit.getScheduler().cancelTask(viewer.getTask());
  }
  viewers.clear();
  FileConfiguration saves=DenizenAPI.getCurrentInstance().getSaves();
  if (saves.contains(""String_Node_Str""))   for (  String key : saves.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
    Viewer viewer=new Viewer(key,saves.getString(""String_Node_Str"" + key.toLowerCase() + ""String_Node_Str""),dLocation.valueOf(saves.getString(""String_Node_Str"" + key.toLowerCase() + ""String_Node_Str"")));
    viewers.put(key,viewer);
    final Sign sign=(Sign)viewer.getLocation().getBlock().getState();
    final String[] content=viewer.getContent().split(""String_Node_Str"");
    if (viewer.getContent().startsWith(""String_Node_Str"")) {
      int task=Bukkit.getScheduler().scheduleSyncRepeatingTask(DenizenAPI.getCurrentInstance(),new Runnable(){
        public void run(){
          Player player=Bukkit.getPlayerExact(content[1]);
          if (player == null)           Utilities.setSignLines((Sign)sign,new String[]{""String_Node_Str"",content[1],""String_Node_Str"",""String_Node_Str""});
 else           Utilities.setSignLines((Sign)sign,new String[]{String.valueOf(player.getLocation().getX()),String.valueOf(player.getLocation().getY()),String.valueOf(player.getLocation().getZ()),player.getWorld().getName()});
        }
      }
,0,20);
      viewer.setTask(task);
    }
  }
 else   return;
}",0.9805261359754014
10397,"public boolean matches(String string){
  return value.equalsIgnoreCase(string);
}","public boolean matches(String values){
  for (  String value : values.split(""String_Node_Str""))   if (value.trim().equalsIgnoreCase(this.value))   return true;
  return false;
}",0.5193798449612403
10398,"public boolean execute(ScriptEntry scriptEntry){
  Matcher m=definition_pattern.matcher(scriptEntry.getCommandName());
  StringBuffer sb=new StringBuffer();
  while (m.find()) {
    if (scriptEntry.getResidingQueue().context.containsKey(m.group(1).toLowerCase()))     m.appendReplacement(sb,scriptEntry.getResidingQueue().context.get(m.group(1)));
 else     m.appendReplacement(sb,""String_Node_Str"");
  }
  m.appendTail(sb);
  scriptEntry.setCommandName(sb.toString());
  if (plugin.getCommandRegistry().get(scriptEntry.getCommandName()) == null) {
    dB.echoDebug(DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName());
    dB.echoError(scriptEntry.getCommandName() + ""String_Node_Str"");
    dB.echoDebug(DebugElement.Footer);
    return false;
  }
  AbstractCommand command=plugin.getCommandRegistry().get(scriptEntry.getCommandName());
  if (scriptEntry.getPlayer() != null)   dB.echoDebug(DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName() + ""String_Node_Str""+ scriptEntry.getPlayer().getName());
 else   dB.echoDebug(DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName() + (scriptEntry.getNPC() != null ? ""String_Node_Str"" + scriptEntry.getNPC().getName() : ""String_Node_Str""));
  boolean keepGoing=true;
  try {
    if (command.getOptions().REQUIRED_ARGS > scriptEntry.getArguments().size())     throw new InvalidArgumentsException(""String_Node_Str"");
    if (scriptEntry.has_tags)     scriptEntry.setArguments(TagManager.fillArguments(scriptEntry.getArguments(),scriptEntry,true));
    List<String> newArgs=new ArrayList<String>();
    if (!scriptEntry.getResidingQueue().context.isEmpty())     dB.echoDebug(""String_Node_Str"" + scriptEntry.getResidingQueue().context.toString());
    for (    String arg : scriptEntry.getArguments()) {
      m=definition_pattern.matcher(arg);
      sb=new StringBuffer();
      while (m.find()) {
        if (scriptEntry.getResidingQueue().context.containsKey(m.group(1).toLowerCase()))         m.appendReplacement(sb,scriptEntry.getResidingQueue().context.get(m.group(1)));
 else         m.appendReplacement(sb,""String_Node_Str"");
      }
      m.appendTail(sb);
      arg=sb.toString();
      if (aH.matchesValueArg(""String_Node_Str"",arg,aH.ArgumentType.String)) {
        arg=TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),arg,false);
        scriptEntry.setPlayer(dPlayer.valueOf(aH.getStringFrom(arg)));
      }
 else       if (aH.matchesValueArg(""String_Node_Str"",arg,aH.ArgumentType.String)) {
        dB.echoDebug(""String_Node_Str"");
        arg=TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),arg,false);
        if (dNPC.matches(aH.getStringFrom(arg)))         scriptEntry.setNPC(dNPC.valueOf(aH.getStringFrom(arg)));
      }
 else       newArgs.add(arg);
    }
    scriptEntry.setArguments(newArgs);
    if (scriptEntry.has_tags)     scriptEntry.setArguments(TagManager.fillArguments(scriptEntry.getArguments(),scriptEntry,false));
    command.parseArgs(scriptEntry);
  }
 catch (  InvalidArgumentsException e) {
    keepGoing=false;
    dB.echoError(""String_Node_Str"");
    dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
    dB.echoDebug(""String_Node_Str"" + command.getUsageHint());
    dB.echoDebug(DebugElement.Footer);
  }
catch (  Exception e) {
    keepGoing=false;
    dB.echoError(""String_Node_Str"");
    if (!dB.showStackTraces)     dB.echoError(""String_Node_Str"");
 else     e.printStackTrace();
    dB.echoDebug(DebugElement.Footer);
  }
 finally {
    if (keepGoing)     try {
      ScriptEntryExecuteEvent event=new ScriptEntryExecuteEvent(scriptEntry);
      Bukkit.getServer().getPluginManager().callEvent(event);
      if (event.isAltered())       scriptEntry=event.getScriptEntry();
      if (!event.isCancelled())       command.execute(scriptEntry);
 else       dB.echoDebug(""String_Node_Str"");
    }
 catch (    Exception e) {
      dB.echoError(""String_Node_Str"");
      if (!dB.showStackTraces)       dB.echoError(""String_Node_Str"");
 else       e.printStackTrace();
    }
  }
  return true;
}","public boolean execute(ScriptEntry scriptEntry){
  Matcher m=definition_pattern.matcher(scriptEntry.getCommandName());
  StringBuffer sb=new StringBuffer();
  while (m.find()) {
    if (scriptEntry.getResidingQueue().context.containsKey(m.group(1).toLowerCase()))     m.appendReplacement(sb,scriptEntry.getResidingQueue().context.get(m.group(1)));
 else     m.appendReplacement(sb,""String_Node_Str"");
  }
  m.appendTail(sb);
  scriptEntry.setCommandName(sb.toString());
  if (plugin.getCommandRegistry().get(scriptEntry.getCommandName()) == null) {
    dB.echoDebug(DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName());
    dB.echoError(scriptEntry.getCommandName() + ""String_Node_Str"");
    dB.echoDebug(DebugElement.Footer);
    return false;
  }
  AbstractCommand command=plugin.getCommandRegistry().get(scriptEntry.getCommandName());
  if (scriptEntry.getPlayer() != null)   dB.echoDebug(DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName() + ""String_Node_Str""+ scriptEntry.getPlayer().getName());
 else   dB.echoDebug(DebugElement.Header,""String_Node_Str"" + scriptEntry.getCommandName() + (scriptEntry.getNPC() != null ? ""String_Node_Str"" + scriptEntry.getNPC().getName() : ""String_Node_Str""));
  boolean keepGoing=true;
  try {
    if (command.getOptions().REQUIRED_ARGS > scriptEntry.getArguments().size())     throw new InvalidArgumentsException(""String_Node_Str"");
    if (scriptEntry.has_tags)     scriptEntry.setArguments(TagManager.fillArguments(scriptEntry.getArguments(),scriptEntry,true));
    List<String> newArgs=new ArrayList<String>();
    if (!scriptEntry.getResidingQueue().context.isEmpty())     dB.echoDebug(""String_Node_Str"" + scriptEntry.getResidingQueue().context.toString());
    for (    String arg : scriptEntry.getArguments()) {
      m=definition_pattern.matcher(arg);
      sb=new StringBuffer();
      while (m.find()) {
        if (scriptEntry.getResidingQueue().context.containsKey(m.group(1).toLowerCase()))         m.appendReplacement(sb,scriptEntry.getResidingQueue().context.get(m.group(1).toLowerCase()));
 else         m.appendReplacement(sb,""String_Node_Str"");
      }
      m.appendTail(sb);
      arg=sb.toString();
      if (aH.matchesValueArg(""String_Node_Str"",arg,aH.ArgumentType.String)) {
        arg=TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),arg,false);
        scriptEntry.setPlayer(dPlayer.valueOf(aH.getStringFrom(arg)));
      }
 else       if (aH.matchesValueArg(""String_Node_Str"",arg,aH.ArgumentType.String)) {
        dB.echoDebug(""String_Node_Str"");
        arg=TagManager.tag(scriptEntry.getPlayer(),scriptEntry.getNPC(),arg,false);
        if (dNPC.matches(aH.getStringFrom(arg)))         scriptEntry.setNPC(dNPC.valueOf(aH.getStringFrom(arg)));
      }
 else       newArgs.add(arg);
    }
    scriptEntry.setArguments(newArgs);
    if (scriptEntry.has_tags)     scriptEntry.setArguments(TagManager.fillArguments(scriptEntry.getArguments(),scriptEntry,false));
    command.parseArgs(scriptEntry);
  }
 catch (  InvalidArgumentsException e) {
    keepGoing=false;
    dB.echoError(""String_Node_Str"");
    dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
    dB.echoDebug(""String_Node_Str"" + command.getUsageHint());
    dB.echoDebug(DebugElement.Footer);
  }
catch (  Exception e) {
    keepGoing=false;
    dB.echoError(""String_Node_Str"");
    if (!dB.showStackTraces)     dB.echoError(""String_Node_Str"");
 else     e.printStackTrace();
    dB.echoDebug(DebugElement.Footer);
  }
 finally {
    if (keepGoing)     try {
      ScriptEntryExecuteEvent event=new ScriptEntryExecuteEvent(scriptEntry);
      Bukkit.getServer().getPluginManager().callEvent(event);
      if (event.isAltered())       scriptEntry=event.getScriptEntry();
      if (!event.isCancelled())       command.execute(scriptEntry);
 else       dB.echoDebug(""String_Node_Str"");
    }
 catch (    Exception e) {
      dB.echoError(""String_Node_Str"");
      if (!dB.showStackTraces)       dB.echoError(""String_Node_Str"");
 else       e.printStackTrace();
    }
  }
  return true;
}",0.9983026188166828
10399,"@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().getBiome().name().toLowerCase().replace('_',' ')).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(String.valueOf(getBlock().getHumidity())).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(String.valueOf(getBlock().getTemperature())).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(String.valueOf(getBlock().getBiome().name())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(this.add(0,-1,0)).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(this.add(0,1,0)).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && attribute.getContext(1).split(""String_Node_Str"").length == 3) {
      String[] ints=attribute.getContext(1).split(""String_Node_Str"",3);
      if ((aH.matchesDouble(ints[0]) || aH.matchesInteger(ints[0])) && (aH.matchesDouble(ints[1]) || aH.matchesInteger(ints[1])) && (aH.matchesDouble(ints[2]) || aH.matchesInteger(ints[2])))       return new dLocation(this.add(Double.valueOf(ints[0]),Double.valueOf(ints[1]),Double.valueOf(ints[2]))).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().getType().toString()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   if (attribute.hasContext(1) && dLocation.matches(attribute.getContext(1)))   return new Element(Rotation.getCardinal(Rotation.getYaw(this.toVector().subtract(dLocation.valueOf(attribute.getContext(1)).toVector()).normalize()))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && dLocation.matches(attribute.getContext(1))) {
      dLocation toLocation=dLocation.valueOf(attribute.getContext(1));
      if (attribute.getAttribute(2).startsWith(""String_Node_Str"")) {
        if (attribute.getAttribute(3).startsWith(""String_Node_Str""))         return new Element(String.valueOf(Math.sqrt(Math.pow(this.getX() - toLocation.getX(),2) + Math.pow(toLocation.getZ() - toLocation.getZ(),2)))).getAttribute(attribute.fulfill(3));
 else         if (this.getWorld() == toLocation.getWorld())         return new Element(String.valueOf(Math.sqrt(Math.pow(this.getX() - toLocation.getX(),2) + Math.pow(toLocation.getZ() - toLocation.getZ(),2)))).getAttribute(attribute.fulfill(2));
      }
 else       if (attribute.getAttribute(2).startsWith(""String_Node_Str"")) {
        if (attribute.getAttribute(3).startsWith(""String_Node_Str""))         return new Element(String.valueOf(Math.abs(this.getY() - toLocation.getY()))).getAttribute(attribute.fulfill(3));
 else         if (this.getWorld() == toLocation.getWorld())         return new Element(String.valueOf(Math.abs(this.getY() - toLocation.getY()))).getAttribute(attribute.fulfill(2));
      }
 else       return new Element(String.valueOf(this.distance(toLocation))).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(""String_Node_Str"" + getBlockX() + ""String_Node_Str""+ getBlockY()+ ""String_Node_Str""+ getBlockZ()+ ""String_Node_Str""+ getWorld().getName()+ ""String_Node_Str"").getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(""String_Node_Str"" + getX() + ""String_Node_Str""+ getY()+ ""String_Node_Str""+ getZ()+ ""String_Node_Str""+ getWorld().getName()+ ""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(String.valueOf(getBlock().isLiquid())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(String.valueOf((int)getBlock().getLightFromBlocks())).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(String.valueOf((int)getBlock().getLightFromSky())).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(String.valueOf((int)getBlock().getLightLevel())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(String.valueOf(getBlock().getBlockPower())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.worldGuard == null) {
      dB.echoError(""String_Node_Str"");
      return null;
    }
    String region=attribute.getContext(1);
    return new Element(String.valueOf(WorldGuardUtilities.checkWGRegion(this,region))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return dWorld.mirrorBukkitWorld(getWorld()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getBlockX()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getBlockY()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getBlockZ()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getX()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getY()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getZ()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getBlock().getState() instanceof Sign) {
      return new dList(Arrays.asList(((Sign)getBlock().getState()).getLines())).getAttribute(attribute.fulfill(2));
    }
 else     return ""String_Node_Str"";
  }
  return new Element(identify()).getAttribute(attribute.fulfill(0));
}","@Override public String getAttribute(Attribute attribute){
  if (attribute == null)   return null;
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().getBiome().name().toLowerCase().replace('_',' ')).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(String.valueOf(getBlock().getHumidity())).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(String.valueOf(getBlock().getTemperature())).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(String.valueOf(getBlock().getBiome().name())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(this.add(0,-1,0)).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new dLocation(this.add(0,1,0)).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && attribute.getContext(1).split(""String_Node_Str"").length == 3) {
      String[] ints=attribute.getContext(1).split(""String_Node_Str"",3);
      if ((aH.matchesDouble(ints[0]) || aH.matchesInteger(ints[0])) && (aH.matchesDouble(ints[1]) || aH.matchesInteger(ints[1])) && (aH.matchesDouble(ints[2]) || aH.matchesInteger(ints[2])))       return new dLocation(this.clone().add(Double.valueOf(ints[0]),Double.valueOf(ints[1]),Double.valueOf(ints[2]))).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(getBlock().getType().toString()).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   if (attribute.hasContext(1) && dLocation.matches(attribute.getContext(1)))   return new Element(Rotation.getCardinal(Rotation.getYaw(this.toVector().subtract(dLocation.valueOf(attribute.getContext(1)).toVector()).normalize()))).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (attribute.hasContext(1) && dLocation.matches(attribute.getContext(1))) {
      dLocation toLocation=dLocation.valueOf(attribute.getContext(1));
      if (attribute.getAttribute(2).startsWith(""String_Node_Str"")) {
        if (attribute.getAttribute(3).startsWith(""String_Node_Str""))         return new Element(String.valueOf(Math.sqrt(Math.pow(this.getX() - toLocation.getX(),2) + Math.pow(toLocation.getZ() - toLocation.getZ(),2)))).getAttribute(attribute.fulfill(3));
 else         if (this.getWorld() == toLocation.getWorld())         return new Element(String.valueOf(Math.sqrt(Math.pow(this.getX() - toLocation.getX(),2) + Math.pow(toLocation.getZ() - toLocation.getZ(),2)))).getAttribute(attribute.fulfill(2));
      }
 else       if (attribute.getAttribute(2).startsWith(""String_Node_Str"")) {
        if (attribute.getAttribute(3).startsWith(""String_Node_Str""))         return new Element(String.valueOf(Math.abs(this.getY() - toLocation.getY()))).getAttribute(attribute.fulfill(3));
 else         if (this.getWorld() == toLocation.getWorld())         return new Element(String.valueOf(Math.abs(this.getY() - toLocation.getY()))).getAttribute(attribute.fulfill(2));
      }
 else       return new Element(String.valueOf(this.distance(toLocation))).getAttribute(attribute.fulfill(1));
    }
  }
  if (attribute.startsWith(""String_Node_Str""))   return new Element(""String_Node_Str"" + getBlockX() + ""String_Node_Str""+ getBlockY()+ ""String_Node_Str""+ getBlockZ()+ ""String_Node_Str""+ getWorld().getName()+ ""String_Node_Str"").getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(""String_Node_Str"" + getX() + ""String_Node_Str""+ getY()+ ""String_Node_Str""+ getZ()+ ""String_Node_Str""+ getWorld().getName()+ ""String_Node_Str"").getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(String.valueOf(getBlock().isLiquid())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(String.valueOf((int)getBlock().getLightFromBlocks())).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str"") || attribute.startsWith(""String_Node_Str""))   return new Element(String.valueOf((int)getBlock().getLightFromSky())).getAttribute(attribute.fulfill(2));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(String.valueOf((int)getBlock().getLightLevel())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str""))   return new Element(String.valueOf(getBlock().getBlockPower())).getAttribute(attribute.fulfill(1));
  if (attribute.startsWith(""String_Node_Str"")) {
    if (Depends.worldGuard == null) {
      dB.echoError(""String_Node_Str"");
      return null;
    }
    String region=attribute.getContext(1);
    return new Element(String.valueOf(WorldGuardUtilities.checkWGRegion(this,region))).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return dWorld.mirrorBukkitWorld(getWorld()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getBlockX()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getBlockY()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getBlockZ()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getX()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getY()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return new Element(getZ()).getAttribute(attribute.fulfill(1));
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    if (getBlock().getState() instanceof Sign) {
      return new dList(Arrays.asList(((Sign)getBlock().getState()).getLines())).getAttribute(attribute.fulfill(2));
    }
 else     return ""String_Node_Str"";
  }
  return new Element(identify()).getAttribute(attribute.fulfill(0));
}",0.9993557738766308
10400,"@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  for (  String arg : args) {
    if (aH.matchesQuantity(arg)) {
      quantity=aH.getIntegerFrom(arg);
      dB.echoDebug(""String_Node_Str"" + quantity);
      continue;
    }
 else     if (aH.matchesItem(arg)) {
      if (ScriptRegistry.getScriptContainerAs(aH.getStringFrom(arg),ItemScriptContainer.class) != null) {
        item=ScriptRegistry.getScriptContainerAs(aH.getStringFrom(arg),ItemScriptContainer.class).getItemFrom(context.getPlayer(),context.getNPC()).getItemStack();
        dB.echoDebug(""String_Node_Str"");
        continue;
      }
 else {
        item=aH.getItemFrom(arg).getItemStack();
        dB.echoDebug(""String_Node_Str"");
        continue;
      }
    }
 else     if (aH.matchesItem(""String_Node_Str"" + arg)) {
      item=aH.getItemFrom(""String_Node_Str"" + arg).getItemStack();
      dB.echoDebug(""String_Node_Str"");
      continue;
    }
 else     throw new RequirementCheckException(""String_Node_Str"");
  }
  if (context.getPlayer().getPlayerEntity().getInventory().containsAtLeast(item,quantity)) {
    dB.echoDebug(""String_Node_Str"");
    return true;
  }
 else {
    dB.echoDebug(""String_Node_Str"");
    return false;
  }
}","@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  dItem contains=null;
  int quantity=1;
  for (  aH.Argument arg : aH.interpret(args)) {
    if (contains == null && arg.matchesArgumentType(dItem.class))     contains=arg.asType(dItem.class);
 else     if (arg.matchesPrimitive(aH.PrimitiveType.Integer))     quantity=aH.getIntegerFrom(arg.getValue());
  }
  if (context.getPlayer().getPlayerEntity().getInventory().containsAtLeast(contains.getItemStack(),quantity)) {
    dB.echoDebug(""String_Node_Str"" + contains.identify() + ""String_Node_Str"");
    return true;
  }
 else {
    dB.echoDebug(""String_Node_Str"" + contains.identify() + ""String_Node_Str"");
    return false;
  }
}",0.2945273631840796
10401,"public boolean startsWith(String string,int attribute){
  string=string.toLowerCase();
  if (attributes.isEmpty())   return false;
  if (attributes.size() < attribute)   return false;
  if (raw_tag.split(""String_Node_Str"",attribute)[2].toLowerCase().startsWith(string))   return true;
  return false;
}","public boolean startsWith(String string,int attribute){
  string=string.toLowerCase();
  if (attributes.isEmpty())   return false;
  if (attributes.size() < attribute)   return false;
  if (raw_tag.split(""String_Node_Str"",attribute)[attribute - 1].toLowerCase().startsWith(string))   return true;
  return false;
}",0.9772727272727272
10402,"@EventHandler public void entityTarget(EntityTargetEvent event){
  Map<String,Object> context=new HashMap<String,Object>();
  Entity entity=event.getEntity();
  Entity target=event.getTarget();
  context.put(""String_Node_Str"",event.getReason().name());
  context.put(""String_Node_Str"",new dEntity(entity));
  if (event.getTarget() instanceof Player) {
    context.put(""String_Node_Str"",new dPlayer((Player)target));
  }
 else {
    context.put(""String_Node_Str"",new dEntity(target));
  }
  String determination=doEvents(Arrays.asList(entity.getType().name() + ""String_Node_Str"" + target.getType().name(),entity.getType().name() + ""String_Node_Str"" + target.getType().name()+ ""String_Node_Str""+ event.getReason().name()),null,null,context);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
  if (determination.toUpperCase().startsWith(""String_Node_Str"")) {
    dEntity newTarget=dEntity.valueOf(aH.getStringFrom(determination));
    if (newTarget.getBukkitEntity() != null) {
      event.setTarget(newTarget.getBukkitEntity());
    }
  }
}","@EventHandler public void entityTarget(EntityTargetEvent event){
  Map<String,Object> context=new HashMap<String,Object>();
  Entity entity=event.getEntity();
  Entity target=event.getTarget();
  Player player=null;
  String reason=event.getReason().name();
  String entityType=entity.getType().name();
  context.put(""String_Node_Str"",new dEntity(entity));
  context.put(""String_Node_Str"",reason);
  List<String> events=new ArrayList<String>();
  events.add(""String_Node_Str"");
  events.add(""String_Node_Str"" + reason);
  events.add(entityType + ""String_Node_Str"" + reason);
  if (target != null) {
    if (event.getTarget() instanceof Player) {
      player=(Player)target;
      context.put(""String_Node_Str"",new dPlayer(player));
    }
 else {
      context.put(""String_Node_Str"",new dEntity(target));
    }
    String targetType=target.getType().name();
    events.add(""String_Node_Str"");
    events.add(""String_Node_Str"" + reason);
    events.add(""String_Node_Str"" + targetType);
    events.add(""String_Node_Str"" + targetType + ""String_Node_Str""+ reason);
    events.add(entityType + ""String_Node_Str"");
    events.add(entityType + ""String_Node_Str"" + reason);
    events.add(entityType + ""String_Node_Str"" + targetType);
    events.add(entityType + ""String_Node_Str"" + targetType+ ""String_Node_Str""+ reason);
  }
  String determination=doEvents(events,null,player,context);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
  if (determination.toUpperCase().startsWith(""String_Node_Str"")) {
    dEntity newTarget=dEntity.valueOf(aH.getStringFrom(determination));
    if (newTarget.getBukkitEntity() != null) {
      event.setTarget(newTarget.getBukkitEntity());
    }
  }
}",0.4208273894436519
10403,"public boolean determineOutcome(){
  outcome=false;
  if (comparable instanceof String) {
    compare_as_strings();
    return outcome;
  }
 else   if (comparable instanceof dList) {
    compare_as_list();
    return outcome;
  }
 else   if (comparable instanceof Double) {
    compare_as_numbers();
    return outcome;
  }
 else   if (comparable instanceof Boolean) {
    if (!(comparedto instanceof Boolean)) {
    }
 else {
      if (comparable.equals(comparedto))       outcome=true;
 else       outcome=false;
    }
  }
  if (logic == Comparable.Logic.NEGATIVE)   outcome=!outcome;
  return outcome;
}","public boolean determineOutcome(){
  outcome=false;
  if (comparable instanceof String) {
    compare_as_strings();
  }
 else   if (comparable instanceof dList) {
    compare_as_list();
  }
 else   if (comparable instanceof Double) {
    compare_as_numbers();
  }
 else   if (comparable instanceof Boolean) {
    if (!(comparedto instanceof Boolean)) {
    }
 else {
      if (comparable.equals(comparedto))       outcome=true;
 else       outcome=false;
    }
  }
  if (logic == Comparable.Logic.NEGATIVE)   outcome=!outcome;
  return outcome;
}",0.9479166666666666
10404,"@Override public String identify(){
  if (isSaved(this))   return ""String_Node_Str"" + getSaved(this);
 else   if (CustomNBT.hasCustomNBT(getItemStack(),""String_Node_Str""))   return CustomNBT.getCustomNBT(getItemStack(),""String_Node_Str"");
 else   if (getItemStack() != null)   return getItemStack().getType().name().toLowerCase() + (getItemStack().getData().getData() != 0 ? ""String_Node_Str"" + getItemStack().getData().getData() : ""String_Node_Str"");
  return ""String_Node_Str"";
}","@Override public String identify(){
  if (getItemStack() == null)   return null;
  if (getItemStack().getTypeId() != 0) {
    if (isSaved(this))     return ""String_Node_Str"" + getSaved(this);
 else     if (CustomNBT.hasCustomNBT(getItemStack(),""String_Node_Str""))     return CustomNBT.getCustomNBT(getItemStack(),""String_Node_Str"");
  }
  return getItemStack().getType().name().toLowerCase() + (getItemStack().getData().getData() != 0 ? ""String_Node_Str"" + getItemStack().getData().getData() : ""String_Node_Str"");
}",0.3393574297188755
10405,"@Override public void registerCoreMembers(){
  registerCoreMember(AnnounceCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(AttackCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(AnimateChestCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(AnchorCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(AssignmentCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(BurnCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(CastCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ChatCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ChunkLoadCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(CooldownCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(CopyBlockCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(DetermineCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(DefineCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(DisengageCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(DisplayItemCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(DropCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(EngageCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(EngraveCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(EquipCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ExecuteCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(ExperienceCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(ExplodeCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(FailCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(FeedCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(FinishCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(FireworkCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(FishCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(FlagCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(FlyCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(FollowCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(ForEachCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(GiveCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(GroupCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(HeadCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(HealCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(HealthCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(HurtCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(IfCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(InventoryCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(InvisibleCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(ListenCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(LogCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(LookCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(LookcloseCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(MidiCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(MountCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(ModifyBlockCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(NameplateCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(NarrateCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(NewCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(OxygenCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(PlayEffectCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(PlaySoundCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(PermissionCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(PoseCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(PauseCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(QueueCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(RandomCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(RemoveCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(ResetCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(RuntaskCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ScoreboardCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ScribeCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ShootCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(SignCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(SitCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(SpawnCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(StandCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(StrikeCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(SwitchCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(TakeCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(TeleportCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(TimeCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(TriggerCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(VulnerableCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(WaitCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(WalkCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(WeatherCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(YamlCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ZapCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  dB.echoApproval(""String_Node_Str"" + instances.keySet().toString());
}","@Override public void registerCoreMembers(){
  registerCoreMember(AnchorCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(AnimateCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(AnimateChestCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(AnnounceCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(AssignmentCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(AttackCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(BurnCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(CastCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ChatCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ChunkLoadCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(CooldownCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(CopyBlockCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(DefineCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(DetermineCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(DisengageCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(DisplayItemCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(DropCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(EngageCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(EngraveCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(EquipCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ExecuteCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(ExperienceCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(ExplodeCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(FailCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(FeedCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(FinishCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(FireworkCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(FishCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(FlagCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(FlyCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(FollowCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(ForEachCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(GiveCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(GroupCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(HeadCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(HealCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(HealthCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(HurtCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(IfCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(InventoryCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(InvisibleCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(ListenCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(LogCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(LookCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(LookcloseCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(MidiCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(MountCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(ModifyBlockCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(NameplateCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(NarrateCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(NewCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(OxygenCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(PlayEffectCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(PlaySoundCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(PermissionCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(PoseCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(PauseCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(QueueCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(RandomCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(RemoveCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(ResetCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(RuntaskCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ScoreboardCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ScribeCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ShootCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(SignCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(SitCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(SpawnCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(StandCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(StrikeCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(SwitchCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(TakeCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(TeleportCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(TimeCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(TriggerCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(VulnerableCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(WaitCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(WalkCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(WeatherCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(YamlCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ZapCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  dB.echoApproval(""String_Node_Str"" + instances.keySet().toString());
}",0.943609022556391
10406,"@EventHandler public void playerInteractEntity(PlayerInteractEntityEvent event){
  Entity entity=event.getRightClicked();
  String determination;
  Map<String,Object> context=new HashMap<String,Object>();
  context.put(""String_Node_Str"",new dLocation(event.getRightClicked().getLocation()));
  if (entity instanceof Player) {
    context.put(""String_Node_Str"",new dPlayer((Player)entity));
  }
 else {
    context.put(""String_Node_Str"",new dEntity(entity));
  }
  List<String> events=new ArrayList<String>();
  events.add(""String_Node_Str"");
  events.add(""String_Node_Str"" + entity.getType().name());
  if (entity instanceof ItemFrame) {
    dItem item=new dItem(((ItemFrame)entity).getItem());
    context.put(""String_Node_Str"",item);
    events.add(""String_Node_Str"" + entity.getType().name() + ""String_Node_Str""+ item.identify().split(""String_Node_Str"")[0]);
  }
  determination=doEvents(events,null,event.getPlayer(),context);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
}","@EventHandler public void playerInteractEntity(PlayerInteractEntityEvent event){
  Entity entity=event.getRightClicked();
  dItem item=new dItem(event.getPlayer().getItemInHand());
  String determination;
  Map<String,Object> context=new HashMap<String,Object>();
  context.put(""String_Node_Str"",new dLocation(event.getRightClicked().getLocation()));
  if (entity instanceof Player) {
    context.put(""String_Node_Str"",new dPlayer((Player)entity));
  }
 else {
    context.put(""String_Node_Str"",new dEntity(entity));
  }
  List<String> events=new ArrayList<String>();
  events.add(""String_Node_Str"");
  events.add(""String_Node_Str"" + entity.getType().name());
  events.add(""String_Node_Str"" + item.identify().split(""String_Node_Str"")[0]);
  events.add(""String_Node_Str"" + item.identify());
  events.add(""String_Node_Str"" + entity.getType().name() + ""String_Node_Str""+ item.identify().split(""String_Node_Str"")[0]);
  events.add(""String_Node_Str"" + entity.getType().name() + ""String_Node_Str""+ item.identify());
  if (entity instanceof ItemFrame) {
    dItem itemFrame=new dItem(((ItemFrame)entity).getItem());
    context.put(""String_Node_Str"",itemFrame);
    events.add(""String_Node_Str"" + entity.getType().name() + ""String_Node_Str""+ itemFrame.identify().split(""String_Node_Str"")[0]);
  }
  determination=doEvents(events,null,event.getPlayer(),context);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
}",0.6580436540016168
10407,"/** 
 * To be used with the dBuggers' .report to provide debug output for objects that don't extend dObject.
 * @param prefix  name/type/simple description of the object being reported
 * @param value  object being reported will report the value of toString()
 * @return  color coded debug report
 */
public static String debugObj(String prefix,Object value){
  return ""String_Node_Str"" + prefix + ""String_Node_Str""+ value.toString()+ ""String_Node_Str"";
}","/** 
 * To be used with the dBuggers' .report to provide debug output for objects that don't extend dObject.
 * @param prefix  name/type/simple description of the object being reported
 * @param value  object being reported will report the value of toString()
 * @return  color coded debug report
 */
public static String debugObj(String prefix,Object value){
  return ""String_Node_Str"" + prefix + ""String_Node_Str""+ (value != null ? value.toString() : ""String_Node_Str"")+ ""String_Node_Str"";
}",0.959915611814346
10408,"/** 
 * To be used with the dBuggers' .report to provide debug output for objects that may have some kind of id or type also associated with the object.
 * @param prefix  name/type/simple description of the object being reported
 * @param id  additional id/type of the object
 * @param value  object being reported will report the value of toString()
 * @return  color coded debug report
 */
public static String debugUniqueObj(String prefix,String id,Object value){
  return ""String_Node_Str"" + prefix + ""String_Node_Str""+ id+ ""String_Node_Str""+ value.toString()+ ""String_Node_Str"";
}","/** 
 * To be used with the dBuggers' .report to provide debug output for objects that may have some kind of id or type also associated with the object.
 * @param prefix  name/type/simple description of the object being reported
 * @param id  additional id/type of the object
 * @param value  object being reported will report the value of toString()
 * @return  color coded debug report
 */
public static String debugUniqueObj(String prefix,String id,Object value){
  return ""String_Node_Str"" + prefix + ""String_Node_Str""+ id+ ""String_Node_Str""+ (value != null ? value.toString() : ""String_Node_Str"")+ ""String_Node_Str"";
}",0.968543046357616
10409,"/** 
 * Replaces FLAG TAGs. Called automatically by the dScript ScriptBuilder and Executer.
 * @param event ReplaceableTagEvent
 */
@EventHandler public void flagTag(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  if (!event.hasValue())   return;
  String flagName=event.getValue().split(""String_Node_Str"").length > 1 ? event.getValue().split(""String_Node_Str"")[0].toUpperCase() : event.getValue().toUpperCase();
  String flagFallback=event.getAlternative() != null ? event.getAlternative() : ""String_Node_Str"";
  int index=-1;
  ReplaceType replaceType=ReplaceType.ASSTRING;
  if (flagName.contains(""String_Node_Str"")) {
    try {
      int replaceTypeIndex=flagName.split(""String_Node_Str"").length - 1;
      replaceType=ReplaceType.valueOf(flagName.split(""String_Node_Str"")[replaceTypeIndex].replace(""String_Node_Str"",""String_Node_Str"").toUpperCase());
      flagName=flagName.replace(""String_Node_Str"" + flagName.split(""String_Node_Str"")[replaceTypeIndex],""String_Node_Str"");
    }
 catch (    Exception e) {
      e.printStackTrace();
      replaceType=ReplaceType.ASSTRING;
    }
  }
  if (event.hasValueContext()) {
    try {
      index=Integer.valueOf(event.getValueContext());
    }
 catch (    NumberFormatException e) {
      index=-1;
    }
  }
  if (event.getType().toUpperCase().startsWith(""String_Node_Str"")) {
    if (denizen.flagManager().getGlobalFlag(flagName).get(index).isEmpty()) {
    }
 else {
      FlagManager.Flag flag=denizen.flagManager().getGlobalFlag(flagName);
      event.setReplaced(getReplaceable(flag,flag.get(index),replaceType));
    }
  }
 else   if (event.getType().toUpperCase().startsWith(""String_Node_Str"") || event.getType().toUpperCase().startsWith(""String_Node_Str"")) {
    if (denizen.flagManager().getNPCFlag(event.getNPC().getId(),flagName).get(index).isEmpty()) {
    }
 else {
      FlagManager.Flag flag=denizen.flagManager().getNPCFlag(event.getNPC().getId(),flagName);
      event.setReplaced(getReplaceable(flag,flag.get(index),replaceType));
    }
  }
 else   if (event.getType().toUpperCase().startsWith(""String_Node_Str"")) {
    String name=null;
    if (event.getPlayer() != null)     name=event.getPlayer().getName();
    if (name == null)     return;
    if (denizen.flagManager().getPlayerFlag(name,flagName).get(index).isEmpty()) {
      if (replaceType.toString() == ""String_Node_Str"")       event.setReplaced(""String_Node_Str"");
    }
 else {
      FlagManager.Flag flag=denizen.flagManager().getPlayerFlag(name,flagName);
      event.setReplaced(getReplaceable(flag,flag.get(index),replaceType));
    }
  }
}","/** 
 * Replaces FLAG TAGs. Called automatically by the dScript ScriptBuilder and Executer.
 * @param event ReplaceableTagEvent
 */
@EventHandler public void flagTag(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  if (!event.hasValue())   return;
  String flagName=event.getValue().split(""String_Node_Str"").length > 1 ? event.getValue().split(""String_Node_Str"")[0].toUpperCase() : event.getValue().toUpperCase();
  String flagFallback=event.getAlternative() != null ? event.getAlternative() : ""String_Node_Str"";
  int index=-1;
  ReplaceType replaceType=ReplaceType.ASSTRING;
  if (flagName.contains(""String_Node_Str"")) {
    try {
      int replaceTypeIndex=flagName.split(""String_Node_Str"").length - 1;
      replaceType=ReplaceType.valueOf(flagName.split(""String_Node_Str"")[replaceTypeIndex].replace(""String_Node_Str"",""String_Node_Str"").toUpperCase());
      flagName=flagName.replace(""String_Node_Str"" + flagName.split(""String_Node_Str"")[replaceTypeIndex],""String_Node_Str"");
    }
 catch (    Exception e) {
      replaceType=ReplaceType.ASSTRING;
    }
  }
  if (event.hasValueContext()) {
    try {
      index=Integer.valueOf(event.getValueContext());
    }
 catch (    NumberFormatException e) {
      index=-1;
    }
  }
  if (event.getType().toUpperCase().startsWith(""String_Node_Str"")) {
    if (denizen.flagManager().getGlobalFlag(flagName).get(index).isEmpty()) {
    }
 else {
      FlagManager.Flag flag=denizen.flagManager().getGlobalFlag(flagName);
      event.setReplaced(getReplaceable(flag,flag.get(index),replaceType));
    }
  }
 else   if (event.getType().toUpperCase().startsWith(""String_Node_Str"") || event.getType().toUpperCase().startsWith(""String_Node_Str"")) {
    if (denizen.flagManager().getNPCFlag(event.getNPC().getId(),flagName).get(index).isEmpty()) {
    }
 else {
      FlagManager.Flag flag=denizen.flagManager().getNPCFlag(event.getNPC().getId(),flagName);
      event.setReplaced(getReplaceable(flag,flag.get(index),replaceType));
    }
  }
 else   if (event.getType().toUpperCase().startsWith(""String_Node_Str"")) {
    String name=null;
    if (event.getPlayer() != null)     name=event.getPlayer().getName();
    if (name == null)     return;
    if (denizen.flagManager().getPlayerFlag(name,flagName).get(index).isEmpty()) {
      if (replaceType.toString() == ""String_Node_Str"")       event.setReplaced(""String_Node_Str"");
    }
 else {
      FlagManager.Flag flag=denizen.flagManager().getPlayerFlag(name,flagName);
      event.setReplaced(getReplaceable(flag,flag.get(index),replaceType));
    }
  }
}",0.994796685295818
10410,"public dPlayer(OfflinePlayer player){
  this.player_name=player.getName();
  players.put(this.player_name,this);
}","public dPlayer(OfflinePlayer player){
  if (player == null)   return;
  this.player_name=player.getName();
  players.put(this.player_name,this);
}",0.8769230769230769
10411,"private void compare_as_strings(){
  outcome=false;
  String comparable=(String)this.comparable;
  String comparedto=(String)this.comparedto;
  if (comparable == null || comparedto == null)   return;
switch (operator) {
case IS_EMPTY:
    outcome=comparable.length() == 0;
  break;
case EQUALS:
outcome=comparable.equalsIgnoreCase(comparedto);
break;
case CONTAINS:
outcome=comparable.toLowerCase().contains(comparedto.toLowerCase());
break;
case OR_MORE:
outcome=comparable.length() >= comparedto.length();
break;
case OR_LESS:
outcome=comparable.length() <= comparedto.length();
break;
case MORE:
outcome=comparable.length() > comparedto.length();
break;
case LESS:
outcome=comparable.length() < comparedto.length();
break;
case MATCHES:
comparedto=comparedto.replace(""String_Node_Str"",""String_Node_Str"");
if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=dLocation.matches(comparable);
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=dEntity.matches(comparable);
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=(dEntity.matches(comparable) && dEntity.valueOf(comparable).isSpawned());
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=aH.matchesEntityType(comparable);
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=dNPC.matches(comparable);
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=dPlayer.matches(comparable);
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=(dPlayer.matches(comparable) && !dPlayer.valueOf(comparable).isOnline());
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=(dPlayer.matches(comparable) && dPlayer.valueOf(comparable).isOnline());
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=dItem.matches(comparable);
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=true;
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=Duration.matches(comparable);
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=aH.matchesDouble(comparable);
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=aH.matchesInteger(comparable);
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=aH.matchesInteger(comparable) && (aH.getIntegerFrom(comparable) % 2) == 0;
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=aH.matchesInteger(comparable) && (aH.getIntegerFrom(comparable) % 2) == 1;
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=(comparable.equalsIgnoreCase(""String_Node_Str"") || comparable.equalsIgnoreCase(""String_Node_Str""));
break;
}
}","private void compare_as_strings(){
  outcome=false;
  String comparable=String.valueOf(this.comparable);
  String comparedto=String.valueOf(this.comparedto);
  if (comparable == null || comparedto == null)   return;
switch (operator) {
case IS_EMPTY:
    outcome=comparable.length() == 0;
  break;
case EQUALS:
outcome=comparable.equalsIgnoreCase(comparedto);
break;
case CONTAINS:
outcome=comparable.toLowerCase().contains(comparedto.toLowerCase());
break;
case OR_MORE:
outcome=comparable.length() >= comparedto.length();
break;
case OR_LESS:
outcome=comparable.length() <= comparedto.length();
break;
case MORE:
outcome=comparable.length() > comparedto.length();
break;
case LESS:
outcome=comparable.length() < comparedto.length();
break;
case MATCHES:
comparedto=comparedto.replace(""String_Node_Str"",""String_Node_Str"");
if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=dLocation.matches(comparable);
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=dEntity.matches(comparable);
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=(dEntity.matches(comparable) && dEntity.valueOf(comparable).isSpawned());
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=aH.matchesEntityType(comparable);
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=dNPC.matches(comparable);
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=dPlayer.matches(comparable);
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=(dPlayer.matches(comparable) && !dPlayer.valueOf(comparable).isOnline());
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=(dPlayer.matches(comparable) && dPlayer.valueOf(comparable).isOnline());
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=dItem.matches(comparable);
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=true;
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=Duration.matches(comparable);
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=aH.matchesDouble(comparable);
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=aH.matchesInteger(comparable);
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=aH.matchesInteger(comparable) && (aH.getIntegerFrom(comparable) % 2) == 0;
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=aH.matchesInteger(comparable) && (aH.getIntegerFrom(comparable) % 2) == 1;
 else if (comparedto.equalsIgnoreCase(""String_Node_Str"")) outcome=(comparable.equalsIgnoreCase(""String_Node_Str"") || comparable.equalsIgnoreCase(""String_Node_Str""));
break;
}
}",0.982442748091603
10412,"public void registerCoreTags(){
  new PlayerTags(denizen);
  new UtilTags(denizen);
  new FlagTags(denizen);
  new ConstantTags(denizen);
  new ProcedureScriptTag(denizen);
  new NPCTags(denizen);
  new AnchorTags(denizen);
  new ContextTags(denizen);
  new LocationTags(denizen);
  new SpecialCharacterTags(denizen);
  new TextTags(denizen);
  new ForeignCharacterTags(denizen);
}","public void registerCoreTags(){
  new PlayerTags(denizen);
  new UtilTags(denizen);
  new FlagTags(denizen);
  new ConstantTags(denizen);
  new ProcedureScriptTag(denizen);
  new NPCTags(denizen);
  new AnchorTags(denizen);
  new ContextTags(denizen);
  new LocationTags(denizen);
  new SpecialCharacterTags(denizen);
  new TextTags(denizen);
}",0.9489655172413792
10413,"/** 
 * This method is used to determine if the player is in a specified WorldGuard region.
 * @param thePlayer The player to check
 * @param region The WorldGuard region to check
 * @return returns a boolean value
 */
public static boolean checkPlayerWGRegion(Player thePlayer,String region){
  if (Depends.worldGuard == null)   return false;
  boolean inRegion=false;
  ApplicableRegionSet currentRegions=Depends.worldGuard.getRegionManager(thePlayer.getWorld()).getApplicableRegions(thePlayer.getLocation());
  for (  ProtectedRegion thisRegion : currentRegions) {
    dB.echoDebug(""String_Node_Str"" + thisRegion.getId());
    if (thisRegion.getId().contains(region)) {
      inRegion=true;
      dB.echoDebug(""String_Node_Str"");
    }
  }
  return inRegion;
}","/** 
 * This method is used to determine if the player is in a specified WorldGuard region.
 * @param thePlayer The player to check
 * @param region The WorldGuard region to check
 * @return returns a boolean value
 */
public static boolean checkPlayerWGRegion(Player thePlayer,String region){
  if (Depends.worldGuard == null)   return false;
  boolean inRegion=false;
  ApplicableRegionSet currentRegions=Depends.worldGuard.getRegionManager(thePlayer.getWorld()).getApplicableRegions(thePlayer.getLocation());
  for (  ProtectedRegion thisRegion : currentRegions) {
    dB.echoDebug(""String_Node_Str"" + thisRegion.getId());
    if (thisRegion.getId().equalsIgnoreCase(region)) {
      inRegion=true;
      dB.echoDebug(""String_Node_Str"");
    }
  }
  return inRegion;
}",0.984354628422425
10414,"public void die(){
  if (player != null)   ((CraftLivingEntity)npc.getBukkitEntity()).getHandle().killer=(EntityHuman)((CraftLivingEntity)player).getHandle();
  setHealth();
  EntityDeathEvent entityDeath=new EntityDeathEvent(npc.getBukkitEntity(),null);
  NPCDeathEvent npcDeath=new NPCDeathEvent(npc,entityDeath);
  DenizenAPI.getCurrentInstance().getServer().getPluginManager().callEvent(npcDeath);
  DenizenAPI.getCurrentInstance().getServer().getPluginManager().callEvent(entityDeath);
  npc.despawn(DespawnReason.DEATH);
}","public void die(){
  try {
    if (player != null)     ((CraftLivingEntity)npc.getBukkitEntity()).getHandle().killer=(EntityHuman)((CraftLivingEntity)player).getHandle();
  }
 catch (  Exception e) {
    dB.echoError(""String_Node_Str"");
  }
  setHealth();
  EntityDeathEvent entityDeath=new EntityDeathEvent(npc.getBukkitEntity(),null);
  NPCDeathEvent npcDeath=new NPCDeathEvent(npc,entityDeath);
  DenizenAPI.getCurrentInstance().getServer().getPluginManager().callEvent(npcDeath);
  DenizenAPI.getCurrentInstance().getServer().getPluginManager().callEvent(entityDeath);
  npc.despawn(DespawnReason.DEATH);
}",0.9279437609841829
10415,"@EventHandler(priority=EventPriority.MONITOR) public void onDeath(EntityDamageEvent event){
  if (event.getEntity() != npc.getBukkitEntity() || dying)   return;
  if (this.getHealth() - event.getDamage() > 0)   return;
  dying=true;
  player=null;
  String deathCause=event.getCause().toString().toLowerCase().replace('_',' ');
  if (event instanceof EntityDamageByEntityEvent) {
    Entity killerEntity=((EntityDamageByEntityEvent)event).getDamager();
    if (killerEntity instanceof Player)     player=(Player)killerEntity;
 else     if (killerEntity instanceof Projectile) {
      LivingEntity shooter=((Projectile)killerEntity).getShooter();
      if (shooter instanceof Player)       player=(Player)shooter;
      DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"" + shooter.getType().toString(),player);
    }
    DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",player);
    DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"" + killerEntity.getType().toString(),player);
  }
 else   if (event instanceof EntityDamageByBlockEvent) {
    DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",player);
  }
  DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",player);
  DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"" + deathCause,player);
  if (npc.getBukkitEntity() == null)   return;
  loc=aH.getLocationFrom(DenizenAPI.getCurrentInstance().tagManager().tag(null,DenizenAPI.getDenizenNPC(npc),respawnLocation,false));
  if (loc == null)   loc=npc.getBukkitEntity().getLocation();
  if (animatedeath) {
    setHealth();
    npc.getBukkitEntity().playEffect(EntityEffect.DEATH);
    Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(DenizenAPI.getCurrentInstance(),new Runnable(){
      public void run(){
        die();
      }
    }
,(long)((Duration.valueOf(animationDelay).getSeconds() * 20)));
  }
 else {
    die();
  }
  if (respawn) {
    Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(DenizenAPI.getCurrentInstance(),new Runnable(){
      public void run(){
        if (npc.isSpawned())         return;
        npc.spawn(loc);
      }
    }
,(long)((Duration.valueOf(respawnDelay).getSeconds() * 20)));
  }
}","@EventHandler(priority=EventPriority.MONITOR) public void onDeath(EntityDamageEvent event){
  if (event.getEntity() != npc.getBukkitEntity() || dying)   return;
  if (this.getHealth() - event.getDamage() > 0)   return;
  dying=true;
  player=null;
  String deathCause=event.getCause().toString().toLowerCase().replace('_',' ');
  if (event instanceof EntityDamageByEntityEvent) {
    Entity killerEntity=((EntityDamageByEntityEvent)event).getDamager();
    if (killerEntity instanceof Player)     player=(Player)killerEntity;
 else     if (killerEntity instanceof Projectile) {
      LivingEntity shooter=((Projectile)killerEntity).getShooter();
      if (shooter instanceof Player)       player=(Player)shooter;
      DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"" + shooter.getType().toString(),player);
    }
    DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",player);
    DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"" + killerEntity.getType().toString(),player);
  }
 else   if (event instanceof EntityDamageByBlockEvent) {
    DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",player);
  }
  DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"",player);
  DenizenAPI.getDenizenNPC(npc).action(""String_Node_Str"" + deathCause,player);
  if (npc.getBukkitEntity() == null)   return;
  loc=aH.getLocationFrom(TagManager.tag(null,DenizenAPI.getDenizenNPC(npc),respawnLocation,false));
  if (loc == null)   loc=npc.getBukkitEntity().getLocation();
  if (animatedeath) {
    npc.getNavigator().cancelNavigation();
    setHealth();
    npc.getBukkitEntity().playEffect(EntityEffect.DEATH);
    Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(DenizenAPI.getCurrentInstance(),new Runnable(){
      public void run(){
        die();
      }
    }
,60);
  }
 else   die();
  if (respawn) {
    Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(DenizenAPI.getCurrentInstance(),new Runnable(){
      public void run(){
        if (npc.isSpawned())         return;
 else         npc.spawn(loc);
      }
    }
,(Duration.valueOf(respawnDelay).getTicks()));
  }
}",0.9540768509840676
10416,"public void run(){
  if (npc.isSpawned())   return;
  npc.spawn(loc);
}","public void run(){
  if (npc.isSpawned())   return;
 else   npc.spawn(loc);
}",0.9594594594594594
10417,"/** 
 * <p> This is the trigger that fires when any player moves in the entire world.  The trigger ONLY checks if the player moves to a new BLOCK in the world</p> When the trigger determines that the player has moved to a different block in the world, all of the NPCs are checked for the following criteria: <ol> <li>Does the NPC have the trigger trait?</li> <li>Is the trigger enabled?</li> <li>Is the NPC available (i.e. not busy)?</li> <li>Is the NPC Spawned?</li> <li>Is the NPC in the same World as the player</li> </ol> If the NPC passes all of these criteria, there are three events that can occur (only one of them): <ol> <li>If the player was outside of the NPC's radius, and moved inside the radius, and there's a SCRIPT or an ENTRY SCRIPT, then execute that entry script.</li> <li>If the player was INSIDE of the NPC's radius, and moved OUTSIDE the radius, and there's an EXIT SCRIPT, then execute that exit script. <li>If the player was INSIDE of the NPC's radius, and moved WITHIN the radius, and there's an MOVE SCRIPT, then execute that move script. </ol>
 * @param event	The player's move event (which includes their location).
 */
@EventHandler public void proximityTrigger(PlayerMoveEvent event){
  if (!event.getTo().getBlock().equals(event.getFrom().getBlock())) {
    Location toBlockLocation=event.getTo().getBlock().getLocation();
    Iterator<dNPC> it=DenizenAPI.getCurrentInstance().getNPCRegistry().getSpawnedNPCs().iterator();
    while (it.hasNext()) {
      dNPC npc=it.next();
      if (!npc.getCitizen().hasTrait(TriggerTrait.class))       continue;
      if (!npc.getCitizen().getTrait(TriggerTrait.class).isEnabled(name))       continue;
      if (!npc.isSpawned() || (!npc.getWorld().equals(event.getPlayer().getWorld()) && hasExitedProximityOf(event.getPlayer(),npc)))       continue;
      if (!isCloseEnough(event.getPlayer(),npc) && hasExitedProximityOf(event.getPlayer(),npc))       continue;
      Player player=event.getPlayer();
      InteractScriptContainer script=npc.getInteractScriptQuietly(event.getPlayer(),this.getClass());
      double entryRadius=npc.getTriggerTrait().getRadius(name);
      double exitRadius=npc.getTriggerTrait().getRadius(name);
      double moveRadius=npc.getTriggerTrait().getRadius(name);
      if (script != null) {
        try {
          if (script.hasTriggerOptionFor(getClass(),player,null,""String_Node_Str""))           entryRadius=Integer.valueOf(script.getTriggerOptionFor(getClass(),player,null,""String_Node_Str""));
        }
 catch (        NumberFormatException nfe) {
          dB.echoDebug(""String_Node_Str"" + entryRadius + ""String_Node_Str"");
        }
        try {
          if (script.hasTriggerOptionFor(getClass(),player,null,""String_Node_Str""))           exitRadius=Integer.valueOf(script.getTriggerOptionFor(getClass(),player,null,""String_Node_Str""));
        }
 catch (        NumberFormatException nfe) {
          dB.echoDebug(""String_Node_Str"" + exitRadius + ""String_Node_Str"");
        }
        try {
          if (script.hasTriggerOptionFor(getClass(),player,null,""String_Node_Str""))           moveRadius=Integer.valueOf(script.getTriggerOptionFor(getClass(),player,null,""String_Node_Str""));
        }
 catch (        NumberFormatException nfe) {
          dB.echoDebug(""String_Node_Str"" + moveRadius + ""String_Node_Str"");
        }
      }
      Location npcLocation=npc.getLocation();
      boolean playerChangedWorlds=false;
      if (npcLocation.getWorld() != event.getPlayer().getWorld())       playerChangedWorlds=true;
      boolean exitedProximity=hasExitedProximityOf(event.getPlayer(),npc);
      double distance=npcLocation.distance(toBlockLocation);
      if (!exitedProximity && (playerChangedWorlds || distance >= exitRadius)) {
        if (!npc.getTriggerTrait().triggerCooldownOnly(this,event.getPlayer()))         continue;
        exitProximityOf(event.getPlayer(),npc);
        dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + npc.getName()+ ""String_Node_Str"");
        npc.action(""String_Node_Str"",event.getPlayer());
        parse(npc,player,script,""String_Node_Str"");
      }
 else       if (exitedProximity && distance <= entryRadius) {
        if (!npc.getTriggerTrait().triggerCooldownOnly(this,event.getPlayer()))         continue;
        enterProximityOf(event.getPlayer(),npc);
        npc.action(""String_Node_Str"",event.getPlayer());
        parse(npc,player,script,""String_Node_Str"");
      }
 else       if (!exitedProximity && distance <= moveRadius) {
        npc.action(""String_Node_Str"",event.getPlayer());
        parse(npc,player,script,""String_Node_Str"");
      }
    }
  }
}","/** 
 * <p> This is the trigger that fires when any player moves in the entire world.  The trigger ONLY checks if the player moves to a new BLOCK in the world</p> When the trigger determines that the player has moved to a different block in the world, all of the NPCs are checked for the following criteria: <ol> <li>Does the NPC have the trigger trait?</li> <li>Is the trigger enabled?</li> <li>Is the NPC available (i.e. not busy)?</li> <li>Is the NPC Spawned?</li> <li>Is the NPC in the same World as the player</li> </ol> If the NPC passes all of these criteria, there are three events that can occur (only one of them): <ol> <li>If the player was outside of the NPC's radius, and moved inside the radius, and there's a SCRIPT or an ENTRY SCRIPT, then execute that entry script.</li> <li>If the player was INSIDE of the NPC's radius, and moved OUTSIDE the radius, and there's an EXIT SCRIPT, then execute that exit script. <li>If the player was INSIDE of the NPC's radius, and moved WITHIN the radius, and there's an MOVE SCRIPT, then execute that move script. </ol>
 * @param event	The player's move event (which includes their location).
 */
@EventHandler public void proximityTrigger(PlayerMoveEvent event){
  if (!event.getTo().getBlock().equals(event.getFrom().getBlock())) {
    Location toBlockLocation=event.getTo().getBlock().getLocation();
    Iterator<dNPC> it=DenizenAPI.getCurrentInstance().getNPCRegistry().getSpawnedNPCs().iterator();
    while (it.hasNext()) {
      dNPC npc=it.next();
      if (!npc.getCitizen().hasTrait(TriggerTrait.class))       continue;
      if (!npc.getCitizen().getTrait(TriggerTrait.class).isEnabled(name))       continue;
      if (!npc.isSpawned() || (!npc.getWorld().equals(event.getPlayer().getWorld()) && hasExitedProximityOf(event.getPlayer(),npc)))       continue;
      if (!isCloseEnough(event.getPlayer(),npc) && hasExitedProximityOf(event.getPlayer(),npc))       continue;
      Player player=event.getPlayer();
      InteractScriptContainer script=npc.getInteractScriptQuietly(event.getPlayer(),this.getClass());
      double entryRadius=npc.getTriggerTrait().getRadius(name);
      double exitRadius=npc.getTriggerTrait().getRadius(name);
      double moveRadius=npc.getTriggerTrait().getRadius(name);
      if (script != null) {
        try {
          if (script.hasTriggerOptionFor(getClass(),player,null,""String_Node_Str""))           entryRadius=Integer.valueOf(script.getTriggerOptionFor(getClass(),player,null,""String_Node_Str""));
        }
 catch (        NumberFormatException nfe) {
          dB.echoDebug(""String_Node_Str"" + entryRadius + ""String_Node_Str"");
        }
        try {
          if (script.hasTriggerOptionFor(getClass(),player,null,""String_Node_Str""))           exitRadius=Integer.valueOf(script.getTriggerOptionFor(getClass(),player,null,""String_Node_Str""));
        }
 catch (        NumberFormatException nfe) {
          dB.echoDebug(""String_Node_Str"" + exitRadius + ""String_Node_Str"");
        }
        try {
          if (script.hasTriggerOptionFor(getClass(),player,null,""String_Node_Str""))           moveRadius=Integer.valueOf(script.getTriggerOptionFor(getClass(),player,null,""String_Node_Str""));
        }
 catch (        NumberFormatException nfe) {
          dB.echoDebug(""String_Node_Str"" + moveRadius + ""String_Node_Str"");
        }
      }
      Location npcLocation=npc.getLocation();
      boolean playerChangedWorlds=false;
      if (npcLocation.getWorld() != event.getPlayer().getWorld())       playerChangedWorlds=true;
      boolean exitedProximity=hasExitedProximityOf(event.getPlayer(),npc);
      double distance=0;
      if (!playerChangedWorlds)       distance=npcLocation.distance(toBlockLocation);
      if (!exitedProximity && (playerChangedWorlds || distance >= exitRadius)) {
        if (!npc.getTriggerTrait().triggerCooldownOnly(this,event.getPlayer()))         continue;
        exitProximityOf(event.getPlayer(),npc);
        dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + npc.getName()+ ""String_Node_Str"");
        npc.action(""String_Node_Str"",event.getPlayer());
        parse(npc,player,script,""String_Node_Str"");
      }
 else       if (exitedProximity && distance <= entryRadius) {
        if (!npc.getTriggerTrait().triggerCooldownOnly(this,event.getPlayer()))         continue;
        enterProximityOf(event.getPlayer(),npc);
        npc.action(""String_Node_Str"",event.getPlayer());
        parse(npc,player,script,""String_Node_Str"");
      }
 else       if (!exitedProximity && distance <= moveRadius) {
        npc.action(""String_Node_Str"",event.getPlayer());
        parse(npc,player,script,""String_Node_Str"");
      }
    }
  }
}",0.9946155502907604
10418,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  String outcome=""String_Node_Str"";
  Boolean passively=false;
  for (  String arg : scriptEntry.getArguments())   if (aH.matchesArg(""String_Node_Str"",arg))   passively=true;
 else   outcome=aH.getStringFrom(arg);
  scriptEntry.addObject(""String_Node_Str"",outcome).addObject(""String_Node_Str"",passively);
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  String outcome=""String_Node_Str"";
  Boolean passively=false;
  for (  String arg : scriptEntry.getArguments())   if (aH.matchesArg(""String_Node_Str"",arg))   passively=true;
 else   outcome=arg;
  scriptEntry.addObject(""String_Node_Str"",outcome).addObject(""String_Node_Str"",passively);
}",0.9717223650385604
10419,"@EventHandler(priority=EventPriority.LOWEST) public void playerChat(AsyncPlayerChatEvent event){
  Map<String,String> context=new HashMap<String,String>();
  context.put(""String_Node_Str"",event.getMessage());
  String determination=doEvent(""String_Node_Str"",null,event.getPlayer(),context);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
  if (aH.matchesValueArg(""String_Node_Str"",determination,aH.ArgumentType.String))   event.setMessage(aH.getStringFrom(determination));
}","@EventHandler(priority=EventPriority.LOWEST) public void playerChat(AsyncPlayerChatEvent event){
  Map<String,String> context=new HashMap<String,String>();
  context.put(""String_Node_Str"",event.getMessage());
  String determination=doEvent(""String_Node_Str"",null,event.getPlayer(),context);
  dB.echoDebug(determination);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setCancelled(true);
  if (determination.toUpperCase().startsWith(""String_Node_Str""))   event.setMessage(aH.getStringFrom(determination));
}",0.7817836812144212
10420,"/** 
 * Replaces FLAG TAGs. Called automatically by the dScript ScriptBuilder and Executer.
 * @param event ReplaceableTagEvent
 */
@EventHandler public void flagTag(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  String flagName=event.getValue().split(""String_Node_Str"").length > 1 ? event.getValue().split(""String_Node_Str"")[0].toUpperCase() : event.getValue().toUpperCase();
  String flagFallback=event.getAlternative() != null ? event.getAlternative() : ""String_Node_Str"";
  int index=-1;
  ReplaceType replaceType=ReplaceType.ASSTRING;
  if (flagName.contains(""String_Node_Str"")) {
    try {
      int replaceTypeIndex=flagName.split(""String_Node_Str"").length - 1;
      replaceType=ReplaceType.valueOf(flagName.split(""String_Node_Str"")[replaceTypeIndex].replace(""String_Node_Str"",""String_Node_Str"").toUpperCase());
      flagName=flagName.replace(""String_Node_Str"" + flagName.split(""String_Node_Str"")[replaceTypeIndex],""String_Node_Str"");
    }
 catch (    Exception e) {
      e.printStackTrace();
      replaceType=ReplaceType.ASSTRING;
    }
  }
  if (event.hasValueContext()) {
    try {
      index=Integer.valueOf(event.getValueContext());
    }
 catch (    NumberFormatException e) {
      index=-1;
    }
  }
  if (event.getType().toUpperCase().startsWith(""String_Node_Str"")) {
    if (denizen.flagManager().getGlobalFlag(flagName).get(index).isEmpty()) {
      dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"",flagName);
    }
 else {
      FlagManager.Flag flag=denizen.flagManager().getGlobalFlag(flagName);
      event.setReplaced(getReplaceable(flag,flag.get(index),replaceType));
      dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ event.getReplaced()+ ""String_Node_Str"",flagName);
    }
  }
 else   if (event.getType().toUpperCase().startsWith(""String_Node_Str"") || event.getType().toUpperCase().startsWith(""String_Node_Str"")) {
    if (denizen.flagManager().getNPCFlag(event.getNPC().getId(),flagName).get(index).isEmpty()) {
      dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"",flagName);
    }
 else {
      FlagManager.Flag flag=denizen.flagManager().getNPCFlag(event.getNPC().getId(),flagName);
      event.setReplaced(getReplaceable(flag,flag.get(index),replaceType));
      dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ event.getReplaced()+ ""String_Node_Str"",flagName);
    }
  }
 else   if (event.getType().toUpperCase().startsWith(""String_Node_Str"")) {
    String name=null;
    if (event.getPlayer() != null)     name=event.getPlayer().getName();
    if (name == null && event.hasOfflinePlayer())     name=event.getOfflinePlayer().getName();
    if (name == null)     return;
    if (denizen.flagManager().getPlayerFlag(name,flagName).get(index).isEmpty()) {
      if (replaceType.toString() == ""String_Node_Str"")       event.setReplaced(""String_Node_Str"");
 else       dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"",flagName);
    }
 else {
      FlagManager.Flag flag=denizen.flagManager().getPlayerFlag(name,flagName);
      event.setReplaced(getReplaceable(flag,flag.get(index),replaceType));
      dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ event.getReplaced()+ ""String_Node_Str"",flagName);
    }
  }
}","/** 
 * Replaces FLAG TAGs. Called automatically by the dScript ScriptBuilder and Executer.
 * @param event ReplaceableTagEvent
 */
@EventHandler public void flagTag(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  if (!event.hasValue())   return;
  String flagName=event.getValue().split(""String_Node_Str"").length > 1 ? event.getValue().split(""String_Node_Str"")[0].toUpperCase() : event.getValue().toUpperCase();
  String flagFallback=event.getAlternative() != null ? event.getAlternative() : ""String_Node_Str"";
  int index=-1;
  ReplaceType replaceType=ReplaceType.ASSTRING;
  if (flagName.contains(""String_Node_Str"")) {
    try {
      int replaceTypeIndex=flagName.split(""String_Node_Str"").length - 1;
      replaceType=ReplaceType.valueOf(flagName.split(""String_Node_Str"")[replaceTypeIndex].replace(""String_Node_Str"",""String_Node_Str"").toUpperCase());
      flagName=flagName.replace(""String_Node_Str"" + flagName.split(""String_Node_Str"")[replaceTypeIndex],""String_Node_Str"");
    }
 catch (    Exception e) {
      e.printStackTrace();
      replaceType=ReplaceType.ASSTRING;
    }
  }
  if (event.hasValueContext()) {
    try {
      index=Integer.valueOf(event.getValueContext());
    }
 catch (    NumberFormatException e) {
      index=-1;
    }
  }
  if (event.getType().toUpperCase().startsWith(""String_Node_Str"")) {
    if (denizen.flagManager().getGlobalFlag(flagName).get(index).isEmpty()) {
      dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"",flagName);
    }
 else {
      FlagManager.Flag flag=denizen.flagManager().getGlobalFlag(flagName);
      event.setReplaced(getReplaceable(flag,flag.get(index),replaceType));
      dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ event.getReplaced()+ ""String_Node_Str"",flagName);
    }
  }
 else   if (event.getType().toUpperCase().startsWith(""String_Node_Str"") || event.getType().toUpperCase().startsWith(""String_Node_Str"")) {
    if (denizen.flagManager().getNPCFlag(event.getNPC().getId(),flagName).get(index).isEmpty()) {
      dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"",flagName);
    }
 else {
      FlagManager.Flag flag=denizen.flagManager().getNPCFlag(event.getNPC().getId(),flagName);
      event.setReplaced(getReplaceable(flag,flag.get(index),replaceType));
      dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ event.getReplaced()+ ""String_Node_Str"",flagName);
    }
  }
 else   if (event.getType().toUpperCase().startsWith(""String_Node_Str"")) {
    String name=null;
    if (event.getPlayer() != null)     name=event.getPlayer().getName();
    if (name == null && event.hasOfflinePlayer())     name=event.getOfflinePlayer().getName();
    if (name == null)     return;
    if (denizen.flagManager().getPlayerFlag(name,flagName).get(index).isEmpty()) {
      if (replaceType.toString() == ""String_Node_Str"")       event.setReplaced(""String_Node_Str"");
 else       dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"",flagName);
    }
 else {
      FlagManager.Flag flag=denizen.flagManager().getPlayerFlag(name,flagName);
      event.setReplaced(getReplaceable(flag,flag.get(index),replaceType));
      dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ event.getReplaced()+ ""String_Node_Str"",flagName);
    }
  }
}",0.9949061272012808
10421,"@Override public void onBuild(List<String> args){
  for (  String arg : args) {
    if (aH.matchesValueArg(""String_Node_Str"",arg,ArgumentType.Custom)) {
      try {
        type=ItemDropType.valueOf(aH.getStringFrom(arg));
        dB.echoDebug(""String_Node_Str"" + type.name());
        continue;
      }
 catch (      Exception e) {
        dB.echoDebug(""String_Node_Str"" + type.name() + ""String_Node_Str"");
      }
    }
 else     if (aH.matchesItem(arg)) {
      item=aH.getItemFrom(arg);
      dB.echoDebug(""String_Node_Str"" + item);
      continue;
    }
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,ArgumentType.Custom)) {
      region=aH.getStringFrom(arg);
      dB.echoDebug(""String_Node_Str"" + region);
      continue;
    }
 else     if (aH.matchesLocation(arg)) {
      location=aH.getLocationFrom(arg);
      dB.echoDebug(""String_Node_Str"" + location);
      continue;
    }
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,ArgumentType.Integer)) {
      radius=aH.getIntegerFrom(arg);
      dB.echoDebug(""String_Node_Str"" + radius);
      continue;
    }
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,ArgumentType.Integer)) {
      dropRate=aH.getIntegerFrom(arg);
      dB.echoDebug(""String_Node_Str"" + dropRate + ""String_Node_Str"");
      continue;
    }
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,ArgumentType.Custom)) {
      dropper=aH.getStringFrom(arg);
      dB.echoDebug(""String_Node_Str"" + dropper);
      continue;
    }
 else     if (aH.matchesQuantity(arg)) {
      quantity=aH.getIntegerFrom(arg);
      dB.echoDebug(""String_Node_Str"" + quantity);
      continue;
    }
  }
  if (item == null) {
    dB.echoDebug(""String_Node_Str"");
    cancel();
  }
switch (type) {
case BLOCKPLACE:
case BLOCKBREAK:
    try {
      block=Material.valueOf(dropper);
      dB.echoDebug(""String_Node_Str"");
    }
 catch (    Exception e) {
      dB.echoDebug(""String_Node_Str"");
    }
  break;
case MOBKILL:
if (aH.matchesEntityType(""String_Node_Str"" + dropper)) {
  mob=EntityType.valueOf(dropper.toUpperCase());
  dB.echoDebug(""String_Node_Str"");
}
 else dB.echoDebug(""String_Node_Str"");
break;
default :
dB.echoDebug(""String_Node_Str"");
cancel();
break;
}
}","@Override public void onBuild(List<String> args){
  for (  String arg : args) {
    if (aH.matchesValueArg(""String_Node_Str"",arg,ArgumentType.Custom)) {
      try {
        type=ItemDropType.valueOf(aH.getStringFrom(arg));
        dB.echoDebug(""String_Node_Str"" + type.name());
        continue;
      }
 catch (      Exception e) {
        dB.echoDebug(""String_Node_Str"" + type.name() + ""String_Node_Str"");
      }
    }
 else     if (aH.matchesItem(arg)) {
      item=aH.getItemFrom(arg).getItemStack();
      dB.echoDebug(""String_Node_Str"" + item);
      continue;
    }
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,ArgumentType.Custom)) {
      region=aH.getStringFrom(arg);
      dB.echoDebug(""String_Node_Str"" + region);
      continue;
    }
 else     if (aH.matchesLocation(arg)) {
      location=aH.getLocationFrom(arg);
      dB.echoDebug(""String_Node_Str"" + location);
      continue;
    }
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,ArgumentType.Integer)) {
      radius=aH.getIntegerFrom(arg);
      dB.echoDebug(""String_Node_Str"" + radius);
      continue;
    }
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,ArgumentType.Integer)) {
      dropRate=aH.getIntegerFrom(arg);
      dB.echoDebug(""String_Node_Str"" + dropRate + ""String_Node_Str"");
      continue;
    }
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,ArgumentType.Custom)) {
      dropper=aH.getStringFrom(arg);
      dB.echoDebug(""String_Node_Str"" + dropper);
      continue;
    }
 else     if (aH.matchesQuantity(arg)) {
      quantity=aH.getIntegerFrom(arg);
      dB.echoDebug(""String_Node_Str"" + quantity);
      continue;
    }
  }
  if (item == null) {
    dB.echoDebug(""String_Node_Str"");
    cancel();
  }
switch (type) {
case BLOCKPLACE:
case BLOCKBREAK:
    try {
      block=Material.valueOf(dropper);
      dB.echoDebug(""String_Node_Str"");
    }
 catch (    Exception e) {
      dB.echoDebug(""String_Node_Str"");
    }
  break;
case MOBKILL:
if (aH.matchesEntityType(""String_Node_Str"" + dropper)) {
  mob=EntityType.valueOf(dropper.toUpperCase());
  dB.echoDebug(""String_Node_Str"");
}
 else dB.echoDebug(""String_Node_Str"");
break;
default :
dB.echoDebug(""String_Node_Str"");
cancel();
break;
}
}",0.996611700926135
10422,"@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Item item=(Item)scriptEntry.getObject(""String_Node_Str"");
  Duration duration=(Duration)scriptEntry.getObject(""String_Node_Str"");
  Location location=(Location)scriptEntry.getObject(""String_Node_Str"");
  Action action=(Action)scriptEntry.getObject(""String_Node_Str"");
  dB.report(getName(),aH.debugObj(""String_Node_Str"",action.toString()) + item.debug() + (duration != null ? duration.debug() : ""String_Node_Str"")+ location.debug());
  if (action == Action.PLACE) {
    int ticks=Integer.MAX_VALUE;
    if (duration != null)     ticks=duration.getTicksAsInt();
    if (displayed.containsKey(location.dScriptArgValue())) {
      displayed.get(location.dScriptArgValue()).remove();
      displayed.remove(location.dScriptArgValue());
    }
    displayed.put(location.dScriptArgValue(),location.getWorld().dropItem(location,item));
    displayed.get(location.dScriptArgValue()).setPickupDelay(Integer.MAX_VALUE);
    displayed.get(location.dScriptArgValue()).setTicksLived(ticks);
  }
 else   if (action == Action.REMOVE) {
    if (displayed.containsKey(location.dScriptArgValue())) {
      displayed.get(location.dScriptArgValue()).remove();
      displayed.remove(location.dScriptArgValue());
    }
  }
}","@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Item item=(Item)scriptEntry.getObject(""String_Node_Str"");
  Duration duration=(Duration)scriptEntry.getObject(""String_Node_Str"");
  Location location=(Location)scriptEntry.getObject(""String_Node_Str"");
  Action action=(Action)scriptEntry.getObject(""String_Node_Str"");
  dB.report(getName(),aH.debugObj(""String_Node_Str"",action.toString()) + item.debug() + (duration != null ? duration.debug() : ""String_Node_Str"")+ location.debug());
  if (action == Action.PLACE) {
    int ticks=Integer.MAX_VALUE;
    if (duration != null)     ticks=duration.getTicksAsInt();
    if (displayed.containsKey(location.dScriptArgValue())) {
      displayed.get(location.dScriptArgValue()).remove();
      displayed.remove(location.dScriptArgValue());
    }
    displayed.put(location.dScriptArgValue(),location.getBlock().getLocation().getWorld().dropItem(location,item.getItemStack()));
    displayed.get(location.dScriptArgValue()).setPickupDelay(Integer.MAX_VALUE);
    displayed.get(location.dScriptArgValue()).setTicksLived(ticks);
  }
 else   if (action == Action.REMOVE) {
    if (displayed.containsKey(location.dScriptArgValue())) {
      displayed.get(location.dScriptArgValue()).remove();
      displayed.remove(location.dScriptArgValue());
    }
  }
}",0.9847908745247148
10423,"@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Location location=(Location)scriptEntry.getObject(""String_Node_Str"");
  Integer qty=(Integer)scriptEntry.getObject(""String_Node_Str"");
  Boolean exp=(Boolean)scriptEntry.getObject(""String_Node_Str"");
  Item item=(Item)scriptEntry.getObject(""String_Node_Str"");
  if (qty != null && item != null)   item.setAmount(qty);
 else   qty=1;
  dB.report(getName(),location.debug() + (item != null ? item.debug() : aH.debugObj(""String_Node_Str"",String.valueOf(qty))));
  if (exp)   ((ExperienceOrb)location.getWorld().spawnEntity(location,EntityType.EXPERIENCE_ORB)).setExperience(qty);
 else   location.getWorld().dropItemNaturally(location,item);
}","@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Location location=(Location)scriptEntry.getObject(""String_Node_Str"");
  Integer qty=(Integer)scriptEntry.getObject(""String_Node_Str"");
  Boolean exp=(Boolean)scriptEntry.getObject(""String_Node_Str"");
  Item item=(Item)scriptEntry.getObject(""String_Node_Str"");
  if (qty != null && item != null)   item.getItemStack().setAmount(qty);
 else   qty=1;
  dB.report(getName(),location.debug() + (item != null ? item.debug() : aH.debugObj(""String_Node_Str"",String.valueOf(qty))));
  if (exp)   ((ExperienceOrb)location.getWorld().spawnEntity(location,EntityType.EXPERIENCE_ORB)).setExperience(qty);
 else   location.getWorld().dropItemNaturally(location,item.getItemStack());
}",0.9799196787148594
10424,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  Action action=Action.ADD;
  String target=scriptEntry.getPlayer().getName();
  ItemStack item=scriptEntry.getPlayer().getItemInHand() != null ? scriptEntry.getPlayer().getItemInHand() : null;
  for (  String arg : scriptEntry.getArguments()) {
    if (aH.matchesArg(""String_Node_Str"",arg)) {
      action=Action.valueOf(aH.getStringFrom(arg).toUpperCase());
    }
 else     if (aH.matchesItem(arg)) {
      item=aH.getItemFrom(arg);
    }
 else     throw new InvalidArgumentsException(Messages.ERROR_UNKNOWN_ARGUMENT,arg);
  }
  if (item == null)   throw new InvalidArgumentsException(Messages.ERROR_MISSING_OTHER,""String_Node_Str"");
  if (target == null)   throw new InvalidArgumentsException(Messages.ERROR_NO_PLAYER);
  scriptEntry.addObject(""String_Node_Str"",action).addObject(""String_Node_Str"",target).addObject(""String_Node_Str"",item);
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  Action action=Action.ADD;
  String target=scriptEntry.getPlayer().getName();
  ItemStack item=scriptEntry.getPlayer().getItemInHand() != null ? scriptEntry.getPlayer().getItemInHand() : null;
  for (  String arg : scriptEntry.getArguments()) {
    if (aH.matchesArg(""String_Node_Str"",arg)) {
      action=Action.valueOf(aH.getStringFrom(arg).toUpperCase());
    }
 else     if (aH.matchesItem(arg)) {
      item=aH.getItemFrom(arg).getItemStack();
    }
 else     throw new InvalidArgumentsException(Messages.ERROR_UNKNOWN_ARGUMENT,arg);
  }
  if (item == null)   throw new InvalidArgumentsException(Messages.ERROR_MISSING_OTHER,""String_Node_Str"");
  if (target == null)   throw new InvalidArgumentsException(Messages.ERROR_NO_PLAYER);
  scriptEntry.addObject(""String_Node_Str"",action).addObject(""String_Node_Str"",target).addObject(""String_Node_Str"",item);
}",0.9920592906299628
10425,"@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  EquipType equipType=(EquipType)scriptEntry.getObject(""String_Node_Str"");
  Item item=(Item)scriptEntry.getObject(""String_Node_Str"");
  NPC npc=scriptEntry.getNPC().getCitizen();
  if (!npc.hasTrait(Equipment.class))   npc.addTrait(Equipment.class);
  Equipment trait=npc.getTrait(Equipment.class);
switch (equipType) {
case BOOTS:
    trait.set(4,item);
  dB.echoDebug(""String_Node_Str"" + item.getType() + ""String_Node_Str"");
break;
case CHEST:
trait.set(2,item);
dB.echoDebug(""String_Node_Str"" + item.getType() + ""String_Node_Str"");
break;
case HAND:
trait.set(0,item);
dB.echoDebug(""String_Node_Str"" + item.getType() + ""String_Node_Str"");
break;
case HEAD:
trait.set(1,item);
dB.echoDebug(""String_Node_Str"" + item.getType() + ""String_Node_Str"");
break;
case LEGS:
trait.set(3,item);
dB.echoDebug(""String_Node_Str"" + item.getType() + ""String_Node_Str"");
break;
}
}","@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  EquipType equipType=(EquipType)scriptEntry.getObject(""String_Node_Str"");
  Item item=(Item)scriptEntry.getObject(""String_Node_Str"");
  NPC npc=scriptEntry.getNPC().getCitizen();
  if (!npc.hasTrait(Equipment.class))   npc.addTrait(Equipment.class);
  Equipment trait=npc.getTrait(Equipment.class);
switch (equipType) {
case BOOTS:
    trait.set(4,item.getItemStack());
  break;
case CHEST:
trait.set(2,item.getItemStack());
break;
case HAND:
trait.set(0,item.getItemStack());
break;
case HEAD:
trait.set(1,item.getItemStack());
break;
case LEGS:
trait.set(3,item.getItemStack());
break;
}
}",0.7345942647956071
10426,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  dB.echoDebug(""String_Node_Str"" + scriptEntry.toString() + ""String_Node_Str"");
  if (giveType != null) {
switch (giveType) {
case MONEY:
      if (Depends.economy != null) {
        double doubleAmount=(double)theAmount;
        dB.echoDebug(""String_Node_Str"" + theAmount + ""String_Node_Str"");
        Depends.economy.depositPlayer(player.getName(),doubleAmount);
      }
 else {
        dB.echoError(""String_Node_Str"");
      }
    break;
case EXP:
  player.giveExp(theAmount);
dB.echoDebug(""String_Node_Str"" + theAmount + ""String_Node_Str"");
break;
case ITEM:
theItem.setAmount(theAmount);
if (engrave) {
dB.echoDebug(""String_Node_Str"" + theItem + ""String_Node_Str"");
NBTItem.addCustomNBT(theItem,""String_Node_Str"",player.getName());
}
dB.echoDebug(""String_Node_Str"" + theAmount + ""String_Node_Str""+ theItem);
HashMap<Integer,ItemStack> leftovers=player.getInventory().addItem(theItem);
if (!leftovers.isEmpty()) {
dB.echoDebug(""String_Node_Str"");
for (Map.Entry<Integer,ItemStack> leftoverItem : leftovers.entrySet()) {
player.getWorld().dropItem(player.getLocation(),leftoverItem.getValue());
}
}
break;
}
}
}","@SuppressWarnings(""String_Node_Str"") @Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  dB.echoDebug(""String_Node_Str"" + scriptEntry.toString() + ""String_Node_Str"");
  if (giveType != null) {
switch (giveType) {
case MONEY:
      if (Depends.economy != null) {
        double doubleAmount=(double)theAmount;
        dB.echoDebug(""String_Node_Str"" + theAmount + ""String_Node_Str"");
        Depends.economy.depositPlayer(player.getName(),doubleAmount);
      }
 else {
        dB.echoError(""String_Node_Str"");
      }
    break;
case EXP:
  player.giveExp(theAmount);
dB.echoDebug(""String_Node_Str"" + theAmount + ""String_Node_Str"");
break;
case ITEM:
theItem.getItemStack().setAmount(theAmount);
if (engrave) {
dB.echoDebug(""String_Node_Str"" + theItem + ""String_Node_Str"");
NBTItem.addCustomNBT(theItem.getItemStack(),""String_Node_Str"",player.getName());
}
dB.echoDebug(""String_Node_Str"" + theAmount + ""String_Node_Str""+ theItem);
HashMap<Integer,ItemStack> leftovers=player.getInventory().addItem(theItem.getItemStack());
if (!leftovers.isEmpty()) {
dB.echoDebug(""String_Node_Str"");
for (Map.Entry<Integer,ItemStack> leftoverItem : leftovers.entrySet()) {
player.getWorld().dropItem(player.getLocation(),leftoverItem.getValue());
}
}
break;
}
}
}",0.9821923229125444
10427,"@SuppressWarnings(""String_Node_Str"") @Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  ObjectType objectType=null;
  String id=null;
  Item item=null;
  int qty=1;
  LivingEntity entity=null;
  for (  String arg : scriptEntry.getArguments()) {
    if (aH.matchesArg(""String_Node_Str"",arg)) {
      objectType=ObjectType.valueOf(arg.toUpperCase());
      dB.echoDebug(""String_Node_Str"",arg.toUpperCase());
    }
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,ArgumentType.String)) {
      id=aH.getStringFrom(arg);
      dB.echoDebug(""String_Node_Str"",id);
    }
 else     if (aH.matchesItem(arg)) {
      item=aH.getItemFrom(arg);
      dB.echoDebug(""String_Node_Str"",aH.getStringFrom(arg));
    }
 else     if (aH.matchesQuantity(arg)) {
      qty=aH.getIntegerFrom(arg);
      dB.echoDebug(Messages.DEBUG_SET_QUANTITY,String.valueOf(qty));
    }
 else {
    }
  }
  if (objectType == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  if (id == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.addObject(""String_Node_Str"",objectType);
  scriptEntry.addObject(""String_Node_Str"",id);
  if (objectType == ObjectType.ITEMSTACK) {
    if (item == null)     throw new InvalidArgumentsException(""String_Node_Str"");
    item.setAmount(qty);
    scriptEntry.addObject(""String_Node_Str"",item);
  }
 else   if (objectType == ObjectType.ENTITY) {
    if (entity == null)     throw new InvalidArgumentsException(""String_Node_Str"");
    scriptEntry.addObject(""String_Node_Str"",entity);
  }
 else   if (objectType == ObjectType.NPC) {
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  ObjectType objectType=null;
  String id=null;
  Item item=null;
  int qty=1;
  LivingEntity entity=null;
  for (  String arg : scriptEntry.getArguments()) {
    if (aH.matchesArg(""String_Node_Str"",arg)) {
      objectType=ObjectType.valueOf(arg.toUpperCase());
      dB.echoDebug(""String_Node_Str"",arg.toUpperCase());
    }
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,ArgumentType.String)) {
      id=aH.getStringFrom(arg);
      dB.echoDebug(""String_Node_Str"",id);
    }
 else     if (aH.matchesItem(arg)) {
      item=aH.getItemFrom(arg);
      dB.echoDebug(""String_Node_Str"",aH.getStringFrom(arg));
    }
 else     if (aH.matchesQuantity(arg)) {
      qty=aH.getIntegerFrom(arg);
      dB.echoDebug(Messages.DEBUG_SET_QUANTITY,String.valueOf(qty));
    }
 else {
    }
  }
  if (objectType == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  if (id == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.addObject(""String_Node_Str"",objectType);
  scriptEntry.addObject(""String_Node_Str"",id);
  if (objectType == ObjectType.ITEMSTACK) {
    if (item == null)     throw new InvalidArgumentsException(""String_Node_Str"");
    item.getItemStack().setAmount(qty);
    scriptEntry.addObject(""String_Node_Str"",item);
  }
 else   if (objectType == ObjectType.ENTITY) {
    if (entity == null)     throw new InvalidArgumentsException(""String_Node_Str"");
    scriptEntry.addObject(""String_Node_Str"",entity);
  }
 else   if (objectType == ObjectType.NPC) {
  }
}",0.9954001839926404
10428,"/** 
 * Gets a currently saved ItemStack, created with Denizen's NEW command, given a case-insensitive 'id'. Note: These do not persist through a restart and may return null in such a case. This is meant for working with ItemStacks in the short-term, ie. creating an item (with NEW) and applying enchants, lore, etc. directly after.
 * @param id ID specified upon creation
 * @return the saved ItemStack, or null if not found
 */
public ItemStack getItem(String id){
  if (itemStacks.containsKey(id.toUpperCase()))   return itemStacks.get(id.toUpperCase());
 else   return null;
}","/** 
 * Gets a currently saved ItemStack, created with Denizen's NEW command, given a case-insensitive 'id'. Note: These do not persist through a restart and may return null in such a case. This is meant for working with ItemStacks in the short-term, ie. creating an item (with NEW) and applying enchants, lore, etc. directly after.
 * @param id ID specified upon creation
 * @return the saved ItemStack, or null if not found
 */
public ItemStack getItem(String id){
  if (itemStacks.containsKey(id.toUpperCase()))   return itemStacks.get(id.toUpperCase()).getItemStack();
 else   return null;
}",0.9872340425531916
10429,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  boolean savedItem=false;
  BookAction action=BookAction.NONE;
  Item book=null;
  Player player=scriptEntry.getPlayer();
  String scriptName=null;
  Location location=null;
  dNPC npc=scriptEntry.getNPC();
  if (npc != null)   location=npc.getLocation();
  for (  String arg : scriptEntry.getArguments()) {
    if (aH.matchesArg(""String_Node_Str"",arg))     action=BookAction.valueOf(arg.toUpperCase());
 else     if (aH.matchesScript(arg))     scriptName=aH.getStringFrom(arg);
 else     if (aH.matchesLocation(arg)) {
      location=aH.getLocationFrom(arg);
      action=BookAction.DROP;
    }
 else     if (aH.matchesItem(arg)) {
      book=aH.getItemFrom(arg);
      if (book.getType() == Material.BOOK || book.getType() == Material.WRITTEN_BOOK) {
        savedItem=true;
      }
 else {
        book=null;
      }
    }
 else     throw new InvalidArgumentsException(Messages.ERROR_UNKNOWN_ARGUMENT,arg);
  }
  if (action == BookAction.NONE && !savedItem)   action=BookAction.GIVE;
  if (scriptName == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  if (book == null)   book=new Item(387);
  scriptEntry.addObject(""String_Node_Str"",action);
  scriptEntry.addObject(""String_Node_Str"",book);
  scriptEntry.addObject(""String_Node_Str"",scriptName);
  scriptEntry.addObject(""String_Node_Str"",player);
  scriptEntry.addObject(""String_Node_Str"",location);
  scriptEntry.addObject(""String_Node_Str"",npc);
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  boolean savedItem=false;
  BookAction action=BookAction.NONE;
  Item book=null;
  Player player=scriptEntry.getPlayer();
  String scriptName=null;
  Location location=null;
  dNPC npc=scriptEntry.getNPC();
  if (npc != null)   location=npc.getLocation();
  for (  String arg : scriptEntry.getArguments()) {
    if (aH.matchesArg(""String_Node_Str"",arg))     action=BookAction.valueOf(arg.toUpperCase());
 else     if (aH.matchesScript(arg))     scriptName=aH.getStringFrom(arg);
 else     if (aH.matchesLocation(arg)) {
      location=aH.getLocationFrom(arg);
      action=BookAction.DROP;
    }
 else     if (aH.matchesItem(arg)) {
      book=aH.getItemFrom(arg);
      if (book.getItemStack().getType() == Material.BOOK || book.getItemStack().getType() == Material.WRITTEN_BOOK) {
        savedItem=true;
      }
 else {
        book=null;
      }
    }
 else     throw new InvalidArgumentsException(Messages.ERROR_UNKNOWN_ARGUMENT,arg);
  }
  if (action == BookAction.NONE && !savedItem)   action=BookAction.GIVE;
  if (scriptName == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  if (book == null)   book=new Item(387);
  scriptEntry.addObject(""String_Node_Str"",action);
  scriptEntry.addObject(""String_Node_Str"",book);
  scriptEntry.addObject(""String_Node_Str"",scriptName);
  scriptEntry.addObject(""String_Node_Str"",player);
  scriptEntry.addObject(""String_Node_Str"",location);
  scriptEntry.addObject(""String_Node_Str"",npc);
}",0.9901896664486592
10430,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  BookAction action=(BookAction)scriptEntry.getObject(""String_Node_Str"");
  Item book=(Item)scriptEntry.getObject(""String_Node_Str"");
  String scriptName=(String)scriptEntry.getObject(""String_Node_Str"");
  Player player=(Player)scriptEntry.getObject(""String_Node_Str"");
  Location location=(Location)scriptEntry.getObject(""String_Node_Str"");
  dNPC npc=(dNPC)scriptEntry.getObject(""String_Node_Str"");
  BookScriptContainer bookScript=ScriptRegistry.getScriptContainerAs(scriptName,BookScriptContainer.class);
  book=bookScript.writeBookTo(book,player,npc);
switch (action) {
case DROP:
    dropBook(location,book);
  break;
case GIVE:
giveBook(player,book);
break;
case EQUIP:
equipBook(player,book);
break;
case NONE:
break;
}
player.updateInventory();
}","@SuppressWarnings(""String_Node_Str"") @Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  BookAction action=(BookAction)scriptEntry.getObject(""String_Node_Str"");
  Item book=(Item)scriptEntry.getObject(""String_Node_Str"");
  String scriptName=(String)scriptEntry.getObject(""String_Node_Str"");
  Player player=(Player)scriptEntry.getObject(""String_Node_Str"");
  Location location=(Location)scriptEntry.getObject(""String_Node_Str"");
  dNPC npc=(dNPC)scriptEntry.getObject(""String_Node_Str"");
  BookScriptContainer bookScript=ScriptRegistry.getScriptContainerAs(scriptName,BookScriptContainer.class);
  book=bookScript.writeBookTo(book,player,npc);
switch (action) {
case DROP:
    dropBook(location,book.getItemStack());
  break;
case GIVE:
giveBook(player,book.getItemStack());
break;
case EQUIP:
equipBook(player,book.getItemStack());
break;
case NONE:
break;
}
player.updateInventory();
}",0.9751243781094528
10431,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  TakeType takeType=null;
  double quantity=1;
  ItemStack item=null;
  for (  String arg : scriptEntry.getArguments()) {
    if (aH.matchesArg(""String_Node_Str"",arg)) {
      takeType=TakeType.MONEY;
      dB.echoDebug(""String_Node_Str"");
    }
 else     if (aH.matchesArg(""String_Node_Str"",arg)) {
      takeType=TakeType.ITEMINHAND;
      dB.echoDebug(""String_Node_Str"");
    }
 else     if (aH.matchesQuantity(arg)) {
      quantity=aH.getDoubleFrom(arg);
      dB.echoDebug(""String_Node_Str"" + quantity);
    }
 else     if (aH.matchesItem(arg) || aH.matchesItem(""String_Node_Str"" + arg)) {
      takeType=TakeType.ITEM;
      item=aH.getItemFrom(arg);
      dB.echoDebug(""String_Node_Str"" + item.getType());
    }
 else     throw new InvalidArgumentsException(Messages.ERROR_UNKNOWN_ARGUMENT,arg);
    scriptEntry.addObject(""String_Node_Str"",item);
    scriptEntry.addObject(""String_Node_Str"",takeType);
    scriptEntry.addObject(""String_Node_Str"",quantity);
  }
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  TakeType takeType=null;
  double quantity=1;
  ItemStack item=null;
  for (  String arg : scriptEntry.getArguments()) {
    if (aH.matchesArg(""String_Node_Str"",arg))     takeType=TakeType.MONEY;
 else     if (aH.matchesArg(""String_Node_Str"",arg))     takeType=TakeType.ITEMINHAND;
 else     if (aH.matchesQuantity(arg))     quantity=aH.getDoubleFrom(arg);
 else     if (aH.matchesItem(arg) || aH.matchesItem(""String_Node_Str"" + arg))     takeType=TakeType.ITEM;
 else     throw new InvalidArgumentsException(Messages.ERROR_UNKNOWN_ARGUMENT,arg);
  }
  scriptEntry.addObject(""String_Node_Str"",item);
  scriptEntry.addObject(""String_Node_Str"",takeType);
  scriptEntry.addObject(""String_Node_Str"",quantity);
}",0.7755102040816326
10432,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
switch ((TakeType)scriptEntry.getObject(""String_Node_Str"")) {
case ITEMINHAND:
    int inHandAmt=scriptEntry.getPlayer().getItemInHand().getAmount();
  int theAmount=((Double)scriptEntry.getObject(""String_Node_Str"")).intValue();
ItemStack newHandItem=new ItemStack(0);
if (theAmount > inHandAmt) {
dB.echoDebug(""String_Node_Str"");
scriptEntry.getPlayer().setItemInHand(newHandItem);
}
 else {
if (theAmount == inHandAmt) {
  scriptEntry.getPlayer().setItemInHand(newHandItem);
}
 else {
  newHandItem=new ItemStack(scriptEntry.getPlayer().getItemInHand().getType(),inHandAmt - theAmount,scriptEntry.getPlayer().getItemInHand().getData().getData());
  newHandItem.setItemMeta(scriptEntry.getPlayer().getItemInHand().getItemMeta());
  scriptEntry.getPlayer().setItemInHand(newHandItem);
  scriptEntry.getPlayer().updateInventory();
}
}
break;
case MONEY:
if (Depends.economy != null) {
double amount=(Double)scriptEntry.getObject(""String_Node_Str"");
dB.echoDebug(""String_Node_Str"" + amount + ""String_Node_Str"");
Depends.economy.withdrawPlayer(scriptEntry.getPlayer().getName(),amount);
}
 else {
dB.echoError(""String_Node_Str"");
}
break;
case ITEM:
((ItemStack)scriptEntry.getObject(""String_Node_Str"")).setAmount(((Double)scriptEntry.getObject(""String_Node_Str"")).intValue());
if (!scriptEntry.getPlayer().getInventory().removeItem((ItemStack)scriptEntry.getObject(""String_Node_Str"")).isEmpty()) dB.echoDebug(""String_Node_Str"" + ((ItemStack)scriptEntry.getObject(""String_Node_Str"")).getType().toString() + ""String_Node_Str"");
break;
}
}","@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
switch ((TakeType)scriptEntry.getObject(""String_Node_Str"")) {
case ITEMINHAND:
    int inHandAmt=scriptEntry.getPlayer().getItemInHand().getAmount();
  int theAmount=((Double)scriptEntry.getObject(""String_Node_Str"")).intValue();
ItemStack newHandItem=new ItemStack(0);
if (theAmount > inHandAmt) {
dB.echoDebug(""String_Node_Str"");
scriptEntry.getPlayer().setItemInHand(newHandItem);
}
 else {
if (theAmount == inHandAmt) {
  scriptEntry.getPlayer().setItemInHand(newHandItem);
}
 else {
  newHandItem=new ItemStack(scriptEntry.getPlayer().getItemInHand().getType(),inHandAmt - theAmount,scriptEntry.getPlayer().getItemInHand().getData().getData());
  newHandItem.setItemMeta(scriptEntry.getPlayer().getItemInHand().getItemMeta());
  scriptEntry.getPlayer().setItemInHand(newHandItem);
  scriptEntry.getPlayer().updateInventory();
}
}
break;
case MONEY:
if (Depends.economy != null) {
double amount=(Double)scriptEntry.getObject(""String_Node_Str"");
dB.echoDebug(""String_Node_Str"" + amount + ""String_Node_Str"");
Depends.economy.withdrawPlayer(scriptEntry.getPlayer().getName(),amount);
}
 else {
dB.echoError(""String_Node_Str"");
}
break;
case ITEM:
((ItemStack)scriptEntry.getObject(""String_Node_Str"")).setAmount(((Double)scriptEntry.getObject(""String_Node_Str"")).intValue());
if (!scriptEntry.getPlayer().getInventory().removeItem((ItemStack)scriptEntry.getObject(""String_Node_Str"")).isEmpty()) dB.echoDebug(""String_Node_Str"" + ((ItemStack)scriptEntry.getObject(""String_Node_Str"")).getType().toString() + ""String_Node_Str"");
break;
}
}",0.9887366818873669
10433,"public Item writeBookTo(Item book,Player player,dNPC npc){
  BookMeta bookInfo=(BookMeta)book.getItemMeta();
  if (contains(""String_Node_Str"")) {
    String title=getString(""String_Node_Str"");
    title=DenizenAPI.getCurrentInstance().tagManager().tag(player,npc,title,false);
    bookInfo.setTitle(title);
  }
  if (contains(""String_Node_Str"")) {
    String author=getString(""String_Node_Str"");
    author=DenizenAPI.getCurrentInstance().tagManager().tag(player,npc,author,false);
    bookInfo.setAuthor(author);
  }
  if (contains(""String_Node_Str"")) {
    List<String> pages=getStringList(""String_Node_Str"");
    for (    String page : pages) {
      page=DenizenAPI.getCurrentInstance().tagManager().tag(player,npc,page,false);
      bookInfo.addPage(page);
    }
  }
  book.setItemMeta(bookInfo);
  return book;
}","public Item writeBookTo(Item book,Player player,dNPC npc){
  BookMeta bookInfo=(BookMeta)book.getItemStack().getItemMeta();
  if (contains(""String_Node_Str"")) {
    String title=getString(""String_Node_Str"");
    title=DenizenAPI.getCurrentInstance().tagManager().tag(player,npc,title,false);
    bookInfo.setTitle(title);
  }
  if (contains(""String_Node_Str"")) {
    String author=getString(""String_Node_Str"");
    author=DenizenAPI.getCurrentInstance().tagManager().tag(player,npc,author,false);
    bookInfo.setAuthor(author);
  }
  if (contains(""String_Node_Str"")) {
    List<String> pages=getStringList(""String_Node_Str"");
    for (    String page : pages) {
      page=DenizenAPI.getCurrentInstance().tagManager().tag(player,npc,page,false);
      bookInfo.addPage(page);
    }
  }
  book.getItemStack().setItemMeta(bookInfo);
  return book;
}",0.9819927971188476
10434,"public Item getItemFrom(Player player,dNPC npc){
  Item stack=null;
  try {
    if (contains(""String_Node_Str"")) {
      String material=TagManager.tag(player,npc,getString(""String_Node_Str""));
      stack=Item.valueOf(material);
    }
    if (stack == null)     return null;
    ItemMeta meta=stack.getItemMeta();
    if (contains(""String_Node_Str"")) {
      String displayName=TagManager.tag(player,npc,getString(""String_Node_Str""));
      meta.setDisplayName(displayName);
    }
    if (contains(""String_Node_Str"")) {
      List<String> taggedLore=new ArrayList<String>();
      for (      String l : getStringList(""String_Node_Str"")) {
        l=TagManager.tag(player,npc,l);
        taggedLore.add(l);
      }
      meta.setLore(taggedLore);
    }
    stack.setItemMeta(meta);
    if (contains(""String_Node_Str"")) {
      for (      String enchantment : getStringList(""String_Node_Str"")) {
        enchantment=TagManager.tag(player,npc,enchantment);
        try {
          int level=1;
          if (enchantment.split(""String_Node_Str"").length > 1) {
            level=Integer.valueOf(enchantment.split(""String_Node_Str"")[1]);
            enchantment=enchantment.split(""String_Node_Str"")[0];
          }
          Enchantment ench=Enchantment.getByName(enchantment.toUpperCase());
          stack.addUnsafeEnchantment(ench,level);
        }
 catch (        Exception e) {
          continue;
        }
      }
    }
    if (contains(""String_Node_Str"")) {
      String color=TagManager.tag(player,npc,getString(""String_Node_Str""));
      LeatherColorer.colorArmor(stack,color);
    }
    if (contains(""String_Node_Str"")) {
      BookScriptContainer book=ScriptRegistry.getScriptContainerAs(getString(""String_Node_Str""),BookScriptContainer.class);
      stack=book.writeBookTo(stack,player,npc);
    }
    stack.setId(getName());
  }
 catch (  Exception e) {
    dB.echoError(""String_Node_Str"");
    if (!dB.showStackTraces)     dB.echoError(""String_Node_Str"");
 else     e.printStackTrace();
    stack=null;
  }
  return stack;
}","public Item getItemFrom(Player player,dNPC npc){
  Item stack=null;
  try {
    if (contains(""String_Node_Str"")) {
      String material=TagManager.tag(player,npc,getString(""String_Node_Str""));
      stack=Item.valueOf(material);
    }
    if (stack == null)     return null;
    ItemMeta meta=stack.getItemStack().getItemMeta();
    if (contains(""String_Node_Str"")) {
      String displayName=TagManager.tag(player,npc,getString(""String_Node_Str""));
      meta.setDisplayName(displayName);
    }
    if (contains(""String_Node_Str"")) {
      List<String> taggedLore=new ArrayList<String>();
      for (      String l : getStringList(""String_Node_Str"")) {
        l=TagManager.tag(player,npc,l);
        taggedLore.add(l);
      }
      meta.setLore(taggedLore);
    }
    stack.getItemStack().setItemMeta(meta);
    if (contains(""String_Node_Str"")) {
      for (      String enchantment : getStringList(""String_Node_Str"")) {
        enchantment=TagManager.tag(player,npc,enchantment);
        try {
          int level=1;
          if (enchantment.split(""String_Node_Str"").length > 1) {
            level=Integer.valueOf(enchantment.split(""String_Node_Str"")[1]);
            enchantment=enchantment.split(""String_Node_Str"")[0];
          }
          Enchantment ench=Enchantment.getByName(enchantment.toUpperCase());
          stack.getItemStack().addEnchantment(ench,level);
        }
 catch (        Exception e) {
          dB.echoError(""String_Node_Str"" + getName() + ""String_Node_Str""+ enchantment+ ""String_Node_Str"");
          continue;
        }
      }
    }
    if (contains(""String_Node_Str"")) {
      String color=TagManager.tag(player,npc,getString(""String_Node_Str""));
      LeatherColorer.colorArmor(stack,color);
    }
    if (contains(""String_Node_Str"")) {
      BookScriptContainer book=ScriptRegistry.getScriptContainerAs(getString(""String_Node_Str""),BookScriptContainer.class);
      stack=book.writeBookTo(stack,player,npc);
    }
    stack.setItemStack(NBTItem.addCustomNBT(stack.getItemStack(),""String_Node_Str"",getName()));
  }
 catch (  Exception e) {
    dB.echoError(""String_Node_Str"");
    if (!dB.showStackTraces)     dB.echoError(""String_Node_Str"");
 else     e.printStackTrace();
    stack=null;
  }
  return stack;
}",0.9411489957963568
10435,"@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  boolean outcome=false;
  boolean exact=false;
  int quantity=1;
  ItemStack itemToCheck=null;
  for (  String thisArg : args) {
    if (aH.matchesQuantity(thisArg)) {
      quantity=aH.getIntegerFrom(thisArg);
      dB.echoDebug(""String_Node_Str"" + quantity);
    }
 else     if (aH.matchesArg(""String_Node_Str"",thisArg)) {
      exact=true;
      dB.echoDebug(""String_Node_Str"");
    }
 else {
      itemToCheck=new ItemStack(aH.getItemFrom(thisArg));
      dB.echoDebug(""String_Node_Str"" + itemToCheck);
    }
  }
  if (itemToCheck != null) {
    itemToCheck.setAmount(quantity);
  }
  if (exact)   outcome=context.getPlayer().getItemInHand().equals(itemToCheck);
 else   outcome=context.getPlayer().getItemInHand().isSimilar(itemToCheck);
  if (outcome)   dB.echoDebug(""String_Node_Str"");
  return outcome;
}","@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  boolean outcome=false;
  boolean exact=false;
  int quantity=1;
  Item itemToCheck=null;
  for (  String thisArg : args) {
    if (aH.matchesQuantity(thisArg))     quantity=aH.getIntegerFrom(thisArg);
 else     if (aH.matchesArg(""String_Node_Str"",thisArg)) {
      exact=true;
    }
 else     itemToCheck=aH.getItemFrom(thisArg);
  }
  if (itemToCheck != null)   itemToCheck.getItemStack().setAmount(quantity);
  if (exact)   outcome=context.getPlayer().getItemInHand().equals(itemToCheck);
 else   outcome=context.getPlayer().getItemInHand().isSimilar(itemToCheck.getItemStack());
  dB.report(""String_Node_Str"",(outcome) ? (exact) ? ""String_Node_Str"" : ""String_Node_Str"" : ""String_Node_Str"");
  return outcome;
}",0.3660205245153934
10436,"@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  for (  String arg : args) {
    if (aH.matchesQuantity(arg)) {
      quantity=aH.getIntegerFrom(arg);
      dB.echoDebug(""String_Node_Str"" + quantity);
      continue;
    }
 else     if (aH.matchesItem(arg)) {
      if (ScriptRegistry.getScriptContainerAs(aH.getStringFrom(arg),ItemScriptContainer.class) != null) {
        item=ScriptRegistry.getScriptContainerAs(aH.getStringFrom(arg),ItemScriptContainer.class).getItemFrom(context.getPlayer(),context.getNPC());
        dB.echoDebug(""String_Node_Str"");
        continue;
      }
 else {
        item=aH.getItemFrom(arg);
        dB.echoDebug(""String_Node_Str"");
        continue;
      }
    }
 else     if (aH.matchesItem(""String_Node_Str"" + arg)) {
      item=aH.getItemFrom(""String_Node_Str"" + arg);
      dB.echoDebug(""String_Node_Str"");
      continue;
    }
 else     throw new RequirementCheckException(""String_Node_Str"");
  }
  if (context.getPlayer().getInventory().containsAtLeast(item,quantity)) {
    dB.echoDebug(""String_Node_Str"");
    return true;
  }
 else {
    dB.echoDebug(""String_Node_Str"");
    return false;
  }
}","@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  for (  String arg : args) {
    if (aH.matchesQuantity(arg)) {
      quantity=aH.getIntegerFrom(arg);
      dB.echoDebug(""String_Node_Str"" + quantity);
      continue;
    }
 else     if (aH.matchesItem(arg)) {
      if (ScriptRegistry.getScriptContainerAs(aH.getStringFrom(arg),ItemScriptContainer.class) != null) {
        item=ScriptRegistry.getScriptContainerAs(aH.getStringFrom(arg),ItemScriptContainer.class).getItemFrom(context.getPlayer(),context.getNPC()).getItemStack();
        dB.echoDebug(""String_Node_Str"");
        continue;
      }
 else {
        item=aH.getItemFrom(arg).getItemStack();
        dB.echoDebug(""String_Node_Str"");
        continue;
      }
    }
 else     if (aH.matchesItem(""String_Node_Str"" + arg)) {
      item=aH.getItemFrom(""String_Node_Str"" + arg).getItemStack();
      dB.echoDebug(""String_Node_Str"");
      continue;
    }
 else     throw new RequirementCheckException(""String_Node_Str"");
  }
  if (context.getPlayer().getInventory().containsAtLeast(item,quantity)) {
    dB.echoDebug(""String_Node_Str"");
    return true;
  }
 else {
    dB.echoDebug(""String_Node_Str"");
    return false;
  }
}",0.9816551161842642
10437,"@EventHandler public void clickTrigger(NPCRightClickEvent event){
  if (!event.getNPC().hasTrait(TriggerTrait.class))   return;
  dNPC npc=DenizenAPI.getDenizenNPC(event.getNPC());
  if (!npc.getTriggerTrait().isEnabled(name))   return;
  if (!npc.getTriggerTrait().trigger(this,event.getClicker()))   return;
  Player player=event.getClicker();
  InteractScriptContainer script=npc.getInteractScript(player,getClass());
  String id=null;
  if (script != null) {
    Map<String,String> idMap=script.getIdMapFor(this.getClass(),player);
    if (!idMap.isEmpty())     for (    Map.Entry<String,String> entry : idMap.entrySet()) {
      String entry_value=TagManager.tag(player,npc,entry.getValue());
      if (Item.valueOf(entry_value).matches(player.getItemInHand()) && script.checkSpecificTriggerScriptRequirementsFor(this.getClass(),player,npc,entry.getKey()))       id=entry.getKey();
    }
  }
  if (!parse(npc,player,script,id))   npc.action(""String_Node_Str"",player);
}","@EventHandler public void clickTrigger(NPCRightClickEvent event){
  if (!event.getNPC().hasTrait(TriggerTrait.class))   return;
  dNPC npc=DenizenAPI.getDenizenNPC(event.getNPC());
  if (!npc.getTriggerTrait().isEnabled(name))   return;
  if (!npc.getTriggerTrait().trigger(this,event.getClicker()))   return;
  Player player=event.getClicker();
  InteractScriptContainer script=npc.getInteractScript(player,getClass());
  String id=null;
  if (script != null) {
    Map<String,String> idMap=script.getIdMapFor(this.getClass(),player);
    if (!idMap.isEmpty())     for (    Map.Entry<String,String> entry : idMap.entrySet()) {
      String entry_value=TagManager.tag(player,npc,entry.getValue());
      if (Item.valueOf(entry_value).comparesTo(player.getItemInHand()) >= 0 && script.checkSpecificTriggerScriptRequirementsFor(this.getClass(),player,npc,entry.getKey()))       id=entry.getKey();
    }
  }
  if (!parse(npc,player,script,id))   npc.action(""String_Node_Str"",player);
}",0.9897750511247444
10438,"@EventHandler public void damageTrigger(EntityDamageByEntityEvent event){
  Player player=null;
  if (event.getDamager() instanceof Player)   player=(Player)event.getDamager();
 else   if (event.getDamager() instanceof Projectile && ((Projectile)event.getDamager()).getShooter() instanceof Player)   player=(Player)((Projectile)event.getDamager()).getShooter();
  if (CitizensAPI.getNPCRegistry().isNPC(event.getEntity()) && player != null) {
    dNPC npc=DenizenAPI.getDenizenNPC(CitizensAPI.getNPCRegistry().getNPC(event.getEntity()));
    if (!npc.getCitizen().hasTrait(TriggerTrait.class))     return;
    if (!npc.getTriggerTrait().isEnabled(name))     return;
    if (!npc.getTriggerTrait().trigger(this,player))     return;
    InteractScriptContainer script=InteractScriptHelper.getInteractScript(npc,player,getClass());
    String id=null;
    if (script != null) {
      Map<String,String> idMap=script.getIdMapFor(this.getClass(),player);
      if (!idMap.isEmpty())       for (      Map.Entry<String,String> entry : idMap.entrySet()) {
        String entry_value=TagManager.tag(player,npc,entry.getValue());
        if (Item.valueOf(entry_value).matches(player.getItemInHand()) && script.checkSpecificTriggerScriptRequirementsFor(this.getClass(),player,npc,entry.getKey()))         id=entry.getKey();
      }
    }
    if (!parse(npc,player,script,id))     npc.action(""String_Node_Str"",player);
  }
}","@EventHandler public void damageTrigger(EntityDamageByEntityEvent event){
  Player player=null;
  if (event.getDamager() instanceof Player)   player=(Player)event.getDamager();
 else   if (event.getDamager() instanceof Projectile && ((Projectile)event.getDamager()).getShooter() instanceof Player)   player=(Player)((Projectile)event.getDamager()).getShooter();
  if (CitizensAPI.getNPCRegistry().isNPC(event.getEntity()) && player != null) {
    dNPC npc=DenizenAPI.getDenizenNPC(CitizensAPI.getNPCRegistry().getNPC(event.getEntity()));
    if (!npc.getCitizen().hasTrait(TriggerTrait.class))     return;
    if (!npc.getTriggerTrait().isEnabled(name))     return;
    if (!npc.getTriggerTrait().trigger(this,player))     return;
    InteractScriptContainer script=InteractScriptHelper.getInteractScript(npc,player,getClass());
    String id=null;
    if (script != null) {
      Map<String,String> idMap=script.getIdMapFor(this.getClass(),player);
      if (!idMap.isEmpty())       for (      Map.Entry<String,String> entry : idMap.entrySet()) {
        String entry_value=TagManager.tag(player,npc,entry.getValue());
        if (Item.valueOf(entry_value).comparesTo(player.getItemInHand()) >= 0 && script.checkSpecificTriggerScriptRequirementsFor(this.getClass(),player,npc,entry.getKey()))         id=entry.getKey();
      }
    }
    if (!parse(npc,player,script,id))     npc.action(""String_Node_Str"",player);
  }
}",0.9929378531073446
10439,"@EventHandler public void playerTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  Player p=event.getPlayer();
  String type=event.getType() != null ? event.getType() : ""String_Node_Str"";
  String typeContext=event.getTypeContext() != null ? event.getTypeContext() : ""String_Node_Str"";
  String subType=event.getSubType() != null ? event.getSubType() : ""String_Node_Str"";
  String subTypeContext=event.getSubTypeContext() != null ? event.getSubTypeContext() : ""String_Node_Str"";
  String specifier=event.getSpecifier() != null ? event.getSpecifier() : ""String_Node_Str"";
  String specifierContext=event.getSpecifierContext() != null ? event.getSpecifierContext() : ""String_Node_Str"";
  if (type.equalsIgnoreCase(""String_Node_Str"")) {
    StringBuilder players=new StringBuilder();
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      if (specifier.equalsIgnoreCase(""String_Node_Str"")) {
        for (        Player player : Bukkit.getOnlinePlayers()) {
          if (player.isOp()) {
            players.append(player.getName());
            players.append(""String_Node_Str"");
          }
        }
      }
 else {
        for (        Player player : Bukkit.getOnlinePlayers()) {
          players.append(player.getName());
          players.append(""String_Node_Str"");
        }
      }
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      StringBuilder onlinePlayers=new StringBuilder();
      for (      Player player : Bukkit.getOnlinePlayers()) {
        onlinePlayers.append(player.getName());
        onlinePlayers.append(""String_Node_Str"");
      }
      if (specifier.equalsIgnoreCase(""String_Node_Str"")) {
        for (        OfflinePlayer player : Bukkit.getOfflinePlayers()) {
          if (player.isOp() && !onlinePlayers.toString().contains(player.getName())) {
            players.append(player.getName());
            players.append(""String_Node_Str"");
          }
        }
      }
 else {
        for (        OfflinePlayer player : Bukkit.getOfflinePlayers()) {
          if (!onlinePlayers.toString().contains(player.getName())) {
            players.append(player.getName());
            players.append(""String_Node_Str"");
          }
        }
      }
    }
 else {
      for (      OfflinePlayer player : Bukkit.getOfflinePlayers()) {
        players.append(player.getName());
        players.append(""String_Node_Str"");
      }
    }
    event.setReplaced(players.toString().substring(0,players.length() - 1));
    return;
  }
  if (event.getPlayer() == null)   return;
  if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (event.hasTypeContext()) {
      if (aH.matchesInteger(event.getTypeContext())) {
        if (playerChatHistory.containsKey(event.getPlayer().getName())) {
          List<String> history=playerChatHistory.get(event.getPlayer().getName());
          if (history.size() < aH.getIntegerFrom(event.getTypeContext()))           event.setReplaced(history.get(history.size() - 1));
 else           event.setReplaced(history.get(aH.getIntegerFrom(event.getTypeContext()) - 1));
        }
      }
    }
 else {
      if (playerChatHistory.containsKey(event.getPlayer().getName())) {
        event.setReplaced(playerChatHistory.get(event.getPlayer().getName()).get(0));
      }
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    int range=100;
    if (aH.matchesInteger(typeContext))     range=aH.getIntegerFrom(typeContext);
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(String.valueOf(Utilities.getClosestNPC(p.getLocation(),range).getId()));
 else       event.setReplaced(String.valueOf(Utilities.getClosestNPC(p.getLocation(),range).getName()));
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getAmount()));
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getTypeId()));
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getDurability()));
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getData()));
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getMaxStackSize()));
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      if (NBTItem.hasCustomNBT(p.getItemInHand(),""String_Node_Str""))       event.setReplaced(NBTItem.getCustomNBT(p.getItemInHand(),""String_Node_Str""));
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      String enchantments=null;
      if (specifier.equalsIgnoreCase(""String_Node_Str""))       enchantments=NBTItem.getEnchantments(p.getItemInHand()).asDScriptListWithLevels();
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       enchantments=NBTItem.getEnchantments(p.getItemInHand()).asDScriptListLevelsOnly();
 else       enchantments=NBTItem.getEnchantments(p.getItemInHand()).asDScriptList();
      if (enchantments != null && enchantments.length() > 0)       event.setReplaced(enchantments);
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      if (p.getItemInHand().hasItemMeta()) {
        if (p.getItemInHand().getItemMeta().hasLore()) {
          event.setReplaced(new dList(p.getItemInHand().getItemMeta().getLore()).dScriptArgValue());
        }
      }
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(p.getItemInHand().getItemMeta().getDisplayName());
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     if (specifier.equalsIgnoreCase(""String_Node_Str"")) {
      String itemName=p.getItemInHand().getType().name().toLowerCase().replace('_',' ');
      int itemQty=p.getItemInHand().getAmount();
      if (itemName.equalsIgnoreCase(""String_Node_Str"")) {
        event.setReplaced(""String_Node_Str"");
      }
 else       if (itemName.equalsIgnoreCase(""String_Node_Str"") || itemName.equalsIgnoreCase(""String_Node_Str"")) {
        event.setReplaced(itemName);
      }
 else       if (itemQty > 1) {
        if (itemName.equalsIgnoreCase(""String_Node_Str""))         event.setReplaced(""String_Node_Str"");
 else         if (itemName.endsWith(""String_Node_Str""))         event.setReplaced(itemName.substring(0,itemName.length() - 1) + ""String_Node_Str"");
 else         if (itemName.endsWith(""String_Node_Str""))         event.setReplaced(itemName);
 else         event.setReplaced(itemName + ""String_Node_Str"");
      }
 else {
        if (itemName.equalsIgnoreCase(""String_Node_Str""))         event.setReplaced(""String_Node_Str"");
 else         if (itemName.endsWith(""String_Node_Str""))         event.setReplaced(itemName);
 else         if (itemName.startsWith(""String_Node_Str"") || itemName.startsWith(""String_Node_Str"") || itemName.startsWith(""String_Node_Str"")|| itemName.startsWith(""String_Node_Str"")|| itemName.startsWith(""String_Node_Str""))         event.setReplaced(""String_Node_Str"" + itemName);
 else         event.setReplaced(""String_Node_Str"" + itemName);
      }
    }
 else     event.setReplaced(p.getItemInHand().getType().name());
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(p.getName());
    if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(p.getDisplayName());
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(p.getPlayerListName());
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(p.getLocation().getX() + ""String_Node_Str"" + p.getLocation().getY()+ ""String_Node_Str""+ p.getLocation().getZ()+ ""String_Node_Str""+ p.getWorld().getName());
    if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(p.getLocation().getBlockX() + ""String_Node_Str"" + p.getLocation().getBlockY()+ ""String_Node_Str""+ p.getLocation().getBlockZ()+ ""String_Node_Str""+ p.getWorld().getName());
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(""String_Node_Str"" + p.getLocation().getX() + ""String_Node_Str""+ p.getLocation().getY()+ ""String_Node_Str""+ p.getLocation().getZ()+ ""String_Node_Str""+ p.getWorld().getName()+ ""String_Node_Str"");
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLocation().getX()));
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLocation().getY()));
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLocation().getZ()));
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(p.getWorld().getName());
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      int range=50;
      if (aH.matchesInteger(subTypeContext))       range=aH.getIntegerFrom(subTypeContext);
      event.setReplaced(new Location(p.getTargetBlock(null,range).getLocation()).dScriptArgValue());
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     if (specifier.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(p.getLocation().add(0,-1,0).getBlock().getType().name().toLowerCase().replace('_',' '));
 else     event.setReplaced(p.getLocation().add(0,-1,0).getBlock().getType().name());
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(p.getWorld().getSpawnLocation().getX() + ""String_Node_Str"" + p.getWorld().getSpawnLocation().getY()+ ""String_Node_Str""+ p.getWorld().getSpawnLocation().getZ()+ ""String_Node_Str""+ p.getWorld().getName());
 else     if (subType.equalsIgnoreCase(""String_Node_Str"") && p.getBedSpawnLocation() != null)     event.setReplaced(p.getBedSpawnLocation().getX() + ""String_Node_Str"" + p.getBedSpawnLocation().getY()+ ""String_Node_Str""+ p.getBedSpawnLocation().getZ()+ ""String_Node_Str""+ p.getWorld().getName());
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.getHealth()));
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      int maxHealth=p.getMaxHealth();
      if (event.getType().split(""String_Node_Str"").length > 2)       maxHealth=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      if ((float)p.getHealth() / maxHealth < .10)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getHealth() / maxHealth < .40)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getHealth() / maxHealth < .75)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getHealth() / maxHealth < 1)       event.setReplaced(""String_Node_Str"");
 else       event.setReplaced(""String_Node_Str"");
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      int maxHealth=p.getMaxHealth();
      if (event.getType().split(""String_Node_Str"").length > 2)       maxHealth=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      event.setReplaced(String.valueOf(((float)p.getHealth() / maxHealth) * 100));
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.getFoodLevel()));
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      int maxFood=20;
      if (event.getType().split(""String_Node_Str"").length > 2)       maxFood=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      if ((float)p.getHealth() / maxFood < .10)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getFoodLevel() / maxFood < .40)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getFoodLevel() / maxFood < .75)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getFoodLevel() / maxFood < 1)       event.setReplaced(""String_Node_Str"");
 else       event.setReplaced(""String_Node_Str"");
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      int maxFood=20;
      if (event.getType().split(""String_Node_Str"").length > 2)       maxFood=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      event.setReplaced(String.valueOf(((float)p.getFoodLevel() / maxFood) * 100));
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (Depends.economy != null) {
      event.setReplaced(String.valueOf(Depends.economy.getBalance(p.getName())));
      if (subType.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(String.valueOf((int)Depends.economy.getBalance(p.getName())));
 else       if (subType.equalsIgnoreCase(""String_Node_Str""))       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(Depends.economy.currencyNameSingular());
 else       event.setReplaced(Depends.economy.currencyNamePlural());
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (Depends.permissions != null) {
      if (subType.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(String.valueOf(Depends.permissions.has((World)null,p.getName(),typeContext)));
 else       event.setReplaced(String.valueOf(Depends.permissions.has(p,typeContext)));
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (Depends.permissions != null) {
      if (subType.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(String.valueOf(Depends.permissions.playerInGroup((World)null,p.getName(),typeContext)));
 else       event.setReplaced(String.valueOf(Depends.permissions.playerInGroup(p,typeContext)));
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getGameMode().getValue()));
 else     event.setReplaced(String.valueOf(p.getGameMode().name()));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isOp()));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isBanned()));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isOnline()));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isFlying()));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isSneaking()));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.getPlayerTime()));
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      if (p.getPlayerTime() >= 23000)       event.setReplaced(""String_Node_Str"");
 else       if (p.getPlayerTime() >= 13500)       event.setReplaced(""String_Node_Str"");
 else       if (p.getPlayerTime() >= 12500)       event.setReplaced(""String_Node_Str"");
 else       event.setReplaced(""String_Node_Str"");
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (p.getWorld().hasStorm())     event.setReplaced(""String_Node_Str"");
 else     if (p.getPlayerTime() > 13500)     event.setReplaced(""String_Node_Str"");
 else     event.setReplaced(""String_Node_Str"");
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (subType.equalsIgnoreCase(""String_Node_Str"") && p.getInventory().getBoots() != null)     event.setReplaced(p.getInventory().getBoots().getType().name());
 else     if (subType.equalsIgnoreCase(""String_Node_Str"") && p.getInventory().getChestplate() != null)     event.setReplaced(p.getInventory().getChestplate().getType().name());
 else     if (subType.equalsIgnoreCase(""String_Node_Str"") && p.getInventory().getHelmet() != null)     event.setReplaced(p.getInventory().getHelmet().getType().name());
 else     if (subType.equalsIgnoreCase(""String_Node_Str"") && p.getInventory().getLeggings() != null)     event.setReplaced(p.getInventory().getLeggings().getType().name());
 else     event.setReplaced(""String_Node_Str"");
    if (specifier.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(event.getReplaced().toLowerCase().replace('_',' '));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (aH.matchesScript(""String_Node_Str"" + typeContext)) {
      int times=0;
      if (subType.equalsIgnoreCase(""String_Node_Str"")) {
        times=FinishCommand.getScriptCompletes(p.getName(),aH.getStringFrom(typeContext).toUpperCase());
      }
 else       if (subType.equalsIgnoreCase(""String_Node_Str"")) {
        times=FailCommand.getScriptFails(p.getName(),aH.getStringFrom(typeContext).toUpperCase());
      }
      if (times > 0)       event.setReplaced(""String_Node_Str"");
 else       event.setReplaced(""String_Node_Str"");
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      if (specifier.equalsIgnoreCase(""String_Node_Str"")) {
        for (        ItemStack itemstack : event.getPlayer().getInventory().getContents()) {
          if (itemstack != null && itemstack.getItemMeta().getDisplayName() != null) {
            if (itemstack.getItemMeta().getDisplayName().equalsIgnoreCase(specifierContext)) {
              event.setReplaced(""String_Node_Str"");
              return;
            }
          }
        }
        for (        ItemStack itemstack : event.getPlayer().getInventory().getArmorContents()) {
          if (itemstack.getType().name() != ""String_Node_Str"" && itemstack.getItemMeta().getDisplayName() != null) {
            if (itemstack.getItemMeta().getDisplayName().equalsIgnoreCase(specifierContext)) {
              event.setReplaced(""String_Node_Str"");
              return;
            }
          }
        }
        event.setReplaced(""String_Node_Str"");
      }
 else       if (aH.matchesItem(""String_Node_Str"" + subTypeContext)) {
        ItemStack item=aH.getItemFrom(""String_Node_Str"" + subTypeContext);
        if (specifier.equalsIgnoreCase(""String_Node_Str"") && (aH.matchesQuantity(""String_Node_Str"" + specifierContext))) {
          int qty=aH.getIntegerFrom(specifierContext);
          event.setReplaced(String.valueOf(event.getPlayer().getInventory().containsAtLeast(item,qty)));
        }
 else         event.setReplaced(String.valueOf(event.getPlayer().getInventory().containsAtLeast(item,1)));
      }
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      int qty=0;
      if (aH.matchesItem(""String_Node_Str"" + subTypeContext)) {
        ItemStack item=new ItemStack(aH.getItemFrom(""String_Node_Str"" + subTypeContext));
        qty=Utilities.countItems(item,event.getPlayer().getInventory());
        for (        ItemStack itemstack : event.getPlayer().getInventory().getArmorContents()) {
          if (itemstack.getType().name() != ""String_Node_Str"") {
            if (itemstack.isSimilar(item))             qty=qty + itemstack.getAmount();
          }
        }
      }
 else {
        qty=Utilities.countItems(event.getPlayer().getInventory());
        for (        ItemStack itemstack : event.getPlayer().getInventory().getArmorContents()) {
          if (itemstack.getType().name() != ""String_Node_Str"")           qty=qty + itemstack.getAmount();
        }
      }
      event.setReplaced(String.valueOf(qty));
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      int qty=0;
      for (      ItemStack itemstack : event.getPlayer().getInventory().getContents()) {
        if (itemstack != null)         qty++;
      }
      for (      ItemStack itemstack : event.getPlayer().getInventory().getArmorContents()) {
        if (itemstack.getType().name() != ""String_Node_Str"")         qty++;
      }
      event.setReplaced(String.valueOf(qty));
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(event.getPlayer().getExp() * 100));
    if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getExpToLevel()));
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getTotalExperience()));
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLevel()));
  }
}","@EventHandler public void playerTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  Player p=event.getPlayer();
  String type=event.getType() != null ? event.getType() : ""String_Node_Str"";
  String typeContext=event.getTypeContext() != null ? event.getTypeContext() : ""String_Node_Str"";
  String subType=event.getSubType() != null ? event.getSubType() : ""String_Node_Str"";
  String subTypeContext=event.getSubTypeContext() != null ? event.getSubTypeContext() : ""String_Node_Str"";
  String specifier=event.getSpecifier() != null ? event.getSpecifier() : ""String_Node_Str"";
  String specifierContext=event.getSpecifierContext() != null ? event.getSpecifierContext() : ""String_Node_Str"";
  if (type.equalsIgnoreCase(""String_Node_Str"")) {
    StringBuilder players=new StringBuilder();
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      if (specifier.equalsIgnoreCase(""String_Node_Str"")) {
        for (        Player player : Bukkit.getOnlinePlayers()) {
          if (player.isOp()) {
            players.append(player.getName());
            players.append(""String_Node_Str"");
          }
        }
      }
 else {
        for (        Player player : Bukkit.getOnlinePlayers()) {
          players.append(player.getName());
          players.append(""String_Node_Str"");
        }
      }
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      StringBuilder onlinePlayers=new StringBuilder();
      for (      Player player : Bukkit.getOnlinePlayers()) {
        onlinePlayers.append(player.getName());
        onlinePlayers.append(""String_Node_Str"");
      }
      if (specifier.equalsIgnoreCase(""String_Node_Str"")) {
        for (        OfflinePlayer player : Bukkit.getOfflinePlayers()) {
          if (player.isOp() && !onlinePlayers.toString().contains(player.getName())) {
            players.append(player.getName());
            players.append(""String_Node_Str"");
          }
        }
      }
 else {
        for (        OfflinePlayer player : Bukkit.getOfflinePlayers()) {
          if (!onlinePlayers.toString().contains(player.getName())) {
            players.append(player.getName());
            players.append(""String_Node_Str"");
          }
        }
      }
    }
 else {
      for (      OfflinePlayer player : Bukkit.getOfflinePlayers()) {
        players.append(player.getName());
        players.append(""String_Node_Str"");
      }
    }
    event.setReplaced(players.toString().substring(0,players.length() - 1));
    return;
  }
  if (event.getPlayer() == null)   return;
  if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (event.hasTypeContext()) {
      if (aH.matchesInteger(event.getTypeContext())) {
        if (playerChatHistory.containsKey(event.getPlayer().getName())) {
          List<String> history=playerChatHistory.get(event.getPlayer().getName());
          if (history.size() < aH.getIntegerFrom(event.getTypeContext()))           event.setReplaced(history.get(history.size() - 1));
 else           event.setReplaced(history.get(aH.getIntegerFrom(event.getTypeContext()) - 1));
        }
      }
    }
 else {
      if (playerChatHistory.containsKey(event.getPlayer().getName())) {
        event.setReplaced(playerChatHistory.get(event.getPlayer().getName()).get(0));
      }
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    int range=100;
    if (aH.matchesInteger(typeContext))     range=aH.getIntegerFrom(typeContext);
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(String.valueOf(Utilities.getClosestNPC(p.getLocation(),range).getId()));
 else       event.setReplaced(String.valueOf(Utilities.getClosestNPC(p.getLocation(),range).getName()));
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getAmount()));
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getTypeId()));
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getDurability()));
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getData()));
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getMaxStackSize()));
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      if (NBTItem.hasCustomNBT(p.getItemInHand(),""String_Node_Str""))       event.setReplaced(NBTItem.getCustomNBT(p.getItemInHand(),""String_Node_Str""));
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      String enchantments=null;
      if (specifier.equalsIgnoreCase(""String_Node_Str""))       enchantments=NBTItem.getEnchantments(p.getItemInHand()).asDScriptListWithLevels();
 else       if (specifier.equalsIgnoreCase(""String_Node_Str""))       enchantments=NBTItem.getEnchantments(p.getItemInHand()).asDScriptListLevelsOnly();
 else       enchantments=NBTItem.getEnchantments(p.getItemInHand()).asDScriptList();
      if (enchantments != null && enchantments.length() > 0)       event.setReplaced(enchantments);
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      if (p.getItemInHand().hasItemMeta()) {
        if (p.getItemInHand().getItemMeta().hasLore()) {
          event.setReplaced(new dList(p.getItemInHand().getItemMeta().getLore()).dScriptArgValue());
        }
      }
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(p.getItemInHand().getItemMeta().getDisplayName());
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     if (specifier.equalsIgnoreCase(""String_Node_Str"")) {
      String itemName=p.getItemInHand().getType().name().toLowerCase().replace('_',' ');
      int itemQty=p.getItemInHand().getAmount();
      if (itemName.equalsIgnoreCase(""String_Node_Str"")) {
        event.setReplaced(""String_Node_Str"");
      }
 else       if (itemName.equalsIgnoreCase(""String_Node_Str"") || itemName.equalsIgnoreCase(""String_Node_Str"")) {
        event.setReplaced(itemName);
      }
 else       if (itemQty > 1) {
        if (itemName.equalsIgnoreCase(""String_Node_Str""))         event.setReplaced(""String_Node_Str"");
 else         if (itemName.endsWith(""String_Node_Str""))         event.setReplaced(itemName.substring(0,itemName.length() - 1) + ""String_Node_Str"");
 else         if (itemName.endsWith(""String_Node_Str""))         event.setReplaced(itemName);
 else         event.setReplaced(itemName + ""String_Node_Str"");
      }
 else {
        if (itemName.equalsIgnoreCase(""String_Node_Str""))         event.setReplaced(""String_Node_Str"");
 else         if (itemName.endsWith(""String_Node_Str""))         event.setReplaced(itemName);
 else         if (itemName.startsWith(""String_Node_Str"") || itemName.startsWith(""String_Node_Str"") || itemName.startsWith(""String_Node_Str"")|| itemName.startsWith(""String_Node_Str"")|| itemName.startsWith(""String_Node_Str""))         event.setReplaced(""String_Node_Str"" + itemName);
 else         event.setReplaced(""String_Node_Str"" + itemName);
      }
    }
 else     event.setReplaced(p.getItemInHand().getType().name());
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(p.getName());
    if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(p.getDisplayName());
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(p.getPlayerListName());
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(p.getLocation().getX() + ""String_Node_Str"" + p.getLocation().getY()+ ""String_Node_Str""+ p.getLocation().getZ()+ ""String_Node_Str""+ p.getWorld().getName());
    if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(p.getLocation().getBlockX() + ""String_Node_Str"" + p.getLocation().getBlockY()+ ""String_Node_Str""+ p.getLocation().getBlockZ()+ ""String_Node_Str""+ p.getWorld().getName());
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(""String_Node_Str"" + p.getLocation().getX() + ""String_Node_Str""+ p.getLocation().getY()+ ""String_Node_Str""+ p.getLocation().getZ()+ ""String_Node_Str""+ p.getWorld().getName()+ ""String_Node_Str"");
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLocation().getX()));
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLocation().getY()));
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLocation().getZ()));
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(p.getWorld().getName());
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      int range=50;
      if (aH.matchesInteger(subTypeContext))       range=aH.getIntegerFrom(subTypeContext);
      event.setReplaced(new Location(p.getTargetBlock(null,range).getLocation()).dScriptArgValue());
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     if (specifier.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(p.getLocation().add(0,-1,0).getBlock().getType().name().toLowerCase().replace('_',' '));
 else     event.setReplaced(p.getLocation().add(0,-1,0).getBlock().getType().name());
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(p.getWorld().getSpawnLocation().getX() + ""String_Node_Str"" + p.getWorld().getSpawnLocation().getY()+ ""String_Node_Str""+ p.getWorld().getSpawnLocation().getZ()+ ""String_Node_Str""+ p.getWorld().getName());
 else     if (subType.equalsIgnoreCase(""String_Node_Str"") && p.getBedSpawnLocation() != null)     event.setReplaced(p.getBedSpawnLocation().getX() + ""String_Node_Str"" + p.getBedSpawnLocation().getY()+ ""String_Node_Str""+ p.getBedSpawnLocation().getZ()+ ""String_Node_Str""+ p.getWorld().getName());
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.getHealth()));
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      int maxHealth=p.getMaxHealth();
      if (event.getType().split(""String_Node_Str"").length > 2)       maxHealth=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      if ((float)p.getHealth() / maxHealth < .10)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getHealth() / maxHealth < .40)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getHealth() / maxHealth < .75)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getHealth() / maxHealth < 1)       event.setReplaced(""String_Node_Str"");
 else       event.setReplaced(""String_Node_Str"");
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      int maxHealth=p.getMaxHealth();
      if (event.getType().split(""String_Node_Str"").length > 2)       maxHealth=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      event.setReplaced(String.valueOf(((float)p.getHealth() / maxHealth) * 100));
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.getFoodLevel()));
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      int maxFood=20;
      if (event.getType().split(""String_Node_Str"").length > 2)       maxFood=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      if ((float)p.getHealth() / maxFood < .10)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getFoodLevel() / maxFood < .40)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getFoodLevel() / maxFood < .75)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getFoodLevel() / maxFood < 1)       event.setReplaced(""String_Node_Str"");
 else       event.setReplaced(""String_Node_Str"");
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      int maxFood=20;
      if (event.getType().split(""String_Node_Str"").length > 2)       maxFood=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      event.setReplaced(String.valueOf(((float)p.getFoodLevel() / maxFood) * 100));
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (Depends.economy != null) {
      event.setReplaced(String.valueOf(Depends.economy.getBalance(p.getName())));
      if (subType.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(String.valueOf((int)Depends.economy.getBalance(p.getName())));
 else       if (subType.equalsIgnoreCase(""String_Node_Str""))       if (specifier.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(Depends.economy.currencyNameSingular());
 else       event.setReplaced(Depends.economy.currencyNamePlural());
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (Depends.permissions != null) {
      if (subType.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(String.valueOf(Depends.permissions.has((World)null,p.getName(),typeContext)));
 else       event.setReplaced(String.valueOf(Depends.permissions.has(p,typeContext)));
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (Depends.permissions != null) {
      if (subType.equalsIgnoreCase(""String_Node_Str""))       event.setReplaced(String.valueOf(Depends.permissions.playerInGroup((World)null,p.getName(),typeContext)));
 else       event.setReplaced(String.valueOf(Depends.permissions.playerInGroup(p,typeContext)));
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getGameMode().getValue()));
 else     event.setReplaced(String.valueOf(p.getGameMode().name()));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isOp()));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isBanned()));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isOnline()));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isFlying()));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isSneaking()));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.getPlayerTime()));
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      if (p.getPlayerTime() >= 23000)       event.setReplaced(""String_Node_Str"");
 else       if (p.getPlayerTime() >= 13500)       event.setReplaced(""String_Node_Str"");
 else       if (p.getPlayerTime() >= 12500)       event.setReplaced(""String_Node_Str"");
 else       event.setReplaced(""String_Node_Str"");
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (p.getWorld().hasStorm())     event.setReplaced(""String_Node_Str"");
 else     if (p.getPlayerTime() > 13500)     event.setReplaced(""String_Node_Str"");
 else     event.setReplaced(""String_Node_Str"");
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (subType.equalsIgnoreCase(""String_Node_Str"") && p.getInventory().getBoots() != null)     event.setReplaced(p.getInventory().getBoots().getType().name());
 else     if (subType.equalsIgnoreCase(""String_Node_Str"") && p.getInventory().getChestplate() != null)     event.setReplaced(p.getInventory().getChestplate().getType().name());
 else     if (subType.equalsIgnoreCase(""String_Node_Str"") && p.getInventory().getHelmet() != null)     event.setReplaced(p.getInventory().getHelmet().getType().name());
 else     if (subType.equalsIgnoreCase(""String_Node_Str"") && p.getInventory().getLeggings() != null)     event.setReplaced(p.getInventory().getLeggings().getType().name());
 else     event.setReplaced(""String_Node_Str"");
    if (specifier.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(event.getReplaced().toLowerCase().replace('_',' '));
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (aH.matchesScript(""String_Node_Str"" + typeContext)) {
      int times=0;
      if (subType.equalsIgnoreCase(""String_Node_Str"")) {
        times=FinishCommand.getScriptCompletes(p.getName(),aH.getStringFrom(typeContext).toUpperCase());
      }
 else       if (subType.equalsIgnoreCase(""String_Node_Str"")) {
        times=FailCommand.getScriptFails(p.getName(),aH.getStringFrom(typeContext).toUpperCase());
      }
      if (times > 0)       event.setReplaced(""String_Node_Str"");
 else       event.setReplaced(""String_Node_Str"");
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      if (specifier.equalsIgnoreCase(""String_Node_Str"")) {
        for (        ItemStack itemstack : event.getPlayer().getInventory().getContents()) {
          if (itemstack != null && itemstack.getItemMeta().getDisplayName() != null) {
            if (itemstack.getItemMeta().getDisplayName().equalsIgnoreCase(specifierContext)) {
              event.setReplaced(""String_Node_Str"");
              return;
            }
          }
        }
        for (        ItemStack itemstack : event.getPlayer().getInventory().getArmorContents()) {
          if (itemstack.getType().name() != ""String_Node_Str"" && itemstack.getItemMeta().getDisplayName() != null) {
            if (itemstack.getItemMeta().getDisplayName().equalsIgnoreCase(specifierContext)) {
              event.setReplaced(""String_Node_Str"");
              return;
            }
          }
        }
        event.setReplaced(""String_Node_Str"");
      }
 else       if (aH.matchesItem(""String_Node_Str"" + subTypeContext)) {
        ItemStack item=aH.getItemFrom(""String_Node_Str"" + subTypeContext).getItemStack();
        if (specifier.equalsIgnoreCase(""String_Node_Str"") && (aH.matchesQuantity(""String_Node_Str"" + specifierContext))) {
          int qty=aH.getIntegerFrom(specifierContext);
          event.setReplaced(String.valueOf(event.getPlayer().getInventory().containsAtLeast(item,qty)));
        }
 else         event.setReplaced(String.valueOf(event.getPlayer().getInventory().containsAtLeast(item,1)));
      }
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      int qty=0;
      if (aH.matchesItem(""String_Node_Str"" + subTypeContext)) {
        ItemStack item=new ItemStack(aH.getItemFrom(""String_Node_Str"" + subTypeContext).getItemStack());
        qty=Utilities.countItems(item,event.getPlayer().getInventory());
        for (        ItemStack itemstack : event.getPlayer().getInventory().getArmorContents()) {
          if (itemstack.getType().name() != ""String_Node_Str"") {
            if (itemstack.isSimilar(item))             qty=qty + itemstack.getAmount();
          }
        }
      }
 else {
        qty=Utilities.countItems(event.getPlayer().getInventory());
        for (        ItemStack itemstack : event.getPlayer().getInventory().getArmorContents()) {
          if (itemstack.getType().name() != ""String_Node_Str"")           qty=qty + itemstack.getAmount();
        }
      }
      event.setReplaced(String.valueOf(qty));
    }
 else     if (subType.equalsIgnoreCase(""String_Node_Str"")) {
      int qty=0;
      for (      ItemStack itemstack : event.getPlayer().getInventory().getContents()) {
        if (itemstack != null)         qty++;
      }
      for (      ItemStack itemstack : event.getPlayer().getInventory().getArmorContents()) {
        if (itemstack.getType().name() != ""String_Node_Str"")         qty++;
      }
      event.setReplaced(String.valueOf(qty));
    }
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(event.getPlayer().getExp() * 100));
    if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getExpToLevel()));
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getTotalExperience()));
 else     if (subType.equalsIgnoreCase(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLevel()));
  }
}",0.999258600237248
10440,"@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Action action=(Action)scriptEntry.getObject(""String_Node_Str"");
  Player player=(Player)scriptEntry.getObject(""String_Node_Str"");
  String permission=String.valueOf(scriptEntry.getObject(""String_Node_Str""));
  String group=String.valueOf(scriptEntry.getObject(""String_Node_Str""));
  String world=String.valueOf(scriptEntry.getObject(""String_Node_Str""));
  dB.report(getName(),aH.debugObj(""String_Node_Str"",action.toString()) + aH.debugObj(""String_Node_Str"",player.getName()) + aH.debugObj(""String_Node_Str"",permission)+ aH.debugObj(""String_Node_Str"",group)+ aH.debugObj(""String_Node_Str"",world));
switch (action) {
case ADD:
    if (group != null) {
      if (Depends.permissions.groupHas(world,group,permission)) {
        dB.echoDebug(""String_Node_Str"" + group + ""String_Node_Str""+ permission);
      }
 else       Depends.permissions.groupAdd(world,group,permission);
    }
 else {
      if (Depends.permissions.has(player,permission)) {
        dB.echoDebug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ permission);
      }
 else       Depends.permissions.playerAdd(player,permission);
    }
  return;
case REMOVE:
if (group != null) {
  if (!Depends.permissions.groupHas(world,group,permission)) {
    dB.echoDebug(""String_Node_Str"" + group + ""String_Node_Str""+ permission);
  }
 else   Depends.permissions.groupRemove(world,group,permission);
}
 else {
  if (!Depends.permissions.has(player,permission)) {
    dB.echoDebug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ permission);
  }
 else   Depends.permissions.playerRemove(world,player.getName(),permission);
}
return;
}
}","@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Action action=(Action)scriptEntry.getObject(""String_Node_Str"");
  Player player=(Player)scriptEntry.getObject(""String_Node_Str"");
  String permission=String.valueOf(scriptEntry.getObject(""String_Node_Str""));
  String group=String.valueOf(scriptEntry.getObject(""String_Node_Str""));
  String world=String.valueOf(scriptEntry.getObject(""String_Node_Str""));
  dB.report(getName(),aH.debugObj(""String_Node_Str"",action.toString()) + aH.debugObj(""String_Node_Str"",player.getName()) + aH.debugObj(""String_Node_Str"",permission)+ aH.debugObj(""String_Node_Str"",group)+ aH.debugObj(""String_Node_Str"",world));
switch (action) {
case ADD:
    if (group != null && !group.equals(""String_Node_Str"")) {
      if (Depends.permissions.groupHas(world,group,permission)) {
        dB.echoDebug(""String_Node_Str"" + group + ""String_Node_Str""+ permission);
      }
 else       Depends.permissions.groupAdd(world,group,permission);
    }
 else {
      if (Depends.permissions.has(player,permission)) {
        dB.echoDebug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ permission);
      }
 else       Depends.permissions.playerAdd(player,permission);
    }
  return;
case REMOVE:
if (group != null && !group.equals(""String_Node_Str"")) {
  if (!Depends.permissions.groupHas(world,group,permission)) {
    dB.echoDebug(""String_Node_Str"" + group + ""String_Node_Str""+ permission);
  }
 else   Depends.permissions.groupRemove(world,group,permission);
}
 else {
  if (!Depends.permissions.has(player,permission)) {
    dB.echoDebug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ permission);
  }
 else   Depends.permissions.playerRemove(world,player.getName(),permission);
}
return;
}
}",0.9792507204610952
10441,"/** 
 * This method will be called every time a player moves in the game.  It's used to determine if a player has satisfied a certain travel goal.
 * @param event	The player movement event.
 */
@EventHandler public void walking(PlayerMoveEvent event){
  if (!(event.getPlayer() == player))   return;
  if (type == TravelType.DISTANCE) {
    if (!event.getTo().getBlock().equals(event.getFrom().getBlock())) {
      blocksWalked++;
      dB.echoDebug(""String_Node_Str"");
      check();
    }
  }
 else   if (type == TravelType.TOLOCATION) {
    if (player.getLocation().distance(endPoint) <= radius) {
      dB.echoDebug(""String_Node_Str"");
      finish();
    }
  }
 else   if (type == TravelType.TONPC) {
    if (player.getLocation().distance(target.getBukkitEntity().getLocation()) <= radius) {
      dB.echoDebug(""String_Node_Str"");
      finish();
    }
  }
}","/** 
 * This method will be called every time a player moves in the game.  It's used to determine if a player has satisfied a certain travel goal.
 * @param event	The player movement event.
 */
@EventHandler public void walking(PlayerMoveEvent event){
  if (!(event.getPlayer() == player))   return;
  if (player.getLocation().getWorld().equals(endPoint.getWorld()))   return;
  if (type == TravelType.DISTANCE) {
    if (!event.getTo().getBlock().equals(event.getFrom().getBlock())) {
      blocksWalked++;
      dB.echoDebug(""String_Node_Str"");
      check();
    }
  }
 else   if (type == TravelType.TOLOCATION) {
    if (player.getLocation().distance(endPoint) <= radius) {
      dB.echoDebug(""String_Node_Str"");
      finish();
    }
  }
 else   if (type == TravelType.TONPC) {
    if (player.getLocation().distance(target.getBukkitEntity().getLocation()) <= radius) {
      dB.echoDebug(""String_Node_Str"");
      finish();
    }
  }
}",0.9572933998890738
10442,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  ScriptQueue queue=scriptEntry.getResidingQueue();
  Action action=null;
  Duration delay=null;
  List<ScriptQueue> queues=new ArrayList<ScriptQueue>();
  queues.add(scriptEntry.getResidingQueue());
  for (  String arg : scriptEntry.getArguments()) {
    if (aH.matchesArg(""String_Node_Str"",arg))     action=Action.valueOf(aH.getStringFrom(arg).toUpperCase());
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,aH.ArgumentType.Duration)) {
      action=Action.DELAY;
      delay=aH.getDurationFrom(arg);
    }
 else {
      queues.clear();
      for (      String queueName : aH.getListFrom(arg)) {
        try {
          queues.add(aH.getQueueFrom(queueName));
        }
 catch (        Exception e) {
        }
      }
    }
  }
  if (queues.isEmpty())   queues.add(scriptEntry.getResidingQueue());
  if (action == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  if (action == Action.DELAY && delay == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.addObject(""String_Node_Str"",queue).addObject(""String_Node_Str"",action).addObject(""String_Node_Str"",delay);
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  Action action=null;
  Duration delay=null;
  List<ScriptQueue> queues=new ArrayList<ScriptQueue>();
  queues.add(scriptEntry.getResidingQueue());
  for (  String arg : scriptEntry.getArguments()) {
    if (aH.matchesArg(""String_Node_Str"",arg))     action=Action.valueOf(aH.getStringFrom(arg).toUpperCase());
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,aH.ArgumentType.Duration)) {
      action=Action.DELAY;
      delay=aH.getDurationFrom(arg);
    }
 else {
      queues.clear();
      for (      String queueName : aH.getListFrom(arg)) {
        try {
          queues.add(aH.getQueueFrom(queueName));
        }
 catch (        Exception e) {
        }
      }
    }
  }
  if (queues.isEmpty())   queues.add(scriptEntry.getResidingQueue());
  if (action == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  if (action == Action.DELAY && delay == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.addObject(""String_Node_Str"",queues).addObject(""String_Node_Str"",action).addObject(""String_Node_Str"",delay);
}",0.9775708844688956
10443,"/** 
 * <p> This is the trigger that fires when any player moves in the entire world.  The trigger ONLY checks if the player moves to a new BLOCK in the world</p> When the trigger determines that the player has moved to a different block in the world, all of the NPCs are checked for the following criteria: <ol> <li>Does the NPC have the trigger trait?</li> <li>Is the trigger enabled?</li> <li>Is the NPC available (i.e. not busy)?</li> <li>Is the NPC Spawned?</li> <li>Is the NPC in the same World as the player</li> </ol> If the NPC passes all of these criteria, there are three events that can occur (only one of them): <ol> <li>If the player was outside of the NPC's radius, and moved inside the radius, and there's a SCRIPT or an ENTRY SCRIPT, then execute that entry script.</li> <li>If the player was INSIDE of the NPC's radius, and moved OUTSIDE the radius, and there's an EXIT SCRIPT, then execute that exit script. <li>If the player was INSIDE of the NPC's radius, and moved WITHIN the radius, and there's an MOVE SCRIPT, then execute that move script. </ol>
 * @param event	The player's move event (which includes their location).
 */
@EventHandler public void proximityTrigger(PlayerMoveEvent event){
  if (!event.getTo().getBlock().equals(event.getFrom().getBlock())) {
    Location toBlockLocation=event.getTo().getBlock().getLocation();
    Iterator<dNPC> it=DenizenAPI.getCurrentInstance().getNPCRegistry().getSpawnedNPCs().iterator();
    while (it.hasNext()) {
      dNPC npc=it.next();
      if (!npc.getCitizen().hasTrait(TriggerTrait.class))       continue;
      if (!npc.getCitizen().getTrait(TriggerTrait.class).isEnabled(name))       continue;
      if (!npc.isSpawned() || (!npc.getLocation().getWorld().equals(event.getPlayer().getWorld()) && hasExitedProximityOf(event.getPlayer(),npc)))       continue;
      if (!isCloseEnough(event.getPlayer(),npc) && hasExitedProximityOf(event.getPlayer(),npc))       continue;
      Player player=event.getPlayer();
      InteractScriptContainer script=npc.getInteractScriptQuietly(event.getPlayer(),this.getClass());
      int entryRadius=npc.getTriggerTrait().getRadius(name);
      int exitRadius=npc.getTriggerTrait().getRadius(name);
      int moveRadius=npc.getTriggerTrait().getRadius(name);
      if (script != null) {
        try {
          if (script.hasTriggerOptionFor(getClass(),player,null,""String_Node_Str""))           entryRadius=Integer.valueOf(script.getTriggerOptionFor(getClass(),player,null,""String_Node_Str""));
        }
 catch (        NumberFormatException nfe) {
          dB.echoDebug(""String_Node_Str"" + entryRadius + ""String_Node_Str"");
        }
        try {
          if (script.hasTriggerOptionFor(getClass(),player,null,""String_Node_Str""))           entryRadius=Integer.valueOf(script.getTriggerOptionFor(getClass(),player,null,""String_Node_Str""));
        }
 catch (        NumberFormatException nfe) {
          dB.echoDebug(""String_Node_Str"" + exitRadius + ""String_Node_Str"");
        }
        try {
          if (script.hasTriggerOptionFor(getClass(),player,null,""String_Node_Str""))           entryRadius=Integer.valueOf(script.getTriggerOptionFor(getClass(),player,null,""String_Node_Str""));
        }
 catch (        NumberFormatException nfe) {
          dB.echoDebug(""String_Node_Str"" + exitRadius + ""String_Node_Str"");
        }
      }
      Location npcLocation=npc.getLocation();
      boolean playerChangedWorlds=false;
      if (npcLocation.getWorld() != event.getPlayer().getWorld())       playerChangedWorlds=true;
      if (!hasExitedProximityOf(event.getPlayer(),npc) && (playerChangedWorlds || npc.getLocation().distance(toBlockLocation) >= exitRadius)) {
        if (!npc.getTriggerTrait().triggerCooldownOnly(this,event.getPlayer()))         continue;
        exitProximityOf(event.getPlayer(),npc);
        dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + npc.getName()+ ""String_Node_Str"");
        npc.action(""String_Node_Str"",event.getPlayer());
        parse(npc,player,script,""String_Node_Str"");
      }
 else       if (hasExitedProximityOf(event.getPlayer(),npc) && npc.getLocation().distance(toBlockLocation) <= entryRadius) {
        if (!npc.getTriggerTrait().triggerCooldownOnly(this,event.getPlayer()))         continue;
        enterProximityOf(event.getPlayer(),npc);
        npc.action(""String_Node_Str"",event.getPlayer());
        parse(npc,player,script,""String_Node_Str"");
      }
 else       if (!hasExitedProximityOf(event.getPlayer(),npc) && npc.getLocation().distance(toBlockLocation) <= moveRadius) {
        if (!npc.getTriggerTrait().triggerCooldownOnly(this,event.getPlayer()))         continue;
        npc.action(""String_Node_Str"",event.getPlayer());
        parse(npc,player,script,""String_Node_Str"");
      }
    }
  }
}","/** 
 * <p> This is the trigger that fires when any player moves in the entire world.  The trigger ONLY checks if the player moves to a new BLOCK in the world</p> When the trigger determines that the player has moved to a different block in the world, all of the NPCs are checked for the following criteria: <ol> <li>Does the NPC have the trigger trait?</li> <li>Is the trigger enabled?</li> <li>Is the NPC available (i.e. not busy)?</li> <li>Is the NPC Spawned?</li> <li>Is the NPC in the same World as the player</li> </ol> If the NPC passes all of these criteria, there are three events that can occur (only one of them): <ol> <li>If the player was outside of the NPC's radius, and moved inside the radius, and there's a SCRIPT or an ENTRY SCRIPT, then execute that entry script.</li> <li>If the player was INSIDE of the NPC's radius, and moved OUTSIDE the radius, and there's an EXIT SCRIPT, then execute that exit script. <li>If the player was INSIDE of the NPC's radius, and moved WITHIN the radius, and there's an MOVE SCRIPT, then execute that move script. </ol>
 * @param event	The player's move event (which includes their location).
 */
@EventHandler public void proximityTrigger(PlayerMoveEvent event){
  if (!event.getTo().getBlock().equals(event.getFrom().getBlock())) {
    Location toBlockLocation=event.getTo().getBlock().getLocation();
    Iterator<dNPC> it=DenizenAPI.getCurrentInstance().getNPCRegistry().getSpawnedNPCs().iterator();
    while (it.hasNext()) {
      dNPC npc=it.next();
      if (!npc.getCitizen().hasTrait(TriggerTrait.class))       continue;
      if (!npc.getCitizen().getTrait(TriggerTrait.class).isEnabled(name))       continue;
      if (!npc.isSpawned() || (!npc.getLocation().getWorld().equals(event.getPlayer().getWorld()) && hasExitedProximityOf(event.getPlayer(),npc)))       continue;
      if (!isCloseEnough(event.getPlayer(),npc) && hasExitedProximityOf(event.getPlayer(),npc))       continue;
      Player player=event.getPlayer();
      InteractScriptContainer script=npc.getInteractScriptQuietly(event.getPlayer(),this.getClass());
      int entryRadius=npc.getTriggerTrait().getRadius(name);
      int exitRadius=npc.getTriggerTrait().getRadius(name);
      int moveRadius=npc.getTriggerTrait().getRadius(name);
      if (script != null) {
        try {
          if (script.hasTriggerOptionFor(getClass(),player,null,""String_Node_Str""))           entryRadius=Integer.valueOf(script.getTriggerOptionFor(getClass(),player,null,""String_Node_Str""));
        }
 catch (        NumberFormatException nfe) {
          dB.echoDebug(""String_Node_Str"" + entryRadius + ""String_Node_Str"");
        }
        try {
          if (script.hasTriggerOptionFor(getClass(),player,null,""String_Node_Str""))           exitRadius=Integer.valueOf(script.getTriggerOptionFor(getClass(),player,null,""String_Node_Str""));
        }
 catch (        NumberFormatException nfe) {
          dB.echoDebug(""String_Node_Str"" + exitRadius + ""String_Node_Str"");
        }
        try {
          if (script.hasTriggerOptionFor(getClass(),player,null,""String_Node_Str""))           moveRadius=Integer.valueOf(script.getTriggerOptionFor(getClass(),player,null,""String_Node_Str""));
        }
 catch (        NumberFormatException nfe) {
          dB.echoDebug(""String_Node_Str"" + moveRadius + ""String_Node_Str"");
        }
      }
      Location npcLocation=npc.getLocation();
      boolean playerChangedWorlds=false;
      if (npcLocation.getWorld() != event.getPlayer().getWorld())       playerChangedWorlds=true;
      if (!hasExitedProximityOf(event.getPlayer(),npc) && (playerChangedWorlds || npc.getLocation().distance(toBlockLocation) >= exitRadius)) {
        if (!npc.getTriggerTrait().triggerCooldownOnly(this,event.getPlayer()))         continue;
        exitProximityOf(event.getPlayer(),npc);
        dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + npc.getName()+ ""String_Node_Str"");
        npc.action(""String_Node_Str"",event.getPlayer());
        parse(npc,player,script,""String_Node_Str"");
      }
 else       if (hasExitedProximityOf(event.getPlayer(),npc) && npc.getLocation().distance(toBlockLocation) <= entryRadius) {
        if (!npc.getTriggerTrait().triggerCooldownOnly(this,event.getPlayer()))         continue;
        enterProximityOf(event.getPlayer(),npc);
        npc.action(""String_Node_Str"",event.getPlayer());
        parse(npc,player,script,""String_Node_Str"");
      }
 else       if (!hasExitedProximityOf(event.getPlayer(),npc) && npc.getLocation().distance(toBlockLocation) <= moveRadius) {
        if (!npc.getTriggerTrait().triggerCooldownOnly(this,event.getPlayer()))         continue;
        npc.action(""String_Node_Str"",event.getPlayer());
        parse(npc,player,script,""String_Node_Str"");
      }
    }
  }
}",0.9974869109947644
10444,"@EventHandler public void npcTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  dNPC n=event.getNPC();
  String type=event.getType() != null ? event.getType().toUpperCase() : ""String_Node_Str"";
  String subType=event.getSubType() != null ? event.getSubType().toUpperCase() : ""String_Node_Str"";
  if (type.equals(""String_Node_Str"")) {
    event.setReplaced(n.getName());
    if (subType.equals(""String_Node_Str"")) {
      if (n.getCitizen().hasTrait(NicknameTrait.class))       event.setReplaced(n.getCitizen().getTrait(NicknameTrait.class).getNickname());
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(n.getHealthTrait().getMaxhealth()));
 else     event.setReplaced(String.valueOf(n.getHealthTrait().getHealth()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(n.getEntityType().name().toLowerCase().replace('_',' ')));
 else     event.setReplaced(String.valueOf(n.getEntityType().name()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(n.getId()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(n.getOwner()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    Location loc=n.getLocation();
    event.setReplaced(loc.getBlockX() + ""String_Node_Str"" + loc.getBlockY()+ ""String_Node_Str""+ loc.getBlockZ()+ ""String_Node_Str""+ n.getWorld().getName());
    if (subType.equals(""String_Node_Str""))     event.setReplaced(""String_Node_Str"" + loc.getBlockX() + ""String_Node_Str""+ loc.getBlockY()+ ""String_Node_Str""+ loc.getBlockZ()+ ""String_Node_Str""+ n.getWorld().getName()+ ""String_Node_Str"");
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(n.getLocation().getBlockX()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(n.getLocation().getBlockY()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(n.getLocation().getBlockZ()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(loc.add(0,-1,0).getBlock().getType().name());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(n.getLocation().add(0,-1,0).getBlock().getType().name().toLowerCase().replace('_',' '));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(n.getWorld().getSpawnLocation().getBlockX() + ""String_Node_Str"" + n.getWorld().getSpawnLocation().getBlockY()+ ""String_Node_Str""+ n.getWorld().getSpawnLocation().getBlockZ()+ ""String_Node_Str""+ n.getWorld().getName());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(n.getWorld().getName());
 else     if (subType.equals(""String_Node_Str""))     if (previousLocations.containsKey(n.getId()))     event.setReplaced(previousLocations.get(n.getId()).dScriptArgValue());
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     event.setReplaced(Boolean.toString(n.getNavigator().isNavigating()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(n.getNavigator().getLocalParameters().speedModifier()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(Boolean.toString(n.getNavigator().getLocalParameters().avoidWater()));
 else     if (subType.equals(""String_Node_Str"")) {
      Location loc=new Location(n.getNavigator().getTargetAsLocation());
      if (loc != null)       event.setReplaced(loc.dScriptArgValue());
    }
 else     if (subType.equals(""String_Node_Str"")) {
      event.setReplaced(String.valueOf(event.getNPC().getNavigator().getEntityTarget().isAggressive()));
    }
 else     if (subType.equals(""String_Node_Str"")) {
      event.setReplaced(event.getNPC().getNavigator().getTargetType().toString());
    }
  }
}","@EventHandler public void npcTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  dNPC n=event.getNPC();
  if (n == null)   return;
  String type=event.getType() != null ? event.getType().toUpperCase() : ""String_Node_Str"";
  String subType=event.getSubType() != null ? event.getSubType().toUpperCase() : ""String_Node_Str"";
  if (type.equals(""String_Node_Str"")) {
    event.setReplaced(n.getName());
    if (subType.equals(""String_Node_Str"")) {
      if (n.getCitizen().hasTrait(NicknameTrait.class))       event.setReplaced(n.getCitizen().getTrait(NicknameTrait.class).getNickname());
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(n.getHealthTrait().getMaxhealth()));
 else     event.setReplaced(String.valueOf(n.getHealthTrait().getHealth()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(n.getEntityType().name().toLowerCase().replace('_',' ')));
 else     event.setReplaced(String.valueOf(n.getEntityType().name()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(n.getId()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(n.getOwner()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    Location loc=n.getLocation();
    event.setReplaced(loc.getBlockX() + ""String_Node_Str"" + loc.getBlockY()+ ""String_Node_Str""+ loc.getBlockZ()+ ""String_Node_Str""+ n.getWorld().getName());
    if (subType.equals(""String_Node_Str""))     event.setReplaced(""String_Node_Str"" + loc.getBlockX() + ""String_Node_Str""+ loc.getBlockY()+ ""String_Node_Str""+ loc.getBlockZ()+ ""String_Node_Str""+ n.getWorld().getName()+ ""String_Node_Str"");
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(n.getLocation().getBlockX()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(n.getLocation().getBlockY()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(n.getLocation().getBlockZ()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(loc.add(0,-1,0).getBlock().getType().name());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(n.getLocation().add(0,-1,0).getBlock().getType().name().toLowerCase().replace('_',' '));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(n.getWorld().getSpawnLocation().getBlockX() + ""String_Node_Str"" + n.getWorld().getSpawnLocation().getBlockY()+ ""String_Node_Str""+ n.getWorld().getSpawnLocation().getBlockZ()+ ""String_Node_Str""+ n.getWorld().getName());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(n.getWorld().getName());
 else     if (subType.equals(""String_Node_Str""))     if (previousLocations.containsKey(n.getId()))     event.setReplaced(previousLocations.get(n.getId()).dScriptArgValue());
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     event.setReplaced(Boolean.toString(n.getNavigator().isNavigating()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(n.getNavigator().getLocalParameters().speedModifier()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(Boolean.toString(n.getNavigator().getLocalParameters().avoidWater()));
 else     if (subType.equals(""String_Node_Str"")) {
      Location loc=new Location(n.getNavigator().getTargetAsLocation());
      if (loc != null)       event.setReplaced(loc.dScriptArgValue());
    }
 else     if (subType.equals(""String_Node_Str"")) {
      event.setReplaced(String.valueOf(event.getNPC().getNavigator().getEntityTarget().isAggressive()));
    }
 else     if (subType.equals(""String_Node_Str"")) {
      event.setReplaced(event.getNPC().getNavigator().getTargetType().toString());
    }
  }
}",0.9965775129927747
10445,"public boolean doEvent(String eventName,dNPC npc,Player player,Map<String,String> context){
  boolean cancelled=false;
  for (  WorldScriptContainer script : world_scripts.values()) {
    if (script == null)     continue;
    if (!script.contains(""String_Node_Str"" + eventName.toUpperCase()))     continue;
    dB.report(""String_Node_Str"",aH.debugObj(""String_Node_Str"",""String_Node_Str"" + eventName) + script.getAsScriptArg().debug() + (npc != null ? aH.debugObj(""String_Node_Str"",npc.toString()) : ""String_Node_Str"")+ (player != null ? aH.debugObj(""String_Node_Str"",player.getName()) : ""String_Node_Str"")+ (context != null ? aH.debugObj(""String_Node_Str"",context.toString()) : ""String_Node_Str""));
    List<ScriptEntry> entries=script.getEntries(player,npc,""String_Node_Str"" + eventName);
    if (entries.isEmpty())     continue;
    dB.echoDebug(dB.DebugElement.Header,""String_Node_Str"" + eventName.toUpperCase() + ""String_Node_Str""+ script.getName());
    if (context != null)     for (    Map.Entry<String,String> entry : context.entrySet())     ScriptBuilder.addObjectToEntries(entries,entry.getKey(),entry.getValue());
    long id=DetermineCommand.getNewId();
    ScriptBuilder.addObjectToEntries(entries,""String_Node_Str"",id);
    ScriptQueue._getInstantQueue(ScriptQueue._getNextId()).addEntries(entries).start();
    if (DetermineCommand.outcomes.containsKey(id) && DetermineCommand.outcomes.get(id).equalsIgnoreCase(""String_Node_Str"")) {
      dB.echoDebug(""String_Node_Str"");
      cancelled=true;
    }
  }
  return cancelled;
}","public boolean doEvent(String eventName,dNPC npc,Player player,Map<String,String> context){
  boolean cancelled=false;
  for (  WorldScriptContainer script : world_scripts.values()) {
    if (script == null)     continue;
    if (!script.contains(""String_Node_Str"" + eventName.toUpperCase()))     continue;
    dB.report(""String_Node_Str"",aH.debugObj(""String_Node_Str"",""String_Node_Str"" + eventName) + script.getAsScriptArg().debug() + (npc != null ? aH.debugObj(""String_Node_Str"",npc.toString()) : ""String_Node_Str"")+ (player != null ? aH.debugObj(""String_Node_Str"",player.getName()) : ""String_Node_Str"")+ (context != null ? aH.debugObj(""String_Node_Str"",context.toString()) : ""String_Node_Str""));
    List<ScriptEntry> entries=script.getEntries(player,npc,""String_Node_Str"" + eventName);
    if (entries.isEmpty())     continue;
    dB.echoDebug(dB.DebugElement.Header,""String_Node_Str"" + eventName.toUpperCase() + ""String_Node_Str""+ script.getName());
    if (context != null)     for (    Map.Entry<String,String> entry : context.entrySet())     ScriptBuilder.addObjectToEntries(entries,entry.getKey(),entry.getValue());
    long id=DetermineCommand.getNewId();
    ScriptBuilder.addObjectToEntries(entries,""String_Node_Str"",id);
    ScriptQueue._getInstantQueue(ScriptQueue._getNextId()).addEntries(entries).start();
    if (DetermineCommand.outcomes.containsKey(id) && DetermineCommand.outcomes.get(id).equalsIgnoreCase(""String_Node_Str"")) {
      cancelled=true;
    }
  }
  return cancelled;
}",0.9621834922722788
10446,"@Override public String getAttribute(String attribute){
  if (attribute == null)   return as_dScriptArg();
  attribute=attribute.toLowerCase();
  if (attribute.startsWith(""String_Node_Str"")) {
    return String.valueOf(Double.valueOf(seconds).intValue());
  }
  if (attribute.startsWith(""String_Node_Str"")) {
    return String.valueOf(seconds);
  }
  return as_dScriptArg();
}","@Override public String getAttribute(String attribute){
  if (attribute == null)   return as_dScriptArg();
  attribute=attribute.toLowerCase();
  if (attribute.startsWith(""String_Node_Str""))   return String.valueOf(Double.valueOf(seconds).intValue());
  if (attribute.startsWith(""String_Node_Str""))   return String.valueOf(Double.valueOf(seconds));
  if (attribute.startsWith(""String_Node_Str""))   return String.valueOf(getTicksAsInt());
  if (attribute.startsWith(""String_Node_Str"")) {
    if (seconds % 43200 == 0)     return seconds / 86400 + ""String_Node_Str"";
 else     if (seconds % 1800 == 0)     return seconds / 3600 + ""String_Node_Str"";
 else     if (seconds % 30 == 0)     return seconds / 60 + ""String_Node_Str"";
 else     return seconds + ""String_Node_Str"";
  }
  return null;
}",0.3530419880034275
10447,"@Override public String debug(){
  return null;
}","@Override public String debug(){
  return ""String_Node_Str"" + prefix + ""String_Node_Str""+ id+ ""String_Node_Str"";
}",0.5644171779141104
10448,"@Override public String as_dScriptArg(){
  return null;
}","@Override public String as_dScriptArg(){
  return prefix + ""String_Node_Str"" + id;
}",0.7659574468085106
10449,"@Override public String getAttribute(String attribute){
  return null;
}","@Override public String getAttribute(String attribute){
  if (attribute == null)   return as_dScriptArg();
  attribute=attribute.toLowerCase();
  return null;
}",0.6206896551724138
10450,"@Override public void run(){
  revolve();
}","@Override public void run(){
  while (isStarted)   revolve();
}",0.8113207547169812
10451,"public void start(){
  if (isStarted)   return;
  dB.log(""String_Node_Str"" + id + ""String_Node_Str""+ ticks+ ""String_Node_Str"");
  isStarted=true;
  if (ticks > 0)   taskId=Bukkit.getScheduler().scheduleSyncRepeatingTask(DenizenAPI.getCurrentInstance(),new Runnable(){
    @Override public void run(){
      revolve();
    }
  }
,ticks,ticks);
 else   revolve();
}","public void start(){
  if (isStarted)   return;
  dB.log(""String_Node_Str"" + id + ""String_Node_Str""+ ticks+ ""String_Node_Str"");
  isStarted=true;
  if (ticks > 0)   taskId=Bukkit.getScheduler().scheduleSyncRepeatingTask(DenizenAPI.getCurrentInstance(),new Runnable(){
    @Override public void run(){
      revolve();
    }
  }
,ticks,ticks);
 else {
    if (delay > System.currentTimeMillis()) {
      Bukkit.getScheduler().scheduleSyncDelayedTask(DenizenAPI.getCurrentInstance(),new Runnable(){
        @Override public void run(){
          while (isStarted)           revolve();
        }
      }
,delay);
    }
 else     while (isStarted)     revolve();
  }
}",0.6815968841285297
10452,"private void revolve(){
  if (scriptEntries.isEmpty())   stop();
  if (paused)   return;
  if (delay > System.currentTimeMillis()) {
    if (ticks == 0)     Bukkit.getScheduler().scheduleSyncDelayedTask(DenizenAPI.getCurrentInstance(),new Runnable(){
      @Override public void run(){
        revolve();
      }
    }
,Settings.InteractDelayInTicks());
    return;
  }
  DenizenAPI.getCurrentInstance().getScriptEngine().revolve(this);
}","private void revolve(){
  if (scriptEntries.isEmpty()) {
    stop();
    isStarted=false;
    return;
  }
  if (paused)   return;
  DenizenAPI.getCurrentInstance().getScriptEngine().revolve(this);
}",0.4937106918238994
10453,"public String asDScriptListLevelsOnly(){
  String dScriptList=""String_Node_Str"";
  if (this.isEmpty())   return dScriptList;
  for (  Integer enchantment : this.values())   dScriptList=dScriptList + enchantment + ""String_Node_Str"";
  return dScriptList.substring(1,dScriptList.length() - 1);
}","public String asDScriptListLevelsOnly(){
  String dScriptList=""String_Node_Str"";
  if (this.isEmpty())   return dScriptList;
  for (  Integer enchantment : this.values())   dScriptList=dScriptList + enchantment + ""String_Node_Str"";
  return dScriptList.substring(0,dScriptList.length() - 1);
}",0.9146757679180888
10454,"public String asDScriptList(){
  String dScriptList=""String_Node_Str"";
  if (this.isEmpty())   return dScriptList;
  for (  Enchantment enchantment : this.keySet())   dScriptList=dScriptList + enchantment.getName() + ""String_Node_Str"";
  return dScriptList.substring(1,dScriptList.length() - 1);
}","public String asDScriptList(){
  String dScriptList=""String_Node_Str"";
  if (this.isEmpty())   return dScriptList;
  for (  Enchantment enchantment : this.keySet())   dScriptList=dScriptList + enchantment.getName() + ""String_Node_Str"";
  return dScriptList.substring(0,dScriptList.length() - 1);
}",0.915824915824916
10455,"public String asDScriptListWithLevels(){
  String dScriptList=""String_Node_Str"";
  if (this.isEmpty())   return dScriptList;
  for (  Entry<Enchantment,Integer> enchantment : this.entrySet())   dScriptList=dScriptList + enchantment.getKey().getName() + ""String_Node_Str""+ enchantment.getValue()+ ""String_Node_Str"";
  return dScriptList.substring(1,dScriptList.length() - 1);
}","public String asDScriptListWithLevels(){
  String dScriptList=""String_Node_Str"";
  if (this.isEmpty())   return dScriptList;
  for (  Entry<Enchantment,Integer> enchantment : this.entrySet())   dScriptList=dScriptList + enchantment.getKey().getName() + ""String_Node_Str""+ enchantment.getValue()+ ""String_Node_Str"";
  return dScriptList.substring(0,dScriptList.length() - 1);
}",0.9335106382978724
10456,"@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  boolean outcome=false;
  boolean exact=false;
  int quantity=1;
  ItemStack itemToCheck=null;
  for (  String thisArg : args) {
    if (aH.matchesQuantity(thisArg)) {
      quantity=aH.getIntegerFrom(thisArg);
      dB.echoDebug(""String_Node_Str"" + quantity);
    }
 else     if (aH.matchesArg(""String_Node_Str"",thisArg)) {
      exact=true;
      dB.echoDebug(""String_Node_Str"");
    }
 else {
      itemToCheck=aH.getItemFrom(thisArg);
      dB.echoDebug(""String_Node_Str"" + itemToCheck);
    }
  }
  if (itemToCheck != null && quantity > 1) {
    itemToCheck.setAmount(quantity);
  }
  if (exact)   outcome=context.getPlayer().getItemInHand().equals(itemToCheck);
 else   outcome=context.getPlayer().getItemInHand().isSimilar(itemToCheck);
  if (outcome)   dB.echoDebug(""String_Node_Str"");
  return outcome;
}","@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  boolean outcome=false;
  boolean exact=false;
  int quantity=1;
  ItemStack itemToCheck=null;
  for (  String thisArg : args) {
    if (aH.matchesQuantity(thisArg)) {
      quantity=aH.getIntegerFrom(thisArg);
      dB.echoDebug(""String_Node_Str"" + quantity);
    }
 else     if (aH.matchesArg(""String_Node_Str"",thisArg)) {
      exact=true;
      dB.echoDebug(""String_Node_Str"");
    }
 else {
      itemToCheck=new ItemStack(aH.getItemFrom(thisArg));
      dB.echoDebug(""String_Node_Str"" + itemToCheck);
    }
  }
  if (itemToCheck != null) {
    itemToCheck.setAmount(quantity);
  }
  if (exact)   outcome=context.getPlayer().getItemInHand().equals(itemToCheck);
 else   outcome=context.getPlayer().getItemInHand().isSimilar(itemToCheck);
  if (outcome)   dB.echoDebug(""String_Node_Str"");
  return outcome;
}",0.9832703723691312
10457,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  Script script=scriptEntry.getScript();
  String step=null;
  Duration duration=new Duration(-1d);
  for (  String arg : scriptEntry.getArguments()) {
    if (aH.matchesScript(arg)) {
      script=aH.getScriptFrom(arg);
    }
 else     if (aH.matchesDuration(arg)) {
      duration=aH.getDurationFrom(arg);
    }
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,aH.ArgumentType.String) || aH.matchesInteger(arg)) {
      step=aH.getStringFrom(arg);
      dB.echoDebug(Messages.DEBUG_SET_STEP,step);
    }
 else     throw new InvalidArgumentsException(Messages.ERROR_UNKNOWN_ARGUMENT,arg);
  }
  scriptEntry.addObject(""String_Node_Str"",script);
  scriptEntry.addObject(""String_Node_Str"",step);
  scriptEntry.addObject(""String_Node_Str"",duration);
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  Script script=scriptEntry.getScript();
  String step=null;
  Duration duration=new Duration(-1d);
  for (  String arg : scriptEntry.getArguments()) {
    if (aH.matchesScript(arg)) {
      script=aH.getScriptFrom(arg);
    }
 else     if (aH.matchesDuration(arg)) {
      duration=aH.getDurationFrom(arg);
    }
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,aH.ArgumentType.String) || aH.matchesInteger(arg)) {
      step=aH.getStringFrom(arg);
      dB.echoDebug(Messages.DEBUG_SET_STEP,step);
    }
 else     throw new InvalidArgumentsException(Messages.ERROR_UNKNOWN_ARGUMENT,arg);
  }
  scriptEntry.addObject(""String_Node_Str"",script).addObject(""String_Node_Str"",step).addObject(""String_Node_Str"",duration);
}",0.9819494584837544
10458,"@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Script script=(Script)scriptEntry.getObject(""String_Node_Str"");
  String step=(String)scriptEntry.getObject(""String_Node_Str"");
  Duration duration=(Duration)scriptEntry.getObject(""String_Node_Str"");
  String currentStep=InteractScriptHelper.getCurrentStep(scriptEntry.getPlayer(),script.getName());
  if (step == null) {
    if (aH.matchesInteger(currentStep)) {
      step=String.valueOf(aH.getIntegerFrom(currentStep) + 1);
    }
 else     step=""String_Node_Str"";
  }
  if (durations.containsKey(scriptEntry.getPlayer().getName() + ""String_Node_Str"" + script.getName()))   try {
    denizen.getServer().getScheduler().cancelTask(durations.get(scriptEntry.getPlayer().getName() + ""String_Node_Str"" + script.getName()));
  }
 catch (  Exception e) {
  }
  if (duration.getSeconds() > 0) {
    scriptEntry.addObject(""String_Node_Str"",currentStep);
    scriptEntry.addObject(""String_Node_Str"",-1d);
    long delay=(long)(duration.getSeconds() * 20);
    dB.echoDebug(Messages.DEBUG_SETTING_DELAYED_TASK,""String_Node_Str"" + script + ""String_Node_Str"");
    durations.put(scriptEntry.getPlayer().getName() + ""String_Node_Str"" + script.getName(),denizen.getServer().getScheduler().scheduleSyncDelayedTask(denizen,new Runnable2<String,ScriptEntry>(script.getName(),scriptEntry){
      @Override public void run(      String script,      ScriptEntry scriptEntry){
        dB.log(Messages.DEBUG_RUNNING_DELAYED_TASK,""String_Node_Str"" + script + ""String_Node_Str"");
        try {
          durations.remove(scriptEntry.getPlayer().getName() + ""String_Node_Str"" + script.toUpperCase());
          execute(scriptEntry);
        }
 catch (        CommandExecutionException e) {
          dB.echoError(""String_Node_Str"");
          if (dB.showStackTraces)           e.printStackTrace();
        }
      }
    }
,delay));
  }
  denizen.getSaves().set(""String_Node_Str"" + scriptEntry.getPlayer().getName() + ""String_Node_Str""+ script.getName().toUpperCase()+ ""String_Node_Str""+ ""String_Node_Str"",step);
}","@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Script script=(Script)scriptEntry.getObject(""String_Node_Str"");
  String step=(String)scriptEntry.getObject(""String_Node_Str"");
  Duration duration=(Duration)scriptEntry.getObject(""String_Node_Str"");
  String currentStep=InteractScriptHelper.getCurrentStep(scriptEntry.getPlayer(),script.getName());
  if (step == null) {
    if (aH.matchesInteger(currentStep)) {
      step=String.valueOf(aH.getIntegerFrom(currentStep) + 1);
    }
 else     step=""String_Node_Str"";
  }
  if (durations.containsKey(scriptEntry.getPlayer().getName() + ""String_Node_Str"" + script.getName()))   try {
    denizen.getServer().getScheduler().cancelTask(durations.get(scriptEntry.getPlayer().getName() + ""String_Node_Str"" + script.getName()));
  }
 catch (  Exception e) {
  }
  if (duration.getSeconds() > 0) {
    scriptEntry.addObject(""String_Node_Str"",currentStep);
    scriptEntry.addObject(""String_Node_Str"",new Duration(-1d));
    long delay=(long)(duration.getSeconds() * 20);
    dB.echoDebug(Messages.DEBUG_SETTING_DELAYED_TASK,""String_Node_Str"" + script + ""String_Node_Str"");
    durations.put(scriptEntry.getPlayer().getName() + ""String_Node_Str"" + script.getName(),denizen.getServer().getScheduler().scheduleSyncDelayedTask(denizen,new Runnable2<String,ScriptEntry>(script.getName(),scriptEntry){
      @Override public void run(      String script,      ScriptEntry scriptEntry){
        dB.log(Messages.DEBUG_RUNNING_DELAYED_TASK,""String_Node_Str"" + script + ""String_Node_Str"");
        try {
          durations.remove(scriptEntry.getPlayer().getName() + ""String_Node_Str"" + script.toUpperCase());
          execute(scriptEntry);
        }
 catch (        CommandExecutionException e) {
          dB.echoError(""String_Node_Str"");
          if (dB.showStackTraces)           e.printStackTrace();
        }
      }
    }
,delay));
  }
  denizen.getSaves().set(""String_Node_Str"" + scriptEntry.getPlayer().getName() + ""String_Node_Str""+ script.getName().toUpperCase()+ ""String_Node_Str""+ ""String_Node_Str"",step);
}",0.996649114408808
10459,"public void action(String actionName,Player player){
  if (getCitizen().hasTrait(AssignmentTrait.class))   DenizenAPI.getCurrentInstance().getNPCRegistry().getActionHandler().doAction(actionName,this,player,getAssignmentTrait().getAssignment());
}","public void action(String actionName,Player player){
  if (getCitizen() != null) {
    if (getCitizen().hasTrait(AssignmentTrait.class))     DenizenAPI.getCurrentInstance().getNPCRegistry().getActionHandler().doAction(actionName,this,player,getAssignmentTrait().getAssignment());
  }
}",0.9285714285714286
10460,"/** 
 * This method will parse the arguments needed to execute the Teleport command from the given script entry.  It verifies that the format of the command is accurate.  If not, it will throw an InvalidArgumentException with the error message.
 * @param scriptEntry	The script entry processing this command.
 * @throws InvalidArgumentsException
 */
@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  List<LivingEntity> teleportEntities=new ArrayList<LivingEntity>();
  List<NPC> teleportNPCs=new ArrayList<NPC>();
  Location teleportLocation=null;
  Boolean teleportPlayer=true;
  for (  String arg : scriptEntry.getArguments()) {
    if (arg.equalsIgnoreCase(TeleportCommand.NPC_ARG)) {
      teleportNPCs.add(scriptEntry.getNPC().getCitizen());
      teleportPlayer=false;
    }
 else     if (aH.matchesLocation(arg))     teleportLocation=aH.getLocationFrom(arg);
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,ArgumentType.Custom)) {
      teleportPlayer=false;
      for (      String target : aH.getListFrom(arg)) {
        if (CitizensAPI.getNPCRegistry().getNPC(aH.getLivingEntityFrom(target)) != null) {
          teleportNPCs.add(CitizensAPI.getNPCRegistry().getNPC(aH.getLivingEntityFrom(target)));
          continue;
        }
 else         if (aH.getLivingEntityFrom(target) != null && aH.getLivingEntityFrom(target) instanceof Player) {
          teleportEntities.add(aH.getPlayerFrom(target));
          continue;
        }
        dB.echoError(""String_Node_Str"",target);
      }
    }
 else     throw new InvalidArgumentsException(dB.Messages.ERROR_UNKNOWN_ARGUMENT,arg);
  }
  if (teleportPlayer == true) {
    teleportEntities.add(scriptEntry.getPlayer());
  }
  if (teleportLocation == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  if (teleportEntities.isEmpty() && teleportNPCs.isEmpty())   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.addObject(""String_Node_Str"",teleportLocation);
  scriptEntry.addObject(""String_Node_Str"",teleportEntities);
  scriptEntry.addObject(""String_Node_Str"",teleportNPCs);
}","/** 
 * This method will parse the arguments needed to execute the Teleport command from the given script entry.  It verifies that the format of the command is accurate.  If not, it will throw an InvalidArgumentException with the error message.
 * @param scriptEntry	The script entry processing this command.
 * @throws InvalidArgumentsException
 */
@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  List<LivingEntity> teleportEntities=new ArrayList<LivingEntity>();
  List<NPC> teleportNPCs=new ArrayList<NPC>();
  Location teleportLocation=null;
  Boolean teleportPlayer=true;
  for (  String arg : scriptEntry.getArguments()) {
    if (arg.equalsIgnoreCase(TeleportCommand.NPC_ARG)) {
      teleportNPCs.add(scriptEntry.getNPC().getCitizen());
      teleportPlayer=false;
    }
 else     if (aH.matchesLocation(arg))     teleportLocation=aH.getLocationFrom(arg);
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,ArgumentType.Custom)) {
      teleportPlayer=false;
      for (      String target : aH.getListFrom(arg)) {
        if (CitizensAPI.getNPCRegistry().getNPC(aH.getLivingEntityFrom(target)) != null) {
          teleportNPCs.add(CitizensAPI.getNPCRegistry().getNPC(aH.getLivingEntityFrom(target)));
          continue;
        }
 else         if (aH.getLivingEntityFrom(target) != null && aH.getLivingEntityFrom(target) instanceof Player) {
          teleportEntities.add(aH.getPlayerFrom(target));
          continue;
        }
        dB.echoError(""String_Node_Str"",target);
      }
    }
 else     throw new InvalidArgumentsException(dB.Messages.ERROR_UNKNOWN_ARGUMENT,arg);
  }
  if (teleportPlayer == true) {
    teleportEntities.add(scriptEntry.getPlayer());
  }
  if (teleportLocation == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  if (teleportEntities.isEmpty() && teleportNPCs.isEmpty())   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.addObject(""String_Node_Str"",teleportLocation).addObject(""String_Node_Str"",teleportEntities).addObject(""String_Node_Str"",teleportNPCs);
}",0.99287072243346
10461,"/** 
 * Executes the Teleport command.
 * @param scriptEntry the ScriptEntry
 */
@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Location teleportLocation=(Location)scriptEntry.getObject(""String_Node_Str"");
  List<LivingEntity> teleportEntities=(List<LivingEntity>)scriptEntry.getObject(""String_Node_Str"");
  List<NPC> teleportNPCs=(List<NPC>)scriptEntry.getObject(""String_Node_Str"");
  dB.echoApproval(""String_Node_Str"" + getName() + ""String_Node_Str""+ teleportLocation+ ""String_Node_Str""+ ""String_Node_Str""+ teleportEntities.toString()+ ""String_Node_Str""+ teleportNPCs.toString()+ ""String_Node_Str"");
  for (  LivingEntity entity : teleportEntities) {
    entity.teleport(teleportLocation);
  }
  for (  NPC npc : teleportNPCs) {
    npc.spawn(teleportLocation);
    npc.getBukkitEntity().teleport(teleportLocation,PlayerTeleportEvent.TeleportCause.COMMAND);
  }
}","/** 
 * Executes the Teleport command.
 * @param scriptEntry the ScriptEntry
 */
@Override public void execute(ScriptEntry scriptEntry) throws CommandExecutionException {
  Location teleportLocation=(Location)scriptEntry.getObject(""String_Node_Str"");
  List<LivingEntity> teleportEntities=(List<LivingEntity>)scriptEntry.getObject(""String_Node_Str"");
  List<NPC> teleportNPCs=(List<NPC>)scriptEntry.getObject(""String_Node_Str"");
  dB.echoApproval(""String_Node_Str"" + getName() + ""String_Node_Str""+ teleportLocation.debug()+ ""String_Node_Str""+ ""String_Node_Str""+ teleportEntities.toString()+ ""String_Node_Str""+ teleportNPCs.toString()+ ""String_Node_Str"");
  for (  LivingEntity entity : teleportEntities) {
    entity.teleport(teleportLocation);
  }
  for (  NPC npc : teleportNPCs) {
    npc.spawn(teleportLocation);
    npc.getBukkitEntity().teleport(teleportLocation,PlayerTeleportEvent.TeleportCause.COMMAND);
  }
}",0.9956236323851204
10462,"public void start(){
  dB.log(""String_Node_Str"" + id + ""String_Node_Str"");
  if (ticks > 0)   taskId=Bukkit.getScheduler().scheduleSyncRepeatingTask(DenizenAPI.getCurrentInstance(),new Runnable(){
    @Override public void run(){
      revolve();
    }
  }
,ticks,ticks);
 else   revolve();
}","public void start(){
  dB.log(""String_Node_Str"" + id + ""String_Node_Str""+ ticks+ ""String_Node_Str"");
  if (ticks > 0)   taskId=Bukkit.getScheduler().scheduleSyncRepeatingTask(DenizenAPI.getCurrentInstance(),new Runnable(){
    @Override public void run(){
      revolve();
    }
  }
,ticks,ticks);
 else   revolve();
}",0.9573770491803278
10463,"public Duration getSpeed(){
  Duration speed=Duration.valueOf(getString(""String_Node_Str"",null));
  if (speed == null)   speed=new Duration(Double.valueOf(Settings.InteractDelayInTicks() / 20));
  return speed;
}","public Duration getSpeed(){
  Duration speed=Duration.valueOf(getString(""String_Node_Str"",null));
  if (speed == null)   speed=new Duration(((double)Settings.InteractDelayInTicks() / 20));
  return speed;
}",0.9665071770334928
10464,"/** 
 * Send packets for all currently sitting NPCs to all new players who join.
 */
@EventHandler public void onPlayerLoginEvent(PlayerJoinEvent event){
  for (  dNPC npc : DenizenAPI.getSpawnedNPCs())   makeSitSpecificPlayer(npc,event.getPlayer());
}","/** 
 * Send packets for all currently sitting NPCs to all new players who join.
 */
@EventHandler public void onPlayerLoginEvent(PlayerJoinEvent event){
  Set<dNPC> npcs=new HashSet<dNPC>();
  for (  Integer intgr : chairRegistry.keySet()) {
    npcs.add(DenizenAPI.getDenizenNPC(CitizensAPI.getNPCRegistry().getById(intgr)));
  }
  for (  dNPC npc : npcs)   makeSitSpecificPlayer(npc,event.getPlayer());
}",0.701062215477997
10465,"public void makeSitSpecificPlayer(dNPC npc,Player player){
  try {
    PacketContainer packet=ProtocolLibrary.getProtocolManager().createPacket(40);
    packet.getSpecificModifier(int.class).write(0,npc.getEntity().getEntityId());
    WrappedDataWatcher watcher=new WrappedDataWatcher();
    watcher.setObject(0,(byte)4);
    packet.getWatchableCollectionModifier().write(0,watcher.getWatchableObjects());
    if (npc.getEntity().getWorld().equals(player.getWorld())) {
      try {
        ProtocolLibrary.getProtocolManager().sendServerPacket(player,packet);
      }
 catch (      InvocationTargetException e) {
        dB.echoError(""String_Node_Str"" + player.getName());
      }
    }
  }
 catch (  Error e) {
    dB.echoError(""String_Node_Str"");
  }
}","public void makeSitSpecificPlayer(dNPC npc,Player player){
  try {
    PacketContainer packet=ProtocolLibrary.getProtocolManager().createPacket(40);
    packet.getSpecificModifier(int.class).write(0,npc.getEntity().getEntityId());
    WrappedDataWatcher watcher=new WrappedDataWatcher();
    watcher.setObject(0,(byte)4);
    packet.getWatchableCollectionModifier().write(0,watcher.getWatchableObjects());
    if (npc.getEntity().getWorld().equals(player.getWorld())) {
      try {
        ProtocolLibrary.getProtocolManager().sendServerPacket(player,packet);
      }
 catch (      Exception e) {
        dB.echoError(""String_Node_Str"" + player.getName());
      }
    }
  }
 catch (  Error e) {
    dB.echoError(""String_Node_Str"");
  }
}",0.9892761394101875
10466,"/** 
 * Called by the CommandExecuter before the execute() method is called. Arguments should be iterated through and checked before continuing to execute(). Note that PLAYER:player_name and NPCID:# arguments are parsed automatically by the Executer and should not be handled by this Command otherwise. Their output is stored in the attached   {@link ScriptEntry} and can be retrieved with scriptEntry.getPlayer(), scriptEntry.getOfflinePlayer() (if the player specified is not online), and scriptEntry.getNPC(). Remember that any of these have a possibility of being null and should be handled accordingly if required by this Command.
 * @param scriptEntry The  {@link ScriptEntry} which contains run-time information which maybe utilized by this Command.
 * @throws InvalidArgumentsException Will halt execution of this Command and hint usage to the console to avoid unwanted behavior due to missing information.
 */
public abstract void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException ;","/** 
 * Called by the CommandExecuter before the execute() method is called. Arguments should be iterated through and checked before continuing to execute(). Note that PLAYER:player_name and NPCID:# arguments are parsed automatically by the Executer and should not be handled by this Command otherwise. Their output is stored in the attached   {@link ScriptEntry} and can be retrieved with scriptEntry.getPlayer(), scriptEntry.getOfflinePlayer() (if the player specified is not online), and scriptEntry.getNPC(). Remember that any of these have a possibility of being null and should be handled accordingly if required by this Command.
 * @param scriptEntry The  {@link ScriptEntry}, which contains run-time context that may be utilized by this Command.
 * @throws InvalidArgumentsException Will halt execution of this Command and hint usage to the console to avoid unwanted behavior due to missing information.
 */
public abstract void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException ;",0.9806451612903224
10467,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  Script script=null;
  Map<String,String> context=null;
  Duration delay=new Duration(0);
  Duration speed=new Duration((long)Settings.InteractDelayInTicks());
  ScriptQueue queue=ScriptQueue._getQueue(scriptEntry.getResidingQueue());
  for (  String arg : scriptEntry.getArguments()) {
    if (aH.matchesScript(arg)) {
      script=aH.getScriptFrom(arg);
    }
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,aH.ArgumentType.Duration)) {
      delay=aH.getDurationFrom(arg);
      delay.setPrefix(""String_Node_Str"");
    }
 else     if (aH.matchesQueue(arg)) {
      queue=aH.getQueueFrom(arg);
    }
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,aH.ArgumentType.Duration)) {
      speed=aH.getDurationFrom(arg);
    }
 else     if (aH.matchesArg(""String_Node_Str"",arg)) {
    }
 else     if (aH.matchesArg(""String_Node_Str"",arg)) {
      speed=new Duration(0);
    }
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,aH.ArgumentType.Custom)) {
      context=new HashMap<String,String>();
      List<String> contexts=aH.getListFrom(arg);
      for (      String ctxt : contexts) {
        String[] sctxt=ctxt.split(""String_Node_Str"",2);
        if (sctxt.length > 1)         context.put(sctxt[0].trim().toUpperCase(),sctxt[1].trim());
 else         context.put(sctxt[0].trim().toUpperCase(),""String_Node_Str"");
      }
    }
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,aH.ArgumentType.Word)) {
    }
 else     if (ScriptRegistry.containsScript(aH.getStringFrom(arg))) {
      script=aH.getScriptFrom(arg);
      if (!script.getType().equalsIgnoreCase(""String_Node_Str""))       script=null;
    }
 else     throw new InvalidArgumentsException(Messages.ERROR_UNKNOWN_ARGUMENT,arg);
  }
  if (script == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.addObject(""String_Node_Str"",speed.setPrefix(""String_Node_Str"")).addObject(""String_Node_Str"",queue).addObject(""String_Node_Str"",delay.setPrefix(""String_Node_Str"")).addObject(""String_Node_Str"",script).addObject(""String_Node_Str"",context);
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  Script script=null;
  Map<String,String> context=null;
  Duration delay=new Duration(0);
  Duration speed=new Duration(Settings.InteractDelayInTicks() / 20);
  ScriptQueue queue=ScriptQueue._getQueue(scriptEntry.getResidingQueue());
  for (  String arg : scriptEntry.getArguments()) {
    if (aH.matchesScript(arg)) {
      script=aH.getScriptFrom(arg);
    }
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,aH.ArgumentType.Duration)) {
      delay=aH.getDurationFrom(arg);
      delay.setPrefix(""String_Node_Str"");
    }
 else     if (aH.matchesQueue(arg)) {
      queue=aH.getQueueFrom(arg);
    }
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,aH.ArgumentType.Duration)) {
      speed=aH.getDurationFrom(arg);
    }
 else     if (aH.matchesArg(""String_Node_Str"",arg)) {
    }
 else     if (aH.matchesArg(""String_Node_Str"",arg)) {
      speed=new Duration(0);
    }
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,aH.ArgumentType.Custom)) {
      context=new HashMap<String,String>();
      List<String> contexts=aH.getListFrom(arg);
      for (      String ctxt : contexts) {
        String[] sctxt=ctxt.split(""String_Node_Str"",2);
        if (sctxt.length > 1)         context.put(sctxt[0].trim().toUpperCase(),sctxt[1].trim());
 else         context.put(sctxt[0].trim().toUpperCase(),""String_Node_Str"");
      }
    }
 else     if (aH.matchesValueArg(""String_Node_Str"",arg,aH.ArgumentType.Word)) {
    }
 else     if (ScriptRegistry.containsScript(aH.getStringFrom(arg))) {
      script=aH.getScriptFrom(arg);
      if (!script.getType().equalsIgnoreCase(""String_Node_Str""))       script=null;
    }
 else     throw new InvalidArgumentsException(Messages.ERROR_UNKNOWN_ARGUMENT,arg);
  }
  if (script == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.addObject(""String_Node_Str"",speed.setPrefix(""String_Node_Str"")).addObject(""String_Node_Str"",queue).addObject(""String_Node_Str"",delay.setPrefix(""String_Node_Str"")).addObject(""String_Node_Str"",script).addObject(""String_Node_Str"",context);
}",0.9974317067476068
10468,"public TaskScriptContainer setSpeed(Duration speed){
  set(""String_Node_Str"",speed.dScriptArgValue());
  return this;
}","public TaskScriptContainer setSpeed(Duration speed){
  set(""String_Node_Str"",speed.getSeconds());
  return this;
}",0.9012875536480688
10469,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  String name=null;
  String value=null;
  Duration duration=new Duration(-1d);
  Action action=Action.SET_VALUE;
  Type type=Type.PLAYER;
  for (  String arg : scriptEntry.getArguments()) {
    if (aH.matchesDuration(arg))     duration=aH.getDurationFrom(arg);
 else     if (aH.matchesArg(""String_Node_Str"",arg))     type=Type.valueOf(arg.toUpperCase().replace(""String_Node_Str"",""String_Node_Str""));
 else     if (arg.split(""String_Node_Str"",3).length > 1) {
      String[] flagArgs=arg.split(""String_Node_Str"");
      name=flagArgs[0].toUpperCase();
      if (flagArgs.length == 2) {
        if (flagArgs[1].contains(""String_Node_Str"")) {
          action=Action.INCREASE;
          value=""String_Node_Str"";
        }
 else         if (flagArgs[1].contains(""String_Node_Str"")) {
          action=Action.DECREASE;
          value=""String_Node_Str"";
        }
 else         if (flagArgs[1].contains(""String_Node_Str"")) {
          action=Action.DELETE;
        }
 else         if (flagArgs[1].contains(""String_Node_Str"")) {
          action=Action.REMOVE;
        }
 else {
          action=Action.SET_VALUE;
          value=arg.split(""String_Node_Str"")[1];
        }
      }
 else       if (flagArgs.length == 3) {
        if (flagArgs[1].contains(""String_Node_Str""))         action=Action.INSERT;
 else         if (flagArgs[1].contains(""String_Node_Str""))         action=Action.REMOVE;
 else         if (flagArgs[1].contains(""String_Node_Str""))         action=Action.INCREASE;
 else         if (flagArgs[1].contains(""String_Node_Str""))         action=Action.DECREASE;
 else         if (flagArgs[1].contains(""String_Node_Str""))         action=Action.MULTIPLY;
 else         if (flagArgs[1].contains(""String_Node_Str""))         action=Action.DIVIDE;
        value=flagArgs[2];
      }
    }
 else {
      name=arg.toUpperCase();
      action=Action.SET_BOOLEAN;
    }
  }
  String player=null;
  if (type == Type.PLAYER) {
    if (scriptEntry.getOfflinePlayer() != null)     player=scriptEntry.getOfflinePlayer().getName();
    if (player == null && scriptEntry.getPlayer() != null)     player=scriptEntry.getPlayer().getName();
  }
  if (name == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  if (type == Type.NPC && scriptEntry.getNPC() == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  if (type == Type.PLAYER && player == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.addObject(""String_Node_Str"",name);
  scriptEntry.addObject(""String_Node_Str"",value);
  scriptEntry.addObject(""String_Node_Str"",duration);
  scriptEntry.addObject(""String_Node_Str"",action);
  scriptEntry.addObject(""String_Node_Str"",type);
  scriptEntry.addObject(""String_Node_Str"",player);
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  String name=null;
  String value=null;
  Duration duration=new Duration(-1d);
  Action action=Action.SET_VALUE;
  Type type=Type.PLAYER;
  for (  String arg : scriptEntry.getArguments()) {
    if (aH.matchesDuration(arg))     duration=aH.getDurationFrom(arg);
 else     if (aH.matchesArg(""String_Node_Str"",arg))     type=Type.valueOf(arg.toUpperCase().replace(""String_Node_Str"",""String_Node_Str""));
 else     if (arg.split(""String_Node_Str"",3).length > 1) {
      String[] flagArgs=arg.split(""String_Node_Str"");
      name=flagArgs[0].toUpperCase();
      if (flagArgs.length == 2) {
        if (flagArgs[1].startsWith(""String_Node_Str"")) {
          action=Action.INCREASE;
          value=""String_Node_Str"";
        }
 else         if (flagArgs[1].startsWith(""String_Node_Str"")) {
          action=Action.DECREASE;
          value=""String_Node_Str"";
        }
 else         if (flagArgs[1].startsWith(""String_Node_Str"")) {
          action=Action.DELETE;
        }
 else         if (flagArgs[1].startsWith(""String_Node_Str"")) {
          action=Action.REMOVE;
        }
 else {
          action=Action.SET_VALUE;
          value=arg.split(""String_Node_Str"")[1];
        }
      }
 else       if (flagArgs.length == 3) {
        if (flagArgs[1].startsWith(""String_Node_Str""))         action=Action.INSERT;
 else         if (flagArgs[1].startsWith(""String_Node_Str""))         action=Action.REMOVE;
 else         if (flagArgs[1].startsWith(""String_Node_Str""))         action=Action.INCREASE;
 else         if (flagArgs[1].startsWith(""String_Node_Str""))         action=Action.DECREASE;
 else         if (flagArgs[1].startsWith(""String_Node_Str""))         action=Action.MULTIPLY;
 else         if (flagArgs[1].startsWith(""String_Node_Str""))         action=Action.DIVIDE;
        value=flagArgs[2];
      }
    }
 else {
      name=arg.toUpperCase();
      action=Action.SET_BOOLEAN;
    }
  }
  String player=null;
  if (type == Type.PLAYER) {
    if (scriptEntry.getOfflinePlayer() != null)     player=scriptEntry.getOfflinePlayer().getName();
    if (player == null && scriptEntry.getPlayer() != null)     player=scriptEntry.getPlayer().getName();
  }
  if (name == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  if (type == Type.NPC && scriptEntry.getNPC() == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  if (type == Type.PLAYER && player == null)   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.addObject(""String_Node_Str"",name);
  scriptEntry.addObject(""String_Node_Str"",value);
  scriptEntry.addObject(""String_Node_Str"",duration);
  scriptEntry.addObject(""String_Node_Str"",action);
  scriptEntry.addObject(""String_Node_Str"",type);
  scriptEntry.addObject(""String_Node_Str"",player);
}",0.968242766407904
10470,"@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
  List<ScriptQueue> queues=new ArrayList<ScriptQueue>();
  queues.add(ScriptQueue._getQueue(scriptEntry.getResidingQueue()));
  for (  String arg : scriptEntry.getArguments()) {
    if (aH.matchesQueue(arg))     for (    String queueName : aH.getListFrom(arg)) {
      queues.clear();
      try {
        queues.add(aH.getQueueFrom(queueName));
      }
 catch (      Exception e) {
      }
    }
 else     throw new InvalidArgumentsException(dB.Messages.ERROR_UNKNOWN_ARGUMENT,arg);
  }
  if (queues.isEmpty())   throw new InvalidArgumentsException(""String_Node_Str"");
  scriptEntry.addObject(""String_Node_Str"",queues);
}","@Override public void parseArgs(ScriptEntry scriptEntry) throws InvalidArgumentsException {
}",0.2307692307692307
10471,"@EventHandler public void playerTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str"") || event.getPlayer() == null)   return;
  Player p=event.getPlayer();
  String type=event.getType() != null ? event.getType().toUpperCase() : ""String_Node_Str"";
  String subType=event.getSubType() != null ? event.getSubType().toUpperCase() : ""String_Node_Str"";
  String specifier=event.getSpecifier() != null ? event.getSpecifier().toUpperCase() : ""String_Node_Str"";
  if (type.equals(""String_Node_Str"")) {
    if (event.hasTypeContext()) {
      if (aH.matchesInteger(event.getTypeContext())) {
        if (playerChatHistory.containsKey(event.getPlayer().getName())) {
          List<String> history=playerChatHistory.get(event.getPlayer().getName());
          if (history.size() < aH.getIntegerFrom(event.getTypeContext()))           event.setReplaced(history.get(history.size() - 1));
 else           event.setReplaced(history.get(aH.getIntegerFrom(event.getTypeContext()) - 1));
        }
      }
    }
 else {
      if (playerChatHistory.containsKey(event.getPlayer().getName())) {
        event.setReplaced(playerChatHistory.get(event.getPlayer().getName()).get(0));
      }
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getAmount()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getTypeId()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getDurability()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getData()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getMaxStackSize()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(NBTItem.getEnchantments(p.getItemInHand()).asDScriptList());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(NBTItem.getEnchantments(p.getItemInHand()).asDScriptListWithLevels());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(NBTItem.getEnchantments(p.getItemInHand()).asDScriptListLevelsOnly());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(NBTItem.getLore(p.getItemInHand()).asDScriptList());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getItemInHand().getItemMeta().getDisplayName());
 else     if (subType.equals(""String_Node_Str""))     if (specifier.equals(""String_Node_Str"")) {
      String itemName=p.getItemInHand().getType().name().toLowerCase().replace('_',' ');
      int itemQty=p.getItemInHand().getAmount();
      if (itemName == ""String_Node_Str"")       event.setReplaced(""String_Node_Str"");
 else       if (itemName == ""String_Node_Str"" || itemName == ""String_Node_Str"")       event.setReplaced(itemName);
 else       if (itemQty > 1) {
        if (itemName == ""String_Node_Str"")         event.setReplaced(""String_Node_Str"");
 else         if (itemName.endsWith(""String_Node_Str""))         event.setReplaced(itemName.substring(0,itemName.length() - 1) + ""String_Node_Str"");
 else         if (itemName.endsWith(""String_Node_Str""))         event.setReplaced(itemName);
 else         event.setReplaced(itemName + ""String_Node_Str"");
      }
 else {
        if (itemName == ""String_Node_Str"")         event.setReplaced(""String_Node_Str"");
 else         if (itemName.endsWith(""String_Node_Str""))         event.setReplaced(itemName);
 else         if (itemName.startsWith(""String_Node_Str"") || itemName.startsWith(""String_Node_Str"") || itemName.startsWith(""String_Node_Str"")|| itemName.startsWith(""String_Node_Str"")|| itemName.startsWith(""String_Node_Str""))         event.setReplaced(""String_Node_Str"" + itemName);
 else         event.setReplaced(""String_Node_Str"" + itemName);
      }
    }
 else     event.setReplaced(p.getItemInHand().getType().name());
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(p.getName());
    if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getDisplayName());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getPlayerListName());
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(p.getLocation().getBlockX() + ""String_Node_Str"" + p.getLocation().getBlockY()+ ""String_Node_Str""+ p.getLocation().getBlockZ()+ ""String_Node_Str""+ p.getWorld().getName());
    if (subType.equals(""String_Node_Str""))     event.setReplaced(""String_Node_Str"" + p.getLocation().getBlockX() + ""String_Node_Str""+ p.getLocation().getBlockY()+ ""String_Node_Str""+ p.getLocation().getBlockZ()+ ""String_Node_Str""+ p.getWorld().getName()+ ""String_Node_Str"");
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLocation().getBlockX()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLocation().getBlockY()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLocation().getBlockZ()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getWorld().getName());
 else     if (subType.equals(""String_Node_Str""))     if (specifier.equals(""String_Node_Str""))     event.setReplaced(p.getLocation().add(0,-1,0).getBlock().getType().name().toLowerCase().replace('_',' '));
 else     event.setReplaced(p.getLocation().add(0,-1,0).getBlock().getType().name());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getWorld().getSpawnLocation().getBlockX() + ""String_Node_Str"" + p.getWorld().getSpawnLocation().getBlockY()+ ""String_Node_Str""+ p.getWorld().getSpawnLocation().getBlockZ()+ ""String_Node_Str""+ p.getWorld().getName());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getBedSpawnLocation().getBlockX() + ""String_Node_Str"" + p.getBedSpawnLocation().getBlockY()+ ""String_Node_Str""+ p.getBedSpawnLocation().getBlockZ()+ ""String_Node_Str""+ p.getWorld().getName());
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.getHealth()));
    if (subType.equals(""String_Node_Str"")) {
      int maxHealth=p.getMaxHealth();
      if (event.getType().split(""String_Node_Str"").length > 2)       maxHealth=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      if ((float)p.getHealth() / maxHealth < .10)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getHealth() / maxHealth < .40)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getHealth() / maxHealth < .75)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getHealth() / maxHealth < 1)       event.setReplaced(""String_Node_Str"");
 else       event.setReplaced(""String_Node_Str"");
    }
 else     if (subType.equals(""String_Node_Str"")) {
      int maxHealth=p.getMaxHealth();
      if (event.getType().split(""String_Node_Str"").length > 2)       maxHealth=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      event.setReplaced(String.valueOf(((float)p.getHealth() / maxHealth) * 100));
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.getFoodLevel()));
    if (subType.equals(""String_Node_Str"")) {
      int maxFood=20;
      if (event.getType().split(""String_Node_Str"").length > 2)       maxFood=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      if ((float)p.getHealth() / maxFood < .10)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getFoodLevel() / maxFood < .40)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getFoodLevel() / maxFood < .75)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getFoodLevel() / maxFood < 1)       event.setReplaced(""String_Node_Str"");
 else       event.setReplaced(""String_Node_Str"");
    }
 else     if (subType.equals(""String_Node_Str"")) {
      int maxFood=20;
      if (event.getType().split(""String_Node_Str"").length > 2)       maxFood=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      event.setReplaced(String.valueOf(((float)p.getFoodLevel() / maxFood) * 100));
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (Depends.economy != null) {
      event.setReplaced(String.valueOf(Depends.economy.getBalance(p.getName())));
      if (subType.equals(""String_Node_Str""))       event.setReplaced(String.valueOf((int)Depends.economy.getBalance(p.getName())));
 else       if (subType.equals(""String_Node_Str""))       if (specifier.equals(""String_Node_Str""))       event.setReplaced(Depends.economy.currencyNameSingular());
 else       if (specifier.equals(""String_Node_Str""))       event.setReplaced(Depends.economy.currencyNamePlural());
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isOp()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isBanned()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isOnline()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.getPlayerTime()));
    if (subType.equals(""String_Node_Str""))     if (p.getPlayerTime() < 13500 || p.getPlayerTime() > 23000)     event.setReplaced(""String_Node_Str"");
 else     if (p.getPlayerTime() > 13500)     event.setReplaced(""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (p.getWorld().hasStorm())     event.setReplaced(""String_Node_Str"");
 else     if (p.getPlayerTime() > 13500)     event.setReplaced(""String_Node_Str"");
 else     event.setReplaced(""String_Node_Str"");
  }
 else   if (event.getType().startsWith(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(event.getNPC().getEntity().getHealth()));
  }
 else   if (event.getType().startsWith(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(event.getNPC().getEntity().getHealth()));
  }
 else   if (event.getType().startsWith(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(event.getPlayer().getExp() * 100));
    if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getExpToLevel()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getTotalExperience()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLevel()));
  }
}","@EventHandler public void playerTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str"") || event.getPlayer() == null)   return;
  Player p=event.getPlayer();
  String type=event.getType() != null ? event.getType().toUpperCase() : ""String_Node_Str"";
  String subType=event.getSubType() != null ? event.getSubType().toUpperCase() : ""String_Node_Str"";
  String specifier=event.getSpecifier() != null ? event.getSpecifier().toUpperCase() : ""String_Node_Str"";
  if (type.equals(""String_Node_Str"")) {
    if (event.hasTypeContext()) {
      if (aH.matchesInteger(event.getTypeContext())) {
        if (playerChatHistory.containsKey(event.getPlayer().getName())) {
          List<String> history=playerChatHistory.get(event.getPlayer().getName());
          if (history.size() < aH.getIntegerFrom(event.getTypeContext()))           event.setReplaced(history.get(history.size() - 1));
 else           event.setReplaced(history.get(aH.getIntegerFrom(event.getTypeContext()) - 1));
        }
      }
    }
 else {
      if (playerChatHistory.containsKey(event.getPlayer().getName())) {
        event.setReplaced(playerChatHistory.get(event.getPlayer().getName()).get(0));
      }
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getAmount()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getTypeId()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getDurability()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getData()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getMaxStackSize()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(NBTItem.getEnchantments(p.getItemInHand()).asDScriptList());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(NBTItem.getEnchantments(p.getItemInHand()).asDScriptListWithLevels());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(NBTItem.getEnchantments(p.getItemInHand()).asDScriptListLevelsOnly());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(NBTItem.getLore(p.getItemInHand()).asDScriptList());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getItemInHand().getItemMeta().getDisplayName());
 else     if (subType.equals(""String_Node_Str""))     if (specifier.equals(""String_Node_Str"")) {
      String itemName=p.getItemInHand().getType().name().toLowerCase().replace('_',' ');
      int itemQty=p.getItemInHand().getAmount();
      if (itemName.equals(""String_Node_Str"")) {
        event.setReplaced(""String_Node_Str"");
      }
 else       if (itemName.equals(""String_Node_Str"") || itemName.equals(""String_Node_Str"")) {
        event.setReplaced(itemName);
      }
 else       if (itemQty > 1) {
        if (itemName.equals(""String_Node_Str""))         event.setReplaced(""String_Node_Str"");
 else         if (itemName.endsWith(""String_Node_Str""))         event.setReplaced(itemName.substring(0,itemName.length() - 1) + ""String_Node_Str"");
 else         if (itemName.endsWith(""String_Node_Str""))         event.setReplaced(itemName);
 else         event.setReplaced(itemName + ""String_Node_Str"");
      }
 else {
        if (itemName.equals(""String_Node_Str""))         event.setReplaced(""String_Node_Str"");
 else         if (itemName.endsWith(""String_Node_Str""))         event.setReplaced(itemName);
 else         if (itemName.startsWith(""String_Node_Str"") || itemName.startsWith(""String_Node_Str"") || itemName.startsWith(""String_Node_Str"")|| itemName.startsWith(""String_Node_Str"")|| itemName.startsWith(""String_Node_Str""))         event.setReplaced(""String_Node_Str"" + itemName);
 else         event.setReplaced(""String_Node_Str"" + itemName);
      }
    }
 else     event.setReplaced(p.getItemInHand().getType().name());
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(p.getName());
    if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getDisplayName());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getPlayerListName());
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(p.getLocation().getBlockX() + ""String_Node_Str"" + p.getLocation().getBlockY()+ ""String_Node_Str""+ p.getLocation().getBlockZ()+ ""String_Node_Str""+ p.getWorld().getName());
    if (subType.equals(""String_Node_Str""))     event.setReplaced(""String_Node_Str"" + p.getLocation().getBlockX() + ""String_Node_Str""+ p.getLocation().getBlockY()+ ""String_Node_Str""+ p.getLocation().getBlockZ()+ ""String_Node_Str""+ p.getWorld().getName()+ ""String_Node_Str"");
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLocation().getBlockX()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLocation().getBlockY()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLocation().getBlockZ()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getWorld().getName());
 else     if (subType.equals(""String_Node_Str""))     if (specifier.equals(""String_Node_Str""))     event.setReplaced(p.getLocation().add(0,-1,0).getBlock().getType().name().toLowerCase().replace('_',' '));
 else     event.setReplaced(p.getLocation().add(0,-1,0).getBlock().getType().name());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getWorld().getSpawnLocation().getBlockX() + ""String_Node_Str"" + p.getWorld().getSpawnLocation().getBlockY()+ ""String_Node_Str""+ p.getWorld().getSpawnLocation().getBlockZ()+ ""String_Node_Str""+ p.getWorld().getName());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getBedSpawnLocation().getBlockX() + ""String_Node_Str"" + p.getBedSpawnLocation().getBlockY()+ ""String_Node_Str""+ p.getBedSpawnLocation().getBlockZ()+ ""String_Node_Str""+ p.getWorld().getName());
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.getHealth()));
    if (subType.equals(""String_Node_Str"")) {
      int maxHealth=p.getMaxHealth();
      if (event.getType().split(""String_Node_Str"").length > 2)       maxHealth=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      if ((float)p.getHealth() / maxHealth < .10)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getHealth() / maxHealth < .40)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getHealth() / maxHealth < .75)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getHealth() / maxHealth < 1)       event.setReplaced(""String_Node_Str"");
 else       event.setReplaced(""String_Node_Str"");
    }
 else     if (subType.equals(""String_Node_Str"")) {
      int maxHealth=p.getMaxHealth();
      if (event.getType().split(""String_Node_Str"").length > 2)       maxHealth=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      event.setReplaced(String.valueOf(((float)p.getHealth() / maxHealth) * 100));
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.getFoodLevel()));
    if (subType.equals(""String_Node_Str"")) {
      int maxFood=20;
      if (event.getType().split(""String_Node_Str"").length > 2)       maxFood=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      if ((float)p.getHealth() / maxFood < .10)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getFoodLevel() / maxFood < .40)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getFoodLevel() / maxFood < .75)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getFoodLevel() / maxFood < 1)       event.setReplaced(""String_Node_Str"");
 else       event.setReplaced(""String_Node_Str"");
    }
 else     if (subType.equals(""String_Node_Str"")) {
      int maxFood=20;
      if (event.getType().split(""String_Node_Str"").length > 2)       maxFood=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      event.setReplaced(String.valueOf(((float)p.getFoodLevel() / maxFood) * 100));
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (Depends.economy != null) {
      event.setReplaced(String.valueOf(Depends.economy.getBalance(p.getName())));
      if (subType.equals(""String_Node_Str""))       event.setReplaced(String.valueOf((int)Depends.economy.getBalance(p.getName())));
 else       if (subType.equals(""String_Node_Str""))       if (specifier.equals(""String_Node_Str""))       event.setReplaced(Depends.economy.currencyNameSingular());
 else       if (specifier.equals(""String_Node_Str""))       event.setReplaced(Depends.economy.currencyNamePlural());
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isOp()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isBanned()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isOnline()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.getPlayerTime()));
    if (subType.equals(""String_Node_Str""))     if (p.getPlayerTime() < 13500 || p.getPlayerTime() > 23000)     event.setReplaced(""String_Node_Str"");
 else     if (p.getPlayerTime() > 13500)     event.setReplaced(""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (p.getWorld().hasStorm())     event.setReplaced(""String_Node_Str"");
 else     if (p.getPlayerTime() > 13500)     event.setReplaced(""String_Node_Str"");
 else     event.setReplaced(""String_Node_Str"");
  }
 else   if (event.getType().startsWith(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(event.getNPC().getEntity().getHealth()));
  }
 else   if (event.getType().startsWith(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(event.getNPC().getEntity().getHealth()));
  }
 else   if (event.getType().startsWith(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(event.getPlayer().getExp() * 100));
    if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getExpToLevel()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getTotalExperience()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLevel()));
  }
}",0.9853227568517552
10472,"@EventHandler public void chatTrigger(AsyncPlayerChatEvent event){
  dNPC npc=Utilities.getClosestNPC(event.getPlayer().getLocation(),2);
  if (npc == null)   return;
  if (!npc.getCitizen().hasTrait(TriggerTrait.class))   return;
  if (!npc.getCitizen().getTrait(TriggerTrait.class).isEnabled(name))   return;
  if (Settings.CheckLineOfSightWhenChatting())   if (!npc.getEntity().hasLineOfSight(event.getPlayer()))   return;
  if (Settings.ChatOnlyWhenLookingAtNPC())   if (!Utilities.isFacingEntity(event.getPlayer(),npc.getEntity(),45))   return;
  if (!npc.getTriggerTrait().trigger(this,event.getPlayer())) {
    if (Settings.ChatGloballyIfNotInteractable()) {
      dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      return;
    }
 else {
      event.setCancelled(true);
      Utilities.talkToNPC(event.getMessage(),event.getPlayer(),npc,Settings.PlayerChatToNpcBystandersRange());
    }
  }
  InteractScriptContainer script=npc.getInteractScript(event.getPlayer(),this.getClass());
  String id=null;
  boolean matched=false;
  String replacementText=null;
  String regexId=null;
  String regexMessage=null;
  Map<String,String> idMap=script.getIdMapFor(this.getClass(),event.getPlayer());
  if (!idMap.isEmpty())   for (  Map.Entry<String,String> entry : idMap.entrySet()) {
    Matcher matcher=triggerPattern.matcher(entry.getValue());
    while (matcher.find()) {
      if (!script.checkSpecificTriggerScriptRequirementsFor(this.getClass(),event.getPlayer(),npc,entry.getKey()))       continue;
      String keyword=matcher.group().replace(""String_Node_Str"",""String_Node_Str"");
      if (isKeywordRegex(keyword)) {
        Pattern pattern=Pattern.compile(keyword.substring(6));
        Matcher m=pattern.matcher(event.getMessage());
        if (m.find()) {
          regexId=entry.getKey();
          regexMessage=entry.getValue().replace(""String_Node_Str"" + keyword + ""String_Node_Str"",m.group());
        }
      }
 else       if (event.getMessage().toUpperCase().contains(keyword.toUpperCase())) {
        id=entry.getKey();
        replacementText=keyword;
        matched=true;
      }
    }
    if (matched)     break;
  }
  if (matched == false && regexId != null) {
    id=regexId;
    replacementText=regexMessage;
  }
  if (id != null) {
    event.setCancelled(true);
    Utilities.talkToNPC(replacementText,event.getPlayer(),npc,Settings.PlayerChatToNpcBystandersRange());
    parse(npc,event.getPlayer(),script,id);
  }
 else {
    if (!Settings.ChatGloballyIfFailedChatTriggers()) {
      event.setCancelled(true);
      dB.echoDebug(event.getPlayer().getName() + ""String_Node_Str"" + npc.getNicknameTrait().getNickname()+ ""String_Node_Str""+ replacementText);
      return;
    }
  }
}","@EventHandler public void chatTrigger(AsyncPlayerChatEvent event){
  dNPC npc=Utilities.getClosestNPC(event.getPlayer().getLocation(),2);
  if (npc == null)   return;
  if (!npc.getCitizen().hasTrait(TriggerTrait.class))   return;
  if (!npc.getCitizen().getTrait(TriggerTrait.class).isEnabled(name))   return;
  if (Settings.CheckLineOfSightWhenChatting())   if (!npc.getEntity().hasLineOfSight(event.getPlayer()))   return;
  if (Settings.ChatOnlyWhenLookingAtNPC())   if (!Utilities.isFacingEntity(event.getPlayer(),npc.getEntity(),45))   return;
  if (!npc.getTriggerTrait().trigger(this,event.getPlayer())) {
    if (Settings.ChatGloballyIfNotInteractable()) {
      dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      return;
    }
 else {
      event.setCancelled(true);
    }
  }
  InteractScriptContainer script=npc.getInteractScript(event.getPlayer(),this.getClass());
  String id=null;
  boolean matched=false;
  String replacementText=null;
  String regexId=null;
  String regexMessage=null;
  Map<String,String> idMap=script.getIdMapFor(this.getClass(),event.getPlayer());
  if (!idMap.isEmpty())   for (  Map.Entry<String,String> entry : idMap.entrySet()) {
    Matcher matcher=triggerPattern.matcher(entry.getValue());
    while (matcher.find()) {
      if (!script.checkSpecificTriggerScriptRequirementsFor(this.getClass(),event.getPlayer(),npc,entry.getKey()))       continue;
      String keyword=matcher.group().replace(""String_Node_Str"",""String_Node_Str"");
      if (isKeywordRegex(keyword)) {
        Pattern pattern=Pattern.compile(keyword.substring(6));
        Matcher m=pattern.matcher(event.getMessage());
        if (m.find()) {
          regexId=entry.getKey();
          regexMessage=entry.getValue().replace(""String_Node_Str"" + keyword + ""String_Node_Str"",m.group());
        }
      }
 else       if (event.getMessage().toUpperCase().contains(keyword.toUpperCase())) {
        id=entry.getKey();
        replacementText=entry.getValue().replace(""String_Node_Str"",""String_Node_Str"");
        matched=true;
      }
    }
    if (matched)     break;
  }
  if (matched == false && regexId != null) {
    id=regexId;
    replacementText=regexMessage;
  }
  if (id != null) {
    event.setCancelled(true);
    Utilities.talkToNPC(replacementText,event.getPlayer(),npc,Settings.PlayerChatToNpcBystandersRange());
    parse(npc,event.getPlayer(),script,id);
  }
 else {
    if (!Settings.ChatGloballyIfFailedChatTriggers()) {
      event.setCancelled(true);
      dB.echoDebug(event.getPlayer().getName() + ""String_Node_Str"" + npc.getNicknameTrait().getNickname()+ ""String_Node_Str""+ replacementText);
      return;
    }
  }
}",0.9671137240492376
10473,"@EventHandler public void locationTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  String nameContext=event.getNameContext() != null ? event.getNameContext().toUpperCase() : ""String_Node_Str"";
  String type=event.getType() != null ? event.getType().toUpperCase() : ""String_Node_Str"";
  String subType=event.getSubType() != null ? event.getSubType().toUpperCase() : ""String_Node_Str"";
  String specifier=event.getSpecifier() != null ? event.getSpecifier().toUpperCase() : ""String_Node_Str"";
  String typeContext=event.getTypeContext() != null ? event.getTypeContext().toUpperCase() : ""String_Node_Str"";
  Location fromLocation=null;
  Location toLocation=null;
  if (aH.matchesLocation(""String_Node_Str"" + nameContext))   fromLocation=aH.getLocationFrom(""String_Node_Str"" + nameContext);
 else   if (event.getPlayer() != null)   fromLocation=new Location(event.getPlayer().getLocation());
 else   fromLocation=new Location(event.getNPC().getLocation());
  if (aH.matchesLocation(""String_Node_Str"" + typeContext))   toLocation=aH.getLocationFrom(""String_Node_Str"" + typeContext);
  if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     event.setReplaced(fromLocation.getBlock().getBiome().name().toLowerCase().replace('_',' '));
 else     event.setReplaced(fromLocation.getBlock().getBiome().name());
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (fromLocation != null && toLocation != null) {
      event.setReplaced(Utilities.getCardinal(Utilities.getYaw(toLocation.toVector().subtract(fromLocation.toVector()).normalize())));
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (fromLocation != null && toLocation != null) {
      if (subType.equals(""String_Node_Str""))       if (fromLocation.getWorld().getName() == toLocation.getWorld().getName() || specifier.equals(""String_Node_Str""))       event.setReplaced(String.valueOf(Math.abs(fromLocation.getY() - toLocation.getY())));
 else       if (subType.equals(""String_Node_Str""))       if (fromLocation.getWorld().getName() == toLocation.getWorld().getName() || specifier.equals(""String_Node_Str""))       event.setReplaced(String.valueOf(Math.sqrt(Math.pow(fromLocation.getX() - toLocation.getX(),2) + Math.pow(fromLocation.getZ() - toLocation.getZ(),2))));
 else       event.setReplaced(String.valueOf(fromLocation.distance(toLocation)));
    }
  }
 else   if (type.equals(""String_Node_Str""))   event.setReplaced(""String_Node_Str"" + fromLocation.getBlockX() + ""String_Node_Str""+ fromLocation.getBlockY()+ ""String_Node_Str""+ fromLocation.getBlockZ()+ ""String_Node_Str""+ fromLocation.getWorld().getName()+ ""String_Node_Str"");
 else   if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf((int)fromLocation.getBlock().getLightFromBlocks()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf((int)fromLocation.getBlock().getLightFromSky()));
 else     event.setReplaced(String.valueOf((int)fromLocation.getBlock().getLightLevel()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     if (fromLocation.getWorld().getTime() < 13500 || fromLocation.getWorld().getTime() > 23000)     event.setReplaced(""String_Node_Str"");
 else     if (fromLocation.getWorld().getTime() > 13500)     event.setReplaced(""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str""))   event.setReplaced(fromLocation.getWorld().getName());
 else   if (type.equals(""String_Node_Str""))   event.setReplaced(String.valueOf(fromLocation.getBlockX()));
 else   if (type.equals(""String_Node_Str""))   event.setReplaced(String.valueOf(fromLocation.getBlockY()));
 else   if (type.equals(""String_Node_Str""))   event.setReplaced(String.valueOf(fromLocation.getBlockZ()));
}","@EventHandler public void locationTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  String nameContext=event.getNameContext() != null ? event.getNameContext().toUpperCase() : ""String_Node_Str"";
  String type=event.getType() != null ? event.getType().toUpperCase() : ""String_Node_Str"";
  String typeContext=event.getTypeContext() != null ? event.getTypeContext().toUpperCase() : ""String_Node_Str"";
  String subType=event.getSubType() != null ? event.getSubType().toUpperCase() : ""String_Node_Str"";
  String specifier=event.getSpecifier() != null ? event.getSpecifier().toUpperCase() : ""String_Node_Str"";
  Location fromLocation=null;
  Location toLocation=null;
  if (aH.matchesLocation(""String_Node_Str"" + nameContext))   fromLocation=aH.getLocationFrom(""String_Node_Str"" + nameContext);
 else   if (event.getPlayer() != null)   fromLocation=new Location(event.getPlayer().getLocation());
 else   fromLocation=new Location(event.getNPC().getLocation());
  if (aH.matchesLocation(""String_Node_Str"" + typeContext))   toLocation=aH.getLocationFrom(""String_Node_Str"" + typeContext);
  if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     event.setReplaced(fromLocation.getBlock().getBiome().name().toLowerCase().replace('_',' '));
 else     event.setReplaced(fromLocation.getBlock().getBiome().name());
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (fromLocation != null && toLocation != null) {
      event.setReplaced(Utilities.getCardinal(Utilities.getYaw(toLocation.toVector().subtract(fromLocation.toVector()).normalize())));
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (fromLocation != null && toLocation != null) {
      if (subType.equals(""String_Node_Str"")) {
        if (fromLocation.getWorld().getName() == toLocation.getWorld().getName() || specifier.equals(""String_Node_Str"")) {
          event.setReplaced(String.valueOf(Math.abs(fromLocation.getY() - toLocation.getY())));
        }
      }
 else       if (subType.equals(""String_Node_Str"")) {
        if (fromLocation.getWorld().getName() == toLocation.getWorld().getName() || specifier.equals(""String_Node_Str"")) {
          event.setReplaced(String.valueOf(Math.sqrt(Math.pow(fromLocation.getX() - toLocation.getX(),2) + Math.pow(fromLocation.getZ() - toLocation.getZ(),2))));
        }
      }
 else       event.setReplaced(String.valueOf(fromLocation.distance(toLocation)));
    }
  }
 else   if (type.equals(""String_Node_Str""))   event.setReplaced(""String_Node_Str"" + fromLocation.getBlockX() + ""String_Node_Str""+ fromLocation.getBlockY()+ ""String_Node_Str""+ fromLocation.getBlockZ()+ ""String_Node_Str""+ fromLocation.getWorld().getName()+ ""String_Node_Str"");
 else   if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf((int)fromLocation.getBlock().getLightFromBlocks()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf((int)fromLocation.getBlock().getLightFromSky()));
 else     event.setReplaced(String.valueOf((int)fromLocation.getBlock().getLightLevel()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     if (fromLocation.getWorld().getTime() < 13500 || fromLocation.getWorld().getTime() > 23000)     event.setReplaced(""String_Node_Str"");
 else     if (fromLocation.getWorld().getTime() > 13500)     event.setReplaced(""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str""))   event.setReplaced(fromLocation.getWorld().getName());
 else   if (type.equals(""String_Node_Str""))   event.setReplaced(String.valueOf(fromLocation.getBlockX()));
 else   if (type.equals(""String_Node_Str""))   event.setReplaced(String.valueOf(fromLocation.getBlockY()));
 else   if (type.equals(""String_Node_Str""))   event.setReplaced(String.valueOf(fromLocation.getBlockZ()));
}",0.9637117677553136
10474,"@EventHandler public void playerTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str"") || event.getPlayer() == null)   return;
  Player p=event.getPlayer();
  String type=event.getType() != null ? event.getType().toUpperCase() : ""String_Node_Str"";
  String subType=event.getSubType() != null ? event.getSubType().toUpperCase() : ""String_Node_Str"";
  String specifier=event.getSpecifier() != null ? event.getSpecifier().toUpperCase() : ""String_Node_Str"";
  if (type.equals(""String_Node_Str"")) {
    if (event.hasTypeContext()) {
      if (aH.matchesInteger(event.getTypeContext())) {
        if (playerChatHistory.containsKey(event.getPlayer().getName())) {
          List<String> history=playerChatHistory.get(event.getPlayer().getName());
          if (history.size() < aH.getIntegerFrom(event.getTypeContext()))           event.setReplaced(history.get(history.size() - 1));
 else           event.setReplaced(history.get(aH.getIntegerFrom(event.getTypeContext()) - 1));
        }
      }
    }
 else {
      if (playerChatHistory.containsKey(event.getPlayer().getName())) {
        event.setReplaced(playerChatHistory.get(event.getPlayer().getName()).get(0));
      }
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getAmount()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getTypeId()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getDurability()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getData()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getMaxStackSize()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(NBTItem.getEnchantments(p.getItemInHand()).asDScriptList());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(NBTItem.getEnchantments(p.getItemInHand()).asDScriptListWithLevels());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(NBTItem.getEnchantments(p.getItemInHand()).asDScriptListLevelsOnly());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(NBTItem.getLore(p.getItemInHand()).asDScriptList());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getItemInHand().getItemMeta().getDisplayName());
 else     if (subType.equals(""String_Node_Str""))     if (specifier.equals(""String_Node_Str"")) {
      String itemName=p.getItemInHand().getType().name().toLowerCase().replace('_',' ');
      int itemQty=p.getItemInHand().getAmount();
      if (itemName == ""String_Node_Str"" || itemName == ""String_Node_Str"" || itemName == ""String_Node_Str"")       event.setReplaced(itemName);
 else       if (itemQty > 1) {
        if (itemName == ""String_Node_Str"")         event.setReplaced(""String_Node_Str"");
 else         if (itemName.endsWith(""String_Node_Str""))         event.setReplaced(itemName.substring(0,itemName.length() - 1) + ""String_Node_Str"");
 else         if (itemName.endsWith(""String_Node_Str""))         event.setReplaced(itemName);
 else         event.setReplaced(itemName + ""String_Node_Str"");
      }
 else {
        if (itemName == ""String_Node_Str"")         event.setReplaced(""String_Node_Str"");
 else         if (itemName.endsWith(""String_Node_Str""))         event.setReplaced(itemName);
 else         if (itemName.startsWith(""String_Node_Str"") || itemName.startsWith(""String_Node_Str"") || itemName.startsWith(""String_Node_Str"")|| itemName.startsWith(""String_Node_Str"")|| itemName.startsWith(""String_Node_Str""))         event.setReplaced(""String_Node_Str"" + itemName);
 else         event.setReplaced(""String_Node_Str"" + itemName);
      }
    }
 else     event.setReplaced(p.getItemInHand().getType().name());
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(p.getName());
    if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getDisplayName());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getPlayerListName());
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(p.getLocation().getBlockX() + ""String_Node_Str"" + p.getLocation().getBlockY()+ ""String_Node_Str""+ p.getLocation().getBlockZ()+ ""String_Node_Str""+ p.getWorld().getName());
    if (subType.equals(""String_Node_Str""))     event.setReplaced(""String_Node_Str"" + p.getLocation().getBlockX() + ""String_Node_Str""+ p.getLocation().getBlockY()+ ""String_Node_Str""+ p.getLocation().getBlockZ()+ ""String_Node_Str""+ p.getWorld().getName()+ ""String_Node_Str"");
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLocation().getBlockX()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLocation().getBlockY()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLocation().getBlockZ()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getWorld().getName());
 else     if (subType.equals(""String_Node_Str""))     if (specifier.equals(""String_Node_Str""))     event.setReplaced(p.getLocation().add(0,-1,0).getBlock().getType().name().toLowerCase().replace('_',' '));
 else     event.setReplaced(p.getLocation().add(0,-1,0).getBlock().getType().name());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getWorld().getSpawnLocation().getBlockX() + ""String_Node_Str"" + p.getWorld().getSpawnLocation().getBlockY()+ ""String_Node_Str""+ p.getWorld().getSpawnLocation().getBlockZ()+ ""String_Node_Str""+ p.getWorld().getName());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getBedSpawnLocation().getBlockX() + ""String_Node_Str"" + p.getBedSpawnLocation().getBlockY()+ ""String_Node_Str""+ p.getBedSpawnLocation().getBlockZ()+ ""String_Node_Str""+ p.getWorld().getName());
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.getHealth()));
    if (subType.equals(""String_Node_Str"")) {
      int maxHealth=p.getMaxHealth();
      if (event.getType().split(""String_Node_Str"").length > 2)       maxHealth=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      if ((float)p.getHealth() / maxHealth < .10)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getHealth() / maxHealth < .40)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getHealth() / maxHealth < .75)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getHealth() / maxHealth < 1)       event.setReplaced(""String_Node_Str"");
 else       event.setReplaced(""String_Node_Str"");
    }
 else     if (subType.equals(""String_Node_Str"")) {
      int maxHealth=p.getMaxHealth();
      if (event.getType().split(""String_Node_Str"").length > 2)       maxHealth=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      event.setReplaced(String.valueOf(((float)p.getHealth() / maxHealth) * 100));
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.getFoodLevel()));
    if (subType.equals(""String_Node_Str"")) {
      int maxFood=20;
      if (event.getType().split(""String_Node_Str"").length > 2)       maxFood=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      if ((float)p.getHealth() / maxFood < .10)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getFoodLevel() / maxFood < .40)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getFoodLevel() / maxFood < .75)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getFoodLevel() / maxFood < 1)       event.setReplaced(""String_Node_Str"");
 else       event.setReplaced(""String_Node_Str"");
    }
 else     if (subType.equals(""String_Node_Str"")) {
      int maxFood=20;
      if (event.getType().split(""String_Node_Str"").length > 2)       maxFood=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      event.setReplaced(String.valueOf(((float)p.getFoodLevel() / maxFood) * 100));
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (Depends.economy != null) {
      event.setReplaced(String.valueOf(Depends.economy.getBalance(p.getName())));
      if (subType.equals(""String_Node_Str""))       event.setReplaced(String.valueOf((int)Depends.economy.getBalance(p.getName())));
 else       if (subType.equals(""String_Node_Str""))       if (specifier.equals(""String_Node_Str""))       event.setReplaced(Depends.economy.currencyNameSingular());
 else       if (specifier.equals(""String_Node_Str""))       event.setReplaced(Depends.economy.currencyNamePlural());
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isOp()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isBanned()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isOnline()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.getPlayerTime()));
    if (subType.equals(""String_Node_Str""))     if (p.getPlayerTime() < 13500 || p.getPlayerTime() > 23000)     event.setReplaced(""String_Node_Str"");
 else     if (p.getPlayerTime() > 13500)     event.setReplaced(""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (p.getWorld().hasStorm())     event.setReplaced(""String_Node_Str"");
 else     if (p.getPlayerTime() > 13500)     event.setReplaced(""String_Node_Str"");
 else     event.setReplaced(""String_Node_Str"");
  }
 else   if (event.getType().startsWith(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(event.getNPC().getEntity().getHealth()));
  }
 else   if (event.getType().startsWith(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(event.getNPC().getEntity().getHealth()));
  }
 else   if (event.getType().startsWith(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(event.getPlayer().getExp() * 100));
    if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getExpToLevel()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getTotalExperience()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLevel()));
  }
}","@EventHandler public void playerTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str"") || event.getPlayer() == null)   return;
  Player p=event.getPlayer();
  String type=event.getType() != null ? event.getType().toUpperCase() : ""String_Node_Str"";
  String subType=event.getSubType() != null ? event.getSubType().toUpperCase() : ""String_Node_Str"";
  String specifier=event.getSpecifier() != null ? event.getSpecifier().toUpperCase() : ""String_Node_Str"";
  if (type.equals(""String_Node_Str"")) {
    if (event.hasTypeContext()) {
      if (aH.matchesInteger(event.getTypeContext())) {
        if (playerChatHistory.containsKey(event.getPlayer().getName())) {
          List<String> history=playerChatHistory.get(event.getPlayer().getName());
          if (history.size() < aH.getIntegerFrom(event.getTypeContext()))           event.setReplaced(history.get(history.size() - 1));
 else           event.setReplaced(history.get(aH.getIntegerFrom(event.getTypeContext()) - 1));
        }
      }
    }
 else {
      if (playerChatHistory.containsKey(event.getPlayer().getName())) {
        event.setReplaced(playerChatHistory.get(event.getPlayer().getName()).get(0));
      }
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getAmount()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getTypeId()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getDurability()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getData()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getItemInHand().getMaxStackSize()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(NBTItem.getEnchantments(p.getItemInHand()).asDScriptList());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(NBTItem.getEnchantments(p.getItemInHand()).asDScriptListWithLevels());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(NBTItem.getEnchantments(p.getItemInHand()).asDScriptListLevelsOnly());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(NBTItem.getLore(p.getItemInHand()).asDScriptList());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getItemInHand().getItemMeta().getDisplayName());
 else     if (subType.equals(""String_Node_Str""))     if (specifier.equals(""String_Node_Str"")) {
      String itemName=p.getItemInHand().getType().name().toLowerCase().replace('_',' ');
      int itemQty=p.getItemInHand().getAmount();
      if (itemName == ""String_Node_Str"")       event.setReplaced(""String_Node_Str"");
 else       if (itemName == ""String_Node_Str"" || itemName == ""String_Node_Str"")       event.setReplaced(itemName);
 else       if (itemQty > 1) {
        if (itemName == ""String_Node_Str"")         event.setReplaced(""String_Node_Str"");
 else         if (itemName.endsWith(""String_Node_Str""))         event.setReplaced(itemName.substring(0,itemName.length() - 1) + ""String_Node_Str"");
 else         if (itemName.endsWith(""String_Node_Str""))         event.setReplaced(itemName);
 else         event.setReplaced(itemName + ""String_Node_Str"");
      }
 else {
        if (itemName == ""String_Node_Str"")         event.setReplaced(""String_Node_Str"");
 else         if (itemName.endsWith(""String_Node_Str""))         event.setReplaced(itemName);
 else         if (itemName.startsWith(""String_Node_Str"") || itemName.startsWith(""String_Node_Str"") || itemName.startsWith(""String_Node_Str"")|| itemName.startsWith(""String_Node_Str"")|| itemName.startsWith(""String_Node_Str""))         event.setReplaced(""String_Node_Str"" + itemName);
 else         event.setReplaced(""String_Node_Str"" + itemName);
      }
    }
 else     event.setReplaced(p.getItemInHand().getType().name());
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(p.getName());
    if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getDisplayName());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getPlayerListName());
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(p.getLocation().getBlockX() + ""String_Node_Str"" + p.getLocation().getBlockY()+ ""String_Node_Str""+ p.getLocation().getBlockZ()+ ""String_Node_Str""+ p.getWorld().getName());
    if (subType.equals(""String_Node_Str""))     event.setReplaced(""String_Node_Str"" + p.getLocation().getBlockX() + ""String_Node_Str""+ p.getLocation().getBlockY()+ ""String_Node_Str""+ p.getLocation().getBlockZ()+ ""String_Node_Str""+ p.getWorld().getName()+ ""String_Node_Str"");
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLocation().getBlockX()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLocation().getBlockY()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLocation().getBlockZ()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getWorld().getName());
 else     if (subType.equals(""String_Node_Str""))     if (specifier.equals(""String_Node_Str""))     event.setReplaced(p.getLocation().add(0,-1,0).getBlock().getType().name().toLowerCase().replace('_',' '));
 else     event.setReplaced(p.getLocation().add(0,-1,0).getBlock().getType().name());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getWorld().getSpawnLocation().getBlockX() + ""String_Node_Str"" + p.getWorld().getSpawnLocation().getBlockY()+ ""String_Node_Str""+ p.getWorld().getSpawnLocation().getBlockZ()+ ""String_Node_Str""+ p.getWorld().getName());
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(p.getBedSpawnLocation().getBlockX() + ""String_Node_Str"" + p.getBedSpawnLocation().getBlockY()+ ""String_Node_Str""+ p.getBedSpawnLocation().getBlockZ()+ ""String_Node_Str""+ p.getWorld().getName());
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.getHealth()));
    if (subType.equals(""String_Node_Str"")) {
      int maxHealth=p.getMaxHealth();
      if (event.getType().split(""String_Node_Str"").length > 2)       maxHealth=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      if ((float)p.getHealth() / maxHealth < .10)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getHealth() / maxHealth < .40)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getHealth() / maxHealth < .75)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getHealth() / maxHealth < 1)       event.setReplaced(""String_Node_Str"");
 else       event.setReplaced(""String_Node_Str"");
    }
 else     if (subType.equals(""String_Node_Str"")) {
      int maxHealth=p.getMaxHealth();
      if (event.getType().split(""String_Node_Str"").length > 2)       maxHealth=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      event.setReplaced(String.valueOf(((float)p.getHealth() / maxHealth) * 100));
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.getFoodLevel()));
    if (subType.equals(""String_Node_Str"")) {
      int maxFood=20;
      if (event.getType().split(""String_Node_Str"").length > 2)       maxFood=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      if ((float)p.getHealth() / maxFood < .10)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getFoodLevel() / maxFood < .40)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getFoodLevel() / maxFood < .75)       event.setReplaced(""String_Node_Str"");
 else       if ((float)p.getFoodLevel() / maxFood < 1)       event.setReplaced(""String_Node_Str"");
 else       event.setReplaced(""String_Node_Str"");
    }
 else     if (subType.equals(""String_Node_Str"")) {
      int maxFood=20;
      if (event.getType().split(""String_Node_Str"").length > 2)       maxFood=Integer.valueOf(event.getType().split(""String_Node_Str"")[2]);
      event.setReplaced(String.valueOf(((float)p.getFoodLevel() / maxFood) * 100));
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (Depends.economy != null) {
      event.setReplaced(String.valueOf(Depends.economy.getBalance(p.getName())));
      if (subType.equals(""String_Node_Str""))       event.setReplaced(String.valueOf((int)Depends.economy.getBalance(p.getName())));
 else       if (subType.equals(""String_Node_Str""))       if (specifier.equals(""String_Node_Str""))       event.setReplaced(Depends.economy.currencyNameSingular());
 else       if (specifier.equals(""String_Node_Str""))       event.setReplaced(Depends.economy.currencyNamePlural());
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isOp()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isBanned()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.isOnline()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(p.getPlayerTime()));
    if (subType.equals(""String_Node_Str""))     if (p.getPlayerTime() < 13500 || p.getPlayerTime() > 23000)     event.setReplaced(""String_Node_Str"");
 else     if (p.getPlayerTime() > 13500)     event.setReplaced(""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (p.getWorld().hasStorm())     event.setReplaced(""String_Node_Str"");
 else     if (p.getPlayerTime() > 13500)     event.setReplaced(""String_Node_Str"");
 else     event.setReplaced(""String_Node_Str"");
  }
 else   if (event.getType().startsWith(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(event.getNPC().getEntity().getHealth()));
  }
 else   if (event.getType().startsWith(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(event.getNPC().getEntity().getHealth()));
  }
 else   if (event.getType().startsWith(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(event.getPlayer().getExp() * 100));
    if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getExpToLevel()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getTotalExperience()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(p.getLevel()));
  }
}",0.9968490403895732
10475,"/** 
 * Returns the current step for a Player and specified script. If no current step is found, the default step is used, 'Default', unless another default (used by ending the step-name with a '*') is specified in the script. For the sake of compatibility from v0.76, '1' can also be used.
 * @param player the Player to check
 * @param scriptName the name of the interact script container to check
 * @return the current, or default, step name
 */
public static String getCurrentStep(Player player,String scriptName){
  if (scriptName == null)   return null;
  if (DenizenAPI._saves().contains(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ ""String_Node_Str""+ scriptName.toUpperCase()+ ""String_Node_Str""+ ""String_Node_Str""))   return DenizenAPI._saves().getString(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ ""String_Node_Str""+ scriptName.toUpperCase()+ ""String_Node_Str""+ ""String_Node_Str"");
  return ScriptRegistry.getScriptContainerAs(scriptName,InteractScriptContainer.class).getDefaultStepName();
}","/** 
 * Returns the current step for a Player and specified script. If no current step is found, the default step is used, 'Default', unless another default (used by ending the step-name with a '*') is specified in the script. For the sake of compatibility from v0.76, '1' can also be used.
 * @param player the Player to check
 * @param scriptName the name of the interact script container to check
 * @return the current, or default, step name
 */
public static String getCurrentStep(Player player,String scriptName){
  if (scriptName == null)   return null;
  if (DenizenAPI._saves().contains(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ ""String_Node_Str""+ scriptName.toUpperCase()+ ""String_Node_Str""+ ""String_Node_Str"")) {
    return DenizenAPI._saves().getString(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ ""String_Node_Str""+ scriptName.toUpperCase()+ ""String_Node_Str""+ ""String_Node_Str"").toUpperCase();
  }
  return ScriptRegistry.getScriptContainerAs(scriptName,InteractScriptContainer.class).getDefaultStepName().toUpperCase();
}",0.982808022922636
10476,"/** 
 * Gets a Item Object from a string form.
 * @param string  the string or dScript argument String
 * @return  an Item, or null if incorrectly formatted
 */
public static Item valueOf(String string){
  if (string == null)   return null;
  Matcher[] m=new Matcher[4];
  Item stack=null;
  m[0]=getItemPtrn[4].matcher(string);
  if (m[0].matches()) {
  }
  m[0]=getItemPtrn[0].matcher(string);
  m[1]=getItemPtrn[1].matcher(string);
  m[2]=getItemPtrn[2].matcher(string);
  m[3]=getItemPtrn[3].matcher(string);
  try {
    if (m[0].matches()) {
      stack=new Item(Integer.valueOf(m[0].group(1)));
      stack.setDurability(Short.valueOf(m[0].group(2)));
      return stack.setId(stack.getType().name());
    }
 else     if (m[1].matches()) {
      stack=new Item(Integer.valueOf(m[1].group(1)));
      stack.setId(stack.getType().name());
      return stack;
    }
 else     if (m[2].matches()) {
      stack=new Item(Material.valueOf(m[2].group(1).toUpperCase()));
      stack.setDurability(Short.valueOf(m[2].group(2)));
      return stack.setId(stack.getType().name());
    }
 else     if (m[3].matches()) {
      stack=new Item(Material.valueOf(m[3].group(1).toUpperCase()));
      stack.setId(stack.getType().name());
      return stack;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  m[0]=getItemPtrn[5].matcher(string);
  if (m[0].matches() && ScriptRegistry.containsScript(m[0].group(1),InteractScriptContainer.class)) {
    return ScriptRegistry.getScriptContainerAs(m[0].group(1),ItemScriptContainer.class).getItemFrom();
  }
  dB.echoError(""String_Node_Str"");
  return stack;
}","/** 
 * Gets a Item Object from a string form.
 * @param string  the string or dScript argument String
 * @return  an Item, or null if incorrectly formatted
 */
public static Item valueOf(String string){
  if (string == null)   return null;
  Matcher[] m=new Matcher[4];
  Item stack=null;
  m[0]=getItemPtrn[4].matcher(string);
  if (m[0].matches()) {
  }
  m[0]=getItemPtrn[0].matcher(string);
  m[1]=getItemPtrn[1].matcher(string);
  m[2]=getItemPtrn[2].matcher(string);
  m[3]=getItemPtrn[3].matcher(string);
  try {
    if (m[0].matches()) {
      stack=new Item(Integer.valueOf(m[0].group(1)));
      stack.setDurability(Short.valueOf(m[0].group(2)));
      return stack.setId(stack.getType().name());
    }
 else     if (m[1].matches()) {
      stack=new Item(Integer.valueOf(m[1].group(1)));
      stack.setId(stack.getType().name());
      return stack;
    }
 else     if (m[2].matches()) {
      stack=new Item(Material.valueOf(m[2].group(1).toUpperCase()));
      stack.setDurability(Short.valueOf(m[2].group(2)));
      return stack.setId(stack.getType().name());
    }
 else     if (m[3].matches()) {
      stack=new Item(Material.valueOf(m[3].group(1).toUpperCase()));
      stack.setId(stack.getType().name());
      return stack;
    }
  }
 catch (  Exception e) {
  }
  m[0]=getItemPtrn[5].matcher(string);
  if (m[0].matches() && ScriptRegistry.containsScript(m[0].group(1),ItemScriptContainer.class)) {
    return ScriptRegistry.getScriptContainerAs(m[0].group(1),ItemScriptContainer.class).getItemFrom();
  }
  return stack;
}",0.9778340721975934
10477,"@EventHandler public void offlinePlayerTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str"") || !event.hasOfflinePlayer())   return;
  OfflinePlayer p=event.getOfflinePlayer();
  String type=event.getType() != null ? event.getType().toUpperCase() : ""String_Node_Str"";
  String subType=event.getSubType() != null ? event.getSubType().toUpperCase() : ""String_Node_Str"";
  if (type.equals(""String_Node_Str""))   event.setReplaced(String.valueOf(p.hasPlayedBefore()));
 else   if (type.equals(""String_Node_Str""))   event.setReplaced(String.valueOf(p.isOp()));
 else   if (type.equals(""String_Node_Str""))   event.setReplaced(String.valueOf(p.isBanned()));
 else   if (type.equals(""String_Node_Str""))   event.setReplaced(String.valueOf(p.isOnline()));
 else   if (type.equals(""String_Node_Str"")) {
    if (event.hasTypeContext()) {
      if (aH.matchesInteger(event.getTypeContext())) {
        if (PlayerTags.playerChatHistory.containsKey(p.getName())) {
          List<String> history=PlayerTags.playerChatHistory.get(p.getName());
          if (history.size() < aH.getIntegerFrom(event.getTypeContext()))           event.setReplaced(history.get(history.size() - 1));
 else           event.setReplaced(history.get(aH.getIntegerFrom(event.getTypeContext()) - 1));
        }
      }
    }
 else {
      if (PlayerTags.playerChatHistory.containsKey(p.getName())) {
        event.setReplaced(PlayerTags.playerChatHistory.get(p.getName()).get(0));
      }
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(p.getName());
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     if (p.getBedSpawnLocation() != null) {
      event.setReplaced(p.getBedSpawnLocation().getBlockX() + ""String_Node_Str"" + p.getBedSpawnLocation().getBlockY()+ ""String_Node_Str""+ p.getBedSpawnLocation().getBlockZ()+ ""String_Node_Str""+ p.getBedSpawnLocation().getWorld());
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (Depends.economy != null) {
      event.setReplaced(String.valueOf(Depends.economy.getBalance(p.getName())));
      if (subType.equals(""String_Node_Str""))       event.setReplaced(String.valueOf((int)Depends.economy.getBalance(p.getName())));
 else       if (subType.equals(""String_Node_Str""))       event.setReplaced(Depends.economy.currencyNameSingular());
 else       if (subType.equals(""String_Node_Str""))       event.setReplaced(Depends.economy.currencyNamePlural());
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
 else   if (event.getType().startsWith(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(event.getPlayer().getExp() * 100));
  }
}","@EventHandler public void offlinePlayerTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str"") || !event.hasOfflinePlayer())   return;
  OfflinePlayer p=event.getOfflinePlayer();
  String type=event.getType() != null ? event.getType().toUpperCase() : ""String_Node_Str"";
  String subType=event.getSubType() != null ? event.getSubType().toUpperCase() : ""String_Node_Str"";
  if (type.equals(""String_Node_Str""))   event.setReplaced(String.valueOf(p.hasPlayedBefore()));
 else   if (type.equals(""String_Node_Str""))   event.setReplaced(String.valueOf(p.isOp()));
 else   if (type.equals(""String_Node_Str""))   event.setReplaced(String.valueOf(p.isBanned()));
 else   if (type.equals(""String_Node_Str""))   event.setReplaced(String.valueOf(p.isOnline()));
 else   if (type.equals(""String_Node_Str"")) {
    if (event.hasTypeContext()) {
      if (aH.matchesInteger(event.getTypeContext())) {
        if (PlayerTags.playerChatHistory.containsKey(p.getName())) {
          List<String> history=PlayerTags.playerChatHistory.get(p.getName());
          if (history.size() < aH.getIntegerFrom(event.getTypeContext()))           event.setReplaced(history.get(history.size() - 1));
 else           event.setReplaced(history.get(aH.getIntegerFrom(event.getTypeContext()) - 1));
        }
      }
    }
 else {
      if (PlayerTags.playerChatHistory.containsKey(p.getName())) {
        event.setReplaced(PlayerTags.playerChatHistory.get(p.getName()).get(0));
      }
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(p.getName());
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     if (p.getBedSpawnLocation() != null) {
      event.setReplaced(p.getBedSpawnLocation().getBlockX() + ""String_Node_Str"" + p.getBedSpawnLocation().getBlockY()+ ""String_Node_Str""+ p.getBedSpawnLocation().getBlockZ()+ ""String_Node_Str""+ p.getBedSpawnLocation().getWorld().getName());
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (Depends.economy != null) {
      event.setReplaced(String.valueOf(Depends.economy.getBalance(p.getName())));
      if (subType.equals(""String_Node_Str""))       event.setReplaced(String.valueOf((int)Depends.economy.getBalance(p.getName())));
 else       if (subType.equals(""String_Node_Str""))       event.setReplaced(Depends.economy.currencyNameSingular());
 else       if (subType.equals(""String_Node_Str""))       event.setReplaced(Depends.economy.currencyNamePlural());
    }
 else {
      dB.echoError(""String_Node_Str"");
    }
  }
 else   if (event.getType().startsWith(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(event.getPlayer().getExp() * 100));
  }
}",0.9981245311327832
10478,"@EventHandler public void locationTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  String nameContext=event.getNameContext() != null ? event.getNameContext().toUpperCase() : ""String_Node_Str"";
  String type=event.getType() != null ? event.getType().toUpperCase() : ""String_Node_Str"";
  String subType=event.getSubType() != null ? event.getSubType().toUpperCase() : ""String_Node_Str"";
  String typeContext=event.getTypeContext() != null ? event.getTypeContext().toUpperCase() : ""String_Node_Str"";
  Location fromLocation=null;
  Location toLocation=null;
  if (aH.matchesLocation(""String_Node_Str"" + nameContext)) {
    fromLocation=aH.getLocationFrom(""String_Node_Str"" + nameContext);
  }
 else   if (event.getPlayer() != null) {
    fromLocation=new Location(event.getPlayer().getLocation());
  }
 else {
    fromLocation=new Location(event.getNPC().getLocation());
  }
  if (aH.matchesLocation(""String_Node_Str"" + typeContext)) {
    toLocation=aH.getLocationFrom(""String_Node_Str"" + typeContext);
  }
  if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     event.setReplaced(fromLocation.getBlock().getBiome().name().toLowerCase().replace('_',' '));
 else     event.setReplaced(fromLocation.getBlock().getBiome().name());
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(Utilities.getCardinal(Utilities.getYaw(toLocation.toVector().subtract(fromLocation.toVector()).normalize())));
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(Math.abs(fromLocation.getY() - toLocation.getY())));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf(Math.sqrt(Math.pow(fromLocation.getX() - toLocation.getX(),2) + Math.pow(fromLocation.getZ() - toLocation.getZ(),2))));
 else     event.setReplaced(String.valueOf(fromLocation.distance(toLocation)));
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(""String_Node_Str"" + fromLocation.getBlockX() + ""String_Node_Str""+ fromLocation.getBlockY()+ ""String_Node_Str""+ fromLocation.getBlockZ()+ ""String_Node_Str""+ fromLocation.getWorld().getName()+ ""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf((int)fromLocation.getBlock().getLightFromBlocks()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf((int)fromLocation.getBlock().getLightFromSky()));
 else     event.setReplaced(String.valueOf((int)fromLocation.getBlock().getLightLevel()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     if (fromLocation.getWorld().getTime() < 13500 || fromLocation.getWorld().getTime() > 23000)     event.setReplaced(""String_Node_Str"");
 else     if (fromLocation.getWorld().getTime() > 13500)     event.setReplaced(""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(fromLocation.getWorld().getName());
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(fromLocation.getBlockX()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(fromLocation.getBlockY()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(fromLocation.getBlockZ()));
  }
}","@EventHandler public void locationTags(ReplaceableTagEvent event){
  if (!event.matches(""String_Node_Str""))   return;
  String nameContext=event.getNameContext() != null ? event.getNameContext().toUpperCase() : ""String_Node_Str"";
  String type=event.getType() != null ? event.getType().toUpperCase() : ""String_Node_Str"";
  String subType=event.getSubType() != null ? event.getSubType().toUpperCase() : ""String_Node_Str"";
  String typeContext=event.getTypeContext() != null ? event.getTypeContext().toUpperCase() : ""String_Node_Str"";
  Location fromLocation=null;
  Location toLocation=null;
  if (aH.matchesLocation(""String_Node_Str"" + nameContext)) {
    fromLocation=aH.getLocationFrom(""String_Node_Str"" + nameContext);
  }
 else   if (event.getPlayer() != null) {
    fromLocation=new Location(event.getPlayer().getLocation());
  }
 else {
    fromLocation=new Location(event.getNPC().getLocation());
  }
  if (aH.matchesLocation(""String_Node_Str"" + typeContext)) {
    toLocation=aH.getLocationFrom(""String_Node_Str"" + typeContext);
  }
  if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     event.setReplaced(fromLocation.getBlock().getBiome().name().toLowerCase().replace('_',' '));
 else     event.setReplaced(fromLocation.getBlock().getBiome().name());
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (fromLocation != null && toLocation != null) {
      event.setReplaced(Utilities.getCardinal(Utilities.getYaw(toLocation.toVector().subtract(fromLocation.toVector()).normalize())));
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (fromLocation != null && toLocation != null) {
      if (subType.equals(""String_Node_Str""))       event.setReplaced(String.valueOf(Math.abs(fromLocation.getY() - toLocation.getY())));
 else       if (subType.equals(""String_Node_Str""))       event.setReplaced(String.valueOf(Math.sqrt(Math.pow(fromLocation.getX() - toLocation.getX(),2) + Math.pow(fromLocation.getZ() - toLocation.getZ(),2))));
 else       event.setReplaced(String.valueOf(fromLocation.distance(toLocation)));
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(""String_Node_Str"" + fromLocation.getBlockX() + ""String_Node_Str""+ fromLocation.getBlockY()+ ""String_Node_Str""+ fromLocation.getBlockZ()+ ""String_Node_Str""+ fromLocation.getWorld().getName()+ ""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf((int)fromLocation.getBlock().getLightFromBlocks()));
 else     if (subType.equals(""String_Node_Str""))     event.setReplaced(String.valueOf((int)fromLocation.getBlock().getLightFromSky()));
 else     event.setReplaced(String.valueOf((int)fromLocation.getBlock().getLightLevel()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (subType.equals(""String_Node_Str""))     if (fromLocation.getWorld().getTime() < 13500 || fromLocation.getWorld().getTime() > 23000)     event.setReplaced(""String_Node_Str"");
 else     if (fromLocation.getWorld().getTime() > 13500)     event.setReplaced(""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(fromLocation.getWorld().getName());
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(fromLocation.getBlockX()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(fromLocation.getBlockY()));
  }
 else   if (type.equals(""String_Node_Str"")) {
    event.setReplaced(String.valueOf(fromLocation.getBlockZ()));
  }
}",0.9810996563573884
10479,"@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  boolean outcome=false;
  CheckType checkType=null;
  for (  String thisArg : args) {
    if (aH.matchesValueArg(""String_Node_Str"",thisArg,ArgumentType.Custom)) {
      checkType=CheckType.ITEMINHAND;
      dB.echoDebug(""String_Node_Str"");
    }
 else     dB.echoError(""String_Node_Str"",thisArg);
  }
  if (checkType != null) {
switch (checkType) {
case ITEMINHAND:
      if (!context.getPlayer().getItemInHand().getEnchantments().isEmpty())       outcome=true;
    break;
}
}
if (outcome == true) dB.echoDebug(""String_Node_Str"");
 else dB.echoDebug(""String_Node_Str"");
return outcome;
}","@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  boolean outcome=false;
  CheckType checkType=null;
  if (args.size() < 1)   throw new RequirementCheckException(""String_Node_Str"");
  for (  String thisArg : args) {
    if (aH.matchesValueArg(""String_Node_Str"",thisArg,ArgumentType.Custom)) {
      checkType=CheckType.ITEMINHAND;
      dB.echoDebug(""String_Node_Str"");
    }
 else     dB.echoError(""String_Node_Str"",thisArg);
  }
  if (checkType != null) {
switch (checkType) {
case ITEMINHAND:
      if (!context.getPlayer().getItemInHand().getEnchantments().isEmpty())       outcome=true;
    break;
}
}
if (outcome == true) dB.echoDebug(""String_Node_Str"");
 else dB.echoDebug(""String_Node_Str"");
return outcome;
}",0.9453809844908968
10480,"@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  boolean outcome=false;
  Block blockToCheck=null;
  for (  String thisArg : args) {
    if (aH.matchesLocation(thisArg)) {
      blockToCheck=aH.getLocationFrom(thisArg).getBlock();
      if (blockToCheck != null)       dB.echoDebug(""String_Node_Str"",blockToCheck.getType().toString());
    }
 else     dB.echoError(""String_Node_Str"",thisArg);
  }
  if (blockToCheck != null && blockToCheck.isLiquid())   outcome=true;
  if (outcome == true)   dB.echoDebug(""String_Node_Str"");
 else   dB.echoDebug(""String_Node_Str"");
  return outcome;
}","@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  boolean outcome=false;
  Block blockToCheck=null;
  if (args.size() < 1)   throw new RequirementCheckException(""String_Node_Str"");
  for (  String thisArg : args) {
    if (aH.matchesLocation(thisArg)) {
      blockToCheck=aH.getLocationFrom(thisArg).getBlock();
      if (blockToCheck != null)       dB.echoDebug(""String_Node_Str"",blockToCheck.getType().toString());
    }
 else     dB.echoError(""String_Node_Str"",thisArg);
  }
  if (blockToCheck != null && blockToCheck.isLiquid())   outcome=true;
  if (outcome == true)   dB.echoDebug(""String_Node_Str"");
 else   dB.echoDebug(""String_Node_Str"");
  return outcome;
}",0.9415162454873646
10481,"@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  for (  String arg : args) {
    if (aH.matchesQuantity(arg) || aH.matchesInteger(arg) || aH.matchesDouble(arg)) {
      quantity=aH.getDoubleFrom(arg);
      dB.echoDebug(""String_Node_Str"" + quantity);
    }
 else     throw new RequirementCheckException(Messages.ERROR_UNKNOWN_ARGUMENT,arg);
  }
  if (Depends.economy != null) {
    balance=Depends.economy.getBalance(context.getPlayer().getName());
    dB.echoDebug(""String_Node_Str"" + balance);
  }
 else {
    dB.echoError(""String_Node_Str"");
  }
  if (balance >= quantity)   outcome=true;
 else   outcome=false;
  return outcome;
}","@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  boolean outcome=true;
  if (Depends.economy != null) {
    double quantity=0;
    double balance=0;
    for (    String arg : args) {
      if (aH.matchesQuantity(arg) || aH.matchesInteger(arg) || aH.matchesDouble(arg)) {
        quantity=aH.getDoubleFrom(arg);
        dB.echoDebug(""String_Node_Str"" + quantity);
      }
 else       throw new RequirementCheckException(Messages.ERROR_UNKNOWN_ARGUMENT,arg);
    }
    balance=Depends.economy.getBalance(context.getPlayer().getName());
    dB.echoDebug(""String_Node_Str"" + balance);
    if (balance >= quantity)     outcome=true;
 else     outcome=false;
  }
 else {
    dB.echoError(""String_Node_Str"");
  }
  return outcome;
}",0.8008048289738431
10482,"@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  boolean outcome=false;
  if (context.getPlayer() != null) {
    if (Depends.permissions != null) {
      for (      String permission : args) {
        if (Depends.permissions.has(context.getPlayer(),permission)) {
          dB.echoDebug(""String_Node_Str"" + permission);
        }
 else {
          outcome=false;
          dB.echoDebug(""String_Node_Str"" + permission + ""String_Node_Str"");
          break;
        }
      }
      return outcome;
    }
    dB.echoDebug(""String_Node_Str"");
  }
  return outcome;
}","@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  if (context.getPlayer() != null) {
    boolean outcome=false;
    if (Depends.permissions != null) {
      for (      String permission : args) {
        if (Depends.permissions.has(context.getPlayer(),permission)) {
          dB.echoDebug(""String_Node_Str"" + permission);
        }
 else {
          outcome=false;
          dB.echoDebug(""String_Node_Str"" + permission + ""String_Node_Str"");
          break;
        }
      }
      return outcome;
    }
    dB.echoDebug(""String_Node_Str"");
  }
  return true;
}",0.8988047808764941
10483,"@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  boolean outcome=false;
  if (!context.getPlayer().getWorld().hasStorm())   outcome=true;
  return outcome;
}","@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  return !context.getPlayer().getWorld().hasStorm();
}",0.8358974358974359
10484,"@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  String region=null;
  Boolean outcome=false;
  if (args == null)   throw new RequirementCheckException(""String_Node_Str"");
  for (  String arg : args) {
    if (aH.matchesValueArg(""String_Node_Str"",arg,ArgumentType.String)) {
      region=aH.getStringFrom(arg);
      dB.echoDebug(""String_Node_Str"" + region);
    }
 else     throw new RequirementCheckException(""String_Node_Str"");
  }
  outcome=WorldGuardUtilities.checkPlayerWGRegion(context.getPlayer(),region);
  if (outcome == true)   dB.echoDebug(""String_Node_Str"");
 else   dB.echoDebug(""String_Node_Str"");
  return outcome;
}","@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  String region=null;
  Boolean outcome=false;
  if (args == null || args.size() < 1)   throw new RequirementCheckException(""String_Node_Str"");
  for (  String arg : args) {
    if (aH.matchesValueArg(""String_Node_Str"",arg,ArgumentType.String)) {
      region=aH.getStringFrom(arg);
      dB.echoDebug(""String_Node_Str"" + region);
    }
 else     throw new RequirementCheckException(""String_Node_Str"");
  }
  outcome=WorldGuardUtilities.checkPlayerWGRegion(context.getPlayer(),region);
  if (outcome == true)   dB.echoDebug(""String_Node_Str"");
 else   dB.echoDebug(""String_Node_Str"");
  return outcome;
}",0.986572438162544
10485,"@Override public void registerCoreMembers(){
  registerCoreMember(AnnounceCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(AttackCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(AssignmentCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(CastCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ChairCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ChatCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ClearCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(CooldownCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(DetermineCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(DisengageCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(DropCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(EngageCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(ExecuteCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(FailCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(FeedCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(FinishCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(FlagCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(FollowCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(GiveCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(HealCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(IfCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(ListenCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(LookCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(LookcloseCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ModifyBlockCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(NameplateCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(NarrateCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(NewCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(PlaySoundCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(RandomCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(RuntaskCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ScribeCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ShootCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(StrikeCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(SwitchCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(TakeCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(TeleportCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(TriggerCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(VulnerableCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(WaitCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(ZapCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  dB.echoApproval(""String_Node_Str"" + instances.keySet().toString());
}","@Override public void registerCoreMembers(){
  registerCoreMember(AnnounceCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(AttackCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(AssignmentCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(CastCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  if (Depends.protocolManager != null) {
    registerCoreMember(ChairCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  }
  registerCoreMember(ChatCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ClearCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(CooldownCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(DetermineCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(DisengageCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(DropCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(EngageCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(ExecuteCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(FailCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(FeedCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(FinishCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(FlagCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(FollowCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(GiveCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(HealCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(IfCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(ListenCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(LookCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(LookcloseCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ModifyBlockCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(NameplateCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(NarrateCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(NewCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(PlaySoundCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(RandomCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(RuntaskCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ScribeCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(ShootCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(StrikeCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(SwitchCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(TakeCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(TeleportCommand.class,""String_Node_Str"",""String_Node_Str"",1);
  registerCoreMember(TriggerCommand.class,""String_Node_Str"",""String_Node_Str"",2);
  registerCoreMember(VulnerableCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(WaitCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  registerCoreMember(ZapCommand.class,""String_Node_Str"",""String_Node_Str"",0);
  dB.echoApproval(""String_Node_Str"" + instances.keySet().toString());
}",0.9932149559693952
10486,"/** 
 * Checks a RequirementsContext with Requirements from the RequirementsRegistry.
 * @param context
 * @return true if the list meets the requirements and context set
 */
public boolean check(RequirementsContext context){
  if (context.mode.getMode() == RequirementsMode.Mode.NONE || context.list.isEmpty()) {
    return true;
  }
  dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"",context.scriptName);
  dB.echoDebug(""String_Node_Str"",context.mode.getMode().toString());
  boolean firstReqMet=false;
  boolean firstReqChecked=false;
  int numberMet=0;
  for (  String reqEntry : context.list) {
    boolean negativeRequirement=false;
    if (reqEntry.startsWith(""String_Node_Str"")) {
      negativeRequirement=true;
      reqEntry=reqEntry.substring(1);
    }
    if (plugin.getRequirementRegistry().list().containsKey(reqEntry.split(""String_Node_Str"")[0])) {
      AbstractRequirement requirement=plugin.getRequirementRegistry().get(reqEntry.split(""String_Node_Str"")[0]);
      String[] arguments=null;
      if (reqEntry.split(""String_Node_Str"").length > 1) {
        arguments=plugin.getScriptEngine().getScriptBuilder().buildArgs(reqEntry.split(""String_Node_Str"",2)[1]);
      }
      List<String> argumentList=new ArrayList<String>();
      if (arguments != null) {
        argumentList=plugin.tagManager().fillArguments(arguments,context.player,plugin.getNPCRegistry().getDenizen(context.npc));
      }
      try {
        int numArguments=arguments == null ? 0 : arguments.length;
        if ((numArguments == 0 && requirement.requirementOptions.REQUIRED_ARGS > 0) || numArguments < requirement.requirementOptions.REQUIRED_ARGS) {
          throw new RequirementCheckException(""String_Node_Str"");
        }
        if (requirement.check(context,argumentList) != negativeRequirement) {
          if (!firstReqChecked) {
            firstReqMet=true;
            firstReqChecked=true;
          }
          numberMet++;
          dB.echoApproval(""String_Node_Str"" + requirement.getName() + ""String_Node_Str""+ ""String_Node_Str"");
        }
 else {
          if (!firstReqChecked) {
            firstReqMet=false;
            firstReqChecked=true;
          }
          dB.echoApproval(""String_Node_Str"" + requirement.getName() + ""String_Node_Str""+ ""String_Node_Str"");
        }
      }
 catch (      Throwable e) {
        if (e instanceof RequirementCheckException) {
          dB.echoError(""String_Node_Str"");
          dB.echoError(""String_Node_Str"" + requirement.getUsageHint());
        }
 else {
          dB.echoError(""String_Node_Str"" + requirement.getName() + ""String_Node_Str"");
          if (!dB.showStackTraces)           dB.echoError(""String_Node_Str"");
 else           e.printStackTrace();
        }
      }
    }
 else {
      dB.echoError(""String_Node_Str"" + reqEntry.split(""String_Node_Str"")[0] + ""String_Node_Str"");
    }
  }
  if (context.mode.getMode() == RequirementsMode.Mode.ALL && numberMet == context.list.size())   return true;
 else   if (context.mode.getMode() == RequirementsMode.Mode.ANY_NUM) {
    if (numberMet >= context.mode.modeInt)     return true;
 else     return false;
  }
 else   if (context.mode.getMode() == RequirementsMode.Mode.FIRST_AND_ANY_NUM) {
    if (firstReqMet) {
      if (numberMet > context.mode.modeInt)       return true;
 else       return false;
    }
 else     return false;
  }
  return false;
}","/** 
 * Checks a RequirementsContext with Requirements from the RequirementsRegistry.
 * @param context
 * @return true if the list meets the requirements and context set
 */
public boolean check(RequirementsContext context){
  if (context.mode.getMode() == RequirementsMode.Mode.NONE || context.list.isEmpty()) {
    return true;
  }
  dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"",context.scriptName);
  dB.echoDebug(""String_Node_Str"",context.mode.getMode().toString());
  boolean firstReqMet=false;
  boolean firstReqChecked=false;
  int numberMet=0;
  for (  String reqEntry : context.list) {
    boolean negativeRequirement=false;
    if (reqEntry.startsWith(""String_Node_Str"")) {
      negativeRequirement=true;
      reqEntry=reqEntry.substring(1);
    }
    if (plugin.getRequirementRegistry().list().containsKey(reqEntry.split(""String_Node_Str"")[0].toUpperCase())) {
      AbstractRequirement requirement=plugin.getRequirementRegistry().get(reqEntry.split(""String_Node_Str"")[0]);
      String[] arguments=null;
      if (reqEntry.split(""String_Node_Str"").length > 1) {
        arguments=plugin.getScriptEngine().getScriptBuilder().buildArgs(reqEntry.split(""String_Node_Str"",2)[1]);
      }
      List<String> argumentList=new ArrayList<String>();
      if (arguments != null) {
        argumentList=plugin.tagManager().fillArguments(arguments,context.player,plugin.getNPCRegistry().getDenizen(context.npc));
      }
      try {
        int numArguments=arguments == null ? 0 : arguments.length;
        if ((numArguments == 0 && requirement.requirementOptions.REQUIRED_ARGS > 0) || numArguments < requirement.requirementOptions.REQUIRED_ARGS) {
          throw new RequirementCheckException(""String_Node_Str"");
        }
        if (requirement.check(context,argumentList) != negativeRequirement) {
          if (!firstReqChecked) {
            firstReqMet=true;
            firstReqChecked=true;
          }
          numberMet++;
          dB.echoApproval(""String_Node_Str"" + requirement.getName() + ""String_Node_Str""+ ""String_Node_Str"");
        }
 else {
          if (!firstReqChecked) {
            firstReqMet=false;
            firstReqChecked=true;
          }
          dB.echoApproval(""String_Node_Str"" + requirement.getName() + ""String_Node_Str""+ ""String_Node_Str"");
        }
      }
 catch (      Throwable e) {
        if (e instanceof RequirementCheckException) {
          dB.echoError(""String_Node_Str"");
          dB.echoError(""String_Node_Str"" + requirement.getUsageHint());
        }
 else {
          dB.echoError(""String_Node_Str"" + requirement.getName() + ""String_Node_Str"");
          if (!dB.showStackTraces)           dB.echoError(""String_Node_Str"");
 else           e.printStackTrace();
        }
      }
    }
 else {
      dB.echoError(""String_Node_Str"" + reqEntry.split(""String_Node_Str"")[0] + ""String_Node_Str"");
    }
  }
  if (context.mode.getMode() == RequirementsMode.Mode.ALL && numberMet == context.list.size())   return true;
 else   if (context.mode.getMode() == RequirementsMode.Mode.ANY_NUM) {
    if (numberMet >= context.mode.modeInt)     return true;
 else     return false;
  }
 else   if (context.mode.getMode() == RequirementsMode.Mode.FIRST_AND_ANY_NUM) {
    if (firstReqMet) {
      if (numberMet > context.mode.modeInt)       return true;
 else       return false;
    }
 else     return false;
  }
  return false;
}",0.9979253112033196
10487,"/** 
 * Gets a Item Object from a string form.
 * @param string  the string or dScript argument String
 * @return  an Item, or null if incorrectly formatted
 */
public static Item valueOf(String string){
  if (string == null)   return null;
  Matcher[] m=new Matcher[4];
  Item stack=null;
  m[0]=getItemPtrn[4].matcher(string);
  if (m[0].matches()) {
  }
  m[0]=getItemPtrn[0].matcher(string);
  m[1]=getItemPtrn[1].matcher(string);
  m[2]=getItemPtrn[2].matcher(string);
  m[3]=getItemPtrn[3].matcher(string);
  try {
    if (m[0].matches()) {
      stack=new Item(Integer.valueOf(m[0].group(1)));
      stack.setDurability(Short.valueOf(m[0].group(2)));
      return stack.setId(stack.getType().name());
    }
 else     if (m[1].matches()) {
      stack=new Item(Integer.valueOf(m[1].group(1)));
      stack.setId(stack.getType().name());
      return stack;
    }
 else     if (m[2].matches()) {
      stack=new Item(Material.valueOf(m[2].group(1).toUpperCase()));
      stack.setDurability(Short.valueOf(m[2].group(2)));
      return stack.setId(stack.getType().name());
    }
 else     if (m[3].matches()) {
      stack=new Item(Material.valueOf(m[3].group(1).toUpperCase()));
      stack.setId(stack.getType().name());
      return stack;
    }
  }
 catch (  Exception e) {
  }
  m[0]=getItemPtrn[5].matcher(string);
  if (m[0].matches()) {
    Script itemScript=Script.valueOf(m[3].group(1));
    if (itemScript != null && itemScript.getType().equalsIgnoreCase(""String_Node_Str"")) {
      if (itemScript.getContents().contains(""String_Node_Str""))       stack=Item.valueOf(itemScript.getContents().getString(""String_Node_Str""));
      if (stack == null)       return null;
      ItemMeta meta=stack.getItemMeta();
      if (itemScript.getContents().contains(""String_Node_Str""))       meta.setDisplayName(itemScript.getContents().getString(""String_Node_Str""));
      if (itemScript.getContents().contains(""String_Node_Str""))       meta.setLore(itemScript.getContents().getStringList(""String_Node_Str""));
      stack.setItemMeta(meta);
      if (itemScript.getContents().contains(""String_Node_Str"")) {
        for (        String enchantment : itemScript.getContents().getStringList(""String_Node_Str"")) {
          try {
            int level=1;
            if (enchantment.split(""String_Node_Str"").length > 1) {
              level=Integer.valueOf(enchantment.split(""String_Node_Str"")[1]);
              enchantment=enchantment.split(""String_Node_Str"")[0];
            }
            Enchantment ench=Enchantment.getByName(enchantment.toUpperCase());
            stack.addEnchantment(ench,level);
          }
 catch (          Exception e) {
            continue;
          }
        }
      }
      if (itemScript.getContents().contains(""String_Node_Str""))       LeatherColorer.colorArmor(stack,itemScript.getContents().getString(""String_Node_Str""));
      stack.setId(itemScript.getName());
      return stack;
    }
  }
  dB.echoError(""String_Node_Str"");
  return stack;
}","/** 
 * Gets a Item Object from a string form.
 * @param string  the string or dScript argument String
 * @return  an Item, or null if incorrectly formatted
 */
public static Item valueOf(String string){
  if (string == null)   return null;
  Matcher[] m=new Matcher[4];
  Item stack=null;
  m[0]=getItemPtrn[4].matcher(string);
  if (m[0].matches()) {
  }
  m[0]=getItemPtrn[0].matcher(string);
  m[1]=getItemPtrn[1].matcher(string);
  m[2]=getItemPtrn[2].matcher(string);
  m[3]=getItemPtrn[3].matcher(string);
  try {
    if (m[0].matches()) {
      stack=new Item(Integer.valueOf(m[0].group(1)));
      stack.setDurability(Short.valueOf(m[0].group(2)));
      return stack.setId(stack.getType().name());
    }
 else     if (m[1].matches()) {
      stack=new Item(Integer.valueOf(m[1].group(1)));
      stack.setId(stack.getType().name());
      return stack;
    }
 else     if (m[2].matches()) {
      stack=new Item(Material.valueOf(m[2].group(1).toUpperCase()));
      stack.setDurability(Short.valueOf(m[2].group(2)));
      return stack.setId(stack.getType().name());
    }
 else     if (m[3].matches()) {
      stack=new Item(Material.valueOf(m[3].group(1).toUpperCase()));
      stack.setId(stack.getType().name());
      return stack;
    }
  }
 catch (  Exception e) {
  }
  m[0]=getItemPtrn[5].matcher(string);
  if (m[0].matches()) {
    Script itemScript=Script.valueOf(m[0].group(1));
    if (itemScript != null && itemScript.getType().equalsIgnoreCase(""String_Node_Str"")) {
      if (itemScript.getContents().contains(""String_Node_Str""))       stack=Item.valueOf(itemScript.getContents().getString(""String_Node_Str""));
      if (stack == null)       return null;
      ItemMeta meta=stack.getItemMeta();
      if (itemScript.getContents().contains(""String_Node_Str""))       meta.setDisplayName(itemScript.getContents().getString(""String_Node_Str""));
      if (itemScript.getContents().contains(""String_Node_Str""))       meta.setLore(itemScript.getContents().getStringList(""String_Node_Str""));
      stack.setItemMeta(meta);
      if (itemScript.getContents().contains(""String_Node_Str"")) {
        for (        String enchantment : itemScript.getContents().getStringList(""String_Node_Str"")) {
          try {
            int level=1;
            if (enchantment.split(""String_Node_Str"").length > 1) {
              level=Integer.valueOf(enchantment.split(""String_Node_Str"")[1]);
              enchantment=enchantment.split(""String_Node_Str"")[0];
            }
            Enchantment ench=Enchantment.getByName(enchantment.toUpperCase());
            stack.addEnchantment(ench,level);
          }
 catch (          Exception e) {
            continue;
          }
        }
      }
      if (itemScript.getContents().contains(""String_Node_Str""))       LeatherColorer.colorArmor(stack,itemScript.getContents().getString(""String_Node_Str""));
      stack.setId(itemScript.getName());
      return stack;
    }
  }
  dB.echoError(""String_Node_Str"");
  return stack;
}",0.9996645420999664
10488,"/** 
 * Gets a Item Object from a string form.
 * @param string  the string or dScript argument String
 * @return  an Item, or null if incorrectly formatted
 */
public static Item valueOf(String string){
  if (string == null)   return null;
  Matcher[] m=new Matcher[4];
  Item stack=null;
  m[0]=getItemPtrn[4].matcher(string);
  if (m[0].matches()) {
  }
  m[0]=getItemPtrn[0].matcher(string);
  m[1]=getItemPtrn[1].matcher(string);
  m[2]=getItemPtrn[2].matcher(string);
  m[3]=getItemPtrn[3].matcher(string);
  try {
    if (m[0].matches()) {
      stack=new Item(Integer.valueOf(m[0].group(1)));
      stack.setDurability(Short.valueOf(m[0].group(2)));
      return stack.setId(stack.getType().name());
    }
 else     if (m[1].matches()) {
      return new Item(Integer.valueOf(m[1].group(1))).setId(stack.getType().name());
    }
 else     if (m[2].matches()) {
      stack=new Item(Material.valueOf(m[2].group(1).toUpperCase()));
      stack.setDurability(Short.valueOf(m[2].group(2)));
      return stack.setId(stack.getType().name());
    }
 else     if (m[3].matches()) {
      return new Item(Material.valueOf(m[3].group(1).toUpperCase())).setId(stack.getType().name());
    }
  }
 catch (  Exception e) {
  }
  m[0]=getItemPtrn[5].matcher(string);
  if (m[3].matches()) {
    Script itemScript=Script.valueOf(m[3].group(1));
    if (itemScript != null && itemScript.getType().equalsIgnoreCase(""String_Node_Str"")) {
      if (itemScript.getContents().contains(""String_Node_Str""))       stack=Item.valueOf(itemScript.getContents().getString(""String_Node_Str""));
      if (stack == null)       return null;
      ItemMeta meta=stack.getItemMeta();
      if (itemScript.getContents().contains(""String_Node_Str""))       meta.setDisplayName(itemScript.getContents().getString(""String_Node_Str""));
      if (itemScript.getContents().contains(""String_Node_Str""))       meta.setLore(itemScript.getContents().getStringList(""String_Node_Str""));
      stack.setItemMeta(meta);
      if (itemScript.getContents().contains(""String_Node_Str"")) {
        for (        String enchantment : itemScript.getContents().getStringList(""String_Node_Str"")) {
          try {
            int level=1;
            if (enchantment.split(""String_Node_Str"").length > 1) {
              level=Integer.valueOf(enchantment.split(""String_Node_Str"")[1]);
              enchantment=enchantment.split(""String_Node_Str"")[0];
            }
            Enchantment ench=Enchantment.getByName(enchantment.toUpperCase());
            stack.addEnchantment(ench,level);
          }
 catch (          Exception e) {
            continue;
          }
        }
      }
      if (itemScript.getContents().contains(""String_Node_Str""))       LeatherColorer.colorArmor(stack,itemScript.getContents().getString(""String_Node_Str""));
      stack.setId(itemScript.getName());
      return stack;
    }
  }
  dB.echoError(""String_Node_Str"");
  return stack;
}","/** 
 * Gets a Item Object from a string form.
 * @param string  the string or dScript argument String
 * @return  an Item, or null if incorrectly formatted
 */
public static Item valueOf(String string){
  if (string == null)   return null;
  Matcher[] m=new Matcher[4];
  Item stack=null;
  m[0]=getItemPtrn[4].matcher(string);
  if (m[0].matches()) {
  }
  m[0]=getItemPtrn[0].matcher(string);
  m[1]=getItemPtrn[1].matcher(string);
  m[2]=getItemPtrn[2].matcher(string);
  m[3]=getItemPtrn[3].matcher(string);
  try {
    if (m[0].matches()) {
      stack=new Item(Integer.valueOf(m[0].group(1)));
      stack.setDurability(Short.valueOf(m[0].group(2)));
      return stack.setId(stack.getType().name());
    }
 else     if (m[1].matches()) {
      stack=new Item(Integer.valueOf(m[1].group(1)));
      stack.setId(stack.getType().name());
      return stack;
    }
 else     if (m[2].matches()) {
      stack=new Item(Material.valueOf(m[2].group(1).toUpperCase()));
      stack.setDurability(Short.valueOf(m[2].group(2)));
      return stack.setId(stack.getType().name());
    }
 else     if (m[3].matches()) {
      stack=new Item(Material.valueOf(m[3].group(1).toUpperCase()));
      stack.setId(stack.getType().name());
      return stack;
    }
  }
 catch (  Exception e) {
  }
  m[0]=getItemPtrn[5].matcher(string);
  if (m[0].matches()) {
    Script itemScript=Script.valueOf(m[3].group(1));
    if (itemScript != null && itemScript.getType().equalsIgnoreCase(""String_Node_Str"")) {
      if (itemScript.getContents().contains(""String_Node_Str""))       stack=Item.valueOf(itemScript.getContents().getString(""String_Node_Str""));
      if (stack == null)       return null;
      ItemMeta meta=stack.getItemMeta();
      if (itemScript.getContents().contains(""String_Node_Str""))       meta.setDisplayName(itemScript.getContents().getString(""String_Node_Str""));
      if (itemScript.getContents().contains(""String_Node_Str""))       meta.setLore(itemScript.getContents().getStringList(""String_Node_Str""));
      stack.setItemMeta(meta);
      if (itemScript.getContents().contains(""String_Node_Str"")) {
        for (        String enchantment : itemScript.getContents().getStringList(""String_Node_Str"")) {
          try {
            int level=1;
            if (enchantment.split(""String_Node_Str"").length > 1) {
              level=Integer.valueOf(enchantment.split(""String_Node_Str"")[1]);
              enchantment=enchantment.split(""String_Node_Str"")[0];
            }
            Enchantment ench=Enchantment.getByName(enchantment.toUpperCase());
            stack.addEnchantment(ench,level);
          }
 catch (          Exception e) {
            continue;
          }
        }
      }
      if (itemScript.getContents().contains(""String_Node_Str""))       LeatherColorer.colorArmor(stack,itemScript.getContents().getString(""String_Node_Str""));
      stack.setId(itemScript.getName());
      return stack;
    }
  }
  dB.echoError(""String_Node_Str"");
  return stack;
}",0.9840623940318752
10489,"/** 
 * <p>Used to determine if a dScript argument string is a valid Bukkit ItemStack or a currently saved instance from the   {@link NewCommand} using 'NEWITEMSTACK'.</p> <p>Accounts for several formats, including <tt>ItemId</tt>, <tt>ItemId:Data</tt>, <tt>Material</tt>, <tt>Material:Data</tt>, and finally <tt>ITEMSTACK.item_name</tt>.</p> <b>Examples:</b> <ol> <tt>'ITEM:DIAMOND'</tt> will return 'true'.<br> <tt>'ITEM:1'</tt> will return 'true'.<br> <tt>'100:3'</tt> will return 'false'.<br> <tt>'ITEM:ITEMSTACK.enchantedItem'</tt> will return 'true'.<br> </ol>
 * @param arg the dScript argument string
 * @return true if matches, false otherwise
 */
public static boolean matchesItem(String arg){
  final Pattern[] matchesItemPtrn={Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)};
  Matcher m;
  m=matchesItemPtrn[3].matcher(arg);
  if (m.matches())   return true;
  m=matchesItemPtrn[0].matcher(arg);
  if (m.matches())   return true;
  m=matchesItemPtrn[1].matcher(arg);
  if (m.matches())   return true;
  m=matchesItemPtrn[2].matcher(arg);
  if (m.matches()) {
    for (    Material mat : Material.values())     if (mat.toString().equalsIgnoreCase(m.group(1)))     return true;
  }
  if (arg.toUpperCase().startsWith(""String_Node_Str""))   dB.echoError(""String_Node_Str"" + arg + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  return false;
}","/** 
 * <p>Used to determine if a dScript argument string is a valid Bukkit ItemStack or a currently saved instance from the   {@link NewCommand} using 'NEWITEMSTACK'.</p> <p>Accounts for several formats, including <tt>ItemId</tt>, <tt>ItemId:Data</tt>, <tt>Material</tt>, <tt>Material:Data</tt>, and finally <tt>ITEMSTACK.item_name</tt>.</p> <b>Examples:</b> <ol> <tt>'ITEM:DIAMOND'</tt> will return 'true'.<br> <tt>'ITEM:1'</tt> will return 'true'.<br> <tt>'100:3'</tt> will return 'false'.<br> <tt>'ITEM:ITEMSTACK.enchantedItem'</tt> will return 'true'.<br> </ol>
 * @param arg the dScript argument string
 * @return true if matches, false otherwise
 */
public static boolean matchesItem(String arg){
  if (arg.toUpperCase().startsWith(""String_Node_Str""))   return true;
  return false;
}",0.6643952299829642
10490,"private void doElse(ScriptEntry scriptEntry){
  String elseCommand=null;
  if (scriptEntry.getObject(""String_Node_Str"") != null)   elseCommand=((String)scriptEntry.getObject(""String_Node_Str"")).toUpperCase();
  String[] elseArgs=null;
  if (scriptEntry.getObject(""String_Node_Str"") != null)   elseArgs=Arrays.copyOf((Object[])scriptEntry.getObject(""String_Node_Str""),((Object[])scriptEntry.getObject(""String_Node_Str"")).length,String[].class);
  if (elseCommand == null)   return;
  try {
    denizen.getScriptEngine().getScriptExecuter().execute(new ScriptEntry(elseCommand,elseArgs,scriptEntry.getPlayer(),scriptEntry.getNPC(),scriptEntry.getScript().getName(),scriptEntry.getStep()));
  }
 catch (  ScriptEntryCreationException e) {
    dB.echoError(""String_Node_Str"");
    if (dB.showStackTraces) {
      dB.echoDebug(""String_Node_Str"");
      e.printStackTrace();
    }
 else     dB.echoDebug(""String_Node_Str"");
  }
}","private void doElse(ScriptEntry scriptEntry){
  String elseCommand=null;
  if (scriptEntry.getObject(""String_Node_Str"") != null)   elseCommand=((String)scriptEntry.getObject(""String_Node_Str"")).toUpperCase();
  String[] elseArgs=null;
  if (scriptEntry.getObject(""String_Node_Str"") != null)   elseArgs=Arrays.copyOf((Object[])scriptEntry.getObject(""String_Node_Str""),((Object[])scriptEntry.getObject(""String_Node_Str"")).length,String[].class);
  if (elseCommand == null)   return;
  try {
    denizen.getScriptEngine().getScriptExecuter().execute(new ScriptEntry(elseCommand,elseArgs,scriptEntry.getPlayer(),scriptEntry.getNPC(),scriptEntry.getScript().getName(),scriptEntry.getStep()).addObject(""String_Node_Str"",scriptEntry.getObject(""String_Node_Str"")));
  }
 catch (  ScriptEntryCreationException e) {
    dB.echoError(""String_Node_Str"");
    if (dB.showStackTraces) {
      dB.echoDebug(""String_Node_Str"");
      e.printStackTrace();
    }
 else     dB.echoDebug(""String_Node_Str"");
  }
}",0.963465553235908
10491,"private void doCommand(ScriptEntry scriptEntry){
  String outcomeCommand=((String)scriptEntry.getObject(""String_Node_Str"")).toUpperCase();
  String[] outcomeArgs=Arrays.copyOf((Object[])scriptEntry.getObject(""String_Node_Str""),((Object[])scriptEntry.getObject(""String_Node_Str"")).length,String[].class);
  try {
    denizen.getScriptEngine().getScriptExecuter().execute(new ScriptEntry(outcomeCommand,outcomeArgs,scriptEntry.getPlayer(),scriptEntry.getNPC(),scriptEntry.getScript().getName(),scriptEntry.getStep()));
  }
 catch (  ScriptEntryCreationException e) {
    dB.echoError(""String_Node_Str"");
    if (dB.showStackTraces) {
      dB.echoDebug(""String_Node_Str"");
      e.printStackTrace();
    }
 else     dB.echoDebug(""String_Node_Str"");
  }
}","private void doCommand(ScriptEntry scriptEntry){
  String outcomeCommand=((String)scriptEntry.getObject(""String_Node_Str"")).toUpperCase();
  String[] outcomeArgs=Arrays.copyOf((Object[])scriptEntry.getObject(""String_Node_Str""),((Object[])scriptEntry.getObject(""String_Node_Str"")).length,String[].class);
  try {
    denizen.getScriptEngine().getScriptExecuter().execute(new ScriptEntry(outcomeCommand,outcomeArgs,scriptEntry.getPlayer(),scriptEntry.getNPC(),scriptEntry.getScript().getName(),scriptEntry.getStep()).addObject(""String_Node_Str"",scriptEntry.getObject(""String_Node_Str"")));
  }
 catch (  ScriptEntryCreationException e) {
    dB.echoError(""String_Node_Str"");
    if (dB.showStackTraces) {
      dB.echoDebug(""String_Node_Str"");
      e.printStackTrace();
    }
 else     dB.echoDebug(""String_Node_Str"");
  }
}",0.9555273189326556
10492,"public Map<String,AbstractListener> getListenersFor(Player player){
  if (listeners.containsKey(player.getName())) {
    Map<String,AbstractListener> playerListeners=listeners.get(player.getName());
    return playerListeners;
  }
  return null;
}","public Map<String,AbstractListener> getListenersFor(OfflinePlayer player){
  if (listeners.containsKey(player.getName())) {
    Map<String,AbstractListener> playerListeners=listeners.get(player.getName());
    return playerListeners;
  }
  return null;
}",0.9860279441117764
10493,"public AbstractListener getListenerFor(Player player,String listenerId){
  if (listeners.containsKey(player.getName())) {
    Map<String,AbstractListener> playerListeners=listeners.get(player.getName());
    if (playerListeners.containsKey(listenerId.toLowerCase()))     return playerListeners.get(listenerId.toLowerCase());
  }
  return null;
}","public AbstractListener getListenerFor(OfflinePlayer player,String listenerId){
  if (listeners.containsKey(player.getName())) {
    Map<String,AbstractListener> playerListeners=listeners.get(player.getName());
    if (playerListeners.containsKey(listenerId.toLowerCase()))     return playerListeners.get(listenerId.toLowerCase());
  }
  return null;
}",0.9899569583931134
10494,"public void deconstructPlayer(OfflinePlayer player){
  denizen.getSaves().set(""String_Node_Str"" + player.getName(),null);
  if (!listeners.containsKey(player.getName())) {
    return;
  }
  for (  Map.Entry<String,AbstractListener> entry : getListenersFor((Player)player).entrySet()) {
    dB.log(player.getName() + ""String_Node_Str"" + entry.getKey()+ ""String_Node_Str"");
    entry.getValue().save();
  }
  listeners.remove(player);
}","public void deconstructPlayer(OfflinePlayer player){
  denizen.getSaves().set(""String_Node_Str"" + player.getName(),null);
  if (!listeners.containsKey(player.getName())) {
    return;
  }
  for (  Map.Entry<String,AbstractListener> entry : getListenersFor((OfflinePlayer)player).entrySet()) {
    dB.log(player.getName() + ""String_Node_Str"" + entry.getKey()+ ""String_Node_Str"");
    entry.getValue().save();
  }
  listeners.remove(player);
}",0.992
10495,"/** 
 * Checks a RequirementsContext with Requirements from the RequirementsRegistry.
 * @param context
 * @return true if the list meets the requirements and context set
 */
public boolean check(RequirementsContext context){
  if (context.mode.getMode() == RequirementsMode.Mode.NONE || context.list.isEmpty()) {
    return true;
  }
  dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"",context.scriptName);
  dB.echoDebug(""String_Node_Str"",context.mode.toString());
  boolean firstReqMet=false;
  boolean firstReqChecked=false;
  int numberMet=0;
  for (  String reqEntry : context.list) {
    boolean negativeRequirement=false;
    if (reqEntry.startsWith(""String_Node_Str"")) {
      negativeRequirement=true;
      reqEntry=reqEntry.substring(1);
    }
    if (plugin.getRequirementRegistry().list().containsKey(reqEntry.split(""String_Node_Str"")[0])) {
      AbstractRequirement requirement=plugin.getRequirementRegistry().get(reqEntry.split(""String_Node_Str"")[0]);
      String[] arguments=null;
      if (reqEntry.split(""String_Node_Str"").length > 1) {
        arguments=plugin.getScriptEngine().getScriptBuilder().buildArgs(reqEntry.split(""String_Node_Str"",2)[1]);
      }
      List<String> argumentList=new ArrayList<String>();
      if (arguments != null) {
        argumentList=plugin.tagManager().fillArguments(arguments,context.player,plugin.getNPCRegistry().getDenizen(context.npc));
      }
      try {
        int numArguments=arguments == null ? 0 : arguments.length;
        if ((numArguments == 0 && requirement.requirementOptions.REQUIRED_ARGS > 0) || numArguments < requirement.requirementOptions.REQUIRED_ARGS) {
          throw new RequirementCheckException(""String_Node_Str"");
        }
        if (requirement.check(context,argumentList) != negativeRequirement) {
          if (!firstReqChecked) {
            firstReqMet=true;
            firstReqChecked=true;
          }
          numberMet++;
          dB.echoApproval(""String_Node_Str"" + requirement.getName() + ""String_Node_Str""+ ""String_Node_Str"");
        }
 else {
          if (!firstReqChecked) {
            firstReqMet=false;
            firstReqChecked=true;
          }
          dB.echoApproval(""String_Node_Str"" + requirement.getName() + ""String_Node_Str""+ ""String_Node_Str"");
        }
      }
 catch (      Throwable e) {
        if (e instanceof RequirementCheckException) {
          dB.echoError(""String_Node_Str"");
          dB.echoError(""String_Node_Str"" + requirement.getUsageHint());
        }
 else {
          dB.echoError(""String_Node_Str"" + requirement.getName() + ""String_Node_Str"");
          if (!dB.showStackTraces)           dB.echoError(""String_Node_Str"");
 else           e.printStackTrace();
        }
      }
    }
 else {
      dB.echoError(""String_Node_Str"" + reqEntry.split(""String_Node_Str"")[0] + ""String_Node_Str"");
    }
  }
  if (context.mode.getMode() == RequirementsMode.Mode.ALL && numberMet == context.list.size())   return true;
 else   if (context.mode.getMode() == RequirementsMode.Mode.ANY_NUM) {
    if (numberMet >= context.mode.modeInt)     return true;
 else     return false;
  }
 else   if (context.mode.getMode() == RequirementsMode.Mode.FIRST_AND_ANY_NUM) {
    if (firstReqMet) {
      if (numberMet > context.mode.modeInt)       return true;
 else       return false;
    }
 else     return false;
  }
  return false;
}","/** 
 * Checks a RequirementsContext with Requirements from the RequirementsRegistry.
 * @param context
 * @return true if the list meets the requirements and context set
 */
public boolean check(RequirementsContext context){
  if (context.mode.getMode() == RequirementsMode.Mode.NONE || context.list.isEmpty()) {
    return true;
  }
  dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"",context.scriptName);
  dB.echoDebug(""String_Node_Str"",context.mode.getMode().toString());
  boolean firstReqMet=false;
  boolean firstReqChecked=false;
  int numberMet=0;
  for (  String reqEntry : context.list) {
    boolean negativeRequirement=false;
    if (reqEntry.startsWith(""String_Node_Str"")) {
      negativeRequirement=true;
      reqEntry=reqEntry.substring(1);
    }
    if (plugin.getRequirementRegistry().list().containsKey(reqEntry.split(""String_Node_Str"")[0])) {
      AbstractRequirement requirement=plugin.getRequirementRegistry().get(reqEntry.split(""String_Node_Str"")[0]);
      String[] arguments=null;
      if (reqEntry.split(""String_Node_Str"").length > 1) {
        arguments=plugin.getScriptEngine().getScriptBuilder().buildArgs(reqEntry.split(""String_Node_Str"",2)[1]);
      }
      List<String> argumentList=new ArrayList<String>();
      if (arguments != null) {
        argumentList=plugin.tagManager().fillArguments(arguments,context.player,plugin.getNPCRegistry().getDenizen(context.npc));
      }
      try {
        int numArguments=arguments == null ? 0 : arguments.length;
        if ((numArguments == 0 && requirement.requirementOptions.REQUIRED_ARGS > 0) || numArguments < requirement.requirementOptions.REQUIRED_ARGS) {
          throw new RequirementCheckException(""String_Node_Str"");
        }
        if (requirement.check(context,argumentList) != negativeRequirement) {
          if (!firstReqChecked) {
            firstReqMet=true;
            firstReqChecked=true;
          }
          numberMet++;
          dB.echoApproval(""String_Node_Str"" + requirement.getName() + ""String_Node_Str""+ ""String_Node_Str"");
        }
 else {
          if (!firstReqChecked) {
            firstReqMet=false;
            firstReqChecked=true;
          }
          dB.echoApproval(""String_Node_Str"" + requirement.getName() + ""String_Node_Str""+ ""String_Node_Str"");
        }
      }
 catch (      Throwable e) {
        if (e instanceof RequirementCheckException) {
          dB.echoError(""String_Node_Str"");
          dB.echoError(""String_Node_Str"" + requirement.getUsageHint());
        }
 else {
          dB.echoError(""String_Node_Str"" + requirement.getName() + ""String_Node_Str"");
          if (!dB.showStackTraces)           dB.echoError(""String_Node_Str"");
 else           e.printStackTrace();
        }
      }
    }
 else {
      dB.echoError(""String_Node_Str"" + reqEntry.split(""String_Node_Str"")[0] + ""String_Node_Str"");
    }
  }
  if (context.mode.getMode() == RequirementsMode.Mode.ALL && numberMet == context.list.size())   return true;
 else   if (context.mode.getMode() == RequirementsMode.Mode.ANY_NUM) {
    if (numberMet >= context.mode.modeInt)     return true;
 else     return false;
  }
 else   if (context.mode.getMode() == RequirementsMode.Mode.FIRST_AND_ANY_NUM) {
    if (firstReqMet) {
      if (numberMet > context.mode.modeInt)       return true;
 else       return false;
    }
 else     return false;
  }
  return false;
}",0.9985127900059488
10496,"@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  for (  String arg : args) {
    if (aH.matchesQuantity(arg)) {
      quantity=aH.getDoubleFrom(arg);
      dB.echoDebug(""String_Node_Str"" + quantity);
    }
 else     throw new RequirementCheckException(Messages.ERROR_UNKNOWN_ARGUMENT,arg);
  }
  try {
    RegisteredServiceProvider<Economy> provider=Bukkit.getServicesManager().getRegistration(Economy.class);
    if (provider != null && provider.getProvider() != null) {
      Economy economy=provider.getProvider();
      balance=economy.getBalance(context.getPlayer().getName());
      dB.echoDebug(""String_Node_Str"" + balance);
    }
  }
 catch (  NoClassDefFoundError e) {
    dB.echoError(""String_Node_Str"");
  }
  if (balance >= quantity)   outcome=true;
 else   outcome=false;
  return outcome;
}","@Override public boolean check(RequirementsContext context,List<String> args) throws RequirementCheckException {
  for (  String arg : args) {
    if (aH.matchesQuantity(arg) || aH.matchesInteger(arg) || aH.matchesDouble(arg)) {
      quantity=aH.getDoubleFrom(arg);
      dB.echoDebug(""String_Node_Str"" + quantity);
    }
 else     throw new RequirementCheckException(Messages.ERROR_UNKNOWN_ARGUMENT,arg);
  }
  try {
    RegisteredServiceProvider<Economy> provider=Bukkit.getServicesManager().getRegistration(Economy.class);
    if (provider != null && provider.getProvider() != null) {
      Economy economy=provider.getProvider();
      balance=economy.getBalance(context.getPlayer().getName());
      dB.echoDebug(""String_Node_Str"" + balance);
    }
  }
 catch (  NoClassDefFoundError e) {
    dB.echoError(""String_Node_Str"");
  }
  if (balance >= quantity)   outcome=true;
 else   outcome=false;
  return outcome;
}",0.9715242881072028
10497,"public boolean hasAssignment(){
  if (!getCitizen().hasTrait(AssignmentTrait.class))   return false;
 else   return getCitizen().getTrait(AssignmentTrait.class).hasAssignment();
}","public boolean hasAssignment(){
  if (!getCitizen().hasTrait(AssignmentTrait.class))   return false;
  return getCitizen().getTrait(AssignmentTrait.class).hasAssignment();
}",0.9829545454545454
10498,"public void doAction(String actionName,DenizenNPC npc,Player player,String assignment){
  List<String> script=denizen.getScriptEngine().getScriptHelper().getStringListIgnoreCase(assignment + ""String_Node_Str"" + actionName);
  if (script.isEmpty())   return;
  dB.echoDebug(DebugElement.Header,""String_Node_Str"" + actionName.toUpperCase() + ""String_Node_Str""+ npc.toString());
  List<ScriptEntry> scriptEntries=denizen.getScriptEngine().getScriptBuilder().buildScriptEntries(player,npc,script,null,null);
  for (  ScriptEntry scriptEntry : scriptEntries)   denizen.getScriptEngine().getScriptExecuter().execute(scriptEntry);
}","public void doAction(String actionName,DenizenNPC npc,Player player,String assignment){
  dB.echoDebug(""String_Node_Str"" + actionName + ""String_Node_Str""+ assignment);
  List<String> script=denizen.getScriptEngine().getScriptHelper().getStringListIgnoreCase(assignment + ""String_Node_Str"" + actionName);
  if (script.isEmpty())   return;
  dB.echoDebug(DebugElement.Header,""String_Node_Str"" + actionName.toUpperCase() + ""String_Node_Str""+ npc.toString());
  List<ScriptEntry> scriptEntries=denizen.getScriptEngine().getScriptBuilder().buildScriptEntries(player,npc,script,null,null);
  for (  ScriptEntry scriptEntry : scriptEntries)   denizen.getScriptEngine().getScriptExecuter().execute(scriptEntry);
}",0.9398496240601504
10499,"private boolean checkAssignment(String assignment){
  if (assignment.equals(""String_Node_Str""))   return false;
  if (DenizenAPI.getCurrentInstance().getScriptEngine().getScriptHelper().getStringIgnoreCase(assignment + ""String_Node_Str"",""String_Node_Str"") != null && DenizenAPI.getCurrentInstance().getScriptEngine().getScriptHelper().getStringIgnoreCase(assignment + ""String_Node_Str"",""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))   return true;
 else   return false;
}","private boolean checkAssignment(String assignment){
  if (assignment == null || assignment.equals(""String_Node_Str""))   return false;
  if (DenizenAPI.getCurrentInstance().getScriptEngine().getScriptHelper().getStringIgnoreCase(assignment + ""String_Node_Str"") != null && DenizenAPI.getCurrentInstance().getScriptEngine().getScriptHelper().getStringIgnoreCase(assignment + ""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))   return true;
 else   return false;
}",0.9386892177589852
10500,"private Map<String,String> rebuildAssignmentConstants(){
  if (!npc.hasTrait(AssignmentTrait.class)) {
    assignmentConstants.clear();
    return assignmentConstants;
  }
  assignment=npc.getTrait(AssignmentTrait.class).getAssignment();
  assignmentConstants.clear();
  if (DenizenAPI.getCurrentInstance().getScripts().contains(assignment.toUpperCase() + ""String_Node_Str""))   for (  String constant : DenizenAPI.getCurrentInstance().getScripts().getConfigurationSection(assignment.toUpperCase() + ""String_Node_Str"").getKeys(false))   assignmentConstants.put(constant.toLowerCase(),DenizenAPI.getCurrentInstance().getScripts().getString(assignment.toUpperCase() + ""String_Node_Str"" + constant.toUpperCase(),""String_Node_Str""));
  return assignmentConstants;
}","private Map<String,String> rebuildAssignmentConstants(){
  if (!npc.hasTrait(AssignmentTrait.class) || !npc.getTrait(AssignmentTrait.class).hasAssignment()) {
    assignmentConstants.clear();
    return assignmentConstants;
  }
  assignment=npc.getTrait(AssignmentTrait.class).getAssignment();
  assignmentConstants.clear();
  if (DenizenAPI.getCurrentInstance().getScripts().contains(assignment.toUpperCase() + ""String_Node_Str""))   for (  String constant : DenizenAPI.getCurrentInstance().getScripts().getConfigurationSection(assignment.toUpperCase() + ""String_Node_Str"").getKeys(false))   assignmentConstants.put(constant.toLowerCase(),DenizenAPI.getCurrentInstance().getScripts().getString(assignment.toUpperCase() + ""String_Node_Str"" + constant.toUpperCase(),""String_Node_Str""));
  return assignmentConstants;
}",0.964467005076142
10501,"public boolean isEnabled(String triggerName){
  if (enabled.containsKey(triggerName.toUpperCase()))   return enabled.get(triggerName.toUpperCase());
 else   return false;
}","public boolean isEnabled(String triggerName){
  if (!DenizenAPI.getDenizenNPC(npc).hasAssignment())   return false;
  if (enabled.containsKey(triggerName.toUpperCase()))   return enabled.get(triggerName.toUpperCase());
 else   return false;
}",0.8309178743961353
10502,"public void setLocalRadius(String triggerName,int value){
  if (radius.containsKey(triggerName.toUpperCase()))   radius.put(triggerName,value);
}","public void setLocalRadius(String triggerName,int value){
  if (triggerName == null)   return;
  if (radius.containsKey(triggerName.toUpperCase()))   radius.put(triggerName,value);
}",0.8868501529051988
10503,"public List<String> getScriptContents(String path){
  List<String> contents=new ArrayList<String>();
  path=path.toUpperCase().replace(""String_Node_Str"",""String_Node_Str"");
  if (denizen.getScripts().contains(path.toUpperCase()))   contents=denizen.getScripts().getStringList(path.toUpperCase());
  if (contents.isEmpty()) {
    dB.echoError(""String_Node_Str"");
    String spacing=""String_Node_Str"";
    for (    String node : path.split(""String_Node_Str"")) {
      dB.echoDebug(spacing + node);
      spacing=spacing + ""String_Node_Str"";
    }
    dB.echoDebug(spacing + ""String_Node_Str"");
    dB.echoError(""String_Node_Str"");
  }
  return contents;
}","public List<String> getScriptContents(String path){
  List<String> contents=new ArrayList<String>();
  path=path.toUpperCase().replace(""String_Node_Str"",""String_Node_Str"");
  if (denizen.getScripts().contains(path.toUpperCase()))   contents=denizen.getScripts().getStringList(path.toUpperCase());
  if (contents.isEmpty()) {
    if (path.toUpperCase().contains(""String_Node_Str"")) {
      String[] context=path.split(""String_Node_Str"");
      if (context.length >= 4)       dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ context[3]+ ""String_Node_Str""+ context[0].toUpperCase()+ ""String_Node_Str""+ context[2].toUpperCase()+ ""String_Node_Str"");
      return contents;
    }
    dB.echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
    String spacing=""String_Node_Str"";
    for (    String node : path.split(""String_Node_Str"")) {
      dB.echoDebug(spacing + node + ""String_Node_Str"");
      spacing=spacing + ""String_Node_Str"";
    }
    dB.echoDebug(spacing.substring(0,spacing.length() - 1) + ""String_Node_Str"");
    dB.echoDebug(""String_Node_Str"");
  }
  return contents;
}",0.4379157427937916
10504,"private void doElse(ScriptEntry scriptEntry){
  String elseCommand=((String)scriptEntry.getObject(""String_Node_Str"")).toUpperCase();
  String[] elseArgs=Arrays.copyOf((Object[])scriptEntry.getObject(""String_Node_Str""),((Object[])scriptEntry.getObject(""String_Node_Str"")).length,String[].class);
  try {
    denizen.getScriptEngine().getScriptExecuter().execute(new ScriptEntry(elseCommand,elseArgs,scriptEntry.getPlayer(),scriptEntry.getNPC(),scriptEntry.getScript(),scriptEntry.getStep()));
  }
 catch (  ScriptEntryCreationException e) {
    dB.echoError(""String_Node_Str"");
    if (dB.showStackTraces) {
      dB.echoDebug(""String_Node_Str"");
      e.printStackTrace();
    }
 else     dB.echoDebug(""String_Node_Str"");
  }
}","private void doElse(ScriptEntry scriptEntry){
  String elseCommand=null;
  if (scriptEntry.getObject(""String_Node_Str"") != null)   elseCommand=((String)scriptEntry.getObject(""String_Node_Str"")).toUpperCase();
  String[] elseArgs=null;
  if (scriptEntry.getObject(""String_Node_Str"") != null)   elseArgs=Arrays.copyOf((Object[])scriptEntry.getObject(""String_Node_Str""),((Object[])scriptEntry.getObject(""String_Node_Str"")).length,String[].class);
  if (elseCommand == null)   return;
  try {
    denizen.getScriptEngine().getScriptExecuter().execute(new ScriptEntry(elseCommand,elseArgs,scriptEntry.getPlayer(),scriptEntry.getNPC(),scriptEntry.getScript(),scriptEntry.getStep()));
  }
 catch (  ScriptEntryCreationException e) {
    dB.echoError(""String_Node_Str"");
    if (dB.showStackTraces) {
      dB.echoDebug(""String_Node_Str"");
      e.printStackTrace();
    }
 else     dB.echoDebug(""String_Node_Str"");
  }
}",0.8121951219512196
10505,"public boolean parse(DenizenNPC npc,Player player,String script){
  if (npc == null || player == null || script == null)   return false;
  dB.echoDebug(DebugElement.Header,""String_Node_Str"" + name + ""String_Node_Str""+ npc.getName()+ ""String_Node_Str""+ player.getName());
  dB.echoDebug(""String_Node_Str"");
  String theStep=sH.getCurrentStep(player,script);
  List<String> theScript=sH.getScriptContents(sH.getTriggerScriptPath(script,theStep,name) + sH.scriptKey);
  sB.queueScriptEntries(player,sB.buildScriptEntries(player,npc,theScript,script,theStep),QueueType.PLAYER);
  return true;
}","public boolean parse(DenizenNPC npc,Player player,String script){
  if (npc == null || player == null || script == null)   return false;
  dB.echoDebug(DebugElement.Header,""String_Node_Str"" + name + ""String_Node_Str""+ npc.getName()+ ""String_Node_Str""+ player.getName());
  String theStep=sH.getCurrentStep(player,script);
  List<String> theScript=sH.getScriptContents(sH.getTriggerScriptPath(script,theStep,name) + sH.scriptKey);
  if (theScript.isEmpty())   return false;
  sB.queueScriptEntries(player,sB.buildScriptEntries(player,npc,theScript,script,theStep),QueueType.PLAYER);
  return true;
}",0.9343434343434344
10506,"@Override public void registerCoreMembers(){
  new ClickTrigger().activate().as(""String_Node_Str"").withOptions(true,2.0,CooldownType.PLAYER);
  new DamageTrigger().activate().as(""String_Node_Str"").withOptions(false,0.5,CooldownType.NPC);
  new ChatTrigger().activate().as(""String_Node_Str"").withOptions(true,2.0,CooldownType.PLAYER);
  new ProximityTrigger().activate().as(""String_Node_Str"").withOptions(true,1.0,CooldownType.PLAYER);
  dB.echoApproval(""String_Node_Str"" + instances.keySet().toString());
}","@Override public void registerCoreMembers(){
  new ClickTrigger().activate().as(""String_Node_Str"").withOptions(true,2.0,CooldownType.PLAYER);
  new DamageTrigger().activate().as(""String_Node_Str"").withOptions(false,0.5,CooldownType.NPC);
  new ChatTrigger().activate().as(""String_Node_Str"").withOptions(true,2.0,CooldownType.PLAYER);
  new ProximityTrigger().activate().as(""String_Node_Str"").withOptions(true,5.0,5,CooldownType.PLAYER);
  dB.echoApproval(""String_Node_Str"" + instances.keySet().toString());
}",0.9960552268244576
10507,"@EventHandler public void clickTrigger(NPCRightClickEvent event){
  if (!event.getNPC().hasTrait(TriggerTrait.class))   return;
  if (!event.getNPC().getTrait(TriggerTrait.class).isEnabled(name))   return;
  if (!event.getNPC().getTrait(TriggerTrait.class).trigger(this,event.getClicker()))   return;
  String script=sH.getInteractScript(event.getNPC(),event.getClicker(),this.getClass());
  event.getNPC().getTrait(TriggerTrait.class).getRadius(name);
  if (!parse(denizen.getNPCRegistry().getDenizen(event.getNPC()),event.getClicker(),script))   denizen.getNPCRegistry().getDenizen(event.getNPC()).action(""String_Node_Str"",event.getClicker());
}","@EventHandler public void clickTrigger(NPCRightClickEvent event){
  if (!event.getNPC().hasTrait(TriggerTrait.class))   return;
  if (!event.getNPC().getTrait(TriggerTrait.class).isEnabled(name))   return;
  dB.echoDebug(""String_Node_Str"");
  if (!event.getNPC().getTrait(TriggerTrait.class).trigger(this,event.getClicker()))   return;
  dB.echoDebug(""String_Node_Str"");
  String script=sH.getInteractScript(event.getNPC(),event.getClicker(),this.getClass());
  if (!parse(denizen.getNPCRegistry().getDenizen(event.getNPC()),event.getClicker(),script))   denizen.getNPCRegistry().getDenizen(event.getNPC()).action(""String_Node_Str"",event.getClicker());
}",0.897770945426595
10508,"@Override public boolean check(Player thePlayer,DenizenNPC theDenizen,String theScript,String[] arguments,Boolean negativeRequirement) throws RequirementMissingException {
  boolean outcome=false;
  String flagName=null;
  FlagType flagType=null;
  Double flagValue=null;
  String flagString=null;
  boolean exactly=false;
  boolean global=false;
  boolean denizen=false;
  boolean checkNumber=false;
  if (arguments == null)   throw new RequirementMissingException(""String_Node_Str"");
  for (  String thisArgument : arguments) {
    if (thisArgument.split(""String_Node_Str"").length == 2) {
      aH.echoDebug(""String_Node_Str"",thisArgument);
      if (thisArgument.split(""String_Node_Str"")[1].matches(""String_Node_Str"") || thisArgument.split(""String_Node_Str"")[1].matches(""String_Node_Str"")) {
        flagType=FlagType.INTEGER;
        flagName=thisArgument.split(""String_Node_Str"")[0].toUpperCase();
        flagValue=Double.valueOf(thisArgument.split(""String_Node_Str"")[1]);
      }
 else {
        flagType=FlagType.STRING;
        flagName=thisArgument.split(""String_Node_Str"")[0].toUpperCase();
        flagString=thisArgument.split(""String_Node_Str"")[1];
      }
    }
 else     if (thisArgument.equalsIgnoreCase(""String_Node_Str"")) {
      aH.echoDebug(""String_Node_Str"",thisArgument);
      exactly=true;
    }
 else     if (thisArgument.equalsIgnoreCase(""String_Node_Str"")) {
      aH.echoDebug(""String_Node_Str"");
      global=true;
    }
 else     if (thisArgument.equals(""String_Node_Str"")) {
      aH.echoDebug(""String_Node_Str"");
      checkNumber=true;
    }
 else     if (thisArgument.equalsIgnoreCase(""String_Node_Str"")) {
      aH.echoDebug(""String_Node_Str"");
    }
 else     if (thisArgument.equalsIgnoreCase(""String_Node_Str"")) {
      aH.echoDebug(""String_Node_Str"");
      denizen=true;
    }
 else {
      aH.echoDebug(""String_Node_Str"",thisArgument);
      flagType=FlagType.BOOLEAN;
      flagName=thisArgument.toUpperCase();
    }
  }
  if (flagType != null) {
switch (flagType) {
case BOOLEAN:
      if (global) {
        if (checkNumber) {
          if (plugin.getSaves().getString(""String_Node_Str"" + flagName).toUpperCase().matches(""String_Node_Str"") || plugin.getSaves().getString(""String_Node_Str"" + flagName).toUpperCase().matches(""String_Node_Str"")) {
            aH.echoDebug(""String_Node_Str"",flagName);
            outcome=true;
          }
 else           aH.echoDebug(""String_Node_Str"",flagName);
        }
 else {
          if (plugin.getSaves().contains(""String_Node_Str"" + flagName)) {
            if (!plugin.getSaves().getString(""String_Node_Str"" + flagName).toUpperCase().equals(""String_Node_Str"")) {
              outcome=true;
              aH.echoDebug(""String_Node_Str"",flagName);
            }
 else             aH.echoDebug(""String_Node_Str"",flagName);
          }
 else           aH.echoDebug(""String_Node_Str"",flagName);
        }
      }
 else       if (denizen) {
        if (checkNumber) {
          if (plugin.getSaves().getString(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName).toUpperCase().matches(""String_Node_Str"") || plugin.getSaves().getString(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName).toUpperCase().matches(""String_Node_Str"")) {
            aH.echoDebug(""String_Node_Str"",flagName);
            outcome=true;
          }
 else           aH.echoDebug(""String_Node_Str"",flagName);
        }
 else {
          if (plugin.getSaves().contains(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName)) {
            if (!plugin.getSaves().getString(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName).toUpperCase().equals(""String_Node_Str"")) {
              outcome=true;
              aH.echoDebug(""String_Node_Str"",flagName);
            }
 else             aH.echoDebug(""String_Node_Str"",flagName);
          }
 else           aH.echoDebug(""String_Node_Str"",flagName);
        }
      }
 else {
        if (checkNumber) {
          if (plugin.getSaves().getString(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName).toUpperCase().matches(""String_Node_Str"") || plugin.getSaves().getString(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName).toUpperCase().matches(""String_Node_Str"")) {
            aH.echoDebug(""String_Node_Str"",flagName);
            outcome=true;
          }
 else           aH.echoDebug(""String_Node_Str"",flagName);
        }
 else {
          if (plugin.getSaves().contains(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName)) {
            if (!plugin.getSaves().getString(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName).toUpperCase().equals(""String_Node_Str"")) {
              outcome=true;
              aH.echoDebug(""String_Node_Str"",flagName);
            }
 else             aH.echoDebug(""String_Node_Str"",flagName);
          }
 else           aH.echoDebug(""String_Node_Str"",flagName);
        }
      }
    break;
case STRING:
  if (global) {
    if (plugin.getSaves().contains(""String_Node_Str"" + flagName)) {
      if (plugin.getSaves().getString(""String_Node_Str"" + flagName).toUpperCase().equalsIgnoreCase(flagString)) {
        outcome=true;
        aH.echoDebug(""String_Node_Str"",flagName);
      }
 else       aH.echoDebug(""String_Node_Str"",flagName);
      if (outcome == false)       aH.echoDebug(""String_Node_Str"" + flagValue + ""String_Node_Str""+ plugin.getSaves().getString(""String_Node_Str"" + flagName)+ ""String_Node_Str"");
    }
 else     aH.echoDebug(""String_Node_Str"",flagName);
  }
 else   if (denizen) {
    if (plugin.getSaves().contains(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName)) {
      if (plugin.getSaves().getString(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName).toUpperCase().equalsIgnoreCase(flagString)) {
        outcome=true;
        aH.echoDebug(""String_Node_Str"",flagName);
      }
 else       aH.echoDebug(""String_Node_Str"",flagName);
      if (outcome == false)       aH.echoDebug(""String_Node_Str"" + flagValue + ""String_Node_Str""+ plugin.getSaves().getString(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName)+ ""String_Node_Str"");
    }
 else     aH.echoDebug(""String_Node_Str"",flagName);
  }
 else {
    if (plugin.getSaves().contains(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName)) {
      if (plugin.getSaves().getString(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName).toUpperCase().equalsIgnoreCase(flagString)) {
        outcome=true;
        aH.echoDebug(""String_Node_Str"",flagName);
      }
 else       aH.echoDebug(""String_Node_Str"",flagName);
      if (outcome == false)       aH.echoDebug(""String_Node_Str"" + flagValue + ""String_Node_Str""+ plugin.getSaves().getString(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName)+ ""String_Node_Str"");
    }
 else     aH.echoDebug(""String_Node_Str"",flagName);
  }
break;
case INTEGER:
if (global) {
if (plugin.getSaves().contains(""String_Node_Str"" + flagName)) {
  try {
    if (exactly) {
      if (Double.valueOf(plugin.getSaves().getString(""String_Node_Str"" + flagName)) == (flagValue)) {
        outcome=true;
        aH.echoDebug(""String_Node_Str"",flagName);
      }
 else       aH.echoDebug(""String_Node_Str"",flagName);
    }
 else {
      if (Double.valueOf(plugin.getSaves().getString(""String_Node_Str"" + flagName)) >= (flagValue)) {
        outcome=true;
        aH.echoDebug(""String_Node_Str"",flagName);
      }
 else       aH.echoDebug(""String_Node_Str"",flagName);
    }
  }
 catch (  Exception e) {
    aH.echoDebug(""String_Node_Str"",flagName);
  }
  if (outcome == false)   aH.echoDebug(""String_Node_Str"" + flagValue + ""String_Node_Str""+ plugin.getSaves().getString(""String_Node_Str"" + flagName)+ ""String_Node_Str"");
}
 else aH.echoDebug(""String_Node_Str"",flagName);
}
 else if (denizen) {
if (plugin.getSaves().contains(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName)) {
  try {
    if (exactly) {
      if (Double.valueOf(plugin.getSaves().getString(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName)) == (flagValue)) {
        outcome=true;
        aH.echoDebug(""String_Node_Str"",flagName);
      }
 else       aH.echoDebug(""String_Node_Str"",flagName);
    }
 else {
      if (Double.valueOf(plugin.getSaves().getString(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName)) >= (flagValue)) {
        outcome=true;
        aH.echoDebug(""String_Node_Str"",flagName);
      }
 else       aH.echoDebug(""String_Node_Str"",flagName);
    }
  }
 catch (  Exception e) {
    aH.echoDebug(""String_Node_Str"",flagName);
  }
  if (outcome == false)   aH.echoDebug(""String_Node_Str"" + flagValue + ""String_Node_Str""+ plugin.getSaves().getString(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName)+ ""String_Node_Str"");
}
 else aH.echoDebug(""String_Node_Str"",flagName);
}
 else {
if (plugin.getSaves().contains(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName)) {
  try {
    if (exactly) {
      if (Double.valueOf(plugin.getSaves().getString(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName)) == (flagValue)) {
        outcome=true;
        aH.echoDebug(""String_Node_Str"",flagName);
      }
 else       aH.echoDebug(""String_Node_Str"",flagName);
    }
 else {
      if (Double.valueOf(plugin.getSaves().getString(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName)) >= (flagValue)) {
        outcome=true;
        aH.echoDebug(""String_Node_Str"",flagName);
      }
 else       aH.echoDebug(""String_Node_Str"",flagName);
    }
  }
 catch (  Exception e) {
    aH.echoDebug(""String_Node_Str"",flagName);
  }
  if (outcome == false)   aH.echoDebug(""String_Node_Str"" + flagValue + ""String_Node_Str""+ plugin.getSaves().getString(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName)+ ""String_Node_Str"");
}
 else aH.echoDebug(""String_Node_Str"",flagName);
}
break;
}
}
if (negativeRequirement != outcome) return true;
return false;
}","@Override public boolean check(Player thePlayer,DenizenNPC theDenizen,String theScript,String[] arguments,Boolean negativeRequirement) throws RequirementMissingException {
  boolean outcome=false;
  String flagName=null;
  FlagType flagType=null;
  Double flagValue=null;
  String flagString=null;
  boolean exactly=false;
  boolean global=false;
  boolean denizen=false;
  boolean checkNumber=false;
  if (arguments == null)   throw new RequirementMissingException(""String_Node_Str"");
  for (  String thisArgument : arguments) {
    if (thisArgument.split(""String_Node_Str"").length == 2) {
      aH.echoDebug(""String_Node_Str"",thisArgument);
      if (thisArgument.split(""String_Node_Str"")[1].matches(""String_Node_Str"") || thisArgument.split(""String_Node_Str"")[1].matches(""String_Node_Str"")) {
        flagType=FlagType.INTEGER;
        flagName=thisArgument.split(""String_Node_Str"")[0].toUpperCase();
        flagValue=Double.valueOf(thisArgument.split(""String_Node_Str"")[1]);
      }
 else {
        flagType=FlagType.STRING;
        flagName=thisArgument.split(""String_Node_Str"")[0].toUpperCase();
        flagString=thisArgument.split(""String_Node_Str"")[1];
      }
    }
 else     if (thisArgument.equalsIgnoreCase(""String_Node_Str"")) {
      aH.echoDebug(""String_Node_Str"",thisArgument);
      exactly=true;
    }
 else     if (thisArgument.equalsIgnoreCase(""String_Node_Str"")) {
      aH.echoDebug(""String_Node_Str"");
      global=true;
    }
 else     if (thisArgument.equals(""String_Node_Str"") || thisArgument.equals(""String_Node_Str"")) {
      aH.echoDebug(""String_Node_Str"");
      flagType=FlagType.BOOLEAN;
      checkNumber=true;
    }
 else     if (thisArgument.equalsIgnoreCase(""String_Node_Str"")) {
      aH.echoDebug(""String_Node_Str"");
    }
 else     if (thisArgument.equalsIgnoreCase(""String_Node_Str"")) {
      aH.echoDebug(""String_Node_Str"");
      denizen=true;
    }
 else {
      aH.echoDebug(""String_Node_Str"",thisArgument);
      flagType=FlagType.BOOLEAN;
      flagName=thisArgument.toUpperCase();
    }
  }
  if (flagType != null) {
switch (flagType) {
case BOOLEAN:
      if (global) {
        if (checkNumber) {
          if (plugin.getSaves().getString(""String_Node_Str"" + flagName).toUpperCase().matches(""String_Node_Str"") || plugin.getSaves().getString(""String_Node_Str"" + flagName).toUpperCase().matches(""String_Node_Str"")) {
            aH.echoDebug(""String_Node_Str"",flagName);
            outcome=true;
          }
 else           aH.echoDebug(""String_Node_Str"",flagName);
        }
 else {
          if (plugin.getSaves().contains(""String_Node_Str"" + flagName)) {
            if (!plugin.getSaves().getString(""String_Node_Str"" + flagName).toUpperCase().equals(""String_Node_Str"")) {
              outcome=true;
              aH.echoDebug(""String_Node_Str"",flagName);
            }
 else             aH.echoDebug(""String_Node_Str"",flagName);
          }
 else           aH.echoDebug(""String_Node_Str"",flagName);
        }
      }
 else       if (denizen) {
        if (checkNumber) {
          if (plugin.getSaves().getString(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName).toUpperCase().matches(""String_Node_Str"") || plugin.getSaves().getString(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName).toUpperCase().matches(""String_Node_Str"")) {
            aH.echoDebug(""String_Node_Str"",flagName);
            outcome=true;
          }
 else           aH.echoDebug(""String_Node_Str"",flagName);
        }
 else {
          if (plugin.getSaves().contains(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName)) {
            if (!plugin.getSaves().getString(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName).toUpperCase().equals(""String_Node_Str"")) {
              outcome=true;
              aH.echoDebug(""String_Node_Str"",flagName);
            }
 else             aH.echoDebug(""String_Node_Str"",flagName);
          }
 else           aH.echoDebug(""String_Node_Str"",flagName);
        }
      }
 else {
        if (checkNumber) {
          if (plugin.getSaves().getString(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName).toUpperCase().matches(""String_Node_Str"") || plugin.getSaves().getString(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName).toUpperCase().matches(""String_Node_Str"")) {
            aH.echoDebug(""String_Node_Str"",flagName);
            outcome=true;
          }
 else           aH.echoDebug(""String_Node_Str"",flagName);
        }
 else {
          if (plugin.getSaves().contains(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName)) {
            if (!plugin.getSaves().getString(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName).toUpperCase().equals(""String_Node_Str"")) {
              outcome=true;
              aH.echoDebug(""String_Node_Str"",flagName);
            }
 else             aH.echoDebug(""String_Node_Str"",flagName);
          }
 else           aH.echoDebug(""String_Node_Str"",flagName);
        }
      }
    break;
case STRING:
  if (global) {
    if (plugin.getSaves().contains(""String_Node_Str"" + flagName)) {
      if (plugin.getSaves().getString(""String_Node_Str"" + flagName).toUpperCase().equalsIgnoreCase(flagString)) {
        outcome=true;
        aH.echoDebug(""String_Node_Str"",flagName);
      }
 else       aH.echoDebug(""String_Node_Str"",flagName);
      if (outcome == false)       aH.echoDebug(""String_Node_Str"" + flagValue + ""String_Node_Str""+ plugin.getSaves().getString(""String_Node_Str"" + flagName)+ ""String_Node_Str"");
    }
 else     aH.echoDebug(""String_Node_Str"",flagName);
  }
 else   if (denizen) {
    if (plugin.getSaves().contains(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName)) {
      if (plugin.getSaves().getString(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName).toUpperCase().equalsIgnoreCase(flagString)) {
        outcome=true;
        aH.echoDebug(""String_Node_Str"",flagName);
      }
 else       aH.echoDebug(""String_Node_Str"",flagName);
      if (outcome == false)       aH.echoDebug(""String_Node_Str"" + flagValue + ""String_Node_Str""+ plugin.getSaves().getString(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName)+ ""String_Node_Str"");
    }
 else     aH.echoDebug(""String_Node_Str"",flagName);
  }
 else {
    if (plugin.getSaves().contains(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName)) {
      if (plugin.getSaves().getString(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName).toUpperCase().equalsIgnoreCase(flagString)) {
        outcome=true;
        aH.echoDebug(""String_Node_Str"",flagName);
      }
 else       aH.echoDebug(""String_Node_Str"",flagName);
      if (outcome == false)       aH.echoDebug(""String_Node_Str"" + flagValue + ""String_Node_Str""+ plugin.getSaves().getString(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName)+ ""String_Node_Str"");
    }
 else     aH.echoDebug(""String_Node_Str"",flagName);
  }
break;
case INTEGER:
if (global) {
if (plugin.getSaves().contains(""String_Node_Str"" + flagName)) {
  try {
    if (exactly) {
      if (Double.valueOf(plugin.getSaves().getString(""String_Node_Str"" + flagName)) == (flagValue)) {
        outcome=true;
        aH.echoDebug(""String_Node_Str"",flagName);
      }
 else       aH.echoDebug(""String_Node_Str"",flagName);
    }
 else {
      if (Double.valueOf(plugin.getSaves().getString(""String_Node_Str"" + flagName)) >= (flagValue)) {
        outcome=true;
        aH.echoDebug(""String_Node_Str"",flagName);
      }
 else       aH.echoDebug(""String_Node_Str"",flagName);
    }
  }
 catch (  Exception e) {
    aH.echoDebug(""String_Node_Str"",flagName);
  }
  if (outcome == false)   aH.echoDebug(""String_Node_Str"" + flagValue + ""String_Node_Str""+ plugin.getSaves().getString(""String_Node_Str"" + flagName)+ ""String_Node_Str"");
}
 else aH.echoDebug(""String_Node_Str"",flagName);
}
 else if (denizen) {
if (plugin.getSaves().contains(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName)) {
  try {
    if (exactly) {
      if (Double.valueOf(plugin.getSaves().getString(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName)) == (flagValue)) {
        outcome=true;
        aH.echoDebug(""String_Node_Str"",flagName);
      }
 else       aH.echoDebug(""String_Node_Str"",flagName);
    }
 else {
      if (Double.valueOf(plugin.getSaves().getString(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName)) >= (flagValue)) {
        outcome=true;
        aH.echoDebug(""String_Node_Str"",flagName);
      }
 else       aH.echoDebug(""String_Node_Str"",flagName);
    }
  }
 catch (  Exception e) {
    aH.echoDebug(""String_Node_Str"",flagName);
  }
  if (outcome == false)   aH.echoDebug(""String_Node_Str"" + flagValue + ""String_Node_Str""+ plugin.getSaves().getString(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str""+ flagName)+ ""String_Node_Str"");
}
 else aH.echoDebug(""String_Node_Str"",flagName);
}
 else {
if (plugin.getSaves().contains(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName)) {
  try {
    if (exactly) {
      if (Double.valueOf(plugin.getSaves().getString(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName)) == (flagValue)) {
        outcome=true;
        aH.echoDebug(""String_Node_Str"",flagName);
      }
 else       aH.echoDebug(""String_Node_Str"",flagName);
    }
 else {
      if (Double.valueOf(plugin.getSaves().getString(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName)) >= (flagValue)) {
        outcome=true;
        aH.echoDebug(""String_Node_Str"",flagName);
      }
 else       aH.echoDebug(""String_Node_Str"",flagName);
    }
  }
 catch (  Exception e) {
    aH.echoDebug(""String_Node_Str"",flagName);
  }
  if (outcome == false)   aH.echoDebug(""String_Node_Str"" + flagValue + ""String_Node_Str""+ plugin.getSaves().getString(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ flagName)+ ""String_Node_Str"");
}
 else aH.echoDebug(""String_Node_Str"",flagName);
}
break;
}
}
if (negativeRequirement != outcome) return true;
return false;
}",0.9602771581794884
10509,"public String fillReplaceables(Player thePlayer,DenizenNPC theDenizen,String stringToFill,boolean quickReplaceable){
  if (stringToFill == null)   return null;
  Matcher f=replaceableFlag.matcher(stringToFill);
  String filledString=stringToFill;
  while (f.find()) {
    if (f.group(2).contains(""String_Node_Str"") && !quickReplaceable)     continue;
    if (!f.group(2).contains(""String_Node_Str"") && quickReplaceable)     continue;
    String searchPath=""String_Node_Str"";
    if (f.group(3).startsWith(""String_Node_Str""))     searchPath=""String_Node_Str"";
 else     if (f.group(3).startsWith(""String_Node_Str"") && theDenizen != null)     searchPath=""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str"";
 else     if (f.group(3).startsWith(""String_Node_Str"") && thePlayer != null)     searchPath=""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str"";
    if (f.group(5).split(""String_Node_Str"").length > 1) {
      if (plugin.getSaves().contains(searchPath + f.group(5).split(""String_Node_Str"")[0].toUpperCase())) {
        filledString=f.replaceFirst(plugin.getSaves().getString(searchPath + f.group(5).split(""String_Node_Str"")[0].toUpperCase()));
        echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"",f.group(4));
      }
 else {
        filledString=f.replaceFirst(f.group(5).split(""String_Node_Str"")[1]);
        echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      }
    }
 else {
      if (plugin.getSaves().contains(searchPath + f.group(5).split(""String_Node_Str"")[0].toUpperCase())) {
        filledString=f.replaceFirst(plugin.getSaves().getString(searchPath + f.group(5).split(""String_Node_Str"")[0].toUpperCase()));
        echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"",f.group(4));
      }
 else {
        filledString=f.replaceFirst(f.group(5).split(""String_Node_Str"")[1]);
        echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      }
    }
  }
  if (thePlayer != null && filledString.contains(""String_Node_Str"")) {
    String itemInHandMaterial=""String_Node_Str"";
    if (thePlayer.getItemInHand() != null)     itemInHandMaterial=thePlayer.getItemInHand().getType().name();
    String itemInHandQty=""String_Node_Str"";
    if (thePlayer.getItemInHand() != null)     itemInHandQty=String.valueOf(thePlayer.getItemInHand().getAmount());
    String itemInHandId=""String_Node_Str"";
    if (thePlayer.getItemInHand() != null)     itemInHandId=String.valueOf(thePlayer.getItemInHand().getTypeId());
    String playerKiller=""String_Node_Str"";
    if (thePlayer.getKiller() != null)     playerKiller=thePlayer.getKiller().getName();
    String playerHelm=""String_Node_Str"";
    if (thePlayer.getInventory().getHelmet() != null)     playerHelm=thePlayer.getInventory().getHelmet().getType().name();
    String playerBoots=""String_Node_Str"";
    if (thePlayer.getInventory().getBoots() != null)     playerBoots=thePlayer.getInventory().getBoots().getType().name();
    String playerChestplate=""String_Node_Str"";
    if (thePlayer.getInventory().getChestplate() != null)     playerChestplate=thePlayer.getInventory().getChestplate().getType().name();
    String playerLeggings=""String_Node_Str"";
    if (thePlayer.getInventory().getLeggings() != null)     playerLeggings=thePlayer.getInventory().getLeggings().getType().name();
    String playerMoney=""String_Node_Str"";
    if (plugin.economy != null)     playerMoney=String.valueOf(plugin.economy.getBalance(thePlayer.getName()));
    if (quickReplaceable)     filledString=filledString.replace(""String_Node_Str"",itemInHandMaterial).replace(""String_Node_Str"",itemInHandQty).replace(""String_Node_Str"",itemInHandId).replace(""String_Node_Str"",thePlayer.getName()).replace(""String_Node_Str"",thePlayer.getName()).replace(""String_Node_Str"",playerKiller).replace(""String_Node_Str"",String.valueOf(thePlayer.getHealth())).replace(""String_Node_Str"",playerHelm).replace(""String_Node_Str"",playerLeggings).replace(""String_Node_Str"",playerBoots).replace(""String_Node_Str"",playerChestplate).replace(""String_Node_Str"",thePlayer.getWorld().getName()).replace(""String_Node_Str"",playerMoney).replace(""String_Node_Str"",String.valueOf(thePlayer.getExpToLevel())).replace(""String_Node_Str"",String.valueOf(thePlayer.getTotalExperience())).replace(""String_Node_Str"",String.valueOf(thePlayer.getFoodLevel()));
 else     filledString=filledString.replace(""String_Node_Str"",itemInHandMaterial).replace(""String_Node_Str"",itemInHandQty).replace(""String_Node_Str"",itemInHandId).replace(""String_Node_Str"",thePlayer.getName()).replace(""String_Node_Str"",thePlayer.getName()).replace(""String_Node_Str"",playerKiller).replace(""String_Node_Str"",String.valueOf(thePlayer.getHealth())).replace(""String_Node_Str"",playerHelm).replace(""String_Node_Str"",playerLeggings).replace(""String_Node_Str"",playerBoots).replace(""String_Node_Str"",playerChestplate).replace(""String_Node_Str"",thePlayer.getWorld().getName()).replace(""String_Node_Str"",playerMoney).replace(""String_Node_Str"",String.valueOf(thePlayer.getExpToLevel())).replace(""String_Node_Str"",String.valueOf(thePlayer.getTotalExperience())).replace(""String_Node_Str"",String.valueOf(thePlayer.getFoodLevel()));
  }
  if (theDenizen != null && filledString.contains(""String_Node_Str"")) {
    if (quickReplaceable)     filledString=filledString.replace(""String_Node_Str"",String.valueOf(theDenizen.getId())).replace(""String_Node_Str"",String.valueOf(theDenizen.getId())).replace(""String_Node_Str"",theDenizen.getName()).replace(""String_Node_Str"",theDenizen.getName());
 else     filledString=filledString.replace(""String_Node_Str"",String.valueOf(theDenizen.getId())).replace(""String_Node_Str"",String.valueOf(theDenizen.getId())).replace(""String_Node_Str"",theDenizen.getName()).replace(""String_Node_Str"",theDenizen.getName());
  }
  return filledString;
}","public String fillReplaceables(Player thePlayer,DenizenNPC theDenizen,String stringToFill,boolean quickReplaceable){
  if (stringToFill == null)   return null;
  Matcher f=replaceableFlag.matcher(stringToFill);
  String filledString=stringToFill;
  while (f.find()) {
    if (f.group(2).contains(""String_Node_Str"") && !quickReplaceable)     continue;
    if (!f.group(2).contains(""String_Node_Str"") && quickReplaceable)     continue;
    String searchPath=""String_Node_Str"";
    if (f.group(3).startsWith(""String_Node_Str""))     searchPath=""String_Node_Str"";
 else     if (f.group(3).startsWith(""String_Node_Str"") && theDenizen != null)     searchPath=""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str""+ theDenizen.getId()+ ""String_Node_Str"";
 else     if (f.group(3).startsWith(""String_Node_Str"") && thePlayer != null)     searchPath=""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str"";
    if (f.group(5).split(""String_Node_Str"").length > 1) {
      if (plugin.getSaves().contains(searchPath + f.group(5).split(""String_Node_Str"")[0].toUpperCase())) {
        filledString=f.replaceFirst(plugin.getSaves().getString(searchPath + f.group(5).split(""String_Node_Str"")[0].toUpperCase()));
        echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"",f.group(4));
      }
 else {
        filledString=f.replaceFirst(f.group(5).split(""String_Node_Str"")[1]);
        echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      }
    }
 else {
      if (plugin.getSaves().contains(searchPath + f.group(5).toUpperCase())) {
        filledString=f.replaceFirst(plugin.getSaves().getString(searchPath + f.group(5).split(""String_Node_Str"")[0].toUpperCase()));
        echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"",f.group(4));
      }
 else {
        filledString=f.replaceFirst(""String_Node_Str"");
        echoDebug(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      }
    }
  }
  if (thePlayer != null && filledString.contains(""String_Node_Str"")) {
    String itemInHandMaterial=""String_Node_Str"";
    if (thePlayer.getItemInHand() != null)     itemInHandMaterial=thePlayer.getItemInHand().getType().name();
    String itemInHandName=""String_Node_Str"";
    if (thePlayer.getItemInHand() != null)     itemInHandName=thePlayer.getItemInHand().getType().name().toLowerCase().replace(""String_Node_Str"",""String_Node_Str"");
    String itemInHandQty=""String_Node_Str"";
    if (thePlayer.getItemInHand() != null)     itemInHandQty=String.valueOf(thePlayer.getItemInHand().getAmount());
    String itemInHandId=""String_Node_Str"";
    if (thePlayer.getItemInHand() != null)     itemInHandId=String.valueOf(thePlayer.getItemInHand().getTypeId());
    String playerKiller=""String_Node_Str"";
    if (thePlayer.getKiller() != null)     playerKiller=thePlayer.getKiller().getName();
    String playerHelm=""String_Node_Str"";
    if (thePlayer.getInventory().getHelmet() != null)     playerHelm=thePlayer.getInventory().getHelmet().getType().name();
    String playerBoots=""String_Node_Str"";
    if (thePlayer.getInventory().getBoots() != null)     playerBoots=thePlayer.getInventory().getBoots().getType().name();
    String playerChestplate=""String_Node_Str"";
    if (thePlayer.getInventory().getChestplate() != null)     playerChestplate=thePlayer.getInventory().getChestplate().getType().name();
    String playerLeggings=""String_Node_Str"";
    if (thePlayer.getInventory().getLeggings() != null)     playerLeggings=thePlayer.getInventory().getLeggings().getType().name();
    String playerMoney=""String_Node_Str"";
    if (plugin.economy != null)     playerMoney=String.valueOf(plugin.economy.getBalance(thePlayer.getName()));
    if (quickReplaceable)     filledString=filledString.replace(""String_Node_Str"",itemInHandMaterial).replace(""String_Node_Str"",itemInHandName).replace(""String_Node_Str"",itemInHandQty).replace(""String_Node_Str"",itemInHandId).replace(""String_Node_Str"",thePlayer.getName()).replace(""String_Node_Str"",thePlayer.getName()).replace(""String_Node_Str"",playerKiller).replace(""String_Node_Str"",String.valueOf(thePlayer.getHealth())).replace(""String_Node_Str"",playerHelm).replace(""String_Node_Str"",playerLeggings).replace(""String_Node_Str"",playerBoots).replace(""String_Node_Str"",playerChestplate).replace(""String_Node_Str"",thePlayer.getWorld().getName()).replace(""String_Node_Str"",playerMoney).replace(""String_Node_Str"",String.valueOf(thePlayer.getExpToLevel())).replace(""String_Node_Str"",String.valueOf(thePlayer.getTotalExperience())).replace(""String_Node_Str"",String.valueOf(thePlayer.getFoodLevel()));
 else     filledString=filledString.replace(""String_Node_Str"",itemInHandMaterial).replace(""String_Node_Str"",itemInHandQty).replace(""String_Node_Str"",itemInHandId).replace(""String_Node_Str"",thePlayer.getName()).replace(""String_Node_Str"",thePlayer.getName()).replace(""String_Node_Str"",playerKiller).replace(""String_Node_Str"",String.valueOf(thePlayer.getHealth())).replace(""String_Node_Str"",playerHelm).replace(""String_Node_Str"",playerLeggings).replace(""String_Node_Str"",playerBoots).replace(""String_Node_Str"",playerChestplate).replace(""String_Node_Str"",thePlayer.getWorld().getName()).replace(""String_Node_Str"",playerMoney).replace(""String_Node_Str"",String.valueOf(thePlayer.getExpToLevel())).replace(""String_Node_Str"",String.valueOf(thePlayer.getTotalExperience())).replace(""String_Node_Str"",String.valueOf(thePlayer.getFoodLevel()));
  }
  if (theDenizen != null && filledString.contains(""String_Node_Str"")) {
    if (quickReplaceable)     filledString=filledString.replace(""String_Node_Str"",String.valueOf(theDenizen.getId())).replace(""String_Node_Str"",String.valueOf(theDenizen.getId())).replace(""String_Node_Str"",theDenizen.getName()).replace(""String_Node_Str"",theDenizen.getName());
 else     filledString=filledString.replace(""String_Node_Str"",String.valueOf(theDenizen.getId())).replace(""String_Node_Str"",String.valueOf(theDenizen.getId())).replace(""String_Node_Str"",theDenizen.getName()).replace(""String_Node_Str"",theDenizen.getName());
  }
  return filledString;
}",0.9686955077638462
10510,"@Override public void onEnable(){
  if (!setupEconomy() || !setupPermissions())   getLogger().log(Level.SEVERE,""String_Node_Str"");
  if (getServer().getPluginManager().getPlugin(""String_Node_Str"") != null) {
    getLogger().log(Level.INFO,""String_Node_Str"");
    this.heroes=(Heroes)getServer().getPluginManager().getPlugin(""String_Node_Str"");
  }
  reloadConfig();
  reloadScripts();
  reloadSaves();
  reloadAssignments();
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(DenizenTrait.class).withName(""String_Node_Str""));
  commandRegistry.registerCoreCommands();
  triggerRegistry.registerCoreTriggers();
  activityRegistry.registerCoreActivities();
  requirementRegistry.registerCoreRequirements();
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
    @Override public void run(){
      scriptEngine.runQueues();
    }
  }
,settings.InteractDelayInTicks(),settings.InteractDelayInTicks());
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
    @Override public void run(){
      activityEngine.scheduleScripts(false);
    }
  }
,1,600);
  getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
    @Override public void run(){
      bookmarks.buildLocationTriggerList();
    }
  }
,50);
}","@Override public void onEnable(){
  if (!setupEconomy() || !setupPermissions())   getLogger().log(Level.SEVERE,""String_Node_Str"");
  if (getServer().getPluginManager().getPlugin(""String_Node_Str"") != null) {
    getLogger().log(Level.INFO,""String_Node_Str"");
    this.heroes=(Heroes)getServer().getPluginManager().getPlugin(""String_Node_Str"");
  }
  reloadConfig();
  reloadScripts();
  reloadSaves();
  reloadAssignments();
  CitizensAPI.getTraitFactory().registerTrait(TraitInfo.create(DenizenTrait.class).withName(""String_Node_Str""));
  commandRegistry.registerCoreCommands();
  triggerRegistry.registerCoreTriggers();
  activityRegistry.registerCoreActivities();
  requirementRegistry.registerCoreRequirements();
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
    @Override public void run(){
      scriptEngine.runQueues();
    }
  }
,settings.InteractDelayInTicks(),settings.InteractDelayInTicks());
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
    @Override public void run(){
      activityEngine.scheduleScripts(false);
    }
  }
,1,600);
  getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
    @Override public void run(){
      bookmarks.buildLocationTriggerList();
    }
  }
,50);
  getServer().getPluginManager().registerEvents(activityEngine,this);
}",0.973302822273074
10511,"@Override public boolean execute(ScriptEntry theEntry) throws CommandException {
  boolean shortFormat=false;
  if (theEntry.arguments() != null) {
    for (    String thisArgument : theEntry.arguments()) {
      if (thisArgument.toUpperCase().contains(""String_Node_Str""))       shortFormat=true;
    }
  }
  String theScript=theEntry.getScript();
  Integer theStep=theEntry.getStep();
  List<String> chatTriggers=new ArrayList<String>();
  String scriptPath=theScript + ""String_Node_Str"" + theStep+ ""String_Node_Str"";
  boolean thisTriggerExists=true;
  int x=1;
  do {
    if (plugin.getScripts().contains(scriptPath + x + ""String_Node_Str"")) {
      String ct=plugin.getScripts().getString(scriptPath + x + ""String_Node_Str"");
      if (!ct.contains(""String_Node_Str""))       chatTriggers.add(ct);
      aH.echoDebug(""String_Node_Str"" + chatTriggers.get(x - 1) + ""String_Node_Str"");
    }
 else     thisTriggerExists=false;
    x++;
  }
 while (thisTriggerExists);
  if (chatTriggers.isEmpty())   return false;
  StringBuilder sb=new StringBuilder();
  sb.append(plugin.settings.NpcHintPrefix());
  for (int i=0; i < chatTriggers.size(); i++) {
    String item=chatTriggers.get(i);
    String fitem=getFormattedTrigger(item,shortFormat);
    aH.echoDebug(""String_Node_Str"" + fitem);
    sb.append(fitem);
    if (i != chatTriggers.size() - 1)     sb.append(""String_Node_Str"");
  }
  theEntry.getPlayer().sendMessage(sb.toString());
  return true;
}","@Override public boolean execute(ScriptEntry theEntry) throws CommandException {
  boolean shortFormat=false;
  if (theEntry.arguments() != null) {
    for (    String thisArgument : theEntry.arguments()) {
      if (thisArgument.toUpperCase().contains(""String_Node_Str""))       shortFormat=true;
    }
  }
  String theScript=theEntry.getScript();
  Integer theStep=theEntry.getStep();
  List<String> chatTriggers=new ArrayList<String>();
  String scriptPath=theScript + ""String_Node_Str"" + theStep+ ""String_Node_Str"";
  boolean thisTriggerExists=true;
  int x=1;
  do {
    if (plugin.getScripts().contains(scriptPath + x + ""String_Node_Str"")) {
      String ct=plugin.getScripts().getString(scriptPath + x + ""String_Node_Str"");
      if (!ct.contains(""String_Node_Str""))       chatTriggers.add(ct);
      aH.echoDebug(""String_Node_Str"" + ct + ""String_Node_Str"");
    }
 else     thisTriggerExists=false;
    x++;
  }
 while (thisTriggerExists);
  if (chatTriggers.isEmpty())   return false;
  StringBuilder sb=new StringBuilder();
  sb.append(plugin.settings.NpcHintPrefix());
  for (int i=0; i < chatTriggers.size(); i++) {
    String item=chatTriggers.get(i);
    String fitem=getFormattedTrigger(item,shortFormat);
    aH.echoDebug(""String_Node_Str"" + fitem);
    sb.append(fitem);
    if (i != chatTriggers.size() - 1)     sb.append(""String_Node_Str"");
  }
  theEntry.getPlayer().sendMessage(sb.toString());
  return true;
}",0.9920166608816384
10512,"public ActivityEngine(Denizen denizen){
  this.plugin=denizen;
  plugin.getServer().getPluginManager().registerEvents(this,plugin);
}","public ActivityEngine(Denizen denizen){
  this.plugin=denizen;
}",0.649746192893401
10513,"public boolean onCommand(CommandSender sender,Command cmd,String cmdLabel,String[] args){
  if (args.length < 1) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    plugin.saveSaves();
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    plugin.reloadConfig();
    plugin.reloadScripts();
    plugin.reloadAssignments();
    plugin.reloadSaves();
    plugin.bookmarks.buildLocationTriggerList();
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    sender.sendMessage(ChatColor.GREEN + plugin.utilities.getVersionString());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    if (!plugin.debugMode) {
      plugin.debugMode=true;
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else     if (plugin.debugMode) {
      plugin.debugMode=false;
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    if (!plugin.showStackTraces) {
      plugin.showStackTraces=true;
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else     if (plugin.showStackTraces) {
      plugin.showStackTraces=false;
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    sender.sendMessage(""String_Node_Str"");
  }
  if (!(sender instanceof Player)) {
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  Player player=(Player)sender;
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(""String_Node_Str"" + player.getTargetBlock(null,20).getData());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    Block toAddData=player.getTargetBlock(null,20);
    toAddData.setData((byte)(toAddData.getData() + 1));
    player.sendMessage(""String_Node_Str"" + player.getTargetBlock(null,20).getData());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    Block toAddData=player.getTargetBlock(null,20);
    toAddData.setData((byte)(toAddData.getData() - 1));
    player.sendMessage(""String_Node_Str"" + player.getTargetBlock(null,20).getData());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 1) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!plugin.debugMode) {
      plugin.debugMode=true;
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else     if (plugin.debugMode) {
      plugin.debugMode=false;
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.saveSaves();
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.reloadSaves();
    plugin.reloadConfig();
    plugin.reloadScripts();
    plugin.reloadAssignments();
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.GREEN + plugin.utilities.getVersionString());
    return true;
  }
  if (player.getMetadata(""String_Node_Str"").isEmpty()) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  NPC theNPC=CitizensAPI.getNPCRegistry().getById(player.getMetadata(""String_Node_Str"").get(0).asInt());
  if (!theNPC.hasTrait(DenizenTrait.class)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.getDenizenNPCRegistry().showInfo(player,plugin.getDenizenNPCRegistry().getDenizen(theNPC));
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.getSaves().set(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"",""String_Node_Str"");
    plugin.saveSaves();
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.getSaves().set(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"",null);
    plugin.getActivityEngine().scheduleScripts();
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + theNPC.getName()+ ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 2 || args.length > 2) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
 else {
      try {
        plugin.getDenizenNPCRegistry().getDenizen(theNPC).setHealth(Integer.valueOf(args[1]));
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      }
 catch (      NumberFormatException e) {
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(theNPC.getTrait(DenizenTrait.class).listTriggers());
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length > 2) {
        player.sendMessage(theNPC.getTrait(DenizenTrait.class).toggleTrigger(args[2]));
        return true;
      }
 else {
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 3) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length < 4) {
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        return true;
      }
 else       plugin.getActivityRegistry().addActivity(args[2],theNPC,new String[0],Integer.valueOf(args[3]));
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      plugin.getActivityRegistry().removeActivity(args[2],theNPC);
    }
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 3) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      List<String> locationList=plugin.getSaves().getStringList(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"");
      locationList.add(args[2] + ""String_Node_Str"" + player.getWorld().getName()+ ""String_Node_Str""+ player.getLocation().getX()+ ""String_Node_Str""+ player.getLocation().getY()+ ""String_Node_Str""+ player.getLocation().getZ()+ ""String_Node_Str""+ player.getLocation().getYaw()+ ""String_Node_Str""+ player.getLocation().getPitch());
      plugin.getSaves().set(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"",locationList);
      plugin.saveSaves();
      plugin.bookmarks.buildLocationTriggerList();
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      List<String> blockList=plugin.getSaves().getStringList(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"");
      Block targetBlock=player.getTargetBlock(null,15);
      blockList.add(args[2] + ""String_Node_Str"" + player.getWorld().getName()+ ""String_Node_Str""+ targetBlock.getX()+ ""String_Node_Str""+ targetBlock.getY()+ ""String_Node_Str""+ targetBlock.getZ());
      plugin.getSaves().set(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"",blockList);
      plugin.saveSaves();
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command cmd,String cmdLabel,String[] args){
  if (args.length < 1) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    plugin.saveSaves();
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    plugin.reloadConfig();
    plugin.reloadScripts();
    plugin.reloadAssignments();
    plugin.reloadSaves();
    plugin.bookmarks.buildLocationTriggerList();
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    sender.sendMessage(ChatColor.GREEN + plugin.utilities.getVersionString());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    if (!plugin.debugMode) {
      plugin.debugMode=true;
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else     if (plugin.debugMode) {
      plugin.debugMode=false;
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    if (!plugin.showStackTraces) {
      plugin.showStackTraces=true;
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else     if (plugin.showStackTraces) {
      plugin.showStackTraces=false;
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    sender.sendMessage(""String_Node_Str"");
  }
  if (!(sender instanceof Player)) {
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  Player player=(Player)sender;
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(""String_Node_Str"" + player.getTargetBlock(null,20).getData());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    Block toAddData=player.getTargetBlock(null,20);
    toAddData.setData((byte)(toAddData.getData() + 1));
    player.sendMessage(""String_Node_Str"" + player.getTargetBlock(null,20).getData());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    Block toAddData=player.getTargetBlock(null,20);
    toAddData.setData((byte)(toAddData.getData() - 1));
    player.sendMessage(""String_Node_Str"" + player.getTargetBlock(null,20).getData());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 1) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!plugin.debugMode) {
      plugin.debugMode=true;
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else     if (plugin.debugMode) {
      plugin.debugMode=false;
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!plugin.showStackTraces) {
      plugin.showStackTraces=true;
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else     if (plugin.showStackTraces) {
      plugin.showStackTraces=false;
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.saveSaves();
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.reloadSaves();
    plugin.reloadConfig();
    plugin.reloadScripts();
    plugin.reloadAssignments();
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.GREEN + plugin.utilities.getVersionString());
    return true;
  }
  if (player.getMetadata(""String_Node_Str"").isEmpty()) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  NPC theNPC=CitizensAPI.getNPCRegistry().getById(player.getMetadata(""String_Node_Str"").get(0).asInt());
  if (!theNPC.hasTrait(DenizenTrait.class)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.getDenizenNPCRegistry().showInfo(player,plugin.getDenizenNPCRegistry().getDenizen(theNPC));
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.getSaves().set(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"",""String_Node_Str"");
    plugin.saveSaves();
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.getSaves().set(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"",null);
    plugin.getActivityEngine().scheduleScripts();
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + theNPC.getName()+ ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 2 || args.length > 2) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
 else {
      try {
        plugin.getDenizenNPCRegistry().getDenizen(theNPC).setHealth(Integer.valueOf(args[1]));
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      }
 catch (      NumberFormatException e) {
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(theNPC.getTrait(DenizenTrait.class).listTriggers());
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length > 2) {
        player.sendMessage(theNPC.getTrait(DenizenTrait.class).toggleTrigger(args[2]));
        return true;
      }
 else {
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 3) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length < 4) {
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        return true;
      }
 else       plugin.getActivityRegistry().addActivity(args[2],theNPC,new String[0],Integer.valueOf(args[3]));
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      plugin.getActivityRegistry().removeActivity(args[2],theNPC);
    }
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 3) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      List<String> locationList=plugin.getSaves().getStringList(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"");
      locationList.add(args[2] + ""String_Node_Str"" + player.getWorld().getName()+ ""String_Node_Str""+ player.getLocation().getX()+ ""String_Node_Str""+ player.getLocation().getY()+ ""String_Node_Str""+ player.getLocation().getZ()+ ""String_Node_Str""+ player.getLocation().getYaw()+ ""String_Node_Str""+ player.getLocation().getPitch());
      plugin.getSaves().set(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"",locationList);
      plugin.saveSaves();
      plugin.bookmarks.buildLocationTriggerList();
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      List<String> blockList=plugin.getSaves().getStringList(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"");
      Block targetBlock=player.getTargetBlock(null,15);
      blockList.add(args[2] + ""String_Node_Str"" + player.getWorld().getName()+ ""String_Node_Str""+ targetBlock.getX()+ ""String_Node_Str""+ targetBlock.getY()+ ""String_Node_Str""+ targetBlock.getZ());
      plugin.getSaves().set(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"",blockList);
      plugin.saveSaves();
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
  }
  return false;
}",0.9826719339199138
10514,"@Override public boolean execute(ScriptEntry theEntry) throws CommandException {
  boolean shortFormat=false;
  if (theEntry.arguments() != null) {
    for (    String thisArgument : theEntry.arguments()) {
      if (thisArgument.toUpperCase().contains(""String_Node_Str""))       shortFormat=true;
    }
  }
  String theScript=theEntry.getScript();
  Integer theStep=theEntry.getStep();
  List<String> chatTriggers=new ArrayList<String>();
  String scriptPath=theScript + ""String_Node_Str"" + theStep+ ""String_Node_Str"";
  boolean thisTriggerExists=true;
  int x=1;
  do {
    if (plugin.getScripts().contains(scriptPath + x + ""String_Node_Str"")) {
      chatTriggers.add(plugin.getScripts().getString(scriptPath + x + ""String_Node_Str""));
      if (plugin.debugMode)       plugin.getLogger().info(""String_Node_Str"" + chatTriggers.get(x));
    }
 else     thisTriggerExists=false;
    x++;
  }
 while (thisTriggerExists);
  if (chatTriggers.isEmpty())   return false;
  StringBuilder sb=new StringBuilder();
  sb.append(plugin.settings.NpcHintPrefix());
  for (int i=0; i < chatTriggers.size(); i++) {
    String item=chatTriggers.get(i);
    if (item.contains(""String_Node_Str""))     continue;
    String fitem=getFormattedTrigger(item,shortFormat);
    aH.echoDebug(""String_Node_Str"" + fitem);
    sb.append(fitem);
    if (i != chatTriggers.size() - 1)     sb.append(""String_Node_Str"");
  }
  theEntry.getPlayer().sendMessage(sb.toString());
  return true;
}","@Override public boolean execute(ScriptEntry theEntry) throws CommandException {
  boolean shortFormat=false;
  if (theEntry.arguments() != null) {
    for (    String thisArgument : theEntry.arguments()) {
      if (thisArgument.toUpperCase().contains(""String_Node_Str""))       shortFormat=true;
    }
  }
  String theScript=theEntry.getScript();
  Integer theStep=theEntry.getStep();
  List<String> chatTriggers=new ArrayList<String>();
  String scriptPath=theScript + ""String_Node_Str"" + theStep+ ""String_Node_Str"";
  boolean thisTriggerExists=true;
  int x=1;
  do {
    if (plugin.getScripts().contains(scriptPath + x + ""String_Node_Str"")) {
      chatTriggers.add(plugin.getScripts().getString(scriptPath + x + ""String_Node_Str""));
      if (plugin.debugMode)       plugin.getLogger().info(""String_Node_Str"" + chatTriggers.get(x - 1));
    }
 else     thisTriggerExists=false;
    x++;
  }
 while (thisTriggerExists);
  if (chatTriggers.isEmpty())   return false;
  StringBuilder sb=new StringBuilder();
  sb.append(plugin.settings.NpcHintPrefix());
  for (int i=0; i < chatTriggers.size(); i++) {
    String item=chatTriggers.get(i);
    if (item.contains(""String_Node_Str""))     continue;
    String fitem=getFormattedTrigger(item,shortFormat);
    aH.echoDebug(""String_Node_Str"" + fitem);
    sb.append(fitem);
    if (i != chatTriggers.size() - 1)     sb.append(""String_Node_Str"");
  }
  theEntry.getPlayer().sendMessage(sb.toString());
  return true;
}",0.998631074606434
10515,"@Override public boolean execute(ScriptEntry theEntry) throws CommandException {
  boolean hurt=false;
  LivingEntity target=null;
  if (theEntry.getPlayer() == null) {
    target=theEntry.getPlayer();
  }
  Integer amount=null;
  hurt=theEntry.getCommand().equalsIgnoreCase(""String_Node_Str"");
  for (  String thisArg : theEntry.arguments()) {
    if (thisArg.toUpperCase().contains(""String_Node_Str"")) {
      target=theEntry.getDenizen().getEntity();
      aH.echoDebug(""String_Node_Str"");
    }
    if (thisArg.toUpperCase().contains(""String_Node_Str"")) {
      amount=aH.getIntegerModifier(thisArg);
      aH.echoDebug(""String_Node_Str"" + amount);
    }
  }
  if (target != null) {
    if (hurt) {
      if (amount == null)       amount=1;
      target.setHealth(target.getHealth() - amount);
      net.citizensnpcs.util.Util.sendPacketNearby(target.getLocation(),new Packet18ArmAnimation(((CraftEntity)target).getHandle(),2),64);
      return true;
    }
 else {
      if (amount == null)       amount=target.getMaxHealth() - target.getHealth();
      target.setHealth(target.getHealth() + amount);
      net.citizensnpcs.util.Util.sendPacketNearby(target.getLocation(),new Packet18ArmAnimation(((CraftEntity)target).getHandle(),6),64);
      return true;
    }
  }
  return false;
}","@Override public boolean execute(ScriptEntry theEntry) throws CommandException {
  boolean hurts=false;
  LivingEntity target=null;
  if (theEntry.getPlayer() == null) {
    target=theEntry.getDenizen().getEntity();
  }
  Integer amount=null;
  hurts=theEntry.getCommand().equalsIgnoreCase(""String_Node_Str"");
  if (theEntry.arguments() != null)   for (  String thisArg : theEntry.arguments()) {
    if (thisArg.toUpperCase().contains(""String_Node_Str"")) {
      target=theEntry.getDenizen().getEntity();
      aH.echoDebug(""String_Node_Str"" + theEntry.getDenizen().getName() + ""String_Node_Str"");
    }
    if (thisArg.matches(""String_Node_Str"")) {
      amount=aH.getIntegerModifier(thisArg);
      aH.echoDebug(""String_Node_Str"" + amount + ""String_Node_Str"");
    }
  }
  if (target != null) {
    if (hurts) {
      if (amount == null)       amount=1;
      target.setHealth(target.getHealth() - amount);
      net.citizensnpcs.util.Util.sendPacketNearby(target.getLocation(),new Packet18ArmAnimation(((CraftEntity)target).getHandle(),2),64);
      return true;
    }
 else {
      if (amount == null)       amount=target.getMaxHealth() - target.getHealth();
      target.setHealth(target.getHealth() + amount);
      net.citizensnpcs.util.Util.sendPacketNearby(target.getLocation(),new Packet18ArmAnimation(((CraftEntity)target).getHandle(),6),64);
      return true;
    }
  }
  return false;
}",0.8761621420602455
10516,"@Override public boolean execute(ScriptEntry theEntry) throws CommandException {
  String theScript=theEntry.getScript();
  Integer theStep=null;
  Integer duration=null;
  if (theEntry.arguments() != null) {
    for (    String thisArg : theEntry.arguments()) {
      if (aH.matchesInteger(thisArg))       theStep=aH.getIntegerModifier(thisArg);
 else       if (aH.matchesScript(thisArg))       theScript=aH.getStringModifier(thisArg);
 else       if (thisArg.toUpperCase().contains(""String_Node_Str"")) {
        int high=1, low=1;
        if (thisArg.split(""String_Node_Str"")[1].split(""String_Node_Str"").length == 1) {
          if (aH.matchesInteger(thisArg.split(""String_Node_Str"")[1])) {
            low=1;
            high=Integer.valueOf(thisArg.split(""String_Node_Str"")[1]);
          }
        }
 else         if (thisArg.split(""String_Node_Str"")[1].split(""String_Node_Str"").length == 2) {
          if (aH.matchesInteger(thisArg.split(""String_Node_Str"")[1].split(""String_Node_Str"")[0]) && aH.matchesInteger(thisArg.split(""String_Node_Str"")[1].split(""String_Node_Str"")[1])) {
            low=Integer.valueOf(thisArg.split(""String_Node_Str"")[1].split(""String_Node_Str"")[0]);
            high=Integer.valueOf(thisArg.split(""String_Node_Str"")[1].split(""String_Node_Str"")[1]);
          }
        }
        Random randomInt=new Random();
        if (high - low > 0)         theStep=randomInt.nextInt(high - low + 1) + low;
 else         theStep=high;
      }
 else       if (aH.matchesDuration(thisArg)) {
        duration=aH.getIntegerModifier(thisArg);
        aH.echoDebug(""String_Node_Str"",thisArg);
      }
 else       aH.echoError(""String_Node_Str"",thisArg);
    }
  }
  if (theStep == null)   theStep=plugin.getScriptEngine().helper.getCurrentStep(theEntry.getPlayer(),theScript) + 1;
  if (duration != null) {
    Integer oldStep=plugin.getScriptEngine().helper.getCurrentStep(theEntry.getPlayer(),theScript);
    plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new ZapCommandRunnable<String,String,Integer,Integer>(theEntry.getPlayer().getName(),theScript,theStep,oldStep){
      @Override public void run(      String player,      String script,      Integer step,      Integer oldStep){
        if (plugin.getSaves().getInt(""String_Node_Str"" + player + ""String_Node_Str""+ script+ ""String_Node_Str"") == step) {
          plugin.getSaves().set(""String_Node_Str"" + player + ""String_Node_Str""+ script+ ""String_Node_Str"",oldStep);
        }
      }
    }
,duration * 20);
  }
  if (!plugin.getScripts().contains(theScript + ""String_Node_Str"" + theStep))   aH.echoDebug(""String_Node_Str"");
  if (theEntry.getPlayer() != null && theScript != null && theStep != null) {
    plugin.getSaves().set(""String_Node_Str"" + theEntry.getPlayer().getName() + ""String_Node_Str""+ theScript+ ""String_Node_Str"",theStep);
    plugin.saveSaves();
    return true;
  }
  return false;
}","@Override public boolean execute(ScriptEntry theEntry) throws CommandException {
  String theScript=theEntry.getScript();
  Integer theStep=null;
  Integer duration=null;
  if (theEntry.arguments() != null) {
    for (    String thisArg : theEntry.arguments()) {
      if (aH.matchesInteger(thisArg))       theStep=aH.getIntegerModifier(thisArg);
 else       if (aH.matchesScript(thisArg))       theScript=aH.getStringModifier(thisArg);
 else       if (thisArg.toUpperCase().contains(""String_Node_Str"")) {
        int high=1, low=1;
        if (thisArg.split(""String_Node_Str"")[1].split(""String_Node_Str"").length == 1) {
          if (aH.matchesInteger(thisArg.split(""String_Node_Str"")[1])) {
            low=1;
            high=Integer.valueOf(thisArg.split(""String_Node_Str"")[1]);
          }
        }
 else         if (thisArg.split(""String_Node_Str"")[1].split(""String_Node_Str"").length == 2) {
          if (aH.matchesInteger(thisArg.split(""String_Node_Str"")[1].split(""String_Node_Str"")[0]) && aH.matchesInteger(thisArg.split(""String_Node_Str"")[1].split(""String_Node_Str"")[1])) {
            low=Integer.valueOf(thisArg.split(""String_Node_Str"")[1].split(""String_Node_Str"")[0]);
            high=Integer.valueOf(thisArg.split(""String_Node_Str"")[1].split(""String_Node_Str"")[1]);
          }
        }
        Random randomInt=new Random();
        if (high - low > 0)         theStep=randomInt.nextInt(high - low + 1) + low;
 else         theStep=high;
        aH.echoDebug(""String_Node_Str"" + theStep + ""String_Node_Str"");
      }
 else       if (aH.matchesDuration(thisArg)) {
        duration=aH.getIntegerModifier(thisArg);
        aH.echoDebug(""String_Node_Str"",thisArg);
      }
 else       aH.echoError(""String_Node_Str"",thisArg);
    }
  }
  if (theStep == null)   theStep=plugin.getScriptEngine().helper.getCurrentStep(theEntry.getPlayer(),theScript) + 1;
  if (duration != null) {
    Integer oldStep=plugin.getScriptEngine().helper.getCurrentStep(theEntry.getPlayer(),theScript);
    plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new ZapCommandRunnable<String,String,Integer,Integer>(theEntry.getPlayer().getName(),theScript,theStep,oldStep){
      @Override public void run(      String player,      String script,      Integer step,      Integer oldStep){
        if (plugin.getSaves().getInt(""String_Node_Str"" + player + ""String_Node_Str""+ script+ ""String_Node_Str"") == step) {
          plugin.getSaves().set(""String_Node_Str"" + player + ""String_Node_Str""+ script+ ""String_Node_Str"",oldStep);
        }
      }
    }
,duration * 20);
  }
  if (!plugin.getScripts().contains(theScript + ""String_Node_Str"" + theStep))   aH.echoDebug(""String_Node_Str"");
  if (theEntry.getPlayer() != null && theScript != null && theStep != null) {
    plugin.getSaves().set(""String_Node_Str"" + theEntry.getPlayer().getName() + ""String_Node_Str""+ theScript+ ""String_Node_Str"",theStep);
    plugin.saveSaves();
    return true;
  }
  return false;
}",0.9878818911076976
10517,"@EventHandler public void locationTrigger(PlayerMoveEvent event){
  if (event.getTo().getBlock().equals(event.getFrom().getBlock()))   return;
  ScriptHelper sE=plugin.getScriptEngine().helper;
  if (!plugin.bookmarks.getLocationTriggerList().isEmpty()) {
    boolean hasLocation=false;
    for (    Location theLocation : plugin.bookmarks.getLocationTriggerList().keySet()) {
      if (plugin.bookmarks.checkLocation(event.getPlayer(),theLocation,plugin.settings.LocationTriggerRangeInBlocks())) {
        hasLocation=true;
        DenizenNPC theDenizen=null;
        String locationTriggered=plugin.bookmarks.getLocationTriggerList().get(theLocation).split(""String_Node_Str"")[2];
        if (plugin.debugMode)         plugin.getLogger().info(""String_Node_Str"" + locationTriggered);
        if (plugin.bookmarks.getLocationTriggerList().get(theLocation).contains(""String_Node_Str""))         theDenizen=plugin.getDenizenNPCRegistry().getDenizen(CitizensAPI.getNPCRegistry().getById(Integer.valueOf(plugin.bookmarks.getLocationTriggerList().get(theLocation).split(""String_Node_Str"")[1])));
 else         if (plugin.bookmarks.getLocationTriggerList().get(theLocation).contains(""String_Node_Str"")) {
          List<DenizenNPC> denizenList=new ArrayList<DenizenNPC>();
          for (          DenizenNPC npc : plugin.getDenizenNPCRegistry().getDenizens().values()) {
            if (npc.getName().equals(plugin.bookmarks.getLocationTriggerList().get(theLocation).split(""String_Node_Str"")[1])) {
              denizenList.add(npc);
              theDenizen=npc;
            }
          }
          for (          DenizenNPC npc : denizenList) {
            if (npc.getEntity() == null)             continue;
            if (npc.getEntity().getLocation().distance(event.getPlayer().getLocation()) < theDenizen.getEntity().getLocation().distance(event.getPlayer().getLocation()))             theDenizen=npc;
          }
        }
        if (theDenizen == null)         return;
        if (theDenizen.getCitizensEntity().getTrait(DenizenTrait.class).triggerIsEnabled(""String_Node_Str"")) {
          if (event.getPlayer().hasMetadata(""String_Node_Str"")) {
            if (locationTriggered.equals(event.getPlayer().getMetadata(""String_Node_Str"").get(0).asString()))             return;
            event.getPlayer().setMetadata(""String_Node_Str"",new FixedMetadataValue(plugin,locationTriggered));
            if (plugin.debugMode)             plugin.getLogger().log(Level.INFO,""String_Node_Str"" + event.getPlayer().getMetadata(""String_Node_Str"").get(0).asString() + ""String_Node_Str"");
            if (theDenizen.IsInteractable(triggerName,event.getPlayer())) {
              sE.setCooldown(theDenizen,LocationTrigger.class,plugin.settings.DefaultLocationCooldown());
              parseLocationTrigger(theDenizen,event.getPlayer(),locationTriggered);
            }
          }
 else {
            event.getPlayer().setMetadata(""String_Node_Str"",new FixedMetadataValue(plugin,locationTriggered));
            if (plugin.debugMode)             plugin.getLogger().log(Level.INFO,""String_Node_Str"" + event.getPlayer().getMetadata(""String_Node_Str"").get(0).asString() + ""String_Node_Str"");
            if (theDenizen.IsInteractable(triggerName,event.getPlayer())) {
              sE.setCooldown(theDenizen,LocationTrigger.class,plugin.settings.DefaultLocationCooldown());
              parseLocationTrigger(theDenizen,event.getPlayer(),locationTriggered);
            }
          }
        }
      }
    }
    if (!hasLocation) {
      if (event.getPlayer().hasMetadata(""String_Node_Str""))       event.getPlayer().removeMetadata(""String_Node_Str"",plugin);
    }
  }
}","@EventHandler public void locationTrigger(PlayerMoveEvent event){
  if (event.getTo().getBlock().equals(event.getFrom().getBlock()))   return;
  ScriptHelper sE=plugin.getScriptEngine().helper;
  if (!plugin.bookmarks.getLocationTriggerList().isEmpty()) {
    boolean hasLocation=false;
    for (    Location theLocation : plugin.bookmarks.getLocationTriggerList().keySet()) {
      if (plugin.bookmarks.checkLocation(event.getPlayer(),theLocation,plugin.settings.LocationTriggerRangeInBlocks())) {
        hasLocation=true;
        DenizenNPC theDenizen=null;
        String locationTriggered=plugin.bookmarks.getLocationTriggerList().get(theLocation).split(""String_Node_Str"")[2];
        if (plugin.debugMode)         plugin.getLogger().info(""String_Node_Str"" + event.getPlayer().getName() + ""String_Node_Str""+ locationTriggered+ ""String_Node_Str"");
        if (plugin.bookmarks.getLocationTriggerList().get(theLocation).contains(""String_Node_Str""))         theDenizen=plugin.getDenizenNPCRegistry().getDenizen(CitizensAPI.getNPCRegistry().getById(Integer.valueOf(plugin.bookmarks.getLocationTriggerList().get(theLocation).split(""String_Node_Str"")[1])));
 else         if (plugin.bookmarks.getLocationTriggerList().get(theLocation).contains(""String_Node_Str"")) {
          List<DenizenNPC> denizenList=new ArrayList<DenizenNPC>();
          for (          DenizenNPC npc : plugin.getDenizenNPCRegistry().getDenizens().values()) {
            if (npc.getName().equals(plugin.bookmarks.getLocationTriggerList().get(theLocation).split(""String_Node_Str"")[1])) {
              denizenList.add(npc);
              theDenizen=npc;
            }
          }
          for (          DenizenNPC npc : denizenList) {
            if (npc.getEntity() == null)             continue;
            if (npc.getEntity().getLocation().distance(event.getPlayer().getLocation()) < theDenizen.getEntity().getLocation().distance(event.getPlayer().getLocation()))             theDenizen=npc;
          }
        }
        if (theDenizen == null)         return;
        if (theDenizen.getCitizensEntity().getTrait(DenizenTrait.class).triggerIsEnabled(""String_Node_Str"")) {
          if (event.getPlayer().hasMetadata(""String_Node_Str"")) {
            if (locationTriggered.equals(event.getPlayer().getMetadata(""String_Node_Str"").get(0).asString()))             return;
            event.getPlayer().setMetadata(""String_Node_Str"",new FixedMetadataValue(plugin,locationTriggered));
            if (plugin.debugMode)             plugin.getLogger().log(Level.INFO,""String_Node_Str"" + event.getPlayer().getMetadata(""String_Node_Str"").get(0).asString() + ""String_Node_Str"");
            if (theDenizen.IsInteractable(triggerName,event.getPlayer())) {
              sE.setCooldown(theDenizen,LocationTrigger.class,plugin.settings.DefaultLocationCooldown());
              parseLocationTrigger(theDenizen,event.getPlayer(),locationTriggered);
            }
          }
 else {
            event.getPlayer().setMetadata(""String_Node_Str"",new FixedMetadataValue(plugin,locationTriggered));
            if (plugin.debugMode)             plugin.getLogger().log(Level.INFO,""String_Node_Str"" + event.getPlayer().getMetadata(""String_Node_Str"").get(0).asString() + ""String_Node_Str"");
            if (theDenizen.IsInteractable(triggerName,event.getPlayer())) {
              sE.setCooldown(theDenizen,LocationTrigger.class,plugin.settings.DefaultLocationCooldown());
              parseLocationTrigger(theDenizen,event.getPlayer(),locationTriggered);
            }
          }
        }
      }
    }
    if (!hasLocation) {
      if (event.getPlayer().hasMetadata(""String_Node_Str""))       event.getPlayer().removeMetadata(""String_Node_Str"",plugin);
    }
  }
}",0.9907859078590786
10518,"private void parseLocationTrigger(DenizenNPC theDenizen,Player thePlayer,String theLocationName){
  if (plugin.debugMode)   plugin.getLogger().log(Level.INFO,""String_Node_Str"");
  ScriptHelper sE=plugin.getScriptEngine().helper;
  String theScriptName=theDenizen.getInteractScript(thePlayer,this.getClass());
  if (theScriptName == null)   return;
  CommandSender cs=Bukkit.getConsoleSender();
  if (plugin.debugMode)   cs.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + theDenizen.getName()+ ""String_Node_Str""+ thePlayer.getName()+ ""String_Node_Str"");
  if (plugin.debugMode)   cs.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Integer theStep=sE.getCurrentStep(thePlayer,theScriptName);
  boolean foundScript=false;
  boolean noMatch=false;
  int x=1;
  do {
    foundScript=true;
    if (plugin.getScripts().contains(sE.getTriggerPath(theScriptName,theStep,triggerName) + x + ""String_Node_Str"")) {
      if (plugin.getScripts().getString(sE.getTriggerPath(theScriptName,theStep,triggerName) + x + ""String_Node_Str"").equals(theLocationName)) {
        foundScript=true;
        if (plugin.debugMode)         cs.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
      }
 else {
        foundScript=false;
        x++;
      }
    }
 else     noMatch=true;
  }
 while (foundScript == false);
  if (!noMatch) {
    List<String> theScript=sE.getScript(sE.getTriggerPath(theScriptName,theStep,triggerName) + x + sE.scriptString);
    sE.queueScriptEntries(thePlayer,sE.buildScriptEntries(thePlayer,theDenizen,theScript,theScriptName,theStep),QueueType.TRIGGER);
  }
 else   if (plugin.debugMode)   cs.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  return;
}","private void parseLocationTrigger(DenizenNPC theDenizen,Player thePlayer,String theLocationName){
  if (plugin.debugMode)   plugin.getLogger().log(Level.INFO,""String_Node_Str"");
  ScriptHelper sE=plugin.getScriptEngine().helper;
  String theScriptName=theDenizen.getInteractScript(thePlayer,this.getClass());
  if (theScriptName == null)   return;
  CommandSender cs=Bukkit.getConsoleSender();
  if (plugin.debugMode)   cs.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + theDenizen.getName()+ ""String_Node_Str""+ thePlayer.getName()+ ""String_Node_Str"");
  if (plugin.debugMode)   cs.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Integer theStep=sE.getCurrentStep(thePlayer,theScriptName);
  boolean foundScript=false;
  boolean noMatch=true;
  int x=1;
  do {
    foundScript=true;
    if (plugin.getScripts().contains(sE.getTriggerPath(theScriptName,theStep,triggerName) + x + ""String_Node_Str"")) {
      if (plugin.getScripts().getString(sE.getTriggerPath(theScriptName,theStep,triggerName) + x + ""String_Node_Str"").equals(theLocationName)) {
        noMatch=false;
        if (plugin.debugMode)         cs.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
      }
 else {
        foundScript=false;
        x++;
      }
    }
  }
 while (foundScript == false);
  if (!noMatch) {
    List<String> theScript=sE.getScript(sE.getTriggerPath(theScriptName,theStep,triggerName) + x + sE.scriptString);
    sE.queueScriptEntries(thePlayer,sE.buildScriptEntries(thePlayer,theDenizen,theScript,theScriptName,theStep),QueueType.TRIGGER);
  }
 else {
    if (plugin.debugMode)     cs.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
    if (plugin.debugMode) {
      String locationbookmarks=""String_Node_Str"";
      boolean hasbookmark=false;
      for (      String triggerlistitem : plugin.bookmarks.getLocationTriggerList().values()) {
        hasbookmark=true;
        if (triggerlistitem.contains(theDenizen.getName()))         locationbookmarks=locationbookmarks + triggerlistitem.split(""String_Node_Str"")[2] + ""String_Node_Str"";
      }
      if (!hasbookmark)       locationbookmarks=locationbookmarks + ""String_Node_Str"";
 else       locationbookmarks=locationbookmarks.substring(0,locationbookmarks.length() - 2);
      cs.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.WHITE+ locationbookmarks);
    }
    if (plugin.debugMode)     cs.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"");
  }
  return;
}",0.8007008322382829
10519,"public void scheduleScripts(){
  if (plugin.getDenizenNPCRegistry().getDenizens().isEmpty())   return;
  for (  DenizenNPC theDenizen : plugin.getDenizenNPCRegistry().getDenizens().values()) {
    if (!theDenizen.isSpawned())     continue;
    int denizenTime=Math.round(theDenizen.getWorld().getTime() / 1000);
    List<String> denizenActivities=plugin.getAssignments().getStringList(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str"");
    plugin.getLogger().info(""String_Node_Str"" + denizenTime + ""String_Node_Str"");
    if (denizenActivities.isEmpty())     continue;
    for (    String activity : denizenActivities) {
      if (activity.startsWith(String.valueOf(denizenTime))) {
        String activityScript=activity.split(""String_Node_Str"",2)[1];
        if (plugin.getSaves().contains(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str"")) {
          if (!plugin.getSaves().getString(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str"").equals(activityScript))           setActivityScript(theDenizen,activityScript);
        }
 else         setActivityScript(theDenizen,activityScript);
      }
    }
  }
}","public void scheduleScripts(){
  if (plugin.getDenizenNPCRegistry().getDenizens().isEmpty())   return;
  for (  DenizenNPC theDenizen : plugin.getDenizenNPCRegistry().getDenizens().values()) {
    if (!theDenizen.isSpawned())     continue;
    int denizenTime=Math.round(theDenizen.getWorld().getTime() / 1000);
    List<String> denizenActivities=plugin.getAssignments().getStringList(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str"");
    if (denizenActivities.isEmpty())     continue;
    for (    String activity : denizenActivities) {
      if (activity.startsWith(String.valueOf(denizenTime))) {
        String activityScript=activity.split(""String_Node_Str"",2)[1];
        setActivityScript(theDenizen,activityScript);
      }
    }
  }
}",0.7772511848341233
10520,"@Override public boolean execute(ScriptEntry theCommand) throws CommandException {
  Integer duration=null;
  Direction direction=null;
  Location theLocation=null;
  LivingEntity theEntity=null;
  DenizenNPC theDenizen=theCommand.getDenizen();
  if (theCommand.arguments() != null) {
    for (    String thisArgument : theCommand.arguments()) {
      if (plugin.debugMode)       plugin.getLogger().log(Level.INFO,""String_Node_Str"" + theCommand.getCommand() + ""String_Node_Str""+ thisArgument);
      if (thisArgument.matches(""String_Node_Str"")) {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        try {
          if (CitizensAPI.getNPCRegistry().getById(Integer.valueOf(thisArgument.split(""String_Node_Str"")[1])) != null) {
            theDenizen=plugin.getDenizenNPCRegistry().getDenizen(CitizensAPI.getNPCRegistry().getById(Integer.valueOf(thisArgument.split(""String_Node_Str"")[1])));
            if (plugin.debugMode)             plugin.getLogger().log(Level.INFO,""String_Node_Str"");
          }
        }
 catch (        Throwable e) {
          throw new CommandException(""String_Node_Str"");
        }
      }
 else       if (thisArgument.matches(""String_Node_Str"")) {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        duration=Integer.valueOf(thisArgument.split(""String_Node_Str"")[1]);
      }
 else       if (thisArgument.matches(""String_Node_Str"") && plugin.bookmarks.exists(thisArgument.split(""String_Node_Str"")[1],thisArgument.split(""String_Node_Str"")[2])) {
        theLocation=plugin.bookmarks.get(thisArgument.split(""String_Node_Str"")[1],thisArgument.split(""String_Node_Str"")[2],BookmarkType.LOCATION);
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
 else       if (thisArgument.matches(""String_Node_Str"") && plugin.bookmarks.exists(theCommand.getDenizen(),thisArgument.split(""String_Node_Str"")[1])) {
        theLocation=plugin.bookmarks.get(theCommand.getDenizen(),thisArgument.split(""String_Node_Str"")[1],BookmarkType.LOCATION);
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
 else {
        for (        Direction thisDirection : Direction.values()) {
          if (thisArgument.toUpperCase().equals(thisDirection.name())) {
            direction=Direction.valueOf(thisArgument);
            if (plugin.debugMode)             plugin.getLogger().log(Level.INFO,""String_Node_Str"");
          }
        }
      }
    }
  }
  if (theLocation != null)   look(theEntity,theDenizen,direction,duration,theLocation);
  if (theEntity == null && direction.equals(Direction.AT))   theEntity=(LivingEntity)theCommand.getPlayer();
  if (direction != null)   look(theEntity,theDenizen,direction,duration,theLocation);
  return true;
}","@Override public boolean execute(ScriptEntry theCommand) throws CommandException {
  Integer duration=null;
  Direction direction=null;
  Location theLocation=null;
  LivingEntity theEntity=null;
  DenizenNPC theDenizen=theCommand.getDenizen();
  if (theCommand.arguments() != null) {
    for (    String thisArgument : theCommand.arguments()) {
      if (plugin.debugMode)       plugin.getLogger().log(Level.INFO,""String_Node_Str"" + theCommand.getCommand() + ""String_Node_Str""+ thisArgument);
      if (thisArgument.matches(""String_Node_Str"")) {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        try {
          if (CitizensAPI.getNPCRegistry().getById(Integer.valueOf(thisArgument.split(""String_Node_Str"")[1])) != null) {
            theDenizen=plugin.getDenizenNPCRegistry().getDenizen(CitizensAPI.getNPCRegistry().getById(Integer.valueOf(thisArgument.split(""String_Node_Str"")[1])));
            if (plugin.debugMode)             plugin.getLogger().log(Level.INFO,""String_Node_Str"");
          }
        }
 catch (        Throwable e) {
          throw new CommandException(""String_Node_Str"");
        }
      }
 else       if (thisArgument.matches(""String_Node_Str"")) {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        duration=Integer.valueOf(thisArgument.split(""String_Node_Str"")[1]);
      }
 else       if (thisArgument.matches(""String_Node_Str"") && plugin.bookmarks.exists(thisArgument.split(""String_Node_Str"")[1],thisArgument.split(""String_Node_Str"")[2])) {
        theLocation=plugin.bookmarks.get(thisArgument.split(""String_Node_Str"")[1],thisArgument.split(""String_Node_Str"")[2],BookmarkType.LOCATION);
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
 else       if (thisArgument.matches(""String_Node_Str"") && plugin.bookmarks.exists(theCommand.getDenizen(),thisArgument.split(""String_Node_Str"")[1])) {
        theLocation=plugin.bookmarks.get(theCommand.getDenizen(),thisArgument.split(""String_Node_Str"")[1],BookmarkType.LOCATION);
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
 else {
        for (        Direction thisDirection : Direction.values()) {
          if (thisArgument.toUpperCase().equals(thisDirection.name())) {
            direction=Direction.valueOf(thisArgument);
            if (plugin.debugMode)             plugin.getLogger().log(Level.INFO,""String_Node_Str"");
          }
        }
      }
    }
  }
  if (theLocation != null)   look(theEntity,theDenizen,direction,duration,theLocation);
 else   if (theEntity == null && direction.equals(Direction.AT))   theEntity=(LivingEntity)theCommand.getPlayer();
 else   if (direction != null)   look(theEntity,theDenizen,direction,duration,theLocation);
  return true;
}",0.9978932584269664
10521,"@Override public boolean execute(ScriptEntry theEntry) throws CommandException {
  Boolean isGlobal=false;
  Integer duration=null;
  String theScript=null;
  if (theEntry.arguments() != null) {
    for (    String thisArg : theEntry.arguments()) {
      if (aRegex.matchesDuration(thisArg)) {
        duration=getIntegerModifier(thisArg);
        echoDebug(""String_Node_Str"",thisArg);
      }
 else       if (aRegex.matchesInteger(thisArg)) {
        duration=getIntegerModifier(thisArg);
        echoDebug(""String_Node_Str"",thisArg);
      }
 else       if (thisArg.equalsIgnoreCase(""String_Node_Str"")) {
        isGlobal=true;
        echoDebug(""String_Node_Str"",thisArg);
      }
 else       if (aRegex.matchesScript(thisArg)) {
        theScript=getModifier(thisArg);
        echoDebug(""String_Node_Str"",thisArg);
      }
 else {
        echoDebug(""String_Node_Str"",thisArg);
      }
    }
  }
  if (duration != null) {
    if (theScript == null)     theScript=theEntry.getScript();
    if (isGlobal)     plugin.getSaves().set(""String_Node_Str"" + theScript + ""String_Node_Str"",System.currentTimeMillis() + (duration * 1000));
 else     if (!isGlobal)     plugin.getSaves().set(""String_Node_Str"" + theEntry.getPlayer() + ""String_Node_Str""+ theScript+ ""String_Node_Str"",System.currentTimeMillis() + (duration * 1000));
    return true;
  }
  echoError(""String_Node_Str"");
  return false;
}","@Override public boolean execute(ScriptEntry theEntry) throws CommandException {
  Boolean isGlobal=false;
  Integer duration=null;
  String theScript=null;
  if (theEntry.arguments() != null) {
    for (    String thisArg : theEntry.arguments()) {
      if (aRegex.matchesDuration(thisArg)) {
        duration=getIntegerModifier(thisArg);
        echoDebug(""String_Node_Str"",thisArg);
      }
 else       if (aRegex.matchesInteger(thisArg)) {
        duration=getIntegerModifier(thisArg);
        echoDebug(""String_Node_Str"",thisArg);
      }
 else       if (thisArg.equalsIgnoreCase(""String_Node_Str"")) {
        isGlobal=true;
        echoDebug(""String_Node_Str"",thisArg);
      }
 else       if (aRegex.matchesScript(thisArg)) {
        theScript=getModifier(thisArg);
        echoDebug(""String_Node_Str"",thisArg);
      }
 else {
        echoDebug(""String_Node_Str"",thisArg);
      }
    }
  }
  if (duration != null) {
    if (theScript == null)     theScript=theEntry.getScript();
    if (isGlobal)     plugin.getSaves().set(""String_Node_Str"" + theScript + ""String_Node_Str"",System.currentTimeMillis() + (duration * 1000));
 else     if (!isGlobal)     plugin.getSaves().set(""String_Node_Str"" + theEntry.getPlayer().getName() + ""String_Node_Str""+ theScript+ ""String_Node_Str"",System.currentTimeMillis() + (duration * 1000));
    return true;
  }
  echoError(""String_Node_Str"");
  return false;
}",0.9964209019327128
10522,"@Override public boolean onCommand(CommandSender sender,Command cmd,String cmdLabel,String[] args){
  if (args.length < 1) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    saveSaves();
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    reloadConfig();
    reloadScripts();
    reloadAssignments();
    reloadSaves();
    bookmarks.buildLocationTriggerList();
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    sender.sendMessage(ChatColor.GREEN + utilities.getVersionString());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    if (!debugMode) {
      debugMode=true;
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else     if (debugMode) {
      debugMode=false;
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    if (!showStackTraces) {
      showStackTraces=true;
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else     if (showStackTraces) {
      showStackTraces=false;
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
  }
  if (!(sender instanceof Player)) {
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  Player player=(Player)sender;
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(""String_Node_Str"" + player.getTargetBlock(null,20).getData());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    Block toAddData=player.getTargetBlock(null,20);
    toAddData.setData((byte)(toAddData.getData() + 1));
    player.sendMessage(""String_Node_Str"" + player.getTargetBlock(null,20).getData());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    Block toAddData=player.getTargetBlock(null,20);
    toAddData.setData((byte)(toAddData.getData() - 1));
    player.sendMessage(""String_Node_Str"" + player.getTargetBlock(null,20).getData());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 1) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!debugMode) {
      debugMode=true;
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else     if (debugMode) {
      debugMode=false;
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    saveSaves();
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    reloadSaves();
    reloadConfig();
    reloadScripts();
    reloadAssignments();
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.GREEN + utilities.getVersionString());
    return true;
  }
  if (player.getMetadata(""String_Node_Str"").isEmpty()) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  NPC theNPC=CitizensAPI.getNPCRegistry().getById(player.getMetadata(""String_Node_Str"").get(0).asInt());
  if (!theNPC.hasTrait(DenizenTrait.class)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    getScriptEngine().helper.showInfo(player,getDenizenNPCRegistry().getDenizen(theNPC));
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    getSaves().set(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"",null);
    activityEngine.scheduleScripts();
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 2 || args.length > 2) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
 else {
      try {
        getDenizenNPCRegistry().getDenizen(theNPC).setHealth(Integer.valueOf(args[1]));
      }
 catch (      NumberFormatException e) {
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(theNPC.getTrait(DenizenTrait.class).listTriggers());
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length > 2) {
        player.sendMessage(theNPC.getTrait(DenizenTrait.class).toggleTrigger(args[2]));
        return true;
      }
 else {
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 3) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length < 4) {
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        return true;
      }
 else       getActivityRegistry().addActivity(args[2],theNPC,new String[0],Integer.valueOf(args[3]));
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      getActivityRegistry().removeActivity(args[2],theNPC);
    }
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 3) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      List<String> locationList=getSaves().getStringList(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"");
      locationList.add(args[2] + ""String_Node_Str"" + player.getWorld().getName()+ ""String_Node_Str""+ player.getLocation().getX()+ ""String_Node_Str""+ player.getLocation().getY()+ ""String_Node_Str""+ player.getLocation().getZ()+ ""String_Node_Str""+ player.getLocation().getYaw()+ ""String_Node_Str""+ player.getLocation().getPitch());
      getSaves().set(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"",locationList);
      saveSaves();
      bookmarks.buildLocationTriggerList();
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      List<String> blockList=getSaves().getStringList(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"");
      Block targetBlock=player.getTargetBlock(null,6);
      blockList.add(args[2] + ""String_Node_Str"" + player.getWorld().getName()+ ""String_Node_Str""+ targetBlock.getX()+ ""String_Node_Str""+ targetBlock.getY()+ ""String_Node_Str""+ targetBlock.getZ());
      getSaves().set(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"",blockList);
      saveSaves();
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
  }
  return true;
}","@Override public boolean onCommand(CommandSender sender,Command cmd,String cmdLabel,String[] args){
  if (args.length < 1) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    saveSaves();
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    reloadConfig();
    reloadScripts();
    reloadAssignments();
    reloadSaves();
    bookmarks.buildLocationTriggerList();
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    sender.sendMessage(ChatColor.GREEN + utilities.getVersionString());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    if (!debugMode) {
      debugMode=true;
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else     if (debugMode) {
      debugMode=false;
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    if (!showStackTraces) {
      showStackTraces=true;
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else     if (showStackTraces) {
      showStackTraces=false;
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
  }
  if (!(sender instanceof Player)) {
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  Player player=(Player)sender;
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(""String_Node_Str"" + player.getTargetBlock(null,20).getData());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    Block toAddData=player.getTargetBlock(null,20);
    toAddData.setData((byte)(toAddData.getData() + 1));
    player.sendMessage(""String_Node_Str"" + player.getTargetBlock(null,20).getData());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    Block toAddData=player.getTargetBlock(null,20);
    toAddData.setData((byte)(toAddData.getData() - 1));
    player.sendMessage(""String_Node_Str"" + player.getTargetBlock(null,20).getData());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 1) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!debugMode) {
      debugMode=true;
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else     if (debugMode) {
      debugMode=false;
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    saveSaves();
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    reloadSaves();
    reloadConfig();
    reloadScripts();
    reloadAssignments();
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.GREEN + utilities.getVersionString());
    return true;
  }
  if (player.getMetadata(""String_Node_Str"").isEmpty()) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  NPC theNPC=CitizensAPI.getNPCRegistry().getById(player.getMetadata(""String_Node_Str"").get(0).asInt());
  if (!theNPC.hasTrait(DenizenTrait.class)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    getDenizenNPCRegistry().showInfo(player,getDenizenNPCRegistry().getDenizen(theNPC));
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    getSaves().set(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"",null);
    activityEngine.scheduleScripts();
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + theNPC.getName()+ ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 2 || args.length > 2) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
 else {
      try {
        getDenizenNPCRegistry().getDenizen(theNPC).setHealth(Integer.valueOf(args[1]));
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      }
 catch (      NumberFormatException e) {
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(theNPC.getTrait(DenizenTrait.class).listTriggers());
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length > 2) {
        player.sendMessage(theNPC.getTrait(DenizenTrait.class).toggleTrigger(args[2]));
        return true;
      }
 else {
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 3) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length < 4) {
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        return true;
      }
 else       getActivityRegistry().addActivity(args[2],theNPC,new String[0],Integer.valueOf(args[3]));
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      getActivityRegistry().removeActivity(args[2],theNPC);
    }
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 3) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      List<String> locationList=getSaves().getStringList(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"");
      locationList.add(args[2] + ""String_Node_Str"" + player.getWorld().getName()+ ""String_Node_Str""+ player.getLocation().getX()+ ""String_Node_Str""+ player.getLocation().getY()+ ""String_Node_Str""+ player.getLocation().getZ()+ ""String_Node_Str""+ player.getLocation().getYaw()+ ""String_Node_Str""+ player.getLocation().getPitch());
      getSaves().set(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"",locationList);
      saveSaves();
      bookmarks.buildLocationTriggerList();
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      List<String> blockList=getSaves().getStringList(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"");
      Block targetBlock=player.getTargetBlock(null,15);
      blockList.add(args[2] + ""String_Node_Str"" + player.getWorld().getName()+ ""String_Node_Str""+ targetBlock.getX()+ ""String_Node_Str""+ targetBlock.getY()+ ""String_Node_Str""+ targetBlock.getZ());
      getSaves().set(""String_Node_Str"" + theNPC.getName() + ""String_Node_Str"",blockList);
      saveSaves();
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
  }
  return true;
}",0.990591942381274
10523,abstract public void removeGoal(DenizenNPC npc);,"abstract public void removeGoal(DenizenNPC npc,boolean verbose);",0.8571428571428571
10524,"public void setActivityScript(DenizenNPC theDenizen,String activityScript){
  plugin.getLogger().info(""String_Node_Str"" + theDenizen.getName());
  plugin.getSaves().set(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str"",activityScript);
  if (!plugin.getScripts().contains(activityScript + ""String_Node_Str"")) {
    plugin.getLogger().info(""String_Node_Str"" + activityScript + ""String_Node_Str"");
    return;
  }
  Iterator<GoalEntry> activeGoal=theDenizen.getCitizensEntity().getDefaultGoalController().iterator();
  while (activeGoal.hasNext()) {
    theDenizen.getCitizensEntity().getDefaultGoalController().removeGoal(activeGoal.next().getGoal());
  }
  for (  String activity : plugin.getScripts().getStringList(activityScript + ""String_Node_Str"")) {
    String[] arguments=plugin.getScriptEngine().helper.buildArgs(activity.split(""String_Node_Str"",3)[2]);
    int priority=Integer.parseInt(activity.split(""String_Node_Str"",3)[0]);
    activity=activity.split(""String_Node_Str"",3)[1];
    plugin.getActivityRegistry().addActivity(activity,theDenizen.getCitizensEntity(),arguments,priority);
  }
}","public void setActivityScript(DenizenNPC theDenizen,String activityScript){
  plugin.getLogger().info(""String_Node_Str"" + theDenizen.getName());
  plugin.getSaves().set(""String_Node_Str"" + theDenizen.getName() + ""String_Node_Str"",activityScript);
  if (!plugin.getScripts().contains(activityScript + ""String_Node_Str"")) {
    plugin.getLogger().info(""String_Node_Str"" + activityScript + ""String_Node_Str"");
    return;
  }
  plugin.getActivityRegistry().removeAllActivities(theDenizen.getCitizensEntity());
  for (  String activity : plugin.getScripts().getStringList(activityScript + ""String_Node_Str"")) {
    String[] arguments=plugin.getScriptEngine().helper.buildArgs(activity.split(""String_Node_Str"",3)[2]);
    int priority=Integer.parseInt(activity.split(""String_Node_Str"",3)[0]);
    activity=activity.split(""String_Node_Str"",3)[1];
    plugin.getActivityRegistry().addActivity(activity,theDenizen.getCitizensEntity(),arguments,priority);
  }
}",0.8492486669898206
10525,"public void removeActivity(String activity,NPC theDenizen){
  if (activities.containsKey(activity.toUpperCase()))   activities.get(activity.toUpperCase()).removeGoal(plugin.getDenizenNPCRegistry().getDenizen(theDenizen));
 else   plugin.getLogger().log(Level.SEVERE,""String_Node_Str"");
}","public void removeActivity(String activity,NPC theDenizen){
  if (activities.containsKey(activity.toUpperCase()))   activities.get(activity.toUpperCase()).removeGoal(plugin.getDenizenNPCRegistry().getDenizen(theDenizen),true);
 else   plugin.getLogger().log(Level.SEVERE,""String_Node_Str"");
}",0.9913644214162348
10526,"public void removeGoal(DenizenNPC npc){
  if (wanderMap.containsKey(npc)) {
    npc.getCitizensEntity().getDefaultGoalController().removeGoal(wanderMap.get(npc));
    wanderMap.remove(npc);
    plugin.getLogger().info(""String_Node_Str"");
  }
 else {
    plugin.getLogger().info(""String_Node_Str"");
  }
}","public void removeGoal(DenizenNPC npc,boolean verbose){
  if (wanderMap.containsKey(npc)) {
    npc.getCitizensEntity().getDefaultGoalController().removeGoal(wanderMap.get(npc));
    wanderMap.remove(npc);
    if (verbose)     plugin.getLogger().info(""String_Node_Str"");
  }
 else {
    if (verbose)     plugin.getLogger().info(""String_Node_Str"");
  }
}",0.923780487804878
10527,"@Override public void run(DenizenNPC denizen,Location location,Boolean lookClose,Float checkYaw){
  if (denizen.getLocation().getYaw() == checkYaw) {
    denizen.getHandle().yaw=location.getYaw();
    denizen.getHandle().pitch=location.getPitch();
    denizen.getHandle().as=denizen.getHandle().yaw;
    denizen.lookClose(lookClose);
  }
}","@Override public void run(DenizenNPC denizen,Location location,Boolean lookClose,Float checkYaw){
  denizen.lookClose(lookClose);
  denizen.getHandle().yaw=location.getYaw();
  denizen.getHandle().pitch=location.getPitch();
  denizen.getHandle().as=denizen.getHandle().yaw;
}",0.6807817589576547
10528,"@Override public boolean execute(ScriptEntry theCommand) throws CommandException {
  Integer duration=null;
  Direction direction=null;
  Location theLocation=null;
  LivingEntity theEntity=null;
  DenizenNPC theDenizen=theCommand.getDenizen();
  if (theCommand.arguments() != null) {
    for (    String thisArgument : theCommand.arguments()) {
      if (plugin.debugMode)       plugin.getLogger().log(Level.INFO,""String_Node_Str"" + theCommand.getCommand() + ""String_Node_Str""+ thisArgument);
      if (thisArgument.matches(""String_Node_Str"")) {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        try {
          if (CitizensAPI.getNPCRegistry().getById(Integer.valueOf(thisArgument.split(""String_Node_Str"")[1])) != null) {
            theDenizen=plugin.getDenizenNPCRegistry().getDenizen(CitizensAPI.getNPCRegistry().getById(Integer.valueOf(thisArgument.split(""String_Node_Str"")[1])));
            if (plugin.debugMode)             plugin.getLogger().log(Level.INFO,""String_Node_Str"");
          }
        }
 catch (        Throwable e) {
          throw new CommandException(""String_Node_Str"");
        }
      }
 else       if (thisArgument.matches(""String_Node_Str"")) {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        duration=Integer.valueOf(thisArgument.split(""String_Node_Str"")[1]);
      }
 else       if (thisArgument.matches(""String_Node_Str"") && plugin.bookmarks.exists(thisArgument.split(""String_Node_Str"")[1],thisArgument.split(""String_Node_Str"")[2])) {
        theLocation=plugin.bookmarks.get(thisArgument.split(""String_Node_Str"")[1],thisArgument.split(""String_Node_Str"")[2],BookmarkType.LOCATION);
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
 else       if (thisArgument.matches(""String_Node_Str"") && plugin.bookmarks.exists(theCommand.getDenizen(),thisArgument.split(""String_Node_Str"")[1])) {
        theLocation=plugin.bookmarks.get(theCommand.getDenizen(),thisArgument,BookmarkType.LOCATION);
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
 else {
        for (        Direction thisDirection : Direction.values()) {
          if (thisArgument.toUpperCase().equals(thisDirection.name())) {
            direction=Direction.valueOf(thisArgument);
            if (plugin.debugMode)             plugin.getLogger().log(Level.INFO,""String_Node_Str"");
          }
        }
      }
    }
  }
  if (theEntity == null && direction.equals(Direction.AT))   theEntity=(LivingEntity)theCommand.getPlayer();
  if (direction != null)   look(theEntity,theDenizen,direction,duration,theLocation);
  if (theLocation != null)   look(theEntity,theDenizen,direction,duration,theLocation);
  return true;
}","@Override public boolean execute(ScriptEntry theCommand) throws CommandException {
  Integer duration=null;
  Direction direction=null;
  Location theLocation=null;
  LivingEntity theEntity=null;
  DenizenNPC theDenizen=theCommand.getDenizen();
  if (theCommand.arguments() != null) {
    for (    String thisArgument : theCommand.arguments()) {
      if (plugin.debugMode)       plugin.getLogger().log(Level.INFO,""String_Node_Str"" + theCommand.getCommand() + ""String_Node_Str""+ thisArgument);
      if (thisArgument.matches(""String_Node_Str"")) {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        try {
          if (CitizensAPI.getNPCRegistry().getById(Integer.valueOf(thisArgument.split(""String_Node_Str"")[1])) != null) {
            theDenizen=plugin.getDenizenNPCRegistry().getDenizen(CitizensAPI.getNPCRegistry().getById(Integer.valueOf(thisArgument.split(""String_Node_Str"")[1])));
            if (plugin.debugMode)             plugin.getLogger().log(Level.INFO,""String_Node_Str"");
          }
        }
 catch (        Throwable e) {
          throw new CommandException(""String_Node_Str"");
        }
      }
 else       if (thisArgument.matches(""String_Node_Str"")) {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        duration=Integer.valueOf(thisArgument.split(""String_Node_Str"")[1]);
      }
 else       if (thisArgument.matches(""String_Node_Str"") && plugin.bookmarks.exists(thisArgument.split(""String_Node_Str"")[1],thisArgument.split(""String_Node_Str"")[2])) {
        theLocation=plugin.bookmarks.get(thisArgument.split(""String_Node_Str"")[1],thisArgument.split(""String_Node_Str"")[2],BookmarkType.LOCATION);
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
 else       if (thisArgument.matches(""String_Node_Str"") && plugin.bookmarks.exists(theCommand.getDenizen(),thisArgument.split(""String_Node_Str"")[1])) {
        theLocation=plugin.bookmarks.get(theCommand.getDenizen(),thisArgument.split(""String_Node_Str"")[1],BookmarkType.LOCATION);
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
 else {
        for (        Direction thisDirection : Direction.values()) {
          if (thisArgument.toUpperCase().equals(thisDirection.name())) {
            direction=Direction.valueOf(thisArgument);
            if (plugin.debugMode)             plugin.getLogger().log(Level.INFO,""String_Node_Str"");
          }
        }
      }
    }
  }
  if (theLocation != null)   look(theEntity,theDenizen,direction,duration,theLocation);
  if (theEntity == null && direction.equals(Direction.AT))   theEntity=(LivingEntity)theCommand.getPlayer();
  if (direction != null)   look(theEntity,theDenizen,direction,duration,theLocation);
  return true;
}",0.96004243281471
10529,"private void look(LivingEntity theEntity,DenizenNPC theDenizen,Direction lookDir,Integer duration,Location lookLoc){
  Location restoreLocation=theDenizen.getEntity().getLocation();
  DenizenNPC restoreDenizen=theDenizen;
  Boolean restoreLookClose=theDenizen.isLookingClose();
  String lookWhere=""String_Node_Str"";
  if (lookDir != null)   lookWhere=lookDir.name();
  if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(true);
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
    theDenizen.getHandle().yaw=theDenizen.getLocation().getYaw() - (float)80;
    theDenizen.getHandle().as=theDenizen.getHandle().yaw;
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
    theDenizen.getHandle().yaw=theDenizen.getLocation().getYaw() + (float)80;
    theDenizen.getHandle().as=theDenizen.getHandle().yaw;
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
    theDenizen.getHandle().pitch=theDenizen.getHandle().pitch - (float)60;
    theDenizen.getHandle().as=theDenizen.getHandle().yaw;
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
    theDenizen.getHandle().pitch=theDenizen.getHandle().pitch + (float)40;
    theDenizen.getHandle().as=theDenizen.getHandle().yaw;
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
    theDenizen.getHandle().yaw=theDenizen.getLocation().getYaw() - 180;
    theDenizen.getHandle().as=theDenizen.getHandle().yaw;
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
    theDenizen.getHandle().yaw=0;
    theDenizen.getHandle().as=theDenizen.getHandle().yaw;
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
    theDenizen.getHandle().yaw=90;
    theDenizen.getHandle().as=theDenizen.getHandle().yaw;
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
    theDenizen.getHandle().yaw=180;
    theDenizen.getHandle().as=theDenizen.getHandle().yaw;
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
    theDenizen.getHandle().yaw=270;
    theDenizen.getHandle().as=theDenizen.getHandle().yaw;
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
    faceEntity(theDenizen.getEntity(),theEntity);
  }
 else   if (lookLoc != null) {
    theDenizen.lookClose(false);
    theDenizen.getHandle().pitch=lookLoc.getPitch();
    theDenizen.getHandle().yaw=lookLoc.getYaw();
    theDenizen.getHandle().as=theDenizen.getHandle().yaw;
  }
  if (duration != null) {
    plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new LookCommandRunnable<DenizenNPC,Location,Boolean,Float>(restoreDenizen,restoreLocation,restoreLookClose,theDenizen.getLocation().getYaw()){
      @Override public void run(      DenizenNPC denizen,      Location location,      Boolean lookClose,      Float checkYaw){
        if (denizen.getLocation().getYaw() == checkYaw) {
          denizen.getHandle().yaw=location.getYaw();
          denizen.getHandle().pitch=location.getPitch();
          denizen.getHandle().as=denizen.getHandle().yaw;
          denizen.lookClose(lookClose);
        }
      }
    }
,duration * 20);
  }
}","private void look(LivingEntity theEntity,DenizenNPC theDenizen,Direction lookDir,Integer duration,Location lookLoc){
  Location restoreLocation=theDenizen.getEntity().getLocation();
  DenizenNPC restoreDenizen=theDenizen;
  Boolean restoreLookClose=theDenizen.isLookingClose();
  String lookWhere=""String_Node_Str"";
  if (lookDir != null)   lookWhere=lookDir.name();
  if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(true);
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
    theDenizen.getHandle().yaw=theDenizen.getLocation().getYaw() - (float)80;
    theDenizen.getHandle().as=theDenizen.getHandle().yaw;
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
    theDenizen.getHandle().yaw=theDenizen.getLocation().getYaw() + (float)80;
    theDenizen.getHandle().as=theDenizen.getHandle().yaw;
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
    theDenizen.getHandle().pitch=theDenizen.getHandle().pitch - (float)60;
    theDenizen.getHandle().as=theDenizen.getHandle().yaw;
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
    theDenizen.getHandle().pitch=theDenizen.getHandle().pitch + (float)40;
    theDenizen.getHandle().as=theDenizen.getHandle().yaw;
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
    theDenizen.getHandle().yaw=theDenizen.getLocation().getYaw() - 180;
    theDenizen.getHandle().as=theDenizen.getHandle().yaw;
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
    theDenizen.getHandle().yaw=0;
    theDenizen.getHandle().as=theDenizen.getHandle().yaw;
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
    theDenizen.getHandle().yaw=90;
    theDenizen.getHandle().as=theDenizen.getHandle().yaw;
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
    theDenizen.getHandle().yaw=180;
    theDenizen.getHandle().as=theDenizen.getHandle().yaw;
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
    theDenizen.getHandle().yaw=270;
    theDenizen.getHandle().as=theDenizen.getHandle().yaw;
  }
 else   if (lookWhere.equals(""String_Node_Str"")) {
    theDenizen.lookClose(false);
    faceEntity(theDenizen.getEntity(),theEntity);
  }
 else   if (lookLoc != null) {
    theDenizen.lookClose(false);
    theDenizen.getHandle().pitch=lookLoc.getPitch();
    theDenizen.getHandle().yaw=lookLoc.getYaw();
    theDenizen.getHandle().as=theDenizen.getHandle().yaw;
  }
  if (duration != null) {
    plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new LookCommandRunnable<DenizenNPC,Location,Boolean,Float>(restoreDenizen,restoreLocation,restoreLookClose,theDenizen.getLocation().getYaw()){
      @Override public void run(      DenizenNPC denizen,      Location location,      Boolean lookClose,      Float checkYaw){
        denizen.lookClose(lookClose);
        denizen.getHandle().yaw=location.getYaw();
        denizen.getHandle().pitch=location.getPitch();
        denizen.getHandle().as=denizen.getHandle().yaw;
      }
    }
,duration * 20);
  }
}",0.979851851851852
10530,"@Override public boolean execute(ScriptEntry theEntry) throws CommandException {
  Location interactLocation=null;
  Integer duration=null;
  if (theEntry.arguments() != null) {
    for (    String thisArgument : theEntry.arguments()) {
      if (plugin.debugMode)       plugin.getLogger().info(""String_Node_Str"" + theEntry.getCommand() + ""String_Node_Str""+ thisArgument);
 else       if (thisArgument.toUpperCase().contains(""String_Node_Str""))       if (thisArgument.split(""String_Node_Str"")[1].matches(""String_Node_Str"")) {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        duration=Integer.valueOf(thisArgument.split(""String_Node_Str"")[1]);
      }
 else       if (plugin.bookmarks.exists(theEntry.getDenizen(),thisArgument)) {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"" + thisArgument + ""String_Node_Str"");
        interactLocation=plugin.bookmarks.get(theEntry.getDenizen(),thisArgument,BookmarkType.LOCATION);
      }
 else       if (thisArgument.split(""String_Node_Str"").length == 2) {
        if (plugin.bookmarks.exists(thisArgument.split(""String_Node_Str"")[0],thisArgument.split(""String_Node_Str"")[1]))         if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"" + thisArgument.split(""String_Node_Str"")[0] + ""String_Node_Str"");
        interactLocation=plugin.bookmarks.get(thisArgument.split(""String_Node_Str"")[0],thisArgument.split(""String_Node_Str"")[1],BookmarkType.LOCATION);
      }
 else {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
    }
  }
  if (interactLocation != null) {
    if (interactLocation.getBlock().getType() == Material.LEVER) {
      World theWorld=interactLocation.getWorld();
      net.minecraft.server.Block.LEVER.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null,0,0f,0f,0f);
      return true;
    }
 else     if (interactLocation.getBlock().getType() == Material.STONE_BUTTON) {
      World theWorld=interactLocation.getWorld();
      net.minecraft.server.Block.STONE_BUTTON.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null,0,0f,0f,0f);
      return true;
    }
 else     if (interactLocation.getBlock().getType() == Material.STONE_PLATE) {
      World theWorld=interactLocation.getWorld();
      net.minecraft.server.Block.STONE_PLATE.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null,0,0f,0f,0f);
      return true;
    }
 else     if (interactLocation.getBlock().getType() == Material.WOOD_PLATE) {
      World theWorld=interactLocation.getWorld();
      net.minecraft.server.Block.WOOD_PLATE.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null,0,0f,0f,0f);
      return true;
    }
 else {
      if (plugin.debugMode)       plugin.getLogger().log(Level.INFO,""String_Node_Str"" + interactLocation.getBlock().getType().name() + ""String_Node_Str"");
    }
  }
  if (duration != null) {
    plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new SwitchCommandRunnable<Location>(interactLocation){
      @Override public void run(      Location interactLocation){
        if (interactLocation != null) {
          if (interactLocation.getBlock().getType() == Material.LEVER) {
            World theWorld=interactLocation.getWorld();
            net.minecraft.server.Block.LEVER.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null,0,0f,0f,0f);
            return;
          }
 else           if (interactLocation.getBlock().getType() == Material.STONE_BUTTON) {
            World theWorld=interactLocation.getWorld();
            net.minecraft.server.Block.STONE_BUTTON.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null,0,0f,0f,0f);
            return;
          }
 else           if (interactLocation.getBlock().getType() == Material.STONE_PLATE) {
            World theWorld=interactLocation.getWorld();
            net.minecraft.server.Block.STONE_PLATE.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null,0,0f,0f,0f);
            return;
          }
 else           if (interactLocation.getBlock().getType() == Material.WOOD_PLATE) {
            World theWorld=interactLocation.getWorld();
            net.minecraft.server.Block.WOOD_PLATE.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null,0,0f,0f,0f);
            return;
          }
 else {
            if (plugin.debugMode)             plugin.getLogger().log(Level.INFO,""String_Node_Str"" + interactLocation.getBlock().getType().name() + ""String_Node_Str"");
          }
        }
      }
    }
,duration * 20);
  }
  return false;
}","@Override public boolean execute(ScriptEntry theEntry) throws CommandException {
  Location interactLocation=null;
  Integer duration=null;
  if (theEntry.arguments() != null) {
    for (    String thisArgument : theEntry.arguments()) {
      if (plugin.debugMode)       plugin.getLogger().info(""String_Node_Str"" + theEntry.getCommand() + ""String_Node_Str""+ thisArgument);
 else       if (thisArgument.toUpperCase().contains(""String_Node_Str""))       if (thisArgument.split(""String_Node_Str"")[1].matches(""String_Node_Str"")) {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        duration=Integer.valueOf(thisArgument.split(""String_Node_Str"")[1]);
      }
 else       if (thisArgument.matches(""String_Node_Str"") && plugin.bookmarks.exists(thisArgument.split(""String_Node_Str"")[1],thisArgument.split(""String_Node_Str"")[2])) {
        interactLocation=plugin.bookmarks.get(thisArgument.split(""String_Node_Str"")[1],thisArgument.split(""String_Node_Str"")[2],BookmarkType.LOCATION);
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
 else       if (thisArgument.matches(""String_Node_Str"") && plugin.bookmarks.exists(theEntry.getDenizen(),thisArgument.split(""String_Node_Str"")[1])) {
        interactLocation=plugin.bookmarks.get(theEntry.getDenizen(),thisArgument,BookmarkType.LOCATION);
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
 else {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
    }
  }
  if (interactLocation != null) {
    if (interactLocation.getBlock().getType() == Material.LEVER) {
      World theWorld=interactLocation.getWorld();
      net.minecraft.server.Block.LEVER.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null,0,0f,0f,0f);
      return true;
    }
 else     if (interactLocation.getBlock().getType() == Material.STONE_BUTTON) {
      World theWorld=interactLocation.getWorld();
      net.minecraft.server.Block.STONE_BUTTON.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null,0,0f,0f,0f);
      return true;
    }
 else     if (interactLocation.getBlock().getType() == Material.STONE_PLATE) {
      World theWorld=interactLocation.getWorld();
      net.minecraft.server.Block.STONE_PLATE.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null,0,0f,0f,0f);
      return true;
    }
 else     if (interactLocation.getBlock().getType() == Material.WOOD_PLATE) {
      World theWorld=interactLocation.getWorld();
      net.minecraft.server.Block.WOOD_PLATE.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null,0,0f,0f,0f);
      return true;
    }
 else {
      if (plugin.debugMode)       plugin.getLogger().log(Level.INFO,""String_Node_Str"" + interactLocation.getBlock().getType().name() + ""String_Node_Str"");
    }
  }
  if (duration != null) {
    plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new SwitchCommandRunnable<Location>(interactLocation){
      @Override public void run(      Location interactLocation){
        if (interactLocation != null) {
          if (interactLocation.getBlock().getType() == Material.LEVER) {
            World theWorld=interactLocation.getWorld();
            net.minecraft.server.Block.LEVER.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null,0,0f,0f,0f);
            return;
          }
 else           if (interactLocation.getBlock().getType() == Material.STONE_BUTTON) {
            World theWorld=interactLocation.getWorld();
            net.minecraft.server.Block.STONE_BUTTON.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null,0,0f,0f,0f);
            return;
          }
 else           if (interactLocation.getBlock().getType() == Material.STONE_PLATE) {
            World theWorld=interactLocation.getWorld();
            net.minecraft.server.Block.STONE_PLATE.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null,0,0f,0f,0f);
            return;
          }
 else           if (interactLocation.getBlock().getType() == Material.WOOD_PLATE) {
            World theWorld=interactLocation.getWorld();
            net.minecraft.server.Block.WOOD_PLATE.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null,0,0f,0f,0f);
            return;
          }
 else {
            if (plugin.debugMode)             plugin.getLogger().log(Level.INFO,""String_Node_Str"" + interactLocation.getBlock().getType().name() + ""String_Node_Str"");
          }
        }
      }
    }
,duration * 20);
  }
  return false;
}",0.91167101071532
10531,"public void showInfo(Player theClicker){
  sE.showInfo(theClicker,this);
}","public void showInfo(Player theClicker){
  plugin.getDenizenNPCRegistry().showInfo(theClicker,this);
}",0.8295454545454546
10532,"@Override public boolean execute(ScriptEntry theEntry) throws CommandException {
  Boolean isGlobal=false;
  Integer duration=null;
  String theScript=null;
  if (theEntry.arguments() != null) {
    for (    String thisArg : theEntry.arguments()) {
      if (aRegex.matchesDuration(thisArg)) {
        duration=getIntegerModifier(thisArg);
        echoDebug(""String_Node_Str"",thisArg);
      }
 else       if (aRegex.matchesInteger(thisArg)) {
        duration=getIntegerModifier(thisArg);
        echoDebug(""String_Node_Str"",thisArg);
      }
 else       if (thisArg.equalsIgnoreCase(""String_Node_Str"")) {
        isGlobal=true;
        echoDebug(""String_Node_Str"",thisArg);
      }
 else       if (aRegex.matchesScript(thisArg)) {
        theScript=getModifier(thisArg);
        echoDebug(""String_Node_Str"",thisArg);
      }
 else {
        echoDebug(""String_Node_Str"",thisArg);
      }
    }
  }
  if (duration != null) {
    if (theScript == null)     theScript=theEntry.getScript();
    if (isGlobal)     plugin.getSaves().set(""String_Node_Str"" + theScript + ""String_Node_Str"",System.currentTimeMillis() + (duration * 1000));
 else     if (!isGlobal)     plugin.getSaves().set(""String_Node_Str"" + theEntry.getPlayer().getName() + ""String_Node_Str""+ theScript+ ""String_Node_Str"",System.currentTimeMillis() + (duration * 1000));
    return true;
  }
  echoError(""String_Node_Str"");
  return false;
}","@Override public boolean execute(ScriptEntry theEntry) throws CommandException {
  Boolean isGlobal=false;
  Integer duration=null;
  String theScript=null;
  if (theEntry.arguments() != null) {
    for (    String thisArg : theEntry.arguments()) {
      if (aRegex.matchesDuration(thisArg)) {
        duration=getIntegerModifier(thisArg);
        echoDebug(""String_Node_Str"",thisArg);
      }
 else       if (aRegex.matchesInteger(thisArg)) {
        duration=getIntegerModifier(thisArg);
        echoDebug(""String_Node_Str"",thisArg);
      }
 else       if (thisArg.equalsIgnoreCase(""String_Node_Str"")) {
        isGlobal=true;
        echoDebug(""String_Node_Str"",thisArg);
      }
 else       if (aRegex.matchesScript(thisArg)) {
        theScript=getModifier(thisArg);
        echoDebug(""String_Node_Str"",thisArg);
      }
 else {
        echoDebug(""String_Node_Str"",thisArg);
      }
    }
  }
  if (duration != null) {
    if (theScript == null)     theScript=theEntry.getScript();
    if (isGlobal) {
      plugin.getSaves().set(""String_Node_Str"" + theScript + ""String_Node_Str"",System.currentTimeMillis() + (duration * 1000));
      plugin.saveSaves();
    }
 else     if (!isGlobal) {
      plugin.getSaves().set(""String_Node_Str"" + theEntry.getPlayer().getName() + ""String_Node_Str""+ theScript+ ""String_Node_Str"",System.currentTimeMillis() + (duration * 1000));
      plugin.saveSaves();
    }
    return true;
  }
  echoError(""String_Node_Str"");
  return false;
}",0.9659248956884562
10533,"@Override public boolean execute(ScriptEntry theCommand) throws CommandException {
  String theScript=theCommand.getScript();
  if (theCommand.arguments() != null) {
    for (    String thisArgument : theCommand.arguments()) {
      if (plugin.debugMode)       plugin.getLogger().log(Level.INFO,""String_Node_Str"" + theCommand.getCommand() + ""String_Node_Str""+ thisArgument);
      if (thisArgument.contains(""String_Node_Str""))       theScript=thisArgument.split(""String_Node_Str"",2)[1];
 else {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
    }
  }
  int finishes=plugin.getAssignments().getInt(""String_Node_Str"" + theCommand.getPlayer().getName() + ""String_Node_Str""+ theScript+ ""String_Node_Str""+ ""String_Node_Str"",0);
  finishes++;
  plugin.getSaves().set(""String_Node_Str"" + theCommand.getPlayer().getName() + ""String_Node_Str""+ theScript+ ""String_Node_Str""+ ""String_Node_Str"",finishes);
  plugin.saveSaves();
  return true;
}","@Override public boolean execute(ScriptEntry theCommand) throws CommandException {
  String theScript=theCommand.getScript();
  if (theCommand.arguments() != null) {
    for (    String thisArgument : theCommand.arguments()) {
      if (plugin.debugMode)       plugin.getLogger().log(Level.INFO,""String_Node_Str"" + theCommand.getCommand() + ""String_Node_Str""+ thisArgument);
      if (thisArgument.contains(""String_Node_Str""))       theScript=thisArgument.split(""String_Node_Str"",2)[1];
 else {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
    }
  }
  int finishes=plugin.getSaves().getInt(""String_Node_Str"" + theCommand.getPlayer().getName() + ""String_Node_Str""+ theScript+ ""String_Node_Str""+ ""String_Node_Str"",0);
  finishes++;
  plugin.getSaves().set(""String_Node_Str"" + theCommand.getPlayer().getName() + ""String_Node_Str""+ theScript+ ""String_Node_Str""+ ""String_Node_Str"",finishes);
  plugin.saveSaves();
  return true;
}",0.992878942014242
10534,"public void lookClose(boolean lookclose){
  if (!lookclose) {
    if (!citizensNPC.getTrait(LookClose.class).toggle())     citizensNPC.getTrait(LookClose.class).toggle();
  }
 else   if (lookclose) {
    if (citizensNPC.getTrait(LookClose.class).toggle())     citizensNPC.getTrait(LookClose.class).toggle();
  }
}","public void lookClose(boolean lookclose){
  if (!lookclose) {
    if (citizensNPC.getTrait(LookClose.class).toggle())     citizensNPC.getTrait(LookClose.class).toggle();
  }
 else   if (lookclose) {
    if (!citizensNPC.getTrait(LookClose.class).toggle())     citizensNPC.getTrait(LookClose.class).toggle();
  }
}",0.9968051118210862
10535,"@Override public boolean execute(ScriptEntry theEntry) throws CommandException {
  TakeType takeType=null;
  int amount=1;
  ItemStack item=null;
  if (theEntry.arguments() != null) {
    for (    String thisArgument : theEntry.arguments()) {
      if (plugin.debugMode)       plugin.getLogger().info(""String_Node_Str"" + theEntry.getCommand() + ""String_Node_Str""+ thisArgument);
      if (thisArgument.matches(""String_Node_Str"")) {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        amount=Integer.valueOf(thisArgument.split(""String_Node_Str"")[1]);
      }
 else       if (thisArgument.toUpperCase().contains(""String_Node_Str"")) {
        takeType=TakeType.ITEMINHAND;
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
 else       if (thisArgument.toUpperCase().contains(""String_Node_Str"")) {
        takeType=TakeType.MONEY;
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
 else       if (thisArgument.matches(""String_Node_Str"")) {
        takeType=TakeType.ITEM;
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        try {
          item=new ItemStack(Integer.valueOf(thisArgument));
        }
 catch (        Exception e) {
          plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        }
      }
 else       if (thisArgument.matches(""String_Node_Str"")) {
        takeType=TakeType.ITEM;
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        try {
          item=new ItemStack(Integer.valueOf(thisArgument.split(""String_Node_Str"")[0]));
          item.setData(new MaterialData(Integer.valueOf(thisArgument.split(""String_Node_Str"")[1])));
        }
 catch (        Exception e) {
          plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        }
      }
 else       if (thisArgument.matches(""String_Node_Str"")) {
        takeType=TakeType.ITEM;
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        try {
          item=new ItemStack(Material.valueOf(thisArgument.toUpperCase()));
        }
 catch (        Exception e) {
          plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        }
      }
 else       if (thisArgument.matches(""String_Node_Str"")) {
        takeType=TakeType.ITEM;
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        try {
          item=new ItemStack(Material.valueOf(thisArgument.split(""String_Node_Str"")[0].toUpperCase()));
          item.setData(new MaterialData(Integer.valueOf(thisArgument.split(""String_Node_Str"")[1])));
        }
 catch (        Exception e) {
          plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        }
      }
 else       if (plugin.debugMode)       plugin.getLogger().log(Level.INFO,""String_Node_Str"");
    }
  }
  if (takeType != null) {
switch (takeType) {
case MONEY:
      if (plugin.economy != null) {
        double playerBalance=plugin.economy.getBalance(theEntry.getPlayer().getName());
        double doubleAmount=Double.valueOf(amount);
        if (doubleAmount > playerBalance) {
          if (plugin.debugMode)           plugin.getLogger().log(Level.INFO,""String_Node_Str"");
          doubleAmount=playerBalance;
        }
        plugin.economy.withdrawPlayer(theEntry.getPlayer().getName(),doubleAmount);
      }
 else {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
    break;
case ITEMINHAND:
  int inHandAmt=theEntry.getPlayer().getItemInHand().getAmount();
ItemStack newHandItem=new ItemStack(Material.AIR);
if (amount > inHandAmt) {
amount=inHandAmt;
if (plugin.debugMode) plugin.getLogger().log(Level.INFO,""String_Node_Str"");
}
 else {
newHandItem=new ItemStack(theEntry.getPlayer().getItemInHand().getType(),inHandAmt - amount);
newHandItem.setData(new MaterialData(theEntry.getPlayer().getItemInHand().getData().getData()));
}
theEntry.getPlayer().setItemInHand(newHandItem);
break;
case ITEM:
item.setAmount(amount);
if (!theEntry.getPlayer().getInventory().removeItem().isEmpty()) if (plugin.debugMode) plugin.getLogger().log(Level.INFO,""String_Node_Str"");
break;
}
return true;
}
if (plugin.debugMode) throw new CommandException(""String_Node_Str"");
return false;
}","@Override public boolean execute(ScriptEntry theEntry) throws CommandException {
  TakeType takeType=null;
  int amount=1;
  ItemStack item=null;
  if (theEntry.arguments() != null) {
    for (    String thisArgument : theEntry.arguments()) {
      if (plugin.debugMode)       plugin.getLogger().info(""String_Node_Str"" + theEntry.getCommand() + ""String_Node_Str""+ thisArgument);
      if (thisArgument.matches(""String_Node_Str"")) {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        amount=Integer.valueOf(thisArgument.split(""String_Node_Str"")[1]);
      }
 else       if (thisArgument.toUpperCase().contains(""String_Node_Str"")) {
        takeType=TakeType.ITEMINHAND;
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
 else       if (thisArgument.toUpperCase().contains(""String_Node_Str"")) {
        takeType=TakeType.MONEY;
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
 else       if (thisArgument.matches(""String_Node_Str"")) {
        takeType=TakeType.ITEM;
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        try {
          item=new ItemStack(Integer.valueOf(thisArgument));
        }
 catch (        Exception e) {
          plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        }
      }
 else       if (thisArgument.matches(""String_Node_Str"")) {
        takeType=TakeType.ITEM;
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        try {
          item=new ItemStack(Integer.valueOf(thisArgument.split(""String_Node_Str"")[0]));
          item.setData(new MaterialData(Integer.valueOf(thisArgument.split(""String_Node_Str"")[1])));
        }
 catch (        Exception e) {
          plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        }
      }
 else       if (thisArgument.matches(""String_Node_Str"")) {
        takeType=TakeType.ITEM;
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        try {
          item=new ItemStack(Material.valueOf(thisArgument.toUpperCase()));
        }
 catch (        Exception e) {
          plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        }
      }
 else       if (thisArgument.matches(""String_Node_Str"")) {
        takeType=TakeType.ITEM;
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        try {
          item=new ItemStack(Material.valueOf(thisArgument.split(""String_Node_Str"")[0].toUpperCase()));
          item.setData(new MaterialData(Integer.valueOf(thisArgument.split(""String_Node_Str"")[1])));
        }
 catch (        Exception e) {
          plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        }
      }
 else       if (plugin.debugMode)       plugin.getLogger().log(Level.INFO,""String_Node_Str"");
    }
  }
  if (takeType != null) {
switch (takeType) {
case MONEY:
      if (plugin.economy != null) {
        double playerBalance=plugin.economy.getBalance(theEntry.getPlayer().getName());
        double doubleAmount=Double.valueOf(amount);
        if (doubleAmount > playerBalance) {
          if (plugin.debugMode)           plugin.getLogger().log(Level.INFO,""String_Node_Str"");
          doubleAmount=playerBalance;
        }
        plugin.economy.withdrawPlayer(theEntry.getPlayer().getName(),doubleAmount);
      }
 else {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
    break;
case ITEMINHAND:
  int inHandAmt=theEntry.getPlayer().getItemInHand().getAmount();
ItemStack newHandItem=new ItemStack(Material.AIR);
if (amount > inHandAmt) {
amount=inHandAmt;
if (plugin.debugMode) plugin.getLogger().log(Level.INFO,""String_Node_Str"");
}
 else {
newHandItem=new ItemStack(theEntry.getPlayer().getItemInHand().getType(),inHandAmt - amount);
newHandItem.setData(new MaterialData(theEntry.getPlayer().getItemInHand().getData().getData()));
}
theEntry.getPlayer().setItemInHand(newHandItem);
break;
case ITEM:
item.setAmount(amount);
if (!theEntry.getPlayer().getInventory().removeItem(item).isEmpty()) if (plugin.debugMode) plugin.getLogger().log(Level.INFO,""String_Node_Str"");
break;
}
return true;
}
if (plugin.debugMode) throw new CommandException(""String_Node_Str"");
return false;
}",0.999542648067688
10536,"@Override public boolean execute(ScriptEntry theEntry) throws CommandException {
}","@Override public boolean execute(ScriptEntry theEntry) throws CommandException {
  Location interactLocation=null;
  Integer duration=null;
  if (theEntry.arguments() != null) {
    for (    String thisArgument : theEntry.arguments()) {
      if (plugin.debugMode)       plugin.getLogger().info(""String_Node_Str"" + theEntry.getCommand() + ""String_Node_Str""+ thisArgument);
 else       if (thisArgument.toUpperCase().contains(""String_Node_Str""))       if (thisArgument.split(""String_Node_Str"")[1].matches(""String_Node_Str"")) {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        duration=Integer.valueOf(thisArgument.split(""String_Node_Str"")[1]);
      }
 else       if (plugin.bookmarks.exists(theEntry.getDenizen(),thisArgument)) {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"" + thisArgument + ""String_Node_Str"");
        interactLocation=plugin.bookmarks.get(theEntry.getDenizen(),thisArgument,BookmarkType.LOCATION);
      }
 else       if (thisArgument.split(""String_Node_Str"").length == 2) {
        if (plugin.bookmarks.exists(thisArgument.split(""String_Node_Str"")[0],thisArgument.split(""String_Node_Str"")[1]))         if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"" + thisArgument.split(""String_Node_Str"")[0] + ""String_Node_Str"");
        interactLocation=plugin.bookmarks.get(thisArgument.split(""String_Node_Str"")[0],thisArgument.split(""String_Node_Str"")[1],BookmarkType.LOCATION);
      }
 else {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
    }
  }
  if (interactLocation != null) {
    if (interactLocation.getBlock().getType() == Material.LEVER) {
      World theWorld=interactLocation.getWorld();
      net.minecraft.server.Block.LEVER.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null);
      return true;
    }
 else     if (interactLocation.getBlock().getType() == Material.STONE_BUTTON) {
      World theWorld=interactLocation.getWorld();
      net.minecraft.server.Block.STONE_BUTTON.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null);
      return true;
    }
 else     if (interactLocation.getBlock().getType() == Material.STONE_PLATE) {
      World theWorld=interactLocation.getWorld();
      net.minecraft.server.Block.STONE_PLATE.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null);
      return true;
    }
 else     if (interactLocation.getBlock().getType() == Material.WOOD_PLATE) {
      World theWorld=interactLocation.getWorld();
      net.minecraft.server.Block.WOOD_PLATE.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null);
      return true;
    }
 else {
      if (plugin.debugMode)       plugin.getLogger().log(Level.INFO,""String_Node_Str"" + interactLocation.getBlock().getType().name() + ""String_Node_Str"");
    }
  }
  if (duration != null) {
    plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new SwitchCommandRunnable<Location>(interactLocation){
      @Override public void run(      Location interactLocation){
        if (interactLocation != null) {
          if (interactLocation.getBlock().getType() == Material.LEVER) {
            World theWorld=interactLocation.getWorld();
            net.minecraft.server.Block.LEVER.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null);
            return;
          }
 else           if (interactLocation.getBlock().getType() == Material.STONE_BUTTON) {
            World theWorld=interactLocation.getWorld();
            net.minecraft.server.Block.STONE_BUTTON.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null);
            return;
          }
 else           if (interactLocation.getBlock().getType() == Material.STONE_PLATE) {
            World theWorld=interactLocation.getWorld();
            net.minecraft.server.Block.STONE_PLATE.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null);
            return;
          }
 else           if (interactLocation.getBlock().getType() == Material.WOOD_PLATE) {
            World theWorld=interactLocation.getWorld();
            net.minecraft.server.Block.WOOD_PLATE.interact(((CraftWorld)theWorld).getHandle(),interactLocation.getBlockX(),interactLocation.getBlockY(),interactLocation.getBlockZ(),null);
            return;
          }
 else {
            if (plugin.debugMode)             plugin.getLogger().log(Level.INFO,""String_Node_Str"" + interactLocation.getBlock().getType().name() + ""String_Node_Str"");
          }
        }
      }
    }
,duration * 20);
  }
  return false;
}",0.0315566673080623
10537,"public SwitchCommandRunnable(A a,B b){
  this.a=a;
  this.b=b;
}","public SwitchCommandRunnable(A a){
  this.a=a;
}",0.8571428571428571
10538,"public abstract void run(A a,B b);",public abstract void run(A a);,0.9375
10539,"public void registerCoreCommands(){
  ZapCommand zapCommand=new ZapCommand();
  EngageCommand engageCommand=new EngageCommand();
  SpawnCommand spawnCommand=new SpawnCommand();
  WaitCommand waitCommand=new WaitCommand();
  LookCommand lookCommand=new LookCommand();
  FailCommand failCommand=new FailCommand();
  FinishCommand finishCommand=new FinishCommand();
  ResetCommand resetCommand=new ResetCommand();
  FlagCommand flagCommand=new FlagCommand();
  StrikeCommand strikeCommand=new StrikeCommand();
  SwitchCommand switchCommand=new SwitchCommand();
  TalkCommand talkCommand=new TalkCommand();
  TeleportCommand teleportCommand=new TeleportCommand();
  ExecuteCommand executeCommand=new ExecuteCommand();
  TakeCommand takeCommand=new TakeCommand();
  try {
    takeCommand.activateAs(""String_Node_Str"");
    executeCommand.activateAs(""String_Node_Str"");
    teleportCommand.activateAs(""String_Node_Str"");
    talkCommand.activateAs(""String_Node_Str"");
    talkCommand.activateAs(""String_Node_Str"");
    talkCommand.activateAs(""String_Node_Str"");
    talkCommand.activateAs(""String_Node_Str"");
    talkCommand.activateAs(""String_Node_Str"");
    switchCommand.activateAs(""String_Node_Str"");
    zapCommand.activateAs(""String_Node_Str"");
    engageCommand.activateAs(""String_Node_Str"");
    engageCommand.activateAs(""String_Node_Str"");
    spawnCommand.activateAs(""String_Node_Str"");
    waitCommand.activateAs(""String_Node_Str"");
    lookCommand.activateAs(""String_Node_Str"");
    failCommand.activateAs(""String_Node_Str"");
    finishCommand.activateAs(""String_Node_Str"");
    resetCommand.activateAs(""String_Node_Str"");
    flagCommand.activateAs(""String_Node_Str"");
    strikeCommand.activateAs(""String_Node_Str"");
  }
 catch (  ActivationException e) {
    plugin.getLogger().log(Level.SEVERE,""String_Node_Str"");
    e.printStackTrace();
  }
}","public void registerCoreCommands(){
  ZapCommand zapCommand=new ZapCommand();
  EngageCommand engageCommand=new EngageCommand();
  SpawnCommand spawnCommand=new SpawnCommand();
  WaitCommand waitCommand=new WaitCommand();
  LookCommand lookCommand=new LookCommand();
  FailCommand failCommand=new FailCommand();
  FinishCommand finishCommand=new FinishCommand();
  ResetCommand resetCommand=new ResetCommand();
  FlagCommand flagCommand=new FlagCommand();
  StrikeCommand strikeCommand=new StrikeCommand();
  SwitchCommand switchCommand=new SwitchCommand();
  TalkCommand talkCommand=new TalkCommand();
  TeleportCommand teleportCommand=new TeleportCommand();
  ExecuteCommand executeCommand=new ExecuteCommand();
  TakeCommand takeCommand=new TakeCommand();
  GiveCommand giveCommand=new GiveCommand();
  try {
    giveCommand.activateAs(""String_Node_Str"");
    takeCommand.activateAs(""String_Node_Str"");
    executeCommand.activateAs(""String_Node_Str"");
    teleportCommand.activateAs(""String_Node_Str"");
    talkCommand.activateAs(""String_Node_Str"");
    talkCommand.activateAs(""String_Node_Str"");
    talkCommand.activateAs(""String_Node_Str"");
    talkCommand.activateAs(""String_Node_Str"");
    talkCommand.activateAs(""String_Node_Str"");
    switchCommand.activateAs(""String_Node_Str"");
    zapCommand.activateAs(""String_Node_Str"");
    engageCommand.activateAs(""String_Node_Str"");
    engageCommand.activateAs(""String_Node_Str"");
    spawnCommand.activateAs(""String_Node_Str"");
    waitCommand.activateAs(""String_Node_Str"");
    lookCommand.activateAs(""String_Node_Str"");
    failCommand.activateAs(""String_Node_Str"");
    finishCommand.activateAs(""String_Node_Str"");
    resetCommand.activateAs(""String_Node_Str"");
    flagCommand.activateAs(""String_Node_Str"");
    strikeCommand.activateAs(""String_Node_Str"");
  }
 catch (  ActivationException e) {
    plugin.getLogger().log(Level.SEVERE,""String_Node_Str"");
    e.printStackTrace();
  }
}",0.9757894736842104
10540,"@Override public boolean execute(ScriptEntry theEntry) throws CommandException {
  if (theEntry.getDelayedTime() > theEntry.getInitiatedTime()) {
    if (plugin.debugMode)     plugin.getLogger().log(Level.INFO,""String_Node_Str"");
    return true;
  }
  QueueType queueToHold=theEntry.sendingQueue();
  Player thePlayer=theEntry.getPlayer();
  theEntry.setInstant();
  if (theEntry.arguments() != null) {
    for (    String thisArgument : theEntry.arguments()) {
      if (plugin.debugMode)       plugin.getLogger().log(Level.INFO,""String_Node_Str"" + theEntry.getCommand() + ""String_Node_Str""+ thisArgument);
      if (thisArgument.matches(""String_Node_Str"")) {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        theEntry.setDelay(System.currentTimeMillis() + (Long.valueOf(thisArgument) * 1000));
      }
      if (thisArgument.toUpperCase().contains(""String_Node_Str""))       if (plugin.debugMode)       plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      try {
        queueToHold=QueueType.valueOf(thisArgument.split(""String_Node_Str"")[1]);
      }
 catch (      Throwable e) {
        throw new CommandException(""String_Node_Str"");
      }
    }
  }
  List<ScriptEntry> theList=new ArrayList<ScriptEntry>();
  theList.add(theEntry);
  if (queueToHold == QueueType.TASK) {
    if (plugin.debugMode)     plugin.getLogger().log(Level.INFO,""String_Node_Str"");
    plugin.getScriptEngine().injectToQueue(thePlayer,theList,QueueType.TASK,1);
    return true;
  }
  if (queueToHold == QueueType.TRIGGER) {
    if (plugin.debugMode)     plugin.getLogger().log(Level.INFO,""String_Node_Str"");
    plugin.getScriptEngine().injectToQueue(thePlayer,theList,QueueType.TRIGGER,1);
    return true;
  }
  throw new CommandException(""String_Node_Str"");
}","@Override public boolean execute(ScriptEntry theEntry) throws CommandException {
  if (theEntry.getDelayedTime() > theEntry.getInitiatedTime()) {
    if (plugin.debugMode)     plugin.getLogger().log(Level.INFO,""String_Node_Str"");
    return true;
  }
  QueueType queueToHold=theEntry.sendingQueue();
  Player thePlayer=theEntry.getPlayer();
  theEntry.setInstant();
  if (theEntry.arguments() != null) {
    for (    String thisArgument : theEntry.arguments()) {
      if (plugin.debugMode)       plugin.getLogger().log(Level.INFO,""String_Node_Str"" + theEntry.getCommand() + ""String_Node_Str""+ thisArgument);
      if (thisArgument.matches(""String_Node_Str"")) {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        theEntry.setDelay(System.currentTimeMillis() + (Long.valueOf(thisArgument) * 1000));
      }
      if (thisArgument.toUpperCase().contains(""String_Node_Str"")) {
        if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
        try {
          queueToHold=QueueType.valueOf(thisArgument.split(""String_Node_Str"")[1]);
        }
 catch (        Throwable e) {
          throw new CommandException(""String_Node_Str"");
        }
      }
    }
  }
  List<ScriptEntry> theList=new ArrayList<ScriptEntry>();
  theList.add(theEntry);
  if (queueToHold == QueueType.TASK) {
    if (plugin.debugMode)     plugin.getLogger().log(Level.INFO,""String_Node_Str"");
    plugin.getScriptEngine().injectToQueue(thePlayer,theList,QueueType.TASK,1);
    return true;
  }
  if (queueToHold == QueueType.TRIGGER) {
    if (plugin.debugMode)     plugin.getLogger().log(Level.INFO,""String_Node_Str"");
    plugin.getScriptEngine().injectToQueue(thePlayer,theList,QueueType.TRIGGER,1);
    return true;
  }
  throw new CommandException(""String_Node_Str"");
}",0.9928256070640176
10541,"public boolean execute(ScriptEntry theCommand){
  if (plugin.getCommandRegistry().getCommand(theCommand.getCommand()) != null) {
    Command command=plugin.getCommandRegistry().getCommand(theCommand.getCommand());
    if (plugin.debugMode)     plugin.getLogger().log(Level.INFO,""String_Node_Str"" + theCommand.getCommand());
    try {
      command.execute(theCommand);
      if (plugin.debugMode)       plugin.getLogger().log(Level.INFO,""String_Node_Str"");
    }
 catch (    CommandException e) {
      plugin.getLogger().log(Level.SEVERE,e.getMessage());
      e.printStackTrace();
    }
    return true;
  }
 else   plugin.getLogger().log(Level.SEVERE,""String_Node_Str"");
  return false;
}","public boolean execute(ScriptEntry theCommand){
  if (plugin.getCommandRegistry().getCommand(theCommand.getCommand()) != null) {
    Command command=plugin.getCommandRegistry().getCommand(theCommand.getCommand());
    if (plugin.debugMode)     plugin.getLogger().log(Level.INFO,""String_Node_Str"" + theCommand.getCommand());
    try {
      command.execute(theCommand);
      if (plugin.debugMode)       plugin.getLogger().log(Level.INFO,""String_Node_Str"");
    }
 catch (    CommandException e) {
      plugin.getLogger().log(Level.SEVERE,e.getMessage());
      e.printStackTrace();
    }
    return true;
  }
 else {
    if (plugin.debugMode)     plugin.getLogger().log(Level.INFO,""String_Node_Str"" + theCommand.getCommand());
    if (plugin.debugMode)     plugin.getLogger().log(Level.INFO,""String_Node_Str"");
  }
  return false;
}",0.8832020997375328
10542,"public void runQueues(){
  if (!triggerQue.isEmpty()) {
    for (    Entry<Player,List<ScriptEntry>> theEntry : triggerQue.entrySet()) {
      if (!theEntry.getValue().isEmpty()) {
        if (theEntry.getValue().get(0).getDelayedTime() < System.currentTimeMillis()) {
          boolean instantly;
          do {
            instantly=false;
            ScriptEntry theCommand=theEntry.getValue().get(0);
            plugin.executer.execute(theCommand);
            if (theEntry.getValue().size() > 1 && theEntry.getValue().get(0).isInstant())             instantly=true;
            theEntry.getValue().remove(0);
            triggerQue.put(theEntry.getKey(),theEntry.getValue());
          }
 while (instantly);
        }
      }
    }
  }
  if (!taskQue.isEmpty()) {
    for (    Entry<Player,List<ScriptEntry>> theEntry : taskQue.entrySet()) {
      if (!theEntry.getValue().isEmpty()) {
        if (theEntry.getValue().get(0).getDelayedTime() < System.currentTimeMillis()) {
          boolean instantly;
          do {
            instantly=false;
            ScriptEntry theCommand=theEntry.getValue().get(0);
            theCommand.setSendingQueue(QueueType.TASK);
            plugin.executer.execute(theCommand);
            if (theEntry.getValue().size() > 1 && theEntry.getValue().get(0).isInstant())             instantly=true;
            theEntry.getValue().remove(0);
            taskQue.put(theEntry.getKey(),theEntry.getValue());
          }
 while (instantly);
        }
      }
    }
  }
}","public void runQueues(){
  if (!triggerQue.isEmpty()) {
    for (    Entry<Player,List<ScriptEntry>> theEntry : triggerQue.entrySet()) {
      if (!theEntry.getValue().isEmpty()) {
        if (theEntry.getValue().get(0).getDelayedTime() < System.currentTimeMillis()) {
          boolean instantly;
          do {
            instantly=false;
            ScriptEntry theCommand=theEntry.getValue().get(0);
            theCommand.setSendingQueue(QueueType.TRIGGER);
            plugin.executer.execute(theCommand);
            if (theEntry.getValue().size() > 1 && theEntry.getValue().get(0).isInstant())             instantly=true;
            theEntry.getValue().remove(0);
            triggerQue.put(theEntry.getKey(),theEntry.getValue());
          }
 while (instantly);
        }
      }
    }
  }
  if (!taskQue.isEmpty()) {
    for (    Entry<Player,List<ScriptEntry>> theEntry : taskQue.entrySet()) {
      if (!theEntry.getValue().isEmpty()) {
        if (theEntry.getValue().get(0).getDelayedTime() < System.currentTimeMillis()) {
          boolean instantly;
          do {
            instantly=false;
            ScriptEntry theCommand=theEntry.getValue().get(0);
            theCommand.setSendingQueue(QueueType.TASK);
            plugin.executer.execute(theCommand);
            if (theEntry.getValue().size() > 1 && theEntry.getValue().get(0).isInstant())             instantly=true;
            theEntry.getValue().remove(0);
            taskQue.put(theEntry.getKey(),theEntry.getValue());
          }
 while (instantly);
        }
      }
    }
  }
}",0.9808005206638464
10543,"public String[] buildArgs(String stringArgs){
  if (stringArgs == null)   return null;
  List<String> matchList=new ArrayList<String>();
  Pattern regex=Pattern.compile(""String_Node_Str"");
  Matcher regexMatcher=regex.matcher(stringArgs);
  while (regexMatcher.find()) {
    if (regexMatcher.group(1) != null) {
      matchList.add(regexMatcher.group(1));
    }
 else     if (regexMatcher.group(2) != null) {
      matchList.add(regexMatcher.group(2));
    }
 else {
      matchList.add(regexMatcher.group());
    }
  }
  String[] split=new String[matchList.size()];
  matchList.toArray(split);
  if (plugin.debugMode)   plugin.getLogger().log(Level.INFO,""String_Node_Str"" + split.toString());
  return split;
}","public String[] buildArgs(String stringArgs){
  if (stringArgs == null)   return null;
  List<String> matchList=new ArrayList<String>();
  Pattern regex=Pattern.compile(""String_Node_Str"");
  Matcher regexMatcher=regex.matcher(stringArgs);
  while (regexMatcher.find()) {
    if (regexMatcher.group(1) != null) {
      matchList.add(regexMatcher.group(1));
    }
 else     if (regexMatcher.group(2) != null) {
      matchList.add(regexMatcher.group(2));
    }
 else {
      matchList.add(regexMatcher.group());
    }
  }
  String[] split=new String[matchList.size()];
  matchList.toArray(split);
  if (plugin.debugMode)   plugin.getLogger().log(Level.INFO,""String_Node_Str"" + Arrays.toString(split));
  return split;
}",0.9747899159663864
10544,"@EventHandler public void chatTrigger(PlayerChatEvent event){
  DenizenNPC theDenizen=plugin.getDenizenNPCRegistry().getClosest(event.getPlayer(),plugin.settings.PlayerToNpcChatRangeInBlocks());
  if (theDenizen != null) {
    if (theDenizen.IsInteractable(triggerName,event.getPlayer())) {
      String theScript=theDenizen.getInteractScript(event.getPlayer());
      if (theScript == null && !plugin.settings.ChatGloballyIfNoChatTriggers()) {
        event.setCancelled(true);
        theDenizen.talk(TalkType.Chat,event.getPlayer(),Reason.NoRequirementsMet);
      }
      if (theScript != null) {
        if (parseChatScript(theDenizen,event.getPlayer(),theScript,event.getMessage()))         event.setCancelled(true);
      }
    }
  }
}","@EventHandler public void chatTrigger(PlayerChatEvent event){
  DenizenNPC theDenizen=plugin.getDenizenNPCRegistry().getClosest(event.getPlayer(),plugin.settings.PlayerToNpcChatRangeInBlocks());
  if (plugin.debugMode)   plugin.getLogger().log(Level.INFO,""String_Node_Str"");
  if (theDenizen != null) {
    if (theDenizen.IsInteractable(triggerName,event.getPlayer())) {
      String theScript=theDenizen.getInteractScript(event.getPlayer());
      if (theScript == null && !plugin.settings.ChatGloballyIfNoChatTriggers()) {
        event.setCancelled(true);
        theDenizen.talk(TalkType.Chat,event.getPlayer(),Reason.NoRequirementsMet);
      }
      if (theScript != null) {
        if (parseChatScript(theDenizen,event.getPlayer(),theScript,event.getMessage()))         event.setCancelled(true);
 else         if (plugin.debugMode)         plugin.getLogger().log(Level.INFO,""String_Node_Str"");
      }
    }
  }
  if (plugin.debugMode)   plugin.getLogger().log(Level.INFO,""String_Node_Str"");
}",0.851894374282434
10545,"@Override public boolean onCommand(CommandSender sender,Command cmd,String cmdLabel,String[] args){
  if (args.length < 1) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    saveSaves();
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    reloadConfig();
    reloadScripts();
    reloadAssignments();
    reloadSaves();
    Denizen.scriptEngine.buildLocationTriggerList();
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    sender.sendMessage(ChatColor.GREEN + denizenVersion);
    return true;
  }
  if (!(sender instanceof Player)) {
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  Player player=(Player)sender;
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(""String_Node_Str"" + player.getTargetBlock(null,20).getData());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    Block toAddData=player.getTargetBlock(null,20);
    toAddData.setData((byte)(toAddData.getData() + 1));
    player.sendMessage(""String_Node_Str"" + player.getTargetBlock(null,20).getData());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    Block toAddData=player.getTargetBlock(null,20);
    toAddData.setData((byte)(toAddData.getData() - 1));
    player.sendMessage(""String_Node_Str"" + player.getTargetBlock(null,20).getData());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 1) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!Denizen.DebugMode) {
      DebugMode=true;
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else     if (Denizen.DebugMode) {
      DebugMode=false;
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    saveSaves();
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    reloadSaves();
    reloadConfig();
    reloadScripts();
    reloadAssignments();
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.GREEN + denizenVersion);
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    scriptEngine.scheduleScripts();
    player.sendMessage(""String_Node_Str"");
    return true;
  }
  if (player.getMetadata(""String_Node_Str"").isEmpty()) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  NPC ThisNPC=CitizensAPI.getNPCRegistry().getNPC(player.getMetadata(""String_Node_Str"").get(0).asInt());
  if (ThisNPC.getCharacter() == null || !ThisNPC.getCharacter().getName().equals(""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 3) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      List<String> locationList=getAssignments().getStringList(""String_Node_Str"" + ThisNPC.getName() + ""String_Node_Str"");
      locationList.add(args[2] + ""String_Node_Str"" + player.getWorld().getName()+ ""String_Node_Str""+ player.getLocation().getX()+ ""String_Node_Str""+ player.getLocation().getY()+ ""String_Node_Str""+ player.getLocation().getZ()+ ""String_Node_Str""+ player.getLocation().getYaw()+ ""String_Node_Str""+ player.getLocation().getPitch());
      getSaves().set(""String_Node_Str"" + ThisNPC.getName() + ""String_Node_Str"",locationList);
      saveSaves();
      Denizen.scriptEngine.buildLocationTriggerList();
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      List<String> blockList=getAssignments().getStringList(""String_Node_Str"" + ThisNPC.getName() + ""String_Node_Str"");
      Block targetBlock=player.getTargetBlock(null,6);
      blockList.add(args[2] + ""String_Node_Str"" + player.getWorld().getName()+ ""String_Node_Str""+ targetBlock.getX()+ ""String_Node_Str""+ targetBlock.getY()+ ""String_Node_Str""+ targetBlock.getZ());
      getSaves().set(""String_Node_Str"" + ThisNPC.getName() + ""String_Node_Str"",blockList);
      saveSaves();
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
  }
  return true;
}","@Override public boolean onCommand(CommandSender sender,Command cmd,String cmdLabel,String[] args){
  if (args.length < 1) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    saveSaves();
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    reloadConfig();
    reloadScripts();
    reloadAssignments();
    reloadSaves();
    Denizen.scriptEngine.buildLocationTriggerList();
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && !(sender instanceof Player)) {
    sender.sendMessage(ChatColor.GREEN + denizenVersion);
    return true;
  }
  if (!(sender instanceof Player)) {
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  Player player=(Player)sender;
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(""String_Node_Str"" + player.getTargetBlock(null,20).getData());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    Block toAddData=player.getTargetBlock(null,20);
    toAddData.setData((byte)(toAddData.getData() + 1));
    player.sendMessage(""String_Node_Str"" + player.getTargetBlock(null,20).getData());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    Block toAddData=player.getTargetBlock(null,20);
    toAddData.setData((byte)(toAddData.getData() - 1));
    player.sendMessage(""String_Node_Str"" + player.getTargetBlock(null,20).getData());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 1) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!Denizen.DebugMode) {
      DebugMode=true;
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else     if (Denizen.DebugMode) {
      DebugMode=false;
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    saveSaves();
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    reloadSaves();
    reloadConfig();
    reloadScripts();
    reloadAssignments();
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.GREEN + denizenVersion);
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    scriptEngine.scheduleScripts();
    player.sendMessage(""String_Node_Str"");
    return true;
  }
  if (player.getMetadata(""String_Node_Str"").isEmpty()) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  NPC ThisNPC=CitizensAPI.getNPCRegistry().getNPC(player.getMetadata(""String_Node_Str"").get(0).asInt());
  if (ThisNPC.getCharacter() == null || !ThisNPC.getCharacter().getName().equals(""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 2) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      getSaves().set(""String_Node_Str"" + ThisNPC.getName() + ""String_Node_Str"",null);
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else {
      getSaves().set(""String_Node_Str"" + ThisNPC.getName() + ""String_Node_Str"",args[1]);
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 3) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      List<String> locationList=getSaves().getStringList(""String_Node_Str"" + ThisNPC.getName() + ""String_Node_Str"");
      locationList.add(args[2] + ""String_Node_Str"" + player.getWorld().getName()+ ""String_Node_Str""+ player.getLocation().getX()+ ""String_Node_Str""+ player.getLocation().getY()+ ""String_Node_Str""+ player.getLocation().getZ()+ ""String_Node_Str""+ player.getLocation().getYaw()+ ""String_Node_Str""+ player.getLocation().getPitch());
      getSaves().set(""String_Node_Str"" + ThisNPC.getName() + ""String_Node_Str"",locationList);
      saveSaves();
      Denizen.scriptEngine.buildLocationTriggerList();
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      List<String> blockList=getSaves().getStringList(""String_Node_Str"" + ThisNPC.getName() + ""String_Node_Str"");
      Block targetBlock=player.getTargetBlock(null,6);
      blockList.add(args[2] + ""String_Node_Str"" + player.getWorld().getName()+ ""String_Node_Str""+ targetBlock.getX()+ ""String_Node_Str""+ targetBlock.getY()+ ""String_Node_Str""+ targetBlock.getZ());
      getSaves().set(""String_Node_Str"" + ThisNPC.getName() + ""String_Node_Str"",blockList);
      saveSaves();
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
  }
  return true;
}",0.8799321170980059
10546,"@Override public void onEnable(){
  if (!setupEconomy()) {
    getLogger().log(Level.SEVERE,String.format(""String_Node_Str"",getDescription().getName()));
    getServer().getPluginManager().disablePlugin(this);
    return;
  }
  setupPermissions();
  reloadConfig();
  reloadScripts();
  reloadSaves();
  reloadAssignments();
  CitizensAPI.getCharacterManager().registerCharacter(new CharacterFactory(DenizenCharacter.class).withName(""String_Node_Str""));
  getServer().getPluginManager().registerEvents(new DenizenCharacter(),this);
  this.getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
    @Override public void run(){
      scriptEngine.commandQue();
    }
  }
,settings.InteractDelayInTicks(),settings.InteractDelayInTicks());
  this.getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
    @Override public void run(){
      scriptEngine.scheduleScripts();
    }
  }
,1,1000);
  this.getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
    @Override public void run(){
      scriptEngine.buildLocationTriggerList();
    }
  }
,100);
}","@Override public void onEnable(){
  if (!setupEconomy()) {
    getLogger().log(Level.SEVERE,String.format(""String_Node_Str"",getDescription().getName()));
    getServer().getPluginManager().disablePlugin(this);
    return;
  }
  setupPermissions();
  reloadConfig();
  reloadScripts();
  reloadSaves();
  reloadAssignments();
  CitizensAPI.getCharacterManager().registerCharacter(new CharacterFactory(DenizenCharacter.class).withName(""String_Node_Str""));
  getServer().getPluginManager().registerEvents(new DenizenCharacter(),this);
  this.getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
    @Override public void run(){
      scriptEngine.commandQue();
      scriptEngine.enforcePosition();
    }
  }
,settings.InteractDelayInTicks(),settings.InteractDelayInTicks());
  this.getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
    @Override public void run(){
      scriptEngine.scheduleScripts();
    }
  }
,1,1000);
  this.getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
    @Override public void run(){
      scriptEngine.buildLocationTriggerList();
    }
  }
,100);
}",0.9830960854092526
10547,"@EventHandler public void PlayerProximityListener(PlayerMoveEvent event){
  if (!event.getTo().getBlock().equals(event.getFrom().getBlock())) {
    plugin=(Denizen)Bukkit.getPluginManager().getPlugin(""String_Node_Str"");
    if (!Denizen.validLocations.isEmpty()) {
      for (      Location theLocation : Denizen.validLocations.keySet()) {
        if (Denizen.scriptEngine.checkLocation(event.getPlayer(),theLocation,3) && Denizen.getDenizen.checkLocationCooldown(event.getPlayer())) {
          String theScript=Denizen.getScript.getInteractScript(CitizensAPI.getNPCRegistry().getNPC(Integer.valueOf(Denizen.validLocations.get(theLocation).split(""String_Node_Str"")[0])),event.getPlayer());
          if (!theScript.equals(""String_Node_Str"")) {
            Denizen.scriptEngine.parseScript(CitizensAPI.getNPCRegistry().getNPC(Integer.valueOf(Denizen.validLocations.get(theLocation).split(""String_Node_Str"")[0])),event.getPlayer(),Denizen.getScript.getNameFromEntry(theScript),Denizen.validLocations.get(theLocation).split(""String_Node_Str"")[1],ScriptEngine.Trigger.LOCATION);
            Denizen.locationCooldown.put(event.getPlayer(),System.currentTimeMillis() + 30000);
            break;
          }
        }
      }
    }
    if (plugin.getSaves().contains(""String_Node_Str"" + event.getPlayer().getName() + ""String_Node_Str"")) {
      List<String> listAll=plugin.getSaves().getStringList(""String_Node_Str"" + event.getPlayer().getName() + ""String_Node_Str"");
      if (!listAll.isEmpty()) {
        for (        String theTask : listAll) {
          String[] taskArgs=theTask.split(""String_Node_Str"");
          Location theLocation=Denizen.getDenizen.getBookmark(taskArgs[1],taskArgs[0],""String_Node_Str"");
          int theLeeway=plugin.getSaves().getInt(""String_Node_Str"" + event.getPlayer().getName() + ""String_Node_Str""+ taskArgs[2]+ ""String_Node_Str"");
          long theDuration=plugin.getSaves().getLong(""String_Node_Str"" + event.getPlayer().getName() + ""String_Node_Str""+ taskArgs[2]+ ""String_Node_Str"");
          if (Denizen.scriptEngine.checkLocation(event.getPlayer(),theLocation,theLeeway)) {
            if (plugin.getSaves().contains(""String_Node_Str"" + event.getPlayer().getName() + ""String_Node_Str""+ taskArgs[2]+ ""String_Node_Str"")) {
              if (plugin.getSaves().getLong(""String_Node_Str"" + event.getPlayer().getName() + ""String_Node_Str""+ taskArgs[2]+ ""String_Node_Str"") + (theDuration * 1000) <= System.currentTimeMillis())               Denizen.scriptEngine.finishLocationTask(event.getPlayer(),taskArgs[2]);
            }
 else {
              plugin.getSaves().set(""String_Node_Str"" + event.getPlayer().getName() + ""String_Node_Str""+ taskArgs[2]+ ""String_Node_Str"",System.currentTimeMillis());
              plugin.saveSaves();
            }
          }
        }
      }
    }
  }
}","@EventHandler public void PlayerProximityListener(PlayerMoveEvent event){
  if (!event.getTo().getBlock().equals(event.getFrom().getBlock())) {
    plugin=(Denizen)Bukkit.getPluginManager().getPlugin(""String_Node_Str"");
    if (!Denizen.validLocations.isEmpty()) {
      for (      Location theLocation : Denizen.validLocations.keySet()) {
        if (Denizen.scriptEngine.checkLocation(event.getPlayer(),theLocation,1) && Denizen.getDenizen.checkLocationCooldown(event.getPlayer())) {
          String theScript=Denizen.getScript.getInteractScript(CitizensAPI.getNPCRegistry().getNPC(Integer.valueOf(Denizen.validLocations.get(theLocation).split(""String_Node_Str"")[0])),event.getPlayer());
          if (!theScript.equals(""String_Node_Str"")) {
            Denizen.scriptEngine.parseScript(CitizensAPI.getNPCRegistry().getNPC(Integer.valueOf(Denizen.validLocations.get(theLocation).split(""String_Node_Str"")[0])),event.getPlayer(),Denizen.getScript.getNameFromEntry(theScript),Denizen.validLocations.get(theLocation).split(""String_Node_Str"")[1],ScriptEngine.Trigger.LOCATION);
            Denizen.locationCooldown.put(event.getPlayer(),System.currentTimeMillis() + 30000);
            break;
          }
        }
      }
    }
    if (plugin.getSaves().contains(""String_Node_Str"" + event.getPlayer().getName() + ""String_Node_Str"")) {
      List<String> listAll=plugin.getSaves().getStringList(""String_Node_Str"" + event.getPlayer().getName() + ""String_Node_Str"");
      if (!listAll.isEmpty()) {
        for (        String theTask : listAll) {
          String[] taskArgs=theTask.split(""String_Node_Str"");
          Location theLocation=Denizen.getDenizen.getBookmark(taskArgs[1],taskArgs[0],""String_Node_Str"");
          int theLeeway=plugin.getSaves().getInt(""String_Node_Str"" + event.getPlayer().getName() + ""String_Node_Str""+ taskArgs[2]+ ""String_Node_Str"");
          long theDuration=plugin.getSaves().getLong(""String_Node_Str"" + event.getPlayer().getName() + ""String_Node_Str""+ taskArgs[2]+ ""String_Node_Str"");
          if (Denizen.scriptEngine.checkLocation(event.getPlayer(),theLocation,theLeeway)) {
            if (plugin.getSaves().contains(""String_Node_Str"" + event.getPlayer().getName() + ""String_Node_Str""+ taskArgs[2]+ ""String_Node_Str"")) {
              if (plugin.getSaves().getLong(""String_Node_Str"" + event.getPlayer().getName() + ""String_Node_Str""+ taskArgs[2]+ ""String_Node_Str"") + (theDuration * 1000) <= System.currentTimeMillis())               Denizen.scriptEngine.finishLocationTask(event.getPlayer(),taskArgs[2]);
            }
 else {
              plugin.getSaves().set(""String_Node_Str"" + event.getPlayer().getName() + ""String_Node_Str""+ taskArgs[2]+ ""String_Node_Str"",System.currentTimeMillis());
              plugin.saveSaves();
            }
          }
        }
      }
    }
  }
}",0.9996452642781128
10548,"public boolean checkLocation(Player thePlayer,Location theLocation,int theLeeway){
  if (Math.abs(thePlayer.getLocation().getBlockX() - theLocation.getBlockX()) > theLeeway)   return false;
  if (Math.abs(thePlayer.getLocation().getBlockY() - theLocation.getBlockY()) > theLeeway)   return false;
  if (Math.abs(thePlayer.getLocation().getBlockX() - theLocation.getBlockX()) > theLeeway)   return false;
  return true;
}","public boolean checkLocation(NPC theDenizen,Location theLocation,int theLeeway){
  if (Math.abs(theDenizen.getBukkitEntity().getLocation().getBlockX() - theLocation.getBlockX()) > theLeeway)   return false;
  if (Math.abs(theDenizen.getBukkitEntity().getLocation().getBlockY() - theLocation.getBlockY()) > theLeeway)   return false;
  if (Math.abs(theDenizen.getBukkitEntity().getLocation().getBlockX() - theLocation.getBlockX()) > theLeeway)   return false;
  return true;
}",0.864804469273743
10549,"public void execute(Player thePlayer,String theStep){
  plugin=(Denizen)Bukkit.getPluginManager().getPlugin(""String_Node_Str"");
  String[] executeArgs=theStep.split(""String_Node_Str"");
  NPC theDenizen=CitizensAPI.getNPCRegistry().getNPC(Integer.valueOf(executeArgs[0]));
  String theScript=executeArgs[1];
  String currentStep=executeArgs[2];
  String[] commandArgs=new String[25];
  String[] argumentPopulator=executeArgs[4].split(""String_Node_Str"");
  for (int count=0; count < 25; count++) {
    if (argumentPopulator.length > count)     commandArgs[count]=argumentPopulator[count];
 else     commandArgs[count]=null;
  }
  if (commandArgs[0].startsWith(""String_Node_Str""))   commandArgs[0]=commandArgs[0].substring(1);
switch (Command.valueOf(commandArgs[0].toUpperCase())) {
case ZAP:
    Denizen.getScript.zap(thePlayer,theScript,currentStep,commandArgs[1]);
  break;
case ENGAGE:
Denizen.engagedNPC.add(theDenizen);
break;
case DISENGAGE:
if (Denizen.engagedNPC.contains(theDenizen)) Denizen.engagedNPC.remove(theDenizen);
break;
case SPAWNMOB:
case SPAWN:
Denizen.getWorld.spawnMob(commandArgs[1],commandArgs[2],commandArgs[3],theDenizen);
break;
case SWITCH:
Location switchLoc=Denizen.getDenizen.getBookmark(theDenizen,commandArgs[1],""String_Node_Str"");
if (switchLoc.getBlock().getType() == Material.LEVER) {
World theWorld=switchLoc.getWorld();
net.minecraft.server.Block.LEVER.interact(((CraftWorld)theWorld).getHandle(),switchLoc.getBlockX(),switchLoc.getBlockY(),switchLoc.getBlockZ(),null);
}
break;
case PRESS:
Location pressLoc=Denizen.getDenizen.getBookmark(theDenizen,commandArgs[1],""String_Node_Str"");
if (pressLoc.getBlock().getType() == Material.STONE_BUTTON) {
World theWorld=pressLoc.getWorld();
net.minecraft.server.Block.STONE_BUTTON.interact(((CraftWorld)theWorld).getHandle(),pressLoc.getBlockX(),pressLoc.getBlockY(),pressLoc.getBlockZ(),null);
}
break;
case WEATHER:
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
thePlayer.getWorld().setStorm(false);
}
 else if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
thePlayer.getWorld().setThundering(true);
}
 else if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
thePlayer.getWorld().setStorm(true);
}
break;
case CAST:
thePlayer.addPotionEffect(new PotionEffect(PotionEffectType.getByName(commandArgs[1].toUpperCase()),Integer.valueOf(commandArgs[2]) * 20,Integer.valueOf(commandArgs[3])));
break;
case EFFECT:
break;
case LOOK:
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
if (!theDenizen.getTrait(LookClose.class).toggle()) theDenizen.getTrait(LookClose.class).toggle();
}
 else if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
if (theDenizen.getTrait(LookClose.class).toggle()) theDenizen.getTrait(LookClose.class).toggle();
}
 else if (!commandArgs[1].equalsIgnoreCase(""String_Node_Str"") && !commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
NPC denizenLooking=theDenizen;
Location lookLoc=Denizen.getDenizen.getBookmark(theDenizen,commandArgs[1],""String_Node_Str"");
denizenLooking.getBukkitEntity().getLocation().setPitch(lookLoc.getPitch());
denizenLooking.getBukkitEntity().getLocation().setYaw(lookLoc.getYaw());
}
break;
case GIVE:
String[] theItem=Denizen.getRequirements.splitItem(commandArgs[1]);
ItemStack giveItem=new ItemStack(Material.AIR);
if (Character.isDigit(theItem[0].charAt(0))) {
giveItem.setTypeId(Integer.valueOf(theItem[0]));
giveItem.getData().setData(Byte.valueOf(theItem[1]));
}
 else giveItem.setType(Material.getMaterial(commandArgs[1].toUpperCase()));
if (commandArgs[2] != null) giveItem.setAmount(Integer.valueOf(commandArgs[2]));
 else giveItem.setAmount(1);
theDenizen.getBukkitEntity().getWorld().dropItem(theDenizen.getBukkitEntity().getLocation(),giveItem);
break;
case TAKE:
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
double playerMoneyAmt=Denizen.denizenEcon.getBalance(thePlayer.getName());
double amtToTake=Double.valueOf(commandArgs[2]);
if (amtToTake > playerMoneyAmt) amtToTake=playerMoneyAmt;
Denizen.denizenEcon.withdrawPlayer(thePlayer.getName(),amtToTake);
}
 else if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
thePlayer.setItemInHand(new ItemStack(Material.AIR));
}
 else {
String[] theTakeItem=Denizen.getRequirements.splitItem(commandArgs[1]);
ItemStack itemToTake=new ItemStack(Material.AIR);
if (Character.isDigit(theTakeItem[0].charAt(0))) {
itemToTake.setTypeId(Integer.valueOf(theTakeItem[0]));
itemToTake.getData().setData(Byte.valueOf(theTakeItem[1]));
}
 else itemToTake.setType(Material.getMaterial(commandArgs[1].toUpperCase()));
if (commandArgs[2] != null) itemToTake.setAmount(Integer.valueOf(commandArgs[2]));
 else itemToTake.setAmount(1);
thePlayer.getInventory().removeItem(itemToTake);
}
break;
case HEAL:
int health=1;
if (commandArgs[1] != null) health=Integer.valueOf(commandArgs[1]);
((LivingEntity)thePlayer).setHealth(thePlayer.getHealth() + health);
break;
case HURT:
int damage=1;
if (commandArgs[1] != null) damage=Integer.valueOf(commandArgs[1]);
thePlayer.damage(damage,theDenizen.getBukkitEntity());
break;
case TELEPORT:
thePlayer.teleport(Denizen.getDenizen.getBookmark(theDenizen,commandArgs[1],""String_Node_Str""));
case STRIKE:
thePlayer.getWorld().strikeLightning(thePlayer.getLocation());
break;
case WALK:
Denizen.previousNPCLoc.put(theDenizen,theDenizen.getBukkitEntity().getLocation());
if (!commandArgs[1].isEmpty()) theDenizen.getAI().setDestination(theDenizen.getBukkitEntity().getLocation().add(Double.parseDouble(commandArgs[2]),Double.parseDouble(commandArgs[3]),Double.parseDouble(commandArgs[1])));
break;
case WALKTO:
Location walkLoc=Denizen.getDenizen.getBookmark(CitizensAPI.getNPCRegistry().getNPC(Integer.valueOf(executeArgs[0])),commandArgs[1],""String_Node_Str"");
Denizen.previousNPCLoc.put(theDenizen,theDenizen.getBukkitEntity().getLocation());
theDenizen.getAI().setDestination(walkLoc);
break;
case RETURN:
if (Denizen.previousNPCLoc.containsKey(theDenizen)) theDenizen.getAI().setDestination(Denizen.previousNPCLoc.get(theDenizen));
break;
case FINISH:
int finishes=plugin.getAssignments().getInt(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ executeArgs[1]+ ""String_Node_Str""+ ""String_Node_Str"",0);
finishes++;
plugin.getSaves().set(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ executeArgs[1]+ ""String_Node_Str""+ ""String_Node_Str"",finishes);
plugin.saveSaves();
break;
case FAIL:
plugin.getSaves().set(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ executeArgs[1]+ ""String_Node_Str""+ ""String_Node_Str"",true);
plugin.saveSaves();
break;
case REMEMBER:
break;
case FOLLOW:
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
theDenizen.getAI().setTarget(thePlayer,false);
}
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
theDenizen.getAI().cancelDestination();
}
break;
case ATTACK:
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
theDenizen.getAI().setTarget(thePlayer,true);
}
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
theDenizen.getAI().cancelDestination();
}
break;
case RESPAWN:
Location respawnLoc=Denizen.getDenizen.getBookmark(CitizensAPI.getNPCRegistry().getNPC(Integer.valueOf(executeArgs[0])),commandArgs[1],""String_Node_Str"");
Denizen.previousNPCLoc.put(theDenizen,theDenizen.getBukkitEntity().getLocation());
theDenizen.getBukkitEntity().getWorld().playEffect(theDenizen.getBukkitEntity().getLocation(),Effect.STEP_SOUND,2);
theDenizen.despawn();
theDenizen.spawn(respawnLoc);
theDenizen.getBukkitEntity().getWorld().playEffect(theDenizen.getBukkitEntity().getLocation(),Effect.STEP_SOUND,2);
break;
case PERMISS:
Denizen.denizenPerms.playerAdd(thePlayer,commandArgs[1]);
break;
case REFUSE:
Denizen.denizenPerms.playerRemove(thePlayer,commandArgs[1]);
break;
case EXECUTE:
String[] executeCommand=executeArgs[4].split(""String_Node_Str"",3);
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
thePlayer.performCommand(executeCommand[2].replace(""String_Node_Str"",thePlayer.getName().replace(""String_Node_Str"",thePlayer.getWorld().getName())));
}
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
((Player)theDenizen.getBukkitEntity()).setOp(true);
((Player)theDenizen.getBukkitEntity()).performCommand(executeCommand[2].replace(""String_Node_Str"",thePlayer.getName().replace(""String_Node_Str"",thePlayer.getWorld().getName())));
((Player)theDenizen.getBukkitEntity()).setOp(false);
}
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),executeCommand[2].replace(""String_Node_Str"",thePlayer.getName().replace(""String_Node_Str"",thePlayer.getWorld().getName())));
}
break;
case ANNOUNCE:
break;
case NARRATE:
case WHISPER:
case EMOTE:
case SHOUT:
case CHAT:
String[] formattedText=Denizen.scriptEngine.formatChatText(executeArgs[4].split(""String_Node_Str"",2)[1],commandArgs[0],thePlayer,theDenizen);
List<String> playerText=Denizen.scriptEngine.getMultilineText(formattedText[0]);
List<String> bystanderText=Denizen.scriptEngine.getMultilineText(formattedText[1]);
if (!playerText.isEmpty()) {
for (String text : playerText) {
Denizen.getDenizen.talkToPlayer(theDenizen,thePlayer,text,null,commandArgs[0]);
}
}
for (String text : bystanderText) {
Denizen.getDenizen.talkToPlayer(theDenizen,thePlayer,null,text,commandArgs[0]);
}
break;
case RESET:
String executeScript;
if (commandArgs.length == 2) executeScript=theScript;
 else executeScript=executeArgs[4].split(""String_Node_Str"",3)[2];
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"") || commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getSaves().set(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ executeScript+ ""String_Node_Str""+ ""String_Node_Str"",0);
plugin.saveSaves();
}
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"") || commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getSaves().set(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ executeScript+ ""String_Node_Str""+ ""String_Node_Str"",false);
plugin.saveSaves();
}
break;
case CHANGE:
Location blockLoc=Denizen.getDenizen.getBookmark(theDenizen,commandArgs[1],""String_Node_Str"");
String[] theChangeItem=Denizen.getRequirements.splitItem(commandArgs[2]);
if (Character.isDigit(theChangeItem[0].charAt(0))) {
blockLoc.getBlock().setTypeId(Integer.valueOf(theChangeItem[0]));
blockLoc.getBlock().setData(Byte.valueOf(theChangeItem[1]));
}
 else blockLoc.getBlock().setType(Material.getMaterial(commandArgs[2].toUpperCase()));
break;
case WAIT:
List<String> CurrentPlayerQue=new ArrayList<String>();
if (Denizen.playerQue.get(thePlayer) != null) CurrentPlayerQue=Denizen.playerQue.get(thePlayer);
Denizen.playerQue.remove(thePlayer);
Long timeDelay=Long.parseLong(commandArgs[1]) * 1000;
String timeWithDelay=String.valueOf(System.currentTimeMillis() + timeDelay);
CurrentPlayerQue.add(1,""String_Node_Str"" + timeWithDelay + ""String_Node_Str"");
Denizen.playerQue.put(thePlayer,CurrentPlayerQue);
break;
case WAITING:
break;
default :
break;
}
return;
}","public void execute(Player thePlayer,String theStep){
  plugin=(Denizen)Bukkit.getPluginManager().getPlugin(""String_Node_Str"");
  String[] executeArgs=theStep.split(""String_Node_Str"");
  NPC theDenizen=CitizensAPI.getNPCRegistry().getNPC(Integer.valueOf(executeArgs[0]));
  String theScript=executeArgs[1];
  String currentStep=executeArgs[2];
  String[] commandArgs=new String[25];
  String[] argumentPopulator=executeArgs[4].split(""String_Node_Str"");
  for (int count=0; count < 25; count++) {
    if (argumentPopulator.length > count)     commandArgs[count]=argumentPopulator[count];
 else     commandArgs[count]=null;
  }
  if (commandArgs[0].startsWith(""String_Node_Str""))   commandArgs[0]=commandArgs[0].substring(1);
switch (Command.valueOf(commandArgs[0].toUpperCase())) {
case ZAP:
    Denizen.getScript.zap(thePlayer,theScript,currentStep,commandArgs[1]);
  break;
case ENGAGE:
Denizen.engagedNPC.add(theDenizen);
break;
case DISENGAGE:
if (Denizen.engagedNPC.contains(theDenizen)) Denizen.engagedNPC.remove(theDenizen);
break;
case SPAWNMOB:
case SPAWN:
Denizen.getWorld.spawnMob(commandArgs[1],commandArgs[2],commandArgs[3],theDenizen);
break;
case SWITCH:
Location switchLoc=Denizen.getDenizen.getBookmark(theDenizen,commandArgs[1],""String_Node_Str"");
if (switchLoc.getBlock().getType() == Material.LEVER) {
World theWorld=switchLoc.getWorld();
net.minecraft.server.Block.LEVER.interact(((CraftWorld)theWorld).getHandle(),switchLoc.getBlockX(),switchLoc.getBlockY(),switchLoc.getBlockZ(),null);
}
break;
case PRESS:
Location pressLoc=Denizen.getDenizen.getBookmark(theDenizen,commandArgs[1],""String_Node_Str"");
if (pressLoc.getBlock().getType() == Material.STONE_BUTTON) {
World theWorld=pressLoc.getWorld();
net.minecraft.server.Block.STONE_BUTTON.interact(((CraftWorld)theWorld).getHandle(),pressLoc.getBlockX(),pressLoc.getBlockY(),pressLoc.getBlockZ(),null);
}
break;
case WEATHER:
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
thePlayer.getWorld().setStorm(false);
}
 else if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
thePlayer.getWorld().setThundering(true);
}
 else if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
thePlayer.getWorld().setStorm(true);
}
break;
case CAST:
thePlayer.addPotionEffect(new PotionEffect(PotionEffectType.getByName(commandArgs[1].toUpperCase()),Integer.valueOf(commandArgs[2]) * 20,Integer.valueOf(commandArgs[3])));
break;
case EFFECT:
break;
case LOOK:
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
if (!theDenizen.getTrait(LookClose.class).toggle()) theDenizen.getTrait(LookClose.class).toggle();
}
 else if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
if (theDenizen.getTrait(LookClose.class).toggle()) theDenizen.getTrait(LookClose.class).toggle();
}
 else if (!commandArgs[1].equalsIgnoreCase(""String_Node_Str"") && !commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
NPC denizenLooking=theDenizen;
Location lookLoc=Denizen.getDenizen.getBookmark(theDenizen,commandArgs[1],""String_Node_Str"");
denizenLooking.getBukkitEntity().getLocation().setPitch(lookLoc.getPitch());
denizenLooking.getBukkitEntity().getLocation().setYaw(lookLoc.getYaw());
}
break;
case GIVE:
String[] theItem=Denizen.getRequirements.splitItem(commandArgs[1]);
ItemStack giveItem=new ItemStack(Material.AIR);
if (Character.isDigit(theItem[0].charAt(0))) {
giveItem.setTypeId(Integer.valueOf(theItem[0]));
giveItem.getData().setData(Byte.valueOf(theItem[1]));
}
 else giveItem.setType(Material.getMaterial(commandArgs[1].toUpperCase()));
if (commandArgs[2] != null) giveItem.setAmount(Integer.valueOf(commandArgs[2]));
 else giveItem.setAmount(1);
theDenizen.getBukkitEntity().getWorld().dropItem(theDenizen.getBukkitEntity().getLocation(),giveItem);
break;
case TAKE:
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
double playerMoneyAmt=Denizen.denizenEcon.getBalance(thePlayer.getName());
double amtToTake=Double.valueOf(commandArgs[2]);
if (amtToTake > playerMoneyAmt) amtToTake=playerMoneyAmt;
Denizen.denizenEcon.withdrawPlayer(thePlayer.getName(),amtToTake);
}
 else if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
thePlayer.setItemInHand(new ItemStack(Material.AIR));
}
 else {
String[] theTakeItem=Denizen.getRequirements.splitItem(commandArgs[1]);
ItemStack itemToTake=new ItemStack(Material.AIR);
if (Character.isDigit(theTakeItem[0].charAt(0))) {
itemToTake.setTypeId(Integer.valueOf(theTakeItem[0]));
itemToTake.getData().setData(Byte.valueOf(theTakeItem[1]));
}
 else itemToTake.setType(Material.getMaterial(commandArgs[1].toUpperCase()));
if (commandArgs[2] != null) itemToTake.setAmount(Integer.valueOf(commandArgs[2]));
 else itemToTake.setAmount(1);
thePlayer.getInventory().removeItem(itemToTake);
}
break;
case HEAL:
int health=1;
if (commandArgs[1] != null) health=Integer.valueOf(commandArgs[1]);
((LivingEntity)thePlayer).setHealth(thePlayer.getHealth() + health);
break;
case HURT:
int damage=1;
if (commandArgs[1] != null) damage=Integer.valueOf(commandArgs[1]);
thePlayer.damage(damage,theDenizen.getBukkitEntity());
break;
case TELEPORT:
thePlayer.teleport(Denizen.getDenizen.getBookmark(theDenizen,commandArgs[1],""String_Node_Str""));
case STRIKE:
thePlayer.getWorld().strikeLightning(thePlayer.getLocation());
break;
case WALK:
Denizen.previousNPCLoc.put(theDenizen,theDenizen.getBukkitEntity().getLocation());
if (!commandArgs[1].isEmpty()) theDenizen.getAI().setDestination(theDenizen.getBukkitEntity().getLocation().add(Double.parseDouble(commandArgs[2]),Double.parseDouble(commandArgs[3]),Double.parseDouble(commandArgs[1])));
break;
case WALKTO:
Location walkLoc=Denizen.getDenizen.getBookmark(CitizensAPI.getNPCRegistry().getNPC(Integer.valueOf(executeArgs[0])),commandArgs[1],""String_Node_Str"");
Denizen.previousNPCLoc.put(theDenizen,theDenizen.getBukkitEntity().getLocation());
theDenizen.getAI().setDestination(walkLoc);
break;
case RETURN:
if (Denizen.previousNPCLoc.containsKey(theDenizen)) theDenizen.getAI().setDestination(Denizen.previousNPCLoc.get(theDenizen));
break;
case FINISH:
int finishes=plugin.getAssignments().getInt(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ executeArgs[1]+ ""String_Node_Str""+ ""String_Node_Str"",0);
finishes++;
plugin.getSaves().set(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ executeArgs[1]+ ""String_Node_Str""+ ""String_Node_Str"",finishes);
plugin.saveSaves();
break;
case FAIL:
plugin.getSaves().set(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ executeArgs[1]+ ""String_Node_Str""+ ""String_Node_Str"",true);
plugin.saveSaves();
break;
case REMEMBER:
break;
case FOLLOW:
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
theDenizen.getAI().setTarget(thePlayer,false);
}
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
theDenizen.getAI().cancelDestination();
}
break;
case ATTACK:
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
theDenizen.getAI().setTarget(thePlayer,true);
}
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
theDenizen.getAI().cancelDestination();
}
break;
case RESPAWN:
Location respawnLoc=Denizen.getDenizen.getBookmark(CitizensAPI.getNPCRegistry().getNPC(Integer.valueOf(executeArgs[0])),commandArgs[1],""String_Node_Str"");
Denizen.previousNPCLoc.put(theDenizen,theDenizen.getBukkitEntity().getLocation());
theDenizen.getBukkitEntity().getWorld().playEffect(theDenizen.getBukkitEntity().getLocation(),Effect.STEP_SOUND,2);
theDenizen.despawn();
theDenizen.spawn(respawnLoc);
theDenizen.getBukkitEntity().getWorld().playEffect(theDenizen.getBukkitEntity().getLocation(),Effect.STEP_SOUND,2);
break;
case PERMISS:
Denizen.denizenPerms.playerAdd(thePlayer,commandArgs[1]);
break;
case REFUSE:
Denizen.denizenPerms.playerRemove(thePlayer,commandArgs[1]);
break;
case EXECUTE:
String[] executeCommand=executeArgs[4].split(""String_Node_Str"",3);
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
thePlayer.performCommand(executeCommand[2].replace(""String_Node_Str"",thePlayer.getName().replace(""String_Node_Str"",thePlayer.getWorld().getName())));
}
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
((Player)theDenizen.getBukkitEntity()).setOp(true);
((Player)theDenizen.getBukkitEntity()).performCommand(executeCommand[2].replace(""String_Node_Str"",thePlayer.getName().replace(""String_Node_Str"",thePlayer.getWorld().getName())));
((Player)theDenizen.getBukkitEntity()).setOp(false);
}
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),executeCommand[2].replace(""String_Node_Str"",thePlayer.getName().replace(""String_Node_Str"",thePlayer.getWorld().getName())));
}
break;
case ANNOUNCE:
break;
case NARRATE:
case WHISPER:
case EMOTE:
case SHOUT:
case CHAT:
String[] formattedText=Denizen.scriptEngine.formatChatText(executeArgs[4].split(""String_Node_Str"",2)[1],commandArgs[0],thePlayer,theDenizen);
List<String> playerText=Denizen.scriptEngine.getMultilineText(formattedText[0]);
List<String> bystanderText=Denizen.scriptEngine.getMultilineText(formattedText[1]);
if (!playerText.isEmpty()) {
for (String text : playerText) {
Denizen.getDenizen.talkToPlayer(theDenizen,thePlayer,text,null,commandArgs[0]);
}
}
if (!bystanderText.isEmpty()) {
for (String text : bystanderText) {
Denizen.getDenizen.talkToPlayer(theDenizen,thePlayer,null,text,commandArgs[0]);
}
}
break;
case RESET:
String executeScript;
if (commandArgs.length == 2) executeScript=theScript;
 else executeScript=executeArgs[4].split(""String_Node_Str"",3)[2];
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"") || commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getSaves().set(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ executeScript+ ""String_Node_Str""+ ""String_Node_Str"",0);
plugin.saveSaves();
}
if (commandArgs[1].equalsIgnoreCase(""String_Node_Str"") || commandArgs[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getSaves().set(""String_Node_Str"" + thePlayer.getName() + ""String_Node_Str""+ executeScript+ ""String_Node_Str""+ ""String_Node_Str"",false);
plugin.saveSaves();
}
break;
case CHANGE:
Location blockLoc=Denizen.getDenizen.getBookmark(theDenizen,commandArgs[1],""String_Node_Str"");
String[] theChangeItem=Denizen.getRequirements.splitItem(commandArgs[2]);
if (Character.isDigit(theChangeItem[0].charAt(0))) {
blockLoc.getBlock().setTypeId(Integer.valueOf(theChangeItem[0]));
blockLoc.getBlock().setData(Byte.valueOf(theChangeItem[1]));
}
 else blockLoc.getBlock().setType(Material.getMaterial(commandArgs[2].toUpperCase()));
break;
case WAIT:
List<String> CurrentPlayerQue=new ArrayList<String>();
if (Denizen.playerQue.get(thePlayer) != null) CurrentPlayerQue=Denizen.playerQue.get(thePlayer);
Denizen.playerQue.remove(thePlayer);
Long timeDelay=Long.parseLong(commandArgs[1]) * 1000;
String timeWithDelay=String.valueOf(System.currentTimeMillis() + timeDelay);
CurrentPlayerQue.add(1,""String_Node_Str"" + timeWithDelay + ""String_Node_Str"");
Denizen.playerQue.put(thePlayer,CurrentPlayerQue);
break;
case WAITING:
break;
default :
break;
}
return;
}",0.9984542644117111
10550,"public List<String> getMultilineText(String theText){
  String[] text=theText.split(""String_Node_Str"");
  List<String> processedText=new ArrayList<String>();
  if (theText.length() > Denizen.settings.MultiLineTextMaximumLength()) {
    processedText.add(0,""String_Node_Str"");
    int word=0;
    int line=0;
    while (word < text.length) {
      if (processedText.get(line).length() + text[word].length() < Denizen.settings.MultiLineTextMaximumLength()) {
        processedText.set(line,processedText.get(line) + ""String_Node_Str"" + text[word]);
        word++;
      }
 else {
        line++;
        processedText.add(""String_Node_Str"");
      }
    }
  }
 else   processedText.add(0,theText);
  return processedText;
}","public List<String> getMultilineText(String theText){
  List<String> processedText=new ArrayList<String>();
  if (theText == null)   return processedText;
  String[] text=theText.split(""String_Node_Str"");
  if (theText.length() > Denizen.settings.MultiLineTextMaximumLength()) {
    processedText.add(0,""String_Node_Str"");
    int word=0;
    int line=0;
    while (word < text.length) {
      if (processedText.get(line).length() + text[word].length() < Denizen.settings.MultiLineTextMaximumLength()) {
        processedText.set(line,processedText.get(line) + ""String_Node_Str"" + text[word]);
        word++;
      }
 else {
        line++;
        processedText.add(""String_Node_Str"");
      }
    }
  }
 else   processedText.add(0,theText);
  return processedText;
}",0.9014084507042254
10551,"public String[] formatChatText(String theMessage,String messageType,Player thePlayer,NPC theDenizen){
  String playerMessageFormat=null;
  String bystanderMessageFormat=null;
  boolean toPlayer;
  if (thePlayer == null)   toPlayer=false;
 else   toPlayer=true;
  if (messageType.equalsIgnoreCase(""String_Node_Str"")) {
    playerMessageFormat=Denizen.settings.NpcShoutToPlayer();
    bystanderMessageFormat=Denizen.settings.NpcShoutToPlayerBystander();
    if (!toPlayer)     bystanderMessageFormat=Denizen.settings.NpcShoutToBystanders();
  }
 else   if (messageType.equalsIgnoreCase(""String_Node_Str"")) {
    playerMessageFormat=Denizen.settings.NpcWhisperToPlayer();
    bystanderMessageFormat=Denizen.settings.NpcWhisperToPlayerBystander();
    if (!toPlayer)     bystanderMessageFormat=Denizen.settings.NpcWhisperToBystanders();
  }
 else   if (messageType.equalsIgnoreCase(""String_Node_Str"")) {
    toPlayer=false;
    bystanderMessageFormat=""String_Node_Str"";
  }
 else   if (messageType.equalsIgnoreCase(""String_Node_Str"")) {
    playerMessageFormat=""String_Node_Str"";
  }
 else {
    playerMessageFormat=Denizen.settings.NpcChatToPlayer();
    bystanderMessageFormat=Denizen.settings.NpcChatToPlayerBystander();
    if (!toPlayer)     bystanderMessageFormat=Denizen.settings.NpcChatToBystanders();
  }
  if (playerMessageFormat != null)   playerMessageFormat=playerMessageFormat.replace(""String_Node_Str"",theDenizen.getName()).replace(""String_Node_Str"",theMessage).replace(""String_Node_Str"",thePlayer.getName()).replace(""String_Node_Str"",thePlayer.getDisplayName()).replace(""String_Node_Str"",thePlayer.getWorld().getName()).replace(""String_Node_Str"",String.valueOf(thePlayer.getHealth()));
  if (bystanderMessageFormat != null)   bystanderMessageFormat=bystanderMessageFormat.replace(""String_Node_Str"",theDenizen.getName()).replace(""String_Node_Str"",theMessage).replace(""String_Node_Str"",thePlayer.getName()).replace(""String_Node_Str"",thePlayer.getDisplayName()).replace(""String_Node_Str"",thePlayer.getWorld().getName()).replace(""String_Node_Str"",String.valueOf(thePlayer.getHealth()));
  String[] returnedText={playerMessageFormat,bystanderMessageFormat};
  return returnedText;
}","public String[] formatChatText(String theMessage,String messageType,Player thePlayer,NPC theDenizen){
  String playerMessageFormat=null;
  String bystanderMessageFormat=null;
  boolean toPlayer;
  if (thePlayer == null)   toPlayer=false;
 else   toPlayer=true;
  if (messageType.equalsIgnoreCase(""String_Node_Str"")) {
    playerMessageFormat=Denizen.settings.NpcShoutToPlayer();
    bystanderMessageFormat=Denizen.settings.NpcShoutToPlayerBystander();
    if (!toPlayer)     bystanderMessageFormat=Denizen.settings.NpcShoutToBystanders();
  }
 else   if (messageType.equalsIgnoreCase(""String_Node_Str"")) {
    playerMessageFormat=Denizen.settings.NpcWhisperToPlayer();
    bystanderMessageFormat=Denizen.settings.NpcWhisperToPlayerBystander();
    if (!toPlayer)     bystanderMessageFormat=Denizen.settings.NpcWhisperToBystanders();
  }
 else   if (messageType.equalsIgnoreCase(""String_Node_Str"")) {
    toPlayer=false;
    bystanderMessageFormat=""String_Node_Str"";
  }
 else   if (messageType.equalsIgnoreCase(""String_Node_Str"")) {
    playerMessageFormat=""String_Node_Str"";
  }
 else {
    playerMessageFormat=Denizen.settings.NpcChatToPlayer();
    bystanderMessageFormat=Denizen.settings.NpcChatToPlayerBystander();
    if (!toPlayer)     bystanderMessageFormat=Denizen.settings.NpcChatToBystanders();
  }
  if (playerMessageFormat != null)   playerMessageFormat=playerMessageFormat.replace(""String_Node_Str"",theDenizen.getName()).replace(""String_Node_Str"",theMessage).replace(""String_Node_Str"",thePlayer.getName()).replace(""String_Node_Str"",thePlayer.getDisplayName()).replace(""String_Node_Str"",thePlayer.getWorld().getName()).replace(""String_Node_Str"",String.valueOf(thePlayer.getHealth()).replace(""String_Node_Str"",""String_Node_Str""));
  if (bystanderMessageFormat != null)   bystanderMessageFormat=bystanderMessageFormat.replace(""String_Node_Str"",theDenizen.getName()).replace(""String_Node_Str"",theMessage).replace(""String_Node_Str"",thePlayer.getName()).replace(""String_Node_Str"",thePlayer.getDisplayName()).replace(""String_Node_Str"",thePlayer.getWorld().getName()).replace(""String_Node_Str"",String.valueOf(thePlayer.getHealth()));
  String[] returnedText={playerMessageFormat,bystanderMessageFormat};
  return returnedText;
}",0.9898259100158264
10552,"public void parseAll(){
  lookForGlobalTestTemplate();
  while (lineIterator != null) {
    parseMoreTokens();
  }
}","public void parseAll(){
  if (lines == null) {
    return;
  }
  lookForGlobalTestTemplate();
  while (lineIterator != null) {
    parseMoreTokens();
  }
}",0.8560885608856088
10553,"private boolean prefixesMatch(String userInputString,FileWithType proposalLocation){
  int indexOfDot=userInputString.indexOf('.');
  if (indexOfDot == -1) {
    return false;
  }
  String userInputPrefix=userInputString.substring(0,indexOfDot);
  return proposalLocation.getName().equals(userInputPrefix);
}","private boolean prefixesMatch(String userInputString,FileWithType proposalLocation){
  int indexOfDot=userInputString.indexOf('.');
  if (indexOfDot == -1) {
    return false;
  }
  String userInputPrefix=userInputString.substring(0,indexOfDot);
  return proposalLocation.getName().toLowerCase().equals(userInputPrefix);
}",0.9777777777777776
10554,"@Override public void addVariableProposals(IFile file,ParsedString argument,int documentOffset,List<RobotCompletionProposalSet> proposalSets,int maxVariableCharPos,int maxSettingCharPos){
  IRegion replacementRegion=VariableReplacementRegionCalculator.calculate(argument,documentOffset);
  VariableCompletionMatchVisitorProvider visitorProvider=new VariableCompletionMatchVisitorProvider(file,replacementRegion,maxVariableCharPos,maxSettingCharPos);
  RobotCompletionProposalSet variableProposals=computeCompletionProposals(file,documentOffset,argument,visitorProvider);
  if (replacementRegion.getLength() > 0) {
    proposalSets.add(0,variableProposals);
  }
 else {
    proposalSets.add(variableProposals);
  }
}","@Override public void addVariableProposals(IFile file,ParsedString argument,int documentOffset,List<RobotCompletionProposalSet> proposalSets,int maxVariableCharPos,int maxSettingCharPos){
  IRegion replacementRegion=VariableReplacementRegionCalculator.calculate(argument,documentOffset);
  ParsedString subArgument=argument.extractRegion(replacementRegion);
  VariableCompletionMatchVisitorProvider visitorProvider=new VariableCompletionMatchVisitorProvider(file,replacementRegion,maxVariableCharPos,maxSettingCharPos);
  RobotCompletionProposalSet variableProposals=computeCompletionProposals(file,documentOffset,subArgument,visitorProvider);
  if (replacementRegion.getLength() > 0) {
    proposalSets.add(0,variableProposals);
  }
 else {
    proposalSets.add(variableProposals);
  }
}",0.9500998003992016
10555,"public static IFile getRelativeFile(IFile originalFile,String pathRelativeToOriginalFile){
  IPath originalFolderPath=originalFile.getParent().getFullPath();
  IPath newPath=originalFolderPath.append(pathRelativeToOriginalFile);
  return originalFile.getWorkspace().getRoot().getFile(newPath);
}","public static IFile getRelativeFile(IFile originalFile,String pathRelativeToOriginalFile){
  IPath originalFolderPath=originalFile.getParent().getLocation();
  IPath newPath=originalFolderPath.append(pathRelativeToOriginalFile);
  return originalFile.getWorkspace().getRoot().getFileForLocation(newPath);
}",0.9550748752079868
10556,"private void parseLine(List<ParsedString> arguments,int lineNo,int charPos) throws CoreException {
  System.out.println(arguments);
  State oldState=state;
  state.parse(new ParsedLineInfo(this,arguments,lineNo,charPos));
  if (oldState != state) {
    System.out.println(""String_Node_Str"" + oldState + ""String_Node_Str""+ state);
  }
}","private void parseLine(List<ParsedString> arguments,int lineNo,int charPos) throws CoreException {
  if (arguments.isEmpty()) {
    return;
  }
  System.out.println(arguments);
  State oldState=state;
  state.parse(new ParsedLineInfo(this,arguments,lineNo,charPos));
  if (oldState != state) {
    System.out.println(""String_Node_Str"" + oldState + ""String_Node_Str""+ state);
  }
}",0.9370629370629372
10557,"private Type tryParseTableSwitch(RFELine line) throws CoreException {
  ParsedString tableArgument=line.arguments.get(0);
  if (!tableArgument.getValue().startsWith(""String_Node_Str"")) {
    return null;
  }
  String table=tableArgument.getValue().replace(""String_Node_Str"",""String_Node_Str"");
  Type curType=tableNameToType.get(table);
  if (curType == null) {
    return Type.IGNORE_TABLE;
  }
  return curType;
}","private Type tryParseTableSwitch(RFELine line) throws CoreException {
  ParsedString tableArgument=line.arguments.get(0);
  if (!tableArgument.getValue().startsWith(""String_Node_Str"")) {
    return null;
  }
  String table=ParserUtil.parseTable(tableArgument.getValue());
  Type curType=tableNameToType.get(table);
  if (curType == null) {
    return Type.IGNORE_TABLE;
  }
  return curType;
}",0.9183168316831684
10558,"protected boolean tryParseTableSwitch(ParsedLineInfo info) throws CoreException {
  ParsedString tableArgument=info.arguments.get(0);
  if (!tableArgument.getValue().startsWith(""String_Node_Str"")) {
    return false;
  }
  String table=tableArgument.getValue().replace(""String_Node_Str"",""String_Node_Str"");
  State nextState=tableNameToState.get(table);
  if (nextState == null) {
    nextState=Ignore.STATE;
    int firstPos=tableArgument.getValue().indexOf(table.charAt(0));
    int lastPos=tableArgument.getValue().lastIndexOf(table.charAt(table.length() - 1)) + 1;
    addMarker(info,""String_Node_Str"" + table + ""String_Node_Str"",SeverityConfig.UNKNOWN_TABLE,tableArgument.getArgCharPos() + firstPos,tableArgument.getArgCharPos() + lastPos);
    return true;
  }
  info.setState(nextState,null);
  return true;
}","protected boolean tryParseTableSwitch(ParsedLineInfo info) throws CoreException {
  ParsedString tableArgument=info.arguments.get(0);
  if (!tableArgument.getValue().startsWith(""String_Node_Str"")) {
    return false;
  }
  String table=ParserUtil.parseTable(tableArgument.getValue());
  State nextState=tableNameToState.get(table);
  if (nextState == null) {
    nextState=Ignore.STATE;
    int firstPos=tableArgument.getValue().indexOf(table.charAt(0));
    int lastPos=tableArgument.getValue().lastIndexOf(table.charAt(table.length() - 1)) + 1;
    addMarker(info,""String_Node_Str"" + table + ""String_Node_Str"",SeverityConfig.UNKNOWN_TABLE,tableArgument.getArgCharPos() + firstPos,tableArgument.getArgCharPos() + lastPos);
    return true;
  }
  info.setState(nextState,null);
  return true;
}",0.9590062111801242
10559,"private void parseSettingArgs(){
  if (!setting_gotFirstArg) {
    setting_gotFirstArg=true;
switch (setting_type) {
case UNKNOWN:
{
        prepareNextLine();
        return;
      }
case STRING:
{
      ParsedString first=line.arguments.get(argOff);
      ParsedString last=line.arguments.get(argLen - 1);
      tokenQueue.add(first.getArgCharPos(),last.getArgEndCharPos(),tokSETTING_VAL);
      prepareNextLine();
      return;
    }
case FILE:
{
    ParsedString file=line.arguments.get(argOff);
    tokenQueue.add(file,tokSETTING_FILE);
    prepareNextLine();
    return;
  }
case FILE_ARGS:
{
  ParsedString file=line.arguments.get(argOff);
  tokenQueue.add(file,tokSETTING_FILE);
  prepareNextToken();
  return;
}
case KEYWORD_ARGS:
{
ParsedString file=line.arguments.get(argOff);
tokenQueue.add(file,tokSETTING_KEYWORD_CALL);
prepareNextToken();
return;
}
}
throw new RuntimeException();
}
 else {
switch (setting_type) {
case FILE_ARGS:
{
ParsedString first=line.arguments.get(argOff);
ParsedString last=line.arguments.get(argLen - 1);
tokenQueue.add(first.getArgCharPos(),last.getArgEndCharPos(),tokSETTING_FILE_ARG);
prepareNextLine();
return;
}
case KEYWORD_ARGS:
{
ParsedString first=line.arguments.get(argOff);
ParsedString last=line.arguments.get(argLen - 1);
tokenQueue.add(first.getArgCharPos(),last.getArgEndCharPos(),tokSETTING_KEYWORD_ARG);
prepareNextLine();
return;
}
}
throw new RuntimeException();
}
}","private void parseSettingArgs(){
  if (!setting_gotFirstArg) {
switch (setting_type) {
case UNKNOWN:
{
        prepareNextLine();
        return;
      }
case STRING:
{
      ParsedString first=line.arguments.get(argOff);
      ParsedString last=line.arguments.get(argLen - 1);
      tokenQueue.add(first.getArgCharPos(),last.getArgEndCharPos(),tokSETTING_VAL);
      prepareNextLine();
      return;
    }
case FILE:
{
    ParsedString file=line.arguments.get(argOff);
    tokenQueue.add(file,tokSETTING_FILE);
    prepareNextLine();
    return;
  }
case FILE_ARGS:
{
  ParsedString file=line.arguments.get(argOff);
  tokenQueue.add(file,tokSETTING_FILE);
  prepareNextToken();
  setting_gotFirstArg=true;
  return;
}
case KEYWORD_ARGS:
{
ParsedString file=line.arguments.get(argOff);
tokenQueue.add(file,tokSETTING_KEYWORD_CALL);
prepareNextToken();
setting_gotFirstArg=true;
return;
}
}
throw new RuntimeException();
}
 else {
switch (setting_type) {
case FILE_ARGS:
{
ParsedString first=line.arguments.get(argOff);
ParsedString last=line.arguments.get(argLen - 1);
tokenQueue.add(first.getArgCharPos(),last.getArgEndCharPos(),tokSETTING_FILE_ARG);
prepareNextLine();
return;
}
case KEYWORD_ARGS:
{
ParsedString first=line.arguments.get(argOff);
ParsedString last=line.arguments.get(argLen - 1);
tokenQueue.add(first.getArgCharPos(),last.getArgEndCharPos(),tokSETTING_KEYWORD_ARG);
prepareNextLine();
return;
}
}
throw new RuntimeException();
}
}",0.9707724425887264
10560,"private boolean tryParseContinuationLine(RFELine line) throws CoreException {
  ParsedString arg=line.arguments.get(0);
  if (!arg.getValue().equals(""String_Node_Str"")) {
    if (!arg.getValue().isEmpty()) {
      return false;
    }
    if (line.arguments.size() < 2) {
      return false;
    }
    if (!line.arguments.get(1).getValue().equals(""String_Node_Str"")) {
      return false;
    }
  }
  return true;
}","private boolean tryParseContinuationLine(RFELine line) throws CoreException {
  ParsedString arg=line.arguments.get(0);
  if (!arg.getValue().equals(CONTINUATION_STR)) {
    if (!arg.getValue().isEmpty() && !arg.getValue().equals(""String_Node_Str"")) {
      return false;
    }
    if (line.arguments.size() < 2) {
      return false;
    }
    if (!line.arguments.get(1).getValue().equals(CONTINUATION_STR)) {
      return false;
    }
  }
  return true;
}",0.6130884041331802
10561,"static String rtrim(String line){
  int epos=line.length() - 1;
  while (epos >= 0) {
switch (line.charAt(epos)) {
case ' ':
case '\t':
      break;
default :
    return line.substring(0,epos + 1);
}
}
return null;
}","static String rtrim(String line){
  int epos=line.length() - 1;
  while (epos >= 0) {
switch (line.charAt(epos)) {
case ' ':
case '\t':
      break;
default :
    return line.substring(0,epos + 1);
}
--epos;
}
return null;
}",0.9818181818181818
10562,"/** 
 * Splits a line from a robot TXT file into arguments. Only supports the tab-or-multiple-whitespace separator right now.
 * @param line
 * @param charPos
 * @return
 */
static List<Argument> splitLineIntoArguments(String line,int charPos){
  line=rtrim(line);
  Matcher m=SEPARATOR_RE.matcher(line);
  List<Argument> arguments=new ArrayList<Argument>();
  int lastEnd=0;
  while (true) {
    if (lastEnd < line.length() && line.charAt(lastEnd) == '#') {
      break;
    }
    boolean isLastArgument=!m.find();
    int nextStart=!isLastArgument ? m.start() : line.length();
    arguments.add(new Argument(line.substring(lastEnd,nextStart),charPos + lastEnd));
    if (isLastArgument) {
      break;
    }
    lastEnd=m.end();
  }
  return arguments;
}","/** 
 * Splits a line from a robot TXT file into arguments. Only supports the tab-or-multiple-whitespace separator right now.
 * @param line
 * @param charPos
 * @return
 */
static List<Argument> splitLineIntoArguments(String line,int charPos){
  line=rtrim(line);
  if (line == null) {
    return Collections.emptyList();
  }
  Matcher m=SEPARATOR_RE.matcher(line);
  List<Argument> arguments=new ArrayList<Argument>();
  int lastEnd=0;
  while (true) {
    if (lastEnd < line.length() && line.charAt(lastEnd) == '#') {
      break;
    }
    boolean isLastArgument=!m.find();
    int nextStart=!isLastArgument ? m.start() : line.length();
    if (lastEnd == 0 && nextStart > 0 && line.charAt(0) == ' ') {
      ++lastEnd;
    }
    arguments.add(new Argument(line.substring(lastEnd,nextStart),charPos + lastEnd));
    if (isLastArgument) {
      break;
    }
    lastEnd=m.end();
  }
  return arguments;
}",0.909200240529164
10563,"/** 
 * Release the save point at the top of the save point stack. If the rule number of the stack top is not equal to the specified one, report error. If save point is released under a unsuccessful match, pushback the buffer. If the released save point is the the last save point, clear the backup.
 * @param ruleNum
 * @param success if is a successful match
 * @return the parsing position when backuped
 */
public int releaseSavePoint(int ruleNum,boolean success){
  Integer[] top=this.savePoints.pop();
  if (top[0] != ruleNum)   throw new RuntimeException(""String_Node_Str"");
  if (!success) {
    List<Token> sub=this.backUp.subList(top[1],this.backUp.size());
    this.lookAheadBuf.addAll(0,sub);
    for (    Token t : sub)     this.allBufferedLexemeLength+=t.getLength();
    sub.clear();
  }
  return top[2];
}","/** 
 * Release the save point at the top of the save point stack. If the rule number of the stack top is not equal to the specified one, report error. If save point is released under a unsuccessful match, pushback the buffer. If the released save point is the the last save point, clear the backup.
 * @param ruleNum
 * @param success if is a successful match
 * @return the parsing position when backuped
 */
public int releaseSavePoint(int ruleNum,boolean success){
  Integer[] top=this.savePoints.pop();
  if (top[0] != ruleNum)   throw new RuntimeException(""String_Node_Str"");
  if (!success) {
    List<Token> sub=this.backUp.subList(top[1],this.backUp.size());
    this.lookAheadBuf.addAll(0,sub);
    for (    Token t : sub)     this.allBufferedLexemeLength+=t.getLength();
    sub.clear();
  }
 else   if (this.savePoints.isEmpty() && !this.backUp.isEmpty()) {
    this.backUp.clear();
  }
  return top[2];
}",0.9447640966628308
10564,"/** 
 * Let the lexer forward to the specified position directly
 * @param position
 */
public void fastForward(int position){
  int steps=position - this.getCurrentPosition();
  if (steps < 0)   throw new RuntimeException(""String_Node_Str"");
  for (int i=0; i < steps; i++)   this.nextElement();
}","/** 
 * Let the lexer forward to the specified position directly
 * @param position
 */
public void fastForward(int position){
  int chars=position - this.getCurrentPosition();
  if (chars < 0)   throw new RuntimeException(""String_Node_Str"");
  while (chars > 0)   chars-=this.nextElement().getLength();
  if (chars < 0)   throw new RuntimeException(""String_Node_Str"");
}",0.7234678624813154
10565,"/** 
 * build the classpath using all properties with suffix 'class.path'; to make some software setting its own class path variables happy(like maven-surfire plugin).
 * @return
 */
public static String getClassPath(){
  StringBuilder sb=new StringBuilder();
  for (  Map.Entry<Object,Object> e : System.getProperties().entrySet()) {
    String k=(String)e.getKey();
    if (k.endsWith(""String_Node_Str"")) {
      if (sb.length() != 0)       sb.append(File.pathSeparator);
      sb.append(e.getValue());
    }
  }
  URL url=Util.class.getResource(""String_Node_Str"");
  if (url != null) {
    String dropinccPath=null;
    if (""String_Node_Str"".equalsIgnoreCase(url.getProtocol())) {
      String path=url.getPath();
      dropinccPath=path.substring(path.indexOf(""String_Node_Str"") + 1,path.indexOf(""String_Node_Str""));
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(url.getProtocol())) {
      String path=url.getPath();
      dropinccPath=path.substring(0,path.lastIndexOf(PATH_SEP + Util.class.getName().replace(""String_Node_Str"",PATH_SEP) + ""String_Node_Str""));
    }
    if (dropinccPath != null && !""String_Node_Str"".equals(dropinccPath) && sb.indexOf(dropinccPath) == -1) {
      if (sb.length() != 0)       sb.append(File.pathSeparator);
      sb.append(dropinccPath);
    }
  }
  return sb.toString();
}","/** 
 * build the classpath using all properties with suffix 'class.path'; to make some software setting its own class path variables happy(like maven-surfire plugin). XXX dirty classpath hacking to make java compiler API happy...
 * @return
 */
public static String getClassPath(){
  StringBuilder sb=new StringBuilder();
  for (  Map.Entry<Object,Object> e : System.getProperties().entrySet()) {
    String k=(String)e.getKey();
    if (k.endsWith(""String_Node_Str"")) {
      if (sb.length() != 0)       sb.append(File.pathSeparator);
      sb.append(e.getValue());
    }
  }
  URL url=Util.class.getResource(""String_Node_Str"");
  if (url != null) {
    String dropinccPath=null;
    if (""String_Node_Str"".equalsIgnoreCase(url.getProtocol())) {
      String path=url.getPath();
      dropinccPath=path.substring(path.indexOf(""String_Node_Str"") + 1,path.indexOf(""String_Node_Str""));
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(url.getProtocol())) {
      String path=url.getPath();
      dropinccPath=path.substring(0,path.lastIndexOf(PATH_SEP + Util.class.getName().replace(""String_Node_Str"",PATH_SEP) + ""String_Node_Str""));
    }
    if (dropinccPath != null && !""String_Node_Str"".equals(dropinccPath) && sb.indexOf(dropinccPath) == -1) {
      if (sb.length() != 0)       sb.append(File.pathSeparator);
      sb.append(dropinccPath);
    }
  }
  return sb.toString();
}",0.976709796672828
10566,"/** 
 * Get the platform dependent temporary directory path, with 'file separator' suffix('/' on linux platform, '\' on windows).
 * @return
 */
public static String getTempDirWithFileSeparatorSuffix(){
  String p=System.getProperty(""String_Node_Str"");
  if (p.endsWith(PATH_SEP))   return p;
  return p + PATH_SEP;
}","/** 
 * Get the platform dependent temporary directory path, with 'file separator' suffix('/' on linux platform, '\' on windows).
 * @return
 */
public static String getTempDirWithFileSeparatorSuffix(){
  String p=System.getProperty(""String_Node_Str"");
  if (p.endsWith(File.separator))   return p;
  return p + PATH_SEP;
}",0.878125
10567,"public CAlternative(List<EleType> ms,Action action){
  this.matchSequence=ms;
  this.action=action;
}","public CAlternative(List<EleType> ms,Action action,Predicate pred){
  this.matchSequence=ms;
  this.action=action;
  this.predicate=pred;
}",0.8416666666666667
10568,"public void addTransition(Object edge,AtnState otherState){
  if (!edge.equals(Constants.epsilon) && !(edge instanceof TokenType) && !(edge instanceof GruleType))   throw new DropinccException(""String_Node_Str"" + edge);
  if (this.transitions.containsKey(edge)) {
    this.transitions.get(edge).add(otherState);
  }
 else {
    Set<AtnState> set=new HashSet<AtnState>();
    set.add(otherState);
    this.transitions.put(edge,set);
  }
}","public void addTransition(Object edge,AtnState otherState){
  if (!edge.equals(Constants.epsilon) && !(edge instanceof TokenType) && !(edge instanceof GruleType)&& !(edge instanceof Predicate))   throw new DropinccException(""String_Node_Str"" + edge);
  if (this.transitions.containsKey(edge)) {
    this.transitions.get(edge).add(otherState);
  }
 else {
    Set<AtnState> set=new HashSet<AtnState>();
    set.add(otherState);
    this.transitions.put(edge,set);
  }
}",0.9657458563535912
10569,"public LookAheadDfa createAfa(AtnState atnStartState){
  LookAheadDfa ret=new LookAheadDfa();
  Deque<DfaState> work=new ArrayDeque<DfaState>();
  DfaState D0=new DfaState();
  for (int alt=0; alt < atnStartState.getTransitionCount(); alt++) {
    ret.addDummyFinalState(alt);
  }
  List<Pair<Object,AtnState>> transitions=atnStartState.getTransitionsAsPairs();
  for (int i=0; i < transitions.size(); i++) {
    AtnState pa_i=transitions.get(i).getRight();
    Predicate pi=null;
    Object first_t=pa_i.getTransitions().entrySet().iterator().next().getKey();
    if (first_t instanceof Predicate)     pi=(Predicate)first_t;
    D0.addAllConfs(closure(D0,new AtnConfig(pa_i,extractAltFromAltState(pa_i),new CallStack(),pi)));
    D0.releaseBusy();
  }
  work.push(D0);
  ret.addState(D0);
  while (!work.isEmpty()) {
    DfaState state=work.pop();
    Set<TokenType> newTrans=new HashSet<TokenType>();
    int newWorkCount=0;
    Set<DfaState> newStates=new HashSet<DfaState>();
    moving:     for (    TokenType a : state.getAllTerminalEdgesOfContainingAtnStates()) {
      DfaState newState=new DfaState();
      for (      AtnConfig conf : state.move(a)) {
        newState.addAllConfs(closure(state,conf));
        state.releaseBusy();
        resolveOverflow(state);
        checkIfFinalAndReplace(state,ret);
        if (state.isStopTransit())         break moving;
      }
      if (!ret.containState(newState)) {
        resolveConflicts(newState);
        if (!checkIfFinalAndReplace(newState,ret)) {
          work.push(newState);
          newWorkCount++;
        }
        ret.addState(newState);
        newStates.add(newState);
        state.addTransition(a,newState);
        newTrans.add(a);
      }
 else {
        state.addTransition(a,ret.getSameState(newState));
        newTrans.add(a);
      }
    }
    if (state.isStopTransit()) {
      ret.removeStates(newStates);
      state.removeTransitions(newTrans);
      for (int i=0; i < newWorkCount; i++) {
        work.pop();
      }
    }
    Set<Pair<Predicate,DfaState>> predTrans=new HashSet<Pair<Predicate,DfaState>>();
    for (    AtnConfig conf : state.getResolvedConfs()) {
      predTrans.add(new Pair<Predicate,DfaState>(conf.getPred(),ret.getFinalStateOfAlt(conf.getAlt())));
    }
    for (    Pair<Predicate,DfaState> p : predTrans) {
      state.addTransition(p.getLeft(),p.getRight());
    }
  }
  return ret;
}","public LookAheadDfa createAfa(AtnState atnStartState){
  LookAheadDfa ret=new LookAheadDfa();
  Deque<DfaState> work=new ArrayDeque<DfaState>();
  DfaState D0=new DfaState();
  for (int alt=0; alt < atnStartState.getTransitionCount(); alt++) {
    ret.addDummyFinalState(alt);
  }
  List<Pair<Object,AtnState>> transitions=atnStartState.getTransitionsAsPairs();
  for (int i=0; i < transitions.size(); i++) {
    AtnState pa_i=transitions.get(i).getRight();
    Predicate pi=null;
    Object first_t=pa_i.getTransitions().entrySet().iterator().next().getKey();
    if (first_t instanceof Predicate)     pi=(Predicate)first_t;
    D0.addAllConfs(closure(D0,new AtnConfig(pa_i,extractAltFromAltState(pa_i),new CallStack(),pi)));
    D0.releaseBusy();
  }
  work.push(D0);
  ret.addState(D0);
  while (!work.isEmpty()) {
    DfaState state=work.pop();
    Set<TokenType> newTrans=new HashSet<TokenType>();
    int newWorkCount=0;
    Set<DfaState> newStates=new HashSet<DfaState>();
    Map<Integer,DfaState> finalsBack=new HashMap<Integer,DfaState>();
    moving:     for (    TokenType a : state.getAllTerminalEdgesOfContainingAtnStates()) {
      DfaState newState=new DfaState();
      for (      AtnConfig conf : state.move(a)) {
        newState.addAllConfs(closure(state,conf));
        state.releaseBusy();
        resolveOverflow(state);
        checkIfFinalAndReplace(state,ret,finalsBack,false);
        if (state.isStopTransit())         break moving;
      }
      if (!ret.containState(newState)) {
        resolveConflicts(newState);
        if (!checkIfFinalAndReplace(newState,ret,finalsBack,true)) {
          work.push(newState);
          newWorkCount++;
        }
        ret.addState(newState);
        newStates.add(newState);
        state.addTransition(a,newState);
        newTrans.add(a);
      }
 else {
        state.addTransition(a,ret.getSameState(newState));
        newTrans.add(a);
      }
    }
    if (state.isStopTransit()) {
      ret.removeStates(newStates);
      state.removeTransitions(newTrans);
      for (      Map.Entry<Integer,DfaState> e : finalsBack.entrySet()) {
        DfaState s=e.getValue();
        ret.addState(s);
        ret.overrideFinalState(e.getKey(),s);
      }
      for (int i=0; i < newWorkCount; i++) {
        work.pop();
      }
    }
    Set<Pair<Predicate,DfaState>> predTrans=new HashSet<Pair<Predicate,DfaState>>();
    for (    AtnConfig conf : state.getResolvedConfs()) {
      predTrans.add(new Pair<Predicate,DfaState>(conf.getPred(),ret.getFinalStateOfAlt(conf.getAlt())));
    }
    for (    Pair<Predicate,DfaState> p : predTrans) {
      state.addTransition(p.getLeft(),p.getRight());
    }
  }
  return ret;
}",0.9431885197562414
10570,"/** 
 * Check if the specified dfa state is a final state, and if it is, replace the old final state of the same alternative number with the new one
 * @param state
 * @param ret
 */
private static boolean checkIfFinalAndReplace(DfaState state,LookAheadDfa dnet){
  Set<Integer> predictingAlts=state.getAllPredictingAlts();
  if (predictingAlts.size() == 1) {
    int alt=predictingAlts.iterator().next();
    state.setAlt(alt);
    dnet.overrideFinalState(alt,state);
    state.setStopTransit(true);
    return true;
  }
  return false;
}","/** 
 * Check if the specified dfa state is a final state, and if it is, replace the old final state of the same alternative number with the new one
 */
private boolean checkIfFinalAndReplace(DfaState state,LookAheadDfa dnet,Map<Integer,DfaState> finalsBack,boolean backup){
  Set<Integer> predictingAlts=state.getAllPredictingAlts();
  if (predictingAlts.size() == 1) {
    int alt=predictingAlts.iterator().next();
    state.setAlt(alt);
    DfaState oldFinal=dnet.overrideFinalState(alt,state);
    if (backup && !finalsBack.containsKey(alt))     finalsBack.put(alt,oldFinal);
    state.setStopTransit(true);
    return true;
  }
  return false;
}",0.830950378469302
10571,"/** 
 * Replace the old final state with the specified one
 * @param alt
 * @param state
 */
public void overrideFinalState(int alt,DfaState state){
  DfaState oldFinal=this.finalStates.put(alt,state);
  for (  DfaState s : this.states) {
    for (    Map.Entry<Object,DfaState> trans : s.getTransitions().entrySet()) {
      if (trans.getValue().equals(oldFinal)) {
        trans.setValue(state);
      }
    }
  }
  this.states.remove(oldFinal);
}","/** 
 * Replace the old final state with the specified one
 * @param alt
 * @param state
 */
public DfaState overrideFinalState(int alt,DfaState state){
  DfaState oldFinal=this.finalStates.put(alt,state);
  for (  DfaState s : this.states) {
    for (    Map.Entry<Object,DfaState> trans : s.getTransitions().entrySet()) {
      if (trans.getValue().equals(oldFinal)) {
        trans.setValue(state);
      }
    }
  }
  if (!oldFinal.equals(state))   this.states.remove(oldFinal);
  return oldFinal;
}",0.934873949579832
10572,"private static List<CAlternative> resolveCAlts(List<Alternative> alts,TypeMappingParam param){
  List<CAlternative> ret=new ArrayList<CAlternative>();
  for (  Alternative a : alts) {
    List<EleType> ms=eleListToTypeList(a.getElements(),param);
    ret.add(new CAlternative(ms,a.getAction()));
  }
  return ret;
}","private static List<CAlternative> resolveCAlts(List<Alternative> alts,TypeMappingParam param){
  List<CAlternative> ret=new ArrayList<CAlternative>();
  for (  Alternative a : alts) {
    List<EleType> ms=eleListToTypeList(a.getElements(),param);
    ret.add(new CAlternative(ms,a.getAction(),a.getPred()));
  }
  return ret;
}",0.9813084112149532
10573,"public static void main(String... args) throws Throwable {
  Lang ll3=new Lang();
  Grule A=ll3.newGrule();
  ll3.defineGrule(A,CC.EOF);
  Grule B=ll3.newGrule();
  Grule C=ll3.newGrule();
  Grule D=ll3.newGrule();
  A.define(B,CC.ks(""String_Node_Str"")).alt(C,CC.kc(""String_Node_Str"")).alt(D,CC.op(""String_Node_Str""));
  B.define(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",C).alt(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",D).alt(""String_Node_Str"");
  C.define(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",D).alt(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  D.define(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").alt(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  genImages(ll3);
}","public static void main(String... args) throws Throwable {
  Lang lang=new Lang();
  Grule A=lang.newGrule();
  lang.defineGrule(A,CC.EOF);
  Grule B=lang.newGrule();
  A.define(B,""String_Node_Str"").alt(CC.ks(""String_Node_Str""),""String_Node_Str"").alt(CC.ks(""String_Node_Str""),""String_Node_Str"");
  B.define(CC.kc(""String_Node_Str""),B);
  genImages(lang);
}",0.3826839826839827
10574,"/** 
 * Open the error   {@link InputStream} of an Http response. This methodsupports GZIP and DEFLATE responses.
 */
private static InputStream getErrorStream(HttpURLConnection conn) throws IOException {
  final List<String> contentEncodingValues=conn.getHeaderFields().get(""String_Node_Str"");
  if (contentEncodingValues != null) {
    for (    final String contentEncoding : contentEncodingValues) {
      if (contentEncoding != null) {
        if (contentEncoding.contains(""String_Node_Str"")) {
          return new GZIPInputStream(conn.getErrorStream());
        }
        if (contentEncoding.contains(""String_Node_Str"")) {
          return new InflaterInputStream(conn.getErrorStream(),new Inflater(true));
        }
      }
    }
  }
  return conn.getInputStream();
}","/** 
 * Open the error   {@link InputStream} of an Http response. This methodsupports GZIP and DEFLATE responses.
 */
private static InputStream getErrorStream(HttpURLConnection conn) throws IOException {
  final List<String> contentEncodingValues=conn.getHeaderFields().get(""String_Node_Str"");
  if (contentEncodingValues != null) {
    for (    final String contentEncoding : contentEncodingValues) {
      if (contentEncoding != null) {
        if (contentEncoding.contains(""String_Node_Str"")) {
          return new GZIPInputStream(conn.getErrorStream());
        }
        if (contentEncoding.contains(""String_Node_Str"")) {
          return new InflaterInputStream(conn.getErrorStream(),new Inflater(true));
        }
      }
    }
  }
  return conn.getErrorStream();
}",0.9935400516795866
10575,"@Override public void onContentChanged(){
  if (!mEnsureInflating) {
    super.onContentChanged();
  }
}","@Override public void onContentChanged(){
  if (!mIsEnsureInflating) {
    super.onContentChanged();
  }
}",0.9904761904761904
10576,"protected void ensureSupportActionBarAttached(){
  if (IS_HONEYCOMB || mIsActionBarImplAttached) {
    return;
  }
  if (!isChild()) {
    final ListView contentView=(ListView)getWindow().getDecorView().findViewById(android.R.id.list);
    ((ViewGroup)contentView.getParent()).removeView(contentView);
    mEnsureInflating=true;
    if ((mWindowFlags & WINDOW_FLAG_ACTION_BAR) == WINDOW_FLAG_ACTION_BAR) {
      if ((mWindowFlags & WINDOW_FLAG_ACTION_BAR_OVERLAY) == WINDOW_FLAG_ACTION_BAR_OVERLAY) {
        super.setContentView(R.layout.abs__screen_action_bar_overlay);
      }
 else {
        super.setContentView(R.layout.abs__screen_action_bar);
      }
      mActionBar=new ActionBarImpl(this);
      ((ActionBarImpl)mActionBar).init();
      final boolean textEnabled=((mWindowFlags & WINDOW_FLAG_ACTION_BAR_ITEM_TEXT) == WINDOW_FLAG_ACTION_BAR_ITEM_TEXT);
      mSupportMenu.setShowsActionItemText(textEnabled);
      if ((mWindowFlags & WINDOW_FLAG_INDETERMINANTE_PROGRESS) == WINDOW_FLAG_INDETERMINANTE_PROGRESS) {
        ((ActionBarImpl)mActionBar).setProgressBarIndeterminateVisibility(false);
      }
    }
 else {
      if ((mWindowFlags & WINDOW_FLAG_INDETERMINANTE_PROGRESS) == WINDOW_FLAG_INDETERMINANTE_PROGRESS) {
        super.requestWindowFeature((int)Window.FEATURE_INDETERMINATE_PROGRESS);
      }
      super.setContentView(R.layout.abs__screen_simple);
    }
    ((ViewGroup)findViewById(R.id.abs__content)).addView(contentView);
    mEnsureInflating=false;
    super.onContentChanged();
  }
  invalidateOptionsMenu();
  mIsActionBarImplAttached=true;
}","protected void ensureSupportActionBarAttached(){
  if (IS_HONEYCOMB || mIsActionBarImplAttached) {
    return;
  }
  if (!isChild()) {
    final ListView contentView=(ListView)getWindow().getDecorView().findViewById(android.R.id.list);
    ((ViewGroup)contentView.getParent()).removeView(contentView);
    mIsEnsureInflating=true;
    if ((mWindowFlags & WINDOW_FLAG_ACTION_BAR) == WINDOW_FLAG_ACTION_BAR) {
      if ((mWindowFlags & WINDOW_FLAG_ACTION_BAR_OVERLAY) == WINDOW_FLAG_ACTION_BAR_OVERLAY) {
        super.setContentView(R.layout.abs__screen_action_bar_overlay);
      }
 else {
        super.setContentView(R.layout.abs__screen_action_bar);
      }
      mActionBar=new ActionBarImpl(this);
      ((ActionBarImpl)mActionBar).init();
      final boolean textEnabled=((mWindowFlags & WINDOW_FLAG_ACTION_BAR_ITEM_TEXT) == WINDOW_FLAG_ACTION_BAR_ITEM_TEXT);
      mSupportMenu.setShowsActionItemText(textEnabled);
      if ((mWindowFlags & WINDOW_FLAG_INDETERMINANTE_PROGRESS) == WINDOW_FLAG_INDETERMINANTE_PROGRESS) {
        ((ActionBarImpl)mActionBar).setProgressBarIndeterminateVisibility(false);
      }
    }
 else {
      if ((mWindowFlags & WINDOW_FLAG_INDETERMINANTE_PROGRESS) == WINDOW_FLAG_INDETERMINANTE_PROGRESS) {
        super.requestWindowFeature((int)Window.FEATURE_INDETERMINATE_PROGRESS);
      }
      super.setContentView(R.layout.abs__screen_simple);
    }
    ((ViewGroup)findViewById(R.id.abs__content)).addView(contentView);
    mIsEnsureInflating=false;
    super.onContentChanged();
  }
  invalidateOptionsMenu();
  mIsActionBarImplAttached=true;
}",0.9987349778621126
10577,"@Smoke public void testMenuItemStringTitle(){
  String expected=getActivity().getStringTitle();
  CharSequence actual=getActivity().getStringMenuItem().getTitle();
  assertNotNull(actual);
  assertEquals(expected,actual);
}","@Smoke public void testMenuItemStringTitle(){
  String expected=getActivity().getStringTitle();
  MenuItem stringMenuItem=getActivity().getStringMenuItem();
  assertNotNull(stringMenuItem);
  CharSequence actual=stringMenuItem.getTitle();
  assertNotNull(actual);
  assertEquals(expected,actual);
}",0.7293666026871402
10578,"@Smoke public void testMenuItemResourceTitle(){
  String expected=getActivity().getResourceTitle();
  CharSequence actual=getActivity().getResourceMenuItem().getTitle();
  assertNotNull(actual);
  assertEquals(expected,actual);
}","@Smoke public void testMenuItemResourceTitle(){
  String expected=getActivity().getResourceTitle();
  MenuItem resourceMenuItem=getActivity().getResourceMenuItem();
  assertNotNull(resourceMenuItem);
  CharSequence actual=resourceMenuItem.getTitle();
  assertNotNull(actual);
  assertEquals(expected,actual);
}",0.7198515769944341
10579,"private void sendUiMessage(String str){
  String gcodeComment=""String_Node_Str"";
  int startComment=str.indexOf(""String_Node_Str"");
  int endComment=str.indexOf(""String_Node_Str"");
  for (int i=startComment; i <= endComment; i++) {
    gcodeComment+=str.charAt(i);
  }
  Main.postConsoleMessage(""String_Node_Str"" + gcodeComment + ""String_Node_Str"");
}","private void sendUiMessage(String str){
  String gcodeComment=""String_Node_Str"";
  int startComment=str.indexOf(""String_Node_Str"");
  int endComment=str.indexOf(""String_Node_Str"");
  for (int i=startComment; i <= endComment; i++) {
    gcodeComment+=str.charAt(i);
  }
  Main.postConsoleMessage(""String_Node_Str"" + gcodeComment);
}",0.9706744868035192
10580,"public static void _updateGuiAxisSettings(Axis ax){
switch (ax.getAxis_name().toLowerCase()) {
case ""String_Node_Str"":
    axisAmode.getSelectionModel().select(ax.getAxis_mode().ordinal());
  axisAmaxFeedRate.setText(String.valueOf(ax.getFeed_rate_maximum()));
axisAmaxTravel.setText(String.valueOf(ax.getTravel_maximum()));
axisAjunctionDeviation.setText(String.valueOf(ax.getJunction_devation()));
axisAmaxVelocity.setText(String.valueOf(ax.getVelocityMaximum()));
axisAmaxJerk.setText(decimalFormat.format(ax.getJerkMaximum()));
axisAradius.setText(String.valueOf(ax.getRadius()));
axisAsearchVelocity.setText(String.valueOf(ax.getSearch_velocity()));
axisAzeroBackoff.setText(String.valueOf(ax.getZero_backoff()));
axisAswitchModeMax.getSelectionModel().select(ax.getMaxSwitchMode().ordinal());
axisAswitchModeMin.getSelectionModel().select(ax.getMinSwitchMode().ordinal());
axisAlatchBackoff.setText(String.valueOf(ax.getLatch_backoff()));
axisAlatchVelocity.setText(String.valueOf(ax.getLatch_velocity()));
break;
case ""String_Node_Str"":
axisBmode.getSelectionModel().select(ax.getAxis_mode().ordinal());
axisBmaxFeedRate.setText(String.valueOf(ax.getFeed_rate_maximum()));
axisBmaxTravel.setText(String.valueOf(ax.getTravel_maximum()));
axisBjunctionDeviation.setText(String.valueOf(ax.getJunction_devation()));
axisBmaxVelocity.setText(String.valueOf(ax.getVelocityMaximum()));
axisBmaxJerk.setText(decimalFormat.format(ax.getJerkMaximum()));
axisBradius.setText(String.valueOf(ax.getRadius()));
axisBsearchVelocity.setDisable(true);
axisBlatchVelocity.setDisable(true);
axisBlatchBackoff.setDisable(true);
axisBswitchModeMax.setDisable(true);
axisBswitchModeMin.setDisable(true);
axisBzeroBackoff.setDisable(true);
break;
case ""String_Node_Str"":
axisCmode.getSelectionModel().select(ax.getAxis_mode().ordinal());
axisCmaxFeedRate.setText(String.valueOf(ax.getFeed_rate_maximum()));
axisCmaxTravel.setText(String.valueOf(ax.getTravel_maximum()));
axisCjunctionDeviation.setText(String.valueOf(ax.getJunction_devation()));
axisCmaxVelocity.setText(String.valueOf(ax.getVelocityMaximum()));
axisCmaxJerk.setText(decimalFormat.format(ax.getJerkMaximum()));
axisCradius.setText(String.valueOf(ax.getRadius()));
axisCsearchVelocity.setDisable(true);
axisClatchVelocity.setDisable(true);
axisClatchBackoff.setDisable(true);
axisCswitchModeMax.setDisable(true);
axisCswitchModeMin.setDisable(true);
axisCzeroBackoff.setDisable(true);
break;
case ""String_Node_Str"":
axisXmode.getSelectionModel().select(ax.getAxis_mode().ordinal());
axisXmaxFeedRate.setText(String.valueOf(ax.getFeed_rate_maximum()));
axisXmaxTravel.setText(String.valueOf(ax.getTravel_maximum()));
axisXjunctionDeviation.setText(String.valueOf(ax.getJunction_devation()));
axisXsearchVelocity.setText(String.valueOf(ax.getSearch_velocity()));
axisXzeroBackoff.setText(String.valueOf(ax.getZero_backoff()));
axisXswitchModeMax.getSelectionModel().select(ax.getMaxSwitchMode().ordinal());
axisXswitchModeMin.getSelectionModel().select(ax.getMinSwitchMode().ordinal());
axisXmaxJerk.setText(decimalFormat.format(ax.getJerkMaximum()));
axisXmaxVelocity.setText(String.valueOf(ax.getVelocityMaximum()));
axisXlatchBackoff.setText(String.valueOf(ax.getLatch_backoff()));
axisXlatchVelocity.setText(String.valueOf(ax.getLatch_velocity()));
break;
case ""String_Node_Str"":
axisYmode.getSelectionModel().select(ax.getAxis_mode().ordinal());
axisYmaxFeedRate.setText(String.valueOf(ax.getFeed_rate_maximum()));
axisYmaxTravel.setText(String.valueOf(ax.getTravel_maximum()));
axisYjunctionDeviation.setText(String.valueOf(ax.getJunction_devation()));
axisYsearchVelocity.setText(String.valueOf(ax.getSearch_velocity()));
axisYzeroBackoff.setText(String.valueOf(ax.getZero_backoff()));
axisYswitchModeMax.getSelectionModel().select(ax.getMaxSwitchMode().ordinal());
axisYswitchModeMin.getSelectionModel().select(ax.getMinSwitchMode().ordinal());
axisYmaxVelocity.setText(String.valueOf(ax.getVelocityMaximum()));
axisYmaxJerk.setText(decimalFormat.format(ax.getJerkMaximum()));
axisYlatchVelocity.setText(String.valueOf(ax.getLatch_velocity()));
axisYlatchBackoff.setText(String.valueOf(ax.getLatch_backoff()));
break;
case ""String_Node_Str"":
axisZmode.getSelectionModel().select(ax.getAxis_mode().ordinal());
axisZmaxFeedRate.setText(String.valueOf(ax.getFeed_rate_maximum()));
axisZmaxTravel.setText(String.valueOf(ax.getTravel_maximum()));
axisZjunctionDeviation.setText(String.valueOf(ax.getJunction_devation()));
axisZsearchVelocity.setText(String.valueOf(ax.getSearch_velocity()));
axisZzeroBackoff.setText(String.valueOf(ax.getZero_backoff()));
axisZswitchModeMin.getSelectionModel().select(ax.getMaxSwitchMode().ordinal());
axisZswitchModeMax.getSelectionModel().select(ax.getMinSwitchMode().ordinal());
axisZmaxVelocity.setText(String.valueOf(ax.getVelocityMaximum()));
axisZmaxJerk.setText(decimalFormat.format(ax.getJerkMaximum()));
axisZlatchVelocity.setText(String.valueOf(ax.getLatch_velocity()));
axisZlatchBackoff.setText(String.valueOf(ax.getLatch_backoff()));
break;
}
}","public static void _updateGuiAxisSettings(Axis ax){
switch (ax.getAxis_name().toLowerCase()) {
case ""String_Node_Str"":
    axisAmode.getSelectionModel().select(ax.getAxis_mode().ordinal());
  axisAmaxFeedRate.setText(String.valueOf(ax.getFeed_rate_maximum()));
axisAmaxTravel.setText(String.valueOf(ax.getTravel_maximum()));
axisAjunctionDeviation.setText(String.valueOf(ax.getJunction_devation()));
axisAmaxVelocity.setText(String.valueOf(ax.getVelocityMaximum()));
axisAmaxJerk.setText(decimalFormat.format(ax.getJerkMaximum()));
axisAradius.setText(String.valueOf(ax.getRadius()));
axisAsearchVelocity.setText(String.valueOf(ax.getSearch_velocity()));
axisAzeroBackoff.setText(String.valueOf(ax.getZero_backoff()));
axisAswitchModeMax.getSelectionModel().select(ax.getMaxSwitchMode().ordinal());
axisAswitchModeMin.getSelectionModel().select(ax.getMinSwitchMode().ordinal());
axisAlatchBackoff.setText(String.valueOf(ax.getLatch_backoff()));
axisAlatchVelocity.setText(String.valueOf(ax.getLatch_velocity()));
break;
case ""String_Node_Str"":
axisBmode.getSelectionModel().select(ax.getAxis_mode().ordinal());
axisBmaxFeedRate.setText(String.valueOf(ax.getFeed_rate_maximum()));
axisBmaxTravel.setText(String.valueOf(ax.getTravel_maximum()));
axisBjunctionDeviation.setText(String.valueOf(ax.getJunction_devation()));
axisBmaxVelocity.setText(String.valueOf(ax.getVelocityMaximum()));
axisBmaxJerk.setText(decimalFormat.format(ax.getJerkMaximum()));
axisBradius.setText(String.valueOf(ax.getRadius()));
axisBsearchVelocity.setDisable(true);
axisBlatchVelocity.setDisable(true);
axisBlatchBackoff.setDisable(true);
axisBswitchModeMax.setDisable(true);
axisBswitchModeMin.setDisable(true);
axisBzeroBackoff.setDisable(true);
break;
case ""String_Node_Str"":
axisCmode.getSelectionModel().select(ax.getAxis_mode().ordinal());
axisCmaxFeedRate.setText(String.valueOf(ax.getFeed_rate_maximum()));
axisCmaxTravel.setText(String.valueOf(ax.getTravel_maximum()));
axisCjunctionDeviation.setText(String.valueOf(ax.getJunction_devation()));
axisCmaxVelocity.setText(String.valueOf(ax.getVelocityMaximum()));
axisCmaxJerk.setText(decimalFormat.format(ax.getJerkMaximum()));
axisCradius.setText(String.valueOf(ax.getRadius()));
axisCsearchVelocity.setDisable(true);
axisClatchVelocity.setDisable(true);
axisClatchBackoff.setDisable(true);
axisCswitchModeMax.setDisable(true);
axisCswitchModeMin.setDisable(true);
axisCzeroBackoff.setDisable(true);
break;
case ""String_Node_Str"":
axisXmode.getSelectionModel().select(ax.getAxis_mode().ordinal());
axisXmaxFeedRate.setText(String.valueOf(ax.getFeed_rate_maximum()));
axisXmaxTravel.setText(String.valueOf(ax.getTravel_maximum()));
axisXjunctionDeviation.setText(String.valueOf(ax.getJunction_devation()));
axisXsearchVelocity.setText(String.valueOf(ax.getSearch_velocity()));
axisXzeroBackoff.setText(String.valueOf(ax.getZero_backoff()));
axisXswitchModeMax.getSelectionModel().select(ax.getMaxSwitchMode().ordinal());
axisXswitchModeMin.getSelectionModel().select(ax.getMinSwitchMode().ordinal());
axisXmaxJerk.setText(decimalFormat.format(ax.getJerkMaximum()));
axisXmaxVelocity.setText(String.valueOf(ax.getVelocityMaximum()));
axisXlatchBackoff.setText(String.valueOf(ax.getLatch_backoff()));
axisXlatchVelocity.setText(String.valueOf(ax.getLatch_velocity()));
break;
case ""String_Node_Str"":
axisYmode.getSelectionModel().select(ax.getAxis_mode().ordinal());
axisYmaxFeedRate.setText(String.valueOf(ax.getFeed_rate_maximum()));
axisYmaxTravel.setText(String.valueOf(ax.getTravel_maximum()));
axisYjunctionDeviation.setText(String.valueOf(ax.getJunction_devation()));
axisYsearchVelocity.setText(String.valueOf(ax.getSearch_velocity()));
axisYzeroBackoff.setText(String.valueOf(ax.getZero_backoff()));
axisYswitchModeMax.getSelectionModel().select(ax.getMaxSwitchMode().ordinal());
axisYswitchModeMin.getSelectionModel().select(ax.getMinSwitchMode().ordinal());
axisYmaxVelocity.setText(String.valueOf(ax.getVelocityMaximum()));
axisYmaxJerk.setText(decimalFormat.format(ax.getJerkMaximum()));
axisYlatchVelocity.setText(String.valueOf(ax.getLatch_velocity()));
axisYlatchBackoff.setText(String.valueOf(ax.getLatch_backoff()));
break;
case ""String_Node_Str"":
axisZmode.getSelectionModel().select(ax.getAxis_mode().ordinal());
axisZmaxFeedRate.setText(String.valueOf(ax.getFeed_rate_maximum()));
axisZmaxTravel.setText(String.valueOf(ax.getTravel_maximum()));
axisZjunctionDeviation.setText(String.valueOf(ax.getJunction_devation()));
axisZsearchVelocity.setText(String.valueOf(ax.getSearch_velocity()));
axisZzeroBackoff.setText(String.valueOf(ax.getZero_backoff()));
axisZswitchModeMin.getSelectionModel().select(ax.getMinSwitchMode().ordinal());
axisZswitchModeMax.getSelectionModel().select(ax.getMaxSwitchMode().ordinal());
axisZmaxVelocity.setText(String.valueOf(ax.getVelocityMaximum()));
axisZmaxJerk.setText(decimalFormat.format(ax.getJerkMaximum()));
axisZlatchVelocity.setText(String.valueOf(ax.getLatch_velocity()));
axisZlatchBackoff.setText(String.valueOf(ax.getLatch_backoff()));
break;
}
}",0.999206821336506
10581,"public void onDisconnectActions(){
  TinygDriver.getInstance().m.setFirmwareBuild(0.0);
  TinygDriver.getInstance().m.firmwareBuild.set(0);
  TinygDriver.getInstance().m.firmwareVersion.set(""String_Node_Str"");
  TinygDriver.getInstance().m.m_state.set(""String_Node_Str"");
  TinygDriver.getInstance().m.setLineNumber(0);
  TinygDriver.getInstance().m.setMotionMode(0);
  Draw2d.setFirstDraw(true);
  TinygDriver.getInstance().serialWriter.resetBuffer();
  tgfx.ui.gcode.GcodeTabController.setCNCMachineVisible(false);
  TinygDriver.getInstance().serialWriter.clearQueueBuffer();
  TinygDriver.getInstance().serialWriter.notifyAck();
  buildChecked=false;
}","public void onDisconnectActions(){
  TinygDriver.getInstance().m.setFirmwareBuild(0.0);
  TinygDriver.getInstance().m.firmwareBuild.set(0);
  TinygDriver.getInstance().m.firmwareVersion.set(""String_Node_Str"");
  TinygDriver.getInstance().m.m_state.set(""String_Node_Str"");
  TinygDriver.getInstance().m.setLineNumber(0);
  TinygDriver.getInstance().m.setMotionMode(0);
  Draw2d.setFirstDraw(true);
  tgfx.ui.gcode.GcodeTabController.setCNCMachineVisible(false);
  TinygDriver.getInstance().serialWriter.resetBuffer();
  TinygDriver.getInstance().serialWriter.clearQueueBuffer();
  TinygDriver.getInstance().serialWriter.notifyAck();
  buildChecked=false;
}",0.9145038167938933
10582,"/** 
 * These are the actions that need to be ran upon successful serial port connection. If you have something that you want to ""auto run"" on connect. // * This is the place to do so. This met0 hod is called in handleConnect.
 */
private void onConnectActions(){
  try {
    Platform.runLater(new Runnable(){
      @Override public void run(){
        try {
          TinygDriver.getInstance().write(CommandManager.CMD_QUERY_HARDWARE_BUILD_NUMBER);
          postConsoleMessage(""String_Node_Str"");
        }
 catch (        Exception ex) {
          logger.error(""String_Node_Str"" + ex.getMessage());
        }
      }
    }
);
  }
 catch (  Exception ex) {
    postConsoleMessage(""String_Node_Str"" + ex.getMessage());
    System.out.println(ex.getMessage());
  }
}","/** 
 * These are the actions that need to be ran upon successful serial port connection. If you have something that you want to ""auto run"" on connect. // * This is the place to do so. This met0 hod is called in handleConnect.
 */
private void onConnectActions(){
  try {
    Platform.runLater(new Runnable(){
      @Override public void run(){
        try {
          TinygDriver.getInstance().serialWriter.resetBuffer();
          TinygDriver.getInstance().serialWriter.clearQueueBuffer();
          TinygDriver.getInstance().serialWriter.notifyAck();
          TinygDriver.getInstance().write(CommandManager.CMD_QUERY_HARDWARE_BUILD_NUMBER);
          postConsoleMessage(""String_Node_Str"");
        }
 catch (        Exception ex) {
          logger.error(""String_Node_Str"" + ex.getMessage());
        }
      }
    }
);
  }
 catch (  Exception ex) {
    postConsoleMessage(""String_Node_Str"" + ex.getMessage());
    System.out.println(ex.getMessage());
  }
}",0.8870874348581355
10583,"@Override public void setContainerDataSource(Container newDataSource){
  super.setContainerDataSource(newDataSource);
  resetFilters();
}","@Override public void setContainerDataSource(Container newDataSource,Collection<?> visibleIds){
  super.setContainerDataSource(newDataSource,visibleIds);
  resetFilters();
}",0.8838709677419355
10584,"@Override public void setContainerDataSource(Container newDataSource){
  super.setContainerDataSource(newDataSource);
  resetFilters();
}","@Override public void setContainerDataSource(Container newDataSource,Collection<?> visibleIds){
  super.setContainerDataSource(newDataSource,visibleIds);
  resetFilters();
}",0.8838709677419355
10585,"public void removeValueChangeListeners(){
  for (  AbstractField<?> af : customFields.keySet()) {
    af.removeValueChangeListener(listener);
  }
  for (  TextField tf : texts.keySet()) {
    tf.removeValueChangeListener(listener);
  }
  for (  ComboBox cb : enums.keySet()) {
    cb.removeValueChangeListener(listener);
  }
  for (  ComboBox cb : booleans.keySet()) {
    cb.removeValueChangeListener(listener);
  }
  for (  DateFilterPopup dfp : dates.keySet()) {
    dfp.removeValueChangeListener(listener);
  }
  for (  NumberFilterPopup nfp : numbers.keySet()) {
    nfp.removeValueChangeListener(listener);
  }
}","private void removeValueChangeListeners(){
  for (  AbstractField<?> af : customFields.keySet()) {
    af.removeValueChangeListener(listener);
  }
  for (  TextField tf : texts.keySet()) {
    tf.removeValueChangeListener(listener);
  }
  for (  ComboBox cb : enums.keySet()) {
    cb.removeValueChangeListener(listener);
  }
  for (  ComboBox cb : booleans.keySet()) {
    cb.removeValueChangeListener(listener);
  }
  for (  DateFilterPopup dfp : dates.keySet()) {
    dfp.removeValueChangeListener(listener);
  }
  for (  NumberFilterPopup nfp : numbers.keySet()) {
    nfp.removeValueChangeListener(listener);
  }
}",0.9911075181891672
10586,"public void switchToOnDemandMode(){
  runFiltersOnDemand=true;
  clearFilterData();
  initializeFilterFields();
  removeValueChangeListeners();
}","void switchToOnDemandMode(){
  runFiltersOnDemand=true;
  clearFilterData();
  initializeFilterFields();
}",0.8446215139442231
10587,"public void switchToOnlineMode(){
  runFiltersOnDemand=false;
  clearFilterData();
  initializeFilterFields();
}","void switchToOnlineMode(){
  runFiltersOnDemand=false;
  clearFilterData();
  initializeFilterFields();
}",0.967741935483871
10588,"void initializeFilterFields(){
  if (owner.getFilterable() != null) {
    for (    Object property : owner.getVisibleColumns()) {
      if (owner.getContainerPropertyIds().contains(property)) {
        AbstractField<?> filter=createField(property,owner.getContainerDataSource().getType(property));
        if (!owner.isFiltersRunOnDemand()) {
          filter.addValueChangeListener(listener);
        }
        filter.addValueChangeListener(listener);
        addFilterColumn(property,filter);
      }
 else {
        AbstractField<?> filter=createField(property,null);
        if (!owner.isFiltersRunOnDemand()) {
          filter.addValueChangeListener(listener);
        }
        addFilterColumn(property,filter);
      }
    }
  }
}","void initializeFilterFields(){
  if (owner.getFilterable() != null) {
    for (    Object property : owner.getVisibleColumns()) {
      if (owner.getContainerPropertyIds().contains(property)) {
        AbstractField<?> filter=createField(property,owner.getContainerDataSource().getType(property));
        addFilterColumn(property,filter);
      }
 else {
        AbstractField<?> filter=createField(property,null);
        addFilterColumn(property,filter);
      }
    }
    if (!runFiltersOnDemand) {
      addValueChangeListeners();
    }
  }
}",0.7517509727626459
10589,"private AbstractField<?> createField(Object property,Class<?> type){
  AbstractField<?> field=null;
  if (owner.getFilterGenerator() != null) {
    field=owner.getFilterGenerator().getCustomFilterComponent(property);
  }
  if (field != null) {
    customFields.put(field,property);
  }
 else   if (type == null) {
    field=new TextField();
    field.setWidth(100,Unit.PERCENTAGE);
    return field;
  }
 else   if (type == boolean.class || type == Boolean.class) {
    field=createBooleanField(property);
  }
 else   if (type.isEnum()) {
    field=createEnumField(type,property);
  }
 else   if (type == Date.class || type == Timestamp.class || type == java.sql.Date.class) {
    DateFilterPopup dfp=createDateField(property);
    dfp.setWidth(100,Unit.PERCENTAGE);
    dfp.setImmediate(true);
    dfp.addValueChangeListener(listener);
    return dfp;
  }
 else   if ((type == Integer.class || type == Long.class || type == Float.class || type == Double.class || type == Short.class || type == Byte.class || type == int.class || type == long.class || type == float.class || type == double.class || type == short.class || type == byte.class) && owner.getFilterDecorator() != null && owner.getFilterDecorator().usePopupForNumericProperty(property)) {
    NumberFilterPopup nfp=createNumericField(type,property);
    nfp.setWidth(100,Unit.PERCENTAGE);
    nfp.setImmediate(true);
    nfp.addValueChangeListener(listener);
    return nfp;
  }
 else {
    field=createTextField(property);
  }
  field.setWidth(null);
  field.setImmediate(true);
  field.addValueChangeListener(listener);
  return field;
}","private AbstractField<?> createField(Object property,Class<?> type){
  AbstractField<?> field=null;
  if (owner.getFilterGenerator() != null) {
    field=owner.getFilterGenerator().getCustomFilterComponent(property);
  }
  if (field != null) {
    customFields.put(field,property);
  }
 else   if (type == null) {
    field=new TextField();
    field.setWidth(100,Unit.PERCENTAGE);
    return field;
  }
 else   if (type == boolean.class || type == Boolean.class) {
    field=createBooleanField(property);
  }
 else   if (type.isEnum()) {
    field=createEnumField(type,property);
  }
 else   if (type == Date.class || type == Timestamp.class || type == java.sql.Date.class) {
    DateFilterPopup dfp=createDateField(property);
    dfp.setWidth(100,Unit.PERCENTAGE);
    dfp.setImmediate(true);
    return dfp;
  }
 else   if ((type == Integer.class || type == Long.class || type == Float.class || type == Double.class || type == Short.class || type == Byte.class || type == int.class || type == long.class || type == float.class || type == double.class || type == short.class || type == byte.class) && owner.getFilterDecorator() != null && owner.getFilterDecorator().usePopupForNumericProperty(property)) {
    NumberFilterPopup nfp=createNumericField(type,property);
    nfp.setWidth(100,Unit.PERCENTAGE);
    nfp.setImmediate(true);
    return nfp;
  }
 else {
    field=createTextField(property);
  }
  field.setWidth(null);
  field.setImmediate(true);
  return field;
}",0.8731294729993494
10590,"@Override public boolean isFiltersRunOnDemand(){
  return filtersRunOnDemand;
}","public boolean isFiltersRunOnDemand(){
  return filtersRunOnDemand;
}",0.9324324324324323
10591,"public void setFiltersRunOnDemand(boolean filtersRunOnDemand){
  if (this.filtersRunOnDemand == filtersRunOnDemand) {
    return;
  }
  this.filtersRunOnDemand=filtersRunOnDemand;
  if (filtersRunOnDemand) {
    generator.switchToOnDemandMode();
  }
 else {
    generator.switchToOnlineMode();
  }
}","public void setFiltersRunOnDemand(boolean filtersRunOnDemand){
  if (this.filtersRunOnDemand == filtersRunOnDemand) {
    return;
  }
  this.filtersRunOnDemand=filtersRunOnDemand;
  reRenderFilterFields=true;
  if (filtersRunOnDemand) {
    generator.switchToOnDemandMode();
  }
 else {
    generator.switchToOnlineMode();
  }
}",0.9537480063795852
10592,"@Override public boolean isFiltersRunOnDemand(){
  throw new UnsupportedOperationException(""String_Node_Str"" + getClass().getCanonicalName());
}","public boolean isFiltersRunOnDemand(){
  return false;
}",0.51
10593,"/** 
 * Resets all filters. Note: Recreates the filter fields also!
 */
public void resetFilters(){
  if (initDone) {
    for (    Component c : columnIdToFilterMap.values()) {
      c.setParent(null);
    }
    collapsedColumnIds.clear();
    columnIdToFilterMap.clear();
    generator.clearFilterData();
    generator.initializeFilterFields();
    reRenderFilterFields=true;
  }
}","/** 
 * Resets all filters. Note: Recreates the filter fields also!
 */
public void resetFilters(){
  if (initDone) {
    disableContentRefreshing();
    for (    Component c : columnIdToFilterMap.values()) {
      c.setParent(null);
    }
    collapsedColumnIds.clear();
    columnIdToFilterMap.clear();
    generator.clearFilterData();
    generator.initializeFilterFields();
    reRenderFilterFields=true;
    enableContentRefreshing(true);
  }
}",0.9193742478941036
10594,"private void removeFilter(Object propertyId){
  if (filters.get(propertyId) != null) {
    owner.getFilterable().removeContainerFilter(filters.get(propertyId));
    filters.remove(propertyId);
  }
}","private void removeFilter(Object propertyId){
  if (filters.get(propertyId) != null) {
    if (owner.getFilterable() != null) {
      owner.getFilterable().removeContainerFilter(filters.get(propertyId));
    }
    filters.remove(propertyId);
  }
}",0.8898876404494382
10595,"void clearFilterData(){
  owner.setRefreshingEnabled(false);
  for (  Object propertyId : filters.keySet()) {
    owner.getFilterable().removeContainerFilter(filters.get(propertyId));
    if (owner.getFilterGenerator() != null) {
      owner.getFilterGenerator().filterRemoved(propertyId);
    }
  }
  removeValueChangeListeners();
  customFields.clear();
  filters.clear();
  texts.clear();
  enums.clear();
  booleans.clear();
  dates.clear();
  numbers.clear();
  owner.setRefreshingEnabled(true);
  owner.getFilterable().removeContainerFilter(lastOnDemandFilter);
}","void clearFilterData(){
  owner.setRefreshingEnabled(false);
  for (  Object propertyId : filters.keySet()) {
    if (owner.getFilterable() != null) {
      owner.getFilterable().removeContainerFilter(filters.get(propertyId));
    }
    if (owner.getFilterGenerator() != null) {
      owner.getFilterGenerator().filterRemoved(propertyId);
    }
  }
  removeValueChangeListeners();
  customFields.clear();
  filters.clear();
  texts.clear();
  enums.clear();
  booleans.clear();
  dates.clear();
  numbers.clear();
  owner.setRefreshingEnabled(true);
  if (owner.getFilterable() != null) {
    owner.getFilterable().removeContainerFilter(lastOnDemandFilter);
  }
}",0.9237012987012988
10596,"public void runFiltersNow(){
  owner.setRefreshingEnabled(false);
  owner.getFilterable().removeContainerFilter(lastOnDemandFilter);
  List<Filter> filters=new ArrayList<Filter>();
  for (  AbstractField<?> f : customFields.keySet()) {
    addNonNullFilter(filters,f);
  }
  for (  AbstractField<?> f : texts.keySet()) {
    addNonNullFilter(filters,f);
  }
  for (  AbstractField<?> f : dates.keySet()) {
    addNonNullFilter(filters,f);
  }
  for (  AbstractField<?> f : numbers.keySet()) {
    addNonNullFilter(filters,f);
  }
  for (  AbstractField<?> f : enums.keySet()) {
    addNonNullFilter(filters,f);
  }
  for (  AbstractField<?> f : booleans.keySet()) {
    addNonNullFilter(filters,f);
  }
  Filter[] filtersArray=filters.toArray(new Filter[0]);
  lastOnDemandFilter=new And(filtersArray);
  owner.getFilterable().addContainerFilter(lastOnDemandFilter);
  owner.setRefreshingEnabled(true);
}","public void runFiltersNow(){
  owner.setRefreshingEnabled(false);
  if (owner.getFilterable() != null) {
    owner.getFilterable().removeContainerFilter(lastOnDemandFilter);
  }
  List<Filter> filters=new ArrayList<Filter>();
  for (  AbstractField<?> f : customFields.keySet()) {
    addNonNullFilter(filters,f);
  }
  for (  AbstractField<?> f : texts.keySet()) {
    addNonNullFilter(filters,f);
  }
  for (  AbstractField<?> f : dates.keySet()) {
    addNonNullFilter(filters,f);
  }
  for (  AbstractField<?> f : numbers.keySet()) {
    addNonNullFilter(filters,f);
  }
  for (  AbstractField<?> f : enums.keySet()) {
    addNonNullFilter(filters,f);
  }
  for (  AbstractField<?> f : booleans.keySet()) {
    addNonNullFilter(filters,f);
  }
  Filter[] filtersArray=filters.toArray(new Filter[0]);
  lastOnDemandFilter=new And(filtersArray);
  if (owner.getFilterable() != null) {
    owner.getFilterable().addContainerFilter(lastOnDemandFilter);
  }
  owner.setRefreshingEnabled(true);
}",0.952581664910432
10597,"private void setFilter(Filter filter,Object propertyId){
  owner.getFilterable().addContainerFilter(filter);
  filters.put(propertyId,filter);
}","private void setFilter(Filter filter,Object propertyId){
  if (owner.getFilterable() != null) {
    owner.getFilterable().addContainerFilter(filter);
  }
  filters.put(propertyId,filter);
}",0.8648648648648649
10598,"protected void setContainerHeight(){
  if (!isDynamicHeight()) {
    if (BrowserInfo.get().isAndroid23()) {
      getElement().getStyle().setDisplay(Display.BLOCK);
    }
    containerHeight=getOffsetHeight();
    containerHeight-=showColHeaders ? tHead.getOffsetHeight() : 0;
    containerHeight-=tFoot.getOffsetHeight();
    containerHeight-=getContentAreaBorderHeight();
    if (containerHeight < 0) {
      containerHeight=0;
    }
    scrollBodyPanel.setHeight(containerHeight + ""String_Node_Str"");
    if (BrowserInfo.get().isAndroid23()) {
      getElement().getStyle().clearDisplay();
    }
  }
}","public void setContainerHeight(){
  if (!isDynamicHeight()) {
    if (BrowserInfo.get().isAndroid23()) {
      getElement().getStyle().setDisplay(Display.BLOCK);
    }
    calculateContainerHeight();
    scrollBodyPanel.setHeight(containerHeight + ""String_Node_Str"");
    if (BrowserInfo.get().isAndroid23()) {
      getElement().getStyle().clearDisplay();
    }
  }
}",0.7119341563786008
10599,"@Override protected void setColWidth(int colIndex,int w,boolean isDefinedWidth){
  super.setColWidth(colIndex,w,isDefinedWidth);
  columnWidths.put(colIndex,w);
  filters.setFilterWidth(colIndex,w);
}","@Override protected void setColWidth(int colIndex,int w,boolean isDefinedWidth){
  super.setColWidth(colIndex,w,isDefinedWidth);
  filters.setFilterWidth(colIndex);
}",0.907103825136612
10600,"void reRenderFilterComponents(){
  container.clear();
  for (int i=0; i < tHead.getVisibleCellCount(); i++) {
    String key=getColKeyByIndex(i);
    if (key == null) {
      continue;
    }
    Widget widget=filters.get(key);
    if (widget == null) {
      Widget placeHolder=new FlowPanel();
      placeHolder.addStyleName(""String_Node_Str"");
      container.add(placeHolder);
      filters.put(key,placeHolder);
      setFilterWidth(i,getColWidth(key));
    }
 else {
      container.add(widget);
      setFilterWidth(i,getColWidth(key));
    }
  }
}","void reRenderFilterComponents(){
  container.clear();
  for (int i=0; i < tHead.getVisibleCellCount(); i++) {
    String key=getColKeyByIndex(i);
    if (key == null) {
      continue;
    }
    Widget widget=filters.get(key);
    if (widget == null) {
      Widget placeHolder=new FlowPanel();
      placeHolder.addStyleName(""String_Node_Str"");
      container.add(placeHolder);
      filters.put(key,placeHolder);
      setFilterWidth(i);
    }
 else {
      container.add(widget);
      setFilterWidth(i);
    }
  }
}",0.8528864059590316
10601,"private void setFilterWidth(int index,int width){
  Widget p=filters.get(getColKeyByIndex(index));
  if (p != null) {
    p.setWidth(Util.getRequiredWidth(tHead.getHeaderCell(index)) + ""String_Node_Str"");
  }
}","private void setFilterWidth(int index){
  Widget p=filters.get(getColKeyByIndex(index));
  if (p != null) {
    int w=Util.getRequiredWidth(tHead.getHeaderCell(index));
    if (w <= 0) {
      VScrollTableRow firstRow=scrollBody.getRowByRowIndex(scrollBody.getFirstRendered());
      final Element cell=DOM.getChild(firstRow.getElement(),index);
      w=Util.getRequiredWidth(cell);
    }
    w=w > 0 ? w : 0;
    p.setWidth(w + ""String_Node_Str"");
  }
}",0.5692771084337349
10602,"public void resetFilterWidths(){
  for (int i=0; i < tHead.getVisibleCellCount(); i++) {
    String key=getColKeyByIndex(i);
    if (key == null) {
      continue;
    }
    setFilterWidth(i,getColWidth(key));
  }
}","public void resetFilterWidths(){
  for (int i=0; i < tHead.getVisibleCellCount(); i++) {
    setFilterWidth(i);
  }
}",0.7048192771084337
10603,"public VFilterTable(){
  super();
  filters=new FilterPanel();
  insert(filters,1);
}","public VFilterTable(){
  super();
  filters=new FilterPanel();
  insert(filters,1);
  filters.getElement().getStyle().setDisplay(Display.NONE);
}",0.7391304347826086
10604,"@Override protected void setContentWidth(int pixels){
  super.setContentWidth(pixels);
  filters.setWidth(pixels + ""String_Node_Str"");
}","@Override protected void setContentWidth(int pixels){
  filters.setWidth(pixels + ""String_Node_Str"");
  super.setContentWidth(pixels);
}",0.7573529411764706
10605,"@Override public void paintContent(PaintTarget target) throws PaintException {
  super.paintContent(target);
  target.startTag(""String_Node_Str"");
  target.addAttribute(""String_Node_Str"",filtersVisible);
  if (filtersVisible) {
    for (    Object key : getColumnIdToFilterMap().keySet()) {
      if (collapsedColumnIds.contains(key) || !getContainerDataSource().getContainerPropertyIds().contains(key) || columnIdsOfHiddenFilters.contains(key)) {
        continue;
      }
      target.startTag(""String_Node_Str"" + columnIdMap.key(key));
      target.addAttribute(""String_Node_Str"",columnIdMap.key(key));
      Component c=getColumnIdToFilterMap().get(key);
      LegacyPaint.paint(c,target);
      target.endTag(""String_Node_Str"" + columnIdMap.key(key));
    }
  }
  target.endTag(""String_Node_Str"");
}","@Override public void paintContent(PaintTarget target) throws PaintException {
  super.paintContent(target);
  target.startTag(""String_Node_Str"");
  target.addAttribute(""String_Node_Str"",filtersVisible);
  target.addAttribute(""String_Node_Str"",reRenderFilterFields);
  reRenderFilterFields=false;
  if (filtersVisible) {
    for (    Object key : getColumnIdToFilterMap().keySet()) {
      if (collapsedColumnIds.contains(key) || !getContainerDataSource().getContainerPropertyIds().contains(key) || columnIdsOfHiddenFilters.contains(key)) {
        continue;
      }
      target.startTag(""String_Node_Str"" + columnIdMap.key(key));
      target.addAttribute(""String_Node_Str"",columnIdMap.key(key));
      Component c=getColumnIdToFilterMap().get(key);
      LegacyPaint.paint(c,target);
      target.endTag(""String_Node_Str"" + columnIdMap.key(key));
    }
  }
  target.endTag(""String_Node_Str"");
}",0.945326278659612
10606,"/** 
 * Sets the Filter bar visible or hidden.
 * @param filtersVisible true to set the Filter bar visible.
 */
public void setFilterBarVisible(boolean filtersVisible){
  this.filtersVisible=filtersVisible;
  markAsDirty();
}","/** 
 * Sets the Filter bar visible or hidden.
 * @param filtersVisible true to set the Filter bar visible.
 */
public void setFilterBarVisible(boolean filtersVisible){
  this.filtersVisible=filtersVisible;
  reRenderFilterFields=true;
  markAsDirty();
}",0.9394572025052192
10607,"/** 
 * Resets all filters. Note: Recreates the filter fields also!
 */
public void resetFilters(){
  if (initDone) {
    for (    Component c : columnIdToFilterMap.values()) {
      c.setParent(null);
    }
    collapsedColumnIds.clear();
    columnIdToFilterMap.clear();
    columnIdsOfHiddenFilters.clear();
    generator.clearFilterData();
    generator.initializeFilterFields();
  }
}","/** 
 * Resets all filters. Note: Recreates the filter fields also!
 */
public void resetFilters(){
  if (initDone) {
    for (    Component c : columnIdToFilterMap.values()) {
      c.setParent(null);
    }
    collapsedColumnIds.clear();
    columnIdToFilterMap.clear();
    columnIdsOfHiddenFilters.clear();
    generator.clearFilterData();
    generator.initializeFilterFields();
    reRenderFilterFields=true;
  }
}",0.96168108776267
10608,"/** 
 * Toggles the visibility of the filter field defined for the give column ID.
 * @param columnId Column/Property ID of the filter to toggle
 * @param visible true to set visible, false to set hidden
 */
public void setFilterFieldVisible(Object columnId,boolean visible){
  int previousSize=columnIdsOfHiddenFilters.size();
  if (visible) {
    columnIdsOfHiddenFilters.remove(columnId);
  }
 else {
    columnIdsOfHiddenFilters.add(columnId);
  }
  if (columnIdsOfHiddenFilters.size() != previousSize) {
    markAsDirty();
  }
}","/** 
 * Toggles the visibility of the filter field defined for the give column ID.
 * @param columnId Column/Property ID of the filter to toggle
 * @param visible true to set visible, false to set hidden
 */
public void setFilterFieldVisible(Object columnId,boolean visible){
  Component component=columnIdToFilterMap.get(columnId);
  if (component != null) {
    component.setVisible(visible);
    reRenderFilterFields=true;
  }
}",0.6742738589211619
10609,"/** 
 * Returns visibility state of the filter field for the given column ID
 * @param columnId Column/Property ID of the filter field to query
 * @return true if filter is visible, false if it's hidden
 */
public boolean isFilterFieldVisible(Object columnId){
  if (!getContainerDataSource().getContainerPropertyIds().contains(columnId)) {
    return false;
  }
  return !columnIdsOfHiddenFilters.contains(columnId);
}","/** 
 * Returns visibility state of the filter field for the given column ID
 * @param columnId Column/Property ID of the filter field to query
 * @return true if filter is visible, false if it's hidden
 */
public boolean isFilterFieldVisible(Object columnId){
  if (!getContainerDataSource().getContainerPropertyIds().contains(columnId)) {
    return false;
  }
  Component component=columnIdToFilterMap.get(columnId);
  if (component != null) {
    return component.isVisible();
  }
  return false;
}",0.8078175895765473
10610,"public void updateFiltersFromUIDL(UIDL uidl,ApplicationConnection client){
  if (uidl == null) {
    return;
  }
  getWidget().filters.filtersVisible=uidl.hasAttribute(""String_Node_Str"") ? uidl.getBooleanAttribute(""String_Node_Str"") : false;
  getWidget().filters.setVisible(getWidget().filters.filtersVisible);
  getWidget().setContainerHeight();
  Widget toFocus=null;
  if (!getWidget().filters.filtersVisible) {
    getWidget().filters.container.clear();
    getWidget().filters.filters.clear();
  }
 else {
    getWidget().filters.filters.clear();
    for (final Iterator<Object> it=uidl.getChildIterator(); it.hasNext(); ) {
      final UIDL cc=(UIDL)it.next();
      if (cc.getTag().startsWith(""String_Node_Str"")) {
        String cid=cc.getStringAttribute(""String_Node_Str"");
        UIDL uidld=cc.getChildUIDL(0);
        ComponentConnector connector=client.getPaintable(uidld);
        getWidget().filters.filters.put(cid,connector.getWidget());
      }
    }
    getWidget().filters.reRenderFilterComponents();
  }
}","public void updateFiltersFromUIDL(UIDL uidl,ApplicationConnection client){
  if (uidl == null) {
    return;
  }
  getWidget().filters.filtersVisible=uidl.hasAttribute(""String_Node_Str"") ? uidl.getBooleanAttribute(""String_Node_Str"") : false;
  getWidget().filters.setVisible(getWidget().filters.filtersVisible);
  getWidget().setContainerHeight();
  boolean forceRender=uidl.getBooleanAttribute(""String_Node_Str"");
  if (!getWidget().filters.filtersVisible) {
    getWidget().filters.container.clear();
    getWidget().filters.filters.clear();
  }
 else {
    Map<String,Widget> newWidgets=new HashMap<String,Widget>();
    boolean allCached=true;
    for (final Iterator<Object> it=uidl.getChildIterator(); it.hasNext(); ) {
      final UIDL cc=(UIDL)it.next();
      if (cc.getTag().startsWith(""String_Node_Str"")) {
        String cid=cc.getStringAttribute(""String_Node_Str"");
        UIDL uidld=cc.getChildUIDL(0);
        if (uidld == null) {
          newWidgets.put(cid,null);
        }
 else {
          ComponentConnector connector=client.getPaintable(uidld);
          newWidgets.put(cid,connector.getWidget());
          if (!uidld.hasAttribute(""String_Node_Str"") || !uidld.getBooleanAttribute(""String_Node_Str"")) {
            allCached=false;
          }
        }
      }
    }
    if (forceRender || !allCached || getWidget().filters.filters.isEmpty()) {
      getWidget().filters.filters.clear();
      for (      String cid : newWidgets.keySet()) {
        getWidget().filters.filters.put(cid,newWidgets.get(cid));
      }
      getWidget().filters.reRenderFilterComponents();
    }
 else {
      getWidget().filters.resetFilterWidths();
    }
  }
}",0.6760772659732541
10611,"@Override public List<?> getItemIds(int startIndex,int numberOfItems){
  return container.getItemIds(startIndex,numberOfItems);
}","@Override public List<?> getItemIds(int startIndex,int numberOfItems){
  return container.getItemIds(this.startIndex + startIndex,numberOfItems);
}",0.9347826086956522
10612,"@Override public void paintContent(PaintTarget target) throws PaintException {
  super.paintContent(target);
  target.startTag(""String_Node_Str"");
  target.addAttribute(""String_Node_Str"",filtersVisible);
  target.addAttribute(""String_Node_Str"",reRenderFilterFields);
  reRenderFilterFields=false;
  if (filtersVisible) {
    for (    Object key : getColumnIdToFilterMap().keySet()) {
      if (collapsedColumnIds.contains(key) || !getContainerDataSource().getContainerPropertyIds().contains(key) || !visibleColumns.contains(key)) {
        System.err.println(""String_Node_Str"" + key);
        continue;
      }
      System.err.println(""String_Node_Str"" + key);
      target.startTag(""String_Node_Str"" + columnIdMap.key(key));
      target.addAttribute(""String_Node_Str"",columnIdMap.key(key));
      Component c=getColumnIdToFilterMap().get(key);
      LegacyPaint.paint(c,target);
      target.endTag(""String_Node_Str"" + columnIdMap.key(key));
    }
  }
  target.endTag(""String_Node_Str"");
}","@Override public void paintContent(PaintTarget target) throws PaintException {
  super.paintContent(target);
  target.startTag(""String_Node_Str"");
  target.addAttribute(""String_Node_Str"",filtersVisible);
  target.addAttribute(""String_Node_Str"",reRenderFilterFields);
  reRenderFilterFields=false;
  if (filtersVisible) {
    for (    Object key : getColumnIdToFilterMap().keySet()) {
      if (columnIdToFilterMap.get(key) != null && columnIdToFilterMap.get(key).getParent() == null) {
        continue;
      }
      target.startTag(""String_Node_Str"" + columnIdMap.key(key));
      target.addAttribute(""String_Node_Str"",columnIdMap.key(key));
      Component c=getColumnIdToFilterMap().get(key);
      LegacyPaint.paint(c,target);
      target.endTag(""String_Node_Str"" + columnIdMap.key(key));
    }
  }
  target.endTag(""String_Node_Str"");
}",0.4634678298800436
10613,"@Override public void setVisibleColumns(Object[] visibleColumns){
  reRenderFilterFields=true;
  super.setVisibleColumns(visibleColumns);
}","@Override public void setVisibleColumns(Object[] visibleColumns){
  reRenderFilterFields=true;
  if (visibleColumns != null && columnIdToFilterMap != null) {
    for (    Object key : columnIdToFilterMap.keySet()) {
      columnIdToFilterMap.get(key).setParent(null);
    }
    for (    Object key : visibleColumns) {
      Component filter=columnIdToFilterMap.get(key);
      if (filter != null) {
        filter.setParent(this);
      }
    }
  }
  super.setVisibleColumns(visibleColumns);
}",0.439873417721519
10614,"/** 
 * Toggles the visibility of the filter field defined for the give column ID.
 * @param columnId Column/Property ID of the filter to toggle
 * @param visible true to set visible, false to set hidden
 */
public void setFilterFieldVisible(Object columnId,boolean visible){
  Component component=columnIdToFilterMap.get(columnId);
  if (component != null) {
    component.setVisible(visible);
    reRenderFilterFields=true;
  }
}","/** 
 * Toggles the visibility of the filter field defined for the give column ID.
 * @param columnId Column/Property ID of the filter to toggle
 * @param visible true to set visible, false to set hidden
 */
public void setFilterFieldVisible(Object columnId,boolean visible){
  Component component=columnIdToFilterMap.get(columnId);
  if (component != null) {
    component.setVisible(visible);
    reRenderFilterFields=true;
    markAsDirty();
  }
}",0.978433598183882
10615,"@Override public Iterator<Component> iterator(){
  Set<Component> children=new HashSet<Component>();
  if (visibleComponents != null) {
    children.addAll(visibleComponents);
  }
  if (initDone) {
    for (    Object key : columnIdToFilterMap.keySet()) {
      if (collapsedColumnIds.contains(key) || !getContainerDataSource().getContainerPropertyIds().contains(key) || !visibleColumns.contains(key)) {
        continue;
      }
      children.add(columnIdToFilterMap.get(key));
    }
  }
  return children.iterator();
}","@Override public Iterator<Component> iterator(){
  Set<Component> children=new HashSet<Component>();
  if (visibleComponents != null) {
    children.addAll(visibleComponents);
  }
  if (initDone) {
    for (    Object key : columnIdToFilterMap.keySet()) {
      Component filter=columnIdToFilterMap.get(key);
      if (equals(filter.getParent())) {
        children.add(filter);
      }
    }
  }
  return children.iterator();
}",0.6743940990516333
10616,"@Override public void setColumnCollapsed(Object propertyId,boolean collapsed) throws IllegalStateException {
  super.setColumnCollapsed(propertyId,collapsed);
  Component c=getColumnIdToFilterMap().get(propertyId);
  if (collapsed) {
    collapsedColumnIds.add(propertyId);
    if (c != null) {
      if (c instanceof TextField) {
        ((TextField)c).setValue(""String_Node_Str"");
      }
 else       if (c instanceof AbstractField<?>) {
        ((AbstractField<?>)c).setValue(null);
      }
    }
  }
 else {
    collapsedColumnIds.remove(propertyId);
  }
  reRenderFilterFields=true;
  markAsDirty();
}","@Override public void setColumnCollapsed(Object propertyId,boolean collapsed) throws IllegalStateException {
  super.setColumnCollapsed(propertyId,collapsed);
  Component c=getColumnIdToFilterMap().get(propertyId);
  if (collapsed) {
    collapsedColumnIds.add(propertyId);
    if (c != null) {
      c.setParent(null);
      if (c instanceof TextField) {
        ((TextField)c).setValue(""String_Node_Str"");
      }
 else       if (c instanceof AbstractField<?>) {
        ((AbstractField<?>)c).setValue(null);
      }
    }
  }
 else {
    if (c != null) {
      c.setParent(this);
    }
    collapsedColumnIds.remove(propertyId);
  }
  reRenderFilterFields=true;
  markAsDirty();
}",0.9402637703646236
10617,"private FilterTable buildFilterTable(){
  FilterTable filterTable=new FilterTable();
  filterTable.setSizeFull();
  filterTable.setFilterDecorator(new DemoFilterDecorator());
  filterTable.setFilterGenerator(new DemoFilterGenerator());
  filterTable.setFilterBarVisible(true);
  filterTable.setSelectable(true);
  filterTable.setImmediate(true);
  filterTable.setMultiSelect(true);
  filterTable.setRowHeaderMode(RowHeaderMode.INDEX);
  filterTable.setColumnCollapsingAllowed(true);
  filterTable.setColumnCollapsed(""String_Node_Str"",true);
  filterTable.setColumnReorderingAllowed(true);
  filterTable.setContainerDataSource(buildContainer());
  return filterTable;
}","private FilterTable buildFilterTable(){
  FilterTable filterTable=new FilterTable();
  filterTable.setSizeFull();
  filterTable.setFilterDecorator(new DemoFilterDecorator());
  filterTable.setFilterGenerator(new DemoFilterGenerator());
  filterTable.setFilterBarVisible(true);
  filterTable.setSelectable(true);
  filterTable.setImmediate(true);
  filterTable.setMultiSelect(true);
  filterTable.setRowHeaderMode(RowHeaderMode.INDEX);
  filterTable.setColumnCollapsingAllowed(true);
  filterTable.setColumnReorderingAllowed(true);
  filterTable.setContainerDataSource(buildContainer());
  filterTable.setColumnCollapsed(""String_Node_Str"",true);
  filterTable.setVisibleColumns(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  return filterTable;
}",0.8005427408412483
10618,"@SuppressWarnings(""String_Node_Str"") private Container buildContainer(){
  IndexedContainer cont=new IndexedContainer();
  Calendar c=Calendar.getInstance();
  cont.addContainerProperty(""String_Node_Str"",String.class,null);
  cont.addContainerProperty(""String_Node_Str"",String.class,null);
  cont.addContainerProperty(""String_Node_Str"",String.class,null);
  cont.addContainerProperty(""String_Node_Str"",String.class,null);
  cont.addContainerProperty(""String_Node_Str"",String.class,null);
  cont.addContainerProperty(""String_Node_Str"",String.class,null);
  cont.addContainerProperty(""String_Node_Str"",String.class,null);
  cont.addContainerProperty(""String_Node_Str"",String.class,null);
  cont.addContainerProperty(""String_Node_Str"",Integer.class,null);
  cont.addContainerProperty(""String_Node_Str"",State.class,null);
  cont.addContainerProperty(""String_Node_Str"",Timestamp.class,null);
  cont.addContainerProperty(""String_Node_Str"",Boolean.class,null);
  cont.addContainerProperty(""String_Node_Str"",Boolean.class,null);
  Random random=new Random();
  for (int i=0; i < 10000; i++) {
    cont.addItem(i);
    cont.getContainerProperty(i,""String_Node_Str"").setValue(""String_Node_Str"" + i);
    cont.getContainerProperty(i,""String_Node_Str"").setValue(i);
    int rndInt=random.nextInt(4);
    State stateToSet=State.CREATED;
    if (rndInt == 0) {
      stateToSet=State.PROCESSING;
    }
 else     if (rndInt == 1) {
      stateToSet=State.PROCESSED;
    }
 else     if (rndInt == 2) {
      stateToSet=State.FINISHED;
    }
    cont.getContainerProperty(i,""String_Node_Str"").setValue(stateToSet);
    cont.getContainerProperty(i,""String_Node_Str"").setValue(new Timestamp(c.getTimeInMillis()));
    c.add(Calendar.DAY_OF_MONTH,1);
    cont.getContainerProperty(i,""String_Node_Str"").setValue(random.nextBoolean());
    cont.getContainerProperty(i,""String_Node_Str"").setValue(random.nextBoolean());
  }
  return cont;
}","@SuppressWarnings(""String_Node_Str"") private Container buildContainer(){
  IndexedContainer cont=new IndexedContainer();
  Calendar c=Calendar.getInstance();
  cont.addContainerProperty(""String_Node_Str"",String.class,null);
  cont.addContainerProperty(""String_Node_Str"",Integer.class,null);
  cont.addContainerProperty(""String_Node_Str"",State.class,null);
  cont.addContainerProperty(""String_Node_Str"",Timestamp.class,null);
  cont.addContainerProperty(""String_Node_Str"",Boolean.class,null);
  cont.addContainerProperty(""String_Node_Str"",Boolean.class,null);
  Random random=new Random();
  for (int i=0; i < 10000; i++) {
    cont.addItem(i);
    cont.getContainerProperty(i,""String_Node_Str"").setValue(""String_Node_Str"" + i);
    cont.getContainerProperty(i,""String_Node_Str"").setValue(i);
    int rndInt=random.nextInt(4);
    State stateToSet=State.CREATED;
    if (rndInt == 0) {
      stateToSet=State.PROCESSING;
    }
 else     if (rndInt == 1) {
      stateToSet=State.PROCESSED;
    }
 else     if (rndInt == 2) {
      stateToSet=State.FINISHED;
    }
    cont.getContainerProperty(i,""String_Node_Str"").setValue(stateToSet);
    cont.getContainerProperty(i,""String_Node_Str"").setValue(new Timestamp(c.getTimeInMillis()));
    c.add(Calendar.DAY_OF_MONTH,1);
    cont.getContainerProperty(i,""String_Node_Str"").setValue(random.nextBoolean());
    cont.getContainerProperty(i,""String_Node_Str"").setValue(random.nextBoolean());
  }
  return cont;
}",0.8629893238434164
10619,"private Filter generateFilter(Property field,Object propertyId,Object value){
  if (field instanceof DateFilterPopup) {
    DateInterval interval=((DateFilterPopup)field).getDateValue();
    if (interval == null) {
      return null;
    }
    if (owner.getFilterGenerator() != null) {
      Filter newFilter=owner.getFilterGenerator().generateFilter(propertyId,interval);
      if (newFilter != null) {
        return newFilter;
      }
    }
    Date from=interval.getFrom();
    Date to=interval.getTo();
    if (from != null && to != null) {
      return new Between(propertyId,from,to);
    }
 else     if (from != null) {
      return new Compare.GreaterOrEqual(propertyId,from);
    }
 else {
      return new Compare.LessOrEqual(propertyId,to);
    }
  }
 else   if (field instanceof NumberFilterPopup) {
    NumberInterval interval=((NumberFilterPopup)field).getInterval();
    if (interval == null) {
      return null;
    }
    if (owner.getFilterGenerator() != null) {
      Filter newFilter=owner.getFilterGenerator().generateFilter(propertyId,interval);
      if (newFilter != null) {
        return newFilter;
      }
    }
    String ltValue=interval.getLessThanValue();
    String gtValue=interval.getGreaterThanValue();
    String eqValue=interval.getEqualsValue();
    Class<?> clazz=owner.getContainerDataSource().getType(propertyId);
    Method valueOf;
    try {
      valueOf=clazz.getMethod(""String_Node_Str"",String.class);
      if (eqValue != null) {
        return new Compare.Equal(propertyId,valueOf.invoke(clazz,eqValue));
      }
 else       if (ltValue != null && gtValue != null) {
        return new And(new Compare.Less(propertyId,valueOf.invoke(clazz,ltValue)),new Compare.Greater(propertyId,valueOf.invoke(clazz,gtValue)));
      }
 else       if (ltValue != null) {
        return new Compare.Less(propertyId,valueOf.invoke(clazz,ltValue));
      }
 else       if (gtValue != null) {
        return new Compare.Greater(propertyId,valueOf.invoke(clazz,gtValue));
      }
 else {
        return null;
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
 else   if (value != null && !value.equals(""String_Node_Str"")) {
    if (owner.getFilterGenerator() != null) {
      Filter newFilter=owner.getFilterGenerator().generateFilter(propertyId,value);
      if (newFilter != null) {
        return newFilter;
      }
    }
    return new SimpleStringFilter(propertyId,String.valueOf(value),true,false);
  }
  return null;
}","private Filter generateFilter(Property field,Object propertyId,Object value){
  if (field instanceof DateFilterPopup) {
    DateInterval interval=((DateFilterPopup)field).getDateValue();
    if (interval == null) {
      return null;
    }
    if (owner.getFilterGenerator() != null) {
      Filter newFilter=owner.getFilterGenerator().generateFilter(propertyId,interval);
      if (newFilter != null) {
        return newFilter;
      }
    }
    Date from=interval.getFrom();
    Date to=interval.getTo();
    if (from != null && to != null) {
      return new Between(propertyId,from,to);
    }
 else     if (from != null) {
      return new Compare.GreaterOrEqual(propertyId,from);
    }
 else {
      return new Compare.LessOrEqual(propertyId,to);
    }
  }
 else   if (field instanceof NumberFilterPopup) {
    NumberInterval interval=((NumberFilterPopup)field).getInterval();
    if (interval == null) {
      return null;
    }
    if (owner.getFilterGenerator() != null) {
      Filter newFilter=owner.getFilterGenerator().generateFilter(propertyId,interval);
      if (newFilter != null) {
        return newFilter;
      }
    }
    String ltValue=interval.getLessThanValue();
    String gtValue=interval.getGreaterThanValue();
    String eqValue=interval.getEqualsValue();
    Class<?> clazz=getProperClass(propertyId);
    Method valueOf;
    try {
      valueOf=clazz.getMethod(""String_Node_Str"",String.class);
      if (eqValue != null) {
        return new Compare.Equal(propertyId,valueOf.invoke(clazz,eqValue));
      }
 else       if (ltValue != null && gtValue != null) {
        return new And(new Compare.Less(propertyId,valueOf.invoke(clazz,ltValue)),new Compare.Greater(propertyId,valueOf.invoke(clazz,gtValue)));
      }
 else       if (ltValue != null) {
        return new Compare.Less(propertyId,valueOf.invoke(clazz,ltValue));
      }
 else       if (gtValue != null) {
        return new Compare.Greater(propertyId,valueOf.invoke(clazz,gtValue));
      }
 else {
        return null;
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
 else   if (value != null && !value.equals(""String_Node_Str"")) {
    if (owner.getFilterGenerator() != null) {
      Filter newFilter=owner.getFilterGenerator().generateFilter(propertyId,value);
      if (newFilter != null) {
        return newFilter;
      }
    }
    return new SimpleStringFilter(propertyId,String.valueOf(value),true,false);
  }
  return null;
}",0.989991993594876
10620,"public void updateFromUIDL(UIDL uidl,ApplicationConnection client){
  if (uidl == null) {
    return;
  }
  this.client=client;
  filtersVisible=uidl.hasAttribute(""String_Node_Str"") ? uidl.getBooleanAttribute(""String_Node_Str"") : false;
  setVisible(filtersVisible);
  Collection<Widget> oldFilters=filters.values();
  if (!filtersVisible) {
    container.clear();
    filters.clear();
  }
 else {
    uidls.clear();
    for (final Iterator<Object> it=uidl.getChildIterator(); it.hasNext(); ) {
      final UIDL cc=(UIDL)it.next();
      if (cc.getTag().equals(""String_Node_Str"")) {
        String cid=cc.getStringAttribute(""String_Node_Str"");
        uidls.put(cid,cc.getChildUIDL(0));
      }
    }
    reRenderFilterComponents();
  }
  Collection<Widget> newFilters=filters.values();
  for (  Widget filter : oldFilters) {
    if (!newFilters.contains(filter)) {
      client.unregisterPaintable((Paintable)filter);
    }
  }
}","public void updateFromUIDL(UIDL uidl,ApplicationConnection client){
  if (uidl == null) {
    return;
  }
  this.client=client;
  filtersVisible=uidl.hasAttribute(""String_Node_Str"") ? uidl.getBooleanAttribute(""String_Node_Str"") : false;
  setVisible(filtersVisible);
  setContainerHeight();
  Collection<Widget> oldFilters=filters.values();
  if (!filtersVisible) {
    container.clear();
    filters.clear();
  }
 else {
    uidls.clear();
    for (final Iterator<Object> it=uidl.getChildIterator(); it.hasNext(); ) {
      final UIDL cc=(UIDL)it.next();
      if (cc.getTag().equals(""String_Node_Str"")) {
        String cid=cc.getStringAttribute(""String_Node_Str"");
        uidls.put(cid,cc.getChildUIDL(0));
      }
    }
    reRenderFilterComponents();
  }
  Collection<Widget> newFilters=filters.values();
  for (  Widget filter : oldFilters) {
    if (!newFilters.contains(filter)) {
      client.unregisterPaintable((Paintable)filter);
    }
  }
}",0.9872611464968152
10621,"void clearFilterData(){
  for (  Object propertyId : filters.keySet()) {
    owner.getFilterable().removeContainerFilter(filters.get(propertyId));
    if (owner.getFilterGenerator() != null) {
      owner.getFilterGenerator().filterRemoved(propertyId);
    }
  }
  for (  AbstractField<?> af : customFields.keySet()) {
    af.removeValueChangeListener(listener);
  }
  for (  TextField tf : texts.keySet()) {
    tf.removeValueChangeListener(listener);
  }
  for (  ComboBox cb : enums.keySet()) {
    cb.removeValueChangeListener(listener);
  }
  for (  ComboBox cb : booleans.keySet()) {
    cb.removeValueChangeListener(listener);
  }
  customFields.clear();
  filters.clear();
  texts.clear();
  enums.clear();
  booleans.clear();
}","void clearFilterData(){
  for (  Object propertyId : filters.keySet()) {
    owner.getFilterable().removeContainerFilter(filters.get(propertyId));
    if (owner.getFilterGenerator() != null) {
      owner.getFilterGenerator().filterRemoved(propertyId);
    }
  }
  for (  AbstractField<?> af : customFields.keySet()) {
    af.removeValueChangeListener(listener);
  }
  for (  TextField tf : texts.keySet()) {
    tf.removeValueChangeListener(listener);
  }
  for (  ComboBox cb : enums.keySet()) {
    cb.removeValueChangeListener(listener);
  }
  for (  ComboBox cb : booleans.keySet()) {
    cb.removeValueChangeListener(listener);
  }
  for (  DateFilterPopup dfp : dates.keySet()) {
    dfp.removeValueChangeListener(listener);
  }
  customFields.clear();
  filters.clear();
  texts.clear();
  enums.clear();
  booleans.clear();
  dates.clear();
}",0.927536231884058
10622,"public void valueChange(Property.ValueChangeEvent event){
  if (owner.getFilterable() == null) {
    return;
  }
  Property<?> field=event.getProperty();
  Object value=field.getValue();
  Object propertyId=null;
  if (customFields.containsKey(field)) {
    propertyId=customFields.get(field);
  }
 else   if (texts.containsKey(field)) {
    propertyId=texts.get(field);
  }
 else   if (enums.containsKey(field)) {
    propertyId=enums.get(field);
  }
 else   if (booleans.containsKey(field)) {
    propertyId=booleans.get(field);
  }
  removeFilter(propertyId);
  Filter newFilter=generateFilter(field,propertyId,value);
  if (newFilter != null) {
    setFilter(newFilter,propertyId);
    if (owner.getFilterGenerator() != null) {
      owner.getFilterGenerator().filterAdded(propertyId,newFilter.getClass(),value);
    }
  }
 else {
    if (owner.getFilterGenerator() != null) {
      owner.getFilterGenerator().filterRemoved(propertyId);
    }
  }
  if (owner instanceof PagedFilterTable<?>) {
    ((PagedFilterTable<?>)owner).setCurrentPage(1);
  }
}","public void valueChange(Property.ValueChangeEvent event){
  if (owner.getFilterable() == null) {
    return;
  }
  Property<?> field=event.getProperty();
  Object value=field.getValue();
  Object propertyId=null;
  if (customFields.containsKey(field)) {
    propertyId=customFields.get(field);
  }
 else   if (texts.containsKey(field)) {
    propertyId=texts.get(field);
  }
 else   if (dates.containsKey(field)) {
    propertyId=dates.get(field);
  }
 else   if (enums.containsKey(field)) {
    propertyId=enums.get(field);
  }
 else   if (booleans.containsKey(field)) {
    propertyId=booleans.get(field);
  }
  removeFilter(propertyId);
  Filter newFilter=generateFilter(field,propertyId,value);
  if (newFilter != null) {
    setFilter(newFilter,propertyId);
    if (owner.getFilterGenerator() != null) {
      owner.getFilterGenerator().filterAdded(propertyId,newFilter.getClass(),value);
    }
  }
 else {
    if (owner.getFilterGenerator() != null) {
      owner.getFilterGenerator().filterRemoved(propertyId);
    }
  }
  if (owner instanceof PagedFilterTable<?>) {
    ((PagedFilterTable<?>)owner).setCurrentPage(1);
  }
  owner.requestRepaint();
}",0.9534147444595206
10623,"private ValueChangeListener initializeListener(){
  return new Property.ValueChangeListener(){
    public void valueChange(    Property.ValueChangeEvent event){
      if (owner.getFilterable() == null) {
        return;
      }
      Property<?> field=event.getProperty();
      Object value=field.getValue();
      Object propertyId=null;
      if (customFields.containsKey(field)) {
        propertyId=customFields.get(field);
      }
 else       if (texts.containsKey(field)) {
        propertyId=texts.get(field);
      }
 else       if (enums.containsKey(field)) {
        propertyId=enums.get(field);
      }
 else       if (booleans.containsKey(field)) {
        propertyId=booleans.get(field);
      }
      removeFilter(propertyId);
      Filter newFilter=generateFilter(field,propertyId,value);
      if (newFilter != null) {
        setFilter(newFilter,propertyId);
        if (owner.getFilterGenerator() != null) {
          owner.getFilterGenerator().filterAdded(propertyId,newFilter.getClass(),value);
        }
      }
 else {
        if (owner.getFilterGenerator() != null) {
          owner.getFilterGenerator().filterRemoved(propertyId);
        }
      }
      if (owner instanceof PagedFilterTable<?>) {
        ((PagedFilterTable<?>)owner).setCurrentPage(1);
      }
    }
  }
;
}","private ValueChangeListener initializeListener(){
  return new Property.ValueChangeListener(){
    public void valueChange(    Property.ValueChangeEvent event){
      if (owner.getFilterable() == null) {
        return;
      }
      Property<?> field=event.getProperty();
      Object value=field.getValue();
      Object propertyId=null;
      if (customFields.containsKey(field)) {
        propertyId=customFields.get(field);
      }
 else       if (texts.containsKey(field)) {
        propertyId=texts.get(field);
      }
 else       if (dates.containsKey(field)) {
        propertyId=dates.get(field);
      }
 else       if (enums.containsKey(field)) {
        propertyId=enums.get(field);
      }
 else       if (booleans.containsKey(field)) {
        propertyId=booleans.get(field);
      }
      removeFilter(propertyId);
      Filter newFilter=generateFilter(field,propertyId,value);
      if (newFilter != null) {
        setFilter(newFilter,propertyId);
        if (owner.getFilterGenerator() != null) {
          owner.getFilterGenerator().filterAdded(propertyId,newFilter.getClass(),value);
        }
      }
 else {
        if (owner.getFilterGenerator() != null) {
          owner.getFilterGenerator().filterRemoved(propertyId);
        }
      }
      if (owner instanceof PagedFilterTable<?>) {
        ((PagedFilterTable<?>)owner).setCurrentPage(1);
      }
      owner.requestRepaint();
    }
  }
;
}",0.956266078647556
10624,"private Filter generateFilter(Property<?> field,Object propertyId,Object value){
  if (value != null && !value.equals(""String_Node_Str"")) {
    return generateGenericFilter(field,propertyId,value);
  }
  return null;
}","private Filter generateFilter(Property<?> field,Object propertyId,Object value){
  if (field instanceof DateFilterPopup) {
    return generateDateFilter(field,propertyId,value);
  }
 else   if (value != null && !value.equals(""String_Node_Str"")) {
    return generateGenericFilter(field,propertyId,value);
  }
  return null;
}",0.8029465930018416
10625,"private Component createField(Object property,Class<?> type){
  AbstractField<?> component=null;
  if (owner.getFilterGenerator() != null) {
    component=owner.getFilterGenerator().getCustomFilterComponent(property);
  }
  if (component != null) {
    customFields.put(component,property);
  }
 else   if (type == null) {
    component=new TextField();
    component.setWidth(""String_Node_Str"");
    return component;
  }
 else   if (type == boolean.class || type == Boolean.class) {
    component=createBooleanField(property);
  }
  if (type.isEnum()) {
    component=createEnumField(type,property);
  }
 else {
    component=createTextField(property);
  }
  component.setWidth(""String_Node_Str"");
  component.setImmediate(true);
  component.addValueChangeListener(listener);
  return component;
}","private Component createField(Object property,Class<?> type){
  AbstractField<?> component=null;
  if (owner.getFilterGenerator() != null) {
    component=owner.getFilterGenerator().getCustomFilterComponent(property);
  }
  if (component != null) {
    customFields.put(component,property);
  }
 else   if (type == null) {
    component=new TextField();
    component.setWidth(100,Unit.PERCENTAGE);
    return component;
  }
 else   if (type == boolean.class || type == Boolean.class) {
    component=createBooleanField(property);
  }
 else   if (type.isEnum()) {
    component=createEnumField(type,property);
  }
 else   if (type == Date.class || type == Timestamp.class || type == java.sql.Date.class) {
    DateFilterPopup dfp=createDateField(property);
    dfp.setWidth(100,Unit.PERCENTAGE);
    dfp.setImmediate(true);
    dfp.addValueChangeListener(listener);
    return dfp;
  }
 else {
    component=createTextField(property);
  }
  component.setWidth(null);
  component.setImmediate(true);
  component.addValueChangeListener(listener);
  return component;
}",0.7120643431635388
10626,"public void setFilterWidth(int index,int width){
  int realWidth=width + 13;
  Widget p=filters.get(getColKeyByIndex(index));
  if (p != null) {
    p.setWidth(realWidth + ""String_Node_Str"");
  }
}","public void setFilterWidth(int index,int width){
  Widget p=filters.get(getColKeyByIndex(index));
  if (p != null) {
    p.setWidth(Util.getRequiredWidth(tHead.getHeaderCell(index)) + ""String_Node_Str"");
  }
}",0.7980295566502463
10627,"@Override public void onEnabled(Context context){
  super.onEnabled(context);
  startTicking(context);
  clock=new Analog24HClock(context);
}","@Override public void onEnabled(Context context){
  super.onEnabled(context);
  startTicking(context);
}",0.8489795918367347
10628,"@Override public void onUpdate(Context context,AppWidgetManager appWidgetManager,int[] appWidgetIds){
  final RemoteViews rv=new RemoteViews(context.getPackageName(),R.layout.widget);
  if (clock == null) {
    clock=new Analog24HClock(context);
    clock.setShowSeconds(false);
    clock.addDialOverlay(new SunPositionOverlay(context));
    final int s=(int)getSize(context);
    clock.onSizeChanged(s,s,0,0);
    clock.measure(s,s);
    clock.layout(0,0,s,s);
    Log.d(TAG,""String_Node_Str"" + s);
    clock.setDrawingCacheEnabled(true);
    final PendingIntent intent=ClockUtil.getClockIntent(context);
    if (intent != null) {
      rv.setOnClickPendingIntent(R.id.clock,intent);
    }
  }
  final Bitmap cached=clock.getDrawingCache(true);
  if (cached != null) {
    rv.setImageViewBitmap(R.id.clock,cached);
  }
  appWidgetManager.updateAppWidget(appWidgetIds,rv);
}","@Override public void onUpdate(Context context,AppWidgetManager appWidgetManager,int[] appWidgetIds){
  final RemoteViews rv=new RemoteViews(context.getPackageName(),R.layout.widget);
  if (clock == null) {
    clock=new Analog24HClock(context);
    clock.setShowSeconds(false);
    clock.addDialOverlay(new SunPositionOverlay(context));
    final int s=(int)getSize(context);
    clock.onSizeChanged(s,s,0,0);
    clock.measure(s,s);
    clock.layout(0,0,s,s);
    Log.d(TAG,""String_Node_Str"" + s);
    clock.setDrawingCacheEnabled(true);
    final PendingIntent intent=ClockUtil.getClockIntent(context);
    if (intent != null) {
      rv.setOnClickPendingIntent(R.id.clock,intent);
    }
  }
  Bitmap cached=null;
  cached=clock.getDrawingCache(true);
  boolean shouldRecycle=false;
  if (cached == null) {
    final int s=(int)getSize(context);
    cached=Bitmap.createBitmap(s,s,Bitmap.Config.ARGB_8888);
    final Canvas c=new Canvas(cached);
    clock.draw(c);
    cached=Bitmap.createBitmap(cached);
    shouldRecycle=true;
  }
  if (cached != null) {
    rv.setImageViewBitmap(R.id.clock,cached);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
  if (!mFirst && Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
    appWidgetManager.partiallyUpdateAppWidget(appWidgetIds,rv);
  }
 else {
    appWidgetManager.updateAppWidget(appWidgetIds,rv);
    mFirst=false;
  }
  if (shouldRecycle) {
    cached.recycle();
  }
}",0.7235701906412478
10629,"@Override public void onDraw(Canvas canvas,int cX,int cY,int w,int h,Calendar calendar){
  final Location loc=mLocation != null ? mLocation : getRecentLocation();
  final int insetW=(int)(w / 2.0f / 2.0f);
  final int insetH=(int)(h / 2.0f / 2.0f);
  inset.set(cX - insetW,cY - insetH,cX + insetW,cY + insetH);
  if (loc == null) {
    drawPlaceholder(canvas);
    return;
  }
  ll.setLatitude(loc.getLatitude());
  ll.setLongitude(loc.getLongitude());
  final TimeZone tz=calendar.getTimeZone();
  final boolean dst=calendar.get(Calendar.DST_OFFSET) != 0;
  try {
    final Time morningSunrise=Sun.sunriseTime(calendar,ll,tz,dst);
    final Time morningCivil=Sun.morningCivilTwilightTime(calendar,ll,tz,dst);
    final Time morningNautical=Sun.morningNauticalTwilightTime(calendar,ll,tz,dst);
    final Time morningAstro=Sun.morningAstronomicalTwilightTime(calendar,ll,tz,dst);
    final float morningSunAngle=getHourArcAngle(morningSunrise.getHours(),morningSunrise.getMinutes());
    final float morningCivAngle=getHourArcAngle(morningCivil.getHours(),morningCivil.getMinutes());
    final float morningNauAngle=getHourArcAngle(morningNautical.getHours(),morningNautical.getMinutes());
    final float morningAstAngle=getHourArcAngle(morningAstro.getHours(),morningAstro.getMinutes());
    final Time eveningSunset=Sun.sunsetTime(calendar,ll,tz,dst);
    final Time eveningCivil=Sun.eveningCivilTwilightTime(calendar,ll,tz,dst);
    final Time eveningNautical=Sun.eveningNauticalTwilightTime(calendar,ll,tz,dst);
    final Time eveningAstro=Sun.eveningAstronomicalTwilightTime(calendar,ll,tz,dst);
    final float eveningSunAngle=getHourArcAngle(eveningSunset.getHours(),eveningSunset.getMinutes());
    final float eveningCivAngle=getHourArcAngle(eveningCivil.getHours(),eveningCivil.getMinutes());
    final float eveningNauAngle=getHourArcAngle(eveningNautical.getHours(),eveningNautical.getMinutes());
    final float eveningAstAngle=getHourArcAngle(eveningAstro.getHours(),eveningAstro.getMinutes());
    final float highNoon=0.5f * (eveningSunAngle + morningSunAngle) + 180f;
    canvas.drawArc(inset,eveningSunAngle,(360 + (morningSunAngle - eveningSunAngle)) % 360,true,OVERLAY_NIGHT);
    canvas.drawArc(inset,eveningCivAngle,(360 + (morningCivAngle - eveningCivAngle)) % 360,true,OVERLAY_CIVIL);
    canvas.drawArc(inset,eveningNauAngle,(360 + (morningNauAngle - eveningNauAngle)) % 360,true,OVERLAY_NAUTICAL);
    canvas.drawArc(inset,eveningAstAngle,(360 + (morningAstAngle - eveningAstAngle)) % 360,true,OVERLAY_ASTRO);
    canvas.drawArc(inset,highNoon - 3,6,true,OVERLAY_SUN);
  }
 catch (  final IllegalArgumentException e) {
    Log.e(TAG,""String_Node_Str"",e);
    drawPlaceholder(canvas);
  }
}","@Override public void onDraw(Canvas canvas,int cX,int cY,int w,int h,Calendar calendar){
  final Location loc=mLocation != null ? mLocation : getRecentLocation();
  final int insetW=(int)(w / 2.0f / 2.0f);
  final int insetH=(int)(h / 2.0f / 2.0f);
  inset.set(cX - insetW,cY - insetH,cX + insetW,cY + insetH);
  if (loc == null) {
    drawPlaceholder(canvas);
    return;
  }
  ll.setLatitude(loc.getLatitude());
  ll.setLongitude(loc.getLongitude());
  final TimeZone tz=calendar.getTimeZone();
  final boolean dst=calendar.get(Calendar.DST_OFFSET) != 0;
  try {
    final Time morningSunrise=Sun.sunriseTime(calendar,ll,tz,dst);
    final Time morningCivil=Sun.morningCivilTwilightTime(calendar,ll,tz,dst);
    final Time morningNautical=Sun.morningNauticalTwilightTime(calendar,ll,tz,dst);
    final Time morningAstro=Sun.morningAstronomicalTwilightTime(calendar,ll,tz,dst);
    final float morningSunAngle=getHourArcAngle(morningSunrise.getHours(),morningSunrise.getMinutes());
    final float morningCivAngle=getHourArcAngle(morningCivil.getHours(),morningCivil.getMinutes());
    final float morningNauAngle=getHourArcAngle(morningNautical.getHours(),morningNautical.getMinutes());
    final float morningAstAngle=getHourArcAngle(morningAstro.getHours(),morningAstro.getMinutes());
    final Time eveningSunset=Sun.sunsetTime(calendar,ll,tz,dst);
    final Time eveningCivil=Sun.eveningCivilTwilightTime(calendar,ll,tz,dst);
    final Time eveningNautical=Sun.eveningNauticalTwilightTime(calendar,ll,tz,dst);
    final Time eveningAstro=Sun.eveningAstronomicalTwilightTime(calendar,ll,tz,dst);
    final float eveningSunAngle=getHourArcAngle(eveningSunset.getHours(),eveningSunset.getMinutes());
    final float eveningCivAngle=getHourArcAngle(eveningCivil.getHours(),eveningCivil.getMinutes());
    final float eveningNauAngle=getHourArcAngle(eveningNautical.getHours(),eveningNautical.getMinutes());
    final float eveningAstAngle=getHourArcAngle(eveningAstro.getHours(),eveningAstro.getMinutes());
    final float highNoon=(360 + morningSunAngle + ((360 + (eveningSunAngle - morningSunAngle)) % 360) * 0.5f) % 360;
    canvas.drawArc(inset,eveningSunAngle,(360 + (morningSunAngle - eveningSunAngle)) % 360,true,OVERLAY_NIGHT);
    canvas.drawArc(inset,eveningCivAngle,(360 + (morningCivAngle - eveningCivAngle)) % 360,true,OVERLAY_CIVIL);
    canvas.drawArc(inset,eveningNauAngle,(360 + (morningNauAngle - eveningNauAngle)) % 360,true,OVERLAY_NAUTICAL);
    canvas.drawArc(inset,eveningAstAngle,(360 + (morningAstAngle - eveningAstAngle)) % 360,true,OVERLAY_ASTRO);
    if (Math.abs(eveningSunAngle - morningSunAngle) > 0) {
      canvas.drawArc(inset,highNoon - 1,2,true,OVERLAY_SUN);
    }
  }
 catch (  final IllegalArgumentException e) {
    Log.e(TAG,""String_Node_Str"",e);
    drawPlaceholder(canvas);
  }
}",0.9635247381726256
10630,"BaseClientRequest<List<CloudService>> getDeleteServicesRequest(final List<String> services){
  return new BehaviourRequest<List<CloudService>>(Messages.CloudFoundryServerBehaviour_DELETE_SERVICES){
    @Override protected List<CloudService> doRun(    CloudFoundryOperations client,    SubMonitor progress) throws CoreException {
      SubMonitor serviceProgress=SubMonitor.convert(progress,services.size());
      List<String> boundServices=new ArrayList<String>();
      for (      String service : services) {
        serviceProgress.subTask(NLS.bind(Messages.CloudFoundryServerBehaviour_DELETING_SERVICE,service));
        boolean shouldDelete=true;
        try {
          CloudServiceInstance instance=client.getServiceInstance(service);
          List<CloudServiceBinding> bindings=(instance != null) ? instance.getBindings() : null;
          shouldDelete=bindings == null || bindings.isEmpty();
        }
 catch (        CloudFoundryException cfe) {
          List<CloudApplication> apps=client.getApplications();
          if (apps != null) {
            for (int i=0; shouldDelete && i < apps.size(); i++) {
              CloudApplication app=apps.get(i);
              if (app != null) {
                List<String> appServices=app.getServices();
                if (appServices != null) {
                  for (                  String appServ : appServices) {
                    if (service.equals(appServ)) {
                      shouldDelete=false;
                      break;
                    }
                  }
                }
              }
            }
          }
        }
        if (shouldDelete) {
          client.deleteService(service);
        }
 else {
          boundServices.add(service);
        }
        serviceProgress.worked(1);
      }
      if (!boundServices.isEmpty()) {
        StringWriter writer=new StringWriter();
        int size=boundServices.size();
        for (int i=0; i < size; i++) {
          writer.append(boundServices.get(i));
          if (i < size - 1) {
            writer.append(',');
            writer.append(' ');
          }
        }
        String boundServs=writer.toString();
        CloudFoundryPlugin.getCallback().handleError(CloudFoundryPlugin.getErrorStatus(NLS.bind(Messages.CloudFoundryServerBehaviour_ERROR_DELETE_SERVICES_BOUND,boundServs)));
      }
      return client.getServices();
    }
  }
;
}","BaseClientRequest<List<CloudService>> getDeleteServicesRequest(final List<String> services){
  return new BehaviourRequest<List<CloudService>>(Messages.CloudFoundryServerBehaviour_DELETE_SERVICES){
    @Override protected List<CloudService> doRun(    CloudFoundryOperations client,    SubMonitor progress) throws CoreException {
      SubMonitor serviceProgress=SubMonitor.convert(progress,services.size());
      List<String> boundServices=new ArrayList<String>();
      for (      String service : services) {
        serviceProgress.subTask(NLS.bind(Messages.CloudFoundryServerBehaviour_DELETING_SERVICE,service));
        boolean shouldDelete=true;
        try {
          CloudServiceInstance instance=client.getServiceInstance(service);
          List<CloudServiceBinding> bindings=(instance != null) ? instance.getBindings() : null;
          shouldDelete=bindings == null || bindings.isEmpty();
        }
 catch (        Throwable t) {
          List<CloudApplication> apps=client.getApplications();
          if (apps != null) {
            for (int i=0; shouldDelete && i < apps.size(); i++) {
              CloudApplication app=apps.get(i);
              if (app != null) {
                List<String> appServices=app.getServices();
                if (appServices != null) {
                  for (                  String appServ : appServices) {
                    if (service.equals(appServ)) {
                      shouldDelete=false;
                      break;
                    }
                  }
                }
              }
            }
          }
        }
        if (shouldDelete) {
          client.deleteService(service);
        }
 else {
          boundServices.add(service);
        }
        serviceProgress.worked(1);
      }
      if (!boundServices.isEmpty()) {
        StringWriter writer=new StringWriter();
        int size=boundServices.size();
        for (int i=0; i < size; i++) {
          writer.append(boundServices.get(i));
          if (i < size - 1) {
            writer.append(',');
            writer.append(' ');
          }
        }
        String boundServs=writer.toString();
        CloudFoundryPlugin.getCallback().handleError(CloudFoundryPlugin.getErrorStatus(NLS.bind(Messages.CloudFoundryServerBehaviour_ERROR_DELETE_SERVICES_BOUND,boundServs)));
      }
      return client.getServices();
    }
  }
;
}",0.9924496644295302
10631,"protected IFile getFile(IResource resource,String containingFolderName,String fileName) throws CoreException {
  if (resource instanceof IFile && resource.getName().equals(fileName) && resource.getParent() != null && resource.getParent().getName().equals(containingFolderName)) {
    return (IFile)resource;
  }
 else   if (resource instanceof IContainer) {
    IContainer container=(IContainer)resource;
    IResource[] children=container.members();
    if (children != null) {
      for (      IResource child : children) {
        IFile file=getFile(child,containingFolderName,fileName);
        if (file != null) {
          return file;
        }
      }
    }
  }
  return null;
}","protected IFile getFile(IResource resource,String containingFolderName,String fileName) throws CoreException {
  if (resource == null || !resource.exists()) {
    return null;
  }
  if (resource instanceof IFile && resource.getName().equals(fileName) && resource.getParent() != null && resource.getParent().getName().equals(containingFolderName)) {
    return (IFile)resource;
  }
 else   if (resource instanceof IContainer) {
    IContainer container=(IContainer)resource;
    IResource[] children=container.members();
    if (children != null) {
      for (      IResource child : children) {
        IFile file=getFile(child,containingFolderName,fileName);
        if (file != null) {
          return file;
        }
      }
    }
  }
  return null;
}",0.952116585704372
10632,"public static String getDescriptorID(String userName,String password,String actualURL){
  if (userName == null || password == null || actualURL == null) {
    return null;
  }
  return userName + password + actualURL;
}","public static String getDescriptorID(String userName,String password,String actualURL,boolean selfSigned){
  if (userName == null || password == null || actualURL == null) {
    return null;
  }
  return userName + password + actualURL+ selfSigned;
}",0.9339019189765458
10633,"public CloudSpacesDescriptor(CloudOrgsAndSpaces spaces,String userName,String password,String actualServerURL){
  this.spaces=spaces;
  descriptorID=getDescriptorID(userName,password,actualServerURL);
}","public CloudSpacesDescriptor(CloudOrgsAndSpaces spaces,String userName,String password,String actualServerURL,boolean selfSigned){
  this.spaces=spaces;
  descriptorID=getDescriptorID(userName,password,actualServerURL,selfSigned);
}",0.9308755760368664
10634,"protected CloudSpacesDescriptor internalUpdateDescriptor(String urlText,String userName,String password,boolean selfSigned,IRunnableContext context) throws CoreException {
  String actualURL=CloudUiUtil.getUrlFromDisplayText(urlText);
  validateCredentialsLocally(actualURL,userName,password);
  String cachedDescriptorID=CloudSpacesDescriptor.getDescriptorID(userName,password,actualURL);
  spacesDescriptor=cachedDescriptors.get(cachedDescriptorID);
  if (spacesDescriptor == null) {
    CloudOrgsAndSpaces orgsAndSpaces=CloudUiUtil.getCloudSpaces(userName,password,actualURL,true,selfSigned,context);
    if (orgsAndSpaces != null) {
      spacesDescriptor=new CloudSpacesDescriptor(orgsAndSpaces,userName,password,actualURL);
      cachedDescriptors.put(cachedDescriptorID,spacesDescriptor);
    }
  }
  return spacesDescriptor;
}","protected CloudSpacesDescriptor internalUpdateDescriptor(String urlText,String userName,String password,boolean selfSigned,IRunnableContext context) throws CoreException {
  String actualURL=CloudUiUtil.getUrlFromDisplayText(urlText);
  validateCredentialsLocally(actualURL,userName,password);
  if (spacesDescriptor == null) {
    CloudOrgsAndSpaces orgsAndSpaces=CloudUiUtil.getCloudSpaces(userName,password,actualURL,true,selfSigned,context);
    if (orgsAndSpaces != null) {
      spacesDescriptor=new CloudSpacesDescriptor(orgsAndSpaces,userName,password,actualURL,selfSigned);
    }
  }
  return spacesDescriptor;
}",0.5443298969072164
10635,"/** 
 * True if there is already a descriptor set for the given set of credentials that contains a list of orgs and spaces. False otherwise
 * @param urlText
 * @param userName
 * @param password
 * @return
 */
public boolean matchesCurrentDescriptor(String urlText,String userName,String password){
  String actualURL=CloudUiUtil.getUrlFromDisplayText(urlText);
  String cachedDescriptorID=CloudSpacesDescriptor.getDescriptorID(userName,password,actualURL);
  return getCurrentSpacesDescriptor() != null && getCurrentSpacesDescriptor().getID() != null && getCurrentSpacesDescriptor().getID().equals(cachedDescriptorID);
}","/** 
 * True if there is already a descriptor set for the given set of credentials that contains a list of orgs and spaces. False otherwise
 * @param urlText
 * @param userName
 * @param password
 * @return
 */
public boolean matchesCurrentDescriptor(String urlText,String userName,String password,boolean selfSigned){
  String actualURL=CloudUiUtil.getUrlFromDisplayText(urlText);
  String cachedDescriptorID=CloudSpacesDescriptor.getDescriptorID(userName,password,actualURL,selfSigned);
  return getCurrentSpacesDescriptor() != null && getCurrentSpacesDescriptor().getID() != null && getCurrentSpacesDescriptor().getID().equals(cachedDescriptorID);
}",0.976452119309262
10636,"/** 
 * Validates the server credentials and URL using a standalone disposable Java client (   {@link CloudFoundryOperations} ).
 * @param validateAgainstServer true if credentials should be validatedagainst a server. False if validation should be local (e.g. checking credential and URL syntax)
 * @param runnableContext
 * @return non-null validation status.
 */
protected ValidationStatus serverValidation(boolean validateAgainstServer,boolean validateSpace,IRunnableContext runnableContext){
  ValidationStatus validationStatus=validateLocally();
  String userName=cfServer.getUsername();
  String password=cfServer.getPassword();
  String url=cfServer.getUrl();
  IStatus eventStatus=null;
  if (validationStatus.getStatus().isOK()) {
    if (!cloudServerSpaceDelegate.matchesCurrentDescriptor(url,userName,password)) {
      cloudServerSpaceDelegate.clearDescriptor();
    }
    try {
      boolean acceptSelfSigned=cfServer.getSelfSignedCertificate();
      if (validateSpace) {
        cloudServerSpaceDelegate.resolveDescriptor(url,userName,password,acceptSelfSigned,runnableContext,validateAgainstServer);
      }
 else       if (validateAgainstServer) {
        boolean displayURL=true;
        CloudUiUtil.validateCredentials(userName,password,url,displayURL,acceptSelfSigned,runnableContext);
      }
    }
 catch (    CoreException e) {
      int eventType=ValidationEvents.VALIDATION;
      if (e.getCause() instanceof javax.net.ssl.SSLPeerUnverifiedException) {
        eventType=ValidationEvents.SELF_SIGNED;
      }
      eventStatus=e.getStatus();
      validationStatus=getValidationStatus(eventStatus,eventType);
    }
catch (    OperationCanceledException oce) {
      eventStatus=null;
      validationStatus=getValidationStatus(Status.OK_STATUS,ValidationEvents.EVENT_NONE);
    }
  }
  return validationStatus;
}","/** 
 * Validates the server credentials and URL using a standalone disposable Java client (   {@link CloudFoundryOperations} ).
 * @param validateAgainstServer true if credentials should be validatedagainst a server. False if validation should be local (e.g. checking credential and URL syntax)
 * @param runnableContext
 * @return non-null validation status.
 */
protected ValidationStatus serverValidation(boolean validateAgainstServer,boolean validateSpace,IRunnableContext runnableContext){
  ValidationStatus validationStatus=validateLocally();
  String userName=cfServer.getUsername();
  String password=cfServer.getPassword();
  String url=cfServer.getUrl();
  boolean acceptSelfSigned=cfServer.getSelfSignedCertificate();
  IStatus eventStatus=null;
  if (validationStatus.getStatus().isOK()) {
    if (!cloudServerSpaceDelegate.matchesCurrentDescriptor(url,userName,password,acceptSelfSigned)) {
      cloudServerSpaceDelegate.clearDescriptor();
    }
    try {
      if (validateSpace) {
        cloudServerSpaceDelegate.resolveDescriptor(url,userName,password,acceptSelfSigned,runnableContext,validateAgainstServer);
      }
 else       if (validateAgainstServer) {
        boolean displayURL=true;
        CloudUiUtil.validateCredentials(userName,password,url,displayURL,acceptSelfSigned,runnableContext);
      }
    }
 catch (    CoreException e) {
      int eventType=ValidationEvents.VALIDATION;
      if (e.getCause() instanceof javax.net.ssl.SSLPeerUnverifiedException) {
        eventType=ValidationEvents.SELF_SIGNED;
      }
      eventStatus=e.getStatus();
      validationStatus=getValidationStatus(eventStatus,eventType);
    }
catch (    OperationCanceledException oce) {
      eventStatus=null;
      validationStatus=getValidationStatus(Status.OK_STATUS,ValidationEvents.EVENT_NONE);
    }
  }
  return validationStatus;
}",0.9595877407106048
10637,"/** 
 * Prompts user to define a value for the wildcard in the cloud URL, then return the new URL
 * @param cloudUrl
 * @param allCloudUrls
 * @param shell
 * @return new URL, null if no wildcard appears in cloudUrl or if usercancels out of defining a new value
 */
public static CloudServerURL getWildcardUrl(CloudServerURL cloudUrl,List<CloudServerURL> allCloudUrls,Shell shell){
  String url=cloudUrl.getUrl();
  if (url.contains(""String_Node_Str"")) {
    int startIndex=url.indexOf(""String_Node_Str"");
    int endIndex=url.indexOf(""String_Node_Str"");
    String wildcard=url.substring(startIndex + 1,endIndex);
    TargetURLDialog dialog=new TargetURLDialog(shell,cloudUrl,wildcard,allCloudUrls);
    if (dialog.open() == IDialogConstants.OK_ID) {
      url=dialog.getUrl();
      String name=dialog.getName();
      return new CloudServerURL(name,url,true);
    }
 else {
      return null;
    }
  }
  return null;
}","/** 
 * Prompts user to define a value for the wildcard in the cloud URL, then return the new URL
 * @param cloudUrl
 * @param allCloudUrls
 * @param shell
 * @return new URL, null if no wildcard appears in cloudUrl or if usercancels out of defining a new value
 */
public static CloudServerURL getWildcardUrl(CloudServerURL cloudUrl,List<CloudServerURL> allCloudUrls,Shell shell){
  String url=cloudUrl.getUrl();
  if (url.contains(""String_Node_Str"")) {
    int startIndex=url.indexOf(""String_Node_Str"");
    int endIndex=url.indexOf(""String_Node_Str"");
    String wildcard=url.substring(startIndex + 1,endIndex);
    TargetURLDialog dialog=new TargetURLDialog(shell,cloudUrl,wildcard,allCloudUrls);
    if (dialog.open() == IDialogConstants.OK_ID) {
      url=dialog.getUrl();
      String name=dialog.getName();
      boolean selfSigned=url != null && CloudFoundryServer.getSelfSignedCertificate(url);
      return new CloudServerURL(name,url,true,selfSigned);
    }
 else {
      return null;
    }
  }
  return null;
}",0.9480719794344472
10638,"public static List<CloudServerURL> getUserDefinedUrls(String serverTypeId){
  List<CloudServerURL> urls=new ArrayList<CloudServerURL>();
  IPreferenceStore prefStore=CloudFoundryServerUiPlugin.getDefault().getPreferenceStore();
  String urlString=prefStore.getString(ATTR_USER_DEFINED_URLS + ""String_Node_Str"" + serverTypeId);
  if (urlString != null && urlString.length() > 0) {
    String[] urlEntries=urlString.split(""String_Node_Str"");
    if (urlEntries != null) {
      for (      String entry : urlEntries) {
        if (entry.length() > 0) {
          String[] values=entry.split(""String_Node_Str"");
          if (values != null) {
            String name=null;
            String url=null;
            if (values.length >= 2) {
              name=values[0];
              url=values[1];
            }
            urls.add(new CloudServerURL(name,url,true));
          }
        }
      }
    }
  }
  return urls;
}","public static List<CloudServerURL> getUserDefinedUrls(String serverTypeId){
  List<CloudServerURL> urls=new ArrayList<CloudServerURL>();
  IPreferenceStore prefStore=CloudFoundryServerUiPlugin.getDefault().getPreferenceStore();
  String urlString=prefStore.getString(ATTR_USER_DEFINED_URLS + ""String_Node_Str"" + serverTypeId);
  if (urlString != null && urlString.length() > 0) {
    String[] urlEntries=urlString.split(""String_Node_Str"");
    if (urlEntries != null) {
      for (      String entry : urlEntries) {
        if (entry.length() > 0) {
          String[] values=entry.split(""String_Node_Str"");
          if (values != null) {
            String name=null;
            String url=null;
            if (values.length >= 2) {
              name=values[0];
              url=values[1];
            }
            boolean selfSigned=url != null && CloudFoundryServer.getSelfSignedCertificate(url);
            urls.add(new CloudServerURL(name,url,true,selfSigned));
          }
        }
      }
    }
  }
  return urls;
}",0.9452124935995904
10639,"public IPackageFragmentRoot[] getPackageFragmentRoots(IProgressMonitor monitor) throws CoreException {
  IType type=getMainType(monitor);
  ILaunchConfiguration configuration=createConfiguration(type);
  IPath[] classpathEntries=getRuntimeClasspaths(configuration);
  List<IPackageFragmentRoot> pckRoots=new ArrayList<IPackageFragmentRoot>();
  List<IJavaProject> javaProjectsToSearch=getOrderedJavaProjects(javaProject);
  for (  IPath path : classpathEntries) {
    for (    IJavaProject javaProject : javaProjectsToSearch) {
      try {
        IPackageFragmentRoot[] roots=javaProject.getPackageFragmentRoots();
        if (roots != null) {
          List<IPackageFragmentRoot> foundRoots=new ArrayList<IPackageFragmentRoot>();
          for (          IPackageFragmentRoot packageFragmentRoot : roots) {
            if (isRootAtEntry(packageFragmentRoot,path)) {
              foundRoots.add(packageFragmentRoot);
            }
          }
          if (!foundRoots.isEmpty()) {
            pckRoots.addAll(foundRoots);
            break;
          }
        }
      }
 catch (      Exception e) {
        throw CloudErrorUtil.toCoreException(e);
      }
    }
  }
  return pckRoots.toArray(new IPackageFragmentRoot[pckRoots.size()]);
}","public IPackageFragmentRoot[] getPackageFragmentRoots(IProgressMonitor monitor) throws CoreException {
  IType type=getMainType(monitor);
  IPath[] classpathEntries=null;
  ILaunchConfiguration configuration=null;
  try {
    configuration=createConfiguration(type);
    classpathEntries=getRuntimeClasspaths(configuration);
  }
  finally {
    if (configuration != null) {
      configuration.delete();
    }
  }
  List<IPackageFragmentRoot> pckRoots=new ArrayList<IPackageFragmentRoot>();
  List<IJavaProject> javaProjectsToSearch=getOrderedJavaProjects(javaProject);
  for (  IPath path : classpathEntries) {
    for (    IJavaProject javaProject : javaProjectsToSearch) {
      try {
        IPackageFragmentRoot[] roots=javaProject.getPackageFragmentRoots();
        if (roots != null) {
          List<IPackageFragmentRoot> foundRoots=new ArrayList<IPackageFragmentRoot>();
          for (          IPackageFragmentRoot packageFragmentRoot : roots) {
            if (isRootAtEntry(packageFragmentRoot,path)) {
              foundRoots.add(packageFragmentRoot);
            }
          }
          if (!foundRoots.isEmpty()) {
            pckRoots.addAll(foundRoots);
            break;
          }
        }
      }
 catch (      Exception e) {
        throw CloudErrorUtil.toCoreException(e);
      }
    }
  }
  return pckRoots.toArray(new IPackageFragmentRoot[pckRoots.size()]);
}",0.8745247148288974
10640,"protected boolean hasSpaceChanged(CloudSpace selectedCloudSpace){
  CloudFoundrySpace existingSpace=getCloudServer().getCloudFoundrySpace();
  return !matchesExisting(selectedCloudSpace,existingSpace);
}","protected boolean hasSpaceChanged(CloudSpace selectedCloudSpace){
  CloudFoundrySpace existingSpace=getCloudServer().getCloudFoundrySpace();
  return !matchesSpace(selectedCloudSpace,existingSpace);
}",0.967741935483871
10641,"/** 
 * @return the first space available that has no corresponding serverinstance. If null, no space found that is not already associated with a server instance.
 */
public CloudSpace getSpaceWithNoServerInstance(){
  CloudSpacesDescriptor descriptor=getCurrentSpacesDescriptor();
  CloudOrgsAndSpaces orgsSpaces=descriptor != null ? descriptor.getOrgsAndSpaces() : null;
  if (orgsSpaces != null) {
    List<CloudFoundryServer> cloudServers=CloudServerUtil.getCloudServers();
    if (cloudServers == null || cloudServers.isEmpty()) {
      return orgsSpaces.getDefaultCloudSpace();
    }
 else {
      List<CloudSpace> spaces=orgsSpaces.getAllSpaces();
      if (spaces != null) {
        for (        CloudSpace space : spaces) {
          CloudFoundryServer existingServer=null;
          for (          CloudFoundryServer cloudServer : cloudServers) {
            if (matchesExisting(space,cloudServer.getCloudFoundrySpace())) {
              existingServer=cloudServer;
              break;
            }
          }
          if (existingServer == null) {
            return space;
          }
        }
      }
    }
  }
  return null;
}","/** 
 * @return the first space available that has no corresponding serverinstance. If null, no space found that is not already associated with a server instance.
 */
public CloudSpace getSpaceWithNoServerInstance(){
  CloudSpacesDescriptor descriptor=getCurrentSpacesDescriptor();
  CloudOrgsAndSpaces orgsSpaces=descriptor != null ? descriptor.getOrgsAndSpaces() : null;
  if (orgsSpaces != null) {
    List<CloudFoundryServer> cloudServers=CloudServerUtil.getCloudServers();
    if (cloudServers == null || cloudServers.isEmpty()) {
      return orgsSpaces.getDefaultCloudSpace();
    }
 else {
      List<CloudSpace> spaces=orgsSpaces.getAllSpaces();
      if (spaces != null) {
        String url=cloudServer.getUrl();
        for (        CloudSpace space : spaces) {
          CloudFoundryServer foundServer=null;
          for (          CloudFoundryServer existingServer : cloudServers) {
            if (existingServer.getUrl().equals(url) && matchesSpace(space,existingServer.getCloudFoundrySpace())) {
              foundServer=cloudServer;
              break;
            }
          }
          if (foundServer == null) {
            return space;
          }
        }
      }
    }
  }
  return null;
}",0.8341793570219966
10642,"@Override public boolean performFinish(){
  final CloudSpace selectedSpace=cloudSpacePage.getSelectedCloudSpace();
  if (selectedSpace != null && !CloudServerSpacesDelegate.matchesExisting(selectedSpace,cloudServer.getCloudFoundrySpace())) {
    String serverName=cloudSpacePage.getServerName();
    final ServerDescriptor descriptor=ServerDescriptor.getServerDescriptor(cloudServer,serverName);
    if (descriptor == null) {
      CloudFoundryPlugin.logError(NLS.bind(Messages.ERROR_NO_CLOUD_SERVER_DESCRIPTOR,cloudServer.getServerId()));
      return false;
    }
 else {
      final String password=cloudServer.getPassword();
      final String userName=cloudServer.getUsername();
      final String url=cloudServer.getUrl();
      final boolean selfSignedCert=cloudServer.getSelfSignedCertificate();
      CloudUiUtil.runForked(new ICoreRunnable(){
        public void run(        final IProgressMonitor monitor) throws CoreException {
          ServerHandler serverHandler=new ServerHandler(descriptor);
          serverHandler.createServer(monitor,ServerHandler.NEVER_OVERWRITE,new ServerHandlerCallback(){
            @Override public void configureServer(            IServerWorkingCopy wc) throws CoreException {
              CloudFoundryServer cloudServer=(CloudFoundryServer)wc.loadAdapter(CloudFoundryServer.class,null);
              if (cloudServer != null) {
                cloudServer.setPassword(password);
                cloudServer.setUsername(userName);
                cloudServer.setUrl(url);
                cloudServer.setSpace(selectedSpace);
                cloudServer.setSelfSignedCertificate(selfSignedCert);
                cloudServer.saveConfiguration(monitor);
              }
            }
          }
);
        }
      }
,this);
    }
  }
  return true;
}","@Override public boolean performFinish(){
  final CloudSpace selectedSpace=cloudSpacePage.getSelectedCloudSpace();
  if (selectedSpace != null && !CloudServerSpacesDelegate.matchesSpace(selectedSpace,cloudServer.getCloudFoundrySpace())) {
    String serverName=cloudSpacePage.getServerName();
    final ServerDescriptor descriptor=ServerDescriptor.getServerDescriptor(cloudServer,serverName);
    if (descriptor == null) {
      CloudFoundryPlugin.logError(NLS.bind(Messages.ERROR_NO_CLOUD_SERVER_DESCRIPTOR,cloudServer.getServerId()));
      return false;
    }
 else {
      final String password=cloudServer.getPassword();
      final String userName=cloudServer.getUsername();
      final String url=cloudServer.getUrl();
      final boolean selfSignedCert=cloudServer.getSelfSignedCertificate();
      CloudUiUtil.runForked(new ICoreRunnable(){
        public void run(        final IProgressMonitor monitor) throws CoreException {
          ServerHandler serverHandler=new ServerHandler(descriptor);
          serverHandler.createServer(monitor,ServerHandler.NEVER_OVERWRITE,new ServerHandlerCallback(){
            @Override public void configureServer(            IServerWorkingCopy wc) throws CoreException {
              CloudFoundryServer cloudServer=(CloudFoundryServer)wc.loadAdapter(CloudFoundryServer.class,null);
              if (cloudServer != null) {
                cloudServer.setPassword(password);
                cloudServer.setUsername(userName);
                cloudServer.setUrl(url);
                cloudServer.setSpace(selectedSpace);
                cloudServer.setSelfSignedCertificate(selfSignedCert);
                cloudServer.saveConfiguration(monitor);
              }
            }
          }
);
        }
      }
,this);
    }
  }
  return true;
}",0.9963717555121406
10643,"@Override protected Control createCustomArea(Composite parent){
  Composite area=new Composite(parent,SWT.NONE);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(area);
  GridLayoutFactory.fillDefaults().numColumns(1).applyTo(area);
  description=new Label(area,SWT.NONE | SWT.WRAP);
  GridDataFactory.fillDefaults().hint(80,SWT.DEFAULT).applyTo(description);
  description.setText(Messages.UpdatePasswordDialog_TEXT_DESCRIPTION);
  Composite composite=new Composite(area,SWT.NONE);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(composite);
  GridLayoutFactory.fillDefaults().numColumns(2).applyTo(composite);
  Label updatePasswordLabel=new Label(composite,SWT.NONE);
  updatePasswordLabel.setText(Messages.UpdatePasswordDialog_TEXT_NEW_PW_LABEL);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.CENTER).grab(false,false).applyTo(updatePasswordLabel);
  final Text newPasswordText=new Text(composite,SWT.PASSWORD | SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).applyTo(newPasswordText);
  newPasswordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      password=newPasswordText.getText();
      update();
    }
  }
);
  Label verifyPasswordLabel=new Label(composite,SWT.NONE);
  verifyPasswordLabel.setText(Messages.UpdatePasswordDialog_TEXT_VERIFY_PW_LABEL);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.CENTER).grab(false,false).applyTo(verifyPasswordLabel);
  final Text verifyPasswordText=new Text(composite,SWT.PASSWORD | SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).applyTo(verifyPasswordText);
  verifyPasswordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      verifyPassword=verifyPasswordText.getText();
      update();
    }
  }
);
  return composite;
}","@Override protected Control createCustomArea(Composite parent){
  Composite area=new Composite(parent,SWT.NONE);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(area);
  GridLayoutFactory.fillDefaults().numColumns(1).applyTo(area);
  description=new Label(area,SWT.NONE | SWT.WRAP);
  GridDataFactory.fillDefaults().hint(400,SWT.DEFAULT).applyTo(description);
  description.setText(Messages.UpdatePasswordDialog_TEXT_DESCRIPTION);
  Composite composite=new Composite(area,SWT.NONE);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(composite);
  GridLayoutFactory.fillDefaults().numColumns(2).applyTo(composite);
  Label updatePasswordLabel=new Label(composite,SWT.NONE);
  updatePasswordLabel.setText(Messages.UpdatePasswordDialog_TEXT_NEW_PW_LABEL);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.CENTER).grab(false,false).applyTo(updatePasswordLabel);
  final Text newPasswordText=new Text(composite,SWT.PASSWORD | SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).applyTo(newPasswordText);
  newPasswordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      password=newPasswordText.getText();
      update();
    }
  }
);
  Label verifyPasswordLabel=new Label(composite,SWT.NONE);
  verifyPasswordLabel.setText(Messages.UpdatePasswordDialog_TEXT_VERIFY_PW_LABEL);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.CENTER).grab(false,false).applyTo(verifyPasswordLabel);
  final Text verifyPasswordText=new Text(composite,SWT.PASSWORD | SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).applyTo(verifyPasswordText);
  verifyPasswordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      verifyPassword=verifyPasswordText.getText();
      update();
    }
  }
);
  return area;
}",0.9957333333333334
10644,"/** 
 * Error due to invalid credentials, typically 401 or 403 HTTP errors. Returns null if the error is NOT an invalid credentials error.
 * @param t error to parse
 * @return Error message if invalid credentials error (401 or 403), or null.
 */
public static String getInvalidCredentialsError(Throwable t){
  if (isUnauthorisedException(t)) {
    return Messages.ERROR_WRONG_EMAIL_OR_PASSWORD_UNAUTHORISED;
  }
 else   if (isForbiddenException(t)) {
    return Messages.ERROR_WRONG_EMAIL_OR_PASSWORD_FORBIDDEN;
  }
  return null;
}","/** 
 * Error due to invalid credentials, typically 401 or 403 HTTP errors. Returns null if the error is NOT an invalid credentials error.
 * @param error error to parse
 * @return Error message if invalid credentials error (401 or 403), or null.
 */
public static String getInvalidCredentialsError(Throwable error){
  if (isUnauthorisedException(error)) {
    return Messages.ERROR_WRONG_EMAIL_OR_PASSWORD_UNAUTHORISED;
  }
 else   if (isForbiddenException(error)) {
    return Messages.ERROR_WRONG_EMAIL_OR_PASSWORD_FORBIDDEN;
  }
 else {
    OAuth2AccessDeniedException oauthException=null;
    if (error instanceof OAuth2AccessDeniedException) {
      oauthException=(OAuth2AccessDeniedException)error;
    }
 else     if (error.getCause() instanceof OAuth2AccessDeniedException) {
      oauthException=(OAuth2AccessDeniedException)error.getCause();
    }
    if (oauthException != null && oauthException.getHttpErrorCode() == 403) {
      return NLS.bind(Messages.ERROR_ACCESS_TOKEN,oauthException.getOAuth2ErrorCode());
    }
  }
  return null;
}",0.6574132492113565
10645,"/** 
 * Allow UI Control to react based on a property change and change the UI control.
 * @param event property change event that describes the change.
 */
public void handlePropertyChanged(PropertyChangeEvent event){
  if (event != null && AbstractUIControl.PROP_SERVER_TYPE.equals(event.getPropertyName())) {
    Object curNewValue=event.getNewValue();
    if (curNewValue instanceof IServerType && isSupportedServerType((IServerType)curNewValue)) {
      if (controlListener != null) {
        controlMap.put(PROP_HOSTNAME,new UIControlEntry(false,null));
        fireUIControlChangedEvent();
      }
    }
 else {
      if (controlListener != null) {
        controlMap.put(PROP_HOSTNAME,new UIControlEntry(true,null));
        fireUIControlChangedEvent();
      }
    }
  }
}","/** 
 * Allow UI Control to react based on a property change and change the UI control.
 * @param event property change event that describes the change.
 */
public void handlePropertyChanged(PropertyChangeEvent event){
  if (event != null && AbstractUIControl.PROP_SERVER_TYPE.equals(event.getPropertyName())) {
    Object curNewValue=event.getNewValue();
    if (curNewValue == null || curNewValue instanceof IServerType && isSupportedServerType((IServerType)curNewValue)) {
      if (controlListener != null) {
        controlMap.put(PROP_HOSTNAME,new UIControlEntry(false,null));
        fireUIControlChangedEvent();
      }
    }
 else {
      if (controlListener != null) {
        controlMap.put(PROP_HOSTNAME,new UIControlEntry(true,null));
        fireUIControlChangedEvent();
      }
    }
  }
}",0.9854889589905362
10646,"/** 
 * Allow UI Control to react based on a property change and change the UI control.
 * @param event property change event that describes the change.
 */
public void handlePropertyChanged(PropertyChangeEvent event){
  if (event != null && AbstractUIControl.PROP_SERVER_TYPE.equals(event.getPropertyName())) {
    Object curNewValue=event.getNewValue();
    Object curOldValue=event.getOldValue();
    if (curOldValue != curNewValue) {
      if (curNewValue instanceof IServerType) {
        if (isSupportedServerType((IServerType)curNewValue)) {
          if (controlListener != null) {
            controlMap.put(PROP_HOSTNAME,new UIControlEntry(false,null));
            previousHostname=controlListener.getControlStringValue(PROP_HOSTNAME);
            fireUIControlChangedEvent();
          }
        }
 else         if (isSupportedServerType((IServerType)curOldValue)) {
          if (controlListener != null) {
            controlMap.put(PROP_HOSTNAME,new UIControlEntry(true,previousHostname));
            previousHostname=null;
            fireUIControlChangedEvent();
          }
        }
      }
    }
  }
}","/** 
 * Allow UI Control to react based on a property change and change the UI control.
 * @param event property change event that describes the change.
 */
public void handlePropertyChanged(PropertyChangeEvent event){
  if (event != null && AbstractUIControl.PROP_SERVER_TYPE.equals(event.getPropertyName())) {
    Object curNewValue=event.getNewValue();
    Object curOldValue=event.getOldValue();
    if (curOldValue != curNewValue) {
      if (curNewValue == null || curNewValue instanceof IServerType) {
        if (isSupportedServerType((IServerType)curNewValue)) {
          if (controlListener != null) {
            controlMap.put(PROP_HOSTNAME,new UIControlEntry(false,null));
            previousHostname=controlListener.getControlStringValue(PROP_HOSTNAME);
            fireUIControlChangedEvent();
          }
        }
 else         if (isSupportedServerType((IServerType)curOldValue)) {
          if (controlListener != null) {
            controlMap.put(PROP_HOSTNAME,new UIControlEntry(true,previousHostname));
            previousHostname=null;
            fireUIControlChangedEvent();
          }
        }
      }
    }
  }
}",0.9898544331715924
10647,"protected void refreshDeploymentButtons(CloudFoundryApplicationModule appModule){
  if (topButtonRow == null || lowerButtonRow == null || lowerButtonRow.isDisposed() || topButtonRow.isDisposed()) {
    return;
  }
  int state=appModule.getState();
  if (skipButtonRefreshOnRestart) {
    skipButtonRefreshOnRestart=false;
    return;
  }
  if (state == IServer.STATE_STOPPED || state == IServer.STATE_UNKNOWN) {
    pushAppButton.setEnabled(true);
    stopAppButton.setEnabled(false);
    startAppButton.setText(Messages.ApplicationDetailsPart_TEXT_START);
    startAppButton.setImage(ImageResource.getImage(ImageResource.IMG_CLCL_START));
    startAppButton.setToolTipText(Messages.ApplicationDetailsPart_TEXT_START_TOOLTIP);
  }
 else {
    pushAppButton.setEnabled(false);
    stopAppButton.setEnabled(true);
    startAppButton.setText(Messages.ApplicationDetailsPart_TEXT_RESTART);
    startAppButton.setImage(CloudFoundryImages.getImage(CloudFoundryImages.RESTART));
    startAppButton.setToolTipText(Messages.ApplicationDetailsPart_TEXT_RESTART_TOOLTIP);
  }
  if (state == IServer.STATE_STOPPED || state == IServer.STATE_UNKNOWN || !CloudFoundryProperties.isModuleProjectAccessible.testProperty(new IModule[]{module},cloudServer)) {
    updateRestartAppButton.setEnabled(false);
  }
 else {
    updateRestartAppButton.setEnabled(true);
  }
  refreshDebugControls(appModule);
  topButtonRow.getParent().layout(true);
  lowerButtonRow.getParent().layout(true);
}","protected void refreshDeploymentButtons(CloudFoundryApplicationModule appModule){
  if (topButtonRow == null || lowerButtonRow == null || lowerButtonRow.isDisposed() || topButtonRow.isDisposed()) {
    return;
  }
  int state=appModule.getState();
  if (skipButtonRefreshOnRestart) {
    skipButtonRefreshOnRestart=false;
    return;
  }
  if (state == IServer.STATE_STOPPED || state == IServer.STATE_UNKNOWN) {
    stopAppButton.setEnabled(false);
    if (CloudFoundryProperties.isModuleProjectAccessible.testProperty(new IModule[]{module},cloudServer)) {
      pushAppButton.setEnabled(true);
    }
 else {
      pushAppButton.setEnabled(false);
    }
    startAppButton.setText(Messages.ApplicationDetailsPart_TEXT_START);
    startAppButton.setImage(ImageResource.getImage(ImageResource.IMG_CLCL_START));
    startAppButton.setToolTipText(Messages.ApplicationDetailsPart_TEXT_START_TOOLTIP);
  }
 else {
    pushAppButton.setEnabled(false);
    stopAppButton.setEnabled(true);
    startAppButton.setText(Messages.ApplicationDetailsPart_TEXT_RESTART);
    startAppButton.setImage(CloudFoundryImages.getImage(CloudFoundryImages.RESTART));
    startAppButton.setToolTipText(Messages.ApplicationDetailsPart_TEXT_RESTART_TOOLTIP);
  }
  if (state == IServer.STATE_STOPPED || state == IServer.STATE_UNKNOWN || !CloudFoundryProperties.isModuleProjectAccessible.testProperty(new IModule[]{module},cloudServer)) {
    updateRestartAppButton.setEnabled(false);
  }
 else {
    updateRestartAppButton.setEnabled(true);
  }
  refreshDebugControls(appModule);
  topButtonRow.getParent().layout(true);
  lowerButtonRow.getParent().layout(true);
}",0.942958427328392
10648,"private void createApplicationOperationsSection(Composite parent){
  operationsSection=toolkit.createSection(parent,Section.TITLE_BAR);
  operationsSection.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().grab(true,false).applyTo(operationsSection);
  operationsSection.setText(Messages.ApplicationDetailsPart_TEXT_APP_OP);
  operationsSection.clientVerticalSpacing=0;
  Composite client=toolkit.createComposite(operationsSection);
  client.setLayout(new GridLayout(2,false));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(client);
  operationsSection.setClient(client);
  topButtonRow=toolkit.createComposite(client);
  GridDataFactory.fillDefaults().span(2,1).applyTo(topButtonRow);
  RowLayout layout=RowLayoutFactory.fillDefaults().margins(0,2).wrap(false).create();
  layout.center=true;
  topButtonRow.setLayout(layout);
  startAppButton=toolkit.createButton(topButtonRow,Messages.ApplicationDetailsPart_TEXT_START,SWT.PUSH);
  startAppButton.setImage(ImageResource.getImage(ImageResource.IMG_CLCL_START));
  startAppButton.setToolTipText(Messages.ApplicationDetailsPart_TEXT_START_TOOLTIP);
  startAppButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      restartApplication(ApplicationAction.RESTART);
    }
  }
);
  startAppButton.setEnabled(true);
  stopAppButton=toolkit.createButton(topButtonRow,Messages.ApplicationDetailsPart_TEXT_STOP,SWT.PUSH);
  stopAppButton.setImage(ImageResource.getImage(ImageResource.IMG_CLCL_STOP));
  stopAppButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      startStopApplication(ApplicationAction.STOP);
    }
  }
);
  updateRestartAppButton=toolkit.createButton(topButtonRow,Messages.ApplicationDetailsPart_TEXT_UPDATE_RESTART,SWT.PUSH);
  updateRestartAppButton.setImage(CloudFoundryImages.getImage(CloudFoundryImages.RESTART));
  updateRestartAppButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      restartApplication(ApplicationAction.UPDATE_RESTART);
    }
  }
);
  updateRestartAppButton.setToolTipText(Messages.ApplicationDetailsPart_TEXT_UPDATE_RESTART_TOOLTIP);
  lowerButtonRow=toolkit.createComposite(client);
  GridDataFactory.fillDefaults().span(2,1).applyTo(lowerButtonRow);
  layout=RowLayoutFactory.fillDefaults().margins(0,2).wrap(false).create();
  layout.center=true;
  lowerButtonRow.setLayout(layout);
  pushAppButton=toolkit.createButton(lowerButtonRow,Messages.ApplicationDetailsPart_TEXT_PUSH,SWT.PUSH);
  pushAppButton.setImage(CloudFoundryImages.getImage(CloudFoundryImages.PUSH));
  pushAppButton.setEnabled(true);
  pushAppButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      startStopApplication(ApplicationAction.START);
    }
  }
);
  pushAppButton.setToolTipText(Messages.ApplicationDetailsPart_TEXT_PUSH_TOOLTIP);
  createDebugArea(lowerButtonRow);
}","private void createApplicationOperationsSection(Composite parent){
  operationsSection=toolkit.createSection(parent,Section.TITLE_BAR);
  operationsSection.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().grab(true,false).applyTo(operationsSection);
  operationsSection.setText(Messages.ApplicationDetailsPart_TEXT_APP_OP);
  operationsSection.clientVerticalSpacing=0;
  Composite client=toolkit.createComposite(operationsSection);
  client.setLayout(new GridLayout(2,false));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(client);
  operationsSection.setClient(client);
  topButtonRow=toolkit.createComposite(client);
  GridDataFactory.fillDefaults().span(2,1).applyTo(topButtonRow);
  RowLayout layout=RowLayoutFactory.fillDefaults().margins(0,2).wrap(false).create();
  layout.center=true;
  topButtonRow.setLayout(layout);
  startAppButton=toolkit.createButton(topButtonRow,Messages.ApplicationDetailsPart_TEXT_START,SWT.PUSH);
  startAppButton.setImage(ImageResource.getImage(ImageResource.IMG_CLCL_START));
  startAppButton.setToolTipText(Messages.ApplicationDetailsPart_TEXT_START_TOOLTIP);
  startAppButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      restartApplication(ApplicationAction.RESTART);
    }
  }
);
  startAppButton.setEnabled(true);
  stopAppButton=toolkit.createButton(topButtonRow,Messages.ApplicationDetailsPart_TEXT_STOP,SWT.PUSH);
  stopAppButton.setImage(ImageResource.getImage(ImageResource.IMG_CLCL_STOP));
  stopAppButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      startStopApplication(ApplicationAction.STOP);
    }
  }
);
  updateRestartAppButton=toolkit.createButton(topButtonRow,Messages.ApplicationDetailsPart_TEXT_UPDATE_RESTART,SWT.PUSH);
  updateRestartAppButton.setImage(CloudFoundryImages.getImage(CloudFoundryImages.RESTART));
  updateRestartAppButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      restartApplication(ApplicationAction.UPDATE_RESTART);
    }
  }
);
  updateRestartAppButton.setToolTipText(Messages.ApplicationDetailsPart_TEXT_UPDATE_RESTART_TOOLTIP);
  lowerButtonRow=toolkit.createComposite(client);
  GridDataFactory.fillDefaults().span(2,1).applyTo(lowerButtonRow);
  layout=RowLayoutFactory.fillDefaults().margins(0,2).wrap(false).create();
  layout.center=true;
  lowerButtonRow.setLayout(layout);
  pushAppButton=toolkit.createButton(lowerButtonRow,Messages.ApplicationDetailsPart_TEXT_PUSH,SWT.PUSH);
  pushAppButton.setImage(CloudFoundryImages.getImage(CloudFoundryImages.PUSH));
  pushAppButton.setEnabled(false);
  pushAppButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      startStopApplication(ApplicationAction.START);
    }
  }
);
  pushAppButton.setToolTipText(Messages.ApplicationDetailsPart_TEXT_PUSH_TOOLTIP);
  createDebugArea(lowerButtonRow);
}",0.9988280596015404
10649,"@Override public void createSection(Composite parent){
  super.createSection(parent);
  FormToolkit toolkit=getFormToolkit(parent.getDisplay());
  Section section=toolkit.createSection(parent,ExpandableComposite.TWISTIE | ExpandableComposite.TITLE_BAR);
  section.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  section.setText(sectionTitle);
  Composite composite=toolkit.createComposite(section);
  section.setClient(composite);
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  Composite topComposite=new Composite(composite,SWT.NONE);
  topComposite.setLayout(new GridLayout(2,false));
  topComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  Label emailLabel=toolkit.createLabel(topComposite,Messages.COMMONTXT_EMAIL_WITH_COLON,SWT.NONE);
  emailLabel.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
  emailLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false));
  emailText=toolkit.createText(topComposite,""String_Node_Str"");
  emailText.setEditable(false);
  emailText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  emailText.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER);
  if (cfServer.getUsername() != null) {
    emailText.setText(cfServer.getUsername());
  }
  emailText.addModifyListener(new DataChangeListener(DataType.EMAIL));
  Label passwordLabel=toolkit.createLabel(topComposite,Messages.COMMONTXT_PW,SWT.NONE);
  passwordLabel.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
  passwordLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false));
  passwordText=toolkit.createText(topComposite,""String_Node_Str"",SWT.PASSWORD);
  passwordText.setEditable(false);
  passwordText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  passwordText.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER);
  if (cfServer.getPassword() != null) {
    passwordText.setText(cfServer.getPassword());
  }
  passwordText.addModifyListener(new DataChangeListener(DataType.PASSWORD));
  Label label=toolkit.createLabel(topComposite,Messages.COMMONTXT_URL);
  label.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
  label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false));
  urlText=toolkit.createText(topComposite,""String_Node_Str"",SWT.NONE);
  urlText.setEditable(false);
  urlText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  urlText.setData(FormToolkit.KEY_DRAW_BORDER,Boolean.FALSE);
  if (cfServer.getUrl() != null) {
    urlText.setText(CloudUiUtil.getDisplayTextFromUrl(cfServer.getUrl(),cfServer.getServer().getServerType().getId()));
  }
  Label orgLabel=toolkit.createLabel(topComposite,Messages.CloudFoundryAccountSection_LABEL_ORG,SWT.NONE);
  orgLabel.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
  orgLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false));
  orgText=toolkit.createText(topComposite,""String_Node_Str"",SWT.NONE);
  orgText.setEditable(false);
  orgText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  orgText.setData(FormToolkit.KEY_DRAW_BORDER,Boolean.FALSE);
  if (cfServer.getCloudFoundrySpace() != null && cfServer.getCloudFoundrySpace().getOrgName() != null) {
    orgText.setText(cfServer.getCloudFoundrySpace().getOrgName());
  }
  Label spaceLabel=toolkit.createLabel(topComposite,Messages.CloudFoundryAccountSection_LABEL_SPACE,SWT.NONE);
  spaceLabel.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
  spaceLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false));
  spaceText=toolkit.createText(topComposite,""String_Node_Str"",SWT.NONE);
  spaceText.setEditable(false);
  spaceText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  spaceText.setData(FormToolkit.KEY_DRAW_BORDER,Boolean.FALSE);
  if (cfServer.getCloudFoundrySpace() != null && cfServer.getCloudFoundrySpace().getSpaceName() != null) {
    spaceText.setText(cfServer.getCloudFoundrySpace().getSpaceName());
  }
  final Composite buttonComposite=toolkit.createComposite(composite);
  buttonComposite.setLayout(new GridLayout(4,false));
  GridDataFactory.fillDefaults().align(SWT.END,SWT.FILL).grab(true,false).applyTo(buttonComposite);
  Composite validateComposite=toolkit.createComposite(composite);
  validateComposite.setLayout(new GridLayout(1,false));
  validateComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  validateLabel=toolkit.createLabel(validateComposite,""String_Node_Str"",SWT.NONE);
  validateLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
  createCloneServerArea(buttonComposite,toolkit);
  final Button changePasswordButton=toolkit.createButton(buttonComposite,Messages.CloudFoundryAccountSection_BUTTON_CHANGE_PW,SWT.PUSH);
  changePasswordButton.setEnabled(false);
  changePasswordButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false));
  changePasswordButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (server.isDirty()) {
        boolean confirm=MessageDialog.openQuestion(getShell(),Messages.CloudFoundryAccountSection_DIALOG_UNSAVE_TITLE,Messages.CloudFoundryAccountSection_DIALOG_UNSAVE_BODY);
        if (!confirm) {
          return;
        }
      }
      UpdatePasswordDialog dialog=new UpdatePasswordDialog(getShell(),cfServer.getUsername());
      if (dialog.open() == IDialogConstants.OK_ID) {
        final String newPassword=dialog.getPassword();
        String errorMsg=CloudUiUtil.updatePassword(newPassword,cfServer,server);
        if (errorMsg != null) {
          validateLabel.setText(errorMsg);
          validateLabel.setForeground(validateLabel.getDisplay().getSystemColor(SWT.COLOR_RED));
        }
 else {
          validateLabel.setText(Messages.CloudFoundryAccountSection_LABEL_PW_CHANGED);
          passwordText.setText(newPassword);
        }
      }
    }
  }
);
  final Button validateButton=toolkit.createButton(buttonComposite,Messages.CloudFoundryAccountSection_BUTTON_VALIDATE_ACCOUNT,SWT.PUSH);
  validateButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false));
  validateButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      final String url=cfServer.getUrl();
      final String userName=emailText.getText();
      final String password=passwordText.getText();
      final String org=orgText.getText();
      final String space=spaceText.getText();
      try {
        CloudUiUtil.validateCredentials(userName,password,url,false,cfServer.getSelfSignedCertificate(),null);
        if (org != null && space != null) {
          validateLabel.setText(Messages.VALID_ACCOUNT);
          validateLabel.setForeground(validateLabel.getDisplay().getSystemColor(SWT.COLOR_BLACK));
        }
 else {
          String errorMsg=null;
          if (org == null) {
            errorMsg=Messages.ERROR_INVALID_ORG;
          }
 else           if (space == null) {
            errorMsg=Messages.ERROR_INVALID_SPACE;
          }
          validateLabel.setText(errorMsg);
          validateLabel.setForeground(validateLabel.getDisplay().getSystemColor(SWT.COLOR_RED));
        }
      }
 catch (      CoreException e) {
        validateLabel.setText(e.getMessage());
      }
      buttonComposite.layout(new Control[]{validateLabel,validateButton});
    }
  }
);
  if (CloudFoundryURLNavigation.canEnableCloudFoundryNavigation(cfServer)) {
    Button cfSignup=toolkit.createButton(buttonComposite,CloudFoundryConstants.PUBLIC_CF_SERVER_SIGNUP_LABEL,SWT.PUSH);
    cfSignup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false));
    cfSignup.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        IServer iServer=cfServer.getServer();
        if (iServer != null) {
          String signupURL=CloudFoundryBrandingExtensionPoint.getSignupURL(cfServer.getServerId(),cfServer.getUrl());
          if (signupURL != null) {
            CloudFoundryURLNavigation nav=new CloudFoundryURLNavigation(signupURL);
            nav.navigate();
          }
        }
      }
    }
);
  }
  toolkit.paintBordersFor(topComposite);
  section.setExpanded(true);
  ServerEventHandler.getDefault().addServerListener(this);
}","@Override public void createSection(Composite parent){
  super.createSection(parent);
  FormToolkit toolkit=getFormToolkit(parent.getDisplay());
  Section section=toolkit.createSection(parent,ExpandableComposite.TWISTIE | ExpandableComposite.TITLE_BAR);
  section.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  section.setText(sectionTitle);
  Composite composite=toolkit.createComposite(section);
  section.setClient(composite);
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  Composite topComposite=new Composite(composite,SWT.NONE);
  topComposite.setLayout(new GridLayout(2,false));
  topComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  Label emailLabel=toolkit.createLabel(topComposite,Messages.COMMONTXT_EMAIL_WITH_COLON,SWT.NONE);
  emailLabel.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
  emailLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false));
  emailText=toolkit.createText(topComposite,""String_Node_Str"");
  emailText.setEditable(false);
  emailText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  emailText.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER);
  if (cfServer.getUsername() != null) {
    emailText.setText(cfServer.getUsername());
  }
  emailText.addModifyListener(new DataChangeListener(DataType.EMAIL));
  Label passwordLabel=toolkit.createLabel(topComposite,Messages.COMMONTXT_PW,SWT.NONE);
  passwordLabel.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
  passwordLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false));
  passwordText=toolkit.createText(topComposite,""String_Node_Str"",SWT.PASSWORD);
  passwordText.setEditable(false);
  passwordText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  passwordText.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER);
  if (cfServer.getPassword() != null) {
    passwordText.setText(cfServer.getPassword());
  }
  passwordText.addModifyListener(new DataChangeListener(DataType.PASSWORD));
  Label label=toolkit.createLabel(topComposite,Messages.COMMONTXT_URL);
  label.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
  label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false));
  urlText=toolkit.createText(topComposite,""String_Node_Str"",SWT.NONE);
  urlText.setEditable(false);
  urlText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  urlText.setData(FormToolkit.KEY_DRAW_BORDER,Boolean.FALSE);
  if (cfServer.getUrl() != null) {
    urlText.setText(CloudUiUtil.getDisplayTextFromUrl(cfServer.getUrl(),cfServer.getServer().getServerType().getId()));
  }
  Label orgLabel=toolkit.createLabel(topComposite,Messages.CloudFoundryAccountSection_LABEL_ORG,SWT.NONE);
  orgLabel.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
  orgLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false));
  orgText=toolkit.createText(topComposite,""String_Node_Str"",SWT.NONE);
  orgText.setEditable(false);
  orgText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  orgText.setData(FormToolkit.KEY_DRAW_BORDER,Boolean.FALSE);
  if (cfServer.getCloudFoundrySpace() != null && cfServer.getCloudFoundrySpace().getOrgName() != null) {
    orgText.setText(cfServer.getCloudFoundrySpace().getOrgName());
  }
  Label spaceLabel=toolkit.createLabel(topComposite,Messages.CloudFoundryAccountSection_LABEL_SPACE,SWT.NONE);
  spaceLabel.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
  spaceLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false));
  spaceText=toolkit.createText(topComposite,""String_Node_Str"",SWT.NONE);
  spaceText.setEditable(false);
  spaceText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  spaceText.setData(FormToolkit.KEY_DRAW_BORDER,Boolean.FALSE);
  if (cfServer.getCloudFoundrySpace() != null && cfServer.getCloudFoundrySpace().getSpaceName() != null) {
    spaceText.setText(cfServer.getCloudFoundrySpace().getSpaceName());
  }
  final Composite buttonComposite=toolkit.createComposite(composite);
  buttonComposite.setLayout(new GridLayout(4,false));
  GridDataFactory.fillDefaults().align(SWT.END,SWT.FILL).grab(true,false).applyTo(buttonComposite);
  final Composite validateComposite=toolkit.createComposite(composite);
  validateComposite.setLayout(new GridLayout(1,false));
  validateComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  validateLabel=toolkit.createLabel(validateComposite,""String_Node_Str"",SWT.NONE);
  validateLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
  createCloneServerArea(buttonComposite,toolkit);
  final Button changePasswordButton=toolkit.createButton(buttonComposite,Messages.CloudFoundryAccountSection_BUTTON_CHANGE_PW,SWT.PUSH);
  changePasswordButton.setEnabled(false);
  changePasswordButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false));
  changePasswordButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (server.isDirty()) {
        boolean confirm=MessageDialog.openQuestion(getShell(),Messages.CloudFoundryAccountSection_DIALOG_UNSAVE_TITLE,Messages.CloudFoundryAccountSection_DIALOG_UNSAVE_BODY);
        if (!confirm) {
          return;
        }
      }
      UpdatePasswordDialog dialog=new UpdatePasswordDialog(getShell(),cfServer.getUsername());
      if (dialog.open() == IDialogConstants.OK_ID) {
        final String newPassword=dialog.getPassword();
        String errorMsg=CloudUiUtil.updatePassword(newPassword,cfServer,server);
        if (errorMsg != null) {
          validateLabel.setText(errorMsg);
          validateLabel.setForeground(validateLabel.getDisplay().getSystemColor(SWT.COLOR_RED));
        }
 else {
          validateLabel.setText(Messages.CloudFoundryAccountSection_LABEL_PW_CHANGED);
          passwordText.setText(newPassword);
        }
      }
    }
  }
);
  final Button validateButton=toolkit.createButton(buttonComposite,Messages.CloudFoundryAccountSection_BUTTON_VALIDATE_ACCOUNT,SWT.PUSH);
  validateButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false));
  validateButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      final String url=cfServer.getUrl();
      final String userName=emailText.getText();
      final String password=passwordText.getText();
      final String org=orgText.getText();
      final String space=spaceText.getText();
      try {
        CloudUiUtil.validateCredentials(userName,password,url,false,cfServer.getSelfSignedCertificate(),null);
        if (org != null && space != null) {
          validateLabel.setText(Messages.VALID_ACCOUNT);
          validateLabel.setForeground(validateLabel.getDisplay().getSystemColor(SWT.COLOR_BLACK));
        }
 else {
          String errorMsg=null;
          if (org == null) {
            errorMsg=Messages.ERROR_INVALID_ORG;
          }
 else           if (space == null) {
            errorMsg=Messages.ERROR_INVALID_SPACE;
          }
          validateLabel.setText(errorMsg);
          validateLabel.setForeground(validateLabel.getDisplay().getSystemColor(SWT.COLOR_RED));
        }
      }
 catch (      CoreException e) {
        validateLabel.setText(e.getMessage());
      }
      buttonComposite.layout(new Control[]{validateButton});
      validateComposite.layout(new Control[]{validateLabel});
    }
  }
);
  if (CloudFoundryURLNavigation.canEnableCloudFoundryNavigation(cfServer)) {
    Button cfSignup=toolkit.createButton(buttonComposite,CloudFoundryConstants.PUBLIC_CF_SERVER_SIGNUP_LABEL,SWT.PUSH);
    cfSignup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false));
    cfSignup.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        IServer iServer=cfServer.getServer();
        if (iServer != null) {
          String signupURL=CloudFoundryBrandingExtensionPoint.getSignupURL(cfServer.getServerId(),cfServer.getUrl());
          if (signupURL != null) {
            CloudFoundryURLNavigation nav=new CloudFoundryURLNavigation(signupURL);
            nav.navigate();
          }
        }
      }
    }
);
  }
  toolkit.paintBordersFor(topComposite);
  section.setExpanded(true);
  ServerEventHandler.getDefault().addServerListener(this);
}",0.9949964260185848
10650,"public IStatus isValid(String url){
  String errorMessage=null;
  if (ValueValidationUtil.isEmpty(url)) {
    errorMessage=EMPTY_URL_ERROR;
  }
 else   if (new URLNameValidation(url).hasInvalidCharacters()) {
    errorMessage=INVALID_CHARACTERS_ERROR;
  }
  IStatus status=errorMessage != null ? CloudFoundryPlugin.getErrorStatus(errorMessage) : Status.OK_STATUS;
  return status;
}","public IStatus isValid(String url){
  String errorMessage=null;
  if (ValueValidationUtil.isEmpty(url)) {
    errorMessage=Messages.EMPTY_URL_ERROR;
  }
 else   if (new URLNameValidation(url).hasInvalidCharacters()) {
    errorMessage=Messages.INVALID_CHARACTERS_ERROR;
  }
  IStatus status=errorMessage != null ? CloudFoundryPlugin.getErrorStatus(errorMessage) : Status.OK_STATUS;
  return status;
}",0.9769820971867008
10651,"@Override public boolean requiresURL(CloudFoundryApplicationModule appModule){
  IJavaProject project=CloudFoundryProjectUtil.getJavaProject(appModule);
  return JavaCloudFoundryArchiver.isBootProject(project);
}","public boolean requiresURL(){
  return false;
}",0.3474903474903475
10652,"public CloudFoundryDeploymentWizardPage(CloudFoundryServer server,CloudFoundryApplicationModule module,ApplicationWizardDescriptor descriptor,ApplicationUrlLookupService urlLookup,ApplicationWizardDelegate wizardDelegate){
  super(""String_Node_Str"",null,null);
  this.server=server;
  this.module=module;
  this.descriptor=descriptor;
  this.serverTypeId=module.getServerTypeId();
  urlPart=createUrlPart(urlLookup);
  urlPart.addPartChangeListener(this);
}","public CloudFoundryDeploymentWizardPage(CloudFoundryServer server,CloudFoundryApplicationModule module,ApplicationWizardDescriptor descriptor,ApplicationUrlLookupService urlLookup,ApplicationWizardDelegate wizardDelegate){
  super(""String_Node_Str"",null,null);
  this.server=server;
  this.module=module;
  this.descriptor=descriptor;
  this.serverTypeId=module.getServerTypeId();
  urlPart=createUrlPart(urlLookup);
  urlPart.addPartChangeListener(this);
  this.wizardDelegate=wizardDelegate;
}",0.9600840336134454
10653,"protected boolean requiresUrl(){
  return !(getWizard() instanceof CloudFoundryApplicationWizard) || ((CloudFoundryApplicationWizard)getWizard()).requiresUrl();
}","protected boolean requiresUrl(){
  return wizardDelegate == null || wizardDelegate.getApplicationDelegate() == null || wizardDelegate.getApplicationDelegate().requiresURL();
}",0.5816023738872403
10654,"protected void updateApplicationURLFromAppName(){
  if (requiresUrl()) {
    String appName=descriptor.getDeploymentInfo().getDeploymentName();
    urlPart.setSubdomain(appName);
  }
}","protected void updateApplicationURLFromAppName(){
  if (shouldSetDefaultUrl()) {
    String appName=descriptor.getDeploymentInfo().getDeploymentName();
    urlPart.setSubdomain(appName);
  }
}",0.946808510638298
10655,"public boolean requiresURL(){
  IModule localModule=applicationModule.getLocalModule();
  if (localModule == null) {
    return true;
  }
  AbstractApplicationDelegate delegate=ApplicationRegistry.getApplicationDelegate(localModule);
  if (delegate == null) {
    return true;
  }
  return ApplicationRegistry.requiresURL(delegate,applicationModule);
}","public boolean requiresURL(){
  IModule localModule=applicationModule.getLocalModule();
  if (localModule == null) {
    return true;
  }
  AbstractApplicationDelegate delegate=ApplicationRegistry.getApplicationDelegate(localModule);
  return delegate == null || delegate.requiresURL();
}",0.790625
10656,"@Override public boolean performDrop(final Object data){
  final String jobName=""String_Node_Str"";
  UIJob job=new UIJob(jobName){
    @Override public IStatus runInUIThread(    IProgressMonitor monitor){
      if (data instanceof IStructuredSelection) {
        Object modObj=((IStructuredSelection)data).getFirstElement();
        IProject prj=null;
        if (modObj instanceof IProject) {
          prj=(IProject)modObj;
        }
 else         if (modObj instanceof IJavaProject) {
          prj=((IJavaProject)modObj).getProject();
        }
        if (prj != null) {
          final IProject project=prj;
          final CloudFoundryServer cloudServer=(CloudFoundryServer)editorPage.getServer().getOriginal().loadAdapter(CloudFoundryServer.class,monitor);
          if (cloudServer != null) {
            ApplicationViewersDropAdapter.super.performDrop(data);
            Job job=new Job(jobName){
              @Override protected IStatus run(              IProgressMonitor monitor){
                cloudServer.getBehaviour().publishAdd(project.getName(),monitor);
                return Status.OK_STATUS;
              }
            }
;
            job.setPriority(Job.INTERACTIVE);
            job.schedule();
            return Status.OK_STATUS;
          }
        }
      }
      return Status.CANCEL_STATUS;
    }
  }
;
  job.schedule();
  return true;
}","@Override public boolean performDrop(final Object data){
  final String jobName=""String_Node_Str"";
  UIJob job=new UIJob(jobName){
    @Override public IStatus runInUIThread(    IProgressMonitor monitor){
      if (data instanceof IStructuredSelection) {
        Object modObj=((IStructuredSelection)data).getFirstElement();
        IProject prj=null;
        if (modObj instanceof IProject) {
          prj=(IProject)modObj;
        }
 else         if (modObj instanceof IJavaProject) {
          prj=((IJavaProject)modObj).getProject();
        }
        if (prj != null) {
          final CloudFoundryServer cloudServer=(CloudFoundryServer)editorPage.getServer().getOriginal().loadAdapter(CloudFoundryServer.class,monitor);
          if (cloudServer != null) {
            final String moduleName=prj.getName();
            if (cloudServer.getBehaviour().existCloudApplicationModule(moduleName)) {
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  MessageDialog.openError(editorPage.getSite().getShell(),""String_Node_Str"",NLS.bind(""String_Node_Str"",moduleName,""String_Node_Str""));
                }
              }
);
              return Status.CANCEL_STATUS;
            }
            ApplicationViewersDropAdapter.super.performDrop(data);
            Job job=new Job(jobName){
              @Override protected IStatus run(              IProgressMonitor monitor){
                cloudServer.getBehaviour().publishAdd(moduleName,monitor);
                return Status.OK_STATUS;
              }
            }
;
            job.setPriority(Job.INTERACTIVE);
            job.schedule();
            return Status.OK_STATUS;
          }
        }
      }
      return Status.CANCEL_STATUS;
    }
  }
;
  job.schedule();
  return true;
}",0.831496062992126
10657,"public static HttpProxyConfiguration getProxy(URL url){
  if (url == null || url.getProtocol() == null) {
    return null;
  }
  CloudFoundryPlugin plugin=CloudFoundryPlugin.getDefault();
  if (plugin != null) {
    IProxyService proxyService=plugin.getProxyService();
    if (proxyService != null && proxyService.isProxiesEnabled()) {
      IProxyData[] existingProxies=proxyService.getProxyData();
      if (existingProxies != null) {
        String normalisedURLProtocol=getNormalisedProtocol(url.getProtocol());
        String[] proxyDataTypes={IProxyData.HTTP_PROXY_TYPE,IProxyData.HTTPS_PROXY_TYPE,IProxyData.SOCKS_PROXY_TYPE};
        String matchedProxyData=null;
        for (        String proxyDataType : proxyDataTypes) {
          String normalised=getNormalisedProtocol(proxyDataType);
          if (normalised.equals(normalisedURLProtocol)) {
            matchedProxyData=proxyDataType;
            break;
          }
        }
        if (matchedProxyData != null) {
          for (          IProxyData data : existingProxies) {
            if (matchedProxyData.equals(data.getType())) {
              int proxyPort=data.getPort();
              String proxyHost=data.getHost();
              return proxyHost != null ? new HttpProxyConfiguration(proxyHost,proxyPort) : null;
            }
          }
        }
      }
    }
  }
  return null;
}","public static HttpProxyConfiguration getProxy(URL url){
  if (url == null || url.getProtocol() == null) {
    return null;
  }
  CloudFoundryPlugin plugin=CloudFoundryPlugin.getDefault();
  if (plugin != null) {
    IProxyService proxyService=plugin.getProxyService();
    if (proxyService != null && proxyService.isProxiesEnabled()) {
      IProxyData[] existingProxies=proxyService.getProxyData();
      if (existingProxies != null) {
        String normalisedURLProtocol=getNormalisedProtocol(url.getProtocol());
        String[] proxyDataTypes={IProxyData.HTTP_PROXY_TYPE,IProxyData.HTTPS_PROXY_TYPE,IProxyData.SOCKS_PROXY_TYPE};
        String matchedProxyData=null;
        for (        String proxyDataType : proxyDataTypes) {
          String normalised=getNormalisedProtocol(proxyDataType);
          if (normalised.equals(normalisedURLProtocol)) {
            matchedProxyData=proxyDataType;
            break;
          }
        }
        if (matchedProxyData != null) {
          for (          IProxyData data : existingProxies) {
            if (matchedProxyData.equals(data.getType())) {
              int proxyPort=data.getPort();
              String proxyHost=data.getHost();
              String user=data.getUserId();
              String password=data.getPassword();
              return proxyHost != null ? new HttpProxyConfiguration(proxyHost,proxyPort,data.isRequiresAuthentication(),user,password) : null;
            }
          }
        }
      }
    }
  }
  return null;
}",0.9511173184357542
10658,"public void addColumns(final TableViewer tableViewer){
  final Table table=tableViewer.getTable();
  table.setHeaderVisible(true);
  int columnIndex=0;
  List<String> columnProperties=new ArrayList<String>();
  TableColumn sortColumn=null;
  for (  RouteColumn clm : RouteColumn.values()) {
    TableColumn tableColumn=new TableColumn(table,SWT.NONE,columnIndex++);
    tableColumn.setText(clm.getName());
    tableColumn.setWidth(clm.getWidth());
    tableColumn.setData(clm);
    columnProperties.add(clm.getName());
    tableColumn.addSelectionListener(new ColumnSortListener(tableViewer));
    if (sortColumn == null) {
      sortColumn=tableColumn;
    }
  }
  if (sortColumn != null) {
    table.setSortColumn(sortColumn);
    table.setSortDirection(SWT.UP);
  }
  tableViewer.setColumnProperties(columnProperties.toArray(new String[0]));
}","public void addColumns(final TableViewer tableViewer){
  final Table table=tableViewer.getTable();
  table.setHeaderVisible(true);
  int columnIndex=0;
  List<String> columnProperties=new ArrayList<String>();
  TableColumn sortColumn=null;
  for (  RouteColumn clm : RouteColumn.values()) {
    TableColumn tableColumn=new TableColumn(table,SWT.NONE,columnIndex++);
    tableColumn.setText(clm.getName());
    tableColumn.setWidth(clm.getWidth());
    tableColumn.setData(clm);
    columnProperties.add(clm.getName());
    tableColumn.addSelectionListener(new ColumnSortListener(tableViewer){
      protected void refresh(){
        refreshAll();
      }
    }
);
    if (sortColumn == null) {
      sortColumn=tableColumn;
    }
  }
  if (sortColumn != null) {
    table.setSortColumn(sortColumn);
    table.setSortDirection(SWT.UP);
  }
  tableViewer.setColumnProperties(columnProperties.toArray(new String[0]));
}",0.960272417707151
10659,"public void widgetSelected(SelectionEvent e){
  if (e.widget instanceof TableColumn) {
    TableColumn selected=(TableColumn)e.widget;
    Table table=viewer.getTable();
    TableColumn current=table.getSortColumn();
    int newDirection=SWT.UP;
    if (current == selected) {
      newDirection=table.getSortDirection() == SWT.UP ? SWT.DOWN : SWT.UP;
    }
 else {
      table.setSortColumn(selected);
    }
    table.setSortDirection(newDirection);
    viewer.refresh();
  }
}","public void widgetSelected(SelectionEvent e){
  if (e.widget instanceof TableColumn) {
    TableColumn selected=(TableColumn)e.widget;
    Table table=viewer.getTable();
    TableColumn current=table.getSortColumn();
    int newDirection=SWT.UP;
    if (current == selected) {
      newDirection=table.getSortDirection() == SWT.UP ? SWT.DOWN : SWT.UP;
    }
 else {
      table.setSortColumn(selected);
    }
    table.setSortDirection(newDirection);
    refresh();
  }
}",0.9926238145416229
10660,"public synchronized void writeApplicationLogs(List<ApplicationLog> logs){
  if (logs != null) {
    for (    ApplicationLog log : logs) {
      CloudLog cloudLog=ApplicationLogConsoleStream.getCloudlog(log);
      if (cloudLog != null) {
        writeToStream(cloudLog);
      }
    }
  }
}","public synchronized void writeApplicationLogs(List<ApplicationLog> logs,CloudFoundryApplicationModule appModule,CloudFoundryServer cloudServer){
  if (logs != null) {
    for (    ApplicationLog log : logs) {
      CloudLog cloudLog=ApplicationLogConsoleStream.getCloudlog(log,appModule,cloudServer);
      if (cloudLog != null) {
        writeToStream(cloudLog);
      }
    }
  }
}",0.861812778603269
10661,"public void onMessage(ApplicationLog appLog){
  CloudLog log=getCloudlog(appLog);
  if (log != null) {
    ConsoleStream stream=getStream(log);
    if (stream != null && stream.isActive()) {
      try {
        stream.write(log);
      }
 catch (      CoreException e) {
        CloudFoundryPlugin.logError(e);
      }
    }
  }
}","@Override public void onMessage(ApplicationLog appLog){
  CloudLog log=getCloudlog(appLog,null,null);
  if (log != null) {
    try {
      write(log);
    }
 catch (    CoreException e) {
      CloudFoundryPlugin.logError(e);
    }
  }
}",0.6807760141093474
10662,"protected synchronized ConsoleStream getStream(CloudLog log){
  LogContentType type=log.getLogType();
  ConsoleStream stream=logStreams.get(type);
  if (stream == null) {
    int swtColour=-1;
    if (StandardLogContentType.STD_ERROR.equals(type)) {
      swtColour=SWT.COLOR_RED;
    }
 else     if (StandardLogContentType.STD_OUT.equals(type)) {
      swtColour=SWT.COLOR_DARK_GREEN;
    }
 else     if (StandardLogContentType.APPLICATION_LOG_UNKNOWN.equals(type)) {
      swtColour=SWT.COLOR_BLACK;
    }
    stream=swtColour > -1 ? new SingleConsoleStream(new UILogConfig(swtColour)) : null;
    if (stream != null) {
      try {
        stream.initialiseStream(console,appModule,cloudServer);
        logStreams.put(type,stream);
      }
 catch (      CoreException e) {
        CloudFoundryPlugin.logError(e);
      }
    }
  }
  return stream;
}","protected synchronized ConsoleStream getStream(CloudLog log){
  LogContentType type=log.getLogType();
  ConsoleStream stream=logStreams.get(type);
  if (stream == null) {
    int swtColour=-1;
    if (StandardLogContentType.APPLICATION_LOG_STS_ERROR.equals(type)) {
      swtColour=SWT.COLOR_RED;
    }
 else     if (StandardLogContentType.APPLICATION_LOG_STD_OUT.equals(type)) {
      swtColour=SWT.COLOR_DARK_GREEN;
    }
 else     if (StandardLogContentType.APPLICATION_LOG_UNKNOWN.equals(type)) {
      swtColour=SWT.COLOR_BLACK;
    }
    stream=swtColour > -1 ? new SingleConsoleStream(new UILogConfig(swtColour)) : null;
    if (stream != null) {
      try {
        stream.initialiseStream(console,appModule,cloudServer);
        logStreams.put(type,stream);
      }
 catch (      CoreException e) {
        CloudFoundryPlugin.logError(e);
      }
    }
  }
  return stream;
}",0.978110599078341
10663,"public static CloudLog getCloudlog(ApplicationLog appLog){
  if (appLog == null) {
    return null;
  }
  org.cloudfoundry.client.lib.domain.ApplicationLog.MessageType type=appLog.getMessageType();
  LogContentType contentType=StandardLogContentType.APPLICATION_LOG_UNKNOWN;
  if (type != null) {
switch (type) {
case STDERR:
      contentType=StandardLogContentType.STD_OUT;
    break;
case STDOUT:
  contentType=StandardLogContentType.STD_OUT;
break;
}
}
return new CloudLog(format(appLog.getMessage()),contentType);
}","public static CloudLog getCloudlog(ApplicationLog appLog,CloudFoundryApplicationModule appModule,CloudFoundryServer server){
  if (appLog == null) {
    return null;
  }
  org.cloudfoundry.client.lib.domain.ApplicationLog.MessageType type=appLog.getMessageType();
  LogContentType contentType=StandardLogContentType.APPLICATION_LOG_UNKNOWN;
  if (type != null) {
switch (type) {
case STDERR:
      contentType=StandardLogContentType.APPLICATION_LOG_STS_ERROR;
    break;
case STDOUT:
  contentType=StandardLogContentType.APPLICATION_LOG_STD_OUT;
break;
}
}
return new CloudLog(format(appLog.getMessage()),contentType,server,appModule);
}",0.7726879861711322
10664,"@Override public ConsoleStream getStream(LogContentType type){
  if (StandardLogContentType.APPLICATION_LOG.equals(type)) {
    return new ApplicationLogConsoleStream();
  }
  return null;
}","@Override public ConsoleStream getStream(LogContentType type){
  for (  LogContentType tp : SUPPORTED) {
    if (tp.equals(type)) {
      return new ApplicationLogConsoleStream();
    }
  }
  return null;
}",0.5909090909090909
10665,"@Override public LogContentType[] getSupportedTypes(){
  return new LogContentType[]{StandardLogContentType.APPLICATION_LOG};
}","@Override public LogContentType[] getSupportedTypes(){
  return SUPPORTED;
}",0.6995073891625616
10666,"public void showCloudFoundryLogs(CloudFoundryServer server,CloudFoundryApplicationModule appModule,int instanceIndex,boolean clear){
  if (appModule == null || server == null) {
    return;
  }
  ApplicationLogConsole console=getApplicationLogConsole(server,appModule,instanceIndex);
  if (console != null) {
    if (clear) {
      console.getConsole().clearConsole();
    }
    CloudFoundryServerBehaviour behaviour=server.getBehaviour();
    List<ApplicationLog> logs=behaviour.getRecentApplicationLogs(appModule.getDeployedApplicationName());
    console.writeApplicationLogs(logs);
  }
}","public void showCloudFoundryLogs(CloudFoundryServer server,CloudFoundryApplicationModule appModule,int instanceIndex,boolean clear){
  if (appModule == null || server == null) {
    return;
  }
  ApplicationLogConsole console=getApplicationLogConsole(server,appModule,instanceIndex);
  if (console != null) {
    if (clear) {
      console.getConsole().clearConsole();
    }
    CloudFoundryServerBehaviour behaviour=server.getBehaviour();
    List<ApplicationLog> logs=behaviour.getRecentApplicationLogs(appModule.getDeployedApplicationName());
    console.writeApplicationLogs(logs,appModule,server);
  }
}",0.9858215179316095
10667,"/** 
 * Given space selection, determine if it is valid. For example, a user wishes to create a server instance to the selected cloudSpace, if the cloud space is valid, return  {@link org.eclipse.core.runtime.Status#OK_STATUS}.
 * @param selectionObj a potential space selection.
 * @return if valid, return{@link org.eclipse.core.runtime.Status#OK_STATUS}. Otherwise return appropriate error status. Must not be null.
 */
public IStatus validateSpaceSelection(CloudSpace selectedCloudSpace){
  String errorMessage=null;
  if (selectedCloudSpace == null) {
    errorMessage=Messages.ERROR_NO_CLOUD_SPACE_SELECTED;
  }
 else {
    List<CloudFoundryServer> cloudServers=CloudServerUtil.getCloudServers();
    if (cloudServers != null) {
      for (      CloudFoundryServer cloudServer : cloudServers) {
        if (matchesExisting(selectedCloudSpace,cloudServer.getCloudFoundrySpace())) {
          errorMessage=NLS.bind(Messages.ERROR_SERVER_INSTANCE_CLOUD_SPACE_EXISTS,cloudServer.getServer().getName(),selectedCloudSpace.getName());
          break;
        }
      }
    }
  }
  return (errorMessage != null) ? CloudFoundryPlugin.getErrorStatus(errorMessage) : Status.OK_STATUS;
}","/** 
 * Given space selection, determine if it is valid. For example, a user wishes to create a server instance to the selected cloudSpace, if the cloud space is valid, return  {@link org.eclipse.core.runtime.Status#OK_STATUS}.
 * @param selectionObj a potential space selection.
 * @return if valid, return{@link org.eclipse.core.runtime.Status#OK_STATUS}. Otherwise return appropriate error status. Must not be null.
 */
public IStatus validateSpaceSelection(CloudSpace selectedCloudSpace){
  return validateSpaceSelection(null,selectedCloudSpace);
}",0.5974625144175317
10668,"@Override public Object getAdapter(Class clazz){
  if (clazz.equals(CloudFoundryServer.class)) {
    return cloudServer;
  }
 else   if (clazz.equals(CloudFoundryApplicationModule.class)) {
    return appModule;
  }
  return null;
}","public Object getAdapter(Class clazz){
  if (clazz.equals(CloudFoundryServer.class)) {
    return cloudServer;
  }
 else   if (clazz.equals(CloudFoundryApplicationModule.class)) {
    return appModule;
  }
  return null;
}",0.9779735682819384
10669,"/** 
 * Will fetch the latest list of cloud applications from the server, and update the local module mappings accordingly.
 * @param cloudServer
 * @param monitor
 * @return true if refresh was performed. False otherwise.
 */
@Override protected void initialize(IProgressMonitor monitor){
  super.initialize(monitor);
  getServer().addServerListener(serverListener,ServerEvent.SERVER_CHANGE);
  try {
    refreshHandler=new RefreshHandler(getCloudFoundryServer());
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.logError(Messages.ERROR_INITIALISE_REFRESH_NO_SERVER);
  }
}","/** 
 * Will fetch the latest list of cloud applications from the server, and update the local module mappings accordingly.
 * @param cloudServer
 * @param monitor
 * @return true if refresh was performed. False otherwise.
 */
@Override protected void initialize(IProgressMonitor monitor){
  super.initialize(monitor);
  getServer().addServerListener(serverListener,ServerEvent.SERVER_CHANGE);
  try {
    refreshHandler=new RefreshHandler(getCloudFoundryServer());
    refreshModules(monitor);
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.logError(Messages.ERROR_INITIALISE_REFRESH_NO_SERVER);
  }
}",0.9756915339480302
10670,"public void run(IProgressMonitor monitor) throws CoreException {
  behaviour.stopRefreshModules();
  performOperation(monitor);
  behaviour.refreshModules(monitor);
}","public void run(IProgressMonitor monitor) throws CoreException {
  performOperation(monitor);
  refresh(monitor);
}",0.8185053380782918
10671,"/** 
 * Will fetch the latest list of cloud applications from the server, and update the local module mappings accordingly.
 * @param cloudServer
 * @param monitor
 * @return true if refresh was performed. False otherwise.
 */
@Override protected void initialize(IProgressMonitor monitor){
  super.initialize(monitor);
  getServer().addServerListener(serverListener,ServerEvent.SERVER_CHANGE);
  try {
    refreshHandler=new RefreshHandler(getCloudFoundryServer());
    refreshModules(monitor);
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.logError(Messages.ERROR_INITIALISE_REFRESH_NO_SERVER);
  }
}","/** 
 * Will fetch the latest list of cloud applications from the server, and update the local module mappings accordingly.
 * @param cloudServer
 * @param monitor
 * @return true if refresh was performed. False otherwise.
 */
@Override protected void initialize(IProgressMonitor monitor){
  super.initialize(monitor);
  getServer().addServerListener(serverListener,ServerEvent.SERVER_CHANGE);
  try {
    refreshHandler=new RefreshHandler(getCloudFoundryServer());
    Job job=new Job(NLS.bind(Messages.REFRESHING_MODULES,getServer().getName())){
      @Override protected IStatus run(      IProgressMonitor monitor){
        refreshModules(monitor);
        return Status.OK_STATUS;
      }
    }
;
    job.setPriority(Job.INTERACTIVE);
    job.schedule();
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.logError(Messages.ERROR_INITIALISE_REFRESH_NO_SERVER);
  }
}",0.8223418573351279
10672,"@Override protected IStatus run(IProgressMonitor monitor){
  closeCaldecottTunnels(monitor);
  return Status.OK_STATUS;
}","@Override protected IStatus run(IProgressMonitor monitor){
  refreshModules(monitor);
  return Status.OK_STATUS;
}",0.8765957446808511
10673,"public void setInput(){
  if (cloudSpaceServerDelegate != null && orgsSpacesViewer != null && !orgsSpacesViewer.getTree().isDisposed()) {
    List<CloudOrganization> orgInput=cloudSpaceServerDelegate.getCurrentSpacesDescriptor() != null ? cloudSpaceServerDelegate.getCurrentSpacesDescriptor().getOrgsAndSpaces().getOrgs() : null;
    if (orgInput == null) {
      orgInput=new ArrayList<CloudOrganization>();
    }
    CloudOrganization[] organizationInput=orgInput.toArray(new CloudOrganization[orgInput.size()]);
    orgsSpacesViewer.setInput(organizationInput);
    orgsSpacesViewer.setExpandedElements(organizationInput);
    CloudSpace selectedSpace=cloudSpaceServerDelegate.getCurrentCloudSpace();
    if (selectedSpace == null) {
      selectedSpace=cloudSpaceServerDelegate.getSpaceWithNoServerInstance();
    }
    if (setSpaceSelection(selectedSpace)) {
      setSelectionInViewer(selectedSpace);
    }
    if (orgInput.isEmpty()) {
      notifyStatusChange(CloudFoundryPlugin.getStatus(""String_Node_Str"",IStatus.INFO));
    }
 else {
      notifyStatusChange(CloudFoundryPlugin.getStatus(DEFAULT_DESCRIPTION,IStatus.OK));
    }
  }
}","public void setInput(){
  if (cloudSpaceServerDelegate != null && orgsSpacesViewer != null && !orgsSpacesViewer.getTree().isDisposed()) {
    List<CloudOrganization> orgInput=cloudSpaceServerDelegate.getCurrentSpacesDescriptor() != null ? cloudSpaceServerDelegate.getCurrentSpacesDescriptor().getOrgsAndSpaces().getOrgs() : null;
    if (orgInput == null) {
      orgInput=new ArrayList<CloudOrganization>();
    }
    CloudOrganization[] organizationInput=orgInput.toArray(new CloudOrganization[orgInput.size()]);
    orgsSpacesViewer.setInput(organizationInput);
    orgsSpacesViewer.setExpandedElements(organizationInput);
    CloudSpace selectedSpace=cloudSpaceServerDelegate.getCurrentCloudSpace();
    if (selectedSpace == null) {
      selectedSpace=cloudSpaceServerDelegate.getSpaceWithNoServerInstance();
    }
    if (setSpaceSelection(selectedSpace)) {
      setSelectionInViewer(selectedSpace);
      notifyStatusChange(CloudFoundryPlugin.getStatus(DEFAULT_DESCRIPTION,IStatus.OK));
    }
 else {
      if (orgInput.isEmpty()) {
        notifyStatusChange(CloudFoundryPlugin.getErrorStatus(Messages.ERROR_CHECK_CONNECTION_NO_SPACES));
      }
 else       if (selectedSpace == null) {
        notifyStatusChange(CloudFoundryPlugin.getErrorStatus(Messages.ERROR_ALL_SPACES_ASSOCIATED_SERVER_INSTANCES));
      }
    }
  }
}",0.8122729107791683
10674,"public Control createPart(Composite parent){
  Composite tableArea=new Composite(parent,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(1).equalWidth(true).applyTo(tableArea);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(tableArea);
  Composite orgTableComposite=new Composite(tableArea,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(1).applyTo(orgTableComposite);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(orgTableComposite);
  Label orgLabel=new Label(orgTableComposite,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(orgLabel);
  orgLabel.setText(""String_Node_Str"");
  Tree orgTable=new Tree(orgTableComposite,SWT.BORDER | SWT.SINGLE);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(orgTable);
  orgsSpacesViewer=new TreeViewer(orgTable);
  orgsSpacesViewer.setContentProvider(new TableContentProvider());
  orgsSpacesViewer.setLabelProvider(new SpacesLabelProvider());
  orgsSpacesViewer.setSorter(new SpacesSorter());
  orgsSpacesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      refresh();
    }
  }
);
  setInput();
  return tableArea;
}","public Control createPart(Composite parent){
  Composite tableArea=new Composite(parent,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(1).equalWidth(true).applyTo(tableArea);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(tableArea);
  Composite orgTableComposite=new Composite(tableArea,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(1).applyTo(orgTableComposite);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(orgTableComposite);
  Label orgLabel=new Label(orgTableComposite,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(orgLabel);
  orgLabel.setText(""String_Node_Str"");
  Tree orgTable=new Tree(orgTableComposite,SWT.BORDER | SWT.SINGLE);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(orgTable);
  orgsSpacesViewer=new TreeViewer(orgTable);
  orgsSpacesViewer.setContentProvider(new TableContentProvider());
  orgsSpacesViewer.setLabelProvider(new SpacesLabelProvider());
  orgsSpacesViewer.setSorter(new SpacesSorter());
  orgsSpacesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      refresh();
    }
  }
);
  return tableArea;
}",0.9941956882255388
10675,"public boolean isComplete(){
  if (validator == null) {
    return false;
  }
  ValidationStatus status=validator.getPreviousValidationStatus();
  return status != null && status.getStatus().getSeverity() != IStatus.ERROR && status.getValidationType() == ServerCredentialsValidationStatics.EVENT_SPACE_VALID;
}","public boolean isComplete(){
  if (validator == null) {
    return false;
  }
  ValidationStatus status=validator.getPreviousValidationStatus();
  return status != null && status.getStatus().isOK();
}",0.7647058823529411
10676,"/** 
 * Force notify that the spaces descriptor has changed. Since the descriptor is assumed to be changed, a new default space obtained from that descriptor will be set in the server
 */
protected void internalDescriptorChanged(){
  if (spacesDescriptor != null) {
    CloudSpace defaultCloudSpace=spacesDescriptor.getOrgsAndSpaces().getDefaultCloudSpace();
    setSelectedSpace(defaultCloudSpace);
  }
 else {
    setSelectedSpace(null);
  }
}","/** 
 * Invoked if the descriptor containing list of orgs and spaces has changed. If available, a default space will be set in the server
 */
protected void internalDescriptorChanged(){
  if (spacesDescriptor != null) {
    CloudSpace defaultCloudSpace=getSpaceWithNoServerInstance();
    setSelectedSpace(defaultCloudSpace);
  }
 else {
    setSelectedSpace(null);
  }
}",0.4852941176470588
10677,"protected void refresh(){
  if (orgsSpacesViewer != null) {
    Tree tree=orgsSpacesViewer.getTree();
    TreeItem[] selectedItems=tree.getSelection();
    if (selectedItems != null && selectedItems.length > 0) {
      Object selectedObj=selectedItems[0].getData();
      if (selectedObj instanceof CloudSpace) {
        setSpaceSelection((CloudSpace)selectedObj);
      }
 else       if (selectedObj instanceof CloudOrganization) {
        setSpaceSelection(null);
      }
    }
  }
}","protected void refresh(){
  if (orgsSpacesViewer != null) {
    Tree tree=orgsSpacesViewer.getTree();
    TreeItem[] selectedItems=tree.getSelection();
    if (selectedItems != null && selectedItems.length > 0) {
      Object selectedObj=selectedItems[0].getData();
      CloudSpace selectedSpace=selectedObj instanceof CloudSpace ? (CloudSpace)selectedObj : null;
      setSpaceSelection(selectedSpace);
    }
  }
}",0.7613762486126526
10678,"public void setInput(){
  if (cloudSpaceServerDelegate != null && orgsSpacesViewer != null && !orgsSpacesViewer.getTree().isDisposed()) {
    List<CloudOrganization> orgInput=cloudSpaceServerDelegate.getCurrentSpacesDescriptor() != null ? cloudSpaceServerDelegate.getCurrentSpacesDescriptor().getOrgsAndSpaces().getOrgs() : null;
    if (orgInput == null) {
      orgInput=new ArrayList<CloudOrganization>();
    }
    CloudOrganization[] organizationInput=orgInput.toArray(new CloudOrganization[orgInput.size()]);
    orgsSpacesViewer.setInput(organizationInput);
    orgsSpacesViewer.setExpandedElements(organizationInput);
    CloudSpace selectedSpace=cloudSpaceServerDelegate.getCurrentCloudSpace();
    if (selectedSpace == null) {
      selectedSpace=cloudSpaceServerDelegate.getCurrentSpacesDescriptor() != null ? cloudSpaceServerDelegate.getCurrentSpacesDescriptor().getOrgsAndSpaces().getDefaultCloudSpace() : null;
    }
    if (selectedSpace != null) {
      setSpaceSelection(selectedSpace);
      setSelectionInViewer(selectedSpace);
    }
    if (orgInput.isEmpty()) {
      notifyStatusChange(CloudFoundryPlugin.getStatus(""String_Node_Str"",IStatus.INFO));
    }
 else {
      notifyStatusChange(CloudFoundryPlugin.getStatus(DEFAULT_DESCRIPTION,IStatus.OK));
    }
  }
}","public void setInput(){
  if (cloudSpaceServerDelegate != null && orgsSpacesViewer != null && !orgsSpacesViewer.getTree().isDisposed()) {
    List<CloudOrganization> orgInput=cloudSpaceServerDelegate.getCurrentSpacesDescriptor() != null ? cloudSpaceServerDelegate.getCurrentSpacesDescriptor().getOrgsAndSpaces().getOrgs() : null;
    if (orgInput == null) {
      orgInput=new ArrayList<CloudOrganization>();
    }
    CloudOrganization[] organizationInput=orgInput.toArray(new CloudOrganization[orgInput.size()]);
    orgsSpacesViewer.setInput(organizationInput);
    orgsSpacesViewer.setExpandedElements(organizationInput);
    CloudSpace selectedSpace=cloudSpaceServerDelegate.getCurrentCloudSpace();
    if (selectedSpace == null) {
      selectedSpace=cloudSpaceServerDelegate.getSpaceWithNoServerInstance();
    }
    if (setSpaceSelection(selectedSpace)) {
      setSelectionInViewer(selectedSpace);
    }
    if (orgInput.isEmpty()) {
      notifyStatusChange(CloudFoundryPlugin.getStatus(""String_Node_Str"",IStatus.INFO));
    }
 else {
      notifyStatusChange(CloudFoundryPlugin.getStatus(DEFAULT_DESCRIPTION,IStatus.OK));
    }
  }
}",0.886326194398682
10679,"protected void setSpaceSelection(CloudSpace selectedSpace){
  if (cloudSpaceServerDelegate != null) {
    cloudSpaceServerDelegate.setSelectedSpace(selectedSpace);
    String errorMessage=selectedSpace == null ? ""String_Node_Str"" : null;
    IStatus status=errorMessage != null ? CloudFoundryPlugin.getErrorStatus(errorMessage) : Status.OK_STATUS;
    notifyStatusChange(selectedSpace,status);
  }
}","/** 
 * @param selectedSpace
 * @return true if the specified space was set. False otherwise.
 */
protected boolean setSpaceSelection(CloudSpace selectedSpace){
  boolean set=false;
  if (cloudSpaceServerDelegate != null) {
    IStatus status=cloudSpaceServerDelegate.validateSpaceSelection(selectedSpace);
    if (status.isOK()) {
      cloudSpaceServerDelegate.setSelectedSpace(selectedSpace);
      set=true;
    }
 else {
      cloudSpaceServerDelegate.setSelectedSpace(null);
    }
    notifyStatusChange(selectedSpace,status,ServerCredentialsValidationStatics.EVENT_SPACE_CHANGED);
  }
  return set;
}",0.3856858846918489
10680,"public int getValidationType(){
  return validationType;
}","/** 
 * @return one of the following:{@link ServerCredentialsValidationStatics#EVENT_CREDENTIALS_FILLED},  {@link ServerCredentialsValidationStatics#EVENT_NONE},  {@link ServerCredentialsValidationStatics#EVENT_SELF_SIGNED_ERROR},  {@link ServerCredentialsValidationStatics#EVENT_SPACE_CHANGED},  {@link ServerCredentialsValidationStatics#EVENT_SPACE_VALID}
 */
public int getValidationType(){
  return validationType;
}",0.2426778242677824
10681,"public void doRun(final CloudFoundryServer cloudServer,CloudFoundryApplicationModule appModule,IAction action){
  final Shell shell=activePart != null && activePart.getSite() != null ? activePart.getSite().getShell() : CloudUiUtil.getShell();
  if (shell != null) {
    UIJob job=new UIJob(getJobName()){
      public IStatus runInUIThread(      IProgressMonitor monitor){
        OrgsAndSpacesWizard wizard=new OrgsAndSpacesWizard(cloudServer);
        WizardDialog dialog=new WizardDialog(shell,wizard);
        dialog.open();
        return Status.OK_STATUS;
      }
    }
;
    job.schedule();
  }
 else {
    CloudFoundryPlugin.logError(""String_Node_Str"");
  }
}","public void doRun(final CloudFoundryServer cloudServer,CloudFoundryApplicationModule appModule,IAction action){
  final Shell shell=activePart != null && activePart.getSite() != null ? activePart.getSite().getShell() : CloudUiUtil.getShell();
  if (shell != null) {
    UIJob job=new UIJob(getJobName()){
      public IStatus runInUIThread(      IProgressMonitor monitor){
        OrgsAndSpacesWizard wizard=new OrgsAndSpacesWizard(cloudServer);
        WizardDialog dialog=new WizardDialog(shell,wizard);
        dialog.open();
        return Status.OK_STATUS;
      }
    }
;
    job.setSystem(true);
    job.schedule();
  }
 else {
    CloudFoundryPlugin.logError(""String_Node_Str"");
  }
}",0.9816041206769685
10682,"@Override public Composite createComposite(Composite parent,IWizardHandle wizardHandle){
  this.wizardHandle=wizardHandle;
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  listener=new WizardFragmentChangeListener(wizardHandle);
  spacesPart=new CloudSpacesSelectionPart(validator.getSpaceDelegate(),listener,cloudServer,wizardHandle);
  spacesPart.createPart(composite);
  return composite;
}","@Override public Composite createComposite(Composite parent,IWizardHandle wizardHandle){
  this.wizardHandle=wizardHandle;
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  listener=new WizardFragmentChangeListener(wizardHandle){
    @Override public void handleChange(    PartChangeEvent event){
      if (validator != null && event.getType() == ServerCredentialsValidationStatics.EVENT_SPACE_CHANGED) {
        validator.localValidation();
      }
      super.handleChange(event);
    }
  }
;
  spacesPart=new CloudSpacesSelectionPart(validator.getSpaceDelegate(),listener,cloudServer,wizardHandle);
  spacesPart.createPart(composite);
  return composite;
}",0.7195027195027195
10683,"public boolean isComplete(){
  return validator != null && validator.areCredentialsFilled();
}","public boolean isComplete(){
  if (validator == null) {
    return false;
  }
  ValidationStatus status=validator.getPreviousValidationStatus();
  return status != null && status.getStatus().getSeverity() != IStatus.ERROR && status.getValidationType() == ServerCredentialsValidationStatics.EVENT_SPACE_VALID;
}",0.2821782178217821
10684,"@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (visible) {
    UIJob job=new UIJob(""String_Node_Str""){
      @Override public IStatus runInUIThread(      IProgressMonitor monitor){
        updateSpacesDescriptor();
        refreshListOfSpaces();
        CloudSpace defaultSpace=cloudServerSpaceDelegate.getCurrentSpacesDescriptor() != null ? cloudServerSpaceDelegate.getCurrentSpacesDescriptor().getOrgsAndSpaces().getDefaultCloudSpace() : null;
        if (defaultSpace != null) {
          setServerNameInUI(defaultSpace.getName());
        }
        return Status.OK_STATUS;
      }
    }
;
    job.setSystem(true);
    job.schedule();
  }
}","@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (visible) {
    UIJob job=new UIJob(""String_Node_Str""){
      @Override public IStatus runInUIThread(      IProgressMonitor monitor){
        updateSpacesDescriptor();
        refreshListOfSpaces();
        return Status.OK_STATUS;
      }
    }
;
    job.setSystem(true);
    job.schedule();
  }
}",0.7192488262910798
10685,"@Override public IStatus runInUIThread(IProgressMonitor monitor){
  updateSpacesDescriptor();
  refreshListOfSpaces();
  CloudSpace defaultSpace=cloudServerSpaceDelegate.getCurrentSpacesDescriptor() != null ? cloudServerSpaceDelegate.getCurrentSpacesDescriptor().getOrgsAndSpaces().getDefaultCloudSpace() : null;
  if (defaultSpace != null) {
    setServerNameInUI(defaultSpace.getName());
  }
  return Status.OK_STATUS;
}","@Override public IStatus runInUIThread(IProgressMonitor monitor){
  updateSpacesDescriptor();
  refreshListOfSpaces();
  return Status.OK_STATUS;
}",0.5166959578207382
10686,"public void setSelfSignedCertificate(boolean isSelfSigned){
  try {
    this.isSelfSigned=isSelfSigned;
    new SelfSignedStore(getUrl()).setSelfSignedCert(isSelfSigned);
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.logError(e);
  }
}","/** 
 * Convinience method to set signed certificate for server URLs that do not yet have a server instance (e.g. when managing server URLs)
 * @param isSelfSigned true if server uses self-signed certificate
 * @param cloudServerURL non-null Cloud Foundry server URL
 */
public static void setSelfSignedCertificate(boolean isSelfSigned,String cloudServerURL){
  try {
    new SelfSignedStore(cloudServerURL).setSelfSignedCert(isSelfSigned);
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.logError(e);
  }
}",0.531578947368421
10687,"/** 
 * @return true if server uses self-signed certificates. False otherwise,including if server preference can't be resolved.
 */
public boolean getSelfSignedCertificate(){
  try {
    if (isSelfSigned == null) {
      isSelfSigned=new SelfSignedStore(getUrl()).isSelfSignedCert();
    }
    return isSelfSigned;
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.logError(e);
  }
  return false;
}","/** 
 * @return true if server uses self-signed certificates. False otherwise,including if server preference can't be resolved.
 */
public boolean getSelfSignedCertificate(){
  try {
    return new SelfSignedStore(getUrl()).isSelfSignedCert();
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.logError(e);
  }
  return false;
}",0.8849797023004059
10688,"/** 
 * @return True if server uses self-signed certificates. False otherwise.
 * @throws CoreException if error occurred while dep
 */
public boolean isSelfSignedCert() throws CoreException {
  SelfSignedServers servers=getStoredServers();
  return servers != null && servers.getServers().containsKey(serverURL) && servers.getServers().get(serverURL);
}","/** 
 * @return True if server uses self-signed certificates. False otherwise.
 * @throws CoreException if error occurred
 */
public boolean isSelfSignedCert() throws CoreException {
  SelfSignedServers servers=getStoredServers();
  return servers != null && servers.getServers().get(serverURL) != null && servers.getServers().get(serverURL);
}",0.9541547277936964
10689,"/** 
 * @param selfSigned stores the self-signed certificate preference for thegiven server URL.
 * @throws CoreException if failed to store value.
 */
public void setSelfSignedCert(boolean selfSigned) throws CoreException {
  SelfSignedServers servers=getStoredServers();
  if (servers == null) {
    servers=new SelfSignedServers();
  }
  servers.getServers().put(serverURL,selfSigned);
  String asString=null;
  if (mapper.canSerialize(servers.getClass())) {
    try {
      asString=mapper.writeValueAsString(servers);
    }
 catch (    IOException e) {
      throw CloudErrorUtil.toCoreException(NLS.bind(Messages.ERROR_FAILED_STORE_SELF_SIGNED_PREFS,serverURL),e);
    }
  }
 else {
    throw CloudErrorUtil.toCoreException(NLS.bind(Messages.ERROR_FAILED_STORE_SELF_SIGNED_PREFS,serverURL));
  }
  if (asString != null) {
    IEclipsePreferences prefs=CloudFoundryPlugin.getDefault().getPreferences();
    prefs.put(SELF_SIGNED_PREF,asString);
    try {
      prefs.flush();
    }
 catch (    BackingStoreException e) {
      throw CloudErrorUtil.toCoreException(NLS.bind(Messages.ERROR_FAILED_STORE_SELF_SIGNED_PREFS,serverURL),e);
    }
  }
}","/** 
 * @param selfSigned stores the self-signed certificate preference for thegiven server URL.
 * @throws CoreException if failed to store value.
 */
public void setSelfSignedCert(boolean selfSigned) throws CoreException {
  SelfSignedServers servers=getStoredServers();
  if (servers == null) {
    servers=new SelfSignedServers();
  }
  if (selfSigned) {
    servers.getServers().put(serverURL,selfSigned);
  }
 else {
    servers.getServers().remove(serverURL);
  }
  String asString=null;
  if (mapper.canSerialize(servers.getClass())) {
    try {
      asString=mapper.writeValueAsString(servers);
    }
 catch (    IOException e) {
      throw CloudErrorUtil.toCoreException(NLS.bind(Messages.ERROR_FAILED_STORE_SELF_SIGNED_PREFS,serverURL),e);
    }
  }
 else {
    throw CloudErrorUtil.toCoreException(NLS.bind(Messages.ERROR_FAILED_STORE_SELF_SIGNED_PREFS,serverURL));
  }
  if (asString != null) {
    IEclipsePreferences prefs=CloudFoundryPlugin.getDefault().getPreferences();
    prefs.put(SELF_SIGNED_PREF,asString);
    try {
      prefs.flush();
    }
 catch (    BackingStoreException e) {
      throw CloudErrorUtil.toCoreException(NLS.bind(Messages.ERROR_FAILED_STORE_SELF_SIGNED_PREFS,serverURL),e);
    }
  }
}",0.9655751469353484
10690,"public String getDefaultWebAppName(String appPrefix){
  return appPrefix + '_' + getDefaultWebAppProjectName();
}","public String getDefaultWebAppName(String appPrefix){
  return appPrefix + '_' + randomPrefix+ '_'+ getDefaultWebAppProjectName();
}",0.9224489795918368
10691,"public void setup() throws CoreException {
  StsTestUtil.cleanUpProjects();
  if (server != null) {
    CloudFoundryServerBehaviour serverBehavior=getBehaviour();
    serverBehavior.deleteAllApplications(null);
    deleteAllServices();
    clearTestDomainAndRoutes();
  }
}","public void setup() throws CoreException {
  Random random=new Random(100);
  randomPrefix=Math.abs(random.nextInt());
  StsTestUtil.cleanUpProjects();
  if (server != null) {
    CloudFoundryServerBehaviour serverBehavior=getBehaviour();
    serverBehavior.deleteAllApplications(null);
    deleteAllServices();
    clearTestDomainAndRoutes();
  }
}",0.8778135048231511
10692,"/** 
 * Validates the given credentials. If an error occurred, it either returns a validation message if the error can be recognised, or throws  {@link CoreException} if error cannot be recognised.
 * @param cfServer
 * @param userName
 * @param password
 * @param urlText
 * @param displayURL
 * @param context
 * @return null if validation was successful. Error message if validationerror is recognised
 * @throws CoreException if validation failed and error type cannot bedetermined
 */
public static String validateCredentials(CloudFoundryServer cfServer,final String userName,final String password,final String urlText,final boolean displayURL,IRunnableContext context) throws CoreException {
  if (cfServer != null) {
    try {
      final boolean selfSigned=cfServer.getSelfSignedCertificate();
      ICoreRunnable coreRunner=new ICoreRunnable(){
        public void run(        IProgressMonitor monitor) throws CoreException {
          String url=urlText;
          if (displayURL) {
            url=getUrlFromDisplayText(urlText);
          }
          CloudFoundryServerBehaviour.validate(url,userName,password,selfSigned,monitor);
        }
      }
;
      if (context != null) {
        runForked(coreRunner,context);
      }
 else {
        runForked(coreRunner);
      }
      return null;
    }
 catch (    CoreException ce) {
      if (ce.getCause() instanceof ResourceAccessException && ce.getCause().getCause() instanceof javax.net.ssl.SSLPeerUnverifiedException) {
        throw CloudErrorUtil.toCoreException(ce.getCause().getCause());
      }
 else {
        String message=CloudErrorUtil.getConnectionError(ce);
        return message;
      }
    }
catch (    OperationCanceledException e) {
    }
  }
  return ""String_Node_Str"";
}","/** 
 * Validates the given credentials. If an error occurred, it either returns a validation message if the error can be recognised, or throws  {@link CoreException} if error cannot be recognised.
 * @param userName
 * @param password
 * @param urlText
 * @param displayURL
 * @param selfSigned true if its a server using self-signed certificate. Ifthis information is not known, set this to false
 * @param context
 * @return null if validation was successful. Error message if validationerror is recognised
 * @throws CoreException if validation failed and error type cannot bedetermined
 */
public static String validateCredentials(final String userName,final String password,final String urlText,final boolean displayURL,final boolean selfSigned,IRunnableContext context) throws CoreException {
  try {
    ICoreRunnable coreRunner=new ICoreRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
        String url=urlText;
        if (displayURL) {
          url=getUrlFromDisplayText(urlText);
        }
        CloudFoundryServerBehaviour.validate(url,userName,password,selfSigned,monitor);
      }
    }
;
    if (context != null) {
      runForked(coreRunner,context);
    }
 else {
      runForked(coreRunner);
    }
    return null;
  }
 catch (  CoreException ce) {
    if (ce.getCause() instanceof ResourceAccessException && ce.getCause().getCause() instanceof javax.net.ssl.SSLPeerUnverifiedException) {
      throw CloudErrorUtil.toCoreException(ce.getCause().getCause());
    }
 else {
      String message=CloudErrorUtil.getConnectionError(ce);
      return message;
    }
  }
catch (  OperationCanceledException e) {
  }
  return ""String_Node_Str"";
}",0.854251012145749
10693,"public void run(IProgressMonitor monitor) throws CoreException {
  behaviour.stopRefreshModules();
  try {
    performOperation(monitor);
  }
  finally {
    behaviour.refreshModules(monitor);
  }
}","public void run(IProgressMonitor monitor) throws CoreException {
  behaviour.stopRefreshModules();
  performOperation(monitor);
  behaviour.refreshModules(monitor);
}",0.912087912087912
10694,"protected void internalDeleteModules(final IModule[] modules,final boolean deleteServices,IProgressMonitor monitor) throws CoreException {
  final CloudFoundryServer cloudServer=getCloudFoundryServer();
  new BehaviourRequest<Void>(""String_Node_Str""){
    @Override protected Void doRun(    CloudFoundryOperations client,    SubMonitor progress) throws CoreException {
      for (      IModule module : modules) {
        final CloudFoundryApplicationModule appModule=cloudServer.getExistingCloudModule(module);
        if (appModule == null) {
          continue;
        }
        List<String> servicesToDelete=new ArrayList<String>();
        CloudApplication application=client.getApplication(appModule.getDeployedApplicationName());
        List<String> actualServices=application.getServices();
        if (actualServices != null) {
          for (          String serviceName : actualServices) {
            if (serviceName != null) {
              servicesToDelete.add(serviceName);
            }
          }
        }
        if (TunnelBehaviour.isCaldecottApp(appModule.getDeployedApplicationName())) {
          new TunnelBehaviour(cloudServer).stopAndDeleteAllTunnels(progress);
        }
        client.deleteApplication(appModule.getDeployedApplicationName());
        CloudFoundryPlugin.getCallback().stopApplicationConsole(appModule,cloudServer);
        cloudServer.removeApplication(appModule);
        appModule.setCloudApplication(null);
        if (deleteServices && !servicesToDelete.isEmpty()) {
          CloudFoundryPlugin.getCallback().deleteServices(servicesToDelete,cloudServer);
          ServerEventHandler.getDefault().fireServicesUpdated(cloudServer);
        }
      }
      return null;
    }
  }
.run(monitor);
}","protected void internalDeleteModules(final IModule[] modules,final boolean deleteServices,IProgressMonitor monitor) throws CoreException {
  final CloudFoundryServer cloudServer=getCloudFoundryServer();
  List<CloudApplication> updatedApplications=getApplications(monitor);
  for (  IModule module : modules) {
    final CloudFoundryApplicationModule appModule=cloudServer.getExistingCloudModule(module);
    if (appModule == null) {
      continue;
    }
    List<String> servicesToDelete=new ArrayList<String>();
    CloudApplication application=null;
    if (updatedApplications != null) {
      for (      CloudApplication app : updatedApplications) {
        if (app.getName().equals(appModule.getDeployedApplicationName())) {
          application=app;
          break;
        }
      }
    }
    if (application != null) {
      List<String> actualServices=application.getServices();
      if (actualServices != null) {
        for (        String serviceName : actualServices) {
          if (serviceName != null) {
            servicesToDelete.add(serviceName);
          }
        }
      }
      deleteApplication(application.getName(),monitor);
    }
    CloudFoundryPlugin.getCallback().stopApplicationConsole(appModule,cloudServer);
    cloudServer.removeApplication(appModule);
    appModule.setCloudApplication(null);
    if (deleteServices && !servicesToDelete.isEmpty()) {
      CloudFoundryPlugin.getCallback().deleteServices(servicesToDelete,cloudServer);
      ServerEventHandler.getDefault().fireServicesUpdated(cloudServer);
    }
  }
}",0.5830057453885698
10695,"@Override public IStatus run(IProgressMonitor monitor){
  if (CloudFoundryPlugin.getCallback() != null) {
    CloudFoundryPlugin.getCallback().stopApplicationConsole(appModule,server);
    CloudFoundryPlugin.getCallback().printToConsole(server,appModule,SHOWING_CONSOLE,true,false,monitor);
    CloudFoundryPlugin.getCallback().showCloudFoundryLogs(server,appModule,instanceIndex);
    return Status.OK_STATUS;
  }
 else {
    return CloudFoundryPlugin.getErrorStatus(NO_CALLBACK_UNABLE_TO_REFRESH_CONSOLE);
  }
}","@Override public IStatus run(IProgressMonitor monitor){
  if (CloudFoundryPlugin.getCallback() != null) {
    CloudFoundryPlugin.getCallback().stopApplicationConsole(appModule,server);
    CloudFoundryPlugin.getCallback().printToConsole(server,appModule,Messages.SHOWING_CONSOLE,true,false,monitor);
    CloudFoundryPlugin.getCallback().showCloudFoundryLogs(server,appModule,instanceIndex);
    return Status.OK_STATUS;
  }
 else {
    return CloudFoundryPlugin.getErrorStatus(Messages.ERROR_NO_CALLBACK_UNABLE_TO_REFRESH_CONSOLE);
  }
}",0.9771428571428572
10696,"/** 
 * Prepares an application to either be deployed, started or restarted. The main purpose to ensure that the application's deployment information is complete. If incomplete, it will prompt the user for missing information.
 * @param monitor
 * @return Cloud Foundry application mapped to the deployed WST{@link IModule}. Must not be null. If null, it indicates error, therefore throw   {@link CoreException} instead.
 * @throws CoreException if failure while preparing the application for deployment
 * @throws OperationCanceledException if the user cancelled deploying orstarting the application. The application's deployment information should not be modified in this case.
 */
public abstract void prepareForDeployment(CloudFoundryServer server,CloudFoundryApplicationModule module,IProgressMonitor monitor) throws CoreException, OperationCanceledException ;","/** 
 * Prepares an application to either be deployed, started or restarted. The main purpose to ensure that the application's deployment information is complete. If incomplete, it will prompt the user for missing information.
 * @param monitor
 * @return {@link DeploymentConfiguration} Defines local deploymentconfiguration of the application, for example which deployment mode should be used like starting an application, restarting, etc..May be null. If null, the framework will attempt to determine an appropriate deployment configuration.
 * @throws CoreException if failure while preparing the application fordeployment
 * @throws OperationCanceledException if the user cancelled deploying orstarting the application. The application's deployment information should not be modified in this case.
 */
public abstract DeploymentConfiguration prepareForDeployment(CloudFoundryServer server,CloudFoundryApplicationModule module,IProgressMonitor monitor) throws CoreException, OperationCanceledException ;",0.7339743589743589
10697,"/** 
 * Show deployed application's  Cloud Foundry log files locally.
 * @param cloudServer
 * @param cloudModule
 * @param showIndex if -1 shows the first app instance
 */
public void showCloudFoundryLogs(CloudFoundryServer cloudServer,CloudFoundryApplicationModule cloudModule,int showIndex){
}","/** 
 * Show deployed application's Cloud Foundry log files locally.
 * @param cloudServer
 * @param cloudModule
 * @param showIndex if -1 shows the first app instance
 */
public void showCloudFoundryLogs(CloudFoundryServer cloudServer,CloudFoundryApplicationModule cloudModule,int showIndex){
}",0.9983079526226736
10698,"@Override public void prepareForDeployment(CloudFoundryServer server,CloudFoundryApplicationModule module,IProgressMonitor monitor) throws CoreException {
  throw new OperationCanceledException();
}","@Override public DeploymentConfiguration prepareForDeployment(CloudFoundryServer server,CloudFoundryApplicationModule module,IProgressMonitor monitor) throws CoreException {
  throw new OperationCanceledException();
}",0.9349397590361446
10699,"public ApplicationDeploymentInfo getDefaultApplicationDeploymentInfo(CloudFoundryApplicationModule appModule,CloudFoundryServer cloudServer,IProgressMonitor monitor) throws CoreException {
  String appName=appModule.getDeployedApplicationName();
  ApplicationDeploymentInfo deploymentInfo=new ApplicationDeploymentInfo(appName);
  deploymentInfo.setMemory(CloudUtil.DEFAULT_MEMORY);
  deploymentInfo.setDeploymentMode(ApplicationAction.START);
  return deploymentInfo;
}","public ApplicationDeploymentInfo getDefaultApplicationDeploymentInfo(CloudFoundryApplicationModule appModule,CloudFoundryServer cloudServer,IProgressMonitor monitor) throws CoreException {
  String appName=appModule.getDeployedApplicationName();
  ApplicationDeploymentInfo deploymentInfo=new ApplicationDeploymentInfo(appName);
  deploymentInfo.setMemory(CloudUtil.DEFAULT_MEMORY);
  return deploymentInfo;
}",0.9306029579067122
10700,"/** 
 * Parses deployment information from a deployed Cloud Application. Returns null if the cloud application is null.
 * @param cloudApplication deployed in a CF server
 * @return Parsed deployment information, or null if Cloud Application isnull.
 */
public static ApplicationDeploymentInfo parseApplicationDeploymentInfo(CloudApplication cloudApplication){
  if (cloudApplication != null) {
    String deploymentName=cloudApplication.getName();
    ApplicationDeploymentInfo deploymentInfo=new ApplicationDeploymentInfo(deploymentName);
    deploymentInfo.setStaging(cloudApplication.getStaging());
    deploymentInfo.setMemory(cloudApplication.getMemory());
    deploymentInfo.setDeploymentMode(ApplicationAction.START);
    List<String> boundServiceNames=cloudApplication.getServices();
    if (boundServiceNames != null) {
      List<CloudService> services=new ArrayList<CloudService>();
      for (      String name : boundServiceNames) {
        if (name != null) {
          services.add(new LocalCloudService(name));
        }
      }
      deploymentInfo.setServices(services);
    }
    if (cloudApplication.getUris() != null) {
      deploymentInfo.setUris(new ArrayList<String>(cloudApplication.getUris()));
    }
    Map<String,String> envMap=cloudApplication.getEnvAsMap();
    if (envMap != null) {
      List<EnvironmentVariable> variables=new ArrayList<EnvironmentVariable>();
      for (      Entry<String,String> entry : envMap.entrySet()) {
        String varName=entry.getKey();
        if (varName != null) {
          EnvironmentVariable variable=new EnvironmentVariable();
          variable.setVariable(varName);
          variable.setValue(entry.getValue());
          variables.add(variable);
        }
      }
      deploymentInfo.setEnvVariables(variables);
    }
    return deploymentInfo;
  }
  return null;
}","/** 
 * Parses deployment information from a deployed Cloud Application. Returns null if the cloud application is null.
 * @param cloudApplication deployed in a CF server
 * @return Parsed deployment information, or null if Cloud Application isnull.
 */
public static ApplicationDeploymentInfo parseApplicationDeploymentInfo(CloudApplication cloudApplication){
  if (cloudApplication != null) {
    String deploymentName=cloudApplication.getName();
    ApplicationDeploymentInfo deploymentInfo=new ApplicationDeploymentInfo(deploymentName);
    deploymentInfo.setStaging(cloudApplication.getStaging());
    deploymentInfo.setMemory(cloudApplication.getMemory());
    List<String> boundServiceNames=cloudApplication.getServices();
    if (boundServiceNames != null) {
      List<CloudService> services=new ArrayList<CloudService>();
      for (      String name : boundServiceNames) {
        if (name != null) {
          services.add(new LocalCloudService(name));
        }
      }
      deploymentInfo.setServices(services);
    }
    if (cloudApplication.getUris() != null) {
      deploymentInfo.setUris(new ArrayList<String>(cloudApplication.getUris()));
    }
    Map<String,String> envMap=cloudApplication.getEnvAsMap();
    if (envMap != null) {
      List<EnvironmentVariable> variables=new ArrayList<EnvironmentVariable>();
      for (      Entry<String,String> entry : envMap.entrySet()) {
        String varName=entry.getKey();
        if (varName != null) {
          EnvironmentVariable variable=new EnvironmentVariable();
          variable.setVariable(varName);
          variable.setValue(entry.getValue());
          variables.add(variable);
        }
      }
      deploymentInfo.setEnvVariables(variables);
    }
    return deploymentInfo;
  }
  return null;
}",0.9826110957769804
10701,"/** 
 * Sets the values of the parameter info, if non-null, into this info. Any know mutable values (e.g. containers and arrays) are set as copies.
 */
public void setInfo(ApplicationDeploymentInfo info){
  if (info == null) {
    return;
  }
  setDeploymentMode(info.getDeploymentMode());
  setDeploymentName(info.getDeploymentName());
  setIncrementalPublish(info.isIncrementalPublish());
  setMemory(info.getMemory());
  setStaging(info.getStaging());
  setInstances(info.getInstances());
  setArchive(info.getArchive());
  if (info.getServices() != null) {
    setServices(new ArrayList<CloudService>(info.getServices()));
  }
 else {
    setServices(null);
  }
  if (info.getUris() != null) {
    setUris(new ArrayList<String>(info.getUris()));
  }
 else {
    setUris(null);
  }
  if (info.getEnvVariables() != null) {
    setEnvVariables(new ArrayList<EnvironmentVariable>(info.getEnvVariables()));
  }
 else {
    setEnvVariables(null);
  }
}","/** 
 * Sets the values of the parameter info, if non-null, into this info. Any know mutable values (e.g. containers and arrays) are set as copies.
 */
public void setInfo(ApplicationDeploymentInfo info){
  if (info == null) {
    return;
  }
  setDeploymentName(info.getDeploymentName());
  setMemory(info.getMemory());
  setStaging(info.getStaging());
  setInstances(info.getInstances());
  setArchive(info.getArchive());
  if (info.getServices() != null) {
    setServices(new ArrayList<CloudService>(info.getServices()));
  }
 else {
    setServices(null);
  }
  if (info.getUris() != null) {
    setUris(new ArrayList<String>(info.getUris()));
  }
 else {
    setUris(null);
  }
  if (info.getEnvVariables() != null) {
    setEnvVariables(new ArrayList<EnvironmentVariable>(info.getEnvVariables()));
  }
 else {
    setEnvVariables(null);
  }
}",0.9405225125069484
10702,"/** 
 * Copy the deployment info, with any known mutable values set as copies as well. Therefore, if an info property is a list of values (e.g. list of bound services), modifying the list in the copy will not affect the list of values in the original version.
 * @return non-null copy of this info.
 */
public ApplicationDeploymentInfo copy(){
  ApplicationDeploymentInfo info=new ApplicationDeploymentInfo(getDeploymentName());
  info.setDeploymentMode(getDeploymentMode());
  info.setIncrementalPublish(isIncrementalPublish());
  info.setMemory(getMemory());
  info.setStaging(getStaging());
  info.setInstances(getInstances());
  info.setArchive(getArchive());
  if (getServices() != null) {
    info.setServices(new ArrayList<CloudService>(getServices()));
  }
  if (getUris() != null) {
    info.setUris(new ArrayList<String>(getUris()));
  }
  if (getEnvVariables() != null) {
    info.setEnvVariables(new ArrayList<EnvironmentVariable>(getEnvVariables()));
  }
  return info;
}","/** 
 * Copy the deployment info, with any known mutable values set as copies as well. Therefore, if an info property is a list of values (e.g. list of bound services), modifying the list in the copy will not affect the list of values in the original version.
 * @return non-null copy of this info.
 */
public ApplicationDeploymentInfo copy(){
  ApplicationDeploymentInfo info=new ApplicationDeploymentInfo(getDeploymentName());
  info.setMemory(getMemory());
  info.setStaging(getStaging());
  info.setInstances(getInstances());
  info.setArchive(getArchive());
  if (getServices() != null) {
    info.setServices(new ArrayList<CloudService>(getServices()));
  }
  if (getUris() != null) {
    info.setUris(new ArrayList<String>(getUris()));
  }
  if (getEnvVariables() != null) {
    info.setEnvVariables(new ArrayList<EnvironmentVariable>(getEnvVariables()));
  }
  return info;
}",0.9459025174076058
10703,"/** 
 * Creates a general deployment info that should be applicable to any application type. It will have an app name as well as memory setting.
 * @return Non-null general deployment info with basic information forapplication deployment.
 */
protected ApplicationDeploymentInfo createGeneralDefaultInfo(){
  ApplicationDeploymentInfo info=new ApplicationDeploymentInfo(getDeployedApplicationName());
  info.setDeploymentMode(ApplicationAction.START);
  info.setMemory(CloudUtil.DEFAULT_MEMORY);
  return info;
}","/** 
 * Creates a general deployment info that should be applicable to any application type. It will have an app name as well as memory setting.
 * @return Non-null general deployment info with basic information forapplication deployment.
 */
protected ApplicationDeploymentInfo createGeneralDefaultInfo(){
  ApplicationDeploymentInfo info=new ApplicationDeploymentInfo(getDeployedApplicationName());
  info.setMemory(CloudUtil.DEFAULT_MEMORY);
  return info;
}",0.947584789311408
10704,"/** 
 * Maps the application module to an actual deployed application in a CF server. It replaces any existing deployment info with one generated from the cloud application. The existing deployment descriptor remains unchanged if removing the cloud application mapping (i.e. setting to null)
 * @param cloudApplication the actual deployed application in a CF server.
 * @throws CoreException if failure occurred while setting a cloudapplication, or the deployment info is currently being modified by some other component.
 */
public synchronized void setCloudApplication(CloudApplication cloudApplication){
  this.application=cloudApplication;
  if (application != null) {
    ApplicationDeploymentInfo cloudApplicationInfo=resolveDeployedApplicationInformation();
    if (cloudApplicationInfo != null) {
      ApplicationDeploymentInfo currentInfo=getDeploymentInfo();
      if (currentInfo != null) {
        cloudApplicationInfo.setDeploymentMode(currentInfo.getDeploymentMode());
        cloudApplicationInfo.setIncrementalPublish(currentInfo.isIncrementalPublish());
      }
      internalSetDeploymentInfo(cloudApplicationInfo);
    }
  }
}","/** 
 * Maps the application module to an actual deployed application in a CF server. It replaces any existing deployment info with one generated from the cloud application. The existing deployment descriptor remains unchanged if removing the cloud application mapping (i.e. setting to null)
 * @param cloudApplication the actual deployed application in a CF server.
 * @throws CoreException if failure occurred while setting a cloudapplication, or the deployment info is currently being modified by some other component.
 */
public synchronized void setCloudApplication(CloudApplication cloudApplication){
  this.application=cloudApplication;
  if (application != null) {
    ApplicationDeploymentInfo cloudApplicationInfo=resolveDeployedApplicationInformation();
    if (cloudApplicationInfo != null) {
      internalSetDeploymentInfo(cloudApplicationInfo);
    }
  }
}",0.8358948934060486
10705,"public void modifyText(ModifyEvent e){
  if (canUpdate) {
    try {
      CloudFoundryApplicationModule appModule=getExistingApplication();
      new UpdateInstanceCountAction(editorPage,instanceSpinner,appModule).run();
    }
 catch (    CoreException ce) {
      logApplicationModuleFailureError(""String_Node_Str"");
    }
  }
}","public void modifyText(ModifyEvent e){
  try {
    Integer.parseInt(memoryText.getText());
    logError(null);
  }
 catch (  NumberFormatException nfe) {
    logError(Messages.ERROR_INVALID_MEMORY);
  }
}",0.225140712945591
10706,"private void createGeneralSectionRestartRequired(Composite parent){
  generalSectionRestartRequired=toolkit.createSection(parent,Section.TITLE_BAR);
  generalSectionRestartRequired.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().grab(true,false).applyTo(generalSectionRestartRequired);
  generalSectionRestartRequired.setText(""String_Node_Str"");
  generalSectionRestartRequired.clientVerticalSpacing=0;
  Composite client=toolkit.createComposite(generalSectionRestartRequired);
  client.setLayout(new GridLayout(2,false));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(client);
  generalSectionRestartRequired.setClient(client);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  Composite memoryArea=toolkit.createComposite(client);
  GridLayoutFactory.fillDefaults().numColumns(2).margins(0,0).applyTo(memoryArea);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(memoryArea);
  memoryText=new Text(memoryArea,SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.FILL).hint(50,SWT.DEFAULT).applyTo(memoryText);
  final Button button=createGeneralPushButton(memoryArea,""String_Node_Str"");
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (canUpdate && memoryText != null && !memoryText.isDisposed()) {
        int memory=-1;
        try {
          memory=Integer.parseInt(memoryText.getText());
        }
 catch (        NumberFormatException nfe) {
        }
        if (memory > 0) {
          try {
            CloudFoundryApplicationModule appModule=getExistingApplication();
            new UpdateApplicationMemoryAction(editorPage,memory,appModule).run();
          }
 catch (          CoreException ce) {
            logApplicationModuleFailureError(Messages.ERROR_FAILED_MEMORY_UPDATE);
          }
        }
 else {
          logApplicationModuleFailureError(Messages.ERROR_INVALID_MEMORY);
        }
      }
    }
  }
);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  Button envVarsButton=createGeneralPushButton(client,""String_Node_Str"");
  envVarsButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      try {
        final CloudFoundryApplicationModule appModule=getExistingApplication();
        if (appModule != null) {
          UIJob uiJob=new UIJob(""String_Node_Str""){
            public IStatus runInUIThread(            IProgressMonitor monitor){
              try {
                DeploymentInfoWorkingCopy infoWorkingCopy=appModule.resolveDeploymentInfoWorkingCopy(monitor);
                EnvVarsWizard wizard=new EnvVarsWizard(cloudServer,appModule,infoWorkingCopy);
                WizardDialog dialog=new WizardDialog(editorPage.getEditorSite().getShell(),wizard);
                dialog.open();
                return Status.OK_STATUS;
              }
 catch (              CoreException e) {
                return e.getStatus();
              }
            }
          }
;
          uiJob.setSystem(true);
          uiJob.setPriority(Job.INTERACTIVE);
          uiJob.schedule();
        }
      }
 catch (      CoreException ce) {
        logError(""String_Node_Str"" + ce.getMessage());
      }
    }
  }
);
}","private void createGeneralSectionRestartRequired(Composite parent){
  generalSectionRestartRequired=toolkit.createSection(parent,Section.TITLE_BAR);
  generalSectionRestartRequired.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().grab(true,false).applyTo(generalSectionRestartRequired);
  generalSectionRestartRequired.setText(""String_Node_Str"");
  generalSectionRestartRequired.clientVerticalSpacing=0;
  Composite client=toolkit.createComposite(generalSectionRestartRequired);
  client.setLayout(new GridLayout(2,false));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(client);
  generalSectionRestartRequired.setClient(client);
  createLabel(client,org.cloudfoundry.ide.eclipse.internal.server.ui.Messages.LABEL_MEMORY_LIMIT,SWT.CENTER);
  Composite memoryArea=toolkit.createComposite(client);
  GridLayoutFactory.fillDefaults().numColumns(2).margins(0,0).applyTo(memoryArea);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(memoryArea);
  memoryText=new Text(memoryArea,SWT.BORDER);
  memoryText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      try {
        Integer.parseInt(memoryText.getText());
        logError(null);
      }
 catch (      NumberFormatException nfe) {
        logError(Messages.ERROR_INVALID_MEMORY);
      }
    }
  }
);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.FILL).hint(50,SWT.DEFAULT).applyTo(memoryText);
  final Button setMemoryButton=createGeneralPushButton(memoryArea,""String_Node_Str"");
  setMemoryButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (canUpdate && memoryText != null && !memoryText.isDisposed()) {
        int memory=-1;
        try {
          memory=Integer.parseInt(memoryText.getText());
        }
 catch (        NumberFormatException nfe) {
        }
        if (memory > 0) {
          try {
            CloudFoundryApplicationModule appModule=getExistingApplication();
            new UpdateApplicationMemoryAction(editorPage,memory,appModule).run();
            logError(null);
          }
 catch (          CoreException ce) {
            logError(Messages.ERROR_FAILED_MEMORY_UPDATE);
          }
        }
 else {
          logError(Messages.ERROR_INVALID_MEMORY);
        }
      }
    }
  }
);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  Button envVarsButton=createGeneralPushButton(client,""String_Node_Str"");
  envVarsButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      try {
        final CloudFoundryApplicationModule appModule=getExistingApplication();
        if (appModule != null) {
          UIJob uiJob=new UIJob(""String_Node_Str""){
            public IStatus runInUIThread(            IProgressMonitor monitor){
              try {
                DeploymentInfoWorkingCopy infoWorkingCopy=appModule.resolveDeploymentInfoWorkingCopy(monitor);
                EnvVarsWizard wizard=new EnvVarsWizard(cloudServer,appModule,infoWorkingCopy);
                WizardDialog dialog=new WizardDialog(editorPage.getEditorSite().getShell(),wizard);
                dialog.open();
                return Status.OK_STATUS;
              }
 catch (              CoreException e) {
                return e.getStatus();
              }
            }
          }
;
          uiJob.setSystem(true);
          uiJob.setPriority(Job.INTERACTIVE);
          uiJob.schedule();
        }
      }
 catch (      CoreException ce) {
        logError(""String_Node_Str"" + ce.getMessage());
      }
    }
  }
);
}",0.6004395604395605
10707,"@Override public Control createPart(Composite parent){
  Label label=new Label(parent,SWT.NONE);
  label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false));
  label.setText(""String_Node_Str"");
  memory=new Text(parent,SWT.BORDER);
  memory.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  memory.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setMemory(memory.getText());
    }
  }
);
  return parent;
}","@Override public Control createPart(Composite parent){
  Label label=new Label(parent,SWT.NONE);
  label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false));
  label.setText(org.cloudfoundry.ide.eclipse.internal.server.ui.Messages.LABEL_MEMORY_LIMIT);
  memory=new Text(parent,SWT.BORDER);
  memory.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  memory.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setMemory(memory.getText());
    }
  }
);
  return parent;
}",0.914
10708,"public void setInput(){
  if (spaceChangeHandler != null && orgsSpacesViewer != null && !orgsSpacesViewer.getTree().isDisposed()) {
    List<CloudOrganization> orgInput=spaceChangeHandler.getCurrentSpacesDescriptor() != null ? spaceChangeHandler.getCurrentSpacesDescriptor().getOrgsAndSpaces().getOrgs() : null;
    if (orgInput == null) {
      orgInput=new ArrayList<CloudOrganization>();
    }
    CloudOrganization[] organizationInput=orgInput.toArray(new CloudOrganization[orgInput.size()]);
    orgsSpacesViewer.setInput(organizationInput);
    orgsSpacesViewer.setExpandedElements(organizationInput);
    CloudSpace selectedSpace=spaceChangeHandler.getCurrentCloudSpace();
    if (selectedSpace == null) {
      selectedSpace=spaceChangeHandler.getCurrentSpacesDescriptor() != null ? spaceChangeHandler.getCurrentSpacesDescriptor().getOrgsAndSpaces().getDefaultCloudSpace() : null;
    }
    if (selectedSpace != null) {
      setSpaceSelection(selectedSpace);
      Tree tree=orgsSpacesViewer.getTree();
      TreeItem[] orgItems=tree.getItems();
      if (orgItems != null) {
        TreeItem orgItem=null;
        for (        TreeItem item : orgItems) {
          Object treeObj=item.getData();
          if (treeObj instanceof CloudOrganization && ((CloudOrganization)treeObj).getName().equals(selectedSpace.getOrganization().getName())) {
            orgItem=item;
            break;
          }
        }
        if (orgItem != null) {
          TreeItem[] children=orgItem.getItems();
          if (children != null) {
            for (            TreeItem childItem : children) {
              Object treeObj=childItem.getData();
              if (treeObj instanceof CloudSpace && ((CloudSpace)treeObj).getName().equals(selectedSpace.getName())) {
                tree.select(childItem);
                break;
              }
            }
          }
        }
      }
    }
  }
}","public void setInput(){
  if (cloudSpaceServerDelegate != null && orgsSpacesViewer != null && !orgsSpacesViewer.getTree().isDisposed()) {
    List<CloudOrganization> orgInput=cloudSpaceServerDelegate.getCurrentSpacesDescriptor() != null ? cloudSpaceServerDelegate.getCurrentSpacesDescriptor().getOrgsAndSpaces().getOrgs() : null;
    if (orgInput == null) {
      orgInput=new ArrayList<CloudOrganization>();
    }
    CloudOrganization[] organizationInput=orgInput.toArray(new CloudOrganization[orgInput.size()]);
    orgsSpacesViewer.setInput(organizationInput);
    orgsSpacesViewer.setExpandedElements(organizationInput);
    CloudSpace selectedSpace=cloudSpaceServerDelegate.getCurrentCloudSpace();
    if (selectedSpace == null) {
      selectedSpace=cloudSpaceServerDelegate.getCurrentSpacesDescriptor() != null ? cloudSpaceServerDelegate.getCurrentSpacesDescriptor().getOrgsAndSpaces().getDefaultCloudSpace() : null;
    }
    if (selectedSpace != null) {
      setSpaceSelection(selectedSpace);
      setSelectionInViewer(selectedSpace);
    }
    if (orgInput.isEmpty()) {
      notifyStatusChange(CloudFoundryPlugin.getErrorStatus(""String_Node_Str""));
    }
  }
}",0.3815104166666667
10709,"protected void setSpaceSelection(CloudSpace selectedSpace){
  if (spaceChangeHandler != null) {
    spaceChangeHandler.setSelectedSpace(selectedSpace);
    String errorMessage=selectedSpace == null ? ""String_Node_Str"" : null;
    IStatus status=errorMessage != null ? CloudFoundryPlugin.getErrorStatus(errorMessage) : Status.OK_STATUS;
    notifyStatusChange(selectedSpace,status);
  }
}","protected void setSpaceSelection(CloudSpace selectedSpace){
  if (cloudSpaceServerDelegate != null) {
    cloudSpaceServerDelegate.setSelectedSpace(selectedSpace);
    String errorMessage=selectedSpace == null ? ""String_Node_Str"" : null;
    IStatus status=errorMessage != null ? CloudFoundryPlugin.getErrorStatus(errorMessage) : Status.OK_STATUS;
    notifyStatusChange(selectedSpace,status);
  }
}",0.8931297709923665
10710,"public Object[] getChildren(Object parentElement){
  if (parentElement instanceof CloudOrganization && spaceChangeHandler != null) {
    CloudSpacesDescriptor spaceDescriptor=spaceChangeHandler.getCurrentSpacesDescriptor();
    if (spaceDescriptor != null) {
      List<CloudSpace> spaces=spaceDescriptor.getOrgsAndSpaces().getOrgSpaces(((CloudOrganization)parentElement).getName());
      if (spaces != null) {
        return spaces.toArray(new CloudSpace[spaces.size()]);
      }
    }
  }
  return null;
}","public Object[] getChildren(Object parentElement){
  if (parentElement instanceof CloudOrganization && cloudSpaceServerDelegate != null) {
    CloudSpacesDescriptor spaceDescriptor=cloudSpaceServerDelegate.getCurrentSpacesDescriptor();
    if (spaceDescriptor != null) {
      List<CloudSpace> spaces=spaceDescriptor.getOrgsAndSpaces().getOrgSpaces(((CloudOrganization)parentElement).getName());
      if (spaces != null) {
        return spaces.toArray(new CloudSpace[spaces.size()]);
      }
    }
  }
  return null;
}",0.9182879377431906
10711,"public CloudSpacesSelectionPart(CloudSpaceHandler spaceChangeHandler,IPartChangeListener listener,CloudFoundryServer cloudServer,IWizardHandle wizardHandle){
  this.spaceChangeHandler=spaceChangeHandler;
  if (listener != null) {
    addPartChangeListener(listener);
  }
  String serverTypeId=cloudServer.getServer().getServerType().getId();
  wizardHandle.setTitle(""String_Node_Str"");
  wizardHandle.setDescription(DEFAULT_DESCRIPTION);
  ImageDescriptor banner=CloudFoundryImages.getWizardBanner(serverTypeId);
  if (banner != null) {
    wizardHandle.setImageDescriptor(banner);
  }
}","public CloudSpacesSelectionPart(CloudServerSpaceDelegate cloudSpaceServerDelegate,IPartChangeListener listener,CloudFoundryServer cloudServer,IWizardHandle wizardHandle){
  this.cloudSpaceServerDelegate=cloudSpaceServerDelegate;
  if (listener != null) {
    addPartChangeListener(listener);
  }
  String serverTypeId=cloudServer.getServer().getServerType().getId();
  wizardHandle.setTitle(""String_Node_Str"");
  wizardHandle.setDescription(DEFAULT_DESCRIPTION);
  ImageDescriptor banner=CloudFoundryImages.getWizardBanner(serverTypeId);
  if (banner != null) {
    wizardHandle.setImageDescriptor(banner);
  }
}",0.8590492076730609
10712,"/** 
 * @param validateCredentials true if credentials should be validated, whichwould require a network I/O request sent to the server. False if only local validation should be performed (e.g. check for malformed URL)
 */
public void updateUI(boolean validateAgainstServer){
  String url=cfServer.getUrl();
  PartChangeEvent validationEvent=validateAndGetEvent(validateAgainstServer);
  boolean valuesFilled=validationEvent.getType() == ServerCredentialsValidationStatics.EVENT_INVALID_SPACE_FILLED_CREDENTIALS || validationEvent.getType() == ServerCredentialsValidationStatics.EVENT_SPACE_VALID;
  if (CloudFoundryURLNavigation.canEnableCloudFoundryNavigation(url)) {
    cfSignupButton.setVisible(true);
  }
 else {
    cfSignupButton.setVisible(false);
  }
  validateButton.setEnabled(valuesFilled);
  registerAccountButton.setEnabled(CloudFoundryBrandingExtensionPoint.supportsRegistration(serverTypeId,url));
  notifyChange(validationEvent);
}","/** 
 * @param validateCredentials true if credentials should be validated, whichwould require a network I/O request sent to the server. False if only local validation should be performed (e.g. check for malformed URL)
 */
public void updateUI(boolean validateAgainstServer){
  String url=cfServer.getUrl();
  PartChangeEvent validationEvent=validateAndGetEvent(validateAgainstServer);
  boolean valuesFilled=validationEvent.getType() == ServerCredentialsValidationStatics.EVENT_CREDENTIALS_FILLED || validationEvent.getType() == ServerCredentialsValidationStatics.EVENT_SPACE_VALID;
  if (CloudFoundryURLNavigation.canEnableCloudFoundryNavigation(url)) {
    cfSignupButton.setVisible(true);
  }
 else {
    cfSignupButton.setVisible(false);
  }
  validateButton.setEnabled(valuesFilled);
  registerAccountButton.setEnabled(CloudFoundryBrandingExtensionPoint.supportsRegistration(serverTypeId,url));
  notifyChange(validationEvent);
}",0.9840764331210192
10713,"/** 
 * Handling error has two options: <p/> 1. Retry on error. If a message should be displayed due to the error, that message is returned to be streamed to the console. <p/> 2. Maximum errors reached. Exception is thrown. <p/> If the error is encountered when the stream is no longer active, nothing happens and null is returned.
 * @return a message to be streamed to the console based on the current.error. Or null if no message should be streamed.
 */
protected String handleErrorCount(CoreException ce) throws CoreException {
  if (!isActive()) {
    return null;
  }
  String message=null;
  boolean maxReached=adjustErrorCount();
  if (maxReached) {
    message=reachedMaximumErrors(ce);
    if (message != null) {
      throw new CoreException(CloudFoundryPlugin.getErrorStatus(message,ce));
    }
  }
  if (message == null) {
    message=getMessageOnRetry(ce,attemptsRemaining);
  }
  if (maxReached && message == null) {
    throw ce;
  }
  return message;
}","/** 
 * Handling error has two options: <p/> 1. Retry on error. If a message should be displayed due to the error, that message is returned to be streamed to the console. <p/> 2. Maximum errors reached. Exception is thrown if there is a message associated with the last error that needs to be displayed to the user. Otherwise, the stream deactives itself after maximum errors are reached. <p/> If the error is encountered when the stream is no longer active, nothing happens and null is returned.
 * @return a message to be streamed to the console based on the current.error. Or null if no message should be streamed.
 */
protected String handleErrorCount(CoreException ce) throws CoreException {
  if (!isActive()) {
    return null;
  }
  if (isFatalError(ce)) {
    attemptsRemaining=0;
    throw ce;
  }
  String message=null;
  if (adjustErrorCount()) {
    message=reachedMaximumErrors(ce);
    if (message != null) {
      throw new CoreException(CloudFoundryPlugin.getErrorStatus(message,ce));
    }
  }
  if (message == null) {
    message=getMessageOnRetry(ce,attemptsRemaining);
  }
  return message;
}",0.8280499519692603
10714,"/** 
 * Gets invoked when maximum errors have been reached. Return an error message that gets displayed in the console.
 * @param ce
 * @return error message that gets displayed in the console when maximumerrors are reached.
 */
protected String reachedMaximumErrors(CoreException ce){
  return ""String_Node_Str"";
}","/** 
 * Gets invoked when maximum errors have been reached. Return an error message that gets displayed in the console.
 * @param ce
 * @return error message that gets displayed in the console when maximumerrors are reached. return Null if nothing should be displayed if maximum errors are reached @
 */
protected String reachedMaximumErrors(CoreException ce){
  return ""String_Node_Str"";
}",0.8936170212765957
10715,"protected void bootRepackage(final IPackageFragmentRoot[] roots,File packagedFile) throws CoreException {
  Repackager bootRepackager=new Repackager(packagedFile);
  try {
    bootRepackager.repackage(new Libraries(){
      @Override public void doWithLibraries(      LibraryCallback callBack) throws IOException {
        for (        IPackageFragmentRoot root : roots) {
          if (root.isArchive()) {
            File rootFile=new File(root.getPath().toOSString());
            if (rootFile.exists()) {
              callBack.library(rootFile,LibraryScope.COMPILE);
            }
          }
        }
      }
    }
);
  }
 catch (  IOException e) {
    handleApplicationDeploymentFailure(""String_Node_Str"" + e.getMessage());
  }
}","protected void bootRepackage(final IPackageFragmentRoot[] roots,File packagedFile) throws CoreException {
  Repackager bootRepackager=new Repackager(packagedFile);
  try {
    bootRepackager.repackage(new Libraries(){
      public void doWithLibraries(      LibraryCallback callBack) throws IOException {
        for (        IPackageFragmentRoot root : roots) {
          if (root.isArchive()) {
            File rootFile=new File(root.getPath().toOSString());
            if (rootFile.exists()) {
              callBack.library(rootFile,LibraryScope.COMPILE);
            }
          }
        }
      }
    }
);
  }
 catch (  IOException e) {
    handleApplicationDeploymentFailure(""String_Node_Str"" + e.getMessage());
  }
}",0.993169398907104
10716,"@Override public void doWithLibraries(LibraryCallback callBack) throws IOException {
  for (  IPackageFragmentRoot root : roots) {
    if (root.isArchive()) {
      File rootFile=new File(root.getPath().toOSString());
      if (rootFile.exists()) {
        callBack.library(rootFile,LibraryScope.COMPILE);
      }
    }
  }
}","public void doWithLibraries(LibraryCallback callBack) throws IOException {
  for (  IPackageFragmentRoot root : roots) {
    if (root.isArchive()) {
      File rootFile=new File(root.getPath().toOSString());
      if (rootFile.exists()) {
        callBack.library(rootFile,LibraryScope.COMPILE);
      }
    }
  }
}",0.984375
10717,"private void updateSections(){
  if (provideServices) {
    List<CloudService> services=editorPage.getServices();
    servicesViewer.setInput((services != null) ? services.toArray() : null);
    if (servicesSection != null && !userExpanded) {
      servicesSection.setExpanded((services == null ? 0 : services.size()) > 0);
      GridDataFactory.fillDefaults().grab(true,servicesSection.isExpanded()).hint(SWT.DEFAULT,servicesSection.isExpanded() ? SWT.DEFAULT : 0).applyTo(servicesSection);
      GridDataFactory.fillDefaults().grab(true,servicesSection.isExpanded()).hint(SWT.DEFAULT,servicesSection.isExpanded() ? SWT.DEFAULT : 0).applyTo(servicesViewer.getControl());
      servicesSection.getParent().layout();
    }
  }
}","private void updateSections(){
  if (provideServices) {
    List<CloudService> services=editorPage.getServices();
    servicesViewer.setInput((services != null) ? services.toArray() : null);
    if (servicesSection != null && !servicesSection.isExpanded()) {
      servicesSection.setExpanded(true);
    }
  }
}",0.5529865125240848
10718,"private void createServicesSection(){
  servicesSection=toolkit.createSection(getSection().getParent(),Section.TITLE_BAR | Section.DESCRIPTION | Section.TWISTIE);
  servicesSection.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().grab(true,true).applyTo(servicesSection);
  servicesSection.setText(""String_Node_Str"");
  servicesSection.setDescription(""String_Node_Str"");
  servicesSection.addExpansionListener(new ExpansionAdapter(){
    @Override public void expansionStateChanged(    ExpansionEvent e){
      userExpanded=true;
    }
  }
);
  Composite client=toolkit.createComposite(servicesSection);
  client.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().grab(true,true).applyTo(client);
  servicesSection.setClient(client);
  Composite headerComposite=toolkit.createComposite(servicesSection,SWT.NONE);
  RowLayout rowLayout=new RowLayout();
  rowLayout.marginTop=0;
  rowLayout.marginBottom=0;
  headerComposite.setLayout(rowLayout);
  headerComposite.setBackground(null);
  ToolBarManager toolBarManager=new ToolBarManager(SWT.FLAT);
  toolBarManager.createControl(headerComposite);
  servicesViewer=new TableViewer(toolkit.createTable(client,SWT.MULTI));
  new ServiceViewerConfigurator().configureViewer(servicesViewer);
  servicesViewer.setContentProvider(new TreeContentProvider());
  servicesViewer.setLabelProvider(new ServicesTreeLabelProvider(servicesViewer){
    protected Image getColumnImage(    CloudService service,    ServiceViewColumn column){
      if (column == ServiceViewColumn.Tunnel) {
        TunnelBehaviour handler=new TunnelBehaviour(cloudServer);
        if (handler.hasCaldecottTunnel(service.getName())) {
          return CloudFoundryImages.getImage(CloudFoundryImages.CONNECT);
        }
      }
      return null;
    }
  }
);
  servicesViewer.setSorter(new ServiceViewerSorter(servicesViewer,cloudServer.hasCloudSpace()){
    @Override protected int compare(    CloudService service1,    CloudService service2,    ServiceViewColumn sortColumn){
      if (sortColumn == ServiceViewColumn.Tunnel) {
        TunnelBehaviour handler=new TunnelBehaviour(cloudServer);
        if (handler.hasCaldecottTunnel(service1.getName())) {
          return -1;
        }
 else         if (handler.hasCaldecottTunnel(service2.getName())) {
          return 1;
        }
 else {
          return 0;
        }
      }
      return super.compare(service1,service2,sortColumn);
    }
  }
);
  servicesViewer.setInput(new CloudService[0]);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(servicesViewer.getControl());
  Action addServiceAction=new Action(""String_Node_Str"",CloudFoundryImages.NEW_SERVICE){
    @Override public void run(){
      IWizard wizard=new CloudFoundryServiceWizard(cloudServer);
      WizardDialog dialog=new WizardDialog(getSection().getShell(),wizard);
      dialog.setBlockOnOpen(true);
      dialog.open();
    }
  }
;
  toolBarManager.add(addServiceAction);
  toolBarManager.update(true);
  servicesSection.setTextClient(headerComposite);
  MenuManager menuManager=new MenuManager();
  menuManager.setRemoveAllWhenShown(true);
  menuManager.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager manager){
      fillServicesContextMenu(manager);
    }
  }
);
  Menu menu=menuManager.createContextMenu(servicesViewer.getControl());
  servicesViewer.getControl().setMenu(menu);
  editorPage.getSite().registerContextMenu(menuManager,servicesViewer);
  int ops=DND.DROP_COPY;
  Transfer[] transfers=new Transfer[]{LocalSelectionTransfer.getTransfer()};
  DragSourceAdapter listener=new DragSourceAdapter(){
    @Override public void dragSetData(    DragSourceEvent event){
      IStructuredSelection selection=(IStructuredSelection)servicesViewer.getSelection();
      event.data=selection.getFirstElement();
      LocalSelectionTransfer.getTransfer().setSelection(selection);
    }
    @Override public void dragStart(    DragSourceEvent event){
      if (event.detail == DND.DROP_NONE || event.detail == DND.DROP_DEFAULT) {
        event.detail=DND.DROP_COPY;
      }
      dragSetData(event);
    }
  }
;
  servicesViewer.addDragSupport(ops,transfers,listener);
  getManagedForm().getToolkit().paintBordersFor(client);
  userExpanded=false;
}","private void createServicesSection(){
  servicesSection=toolkit.createSection(getSection().getParent(),Section.TITLE_BAR | Section.DESCRIPTION | Section.TWISTIE);
  servicesSection.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().grab(true,true).applyTo(servicesSection);
  servicesSection.setText(""String_Node_Str"");
  servicesSection.setExpanded(true);
  servicesSection.setDescription(""String_Node_Str"");
  Composite client=toolkit.createComposite(servicesSection);
  client.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().grab(true,true).applyTo(client);
  servicesSection.setClient(client);
  Composite headerComposite=toolkit.createComposite(servicesSection,SWT.NONE);
  RowLayout rowLayout=new RowLayout();
  rowLayout.marginTop=0;
  rowLayout.marginBottom=0;
  headerComposite.setLayout(rowLayout);
  headerComposite.setBackground(null);
  ToolBarManager toolBarManager=new ToolBarManager(SWT.FLAT);
  toolBarManager.createControl(headerComposite);
  servicesViewer=new TableViewer(toolkit.createTable(client,SWT.MULTI));
  new ServiceViewerConfigurator().configureViewer(servicesViewer);
  servicesViewer.setContentProvider(new TreeContentProvider());
  servicesViewer.setLabelProvider(new ServicesTreeLabelProvider(servicesViewer){
    protected Image getColumnImage(    CloudService service,    ServiceViewColumn column){
      if (column == ServiceViewColumn.Tunnel) {
        TunnelBehaviour handler=new TunnelBehaviour(cloudServer);
        if (handler.hasCaldecottTunnel(service.getName())) {
          return CloudFoundryImages.getImage(CloudFoundryImages.CONNECT);
        }
      }
      return null;
    }
  }
);
  servicesViewer.setSorter(new ServiceViewerSorter(servicesViewer,cloudServer.hasCloudSpace()){
    @Override protected int compare(    CloudService service1,    CloudService service2,    ServiceViewColumn sortColumn){
      if (sortColumn == ServiceViewColumn.Tunnel) {
        TunnelBehaviour handler=new TunnelBehaviour(cloudServer);
        if (handler.hasCaldecottTunnel(service1.getName())) {
          return -1;
        }
 else         if (handler.hasCaldecottTunnel(service2.getName())) {
          return 1;
        }
 else {
          return 0;
        }
      }
      return super.compare(service1,service2,sortColumn);
    }
  }
);
  servicesViewer.setInput(new CloudService[0]);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(servicesViewer.getControl());
  Action addServiceAction=new Action(""String_Node_Str"",CloudFoundryImages.NEW_SERVICE){
    @Override public void run(){
      IWizard wizard=new CloudFoundryServiceWizard(cloudServer);
      WizardDialog dialog=new WizardDialog(getSection().getShell(),wizard);
      dialog.setBlockOnOpen(true);
      dialog.open();
    }
  }
;
  toolBarManager.add(addServiceAction);
  toolBarManager.update(true);
  servicesSection.setTextClient(headerComposite);
  MenuManager menuManager=new MenuManager();
  menuManager.setRemoveAllWhenShown(true);
  menuManager.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager manager){
      fillServicesContextMenu(manager);
    }
  }
);
  Menu menu=menuManager.createContextMenu(servicesViewer.getControl());
  servicesViewer.getControl().setMenu(menu);
  editorPage.getSite().registerContextMenu(menuManager,servicesViewer);
  int ops=DND.DROP_COPY;
  Transfer[] transfers=new Transfer[]{LocalSelectionTransfer.getTransfer()};
  DragSourceAdapter listener=new DragSourceAdapter(){
    @Override public void dragSetData(    DragSourceEvent event){
      IStructuredSelection selection=(IStructuredSelection)servicesViewer.getSelection();
      event.data=selection.getFirstElement();
      LocalSelectionTransfer.getTransfer().setSelection(selection);
    }
    @Override public void dragStart(    DragSourceEvent event){
      if (event.detail == DND.DROP_NONE || event.detail == DND.DROP_DEFAULT) {
        event.detail=DND.DROP_COPY;
      }
      dragSetData(event);
    }
  }
;
  servicesViewer.addDragSupport(ops,transfers,listener);
  getManagedForm().getToolkit().paintBordersFor(client);
}",0.9668699916277956
10719,"public void setInput(){
  if (cloudSpaceServerDelegate != null && orgsSpacesViewer != null && !orgsSpacesViewer.getTree().isDisposed()) {
    List<CloudOrganization> orgInput=cloudSpaceServerDelegate.getCurrentSpacesDescriptor() != null ? cloudSpaceServerDelegate.getCurrentSpacesDescriptor().getOrgsAndSpaces().getOrgs() : null;
    if (orgInput == null) {
      orgInput=new ArrayList<CloudOrganization>();
    }
    CloudOrganization[] organizationInput=orgInput.toArray(new CloudOrganization[orgInput.size()]);
    orgsSpacesViewer.setInput(organizationInput);
    orgsSpacesViewer.setExpandedElements(organizationInput);
    CloudSpace selectedSpace=cloudSpaceServerDelegate.getCurrentCloudSpace();
    if (selectedSpace == null) {
      selectedSpace=cloudSpaceServerDelegate.getCurrentSpacesDescriptor() != null ? cloudSpaceServerDelegate.getCurrentSpacesDescriptor().getOrgsAndSpaces().getDefaultCloudSpace() : null;
    }
    if (selectedSpace != null) {
      setSpaceSelection(selectedSpace);
      setSelectionInViewer(selectedSpace);
    }
    if (orgInput.isEmpty()) {
      notifyStatusChange(CloudFoundryPlugin.getErrorStatus(""String_Node_Str""));
    }
  }
}","public void setInput(){
  if (cloudSpaceServerDelegate != null && orgsSpacesViewer != null && !orgsSpacesViewer.getTree().isDisposed()) {
    List<CloudOrganization> orgInput=cloudSpaceServerDelegate.getCurrentSpacesDescriptor() != null ? cloudSpaceServerDelegate.getCurrentSpacesDescriptor().getOrgsAndSpaces().getOrgs() : null;
    if (orgInput == null) {
      orgInput=new ArrayList<CloudOrganization>();
    }
    CloudOrganization[] organizationInput=orgInput.toArray(new CloudOrganization[orgInput.size()]);
    orgsSpacesViewer.setInput(organizationInput);
    orgsSpacesViewer.setExpandedElements(organizationInput);
    CloudSpace selectedSpace=cloudSpaceServerDelegate.getCurrentCloudSpace();
    if (selectedSpace == null) {
      selectedSpace=cloudSpaceServerDelegate.getCurrentSpacesDescriptor() != null ? cloudSpaceServerDelegate.getCurrentSpacesDescriptor().getOrgsAndSpaces().getDefaultCloudSpace() : null;
    }
    if (selectedSpace != null) {
      setSpaceSelection(selectedSpace);
      setSelectionInViewer(selectedSpace);
    }
    if (orgInput.isEmpty()) {
      notifyStatusChange(CloudFoundryPlugin.getStatus(""String_Node_Str"",IStatus.INFO));
    }
 else {
      notifyStatusChange(CloudFoundryPlugin.getStatus(DEFAULT_DESCRIPTION,IStatus.OK));
    }
  }
}",0.951179820992677
10720,"private void createGeneralSectionRestartRequired(Composite parent){
  generalSectionRestartRequired=toolkit.createSection(parent,Section.TITLE_BAR);
  generalSectionRestartRequired.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().grab(true,false).applyTo(generalSectionRestartRequired);
  generalSectionRestartRequired.setText(""String_Node_Str"");
  generalSectionRestartRequired.clientVerticalSpacing=0;
  Composite client=toolkit.createComposite(generalSectionRestartRequired);
  client.setLayout(new GridLayout(2,false));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(client);
  generalSectionRestartRequired.setClient(client);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  memoryCombo=new Combo(client,SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.FILL).applyTo(memoryCombo);
  memoryCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (canUpdate) {
        int selectionIndex=memoryCombo.getSelectionIndex();
        if (selectionIndex != -1) {
          memory=editorPage.getApplicationMemoryChoices()[selectionIndex];
          try {
            CloudFoundryApplicationModule appModule=getExistingApplication();
            new UpdateApplicationMemoryAction(editorPage,memory,appModule).run();
          }
 catch (          CoreException ce) {
            logApplicationModuleFailureError(""String_Node_Str"");
          }
        }
      }
    }
  }
);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  instanceSpinner=new Spinner(client,SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).applyTo(instanceSpinner);
  instanceSpinner.setMinimum(0);
  instanceSpinner.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (canUpdate) {
        try {
          CloudFoundryApplicationModule appModule=getExistingApplication();
          new UpdateInstanceCountAction(editorPage,instanceSpinner,appModule).run();
        }
 catch (        CoreException ce) {
          logApplicationModuleFailureError(""String_Node_Str"");
        }
      }
    }
  }
);
  toolkit.adapt(instanceSpinner);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  Button envVarsButton=toolkit.createButton(client,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).applyTo(envVarsButton);
  envVarsButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      try {
        CloudFoundryApplicationModule appModule=getExistingApplication();
        if (appModule != null) {
          EnvVarsWizard wizard=new EnvVarsWizard(cloudServer,appModule);
          WizardDialog dialog=new WizardDialog(editorPage.getEditorSite().getShell(),wizard);
          dialog.open();
        }
      }
 catch (      CoreException ce) {
        logError(""String_Node_Str"" + ce.getMessage());
      }
    }
  }
);
}","private void createGeneralSectionRestartRequired(Composite parent){
  generalSectionRestartRequired=toolkit.createSection(parent,Section.TITLE_BAR);
  generalSectionRestartRequired.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().grab(true,false).applyTo(generalSectionRestartRequired);
  generalSectionRestartRequired.setText(""String_Node_Str"");
  generalSectionRestartRequired.clientVerticalSpacing=0;
  Composite client=toolkit.createComposite(generalSectionRestartRequired);
  client.setLayout(new GridLayout(2,false));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(client);
  generalSectionRestartRequired.setClient(client);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  memoryCombo=new Combo(client,SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.FILL).applyTo(memoryCombo);
  memoryCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (canUpdate) {
        int selectionIndex=memoryCombo.getSelectionIndex();
        if (selectionIndex != -1) {
          memory=editorPage.getApplicationMemoryChoices()[selectionIndex];
          try {
            CloudFoundryApplicationModule appModule=getExistingApplication();
            new UpdateApplicationMemoryAction(editorPage,memory,appModule).run();
          }
 catch (          CoreException ce) {
            logApplicationModuleFailureError(""String_Node_Str"");
          }
        }
      }
    }
  }
);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  Button envVarsButton=toolkit.createButton(client,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).applyTo(envVarsButton);
  envVarsButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      try {
        CloudFoundryApplicationModule appModule=getExistingApplication();
        if (appModule != null) {
          EnvVarsWizard wizard=new EnvVarsWizard(cloudServer,appModule);
          WizardDialog dialog=new WizardDialog(editorPage.getEditorSite().getShell(),wizard);
          dialog.open();
        }
      }
 catch (      CoreException ce) {
        logError(""String_Node_Str"" + ce.getMessage());
      }
    }
  }
);
}",0.7152190622598001
10721,"private void createGeneralSection(Composite parent){
  generalSection=toolkit.createSection(parent,Section.TITLE_BAR);
  generalSection.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().grab(true,false).applyTo(generalSection);
  generalSection.setText(""String_Node_Str"");
  generalSection.clientVerticalSpacing=0;
  Composite client=toolkit.createComposite(generalSection);
  client.setLayout(new GridLayout(2,false));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(client);
  generalSection.setClient(client);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  serverNameText=createText(client,SWT.NONE);
  createLabel(client,""String_Node_Str"",SWT.TOP);
  Composite uriComposite=toolkit.createComposite(client);
  GridLayoutFactory.fillDefaults().numColumns(2).margins(0,0).applyTo(uriComposite);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(uriComposite);
  ImageHyperlink editURI=toolkit.createImageHyperlink(uriComposite,SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).align(SWT.BEGINNING,SWT.TOP).applyTo(editURI);
  editURI.setImage(CloudFoundryImages.getImage(CloudFoundryImages.EDIT));
  editURI.addHyperlinkListener(new HyperlinkAdapter(){
    @Override public void linkActivated(    HyperlinkEvent e){
      try {
        CloudFoundryApplicationModule appModule=getExistingApplication();
        MappedURLsWizard wizard=new MappedURLsWizard(cloudServer,appModule,URIs,isPublished);
        WizardDialog dialog=new WizardDialog(editorPage.getEditorSite().getShell(),wizard);
        if (dialog.open() == Window.OK) {
          CloudApplication application=appModule.getApplication();
          if (application != null) {
            URIs=wizard.getURLs();
            mappedURIsLink.setText(getURIsAsLinkText(wizard.getURLs()));
            generalSection.getParent().layout(true,true);
            editorPage.reflow();
            application.setUris(URIs);
          }
        }
      }
 catch (      CoreException ce) {
        logApplicationModuleFailureError(""String_Node_Str"");
      }
    }
  }
);
  mappedURIsLink=new Link(uriComposite,SWT.MULTI);
  GridDataFactory.fillDefaults().grab(true,false).hint(250,SWT.DEFAULT).applyTo(mappedURIsLink);
  adaptControl(mappedURIsLink);
  mappedURIsLink.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      CloudUiUtil.openUrl(""String_Node_Str"" + e.text);
    }
  }
);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  saveManifest=toolkit.createButton(client,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).applyTo(saveManifest);
  saveManifest.setEnabled(false);
  saveManifest.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      writeToManifest();
    }
  }
);
}","private void createGeneralSection(Composite parent){
  generalSection=toolkit.createSection(parent,Section.TITLE_BAR);
  generalSection.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().grab(true,false).applyTo(generalSection);
  generalSection.setText(""String_Node_Str"");
  generalSection.clientVerticalSpacing=0;
  Composite client=toolkit.createComposite(generalSection);
  client.setLayout(new GridLayout(2,false));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(client);
  generalSection.setClient(client);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  serverNameText=createText(client,SWT.NONE);
  createLabel(client,""String_Node_Str"",SWT.TOP);
  Composite uriComposite=toolkit.createComposite(client);
  GridLayoutFactory.fillDefaults().numColumns(2).margins(0,0).applyTo(uriComposite);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(uriComposite);
  ImageHyperlink editURI=toolkit.createImageHyperlink(uriComposite,SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).align(SWT.BEGINNING,SWT.TOP).applyTo(editURI);
  editURI.setImage(CloudFoundryImages.getImage(CloudFoundryImages.EDIT));
  editURI.addHyperlinkListener(new HyperlinkAdapter(){
    @Override public void linkActivated(    HyperlinkEvent e){
      try {
        CloudFoundryApplicationModule appModule=getExistingApplication();
        MappedURLsWizard wizard=new MappedURLsWizard(cloudServer,appModule,URIs,isPublished);
        WizardDialog dialog=new WizardDialog(editorPage.getEditorSite().getShell(),wizard);
        if (dialog.open() == Window.OK) {
          CloudApplication application=appModule.getApplication();
          if (application != null) {
            URIs=wizard.getURLs();
            mappedURIsLink.setText(getURIsAsLinkText(wizard.getURLs()));
            generalSection.getParent().layout(true,true);
            editorPage.reflow();
            application.setUris(URIs);
          }
        }
      }
 catch (      CoreException ce) {
        logApplicationModuleFailureError(""String_Node_Str"");
      }
    }
  }
);
  mappedURIsLink=new Link(uriComposite,SWT.MULTI);
  GridDataFactory.fillDefaults().grab(true,false).hint(250,SWT.DEFAULT).applyTo(mappedURIsLink);
  adaptControl(mappedURIsLink);
  mappedURIsLink.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      CloudUiUtil.openUrl(""String_Node_Str"" + e.text);
    }
  }
);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  instanceSpinner=new Spinner(client,SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).applyTo(instanceSpinner);
  instanceSpinner.setMinimum(0);
  instanceSpinner.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (canUpdate) {
        try {
          CloudFoundryApplicationModule appModule=getExistingApplication();
          new UpdateInstanceCountAction(editorPage,instanceSpinner,appModule).run();
        }
 catch (        CoreException ce) {
          logApplicationModuleFailureError(""String_Node_Str"");
        }
      }
    }
  }
);
  toolkit.adapt(instanceSpinner);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  saveManifest=toolkit.createButton(client,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).applyTo(saveManifest);
  saveManifest.setEnabled(false);
  saveManifest.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      writeToManifest();
    }
  }
);
}",0.8163265306122449
10722,"public void refreshUI(){
  logError(null);
  resizeTableColumns();
  canUpdate=false;
  CloudFoundryApplicationModule appModule=null;
  try {
    appModule=getUpdatedApplication();
  }
 catch (  CoreException ce) {
    logApplicationModuleFailureError(""String_Node_Str"");
  }
  refreshPublishState(appModule);
  if (appModule == null) {
    return;
  }
  if (saveManifest != null) {
    ManifestParser parser=new ManifestParser(appModule,cloudServer);
    if (!parser.canWriteToManifest()) {
      saveManifest.setEnabled(false);
    }
 else {
      saveManifest.setEnabled(true);
    }
  }
  updateServerNameDisplay(appModule);
  int state=appModule.getState();
  setCurrentStartDebugApplicationAction();
  instanceSpinner.setSelection(appModule.getInstanceCount());
  refreshApplicationDeploymentButtons(appModule);
  mappedURIsLink.setEnabled(state == IServer.STATE_STARTED);
  CloudApplication cloudApplication=appModule.getApplication();
  instanceSpinner.setEnabled(cloudApplication != null);
  instancesViewer.getTable().setEnabled(cloudApplication != null);
  instancesViewer.setInput(null);
  memoryCombo.setEnabled(cloudApplication != null);
  if (cloudApplication != null) {
    int appMemory=appModule.getApplication().getMemory();
    memoryCombo.removeAll();
    boolean found=false;
    int[] applicationMemoryChoices=editorPage.getApplicationMemoryChoices();
    if (applicationMemoryChoices != null) {
      for (      int option : applicationMemoryChoices) {
        memoryCombo.add(option + ""String_Node_Str"");
        if (option == appMemory) {
          int index=memoryCombo.getItemCount() - 1;
          memoryCombo.select(index);
          found=true;
        }
      }
      if (!found && appMemory != 0) {
        memoryCombo.add(appMemory + ""String_Node_Str"",0);
        memoryCombo.select(0);
      }
      memoryCombo.setEnabled(true);
      memoryCombo.redraw();
    }
  }
  List<String> currentURIs=null;
  if (cloudApplication != null) {
    currentURIs=cloudApplication.getUris();
    ApplicationStats applicationStats=appModule.getApplicationStats();
    InstancesInfo instancesInfo=appModule.getInstancesInfo();
    if (applicationStats != null) {
      List<InstanceStats> statss=applicationStats.getRecords();
      List<InstanceInfo> infos=instancesInfo != null ? instancesInfo.getInstances() : null;
      InstanceStatsAndInfo[] statsAndInfos=new InstanceStatsAndInfo[statss.size()];
      for (int i=0; i < statss.size(); i++) {
        InstanceStats stats=statss.get(i);
        InstanceInfo info=null;
        if (infos != null && infos.size() > i) {
          info=infos.get(i);
        }
        statsAndInfos[i]=new InstanceStatsAndInfo(stats,info);
      }
      instancesViewer.setInput(statsAndInfos);
    }
  }
  if (currentURIs == null && !isPublished) {
    currentURIs=appModule.getDeploymentInfo() != null ? appModule.getDeploymentInfo().getUris() : null;
  }
  if (currentURIs == null) {
    currentURIs=Collections.emptyList();
  }
  if (!currentURIs.equals(URIs)) {
    URIs=currentURIs;
    mappedURIsLink.setText(getURIsAsLinkText(URIs));
    generalSection.getParent().layout(true,true);
    editorPage.reflow();
  }
  if (provideServices) {
    List<CloudService> updatedServices=new ArrayList<CloudService>();
    DeploymentInfoWorkingCopy deploymentInfo=appModule.getDeploymentInfoWorkingCopy();
    List<String> serviceNames=deploymentInfo.asServiceBindingList();
    if (serviceNames != null && !serviceNames.isEmpty()) {
      List<CloudService> allServices=editorPage.getServices();
      if (allServices != null) {
        for (        CloudService service : allServices) {
          if (serviceNames.contains(service.getName())) {
            updatedServices.add(service);
          }
        }
        if (!updatedServices.isEmpty()) {
          deploymentInfo.setServices(updatedServices);
          deploymentInfo.save();
        }
      }
      servicesViewer.setInput(updatedServices.toArray(new CloudService[updatedServices.size()]));
    }
    servicesDropListener.setModule(appModule);
    servicesViewer.refresh(true);
  }
  instancesViewer.refresh(true);
  canUpdate=true;
  if (appModule.getErrorMessage() != null) {
    editorPage.setMessage(appModule.getErrorMessage(),IMessageProvider.ERROR);
  }
 else {
    editorPage.setMessage(null,IMessageProvider.ERROR);
  }
}","public void refreshUI(){
  logError(null);
  resizeTableColumns();
  canUpdate=false;
  CloudFoundryApplicationModule appModule=null;
  try {
    appModule=getUpdatedApplication();
  }
 catch (  CoreException ce) {
    logApplicationModuleFailureError(""String_Node_Str"");
  }
  refreshPublishState(appModule);
  if (appModule == null) {
    return;
  }
  if (saveManifest != null) {
    ManifestParser parser=new ManifestParser(appModule,cloudServer);
    if (!parser.canWriteToManifest()) {
      saveManifest.setEnabled(false);
    }
 else {
      saveManifest.setEnabled(true);
    }
  }
  updateServerNameDisplay(appModule);
  int state=appModule.getState();
  setCurrentStartDebugApplicationAction();
  instanceSpinner.setSelection(appModule.getInstanceCount());
  refreshApplicationDeploymentButtons(appModule);
  mappedURIsLink.setEnabled(state == IServer.STATE_STARTED);
  CloudApplication cloudApplication=appModule.getApplication();
  instanceSpinner.setEnabled(cloudApplication != null);
  instancesViewer.getTable().setEnabled(cloudApplication != null);
  instancesViewer.setInput(null);
  memoryCombo.setEnabled(cloudApplication != null);
  if (cloudApplication != null) {
    int appMemory=appModule.getApplication().getMemory();
    int[] applicationMemoryChoices=editorPage.getApplicationMemoryChoices();
    if (applicationMemoryChoices != null && applicationMemoryChoices.length > 0) {
      boolean found=false;
      memoryCombo.removeAll();
      for (      int option : applicationMemoryChoices) {
        memoryCombo.add(option + ""String_Node_Str"");
        if (option == appMemory) {
          int index=memoryCombo.getItemCount() - 1;
          memoryCombo.select(index);
          found=true;
        }
      }
      if (!found && appMemory != 0) {
        memoryCombo.add(appMemory + ""String_Node_Str"",0);
        memoryCombo.select(0);
      }
      memoryCombo.setEnabled(true);
      memoryCombo.redraw();
    }
  }
  List<String> currentURIs=null;
  if (cloudApplication != null) {
    currentURIs=cloudApplication.getUris();
    ApplicationStats applicationStats=appModule.getApplicationStats();
    InstancesInfo instancesInfo=appModule.getInstancesInfo();
    if (applicationStats != null) {
      List<InstanceStats> statss=applicationStats.getRecords();
      List<InstanceInfo> infos=instancesInfo != null ? instancesInfo.getInstances() : null;
      InstanceStatsAndInfo[] statsAndInfos=new InstanceStatsAndInfo[statss.size()];
      for (int i=0; i < statss.size(); i++) {
        InstanceStats stats=statss.get(i);
        InstanceInfo info=null;
        if (infos != null && infos.size() > i) {
          info=infos.get(i);
        }
        statsAndInfos[i]=new InstanceStatsAndInfo(stats,info);
      }
      instancesViewer.setInput(statsAndInfos);
    }
  }
  if (currentURIs == null && !isPublished) {
    currentURIs=appModule.getDeploymentInfo() != null ? appModule.getDeploymentInfo().getUris() : null;
  }
  if (currentURIs == null) {
    currentURIs=Collections.emptyList();
  }
  if (!currentURIs.equals(URIs)) {
    URIs=currentURIs;
    mappedURIsLink.setText(getURIsAsLinkText(URIs));
    generalSection.getParent().layout(true,true);
    editorPage.reflow();
  }
  if (provideServices) {
    List<CloudService> updatedServices=new ArrayList<CloudService>();
    DeploymentInfoWorkingCopy deploymentInfo=appModule.getDeploymentInfoWorkingCopy();
    List<String> serviceNames=deploymentInfo.asServiceBindingList();
    if (serviceNames != null && !serviceNames.isEmpty()) {
      List<CloudService> allServices=editorPage.getServices();
      if (allServices != null) {
        for (        CloudService service : allServices) {
          if (serviceNames.contains(service.getName())) {
            updatedServices.add(service);
          }
        }
        if (!updatedServices.isEmpty()) {
          deploymentInfo.setServices(updatedServices);
          deploymentInfo.save();
        }
      }
      servicesViewer.setInput(updatedServices.toArray(new CloudService[updatedServices.size()]));
    }
    servicesDropListener.setModule(appModule);
    servicesViewer.refresh(true);
  }
  instancesViewer.refresh(true);
  canUpdate=true;
  if (appModule.getErrorMessage() != null) {
    editorPage.setMessage(appModule.getErrorMessage(),IMessageProvider.ERROR);
  }
 else {
    editorPage.setMessage(null,IMessageProvider.ERROR);
  }
}",0.9827211351413204
10723,"/** 
 * Refresh the application modules and reschedules the app module refresh job to execute at certain intervals. This will synch all local application modules with the actual deployed applications. This may be a long running operation.
 * @param monitor
 * @throws CoreException
 */
public void refreshModules(IProgressMonitor monitor) throws CoreException {
synchronized (REFRESH_MODULES) {
    REFRESH_MODULES[0]=true;
  }
  internalRefreshAndFireEvent(monitor);
  restartRefreshJob();
}","/** 
 * Refresh the application modules and reschedules the app module refresh job to execute at certain intervals. This will synch all local application modules with the actual deployed applications. This may be a long running operation.
 * @param monitor
 */
public void refreshModules(IProgressMonitor monitor){
synchronized (REFRESH_MODULES) {
    REFRESH_MODULES[0]=true;
  }
  internalRefreshAndFireEvent(monitor);
  restartRefreshJob();
}",0.9498399146211312
10724,"@Override protected IStatus run(IProgressMonitor monitor){
  if (interval > 0) {
    try {
      internalRefreshAndFireEvent(monitor);
      if (getServer().getServerState() == IServer.STATE_STARTED) {
synchronized (BehaviourRefreshJob.this) {
          if (interval > 0) {
            schedule(interval);
          }
        }
      }
    }
 catch (    CoreException e) {
      CloudFoundryPlugin.getDefault().getLog().log(new Status(IStatus.ERROR,CloudFoundryPlugin.PLUGIN_ID,""String_Node_Str"" + e.getMessage(),e));
    }
  }
  return Status.OK_STATUS;
}","@Override protected IStatus run(IProgressMonitor monitor){
  if (interval > 0) {
    internalRefreshAndFireEvent(monitor);
    if (getServer().getServerState() == IServer.STATE_STARTED) {
synchronized (BehaviourRefreshJob.this) {
        if (interval > 0) {
          schedule(interval);
        }
      }
    }
  }
  return Status.OK_STATUS;
}",0.7444444444444445
10725,"/** 
 * Will fetch the latest list of cloud applications from the server, and update the local module mappings accordingly.
 * @param cloudServer
 * @param monitor
 * @throws CoreException
 * @return true if refresh was performed. False otherwise.
 */
protected boolean internalRefreshModule(IProgressMonitor monitor) throws CoreException {
synchronized (REFRESH_MODULES) {
    if (REFRESH_MODULES[0]) {
      final CloudFoundryServer cloudServer=getCloudFoundryServer();
      List<CloudApplication> applications=getApplications(monitor);
      Map<String,CloudApplication> deployedApplicationsByName=new LinkedHashMap<String,CloudApplication>();
      for (      CloudApplication application : applications) {
        deployedApplicationsByName.put(application.getName(),application);
      }
      cloudServer.updateModules(deployedApplicationsByName);
    }
    return REFRESH_MODULES[0];
  }
}","/** 
 * Will fetch the latest list of cloud applications from the server, and update the local module mappings accordingly.
 * @param cloudServer
 * @param monitor
 * @return true if refresh was performed. False otherwise.
 */
protected boolean internalRefreshModule(IProgressMonitor monitor){
synchronized (REFRESH_MODULES) {
    if (REFRESH_MODULES[0]) {
      try {
        final CloudFoundryServer cloudServer=getCloudFoundryServer();
        List<CloudApplication> applications=getApplications(monitor);
        Map<String,CloudApplication> deployedApplicationsByName=new LinkedHashMap<String,CloudApplication>();
        for (        CloudApplication application : applications) {
          deployedApplicationsByName.put(application.getName(),application);
        }
        cloudServer.updateModules(deployedApplicationsByName);
        return true;
      }
 catch (      Throwable t) {
        CloudFoundryPlugin.logError(""String_Node_Str"" + t.getMessage(),t);
      }
    }
    return false;
  }
}",0.8671916010498688
10726,"/** 
 * Will fetch the latest list of cloud applications from the server, and update local module mappings accordingly. Fires event after refresh operation is complete
 * @param monitor
 * @throws CoreException
 */
protected void internalRefreshAndFireEvent(IProgressMonitor monitor) throws CoreException {
  if (internalRefreshModule(monitor)) {
    ServerEventHandler.getDefault().fireServerRefreshed(getCloudFoundryServer());
  }
}","/** 
 * Will fetch the latest list of cloud applications from the server, and update local module mappings accordingly. Fires event after refresh operation is complete
 * @param monitor
 */
protected void internalRefreshAndFireEvent(IProgressMonitor monitor){
  if (internalRefreshModule(monitor)) {
    try {
      ServerEventHandler.getDefault().fireServerRefreshed(getCloudFoundryServer());
    }
 catch (    CoreException ce) {
      CloudFoundryPlugin.logError(""String_Node_Str"" + ce.getMessage(),ce);
    }
  }
}",0.4495798319327731
10727,"private void update(){
  if (cfServer == null) {
    return;
  }
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      nameLabel.setText(cfServer.getServer().getName() + ""String_Node_Str"");
      int s=cfServer.getServer().getServerState();
      String statusString=""String_Node_Str"";
      if (s == IServer.STATE_STARTED) {
        statusString=""String_Node_Str"";
      }
      statusLabel.setText(statusString);
      connectButton.setEnabled(s != IServer.STATE_STARTED);
      disconnectButton.setEnabled(s == IServer.STATE_STARTED);
      composite.layout(true);
    }
  }
);
}","private void update(){
  if (cfServer == null) {
    return;
  }
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (composite != null && !composite.isDisposed()) {
        nameLabel.setText(cfServer.getServer().getName() + ""String_Node_Str"");
        int s=cfServer.getServer().getServerState();
        String statusString=""String_Node_Str"";
        if (s == IServer.STATE_STARTED) {
          statusString=""String_Node_Str"";
        }
        statusLabel.setText(statusString);
        connectButton.setEnabled(s != IServer.STATE_STARTED);
        disconnectButton.setEnabled(s == IServer.STATE_STARTED);
        composite.layout(true);
      }
    }
  }
);
}",0.926040061633282
10728,"public void run(){
  nameLabel.setText(cfServer.getServer().getName() + ""String_Node_Str"");
  int s=cfServer.getServer().getServerState();
  String statusString=""String_Node_Str"";
  if (s == IServer.STATE_STARTED) {
    statusString=""String_Node_Str"";
  }
  statusLabel.setText(statusString);
  connectButton.setEnabled(s != IServer.STATE_STARTED);
  disconnectButton.setEnabled(s == IServer.STATE_STARTED);
  composite.layout(true);
}","public void run(){
  if (composite != null && !composite.isDisposed()) {
    nameLabel.setText(cfServer.getServer().getName() + ""String_Node_Str"");
    int s=cfServer.getServer().getServerState();
    String statusString=""String_Node_Str"";
    if (s == IServer.STATE_STARTED) {
      statusString=""String_Node_Str"";
    }
    statusLabel.setText(statusString);
    connectButton.setEnabled(s != IServer.STATE_STARTED);
    disconnectButton.setEnabled(s == IServer.STATE_STARTED);
    composite.layout(true);
  }
}",0.9135021097046412
10729,"public <T>void handle(BehaviourEvent<T> event){
  if (event == null || event.getType() == null || event.getServer() == null) {
    String message=null;
    if (event == null) {
      message=""String_Node_Str"";
    }
 else     if (event.getType() == null) {
      message=""String_Node_Str"";
    }
 else     if (event.getServer() == null) {
      message=""String_Node_Str"";
    }
    CloudFoundryPlugin.logError(""String_Node_Str"" + message);
    return;
  }
  CloudFoundryApplicationModule cloudModule=event.getApplicationModule();
  CloudFoundryServer server=event.getServer();
  T resultObj=event.getResult();
switch (event.getType()) {
case APP_PRE_START:
    applicationAboutToStart(server,cloudModule);
  break;
case APP_STARTING:
applicationStarting(server,cloudModule);
break;
case APP_STARTED:
applicationStarted(server,cloudModule);
break;
case APP_STOPPED:
applicationStopped(cloudModule,server);
break;
case APP_DELETE:
deleteApplication(cloudModule,server);
break;
case DISCONNECT:
disconnecting(server);
break;
case PROMPT_CREDENTIALS:
getCredentials(server);
break;
case REFRESH_TUNNEL_CONNECTIONS:
if (resultObj instanceof List<?>) {
displayCaldecottTunnelConnections(server,(List<CaldecottTunnelDescriptor>)resultObj);
}
break;
case SERVICES_DELETED:
if (resultObj instanceof List<?>) {
deleteServices((List<String>)resultObj,server);
}
break;
}
}","public <T>void handle(BehaviourEvent<T> event){
  if (event == null || event.getType() == null || event.getServer() == null) {
    String message=null;
    if (event == null) {
      message=""String_Node_Str"";
    }
 else     if (event.getType() == null) {
      message=""String_Node_Str"";
    }
 else     if (event.getServer() == null) {
      message=""String_Node_Str"";
    }
    CloudFoundryPlugin.logError(""String_Node_Str"" + message);
    return;
  }
  CloudFoundryApplicationModule cloudModule=event.getApplicationModule();
  CloudFoundryServer server=event.getServer();
  T resultObj=event.getResult();
switch (event.getType()) {
case APP_PRE_START:
    applicationAboutToStart(server,cloudModule);
  break;
case APP_STARTING:
applicationStarting(server,cloudModule);
break;
case APP_STARTED:
applicationStarted(server,cloudModule);
break;
case APP_STOPPED:
stopApplicationConsole(cloudModule,server);
break;
case APP_DELETE:
deleteApplication(cloudModule,server);
break;
case DISCONNECT:
disconnecting(server);
break;
case PROMPT_CREDENTIALS:
getCredentials(server);
break;
case REFRESH_TUNNEL_CONNECTIONS:
if (resultObj instanceof List<?>) {
displayCaldecottTunnelConnections(server,(List<CaldecottTunnelDescriptor>)resultObj);
}
break;
case SERVICES_DELETED:
if (resultObj instanceof List<?>) {
deleteServices((List<String>)resultObj,server);
}
break;
}
}",0.9853264856933236
10730,"public Collection<CloudFoundryApplicationModule> getExistingCloudModules(){
  return getData() != null ? getData().getExistingCloudModules() : new ArrayList<CloudFoundryApplicationModule>(0);
}","/** 
 * Does not refresh the list of application modules. Returns the cached list, which may be empty.
 * @return never null. May be empty
 */
public Collection<CloudFoundryApplicationModule> getExistingCloudModules(){
  return getData() != null ? getData().getExistingCloudModules() : new ArrayList<CloudFoundryApplicationModule>(0);
}",0.7296786389413988
10731,"public synchronized Collection<CloudFoundryApplicationModule> getExistingCloudModules(){
  return new ArrayList<CloudFoundryApplicationModule>(cloudModules);
}","/** 
 * @return never null. May be empty
 */
public synchronized Collection<CloudFoundryApplicationModule> getExistingCloudModules(){
  return new ArrayList<CloudFoundryApplicationModule>(cloudModules);
}",0.8760330578512396
10732,"public void disconnect(IProgressMonitor monitor) throws CoreException {
  CloudFoundryPlugin.getCallback().disconnecting(getCloudFoundryServer());
  Server server=(Server)getServer();
  server.setServerState(IServer.STATE_STOPPING);
  stopRefreshModules();
  CloudFoundryServer cloudServer=getCloudFoundryServer();
  Set<CloudFoundryApplicationModule> deletedModules=new HashSet<CloudFoundryApplicationModule>(cloudServer.getExistingCloudModules());
  cloudServer.clearApplications();
  server.setExternalModules(new IModule[0]);
  for (  CloudFoundryApplicationModule module : deletedModules) {
    server.setModuleState(new IModule[]{module.getLocalModule()},IServer.STATE_UNKNOWN);
  }
  server.setServerState(IServer.STATE_STOPPED);
  server.setServerPublishState(IServer.PUBLISH_STATE_NONE);
  closeCaldecottTunnels(monitor);
}","public void disconnect(IProgressMonitor monitor) throws CoreException {
  CloudFoundryPlugin.getCallback().disconnecting(getCloudFoundryServer());
  Server server=(Server)getServer();
  server.setServerState(IServer.STATE_STOPPING);
  stopRefreshModules();
  CloudFoundryServer cloudServer=getCloudFoundryServer();
  Collection<CloudFoundryApplicationModule> cloudModules=cloudServer.getExistingCloudModules();
  for (  CloudFoundryApplicationModule appModule : cloudModules) {
    CloudFoundryPlugin.getCallback().stopApplicationConsole(appModule,cloudServer);
  }
  Set<CloudFoundryApplicationModule> deletedModules=new HashSet<CloudFoundryApplicationModule>(cloudModules);
  cloudServer.clearApplications();
  server.setExternalModules(new IModule[0]);
  for (  CloudFoundryApplicationModule module : deletedModules) {
    server.setModuleState(new IModule[]{module.getLocalModule()},IServer.STATE_UNKNOWN);
  }
  server.setServerState(IServer.STATE_STOPPED);
  server.setServerPublishState(IServer.PUBLISH_STATE_NONE);
  closeCaldecottTunnels(monitor);
}",0.817989417989418
10733,"protected void performOperation(IProgressMonitor monitor) throws CoreException {
  appModule=prepareForDeployment(monitor);
  IStatus validationStatus=appModule.validateDeploymentInfo();
  if (!validationStatus.isOK()) {
    throw CloudErrorUtil.toCoreException(""String_Node_Str"" + appModule.getDeployedApplicationName() + ERROR_RESULT_MESSAGE+ ""String_Node_Str""+ validationStatus.getMessage());
  }
  try {
    CloudFoundryServer cloudServer=getCloudFoundryServer();
    boolean debug=appModule.getDeploymentInfo().getDeploymentMode() == ApplicationAction.DEBUG;
    performDeployment(appModule,monitor);
    if (debug) {
      new DebugCommandBuilder(modules,cloudServer).getDebugCommand(ApplicationAction.CONNECT_TO_DEBUGGER,null).run(monitor);
    }
    if (TunnelBehaviour.isCaldecottApp(appModule.getDeployedApplicationName())) {
      new TunnelBehaviour(cloudServer).stopAndDeleteAllTunnels(monitor);
    }
    internalUpdateApplicationInstanceStats(appModule,monitor);
  }
 catch (  OperationCanceledException e) {
    ((Server)getServer()).setModuleState(modules,IServer.STATE_UNKNOWN);
  }
}","protected void performOperation(IProgressMonitor monitor) throws CoreException {
  appModule=prepareForDeployment(monitor);
  IStatus validationStatus=appModule.validateDeploymentInfo();
  if (!validationStatus.isOK()) {
    throw CloudErrorUtil.toCoreException(""String_Node_Str"" + appModule.getDeployedApplicationName() + ERROR_RESULT_MESSAGE+ ""String_Node_Str""+ validationStatus.getMessage());
  }
  try {
    CloudFoundryServer cloudServer=getCloudFoundryServer();
    CloudFoundryPlugin.getCallback().stopApplicationConsole(appModule,cloudServer);
    boolean debug=appModule.getDeploymentInfo().getDeploymentMode() == ApplicationAction.DEBUG;
    performDeployment(appModule,monitor);
    if (debug) {
      new DebugCommandBuilder(modules,cloudServer).getDebugCommand(ApplicationAction.CONNECT_TO_DEBUGGER,null).run(monitor);
    }
    if (TunnelBehaviour.isCaldecottApp(appModule.getDeployedApplicationName())) {
      new TunnelBehaviour(cloudServer).stopAndDeleteAllTunnels(monitor);
    }
    internalUpdateApplicationInstanceStats(appModule,monitor);
  }
 catch (  OperationCanceledException e) {
    ((Server)getServer()).setModuleState(modules,IServer.STATE_UNKNOWN);
  }
}",0.9632867132867132
10734,"public ApplicationOperation getStopAppOperation(IModule[] modules){
  return new ApplicationOperation(modules){
    @Override protected void performDeployment(    CloudFoundryApplicationModule appModule,    IProgressMonitor monitor) throws CoreException {
      Server server=(Server)getServer();
      boolean succeeded=false;
      try {
        server.setModuleState(modules,IServer.STATE_STOPPING);
        CloudFoundryServer cloudServer=getCloudFoundryServer();
        final CloudFoundryApplicationModule cloudModule=cloudServer.getExistingCloudModule(modules[0]);
        if (cloudModule == null) {
          throw CloudErrorUtil.toCoreException(""String_Node_Str"" + modules[0].getName());
        }
        new Request<Void>(){
          @Override protected Void doRun(          CloudFoundryOperations client,          SubMonitor progress) throws CoreException {
            client.stopApplication(cloudModule.getDeployedApplicationName());
            return null;
          }
        }
.run(monitor);
        server.setModuleState(modules,IServer.STATE_STOPPED);
        succeeded=true;
        CloudFoundryPlugin.getCallback().applicationStopped(cloudModule,cloudServer);
        if (TunnelBehaviour.isCaldecottApp(cloudModule.getDeployedApplicationName())) {
          TunnelBehaviour handler=new TunnelBehaviour(cloudServer);
          handler.stopAndDeleteAllTunnels(monitor);
        }
      }
  finally {
        if (!succeeded) {
          server.setModuleState(modules,IServer.STATE_UNKNOWN);
        }
      }
    }
  }
;
}","public ApplicationOperation getStopAppOperation(IModule[] modules){
  return new ApplicationOperation(modules){
    @Override protected void performDeployment(    CloudFoundryApplicationModule appModule,    IProgressMonitor monitor) throws CoreException {
      Server server=(Server)getServer();
      boolean succeeded=false;
      try {
        server.setModuleState(modules,IServer.STATE_STOPPING);
        CloudFoundryServer cloudServer=getCloudFoundryServer();
        final CloudFoundryApplicationModule cloudModule=cloudServer.getExistingCloudModule(modules[0]);
        if (cloudModule == null) {
          throw CloudErrorUtil.toCoreException(""String_Node_Str"" + modules[0].getName());
        }
        new Request<Void>(){
          @Override protected Void doRun(          CloudFoundryOperations client,          SubMonitor progress) throws CoreException {
            client.stopApplication(cloudModule.getDeployedApplicationName());
            return null;
          }
        }
.run(monitor);
        server.setModuleState(modules,IServer.STATE_STOPPED);
        succeeded=true;
        CloudFoundryPlugin.getCallback().stopApplicationConsole(cloudModule,cloudServer);
        if (TunnelBehaviour.isCaldecottApp(cloudModule.getDeployedApplicationName())) {
          TunnelBehaviour handler=new TunnelBehaviour(cloudServer);
          handler.stopAndDeleteAllTunnels(monitor);
        }
      }
  finally {
        if (!succeeded) {
          server.setModuleState(modules,IServer.STATE_UNKNOWN);
        }
      }
    }
  }
;
}",0.9870382372002592
10735,"@Override public void deleteApplication(CloudFoundryApplicationModule cloudModule,CloudFoundryServer cloudServer){
  applicationStopped(cloudModule,cloudServer);
}","@Override public void deleteApplication(CloudFoundryApplicationModule cloudModule,CloudFoundryServer cloudServer){
  stopApplicationConsole(cloudModule,cloudServer);
}",0.9515151515151516
10736,"public abstract void stopApplicationConsole(CloudFoundryApplicationModule cloudModule,CloudFoundryServer cloudServer);","/** 
 * Stops all consoles for the given application for all application instances.
 * @param cloudModule
 * @param cloudServer
 */
public abstract void stopApplicationConsole(CloudFoundryApplicationModule cloudModule,CloudFoundryServer cloudServer);",0.6413043478260869
10737,"/** 
 * This will restart an application in run mode. It does not restart an application in debug mode. Does not push application resources or create the application. The application must exist in the CloudFoundry server.
 * @param modules
 * @throws CoreException
 */
public ApplicationOperation getRestartOperation(IModule[] modules) throws CoreException {
  return new RestartOperation(modules);
}","/** 
 * This will restart an application in run mode. It does not restart an application in debug mode. Does not push application resources or create the application. The application must exist in the CloudFoundry server.
 * @param modules
 * @throws CoreException
 */
public BehaviourOperation getRestartOperation(IModule[] modules) throws CoreException {
  return new RestartOperation(modules);
}",0.974937343358396
10738,"@Override public void startModule(IModule[] modules,IProgressMonitor monitor) throws CoreException {
  ApplicationOperation operation=getDeployStartApplicationOperation(modules,false);
  operation.run(monitor);
}","@Override public void startModule(IModule[] modules,IProgressMonitor monitor) throws CoreException {
  BehaviourOperation operation=getDeployStartApplicationOperation(modules,false);
  operation.run(monitor);
}",0.95260663507109
10739,"public CloudFoundryApplicationModule startModuleWaitForDeployment(IModule[] modules,IProgressMonitor monitor) throws CoreException {
  ApplicationOperation operation=getDeployStartApplicationOperation(modules,true);
  operation.run(monitor);
  return operation.getApplicationModule();
}","public CloudFoundryApplicationModule startModuleWaitForDeployment(IModule[] modules,IProgressMonitor monitor) throws CoreException {
  ApplicationOperation operation=internalGetDeployStartApplicationOperation(modules,true);
  operation.run(monitor);
  return operation.getApplicationModule();
}",0.9827586206896552
10740,"/** 
 * Update restart republishes redeploys the application with changes. This is not the same as restarting an application which simply restarts the application in its current server version without receiving any local changes. It will only update restart an application in regular run mode. It does not support debug mode.Publishing of changes is done incrementally.
 * @param modules
 * @param isIncrementalPublishing true if optimised incremental publishingshould be enabled. False otherwise
 * @throws CoreException
 */
public ApplicationOperation getUpdateRestartOperation(IModule[] modules,boolean isIncrementalPublishing) throws CoreException {
  return getDeployStartApplicationOperation(isIncrementalPublishing,modules,false);
}","/** 
 * Update restart republishes redeploys the application with changes. This is not the same as restarting an application which simply restarts the application in its current server version without receiving any local changes. It will only update restart an application in regular run mode. It does not support debug mode.Publishing of changes is done incrementally.
 * @param modules
 * @param isIncrementalPublishing true if optimised incremental publishingshould be enabled. False otherwise
 * @throws CoreException
 */
public BehaviourOperation getUpdateRestartOperation(IModule[] modules,boolean isIncrementalPublishing) throws CoreException {
  return getDeployStartApplicationOperation(isIncrementalPublishing,modules,false);
}",0.986449864498645
10741,"@Override public void applicationStarted(final CloudFoundryServer server,final CloudFoundryApplicationModule cloudModule){
  for (int i=0; i < cloudModule.getApplication().getInstances(); i++) {
    boolean shouldClearConsole=false;
    ConsoleContents content=ConsoleContents.getStandardLogContent(server,cloudModule.getApplication(),i);
    ConsoleManager.getInstance().startConsole(server,content,cloudModule.getApplication(),i,i == 0,shouldClearConsole);
  }
}","@Override public void applicationStarted(final CloudFoundryServer server,final CloudFoundryApplicationModule cloudModule){
  startApplicationConsole(server,cloudModule,0);
}",0.5306122448979592
10742,"public ShowConsoleAction(CloudFoundryServer server,CloudApplication app,int instanceIndex){
  this.server=server;
  this.app=app;
  this.instanceIndex=instanceIndex;
  setText(""String_Node_Str"");
}","public ShowConsoleAction(CloudFoundryServer server,CloudFoundryApplicationModule appModule,int instanceIndex){
  this.server=server;
  this.appModule=appModule;
  this.instanceIndex=instanceIndex;
  setText(""String_Node_Str"");
}",0.908235294117647
10743,"@Override public void run(){
  ConsoleContents content=ConsoleContents.getStandardLogContent(server,app,instanceIndex);
  ConsoleManager.getInstance().startConsole(server,content,app,instanceIndex,true,true);
}","@Override public void run(){
  if (CloudFoundryPlugin.getCallback() != null) {
    CloudFoundryPlugin.getCallback().stopApplicationConsole(appModule,server);
    CloudFoundryPlugin.getCallback().startApplicationConsole(server,appModule,instanceIndex);
  }
 else {
    CloudFoundryPlugin.logError(""String_Node_Str"");
  }
}",0.1506591337099811
10744,"private void createGeneralSectionRestartRequired(Composite parent){
  generalSectionRestartRequired=toolkit.createSection(parent,Section.TITLE_BAR);
  generalSectionRestartRequired.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().grab(true,false).applyTo(generalSectionRestartRequired);
  generalSectionRestartRequired.setText(""String_Node_Str"");
  generalSectionRestartRequired.clientVerticalSpacing=0;
  Composite client=toolkit.createComposite(generalSectionRestartRequired);
  client.setLayout(new GridLayout(2,false));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(client);
  generalSectionRestartRequired.setClient(client);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  memoryCombo=new Combo(client,SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.FILL).applyTo(memoryCombo);
  memoryCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (canUpdate) {
        int selectionIndex=memoryCombo.getSelectionIndex();
        if (selectionIndex != -1) {
          memory=editorPage.getApplicationMemoryChoices()[selectionIndex];
          try {
            CloudFoundryApplicationModule appModule=getExistingApplication();
            new UpdateApplicationMemoryAction(editorPage,memory,appModule).run();
          }
 catch (          CoreException ce) {
            logApplicationModuleFailureError(""String_Node_Str"");
          }
        }
      }
    }
  }
);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  Button envVarsButton=toolkit.createButton(client,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).applyTo(envVarsButton);
  envVarsButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      try {
        CloudFoundryApplicationModule appModule=getExistingApplication();
        if (appModule != null) {
          EnvVarsWizard wizard=new EnvVarsWizard(cloudServer,appModule);
          WizardDialog dialog=new WizardDialog(editorPage.getEditorSite().getShell(),wizard);
          dialog.open();
        }
      }
 catch (      CoreException ce) {
        logError(""String_Node_Str"" + ce.getMessage());
      }
    }
  }
);
}","private void createGeneralSectionRestartRequired(Composite parent){
  generalSectionRestartRequired=toolkit.createSection(parent,Section.TITLE_BAR);
  generalSectionRestartRequired.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().grab(true,false).applyTo(generalSectionRestartRequired);
  generalSectionRestartRequired.setText(""String_Node_Str"");
  generalSectionRestartRequired.clientVerticalSpacing=0;
  Composite client=toolkit.createComposite(generalSectionRestartRequired);
  client.setLayout(new GridLayout(2,false));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(client);
  generalSectionRestartRequired.setClient(client);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  memoryCombo=new Combo(client,SWT.BORDER);
  int comboMinimumWidth=70;
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.FILL).hint(comboMinimumWidth,SWT.DEFAULT).applyTo(memoryCombo);
  memoryCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (canUpdate) {
        int selectionIndex=memoryCombo.getSelectionIndex();
        if (selectionIndex != -1) {
          memory=editorPage.getApplicationMemoryChoices()[selectionIndex];
          try {
            CloudFoundryApplicationModule appModule=getExistingApplication();
            new UpdateApplicationMemoryAction(editorPage,memory,appModule).run();
          }
 catch (          CoreException ce) {
            logApplicationModuleFailureError(""String_Node_Str"");
          }
        }
      }
    }
  }
);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  Button envVarsButton=toolkit.createButton(client,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).applyTo(envVarsButton);
  envVarsButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      try {
        CloudFoundryApplicationModule appModule=getExistingApplication();
        if (appModule != null) {
          EnvVarsWizard wizard=new EnvVarsWizard(cloudServer,appModule);
          WizardDialog dialog=new WizardDialog(editorPage.getEditorSite().getShell(),wizard);
          dialog.open();
        }
      }
 catch (      CoreException ce) {
        logError(""String_Node_Str"" + ce.getMessage());
      }
    }
  }
);
}",0.9859956236323852
10745,"private void fillInstancesContextMenu(IMenuManager manager){
  IStructuredSelection selection=(IStructuredSelection)instancesViewer.getSelection();
  if (selection.isEmpty()) {
    return;
  }
  Object instanceObject=selection.getFirstElement();
  if (instanceObject instanceof InstanceStatsAndInfo) {
    InstanceStats stats=((InstanceStatsAndInfo)instanceObject).getStats();
    if (stats != null) {
      try {
        CloudFoundryApplicationModule appModule=getExistingApplication();
        manager.add(new ShowConsoleAction(cloudServer,appModule.getApplication(),Integer.parseInt(stats.getId())));
      }
 catch (      CoreException ce) {
        logApplicationModuleFailureError(""String_Node_Str"");
      }
catch (      NumberFormatException e) {
      }
    }
  }
}","private void fillInstancesContextMenu(IMenuManager manager){
  IStructuredSelection selection=(IStructuredSelection)instancesViewer.getSelection();
  if (selection.isEmpty()) {
    return;
  }
  Object instanceObject=selection.getFirstElement();
  if (instanceObject instanceof InstanceStatsAndInfo) {
    InstanceStats stats=((InstanceStatsAndInfo)instanceObject).getStats();
    if (stats != null) {
      try {
        CloudFoundryApplicationModule appModule=getExistingApplication();
        manager.add(new ShowConsoleAction(cloudServer,appModule,Integer.parseInt(stats.getId())));
      }
 catch (      CoreException ce) {
        logApplicationModuleFailureError(""String_Node_Str"");
      }
catch (      NumberFormatException e) {
      }
    }
  }
}",0.9888961463096017
10746,"@Override public void enter(){
  initServer();
  credentialsPart.setServer(cloudServer);
  if (validator != null && wizardListener != null) {
    ValidationStatus lastStatus=validator.validate(false);
    wizardListener.handleChange(lastStatus.getStatus());
  }
}","@Override public void enter(){
  initServer();
  credentialsPart.setServer(cloudServer);
  if (validator != null && wizardListener != null) {
    ValidationStatus lastStatus=validator.getPreviousValidationStatus();
    if (lastStatus == null || lastStatus.getStatus().getSeverity() != IStatus.ERROR) {
      lastStatus=validator.validate(false);
    }
    wizardListener.handleChange(lastStatus.getStatus());
  }
}",0.7503692762186115
10747,"@Override public void performFinish(IProgressMonitor monitor) throws CoreException {
  if (!validator.isValid()) {
    final IStatus[] validationStatus={Status.OK_STATUS};
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        ValidationStatus status=validator.validate(true);
        validationStatus[0]=status.getStatus();
      }
    }
);
    if (!validationStatus[0].isOK()) {
      throw new CoreException(validationStatus[0]);
    }
  }
  ServerLifecycleAdapter listener=new ServerLifecycleAdapter(){
    @Override public void serverAdded(    IServer server){
      ServerCore.removeServerLifecycleListener(this);
      Job job=new ConnectJob(cloudServer,server);
      job.schedule(500L);
    }
  }
;
  ServerCore.addServerLifecycleListener(listener);
}","@Override public void performFinish(IProgressMonitor monitor) throws CoreException {
  if (!validator.validate(false).getStatus().isOK()) {
    final IStatus[] validationStatus={Status.OK_STATUS};
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        ValidationStatus status=validator.validate(true);
        validationStatus[0]=status.getStatus();
      }
    }
);
    if (!validationStatus[0].isOK()) {
      throw new CoreException(validationStatus[0]);
    }
  }
  ServerLifecycleAdapter listener=new ServerLifecycleAdapter(){
    @Override public void serverAdded(    IServer server){
      ServerCore.removeServerLifecycleListener(this);
      Job job=new ConnectJob(cloudServer,server);
      job.schedule(500L);
    }
  }
;
  ServerCore.addServerLifecycleListener(listener);
}",0.9756402248594628
10748,"protected boolean hasManifest(){
  File file=getFile();
  return file != null && file.exists();
}","/** 
 * @return true if the application has an accessible manifest file thatexists. False otherwise, even if the application does have a manifest file. A false in this case would mean the file is not accessible.
 */
public boolean hasManifest(){
  File file=getFile();
  return file != null && file.exists();
}",0.4373464373464373
10749,"/** 
 * Schedules the refresh job after the given interval. If the job it will complete before scheduling the next refresh.
 * @param initialWait how long the job should wait before starting. Ifzero or less, interval will be used as the starting wait time.
 * @param interval how long to wait before the job runs again
 */
public void reschedule(long initialWait,long interval){
  this.interval=interval;
  if (interval > 0) {
    long initial=initialWait > 0 ? initialWait : interval;
    schedule(initial);
  }
}","/** 
 * Schedules the refresh job after the given interval. If the job it will complete before scheduling the next refresh.
 * @param initialWait how long the job should wait before starting. Ifzero or less, interval will be used as the starting wait time.
 * @param interval how long to wait before the job runs again
 */
public void reschedule(long initialWait,long interval){
synchronized (BehaviourRefreshJob.this) {
    this.interval=interval;
    if (interval > 0) {
      long initial=initialWait > 0 ? initialWait : interval;
      schedule(initial);
    }
  }
}",0.9372693726937268
10750,"public DeploymentConfiguration getDeploymentConfiguration(IProgressMonitor monitor) throws CoreException {
  return new Request<DeploymentConfiguration>(""String_Node_Str""){
    @Override protected DeploymentConfiguration doRun(    CloudFoundryOperations client,    SubMonitor progress) throws CoreException {
      DeploymentConfiguration configuration=new DeploymentConfiguration(getApplicationMemoryChoices());
      client.getServices();
      return configuration;
    }
  }
.run(monitor);
}","public DeploymentConfiguration getDeploymentConfiguration(IProgressMonitor monitor) throws CoreException {
  return new Request<DeploymentConfiguration>(""String_Node_Str""){
    @Override protected DeploymentConfiguration doRun(    CloudFoundryOperations client,    SubMonitor progress) throws CoreException {
      DeploymentConfiguration configuration=new DeploymentConfiguration(client.getApplicationMemoryChoices());
      client.getServices();
      return configuration;
    }
  }
.run(monitor);
}",0.9929789368104311
10751,"public int[] getApplicationMemoryChoices(){
  if (client != null) {
    return client.getApplicationMemoryChoices();
  }
  return new int[0];
}","public int[] getApplicationMemoryChoices(IProgressMonitor monitor) throws CoreException {
  return new Request<int[]>(""String_Node_Str""){
    @Override protected int[] doRun(    CloudFoundryOperations client,    SubMonitor progress) throws CoreException {
      return client.getApplicationMemoryChoices();
    }
  }
.run(monitor);
}",0.4411764705882353
10752,"/** 
 * @return an updated cloud application module. If it did not previouslyexist, it will attempt to create it. Never null as requesting an app module during the lifecycle of the editor should always result in non-null app.
 * @throws CoreException if application does not exist
 */
protected CloudFoundryApplicationModule getUpdatedApplication() throws CoreException {
  CloudFoundryApplicationModule appModule=cloudServer.getCloudModule(module);
  if (appModule == null) {
    String errorMessage=""String_Node_Str"" + module.getId();
    throw CloudErrorUtil.toCoreException(errorMessage);
  }
  return appModule;
}","/** 
 * @return an updated cloud application module. If it did not previouslyexist, it will attempt to create it. Never null as requesting an app module during the lifecycle of the editor should always result in non-null app.
 * @throws CoreException if application does not exist
 */
protected CloudFoundryApplicationModule getUpdatedApplication() throws CoreException {
  CloudFoundryApplicationModule appModule=cloudServer.getCloudModule(module);
  if (appModule == null) {
    String errorMessage=""String_Node_Str"" + (module != null ? ""String_Node_Str"" + module.getId() : ""String_Node_Str"");
    throw CloudErrorUtil.toCoreException(errorMessage);
  }
  return appModule;
}",0.9544401544401544
10753,"private void createGeneralSection(Composite parent){
  generalSection=toolkit.createSection(parent,Section.TITLE_BAR);
  generalSection.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().grab(true,false).applyTo(generalSection);
  generalSection.setText(""String_Node_Str"");
  generalSection.clientVerticalSpacing=0;
  Composite client=toolkit.createComposite(generalSection);
  client.setLayout(new GridLayout(2,false));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(client);
  generalSection.setClient(client);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  serverNameText=createText(client,SWT.NONE);
  createLabel(client,""String_Node_Str"",SWT.TOP);
  Composite uriComposite=toolkit.createComposite(client);
  GridLayoutFactory.fillDefaults().numColumns(2).margins(0,0).applyTo(uriComposite);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(uriComposite);
  ImageHyperlink editURI=toolkit.createImageHyperlink(uriComposite,SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).align(SWT.BEGINNING,SWT.TOP).applyTo(editURI);
  editURI.setImage(CloudFoundryImages.getImage(CloudFoundryImages.EDIT));
  editURI.addHyperlinkListener(new HyperlinkAdapter(){
    @Override public void linkActivated(    HyperlinkEvent e){
      try {
        CloudFoundryApplicationModule appModule=getExistingApplication();
        MappedURLsWizard wizard=new MappedURLsWizard(cloudServer,appModule,URIs,isPublished);
        WizardDialog dialog=new WizardDialog(editorPage.getEditorSite().getShell(),wizard);
        if (dialog.open() == Window.OK) {
          CloudApplication application=appModule.getApplication();
          if (application != null) {
            URIs=wizard.getURLs();
            mappedURIsLink.setText(getURIsAsLinkText(wizard.getURLs()));
            generalSection.getParent().layout(true,true);
            editorPage.reflow();
            application.setUris(URIs);
          }
        }
      }
 catch (      CoreException ce) {
        logApplicationModuleFailureError(""String_Node_Str"");
      }
    }
  }
);
  mappedURIsLink=new Link(uriComposite,SWT.MULTI);
  GridDataFactory.fillDefaults().grab(true,false).hint(250,SWT.DEFAULT).applyTo(mappedURIsLink);
  adaptControl(mappedURIsLink);
  mappedURIsLink.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      CloudUiUtil.openUrl(""String_Node_Str"" + e.text);
    }
  }
);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  Composite memoryComposite=toolkit.createComposite(client);
  GridLayoutFactory.fillDefaults().margins(0,0).numColumns(2).equalWidth(false).applyTo(memoryComposite);
  memoryCombo=new Combo(memoryComposite,SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.FILL).applyTo(memoryCombo);
  memoryCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (canUpdate) {
        int selectionIndex=memoryCombo.getSelectionIndex();
        if (selectionIndex != -1) {
          memory=editorPage.getApplicationMemoryChoices()[selectionIndex];
          try {
            CloudFoundryApplicationModule appModule=getExistingApplication();
            new UpdateApplicationMemoryAction(editorPage,memory,appModule).run();
          }
 catch (          CoreException ce) {
            logApplicationModuleFailureError(""String_Node_Str"");
          }
        }
      }
    }
  }
);
  memoryNoteLabel=toolkit.createLabel(memoryComposite,""String_Node_Str"");
  GridDataFactory.fillDefaults().align(SWT.RIGHT,SWT.CENTER).applyTo(memoryNoteLabel);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  instanceSpinner=new Spinner(client,SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).applyTo(instanceSpinner);
  instanceSpinner.setMinimum(0);
  instanceSpinner.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (canUpdate) {
        try {
          CloudFoundryApplicationModule appModule=getExistingApplication();
          new UpdateInstanceCountAction(editorPage,instanceSpinner,appModule).run();
        }
 catch (        CoreException ce) {
          logApplicationModuleFailureError(""String_Node_Str"");
        }
      }
    }
  }
);
  toolkit.adapt(instanceSpinner);
  buttonComposite=toolkit.createComposite(client);
  GridDataFactory.fillDefaults().span(2,1).applyTo(buttonComposite);
  RowLayout layout=RowLayoutFactory.fillDefaults().margins(0,5).wrap(false).create();
  layout.center=true;
  buttonComposite.setLayout(layout);
  startAppButton=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  startAppButton.setImage(ImageResource.getImage(ImageResource.IMG_CLCL_START));
  startAppButton.setEnabled(true);
  startAppButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      startStopApplication(ApplicationAction.START);
    }
  }
);
  stopAppButton=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  stopAppButton.setImage(ImageResource.getImage(ImageResource.IMG_CLCL_STOP));
  stopAppButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      startStopApplication(ApplicationAction.STOP);
    }
  }
);
  ApplicationAction[] restartActions=isDebugAllowed() ? new ApplicationAction[]{ApplicationAction.START,ApplicationAction.DEBUG} : null;
  restartAppButton=new ApplicationActionMenuControl(buttonComposite,restartActions,ApplicationAction.START,""String_Node_Str"",CloudFoundryImages.getImage(CloudFoundryImages.RESTART),toolkit){
    public void setDefaultTooltipMessage(){
    }
  }
;
  restartAppButton.createControl();
  restartAppButton.addMenuListener(new IButtonMenuListener(){
    public void widgetSelected(    ApplicationAction actionType){
      restartApplication(ApplicationAction.RESTART,actionType);
    }
  }
);
  updateRestartAppButton=new ApplicationActionMenuControl(buttonComposite,restartActions,ApplicationAction.START,""String_Node_Str"",CloudFoundryImages.getImage(CloudFoundryImages.RESTART),toolkit){
    public void setDefaultTooltipMessage(){
    }
  }
;
  updateRestartAppButton.createControl();
  updateRestartAppButton.addMenuListener(new IButtonMenuListener(){
    public void widgetSelected(    ApplicationAction actionType){
      restartApplication(ApplicationAction.UPDATE_RESTART,actionType);
    }
  }
);
}","private void createGeneralSection(Composite parent){
  generalSection=toolkit.createSection(parent,Section.TITLE_BAR);
  generalSection.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().grab(true,false).applyTo(generalSection);
  generalSection.setText(""String_Node_Str"");
  generalSection.clientVerticalSpacing=0;
  Composite client=toolkit.createComposite(generalSection);
  client.setLayout(new GridLayout(2,false));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(client);
  generalSection.setClient(client);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  serverNameText=createText(client,SWT.NONE);
  createLabel(client,""String_Node_Str"",SWT.TOP);
  Composite uriComposite=toolkit.createComposite(client);
  GridLayoutFactory.fillDefaults().numColumns(2).margins(0,0).applyTo(uriComposite);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(uriComposite);
  ImageHyperlink editURI=toolkit.createImageHyperlink(uriComposite,SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).align(SWT.BEGINNING,SWT.TOP).applyTo(editURI);
  editURI.setImage(CloudFoundryImages.getImage(CloudFoundryImages.EDIT));
  editURI.addHyperlinkListener(new HyperlinkAdapter(){
    @Override public void linkActivated(    HyperlinkEvent e){
      try {
        CloudFoundryApplicationModule appModule=getExistingApplication();
        MappedURLsWizard wizard=new MappedURLsWizard(cloudServer,appModule,URIs,isPublished);
        WizardDialog dialog=new WizardDialog(editorPage.getEditorSite().getShell(),wizard);
        if (dialog.open() == Window.OK) {
          CloudApplication application=appModule.getApplication();
          if (application != null) {
            URIs=wizard.getURLs();
            mappedURIsLink.setText(getURIsAsLinkText(wizard.getURLs()));
            generalSection.getParent().layout(true,true);
            editorPage.reflow();
            application.setUris(URIs);
          }
        }
      }
 catch (      CoreException ce) {
        logApplicationModuleFailureError(""String_Node_Str"");
      }
    }
  }
);
  mappedURIsLink=new Link(uriComposite,SWT.MULTI);
  GridDataFactory.fillDefaults().grab(true,false).hint(250,SWT.DEFAULT).applyTo(mappedURIsLink);
  adaptControl(mappedURIsLink);
  mappedURIsLink.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      CloudUiUtil.openUrl(""String_Node_Str"" + e.text);
    }
  }
);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  Composite memoryComposite=toolkit.createComposite(client);
  GridLayoutFactory.fillDefaults().margins(0,0).numColumns(2).equalWidth(false).applyTo(memoryComposite);
  memoryCombo=new Combo(memoryComposite,SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.FILL).applyTo(memoryCombo);
  memoryCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (canUpdate) {
        int selectionIndex=memoryCombo.getSelectionIndex();
        if (selectionIndex != -1) {
          memory=editorPage.getApplicationMemoryChoices()[selectionIndex];
          try {
            CloudFoundryApplicationModule appModule=getExistingApplication();
            new UpdateApplicationMemoryAction(editorPage,memory,appModule).run();
          }
 catch (          CoreException ce) {
            logApplicationModuleFailureError(""String_Node_Str"");
          }
        }
      }
    }
  }
);
  memoryNoteLabel=toolkit.createLabel(memoryComposite,""String_Node_Str"");
  GridDataFactory.fillDefaults().align(SWT.RIGHT,SWT.CENTER).applyTo(memoryNoteLabel);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  instanceSpinner=new Spinner(client,SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).applyTo(instanceSpinner);
  instanceSpinner.setMinimum(0);
  instanceSpinner.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (canUpdate) {
        try {
          CloudFoundryApplicationModule appModule=getExistingApplication();
          new UpdateInstanceCountAction(editorPage,instanceSpinner,appModule).run();
        }
 catch (        CoreException ce) {
          logApplicationModuleFailureError(""String_Node_Str"");
        }
      }
    }
  }
);
  toolkit.adapt(instanceSpinner);
  createLabel(client,""String_Node_Str"",SWT.CENTER);
  saveManifest=toolkit.createButton(client,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).applyTo(saveManifest);
  saveManifest.setEnabled(false);
  saveManifest.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      writeToManifest();
    }
  }
);
  buttonComposite=toolkit.createComposite(client);
  GridDataFactory.fillDefaults().span(2,1).applyTo(buttonComposite);
  RowLayout layout=RowLayoutFactory.fillDefaults().margins(0,5).wrap(false).create();
  layout.center=true;
  buttonComposite.setLayout(layout);
  startAppButton=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  startAppButton.setImage(ImageResource.getImage(ImageResource.IMG_CLCL_START));
  startAppButton.setEnabled(true);
  startAppButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      startStopApplication(ApplicationAction.START);
    }
  }
);
  stopAppButton=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  stopAppButton.setImage(ImageResource.getImage(ImageResource.IMG_CLCL_STOP));
  stopAppButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      startStopApplication(ApplicationAction.STOP);
    }
  }
);
  ApplicationAction[] restartActions=isDebugAllowed() ? new ApplicationAction[]{ApplicationAction.START,ApplicationAction.DEBUG} : null;
  restartAppButton=new ApplicationActionMenuControl(buttonComposite,restartActions,ApplicationAction.START,""String_Node_Str"",CloudFoundryImages.getImage(CloudFoundryImages.RESTART),toolkit){
    public void setDefaultTooltipMessage(){
    }
  }
;
  restartAppButton.createControl();
  restartAppButton.addMenuListener(new IButtonMenuListener(){
    public void widgetSelected(    ApplicationAction actionType){
      restartApplication(ApplicationAction.RESTART,actionType);
    }
  }
);
  updateRestartAppButton=new ApplicationActionMenuControl(buttonComposite,restartActions,ApplicationAction.START,""String_Node_Str"",CloudFoundryImages.getImage(CloudFoundryImages.RESTART),toolkit){
    public void setDefaultTooltipMessage(){
    }
  }
;
  updateRestartAppButton.createControl();
  updateRestartAppButton.addMenuListener(new IButtonMenuListener(){
    public void widgetSelected(    ApplicationAction actionType){
      restartApplication(ApplicationAction.UPDATE_RESTART,actionType);
    }
  }
);
}",0.970346336678488
10754,"public void refreshUI(){
  logError(null);
  resizeTableColumns();
  canUpdate=false;
  CloudFoundryApplicationModule appModule=null;
  try {
    appModule=getUpdatedApplication();
  }
 catch (  CoreException ce) {
    logApplicationModuleFailureError(""String_Node_Str"");
  }
  refreshPublishState(appModule);
  if (appModule == null) {
    return;
  }
  updateServerNameDisplay(appModule);
  int state=appModule.getState();
  setCurrentStartDebugApplicationAction();
  instanceSpinner.setSelection(appModule.getInstanceCount());
  refreshApplicationDeploymentButtons(appModule);
  mappedURIsLink.setEnabled(state == IServer.STATE_STARTED);
  CloudApplication cloudApplication=appModule.getApplication();
  List<CloudService> services=new ArrayList<CloudService>();
  instanceSpinner.setEnabled(cloudApplication != null);
  instancesViewer.getTable().setEnabled(cloudApplication != null);
  instancesViewer.setInput(null);
  if (provideServices) {
    List<String> serviceNames=null;
    ApplicationDeploymentInfo deploymentInfo=appModule.getDeploymentInfo();
    if (deploymentInfo != null) {
      serviceNames=deploymentInfo.getServices();
    }
    if (serviceNames == null) {
      serviceNames=Collections.emptyList();
    }
    List<CloudService> allServices=editorPage.getServices();
    if (allServices != null) {
      for (      CloudService service : allServices) {
        if (serviceNames.contains(service.getName())) {
          services.add(service);
        }
      }
    }
    servicesViewer.setInput(services.toArray(new CloudService[services.size()]));
  }
  memoryCombo.setEnabled(cloudApplication != null);
  if (cloudApplication != null) {
    int appMemory=appModule.getApplication().getMemory();
    memoryCombo.removeAll();
    boolean found=false;
    int[] applicationMemoryChoices=editorPage.getApplicationMemoryChoices();
    if (applicationMemoryChoices != null) {
      for (      int option : applicationMemoryChoices) {
        memoryCombo.add(option + ""String_Node_Str"");
        if (option == appMemory) {
          int index=memoryCombo.getItemCount() - 1;
          memoryCombo.select(index);
          found=true;
        }
      }
      if (!found && appMemory != 0) {
        memoryCombo.add(appMemory + ""String_Node_Str"",0);
        memoryCombo.select(0);
      }
      memoryCombo.setEnabled(true);
    }
  }
  List<String> currentURIs=null;
  if (cloudApplication != null) {
    currentURIs=cloudApplication.getUris();
    ApplicationStats applicationStats=appModule.getApplicationStats();
    InstancesInfo instancesInfo=appModule.getInstancesInfo();
    if (applicationStats != null) {
      List<InstanceStats> statss=applicationStats.getRecords();
      List<InstanceInfo> infos=instancesInfo != null ? instancesInfo.getInstances() : null;
      InstanceStatsAndInfo[] statsAndInfos=new InstanceStatsAndInfo[statss.size()];
      for (int i=0; i < statss.size(); i++) {
        InstanceStats stats=statss.get(i);
        InstanceInfo info=null;
        if (infos != null && infos.size() > i) {
          info=infos.get(i);
        }
        statsAndInfos[i]=new InstanceStatsAndInfo(stats,info);
      }
      instancesViewer.setInput(statsAndInfos);
    }
  }
  if (currentURIs == null && !isPublished) {
    currentURIs=appModule.getDeploymentInfo() != null ? appModule.getDeploymentInfo().getUris() : null;
  }
  if (currentURIs == null) {
    currentURIs=Collections.emptyList();
  }
  if (!currentURIs.equals(URIs)) {
    URIs=currentURIs;
    mappedURIsLink.setText(getURIsAsLinkText(URIs));
    generalSection.getParent().layout(true,true);
    editorPage.reflow();
  }
  if (provideServices) {
    servicesDropListener.setModule(appModule);
    servicesViewer.refresh(true);
  }
  instancesViewer.refresh(true);
  canUpdate=true;
  if (appModule.getErrorMessage() != null) {
    editorPage.setMessage(appModule.getErrorMessage(),IMessageProvider.ERROR);
  }
 else {
    editorPage.setMessage(null,IMessageProvider.ERROR);
  }
}","public void refreshUI(){
  logError(null);
  resizeTableColumns();
  canUpdate=false;
  CloudFoundryApplicationModule appModule=null;
  try {
    appModule=getUpdatedApplication();
  }
 catch (  CoreException ce) {
    logApplicationModuleFailureError(""String_Node_Str"");
  }
  refreshPublishState(appModule);
  if (appModule == null) {
    return;
  }
  if (saveManifest != null) {
    ManifestParser parser=new ManifestParser(appModule,cloudServer);
    if (!parser.canWriteToManifest()) {
      saveManifest.setEnabled(false);
    }
 else {
      saveManifest.setEnabled(true);
    }
  }
  updateServerNameDisplay(appModule);
  int state=appModule.getState();
  setCurrentStartDebugApplicationAction();
  instanceSpinner.setSelection(appModule.getInstanceCount());
  refreshApplicationDeploymentButtons(appModule);
  mappedURIsLink.setEnabled(state == IServer.STATE_STARTED);
  CloudApplication cloudApplication=appModule.getApplication();
  List<CloudService> services=new ArrayList<CloudService>();
  instanceSpinner.setEnabled(cloudApplication != null);
  instancesViewer.getTable().setEnabled(cloudApplication != null);
  instancesViewer.setInput(null);
  if (provideServices) {
    List<String> serviceNames=null;
    ApplicationDeploymentInfo deploymentInfo=appModule.getDeploymentInfo();
    if (deploymentInfo != null) {
      serviceNames=deploymentInfo.getServices();
    }
    if (serviceNames == null) {
      serviceNames=Collections.emptyList();
    }
    List<CloudService> allServices=editorPage.getServices();
    if (allServices != null) {
      for (      CloudService service : allServices) {
        if (serviceNames.contains(service.getName())) {
          services.add(service);
        }
      }
    }
    servicesViewer.setInput(services.toArray(new CloudService[services.size()]));
  }
  memoryCombo.setEnabled(cloudApplication != null);
  if (cloudApplication != null) {
    int appMemory=appModule.getApplication().getMemory();
    memoryCombo.removeAll();
    boolean found=false;
    int[] applicationMemoryChoices=editorPage.getApplicationMemoryChoices();
    if (applicationMemoryChoices != null) {
      for (      int option : applicationMemoryChoices) {
        memoryCombo.add(option + ""String_Node_Str"");
        if (option == appMemory) {
          int index=memoryCombo.getItemCount() - 1;
          memoryCombo.select(index);
          found=true;
        }
      }
      if (!found && appMemory != 0) {
        memoryCombo.add(appMemory + ""String_Node_Str"",0);
        memoryCombo.select(0);
      }
      memoryCombo.setEnabled(true);
      memoryCombo.redraw();
    }
  }
  List<String> currentURIs=null;
  if (cloudApplication != null) {
    currentURIs=cloudApplication.getUris();
    ApplicationStats applicationStats=appModule.getApplicationStats();
    InstancesInfo instancesInfo=appModule.getInstancesInfo();
    if (applicationStats != null) {
      List<InstanceStats> statss=applicationStats.getRecords();
      List<InstanceInfo> infos=instancesInfo != null ? instancesInfo.getInstances() : null;
      InstanceStatsAndInfo[] statsAndInfos=new InstanceStatsAndInfo[statss.size()];
      for (int i=0; i < statss.size(); i++) {
        InstanceStats stats=statss.get(i);
        InstanceInfo info=null;
        if (infos != null && infos.size() > i) {
          info=infos.get(i);
        }
        statsAndInfos[i]=new InstanceStatsAndInfo(stats,info);
      }
      instancesViewer.setInput(statsAndInfos);
    }
  }
  if (currentURIs == null && !isPublished) {
    currentURIs=appModule.getDeploymentInfo() != null ? appModule.getDeploymentInfo().getUris() : null;
  }
  if (currentURIs == null) {
    currentURIs=Collections.emptyList();
  }
  if (!currentURIs.equals(URIs)) {
    URIs=currentURIs;
    mappedURIsLink.setText(getURIsAsLinkText(URIs));
    generalSection.getParent().layout(true,true);
    editorPage.reflow();
  }
  if (provideServices) {
    servicesDropListener.setModule(appModule);
    servicesViewer.refresh(true);
  }
  instancesViewer.refresh(true);
  canUpdate=true;
  if (appModule.getErrorMessage() != null) {
    editorPage.setMessage(appModule.getErrorMessage(),IMessageProvider.ERROR);
  }
 else {
    editorPage.setMessage(null,IMessageProvider.ERROR);
  }
}",0.967687074829932
10755,"/** 
 * @return an existing cloud application module. Should not be null duringthe lifecycle of the editor.
 * @throws CoreException if application module was not resolved.
 */
protected CloudFoundryApplicationModule getExistingApplication() throws CoreException {
  CloudFoundryApplicationModule appModule=cloudServer.getExistingCloudModule(module);
  if (appModule == null) {
    String errorMessage=""String_Node_Str"" + module.getId();
    throw CloudErrorUtil.toCoreException(errorMessage);
  }
  return appModule;
}","/** 
 * @return an existing cloud application module. Should not be null duringthe lifecycle of the editor.
 * @throws CoreException if application module was not resolved.
 */
protected CloudFoundryApplicationModule getExistingApplication() throws CoreException {
  CloudFoundryApplicationModule appModule=cloudServer.getExistingCloudModule(module);
  if (appModule == null) {
    String errorMessage=""String_Node_Str"" + (module != null ? ""String_Node_Str"" + module.getId() : ""String_Node_Str"");
    throw CloudErrorUtil.toCoreException(errorMessage);
  }
  return appModule;
}",0.9462169553327257
10756,"private void refresh(final IServer server){
  UIJob job=new UIJob(""String_Node_Str""){
    @Override public IStatus runInUIThread(    IProgressMonitor monitor){
      try {
        if (server != null) {
          CloudFoundryServer cloudServer=(CloudFoundryServer)server.loadAdapter(CloudFoundryServer.class,monitor);
          if (cloudServer != null) {
            setServices(cloudServer.getBehaviour().getServices(monitor));
            setApplicationMemoryChoices(cloudServer.getBehaviour().getApplicationMemoryChoices());
          }
        }
        if (mform != null && mform.getForm() != null && !mform.getForm().isDisposed()) {
          masterDetailsBlock.refreshUI(RefreshArea.ALL);
        }
      }
 catch (      CoreException e) {
        return e.getStatus();
      }
      return Status.OK_STATUS;
    }
  }
;
  job.schedule();
}","private void refresh(final IServer server){
  UIJob job=new UIJob(""String_Node_Str""){
    @Override public IStatus runInUIThread(    IProgressMonitor monitor){
      try {
        if (server != null) {
          CloudFoundryServer cloudServer=(CloudFoundryServer)server.loadAdapter(CloudFoundryServer.class,monitor);
          if (cloudServer != null) {
            setServices(cloudServer.getBehaviour().getServices(monitor));
            setApplicationMemoryChoices(cloudServer.getBehaviour().getApplicationMemoryChoices(monitor));
          }
        }
        if (mform != null && mform.getForm() != null && !mform.getForm().isDisposed()) {
          masterDetailsBlock.refreshUI(RefreshArea.ALL);
        }
      }
 catch (      CoreException e) {
        return e.getStatus();
      }
      return Status.OK_STATUS;
    }
  }
;
  job.schedule();
}",0.9958799293702176
10757,"@Override public IStatus runInUIThread(IProgressMonitor monitor){
  try {
    if (server != null) {
      CloudFoundryServer cloudServer=(CloudFoundryServer)server.loadAdapter(CloudFoundryServer.class,monitor);
      if (cloudServer != null) {
        setServices(cloudServer.getBehaviour().getServices(monitor));
        setApplicationMemoryChoices(cloudServer.getBehaviour().getApplicationMemoryChoices());
      }
    }
    if (mform != null && mform.getForm() != null && !mform.getForm().isDisposed()) {
      masterDetailsBlock.refreshUI(RefreshArea.ALL);
    }
  }
 catch (  CoreException e) {
    return e.getStatus();
  }
  return Status.OK_STATUS;
}","@Override public IStatus runInUIThread(IProgressMonitor monitor){
  try {
    if (server != null) {
      CloudFoundryServer cloudServer=(CloudFoundryServer)server.loadAdapter(CloudFoundryServer.class,monitor);
      if (cloudServer != null) {
        setServices(cloudServer.getBehaviour().getServices(monitor));
        setApplicationMemoryChoices(cloudServer.getBehaviour().getApplicationMemoryChoices(monitor));
      }
    }
    if (mform != null && mform.getForm() != null && !mform.getForm().isDisposed()) {
      masterDetailsBlock.refreshUI(RefreshArea.ALL);
    }
  }
 catch (  CoreException e) {
    return e.getStatus();
  }
  return Status.OK_STATUS;
}",0.9947089947089948
10758,"/** 
 * Update the local (WST) (   {@link IModule} ) and corresponding cloud module(  {@link CloudFoundryApplicationModule} ) such that they are in synchwith the actual deployed applications (represented by {@link CloudApplication} ). Local WST modules ( {@link IModule} ) that donot have a corresponding deployed application (  {@link CloudApplication}) will be removed.
 * @param deployedApplications
 * @throws CoreException
 */
public void updateModules(Map<String,CloudApplication> deployedApplications) throws CoreException {
  Server server=(Server)getServer();
  final Set<CloudFoundryApplicationModule> allModules=new HashSet<CloudFoundryApplicationModule>();
  List<CloudFoundryApplicationModule> externalModules=new ArrayList<CloudFoundryApplicationModule>();
  final Set<IModule> deletedModules=new HashSet<IModule>();
synchronized (this) {
    for (    IModule module : server.getModules()) {
      CloudFoundryApplicationModule cloudModule=getCloudModule(module);
      if (cloudModule == null) {
        CloudFoundryPlugin.logError(""String_Node_Str"" + module.getName() + ""String_Node_Str"");
        continue;
      }
      CloudApplication actualApplication=deployedApplications.remove(cloudModule.getDeployedApplicationName());
      cloudModule.setCloudApplication(actualApplication);
      if (actualApplication != null) {
        if (cloudModule.isExternal()) {
          externalModules.add(cloudModule);
        }
        allModules.add(cloudModule);
      }
 else       if (getData() != null && getData().isUndeployed(module)) {
        allModules.add(cloudModule);
      }
 else {
        deletedModules.add(module);
      }
    }
    if (getData() != null) {
      for (      CloudApplication application : deployedApplications.values()) {
        CloudFoundryApplicationModule appModule=getData().createModule(application);
        externalModules.add(appModule);
        allModules.add(appModule);
      }
    }
    server.setExternalModules(externalModules.toArray(new IModule[0]));
    for (    IModule module : server.getModules()) {
      CloudFoundryApplicationModule appModule=getExistingCloudModule(module);
      updateState(server,appModule);
    }
    if (deletedModules.size() > 0) {
      for (      IModule module : deletedModules) {
        server.setModuleState(new IModule[]{module},IServer.STATE_UNKNOWN);
      }
      deleteModules(deletedModules);
    }
    if (getData() != null) {
      getData().removeObsoleteModules(allModules);
    }
  }
}","/** 
 * Update the local (WST) (   {@link IModule} ) and corresponding cloud module(  {@link CloudFoundryApplicationModule} ) such that they are in synchwith the actual deployed applications (represented by {@link CloudApplication} ). Local WST modules ( {@link IModule} ) that donot have a corresponding deployed application (  {@link CloudApplication}) will be removed.
 * @param deployedApplications
 * @throws CoreException
 */
public void updateModules(Map<String,CloudApplication> deployedApplications) throws CoreException {
  Server server=(Server)getServer();
  final Set<CloudFoundryApplicationModule> allModules=new HashSet<CloudFoundryApplicationModule>();
  List<CloudFoundryApplicationModule> externalModules=new ArrayList<CloudFoundryApplicationModule>();
  final Set<IModule> deletedModules=new HashSet<IModule>();
synchronized (this) {
    for (    IModule module : server.getModules()) {
      CloudFoundryApplicationModule cloudModule=getCloudModule(module);
      if (cloudModule == null) {
        CloudFoundryPlugin.logError(""String_Node_Str"" + module.getName() + ""String_Node_Str"");
        continue;
      }
      CloudApplication actualApplication=deployedApplications.remove(cloudModule.getDeployedApplicationName());
      cloudModule.setCloudApplication(actualApplication);
      if (actualApplication != null) {
        if (cloudModule.isExternal()) {
          externalModules.add(cloudModule);
        }
        allModules.add(cloudModule);
      }
 else       if (getData() != null && getData().isUndeployed(module)) {
        allModules.add(cloudModule);
      }
 else {
        deletedModules.add(module);
      }
    }
    if (getData() != null) {
      for (      CloudApplication application : deployedApplications.values()) {
        CloudFoundryApplicationModule appModule=getData().createModule(application);
        externalModules.add(appModule);
        allModules.add(appModule);
      }
    }
    server.setExternalModules(externalModules.toArray(new IModule[0]));
    for (    IModule module : server.getModules()) {
      CloudFoundryApplicationModule appModule=getExistingCloudModule(module);
      if (appModule != null) {
        updateState(server,appModule);
      }
    }
    if (deletedModules.size() > 0) {
      for (      IModule module : deletedModules) {
        server.setModuleState(new IModule[]{module},IServer.STATE_UNKNOWN);
      }
      deleteModules(deletedModules);
    }
    if (getData() != null) {
      getData().removeObsoleteModules(allModules);
    }
  }
}",0.9918375472825004
10759,"@Override public void stopModule(IModule[] modules,IProgressMonitor monitor) throws CoreException {
  Server server=(Server)getServer();
  boolean succeeded=false;
  try {
    server.setModuleState(modules,IServer.STATE_STOPPING);
    CloudFoundryServer cloudServer=getCloudFoundryServer();
    final CloudFoundryApplicationModule cloudModule=cloudServer.getExistingCloudModule(modules[0]);
    new Request<Void>(){
      @Override protected Void doRun(      CloudFoundryOperations client,      SubMonitor progress) throws CoreException {
        client.stopApplication(cloudModule.getDeployedApplicationName());
        return null;
      }
    }
.run(monitor);
    server.setModuleState(modules,IServer.STATE_STOPPED);
    succeeded=true;
    CloudFoundryPlugin.getCallback().applicationStopped(cloudModule,cloudServer);
    if (TunnelBehaviour.isCaldecottApp(cloudModule.getDeployedApplicationName())) {
      TunnelBehaviour handler=new TunnelBehaviour(cloudServer);
      handler.stopAndDeleteAllTunnels(monitor);
    }
  }
  finally {
    if (!succeeded) {
      server.setModuleState(modules,IServer.STATE_UNKNOWN);
    }
  }
}","@Override public void stopModule(IModule[] modules,IProgressMonitor monitor) throws CoreException {
  Server server=(Server)getServer();
  boolean succeeded=false;
  try {
    server.setModuleState(modules,IServer.STATE_STOPPING);
    CloudFoundryServer cloudServer=getCloudFoundryServer();
    final CloudFoundryApplicationModule cloudModule=cloudServer.getExistingCloudModule(modules[0]);
    if (cloudModule == null) {
      throw CloudErrorUtil.toCoreException(""String_Node_Str"" + modules[0].getName());
    }
    new Request<Void>(){
      @Override protected Void doRun(      CloudFoundryOperations client,      SubMonitor progress) throws CoreException {
        client.stopApplication(cloudModule.getDeployedApplicationName());
        return null;
      }
    }
.run(monitor);
    server.setModuleState(modules,IServer.STATE_STOPPED);
    succeeded=true;
    CloudFoundryPlugin.getCallback().applicationStopped(cloudModule,cloudServer);
    if (TunnelBehaviour.isCaldecottApp(cloudModule.getDeployedApplicationName())) {
      TunnelBehaviour handler=new TunnelBehaviour(cloudServer);
      handler.stopAndDeleteAllTunnels(monitor);
    }
  }
  finally {
    if (!succeeded) {
      server.setModuleState(modules,IServer.STATE_UNKNOWN);
    }
  }
}",0.9485570890840652
10760,"protected void internalDeleteModules(final IModule[] modules,final boolean deleteServices,IProgressMonitor monitor) throws CoreException {
  final CloudFoundryServer cloudServer=getCloudFoundryServer();
  new Request<Void>(){
    @Override protected Void doRun(    CloudFoundryOperations client,    SubMonitor progress) throws CoreException {
      for (      IModule module : modules) {
        final CloudFoundryApplicationModule appModule=cloudServer.getExistingCloudModule(module);
        List<String> servicesToDelete=new ArrayList<String>();
        CloudApplication application=client.getApplication(appModule.getDeployedApplicationName());
        List<String> actualServices=application.getServices();
        if (actualServices != null) {
          for (          String serviceName : actualServices) {
            if (serviceName != null) {
              servicesToDelete.add(serviceName);
            }
          }
        }
        if (TunnelBehaviour.isCaldecottApp(appModule.getDeployedApplicationName())) {
          new TunnelBehaviour(cloudServer).stopAndDeleteAllTunnels(progress);
        }
        client.deleteApplication(appModule.getDeployedApplicationName());
        cloudServer.removeApplication(appModule);
        appModule.setCloudApplication(null);
        if (deleteServices && !servicesToDelete.isEmpty()) {
          CloudFoundryPlugin.getCallback().deleteServices(servicesToDelete,cloudServer);
          ServerEventHandler.getDefault().fireServicesUpdated(cloudServer);
        }
      }
      return null;
    }
  }
.run(monitor);
}","protected void internalDeleteModules(final IModule[] modules,final boolean deleteServices,IProgressMonitor monitor) throws CoreException {
  final CloudFoundryServer cloudServer=getCloudFoundryServer();
  new Request<Void>(){
    @Override protected Void doRun(    CloudFoundryOperations client,    SubMonitor progress) throws CoreException {
      for (      IModule module : modules) {
        final CloudFoundryApplicationModule appModule=cloudServer.getExistingCloudModule(module);
        if (appModule == null) {
          CloudFoundryPlugin.logWarning(""String_Node_Str"" + module.getName());
          continue;
        }
        List<String> servicesToDelete=new ArrayList<String>();
        CloudApplication application=client.getApplication(appModule.getDeployedApplicationName());
        List<String> actualServices=application.getServices();
        if (actualServices != null) {
          for (          String serviceName : actualServices) {
            if (serviceName != null) {
              servicesToDelete.add(serviceName);
            }
          }
        }
        if (TunnelBehaviour.isCaldecottApp(appModule.getDeployedApplicationName())) {
          new TunnelBehaviour(cloudServer).stopAndDeleteAllTunnels(progress);
        }
        client.deleteApplication(appModule.getDeployedApplicationName());
        cloudServer.removeApplication(appModule);
        appModule.setCloudApplication(null);
        if (deleteServices && !servicesToDelete.isEmpty()) {
          CloudFoundryPlugin.getCallback().deleteServices(servicesToDelete,cloudServer);
          ServerEventHandler.getDefault().fireServicesUpdated(cloudServer);
        }
      }
      return null;
    }
  }
.run(monitor);
}",0.9567336989640464
10761,"/** 
 * Given a WTP module, the corresponding CF application module will have its app instance stats refreshed. As the application module also has a reference to the actual cloud application, an updated cloud application will be retrieved as well.
 * @param module whos application instances and stats should be refreshed
 * @param monitor
 * @throws CoreException
 */
public void refreshApplicationInstanceStats(IModule module,IProgressMonitor monitor) throws CoreException {
  if (module != null) {
    CloudFoundryApplicationModule appModule=getCloudFoundryServer().getExistingCloudModule(module);
    try {
      CloudApplication application=getApplication(appModule.getDeployedApplicationName(),monitor);
      appModule.setCloudApplication(application);
    }
 catch (    CoreException e) {
    }
    internalUpdateApplicationInstanceStats(appModule,monitor);
  }
}","/** 
 * Given a WTP module, the corresponding CF application module will have its app instance stats refreshed. As the application module also has a reference to the actual cloud application, an updated cloud application will be retrieved as well.
 * @param module whos application instances and stats should be refreshed
 * @param monitor
 * @throws CoreException
 */
public void refreshApplicationInstanceStats(IModule module,IProgressMonitor monitor) throws CoreException {
  if (module != null) {
    CloudFoundryApplicationModule appModule=getCloudFoundryServer().getExistingCloudModule(module);
    if (appModule != null) {
      try {
        CloudApplication application=getApplication(appModule.getDeployedApplicationName(),monitor);
        appModule.setCloudApplication(application);
      }
 catch (      CoreException e) {
      }
      internalUpdateApplicationInstanceStats(appModule,monitor);
    }
  }
}",0.972640982691234
10762,"/** 
 * Obtain a valid deployment info containing enough information to push an application, start it if necessary (starting an application is optional), and also optionally bind services to the application
 * @param server where application should be pushed to.
 * @param appModule pertaining to the application that needs to be pushed.
 * @param monitor
 * @throws CoreException if invalid deployment info.
 * @throws OperationCanceledException if user canceled deployment.
 */
public void prepareForDeployment(final CloudFoundryServer server,final CloudFoundryApplicationModule appModule,final IProgressMonitor monitor) throws CoreException, OperationCanceledException {
  IModule module=appModule.getLocalModule();
  RepublishModule repModule=CloudFoundryPlugin.getModuleCache().getData(server.getServerOriginal()).untagForAutomaticRepublish(module);
  if (repModule != null) {
    ApplicationDeploymentInfo republishDeploymentInfo=repModule.getDeploymentInfo();
    if (republishDeploymentInfo != null) {
      DeploymentInfoWorkingCopy copy=appModule.getDeploymentInfoWorkingCopy();
      copy.setInfo(republishDeploymentInfo);
      copy.save();
    }
  }
  if (!appModule.validateDeploymentInfo().isOK()) {
    final ApplicationWizardDelegate providerDelegate=ApplicationWizardRegistry.getWizardProvider(appModule.getLocalModule());
    if (providerDelegate == null) {
      throw CloudErrorUtil.toCoreException(""String_Node_Str"" + appModule.getDeployedApplicationName() + ""String_Node_Str""+ server.getServer().getName()+ ""String_Node_Str""+ appModule.getLocalModule().getModuleType().getId());
    }
    DeploymentInfoWorkingCopy workingCopy=null;
    try {
      workingCopy=new ManifestParser(appModule,server).load();
    }
 catch (    CoreException ce) {
      CloudFoundryPlugin.log(ce);
    }
    final boolean[] cancelled={false};
    final boolean[] writeToManifest={false};
    final DeploymentInfoWorkingCopy finWorkingCopy=workingCopy;
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        CloudFoundryApplicationWizard wizard=new CloudFoundryApplicationWizard(server,appModule,finWorkingCopy,providerDelegate);
        WizardDialog dialog=new WizardDialog(PlatformUI.getWorkbench().getModalDialogShellProvider().getShell(),wizard);
        int status=dialog.open();
        if (status == Dialog.OK) {
          final List<CloudService> addedServices=wizard.getCreatedCloudServices();
          writeToManifest[0]=wizard.persistManifestChanges();
          if (addedServices != null && !addedServices.isEmpty()) {
            IProgressMonitor subMonitor=new SubProgressMonitor(monitor,addedServices.size());
            try {
              server.getBehaviour().createService(addedServices.toArray(new CloudService[0]),subMonitor);
            }
 catch (            CoreException e) {
              CloudFoundryPlugin.log(e);
            }
 finally {
              subMonitor.done();
            }
          }
        }
 else {
          cancelled[0]=true;
        }
      }
    }
);
    if (cancelled[0]) {
      throw new OperationCanceledException();
    }
 else {
      IStatus status=appModule.validateDeploymentInfo();
      if (!status.isOK()) {
        throw new CoreException(status);
      }
 else       if (writeToManifest[0]) {
        IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1);
        try {
          new ManifestParser(appModule,server).write(subMonitor);
        }
 catch (        CoreException ce) {
          CloudFoundryPlugin.logError(ce);
        }
 finally {
          subMonitor.done();
        }
      }
    }
  }
}","/** 
 * Obtain a valid deployment info containing enough information to push an application, start it if necessary (starting an application is optional), and also optionally bind services to the application
 * @param server where application should be pushed to.
 * @param appModule pertaining to the application that needs to be pushed.
 * @param monitor
 * @throws CoreException if invalid deployment info.
 * @throws OperationCanceledException if user canceled deployment.
 */
public void prepareForDeployment(final CloudFoundryServer server,final CloudFoundryApplicationModule appModule,final IProgressMonitor monitor) throws CoreException, OperationCanceledException {
  IModule module=appModule.getLocalModule();
  RepublishModule repModule=CloudFoundryPlugin.getModuleCache().getData(server.getServerOriginal()).untagForAutomaticRepublish(module);
  if (repModule != null) {
    ApplicationDeploymentInfo republishDeploymentInfo=repModule.getDeploymentInfo();
    if (republishDeploymentInfo != null) {
      DeploymentInfoWorkingCopy copy=appModule.getDeploymentInfoWorkingCopy();
      copy.setInfo(republishDeploymentInfo);
      copy.save();
    }
  }
  if (!appModule.validateDeploymentInfo().isOK()) {
    final ApplicationWizardDelegate providerDelegate=ApplicationWizardRegistry.getWizardProvider(appModule.getLocalModule());
    if (providerDelegate == null) {
      throw CloudErrorUtil.toCoreException(""String_Node_Str"" + appModule.getDeployedApplicationName() + ""String_Node_Str""+ server.getServer().getName()+ ""String_Node_Str""+ appModule.getLocalModule().getModuleType().getId());
    }
    DeploymentInfoWorkingCopy workingCopy=null;
    try {
      workingCopy=new ManifestParser(appModule,server).load();
    }
 catch (    CoreException ce) {
      CloudFoundryPlugin.log(ce);
    }
    final boolean[] cancelled={false};
    final boolean[] writeToManifest={false};
    final IStatus status[]={Status.OK_STATUS};
    final DeploymentInfoWorkingCopy finWorkingCopy=workingCopy;
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        CloudFoundryApplicationWizard wizard=new CloudFoundryApplicationWizard(server,appModule,finWorkingCopy,providerDelegate);
        try {
          WizardDialog dialog=new WizardDialog(PlatformUI.getWorkbench().getModalDialogShellProvider().getShell(),wizard);
          int dialogueStatus=dialog.open();
          if (dialogueStatus == Dialog.OK) {
            final List<CloudService> addedServices=wizard.getCreatedCloudServices();
            writeToManifest[0]=wizard.persistManifestChanges();
            if (addedServices != null && !addedServices.isEmpty()) {
              IProgressMonitor subMonitor=new SubProgressMonitor(monitor,addedServices.size());
              try {
                server.getBehaviour().createService(addedServices.toArray(new CloudService[0]),subMonitor);
              }
 catch (              CoreException e) {
                CloudFoundryPlugin.log(e);
              }
 finally {
                subMonitor.done();
              }
            }
          }
 else {
            cancelled[0]=true;
          }
        }
 catch (        Throwable t) {
          cancelled[0]=true;
          status[0]=CloudFoundryPlugin.getErrorStatus(t);
        }
      }
    }
);
    if (cancelled[0]) {
      if (!status[0].isOK()) {
        CloudFoundryPlugin.logError(""String_Node_Str"" + status[0].getMessage(),status[0].getException());
      }
      throw new OperationCanceledException();
    }
 else {
      if (status[0].isOK()) {
        status[0]=appModule.validateDeploymentInfo();
      }
      if (!status[0].isOK()) {
        throw new CoreException(status[0]);
      }
 else       if (writeToManifest[0]) {
        IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1);
        try {
          new ManifestParser(appModule,server).write(subMonitor);
        }
 catch (        CoreException ce) {
          CloudFoundryPlugin.logError(ce);
        }
 finally {
          subMonitor.done();
        }
      }
    }
  }
}",0.8775643538481641
10763,"public void run(){
  CloudFoundryApplicationWizard wizard=new CloudFoundryApplicationWizard(server,appModule,finWorkingCopy,providerDelegate);
  WizardDialog dialog=new WizardDialog(PlatformUI.getWorkbench().getModalDialogShellProvider().getShell(),wizard);
  int status=dialog.open();
  if (status == Dialog.OK) {
    final List<CloudService> addedServices=wizard.getCreatedCloudServices();
    writeToManifest[0]=wizard.persistManifestChanges();
    if (addedServices != null && !addedServices.isEmpty()) {
      IProgressMonitor subMonitor=new SubProgressMonitor(monitor,addedServices.size());
      try {
        server.getBehaviour().createService(addedServices.toArray(new CloudService[0]),subMonitor);
      }
 catch (      CoreException e) {
        CloudFoundryPlugin.log(e);
      }
 finally {
        subMonitor.done();
      }
    }
  }
 else {
    cancelled[0]=true;
  }
}","public void run(){
  CloudFoundryApplicationWizard wizard=new CloudFoundryApplicationWizard(server,appModule,finWorkingCopy,providerDelegate);
  try {
    WizardDialog dialog=new WizardDialog(PlatformUI.getWorkbench().getModalDialogShellProvider().getShell(),wizard);
    int dialogueStatus=dialog.open();
    if (dialogueStatus == Dialog.OK) {
      final List<CloudService> addedServices=wizard.getCreatedCloudServices();
      writeToManifest[0]=wizard.persistManifestChanges();
      if (addedServices != null && !addedServices.isEmpty()) {
        IProgressMonitor subMonitor=new SubProgressMonitor(monitor,addedServices.size());
        try {
          server.getBehaviour().createService(addedServices.toArray(new CloudService[0]),subMonitor);
        }
 catch (        CoreException e) {
          CloudFoundryPlugin.log(e);
        }
 finally {
          subMonitor.done();
        }
      }
    }
 else {
      cancelled[0]=true;
    }
  }
 catch (  Throwable t) {
    cancelled[0]=true;
    status[0]=CloudFoundryPlugin.getErrorStatus(t);
  }
}",0.8845360824742268
10764,"/** 
 * @return Deployment copy if a manifest file was successfully loaded intoan app's deployment info working copy. Note that the copy is NOT saved. Null if there is no content to load into the app's deployment info working copy.
 * @throws CoreException if error occurred while loading an existingmanifest file.
 */
public DeploymentInfoWorkingCopy load() throws CoreException {
  DeploymentInfoWorkingCopy workingCopy=appModule.getDeploymentInfoWorkingCopy();
  Map<Object,Object> results=parseManifestFromFile();
  if (results == null) {
    return null;
  }
  Map<Object,Object> applications=getContainingPropertiesMap(results,APPLICATIONS_PROP);
  if (applications == null) {
    throw CloudErrorUtil.toCoreException(""String_Node_Str"" + relativePath + ""String_Node_Str"");
  }
  String appName=getValue(applications,NAME_PROP);
  if (appName != null) {
    workingCopy.setDeploymentName(appName);
  }
  String memoryVal=getValue(applications,MEMORY_PROP);
  if (memoryVal != null) {
    int memory=Integer.valueOf(memoryVal);
    if (memory > 0) {
      workingCopy.setMemory(memory);
    }
  }
  String host=getValue(applications,SUB_DOMAIN_PROP);
  if (host != null) {
    CloudApplicationUrlLookup lookup=CloudApplicationUrlLookup.getCurrentLookup(cloudServer);
    CloudApplicationURL defaultUrl=lookup.getDefaultApplicationURL(host);
    if (defaultUrl != null) {
      List<String> urls=Arrays.asList(defaultUrl.getUrl());
      workingCopy.setUris(urls);
    }
  }
  Map<Object,Object> services=getContainingPropertiesMap(applications,SERVICES_PROP);
  if (services != null) {
    List<String> servicesToBind=new ArrayList<String>();
    for (    Entry<Object,Object> entry : services.entrySet()) {
      Object serviceNameObj=entry.getKey();
      if (serviceNameObj instanceof String) {
        String serviceName=(String)serviceNameObj;
        if (!servicesToBind.contains(serviceName)) {
          servicesToBind.add(serviceName);
        }
      }
    }
    workingCopy.setServices(servicesToBind);
  }
  return workingCopy;
}","/** 
 * @return Deployment copy if a manifest file was successfully loaded intoan app's deployment info working copy. Note that the copy is NOT saved. Null if there is no content to load into the app's deployment info working copy.
 * @throws CoreException if error occurred while loading an existingmanifest file.
 */
public DeploymentInfoWorkingCopy load() throws CoreException {
  DeploymentInfoWorkingCopy workingCopy=appModule.getDeploymentInfoWorkingCopy();
  Map<Object,Object> results=parseManifestFromFile();
  if (results == null) {
    return null;
  }
  Map<Object,Object> applications=getContainingPropertiesMap(results,APPLICATIONS_PROP);
  if (applications == null) {
    throw CloudErrorUtil.toCoreException(""String_Node_Str"" + relativePath + ""String_Node_Str"");
  }
  String appName=getStringValue(applications,NAME_PROP);
  if (appName != null) {
    workingCopy.setDeploymentName(appName);
  }
  Integer memoryVal=getIntegerValue(applications,MEMORY_PROP);
  if (memoryVal != null) {
    workingCopy.setMemory(memoryVal.intValue());
  }
  String host=getStringValue(applications,SUB_DOMAIN_PROP);
  if (host != null) {
    CloudApplicationUrlLookup lookup=CloudApplicationUrlLookup.getCurrentLookup(cloudServer);
    CloudApplicationURL defaultUrl=lookup.getDefaultApplicationURL(host);
    if (defaultUrl != null) {
      List<String> urls=Arrays.asList(defaultUrl.getUrl());
      workingCopy.setUris(urls);
    }
  }
  Map<Object,Object> services=getContainingPropertiesMap(applications,SERVICES_PROP);
  if (services != null) {
    List<String> servicesToBind=new ArrayList<String>();
    for (    Entry<Object,Object> entry : services.entrySet()) {
      Object serviceNameObj=entry.getKey();
      if (serviceNameObj instanceof String) {
        String serviceName=(String)serviceNameObj;
        if (!servicesToBind.contains(serviceName)) {
          servicesToBind.add(serviceName);
        }
      }
    }
    workingCopy.setServices(servicesToBind);
  }
  return workingCopy;
}",0.9622315477659836
10765,"/** 
 * Writes the app's current deployment info into a manifest file in the app's related workspace project. If the workspace project is not accessible, false is returned. If the manifest file does not exist in the app's workspace project, one will be created. If manifest file failed to create, exception is thrown. Returns true if the manifest file was successfully written. If so, the project is also refreshed.
 * @return true if deployment info for the cloud module was written tomanifest file. False if there was no content to write to the manifest file.
 * @throws CoreException if error occurred while writing to a Manifest file.
 */
public boolean write(IProgressMonitor monitor) throws CoreException {
  ApplicationDeploymentInfo deploymentInfo=appModule.getDeploymentInfo();
  if (deploymentInfo == null) {
    return false;
  }
  Map<Object,Object> deploymentInfoYaml=parseManifestFromFile();
  if (deploymentInfoYaml == null) {
    deploymentInfoYaml=new HashMap<Object,Object>();
  }
  Map<Object,Object> applicationProperties=getContainingPropertiesMap(deploymentInfoYaml,APPLICATIONS_PROP);
  if (applicationProperties == null) {
    applicationProperties=new HashMap<Object,Object>();
    deploymentInfoYaml.put(APPLICATIONS_PROP,applicationProperties);
  }
  String appName=deploymentInfo.getDeploymentName();
  if (appName != null) {
    applicationProperties.put(NAME_PROP,appName);
  }
  int memory=deploymentInfo.getMemory();
  if (memory > 0) {
    applicationProperties.put(MEMORY_PROP,memory + 'M');
  }
  List<String> servicesToBind=deploymentInfo.getServices();
  if (servicesToBind != null && !servicesToBind.isEmpty()) {
    Map<Object,Object> services=getContainingPropertiesMap(applicationProperties,SERVICES_PROP);
    if (services == null) {
      services=new HashMap<Object,Object>();
      applicationProperties.put(SERVICES_PROP,services);
    }
    for (    String service : servicesToBind) {
      services.put(service,null);
    }
  }
  if (deploymentInfoYaml.isEmpty()) {
    return false;
  }
  Yaml yaml=new Yaml();
  String manifestValue=yaml.dump(deploymentInfoYaml);
  if (manifestValue == null) {
    throw CloudErrorUtil.toCoreException(""String_Node_Str"" + appModule.getDeployedApplicationName() + ""String_Node_Str""+ deploymentInfoYaml);
  }
  OutputStream outStream=null;
  try {
    outStream=getOutStream();
    if (outStream == null) {
      throw CloudErrorUtil.toCoreException(""String_Node_Str"" + relativePath + ""String_Node_Str""+ appModule.getDeployedApplicationName());
    }
    outStream.write(manifestValue.getBytes());
    outStream.flush();
    IProject project=CloudUtil.getProject(appModule);
    if (project != null) {
      project.refreshLocal(IResource.DEPTH_INFINITE,monitor);
    }
    return true;
  }
 catch (  IOException io) {
    throw CloudErrorUtil.toCoreException(io);
  }
 finally {
    if (outStream != null) {
      try {
        outStream.close();
      }
 catch (      IOException io) {
      }
    }
  }
}","/** 
 * Writes the app's current deployment info into a manifest file in the app's related workspace project. If the workspace project is not accessible, false is returned. If the manifest file does not exist in the app's workspace project, one will be created. If manifest file failed to create, exception is thrown. Returns true if the manifest file was successfully written. If so, the project is also refreshed.
 * @return true if deployment info for the cloud module was written tomanifest file. False if there was no content to write to the manifest file.
 * @throws CoreException if error occurred while writing to a Manifest file.
 */
public boolean write(IProgressMonitor monitor) throws CoreException {
  ApplicationDeploymentInfo deploymentInfo=appModule.getDeploymentInfo();
  if (deploymentInfo == null) {
    return false;
  }
  Map<Object,Object> deploymentInfoYaml=parseManifestFromFile();
  if (deploymentInfoYaml == null) {
    deploymentInfoYaml=new HashMap<Object,Object>();
  }
  Map<Object,Object> applicationProperties=getContainingPropertiesMap(deploymentInfoYaml,APPLICATIONS_PROP);
  if (applicationProperties == null) {
    applicationProperties=new HashMap<Object,Object>();
    deploymentInfoYaml.put(APPLICATIONS_PROP,applicationProperties);
  }
  String appName=deploymentInfo.getDeploymentName();
  if (appName != null) {
    applicationProperties.put(NAME_PROP,appName);
  }
  int memory=deploymentInfo.getMemory();
  if (memory > 0) {
    applicationProperties.put(MEMORY_PROP,memory);
  }
  Map<Object,Object> services=new HashMap<Object,Object>();
  applicationProperties.put(SERVICES_PROP,services);
  List<String> servicesToBind=deploymentInfo.getServices();
  if (servicesToBind != null) {
    for (    String service : servicesToBind) {
      services.put(service,null);
    }
  }
  if (deploymentInfoYaml.isEmpty()) {
    return false;
  }
  Yaml yaml=new Yaml();
  String manifestValue=yaml.dump(deploymentInfoYaml);
  if (manifestValue == null) {
    throw CloudErrorUtil.toCoreException(""String_Node_Str"" + appModule.getDeployedApplicationName() + ""String_Node_Str""+ deploymentInfoYaml);
  }
  OutputStream outStream=null;
  try {
    outStream=getOutStream();
    if (outStream == null) {
      throw CloudErrorUtil.toCoreException(""String_Node_Str"" + relativePath + ""String_Node_Str""+ appModule.getDeployedApplicationName());
    }
    outStream.write(manifestValue.getBytes());
    outStream.flush();
    IProject project=CloudUtil.getProject(appModule);
    if (project != null) {
      project.refreshLocal(IResource.DEPTH_INFINITE,monitor);
    }
    return true;
  }
 catch (  IOException io) {
    throw CloudErrorUtil.toCoreException(io);
  }
 finally {
    if (outStream != null) {
      try {
        outStream.close();
      }
 catch (      IOException io) {
      }
    }
  }
}",0.9428129829984544
10766,"/** 
 * @return Deployment copy if a manifest file was successfully loaded intoan app's deployment info working copy. Note that the copy is NOT saved. Null if there is no content to load into the app's deployment info working copy.
 * @throws CoreException if error occurred while loading an existingmanifest file.
 */
public DeploymentInfoWorkingCopy load() throws CoreException {
  DeploymentInfoWorkingCopy workingCopy=appModule.getDeploymentInfoWorkingCopy();
  Map<Object,Object> results=parseManifestFromFile();
  if (results == null) {
    return null;
  }
  Object applicationsObj=results.get(APPLICATIONS_PROP);
  if (!(applicationsObj instanceof List<?>)) {
    throw CloudErrorUtil.toCoreException(""String_Node_Str"" + relativePath + ""String_Node_Str"");
  }
  List<?> applicationsList=(List<?>)applicationsObj;
  if (applicationsList.isEmpty()) {
    return null;
  }
  Object mapObj=applicationsList.get(0);
  if (!(mapObj instanceof Map<?,?>)) {
    throw CloudErrorUtil.toCoreException(""String_Node_Str"" + relativePath + ""String_Node_Str"");
  }
  Map<?,?> applications=(Map<?,?>)mapObj;
  String appName=getStringValue(applications,NAME_PROP);
  if (appName != null) {
    workingCopy.setDeploymentName(appName);
  }
  Integer memoryVal=getIntegerValue(applications,MEMORY_PROP);
  if (memoryVal == null) {
    String memoryStringVal=getStringValue(applications,MEMORY_PROP);
    if (memoryStringVal != null && memoryStringVal.length() > 0) {
      char memoryIndicator[]={'M','G','m','g'};
      int gIndex=-1;
      for (      char indicator : memoryIndicator) {
        gIndex=memoryStringVal.indexOf(indicator);
        if (gIndex >= 0) {
          break;
        }
      }
      if (gIndex > 0) {
        memoryStringVal=memoryStringVal.substring(0,gIndex);
      }
 else       if (gIndex == 0) {
        CloudFoundryPlugin.logError(""String_Node_Str"" + relativePath + ""String_Node_Str""+ appModule.getDeployedApplicationName()+ ""String_Node_Str""+ memoryStringVal);
      }
      try {
        memoryVal=Integer.valueOf(memoryStringVal);
      }
 catch (      NumberFormatException e) {
        CloudFoundryPlugin.logError(""String_Node_Str"" + relativePath + ""String_Node_Str""+ appModule.getDeployedApplicationName()+ ""String_Node_Str""+ e.getMessage());
      }
    }
  }
  if (memoryVal != null) {
    int actualMemory=-1;
switch (memoryVal.intValue()) {
case 1:
      actualMemory=1024;
    break;
case 2:
  actualMemory=2048;
break;
default :
actualMemory=memoryVal.intValue();
break;
}
if (actualMemory > 0) {
workingCopy.setMemory(actualMemory);
}
}
String subdomain=getStringValue(applications,SUB_DOMAIN_PROP);
String domain=getStringValue(applications,DOMAIN_PROP);
if (subdomain != null || domain != null) {
String url=null;
if (subdomain == null) {
subdomain=appName;
}
 else {
CloudApplicationUrlLookup lookup=CloudApplicationUrlLookup.getCurrentLookup(cloudServer);
CloudApplicationURL cloudURL=lookup.getDefaultApplicationURL(subdomain);
if (cloudURL != null) {
url=cloudURL.getUrl();
}
}
if (url == null) {
url=subdomain + '.' + domain;
}
if (url != null) {
List<String> urls=Arrays.asList(url);
workingCopy.setUris(urls);
}
}
String buildpackurl=getStringValue(applications,BUILDPACK_PROP);
if (buildpackurl != null) {
Staging staging=new Staging(null,buildpackurl);
workingCopy.setStaging(staging);
}
parseServices(workingCopy,applications);
return workingCopy;
}","/** 
 * @return Deployment copy if a manifest file was successfully loaded intoan app's deployment info working copy. Note that the copy is NOT saved. Null if there is no content to load into the app's deployment info working copy.
 * @throws CoreException if error occurred while loading an existingmanifest file.
 */
public DeploymentInfoWorkingCopy load() throws CoreException {
  DeploymentInfoWorkingCopy workingCopy=appModule.getDeploymentInfoWorkingCopy();
  Map<Object,Object> results=parseManifestFromFile();
  if (results == null) {
    return null;
  }
  Object applicationsObj=results.get(APPLICATIONS_PROP);
  if (!(applicationsObj instanceof List<?>)) {
    throw CloudErrorUtil.toCoreException(""String_Node_Str"" + relativePath + ""String_Node_Str"");
  }
  List<?> applicationsList=(List<?>)applicationsObj;
  if (applicationsList.isEmpty()) {
    return null;
  }
  if (applicationsList.size() > 1) {
    File file=getFile();
    String fileName=null;
    if (file != null) {
      fileName=file.getAbsolutePath();
    }
    CloudFoundryPlugin.logWarning(""String_Node_Str"" + (fileName != null ? fileName : ""String_Node_Str"") + ""String_Node_Str""+ appModule.getDeployedApplicationName());
  }
  Object mapObj=applicationsList.get(0);
  if (!(mapObj instanceof Map<?,?>)) {
    throw CloudErrorUtil.toCoreException(""String_Node_Str"" + relativePath + ""String_Node_Str"");
  }
  Map<?,?> applications=(Map<?,?>)mapObj;
  String appName=getStringValue(applications,NAME_PROP);
  if (appName != null) {
    workingCopy.setDeploymentName(appName);
  }
  Integer memoryVal=getIntegerValue(applications,MEMORY_PROP);
  if (memoryVal == null) {
    String memoryStringVal=getStringValue(applications,MEMORY_PROP);
    if (memoryStringVal != null && memoryStringVal.length() > 0) {
      char memoryIndicator[]={'M','G','m','g'};
      int gIndex=-1;
      for (      char indicator : memoryIndicator) {
        gIndex=memoryStringVal.indexOf(indicator);
        if (gIndex >= 0) {
          break;
        }
      }
      if (gIndex > 0) {
        memoryStringVal=memoryStringVal.substring(0,gIndex);
      }
 else       if (gIndex == 0) {
        CloudFoundryPlugin.logError(""String_Node_Str"" + relativePath + ""String_Node_Str""+ appModule.getDeployedApplicationName()+ ""String_Node_Str""+ memoryStringVal);
      }
      try {
        memoryVal=Integer.valueOf(memoryStringVal);
      }
 catch (      NumberFormatException e) {
        CloudFoundryPlugin.logError(""String_Node_Str"" + relativePath + ""String_Node_Str""+ appModule.getDeployedApplicationName()+ ""String_Node_Str""+ e.getMessage());
      }
    }
  }
  if (memoryVal != null) {
    int actualMemory=-1;
switch (memoryVal.intValue()) {
case 1:
      actualMemory=1024;
    break;
case 2:
  actualMemory=2048;
break;
default :
actualMemory=memoryVal.intValue();
break;
}
if (actualMemory > 0) {
workingCopy.setMemory(actualMemory);
}
}
String subdomain=getStringValue(applications,SUB_DOMAIN_PROP);
String domain=getStringValue(applications,DOMAIN_PROP);
if (subdomain != null || domain != null) {
String url=null;
if (subdomain == null) {
subdomain=appName;
}
 else {
CloudApplicationUrlLookup lookup=CloudApplicationUrlLookup.getCurrentLookup(cloudServer);
CloudApplicationURL cloudURL=lookup.getDefaultApplicationURL(subdomain);
if (cloudURL != null) {
url=cloudURL.getUrl();
}
}
if (url == null) {
url=subdomain + '.' + domain;
}
if (url != null) {
List<String> urls=Arrays.asList(url);
workingCopy.setUris(urls);
}
}
String buildpackurl=getStringValue(applications,BUILDPACK_PROP);
if (buildpackurl != null) {
Staging staging=new Staging(null,buildpackurl);
workingCopy.setStaging(staging);
}
parseServices(workingCopy,applications);
return workingCopy;
}",0.9540407589599438
10767,"/** 
 * Writes the app's current deployment info into a manifest file in the app's related workspace project. If the workspace project is not accessible, false is returned. If the manifest file does not exist in the app's workspace project, one will be created. If manifest file failed to create, exception is thrown. Returns true if the manifest file was successfully written. If so, the project is also refreshed.
 * @return true if deployment info for the cloud module was written tomanifest file. False if there was no content to write to the manifest file.
 * @throws CoreException if error occurred while writing to a Manifest file.
 */
public boolean write(IProgressMonitor monitor) throws CoreException {
  ApplicationDeploymentInfo deploymentInfo=appModule.getDeploymentInfo();
  if (deploymentInfo == null) {
    return false;
  }
  String appName=deploymentInfo.getDeploymentName();
  Map<Object,Object> deploymentInfoYaml=parseManifestFromFile();
  if (deploymentInfoYaml == null) {
    deploymentInfoYaml=new LinkedHashMap<Object,Object>();
  }
  Object applicationsObj=deploymentInfoYaml.get(APPLICATIONS_PROP);
  List<Map<Object,Object>> applicationsList=null;
  if (applicationsObj == null) {
    applicationsList=new ArrayList<Map<Object,Object>>();
    deploymentInfoYaml.put(APPLICATIONS_PROP,applicationsList);
  }
 else   if (applicationsObj instanceof List<?>) {
    applicationsList=(List<Map<Object,Object>>)applicationsObj;
  }
 else {
    throw CloudErrorUtil.toCoreException(""String_Node_Str"" + relativePath + ""String_Node_Str"");
  }
  Map<Object,Object> applicationProperties=null;
  for (  Object appMap : applicationsList) {
    if (appMap instanceof Map<?,?>) {
      applicationProperties=(Map<Object,Object>)appMap;
      if (!appName.equals(applicationProperties.get(NAME_PROP))) {
        applicationProperties=null;
      }
 else {
        break;
      }
    }
  }
  if (applicationProperties == null) {
    applicationProperties=new LinkedHashMap<Object,Object>();
    applicationsList.add(applicationProperties);
  }
  applicationProperties.put(NAME_PROP,appName);
  String memory=getMemoryAsString(deploymentInfo.getMemory());
  if (memory != null) {
    applicationProperties.put(MEMORY_PROP,memory);
  }
  int instances=deploymentInfo.getInstances();
  if (instances > 0) {
    applicationProperties.put(INSTANCES_PROP,instances);
  }
  List<String> urls=deploymentInfo.getUris();
  if (urls != null && !urls.isEmpty()) {
    String url=urls.get(0);
    CloudApplicationUrlLookup lookup=CloudApplicationUrlLookup.getCurrentLookup(cloudServer);
    CloudApplicationURL cloudUrl=lookup.getCloudApplicationURL(url);
    String subdomain=cloudUrl.getSubdomain();
    String domain=cloudUrl.getDomain();
    if (subdomain != null) {
      applicationProperties.put(SUB_DOMAIN_PROP,subdomain);
    }
    if (domain != null) {
      applicationProperties.put(DOMAIN_PROP,domain);
    }
  }
  Staging staging=deploymentInfo.getStaging();
  if (staging != null && staging.getBuildpackUrl() != null) {
    applicationProperties.put(BUILDPACK_PROP,staging.getBuildpackUrl());
  }
  Map<Object,Object> services=new LinkedHashMap<Object,Object>();
  applicationProperties.put(SERVICES_PROP,services);
  List<CloudService> servicesToBind=deploymentInfo.getServices();
  if (servicesToBind != null) {
    for (    CloudService service : servicesToBind) {
      String serviceName=service.getName();
      if (!services.containsKey(serviceName)) {
        if (containsServiceCreationDescription(service)) {
          Map<String,String> serviceDescription=new LinkedHashMap<String,String>();
          String label=service.getLabel();
          if (label != null) {
            serviceDescription.put(LABEL_PROP,label);
          }
          String version=service.getVersion();
          if (version != null) {
            serviceDescription.put(VERSION_PROP,version);
          }
          String plan=service.getPlan();
          if (plan != null) {
            serviceDescription.put(PLAN_PROP,plan);
          }
          String provider=service.getProvider();
          if (provider != null) {
            serviceDescription.put(PROVIDER_PROP,provider);
          }
          services.put(serviceName,serviceDescription);
        }
      }
    }
  }
  if (deploymentInfoYaml.isEmpty()) {
    return false;
  }
  DumperOptions options=new DumperOptions();
  options.setCanonical(false);
  options.setPrettyFlow(true);
  options.setDefaultFlowStyle(FlowStyle.BLOCK);
  Yaml yaml=new Yaml(options);
  String manifestValue=yaml.dump(deploymentInfoYaml);
  if (manifestValue == null) {
    throw CloudErrorUtil.toCoreException(""String_Node_Str"" + appModule.getDeployedApplicationName() + ""String_Node_Str""+ deploymentInfoYaml);
  }
  OutputStream outStream=null;
  try {
    outStream=getOutStream();
    if (outStream == null) {
      throw CloudErrorUtil.toCoreException(""String_Node_Str"" + relativePath + ""String_Node_Str""+ appModule.getDeployedApplicationName());
    }
    outStream.write(manifestValue.getBytes());
    outStream.flush();
    IProject project=CloudUtil.getProject(appModule);
    if (project != null) {
      project.refreshLocal(IResource.DEPTH_INFINITE,monitor);
    }
    return true;
  }
 catch (  IOException io) {
    throw CloudErrorUtil.toCoreException(io);
  }
 finally {
    if (outStream != null) {
      try {
        outStream.close();
      }
 catch (      IOException io) {
      }
    }
  }
}","/** 
 * Writes the app's current deployment info into a manifest file in the app's related workspace project. If the workspace project is not accessible, false is returned. If the manifest file does not exist in the app's workspace project, one will be created. If manifest file failed to create, exception is thrown. Returns true if the manifest file was successfully written. If so, the project is also refreshed.
 * @return true if deployment info for the cloud module was written tomanifest file. False if there was no content to write to the manifest file. <p/> WHne writing content to manifest, if the application has a previous deployment information, and the app name changed, meaning the current name of the application does not match the one in the old deployment information, the old entry in the manifest will be updated to the new name, rather than creating a new entry with the new name. <p/> If both an existing entry with the current application name, as well as an old entry with the old application name, exist, the old entry has higher priority, as the old entry truly represents the application that is being edited.
 * @param monitor progress monitor
 * @param previousInfo Previous deployment information pertaining to thegive application module. May be null if there is no previous information available.
 * @throws CoreException if error occurred while writing to a Manifest file.
 */
public boolean write(IProgressMonitor monitor,ApplicationDeploymentInfo previousInfo) throws CoreException {
  ApplicationDeploymentInfo deploymentInfo=appModule.getDeploymentInfo();
  if (deploymentInfo == null) {
    return false;
  }
  String previousName=previousInfo != null ? previousInfo.getDeploymentName() : null;
  String appName=deploymentInfo.getDeploymentName();
  Map<Object,Object> deploymentInfoYaml=parseManifestFromFile();
  if (deploymentInfoYaml == null) {
    deploymentInfoYaml=new LinkedHashMap<Object,Object>();
  }
  Object applicationsObj=deploymentInfoYaml.get(APPLICATIONS_PROP);
  List<Map<Object,Object>> applicationsList=null;
  if (applicationsObj == null) {
    applicationsList=new ArrayList<Map<Object,Object>>();
    deploymentInfoYaml.put(APPLICATIONS_PROP,applicationsList);
  }
 else   if (applicationsObj instanceof List<?>) {
    applicationsList=(List<Map<Object,Object>>)applicationsObj;
  }
 else {
    throw CloudErrorUtil.toCoreException(""String_Node_Str"" + relativePath + ""String_Node_Str"");
  }
  Map<Object,Object> applicationWithSameName=null;
  Map<Object,Object> oldApplication=null;
  for (  Object appMap : applicationsList) {
    if (appMap instanceof Map<?,?>) {
      Map<Object,Object> properties=(Map<Object,Object>)appMap;
      String name=getStringValue(properties,NAME_PROP);
      if (appName.equals(name)) {
        applicationWithSameName=properties;
      }
 else       if (previousName != null && previousName.equals(name)) {
        oldApplication=properties;
      }
    }
  }
  Map<Object,Object> application=oldApplication != null ? oldApplication : applicationWithSameName;
  if (application == null) {
    application=new LinkedHashMap<Object,Object>();
    applicationsList.add(application);
  }
  application.put(NAME_PROP,appName);
  String memory=getMemoryAsString(deploymentInfo.getMemory());
  if (memory != null) {
    application.put(MEMORY_PROP,memory);
  }
  int instances=deploymentInfo.getInstances();
  if (instances > 0) {
    application.put(INSTANCES_PROP,instances);
  }
  List<String> urls=deploymentInfo.getUris();
  if (urls != null && !urls.isEmpty()) {
    String url=urls.get(0);
    CloudApplicationUrlLookup lookup=CloudApplicationUrlLookup.getCurrentLookup(cloudServer);
    CloudApplicationURL cloudUrl=lookup.getCloudApplicationURL(url);
    String subdomain=cloudUrl.getSubdomain();
    String domain=cloudUrl.getDomain();
    if (subdomain != null) {
      application.put(SUB_DOMAIN_PROP,subdomain);
    }
    if (domain != null) {
      application.put(DOMAIN_PROP,domain);
    }
  }
  Staging staging=deploymentInfo.getStaging();
  if (staging != null && staging.getBuildpackUrl() != null) {
    application.put(BUILDPACK_PROP,staging.getBuildpackUrl());
  }
  Map<Object,Object> services=new LinkedHashMap<Object,Object>();
  application.put(SERVICES_PROP,services);
  List<CloudService> servicesToBind=deploymentInfo.getServices();
  if (servicesToBind != null) {
    for (    CloudService service : servicesToBind) {
      String serviceName=service.getName();
      if (!services.containsKey(serviceName)) {
        if (containsServiceCreationDescription(service)) {
          Map<String,String> serviceDescription=new LinkedHashMap<String,String>();
          String label=service.getLabel();
          if (label != null) {
            serviceDescription.put(LABEL_PROP,label);
          }
          String version=service.getVersion();
          if (version != null) {
            serviceDescription.put(VERSION_PROP,version);
          }
          String plan=service.getPlan();
          if (plan != null) {
            serviceDescription.put(PLAN_PROP,plan);
          }
          String provider=service.getProvider();
          if (provider != null) {
            serviceDescription.put(PROVIDER_PROP,provider);
          }
          services.put(serviceName,serviceDescription);
        }
      }
    }
  }
  if (deploymentInfoYaml.isEmpty()) {
    return false;
  }
  DumperOptions options=new DumperOptions();
  options.setCanonical(false);
  options.setPrettyFlow(true);
  options.setDefaultFlowStyle(FlowStyle.BLOCK);
  Yaml yaml=new Yaml(options);
  String manifestValue=yaml.dump(deploymentInfoYaml);
  if (manifestValue == null) {
    throw CloudErrorUtil.toCoreException(""String_Node_Str"" + appModule.getDeployedApplicationName() + ""String_Node_Str""+ deploymentInfoYaml);
  }
  OutputStream outStream=null;
  try {
    outStream=getOutStream();
    if (outStream == null) {
      throw CloudErrorUtil.toCoreException(""String_Node_Str"" + relativePath + ""String_Node_Str""+ appModule.getDeployedApplicationName());
    }
    outStream.write(manifestValue.getBytes());
    outStream.flush();
    IProject project=CloudUtil.getProject(appModule);
    if (project != null) {
      project.refreshLocal(IResource.DEPTH_INFINITE,monitor);
    }
    return true;
  }
 catch (  IOException io) {
    throw CloudErrorUtil.toCoreException(io);
  }
 finally {
    if (outStream != null) {
      try {
        outStream.close();
      }
 catch (      IOException io) {
      }
    }
  }
}",0.8606769745089845
10768,"protected void performOperation(IProgressMonitor monitor) throws CoreException {
  appModule=prepareForDeployment(monitor);
  IStatus validationStatus=appModule.validateDeploymentInfo();
  if (!validationStatus.isOK()) {
    throw CloudErrorUtil.toCoreException(""String_Node_Str"" + appModule.getDeployedApplicationName() + ERROR_RESULT_MESSAGE+ ""String_Node_Str""+ validationStatus.getMessage());
  }
  try {
    CloudFoundryServer cloudServer=getCloudFoundryServer();
    CloudFoundryPlugin.getCallback().stopApplicationConsole(appModule,cloudServer);
    boolean debug=appModule.getDeploymentInfo().getDeploymentMode() == ApplicationAction.DEBUG;
    performDeployment(appModule,monitor);
    if (debug) {
      new DebugCommandBuilder(modules,cloudServer).getDebugCommand(ApplicationAction.CONNECT_TO_DEBUGGER,null).run(monitor);
    }
    if (TunnelBehaviour.isCaldecottApp(appModule.getDeployedApplicationName())) {
      new TunnelBehaviour(cloudServer).stopAndDeleteAllTunnels(monitor);
    }
    internalUpdateApplicationInstanceStats(appModule,monitor);
  }
 catch (  OperationCanceledException e) {
    ((Server)getServer()).setModuleState(modules,IServer.STATE_UNKNOWN);
  }
}","protected void performOperation(IProgressMonitor monitor) throws CoreException {
  appModule=prepareForDeployment(monitor);
  IStatus validationStatus=appModule.validateDeploymentInfo();
  if (!validationStatus.isOK()) {
    throw CloudErrorUtil.toCoreException(""String_Node_Str"" + appModule.getDeployedApplicationName() + ERROR_RESULT_MESSAGE+ ""String_Node_Str""+ validationStatus.getMessage());
  }
  try {
    CloudFoundryServer cloudServer=getCloudFoundryServer();
    CloudFoundryPlugin.getCallback().stopApplicationConsole(appModule,cloudServer);
    boolean debug=appModule.getDeploymentInfo().getDeploymentMode() == ApplicationAction.DEBUG;
    performDeployment(appModule,monitor);
    if (debug) {
      new DebugCommandBuilder(modules,cloudServer).getDebugCommand(ApplicationAction.CONNECT_TO_DEBUGGER,null).run(monitor);
    }
    if (TunnelBehaviour.isCaldecottApp(appModule.getDeployedApplicationName())) {
      new TunnelBehaviour(cloudServer).stopAndDeleteAllTunnels(monitor);
    }
    try {
      internalUpdateApplicationInstanceStats(appModule,monitor);
    }
 catch (    CoreException e) {
      CloudFoundryPlugin.logError(e);
    }
  }
 catch (  OperationCanceledException e) {
    ((Server)getServer()).setModuleState(modules,IServer.STATE_UNKNOWN);
  }
}",0.9622718052738336
10769,"/** 
 * Obtain a valid deployment info containing enough information to push an application, start it if necessary (starting an application is optional), and also optionally bind services to the application
 * @param server where application should be pushed to.
 * @param appModule pertaining to the application that needs to be pushed.
 * @param monitor
 * @throws CoreException if invalid deployment info.
 * @throws OperationCanceledException if user canceled deployment.
 */
public void prepareForDeployment(final CloudFoundryServer server,final CloudFoundryApplicationModule appModule,final IProgressMonitor monitor) throws CoreException, OperationCanceledException {
  IModule module=appModule.getLocalModule();
  RepublishModule repModule=CloudFoundryPlugin.getModuleCache().getData(server.getServerOriginal()).untagForAutomaticRepublish(module);
  if (repModule != null) {
    ApplicationDeploymentInfo republishDeploymentInfo=repModule.getDeploymentInfo();
    if (republishDeploymentInfo != null) {
      DeploymentInfoWorkingCopy copy=appModule.getDeploymentInfoWorkingCopy();
      copy.setInfo(republishDeploymentInfo);
      copy.save();
    }
  }
  if (!appModule.validateDeploymentInfo().isOK()) {
    final ApplicationWizardDelegate providerDelegate=ApplicationWizardRegistry.getWizardProvider(appModule.getLocalModule());
    if (providerDelegate == null) {
      throw CloudErrorUtil.toCoreException(""String_Node_Str"" + appModule.getDeployedApplicationName() + ""String_Node_Str""+ server.getServer().getName()+ ""String_Node_Str""+ appModule.getLocalModule().getModuleType().getId());
    }
    DeploymentInfoWorkingCopy workingCopy=null;
    try {
      workingCopy=new ManifestParser(appModule,server).load();
    }
 catch (    Throwable ce) {
      CloudFoundryPlugin.logError(ce);
    }
    final boolean[] cancelled={false};
    final boolean[] writeToManifest={false};
    final IStatus status[]={Status.OK_STATUS};
    final DeploymentInfoWorkingCopy finWorkingCopy=workingCopy;
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        CloudFoundryApplicationWizard wizard=new CloudFoundryApplicationWizard(server,appModule,finWorkingCopy,providerDelegate);
        try {
          WizardDialog dialog=new WizardDialog(PlatformUI.getWorkbench().getModalDialogShellProvider().getShell(),wizard);
          int dialogueStatus=dialog.open();
          if (dialogueStatus == Dialog.OK) {
            final List<CloudService> addedServices=wizard.getCloudServicesToCreate();
            writeToManifest[0]=wizard.persistManifestChanges();
            if (addedServices != null && !addedServices.isEmpty()) {
              IProgressMonitor subMonitor=new SubProgressMonitor(monitor,addedServices.size());
              try {
                server.getBehaviour().createService(addedServices.toArray(new CloudService[0]),subMonitor);
              }
 catch (              CoreException e) {
                CloudFoundryPlugin.log(e);
              }
 finally {
                subMonitor.done();
              }
            }
          }
 else {
            cancelled[0]=true;
          }
        }
 catch (        Throwable t) {
          cancelled[0]=true;
          status[0]=CloudFoundryPlugin.getErrorStatus(t);
        }
      }
    }
);
    if (cancelled[0]) {
      if (!status[0].isOK()) {
        CloudFoundryPlugin.logError(""String_Node_Str"" + status[0].getMessage(),status[0].getException());
      }
      throw new OperationCanceledException();
    }
 else {
      if (status[0].isOK()) {
        status[0]=appModule.validateDeploymentInfo();
      }
      if (!status[0].isOK()) {
        throw new CoreException(status[0]);
      }
 else       if (writeToManifest[0]) {
        IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1);
        try {
          new ManifestParser(appModule,server).write(subMonitor);
        }
 catch (        Throwable ce) {
          CloudFoundryPlugin.logError(ce);
        }
 finally {
          subMonitor.done();
        }
      }
    }
  }
}","/** 
 * Obtain a valid deployment info containing enough information to push an application, start it if necessary (starting an application is optional), and also optionally bind services to the application
 * @param server where application should be pushed to.
 * @param appModule pertaining to the application that needs to be pushed.
 * @param monitor
 * @throws CoreException if invalid deployment info.
 * @throws OperationCanceledException if user canceled deployment.
 */
public void prepareForDeployment(final CloudFoundryServer server,final CloudFoundryApplicationModule appModule,final IProgressMonitor monitor) throws CoreException, OperationCanceledException {
  IModule module=appModule.getLocalModule();
  RepublishModule repModule=CloudFoundryPlugin.getModuleCache().getData(server.getServerOriginal()).untagForAutomaticRepublish(module);
  if (repModule != null) {
    ApplicationDeploymentInfo republishDeploymentInfo=repModule.getDeploymentInfo();
    if (republishDeploymentInfo != null) {
      DeploymentInfoWorkingCopy copy=appModule.getDeploymentInfoWorkingCopy();
      copy.setInfo(republishDeploymentInfo);
      copy.save();
    }
  }
  if (!appModule.validateDeploymentInfo().isOK()) {
    final ApplicationWizardDelegate providerDelegate=ApplicationWizardRegistry.getWizardProvider(appModule.getLocalModule());
    if (providerDelegate == null) {
      throw CloudErrorUtil.toCoreException(""String_Node_Str"" + appModule.getDeployedApplicationName() + ""String_Node_Str""+ server.getServer().getName()+ ""String_Node_Str""+ appModule.getLocalModule().getModuleType().getId());
    }
    DeploymentInfoWorkingCopy workingCopy=null;
    try {
      workingCopy=new ManifestParser(appModule,server).load();
    }
 catch (    Throwable ce) {
      CloudFoundryPlugin.logError(ce);
    }
    ApplicationDeploymentInfo oldInfo=workingCopy != null ? workingCopy.copy() : null;
    final boolean[] cancelled={false};
    final boolean[] writeToManifest={false};
    final IStatus status[]={Status.OK_STATUS};
    final DeploymentInfoWorkingCopy finWorkingCopy=workingCopy;
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        CloudFoundryApplicationWizard wizard=new CloudFoundryApplicationWizard(server,appModule,finWorkingCopy,providerDelegate);
        try {
          WizardDialog dialog=new WizardDialog(PlatformUI.getWorkbench().getModalDialogShellProvider().getShell(),wizard);
          int dialogueStatus=dialog.open();
          if (dialogueStatus == Dialog.OK) {
            final List<CloudService> addedServices=wizard.getCloudServicesToCreate();
            writeToManifest[0]=wizard.persistManifestChanges();
            if (addedServices != null && !addedServices.isEmpty()) {
              IProgressMonitor subMonitor=new SubProgressMonitor(monitor,addedServices.size());
              try {
                server.getBehaviour().createService(addedServices.toArray(new CloudService[0]),subMonitor);
              }
 catch (              CoreException e) {
                CloudFoundryPlugin.log(e);
              }
 finally {
                subMonitor.done();
              }
            }
          }
 else {
            cancelled[0]=true;
          }
        }
 catch (        Throwable t) {
          cancelled[0]=true;
          status[0]=CloudFoundryPlugin.getErrorStatus(t);
        }
      }
    }
);
    if (cancelled[0]) {
      if (!status[0].isOK()) {
        CloudFoundryPlugin.logError(""String_Node_Str"" + status[0].getMessage(),status[0].getException());
      }
      throw new OperationCanceledException();
    }
 else {
      if (status[0].isOK()) {
        status[0]=appModule.validateDeploymentInfo();
      }
      if (!status[0].isOK()) {
        throw new CoreException(status[0]);
      }
 else       if (writeToManifest[0]) {
        IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1);
        try {
          new ManifestParser(appModule,server).write(subMonitor,oldInfo);
        }
 catch (        Throwable ce) {
          CloudFoundryPlugin.logError(ce);
        }
 finally {
          subMonitor.done();
        }
      }
    }
  }
}",0.9883905658071612
10770,"@Override protected IStatus run(IProgressMonitor monitor){
  try {
    serverBehaviour.refreshApplicationBoundServices(appModule,monitor);
    ManifestParser parser=new ManifestParser(appModule,cloudServer);
    parser.write(monitor);
  }
 catch (  CoreException ce) {
    errorStatus[0]=ce.getStatus();
    return errorStatus[0];
  }
  return Status.OK_STATUS;
}","@Override protected IStatus run(IProgressMonitor monitor){
  try {
    serverBehaviour.refreshApplicationBoundServices(appModule,monitor);
    ManifestParser parser=new ManifestParser(appModule,cloudServer);
    parser.write(monitor,null);
  }
 catch (  CoreException ce) {
    errorStatus[0]=ce.getStatus();
    return errorStatus[0];
  }
  return Status.OK_STATUS;
}",0.9931600547195624
10771,"protected void writeToManifest(){
  final IStatus[] errorStatus=new IStatus[1];
  try {
    final CloudFoundryApplicationModule appModule=getExistingApplication();
    if (appModule != null && saveManifest != null && !saveManifest.isDisposed()) {
      if (MessageDialog.openConfirm(saveManifest.getShell(),""String_Node_Str"",""String_Node_Str"")) {
        Job job=new Job(""String_Node_Str"" + appModule.getDeployedApplicationName()){
          @Override protected IStatus run(          IProgressMonitor monitor){
            try {
              serverBehaviour.refreshApplicationBoundServices(appModule,monitor);
              ManifestParser parser=new ManifestParser(appModule,cloudServer);
              parser.write(monitor);
            }
 catch (            CoreException ce) {
              errorStatus[0]=ce.getStatus();
              return errorStatus[0];
            }
            return Status.OK_STATUS;
          }
        }
;
        job.schedule();
      }
    }
 else {
      errorStatus[0]=CloudFoundryPlugin.getErrorStatus(""String_Node_Str"");
    }
  }
 catch (  CoreException ce) {
    errorStatus[0]=ce.getStatus();
  }
  if (errorStatus[0] != null && !errorStatus[0].isOK()) {
    logError(""String_Node_Str"" + errorStatus[0].getMessage());
  }
}","protected void writeToManifest(){
  final IStatus[] errorStatus=new IStatus[1];
  try {
    final CloudFoundryApplicationModule appModule=getExistingApplication();
    if (appModule != null && saveManifest != null && !saveManifest.isDisposed()) {
      if (MessageDialog.openConfirm(saveManifest.getShell(),""String_Node_Str"",""String_Node_Str"")) {
        Job job=new Job(""String_Node_Str"" + appModule.getDeployedApplicationName()){
          @Override protected IStatus run(          IProgressMonitor monitor){
            try {
              serverBehaviour.refreshApplicationBoundServices(appModule,monitor);
              ManifestParser parser=new ManifestParser(appModule,cloudServer);
              parser.write(monitor,null);
            }
 catch (            CoreException ce) {
              errorStatus[0]=ce.getStatus();
              return errorStatus[0];
            }
            return Status.OK_STATUS;
          }
        }
;
        job.schedule();
      }
    }
 else {
      errorStatus[0]=CloudFoundryPlugin.getErrorStatus(""String_Node_Str"");
    }
  }
 catch (  CoreException ce) {
    errorStatus[0]=ce.getStatus();
  }
  if (errorStatus[0] != null && !errorStatus[0].isOK()) {
    logError(""String_Node_Str"" + errorStatus[0].getMessage());
  }
}",0.998026056060008
10772,"protected String getContent(IProgressMonitor monitor) throws CoreException {
  String content=null;
  CloudFoundryException cfe=null;
  CoreException error=null;
  try {
    content=server.getBehaviour().getFile(appName,instanceIndex,path,offset,monitor);
    if (content != null) {
      offset+=content.length();
    }
    errorCount=MAX_COUNT;
    return content;
  }
 catch (  CoreException e) {
    error=e;
    Throwable t=e.getCause();
    if (t instanceof CloudFoundryException) {
      cfe=(CloudFoundryException)t;
    }
  }
catch (  CloudFoundryException cfex) {
    error=new CoreException(CloudFoundryPlugin.getErrorStatus(cfe));
    cfe=cfex;
  }
  if (cfe != null && (HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.equals(cfe.getStatusCode()) || CloudErrorUtil.isFileNotFoundForInstance(cfe))) {
    return null;
  }
  if (adjustCount()) {
    throw error;
  }
 else {
    return null;
  }
}","protected String getContent(IProgressMonitor monitor) throws CoreException {
  String content=null;
  CloudFoundryException cfe=null;
  CoreException error=null;
  try {
    content=server.getBehaviour().getFile(appName,instanceIndex,path,offset,monitor);
    if (content != null) {
      offset+=content.length();
    }
    errorCount=MAX_COUNT;
    return content;
  }
 catch (  CoreException e) {
    error=e;
    Throwable t=e.getCause();
    if (t instanceof CloudFoundryException) {
      cfe=(CloudFoundryException)t;
    }
  }
catch (  CloudFoundryException cfex) {
    error=new CoreException(CloudFoundryPlugin.getErrorStatus(cfe));
    cfe=cfex;
  }
  if (cfe != null && (HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.equals(cfe.getStatusCode()) || CloudErrorUtil.isFileNotFoundForInstance(cfe))) {
    return null;
  }
  if (adjustErrorCount() && !shouldCloseStream()) {
    requestStreamClose(true);
    String actualError=error.getMessage() != null ? error.getMessage() : ""String_Node_Str"" + path;
    throw new CoreException(CloudFoundryPlugin.getErrorStatus(""String_Node_Str"" + path + ""String_Node_Str""+ actualError,error));
  }
  return null;
}",0.8388349514563107
10773,"public void resetClient(){
  client=null;
}","public void resetClient(){
  client=null;
  domainFromOrgs=null;
}",0.7889908256880734
10774,"@Override protected void setUrlInDescriptor(String url){
  if (ValueValidationUtil.isEmpty(url)) {
    List<String> urls=new ArrayList<String>();
    descriptor.getDeploymentInfo().setUris(urls);
  }
}","@Override protected void setUrlInDescriptor(String url){
  if (ValueValidationUtil.isEmpty(url)) {
    List<String> urls=new ArrayList<String>();
    descriptor.getDeploymentInfo().setUris(urls);
    return;
  }
  super.setUrlInDescriptor(url);
}",0.8993288590604027
10775,"@Override public boolean isPageComplete(){
  boolean isComplete=super.isPageComplete();
  if (isComplete) {
    isComplete=status == null || status.isOK();
  }
  return isComplete;
}","@Override public boolean isPageComplete(){
  boolean isComplete=super.isPageComplete();
  if (isComplete) {
    isComplete=getSelectedCloudSpace() != null && (status == null || status.isOK());
  }
  return isComplete;
}",0.9077306733167082
10776,"private IStatus doDeleteModules(final Set<IModule> deletedModules){
  IServerWorkingCopy wc=getServer().createWorkingCopy();
  try {
    deleteServicesOnModuleRemove.set(Boolean.FALSE);
    wc.modifyModules(null,deletedModules.toArray(new IModule[deletedModules.size()]),null);
    wc.save(false,null);
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.getDefault().getLog().log(new Status(IStatus.ERROR,CloudFoundryPlugin.PLUGIN_ID,""String_Node_Str"",e));
    return Status.CANCEL_STATUS;
  }
 finally {
    deleteServicesOnModuleRemove.set(Boolean.TRUE);
  }
  return Status.OK_STATUS;
}","private IStatus doDeleteModules(final Set<IModule> deletedModules){
  IServerWorkingCopy wc=getServer().createWorkingCopy();
  try {
    deleteServicesOnModuleRemove.set(Boolean.FALSE);
    wc.modifyModules(null,deletedModules.toArray(new IModule[deletedModules.size()]),null);
    wc.save(true,null);
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.getDefault().getLog().log(new Status(IStatus.ERROR,CloudFoundryPlugin.PLUGIN_ID,""String_Node_Str"",e));
    return Status.CANCEL_STATUS;
  }
 finally {
    deleteServicesOnModuleRemove.set(Boolean.TRUE);
  }
  return Status.OK_STATUS;
}",0.9941027801179444
10777,"public List<IWizardPage> getWizardPages(ApplicationWizardDescriptor descriptor,CloudFoundryServer cloudServer,CloudFoundryApplicationModule applicationModule){
  List<IWizardPage> defaultPages=new ArrayList<IWizardPage>();
  StandaloneDeploymentWizardPage deploymentPage=new StandaloneDeploymentWizardPage(cloudServer,applicationModule,descriptor,getApplicationUrlLookup());
  CloudFoundryApplicationWizardPage applicationNamePage=new CloudFoundryApplicationWizardPage(cloudServer,deploymentPage,applicationModule,descriptor);
  defaultPages.add(applicationNamePage);
  defaultPages.add(deploymentPage);
  CloudFoundryApplicationServicesWizardPage servicesPage=new CloudFoundryApplicationServicesWizardPage(cloudServer,applicationModule,descriptor);
  defaultPages.add(servicesPage);
  return defaultPages;
}","public List<IWizardPage> getWizardPages(ApplicationWizardDescriptor descriptor,CloudFoundryServer cloudServer,CloudFoundryApplicationModule applicationModule){
  List<IWizardPage> defaultPages=new ArrayList<IWizardPage>();
  StandaloneDeploymentWizardPage deploymentPage=new StandaloneDeploymentWizardPage(cloudServer,applicationModule,descriptor,getApplicationUrlLookup(),this);
  CloudFoundryApplicationWizardPage applicationNamePage=new CloudFoundryApplicationWizardPage(cloudServer,deploymentPage,applicationModule,descriptor);
  defaultPages.add(applicationNamePage);
  defaultPages.add(deploymentPage);
  CloudFoundryApplicationServicesWizardPage servicesPage=new CloudFoundryApplicationServicesWizardPage(cloudServer,applicationModule,descriptor);
  defaultPages.add(servicesPage);
  return defaultPages;
}",0.9969154842689698
10778,"public StandaloneDeploymentWizardPage(CloudFoundryServer server,CloudFoundryApplicationModule module,ApplicationWizardDescriptor descriptor,CloudApplicationUrlLookup urlLookup){
  super(server,module,descriptor,urlLookup);
}","public StandaloneDeploymentWizardPage(CloudFoundryServer server,CloudFoundryApplicationModule module,ApplicationWizardDescriptor descriptor,CloudApplicationUrlLookup urlLookup,ApplicationWizardDelegate delegate){
  super(server,module,descriptor,urlLookup,delegate);
}",0.9105691056910568
10779,"public PartChangeEvent(Object data,IStatus status,UIPart source){
  this.data=data;
  this.status=status;
  this.source=source;
}","public PartChangeEvent(Object data,IStatus status,UIPart source,int type){
  this.data=data;
  this.status=status;
  this.source=source;
  this.type=type;
}",0.9052631578947368
10780,"protected void notifyChange(PartChangeEvent changeEvent){
  if (listener != null) {
    listener.handleChange(changeEvent);
  }
}","protected void notifyChange(PartChangeEvent changeEvent){
  for (  IPartChangeListener listener : listeners) {
    listener.handleChange(changeEvent);
  }
}",0.8631578947368421
10781,"public void addPartChangeListener(IPartChangeListener listener){
  this.listener=listener;
}","public void addPartChangeListener(IPartChangeListener listener){
  if (listener != null && !listeners.contains(listener)) {
    listeners.add(listener);
  }
}",0.704
10782,"public void initialiseWizardDescriptor(ApplicationWizardDescriptor applicationDescriptor,CloudFoundryServer cloudServer,CloudFoundryApplicationModule module){
  urlLookup=CloudApplicationUrlLookup.getCurrentLookup(cloudServer);
  DeploymentInfo deploymentInfo=new DeploymentInfo();
  applicationDescriptor.setDeploymentInfo(deploymentInfo);
  DeploymentInfo lastDeploymentInfo=(module != null) ? module.getLastDeploymentInfo() : null;
  String deploymentName=null;
  if (lastDeploymentInfo != null && lastDeploymentInfo.getDeploymentName() != null) {
    deploymentName=lastDeploymentInfo.getDeploymentName();
  }
 else   if (module != null) {
    deploymentName=module.getDeploymentName();
  }
  deploymentInfo.setDeploymentName(deploymentName);
  deploymentInfo.setMemory(CloudUtil.DEFAULT_MEMORY);
  String appName=null;
  ApplicationInfo lastApplicationInfo=null;
  if (module != null) {
    lastApplicationInfo=module.getLastApplicationInfo();
  }
  if (lastApplicationInfo != null && lastApplicationInfo.getAppName() != null) {
    appName=lastApplicationInfo.getAppName();
  }
 else   if (module != null) {
    appName=module.getDeploymentName();
  }
  if (appName != null) {
    ApplicationInfo appInfo=new ApplicationInfo(appName);
    applicationDescriptor.setApplicationInfo(appInfo);
  }
  applicationDescriptor.setStartDeploymentMode(ApplicationAction.START);
  if (getApplicationDelegate() == null || getApplicationDelegate().requiresURL()) {
    String url=getDefaultURL(lastDeploymentInfo,deploymentName);
    if (url != null) {
      List<String> urls=new ArrayList<String>();
      urls.add(url);
      applicationDescriptor.getDeploymentInfo().setUris(urls);
    }
  }
}","public void initialiseWizardDescriptor(ApplicationWizardDescriptor applicationDescriptor,CloudFoundryServer cloudServer,CloudFoundryApplicationModule module){
  urlLookup=CloudApplicationUrlLookup.getCurrentLookup(cloudServer);
  DeploymentInfo deploymentInfo=new DeploymentInfo();
  applicationDescriptor.setDeploymentInfo(deploymentInfo);
  DeploymentInfo lastDeploymentInfo=(module != null) ? module.getLastDeploymentInfo() : null;
  String deploymentName=null;
  if (lastDeploymentInfo != null && lastDeploymentInfo.getDeploymentName() != null) {
    deploymentName=lastDeploymentInfo.getDeploymentName();
  }
 else   if (module != null) {
    deploymentName=module.getDeploymentName();
  }
  deploymentInfo.setDeploymentName(deploymentName);
  deploymentInfo.setMemory(CloudUtil.DEFAULT_MEMORY);
  String appName=null;
  ApplicationInfo lastApplicationInfo=null;
  if (module != null) {
    lastApplicationInfo=module.getLastApplicationInfo();
  }
  if (lastApplicationInfo != null && lastApplicationInfo.getAppName() != null) {
    appName=lastApplicationInfo.getAppName();
  }
 else   if (module != null) {
    appName=module.getDeploymentName();
  }
  if (appName != null) {
    ApplicationInfo appInfo=new ApplicationInfo(appName);
    applicationDescriptor.setApplicationInfo(appInfo);
  }
  applicationDescriptor.setStartDeploymentMode(ApplicationAction.START);
}",0.8971596474045054
10783,"public void setApplicationInfo(ApplicationInfo applicationInfo){
  this.applicationInfo=applicationInfo;
  notifyChanged(applicationInfo,DescriptorProperty.ApplicationInfo);
}","public void setApplicationInfo(ApplicationInfo applicationInfo){
  this.applicationInfo=applicationInfo;
}",0.7544483985765125
10784,"public CloudFoundryConsole(CloudApplication app,MessageConsole console){
  super(getConsoleName(app));
  this.console=console;
  setSystem(true);
}","public CloudFoundryConsole(CloudApplication app,MessageConsole console){
  this.app=app;
  this.console=console;
}",0.8122605363984674
10785,"@Override protected synchronized IStatus run(IProgressMonitor monitor){
  if (this.tailing) {
    if (activeStreams != null && !activeStreams.isEmpty()) {
      Map<ICloudFoundryConsoleOutputStream,Integer> copy=new HashMap<ICloudFoundryConsoleOutputStream,Integer>(activeStreams);
      for (      Entry<ICloudFoundryConsoleOutputStream,Integer> entry : copy.entrySet()) {
        int count=entry.getValue();
        ICloudFoundryConsoleOutputStream stream=entry.getKey();
        boolean forceClose=false;
        if (!stream.shouldCloseStream()) {
          try {
            stream.write(monitor);
          }
 catch (          CoreException e) {
            Throwable t=e.getCause();
            if (t instanceof IOException) {
              forceClose=true;
            }
            count++;
          }
        }
 else {
          forceClose=true;
        }
        activeStreams.remove(stream);
        if (forceClose || count > 5) {
          try {
            stream.close();
          }
 catch (          IOException ioe) {
          }
        }
 else {
          activeStreams.put(stream,count);
        }
      }
    }
    if (activeStreams != null && !activeStreams.isEmpty()) {
      schedule(sampleInterval);
    }
 else {
      stopTailing();
    }
  }
  return Status.OK_STATUS;
}","@Override protected synchronized IStatus run(IProgressMonitor monitor){
  if (tailing) {
    remove=stream.shouldCloseStream();
    if (!remove) {
      try {
        stream.write(monitor);
      }
 catch (      CoreException e) {
        remove=true;
        CloudFoundryPlugin.logError(e);
      }
    }
    if (remove) {
      tailing(false);
      try {
        stream.close();
      }
 catch (      IOException io) {
        CloudFoundryPlugin.logWarning(""String_Node_Str"" + name);
      }
    }
 else {
      schedule(sampleInterval);
    }
  }
  return Status.OK_STATUS;
}",0.2460063897763578
10786,"/** 
 * Starts the job and creates new output streams to the console for each file listed in the console contents.
 * @param contents to stream to the console
 */
public synchronized void startTailing(ConsoleContents contents){
  if (contents != null) {
    List<IConsoleContent> consoleContents=contents.getContents();
    if (consoleContents != null && !consoleContents.isEmpty()) {
      if (activeStreams == null) {
        activeStreams=new LinkedHashMap<ICloudFoundryConsoleOutputStream,Integer>();
      }
      for (      IConsoleContent content : consoleContents) {
        IOConsoleOutputStream stream=console.newOutputStream();
        if (stream != null) {
          ICloudFoundryConsoleOutputStream outStream=content.getOutputStream(stream);
          if (outStream != null) {
            activeStreams.put(outStream,0);
          }
 else {
            try {
              stream.close();
            }
 catch (            IOException ioe) {
            }
          }
        }
      }
      if (!activeStreams.isEmpty()) {
        tailing=true;
        schedule();
      }
    }
  }
}","/** 
 * Starts stream jobs and creates new output streams to the console for each file listed in the console contents.
 * @param contents to stream to the console
 */
public synchronized void startTailing(ConsoleContents contents){
  clean();
  if (contents != null) {
    List<IConsoleContent> consoleContents=contents.getContents();
    if (consoleContents != null && !consoleContents.isEmpty()) {
      for (      IConsoleContent content : consoleContents) {
        IOConsoleOutputStream stream=console.newOutputStream();
        if (stream != null) {
          ICloudFoundryConsoleOutputStream outStream=content.getOutputStream(stream);
          if (outStream != null) {
            activeStreams.add(new ConsoleStream(getConsoleName(app),outStream));
          }
 else {
            try {
              stream.close();
            }
 catch (            IOException ioe) {
            }
          }
        }
      }
    }
  }
  for (  ConsoleStream stream : activeStreams) {
    stream.tailing(true);
    stream.schedule();
  }
}",0.6569821930646673
10787,"public void stopConsole(IServer server,CloudApplication app,int instanceIndex){
  String appUrl=getConsoleId(server,app,instanceIndex);
  CloudFoundryConsole serverLogTail=consoleByUri.get(appUrl);
  if (serverLogTail != null) {
    serverLogTail.stopTailing();
    consoleByUri.remove(appUrl);
  }
}","public void stopConsole(IServer server,CloudApplication app,int instanceIndex){
  String appUrl=getConsoleId(server,app,instanceIndex);
  CloudFoundryConsole serverLogTail=consoleByUri.get(appUrl);
  if (serverLogTail != null) {
    serverLogTail.stop();
    consoleByUri.remove(appUrl);
  }
}",0.988195615514334
10788,"public void stopConsoles(){
  for (  Entry<String,CloudFoundryConsole> tailEntry : consoleByUri.entrySet()) {
    tailEntry.getValue().stopTailing();
  }
}","public void stopConsoles(){
  for (  Entry<String,CloudFoundryConsole> tailEntry : consoleByUri.entrySet()) {
    tailEntry.getValue().stop();
  }
}",0.976897689768977
10789,"/** 
 * Either returns a valid, available Cloud Application URL with the given host, or null
 * @param host
 * @return Non-null valid, available Cloud Application URL.
 * @throws CoreException if URL is not available, is invalid, or list ofdomains cannot be resolved,
 */
public CloudApplicationURL getDefaultApplicationURL(String host){
  List<CloudDomain> domains=getDomains();
  if (domains == null || domains.isEmpty()) {
    return null;
  }
  CloudApplicationURL appURL=null;
  for (  CloudDomain domain : domains) {
    String suggestedURL=host + ""String_Node_Str"" + domain.getName();
    try {
      appURL=getCloudApplicationURL(suggestedURL);
      break;
    }
 catch (    CoreException ce) {
    }
  }
  return appURL;
}","/** 
 * Either returns a valid, available Cloud Application URL with the given host, or null
 * @param host
 * @return Valid, available Cloud Application URL.
 */
public CloudApplicationURL getDefaultApplicationURL(String host){
  List<CloudDomain> domains=getDomains();
  if (domains == null || domains.isEmpty()) {
    return null;
  }
  CloudApplicationURL appURL=null;
  for (  CloudDomain domain : domains) {
    String suggestedURL=host + ""String_Node_Str"" + domain.getName();
    try {
      appURL=getCloudApplicationURL(suggestedURL);
      break;
    }
 catch (    CoreException ce) {
    }
  }
  return appURL;
}",0.2125461254612546
10790,"/** 
 * The Cloud Foundry application name. This may not necessarily be the same as the associated WTP IModule name or workspace project name, as users are allowed to enter a different name for the application when pushing the application to a Cloud Foundry server.
 * @return Cloud Foundry application name.
 */
public synchronized String getApplicationId(){
  return applicationId;
}","/** 
 * Generally, the application ID is the application module name OR the actual deployed Cloud Application. TODO: NOTE that this appears to be the same as getDeployedName() as well as getName(). Either make it clear that ID and Names are different for a cloud application, or use ONE clearly documented method to obtain the app name.
 */
public synchronized String getApplicationId(){
  return applicationId;
}",0.2857142857142857
10791,"public static ApplicationProvider getApplicationProvider(IModule module){
  if (delegates == null) {
    delegates=load();
  }
  ApplicationProvider provider=null;
  for (  Priority priority : Priority.values()) {
    List<ApplicationProvider> providerList=delegates.get(priority);
    if (providerList != null) {
      for (      ApplicationProvider prv : providerList) {
        if (supportsModule(module,prv)) {
          provider=prv;
          break;
        }
      }
    }
  }
  return provider;
}","/** 
 * Get the application delegate provider based on the provider ID (e.g. org.cloudfoundry.ide.eclipse.server.application.javaweb). This is used in case a IModule is not available.
 * @param providerID
 * @return ApplicationProvider matching the specified providerID, or null ifnot found.
 */
public static ApplicationProvider getApplicationProvider(String providerID){
  if (providerID == null) {
    return null;
  }
  if (delegates == null) {
    delegates=load();
  }
  ApplicationProvider provider=null;
  for (  Priority priority : Priority.values()) {
    List<ApplicationProvider> providerList=delegates.get(priority);
    if (providerList != null) {
      for (      ApplicationProvider prv : providerList) {
        if (providerID.equals(prv.getProviderID())) {
          provider=prv;
          break;
        }
      }
    }
  }
  return provider;
}",0.597953216374269
10792,"@Override public DeploymentDescriptor prepareForDeployment(final CloudFoundryServer server,final CloudFoundryApplicationModule appModule,final IProgressMonitor monitor){
  DeploymentDescriptor descriptor=null;
  CloudApplication existingApp=appModule.getApplication();
  if (existingApp != null) {
    descriptor=new DeploymentDescriptor();
    descriptor.applicationInfo=new ApplicationInfo(existingApp.getName());
    descriptor.deploymentInfo=new DeploymentInfo();
    descriptor.deploymentInfo.setUris(existingApp.getUris());
    descriptor.deploymentMode=ApplicationAction.START;
    DeploymentInfo lastDeploymentInfo=appModule.getLastDeploymentInfo();
    if (lastDeploymentInfo != null) {
      descriptor.deploymentInfo.setServices(lastDeploymentInfo.getServices());
    }
  }
 else {
    IModule module=appModule.getLocalModule();
    RepublishModule repModule=CloudFoundryPlugin.getModuleCache().getData(server.getServerOriginal()).untagForAutomaticRepublish(module);
    if (repModule != null) {
      descriptor=repModule.getDeploymentDescriptor();
    }
    if (!isValidDescriptor(descriptor,module)) {
      final DeploymentDescriptor[] depDescriptors=new DeploymentDescriptor[1];
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          ApplicationWizardProviderDelegate providerDelegate=ApplicationWizardRegistry.getWizardProvider(appModule.getLocalModule());
          if (providerDelegate == null) {
            CloudFoundryPlugin.logError(""String_Node_Str"" + appModule.getApplicationId() + ""String_Node_Str""+ server.getServer().getName()+ ""String_Node_Str""+ appModule.getLocalModule().getModuleType().getId());
            return;
          }
          CloudFoundryApplicationWizard wizard=new CloudFoundryApplicationWizard(server,appModule,providerDelegate);
          WizardDialog dialog=new WizardDialog(PlatformUI.getWorkbench().getModalDialogShellProvider().getShell(),wizard);
          int status=dialog.open();
          if (status == Dialog.OK) {
            DeploymentDescriptor descriptorToUpdate=new DeploymentDescriptor();
            descriptorToUpdate.applicationInfo=wizard.getApplicationInfo();
            descriptorToUpdate.deploymentInfo=wizard.getDeploymentInfo();
            descriptorToUpdate.deploymentMode=wizard.getDeploymentMode();
            descriptorToUpdate.staging=wizard.getStaging();
            final List<CloudService> addedServices=wizard.getCreatedCloudServices();
            if (addedServices != null && !addedServices.isEmpty()) {
              IProgressMonitor subMonitor=new SubProgressMonitor(monitor,addedServices.size());
              try {
                server.getBehaviour().createService(addedServices.toArray(new CloudService[0]),subMonitor);
              }
 catch (              CoreException e) {
                CloudFoundryPlugin.logError(e);
              }
 finally {
                subMonitor.done();
              }
            }
            List<String> selectedServices=wizard.getSelectedServicesForBinding();
            descriptorToUpdate.deploymentInfo.setServices(selectedServices);
            depDescriptors[0]=descriptorToUpdate;
          }
        }
      }
);
      descriptor=depDescriptors[0];
    }
  }
  if (descriptor == null || descriptor.deploymentInfo == null) {
    throw new OperationCanceledException();
  }
  return descriptor;
}","@Override public DeploymentDescriptor prepareForDeployment(final CloudFoundryServer server,final CloudFoundryApplicationModule appModule,final IProgressMonitor monitor){
  DeploymentDescriptor descriptor=null;
  CloudApplication existingApp=appModule.getApplication();
  if (existingApp != null) {
    descriptor=new DeploymentDescriptor();
    descriptor.applicationInfo=new ApplicationInfo(existingApp.getName());
    descriptor.deploymentInfo=new DeploymentInfo();
    descriptor.deploymentInfo.setUris(existingApp.getUris());
    descriptor.deploymentMode=ApplicationAction.START;
    DeploymentInfo lastDeploymentInfo=appModule.getLastDeploymentInfo();
    if (lastDeploymentInfo != null) {
      descriptor.deploymentInfo.setServices(lastDeploymentInfo.getServices());
    }
  }
 else {
    IModule module=appModule.getLocalModule();
    RepublishModule repModule=CloudFoundryPlugin.getModuleCache().getData(server.getServerOriginal()).untagForAutomaticRepublish(module);
    if (repModule != null) {
      descriptor=repModule.getDeploymentDescriptor();
    }
    if (!isValidDescriptor(descriptor,module)) {
      final DeploymentDescriptor[] depDescriptors=new DeploymentDescriptor[1];
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          IApplicationWizardDelegate providerDelegate=ApplicationWizardRegistry.getWizardProvider(appModule.getLocalModule());
          if (providerDelegate == null) {
            CloudFoundryPlugin.logError(""String_Node_Str"" + appModule.getApplicationId() + ""String_Node_Str""+ server.getServer().getName()+ ""String_Node_Str""+ appModule.getLocalModule().getModuleType().getId());
            return;
          }
          CloudFoundryApplicationWizard wizard=new CloudFoundryApplicationWizard(server,appModule,providerDelegate);
          WizardDialog dialog=new WizardDialog(PlatformUI.getWorkbench().getModalDialogShellProvider().getShell(),wizard);
          int status=dialog.open();
          if (status == Dialog.OK) {
            DeploymentDescriptor descriptorToUpdate=new DeploymentDescriptor();
            descriptorToUpdate.applicationInfo=wizard.getApplicationInfo();
            descriptorToUpdate.deploymentInfo=wizard.getDeploymentInfo();
            descriptorToUpdate.deploymentMode=wizard.getDeploymentMode();
            descriptorToUpdate.staging=wizard.getStaging();
            final List<CloudService> addedServices=wizard.getCreatedCloudServices();
            if (addedServices != null && !addedServices.isEmpty()) {
              IProgressMonitor subMonitor=new SubProgressMonitor(monitor,addedServices.size());
              try {
                server.getBehaviour().createService(addedServices.toArray(new CloudService[0]),subMonitor);
              }
 catch (              CoreException e) {
                CloudFoundryPlugin.logError(e);
              }
 finally {
                subMonitor.done();
              }
            }
            List<String> selectedServices=wizard.getSelectedServicesForBinding();
            descriptorToUpdate.deploymentInfo.setServices(selectedServices);
            depDescriptors[0]=descriptorToUpdate;
          }
        }
      }
);
      descriptor=depDescriptors[0];
    }
  }
  if (descriptor == null || descriptor.deploymentInfo == null) {
    throw new OperationCanceledException();
  }
  return descriptor;
}",0.9986629029861832
10793,"public void updateModules(Map<String,CloudApplication> applicationByName) throws CoreException {
  Server server=(Server)getServer();
  final Set<CloudFoundryApplicationModule> allModules=new HashSet<CloudFoundryApplicationModule>();
  List<CloudFoundryApplicationModule> externalModules=new ArrayList<CloudFoundryApplicationModule>();
  final Set<IModule> deletedModules=new HashSet<IModule>();
synchronized (this) {
    for (    IModule module : server.getModules()) {
      CloudFoundryApplicationModule appModule=getApplication(module);
      CloudApplication application=applicationByName.remove(appModule.getApplicationId());
      appModule.setCloudApplication(application);
      if (application != null) {
        if (appModule.isExternal()) {
          externalModules.add(appModule);
        }
        allModules.add(appModule);
      }
 else       if (getData().isUndeployed(module)) {
        allModules.add(appModule);
      }
 else {
        deletedModules.add(module);
      }
    }
    for (    CloudApplication application : applicationByName.values()) {
      CloudFoundryApplicationModule appModule=getData().createModule(application);
      externalModules.add(appModule);
      allModules.add(appModule);
    }
    server.setExternalModules(externalModules.toArray(new IModule[0]));
    for (    IModule module : server.getModules()) {
      CloudFoundryApplicationModule appModule=getApplication(module);
      updateState(server,appModule);
    }
    if (deletedModules.size() > 0) {
      for (      IModule module : deletedModules) {
        server.setModuleState(new IModule[]{module},IServer.STATE_UNKNOWN);
      }
      deleteModules(deletedModules);
    }
    getData().removeObsoleteModules(allModules);
  }
}","public void updateModules(Map<String,CloudApplication> applicationByName) throws CoreException {
  Server server=(Server)getServer();
  final Set<CloudFoundryApplicationModule> allModules=new HashSet<CloudFoundryApplicationModule>();
  List<CloudFoundryApplicationModule> externalModules=new ArrayList<CloudFoundryApplicationModule>();
  final Set<IModule> deletedModules=new HashSet<IModule>();
synchronized (this) {
    for (    IModule module : server.getModules()) {
      CloudFoundryApplicationModule appModule=getApplication(module);
      CloudApplication application=applicationByName.remove(appModule.getApplicationId());
      appModule.setCloudApplication(application);
      if (application != null) {
        if (appModule.isExternal()) {
          externalModules.add(appModule);
        }
        allModules.add(appModule);
      }
 else       if (getData() != null && getData().isUndeployed(module)) {
        allModules.add(appModule);
      }
 else {
        deletedModules.add(module);
      }
    }
    if (getData() != null) {
      for (      CloudApplication application : applicationByName.values()) {
        CloudFoundryApplicationModule appModule=getData().createModule(application);
        externalModules.add(appModule);
        allModules.add(appModule);
      }
    }
    server.setExternalModules(externalModules.toArray(new IModule[0]));
    for (    IModule module : server.getModules()) {
      CloudFoundryApplicationModule appModule=getApplication(module);
      updateState(server,appModule);
    }
    if (deletedModules.size() > 0) {
      for (      IModule module : deletedModules) {
        server.setModuleState(new IModule[]{module},IServer.STATE_UNKNOWN);
      }
      deleteModules(deletedModules);
    }
    if (getData() != null) {
      getData().removeObsoleteModules(allModules);
    }
  }
}",0.9540005575689992
10794,"public void setPassword(String password){
  this.secureStoreDirty=true;
  this.password=password;
  if (getServerWorkingCopy() != null) {
    getServerWorkingCopy().setAttribute(PROP_PASSWORD_ID,(String)null);
  }
  updateServerId();
  getData().setPassword(password);
}","public void setPassword(String password){
  this.secureStoreDirty=true;
  this.password=password;
  if (getServerWorkingCopy() != null) {
    getServerWorkingCopy().setAttribute(PROP_PASSWORD_ID,(String)null);
  }
  updateServerId();
  if (getData() != null) {
    getData().setPassword(password);
  }
}",0.9424083769633508
10795,"public void clearApplications(){
  getData().clear();
}","public void clearApplications(){
  ServerData data=getData();
  if (data != null) {
    data.clear();
  }
}",0.6790123456790124
10796,"public void tagAsDeployed(IModule module){
synchronized (this) {
    getData().tagAsDeployed(module);
  }
}","public void tagAsDeployed(IModule module){
synchronized (this) {
    if (getData() != null) {
      getData().tagAsDeployed(module);
    }
  }
}",0.852589641434263
10797,"public Collection<CloudFoundryApplicationModule> getApplications(){
  return getData().getApplications();
}","public Collection<CloudFoundryApplicationModule> getApplications(){
  return getData() != null ? getData().getApplications() : new ArrayList<CloudFoundryApplicationModule>(0);
}",0.7535211267605634
10798,"private ServerData getData(){
  return CloudFoundryPlugin.getModuleCache().getData(getServerOriginal());
}","/** 
 * Returns the cached server data for the server. In some case the data may be null, if the server has not yet been created but it's available to be configured (e.g while a new server instance is being created).
 * @return cached server data. May be null.
 */
private ServerData getData(){
  return CloudFoundryPlugin.getModuleCache().getData(getServerOriginal());
}",0.4444444444444444
10799,"public void setSpace(CloudSpace space){
  secureStoreDirty=true;
  CloudFoundrySpace existingSpace=getCloudFoundrySpace();
  if (space != null) {
    this.cloudSpace=new CloudFoundrySpace(space);
    internalSetOrg(cloudSpace.getOrgName());
    internalSetSpace(cloudSpace.getSpaceName());
  }
 else {
    internalSetOrg(null);
    internalSetSpace(null);
    cloudSpace=null;
  }
  updateServerId();
}","public void setSpace(CloudSpace space){
  secureStoreDirty=true;
  if (space != null) {
    this.cloudSpace=new CloudFoundrySpace(space);
    internalSetOrg(cloudSpace.getOrgName());
    internalSetSpace(cloudSpace.getSpaceName());
  }
 else {
    internalSetOrg(null);
    internalSetSpace(null);
    cloudSpace=null;
  }
  updateServerId();
}",0.9222520107238604
10800,"@Override public void saveConfiguration(IProgressMonitor monitor) throws CoreException {
  String serverId=getServerId();
  if (secureStoreDirty || (serverId != null && !serverId.equals(initialServerId))) {
    getData().updateServerId(initialServerId,serverId);
    getData().setPassword(password);
    ServerCredentialsStore store=getCredentialsStore();
    store.setUsername(getUsername());
    store.setPassword(password);
    store.flush(serverId);
    this.initialServerId=serverId;
    this.secureStoreDirty=false;
  }
  super.saveConfiguration(monitor);
}","@Override public void saveConfiguration(IProgressMonitor monitor) throws CoreException {
  String serverId=getServerId();
  if (secureStoreDirty || (serverId != null && !serverId.equals(initialServerId))) {
    if (getData() != null) {
      getData().updateServerId(initialServerId,serverId);
      getData().setPassword(password);
    }
    ServerCredentialsStore store=getCredentialsStore();
    store.setUsername(getUsername());
    store.setPassword(password);
    store.flush(serverId);
    this.initialServerId=serverId;
    this.secureStoreDirty=false;
  }
  super.saveConfiguration(monitor);
}",0.9665236051502146
10801,"public void updateApplication(CloudFoundryApplicationModule module){
  getData().updateModule(module);
}","public void updateApplication(CloudFoundryApplicationModule module){
  if (getData() != null) {
    getData().updateModule(module);
  }
}",0.8630705394190872
10802,"public String getPassword(){
  if (secureStoreDirty) {
    return password;
  }
  String cachedPassword=getData().getPassword();
  if (cachedPassword != null) {
    return cachedPassword;
  }
  String legacyPassword=getAttribute(PROP_PASSWORD_ID,(String)null);
  if (legacyPassword != null) {
    return legacyPassword;
  }
  return new ServerCredentialsStore(getServerId()).getPassword();
}","public String getPassword(){
  if (secureStoreDirty) {
    return password;
  }
  String cachedPassword=getData() != null ? getData().getPassword() : null;
  if (cachedPassword != null) {
    return cachedPassword;
  }
  String legacyPassword=getAttribute(PROP_PASSWORD_ID,(String)null);
  if (legacyPassword != null) {
    return legacyPassword;
  }
  return new ServerCredentialsStore(getServerId()).getPassword();
}",0.9666254635352288
10803,"@Override public void modifyModules(final IModule[] add,IModule[] remove,IProgressMonitor monitor) throws CoreException {
  if (remove != null && remove.length > 0) {
    for (    IModule module : remove) {
      getData().tagAsDeployed(module);
    }
    try {
      getBehaviour().deleteModules(remove,deleteServicesOnModuleRemove.get(),monitor);
    }
 catch (    CoreException e) {
      if (!CloudErrorUtil.isNotFoundException(e)) {
        throw e;
      }
    }
  }
  if (add != null && add.length > 0) {
    for (    IModule module : add) {
      getData().tagAsUndeployed(module);
    }
    if (CloudFoundryPlugin.getCallback().isAutoDeployEnabled()) {
      Job deployModules=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor2){
          Set<IModule> pending=new HashSet<IModule>(Arrays.asList(add));
          try {
            for (            IModule module : add) {
              getBehaviour().deployOrStartModule(new IModule[]{module},true,monitor2);
              pending.remove(module);
            }
          }
 catch (          OperationCanceledException e) {
            doDeleteModules(pending);
            return Status.CANCEL_STATUS;
          }
catch (          CoreException e) {
            CloudFoundryPlugin.getDefault().getLog().log(new Status(IStatus.ERROR,CloudFoundryPlugin.PLUGIN_ID,""String_Node_Str"",e));
          }
          return Status.OK_STATUS;
        }
      }
;
      deployModules.schedule();
    }
  }
}","@Override public void modifyModules(final IModule[] add,IModule[] remove,IProgressMonitor monitor) throws CoreException {
  if (remove != null && remove.length > 0) {
    if (getData() != null) {
      for (      IModule module : remove) {
        getData().tagAsDeployed(module);
      }
    }
    try {
      getBehaviour().deleteModules(remove,deleteServicesOnModuleRemove.get(),monitor);
    }
 catch (    CoreException e) {
      if (!CloudErrorUtil.isNotFoundException(e)) {
        throw e;
      }
    }
  }
  if (add != null && add.length > 0) {
    if (getData() != null) {
      for (      IModule module : add) {
        getData().tagAsUndeployed(module);
      }
    }
    if (CloudFoundryPlugin.getCallback().isAutoDeployEnabled()) {
      Job deployModules=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor2){
          Set<IModule> pending=new HashSet<IModule>(Arrays.asList(add));
          try {
            for (            IModule module : add) {
              getBehaviour().deployOrStartModule(new IModule[]{module},true,monitor2);
              pending.remove(module);
            }
          }
 catch (          OperationCanceledException e) {
            doDeleteModules(pending);
            return Status.CANCEL_STATUS;
          }
catch (          CoreException e) {
            CloudFoundryPlugin.getDefault().getLog().log(new Status(IStatus.ERROR,CloudFoundryPlugin.PLUGIN_ID,""String_Node_Str"",e));
          }
          return Status.OK_STATUS;
        }
      }
;
      deployModules.schedule();
    }
  }
}",0.967032967032967
10804,"public void removeApplication(CloudFoundryApplicationModule cloudModule){
  getData().remove(cloudModule);
}","public void removeApplication(CloudFoundryApplicationModule cloudModule){
  if (getData() != null) {
    getData().remove(cloudModule);
  }
}",0.8674698795180723
10805,"public synchronized ServerData getData(IServer server){
  ServerData data=dataByServer.get(server);
  if (data == null) {
    data=new ServerData(server);
    dataByServer.put(server,data);
  }
  return data;
}","public synchronized ServerData getData(IServer server){
  ServerData data=dataByServer.get(server);
  if (data == null && server != null) {
    data=new ServerData(server);
    dataByServer.put(server,data);
  }
  return data;
}",0.958904109589041
10806,"/** 
 * Setting a null status is equivalent to an OK status. Setting an error status without a message may allow listeners to react to the error (e.g. disabling controls like a ""Finish"" or ""OK"" button) but not display an error message. To display an error message, a non-null error message is required.
 * @param status
 */
protected void notifyStatusChange(Object data,IStatus status){
  if (status == null) {
    status=Status.OK_STATUS;
  }
  notifyChange(new PartChangeEvent(data,status,this));
}","/** 
 * Notify any listeners that a change has occurred in the UI Part. This notification is accomplished via a status. E.g., an error status indicates that some change in the UI part resulted in an error (e.g. invalid value entered in one of the part's controls). Setting a null status is equivalent to an OK status. The object data may be the result of a change in the UI part (e.g. a set value)
 * @param data event change value, e.g., a set value in a control.
 * @param status reflecting change in UI part
 * @param eventType a type associated with the change in the UI part that alistener may use for additional handling
 */
protected void notifyStatusChange(Object data,IStatus status,int eventType){
  if (status == null) {
    status=Status.OK_STATUS;
  }
  notifyChange(new PartChangeEvent(data,status,this,eventType));
}",0.3741547708489857
10807,"protected void notifyChange(PartChangeEvent changeEvent){
  for (  IPartChangeListener listener : listeners) {
    listener.handleChange(changeEvent);
  }
}","/** 
 * Notify any listeners that a chance has occurred in the UI part. The Change event should contain all the information necessary for the listeners to react accordingly.
 * @param changeEvent
 */
protected void notifyChange(PartChangeEvent changeEvent){
  for (  IPartChangeListener listener : listeners) {
    listener.handleChange(changeEvent);
  }
}",0.609375
10808,"public void generatePartialWarFile(Set<String> knownResourceNames){
  Iterable<Entry> localEntries=getEntries();
  Map<String,AbstractModuleResourceEntryAdapter> missingChangedEntries=new HashMap<String,AbstractModuleResourceEntryAdapter>();
  Set<IModuleResource> missingChangedResources=new HashSet<IModuleResource>();
  for (  Entry entry : localEntries) {
    if (entry.isDirectory() || !knownResourceNames.contains(entry.getName())) {
      missingChangedEntries.put(entry.getName(),(AbstractModuleResourceEntryAdapter)entry);
      missingChangedResources.add(((AbstractModuleResourceEntryAdapter)entry).getResource());
    }
  }
  try {
    File partialWar=CloudUtil.createWarFile(getModuleResources(),getModule(),missingChangedResources,null);
    if (partialWar.exists()) {
      fileName=partialWar.getName();
      ZipFile zipPartialWar=new ZipFile(partialWar);
      Enumeration<? extends ZipEntry> zipEntries=zipPartialWar.entries();
      List<Entry> toDeploy=new ArrayList<ApplicationArchive.Entry>();
      while (zipEntries.hasMoreElements()) {
        ZipEntry zipEntry=zipEntries.nextElement();
        AbstractModuleResourceEntryAdapter archiveEntry=missingChangedEntries.get(zipEntry.getName());
        if (archiveEntry != null) {
          DeployedResourceEntry deployedResourcesEntry=archiveEntry instanceof ZipModuleFileEntryAdapter ? ((ZipModuleFileEntryAdapter)archiveEntry).getDeployedResourcesEntry() : null;
          toDeploy.add(new PartialZipEntryAdapter(deployedResourcesEntry,zipEntry,zipPartialWar));
        }
      }
      entries=toDeploy;
    }
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.logError(e);
  }
catch (  ZipException e) {
    CloudFoundryPlugin.logError(e);
  }
catch (  IOException e) {
    CloudFoundryPlugin.logError(e);
  }
}","public void generatePartialWarFile(Set<String> knownResourceNames){
  Iterable<Entry> localEntries=getEntries();
  Map<String,AbstractModuleResourceEntryAdapter> missingChangedEntries=new HashMap<String,AbstractModuleResourceEntryAdapter>();
  Set<IModuleResource> missingChangedResources=new HashSet<IModuleResource>();
  for (  Entry entry : localEntries) {
    if (entry.isDirectory() || !knownResourceNames.contains(entry.getName())) {
      missingChangedEntries.put(entry.getName(),(AbstractModuleResourceEntryAdapter)entry);
      missingChangedResources.add(((AbstractModuleResourceEntryAdapter)entry).getResource());
    }
  }
  try {
    File partialWar=CloudUtil.createWarFile(getModuleResources(),getModule(),missingChangedResources,null);
    if (partialWar.exists()) {
      fileName=partialWar.getName();
      ZipFile zipPartialWar=new ZipFile(partialWar);
      Enumeration<? extends ZipEntry> zipEntries=zipPartialWar.entries();
      List<Entry> toDeploy=new ArrayList<ApplicationArchive.Entry>();
      while (zipEntries.hasMoreElements()) {
        ZipEntry zipEntry=zipEntries.nextElement();
        AbstractModuleResourceEntryAdapter archiveEntry=missingChangedEntries.get(zipEntry.getName());
        if (archiveEntry != null) {
          DeployedResourceEntry deployedResourcesEntry=archiveEntry instanceof ZipModuleFileEntryAdapter ? ((ZipModuleFileEntryAdapter)archiveEntry).getDeployedResourcesEntry() : null;
          toDeploy.add(new PartialZipEntryAdapter(deployedResourcesEntry,zipEntry,zipPartialWar));
        }
      }
      entries=toDeploy;
    }
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.log(e);
  }
catch (  ZipException e) {
    CloudFoundryPlugin.logError(e);
  }
catch (  IOException e) {
    CloudFoundryPlugin.logError(e);
  }
}",0.9986029617211511
10809,"public static void logError(IStatus status){
  if (plugin != null) {
    plugin.getLog().log(status);
  }
}","public static void logError(String message,Throwable t){
  log(getErrorStatus(message,t));
}",0.4422110552763819
10810,"public static IStatus getErrorStatus(Throwable t){
  return new Status(IStatus.ERROR,PLUGIN_ID,t.getLocalizedMessage(),t);
}","public static IStatus getErrorStatus(Throwable t){
  return new Status(IStatus.ERROR,PLUGIN_ID,t.getMessage(),t);
}",0.9623430962343096
10811,"public static boolean hasNature(IResource resource,String natureId){
  if (resource != null && resource.isAccessible()) {
    IProject project=resource.getProject();
    if (project != null) {
      try {
        return project.hasNature(natureId);
      }
 catch (      CoreException e) {
        CloudFoundryPlugin.logError(e);
      }
    }
  }
  return false;
}","public static boolean hasNature(IResource resource,String natureId){
  if (resource != null && resource.isAccessible()) {
    IProject project=resource.getProject();
    if (project != null) {
      try {
        return project.hasNature(natureId);
      }
 catch (      CoreException e) {
        CloudFoundryPlugin.log(e);
      }
    }
  }
  return false;
}",0.993103448275862
10812,"/** 
 * Obtains the debug mode type of the given module. Note that the module need not be started. It could be stopped, and still have a debug mode associated with it.
 * @param module
 * @param monitor
 * @return
 */
public DebugModeType getDebugModeType(IModule module,IProgressMonitor monitor){
  try {
    CloudFoundryServer cloudServer=getCloudFoundryServer();
    CloudFoundryApplicationModule cloudModule=cloudServer.getApplication(module);
    CloudApplication cloudApplication=cloudModule.getApplication();
    if (cloudApplication != null) {
      return DebugModeType.getDebugModeType(cloudApplication.getDebug());
    }
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.logError(e);
  }
  return null;
}","/** 
 * Obtains the debug mode type of the given module. Note that the module need not be started. It could be stopped, and still have a debug mode associated with it.
 * @param module
 * @param monitor
 * @return
 */
public DebugModeType getDebugModeType(IModule module,IProgressMonitor monitor){
  try {
    CloudFoundryServer cloudServer=getCloudFoundryServer();
    CloudFoundryApplicationModule cloudModule=cloudServer.getApplication(module);
    CloudApplication cloudApplication=cloudModule.getApplication();
    if (cloudApplication != null) {
      return DebugModeType.getDebugModeType(cloudApplication.getDebug());
    }
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.log(e);
  }
  return null;
}",0.9965205288796104
10813,"protected void closeCaldecottTunnels(IProgressMonitor monitor){
  try {
    new TunnelBehaviour(getCloudFoundryServer()).stopAndDeleteAllTunnels(monitor);
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.logError(e);
  }
}","protected void closeCaldecottTunnels(IProgressMonitor monitor){
  try {
    new TunnelBehaviour(getCloudFoundryServer()).stopAndDeleteAllTunnels(monitor);
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.log(e);
  }
}",0.9889624724061812
10814,"protected void closeCaldecottTunnelsAsynch(){
  String jobName=""String_Node_Str"";
  try {
    jobName+=""String_Node_Str"" + getCloudFoundryServer().getDeploymentName();
  }
 catch (  CoreException e1) {
    CloudFoundryPlugin.logError(e1);
  }
  Job job=new Job(jobName){
    @Override protected IStatus run(    IProgressMonitor monitor){
      closeCaldecottTunnels(monitor);
      return Status.OK_STATUS;
    }
  }
;
  job.setSystem(false);
  job.schedule();
}","protected void closeCaldecottTunnelsAsynch(){
  String jobName=""String_Node_Str"";
  try {
    jobName+=""String_Node_Str"" + getCloudFoundryServer().getDeploymentName();
  }
 catch (  CoreException e1) {
    CloudFoundryPlugin.log(e1);
  }
  Job job=new Job(jobName){
    @Override protected IStatus run(    IProgressMonitor monitor){
      closeCaldecottTunnels(monitor);
      return Status.OK_STATUS;
    }
  }
;
  job.setSystem(false);
  job.schedule();
}",0.9945593035908596
10815,"/** 
 * @param descriptor that contains the application information, and thatalso will be updated with an archive containing the application resources to be deployed to the Cloud Foundry Server
 * @param cloudModule the Cloud Foundry wrapper around the applicationmodule to be pushed to the server
 * @param modules list of WTP modules.
 * @param cloudServer cloud server where app should be pushed to
 * @param monitor
 * @throws CoreException if failure occurred while generated an archive filecontaining the application's payload
 */
protected void generateApplicationArchiveFile(DeploymentDescriptor descriptor,CloudFoundryApplicationModule cloudModule,IModule[] modules,Server server,IProgressMonitor monitor) throws CoreException {
  final String applicationId=descriptor.applicationInfo.getAppName();
  if (descriptor.applicationInfo == null) {
    throw new CoreException(new Status(IStatus.ERROR,CloudFoundryPlugin.PLUGIN_ID,""String_Node_Str"" + applicationId + ""String_Node_Str""));
  }
  IApplicationDelegate delegate=ApplicationRegistry.getApplicationDelegate(cloudModule.getLocalModule());
  if (delegate != null && delegate.providesApplicationArchive(cloudModule.getLocalModule())) {
    IModuleResource[] resources=getResources(modules);
    try {
      ApplicationArchive archive=delegate.getApplicationArchive(cloudModule.getLocalModule(),resources);
      descriptor.applicationArchive=archive;
    }
 catch (    CoreException e) {
      CloudFoundryPlugin.logError(e);
    }
  }
  if (descriptor.applicationArchive == null) {
    if (descriptor.isIncrementalPublish && !hasChildModules(modules)) {
      handleIncrementalPublish(descriptor,modules);
    }
 else {
      File warFile=CloudUtil.createWarFile(modules,server,monitor);
      if (warFile == null || !warFile.exists()) {
        throw new CoreException(new Status(IStatus.ERROR,CloudFoundryPlugin.PLUGIN_ID,""String_Node_Str"" + applicationId));
      }
      CloudFoundryPlugin.trace(""String_Node_Str"" + warFile.getName() + ""String_Node_Str"");
      descriptor.applicationInfo.setWarFile(warFile);
    }
  }
}","/** 
 * @param descriptor that contains the application information, and thatalso will be updated with an archive containing the application resources to be deployed to the Cloud Foundry Server
 * @param cloudModule the Cloud Foundry wrapper around the applicationmodule to be pushed to the server
 * @param modules list of WTP modules.
 * @param cloudServer cloud server where app should be pushed to
 * @param monitor
 * @throws CoreException if failure occurred while generated an archive filecontaining the application's payload
 */
protected void generateApplicationArchiveFile(DeploymentDescriptor descriptor,CloudFoundryApplicationModule cloudModule,IModule[] modules,Server server,IProgressMonitor monitor) throws CoreException {
  final String applicationId=descriptor.applicationInfo.getAppName();
  if (descriptor.applicationInfo == null) {
    throw new CoreException(new Status(IStatus.ERROR,CloudFoundryPlugin.PLUGIN_ID,""String_Node_Str"" + applicationId + ""String_Node_Str""));
  }
  IApplicationDelegate delegate=ApplicationRegistry.getApplicationDelegate(cloudModule.getLocalModule());
  if (delegate != null && delegate.providesApplicationArchive(cloudModule.getLocalModule())) {
    IModuleResource[] resources=getResources(modules);
    try {
      ApplicationArchive archive=delegate.getApplicationArchive(cloudModule.getLocalModule(),resources);
      descriptor.applicationArchive=archive;
    }
 catch (    CoreException e) {
      CloudFoundryPlugin.log(e);
    }
  }
  if (descriptor.applicationArchive == null) {
    if (descriptor.isIncrementalPublish && !hasChildModules(modules)) {
      handleIncrementalPublish(descriptor,modules);
    }
 else {
      File warFile=CloudUtil.createWarFile(modules,server,monitor);
      if (warFile == null || !warFile.exists()) {
        throw new CoreException(new Status(IStatus.ERROR,CloudFoundryPlugin.PLUGIN_ID,""String_Node_Str"" + applicationId));
      }
      CloudFoundryPlugin.trace(""String_Node_Str"" + warFile.getName() + ""String_Node_Str"");
      descriptor.applicationInfo.setWarFile(warFile);
    }
  }
}",0.9988000959923208
10816,"/** 
 * Attempts to determine the framework based on the contents and nature of the project. Returns null if no framework was determined.
 * @param project
 * @return Framework type or null if framework was not determined.
 * @deprecated kept for reference as application type is being determined bychecking properties of a Java project
 */
protected String getFramework(IProject project){
  if (project != null) {
    IJavaProject javaProject=CloudFoundryProjectUtil.getJavaProject(project);
    if (javaProject != null) {
      if (CloudFoundryProjectUtil.hasNature(project,CloudFoundryConstants.GRAILS_NATURE)) {
        return CloudFoundryConstants.GRAILS;
      }
      if (project.isAccessible() && project.getFolder(""String_Node_Str"").exists() && project.getFile(""String_Node_Str"").exists()) {
        return CloudFoundryConstants.GRAILS;
      }
      IClasspathEntry[] entries;
      boolean foundSpringLibrary=false;
      try {
        entries=javaProject.getRawClasspath();
        for (        IClasspathEntry entry : entries) {
          if (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {
            if (isLiftLibrary(entry)) {
              return CloudFoundryConstants.LIFT;
            }
            if (isSpringLibrary(entry)) {
              foundSpringLibrary=true;
            }
          }
 else           if (entry.getEntryKind() == IClasspathEntry.CPE_CONTAINER) {
            IClasspathContainer container=JavaCore.getClasspathContainer(entry.getPath(),javaProject);
            if (container != null) {
              for (              IClasspathEntry childEntry : container.getClasspathEntries()) {
                if (isLiftLibrary(childEntry)) {
                  return CloudFoundryConstants.LIFT;
                }
                if (isSpringLibrary(childEntry)) {
                  foundSpringLibrary=true;
                }
              }
            }
          }
        }
      }
 catch (      JavaModelException e) {
        CloudFoundryPlugin.logError(new Status(IStatus.WARNING,CloudFoundryPlugin.PLUGIN_ID,""String_Node_Str"",e));
      }
      if (CloudFoundryProjectUtil.isSpringProject(project)) {
        return CloudFoundryConstants.SPRING;
      }
      if (foundSpringLibrary) {
        return CloudFoundryConstants.SPRING;
      }
    }
  }
  return null;
}","/** 
 * Attempts to determine the framework based on the contents and nature of the project. Returns null if no framework was determined.
 * @param project
 * @return Framework type or null if framework was not determined.
 * @deprecated kept for reference as application type is being determined bychecking properties of a Java project
 */
protected String getFramework(IProject project){
  if (project != null) {
    IJavaProject javaProject=CloudFoundryProjectUtil.getJavaProject(project);
    if (javaProject != null) {
      if (CloudFoundryProjectUtil.hasNature(project,CloudFoundryConstants.GRAILS_NATURE)) {
        return CloudFoundryConstants.GRAILS;
      }
      if (project.isAccessible() && project.getFolder(""String_Node_Str"").exists() && project.getFile(""String_Node_Str"").exists()) {
        return CloudFoundryConstants.GRAILS;
      }
      IClasspathEntry[] entries;
      boolean foundSpringLibrary=false;
      try {
        entries=javaProject.getRawClasspath();
        for (        IClasspathEntry entry : entries) {
          if (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {
            if (isLiftLibrary(entry)) {
              return CloudFoundryConstants.LIFT;
            }
            if (isSpringLibrary(entry)) {
              foundSpringLibrary=true;
            }
          }
 else           if (entry.getEntryKind() == IClasspathEntry.CPE_CONTAINER) {
            IClasspathContainer container=JavaCore.getClasspathContainer(entry.getPath(),javaProject);
            if (container != null) {
              for (              IClasspathEntry childEntry : container.getClasspathEntries()) {
                if (isLiftLibrary(childEntry)) {
                  return CloudFoundryConstants.LIFT;
                }
                if (isSpringLibrary(childEntry)) {
                  foundSpringLibrary=true;
                }
              }
            }
          }
        }
      }
 catch (      JavaModelException e) {
        CloudFoundryPlugin.log(new Status(IStatus.WARNING,CloudFoundryPlugin.PLUGIN_ID,""String_Node_Str"",e));
      }
      if (CloudFoundryProjectUtil.isSpringProject(project)) {
        return CloudFoundryConstants.SPRING;
      }
      if (foundSpringLibrary) {
        return CloudFoundryConstants.SPRING;
      }
    }
  }
  return null;
}",0.9989184512221502
10817,"public boolean hasFacet(){
  try {
    IFacetedProject facetedProject=ProjectFacetsManager.create(project);
    return facetedProject != null && facetedProject.hasProjectFacet(FACET);
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.logError(e);
    return false;
  }
}","public boolean hasFacet(){
  try {
    IFacetedProject facetedProject=ProjectFacetsManager.create(project);
    return facetedProject != null && facetedProject.hasProjectFacet(FACET);
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.log(e);
    return false;
  }
}",0.9908592321755028
10818,"public void removeFacet(){
  if (hasFacet()) {
    try {
      IFacetedProject facetedProject=ProjectFacetsManager.create(project);
      if (facetedProject != null) {
        facetedProject.uninstallProjectFacet(FACET.getDefaultVersion(),null,null);
      }
    }
 catch (    CoreException e) {
      CloudFoundryPlugin.logError(e);
    }
  }
}","public void removeFacet(){
  if (hasFacet()) {
    try {
      IFacetedProject facetedProject=ProjectFacetsManager.create(project);
      if (facetedProject != null) {
        facetedProject.uninstallProjectFacet(FACET.getDefaultVersion(),null,null);
      }
    }
 catch (    CoreException e) {
      CloudFoundryPlugin.log(e);
    }
  }
}",0.9927007299270072
10819,"public void addFacet(IProgressMonitor monitor){
  if (canAddFacet()) {
    try {
      IFacetedProject facetedProject=ProjectFacetsManager.create(project);
      if (facetedProject == null) {
        facetedProject=ProjectFacetsManager.create(project,true,monitor);
      }
      if (facetedProject != null) {
        facetedProject.installProjectFacet(FACET.getDefaultVersion(),null,null);
      }
    }
 catch (    CoreException e) {
      CloudFoundryPlugin.logError(e);
    }
  }
}","public void addFacet(IProgressMonitor monitor){
  if (canAddFacet()) {
    try {
      IFacetedProject facetedProject=ProjectFacetsManager.create(project);
      if (facetedProject == null) {
        facetedProject=ProjectFacetsManager.create(project,true,monitor);
      }
      if (facetedProject != null) {
        facetedProject.installProjectFacet(FACET.getDefaultVersion(),null,null);
      }
    }
 catch (    CoreException e) {
      CloudFoundryPlugin.log(e);
    }
  }
}",0.9948186528497408
10820,"public boolean hasRuntimeDependencies(){
  try {
    return !getRuntimeDependencyLocations().isEmpty();
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.logError(e);
  }
  return false;
}","public boolean hasRuntimeDependencies(){
  try {
    return !getRuntimeDependencyLocations().isEmpty();
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.log(e);
  }
  return false;
}",0.9869451697127938
10821,"protected Collection<String> getNonTestSourceOutputLocations(){
  Collection<String> outputs=getSourceOutputLocations(false);
  Set<String> nonTestOutput=new HashSet<String>(outputs);
  try {
    IPath location=javaProject.getOutputLocation();
    location=getWorkspaceFullPath(location);
    if (location != null) {
      nonTestOutput.add(location.toOSString());
    }
  }
 catch (  JavaModelException e) {
    CloudFoundryPlugin.logError(e);
  }
  return nonTestOutput;
}","protected Collection<String> getNonTestSourceOutputLocations(){
  Collection<String> outputs=getSourceOutputLocations(false);
  Set<String> nonTestOutput=new HashSet<String>(outputs);
  try {
    IPath location=javaProject.getOutputLocation();
    location=getWorkspaceFullPath(location);
    if (location != null) {
      nonTestOutput.add(location.toOSString());
    }
  }
 catch (  JavaModelException e) {
    CloudFoundryPlugin.log(e);
  }
  return nonTestOutput;
}",0.9946977730646872
10822,"/** 
 * Returns either test sources, or non-test sources, based on a flag setting. If nothing is found, returns empty list.
 */
protected Collection<IClasspathEntry> getSourceEntries(boolean istest){
  try {
    IClasspathEntry[] rawEntries=javaProject.getRawClasspath();
    if (rawEntries != null) {
      Collection<IClasspathEntry> sourceEntries=new HashSet<IClasspathEntry>();
      for (      IClasspathEntry entry : rawEntries) {
        if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) {
          IPath path=entry.getPath();
          if (path != null) {
            boolean isTestSource=isTestSource(path.toOSString());
            if ((istest && isTestSource) || (!istest && !isTestSource)) {
              sourceEntries.add(entry);
            }
          }
        }
      }
      return sourceEntries;
    }
  }
 catch (  JavaModelException e) {
    CloudFoundryPlugin.logError(e);
  }
  return Collections.emptyList();
}","/** 
 * Returns either test sources, or non-test sources, based on a flag setting. If nothing is found, returns empty list.
 */
protected Collection<IClasspathEntry> getSourceEntries(boolean istest){
  try {
    IClasspathEntry[] rawEntries=javaProject.getRawClasspath();
    if (rawEntries != null) {
      Collection<IClasspathEntry> sourceEntries=new HashSet<IClasspathEntry>();
      for (      IClasspathEntry entry : rawEntries) {
        if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) {
          IPath path=entry.getPath();
          if (path != null) {
            boolean isTestSource=isTestSource(path.toOSString());
            if ((istest && isTestSource) || (!istest && !isTestSource)) {
              sourceEntries.add(entry);
            }
          }
        }
      }
      return sourceEntries;
    }
  }
 catch (  JavaModelException e) {
    CloudFoundryPlugin.log(e);
  }
  return Collections.emptyList();
}",0.9973390101117616
10823,"public IPackageFragment getDefaultPackageFragment(){
  IJavaProject javaProject=getJavaProject();
  if (getJavaProject() == null) {
    return null;
  }
  IPackageFragmentRoot[] roots=null;
  try {
    IClasspathEntry[] entries=javaProject.getRawClasspath();
    for (    IClasspathEntry entry : entries) {
      if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) {
        roots=javaProject.findPackageFragmentRoots(entry);
        if (roots != null) {
          break;
        }
      }
    }
  }
 catch (  JavaModelException e) {
    CloudFoundryPlugin.logError(e);
  }
  if (roots != null) {
    IPackageFragment fragment=null;
    for (    IPackageFragmentRoot root : roots) {
      try {
        IJavaElement[] members=root.getChildren();
        if (members != null) {
          for (          IJavaElement element : members) {
            if (element instanceof IPackageFragment) {
              IPackageFragment frag=(IPackageFragment)element;
              if (frag.isDefaultPackage()) {
                fragment=frag;
                break;
              }
            }
          }
        }
        if (fragment != null) {
          break;
        }
      }
 catch (      JavaModelException e) {
        CloudFoundryPlugin.logError(e);
      }
    }
    return fragment;
  }
  return null;
}","public IPackageFragment getDefaultPackageFragment(){
  IJavaProject javaProject=getJavaProject();
  if (getJavaProject() == null) {
    return null;
  }
  IPackageFragmentRoot[] roots=null;
  try {
    IClasspathEntry[] entries=javaProject.getRawClasspath();
    for (    IClasspathEntry entry : entries) {
      if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) {
        roots=javaProject.findPackageFragmentRoots(entry);
        if (roots != null) {
          break;
        }
      }
    }
  }
 catch (  JavaModelException e) {
    CloudFoundryPlugin.log(e);
  }
  if (roots != null) {
    IPackageFragment fragment=null;
    for (    IPackageFragmentRoot root : roots) {
      try {
        IJavaElement[] members=root.getChildren();
        if (members != null) {
          for (          IJavaElement element : members) {
            if (element instanceof IPackageFragment) {
              IPackageFragment frag=(IPackageFragment)element;
              if (frag.isDefaultPackage()) {
                fragment=frag;
                break;
              }
            }
          }
        }
        if (fragment != null) {
          break;
        }
      }
 catch (      JavaModelException e) {
        CloudFoundryPlugin.log(e);
      }
    }
    return fragment;
  }
  return null;
}",0.9501533742331288
10824,"@Override public DeploymentDescriptor prepareForDeployment(final CloudFoundryServer server,final CloudFoundryApplicationModule appModule,final IProgressMonitor monitor){
  DeploymentDescriptor descriptor=null;
  CloudApplication existingApp=appModule.getApplication();
  if (existingApp != null) {
    descriptor=new DeploymentDescriptor();
    descriptor.applicationInfo=new ApplicationInfo(existingApp.getName());
    descriptor.deploymentInfo=new DeploymentInfo();
    descriptor.deploymentInfo.setUris(existingApp.getUris());
    descriptor.deploymentMode=ApplicationAction.START;
    DeploymentInfo lastDeploymentInfo=appModule.getLastDeploymentInfo();
    if (lastDeploymentInfo != null) {
      descriptor.deploymentInfo.setServices(lastDeploymentInfo.getServices());
    }
  }
 else {
    IModule module=appModule.getLocalModule();
    RepublishModule repModule=CloudFoundryPlugin.getModuleCache().getData(server.getServerOriginal()).untagForAutomaticRepublish(module);
    if (repModule != null) {
      descriptor=repModule.getDeploymentDescriptor();
    }
    if (!isValidDescriptor(descriptor,module)) {
      final DeploymentDescriptor[] depDescriptors=new DeploymentDescriptor[1];
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          IApplicationWizardDelegate providerDelegate=ApplicationWizardRegistry.getWizardProvider(appModule.getLocalModule());
          if (providerDelegate == null) {
            CloudFoundryPlugin.logError(""String_Node_Str"" + appModule.getApplicationId() + ""String_Node_Str""+ server.getServer().getName()+ ""String_Node_Str""+ appModule.getLocalModule().getModuleType().getId());
            return;
          }
          CloudFoundryApplicationWizard wizard=new CloudFoundryApplicationWizard(server,appModule,providerDelegate);
          WizardDialog dialog=new WizardDialog(PlatformUI.getWorkbench().getModalDialogShellProvider().getShell(),wizard);
          int status=dialog.open();
          if (status == Dialog.OK) {
            DeploymentDescriptor descriptorToUpdate=new DeploymentDescriptor();
            descriptorToUpdate.applicationInfo=wizard.getApplicationInfo();
            descriptorToUpdate.deploymentInfo=wizard.getDeploymentInfo();
            descriptorToUpdate.deploymentMode=wizard.getDeploymentMode();
            descriptorToUpdate.staging=wizard.getStaging();
            final List<CloudService> addedServices=wizard.getCreatedCloudServices();
            if (addedServices != null && !addedServices.isEmpty()) {
              IProgressMonitor subMonitor=new SubProgressMonitor(monitor,addedServices.size());
              try {
                server.getBehaviour().createService(addedServices.toArray(new CloudService[0]),subMonitor);
              }
 catch (              CoreException e) {
                CloudFoundryPlugin.logError(e);
              }
 finally {
                subMonitor.done();
              }
            }
            List<String> selectedServices=wizard.getSelectedServicesForBinding();
            descriptorToUpdate.deploymentInfo.setServices(selectedServices);
            depDescriptors[0]=descriptorToUpdate;
          }
        }
      }
);
      descriptor=depDescriptors[0];
    }
  }
  if (descriptor == null || descriptor.deploymentInfo == null) {
    throw new OperationCanceledException();
  }
  return descriptor;
}","@Override public DeploymentDescriptor prepareForDeployment(final CloudFoundryServer server,final CloudFoundryApplicationModule appModule,final IProgressMonitor monitor){
  DeploymentDescriptor descriptor=null;
  CloudApplication existingApp=appModule.getApplication();
  if (existingApp != null) {
    descriptor=new DeploymentDescriptor();
    descriptor.applicationInfo=new ApplicationInfo(existingApp.getName());
    descriptor.deploymentInfo=new DeploymentInfo();
    descriptor.deploymentInfo.setUris(existingApp.getUris());
    descriptor.deploymentMode=ApplicationAction.START;
    DeploymentInfo lastDeploymentInfo=appModule.getLastDeploymentInfo();
    if (lastDeploymentInfo != null) {
      descriptor.deploymentInfo.setServices(lastDeploymentInfo.getServices());
    }
  }
 else {
    IModule module=appModule.getLocalModule();
    RepublishModule repModule=CloudFoundryPlugin.getModuleCache().getData(server.getServerOriginal()).untagForAutomaticRepublish(module);
    if (repModule != null) {
      descriptor=repModule.getDeploymentDescriptor();
    }
    if (!isValidDescriptor(descriptor,module)) {
      final DeploymentDescriptor[] depDescriptors=new DeploymentDescriptor[1];
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          IApplicationWizardDelegate providerDelegate=ApplicationWizardRegistry.getWizardProvider(appModule.getLocalModule());
          if (providerDelegate == null) {
            CloudFoundryPlugin.logError(""String_Node_Str"" + appModule.getApplicationId() + ""String_Node_Str""+ server.getServer().getName()+ ""String_Node_Str""+ appModule.getLocalModule().getModuleType().getId());
            return;
          }
          CloudFoundryApplicationWizard wizard=new CloudFoundryApplicationWizard(server,appModule,providerDelegate);
          WizardDialog dialog=new WizardDialog(PlatformUI.getWorkbench().getModalDialogShellProvider().getShell(),wizard);
          int status=dialog.open();
          if (status == Dialog.OK) {
            DeploymentDescriptor descriptorToUpdate=new DeploymentDescriptor();
            descriptorToUpdate.applicationInfo=wizard.getApplicationInfo();
            descriptorToUpdate.deploymentInfo=wizard.getDeploymentInfo();
            descriptorToUpdate.deploymentMode=wizard.getDeploymentMode();
            descriptorToUpdate.staging=wizard.getStaging();
            final List<CloudService> addedServices=wizard.getCreatedCloudServices();
            if (addedServices != null && !addedServices.isEmpty()) {
              IProgressMonitor subMonitor=new SubProgressMonitor(monitor,addedServices.size());
              try {
                server.getBehaviour().createService(addedServices.toArray(new CloudService[0]),subMonitor);
              }
 catch (              CoreException e) {
                CloudFoundryPlugin.log(e);
              }
 finally {
                subMonitor.done();
              }
            }
            List<String> selectedServices=wizard.getSelectedServicesForBinding();
            descriptorToUpdate.deploymentInfo.setServices(selectedServices);
            depDescriptors[0]=descriptorToUpdate;
          }
        }
      }
);
      descriptor=depDescriptors[0];
    }
  }
  if (descriptor == null || descriptor.deploymentInfo == null) {
    throw new OperationCanceledException();
  }
  return descriptor;
}",0.9992558416431015
10825,"public List<String> findCaldecottTunnelsToClose(CloudFoundryOperations client,String appName,List<String> servicesToUpdate){
  List<String> services=new ArrayList<String>();
  CloudApplication caldecottApp=client.getApplication(appName);
  if (caldecottApp != null) {
    List<String> existingServices=caldecottApp.getServices();
    if (existingServices != null) {
      Set<String> possibleDeletedServices=new HashSet<String>(existingServices);
      for (      String updatedService : servicesToUpdate) {
        if (possibleDeletedServices.contains(updatedService)) {
          possibleDeletedServices.remove(updatedService);
        }
      }
      services.addAll(possibleDeletedServices);
    }
  }
  return services;
}","public List<String> findCaldecottTunnelsToClose(CloudFoundryOperations client,String appName,List<String> servicesToUpdate){
  List<String> services=new ArrayList<String>();
  CloudApplication caldecottApp=client.getApplication(appName);
  if (caldecottApp != null) {
    List<String> existingServices=caldecottApp.getServices();
    if (existingServices != null) {
      Set<String> possibleDeletedServices=new HashSet<String>();
      for (      String existingService : existingServices) {
        if (existingService != null) {
          possibleDeletedServices.add(existingService);
        }
      }
      for (      String updatedService : servicesToUpdate) {
        if (possibleDeletedServices.contains(updatedService)) {
          possibleDeletedServices.remove(updatedService);
        }
      }
      services.addAll(possibleDeletedServices);
    }
  }
  return services;
}",0.9000620732464308
10826,"protected boolean bindServiceToCaldecottApp(String serviceName,CloudFoundryOperations client,SubMonitor monitor) throws CoreException {
  CloudApplication caldecottApp=getCaldecottApp(client);
  List<String> updateCaldecottServices=new ArrayList<String>();
  List<String> existingServices=caldecottApp.getServices();
  if (existingServices != null) {
    updateCaldecottServices.addAll(existingServices);
  }
  IModule caldecottModule=getCaldecottModule(monitor.newChild(1));
  if (!updateCaldecottServices.contains(serviceName)) {
    monitor.setTaskName(""String_Node_Str"" + serviceName + ""String_Node_Str"");
    updateCaldecottServices.add(serviceName);
    CloudFoundryServerBehaviour behaviour=cloudServer.getBehaviour();
    behaviour.stopModule(new IModule[]{caldecottModule},monitor.newChild(1));
    behaviour.updateServices(TunnelHelper.getTunnelAppName(),updateCaldecottServices,monitor.newChild(1));
    setDeploymentServices(serviceName,monitor.newChild(1));
    return caldecottApp.getServices().contains(serviceName);
  }
 else {
    return true;
  }
}","protected boolean bindServiceToCaldecottApp(String serviceName,CloudFoundryOperations client,SubMonitor monitor) throws CoreException {
  CloudApplication caldecottApp=getCaldecottApp(client);
  List<String> updateCaldecottServices=new ArrayList<String>();
  List<String> existingServices=caldecottApp.getServices();
  if (existingServices != null) {
    for (    String existing : existingServices) {
      if (existing != null) {
        updateCaldecottServices.add(existing);
      }
    }
  }
  IModule caldecottModule=getCaldecottModule(monitor.newChild(1));
  if (!updateCaldecottServices.contains(serviceName)) {
    monitor.setTaskName(""String_Node_Str"" + serviceName + ""String_Node_Str"");
    updateCaldecottServices.add(serviceName);
    CloudFoundryServerBehaviour behaviour=cloudServer.getBehaviour();
    behaviour.stopModule(new IModule[]{caldecottModule},monitor.newChild(1));
    behaviour.updateServices(TunnelHelper.getTunnelAppName(),updateCaldecottServices,monitor.newChild(1));
    setDeploymentServices(serviceName,monitor.newChild(1));
    return caldecottApp.getServices().contains(serviceName);
  }
 else {
    return true;
  }
}",0.9234234234234234
10827,"protected void unbindServiceToApp(CloudApplication application,CloudService service) throws Exception {
  CloudApplication updatedApplication=getUpdatedApplication(application.getName());
  List<String> boundServices=updatedApplication.getServices();
  List<String> servicesToUpdate=new ArrayList<String>(boundServices);
  if (servicesToUpdate.contains(service.getName())) {
    servicesToUpdate.remove(service.getName());
  }
  serverBehavior.updateServicesAndCloseCaldecottTunnels(application.getName(),servicesToUpdate,new NullProgressMonitor());
}","protected void unbindServiceToApp(CloudApplication application,CloudService service) throws Exception {
  CloudApplication updatedApplication=getUpdatedApplication(application.getName());
  List<String> boundServices=updatedApplication.getServices();
  List<String> servicesToUpdate=new ArrayList<String>();
  for (  String existingService : boundServices) {
    if (existingService != null) {
      servicesToUpdate.add(existingService);
    }
  }
  if (servicesToUpdate.contains(service.getName())) {
    servicesToUpdate.remove(service.getName());
  }
  serverBehavior.updateServicesAndCloseCaldecottTunnels(application.getName(),servicesToUpdate,new NullProgressMonitor());
}",0.8959349593495934
10828,"@Override public IStatus performAction(IProgressMonitor monitor) throws CoreException {
  CloudApplication cloudApplication=appModule.getApplication();
  List<String> existingServices=new ArrayList<String>();
  List<String> updatedServices=new ArrayList<String>();
  DeploymentInfo deploymentInfo=appModule.getLastDeploymentInfo();
  if (deploymentInfo == null) {
    deploymentInfo=new DeploymentInfo();
    appModule.setLastDeploymentInfo(deploymentInfo);
    if (cloudApplication != null) {
      existingServices=cloudApplication.getServices();
    }
  }
 else {
    existingServices=deploymentInfo.getServices();
  }
  if (existingServices != null) {
    updatedServices.addAll(existingServices);
  }
  boolean serviceChanges=false;
  List<String> servicesToAdd=getServicesToAdd();
  for (  String serviceToAdd : servicesToAdd) {
    if (!updatedServices.contains(serviceToAdd)) {
      updatedServices.add(serviceToAdd);
      serviceChanges=true;
    }
  }
  serviceChanges|=updatedServices.removeAll(getServicesToRemove());
  if (serviceChanges) {
    if (appModule.getApplication() != null) {
      updateServices(monitor,appModule,serverBehaviour,updatedServices);
    }
    deploymentInfo.setServices(updatedServices);
  }
  return Status.OK_STATUS;
}","@Override public IStatus performAction(IProgressMonitor monitor) throws CoreException {
  CloudApplication cloudApplication=appModule.getApplication();
  List<String> existingServices=null;
  List<String> updatedServices=new ArrayList<String>();
  DeploymentInfo deploymentInfo=appModule.getLastDeploymentInfo();
  if (deploymentInfo == null) {
    deploymentInfo=new DeploymentInfo();
    appModule.setLastDeploymentInfo(deploymentInfo);
    if (cloudApplication != null) {
      existingServices=cloudApplication.getServices();
    }
  }
 else {
    existingServices=deploymentInfo.getServices();
  }
  if (existingServices != null) {
    for (    String existingService : existingServices) {
      if (existingService != null) {
        updatedServices.add(existingService);
      }
    }
  }
  boolean serviceChanges=false;
  List<String> servicesToAdd=getServicesToAdd();
  for (  String serviceToAdd : servicesToAdd) {
    if (!updatedServices.contains(serviceToAdd)) {
      updatedServices.add(serviceToAdd);
      serviceChanges=true;
    }
  }
  serviceChanges|=updatedServices.removeAll(getServicesToRemove());
  if (serviceChanges) {
    if (appModule.getApplication() != null) {
      updateServices(monitor,appModule,serverBehaviour,updatedServices);
    }
    deploymentInfo.setServices(updatedServices);
  }
  return Status.OK_STATUS;
}",0.6610558530986993
10829,"public void refreshUI(){
  resizeTableColumns();
  canUpdate=false;
  CloudFoundryApplicationModule appModule=getApplication();
  int state=appModule.getState();
  refreshPublishState();
  setCurrentStartDebugApplicationAction();
  instanceSpinner.setSelection(appModule.getInstanceCount());
  updateServerNameDisplay(appModule);
  refreshApplicationDeploymentButtons();
  mappedURIsLink.setEnabled(state == IServer.STATE_STARTED);
  CloudApplication cloudApplication=appModule.getApplication();
  List<CloudService> services=new ArrayList<CloudService>();
  instanceSpinner.setEnabled(cloudApplication != null);
  instancesViewer.getTable().setEnabled(cloudApplication != null);
  instancesViewer.setInput(null);
  if (provideServices) {
    List<String> serviceNames=null;
    DeploymentInfo deploymentInfo=appModule.getLastDeploymentInfo();
    if (deploymentInfo == null) {
      deploymentInfo=new DeploymentInfo();
      appModule.setLastDeploymentInfo(deploymentInfo);
      if (cloudApplication != null) {
        serviceNames=cloudApplication.getServices();
        deploymentInfo.setServices(serviceNames);
      }
    }
 else {
      serviceNames=deploymentInfo.getServices();
    }
    if (serviceNames == null) {
      serviceNames=Collections.emptyList();
    }
    List<CloudService> allServices=editorPage.getServices();
    if (allServices != null) {
      for (      CloudService service : allServices) {
        if (serviceNames.contains(service.getName())) {
          services.add(service);
        }
      }
    }
    servicesViewer.setInput(services.toArray(new CloudService[services.size()]));
  }
  memoryCombo.setEnabled(cloudApplication != null);
  if (cloudApplication != null) {
    int appMemory=appModule.getApplication().getMemory();
    memoryCombo.removeAll();
    boolean found=false;
    int[] applicationMemoryChoices=editorPage.getApplicationMemoryChoices();
    if (applicationMemoryChoices != null) {
      for (      int option : applicationMemoryChoices) {
        memoryCombo.add(option + ""String_Node_Str"");
        if (option == appMemory) {
          int index=memoryCombo.getItemCount() - 1;
          memoryCombo.select(index);
          found=true;
        }
      }
      if (!found && appMemory != 0) {
        memoryCombo.add(appMemory + ""String_Node_Str"",0);
        memoryCombo.select(0);
      }
      memoryCombo.setEnabled(true);
    }
  }
  List<String> currentURIs=null;
  if (cloudApplication != null) {
    currentURIs=cloudApplication.getUris();
    ApplicationStats applicationStats=appModule.getApplicationStats();
    InstancesInfo instancesInfo=appModule.getInstancesInfo();
    if (applicationStats != null) {
      List<InstanceStats> statss=applicationStats.getRecords();
      List<InstanceInfo> infos=instancesInfo != null ? instancesInfo.getInstances() : null;
      InstanceStatsAndInfo[] statsAndInfos=new InstanceStatsAndInfo[statss.size()];
      for (int i=0; i < statss.size(); i++) {
        InstanceStats stats=statss.get(i);
        InstanceInfo info=null;
        if (infos != null && infos.size() > i) {
          info=infos.get(i);
        }
        statsAndInfos[i]=new InstanceStatsAndInfo(stats,info);
      }
      instancesViewer.setInput(statsAndInfos);
    }
  }
  if (currentURIs == null && !isPublished) {
    currentURIs=appModule.getLastDeploymentInfo() != null ? appModule.getLastDeploymentInfo().getUris() : null;
  }
  if (currentURIs == null) {
    currentURIs=Collections.emptyList();
  }
  if (!currentURIs.equals(URIs)) {
    URIs=currentURIs;
    mappedURIsLink.setText(getURIsAsLinkText(URIs));
    generalSection.getParent().layout(true,true);
    editorPage.reflow();
  }
  if (provideServices) {
    servicesDropListener.setModule(appModule);
    servicesViewer.refresh(true);
  }
  instancesViewer.refresh(true);
  canUpdate=true;
  if (appModule.getErrorMessage() != null) {
    editorPage.setMessage(appModule.getErrorMessage(),IMessageProvider.ERROR);
  }
 else {
    editorPage.setMessage(null,IMessageProvider.ERROR);
  }
}","public void refreshUI(){
  resizeTableColumns();
  canUpdate=false;
  CloudFoundryApplicationModule appModule=getApplication();
  int state=appModule.getState();
  refreshPublishState();
  setCurrentStartDebugApplicationAction();
  instanceSpinner.setSelection(appModule.getInstanceCount());
  updateServerNameDisplay(appModule);
  refreshApplicationDeploymentButtons();
  mappedURIsLink.setEnabled(state == IServer.STATE_STARTED);
  CloudApplication cloudApplication=appModule.getApplication();
  List<CloudService> services=new ArrayList<CloudService>();
  instanceSpinner.setEnabled(cloudApplication != null);
  instancesViewer.getTable().setEnabled(cloudApplication != null);
  instancesViewer.setInput(null);
  if (provideServices) {
    List<String> serviceNames=null;
    DeploymentInfo deploymentInfo=appModule.getLastDeploymentInfo();
    if (deploymentInfo == null) {
      deploymentInfo=new DeploymentInfo();
      appModule.setLastDeploymentInfo(deploymentInfo);
      if (cloudApplication != null) {
        List<String> existingServices=cloudApplication.getServices();
        serviceNames=new ArrayList<String>();
        if (existingServices != null) {
          for (          String existingService : existingServices) {
            if (existingService != null) {
              serviceNames.add(existingService);
            }
          }
        }
        deploymentInfo.setServices(serviceNames);
      }
    }
 else {
      serviceNames=deploymentInfo.getServices();
    }
    if (serviceNames == null) {
      serviceNames=Collections.emptyList();
    }
    List<CloudService> allServices=editorPage.getServices();
    if (allServices != null) {
      for (      CloudService service : allServices) {
        if (serviceNames.contains(service.getName())) {
          services.add(service);
        }
      }
    }
    servicesViewer.setInput(services.toArray(new CloudService[services.size()]));
  }
  memoryCombo.setEnabled(cloudApplication != null);
  if (cloudApplication != null) {
    int appMemory=appModule.getApplication().getMemory();
    memoryCombo.removeAll();
    boolean found=false;
    int[] applicationMemoryChoices=editorPage.getApplicationMemoryChoices();
    if (applicationMemoryChoices != null) {
      for (      int option : applicationMemoryChoices) {
        memoryCombo.add(option + ""String_Node_Str"");
        if (option == appMemory) {
          int index=memoryCombo.getItemCount() - 1;
          memoryCombo.select(index);
          found=true;
        }
      }
      if (!found && appMemory != 0) {
        memoryCombo.add(appMemory + ""String_Node_Str"",0);
        memoryCombo.select(0);
      }
      memoryCombo.setEnabled(true);
    }
  }
  List<String> currentURIs=null;
  if (cloudApplication != null) {
    currentURIs=cloudApplication.getUris();
    ApplicationStats applicationStats=appModule.getApplicationStats();
    InstancesInfo instancesInfo=appModule.getInstancesInfo();
    if (applicationStats != null) {
      List<InstanceStats> statss=applicationStats.getRecords();
      List<InstanceInfo> infos=instancesInfo != null ? instancesInfo.getInstances() : null;
      InstanceStatsAndInfo[] statsAndInfos=new InstanceStatsAndInfo[statss.size()];
      for (int i=0; i < statss.size(); i++) {
        InstanceStats stats=statss.get(i);
        InstanceInfo info=null;
        if (infos != null && infos.size() > i) {
          info=infos.get(i);
        }
        statsAndInfos[i]=new InstanceStatsAndInfo(stats,info);
      }
      instancesViewer.setInput(statsAndInfos);
    }
  }
  if (currentURIs == null && !isPublished) {
    currentURIs=appModule.getLastDeploymentInfo() != null ? appModule.getLastDeploymentInfo().getUris() : null;
  }
  if (currentURIs == null) {
    currentURIs=Collections.emptyList();
  }
  if (!currentURIs.equals(URIs)) {
    URIs=currentURIs;
    mappedURIsLink.setText(getURIsAsLinkText(URIs));
    generalSection.getParent().layout(true,true);
    editorPage.reflow();
  }
  if (provideServices) {
    servicesDropListener.setModule(appModule);
    servicesViewer.refresh(true);
  }
  instancesViewer.refresh(true);
  canUpdate=true;
  if (appModule.getErrorMessage() != null) {
    editorPage.setMessage(appModule.getErrorMessage(),IMessageProvider.ERROR);
  }
 else {
    editorPage.setMessage(null,IMessageProvider.ERROR);
  }
}",0.956885226322704
10830,"private void update(boolean validateCredentials){
  isFinished=true;
  setWizardError(null);
  String selection=urlWidget.getURLSelection();
  if (CloudFoundryURLNavigation.canEnableCloudFoundryNavigation(selection)) {
    cfSignupButton.setVisible(true);
  }
 else {
    cfSignupButton.setVisible(false);
  }
  String urlText=urlWidget.getURLSelection();
  String userName=emailText.getText();
  String password=passwordText.getText();
  if (spaceChangeHandler != null && !spaceChangeHandler.isDescriptorAlreadySet(urlText,userName,password)) {
    spaceChangeHandler.clearSetDescriptor();
  }
  if (folder.getSelectionIndex() == 0) {
    String message=""String_Node_Str"";
    isFinished=false;
    if (userName == null || userName.trim().length() == 0) {
      message=""String_Node_Str"";
    }
 else     if (password == null || password.trim().length() == 0) {
      message=""String_Node_Str"";
    }
 else     if (urlCombo.getSelectionIndex() < 0) {
      message=NLS.bind(""String_Node_Str"",service);
    }
 else {
      isFinished=true;
      message=NLS.bind(DEFAULT_DESCRIPTION,service);
    }
    validateButton.setEnabled(isFinished);
    registerAccountButton.setEnabled(CloudFoundryBrandingExtensionPoint.supportsRegistration(serverTypeId,urlCombo.getText()));
    setWizardDescription(message);
    if (wizardHandle != null) {
      wizardHandle.update();
    }
 else     if (getWizardContainer() != null && getWizardContainer().getCurrentPage() != null) {
      getWizardContainer().updateButtons();
    }
  }
 else   if (folder.getSelectionIndex() == 1) {
    setWizardDescription(NLS.bind(""String_Node_Str"",service));
  }
  if (isFinished && validateCredentials) {
    String errorMsg=CloudUiUtil.validateCredentials(cfServer,userName,password,urlText,true,getRunnableContext());
    if (errorMsg == null) {
      if (spaceChangeHandler != null) {
        try {
          CloudSpacesDescriptor descriptor=spaceChangeHandler.getUpdatedDescriptor(urlText,userName,password,getRunnableContext());
          if (descriptor == null) {
            setWizardError(""String_Node_Str"");
            isFinished=false;
          }
 else {
            setWizardInformation(""String_Node_Str"");
          }
        }
 catch (        CoreException e) {
          isFinished=false;
          setWizardError(""String_Node_Str"" + e.getMessage() != null ? ""String_Node_Str"" + e.getMessage() : ""String_Node_Str"");
        }
      }
 else {
        isFinished=false;
        setWizardError(""String_Node_Str"");
      }
    }
 else {
      setWizardError(errorMsg);
    }
  }
}","private void update(boolean validateCredentials){
  isFinished=true;
  setWizardError(null);
  String selection=urlWidget.getURLSelection();
  if (CloudFoundryURLNavigation.canEnableCloudFoundryNavigation(selection)) {
    cfSignupButton.setVisible(true);
  }
 else {
    cfSignupButton.setVisible(false);
  }
  String urlText=urlWidget.getURLSelection();
  String userName=emailText.getText();
  String password=passwordText.getText();
  if (folder.getSelectionIndex() == 0) {
    String message=""String_Node_Str"";
    isFinished=false;
    if (userName == null || userName.trim().length() == 0) {
      message=""String_Node_Str"";
    }
 else     if (password == null || password.trim().length() == 0) {
      message=""String_Node_Str"";
    }
 else     if (urlCombo.getSelectionIndex() < 0) {
      message=NLS.bind(""String_Node_Str"",service);
    }
 else {
      isFinished=true;
      message=NLS.bind(DEFAULT_DESCRIPTION,service);
    }
    validateButton.setEnabled(isFinished);
    registerAccountButton.setEnabled(CloudFoundryBrandingExtensionPoint.supportsRegistration(serverTypeId,urlCombo.getText()));
    setWizardDescription(message);
  }
 else   if (folder.getSelectionIndex() == 1) {
    setWizardDescription(NLS.bind(""String_Node_Str"",service));
    isFinished=false;
  }
  if (isFinished) {
    if (validateCredentials) {
      String errorMsg=CloudUiUtil.validateCredentials(cfServer,userName,password,urlText,true,getRunnableContext());
      if (errorMsg == null) {
        try {
          CloudSpacesDescriptor descriptor=spaceChangeHandler.getUpdatedDescriptor(urlText,userName,password,getRunnableContext());
          if (descriptor == null) {
            setWizardError(""String_Node_Str"");
            isFinished=false;
          }
 else {
            setWizardInformation(VALID_ACCOUNT_MESSAGE);
          }
        }
 catch (        CoreException e) {
          isFinished=false;
          setWizardError(""String_Node_Str"" + (e.getMessage() != null ? ""String_Node_Str"" + e.getMessage() : ""String_Node_Str"") + ""String_Node_Str"");
        }
      }
 else {
        isFinished=false;
        setWizardError(errorMsg);
      }
    }
 else {
      if (!spaceChangeHandler.matchesCurrentDescriptor(urlText,userName,password)) {
        spaceChangeHandler.clearSetDescriptor();
        isFinished=false;
        setWizardInformation(""String_Node_Str"");
      }
 else {
        setWizardInformation(VALID_ACCOUNT_MESSAGE);
      }
    }
  }
  if (wizardHandle != null) {
    wizardHandle.update();
  }
 else   if (getWizardContainer() != null && getWizardContainer().getCurrentPage() != null) {
    getWizardContainer().updateButtons();
  }
}",0.5144497607655503
10831,"@Override protected void handleCloudSpaceDescriptorSelection(CloudSpacesDescriptor spacesDescriptor){
  initServer();
  spacesFragment=new CloudFoundrySpacesWizardFragment(spaceChangeHandler,cfServer);
}","@Override protected void handleCloudSpaceDescriptorSelection(CloudSpacesDescriptor spacesDescriptor){
  initServer();
  if (spacesDescriptor == null) {
    spacesFragment=null;
  }
 else {
    spacesFragment=new CloudFoundrySpacesWizardFragment(spaceChangeHandler,cfServer);
  }
}",0.8405797101449275
10832,"public CloudFoundryClientRequest(CloudFoundryOperations client,CloudFoundryServer server,long requestTimeOut){
  this.timeLeft=requestTimeOut;
  this.client=client;
  this.server=server;
}","public CloudFoundryClientRequest(CloudFoundryOperations client,CloudFoundryServer server,long requestTimeOut){
  this.timeLeft=requestTimeOut;
  this.client=client;
}",0.9378531073446328
10833,"public T run(SubMonitor progress) throws CoreException {
  String cloudURL=server.getUrl();
  CloudFoundryLoginHandler handler=new CloudFoundryLoginHandler(client,cloudURL);
  handler.updateProxyInClient(client);
  Exception error=null;
  while (timeLeft > 0) {
    long timeTaken=ONE_SECOND_INTERVAL;
    CloudFoundryException cloudException=null;
    try {
      return doRun(client,progress);
    }
 catch (    NotFinishedStagingException notFinishedError) {
      error=notFinishedError;
      timeTaken=ONE_SECOND_INTERVAL * 2;
    }
catch (    StagingErrorException stagingError) {
      error=stagingError;
      break;
    }
catch (    CoreException e) {
      if (e.getCause() instanceof CloudFoundryException) {
        cloudException=(CloudFoundryException)e.getCause();
      }
 else {
        error=e;
        break;
      }
    }
catch (    CloudFoundryException cfe) {
      cloudException=cfe;
    }
catch (    RestClientException rce) {
      error=rce;
      break;
    }
    if (cloudException != null) {
      error=cloudException;
      if (handler.shouldAttemptClientLogin(cloudException)) {
        handler.login(progress);
        timeTaken=ONE_SECOND_INTERVAL * 2;
      }
 else       if (!CloudErrorUtil.isAppStoppedStateError(cloudException)) {
        break;
      }
    }
    timeLeft-=timeTaken;
    try {
      Thread.sleep(timeTaken);
    }
 catch (    InterruptedException e) {
    }
  }
  if (error == null) {
    error=new CoreException(CloudFoundryPlugin.getErrorStatus(""String_Node_Str"" + CloudFoundryServerBehaviour.Request.class.getName()));
  }
  if (error instanceof CoreException) {
    throw (CoreException)error;
  }
 else {
    throw CloudErrorUtil.toCoreException(error);
  }
}","public T run(SubMonitor progress) throws CoreException {
  Throwable error=null;
  boolean reattempt=true;
  while (reattempt) {
    long interval=-1;
    try {
      return doRun(client,progress);
    }
 catch (    Throwable e) {
      error=e;
    }
    interval=getWaitInterval(error,progress);
    if (interval > 0) {
      try {
        Thread.sleep(interval);
      }
 catch (      InterruptedException e) {
      }
      timeLeft-=interval;
      reattempt=timeLeft > 0;
    }
 else {
      break;
    }
  }
  if (error == null) {
    error=new CoreException(CloudFoundryPlugin.getErrorStatus(""String_Node_Str"" + CloudFoundryServerBehaviour.Request.class.getName()));
  }
  if (error instanceof CoreException) {
    throw (CoreException)error;
  }
 else {
    throw CloudErrorUtil.toCoreException(error);
  }
}",0.3196850393700787
10834,"public IStatus performAction(IProgressMonitor monitor) throws CoreException {
  tunnelDescriptor=descriptor.getTunnelDescriptor();
  if (tunnelDescriptor == null && descriptor.getCloudService() != null) {
    try {
      TunnelBehaviour handler=new TunnelBehaviour(cloudServer);
      tunnelDescriptor=handler.startCaldecottTunnel(descriptor.getCloudService().getName(),monitor,false);
    }
 catch (    CoreException e) {
      return CloudFoundryPlugin.getErrorStatus(e);
    }
  }
  if (tunnelDescriptor != null) {
    UIJob uiJob=new UIJob(getJobName()){
      @Override public IStatus runInUIThread(      IProgressMonitor monitor){
        IConnectionProfile profile=getConnectionProfile();
        IStatus status=Status.OK_STATUS;
        if (profile != null) {
          Properties properties=profile.getBaseProperties();
          properties.setProperty(IJDBCConnectionProfileConstants.PASSWORD_PROP_ID,tunnelDescriptor.getPassword());
          profile.setBaseProperties(properties);
          status=profile.connect();
        }
 else {
          status=CloudFoundryPlugin.getErrorStatus(""String_Node_Str"" + tunnelDescriptor.getServiceName());
        }
        return status;
      }
    }
;
    uiJob.schedule();
    return Status.OK_STATUS;
  }
 else {
    return CloudFoundryPlugin.getErrorStatus(""String_Node_Str"" + tunnelDescriptor.getServiceName());
  }
}","public IStatus performAction(IProgressMonitor monitor) throws CoreException {
  tunnelDescriptor=descriptor.getTunnelDescriptor();
  if (tunnelDescriptor == null && descriptor.getCloudService() != null) {
    try {
      TunnelBehaviour handler=new TunnelBehaviour(cloudServer);
      tunnelDescriptor=handler.startCaldecottTunnel(descriptor.getCloudService().getName(),monitor,false);
    }
 catch (    CoreException e) {
      return CloudFoundryPlugin.getErrorStatus(e);
    }
  }
  if (tunnelDescriptor != null) {
    UIJob uiJob=new UIJob(getJobName()){
      @Override public IStatus runInUIThread(      IProgressMonitor monitor){
        IConnectionProfile profile=getConnectionProfile();
        IStatus status=Status.OK_STATUS;
        if (profile != null) {
          status=profile.connect();
        }
 else {
          status=CloudFoundryPlugin.getErrorStatus(""String_Node_Str"" + tunnelDescriptor.getServiceName());
        }
        return status;
      }
    }
;
    uiJob.schedule();
    return Status.OK_STATUS;
  }
 else {
    return CloudFoundryPlugin.getErrorStatus(""String_Node_Str"" + tunnelDescriptor.getServiceName());
  }
}",0.9106788408098452
10835,"protected IConnectionProfile getConnectionProfile(){
  IConnectionProfile profile=null;
  IConnectionProfile[] profiles=ProfileManager.getInstance().getProfiles();
  if (profiles != null) {
    for (    IConnectionProfile prf : profiles) {
      if (prf.getName().equals(descriptor.getProfileName())) {
        profile=prf;
        break;
      }
    }
    if (profile != null && !matchesProfile(profile,tunnelDescriptor)) {
      if (profile.getConnectionState() == IConnectionProfile.CONNECTED_STATE) {
        IStatus status=profile.disconnect();
        if (!status.isOK()) {
          CloudFoundryPlugin.logError(status);
        }
      }
      try {
        ProfileManager.getInstance().deleteProfile(profile);
      }
 catch (      ConnectionProfileException e) {
        CloudFoundryPlugin.logError(e);
      }
 finally {
        profile=null;
      }
    }
  }
  if (profile == null) {
    DriverInstance driverInstance=null;
    driverInstance=DriverManager.getInstance().getDriverInstanceByName(descriptor.getDriverName());
    if (driverInstance == null) {
      TemplateDescriptor[] templates=TemplateDescriptor.getDriverTemplateDescriptors();
      TemplateDescriptor driverTemplate=null;
      if (templates != null) {
        for (        TemplateDescriptor temp : templates) {
          String templateID=temp.getId();
          if (templateID.contains(descriptor.getDriverTemplateIdentifier())) {
            driverTemplate=temp;
            break;
          }
        }
      }
      if (driverTemplate != null) {
        IPropertySet properties=new PropertySetImpl(descriptor.getDriverName(),driverTemplate.getName());
        Properties props=new Properties();
        props.setProperty(IDriverMgmtConstants.PROP_DEFN_JARLIST,""String_Node_Str"");
        props.setProperty(IDriverMgmtConstants.PROP_DEFN_TYPE,driverTemplate.getId());
        setProperties(props,tunnelDescriptor);
        properties.setBaseProperties(props);
        Shell shell=PlatformUI.getWorkbench().getModalDialogShellProvider().getShell();
        if (shell != null) {
          DriverDialog jdbcDriverDialog=new DriverDialog(shell,driverTemplate.getParentCategory());
          jdbcDriverDialog.setPropertySet(properties);
          jdbcDriverDialog.setEditMode(true);
          jdbcDriverDialog.setIsEditable(true);
          if (jdbcDriverDialog.open() == Window.OK) {
            properties=jdbcDriverDialog.getPropertySet();
            if (properties != null) {
              DriverManager.getInstance().addDriverInstance(properties);
              driverInstance=DriverManager.getInstance().getDriverInstanceByName(descriptor.getDriverName());
            }
          }
        }
      }
    }
    if (driverInstance != null) {
      Properties props=driverInstance.getPropertySet().getBaseProperties();
      props.setProperty(DATA_TOOLS_DRIVER_DEFINITION_ID,driverInstance.getId());
      try {
        String providerID=descriptor.getDriverProviderID();
        profile=ProfileManager.getInstance().createProfile(descriptor.getProfileName(),CLOUD_FOUNDRY_JDBC_PROFILE_DESCRIPTION,providerID,props);
      }
 catch (      ConnectionProfileException e) {
        CloudFoundryPlugin.logError(e);
      }
    }
 else {
      CloudFoundryPlugin.logError(""String_Node_Str"" + CloudUtil.getServiceVendor(descriptor.getCloudService()) + ""String_Node_Str""+ tunnelDescriptor.getServiceName());
    }
  }
  return profile;
}","protected IConnectionProfile getConnectionProfile(){
  IConnectionProfile profile=null;
  IConnectionProfile[] profiles=ProfileManager.getInstance().getProfiles();
  if (profiles != null) {
    for (    IConnectionProfile prf : profiles) {
      if (prf.getName().equals(descriptor.getProfileName())) {
        profile=prf;
        break;
      }
    }
  }
  if (profile == null) {
    DriverInstance driverInstance=null;
    driverInstance=DriverManager.getInstance().getDriverInstanceByName(descriptor.getDriverName());
    if (driverInstance == null) {
      TemplateDescriptor[] templates=TemplateDescriptor.getDriverTemplateDescriptors();
      TemplateDescriptor driverTemplate=null;
      if (templates != null) {
        for (        TemplateDescriptor temp : templates) {
          String templateID=temp.getId();
          if (templateID.contains(descriptor.getDriverTemplateIdentifier())) {
            driverTemplate=temp;
            break;
          }
        }
      }
      if (driverTemplate != null) {
        IPropertySet properties=new PropertySetImpl(descriptor.getDriverName(),driverTemplate.getName());
        Properties props=new Properties();
        props.setProperty(IDriverMgmtConstants.PROP_DEFN_JARLIST,""String_Node_Str"");
        props.setProperty(IDriverMgmtConstants.PROP_DEFN_TYPE,driverTemplate.getId());
        setProperties(props,tunnelDescriptor);
        properties.setBaseProperties(props);
        Shell shell=PlatformUI.getWorkbench().getModalDialogShellProvider().getShell();
        if (shell != null) {
          DriverDialog jdbcDriverDialog=new DriverDialog(shell,driverTemplate.getParentCategory());
          jdbcDriverDialog.setPropertySet(properties);
          jdbcDriverDialog.setEditMode(true);
          jdbcDriverDialog.setIsEditable(true);
          if (jdbcDriverDialog.open() == Window.OK) {
            properties=jdbcDriverDialog.getPropertySet();
            if (properties != null) {
              DriverManager.getInstance().addDriverInstance(properties);
              driverInstance=DriverManager.getInstance().getDriverInstanceByName(descriptor.getDriverName());
            }
          }
        }
      }
    }
    if (driverInstance != null) {
      Properties props=driverInstance.getPropertySet().getBaseProperties();
      props.setProperty(DATA_TOOLS_DRIVER_DEFINITION_ID,driverInstance.getId());
      try {
        String providerID=descriptor.getDriverProviderID();
        profile=ProfileManager.getInstance().createProfile(descriptor.getProfileName(),CLOUD_FOUNDRY_JDBC_PROFILE_DESCRIPTION,providerID,props);
      }
 catch (      ConnectionProfileException e) {
        CloudFoundryPlugin.logError(e);
      }
    }
 else {
      CloudFoundryPlugin.logError(""String_Node_Str"" + CloudUtil.getServiceVendor(descriptor.getCloudService()) + ""String_Node_Str""+ tunnelDescriptor.getServiceName());
    }
  }
  if (profile != null && !matchesProfile(profile,tunnelDescriptor)) {
    if (profile.getConnectionState() == IConnectionProfile.CONNECTED_STATE) {
      IStatus status=profile.disconnect();
      if (!status.isOK()) {
        CloudFoundryPlugin.logError(status);
      }
    }
    Properties props=profile.getBaseProperties();
    setProperties(props,tunnelDescriptor);
    profile.setBaseProperties(props);
  }
  return profile;
}",0.8575672062973414
10836,"@Override public IStatus runInUIThread(IProgressMonitor monitor){
  IConnectionProfile profile=getConnectionProfile();
  IStatus status=Status.OK_STATUS;
  if (profile != null) {
    Properties properties=profile.getBaseProperties();
    properties.setProperty(IJDBCConnectionProfileConstants.PASSWORD_PROP_ID,tunnelDescriptor.getPassword());
    profile.setBaseProperties(properties);
    status=profile.connect();
  }
 else {
    status=CloudFoundryPlugin.getErrorStatus(""String_Node_Str"" + tunnelDescriptor.getServiceName());
  }
  return status;
}","@Override public IStatus runInUIThread(IProgressMonitor monitor){
  IConnectionProfile profile=getConnectionProfile();
  IStatus status=Status.OK_STATUS;
  if (profile != null) {
    status=profile.connect();
  }
 else {
    status=CloudFoundryPlugin.getErrorStatus(""String_Node_Str"" + tunnelDescriptor.getServiceName());
  }
  return status;
}",0.7687150837988826
10837,"@Override protected boolean matchesProfile(IConnectionProfile connection,CaldecottTunnelDescriptor tunnelDescriptor){
  Properties properties=connection.getBaseProperties();
  String userName=properties.getProperty(IJDBCConnectionProfileConstants.USERNAME_PROP_ID);
  String url=properties.getProperty(IJDBCConnectionProfileConstants.URL_PROP_ID);
  String dataBaseName=properties.getProperty(IJDBCConnectionProfileConstants.DATABASE_NAME_PROP_ID);
  return tunnelDescriptor.getUserName().equals(userName) && tunnelDescriptor.getURL().equals(url) && tunnelDescriptor.getDatabaseName().equals(dataBaseName);
}","@Override protected boolean matchesProfile(IConnectionProfile connection,CaldecottTunnelDescriptor tunnelDescriptor){
  Properties properties=connection.getBaseProperties();
  String userName=properties.getProperty(IJDBCConnectionProfileConstants.USERNAME_PROP_ID);
  String password=properties.getProperty(IJDBCConnectionProfileConstants.PASSWORD_PROP_ID);
  String url=properties.getProperty(IJDBCConnectionProfileConstants.URL_PROP_ID);
  String dataBaseName=properties.getProperty(IJDBCConnectionProfileConstants.DATABASE_NAME_PROP_ID);
  return tunnelDescriptor.getUserName().equals(userName) && tunnelDescriptor.getURL().equals(url) && tunnelDescriptor.getDatabaseName().equals(dataBaseName)&& tunnelDescriptor.getPassword().equals(password);
}",0.8954344624447718
10838,"public static List<String> getOptionVariables(ServiceCommand serviceCommand,String options){
  if (options == null || serviceCommand == null) {
    return Collections.emptyList();
  }
  options=options.trim();
  List<String> variableList=new ArrayList<String>();
  StringWriter variableBuffer=null;
  for (int i=0; i < options.length(); i++) {
    if (options.charAt(i) == '$') {
      variableBuffer=new StringWriter();
    }
 else     if ((options.charAt(i) == '}' || i == options.length() - 1) && variableBuffer != null) {
      if (variableBuffer.getBuffer().length() > 0) {
        variableList.add(variableBuffer.toString());
      }
      variableBuffer=null;
    }
 else     if (variableBuffer != null && options.charAt(i) != '{') {
      variableBuffer.append(options.charAt(i));
    }
  }
  return variableList;
}","public static List<String> getOptionVariables(ServiceCommand serviceCommand,String options){
  if (options == null || serviceCommand == null) {
    return Collections.emptyList();
  }
  options=options.trim();
  List<String> variableList=new ArrayList<String>();
  StringWriter variableBuffer=null;
  for (int i=0; i < options.length(); i++) {
    if ((options.charAt(i) == '$') && i + 1 < options.length() && (options.charAt(i + 1) == '{')) {
      variableBuffer=new StringWriter();
      i++;
    }
 else     if ((options.charAt(i) == '}') && variableBuffer != null) {
      if (variableBuffer.getBuffer().length() > 0) {
        variableList.add(variableBuffer.toString());
      }
      variableBuffer=null;
    }
 else     if (variableBuffer != null) {
      variableBuffer.append(options.charAt(i));
    }
  }
  return variableList;
}",0.8822115384615384
10839,"public static void setOptionVariableValues(ServiceCommand serviceCommand,Map<String,String> variableToValueMap){
  CommandOptions commandOptions=serviceCommand.getOptions();
  if (commandOptions == null || commandOptions.getOptions() == null) {
    return;
  }
  String options=commandOptions.getOptions();
  StringBuffer variableBuffer=null;
  StringBuffer resolvedOptions=new StringBuffer(options);
  int dollarSignIndex=-1;
  for (int i=0; i < resolvedOptions.length(); ) {
    boolean inserted=false;
    if (resolvedOptions.charAt(i) == '$') {
      dollarSignIndex=i;
      variableBuffer=new StringBuffer();
    }
 else     if ((resolvedOptions.charAt(i) == '}' || i == resolvedOptions.length() - 1) && variableBuffer != null) {
      if (variableBuffer.length() > 0) {
        String variable=variableBuffer.toString();
        String value=variableToValueMap.get(variable);
        int endingIndex=i + 1;
        if (value != null && dollarSignIndex >= 0 && (endingIndex <= resolvedOptions.length())) {
          resolvedOptions.replace(dollarSignIndex,endingIndex,""String_Node_Str"");
          resolvedOptions.insert(dollarSignIndex,value);
          i=dollarSignIndex + value.length();
          inserted=true;
        }
      }
      variableBuffer=null;
      dollarSignIndex=-1;
    }
 else     if (variableBuffer != null && resolvedOptions.charAt(i) != '{') {
      variableBuffer.append(resolvedOptions.charAt(i));
    }
    if (!inserted) {
      i++;
    }
  }
  CommandOptions resolvedOp=new CommandOptions();
  resolvedOp.setOptions(resolvedOptions.toString());
  serviceCommand.setOptions(resolvedOp);
}","public static void setOptionVariableValues(ServiceCommand serviceCommand,Map<String,String> variableToValueMap){
  CommandOptions commandOptions=serviceCommand.getOptions();
  if (commandOptions == null || commandOptions.getOptions() == null) {
    return;
  }
  String options=commandOptions.getOptions();
  StringBuffer variableBuffer=null;
  StringBuffer resolvedOptions=new StringBuffer(options);
  int dollarSignIndex=-1;
  for (int i=0; i < resolvedOptions.length(); ) {
    boolean inserted=false;
    if ((resolvedOptions.charAt(i) == '$') && i + 1 < resolvedOptions.length() && (resolvedOptions.charAt(i + 1) == '{')) {
      dollarSignIndex=i;
      i++;
      variableBuffer=new StringBuffer();
    }
 else     if ((resolvedOptions.charAt(i) == '}') && variableBuffer != null) {
      if (variableBuffer.length() > 0) {
        String variable=variableBuffer.toString();
        String value=variableToValueMap.get(variable);
        int endingIndex=i + 1;
        if (value != null && dollarSignIndex >= 0 && (endingIndex <= resolvedOptions.length())) {
          resolvedOptions.replace(dollarSignIndex,endingIndex,""String_Node_Str"");
          resolvedOptions.insert(dollarSignIndex,value);
          i=dollarSignIndex + value.length();
          inserted=true;
        }
      }
      variableBuffer=null;
      dollarSignIndex=-1;
    }
 else     if (variableBuffer != null) {
      variableBuffer.append(resolvedOptions.charAt(i));
    }
    if (!inserted) {
      i++;
    }
  }
  CommandOptions resolvedOp=new CommandOptions();
  resolvedOp.setOptions(resolvedOptions.toString());
  serviceCommand.setOptions(resolvedOp);
}",0.9301898346601348
10840,"/** 
 * Will resolve an option variables for tunnel options like username and password, and prompt the user for non-user variables. Returns a service command with resolved variables, or null if the user cancelled entering values for non-user variables. If not service command is returned, it indicates that the application command should not be executed.
 * @return resolved service command, or null if variables are not resolved,most likely due to user canceling the prompt
 */
public ServiceCommand promptForValues(){
  Map<String,String> resolvedOptionVars=new HashMap<String,String>();
  Map<String,String> resolvedEnvVariables=new HashMap<String,String>();
  boolean shouldPromptForNonTunnel=resolveTunnelOptions(resolvedOptionVars);
  shouldPromptForNonTunnel|=resolveEnvironmentVariables(resolvedEnvVariables);
  if (shouldPromptForNonTunnel) {
    resolvedOptionVars=promptForUnsetValues(resolvedOptionVars,resolvedEnvVariables);
    if (resolvedOptionVars == null) {
      return null;
    }
  }
  ServiceCommand.setOptionVariableValues(serviceCommand,resolvedOptionVars);
  List<EnvironmentVariable> variables=serviceCommand.getEnvironmentVariables();
  if (variables != null) {
    for (    EnvironmentVariable var : variables) {
      String value=resolvedEnvVariables.get(var.getVariable());
      if (value != null) {
        var.setValue(value);
      }
    }
  }
  return serviceCommand;
}","/** 
 * Will resolve an option variables for tunnel options like user name and password, and prompt the user for non-user variables. Returns a service command with resolved variables, or null if the user cancelled entering values for non-user variables. If not service command is returned, it indicates that the application command should not be executed.
 * @return resolved service command, or null if variables are not resolved,most likely due to user canceling the prompt
 */
public ServiceCommand promptForValues(){
  Map<String,String> resolvedOptionVars=new HashMap<String,String>();
  Map<String,String> resolvedEnvVariables=new HashMap<String,String>();
  boolean shouldPromptOptions=resolveTunnelOptions(resolvedOptionVars);
  boolean shouldPromptEnvVariables=resolveEnvironmentVariables(resolvedEnvVariables);
  if (shouldPromptOptions || shouldPromptEnvVariables) {
    boolean executeCommand=promptForUnsetValues(resolvedOptionVars,resolvedEnvVariables);
    if (!executeCommand) {
      return null;
    }
  }
  ServiceCommand.setOptionVariableValues(serviceCommand,resolvedOptionVars);
  List<EnvironmentVariable> variables=serviceCommand.getEnvironmentVariables();
  if (variables != null) {
    for (    EnvironmentVariable var : variables) {
      String value=resolvedEnvVariables.get(var.getVariable());
      if (value != null) {
        var.setValue(value);
      }
    }
  }
  return serviceCommand;
}",0.8045245669848002
10841,"protected boolean resolveEnvironmentVariables(Map<String,String> envVariables){
  List<EnvironmentVariable> vars=serviceCommand.getEnvironmentVariables();
  boolean shouldPrompt=false;
  if (vars != null) {
    for (    EnvironmentVariable var : vars) {
      String varName=EnvironmentVariable.getValueVariable(var);
      String value=resolveTunnelVariable(varName);
      if (value == null) {
        shouldPrompt=true;
      }
      envVariables.put(var.getVariable(),value);
    }
  }
  return shouldPrompt;
}","protected boolean resolveEnvironmentVariables(Map<String,String> envVariables){
  List<EnvironmentVariable> vars=serviceCommand.getEnvironmentVariables();
  boolean shouldPrompt=false;
  if (vars != null) {
    for (    EnvironmentVariable var : vars) {
      String valueVar=EnvironmentVariable.getValueVariable(var);
      String value=var.getValue();
      if (valueVar != null) {
        value=resolveTunnelVariable(valueVar);
        if (value == null) {
          shouldPrompt=true;
        }
      }
      envVariables.put(var.getVariable(),value);
    }
  }
  return shouldPrompt;
}",0.907608695652174
10842,"/** 
 * @param optionsVariables
 * @return resolved values or null if user cancelled entered values for thevariables
 */
protected Map<String,String> promptForUnsetValues(Map<String,String> optionsVariables,Map<String,String> envVariables){
  Map<String,String> resolvedVariables=optionsVariables;
  if ((optionsVariables != null && !optionsVariables.isEmpty()) || (envVariables != null && !envVariables.isEmpty())) {
    UnsetOptionsWizard wizard=new UnsetOptionsWizard(optionsVariables);
    WizardDialog dialog=new WizardDialog(shell,wizard);
    if (dialog.open() == Window.OK) {
      resolvedVariables=wizard.getVariables();
    }
 else {
      return null;
    }
  }
  return resolvedVariables;
}","/** 
 * Prompts user for missing environment or options Variables. The map arguments should be modifiable as they are modified by the UI
 * @return true if the user entered missing values. False if user cancelled or there were no values to enter
 */
protected boolean promptForUnsetValues(Map<String,String> optionsVariables,Map<String,String> envVariables){
  if ((optionsVariables != null && !optionsVariables.isEmpty()) || (envVariables != null && !envVariables.isEmpty())) {
    SetValueVariablesWizard wizard=new SetValueVariablesWizard(optionsVariables,envVariables);
    WizardDialog dialog=new WizardDialog(shell,wizard);
    if (dialog.open() == Window.OK) {
      return true;
    }
 else {
      return false;
    }
  }
  return false;
}",0.5665058580289456
10843,"@Override protected void createAreas(Composite parent){
  createURLArea(parent);
  createMemoryArea(parent);
  createCCNGPlanArea(parent);
  IProject project=module.getLocalModule().getProject();
  standalonePart=new StandaloneStartCommandPart(new JavaStartCommand(),this,project);
  standalonePart.createPart(parent);
  createStartOrDebugOptions(parent);
}","@Override protected void createAreas(Composite parent){
  Composite topComposite=new Composite(parent,SWT.NONE);
  GridLayout topLayout=new GridLayout(2,false);
  topComposite.setLayout(topLayout);
  topComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  createURLArea(topComposite);
  createMemoryArea(topComposite);
  createCCNGPlanArea(topComposite);
  IProject project=module.getLocalModule().getProject();
  standalonePart=new StandaloneStartCommandPart(new JavaStartCommand(),this,project);
  standalonePart.createPart(topComposite);
  createStartOrDebugOptions(topComposite);
}",0.68125
10844,"@Override protected void createStartOrDebugOptions(Composite parent){
  super.createStartOrDebugOptions(parent);
  if (isServerDebugModeAllowed()) {
    GridData buttonData=new GridData(SWT.FILL,SWT.FILL,false,false);
    regularStartOnDeploymentButton.setLayoutData(buttonData);
    GridLayoutFactory.fillDefaults().numColumns(2).applyTo(runDebugOptions);
  }
}","@Override protected void createStartOrDebugOptions(Composite parent){
  super.createStartOrDebugOptions(parent);
  if (isServerDebugModeAllowed()) {
    regularStartOnDeploymentButton.setText(""String_Node_Str"");
    GridData buttonData=new GridData(SWT.FILL,SWT.FILL,false,false);
    regularStartOnDeploymentButton.setLayoutData(buttonData);
    GridLayoutFactory.fillDefaults().numColumns(2).applyTo(runDebugOptions);
  }
}",0.9199491740787802
10845,"protected void createAreas(Composite parent){
  createURLArea(parent);
  createMemoryArea(parent);
  createCCNGPlanArea(parent);
  createStartOrDebugOptions(parent);
}","protected void createAreas(Composite parent){
  Composite topComposite=new Composite(parent,SWT.NONE);
  GridLayout topLayout=new GridLayout(2,false);
  topComposite.setLayout(topLayout);
  topComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  createURLArea(topComposite);
  createMemoryArea(topComposite);
  createCCNGPlanArea(topComposite);
  createStartOrDebugOptions(parent);
}",0.5246478873239436
10846,"public void createControl(Composite parent){
  setTitle(""String_Node_Str"");
  setDescription(""String_Node_Str"");
  ImageDescriptor banner=CloudFoundryImages.getWizardBanner(serverTypeId);
  if (banner != null) {
    setImageDescriptor(banner);
  }
  this.wizard=(CloudFoundryApplicationWizard)getWizard();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  Composite topComposite=new Composite(composite,SWT.NONE);
  GridLayout topLayout=new GridLayout(2,false);
  topComposite.setLayout(topLayout);
  topComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  createAreas(topComposite);
  setControl(composite);
  update(false);
}","public void createControl(Composite parent){
  setTitle(""String_Node_Str"");
  setDescription(""String_Node_Str"");
  ImageDescriptor banner=CloudFoundryImages.getWizardBanner(serverTypeId);
  if (banner != null) {
    setImageDescriptor(banner);
  }
  this.wizard=(CloudFoundryApplicationWizard)getWizard();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  createAreas(composite);
  setControl(composite);
  update(false);
}",0.7403993855606759
10847,"public void run(){
  if (editorPage.isDisposed())   return;
  if (masterDetailsBlock.getMasterPart().getManagedForm().getForm().isDisposed())   return;
  masterDetailsBlock.refreshUI(area);
  IStatus status=event.getResult();
  Throwable exception=status.getException();
  if (!userAction) {
    return;
  }
  if (exception != null) {
    if (exception instanceof CoreException) {
      if (CloudUtil.isNotFoundException((CoreException)exception)) {
        display404Error(status);
        return;
      }
      if (userAction && CloudUtil.isWrongCredentialsException((CoreException)exception)) {
        CloudFoundryCredentialsWizard wizard=new CloudFoundryCredentialsWizard(editorPage.getCloudServer());
        WizardDialog dialog=new WizardDialog(Display.getDefault().getActiveShell(),wizard);
        if (dialog.open() == Dialog.OK) {
          CloudFoundryEditorAction.this.run();
          return;
        }
      }
    }
    editorPage.setMessage(status.getMessage(),IMessageProvider.ERROR);
  }
 else {
    IModule currentModule=editorPage.getMasterDetailsBlock().getCurrentModule();
    if (currentModule != null) {
      ApplicationModule appModule=editorPage.getCloudServer().getApplication(currentModule);
      if (appModule != null && appModule.getErrorMessage() != null) {
        editorPage.setMessage(appModule.getErrorMessage(),IMessageProvider.ERROR);
        return;
      }
    }
    editorPage.setMessage(null,IMessageProvider.NONE);
  }
}","public void run(){
  if (editorPage.isDisposed())   return;
  if (masterDetailsBlock.getMasterPart().getManagedForm().getForm().isDisposed())   return;
  masterDetailsBlock.refreshUI(area);
  IStatus status=event.getResult();
  Throwable exception=status.getException();
  if (!userAction) {
    return;
  }
  if (exception != null) {
    if (exception instanceof CoreException) {
      if (CloudUtil.isNotFoundException((CoreException)exception)) {
        display404Error(status);
        return;
      }
      if (userAction && CloudUtil.isWrongCredentialsException((CoreException)exception)) {
        CloudFoundryCredentialsWizard wizard=new CloudFoundryCredentialsWizard(editorPage.getCloudServer());
        WizardDialog dialog=new WizardDialog(Display.getDefault().getActiveShell(),wizard);
        if (dialog.open() == Dialog.OK) {
          CloudFoundryEditorAction.this.run();
          return;
        }
      }
    }
    setErrorInPage(status);
  }
 else {
    IModule currentModule=editorPage.getMasterDetailsBlock().getCurrentModule();
    if (currentModule != null) {
      ApplicationModule appModule=editorPage.getCloudServer().getApplication(currentModule);
      if (appModule != null && appModule.getErrorMessage() != null) {
        setErrorInPage(appModule.getErrorMessage());
        return;
      }
    }
    setErrorInPage((String)null);
  }
}",0.9018361581920904
10848,"@Override public void done(final IJobChangeEvent event){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (editorPage.isDisposed())       return;
      if (masterDetailsBlock.getMasterPart().getManagedForm().getForm().isDisposed())       return;
      masterDetailsBlock.refreshUI(area);
      IStatus status=event.getResult();
      Throwable exception=status.getException();
      if (!userAction) {
        return;
      }
      if (exception != null) {
        if (exception instanceof CoreException) {
          if (CloudUtil.isNotFoundException((CoreException)exception)) {
            display404Error(status);
            return;
          }
          if (userAction && CloudUtil.isWrongCredentialsException((CoreException)exception)) {
            CloudFoundryCredentialsWizard wizard=new CloudFoundryCredentialsWizard(editorPage.getCloudServer());
            WizardDialog dialog=new WizardDialog(Display.getDefault().getActiveShell(),wizard);
            if (dialog.open() == Dialog.OK) {
              CloudFoundryEditorAction.this.run();
              return;
            }
          }
        }
        editorPage.setMessage(status.getMessage(),IMessageProvider.ERROR);
      }
 else {
        IModule currentModule=editorPage.getMasterDetailsBlock().getCurrentModule();
        if (currentModule != null) {
          ApplicationModule appModule=editorPage.getCloudServer().getApplication(currentModule);
          if (appModule != null && appModule.getErrorMessage() != null) {
            editorPage.setMessage(appModule.getErrorMessage(),IMessageProvider.ERROR);
            return;
          }
        }
        editorPage.setMessage(null,IMessageProvider.NONE);
      }
    }
  }
);
}","@Override public void done(final IJobChangeEvent event){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (editorPage.isDisposed())       return;
      if (masterDetailsBlock.getMasterPart().getManagedForm().getForm().isDisposed())       return;
      masterDetailsBlock.refreshUI(area);
      IStatus status=event.getResult();
      Throwable exception=status.getException();
      if (!userAction) {
        return;
      }
      if (exception != null) {
        if (exception instanceof CoreException) {
          if (CloudUtil.isNotFoundException((CoreException)exception)) {
            display404Error(status);
            return;
          }
          if (userAction && CloudUtil.isWrongCredentialsException((CoreException)exception)) {
            CloudFoundryCredentialsWizard wizard=new CloudFoundryCredentialsWizard(editorPage.getCloudServer());
            WizardDialog dialog=new WizardDialog(Display.getDefault().getActiveShell(),wizard);
            if (dialog.open() == Dialog.OK) {
              CloudFoundryEditorAction.this.run();
              return;
            }
          }
        }
        setErrorInPage(status);
      }
 else {
        IModule currentModule=editorPage.getMasterDetailsBlock().getCurrentModule();
        if (currentModule != null) {
          ApplicationModule appModule=editorPage.getCloudServer().getApplication(currentModule);
          if (appModule != null && appModule.getErrorMessage() != null) {
            setErrorInPage(appModule.getErrorMessage());
            return;
          }
        }
        setErrorInPage((String)null);
      }
    }
  }
);
}",0.8790752815649081
10849,"protected void display404Error(IStatus status){
  editorPage.setMessage(status.getMessage(),IMessageProvider.ERROR);
}","/** 
 * Default behaviour is to display the error from the status. Subclasses can override to show other messages.
 */
protected void display404Error(IStatus status){
  setErrorInPage(status);
}",0.4294871794871794
10850,"protected Job getJob(){
  Job job=new Job(getJobName()){
    @Override protected IStatus run(    IProgressMonitor monitor){
      IStatus status=null;
      try {
        IModule module=editorPage.getMasterDetailsBlock().getCurrentModule();
        status=performAction(monitor);
        if (status != null && status.isOK()) {
          if (module != null && TunnelBehaviour.isCaldecottApp(module.getName())) {
            return editorPage.refreshStates(module,RefreshArea.ALL,monitor);
          }
 else {
            return editorPage.refreshStates(module,area,monitor);
          }
        }
      }
 catch (      CoreException e) {
        if (shouldLogException(e)) {
          StatusManager.getManager().handle(new Status(Status.ERROR,CloudFoundryServerUiPlugin.PLUGIN_ID,""String_Node_Str"",e),StatusManager.LOG);
        }
        return new Status(Status.CANCEL,CloudFoundryServerUiPlugin.PLUGIN_ID,e.getMessage(),e);
      }
      return status;
    }
  }
;
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    final IJobChangeEvent event){
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          if (editorPage.isDisposed())           return;
          if (masterDetailsBlock.getMasterPart().getManagedForm().getForm().isDisposed())           return;
          masterDetailsBlock.refreshUI(area);
          IStatus status=event.getResult();
          Throwable exception=status.getException();
          if (!userAction) {
            return;
          }
          if (exception != null) {
            if (exception instanceof CoreException) {
              if (CloudUtil.isNotFoundException((CoreException)exception)) {
                display404Error(status);
                return;
              }
              if (userAction && CloudUtil.isWrongCredentialsException((CoreException)exception)) {
                CloudFoundryCredentialsWizard wizard=new CloudFoundryCredentialsWizard(editorPage.getCloudServer());
                WizardDialog dialog=new WizardDialog(Display.getDefault().getActiveShell(),wizard);
                if (dialog.open() == Dialog.OK) {
                  CloudFoundryEditorAction.this.run();
                  return;
                }
              }
            }
            editorPage.setMessage(status.getMessage(),IMessageProvider.ERROR);
          }
 else {
            IModule currentModule=editorPage.getMasterDetailsBlock().getCurrentModule();
            if (currentModule != null) {
              ApplicationModule appModule=editorPage.getCloudServer().getApplication(currentModule);
              if (appModule != null && appModule.getErrorMessage() != null) {
                editorPage.setMessage(appModule.getErrorMessage(),IMessageProvider.ERROR);
                return;
              }
            }
            editorPage.setMessage(null,IMessageProvider.NONE);
          }
        }
      }
);
    }
  }
);
  return job;
}","protected Job getJob(){
  Job job=new Job(getJobName()){
    @Override protected IStatus run(    IProgressMonitor monitor){
      IStatus status=null;
      try {
        IModule module=editorPage.getMasterDetailsBlock().getCurrentModule();
        status=performAction(monitor);
        if (status != null && status.isOK()) {
          if (module != null && TunnelBehaviour.isCaldecottApp(module.getName())) {
            return editorPage.refreshStates(module,RefreshArea.ALL,monitor);
          }
 else {
            return editorPage.refreshStates(module,area,monitor);
          }
        }
      }
 catch (      CoreException e) {
        if (shouldLogException(e)) {
          StatusManager.getManager().handle(new Status(Status.ERROR,CloudFoundryServerUiPlugin.PLUGIN_ID,""String_Node_Str"",e),StatusManager.LOG);
        }
        return new Status(Status.CANCEL,CloudFoundryServerUiPlugin.PLUGIN_ID,e.getMessage(),e);
      }
      return status;
    }
  }
;
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    final IJobChangeEvent event){
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          if (editorPage.isDisposed())           return;
          if (masterDetailsBlock.getMasterPart().getManagedForm().getForm().isDisposed())           return;
          masterDetailsBlock.refreshUI(area);
          IStatus status=event.getResult();
          Throwable exception=status.getException();
          if (!userAction) {
            return;
          }
          if (exception != null) {
            if (exception instanceof CoreException) {
              if (CloudUtil.isNotFoundException((CoreException)exception)) {
                display404Error(status);
                return;
              }
              if (userAction && CloudUtil.isWrongCredentialsException((CoreException)exception)) {
                CloudFoundryCredentialsWizard wizard=new CloudFoundryCredentialsWizard(editorPage.getCloudServer());
                WizardDialog dialog=new WizardDialog(Display.getDefault().getActiveShell(),wizard);
                if (dialog.open() == Dialog.OK) {
                  CloudFoundryEditorAction.this.run();
                  return;
                }
              }
            }
            setErrorInPage(status);
          }
 else {
            IModule currentModule=editorPage.getMasterDetailsBlock().getCurrentModule();
            if (currentModule != null) {
              ApplicationModule appModule=editorPage.getCloudServer().getApplication(currentModule);
              if (appModule != null && appModule.getErrorMessage() != null) {
                setErrorInPage(appModule.getErrorMessage());
                return;
              }
            }
            setErrorInPage((String)null);
          }
        }
      }
);
    }
  }
);
  return job;
}",0.9173553719008264
10851,"public void setMessage(String message,int messageType){
  if (message == null) {
    sform.setMessage(null,IMessageProvider.NONE);
  }
 else {
    sform.setMessage(message,messageType);
  }
}","public void setMessage(String message,int messageType){
  String messageToDisplay=message;
  if (messageToDisplay == null) {
    sform.setMessage(null,IMessageProvider.NONE);
  }
 else {
    StringBuffer buffer=new StringBuffer(messageToDisplay);
    for (int i=0; i < buffer.length(); i++) {
      char ch=buffer.charAt(i);
      if (ch == '\r' || ch == '\n') {
        buffer.replace(i,i + 1,""String_Node_Str"");
      }
    }
    if (buffer.length() > MAX_ERROR_MESSAGE) {
      String endingSegment=""String_Node_Str"";
      messageToDisplay=buffer.substring(0,MAX_ERROR_MESSAGE).trim() + endingSegment;
      CloudFoundryPlugin.logError(message);
    }
 else {
      messageToDisplay=buffer.toString();
    }
    sform.setMessage(messageToDisplay,messageType);
  }
}",0.3145833333333333
10852,"@Override public List<ApplicationFramework> getSupportedFrameworks(){
  List<ApplicationFramework> frameworks=new ArrayList<ApplicationFramework>();
  frameworks.add(new ApplicationFramework(STANDALONE_FRAMEWORK,STANDALONE_FRAMEWORK));
  return frameworks;
}","public List<ApplicationFramework> getSupportedFrameworks(){
  List<ApplicationFramework> frameworks=new ArrayList<ApplicationFramework>();
  frameworks.add(new ApplicationFramework(STANDALONE_FRAMEWORK,STANDALONE_FRAMEWORK));
  return frameworks;
}",0.9802371541501976
10853,"@Override public List<ApplicationRuntime> getRuntimes(CloudFoundryServer activeServer) throws CoreException {
  List<ApplicationRuntime> runtimes=new JavaRuntimeTypeHelper(activeServer).getRuntimeTypes();
  return runtimes;
}","public List<ApplicationRuntime> getRuntimes(CloudFoundryServer activeServer) throws CoreException {
  List<ApplicationRuntime> runtimes=new JavaRuntimeTypeHelper(activeServer).getRuntimeTypes();
  return runtimes;
}",0.9772727272727272
10854,"@Override public boolean providesApplicationArchive(IModule module){
  return true;
}","public boolean providesApplicationArchive(IModule module){
  return true;
}",0.9375
10855,"@Override public boolean requiresURL(){
  return false;
}","public boolean requiresURL(){
  return false;
}",0.903846153846154
10856,"@Override public boolean isSupportedFramework(String frameworkName){
  return STANDALONE_FRAMEWORK.equals(frameworkName);
}","public boolean isSupportedFramework(String frameworkName){
  return STANDALONE_FRAMEWORK.equals(frameworkName);
}",0.9576271186440678
10857,"@Override public List<IWizardPage> getWizardPages(ApplicationWizardDescriptor descriptor,CloudFoundryServer cloudServer,ApplicationModule applicationModule){
  List<IWizardPage> defaultPages=new ArrayList<IWizardPage>();
  CloudFoundryDeploymentWizardPage deploymentPage=new CloudFoundryStandaloneDeploymentWizardPage(cloudServer,applicationModule,descriptor);
  CloudFoundryApplicationWizardPage runtimeFrameworkPage=new CloudFoundryApplicationWizardPage(cloudServer,deploymentPage,applicationModule,descriptor);
  defaultPages.add(runtimeFrameworkPage);
  defaultPages.add(deploymentPage);
  CloudFoundryApplicationServicesWizardPage servicesPage=new CloudFoundryApplicationServicesWizardPage(cloudServer,applicationModule,descriptor);
  defaultPages.add(servicesPage);
  return defaultPages;
}","public List<IWizardPage> getWizardPages(ApplicationWizardDescriptor descriptor,CloudFoundryServer cloudServer,ApplicationModule applicationModule){
  List<IWizardPage> defaultPages=new ArrayList<IWizardPage>();
  StandaloneDeploymentWizardPage deploymentPage=new StandaloneDeploymentWizardPage(cloudServer,applicationModule,descriptor);
  StandaloneApplicationWizardPage runtimeFrameworkPage=new StandaloneApplicationWizardPage(cloudServer,deploymentPage,applicationModule,descriptor);
  defaultPages.add(runtimeFrameworkPage);
  defaultPages.add(deploymentPage);
  CloudFoundryApplicationServicesWizardPage servicesPage=new CloudFoundryApplicationServicesWizardPage(cloudServer,applicationModule,descriptor);
  defaultPages.add(servicesPage);
  return defaultPages;
}",0.9066496163682864
10858,"public boolean isValid(ApplicationWizardDescriptor applicationDescriptor){
  return super.isValid(applicationDescriptor) && applicationDescriptor.getStaging() != null && applicationDescriptor.getStaging().getCommand() != null;
}","public boolean isValid(ApplicationWizardDescriptor applicationDescriptor){
  return super.isValid(applicationDescriptor) && applicationDescriptor.getStaging() != null && !ValueValidationUtil.isEmpty(applicationDescriptor.getStaging().getCommand());
}",0.9205020920502092
10859,"public IStatus run(IProgressMonitor monitor){
  IStatus status=Status.OK_STATUS;
  File scriptFile=null;
  String appOptions=serviceCommand.getOptions() != null ? serviceCommand.getOptions().getOptions() : null;
  CommandTerminal terminalCommand=serviceCommand.getCommandTerminal();
  final List<String> processArguments=new ArrayList<String>();
  try {
    if (terminalCommand != null) {
      String terminalCommandValue=terminalCommand.getTerminal();
      List<String> terminalElements=parseElement(terminalCommandValue);
      processArguments.addAll(terminalElements);
      if (Platform.OS_MACOSX.equals(PlatformUtil.getOS())) {
        StringWriter optionsWr=new StringWriter();
        optionsWr.append(serviceCommand.getExternalApplication().getExecutableNameAndPath());
        if (appOptions != null) {
          optionsWr.append(' ');
          optionsWr.append(appOptions);
        }
        scriptFile=getScriptFile(optionsWr.toString());
        if (scriptFile != null && scriptFile.exists()) {
          processArguments.add(scriptFile.getAbsolutePath());
        }
 else {
          throw new CoreException(CloudFoundryPlugin.getErrorStatus(""String_Node_Str"" + serviceCommand.getDisplayName()));
        }
      }
 else       if (Platform.OS_WIN32.equals(PlatformUtil.getOS())) {
        StringBuffer windowsArgument=new StringBuffer();
        windowsArgument.append(' ');
        windowsArgument.append('""');
        windowsArgument.append(serviceCommand.getExternalApplication().getExecutableNameAndPath());
        windowsArgument.append('""');
        if (appOptions != null) {
          windowsArgument.append(' ');
          windowsArgument.append(appOptions);
        }
      }
 else {
        String processArg=serviceCommand.getExternalApplication().getExecutableNameAndPath();
        if (appOptions != null) {
          processArg+=""String_Node_Str"" + appOptions;
        }
        processArguments.add(processArg);
      }
    }
 else {
      processArguments.add(serviceCommand.getExternalApplication().getExecutableNameAndPath());
      if (appOptions != null) {
        List<String> optionElements=parseElement(appOptions);
        processArguments.addAll(optionElements);
      }
    }
    if (!processArguments.isEmpty()) {
      new ProcessLauncher(){
        protected String getLaunchName(){
          return serviceCommand.getDisplayName();
        }
        protected List<String> getCommandArguments() throws CoreException {
          return processArguments;
        }
      }
.run();
    }
 else {
      status=CloudFoundryPlugin.getErrorStatus(""String_Node_Str"" + getLaunchName());
      CloudFoundryPlugin.logError(status);
    }
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.logError(e);
    return CloudFoundryPlugin.getErrorStatus(e);
  }
 finally {
    if (scriptFile != null && scriptFile.exists()) {
      scriptFile.deleteOnExit();
    }
  }
  return status;
}","public IStatus run(IProgressMonitor monitor){
  IStatus status=Status.OK_STATUS;
  File scriptFile=null;
  String appOptions=serviceCommand.getOptions() != null ? serviceCommand.getOptions().getOptions() : null;
  CommandTerminal terminalCommand=serviceCommand.getCommandTerminal();
  final List<String> processArguments=new ArrayList<String>();
  try {
    if (terminalCommand != null) {
      String terminalCommandValue=terminalCommand.getTerminal();
      List<String> terminalElements=parseElement(terminalCommandValue);
      processArguments.addAll(terminalElements);
      if (Platform.OS_MACOSX.equals(PlatformUtil.getOS())) {
        StringWriter optionsWr=new StringWriter();
        optionsWr.append(serviceCommand.getExternalApplication().getExecutableNameAndPath());
        if (appOptions != null) {
          optionsWr.append(' ');
          optionsWr.append(appOptions);
        }
        scriptFile=getScriptFile(optionsWr.toString());
        if (scriptFile != null && scriptFile.exists()) {
          processArguments.add(scriptFile.getAbsolutePath());
        }
 else {
          throw new CoreException(CloudFoundryPlugin.getErrorStatus(""String_Node_Str"" + serviceCommand.getDisplayName()));
        }
      }
 else       if (Platform.OS_WIN32.equals(PlatformUtil.getOS())) {
        StringBuffer windowsArgument=new StringBuffer();
        windowsArgument.append(' ');
        windowsArgument.append('""');
        windowsArgument.append(serviceCommand.getExternalApplication().getExecutableNameAndPath());
        windowsArgument.append('""');
        if (appOptions != null) {
          windowsArgument.append(' ');
          windowsArgument.append(appOptions);
        }
        processArguments.add(windowsArgument.toString());
      }
 else {
        String processArg=serviceCommand.getExternalApplication().getExecutableNameAndPath();
        if (appOptions != null) {
          processArg+=""String_Node_Str"" + appOptions;
        }
        processArguments.add(processArg);
      }
    }
 else {
      processArguments.add(serviceCommand.getExternalApplication().getExecutableNameAndPath());
      if (appOptions != null) {
        List<String> optionElements=parseElement(appOptions);
        processArguments.addAll(optionElements);
      }
    }
    if (!processArguments.isEmpty()) {
      new ProcessLauncher(){
        protected String getLaunchName(){
          return serviceCommand.getDisplayName();
        }
        protected List<String> getCommandArguments() throws CoreException {
          return processArguments;
        }
      }
.run();
    }
 else {
      status=CloudFoundryPlugin.getErrorStatus(""String_Node_Str"" + getLaunchName());
      CloudFoundryPlugin.logError(status);
    }
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.logError(e);
    return CloudFoundryPlugin.getErrorStatus(e);
  }
 finally {
    if (scriptFile != null && scriptFile.exists()) {
      scriptFile.deleteOnExit();
    }
  }
  return status;
}",0.9901728227719416
10860,"public Control createPart(Composite parent){
  if (shell == null) {
    shell=parent.getShell();
  }
  Composite main=new Composite(parent,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(1).applyTo(main);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(main);
  createPredefinedArea(main);
  Label commandDisplayName=new Label(main,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(commandDisplayName);
  commandDisplayName.setText(""String_Node_Str"");
  displayName=new Text(main,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(displayName);
  displayName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      handleChange(event);
    }
  }
);
  Label terminalLocationLabel=new Label(main,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(terminalLocationLabel);
  terminalLocationLabel.setText(""String_Node_Str"");
  terminalLocation=new Text(main,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(terminalLocation);
  terminalLocation.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      handleChange(event);
    }
  }
);
  final Button terminalButton=new Button(main,SWT.CHECK);
  int padding=20;
  GridDataFactory.fillDefaults().grab(false,false).indent(padding,SWT.DEFAULT).applyTo(terminalButton);
  terminalButton.setText(""String_Node_Str"");
  terminalButton.setSelection(applyTerminalToAllCommands);
  terminalButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      applyTerminalToAllCommands=terminalButton.getSelection();
    }
  }
);
  Label fileSelectionLabel=new Label(main,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(fileSelectionLabel);
  fileSelectionLabel.setText(""String_Node_Str"");
  locationField=new Text(main,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(locationField);
  Composite buttonArea=new Composite(main,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(1).applyTo(buttonArea);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(buttonArea);
  locationField.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      handleChange(event);
    }
  }
);
  findApplicationButton=new Button(buttonArea,SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(findApplicationButton);
  findApplicationButton.setText(""String_Node_Str"");
  findApplicationButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      handleChange(event);
    }
  }
);
  Text argsLabel=new Text(main,SWT.MULTI);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(argsLabel);
  argsLabel.setText(""String_Node_Str"");
  argsLabel.setBackground(main.getBackground());
  options=new Text(main,SWT.MULTI | SWT.WRAP | SWT.BORDER);
  options.addTraverseListener(new TraverseListener(){
    public void keyTraversed(    TraverseEvent event){
      if (event.detail == SWT.TRAVERSE_RETURN && (event.stateMask & SWT.MODIFIER_MASK) != 0) {
        event.doit=true;
      }
    }
  }
);
  options.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      handleChange(event);
    }
  }
);
  GridDataFactory.fillDefaults().grab(true,true).hint(30,IDialogConstants.ENTRY_FIELD_WIDTH).applyTo(options);
  Text optionsDescription=new Text(main,SWT.MULTI | SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).hint(30,IDialogConstants.ENTRY_FIELD_WIDTH).applyTo(optionsDescription);
  optionsDescription.setEditable(false);
  optionsDescription.setText(getOptionsDescription());
  optionsDescription.setBackground(main.getBackground());
  readValues();
  return main;
}","public Control createPart(Composite parent){
  if (shell == null) {
    shell=parent.getShell();
  }
  Composite main=new Composite(parent,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(1).applyTo(main);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(main);
  createPredefinedArea(main);
  Label commandDisplayName=new Label(main,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(commandDisplayName);
  commandDisplayName.setText(""String_Node_Str"");
  displayName=new Text(main,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(displayName);
  displayName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      handleChange(event);
    }
  }
);
  Label terminalLocationLabel=new Label(main,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(terminalLocationLabel);
  terminalLocationLabel.setText(""String_Node_Str"");
  terminalLocation=new Text(main,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(terminalLocation);
  terminalLocation.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      handleChange(event);
    }
  }
);
  final Button terminalButton=new Button(main,SWT.CHECK);
  int padding=20;
  GridDataFactory.fillDefaults().grab(false,false).indent(padding,SWT.DEFAULT).applyTo(terminalButton);
  terminalButton.setText(""String_Node_Str"");
  terminalButton.setSelection(applyTerminalToAllCommands);
  terminalButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      applyTerminalToAllCommands=terminalButton.getSelection();
    }
  }
);
  Label fileSelectionLabel=new Label(main,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(fileSelectionLabel);
  fileSelectionLabel.setText(""String_Node_Str"");
  locationField=new Text(main,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(locationField);
  Composite buttonArea=new Composite(main,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(1).applyTo(buttonArea);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(buttonArea);
  locationField.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      handleChange(event);
    }
  }
);
  findApplicationButton=new Button(buttonArea,SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(findApplicationButton);
  findApplicationButton.setText(""String_Node_Str"");
  findApplicationButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      handleChange(event);
    }
  }
);
  Text argsLabel=new Text(main,SWT.MULTI);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(argsLabel);
  argsLabel.setText(""String_Node_Str"");
  argsLabel.setBackground(main.getBackground());
  argsLabel.setEditable(false);
  options=new Text(main,SWT.MULTI | SWT.WRAP | SWT.BORDER| SWT.V_SCROLL);
  options.addTraverseListener(new TraverseListener(){
    public void keyTraversed(    TraverseEvent event){
      if (event.detail == SWT.TRAVERSE_RETURN && (event.stateMask & SWT.MODIFIER_MASK) != 0) {
        event.doit=true;
      }
    }
  }
);
  options.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      handleChange(event);
    }
  }
);
  GridDataFactory.fillDefaults().grab(true,false).hint(IDialogConstants.ENTRY_FIELD_WIDTH,100).applyTo(options);
  Text optionsDescription=new Text(main,SWT.MULTI | SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).hint(IDialogConstants.ENTRY_FIELD_WIDTH,140).applyTo(optionsDescription);
  optionsDescription.setEditable(false);
  optionsDescription.setText(getOptionsDescription());
  optionsDescription.setBackground(main.getBackground());
  readValues();
  return main;
}",0.9913133670426552
10861,"public ServiceCommand getServiceCommand(){
  if (terminalLocation != null) {
    CommandTerminal terminal=new CommandTerminal();
    terminal.setTerminal(terminalLocationVal);
    serviceCommand.setCommandTerminal(terminal);
  }
  ExternalApplication appInfo=new ExternalApplication();
  appInfo.setDisplayName(displayNameVal);
  appInfo.setExecutableNameAndPath(locationVal);
  serviceCommand.setExternalApplication(appInfo);
  if (optionsVal != null && optionsVal.trim().length() > 0) {
    CommandOptions options=new CommandOptions();
    options.setOptions(optionsVal);
    serviceCommand.setOptions(options);
  }
  return serviceCommand;
}","public ServiceCommand getServiceCommand(){
  if (terminalLocationVal != null) {
    CommandTerminal terminal=new CommandTerminal();
    terminal.setTerminal(terminalLocationVal);
    serviceCommand.setCommandTerminal(terminal);
  }
  ExternalApplication appInfo=new ExternalApplication();
  appInfo.setDisplayName(displayNameVal);
  appInfo.setExecutableNameAndPath(locationVal);
  serviceCommand.setExternalApplication(appInfo);
  if (optionsVal != null && optionsVal.trim().length() > 0) {
    CommandOptions options=new CommandOptions();
    options.setOptions(optionsVal);
    serviceCommand.setOptions(options);
  }
  return serviceCommand;
}",0.9976762199845082
10862,"public Control createPart(Composite parent){
  if (shell == null) {
    shell=parent.getShell();
  }
  Composite main=new Composite(parent,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(1).applyTo(main);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(main);
  Label commandDisplayName=new Label(main,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(commandDisplayName);
  commandDisplayName.setText(""String_Node_Str"");
  displayName=new Text(main,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(displayName);
  Label terminalLocationLabel=new Label(main,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(terminalLocationLabel);
  terminalLocationLabel.setText(""String_Node_Str"");
  terminalLocation=new Text(main,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(terminalLocation);
  final Button terminalButton=new Button(main,SWT.CHECK);
  int padding=20;
  GridDataFactory.fillDefaults().grab(false,false).indent(padding,SWT.DEFAULT).applyTo(terminalButton);
  terminalButton.setText(""String_Node_Str"");
  terminalButton.setSelection(applyTerminalToAllCommands);
  terminalButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      applyTerminalToAllCommands=terminalButton.getSelection();
    }
  }
);
  Label fileSelectionLabel=new Label(main,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(fileSelectionLabel);
  fileSelectionLabel.setText(""String_Node_Str"");
  locationField=new Text(main,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(locationField);
  Composite buttonArea=new Composite(main,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(1).applyTo(buttonArea);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(buttonArea);
  findApplicationButton=new Button(buttonArea,SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(findApplicationButton);
  findApplicationButton.setText(""String_Node_Str"");
  findApplicationButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      handleChange(event);
    }
  }
);
  displayName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      handleChange(event);
    }
  }
);
  locationField.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      handleChange(event);
    }
  }
);
  if (predefined != null && !predefined.isEmpty()) {
    Label templates=new Label(main,SWT.NONE);
    GridDataFactory.fillDefaults().grab(false,false).applyTo(templates);
    templates.setText(""String_Node_Str"");
    Composite predefinedArea=new Composite(main,SWT.NONE);
    GridLayoutFactory.fillDefaults().numColumns(1).applyTo(predefinedArea);
    GridDataFactory.fillDefaults().grab(false,false).applyTo(predefinedArea);
    predefinedCommands=new Combo(predefinedArea,SWT.BORDER | SWT.READ_ONLY);
    GridDataFactory.fillDefaults().grab(false,false).applyTo(predefinedCommands);
    predefinedCommands.setEnabled(true);
    predefinedCommands.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent event){
        int selectionIndex=predefinedCommands.getSelectionIndex();
        if (selectionIndex != -1) {
          int predefIndex=selectionIndex - 1;
          ServiceCommand value=predefIndex >= 0 && predefIndex < predefined.size() ? predefined.get(predefIndex) : null;
          setPredefinedCommand(value);
        }
      }
    }
);
    predefinedCommands.add(""String_Node_Str"");
    for (    ServiceCommand option : predefined) {
      predefinedCommands.add(option.getExternalApplication().getDisplayName());
    }
    predefinedCommands.select(0);
  }
  Text argsLabel=new Text(main,SWT.MULTI);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(argsLabel);
  argsLabel.setText(""String_Node_Str"");
  argsLabel.setBackground(main.getBackground());
  options=new Text(main,SWT.MULTI | SWT.WRAP | SWT.BORDER);
  options.addTraverseListener(new TraverseListener(){
    public void keyTraversed(    TraverseEvent event){
      if (event.detail == SWT.TRAVERSE_RETURN && (event.stateMask & SWT.MODIFIER_MASK) != 0) {
        event.doit=true;
      }
    }
  }
);
  options.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      handleChange(event);
    }
  }
);
  GridDataFactory.fillDefaults().grab(true,true).hint(30,IDialogConstants.ENTRY_FIELD_WIDTH).applyTo(options);
  Text optionsDescription=new Text(main,SWT.MULTI | SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).hint(30,IDialogConstants.ENTRY_FIELD_WIDTH).applyTo(optionsDescription);
  optionsDescription.setEditable(false);
  optionsDescription.setText(getOptionsDescription());
  optionsDescription.setBackground(main.getBackground());
  readValues();
  return main;
}","public Control createPart(Composite parent){
  if (shell == null) {
    shell=parent.getShell();
  }
  Composite main=new Composite(parent,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(1).applyTo(main);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(main);
  Label commandDisplayName=new Label(main,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(commandDisplayName);
  commandDisplayName.setText(""String_Node_Str"");
  displayName=new Text(main,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(displayName);
  displayName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      handleChange(event);
    }
  }
);
  Label terminalLocationLabel=new Label(main,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(terminalLocationLabel);
  terminalLocationLabel.setText(""String_Node_Str"");
  terminalLocation=new Text(main,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(terminalLocation);
  terminalLocation.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      handleChange(event);
    }
  }
);
  final Button terminalButton=new Button(main,SWT.CHECK);
  int padding=20;
  GridDataFactory.fillDefaults().grab(false,false).indent(padding,SWT.DEFAULT).applyTo(terminalButton);
  terminalButton.setText(""String_Node_Str"");
  terminalButton.setSelection(applyTerminalToAllCommands);
  terminalButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      applyTerminalToAllCommands=terminalButton.getSelection();
    }
  }
);
  Label fileSelectionLabel=new Label(main,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(fileSelectionLabel);
  fileSelectionLabel.setText(""String_Node_Str"");
  locationField=new Text(main,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(locationField);
  Composite buttonArea=new Composite(main,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(1).applyTo(buttonArea);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(buttonArea);
  locationField.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      handleChange(event);
    }
  }
);
  findApplicationButton=new Button(buttonArea,SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(findApplicationButton);
  findApplicationButton.setText(""String_Node_Str"");
  findApplicationButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      handleChange(event);
    }
  }
);
  if (predefined != null && !predefined.isEmpty()) {
    Label templates=new Label(main,SWT.NONE);
    GridDataFactory.fillDefaults().grab(false,false).applyTo(templates);
    templates.setText(""String_Node_Str"");
    Composite predefinedArea=new Composite(main,SWT.NONE);
    GridLayoutFactory.fillDefaults().numColumns(1).applyTo(predefinedArea);
    GridDataFactory.fillDefaults().grab(false,false).applyTo(predefinedArea);
    predefinedCommands=new Combo(predefinedArea,SWT.BORDER | SWT.READ_ONLY);
    GridDataFactory.fillDefaults().grab(false,false).applyTo(predefinedCommands);
    predefinedCommands.setEnabled(true);
    predefinedCommands.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent event){
        int selectionIndex=predefinedCommands.getSelectionIndex();
        if (selectionIndex != -1) {
          int predefIndex=selectionIndex - 1;
          ServiceCommand value=predefIndex >= 0 && predefIndex < predefined.size() ? predefined.get(predefIndex) : null;
          setPredefinedCommand(value);
        }
      }
    }
);
    predefinedCommands.add(""String_Node_Str"");
    for (    ServiceCommand option : predefined) {
      predefinedCommands.add(option.getExternalApplication().getDisplayName());
    }
    predefinedCommands.select(0);
  }
  Text argsLabel=new Text(main,SWT.MULTI);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(argsLabel);
  argsLabel.setText(""String_Node_Str"");
  argsLabel.setBackground(main.getBackground());
  options=new Text(main,SWT.MULTI | SWT.WRAP | SWT.BORDER);
  options.addTraverseListener(new TraverseListener(){
    public void keyTraversed(    TraverseEvent event){
      if (event.detail == SWT.TRAVERSE_RETURN && (event.stateMask & SWT.MODIFIER_MASK) != 0) {
        event.doit=true;
      }
    }
  }
);
  options.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      handleChange(event);
    }
  }
);
  GridDataFactory.fillDefaults().grab(true,true).hint(30,IDialogConstants.ENTRY_FIELD_WIDTH).applyTo(options);
  Text optionsDescription=new Text(main,SWT.MULTI | SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).hint(30,IDialogConstants.ENTRY_FIELD_WIDTH).applyTo(optionsDescription);
  optionsDescription.setEditable(false);
  optionsDescription.setText(getOptionsDescription());
  optionsDescription.setBackground(main.getBackground());
  readValues();
  return main;
}",0.9273555027711796
10863,"protected void applyTerminalToAllCommands(CommandTerminal terminalToUpdate){
  if (terminalToUpdate != null) {
    List<ServerService> services=serviceCommands.getServices();
    if (services != null) {
      for (      ServerService service : services) {
        List<ServiceCommand> commands=service.getCommands();
        if (commands != null) {
          for (          ServiceCommand cmd : commands) {
            cmd.setCommandTerminal(terminalToUpdate);
          }
        }
      }
    }
    serviceCommands.setDefaultTerminal(terminalToUpdate);
  }
}","protected void applyTerminalToAllCommands(CommandTerminal terminalToUpdate){
  if (terminalToUpdate != null) {
    if (services != null) {
      for (      ServerService service : services) {
        List<ServiceCommand> commands=service.getCommands();
        if (commands != null) {
          for (          ServiceCommand cmd : commands) {
            cmd.setCommandTerminal(terminalToUpdate);
          }
        }
      }
    }
    serviceCommands.setDefaultTerminal(terminalToUpdate);
  }
}",0.4242424242424242
10864,"/** 
 * If add is true, it will ignore any currently selected command, and simply add a new command. Otherwise it will attempt to edit the currently selected command, if one exists. If add is false, and there are no selected command, it will add a new command
 * @param add true if adding a new command even if there is a currentlyselected command. False will ONLY edit an existing command, if one is currently selected. Otherwise it will add a new command.
 */
protected void addOrEditCommand(boolean add){
  ServiceCommand serviceCommandToEdit=null;
  if (add) {
    serviceCommandToEdit=new ServiceCommand();
    CommandTerminal defaultTerminal=serviceCommands.getDefaultTerminal();
    serviceCommandToEdit.setCommandTerminal(defaultTerminal);
  }
 else {
    serviceCommandToEdit=getSelectedCommand();
  }
  ServerService service=getSelectedService();
  if (service != null) {
    ServiceCommandWizard wizard=new ServiceCommandWizard(service,serviceCommandToEdit,add);
    Shell shell=getShell();
    if (shell != null) {
      WizardDialog dialog=new WizardDialog(getShell(),wizard);
      if (dialog.open() == Window.OK) {
        ServiceCommand newServiceCommand=wizard.getServiceCommand();
        CommandTerminal updatedTerminal=newServiceCommand != null && wizard.applyTerminalToAllCommands() ? newServiceCommand.getCommandTerminal() : null;
        applyTerminalToAllCommands(updatedTerminal);
        if (newServiceCommand != null) {
          updateCommandViewerInput(serviceCommandToEdit,newServiceCommand,service);
        }
      }
    }
  }
}","/** 
 * If add is true, it will ignore any currently selected command, and simply add a new command. Otherwise it will attempt to edit the currently selected command, if one exists. If add is false, and there are no selected command, it will add a new command
 * @param add true if adding a new command even if there is a currentlyselected command. False will ONLY edit an existing command, if one is currently selected. Otherwise it will add a new command.
 */
protected void addOrEditCommand(boolean add){
  ServiceCommand serviceCommandToEdit=null;
  if (add) {
    serviceCommandToEdit=new ServiceCommand();
    CommandTerminal defaultTerminal=serviceCommands.getDefaultTerminal();
    serviceCommandToEdit.setCommandTerminal(defaultTerminal);
  }
 else {
    serviceCommandToEdit=getSelectedCommand();
  }
  ServerService service=getSelectedService();
  if (service != null) {
    ServiceCommandWizard wizard=new ServiceCommandWizard(service,serviceCommandToEdit,add);
    Shell shell=getShell();
    if (shell != null) {
      WizardDialog dialog=new WizardDialog(getShell(),wizard);
      if (dialog.open() == Window.OK) {
        ServiceCommand newServiceCommand=wizard.getServiceCommand();
        CommandTerminal updatedTerminal=newServiceCommand != null && wizard.applyTerminalToAllCommands() ? newServiceCommand.getCommandTerminal() : null;
        if (newServiceCommand != null) {
          updateCommandViewerInput(serviceCommandToEdit,newServiceCommand,service);
          applyTerminalToAllCommands(updatedTerminal);
        }
      }
    }
  }
}",0.9192825112107624
10865,"/** 
 * Will resolve an option variables for tunnel options like username and password, and prompt the user for non-user variables. Returns a service command with resolved variables, or null if the user cancelled entering values for non-user variables. If not service command is returned, it indicates that the application command should not be executed.
 * @return resolved service command, or null if variables are not resolved,most likely due to user canceling the prompt
 */
public ServiceCommand promptForValues(){
  CommandOptions options=serviceCommand.getOptions();
  if (options != null) {
    List<String> variables=ServiceCommand.getOptionVariables(serviceCommand,options.getOptions());
    boolean shouldPromptForNonTunnel=false;
    if (variables != null && !variables.isEmpty()) {
      Map<String,String> variableToValue=new HashMap<String,String>();
      for (      String variable : variables) {
        String value=null;
        if (variable != null) {
          TunnelOptions tunnelOption=getTunnelOption(variable);
          if (tunnelOption != null) {
switch (tunnelOption) {
case Username:
              value=descriptor.getUserName();
            break;
case Password:
          value=descriptor.getPassword();
        break;
case Url:
      value=descriptor.getURL();
    break;
case Databasename:
  value=descriptor.getDatabaseName();
break;
case Port:
value=descriptor.tunnelPort() + ""String_Node_Str"";
break;
}
}
 else {
shouldPromptForNonTunnel=true;
}
}
variableToValue.put(variable,value);
}
if (shouldPromptForNonTunnel) {
variableToValue=promptForUnsetValues(variableToValue);
if (variableToValue == null) {
return null;
}
}
ServiceCommand.setOptionVariableValues(serviceCommand,variableToValue);
}
}
return serviceCommand;
}","/** 
 * Will resolve an option variables for tunnel options like username and password, and prompt the user for non-user variables. Returns a service command with resolved variables, or null if the user cancelled entering values for non-user variables. If not service command is returned, it indicates that the application command should not be executed.
 * @return resolved service command, or null if variables are not resolved,most likely due to user canceling the prompt
 */
public ServiceCommand promptForValues(){
  CommandOptions options=serviceCommand.getOptions();
  if (options != null) {
    List<String> variables=ServiceCommand.getOptionVariables(serviceCommand,options.getOptions());
    boolean shouldPromptForNonTunnel=false;
    if (variables != null && !variables.isEmpty()) {
      Map<String,String> variableToValue=new HashMap<String,String>();
      for (      String variable : variables) {
        String value=null;
        if (variable != null) {
          TunnelOptions tunnelOption=getTunnelOption(variable);
          if (tunnelOption != null) {
switch (tunnelOption) {
case username:
              value=descriptor.getUserName();
            break;
case password:
          value=descriptor.getPassword();
        break;
case url:
      value=descriptor.getURL();
    break;
case databasename:
  value=descriptor.getDatabaseName();
break;
case port:
value=descriptor.tunnelPort() + ""String_Node_Str"";
break;
}
}
 else {
shouldPromptForNonTunnel=true;
}
}
variableToValue.put(variable,value);
}
if (shouldPromptForNonTunnel) {
variableToValue=promptForUnsetValues(variableToValue);
if (variableToValue == null) {
return null;
}
}
ServiceCommand.setOptionVariableValues(serviceCommand,variableToValue);
}
}
return serviceCommand;
}",0.9971574758385446
10866,"/** 
 * @param toDelete to remove from list of existing commands in the givenwrapper
 * @param toAdd to add to the list of existing commands in the given wrapper
 * @param wrapper containing the old value, and that should contain the newvalue.
 */
protected void updateCommandViewerInput(ServiceCommand toDelete,ServiceCommand toAdd,ServerService service){
  if (service != null && (toDelete != null || toAdd != null)) {
    List<ServiceCommand> commands=service.getCommands();
    List<ServiceCommand> newCommands=new ArrayList<ServiceCommand>();
    if (commands != null) {
      for (      ServiceCommand existingCommand : commands) {
        if (!existingCommand.equals(toDelete)) {
          newCommands.add(existingCommand);
        }
      }
    }
    if (toAdd != null) {
      newCommands.add(toAdd);
    }
    service.setCommands(newCommands);
    setServiceCommandInput(service);
  }
}","/** 
 * @param toDelete to remove from list of existing commands in the givenwrapper
 * @param toAdd to add to the list of existing commands in the given wrapper
 * @param wrapper containing the old value, and that should contain the newvalue.
 */
protected void updateCommandViewerInput(ServiceCommand toDelete,ServiceCommand toAdd,ServerService service){
  if (service != null && (toDelete != null || toAdd != null)) {
    List<ServiceCommand> commands=service.getCommands();
    List<ServiceCommand> newCommands=new ArrayList<ServiceCommand>();
    if (commands != null) {
      for (      ServiceCommand existingCommand : commands) {
        if (!existingCommand.equals(toDelete)) {
          newCommands.add(existingCommand);
        }
      }
    }
    if (toAdd != null) {
      newCommands.add(toAdd);
    }
    service.setCommands(newCommands);
    setServiceCommandInput(service,toAdd);
  }
}",0.996662958843159
10867,"protected void refreshButtons(){
  ServiceCommand selectedCommand=getSelectedCommand();
  ServerService serviceWrapper=getSelectedService();
  if (selectedCommand != null) {
    addCommandButton.setEnabled(false);
    deleteCommandButton.setEnabled(true);
    editCommandButton.setEnabled(true);
  }
 else   if (serviceWrapper != null) {
    addCommandButton.setEnabled(true);
    deleteCommandButton.setEnabled(false);
    editCommandButton.setEnabled(false);
  }
 else {
    addCommandButton.setEnabled(false);
    deleteCommandButton.setEnabled(false);
    editCommandButton.setEnabled(false);
  }
}","protected void refreshButtons(){
  ServiceCommand selectedCommand=getSelectedCommand();
  ServerService serviceWrapper=getSelectedService();
  if (selectedCommand != null) {
    addCommandButton.setEnabled(true);
    deleteCommandButton.setEnabled(true);
    editCommandButton.setEnabled(true);
  }
 else   if (serviceWrapper != null) {
    addCommandButton.setEnabled(true);
    deleteCommandButton.setEnabled(false);
    editCommandButton.setEnabled(false);
  }
 else {
    addCommandButton.setEnabled(false);
    deleteCommandButton.setEnabled(false);
    editCommandButton.setEnabled(false);
  }
}",0.9941812136325852
10868,"protected void setServerInput(){
  serviceViewer.setInput(commands);
  setServiceCommandInput(null);
  setStatus(null);
}","protected void setServerInput(){
  serviceViewer.setInput(services);
  if (services != null && !services.isEmpty()) {
    serviceViewer.setSelection(new StructuredSelection(services.get(0)),true);
    setServiceCommandInput(services.get(0),null);
  }
  setStatus(null);
}",0.3928571428571428
10869,"protected void handleChange(EventObject eventSource){
  if (eventSource != null) {
    Object source=eventSource.getSource();
    if (source instanceof Control) {
      Control control=(Control)source;
      Object dataObj=control.getData();
      if (dataObj instanceof ControlData) {
        ControlData controlData=(ControlData)dataObj;
switch (controlData) {
case Add:
          addOrEditCommand();
        break;
case Delete:
      deleteCommand();
    break;
case Edit:
  addOrEditCommand();
break;
}
}
}
 else if (source == serviceViewer) {
ServerService serverService=getSelectedService();
setServiceCommandInput(serverService);
}
}
refreshButtons();
}","protected void handleChange(EventObject eventSource){
  if (eventSource != null) {
    Object source=eventSource.getSource();
    if (source instanceof Control) {
      Control control=(Control)source;
      Object dataObj=control.getData();
      if (dataObj instanceof ControlData) {
        ControlData controlData=(ControlData)dataObj;
switch (controlData) {
case Add:
          addOrEditCommand(true);
        break;
case Delete:
      deleteCommand();
    break;
case Edit:
  addOrEditCommand(false);
break;
}
}
}
 else if (source == serviceViewer) {
ServerService serverService=getSelectedService();
setServiceCommandInput(serverService,null);
}
}
refreshButtons();
}",0.9895052473763118
10870,"public TunnelServiceCommands getUpdatedCommands(){
  serviceCommands.setServices(commands);
  return serviceCommands;
}","public TunnelServiceCommands getUpdatedCommands(){
  serviceCommands.setServices(services);
  return serviceCommands;
}",0.9495798319327732
10871,"protected void setServiceCommandInput(ServerService service){
  if (service != null && service.getCommands() != null) {
    serviceCommandsViewer.setInput(service.getCommands());
  }
 else {
    serviceCommandsViewer.setInput(new ArrayList<ServerService>(0));
  }
}","protected void setServiceCommandInput(ServerService service,ServiceCommand commandToSelect){
  if (service != null && service.getCommands() != null) {
    serviceCommandsViewer.setInput(service.getCommands());
    if (commandToSelect != null) {
      serviceCommandsViewer.setSelection(new StructuredSelection(commandToSelect),true);
    }
  }
 else {
    serviceCommandsViewer.setInput(new ArrayList<ServerService>(0));
  }
}",0.7670043415340086
10872,"public ServiceTunnelCommandPart(TunnelServiceCommands serviceCommands){
  this.serviceCommands=serviceCommands;
  commands=(serviceCommands != null && serviceCommands.getServices() != null) ? new ArrayList<ServerService>(serviceCommands.getServices()) : new ArrayList<ServerService>();
}","public ServiceTunnelCommandPart(TunnelServiceCommands serviceCommands){
  this.serviceCommands=serviceCommands;
  services=(serviceCommands != null && serviceCommands.getServices() != null) ? new ArrayList<ServerService>(serviceCommands.getServices()) : new ArrayList<ServerService>();
}",0.975609756097561
10873,"protected void addOrEditCommand(){
  ServiceCommand serviceCommand=getSelectedCommand();
  ServerService service=getSelectedService();
  if (service != null) {
    ServiceCommandWizard wizard=new ServiceCommandWizard(serviceCommand);
    Shell shell=getShell();
    if (shell != null) {
      WizardDialog dialog=new WizardDialog(getShell(),wizard);
      if (dialog.open() == Window.OK) {
        ServiceCommand newServiceCommand=wizard.getServiceCommand();
        if (newServiceCommand != null) {
          updateCommandViewerInput(serviceCommand,newServiceCommand,service);
        }
      }
    }
  }
}","/** 
 * If add is true, it will ignore any currently selected command, and simply add a new command. Otherwise it will attempt to edit the currently selected command, if one exists. If add is false, and there are no selected command, it will add a new command
 * @param add true if adding a new command even if there is a currentlyselected command. False will ONLY edit an existing command, if one is currently selected. Otherwise it will add a new command.
 */
protected void addOrEditCommand(boolean add){
  ServiceCommand serviceCommandToEdit=add ? null : getSelectedCommand();
  ServerService service=getSelectedService();
  if (service != null) {
    ServiceCommandWizard wizard=add ? new ServiceCommandWizard(service) : new ServiceCommandWizard(service,serviceCommandToEdit);
    Shell shell=getShell();
    if (shell != null) {
      WizardDialog dialog=new WizardDialog(getShell(),wizard);
      if (dialog.open() == Window.OK) {
        ServiceCommand newServiceCommand=wizard.getServiceCommand();
        if (newServiceCommand != null) {
          updateCommandViewerInput(serviceCommandToEdit,newServiceCommand,service);
        }
      }
    }
  }
}",0.6074660633484162
10874,"public void start(){
  Thread thread=new Thread(this);
  thread.start();
}","public void start(){
  BufferedReader reader=new BufferedReader(new InputStreamReader(processInput));
  try {
    String line=reader.readLine();
    while (line != null) {
      if (outputBuffer != null) {
        outputBuffer.append(line);
        outputBuffer.append(' ');
      }
      line=reader.readLine();
    }
  }
 catch (  IOException e) {
    CloudFoundryPlugin.logError(""String_Node_Str"" + processName,e);
  }
 finally {
    if (processInput != null) {
      IOUtils.closeQuietly(processInput);
    }
  }
}",0.0912162162162162
10875,"public void run(){
  BufferedReader reader=new BufferedReader(new InputStreamReader(processInput));
  try {
    String line=reader.readLine();
    while (line != null) {
      if (outputBuffer != null) {
        outputBuffer.append(line);
        outputBuffer.append(' ');
      }
      line=reader.readLine();
    }
  }
 catch (  IOException e) {
    CloudFoundryPlugin.logError(""String_Node_Str"" + processName,e);
  }
 finally {
    if (processInput != null) {
      IOUtils.closeQuietly(processInput);
    }
  }
}","/** 
 * Returns when the process has exited without errors. This will wait for the process to exist, therefore will block the current thread in which it is running. If any errors occur, throws CoreException CoreException
 * @throws CoreException if any errors occur while the process is beinglaunched
 */
public void run() throws CoreException {
  Exception error=null;
  Process p=null;
  try {
    List<String> cmdArgs=getCommandArguments();
    if (cmdArgs == null || cmdArgs.isEmpty()) {
      throw new CoreException(getErrorStatus(""String_Node_Str""));
    }
 else {
      p=new ProcessBuilder(cmdArgs).start();
      if (p == null) {
        throw new CoreException(getErrorStatus(""String_Node_Str""));
      }
 else {
        StringBuffer errorBuffer=new StringBuffer();
        handleProcessIOAsynch(p,null,errorBuffer);
        p.waitFor();
        if (errorBuffer.length() > 0) {
          throw new CoreException(getErrorStatus(errorBuffer.toString()));
        }
 else         if (p.exitValue() != 0) {
          throw new CoreException(getErrorStatus(""String_Node_Str"" + p.exitValue()));
        }
      }
    }
  }
 catch (  InterruptedException ex) {
    error=ex;
  }
catch (  IOException ioe) {
    error=ioe;
  }
catch (  SecurityException se) {
    error=se;
  }
 finally {
    if (p != null) {
      p.destroy();
    }
  }
  if (error != null) {
    throw error instanceof CoreException ? (CoreException)error : CloudUtil.toCoreException(error);
  }
}",0.1097683786505538
10876,"/** 
 * The process IO needs to be handled in order to not block the process.This will cause separate threads to be spawned for each input
 * @param p
 * @return
 * @throws IOException
 */
protected void handleProcessIOAsynch(Process p,StringBuffer inputBuffer,StringBuffer errorBuffer){
  InputStream in=p.getInputStream();
  InputStream error=p.getErrorStream();
  if (in != null) {
    new ProcessStreamHandler(in,inputBuffer,getLaunchName()).start();
  }
  if (error != null) {
    new ProcessStreamHandler(error,errorBuffer,getLaunchName()).start();
  }
}","/** 
 * The process IO needs to be handled in order to not block the process.
 * @param p
 * @return
 * @throws IOException
 */
protected void handleProcessIOAsynch(Process p,StringBuffer inputBuffer,StringBuffer errorBuffer){
  InputStream in=p.getInputStream();
  InputStream error=p.getErrorStream();
  if (in != null) {
    new ProcessStreamHandler(in,inputBuffer,getLaunchName()).start();
  }
  if (error != null) {
    new ProcessStreamHandler(error,errorBuffer,getLaunchName()).start();
  }
}",0.9423984891406988
10877,"/** 
 * Throws CoreException if an error occurred while launching the external application.
 * @param monitor
 */
public void run(IProgressMonitor monitor) throws CoreException {
  File scriptFile=null;
  String appOptions=serviceCommand.getOptions() != null ? serviceCommand.getOptions().getOptions() : null;
  CommandTerminal terminalCommand=serviceCommand.getCommandTerminal();
  final List<String> processArguments=new ArrayList<String>();
  try {
    if (terminalCommand != null) {
      String terminalCommandValue=terminalCommand.getTerminal();
      List<String> terminalElements=parseElement(terminalCommandValue);
      processArguments.addAll(terminalElements);
      if (Platform.OS_MACOSX.equals(PlatformUtil.getOS())) {
        StringWriter optionsWr=new StringWriter();
        optionsWr.append(serviceCommand.getExternalApplication().getExecutableNameAndPath());
        if (appOptions != null) {
          optionsWr.append(' ');
          optionsWr.append(appOptions);
        }
        scriptFile=getScriptFile(optionsWr.toString());
      }
 else       if (Platform.OS_WIN32.equals(PlatformUtil.getOS())) {
        StringBuffer windowsArgument=new StringBuffer();
        windowsArgument.append(' ');
        windowsArgument.append('""');
        windowsArgument.append(serviceCommand.getExternalApplication().getExecutableNameAndPath());
        windowsArgument.append('""');
        if (appOptions != null) {
          windowsArgument.append(' ');
          windowsArgument.append(appOptions);
        }
        processArguments.add(windowsArgument.toString());
      }
 else {
        String processArg=serviceCommand.getExternalApplication().getExecutableNameAndPath();
        if (appOptions != null) {
          processArg+=""String_Node_Str"" + appOptions;
        }
        processArguments.add(processArg);
      }
    }
 else {
      processArguments.add(serviceCommand.getExternalApplication().getExecutableNameAndPath());
      if (appOptions != null) {
        List<String> optionElements=parseElement(appOptions);
        processArguments.addAll(optionElements);
      }
    }
    if (!processArguments.isEmpty()) {
      new ProcessLauncher(){
        protected String getLaunchName(){
          return serviceCommand.getDisplayName();
        }
        protected List<String> getCommandArguments() throws CoreException {
          return processArguments;
        }
      }
.run();
    }
 else {
      throw new CoreException(CloudFoundryPlugin.getErrorStatus(""String_Node_Str"" + getLaunchName()));
    }
  }
  finally {
    if (scriptFile != null && scriptFile.exists()) {
      scriptFile.deleteOnExit();
    }
  }
}","/** 
 * Throws CoreException if an error occurred while launching the external application.
 * @param monitor
 */
public void run(IProgressMonitor monitor) throws CoreException {
  File scriptFile=null;
  String appOptions=serviceCommand.getOptions() != null ? serviceCommand.getOptions().getOptions() : null;
  CommandTerminal terminalCommand=serviceCommand.getCommandTerminal();
  final List<String> processArguments=new ArrayList<String>();
  try {
    if (terminalCommand != null) {
      String terminalCommandValue=terminalCommand.getTerminal();
      List<String> terminalElements=parseElement(terminalCommandValue);
      processArguments.addAll(terminalElements);
      if (Platform.OS_MACOSX.equals(PlatformUtil.getOS())) {
        StringWriter optionsWr=new StringWriter();
        optionsWr.append(serviceCommand.getExternalApplication().getExecutableNameAndPath());
        if (appOptions != null) {
          optionsWr.append(' ');
          optionsWr.append(appOptions);
        }
        scriptFile=getScriptFile(optionsWr.toString());
        processArguments.add(scriptFile.getAbsolutePath());
      }
 else       if (Platform.OS_WIN32.equals(PlatformUtil.getOS())) {
        StringBuffer windowsArgument=new StringBuffer();
        windowsArgument.append(' ');
        windowsArgument.append('""');
        windowsArgument.append(serviceCommand.getExternalApplication().getExecutableNameAndPath());
        windowsArgument.append('""');
        if (appOptions != null) {
          windowsArgument.append(' ');
          windowsArgument.append(appOptions);
        }
        processArguments.add(windowsArgument.toString());
      }
 else {
        String processArg=serviceCommand.getExternalApplication().getExecutableNameAndPath();
        if (appOptions != null) {
          processArg+=""String_Node_Str"" + appOptions;
        }
        processArguments.add(processArg);
      }
    }
 else {
      processArguments.add(serviceCommand.getExternalApplication().getExecutableNameAndPath());
      if (appOptions != null) {
        List<String> optionElements=parseElement(appOptions);
        processArguments.addAll(optionElements);
      }
    }
    if (!processArguments.isEmpty()) {
      new ProcessLauncher(){
        protected String getLaunchName(){
          return serviceCommand.getDisplayName();
        }
        protected List<String> getCommandArguments() throws CoreException {
          return processArguments;
        }
      }
.run();
    }
 else {
      throw new CoreException(CloudFoundryPlugin.getErrorStatus(""String_Node_Str"" + getLaunchName()));
    }
  }
  finally {
    if (scriptFile != null && scriptFile.exists()) {
      scriptFile.deleteOnExit();
    }
  }
}",0.9888017917133258
10878,"public static CommandTerminal getDefaultOSTerminal(){
  String os=PlatformUtil.getOS();
  String terminalCommand=null;
  if (Platform.OS_MACOSX.equals(os)) {
    terminalCommand=""String_Node_Str"";
  }
 else   if (Platform.OS_LINUX.equals(os)) {
  }
 else   if (Platform.OS_WIN32.equals(os)) {
    terminalCommand=""String_Node_Str"";
  }
  if (terminalCommand != null) {
    CommandTerminal terminal=new CommandTerminal();
    terminal.setTerminalLaunchCommand(terminalCommand);
    return terminal;
  }
  return null;
}","public static CommandTerminal getDefaultOSTerminal(){
  String os=PlatformUtil.getOS();
  String terminalCommand=null;
  if (Platform.OS_MACOSX.equals(os)) {
    terminalCommand=""String_Node_Str"";
  }
 else   if (Platform.OS_LINUX.equals(os)) {
  }
 else   if (Platform.OS_WIN32.equals(os)) {
    terminalCommand=""String_Node_Str"";
  }
  if (terminalCommand != null) {
    CommandTerminal terminal=new CommandTerminal();
    terminal.setTerminal(terminalCommand);
    return terminal;
  }
  return null;
}",0.9872922776148584
10879,"protected void launchExternalCommand(){
  if (serviceCommand.usesTerminal()) {
    Process p=null;
    try {
      CommandTerminal terminalCommand=serviceCommand.getCommandTerminal();
      String terminalCommandValue=terminalCommand.getTerminalLaunchCommand();
      String[] terminalCommands=terminalCommandValue.split(""String_Node_Str"");
      List<String> cmdArgs=new ArrayList<String>();
      for (      String terminalCom : terminalCommands) {
        cmdArgs.add(terminalCom);
      }
      if (!addExternalToolCommand(cmdArgs)) {
        CloudFoundryPlugin.logError(""String_Node_Str"");
        return;
      }
      p=new ProcessBuilder(cmdArgs).start();
      if (p == null) {
        CloudFoundryPlugin.logError(""String_Node_Str"" + serviceCommand.getExternalApplicationLaunchInfo().getExecutableName() + ""String_Node_Str"");
      }
 else {
        handleProcessInput(p);
        p.waitFor();
        if (p.exitValue() != 0) {
          CloudFoundryPlugin.logError(""String_Node_Str"" + p.exitValue());
        }
      }
    }
 catch (    InterruptedException ex) {
      CloudFoundryPlugin.logError(""String_Node_Str"",ex);
    }
catch (    IOException ioe) {
    }
 finally {
      if (p != null) {
        p.destroy();
      }
    }
  }
}","protected void launchExternalCommand(){
  if (serviceCommand.usesTerminal()) {
    Process p=null;
    try {
      CommandTerminal terminalCommand=serviceCommand.getCommandTerminal();
      String terminalCommandValue=terminalCommand.getTerminal();
      String[] terminalCommands=terminalCommandValue.split(""String_Node_Str"");
      List<String> cmdArgs=new ArrayList<String>();
      for (      String terminalCom : terminalCommands) {
        cmdArgs.add(terminalCom);
      }
      if (!addExternalToolCommand(cmdArgs)) {
        CloudFoundryPlugin.logError(""String_Node_Str"");
        return;
      }
      p=new ProcessBuilder(cmdArgs).start();
      if (p == null) {
        CloudFoundryPlugin.logError(""String_Node_Str"" + serviceCommand.getExternalApplication().getExecutableNameAndPath() + ""String_Node_Str"");
      }
 else {
        handleProcessInput(p);
        p.waitFor();
        if (p.exitValue() != 0) {
          CloudFoundryPlugin.logError(""String_Node_Str"" + p.exitValue());
        }
      }
    }
 catch (    InterruptedException ex) {
      CloudFoundryPlugin.logError(""String_Node_Str"",ex);
    }
catch (    IOException ioe) {
    }
 finally {
      if (p != null) {
        p.destroy();
      }
    }
  }
}",0.9878934624697336
10880,"protected String getLaunchName(){
  return serviceCommand.getExternalApplicationLaunchInfo().getDisplayName();
}","protected String getLaunchName(){
  return serviceCommand.getExternalApplication().getDisplayName();
}",0.9532710280373832
10881,"protected boolean addExternalToolCommand(List<String> processCommands) throws IOException {
  String appOptions=serviceCommand.getOptions() != null ? serviceCommand.getOptions().getOptions() : null;
  if (Platform.OS_MACOSX.equals(PlatformUtil.getOS())) {
    StringWriter optionsWr=new StringWriter();
    optionsWr.append(serviceCommand.getExternalApplicationLaunchInfo().getExecutableName());
    if (appOptions != null) {
      optionsWr.append(' ');
      optionsWr.append(appOptions);
    }
    File scriptFile=getScriptFile(optionsWr.toString());
    if (scriptFile != null && scriptFile.exists()) {
      processCommands.add(scriptFile.getAbsolutePath());
      return true;
    }
  }
 else {
    processCommands.add(serviceCommand.getExternalApplicationLaunchInfo().getExecutableName());
    if (appOptions != null) {
      processCommands.add(appOptions);
    }
    return true;
  }
  return false;
}","protected boolean addExternalToolCommand(List<String> processCommands) throws IOException {
  String appOptions=serviceCommand.getOptions() != null ? serviceCommand.getOptions().getOptions() : null;
  if (Platform.OS_MACOSX.equals(PlatformUtil.getOS())) {
    StringWriter optionsWr=new StringWriter();
    optionsWr.append(serviceCommand.getExternalApplication().getExecutableNameAndPath());
    if (appOptions != null) {
      optionsWr.append(' ');
      optionsWr.append(appOptions);
    }
    File scriptFile=getScriptFile(optionsWr.toString());
    if (scriptFile != null && scriptFile.exists()) {
      processCommands.add(scriptFile.getAbsolutePath());
      return true;
    }
  }
 else {
    processCommands.add(serviceCommand.getExternalApplication().getExecutableNameAndPath());
    if (appOptions != null) {
      processCommands.add(appOptions);
    }
    return true;
  }
  return false;
}",0.9812568908489526
10882,"public static void setOptionVariableValues(ServiceCommand serviceCommand,Map<String,String> variableToValueMap){
  CommandOptions commandOptions=serviceCommand.getOptions();
  if (commandOptions == null || commandOptions.getOptions() == null) {
    return;
  }
  String options=commandOptions.getOptions();
  StringBuffer variableBuffer=null;
  StringBuffer resolvedOptions=new StringBuffer(options);
  int dollarSignIndex=-1;
  for (int i=0; i < resolvedOptions.length(); i++) {
    if (resolvedOptions.charAt(i) == '$') {
      dollarSignIndex=i;
      variableBuffer=new StringBuffer();
    }
 else     if ((Character.isSpaceChar(resolvedOptions.charAt(i)) || i == resolvedOptions.length() - 1) && variableBuffer != null) {
      if (!Character.isSpaceChar(resolvedOptions.charAt(i))) {
        variableBuffer.append(resolvedOptions.charAt(i));
      }
      if (variableBuffer.length() > 0) {
        String variable=variableBuffer.toString();
        String value=variableToValueMap.get(variable);
        int endingIndex=dollarSignIndex + variable.length();
        if (value != null && dollarSignIndex >= 0 && (endingIndex < resolvedOptions.length())) {
          resolvedOptions.replace(dollarSignIndex,endingIndex,""String_Node_Str"");
          resolvedOptions.insert(dollarSignIndex,value);
        }
      }
      variableBuffer=null;
      dollarSignIndex=-1;
    }
 else     if (variableBuffer != null) {
      variableBuffer.append(resolvedOptions.charAt(i));
    }
  }
  CommandOptions resolvedOp=new CommandOptions();
  resolvedOp.setOptions(resolvedOptions.toString());
  serviceCommand.setOptions(resolvedOp);
}","public static void setOptionVariableValues(ServiceCommand serviceCommand,Map<String,String> variableToValueMap){
  CommandOptions commandOptions=serviceCommand.getOptions();
  if (commandOptions == null || commandOptions.getOptions() == null) {
    return;
  }
  String options=commandOptions.getOptions();
  StringBuffer variableBuffer=null;
  StringBuffer resolvedOptions=new StringBuffer(options);
  int dollarSignIndex=-1;
  for (int i=0; i < resolvedOptions.length(); i++) {
    if (resolvedOptions.charAt(i) == '$') {
      dollarSignIndex=i;
      variableBuffer=new StringBuffer();
    }
 else     if ((Character.isSpaceChar(resolvedOptions.charAt(i)) || i == resolvedOptions.length() - 1) && variableBuffer != null) {
      if (!Character.isSpaceChar(resolvedOptions.charAt(i))) {
        variableBuffer.append(resolvedOptions.charAt(i));
      }
      if (variableBuffer.length() > 0) {
        String variable=variableBuffer.toString();
        String value=variableToValueMap.get(variable);
        int endingIndex=dollarSignIndex + variable.length() + 1;
        if (value != null && dollarSignIndex >= 0 && (endingIndex < resolvedOptions.length())) {
          resolvedOptions.replace(dollarSignIndex,endingIndex,""String_Node_Str"");
          resolvedOptions.insert(dollarSignIndex,value);
        }
      }
      variableBuffer=null;
      dollarSignIndex=-1;
    }
 else     if (variableBuffer != null) {
      variableBuffer.append(resolvedOptions.charAt(i));
    }
  }
  CommandOptions resolvedOp=new CommandOptions();
  resolvedOp.setOptions(resolvedOptions.toString());
  serviceCommand.setOptions(resolvedOp);
}",0.9987730061349692
10883,"@Override public void widgetSelected(SelectionEvent event){
  int selectionIndex=predefinedCommands.getSelectionIndex();
  if (selectionIndex != -1) {
    setPredefinedCommand(predefined.get(selectionIndex));
  }
}","@Override public void widgetSelected(SelectionEvent event){
  int selectionIndex=predefinedCommands.getSelectionIndex();
  if (selectionIndex != -1) {
    int predefIndex=selectionIndex - 1;
    ServiceCommand value=predefIndex >= 0 && predefIndex < predefined.size() ? predefined.get(predefIndex) : null;
    setPredefinedCommand(value);
  }
}",0.6594982078853047
10884,"protected void setPredefinedCommand(ServiceCommand predefinedCommand){
  if (predefinedCommand != null) {
    displayNameVal=predefinedCommand.getExternalApplication().getDisplayName();
    if (displayNameVal != null) {
      displayName.setText(displayNameVal);
    }
    optionsVal=predefinedCommand.getOptions().getOptions() != null ? predefinedCommand.getOptions().getOptions() : null;
    if (optionsVal != null) {
      options.setText(optionsVal);
    }
    locationVal=predefinedCommand.getExternalApplication().getExecutableNameAndPath();
    if (locationVal != null) {
      locationField.setText(locationVal);
    }
  }
  validate(true);
}","protected void setPredefinedCommand(ServiceCommand predefinedCommand){
  displayNameVal=predefinedCommand != null ? predefinedCommand.getExternalApplication().getDisplayName() : ""String_Node_Str"";
  if (displayNameVal != null) {
    displayName.setText(displayNameVal);
  }
  optionsVal=predefinedCommand != null ? (predefinedCommand.getOptions().getOptions() != null ? predefinedCommand.getOptions().getOptions() : ""String_Node_Str"") : ""String_Node_Str"";
  if (optionsVal != null) {
    options.setText(optionsVal);
  }
  locationVal=predefinedCommand != null ? predefinedCommand.getExternalApplication().getExecutableNameAndPath() : ""String_Node_Str"";
  if (locationVal != null) {
    locationField.setText(locationVal);
  }
  validate(true);
}",0.7936962750716332
10885,"public Control createPart(Composite parent){
  if (shell == null) {
    shell=parent.getShell();
  }
  Composite main=new Composite(parent,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(1).applyTo(main);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(main);
  Label commandDisplayName=new Label(main,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(commandDisplayName);
  commandDisplayName.setText(""String_Node_Str"");
  displayName=new Text(main,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).applyTo(displayName);
  Label terminalLocationLabel=new Label(main,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(terminalLocationLabel);
  terminalLocationLabel.setText(""String_Node_Str"");
  terminalLocation=new Text(main,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).applyTo(terminalLocation);
  Label fileSelectionLabel=new Label(main,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(fileSelectionLabel);
  fileSelectionLabel.setText(""String_Node_Str"");
  locationField=new Text(main,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(locationField);
  Composite buttonArea=new Composite(main,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(1).applyTo(buttonArea);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(buttonArea);
  findApplicationButton=new Button(buttonArea,SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(findApplicationButton);
  findApplicationButton.setText(""String_Node_Str"");
  findApplicationButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      handleChange(event);
    }
  }
);
  displayName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      handleChange(event);
    }
  }
);
  locationField.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      handleChange(event);
    }
  }
);
  if (predefined != null && !predefined.isEmpty()) {
    Label templates=new Label(main,SWT.NONE);
    GridDataFactory.fillDefaults().grab(false,false).applyTo(templates);
    templates.setText(""String_Node_Str"");
    Composite predefinedArea=new Composite(main,SWT.NONE);
    GridLayoutFactory.fillDefaults().numColumns(1).applyTo(predefinedArea);
    GridDataFactory.fillDefaults().grab(false,false).applyTo(predefinedArea);
    predefinedCommands=new Combo(predefinedArea,SWT.BORDER | SWT.READ_ONLY);
    GridDataFactory.fillDefaults().grab(false,false).applyTo(predefinedCommands);
    predefinedCommands.setEnabled(true);
    predefinedCommands.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent event){
        int selectionIndex=predefinedCommands.getSelectionIndex();
        if (selectionIndex != -1) {
          setPredefinedCommand(predefined.get(selectionIndex));
        }
      }
    }
);
    for (    ServiceCommand option : predefined) {
      predefinedCommands.add(option.getExternalApplication().getDisplayName());
    }
  }
  Text argsLabel=new Text(main,SWT.MULTI);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(argsLabel);
  argsLabel.setText(""String_Node_Str"");
  argsLabel.setBackground(main.getBackground());
  options=new Text(main,SWT.MULTI | SWT.WRAP | SWT.BORDER);
  options.addTraverseListener(new TraverseListener(){
    public void keyTraversed(    TraverseEvent event){
      if (event.detail == SWT.TRAVERSE_RETURN && (event.stateMask & SWT.MODIFIER_MASK) != 0) {
        event.doit=true;
      }
    }
  }
);
  options.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      handleChange(event);
    }
  }
);
  GridDataFactory.fillDefaults().grab(true,true).hint(30,IDialogConstants.ENTRY_FIELD_WIDTH).applyTo(options);
  Text optionsDescription=new Text(main,SWT.MULTI | SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).hint(30,IDialogConstants.ENTRY_FIELD_WIDTH).applyTo(optionsDescription);
  optionsDescription.setEditable(false);
  optionsDescription.setText(getOptionsDescription());
  readValues();
  return main;
}","public Control createPart(Composite parent){
  if (shell == null) {
    shell=parent.getShell();
  }
  Composite main=new Composite(parent,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(1).applyTo(main);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(main);
  Label commandDisplayName=new Label(main,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(commandDisplayName);
  commandDisplayName.setText(""String_Node_Str"");
  displayName=new Text(main,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).applyTo(displayName);
  Label terminalLocationLabel=new Label(main,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(terminalLocationLabel);
  terminalLocationLabel.setText(""String_Node_Str"");
  terminalLocation=new Text(main,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).applyTo(terminalLocation);
  Label fileSelectionLabel=new Label(main,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(fileSelectionLabel);
  fileSelectionLabel.setText(""String_Node_Str"");
  locationField=new Text(main,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(locationField);
  Composite buttonArea=new Composite(main,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(1).applyTo(buttonArea);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(buttonArea);
  findApplicationButton=new Button(buttonArea,SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(findApplicationButton);
  findApplicationButton.setText(""String_Node_Str"");
  findApplicationButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      handleChange(event);
    }
  }
);
  displayName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      handleChange(event);
    }
  }
);
  locationField.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      handleChange(event);
    }
  }
);
  if (predefined != null && !predefined.isEmpty()) {
    Label templates=new Label(main,SWT.NONE);
    GridDataFactory.fillDefaults().grab(false,false).applyTo(templates);
    templates.setText(""String_Node_Str"");
    Composite predefinedArea=new Composite(main,SWT.NONE);
    GridLayoutFactory.fillDefaults().numColumns(1).applyTo(predefinedArea);
    GridDataFactory.fillDefaults().grab(false,false).applyTo(predefinedArea);
    predefinedCommands=new Combo(predefinedArea,SWT.BORDER | SWT.READ_ONLY);
    GridDataFactory.fillDefaults().grab(false,false).applyTo(predefinedCommands);
    predefinedCommands.setEnabled(true);
    predefinedCommands.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent event){
        int selectionIndex=predefinedCommands.getSelectionIndex();
        if (selectionIndex != -1) {
          int predefIndex=selectionIndex - 1;
          ServiceCommand value=predefIndex >= 0 && predefIndex < predefined.size() ? predefined.get(predefIndex) : null;
          setPredefinedCommand(value);
        }
      }
    }
);
    predefinedCommands.add(""String_Node_Str"");
    for (    ServiceCommand option : predefined) {
      predefinedCommands.add(option.getExternalApplication().getDisplayName());
    }
    predefinedCommands.select(0);
  }
  Text argsLabel=new Text(main,SWT.MULTI);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(argsLabel);
  argsLabel.setText(""String_Node_Str"");
  argsLabel.setBackground(main.getBackground());
  options=new Text(main,SWT.MULTI | SWT.WRAP | SWT.BORDER);
  options.addTraverseListener(new TraverseListener(){
    public void keyTraversed(    TraverseEvent event){
      if (event.detail == SWT.TRAVERSE_RETURN && (event.stateMask & SWT.MODIFIER_MASK) != 0) {
        event.doit=true;
      }
    }
  }
);
  options.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      handleChange(event);
    }
  }
);
  GridDataFactory.fillDefaults().grab(true,true).hint(30,IDialogConstants.ENTRY_FIELD_WIDTH).applyTo(options);
  Text optionsDescription=new Text(main,SWT.MULTI | SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).hint(30,IDialogConstants.ENTRY_FIELD_WIDTH).applyTo(optionsDescription);
  optionsDescription.setEditable(false);
  optionsDescription.setText(getOptionsDescription());
  readValues();
  return main;
}",0.9614632462901184
10886,"public void handleChange(PartChangeEvent event){
  if (event != null) {
    partStatus=event.getStatus();
    if (partStatus == null || partStatus.isOK()) {
      setErrorMessage(null);
      setPageComplete(true);
    }
 else {
      if (ValueValidationUtil.isEmpty(partStatus.getMessage())) {
        setErrorMessage(null);
        setPageComplete(false);
      }
 else {
        setErrorMessage(partStatus.getMessage());
      }
    }
  }
}","public void handleChange(PartChangeEvent event){
  if (event != null) {
    partStatus=event.getStatus();
    if (partStatus == null || partStatus.isOK()) {
      setErrorMessage(null);
      setPageComplete(true);
    }
 else {
      if (ValueValidationUtil.isEmpty(partStatus.getMessage())) {
        setErrorMessage(null);
      }
 else {
        setErrorMessage(partStatus.getMessage());
      }
      setPageComplete(false);
    }
  }
}",0.8190045248868778
10887,"public void createControl(Composite parent){
  displayPart=addNewCommand ? new AddCommandDisplayPart(service,serviceCommand) : new EditCommandDisplayPart(service,serviceCommand);
  displayPart.addPartChangeListener(new IPartChangeListener(){
    public void handleChange(    PartChangeEvent event){
      if (event != null) {
        partStatus=event.getStatus();
        if (partStatus == null || partStatus.isOK()) {
          setErrorMessage(null);
          setPageComplete(true);
        }
 else {
          if (ValueValidationUtil.isEmpty(partStatus.getMessage())) {
            setErrorMessage(null);
            setPageComplete(false);
          }
 else {
            setErrorMessage(partStatus.getMessage());
          }
        }
      }
    }
  }
);
  Control control=displayPart.createPart(parent);
  setControl(control);
}","public void createControl(Composite parent){
  displayPart=addNewCommand ? new AddCommandDisplayPart(service,serviceCommand) : new EditCommandDisplayPart(service,serviceCommand);
  displayPart.addPartChangeListener(new IPartChangeListener(){
    public void handleChange(    PartChangeEvent event){
      if (event != null) {
        partStatus=event.getStatus();
        if (partStatus == null || partStatus.isOK()) {
          setErrorMessage(null);
          setPageComplete(true);
        }
 else {
          if (ValueValidationUtil.isEmpty(partStatus.getMessage())) {
            setErrorMessage(null);
          }
 else {
            setErrorMessage(partStatus.getMessage());
          }
          setPageComplete(false);
        }
      }
    }
  }
);
  Control control=displayPart.createPart(parent);
  setControl(control);
}",0.7877697841726619
10888,"public static File createTemporaryFile(String folderName,String fileName) throws IOException {
  File tempFolder=File.createTempFile(folderName,null);
  tempFolder.delete();
  tempFolder.mkdirs();
  tempFolder.setExecutable(true);
  File targetFile=new File(tempFolder,fileName);
  targetFile.delete();
  targetFile.createNewFile();
  targetFile.setExecutable(true);
  targetFile.setWritable(true);
  return targetFile;
}","/** 
 * Creates a temporary folder and file with the given names. It is the responsibility of the caller to properly dispose the folder and file after it is created
 * @param folderName
 * @param fileName
 * @return
 * @throws IOException
 */
public static File createTemporaryFile(String folderName,String fileName) throws IOException {
  File tempFolder=File.createTempFile(folderName,null);
  tempFolder.delete();
  tempFolder.mkdirs();
  tempFolder.setExecutable(true);
  File targetFile=new File(tempFolder,fileName);
  targetFile.delete();
  targetFile.createNewFile();
  targetFile.setExecutable(true);
  targetFile.setWritable(true);
  return targetFile;
}",0.2599078341013824
10889,"public static void setOptionVariableValues(ServiceCommand serviceCommand,Map<String,String> variableToValueMap){
  CommandOptions commandOptions=serviceCommand.getOptions();
  if (commandOptions == null || commandOptions.getOptions() == null) {
    return;
  }
  String options=commandOptions.getOptions();
  StringBuffer variableBuffer=null;
  StringBuffer resolvedOptions=new StringBuffer(options);
  int dollarSignIndex=-1;
  for (int i=0; i < resolvedOptions.length(); i++) {
    if (resolvedOptions.charAt(i) == '$') {
      dollarSignIndex=i;
      variableBuffer=new StringBuffer();
    }
 else     if ((resolvedOptions.charAt(i) == '}' || i == resolvedOptions.length() - 1) && variableBuffer != null) {
      if (variableBuffer.length() > 0) {
        String variable=variableBuffer.toString();
        String value=variableToValueMap.get(variable);
        int endingIndex=i + 1;
        if (value != null && dollarSignIndex >= 0 && (endingIndex <= resolvedOptions.length())) {
          resolvedOptions.replace(dollarSignIndex,endingIndex,""String_Node_Str"");
          resolvedOptions.insert(dollarSignIndex,value);
        }
      }
      variableBuffer=null;
      dollarSignIndex=-1;
    }
 else     if (variableBuffer != null && resolvedOptions.charAt(i) != '{') {
      variableBuffer.append(resolvedOptions.charAt(i));
    }
  }
  CommandOptions resolvedOp=new CommandOptions();
  resolvedOp.setOptions(resolvedOptions.toString());
  serviceCommand.setOptions(resolvedOp);
}","public static void setOptionVariableValues(ServiceCommand serviceCommand,Map<String,String> variableToValueMap){
  CommandOptions commandOptions=serviceCommand.getOptions();
  if (commandOptions == null || commandOptions.getOptions() == null) {
    return;
  }
  String options=commandOptions.getOptions();
  StringBuffer variableBuffer=null;
  StringBuffer resolvedOptions=new StringBuffer(options);
  int dollarSignIndex=-1;
  for (int i=0; i < resolvedOptions.length(); ) {
    boolean inserted=false;
    if (resolvedOptions.charAt(i) == '$') {
      dollarSignIndex=i;
      variableBuffer=new StringBuffer();
    }
 else     if ((resolvedOptions.charAt(i) == '}' || i == resolvedOptions.length() - 1) && variableBuffer != null) {
      if (variableBuffer.length() > 0) {
        String variable=variableBuffer.toString();
        String value=variableToValueMap.get(variable);
        int endingIndex=i + 1;
        if (value != null && dollarSignIndex >= 0 && (endingIndex <= resolvedOptions.length())) {
          resolvedOptions.replace(dollarSignIndex,endingIndex,""String_Node_Str"");
          resolvedOptions.insert(dollarSignIndex,value);
          i=dollarSignIndex + value.length();
          inserted=true;
        }
      }
      variableBuffer=null;
      dollarSignIndex=-1;
    }
 else     if (variableBuffer != null && resolvedOptions.charAt(i) != '{') {
      variableBuffer.append(resolvedOptions.charAt(i));
    }
    if (!inserted) {
      i++;
    }
  }
  CommandOptions resolvedOp=new CommandOptions();
  resolvedOp.setOptions(resolvedOptions.toString());
  serviceCommand.setOptions(resolvedOp);
}",0.9550417469492614
10890,"protected File getScriptFile() throws IOException {
  File scriptFile=getTempScriptFile();
  if (scriptFile != null && scriptFile.exists()) {
    StringWriter options=new StringWriter();
    options.append(serviceCommand.getExternalApplicationLaunchInfo().getExecutableName());
    String appOptions=ServiceCommand.getSerialisedOptions(serviceCommand);
    if (appOptions != null) {
      options.append(' ');
      options.append(appOptions);
    }
    FileOutputStream outStream=null;
    try {
      outStream=new FileOutputStream(scriptFile);
      OutputStreamWriter outWriter=new OutputStreamWriter(outStream);
      BufferedWriter writer=new BufferedWriter(outWriter);
      writer.write(options.toString());
      writer.flush();
      if (!changePermission(scriptFile)) {
        CloudFoundryPlugin.logError(""String_Node_Str"" + scriptFile.getAbsolutePath() + ""String_Node_Str"");
        return null;
      }
    }
 catch (    IOException e) {
      CloudFoundryPlugin.logError(e);
    }
 finally {
      if (outStream != null) {
        IOUtils.closeQuietly(outStream);
      }
    }
  }
  return scriptFile;
}","protected File getScriptFile(String options) throws IOException {
  if (options == null || options.length() == 0) {
    return null;
  }
  File scriptFile=getTempScriptFile();
  if (scriptFile != null && scriptFile.exists()) {
    FileOutputStream outStream=null;
    try {
      outStream=new FileOutputStream(scriptFile);
      OutputStreamWriter outWriter=new OutputStreamWriter(outStream);
      BufferedWriter writer=new BufferedWriter(outWriter);
      writer.write(options);
      writer.flush();
      if (!changePermission(scriptFile)) {
        CloudFoundryPlugin.logError(""String_Node_Str"" + scriptFile.getAbsolutePath() + ""String_Node_Str"");
        return null;
      }
    }
 catch (    IOException e) {
      CloudFoundryPlugin.logError(e);
    }
 finally {
      if (outStream != null) {
        IOUtils.closeQuietly(outStream);
      }
    }
  }
  return scriptFile;
}",0.7984031936127745
10891,"protected boolean addExternalToolCommand(List<String> processCommands) throws IOException {
  if (Platform.OS_MACOSX.equals(PlatformUtil.getOS())) {
    File scriptFile=getScriptFile();
    if (scriptFile != null && scriptFile.exists()) {
      processCommands.add(scriptFile.getAbsolutePath());
      return true;
    }
  }
 else {
    processCommands.add(serviceCommand.getExternalApplicationLaunchInfo().getExecutableName());
    if (serviceCommand.getOptions() != null) {
      for (      CommandOption option : serviceCommand.getOptions()) {
        processCommands.add(option.getOption());
      }
    }
    return true;
  }
  return false;
}","protected boolean addExternalToolCommand(List<String> processCommands) throws IOException {
  String appOptions=serviceCommand.getOptions() != null ? serviceCommand.getOptions().getOptions() : null;
  if (Platform.OS_MACOSX.equals(PlatformUtil.getOS())) {
    StringWriter optionsWr=new StringWriter();
    optionsWr.append(serviceCommand.getExternalApplicationLaunchInfo().getExecutableName());
    if (appOptions != null) {
      optionsWr.append(' ');
      optionsWr.append(appOptions);
    }
    File scriptFile=getScriptFile(optionsWr.toString());
    if (scriptFile != null && scriptFile.exists()) {
      processCommands.add(scriptFile.getAbsolutePath());
      return true;
    }
  }
 else {
    processCommands.add(serviceCommand.getExternalApplicationLaunchInfo().getExecutableName());
    if (appOptions != null) {
      processCommands.add(appOptions);
    }
    return true;
  }
  return false;
}",0.5250320924261874
10892,"public void setOptions(List<CommandOption> options){
  this.options=options;
}","public void setOptions(CommandOptions options){
  this.options=options;
}",0.9536423841059604
10893,"/** 
 * @return a copy of the options, or null if no options are set
 */
public List<CommandOption> getOptions(){
  return options != null ? new ArrayList<CommandOption>(options) : null;
}","public CommandOptions getOptions(){
  return options;
}",0.4444444444444444
10894,"public static boolean isOptionValueSet(CommandOption option){
  return option.getValue() != null && option.getValue().trim().startsWith(""String_Node_Str"");
}","public static boolean isOptionValueSet(CommandOption option){
  return option.getValue() != null && !option.getValue().trim().startsWith(""String_Node_Str"");
}",0.9968253968253968
10895,"public CommandDisplayPart(ServiceCommand serviceCommand){
  this.serviceCommand=serviceCommand;
}","public CommandDisplayPart(ServiceCommand serviceCommand){
  this.serviceCommand=serviceCommand != null ? serviceCommand : new ServiceCommand();
}",0.8016528925619835
10896,"protected void setInitialValues(){
  if (serviceCommand != null) {
    locationVal=serviceCommand.getExternalApplicationLaunchInfo().getExecutableName();
    if (locationVal != null) {
      locationField.setText(locationVal);
    }
    displayNameVal=serviceCommand.getExternalApplicationLaunchInfo().getDisplayName();
    if (displayNameVal != null) {
      displayName.setText(displayNameVal);
    }
    optionsVal=ServiceCommand.getSerialisedOptions(serviceCommand);
    if (optionsVal != null) {
      options.setText(optionsVal);
    }
    terminalLocationVal=serviceCommand.getCommandTerminal() != null ? serviceCommand.getCommandTerminal().getTerminalLaunchCommand() : null;
    if (terminalLocationVal != null) {
      terminalLocation.setText(terminalLocationVal);
    }
  }
}","protected void setInitialValues(){
  if (serviceCommand != null) {
    locationVal=serviceCommand.getExternalApplicationLaunchInfo().getExecutableName();
    if (locationVal != null) {
      locationField.setText(locationVal);
    }
    displayNameVal=serviceCommand.getExternalApplicationLaunchInfo().getDisplayName();
    if (displayNameVal != null) {
      displayName.setText(displayNameVal);
    }
    optionsVal=ServiceCommand.getSerialisedOptions(serviceCommand);
    if (optionsVal != null) {
      options.setText(optionsVal);
    }
    if (serviceCommand.getCommandTerminal() != null) {
      terminalLocationVal=serviceCommand.getCommandTerminal().getTerminalLaunchCommand();
      if (terminalLocationVal != null) {
        terminalLocation.setText(terminalLocationVal);
      }
    }
  }
}",0.7984886649874056
10897,"public void modifyText(ModifyEvent event){
  option.setValue(text.getText());
  notifyChange(new PartChangeEvent(option,Status.OK_STATUS));
}","public void modifyText(ModifyEvent event){
  option.setValue(text.getText());
  validate();
}",0.7435897435897436
10898,"protected void createOptionLabel(final CommandOption option,Composite parent){
  Label serverLabel=new Label(parent,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(serverLabel);
  serverLabel.setText(option.getOption() + ""String_Node_Str"");
  final Text text=new Text(parent,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(text);
  text.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      option.setValue(text.getText());
      notifyChange(new PartChangeEvent(option,Status.OK_STATUS));
    }
  }
);
}","protected void createOptionLabel(final CommandOption option,Composite parent){
  Label serverLabel=new Label(parent,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(serverLabel);
  serverLabel.setText(option.getOption() + ""String_Node_Str"");
  final Text text=new Text(parent,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(text);
  text.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      option.setValue(text.getText());
      validate();
    }
  }
);
}",0.9419014084507042
10899,"public ServiceCommand getServiceCommand(){
  if (displayPart != null) {
    String location=displayPart.getLocation();
    String options=displayPart.getOptions();
    String displayName=displayPart.getDisplayName();
    String terminalLocation=displayPart.getTerminalLocation();
    ServiceCommand editedCommand=new ServiceCommand();
    if (terminalLocation != null) {
      CommandTerminal terminal=new CommandTerminal();
      terminal.setTerminalLaunchCommand(terminalLocation);
      editedCommand.setCommandTerminal(terminal);
    }
    ExternalApplicationLaunchInfo appInfo=new ExternalApplicationLaunchInfo();
    appInfo.setDisplayName(displayName);
    appInfo.setExecutableName(location);
    editedCommand.setExternalApplicationLaunchInfo(appInfo);
    ServiceCommand.covertToOptions(editedCommand,options);
    serviceCommand=editedCommand;
  }
  return serviceCommand;
}","public ServiceCommand getServiceCommand(){
  if (displayPart != null) {
    serviceCommand=displayPart.getServiceCommand();
  }
  return serviceCommand;
}",0.2752646775745909
10900,"public void handleChange(PartChangeEvent event){
  CommandOption firstUnsetOption=getFirstUnsetOption();
  if (firstUnsetOption != null) {
    setErrorMessage(""String_Node_Str"" + firstUnsetOption.getOption());
    setPageComplete(false);
  }
 else {
    setErrorMessage(null);
  }
}","public void handleChange(PartChangeEvent event){
  status=event.getStatus();
  if (status != null && !status.isOK()) {
    setErrorMessage(status.getMessage());
    setPageComplete(false);
  }
 else {
    setErrorMessage(null);
    setPageComplete(true);
  }
}",0.6088560885608856
10901,"public boolean isPageComplete(){
  return getFirstUnsetOption() == null;
}","public boolean isPageComplete(){
  return status == null || status.isOK();
}",0.7466666666666667
10902,"public void createControl(Composite parent){
  IWizard wizard=getWizard();
  unsetOptions=(wizard instanceof UnsetOptionsWizard) ? ((UnsetOptionsWizard)wizard).getCommandOptions() : null;
  UnsetOptionsPart part=new UnsetOptionsPart(unsetOptions);
  part.addPartChangeListener(new IPartChangeListener(){
    public void handleChange(    PartChangeEvent event){
      CommandOption firstUnsetOption=getFirstUnsetOption();
      if (firstUnsetOption != null) {
        setErrorMessage(""String_Node_Str"" + firstUnsetOption.getOption());
        setPageComplete(false);
      }
 else {
        setErrorMessage(null);
      }
    }
  }
);
  Control control=part.createControl(parent);
  setControl(control);
}","public void createControl(Composite parent){
  IWizard wizard=getWizard();
  unsetOptions=(wizard instanceof UnsetOptionsWizard) ? ((UnsetOptionsWizard)wizard).getCommandOptions() : null;
  UnsetOptionsPart part=new UnsetOptionsPart(unsetOptions);
  part.addPartChangeListener(new IPartChangeListener(){
    public void handleChange(    PartChangeEvent event){
      status=event.getStatus();
      if (status != null && !status.isOK()) {
        setErrorMessage(status.getMessage());
        setPageComplete(false);
      }
 else {
        setErrorMessage(null);
        setPageComplete(true);
      }
    }
  }
);
  Control control=part.createControl(parent);
  setControl(control);
}",0.7568345323741007
10903,"protected boolean isValidDescriptor(DeploymentDescriptor descriptor){
  if (descriptor == null) {
    return false;
  }
  if (descriptor.deploymentMode == null) {
    return false;
  }
  ApplicationInfo info=descriptor.applicationInfo;
  if (info == null || info.getAppName() == null || info.getFramework() == null) {
    return false;
  }
  DeploymentInfo deploymentInfo=descriptor.deploymentInfo;
  if (deploymentInfo == null || deploymentInfo.getDeploymentName() == null || ((descriptor.staging == null || !CloudApplication.STANDALONE.equals(descriptor.staging.getFramework())) && (deploymentInfo.getUris() == null || deploymentInfo.getUris().isEmpty()))) {
    return false;
  }
  return true;
}","protected boolean isValidDescriptor(DeploymentDescriptor descriptor){
  if (descriptor == null || descriptor.deploymentMode == null) {
    return false;
  }
  ApplicationInfo info=descriptor.applicationInfo;
  if (info == null || info.getAppName() == null || info.getFramework() == null) {
    return false;
  }
  DeploymentInfo deploymentInfo=descriptor.deploymentInfo;
  if (deploymentInfo == null || deploymentInfo.getDeploymentName() == null || deploymentInfo.getMemory() <= 0 || ((descriptor.staging == null || !CloudApplication.STANDALONE.equals(descriptor.staging.getFramework())) && (deploymentInfo.getUris() == null || deploymentInfo.getUris().isEmpty()))) {
    return false;
  }
  return true;
}",0.498220640569395
10904,"public void republish(IProgressMonitor monitor) throws CoreException {
  IProject project=getProject(appModule);
  boolean republished=false;
  if (project != null) {
    DeploymentDescriptor descriptor=getUpdatedDescriptor(monitor);
    if (descriptor != null) {
      IServer server=cloudServer.getServer();
      IModule[] modules=ServerUtil.getModules(project);
      if (modules != null && modules.length == 1) {
        IModule[] add=null;
        if (!ServerUtil.containsModule(server,modules[0],monitor)) {
          add=new IModule[]{modules[0]};
        }
 else {
          IServerWorkingCopy wc=server.createWorkingCopy();
          wc.modifyModules(null,modules,monitor);
          wc.save(false,null);
          modules=ServerUtil.getModules(project);
          if (modules != null && modules.length == 1) {
            add=new IModule[]{modules[0]};
          }
        }
        if (add != null && add.length > 0) {
          IServerWorkingCopy wc=server.createWorkingCopy();
          wc=server.createWorkingCopy();
          IStatus status=wc.canModifyModules(add,null,null);
          if (status.getSeverity() != IStatus.ERROR) {
            CloudFoundryPlugin.getModuleCache().getData(wc.getOriginal()).tagForAutomaticRepublish(new RepublishModule(add[0],descriptor));
            wc.modifyModules(add,null,monitor);
            wc.save(false,null);
            republished=true;
          }
 else {
            throw new CoreException(status);
          }
        }
      }
    }
  }
  if (!republished) {
    throw new CoreException(CloudFoundryPlugin.getErrorStatus(""String_Node_Str"" + appModule.getApplicationId() + ""String_Node_Str""));
  }
}","public void republish(IProgressMonitor monitor) throws CoreException {
  IProject project=getProject(appModule);
  boolean republished=false;
  if (project != null) {
    DeploymentDescriptor descriptor=getUpdatedDescriptor(monitor);
    if (descriptor != null) {
      IServer server=cloudServer.getServer();
      IModule[] modules=ServerUtil.getModules(project);
      if (modules != null && modules.length == 1) {
        IModule[] add=null;
        if (!ServerUtil.containsModule(server,modules[0],monitor)) {
          add=new IModule[]{modules[0]};
        }
 else {
          IServerWorkingCopy wc=server.createWorkingCopy();
          wc.modifyModules(null,modules,monitor);
          wc.save(true,null);
          modules=ServerUtil.getModules(project);
          if (modules != null && modules.length == 1) {
            add=new IModule[]{modules[0]};
          }
        }
        if (add != null && add.length > 0) {
          IServerWorkingCopy wc=server.createWorkingCopy();
          wc=server.createWorkingCopy();
          IStatus status=wc.canModifyModules(add,null,null);
          if (status.getSeverity() != IStatus.ERROR) {
            CloudFoundryPlugin.getModuleCache().getData(wc.getOriginal()).tagForAutomaticRepublish(new RepublishModule(add[0],descriptor));
            wc.modifyModules(add,null,monitor);
            wc.save(true,null);
            republished=true;
          }
 else {
            throw new CoreException(status);
          }
        }
      }
    }
  }
  if (!republished) {
    throw new CoreException(CloudFoundryPlugin.getErrorStatus(""String_Node_Str"" + appModule.getApplicationId() + ""String_Node_Str""));
  }
}",0.9957932692307692
10905,"public DeploymentDescriptor getUpdatedDescriptor(IProgressMonitor monitor) throws CoreException {
  DeploymentDescriptor descriptor=new DeploymentDescriptor();
  ApplicationInfo appInfo=appModule.getLastApplicationInfo();
  if (appInfo == null) {
    appInfo=new ApplicationInfo(appModule.getApplicationId());
    String framework=org.cloudfoundry.ide.eclipse.internal.server.core.CloudUtil.getFramework(appModule);
    appInfo.setFramework(framework);
  }
  descriptor.applicationInfo=appInfo;
  DeploymentInfo deploymentInfo=appModule.getLastDeploymentInfo();
  if (deploymentInfo == null) {
    deploymentInfo=new DeploymentInfo();
    deploymentInfo.setMemory(512);
  }
  descriptor.deploymentInfo=deploymentInfo;
  descriptor.staging=appModule.getStaging();
  descriptor.deploymentMode=ApplicationAction.START;
  descriptor.deploymentInfo.setUris(uris);
  return descriptor;
}","public DeploymentDescriptor getUpdatedDescriptor(IProgressMonitor monitor) throws CoreException {
  DeploymentDescriptor descriptor=new DeploymentDescriptor();
  ApplicationInfo appInfo=appModule.getLastApplicationInfo();
  if (appInfo == null) {
    appInfo=new ApplicationInfo(appModule.getApplicationId());
    String framework=org.cloudfoundry.ide.eclipse.internal.server.core.CloudUtil.getFramework(appModule);
    appInfo.setFramework(framework);
  }
  descriptor.applicationInfo=appInfo;
  DeploymentInfo deploymentInfo=appModule.getLastDeploymentInfo();
  if (deploymentInfo == null) {
    deploymentInfo=new DeploymentInfo();
    deploymentInfo.setDeploymentName(appModule.getApplicationId());
    deploymentInfo.setMemory(CloudUtil.DEFAULT_MEMORY);
  }
  descriptor.deploymentInfo=deploymentInfo;
  descriptor.staging=appModule.getStaging();
  descriptor.deploymentMode=ApplicationAction.START;
  descriptor.deploymentInfo.setUris(uris);
  return descriptor;
}",0.9411129119394922
10906,"private CloudApplication doDeployApplication(CloudFoundryOperations client,final ApplicationModule appModule,final DeploymentDescriptor descriptor,IProgressMonitor monitor) throws CoreException {
  Assert.isNotNull(descriptor.applicationInfo);
  ApplicationInfo applicationInfo=descriptor.applicationInfo;
  String applicationId=applicationInfo.getAppName();
  appModule.setLastApplicationInfo(applicationInfo);
  appModule.setLastDeploymentInfo(descriptor.deploymentInfo);
  try {
    List<CloudApplication> existingApps=client.getApplications();
    boolean found=false;
    for (    CloudApplication existingApp : existingApps) {
      if (existingApp.getName().equals(applicationId)) {
        found=true;
        break;
      }
    }
    if (!found) {
      Staging staging=descriptor.staging;
      if (staging != null) {
        List<String> uris=descriptor.deploymentInfo.getUris() != null ? descriptor.deploymentInfo.getUris() : new ArrayList<String>();
        List<String> services=descriptor.deploymentInfo.getServices() != null ? descriptor.deploymentInfo.getServices() : new ArrayList<String>();
        client.createApplication(applicationId,staging,descriptor.deploymentInfo.getMemory(),uris,services);
      }
 else {
        client.createApplication(applicationId,applicationInfo.getFramework(),descriptor.deploymentInfo.getMemory(),descriptor.deploymentInfo.getUris(),descriptor.deploymentInfo.getServices());
      }
    }
    File warFile=applicationInfo.getWarFile();
    if (warFile != null) {
      client.uploadApplication(applicationId,warFile);
    }
 else {
      ApplicationArchive archive=descriptor.applicationArchive;
      if (archive instanceof ModuleResourceApplicationArchive) {
        final ModuleResourceApplicationArchive moduleArchive=(ModuleResourceApplicationArchive)archive;
        client.uploadApplication(applicationId,archive,new UploadStatusCallback(){
          public void onProcessMatchedResources(          int length){
          }
          public void onMatchedFileNames(          Set<String> matchedFileNames){
            moduleArchive.generatePartialWarFile(matchedFileNames);
          }
          public void onCheckResources(){
          }
        }
);
      }
 else {
        client.uploadApplication(applicationId,archive);
      }
    }
  }
 catch (  IOException e) {
    throw new CoreException(new Status(IStatus.ERROR,CloudFoundryPlugin.PLUGIN_ID,NLS.bind(""String_Node_Str"",applicationInfo.getWarFile()),e));
  }
  try {
    CloudApplication application=waitForUpload(client,applicationId,monitor);
    appModule.setCloudApplication(application);
    return application;
  }
 catch (  InterruptedException e) {
    throw new OperationCanceledException();
  }
}","private CloudApplication doDeployApplication(CloudFoundryOperations client,final ApplicationModule appModule,final DeploymentDescriptor descriptor,IProgressMonitor monitor) throws CoreException {
  Assert.isNotNull(descriptor.applicationInfo);
  ApplicationInfo applicationInfo=descriptor.applicationInfo;
  String applicationId=applicationInfo.getAppName();
  appModule.setLastApplicationInfo(applicationInfo);
  appModule.setLastDeploymentInfo(descriptor.deploymentInfo);
  try {
    List<CloudApplication> existingApps=client.getApplications();
    boolean found=false;
    for (    CloudApplication existingApp : existingApps) {
      if (existingApp.getName().equals(applicationId)) {
        found=true;
        break;
      }
    }
    if (!found) {
      Staging staging=descriptor.staging;
      if (staging != null) {
        List<String> uris=descriptor.deploymentInfo.getUris() != null ? descriptor.deploymentInfo.getUris() : new ArrayList<String>();
        List<String> services=descriptor.deploymentInfo.getServices() != null ? descriptor.deploymentInfo.getServices() : new ArrayList<String>();
        client.createApplication(applicationId,staging,descriptor.deploymentInfo.getMemory(),uris,services,null);
      }
 else {
        client.createApplication(applicationId,applicationInfo.getFramework(),descriptor.deploymentInfo.getMemory(),descriptor.deploymentInfo.getUris(),descriptor.deploymentInfo.getServices());
      }
    }
    File warFile=applicationInfo.getWarFile();
    if (warFile != null) {
      client.uploadApplication(applicationId,warFile);
    }
 else {
      ApplicationArchive archive=descriptor.applicationArchive;
      if (archive instanceof ModuleResourceApplicationArchive) {
        final ModuleResourceApplicationArchive moduleArchive=(ModuleResourceApplicationArchive)archive;
        client.uploadApplication(applicationId,archive,new UploadStatusCallback(){
          public void onProcessMatchedResources(          int length){
          }
          public void onMatchedFileNames(          Set<String> matchedFileNames){
            moduleArchive.generatePartialWarFile(matchedFileNames);
          }
          public void onCheckResources(){
          }
        }
);
      }
 else {
        client.uploadApplication(applicationId,archive);
      }
    }
  }
 catch (  IOException e) {
    throw new CoreException(new Status(IStatus.ERROR,CloudFoundryPlugin.PLUGIN_ID,NLS.bind(""String_Node_Str"",applicationInfo.getWarFile()),e));
  }
  try {
    CloudApplication application=waitForUpload(client,applicationId,monitor);
    appModule.setCloudApplication(application);
    return application;
  }
 catch (  InterruptedException e) {
    throw new OperationCanceledException();
  }
}",0.9990840813335776
10907,"/** 
 * Only returns a list of servers that actually have services. Skips servers with no services. Returns a new and updated copy of the servers every time it is called. Changes to the list will not be reflected until explicitly persisted using a persistence or save API.
 * @param monitor
 * @return
 * @throws CoreException
 */
public List<ExternalToolLaunchCommandsServer> getUpdatedServerServiceCommands(IProgressMonitor monitor) throws CoreException {
  List<CloudFoundryServer> cfServers=CloudServerUtil.getCloudServers();
  List<ExternalToolLaunchCommandsServer> servicesServer=new ArrayList<ExternalToolLaunchCommandsServer>();
  for (  CloudFoundryServer cfServer : cfServers) {
    ExternalToolLaunchCommandsServer server=cfServer.getUpdatedTunnelServiceCommands(monitor);
    if (server != null && server.getServices() != null && !server.getServices().isEmpty()) {
      servicesServer.add(server);
    }
  }
  return servicesServer;
}","/** 
 * Only returns a list of servers that actually have services. Skips servers with no services. Returns a new and updated copy of the servers every time it is called. Changes to the list will not be reflected until explicitly persisted using a persistence or save API. This is a synchronous operation.
 * @param monitor
 * @return
 * @throws CoreException
 */
public List<ExternalToolLaunchCommandsServer> getUpdatedServerServiceCommands(IProgressMonitor monitor) throws CoreException {
  List<CloudFoundryServer> cfServers=CloudServerUtil.getCloudServers();
  List<ExternalToolLaunchCommandsServer> servicesServer=new ArrayList<ExternalToolLaunchCommandsServer>();
  for (  CloudFoundryServer cfServer : cfServers) {
    ExternalToolLaunchCommandsServer server=cfServer.getUpdatedTunnelServiceCommands(monitor);
    if (server != null && server.getServices() != null && !server.getServices().isEmpty()) {
      servicesServer.add(server);
    }
  }
  return servicesServer;
}",0.98287493513233
10908,"private void fillServicesContextMenu(IMenuManager manager){
  IStructuredSelection selection=(IStructuredSelection)servicesViewer.getSelection();
  if (selection.isEmpty()) {
    return;
  }
  manager.add(new DeleteServicesAction(selection,cloudServer.getBehaviour(),editorPage));
  List<IAction> caldecottAction=new TunnelActionProvider(cloudServer).getCaldecottActions(selection,editorPage);
  for (  IAction action : caldecottAction) {
    manager.add(action);
  }
}","private void fillServicesContextMenu(IMenuManager manager){
  IStructuredSelection selection=(IStructuredSelection)servicesViewer.getSelection();
  if (selection.isEmpty()) {
    return;
  }
  manager.add(new DeleteServicesAction(selection,cloudServer.getBehaviour(),editorPage));
  List<IAction> caldecottAction=new TunnelActionProvider(cloudServer).getTunnelActions(selection,editorPage);
  for (  IAction action : caldecottAction) {
    manager.add(action);
  }
}",0.983957219251337
10909,"protected ExternalToolsCommandWizardPage(List<ExternalToolLaunchCommandsServer> actualServers,CloudFoundryServer cloudServer){
  super(""String_Node_Str"");
  setTitle(""String_Node_Str"");
  setDescription(""String_Node_Str"");
  ImageDescriptor banner=CloudFoundryImages.getWizardBanner(cloudServer.getServer().getServerType().getId());
  if (banner != null) {
    setImageDescriptor(banner);
  }
}","protected ExternalToolsCommandWizardPage(List<ExternalToolLaunchCommandsServer> originalServer,CloudFoundryServer cloudServer){
  super(""String_Node_Str"");
  setTitle(""String_Node_Str"");
  setDescription(""String_Node_Str"");
  ImageDescriptor banner=CloudFoundryImages.getWizardBanner(cloudServer.getServer().getServerType().getId());
  if (banner != null) {
    setImageDescriptor(banner);
  }
  this.originalServer=originalServer;
}",0.9214026602176542
10910,"protected void setServerInput(){
  if (serversToUpdate == null) {
    serversToUpdate=new ArrayList<ExternalToolLaunchCommandsServer>();
  }
  serversViewer.setInput(serversToUpdate);
  setServiceCommandInput(null);
  setStatus(null);
}","protected void setServerInput(){
  if (serversToUpdate == null) {
    serversToUpdate=new ArrayList<ExternalToolLaunchCommandsServer>();
  }
  serversViewer.setInput(serversToUpdate.toArray());
  serversViewer.setExpandedElements(serversToUpdate.toArray());
  setServiceCommandInput(null);
  setStatus(null);
}",0.8644688644688645
10911,"public Composite createControl(Composite parent){
  derivedShell=parent.getShell();
  Label serverLabel=new Label(parent,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).applyTo(serverLabel);
  serverLabel.setText(""String_Node_Str"");
  Composite generalArea=new Composite(parent,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(2).applyTo(generalArea);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(generalArea);
  createViewerArea(generalArea);
  createButtonAreas(generalArea);
  setServerInput();
  initUIState();
  return generalArea;
}","public Composite createControl(Composite parent){
  derivedShell=parent.getShell();
  Composite generalArea=new Composite(parent,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(2).applyTo(generalArea);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(generalArea);
  Label serverLabel=new Label(parent,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).span(2,0).applyTo(serverLabel);
  serverLabel.setText(""String_Node_Str"");
  createViewerArea(generalArea);
  createButtonAreas(generalArea);
  setServerInput();
  initUIState();
  return generalArea;
}",0.5823223570190641
10912,"public IStatus performAction(IProgressMonitor monitor) throws CoreException {
  Job job=getJob();
  IWorkbenchSiteProgressService service=(IWorkbenchSiteProgressService)editorPage.getEditorSite().getService(IWorkbenchSiteProgressService.class);
  if (service != null) {
    service.schedule(job,0L,true);
  }
 else {
    job.schedule();
  }
  return Status.OK_STATUS;
}","@Override public IStatus performAction(IProgressMonitor monitor) throws CoreException {
  for (  String serviceName : servicesWithTunnels) {
    try {
      handler.stopAndDeleteCaldecottTunnel(serviceName,monitor);
    }
 catch (    CoreException e) {
      CloudFoundryPlugin.logError(""String_Node_Str"" + serviceName,e);
    }
  }
  return Status.OK_STATUS;
}",0.3589041095890411
10913,"@Override protected IStatus run(IProgressMonitor monitor){
  try {
    List<ExternalToolLaunchCommandsServer> originalServers=new ServiceCommandHelper().getUpdatedServerServiceCommands(monitor);
    Shell shell=getShell();
    if (shell != null) {
      ExternalToolsCommandWizard wizard=new ExternalToolsCommandWizard(originalServers,cloudServer);
      WizardDialog dialog=new WizardDialog(getShell(),wizard);
      if (dialog.open() == Window.OK) {
        List<ExternalToolLaunchCommandsServer> updatedServers=wizard.getExternalToolLaunchCommandsServer();
        try {
          new ServiceCommandHelper().saveServerServiceCommands(updatedServers,null);
        }
 catch (        CoreException e) {
          CloudFoundryPlugin.logError(e);
        }
      }
    }
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.logError(e);
  }
  return Status.OK_STATUS;
}","public void run(){
  UIJob job=getUIJob();
  IWorkbenchSiteProgressService service=(IWorkbenchSiteProgressService)editorPage.getEditorSite().getService(IWorkbenchSiteProgressService.class);
  if (service != null) {
    service.schedule(job,0L,true);
  }
 else {
    job.schedule();
  }
}",0.0708117443868739
10914,"protected Map<String,String> getTunnelInfo(final CloudFoundryOperations client,final String serviceName,IProgressMonitor monitor) throws CoreException {
  monitor.setTaskName(""String_Node_Str"");
  int ticks=5;
  long sleepTime=2000;
  Map<String,String> info=new AbstractWaitWithProgressJob<Map<String,String>>(ticks,sleepTime){
    @Override protected Map<String,String> runInWait(    IProgressMonitor monitor){
      if (client instanceof CloudFoundryClient) {
        return TunnelHelper.getTunnelServiceInfo((CloudFoundryClient)client,serviceName);
      }
      return null;
    }
  }
.run(monitor);
  if (info == null) {
    CloudFoundryPlugin.logError(""String_Node_Str"" + serviceName + ""String_Node_Str"");
  }
  return info;
}","protected Map<String,String> getTunnelInfo(final CloudFoundryOperations client,final String serviceName,IProgressMonitor monitor) throws CoreException {
  monitor.setTaskName(""String_Node_Str"");
  int attempts=10;
  long sleepTime=2000;
  Map<String,String> info=new AbstractWaitWithProgressJob<Map<String,String>>(attempts,sleepTime){
    @Override protected Map<String,String> runInWait(    IProgressMonitor monitor){
      if (client instanceof CloudFoundryClient) {
        return TunnelHelper.getTunnelServiceInfo((CloudFoundryClient)client,serviceName);
      }
      return null;
    }
    @Override protected boolean shouldRetryOnError(    Throwable t){
      return true;
    }
  }
.run(monitor);
  if (info == null) {
    CloudFoundryPlugin.logError(""String_Node_Str"" + serviceName + ""String_Node_Str"");
  }
  return info;
}",0.9240587109125716
10915,"protected String getTunnelUri(final CloudFoundryOperations client,IProgressMonitor progress) throws CoreException {
  int ticks=10;
  long sleep=3000;
  progress.setTaskName(""String_Node_Str"");
  String url=new AbstractWaitWithProgressJob<String>(ticks,sleep){
    @Override protected String runInWait(    IProgressMonitor monitor) throws CoreException {
      if (client instanceof CloudFoundryClient) {
        return TunnelHelper.getTunnelUri((CloudFoundryClient)client);
      }
      return null;
    }
  }
.run(progress);
  return url;
}","protected String getTunnelUri(final CloudFoundryOperations client,IProgressMonitor progress) throws CoreException {
  int attempts=10;
  long sleep=3000;
  progress.setTaskName(""String_Node_Str"");
  String url=new AbstractWaitWithProgressJob<String>(attempts,sleep){
    @Override protected String runInWait(    IProgressMonitor monitor) throws CoreException {
      if (client instanceof CloudFoundryClient) {
        return TunnelHelper.getTunnelUri((CloudFoundryClient)client);
      }
      return null;
    }
    protected boolean shouldRetryOnError(    Throwable t){
      return true;
    }
  }
.run(progress);
  return url;
}",0.9098639455782312
10916,"protected void updateUrlCombo(CloudURL lastAddedEditedUrl){
  String newSelection=null;
  String oldSelection=null;
  if (urlCombo.getSelectionIndex() >= 0) {
    oldSelection=urlCombo.getItem(urlCombo.getSelectionIndex());
  }
 else {
    if (cfServer != null && cfServer.getUrl() != null) {
      oldSelection=cfServer.getUrl();
    }
  }
  List<CloudURL> cloudUrls=CloudUiUtil.getAllUrls(serverTypeId);
  String[] updatedUrls=new String[cloudUrls.size()];
  if (lastAddedEditedUrl != null) {
    newSelection=lastAddedEditedUrl.getUrl();
  }
  int selectionIndex=-1;
  for (int i=0; i < cloudUrls.size(); i++) {
    String currUrl=cloudUrls.get(i).getUrl();
    updatedUrls[i]=cloudUrls.get(i).getName() + ""String_Node_Str"" + currUrl;
    if (newSelection != null && updatedUrls[i].contains(newSelection)) {
      selectionIndex=i;
    }
  }
  if ((newSelection == null || selectionIndex < 0) && oldSelection != null) {
    for (int i=0; i < updatedUrls.length; i++) {
      if (updatedUrls[i].contains(oldSelection)) {
        selectionIndex=i;
      }
    }
  }
  if (selectionIndex < 0 && cloudUrls.size() > 0) {
    selectionIndex=0;
  }
  urlCombo.setItems(updatedUrls);
  if (selectionIndex < 0) {
    urlCombo.deselectAll();
  }
 else {
    urlCombo.select(selectionIndex);
  }
  comboIndex=selectionIndex;
}","protected void updateUrlCombo(CloudURL lastAddedEditedUrl){
  String newSelection=null;
  String oldSelection=null;
  if (urlCombo.getSelectionIndex() >= 0) {
    oldSelection=urlCombo.getItem(urlCombo.getSelectionIndex());
  }
 else {
    if (cfServer != null && cfServer.getUrl() != null) {
      oldSelection=cfServer.getUrl();
    }
  }
  List<CloudURL> cloudUrls=CloudUiUtil.getAllUrls(serverTypeId);
  String[] updatedUrls=new String[cloudUrls.size()];
  if (lastAddedEditedUrl != null) {
    newSelection=getComboURLDisplay(lastAddedEditedUrl);
  }
  int selectionIndex=-1;
  for (int i=0; i < cloudUrls.size(); i++) {
    updatedUrls[i]=getComboURLDisplay(cloudUrls.get(i));
    if (newSelection != null && updatedUrls[i].equals(newSelection)) {
      selectionIndex=i;
    }
  }
  if ((newSelection == null || selectionIndex < 0) && oldSelection != null) {
    for (int i=0; i < updatedUrls.length; i++) {
      if (updatedUrls[i].contains(oldSelection)) {
        selectionIndex=i;
        break;
      }
    }
  }
  if (selectionIndex < 0 && cloudUrls.size() > 0) {
    selectionIndex=0;
  }
  urlCombo.setItems(updatedUrls);
  if (selectionIndex < 0) {
    urlCombo.deselectAll();
  }
 else {
    urlCombo.select(selectionIndex);
  }
  comboIndex=selectionIndex;
}",0.9267540478026214
10917,"public void setTunnelServiceCommands(ServicesServer server) throws CoreException {
  if (server == null) {
    return;
  }
  String json=new TunnelServiceCommandHelper().getTunnelServiceCommands(server);
  if (json == null) {
    json=""String_Node_Str"";
  }
  internalSetTunnelServiceCommands(json);
}","public void setTunnelServiceCommands(ServicesServer server) throws CoreException {
  if (server == null) {
    return;
  }
  String json=new TunnelServiceCommandHelper(this).serialiseServerServiceCommands(server);
  if (json == null) {
    json=""String_Node_Str"";
  }
  internalSetTunnelServiceCommands(json);
}",0.954248366013072
10918,"protected void internalSetTunnelServiceCommands(String commands) throws CoreException {
  setAttribute(TUNNEL_SERVICE_COMMANDS_PROPERTY,(String)null);
  if (getServerWorkingCopy() != null) {
    getServerWorkingCopy().save(true,null);
  }
}","protected void internalSetTunnelServiceCommands(String commands) throws CoreException {
  IServerWorkingCopy wc=getServer().createWorkingCopy();
  wc.setAttribute(TUNNEL_SERVICE_COMMANDS_PROPERTY,commands);
  wc.save(true,null);
}",0.6808510638297872
10919,"public ServicesServer getTunnelServiceCommands(){
  String commands=internalGetTunnelServiceCommands();
  ServicesServer server=null;
  if (commands != null) {
    return new TunnelServiceCommandHelper().getTunnelServiceCommands(commands);
  }
  return server;
}","/** 
 * Returns the commands associated with the current services in the server. Changes to services since the last command persistance are also taken into account, where new entries for new services are added, and commands for non-existing services are removed.
 * @param monitor
 * @return
 * @throws CoreException
 */
public ServicesServer getTunnelServiceCommands(IProgressMonitor monitor) throws CoreException {
  String commands=internalGetTunnelServiceCommands();
  ServicesServer server=new TunnelServiceCommandHelper(this).parseAndUpdateTunnelServiceCommands(commands,monitor);
  return server;
}",0.3875432525951557
10920,"public IStatus isValid(){
  String message=null;
  boolean isValid=true;
  if (URLNameValidation.isEmpty(url)) {
    if (!isStandAloneApp) {
      message=EMPTY_URL_ERROR;
      isValid=false;
    }
  }
 else   if (new URLNameValidation(url).hasInvalidCharacters()) {
    message=INVALID_CHARACTERS_ERROR;
    isValid=false;
  }
  if (isValid && isStandAloneApp && URLNameValidation.isEmpty(startCommand)) {
    message=INVALID_START_COMMAND;
    isValid=false;
  }
  if (!isValid) {
    return CloudFoundryPlugin.getErrorStatus(message != null ? message : ""String_Node_Str"");
  }
 else {
    return Status.OK_STATUS;
  }
}","public IStatus isValid(){
  String message=null;
  boolean isValid=true;
  if (ValueValidationUtil.isEmpty(url)) {
    if (!isStandAloneApp) {
      message=EMPTY_URL_ERROR;
      isValid=false;
    }
  }
 else   if (new URLNameValidation(url).hasInvalidCharacters()) {
    message=INVALID_CHARACTERS_ERROR;
    isValid=false;
  }
  if (isValid && isStandAloneApp && ValueValidationUtil.isEmpty(startCommand)) {
    message=INVALID_START_COMMAND;
    isValid=false;
  }
  if (!isValid) {
    return CloudFoundryPlugin.getErrorStatus(message != null ? message : ""String_Node_Str"");
  }
 else {
    return Status.OK_STATUS;
  }
}",0.9456
10921,"public boolean hasInvalidCharacters(){
  if (!isEmpty(value)) {
    Matcher matcher=VALID_CHARS.matcher(value);
    return !matcher.matches();
  }
  return true;
}","public boolean hasInvalidCharacters(){
  if (!ValueValidationUtil.isEmpty(value)) {
    Matcher matcher=VALID_CHARS.matcher(value);
    return !matcher.matches();
  }
  return true;
}",0.9421965317919077
10922,"protected String getServiceVendor(String serviceName,IProgressMonitor monitor) throws CoreException {
  List<CloudService> services=cloudServer.getBehaviour().getServices(monitor);
  if (services != null) {
    for (    CloudService service : services) {
      if (serviceName.equals(service.getName())) {
        return service.getVendor();
      }
    }
  }
  return null;
}","protected String getServiceVendor(String serviceName,IProgressMonitor monitor) throws CoreException {
  List<CloudService> services=cloudServer.getBehaviour().getServices(monitor);
  if (services != null) {
    for (    CloudService service : services) {
      if (serviceName.equals(service.getName())) {
        return cloudServer.supportsCloudSpaces() ? service.getLabel() : service.getVendor();
      }
    }
  }
  return null;
}",0.9295426452410384
10923,"public static Test suite(boolean heartbeat){
  TestSuite suite=new ManagedTestSuite(AllCloudFoundryTests.class.getName());
  if (!heartbeat) {
    suite.addTestSuite(CloudFoundryServerBehaviourTest.class);
  }
  suite.addTestSuite(ServerCredentialsStoreTest.class);
  suite.addTestSuite(CloudFoundryServerTest.class);
  suite.addTestSuite(CloudUtilTest.class);
  suite.addTestSuite(DeploymentURLTest.class);
  suite.addTestSuite(CloudFoundryServicesTest.class);
  suite.addTestSuite(CloudFoundryConsoleTest.class);
  return suite;
}","public static Test suite(boolean heartbeat){
  TestSuite suite=new ManagedTestSuite(AllCloudFoundryTests.class.getName());
  if (!heartbeat) {
    suite.addTestSuite(CloudFoundryServerBehaviourTest.class);
  }
  suite.addTestSuite(ServerCredentialsStoreTest.class);
  suite.addTestSuite(CloudFoundryServerTest.class);
  suite.addTestSuite(CloudUtilTest.class);
  suite.addTestSuite(DeploymentURLTest.class);
  suite.addTestSuite(CloudFoundryServicesTest.class);
  suite.addTestSuite(CloudFoundryConsoleTest.class);
  suite.addTestSuite(CaldecottTunnelTest.class);
  return suite;
}",0.9559748427672956
10924,"public void testConnectToNonSecureUrl() throws Exception {
  CloudFoundryClient client=CloudFoundryPlugin.getDefault().getCloudFoundryClientFactory().getCloudFoundryClient(""String_Node_Str"");
  CloudInfo cloudInfo=client.getCloudInfo();
  Assert.assertNotNull(cloudInfo);
}","public void testConnectToNonSecureUrl() throws Exception {
  CloudFoundryOperations client=CloudFoundryPlugin.getDefault().getCloudFoundryClientFactory().getCloudFoundryClient(""String_Node_Str"");
  CloudInfo cloudInfo=client.getCloudInfo();
  Assert.assertNotNull(cloudInfo);
}",0.9709090909090908
10925,"public void testConnectToSecureUrl() throws Exception {
  CloudFoundryClient client=CloudFoundryPlugin.getDefault().getCloudFoundryClientFactory().getCloudFoundryClient(""String_Node_Str"");
  CloudInfo cloudInfo=client.getCloudInfo();
  Assert.assertNotNull(cloudInfo);
}","public void testConnectToSecureUrl() throws Exception {
  CloudFoundryOperations client=CloudFoundryPlugin.getDefault().getCloudFoundryClientFactory().getCloudFoundryClient(""String_Node_Str"");
  CloudInfo cloudInfo=client.getCloudInfo();
  Assert.assertNotNull(cloudInfo);
}",0.9705882352941176
10926,"public void testDeleteModuleExternally() throws Exception {
  harness.createProjectAndAddModule(""String_Node_Str"");
  IModule[] modules=server.getModules();
  serverBehavior.deployOrStartModule(modules,true,null);
  URI uri=new URI(""String_Node_Str"" + harness.getUrl(""String_Node_Str"") + ""String_Node_Str"");
  assertEquals(""String_Node_Str"",getContent(uri));
  List<CloudApplication> applications=serverBehavior.getApplications(new NullProgressMonitor());
  boolean found=false;
  for (  CloudApplication application : applications) {
    if (application.getName().equals(""String_Node_Str"")) {
      found=true;
      break;
    }
  }
  assertTrue(found);
  CloudFoundryClient client=CloudFoundryPlugin.getDefault().getCloudFoundryClientFactory().getCloudFoundryClient(CloudFoundryTestFixture.VCLOUDLABS.getUsername(),CloudFoundryTestFixture.VCLOUDLABS.getPassword(),CloudFoundryTestFixture.VCLOUDLABS.getUrl());
  client.login();
  client.deleteApplication(""String_Node_Str"");
  serverBehavior.refreshModules(new NullProgressMonitor());
  applications=serverBehavior.getApplications(new NullProgressMonitor());
  found=false;
  for (  CloudApplication application : applications) {
    if (application.getName().equals(""String_Node_Str"")) {
      found=true;
      break;
    }
  }
  assertFalse(found);
}","public void testDeleteModuleExternally() throws Exception {
  harness.createProjectAndAddModule(""String_Node_Str"");
  IModule[] modules=server.getModules();
  serverBehavior.deployOrStartModule(modules,true,null);
  URI uri=new URI(""String_Node_Str"" + harness.getUrl(""String_Node_Str"") + ""String_Node_Str"");
  assertEquals(""String_Node_Str"",getContent(uri));
  List<CloudApplication> applications=serverBehavior.getApplications(new NullProgressMonitor());
  boolean found=false;
  for (  CloudApplication application : applications) {
    if (application.getName().equals(""String_Node_Str"")) {
      found=true;
      break;
    }
  }
  assertTrue(found);
  CloudFoundryOperations client=CloudFoundryPlugin.getDefault().getCloudFoundryClientFactory().getCloudFoundryClient(CloudFoundryTestFixture.VCLOUDLABS.getUsername(),CloudFoundryTestFixture.VCLOUDLABS.getPassword(),CloudFoundryTestFixture.VCLOUDLABS.getUrl());
  client.login();
  client.deleteApplication(""String_Node_Str"");
  serverBehavior.refreshModules(new NullProgressMonitor());
  applications=serverBehavior.getApplications(new NullProgressMonitor());
  found=false;
  for (  CloudApplication application : applications) {
    if (application.getName().equals(""String_Node_Str"")) {
      found=true;
      break;
    }
  }
  assertFalse(found);
}",0.9938837920489296
10927,"public void testStartModuleInvalidPassword() throws Exception {
  harness.createProjectAndAddModule(""String_Node_Str"");
  IModule[] modules=server.getModules();
  assertEquals(""String_Node_Str"" + Arrays.toString(modules),1,modules.length);
  int moduleState=server.getModulePublishState(modules);
  assertEquals(IServer.PUBLISH_STATE_UNKNOWN,moduleState);
  Field field=null;
  CloudFoundryClient client=null;
  Object oldValue=null;
  try {
    client=getClient();
    field=CloudFoundryClient.class.getDeclaredField(""String_Node_Str"");
    field.setAccessible(true);
    oldValue=field.get(client);
    field.set(client,""String_Node_Str"");
    client.login();
    serverBehavior.deployOrStartModule(modules,true,null);
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertEquals(""String_Node_Str"",e.getMessage());
  }
 finally {
    if (field != null && client != null && oldValue != null) {
      field.set(client,oldValue);
    }
  }
}","public void testStartModuleInvalidPassword() throws Exception {
  harness.createProjectAndAddModule(""String_Node_Str"");
  IModule[] modules=server.getModules();
  assertEquals(""String_Node_Str"" + Arrays.toString(modules),1,modules.length);
  int moduleState=server.getModulePublishState(modules);
  assertEquals(IServer.PUBLISH_STATE_UNKNOWN,moduleState);
  Field field=null;
  CloudFoundryOperations client=null;
  Object oldValue=null;
  try {
    client=getClient();
    field=CloudFoundryClient.class.getDeclaredField(""String_Node_Str"");
    field.setAccessible(true);
    oldValue=field.get(client);
    field.set(client,""String_Node_Str"");
    client.login();
    serverBehavior.deployOrStartModule(modules,true,null);
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertEquals(""String_Node_Str"",e.getMessage());
  }
 finally {
    if (field != null && client != null && oldValue != null) {
      field.set(client,oldValue);
    }
  }
}",0.99163179916318
10928,"public void testCreateApplicationInvalidProxy() throws Exception {
  getClient();
  IProxyService proxyService=CloudFoundryPlugin.getDefault().getProxyService();
  boolean systemProxiesEnabled=proxyService.isSystemProxiesEnabled();
  boolean proxiesEnabled=proxyService.isProxiesEnabled();
  IProxyData[] oldData=proxyService.getProxyData();
  try {
    proxyService.setSystemProxiesEnabled(false);
    proxyService.setProxiesEnabled(true);
    IProxyData[] data=proxyService.getProxyData();
    data[0].setHost(""String_Node_Str"");
    data[0].setPort(8080);
    proxyService.setProxyData(data);
    try {
      List<String> uris=new ArrayList<String>();
      uris.add(""String_Node_Str"");
      CloudFoundryClient client=getClient();
      client.createApplication(""String_Node_Str"",DeploymentConstants.SPRING,128,uris,new ArrayList<String>());
      fail(""String_Node_Str"");
    }
 catch (    Exception e) {
      assertTrue(""String_Node_Str"" + e,e instanceof ResourceAccessException);
      assertEquals(""String_Node_Str"",e.getCause().getMessage());
    }
  }
  finally {
    proxyService.setSystemProxiesEnabled(systemProxiesEnabled);
    proxyService.setProxiesEnabled(proxiesEnabled);
    proxyService.setProxyData(oldData);
  }
}","public void testCreateApplicationInvalidProxy() throws Exception {
  getClient();
  IProxyService proxyService=CloudFoundryPlugin.getDefault().getProxyService();
  boolean systemProxiesEnabled=proxyService.isSystemProxiesEnabled();
  boolean proxiesEnabled=proxyService.isProxiesEnabled();
  IProxyData[] oldData=proxyService.getProxyData();
  try {
    proxyService.setSystemProxiesEnabled(false);
    proxyService.setProxiesEnabled(true);
    IProxyData[] data=proxyService.getProxyData();
    data[0].setHost(""String_Node_Str"");
    data[0].setPort(8080);
    proxyService.setProxyData(data);
    try {
      List<String> uris=new ArrayList<String>();
      uris.add(""String_Node_Str"");
      CloudFoundryOperations client=getClient();
      client.createApplication(""String_Node_Str"",DeploymentConstants.SPRING,128,uris,new ArrayList<String>());
      fail(""String_Node_Str"");
    }
 catch (    Exception e) {
      assertTrue(""String_Node_Str"" + e,e instanceof ResourceAccessException);
      assertEquals(""String_Node_Str"",e.getCause().getMessage());
    }
  }
  finally {
    proxyService.setSystemProxiesEnabled(systemProxiesEnabled);
    proxyService.setProxiesEnabled(proxiesEnabled);
    proxyService.setProxyData(oldData);
  }
}",0.9935379644588044
10929,"public void testStartModuleInvalidToken() throws Exception {
  harness.createProjectAndAddModule(""String_Node_Str"");
  IModule[] modules=server.getModules();
  assertEquals(""String_Node_Str"" + Arrays.toString(modules),1,modules.length);
  int moduleState=server.getModulePublishState(modules);
  assertEquals(IServer.PUBLISH_STATE_UNKNOWN,moduleState);
  CloudFoundryClient client=getClient();
  Field field=CloudFoundryClient.class.getDeclaredField(""String_Node_Str"");
  field.setAccessible(true);
  field.set(client,""String_Node_Str"");
  serverBehavior.deployOrStartModule(modules,true,null);
  moduleState=server.getModuleState(modules);
  assertEquals(IServer.STATE_STARTED,moduleState);
  moduleState=server.getModulePublishState(modules);
  ApplicationModule appModule=cloudServer.getApplication(modules[0]);
  List<String> uris=appModule.getApplication().getUris();
  assertEquals(Collections.singletonList(harness.getUrl(""String_Node_Str"")),uris);
  URI uri=new URI(""String_Node_Str"" + harness.getUrl(""String_Node_Str"") + ""String_Node_Str"");
  assertEquals(""String_Node_Str"",getContent(uri));
}","public void testStartModuleInvalidToken() throws Exception {
  harness.createProjectAndAddModule(""String_Node_Str"");
  IModule[] modules=server.getModules();
  assertEquals(""String_Node_Str"" + Arrays.toString(modules),1,modules.length);
  int moduleState=server.getModulePublishState(modules);
  assertEquals(IServer.PUBLISH_STATE_UNKNOWN,moduleState);
  CloudFoundryOperations client=getClient();
  Field field=CloudFoundryClient.class.getDeclaredField(""String_Node_Str"");
  field.setAccessible(true);
  field.set(client,""String_Node_Str"");
  serverBehavior.deployOrStartModule(modules,true,null);
  moduleState=server.getModuleState(modules);
  assertEquals(IServer.STATE_STARTED,moduleState);
  moduleState=server.getModulePublishState(modules);
  ApplicationModule appModule=cloudServer.getApplication(modules[0]);
  List<String> uris=appModule.getApplication().getUris();
  assertEquals(Collections.singletonList(harness.getUrl(""String_Node_Str"")),uris);
  URI uri=new URI(""String_Node_Str"" + harness.getUrl(""String_Node_Str"") + ""String_Node_Str"");
  assertEquals(""String_Node_Str"",getContent(uri));
}",0.9927536231884058
10930,"public void testSetPasswordMigrateUpdatesClient() throws CoreException {
  ((ServerWorkingCopy)serverWC).setAttribute(""String_Node_Str"",""String_Node_Str"");
  ((ServerWorkingCopy)serverWC).setAttribute(""String_Node_Str"",""String_Node_Str"");
  serverWC.save(true,null);
  assertEquals(""String_Node_Str"",cloudFoundryServer.getUsername());
  assertEquals(""String_Node_Str"",cloudFoundryServer.getPassword());
  CloudFoundryServerBehaviour CloudFoundryServerBehaviour=(CloudFoundryServerBehaviour)serverWC.loadAdapter(CloudFoundryServerBehaviour.class,null);
  CloudFoundryClient client=CloudFoundryServerBehaviour.getClient();
  serverWC=server.createWorkingCopy();
  cloudFoundryServer.setPassword(""String_Node_Str"");
  cloudFoundryServer.setUsername(""String_Node_Str"");
  cloudFoundryServer.setUrl(""String_Node_Str"");
  serverWC.save(true,null);
  assertEquals(""String_Node_Str"",cloudFoundryServer.getUsername());
  assertEquals(""String_Node_Str"",cloudFoundryServer.getPassword());
  assertNotSame(""String_Node_Str"",client,CloudFoundryServerBehaviour.getClient());
}","public void testSetPasswordMigrateUpdatesClient() throws CoreException {
  ((ServerWorkingCopy)serverWC).setAttribute(""String_Node_Str"",""String_Node_Str"");
  ((ServerWorkingCopy)serverWC).setAttribute(""String_Node_Str"",""String_Node_Str"");
  serverWC.save(true,null);
  assertEquals(""String_Node_Str"",cloudFoundryServer.getUsername());
  assertEquals(""String_Node_Str"",cloudFoundryServer.getPassword());
  CloudFoundryServerBehaviour CloudFoundryServerBehaviour=(CloudFoundryServerBehaviour)serverWC.loadAdapter(CloudFoundryServerBehaviour.class,null);
  CloudFoundryOperations client=CloudFoundryServerBehaviour.getClient();
  serverWC=server.createWorkingCopy();
  cloudFoundryServer.setPassword(""String_Node_Str"");
  cloudFoundryServer.setUsername(""String_Node_Str"");
  cloudFoundryServer.setUrl(""String_Node_Str"");
  serverWC.save(true,null);
  assertEquals(""String_Node_Str"",cloudFoundryServer.getUsername());
  assertEquals(""String_Node_Str"",cloudFoundryServer.getPassword());
  assertNotSame(""String_Node_Str"",client,CloudFoundryServerBehaviour.getClient());
}",0.9924812030075189
10931,"protected void initMockedRestTemplate(String email,String password,String token,URL cloudControllerUrl) throws CoreException {
  Class<?> cls=CloudFoundryClient.class;
  Field restTemplateField;
  try {
    restTemplateField=cls.getDeclaredField(""String_Node_Str"");
    RestTemplate mockedTemplate=new MockRestTemplate(new TestConnectionDescriptor(cloudControllerUrl,email,token,password));
    restTemplateField.setAccessible(true);
    restTemplateField.set(this,mockedTemplate);
  }
 catch (  SecurityException e) {
    throw new CoreException(CloudFoundryPlugin.getErrorStatus(e));
  }
catch (  NoSuchFieldException e) {
    throw new CoreException(CloudFoundryPlugin.getErrorStatus(e));
  }
catch (  IllegalAccessException e) {
    throw new CoreException(CloudFoundryPlugin.getErrorStatus(e));
  }
}","protected void initMockedRestTemplate(String email,String password,URL cloudControllerUrl) throws CoreException {
  Class<?> cls=CloudFoundryClient.class;
  Field restTemplateField;
  try {
    restTemplateField=cls.getDeclaredField(""String_Node_Str"");
    RestTemplate mockedTemplate=new MockRestTemplate(new TestConnectionDescriptor(cloudControllerUrl,email,null,password));
    restTemplateField.setAccessible(true);
    restTemplateField.set(this,mockedTemplate);
  }
 catch (  SecurityException e) {
    throw new CoreException(CloudFoundryPlugin.getErrorStatus(e));
  }
catch (  NoSuchFieldException e) {
    throw new CoreException(CloudFoundryPlugin.getErrorStatus(e));
  }
catch (  IllegalAccessException e) {
    throw new CoreException(CloudFoundryPlugin.getErrorStatus(e));
  }
}",0.9862155388471178
10932,"public CFClientMockedRestTemplate(String email,String password,String token,URL cloudControllerUrl) throws CoreException {
  super(email,password,token,cloudControllerUrl,new RequestFactory());
  initMockedRestTemplate(email,password,token,cloudControllerUrl);
}","public CFClientMockedRestTemplate(String userName,String password,URL url) throws MalformedURLException, CoreException {
  super(new CloudCredentials(userName,password),url);
  initMockedRestTemplate(userName,password,url);
}",0.4804928131416838
10933,"@Override public boolean performFinish(){
  if (!deferServiceAddition) {
    try {
      getContainer().run(true,false,new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          try {
            cloudServer.getBehaviour().createService(new CloudService[]{page.getService()},monitor);
          }
 catch (          CoreException e) {
            throw new InvocationTargetException(e);
          }
catch (          OperationCanceledException e) {
            throw new InterruptedException();
          }
 finally {
            monitor.done();
          }
        }
      }
);
      return true;
    }
 catch (    InvocationTargetException e) {
      if (e.getCause() instanceof CoreException) {
        Status status=new Status(IStatus.ERROR,CloudFoundryPlugin.PLUGIN_ID,NLS.bind(""String_Node_Str"",cloudServer.getServer().getName(),e.getCause().getMessage()),e);
        StatusManager.getManager().handle(status,StatusManager.SHOW | StatusManager.BLOCK | StatusManager.LOG);
      }
    }
catch (    InterruptedException e) {
    }
    return false;
  }
  return true;
}","@Override public boolean performFinish(){
  if (!deferServiceAddition) {
    try {
      getContainer().run(true,false,new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          try {
            cloudServer.getBehaviour().createService(new CloudService[]{page.getService()},monitor);
          }
 catch (          CoreException e) {
            throw new InvocationTargetException(e);
          }
catch (          OperationCanceledException e) {
            throw new InterruptedException();
          }
 finally {
            monitor.done();
          }
        }
      }
);
      return true;
    }
 catch (    InvocationTargetException e) {
      if (e.getCause() != null) {
        Status status=new Status(IStatus.ERROR,CloudFoundryPlugin.PLUGIN_ID,NLS.bind(""String_Node_Str"",cloudServer.getServer().getName(),e.getCause().getMessage() != null ? e.getCause().getMessage() : e.getCause().toString()),e);
        StatusManager.getManager().handle(status,StatusManager.SHOW | StatusManager.BLOCK | StatusManager.LOG);
      }
    }
catch (    InterruptedException e) {
    }
    return false;
  }
  return true;
}",0.9608750525872948
10934,"protected String getErrorMessage(Exception exception,String url){
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  builder.append(url);
  if (exception != null && exception.getLocalizedMessage() != null) {
    builder.append(""String_Node_Str"");
    builder.append(exception.getLocalizedMessage());
  }
  return builder.toString();
}","protected String getErrorMessage(Exception exception,String url){
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  builder.append(url);
  if (exception != null) {
    String errorMessage=exception.getMessage() != null ? exception.getMessage() : exception.toString();
    if (errorMessage != null) {
      builder.append(""String_Node_Str"");
      builder.append(errorMessage);
    }
  }
  return builder.toString();
}",0.6479217603911981
10935,"protected void setSpace(String space){
  setAttribute(PROP_SPACE_ID,space);
}","public void setSpace(CloudSpace space){
  this.secureStoreDirty=true;
  if (space != null) {
    this.cloudSpace=new CloudFoundrySpace(space);
    internalSetOrg(cloudSpace.getOrgName());
    internalSetSpace(cloudSpace.getSpaceName());
  }
 else {
    internalSetOrg(null);
    internalSetSpace(null);
  }
  updateServerId();
}",0.1629629629629629
10936,"private void update(boolean clearSpaceDescriptor){
  isFinished=true;
  setWizardError(null);
  String selection=getURLSelection();
  if (CloudFoundryURLNavigation.canEnableCloudFoundryNavigation(selection)) {
    cfSignupButton.setVisible(true);
  }
 else {
    cfSignupButton.setVisible(false);
  }
  if (cloudSpaceListener != null) {
    spacesDescriptor=clearSpaceDescriptor ? null : spacesDescriptor;
    cloudSpaceListener.handleCloudSpaceSelection(spacesDescriptor);
  }
  if (folder.getSelectionIndex() == 0) {
    String message=""String_Node_Str"";
    isFinished=false;
    if (emailText.getText() == null || emailText.getText().length() == 0) {
      message=""String_Node_Str"";
    }
 else     if (passwordText.getText() == null || passwordText.getText().length() == 0) {
      message=""String_Node_Str"";
    }
 else     if (urlCombo.getSelectionIndex() < 0) {
      message=NLS.bind(""String_Node_Str"",service);
    }
 else {
      isFinished=true;
      message=NLS.bind(DEFAULT_DESCRIPTION,service);
    }
    validateButton.setEnabled(isFinished);
    registerAccountButton.setEnabled(CloudFoundryBrandingExtensionPoint.supportsRegistration(serverTypeId,urlCombo.getText()));
    setWizardDescription(message);
    if (wizardHandle != null) {
      wizardHandle.update();
    }
 else     if (getWizardContainer() != null) {
      getWizardContainer().updateButtons();
    }
  }
 else   if (folder.getSelectionIndex() == 1) {
    setWizardDescription(NLS.bind(""String_Node_Str"",service));
  }
}","private void update(boolean clearSpaceDescriptor){
  isFinished=true;
  setWizardError(null);
  String selection=getURLSelection();
  if (CloudFoundryURLNavigation.canEnableCloudFoundryNavigation(selection)) {
    cfSignupButton.setVisible(true);
  }
 else {
    cfSignupButton.setVisible(false);
  }
  if (clearSpaceDescriptor) {
    spacesDescriptor=null;
    if (cfServer != null) {
      cfServer.setSpace(null);
    }
  }
  if (cloudSpaceListener != null) {
    cloudSpaceListener.handleCloudSpaceSelection(spacesDescriptor);
  }
  if (folder.getSelectionIndex() == 0) {
    String message=""String_Node_Str"";
    isFinished=false;
    if (emailText.getText() == null || emailText.getText().length() == 0) {
      message=""String_Node_Str"";
    }
 else     if (passwordText.getText() == null || passwordText.getText().length() == 0) {
      message=""String_Node_Str"";
    }
 else     if (urlCombo.getSelectionIndex() < 0) {
      message=NLS.bind(""String_Node_Str"",service);
    }
 else {
      isFinished=true;
      message=NLS.bind(DEFAULT_DESCRIPTION,service);
    }
    validateButton.setEnabled(isFinished);
    registerAccountButton.setEnabled(CloudFoundryBrandingExtensionPoint.supportsRegistration(serverTypeId,urlCombo.getText()));
    setWizardDescription(message);
    if (wizardHandle != null) {
      wizardHandle.update();
    }
 else     if (getWizardContainer() != null) {
      getWizardContainer().updateButtons();
    }
  }
 else   if (folder.getSelectionIndex() == 1) {
    setWizardDescription(NLS.bind(""String_Node_Str"",service));
  }
}",0.9364613880742912
10937,"public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(2).spacing(10,LayoutConstants.getSpacing().y).applyTo(composite);
  Label label=new Label(composite,SWT.NONE);
  label.setText(""String_Node_Str"");
  nameText=new Text(composite,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(nameText);
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      service.setName(nameText.getText());
    }
  }
);
  bindingContext=new DataBindingContext();
  map=new WritableMap();
  WizardPageSupport.create(this,bindingContext);
  bindingContext.bindValue(SWTObservables.observeText(nameText,SWT.Modify),Observables.observeMapEntry(map,""String_Node_Str""),new UpdateValueStrategy().setAfterConvertValidator(new StringValidator()),null);
  label=new Label(composite,SWT.NONE);
  label.setText(""String_Node_Str"");
  typeCombo=new Combo(composite,SWT.READ_ONLY | SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(typeCombo);
  typeCombo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      int index=typeCombo.getSelectionIndex();
      if (index != -1) {
        ServiceConfiguration configuration=configurations.get(index);
        service.setType(configuration.getType());
        service.setVendor(configuration.getVendor());
        service.setVersion(configuration.getVersion());
      }
      refreshPlan();
    }
  }
);
  bindingContext.bindValue(SWTObservables.observeSelection(typeCombo),Observables.observeMapEntry(map,""String_Node_Str""),new UpdateValueStrategy().setAfterConvertValidator(new ComboValidator(""String_Node_Str"")),null);
  pageBook=new PageBook(composite,SWT.NONE);
  GridDataFactory.fillDefaults().grab(true,true).span(2,1).applyTo(pageBook);
  planGroup=new Group(pageBook,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(planGroup);
  planGroup.setLayout(new GridLayout());
  planGroup.setVisible(false);
  planGroup.setText(getPlanLabel());
  MultiValidator validator=new MultiValidator(){
    protected IStatus validate(){
      if (planObservable.getValue() == null) {
        return ValidationStatus.cancel(getValidationErrorMessage());
      }
      return ValidationStatus.ok();
    }
  }
;
  bindingContext.addValidationStatusProvider(validator);
  Dialog.applyDialogFont(composite);
  setControl(composite);
}","public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(2).spacing(10,LayoutConstants.getSpacing().y).applyTo(composite);
  Label label=new Label(composite,SWT.NONE);
  label.setText(""String_Node_Str"");
  nameText=new Text(composite,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(nameText);
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      service.setName(nameText.getText());
    }
  }
);
  bindingContext=new DataBindingContext();
  map=new WritableMap();
  WizardPageSupport.create(this,bindingContext);
  bindingContext.bindValue(SWTObservables.observeText(nameText,SWT.Modify),Observables.observeMapEntry(map,""String_Node_Str""),new UpdateValueStrategy().setAfterConvertValidator(new StringValidator()),null);
  label=new Label(composite,SWT.NONE);
  label.setText(""String_Node_Str"");
  typeCombo=new Combo(composite,SWT.READ_ONLY | SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(typeCombo);
  typeCombo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      int index=typeCombo.getSelectionIndex();
      if (index != -1) {
        ServiceConfiguration configuration=configurations.get(index);
        setCloudService(service,configuration);
      }
      refreshPlan();
    }
  }
);
  bindingContext.bindValue(SWTObservables.observeSelection(typeCombo),Observables.observeMapEntry(map,""String_Node_Str""),new UpdateValueStrategy().setAfterConvertValidator(new ComboValidator(""String_Node_Str"")),null);
  pageBook=new PageBook(composite,SWT.NONE);
  GridDataFactory.fillDefaults().grab(true,true).span(2,1).applyTo(pageBook);
  planGroup=new Group(pageBook,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(planGroup);
  planGroup.setLayout(new GridLayout());
  planGroup.setVisible(false);
  planGroup.setText(getPlanLabel());
  MultiValidator validator=new MultiValidator(){
    protected IStatus validate(){
      if (planObservable.getValue() == null) {
        return ValidationStatus.cancel(getValidationErrorMessage());
      }
      return ValidationStatus.ok();
    }
  }
;
  bindingContext.addValidationStatusProvider(validator);
  Dialog.applyDialogFont(composite);
  setControl(composite);
}",0.962536023054755
10938,"public void setSpace(CloudSpace space){
  this.secureStoreDirty=true;
  if (space != null) {
    this.cloudSpace=new CloudFoundrySpace(space);
    internalSetOrg(cloudSpace.getOrgName());
    internalSetSpace(cloudSpace.getSpaceName());
  }
 else {
    internalSetOrg(null);
    internalSetSpace(null);
  }
  updateServerId();
}","public void setSpace(CloudSpace space){
  this.secureStoreDirty=true;
  if (space != null) {
    this.cloudSpace=new CloudFoundrySpace(space);
    internalSetOrg(cloudSpace.getOrgName());
    internalSetSpace(cloudSpace.getSpaceName());
  }
 else {
    internalSetOrg(null);
    internalSetSpace(null);
    cloudSpace=null;
  }
  updateServerId();
}",0.9689807976366324
10939,"public static CloudSpacesDescriptor getCloudSpaceDescriptor(CloudFoundryOperations operations,IProgressMonitor monitor) throws CoreException {
  SubMonitor progress=SubMonitor.convert(monitor);
  progress.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
  boolean supportsSpaces=false;
  List<CloudSpace> actualSpaces=new ArrayList<CloudSpace>();
  try {
    supportsSpaces=operations.supportsSpaces();
    if (supportsSpaces) {
      List<CloudSpace> foundSpaces=operations.getSpaces();
      if (foundSpaces != null) {
        actualSpaces.addAll(foundSpaces);
      }
    }
    CloudSpacesDescriptor descriptor=new CloudSpacesDescriptor(actualSpaces,supportsSpaces);
    return descriptor;
  }
 catch (  RestClientException e) {
    throw CloudUtil.toCoreException(e);
  }
catch (  RuntimeException e) {
    if (e.getCause() instanceof IOException) {
      CloudFoundryPlugin.getDefault().getLog().log(new Status(IStatus.ERROR,CloudFoundryPlugin.PLUGIN_ID,""String_Node_Str"",e.getCause()));
      throw new CoreException(new Status(IStatus.ERROR,CloudFoundryPlugin.PLUGIN_ID,""String_Node_Str""));
    }
 else {
      throw e;
    }
  }
 finally {
    progress.done();
  }
}","private static CloudSpacesDescriptor getCloudSpaceDescriptor(CloudFoundryOperations operations,IProgressMonitor monitor) throws CoreException {
  SubMonitor progress=SubMonitor.convert(monitor);
  progress.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
  boolean supportsSpaces=false;
  List<CloudSpace> actualSpaces=new ArrayList<CloudSpace>();
  try {
    supportsSpaces=operations.supportsSpaces();
    if (supportsSpaces) {
      List<CloudSpace> foundSpaces=operations.getSpaces();
      if (foundSpaces != null) {
        actualSpaces.addAll(foundSpaces);
      }
    }
    CloudSpacesDescriptor descriptor=new CloudSpacesDescriptor(actualSpaces,supportsSpaces);
    return descriptor;
  }
 catch (  RuntimeException e) {
    if (e.getCause() instanceof IOException) {
      CloudFoundryPlugin.getDefault().getLog().log(new Status(IStatus.ERROR,CloudFoundryPlugin.PLUGIN_ID,""String_Node_Str"",e.getCause()));
      throw new CoreException(new Status(IStatus.ERROR,CloudFoundryPlugin.PLUGIN_ID,""String_Node_Str""));
    }
 else {
      throw e;
    }
  }
 finally {
    progress.done();
  }
}",0.9610162067455102
10940,"/** 
 * Runnable context can be null. If so, default Eclipse progress service will be used as a runnable context. Display URL should be true if the display URL is passed. If so, and attempt will be made to parse the actual URL.
 * @param userName must not be null
 * @param password must not be null
 * @param urlText must not be null. Can be either display or actual URL
 * @param displayURL true if URL is display URL
 * @param context may be optional
 * @param fork if true, an attempt will be made to get the cloud spacesasynchronously
 * @return spaces descriptor, or null if it couldn't be determined
 * @throws CoreException
 */
public static CloudSpacesDescriptor getCloudSpaces(final String userName,final String password,final String urlText,final boolean displayURL,IRunnableContext context) throws CoreException {
  try {
    final CloudSpacesDescriptor[] supportsSpaces=new CloudSpacesDescriptor[1];
    ICoreRunnable coreRunner=new ICoreRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
        String url=urlText;
        if (displayURL) {
          url=getUrlFromDisplayText(urlText);
        }
        supportsSpaces[0]=CloudSpaceServerLookup.getCloudSpaceDescriptor(new CloudCredentials(userName,password),url,monitor);
      }
    }
;
    if (context != null) {
      runForked(coreRunner,context);
    }
 else {
      runForked(coreRunner);
    }
    return supportsSpaces[0];
  }
 catch (  OperationCanceledException e) {
    new CoreException(CloudFoundryPlugin.getErrorStatus(e));
  }
  return null;
}","/** 
 * Runnable context can be null. If so, default Eclipse progress service will be used as a runnable context. Display URL should be true if the display URL is passed. If so, and attempt will be made to parse the actual URL.
 * @param userName must not be null
 * @param password must not be null
 * @param urlText must not be null. Can be either display or actual URL
 * @param displayURL true if URL is display URL
 * @param context may be optional
 * @param fork if true, an attempt will be made to get the cloud spacesasynchronously
 * @return spaces descriptor, or null if it couldn't be determined
 * @throws CoreException
 */
public static CloudSpacesDescriptor getCloudSpaces(final String userName,final String password,final String urlText,final boolean displayURL,IRunnableContext context) throws CoreException {
  try {
    final CloudSpacesDescriptor[] supportsSpaces=new CloudSpacesDescriptor[1];
    ICoreRunnable coreRunner=new ICoreRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
        String url=urlText;
        if (displayURL) {
          url=getUrlFromDisplayText(urlText);
        }
        supportsSpaces[0]=CloudSpaceServerLookup.getCloudSpaceDescriptor(new CloudCredentials(userName,password),url,monitor);
      }
    }
;
    if (context != null) {
      runForked(coreRunner,context);
    }
 else {
      runForked(coreRunner);
    }
    return supportsSpaces[0];
  }
 catch (  OperationCanceledException e) {
    throw new CoreException(CloudFoundryPlugin.getErrorStatus(e));
  }
}",0.9932627526467758
10941,"private void createExistingUserComposite(TabFolder folder){
  Composite composite=new Composite(folder,SWT.NONE);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  Composite topComposite=new Composite(composite,SWT.NONE);
  topComposite.setLayout(new GridLayout(2,false));
  topComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  Label emailLabel=new Label(topComposite,SWT.NONE);
  emailLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false));
  emailLabel.setText(""String_Node_Str"");
  emailText=new Text(topComposite,SWT.BORDER);
  emailText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  emailText.setEditable(true);
  emailText.setFocus();
  if (cfServer.getUsername() != null) {
    emailText.setText(cfServer.getUsername());
  }
  emailText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      cfServer.setUsername(emailText.getText());
      update(true);
    }
  }
);
  Label passwordLabel=new Label(topComposite,SWT.NONE);
  passwordLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false));
  passwordLabel.setText(""String_Node_Str"");
  passwordText=new Text(topComposite,SWT.PASSWORD | SWT.BORDER);
  passwordText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  passwordText.setEditable(true);
  if (cfServer.getPassword() != null) {
    passwordText.setText(cfServer.getPassword());
  }
  passwordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      cfServer.setPassword(passwordText.getText());
      update(true);
    }
  }
);
  urlWidget=new CloudUrlWidget(cfServer){
    @Override protected void setUpdatedSelectionInServer(){
      String currentServerURL=cfServer.getUrl();
      String selection=urlWidget.getURLSelection();
      String selectedURL=selection != null ? CloudUiUtil.getUrlFromDisplayText(selection) : null;
      boolean shouldClearSpaces=currentServerURL == null || !currentServerURL.equals(selectedURL);
      super.setUpdatedSelectionInServer();
      if (selection != null) {
        update(shouldClearSpaces);
      }
    }
  }
;
  urlWidget.createControls(topComposite);
  urlCombo=urlWidget.getUrlCombo();
  cfServer.setUrl(CloudUiUtil.getUrlFromDisplayText(urlCombo.getItem(urlCombo.getSelectionIndex())));
  final Composite validateComposite=new Composite(composite,SWT.NONE);
  validateComposite.setLayout(new GridLayout(3,false));
  validateComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  validateButton=new Button(validateComposite,SWT.PUSH);
  validateButton.setText(""String_Node_Str"");
  validateButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      String urlText=urlWidget.getURLSelection();
      String userName=emailText.getText();
      String password=passwordText.getText();
      String errorMsg=CloudUiUtil.validateCredentials(cfServer,userName,password,urlText,true,getRunnableContext());
      try {
        spacesDescriptor=cloudSpaceChangeListener != null ? cloudSpaceChangeListener.updateDescriptor(urlText,userName,password,getRunnableContext()) : null;
        update(false);
      }
 catch (      CoreException e) {
        CloudFoundryPlugin.logError(e);
        errorMsg=e.getLocalizedMessage();
      }
      if (errorMsg == null) {
        setWizardInformation(""String_Node_Str"");
      }
 else {
        setWizardError(errorMsg);
      }
    }
  }
);
  registerAccountButton=new Button(validateComposite,SWT.PUSH);
  registerAccountButton.setText(""String_Node_Str"");
  registerAccountButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      RegisterAccountWizard wizard=new RegisterAccountWizard(cfServer);
      WizardDialog dialog=new WizardDialog(validateComposite.getShell(),wizard);
      if (dialog.open() == Window.OK) {
        if (wizard.getEmail() != null) {
          emailText.setText(wizard.getEmail());
        }
        if (wizard.getPassword() != null) {
          passwordText.setText(wizard.getPassword());
        }
      }
    }
  }
);
  cfSignupButton=new Button(validateComposite,SWT.PUSH);
  cfSignupButton.setText(""String_Node_Str"");
  cfSignupButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      CloudFoundryURLNavigation.CF_SIGNUP_URL.navigateExternal();
    }
  }
);
  TabItem item=new TabItem(folder,SWT.NONE);
  item.setText(""String_Node_Str"");
  item.setControl(composite);
}","private void createExistingUserComposite(TabFolder folder){
  Composite composite=new Composite(folder,SWT.NONE);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  Composite topComposite=new Composite(composite,SWT.NONE);
  topComposite.setLayout(new GridLayout(2,false));
  topComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  Label emailLabel=new Label(topComposite,SWT.NONE);
  emailLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false));
  emailLabel.setText(""String_Node_Str"");
  emailText=new Text(topComposite,SWT.BORDER);
  emailText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  emailText.setEditable(true);
  emailText.setFocus();
  if (cfServer.hasValidServerData() && cfServer.getUsername() != null) {
    emailText.setText(cfServer.getUsername());
  }
  emailText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      cfServer.setUsername(emailText.getText());
      update(true);
    }
  }
);
  Label passwordLabel=new Label(topComposite,SWT.NONE);
  passwordLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false));
  passwordLabel.setText(""String_Node_Str"");
  passwordText=new Text(topComposite,SWT.PASSWORD | SWT.BORDER);
  passwordText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  passwordText.setEditable(true);
  if (cfServer.hasValidServerData() && cfServer.getPassword() != null) {
    passwordText.setText(cfServer.getPassword());
  }
  passwordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      cfServer.setPassword(passwordText.getText());
      update(true);
    }
  }
);
  urlWidget=new CloudUrlWidget(cfServer){
    @Override protected void setUpdatedSelectionInServer(){
      String currentServerURL=cfServer.getUrl();
      String selection=urlWidget.getURLSelection();
      String selectedURL=selection != null ? CloudUiUtil.getUrlFromDisplayText(selection) : null;
      boolean shouldClearSpaces=currentServerURL == null || !currentServerURL.equals(selectedURL);
      super.setUpdatedSelectionInServer();
      if (selection != null) {
        update(shouldClearSpaces);
      }
    }
  }
;
  urlWidget.createControls(topComposite);
  urlCombo=urlWidget.getUrlCombo();
  cfServer.setUrl(CloudUiUtil.getUrlFromDisplayText(urlCombo.getItem(urlCombo.getSelectionIndex())));
  final Composite validateComposite=new Composite(composite,SWT.NONE);
  validateComposite.setLayout(new GridLayout(3,false));
  validateComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  validateButton=new Button(validateComposite,SWT.PUSH);
  validateButton.setText(""String_Node_Str"");
  validateButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      String urlText=urlWidget.getURLSelection();
      String userName=emailText.getText();
      String password=passwordText.getText();
      String errorMsg=CloudUiUtil.validateCredentials(cfServer,userName,password,urlText,true,getRunnableContext());
      try {
        spacesDescriptor=cloudSpaceChangeListener != null ? cloudSpaceChangeListener.updateDescriptor(urlText,userName,password,getRunnableContext()) : null;
        update(false);
      }
 catch (      CoreException e) {
        errorMsg=e.getMessage();
      }
      if (errorMsg == null) {
        setWizardInformation(""String_Node_Str"");
      }
 else {
        setWizardError(errorMsg);
      }
    }
  }
);
  registerAccountButton=new Button(validateComposite,SWT.PUSH);
  registerAccountButton.setText(""String_Node_Str"");
  registerAccountButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      RegisterAccountWizard wizard=new RegisterAccountWizard(cfServer);
      WizardDialog dialog=new WizardDialog(validateComposite.getShell(),wizard);
      if (dialog.open() == Window.OK) {
        if (wizard.getEmail() != null) {
          emailText.setText(wizard.getEmail());
        }
        if (wizard.getPassword() != null) {
          passwordText.setText(wizard.getPassword());
        }
      }
    }
  }
);
  cfSignupButton=new Button(validateComposite,SWT.PUSH);
  cfSignupButton.setText(""String_Node_Str"");
  cfSignupButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      CloudFoundryURLNavigation.CF_SIGNUP_URL.navigateExternal();
    }
  }
);
  TabItem item=new TabItem(folder,SWT.NONE);
  item.setText(""String_Node_Str"");
  item.setControl(composite);
}",0.9875742841707186
10942,"public static Test suite(boolean heartbeat){
  TestSuite suite=new ManagedTestSuite(AllCloudFoundryTests.class.getName());
  if (!heartbeat) {
    suite.addTestSuite(CloudFoundryServerBehaviourTest.class);
  }
  suite.addTestSuite(ServerCredentialsStoreTest.class);
  suite.addTestSuite(CloudFoundryServerTest.class);
  suite.addTestSuite(CloudUtilTest.class);
  suite.addTestSuite(DeploymentURLTest.class);
  suite.addTestSuite(CloudFoundryServicesTest.class);
  suite.addTestSuite(CaldecottTunnelTest.class);
  return suite;
}","public static Test suite(boolean heartbeat){
  TestSuite suite=new ManagedTestSuite(AllCloudFoundryTests.class.getName());
  if (!heartbeat) {
    suite.addTestSuite(CloudFoundryServerBehaviourTest.class);
  }
  suite.addTestSuite(ServerCredentialsStoreTest.class);
  suite.addTestSuite(CloudFoundryServerTest.class);
  suite.addTestSuite(CloudUtilTest.class);
  suite.addTestSuite(DeploymentURLTest.class);
  suite.addTestSuite(CloudFoundryServicesTest.class);
  return suite;
}",0.9513406156901688
10943,"public synchronized void addDescriptor(CloudFoundryServer server,CaldecottTunnelDescriptor descriptor){
  String id=server.getServerId();
  Map<String,CaldecottTunnelDescriptor> descriptors=caldecottTunnels.get(id);
  if (descriptors == null) {
    descriptors=new HashMap<String,CaldecottTunnelDescriptor>();
    caldecottTunnels.put(id,descriptors);
  }
  descriptors.put(descriptor.getServiceName(),descriptor);
  usedPorts.add(descriptor.tunnelPort());
}","public synchronized void addDescriptor(CloudFoundryServer server,CaldecottTunnelDescriptor descriptor){
  String id=server.getServerId();
  Map<String,CaldecottTunnelDescriptor> descriptors=caldecottTunnels.get(id);
  if (descriptors == null) {
    descriptors=new HashMap<String,CaldecottTunnelDescriptor>();
    caldecottTunnels.put(id,descriptors);
  }
  descriptors.put(descriptor.getServiceName(),descriptor);
}",0.9519450800915332
10944,"public synchronized CaldecottTunnelDescriptor startCaldecottTunnel(final String serviceName,final IProgressMonitor monitor) throws CoreException {
  final List<CaldecottTunnelDescriptor> tunnel=new ArrayList<CaldecottTunnelDescriptor>(1);
  cloudServer.getBehaviour().new Request<CaldecottTunnelDescriptor>(){
    @Override protected CaldecottTunnelDescriptor doRun(    final CloudFoundryClient client,    SubMonitor progress) throws CoreException {
      progress=SubMonitor.convert(progress);
      CloudApplication caldecottApp=getOrDeployCaldecottApp(progress);
      if (caldecottApp == null) {
        return null;
      }
      progress.setTaskName(""String_Node_Str"" + serviceName + ""String_Node_Str"");
      bindServiceToCaldecottApp(serviceName,progress);
      startCaldecottApp(progress,client);
      int unusedPort=CloudFoundryPlugin.getCaldecottTunnelCache().getUnusedPort();
      CaldecottTunnelDescriptor oldDescriptor=CloudFoundryPlugin.getCaldecottTunnelCache().getDescriptor(cloudServer,serviceName);
      if (oldDescriptor != null) {
        try {
          stopCaldecottTunnel(serviceName);
        }
 catch (        CoreException e) {
          CloudFoundryPlugin.logError(NLS.bind(""String_Node_Str"",new Object[]{serviceName,oldDescriptor.tunnelPort(),unusedPort}));
        }
      }
      InetSocketAddress local=new InetSocketAddress(LOCAL_HOST,unusedPort);
      String url=getTunnelUri(client,progress);
      Map<String,String> info=getTunnelInfo(client,serviceName,progress);
      if (info == null) {
        CloudFoundryPlugin.logError(NLS.bind(""String_Node_Str"",new Object[]{serviceName,unusedPort}));
        return null;
      }
      String host=info.get(""String_Node_Str"");
      int port=Integer.valueOf(info.get(""String_Node_Str""));
      String auth=TunnelHelper.getTunnelAuth(client);
      String serviceUserName=info.get(""String_Node_Str"");
      String servicePassword=info.get(""String_Node_Str"");
      String dataBase=getServiceVendor(serviceName,progress);
      String name=info.get(""String_Node_Str"");
      if (name == null) {
        name=info.get(""String_Node_Str"") != null ? info.get(""String_Node_Str"") : info.get(""String_Node_Str"");
      }
      TunnelServer tunnelServer=new TunnelServer(local,new HttpTunnelFactory(url,host,port,auth),getTunnelServerThreadExecutor());
      progress.setTaskName(""String_Node_Str"" + serviceName);
      tunnelServer.start();
      if (oldDescriptor != null) {
        CloudFoundryPlugin.getCaldecottTunnelCache().removeDescriptor(cloudServer,serviceName);
      }
      CaldecottTunnelDescriptor descriptor=new CaldecottTunnelDescriptor(serviceUserName,servicePassword,name,serviceName,dataBase,tunnelServer,unusedPort);
      CloudFoundryPlugin.getCaldecottTunnelCache().addDescriptor(cloudServer,descriptor);
      tunnel.add(descriptor);
      CloudFoundryCallback callBack=CloudFoundryPlugin.getCallback();
      List<CaldecottTunnelDescriptor> descriptors=new ArrayList<CaldecottTunnelDescriptor>();
      descriptors.add(descriptor);
      callBack.displayCaldecottTunnelConnections(cloudServer,descriptors);
      return descriptor;
    }
  }
.run(monitor);
  return tunnel.size() > 0 ? tunnel.get(0) : null;
}","public synchronized CaldecottTunnelDescriptor startCaldecottTunnel(final String serviceName,final IProgressMonitor monitor) throws CoreException {
  final List<CaldecottTunnelDescriptor> tunnel=new ArrayList<CaldecottTunnelDescriptor>(1);
  cloudServer.getBehaviour().new Request<CaldecottTunnelDescriptor>(){
    @Override protected CaldecottTunnelDescriptor doRun(    final CloudFoundryClient client,    SubMonitor progress) throws CoreException {
      progress=SubMonitor.convert(progress);
      CloudApplication caldecottApp=getOrDeployCaldecottApp(progress);
      if (caldecottApp == null) {
        return null;
      }
      progress.setTaskName(""String_Node_Str"" + serviceName + ""String_Node_Str"");
      bindServiceToCaldecottApp(serviceName,progress);
      startCaldecottApp(progress,client);
      CaldecottTunnelDescriptor oldDescriptor=CloudFoundryPlugin.getCaldecottTunnelCache().getDescriptor(cloudServer,serviceName);
      if (oldDescriptor != null) {
        try {
          stopAndDeleteCaldecottTunnel(serviceName,monitor);
        }
 catch (        CoreException e) {
          CloudFoundryPlugin.logError(NLS.bind(""String_Node_Str"",new Object[]{serviceName}));
          return null;
        }
      }
      String url=getTunnelUri(client,progress);
      Map<String,String> info=getTunnelInfo(client,serviceName,progress);
      if (info == null) {
        CloudFoundryPlugin.logError(NLS.bind(""String_Node_Str"",new Object[]{serviceName}));
        return null;
      }
      String host=info.get(""String_Node_Str"");
      int port=Integer.valueOf(info.get(""String_Node_Str""));
      String auth=TunnelHelper.getTunnelAuth(client);
      String serviceUserName=info.get(""String_Node_Str"");
      String servicePassword=info.get(""String_Node_Str"");
      String dataBase=getServiceVendor(serviceName,progress);
      String name=info.get(""String_Node_Str"");
      if (name == null) {
        name=info.get(""String_Node_Str"") != null ? info.get(""String_Node_Str"") : info.get(""String_Node_Str"");
      }
      TunnelFactory tunnelFactory=new HttpTunnelFactory(url,host,port,auth);
      List<TunnelServer> tunnelServers=new ArrayList<TunnelServer>(1);
      int localPort=getTunnelServer(tunnelFactory,tunnelServers);
      if (tunnelServers.isEmpty() || localPort == -1) {
        CloudFoundryPlugin.logError(NLS.bind(""String_Node_Str"",new Object[]{serviceName,new Integer(BASE_PORT),new Integer(MAX_PORT)}));
        return null;
      }
      TunnelServer tunnelServer=tunnelServers.get(0);
      progress.setTaskName(""String_Node_Str"" + serviceName);
      tunnelServer.start();
      CaldecottTunnelDescriptor descriptor=new CaldecottTunnelDescriptor(serviceUserName,servicePassword,name,serviceName,dataBase,tunnelServer,localPort);
      CloudFoundryPlugin.getCaldecottTunnelCache().addDescriptor(cloudServer,descriptor);
      tunnel.add(descriptor);
      CloudFoundryCallback callBack=CloudFoundryPlugin.getCallback();
      List<CaldecottTunnelDescriptor> descriptors=new ArrayList<CaldecottTunnelDescriptor>();
      descriptors.add(descriptor);
      callBack.displayCaldecottTunnelConnections(cloudServer,descriptors);
      return descriptor;
    }
  }
.run(monitor);
  return tunnel.size() > 0 ? tunnel.get(0) : null;
}",0.7827431575691974
10945,"@Override protected void setUp() throws Exception {
  super.setUp();
  List<CloudService> toDelete=new ArrayList<CloudService>();
  CloudService service=getMysqlService();
  if (service != null) {
    toDelete.add(service);
  }
  service=getMongodbService();
  if (service != null) {
    toDelete.add(service);
  }
  service=getPostgresqlService();
  if (service != null) {
    toDelete.add(service);
  }
  for (  CloudService serviceToDelete : toDelete) {
    deleteService(serviceToDelete);
  }
}","@Override protected void setUp() throws Exception {
  super.setUp();
  List<CloudService> services=getAllServices();
  for (  CloudService service : services) {
    deleteService(service);
    CloudFoundryTestUtil.waitIntervals(2000);
  }
}",0.2845528455284553
10946,"public void addFacet(){
  if (canAddFacet()) {
    try {
      IFacetedProject facetedProject=ProjectFacetsManager.create(project);
      if (facetedProject != null) {
        facetedProject.installProjectFacet(FACET.getDefaultVersion(),null,null);
      }
    }
 catch (    CoreException e) {
      CloudFoundryPlugin.logError(e);
    }
  }
}","public void addFacet(IProgressMonitor monitor){
  if (canAddFacet()) {
    try {
      IFacetedProject facetedProject=ProjectFacetsManager.create(project);
      if (facetedProject == null) {
        facetedProject=ProjectFacetsManager.create(project,true,monitor);
      }
      if (facetedProject != null) {
        facetedProject.installProjectFacet(FACET.getDefaultVersion(),null,null);
      }
    }
 catch (    CoreException e) {
      CloudFoundryPlugin.logError(e);
    }
  }
}",0.8285024154589372
10947,"@Override public IModuleResource[] members() throws CoreException {
  return computeDefaultRuntimeClasspathMembers();
}","@Override public IModuleResource[] members() throws CoreException {
  return computeRuntimeClasspathMembers();
}",0.9696969696969696
10948,"@Override public DeploymentDescriptor prepareForDeployment(final CloudFoundryServer server,final ApplicationModule appModule,final IProgressMonitor monitor){
  final DeploymentDescriptor descriptor=new DeploymentDescriptor();
  CloudApplication existingApp=appModule.getApplication();
  if (existingApp != null) {
    descriptor.applicationInfo=new ApplicationInfo(existingApp.getName());
    descriptor.deploymentInfo=new DeploymentInfo();
    descriptor.deploymentInfo.setUris(existingApp.getUris());
    descriptor.deploymentMode=ApplicationAction.START;
    DeploymentInfo lastDeploymentInfo=appModule.getLastDeploymentInfo();
    if (lastDeploymentInfo != null) {
      descriptor.deploymentInfo.setServices(lastDeploymentInfo.getServices());
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        CloudFoundryApplicationWizard wizard=new CloudFoundryApplicationWizard(server,appModule);
        WizardDialog dialog=new WizardDialog(PlatformUI.getWorkbench().getModalDialogShellProvider().getShell(),wizard);
        int status=dialog.open();
        if (status == Dialog.OK) {
          descriptor.applicationInfo=wizard.getApplicationInfo();
          descriptor.deploymentInfo=wizard.getDeploymentInfo();
          descriptor.deploymentMode=wizard.getDeploymentMode();
          descriptor.staging=wizard.getStaging();
          final List<CloudService> addedServices=wizard.getAddedCloudServices();
          if (!addedServices.isEmpty()) {
            IProgressMonitor subMonitor=new SubProgressMonitor(monitor,addedServices.size());
            try {
              server.getBehaviour().createService(addedServices.toArray(new CloudService[0]),subMonitor);
            }
 catch (            CoreException e) {
              CloudFoundryPlugin.logError(e);
            }
 finally {
              subMonitor.done();
            }
          }
          List<String> selectedServices=wizard.getSelectedCloudServicesID();
          descriptor.deploymentInfo.setServices(selectedServices);
        }
      }
    }
);
  }
  if (descriptor.deploymentInfo == null) {
    throw new OperationCanceledException();
  }
  return descriptor;
}","@Override public DeploymentDescriptor prepareForDeployment(final CloudFoundryServer server,final ApplicationModule appModule,final IProgressMonitor monitor){
  final DeploymentDescriptor descriptor=new DeploymentDescriptor();
  CloudApplication existingApp=appModule.getApplication();
  if (existingApp != null) {
    descriptor.applicationInfo=new ApplicationInfo(existingApp.getName());
    descriptor.deploymentInfo=new DeploymentInfo();
    descriptor.deploymentInfo.setUris(existingApp.getUris());
    descriptor.deploymentMode=ApplicationAction.START;
    descriptor.staging=getStaging(appModule);
    DeploymentInfo lastDeploymentInfo=appModule.getLastDeploymentInfo();
    if (lastDeploymentInfo != null) {
      descriptor.deploymentInfo.setServices(lastDeploymentInfo.getServices());
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        CloudFoundryApplicationWizard wizard=new CloudFoundryApplicationWizard(server,appModule);
        WizardDialog dialog=new WizardDialog(PlatformUI.getWorkbench().getModalDialogShellProvider().getShell(),wizard);
        int status=dialog.open();
        if (status == Dialog.OK) {
          descriptor.applicationInfo=wizard.getApplicationInfo();
          descriptor.deploymentInfo=wizard.getDeploymentInfo();
          descriptor.deploymentMode=wizard.getDeploymentMode();
          descriptor.staging=wizard.getStaging();
          final List<CloudService> addedServices=wizard.getAddedCloudServices();
          if (!addedServices.isEmpty()) {
            IProgressMonitor subMonitor=new SubProgressMonitor(monitor,addedServices.size());
            try {
              server.getBehaviour().createService(addedServices.toArray(new CloudService[0]),subMonitor);
            }
 catch (            CoreException e) {
              CloudFoundryPlugin.logError(e);
            }
 finally {
              subMonitor.done();
            }
          }
          List<String> selectedServices=wizard.getSelectedCloudServicesID();
          descriptor.deploymentInfo.setServices(selectedServices);
        }
      }
    }
);
  }
  if (descriptor.deploymentInfo == null) {
    throw new OperationCanceledException();
  }
  return descriptor;
}",0.9895833333333334
10949,"public String getOptions(){
  return ""String_Node_Str"";
}","public String getOptions(){
  StringWriter options=new StringWriter();
  options.append(""String_Node_Str"");
  options.append(""String_Node_Str"");
  options.append(""String_Node_Str"");
  options.append(""String_Node_Str"");
  options.append(getClassPathOptionArg());
  return options.toString();
}",0.2292263610315186
10950,"public static boolean canHandle(IProject project){
  StandaloneFacetHandler handler=new StandaloneFacetHandler(project);
  return CloudUtil.getFramework(project) == null && CloudFoundryProjectUtil.hasNature(project,JavaCore.NATURE_ID) && handler.hasFacet();
}","public static boolean canHandle(IProject project){
  StandaloneFacetHandler handler=new StandaloneFacetHandler(project);
  return CloudFoundryProjectUtil.hasNature(project,JavaCore.NATURE_ID) && handler.hasFacet();
}",0.9094736842105264
10951,"public IModule[] createModules(IProject project){
  if (canCreateModule(project)) {
    IModule module=createModule(project.getName(),project.getName(),CloudFoundryServer.ID_JAVA_STANDALONE_APP,CloudFoundryServer.ID_JAVA_STANDALONE_APP_VERSION,project);
    return new IModule[]{module};
  }
  return new IModule[0];
}","public IModule[] createModules(IProject project){
  if (canCreateModule(project)) {
    IModule module=createModule(project.getName(),project.getName(),CloudFoundryServer.ID_JAVA_STANDALONE_APP,CloudFoundryServer.ID_JAVA_STANDALONE_APP_VERSION,project);
    if (module != null) {
      return new IModule[]{module};
    }
  }
  return null;
}",0.9
10952,"public boolean hasFacet(){
  try {
    IFacetedProject facetedProject=ProjectFacetsManager.create(project);
    return facetedProject.hasProjectFacet(FACET);
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.logError(e);
    return false;
  }
}","public boolean hasFacet(){
  try {
    IFacetedProject facetedProject=ProjectFacetsManager.create(project);
    return facetedProject != null && facetedProject.hasProjectFacet(FACET);
  }
 catch (  CoreException e) {
    CloudFoundryPlugin.logError(e);
    return false;
  }
}",0.9505703422053232
10953,"public boolean addFacet(){
  if (!hasFacet()) {
    try {
      IFacetedProject facetedProject=ProjectFacetsManager.create(project);
      facetedProject.installProjectFacet(FACET.getDefaultVersion(),null,null);
      return true;
    }
 catch (    CoreException e) {
      CloudFoundryPlugin.logError(e);
    }
  }
  return false;
}","public boolean addFacet(){
  if (!hasFacet()) {
    try {
      IFacetedProject facetedProject=ProjectFacetsManager.create(project);
      if (facetedProject != null) {
        facetedProject.installProjectFacet(FACET.getDefaultVersion(),null,null);
        return true;
      }
    }
 catch (    CoreException e) {
      CloudFoundryPlugin.logError(e);
    }
  }
  return false;
}",0.8991596638655462
10954,"public synchronized int getUnusedPort(int base){
  boolean contains=true;
  while (contains) {
    contains=usedPorts.contains(new Integer(base));
    if (!contains) {
      return base;
    }
 else {
      base++;
    }
  }
  return -1;
}","public synchronized int getUnusedPort(){
  int base=PORT_BASE;
  Set<Integer> used=new HashSet<Integer>();
  for (  Entry<String,Map<String,CaldecottTunnelDescriptor>> entry : caldecottTunnels.entrySet()) {
    for (    Entry<String,CaldecottTunnelDescriptor> descEntry : entry.getValue().entrySet()) {
      used.add(descEntry.getValue().tunnelPort());
    }
  }
  while (used.contains(base)) {
    base++;
  }
  return base;
}",0.2518740629685157
10955,"public synchronized CaldecottTunnelDescriptor removeDescriptor(CloudFoundryServer server,String serviceName){
  String id=server.getServerId();
  Map<String,CaldecottTunnelDescriptor> descriptors=caldecottTunnels.get(id);
  if (descriptors != null) {
    CaldecottTunnelDescriptor descr=descriptors.remove(serviceName);
    if (descr != null) {
      Integer port=new Integer(descr.tunnelPort());
      usedPorts.remove(port);
    }
  }
  return null;
}","public synchronized CaldecottTunnelDescriptor removeDescriptor(CloudFoundryServer server,String serviceName){
  String id=server.getServerId();
  Map<String,CaldecottTunnelDescriptor> descriptors=caldecottTunnels.get(id);
  if (descriptors != null) {
    CaldecottTunnelDescriptor descr=descriptors.remove(serviceName);
    return descr;
  }
  return null;
}",0.8162762022194822
10956,"public synchronized void addDescriptor(CloudFoundryServer server,CaldecottTunnelDescriptor descriptor){
  String id=server.getServerId();
  Map<String,CaldecottTunnelDescriptor> descriptors=caldecottTunnels.get(id);
  if (descriptors == null) {
    descriptors=new HashMap<String,CaldecottTunnelDescriptor>();
    caldecottTunnels.put(id,descriptors);
  }
  Integer port=new Integer(descriptor.tunnelPort());
  usedPorts.add(port);
  descriptors.put(descriptor.getServiceName(),descriptor);
}","public synchronized void addDescriptor(CloudFoundryServer server,CaldecottTunnelDescriptor descriptor){
  String id=server.getServerId();
  Map<String,CaldecottTunnelDescriptor> descriptors=caldecottTunnels.get(id);
  if (descriptors == null) {
    descriptors=new HashMap<String,CaldecottTunnelDescriptor>();
    caldecottTunnels.put(id,descriptors);
  }
  descriptors.put(descriptor.getServiceName(),descriptor);
}",0.7995594713656388
10957,"public synchronized int getUnusedPort(){
  int base=CaldecottTunnelHandler.PORT_BASE;
  while (usedPorts.contains(base)) {
    base++;
  }
  return base;
}","public synchronized int getUnusedPort(){
  int base=CaldecottTunnelHandler.BASE_PORT;
  while (usedPorts.contains(base)) {
    base++;
  }
  return base;
}",0.967741935483871
10958,"public Map<String,String> getTunnelInfo(CloudFoundryClient client,String serviceName,IProgressMonitor monitor){
  Throwable t=null;
  Map<String,String> info=null;
  int ticks=10;
  IProgressMonitor subMonitor=new SubProgressMonitor(monitor,ticks);
  subMonitor.beginTask(""String_Node_Str"" + serviceName,ticks);
  int i=0;
  while (i < ticks && !subMonitor.isCanceled()) {
    try {
      info=TunnelHelper.getTunnelServiceInfo(client,serviceName);
    }
 catch (    Throwable th) {
      t=th;
    }
    subMonitor.worked(i++);
    if (info == null) {
      long sleepTime=5000;
      try {
        Thread.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
      }
    }
 else {
      break;
    }
  }
  if (info == null) {
    CloudFoundryPlugin.logError(""String_Node_Str"" + serviceName + ""String_Node_Str"",t);
  }
  subMonitor.done();
  return info;
}","public Map<String,String> getTunnelInfo(final CloudFoundryClient client,final String serviceName,IProgressMonitor monitor){
  int ticks=5;
  long sleepTime=5000;
  monitor.setTaskName(""String_Node_Str"" + serviceName);
  Map<String,String> info=new WaitWithProgressJob<Map<String,String>>(ticks,sleepTime){
    @Override protected Map<String,String> runInWait(    IProgressMonitor monitor){
      return TunnelHelper.getTunnelServiceInfo(client,serviceName);
    }
  }
.run(monitor);
  if (info == null) {
    CloudFoundryPlugin.logError(""String_Node_Str"" + serviceName + ""String_Node_Str"");
  }
  return info;
}",0.3864864864864865
10959,"@Override protected IStatus run(IProgressMonitor monitor){
  try {
    Collection<CaldecottTunnelDescriptor> descriptors=CloudFoundryPlugin.getCaldecottTunnelCache().getDescriptors(cloudServer);
    if (descriptors != null) {
      for (      CaldecottTunnelDescriptor desc : descriptors) {
        stopAndDeleteCaldecottTunnel(desc.getServiceName(),monitor);
      }
    }
  }
 catch (  CoreException e) {
    return CloudFoundryPlugin.getErrorStatus(e);
  }
  return Status.OK_STATUS;
}","public T run(IProgressMonitor monitor){
  Throwable t=null;
  T result=null;
  int i=0;
  while (i < ticks && !monitor.isCanceled()) {
    try {
      result=runInWait(monitor);
    }
 catch (    Throwable th) {
      t=th;
    }
    if (result == null) {
      try {
        Thread.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
      }
    }
 else {
      break;
    }
    i++;
  }
  if (result == null && t != null) {
    CloudFoundryPlugin.logError(t);
  }
  return result;
}",0.1440162271805274
10960,"public boolean bindServiceToCaldecottApp(CloudApplication caldecottApp,String serviceName,IProgressMonitor monitor) throws CoreException {
  List<String> updateCaldecottServices=new ArrayList<String>();
  List<String> existingServices=caldecottApp.getServices();
  if (existingServices != null) {
    updateCaldecottServices.addAll(existingServices);
  }
  IModule caldecottModule=getCaldecottModule(monitor);
  if (!updateCaldecottServices.contains(serviceName)) {
    updateCaldecottServices.add(serviceName);
    CloudFoundryServerBehaviour behaviour=cloudServer.getBehaviour();
    behaviour.stopModule(new IModule[]{caldecottModule},monitor);
    behaviour.updateServices(TunnelHelper.getTunnelAppName(),updateCaldecottServices,monitor);
    behaviour.startModule(new IModule[]{caldecottModule},monitor);
    return caldecottApp.getServices().contains(serviceName);
  }
 else {
    return true;
  }
}","public boolean bindServiceToCaldecottApp(CloudApplication caldecottApp,String serviceName,IProgressMonitor monitor) throws CoreException {
  List<String> updateCaldecottServices=new ArrayList<String>();
  List<String> existingServices=caldecottApp.getServices();
  if (existingServices != null) {
    updateCaldecottServices.addAll(existingServices);
  }
  IModule caldecottModule=getCaldecottModule(monitor);
  if (!updateCaldecottServices.contains(serviceName)) {
    updateCaldecottServices.add(serviceName);
    CloudFoundryServerBehaviour behaviour=cloudServer.getBehaviour();
    behaviour.stopModule(new IModule[]{caldecottModule},monitor);
    behaviour.updateServices(TunnelHelper.getTunnelAppName(),updateCaldecottServices,monitor);
    behaviour.startModule(new IModule[]{caldecottModule},monitor);
    setDeploymentServices(serviceName,monitor);
    return caldecottApp.getServices().contains(serviceName);
  }
 else {
    return true;
  }
}",0.9741657696447792
10961,"public synchronized CaldecottTunnelDescriptor startCaldecottTunnel(final String serviceName,final IProgressMonitor monitor) throws CoreException {
  final List<CaldecottTunnelDescriptor> tunnel=new ArrayList<CaldecottTunnelDescriptor>(1);
  cloudServer.getBehaviour().new Request<CaldecottTunnelDescriptor>(){
    @Override protected CaldecottTunnelDescriptor doRun(    CloudFoundryClient client,    SubMonitor progress) throws CoreException {
      CloudApplication caldecottApp=getCaldecottApp(progress);
      if (caldecottApp == null) {
        return null;
      }
      progress.setTaskName(""String_Node_Str"" + serviceName + ""String_Node_Str"");
      bindServiceToCaldecottApp(caldecottApp,serviceName,progress);
      int unusedPort=CloudFoundryPlugin.getCaldecottTunnelCache().getUnusedPort();
      CaldecottTunnelDescriptor oldDescriptor=CloudFoundryPlugin.getCaldecottTunnelCache().getDescriptor(cloudServer,serviceName);
      if (oldDescriptor != null) {
        try {
          stopCaldecottTunnel(serviceName);
        }
 catch (        CoreException e) {
          CloudFoundryPlugin.logError(NLS.bind(""String_Node_Str"",new Object[]{serviceName,oldDescriptor.tunnelPort(),unusedPort}));
        }
      }
      InetSocketAddress local=new InetSocketAddress(LOCAL_HOST,unusedPort);
      progress.setTaskName(""String_Node_Str"" + serviceName);
      String url=TunnelHelper.getTunnelUri(client);
      Map<String,String> info=getTunnelInfo(client,serviceName,progress);
      if (info == null) {
        return null;
      }
      String host=info.get(""String_Node_Str"");
      int port=Integer.valueOf(info.get(""String_Node_Str""));
      String auth=TunnelHelper.getTunnelAuth(client);
      String serviceUserName=info.get(""String_Node_Str"");
      String servicePassword=info.get(""String_Node_Str"");
      String dataBase=getServiceVendor(serviceName,progress);
      String name=info.get(""String_Node_Str"");
      if (name == null) {
        name=info.get(""String_Node_Str"") != null ? info.get(""String_Node_Str"") : info.get(""String_Node_Str"");
      }
      TunnelServer tunnelServer=new TunnelServer(local,new HttpTunnelFactory(url,host,port,auth),getTunnelServerThreadExecutor());
      progress.setTaskName(""String_Node_Str"" + serviceName);
      tunnelServer.start();
      if (oldDescriptor != null) {
        CloudFoundryPlugin.getCaldecottTunnelCache().removeDescriptor(cloudServer,serviceName);
      }
      CaldecottTunnelDescriptor descriptor=new CaldecottTunnelDescriptor(serviceUserName,servicePassword,name,serviceName,dataBase,tunnelServer,unusedPort);
      CloudFoundryPlugin.getCaldecottTunnelCache().addDescriptor(cloudServer,descriptor);
      tunnel.add(descriptor);
      CloudFoundryCallback callBack=CloudFoundryPlugin.getCallback();
      List<CaldecottTunnelDescriptor> descriptors=new ArrayList<CaldecottTunnelDescriptor>();
      descriptors.add(descriptor);
      callBack.displayCaldecottTunnelConnections(cloudServer,descriptors);
      return descriptor;
    }
  }
.run(monitor);
  return tunnel.size() > 0 ? tunnel.get(0) : null;
}","public synchronized CaldecottTunnelDescriptor startCaldecottTunnel(final String serviceName,final IProgressMonitor monitor) throws CoreException {
  final List<CaldecottTunnelDescriptor> tunnel=new ArrayList<CaldecottTunnelDescriptor>(1);
  cloudServer.getBehaviour().new Request<CaldecottTunnelDescriptor>(){
    @Override protected CaldecottTunnelDescriptor doRun(    final CloudFoundryClient client,    SubMonitor progress) throws CoreException {
      final CloudApplication caldecottApp=getCaldecottApp(progress);
      if (caldecottApp == null) {
        return null;
      }
      progress.setTaskName(""String_Node_Str"" + serviceName + ""String_Node_Str"");
      bindServiceToCaldecottApp(caldecottApp,serviceName,progress);
      int ticks=1;
      long sleep=5000;
      progress.setTaskName(""String_Node_Str"");
      new WaitWithProgressJob<Boolean>(ticks,sleep){
        @Override protected Boolean runInWait(        IProgressMonitor monitor){
          if (!caldecottApp.getState().equals(CloudApplication.AppState.STARTED)) {
            client.startApplication(caldecottApp.getName());
            return null;
          }
          return true;
        }
      }
.run(monitor);
      int unusedPort=CloudFoundryPlugin.getCaldecottTunnelCache().getUnusedPort();
      CaldecottTunnelDescriptor oldDescriptor=CloudFoundryPlugin.getCaldecottTunnelCache().getDescriptor(cloudServer,serviceName);
      if (oldDescriptor != null) {
        try {
          stopCaldecottTunnel(serviceName);
        }
 catch (        CoreException e) {
          CloudFoundryPlugin.logError(NLS.bind(""String_Node_Str"",new Object[]{serviceName,oldDescriptor.tunnelPort(),unusedPort}));
        }
      }
      InetSocketAddress local=new InetSocketAddress(LOCAL_HOST,unusedPort);
      String url=TunnelHelper.getTunnelUri(client);
      Map<String,String> info=getTunnelInfo(client,serviceName,progress);
      if (info == null) {
        CloudFoundryPlugin.logError(NLS.bind(""String_Node_Str"",new Object[]{serviceName,unusedPort}));
        return null;
      }
      String host=info.get(""String_Node_Str"");
      int port=Integer.valueOf(info.get(""String_Node_Str""));
      String auth=TunnelHelper.getTunnelAuth(client);
      String serviceUserName=info.get(""String_Node_Str"");
      String servicePassword=info.get(""String_Node_Str"");
      String dataBase=getServiceVendor(serviceName,progress);
      String name=info.get(""String_Node_Str"");
      if (name == null) {
        name=info.get(""String_Node_Str"") != null ? info.get(""String_Node_Str"") : info.get(""String_Node_Str"");
      }
      TunnelServer tunnelServer=new TunnelServer(local,new HttpTunnelFactory(url,host,port,auth),getTunnelServerThreadExecutor());
      progress.setTaskName(""String_Node_Str"" + serviceName);
      tunnelServer.start();
      if (oldDescriptor != null) {
        CloudFoundryPlugin.getCaldecottTunnelCache().removeDescriptor(cloudServer,serviceName);
      }
      CaldecottTunnelDescriptor descriptor=new CaldecottTunnelDescriptor(serviceUserName,servicePassword,name,serviceName,dataBase,tunnelServer,unusedPort);
      CloudFoundryPlugin.getCaldecottTunnelCache().addDescriptor(cloudServer,descriptor);
      tunnel.add(descriptor);
      CloudFoundryCallback callBack=CloudFoundryPlugin.getCallback();
      List<CaldecottTunnelDescriptor> descriptors=new ArrayList<CaldecottTunnelDescriptor>();
      descriptors.add(descriptor);
      callBack.displayCaldecottTunnelConnections(cloudServer,descriptors);
      return descriptor;
    }
  }
.run(monitor);
  return tunnel.size() > 0 ? tunnel.get(0) : null;
}",0.8716873783500524
10962,"@Override protected Boolean doRun(CloudFoundryClient client,SubMonitor progress) throws CoreException {
  Thread t=Thread.currentThread();
  ClassLoader oldLoader=t.getContextClassLoader();
  boolean deployed=false;
  try {
    t.setContextClassLoader(CloudFoundryServerBehaviour.class.getClassLoader());
    TunnelHelper.deployTunnelApp(client);
    deployed=true;
  }
 catch (  TunnelException te) {
    CloudFoundryPlugin.logError(te);
  }
 finally {
    t.setContextClassLoader(oldLoader);
  }
  if (deployed) {
    cloudServer.getBehaviour().refreshModules(progress);
  }
  return deployed;
}","@Override protected Boolean doRun(CloudFoundryClient client,SubMonitor progress) throws CoreException {
  progress.setTaskName(""String_Node_Str"");
  Thread t=Thread.currentThread();
  ClassLoader oldLoader=t.getContextClassLoader();
  boolean deployed=false;
  try {
    t.setContextClassLoader(CloudFoundryServerBehaviour.class.getClassLoader());
    TunnelHelper.deployTunnelApp(client);
    deployed=true;
  }
 catch (  TunnelException te) {
    CloudFoundryPlugin.logError(te);
  }
 finally {
    t.setContextClassLoader(oldLoader);
  }
  if (deployed) {
    cloudServer.getBehaviour().refreshModules(progress);
  }
  return deployed;
}",0.9652384801940178
10963,"protected void deployCaldecottApp(IProgressMonitor monitor) throws CoreException {
  Request<Boolean> request=cloudServer.getBehaviour().new Request<Boolean>(){
    @Override protected Boolean doRun(    CloudFoundryClient client,    SubMonitor progress) throws CoreException {
      Thread t=Thread.currentThread();
      ClassLoader oldLoader=t.getContextClassLoader();
      boolean deployed=false;
      try {
        t.setContextClassLoader(CloudFoundryServerBehaviour.class.getClassLoader());
        TunnelHelper.deployTunnelApp(client);
        deployed=true;
      }
 catch (      TunnelException te) {
        CloudFoundryPlugin.logError(te);
      }
 finally {
        t.setContextClassLoader(oldLoader);
      }
      if (deployed) {
        cloudServer.getBehaviour().refreshModules(progress);
      }
      return deployed;
    }
  }
;
  request.run(monitor);
}","protected void deployCaldecottApp(IProgressMonitor monitor) throws CoreException {
  Request<Boolean> request=cloudServer.getBehaviour().new Request<Boolean>(){
    @Override protected Boolean doRun(    CloudFoundryClient client,    SubMonitor progress) throws CoreException {
      progress.setTaskName(""String_Node_Str"");
      Thread t=Thread.currentThread();
      ClassLoader oldLoader=t.getContextClassLoader();
      boolean deployed=false;
      try {
        t.setContextClassLoader(CloudFoundryServerBehaviour.class.getClassLoader());
        TunnelHelper.deployTunnelApp(client);
        deployed=true;
      }
 catch (      TunnelException te) {
        CloudFoundryPlugin.logError(te);
      }
 finally {
        t.setContextClassLoader(oldLoader);
      }
      if (deployed) {
        cloudServer.getBehaviour().refreshModules(progress);
      }
      return deployed;
    }
  }
;
  request.run(monitor);
}",0.973816155988858
10964,"/** 
 * Returns a list of applicable Caldecott Actions given the selection, or empty list if not actions are applicable.
 * @param selection
 * @param editorPage
 * @return non-null list of actions. May be empty.
 */
public List<IAction> getCaldecottActions(IStructuredSelection selection,final CloudFoundryApplicationsEditorPage editorPage){
  Collection<String> selectedServices=AddServiceStartCaldecottAction.getServiceNames(selection);
  List<IAction> actions=new ArrayList<IAction>();
  final CaldecottTunnelHandler handler=new CaldecottTunnelHandler(cloudServer);
  if (selectedServices != null && !selectedServices.isEmpty()) {
    final List<String> servicesWithTunnels=new ArrayList<String>();
    final List<String> servicesToAdd=getServicesWithNoTunnel(selectedServices,handler,servicesWithTunnels);
    if (!servicesToAdd.isEmpty()) {
      actions.add(new AddServiceStartCaldecottAction(servicesToAdd,cloudServer.getBehaviour(),editorPage,""String_Node_Str""));
    }
 else     if (!servicesWithTunnels.isEmpty()) {
      actions.add(new DisconnectCaldecottTunnelAction(editorPage,handler,servicesWithTunnels));
      IAction showCaldecottTunnelInfo=new Action(""String_Node_Str"",CloudFoundryImages.CONNECT){
        public void run(){
          displayCaldecottTunnels(servicesWithTunnels);
        }
      }
;
      actions.add(showCaldecottTunnelInfo);
    }
  }
  return actions;
}","/** 
 * Returns a list of applicable Caldecott Actions given the selection, or empty list if not actions are applicable.
 * @param selection
 * @param editorPage
 * @return non-null list of actions. May be empty.
 */
public List<IAction> getCaldecottActions(IStructuredSelection selection,final CloudFoundryApplicationsEditorPage editorPage){
  Collection<String> selectedServices=ModifyServicesForApplicationAction.getServiceNames(selection);
  List<IAction> actions=new ArrayList<IAction>();
  final CaldecottTunnelHandler handler=new CaldecottTunnelHandler(cloudServer);
  if (selectedServices != null && !selectedServices.isEmpty()) {
    final List<String> servicesWithTunnels=new ArrayList<String>();
    final List<String> servicesToAdd=getServicesWithNoTunnel(selectedServices,handler,servicesWithTunnels);
    if (!servicesToAdd.isEmpty()) {
      actions.add(new AddServiceStartCaldecottAction(servicesToAdd,cloudServer.getBehaviour(),editorPage,""String_Node_Str""));
    }
 else     if (!servicesWithTunnels.isEmpty()) {
      actions.add(new DisconnectCaldecottTunnelAction(editorPage,handler,servicesWithTunnels));
      IAction showCaldecottTunnelInfo=new Action(""String_Node_Str"",CloudFoundryImages.CONNECT){
        public void run(){
          displayCaldecottTunnels(servicesWithTunnels);
        }
      }
;
      actions.add(showCaldecottTunnelInfo);
    }
  }
  return actions;
}",0.9813886900501074
10965,"/** 
 * Stops the application and does a full publish of the application before restarting it. Should not be called for incremental updates.
 * @param modules
 * @param monitor
 * @return
 * @throws CoreException
 */
public ApplicationModule debugModule(IModule[] modules,IProgressMonitor monitor) throws CoreException {
  return doDebugModule(modules,true,monitor);
}","/** 
 * Stops the application and does a full publish of the application before restarting it. Should not be called for incremental updates.
 * @param modules
 * @param monitor
 * @return
 * @throws CoreException
 */
public ApplicationModule debugModule(IModule[] modules,IProgressMonitor monitor) throws CoreException {
  boolean incrementalPublish=false;
  return doDebugModule(modules,incrementalPublish,monitor);
}",0.926208651399491
10966,"protected File getFile(IModuleResource moduleResource){
  File file=(File)moduleResource.getAdapter(File.class);
  if (file == null) {
    IFile iFile=(IFile)moduleResource.getAdapter(IFile.class);
    if (iFile != null) {
      file=iFile.getFullPath().toFile();
    }
  }
  return file;
}","protected File getFile(IModuleResource moduleResource){
  File file=(File)moduleResource.getAdapter(File.class);
  if (file == null) {
    IFile iFile=(IFile)moduleResource.getAdapter(IFile.class);
    if (iFile != null) {
      IPath location=iFile.getLocation();
      if (location != null) {
        return new File(location.toString());
      }
    }
  }
  return file;
}",0.7398496240601504
10967,"public DeployedResourceEntry getDeployedResourcesEntry(){
  DeployedResourceEntry deployedResourcesEntry=CloudFoundryPlugin.getDefault().getDeployedResourcesCache().getEntry(appName,getName());
  if (recalculate || deployedResourcesEntry == null) {
    deployedResourcesEntry=computeNewDeployedResourceEntry();
  }
  return deployedResourcesEntry;
}","public DeployedResourceEntry getDeployedResourcesEntry(){
  DeployedResourceEntry deployedResourcesEntry=CloudFoundryPlugin.getDefault().getDeployedResourcesCache().getEntry(appName,getName());
  if (canComputeResourceEntry() && (recalculate || deployedResourcesEntry == null)) {
    byte[] sha1=super.getSha1Digest();
    long fileSize=super.getSize();
    deployedResourcesEntry=new DeployedResourceEntry(sha1,fileSize,zipRelativeName);
    CloudFoundryPlugin.getDefault().getDeployedResourcesCache().add(appName,deployedResourcesEntry);
  }
  return deployedResourcesEntry;
}",0.6407766990291263
10968,"public <T>T parseFromText(Class<T> recordClazz,String text) throws RecordParserException {
  T record;
  try {
    record=recordClazz.newInstance();
  }
 catch (  Exception e) {
    throw new RecordParserException(""String_Node_Str"" + recordClazz,e);
  }
  List<DelimitedFieldDescriptor> delimitedFieldDescriptors=getRecordDescriptor().getFieldDescriptors();
  String[] textTokens=text.split(RegexUtil.escapeRegexMetacharacters(getRecordDescriptor().getDelimiter()));
  int tokensQtt=textTokens.length;
  for (int i=0; i < delimitedFieldDescriptors.size(); i++) {
    DelimitedFieldDescriptor actualFieldDescriptor=delimitedFieldDescriptors.get(i);
    String fieldValue;
    if (actualFieldDescriptor.getPositionIndex() <= tokensQtt) {
      fieldValue=textTokens[actualFieldDescriptor.getPositionIndex() - 1];
    }
 else {
      throw new RecordParserException(""String_Node_Str"" + actualFieldDescriptor.getGetter());
    }
    Method setter;
    Class<?> getterReturnType=actualFieldDescriptor.getGetter().getReturnType();
    try {
      setter=ReflectUtil.getSetterFromGetter(actualFieldDescriptor.getGetter(),new Class<?>[]{String.class},recordClazz);
    }
 catch (    NoSuchMethodException e1) {
      try {
        setter=ReflectUtil.getSetterFromGetter(actualFieldDescriptor.getGetter(),new Class<?>[]{getterReturnType},recordClazz);
      }
 catch (      NoSuchMethodException e2) {
        throw new RecordParserException(""String_Node_Str"" + actualFieldDescriptor.getGetter(),e2);
      }
    }
    Object parameter;
    try {
      FieldDecorator<?> decorator=actualFieldDescriptor.getDecorator();
      parameter=decorator.fromString(fieldValue);
      setter.invoke(record,parameter);
    }
 catch (    FieldDecoratorException e) {
      throw new RecordParserException(e);
    }
catch (    Exception e) {
      throw new RecordParserException(""String_Node_Str"" + setter,e);
    }
  }
  return record;
}","public <T>T parseFromText(Class<T> recordClazz,String text) throws RecordParserException {
  T record;
  try {
    record=recordClazz.newInstance();
  }
 catch (  Exception e) {
    throw new RecordParserException(""String_Node_Str"" + recordClazz,e);
  }
  List<DelimitedFieldDescriptor> delimitedFieldDescriptors=getRecordDescriptor().getFieldDescriptors();
  String[] textTokens=text.split(RegexUtil.escapeRegexMetacharacters(getRecordDescriptor().getDelimiter()),-1);
  int tokensQtt=textTokens.length;
  for (int i=0; i < delimitedFieldDescriptors.size(); i++) {
    DelimitedFieldDescriptor actualFieldDescriptor=delimitedFieldDescriptors.get(i);
    String fieldValue;
    if (actualFieldDescriptor.getPositionIndex() <= tokensQtt) {
      fieldValue=textTokens[actualFieldDescriptor.getPositionIndex() - 1];
    }
 else {
      throw new RecordParserException(""String_Node_Str"" + actualFieldDescriptor.getGetter());
    }
    Method setter;
    Class<?> getterReturnType=actualFieldDescriptor.getGetter().getReturnType();
    try {
      setter=ReflectUtil.getSetterFromGetter(actualFieldDescriptor.getGetter(),new Class<?>[]{String.class},recordClazz);
    }
 catch (    NoSuchMethodException e1) {
      try {
        setter=ReflectUtil.getSetterFromGetter(actualFieldDescriptor.getGetter(),new Class<?>[]{getterReturnType},recordClazz);
      }
 catch (      NoSuchMethodException e2) {
        throw new RecordParserException(""String_Node_Str"" + actualFieldDescriptor.getGetter(),e2);
      }
    }
    Object parameter;
    try {
      FieldDecorator<?> decorator=actualFieldDescriptor.getDecorator();
      parameter=decorator.fromString(fieldValue);
      setter.invoke(record,parameter);
    }
 catch (    FieldDecoratorException e) {
      throw new RecordParserException(e);
    }
catch (    Exception e) {
      throw new RecordParserException(""String_Node_Str"" + setter,e);
    }
  }
  return record;
}",0.9992181391712276
10969,"public void readCustomers() throws IOException, FFPojoException {
  InputStream inputStream=getClass().getClassLoader().getResourceAsStream(INPUT_TXT_RESOURCE_CLASSPATH);
  new FFPojoFlatFileReaderBuilder().withInputStream(inputStream).withRecordClass(Customer.class).read(new ReadProcessor(){
    public void process(    Object item){
      Customer cust=(Customer)item;
      System.out.printf(""String_Node_Str"",cust.getId(),cust.getName(),cust.getEmail());
    }
  }
);
}","public void readCustomers() throws IOException, FFPojoException {
  InputStream inputStream=getClass().getClassLoader().getResourceAsStream(INPUT_TXT_RESOURCE_CLASSPATH);
  List<Customer> read=new FFPojoFlatFileReaderBuilder().withInputStream(inputStream).withRecordClass(Customer.class).read();
}",0.7185473411154345
10970,"public synchronized AddClassBuilder withInputStream(final InputStream inputStream){
  return new AddClassBuilder(){
    public FFReaderBuilder withRecordClasses(    List<Class<?>> clazz){
      classes.addAll(clazz);
      return read(inputStream);
    }
    public FFReaderBuilder withRecordClass(    Class<?> clazz){
      classes.add(clazz);
      return read(inputStream);
    }
  }
;
}","public AddClassBuilder withInputStream(final InputStream inputStream){
  return new AddClassBuilder(){
    public FFReaderBuilder withRecordClasses(    List<Class<?>> clazz){
      classes.addAll(clazz);
      return read(inputStream);
    }
    public FFReaderBuilder withRecordClass(    Class<?> clazz){
      classes.add(clazz);
      return read(inputStream);
    }
  }
;
}",0.9830508474576272
10971,"public Object next(){
  if (!this.hasNext()) {
    throw new NoSuchElementException(""String_Node_Str"");
  }
  try {
    Object record=parseRecordFromText(nextLine);
    this.recordText=nextLine;
    recordIndex++;
    nextLine=inputStreamReader.readLine();
    return record;
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + (recordIndex + 1),e);
  }
catch (  RecordParserException e) {
    throw new RuntimeException(""String_Node_Str"" + (recordIndex + 1),e);
  }
}","public Object next(){
  if (!this.hasNext()) {
    throw new NoSuchElementException(""String_Node_Str"");
  }
  try {
    String currLine=nextLine;
    nextLine=inputStreamReader.readLine();
    Object record=parseRecordFromText(currLine);
    this.recordText=nextLine;
    recordIndex++;
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + (recordIndex + 1),e);
  }
catch (  RecordParserException e) {
    throw new RuntimeException(""String_Node_Str"" + (recordIndex + 1),e);
  }
}",0.8579940417080437
10972,"public Object next(){
  if (!this.hasNext()) {
    throw new NoSuchElementException(""String_Node_Str"");
  }
  try {
    String currLine=nextLine;
    nextLine=inputStreamReader.readLine();
    Object record=parseRecordFromText(currLine);
    this.recordText=nextLine;
    recordIndex++;
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + (recordIndex + 1),e);
  }
catch (  RecordParserException e) {
    throw new RuntimeException(""String_Node_Str"" + (recordIndex + 1),e);
  }
}","public Object next(){
  if (!this.hasNext()) {
    throw new NoSuchElementException(""String_Node_Str"");
  }
  try {
    String currLine=nextLine;
    nextLine=inputStreamReader.readLine();
    Object record=parseRecordFromText(currLine);
    this.recordText=nextLine;
    recordIndex++;
    return record;
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + (recordIndex + 1),e);
  }
catch (  RecordParserException e) {
    throw new RuntimeException(""String_Node_Str"" + (recordIndex + 1),e);
  }
}",0.9816779170684669
10973,"/** 
 * Check en url. Add http:// before if missing.
 * @param url The url to check.
 * @return The modified url if necessary.
 */
public static String checkUrl(String url){
  if ((url != null) && (url.length() > 0)) {
    if ((!url.startsWith(""String_Node_Str"")) && (!url.startsWith(""String_Node_Str"")) && (!url.startsWith(Constants.URL_ABOUT_BLANK))&& (!url.startsWith(Constants.URL_ABOUT_START))) {
      url=""String_Node_Str"" + url;
    }
  }
  return url;
}","/** 
 * Check en url. Add http:// before if missing.
 * @param url The url to check.
 * @return The modified url if necessary.
 */
public static String checkUrl(String url){
  if ((url != null) && (url.length() > 0)) {
    if ((!url.startsWith(""String_Node_Str"")) && (!url.startsWith(""String_Node_Str"")) && (!url.startsWith(""String_Node_Str""))&& (!url.startsWith(Constants.URL_ABOUT_BLANK))&& (!url.startsWith(Constants.URL_ABOUT_START))) {
      url=""String_Node_Str"" + url;
    }
  }
  return url;
}",0.9595015576323987
10974,"/** 
 * Update the fav icon display.
 */
private void updateFavIcon(){
  mUrlEditText.setCompoundDrawablesWithIntrinsicBounds(new BitmapDrawable(mCurrentWebView.getFavicon()),null,mUrlEditText.getCompoundDrawables()[2],null);
}","/** 
 * Update the fav icon display.
 */
private void updateFavIcon(){
  mUrlEditText.setCompoundDrawables(getNormalizedFavicon(),null,mUrlEditText.getCompoundDrawables()[2],null);
}",0.8410757946210269
10975,"/** 
 * Update the ""Go"" button image.
 */
private void updateGoButton(){
  if (mCurrentWebView.isLoading()) {
    mGoButton.setImageResource(R.drawable.ic_btn_stop);
    mUrlEditText.setCompoundDrawablesWithIntrinsicBounds(new BitmapDrawable(mCurrentWebView.getFavicon()),null,mCircularProgress,null);
    ((AnimationDrawable)mCircularProgress).start();
  }
 else {
    mGoButton.setImageResource(R.drawable.ic_btn_go);
    mUrlEditText.setCompoundDrawablesWithIntrinsicBounds(new BitmapDrawable(mCurrentWebView.getFavicon()),null,null,null);
    ((AnimationDrawable)mCircularProgress).stop();
  }
}","/** 
 * Update the ""Go"" button image.
 */
private void updateGoButton(){
  if (mCurrentWebView.isLoading()) {
    mGoButton.setImageResource(R.drawable.ic_btn_stop);
    mUrlEditText.setCompoundDrawables(getNormalizedFavicon(),null,mCircularProgress,null);
    ((AnimationDrawable)mCircularProgress).start();
  }
 else {
    mGoButton.setImageResource(R.drawable.ic_btn_go);
    mUrlEditText.setCompoundDrawables(getNormalizedFavicon(),null,null,null);
    ((AnimationDrawable)mCircularProgress).stop();
  }
}",0.427797833935018
10976,"@Override public boolean onTouch(View v,MotionEvent event){
  hideKeyboard(false);
  final int action=event.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      mGestureMode=GestureMode.SWIP;
      mDownXValue=event.getX();
      mDownDateValue=new Date().getTime();
      break;
    }
case MotionEvent.ACTION_UP:
{
    if (mGestureMode == GestureMode.SWIP) {
      float currentX=event.getX();
      long timeDelta=new Date().getTime() - mDownDateValue;
      if (timeDelta <= FLIP_TIME_THRESHOLD) {
        if (mViewFlipper.getChildCount() > 1) {
          if (currentX > (mDownXValue + FLIP_PIXEL_THRESHOLD)) {
            mViewFlipper.setInAnimation(AnimationManager.getInstance().getInFromLeftAnimation());
            mViewFlipper.setOutAnimation(AnimationManager.getInstance().getOutToRightAnimation());
            mViewFlipper.showPrevious();
            mCurrentWebView=mWebViews.get(mViewFlipper.getDisplayedChild());
            showToastOnTabSwitch();
            updateUI();
            return true;
          }
          if (currentX < (mDownXValue - FLIP_PIXEL_THRESHOLD)) {
            mViewFlipper.setInAnimation(AnimationManager.getInstance().getInFromRightAnimation());
            mViewFlipper.setOutAnimation(AnimationManager.getInstance().getOutToLeftAnimation());
            mViewFlipper.showNext();
            mCurrentWebView=mWebViews.get(mViewFlipper.getDisplayedChild());
            showToastOnTabSwitch();
            updateUI();
            return true;
          }
        }
      }
    }
    break;
  }
case MotionEvent.ACTION_POINTER_DOWN:
{
  mOldDistance=computeSpacing(event);
  if (mOldDistance > 10f) {
    mGestureMode=GestureMode.ZOOM;
  }
  break;
}
case MotionEvent.ACTION_MOVE:
{
if (mGestureMode == GestureMode.ZOOM) {
  float newDist=computeSpacing(event);
  if (newDist > 10f) {
    float scale=newDist / mOldDistance;
    if (scale > 1) {
      if (scale > 1.3f) {
        mCurrentWebView.zoomIn();
        mOldDistance=newDist;
      }
    }
 else {
      if (scale < 0.8f) {
        mCurrentWebView.zoomOut();
        mOldDistance=newDist;
      }
    }
  }
}
break;
}
default :
break;
}
return false;
}","@Override public boolean onTouch(View v,MotionEvent event){
  hideKeyboard(false);
  final int action=event.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      mGestureMode=GestureMode.SWIP;
      mDownXValue=event.getX();
      mDownDateValue=new Date().getTime();
      break;
    }
case MotionEvent.ACTION_UP:
{
    if (mGestureMode == GestureMode.SWIP) {
      float currentX=event.getX();
      long timeDelta=new Date().getTime() - mDownDateValue;
      if (timeDelta <= FLIP_TIME_THRESHOLD) {
        if (mViewFlipper.getChildCount() > 1) {
          if (currentX > (mDownXValue + FLIP_PIXEL_THRESHOLD)) {
            mViewFlipper.setInAnimation(AnimationManager.getInstance().getInFromLeftAnimation());
            mViewFlipper.setOutAnimation(AnimationManager.getInstance().getOutToRightAnimation());
            mViewFlipper.showPrevious();
            mCurrentWebView=mWebViews.get(mViewFlipper.getDisplayedChild());
            showToastOnTabSwitch();
            updateUI();
            return false;
          }
          if (currentX < (mDownXValue - FLIP_PIXEL_THRESHOLD)) {
            mViewFlipper.setInAnimation(AnimationManager.getInstance().getInFromRightAnimation());
            mViewFlipper.setOutAnimation(AnimationManager.getInstance().getOutToLeftAnimation());
            mViewFlipper.showNext();
            mCurrentWebView=mWebViews.get(mViewFlipper.getDisplayedChild());
            showToastOnTabSwitch();
            updateUI();
            return false;
          }
        }
      }
    }
    break;
  }
case MotionEvent.ACTION_POINTER_DOWN:
{
  mOldDistance=computeSpacing(event);
  if (mOldDistance > 10f) {
    mGestureMode=GestureMode.ZOOM;
  }
  break;
}
case MotionEvent.ACTION_MOVE:
{
if (mGestureMode == GestureMode.ZOOM) {
  float newDist=computeSpacing(event);
  if (newDist > 10f) {
    float scale=newDist / mOldDistance;
    if (scale > 1) {
      if (scale > 1.3f) {
        mCurrentWebView.zoomIn();
        mOldDistance=newDist;
      }
    }
 else {
      if (scale < 0.8f) {
        mCurrentWebView.zoomOut();
        mOldDistance=newDist;
      }
    }
  }
}
break;
}
default :
break;
}
return false;
}",0.9968152866242038
10977,"/** 
 * Constructor.
 * @param healthy Report health as 100% when the number of warnings is less than this value.
 * @param unhealthy Report health as 0% when the number of warnings is greater than this value.
 * @param thresholdLimit Determines which warning priorities should be considered whenevaluating the build stability and health.
 * @param defaultEncoding The default encoding to be used when reading files.
 * @param useDeltaValues Determines whether the absolute annotations delta or the actualannotations set difference should be used to evaluate the build stability.
 * @param unstableTotalAll Annotation threshold.
 * @param unstableTotalHigh Annotation threshold.
 * @param unstableTotalNormal Annotation threshold.
 * @param unstableTotalLow Annotation threshold.
 * @param unstableNewAll Annotation threshold.
 * @param unstableNewHigh Annotation threshold.
 * @param unstableNewNormal Annotation threshold.
 * @param unstableNewLow Annotation threshold.
 * @param failedTotalAll Annotation threshold.
 * @param failedTotalHigh Annotation threshold.
 * @param failedTotalNormal Annotation threshold.
 * @param failedTotalLow Annotation threshold.
 * @param failedNewAll Annotation threshold.
 * @param failedNewHigh Annotation threshold.
 * @param failedNewNormal Annotation threshold.
 * @param failedNewLow Annotation threshold.
 * @param canRunOnFailed Determines whether the plugin can also run for failed builds.
 * @param shouldDetectModules Determines whether module names should be derived from Maven POMor Ant build files.
 * @param pattern Ant fileset pattern used to scan for Lint files.
 */
@DataBoundConstructor public LintPublisher(final String healthy,final String unhealthy,final String thresholdLimit,final String defaultEncoding,final boolean useDeltaValues,final String unstableTotalAll,final String unstableTotalHigh,final String unstableTotalNormal,final String unstableTotalLow,final String unstableNewAll,final String unstableNewHigh,final String unstableNewNormal,final String unstableNewLow,final String failedTotalAll,final String failedTotalHigh,final String failedTotalNormal,final String failedTotalLow,final String failedNewAll,final String failedNewHigh,final String failedNewNormal,final String failedNewLow,final boolean canRunOnFailed,final boolean shouldDetectModules,final String pattern){
  super(healthy,unhealthy,thresholdLimit,defaultEncoding,useDeltaValues,unstableTotalAll,unstableTotalHigh,unstableTotalNormal,unstableTotalLow,unstableNewAll,unstableNewHigh,unstableNewNormal,unstableNewLow,failedTotalAll,failedTotalHigh,failedTotalNormal,failedTotalLow,failedNewAll,failedNewHigh,failedNewNormal,failedNewLow,canRunOnFailed,shouldDetectModules,true,PLUGIN_NAME);
  this.pattern=pattern;
}","/** 
 * Constructor.
 * @param healthy Report health as 100% when the number of warnings is less than this value.
 * @param unHealthy Report health as 0% when the number of warnings is greater than this value.
 * @param thresholdLimit Determines which warning priorities should be considered whenevaluating the build stability and health.
 * @param defaultEncoding The default encoding to be used when reading files.
 * @param useDeltaValues Determines whether the absolute annotations delta or the actualannotations set difference should be used to evaluate the build stability.
 * @param unstableTotalAll Annotation threshold.
 * @param unstableTotalHigh Annotation threshold.
 * @param unstableTotalNormal Annotation threshold.
 * @param unstableTotalLow Annotation threshold.
 * @param unstableNewAll Annotation threshold.
 * @param unstableNewHigh Annotation threshold.
 * @param unstableNewNormal Annotation threshold.
 * @param unstableNewLow Annotation threshold.
 * @param failedTotalAll Annotation threshold.
 * @param failedTotalHigh Annotation threshold.
 * @param failedTotalNormal Annotation threshold.
 * @param failedTotalLow Annotation threshold.
 * @param failedNewAll Annotation threshold.
 * @param failedNewHigh Annotation threshold.
 * @param failedNewNormal Annotation threshold.
 * @param failedNewLow Annotation threshold.
 * @param canRunOnFailed Determines whether the plugin can also run for failed builds.
 * @param shouldDetectModules Determines whether module names should be derived from Maven POMor Ant build files.
 * @param canComputeNew determines whether new warnings should be computed (withrespect to baseline)
 * @param pattern Ant fileset pattern used to scan for Lint files.
 */
@DataBoundConstructor public LintPublisher(final String healthy,final String unHealthy,final String thresholdLimit,final String defaultEncoding,final boolean useDeltaValues,final String unstableTotalAll,final String unstableTotalHigh,final String unstableTotalNormal,final String unstableTotalLow,final String unstableNewAll,final String unstableNewHigh,final String unstableNewNormal,final String unstableNewLow,final String failedTotalAll,final String failedTotalHigh,final String failedTotalNormal,final String failedTotalLow,final String failedNewAll,final String failedNewHigh,final String failedNewNormal,final String failedNewLow,final boolean canRunOnFailed,final boolean shouldDetectModules,final boolean canComputeNew,final String pattern){
  super(healthy,unHealthy,thresholdLimit,defaultEncoding,useDeltaValues,unstableTotalAll,unstableTotalHigh,unstableTotalNormal,unstableTotalLow,unstableNewAll,unstableNewHigh,unstableNewNormal,unstableNewLow,failedTotalAll,failedTotalHigh,failedTotalNormal,failedTotalLow,failedNewAll,failedNewHigh,failedNewNormal,failedNewLow,canRunOnFailed,shouldDetectModules,canComputeNew,PLUGIN_NAME);
  this.pattern=pattern;
}",0.9730400851365733
10978,"public void visitMethodInsn(final int opcode,final String owner,final String name,final String desc){
  if (mv != null) {
    mv.visitMethodInsn(opcode,owner,name,desc);
  }
  pop(desc);
  if (opcode != Opcodes.INVOKESTATIC && opcode != Opcodes.INVOKEDYNAMIC) {
    Object t=pop();
    if (opcode == Opcodes.INVOKESPECIAL && name.charAt(0) == '<') {
      Object u;
      if (t == Opcodes.UNINITIALIZED_THIS) {
        u=owner;
      }
 else {
        u=uninitializedTypes.get(t);
      }
      for (int i=0; i < locals.size(); ++i) {
        if (locals.get(i) == t) {
          locals.set(i,u);
        }
      }
      for (int i=0; i < stack.size(); ++i) {
        if (stack.get(i) == t) {
          stack.set(i,u);
        }
      }
    }
  }
  pushDesc(desc);
  labels=null;
}","public void visitMethodInsn(final int opcode,final String owner,final String name,final String desc){
  if (mv != null) {
    mv.visitMethodInsn(opcode,owner,name,desc);
  }
  if (this.locals == null) {
    labels=null;
    return;
  }
  pop(desc);
  if (opcode != Opcodes.INVOKESTATIC && opcode != Opcodes.INVOKEDYNAMIC) {
    Object t=pop();
    if (opcode == Opcodes.INVOKESPECIAL && name.charAt(0) == '<') {
      Object u;
      if (t == Opcodes.UNINITIALIZED_THIS) {
        u=this.owner;
      }
 else {
        u=uninitializedTypes.get(t);
      }
      for (int i=0; i < locals.size(); ++i) {
        if (locals.get(i) == t) {
          locals.set(i,u);
        }
      }
      for (int i=0; i < stack.size(); ++i) {
        if (stack.get(i) == t) {
          stack.set(i,u);
        }
      }
    }
  }
  pushDesc(desc);
  labels=null;
}",0.958819913952059
10979,"private void execute(final int opcode,final int iarg,final String sarg){
  if (this.locals == null) {
    return;
  }
  Object t1, t2, t3, t4;
switch (opcode) {
case Opcodes.NOP:
case Opcodes.INEG:
case Opcodes.LNEG:
case Opcodes.FNEG:
case Opcodes.DNEG:
case Opcodes.I2B:
case Opcodes.I2C:
case Opcodes.I2S:
case Opcodes.GOTO:
case Opcodes.RETURN:
    break;
case Opcodes.ACONST_NULL:
  push(Opcodes.NULL);
break;
case Opcodes.ICONST_M1:
case Opcodes.ICONST_0:
case Opcodes.ICONST_1:
case Opcodes.ICONST_2:
case Opcodes.ICONST_3:
case Opcodes.ICONST_4:
case Opcodes.ICONST_5:
case Opcodes.BIPUSH:
case Opcodes.SIPUSH:
push(Opcodes.INTEGER);
break;
case Opcodes.LCONST_0:
case Opcodes.LCONST_1:
push(Opcodes.LONG);
push(Opcodes.TOP);
break;
case Opcodes.FCONST_0:
case Opcodes.FCONST_1:
case Opcodes.FCONST_2:
push(Opcodes.FLOAT);
break;
case Opcodes.DCONST_0:
case Opcodes.DCONST_1:
push(Opcodes.DOUBLE);
push(Opcodes.TOP);
break;
case Opcodes.ILOAD:
case Opcodes.FLOAD:
case Opcodes.ALOAD:
push(get(iarg));
break;
case Opcodes.LLOAD:
case Opcodes.DLOAD:
push(get(iarg));
push(Opcodes.TOP);
break;
case Opcodes.IALOAD:
case Opcodes.BALOAD:
case Opcodes.CALOAD:
case Opcodes.SALOAD:
pop(2);
push(Opcodes.INTEGER);
break;
case Opcodes.LALOAD:
case Opcodes.D2L:
pop(2);
push(Opcodes.LONG);
push(Opcodes.TOP);
break;
case Opcodes.FALOAD:
pop(2);
push(Opcodes.FLOAT);
break;
case Opcodes.DALOAD:
case Opcodes.L2D:
pop(2);
push(Opcodes.DOUBLE);
push(Opcodes.TOP);
break;
case Opcodes.AALOAD:
pop(1);
t1=pop();
pushDesc(((String)t1).substring(1));
break;
case Opcodes.ISTORE:
case Opcodes.FSTORE:
case Opcodes.ASTORE:
t1=pop();
set(iarg,t1);
if (iarg > 0) {
t2=get(iarg - 1);
if (t2 == Opcodes.LONG || t2 == Opcodes.DOUBLE) {
set(iarg - 1,Opcodes.TOP);
}
}
break;
case Opcodes.LSTORE:
case Opcodes.DSTORE:
pop(1);
t1=pop();
set(iarg,t1);
set(iarg + 1,Opcodes.TOP);
if (iarg > 0) {
t2=get(iarg - 1);
if (t2 == Opcodes.LONG || t2 == Opcodes.DOUBLE) {
set(iarg - 1,Opcodes.TOP);
}
}
break;
case Opcodes.IASTORE:
case Opcodes.BASTORE:
case Opcodes.CASTORE:
case Opcodes.SASTORE:
case Opcodes.FASTORE:
case Opcodes.AASTORE:
pop(3);
break;
case Opcodes.LASTORE:
case Opcodes.DASTORE:
pop(4);
break;
case Opcodes.POP:
case Opcodes.IFEQ:
case Opcodes.IFNE:
case Opcodes.IFLT:
case Opcodes.IFGE:
case Opcodes.IFGT:
case Opcodes.IFLE:
case Opcodes.IRETURN:
case Opcodes.FRETURN:
case Opcodes.ARETURN:
case Opcodes.TABLESWITCH:
case Opcodes.LOOKUPSWITCH:
case Opcodes.ATHROW:
case Opcodes.MONITORENTER:
case Opcodes.MONITOREXIT:
case Opcodes.IFNULL:
case Opcodes.IFNONNULL:
pop(1);
break;
case Opcodes.POP2:
case Opcodes.IF_ICMPEQ:
case Opcodes.IF_ICMPNE:
case Opcodes.IF_ICMPLT:
case Opcodes.IF_ICMPGE:
case Opcodes.IF_ICMPGT:
case Opcodes.IF_ICMPLE:
case Opcodes.IF_ACMPEQ:
case Opcodes.IF_ACMPNE:
case Opcodes.LRETURN:
case Opcodes.DRETURN:
pop(2);
break;
case Opcodes.DUP:
t1=pop();
push(t1);
push(t1);
break;
case Opcodes.DUP_X1:
t1=pop();
t2=pop();
push(t1);
push(t2);
push(t1);
break;
case Opcodes.DUP_X2:
t1=pop();
t2=pop();
t3=pop();
push(t1);
push(t3);
push(t2);
push(t1);
break;
case Opcodes.DUP2:
t1=pop();
t2=pop();
push(t2);
push(t1);
push(t2);
push(t1);
break;
case Opcodes.DUP2_X1:
t1=pop();
t2=pop();
t3=pop();
push(t2);
push(t1);
push(t3);
push(t2);
push(t1);
break;
case Opcodes.DUP2_X2:
t1=pop();
t2=pop();
t3=pop();
t4=pop();
push(t2);
push(t1);
push(t4);
push(t3);
push(t2);
push(t1);
break;
case Opcodes.SWAP:
t1=pop();
t2=pop();
push(t1);
push(t2);
break;
case Opcodes.IADD:
case Opcodes.ISUB:
case Opcodes.IMUL:
case Opcodes.IDIV:
case Opcodes.IREM:
case Opcodes.IAND:
case Opcodes.IOR:
case Opcodes.IXOR:
case Opcodes.ISHL:
case Opcodes.ISHR:
case Opcodes.IUSHR:
case Opcodes.L2I:
case Opcodes.D2I:
case Opcodes.FCMPL:
case Opcodes.FCMPG:
pop(2);
push(Opcodes.INTEGER);
break;
case Opcodes.LADD:
case Opcodes.LSUB:
case Opcodes.LMUL:
case Opcodes.LDIV:
case Opcodes.LREM:
case Opcodes.LAND:
case Opcodes.LOR:
case Opcodes.LXOR:
pop(4);
push(Opcodes.LONG);
push(Opcodes.TOP);
break;
case Opcodes.FADD:
case Opcodes.FSUB:
case Opcodes.FMUL:
case Opcodes.FDIV:
case Opcodes.FREM:
case Opcodes.L2F:
case Opcodes.D2F:
pop(2);
push(Opcodes.FLOAT);
break;
case Opcodes.DADD:
case Opcodes.DSUB:
case Opcodes.DMUL:
case Opcodes.DDIV:
case Opcodes.DREM:
pop(4);
push(Opcodes.DOUBLE);
push(Opcodes.TOP);
break;
case Opcodes.LSHL:
case Opcodes.LSHR:
case Opcodes.LUSHR:
pop(3);
push(Opcodes.LONG);
push(Opcodes.TOP);
break;
case Opcodes.IINC:
set(iarg,Opcodes.INTEGER);
break;
case Opcodes.I2L:
case Opcodes.F2L:
pop(1);
push(Opcodes.LONG);
push(Opcodes.TOP);
break;
case Opcodes.I2F:
pop(1);
push(Opcodes.FLOAT);
break;
case Opcodes.I2D:
case Opcodes.F2D:
pop(1);
push(Opcodes.DOUBLE);
push(Opcodes.TOP);
break;
case Opcodes.F2I:
case Opcodes.ARRAYLENGTH:
case Opcodes.INSTANCEOF:
pop(1);
push(Opcodes.INTEGER);
break;
case Opcodes.LCMP:
case Opcodes.DCMPL:
case Opcodes.DCMPG:
pop(4);
push(Opcodes.INTEGER);
break;
case Opcodes.JSR:
case Opcodes.RET:
throw new RuntimeException(""String_Node_Str"");
case Opcodes.GETSTATIC:
pushDesc(sarg);
break;
case Opcodes.PUTSTATIC:
pop(sarg);
break;
case Opcodes.GETFIELD:
pop(1);
pushDesc(sarg);
break;
case Opcodes.PUTFIELD:
pop(sarg);
pop();
break;
case Opcodes.NEW:
push(labels.get(0));
break;
case Opcodes.NEWARRAY:
pop();
switch (iarg) {
case Opcodes.T_BOOLEAN:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_CHAR:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_BYTE:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_SHORT:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_INT:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_FLOAT:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_DOUBLE:
pushDesc(""String_Node_Str"");
break;
default :
pushDesc(""String_Node_Str"");
break;
}
break;
case Opcodes.ANEWARRAY:
pop();
pushDesc(""String_Node_Str"" + Type.getObjectType(sarg));
break;
case Opcodes.CHECKCAST:
pop();
pushDesc(Type.getObjectType(sarg).getDescriptor());
break;
default :
pop(iarg);
pushDesc(sarg);
break;
}
labels=null;
}","private void execute(final int opcode,final int iarg,final String sarg){
  if (this.locals == null) {
    labels=null;
    return;
  }
  Object t1, t2, t3, t4;
switch (opcode) {
case Opcodes.NOP:
case Opcodes.INEG:
case Opcodes.LNEG:
case Opcodes.FNEG:
case Opcodes.DNEG:
case Opcodes.I2B:
case Opcodes.I2C:
case Opcodes.I2S:
case Opcodes.GOTO:
case Opcodes.RETURN:
    break;
case Opcodes.ACONST_NULL:
  push(Opcodes.NULL);
break;
case Opcodes.ICONST_M1:
case Opcodes.ICONST_0:
case Opcodes.ICONST_1:
case Opcodes.ICONST_2:
case Opcodes.ICONST_3:
case Opcodes.ICONST_4:
case Opcodes.ICONST_5:
case Opcodes.BIPUSH:
case Opcodes.SIPUSH:
push(Opcodes.INTEGER);
break;
case Opcodes.LCONST_0:
case Opcodes.LCONST_1:
push(Opcodes.LONG);
push(Opcodes.TOP);
break;
case Opcodes.FCONST_0:
case Opcodes.FCONST_1:
case Opcodes.FCONST_2:
push(Opcodes.FLOAT);
break;
case Opcodes.DCONST_0:
case Opcodes.DCONST_1:
push(Opcodes.DOUBLE);
push(Opcodes.TOP);
break;
case Opcodes.ILOAD:
case Opcodes.FLOAD:
case Opcodes.ALOAD:
push(get(iarg));
break;
case Opcodes.LLOAD:
case Opcodes.DLOAD:
push(get(iarg));
push(Opcodes.TOP);
break;
case Opcodes.IALOAD:
case Opcodes.BALOAD:
case Opcodes.CALOAD:
case Opcodes.SALOAD:
pop(2);
push(Opcodes.INTEGER);
break;
case Opcodes.LALOAD:
case Opcodes.D2L:
pop(2);
push(Opcodes.LONG);
push(Opcodes.TOP);
break;
case Opcodes.FALOAD:
pop(2);
push(Opcodes.FLOAT);
break;
case Opcodes.DALOAD:
case Opcodes.L2D:
pop(2);
push(Opcodes.DOUBLE);
push(Opcodes.TOP);
break;
case Opcodes.AALOAD:
pop(1);
t1=pop();
pushDesc(((String)t1).substring(1));
break;
case Opcodes.ISTORE:
case Opcodes.FSTORE:
case Opcodes.ASTORE:
t1=pop();
set(iarg,t1);
if (iarg > 0) {
t2=get(iarg - 1);
if (t2 == Opcodes.LONG || t2 == Opcodes.DOUBLE) {
set(iarg - 1,Opcodes.TOP);
}
}
break;
case Opcodes.LSTORE:
case Opcodes.DSTORE:
pop(1);
t1=pop();
set(iarg,t1);
set(iarg + 1,Opcodes.TOP);
if (iarg > 0) {
t2=get(iarg - 1);
if (t2 == Opcodes.LONG || t2 == Opcodes.DOUBLE) {
set(iarg - 1,Opcodes.TOP);
}
}
break;
case Opcodes.IASTORE:
case Opcodes.BASTORE:
case Opcodes.CASTORE:
case Opcodes.SASTORE:
case Opcodes.FASTORE:
case Opcodes.AASTORE:
pop(3);
break;
case Opcodes.LASTORE:
case Opcodes.DASTORE:
pop(4);
break;
case Opcodes.POP:
case Opcodes.IFEQ:
case Opcodes.IFNE:
case Opcodes.IFLT:
case Opcodes.IFGE:
case Opcodes.IFGT:
case Opcodes.IFLE:
case Opcodes.IRETURN:
case Opcodes.FRETURN:
case Opcodes.ARETURN:
case Opcodes.TABLESWITCH:
case Opcodes.LOOKUPSWITCH:
case Opcodes.ATHROW:
case Opcodes.MONITORENTER:
case Opcodes.MONITOREXIT:
case Opcodes.IFNULL:
case Opcodes.IFNONNULL:
pop(1);
break;
case Opcodes.POP2:
case Opcodes.IF_ICMPEQ:
case Opcodes.IF_ICMPNE:
case Opcodes.IF_ICMPLT:
case Opcodes.IF_ICMPGE:
case Opcodes.IF_ICMPGT:
case Opcodes.IF_ICMPLE:
case Opcodes.IF_ACMPEQ:
case Opcodes.IF_ACMPNE:
case Opcodes.LRETURN:
case Opcodes.DRETURN:
pop(2);
break;
case Opcodes.DUP:
t1=pop();
push(t1);
push(t1);
break;
case Opcodes.DUP_X1:
t1=pop();
t2=pop();
push(t1);
push(t2);
push(t1);
break;
case Opcodes.DUP_X2:
t1=pop();
t2=pop();
t3=pop();
push(t1);
push(t3);
push(t2);
push(t1);
break;
case Opcodes.DUP2:
t1=pop();
t2=pop();
push(t2);
push(t1);
push(t2);
push(t1);
break;
case Opcodes.DUP2_X1:
t1=pop();
t2=pop();
t3=pop();
push(t2);
push(t1);
push(t3);
push(t2);
push(t1);
break;
case Opcodes.DUP2_X2:
t1=pop();
t2=pop();
t3=pop();
t4=pop();
push(t2);
push(t1);
push(t4);
push(t3);
push(t2);
push(t1);
break;
case Opcodes.SWAP:
t1=pop();
t2=pop();
push(t1);
push(t2);
break;
case Opcodes.IADD:
case Opcodes.ISUB:
case Opcodes.IMUL:
case Opcodes.IDIV:
case Opcodes.IREM:
case Opcodes.IAND:
case Opcodes.IOR:
case Opcodes.IXOR:
case Opcodes.ISHL:
case Opcodes.ISHR:
case Opcodes.IUSHR:
case Opcodes.L2I:
case Opcodes.D2I:
case Opcodes.FCMPL:
case Opcodes.FCMPG:
pop(2);
push(Opcodes.INTEGER);
break;
case Opcodes.LADD:
case Opcodes.LSUB:
case Opcodes.LMUL:
case Opcodes.LDIV:
case Opcodes.LREM:
case Opcodes.LAND:
case Opcodes.LOR:
case Opcodes.LXOR:
pop(4);
push(Opcodes.LONG);
push(Opcodes.TOP);
break;
case Opcodes.FADD:
case Opcodes.FSUB:
case Opcodes.FMUL:
case Opcodes.FDIV:
case Opcodes.FREM:
case Opcodes.L2F:
case Opcodes.D2F:
pop(2);
push(Opcodes.FLOAT);
break;
case Opcodes.DADD:
case Opcodes.DSUB:
case Opcodes.DMUL:
case Opcodes.DDIV:
case Opcodes.DREM:
pop(4);
push(Opcodes.DOUBLE);
push(Opcodes.TOP);
break;
case Opcodes.LSHL:
case Opcodes.LSHR:
case Opcodes.LUSHR:
pop(3);
push(Opcodes.LONG);
push(Opcodes.TOP);
break;
case Opcodes.IINC:
set(iarg,Opcodes.INTEGER);
break;
case Opcodes.I2L:
case Opcodes.F2L:
pop(1);
push(Opcodes.LONG);
push(Opcodes.TOP);
break;
case Opcodes.I2F:
pop(1);
push(Opcodes.FLOAT);
break;
case Opcodes.I2D:
case Opcodes.F2D:
pop(1);
push(Opcodes.DOUBLE);
push(Opcodes.TOP);
break;
case Opcodes.F2I:
case Opcodes.ARRAYLENGTH:
case Opcodes.INSTANCEOF:
pop(1);
push(Opcodes.INTEGER);
break;
case Opcodes.LCMP:
case Opcodes.DCMPL:
case Opcodes.DCMPG:
pop(4);
push(Opcodes.INTEGER);
break;
case Opcodes.JSR:
case Opcodes.RET:
throw new RuntimeException(""String_Node_Str"");
case Opcodes.GETSTATIC:
pushDesc(sarg);
break;
case Opcodes.PUTSTATIC:
pop(sarg);
break;
case Opcodes.GETFIELD:
pop(1);
pushDesc(sarg);
break;
case Opcodes.PUTFIELD:
pop(sarg);
pop();
break;
case Opcodes.NEW:
push(labels.get(0));
break;
case Opcodes.NEWARRAY:
pop();
switch (iarg) {
case Opcodes.T_BOOLEAN:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_CHAR:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_BYTE:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_SHORT:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_INT:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_FLOAT:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_DOUBLE:
pushDesc(""String_Node_Str"");
break;
default :
pushDesc(""String_Node_Str"");
break;
}
break;
case Opcodes.ANEWARRAY:
pop();
pushDesc(""String_Node_Str"" + Type.getObjectType(sarg));
break;
case Opcodes.CHECKCAST:
pop();
pushDesc(Type.getObjectType(sarg).getDescriptor());
break;
default :
pop(iarg);
pushDesc(sarg);
break;
}
labels=null;
}",0.998581560283688
10980,"/** 
 * Creates a new   {@link AnalyzerAdapter}.
 * @param owner the owner's class name.
 * @param access the method's access flags (see {@link Opcodes}).
 * @param name the method's name.
 * @param desc the method's descriptor (see {@link Type Type}).
 * @param mv the method visitor to which this adapter delegates calls. Maybe <tt>null</tt>.
 */
public AnalyzerAdapter(final String owner,final int access,final String name,final String desc,final MethodVisitor mv){
  super(mv);
  locals=new ArrayList();
  stack=new ArrayList();
  uninitializedTypes=new HashMap();
  if ((access & Opcodes.ACC_STATIC) == 0) {
    if (""String_Node_Str"".equals(name)) {
      locals.add(Opcodes.UNINITIALIZED_THIS);
    }
 else {
      locals.add(owner);
    }
  }
  Type[] types=Type.getArgumentTypes(desc);
  for (int i=0; i < types.length; ++i) {
    Type type=types[i];
switch (type.getSort()) {
case Type.BOOLEAN:
case Type.CHAR:
case Type.BYTE:
case Type.SHORT:
case Type.INT:
      locals.add(Opcodes.INTEGER);
    break;
case Type.FLOAT:
  locals.add(Opcodes.FLOAT);
break;
case Type.LONG:
locals.add(Opcodes.LONG);
locals.add(Opcodes.TOP);
break;
case Type.DOUBLE:
locals.add(Opcodes.DOUBLE);
locals.add(Opcodes.TOP);
break;
case Type.ARRAY:
locals.add(types[i].getDescriptor());
break;
default :
locals.add(types[i].getInternalName());
}
}
}","/** 
 * Creates a new   {@link AnalyzerAdapter}.
 * @param owner the owner's class name.
 * @param access the method's access flags (see {@link Opcodes}).
 * @param name the method's name.
 * @param desc the method's descriptor (see {@link Type Type}).
 * @param mv the method visitor to which this adapter delegates calls. Maybe <tt>null</tt>.
 */
public AnalyzerAdapter(final String owner,final int access,final String name,final String desc,final MethodVisitor mv){
  super(mv);
  this.owner=owner;
  locals=new ArrayList();
  stack=new ArrayList();
  uninitializedTypes=new HashMap();
  if ((access & Opcodes.ACC_STATIC) == 0) {
    if (""String_Node_Str"".equals(name)) {
      locals.add(Opcodes.UNINITIALIZED_THIS);
    }
 else {
      locals.add(owner);
    }
  }
  Type[] types=Type.getArgumentTypes(desc);
  for (int i=0; i < types.length; ++i) {
    Type type=types[i];
switch (type.getSort()) {
case Type.BOOLEAN:
case Type.CHAR:
case Type.BYTE:
case Type.SHORT:
case Type.INT:
      locals.add(Opcodes.INTEGER);
    break;
case Type.FLOAT:
  locals.add(Opcodes.FLOAT);
break;
case Type.LONG:
locals.add(Opcodes.LONG);
locals.add(Opcodes.TOP);
break;
case Type.DOUBLE:
locals.add(Opcodes.DOUBLE);
locals.add(Opcodes.TOP);
break;
case Type.ARRAY:
locals.add(types[i].getDescriptor());
break;
default :
locals.add(types[i].getInternalName());
}
}
}",0.9925705794947994
10981,"public void visitLdcInsn(final Object cst){
  if (mv != null) {
    mv.visitLdcInsn(cst);
  }
  if (cst instanceof Integer) {
    push(Opcodes.INTEGER);
  }
 else   if (cst instanceof Long) {
    push(Opcodes.LONG);
    push(Opcodes.TOP);
  }
 else   if (cst instanceof Float) {
    push(Opcodes.FLOAT);
  }
 else   if (cst instanceof Double) {
    push(Opcodes.DOUBLE);
    push(Opcodes.TOP);
  }
 else   if (cst instanceof String) {
    push(""String_Node_Str"");
  }
 else   if (cst instanceof Type) {
    push(""String_Node_Str"");
  }
 else {
    throw new IllegalArgumentException();
  }
  labels=null;
}","public void visitLdcInsn(final Object cst){
  if (mv != null) {
    mv.visitLdcInsn(cst);
  }
  if (this.locals == null) {
    labels=null;
    return;
  }
  if (cst instanceof Integer) {
    push(Opcodes.INTEGER);
  }
 else   if (cst instanceof Long) {
    push(Opcodes.LONG);
    push(Opcodes.TOP);
  }
 else   if (cst instanceof Float) {
    push(Opcodes.FLOAT);
  }
 else   if (cst instanceof Double) {
    push(Opcodes.DOUBLE);
    push(Opcodes.TOP);
  }
 else   if (cst instanceof String) {
    push(""String_Node_Str"");
  }
 else   if (cst instanceof Type) {
    push(""String_Node_Str"");
  }
 else {
    throw new IllegalArgumentException();
  }
  labels=null;
}",0.9513343799058084
10982,"@Override public void beforeReadAccess(Object obj,long field){
  ReadFieldAccess next=readSet.getNext();
  currentReadFieldAccess=next;
  next.init(obj,field);
  lastReadLock=LockTable.checkLock(next.hashCode(),localClock);
}","@Override public void beforeReadAccess(Object obj,long field){
  ReadFieldAccess next=readSet.getNext();
  currentReadFieldAccess=next;
  next.init(obj,field);
  lastReadLock=LockTable.checkLock(next.hashCode(),localClock,locksMarker);
}",0.974025974025974
10983,"@Override public boolean commit(){
  try {
    if (writeSet.isEmpty())     return true;
    try {
      writeSet.forEach(lockProcedure);
      readSet.checkClock(localClock);
    }
 catch (    TransactionException exception) {
      lockProcedure.unlockAll();
      return false;
    }
    writeSet.forEach(putProcedure);
    lockProcedure.setAndUnlockAll();
    return true;
  }
  finally {
    if (irrevocableState) {
      irrevocableState=false;
      irrevocableAccessLock.writeLock().unlock();
    }
 else {
      irrevocableAccessLock.readLock().unlock();
    }
  }
}","@Override public boolean commit(){
  try {
    if (writeSet.isEmpty())     return true;
    try {
      writeSet.forEach(lockProcedure);
      readSet.checkClock(localClock,locksMarker);
    }
 catch (    TransactionException exception) {
      lockProcedure.unlockAll();
      return false;
    }
    writeSet.forEach(putProcedure);
    lockProcedure.setAndUnlockAll();
    return true;
  }
  finally {
    if (irrevocableState) {
      irrevocableState=false;
      irrevocableAccessLock.writeLock().unlock();
    }
 else {
      irrevocableAccessLock.readLock().unlock();
    }
  }
}",0.9896551724137932
10984,"public void checkClock(int clock){
  for (int i=0; i < nextAvaliable; i++) {
    LockTable.checkLock(readSet[i].hashCode(),clock);
    readSet[i].clear();
  }
}","public void checkClock(int clock,byte[] contextLocks){
  for (int i=0; i < nextAvaliable; i++) {
    LockTable.checkLock(readSet[i].hashCode(),clock,contextLocks);
    readSet[i].clear();
  }
}",0.906515580736544
10985,"public void visitMethodInsn(final int opcode,final String owner,final String name,final String desc){
  if (mv != null) {
    mv.visitMethodInsn(opcode,owner,name,desc);
  }
  pop(desc);
  if (opcode != Opcodes.INVOKESTATIC && opcode != Opcodes.INVOKEDYNAMIC) {
    Object t=pop();
    if (opcode == Opcodes.INVOKESPECIAL && name.charAt(0) == '<') {
      Object u;
      if (t == Opcodes.UNINITIALIZED_THIS) {
        u=owner;
      }
 else {
        u=uninitializedTypes.get(t);
      }
      for (int i=0; i < locals.size(); ++i) {
        if (locals.get(i) == t) {
          locals.set(i,u);
        }
      }
      for (int i=0; i < stack.size(); ++i) {
        if (stack.get(i) == t) {
          stack.set(i,u);
        }
      }
    }
  }
  pushDesc(desc);
  labels=null;
}","public void visitMethodInsn(final int opcode,final String owner,final String name,final String desc){
  if (mv != null) {
    mv.visitMethodInsn(opcode,owner,name,desc);
  }
  if (this.locals == null) {
    labels=null;
    return;
  }
  pop(desc);
  if (opcode != Opcodes.INVOKESTATIC && opcode != Opcodes.INVOKEDYNAMIC) {
    Object t=pop();
    if (opcode == Opcodes.INVOKESPECIAL && name.charAt(0) == '<') {
      Object u;
      if (t == Opcodes.UNINITIALIZED_THIS) {
        u=this.owner;
      }
 else {
        u=uninitializedTypes.get(t);
      }
      for (int i=0; i < locals.size(); ++i) {
        if (locals.get(i) == t) {
          locals.set(i,u);
        }
      }
      for (int i=0; i < stack.size(); ++i) {
        if (stack.get(i) == t) {
          stack.set(i,u);
        }
      }
    }
  }
  pushDesc(desc);
  labels=null;
}",0.958819913952059
10986,"private void execute(final int opcode,final int iarg,final String sarg){
  if (this.locals == null) {
    return;
  }
  Object t1, t2, t3, t4;
switch (opcode) {
case Opcodes.NOP:
case Opcodes.INEG:
case Opcodes.LNEG:
case Opcodes.FNEG:
case Opcodes.DNEG:
case Opcodes.I2B:
case Opcodes.I2C:
case Opcodes.I2S:
case Opcodes.GOTO:
case Opcodes.RETURN:
    break;
case Opcodes.ACONST_NULL:
  push(Opcodes.NULL);
break;
case Opcodes.ICONST_M1:
case Opcodes.ICONST_0:
case Opcodes.ICONST_1:
case Opcodes.ICONST_2:
case Opcodes.ICONST_3:
case Opcodes.ICONST_4:
case Opcodes.ICONST_5:
case Opcodes.BIPUSH:
case Opcodes.SIPUSH:
push(Opcodes.INTEGER);
break;
case Opcodes.LCONST_0:
case Opcodes.LCONST_1:
push(Opcodes.LONG);
push(Opcodes.TOP);
break;
case Opcodes.FCONST_0:
case Opcodes.FCONST_1:
case Opcodes.FCONST_2:
push(Opcodes.FLOAT);
break;
case Opcodes.DCONST_0:
case Opcodes.DCONST_1:
push(Opcodes.DOUBLE);
push(Opcodes.TOP);
break;
case Opcodes.ILOAD:
case Opcodes.FLOAD:
case Opcodes.ALOAD:
push(get(iarg));
break;
case Opcodes.LLOAD:
case Opcodes.DLOAD:
push(get(iarg));
push(Opcodes.TOP);
break;
case Opcodes.IALOAD:
case Opcodes.BALOAD:
case Opcodes.CALOAD:
case Opcodes.SALOAD:
pop(2);
push(Opcodes.INTEGER);
break;
case Opcodes.LALOAD:
case Opcodes.D2L:
pop(2);
push(Opcodes.LONG);
push(Opcodes.TOP);
break;
case Opcodes.FALOAD:
pop(2);
push(Opcodes.FLOAT);
break;
case Opcodes.DALOAD:
case Opcodes.L2D:
pop(2);
push(Opcodes.DOUBLE);
push(Opcodes.TOP);
break;
case Opcodes.AALOAD:
pop(1);
t1=pop();
pushDesc(((String)t1).substring(1));
break;
case Opcodes.ISTORE:
case Opcodes.FSTORE:
case Opcodes.ASTORE:
t1=pop();
set(iarg,t1);
if (iarg > 0) {
t2=get(iarg - 1);
if (t2 == Opcodes.LONG || t2 == Opcodes.DOUBLE) {
set(iarg - 1,Opcodes.TOP);
}
}
break;
case Opcodes.LSTORE:
case Opcodes.DSTORE:
pop(1);
t1=pop();
set(iarg,t1);
set(iarg + 1,Opcodes.TOP);
if (iarg > 0) {
t2=get(iarg - 1);
if (t2 == Opcodes.LONG || t2 == Opcodes.DOUBLE) {
set(iarg - 1,Opcodes.TOP);
}
}
break;
case Opcodes.IASTORE:
case Opcodes.BASTORE:
case Opcodes.CASTORE:
case Opcodes.SASTORE:
case Opcodes.FASTORE:
case Opcodes.AASTORE:
pop(3);
break;
case Opcodes.LASTORE:
case Opcodes.DASTORE:
pop(4);
break;
case Opcodes.POP:
case Opcodes.IFEQ:
case Opcodes.IFNE:
case Opcodes.IFLT:
case Opcodes.IFGE:
case Opcodes.IFGT:
case Opcodes.IFLE:
case Opcodes.IRETURN:
case Opcodes.FRETURN:
case Opcodes.ARETURN:
case Opcodes.TABLESWITCH:
case Opcodes.LOOKUPSWITCH:
case Opcodes.ATHROW:
case Opcodes.MONITORENTER:
case Opcodes.MONITOREXIT:
case Opcodes.IFNULL:
case Opcodes.IFNONNULL:
pop(1);
break;
case Opcodes.POP2:
case Opcodes.IF_ICMPEQ:
case Opcodes.IF_ICMPNE:
case Opcodes.IF_ICMPLT:
case Opcodes.IF_ICMPGE:
case Opcodes.IF_ICMPGT:
case Opcodes.IF_ICMPLE:
case Opcodes.IF_ACMPEQ:
case Opcodes.IF_ACMPNE:
case Opcodes.LRETURN:
case Opcodes.DRETURN:
pop(2);
break;
case Opcodes.DUP:
t1=pop();
push(t1);
push(t1);
break;
case Opcodes.DUP_X1:
t1=pop();
t2=pop();
push(t1);
push(t2);
push(t1);
break;
case Opcodes.DUP_X2:
t1=pop();
t2=pop();
t3=pop();
push(t1);
push(t3);
push(t2);
push(t1);
break;
case Opcodes.DUP2:
t1=pop();
t2=pop();
push(t2);
push(t1);
push(t2);
push(t1);
break;
case Opcodes.DUP2_X1:
t1=pop();
t2=pop();
t3=pop();
push(t2);
push(t1);
push(t3);
push(t2);
push(t1);
break;
case Opcodes.DUP2_X2:
t1=pop();
t2=pop();
t3=pop();
t4=pop();
push(t2);
push(t1);
push(t4);
push(t3);
push(t2);
push(t1);
break;
case Opcodes.SWAP:
t1=pop();
t2=pop();
push(t1);
push(t2);
break;
case Opcodes.IADD:
case Opcodes.ISUB:
case Opcodes.IMUL:
case Opcodes.IDIV:
case Opcodes.IREM:
case Opcodes.IAND:
case Opcodes.IOR:
case Opcodes.IXOR:
case Opcodes.ISHL:
case Opcodes.ISHR:
case Opcodes.IUSHR:
case Opcodes.L2I:
case Opcodes.D2I:
case Opcodes.FCMPL:
case Opcodes.FCMPG:
pop(2);
push(Opcodes.INTEGER);
break;
case Opcodes.LADD:
case Opcodes.LSUB:
case Opcodes.LMUL:
case Opcodes.LDIV:
case Opcodes.LREM:
case Opcodes.LAND:
case Opcodes.LOR:
case Opcodes.LXOR:
pop(4);
push(Opcodes.LONG);
push(Opcodes.TOP);
break;
case Opcodes.FADD:
case Opcodes.FSUB:
case Opcodes.FMUL:
case Opcodes.FDIV:
case Opcodes.FREM:
case Opcodes.L2F:
case Opcodes.D2F:
pop(2);
push(Opcodes.FLOAT);
break;
case Opcodes.DADD:
case Opcodes.DSUB:
case Opcodes.DMUL:
case Opcodes.DDIV:
case Opcodes.DREM:
pop(4);
push(Opcodes.DOUBLE);
push(Opcodes.TOP);
break;
case Opcodes.LSHL:
case Opcodes.LSHR:
case Opcodes.LUSHR:
pop(3);
push(Opcodes.LONG);
push(Opcodes.TOP);
break;
case Opcodes.IINC:
set(iarg,Opcodes.INTEGER);
break;
case Opcodes.I2L:
case Opcodes.F2L:
pop(1);
push(Opcodes.LONG);
push(Opcodes.TOP);
break;
case Opcodes.I2F:
pop(1);
push(Opcodes.FLOAT);
break;
case Opcodes.I2D:
case Opcodes.F2D:
pop(1);
push(Opcodes.DOUBLE);
push(Opcodes.TOP);
break;
case Opcodes.F2I:
case Opcodes.ARRAYLENGTH:
case Opcodes.INSTANCEOF:
pop(1);
push(Opcodes.INTEGER);
break;
case Opcodes.LCMP:
case Opcodes.DCMPL:
case Opcodes.DCMPG:
pop(4);
push(Opcodes.INTEGER);
break;
case Opcodes.JSR:
case Opcodes.RET:
throw new RuntimeException(""String_Node_Str"");
case Opcodes.GETSTATIC:
pushDesc(sarg);
break;
case Opcodes.PUTSTATIC:
pop(sarg);
break;
case Opcodes.GETFIELD:
pop(1);
pushDesc(sarg);
break;
case Opcodes.PUTFIELD:
pop(sarg);
pop();
break;
case Opcodes.NEW:
push(labels.get(0));
break;
case Opcodes.NEWARRAY:
pop();
switch (iarg) {
case Opcodes.T_BOOLEAN:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_CHAR:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_BYTE:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_SHORT:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_INT:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_FLOAT:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_DOUBLE:
pushDesc(""String_Node_Str"");
break;
default :
pushDesc(""String_Node_Str"");
break;
}
break;
case Opcodes.ANEWARRAY:
pop();
pushDesc(""String_Node_Str"" + Type.getObjectType(sarg));
break;
case Opcodes.CHECKCAST:
pop();
pushDesc(Type.getObjectType(sarg).getDescriptor());
break;
default :
pop(iarg);
pushDesc(sarg);
break;
}
labels=null;
}","private void execute(final int opcode,final int iarg,final String sarg){
  if (this.locals == null) {
    labels=null;
    return;
  }
  Object t1, t2, t3, t4;
switch (opcode) {
case Opcodes.NOP:
case Opcodes.INEG:
case Opcodes.LNEG:
case Opcodes.FNEG:
case Opcodes.DNEG:
case Opcodes.I2B:
case Opcodes.I2C:
case Opcodes.I2S:
case Opcodes.GOTO:
case Opcodes.RETURN:
    break;
case Opcodes.ACONST_NULL:
  push(Opcodes.NULL);
break;
case Opcodes.ICONST_M1:
case Opcodes.ICONST_0:
case Opcodes.ICONST_1:
case Opcodes.ICONST_2:
case Opcodes.ICONST_3:
case Opcodes.ICONST_4:
case Opcodes.ICONST_5:
case Opcodes.BIPUSH:
case Opcodes.SIPUSH:
push(Opcodes.INTEGER);
break;
case Opcodes.LCONST_0:
case Opcodes.LCONST_1:
push(Opcodes.LONG);
push(Opcodes.TOP);
break;
case Opcodes.FCONST_0:
case Opcodes.FCONST_1:
case Opcodes.FCONST_2:
push(Opcodes.FLOAT);
break;
case Opcodes.DCONST_0:
case Opcodes.DCONST_1:
push(Opcodes.DOUBLE);
push(Opcodes.TOP);
break;
case Opcodes.ILOAD:
case Opcodes.FLOAD:
case Opcodes.ALOAD:
push(get(iarg));
break;
case Opcodes.LLOAD:
case Opcodes.DLOAD:
push(get(iarg));
push(Opcodes.TOP);
break;
case Opcodes.IALOAD:
case Opcodes.BALOAD:
case Opcodes.CALOAD:
case Opcodes.SALOAD:
pop(2);
push(Opcodes.INTEGER);
break;
case Opcodes.LALOAD:
case Opcodes.D2L:
pop(2);
push(Opcodes.LONG);
push(Opcodes.TOP);
break;
case Opcodes.FALOAD:
pop(2);
push(Opcodes.FLOAT);
break;
case Opcodes.DALOAD:
case Opcodes.L2D:
pop(2);
push(Opcodes.DOUBLE);
push(Opcodes.TOP);
break;
case Opcodes.AALOAD:
pop(1);
t1=pop();
pushDesc(((String)t1).substring(1));
break;
case Opcodes.ISTORE:
case Opcodes.FSTORE:
case Opcodes.ASTORE:
t1=pop();
set(iarg,t1);
if (iarg > 0) {
t2=get(iarg - 1);
if (t2 == Opcodes.LONG || t2 == Opcodes.DOUBLE) {
set(iarg - 1,Opcodes.TOP);
}
}
break;
case Opcodes.LSTORE:
case Opcodes.DSTORE:
pop(1);
t1=pop();
set(iarg,t1);
set(iarg + 1,Opcodes.TOP);
if (iarg > 0) {
t2=get(iarg - 1);
if (t2 == Opcodes.LONG || t2 == Opcodes.DOUBLE) {
set(iarg - 1,Opcodes.TOP);
}
}
break;
case Opcodes.IASTORE:
case Opcodes.BASTORE:
case Opcodes.CASTORE:
case Opcodes.SASTORE:
case Opcodes.FASTORE:
case Opcodes.AASTORE:
pop(3);
break;
case Opcodes.LASTORE:
case Opcodes.DASTORE:
pop(4);
break;
case Opcodes.POP:
case Opcodes.IFEQ:
case Opcodes.IFNE:
case Opcodes.IFLT:
case Opcodes.IFGE:
case Opcodes.IFGT:
case Opcodes.IFLE:
case Opcodes.IRETURN:
case Opcodes.FRETURN:
case Opcodes.ARETURN:
case Opcodes.TABLESWITCH:
case Opcodes.LOOKUPSWITCH:
case Opcodes.ATHROW:
case Opcodes.MONITORENTER:
case Opcodes.MONITOREXIT:
case Opcodes.IFNULL:
case Opcodes.IFNONNULL:
pop(1);
break;
case Opcodes.POP2:
case Opcodes.IF_ICMPEQ:
case Opcodes.IF_ICMPNE:
case Opcodes.IF_ICMPLT:
case Opcodes.IF_ICMPGE:
case Opcodes.IF_ICMPGT:
case Opcodes.IF_ICMPLE:
case Opcodes.IF_ACMPEQ:
case Opcodes.IF_ACMPNE:
case Opcodes.LRETURN:
case Opcodes.DRETURN:
pop(2);
break;
case Opcodes.DUP:
t1=pop();
push(t1);
push(t1);
break;
case Opcodes.DUP_X1:
t1=pop();
t2=pop();
push(t1);
push(t2);
push(t1);
break;
case Opcodes.DUP_X2:
t1=pop();
t2=pop();
t3=pop();
push(t1);
push(t3);
push(t2);
push(t1);
break;
case Opcodes.DUP2:
t1=pop();
t2=pop();
push(t2);
push(t1);
push(t2);
push(t1);
break;
case Opcodes.DUP2_X1:
t1=pop();
t2=pop();
t3=pop();
push(t2);
push(t1);
push(t3);
push(t2);
push(t1);
break;
case Opcodes.DUP2_X2:
t1=pop();
t2=pop();
t3=pop();
t4=pop();
push(t2);
push(t1);
push(t4);
push(t3);
push(t2);
push(t1);
break;
case Opcodes.SWAP:
t1=pop();
t2=pop();
push(t1);
push(t2);
break;
case Opcodes.IADD:
case Opcodes.ISUB:
case Opcodes.IMUL:
case Opcodes.IDIV:
case Opcodes.IREM:
case Opcodes.IAND:
case Opcodes.IOR:
case Opcodes.IXOR:
case Opcodes.ISHL:
case Opcodes.ISHR:
case Opcodes.IUSHR:
case Opcodes.L2I:
case Opcodes.D2I:
case Opcodes.FCMPL:
case Opcodes.FCMPG:
pop(2);
push(Opcodes.INTEGER);
break;
case Opcodes.LADD:
case Opcodes.LSUB:
case Opcodes.LMUL:
case Opcodes.LDIV:
case Opcodes.LREM:
case Opcodes.LAND:
case Opcodes.LOR:
case Opcodes.LXOR:
pop(4);
push(Opcodes.LONG);
push(Opcodes.TOP);
break;
case Opcodes.FADD:
case Opcodes.FSUB:
case Opcodes.FMUL:
case Opcodes.FDIV:
case Opcodes.FREM:
case Opcodes.L2F:
case Opcodes.D2F:
pop(2);
push(Opcodes.FLOAT);
break;
case Opcodes.DADD:
case Opcodes.DSUB:
case Opcodes.DMUL:
case Opcodes.DDIV:
case Opcodes.DREM:
pop(4);
push(Opcodes.DOUBLE);
push(Opcodes.TOP);
break;
case Opcodes.LSHL:
case Opcodes.LSHR:
case Opcodes.LUSHR:
pop(3);
push(Opcodes.LONG);
push(Opcodes.TOP);
break;
case Opcodes.IINC:
set(iarg,Opcodes.INTEGER);
break;
case Opcodes.I2L:
case Opcodes.F2L:
pop(1);
push(Opcodes.LONG);
push(Opcodes.TOP);
break;
case Opcodes.I2F:
pop(1);
push(Opcodes.FLOAT);
break;
case Opcodes.I2D:
case Opcodes.F2D:
pop(1);
push(Opcodes.DOUBLE);
push(Opcodes.TOP);
break;
case Opcodes.F2I:
case Opcodes.ARRAYLENGTH:
case Opcodes.INSTANCEOF:
pop(1);
push(Opcodes.INTEGER);
break;
case Opcodes.LCMP:
case Opcodes.DCMPL:
case Opcodes.DCMPG:
pop(4);
push(Opcodes.INTEGER);
break;
case Opcodes.JSR:
case Opcodes.RET:
throw new RuntimeException(""String_Node_Str"");
case Opcodes.GETSTATIC:
pushDesc(sarg);
break;
case Opcodes.PUTSTATIC:
pop(sarg);
break;
case Opcodes.GETFIELD:
pop(1);
pushDesc(sarg);
break;
case Opcodes.PUTFIELD:
pop(sarg);
pop();
break;
case Opcodes.NEW:
push(labels.get(0));
break;
case Opcodes.NEWARRAY:
pop();
switch (iarg) {
case Opcodes.T_BOOLEAN:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_CHAR:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_BYTE:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_SHORT:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_INT:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_FLOAT:
pushDesc(""String_Node_Str"");
break;
case Opcodes.T_DOUBLE:
pushDesc(""String_Node_Str"");
break;
default :
pushDesc(""String_Node_Str"");
break;
}
break;
case Opcodes.ANEWARRAY:
pop();
pushDesc(""String_Node_Str"" + Type.getObjectType(sarg));
break;
case Opcodes.CHECKCAST:
pop();
pushDesc(Type.getObjectType(sarg).getDescriptor());
break;
default :
pop(iarg);
pushDesc(sarg);
break;
}
labels=null;
}",0.998581560283688
10987,"/** 
 * Creates a new   {@link AnalyzerAdapter}.
 * @param owner the owner's class name.
 * @param access the method's access flags (see {@link Opcodes}).
 * @param name the method's name.
 * @param desc the method's descriptor (see {@link Type Type}).
 * @param mv the method visitor to which this adapter delegates calls. Maybe <tt>null</tt>.
 */
public AnalyzerAdapter(final String owner,final int access,final String name,final String desc,final MethodVisitor mv){
  super(mv);
  locals=new ArrayList();
  stack=new ArrayList();
  uninitializedTypes=new HashMap();
  if ((access & Opcodes.ACC_STATIC) == 0) {
    if (""String_Node_Str"".equals(name)) {
      locals.add(Opcodes.UNINITIALIZED_THIS);
    }
 else {
      locals.add(owner);
    }
  }
  Type[] types=Type.getArgumentTypes(desc);
  for (int i=0; i < types.length; ++i) {
    Type type=types[i];
switch (type.getSort()) {
case Type.BOOLEAN:
case Type.CHAR:
case Type.BYTE:
case Type.SHORT:
case Type.INT:
      locals.add(Opcodes.INTEGER);
    break;
case Type.FLOAT:
  locals.add(Opcodes.FLOAT);
break;
case Type.LONG:
locals.add(Opcodes.LONG);
locals.add(Opcodes.TOP);
break;
case Type.DOUBLE:
locals.add(Opcodes.DOUBLE);
locals.add(Opcodes.TOP);
break;
case Type.ARRAY:
locals.add(types[i].getDescriptor());
break;
default :
locals.add(types[i].getInternalName());
}
}
}","/** 
 * Creates a new   {@link AnalyzerAdapter}.
 * @param owner the owner's class name.
 * @param access the method's access flags (see {@link Opcodes}).
 * @param name the method's name.
 * @param desc the method's descriptor (see {@link Type Type}).
 * @param mv the method visitor to which this adapter delegates calls. Maybe <tt>null</tt>.
 */
public AnalyzerAdapter(final String owner,final int access,final String name,final String desc,final MethodVisitor mv){
  super(mv);
  this.owner=owner;
  locals=new ArrayList();
  stack=new ArrayList();
  uninitializedTypes=new HashMap();
  if ((access & Opcodes.ACC_STATIC) == 0) {
    if (""String_Node_Str"".equals(name)) {
      locals.add(Opcodes.UNINITIALIZED_THIS);
    }
 else {
      locals.add(owner);
    }
  }
  Type[] types=Type.getArgumentTypes(desc);
  for (int i=0; i < types.length; ++i) {
    Type type=types[i];
switch (type.getSort()) {
case Type.BOOLEAN:
case Type.CHAR:
case Type.BYTE:
case Type.SHORT:
case Type.INT:
      locals.add(Opcodes.INTEGER);
    break;
case Type.FLOAT:
  locals.add(Opcodes.FLOAT);
break;
case Type.LONG:
locals.add(Opcodes.LONG);
locals.add(Opcodes.TOP);
break;
case Type.DOUBLE:
locals.add(Opcodes.DOUBLE);
locals.add(Opcodes.TOP);
break;
case Type.ARRAY:
locals.add(types[i].getDescriptor());
break;
default :
locals.add(types[i].getInternalName());
}
}
}",0.9925705794947994
10988,"public void visitLdcInsn(final Object cst){
  if (mv != null) {
    mv.visitLdcInsn(cst);
  }
  if (cst instanceof Integer) {
    push(Opcodes.INTEGER);
  }
 else   if (cst instanceof Long) {
    push(Opcodes.LONG);
    push(Opcodes.TOP);
  }
 else   if (cst instanceof Float) {
    push(Opcodes.FLOAT);
  }
 else   if (cst instanceof Double) {
    push(Opcodes.DOUBLE);
    push(Opcodes.TOP);
  }
 else   if (cst instanceof String) {
    push(""String_Node_Str"");
  }
 else   if (cst instanceof Type) {
    push(""String_Node_Str"");
  }
 else {
    throw new IllegalArgumentException();
  }
  labels=null;
}","public void visitLdcInsn(final Object cst){
  if (mv != null) {
    mv.visitLdcInsn(cst);
  }
  if (this.locals == null) {
    labels=null;
    return;
  }
  if (cst instanceof Integer) {
    push(Opcodes.INTEGER);
  }
 else   if (cst instanceof Long) {
    push(Opcodes.LONG);
    push(Opcodes.TOP);
  }
 else   if (cst instanceof Float) {
    push(Opcodes.FLOAT);
  }
 else   if (cst instanceof Double) {
    push(Opcodes.DOUBLE);
    push(Opcodes.TOP);
  }
 else   if (cst instanceof String) {
    push(""String_Node_Str"");
  }
 else   if (cst instanceof Type) {
    push(""String_Node_Str"");
  }
 else {
    throw new IllegalArgumentException();
  }
  labels=null;
}",0.9513343799058084
10989,"private final WriteFieldAccess onReadAccess0(Object obj,long field){
  ReadFieldAccess current=readSet.getCurrent();
  int hash=current.hashCode();
  long lock=LockTable.getLock(hash);
  int version=LockTable.getVersion(lock);
  while (LockTable.isLocked(lock)) {
    int lockOwner=LockTable.getOwner(lock);
    Context ownerCtx=threads[lockOwner];
    Action action=cm.resolveReadConflict(current,this,ownerCtx);
    if (action.equals(Action.RESTART)) {
      stats.reportAbort(AbortType.SPECULATION_LOCATION_LOCKED);
      throw FAILURE_EXCEPTION;
    }
    if (action.equals(Action.RETRY)) {
      lock=LockTable.getLock(hash);
      continue;
    }
    if (action.equals(Action.CONTINUE)) {
      break;
    }
  }
  if (version > lastReadLockVersion) {
    stats.reportAbort(AbortType.SPECULATION_READVERSION);
    throw FAILURE_EXCEPTION;
  }
  if (cm.requiresPriorities()) {
    karma.incrementAndGet();
  }
  cm.init();
  return writeSet.contains(current);
}","private final WriteFieldAccess onReadAccess0(Object obj,long field){
  ReadFieldAccess current=readSet.getCurrent();
  int hash=current.hashCode();
  long lock=LockTable.getLock(hash);
  while (LockTable.isLocked(lock)) {
    int lockOwner=LockTable.getOwner(lock);
    Context ownerCtx=threads[lockOwner];
    Action action=cm.resolveReadConflict(current,this,ownerCtx);
    if (action.equals(Action.RESTART)) {
      stats.reportAbort(AbortType.SPECULATION_LOCATION_LOCKED);
      throw FAILURE_EXCEPTION;
    }
    if (action.equals(Action.RETRY)) {
      lock=LockTable.getLock(hash);
      continue;
    }
    if (action.equals(Action.CONTINUE)) {
      break;
    }
  }
  int version=LockTable.getVersion(lock);
  if (version > lastReadLockVersion) {
    stats.reportAbort(AbortType.SPECULATION_READVERSION);
    throw FAILURE_EXCEPTION;
  }
  if (cm.requiresPriorities()) {
    karma.incrementAndGet();
  }
  cm.init();
  return writeSet.contains(current);
}",0.9564766839378238
10990,"public double onReadAccess(Object obj,double value,long field){
  Object v=onReadAccess(obj,field,Type.DOUBLE);
  return (v == null ? value : ((Number)v).doubleValue());
}","public double onReadAccess(Object obj,double value,long field){
  return (onReadAccess(obj,field,Type.DOUBLE) ? ((Number)readValue).doubleValue() : value);
}",0.823170731707317
10991,"public Object get(int hash,Object obj,long field){
  WriteFieldAccess w=entries.get(hash);
  while (w != null) {
    if (w.getReference() == obj && w.getField() == field)     return w.getValue();
    w=w.getNext();
  }
  return null;
}","public WriteFieldAccess get(int hash,Object obj,long field){
  WriteFieldAccess w=entries.get(hash);
  while (w != null) {
    if (w.getReference() == obj && w.getField() == field)     return w;
    w=w.getNext();
  }
  return null;
}",0.929637526652452
10992,"@Atomic public boolean remove(int value){
  boolean result;
  Node[] update=new Node[m_maxLevel + 1];
  Node node=m_head;
  for (int i=m_level; i >= 0; i--) {
    Node next=node.getForward(i);
    while (next.getValue() < value) {
      node=next;
      next=node.getForward(i);
    }
    update[i]=node;
  }
  node=node.getForward(0);
  if (node.getValue() != value) {
    result=false;
  }
 else {
    for (int i=0; i <= m_level; i++) {
      if (update[i].getForward(i) == node)       update[i].setForward(i,node.getForward(i));
    }
    while (m_level > 0 && m_head.getForward(m_level) == m_head)     m_level--;
    result=true;
  }
  return result;
}","@Atomic public boolean remove(int value){
  boolean result;
  Node[] update=new Node[m_maxLevel + 1];
  Node node=m_head;
  for (int i=m_level; i >= 0; i--) {
    Node next=node.getForward(i);
    while (next.getValue() < value) {
      node=next;
      next=node.getForward(i);
    }
    update[i]=node;
  }
  node=node.getForward(0);
  if (node.getValue() != value) {
    result=false;
  }
 else {
    for (int i=0; i <= m_level; i++) {
      if (update[i].getForward(i) == node)       update[i].setForward(i,node.getForward(i));
    }
    while (m_level > 0 && m_head.getForward(m_level).getForward(0) == null)     m_level--;
    result=true;
  }
  return result;
}",0.9758308157099698
10993,"public void visitMaxs(final int maxStack,final int maxLocals){
  if (ClassReader.FRAMES && compute == FRAMES) {
    Handler handler=firstHandler;
    while (handler != null) {
      Label l=handler.start.getFirst();
      Label h=handler.handler.getFirst();
      Label e=handler.end.getFirst();
      String t=handler.desc == null ? ""String_Node_Str"" : handler.desc;
      int kind=Frame.OBJECT | cw.addType(t);
      h.status|=Label.TARGET;
      while (l != e) {
        Edge b=new Edge();
        b.info=kind;
        b.successor=h;
        b.next=l.successors;
        l.successors=b;
        l=l.successor;
      }
      handler=handler.next;
    }
    Frame f=labels.frame;
    Type[] args=Type.getArgumentTypes(descriptor);
    f.initInputFrame(cw,access,args,this.maxLocals);
    visitFrame(f);
    int max=0;
    Label changed=labels;
    while (changed != null) {
      Label l=changed;
      changed=changed.next;
      l.next=null;
      f=l.frame;
      if ((l.status & Label.TARGET) != 0) {
        l.status|=Label.STORE;
      }
      l.status|=Label.REACHABLE;
      int blockMax=f.inputStack.length + l.outputStackMax;
      if (blockMax > max) {
        max=blockMax;
      }
      Edge e=l.successors;
      while (e != null) {
        Label n=e.successor.getFirst();
        boolean change=f.merge(cw,n.frame,e.info);
        if (change && n.next == null) {
          n.next=changed;
          changed=n;
        }
        e=e.next;
      }
    }
    this.maxStack=max;
    Label l=labels;
    while (l != null) {
      f=l.frame;
      if ((l.status & Label.STORE) != 0) {
        visitFrame(f);
      }
      if ((l.status & Label.REACHABLE) == 0) {
        Label k=l.successor;
        int start=l.position;
        int end=(k == null ? code.length : k.position) - 1;
        if (end >= start) {
          for (int i=start; i < end; ++i) {
            code.data[i]=Opcodes.NOP;
          }
          code.data[end]=(byte)Opcodes.ATHROW;
          startFrame(start,0,1);
          frame[frameIndex++]=Frame.OBJECT | cw.addType(""String_Node_Str"");
          endFrame();
        }
      }
      l=l.successor;
    }
  }
 else   if (compute == MAXS) {
    Handler handler=firstHandler;
    while (handler != null) {
      Label l=handler.start;
      Label h=handler.handler;
      Label e=handler.end;
      while (l != e) {
        Edge b=new Edge();
        b.info=Edge.EXCEPTION;
        b.successor=h;
        if ((l.status & Label.JSR) == 0) {
          b.next=l.successors;
          l.successors=b;
        }
 else {
          b.next=l.successors.next.next;
          l.successors.next.next=b;
        }
        l=l.successor;
      }
      handler=handler.next;
    }
    if (subroutines > 0) {
      int id=0;
      labels.visitSubroutine(null,1,subroutines);
      Label l=labels;
      while (l != null) {
        if ((l.status & Label.JSR) != 0) {
          Label subroutine=l.successors.next.successor;
          if ((subroutine.status & Label.VISITED) == 0) {
            id+=1;
            subroutine.visitSubroutine(null,(id / 32L) << 32 | (1L << (id % 32)),subroutines);
          }
        }
        l=l.successor;
      }
      l=labels;
      while (l != null) {
        if ((l.status & Label.JSR) != 0) {
          Label L=labels;
          while (L != null) {
            L.status&=~Label.VISITED;
            L=L.successor;
          }
          Label subroutine=l.successors.next.successor;
          subroutine.visitSubroutine(l,0,subroutines);
        }
        l=l.successor;
      }
    }
    int max=0;
    Label stack=labels;
    while (stack != null) {
      Label l=stack;
      stack=stack.next;
      int start=l.inputStackTop;
      int blockMax=start + l.outputStackMax;
      if (blockMax > max) {
        max=blockMax;
      }
      Edge b=l.successors;
      if ((l.status & Label.JSR) != 0) {
        b=b.next;
      }
      while (b != null) {
        l=b.successor;
        if ((l.status & Label.PUSHED) == 0) {
          l.inputStackTop=b.info == Edge.EXCEPTION ? 1 : start + b.info;
          l.status|=Label.PUSHED;
          l.next=stack;
          stack=l;
        }
        b=b.next;
      }
    }
    this.maxStack=max;
  }
 else {
    this.maxStack=maxStack;
    this.maxLocals=maxLocals;
  }
}","public void visitMaxs(final int maxStack,final int maxLocals){
  if (ClassReader.FRAMES && compute == FRAMES) {
    Handler handler=firstHandler;
    while (handler != null) {
      Label l=handler.start.getFirst();
      Label h=handler.handler.getFirst();
      Label e=handler.end.getFirst();
      String t=handler.desc == null ? ""String_Node_Str"" : handler.desc;
      int kind=Frame.OBJECT | cw.addType(t);
      h.status|=Label.TARGET;
      while (l != e) {
        Edge b=new Edge();
        b.info=kind;
        b.successor=h;
        b.next=l.successors;
        l.successors=b;
        l=l.successor;
      }
      handler=handler.next;
    }
    Frame f=labels.frame;
    Type[] args=Type.getArgumentTypes(descriptor);
    f.initInputFrame(cw,access,args,this.maxLocals);
    visitFrame(f);
    int max=0;
    Label changed=labels;
    while (changed != null) {
      Label l=changed;
      changed=changed.next;
      l.next=null;
      f=l.frame;
      if ((l.status & Label.TARGET) != 0) {
        l.status|=Label.STORE;
      }
      l.status|=Label.REACHABLE;
      int blockMax=f.inputStack.length + l.outputStackMax;
      if (blockMax > max) {
        max=blockMax;
      }
      Edge e=l.successors;
      while (e != null) {
        Label n=e.successor.getFirst();
        boolean change=f.merge(cw,n.frame,e.info);
        if (change && n.next == null) {
          n.next=changed;
          changed=n;
        }
        e=e.next;
      }
    }
    Label l=labels;
    while (l != null) {
      f=l.frame;
      if ((l.status & Label.STORE) != 0) {
        visitFrame(f);
      }
      if ((l.status & Label.REACHABLE) == 0) {
        Label k=l.successor;
        int start=l.position;
        int end=(k == null ? code.length : k.position) - 1;
        if (end >= start) {
          max=Math.max(max,1);
          for (int i=start; i < end; ++i) {
            code.data[i]=Opcodes.NOP;
          }
          code.data[end]=(byte)Opcodes.ATHROW;
          startFrame(start,0,1);
          frame[frameIndex++]=Frame.OBJECT | cw.addType(""String_Node_Str"");
          endFrame();
        }
      }
      l=l.successor;
    }
    this.maxStack=max;
  }
 else   if (compute == MAXS) {
    Handler handler=firstHandler;
    while (handler != null) {
      Label l=handler.start;
      Label h=handler.handler;
      Label e=handler.end;
      while (l != e) {
        Edge b=new Edge();
        b.info=Edge.EXCEPTION;
        b.successor=h;
        if ((l.status & Label.JSR) == 0) {
          b.next=l.successors;
          l.successors=b;
        }
 else {
          b.next=l.successors.next.next;
          l.successors.next.next=b;
        }
        l=l.successor;
      }
      handler=handler.next;
    }
    if (subroutines > 0) {
      int id=0;
      labels.visitSubroutine(null,1,subroutines);
      Label l=labels;
      while (l != null) {
        if ((l.status & Label.JSR) != 0) {
          Label subroutine=l.successors.next.successor;
          if ((subroutine.status & Label.VISITED) == 0) {
            id+=1;
            subroutine.visitSubroutine(null,(id / 32L) << 32 | (1L << (id % 32)),subroutines);
          }
        }
        l=l.successor;
      }
      l=labels;
      while (l != null) {
        if ((l.status & Label.JSR) != 0) {
          Label L=labels;
          while (L != null) {
            L.status&=~Label.VISITED;
            L=L.successor;
          }
          Label subroutine=l.successors.next.successor;
          subroutine.visitSubroutine(l,0,subroutines);
        }
        l=l.successor;
      }
    }
    int max=0;
    Label stack=labels;
    while (stack != null) {
      Label l=stack;
      stack=stack.next;
      int start=l.inputStackTop;
      int blockMax=start + l.outputStackMax;
      if (blockMax > max) {
        max=blockMax;
      }
      Edge b=l.successors;
      if ((l.status & Label.JSR) != 0) {
        b=b.next;
      }
      while (b != null) {
        l=b.successor;
        if ((l.status & Label.PUSHED) == 0) {
          l.inputStackTop=b.info == Edge.EXCEPTION ? 1 : start + b.info;
          l.status|=Label.PUSHED;
          l.next=stack;
          stack=l;
        }
        b=b.next;
      }
    }
    this.maxStack=max;
  }
 else {
    this.maxStack=maxStack;
    this.maxLocals=maxLocals;
  }
}",0.9910057236304172
10994,"/** 
 * Sets the color value as specified by the parameters. If <var>colorType</var> requires an <code>RGBColor</code>, then <var>rgbColor</var> must be a string that matches <a href='types.html#DataTypeColor'>&lt;color&gt;</a>; otherwise, <var>rgbColor</var>. must be null. If <var>colorType</var> requires an  {@link org.vectomatic.dom.svg.OMSVGICCColor}, then <var>iccColor</var> must be a string that matches <a href='types.html#DataTypeICCColor'>&lt;icccolor&gt;</a>; otherwise, <var>iccColor</var> must be null.
 * @param colorType One of the defined constants for {@link org.vectomatic.dom.svg.OMSVGColor#getColorType()}.
 * @param rgbColor The specification of an sRGB color, or null.
 * @param iccColor The specification of an ICC color, or null.
 * @throws SVGException (SVG_INVALID_VALUE_ERR) Raised if one of the   parameters has an invalid value.
 */
public final void setColor(short colorType,String rgbColor,String iccColor) throws JavaScriptException {
  if (colorType == SVG_COLORTYPE_RGBCOLOR_ICCCOLOR && iccColor != null && rgbColor != null) {
    this.iccColor=SVGPaintParser.INSTANCE.iccColor(iccColor);
    this.rgbColor=SVGPaintParser.INSTANCE.rgbColor(rgbColor);
    setCssText(rgbColor + ""String_Node_Str"" + iccColor);
  }
 else   if (colorType == SVG_COLORTYPE_RGBCOLOR && rgbColor != null && iccColor == null) {
    this.iccColor=null;
    this.rgbColor=SVGPaintParser.INSTANCE.rgbColor(rgbColor);
    setCssText(rgbColor);
  }
 else   if (colorType == SVG_COLORTYPE_CURRENTCOLOR && rgbColor == null && iccColor == null) {
    this.iccColor=null;
    this.rgbColor=null;
    setCssText(SVGConstants.CSS_CURRENTCOLOR_VALUE);
  }
 else   if (colorType == SVG_COLORTYPE_UNKNOWN && rgbColor == null && iccColor == null) {
    this.iccColor=null;
    this.rgbColor=null;
    setCssText(SVGConstants.CSS_NONE_VALUE);
  }
 else {
    throw new JavaScriptException(""String_Node_Str"");
  }
  this.colorType=colorType;
}","/** 
 * Sets the color value as specified by the parameters. If <var>colorType</var> requires an <code>RGBColor</code>, then <var>rgbColor</var> must be a string that matches <a href='types.html#DataTypeColor'>&lt;color&gt;</a>; otherwise, <var>rgbColor</var>. must be null. If <var>colorType</var> requires an  {@link org.vectomatic.dom.svg.OMSVGICCColor}, then <var>iccColor</var> must be a string that matches <a href='types.html#DataTypeICCColor'>&lt;icccolor&gt;</a>; otherwise, <var>iccColor</var> must be null.
 * @param colorType One of the defined constants for {@link org.vectomatic.dom.svg.OMSVGColor#getColorType()}.
 * @param rgbColor The specification of an sRGB color, or null.
 * @param iccColor The specification of an ICC color, or null.
 * @throws SVGException (SVG_INVALID_VALUE_ERR) Raised if one of the   parameters has an invalid value.
 */
public final void setColor(short colorType,String rgbColor,String iccColor) throws JavaScriptException {
  if (colorType == SVG_COLORTYPE_RGBCOLOR_ICCCOLOR && iccColor != null && rgbColor != null) {
    this.iccColor=SVGPaintParser.INSTANCE.iccColor(iccColor);
    this.rgbColor=SVGPaintParser.INSTANCE.rgbColor(rgbColor);
    setCssText(rgbColor.trim() + ""String_Node_Str"" + iccColor);
  }
 else   if (colorType == SVG_COLORTYPE_RGBCOLOR && rgbColor != null && iccColor == null) {
    this.iccColor=null;
    this.rgbColor=SVGPaintParser.INSTANCE.rgbColor(rgbColor);
    setCssText(rgbColor);
  }
 else   if (colorType == SVG_COLORTYPE_CURRENTCOLOR && rgbColor == null && iccColor == null) {
    this.iccColor=null;
    this.rgbColor=null;
    setCssText(SVGConstants.CSS_CURRENTCOLOR_VALUE);
  }
 else   if (colorType == SVG_COLORTYPE_UNKNOWN && rgbColor == null && iccColor == null) {
    this.iccColor=null;
    this.rgbColor=null;
    setCssText(SVGConstants.CSS_NONE_VALUE);
  }
 else {
    throw new JavaScriptException(""String_Node_Str"");
  }
  this.colorType=colorType;
}",0.9981963411491884
10995,"public OMSVGPaint(short paintType){
  this.paintType=paintType;
}","public OMSVGPaint(short paintType){
  this.paintType=paintType;
switch (paintType) {
case SVG_PAINTTYPE_NONE:
    cssText=SVGConstants.CSS_NONE_VALUE;
  break;
case SVG_PAINTTYPE_CURRENTCOLOR:
cssText=SVGConstants.CSS_CURRENTCOLOR_VALUE;
colorType=SVG_COLORTYPE_CURRENTCOLOR;
break;
}
}",0.3703703703703703
10996,"/** 
 * Sets the paint as specified by the parameters. If <var>paintType</var> requires a URI, then <var>uri</var> must be non-null; otherwise, <var>uri</var> must be null. If <var>paintType</var> requires an <code>RGBColor</code>, then <var>rgbColor</var> must be a string that matches <a href='types.html#DataTypeColor'>&lt;color&gt;</a>; otherwise, <var>rgbColor</var> must be null. If <var>paintType</var> requires an   {@link org.vectomatic.dom.svg.OMSVGICCColor}, then <var>iccColor</var> must be a string that matches <a href='types.html#DataTypeICCColor'>&lt;icccolor&gt;</a>; otherwise, <var>iccColor</var> must be null.
 * @param paintType One of the defined constants for {@link org.vectomatic.dom.svg.OMSVGPaint#getPaintType()}.
 * @param uri The URI for the desired paint server, or null.
 * @param rgbColor The specification of an sRGB color, or null.
 * @param iccColor The specification of an ICC color, or null.
 * @throws SVGException (SVG_INVALID_VALUE_ERR) Raised if one of the  parameters has an invalid value.
 */
public final void setPaint(short paintType,String uri,String rgbColor,String iccColor) throws JavaScriptException {
  if (((paintType == SVG_PAINTTYPE_RGBCOLOR && uri == null) || (paintType == SVG_PAINTTYPE_URI_RGBCOLOR && uri != null)) && iccColor == null) {
    setRGBColor(rgbColor);
  }
 else   if ((paintType == SVG_PAINTTYPE_RGBCOLOR_ICCCOLOR && uri == null) || (paintType == SVG_PAINTTYPE_URI_RGBCOLOR_ICCCOLOR && uri != null)) {
    setRGBColorICCColor(rgbColor,iccColor);
  }
 else   if ((paintType == SVG_PAINTTYPE_NONE && uri == null) || (paintType == SVG_PAINTTYPE_URI_NONE && uri != null)) {
    setColor(SVG_COLORTYPE_UNKNOWN,rgbColor,iccColor);
  }
 else   if ((paintType == SVG_PAINTTYPE_CURRENTCOLOR && uri == null) || (paintType == SVG_PAINTTYPE_URI_CURRENTCOLOR && uri != null)) {
    setColor(SVG_COLORTYPE_CURRENTCOLOR,rgbColor,iccColor);
  }
 else   if (paintType == SVG_PAINTTYPE_URI) {
    this.rgbColor=null;
    this.iccColor=null;
  }
 else {
    throw new JavaScriptException(""String_Node_Str"");
  }
  this.paintType=paintType;
  this.uri=uri;
  if (cssText != null && uri != null) {
    cssText=uri + ""String_Node_Str"" + cssText;
  }
}","/** 
 * Sets the paint as specified by the parameters. If <var>paintType</var> requires a URI, then <var>uri</var> must be non-null; otherwise, <var>uri</var> must be null. If <var>paintType</var> requires an <code>RGBColor</code>, then <var>rgbColor</var> must be a string that matches <a href='types.html#DataTypeColor'>&lt;color&gt;</a>; otherwise, <var>rgbColor</var> must be null. If <var>paintType</var> requires an   {@link org.vectomatic.dom.svg.OMSVGICCColor}, then <var>iccColor</var> must be a string that matches <a href='types.html#DataTypeICCColor'>&lt;icccolor&gt;</a>; otherwise, <var>iccColor</var> must be null.
 * @param paintType One of the defined constants for {@link org.vectomatic.dom.svg.OMSVGPaint#getPaintType()}.
 * @param uri The URI for the desired paint server, or null.
 * @param rgbColor The specification of an sRGB color, or null.
 * @param iccColor The specification of an ICC color, or null.
 * @throws SVGException (SVG_INVALID_VALUE_ERR) Raised if one of the  parameters has an invalid value.
 */
public final void setPaint(short paintType,String uri,String rgbColor,String iccColor) throws JavaScriptException {
  if (((paintType == SVG_PAINTTYPE_RGBCOLOR && uri == null) || (paintType == SVG_PAINTTYPE_URI_RGBCOLOR && uri != null)) && iccColor == null) {
    setRGBColor(rgbColor);
  }
 else   if ((paintType == SVG_PAINTTYPE_RGBCOLOR_ICCCOLOR && uri == null) || (paintType == SVG_PAINTTYPE_URI_RGBCOLOR_ICCCOLOR && uri != null)) {
    setRGBColorICCColor(rgbColor,iccColor);
  }
 else   if ((paintType == SVG_PAINTTYPE_NONE && uri == null) || (paintType == SVG_PAINTTYPE_URI_NONE && uri != null)) {
    setColor(SVG_COLORTYPE_UNKNOWN,rgbColor,iccColor);
  }
 else   if ((paintType == SVG_PAINTTYPE_CURRENTCOLOR && uri == null) || (paintType == SVG_PAINTTYPE_URI_CURRENTCOLOR && uri != null)) {
    setColor(SVG_COLORTYPE_CURRENTCOLOR,rgbColor,iccColor);
  }
 else   if (paintType == SVG_PAINTTYPE_URI) {
    this.rgbColor=null;
    this.iccColor=null;
    this.cssText=""String_Node_Str"" + uri + ""String_Node_Str"";
  }
 else {
    throw new JavaScriptException(""String_Node_Str"");
  }
  this.paintType=paintType;
  this.uri=uri;
  if (paintType != SVG_PAINTTYPE_URI && cssText != null && uri != null) {
    cssText=""String_Node_Str"" + uri + ""String_Node_Str""+ cssText;
  }
}",0.9727574750830564
10997,"/** 
 * Clears the value of a named property, causing it to  revert to its default.
 * @param name The property name
 */
public final native void clearSVGProperty(String name);","/** 
 * Clears the value of a named property, causing it to  revert to its default.
 * @param name The property name
 */
public final void clearSVGProperty(String name){
  setPropertyImpl(name,""String_Node_Str"");
}",0.8666666666666667
10998,"private static final short unitToCode(com.google.gwt.dom.client.Style.Unit unit){
switch (unit) {
case PCT:
    return SVG_LENGTHTYPE_PERCENTAGE;
case EM:
  return SVG_LENGTHTYPE_EMS;
case EX:
return SVG_LENGTHTYPE_EXS;
case PX:
return SVG_LENGTHTYPE_PX;
case CM:
return SVG_LENGTHTYPE_CM;
case MM:
return SVG_LENGTHTYPE_MM;
case IN:
return SVG_LENGTHTYPE_IN;
case PT:
return SVG_LENGTHTYPE_PT;
case PC:
return SVG_LENGTHTYPE_PC;
}
return SVG_LENGTHTYPE_NUMBER;
}","private static final short unitToCode(com.google.gwt.dom.client.Style.Unit unit){
  if (unit != null) {
switch (unit) {
case PCT:
      return SVG_LENGTHTYPE_PERCENTAGE;
case EM:
    return SVG_LENGTHTYPE_EMS;
case EX:
  return SVG_LENGTHTYPE_EXS;
case PX:
return SVG_LENGTHTYPE_PX;
case CM:
return SVG_LENGTHTYPE_CM;
case MM:
return SVG_LENGTHTYPE_MM;
case IN:
return SVG_LENGTHTYPE_IN;
case PT:
return SVG_LENGTHTYPE_PT;
case PC:
return SVG_LENGTHTYPE_PC;
}
}
return SVG_LENGTHTYPE_NUMBER;
}",0.9686192468619248
10999,"/** 
 * Evaluates the specified XPath expression and returns the matching   {@link com.google.gwt.dom.client.Node} node.The expression must evaluate to a single node.
 * @param root The element the expression is rooted at
 * @param expr The XPath expression
 * @param resolver A prefix resolver if the expression has prefix
 * @return The selected node, or null if no such node exists.
 */
public static <T extends Node>T evaluateNodeXPath(Element root,String expr,XPathPrefixResolver resolver){
  return evaluateNodeXPath_(root,expr,resolver);
}","/** 
 * Evaluates the specified XPath expression and returns the matching   {@link com.google.gwt.dom.client.Node} node.The expression must evaluate to a single node.
 * @param root The element the expression is rooted at
 * @param expr The XPath expression
 * @param resolver A prefix resolver if the expression has prefix
 * @return The selected node, or null if no such node exists.
 */
public static <T extends Node>T evaluateNodeXPath(Element root,String expr,XPathPrefixResolver resolver){
  return (T)evaluateNodeXPath_(root,expr,resolver);
}",0.9972602739726028
11000,"private static native <T extends Node>T evaluateNodeXPath_(Element svgElement,String expr,XPathPrefixResolver resolver);","private static native Node evaluateNodeXPath_(Element svgElement,String expr,XPathPrefixResolver resolver);",0.9427312775330396
