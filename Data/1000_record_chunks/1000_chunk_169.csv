record_number,buggy_code,fixed_code,code_similarity
168001,"private DelegatingUpdateResultHandler(final UpdateResultHandler<R,P> delegate){
  this.delegate=delegate;
}","private DelegatingUpdateResultHandler(final UpdateResultHandler<? super R,P> delegate){
  this.delegate=delegate;
}",0.963963963963964
168002,"public ServerModelUpdateTuple(final AbstractServerModelUpdate<R> update,final UpdateResultHandler<R,P> resultHandler,final P param){
  if (update == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.update=update;
  this.resultHandler=new DelegatingUpdateResultHandler<R,P>(resultHandler);
  this.param=param;
}","public ServerModelUpdateTuple(final AbstractServerModelUpdate<R> update,final UpdateResultHandler<? super R,P> resultHandler,final P param){
  if (update == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.update=update;
  this.resultHandler=new DelegatingUpdateResultHandler<R,P>(resultHandler);
  this.param=param;
}",0.9883381924198252
168003,"private void generateResult(Status status){
  Map<UUID,ServerDeploymentActionResult> planResults=new HashMap<UUID,ServerDeploymentActionResult>();
  for (  Map.Entry<UUID,ServerDeploymentActionResult> entry : updateResults.entrySet()) {
    if (entry.getValue().getResult() != Result.NOT_EXECUTED) {
      ServerDeploymentActionResult rollbackResult=null;
      if (successfulRollbacks.contains(entry.getKey())) {
        rollbackResult=new SimpleServerDeploymentActionResult(entry.getKey(),Result.EXECUTED);
      }
 else       if (failedRollbacks.containsKey(entry.getKey())) {
        Throwable cause=failedRollbacks.get(entry.getKey());
        rollbackResult=new SimpleServerDeploymentActionResult(entry.getKey(),cause);
      }
      if (rollbackResult != null) {
        AbstractServerUpdateActionResult.installRollbackResult((AbstractServerUpdateActionResult<ServerDeploymentActionResult>)entry.getValue(),rollbackResult);
      }
    }
    planResults.put(entry.getKey(),entry.getValue());
  }
  DeploymentPlanResultImpl result=new DeploymentPlanResultImpl(plan.getId(),planResults);
  future.set(result);
}","private void generateResult(Status status){
  Map<UUID,ServerDeploymentActionResult> planResults=new HashMap<UUID,ServerDeploymentActionResult>();
  for (  Map.Entry<UUID,ServerDeploymentActionResult> entry : updateResults.entrySet()) {
    ServerDeploymentActionResult actionResult=entry.getValue();
    if (actionResult == null) {
      actionResult=new SimpleServerDeploymentActionResult(entry.getKey(),Result.EXECUTED);
    }
    if (actionResult.getResult() != Result.NOT_EXECUTED) {
      ServerDeploymentActionResult rollbackResult=null;
      if (successfulRollbacks.contains(entry.getKey())) {
        rollbackResult=new SimpleServerDeploymentActionResult(entry.getKey(),Result.EXECUTED);
      }
 else       if (failedRollbacks.containsKey(entry.getKey())) {
        Throwable cause=failedRollbacks.get(entry.getKey());
        rollbackResult=new SimpleServerDeploymentActionResult(entry.getKey(),cause);
      }
      if (rollbackResult != null) {
        AbstractServerUpdateActionResult.installRollbackResult((AbstractServerUpdateActionResult<ServerDeploymentActionResult>)entry.getValue(),rollbackResult);
      }
    }
    planResults.put(entry.getKey(),actionResult);
  }
  DeploymentPlanResultImpl result=new DeploymentPlanResultImpl(plan.getId(),planResults);
  future.set(result);
}",0.904426975589574
168004,"@Override public void handleTimeout(UUID param){
synchronized (updateResults) {
  }
}","@Override public void handleTimeout(UUID param){
synchronized (updateResults) {
    updateResults.put(param,new SimpleServerDeploymentActionResult(param,Result.FAILED));
  }
}",0.6538461538461539
168005,"@Override public void handleCancellation(UUID param){
synchronized (updateResults) {
  }
}","@Override public void handleCancellation(UUID param){
synchronized (updateResults) {
    updateResults.put(param,new SimpleServerDeploymentActionResult(param,Result.NOT_EXECUTED));
  }
}",0.6521739130434783
168006,"/** 
 * Creates an update object for the given action and adds it to the overall update.
 * @param action the action
 * @param resultHandler the handler for the result of the action
 * @param overallUpdate the overall update
 */
private void addServerGroupDeploymentUpdate(DeploymentActionImpl action,UpdateResultHandler<ServerDeploymentActionResult,UUID> resultHandler,final ServerUpdateController controller){
switch (action.getType()) {
case ADD:
{
      controller.addServerModelUpdate(new ServerModelDeploymentAdd(action.getDeploymentUnitUniqueName(),action.getNewContentFileName(),action.getNewContentHash(),false),resultHandler,action.getId());
      break;
    }
case REMOVE:
{
    controller.addServerModelUpdate(new ServerModelDeploymentRemove(action.getDeploymentUnitUniqueName(),false),resultHandler,action.getId());
    break;
  }
case DEPLOY:
{
  ServerGroupDeploymentStartStopUpdate support=new ServerGroupDeploymentStartStopUpdate(action.getDeploymentUnitUniqueName(),true);
  controller.addServerModelUpdate(new ServerModelDeploymentStartStopUpdate(support),resultHandler,action.getId());
  break;
}
case UNDEPLOY:
{
ServerGroupDeploymentStartStopUpdate support=new ServerGroupDeploymentStartStopUpdate(action.getDeploymentUnitUniqueName(),false);
controller.addServerModelUpdate(new ServerModelDeploymentStartStopUpdate(support),resultHandler,action.getId());
break;
}
case REDEPLOY:
{
controller.addServerModelUpdate(new ServerModelDeploymentReplaceUpdate(action.getDeploymentUnitUniqueName(),action.getDeploymentUnitUniqueName()),resultHandler,action.getId());
break;
}
case REPLACE:
{
controller.addServerModelUpdate(new ServerModelDeploymentReplaceUpdate(action.getDeploymentUnitUniqueName(),action.getReplacedDeploymentUnitUniqueName()),resultHandler,action.getId());
break;
}
case FULL_REPLACE:
controller.addServerModelUpdate(new ServerModelDeploymentFullReplaceUpdate(action.getDeploymentUnitUniqueName(),action.getNewContentFileName(),action.getNewContentHash()),resultHandler,action.getId());
break;
default :
{
throw new IllegalStateException(""String_Node_Str"" + action.getType());
}
}
}","/** 
 * Creates an update object for the given action and adds it to the overall update.
 * @param action the action
 * @param resultHandler the handler for the result of the action
 * @param overallUpdate the overall update
 */
private void addServerGroupDeploymentUpdate(DeploymentActionImpl action,UpdateResultHandler<? super ServerDeploymentActionResult,UUID> resultHandler,final ServerUpdateController controller){
switch (action.getType()) {
case ADD:
{
      controller.addServerModelUpdate(new ServerModelDeploymentAdd(action.getDeploymentUnitUniqueName(),action.getNewContentFileName(),action.getNewContentHash()),resultHandler,action.getId());
      break;
    }
case REMOVE:
{
    controller.addServerModelUpdate(new ServerModelDeploymentRemove(action.getDeploymentUnitUniqueName()),resultHandler,action.getId());
    break;
  }
case DEPLOY:
{
  controller.addServerModelUpdate(new ServerModelDeploymentStartStopUpdate(action.getDeploymentUnitUniqueName(),true),resultHandler,action.getId());
  break;
}
case UNDEPLOY:
{
controller.addServerModelUpdate(new ServerModelDeploymentStartStopUpdate(action.getDeploymentUnitUniqueName(),false),resultHandler,action.getId());
break;
}
case REDEPLOY:
{
controller.addServerModelUpdate(new ServerModelDeploymentReplaceUpdate(action.getDeploymentUnitUniqueName(),action.getDeploymentUnitUniqueName()),resultHandler,action.getId());
break;
}
case REPLACE:
{
controller.addServerModelUpdate(new ServerModelDeploymentReplaceUpdate(action.getDeploymentUnitUniqueName(),action.getReplacedDeploymentUnitUniqueName()),resultHandler,action.getId());
break;
}
case FULL_REPLACE:
ServerGroupDeploymentElement deployment=serverConfiguration.getDeployment(action.getDeploymentUnitUniqueName());
boolean redeploy=deployment != null && deployment.isStart();
controller.addServerModelUpdate(new ServerModelDeploymentFullReplaceUpdate(action.getDeploymentUnitUniqueName(),action.getNewContentFileName(),action.getNewContentHash(),redeploy),resultHandler,action.getId());
break;
default :
{
throw new IllegalStateException(""String_Node_Str"" + action.getType());
}
}
}",0.8707612046478539
168007,"@Override public void handleSuccess(ServerDeploymentActionResult result,UUID param){
synchronized (updateResults) {
    updateResults.put(param,result);
  }
}","@Override public void handleSuccess(Object result,UUID param){
synchronized (updateResults) {
    if (result instanceof ServerDeploymentActionResult) {
      updateResults.put(param,(ServerDeploymentActionResult)result);
    }
 else {
      updateResults.put(param,new SimpleServerDeploymentActionResult(param,Result.EXECUTED));
    }
  }
}",0.5261044176706827
168008,"@Override public byte[] distributeReplacementDeploymentContent(String name,String commonName,InputStream stream) throws IOException {
  return getDeploymentRepository().addDeploymentContent(name,stream);
}","@Override public byte[] distributeReplacementDeploymentContent(String name,String runtimeName,InputStream stream) throws IOException {
  return getDeploymentRepository().addDeploymentContent(name,runtimeName,stream);
}",0.9408983451536644
168009,"@Override public void handleFailure(Throwable cause,UUID param){
synchronized (updateResults) {
  }
}","@Override public void handleFailure(Throwable cause,UUID param){
synchronized (updateResults) {
    updateResults.put(param,new SimpleServerDeploymentActionResult(param,cause));
  }
}",0.7112676056338029
168010,"@Override public Future<ServerDeploymentPlanResult> execute(final DeploymentPlan plan){
  if (!(plan instanceof DeploymentPlanImpl)) {
    throw new IllegalArgumentException(""String_Node_Str"" + DeploymentPlan.class.getSimpleName() + ""String_Node_Str""+ plan.getClass().getName());
  }
  final SimpleFuture<ServerDeploymentPlanResult> resultFuture=new SimpleFuture<ServerDeploymentPlanResult>();
  final UpdateResultHandlerImpl resultHandler=new UpdateResultHandlerImpl(resultFuture,plan);
  final ServerUpdateController controller=new ServerUpdateController(getServerConfiguration(),getServiceContainer(),getDeploymentExecutor(),resultHandler,plan.isGlobalRollback(),plan.isShutdown());
  DeploymentPlanImpl planImpl=(DeploymentPlanImpl)plan;
  for (  DeploymentActionImpl action : planImpl.getDeploymentActionImpls()) {
    addServerGroupDeploymentUpdate(action,resultHandler,controller);
  }
  Runnable r=new Runnable(){
    @Override public void run(){
      logger.debugf(""String_Node_Str"",plan.getId().toString());
      controller.executeUpdates();
    }
  }
;
  getDeploymentExecutor().execute(r);
  return resultFuture;
}","@Override public Future<ServerDeploymentPlanResult> execute(final DeploymentPlan plan){
  if (!(plan instanceof DeploymentPlanImpl)) {
    throw new IllegalArgumentException(""String_Node_Str"" + DeploymentPlan.class.getSimpleName() + ""String_Node_Str""+ plan.getClass().getName());
  }
  final SimpleFuture<ServerDeploymentPlanResult> resultFuture=new SimpleFuture<ServerDeploymentPlanResult>();
  final UpdateResultHandlerImpl resultHandler=new UpdateResultHandlerImpl(resultFuture,plan);
  final ServerUpdateController controller=new ServerUpdateController(getServerConfiguration(),getServiceContainer(),getDeploymentExecutor(),resultHandler,plan.isGlobalRollback(),!plan.isShutdown());
  DeploymentPlanImpl planImpl=(DeploymentPlanImpl)plan;
  for (  DeploymentActionImpl action : planImpl.getDeploymentActionImpls()) {
    addServerGroupDeploymentUpdate(action,resultHandler,controller);
  }
  Runnable r=new Runnable(){
    @Override public void run(){
      logger.debugf(""String_Node_Str"",plan.getId().toString());
      controller.executeUpdates();
    }
  }
;
  getDeploymentExecutor().execute(r);
  return resultFuture;
}",0.9995569339831636
168011,"@Override public byte[] distributeDeploymentContent(String name,String commonName,InputStream stream) throws IOException, DuplicateDeploymentNameException {
  return getDeploymentRepository().addDeploymentContent(name,stream);
}","@Override public byte[] distributeDeploymentContent(String name,String runtimeName,InputStream stream) throws IOException, DuplicateDeploymentNameException {
  if (ServerDeploymentManagerImpl.this.serverConfiguration.getDeployment(name) != null) {
    throw new DuplicateDeploymentNameException(name,false);
  }
  return getDeploymentRepository().addDeploymentContent(name,runtimeName,stream);
}",0.7126805778491172
168012,"/** 
 * Creates a new StandaloneDeploymentManagerImpl.
 * @param serverConfiguration the server's configuration model. Cannot be <code>null</code>
 * @param serviceContainer the server's service container. Cannot be <code>null</code>
 * @throws IllegalArgumentException if a required parameter is <code>null</code>
 */
public ServerDeploymentManagerImpl(ServerModel serverConfiguration,ServiceContainer serviceContainer){
  if (serverConfiguration == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (serviceContainer == null)   throw new IllegalArgumentException(""String_Node_Str"");
  this.serverConfiguration=serverConfiguration;
  this.serviceContainer=serviceContainer;
  this.contentDistributor=new DeploymentContentDistributor(){
    @Override public byte[] distributeDeploymentContent(    String name,    String commonName,    InputStream stream) throws IOException, DuplicateDeploymentNameException {
      return getDeploymentRepository().addDeploymentContent(name,stream);
    }
    @Override public byte[] distributeReplacementDeploymentContent(    String name,    String commonName,    InputStream stream) throws IOException {
      return getDeploymentRepository().addDeploymentContent(name,stream);
    }
  }
;
}","/** 
 * Creates a new StandaloneDeploymentManagerImpl.
 * @param serverConfiguration the server's configuration model. Cannot be <code>null</code>
 * @param serviceContainer the server's service container. Cannot be <code>null</code>
 * @throws IllegalArgumentException if a required parameter is <code>null</code>
 */
public ServerDeploymentManagerImpl(final ServerModel serverConfiguration,ServiceContainer serviceContainer){
  if (serverConfiguration == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (serviceContainer == null)   throw new IllegalArgumentException(""String_Node_Str"");
  this.serverConfiguration=serverConfiguration;
  this.serviceContainer=serviceContainer;
  this.contentDistributor=new DeploymentContentDistributor(){
    @Override public byte[] distributeDeploymentContent(    String name,    String runtimeName,    InputStream stream) throws IOException, DuplicateDeploymentNameException {
      if (ServerDeploymentManagerImpl.this.serverConfiguration.getDeployment(name) != null) {
        throw new DuplicateDeploymentNameException(name,false);
      }
      return getDeploymentRepository().addDeploymentContent(name,runtimeName,stream);
    }
    @Override public byte[] distributeReplacementDeploymentContent(    String name,    String runtimeName,    InputStream stream) throws IOException {
      return getDeploymentRepository().addDeploymentContent(name,runtimeName,stream);
    }
  }
;
}",0.9174107142857144
168013,"@Override public byte[] addDeploymentContent(String name,InputStream stream) throws IOException {
  log.debugf(""String_Node_Str"",name);
  byte[] sha1Bytes=null;
  File tmp=File.createTempFile(name,""String_Node_Str"",repoRoot);
  FileOutputStream fos=new FileOutputStream(tmp);
synchronized (messageDigest) {
    messageDigest.reset();
    try {
      DigestOutputStream dos=new DigestOutputStream(fos,messageDigest);
      BufferedInputStream bis=new BufferedInputStream(stream);
      byte[] bytes=new byte[8192];
      int read;
      while ((read=bis.read(bytes)) > -1) {
        dos.write(bytes,0,read);
      }
    }
  finally {
      try {
        fos.close();
      }
 catch (      Exception ignored) {
      }
    }
    sha1Bytes=messageDigest.digest();
  }
  String sha1=bytesToHexString(sha1Bytes);
  String partA=sha1.substring(0,2);
  String partB=sha1.substring(2);
  File base=new File(repoRoot,partA);
  validateDir(base);
  File realDir=new File(base,partB);
  if (!realDir.exists() && !realDir.mkdirs()) {
    throw new IllegalStateException(""String_Node_Str"" + realDir.getAbsolutePath());
  }
  File realFile=new File(realDir,""String_Node_Str"");
  if (realFile.exists()) {
    if (!tmp.delete()) {
      tmp.deleteOnExit();
    }
    log.debugf(""String_Node_Str"",name,realFile.getAbsolutePath());
  }
 else {
    moveTempToPermanent(tmp,realFile);
    log.infof(""String_Node_Str"",name,realFile.getAbsolutePath());
  }
  return sha1Bytes;
}","@Override public byte[] addDeploymentContent(String name,String runtimeName,InputStream stream) throws IOException {
  log.debugf(""String_Node_Str"",name);
  byte[] sha1Bytes=null;
  File tmp=File.createTempFile(name,""String_Node_Str"",repoRoot);
  FileOutputStream fos=new FileOutputStream(tmp);
synchronized (messageDigest) {
    messageDigest.reset();
    try {
      DigestOutputStream dos=new DigestOutputStream(fos,messageDigest);
      BufferedInputStream bis=new BufferedInputStream(stream);
      byte[] bytes=new byte[8192];
      int read;
      while ((read=bis.read(bytes)) > -1) {
        dos.write(bytes,0,read);
      }
    }
  finally {
      try {
        fos.close();
      }
 catch (      Exception ignored) {
      }
    }
    sha1Bytes=messageDigest.digest();
  }
  String sha1=bytesToHexString(sha1Bytes);
  String partA=sha1.substring(0,2);
  String partB=sha1.substring(2);
  File base=new File(repoRoot,partA);
  validateDir(base);
  File realDir=new File(base,partB);
  if (!realDir.exists() && !realDir.mkdirs()) {
    throw new IllegalStateException(""String_Node_Str"" + realDir.getAbsolutePath());
  }
  File realFile=new File(realDir,CONTENT);
  if (realFile.exists()) {
    if (!tmp.delete()) {
      tmp.deleteOnExit();
    }
    log.debugf(""String_Node_Str"",name,realFile.getAbsolutePath());
  }
 else {
    moveTempToPermanent(tmp,realFile);
    log.infof(""String_Node_Str"",name,realFile.getAbsolutePath());
  }
  return sha1Bytes;
}",0.8490243067442657
168014,"@Override public Closeable mountDeploymentContent(String name,byte[] deploymentHash,VirtualFile mountPoint) throws IOException {
  String sha1=bytesToHexString(deploymentHash);
  String partA=sha1.substring(0,2);
  String partB=sha1.substring(2);
  File base=new File(repoRoot,partA);
  File hashDir=new File(base,partB);
  File content=new File(hashDir,""String_Node_Str"");
  return VFS.mountZip(content,mountPoint,TempFileProviderService.provider());
}","@Override public Closeable mountDeploymentContent(String name,String runtimeName,byte[] deploymentHash,VirtualFile mountPoint) throws IOException {
  String sha1=bytesToHexString(deploymentHash);
  String partA=sha1.substring(0,2);
  String partB=sha1.substring(2);
  File base=new File(repoRoot,partA);
  File hashDir=new File(base,partB);
  File content=new File(hashDir,CONTENT);
  return VFS.mountZip(content,mountPoint,TempFileProviderService.provider());
}",0.8109289617486338
168015,"protected void applyUpdate(final ThreadsSubsystemElement element) throws UpdateFailedException {
  final UnboundedQueueThreadPoolElement poolElement=new UnboundedQueueThreadPoolElement(getName());
  poolElement.setKeepaliveTime(getKeepaliveTime());
  poolElement.setThreadFactory(getThreadFactory());
  poolElement.setMaxThreads(getMaxThreads());
  element.addExecutor(getName(),new ChildElement<UnboundedQueueThreadPoolElement>(Element.UNBOUNDED_QUEUE_THREAD_POOL.getLocalName(),poolElement));
}","@Override protected void applyUpdate(final ThreadsSubsystemElement element) throws UpdateFailedException {
  final ScheduledThreadPoolElement poolElement=new ScheduledThreadPoolElement(getName());
  poolElement.setKeepaliveTime(getKeepaliveTime());
  poolElement.setThreadFactory(getThreadFactory());
  poolElement.setMaxThreads(getMaxThreads());
  element.addExecutor(getName(),new ChildElement<ScheduledThreadPoolElement>(Element.SCHEDULED_THREAD_POOL.getLocalName(),poolElement));
}",0.3078491335372069
168016,"@Override public BatchServiceBuilder addInjectionValue(Injector target,Value value){
  delegate.addInjection(target,value);
  return this;
}","@Override public <I>BatchServiceBuilder<T> addInjectionValue(Injector<? super I> target,Value<I> value){
  delegate.<I>addInjectionValue(target,value);
  return this;
}",0.9090909090909092
168017,"@Override public BatchServiceBuilder addInjection(Injector target,Object value){
  delegate.addInjection(target,value);
  return this;
}","@Override public <I>BatchServiceBuilder<T> addInjection(Injector<? super I> target,I value){
  delegate.addInjection(target,value);
  return this;
}",0.9154929577464788
168018,"@Override public BatchServiceBuilder addOptionalDependency(ServiceName dependency,Class type,Injector target){
  delegate.addOptionalDependency(dependency,type,target);
  return this;
}","@Override public <I>BatchServiceBuilder<T> addOptionalDependency(ServiceName dependency,Class<I> type,Injector<I> target){
  delegate.addOptionalDependency(dependency,type,target);
  return this;
}",0.9685863874345548
168019,"@Override public BatchServiceBuilder addAliases(ServiceName... aliases){
  delegate.addAliases(aliases);
  return this;
}","@Override public BatchServiceBuilder<T> addAliases(ServiceName... aliases){
  delegate.addAliases(aliases);
  return this;
}",0.9877551020408164
168020,"@Override public BatchServiceBuilder addDependency(ServiceName dependency,Class type,Injector target){
  delegate.addDependency(dependency,type,target);
  return this;
}","@Override public <I>BatchServiceBuilder<T> addDependency(ServiceName dependency,Class<I> type,Injector<I> target){
  delegate.addDependency(dependency,type,target);
  return this;
}",0.9657142857142856
168021,"@Override public BatchServiceBuilder addDependencies(Iterable<ServiceName> dependencies){
  delegate.addDependencies(dependencies);
  return this;
}","@Override public BatchServiceBuilder<T> addDependencies(Iterable<ServiceName> dependencies){
  delegate.addDependencies(dependencies);
  return this;
}",0.9899665551839464
168022,"@Override public BatchServiceBuilder setLocation(Location location){
  delegate.setLocation(location);
  return this;
}","@Override public BatchServiceBuilder<T> setLocation(Location location){
  delegate.setLocation(location);
  return this;
}",0.9875518672199172
168023,"@Override public BatchServiceBuilder setInitialMode(ServiceController.Mode mode){
  if (mode.equals(ServiceController.Mode.ON_DEMAND)) {
    ServerStartBatchBuilder.this.serverStartupListener.expectOnDemand(serviceName);
  }
 else {
    ServerStartBatchBuilder.this.serverStartupListener.unexpectOnDemand(serviceName);
  }
  delegate.setInitialMode(mode);
  return this;
}","@Override public BatchServiceBuilder<T> setInitialMode(ServiceController.Mode mode){
  if (mode.equals(ServiceController.Mode.ON_DEMAND)) {
    serverStartupListener.expectOnDemand(serviceName);
  }
 else {
    serverStartupListener.unexpectOnDemand(serviceName);
  }
  delegate.setInitialMode(mode);
  return this;
}",0.420899854862119
168024,"@Override public BatchServiceBuilder addOptionalDependencies(Iterable<ServiceName> dependencies){
  delegate.addOptionalDependencies(dependencies);
  return this;
}","@Override public BatchServiceBuilder<T> addOptionalDependencies(Iterable<ServiceName> dependencies){
  delegate.addOptionalDependencies(dependencies);
  return this;
}",0.9909365558912386
168025,"@Override public BatchServiceBuilder addListener(Collection<? extends ServiceListener<? super T>> collection){
  delegate.addListener(collection);
  return this;
}","@Override public BatchServiceBuilder<T> addListener(Collection<? extends ServiceListener<? super T>> collection){
  delegate.addListener(collection);
  return this;
}",0.9908814589665652
168026,"/** 
 * {@inheritDoc} 
 */
protected Class<RemotingSubsystemElement> getElementClass(){
  return RemotingSubsystemElement.class;
}","/** 
 * {@inheritDoc} 
 */
@Override protected Class<RemotingSubsystemElement> getElementClass(){
  return RemotingSubsystemElement.class;
}",0.9629629629629628
168027,"/** 
 * {@inheritDoc} 
 */
public void activate(final ServiceActivatorContext context){
  log.info(""String_Node_Str"");
  final BatchBuilder batchBuilder=context.getBatchBuilder();
  final EndpointService endpointService=new EndpointService();
  final Injector<Executor> executorInjector=endpointService.getExecutorInjector();
  final BatchServiceBuilder<Endpoint> serviceBuilder=batchBuilder.addService(JBOSS_REMOTING_ENDPOINT,endpointService);
  serviceBuilder.addDependency(JBOSS_THREAD_SCHEDULED_EXECUTOR.append(threadPoolName),Executor.class,executorInjector);
  serviceBuilder.setInitialMode(ServiceController.Mode.ON_DEMAND);
  endpointService.setOptionMap(OptionMap.EMPTY);
}","/** 
 * {@inheritDoc} 
 */
@Override public void activate(final ServiceActivatorContext context){
  log.info(""String_Node_Str"");
  final BatchBuilder batchBuilder=context.getBatchBuilder();
  final EndpointService endpointService=new EndpointService();
  final Injector<Executor> executorInjector=endpointService.getExecutorInjector();
  final BatchServiceBuilder<Endpoint> serviceBuilder=batchBuilder.addService(JBOSS_REMOTING_ENDPOINT,endpointService);
  serviceBuilder.addDependency(JBOSS_THREAD_SCHEDULED_EXECUTOR.append(threadPoolName),Executor.class,executorInjector);
  serviceBuilder.setInitialMode(ServiceController.Mode.ON_DEMAND);
  endpointService.setOptionMap(OptionMap.EMPTY);
}",0.992721979621543
168028,"/** 
 * {@inheritDoc} 
 */
public void writeContent(final XMLExtendedStreamWriter streamWriter) throws XMLStreamException {
  for (  ConnectorElement element : connectors.values()) {
    streamWriter.writeStartElement(""String_Node_Str"");
    element.writeContent(streamWriter);
  }
  streamWriter.writeEndElement();
}","/** 
 * {@inheritDoc} 
 */
@Override public void writeContent(final XMLExtendedStreamWriter streamWriter) throws XMLStreamException {
  streamWriter.writeAttribute(Attribute.THREAD_POOL.getLocalName(),threadPoolName);
  for (  ConnectorElement element : connectors.values()) {
    streamWriter.writeStartElement(""String_Node_Str"");
    element.writeContent(streamWriter);
  }
  streamWriter.writeEndElement();
}",0.8708791208791209
168029,"/** 
 * {@inheritDoc} 
 */
public long elementHash(){
  return calculateElementHashOf(connectors.values(),0L);
}","/** 
 * {@inheritDoc} 
 */
@Override public long elementHash(){
  return calculateElementHashOf(connectors.values(),0L);
}",0.9572649572649572
168030,"protected static TimeSpec readTimeSpecElement(final XMLExtendedStreamReader reader) throws XMLStreamException {
  TimeUnit unit=null;
  long qty=-1L;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
switch (Attribute.forName(reader.getAttributeLocalName(i))) {
case TIME:
{
        qty=reader.getLongAttributeValue(i);
        break;
      }
case UNIT:
{
      unit=reader.getAttributeValue(i,TimeUnit.class);
      break;
    }
default :
{
    throw unexpectedAttribute(reader,i);
  }
}
}
if (qty == -1L) throw missingRequired(reader,Collections.singleton(Attribute.TIME));
if (unit == null) throw missingRequired(reader,Collections.singleton(Attribute.UNIT));
requireNoContent(reader);
return new TimeSpec(unit,qty);
}","protected static TimeSpec readTimeSpecElement(final XMLExtendedStreamReader reader) throws XMLStreamException {
  TimeUnit unit=null;
  long qty=-1L;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
switch (Attribute.forName(reader.getAttributeLocalName(i))) {
case TIME:
{
        qty=reader.getLongAttributeValue(i);
        break;
      }
case UNIT:
{
      String val=reader.getAttributeValue(i);
      unit=Enum.valueOf(TimeUnit.class,val.toUpperCase());
      break;
    }
default :
{
    throw unexpectedAttribute(reader,i);
  }
}
}
if (qty == -1L) throw missingRequired(reader,Collections.singleton(Attribute.TIME));
if (unit == null) throw missingRequired(reader,Collections.singleton(Attribute.UNIT));
requireNoContent(reader);
return new TimeSpec(unit,qty);
}",0.9458762886597938
168031,"public long elementHash(){
  long hash=name.hashCode() & 0xFFFFFFFFL;
  if (threadFactory != null)   hash=Long.rotateLeft(hash,1) ^ threadFactory.hashCode() & 0xFFFFFFFFL;
  if (maxThreads != null)   hash=Long.rotateLeft(hash,1) ^ maxThreads.elementHash();
  if (keepaliveTime != null)   hash=Long.rotateLeft(hash,1) ^ keepaliveTime.elementHash();
  return hash;
}","@Override public long elementHash(){
  long hash=name.hashCode() & 0xFFFFFFFFL;
  if (threadFactory != null)   hash=Long.rotateLeft(hash,1) ^ threadFactory.hashCode() & 0xFFFFFFFFL;
  if (maxThreads != null)   hash=Long.rotateLeft(hash,1) ^ maxThreads.elementHash();
  if (keepaliveTime != null)   hash=Long.rotateLeft(hash,1) ^ keepaliveTime.elementHash();
  return hash;
}",0.986449864498645
168032,"protected Class<BoundedQueueThreadPoolExecutorElement> getElementClass(){
  return BoundedQueueThreadPoolExecutorElement.class;
}","@Override protected Class<BoundedQueueThreadPoolExecutorElement> getElementClass(){
  return BoundedQueueThreadPoolExecutorElement.class;
}",0.9626865671641792
168033,"public void writeContent(final XMLExtendedStreamWriter streamWriter) throws XMLStreamException {
  streamWriter.writeAttribute(""String_Node_Str"",getName());
  if (blocking) {
    streamWriter.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (allowCoreTimeout) {
    streamWriter.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (coreThreads != null) {
    writeScaledCountElement(streamWriter,coreThreads,""String_Node_Str"");
  }
  writeScaledCountElement(streamWriter,queueLength,""String_Node_Str"");
  writeScaledCountElement(streamWriter,getMaxThreads(),""String_Node_Str"");
  final TimeSpec keepaliveTime=getKeepaliveTime();
  if (keepaliveTime != null)   writeTimeSpecElement(streamWriter,keepaliveTime,""String_Node_Str"");
  final String threadFactory=getThreadFactory();
  if (threadFactory != null) {
    streamWriter.writeEmptyElement(""String_Node_Str"");
    streamWriter.writeAttribute(""String_Node_Str"",threadFactory);
  }
  final PropertiesElement properties=getProperties();
  if (properties != null) {
    streamWriter.writeStartElement(""String_Node_Str"");
    properties.writeContent(streamWriter);
  }
  if (handoffExecutor != null) {
    streamWriter.writeEmptyElement(""String_Node_Str"");
    streamWriter.writeAttribute(""String_Node_Str"",handoffExecutor);
  }
  streamWriter.writeEndElement();
}","@Override public void writeContent(final XMLExtendedStreamWriter streamWriter) throws XMLStreamException {
  streamWriter.writeAttribute(""String_Node_Str"",getName());
  if (blocking) {
    streamWriter.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (allowCoreTimeout) {
    streamWriter.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (coreThreads != null) {
    writeScaledCountElement(streamWriter,coreThreads,""String_Node_Str"");
  }
  writeScaledCountElement(streamWriter,queueLength,""String_Node_Str"");
  writeScaledCountElement(streamWriter,getMaxThreads(),""String_Node_Str"");
  final TimeSpec keepaliveTime=getKeepaliveTime();
  if (keepaliveTime != null)   writeTimeSpecElement(streamWriter,keepaliveTime,""String_Node_Str"");
  final String threadFactory=getThreadFactory();
  if (threadFactory != null) {
    streamWriter.writeEmptyElement(""String_Node_Str"");
    streamWriter.writeAttribute(""String_Node_Str"",threadFactory);
  }
  final PropertiesElement properties=getProperties();
  if (properties != null) {
    streamWriter.writeStartElement(""String_Node_Str"");
    properties.writeContent(streamWriter);
  }
  if (handoffExecutor != null) {
    streamWriter.writeEmptyElement(""String_Node_Str"");
    streamWriter.writeAttribute(""String_Node_Str"",handoffExecutor);
  }
  streamWriter.writeEndElement();
}",0.996268656716418
168034,"public long elementHash(){
  long hash=super.elementHash();
  hash=Long.rotateLeft(hash,1) ^ Boolean.valueOf(blocking).hashCode() & 0xffffffffL;
  hash=Long.rotateLeft(hash,1) ^ Boolean.valueOf(allowCoreTimeout).hashCode() & 0xffffffffL;
  if (handoffExecutor != null)   hash=Long.rotateLeft(hash,1) ^ handoffExecutor.hashCode() & 0xffffffffL;
  hash=Long.rotateLeft(hash,1) ^ queueLength.elementHash();
  if (coreThreads != null)   hash=Long.rotateLeft(hash,1) ^ coreThreads.elementHash();
  return hash;
}","@Override public long elementHash(){
  long hash=super.elementHash();
  hash=Long.rotateLeft(hash,1) ^ Boolean.valueOf(blocking).hashCode() & 0xffffffffL;
  hash=Long.rotateLeft(hash,1) ^ Boolean.valueOf(allowCoreTimeout).hashCode() & 0xffffffffL;
  if (handoffExecutor != null)   hash=Long.rotateLeft(hash,1) ^ handoffExecutor.hashCode() & 0xffffffffL;
  hash=Long.rotateLeft(hash,1) ^ queueLength.elementHash();
  if (coreThreads != null)   hash=Long.rotateLeft(hash,1) ^ coreThreads.elementHash();
  return hash;
}",0.990234375
168035,"protected Class<QueuelessThreadPoolExecutorElement> getElementClass(){
  return QueuelessThreadPoolExecutorElement.class;
}","@Override protected Class<QueuelessThreadPoolExecutorElement> getElementClass(){
  return QueuelessThreadPoolExecutorElement.class;
}",0.9609375
168036,"public void writeContent(final XMLExtendedStreamWriter streamWriter) throws XMLStreamException {
  streamWriter.writeAttribute(""String_Node_Str"",getName());
  streamWriter.writeAttribute(""String_Node_Str"",Boolean.toString(blocking));
  final ScaledCount maxThreads=getMaxThreads();
  if (maxThreads != null)   writeScaledCountElement(streamWriter,maxThreads,""String_Node_Str"");
  final TimeSpec keepaliveTime=getKeepaliveTime();
  if (keepaliveTime != null)   writeTimeSpecElement(streamWriter,keepaliveTime,""String_Node_Str"");
  final String threadFactory=getThreadFactory();
  if (threadFactory != null) {
    streamWriter.writeEmptyElement(""String_Node_Str"");
    streamWriter.writeAttribute(""String_Node_Str"",threadFactory);
  }
  final PropertiesElement properties=getProperties();
  if (properties != null) {
    streamWriter.writeStartElement(""String_Node_Str"");
    properties.writeContent(streamWriter);
  }
  if (handoffExecutor != null) {
    streamWriter.writeEmptyElement(""String_Node_Str"");
    streamWriter.writeAttribute(""String_Node_Str"",handoffExecutor);
  }
  streamWriter.writeEndElement();
}","@Override public void writeContent(final XMLExtendedStreamWriter streamWriter) throws XMLStreamException {
  streamWriter.writeAttribute(""String_Node_Str"",getName());
  streamWriter.writeAttribute(""String_Node_Str"",Boolean.toString(blocking));
  final ScaledCount maxThreads=getMaxThreads();
  if (maxThreads != null)   writeScaledCountElement(streamWriter,maxThreads,""String_Node_Str"");
  final TimeSpec keepaliveTime=getKeepaliveTime();
  if (keepaliveTime != null)   writeTimeSpecElement(streamWriter,keepaliveTime,""String_Node_Str"");
  final String threadFactory=getThreadFactory();
  if (threadFactory != null) {
    streamWriter.writeEmptyElement(""String_Node_Str"");
    streamWriter.writeAttribute(""String_Node_Str"",threadFactory);
  }
  final PropertiesElement properties=getProperties();
  if (properties != null) {
    streamWriter.writeStartElement(""String_Node_Str"");
    properties.writeContent(streamWriter);
  }
  if (handoffExecutor != null) {
    streamWriter.writeEmptyElement(""String_Node_Str"");
    streamWriter.writeAttribute(""String_Node_Str"",handoffExecutor);
  }
  streamWriter.writeEndElement();
}",0.9955237242614146
168037,"public long elementHash(){
  return super.elementHash();
}","@Override public long elementHash(){
  return super.elementHash();
}",0.9206349206349206
168038,"protected Class<ScheduledThreadPoolExecutorElement> getElementClass(){
  return ScheduledThreadPoolExecutorElement.class;
}","@Override protected Class<ScheduledThreadPoolExecutorElement> getElementClass(){
  return ScheduledThreadPoolExecutorElement.class;
}",0.9609375
168039,"public void writeContent(final XMLExtendedStreamWriter streamWriter) throws XMLStreamException {
  streamWriter.writeAttribute(""String_Node_Str"",getName());
  final ScaledCount maxThreads=getMaxThreads();
  if (maxThreads != null)   writeScaledCountElement(streamWriter,maxThreads,""String_Node_Str"");
  final TimeSpec keepaliveTime=getKeepaliveTime();
  if (keepaliveTime != null)   writeTimeSpecElement(streamWriter,keepaliveTime,""String_Node_Str"");
  final String threadFactory=getThreadFactory();
  if (threadFactory != null) {
    streamWriter.writeEmptyElement(""String_Node_Str"");
    streamWriter.writeAttribute(""String_Node_Str"",threadFactory);
  }
  final PropertiesElement properties=getProperties();
  if (properties != null) {
    streamWriter.writeStartElement(""String_Node_Str"");
    properties.writeContent(streamWriter);
  }
  streamWriter.writeEndElement();
}","@Override public void writeContent(final XMLExtendedStreamWriter streamWriter) throws XMLStreamException {
  streamWriter.writeAttribute(""String_Node_Str"",getName());
  final ScaledCount maxThreads=getMaxThreads();
  if (maxThreads != null)   writeScaledCountElement(streamWriter,maxThreads,""String_Node_Str"");
  final TimeSpec keepaliveTime=getKeepaliveTime();
  if (keepaliveTime != null)   writeTimeSpecElement(streamWriter,keepaliveTime,""String_Node_Str"");
  final String threadFactory=getThreadFactory();
  if (threadFactory != null) {
    streamWriter.writeEmptyElement(""String_Node_Str"");
    streamWriter.writeAttribute(""String_Node_Str"",threadFactory);
  }
  final PropertiesElement properties=getProperties();
  if (properties != null) {
    streamWriter.writeStartElement(""String_Node_Str"");
    properties.writeContent(streamWriter);
  }
  streamWriter.writeEndElement();
}",0.9943181818181818
168040,"public long elementHash(){
  return super.elementHash();
}","@Override public long elementHash(){
  return super.elementHash();
}",0.9206349206349206
168041,"protected Class<ThreadFactoryExecutorElement> getElementClass(){
  return ThreadFactoryExecutorElement.class;
}","@Override protected Class<ThreadFactoryExecutorElement> getElementClass(){
  return ThreadFactoryExecutorElement.class;
}",0.956896551724138
168042,"public void writeContent(final XMLExtendedStreamWriter streamWriter) throws XMLStreamException {
  streamWriter.writeAttribute(""String_Node_Str"",getName());
  if (blocking) {
    streamWriter.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  final ScaledCount maxThreads=getMaxThreads();
  if (maxThreads != null)   writeScaledCountElement(streamWriter,maxThreads,""String_Node_Str"");
  final String threadFactory=getThreadFactory();
  if (threadFactory != null) {
    streamWriter.writeEmptyElement(""String_Node_Str"");
    streamWriter.writeAttribute(""String_Node_Str"",threadFactory);
  }
  final PropertiesElement properties=getProperties();
  if (properties != null) {
    streamWriter.writeStartElement(""String_Node_Str"");
    properties.writeContent(streamWriter);
  }
  streamWriter.writeEndElement();
}","@Override public void writeContent(final XMLExtendedStreamWriter streamWriter) throws XMLStreamException {
  streamWriter.writeAttribute(""String_Node_Str"",getName());
  if (blocking) {
    streamWriter.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  final ScaledCount maxThreads=getMaxThreads();
  if (maxThreads != null)   writeScaledCountElement(streamWriter,maxThreads,""String_Node_Str"");
  final String threadFactory=getThreadFactory();
  if (threadFactory != null) {
    streamWriter.writeEmptyElement(""String_Node_Str"");
    streamWriter.writeAttribute(""String_Node_Str"",threadFactory);
  }
  final PropertiesElement properties=getProperties();
  if (properties != null) {
    streamWriter.writeStartElement(""String_Node_Str"");
    properties.writeContent(streamWriter);
  }
  streamWriter.writeEndElement();
}",0.9939172749391728
168043,"public long elementHash(){
  return super.elementHash();
}","@Override public long elementHash(){
  return super.elementHash();
}",0.9206349206349206
168044,"public void activate(final ServiceActivatorContext context){
  log.info(""String_Node_Str"");
  for (  ThreadFactoryElement element : threadFactories.values()) {
    element.activate(context);
  }
  for (  ScheduledThreadPoolExecutorElement element : scheduledExecutors.values()) {
    element.activate(context);
  }
  for (  AbstractExecutorElement<?> element : executors.values()) {
    element.activate(context);
  }
}","@Override public void activate(final ServiceActivatorContext context){
  log.info(""String_Node_Str"");
  for (  ThreadFactoryElement element : threadFactories.values()) {
    element.activate(context);
  }
  for (  ScheduledThreadPoolExecutorElement element : scheduledExecutors.values()) {
    element.activate(context);
  }
  for (  AbstractExecutorElement<?> element : executors.values()) {
    element.activate(context);
  }
}",0.9882075471698112
168045,"protected Class<ThreadsSubsystemElement> getElementClass(){
  return null;
}","@Override protected Class<ThreadsSubsystemElement> getElementClass(){
  return null;
}",0.9382716049382716
168046,"public void writeContent(final XMLExtendedStreamWriter streamWriter) throws XMLStreamException {
}","@Override public void writeContent(final XMLExtendedStreamWriter streamWriter) throws XMLStreamException {
synchronized (threadFactories) {
    for (    ThreadFactoryElement tfe : threadFactories.values()) {
      streamWriter.writeStartElement(Element.THREAD_FACTORY.getLocalName());
      tfe.writeContent(streamWriter);
    }
  }
synchronized (scheduledExecutors) {
    for (    ScheduledThreadPoolExecutorElement stpe : scheduledExecutors.values()) {
      streamWriter.writeStartElement(Element.SCHEDULED_THREAD_POOL_EXECUTOR.getLocalName());
      stpe.writeContent(streamWriter);
    }
  }
synchronized (executors) {
    for (    AbstractExecutorElement<?> aee : executors.values()) {
      streamWriter.writeStartElement(aee.getStandardElement().getLocalName());
      aee.writeContent(streamWriter);
    }
  }
  streamWriter.writeEndElement();
}",0.2058823529411764
168047,"public long elementHash(){
  long hash=0L;
  hash=calculateElementHashOf(threadFactories.values(),hash);
  return hash;
}","@Override public long elementHash(){
  long hash=0L;
  hash=calculateElementHashOf(threadFactories.values(),hash);
  return hash;
}",0.9603174603174603
168048,"protected Class<UnboundedQueueThreadPoolExecutor> getElementClass(){
  return UnboundedQueueThreadPoolExecutor.class;
}","@Override protected Class<UnboundedQueueThreadPoolExecutor> getElementClass(){
  return UnboundedQueueThreadPoolExecutor.class;
}",0.9596774193548387
168049,"public void writeContent(final XMLExtendedStreamWriter streamWriter) throws XMLStreamException {
  streamWriter.writeAttribute(""String_Node_Str"",getName());
  final ScaledCount maxThreads=getMaxThreads();
  if (maxThreads != null)   writeScaledCountElement(streamWriter,maxThreads,""String_Node_Str"");
  final TimeSpec keepaliveTime=getKeepaliveTime();
  if (keepaliveTime != null)   writeTimeSpecElement(streamWriter,keepaliveTime,""String_Node_Str"");
  final String threadFactory=getThreadFactory();
  if (threadFactory != null) {
    streamWriter.writeEmptyElement(""String_Node_Str"");
    streamWriter.writeAttribute(""String_Node_Str"",threadFactory);
  }
  final PropertiesElement properties=getProperties();
  if (properties != null) {
    streamWriter.writeStartElement(""String_Node_Str"");
    properties.writeContent(streamWriter);
  }
  streamWriter.writeEndElement();
}","@Override public void writeContent(final XMLExtendedStreamWriter streamWriter) throws XMLStreamException {
  streamWriter.writeAttribute(""String_Node_Str"",getName());
  final ScaledCount maxThreads=getMaxThreads();
  if (maxThreads != null)   writeScaledCountElement(streamWriter,maxThreads,""String_Node_Str"");
  final TimeSpec keepaliveTime=getKeepaliveTime();
  if (keepaliveTime != null)   writeTimeSpecElement(streamWriter,keepaliveTime,""String_Node_Str"");
  final String threadFactory=getThreadFactory();
  if (threadFactory != null) {
    streamWriter.writeEmptyElement(""String_Node_Str"");
    streamWriter.writeAttribute(""String_Node_Str"",threadFactory);
  }
  final PropertiesElement properties=getProperties();
  if (properties != null) {
    streamWriter.writeStartElement(""String_Node_Str"");
    properties.writeContent(streamWriter);
  }
  streamWriter.writeEndElement();
}",0.9943181818181818
168050,"public long elementHash(){
  return 0;
}","@Override public long elementHash(){
  return 0;
}",0.8888888888888888
168051,"public void activate(final ServiceActivatorContext context){
  final BatchBuilder batchBuilder=context.getBatchBuilder();
  final ScheduledThreadPoolService service=new ScheduledThreadPoolService();
  final ServiceName serviceName=JBOSS_THREAD_SCHEDULED_EXECUTOR.append(getName());
  final BatchServiceBuilder<ScheduledExecutorService> serviceBuilder=batchBuilder.addService(serviceName,service);
  final String threadFactory=getThreadFactory();
  final ServiceName threadFactoryName;
  if (threadFactory == null) {
    threadFactoryName=serviceName.append(""String_Node_Str"");
    batchBuilder.addService(threadFactoryName,new ThreadFactoryService());
  }
 else {
    threadFactoryName=JBOSS_THREAD_FACTORY.append(threadFactory);
  }
  serviceBuilder.addDependency(JBOSS_THREAD_FACTORY.append(threadFactory),ThreadFactory.class,service.getThreadFactoryInjector());
}","public void activate(final ServiceActivatorContext context){
  final BatchBuilder batchBuilder=context.getBatchBuilder();
  final ScheduledThreadPoolService service=new ScheduledThreadPoolService();
  final ServiceName serviceName=JBOSS_THREAD_SCHEDULED_EXECUTOR.append(getName());
  final BatchServiceBuilder<ScheduledExecutorService> serviceBuilder=batchBuilder.addService(serviceName,service);
  final String threadFactory=getThreadFactory();
  final ServiceName threadFactoryName;
  if (threadFactory == null) {
    threadFactoryName=serviceName.append(""String_Node_Str"");
    batchBuilder.addService(threadFactoryName,new ThreadFactoryService());
  }
 else {
    threadFactoryName=JBOSS_THREAD_FACTORY.append(threadFactory);
  }
  serviceBuilder.addDependency(threadFactoryName,ThreadFactory.class,service.getThreadFactoryInjector());
}",0.9654364381956648
168052,"public ScheduledThreadPoolExecutorElement(final XMLExtendedStreamReader reader) throws XMLStreamException {
  super(reader);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    if (reader.getAttributeNamespace(i) != null) {
      throw unexpectedAttribute(reader,i);
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
      break;
default :
    throw unexpectedAttribute(reader,i);
}
}
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case THREADS_1_0:
{
switch (Element.forName(reader.getLocalName())) {
case MAX_THREADS:
{
        setMaxThreads(readScaledCountElement(reader));
        break;
      }
case KEEPALIVE_TIME:
{
      setKeepaliveTime(readTimeSpecElement(reader));
      break;
    }
case THREAD_FACTORY:
{
    setThreadFactory(readStringAttributeElement(reader,""String_Node_Str""));
    break;
  }
case PROPERTIES:
{
  setProperties(new PropertiesElement(reader));
  break;
}
default :
throw unexpectedElement(reader);
}
}
default :
{
throw unexpectedElement(reader);
}
}
}
}","public ScheduledThreadPoolExecutorElement(final XMLExtendedStreamReader reader) throws XMLStreamException {
  super(reader);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    if (reader.getAttributeNamespace(i) != null) {
      throw unexpectedAttribute(reader,i);
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
      break;
default :
    throw unexpectedAttribute(reader,i);
}
}
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case THREADS_1_0:
{
switch (Element.forName(reader.getLocalName())) {
case MAX_THREADS:
{
        setMaxThreads(readScaledCountElement(reader));
        break;
      }
case KEEPALIVE_TIME:
{
      setKeepaliveTime(readTimeSpecElement(reader));
      break;
    }
case THREAD_FACTORY:
{
    setThreadFactory(readStringAttributeElement(reader,""String_Node_Str""));
    break;
  }
case PROPERTIES:
{
  setProperties(new PropertiesElement(reader));
  break;
}
default :
throw unexpectedElement(reader);
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}",0.996984058595433
168053,"public void start(Standalone config) throws ServerStartException {
  this.config=config;
  logger.info(""String_Node_Str"" + config.getServerName());
  serviceContainer=ServiceContainer.Factory.create();
  final BatchBuilder batchBuilder=serviceContainer.batchBuilder();
  final DeploymentServiceListener listener=new DeploymentServiceListener(new DeploymentServiceListener.Callback(){
    @Override public void run(    Map<ServiceName,StartException> serviceFailures,    long elapsedTime,    int numberServices){
      if (serviceFailures.isEmpty()) {
        logger.infof(""String_Node_Str"",numberServices,elapsedTime);
        new Exception().printStackTrace();
        sendMessage(""String_Node_Str"");
      }
 else {
        sendMessage(""String_Node_Str"");
        final StringBuilder buff=new StringBuilder(String.format(""String_Node_Str"",numberServices,elapsedTime));
        buff.append(""String_Node_Str"");
        for (        Map.Entry<ServiceName,StartException> entry : serviceFailures.entrySet()) {
          buff.append(String.format(""String_Node_Str"",entry.getKey(),entry.getValue().getMessage()));
        }
        logger.error(buff.toString());
      }
    }
  }
);
  batchBuilder.addListener(listener);
  try {
    listener.startBatch();
    final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContextImpl(batchBuilder);
    config.activate(serviceActivatorContext);
    batchBuilder.install();
    listener.finishBatch();
    listener.finishDeployment();
  }
 catch (  Throwable t) {
    sendMessage(""String_Node_Str"");
    throw new ServerStartException(""String_Node_Str"",t);
  }
}","public void start(Standalone config) throws ServerStartException {
  this.config=config;
  logger.info(""String_Node_Str"" + config.getServerName());
  serviceContainer=ServiceContainer.Factory.create();
  final BatchBuilder batchBuilder=serviceContainer.batchBuilder();
  final DeploymentServiceListener listener=new DeploymentServiceListener(new DeploymentServiceListener.Callback(){
    @Override public void run(    Map<ServiceName,StartException> serviceFailures,    long elapsedTime,    int numberServices){
      if (serviceFailures.isEmpty()) {
        logger.infof(""String_Node_Str"",numberServices,elapsedTime);
        sendMessage(""String_Node_Str"");
      }
 else {
        sendMessage(""String_Node_Str"");
        final StringBuilder buff=new StringBuilder(String.format(""String_Node_Str"",numberServices,elapsedTime));
        buff.append(""String_Node_Str"");
        for (        Map.Entry<ServiceName,StartException> entry : serviceFailures.entrySet()) {
          buff.append(String.format(""String_Node_Str"",entry.getKey(),entry.getValue().getMessage()));
        }
        logger.error(buff.toString());
      }
    }
  }
);
  batchBuilder.addListener(listener);
  try {
    listener.startBatch();
    final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContextImpl(batchBuilder);
    config.activate(serviceActivatorContext);
    batchBuilder.install();
    listener.finishBatch();
    listener.finishDeployment();
  }
 catch (  Throwable t) {
    sendMessage(""String_Node_Str"");
    throw new ServerStartException(""String_Node_Str"",t);
  }
}",0.4510478573662809
168054,"@Override public void run(Map<ServiceName,StartException> serviceFailures,long elapsedTime,int numberServices){
  if (serviceFailures.isEmpty()) {
    logger.infof(""String_Node_Str"",numberServices,elapsedTime);
    new Exception().printStackTrace();
    sendMessage(""String_Node_Str"");
  }
 else {
    sendMessage(""String_Node_Str"");
    final StringBuilder buff=new StringBuilder(String.format(""String_Node_Str"",numberServices,elapsedTime));
    buff.append(""String_Node_Str"");
    for (    Map.Entry<ServiceName,StartException> entry : serviceFailures.entrySet()) {
      buff.append(String.format(""String_Node_Str"",entry.getKey(),entry.getValue().getMessage()));
    }
    logger.error(buff.toString());
  }
}","@Override public void run(Map<ServiceName,StartException> serviceFailures,long elapsedTime,int numberServices){
  if (serviceFailures.isEmpty()) {
    logger.infof(""String_Node_Str"",numberServices,elapsedTime);
    sendMessage(""String_Node_Str"");
  }
 else {
    sendMessage(""String_Node_Str"");
    final StringBuilder buff=new StringBuilder(String.format(""String_Node_Str"",numberServices,elapsedTime));
    buff.append(""String_Node_Str"");
    for (    Map.Entry<ServiceName,StartException> entry : serviceFailures.entrySet()) {
      buff.append(String.format(""String_Node_Str"",entry.getKey(),entry.getValue().getMessage()));
    }
    logger.error(buff.toString());
  }
}",0.3509025270758122
168055,"private void launchProcessManagerSlave(){
  this.processManagerSlave=ProcessManagerSlaveFactory.getInstance().getProcessManagerSlave(environment,messageHandler);
  Thread t=new Thread(this.processManagerSlave.getController(),""String_Node_Str"");
  t.setDaemon(true);
  t.start();
}","private void launchProcessManagerSlave(){
  this.processManagerSlave=ProcessManagerSlaveFactory.getInstance().getProcessManagerSlave(environment,messageHandler);
  Thread t=new Thread(this.processManagerSlave.getController(),""String_Node_Str"");
  t.start();
}",0.9424860853432282
168056,"private PropertySource<?> loadPropertySource(Resource resource,String path){
  if (resource.exists()) {
    try {
      PropertySource<?> source=new YamlPropertySourceLoader().load(path,resource,null);
      if (source != null) {
        logger.info(""String_Node_Str"" + resource);
      }
      return source;
    }
 catch (    IOException e) {
    }
  }
  return null;
}","private PropertySource<?> loadPropertySource(Resource resource,String path){
  if (resource.exists()) {
    try {
      PropertySource<?> source=new YamlPropertySourceLoader().load(path,resource,null,this.environment::acceptsProfiles);
      if (source != null) {
        logger.info(""String_Node_Str"" + resource);
      }
      return source;
    }
 catch (    IOException e) {
    }
  }
  return null;
}",0.9561855670103092
168057,"/** 
 * @return the method
 */
public String getMethod(){
  return method;
}","public String getMethod(){
  return method;
}",0.743801652892562
168058,"private void setStatusLine(String line){
  statusLine=line;
  if (request) {
    sl=new RequestStatusLine(line);
    method=sl.getMethod();
  }
 else {
    ResponseStatusLine sl=new ResponseStatusLine(line);
    statusCode=sl.getStatusCode();
  }
}","private void setStatusLine(String line){
  Log.d(TAG,channelName + ""String_Node_Str"" + line);
  statusLine=line;
  if (request) {
    sl=new RequestLine(line);
    method=sl.getMethod();
  }
 else {
    ResponseLine sl=new ResponseLine(line);
    statusCode=sl.getStatusCode();
  }
}",0.8662900188323918
168059,"public Channel(boolean req){
  readBuf=new char[1024];
  headers=new HashMap<String,String>();
  request=req;
  channelName=""String_Node_Str"" + (INDEX++);
  reset();
}","public Channel(boolean req){
  readBuf=new char[1024];
  headers=new HashMap<String,String>();
  request=req;
  channelName=""String_Node_Str"" + (INDEX++);
  readOffset=0;
  reset();
}",0.9542857142857144
168060,"public void reset(){
  lastActive=System.currentTimeMillis();
  readOffset=0;
  status=Status.STATUS_LINE;
  headers.clear();
}","public void reset(){
  lastActive=System.currentTimeMillis();
  if (""String_Node_Str"".equals(method)) {
    status=Status.CONTENT;
  }
 else {
    status=Status.STATUS_LINE;
  }
  headers.clear();
}",0.7446153846153846
168061,"/** 
 * @param listener the listener to set
 */
public void setListener(ChannelListener listener){
  this.listener=listener;
}","public void setListener(ChannelListener listener){
  this.listener=listener;
}",0.7647058823529411
168062,"/** 
 * @return the listener
 */
public ChannelListener getListener(){
  return listener;
}","public ChannelListener getListener(){
  return listener;
}",0.7785234899328859
168063,"private boolean connResponse(Channel channel){
  try {
    String host=null;
    int port;
    String method=channel.getMethod();
    if (responseChannel == null) {
      SocketChannel socketChannel=null;
      if (""String_Node_Str"".equals(method)) {
        host=channel.getHost();
        port=channel.getPort();
        socketChannel=connect(host,port);
      }
 else {
        host=channel.getHost();
        port=channel.getPort();
        socketChannel=connect(host,port);
      }
      if (socketChannel == null) {
        return false;
      }
      responseChannel=new Channel(false);
      responseChannel.setListener(this);
      responseChannel.setSocket(socketChannel);
      Selector selector=ProxyServer.getInstance().getSeletor();
      SelectionKey sk=socketChannel.register(selector,SelectionKey.OP_READ,this);
      responseChannel.setSelectionKey(sk);
    }
 else {
      Log.d(TAG,""String_Node_Str"" + responseChannel.getName());
      responseChannel.reset();
    }
    StringBuffer stringBuffer=new StringBuffer();
    if (""String_Node_Str"".equals(method)) {
      stringBuffer.append(CONNECT_OK);
      responseChannel.setStatus(Status.CONTENT);
      byte[] sendBytes=stringBuffer.toString().getBytes();
      ByteBuffer byteBuffer=ByteBuffer.wrap(sendBytes);
      requestChannel.write(byteBuffer);
    }
 else {
      stringBuffer.append(method + ""String_Node_Str"");
      String url=channel.getUrl();
      Uri uri=Uri.parse(url);
      String path=uri.getPath();
      stringBuffer.append(path).append(""String_Node_Str"").append(""String_Node_Str"").append(CRLF);
      Map<String,String> headers=channel.getHeaders();
      Iterator<String> iterator=headers.keySet().iterator();
      stringBuffer.append(""String_Node_Str"").append(url).append(CRLF);
      while (iterator.hasNext()) {
        String key=iterator.next();
        stringBuffer.append(key).append(""String_Node_Str"").append(headers.get(key)).append(CRLF);
      }
      stringBuffer.append(CRLF);
      String text=stringBuffer.toString();
      Log.d(TAG,text);
      byte[] sendBytes=text.getBytes();
      ByteBuffer byteBuffer=ByteBuffer.wrap(sendBytes);
      responseChannel.write(byteBuffer);
    }
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"",e);
    return false;
  }
  return true;
}","private boolean connResponse(Channel channel){
  try {
    String host=null;
    int port;
    String method=channel.getMethod();
    if (responseChannel == null) {
      SocketChannel socketChannel=null;
      if (""String_Node_Str"".equals(method)) {
        host=channel.getHost();
        port=channel.getPort();
        socketChannel=connect(host,port);
      }
 else {
        host=channel.getHost();
        port=channel.getPort();
        socketChannel=connect(host,port);
      }
      if (socketChannel == null) {
        return false;
      }
      responseChannel=new Channel(false);
      responseChannel.setListener(this);
      responseChannel.setSocket(socketChannel);
      Selector selector=ProxyServer.getInstance().getSeletor();
      SelectionKey sk=socketChannel.register(selector,SelectionKey.OP_READ,this);
      responseChannel.setSelectionKey(sk);
    }
 else {
      Log.d(TAG,""String_Node_Str"" + responseChannel.getName());
      responseChannel.reset();
    }
    StringBuffer stringBuffer=new StringBuffer();
    if (""String_Node_Str"".equals(method)) {
      stringBuffer.append(CONNECT_OK);
      responseChannel.setStatus(Status.CONTENT);
      byte[] sendBytes=stringBuffer.toString().getBytes();
      ByteBuffer byteBuffer=ByteBuffer.wrap(sendBytes);
      requestChannel.write(byteBuffer);
    }
 else {
      stringBuffer.append(method + ""String_Node_Str"");
      String url=channel.getUrl();
      if (!url.startsWith(""String_Node_Str"")) {
        url=url.substring(url.indexOf('/',8));
      }
      Log.d(TAG,""String_Node_Str"" + url);
      stringBuffer.append(url).append(""String_Node_Str"").append(channel.getProtocol()).append(CRLF);
      Map<String,String> headers=channel.getHeaders();
      Iterator<String> iterator=headers.keySet().iterator();
      while (iterator.hasNext()) {
        String key=iterator.next();
        stringBuffer.append(key).append(""String_Node_Str"").append(headers.get(key)).append(CRLF);
      }
      stringBuffer.append(CRLF);
      String text=stringBuffer.toString();
      Log.d(TAG,text);
      byte[] sendBytes=text.getBytes();
      ByteBuffer byteBuffer=ByteBuffer.wrap(sendBytes);
      responseChannel.write(byteBuffer);
    }
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"",e);
    return false;
  }
  return true;
}",0.6438177874186551
168064,"public static ProxyServer getInstance(){
  if (instance == null) {
    instance=new ProxyServer();
  }
  return instance;
}","public static ProxyServer getInstance(){
synchronized (ProxyServer.class) {
    if (instance == null) {
      instance=new ProxyServer();
    }
  }
  return instance;
}",0.845360824742268
168065,"public void crawl(String outputDir,int limit,String member,String search,String chamber,String congress,boolean random,IProgressMonitor monitor,boolean[] fields) throws IOException {
  first=true;
  File streamFile=new File(outputDir + File.separator + ""String_Node_Str"");
  jsonfactory=new JsonFactory();
  jsonGenerator=jsonfactory.createGenerator(streamFile,JsonEncoding.UTF8);
  jsonGenerator.useDefaultPrettyPrinter();
  jsonGenerator.writeStartArray();
  String houseRemark=""String_Node_Str"";
  String chamberTxt=""String_Node_Str"";
  if (!member.equals(""String_Node_Str"") && !member.equals(""String_Node_Str"")) {
    member=member.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (chamber.equals(""String_Node_Str""))     houseRemark=""String_Node_Str"" + member + ""String_Node_Str"";
 else     houseRemark=""String_Node_Str"" + member + ""String_Node_Str"";
  }
  String query=""String_Node_Str"";
  if (!search.equals(""String_Node_Str"")) {
    query=""String_Node_Str"" + search + ""String_Node_Str"";
  }
  if (!chamber.equals(""String_Node_Str"")) {
    chamberTxt=""String_Node_Str"" + chamber + ""String_Node_Str"";
  }
  docCount=0;
  docsSavedCount=0;
  int page=1;
  int totalPages=0;
  int totalDatedFiles=0;
  BufferedWriter bw;
  Document d=null;
  boolean connected=false;
  HashSet<String> set=new HashSet<String>();
  tag:   while (true) {
    connected=false;
    if (random)     page=(int)(Math.random() * 25);
    String site=""String_Node_Str"" + congress + ""String_Node_Str""+ houseRemark+ query+ chamberTxt+ ""String_Node_Str""+ page;
    System.out.println(site);
    while (!connected) {
      try {
        d=Jsoup.connect(site).timeout(50000).userAgent(""String_Node_Str"").get();
        connected=true;
      }
 catch (      Exception e) {
        System.out.println(e);
        continue;
      }
    }
    if (first) {
      Elements number=d.getElementsByClass(""String_Node_Str"");
      String num=Jsoup.parse(number.toString()).text();
      System.out.println(num);
      if (num.equals(""String_Node_Str""))       return;
      System.out.println(""String_Node_Str"" + num.substring(num.lastIndexOf(""String_Node_Str"") + 3).replaceAll(""String_Node_Str"",""String_Node_Str""));
      int results=Integer.parseInt(num.substring(num.lastIndexOf(""String_Node_Str"") + 3).replaceAll(""String_Node_Str"",""String_Node_Str""));
      System.out.println(num + ""String_Node_Str"" + results);
      if (limit == -1)       limit=results;
      first=false;
    }
    Element t=d.getElementsByClass(""String_Node_Str"").get(0);
    String s=t.text().trim();
    String st[]=s.split(""String_Node_Str"");
    totalDatedFiles=Integer.parseInt(st[st.length - 1].replaceAll(""String_Node_Str"",""String_Node_Str""));
    Elements title=d.getElementsByClass(""String_Node_Str"");
    for (    Element links : title) {
      Elements link=links.select(""String_Node_Str"");
      String data=link.toString();
      System.out.println(data);
      int start=data.indexOf(""String_Node_Str"");
      int end=data.indexOf(""String_Node_Str"");
      Elements docJournalAbstract=null;
      System.out.print(data + ""String_Node_Str"");
      if (data.contains(""String_Node_Str""))       break tag;
      String contentLink=data.substring(start + 2,end - 1);
      if (set.contains(contentLink))       continue;
      set.add(contentLink);
      System.out.println(contentLink);
      String dateText;
      Document doc;
      try {
        doc=Jsoup.connect(contentLink).timeout(4000).userAgent(""String_Node_Str"").get();
        docJournalAbstract=doc.getElementsByClass(""String_Node_Str"");
        Elements dates=doc.getElementsByClass(""String_Node_Str"");
        jsonGenerator.writeStartObject();
        for (        Element date : dates) {
          dateText=Jsoup.parse(date.child(1).select(""String_Node_Str"").toString()).text();
          int endIndex=dateText.indexOf(""String_Node_Str"");
          if (fields[0])           jsonGenerator.writeStringField(""String_Node_Str"",dateText.substring(1,endIndex - 1));
          if (fields[1])           jsonGenerator.writeStringField(""String_Node_Str"",dateText.substring(endIndex + 1,dateText.length() - 1));
          String title1=(date.child(1)).toString().substring(4,date.child(1).toString().indexOf(""String_Node_Str""));
          if (fields[2])           jsonGenerator.writeStringField(""String_Node_Str"",title1);
          ConsoleView.printlInConsoleln(""String_Node_Str"" + title1 + ""String_Node_Str""+ docCount);
          monitor.subTask(""String_Node_Str"" + title1 + ""String_Node_Str""+ totalCount);
        }
        System.out.println(Jsoup.parse(docJournalAbstract.toString()).text());
        if (fields[3])         jsonGenerator.writeStringField(""String_Node_Str"",Jsoup.parse(docJournalAbstract.toString()).text());
        jsonGenerator.writeEndObject();
      }
 catch (      SocketTimeoutException e) {
        docCount++;
        continue;
      }
catch (      Exception e) {
        docCount++;
        continue;
      }
      docCount++;
      docsSavedCount++;
      totalCount++;
      monitor.worked(1);
      if (docCount >= limit) {
        break;
      }
    }
    if (random)     page=(int)(Math.random() * totalPages + 1);
 else {
      page++;
      if (totalCount >= totalDatedFiles - 2)       break;
    }
    if (docsSavedCount >= limit)     break;
  }
  ConsoleView.printlInConsoleln(docCount + ""String_Node_Str"");
  jsonGenerator.writeEndArray();
  jsonGenerator.flush();
  jsonGenerator.close();
}","public void crawl(String outputDir,int limit,String member,String search,String chamber,String congress,boolean random,IProgressMonitor monitor,boolean[] fields) throws IOException {
  first=true;
  File streamFile=new File(outputDir + File.separator + ""String_Node_Str"");
  jsonfactory=new JsonFactory();
  jsonGenerator=jsonfactory.createGenerator(streamFile,JsonEncoding.UTF8);
  jsonGenerator.useDefaultPrettyPrinter();
  jsonGenerator.writeStartArray();
  String houseRemark=""String_Node_Str"";
  String chamberTxt=""String_Node_Str"";
  if (!member.equals(""String_Node_Str"") && !member.equals(""String_Node_Str"")) {
    member=member.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (chamber.equals(""String_Node_Str""))     houseRemark=""String_Node_Str"" + member + ""String_Node_Str"";
 else     houseRemark=""String_Node_Str"" + member + ""String_Node_Str"";
  }
  String query=""String_Node_Str"";
  if (!search.equals(""String_Node_Str"")) {
    query=""String_Node_Str"" + search + ""String_Node_Str"";
  }
  if (!chamber.equals(""String_Node_Str"")) {
    chamberTxt=""String_Node_Str"" + chamber + ""String_Node_Str"";
  }
  docCount=0;
  docsSavedCount=0;
  int page=1;
  int totalPages=0;
  BufferedWriter bw;
  Document d=null;
  boolean connected=false;
  HashSet<String> set=new HashSet<String>();
  int results=0;
  tag:   while (true) {
    connected=false;
    String site=""String_Node_Str"" + congress + ""String_Node_Str""+ houseRemark+ query+ chamberTxt+ ""String_Node_Str""+ page;
    System.out.println(site);
    while (!connected) {
      try {
        d=Jsoup.connect(site).timeout(50000).userAgent(""String_Node_Str"").get();
        connected=true;
      }
 catch (      Exception e) {
        System.out.println(e);
        continue;
      }
    }
    if (first) {
      Elements number=d.getElementsByClass(""String_Node_Str"");
      String num=Jsoup.parse(number.toString()).text();
      System.out.println(num);
      if (num.equals(""String_Node_Str""))       return;
      System.out.println(""String_Node_Str"" + num.substring(num.lastIndexOf(""String_Node_Str"") + 3).replaceAll(""String_Node_Str"",""String_Node_Str""));
      results=Integer.parseInt(num.substring(num.lastIndexOf(""String_Node_Str"") + 3).replaceAll(""String_Node_Str"",""String_Node_Str""));
      System.out.println(num + ""String_Node_Str"" + results);
      if (limit == -1)       limit=results;
      limit=Math.min(limit,results);
      if (results % 25 == 0) {
        totalPages=results / 25;
      }
 else {
        totalPages=(results / 25) + 1;
      }
      first=false;
    }
    Elements title=d.getElementsByClass(""String_Node_Str"");
    for (    Element links : title) {
      Elements link=links.select(""String_Node_Str"");
      String data=link.toString();
      System.out.println(data);
      int start=data.indexOf(""String_Node_Str"");
      int end=data.indexOf(""String_Node_Str"");
      Elements docJournalAbstract=null;
      System.out.print(data + ""String_Node_Str"");
      if (data.contains(""String_Node_Str""))       break tag;
      String contentLink=data.substring(start + 2,end - 1);
      if (set.contains(contentLink))       continue;
      set.add(contentLink);
      System.out.println(contentLink);
      String dateText;
      Document doc;
      try {
        doc=Jsoup.connect(contentLink).timeout(4000).userAgent(""String_Node_Str"").get();
        docJournalAbstract=doc.getElementsByClass(""String_Node_Str"");
        Elements dates=doc.getElementsByClass(""String_Node_Str"");
        jsonGenerator.writeStartObject();
        for (        Element date : dates) {
          dateText=Jsoup.parse(date.child(1).select(""String_Node_Str"").toString()).text();
          int endIndex=dateText.indexOf(""String_Node_Str"");
          if (fields[0])           jsonGenerator.writeStringField(""String_Node_Str"",dateText.substring(1,endIndex - 1));
          if (fields[1])           jsonGenerator.writeStringField(""String_Node_Str"",dateText.substring(endIndex + 1,dateText.length() - 1));
          String title1=(date.child(1)).toString().substring(4,date.child(1).toString().indexOf(""String_Node_Str""));
          if (fields[2])           jsonGenerator.writeStringField(""String_Node_Str"",title1);
          ConsoleView.printlInConsoleln(""String_Node_Str"" + title1 + ""String_Node_Str""+ docsSavedCount+ ""String_Node_Str"");
          monitor.subTask(""String_Node_Str"" + title1 + ""String_Node_Str""+ totalCount);
        }
        System.out.println(Jsoup.parse(docJournalAbstract.toString()).text());
        if (fields[3])         jsonGenerator.writeStringField(""String_Node_Str"",Jsoup.parse(docJournalAbstract.toString()).text());
        jsonGenerator.writeEndObject();
      }
 catch (      SocketTimeoutException e) {
        docCount++;
        continue;
      }
catch (      Exception e) {
        docCount++;
        continue;
      }
      docCount++;
      docsSavedCount++;
      totalCount++;
      monitor.worked(1);
      if (docsSavedCount >= limit)       break tag;
    }
    if (docCount >= results) {
      break tag;
    }
    if (random)     page=(int)(Math.random() * totalPages + 1);
 else {
      page++;
    }
  }
  ConsoleView.printlInConsoleln(docsSavedCount + ""String_Node_Str"" + member+ ""String_Node_Str"");
  jsonGenerator.writeEndArray();
  jsonGenerator.flush();
  jsonGenerator.close();
}",0.8793969849246231
168066,"public void crawl(String outputDir,int limit,String member,String search,String chamber,String congress,boolean random,IProgressMonitor monitor,boolean[] fields) throws IOException {
  first=true;
  File streamFile=new File(outputDir + File.separator + ""String_Node_Str"");
  jsonfactory=new JsonFactory();
  jsonGenerator=jsonfactory.createGenerator(streamFile,JsonEncoding.UTF8);
  jsonGenerator.useDefaultPrettyPrinter();
  jsonGenerator.writeStartArray();
  String houseRemark=""String_Node_Str"";
  String chamberTxt=""String_Node_Str"";
  if (!member.equals(""String_Node_Str"") && !member.equals(""String_Node_Str"")) {
    member=member.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (chamber.equals(""String_Node_Str""))     houseRemark=""String_Node_Str"" + member + ""String_Node_Str"";
 else     houseRemark=""String_Node_Str"" + member + ""String_Node_Str"";
  }
  String query=""String_Node_Str"";
  if (!search.equals(""String_Node_Str"")) {
    query=""String_Node_Str"" + search + ""String_Node_Str"";
  }
  if (!chamber.equals(""String_Node_Str"")) {
    chamberTxt=""String_Node_Str"" + chamber + ""String_Node_Str"";
  }
  docCount=0;
  docsSavedCount=0;
  int page=1;
  int totalPages=0;
  BufferedWriter bw;
  Document d=null;
  boolean connected=false;
  HashSet<String> set=new HashSet<String>();
  int results=0;
  tag:   while (true) {
    connected=false;
    String site=""String_Node_Str"" + congress + ""String_Node_Str""+ houseRemark+ query+ chamberTxt+ ""String_Node_Str""+ page;
    System.out.println(site);
    while (!connected) {
      try {
        d=Jsoup.connect(site).timeout(50000).userAgent(""String_Node_Str"").get();
        connected=true;
      }
 catch (      Exception e) {
        System.out.println(e);
        continue;
      }
    }
    if (first) {
      Elements number=d.getElementsByClass(""String_Node_Str"");
      String num=Jsoup.parse(number.toString()).text();
      System.out.println(num);
      if (num.equals(""String_Node_Str""))       return;
      System.out.println(""String_Node_Str"" + num.substring(num.lastIndexOf(""String_Node_Str"") + 3).replaceAll(""String_Node_Str"",""String_Node_Str""));
      results=Integer.parseInt(num.substring(num.lastIndexOf(""String_Node_Str"") + 3).replaceAll(""String_Node_Str"",""String_Node_Str""));
      System.out.println(num + ""String_Node_Str"" + results);
      if (limit == -1)       limit=results;
      limit=Math.min(limit,results);
      if (results % 25 == 0) {
        totalPages=results / 25;
      }
 else {
        totalPages=(results / 25) + 1;
      }
      first=false;
    }
    Elements title=d.getElementsByClass(""String_Node_Str"");
    for (    Element links : title) {
      Elements link=links.select(""String_Node_Str"");
      String data=link.toString();
      System.out.println(data);
      int start=data.indexOf(""String_Node_Str"");
      int end=data.indexOf(""String_Node_Str"");
      Elements docJournalAbstract=null;
      System.out.print(data + ""String_Node_Str"");
      if (data.contains(""String_Node_Str""))       break tag;
      String contentLink=data.substring(start + 2,end - 1);
      if (set.contains(contentLink))       continue;
      set.add(contentLink);
      System.out.println(contentLink);
      String dateText;
      Document doc;
      try {
        doc=Jsoup.connect(contentLink).timeout(4000).userAgent(""String_Node_Str"").get();
        docJournalAbstract=doc.getElementsByClass(""String_Node_Str"");
        Elements dates=doc.getElementsByClass(""String_Node_Str"");
        jsonGenerator.writeStartObject();
        for (        Element date : dates) {
          dateText=Jsoup.parse(date.child(1).select(""String_Node_Str"").toString()).text();
          int endIndex=dateText.indexOf(""String_Node_Str"");
          if (fields[0])           jsonGenerator.writeStringField(""String_Node_Str"",dateText.substring(1,endIndex - 1));
          if (fields[1])           jsonGenerator.writeStringField(""String_Node_Str"",dateText.substring(endIndex + 1,dateText.length() - 1));
          String title1=(date.child(1)).toString().substring(4,date.child(1).toString().indexOf(""String_Node_Str""));
          if (fields[2])           jsonGenerator.writeStringField(""String_Node_Str"",title1);
          ConsoleView.printlInConsoleln(""String_Node_Str"" + title1 + ""String_Node_Str""+ docsSavedCount+ ""String_Node_Str"");
          monitor.subTask(""String_Node_Str"" + title1);
        }
        System.out.println(Jsoup.parse(docJournalAbstract.toString()).text());
        if (fields[3])         jsonGenerator.writeStringField(""String_Node_Str"",Jsoup.parse(docJournalAbstract.toString()).text());
        jsonGenerator.writeEndObject();
      }
 catch (      SocketTimeoutException e) {
        docCount++;
        continue;
      }
catch (      Exception e) {
        docCount++;
        continue;
      }
      docCount++;
      docsSavedCount++;
      totalCount++;
      monitor.worked(1);
      if (docsSavedCount >= limit)       break tag;
    }
    if (docCount >= results) {
      break tag;
    }
    if (random)     page=(int)(Math.random() * totalPages + 1);
 else {
      page++;
    }
  }
  ConsoleView.printlInConsoleln(docsSavedCount + ""String_Node_Str"" + member+ ""String_Node_Str"");
  jsonGenerator.writeEndArray();
  jsonGenerator.flush();
  jsonGenerator.close();
}","public void crawl(String outputDir,int limit,String member,String search,String chamber,String congress,boolean random,IProgressMonitor monitor,boolean[] fields) throws IOException {
  first=true;
  File streamFile=new File(outputDir + File.separator + ""String_Node_Str"");
  jsonfactory=new JsonFactory();
  jsonGenerator=jsonfactory.createGenerator(streamFile,JsonEncoding.UTF8);
  jsonGenerator.useDefaultPrettyPrinter();
  jsonGenerator.writeStartArray();
  String houseRemark=""String_Node_Str"";
  String chamberTxt=""String_Node_Str"";
  if (!member.equals(""String_Node_Str"") && !member.equals(""String_Node_Str"")) {
    member=member.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (chamber.equals(""String_Node_Str""))     houseRemark=""String_Node_Str"" + member + ""String_Node_Str"";
 else     houseRemark=""String_Node_Str"" + member + ""String_Node_Str"";
  }
  String query=""String_Node_Str"";
  if (!search.equals(""String_Node_Str"")) {
    query=""String_Node_Str"" + search + ""String_Node_Str"";
  }
  if (!chamber.equals(""String_Node_Str"")) {
    chamberTxt=""String_Node_Str"" + chamber + ""String_Node_Str"";
  }
  docCount=0;
  docsSavedCount=0;
  int page=1;
  int totalPages=0;
  BufferedWriter bw;
  Document d=null;
  boolean connected=false;
  HashSet<String> set=new HashSet<String>();
  int results=0;
  tag:   while (true) {
    connected=false;
    String site=""String_Node_Str"" + congress + ""String_Node_Str""+ houseRemark+ query+ chamberTxt+ ""String_Node_Str""+ page;
    System.out.println(site);
    while (!connected) {
      try {
        d=Jsoup.connect(site).timeout(50000).userAgent(""String_Node_Str"").get();
        connected=true;
      }
 catch (      Exception e) {
        System.out.println(e);
        continue;
      }
    }
    if (first) {
      Elements number=d.getElementsByClass(""String_Node_Str"");
      String num=Jsoup.parse(number.toString()).text();
      System.out.println(num);
      if (num.equals(""String_Node_Str""))       return;
      System.out.println(""String_Node_Str"" + num.substring(num.lastIndexOf(""String_Node_Str"") + 3).replaceAll(""String_Node_Str"",""String_Node_Str""));
      results=Integer.parseInt(num.substring(num.lastIndexOf(""String_Node_Str"") + 3).replaceAll(""String_Node_Str"",""String_Node_Str""));
      System.out.println(num + ""String_Node_Str"" + results);
      if (limit == -1)       limit=results;
      limit=Math.min(limit,results);
      if (results % 25 == 0) {
        totalPages=results / 25;
      }
 else {
        totalPages=(results / 25) + 1;
      }
      first=false;
    }
    Elements title=d.getElementsByClass(""String_Node_Str"");
    for (    Element links : title) {
      Elements link=links.select(""String_Node_Str"");
      String data=link.toString();
      System.out.println(data);
      int start=data.indexOf(""String_Node_Str"");
      int end=data.indexOf(""String_Node_Str"");
      Elements docJournalAbstract=null;
      System.out.print(data + ""String_Node_Str"");
      if (data.contains(""String_Node_Str""))       break tag;
      String contentLink=data.substring(start + 2,end - 1);
      if (set.contains(contentLink))       continue;
      set.add(contentLink);
      System.out.println(contentLink);
      String dateText;
      Document doc;
      try {
        doc=Jsoup.connect(contentLink).timeout(4000).userAgent(""String_Node_Str"").get();
        docJournalAbstract=doc.getElementsByClass(""String_Node_Str"");
        Elements dates=doc.select(""String_Node_Str"");
        jsonGenerator.writeStartObject();
        for (        Element date : dates) {
          dateText=Jsoup.parse(date.child(1).select(""String_Node_Str"").toString()).text();
          int endIndex=dateText.indexOf(""String_Node_Str"");
          if (fields[0])           jsonGenerator.writeStringField(""String_Node_Str"",dateText.substring(1,endIndex - 1));
          if (fields[1])           jsonGenerator.writeStringField(""String_Node_Str"",dateText.substring(endIndex + 1,dateText.length() - 1));
          String title1=(date.toString().substring(4,date.toString().indexOf(""String_Node_Str"")));
          if (fields[2])           jsonGenerator.writeStringField(""String_Node_Str"",title1);
          ConsoleView.printlInConsoleln(""String_Node_Str"" + title1 + ""String_Node_Str""+ docsSavedCount+ ""String_Node_Str"");
          monitor.subTask(""String_Node_Str"" + title1);
        }
        System.out.println(Jsoup.parse(docJournalAbstract.toString()).text());
        if (fields[3])         jsonGenerator.writeStringField(""String_Node_Str"",Jsoup.parse(docJournalAbstract.toString()).text());
        jsonGenerator.writeEndObject();
      }
 catch (      SocketTimeoutException e) {
        docCount++;
        continue;
      }
catch (      Exception e) {
        docCount++;
        continue;
      }
      docCount++;
      docsSavedCount++;
      totalCount++;
      monitor.worked(1);
      if (docsSavedCount >= limit)       break tag;
    }
    if (docCount >= results) {
      break tag;
    }
    if (random)     page=(int)(Math.random() * totalPages + 1);
 else {
      page++;
    }
  }
  ConsoleView.printlInConsoleln(docsSavedCount + ""String_Node_Str"" + member+ ""String_Node_Str"");
  jsonGenerator.writeEndArray();
  jsonGenerator.flush();
  jsonGenerator.close();
}",0.9958174904942966
168067,"private String constructSearchQueryString(String query,String title,String author,String site,String linkId,String subreddit) throws UnsupportedEncodingException {
  String queryString=""String_Node_Str"";
  if (null != query && !query.isEmpty())   queryString=""String_Node_Str"" + query;
  if (null != title && !title.isEmpty()) {
    if (queryString.isEmpty())     queryString+=""String_Node_Str"" + title;
 else     queryString+=""String_Node_Str"" + title;
  }
  if (null != author && !author.isEmpty()) {
    if (queryString.isEmpty())     queryString+=""String_Node_Str"" + author;
 else     queryString+=""String_Node_Str"" + author;
  }
  if (null != site && !site.isEmpty()) {
    if (queryString.isEmpty())     queryString+=""String_Node_Str"" + site;
 else     queryString+=""String_Node_Str"" + site;
  }
  if (null != linkId && !linkId.isEmpty()) {
    if (queryString.isEmpty())     queryString+=""String_Node_Str"" + linkId;
 else     queryString+=""String_Node_Str"" + linkId;
  }
  if (null != subreddit && !subreddit.isEmpty()) {
    if (queryString.isEmpty())     queryString+=""String_Node_Str"" + subreddit;
 else     queryString+=""String_Node_Str"" + subreddit;
  }
  queryString=URLEncoder.encode(queryString,""String_Node_Str"");
  return queryString;
}","private String constructSearchQueryString(String query,String title,String author,String site,String linkId,String subreddit) throws UnsupportedEncodingException {
  String queryString=""String_Node_Str"";
  if (null != query && !query.isEmpty())   queryString+=query;
  if (null != title && !title.isEmpty()) {
    if (queryString.isEmpty())     queryString+=""String_Node_Str"" + title;
 else     queryString+=""String_Node_Str"" + title;
  }
  if (null != author && !author.isEmpty()) {
    if (queryString.isEmpty())     queryString+=""String_Node_Str"" + author;
 else     queryString+=""String_Node_Str"" + author;
  }
  if (null != site && !site.isEmpty()) {
    if (queryString.isEmpty())     queryString+=""String_Node_Str"" + site;
 else     queryString+=""String_Node_Str"" + site;
  }
  if (null != linkId && !linkId.isEmpty()) {
    if (queryString.isEmpty())     queryString+=""String_Node_Str"" + linkId;
 else     queryString+=""String_Node_Str"" + linkId;
  }
  if (null != subreddit && !subreddit.isEmpty()) {
    if (queryString.isEmpty())     queryString+=""String_Node_Str"" + subreddit;
 else     queryString+=""String_Node_Str"" + subreddit;
  }
  queryString=URLEncoder.encode(queryString,""String_Node_Str"");
  return queryString;
}",0.9907519099316444
168068,"public void crawl(String outputDir,int limit,String member,String search,String chamber,String congress,boolean random,IProgressMonitor monitor,boolean[] fields) throws IOException {
  first=true;
  File streamFile=new File(outputDir + File.separator + ""String_Node_Str"");
  jsonfactory=new JsonFactory();
  jsonGenerator=jsonfactory.createGenerator(streamFile,JsonEncoding.UTF8);
  jsonGenerator.useDefaultPrettyPrinter();
  jsonGenerator.writeStartArray();
  String houseRemark=""String_Node_Str"";
  String chamberTxt=""String_Node_Str"";
  if (!member.equals(""String_Node_Str"") && !member.equals(""String_Node_Str"")) {
    member=member.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (chamber.equals(""String_Node_Str""))     houseRemark=""String_Node_Str"" + member + ""String_Node_Str"";
 else     houseRemark=""String_Node_Str"" + member + ""String_Node_Str"";
  }
  String query=""String_Node_Str"";
  if (!search.equals(""String_Node_Str"")) {
    query=""String_Node_Str"" + search + ""String_Node_Str"";
  }
  if (!chamber.equals(""String_Node_Str"")) {
    chamberTxt=""String_Node_Str"" + chamber + ""String_Node_Str"";
  }
  docCount=0;
  docsSavedCount=0;
  int page=1;
  int totalPages=0;
  int totalDatedPages=0;
  BufferedWriter bw;
  Document d=null;
  boolean connected=false;
  HashSet<String> set=new HashSet<String>();
  tag:   while (true) {
    connected=false;
    if (random)     page=(int)(Math.random() * 25);
    String site=""String_Node_Str"" + congress + ""String_Node_Str""+ houseRemark+ query+ chamberTxt+ ""String_Node_Str""+ page;
    System.out.println(site);
    while (!connected) {
      try {
        d=Jsoup.connect(site).timeout(50000).userAgent(""String_Node_Str"").get();
        connected=true;
      }
 catch (      Exception e) {
        System.out.println(e);
        continue;
      }
    }
    if (first) {
      Elements number=d.getElementsByClass(""String_Node_Str"");
      String num=Jsoup.parse(number.toString()).text();
      System.out.println(num);
      if (num.equals(""String_Node_Str""))       return;
      System.out.println(""String_Node_Str"" + num.substring(num.lastIndexOf(""String_Node_Str"") + 3).replaceAll(""String_Node_Str"",""String_Node_Str""));
      int results=Integer.parseInt(num.substring(num.lastIndexOf(""String_Node_Str"") + 3).replaceAll(""String_Node_Str"",""String_Node_Str""));
      System.out.println(num + ""String_Node_Str"" + results);
      if (limit == -1)       limit=results;
      first=false;
    }
    Element t=d.getElementsByClass(""String_Node_Str"").get(0);
    String s=t.text().trim();
    String st[]=s.split(""String_Node_Str"");
    totalDatedPages=Integer.parseInt(st[st.length - 1]);
    Elements title=d.getElementsByClass(""String_Node_Str"");
    for (    Element links : title) {
      Elements link=links.select(""String_Node_Str"");
      String data=link.toString();
      System.out.println(data);
      int start=data.indexOf(""String_Node_Str"");
      int end=data.indexOf(""String_Node_Str"");
      Elements docJournalAbstract=null;
      System.out.print(data + ""String_Node_Str"");
      if (data.contains(""String_Node_Str""))       break tag;
      String contentLink=data.substring(start + 2,end - 1);
      if (set.contains(contentLink))       continue;
      set.add(contentLink);
      System.out.println(contentLink);
      String dateText;
      Document doc;
      try {
        doc=Jsoup.connect(contentLink).timeout(4000).userAgent(""String_Node_Str"").get();
        docJournalAbstract=doc.getElementsByClass(""String_Node_Str"");
        Elements dates=doc.getElementsByClass(""String_Node_Str"");
        jsonGenerator.writeStartObject();
        for (        Element date : dates) {
          dateText=Jsoup.parse(date.child(1).select(""String_Node_Str"").toString()).text();
          int endIndex=dateText.indexOf(""String_Node_Str"");
          if (fields[0])           jsonGenerator.writeStringField(""String_Node_Str"",dateText.substring(1,endIndex - 1));
          if (fields[1])           jsonGenerator.writeStringField(""String_Node_Str"",dateText.substring(endIndex + 1,dateText.length() - 1));
          String title1=(date.child(1)).toString().substring(4,date.child(1).toString().indexOf(""String_Node_Str""));
          if (fields[2])           jsonGenerator.writeStringField(""String_Node_Str"",title1);
          ConsoleView.printlInConsoleln(""String_Node_Str"" + title1 + ""String_Node_Str""+ docCount);
          monitor.subTask(""String_Node_Str"" + title1 + ""String_Node_Str""+ totalCount);
        }
        System.out.println(Jsoup.parse(docJournalAbstract.toString()).text());
        if (fields[3])         jsonGenerator.writeStringField(""String_Node_Str"",Jsoup.parse(docJournalAbstract.toString()).text());
        jsonGenerator.writeEndObject();
      }
 catch (      SocketTimeoutException e) {
        docCount++;
        continue;
      }
catch (      Exception e) {
        docCount++;
        continue;
      }
      docCount++;
      docsSavedCount++;
      totalCount++;
      monitor.worked(1);
      if (docCount >= limit) {
        break;
      }
    }
    if (random)     page=(int)(Math.random() * totalPages + 1);
 else {
      page++;
      if (page > totalDatedPages)       break;
    }
    if (docsSavedCount >= limit)     break;
  }
  ConsoleView.printlInConsoleln(docCount + ""String_Node_Str"");
  jsonGenerator.writeEndArray();
  jsonGenerator.flush();
  jsonGenerator.close();
}","public void crawl(String outputDir,int limit,String member,String search,String chamber,String congress,boolean random,IProgressMonitor monitor,boolean[] fields) throws IOException {
  first=true;
  File streamFile=new File(outputDir + File.separator + ""String_Node_Str"");
  jsonfactory=new JsonFactory();
  jsonGenerator=jsonfactory.createGenerator(streamFile,JsonEncoding.UTF8);
  jsonGenerator.useDefaultPrettyPrinter();
  jsonGenerator.writeStartArray();
  String houseRemark=""String_Node_Str"";
  String chamberTxt=""String_Node_Str"";
  if (!member.equals(""String_Node_Str"") && !member.equals(""String_Node_Str"")) {
    member=member.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (chamber.equals(""String_Node_Str""))     houseRemark=""String_Node_Str"" + member + ""String_Node_Str"";
 else     houseRemark=""String_Node_Str"" + member + ""String_Node_Str"";
  }
  String query=""String_Node_Str"";
  if (!search.equals(""String_Node_Str"")) {
    query=""String_Node_Str"" + search + ""String_Node_Str"";
  }
  if (!chamber.equals(""String_Node_Str"")) {
    chamberTxt=""String_Node_Str"" + chamber + ""String_Node_Str"";
  }
  docCount=0;
  docsSavedCount=0;
  int page=1;
  int totalPages=0;
  int totalDatedFiles=0;
  BufferedWriter bw;
  Document d=null;
  boolean connected=false;
  HashSet<String> set=new HashSet<String>();
  tag:   while (true) {
    connected=false;
    if (random)     page=(int)(Math.random() * 25);
    String site=""String_Node_Str"" + congress + ""String_Node_Str""+ houseRemark+ query+ chamberTxt+ ""String_Node_Str""+ page;
    System.out.println(site);
    while (!connected) {
      try {
        d=Jsoup.connect(site).timeout(50000).userAgent(""String_Node_Str"").get();
        connected=true;
      }
 catch (      Exception e) {
        System.out.println(e);
        continue;
      }
    }
    if (first) {
      Elements number=d.getElementsByClass(""String_Node_Str"");
      String num=Jsoup.parse(number.toString()).text();
      System.out.println(num);
      if (num.equals(""String_Node_Str""))       return;
      System.out.println(""String_Node_Str"" + num.substring(num.lastIndexOf(""String_Node_Str"") + 3).replaceAll(""String_Node_Str"",""String_Node_Str""));
      int results=Integer.parseInt(num.substring(num.lastIndexOf(""String_Node_Str"") + 3).replaceAll(""String_Node_Str"",""String_Node_Str""));
      System.out.println(num + ""String_Node_Str"" + results);
      if (limit == -1)       limit=results;
      first=false;
    }
    Element t=d.getElementsByClass(""String_Node_Str"").get(0);
    String s=t.text().trim();
    String st[]=s.split(""String_Node_Str"");
    totalDatedFiles=Integer.parseInt(st[st.length - 1].replaceAll(""String_Node_Str"",""String_Node_Str""));
    Elements title=d.getElementsByClass(""String_Node_Str"");
    for (    Element links : title) {
      Elements link=links.select(""String_Node_Str"");
      String data=link.toString();
      System.out.println(data);
      int start=data.indexOf(""String_Node_Str"");
      int end=data.indexOf(""String_Node_Str"");
      Elements docJournalAbstract=null;
      System.out.print(data + ""String_Node_Str"");
      if (data.contains(""String_Node_Str""))       break tag;
      String contentLink=data.substring(start + 2,end - 1);
      if (set.contains(contentLink))       continue;
      set.add(contentLink);
      System.out.println(contentLink);
      String dateText;
      Document doc;
      try {
        doc=Jsoup.connect(contentLink).timeout(4000).userAgent(""String_Node_Str"").get();
        docJournalAbstract=doc.getElementsByClass(""String_Node_Str"");
        Elements dates=doc.getElementsByClass(""String_Node_Str"");
        jsonGenerator.writeStartObject();
        for (        Element date : dates) {
          dateText=Jsoup.parse(date.child(1).select(""String_Node_Str"").toString()).text();
          int endIndex=dateText.indexOf(""String_Node_Str"");
          if (fields[0])           jsonGenerator.writeStringField(""String_Node_Str"",dateText.substring(1,endIndex - 1));
          if (fields[1])           jsonGenerator.writeStringField(""String_Node_Str"",dateText.substring(endIndex + 1,dateText.length() - 1));
          String title1=(date.child(1)).toString().substring(4,date.child(1).toString().indexOf(""String_Node_Str""));
          if (fields[2])           jsonGenerator.writeStringField(""String_Node_Str"",title1);
          ConsoleView.printlInConsoleln(""String_Node_Str"" + title1 + ""String_Node_Str""+ docCount);
          monitor.subTask(""String_Node_Str"" + title1 + ""String_Node_Str""+ totalCount);
        }
        System.out.println(Jsoup.parse(docJournalAbstract.toString()).text());
        if (fields[3])         jsonGenerator.writeStringField(""String_Node_Str"",Jsoup.parse(docJournalAbstract.toString()).text());
        jsonGenerator.writeEndObject();
      }
 catch (      SocketTimeoutException e) {
        docCount++;
        continue;
      }
catch (      Exception e) {
        docCount++;
        continue;
      }
      docCount++;
      docsSavedCount++;
      totalCount++;
      monitor.worked(1);
      if (docCount >= limit) {
        break;
      }
    }
    if (random)     page=(int)(Math.random() * totalPages + 1);
 else {
      page++;
      if (totalCount >= totalDatedFiles - 2)       break;
    }
    if (docsSavedCount >= limit)     break;
  }
  ConsoleView.printlInConsoleln(docCount + ""String_Node_Str"");
  jsonGenerator.writeEndArray();
  jsonGenerator.flush();
  jsonGenerator.close();
}",0.9812367131897588
168069,"public void crawl(String outputDir,int limit,String member,String search,String chamber,String congress,boolean random,IProgressMonitor monitor,boolean[] fields) throws IOException {
  first=true;
  File streamFile=new File(outputDir + File.separator + ""String_Node_Str"");
  jsonfactory=new JsonFactory();
  jsonGenerator=jsonfactory.createGenerator(streamFile,JsonEncoding.UTF8);
  jsonGenerator.useDefaultPrettyPrinter();
  jsonGenerator.writeStartArray();
  String houseRemark=""String_Node_Str"";
  String chamberTxt=""String_Node_Str"";
  if (!member.equals(""String_Node_Str"") && !member.equals(""String_Node_Str"")) {
    member=member.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (chamber.equals(""String_Node_Str""))     houseRemark=""String_Node_Str"" + member + ""String_Node_Str"";
 else     houseRemark=""String_Node_Str"" + member + ""String_Node_Str"";
  }
  String query=""String_Node_Str"";
  if (!search.equals(""String_Node_Str"")) {
    query=""String_Node_Str"" + search + ""String_Node_Str"";
  }
  if (!chamber.equals(""String_Node_Str"")) {
    chamberTxt=""String_Node_Str"" + chamber + ""String_Node_Str"";
  }
  docCount=0;
  int page=1;
  int totalPages=0;
  BufferedWriter bw;
  Document d=null;
  boolean connected=false;
  HashSet<String> set=new HashSet<String>();
  tag:   while (true) {
    connected=false;
    if (random)     page=(int)(Math.random() * 25);
    String site=""String_Node_Str"" + congress + ""String_Node_Str""+ houseRemark+ query+ chamberTxt+ ""String_Node_Str""+ page;
    System.out.println(site);
    while (!connected) {
      try {
        d=Jsoup.connect(site).timeout(50000).userAgent(""String_Node_Str"").get();
        connected=true;
      }
 catch (      Exception e) {
        System.out.println(e);
        continue;
      }
    }
    if (first) {
      Elements number=d.getElementsByClass(""String_Node_Str"");
      String num=Jsoup.parse(number.toString()).text();
      System.out.println(num);
      if (num.equals(""String_Node_Str""))       return;
      System.out.println(""String_Node_Str"" + num.substring(num.lastIndexOf(""String_Node_Str"") + 3).replaceAll(""String_Node_Str"",""String_Node_Str""));
      int results=Integer.parseInt(num.substring(num.lastIndexOf(""String_Node_Str"") + 3).replaceAll(""String_Node_Str"",""String_Node_Str""));
      System.out.println(num + ""String_Node_Str"" + results);
      if (limit == -1)       limit=results;
      first=false;
    }
    Elements title=d.getElementsByClass(""String_Node_Str"");
    for (    Element links : title) {
      Elements link=links.select(""String_Node_Str"");
      String data=link.toString();
      System.out.println(data);
      int start=data.indexOf(""String_Node_Str"");
      int end=data.indexOf(""String_Node_Str"");
      Elements docJournalAbstract=null;
      System.out.print(data + ""String_Node_Str"");
      if (data.contains(""String_Node_Str""))       break tag;
      String contentLink=data.substring(start + 2,end - 1);
      if (set.contains(contentLink))       continue;
      set.add(contentLink);
      System.out.println(contentLink);
      String dateText;
      Document doc;
      try {
        doc=Jsoup.connect(contentLink).timeout(4000).userAgent(""String_Node_Str"").get();
        docJournalAbstract=doc.getElementsByClass(""String_Node_Str"");
        Elements dates=doc.getElementsByClass(""String_Node_Str"");
        jsonGenerator.writeStartObject();
        for (        Element date : dates) {
          dateText=Jsoup.parse(date.child(1).select(""String_Node_Str"").toString()).text();
          int endIndex=dateText.indexOf(""String_Node_Str"");
          if (fields[0])           jsonGenerator.writeStringField(""String_Node_Str"",dateText.substring(1,endIndex - 1));
          if (fields[1])           jsonGenerator.writeStringField(""String_Node_Str"",dateText.substring(endIndex + 1,dateText.length() - 1));
          String title1=(date.child(1)).toString().substring(4,date.child(1).toString().indexOf(""String_Node_Str""));
          if (fields[2])           jsonGenerator.writeStringField(""String_Node_Str"",title1);
          ConsoleView.printlInConsoleln(""String_Node_Str"" + title1 + ""String_Node_Str""+ docCount);
          monitor.subTask(""String_Node_Str"" + title1 + ""String_Node_Str""+ totalCount);
        }
        System.out.println(Jsoup.parse(docJournalAbstract.toString()).text());
        if (fields[3])         jsonGenerator.writeStringField(""String_Node_Str"",Jsoup.parse(docJournalAbstract.toString()).text());
        jsonGenerator.writeEndObject();
      }
 catch (      SocketTimeoutException e) {
        docCount++;
        totalCount++;
        continue;
      }
catch (      Exception e) {
        docCount++;
        totalCount++;
        continue;
      }
      docCount++;
      totalCount++;
      monitor.worked(1);
      if (docCount >= limit) {
        break;
      }
    }
    if (random)     page=(int)(Math.random() * totalPages + 1);
 else     page++;
    if (docCount >= limit)     break;
  }
  ConsoleView.printlInConsoleln(docCount + ""String_Node_Str"");
  jsonGenerator.writeEndArray();
  jsonGenerator.flush();
  jsonGenerator.close();
}","public void crawl(String outputDir,int limit,String member,String search,String chamber,String congress,boolean random,IProgressMonitor monitor,boolean[] fields) throws IOException {
  first=true;
  File streamFile=new File(outputDir + File.separator + ""String_Node_Str"");
  jsonfactory=new JsonFactory();
  jsonGenerator=jsonfactory.createGenerator(streamFile,JsonEncoding.UTF8);
  jsonGenerator.useDefaultPrettyPrinter();
  jsonGenerator.writeStartArray();
  String houseRemark=""String_Node_Str"";
  String chamberTxt=""String_Node_Str"";
  if (!member.equals(""String_Node_Str"") && !member.equals(""String_Node_Str"")) {
    member=member.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (chamber.equals(""String_Node_Str""))     houseRemark=""String_Node_Str"" + member + ""String_Node_Str"";
 else     houseRemark=""String_Node_Str"" + member + ""String_Node_Str"";
  }
  String query=""String_Node_Str"";
  if (!search.equals(""String_Node_Str"")) {
    query=""String_Node_Str"" + search + ""String_Node_Str"";
  }
  if (!chamber.equals(""String_Node_Str"")) {
    chamberTxt=""String_Node_Str"" + chamber + ""String_Node_Str"";
  }
  docCount=0;
  docsSavedCount=0;
  int page=1;
  int totalPages=0;
  int totalDatedPages=0;
  BufferedWriter bw;
  Document d=null;
  boolean connected=false;
  HashSet<String> set=new HashSet<String>();
  tag:   while (true) {
    connected=false;
    if (random)     page=(int)(Math.random() * 25);
    String site=""String_Node_Str"" + congress + ""String_Node_Str""+ houseRemark+ query+ chamberTxt+ ""String_Node_Str""+ page;
    System.out.println(site);
    while (!connected) {
      try {
        d=Jsoup.connect(site).timeout(50000).userAgent(""String_Node_Str"").get();
        connected=true;
      }
 catch (      Exception e) {
        System.out.println(e);
        continue;
      }
    }
    if (first) {
      Elements number=d.getElementsByClass(""String_Node_Str"");
      String num=Jsoup.parse(number.toString()).text();
      System.out.println(num);
      if (num.equals(""String_Node_Str""))       return;
      System.out.println(""String_Node_Str"" + num.substring(num.lastIndexOf(""String_Node_Str"") + 3).replaceAll(""String_Node_Str"",""String_Node_Str""));
      int results=Integer.parseInt(num.substring(num.lastIndexOf(""String_Node_Str"") + 3).replaceAll(""String_Node_Str"",""String_Node_Str""));
      System.out.println(num + ""String_Node_Str"" + results);
      if (limit == -1)       limit=results;
      first=false;
    }
    Element t=d.getElementsByClass(""String_Node_Str"").get(0);
    String s=t.text().trim();
    String st[]=s.split(""String_Node_Str"");
    totalDatedPages=Integer.parseInt(st[st.length - 1]);
    Elements title=d.getElementsByClass(""String_Node_Str"");
    for (    Element links : title) {
      Elements link=links.select(""String_Node_Str"");
      String data=link.toString();
      System.out.println(data);
      int start=data.indexOf(""String_Node_Str"");
      int end=data.indexOf(""String_Node_Str"");
      Elements docJournalAbstract=null;
      System.out.print(data + ""String_Node_Str"");
      if (data.contains(""String_Node_Str""))       break tag;
      String contentLink=data.substring(start + 2,end - 1);
      if (set.contains(contentLink))       continue;
      set.add(contentLink);
      System.out.println(contentLink);
      String dateText;
      Document doc;
      try {
        doc=Jsoup.connect(contentLink).timeout(4000).userAgent(""String_Node_Str"").get();
        docJournalAbstract=doc.getElementsByClass(""String_Node_Str"");
        Elements dates=doc.getElementsByClass(""String_Node_Str"");
        jsonGenerator.writeStartObject();
        for (        Element date : dates) {
          dateText=Jsoup.parse(date.child(1).select(""String_Node_Str"").toString()).text();
          int endIndex=dateText.indexOf(""String_Node_Str"");
          if (fields[0])           jsonGenerator.writeStringField(""String_Node_Str"",dateText.substring(1,endIndex - 1));
          if (fields[1])           jsonGenerator.writeStringField(""String_Node_Str"",dateText.substring(endIndex + 1,dateText.length() - 1));
          String title1=(date.child(1)).toString().substring(4,date.child(1).toString().indexOf(""String_Node_Str""));
          if (fields[2])           jsonGenerator.writeStringField(""String_Node_Str"",title1);
          ConsoleView.printlInConsoleln(""String_Node_Str"" + title1 + ""String_Node_Str""+ docCount);
          monitor.subTask(""String_Node_Str"" + title1 + ""String_Node_Str""+ totalCount);
        }
        System.out.println(Jsoup.parse(docJournalAbstract.toString()).text());
        if (fields[3])         jsonGenerator.writeStringField(""String_Node_Str"",Jsoup.parse(docJournalAbstract.toString()).text());
        jsonGenerator.writeEndObject();
      }
 catch (      SocketTimeoutException e) {
        docCount++;
        continue;
      }
catch (      Exception e) {
        docCount++;
        continue;
      }
      docCount++;
      docsSavedCount++;
      totalCount++;
      monitor.worked(1);
      if (docCount >= limit) {
        break;
      }
    }
    if (random)     page=(int)(Math.random() * totalPages + 1);
 else {
      page++;
      if (page > totalDatedPages)       break;
    }
    if (docsSavedCount >= limit)     break;
  }
  ConsoleView.printlInConsoleln(docCount + ""String_Node_Str"");
  jsonGenerator.writeEndArray();
  jsonGenerator.flush();
  jsonGenerator.close();
}",0.9006584597766962
168070,"private Browser createBrowser(Composite parent,final IActionBars actionBars){
  GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  parent.setLayout(gridLayout);
  GridData data=new GridData();
  data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  browser=new Browser(parent,SWT.NONE);
  data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.verticalAlignment=GridData.FILL;
  data.horizontalSpan=2;
  data.grabExcessHorizontalSpace=true;
  data.grabExcessVerticalSpace=true;
  browser.setLayoutData(data);
  browser.addOpenWindowListener(new OpenWindowListener(){
    public void open(    WindowEvent event){
      WebView.this.openWindow(event);
    }
  }
);
  browser.addCloseWindowListener(new CloseWindowListener(){
    public void close(    WindowEvent event){
      WebView.this.close();
    }
  }
);
  actionBars.setGlobalActionHandler(""String_Node_Str"",refreshAction);
  return browser;
}","private Browser createBrowser(Composite parent,final IActionBars actionBars){
  GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  parent.setLayout(gridLayout);
  GridData data=new GridData();
  data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  browser=new Browser(parent,SWT.NONE);
  new CustomFunction(browser,""String_Node_Str"");
  data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.verticalAlignment=GridData.FILL;
  data.horizontalSpan=2;
  data.grabExcessHorizontalSpace=true;
  data.grabExcessVerticalSpace=true;
  browser.setLayoutData(data);
  browser.addOpenWindowListener(new OpenWindowListener(){
    public void open(    WindowEvent event){
      WebView.this.openWindow(event);
    }
  }
);
  browser.addCloseWindowListener(new CloseWindowListener(){
    public void close(    WindowEvent event){
      WebView.this.close();
    }
  }
);
  actionBars.setGlobalActionHandler(""String_Node_Str"",refreshAction);
  return browser;
}",0.4093392945851962
168071,"private void runLDA(File dir,File preSeedFile,int numTopics,int noOfSamples,double alphaval,double betaval,double confidenceValue,String outputdir,Date dateObj){
  DateFormat df=new SimpleDateFormat(""String_Node_Str"");
  File[] listOfFiles=dir.listFiles();
  List<File> inputFiles=new ArrayList<File>();
  monitor.subTask(""String_Node_Str"");
  for (  File f : listOfFiles) {
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    if (f.getAbsolutePath().contains(""String_Node_Str""))     continue;
    inputFiles.add(f);
  }
  monitor.worked(5);
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  DTWC dtwc=new DTWC(inputFiles,preSeedFile,this.monitor);
  dtwc.computeDocumentVectors();
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  int[][][] zlabels=dtwc.getTopicSeedsAsInt();
  int[][] docs=dtwc.getDocVectorsAsInt();
  int T=numTopics;
  int W=dtwc.getVocabSize();
  double[][] alpha=new double[1][T];
  for (int i=0; i < T; i++) {
    alpha[0][i]=alphaval;
  }
  double[][] beta=new double[T][W];
  for (int i=0; i < T; i++) {
    for (int j=0; j < W; j++) {
      beta[i][j]=betaval;
    }
  }
  ZlabelLDA zelda=new ZlabelLDA(docs,zlabels,confidenceValue,alpha,beta,noOfSamples);
  this.monitor.subTask(""String_Node_Str"");
  boolean retVal=zelda.zLDA();
  if (!retVal) {
    System.out.println(""String_Node_Str"");
    return;
  }
  this.monitor.worked(15);
  double[][] theta, phi;
  theta=zelda.getTheta();
  phi=zelda.getPhi();
  Map<String,Integer> dictionary=dtwc.getTermIndex();
  Map<Integer,String> revDict=dtwc.getIndexTerm();
  this.monitor.subTask(""String_Node_Str"");
  List<List<Map.Entry<String,Double>>> topicWords=new ArrayList<List<Map.Entry<String,Double>>>();
  for (int i=0; i < T; i++) {
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    topicWords.add(new ArrayList<Map.Entry<String,Double>>());
  }
  for (int i=0; i < T; i++) {
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    for (int j=0; j < W; j++) {
      if (monitor.isCanceled()) {
        throw new OperationCanceledException();
      }
      if (phi[i][j] > Float.MIN_VALUE) {
        topicWords.get(i).add(new AbstractMap.SimpleEntry<String,Double>(revDict.get(j),new Double(phi[i][j])));
      }
    }
  }
  this.monitor.worked(15);
  this.monitor.subTask(""String_Node_Str"" + df.format(dateObj) + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + outputdir + File.separator+ ""String_Node_Str""+ df.format(dateObj)+ ""String_Node_Str"");
  try {
    FileWriter fw=new FileWriter(new File(generateTopicWordsFileName(outputdir,df.format(dateObj))));
    StringBuilder row=new StringBuilder();
    StringBuilder rowValues=new StringBuilder();
    for (int i=0; i < T; i++) {
      if (monitor.isCanceled()) {
        throw new OperationCanceledException();
      }
      row.append(""String_Node_Str"" + i + ""String_Node_Str"");
      rowValues.append(""String_Node_Str"");
    }
    fw.write(row.toString() + ""String_Node_Str"");
    fw.write(rowValues.toString() + ""String_Node_Str"");
    for (int i=0; i < T; i++) {
      if (monitor.isCanceled()) {
        throw new OperationCanceledException();
      }
      Collections.sort(topicWords.get(i),new Comparator<Map.Entry<String,Double>>(){
        @Override public int compare(        Entry<String,Double> arg0,        Entry<String,Double> arg1){
          return -(arg0.getValue()).compareTo(arg1.getValue());
        }
      }
);
    }
    for (int k=0; k < 50; k++) {
      if (monitor.isCanceled()) {
        throw new OperationCanceledException();
      }
      row=new StringBuilder();
      for (int i=0; i < T; i++) {
        if (monitor.isCanceled()) {
          throw new OperationCanceledException();
        }
        if (topicWords.get(i).get(k).getKey() != null) {
          row.append(topicWords.get(i).get(k).getKey() + ""String_Node_Str"" + topicWords.get(i).get(k).getValue()+ ""String_Node_Str"");
        }
 else {
          row.append(""String_Node_Str"");
        }
      }
      fw.write(row.toString() + ""String_Node_Str"");
      fw.flush();
    }
    fw.flush();
    fw.close();
    this.monitor.worked(15);
    this.monitor.subTask(""String_Node_Str"" + df.format(dateObj) + ""String_Node_Str"");
    ConsoleView.printlInConsoleln(""String_Node_Str"" + outputdir + File.separator+ ""String_Node_Str""+ df.format(dateObj)+ ""String_Node_Str"");
    fw=new FileWriter(new File(generateWordsInTopicFileName(outputdir,df.format(dateObj))));
    fw.write(""String_Node_Str"");
    for (int j=0; j < revDict.size(); j++)     fw.write(revDict.get(j) + ""String_Node_Str"");
    fw.write(""String_Node_Str"");
    for (int i=0; i < T; i++) {
      if (monitor.isCanceled()) {
        throw new OperationCanceledException();
      }
      fw.write(""String_Node_Str"" + i + ""String_Node_Str"");
      for (int j=0; j < phi[i].length; j++) {
        if (monitor.isCanceled()) {
          throw new OperationCanceledException();
        }
        if (phi[i][j] > Float.MIN_VALUE) {
          fw.write(phi[i][j] + ""String_Node_Str"");
        }
 else {
          fw.write(""String_Node_Str"");
        }
      }
      fw.write(""String_Node_Str"");
      fw.flush();
    }
    fw.flush();
    fw.close();
    this.monitor.worked(15);
    this.monitor.subTask(""String_Node_Str"" + df.format(dateObj) + ""String_Node_Str"");
    ConsoleView.printlInConsoleln(""String_Node_Str"" + outputdir + File.separator+ ""String_Node_Str""+ df.format(dateObj)+ ""String_Node_Str"");
    fw=new FileWriter(new File(generateTopicsPerDocumentFileName(outputdir,df.format(dateObj))));
    fw.write(""String_Node_Str"");
    for (int i=0; i < T; i++) {
      fw.write(""String_Node_Str"" + i + ""String_Node_Str"");
    }
    fw.write(""String_Node_Str"");
    for (int i=0; i < docs.length; i++) {
      if (monitor.isCanceled()) {
        throw new OperationCanceledException();
      }
      fw.write(""String_Node_Str"" + i + ""String_Node_Str"");
      for (int j=0; j < theta[i].length; j++) {
        fw.write(theta[i][j] + ""String_Node_Str"");
      }
      fw.write(""String_Node_Str"");
      fw.flush();
    }
    fw.flush();
    fw.close();
    createRunReport(outputdir,dateObj);
  }
 catch (  Exception e) {
    ConsoleView.printlInConsoleln(""String_Node_Str"" + e);
  }
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  this.monitor.worked(15);
  this.monitor.done();
}","private void runLDA(File dir,File preSeedFile,int numTopics,int noOfSamples,double alphaval,double betaval,double confidenceValue,String outputdir,Date dateObj){
  monitor.beginTask(""String_Node_Str"",70);
  DateFormat df=new SimpleDateFormat(""String_Node_Str"");
  File[] listOfFiles=dir.listFiles();
  List<File> inputFiles=new ArrayList<File>();
  monitor.subTask(""String_Node_Str"");
  for (  File f : listOfFiles) {
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    if (f.getAbsolutePath().contains(""String_Node_Str""))     continue;
    inputFiles.add(f);
  }
  monitor.worked(5);
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  DTWC dtwc=new DTWC(inputFiles,preSeedFile,this.monitor);
  dtwc.computeDocumentVectors();
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  int[][][] zlabels=dtwc.getTopicSeedsAsInt();
  int[][] docs=dtwc.getDocVectorsAsInt();
  int T=numTopics;
  int W=dtwc.getVocabSize();
  double[][] alpha=new double[1][T];
  for (int i=0; i < T; i++) {
    alpha[0][i]=alphaval;
  }
  double[][] beta=new double[T][W];
  for (int i=0; i < T; i++) {
    for (int j=0; j < W; j++) {
      beta[i][j]=betaval;
    }
  }
  ZlabelLDA zelda=new ZlabelLDA(docs,zlabels,confidenceValue,alpha,beta,noOfSamples);
  this.monitor.subTask(""String_Node_Str"");
  boolean retVal=zelda.zLDA();
  if (!retVal) {
    System.out.println(""String_Node_Str"");
    return;
  }
  this.monitor.worked(15);
  double[][] theta, phi;
  theta=zelda.getTheta();
  phi=zelda.getPhi();
  Map<String,Integer> dictionary=dtwc.getTermIndex();
  Map<Integer,String> revDict=dtwc.getIndexTerm();
  this.monitor.subTask(""String_Node_Str"");
  List<List<Map.Entry<String,Double>>> topicWords=new ArrayList<List<Map.Entry<String,Double>>>();
  for (int i=0; i < T; i++) {
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    topicWords.add(new ArrayList<Map.Entry<String,Double>>());
  }
  for (int i=0; i < T; i++) {
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    for (int j=0; j < W; j++) {
      if (monitor.isCanceled()) {
        throw new OperationCanceledException();
      }
      if (phi[i][j] > Float.MIN_VALUE) {
        topicWords.get(i).add(new AbstractMap.SimpleEntry<String,Double>(revDict.get(j),new Double(phi[i][j])));
      }
    }
  }
  this.monitor.worked(15);
  this.monitor.subTask(""String_Node_Str"" + df.format(dateObj) + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + outputdir + File.separator+ ""String_Node_Str""+ df.format(dateObj)+ ""String_Node_Str"");
  try {
    FileWriter fw=new FileWriter(new File(generateTopicWordsFileName(outputdir,df.format(dateObj))));
    StringBuilder row=new StringBuilder();
    StringBuilder rowValues=new StringBuilder();
    for (int i=0; i < T; i++) {
      if (monitor.isCanceled()) {
        throw new OperationCanceledException();
      }
      row.append(""String_Node_Str"" + i + ""String_Node_Str"");
      rowValues.append(""String_Node_Str"");
    }
    fw.write(row.toString() + ""String_Node_Str"");
    fw.write(rowValues.toString() + ""String_Node_Str"");
    for (int i=0; i < T; i++) {
      if (monitor.isCanceled()) {
        throw new OperationCanceledException();
      }
      Collections.sort(topicWords.get(i),new Comparator<Map.Entry<String,Double>>(){
        @Override public int compare(        Entry<String,Double> arg0,        Entry<String,Double> arg1){
          return -(arg0.getValue()).compareTo(arg1.getValue());
        }
      }
);
    }
    for (int k=0; k < 50; k++) {
      if (monitor.isCanceled()) {
        throw new OperationCanceledException();
      }
      row=new StringBuilder();
      for (int i=0; i < T; i++) {
        if (monitor.isCanceled()) {
          throw new OperationCanceledException();
        }
        if (topicWords.get(i).get(k).getKey() != null) {
          row.append(topicWords.get(i).get(k).getKey() + ""String_Node_Str"" + topicWords.get(i).get(k).getValue()+ ""String_Node_Str"");
        }
 else {
          row.append(""String_Node_Str"");
        }
      }
      fw.write(row.toString() + ""String_Node_Str"");
      fw.flush();
    }
    fw.flush();
    fw.close();
    this.monitor.worked(15);
    this.monitor.subTask(""String_Node_Str"" + df.format(dateObj) + ""String_Node_Str"");
    ConsoleView.printlInConsoleln(""String_Node_Str"" + outputdir + File.separator+ ""String_Node_Str""+ df.format(dateObj)+ ""String_Node_Str"");
    fw=new FileWriter(new File(generateWordsInTopicFileName(outputdir,df.format(dateObj))));
    fw.write(""String_Node_Str"");
    for (int j=0; j < revDict.size(); j++)     fw.write(revDict.get(j) + ""String_Node_Str"");
    fw.write(""String_Node_Str"");
    for (int i=0; i < T; i++) {
      if (monitor.isCanceled()) {
        throw new OperationCanceledException();
      }
      fw.write(""String_Node_Str"" + i + ""String_Node_Str"");
      for (int j=0; j < phi[i].length; j++) {
        if (monitor.isCanceled()) {
          throw new OperationCanceledException();
        }
        if (phi[i][j] > Float.MIN_VALUE) {
          fw.write(phi[i][j] + ""String_Node_Str"");
        }
 else {
          fw.write(""String_Node_Str"");
        }
      }
      fw.write(""String_Node_Str"");
      fw.flush();
    }
    fw.flush();
    fw.close();
    this.monitor.worked(15);
    this.monitor.subTask(""String_Node_Str"" + df.format(dateObj) + ""String_Node_Str"");
    ConsoleView.printlInConsoleln(""String_Node_Str"" + outputdir + File.separator+ ""String_Node_Str""+ df.format(dateObj)+ ""String_Node_Str"");
    fw=new FileWriter(new File(generateTopicsPerDocumentFileName(outputdir,df.format(dateObj))));
    fw.write(""String_Node_Str"");
    for (int i=0; i < T; i++) {
      fw.write(""String_Node_Str"" + i + ""String_Node_Str"");
    }
    fw.write(""String_Node_Str"");
    for (int i=0; i < docs.length; i++) {
      if (monitor.isCanceled()) {
        throw new OperationCanceledException();
      }
      fw.write(""String_Node_Str"" + i + ""String_Node_Str"");
      for (int j=0; j < theta[i].length; j++) {
        fw.write(theta[i][j] + ""String_Node_Str"");
      }
      fw.write(""String_Node_Str"");
      fw.flush();
    }
    fw.flush();
    fw.close();
    createRunReport(outputdir,dateObj);
  }
 catch (  Exception e) {
    ConsoleView.printlInConsoleln(""String_Node_Str"" + e);
  }
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  this.monitor.worked(15);
  this.monitor.done();
}",0.9966596752893654
168072,"/** 
 * This method writes the corpus into a R Dataframe and stores it to the specified output location.
 * @param outputLoc
 * @param cls
 * @throws Exception
 */
private static void writeRObj(String outputLoc,CorpusClass cls) throws Exception {
  String saveLocation=""String_Node_Str"" + outputLoc + File.separator+ cls.getParent().getCorpusName().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ cls.getClassName().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str"";
  String corpusLocation=cls.getTacitLocation();
  File corpusDirectory=new File(corpusLocation);
  String corpusClassLocation=""String_Node_Str"";
  String[] jsonFiles=corpusDirectory.list();
  for (int i=0; i < jsonFiles.length; i++) {
    if (jsonFiles[i].endsWith(""String_Node_Str"")) {
      corpusClassLocation=corpusLocation + File.separator + jsonFiles[i];
      break;
    }
  }
  String corpusName=cls.getClassName();
  corpusName=corpusName.replace(""String_Node_Str"",""String_Node_Str"");
  ScriptEngineManager manager=new ScriptEngineManager();
  ScriptEngine engine=manager.getEngineByName(""String_Node_Str"");
  if (engine == null) {
    throw new Exception(""String_Node_Str"");
  }
  try {
    JSONParser jsonParser=new JSONParser();
    JSONArray entireJsonArray=(JSONArray)jsonParser.parse(new FileReader(new File(corpusClassLocation)));
    JSONObject firstJsonObject=(JSONObject)entireJsonArray.get(0);
    Set<String> keySet=firstJsonObject.keySet();
    Iterator<String> keyIterator=keySet.iterator();
    String key;
    String dataFrameHeader=""String_Node_Str"";
    while (keyIterator.hasNext()) {
      key=keyIterator.next();
      engine.eval(key + ""String_Node_Str"");
      dataFrameHeader=dataFrameHeader + key + ""String_Node_Str"";
    }
    dataFrameHeader=dataFrameHeader.substring(0,dataFrameHeader.length() - 1);
    Iterator<Object> arrayIterator=entireJsonArray.iterator();
    while (arrayIterator.hasNext()) {
      JSONObject singleJsonObject=(JSONObject)arrayIterator.next();
      keyIterator=keySet.iterator();
      while (keyIterator.hasNext()) {
        key=keyIterator.next();
        if (singleJsonObject.containsKey(key)) {
          String data=singleJsonObject.get(key).toString();
          data=data.toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
          data=data.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
          engine.eval(""String_Node_Str"" + data.toString() + ""String_Node_Str"");
          engine.eval(key + ""String_Node_Str"" + key+ ""String_Node_Str"");
        }
 else {
          engine.eval(key + ""String_Node_Str"" + key+ ""String_Node_Str"");
        }
      }
    }
    engine.eval(corpusName + ""String_Node_Str"" + dataFrameHeader+ ""String_Node_Str"");
    engine.eval(""String_Node_Str"" + corpusName + ""String_Node_Str""+ saveLocation+ ""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    return;
  }
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  ConsoleView.printlInConsoleln(""String_Node_Str"" + saveLocation);
}","/** 
 * This method writes the corpus into a R Dataframe and stores it to the specified output location.
 * @param outputLoc
 * @param cls
 * @throws Exception
 */
private static void writeRObj(String outputLoc,CorpusClass cls) throws Exception {
  String saveLocation=""String_Node_Str"" + outputLoc + File.separator+ cls.getParent().getCorpusName().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ cls.getClassName().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str"";
  saveLocation=saveLocation.replace(""String_Node_Str"",""String_Node_Str"");
  String corpusLocation=cls.getTacitLocation();
  File corpusDirectory=new File(corpusLocation);
  String corpusClassLocation=""String_Node_Str"";
  String[] jsonFiles=corpusDirectory.list();
  for (int i=0; i < jsonFiles.length; i++) {
    if (jsonFiles[i].endsWith(""String_Node_Str"")) {
      corpusClassLocation=corpusLocation + File.separator + jsonFiles[i];
      break;
    }
  }
  String corpusName=cls.getClassName();
  corpusName=corpusName.replace(""String_Node_Str"",""String_Node_Str"");
  ScriptEngineManager manager=new ScriptEngineManager();
  ScriptEngine engine=manager.getEngineByName(""String_Node_Str"");
  if (engine == null) {
    throw new Exception(""String_Node_Str"");
  }
  try {
    JSONParser jsonParser=new JSONParser();
    JSONArray entireJsonArray=(JSONArray)jsonParser.parse(new FileReader(new File(corpusClassLocation)));
    JSONObject firstJsonObject=(JSONObject)entireJsonArray.get(0);
    Set<String> keySet=firstJsonObject.keySet();
    Iterator<String> keyIterator=keySet.iterator();
    String key;
    String dataFrameHeader=""String_Node_Str"";
    while (keyIterator.hasNext()) {
      key=keyIterator.next();
      engine.eval(key + ""String_Node_Str"");
      dataFrameHeader=dataFrameHeader + key + ""String_Node_Str"";
    }
    dataFrameHeader=dataFrameHeader.substring(0,dataFrameHeader.length() - 1);
    Iterator<Object> arrayIterator=entireJsonArray.iterator();
    while (arrayIterator.hasNext()) {
      JSONObject singleJsonObject=(JSONObject)arrayIterator.next();
      keyIterator=keySet.iterator();
      while (keyIterator.hasNext()) {
        key=keyIterator.next();
        if (singleJsonObject.containsKey(key)) {
          String data=singleJsonObject.get(key).toString();
          data=data.toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
          data=data.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
          engine.eval(""String_Node_Str"" + data.toString() + ""String_Node_Str"");
          engine.eval(key + ""String_Node_Str"" + key+ ""String_Node_Str"");
        }
 else {
          engine.eval(key + ""String_Node_Str"" + key+ ""String_Node_Str"");
        }
      }
    }
    engine.eval(corpusName + ""String_Node_Str"" + dataFrameHeader+ ""String_Node_Str"");
    engine.eval(""String_Node_Str"" + corpusName + ""String_Node_Str""+ saveLocation+ ""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    return;
  }
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  ConsoleView.printlInConsoleln(""String_Node_Str"" + saveLocation);
}",0.9890597279716145
168073,"private static void writeRObjforReddit(String outputLoc,CorpusClass cls) throws Exception {
  JSONParser jsonParser=new JSONParser();
  RedditJsonHandler redditJsonHandler=new RedditJsonHandler();
  String saveLocation=""String_Node_Str"" + outputLoc + File.separator+ cls.getParent().getCorpusName().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ cls.getClassName().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str"";
  String corpusLocation=cls.getTacitLocation();
  File corpusDirectory=new File(corpusLocation);
  String[] jsonFiles=corpusDirectory.list();
  String corpusName=cls.getClassName().replaceAll(""String_Node_Str"",""String_Node_Str"");
  ScriptEngineManager manager=new ScriptEngineManager();
  ScriptEngine engine=manager.getEngineByName(""String_Node_Str"");
  if (engine == null) {
    throw new Exception(""String_Node_Str"");
  }
  try {
    String singleRedditLocation=""String_Node_Str"";
    JSONObject singleReddit=null;
    JSONArray commentArray;
    int maxComments=0;
    for (int i=0; i < jsonFiles.length; i++) {
      if (jsonFiles[i].endsWith(""String_Node_Str"")) {
        singleRedditLocation=corpusLocation + File.separator + jsonFiles[i];
        singleReddit=(JSONObject)jsonParser.parse(new FileReader(new File(singleRedditLocation)));
        commentArray=(JSONArray)singleReddit.get(""String_Node_Str"");
        if (commentArray.size() > maxComments) {
          maxComments=commentArray.size();
        }
      }
    }
    String dataFrameHeader=""String_Node_Str"";
    JSONObject singleRedditContent=(JSONObject)singleReddit.get(""String_Node_Str"");
    Set<String> keySet=singleRedditContent.keySet();
    Iterator<String> keyIterator=keySet.iterator();
    String key;
    while (keyIterator.hasNext()) {
      key=keyIterator.next();
      engine.eval(key + ""String_Node_Str"");
      dataFrameHeader=dataFrameHeader + key + ""String_Node_Str"";
    }
    for (int i=0; i < maxComments; i++) {
      engine.eval(""String_Node_Str"" + (i + 1) + ""String_Node_Str"");
      dataFrameHeader=dataFrameHeader + ""String_Node_Str"" + (i + 1)+ ""String_Node_Str"";
    }
    dataFrameHeader=dataFrameHeader.substring(0,dataFrameHeader.length() - 1);
    for (int i=0; i < jsonFiles.length; i++) {
      if (jsonFiles[i].endsWith(""String_Node_Str"")) {
        singleRedditLocation=corpusLocation + File.separator + jsonFiles[i];
        singleReddit=(JSONObject)jsonParser.parse(new FileReader(new File(singleRedditLocation)));
        JSONObject post=(JSONObject)singleReddit.get(""String_Node_Str"");
        keyIterator=keySet.iterator();
        while (keyIterator.hasNext()) {
          key=keyIterator.next();
          if (post.containsKey(key)) {
            String data=post.get(key).toString();
            data=data.toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
            data=data.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
            engine.eval(""String_Node_Str"" + data.toString() + ""String_Node_Str"");
            engine.eval(key + ""String_Node_Str"" + key+ ""String_Node_Str"");
          }
 else {
            engine.eval(key + ""String_Node_Str"" + key+ ""String_Node_Str"");
          }
        }
        String[] redditPostComments=redditJsonHandler.getPostComments(singleReddit);
        int remainingComments=maxComments;
        if (redditPostComments != null) {
          remainingComments=maxComments - redditPostComments.length;
          int commentCountStamp=1;
          for (          String redditPostComment : redditPostComments) {
            redditPostComment=redditPostComment.toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
            redditPostComment=redditPostComment.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
            engine.eval(""String_Node_Str"" + redditPostComment + ""String_Node_Str"");
            engine.eval(""String_Node_Str"" + commentCountStamp + ""String_Node_Str""+ commentCountStamp+ ""String_Node_Str"");
            commentCountStamp++;
          }
          for (int j=0; j < remainingComments; j++) {
            engine.eval(""String_Node_Str"" + commentCountStamp + ""String_Node_Str""+ commentCountStamp+ ""String_Node_Str"");
            commentCountStamp++;
          }
        }
 else {
          for (int j=0; j < remainingComments; j++) {
            engine.eval(""String_Node_Str"" + (j + 1) + ""String_Node_Str""+ (j + 1)+ ""String_Node_Str"");
          }
        }
      }
    }
    engine.eval(corpusName + ""String_Node_Str"" + dataFrameHeader+ ""String_Node_Str"");
    engine.eval(""String_Node_Str"" + corpusName + ""String_Node_Str""+ saveLocation+ ""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    return;
  }
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  ConsoleView.printlInConsoleln(""String_Node_Str"" + saveLocation);
}","private static void writeRObjforReddit(String outputLoc,CorpusClass cls) throws Exception {
  JSONParser jsonParser=new JSONParser();
  RedditJsonHandler redditJsonHandler=new RedditJsonHandler();
  String saveLocation=""String_Node_Str"" + outputLoc + File.separator+ cls.getParent().getCorpusName().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ cls.getClassName().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str"";
  saveLocation=saveLocation.replace(""String_Node_Str"",""String_Node_Str"");
  String corpusLocation=cls.getTacitLocation();
  File corpusDirectory=new File(corpusLocation);
  String[] jsonFiles=corpusDirectory.list();
  String corpusName=cls.getClassName().replaceAll(""String_Node_Str"",""String_Node_Str"");
  ScriptEngineManager manager=new ScriptEngineManager();
  ScriptEngine engine=manager.getEngineByName(""String_Node_Str"");
  if (engine == null) {
    throw new Exception(""String_Node_Str"");
  }
  try {
    String singleRedditLocation=""String_Node_Str"";
    JSONObject singleReddit=null;
    JSONArray commentArray;
    int maxComments=0;
    for (int i=0; i < jsonFiles.length; i++) {
      if (jsonFiles[i].endsWith(""String_Node_Str"")) {
        singleRedditLocation=corpusLocation + File.separator + jsonFiles[i];
        singleReddit=(JSONObject)jsonParser.parse(new FileReader(new File(singleRedditLocation)));
        commentArray=(JSONArray)singleReddit.get(""String_Node_Str"");
        if (commentArray.size() > maxComments) {
          maxComments=commentArray.size();
        }
      }
    }
    String dataFrameHeader=""String_Node_Str"";
    JSONObject singleRedditContent=(JSONObject)singleReddit.get(""String_Node_Str"");
    Set<String> keySet=singleRedditContent.keySet();
    Iterator<String> keyIterator=keySet.iterator();
    String key;
    while (keyIterator.hasNext()) {
      key=keyIterator.next();
      engine.eval(key + ""String_Node_Str"");
      dataFrameHeader=dataFrameHeader + key + ""String_Node_Str"";
    }
    for (int i=0; i < maxComments; i++) {
      engine.eval(""String_Node_Str"" + (i + 1) + ""String_Node_Str"");
      dataFrameHeader=dataFrameHeader + ""String_Node_Str"" + (i + 1)+ ""String_Node_Str"";
    }
    dataFrameHeader=dataFrameHeader.substring(0,dataFrameHeader.length() - 1);
    for (int i=0; i < jsonFiles.length; i++) {
      if (jsonFiles[i].endsWith(""String_Node_Str"")) {
        singleRedditLocation=corpusLocation + File.separator + jsonFiles[i];
        singleReddit=(JSONObject)jsonParser.parse(new FileReader(new File(singleRedditLocation)));
        JSONObject post=(JSONObject)singleReddit.get(""String_Node_Str"");
        keyIterator=keySet.iterator();
        while (keyIterator.hasNext()) {
          key=keyIterator.next();
          if (post.containsKey(key)) {
            String data=post.get(key).toString();
            data=data.toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
            data=data.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
            engine.eval(""String_Node_Str"" + data.toString() + ""String_Node_Str"");
            engine.eval(key + ""String_Node_Str"" + key+ ""String_Node_Str"");
          }
 else {
            engine.eval(key + ""String_Node_Str"" + key+ ""String_Node_Str"");
          }
        }
        String[] redditPostComments=redditJsonHandler.getPostComments(singleReddit);
        int remainingComments=maxComments;
        if (redditPostComments != null) {
          remainingComments=maxComments - redditPostComments.length;
          int commentCountStamp=1;
          for (          String redditPostComment : redditPostComments) {
            redditPostComment=redditPostComment.toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
            redditPostComment=redditPostComment.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
            engine.eval(""String_Node_Str"" + redditPostComment + ""String_Node_Str"");
            engine.eval(""String_Node_Str"" + commentCountStamp + ""String_Node_Str""+ commentCountStamp+ ""String_Node_Str"");
            commentCountStamp++;
          }
          for (int j=0; j < remainingComments; j++) {
            engine.eval(""String_Node_Str"" + commentCountStamp + ""String_Node_Str""+ commentCountStamp+ ""String_Node_Str"");
            commentCountStamp++;
          }
        }
 else {
          for (int j=0; j < remainingComments; j++) {
            engine.eval(""String_Node_Str"" + (j + 1) + ""String_Node_Str""+ (j + 1)+ ""String_Node_Str"");
          }
        }
      }
    }
    engine.eval(corpusName + ""String_Node_Str"" + dataFrameHeader+ ""String_Node_Str"");
    engine.eval(""String_Node_Str"" + corpusName + ""String_Node_Str""+ saveLocation+ ""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    return;
  }
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  ConsoleView.printlInConsoleln(""String_Node_Str"" + saveLocation);
}",0.9931532198371577
168074,"private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (AmericanPresidencyCrawlerViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    String day, year;
    int month;
    String outputDir;
    int presidentIndex;
    int documentIndex;
    String corpusName;
    boolean browse;
    boolean canProceed;
    String query1;
    String query2;
    Calendar from=null;
    Calendar to=null;
    String operator;
    @Override public void run(){
      final Job job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              browse=dateCheckBrowse.getSelection();
              corpusName=corpusNameTxt.getText();
              presidentIndex=selectPresidentSearch.getSelectionIndex();
              documentIndex=selectDocumentSearch.getSelectionIndex();
              if (!browse) {
                if (andButton.getSelection())                 operator=""String_Node_Str"";
 else                 if (orButton.getSelection())                 operator=""String_Node_Str"";
 else                 operator=""String_Node_Str"";
                query1=searchText1.getText();
                query2=searchText2.getText();
                if (dateCheckSearch.getSelection()) {
                  from=Calendar.getInstance();
                  from.set(fromDate.getYear(),fromDate.getMonth(),fromDate.getDay());
                  to=Calendar.getInstance();
                  to.set(toDate.getYear(),toDate.getMonth(),toDate.getDay());
                }
 else {
                  from=null;
                  to=null;
                }
              }
 else {
                month=browseMonth.getSelectionIndex() - 1;
                day=browseDay.getSelectionIndex() == 0 ? ""String_Node_Str"" : days[browseDay.getSelectionIndex()];
                year=browseYear.getSelectionIndex() == 0 ? ""String_Node_Str"" : years[browseYear.getSelectionIndex()];
              }
              Date dateObj=new Date();
              corpusName+=""String_Node_Str"" + dateObj.getTime();
              outputDir=IAmericanPresidencyCrawlerViewConstants.DEFAULT_CORPUS_LOCATION + File.separator + corpusName;
              if (!new File(outputDir).exists()) {
                new File(outputDir).mkdirs();
              }
            }
          }
);
          int progressSize=1000;
          monitor.beginTask(""String_Node_Str"",progressSize);
          TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          final AmericanPresidencyCrawler rc=new AmericanPresidencyCrawler();
          monitor.subTask(""String_Node_Str"");
          monitor.worked(10);
          if (monitor.isCanceled())           handledCancelRequest(""String_Node_Str"");
          if (!browse) {
            try {
              monitor.subTask(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              filesFound=rc.crawlSearch(outputDir,query1,query2,operator,from,to,presidentNameMap.get(presidentIndex),documentCategoryMap.get(documentIndex),monitor);
              System.out.println(""String_Node_Str"" + filesFound);
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
            }
 catch (            IndexOutOfBoundsException e) {
              Display.getDefault().syncExec(new Runnable(){
                @Override public void run(){
                  MessageDialog dialog=new MessageDialog(null,""String_Node_Str"",null,""String_Node_Str"",MessageDialog.INFORMATION,new String[]{""String_Node_Str""},1);
                  int result=dialog.open();
                  if (result <= 0) {
                    dialog.close();
                  }
                }
              }
);
            }
catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
          }
 else {
            try {
              monitor.subTask(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              filesFound=rc.crawlBrowse(outputDir,month,day,year,presidentNameMap.get(presidentIndex),documentCategoryMap.get(documentIndex),monitor);
            }
 catch (            IndexOutOfBoundsException e) {
              Display.getDefault().syncExec(new Runnable(){
                @Override public void run(){
                  MessageDialog dialog=new MessageDialog(null,""String_Node_Str"",null,""String_Node_Str"",MessageDialog.INFORMATION,new String[]{""String_Node_Str""},1);
                  int result=dialog.open();
                  if (result <= 0) {
                    dialog.close();
                  }
                }
              }
);
            }
catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
          }
          try {
            Display.getDefault().syncExec(new Runnable(){
              @Override public void run(){
                System.out.println(""String_Node_Str"" + filesFound);
                if (filesFound) {
                  System.out.println(""String_Node_Str"");
                  americanPresidencyCorpus=new Corpus(corpusName,CMDataType.PRESIDENCY_JSON);
                  CorpusClass cc=new CorpusClass(""String_Node_Str"",outputDir);
                  cc.setParent(americanPresidencyCorpus);
                  americanPresidencyCorpus.addClass(cc);
                }
              }
            }
);
          }
 catch (          Exception e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
          try {
            ManageCorpora.saveCorpus(americanPresidencyCorpus);
          }
 catch (          Exception e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
          if (monitor.isCanceled())           return handledCancelRequest(""String_Node_Str"");
          monitor.worked(10);
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      canProceed=canItProceed();
      if (canProceed) {
        job.schedule();
        job.addJobChangeListener(new JobChangeAdapter(){
          public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.INFO,form);
            }
 else {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.INFO,form);
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
          }
        }
);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (AmericanPresidencyCrawlerViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}","private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (AmericanPresidencyCrawlerViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    String day, year;
    int month;
    String outputDir;
    int presidentIndex;
    int documentIndex;
    String corpusName;
    boolean browse;
    boolean canProceed;
    String query1;
    String query2;
    Calendar from=null;
    Calendar to=null;
    String operator;
    @Override public void run(){
      final Job job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              browse=dateCheckBrowse.getSelection();
              corpusName=corpusNameTxt.getText();
              presidentIndex=selectPresidentSearch.getSelectionIndex();
              documentIndex=selectDocumentSearch.getSelectionIndex();
              if (!browse) {
                if (andButton.getSelection())                 operator=""String_Node_Str"";
 else                 if (orButton.getSelection())                 operator=""String_Node_Str"";
 else                 operator=""String_Node_Str"";
                query1=searchText1.getText();
                query2=searchText2.getText();
                if (dateCheckSearch.getSelection()) {
                  from=Calendar.getInstance();
                  from.set(fromDate.getYear(),fromDate.getMonth(),fromDate.getDay());
                  to=Calendar.getInstance();
                  to.set(toDate.getYear(),toDate.getMonth(),toDate.getDay());
                }
 else {
                  from=null;
                  to=null;
                }
              }
 else {
                month=browseMonth.getSelectionIndex() - 1;
                day=browseDay.getSelectionIndex() == 0 ? ""String_Node_Str"" : days[browseDay.getSelectionIndex()];
                year=browseYear.getSelectionIndex() == 0 ? ""String_Node_Str"" : years[browseYear.getSelectionIndex()];
              }
              Date dateObj=new Date();
              corpusName+=""String_Node_Str"" + dateObj.getTime();
              outputDir=IAmericanPresidencyCrawlerViewConstants.DEFAULT_CORPUS_LOCATION + File.separator + corpusName;
              if (!new File(outputDir).exists()) {
                new File(outputDir).mkdirs();
              }
            }
          }
);
          int progressSize=116317;
          monitor.beginTask(""String_Node_Str"",progressSize);
          TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          final AmericanPresidencyCrawler rc=new AmericanPresidencyCrawler();
          monitor.subTask(""String_Node_Str"");
          monitor.worked(10);
          if (monitor.isCanceled())           handledCancelRequest(""String_Node_Str"");
          if (!browse) {
            try {
              monitor.subTask(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              filesFound=rc.crawlSearch(outputDir,query1,query2,operator,from,to,presidentNameMap.get(presidentIndex),documentCategoryMap.get(documentIndex),monitor);
              System.out.println(""String_Node_Str"" + filesFound);
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
            }
 catch (            IndexOutOfBoundsException e) {
              Display.getDefault().syncExec(new Runnable(){
                @Override public void run(){
                  MessageDialog dialog=new MessageDialog(null,""String_Node_Str"",null,""String_Node_Str"",MessageDialog.INFORMATION,new String[]{""String_Node_Str""},1);
                  int result=dialog.open();
                  if (result <= 0) {
                    dialog.close();
                  }
                }
              }
);
            }
catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
          }
 else {
            try {
              monitor.subTask(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              filesFound=rc.crawlBrowse(outputDir,month,day,year,presidentNameMap.get(presidentIndex),documentCategoryMap.get(documentIndex),monitor);
            }
 catch (            IndexOutOfBoundsException e) {
              Display.getDefault().syncExec(new Runnable(){
                @Override public void run(){
                  MessageDialog dialog=new MessageDialog(null,""String_Node_Str"",null,""String_Node_Str"",MessageDialog.INFORMATION,new String[]{""String_Node_Str""},1);
                  int result=dialog.open();
                  if (result <= 0) {
                    dialog.close();
                  }
                }
              }
);
            }
catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
          }
          try {
            Display.getDefault().syncExec(new Runnable(){
              @Override public void run(){
                System.out.println(""String_Node_Str"" + filesFound);
                if (filesFound) {
                  System.out.println(""String_Node_Str"");
                  americanPresidencyCorpus=new Corpus(corpusName,CMDataType.PRESIDENCY_JSON);
                  CorpusClass cc=new CorpusClass(""String_Node_Str"",outputDir);
                  cc.setParent(americanPresidencyCorpus);
                  americanPresidencyCorpus.addClass(cc);
                }
              }
            }
);
          }
 catch (          Exception e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
          try {
            ManageCorpora.saveCorpus(americanPresidencyCorpus);
            ConsoleView.printlInConsoleln(""String_Node_Str"" + corpusName);
            ConsoleView.printlInConsoleln(""String_Node_Str"");
          }
 catch (          Exception e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
          if (monitor.isCanceled())           return handledCancelRequest(""String_Node_Str"");
          monitor.worked(10);
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      canProceed=canItProceed();
      if (canProceed) {
        job.schedule();
        job.addJobChangeListener(new JobChangeAdapter(){
          public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.INFO,form);
            }
 else {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.INFO,form);
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
          }
        }
);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (AmericanPresidencyCrawlerViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}",0.9910993800257812
168075,"public boolean crawlSearch(String outputDir,String searchTerm1,String searchTerm2,String operator,Calendar from,Calendar to,String presidentName,String documentCategory,IProgressMonitor monitor) throws IOException {
  boolean flag=true;
  this.outputDir=outputDir;
  setDir();
  Elements elements=null;
  Connection conn=Jsoup.connect(""String_Node_Str"").data(""String_Node_Str"",documentCategory).data(""String_Node_Str"",presidentName).data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"");
  int progressMonitorIncrement=890;
  if (!searchTerm1.equals(""String_Node_Str"")) {
    conn=conn.data(""String_Node_Str"",searchTerm1).data(""String_Node_Str"",operator).data(""String_Node_Str"",searchTerm2);
  }
  if (from != null) {
    conn=conn.data(""String_Node_Str"",months[from.get(Calendar.MONTH)]).data(""String_Node_Str"",days[from.get(Calendar.DATE) - 1]).data(""String_Node_Str"",from.get(Calendar.YEAR) + ""String_Node_Str"").data(""String_Node_Str"",months[to.get(Calendar.MONTH)]).data(""String_Node_Str"",days[to.get(Calendar.DATE) - 1]).data(""String_Node_Str"",to.get(Calendar.YEAR) + ""String_Node_Str"");
    conn.timeout(480000);
    Document e=conn.post();
    Element et=e.body().child(0).child(0).child(1).child(0).child(0).child(0).child(0).child(1);
    elements=et.child(1).child(0).children();
  }
 else {
    Element e=conn.post().body().child(0).child(0).child(1).child(0).child(0).child(0).child(0).child(1);
    conn.timeout(480000);
    if (!searchTerm1.equals(""String_Node_Str"")) {
      elements=e.child(2).child(0).children();
    }
 else {
      elements=e.child(1).child(0).children();
    }
  }
  if (elements != null && elements.size() != 0) {
    progressMonitorIncrement=980 / (elements.size());
    elements.remove(0);
    for (    Element element : elements) {
      try {
        strDate=element.child(0).text();
        strName=element.child(1).text();
        strTitle=element.child(3).child(0).child(0).text();
        extractInfo(element.child(3).child(0).child(0).attr(""String_Node_Str""));
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"");
      }
      monitor.worked(progressMonitorIncrement);
    }
  }
 else   flag=false;
  try {
    jsonGenerator.writeEndArray();
    jsonGenerator.flush();
    jsonGenerator.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return flag;
}","public boolean crawlSearch(String outputDir,String searchTerm1,String searchTerm2,String operator,Calendar from,Calendar to,String presidentName,String documentCategory,IProgressMonitor monitor) throws IOException {
  boolean flag=true;
  this.outputDir=outputDir;
  setDir();
  Elements elements=null;
  Connection conn=Jsoup.connect(""String_Node_Str"").data(""String_Node_Str"",documentCategory).data(""String_Node_Str"",presidentName).data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"");
  int progressMonitorIncrement=890;
  if (!searchTerm1.equals(""String_Node_Str"")) {
    conn=conn.data(""String_Node_Str"",searchTerm1).data(""String_Node_Str"",operator).data(""String_Node_Str"",searchTerm2);
  }
  if (from != null) {
    conn=conn.data(""String_Node_Str"",months[from.get(Calendar.MONTH)]).data(""String_Node_Str"",days[from.get(Calendar.DATE) - 1]).data(""String_Node_Str"",from.get(Calendar.YEAR) + ""String_Node_Str"").data(""String_Node_Str"",months[to.get(Calendar.MONTH)]).data(""String_Node_Str"",days[to.get(Calendar.DATE) - 1]).data(""String_Node_Str"",to.get(Calendar.YEAR) + ""String_Node_Str"");
    conn.timeout(5000000);
    Document e=conn.post();
    Element et=e.body().child(0).child(0).child(1).child(0).child(0).child(0).child(0).child(1);
    if (!searchTerm1.equals(""String_Node_Str""))     elements=et.child(2).child(0).children();
 else     elements=et.child(1).child(0).children();
  }
 else {
    Element e=conn.post().body().child(0).child(0).child(1).child(0).child(0).child(0).child(0).child(1);
    conn.timeout(5000000);
    if (!searchTerm1.equals(""String_Node_Str"")) {
      elements=e.child(2).child(0).children();
    }
 else {
      elements=e.child(2).child(0).children();
    }
  }
  int number=0;
  if (elements != null && elements.size() != 0) {
    progressMonitorIncrement=116317 / (elements.size());
    monitor.worked(progressMonitorIncrement);
    elements.remove(0);
    if (progressMonitorIncrement < 0)     progressMonitorIncrement=1;
    for (    Element element : elements) {
      try {
        strDate=element.child(0).text();
        strName=element.child(1).text();
        strTitle=element.child(3).child(0).child(0).text();
        extractInfo(element.child(3).child(0).child(0).attr(""String_Node_Str""));
        ConsoleView.printlInConsoleln(""String_Node_Str"" + strTitle);
        number+=1;
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"");
      }
      monitor.worked(progressMonitorIncrement);
    }
  }
 else   flag=false;
  try {
    jsonGenerator.writeEndArray();
    jsonGenerator.flush();
    jsonGenerator.close();
    ConsoleView.printlInConsoleln(number + ""String_Node_Str"");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return flag;
}",0.8446601941747572
168076,"public boolean crawlBrowse(String outputDir,int month,String day,String year,String president,String documentCategory,IProgressMonitor monitor) throws IOException {
  boolean flag=true;
  int progressMonitorIncrement=890;
  this.outputDir=outputDir;
  setDir();
  Connection conn=Jsoup.connect(""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",documentCategory).data(""String_Node_Str"",president);
  Elements elements;
  conn=conn.data(""String_Node_Str"",month == -1 ? ""String_Node_Str"" : months[month]).data(""String_Node_Str"",day).data(""String_Node_Str"",year);
  elements=conn.post().body().child(0).child(0).child(1).child(0).child(0).child(0).child(0).child(1).child(2).child(0).children();
  if (elements != null && elements.size() != 0) {
    elements.remove(0);
    for (    Element element : elements) {
      strDate=""String_Node_Str"";
      try {
        strDate=element.child(0).text();
        strName=element.child(1).text();
        strTitle=element.child(3).child(0).child(0).text();
        extractInfo(element.child(3).child(0).child(0).attr(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      monitor.worked(progressMonitorIncrement);
    }
  }
 else {
    flag=false;
  }
  try {
    jsonGenerator.writeEndArray();
    jsonGenerator.flush();
    jsonGenerator.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return flag;
}","public boolean crawlBrowse(String outputDir,int month,String day,String year,String president,String documentCategory,IProgressMonitor monitor) throws IOException {
  boolean flag=true;
  int progressMonitorIncrement=890;
  this.outputDir=outputDir;
  setDir();
  Connection conn=Jsoup.connect(""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",documentCategory).data(""String_Node_Str"",president);
  Elements elements;
  conn=conn.data(""String_Node_Str"",month == -1 ? ""String_Node_Str"" : months[month]).data(""String_Node_Str"",day).data(""String_Node_Str"",year);
  elements=conn.post().body().child(0).child(0).child(1).child(0).child(0).child(0).child(0).child(1).child(2).child(0).children();
  int number=0;
  if (elements != null && elements.size() != 0) {
    elements.remove(0);
    for (    Element element : elements) {
      strDate=""String_Node_Str"";
      try {
        strDate=element.child(0).text();
        strName=element.child(1).text();
        strTitle=element.child(3).child(0).child(0).text();
        extractInfo(element.child(3).child(0).child(0).attr(""String_Node_Str""));
        ConsoleView.printlInConsoleln(""String_Node_Str"" + strTitle);
        number+=1;
      }
 catch (      Exception e) {
      }
      monitor.worked(progressMonitorIncrement);
    }
  }
 else {
    flag=false;
  }
  try {
    jsonGenerator.writeEndArray();
    jsonGenerator.flush();
    jsonGenerator.close();
    ConsoleView.printlInConsoleln(number + ""String_Node_Str"");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return flag;
}",0.9457968192145408
168077,"void extractInfo(String link) throws Exception {
  try {
    String url=""String_Node_Str"" + link;
    Document doc1=Jsoup.connect(url).get();
    Element element=doc1.body().child(0).child(0).child(1).child(0).child(0).child(0).child(0).child(1).child(5).child(0).child(2).child(0).child(1);
    jsonGenerator.writeStartObject();
    jsonGenerator.writeStringField(""String_Node_Str"",strDate);
    jsonGenerator.writeStringField(""String_Node_Str"",strName);
    jsonGenerator.writeStringField(""String_Node_Str"",strTitle);
    String body=element.ownText();
    int index=body.indexOf(""String_Node_Str"");
    if (index == -1)     index=body.indexOf(""String_Node_Str"");
    if (strTitle.toLowerCase().contains(""String_Node_Str"") && index != -1) {
      jsonGenerator.writeArrayFieldStart(""String_Node_Str"");
      jsonGenerator.writeStartObject();
      jsonGenerator.writeStringField(""String_Node_Str"",body.substring(0,index));
      jsonGenerator.writeStringField(""String_Node_Str"",body.substring(index + 1));
      jsonGenerator.writeEndObject();
      String speaker=""String_Node_Str"";
      for (      Element el : element.getElementsByTag(""String_Node_Str"")) {
        if (index != -1)         speaker=body.substring(0,index);
        body=el.text();
        index=body.indexOf(""String_Node_Str"");
        if (index == -1)         index=body.indexOf(""String_Node_Str"");
        jsonGenerator.writeStartObject();
        if (index == -1) {
          jsonGenerator.writeStringField(""String_Node_Str"",speaker);
          jsonGenerator.writeStringField(""String_Node_Str"",body);
        }
 else {
          jsonGenerator.writeStringField(""String_Node_Str"",body.substring(0,index));
          jsonGenerator.writeStringField(""String_Node_Str"",body.substring(index + 1));
        }
        jsonGenerator.writeEndObject();
      }
      jsonGenerator.writeEndArray();
    }
 else {
      jsonGenerator.writeArrayFieldStart(""String_Node_Str"");
      for (      Element el : element.getElementsByTag(""String_Node_Str""))       body+=el.text() + ""String_Node_Str"";
      jsonGenerator.writeStartObject();
      jsonGenerator.writeStringField(""String_Node_Str"",""String_Node_Str"");
      jsonGenerator.writeStringField(""String_Node_Str"",body);
      jsonGenerator.writeEndObject();
      jsonGenerator.writeEndArray();
    }
    jsonGenerator.writeEndObject();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw e;
  }
}","void extractInfo(String link) throws Exception {
  try {
    String url=""String_Node_Str"" + link;
    Connection conn=Jsoup.connect(url);
    conn.timeout(5000000);
    Document doc1=conn.get();
    Element element=doc1.body().child(0).child(0).child(1).child(0).child(0).child(0).child(0).child(1).child(5).child(0).child(2).child(0).child(1);
    jsonGenerator.writeStartObject();
    jsonGenerator.writeStringField(""String_Node_Str"",strDate);
    jsonGenerator.writeStringField(""String_Node_Str"",strName);
    jsonGenerator.writeStringField(""String_Node_Str"",strTitle);
    String body=element.ownText();
    for (    Element el : element.getElementsByTag(""String_Node_Str""))     body+=el.text() + ""String_Node_Str"";
    jsonGenerator.writeStringField(""String_Node_Str"",body);
    jsonGenerator.writeEndObject();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw e;
  }
}",0.3808948004836759
168078,"@Override protected void createMasterPart(final IManagedForm managedForm,Composite parent){
  FormToolkit toolkit=managedForm.getToolkit();
  Section section=toolkit.createSection(parent,Section.DESCRIPTION | Section.TITLE_BAR);
  section.setText(""String_Node_Str"");
  Composite client=toolkit.createComposite(section,SWT.WRAP);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  layout.marginWidth=2;
  layout.marginHeight=2;
  client.setLayout(layout);
  toolkit.paintBordersFor(client);
  final TreeViewer corpusViewer=new TreeViewer(client,SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=400;
  gd.widthHint=100;
  corpusViewer.getTree().setLayoutData(gd);
  Composite buttonComposite=new Composite(client,SWT.NONE);
  GridLayout buttonLayout=new GridLayout();
  buttonLayout.marginWidth=buttonLayout.marginHeight=0;
  buttonLayout.makeColumnsEqualWidth=true;
  buttonComposite.setLayout(buttonLayout);
  buttonComposite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
  Button addCorpus=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(addCorpus);
  final Button addClass=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(addClass);
  Button remove=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(remove);
  final Button export=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(export);
  export.setEnabled(false);
  Button refresh=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(refresh);
  section.setClient(client);
  final SectionPart spart=new SectionPart(section);
  managedForm.addPart(spart);
  corpusViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      managedForm.fireSelectionChanged(spart,event.getSelection());
      Object c=((IStructuredSelection)event.getSelection()).getFirstElement();
      if (c instanceof ICorpusClass) {
        if (((CorpusClass)c).getParent().getDatatype() != CMDataType.PLAIN_TEXT)         export.setEnabled(true);
 else         export.setEnabled(false);
      }
 else       export.setEnabled(false);
    }
  }
);
  corpusViewer.setContentProvider(new MasterContentProvider());
  corpusViewer.setLabelProvider(new MasterLabelProvider());
  for (  ICorpus corpus : corpusList) {
    ((Corpus)corpus).setViewer(corpusViewer);
    for (    ICorpusClass cc : corpus.getClasses()) {
      ((CorpusClass)cc).setViewer(corpusViewer);
    }
  }
  corpusViewer.setInput(corpusList);
  refresh.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      corpusManagement=new ManageCorpora();
      corpusList=corpusManagement.getAllCorpusDetails();
      corpusViewer.setInput(corpusList);
    }
  }
);
  export.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      seperateFiles=false;
      final TacitCorpusFilterDialog filterDialog=new TacitCorpusFilterDialog(export.getShell());
      final CorpusClass cls=(CorpusClass)((IStructuredSelection)corpusViewer.getSelection()).getFirstElement();
      IQueryProcessor qp=new QueryProcesser(cls);
      Map<String,QueryDataType> keys=null;
      try {
        keys=qp.getJsonKeys();
        filterDialog.setFilterDetails(keys);
        filterDialog.addExistingFilters(cls.getFilters());
      }
 catch (      JsonSyntaxException e1) {
        e1.printStackTrace();
      }
catch (      JsonIOException e1) {
        e1.printStackTrace();
      }
catch (      FileNotFoundException e1) {
        e1.printStackTrace();
      }
      IWizardData wizardDataModel=new IWizardData(){
        @Override public void getData(        List<Filter> filter){
          cls.refreshFilters(filter);
        }
        @Override public void getPath(        String path){
          outputLoc=path;
        }
        @Override public void getDivision(        boolean seperate){
          seperateFiles=true;
        }
        @Override public void getExportSelection(        String selection){
          exportSelection=selection;
        }
      }
;
      WizardDialog wizardDialog=new WizardDialog(export.getShell(),new ExportWizard(filterDialog,wizardDataModel));
      if (wizardDialog.open() == Window.OK) {
        System.out.println(""String_Node_Str"");
        if (exportSelection.equals(ExportSelectionConstants.EXPORT_CSV_FORMAT)) {
          System.out.println(""String_Node_Str"");
          try {
            writeCSV(outputLoc,cls);
          }
 catch (          Exception e1) {
            ConsoleView.printlInConsoleln(""String_Node_Str"");
            e1.printStackTrace();
          }
        }
 else         if (exportSelection.equals(ExportSelectionConstants.EXPORT_ROBJ_FORMAT)) {
          System.out.println(""String_Node_Str"");
          try {
            writeRObj(outputLoc,cls);
          }
 catch (          Exception e1) {
            ConsoleView.printlInConsoleln(""String_Node_Str"");
            e1.printStackTrace();
          }
        }
 else         if (exportSelection.equals(ExportSelectionConstants.EXPORT_TXT_FORMAT)) {
          Preprocessor ppObj=null;
          List<String> inFiles=null;
          List<Object> inputFiles=new ArrayList<Object>();
          inputFiles.add(cls);
          File delFile=null;
          try {
            ppObj=new Preprocessor(""String_Node_Str"",true);
            inFiles=ppObj.processData(""String_Node_Str"",inputFiles,seperateFiles);
            if (!inFiles.isEmpty()) {
              delFile=new File(inFiles.get(0));
            }
          }
 catch (          Exception e1) {
            e1.printStackTrace();
          }
          String outputDir=outputLoc + File.separator + cls.getParent().getCorpusName()+ ""String_Node_Str""+ cls.getClassName();
          System.out.println(outputDir);
          File dir=new File(outputDir);
          if (!dir.exists()) {
            dir.mkdir();
          }
          for (          String i : inFiles) {
            try {
              int l=i.lastIndexOf(File.separator);
              String export=outputDir + File.separator + i.substring(l + 1);
              File exportFile=new File(export);
              FileUtils.copyFile(new File(i),exportFile);
              ConsoleView.printlInConsoleln(""String_Node_Str"" + exportFile.getName() + ""String_Node_Str""+ outputDir);
            }
 catch (            FileNotFoundException e1) {
              e1.printStackTrace();
            }
catch (            IOException e1) {
              e1.printStackTrace();
            }
          }
          if (!inFiles.isEmpty()) {
            try {
              FileUtils.deleteDirectory(delFile.getParentFile().getParentFile());
            }
 catch (            IOException e1) {
              e1.printStackTrace();
            }
          }
        }
      }
 else {
        System.out.println(""String_Node_Str"");
      }
    }
  }
);
  addCorpus.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      StringBuilder corpusTempName=new StringBuilder(""String_Node_Str"");
      corpusTempName.append(corpusList.size() + 1);
      Corpus c=new Corpus(new String(corpusTempName),CMDataType.PLAIN_TEXT,corpusViewer);
      c.addClass(new CorpusClass(""String_Node_Str"",ICorpusManagementConstants.DEFAULT_CLASSPATH,corpusViewer));
      corpusList.add(c);
      Object[] expandedItems=corpusViewer.getExpandedElements();
      corpusViewer.setInput(corpusList);
      corpusViewer.setExpandedElements(expandNewCorpus(expandedItems,c));
      corpusViewer.setSelection(new StructuredSelection(c),true);
    }
  }
);
  addClass.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)corpusViewer.getSelection();
      try {
        ICorpus corpusSelected=(selection.getFirstElement() instanceof ICorpus) ? (ICorpus)selection.getFirstElement() : (ICorpus)((ICorpusClass)selection.getFirstElement()).getParent();
        int corpusIndex=corpusList.indexOf(corpusSelected);
        StringBuilder classTempName=new StringBuilder(""String_Node_Str"");
        classTempName.append(corpusList.get(corpusIndex).getClasses().size() + 1);
        CorpusClass newClass=new CorpusClass(new String(classTempName),ICorpusManagementConstants.DEFAULT_CLASSPATH,corpusViewer);
        ((Corpus)corpusSelected).addClass(newClass);
        corpusList.set(corpusIndex,corpusSelected);
        corpusViewer.refresh();
        corpusViewer.setExpandedElements(expandNewCorpus(corpusViewer.getExpandedElements(),(Corpus)corpusList.get(corpusIndex)));
        corpusViewer.setSelection(new StructuredSelection(newClass),true);
      }
 catch (      Exception exp) {
      }
    }
  }
);
  final MessageDialog dg=new MessageDialog(corpusMgmtViewform.getShell(),""String_Node_Str"",null,""String_Node_Str"",MessageDialog.QUESTION_WITH_CANCEL,new String[]{IDialogConstants.YES_LABEL,IDialogConstants.NO_LABEL},0);
  remove.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)corpusViewer.getSelection();
      try {
switch (dg.open()) {
case 1:
          return;
      }
      Object selectedObj=selection.getFirstElement();
      if (selectedObj instanceof ICorpus) {
        ICorpus selectedCorpus=(ICorpus)selection.getFirstElement();
        corpusList.remove(selectedCorpus);
        ManageCorpora.removeCorpus((Corpus)selectedCorpus,true);
        deleteCorpus((Corpus)selectedCorpus);
      }
 else       if (selectedObj instanceof ICorpusClass) {
        ITreeSelection classSelection=(ITreeSelection)selection;
        ICorpusClass selectedClass=(ICorpusClass)selection.getFirstElement();
        Corpus parentCorpus=(Corpus)classSelection.getPaths()[0].getParentPath().getLastSegment();
        parentCorpus.removeClass(selectedClass);
        ManageCorpora.removeCorpus(parentCorpus,false);
      }
      corpusViewer.refresh();
      Display.getDefault().asyncExec(new Runnable(){
        @Override public void run(){
          corpusViewer.refresh();
        }
      }
);
    }
 catch (    Exception exp) {
    }
  }
}
);
}","@Override protected void createMasterPart(final IManagedForm managedForm,Composite parent){
  FormToolkit toolkit=managedForm.getToolkit();
  Section section=toolkit.createSection(parent,Section.DESCRIPTION | Section.TITLE_BAR);
  section.setText(""String_Node_Str"");
  Composite client=toolkit.createComposite(section,SWT.WRAP);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  layout.marginWidth=2;
  layout.marginHeight=2;
  client.setLayout(layout);
  toolkit.paintBordersFor(client);
  final TreeViewer corpusViewer=new TreeViewer(client,SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=400;
  gd.widthHint=100;
  corpusViewer.getTree().setLayoutData(gd);
  Composite buttonComposite=new Composite(client,SWT.NONE);
  GridLayout buttonLayout=new GridLayout();
  buttonLayout.marginWidth=buttonLayout.marginHeight=0;
  buttonLayout.makeColumnsEqualWidth=true;
  buttonComposite.setLayout(buttonLayout);
  buttonComposite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
  Button addCorpus=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(addCorpus);
  final Button addClass=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(addClass);
  Button remove=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(remove);
  final Button export=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(export);
  export.setEnabled(false);
  Button refresh=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(refresh);
  section.setClient(client);
  final SectionPart spart=new SectionPart(section);
  managedForm.addPart(spart);
  corpusViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      managedForm.fireSelectionChanged(spart,event.getSelection());
      Object c=((IStructuredSelection)event.getSelection()).getFirstElement();
      if (c instanceof ICorpusClass) {
        if (((CorpusClass)c).getParent().getDatatype() != CMDataType.PLAIN_TEXT)         export.setEnabled(true);
 else         export.setEnabled(false);
      }
 else       export.setEnabled(false);
    }
  }
);
  corpusViewer.setContentProvider(new MasterContentProvider());
  corpusViewer.setLabelProvider(new MasterLabelProvider());
  for (  ICorpus corpus : corpusList) {
    ((Corpus)corpus).setViewer(corpusViewer);
    for (    ICorpusClass cc : corpus.getClasses()) {
      ((CorpusClass)cc).setViewer(corpusViewer);
    }
  }
  corpusViewer.setInput(corpusList);
  refresh.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      corpusManagement=new ManageCorpora();
      corpusList=corpusManagement.getAllCorpusDetails();
      corpusViewer.setInput(corpusList);
    }
  }
);
  export.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      seperateFiles=false;
      final TacitCorpusFilterDialog filterDialog=new TacitCorpusFilterDialog(export.getShell());
      final CorpusClass cls=(CorpusClass)((IStructuredSelection)corpusViewer.getSelection()).getFirstElement();
      IQueryProcessor qp=new QueryProcesser(cls);
      Map<String,QueryDataType> keys=null;
      try {
        keys=qp.getJsonKeys();
        filterDialog.setFilterDetails(keys);
        filterDialog.addExistingFilters(cls.getFilters());
      }
 catch (      JsonSyntaxException e1) {
        e1.printStackTrace();
      }
catch (      JsonIOException e1) {
        e1.printStackTrace();
      }
catch (      FileNotFoundException e1) {
        e1.printStackTrace();
      }
      IWizardData wizardDataModel=new IWizardData(){
        @Override public void getData(        List<Filter> filter){
          cls.refreshFilters(filter);
        }
        @Override public void getPath(        String path){
          outputLoc=path;
        }
        @Override public void getDivision(        boolean seperate){
          seperateFiles=true;
        }
        @Override public void getExportSelection(        String selection){
          exportSelection=selection;
        }
      }
;
      WizardDialog wizardDialog=new WizardDialog(export.getShell(),new ExportWizard(filterDialog,wizardDataModel));
      if (wizardDialog.open() == Window.OK) {
        System.out.println(""String_Node_Str"");
        if (exportSelection.equals(ExportSelectionConstants.EXPORT_CSV_FORMAT)) {
          System.out.println(""String_Node_Str"");
          try {
            writeCSV(outputLoc,cls);
          }
 catch (          Exception e1) {
            ConsoleView.printlInConsoleln(""String_Node_Str"");
            e1.printStackTrace();
          }
        }
 else         if (exportSelection.equals(ExportSelectionConstants.EXPORT_ROBJ_FORMAT)) {
          System.out.println(""String_Node_Str"");
          try {
            writeRObj(outputLoc,cls);
          }
 catch (          Exception e1) {
            ConsoleView.printlInConsoleln(""String_Node_Str"");
            e1.printStackTrace();
          }
        }
 else         if (exportSelection.equals(ExportSelectionConstants.EXPORT_TXT_FORMAT)) {
          Preprocessor ppObj=null;
          List<String> inFiles=null;
          List<Object> inputFiles=new ArrayList<Object>();
          inputFiles.add(cls);
          File delFile=null;
          try {
            ppObj=new Preprocessor(""String_Node_Str"",false);
            inFiles=ppObj.processData(""String_Node_Str"",inputFiles,seperateFiles);
            if (!inFiles.isEmpty()) {
              delFile=new File(inFiles.get(0));
            }
          }
 catch (          Exception e1) {
            e1.printStackTrace();
          }
          String outputDir=outputLoc + File.separator + cls.getParent().getCorpusName()+ ""String_Node_Str""+ cls.getClassName();
          System.out.println(outputDir);
          File dir=new File(outputDir);
          if (!dir.exists()) {
            dir.mkdir();
          }
          for (          String i : inFiles) {
            try {
              int l=i.lastIndexOf(File.separator);
              String export=outputDir + File.separator + i.substring(l + 1);
              File exportFile=new File(export);
              FileUtils.copyFile(new File(i),exportFile);
              ConsoleView.printlInConsoleln(""String_Node_Str"" + exportFile.getName() + ""String_Node_Str""+ outputDir);
            }
 catch (            FileNotFoundException e1) {
              e1.printStackTrace();
            }
catch (            IOException e1) {
              e1.printStackTrace();
            }
          }
        }
      }
 else {
        System.out.println(""String_Node_Str"");
      }
    }
  }
);
  addCorpus.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      StringBuilder corpusTempName=new StringBuilder(""String_Node_Str"");
      corpusTempName.append(corpusList.size() + 1);
      Corpus c=new Corpus(new String(corpusTempName),CMDataType.PLAIN_TEXT,corpusViewer);
      c.addClass(new CorpusClass(""String_Node_Str"",ICorpusManagementConstants.DEFAULT_CLASSPATH,corpusViewer));
      corpusList.add(c);
      Object[] expandedItems=corpusViewer.getExpandedElements();
      corpusViewer.setInput(corpusList);
      corpusViewer.setExpandedElements(expandNewCorpus(expandedItems,c));
      corpusViewer.setSelection(new StructuredSelection(c),true);
    }
  }
);
  addClass.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)corpusViewer.getSelection();
      try {
        ICorpus corpusSelected=(selection.getFirstElement() instanceof ICorpus) ? (ICorpus)selection.getFirstElement() : (ICorpus)((ICorpusClass)selection.getFirstElement()).getParent();
        int corpusIndex=corpusList.indexOf(corpusSelected);
        StringBuilder classTempName=new StringBuilder(""String_Node_Str"");
        classTempName.append(corpusList.get(corpusIndex).getClasses().size() + 1);
        CorpusClass newClass=new CorpusClass(new String(classTempName),ICorpusManagementConstants.DEFAULT_CLASSPATH,corpusViewer);
        ((Corpus)corpusSelected).addClass(newClass);
        corpusList.set(corpusIndex,corpusSelected);
        corpusViewer.refresh();
        corpusViewer.setExpandedElements(expandNewCorpus(corpusViewer.getExpandedElements(),(Corpus)corpusList.get(corpusIndex)));
        corpusViewer.setSelection(new StructuredSelection(newClass),true);
      }
 catch (      Exception exp) {
      }
    }
  }
);
  final MessageDialog dg=new MessageDialog(corpusMgmtViewform.getShell(),""String_Node_Str"",null,""String_Node_Str"",MessageDialog.QUESTION_WITH_CANCEL,new String[]{IDialogConstants.YES_LABEL,IDialogConstants.NO_LABEL},0);
  remove.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)corpusViewer.getSelection();
      try {
switch (dg.open()) {
case 1:
          return;
      }
      Object selectedObj=selection.getFirstElement();
      if (selectedObj instanceof ICorpus) {
        ICorpus selectedCorpus=(ICorpus)selection.getFirstElement();
        corpusList.remove(selectedCorpus);
        ManageCorpora.removeCorpus((Corpus)selectedCorpus,true);
        deleteCorpus((Corpus)selectedCorpus);
      }
 else       if (selectedObj instanceof ICorpusClass) {
        ITreeSelection classSelection=(ITreeSelection)selection;
        ICorpusClass selectedClass=(ICorpusClass)selection.getFirstElement();
        Corpus parentCorpus=(Corpus)classSelection.getPaths()[0].getParentPath().getLastSegment();
        parentCorpus.removeClass(selectedClass);
        ManageCorpora.removeCorpus(parentCorpus,false);
      }
      corpusViewer.refresh();
      Display.getDefault().asyncExec(new Runnable(){
        @Override public void run(){
          corpusViewer.refresh();
        }
      }
);
    }
 catch (    Exception exp) {
    }
  }
}
);
}",0.9877880731765264
168079,"/** 
 * Process a CorpusClass of Twitter JSON type. Remove function on completing support for Generic JSON files.
 * @param corpusClass
 * @throws TikaException
 */
private void processJSONArray(CorpusClass corpusClass,boolean seperateFiles){
  JSONParser jParser;
  String corpusClassPath=corpusClass.getTacitLocation();
  String tempDir=""String_Node_Str"";
  String tempFile=""String_Node_Str"";
  Date dateobj=new Date();
  StringBuilder sb=new StringBuilder();
  if (doPreprocessing)   tempFile=tempPPFileLoc + corpusClass.getClassName() + System.currentTimeMillis()+ ""String_Node_Str"";
 else {
    tempDir=ppFilesLoc + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ dateobj.getTime();
    new File(tempDir).mkdir();
  }
  jParser=new JSONParser();
  dateobj=new Date();
  File[] fileList=new File(corpusClassPath).listFiles();
  for (int i=0; i < fileList.length; i++) {
    try {
      String fileName=fileList[i].getAbsolutePath();
      if (!fileList[i].getAbsolutePath().endsWith(""String_Node_Str""))       continue;
      JSONArray objects=(JSONArray)jParser.parse(new FileReader(fileName));
      int j=0;
      boolean first=true;
      boolean lineCheck=true;
      File summary=new File(""String_Node_Str"");
      BufferedWriter bWriter=new BufferedWriter(new FileWriter(summary));
      for (      Object obj : objects) {
        JSONObject twitterStream=(JSONObject)obj;
        if (first) {
          for (          Object keys : twitterStream.keySet()) {
            String key=(String)keys;
            if (lineCheck) {
              System.out.println(key);
              bWriter.write(key);
              lineCheck=false;
            }
 else {
              System.out.println(""String_Node_Str"" + key);
              bWriter.write(""String_Node_Str"" + key);
            }
          }
          lineCheck=true;
          System.out.println(""String_Node_Str"");
          bWriter.write(""String_Node_Str"");
          first=false;
        }
        File file;
        List<String> outputs=processQuery(corpusClass,twitterStream);
        if (!outputs.isEmpty() && outputs.get(0) != null && !outputs.get(0).equals(""String_Node_Str"")) {
          for (          Object keys : twitterStream.keySet()) {
            String key=(String)keys;
            Object val=twitterStream.get(key);
            if (lineCheck) {
              System.out.println(""String_Node_Str"" + val.toString() + ""String_Node_Str"");
              bWriter.write(""String_Node_Str"" + val.toString() + ""String_Node_Str"");
              lineCheck=false;
            }
 else {
              System.out.println(""String_Node_Str"" + val.toString() + ""String_Node_Str"");
              bWriter.write(""String_Node_Str"" + val.toString() + ""String_Node_Str"");
            }
          }
          lineCheck=true;
          System.out.println(""String_Node_Str"");
          bWriter.write(""String_Node_Str"");
          dateobj=new Date();
          if (doPreprocessing) {
            file=new File(tempFile);
          }
 else {
            file=new File(tempDir + System.getProperty(""String_Node_Str"") + corpusClass.getClassName()+ j+ ""String_Node_Str""+ df.format(dateobj));
          }
          if (file.exists()) {
            file.delete();
          }
          if (seperateFiles) {
            FileWriter fw=new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw=new BufferedWriter(fw);
            String tweet=outputs.get(0);
            bw.write(tweet);
            bw.close();
            if (doPreprocessing) {
              outputFiles.add(processFile(tempFile,corpusClass.getClassName() + ""String_Node_Str"" + j+ ""String_Node_Str""+ df.format(dateobj)));
            }
 else {
              outputFiles.add(checkfiletype(file.getAbsolutePath()));
            }
          }
 else {
            sb.append(outputs.get(0));
          }
        }
        j++;
      }
      bWriter.flush();
      bWriter.close();
      outputFiles.add(summary.getAbsolutePath());
      if (!seperateFiles) {
        File file=new File(tempFile);
        if (file.exists()) {
          file.delete();
        }
        FileWriter fw=new FileWriter(file.getAbsoluteFile());
        BufferedWriter bw=new BufferedWriter(fw);
        bw.write(sb.toString());
        bw.close();
        if (doPreprocessing) {
          outputFiles.add(processFile(tempFile,corpusClass.getClassName() + ""String_Node_Str"" + j+ ""String_Node_Str""+ df.format(dateobj)));
        }
 else {
          outputFiles.add(checkfiletype(file.getAbsolutePath()));
        }
      }
    }
 catch (    JsonParseException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
catch (    ParseException e) {
      e.printStackTrace();
    }
  }
  if (new File(tempFile).exists()) {
    new File(tempFile).delete();
  }
}","/** 
 * Process a CorpusClass of Twitter JSON type. Remove function on completing support for Generic JSON files.
 * @param corpusClass
 * @throws TikaException
 */
private void processJSONArray(CorpusClass corpusClass,boolean seperateFiles){
  JSONParser jParser;
  String corpusClassPath=corpusClass.getTacitLocation();
  String tempDir=""String_Node_Str"";
  String tempFile=""String_Node_Str"";
  Date dateobj=new Date();
  StringBuilder sb=new StringBuilder();
  if (!doPreprocessing)   tempFile=tempPPFileLoc + corpusClass.getClassName() + System.currentTimeMillis()+ ""String_Node_Str"";
 else {
    tempDir=ppFilesLoc + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ dateobj.getTime();
    new File(tempDir).mkdir();
  }
  jParser=new JSONParser();
  dateobj=new Date();
  File[] fileList=new File(corpusClassPath).listFiles();
  for (int i=0; i < fileList.length; i++) {
    try {
      String fileName=fileList[i].getAbsolutePath();
      if (!fileList[i].getAbsolutePath().endsWith(""String_Node_Str""))       continue;
      JSONArray objects=(JSONArray)jParser.parse(new FileReader(fileName));
      int j=0;
      boolean first=true;
      boolean lineCheck=true;
      File summary=new File(""String_Node_Str"");
      BufferedWriter bWriter=new BufferedWriter(new FileWriter(summary));
      for (      Object obj : objects) {
        JSONObject twitterStream=(JSONObject)obj;
        if (first) {
          for (          Object keys : twitterStream.keySet()) {
            String key=(String)keys;
            if (lineCheck) {
              System.out.println(key);
              bWriter.write(key);
              lineCheck=false;
            }
 else {
              System.out.println(""String_Node_Str"" + key);
              bWriter.write(""String_Node_Str"" + key);
            }
          }
          lineCheck=true;
          System.out.println(""String_Node_Str"");
          bWriter.write(""String_Node_Str"");
          first=false;
        }
        File file;
        List<String> outputs=processQuery(corpusClass,twitterStream);
        if (!outputs.isEmpty() && outputs.get(0) != null && !outputs.get(0).equals(""String_Node_Str"")) {
          for (          Object keys : twitterStream.keySet()) {
            String key=(String)keys;
            Object val=twitterStream.get(key);
            if (lineCheck) {
              System.out.println(""String_Node_Str"" + val.toString() + ""String_Node_Str"");
              bWriter.write(""String_Node_Str"" + val.toString() + ""String_Node_Str"");
              lineCheck=false;
            }
 else {
              System.out.println(""String_Node_Str"" + val.toString() + ""String_Node_Str"");
              bWriter.write(""String_Node_Str"" + val.toString() + ""String_Node_Str"");
            }
          }
          lineCheck=true;
          System.out.println(""String_Node_Str"");
          bWriter.write(""String_Node_Str"");
          dateobj=new Date();
          if (!doPreprocessing) {
            file=new File(tempFile);
          }
 else {
            file=new File(tempDir + System.getProperty(""String_Node_Str"") + corpusClass.getClassName()+ j+ ""String_Node_Str""+ df.format(dateobj));
          }
          if (file.exists()) {
            file.delete();
          }
          if (seperateFiles) {
            FileWriter fw=new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw=new BufferedWriter(fw);
            String tweet=outputs.get(0);
            bw.write(tweet);
            bw.close();
            if (!doPreprocessing) {
              outputFiles.add(processFile(tempFile,corpusClass.getClassName() + ""String_Node_Str"" + j+ ""String_Node_Str""+ df.format(dateobj)));
            }
 else {
              outputFiles.add(checkfiletype(file.getAbsolutePath()));
            }
          }
 else {
            sb.append(outputs.get(0));
          }
        }
        j++;
      }
      bWriter.flush();
      bWriter.close();
      outputFiles.add(summary.getAbsolutePath());
      if (!seperateFiles) {
        File file=new File(tempFile);
        if (file.exists()) {
          file.delete();
        }
        FileWriter fw=new FileWriter(file.getAbsoluteFile());
        BufferedWriter bw=new BufferedWriter(fw);
        bw.write(sb.toString());
        bw.close();
        if (!doPreprocessing) {
          outputFiles.add(processFile(tempFile,corpusClass.getClassName() + ""String_Node_Str"" + j+ ""String_Node_Str""+ df.format(dateobj)));
        }
 else {
          outputFiles.add(checkfiletype(file.getAbsolutePath()));
        }
      }
    }
 catch (    JsonParseException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
catch (    ParseException e) {
      e.printStackTrace();
    }
  }
  if (new File(tempFile).exists()) {
    new File(tempFile).delete();
  }
}",0.9995841131212312
168080,"void extractInfo(String link) throws Exception {
  try {
    String url=""String_Node_Str"" + link;
    Document doc1=Jsoup.connect(url).get();
    Element element=doc1.body().child(0).child(0).child(1).child(0).child(0).child(0).child(0).child(1).child(5).child(0).child(2).child(0).child(1);
    jsonGenerator.writeStartObject();
    jsonGenerator.writeStringField(""String_Node_Str"",strDate);
    jsonGenerator.writeStringField(""String_Node_Str"",strName);
    jsonGenerator.writeStringField(""String_Node_Str"",strTitle);
    String body=""String_Node_Str"";
    for (    Element el : element.getElementsByTag(""String_Node_Str"")) {
      body+=el.text();
    }
    jsonGenerator.writeStringField(""String_Node_Str"",body);
    jsonGenerator.writeEndObject();
  }
 catch (  Exception e) {
    throw e;
  }
}","void extractInfo(String link) throws Exception {
  try {
    String url=""String_Node_Str"" + link;
    Document doc1=Jsoup.connect(url).get();
    Element element=doc1.body().child(0).child(0).child(1).child(0).child(0).child(0).child(0).child(1).child(5).child(0).child(2).child(0).child(1);
    jsonGenerator.writeStartObject();
    jsonGenerator.writeStringField(""String_Node_Str"",strDate);
    jsonGenerator.writeStringField(""String_Node_Str"",strName);
    jsonGenerator.writeStringField(""String_Node_Str"",strTitle);
    String body=element.ownText();
    for (    Element el : element.getElementsByTag(""String_Node_Str"")) {
      body+=el.text() + ""String_Node_Str"";
    }
    jsonGenerator.writeStringField(""String_Node_Str"",body);
    jsonGenerator.writeEndObject();
  }
 catch (  Exception e) {
    throw e;
  }
}",0.9666666666666668
168081,"private boolean canItProceed(){
  form.getMessageManager().removeAllMessages();
  if (dateCheckBrowse.getSelection()) {
    if (browseDay.getSelectionIndex() == 0 && browseMonth.getSelectionIndex() == 0 && browseYear.getSelectionIndex() == 0) {
      form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
      return false;
    }
 else     form.getMessageManager().removeMessage(""String_Node_Str"");
  }
 else {
    Calendar cal=Calendar.getInstance();
    cal.set(fromDate.getYear(),fromDate.getMonth(),fromDate.getDay());
    double from=cal.getTimeInMillis() / 1000;
    cal.set(toDate.getYear(),toDate.getMonth(),toDate.getDay());
    double to=cal.getTimeInMillis() / 1000;
    if (searchText1.getText().equals(""String_Node_Str"") && selectPresidentSearch.getSelectionIndex() == 0 && selectDocumentSearch.getSelectionIndex() == 0) {
      form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
      return false;
    }
 else     if (from > to) {
      form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
      return false;
    }
    form.getMessageManager().removeMessage(""String_Node_Str"");
  }
  String corpusName=corpusNameTxt.getText();
  if (null == corpusName || corpusName.isEmpty()) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
 else {
    String outputDir=IAmericanPresidencyCrawlerViewConstants.DEFAULT_CORPUS_LOCATION + File.separator + corpusName;
    if (new File(outputDir).exists()) {
      form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
      return false;
    }
 else {
      form.getMessageManager().removeMessage(""String_Node_Str"");
      return true;
    }
  }
}","private boolean canItProceed(){
  form.getMessageManager().removeAllMessages();
  if (dateCheckBrowse.getSelection()) {
    if (browseDay.getSelectionIndex() == 0 && browseMonth.getSelectionIndex() == 0 && browseYear.getSelectionIndex() == 0) {
      form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
      return false;
    }
 else     form.getMessageManager().removeMessage(""String_Node_Str"");
  }
  if (dateCheckSearch.getSelection()) {
    Calendar cal=Calendar.getInstance();
    cal.set(fromDate.getYear(),fromDate.getMonth(),fromDate.getDay());
    double from=cal.getTimeInMillis() / 1000;
    cal.set(toDate.getYear(),toDate.getMonth(),toDate.getDay());
    double to=cal.getTimeInMillis() / 1000;
    if (from > to) {
      form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
      return false;
    }
    form.getMessageManager().removeMessage(""String_Node_Str"");
  }
  if (searchText1.getText().equals(""String_Node_Str"") && selectPresidentSearch.getSelectionIndex() == 0 && selectDocumentSearch.getSelectionIndex() == 0) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
 else {
    form.getMessageManager().removeMessage(""String_Node_Str"");
  }
  String corpusName=corpusNameTxt.getText();
  if (null == corpusName || corpusName.isEmpty()) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
 else {
    String outputDir=IAmericanPresidencyCrawlerViewConstants.DEFAULT_CORPUS_LOCATION + File.separator + corpusName;
    if (new File(outputDir).exists()) {
      form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
      return false;
    }
 else {
      form.getMessageManager().removeMessage(""String_Node_Str"");
      return true;
    }
  }
}",0.87574889294087
168082,"private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (AmericanPresidencyCrawlerViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    String month, day, year;
    String outputDir;
    int presidentIndex;
    int documentIndex;
    String corpusName;
    boolean browse;
    boolean canProceed;
    String query1;
    String query2;
    Calendar from=null;
    Calendar to=null;
    String operator;
    @Override public void run(){
      final Job job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              browse=dateCheckBrowse.getSelection();
              corpusName=corpusNameTxt.getText();
              if (!browse) {
                if (andButton.getSelection())                 operator=""String_Node_Str"";
 else                 if (orButton.getSelection())                 operator=""String_Node_Str"";
 else                 operator=""String_Node_Str"";
                query1=searchText1.getText();
                query2=searchText2.getText();
                presidentIndex=selectPresidentSearch.getSelectionIndex();
                documentIndex=selectDocumentSearch.getSelectionIndex();
                if (dateCheckSearch.getSelection()) {
                  from=Calendar.getInstance();
                  from.set(fromDate.getYear(),fromDate.getMonth(),fromDate.getDay());
                  to=Calendar.getInstance();
                  to.set(toDate.getYear(),toDate.getMonth(),toDate.getDay());
                }
              }
 else {
                month=browseMonth.getSelectionIndex() == 0 ? ""String_Node_Str"" : months[browseMonth.getSelectionIndex()];
                day=browseDay.getSelectionIndex() == 0 ? ""String_Node_Str"" : days[browseDay.getSelectionIndex()];
                year=browseYear.getSelectionIndex() == 0 ? ""String_Node_Str"" : years[browseYear.getSelectionIndex()];
                documentIndex=selectDocumentSearch.getSelectionIndex();
                presidentIndex=selectPresidentSearch.getSelectionIndex();
              }
              Date dateObj=new Date();
              corpusName+=""String_Node_Str"" + dateObj.getTime();
              outputDir=IAmericanPresidencyCrawlerViewConstants.DEFAULT_CORPUS_LOCATION + File.separator + corpusName;
              if (!new File(outputDir).exists()) {
                new File(outputDir).mkdirs();
              }
            }
          }
);
          int progressSize=1000;
          monitor.beginTask(""String_Node_Str"",progressSize);
          TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          final AmericanPresidencyCrawler rc=new AmericanPresidencyCrawler();
          monitor.subTask(""String_Node_Str"");
          monitor.worked(10);
          if (monitor.isCanceled())           handledCancelRequest(""String_Node_Str"");
          americanPresidencyCorpus=new Corpus(corpusName,CMDataType.PRESIDENCY_JSON);
          if (!browse) {
            try {
              monitor.subTask(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              rc.crawlSearch(outputDir,query1,query2,operator,from,to,presidentNameMap.get(presidentIndex),documentCategoryMap.get(documentIndex),monitor);
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
            }
 catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
          }
 else {
            try {
              monitor.subTask(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              rc.crawlBrowse(outputDir,month,day,year,presidentNameMap.get(presidentIndex),documentCategoryMap.get(documentIndex),monitor);
            }
 catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
          }
          try {
            Display.getDefault().syncExec(new Runnable(){
              @Override public void run(){
                CorpusClass cc=new CorpusClass(""String_Node_Str"",outputDir);
                cc.setParent(americanPresidencyCorpus);
                americanPresidencyCorpus.addClass(cc);
              }
            }
);
          }
 catch (          Exception e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
          try {
            ManageCorpora.saveCorpus(americanPresidencyCorpus);
          }
 catch (          Exception e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
          if (monitor.isCanceled())           return handledCancelRequest(""String_Node_Str"");
          monitor.worked(10);
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      canProceed=canItProceed();
      if (canProceed) {
        job.schedule();
        job.addJobChangeListener(new JobChangeAdapter(){
          public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.INFO,form);
            }
 else {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.INFO,form);
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
          }
        }
);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (AmericanPresidencyCrawlerViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}","private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (AmericanPresidencyCrawlerViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    String month, day, year;
    String outputDir;
    int presidentIndex;
    int documentIndex;
    String corpusName;
    boolean browse;
    boolean canProceed;
    String query1;
    String query2;
    Calendar from=null;
    Calendar to=null;
    String operator;
    @Override public void run(){
      final Job job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              browse=dateCheckBrowse.getSelection();
              corpusName=corpusNameTxt.getText();
              if (!browse) {
                if (andButton.getSelection())                 operator=""String_Node_Str"";
 else                 if (orButton.getSelection())                 operator=""String_Node_Str"";
 else                 operator=""String_Node_Str"";
                query1=searchText1.getText();
                query2=searchText2.getText();
                presidentIndex=selectPresidentSearch.getSelectionIndex();
                documentIndex=selectDocumentSearch.getSelectionIndex();
                if (dateCheckSearch.getSelection()) {
                  from=Calendar.getInstance();
                  from.set(fromDate.getYear(),fromDate.getMonth(),fromDate.getDay());
                  to=Calendar.getInstance();
                  to.set(toDate.getYear(),toDate.getMonth(),toDate.getDay());
                }
              }
 else {
                month=browseMonth.getSelectionIndex() == 0 ? ""String_Node_Str"" : months[browseMonth.getSelectionIndex()];
                day=browseDay.getSelectionIndex() == 0 ? ""String_Node_Str"" : days[browseDay.getSelectionIndex()];
                year=browseYear.getSelectionIndex() == 0 ? ""String_Node_Str"" : years[browseYear.getSelectionIndex()];
                documentIndex=selectDocumentSearch.getSelectionIndex();
                presidentIndex=selectPresidentSearch.getSelectionIndex();
              }
              Date dateObj=new Date();
              corpusName+=""String_Node_Str"" + dateObj.getTime();
              outputDir=IAmericanPresidencyCrawlerViewConstants.DEFAULT_CORPUS_LOCATION + File.separator + corpusName;
              if (!new File(outputDir).exists()) {
                new File(outputDir).mkdirs();
              }
            }
          }
);
          int progressSize=1000;
          monitor.beginTask(""String_Node_Str"",progressSize);
          TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          final AmericanPresidencyCrawler rc=new AmericanPresidencyCrawler();
          monitor.subTask(""String_Node_Str"");
          monitor.worked(10);
          if (monitor.isCanceled())           handledCancelRequest(""String_Node_Str"");
          americanPresidencyCorpus=new Corpus(corpusName,CMDataType.PRESIDENCY_JSON);
          if (!browse) {
            try {
              monitor.subTask(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              rc.crawlSearch(outputDir,query1,query2,operator,from,to,presidentNameMap.get(presidentIndex),documentCategoryMap.get(documentIndex),monitor);
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
            }
 catch (            IndexOutOfBoundsException e) {
              System.out.println(e);
              Display.getDefault().syncExec(new Runnable(){
                @Override public void run(){
                  MessageDialog dialog=new MessageDialog(null,""String_Node_Str"",null,""String_Node_Str"",MessageDialog.INFORMATION,new String[]{""String_Node_Str""},1);
                  int result=dialog.open();
                  if (result <= 0) {
                    dialog.close();
                  }
                }
              }
);
            }
catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
          }
 else {
            try {
              monitor.subTask(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              rc.crawlBrowse(outputDir,month,day,year,presidentNameMap.get(presidentIndex),documentCategoryMap.get(documentIndex),monitor);
            }
 catch (            IndexOutOfBoundsException e) {
              Display.getDefault().syncExec(new Runnable(){
                @Override public void run(){
                  MessageDialog dialog=new MessageDialog(null,""String_Node_Str"",null,""String_Node_Str"",MessageDialog.INFORMATION,new String[]{""String_Node_Str""},1);
                  int result=dialog.open();
                  if (result <= 0) {
                    dialog.close();
                  }
                }
              }
);
            }
catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
          }
          try {
            Display.getDefault().syncExec(new Runnable(){
              @Override public void run(){
                CorpusClass cc=new CorpusClass(""String_Node_Str"",outputDir);
                cc.setParent(americanPresidencyCorpus);
                americanPresidencyCorpus.addClass(cc);
              }
            }
);
          }
 catch (          Exception e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
          try {
            ManageCorpora.saveCorpus(americanPresidencyCorpus);
          }
 catch (          Exception e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
          if (monitor.isCanceled())           return handledCancelRequest(""String_Node_Str"");
          monitor.worked(10);
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      canProceed=canItProceed();
      if (canProceed) {
        job.schedule();
        job.addJobChangeListener(new JobChangeAdapter(){
          public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.INFO,form);
            }
 else {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.INFO,form);
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
          }
        }
);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (AmericanPresidencyCrawlerViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}",0.929143395464639
168083,"private void createCrawlInputParameters(final FormToolkit toolkit,final Composite parent){
  Section inputParamsSection=toolkit.createSection(parent,Section.TITLE_BAR | Section.EXPANDED | Section.DESCRIPTION);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(inputParamsSection);
  GridLayoutFactory.fillDefaults().numColumns(2).applyTo(inputParamsSection);
  inputParamsSection.setText(""String_Node_Str"");
  ScrolledComposite sc=new ScrolledComposite(inputParamsSection,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  sc.setExpandHorizontal(true);
  sc.setExpandVertical(true);
  GridLayoutFactory.fillDefaults().numColumns(2).equalWidth(false).applyTo(sc);
  Composite mainComposite=toolkit.createComposite(inputParamsSection);
  sc.setContent(mainComposite);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(sc);
  GridLayoutFactory.fillDefaults().numColumns(2).equalWidth(false).applyTo(mainComposite);
  inputParamsSection.setClient(mainComposite);
  searchComposite=toolkit.createComposite(mainComposite);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).applyTo(searchComposite);
  GridLayoutFactory.fillDefaults().equalWidth(true).applyTo(searchComposite);
  commonsearchComposite=toolkit.createComposite(searchComposite);
  GridDataFactory.fillDefaults().grab(true,false).span(1,0).applyTo(commonsearchComposite);
  GridLayoutFactory.fillDefaults().numColumns(2).equalWidth(false).applyTo(commonsearchComposite);
  TacitFormComposite.createEmptyRow(toolkit,searchComposite);
  Group filterResultsGroup=new Group(searchComposite,SWT.LEFT);
  GridDataFactory.fillDefaults().grab(true,false).span(1,0).applyTo(filterResultsGroup);
  GridLayoutFactory.fillDefaults().numColumns(2).equalWidth(false).applyTo(filterResultsGroup);
  filterResultsGroup.setText(""String_Node_Str"");
  TacitFormComposite.createEmptyRow(toolkit,filterResultsGroup);
  TacitFormComposite.createEmptyRow(toolkit,searchComposite);
  final Label searchLabel1=new Label(commonsearchComposite,SWT.NONE);
  searchLabel1.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(searchLabel1);
  searchText1=new Text(commonsearchComposite,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).applyTo(searchText1);
  searchText1.setMessage(""String_Node_Str"");
  Group operatorButtonComposite=new Group(commonsearchComposite,SWT.LEFT);
  GridDataFactory.fillDefaults().span(3,0).indent(0,10).applyTo(operatorButtonComposite);
  GridLayout operatorLayout=new GridLayout();
  operatorLayout.numColumns=3;
  operatorButtonComposite.setLayout(operatorLayout);
  andButton=new Button(operatorButtonComposite,SWT.RADIO);
  andButton.setText(""String_Node_Str"");
  andButton.setSelection(true);
  orButton=new Button(operatorButtonComposite,SWT.RADIO);
  orButton.setText(""String_Node_Str"");
  orButton.setSelection(false);
  notButton=new Button(operatorButtonComposite,SWT.RADIO);
  notButton.setText(""String_Node_Str"");
  notButton.setSelection(false);
  TacitFormComposite.createEmptyRow(toolkit,commonsearchComposite);
  final Label searchLabel2=new Label(commonsearchComposite,SWT.NONE);
  searchLabel2.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(searchLabel2);
  searchText2=new Text(commonsearchComposite,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).applyTo(searchText2);
  searchText2.setMessage(""String_Node_Str"");
  dateCheckSearch=new Button(filterResultsGroup,SWT.RADIO);
  GridDataFactory.fillDefaults().grab(true,false).span(1,0).indent(10,0).applyTo(dateCheckSearch);
  dateCheckSearch.setText(""String_Node_Str"");
  dateCheckBrowse=new Button(filterResultsGroup,SWT.RADIO);
  GridDataFactory.fillDefaults().grab(true,false).span(1,0).applyTo(dateCheckBrowse);
  dateCheckBrowse.setText(""String_Node_Str"");
  Composite dateComposite1=new Composite(filterResultsGroup,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(4).equalWidth(false).applyTo(dateComposite1);
  GridDataFactory.fillDefaults().grab(true,false).span(1,0).indent(0,10).applyTo(dateComposite1);
  final Label fromLabel=new Label(dateComposite1,SWT.NONE);
  fromLabel.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).indent(10,0).span(1,0).applyTo(fromLabel);
  fromDate=new DateTime(dateComposite1,SWT.DATE | SWT.DROP_DOWN | SWT.BORDER);
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(fromDate);
  fromLabel.setEnabled(false);
  fromDate.setEnabled(false);
  final Label toLabel=new Label(dateComposite1,SWT.NONE);
  toLabel.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).indent(10,0).span(1,0).applyTo(toLabel);
  toDate=new DateTime(dateComposite1,SWT.DATE | SWT.DROP_DOWN | SWT.BORDER);
  GridDataFactory.fillDefaults().grab(false,false).indent(15,0).span(1,0).applyTo(toDate);
  toLabel.setEnabled(false);
  toDate.setEnabled(false);
  Composite dateComposite3=new Composite(filterResultsGroup,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(2).equalWidth(false).applyTo(dateComposite3);
  GridDataFactory.fillDefaults().grab(true,false).span(1,0).indent(0,10).applyTo(dateComposite3);
  final Composite dateHolder3=new Composite(dateComposite3,SWT.None);
  GridDataFactory.fillDefaults().grab(false,false).span(2,1).applyTo(dateHolder3);
  GridLayoutFactory.fillDefaults().numColumns(4).equalWidth(true).applyTo(dateHolder3);
  Composite comboComposite1=new Composite(filterResultsGroup,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(4).equalWidth(false).applyTo(comboComposite1);
  GridDataFactory.fillDefaults().grab(true,false).indent(10,10).span(1,0).applyTo(comboComposite1);
  Label selectPresidentSearchLabel=new Label(comboComposite1,SWT.NONE);
  selectPresidentSearchLabel.setText(""String_Node_Str"");
  selectPresidentSearch=new Combo(comboComposite1,SWT.FLAT | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,false).indent(10,0).span(1,0).applyTo(selectPresidentSearch);
  selectPresidentSearch.setItems(presidentNames);
  selectPresidentSearch.select(0);
  dateCheckSearch.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (dateCheckSearch.getSelection()) {
        dateCheckBrowse.setSelection(false);
        fromDate.setEnabled(true);
        toDate.setEnabled(true);
        fromLabel.setEnabled(true);
        toLabel.setEnabled(true);
        dateHolder3.setEnabled(false);
        searchLabel1.setEnabled(true);
        searchLabel2.setEnabled(true);
        searchText1.setEnabled(true);
        searchText2.setEnabled(true);
        andButton.setEnabled(true);
        orButton.setEnabled(true);
        notButton.setEnabled(true);
      }
 else {
        fromDate.setEnabled(false);
        toDate.setEnabled(false);
        fromLabel.setEnabled(false);
        toLabel.setEnabled(false);
      }
    }
  }
);
  dateCheckBrowse.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (dateCheckBrowse.getSelection()) {
        browseDay.setEnabled(true);
        browseMonth.setEnabled(true);
        browseYear.setEnabled(true);
        dateCheckSearch.setSelection(false);
        fromDate.setEnabled(false);
        toDate.setEnabled(false);
        fromLabel.setEnabled(false);
        toLabel.setEnabled(false);
        dateHolder3.setEnabled(true);
        searchText1.setEnabled(false);
        searchText2.setEnabled(false);
        searchLabel1.setEnabled(false);
        searchLabel2.setEnabled(false);
        andButton.setEnabled(false);
        orButton.setEnabled(false);
        notButton.setEnabled(false);
      }
 else {
        browseDay.setEnabled(false);
        browseMonth.setEnabled(false);
        browseYear.setEnabled(false);
        dateHolder3.setEnabled(false);
        commonsearchComposite.setEnabled(true);
        searchText1.setEnabled(true);
        searchText2.setEnabled(true);
        searchLabel1.setEnabled(true);
        searchLabel2.setEnabled(true);
        andButton.setEnabled(true);
        orButton.setEnabled(true);
        notButton.setEnabled(true);
      }
    }
  }
);
  Composite comboComposite2=new Composite(filterResultsGroup,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(4).equalWidth(false).applyTo(comboComposite2);
  GridDataFactory.fillDefaults().grab(true,false).indent(10,10).span(1,0).applyTo(comboComposite2);
  Label documentCategory=new Label(comboComposite2,SWT.NONE);
  documentCategory.setText(""String_Node_Str"");
  selectDocumentSearch=new Combo(comboComposite2,SWT.FLAT | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,false).span(1,0).applyTo(selectDocumentSearch);
  selectDocumentSearch.setItems(documentTypes);
  selectDocumentSearch.select(0);
  TacitFormComposite.createEmptyRow(toolkit,filterResultsGroup);
  browseMonth=new Combo(dateHolder3,SWT.FLAT | SWT.READ_ONLY);
  browseMonth.setItems(months);
  browseMonth.select(0);
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(browseMonth);
  browseDay=new Combo(dateHolder3,SWT.FLAT | SWT.READ_ONLY);
  browseDay.setItems(days);
  browseDay.select(0);
  GridDataFactory.fillDefaults().grab(false,false).indent(10,0).span(1,0).applyTo(browseDay);
  browseYear=new Combo(dateHolder3,SWT.FLAT | SWT.READ_ONLY);
  browseYear.setItems(years);
  browseYear.select(0);
  GridDataFactory.fillDefaults().grab(false,false).indent(10,0).span(1,0).applyTo(browseYear);
  browseDay.setEnabled(false);
  browseMonth.setEnabled(false);
  browseYear.setEnabled(false);
}","private void createCrawlInputParameters(final FormToolkit toolkit,final Composite parent){
  Section inputParamsSection=toolkit.createSection(parent,Section.TITLE_BAR | Section.EXPANDED | Section.DESCRIPTION);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(inputParamsSection);
  GridLayoutFactory.fillDefaults().numColumns(2).applyTo(inputParamsSection);
  inputParamsSection.setText(""String_Node_Str"");
  ScrolledComposite sc=new ScrolledComposite(inputParamsSection,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  sc.setExpandHorizontal(true);
  sc.setExpandVertical(true);
  GridLayoutFactory.fillDefaults().numColumns(2).equalWidth(false).applyTo(sc);
  Composite mainComposite=toolkit.createComposite(inputParamsSection);
  sc.setContent(mainComposite);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(sc);
  GridLayoutFactory.fillDefaults().numColumns(2).equalWidth(false).applyTo(mainComposite);
  inputParamsSection.setClient(mainComposite);
  searchComposite=toolkit.createComposite(mainComposite);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).applyTo(searchComposite);
  GridLayoutFactory.fillDefaults().equalWidth(true).applyTo(searchComposite);
  commonsearchComposite=toolkit.createComposite(searchComposite);
  GridDataFactory.fillDefaults().grab(true,false).span(1,0).applyTo(commonsearchComposite);
  GridLayoutFactory.fillDefaults().numColumns(2).equalWidth(false).applyTo(commonsearchComposite);
  TacitFormComposite.createEmptyRow(toolkit,searchComposite);
  Group filterResultsGroup=new Group(searchComposite,SWT.LEFT);
  GridDataFactory.fillDefaults().grab(true,false).span(1,0).applyTo(filterResultsGroup);
  GridLayoutFactory.fillDefaults().numColumns(2).equalWidth(false).applyTo(filterResultsGroup);
  filterResultsGroup.setText(""String_Node_Str"");
  TacitFormComposite.createEmptyRow(toolkit,filterResultsGroup);
  TacitFormComposite.createEmptyRow(toolkit,searchComposite);
  final Label searchLabel1=new Label(commonsearchComposite,SWT.NONE);
  searchLabel1.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(searchLabel1);
  searchText1=new Text(commonsearchComposite,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).applyTo(searchText1);
  searchText1.setMessage(""String_Node_Str"");
  Group operatorButtonComposite=new Group(commonsearchComposite,SWT.LEFT);
  GridDataFactory.fillDefaults().span(3,0).indent(0,10).applyTo(operatorButtonComposite);
  GridLayout operatorLayout=new GridLayout();
  operatorLayout.numColumns=3;
  operatorButtonComposite.setLayout(operatorLayout);
  andButton=new Button(operatorButtonComposite,SWT.RADIO);
  andButton.setText(""String_Node_Str"");
  andButton.setSelection(true);
  orButton=new Button(operatorButtonComposite,SWT.RADIO);
  orButton.setText(""String_Node_Str"");
  orButton.setSelection(false);
  notButton=new Button(operatorButtonComposite,SWT.RADIO);
  notButton.setText(""String_Node_Str"");
  notButton.setSelection(false);
  TacitFormComposite.createEmptyRow(toolkit,commonsearchComposite);
  final Label searchLabel2=new Label(commonsearchComposite,SWT.NONE);
  searchLabel2.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(searchLabel2);
  searchText2=new Text(commonsearchComposite,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).applyTo(searchText2);
  searchText2.setMessage(""String_Node_Str"");
  dateCheckSearch=new Button(filterResultsGroup,SWT.CHECK);
  GridDataFactory.fillDefaults().grab(true,false).span(1,0).indent(10,0).applyTo(dateCheckSearch);
  dateCheckSearch.setText(""String_Node_Str"");
  dateCheckBrowse=new Button(filterResultsGroup,SWT.CHECK);
  GridDataFactory.fillDefaults().grab(true,false).span(1,0).applyTo(dateCheckBrowse);
  dateCheckBrowse.setText(""String_Node_Str"");
  Composite dateComposite1=new Composite(filterResultsGroup,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(4).equalWidth(false).applyTo(dateComposite1);
  GridDataFactory.fillDefaults().grab(true,false).span(1,0).indent(0,10).applyTo(dateComposite1);
  final Label fromLabel=new Label(dateComposite1,SWT.NONE);
  fromLabel.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).indent(10,0).span(1,0).applyTo(fromLabel);
  fromDate=new DateTime(dateComposite1,SWT.DATE | SWT.DROP_DOWN | SWT.BORDER);
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(fromDate);
  fromLabel.setEnabled(false);
  fromDate.setEnabled(false);
  final Label toLabel=new Label(dateComposite1,SWT.NONE);
  toLabel.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).indent(10,0).span(1,0).applyTo(toLabel);
  toDate=new DateTime(dateComposite1,SWT.DATE | SWT.DROP_DOWN | SWT.BORDER);
  GridDataFactory.fillDefaults().grab(false,false).indent(15,0).span(1,0).applyTo(toDate);
  toLabel.setEnabled(false);
  toDate.setEnabled(false);
  Composite dateComposite3=new Composite(filterResultsGroup,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(2).equalWidth(false).applyTo(dateComposite3);
  GridDataFactory.fillDefaults().grab(true,false).span(1,0).indent(0,10).applyTo(dateComposite3);
  final Composite dateHolder3=new Composite(dateComposite3,SWT.None);
  GridDataFactory.fillDefaults().grab(false,false).span(2,1).applyTo(dateHolder3);
  GridLayoutFactory.fillDefaults().numColumns(4).equalWidth(true).applyTo(dateHolder3);
  Composite comboComposite1=new Composite(filterResultsGroup,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(4).equalWidth(false).applyTo(comboComposite1);
  GridDataFactory.fillDefaults().grab(true,false).indent(10,10).span(1,0).applyTo(comboComposite1);
  Label selectPresidentSearchLabel=new Label(comboComposite1,SWT.NONE);
  selectPresidentSearchLabel.setText(""String_Node_Str"");
  selectPresidentSearch=new Combo(comboComposite1,SWT.FLAT | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,false).indent(10,0).span(1,0).applyTo(selectPresidentSearch);
  selectPresidentSearch.setItems(presidentNames);
  selectPresidentSearch.select(0);
  dateCheckSearch.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (dateCheckSearch.getSelection()) {
        dateCheckBrowse.setSelection(false);
        fromDate.setEnabled(true);
        toDate.setEnabled(true);
        fromLabel.setEnabled(true);
        toLabel.setEnabled(true);
        dateHolder3.setEnabled(false);
        searchLabel1.setEnabled(true);
        searchLabel2.setEnabled(true);
        searchText1.setEnabled(true);
        searchText2.setEnabled(true);
        andButton.setEnabled(true);
        orButton.setEnabled(true);
        notButton.setEnabled(true);
      }
 else {
        fromDate.setEnabled(false);
        toDate.setEnabled(false);
        fromLabel.setEnabled(false);
        toLabel.setEnabled(false);
      }
    }
  }
);
  dateCheckBrowse.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (dateCheckBrowse.getSelection()) {
        browseDay.setEnabled(true);
        browseMonth.setEnabled(true);
        browseYear.setEnabled(true);
        dateCheckSearch.setSelection(false);
        fromDate.setEnabled(false);
        toDate.setEnabled(false);
        fromLabel.setEnabled(false);
        toLabel.setEnabled(false);
        dateHolder3.setEnabled(true);
        searchText1.setEnabled(false);
        searchText2.setEnabled(false);
        searchLabel1.setEnabled(false);
        searchLabel2.setEnabled(false);
        andButton.setEnabled(false);
        orButton.setEnabled(false);
        notButton.setEnabled(false);
      }
 else {
        browseDay.setEnabled(false);
        browseMonth.setEnabled(false);
        browseYear.setEnabled(false);
        dateHolder3.setEnabled(false);
        commonsearchComposite.setEnabled(true);
        searchText1.setEnabled(true);
        searchText2.setEnabled(true);
        searchLabel1.setEnabled(true);
        searchLabel2.setEnabled(true);
        andButton.setEnabled(true);
        orButton.setEnabled(true);
        notButton.setEnabled(true);
      }
    }
  }
);
  Composite comboComposite2=new Composite(filterResultsGroup,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(4).equalWidth(false).applyTo(comboComposite2);
  GridDataFactory.fillDefaults().grab(true,false).indent(10,10).span(1,0).applyTo(comboComposite2);
  Label documentCategory=new Label(comboComposite2,SWT.NONE);
  documentCategory.setText(""String_Node_Str"");
  selectDocumentSearch=new Combo(comboComposite2,SWT.FLAT | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,false).span(1,0).applyTo(selectDocumentSearch);
  selectDocumentSearch.setItems(documentTypes);
  selectDocumentSearch.select(0);
  TacitFormComposite.createEmptyRow(toolkit,filterResultsGroup);
  browseMonth=new Combo(dateHolder3,SWT.FLAT | SWT.READ_ONLY);
  browseMonth.setItems(months);
  browseMonth.select(0);
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(browseMonth);
  browseDay=new Combo(dateHolder3,SWT.FLAT | SWT.READ_ONLY);
  browseDay.setItems(days);
  browseDay.select(0);
  GridDataFactory.fillDefaults().grab(false,false).indent(10,0).span(1,0).applyTo(browseDay);
  browseYear=new Combo(dateHolder3,SWT.FLAT | SWT.READ_ONLY);
  browseYear.setItems(years);
  browseYear.select(0);
  GridDataFactory.fillDefaults().grab(false,false).indent(10,0).span(1,0).applyTo(browseYear);
  browseDay.setEnabled(false);
  browseMonth.setEnabled(false);
  browseYear.setEnabled(false);
}",0.9989608230281616
168084,"public void crawlSearch(String outputDir,String searchTerm1,String searchTerm2,String operator,Calendar from,Calendar to,String presidentName,String documentCategory,IProgressMonitor monitor) throws IOException {
  this.outputDir=outputDir;
  setDir();
  Elements elements=null;
  Connection conn=Jsoup.connect(""String_Node_Str"").data(""String_Node_Str"",searchTerm1).data(""String_Node_Str"",operator).data(""String_Node_Str"",searchTerm2).data(""String_Node_Str"",documentCategory).data(""String_Node_Str"",presidentName);
  int progressMonitorIncrement=890;
  if (from != null) {
    conn=conn.data(""String_Node_Str"",months[from.get(Calendar.MONTH)]).data(""String_Node_Str"",days[from.get(Calendar.DATE) - 1]).data(""String_Node_Str"",from.get(Calendar.YEAR) + ""String_Node_Str"").data(""String_Node_Str"",months[to.get(Calendar.MONTH)]).data(""String_Node_Str"",days[to.get(Calendar.DATE) - 1]).data(""String_Node_Str"",to.get(Calendar.YEAR) + ""String_Node_Str"");
    conn.timeout(120000);
    Document e=conn.post();
    Element et=e.body().child(0).child(0).child(1).child(0).child(0).child(0).child(0).child(1);
    elements=et.child(2).child(0).children();
  }
 else {
    Element e=conn.post().body().child(0).child(0).child(1).child(0).child(0).child(0).child(0);
    elements=e.child(1).child(2).child(0).children();
  }
  if (elements != null && elements.size() != 0) {
    progressMonitorIncrement=980 / (elements.size());
    elements.remove(0);
    for (    Element element : elements) {
      try {
        strDate=element.child(0).text();
        strName=element.child(1).text();
        strTitle=element.child(3).child(0).child(0).text();
        extractInfo(element.child(3).child(0).child(0).attr(""String_Node_Str""));
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"");
      }
      monitor.worked(progressMonitorIncrement);
    }
  }
  try {
    jsonGenerator.writeEndArray();
    jsonGenerator.flush();
    jsonGenerator.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void crawlSearch(String outputDir,String searchTerm1,String searchTerm2,String operator,Calendar from,Calendar to,String presidentName,String documentCategory,IProgressMonitor monitor) throws IOException {
  this.outputDir=outputDir;
  setDir();
  Elements elements=null;
  Connection conn=Jsoup.connect(""String_Node_Str"").data(""String_Node_Str"",documentCategory).data(""String_Node_Str"",presidentName);
  int progressMonitorIncrement=890;
  if (!searchTerm1.equals(""String_Node_Str"")) {
    conn=conn.data(""String_Node_Str"",searchTerm1).data(""String_Node_Str"",operator).data(""String_Node_Str"",searchTerm2);
  }
  if (from != null) {
    conn=conn.data(""String_Node_Str"",months[from.get(Calendar.MONTH)]).data(""String_Node_Str"",days[from.get(Calendar.DATE) - 1]).data(""String_Node_Str"",from.get(Calendar.YEAR) + ""String_Node_Str"").data(""String_Node_Str"",months[to.get(Calendar.MONTH)]).data(""String_Node_Str"",days[to.get(Calendar.DATE) - 1]).data(""String_Node_Str"",to.get(Calendar.YEAR) + ""String_Node_Str"");
    conn.timeout(120000);
    Document e=conn.post();
    Element et=e.body().child(0).child(0).child(1).child(0).child(0).child(0).child(0).child(1);
    elements=et.child(2).child(0).children();
  }
 else {
    Element e=conn.post().body().child(0).child(0).child(1).child(0).child(0).child(0).child(0).child(1);
    conn.timeout(120000);
    if (!searchTerm1.equals(""String_Node_Str"")) {
      elements=e.child(2).child(0).children();
    }
 else {
      elements=e.child(1).child(0).children();
    }
  }
  if (elements != null && elements.size() != 0) {
    progressMonitorIncrement=980 / (elements.size());
    elements.remove(0);
    for (    Element element : elements) {
      try {
        strDate=element.child(0).text();
        strName=element.child(1).text();
        strTitle=element.child(3).child(0).child(0).text();
        extractInfo(element.child(3).child(0).child(0).attr(""String_Node_Str""));
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"");
      }
      monitor.worked(progressMonitorIncrement);
    }
  }
  try {
    jsonGenerator.writeEndArray();
    jsonGenerator.flush();
    jsonGenerator.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.8893058161350844
168085,"private void deleteFiles(String outputPath){
  File toDel=new File(outputPath + ""String_Node_Str"");
  toDel.delete();
  toDel=new File(outputPath + ""String_Node_Str"");
  toDel.delete();
  toDel=new File(outputPath + ""String_Node_Str"");
  toDel.delete();
  toDel=new File(outputPath + ""String_Node_Str"");
  toDel.delete();
  toDel=new File(outputPath + ""String_Node_Str"");
  toDel.delete();
  toDel=new File(outputPath + ""String_Node_Str"");
  toDel.delete();
}","private void deleteFiles(String outputPath){
  File toDel=new File(outputPath + ""String_Node_Str"");
  toDel.delete();
  toDel=new File(outputPath + ""String_Node_Str"");
  toDel.delete();
  toDel=new File(outputPath + ""String_Node_Str"");
  toDel.delete();
  toDel=new File(outputPath + ""String_Node_Str"");
  toDel.delete();
  toDel=new File(outputPath + ""String_Node_Str"");
  toDel.delete();
}",0.92
168086,"private boolean canProceedCluster(){
  TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
  boolean canProceed=true;
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  String message=OutputPathValidation.getInstance().validateOutputDirectory(layoutData.getOutputLabel().getText(),""String_Node_Str"");
  if (message != null) {
    message=layoutData.getOutputLabel().getText() + ""String_Node_Str"" + message;
    form.getMessageManager().addMessage(""String_Node_Str"",message,null,IMessageProvider.ERROR);
    canProceed=false;
  }
  if (inputLayoutData.getSelectedFiles().size() < 1) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    canProceed=false;
  }
  if (numberOfTopics.getText().isEmpty() || Integer.parseInt(numberOfTopics.getText()) < 1) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    canProceed=false;
  }
  pValueTxt.getText();
  try {
    Integer.parseInt(minCountTxt.getText().trim());
  }
 catch (  Exception e) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    minCountTxt.setText(""String_Node_Str"");
    canProceed=false;
  }
  try {
    Double.parseDouble(pValueTxt.getText().trim());
  }
 catch (  Exception e) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    pValueTxt.setText(""String_Node_Str"");
    canProceed=false;
  }
  usePerm.getSelection();
  return canProceed;
}","private boolean canProceedCluster(){
  TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
  boolean canProceed=true;
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  String message=OutputPathValidation.getInstance().validateOutputDirectory(layoutData.getOutputLabel().getText(),""String_Node_Str"");
  if (message != null) {
    message=layoutData.getOutputLabel().getText() + ""String_Node_Str"" + message;
    form.getMessageManager().addMessage(""String_Node_Str"",message,null,IMessageProvider.ERROR);
    canProceed=false;
  }
  if (inputLayoutData.getSelectedFiles().size() < 1) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    canProceed=false;
  }
  if (numberOfTopics.getText().isEmpty() || Integer.parseInt(numberOfTopics.getText()) < 1) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    canProceed=false;
  }
  pValueTxt.getText();
  try {
    Integer.parseInt(minCountTxt.getText().trim());
  }
 catch (  Exception e) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    minCountTxt.setText(""String_Node_Str"");
    canProceed=false;
  }
  try {
    Double.parseDouble(pValueTxt.getText().trim());
  }
 catch (  Exception e) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    pValueTxt.setText(""String_Node_Str"");
    canProceed=false;
  }
  usePerm.getSelection();
  return canProceed;
}",0.9834733134651856
168087,"private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (TurboTopicsModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      if (!canProceedCluster()) {
        return;
      }
      final int noOfTopics=Integer.valueOf(numberOfTopics.getText()).intValue();
      final int minCount=Integer.parseInt(minCountTxt.getText());
      final double pValue=Double.parseDouble(pValueTxt.getText());
      final boolean usePermBool=usePerm.getSelection();
      final boolean isPreprocess=preprocessEnabled.getSelection();
      final String outputPath=layoutData.getOutputLabel().getText();
      TacitUtil tacitHelper=new TacitUtil();
      final List<Object> selectedFiles=inputLayoutData.getSelectedFiles();
      tacitHelper.writeSummaryFile(outputPath);
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          String topicModelDirPath=System.getProperty(""String_Node_Str"") + File.separator + ""String_Node_Str""+ ""String_Node_Str""+ String.valueOf(System.currentTimeMillis());
          Preprocessor ppObj=null;
          List<String> inFiles;
          try {
            ppObj=new Preprocessor(""String_Node_Str"",isPreprocess);
            inFiles=ppObj.processData(""String_Node_Str"",selectedFiles);
            for (            String filename : inFiles) {
              File srcFile=new File(filename);
              File destDir=new File(topicModelDirPath);
              try {
                FileUtils.copyFileToDirectory(srcFile,destDir,false);
              }
 catch (              IOException e) {
                e.printStackTrace();
                return Status.CANCEL_STATUS;
              }
            }
          }
 catch (          IOException e1) {
            e1.printStackTrace();
            return Status.CANCEL_STATUS;
          }
catch (          Exception e1) {
            e1.printStackTrace();
            return Status.CANCEL_STATUS;
          }
          lda.initialize(topicModelDirPath,noOfTopics,topicModelDirPath,true);
          long startTime=System.currentTimeMillis();
          Date dateObj=new Date();
          monitor.subTask(""String_Node_Str"");
          try {
            lda.doLDA(monitor,dateObj);
          }
 catch (          FileNotFoundException e) {
            e.printStackTrace();
            monitor.done();
            return Status.CANCEL_STATUS;
          }
catch (          IOException e) {
            e.printStackTrace();
            monitor.done();
            return Status.CANCEL_STATUS;
          }
          monitor.worked(20);
          if (monitor.isCanceled()) {
            return Status.CANCEL_STATUS;
          }
          ConsoleView.printlInConsoleln(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
          FileWriter fw=null;
          String corpusFile=topicModelDirPath + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
          try {
            fw=new FileWriter(corpusFile);
            for (            String file : inFiles) {
              String text=new String(Files.readAllBytes(Paths.get(file)),StandardCharsets.UTF_8);
              fw.write(text.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
            }
            fw.close();
          }
 catch (          IOException e3) {
          }
          String wordWeightsFile=topicModelDirPath + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
          String vocabFile=topicModelDirPath + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
          HashMap<String,Integer> vocab=new HashMap<String,Integer>();
          BufferedReader br=null;
          try {
            br=new BufferedReader(new FileReader(wordWeightsFile));
            fw=new FileWriter(vocabFile);
            String line=""String_Node_Str"";
            while ((line=br.readLine()) != null) {
              vocab.put(line.split(""String_Node_Str"")[1],1);
            }
            br.close();
            String vocabKeys[]=vocab.keySet().toArray(new String[1]);
            Arrays.sort(vocabKeys);
            for (            String word : vocabKeys) {
              fw.write(word + ""String_Node_Str"");
            }
            ;
            fw.close();
          }
 catch (          IOException e3) {
          }
          String wordTopicFile=topicModelDirPath + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
          try {
            HashMap<String,Double> currAssign=null;
            HashMap<String,Integer> vocabMap=new HashMap<String,Integer>();
            int count=0;
            HashMap<String,HashMap<String,Double>> wordTopic=new HashMap<String,HashMap<String,Double>>();
            br=new BufferedReader(new FileReader(wordWeightsFile));
            String line=""String_Node_Str"";
            while ((line=br.readLine()) != null) {
              String components[]=line.split(""String_Node_Str"");
              int topic=Integer.parseInt(components[0]);
              String word=components[1];
              double weight=Double.parseDouble(components[2]);
              currAssign=wordTopic.get(word) != null ? wordTopic.get(word) : new HashMap<String,Double>();
              double currWeight=currAssign.get(""String_Node_Str"") != null ? currAssign.get(""String_Node_Str"") : 0.0;
              if (currWeight < weight) {
                HashMap<String,Double> map=new HashMap<String,Double>();
                map.put(""String_Node_Str"",topic + 0.0);
                map.put(""String_Node_Str"",weight);
                wordTopic.put(word,map);
              }
            }
            br.close();
            String topicKeys[]=wordTopic.keySet().toArray(new String[1]);
            Arrays.sort(topicKeys);
            for (            String word : topicKeys) {
              vocabMap.put(word,count);
              count=count + 1;
            }
            fw=new FileWriter(wordTopicFile);
            br=new BufferedReader(new FileReader(corpusFile));
            int i=0;
            while ((line=br.readLine()) != null) {
              String outputStr=i + ""String_Node_Str"";
              for (              String word : line.split(""String_Node_Str"")) {
                if (vocabMap.containsKey(word) && wordTopic.containsKey(word))                 outputStr=outputStr + ""String_Node_Str"" + vocabMap.get(word)+ ""String_Node_Str""+ (int)Double.parseDouble(wordTopic.get(word).get(""String_Node_Str"") + ""String_Node_Str"");
              }
              ;
              i+=1;
              fw.write(outputStr + ""String_Node_Str"");
            }
            fw.close();
            br.close();
          }
 catch (          IOException e3) {
            e3.printStackTrace();
          }
          LDAtopics lda=new LDAtopics(corpusFile,wordTopicFile,vocabFile,outputPath,noOfTopics,minCount,pValue,usePermBool);
          try {
            lda.generateTurboTopics();
          }
 catch (          Exception e1) {
            e1.printStackTrace();
          }
          ppObj.clean();
          try {
            FileUtils.deleteDirectory(new File(topicModelDirPath));
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
          monitor.worked(10);
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      if (canProceedCluster()) {
        job.schedule();
        job.addJobChangeListener(new JobChangeAdapter(){
          @Override public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
          }
        }
);
      }
 else {
        TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (TurboTopicsModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}","private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (TurboTopicsModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      if (!canProceedCluster()) {
        return;
      }
      final int noOfTopics=Integer.valueOf(numberOfTopics.getText()).intValue();
      final int minCount=Integer.parseInt(minCountTxt.getText());
      final double pValue=Double.parseDouble(pValueTxt.getText());
      final boolean usePermBool=usePerm.getSelection();
      final boolean isPreprocess=preprocessEnabled.getSelection();
      final String outputPath=layoutData.getOutputLabel().getText();
      TacitUtil tacitHelper=new TacitUtil();
      final List<Object> selectedFiles=inputLayoutData.getSelectedFiles();
      lda=new LdaAnalysis(){
        @Override protected void createRunReport(        Date date){
        }
      }
;
      tacitHelper.writeSummaryFile(outputPath);
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          String topicModelDirPath=System.getProperty(""String_Node_Str"") + File.separator + ""String_Node_Str""+ ""String_Node_Str""+ String.valueOf(System.currentTimeMillis());
          Preprocessor ppObj=null;
          List<String> inFiles;
          try {
            ppObj=new Preprocessor(""String_Node_Str"",isPreprocess);
            inFiles=ppObj.processData(""String_Node_Str"",selectedFiles);
            for (            String filename : inFiles) {
              File srcFile=new File(filename);
              File destDir=new File(topicModelDirPath);
              try {
                FileUtils.copyFileToDirectory(srcFile,destDir,false);
              }
 catch (              IOException e) {
                e.printStackTrace();
                return Status.CANCEL_STATUS;
              }
            }
          }
 catch (          IOException e1) {
            e1.printStackTrace();
            return Status.CANCEL_STATUS;
          }
catch (          Exception e1) {
            e1.printStackTrace();
            return Status.CANCEL_STATUS;
          }
          lda.initialize(topicModelDirPath,noOfTopics,topicModelDirPath,true);
          long startTime=System.currentTimeMillis();
          Date dateObj=new Date();
          monitor.subTask(""String_Node_Str"");
          try {
            lda.doLDA(monitor,dateObj);
          }
 catch (          FileNotFoundException e) {
            e.printStackTrace();
            monitor.done();
            return Status.CANCEL_STATUS;
          }
catch (          IOException e) {
            e.printStackTrace();
            monitor.done();
            return Status.CANCEL_STATUS;
          }
          monitor.worked(20);
          if (monitor.isCanceled()) {
            return Status.CANCEL_STATUS;
          }
          FileWriter fw=null;
          String corpusFile=topicModelDirPath + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
          try {
            fw=new FileWriter(corpusFile);
            for (            String file : inFiles) {
              String text=new String(Files.readAllBytes(Paths.get(file)),StandardCharsets.UTF_8);
              fw.write(text.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
            }
            fw.close();
          }
 catch (          IOException e3) {
          }
          String wordWeightsFile=topicModelDirPath + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
          String vocabFile=topicModelDirPath + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
          HashMap<String,Integer> vocab=new HashMap<String,Integer>();
          BufferedReader br=null;
          try {
            br=new BufferedReader(new FileReader(wordWeightsFile));
            fw=new FileWriter(vocabFile);
            String line=""String_Node_Str"";
            while ((line=br.readLine()) != null) {
              vocab.put(line.split(""String_Node_Str"")[1],1);
            }
            br.close();
            String vocabKeys[]=vocab.keySet().toArray(new String[1]);
            Arrays.sort(vocabKeys);
            for (            String word : vocabKeys) {
              fw.write(word + ""String_Node_Str"");
            }
            ;
            fw.close();
          }
 catch (          IOException e3) {
          }
          String wordTopicFile=topicModelDirPath + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
          try {
            HashMap<String,Double> currAssign=null;
            HashMap<String,Integer> vocabMap=new HashMap<String,Integer>();
            int count=0;
            HashMap<String,HashMap<String,Double>> wordTopic=new HashMap<String,HashMap<String,Double>>();
            br=new BufferedReader(new FileReader(wordWeightsFile));
            String line=""String_Node_Str"";
            while ((line=br.readLine()) != null) {
              String components[]=line.split(""String_Node_Str"");
              int topic=Integer.parseInt(components[0]);
              String word=components[1];
              double weight=Double.parseDouble(components[2]);
              currAssign=wordTopic.get(word) != null ? wordTopic.get(word) : new HashMap<String,Double>();
              double currWeight=currAssign.get(""String_Node_Str"") != null ? currAssign.get(""String_Node_Str"") : 0.0;
              if (currWeight < weight) {
                HashMap<String,Double> map=new HashMap<String,Double>();
                map.put(""String_Node_Str"",topic + 0.0);
                map.put(""String_Node_Str"",weight);
                wordTopic.put(word,map);
              }
            }
            br.close();
            String topicKeys[]=wordTopic.keySet().toArray(new String[1]);
            Arrays.sort(topicKeys);
            for (            String word : topicKeys) {
              vocabMap.put(word,count);
              count=count + 1;
            }
            fw=new FileWriter(wordTopicFile);
            br=new BufferedReader(new FileReader(corpusFile));
            int i=0;
            while ((line=br.readLine()) != null) {
              String outputStr=i + ""String_Node_Str"";
              for (              String word : line.split(""String_Node_Str"")) {
                if (vocabMap.containsKey(word) && wordTopic.containsKey(word))                 outputStr=outputStr + ""String_Node_Str"" + vocabMap.get(word)+ ""String_Node_Str""+ (int)Double.parseDouble(wordTopic.get(word).get(""String_Node_Str"") + ""String_Node_Str"");
              }
              ;
              i+=1;
              fw.write(outputStr + ""String_Node_Str"");
            }
            fw.close();
            br.close();
          }
 catch (          IOException e3) {
            e3.printStackTrace();
          }
          LDAtopics lda=new LDAtopics(corpusFile,wordTopicFile,vocabFile,outputPath,noOfTopics,minCount,pValue,usePermBool);
          try {
            lda.generateTurboTopics();
          }
 catch (          Exception e1) {
            e1.printStackTrace();
          }
          ppObj.clean();
          try {
            FileUtils.deleteDirectory(new File(topicModelDirPath));
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
          monitor.worked(10);
          monitor.done();
          ConsoleView.printlInConsoleln(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      if (canProceedCluster()) {
        job.schedule();
        job.addJobChangeListener(new JobChangeAdapter(){
          @Override public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
          }
        }
);
      }
 else {
        TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (TurboTopicsModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}",0.980385817437224
168088,"private boolean canProceed(){
  TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
  boolean canPerform=true;
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  String message=OutputPathValidation.getInstance().validateOutputDirectory(layoutData.getOutputLabel().getText(),""String_Node_Str"");
  if (message != null) {
    message=layoutData.getOutputLabel().getText() + ""String_Node_Str"" + message;
    form.getMessageManager().addMessage(""String_Node_Str"",message,null,IMessageProvider.ERROR);
    canPerform=false;
  }
  try {
    if (inputLayoutData.getTypeCheckedSelectedFiles(checkType).size() < 1) {
      form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
      canPerform=false;
    }
  }
 catch (  Exception e) {
    canPerform=false;
  }
  try {
    if (dictLayoutData.getTypeCheckedSelectedFiles(checkType).size() < 1) {
      form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
      canPerform=false;
    }
  }
 catch (  Exception e) {
    canPerform=false;
  }
  return canPerform;
}","private boolean canProceed(){
  TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  String message=OutputPathValidation.getInstance().validateOutputDirectory(layoutData.getOutputLabel().getText(),""String_Node_Str"");
  if (message != null) {
    message=layoutData.getOutputLabel().getText() + ""String_Node_Str"" + message;
    form.getMessageManager().addMessage(""String_Node_Str"",message,null,IMessageProvider.ERROR);
    return false;
  }
  try {
    if (inputLayoutData.getTypeCheckedSelectedFiles(checkType).size() < 1) {
      form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
      return false;
    }
  }
 catch (  Exception e) {
    return false;
  }
  try {
    if (dictLayoutData.getTypeCheckedSelectedFiles(checkType).size() < 1) {
      form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
      return false;
    }
  }
 catch (  Exception e) {
    return false;
  }
  try {
    List<Object> dictPaths=dictLayoutData.getTypeCheckedSelectedFiles(checkType);
    Iterator<Object> dictPathIterator=dictPaths.iterator();
    while (dictPathIterator.hasNext()) {
      String dictPath=(String)dictPathIterator.next();
      if (!dictPath.endsWith(""String_Node_Str"")) {
        form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
        return false;
      }
    }
  }
 catch (  Exception e) {
    return false;
  }
  return true;
}",0.7781175671083927
168089,"public void countWords(List<String> inputFiles,List<String> dictionaryFiles){
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  if (!setModels())   return;
  try {
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    buildMaps(dictionaryFiles);
  }
 catch (  IOException e) {
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  monitor.subTask(""String_Node_Str"");
  if (monitor.isCanceled())   throw new OperationCanceledException();
  for (  String iFile : inputFiles) {
    if (monitor.isCanceled())     throw new OperationCanceledException();
    do_countWords(iFile);
    if (doWordDistribution)     createWordDistribution(iFile);
    monitor.worked(2);
    refreshFileCounts();
  }
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  monitor.subTask(""String_Node_Str"");
  addToCSV(""String_Node_Str"",this.numWords,this.numSentences,this.numDictWords,true);
  monitor.worked(5);
  closeWriters();
  generateRunReport();
  monitor.worked(1);
  return;
}","public void countWords(List<String> inputFiles,List<String> dictionaryFiles) throws OperationCanceledException, Exception {
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  if (!setModels())   return;
  try {
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    buildMaps(dictionaryFiles);
  }
 catch (  Exception e) {
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    e.printStackTrace();
    throw new Exception(""String_Node_Str"");
  }
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  monitor.subTask(""String_Node_Str"");
  if (monitor.isCanceled())   throw new OperationCanceledException();
  for (  String iFile : inputFiles) {
    if (monitor.isCanceled())     throw new OperationCanceledException();
    do_countWords(iFile);
    if (doWordDistribution)     createWordDistribution(iFile);
    monitor.worked(2);
    refreshFileCounts();
  }
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  monitor.subTask(""String_Node_Str"");
  addToCSV(""String_Node_Str"",this.numWords,this.numSentences,this.numDictWords,true);
  monitor.worked(5);
  closeWriters();
  generateRunReport();
  monitor.worked(1);
  return;
}",0.9582198001816532
168090,"/** 
 * Function to initialize all the HashMap's used to maintain word counts.
 * @param dictionaryFiles List of dictionary Files
 * @throws IOException Catch error in caller. The errors might be due to bad dictionary format.
 */
private void buildMaps(List<String> dictionaryFiles) throws IOException {
  monitor.subTask(""String_Node_Str"");
  for (  String dFile : dictionaryFiles) {
    clashWordCount=2147483647;
    BufferedReader br=new BufferedReader(new FileReader(new File(dFile)));
    String currentLine=br.readLine().trim();
    if (currentLine == null) {
      ConsoleView.printlInConsoleln(""String_Node_Str"" + dFile + ""String_Node_Str"");
    }
    if (currentLine.equals(""String_Node_Str""))     while ((currentLine=br.readLine().trim().toLowerCase()) != null && !currentLine.equals(""String_Node_Str"")) {
      int key=Integer.parseInt(currentLine.split(""String_Node_Str"")[0].trim());
      String value=currentLine.split(""String_Node_Str"")[1].trim();
      if (categoryID.containsKey(key) && !((categoryID.get(key)).equals(value))) {
        addConflictingCategory(key,value);
      }
 else {
        categoryID.put(key,value);
      }
    }
    if (currentLine == null) {
      ConsoleView.printlInConsoleln(""String_Node_Str"" + dFile + ""String_Node_Str"");
    }
 else {
      while ((currentLine=br.readLine()) != null) {
        String[] words=currentLine.split(""String_Node_Str"");
        if (words.length == 0)         continue;
        if (!wordDictionary.containsKey(words[0])) {
          if (stemDictionary) {
            stemmer.setCurrent(words[0]);
            String stemmedWord=""String_Node_Str"";
            if (stemmer.stem())             stemmedWord=stemmer.getCurrent();
            if (!stemmedWord.equals(""String_Node_Str""))             words[0]=stemmedWord;
          }
          wordDictionary.put(words[0],new HashMap<Integer,Double>());
          userFileCount.put(words[0],new HashMap<Integer,Double>());
          userOverallCount.put(words[0],new HashMap<Integer,Double>());
          pennFileCount.put(words[0],new HashMap<String,Double>());
          pennOverallCount.put(words[0],new HashMap<String,Double>());
        }
        for (int i=1; i < words.length; i=increment(i)) {
          if (words[i].contains(""String_Node_Str"") || words[i].contains(""String_Node_Str"") || words[i].contains(""String_Node_Str""))           continue;
          if (oldCategoryMap.containsKey(Integer.parseInt(words[i]))) {
            words[i]=oldCategoryMap.get(Integer.parseInt(words[i])) + ""String_Node_Str"";
          }
          if (!wordDictionary.get(words[0]).containsKey(Integer.parseInt(words[i]))) {
            if (weighted) {
              wordDictionary.get(words[0]).put(Integer.parseInt(words[i]),Double.parseDouble(words[i + 1]));
            }
 else {
              wordDictionary.get(words[0]).put(Integer.parseInt(words[i]),1.0);
            }
            userFileCount.get(words[0]).put(Integer.parseInt(words[i]),0.0);
            userOverallCount.get(words[0]).put(Integer.parseInt(words[i]),0.0);
          }
        }
      }
    }
    br.close();
  }
  monitor.worked(2);
}","/** 
 * Function to initialize all the HashMap's used to maintain word counts.
 * @param dictionaryFiles List of dictionary Files
 * @throws IOException Catch error in caller. The errors might be due to bad dictionary format.
 */
private void buildMaps(List<String> dictionaryFiles) throws Exception {
  monitor.subTask(""String_Node_Str"");
  for (  String dFile : dictionaryFiles) {
    clashWordCount=2147483647;
    BufferedReader br=new BufferedReader(new FileReader(new File(dFile)));
    String currentLine=br.readLine().trim();
    if (currentLine == null) {
      ConsoleView.printlInConsoleln(""String_Node_Str"" + dFile + ""String_Node_Str"");
    }
    if (currentLine.equals(""String_Node_Str""))     while ((currentLine=br.readLine().trim().toLowerCase()) != null && !currentLine.equals(""String_Node_Str"")) {
      int key=Integer.parseInt(currentLine.split(""String_Node_Str"")[0].trim());
      String value=currentLine.split(""String_Node_Str"")[1].trim();
      if (categoryID.containsKey(key) && !((categoryID.get(key)).equals(value))) {
        addConflictingCategory(key,value);
      }
 else {
        categoryID.put(key,value);
      }
    }
    if (currentLine == null) {
      ConsoleView.printlInConsoleln(""String_Node_Str"" + dFile + ""String_Node_Str"");
    }
 else {
      while ((currentLine=br.readLine()) != null) {
        String[] words=currentLine.split(""String_Node_Str"");
        if (words.length == 0)         continue;
        if (!wordDictionary.containsKey(words[0])) {
          if (stemDictionary) {
            stemmer.setCurrent(words[0]);
            String stemmedWord=""String_Node_Str"";
            if (stemmer.stem())             stemmedWord=stemmer.getCurrent();
            if (!stemmedWord.equals(""String_Node_Str""))             words[0]=stemmedWord;
          }
          wordDictionary.put(words[0],new HashMap<Integer,Double>());
          userFileCount.put(words[0],new HashMap<Integer,Double>());
          userOverallCount.put(words[0],new HashMap<Integer,Double>());
          pennFileCount.put(words[0],new HashMap<String,Double>());
          pennOverallCount.put(words[0],new HashMap<String,Double>());
        }
        for (int i=1; i < words.length; i=increment(i)) {
          if (words[i].contains(""String_Node_Str"") || words[i].contains(""String_Node_Str"") || words[i].contains(""String_Node_Str""))           continue;
          if (oldCategoryMap.containsKey(Integer.parseInt(words[i]))) {
            words[i]=oldCategoryMap.get(Integer.parseInt(words[i])) + ""String_Node_Str"";
          }
          if (!wordDictionary.get(words[0]).containsKey(Integer.parseInt(words[i]))) {
            if (weighted) {
              wordDictionary.get(words[0]).put(Integer.parseInt(words[i]),Double.parseDouble(words[i + 1]));
            }
 else {
              wordDictionary.get(words[0]).put(Integer.parseInt(words[i]),1.0);
            }
            userFileCount.get(words[0]).put(Integer.parseInt(words[i]),0.0);
            userOverallCount.get(words[0]).put(Integer.parseInt(words[i]),0.0);
          }
        }
      }
    }
    br.close();
  }
  monitor.worked(2);
}",0.9996794871794872
168091,"private boolean canProceed(){
  boolean canPerform=true;
  TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  String message=OutputPathValidation.getInstance().validateOutputDirectory(layoutData.getOutputLabel().getText(),""String_Node_Str"");
  if (message != null) {
    message=layoutData.getOutputLabel().getText() + ""String_Node_Str"" + message;
    form.getMessageManager().addMessage(""String_Node_Str"",message,null,IMessageProvider.ERROR);
    canPerform=false;
  }
  try {
    if (inputLayoutData.getTypeCheckedSelectedFiles(checkType).size() < 1) {
      form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
      canPerform=false;
    }
  }
 catch (  Exception e) {
    canPerform=false;
  }
  try {
    if (dictLayoutData.getTypeCheckedSelectedFiles(checkType).size() < 1) {
      form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
      canPerform=false;
    }
  }
 catch (  Exception e) {
    canPerform=false;
  }
  return canPerform;
}","private boolean canProceed(){
  TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  String message=OutputPathValidation.getInstance().validateOutputDirectory(layoutData.getOutputLabel().getText(),""String_Node_Str"");
  if (message != null) {
    message=layoutData.getOutputLabel().getText() + ""String_Node_Str"" + message;
    form.getMessageManager().addMessage(""String_Node_Str"",message,null,IMessageProvider.ERROR);
    return false;
  }
  try {
    if (inputLayoutData.getTypeCheckedSelectedFiles(checkType).size() < 1) {
      form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
      return false;
    }
  }
 catch (  Exception e) {
    return false;
  }
  try {
    if (dictLayoutData.getTypeCheckedSelectedFiles(checkType).size() < 1) {
      form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
      return false;
    }
  }
 catch (  Exception e) {
    return false;
  }
  try {
    List<Object> dictPaths=dictLayoutData.getTypeCheckedSelectedFiles(checkType);
    Iterator<Object> dictPathIterator=dictPaths.iterator();
    while (dictPathIterator.hasNext()) {
      String dictPath=(String)dictPathIterator.next();
      if (!dictPath.endsWith(""String_Node_Str"")) {
        form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
        return false;
      }
    }
  }
 catch (  Exception e) {
    return false;
  }
  return true;
}",0.7781175671083927
168092,"/** 
 * Function to be called incase of exception
 * @param monitor
 * @param e
 * @param message
 * @return
 */
private IStatus handleException(IProgressMonitor monitor,Exception e,String message){
  monitor.done();
  System.out.println(message);
  e.printStackTrace();
  TacitFormComposite.updateStatusMessage(getViewSite(),message,IStatus.ERROR,form);
  return Status.CANCEL_STATUS;
}","/** 
 * Function to be called incase of exception
 * @param monitor
 * @param e
 * @param message
 * @return
 */
private IStatus handleException(IProgressMonitor monitor,Exception e,String message){
  monitor.done();
  System.out.println(message);
  e.printStackTrace();
  TacitFormComposite.updateStatusMessage(getViewSite(),message + e.getMessage(),IStatus.ERROR,form);
  return Status.CANCEL_STATUS;
}",0.9785082174462706
168093,"/** 
 * Adds ""Classify"" and ""Help"" buttons on the Naive Bayes Classifier form
 */
private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    String classificationInputDir;
    String outputDir;
    String tempkValue;
    @Override public void run(){
      final ArrayList<String> trainingDataPaths=new ArrayList<String>();
      final HashMap<String,List<String>> tempClassPaths=new HashMap<String,List<String>>();
      final NaiveBayesClassifier nbc=new NaiveBayesClassifier();
      classPaths=new HashMap<String,List<String>>();
      consolidateSelectedFiles(classLayoutData,classPaths);
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
      job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          Date dateObj=new Date();
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              outputDir=outputPath.getText();
              classificationInputDir=classifyInputText.getText();
              tempkValue=kValueText.getText();
              isPreprocessEnabled=preprocessEnabled.getSelection();
              isClassificationEnabled=classificationEnabled.getSelection();
            }
          }
);
          HashMap<Integer,String> perf;
          if (monitor.isCanceled()) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return handledCancelRequest(""String_Node_Str"");
          }
          NaiveBayesClassifierWeka cv;
          int kValue=Integer.parseInt(tempkValue);
          monitor.worked(1);
          if (isPreprocessEnabled) {
            monitor.subTask(""String_Node_Str"");
            try {
              preprocessTask=new Preprocessor(""String_Node_Str"",isPreprocessEnabled);
              for (              String dirPath : classPaths.keySet()) {
                if (monitor.isCanceled()) {
                  TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
                  return handledCancelRequest(""String_Node_Str"");
                }
                List<String> allSelectedClassFiles=classPaths.get(dirPath);
                List<Object> tempFiles=new ArrayList<Object>();
                tempFiles.addAll(allSelectedClassFiles);
                List<String> preprocessedFilePaths=preprocessTask.processData(new File(dirPath).getName(),tempFiles);
                String preProcessedClassDir=null;
                if (!preprocessedFilePaths.isEmpty())                 preProcessedClassDir=new File(preprocessedFilePaths.get(0)).getParent();
                trainingDataPaths.add(preProcessedClassDir);
                tempClassPaths.put(preProcessedClassDir,preprocessedFilePaths);
                monitor.worked(1);
              }
              if (monitor.isCanceled()) {
                TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
                return handledCancelRequest(""String_Node_Str"");
              }
              if (isClassificationEnabled) {
                List<Object> files=new ArrayList<Object>();
                nbc.selectAllFiles(classificationInputDir,files);
                List<String> preprocessedFilePaths=preprocessTask.processData(new File(classificationInputDir).getName(),files);
                if (!preprocessedFilePaths.isEmpty())                 classificationInputDir=new File(preprocessedFilePaths.get(0)).getParent();
                monitor.worked(1);
              }
            }
 catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
            monitor.worked(10);
          }
 else {
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            try {
              nbc.createTempDirectories(classPaths,trainingDataPaths,monitor);
            }
 catch (            IOException e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
            monitor.worked(10);
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
          }
          try {
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            monitor.subTask(""String_Node_Str"");
            if (!isPreprocessEnabled) {
              cv=new NaiveBayesClassifierWeka(classPaths);
            }
 else {
              cv=new NaiveBayesClassifierWeka(tempClassPaths);
            }
            cv.initializeInstances();
            cv.doCrossValidate(kValue,monitor,dateObj);
            monitor.worked(40);
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            if (isClassificationEnabled) {
              monitor.subTask(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              cv.doClassify(classificationInputDir,outputDir,monitor,dateObj);
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
            monitor.worked(15);
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            if (!isPreprocessEnabled)             nbc.deleteTempDirectories(trainingDataPaths);
            monitor.worked(10);
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
          }
 catch (          IOException e) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return handleException(monitor,e,""String_Node_Str"");
          }
catch (          EvalError e) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return handleException(monitor,e,""String_Node_Str"");
          }
catch (          Exception e) {
            e.printStackTrace();
          }
          if (monitor.isCanceled()) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return handledCancelRequest(""String_Node_Str"");
          }
          if (isPreprocessEnabled) {
            preprocessTask.clean();
          }
          monitor.worked(100);
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      canProceed=canItProceed(classPaths);
      if (canProceed) {
        job.schedule();
        job.addJobChangeListener(new JobChangeAdapter(){
          public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
          }
        }
);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}","/** 
 * Adds ""Classify"" and ""Help"" buttons on the Naive Bayes Classifier form
 */
private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    String classificationInputDir;
    String outputDir;
    String tempkValue;
    @Override public void run(){
      final ArrayList<String> trainingDataPaths=new ArrayList<String>();
      final HashMap<String,List<String>> tempClassPaths=new HashMap<String,List<String>>();
      final NaiveBayesClassifier nbc=new NaiveBayesClassifier();
      classPaths=new HashMap<String,List<String>>();
      consolidateSelectedFiles(classLayoutData,classPaths);
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
      job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          Date dateObj=new Date();
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              outputDir=outputPath.getText();
              classificationInputDir=classifyInputText.getText();
              tempkValue=kValueText.getText();
              isPreprocessEnabled=preprocessEnabled.getSelection();
              isClassificationEnabled=classificationEnabled.getSelection();
            }
          }
);
          HashMap<Integer,String> perf;
          if (monitor.isCanceled()) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return handledCancelRequest(""String_Node_Str"");
          }
          NaiveBayesClassifierWeka cv;
          int kValue=Integer.parseInt(tempkValue);
          monitor.worked(1);
          if (isPreprocessEnabled) {
            monitor.subTask(""String_Node_Str"");
            try {
              preprocessTask=new Preprocessor(""String_Node_Str"",isPreprocessEnabled);
              for (              String dirPath : classPaths.keySet()) {
                if (monitor.isCanceled()) {
                  TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
                  return handledCancelRequest(""String_Node_Str"");
                }
                List<String> allSelectedClassFiles=classPaths.get(dirPath);
                List<Object> tempFiles=new ArrayList<Object>();
                tempFiles.addAll(allSelectedClassFiles);
                List<String> preprocessedFilePaths=preprocessTask.processData(new File(dirPath).getName(),tempFiles);
                String preProcessedClassDir=null;
                if (!preprocessedFilePaths.isEmpty())                 preProcessedClassDir=new File(preprocessedFilePaths.get(0)).getParent();
                trainingDataPaths.add(preProcessedClassDir);
                tempClassPaths.put(preProcessedClassDir,preprocessedFilePaths);
                monitor.worked(1);
              }
              if (monitor.isCanceled()) {
                TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
                return handledCancelRequest(""String_Node_Str"");
              }
              if (isClassificationEnabled) {
                List<Object> files=new ArrayList<Object>();
                nbc.selectAllFiles(classificationInputDir,files);
                List<String> preprocessedFilePaths=preprocessTask.processData(new File(classificationInputDir).getName(),files);
                if (!preprocessedFilePaths.isEmpty())                 classificationInputDir=new File(preprocessedFilePaths.get(0)).getParent();
                monitor.worked(1);
              }
            }
 catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
            monitor.worked(10);
          }
 else {
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            try {
              nbc.createTempDirectories(classPaths,trainingDataPaths,monitor);
            }
 catch (            IOException e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
            monitor.worked(10);
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
          }
          try {
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            monitor.subTask(""String_Node_Str"");
            if (!isPreprocessEnabled) {
              cv=new NaiveBayesClassifierWeka(classPaths);
            }
 else {
              cv=new NaiveBayesClassifierWeka(tempClassPaths);
            }
            try {
              cv.initializeInstances();
              cv.doCrossValidate(kValue,monitor,dateObj);
            }
 catch (            IllegalArgumentException iae) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handleException(monitor,iae,""String_Node_Str"");
            }
            monitor.worked(40);
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            if (isClassificationEnabled) {
              monitor.subTask(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              try {
                cv.doClassify(classificationInputDir,outputDir,monitor,dateObj);
              }
 catch (              IllegalArgumentException iae) {
                TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
                return handleException(monitor,iae,""String_Node_Str"");
              }
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
            monitor.worked(15);
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            if (!isPreprocessEnabled)             nbc.deleteTempDirectories(trainingDataPaths);
            monitor.worked(10);
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
          }
 catch (          IOException e) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return handleException(monitor,e,""String_Node_Str"");
          }
catch (          EvalError e) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return handleException(monitor,e,""String_Node_Str"");
          }
catch (          Exception e) {
            e.printStackTrace();
          }
          if (monitor.isCanceled()) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return handledCancelRequest(""String_Node_Str"");
          }
          if (isPreprocessEnabled) {
            preprocessTask.clean();
          }
          monitor.worked(100);
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      canProceed=canItProceed(classPaths);
      if (canProceed) {
        job.schedule();
        job.addJobChangeListener(new JobChangeAdapter(){
          public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
          }
        }
);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}",0.9720676486633932
168094,"public void buildCategorizer(List<String> dictFiles) throws IOException {
  for (  String dFile : dictFiles) {
    BufferedReader br=new BufferedReader(new FileReader(new File(dFile)));
    String currentLine=br.readLine().trim();
    if (currentLine == null) {
      logger.warning(""String_Node_Str"" + dFile + ""String_Node_Str"");
      appendLog(""String_Node_Str"" + dFile + ""String_Node_Str"");
    }
    if (currentLine.equals(""String_Node_Str""))     while ((currentLine=br.readLine().trim().toLowerCase()) != null && !currentLine.equals(""String_Node_Str"")) {
      int categoryId=Integer.parseInt(currentLine.split(""String_Node_Str"")[0].trim());
      String categoryName=currentLine.split(""String_Node_Str"")[1].trim();
      if (categories.containsKey(categoryId) && !((categories.get(categoryId)).equals(categoryName))) {
        addConflictingCategory(categoryId,categoryName);
      }
 else {
        categories.put(categoryId,categoryName);
      }
    }
    if (currentLine == null) {
      logger.warning(""String_Node_Str"" + dFile + ""String_Node_Str"");
      appendLog(""String_Node_Str"" + dFile + ""String_Node_Str"");
    }
 else {
      while ((currentLine=br.readLine()) != null) {
        ArrayList<Integer> categories=new ArrayList<Integer>();
        ArrayList<Integer> condCategories=new ArrayList<Integer>();
        HashMap<String,Double> weights=new HashMap<String,Double>();
        currentLine=currentLine.trim().toLowerCase();
        if (currentLine.equals(""String_Node_Str""))         continue;
        boolean conditional=false;
        String[] words=currentLine.split(""String_Node_Str"");
        String currPhrase=words[0];
        String condPhrase=words[0];
        for (int i=initialize(); i < words.length; i=increment(i)) {
          if (i > 0 && oldCategoryMap.containsKey(Integer.parseInt(words[i]))) {
            words[i]=oldCategoryMap.get(Integer.parseInt(words[i])) + ""String_Node_Str"";
          }
          if (!words[i].matches(""String_Node_Str"")) {
            if (words[i].contains(""String_Node_Str"")) {
              String[] splits=words[i].split(""String_Node_Str"");
              categories.add(Integer.parseInt(splits[1]));
              if (splits[0].contains(""String_Node_Str"")) {
                conditional=true;
                condCategories.add(Integer.parseInt(splits[0].split(""String_Node_Str"")[1]));
                condPhrase=words[0] + ""String_Node_Str"" + splits[0].split(""String_Node_Str"")[0].replace(""String_Node_Str"",""String_Node_Str"");
              }
            }
 else             if (words[i].contains(""String_Node_Str"") || words[i].contains(""String_Node_Str""))             continue;
 else {
              currPhrase=currPhrase + ""String_Node_Str"" + words[i];
              phraseDetect=true;
            }
            continue;
          }
          try {
            if (this.weighted) {
              weights.put(this.categories.get(Integer.parseInt(words[i])),Double.parseDouble(words[i + 1]));
            }
          }
 catch (          Exception e) {
            logger.warning(""String_Node_Str"" + dFile + ""String_Node_Str"");
            appendLog(""String_Node_Str"" + dFile + ""String_Node_Str"");
          }
          categories.add(Integer.parseInt(words[i]));
        }
        String currentWord=words[0];
        if (phraseDetect)         currentWord=currPhrase;
        if (stemDictionary && !doLiwcStemming) {
          currentWord=currentWord.replace(""String_Node_Str"",""String_Node_Str"");
          stemmer.setCurrent(currentWord);
          String stemmedWord=""String_Node_Str"";
          if (stemmer.stem())           stemmedWord=stemmer.getCurrent();
          if (!stemmedWord.equals(""String_Node_Str""))           currentWord=stemmedWord;
        }
        if (!doLiwcStemming)         currentWord=currentWord.replace(""String_Node_Str"",""String_Node_Str"");
        categorizer.insert(currentWord,categories);
        if (phraseDetect)         phraseLookup.put(currentWord,categories);
        if (conditional)         conditionalCategory.put(condPhrase,condCategories);
        if (this.weighted)         weightMap.put(currentWord,weights);
      }
    }
    br.close();
  }
}","public void buildCategorizer(List<String> dictFiles) throws IOException {
  for (  String dFile : dictFiles) {
    BufferedReader br=new BufferedReader(new FileReader(new File(dFile)));
    String currentLine=br.readLine().trim();
    if (currentLine == null) {
      logger.warning(""String_Node_Str"" + dFile + ""String_Node_Str"");
      appendLog(""String_Node_Str"" + dFile + ""String_Node_Str"");
    }
    if (currentLine.equals(""String_Node_Str""))     while ((currentLine=br.readLine().trim().toLowerCase()) != null && !currentLine.equals(""String_Node_Str"")) {
      int categoryId=Integer.parseInt(currentLine.split(""String_Node_Str"")[0].trim());
      String categoryName=currentLine.split(""String_Node_Str"")[1].trim();
      if (categories.containsKey(categoryId) && !((categories.get(categoryId)).equals(categoryName))) {
        addConflictingCategory(categoryId,categoryName);
      }
 else {
        categories.put(categoryId,categoryName);
      }
    }
    if (currentLine == null) {
      logger.warning(""String_Node_Str"" + dFile + ""String_Node_Str"");
      appendLog(""String_Node_Str"" + dFile + ""String_Node_Str"");
    }
 else {
      while ((currentLine=br.readLine()) != null) {
        ArrayList<Integer> categories=new ArrayList<Integer>();
        ArrayList<Integer> condCategories=new ArrayList<Integer>();
        HashMap<String,Double> weights=new HashMap<String,Double>();
        currentLine=currentLine.trim().toLowerCase();
        if (currentLine.equals(""String_Node_Str""))         continue;
        boolean conditional=false;
        String[] words=currentLine.split(""String_Node_Str"");
        String currPhrase=words[0];
        String condPhrase=words[0];
        for (int i=initialize(); i < words.length; i=increment(i)) {
          if (!words[i].matches(""String_Node_Str"")) {
            if (words[i].contains(""String_Node_Str"")) {
              String[] splits=words[i].split(""String_Node_Str"");
              categories.add(Integer.parseInt(splits[1]));
              if (splits[0].contains(""String_Node_Str"")) {
                conditional=true;
                condCategories.add(Integer.parseInt(splits[0].split(""String_Node_Str"")[1]));
                condPhrase=words[0] + ""String_Node_Str"" + splits[0].split(""String_Node_Str"")[0].replace(""String_Node_Str"",""String_Node_Str"");
              }
            }
 else             if (words[i].contains(""String_Node_Str"") || words[i].contains(""String_Node_Str""))             continue;
 else {
              currPhrase=currPhrase + ""String_Node_Str"" + words[i];
              phraseDetect=true;
            }
            continue;
          }
          try {
            if (this.weighted) {
              weights.put(this.categories.get(Integer.parseInt(words[i])),Double.parseDouble(words[i + 1]));
            }
          }
 catch (          Exception e) {
            logger.warning(""String_Node_Str"" + dFile + ""String_Node_Str"");
            appendLog(""String_Node_Str"" + dFile + ""String_Node_Str"");
          }
          if (i > 0 && oldCategoryMap.containsKey(Integer.parseInt(words[i]))) {
            words[i]=oldCategoryMap.get(Integer.parseInt(words[i])) + ""String_Node_Str"";
          }
          categories.add(Integer.parseInt(words[i]));
        }
        String currentWord=words[0];
        if (phraseDetect)         currentWord=currPhrase;
        if (stemDictionary && !doLiwcStemming) {
          currentWord=currentWord.replace(""String_Node_Str"",""String_Node_Str"");
          stemmer.setCurrent(currentWord);
          String stemmedWord=""String_Node_Str"";
          if (stemmer.stem())           stemmedWord=stemmer.getCurrent();
          if (!stemmedWord.equals(""String_Node_Str""))           currentWord=stemmedWord;
        }
        if (!doLiwcStemming)         currentWord=currentWord.replace(""String_Node_Str"",""String_Node_Str"");
        categorizer.insert(currentWord,categories);
        if (phraseDetect)         phraseLookup.put(currentWord,categories);
        if (conditional)         conditionalCategory.put(condPhrase,condCategories);
        if (this.weighted)         weightMap.put(currentWord,weights);
      }
    }
    br.close();
  }
}",0.9562289562289562
168095,"public void buildCategorizer(List<String> dictFiles) throws IOException {
  for (  String dFile : dictFiles) {
    BufferedReader br=new BufferedReader(new FileReader(new File(dFile)));
    String currentLine=br.readLine().trim();
    if (currentLine == null) {
      logger.warning(""String_Node_Str"" + dFile + ""String_Node_Str"");
      appendLog(""String_Node_Str"" + dFile + ""String_Node_Str"");
    }
    if (currentLine.equals(""String_Node_Str""))     while ((currentLine=br.readLine().trim().toLowerCase()) != null && !currentLine.equals(""String_Node_Str""))     categories.put(Integer.parseInt(currentLine.split(""String_Node_Str"")[0].trim()),currentLine.split(""String_Node_Str"")[1].trim());
    if (currentLine == null) {
      logger.warning(""String_Node_Str"" + dFile + ""String_Node_Str"");
      appendLog(""String_Node_Str"" + dFile + ""String_Node_Str"");
    }
 else {
      while ((currentLine=br.readLine()) != null) {
        ArrayList<Integer> categories=new ArrayList<Integer>();
        ArrayList<Integer> condCategories=new ArrayList<Integer>();
        HashMap<String,Double> weights=new HashMap<String,Double>();
        currentLine=currentLine.trim().toLowerCase();
        if (currentLine.equals(""String_Node_Str""))         continue;
        boolean conditional=false;
        String[] words=currentLine.split(""String_Node_Str"");
        String currPhrase=words[0];
        String condPhrase=words[0];
        for (int i=initialize(); i < words.length - 1; i=increment(i)) {
          if (!words[i].matches(""String_Node_Str"")) {
            if (words[i].contains(""String_Node_Str"")) {
              String[] splits=words[i].split(""String_Node_Str"");
              categories.add(Integer.parseInt(splits[1]));
              if (splits[0].contains(""String_Node_Str"")) {
                conditional=true;
                condCategories.add(Integer.parseInt(splits[0].split(""String_Node_Str"")[1]));
                condPhrase=words[0] + ""String_Node_Str"" + splits[0].split(""String_Node_Str"")[0].replace(""String_Node_Str"",""String_Node_Str"");
              }
            }
 else             if (words[i].contains(""String_Node_Str"") || words[i].contains(""String_Node_Str""))             continue;
 else {
              currPhrase=currPhrase + ""String_Node_Str"" + words[i];
              phraseDetect=true;
            }
            continue;
          }
          try {
            if (this.weighted) {
              weights.put(this.categories.get(Integer.parseInt(words[i])),Double.parseDouble(words[i + 1]));
            }
          }
 catch (          Exception e) {
            String a=e.getMessage();
          }
          categories.add(Integer.parseInt(words[i]));
        }
        String currentWord=words[0];
        if (phraseDetect)         currentWord=currPhrase;
        if (stemDictionary && !doLiwcStemming) {
          currentWord=currentWord.replace(""String_Node_Str"",""String_Node_Str"");
          stemmer.setCurrent(currentWord);
          String stemmedWord=""String_Node_Str"";
          if (stemmer.stem())           stemmedWord=stemmer.getCurrent();
          if (!stemmedWord.equals(""String_Node_Str""))           currentWord=stemmedWord;
        }
        if (!doLiwcStemming)         currentWord=currentWord.replace(""String_Node_Str"",""String_Node_Str"");
        categorizer.insert(currentWord,categories);
        if (phraseDetect)         phraseLookup.put(currentWord,categories);
        if (conditional)         conditionalCategory.put(condPhrase,condCategories);
        if (this.weighted)         weightMap.put(currentWord,weights);
      }
    }
    br.close();
  }
}","public void buildCategorizer(List<String> dictFiles) throws IOException {
  for (  String dFile : dictFiles) {
    BufferedReader br=new BufferedReader(new FileReader(new File(dFile)));
    String currentLine=br.readLine().trim();
    if (currentLine == null) {
      logger.warning(""String_Node_Str"" + dFile + ""String_Node_Str"");
      appendLog(""String_Node_Str"" + dFile + ""String_Node_Str"");
    }
    if (currentLine.equals(""String_Node_Str""))     while ((currentLine=br.readLine().trim().toLowerCase()) != null && !currentLine.equals(""String_Node_Str""))     categories.put(Integer.parseInt(currentLine.split(""String_Node_Str"")[0].trim()),currentLine.split(""String_Node_Str"")[1].trim());
    if (currentLine == null) {
      logger.warning(""String_Node_Str"" + dFile + ""String_Node_Str"");
      appendLog(""String_Node_Str"" + dFile + ""String_Node_Str"");
    }
 else {
      while ((currentLine=br.readLine()) != null) {
        ArrayList<Integer> categories=new ArrayList<Integer>();
        ArrayList<Integer> condCategories=new ArrayList<Integer>();
        HashMap<String,Double> weights=new HashMap<String,Double>();
        currentLine=currentLine.trim().toLowerCase();
        if (currentLine.equals(""String_Node_Str""))         continue;
        boolean conditional=false;
        String[] words=currentLine.split(""String_Node_Str"");
        String currPhrase=words[0];
        String condPhrase=words[0];
        for (int i=initialize(); i < words.length; i=increment(i)) {
          if (!words[i].matches(""String_Node_Str"")) {
            if (words[i].contains(""String_Node_Str"")) {
              String[] splits=words[i].split(""String_Node_Str"");
              categories.add(Integer.parseInt(splits[1]));
              if (splits[0].contains(""String_Node_Str"")) {
                conditional=true;
                condCategories.add(Integer.parseInt(splits[0].split(""String_Node_Str"")[1]));
                condPhrase=words[0] + ""String_Node_Str"" + splits[0].split(""String_Node_Str"")[0].replace(""String_Node_Str"",""String_Node_Str"");
              }
            }
 else             if (words[i].contains(""String_Node_Str"") || words[i].contains(""String_Node_Str""))             continue;
 else {
              currPhrase=currPhrase + ""String_Node_Str"" + words[i];
              phraseDetect=true;
            }
            continue;
          }
          try {
            if (this.weighted) {
              weights.put(this.categories.get(Integer.parseInt(words[i])),Double.parseDouble(words[i + 1]));
            }
          }
 catch (          Exception e) {
            logger.warning(""String_Node_Str"" + dFile + ""String_Node_Str"");
            appendLog(""String_Node_Str"" + dFile + ""String_Node_Str"");
          }
          categories.add(Integer.parseInt(words[i]));
        }
        String currentWord=words[0];
        if (phraseDetect)         currentWord=currPhrase;
        if (stemDictionary && !doLiwcStemming) {
          currentWord=currentWord.replace(""String_Node_Str"",""String_Node_Str"");
          stemmer.setCurrent(currentWord);
          String stemmedWord=""String_Node_Str"";
          if (stemmer.stem())           stemmedWord=stemmer.getCurrent();
          if (!stemmedWord.equals(""String_Node_Str""))           currentWord=stemmedWord;
        }
        if (!doLiwcStemming)         currentWord=currentWord.replace(""String_Node_Str"",""String_Node_Str"");
        categorizer.insert(currentWord,categories);
        if (phraseDetect)         phraseLookup.put(currentWord,categories);
        if (conditional)         conditionalCategory.put(condPhrase,condCategories);
        if (this.weighted)         weightMap.put(currentWord,weights);
      }
    }
    br.close();
  }
}",0.9786535303776684
168096,"/** 
 * Function to initialize all the HashMap's used to maintain word counts.
 * @param dictionaryFiles List of dictionary Files
 * @throws IOException Catch error in caller. The errors might be due to bad dictionary format.
 */
private void buildMaps(List<String> dictionaryFiles) throws IOException {
  monitor.subTask(""String_Node_Str"");
  for (  String dFile : dictionaryFiles) {
    BufferedReader br=new BufferedReader(new FileReader(new File(dFile)));
    String currentLine=br.readLine().trim();
    if (currentLine == null || currentLine.isEmpty()) {
      ConsoleView.printlInConsoleln(""String_Node_Str"" + dFile + ""String_Node_Str"");
      br.close();
      continue;
    }
    if (currentLine.equals(""String_Node_Str""))     while ((currentLine=br.readLine().trim().toLowerCase()) != null && !currentLine.equals(""String_Node_Str"")) {
      if (currentLine.equals(""String_Node_Str""))       continue;
      categoryID.put(Integer.parseInt(currentLine.split(""String_Node_Str"")[0].trim()),currentLine.split(""String_Node_Str"")[1].trim());
    }
    if (currentLine == null) {
      ConsoleView.printlInConsoleln(""String_Node_Str"" + dFile + ""String_Node_Str"");
    }
 else {
      while ((currentLine=br.readLine()) != null) {
        if (currentLine.trim().equals(""String_Node_Str""))         continue;
        String[] words=currentLine.split(""String_Node_Str"");
        if (!wordDictionary.containsKey(words[0])) {
          if (stemDictionary) {
            stemmer.setCurrent(words[0]);
            String stemmedWord=""String_Node_Str"";
            if (stemmer.stem())             stemmedWord=stemmer.getCurrent();
            if (!stemmedWord.equals(""String_Node_Str""))             words[0]=stemmedWord;
          }
          wordDictionary.put(words[0],new HashMap<Integer,Double>());
          userFileCount.put(words[0],new HashMap<Integer,Double>());
          userOverallCount.put(words[0],new HashMap<Integer,Double>());
          pennFileCount.put(words[0],new HashMap<String,Double>());
          pennOverallCount.put(words[0],new HashMap<String,Double>());
        }
        for (int i=1; i < words.length; i=increment(i)) {
          if (!wordDictionary.get(words[0]).containsKey(Integer.parseInt(words[i]))) {
            if (weighted) {
              wordDictionary.get(words[0]).put(Integer.parseInt(words[i]),Double.parseDouble(words[i + 1]));
            }
 else {
              wordDictionary.get(words[0]).put(Integer.parseInt(words[i]),1.0);
            }
            userFileCount.get(words[0]).put(Integer.parseInt(words[i]),0.0);
            userOverallCount.get(words[0]).put(Integer.parseInt(words[i]),0.0);
          }
        }
      }
    }
    br.close();
  }
  monitor.worked(2);
}","/** 
 * Function to initialize all the HashMap's used to maintain word counts.
 * @param dictionaryFiles List of dictionary Files
 * @throws IOException Catch error in caller. The errors might be due to bad dictionary format.
 */
private void buildMaps(List<String> dictionaryFiles) throws IOException {
  monitor.subTask(""String_Node_Str"");
  for (  String dFile : dictionaryFiles) {
    clashWordCount=2147483647;
    BufferedReader br=new BufferedReader(new FileReader(new File(dFile)));
    String currentLine=br.readLine().trim();
    if (currentLine == null) {
      ConsoleView.printlInConsoleln(""String_Node_Str"" + dFile + ""String_Node_Str"");
    }
    if (currentLine.equals(""String_Node_Str""))     while ((currentLine=br.readLine().trim().toLowerCase()) != null && !currentLine.equals(""String_Node_Str"")) {
      int key=Integer.parseInt(currentLine.split(""String_Node_Str"")[0].trim());
      String value=currentLine.split(""String_Node_Str"")[1].trim();
      if (categoryID.containsKey(key) && !((categoryID.get(key)).equals(value))) {
        addConflictingCategory(key,value);
      }
 else {
        categoryID.put(key,value);
      }
    }
    if (currentLine == null) {
      ConsoleView.printlInConsoleln(""String_Node_Str"" + dFile + ""String_Node_Str"");
    }
 else {
      while ((currentLine=br.readLine()) != null) {
        String[] words=currentLine.split(""String_Node_Str"");
        if (!wordDictionary.containsKey(words[0])) {
          if (stemDictionary) {
            stemmer.setCurrent(words[0]);
            String stemmedWord=""String_Node_Str"";
            if (stemmer.stem())             stemmedWord=stemmer.getCurrent();
            if (!stemmedWord.equals(""String_Node_Str""))             words[0]=stemmedWord;
          }
          wordDictionary.put(words[0],new HashMap<Integer,Double>());
          userFileCount.put(words[0],new HashMap<Integer,Double>());
          userOverallCount.put(words[0],new HashMap<Integer,Double>());
          pennFileCount.put(words[0],new HashMap<String,Double>());
          pennOverallCount.put(words[0],new HashMap<String,Double>());
        }
        for (int i=1; i < words.length; i=increment(i)) {
          if (oldCategoryMap.containsKey(Integer.parseInt(words[i]))) {
            words[i]=oldCategoryMap.get(Integer.parseInt(words[i])) + ""String_Node_Str"";
          }
          if (!wordDictionary.get(words[0]).containsKey(Integer.parseInt(words[i]))) {
            if (weighted) {
              wordDictionary.get(words[0]).put(Integer.parseInt(words[i]),Double.parseDouble(words[i + 1]));
            }
 else {
              wordDictionary.get(words[0]).put(Integer.parseInt(words[i]),1.0);
            }
            userFileCount.get(words[0]).put(Integer.parseInt(words[i]),0.0);
            userOverallCount.get(words[0]).put(Integer.parseInt(words[i]),0.0);
          }
        }
      }
    }
    br.close();
  }
  monitor.worked(2);
}",0.841638588402199
168097,"private void convertKeys2csv(String fileName,Date dateObj){
  DateFormat df=new SimpleDateFormat(""String_Node_Str"");
  BufferedReader br;
  BufferedWriter bw;
  try {
    br=new BufferedReader(new FileReader(new File(fileName + ""String_Node_Str"")));
    bw=new BufferedWriter(new FileWriter(new File(fileName + ""String_Node_Str"" + df.format(dateObj)+ ""String_Node_Str"")));
    String currentLine=""String_Node_Str"";
    bw.write(currentLine);
    bw.newLine();
    while ((currentLine=br.readLine()) != null) {
      currentLine=currentLine.replace('\t',',');
      List<String> wordList=Arrays.asList(currentLine.split(""String_Node_Str""));
      bw.write(wordList.get(0) + ""String_Node_Str"" + wordList.get(2));
      bw.newLine();
    }
    br.close();
    bw.close();
    ConsoleView.printlInConsoleln(""String_Node_Str"" + fileName + ""String_Node_Str""+ df.format(dateObj)+ ""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","private void convertKeys2csv(String fileName,Date dateObj){
  DateFormat df=new SimpleDateFormat(""String_Node_Str"");
  BufferedReader br;
  BufferedWriter bw;
  try {
    br=new BufferedReader(new FileReader(new File(fileName + ""String_Node_Str"")));
    bw=new BufferedWriter(new FileWriter(new File(fileName + ""String_Node_Str"" + df.format(dateObj)+ ""String_Node_Str"")));
    String currentLine=""String_Node_Str"";
    bw.write(currentLine);
    bw.newLine();
    while ((currentLine=br.readLine()) != null) {
      currentLine=currentLine.replace('\t',',');
      List<String> wordList=Arrays.asList(currentLine.split(""String_Node_Str""));
      if (wordList.size() > 0)       bw.append(wordList.get(0));
      if (wordList.size() > 2)       bw.append(""String_Node_Str"" + wordList.get(2));
      bw.newLine();
    }
    br.close();
    bw.close();
    ConsoleView.printlInConsoleln(""String_Node_Str"" + fileName + ""String_Node_Str""+ df.format(dateObj)+ ""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.940009447331129
168098,"private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (SVMViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      if (!canProceed())       return;
      final List<Object> class1Files=class1LayoutData.getSelectedFiles();
      final List<Object> class2Files=class2LayoutData.getSelectedFiles();
      final String class1NameStr=class1Name.getText();
      final String class2NameStr=class2Name.getText();
      final int kValueInt=Integer.parseInt(kValue.getText());
      ;
      final String outputPath=layoutData.getOutputLabel().getText();
      final boolean featureFile=featureFileButton.getSelection();
      final boolean ppValue=preprocessButton.getSelection();
      final Preprocess preprocessor=new Preprocess(""String_Node_Str"");
      final SVMClassify svm=new SVMClassify(class1NameStr,class2NameStr,outputPath);
      final CrossValidator cv=new CrossValidator();
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",kValueInt + 4);
          String ppClass1=""String_Node_Str"";
          String ppClass2=""String_Node_Str"";
          File[] class1FilesL;
          File[] class2FilesL;
          Date dateObj=new Date();
          try {
            Preprocessor ppObj=new Preprocessor(""String_Node_Str"",ppValue);
            List<String> c1Files=ppObj.processData(class1NameStr,class1Files);
            List<String> c2Files=ppObj.processData(class2NameStr,class2Files);
            class1FilesL=new File[c1Files.size()];
            class2FilesL=new File[c2Files.size()];
            for (int k=0; k < c1Files.size(); k++) {
              class1FilesL[k]=new File(c1Files.get(k));
            }
            for (int k=0; k < c2Files.size(); k++) {
              class2FilesL[k]=new File(c2Files.get(k));
            }
            monitor.worked(2);
            cv.doCross(svm,class1NameStr,class1FilesL,class2NameStr,class2FilesL,kValueInt,featureFile,outputPath,monitor,dateObj);
            monitor.worked(5);
            ppObj.clean();
            monitor.worked(2);
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
catch (          Exception e) {
            e.printStackTrace();
          }
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      job.schedule();
      job.addJobChangeListener(new JobChangeAdapter(){
        @Override public void done(        IJobChangeEvent event){
          if (!event.getResult().isOK()) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            ConsoleView.printlInConsoleln(""String_Node_Str"");
            ConsoleView.printlInConsoleln(""String_Node_Str"");
          }
 else {
            TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          }
        }
      }
);
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (SVMViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}","private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (SVMViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      if (!canProceed())       return;
      final List<Object> class1Files=class1LayoutData.getSelectedFiles();
      final List<Object> class2Files=class2LayoutData.getSelectedFiles();
      final String class1NameStr=class1Name.getText();
      final String class2NameStr=class2Name.getText();
      final int kValueInt=Integer.parseInt(kValue.getText());
      ;
      final String outputPath=layoutData.getOutputLabel().getText();
      final boolean featureFile=featureFileButton.getSelection();
      final boolean ppValue=preprocessButton.getSelection();
      final Preprocess preprocessor=new Preprocess(""String_Node_Str"");
      final SVMClassify svm=new SVMClassify(class1NameStr,class2NameStr,outputPath);
      final CrossValidator cv=new CrossValidator();
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",kValueInt + 4);
          String ppClass1=""String_Node_Str"";
          String ppClass2=""String_Node_Str"";
          File[] class1FilesL;
          File[] class2FilesL;
          Date dateObj=new Date();
          try {
            Preprocessor ppObj=new Preprocessor(""String_Node_Str"",ppValue);
            List<String> c1Files=ppObj.processData(class1NameStr,class1Files);
            List<String> c2Files=ppObj.processData(class2NameStr,class2Files);
            class1FilesL=new File[c1Files.size()];
            class2FilesL=new File[c2Files.size()];
            for (int k=0; k < c1Files.size(); k++) {
              class1FilesL[k]=new File(c1Files.get(k));
            }
            for (int k=0; k < c2Files.size(); k++) {
              class2FilesL[k]=new File(c2Files.get(k));
            }
            monitor.worked(2);
            cv.doCross(svm,class1NameStr,class1FilesL,class2NameStr,class2FilesL,kValueInt,featureFile,outputPath,monitor,dateObj);
            monitor.worked(5);
            ppObj.clean();
            monitor.worked(2);
          }
 catch (          IOException e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
catch (          Exception e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      job.schedule();
      job.addJobChangeListener(new JobChangeAdapter(){
        @Override public void done(        IJobChangeEvent event){
          if (!event.getResult().isOK()) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            ConsoleView.printlInConsoleln(""String_Node_Str"");
            ConsoleView.printlInConsoleln(""String_Node_Str"");
          }
 else {
            TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          }
        }
      }
);
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (SVMViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}",0.990118100747168
168099,"private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (HeirarchicalClusterViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      if (!canProceedCluster()) {
        return;
      }
      final DateFormat df=new SimpleDateFormat(""String_Node_Str"");
      final Date dateObj=new Date();
      ConsoleView.writeInConsoleHeader(""String_Node_Str"" + (df.format(dateObj)));
      final boolean isPreprocess=preprocessEnabled.getSelection();
      final String outputPath=layoutOutputData.getOutputLabel().getText();
      TacitUtil tacitHelper=new TacitUtil();
      final List<Object> selectedFiles=layoutData.getSelectedFiles();
      tacitHelper.writeSummaryFile(outputPath);
      final boolean isSaveImage=saveImage.getSelection();
      performCluster=new Job(""String_Node_Str""){
        private Preprocess preprocessTask;
        private String dirPath;
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          preprocessTask=null;
          dirPath=""String_Node_Str"";
          List<File> inputFiles=new ArrayList<File>();
          Preprocessor ppObj=null;
          try {
            ppObj=new Preprocessor(""String_Node_Str"",isPreprocess);
            List<String> inFiles;
            inFiles=ppObj.processData(""String_Node_Str"",selectedFiles);
            for (            String f : inFiles) {
              inputFiles.add(new File(f));
            }
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
catch (          Exception e) {
            e.printStackTrace();
          }
          long startTime=System.currentTimeMillis();
          boolean isSuccessful=HierarchicalClusterAnalysis.runClustering(inputFiles,outputPath,isSaveImage,new SubProgressMonitor(monitor,50),dateObj);
          if (!isSuccessful)           return Status.CANCEL_STATUS;
          Display.getDefault().asyncExec(new Runnable(){
            @Override public void run(){
              if (isPreprocess && preprocessTask.doCleanUp()) {
                preprocessTask.clean();
                ConsoleView.printlInConsoleln(""String_Node_Str"" + dirPath);
              }
            }
          }
);
          System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
          if (monitor.isCanceled()) {
            throw new OperationCanceledException();
          }
          ppObj.clean();
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      performCluster.setUser(true);
      if (canProceedCluster()) {
        performCluster.schedule();
        performCluster.addJobChangeListener(new JobChangeAdapter(){
          @Override public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              ConsoleView.writeInConsoleHeader(""String_Node_Str"" + (df.format(new Date())));
            }
          }
        }
);
      }
 else {
        TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (HeirarchicalClusterViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}","private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (HeirarchicalClusterViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      if (!canProceedCluster()) {
        return;
      }
      final DateFormat df=new SimpleDateFormat(""String_Node_Str"");
      final Date dateObj=new Date();
      ConsoleView.writeInConsoleHeader(""String_Node_Str"" + (df.format(dateObj)));
      final boolean isPreprocess=preprocessEnabled.getSelection();
      final String outputPath=layoutOutputData.getOutputLabel().getText();
      TacitUtil tacitHelper=new TacitUtil();
      final List<Object> selectedFiles=layoutData.getSelectedFiles();
      tacitHelper.writeSummaryFile(outputPath);
      final boolean isSaveImage=saveImage.getSelection();
      performCluster=new Job(""String_Node_Str""){
        private Preprocess preprocessTask;
        private String dirPath;
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          preprocessTask=null;
          dirPath=""String_Node_Str"";
          List<File> inputFiles=new ArrayList<File>();
          Preprocessor ppObj=null;
          try {
            ppObj=new Preprocessor(""String_Node_Str"",isPreprocess);
            List<String> inFiles;
            inFiles=ppObj.processData(""String_Node_Str"",selectedFiles);
            for (            String f : inFiles) {
              inputFiles.add(new File(f));
            }
          }
 catch (          IOException e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
catch (          Exception e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
          long startTime=System.currentTimeMillis();
          boolean isSuccessful=HierarchicalClusterAnalysis.runClustering(inputFiles,outputPath,isSaveImage,new SubProgressMonitor(monitor,50),dateObj);
          if (!isSuccessful)           return Status.CANCEL_STATUS;
          Display.getDefault().asyncExec(new Runnable(){
            @Override public void run(){
              if (isPreprocess && preprocessTask.doCleanUp()) {
                preprocessTask.clean();
                ConsoleView.printlInConsoleln(""String_Node_Str"" + dirPath);
              }
            }
          }
);
          System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
          if (monitor.isCanceled()) {
            throw new OperationCanceledException();
          }
          ppObj.clean();
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      performCluster.setUser(true);
      if (canProceedCluster()) {
        performCluster.schedule();
        performCluster.addJobChangeListener(new JobChangeAdapter(){
          @Override public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              ConsoleView.writeInConsoleHeader(""String_Node_Str"" + (df.format(new Date())));
            }
          }
        }
);
      }
 else {
        TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (HeirarchicalClusterViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}",0.990901020861074
168100,"private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (KmeansClusterViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      if (!canProceedCluster()) {
        return;
      }
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      final int noOfClusters=Integer.valueOf(noClusterTxt.getText()).intValue();
      final boolean isPreprocess=preprocessEnabled.getSelection();
      final String outputPath=layoutData.getOutputLabel().getText();
      TacitUtil tacitHelper=new TacitUtil();
      final List<Object> selectedFiles=layData.getSelectedFiles();
      tacitHelper.writeSummaryFile(outputPath);
      performCluster=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          Preprocessor ppObj=null;
          List<File> inputFiles=new ArrayList<File>();
          List<String> inFiles=null;
          try {
            ppObj=new Preprocessor(""String_Node_Str"",isPreprocess);
            inFiles=ppObj.processData(""String_Node_Str"",selectedFiles);
            for (            String string : inFiles) {
              inputFiles.add(new File(string));
            }
            monitor.worked(10);
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
catch (          Exception e) {
            e.printStackTrace();
          }
          long startTime=System.currentTimeMillis();
          monitor.subTask(""String_Node_Str"");
          Date dateObj=new Date();
          boolean isSuccessful=KmeansClusterAnalysis.runClustering(noOfClusters,inputFiles,outputPath,dateObj);
          if (!isSuccessful)           return Status.CANCEL_STATUS;
          monitor.worked(80);
          ConsoleView.printlInConsoleln(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
          if (monitor.isCanceled()) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            throw new OperationCanceledException();
          }
          ppObj.clean();
          monitor.worked(10);
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      performCluster.setUser(true);
      if (canProceedCluster()) {
        performCluster.schedule();
        performCluster.addJobChangeListener(new JobChangeAdapter(){
          @Override public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
          }
        }
);
      }
 else {
        TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (KmeansClusterViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}","private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (KmeansClusterViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      if (!canProceedCluster()) {
        return;
      }
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      final int noOfClusters=Integer.valueOf(noClusterTxt.getText()).intValue();
      final boolean isPreprocess=preprocessEnabled.getSelection();
      final String outputPath=layoutData.getOutputLabel().getText();
      TacitUtil tacitHelper=new TacitUtil();
      final List<Object> selectedFiles=layData.getSelectedFiles();
      tacitHelper.writeSummaryFile(outputPath);
      performCluster=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          Preprocessor ppObj=null;
          List<File> inputFiles=new ArrayList<File>();
          List<String> inFiles=null;
          try {
            ppObj=new Preprocessor(""String_Node_Str"",isPreprocess);
            inFiles=ppObj.processData(""String_Node_Str"",selectedFiles);
            for (            String string : inFiles) {
              inputFiles.add(new File(string));
            }
            monitor.worked(10);
          }
 catch (          IOException e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
catch (          Exception e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
          long startTime=System.currentTimeMillis();
          monitor.subTask(""String_Node_Str"");
          Date dateObj=new Date();
          boolean isSuccessful=KmeansClusterAnalysis.runClustering(noOfClusters,inputFiles,outputPath,dateObj);
          if (!isSuccessful)           return Status.CANCEL_STATUS;
          monitor.worked(80);
          ConsoleView.printlInConsoleln(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
          if (monitor.isCanceled()) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            throw new OperationCanceledException();
          }
          ppObj.clean();
          monitor.worked(10);
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      performCluster.setUser(true);
      if (canProceedCluster()) {
        performCluster.schedule();
        performCluster.addJobChangeListener(new JobChangeAdapter(){
          @Override public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
          }
        }
);
      }
 else {
        TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (KmeansClusterViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}",0.9901204819277108
168101,"private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (LdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      if (!canProceedCluster()) {
        return;
      }
      final int noOfTopics=Integer.valueOf(numberOfTopics.getText()).intValue();
      final boolean isPreprocess=preprocessEnabled.getSelection();
      final String outputPath=layoutData.getOutputLabel().getText();
      TacitUtil tacitHelper=new TacitUtil();
      final List<Object> selectedFiles=inputLayoutData.getSelectedFiles();
      tacitHelper.writeSummaryFile(outputPath);
      final String preFix=prefixTxt.getText();
      final boolean wordWeightFile=wordWeights.getSelection();
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          String topicModelDirPath=System.getProperty(""String_Node_Str"") + File.separator + ""String_Node_Str""+ ""String_Node_Str""+ String.valueOf(System.currentTimeMillis());
          Preprocessor ppObj=null;
          List<String> inFiles;
          try {
            ppObj=new Preprocessor(""String_Node_Str"",isPreprocess);
            inFiles=ppObj.processData(""String_Node_Str"",selectedFiles);
            for (            String filename : inFiles) {
              File srcFile=new File(filename);
              File destDir=new File(topicModelDirPath);
              try {
                FileUtils.copyFileToDirectory(srcFile,destDir,false);
              }
 catch (              IOException e) {
                e.printStackTrace();
                return Status.CANCEL_STATUS;
              }
            }
          }
 catch (          IOException e1) {
            e1.printStackTrace();
          }
catch (          Exception e1) {
            e1.printStackTrace();
          }
          lda.initialize(topicModelDirPath,noOfTopics,outputPath,preFix,wordWeightFile);
          long startTime=System.currentTimeMillis();
          Date dateObj=new Date();
          monitor.subTask(""String_Node_Str"");
          try {
            lda.doLDA(monitor,dateObj);
          }
 catch (          FileNotFoundException e) {
            e.printStackTrace();
            monitor.done();
            return Status.CANCEL_STATUS;
          }
catch (          IOException e) {
            e.printStackTrace();
            monitor.done();
            return Status.CANCEL_STATUS;
          }
          monitor.worked(20);
          if (monitor.isCanceled()) {
            return Status.CANCEL_STATUS;
          }
          ConsoleView.printlInConsoleln(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
          ppObj.clean();
          try {
            FileUtils.deleteDirectory(new File(topicModelDirPath));
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
          monitor.worked(10);
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      if (canProceedCluster()) {
        job.schedule();
        job.addJobChangeListener(new JobChangeAdapter(){
          @Override public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
          }
        }
);
      }
 else {
        TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (LdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}","private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (LdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      if (!canProceedCluster()) {
        return;
      }
      final int noOfTopics=Integer.valueOf(numberOfTopics.getText()).intValue();
      final boolean isPreprocess=preprocessEnabled.getSelection();
      final String outputPath=layoutData.getOutputLabel().getText();
      TacitUtil tacitHelper=new TacitUtil();
      final List<Object> selectedFiles=inputLayoutData.getSelectedFiles();
      tacitHelper.writeSummaryFile(outputPath);
      final String preFix=prefixTxt.getText();
      final boolean wordWeightFile=wordWeights.getSelection();
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          String topicModelDirPath=System.getProperty(""String_Node_Str"") + File.separator + ""String_Node_Str""+ ""String_Node_Str""+ String.valueOf(System.currentTimeMillis());
          Preprocessor ppObj=null;
          List<String> inFiles;
          try {
            ppObj=new Preprocessor(""String_Node_Str"",isPreprocess);
            inFiles=ppObj.processData(""String_Node_Str"",selectedFiles);
            for (            String filename : inFiles) {
              File srcFile=new File(filename);
              File destDir=new File(topicModelDirPath);
              try {
                FileUtils.copyFileToDirectory(srcFile,destDir,false);
              }
 catch (              IOException e) {
                e.printStackTrace();
                return Status.CANCEL_STATUS;
              }
            }
          }
 catch (          IOException e1) {
            e1.printStackTrace();
            return Status.CANCEL_STATUS;
          }
catch (          Exception e1) {
            e1.printStackTrace();
            return Status.CANCEL_STATUS;
          }
          lda.initialize(topicModelDirPath,noOfTopics,outputPath,preFix,wordWeightFile);
          long startTime=System.currentTimeMillis();
          Date dateObj=new Date();
          monitor.subTask(""String_Node_Str"");
          try {
            lda.doLDA(monitor,dateObj);
          }
 catch (          FileNotFoundException e) {
            e.printStackTrace();
            monitor.done();
            return Status.CANCEL_STATUS;
          }
catch (          IOException e) {
            e.printStackTrace();
            monitor.done();
            return Status.CANCEL_STATUS;
          }
          monitor.worked(20);
          if (monitor.isCanceled()) {
            return Status.CANCEL_STATUS;
          }
          ConsoleView.printlInConsoleln(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
          ppObj.clean();
          try {
            FileUtils.deleteDirectory(new File(topicModelDirPath));
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
          monitor.worked(10);
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      if (canProceedCluster()) {
        job.schedule();
        job.addJobChangeListener(new JobChangeAdapter(){
          @Override public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
          }
        }
);
      }
 else {
        TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (LdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}",0.9916615822656092
168102,"private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (ZlabelLdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      if (!canProceedJob()) {
        return;
      }
      final int noOfTopics=Integer.valueOf(topics.getText()).intValue();
      final boolean isPreprocess=preprocessEnabled.getSelection();
      final String outputPath=layoutData.getOutputLabel().getText();
      TacitUtil tacitHelper=new TacitUtil();
      final List<Object> selectedFiles=inputLayoutData.getSelectedFiles();
      tacitHelper.writeSummaryFile(outputPath);
      final String seedFilePath=seedFileText.getText();
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          String topicModelDirPath=System.getProperty(""String_Node_Str"") + File.separator + ""String_Node_Str""+ ""String_Node_Str""+ String.valueOf(System.currentTimeMillis());
          Preprocessor ppObj=null;
          List<String> inFiles=null;
          try {
            ppObj=new Preprocessor(""String_Node_Str"",isPreprocess);
            inFiles=ppObj.processData(""String_Node_Str"",selectedFiles);
          }
 catch (          IOException e1) {
            e1.printStackTrace();
          }
catch (          Exception e) {
            e.printStackTrace();
          }
          new File(topicModelDirPath).mkdir();
          for (          String filename : inFiles) {
            File srcFile=new File(filename);
            File destDir=new File(topicModelDirPath);
            try {
              FileUtils.copyFileToDirectory(srcFile,destDir,false);
            }
 catch (            IOException e) {
              e.printStackTrace();
              return Status.CANCEL_STATUS;
            }
          }
          long startTime=System.currentTimeMillis();
          Date dateObj=new Date();
          ZlabelTopicModelAnalysis zlda=new ZlabelTopicModelAnalysis(new SubProgressMonitor(monitor,70));
          monitor.subTask(""String_Node_Str"");
          try {
            zlda.invokeLDA(topicModelDirPath,seedFilePath,noOfTopics,outputPath,dateObj);
          }
 catch (          Exception e) {
            e.printStackTrace();
            monitor.done();
            return Status.CANCEL_STATUS;
          }
          if (monitor.isCanceled()) {
            return Status.CANCEL_STATUS;
          }
          System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
          ppObj.clean();
          monitor.worked(10);
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      if (canProceedJob()) {
        job.schedule();
        job.addJobChangeListener(new JobChangeAdapter(){
          @Override public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
          }
        }
);
      }
 else {
        TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (ZlabelLdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}","private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (ZlabelLdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      if (!canProceedJob()) {
        return;
      }
      final int noOfTopics=Integer.valueOf(topics.getText()).intValue();
      final boolean isPreprocess=preprocessEnabled.getSelection();
      final String outputPath=layoutData.getOutputLabel().getText();
      TacitUtil tacitHelper=new TacitUtil();
      final List<Object> selectedFiles=inputLayoutData.getSelectedFiles();
      tacitHelper.writeSummaryFile(outputPath);
      final String seedFilePath=seedFileText.getText();
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          String topicModelDirPath=System.getProperty(""String_Node_Str"") + File.separator + ""String_Node_Str""+ ""String_Node_Str""+ String.valueOf(System.currentTimeMillis());
          Preprocessor ppObj=null;
          List<String> inFiles=null;
          try {
            ppObj=new Preprocessor(""String_Node_Str"",isPreprocess);
            inFiles=ppObj.processData(""String_Node_Str"",selectedFiles);
          }
 catch (          IOException e1) {
            e1.printStackTrace();
            return Status.CANCEL_STATUS;
          }
catch (          Exception e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
          new File(topicModelDirPath).mkdir();
          for (          String filename : inFiles) {
            File srcFile=new File(filename);
            File destDir=new File(topicModelDirPath);
            try {
              FileUtils.copyFileToDirectory(srcFile,destDir,false);
            }
 catch (            IOException e) {
              e.printStackTrace();
              return Status.CANCEL_STATUS;
            }
          }
          long startTime=System.currentTimeMillis();
          Date dateObj=new Date();
          ZlabelTopicModelAnalysis zlda=new ZlabelTopicModelAnalysis(new SubProgressMonitor(monitor,70));
          monitor.subTask(""String_Node_Str"");
          try {
            zlda.invokeLDA(topicModelDirPath,seedFilePath,noOfTopics,outputPath,dateObj);
          }
 catch (          Exception e) {
            e.printStackTrace();
            monitor.done();
            return Status.CANCEL_STATUS;
          }
          if (monitor.isCanceled()) {
            return Status.CANCEL_STATUS;
          }
          System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
          ppObj.clean();
          monitor.worked(10);
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      if (canProceedJob()) {
        job.schedule();
        job.addJobChangeListener(new JobChangeAdapter(){
          @Override public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
          }
        }
);
      }
 else {
        TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (ZlabelLdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}",0.9910382513661202
168103,"private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (CooccurrenceWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      if (!canProceed()) {
        return;
      }
      final String outputPath=layoutData.getOutputLabel().getText();
      final boolean isPreprocess=preprocessEnabled.getSelection();
      TacitUtil tacitHelper=new TacitUtil();
      final List<Object> selectedFiles=inputLayoutData.getSelectedFiles();
      tacitHelper.writeSummaryFile(outputPath);
      final boolean isBuildMatrix=buildMAtrix.getSelection();
      final String windowSizeStr=windowSize.getText();
      final String thresholdLimit=thresholdValue.getText();
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      cooccurrenceAnalysisJob=new Job(""String_Node_Str""){
        private String seedFilePath=seedFile.getText();
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",selectedFiles.size() + 40);
          Preprocessor ppObj=null;
          List<String> inFiles=null;
          List<String> seedList=null;
          try {
            ppObj=new Preprocessor(""String_Node_Str"",isPreprocess);
            inFiles=ppObj.processData(""String_Node_Str"",selectedFiles);
            List<Object> seedObjs=new ArrayList<Object>();
            seedObjs.add(seedFilePath);
            seedList=ppObj.processData(""String_Node_Str"",seedObjs);
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
catch (          Exception e) {
            e.printStackTrace();
          }
          ;
          long startTime=System.currentTimeMillis();
          boolean result=new CooccurrenceAnalysis().invokeCooccurrence(inFiles,seedList.get(0),outputPath,windowSizeStr,thresholdLimit,isBuildMatrix,monitor);
          ppObj.clean();
          monitor.worked(5);
          if (result) {
            ConsoleView.printlInConsoleln(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
            return Status.OK_STATUS;
          }
 else {
            return Status.CANCEL_STATUS;
          }
        }
      }
;
      cooccurrenceAnalysisJob.setUser(true);
      if (canProceed()) {
        cooccurrenceAnalysisJob.schedule();
        cooccurrenceAnalysisJob.addJobChangeListener(new JobChangeAdapter(){
          @Override public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
          }
        }
);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (CooccurrenceWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}","private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (CooccurrenceWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      if (!canProceed()) {
        return;
      }
      final String outputPath=layoutData.getOutputLabel().getText();
      final boolean isPreprocess=preprocessEnabled.getSelection();
      TacitUtil tacitHelper=new TacitUtil();
      final List<Object> selectedFiles=inputLayoutData.getSelectedFiles();
      tacitHelper.writeSummaryFile(outputPath);
      final boolean isBuildMatrix=buildMAtrix.getSelection();
      final String windowSizeStr=windowSize.getText();
      final String thresholdLimit=thresholdValue.getText();
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      cooccurrenceAnalysisJob=new Job(""String_Node_Str""){
        private String seedFilePath=seedFile.getText();
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",selectedFiles.size() + 40);
          Preprocessor ppObj=null;
          List<String> inFiles=null;
          List<String> seedList=null;
          try {
            ppObj=new Preprocessor(""String_Node_Str"",isPreprocess);
            inFiles=ppObj.processData(""String_Node_Str"",selectedFiles);
            List<Object> seedObjs=new ArrayList<Object>();
            seedObjs.add(seedFilePath);
            seedList=ppObj.processData(""String_Node_Str"",seedObjs);
          }
 catch (          IOException e) {
            return Status.CANCEL_STATUS;
          }
catch (          Exception e) {
            return Status.CANCEL_STATUS;
          }
          ;
          long startTime=System.currentTimeMillis();
          boolean result=new CooccurrenceAnalysis().invokeCooccurrence(inFiles,seedList.get(0),outputPath,windowSizeStr,thresholdLimit,isBuildMatrix,monitor);
          ppObj.clean();
          monitor.worked(5);
          if (result) {
            ConsoleView.printlInConsoleln(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
            return Status.OK_STATUS;
          }
 else {
            return Status.CANCEL_STATUS;
          }
        }
      }
;
      cooccurrenceAnalysisJob.setUser(true);
      if (canProceed()) {
        cooccurrenceAnalysisJob.schedule();
        cooccurrenceAnalysisJob.addJobChangeListener(new JobChangeAdapter(){
          @Override public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
          }
        }
);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (CooccurrenceWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}",0.9890791759741872
168104,"private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (StandardWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      if (!canProceed()) {
        return;
      }
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      final String outputPath=layoutData.getOutputLabel().getText();
      TacitUtil tacitHelper=new TacitUtil();
      final List<Object> inputObjs=inputLayoutData.getSelectedFiles();
      tacitHelper.writeSummaryFile(outputPath);
      final List<String> dictionaryFiles=dictLayoutData.getSelectedFiles(false);
      final boolean isStemDic=stemEnabled.getSelection();
      final boolean doPennCounts=defaultTags.getSelection();
      final boolean doWordDistribution=wordDistribution.getSelection();
      final boolean ppValue=preprocessButton.getSelection();
      final boolean wcType=weightedWordCountButton.getSelection();
      final boolean datFile=createDATFile.getSelection();
      final boolean doPOSTags=createPOSTags.getSelection();
      final Date dateObj=new Date();
      wordCountJob=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          monitor.beginTask(""String_Node_Str"",(inputObjs.size() * 15) + 15);
          WordCountPlugin wc=new WordCountPlugin(wcType,dateObj,isStemDic,doPennCounts,doWordDistribution,datFile,doPOSTags,outputPath,monitor);
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",null,form);
          Preprocessor ppObj;
          try {
            ppObj=new Preprocessor(""String_Node_Str"",ppValue);
            List<String> inputFiles=ppObj.processData(""String_Node_Str"",inputObjs);
            monitor.worked(5);
            wc.countWords(inputFiles,dictionaryFiles);
            ppObj.clean();
            monitor.worked(1);
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
catch (          Exception e) {
            e.printStackTrace();
          }
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      wordCountJob.setUser(true);
      if (canProceed()) {
        wordCountJob.schedule();
        wordCountJob.addJobChangeListener(new JobChangeAdapter(){
          @Override public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
          }
        }
);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (StandardWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}","private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (StandardWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      if (!canProceed()) {
        return;
      }
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      final String outputPath=layoutData.getOutputLabel().getText();
      TacitUtil tacitHelper=new TacitUtil();
      final List<Object> inputObjs=inputLayoutData.getSelectedFiles();
      tacitHelper.writeSummaryFile(outputPath);
      final List<String> dictionaryFiles=dictLayoutData.getSelectedFiles(false);
      final boolean isStemDic=stemEnabled.getSelection();
      final boolean doPennCounts=defaultTags.getSelection();
      final boolean doWordDistribution=wordDistribution.getSelection();
      final boolean ppValue=preprocessButton.getSelection();
      final boolean wcType=weightedWordCountButton.getSelection();
      final boolean datFile=createDATFile.getSelection();
      final boolean doPOSTags=createPOSTags.getSelection();
      final Date dateObj=new Date();
      wordCountJob=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          monitor.beginTask(""String_Node_Str"",(inputObjs.size() * 15) + 15);
          WordCountPlugin wc=new WordCountPlugin(wcType,dateObj,isStemDic,doPennCounts,doWordDistribution,datFile,doPOSTags,outputPath,monitor);
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",null,form);
          Preprocessor ppObj;
          try {
            ppObj=new Preprocessor(""String_Node_Str"",ppValue);
            List<String> inputFiles=ppObj.processData(""String_Node_Str"",inputObjs);
            monitor.worked(5);
            wc.countWords(inputFiles,dictionaryFiles);
            ppObj.clean();
            monitor.worked(1);
          }
 catch (          IOException e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
catch (          Exception e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      wordCountJob.setUser(true);
      if (canProceed()) {
        wordCountJob.schedule();
        wordCountJob.addJobChangeListener(new JobChangeAdapter(){
          @Override public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
          }
        }
);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (StandardWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}",0.989233193277311
168105,"private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (WeightedWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      if (!canProceed()) {
        return;
      }
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      final String stopWordPath=CommonUiActivator.getDefault().getPreferenceStore().getString(IPreprocessorSettingsConstant.STOP_PATH);
      final String outputPath=layoutData.getOutputLabel().getText();
      String fileName=""String_Node_Str"";
      DateFormat df=new SimpleDateFormat(""String_Node_Str"");
      final Date dateobj=new Date();
      if (weightedWordCountButton.getSelection()) {
        fileName=""String_Node_Str"" + fileName + ""String_Node_Str""+ df.format(dateobj);
      }
 else {
        fileName=""String_Node_Str"" + fileName + ""String_Node_Str""+ df.format(dateobj);
      }
      final File oFile=new File(outputPath + File.separator + fileName+ ""String_Node_Str"");
      final File sFile=new File(outputPath + File.separator + fileName+ ""String_Node_Str"");
      TacitUtil tacitHelper=new TacitUtil();
      final List<Object> inputFiles=inputLayoutData.getSelectedFiles();
      tacitHelper.writeSummaryFile(outputPath);
      final Map<String,String[]> fileCorpusMap=tacitHelper.getFileCorpusMembership();
      final List<String> dictionaryFiles=dictLayoutData.getSelectedFiles(false);
      final boolean isLiwcStemming=false;
      final boolean isSnowBall=false;
      final boolean isSpss=spssRawFile.getSelection();
      final boolean isWdist=wordDistributionFile.getSelection();
      final boolean isStemDic=false;
      final boolean isPreprocess=false;
      wordCountJob=new Job(""String_Node_Str""){
        private String dirPath;
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          List<File> selectedFiles=new ArrayList<File>();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",inputFiles.size() + 20);
          Preprocessor ppObj=null;
          List<String> inFiles;
          try {
            ppObj=new Preprocessor(""String_Node_Str"",isPreprocess);
            inFiles=ppObj.processData(""String_Node_Str"",inputFiles);
            Display.getDefault().syncExec(new Runnable(){
              @Override public void run(){
                if (weightedWordCountButton.getSelection()) {
                  wordCountController=new WordCountApi(true);
                }
 else {
                  wordCountController=new WordCountApi(false);
                }
              }
            }
);
            for (            String f : inFiles) {
              selectedFiles.add(new File(f));
            }
            wordCountController.wordCount(monitor,selectedFiles,dictionaryFiles,isPreprocess ? stopWordPath : ""String_Node_Str"",outputPath,""String_Node_Str"",true,isLiwcStemming,isSnowBall,isSpss,isWdist,isStemDic,oFile,sFile,dateobj,fileCorpusMap);
            ppObj.clean();
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
catch (          DictionaryInvalidException die) {
            die.printStackTrace();
            return Status.CANCEL_STATUS;
          }
catch (          Exception e) {
            e.printStackTrace();
          }
          monitor.subTask(""String_Node_Str"");
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      wordCountJob.setUser(true);
      if (canProceed()) {
        wordCountJob.schedule();
        wordCountJob.addJobChangeListener(new JobChangeAdapter(){
          @Override public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
          }
        }
);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (WeightedWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}","private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (WeightedWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      if (!canProceed()) {
        return;
      }
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      final String stopWordPath=CommonUiActivator.getDefault().getPreferenceStore().getString(IPreprocessorSettingsConstant.STOP_PATH);
      final String outputPath=layoutData.getOutputLabel().getText();
      String fileName=""String_Node_Str"";
      DateFormat df=new SimpleDateFormat(""String_Node_Str"");
      final Date dateobj=new Date();
      if (weightedWordCountButton.getSelection()) {
        fileName=""String_Node_Str"" + fileName + ""String_Node_Str""+ df.format(dateobj);
      }
 else {
        fileName=""String_Node_Str"" + fileName + ""String_Node_Str""+ df.format(dateobj);
      }
      final File oFile=new File(outputPath + File.separator + fileName+ ""String_Node_Str"");
      final File sFile=new File(outputPath + File.separator + fileName+ ""String_Node_Str"");
      TacitUtil tacitHelper=new TacitUtil();
      final List<Object> inputFiles=inputLayoutData.getSelectedFiles();
      tacitHelper.writeSummaryFile(outputPath);
      final Map<String,String[]> fileCorpusMap=tacitHelper.getFileCorpusMembership();
      final List<String> dictionaryFiles=dictLayoutData.getSelectedFiles(false);
      final boolean isLiwcStemming=false;
      final boolean isSnowBall=false;
      final boolean isSpss=spssRawFile.getSelection();
      final boolean isWdist=wordDistributionFile.getSelection();
      final boolean isStemDic=false;
      final boolean isPreprocess=false;
      wordCountJob=new Job(""String_Node_Str""){
        private String dirPath;
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          List<File> selectedFiles=new ArrayList<File>();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",inputFiles.size() + 20);
          Preprocessor ppObj=null;
          List<String> inFiles;
          try {
            ppObj=new Preprocessor(""String_Node_Str"",isPreprocess);
            inFiles=ppObj.processData(""String_Node_Str"",inputFiles);
            Display.getDefault().syncExec(new Runnable(){
              @Override public void run(){
                if (weightedWordCountButton.getSelection()) {
                  wordCountController=new WordCountApi(true);
                }
 else {
                  wordCountController=new WordCountApi(false);
                }
              }
            }
);
            for (            String f : inFiles) {
              selectedFiles.add(new File(f));
            }
            wordCountController.wordCount(monitor,selectedFiles,dictionaryFiles,isPreprocess ? stopWordPath : ""String_Node_Str"",outputPath,""String_Node_Str"",true,isLiwcStemming,isSnowBall,isSpss,isWdist,isStemDic,oFile,sFile,dateobj,fileCorpusMap);
            ppObj.clean();
          }
 catch (          IOException e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
catch (          DictionaryInvalidException die) {
            die.printStackTrace();
            return Status.CANCEL_STATUS;
          }
catch (          Exception e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
          monitor.subTask(""String_Node_Str"");
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      wordCountJob.setUser(true);
      if (canProceed()) {
        wordCountJob.schedule();
        wordCountJob.addJobChangeListener(new JobChangeAdapter(){
          @Override public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
          }
        }
);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (WeightedWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}",0.9730254220842228
168106,"private boolean canItProceed(Map<String,List<String>> classPaths){
  if (classPaths.size() < 2 && classLayoutData.getTree().getItemCount() < 2) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
 else   if (classLayoutData.getTree().getItemCount() > 1 && classPaths.size() < 2) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
 else {
    form.getMessageManager().removeMessage(""String_Node_Str"");
  }
  if (kValueText.getText().isEmpty()) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
 else {
    form.getMessageManager().removeMessage(""String_Node_Str"");
  }
  if (!outputPathListener(outputPath,""String_Node_Str"")) {
    return false;
  }
  isClassificationEnabled=classificationEnabled.getSelection();
  if (isClassificationEnabled) {
    if (!inputPathListener(classifyInputText,""String_Node_Str"")) {
      return false;
    }
  }
 else {
    form.getMessageManager().removeMessage(""String_Node_Str"");
  }
  return true;
}","private boolean canItProceed(Map<String,List<String>> classPaths){
  if (classPaths.size() < 2 && classLayoutData.getTree().getItemCount() < 2) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
 else   if (classLayoutData.getTree().getItemCount() > 1 && classPaths.size() < 2) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
 else {
    form.getMessageManager().removeMessage(""String_Node_Str"");
  }
  if (kValueText.getText().isEmpty()) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
 else   if (Integer.parseInt(kValueText.getText()) < 2) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
 else {
    form.getMessageManager().removeMessage(""String_Node_Str"");
  }
  if (!outputPathListener(outputPath,""String_Node_Str"")) {
    return false;
  }
  isClassificationEnabled=classificationEnabled.getSelection();
  if (isClassificationEnabled) {
    if (!inputPathListener(classifyInputText,""String_Node_Str"")) {
      return false;
    }
  }
 else {
    form.getMessageManager().removeMessage(""String_Node_Str"");
  }
  return true;
}",0.9264240506329114
168107,"/** 
 * Adds ""Classify"" and ""Help"" buttons on the Naive Bayes Classifier form
 */
private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    String classificationInputDir;
    String outputDir;
    String tempkValue;
    @Override public void run(){
      final ArrayList<String> trainingDataPaths=new ArrayList<String>();
      final HashMap<String,List<String>> tempClassPaths=new HashMap<String,List<String>>();
      final NaiveBayesClassifier nbc=new NaiveBayesClassifier();
      classPaths=new HashMap<String,List<String>>();
      consolidateSelectedFiles(classLayoutData,classPaths);
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
      job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          Date dateObj=new Date();
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              outputDir=outputPath.getText();
              classificationInputDir=classifyInputText.getText();
              tempkValue=kValueText.getText();
              isPreprocessEnabled=preprocessEnabled.getSelection();
              isClassificationEnabled=classificationEnabled.getSelection();
            }
          }
);
          HashMap<Integer,String> perf;
          if (monitor.isCanceled()) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return handledCancelRequest(""String_Node_Str"");
          }
          NaiveBayesClassifierWeka cv;
          int kValue=Integer.parseInt(tempkValue);
          monitor.worked(1);
          if (isPreprocessEnabled) {
            monitor.subTask(""String_Node_Str"");
            try {
              preprocessTask=new Preprocess(""String_Node_Str"");
              for (              String dirPath : classPaths.keySet()) {
                if (monitor.isCanceled()) {
                  TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
                  return handledCancelRequest(""String_Node_Str"");
                }
                List<String> selectedFiles=classPaths.get(dirPath);
                String preprocessedDirPath=preprocessTask.doPreprocessing(selectedFiles,new File(dirPath).getName());
                trainingDataPaths.add(preprocessedDirPath);
                List<String> temp=new ArrayList<String>();
                for (                File f : new File(preprocessedDirPath).listFiles()) {
                  temp.add(f.getAbsolutePath());
                }
                tempClassPaths.put(preprocessedDirPath,temp);
                monitor.worked(1);
                if (monitor.isCanceled()) {
                  TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
                  return handledCancelRequest(""String_Node_Str"");
                }
              }
              if (monitor.isCanceled()) {
                TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
                return handledCancelRequest(""String_Node_Str"");
              }
              if (isClassificationEnabled) {
                ArrayList<String> files=new ArrayList<String>();
                nbc.selectAllFiles(classificationInputDir,files);
                classificationInputDir=preprocessTask.doPreprocessing(files,new File(classificationInputDir).getName());
                monitor.worked(1);
              }
              if (monitor.isCanceled()) {
                TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
                return handledCancelRequest(""String_Node_Str"");
              }
            }
 catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
            monitor.worked(10);
          }
 else {
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            try {
              nbc.createTempDirectories(classPaths,trainingDataPaths,monitor);
            }
 catch (            IOException e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
            monitor.worked(10);
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
          }
          try {
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            monitor.subTask(""String_Node_Str"");
            if (!isPreprocessEnabled) {
              cv=new NaiveBayesClassifierWeka(classPaths);
            }
 else {
              cv=new NaiveBayesClassifierWeka(tempClassPaths);
            }
            cv.initializeInstances();
            cv.doCrossValidate(kValue,monitor,dateObj);
            monitor.worked(40);
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            if (isClassificationEnabled) {
              monitor.subTask(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              cv.doClassify(classificationInputDir,outputDir,monitor,dateObj);
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
            monitor.worked(15);
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            if (!isPreprocessEnabled)             nbc.deleteTempDirectories(trainingDataPaths);
            monitor.worked(10);
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
          }
 catch (          IOException e) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return handleException(monitor,e,""String_Node_Str"");
          }
catch (          EvalError e) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return handleException(monitor,e,""String_Node_Str"");
          }
catch (          Exception e) {
            e.printStackTrace();
          }
          if (monitor.isCanceled()) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return handledCancelRequest(""String_Node_Str"");
          }
          if (isPreprocessEnabled) {
            preprocessTask.clean();
          }
          monitor.worked(100);
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      canProceed=canItProceed(classPaths);
      if (canProceed) {
        job.schedule();
        job.addJobChangeListener(new JobChangeAdapter(){
          public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
          }
        }
);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}","/** 
 * Adds ""Classify"" and ""Help"" buttons on the Naive Bayes Classifier form
 */
private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    String classificationInputDir;
    String outputDir;
    String tempkValue;
    @Override public void run(){
      final ArrayList<String> trainingDataPaths=new ArrayList<String>();
      final HashMap<String,List<String>> tempClassPaths=new HashMap<String,List<String>>();
      final NaiveBayesClassifier nbc=new NaiveBayesClassifier();
      classPaths=new HashMap<String,List<String>>();
      consolidateSelectedFiles(classLayoutData,classPaths);
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
      job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          Date dateObj=new Date();
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              outputDir=outputPath.getText();
              classificationInputDir=classifyInputText.getText();
              tempkValue=kValueText.getText();
              isPreprocessEnabled=preprocessEnabled.getSelection();
              isClassificationEnabled=classificationEnabled.getSelection();
            }
          }
);
          HashMap<Integer,String> perf;
          if (monitor.isCanceled()) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return handledCancelRequest(""String_Node_Str"");
          }
          NaiveBayesClassifierWeka cv;
          int kValue=Integer.parseInt(tempkValue);
          monitor.worked(1);
          if (isPreprocessEnabled) {
            ConsoleView.printlInConsole(""String_Node_Str"");
            monitor.subTask(""String_Node_Str"");
            try {
              preprocessTask=new Preprocess(""String_Node_Str"");
              for (              String dirPath : classPaths.keySet()) {
                if (monitor.isCanceled()) {
                  TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
                  return handledCancelRequest(""String_Node_Str"");
                }
                List<String> selectedFiles=classPaths.get(dirPath);
                String preprocessedDirPath=preprocessTask.doPreprocessing(selectedFiles,new File(dirPath).getName());
                trainingDataPaths.add(preprocessedDirPath);
                List<String> temp=new ArrayList<String>();
                for (                File f : new File(preprocessedDirPath).listFiles()) {
                  temp.add(f.getAbsolutePath());
                }
                tempClassPaths.put(preprocessedDirPath,temp);
                monitor.worked(1);
                if (monitor.isCanceled()) {
                  TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
                  return handledCancelRequest(""String_Node_Str"");
                }
              }
              if (monitor.isCanceled()) {
                TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
                return handledCancelRequest(""String_Node_Str"");
              }
              if (isClassificationEnabled) {
                ArrayList<String> files=new ArrayList<String>();
                nbc.selectAllFiles(classificationInputDir,files);
                classificationInputDir=preprocessTask.doPreprocessing(files,new File(classificationInputDir).getName());
                monitor.worked(1);
              }
              if (monitor.isCanceled()) {
                TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
                return handledCancelRequest(""String_Node_Str"");
              }
            }
 catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
            monitor.worked(10);
          }
 else {
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            try {
              nbc.createTempDirectories(classPaths,trainingDataPaths,monitor);
            }
 catch (            IOException e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
            monitor.worked(10);
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
          }
          try {
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            monitor.subTask(""String_Node_Str"");
            if (!isPreprocessEnabled) {
              cv=new NaiveBayesClassifierWeka(classPaths);
            }
 else {
              cv=new NaiveBayesClassifierWeka(tempClassPaths);
            }
            cv.initializeInstances();
            cv.doCrossValidate(kValue,monitor,dateObj);
            monitor.worked(40);
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            if (isClassificationEnabled) {
              monitor.subTask(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              cv.doClassify(classificationInputDir,outputDir,monitor,dateObj);
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
            monitor.worked(15);
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            if (!isPreprocessEnabled)             nbc.deleteTempDirectories(trainingDataPaths);
            monitor.worked(10);
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
          }
 catch (          IOException e) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return handleException(monitor,e,""String_Node_Str"");
          }
catch (          EvalError e) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return handleException(monitor,e,""String_Node_Str"");
          }
catch (          Exception e) {
            e.printStackTrace();
          }
          if (monitor.isCanceled()) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return handledCancelRequest(""String_Node_Str"");
          }
          if (isPreprocessEnabled) {
            preprocessTask.clean();
          }
          monitor.worked(100);
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      canProceed=canItProceed(classPaths);
      if (canProceed) {
        job.schedule();
        job.addJobChangeListener(new JobChangeAdapter(){
          @Override public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
          }
        }
);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}",0.9961394220163248
168108,"public void done(IJobChangeEvent event){
  if (!event.getResult().isOK()) {
    TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
  }
 else {
    TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
  }
}","@Override public void done(IJobChangeEvent event){
  if (!event.getResult().isOK()) {
    TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
  }
 else {
    TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
  }
}",0.987012987012987
168109,"public boolean doClassify(String classificationInputDir,String classificationOutputDir,IProgressMonitor monitor,Date dateObj) throws Exception {
  DateFormat df=new SimpleDateFormat(""String_Node_Str"");
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  String outputPath=classificationOutputDir + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ df.format(dateObj);
  BufferedWriter bw=new BufferedWriter(new FileWriter(new File(outputPath + ""String_Node_Str"")));
  Instances rawTestData=new DirectoryToArff().createTestInstances(classificationInputDir);
  Instances filteredTestData=Filter.useFilter(rawTestData,filter);
  Evaluation testEval=new Evaluation(dataFiltered);
  testEval.evaluateModel(nbc,filteredTestData);
  FastVector predictions=testEval.predictions();
  for (int i=0; i < predictions.size(); i++) {
    NominalPrediction np=(NominalPrediction)predictions.elementAt(i);
    int pred=(int)np.predicted();
    bw.write(DirectoryToArff.instanceIdNameMap.get(i) + ""String_Node_Str"" + dataFiltered.classAttribute().value(pred)+ ""String_Node_Str"");
  }
  return true;
}","public boolean doClassify(String classificationInputDir,String classificationOutputDir,IProgressMonitor monitor,Date dateObj) throws Exception {
  DateFormat df=new SimpleDateFormat(""String_Node_Str"");
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  Instances rawTestData=new DirectoryToArff().createTestInstances(classificationInputDir);
  Instances filteredTestData=Filter.useFilter(rawTestData,filter);
  Evaluation testEval=new Evaluation(dataFiltered);
  testEval.evaluateModel(nbc,filteredTestData);
  FastVector predictions=testEval.predictions();
  String outputPath=classificationOutputDir + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ df.format(dateObj);
  BufferedWriter bw=new BufferedWriter(new FileWriter(new File(outputPath + ""String_Node_Str"")));
  bw.write(""String_Node_Str"");
  for (int i=0; i < predictions.size(); i++) {
    NominalPrediction np=(NominalPrediction)predictions.elementAt(i);
    int pred=(int)np.predicted();
    bw.write(DirectoryToArff.instanceIdNameMap.get(i) + ""String_Node_Str"" + getClassName(dataFiltered.classAttribute().value(pred))+ ""String_Node_Str"");
  }
  bw.close();
  return true;
}",0.4612691466083151
168110,"private static void crossValidate(Classifier nbc,Instances dataFiltered,int k) throws Exception {
  Evaluation eval=new Evaluation(dataFiltered);
  eval.crossValidateModel(nbc,dataFiltered,k,new Random(1));
  ConsoleView.printlInConsoleln(eval.toSummaryString(""String_Node_Str"",false));
  double[][] confusion=eval.confusionMatrix();
  for (int i=0; i < confusion.length; i++) {
    for (int j=0; j < confusion[0].length; j++)     ConsoleView.printlInConsole(confusion[i][j] + ""String_Node_Str"");
    ConsoleView.printlInConsoleln();
  }
  ConsoleView.printlInConsoleln(""String_Node_Str"" + calculateAccuracy(eval.predictions()));
}","private static void crossValidate(Classifier nbc,Instances dataFiltered,int k) throws Exception {
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  Evaluation eval=new Evaluation(dataFiltered);
  eval.crossValidateModel(nbc,dataFiltered,k,new Random(1));
  ConsoleView.printlInConsoleln(eval.toSummaryString(""String_Node_Str"",false));
  String[] attributes={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  HashMap<String,HashMap<String,String>> detailedResults=new HashMap<String,HashMap<String,String>>();
  String[] temp=eval.toClassDetailsString().toString().split(""String_Node_Str"");
  for (int i=3; i < temp.length - 1; i++) {
    String[] tmp=temp[i].split(""String_Node_Str"");
    String cName=getClassName(tmp[tmp.length - 1]);
    HashMap<String,String> classDetails=new HashMap<String,String>();
    int index=0;
    for (    String val : tmp) {
      val=val.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (val.length() != 0) {
        classDetails.put(attributes[index],val);
        index++;
      }
      if (index == attributes.length)       break;
    }
    detailedResults.put(cName,classDetails);
  }
  StringBuilder header=new StringBuilder();
  header.append(""String_Node_Str"" + ""String_Node_Str"");
  for (  String attr : attributes)   header.append(attr + ""String_Node_Str"");
  ConsoleView.printlInConsoleln(new String(header));
  for (  String cName : detailedResults.keySet()) {
    StringBuilder cDetails=new StringBuilder();
    cDetails.append(cName + ""String_Node_Str"");
    for (    String attr : attributes) {
      cDetails.append(detailedResults.get(cName).get(attr) + ""String_Node_Str"");
    }
    ConsoleView.printlInConsoleln(new String(cDetails));
  }
  ConsoleView.printlInConsoleln();
  ConsoleView.printlInConsoleln(""String_Node_Str"" + calculateAccuracy(eval.predictions()));
}",0.259904912836767
168111,"@Override public void selectionChanged(IFormPart part,ISelection selection){
  corpusMgmtViewform.getMessageManager().removeAllMessages();
  selectedCorpusClass=(CorpusClass)((IStructuredSelection)selection).getFirstElement();
  classNameTxt.setText(selectedCorpusClass.getClassName());
  classPathTxt.setText(selectedCorpusClass.getClassPath());
  CorpusMangementValidation.validateClassData(selectedCorpusClass,corpusMgmtViewform);
  if ((selectedCorpusClass.getParent().getDatatype() != CMDataType.REDDIT_JSON && selectedCorpusClass.getParent().getDatatype() != CMDataType.TWITTER_JSON)) {
    keyFields.setVisible(false);
    keyFieldTxt.setVisible(false);
  }
 else {
    keyFields.setVisible(true);
    keyFieldTxt.setVisible(true);
    keyFieldTxt.setText(selectedCorpusClass.getKeyTextFields());
    if (keyFieldTxt.getText().isEmpty()) {
      if (selectedCorpusClass.getParent().getDatatype() == CMDataType.REDDIT_JSON)       keyFieldTxt.setText(QueryProcessorConstants.DEFAULT_REDDIT_DATA_FIELDS);
 else       if (selectedCorpusClass.getParent().getDatatype() == CMDataType.TWITTER_JSON)       keyFieldTxt.setText(QueryProcessorConstants.DEFAULT_TWITTER_DATA_FIELDS);
    }
  }
}","@Override public void selectionChanged(IFormPart part,ISelection selection){
  corpusMgmtViewform.getMessageManager().removeAllMessages();
  selectedCorpusClass=(CorpusClass)((IStructuredSelection)selection).getFirstElement();
  classNameTxt.setText(selectedCorpusClass.getClassName());
  classPathTxt.setText(selectedCorpusClass.getClassPath());
  CorpusMangementValidation.validateClassData(selectedCorpusClass,corpusMgmtViewform);
  if ((selectedCorpusClass.getParent().getDatatype() != CMDataType.REDDIT_JSON && selectedCorpusClass.getParent().getDatatype() != CMDataType.TWITTER_JSON)) {
    keyFields.setVisible(false);
    keyFieldTxt.setVisible(false);
    selectedCorpusClass.setKeyTextFields(""String_Node_Str"");
  }
 else {
    keyFields.setVisible(true);
    keyFieldTxt.setVisible(true);
    keyFieldTxt.setText(selectedCorpusClass.getKeyTextFields());
    if (keyFieldTxt.getText().isEmpty()) {
      if (selectedCorpusClass.getParent().getDatatype() == CMDataType.REDDIT_JSON)       keyFieldTxt.setText(QueryProcessorConstants.DEFAULT_REDDIT_DATA_FIELDS);
 else       if (selectedCorpusClass.getParent().getDatatype() == CMDataType.TWITTER_JSON)       keyFieldTxt.setText(QueryProcessorConstants.DEFAULT_TWITTER_DATA_FIELDS);
    }
    selectedCorpusClass.setKeyTextFields(keyFieldTxt.getText());
  }
}",0.9497206703910616
168112,"@SuppressWarnings(""String_Node_Str"") public static void removeCorpus(Corpus corpus,Boolean isCorpus){
  String corpusLocation=rootDir + corpus.getCorpusName();
  if (isCorpus) {
    try {
      new File(corpusLocation + System.getProperty(""String_Node_Str"") + ""String_Node_Str"").delete();
      FileUtils.deleteDirectory(new File(corpusLocation));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    return;
  }
  File[] classes=new File(corpusLocation).listFiles();
  HashMap<String,Boolean> oldClasses=new HashMap<String,Boolean>();
  if (classes == null) {
    return;
  }
  for (  File f : classes) {
    if (f.isDirectory()) {
      oldClasses.put(f.getAbsolutePath(),false);
    }
  }
  ArrayList<String> newClasses=new ArrayList<String>();
  int numNewClass=corpus.getClasses().size();
  for (int i=0; i < numNewClass; i++) {
    String classPath=corpus.getClasses().get(i).getTacitLocation();
    newClasses.add(classPath);
    if (oldClasses.get(classPath) != null) {
      oldClasses.put(classPath,true);
    }
  }
  Iterator<Entry<String,Boolean>> it=oldClasses.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry<String,Boolean> curr=it.next();
    String classPath=curr.getKey();
    if (!curr.getValue()) {
      try {
        FileUtils.deleteDirectory(new File(classPath));
        it.remove();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  String metaFile=corpusLocation + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
  JSONArray analysisArray=new JSONArray();
  int numAnalysis=0;
  if (!new File(metaFile).exists()) {
    JSONParser parser=new JSONParser();
    try {
      analysisArray=(JSONArray)((JSONObject)parser.parse(new FileReader(metaFile))).get(""String_Node_Str"");
      numAnalysis=(Integer)((JSONObject)parser.parse(new FileReader(metaFile))).get(""String_Node_Str"");
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
catch (    ParseException e) {
      e.printStackTrace();
    }
  }
  File metaFp=new File(metaFile);
  JSONObject jsonObj=new JSONObject();
  jsonObj.put(""String_Node_Str"",corpus.getCorpusName());
  jsonObj.put(""String_Node_Str"",corpus.getCorpusId());
  jsonObj.put(""String_Node_Str"",corpus.getDatatype().toString());
  jsonObj.put(""String_Node_Str"",corpus.getClasses().size());
  int numClasses=corpus.getClasses().size();
  ArrayList<ICorpusClass> corporaClasses=(ArrayList<ICorpusClass>)corpus.getClasses();
  JSONArray classArray=new JSONArray();
  for (int i=0; i < numClasses; i++) {
    CorpusClass currClass=(CorpusClass)corporaClasses.get(i);
    JSONObject classObj=new JSONObject();
    classObj.put(""String_Node_Str"",currClass.getClassName());
    classObj.put(""String_Node_Str"",currClass.getClassPath());
    classObj.put(""String_Node_Str"",corpusLocation + System.getProperty(""String_Node_Str"") + currClass.getClassName());
    classObj.put(""String_Node_Str"",currClass.getKeyTextFields());
    classArray.add(classObj);
  }
  jsonObj.put(""String_Node_Str"",classArray);
  jsonObj.put(""String_Node_Str"",numAnalysis);
  jsonObj.put(""String_Node_Str"",analysisArray);
  try {
    FileOutputStream bw=new FileOutputStream(metaFp);
    bw.write(jsonObj.toString().getBytes());
    bw.flush();
    bw.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","@SuppressWarnings(""String_Node_Str"") public static void removeCorpus(Corpus corpus,Boolean isCorpus){
  String corpusLocation=rootDir + corpus.getCorpusName();
  if (isCorpus) {
    try {
      new File(corpusLocation + System.getProperty(""String_Node_Str"") + ""String_Node_Str"").delete();
      FileUtils.deleteDirectory(new File(corpusLocation));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    return;
  }
  File[] classes=new File(corpusLocation).listFiles();
  HashMap<String,Boolean> oldClasses=new HashMap<String,Boolean>();
  if (classes == null) {
    return;
  }
  for (  File f : classes) {
    if (f.isDirectory()) {
      oldClasses.put(f.getAbsolutePath(),false);
    }
  }
  ArrayList<String> newClasses=new ArrayList<String>();
  int numNewClass=corpus.getClasses().size();
  for (int i=0; i < numNewClass; i++) {
    String classPath=corpus.getClasses().get(i).getTacitLocation();
    newClasses.add(classPath);
    if (oldClasses.get(classPath) != null) {
      oldClasses.put(classPath,true);
    }
  }
  Iterator<Entry<String,Boolean>> it=oldClasses.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry<String,Boolean> curr=it.next();
    String classPath=curr.getKey();
    if (!curr.getValue()) {
      try {
        FileUtils.deleteDirectory(new File(classPath));
        it.remove();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  String metaFile=corpusLocation + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
  JSONArray analysisArray=new JSONArray();
  int numAnalysis=0;
  if (!new File(metaFile).exists()) {
    JSONParser parser=new JSONParser();
    try {
      analysisArray=(JSONArray)((JSONObject)parser.parse(new FileReader(metaFile))).get(""String_Node_Str"");
      numAnalysis=(Integer)((JSONObject)parser.parse(new FileReader(metaFile))).get(""String_Node_Str"");
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
catch (    ParseException e) {
      e.printStackTrace();
    }
  }
  File metaFp=new File(metaFile);
  JSONObject jsonObj=new JSONObject();
  jsonObj.put(""String_Node_Str"",corpus.getCorpusName());
  jsonObj.put(""String_Node_Str"",corpus.getCorpusId());
  jsonObj.put(""String_Node_Str"",corpus.getDatatype().toString());
  jsonObj.put(""String_Node_Str"",corpus.getClasses().size());
  int numClasses=corpus.getClasses().size();
  ArrayList<ICorpusClass> corporaClasses=(ArrayList<ICorpusClass>)corpus.getClasses();
  JSONArray classArray=new JSONArray();
  for (int i=0; i < numClasses; i++) {
    CorpusClass currClass=(CorpusClass)corporaClasses.get(i);
    JSONObject classObj=new JSONObject();
    classObj.put(""String_Node_Str"",currClass.getClassName());
    classObj.put(""String_Node_Str"",currClass.getClassPath());
    classObj.put(""String_Node_Str"",corpusLocation + System.getProperty(""String_Node_Str"") + currClass.getClassName());
    if (!currClass.getKeyTextFields().isEmpty())     classObj.put(""String_Node_Str"",currClass.getKeyTextFields());
    classArray.add(classObj);
  }
  jsonObj.put(""String_Node_Str"",classArray);
  jsonObj.put(""String_Node_Str"",numAnalysis);
  jsonObj.put(""String_Node_Str"",analysisArray);
  try {
    FileOutputStream bw=new FileOutputStream(metaFp);
    bw.write(jsonObj.toString().getBytes());
    bw.flush();
    bw.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9928456709008614
168113,"@SuppressWarnings(""String_Node_Str"") public static void saveCorpus(Corpus corpus){
  String corpusName=corpus.getCorpusName();
  String corpusLocation=rootDir + corpusName;
  if (!(new File(corpusLocation).exists())) {
    new File(corpusLocation).mkdir();
    String metaFile=corpusLocation + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
    File metaFp=new File(metaFile);
    JSONObject jsonObj=new JSONObject();
    jsonObj.put(""String_Node_Str"",corpus.getCorpusName());
    jsonObj.put(""String_Node_Str"",corpus.getCorpusId());
    jsonObj.put(""String_Node_Str"",corpus.getDatatype().toString());
    jsonObj.put(""String_Node_Str"",corpus.getClasses().size());
    int numClasses=corpus.getClasses().size();
    ArrayList<ICorpusClass> corporaClasses=(ArrayList<ICorpusClass>)corpus.getClasses();
    JSONArray classArray=new JSONArray();
    for (int i=0; i < numClasses; i++) {
      CorpusClass currClass=(CorpusClass)corporaClasses.get(i);
      JSONObject classObj=new JSONObject();
      classObj.put(""String_Node_Str"",currClass.getClassName());
      classObj.put(""String_Node_Str"",currClass.getClassPath());
      classObj.put(""String_Node_Str"",corpusLocation + System.getProperty(""String_Node_Str"") + currClass.getClassName());
      classObj.put(""String_Node_Str"",currClass.getKeyTextFields());
      classArray.add(classObj);
    }
    jsonObj.put(""String_Node_Str"",classArray);
    jsonObj.put(""String_Node_Str"",0);
    JSONArray analysisArray=new JSONArray();
    jsonObj.put(""String_Node_Str"",analysisArray);
    try {
      FileOutputStream bw=new FileOutputStream(metaFp);
      bw.write(jsonObj.toString().getBytes());
      bw.flush();
      bw.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    copyCorpus(jsonObj);
  }
 else {
    String metaFile=corpusLocation + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
    JSONArray analysisArray=new JSONArray();
    int numAnalysis=0;
    if (!new File(metaFile).exists()) {
      JSONParser parser=new JSONParser();
      try {
        analysisArray=(JSONArray)((JSONObject)parser.parse(new FileReader(metaFile))).get(""String_Node_Str"");
        numAnalysis=(Integer)((JSONObject)parser.parse(new FileReader(metaFile))).get(""String_Node_Str"");
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
catch (      IOException e) {
        e.printStackTrace();
      }
catch (      ParseException e) {
        e.printStackTrace();
      }
    }
    File metaFp=new File(metaFile);
    JSONObject jsonObj=new JSONObject();
    jsonObj.put(""String_Node_Str"",corpus.getCorpusName());
    jsonObj.put(""String_Node_Str"",corpus.getCorpusId());
    jsonObj.put(""String_Node_Str"",corpus.getDatatype().toString());
    jsonObj.put(""String_Node_Str"",corpus.getClasses().size());
    int numClasses=corpus.getClasses().size();
    ArrayList<ICorpusClass> corporaClasses=(ArrayList<ICorpusClass>)corpus.getClasses();
    JSONArray classArray=new JSONArray();
    for (int i=0; i < numClasses; i++) {
      CorpusClass currClass=(CorpusClass)corporaClasses.get(i);
      JSONObject classObj=new JSONObject();
      classObj.put(""String_Node_Str"",currClass.getClassName());
      classObj.put(""String_Node_Str"",currClass.getClassPath());
      classObj.put(""String_Node_Str"",corpusLocation + System.getProperty(""String_Node_Str"") + currClass.getClassName());
      classObj.put(""String_Node_Str"",currClass.getKeyTextFields());
      classArray.add(classObj);
    }
    jsonObj.put(""String_Node_Str"",classArray);
    jsonObj.put(""String_Node_Str"",numAnalysis);
    jsonObj.put(""String_Node_Str"",analysisArray);
    try {
      FileOutputStream bw=new FileOutputStream(metaFp);
      bw.write(jsonObj.toString().getBytes());
      bw.flush();
      bw.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    copyCorpus(jsonObj);
    removeCorpus(corpus,false);
  }
}","@SuppressWarnings(""String_Node_Str"") public static void saveCorpus(Corpus corpus){
  String corpusName=corpus.getCorpusName();
  String corpusLocation=rootDir + corpusName;
  if (!(new File(corpusLocation).exists())) {
    new File(corpusLocation).mkdir();
    String metaFile=corpusLocation + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
    File metaFp=new File(metaFile);
    JSONObject jsonObj=new JSONObject();
    jsonObj.put(""String_Node_Str"",corpus.getCorpusName());
    jsonObj.put(""String_Node_Str"",corpus.getCorpusId());
    jsonObj.put(""String_Node_Str"",corpus.getDatatype().toString());
    jsonObj.put(""String_Node_Str"",corpus.getClasses().size());
    int numClasses=corpus.getClasses().size();
    ArrayList<ICorpusClass> corporaClasses=(ArrayList<ICorpusClass>)corpus.getClasses();
    JSONArray classArray=new JSONArray();
    for (int i=0; i < numClasses; i++) {
      CorpusClass currClass=(CorpusClass)corporaClasses.get(i);
      JSONObject classObj=new JSONObject();
      classObj.put(""String_Node_Str"",currClass.getClassName());
      classObj.put(""String_Node_Str"",currClass.getClassPath());
      classObj.put(""String_Node_Str"",corpusLocation + System.getProperty(""String_Node_Str"") + currClass.getClassName());
      if (!currClass.getKeyTextFields().isEmpty())       classObj.put(""String_Node_Str"",currClass.getKeyTextFields());
      classArray.add(classObj);
    }
    jsonObj.put(""String_Node_Str"",classArray);
    jsonObj.put(""String_Node_Str"",0);
    JSONArray analysisArray=new JSONArray();
    jsonObj.put(""String_Node_Str"",analysisArray);
    try {
      FileOutputStream bw=new FileOutputStream(metaFp);
      bw.write(jsonObj.toString().getBytes());
      bw.flush();
      bw.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    copyCorpus(jsonObj);
  }
 else {
    String metaFile=corpusLocation + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
    JSONArray analysisArray=new JSONArray();
    int numAnalysis=0;
    if (!new File(metaFile).exists()) {
      JSONParser parser=new JSONParser();
      try {
        analysisArray=(JSONArray)((JSONObject)parser.parse(new FileReader(metaFile))).get(""String_Node_Str"");
        numAnalysis=(Integer)((JSONObject)parser.parse(new FileReader(metaFile))).get(""String_Node_Str"");
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
catch (      IOException e) {
        e.printStackTrace();
      }
catch (      ParseException e) {
        e.printStackTrace();
      }
    }
    File metaFp=new File(metaFile);
    JSONObject jsonObj=new JSONObject();
    jsonObj.put(""String_Node_Str"",corpus.getCorpusName());
    jsonObj.put(""String_Node_Str"",corpus.getCorpusId());
    jsonObj.put(""String_Node_Str"",corpus.getDatatype().toString());
    jsonObj.put(""String_Node_Str"",corpus.getClasses().size());
    int numClasses=corpus.getClasses().size();
    ArrayList<ICorpusClass> corporaClasses=(ArrayList<ICorpusClass>)corpus.getClasses();
    JSONArray classArray=new JSONArray();
    for (int i=0; i < numClasses; i++) {
      CorpusClass currClass=(CorpusClass)corporaClasses.get(i);
      JSONObject classObj=new JSONObject();
      classObj.put(""String_Node_Str"",currClass.getClassName());
      classObj.put(""String_Node_Str"",currClass.getClassPath());
      classObj.put(""String_Node_Str"",corpusLocation + System.getProperty(""String_Node_Str"") + currClass.getClassName());
      if (!currClass.getKeyTextFields().isEmpty())       classObj.put(""String_Node_Str"",currClass.getKeyTextFields());
      classArray.add(classObj);
    }
    jsonObj.put(""String_Node_Str"",classArray);
    jsonObj.put(""String_Node_Str"",numAnalysis);
    jsonObj.put(""String_Node_Str"",analysisArray);
    try {
      FileOutputStream bw=new FileOutputStream(metaFp);
      bw.write(jsonObj.toString().getBytes());
      bw.flush();
      bw.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    copyCorpus(jsonObj);
    removeCorpus(corpus,false);
  }
}",0.9871762635152124
168114,"private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (StandardWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      if (!canProceed()) {
        return;
      }
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      final String outputPath=layoutData.getOutputLabel().getText();
      TacitUtil tacitHelper=new TacitUtil();
      final List<Object> inputObjs=inputLayoutData.getSelectedFiles();
      tacitHelper.writeSummaryFile(outputPath);
      final List<String> dictionaryFiles=dictLayoutData.getSelectedFiles(false);
      final boolean isStemDic=stemEnabled.getSelection();
      final boolean doPennCounts=defaultTags.getSelection();
      final boolean doWordDistribution=wordDistribution.getSelection();
      final boolean ppValue=preprocessButton.getSelection();
      final boolean wcType=weightedWordCountButton.getSelection();
      final boolean datFile=createDATFile.getSelection();
      final boolean doPOSTags=createPOSTags.getSelection();
      final Date dateObj=new Date();
      wordCountJob=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          monitor.beginTask(""String_Node_Str"",(inputObjs.size() * 15) + 15);
          WordCountPlugin wc=new WordCountPlugin(wcType,dateObj,isStemDic,doPennCounts,doWordDistribution,datFile,doPOSTags,outputPath,monitor);
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",null,form);
          Preprocessor ppObj;
          try {
            ppObj=new Preprocessor(""String_Node_Str"",ppValue);
            List<String> inputFiles=ppObj.processData(""String_Node_Str"",inputObjs);
            monitor.worked(5);
            wc.countWords(inputFiles,dictionaryFiles);
            ppObj.clean();
            monitor.worked(1);
          }
 catch (          IOException e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
catch (          Exception e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      wordCountJob.setUser(true);
      if (canProceed()) {
        wordCountJob.schedule();
        wordCountJob.addJobChangeListener(new JobChangeAdapter(){
          @Override public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
          }
        }
);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (StandardWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}","private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (StandardWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      if (!canProceed()) {
        return;
      }
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      final String outputPath=layoutData.getOutputLabel().getText();
      TacitUtil tacitHelper=new TacitUtil();
      final List<Object> inputObjs=inputLayoutData.getSelectedFiles();
      tacitHelper.writeSummaryFile(outputPath);
      final List<String> dictionaryFiles=dictLayoutData.getSelectedFiles(false);
      final boolean isStemDic=stemEnabled.getSelection();
      final boolean doPennCounts=defaultTags.getSelection();
      final boolean doWordDistribution=wordDistribution.getSelection();
      final boolean ppValue=preprocessButton.getSelection();
      final boolean wcType=weightedWordCountButton.getSelection();
      final boolean datFile=createDATFile.getSelection();
      final boolean doPOSTags=createPOSTags.getSelection();
      final Date dateObj=new Date();
      wordCountJob=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          monitor.beginTask(""String_Node_Str"",(inputObjs.size() * 15) + 15);
          WordCountPlugin wc=new WordCountPlugin(wcType,dateObj,isStemDic,doPennCounts,doWordDistribution,datFile,doPOSTags,outputPath,monitor);
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",null,form);
          Preprocessor ppObj;
          try {
            ppObj=new Preprocessor(""String_Node_Str"",ppValue);
            List<String> inputFiles=ppObj.processData(""String_Node_Str"",inputObjs);
            monitor.worked(5);
            wc.countWords(inputFiles,dictionaryFiles);
            ppObj.clean();
            monitor.worked(1);
          }
 catch (          IOException e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
catch (          OperationCanceledException e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
catch (          Exception e) {
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      wordCountJob.setUser(true);
      if (canProceed()) {
        wordCountJob.schedule();
        wordCountJob.addJobChangeListener(new JobChangeAdapter(){
          @Override public void done(          IJobChangeEvent event){
            if (!event.getResult().isOK()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
              ConsoleView.printlInConsoleln(""String_Node_Str"");
            }
 else {
              TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            }
          }
        }
);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (StandardWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}",0.9827652240520872
168115,"public void countWords(List<String> inputFiles,List<String> dictionaryFiles){
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  if (!setModels())   return;
  try {
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    buildMaps(dictionaryFiles);
  }
 catch (  IOException e) {
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  monitor.subTask(""String_Node_Str"");
  if (monitor.isCanceled())   return;
  for (  String iFile : inputFiles) {
    if (monitor.isCanceled())     return;
    do_countWords(iFile);
    if (doWordDistribution)     createWordDistribution(iFile);
    monitor.worked(2);
    refreshFileCounts();
  }
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  monitor.subTask(""String_Node_Str"");
  addToCSV(""String_Node_Str"",this.numWords,this.numSentences,this.numDictWords,true);
  monitor.worked(5);
  closeWriters();
  if (weighted)   TacitUtility.createRunReport(outputPath,""String_Node_Str"",dateObj);
 else   TacitUtility.createRunReport(outputPath,""String_Node_Str"",dateObj);
  monitor.worked(1);
  return;
}","public void countWords(List<String> inputFiles,List<String> dictionaryFiles){
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  if (!setModels())   return;
  try {
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    buildMaps(dictionaryFiles);
  }
 catch (  IOException e) {
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  monitor.subTask(""String_Node_Str"");
  if (monitor.isCanceled())   throw new OperationCanceledException();
  for (  String iFile : inputFiles) {
    if (monitor.isCanceled())     throw new OperationCanceledException();
    do_countWords(iFile);
    if (doWordDistribution)     createWordDistribution(iFile);
    monitor.worked(2);
    refreshFileCounts();
  }
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  monitor.subTask(""String_Node_Str"");
  addToCSV(""String_Node_Str"",this.numWords,this.numSentences,this.numDictWords,true);
  monitor.worked(5);
  closeWriters();
  if (weighted)   TacitUtility.createRunReport(outputPath,""String_Node_Str"",dateObj);
 else   TacitUtility.createRunReport(outputPath,""String_Node_Str"",dateObj);
  monitor.worked(1);
  return;
}",0.9623931623931624
168116,"public void wordCount(IProgressMonitor monitor,List<File> inputFiles,List<String> dictionaryFile,String stopWordsFile,String outputFile,String delimiters,boolean doLower,boolean doLiwcStemming,boolean doSnowBallStemming,boolean doSpss,boolean doWordDistribution,boolean stemDictionary,File oFile,File sFile,Date dateObj,Map<String,String[]> fileCorpuses) throws IOException {
  if (delimiters == null || delimiters.equals(""String_Node_Str""))   this.delimiters=""String_Node_Str"";
 else   this.delimiters=delimiters;
  this.doLower=doLower;
  this.doLiwcStemming=doLiwcStemming;
  this.doSpss=doSpss;
  this.doWordDistribution=doWordDistribution;
  this.doSnowballStemming=doSnowBallStemming;
  this.stemDictionary=stemDictionary;
  if (!this.weighted)   this.doLiwcStemming=true;
  appendLog(""String_Node_Str"");
  if (stopWordsFile.equals(null) || stopWordsFile.equals(""String_Node_Str"") || !this.weighted)   this.doStopWords=false;
 else   this.doStopWords=true;
  long startTime=System.currentTimeMillis();
  monitor.subTask(""String_Node_Str"");
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.subTask(""String_Node_Str"");
  buildCategorizer(dictionaryFile);
  logger.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  if (doStopWords) {
    startTime=System.currentTimeMillis();
    monitor.subTask(""String_Node_Str"");
    stopWordSetBuild(new File(stopWordsFile));
    logger.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
    appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  }
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.subTask(""String_Node_Str"");
  buildOutputFile(oFile);
  monitor.worked(2);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  if (doSpss) {
    monitor.subTask(""String_Node_Str"" + sFile.getName() + ""String_Node_Str"");
    buildSpssFile(sFile);
  }
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  for (  File inputFile : inputFiles) {
    String absoluteFilePath=inputFile.getAbsolutePath();
    if (absoluteFilePath.contains(""String_Node_Str""))     continue;
    monitor.subTask(""String_Node_Str"" + inputFile);
    String corpus=""String_Node_Str"";
    if (fileCorpuses.containsKey(absoluteFilePath))     corpus=fileCorpuses.get(absoluteFilePath)[0] + ""String_Node_Str"" + fileCorpuses.get(absoluteFilePath)[1];
    countWords(inputFile,oFile,sFile,dateObj,corpus);
    monitor.worked(1);
  }
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.subTask(""String_Node_Str"");
  if (this.weighted)   TacitUtility.createRunReport(outputFile,""String_Node_Str"",dateObj);
 else   TacitUtility.createRunReport(outputFile,""String_Node_Str"",dateObj);
  monitor.worked(5);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
}","public void wordCount(IProgressMonitor monitor,List<File> inputFiles,List<String> dictionaryFile,String stopWordsFile,String outputFile,String delimiters,boolean doLower,boolean doLiwcStemming,boolean doSnowBallStemming,boolean doSpss,boolean doWordDistribution,boolean stemDictionary,File oFile,File sFile,Date dateObj,Map<String,String[]> fileCorpuses) throws IOException {
  if (delimiters == null || delimiters.equals(""String_Node_Str""))   this.delimiters=""String_Node_Str"";
 else   this.delimiters=delimiters;
  this.doLower=doLower;
  this.doLiwcStemming=doLiwcStemming;
  this.doSpss=doSpss;
  this.doWordDistribution=doWordDistribution;
  this.doSnowballStemming=doSnowBallStemming;
  this.stemDictionary=stemDictionary;
  if (!this.weighted)   this.doLiwcStemming=true;
  appendLog(""String_Node_Str"");
  if (stopWordsFile.equals(null) || stopWordsFile.equals(""String_Node_Str"") || !this.weighted)   this.doStopWords=false;
 else   this.doStopWords=true;
  long startTime=System.currentTimeMillis();
  monitor.subTask(""String_Node_Str"");
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.subTask(""String_Node_Str"");
  buildCategorizer(dictionaryFile);
  logger.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  if (doStopWords) {
    startTime=System.currentTimeMillis();
    monitor.subTask(""String_Node_Str"");
    stopWordSetBuild(new File(stopWordsFile));
    logger.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
    appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  }
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.subTask(""String_Node_Str"");
  buildOutputFile(oFile);
  monitor.worked(2);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  if (doSpss) {
    monitor.subTask(""String_Node_Str"" + sFile.getName() + ""String_Node_Str"");
    buildSpssFile(sFile);
  }
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  for (  File inputFile : inputFiles) {
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    String absoluteFilePath=inputFile.getAbsolutePath();
    if (absoluteFilePath.contains(""String_Node_Str""))     continue;
    monitor.subTask(""String_Node_Str"" + inputFile);
    String corpus=""String_Node_Str"";
    if (fileCorpuses.containsKey(absoluteFilePath))     corpus=fileCorpuses.get(absoluteFilePath)[0] + ""String_Node_Str"" + fileCorpuses.get(absoluteFilePath)[1];
    countWords(inputFile,oFile,sFile,dateObj,corpus);
    monitor.worked(1);
  }
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.subTask(""String_Node_Str"");
  if (this.weighted)   TacitUtility.createRunReport(outputFile,""String_Node_Str"",dateObj);
 else   TacitUtility.createRunReport(outputFile,""String_Node_Str"",dateObj);
  monitor.worked(5);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
}",0.98745894296805
168117,"public boolean calculateCooccurrences(List<String> selectedFiles,String seedFile,int windowSize,String outputPath,int threshold,boolean buildMatrix,IProgressMonitor monitor){
  String currentLine=null;
  List<String> phrase=new ArrayList<String>();
  Date currTime=new Date();
  setOutputPath(outputPath);
  setThreshold(threshold);
  setWindowSize(windowSize);
  try {
    boolean ret=false;
    if (windowSize > 0) {
      ret=setSeedWords(seedFile);
    }
    if (ret) {
      doPhrases=true;
      buildSeedCombos();
    }
    String[] listOfFiles=(String[])selectedFiles.toArray(new String[selectedFiles.size()]);
    for (    String fname : listOfFiles) {
      File f=new File(fname);
      monitor.subTask(""String_Node_Str"" + f.getName());
      appendLog(""String_Node_Str"" + f.getName());
      if (f.getAbsolutePath().contains(""String_Node_Str""))       continue;
      if (!f.exists() || f.isDirectory())       continue;
      BufferedReader br=new BufferedReader(new FileReader(f));
      int line_no=0;
      try {
        while ((currentLine=br.readLine()) != null) {
          ArrayList<String> words=new ArrayList<String>(Arrays.asList(delimiters.matcher(currentLine).replaceAll(""String_Node_Str"").toLowerCase().trim().split(""String_Node_Str"")));
          line_no++;
          int windowend=Math.min(windowSize,words.size()) - 1;
          List<String> window=new ArrayList<String>(words.subList(0,windowend));
          String pprev_word=null;
          String prev_word=null;
          for (int wi=0; wi < words.size(); wi++) {
            String word=words.get(wi).trim();
            if (word.isEmpty() || word.equals(""String_Node_Str""))             continue;
            if (window.size() > 0)             window.remove(0);
            if (windowend < words.size() && windowSize > 1)             window.add(words.get(windowend++).trim());
            if (buildMatrix) {
              Map<String,Integer> vec=wordMat.get(word);
              if (vec == null) {
                vec=new HashMap<String,Integer>();
                wordMat.put(word,vec);
              }
              for (              String nextWord : window) {
                if (vec.containsKey(nextWord)) {
                  vec.put(nextWord,vec.get(nextWord) + 1);
                }
 else {
                  vec.put(nextWord,1);
                }
                Map<String,Integer> revVec=wordMat.get(nextWord);
                if (revVec == null) {
                  revVec=new HashMap<String,Integer>();
                  wordMat.put(nextWord,revVec);
                }
                if (revVec.containsKey(word)) {
                  revVec.put(word,revVec.get(word) + 1);
                }
 else {
                  revVec.put(word,1);
                }
              }
            }
            if (doPhrases) {
              if (!seedWords.containsKey(word))               continue;
              for (              Set<String> combo : seedCombos.keySet()) {
                boolean flag=true;
                for (                String seedWord : combo) {
                  if (!window.contains(seedWord) && !word.equals(seedWord)) {
                    flag=false;
                    break;
                  }
                }
                if (flag == true) {
                  ArrayList<String> context=new ArrayList<String>();
                  context.addAll(Arrays.asList(pprev_word,prev_word,word));
                  context.addAll(window);
                  if (wi + 1 < words.size())                   context.add(words.get(wi + 1));
                  phrase.add(StringUtils.join(combo,' ') + ""String_Node_Str"" + f.getName()+ ""String_Node_Str""+ line_no+ ""String_Node_Str""+ StringUtils.join(context,' '));
                  int phrase_count=seedCombos.get(combo) + 1;
                  seedCombos.put(combo,phrase_count);
                }
              }
            }
            pprev_word=prev_word;
            prev_word=word;
          }
        }
      }
 catch (      OutOfMemoryError e) {
        br.close();
        appendLog(""String_Node_Str"");
        appendLog(""String_Node_Str"");
        return false;
      }
      br.close();
      monitor.worked(1);
    }
    try {
      if (buildMatrix) {
        monitor.subTask(""String_Node_Str"");
        String filename=new SimpleDateFormat(""String_Node_Str"").format(currTime);
        writeWordMatrix(filename);
      }
      monitor.worked(10);
      if (ret && phrase.size() > 0) {
        monitor.subTask(""String_Node_Str"");
        String phraseFilename=new SimpleDateFormat(""String_Node_Str"").format(currTime);
        String freqFilename=new SimpleDateFormat(""String_Node_Str"").format(currTime);
        writePhrases(phrase,phraseFilename);
        writeSeedComboStats(freqFilename);
      }
 else {
        appendLog(""String_Node_Str"");
        appendLog(""String_Node_Str"");
      }
    }
 catch (    OutOfMemoryError e) {
      appendLog(""String_Node_Str"");
      appendLog(""String_Node_Str"");
      return false;
    }
    monitor.worked(10);
    appendLog(String.valueOf(phrase.size()));
    Date dateObj=new Date();
    TacitUtility.createRunReport(outputPath,""String_Node_Str"",dateObj);
    return true;
  }
 catch (  Exception e) {
    appendLog(""String_Node_Str"" + e);
  }
  return false;
}","public boolean calculateCooccurrences(List<String> selectedFiles,String seedFile,int windowSize,String outputPath,int threshold,boolean buildMatrix,IProgressMonitor monitor){
  String currentLine=null;
  List<String> phrase=new ArrayList<String>();
  Date currTime=new Date();
  setOutputPath(outputPath);
  setThreshold(threshold);
  setWindowSize(windowSize);
  try {
    boolean ret=false;
    if (windowSize > 0) {
      ret=setSeedWords(seedFile);
    }
    if (ret) {
      doPhrases=true;
      buildSeedCombos();
    }
    String[] listOfFiles=(String[])selectedFiles.toArray(new String[selectedFiles.size()]);
    for (    String fname : listOfFiles) {
      File f=new File(fname);
      monitor.subTask(""String_Node_Str"" + f.getName());
      appendLog(""String_Node_Str"" + f.getName());
      if (f.getAbsolutePath().contains(""String_Node_Str""))       continue;
      if (!f.exists() || f.isDirectory())       continue;
      BufferedReader br=new BufferedReader(new FileReader(f));
      int line_no=0;
      try {
        while ((currentLine=br.readLine()) != null) {
          ArrayList<String> words=new ArrayList<String>(Arrays.asList(delimiters.matcher(currentLine).replaceAll(""String_Node_Str"").toLowerCase().trim().split(""String_Node_Str"")));
          line_no++;
          int windowend=Math.min(windowSize,words.size()) - 1;
          List<String> window=new ArrayList<String>(words.subList(0,windowend));
          String pprev_word=null;
          String prev_word=null;
          for (int wi=0; wi < words.size(); wi++) {
            String word=words.get(wi).trim();
            if (word.isEmpty() || word.equals(""String_Node_Str""))             continue;
            if (window.size() > 0)             window.remove(0);
            if (windowend < words.size() && windowSize > 1)             window.add(words.get(windowend++).trim());
            if (buildMatrix) {
              Map<String,Integer> vec=wordMat.get(word);
              if (vec == null) {
                vec=new HashMap<String,Integer>();
                wordMat.put(word,vec);
              }
              for (              String nextWord : window) {
                if (vec.containsKey(nextWord)) {
                  vec.put(nextWord,vec.get(nextWord) + 1);
                }
 else {
                  vec.put(nextWord,1);
                }
                Map<String,Integer> revVec=wordMat.get(nextWord);
                if (revVec == null) {
                  revVec=new HashMap<String,Integer>();
                  wordMat.put(nextWord,revVec);
                }
                if (revVec.containsKey(word)) {
                  revVec.put(word,revVec.get(word) + 1);
                }
 else {
                  revVec.put(word,1);
                }
              }
            }
            if (doPhrases) {
              if (seedWords.containsKey(word)) {
                for (                Set<String> combo : seedCombos.keySet()) {
                  boolean flag=true;
                  String comboStr=StringUtils.join(combo,' ');
                  if (!comboStr.contains(word))                   continue;
                  for (                  String seedWord : combo) {
                    if (!window.contains(seedWord) && !word.equals(seedWord)) {
                      flag=false;
                      break;
                    }
                  }
                  if (flag == true) {
                    ArrayList<String> context=new ArrayList<String>();
                    context.addAll(Arrays.asList(pprev_word,prev_word,word));
                    context.addAll(window);
                    if (wi + window.size() + 1 < words.size())                     context.add(words.get(wi + window.size() + 1));
                    phrase.add(StringUtils.join(combo,' ') + ""String_Node_Str"" + f.getName()+ ""String_Node_Str""+ line_no+ ""String_Node_Str""+ StringUtils.join(context,' '));
                    int phrase_count=seedCombos.get(combo) + 1;
                    seedCombos.put(combo,phrase_count);
                  }
                }
              }
            }
            pprev_word=prev_word;
            prev_word=word;
          }
        }
      }
 catch (      OutOfMemoryError e) {
        br.close();
        appendLog(""String_Node_Str"");
        appendLog(""String_Node_Str"");
        return false;
      }
      br.close();
      monitor.worked(1);
    }
    try {
      if (buildMatrix) {
        monitor.subTask(""String_Node_Str"");
        String filename=new SimpleDateFormat(""String_Node_Str"").format(currTime);
        writeWordMatrix(filename);
      }
      monitor.worked(10);
      if (ret && phrase.size() > 0) {
        monitor.subTask(""String_Node_Str"");
        String phraseFilename=new SimpleDateFormat(""String_Node_Str"").format(currTime);
        String freqFilename=new SimpleDateFormat(""String_Node_Str"").format(currTime);
        writePhrases(phrase,phraseFilename);
        writeSeedComboStats(freqFilename);
      }
 else {
        appendLog(""String_Node_Str"");
        appendLog(""String_Node_Str"");
      }
    }
 catch (    OutOfMemoryError e) {
      appendLog(""String_Node_Str"");
      appendLog(""String_Node_Str"");
      return false;
    }
    monitor.worked(10);
    appendLog(String.valueOf(phrase.size()));
    Date dateObj=new Date();
    TacitUtility.createRunReport(outputPath,""String_Node_Str"",dateObj);
    return true;
  }
 catch (  Exception e) {
    appendLog(""String_Node_Str"" + e);
  }
  return false;
}",0.9656133828996284
168118,"/** 
 * Recursive function to loop over directory structure and take the appropriate action
 * @param dirpath
 */
private void processDirectory(String dirpath){
  File[] files=new File(dirpath).listFiles();
  if (doPreprocessing) {
    for (    File file : files) {
      if (file.getName().contains(""String_Node_Str""))       continue;
      if (file.isDirectory()) {
        processDirectory(file.getAbsolutePath());
      }
 else {
        String ppFile=processFile(file.getAbsolutePath(),""String_Node_Str"");
        if (ppFile != ""String_Node_Str"")         outputFiles.add(ppFile);
      }
    }
  }
 else {
    for (    File file : files) {
      if (file.getName().contains(""String_Node_Str""))       continue;
      if (file.isDirectory())       processDirectory(file.getAbsolutePath());
 else {
        File file2=new File(checkfiletype(file.getAbsolutePath()));
        outputFiles.add(file2.getAbsolutePath());
      }
    }
  }
}","/** 
 * Recursive function to loop over directory structure and take the appropriate action
 * @param dirpath
 * @throws TikaException 
 */
private void processDirectory(String dirpath) throws TikaException {
  File[] files=new File(dirpath).listFiles();
  if (doPreprocessing) {
    for (    File file : files) {
      if (file.getName().contains(""String_Node_Str""))       continue;
      if (file.isDirectory()) {
        processDirectory(file.getAbsolutePath());
      }
 else {
        String ppFile=processFile(file.getAbsolutePath(),""String_Node_Str"");
        if (ppFile != ""String_Node_Str"")         outputFiles.add(ppFile);
      }
    }
  }
 else {
    for (    File file : files) {
      if (file.getName().contains(""String_Node_Str""))       continue;
      if (file.isDirectory())       processDirectory(file.getAbsolutePath());
 else {
        File file2=new File(checkfiletype(file.getAbsolutePath()));
        outputFiles.add(file2.getAbsolutePath());
      }
    }
  }
}",0.975051975051975
168119,"/** 
 * Function to perform all the preprocessing steps on inFile
 * @param inFile File to be preprocessed
 * @param outName Optional field to define the temporary preprocessed file name. If this is empty, the temp file will have the same name as the inFile
 * @return
 */
private String processFile(String inFileBefore,String outName){
  String inFile=checkfiletype(inFileBefore);
  String outFile;
  if (outName == ""String_Node_Str"" || outName == null) {
    outFile=ppFilesLoc + System.getProperty(""String_Node_Str"") + (new File(inFile).getName());
  }
 else {
    outFile=ppFilesLoc + System.getProperty(""String_Node_Str"") + outName;
  }
  try {
    BufferedReader br=new BufferedReader(new FileReader(inFile));
    if (new File(outFile).exists()) {
      for (int i=1; i < Integer.MAX_VALUE; i++) {
        if (new File(outFile + Integer.toString(i)).exists()) {
          continue;
        }
 else {
          outFile=outFile + Integer.toString(i);
          break;
        }
      }
    }
    BufferedWriter bw=new BufferedWriter(new FileWriter(outFile));
    String currLine=""String_Node_Str"";
    while ((currLine=br.readLine()) != null) {
      if (currLine.trim().length() != 0) {
        if (doLowercase) {
          currLine=currLine.toLowerCase();
        }
        for (        char c : delimiters.toCharArray()) {
          currLine=currLine.replace(c,' ');
        }
        if (doStopWords) {
          currLine=removeStopWords(currLine);
        }
        if (doStemming) {
          if (isLatin) {
            try {
              currLine=latinStemmer.doStemming(currLine);
            }
 catch (            TreeTaggerException e) {
              ConsoleView.printlInConsole(""String_Node_Str"" + currLine);
              ConsoleView.printlInConsole(""String_Node_Str"");
            }
          }
 else {
            currLine=stemLine(currLine);
          }
        }
        bw.write(currLine + ""String_Node_Str"");
      }
    }
    bw.close();
    br.close();
  }
 catch (  FileNotFoundException e) {
    ConsoleView.printlInConsoleln(""String_Node_Str"" + inFile);
    return ""String_Node_Str"";
  }
catch (  IOException e) {
    ConsoleView.printlInConsoleln(""String_Node_Str"" + inFile);
  }
  return outFile;
}","/** 
 * Function to perform all the preprocessing steps on inFile
 * @param inFile File to be preprocessed
 * @param outName Optional field to define the temporary preprocessed file name. If this is empty, the temp file will have the same name as the inFile
 * @return
 * @throws TikaException 
 */
private String processFile(String inFileBefore,String outName) throws TikaException {
  String inFile=checkfiletype(inFileBefore);
  String outFile;
  if (outName == ""String_Node_Str"" || outName == null) {
    outFile=ppFilesLoc + System.getProperty(""String_Node_Str"") + (new File(inFile).getName());
  }
 else {
    outFile=ppFilesLoc + System.getProperty(""String_Node_Str"") + outName;
  }
  try {
    BufferedReader br=new BufferedReader(new FileReader(inFile));
    if (new File(outFile).exists()) {
      for (int i=1; i < Integer.MAX_VALUE; i++) {
        if (new File(outFile + Integer.toString(i)).exists()) {
          continue;
        }
 else {
          outFile=outFile + Integer.toString(i);
          break;
        }
      }
    }
    BufferedWriter bw=new BufferedWriter(new FileWriter(outFile));
    String currLine=""String_Node_Str"";
    while ((currLine=br.readLine()) != null) {
      if (currLine.trim().length() != 0) {
        if (doLowercase) {
          currLine=currLine.toLowerCase();
        }
        for (        char c : delimiters.toCharArray()) {
          currLine=currLine.replace(c,' ');
        }
        if (doStopWords) {
          currLine=removeStopWords(currLine);
        }
        if (doStemming) {
          if (isLatin) {
            try {
              currLine=latinStemmer.doStemming(currLine);
            }
 catch (            TreeTaggerException e) {
              ConsoleView.printlInConsole(""String_Node_Str"" + currLine);
              ConsoleView.printlInConsole(""String_Node_Str"");
            }
          }
 else {
            currLine=stemLine(currLine);
          }
        }
        bw.write(currLine + ""String_Node_Str"");
      }
    }
    bw.close();
    br.close();
  }
 catch (  FileNotFoundException e) {
    ConsoleView.printlInConsoleln(""String_Node_Str"" + inFile);
    return ""String_Node_Str"";
  }
catch (  IOException e) {
    ConsoleView.printlInConsoleln(""String_Node_Str"" + inFile);
  }
  return outFile;
}",0.9893475366178428
168120,"/** 
 * Process a CorpusClass of Twitter JSON type. Remove function on completing support for Generic JSON files.
 * @param corpusClass
 */
private void processTwitter(CorpusClass corpusClass){
  JSONParser jParser;
  String corpusClassPath=corpusClass.getTacitLocation();
  String tempDir=""String_Node_Str"";
  String tempFile=""String_Node_Str"";
  Date dateobj=new Date();
  if (doPreprocessing)   tempFile=tempPPFileLoc + ""String_Node_Str"" + System.currentTimeMillis()+ ""String_Node_Str"";
 else {
    tempDir=ppFilesLoc + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ dateobj.getTime();
    new File(tempDir).mkdir();
  }
  jParser=new JSONParser();
  dateobj=new Date();
  File[] fileList=new File(corpusClassPath).listFiles();
  for (int i=0; i < fileList.length; i++) {
    try {
      String fileName=fileList[i].getAbsolutePath();
      if (!fileList[i].getAbsolutePath().endsWith(""String_Node_Str""))       continue;
      JSONArray objects=(JSONArray)jParser.parse(new FileReader(fileName));
      int j=0;
      for (      Object obj : objects) {
        JSONObject twitterStream=(JSONObject)obj;
        if (!processQuery(corpusClass,twitterStream))         continue;
        dateobj=new Date();
        File file;
        if (doPreprocessing) {
          file=new File(tempFile);
        }
 else {
          file=new File(tempDir + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ j+ ""String_Node_Str""+ df.format(dateobj));
        }
        if (file.exists()) {
          file.delete();
        }
        FileWriter fw=new FileWriter(file.getAbsoluteFile());
        BufferedWriter bw=new BufferedWriter(fw);
        String tweet=twitterStream.get(""String_Node_Str"").toString();
        bw.write(tweet);
        bw.close();
        if (doPreprocessing) {
          outputFiles.add(processFile(tempFile,""String_Node_Str"" + j + ""String_Node_Str""+ df.format(dateobj)));
        }
 else {
          outputFiles.add(checkfiletype(file.getAbsolutePath()));
        }
        j++;
      }
    }
 catch (    JsonParseException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
catch (    ParseException e) {
      e.printStackTrace();
    }
  }
  if (new File(tempFile).exists()) {
    new File(tempFile).delete();
  }
}","/** 
 * Process a CorpusClass of Twitter JSON type. Remove function on completing support for Generic JSON files.
 * @param corpusClass
 * @throws TikaException 
 */
private void processTwitter(CorpusClass corpusClass) throws TikaException {
  JSONParser jParser;
  String corpusClassPath=corpusClass.getTacitLocation();
  String tempDir=""String_Node_Str"";
  String tempFile=""String_Node_Str"";
  Date dateobj=new Date();
  if (doPreprocessing)   tempFile=tempPPFileLoc + ""String_Node_Str"" + System.currentTimeMillis()+ ""String_Node_Str"";
 else {
    tempDir=ppFilesLoc + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ dateobj.getTime();
    new File(tempDir).mkdir();
  }
  jParser=new JSONParser();
  dateobj=new Date();
  File[] fileList=new File(corpusClassPath).listFiles();
  for (int i=0; i < fileList.length; i++) {
    try {
      String fileName=fileList[i].getAbsolutePath();
      if (!fileList[i].getAbsolutePath().endsWith(""String_Node_Str""))       continue;
      JSONArray objects=(JSONArray)jParser.parse(new FileReader(fileName));
      int j=0;
      for (      Object obj : objects) {
        JSONObject twitterStream=(JSONObject)obj;
        if (!processQuery(corpusClass,twitterStream))         continue;
        dateobj=new Date();
        File file;
        if (doPreprocessing) {
          file=new File(tempFile);
        }
 else {
          file=new File(tempDir + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ j+ ""String_Node_Str""+ df.format(dateobj));
        }
        if (file.exists()) {
          file.delete();
        }
        FileWriter fw=new FileWriter(file.getAbsoluteFile());
        BufferedWriter bw=new BufferedWriter(fw);
        String tweet=twitterStream.get(""String_Node_Str"").toString();
        bw.write(tweet);
        bw.close();
        if (doPreprocessing) {
          outputFiles.add(processFile(tempFile,""String_Node_Str"" + j + ""String_Node_Str""+ df.format(dateobj)));
        }
 else {
          outputFiles.add(checkfiletype(file.getAbsolutePath()));
        }
        j++;
      }
    }
 catch (    JsonParseException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
catch (    ParseException e) {
      e.printStackTrace();
    }
  }
  if (new File(tempFile).exists()) {
    new File(tempFile).delete();
  }
}",0.9896507115135834
168121,"private String checkfiletype(String inputFilePath){
  File inputFile=new File(inputFilePath);
  Tika tika=new Tika();
  String mediaType=null;
  String fileName=inputFile.getName();
  String filePath=tempPPFileLoc + System.getProperty(""String_Node_Str"") + fileName.replace('.','_')+ ""String_Node_Str"";
  try {
    mediaType=tika.detect(inputFile);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  if (mediaType.equals(""String_Node_Str"")) {
    BodyContentHandler handler=new BodyContentHandler();
    Metadata metadata=new Metadata();
    ParseContext pcontext=new ParseContext();
    PDFParser pdfparser=new PDFParser();
    FileInputStream inputstream=null;
    try {
      inputstream=new FileInputStream(inputFile);
      pdfparser.parse(inputstream,handler,metadata,pcontext);
      BufferedWriter bw=new BufferedWriter(new FileWriter(filePath));
      bw.write(handler.toString());
      bw.close();
      inputstream.close();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return filePath;
  }
 else   if (mediaType.equals(""String_Node_Str"")) {
    BodyContentHandler handler=new BodyContentHandler();
    Metadata metadata=new Metadata();
    ParseContext pcontext=new ParseContext();
    RTFParser pdfparser=new RTFParser();
    FileInputStream inputstream=null;
    try {
      inputstream=new FileInputStream(inputFile);
      pdfparser.parse(inputstream,handler,metadata,pcontext);
      BufferedWriter bw=new BufferedWriter(new FileWriter(filePath));
      bw.write(handler.toString());
      bw.close();
      inputstream.close();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return filePath;
  }
 else {
  }
  return inputFilePath;
}","private String checkfiletype(String inputFilePath) throws TikaException {
  File inputFile=new File(inputFilePath);
  Tika tika=new Tika();
  String mediaType=null;
  String fileName=inputFile.getName();
  String filePath=tempPPFileLoc + System.getProperty(""String_Node_Str"") + fileName.replace('.','_')+ ""String_Node_Str"";
  try {
    TikaConfig config=new TikaConfig();
    Metadata metadata=new Metadata();
    metadata.set(Metadata.RESOURCE_NAME_KEY,inputFile.getAbsolutePath());
    mediaType=config.getDetector().detect(null,metadata).toString();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  if (mediaType.equals(""String_Node_Str"")) {
    BodyContentHandler handler=new BodyContentHandler();
    Metadata metadata=new Metadata();
    ParseContext pcontext=new ParseContext();
    PDFParser pdfparser=new PDFParser();
    FileInputStream inputstream=null;
    try {
      inputstream=new FileInputStream(inputFile);
      pdfparser.parse(inputstream,handler,metadata,pcontext);
      BufferedWriter bw=new BufferedWriter(new FileWriter(filePath));
      bw.write(handler.toString());
      bw.close();
      inputstream.close();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return filePath;
  }
 else   if (mediaType.equals(""String_Node_Str"")) {
    BodyContentHandler handler=new BodyContentHandler();
    Metadata metadata=new Metadata();
    ParseContext pcontext=new ParseContext();
    RTFParser pdfparser=new RTFParser();
    FileInputStream inputstream=null;
    try {
      inputstream=new FileInputStream(inputFile);
      pdfparser.parse(inputstream,handler,metadata,pcontext);
      BufferedWriter bw=new BufferedWriter(new FileWriter(filePath));
      bw.write(handler.toString());
      bw.close();
      inputstream.close();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return filePath;
  }
 else {
  }
  return inputFilePath;
}",0.9318244548716532
168122,"private List<String> applySmartFilters(List<Filter> filters,String jsonFilePath,String operator,String keyFields) throws FileNotFoundException, IOException, ParseException {
  HashMap<String,List<String>> keys=processKeyfields(keyFields);
  List<String> resultText=new ArrayList<String>();
  Set<JSONObject> filteredResults=new HashSet<JSONObject>();
  HashMap<String,List<Filter>> groupedFilters=groupFilters(filters);
  JSONParser parser=new JSONParser();
  Object obj=parser.parse(new FileReader(jsonFilePath));
  JSONObject jsonObject=(JSONObject)obj;
  Object document=Configuration.defaultConfiguration().jsonProvider().parse(jsonObject.toJSONString());
  for (  String parentFilters : groupedFilters.keySet()) {
    try {
      String smartQuery;
      smartQuery=createSmartFilters(parentFilters,groupedFilters,operator);
      System.out.println(parentFilters + ""String_Node_Str"" + smartQuery);
      Object result=JsonPath.parse(document).read(smartQuery);
      if (result instanceof LinkedHashMap<?,?>) {
        LinkedHashMap<?,?> records=(LinkedHashMap<?,?>)result;
        JSONObject temp=new JSONObject();
        temp.put(parentFilters,records);
        filteredResults.add(temp);
        if (keys.containsKey(parentFilters)) {
          for (          String k : keys.get(parentFilters))           resultText.add((String)((LinkedHashMap)result).get(k));
        }
      }
 else       if (result instanceof JSONArray) {
        JSONArray records=(JSONArray)result;
        for (        Object ob : records) {
          LinkedHashMap<?,?> res=(LinkedHashMap<?,?>)ob;
          if (keys.containsKey(parentFilters)) {
            for (            String k : keys.get(parentFilters))             resultText.add((String)((LinkedHashMap)res).get(k));
          }
        }
      }
    }
 catch (    ClassCastException e) {
      continue;
    }
  }
  return resultText;
}","private List<String> applySmartFilters(List<Filter> filters,String jsonFilePath,String operator,String keyFields,CMDataType corpusType) throws FileNotFoundException, IOException, ParseException {
  HashMap<String,List<String>> keys=processKeyfields(keyFields);
  List<String> resultText=new ArrayList<String>();
  Set<JSONObject> filteredResults=new HashSet<JSONObject>();
  HashMap<String,List<Filter>> groupedFilters=groupFilters(filters);
  JSONParser parser=new JSONParser();
  Object obj=parser.parse(new FileReader(jsonFilePath));
  JSONObject jsonObject=(JSONObject)obj;
  Object document=Configuration.defaultConfiguration().jsonProvider().parse(jsonObject.toJSONString());
  for (  String parentFilters : groupedFilters.keySet()) {
    try {
      String smartQuery;
      smartQuery=createSmartFilters(parentFilters,groupedFilters,operator);
      System.out.println(parentFilters + ""String_Node_Str"" + smartQuery);
      Object result=JsonPath.parse(document).read(smartQuery);
      if (result instanceof LinkedHashMap<?,?>) {
        LinkedHashMap<?,?> records=(LinkedHashMap<?,?>)result;
        JSONObject temp=new JSONObject();
        temp.put(parentFilters,records);
        filteredResults.add(temp);
        if (keys.containsKey(parentFilters)) {
          for (          String k : keys.get(parentFilters))           resultText.add((String)((LinkedHashMap)result).get(k));
        }
      }
 else       if (result instanceof JSONArray) {
        JSONArray records=(JSONArray)result;
        for (        Object ob : records) {
          LinkedHashMap<?,?> res=(LinkedHashMap<?,?>)ob;
          if (keys.containsKey(parentFilters)) {
            for (            String k : keys.get(parentFilters))             resultText.add((String)((LinkedHashMap)res).get(k));
          }
        }
      }
    }
 catch (    ClassCastException e) {
      continue;
    }
  }
  if (!corpusType.equals(CMDataType.TWITTER_JSON))   return processedResult(resultText);
  return resultText;
}",0.9646451612903226
168123,"public List<String> processJson(List<Filter> corpusFilters,String jsonFilepath,String keyFields) throws JsonSyntaxException, JsonIOException, IOException, ParseException {
  if (null == corpusFilters)   corpusFilters=new ArrayList<Filter>();
  List<String> parentKeys=JsonParser.getParentKeys(jsonFilepath);
  createParentFilters(corpusFilters,parentKeys);
  return applySmartFilters(corpusFilters,jsonFilepath,""String_Node_Str"",keyFields);
}","public List<String> processJson(CorpusClass corpusClass,String jsonFilepath,String keyFields) throws JsonSyntaxException, JsonIOException, IOException, ParseException {
  List<Filter> corpusFilters=corpusClass.getFilters();
  if (null == corpusFilters)   corpusFilters=new ArrayList<Filter>();
  List<String> parentKeys=JsonParser.getParentKeys(jsonFilepath);
  createParentFilters(corpusFilters,parentKeys);
  return applySmartFilters(corpusFilters,jsonFilepath,""String_Node_Str"",keyFields,corpusClass.getParent().getDatatype());
}",0.8562628336755647
168124,"/** 
 * Create the directory to store all temporary preprocessed files
 * @param caller
 */
private void createppDir(String caller){
  ppOutputPath=CommonUiActivator.getDefault().getPreferenceStore().getString(""String_Node_Str"");
  if (ppOutputPath == null || ppOutputPath.trim().length() == 0) {
    String tempOutputPath=System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
    if (!(new File(tempOutputPath).exists())) {
      new File(tempOutputPath).mkdir();
    }
 else {
      ppDir=tempOutputPath + System.getProperty(""String_Node_Str"") + caller+ ""String_Node_Str""+ currTime;
    }
  }
 else {
    ppDir=ppOutputPath + System.getProperty(""String_Node_Str"") + caller+ ""String_Node_Str""+ currTime;
    new File(ppDir).mkdir();
  }
}","/** 
 * Create the directory to store all temporary preprocessed files
 * @param caller
 */
private void createppDir(String caller){
  ppOutputPath=CommonUiActivator.getDefault().getPreferenceStore().getString(""String_Node_Str"");
  if (ppOutputPath == null || ppOutputPath.trim().length() == 0) {
    String tempOutputPath=System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
    if (!(new File(tempOutputPath).exists())) {
      new File(tempOutputPath).mkdir();
    }
 else {
      ppDir=tempOutputPath + System.getProperty(""String_Node_Str"") + caller+ ""String_Node_Str""+ currTime;
      new File(ppDir).mkdir();
    }
  }
 else {
    ppDir=ppOutputPath + System.getProperty(""String_Node_Str"") + caller+ ""String_Node_Str""+ currTime;
    new File(ppDir).mkdir();
  }
}",0.9806128830519074
168125,"/** 
 * Handle query processing, pre-processing and data extraction for input corpus class
 * @param corpusClass Input CorpusClass for processing
 * @throws Exception
 */
private void processGenericJSON(CorpusClass corpusClass) throws Exception {
  String corpusClassPath=corpusClass.getTacitLocation();
  String tempDir=""String_Node_Str"";
  String tempFile=""String_Node_Str"";
  Date dateobj=new Date();
  if (doPreprocessing)   tempFile=tempPPFileLoc + ""String_Node_Str"" + System.currentTimeMillis()+ ""String_Node_Str"";
 else {
    tempDir=ppFilesLoc + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ dateobj.getTime();
    new File(tempDir).mkdir();
  }
  File[] fileList=new File(corpusClassPath).listFiles();
  int k=0;
  for (  File f : fileList) {
    QueryProcesser qp=new QueryProcesser();
    List<String> outputs=qp.processJson(corpusClass.getFilters(),f.getAbsolutePath(),""String_Node_Str"");
    for (    String str : outputs) {
      if (doPreprocessing) {
        FileWriter fw=new FileWriter(tempFile);
        fw.write(str);
        fw.close();
        outputFiles.add(processFile(tempFile,""String_Node_Str"" + k + ""String_Node_Str""));
        k++;
        new File(tempFile).delete();
      }
 else {
        String outFile=tempDir + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ k+ ""String_Node_Str"";
        FileWriter fw=new FileWriter(outFile);
        fw.write(str);
        fw.close();
        outputFiles.add(outFile);
        k++;
      }
    }
  }
}","/** 
 * Handle query processing, pre-processing and data extraction for input corpus class
 * @param corpusClass Input CorpusClass for processing
 * @throws Exception
 */
private void processGenericJSON(CorpusClass corpusClass) throws Exception {
  String corpusClassPath=corpusClass.getTacitLocation();
  String tempDir=""String_Node_Str"";
  String tempFile=""String_Node_Str"";
  Date dateobj=new Date();
  if (doPreprocessing)   tempFile=tempPPFileLoc + ""String_Node_Str"" + System.currentTimeMillis()+ ""String_Node_Str"";
 else {
    tempDir=ppFilesLoc + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ dateobj.getTime();
    new File(tempDir).mkdir();
  }
  File[] fileList=new File(corpusClassPath).listFiles();
  int k=0;
  for (  File f : fileList) {
    QueryProcesser qp=new QueryProcesser();
    List<String> outputs=qp.processJson(corpusClass,f.getAbsolutePath(),""String_Node_Str"");
    for (    String str : outputs) {
      if (doPreprocessing) {
        FileWriter fw=new FileWriter(tempFile);
        fw.write(str);
        fw.close();
        outputFiles.add(processFile(tempFile,""String_Node_Str"" + k + ""String_Node_Str""));
        k++;
        new File(tempFile).delete();
      }
 else {
        String outFile=tempDir + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ k+ ""String_Node_Str"";
        FileWriter fw=new FileWriter(outFile);
        fw.write(str);
        fw.close();
        outputFiles.add(outFile);
        k++;
      }
    }
  }
}",0.995639047299564
168126,"private static String createSmartFilters(String parentFilters,HashMap<String,List<Filter>> groupedFilters,String condition){
  StringBuilder query=new StringBuilder();
  query.append(""String_Node_Str"");
  query.append(parentFilters);
  List<String> predicates=new ArrayList<String>();
  for (  Filter f : groupedFilters.get(parentFilters))   predicates.add(constructSmartQuery(f));
  if (predicates.size() > 1) {
    query.append(""String_Node_Str"");
    query.append(StringUtil.join(predicates,""String_Node_Str"" + condition + ""String_Node_Str""));
    query.append(""String_Node_Str"");
  }
  return new String(query);
}","private static String createSmartFilters(String parentFilters,HashMap<String,List<Filter>> groupedFilters,String condition){
  StringBuilder query=new StringBuilder();
  query.append(""String_Node_Str"");
  query.append(parentFilters);
  List<String> predicates=new ArrayList<String>();
  for (  Filter f : groupedFilters.get(parentFilters)) {
    if (f.getFilterValue() != null)     predicates.add(constructSmartQuery(f));
  }
  if (predicates.size() > 0) {
    query.append(""String_Node_Str"");
    query.append(StringUtil.join(predicates,""String_Node_Str"" + condition + ""String_Node_Str""));
    query.append(""String_Node_Str"");
  }
  return new String(query);
}",0.9640062597809076
168127,"private static void createParentFilters(List<Filter> filters,List<String> parentKeys){
  if (null == filters)   return;
  List<String> parentFilters=new ArrayList<String>();
  for (  Filter f : filters)   parentFilters.add(f.getTargetName().split(""String_Node_Str"")[0]);
  parentKeys.removeAll(parentFilters);
  for (  String key : parentKeys) {
    filters.add(new Filter(key,null,null,null));
  }
}","private static void createParentFilters(List<Filter> filters,List<String> parentKeys){
  List<String> parentFilters=new ArrayList<String>();
  for (  Filter f : filters)   parentFilters.add(f.getTargetName().split(""String_Node_Str"")[0]);
  parentKeys.removeAll(parentFilters);
  for (  String key : parentKeys) {
    filters.add(new Filter(key,null,null,null));
  }
}",0.9569752281616688
168128,"public List<String> processJson(List<Filter> corpusFilters,String jsonFilepath,String keyFields) throws JsonSyntaxException, JsonIOException, IOException, ParseException {
  List<String> parentKeys=JsonParser.getParentKeys(jsonFilepath);
  createParentFilters(corpusFilters,parentKeys);
  return applySmartFilters(corpusFilters,jsonFilepath,""String_Node_Str"",keyFields);
}","public List<String> processJson(List<Filter> corpusFilters,String jsonFilepath,String keyFields) throws JsonSyntaxException, JsonIOException, IOException, ParseException {
  if (null == corpusFilters)   corpusFilters=new ArrayList<Filter>();
  List<String> parentKeys=JsonParser.getParentKeys(jsonFilepath);
  createParentFilters(corpusFilters,parentKeys);
  return applySmartFilters(corpusFilters,jsonFilepath,""String_Node_Str"",keyFields);
}",0.914004914004914
168129,"private String processFile(String inFile,String outName){
  String outFile;
  if (outName == ""String_Node_Str"" || outName == null) {
    outFile=ppDir + System.getProperty(""String_Node_Str"") + (new File(inFile).getName());
  }
 else {
    outFile=ppDir + System.getProperty(""String_Node_Str"") + outName;
  }
  try {
    BufferedReader br=new BufferedReader(new FileReader(inFile));
    if (new File(outFile).exists()) {
      for (int i=1; i < Integer.MAX_VALUE; i++) {
        if (new File(outFile + Integer.toString(i)).exists()) {
          continue;
        }
 else {
          outFile=outFile + Integer.toString(i);
          break;
        }
      }
    }
    BufferedWriter bw=new BufferedWriter(new FileWriter(outFile));
    String currLine=""String_Node_Str"";
    while ((currLine=br.readLine()) != null) {
      if (currLine != ""String_Node_Str"") {
        if (doLowercase) {
          currLine=currLine.toLowerCase();
        }
        for (        char c : delimiters.toCharArray()) {
          currLine=currLine.replace(c,' ');
        }
        if (doStopWords) {
          currLine=removeStopWords(currLine);
        }
        if (doStemming) {
          if (isLatin) {
            try {
              currLine=latinStemmer.doStemming(currLine);
            }
 catch (            TreeTaggerException e) {
              ConsoleView.printlInConsole(""String_Node_Str"" + currLine);
              ConsoleView.printlInConsole(""String_Node_Str"");
            }
            latinStemmer.destroyTT();
          }
 else {
            currLine=stemLine(currLine);
          }
        }
        bw.write(currLine + ""String_Node_Str"");
      }
    }
    bw.close();
    br.close();
  }
 catch (  FileNotFoundException e) {
    ConsoleView.printlInConsoleln(""String_Node_Str"" + inFile);
    return ""String_Node_Str"";
  }
catch (  IOException e) {
    ConsoleView.printlInConsoleln(""String_Node_Str"" + inFile);
  }
  return outFile;
}","private String processFile(String inFile,String outName){
  String outFile;
  if (outName == ""String_Node_Str"" || outName == null) {
    outFile=ppDir + System.getProperty(""String_Node_Str"") + (new File(inFile).getName());
  }
 else {
    outFile=ppDir + System.getProperty(""String_Node_Str"") + outName;
  }
  try {
    BufferedReader br=new BufferedReader(new FileReader(inFile));
    if (new File(outFile).exists()) {
      for (int i=1; i < Integer.MAX_VALUE; i++) {
        if (new File(outFile + Integer.toString(i)).exists()) {
          continue;
        }
 else {
          outFile=outFile + Integer.toString(i);
          break;
        }
      }
    }
    BufferedWriter bw=new BufferedWriter(new FileWriter(outFile));
    String currLine=""String_Node_Str"";
    while ((currLine=br.readLine()) != null) {
      if (currLine.trim().length() != 0) {
        if (doLowercase) {
          currLine=currLine.toLowerCase();
        }
        for (        char c : delimiters.toCharArray()) {
          currLine=currLine.replace(c,' ');
        }
        if (doStopWords) {
          currLine=removeStopWords(currLine);
        }
        if (doStemming) {
          if (isLatin) {
            try {
              currLine=latinStemmer.doStemming(currLine);
            }
 catch (            TreeTaggerException e) {
              ConsoleView.printlInConsole(""String_Node_Str"" + currLine);
              ConsoleView.printlInConsole(""String_Node_Str"");
            }
          }
 else {
            currLine=stemLine(currLine);
          }
        }
        bw.write(currLine + ""String_Node_Str"");
      }
    }
    bw.close();
    br.close();
  }
 catch (  FileNotFoundException e) {
    ConsoleView.printlInConsoleln(""String_Node_Str"" + inFile);
    return ""String_Node_Str"";
  }
catch (  IOException e) {
    ConsoleView.printlInConsoleln(""String_Node_Str"" + inFile);
  }
  return outFile;
}",0.9811912225705328
168130,"private String processFile(String inFile,String outName){
  String outFile;
  if (outName == ""String_Node_Str"" || outName == null) {
    outFile=ppDir + System.getProperty(""String_Node_Str"") + (new File(inFile).getName());
  }
 else {
    outFile=ppDir + System.getProperty(""String_Node_Str"") + outName;
  }
  try {
    BufferedReader br=new BufferedReader(new FileReader(inFile));
    if (new File(outFile).exists()) {
      for (int i=1; i < Integer.MAX_VALUE; i++) {
        if (new File(outFile + Integer.toString(i)).exists()) {
          continue;
        }
 else {
          outFile=outFile + Integer.toString(i);
          break;
        }
      }
    }
    BufferedWriter bw=new BufferedWriter(new FileWriter(outFile));
    String currLine=""String_Node_Str"";
    while ((currLine=br.readLine()) != null) {
      if (currLine != ""String_Node_Str"") {
        if (doLowercase) {
          currLine.toLowerCase();
        }
        for (        char c : delimiters.toCharArray()) {
          currLine=currLine.replace(c,' ');
        }
        if (doStopWords) {
          currLine=removeStopWords(currLine);
        }
        if (doStemming) {
          if (isLatin) {
            try {
              currLine=latinStemmer.doStemming(currLine);
            }
 catch (            TreeTaggerException e) {
              ConsoleView.printlInConsole(""String_Node_Str"" + currLine);
              ConsoleView.printlInConsole(""String_Node_Str"");
            }
            latinStemmer.destroyTT();
          }
 else {
            currLine=stemLine(currLine);
          }
        }
        bw.write(currLine + ""String_Node_Str"");
      }
    }
    bw.close();
    br.close();
  }
 catch (  FileNotFoundException e) {
    ConsoleView.printlInConsoleln(""String_Node_Str"" + inFile);
    return ""String_Node_Str"";
  }
catch (  IOException e) {
    ConsoleView.printlInConsoleln(""String_Node_Str"" + inFile);
  }
  return outFile;
}","private String processFile(String inFile,String outName){
  String outFile;
  if (outName == ""String_Node_Str"" || outName == null) {
    outFile=ppDir + System.getProperty(""String_Node_Str"") + (new File(inFile).getName());
  }
 else {
    outFile=ppDir + System.getProperty(""String_Node_Str"") + outName;
  }
  try {
    BufferedReader br=new BufferedReader(new FileReader(inFile));
    if (new File(outFile).exists()) {
      for (int i=1; i < Integer.MAX_VALUE; i++) {
        if (new File(outFile + Integer.toString(i)).exists()) {
          continue;
        }
 else {
          outFile=outFile + Integer.toString(i);
          break;
        }
      }
    }
    BufferedWriter bw=new BufferedWriter(new FileWriter(outFile));
    String currLine=""String_Node_Str"";
    while ((currLine=br.readLine()) != null) {
      if (currLine != ""String_Node_Str"") {
        if (doLowercase) {
          currLine=currLine.toLowerCase();
        }
        for (        char c : delimiters.toCharArray()) {
          currLine=currLine.replace(c,' ');
        }
        if (doStopWords) {
          currLine=removeStopWords(currLine);
        }
        if (doStemming) {
          if (isLatin) {
            try {
              currLine=latinStemmer.doStemming(currLine);
            }
 catch (            TreeTaggerException e) {
              ConsoleView.printlInConsole(""String_Node_Str"" + currLine);
              ConsoleView.printlInConsole(""String_Node_Str"");
            }
            latinStemmer.destroyTT();
          }
 else {
            currLine=stemLine(currLine);
          }
        }
        bw.write(currLine + ""String_Node_Str"");
      }
    }
    bw.close();
    br.close();
  }
 catch (  FileNotFoundException e) {
    ConsoleView.printlInConsoleln(""String_Node_Str"" + inFile);
    return ""String_Node_Str"";
  }
catch (  IOException e) {
    ConsoleView.printlInConsoleln(""String_Node_Str"" + inFile);
  }
  return outFile;
}",0.9976665802437128
168131,"public void setClassName(String className){
  this.id=parent.getCorpusId() + ""String_Node_Str"" + this.className;
  this.className=className;
}","public void setClassName(String className){
  this.className=className;
}",0.6790697674418604
168132,"@Override public void widgetSelected(SelectionEvent e){
  IStructuredSelection selection=(IStructuredSelection)corpuses.getSelection();
  try {
    Object selectedObj=selection.getFirstElement();
    if (selectedObj instanceof ICorpus) {
      ICorpus selectedCorpus=(ICorpus)selection.getFirstElement();
      corpusList.remove(selectedCorpus);
      ManageCorpora.removeCorpus((Corpus)selectedCorpus,true);
    }
 else     if (selectedObj instanceof ICorpusClass) {
      ITreeSelection classSelection=(ITreeSelection)selection;
      ICorpusClass selectedClass=(ICorpusClass)selection.getFirstElement();
      Corpus parentCorpus=(Corpus)classSelection.getPaths()[0].getParentPath().getLastSegment();
      parentCorpus.removeClass(selectedClass);
      ManageCorpora.removeCorpus(parentCorpus,false);
    }
    corpuses.refresh();
  }
 catch (  Exception exp) {
  }
}","@Override public void widgetSelected(SelectionEvent e){
  IStructuredSelection selection=(IStructuredSelection)corpusViewer.getSelection();
  try {
    Object selectedObj=selection.getFirstElement();
    if (selectedObj instanceof ICorpus) {
      ICorpus selectedCorpus=(ICorpus)selection.getFirstElement();
      corpusList.remove(selectedCorpus);
      ManageCorpora.removeCorpus((Corpus)selectedCorpus,true);
    }
 else     if (selectedObj instanceof ICorpusClass) {
      ITreeSelection classSelection=(ITreeSelection)selection;
      ICorpusClass selectedClass=(ICorpusClass)selection.getFirstElement();
      Corpus parentCorpus=(Corpus)classSelection.getPaths()[0].getParentPath().getLastSegment();
      parentCorpus.removeClass(selectedClass);
      ManageCorpora.removeCorpus(parentCorpus,false);
    }
    corpusViewer.refresh();
  }
 catch (  Exception exp) {
  }
}",0.9908571428571428
168133,"@Override protected void createMasterPart(final IManagedForm managedForm,Composite parent){
  FormToolkit toolkit=managedForm.getToolkit();
  Section section=toolkit.createSection(parent,Section.DESCRIPTION | Section.TITLE_BAR);
  section.setText(""String_Node_Str"");
  Composite client=toolkit.createComposite(section,SWT.WRAP);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  layout.marginWidth=2;
  layout.marginHeight=2;
  client.setLayout(layout);
  toolkit.paintBordersFor(client);
  final TreeViewer corpuses=new TreeViewer(client,SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=400;
  gd.widthHint=100;
  corpuses.getTree().setLayoutData(gd);
  Composite buttonComposite=new Composite(client,SWT.NONE);
  GridLayout buttonLayout=new GridLayout();
  buttonLayout.marginWidth=buttonLayout.marginHeight=0;
  buttonLayout.makeColumnsEqualWidth=true;
  buttonComposite.setLayout(buttonLayout);
  buttonComposite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
  Button addCorpus=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(addCorpus);
  final Button addClass=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(addClass);
  Button remove=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(remove);
  section.setClient(client);
  final SectionPart spart=new SectionPart(section);
  managedForm.addPart(spart);
  corpuses.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      managedForm.fireSelectionChanged(spart,event.getSelection());
      try {
        IStructuredSelection selection=(IStructuredSelection)event.getSelection();
        Object selectedObj=selection.getFirstElement();
        if (selectedObj instanceof ICorpus) {
          addClass.setEnabled(true);
        }
 else         if (selectedObj instanceof ICorpusClass) {
          addClass.setEnabled(false);
        }
      }
 catch (      Exception exp) {
      }
    }
  }
);
  corpuses.setContentProvider(new MasterContentProvider());
  corpuses.setLabelProvider(new MasterLabelProvider());
  for (  ICorpus corpus : corpusList)   ((Corpus)corpus).setViewer(corpuses);
  corpuses.setInput(corpusList);
  addCorpus.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      StringBuilder corpusTempName=new StringBuilder(""String_Node_Str"");
      corpusTempName.append(corpusList.size() + 1);
      Corpus c=new Corpus(new String(corpusTempName),DataType.PLAIN_TEXT,corpuses);
      c.addClass(new CorpusClass(""String_Node_Str"",ICorpusManagementConstants.DEFAULT_CLASSPATH,corpuses));
      ;
      corpusList.add(c);
      Object[] expandedItems=corpuses.getExpandedElements();
      corpuses.setInput(corpusList);
      corpuses.setExpandedElements(expandNewCorpus(expandedItems,c));
      corpuses.setSelection(new StructuredSelection(c),true);
    }
  }
);
  addClass.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)corpuses.getSelection();
      try {
        ICorpus corpusSelected=(ICorpus)selection.getFirstElement();
        int corpusIndex=corpusList.indexOf(corpusSelected);
        StringBuilder classTempName=new StringBuilder(""String_Node_Str"");
        classTempName.append(corpusList.get(corpusIndex).getClasses().size() + 1);
        CorpusClass newClass=new CorpusClass(new String(classTempName),ICorpusManagementConstants.DEFAULT_CLASSPATH,corpuses);
        ((Corpus)corpusSelected).addClass(newClass);
        corpusList.set(corpusIndex,corpusSelected);
        corpuses.refresh();
        corpuses.setExpandedElements(expandNewCorpus(corpuses.getExpandedElements(),(Corpus)corpusList.get(corpusIndex)));
        corpuses.setSelection(new StructuredSelection(newClass),true);
      }
 catch (      Exception exp) {
      }
    }
  }
);
  remove.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)corpuses.getSelection();
      try {
        Object selectedObj=selection.getFirstElement();
        if (selectedObj instanceof ICorpus) {
          ICorpus selectedCorpus=(ICorpus)selection.getFirstElement();
          corpusList.remove(selectedCorpus);
          ManageCorpora.removeCorpus((Corpus)selectedCorpus,true);
        }
 else         if (selectedObj instanceof ICorpusClass) {
          ITreeSelection classSelection=(ITreeSelection)selection;
          ICorpusClass selectedClass=(ICorpusClass)selection.getFirstElement();
          Corpus parentCorpus=(Corpus)classSelection.getPaths()[0].getParentPath().getLastSegment();
          parentCorpus.removeClass(selectedClass);
          ManageCorpora.removeCorpus(parentCorpus,false);
        }
        corpuses.refresh();
      }
 catch (      Exception exp) {
      }
    }
  }
);
}","@Override protected void createMasterPart(final IManagedForm managedForm,Composite parent){
  FormToolkit toolkit=managedForm.getToolkit();
  Section section=toolkit.createSection(parent,Section.DESCRIPTION | Section.TITLE_BAR);
  section.setText(""String_Node_Str"");
  Composite client=toolkit.createComposite(section,SWT.WRAP);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  layout.marginWidth=2;
  layout.marginHeight=2;
  client.setLayout(layout);
  toolkit.paintBordersFor(client);
  final TreeViewer corpusViewer=new TreeViewer(client,SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=400;
  gd.widthHint=100;
  corpusViewer.getTree().setLayoutData(gd);
  Composite buttonComposite=new Composite(client,SWT.NONE);
  GridLayout buttonLayout=new GridLayout();
  buttonLayout.marginWidth=buttonLayout.marginHeight=0;
  buttonLayout.makeColumnsEqualWidth=true;
  buttonComposite.setLayout(buttonLayout);
  buttonComposite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
  Button addCorpus=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(addCorpus);
  final Button addClass=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(addClass);
  Button remove=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(remove);
  section.setClient(client);
  final SectionPart spart=new SectionPart(section);
  managedForm.addPart(spart);
  corpusViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      managedForm.fireSelectionChanged(spart,event.getSelection());
      try {
        IStructuredSelection selection=(IStructuredSelection)event.getSelection();
        Object selectedObj=selection.getFirstElement();
        if (selectedObj instanceof ICorpus) {
          addClass.setEnabled(true);
        }
 else         if (selectedObj instanceof ICorpusClass) {
          addClass.setEnabled(false);
        }
      }
 catch (      Exception exp) {
      }
    }
  }
);
  corpusViewer.setContentProvider(new MasterContentProvider());
  corpusViewer.setLabelProvider(new MasterLabelProvider());
  for (  ICorpus corpus : corpusList) {
    ((Corpus)corpus).setViewer(corpusViewer);
    for (    ICorpusClass cc : corpus.getClasses()) {
      ((CorpusClass)cc).setViewer(corpusViewer);
    }
  }
  corpusViewer.setInput(corpusList);
  addCorpus.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      StringBuilder corpusTempName=new StringBuilder(""String_Node_Str"");
      corpusTempName.append(corpusList.size() + 1);
      Corpus c=new Corpus(new String(corpusTempName),DataType.PLAIN_TEXT,corpusViewer);
      c.addClass(new CorpusClass(""String_Node_Str"",ICorpusManagementConstants.DEFAULT_CLASSPATH,corpusViewer));
      ;
      corpusList.add(c);
      Object[] expandedItems=corpusViewer.getExpandedElements();
      corpusViewer.setInput(corpusList);
      corpusViewer.setExpandedElements(expandNewCorpus(expandedItems,c));
      corpusViewer.setSelection(new StructuredSelection(c),true);
    }
  }
);
  addClass.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)corpusViewer.getSelection();
      try {
        ICorpus corpusSelected=(ICorpus)selection.getFirstElement();
        int corpusIndex=corpusList.indexOf(corpusSelected);
        StringBuilder classTempName=new StringBuilder(""String_Node_Str"");
        classTempName.append(corpusList.get(corpusIndex).getClasses().size() + 1);
        CorpusClass newClass=new CorpusClass(new String(classTempName),ICorpusManagementConstants.DEFAULT_CLASSPATH,corpusViewer);
        ((Corpus)corpusSelected).addClass(newClass);
        corpusList.set(corpusIndex,corpusSelected);
        corpusViewer.refresh();
        corpusViewer.setExpandedElements(expandNewCorpus(corpusViewer.getExpandedElements(),(Corpus)corpusList.get(corpusIndex)));
        corpusViewer.setSelection(new StructuredSelection(newClass),true);
      }
 catch (      Exception exp) {
      }
    }
  }
);
  remove.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)corpusViewer.getSelection();
      try {
        Object selectedObj=selection.getFirstElement();
        if (selectedObj instanceof ICorpus) {
          ICorpus selectedCorpus=(ICorpus)selection.getFirstElement();
          corpusList.remove(selectedCorpus);
          ManageCorpora.removeCorpus((Corpus)selectedCorpus,true);
        }
 else         if (selectedObj instanceof ICorpusClass) {
          ITreeSelection classSelection=(ITreeSelection)selection;
          ICorpusClass selectedClass=(ICorpusClass)selection.getFirstElement();
          Corpus parentCorpus=(Corpus)classSelection.getPaths()[0].getParentPath().getLastSegment();
          parentCorpus.removeClass(selectedClass);
          ManageCorpora.removeCorpus(parentCorpus,false);
        }
        corpusViewer.refresh();
      }
 catch (      Exception exp) {
      }
    }
  }
);
}",0.971165586550202
168134,"public static List<String> refineInput(List<String> selectedInputs){
  List<String> refinedInputList=new ArrayList<String>();
  Pattern corpusDetector=Pattern.compile(""String_Node_Str"");
  for (  String input : selectedInputs) {
    Matcher m=corpusDetector.matcher(input);
    if (m.find()) {
      String corpusClassPath=m.group(1);
      CMDataType corpusType=new ManageCorpora().getCorpusDataType(corpusClassPath);
      if (corpusType == null)       continue;
      if (corpusType.equals(CMDataType.TWITTER_JSON))       input=new TwitterReadJsonData().retrieveTwitterData(corpusClassPath);
 else       if (corpusType.equals(CMDataType.REDDIT_JSON))       input=new RedditJsonHandler().retrieveRedditData(corpusClassPath);
 else       input=corpusClassPath;
    }
    File inputFile=new File(input);
    if (!inputFile.exists())     continue;
    if (!inputFile.isDirectory())     refinedInputList.add(inputFile.getAbsolutePath());
 else     refinedInputList.addAll(getFilesFromFolder(inputFile.getAbsolutePath()));
  }
  return refinedInputList;
}","public static List<String> refineInput(List<String> selectedInputs){
  Set<String> refinedInputList=new HashSet<String>();
  Pattern corpusDetector=Pattern.compile(""String_Node_Str"");
  for (  String input : selectedInputs) {
    Matcher m=corpusDetector.matcher(input);
    if (m.find()) {
      String corpusClassPath=m.group(1);
      CMDataType corpusType=new ManageCorpora().getCorpusDataType(corpusClassPath);
      if (corpusType == null)       continue;
      if (corpusType.equals(CMDataType.TWITTER_JSON))       input=new TwitterReadJsonData().retrieveTwitterData(corpusClassPath);
 else       if (corpusType.equals(CMDataType.REDDIT_JSON))       input=new RedditJsonHandler().retrieveRedditData(corpusClassPath);
 else       input=corpusClassPath;
    }
    File inputFile=new File(input);
    if (!inputFile.exists())     continue;
    if (!inputFile.isDirectory())     refinedInputList.add(inputFile.getAbsolutePath());
 else     refinedInputList.addAll(getFilesFromFolder(inputFile.getAbsolutePath()));
  }
  return new ArrayList<String>(refinedInputList);
}",0.9595103578154426
168135,"public String retrieveTwitterData(String location){
  String path=null;
  JSONParser jParser;
  try {
    jParser=new JSONParser();
    dateobj=new Date();
    path=new File(System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + ""String_Node_Str"") + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ df.format(dateobj);
    new File(path).mkdir();
    File[] fileList=new File(location).listFiles();
    for (int i=0; i < fileList.length; i++) {
      String fileName=fileList[i].getAbsolutePath();
      if (!fileList[i].getAbsolutePath().endsWith(""String_Node_Str""))       continue;
      JSONArray objects=(JSONArray)jParser.parse(new FileReader(fileName));
      for (      Object obj : objects) {
        JSONObject twitterStream=(JSONObject)obj;
        dateobj=new Date();
        File file=new File(path + File.separator + ""String_Node_Str""+ df.format(dateobj));
        if (file.exists()) {
          file.delete();
        }
        FileWriter fw=new FileWriter(file.getAbsoluteFile());
        BufferedWriter bw=new BufferedWriter(fw);
        bw.write(twitterStream.get(""String_Node_Str"").toString());
        bw.close();
      }
    }
  }
 catch (  JsonParseException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ParseException e) {
    e.printStackTrace();
  }
  return path;
}","public String retrieveTwitterData(String location){
  String path=null;
  JSONParser jParser;
  try {
    jParser=new JSONParser();
    dateobj=new Date();
    path=new File(System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + ""String_Node_Str"") + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ UUID.randomUUID().toString()+ ""String_Node_Str""+ df.format(dateobj);
    new File(path).mkdir();
    File[] fileList=new File(location).listFiles();
    for (int i=0; i < fileList.length; i++) {
      String fileName=fileList[i].getAbsolutePath();
      if (!fileList[i].getAbsolutePath().endsWith(""String_Node_Str""))       continue;
      JSONArray objects=(JSONArray)jParser.parse(new FileReader(fileName));
      int j=0;
      for (      Object obj : objects) {
        JSONObject twitterStream=(JSONObject)obj;
        dateobj=new Date();
        File file=new File(path + File.separator + ""String_Node_Str""+ j+ ""String_Node_Str""+ df.format(dateobj));
        j++;
        if (file.exists()) {
          file.delete();
        }
        FileWriter fw=new FileWriter(file.getAbsoluteFile());
        BufferedWriter bw=new BufferedWriter(fw);
        bw.write(twitterStream.get(""String_Node_Str"").toString());
        bw.close();
      }
    }
  }
 catch (  JsonParseException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ParseException e) {
    e.printStackTrace();
  }
  return path;
}",0.965323992994746
168136,"@SuppressWarnings(""String_Node_Str"") private void saveLinkComments(JSONObject obj,JSONObject linkData) throws IOException, URISyntaxException {
  String permalink=String.valueOf(obj.get(""String_Node_Str""));
  if (-1 != permalink.indexOf(""String_Node_Str"")) {
    String temp[]=permalink.split(""String_Node_Str"");
    permalink=temp[0];
  }
  System.out.println(""String_Node_Str"" + permalink);
  DateFormat df=new SimpleDateFormat(""String_Node_Str"");
  String filePath=this.outputPath + File.separator + getLastURLComponent(permalink)+ ""String_Node_Str""+ df.format(dateObj)+ ""String_Node_Str"";
  JSONArray linkComments=new JSONArray();
  Object response=restClient.get(permalink.concat(""String_Node_Str""),null).getResponseObject();
  int count=0;
  breakCommentFetch:   while (true) {
    if (response instanceof JSONArray) {
      JSONObject respObject=(JSONObject)((JSONArray)response).get(1);
      if (null == respObject || respObject.isEmpty())       return;
      JSONObject dataObject=(JSONObject)respObject.get(""String_Node_Str"");
      if (null == dataObject || dataObject.isEmpty())       return;
      JSONArray userComments=(JSONArray)dataObject.get(""String_Node_Str"");
      if (null == userComments || userComments.isEmpty())       return;
      for (      Object post : userComments) {
        JSONObject data=(JSONObject)post;
        String kind=safeJsonToString(data.get(""String_Node_Str""));
        if (kind != null) {
          if (kind.equals(Kind.COMMENT.value())) {
            data=((JSONObject)data.get(""String_Node_Str""));
            linkComments.add(getSimplifiedCommentData(data));
            count++;
            if (count == this.limitComments)             break breakCommentFetch;
          }
 else           if (kind.equals(Kind.MORE.value())) {
            dataObject=(JSONObject)data.get(""String_Node_Str"");
            userComments=(JSONArray)dataObject.get(""String_Node_Str"");
            for (            Object morePost : userComments) {
              JSONObject result=fetchThisComment(morePost,permalink);
              if (null != result)               linkComments.add(result);
              count++;
              if (count == this.limitComments)               break breakCommentFetch;
            }
          }
        }
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  JSONObject consolidatedData=new JSONObject();
  consolidatedData.put(""String_Node_Str"",linkData);
  consolidatedData.put(""String_Node_Str"",linkComments);
  ConsoleView.printlInConsoleln(""String_Node_Str"" + filePath);
  FileWriter file=new FileWriter(filePath);
  Writer writer=new JSONWriter();
  consolidatedData.writeJSONString(writer);
  file.write(writer.toString());
  file.flush();
  file.close();
  filesDownloaded++;
}","@SuppressWarnings(""String_Node_Str"") private void saveLinkComments(JSONObject obj,JSONObject linkData) throws IOException, URISyntaxException {
  String permalink=String.valueOf(obj.get(""String_Node_Str""));
  if (-1 != permalink.indexOf(""String_Node_Str"")) {
    String temp[]=permalink.split(""String_Node_Str"");
    permalink=temp[0];
  }
  System.out.println(""String_Node_Str"" + permalink);
  DateFormat df=new SimpleDateFormat(""String_Node_Str"");
  String filePath=this.outputPath + File.separator + getLastURLComponent(permalink)+ ""String_Node_Str""+ df.format(dateObj)+ ""String_Node_Str"";
  JSONArray linkComments=new JSONArray();
  Object response=restClient.get(permalink.concat(""String_Node_Str""),null).getResponseObject();
  int count=0;
  breakCommentFetch:   while (true) {
    if (response instanceof JSONArray) {
      JSONObject respObject=(JSONObject)((JSONArray)response).get(1);
      if (null == respObject || respObject.isEmpty())       return;
      JSONObject dataObject=(JSONObject)respObject.get(""String_Node_Str"");
      if (null == dataObject || dataObject.isEmpty())       return;
      JSONArray userComments=(JSONArray)dataObject.get(""String_Node_Str"");
      if (null == userComments || userComments.isEmpty())       return;
      for (      Object post : userComments) {
        JSONObject data=(JSONObject)post;
        String kind=safeJsonToString(data.get(""String_Node_Str""));
        if (kind != null) {
          if (kind.equals(Kind.COMMENT.value())) {
            data=((JSONObject)data.get(""String_Node_Str""));
            linkComments.add(getSimplifiedCommentData(data));
            count++;
            if (count == this.limitComments)             break breakCommentFetch;
          }
 else           if (kind.equals(Kind.MORE.value())) {
            dataObject=(JSONObject)data.get(""String_Node_Str"");
            userComments=(JSONArray)dataObject.get(""String_Node_Str"");
            for (            Object morePost : userComments) {
              JSONObject result=fetchThisComment(morePost,permalink);
              if (null != result)               linkComments.add(result);
              count++;
              if (count == this.limitComments)               break breakCommentFetch;
            }
          }
        }
      }
      break breakCommentFetch;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  JSONObject consolidatedData=new JSONObject();
  consolidatedData.put(""String_Node_Str"",linkData);
  consolidatedData.put(""String_Node_Str"",linkComments);
  ConsoleView.printlInConsoleln(""String_Node_Str"" + filePath);
  FileWriter file=new FileWriter(filePath);
  Writer writer=new JSONWriter();
  consolidatedData.writeJSONString(writer);
  file.write(writer.toString());
  file.flush();
  file.close();
  filesDownloaded++;
}",0.9944692239072256
168137,"private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (RedditCrawlerViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    String outputDir;
    String query;
    String title;
    String author;
    String site;
    String linkId;
    String sortType;
    String trendType;
    String labelType;
    String timeFrame;
    int limitLinks, limitComments;
    boolean search;
    boolean trendingData;
    boolean labeledData;
    boolean canProceed;
    @Override public void run(){
      final Job job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              search=crawlSearchResultsButton.getSelection();
              trendingData=crawlTrendingDataButton.getSelection();
              labeledData=crawlLabeledButton.getSelection();
              if (search) {
                query=queryText.getText();
                title=titleText.getText();
                author=authorText.getText();
                site=siteText.getText();
                linkId=linkText.getText();
                sortType=sortTypes[cmbSortType.getSelectionIndex()].toLowerCase();
                timeFrame=timeFrames[cmbTimeFrames.getSelectionIndex()].toLowerCase();
              }
 else               if (trendingData) {
                trendType=trendTypes[cmbTrendType.getSelectionIndex()].toLowerCase();
              }
 else               if (labeledData) {
                labelType=labelDataTypes[cmbLabelType.getSelectionIndex()].toLowerCase();
                timeFrame=timeFrames[cmbTimeFrames.getSelectionIndex()].toLowerCase();
              }
              limitLinks=Integer.parseInt(numLinksText.getText());
              limitComments=Integer.parseInt(numCommentsText.getText());
              outputDir=outputLayout.getOutputLabel().getText();
            }
          }
);
          int progressSize=limitLinks + 30;
          if (content.size() > 0)           progressSize=(content.size() * limitLinks) + 30;
          monitor.beginTask(""String_Node_Str"",progressSize);
          TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          final RedditCrawler rc=new RedditCrawler(outputDir,limitLinks,limitComments,monitor);
          monitor.subTask(""String_Node_Str"");
          monitor.worked(10);
          if (monitor.isCanceled())           handledCancelRequest(""String_Node_Str"");
          if (search) {
            try {
              monitor.subTask(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              rc.search(query,title,author,site,linkId,timeFrame,sortType,content);
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
            }
 catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
          }
 else           if (trendingData) {
            try {
              monitor.subTask(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              rc.crawlTrendingData(trendType);
            }
 catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
          }
 else           if (labeledData) {
            try {
              monitor.subTask(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              rc.crawlLabeledData(labelType,timeFrame);
            }
 catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
          }
          if (monitor.isCanceled())           return handledCancelRequest(""String_Node_Str"");
          monitor.worked(100);
          monitor.done();
          ConsoleView.printlInConsoleln(""String_Node_Str"");
          ConsoleView.printlInConsoleln(""String_Node_Str"");
          TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
          TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      canProceed=canItProceed();
      if (canProceed) {
        job.schedule();
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (RedditCrawlerViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}","private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (RedditCrawlerViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    String outputDir;
    String query;
    String title;
    String author;
    String site;
    String linkId;
    String sortType;
    String trendType;
    String labelType;
    String timeFrame;
    int limitLinks, limitComments;
    boolean search;
    boolean trendingData;
    boolean labeledData;
    boolean canProceed;
    @Override public void run(){
      final Job job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              search=crawlSearchResultsButton.getSelection();
              trendingData=crawlTrendingDataButton.getSelection();
              labeledData=crawlLabeledButton.getSelection();
              if (search) {
                query=queryText.getText();
                title=titleText.getText();
                author=authorText.getText();
                site=siteText.getText();
                linkId=linkText.getText();
                sortType=sortTypes[cmbSortType.getSelectionIndex()].toLowerCase();
                timeFrame=timeFramesMap.get(cmbTimeFrames.getSelectionIndex()).toLowerCase();
              }
 else               if (trendingData) {
                trendType=trendTypes[cmbTrendType.getSelectionIndex()].toLowerCase();
              }
 else               if (labeledData) {
                labelType=labelDataTypes[cmbLabelType.getSelectionIndex()].toLowerCase();
                timeFrame=timeFramesMap.get(cmbTimeFrames.getSelectionIndex()).toLowerCase();
              }
              limitLinks=Integer.parseInt(numLinksText.getText());
              limitComments=Integer.parseInt(numCommentsText.getText());
              outputDir=outputLayout.getOutputLabel().getText();
            }
          }
);
          int progressSize=limitLinks + 30;
          if (content.size() > 0)           progressSize=(content.size() * limitLinks) + 30;
          monitor.beginTask(""String_Node_Str"",progressSize);
          TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          final RedditCrawler rc=new RedditCrawler(outputDir,limitLinks,limitComments,monitor);
          monitor.subTask(""String_Node_Str"");
          monitor.worked(10);
          if (monitor.isCanceled())           handledCancelRequest(""String_Node_Str"");
          if (search) {
            try {
              monitor.subTask(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              rc.search(query,title,author,site,linkId,timeFrame,sortType,content);
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
            }
 catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
          }
 else           if (trendingData) {
            try {
              monitor.subTask(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              rc.crawlTrendingData(trendType);
            }
 catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
          }
 else           if (labeledData) {
            try {
              monitor.subTask(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              if (monitor.isCanceled())               return handledCancelRequest(""String_Node_Str"");
              rc.crawlLabeledData(labelType,timeFrame);
            }
 catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
          }
          if (monitor.isCanceled())           return handledCancelRequest(""String_Node_Str"");
          monitor.worked(100);
          monitor.done();
          ConsoleView.printlInConsoleln(""String_Node_Str"");
          ConsoleView.printlInConsoleln(""String_Node_Str"");
          TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
          TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      canProceed=canItProceed();
      if (canProceed) {
        job.schedule();
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (RedditCrawlerViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}",0.9980472217290964
168138,"public void linkExited(HyperlinkEvent e){
}","@Override public void linkExited(HyperlinkEvent e){
}",0.8958333333333334
168139,"@Override public void widgetSelected(SelectionEvent e){
  ICorpus selectedCorpus=manageCorpora.readCorpusById(corpuraList[cmbSortType.getSelectionIndex()]);
  if (inputList == null) {
    inputList=new ArrayList<String>();
  }
  if (selectedCorpus.getDatatype().equals(DataType.TWITTER_JSON)) {
    TwitterReadJsonData twitterReadJsonData=new TwitterReadJsonData();
    for (    ICorpusClass cls : selectedCorpus.getClasses()) {
      inputList.addAll(twitterReadJsonData.retrieveTwitterData(cls.getClassPath()));
    }
  }
 else   if (selectedCorpus.getDatatype().equals(DataType.REDDIT_JSON)) {
  }
 else   if (selectedCorpus.getDatatype().equals((DataType.PLAIN_TEXT))) {
  }
 else   if (selectedCorpus.getDatatype().equals((DataType.MICROSOFT_WORD))) {
  }
 else   if (selectedCorpus.getDatatype().equals((DataType.XML))) {
  }
}","@Override public void widgetSelected(SelectionEvent e){
  ICorpus selectedCorpus=manageCorpora.readCorpusById(corpuraList[cmbSortType.getSelectionIndex()]);
  if (inputList == null) {
    inputList=new ArrayList<String>();
  }
  if (selectedCorpus.getDatatype().equals(DataType.TWITTER_JSON)) {
    TwitterReadJsonData twitterReadJsonData=new TwitterReadJsonData();
    for (    ICorpusClass cls : selectedCorpus.getClasses()) {
      inputList.add(twitterReadJsonData.retrieveTwitterData(cls.getClassPath()));
    }
  }
 else   if (selectedCorpus.getDatatype().equals(DataType.REDDIT_JSON)) {
  }
 else   if (selectedCorpus.getDatatype().equals((DataType.PLAIN_TEXT))) {
  }
 else   if (selectedCorpus.getDatatype().equals((DataType.MICROSOFT_WORD))) {
  }
 else   if (selectedCorpus.getDatatype().equals((DataType.XML))) {
  }
}",0.9981960312687912
168140,"public void linkEntered(HyperlinkEvent e){
}","@Override public void linkEntered(HyperlinkEvent e){
}",0.8979591836734694
168141,"private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (LdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
      final int noOfTopics=Integer.valueOf(numberOfTopics.getText()).intValue();
      final boolean isPreprocess=preprocessEnabled.getSelection();
      final String inputPath=inputLayoutData.getOutputLabel().getText();
      final String outputPath=layoutData.getOutputLabel().getText();
      final String preFix=prefixTxt.getText();
      final boolean wordWeightFile=wordWeights.getSelection();
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          List<String> inputFiles=new ArrayList<String>();
          String topicModelDirPath=inputPath;
          Preprocess preprocessTask=new Preprocess(""String_Node_Str"");
          if (isPreprocess) {
            monitor.subTask(""String_Node_Str"");
            try {
              File[] inputFile=new File(inputPath).listFiles();
              for (              File iFile : inputFile) {
                if (iFile.getAbsolutePath().contains(""String_Node_Str""))                 continue;
                inputFiles.add(iFile.toString());
              }
              topicModelDirPath=preprocessTask.doPreprocessing(inputFiles,""String_Node_Str"");
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
            monitor.worked(10);
          }
          lda.initialize(topicModelDirPath,noOfTopics,outputPath,preFix,wordWeightFile);
          long startTime=System.currentTimeMillis();
          Date dateObj=new Date();
          monitor.subTask(""String_Node_Str"");
          try {
            lda.doLDA(monitor,dateObj);
          }
 catch (          FileNotFoundException e) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
catch (          IOException e) {
            monitor.done();
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return Status.CANCEL_STATUS;
          }
          monitor.worked(20);
          ConsoleView.printlInConsoleln(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
          if (monitor.isCanceled()) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return Status.CANCEL_STATUS;
          }
          if (isPreprocess)           preprocessTask.clean();
          monitor.worked(10);
          monitor.done();
          TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      if (canProceedCluster()) {
        job.schedule();
      }
 else {
        TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (LdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}","private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (LdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      final int noOfTopics=Integer.valueOf(numberOfTopics.getText()).intValue();
      final boolean isPreprocess=preprocessEnabled.getSelection();
      final String inputPath=inputLayoutData.getOutputLabel().getText();
      final String outputPath=layoutData.getOutputLabel().getText();
      final String preFix=prefixTxt.getText();
      final boolean wordWeightFile=wordWeights.getSelection();
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          List<String> inputFiles=new ArrayList<String>();
          String topicModelDirPath=inputPath;
          Preprocess preprocessTask=new Preprocess(""String_Node_Str"");
          if (isPreprocess) {
            monitor.subTask(""String_Node_Str"");
            try {
              File[] inputFile=new File(inputPath).listFiles();
              for (              File iFile : inputFile) {
                if (iFile.getAbsolutePath().contains(""String_Node_Str""))                 continue;
                inputFiles.add(iFile.toString());
              }
              topicModelDirPath=preprocessTask.doPreprocessing(inputFiles,""String_Node_Str"");
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
            monitor.worked(10);
          }
          lda.initialize(topicModelDirPath,noOfTopics,outputPath,preFix,wordWeightFile);
          long startTime=System.currentTimeMillis();
          Date dateObj=new Date();
          monitor.subTask(""String_Node_Str"");
          try {
            lda.doLDA(monitor,dateObj);
          }
 catch (          FileNotFoundException e) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
catch (          IOException e) {
            monitor.done();
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return Status.CANCEL_STATUS;
          }
          monitor.worked(20);
          ConsoleView.printlInConsoleln(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
          if (monitor.isCanceled()) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return Status.CANCEL_STATUS;
          }
          if (isPreprocess)           preprocessTask.clean();
          monitor.worked(10);
          monitor.done();
          TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      if (canProceedCluster()) {
        job.schedule();
      }
 else {
        TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (LdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}",0.9988026819923372
168142,"public void linkActivated(HyperlinkEvent e){
  String id=""String_Node_Str"";
  PreferencesUtil.createPreferenceDialogOn(link.getShell(),id,new String[]{id},null).open();
}","@Override public void linkActivated(HyperlinkEvent e){
  String id=""String_Node_Str"";
  PreferencesUtil.createPreferenceDialogOn(link.getShell(),id,new String[]{id},null).open();
}",0.9714285714285714
168143,"private void createCorpusSection(Composite client){
  Group group=new Group(client,SWT.SHADOW_IN);
  group.setText(""String_Node_Str"");
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  group.setLayout(layout);
  final Button corpusEnabled=new Button(group,SWT.CHECK);
  corpusEnabled.setText(""String_Node_Str"");
  corpusEnabled.setBounds(10,10,10,10);
  corpusEnabled.pack();
  final Composite sectionClient=new Composite(group,SWT.None);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(sectionClient);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sectionClient);
  sectionClient.pack();
  final Label inputPathLabel=new Label(sectionClient,SWT.NONE);
  inputPathLabel.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(inputPathLabel);
  final Combo cmbSortType=new Combo(sectionClient,SWT.FLAT | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).applyTo(cmbSortType);
  manageCorpora=new ManageCorpora();
  corpuraList=manageCorpora.getNames();
  cmbSortType.setItems(corpuraList);
  cmbSortType.setEnabled(false);
  corpusEnabled.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (corpusEnabled.getSelection()) {
        cmbSortType.setEnabled(true);
      }
 else {
        cmbSortType.setEnabled(false);
      }
    }
  }
);
  cmbSortType.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      ICorpus selectedCorpus=manageCorpora.readCorpusById(corpuraList[cmbSortType.getSelectionIndex()]);
      if (inputList == null) {
        inputList=new ArrayList<String>();
      }
      if (selectedCorpus.getDatatype().equals(DataType.TWITTER_JSON)) {
        TwitterReadJsonData twitterReadJsonData=new TwitterReadJsonData();
        for (        ICorpusClass cls : selectedCorpus.getClasses()) {
          inputList.addAll(twitterReadJsonData.retrieveTwitterData(cls.getClassPath()));
        }
      }
 else       if (selectedCorpus.getDatatype().equals(DataType.REDDIT_JSON)) {
      }
 else       if (selectedCorpus.getDatatype().equals((DataType.PLAIN_TEXT))) {
      }
 else       if (selectedCorpus.getDatatype().equals((DataType.MICROSOFT_WORD))) {
      }
 else       if (selectedCorpus.getDatatype().equals((DataType.XML))) {
      }
    }
  }
);
  TacitFormComposite.createEmptyRow(null,sectionClient);
}","private void createCorpusSection(Composite client){
  Group group=new Group(client,SWT.SHADOW_IN);
  group.setText(""String_Node_Str"");
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  group.setLayout(layout);
  final Button corpusEnabled=new Button(group,SWT.CHECK);
  corpusEnabled.setText(""String_Node_Str"");
  corpusEnabled.setBounds(10,10,10,10);
  corpusEnabled.pack();
  final Composite sectionClient=new Composite(group,SWT.None);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(sectionClient);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sectionClient);
  sectionClient.pack();
  final Label inputPathLabel=new Label(sectionClient,SWT.NONE);
  inputPathLabel.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(inputPathLabel);
  final Combo cmbSortType=new Combo(sectionClient,SWT.FLAT | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).applyTo(cmbSortType);
  manageCorpora=new ManageCorpora();
  corpuraList=manageCorpora.getNames();
  cmbSortType.setItems(corpuraList);
  cmbSortType.setEnabled(false);
  corpusEnabled.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (corpusEnabled.getSelection()) {
        cmbSortType.setEnabled(true);
      }
 else {
        cmbSortType.setEnabled(false);
      }
    }
  }
);
  cmbSortType.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      ICorpus selectedCorpus=manageCorpora.readCorpusById(corpuraList[cmbSortType.getSelectionIndex()]);
      if (inputList == null) {
        inputList=new ArrayList<String>();
      }
      if (selectedCorpus.getDatatype().equals(DataType.TWITTER_JSON)) {
        TwitterReadJsonData twitterReadJsonData=new TwitterReadJsonData();
        for (        ICorpusClass cls : selectedCorpus.getClasses()) {
          inputList.add(twitterReadJsonData.retrieveTwitterData(cls.getClassPath()));
        }
      }
 else       if (selectedCorpus.getDatatype().equals(DataType.REDDIT_JSON)) {
      }
 else       if (selectedCorpus.getDatatype().equals((DataType.PLAIN_TEXT))) {
      }
 else       if (selectedCorpus.getDatatype().equals((DataType.MICROSOFT_WORD))) {
      }
 else       if (selectedCorpus.getDatatype().equals((DataType.XML))) {
      }
    }
  }
);
  TacitFormComposite.createEmptyRow(null,sectionClient);
}",0.9994095650462508
168144,"private void createPreprocessLink(Composite client){
  Composite clientLink=toolkit.createComposite(client);
  GridLayoutFactory.fillDefaults().equalWidth(false).numColumns(2).applyTo(clientLink);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(clientLink);
  preprocessEnabled=toolkit.createButton(clientLink,""String_Node_Str"",SWT.CHECK);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(preprocessEnabled);
  final Hyperlink link=toolkit.createHyperlink(clientLink,""String_Node_Str"",SWT.NONE);
  link.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
  link.addHyperlinkListener(new IHyperlinkListener(){
    public void linkEntered(    HyperlinkEvent e){
    }
    public void linkExited(    HyperlinkEvent e){
    }
    public void linkActivated(    HyperlinkEvent e){
      String id=""String_Node_Str"";
      PreferencesUtil.createPreferenceDialogOn(link.getShell(),id,new String[]{id},null).open();
    }
  }
);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(link);
}","private void createPreprocessLink(Composite client){
  Composite clientLink=toolkit.createComposite(client);
  GridLayoutFactory.fillDefaults().equalWidth(false).numColumns(2).applyTo(clientLink);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(clientLink);
  preprocessEnabled=toolkit.createButton(clientLink,""String_Node_Str"",SWT.CHECK);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(preprocessEnabled);
  final Hyperlink link=toolkit.createHyperlink(clientLink,""String_Node_Str"",SWT.NONE);
  link.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
  link.addHyperlinkListener(new IHyperlinkListener(){
    @Override public void linkEntered(    HyperlinkEvent e){
    }
    @Override public void linkExited(    HyperlinkEvent e){
    }
    @Override public void linkActivated(    HyperlinkEvent e){
      String id=""String_Node_Str"";
      PreferencesUtil.createPreferenceDialogOn(link.getShell(),id,new String[]{id},null).open();
    }
  }
);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(link);
}",0.9859022556390976
168145,"public void linkExited(HyperlinkEvent e){
}","@Override public void linkExited(HyperlinkEvent e){
}",0.8958333333333334
168146,"@Override public void widgetSelected(SelectionEvent e){
  ICorpus selectedCorpus=manageCorpora.readCorpusById(corpuraList[cmbSortType.getSelectionIndex()]);
  if (inputList == null) {
    inputList=new ArrayList<String>();
  }
  if (selectedCorpus.getDatatype().equals(DataType.TWITTER_JSON)) {
    TwitterReadJsonData twitterReadJsonData=new TwitterReadJsonData();
    for (    ICorpusClass cls : selectedCorpus.getClasses()) {
      inputList.addAll(twitterReadJsonData.retrieveTwitterData(cls.getClassPath()));
    }
  }
 else   if (selectedCorpus.getDatatype().equals(DataType.REDDIT_JSON)) {
  }
 else   if (selectedCorpus.getDatatype().equals((DataType.PLAIN_TEXT))) {
  }
 else   if (selectedCorpus.getDatatype().equals((DataType.MICROSOFT_WORD))) {
  }
 else   if (selectedCorpus.getDatatype().equals((DataType.XML))) {
  }
}","@Override public void widgetSelected(SelectionEvent e){
  ICorpus selectedCorpus=manageCorpora.readCorpusById(corpuraList[cmbSortType.getSelectionIndex()]);
  if (inputList == null) {
    inputList=new ArrayList<String>();
  }
  if (selectedCorpus.getDatatype().equals(DataType.TWITTER_JSON)) {
    TwitterReadJsonData twitterReadJsonData=new TwitterReadJsonData();
    for (    ICorpusClass cls : selectedCorpus.getClasses()) {
      inputList.add(twitterReadJsonData.retrieveTwitterData(cls.getClassPath()));
    }
  }
 else   if (selectedCorpus.getDatatype().equals(DataType.REDDIT_JSON)) {
  }
 else   if (selectedCorpus.getDatatype().equals((DataType.PLAIN_TEXT))) {
  }
 else   if (selectedCorpus.getDatatype().equals((DataType.MICROSOFT_WORD))) {
  }
 else   if (selectedCorpus.getDatatype().equals((DataType.XML))) {
  }
}",0.9981960312687912
168147,"public void linkEntered(HyperlinkEvent e){
}","@Override public void linkEntered(HyperlinkEvent e){
}",0.8979591836734694
168148,"private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (ZlabelLdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
      final int noOfTopics=Integer.valueOf(topics.getText()).intValue();
      final boolean isPreprocess=preprocessEnabled.getSelection();
      final String inputPath=inputLayoutData.getOutputLabel().getText();
      final String outputPath=layoutData.getOutputLabel().getText();
      final String seedFilePath=seedFileText.getText();
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          List<String> inputFiles=new ArrayList<String>();
          String topicModelDirPath=inputPath;
          Preprocess preprocessTask=null;
          if (isPreprocess) {
            monitor.subTask(""String_Node_Str"");
            preprocessTask=new Preprocess(""String_Node_Str"");
            try {
              File[] inputFile=new File(inputPath).listFiles();
              for (              File iFile : inputFile) {
                inputFiles.add(iFile.toString());
              }
              topicModelDirPath=preprocessTask.doPreprocessing(inputFiles,""String_Node_Str"");
            }
 catch (            IOException e) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              e.printStackTrace();
            }
            monitor.worked(10);
          }
          long startTime=System.currentTimeMillis();
          Date dateObj=new Date();
          ZlabelTopicModelAnalysis zlda=new ZlabelTopicModelAnalysis(new SubProgressMonitor(monitor,70));
          monitor.subTask(""String_Node_Str"");
          zlda.invokeLDA(topicModelDirPath,seedFilePath,noOfTopics,outputPath,dateObj);
          System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
          TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          if (monitor.isCanceled()) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return Status.CANCEL_STATUS;
          }
          if (isPreprocess) {
            monitor.subTask(""String_Node_Str"");
            preprocessTask.clean();
          }
          monitor.worked(10);
          monitor.done();
          TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
          ;
          TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      if (canProceedJob()) {
        job.schedule();
      }
 else {
        TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (ZlabelLdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}","private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (ZlabelLdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      final int noOfTopics=Integer.valueOf(topics.getText()).intValue();
      final boolean isPreprocess=preprocessEnabled.getSelection();
      final String inputPath=inputLayoutData.getOutputLabel().getText();
      final String outputPath=layoutData.getOutputLabel().getText();
      final String seedFilePath=seedFileText.getText();
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          List<String> inputFiles=new ArrayList<String>();
          String topicModelDirPath=inputPath;
          Preprocess preprocessTask=null;
          if (isPreprocess) {
            monitor.subTask(""String_Node_Str"");
            preprocessTask=new Preprocess(""String_Node_Str"");
            try {
              File[] inputFile=new File(inputPath).listFiles();
              for (              File iFile : inputFile) {
                inputFiles.add(iFile.toString());
              }
              topicModelDirPath=preprocessTask.doPreprocessing(inputFiles,""String_Node_Str"");
            }
 catch (            IOException e) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              e.printStackTrace();
            }
            monitor.worked(10);
          }
          long startTime=System.currentTimeMillis();
          Date dateObj=new Date();
          ZlabelTopicModelAnalysis zlda=new ZlabelTopicModelAnalysis(new SubProgressMonitor(monitor,70));
          monitor.subTask(""String_Node_Str"");
          zlda.invokeLDA(topicModelDirPath,seedFilePath,noOfTopics,outputPath,dateObj);
          System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
          TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          if (monitor.isCanceled()) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return Status.CANCEL_STATUS;
          }
          if (isPreprocess) {
            monitor.subTask(""String_Node_Str"");
            preprocessTask.clean();
          }
          monitor.worked(10);
          monitor.done();
          TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
          ;
          TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      if (canProceedJob()) {
        job.schedule();
      }
 else {
        TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (ZlabelLdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}",0.9987120041215868
168149,"public void linkActivated(HyperlinkEvent e){
  String id=""String_Node_Str"";
  PreferencesUtil.createPreferenceDialogOn(link.getShell(),id,new String[]{id},null).open();
}","@Override public void linkActivated(HyperlinkEvent e){
  String id=""String_Node_Str"";
  PreferencesUtil.createPreferenceDialogOn(link.getShell(),id,new String[]{id},null).open();
}",0.9714285714285714
168150,"private void createCorpusSection(Composite client){
  Group group=new Group(client,SWT.SHADOW_IN);
  group.setText(""String_Node_Str"");
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  group.setLayout(layout);
  final Button corpusEnabled=new Button(group,SWT.CHECK);
  corpusEnabled.setText(""String_Node_Str"");
  corpusEnabled.setBounds(10,10,10,10);
  corpusEnabled.pack();
  final Composite sectionClient=new Composite(group,SWT.None);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(sectionClient);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sectionClient);
  sectionClient.pack();
  final Label inputPathLabel=new Label(sectionClient,SWT.NONE);
  inputPathLabel.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(inputPathLabel);
  final Combo cmbSortType=new Combo(sectionClient,SWT.FLAT | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).applyTo(cmbSortType);
  manageCorpora=new ManageCorpora();
  corpuraList=manageCorpora.getNames();
  cmbSortType.setItems(corpuraList);
  cmbSortType.setEnabled(false);
  corpusEnabled.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (corpusEnabled.getSelection()) {
        cmbSortType.setEnabled(true);
      }
 else {
        cmbSortType.setEnabled(false);
      }
    }
  }
);
  cmbSortType.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      ICorpus selectedCorpus=manageCorpora.readCorpusById(corpuraList[cmbSortType.getSelectionIndex()]);
      if (inputList == null) {
        inputList=new ArrayList<String>();
      }
      if (selectedCorpus.getDatatype().equals(DataType.TWITTER_JSON)) {
        TwitterReadJsonData twitterReadJsonData=new TwitterReadJsonData();
        for (        ICorpusClass cls : selectedCorpus.getClasses()) {
          inputList.addAll(twitterReadJsonData.retrieveTwitterData(cls.getClassPath()));
        }
      }
 else       if (selectedCorpus.getDatatype().equals(DataType.REDDIT_JSON)) {
      }
 else       if (selectedCorpus.getDatatype().equals((DataType.PLAIN_TEXT))) {
      }
 else       if (selectedCorpus.getDatatype().equals((DataType.MICROSOFT_WORD))) {
      }
 else       if (selectedCorpus.getDatatype().equals((DataType.XML))) {
      }
    }
  }
);
  TacitFormComposite.createEmptyRow(null,sectionClient);
}","private void createCorpusSection(Composite client){
  Group group=new Group(client,SWT.SHADOW_IN);
  group.setText(""String_Node_Str"");
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  group.setLayout(layout);
  final Button corpusEnabled=new Button(group,SWT.CHECK);
  corpusEnabled.setText(""String_Node_Str"");
  corpusEnabled.setBounds(10,10,10,10);
  corpusEnabled.pack();
  final Composite sectionClient=new Composite(group,SWT.None);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(sectionClient);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sectionClient);
  sectionClient.pack();
  final Label inputPathLabel=new Label(sectionClient,SWT.NONE);
  inputPathLabel.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(inputPathLabel);
  final Combo cmbSortType=new Combo(sectionClient,SWT.FLAT | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).applyTo(cmbSortType);
  manageCorpora=new ManageCorpora();
  corpuraList=manageCorpora.getNames();
  cmbSortType.setItems(corpuraList);
  cmbSortType.setEnabled(false);
  corpusEnabled.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (corpusEnabled.getSelection()) {
        cmbSortType.setEnabled(true);
      }
 else {
        cmbSortType.setEnabled(false);
      }
    }
  }
);
  cmbSortType.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      ICorpus selectedCorpus=manageCorpora.readCorpusById(corpuraList[cmbSortType.getSelectionIndex()]);
      if (inputList == null) {
        inputList=new ArrayList<String>();
      }
      if (selectedCorpus.getDatatype().equals(DataType.TWITTER_JSON)) {
        TwitterReadJsonData twitterReadJsonData=new TwitterReadJsonData();
        for (        ICorpusClass cls : selectedCorpus.getClasses()) {
          inputList.add(twitterReadJsonData.retrieveTwitterData(cls.getClassPath()));
        }
      }
 else       if (selectedCorpus.getDatatype().equals(DataType.REDDIT_JSON)) {
      }
 else       if (selectedCorpus.getDatatype().equals((DataType.PLAIN_TEXT))) {
      }
 else       if (selectedCorpus.getDatatype().equals((DataType.MICROSOFT_WORD))) {
      }
 else       if (selectedCorpus.getDatatype().equals((DataType.XML))) {
      }
    }
  }
);
  TacitFormComposite.createEmptyRow(null,sectionClient);
}",0.9994095650462508
168151,"private void createPreprocessLink(Composite client){
  Composite clientLink=toolkit.createComposite(client);
  GridLayoutFactory.fillDefaults().equalWidth(false).numColumns(2).applyTo(clientLink);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(clientLink);
  preprocessEnabled=toolkit.createButton(clientLink,""String_Node_Str"",SWT.CHECK);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(preprocessEnabled);
  final Hyperlink link=toolkit.createHyperlink(clientLink,""String_Node_Str"",SWT.NONE);
  link.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
  link.addHyperlinkListener(new IHyperlinkListener(){
    public void linkEntered(    HyperlinkEvent e){
    }
    public void linkExited(    HyperlinkEvent e){
    }
    public void linkActivated(    HyperlinkEvent e){
      String id=""String_Node_Str"";
      PreferencesUtil.createPreferenceDialogOn(link.getShell(),id,new String[]{id},null).open();
    }
  }
);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(link);
}","private void createPreprocessLink(Composite client){
  Composite clientLink=toolkit.createComposite(client);
  GridLayoutFactory.fillDefaults().equalWidth(false).numColumns(2).applyTo(clientLink);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(clientLink);
  preprocessEnabled=toolkit.createButton(clientLink,""String_Node_Str"",SWT.CHECK);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(preprocessEnabled);
  final Hyperlink link=toolkit.createHyperlink(clientLink,""String_Node_Str"",SWT.NONE);
  link.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
  link.addHyperlinkListener(new IHyperlinkListener(){
    @Override public void linkEntered(    HyperlinkEvent e){
    }
    @Override public void linkExited(    HyperlinkEvent e){
    }
    @Override public void linkActivated(    HyperlinkEvent e){
      String id=""String_Node_Str"";
      PreferencesUtil.createPreferenceDialogOn(link.getShell(),id,new String[]{id},null).open();
    }
  }
);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(link);
}",0.9859022556390976
168152,"private boolean canItProceed(){
  form.getMessageManager().removeAllMessages();
  if (crawlSearchResultsButton.getSelection()) {
    String title=titleText.getText();
    String author=authorText.getText();
    String url=siteText.getText();
    String linkId=linkText.getText();
    String text=queryText.getText();
    String[] temp=subreddits.getText().split(""String_Node_Str"");
    for (    String s : temp)     content.add(s);
    if (title.isEmpty() && author.isEmpty() && url.isEmpty()&& linkId.isEmpty()&& content.size() == 0) {
      if (text.isEmpty()) {
        form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
        return false;
      }
    }
    form.getMessageManager().removeMessage(""String_Node_Str"");
  }
  try {
    int linksLimit=Integer.parseInt(numLinksText.getText());
    if (linksLimit < 0) {
      form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
      return false;
    }
 else     form.getMessageManager().removeMessage(""String_Node_Str"");
  }
 catch (  Exception e) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  try {
    int commentsLimit=Integer.parseInt(numCommentsText.getText());
    if (commentsLimit < 0) {
      form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
      return false;
    }
 else     form.getMessageManager().removeMessage(""String_Node_Str"");
  }
 catch (  Exception e) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  String message=OutputPathValidation.getInstance().validateOutputDirectory(outputLayout.getOutputLabel().getText(),""String_Node_Str"");
  if (message != null) {
    message=outputLayout.getOutputLabel().getText() + ""String_Node_Str"" + message;
    form.getMessageManager().addMessage(""String_Node_Str"",message,null,IMessageProvider.ERROR);
    return false;
  }
 else {
    form.getMessageManager().removeMessage(""String_Node_Str"");
  }
  return true;
}","private boolean canItProceed(){
  form.getMessageManager().removeAllMessages();
  if (crawlSearchResultsButton.getSelection()) {
    String title=titleText.getText();
    String author=authorText.getText();
    String url=siteText.getText();
    String linkId=linkText.getText();
    String text=queryText.getText();
    String[] temp=subreddits.getText().split(""String_Node_Str"");
    content.clear();
    for (    String s : temp)     content.add(s);
    if (title.isEmpty() && author.isEmpty() && url.isEmpty()&& linkId.isEmpty()&& content.size() == 0) {
      if (text.isEmpty()) {
        form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
        return false;
      }
    }
    form.getMessageManager().removeMessage(""String_Node_Str"");
  }
  try {
    int linksLimit=Integer.parseInt(numLinksText.getText());
    if (linksLimit < 0) {
      form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
      return false;
    }
 else     form.getMessageManager().removeMessage(""String_Node_Str"");
  }
 catch (  Exception e) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  try {
    int commentsLimit=Integer.parseInt(numCommentsText.getText());
    if (commentsLimit < 0) {
      form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
      return false;
    }
 else     form.getMessageManager().removeMessage(""String_Node_Str"");
  }
 catch (  Exception e) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  String message=OutputPathValidation.getInstance().validateOutputDirectory(outputLayout.getOutputLabel().getText(),""String_Node_Str"");
  if (message != null) {
    message=outputLayout.getOutputLabel().getText() + ""String_Node_Str"" + message;
    form.getMessageManager().addMessage(""String_Node_Str"",message,null,IMessageProvider.ERROR);
    return false;
  }
 else {
    form.getMessageManager().removeMessage(""String_Node_Str"");
  }
  return true;
}",0.9951400138856746
168153,"private boolean isClassnameValid(String className){
  if (className.isEmpty()) {
    corpusMgmtViewform.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
 else {
    corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
  }
  String parentCorpusId=selectedCorpusClass.getParentId();
  ICorpus parentCorpus=corpusManagement.readCorpusById(parentCorpusId);
  for (  ICorpusClass cc : parentCorpus.getClasses()) {
    if ((CorpusClass)cc != selectedCorpusClass) {
      if (cc.getClassName().equals(className)) {
        corpusMgmtViewform.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"" + className + ""String_Node_Str""+ parentCorpusId,null,IMessageProvider.ERROR);
        return false;
      }
    }
  }
  corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
  return true;
}","private boolean isClassnameValid(String className){
  if (className.isEmpty()) {
    corpusMgmtViewform.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
 else {
    corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
  }
  ICorpus parentCorpus=selectedCorpusClass.getParent();
  if (null == parentCorpus)   return true;
  for (  ICorpusClass cc : parentCorpus.getClasses()) {
    if ((CorpusClass)cc != selectedCorpusClass) {
      if (cc.getClassName().equals(className)) {
        corpusMgmtViewform.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"" + className + ""String_Node_Str""+ parentCorpus.getCorpusId(),null,IMessageProvider.ERROR);
        return false;
      }
    }
  }
  corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
  return true;
}",0.9113355780022446
168154,"public ClassDetailsPage(ScrolledForm corpusMgmtViewform){
  this.corpusMgmtViewform=corpusMgmtViewform;
}","public ClassDetailsPage(ScrolledForm corpusMgmtViewform){
  corpusManagement=new ManageCorpora();
  this.corpusMgmtViewform=corpusMgmtViewform;
}",0.84
168155,"@Override public void createContents(Composite parent){
  GridLayoutFactory.fillDefaults().numColumns(1).equalWidth(false).applyTo(parent);
  FormToolkit toolkit=mform.getToolkit();
  Section section=toolkit.createSection(parent,Section.DESCRIPTION | Section.TITLE_BAR | Section.EXPANDED);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(section);
  GridLayoutFactory.fillDefaults().numColumns(3).applyTo(section);
  section.setText(""String_Node_Str"");
  section.setDescription(""String_Node_Str"");
  ScrolledComposite sc=new ScrolledComposite(section,SWT.H_SCROLL | SWT.V_SCROLL);
  sc.setExpandHorizontal(true);
  sc.setExpandVertical(true);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sc);
  Composite sectionClient=toolkit.createComposite(section);
  sc.setContent(sectionClient);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(sc);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sectionClient);
  section.setClient(sectionClient);
  TacitFormComposite.createEmptyRow(toolkit,sectionClient);
  final Label classLbl=toolkit.createLabel(sectionClient,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(classLbl);
  classNameTxt=toolkit.createText(sectionClient,""String_Node_Str"",SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).applyTo(classNameTxt);
  if (null != selectedCorpusClass) {
    classNameTxt.setText(selectedCorpusClass.getClassName());
  }
  classNameTxt.addKeyListener(new KeyListener(){
    @Override public void keyReleased(    KeyEvent e){
      if (isClassnameValid(classNameTxt.getText()))       selectedCorpusClass.setClassName(classNameTxt.getText());
      if (!selectedCorpusClass.getClassName().isEmpty())       corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
    }
    @Override public void keyPressed(    KeyEvent e){
      if (isClassnameValid(classNameTxt.getText()))       selectedCorpusClass.setClassName(classNameTxt.getText());
      if (!selectedCorpusClass.getClassName().isEmpty())       corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
    }
  }
);
  final Label classPathLbl=toolkit.createLabel(sectionClient,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(classPathLbl);
  classPathTxt=toolkit.createText(sectionClient,""String_Node_Str"",SWT.BORDER);
  if (null != selectedCorpusClass)   classPathTxt.setText(selectedCorpusClass.getClassPath());
  GridDataFactory.fillDefaults().grab(true,false).span(1,0).applyTo(classPathTxt);
  final Button browseBtn=toolkit.createButton(sectionClient,""String_Node_Str"",SWT.PUSH);
  browseBtn.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent e){
      DirectoryDialog dlg=new DirectoryDialog(browseBtn.getShell(),SWT.OPEN);
      dlg.setText(""String_Node_Str"");
      String path=dlg.open();
      if (path == null)       return;
      classPathTxt.setText(path);
      selectedCorpusClass.setClassPath(classPathTxt.getText());
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  classPathTxt.addKeyListener(new KeyListener(){
    @Override public void keyReleased(    KeyEvent e){
      if (isClassPathValid(classPathTxt.getText()))       selectedCorpusClass.setClassPath(classPathTxt.getText());
      if (!selectedCorpusClass.getClassPath().isEmpty())       corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
    }
    @Override public void keyPressed(    KeyEvent e){
      if (isClassPathValid(classPathTxt.getText()))       selectedCorpusClass.setClassPath(classPathTxt.getText());
      if (!selectedCorpusClass.getClassPath().isEmpty())       corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
    }
  }
);
}","@Override public void createContents(Composite parent){
  GridLayoutFactory.fillDefaults().numColumns(1).equalWidth(false).applyTo(parent);
  FormToolkit toolkit=mform.getToolkit();
  Section section=toolkit.createSection(parent,Section.DESCRIPTION | Section.TITLE_BAR | Section.EXPANDED);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(section);
  GridLayoutFactory.fillDefaults().numColumns(3).applyTo(section);
  section.setText(""String_Node_Str"");
  section.setDescription(""String_Node_Str"");
  ScrolledComposite sc=new ScrolledComposite(section,SWT.H_SCROLL | SWT.V_SCROLL);
  sc.setExpandHorizontal(true);
  sc.setExpandVertical(true);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sc);
  Composite sectionClient=toolkit.createComposite(section);
  sc.setContent(sectionClient);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(sc);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sectionClient);
  section.setClient(sectionClient);
  TacitFormComposite.createEmptyRow(toolkit,sectionClient);
  final Label classLbl=toolkit.createLabel(sectionClient,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(classLbl);
  classNameTxt=toolkit.createText(sectionClient,""String_Node_Str"",SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).applyTo(classNameTxt);
  if (null != selectedCorpusClass) {
    classNameTxt.setText(selectedCorpusClass.getClassName());
  }
  classNameTxt.addKeyListener(new KeyListener(){
    @Override public void keyReleased(    KeyEvent e){
      if (isClassnameValid(classNameTxt.getText())) {
        selectedCorpusClass.setClassName(classNameTxt.getText());
        selectedCorpusClass.getViewer().refresh();
      }
      if (!selectedCorpusClass.getClassName().isEmpty())       corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
    }
    @Override public void keyPressed(    KeyEvent e){
      if (isClassnameValid(classNameTxt.getText())) {
        selectedCorpusClass.setClassName(classNameTxt.getText());
        selectedCorpusClass.getViewer().refresh();
      }
      if (!selectedCorpusClass.getClassName().isEmpty())       corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
    }
  }
);
  final Label classPathLbl=toolkit.createLabel(sectionClient,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(classPathLbl);
  classPathTxt=toolkit.createText(sectionClient,""String_Node_Str"",SWT.BORDER);
  if (null != selectedCorpusClass)   classPathTxt.setText(selectedCorpusClass.getClassPath());
  GridDataFactory.fillDefaults().grab(true,false).span(1,0).applyTo(classPathTxt);
  final Button browseBtn=toolkit.createButton(sectionClient,""String_Node_Str"",SWT.PUSH);
  browseBtn.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent e){
      DirectoryDialog dlg=new DirectoryDialog(browseBtn.getShell(),SWT.OPEN);
      dlg.setText(""String_Node_Str"");
      String path=dlg.open();
      if (path == null)       return;
      classPathTxt.setText(path);
      selectedCorpusClass.setClassPath(classPathTxt.getText());
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  classPathTxt.addKeyListener(new KeyListener(){
    @Override public void keyReleased(    KeyEvent e){
      if (isClassPathValid(classPathTxt.getText()))       selectedCorpusClass.setClassPath(classPathTxt.getText());
      if (!selectedCorpusClass.getClassPath().isEmpty())       corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
    }
    @Override public void keyPressed(    KeyEvent e){
      if (isClassPathValid(classPathTxt.getText()))       selectedCorpusClass.setClassPath(classPathTxt.getText());
      if (!selectedCorpusClass.getClassPath().isEmpty())       corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
    }
  }
);
}",0.9840748230535896
168156,"private boolean isClassnameValid(String className,ICorpusClass selectedCorpusClass){
  if (className.isEmpty()) {
    corpusMgmtViewform.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
 else {
    corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
  }
  String parentCorpusId=selectedCorpusClass.getParentId();
  ICorpus parentCorpus=corpusManagement.readCorpusById(parentCorpusId);
  for (  ICorpusClass cc : parentCorpus.getClasses()) {
    if ((CorpusClass)cc != selectedCorpusClass) {
      if (cc.getClassName().equals(className)) {
        corpusMgmtViewform.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"" + className + ""String_Node_Str""+ parentCorpusId,null,IMessageProvider.ERROR);
        return false;
      }
    }
  }
  corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
  return true;
}","private boolean isClassnameValid(String className,ICorpusClass selectedCorpusClass){
  if (className.isEmpty()) {
    corpusMgmtViewform.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
 else {
    corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
  }
  ICorpus parentCorpus=selectedCorpusClass.getParent();
  if (null == parentCorpus)   return true;
  for (  ICorpusClass cc : parentCorpus.getClasses()) {
    if ((CorpusClass)cc != selectedCorpusClass) {
      if (cc.getClassName().equals(className)) {
        corpusMgmtViewform.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"" + className + ""String_Node_Str""+ parentCorpus.getCorpusId(),null,IMessageProvider.ERROR);
        return false;
      }
    }
  }
  corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
  return true;
}",0.9145021645021644
168157,"public void addClass(ICorpusClass c){
  if (null == c)   return;
  ((CorpusClass)c).setParentId(this.corpusId);
  this.classes.add(c);
}","public void addClass(ICorpusClass c){
  if (null == c)   return;
  ((CorpusClass)c).setParent(this);
  this.classes.add(c);
}",0.9578544061302682
168158,"private boolean isClassnameValid(String className){
  if (className.isEmpty()) {
    corpusMgmtViewform.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
 else {
    corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
  }
  ICorpus corpus=selectedCorpusClass.getParent();
  String corpusId=corpus.getCorpusId();
  for (  ICorpusClass cc : corpus.getClasses()) {
    if ((CorpusClass)cc != selectedCorpusClass) {
      if (cc.getClassName().equals(className)) {
        corpusMgmtViewform.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"" + className + ""String_Node_Str""+ corpusId,null,IMessageProvider.ERROR);
        return false;
      }
    }
  }
  corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
  return true;
}","private boolean isClassnameValid(String className){
  if (className.isEmpty()) {
    corpusMgmtViewform.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
 else {
    corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
  }
  String parentCorpusId=selectedCorpusClass.getParentId();
  ICorpus parentCorpus=corpusManagement.readCorpusById(parentCorpusId);
  for (  ICorpusClass cc : parentCorpus.getClasses()) {
    if ((CorpusClass)cc != selectedCorpusClass) {
      if (cc.getClassName().equals(className)) {
        corpusMgmtViewform.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"" + className + ""String_Node_Str""+ parentCorpusId,null,IMessageProvider.ERROR);
        return false;
      }
    }
  }
  corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
  return true;
}",0.9251000571755288
168159,"private boolean corpusIdExists(String corpusId){
  List<ICorpus> corpuses=corpusManagement.getAllCorpusDetails();
  for (  ICorpus corpus : corpuses) {
    if (corpus.getCorpusId().equals(corpusId))     return true;
  }
  return false;
}","private boolean corpusIdExists(String corpusId){
  List<ICorpus> corpuses=corpusManagement.getAllCorpusDetails();
  for (  ICorpus corpus : corpuses) {
    if (!corpus.equals(selectedCorpus) && corpus.getCorpusId().equals(corpusId))     return true;
  }
  return false;
}",0.8543307086614174
168160,"private boolean isClassnameValid(String className,ICorpusClass selectedCorpusClass){
  if (className.isEmpty()) {
    corpusMgmtViewform.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
 else {
    corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
  }
  ICorpus corpus=selectedCorpusClass.getParent();
  String corpusId=corpus.getCorpusId();
  for (  ICorpusClass cc : corpus.getClasses()) {
    if ((CorpusClass)cc != selectedCorpusClass) {
      if (cc.getClassName().equals(className)) {
        corpusMgmtViewform.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"" + className + ""String_Node_Str""+ corpusId,null,IMessageProvider.ERROR);
        return false;
      }
    }
  }
  corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
  return true;
}","private boolean isClassnameValid(String className,ICorpusClass selectedCorpusClass){
  if (className.isEmpty()) {
    corpusMgmtViewform.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
 else {
    corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
  }
  String parentCorpusId=selectedCorpusClass.getParentId();
  ICorpus parentCorpus=corpusManagement.readCorpusById(parentCorpusId);
  for (  ICorpusClass cc : parentCorpus.getClasses()) {
    if ((CorpusClass)cc != selectedCorpusClass) {
      if (cc.getClassName().equals(className)) {
        corpusMgmtViewform.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"" + className + ""String_Node_Str""+ parentCorpusId,null,IMessageProvider.ERROR);
        return false;
      }
    }
  }
  corpusMgmtViewform.getMessageManager().removeMessage(""String_Node_Str"");
  return true;
}",0.9278236914600552
168161,"public boolean validateData(String corpusId){
  if (isCorpusIdValid(corpusId)) {
    List<ICorpusClass> classes=selectedCorpus.getClasses();
    int count=1;
    for (    ICorpusClass cc : classes) {
      if (!validateClassData(cc))       return false;
      count++;
    }
  }
 else   return false;
  return true;
}","public boolean validateData(String corpusId){
  if (isCorpusIdValid(corpusId)) {
    List<ICorpusClass> classes=selectedCorpus.getClasses();
    for (    ICorpusClass cc : classes) {
      if (!validateClassData(cc))       return false;
    }
  }
 else   return false;
  return true;
}",0.946843853820598
168162,"public void addClass(ICorpusClass c){
  if (null == c)   return;
  ((CorpusClass)c).setParent(this);
  this.classes.add(c);
}","public void addClass(ICorpusClass c){
  if (null == c)   return;
  ((CorpusClass)c).setParentId(this.corpusId);
  this.classes.add(c);
}",0.9578544061302682
168163,"public List<String> retrieveRedditData(String location){
  List<String> result=new ArrayList<String>();
  JSONParser jParser;
  try {
    jParser=new JSONParser();
    String path=new File(location) + File.separator + ""String_Node_Str"";
    File[] fileList=new File(location).listFiles();
    for (    File tempFile : fileList) {
      String fileName=tempFile.getAbsolutePath();
      if (!fileName.endsWith(""String_Node_Str""))       continue;
      JSONObject redditStream=(JSONObject)jParser.parse(new FileReader(fileName));
      dateobj=new Date();
      File file=new File(path + UUID.randomUUID().toString() + ""String_Node_Str""+ df.format(dateobj)+ ""String_Node_Str"");
      System.out.println(file.getAbsolutePath());
      if (file.exists())       file.delete();
      file.createNewFile();
      FileWriter fw=new FileWriter(file.getAbsoluteFile());
      BufferedWriter bw=new BufferedWriter(fw);
      String postTitle=getPostTitle(redditStream);
      String[] postComments=getPostComments(redditStream);
      if (null != postTitle) {
        bw.write(postTitle);
        bw.write(""String_Node_Str"");
      }
      for (      String commentBody : postComments) {
        if (null == commentBody)         continue;
        bw.write(commentBody);
        bw.write(""String_Node_Str"");
      }
      bw.close();
      result.add(file.getAbsolutePath());
    }
  }
 catch (  ClassCastException e) {
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  return result;
}","public String retrieveRedditData(String location){
  JSONParser jParser;
  dateObj=new Date();
  String path=System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ dateObj.getTime();
  try {
    jParser=new JSONParser();
    new File(path).mkdir();
    File[] fileList=new File(location).listFiles();
    for (    File tempFile : fileList) {
      String fileName=tempFile.getAbsolutePath();
      if (!fileName.endsWith(""String_Node_Str""))       continue;
      JSONObject redditStream=(JSONObject)jParser.parse(new FileReader(fileName));
      String postTitle=getPostTitle(redditStream);
      String[] postComments=getPostComments(redditStream);
      dateObj=new Date();
      File file=new File(path + System.getProperty(""String_Node_Str"") + postTitle.substring(0,20)+ ""String_Node_Str""+ dateObj.getTime()+ ""String_Node_Str"");
      FileWriter fw=new FileWriter(file.getAbsoluteFile());
      BufferedWriter bw=new BufferedWriter(fw);
      if (null != postTitle) {
        bw.write(postTitle);
        bw.write(""String_Node_Str"");
      }
      for (      String commentBody : postComments) {
        if (null == commentBody)         continue;
        bw.write(commentBody);
        bw.write(""String_Node_Str"");
      }
      bw.close();
    }
  }
 catch (  ClassCastException e) {
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  return path;
}",0.6942544459644323
168164,"@Override protected void createMasterPart(final IManagedForm managedForm,Composite parent){
  FormToolkit toolkit=managedForm.getToolkit();
  Section section=toolkit.createSection(parent,Section.DESCRIPTION | Section.TITLE_BAR);
  section.setText(""String_Node_Str"");
  Composite client=toolkit.createComposite(section,SWT.WRAP);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  layout.marginWidth=2;
  layout.marginHeight=2;
  client.setLayout(layout);
  toolkit.paintBordersFor(client);
  final TreeViewer corpuses=new TreeViewer(client,SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=400;
  gd.widthHint=100;
  corpuses.getTree().setLayoutData(gd);
  Composite buttonComposite=new Composite(client,SWT.NONE);
  GridLayout buttonLayout=new GridLayout();
  buttonLayout.marginWidth=buttonLayout.marginHeight=0;
  buttonLayout.makeColumnsEqualWidth=true;
  buttonComposite.setLayout(buttonLayout);
  buttonComposite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
  Button addCorpora=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(addCorpora);
  final Button addClass=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(addClass);
  Button remove=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(remove);
  section.setClient(client);
  final SectionPart spart=new SectionPart(section);
  managedForm.addPart(spart);
  corpuses.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      managedForm.fireSelectionChanged(spart,event.getSelection());
      try {
        IStructuredSelection selection=(IStructuredSelection)event.getSelection();
        Object selectedObj=selection.getFirstElement();
        if (selectedObj instanceof ICorpus) {
          addClass.setEnabled(true);
        }
 else         if (selectedObj instanceof ICorpusClass) {
          addClass.setEnabled(false);
        }
      }
 catch (      Exception exp) {
      }
    }
  }
);
  corpuses.setContentProvider(new MasterContentProvider());
  corpuses.setLabelProvider(new MasterLabelProvider());
  corpuses.setInput(corpusList);
  addCorpora.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      StringBuilder corpusTempName=new StringBuilder(""String_Node_Str"");
      corpusTempName.append(corpusList.size() + 1);
      Corpus c=new Corpus(new String(corpusTempName),DataType.PLAIN_TEXT,corpuses);
      c.addClass(new CorpusClass(""String_Node_Str"",""String_Node_Str"",corpuses));
      ;
      corpusList.add(c);
      Object[] expandedItems=corpuses.getExpandedElements();
      corpuses.setInput(corpusList);
      corpuses.setExpandedElements(expandNewCorpus(expandedItems,c));
      corpuses.setSelection(new StructuredSelection(c),true);
    }
  }
);
  addClass.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)corpuses.getSelection();
      try {
        ICorpus corpusSelected=(ICorpus)selection.getFirstElement();
        int corpusIndex=corpusList.indexOf(corpusSelected);
        StringBuilder classTempName=new StringBuilder(""String_Node_Str"");
        classTempName.append(corpusList.get(corpusIndex).getClasses().size() + 1);
        CorpusClass newClass=new CorpusClass(new String(classTempName),""String_Node_Str"",corpuses);
        ((Corpus)corpusSelected).addClass(newClass);
        corpusList.set(corpusIndex,corpusSelected);
        corpuses.refresh();
        corpuses.setExpandedElements(expandNewCorpus(corpuses.getExpandedElements(),(Corpus)corpusList.get(corpusIndex)));
        corpuses.setSelection(new StructuredSelection(newClass),true);
      }
 catch (      Exception exp) {
      }
    }
  }
);
  remove.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)corpuses.getSelection();
      try {
        Object selectedObj=selection.getFirstElement();
        if (selectedObj instanceof ICorpus) {
          ICorpus selectedCorpus=(ICorpus)selection.getFirstElement();
          corpusList.remove(selectedCorpus);
        }
 else         if (selectedObj instanceof ICorpusClass) {
          ITreeSelection classSelection=(ITreeSelection)selection;
          ICorpusClass selectedClass=(ICorpusClass)selection.getFirstElement();
          Corpus parentCorpus=(Corpus)classSelection.getPaths()[0].getParentPath().getLastSegment();
          parentCorpus.removeClass(selectedClass);
        }
        corpuses.refresh();
      }
 catch (      Exception exp) {
      }
    }
  }
);
}","@Override protected void createMasterPart(final IManagedForm managedForm,Composite parent){
  FormToolkit toolkit=managedForm.getToolkit();
  Section section=toolkit.createSection(parent,Section.DESCRIPTION | Section.TITLE_BAR);
  section.setText(""String_Node_Str"");
  Composite client=toolkit.createComposite(section,SWT.WRAP);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  layout.marginWidth=2;
  layout.marginHeight=2;
  client.setLayout(layout);
  toolkit.paintBordersFor(client);
  final TreeViewer corpuses=new TreeViewer(client,SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=400;
  gd.widthHint=100;
  corpuses.getTree().setLayoutData(gd);
  Composite buttonComposite=new Composite(client,SWT.NONE);
  GridLayout buttonLayout=new GridLayout();
  buttonLayout.marginWidth=buttonLayout.marginHeight=0;
  buttonLayout.makeColumnsEqualWidth=true;
  buttonComposite.setLayout(buttonLayout);
  buttonComposite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
  Button addCorpora=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(addCorpora);
  final Button addClass=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(addClass);
  Button remove=toolkit.createButton(buttonComposite,""String_Node_Str"",SWT.PUSH);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(remove);
  section.setClient(client);
  final SectionPart spart=new SectionPart(section);
  managedForm.addPart(spart);
  corpuses.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      managedForm.fireSelectionChanged(spart,event.getSelection());
      try {
        IStructuredSelection selection=(IStructuredSelection)event.getSelection();
        Object selectedObj=selection.getFirstElement();
        if (selectedObj instanceof ICorpus) {
          addClass.setEnabled(true);
        }
 else         if (selectedObj instanceof ICorpusClass) {
          addClass.setEnabled(false);
        }
      }
 catch (      Exception exp) {
      }
    }
  }
);
  corpuses.setContentProvider(new MasterContentProvider());
  corpuses.setLabelProvider(new MasterLabelProvider());
  for (  ICorpus corpus : corpusList)   corpus.setViewer(corpuses);
  corpuses.setInput(corpusList);
  addCorpora.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      StringBuilder corpusTempName=new StringBuilder(""String_Node_Str"");
      corpusTempName.append(corpusList.size() + 1);
      Corpus c=new Corpus(new String(corpusTempName),DataType.PLAIN_TEXT,corpuses);
      c.addClass(new CorpusClass(""String_Node_Str"",""String_Node_Str"",corpuses));
      ;
      corpusList.add(c);
      Object[] expandedItems=corpuses.getExpandedElements();
      corpuses.setInput(corpusList);
      corpuses.setExpandedElements(expandNewCorpus(expandedItems,c));
      corpuses.setSelection(new StructuredSelection(c),true);
    }
  }
);
  addClass.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)corpuses.getSelection();
      try {
        ICorpus corpusSelected=(ICorpus)selection.getFirstElement();
        int corpusIndex=corpusList.indexOf(corpusSelected);
        StringBuilder classTempName=new StringBuilder(""String_Node_Str"");
        classTempName.append(corpusList.get(corpusIndex).getClasses().size() + 1);
        CorpusClass newClass=new CorpusClass(new String(classTempName),""String_Node_Str"",corpuses);
        ((Corpus)corpusSelected).addClass(newClass);
        corpusList.set(corpusIndex,corpusSelected);
        corpuses.refresh();
        corpuses.setExpandedElements(expandNewCorpus(corpuses.getExpandedElements(),(Corpus)corpusList.get(corpusIndex)));
        corpuses.setSelection(new StructuredSelection(newClass),true);
      }
 catch (      Exception exp) {
      }
    }
  }
);
  remove.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)corpuses.getSelection();
      try {
        Object selectedObj=selection.getFirstElement();
        if (selectedObj instanceof ICorpus) {
          ICorpus selectedCorpus=(ICorpus)selection.getFirstElement();
          corpusList.remove(selectedCorpus);
        }
 else         if (selectedObj instanceof ICorpusClass) {
          ITreeSelection classSelection=(ITreeSelection)selection;
          ICorpusClass selectedClass=(ICorpusClass)selection.getFirstElement();
          Corpus parentCorpus=(Corpus)classSelection.getPaths()[0].getParentPath().getLastSegment();
          parentCorpus.removeClass(selectedClass);
        }
        corpuses.refresh();
      }
 catch (      Exception exp) {
      }
    }
  }
);
}",0.993204077553468
168165,"public void preWindowOpen(){
  IWorkbenchWindowConfigurer configurer=getWindowConfigurer();
  configurer.setShowCoolBar(true);
  configurer.setShowStatusLine(true);
  configurer.setShowProgressIndicator(true);
  configurer.setTitle(""String_Node_Str"");
  String tempDir=System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
  if (!(new File(tempDir).exists())) {
    new File(tempDir).mkdir();
  }
}","@Override public void preWindowOpen(){
  IWorkbenchWindowConfigurer configurer=getWindowConfigurer();
  configurer.setShowCoolBar(true);
  configurer.setShowStatusLine(true);
  configurer.setShowProgressIndicator(true);
  configurer.setTitle(""String_Node_Str"");
  String tempDir=System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
  if (!(new File(tempDir).exists())) {
    new File(tempDir).mkdir();
  }
  tempDir=System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
  if (!(new File(tempDir).exists())) {
    new File(tempDir).mkdir();
  }
}",0.8211306765523633
168166,"public ActionBarAdvisor createActionBarAdvisor(IActionBarConfigurer configurer){
  return new ApplicationActionBarAdvisor(configurer);
}","@Override public ActionBarAdvisor createActionBarAdvisor(IActionBarConfigurer configurer){
  return new ApplicationActionBarAdvisor(configurer);
}",0.9645390070921984
168167,"private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (CooccurrenceWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
      final String outputPath=layoutData.getOutputLabel().getText();
      final boolean isPreprocess=preprocessEnabled.getSelection();
      final List<String> selectedFiles=inputLayoutData.getSelectedFiles();
      final boolean isBuildMatrix=buildMAtrix.getSelection();
      final String windowSizeStr=windowSize.getText();
      final String thresholdLimit=thresholdValue.getText();
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      cooccurrenceAnalysisJob=new Job(""String_Node_Str""){
        private Preprocess preprocessTask;
        private String dirPath;
        private String seedFilePath;
        private String seedFileLocation;
        protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",selectedFiles.size() + 40);
          preprocessTask=null;
          dirPath=""String_Node_Str"";
          seedFilePath=seedFile.getText();
          List<File> inputFiles=new ArrayList<File>();
          if (isPreprocess) {
            monitor.subTask(""String_Node_Str"");
            preprocessTask=new Preprocess(""String_Node_Str"");
            try {
              dirPath=preprocessTask.doPreprocessing(selectedFiles,""String_Node_Str"");
              monitor.worked(10);
              ArrayList<String> seedList=new ArrayList<String>();
              seedList.add(seedFilePath);
              monitor.subTask(""String_Node_Str"");
              preprocessTask.doPreprocessing(seedList,""String_Node_Str"");
              monitor.worked(5);
              seedFileLocation=new File(dirPath + File.separator + new File(seedFilePath).getName()).getAbsolutePath();
              File[] inputFile=new File(dirPath).listFiles();
              for (              File iFile : inputFile) {
                inputFiles.add(iFile);
              }
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
 else {
            for (            String filepath : selectedFiles) {
              if ((new File(filepath).isDirectory())) {
                continue;
              }
              inputFiles.add(new File(filepath));
            }
            monitor.worked(15);
          }
          long startTime=System.currentTimeMillis();
          boolean result=new CooccurrenceAnalysis().invokeCooccurrence(selectedFiles,seedFileLocation,outputPath,windowSizeStr,thresholdLimit,isBuildMatrix,monitor);
          if (result) {
            TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
            ConsoleView.printlInConsoleln(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
            if (preprocessEnabled.getSelection()) {
              monitor.subTask(""String_Node_Str"");
              preprocessTask.clean();
            }
            monitor.worked(5);
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return Status.OK_STATUS;
          }
 else {
            TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
            if (preprocessEnabled.getSelection()) {
              monitor.subTask(""String_Node_Str"");
              preprocessTask.clean();
            }
            monitor.worked(5);
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return Status.CANCEL_STATUS;
          }
        }
      }
;
      cooccurrenceAnalysisJob.setUser(true);
      if (canProceed()) {
        cooccurrenceAnalysisJob.schedule();
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (CooccurrenceWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}","private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (CooccurrenceWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
      final String outputPath=layoutData.getOutputLabel().getText();
      final boolean isPreprocess=preprocessEnabled.getSelection();
      final List<String> selectedFiles=inputLayoutData.getSelectedFiles();
      final boolean isBuildMatrix=buildMAtrix.getSelection();
      final String windowSizeStr=windowSize.getText();
      final String thresholdLimit=thresholdValue.getText();
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      cooccurrenceAnalysisJob=new Job(""String_Node_Str""){
        private Preprocess preprocessTask;
        private String dirPath;
        private String seedFilePath=seedFile.getText();
        private String seedFileLocation;
        protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",selectedFiles.size() + 40);
          preprocessTask=null;
          dirPath=""String_Node_Str"";
          List<File> inputFiles=new ArrayList<File>();
          seedFileLocation=seedFilePath;
          if (isPreprocess) {
            monitor.subTask(""String_Node_Str"");
            preprocessTask=new Preprocess(""String_Node_Str"");
            try {
              dirPath=preprocessTask.doPreprocessing(selectedFiles,""String_Node_Str"");
              monitor.worked(10);
              ArrayList<String> seedList=new ArrayList<String>();
              seedList.add(seedFilePath);
              monitor.subTask(""String_Node_Str"");
              preprocessTask.doPreprocessing(seedList,""String_Node_Str"");
              monitor.worked(5);
              seedFileLocation=new File(dirPath + File.separator + new File(seedFilePath).getName()).getAbsolutePath();
              File[] inputFile=new File(dirPath).listFiles();
              for (              File iFile : inputFile) {
                inputFiles.add(iFile);
              }
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
 else {
            for (            String filepath : selectedFiles) {
              if ((new File(filepath).isDirectory())) {
                continue;
              }
              inputFiles.add(new File(filepath));
            }
            monitor.worked(15);
          }
          long startTime=System.currentTimeMillis();
          boolean result=new CooccurrenceAnalysis().invokeCooccurrence(selectedFiles,seedFileLocation,outputPath,windowSizeStr,thresholdLimit,isBuildMatrix,monitor);
          if (result) {
            TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
            ConsoleView.printlInConsoleln(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
            if (isPreprocess) {
              monitor.subTask(""String_Node_Str"");
              preprocessTask.clean();
            }
            monitor.worked(5);
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return Status.OK_STATUS;
          }
 else {
            TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
            if (isPreprocess) {
              monitor.subTask(""String_Node_Str"");
              preprocessTask.clean();
            }
            monitor.worked(5);
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return Status.CANCEL_STATUS;
          }
        }
      }
;
      cooccurrenceAnalysisJob.setUser(true);
      if (canProceed()) {
        cooccurrenceAnalysisJob.schedule();
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (CooccurrenceWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}",0.9797733771047336
168168,"public boolean calculateCooccurrences(List<String> selectedFiles,String seedFile,int windowSize,String outputPath,int threshold,boolean buildMatrix,IProgressMonitor monitor){
  String currentLine=null;
  Queue<String> q=new LinkedList<String>();
  List<String> phrase=new ArrayList<String>();
  setOutputPath(outputPath);
  try {
    boolean ret=false;
    if (windowSize > 0) {
      ret=setSeedWords(seedFile);
    }
    if (ret) {
      doPhrases=true;
    }
    File[] listOfFiles=(File[])selectedFiles.toArray(new File[selectedFiles.size()]);
    int seedWordCount=seedWords.size();
    int count;
    for (    File f : listOfFiles) {
      monitor.subTask(""String_Node_Str"" + f.getName());
      appendLog(""String_Node_Str"" + f.getName());
      count=0;
      if (f.getAbsolutePath().contains(""String_Node_Str""))       continue;
      List<String> words=new ArrayList<String>();
      if (!f.exists() || f.isDirectory())       continue;
      BufferedReader br=new BufferedReader(new FileReader(f));
      int line_no=0;
      while ((currentLine=br.readLine()) != null) {
        if (currentLine.isEmpty() || currentLine.equals(""String_Node_Str""))         continue;
        line_no++;
        for (        String word : currentLine.split(""String_Node_Str"")) {
          if (word.isEmpty() || word.equals(""String_Node_Str""))           continue;
          word.replaceAll(delimiters,""String_Node_Str"");
          if (buildMatrix)           words.add(word);
          if (doPhrases) {
            if (count >= threshold || count >= seedWordCount) {
              StringBuilder match=new StringBuilder();
              for (              String str : q) {
                if (seedWords.containsKey(str))                 match.append('*');
                match.append(str + ' ');
              }
              phrase.add(f.getName() + ""String_Node_Str"" + line_no+ ""String_Node_Str""+ match.toString());
              q.clear();
              count=0;
              for (              String s : seedWords.keySet()) {
                seedWords.put(s,1);
              }
            }
 else             if (q.size() >= windowSize) {
              String first=q.remove();
              if (seedWords.containsKey(first)) {
                if (seedWords.get(first) == 0) {
                  count--;
                  seedWords.put(first,1);
                }
              }
            }
            q.add(word);
            if (seedWords.containsKey(word)) {
              if (seedWords.get(word) != 0) {
                count++;
                seedWords.put(word,0);
              }
            }
          }
          if (buildMatrix) {
            Map<String,Integer> vec=null;
            if (wordMat.containsKey(word)) {
              vec=wordMat.get(word);
            }
 else {
              vec=new HashMap<String,Integer>();
              wordMat.put(word,vec);
            }
            for (            String second : words) {
              if (vec.containsKey(second)) {
                vec.put(second,vec.get(second) + 1);
              }
 else {
                vec.put(second,1);
              }
              Map<String,Integer> temp=wordMat.get(second);
              if (temp.containsKey(word)) {
                temp.put(word,temp.get(word) + 1);
              }
 else {
                temp.put(word,1);
              }
            }
          }
        }
      }
      br.close();
      monitor.worked(1);
    }
    if (buildMatrix) {
      monitor.subTask(""String_Node_Str"");
      writeWordMatrix();
    }
    monitor.worked(10);
    if (ret && phrase.size() > 0) {
      monitor.subTask(""String_Node_Str"");
      writePhrases(phrase);
    }
    monitor.worked(10);
    ConsoleView.printlInConsoleln(String.valueOf(phrase.size()));
    Date dateObj=new Date();
    TacitUtility.createRunReport(outputPath,""String_Node_Str"",dateObj);
    return true;
  }
 catch (  Exception e) {
    ConsoleView.printlInConsoleln(""String_Node_Str"" + e);
  }
  return false;
}","public boolean calculateCooccurrences(List<String> selectedFiles,String seedFile,int windowSize,String outputPath,int threshold,boolean buildMatrix,IProgressMonitor monitor){
  String currentLine=null;
  Queue<String> q=new LinkedList<String>();
  List<String> phrase=new ArrayList<String>();
  setOutputPath(outputPath);
  try {
    boolean ret=false;
    if (windowSize > 0) {
      ret=setSeedWords(seedFile);
    }
    if (ret) {
      doPhrases=true;
    }
    String[] listOfFiles=(String[])selectedFiles.toArray(new String[selectedFiles.size()]);
    int seedWordCount=seedWords.size();
    int count;
    for (    String fname : listOfFiles) {
      File f=new File(fname);
      monitor.subTask(""String_Node_Str"" + f.getName());
      appendLog(""String_Node_Str"" + f.getName());
      count=0;
      if (f.getAbsolutePath().contains(""String_Node_Str""))       continue;
      List<String> words=new ArrayList<String>();
      if (!f.exists() || f.isDirectory())       continue;
      BufferedReader br=new BufferedReader(new FileReader(f));
      int line_no=0;
      while ((currentLine=br.readLine()) != null) {
        if (currentLine.isEmpty() || currentLine.equals(""String_Node_Str""))         continue;
        line_no++;
        for (        String word : currentLine.split(""String_Node_Str"")) {
          if (word.isEmpty() || word.equals(""String_Node_Str""))           continue;
          word.replaceAll(delimiters,""String_Node_Str"");
          if (buildMatrix)           words.add(word);
          if (doPhrases) {
            if (count >= threshold || count >= seedWordCount) {
              StringBuilder match=new StringBuilder();
              for (              String str : q) {
                if (seedWords.containsKey(str))                 match.append('*');
                match.append(str + ' ');
              }
              phrase.add(f.getName() + ""String_Node_Str"" + line_no+ ""String_Node_Str""+ match.toString());
              q.clear();
              count=0;
              for (              String s : seedWords.keySet()) {
                seedWords.put(s,1);
              }
            }
 else             if (q.size() >= windowSize) {
              String first=q.remove();
              if (seedWords.containsKey(first)) {
                if (seedWords.get(first) == 0) {
                  count--;
                  seedWords.put(first,1);
                }
              }
            }
            q.add(word);
            if (seedWords.containsKey(word)) {
              if (seedWords.get(word) != 0) {
                count++;
                seedWords.put(word,0);
              }
            }
          }
          if (buildMatrix) {
            Map<String,Integer> vec=null;
            if (wordMat.containsKey(word)) {
              vec=wordMat.get(word);
            }
 else {
              vec=new HashMap<String,Integer>();
              wordMat.put(word,vec);
            }
            for (            String second : words) {
              if (vec.containsKey(second)) {
                vec.put(second,vec.get(second) + 1);
              }
 else {
                vec.put(second,1);
              }
              Map<String,Integer> temp=wordMat.get(second);
              if (temp.containsKey(word)) {
                temp.put(word,temp.get(word) + 1);
              }
 else {
                temp.put(word,1);
              }
            }
          }
        }
      }
      br.close();
      monitor.worked(1);
    }
    if (buildMatrix) {
      monitor.subTask(""String_Node_Str"");
      writeWordMatrix();
    }
    monitor.worked(10);
    if (ret && phrase.size() > 0) {
      monitor.subTask(""String_Node_Str"");
      writePhrases(phrase);
    }
    monitor.worked(10);
    ConsoleView.printlInConsoleln(String.valueOf(phrase.size()));
    Date dateObj=new Date();
    TacitUtility.createRunReport(outputPath,""String_Node_Str"",dateObj);
    return true;
  }
 catch (  Exception e) {
    ConsoleView.printlInConsoleln(""String_Node_Str"" + e);
  }
  return false;
}",0.9665501747378932
168169,"@Override protected void createMasterPart(final IManagedForm managedForm,Composite parent){
  FormToolkit toolkit=managedForm.getToolkit();
  Section section=toolkit.createSection(parent,Section.DESCRIPTION | Section.TITLE_BAR);
  section.setText(""String_Node_Str"");
  section.setDescription(""String_Node_Str"");
  section.marginWidth=10;
  section.marginHeight=5;
  Composite client=toolkit.createComposite(section,SWT.WRAP);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  layout.marginWidth=2;
  layout.marginHeight=2;
  client.setLayout(layout);
  Table t=toolkit.createTable(client,SWT.NULL);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=400;
  gd.widthHint=100;
  t.setLayoutData(gd);
  toolkit.paintBordersFor(client);
  Button addDir=toolkit.createButton(client,""String_Node_Str"",SWT.PUSH);
  gd=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
  addDir.setLayoutData(gd);
  section.setClient(client);
  final SectionPart spart=new SectionPart(section);
  managedForm.addPart(spart);
  TableViewer viewer=new TableViewer(t);
  viewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      managedForm.fireSelectionChanged(spart,event.getSelection());
    }
  }
);
  viewer.setContentProvider(new MasterContentProvider());
  viewer.setLabelProvider(new MasterLabelProvider());
  viewer.setInput(new Object[]{new TypeOne(),new TypeTwo()});
}","@Override protected void createMasterPart(final IManagedForm managedForm,Composite parent){
  GridLayoutFactory.fillDefaults().numColumns(1).equalWidth(false).applyTo(parent);
  FormToolkit toolkit=managedForm.getToolkit();
  Section section=toolkit.createSection(parent,Section.DESCRIPTION | Section.TITLE_BAR | Section.EXPANDED);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(section);
  GridLayoutFactory.fillDefaults().numColumns(3).applyTo(section);
  section.setText(""String_Node_Str"");
  section.setDescription(""String_Node_Str"");
  Composite client=toolkit.createComposite(section,SWT.WRAP);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  layout.marginWidth=2;
  layout.marginHeight=2;
  client.setLayout(layout);
  Table t=toolkit.createTable(client,SWT.NULL);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=400;
  gd.widthHint=100;
  t.setLayoutData(gd);
  toolkit.paintBordersFor(client);
  Button addDir=toolkit.createButton(client,""String_Node_Str"",SWT.PUSH);
  gd=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
  addDir.setLayoutData(gd);
  section.setClient(client);
  final SectionPart spart=new SectionPart(section);
  managedForm.addPart(spart);
  TableViewer viewer=new TableViewer(t);
  viewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      managedForm.fireSelectionChanged(spart,event.getSelection());
    }
  }
);
  viewer.setContentProvider(new MasterContentProvider());
  viewer.setLabelProvider(new MasterLabelProvider());
  viewer.setInput(new Object[]{new TypeOne(),new TypeTwo()});
}",0.903660886319846
168170,"public void createContents(Composite parent){
  GridLayoutFactory.fillDefaults().numColumns(1).equalWidth(false).applyTo(parent);
  FormToolkit toolkit=mform.getToolkit();
  Section section=toolkit.createSection(parent,Section.DESCRIPTION | Section.TITLE_BAR | Section.EXPANDED);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(section);
  GridLayoutFactory.fillDefaults().numColumns(3).applyTo(section);
  section.setText(""String_Node_Str"");
  section.setDescription(""String_Node_Str"");
  ScrolledComposite sc=new ScrolledComposite(section,SWT.H_SCROLL | SWT.V_SCROLL);
  sc.setExpandHorizontal(true);
  sc.setExpandVertical(true);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sc);
  Composite sectionClient=toolkit.createComposite(section);
  sc.setContent(sectionClient);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(sc);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sectionClient);
  section.setClient(sectionClient);
  TacitFormComposite.createEmptyRow(toolkit,sectionClient);
  final Label corpusIDLbl=toolkit.createLabel(sectionClient,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(corpusIDLbl);
  final Text corpusIDTxt=toolkit.createText(sectionClient,""String_Node_Str"",SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).applyTo(corpusIDTxt);
  final Label rootPathLbl=toolkit.createLabel(sectionClient,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(rootPathLbl);
  final Text rootLocationTxt=toolkit.createText(sectionClient,""String_Node_Str"",SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).span(1,0).applyTo(rootLocationTxt);
  final Button browseBtn=toolkit.createButton(sectionClient,""String_Node_Str"",SWT.PUSH);
  browseBtn.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent e){
      DirectoryDialog dlg=new DirectoryDialog(browseBtn.getShell(),SWT.OPEN);
      dlg.setText(""String_Node_Str"");
      String path=dlg.open();
      if (path == null)       return;
      rootLocationTxt.setText(path);
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  final Label dataTypeLbl=toolkit.createLabel(sectionClient,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).span(3,0).applyTo(dataTypeLbl);
  Composite dataType=toolkit.createComposite(parent);
  GridLayoutFactory.fillDefaults().equalWidth(false).numColumns(2).applyTo(dataType);
  GridDataFactory.fillDefaults().grab(true,false).span(2,1).applyTo(dataType);
  createDataTypeOptions(toolkit,dataType);
}","public void createContents(Composite parent){
  GridLayoutFactory.fillDefaults().numColumns(1).equalWidth(false).applyTo(parent);
  FormToolkit toolkit=mform.getToolkit();
  Section section=toolkit.createSection(parent,Section.DESCRIPTION | Section.TITLE_BAR | Section.EXPANDED);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(section);
  GridLayoutFactory.fillDefaults().numColumns(3).applyTo(section);
  section.setText(""String_Node_Str"");
  section.setDescription(""String_Node_Str"");
  ScrolledComposite sc=new ScrolledComposite(section,SWT.H_SCROLL | SWT.V_SCROLL);
  sc.setExpandHorizontal(true);
  sc.setExpandVertical(true);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sc);
  Composite sectionClient=toolkit.createComposite(section);
  sc.setContent(sectionClient);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(sc);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sectionClient);
  section.setClient(sectionClient);
  TacitFormComposite.createEmptyRow(toolkit,sectionClient);
  final Label corpusIDLbl=toolkit.createLabel(sectionClient,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(corpusIDLbl);
  final Text corpusIDTxt=toolkit.createText(sectionClient,""String_Node_Str"",SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).applyTo(corpusIDTxt);
  final Label dataTypeLbl=toolkit.createLabel(sectionClient,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).span(3,0).applyTo(dataTypeLbl);
  Composite dataType=toolkit.createComposite(parent);
  GridLayoutFactory.fillDefaults().equalWidth(false).numColumns(2).applyTo(dataType);
  GridDataFactory.fillDefaults().grab(true,false).span(2,1).applyTo(dataType);
  createDataTypeOptions(toolkit,dataType);
}",0.6918541166193493
168171,"public void linkActivated(HyperlinkEvent e){
  Program.launch(""String_Node_Str"");
}","@Override public void linkActivated(HyperlinkEvent e){
  Program.launch(""String_Node_Str"");
}",0.9431818181818182
168172,"private Text createHyperLink(Composite sectionClient,String lbl){
  FormToolkit toolkit=new FormToolkit(sectionClient.getDisplay());
  Hyperlink link=toolkit.createHyperlink(sectionClient,""String_Node_Str"",SWT.WRAP);
  link.setBackground(sectionClient.getBackground());
  link.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      Program.launch(""String_Node_Str"");
    }
  }
);
  link.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(link);
  final Text outputLocationTxt=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).applyTo(outputLocationTxt);
  outputLocationTxt.setEditable(false);
  outputLocationTxt.setEnabled(false);
  outputLocationTxt.setMessage(""String_Node_Str"");
  return outputLocationTxt;
}","private Label createHyperLink(Composite sectionClient,String lbl){
  FormToolkit toolkit=new FormToolkit(sectionClient.getDisplay());
  Hyperlink link=toolkit.createHyperlink(sectionClient,""String_Node_Str"",SWT.WRAP);
  link.setBackground(sectionClient.getBackground());
  link.addHyperlinkListener(new HyperlinkAdapter(){
    @Override public void linkActivated(    HyperlinkEvent e){
      Program.launch(""String_Node_Str"");
    }
  }
);
  link.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(link);
  final Label outputLocationTxt=new Label(sectionClient,SWT.NONE);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).applyTo(outputLocationTxt);
  outputLocationTxt.setText(""String_Node_Str"");
  return outputLocationTxt;
}",0.9016493585827734
168173,"@Override protected Control createContents(Composite parent){
  Composite sectionClient=new Composite(parent,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sectionClient);
  Label dummy=new Label(sectionClient,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).span(3,0).applyTo(dummy);
  userName=createHyperLink(sectionClient,""String_Node_Str"");
  userName.setEnabled(false);
  userName.setEditable(false);
  consumerKey=createTextFields(sectionClient,true,""String_Node_Str"");
  consumerSecret=createTextFields(sectionClient,true,""String_Node_Str"");
  accessToken=createTextFields(sectionClient,true,""String_Node_Str"");
  accessTokenSecret=createTextFields(sectionClient,true,""String_Node_Str"");
  loadValues();
  return sectionClient;
}","@Override protected Control createContents(Composite parent){
  Composite sectionClient=new Composite(parent,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sectionClient);
  Label dummy=new Label(sectionClient,SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).span(3,0).applyTo(dummy);
  userName=createHyperLink(sectionClient,""String_Node_Str"");
  consumerKey=createTextFields(sectionClient,true,""String_Node_Str"");
  consumerSecret=createTextFields(sectionClient,true,""String_Node_Str"");
  accessToken=createTextFields(sectionClient,true,""String_Node_Str"");
  accessTokenSecret=createTextFields(sectionClient,true,""String_Node_Str"");
  return sectionClient;
}",0.9487008660892738
168174,"public void searchRecords(int congress,String senText,String repText,int progressSize,String politicalAffiliation) throws IOException, NullPointerException {
  if ((null == senText || senText.isEmpty()) && (null == repText || repText.isEmpty()))   return;
  String memText=(null == senText || senText.isEmpty()) ? repText : senText;
  ConsoleView.printlInConsoleln(""String_Node_Str"" + memText);
  String memberDir=this.outputDir + File.separator + memText;
  if (!new File(memberDir).exists()) {
    new File(memberDir).mkdir();
  }
  if (null != monitor && !monitor.isCanceled()) {
    monitor.subTask(""String_Node_Str"" + memText + ""String_Node_Str"");
  }
  Document doc=Jsoup.connect(""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"" + congress,""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",repText).data(""String_Node_Str"",senText).data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",crawlSenateRecords).data(""String_Node_Str"",crawlHouseRepRecords).data(""String_Node_Str"",crawlExtension).data(""String_Node_Str"",crawlDailyDigest).data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",dateFrom).data(""String_Node_Str"",dateTo).data(""String_Node_Str"",sortType).data(""String_Node_Str"",""String_Node_Str"").userAgent(""String_Node_Str"").timeout(10 * 1000).post();
  Elements links=doc.getElementById(""String_Node_Str"").getElementsByTag(""String_Node_Str"");
  Elements relevantLinks=new Elements();
  for (  Element link : links) {
    if (!irrelevantLinks.contains(link.text()))     if (link.text().contains(""String_Node_Str"") || link.text().contains(""String_Node_Str"") || link.text().contains(""String_Node_Str"")|| link.text().contains(""String_Node_Str""))     relevantLinks.add(link);
  }
  if (relevantLinks.size() == 0) {
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    return;
  }
  links=relevantLinks;
  String memberAttribs=memText.split(""String_Node_Str"")[1].replace(""String_Node_Str"",""String_Node_Str"").trim();
  String memberState=memberAttribs;
  if (-1 != memberAttribs.indexOf('-')) {
    memberState=memberAttribs.split(""String_Node_Str"")[1];
  }
  int count=0;
  int tempCount=0;
  for (  Element link : links) {
    if (null != monitor && monitor.isCanceled()) {
      monitor.subTask(""String_Node_Str"");
      return;
    }
    if (maxDocs == -1)     count=-2000;
    if (count++ >= maxDocs)     break;
    String recordDate=""String_Node_Str"";
    String recordType=""String_Node_Str"";
    if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
 else     if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
 else     if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
 else     if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
    Document record=Jsoup.connect(""String_Node_Str"" + link.attr(""String_Node_Str"")).timeout(10 * 1000).get();
    Elements tabLinks=record.getElementById(""String_Node_Str"").select(""String_Node_Str"");
    String extractLink=""String_Node_Str"";
    for (    Element tabLink : tabLinks) {
      if (tabLink.text().equals(""String_Node_Str"")) {
        extractLink=tabLink.attr(""String_Node_Str"");
        break;
      }
    }
    String lastName=memText.split(""String_Node_Str"")[0];
    String[] contents=extract(extractLink,lastName);
    if (contents[1].length() == 0)     count--;
 else {
      String[] split=contents[0].split(""String_Node_Str"");
      String title=split[0].trim();
      title=title.replaceAll(""String_Node_Str"",""String_Node_Str"");
      title=title.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String shortTitle=title;
      if (title.length() > 15)       shortTitle=title.substring(0,15).trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
      shortTitle.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String fileName=congress + ""String_Node_Str"" + lastName+ ""String_Node_Str""+ memberAttribs+ ""String_Node_Str""+ recordDate+ ""String_Node_Str""+ shortTitle+ ""String_Node_Str""+ (System.currentTimeMillis() % 1000)+ ""String_Node_Str"";
      writeToFile(memberDir,fileName,contents);
      csvWriter.write(congress + ""String_Node_Str"" + recordDate+ ""String_Node_Str""+ lastName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ recordType+ ""String_Node_Str""+ memberState+ ""String_Node_Str""+ title+ ""String_Node_Str""+ fileName);
      csvWriter.newLine();
      csvWriter.flush();
    }
    tempCount++;
    tempCount=updateWork(maxDocs,links.size(),progressSize,tempCount);
  }
}","public void searchRecords(int congress,String senText,String repText,int progressSize,String politicalAffiliation) throws IOException, NullPointerException {
  if ((null == senText || senText.isEmpty()) && (null == repText || repText.isEmpty()))   return;
  String memText=(null == senText || senText.isEmpty()) ? repText : senText;
  ConsoleView.printlInConsoleln(""String_Node_Str"" + memText);
  String memberDir=this.outputDir + File.separator + memText;
  if (!new File(memberDir).exists()) {
    new File(memberDir).mkdir();
  }
  if (null != monitor && !monitor.isCanceled()) {
    monitor.subTask(""String_Node_Str"" + memText + ""String_Node_Str"");
  }
  Document doc=Jsoup.connect(""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"" + congress,""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",repText).data(""String_Node_Str"",senText).data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",crawlSenateRecords).data(""String_Node_Str"",crawlHouseRepRecords).data(""String_Node_Str"",crawlExtension).data(""String_Node_Str"",crawlDailyDigest).data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",dateFrom).data(""String_Node_Str"",dateTo).data(""String_Node_Str"",sortType).data(""String_Node_Str"",""String_Node_Str"").userAgent(""String_Node_Str"").timeout(10 * 1000).post();
  Elements links=doc.getElementById(""String_Node_Str"").getElementsByTag(""String_Node_Str"");
  Elements relevantLinks=new Elements();
  for (  Element link : links) {
    if (!irrelevantLinks.contains(link.text()))     if (link.text().contains(""String_Node_Str"") || link.text().contains(""String_Node_Str"") || link.text().contains(""String_Node_Str"")|| link.text().contains(""String_Node_Str""))     relevantLinks.add(link);
  }
  String memberAttribs=memText.substring(memText.lastIndexOf('(') + 1,memText.length() - 1).trim();
  String memberState=memberAttribs;
  String district=memberAttribs;
  if (-1 != memberAttribs.indexOf('-')) {
    String[] temp=memberAttribs.split(""String_Node_Str"");
    memberState=temp[1];
    if (temp.length >= 3)     district=temp[2];
  }
  String lastName=memText.split(""String_Node_Str"")[0];
  String[] tempName=(memText.lastIndexOf('(') != -1) ? memText.substring(0,memText.lastIndexOf('(')).split(""String_Node_Str"") : lastName.split(""String_Node_Str"");
  String tempRepName=tempName[1] + ""String_Node_Str"" + tempName[0];
  if (relevantLinks.size() == 0) {
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    if (isSenate)     csvWriter.write(congress + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ tempRepName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ memberState+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
 else     csvWriter.write(congress + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ tempRepName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ memberState+ ""String_Node_Str""+ district+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    return;
  }
  links=relevantLinks;
  int count=0;
  int tempCount=0;
  for (  Element link : links) {
    if (null != monitor && monitor.isCanceled()) {
      monitor.subTask(""String_Node_Str"");
      return;
    }
    if (maxDocs == -1)     count=-2000;
    if (count++ >= maxDocs)     break;
    String recordDate=""String_Node_Str"";
    String recordType=""String_Node_Str"";
    if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
 else     if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
 else     if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
 else     if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
    Document record=Jsoup.connect(""String_Node_Str"" + link.attr(""String_Node_Str"")).timeout(10 * 1000).get();
    Elements tabLinks=record.getElementById(""String_Node_Str"").select(""String_Node_Str"");
    String extractLink=""String_Node_Str"";
    for (    Element tabLink : tabLinks) {
      if (tabLink.text().equals(""String_Node_Str"")) {
        extractLink=tabLink.attr(""String_Node_Str"");
        break;
      }
    }
    String[] contents=extract(extractLink,lastName);
    if (contents[1].length() == 0)     count--;
 else {
      String[] split=contents[0].split(""String_Node_Str"");
      String title=split[0].trim();
      title=title.replaceAll(""String_Node_Str"",""String_Node_Str"");
      title=title.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String shortTitle=title;
      if (title.length() > 15)       shortTitle=title.substring(0,15).trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
      shortTitle.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String fileName=congress + ""String_Node_Str"" + tempRepName+ ""String_Node_Str""+ memberAttribs+ ""String_Node_Str""+ recordDate+ ""String_Node_Str""+ shortTitle+ ""String_Node_Str""+ (System.currentTimeMillis() % 1000)+ ""String_Node_Str"";
      writeToFile(memberDir,fileName,contents);
      if (isSenate)       csvWriter.write(congress + ""String_Node_Str"" + recordDate+ ""String_Node_Str""+ tempRepName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ recordType+ ""String_Node_Str""+ memberState+ ""String_Node_Str""+ title+ ""String_Node_Str""+ fileName);
 else       csvWriter.write(congress + ""String_Node_Str"" + recordDate+ ""String_Node_Str""+ tempRepName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ recordType+ ""String_Node_Str""+ memberState+ ""String_Node_Str""+ district+ ""String_Node_Str""+ title+ ""String_Node_Str""+ fileName);
      csvWriter.newLine();
      csvWriter.flush();
    }
    tempCount++;
    tempCount=updateWork(maxDocs,links.size(),progressSize,tempCount);
  }
}",0.8275919316012286
168175,"/** 
 * Adds ""Classify"" and ""Help"" buttons on the Naive Bayes Classifier form
 */
private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (UsCongressCrawlerViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    String dateFrom=""String_Node_Str"";
    String dateTo=""String_Node_Str"";
    int maxDocs=-1;
    String sortType=""String_Node_Str"";
    String congressNum=""String_Node_Str"";
    ArrayList<String> congressMemberDetails=new ArrayList<String>();
    String outputDir=""String_Node_Str"";
    private boolean canProceed;
    boolean isSenate=false;
    boolean crawlSenateRecords=false;
    boolean crawlHouseRepRecords=false;
    boolean crawlDailyDigest=false;
    boolean crawlExtension=false;
    @Override public void run(){
      final UsCongressCrawler sc=new UsCongressCrawler();
      final Job job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              if (senatorButton.getSelection()) {
                if (congresses[sCmbCongress.getSelectionIndex()].indexOf(""String_Node_Str"") != -1) {
                  congressNum=""String_Node_Str"";
                }
 else {
                  congressNum=congresses[sCmbCongress.getSelectionIndex()];
                }
                congressMemberDetails=selectedSenators;
                isSenate=true;
                crawlSenateRecords=senateBtn.getSelection();
              }
 else               if (representativeButton.getSelection()) {
                if (congresses[rCmbCongress.getSelectionIndex()].indexOf(""String_Node_Str"") != -1) {
                  congressNum=""String_Node_Str"";
                }
 else {
                  congressNum=congresses[rCmbCongress.getSelectionIndex()];
                }
                congressMemberDetails=selectedRepresentatives;
                crawlHouseRepRecords=houseBtn.getSelection();
              }
              crawlDailyDigest=dailyDigestBtn.getSelection();
              crawlExtension=extensionBtn.getSelection();
              if (dateRange.getSelection()) {
                dateFrom=(fromDate.getMonth() + 1) + ""String_Node_Str"" + fromDate.getDay()+ ""String_Node_Str""+ fromDate.getYear();
                dateTo=(toDate.getMonth() + 1) + ""String_Node_Str"" + toDate.getDay()+ ""String_Node_Str""+ toDate.getYear();
              }
 else {
                dateFrom=""String_Node_Str"";
                dateTo=""String_Node_Str"";
              }
              if (limitRecords.getSelection()) {
                sortType=sortByDateNo.getSelection() ? ""String_Node_Str"" : ""String_Node_Str"";
                maxDocs=Integer.parseInt(limitText.getText());
              }
 else {
                maxDocs=-1;
                sortType=""String_Node_Str"";
              }
              outputDir=outputLayout.getOutputLabel().getText();
            }
          }
);
          if (congressMemberDetails.contains(""String_Node_Str"") && congressNum.equals(""String_Node_Str"")) {
            progressSize=(totalSenators * congresses.length) + 50;
          }
 else {
            int count=1;
            if (congressNum.equals(""String_Node_Str"")) {
              if (congressMemberDetails.contains(""String_Node_Str"")) {
                progressSize=(20 * congresses.length) + 50;
                count++;
              }
              if (congressMemberDetails.contains(""String_Node_Str"")) {
                progressSize+=(20 * congresses.length) + 50;
                count++;
              }
              if (congressMemberDetails.contains(""String_Node_Str"")) {
                progressSize+=(20 * congresses.length) + 50;
                count++;
              }
              progressSize+=((congressMemberDetails.size() - count) + 1 * congresses.length) + 50;
            }
 else {
              if (congressMemberDetails.contains(""String_Node_Str"")) {
                progressSize=100 + 50;
                count++;
              }
              if (congressMemberDetails.contains(""String_Node_Str"")) {
                progressSize+=100 + 50;
                count++;
              }
              if (congressMemberDetails.contains(""String_Node_Str"")) {
                progressSize+=100 + 50;
                count++;
              }
              progressSize+=((congressMemberDetails.size() - count) + 1 * 10) + 50;
            }
          }
          monitor.beginTask(""String_Node_Str"",progressSize);
          TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          final ArrayList<Integer> allCongresses=new ArrayList<Integer>();
          for (          String s : congresses) {
            if (!s.contains(""String_Node_Str""))             allCongresses.add(Integer.parseInt(s));
          }
          if (monitor.isCanceled()) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return handledCancelRequest(""String_Node_Str"");
          }
          try {
            monitor.subTask(""String_Node_Str"");
            monitor.worked(10);
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            sc.initialize(sortType,maxDocs,Integer.parseInt(congressNum),congressMemberDetails,dateFrom,dateTo,outputDir,allCongresses,monitor,progressSize - 30,isSenate,crawlSenateRecords,crawlHouseRepRecords,crawlDailyDigest,crawlExtension);
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            monitor.worked(10);
            monitor.subTask(""String_Node_Str"");
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            sc.crawl();
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            monitor.worked(10);
          }
 catch (          NumberFormatException e) {
            return handleException(monitor,e,""String_Node_Str"");
          }
catch (          IOException e) {
            return handleException(monitor,e,""String_Node_Str"");
          }
catch (          Exception e) {
            return handleException(monitor,e,""String_Node_Str"");
          }
          monitor.worked(100);
          monitor.done();
          ConsoleView.printlInConsoleln(""String_Node_Str"");
          ConsoleView.printlInConsoleln(""String_Node_Str"" + sc.totalFilesDownloaded);
          ConsoleView.printlInConsoleln(""String_Node_Str"");
          TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
          TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      canProceed=canItProceed();
      if (canProceed) {
        job.schedule();
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (UsCongressCrawlerViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}","/** 
 * Adds ""Classify"" and ""Help"" buttons on the Naive Bayes Classifier form
 */
private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (UsCongressCrawlerViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    String dateFrom=""String_Node_Str"";
    String dateTo=""String_Node_Str"";
    int maxDocs=-1;
    String sortType=""String_Node_Str"";
    String congressNum=""String_Node_Str"";
    ArrayList<String> congressMemberDetails=new ArrayList<String>();
    String outputDir=""String_Node_Str"";
    private boolean canProceed;
    boolean isSenate=false;
    boolean crawlSenateRecords=false;
    boolean crawlHouseRepRecords=false;
    boolean crawlDailyDigest=false;
    boolean crawlExtension=false;
    @Override public void run(){
      final UsCongressCrawler sc=new UsCongressCrawler();
      final Job job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              if (senatorButton.getSelection()) {
                if (congresses[sCmbCongress.getSelectionIndex()].indexOf(""String_Node_Str"") != -1) {
                  congressNum=""String_Node_Str"";
                }
 else {
                  congressNum=congresses[sCmbCongress.getSelectionIndex()];
                }
                congressMemberDetails=selectedSenators;
                isSenate=true;
                crawlSenateRecords=senateBtn.getSelection();
              }
 else               if (representativeButton.getSelection()) {
                if (congresses[rCmbCongress.getSelectionIndex()].indexOf(""String_Node_Str"") != -1) {
                  congressNum=""String_Node_Str"";
                }
 else {
                  congressNum=congresses[rCmbCongress.getSelectionIndex()];
                }
                isSenate=false;
                congressMemberDetails=selectedRepresentatives;
                crawlHouseRepRecords=houseBtn.getSelection();
              }
              crawlDailyDigest=dailyDigestBtn.getSelection();
              crawlExtension=extensionBtn.getSelection();
              if (dateRange.getSelection()) {
                dateFrom=(fromDate.getMonth() + 1) + ""String_Node_Str"" + fromDate.getDay()+ ""String_Node_Str""+ fromDate.getYear();
                dateTo=(toDate.getMonth() + 1) + ""String_Node_Str"" + toDate.getDay()+ ""String_Node_Str""+ toDate.getYear();
              }
 else {
                dateFrom=""String_Node_Str"";
                dateTo=""String_Node_Str"";
              }
              if (limitRecords.getSelection()) {
                sortType=sortByDateNo.getSelection() ? ""String_Node_Str"" : ""String_Node_Str"";
                maxDocs=Integer.parseInt(limitText.getText());
              }
 else {
                maxDocs=-1;
                sortType=""String_Node_Str"";
              }
              outputDir=outputLayout.getOutputLabel().getText();
            }
          }
);
          if ((congressMemberDetails.contains(""String_Node_Str"") || congressMemberDetails.contains(""String_Node_Str"")) && congressNum.equals(""String_Node_Str"")) {
            progressSize=congressMemberDetails.contains(""String_Node_Str"") ? (totalSenators * congresses.length) + 50 : (totalRepresentatives * congresses.length) + 50;
          }
 else {
            if (congressNum.equals(""String_Node_Str"")) {
              if (congressMemberDetails.contains(""String_Node_Str"") || congressMemberDetails.contains(""String_Node_Str"") || congressMemberDetails.contains(""String_Node_Str"")) {
                if (congressMemberDetails.contains(""String_Node_Str""))                 progressSize=(20 * congresses.length) + 50;
                if (congressMemberDetails.contains(""String_Node_Str""))                 progressSize+=(20 * congresses.length) + 50;
                if (congressMemberDetails.contains(""String_Node_Str""))                 progressSize+=(20 * congresses.length) + 50;
              }
 else               progressSize=((congressMemberDetails.size() + 1) * congresses.length) + 50;
            }
 else {
              if (congressMemberDetails.contains(""String_Node_Str"") || congressMemberDetails.contains(""String_Node_Str"")) {
                progressSize=congressMemberDetails.contains(""String_Node_Str"") ? (totalSenators * 20) + 50 : (totalRepresentatives * 20) + 50;
              }
 else               if (congressMemberDetails.contains(""String_Node_Str"") || congressMemberDetails.contains(""String_Node_Str"") || congressMemberDetails.contains(""String_Node_Str"")) {
                if (congressMemberDetails.contains(""String_Node_Str""))                 progressSize=100 + 50;
                if (congressMemberDetails.contains(""String_Node_Str""))                 progressSize+=100 + 50;
                if (congressMemberDetails.contains(""String_Node_Str""))                 progressSize+=100 + 50;
              }
 else {
                progressSize=((congressMemberDetails.size() + 1) * 10) + 50;
              }
            }
          }
          monitor.beginTask(""String_Node_Str"",progressSize);
          TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          final ArrayList<Integer> allCongresses=new ArrayList<Integer>();
          for (          String s : congresses) {
            if (!s.contains(""String_Node_Str""))             allCongresses.add(Integer.parseInt(s));
          }
          if (monitor.isCanceled()) {
            TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return handledCancelRequest(""String_Node_Str"");
          }
          try {
            monitor.subTask(""String_Node_Str"");
            monitor.worked(10);
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            sc.initialize(sortType,maxDocs,Integer.parseInt(congressNum),congressMemberDetails,dateFrom,dateTo,outputDir,allCongresses,monitor,progressSize - 30,isSenate,crawlSenateRecords,crawlHouseRepRecords,crawlDailyDigest,crawlExtension);
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            monitor.worked(10);
            monitor.subTask(""String_Node_Str"");
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            sc.crawl();
            if (monitor.isCanceled()) {
              TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              return handledCancelRequest(""String_Node_Str"");
            }
            monitor.worked(10);
          }
 catch (          NumberFormatException e) {
            return handleException(monitor,e,""String_Node_Str"");
          }
catch (          IOException e) {
            return handleException(monitor,e,""String_Node_Str"");
          }
catch (          Exception e) {
            return handleException(monitor,e,""String_Node_Str"");
          }
          monitor.worked(100);
          monitor.done();
          ConsoleView.printlInConsoleln(""String_Node_Str"");
          ConsoleView.printlInConsoleln(""String_Node_Str"" + sc.totalFilesDownloaded);
          ConsoleView.printlInConsoleln(""String_Node_Str"");
          TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
          TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      canProceed=canItProceed();
      if (canProceed) {
        job.schedule();
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (UsCongressCrawlerViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}",0.919917864476386
168176,"private void writeToFile(String senatorOutputDir,String fileName,String[] contents) throws IOException {
  ConsoleView.printlInConsoleln(""String_Node_Str"" + senatorOutputDir + File.separator+ fileName);
  BufferedWriter bw=new BufferedWriter(new FileWriter(new File(senatorOutputDir + System.getProperty(""String_Node_Str"") + fileName)));
  bw.write(contents[0]);
  bw.newLine();
  bw.newLine();
  bw.write(contents[1]);
  bw.close();
  totalFilesDownloaded++;
}","private void writeToFile(String senatorOutputDir,String fileName,String[] contents) throws IOException {
  fileName=fileName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  ConsoleView.printlInConsoleln(""String_Node_Str"" + senatorOutputDir + File.separator+ fileName);
  BufferedWriter bw=new BufferedWriter(new FileWriter(new File(senatorOutputDir + System.getProperty(""String_Node_Str"") + fileName)));
  bw.write(contents[0]);
  bw.newLine();
  bw.newLine();
  bw.write(contents[1]);
  bw.close();
  totalFilesDownloaded++;
}",0.9303733602421796
168177,"public void searchRecords(int congress,String senText,String repText,int progressSize,String politicalAffiliation) throws IOException, NullPointerException {
  if ((null == senText || senText.isEmpty()) && (null == repText || repText.isEmpty()))   return;
  String memText=(null == senText || senText.isEmpty()) ? repText : senText;
  ConsoleView.printlInConsoleln(""String_Node_Str"" + memText);
  String memberDir=this.outputDir + File.separator + memText;
  if (!new File(memberDir).exists()) {
    new File(memberDir).mkdir();
  }
  if (null != monitor && !monitor.isCanceled()) {
    monitor.subTask(""String_Node_Str"" + memText + ""String_Node_Str"");
  }
  Document doc=Jsoup.connect(""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"" + congress,""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",repText).data(""String_Node_Str"",senText).data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",crawlSenateRecords).data(""String_Node_Str"",crawlHouseRepRecords).data(""String_Node_Str"",crawlExtension).data(""String_Node_Str"",crawlDailyDigest).data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",dateFrom).data(""String_Node_Str"",dateTo).data(""String_Node_Str"",sortType).data(""String_Node_Str"",""String_Node_Str"").userAgent(""String_Node_Str"").timeout(10 * 1000).post();
  Elements links=doc.getElementById(""String_Node_Str"").getElementsByTag(""String_Node_Str"");
  Elements relevantLinks=new Elements();
  for (  Element link : links) {
    if (!irrelevantLinks.contains(link.text()))     if (link.text().contains(""String_Node_Str"") || link.text().contains(""String_Node_Str"") || link.text().contains(""String_Node_Str"")|| link.text().contains(""String_Node_Str""))     relevantLinks.add(link);
  }
  String memberAttribs=memText.substring(memText.lastIndexOf('(') + 1,memText.length() - 1).trim();
  String memberState=memberAttribs;
  String district=""String_Node_Str"";
  if (-1 != memberAttribs.indexOf('-')) {
    String[] temp=memberAttribs.split(""String_Node_Str"");
    memberState=temp[1];
    if (temp.length >= 3)     district=temp[2];
  }
  String lastName=memText.split(""String_Node_Str"")[0];
  String[] tempName=(memText.lastIndexOf('(') != -1) ? memText.substring(0,memText.lastIndexOf('(')).split(""String_Node_Str"") : lastName.split(""String_Node_Str"");
  String tempRepName=tempName[1] + ""String_Node_Str"" + tempName[0];
  if (relevantLinks.size() == 0) {
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    if (isSenate)     csvWriter.write(congress + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ tempRepName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ memberState+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
 else     csvWriter.write(congress + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ tempRepName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ memberState+ ""String_Node_Str""+ district+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    csvWriter.newLine();
    csvWriter.flush();
    return;
  }
  links=relevantLinks;
  int count=0;
  int tempCount=0;
  for (  Element link : links) {
    if (null != monitor && monitor.isCanceled()) {
      monitor.subTask(""String_Node_Str"");
      return;
    }
    if (maxDocs == -1)     count=-2000;
    if (count++ >= maxDocs)     break;
    String recordDate=""String_Node_Str"";
    String recordType=""String_Node_Str"";
    if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
 else     if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
 else     if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
 else     if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
    Document record=Jsoup.connect(""String_Node_Str"" + link.attr(""String_Node_Str"")).timeout(10 * 1000).get();
    Elements tabLinks=record.getElementById(""String_Node_Str"").select(""String_Node_Str"");
    String extractLink=""String_Node_Str"";
    for (    Element tabLink : tabLinks) {
      if (tabLink.text().equals(""String_Node_Str"")) {
        extractLink=tabLink.attr(""String_Node_Str"");
        break;
      }
    }
    String[] contents=extract(extractLink,lastName);
    if (contents[1].length() == 0)     count--;
 else {
      String[] split=contents[0].split(""String_Node_Str"");
      String title=split[0].trim();
      title=title.replaceAll(""String_Node_Str"",""String_Node_Str"");
      title=title.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String shortTitle=title;
      if (title.length() > 15)       shortTitle=title.substring(0,15).trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
      shortTitle.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String fileName=congress + ""String_Node_Str"" + tempRepName+ ""String_Node_Str""+ memberAttribs+ ""String_Node_Str""+ recordDate+ ""String_Node_Str""+ shortTitle+ ""String_Node_Str""+ (System.currentTimeMillis() % 1000)+ ""String_Node_Str"";
      writeToFile(memberDir,fileName,contents);
      if (isSenate)       csvWriter.write(congress + ""String_Node_Str"" + recordDate+ ""String_Node_Str""+ tempRepName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ recordType+ ""String_Node_Str""+ memberState+ ""String_Node_Str""+ title+ ""String_Node_Str""+ fileName);
 else       csvWriter.write(congress + ""String_Node_Str"" + recordDate+ ""String_Node_Str""+ tempRepName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ recordType+ ""String_Node_Str""+ memberState+ ""String_Node_Str""+ district+ ""String_Node_Str""+ title+ ""String_Node_Str""+ fileName);
      csvWriter.newLine();
      csvWriter.flush();
    }
    tempCount++;
    tempCount=updateWork(maxDocs,links.size(),progressSize,tempCount);
  }
}","public void searchRecords(int congress,String senText,String repText,int progressSize,String politicalAffiliation) throws IOException, NullPointerException {
  if ((null == senText || senText.isEmpty()) && (null == repText || repText.isEmpty()))   return;
  String memText=(null == senText || senText.isEmpty()) ? repText : senText;
  ConsoleView.printlInConsoleln(""String_Node_Str"" + memText);
  String memberDir=this.outputDir + File.separator + memText;
  memberDir=memberDir.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!new File(memberDir).exists()) {
    new File(memberDir).mkdir();
  }
  if (null != monitor && !monitor.isCanceled()) {
    monitor.subTask(""String_Node_Str"" + memText + ""String_Node_Str"");
  }
  Document doc=Jsoup.connect(""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"" + congress,""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",repText).data(""String_Node_Str"",senText).data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",crawlSenateRecords).data(""String_Node_Str"",crawlHouseRepRecords).data(""String_Node_Str"",crawlExtension).data(""String_Node_Str"",crawlDailyDigest).data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",dateFrom).data(""String_Node_Str"",dateTo).data(""String_Node_Str"",sortType).data(""String_Node_Str"",""String_Node_Str"").userAgent(""String_Node_Str"").timeout(10 * 1000).post();
  Elements links=doc.getElementById(""String_Node_Str"").getElementsByTag(""String_Node_Str"");
  Elements relevantLinks=new Elements();
  for (  Element link : links) {
    if (!irrelevantLinks.contains(link.text()))     if (link.text().contains(""String_Node_Str"") || link.text().contains(""String_Node_Str"") || link.text().contains(""String_Node_Str"")|| link.text().contains(""String_Node_Str""))     relevantLinks.add(link);
  }
  String memberAttribs=memText.substring(memText.lastIndexOf('(') + 1,memText.length() - 1).trim();
  String memberState=memberAttribs;
  String district=""String_Node_Str"";
  if (-1 != memberAttribs.indexOf('-')) {
    String[] temp=memberAttribs.split(""String_Node_Str"");
    memberState=temp[1];
    if (temp.length >= 3)     district=temp[2];
  }
  String lastName=memText.split(""String_Node_Str"")[0];
  String[] tempName=(memText.lastIndexOf('(') != -1) ? memText.substring(0,memText.lastIndexOf('(')).split(""String_Node_Str"") : lastName.split(""String_Node_Str"");
  String tempRepName=tempName[1] + ""String_Node_Str"" + tempName[0];
  if (relevantLinks.size() == 0) {
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    if (isSenate)     csvWriter.write(congress + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ tempRepName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ memberState+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
 else     csvWriter.write(congress + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ tempRepName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ memberState+ ""String_Node_Str""+ district+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    csvWriter.newLine();
    csvWriter.flush();
    return;
  }
  links=relevantLinks;
  int count=0;
  int tempCount=0;
  for (  Element link : links) {
    if (null != monitor && monitor.isCanceled()) {
      monitor.subTask(""String_Node_Str"");
      return;
    }
    if (maxDocs == -1)     count=-2000;
    if (count++ >= maxDocs)     break;
    String recordDate=""String_Node_Str"";
    String recordType=""String_Node_Str"";
    if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
 else     if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
 else     if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
 else     if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
    Document record=Jsoup.connect(""String_Node_Str"" + link.attr(""String_Node_Str"")).timeout(10 * 1000).get();
    Elements tabLinks=record.getElementById(""String_Node_Str"").select(""String_Node_Str"");
    String extractLink=""String_Node_Str"";
    for (    Element tabLink : tabLinks) {
      if (tabLink.text().equals(""String_Node_Str"")) {
        extractLink=tabLink.attr(""String_Node_Str"");
        break;
      }
    }
    String[] contents=extract(extractLink,lastName);
    if (contents[1].length() == 0)     count--;
 else {
      String[] split=contents[0].split(""String_Node_Str"");
      String title=split[0].trim();
      title=title.replaceAll(""String_Node_Str"",""String_Node_Str"");
      title=title.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String shortTitle=title;
      if (title.length() > 15)       shortTitle=title.substring(0,15).trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
      shortTitle.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String fileName=congress + ""String_Node_Str"" + tempRepName+ ""String_Node_Str""+ memberAttribs+ ""String_Node_Str""+ recordDate+ ""String_Node_Str""+ shortTitle+ ""String_Node_Str""+ (System.currentTimeMillis() % 1000)+ ""String_Node_Str"";
      writeToFile(memberDir,fileName,contents);
      if (isSenate)       csvWriter.write(congress + ""String_Node_Str"" + recordDate+ ""String_Node_Str""+ tempRepName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ recordType+ ""String_Node_Str""+ memberState+ ""String_Node_Str""+ title+ ""String_Node_Str""+ fileName);
 else       csvWriter.write(congress + ""String_Node_Str"" + recordDate+ ""String_Node_Str""+ tempRepName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ recordType+ ""String_Node_Str""+ memberState+ ""String_Node_Str""+ district+ ""String_Node_Str""+ title+ ""String_Node_Str""+ fileName);
      csvWriter.newLine();
      csvWriter.flush();
    }
    tempCount++;
    tempCount=updateWork(maxDocs,links.size(),progressSize,tempCount);
  }
}",0.994738792145239
168178,"private void sHandleAdd(Shell shell){
  processElementSelectionDialog(shell);
  senatorList=new LinkedHashSet<String>();
  Job listSenators=new Job(""String_Node_Str""){
    String selectedCongress=""String_Node_Str"";
    @Override protected IStatus run(    IProgressMonitor monitor){
      senatorList.clear();
      Display.getDefault().syncExec(new Runnable(){
        @Override public void run(){
          selectedCongress=congresses[sCmbCongress.getSelectionIndex()];
        }
      }
);
      try {
        ArrayList<String> temp=new ArrayList<String>();
        temp.add(0,""String_Node_Str"");
        temp.add(1,""String_Node_Str"");
        temp.add(2,""String_Node_Str"");
        temp.add(3,""String_Node_Str"");
        if (selectedCongress.equals(""String_Node_Str"")) {
          for (          String s : allSenators)           temp.add(s);
        }
 else {
          if (previousSelectedCongress.isEmpty() || !previousSelectedCongress.equals(selectedCongress)) {
            availabileSenators=AvailableRecords.getSenators(selectedCongress);
            Display.getDefault().asyncExec(new Runnable(){
              @Override public void run(){
                if (selectedSenators != null)                 selectedSenators.clear();
                senatorTable.removeAll();
              }
            }
);
          }
          for (          String s : availabileSenators)           temp.add(s);
        }
        senatorList.addAll(temp);
        if (selectedSenators != null)         senatorList.removeAll(selectedSenators);
        Display.getDefault().asyncExec(new Runnable(){
          @Override public void run(){
            listDialog.refresh(senatorList.toArray());
          }
        }
);
        previousSelectedCongress=selectedCongress;
      }
 catch (      final IOException exception) {
        ConsoleView.printlInConsole(exception.toString());
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ErrorDialog.openError(Display.getDefault().getActiveShell(),""String_Node_Str"",""String_Node_Str"",new Status(IStatus.ERROR,CommonUiActivator.PLUGIN_ID,""String_Node_Str""));
          }
        }
);
      }
      return Status.OK_STATUS;
    }
  }
;
  listSenators.schedule();
  senatorList.add(""String_Node_Str"");
  listDialog.setElements(senatorList.toArray());
  listDialog.setMultipleSelection(true);
  if (listDialog.open() == Window.OK) {
    updateSenatorTable(listDialog.getResult());
  }
}","private void sHandleAdd(Shell shell){
  processElementSelectionDialog(shell);
  senatorList=new LinkedHashSet<String>();
  Job listSenators=new Job(""String_Node_Str""){
    String selectedCongress=""String_Node_Str"";
    @Override protected IStatus run(    IProgressMonitor monitor){
      senatorList.clear();
      Display.getDefault().syncExec(new Runnable(){
        @Override public void run(){
          selectedCongress=congresses[sCmbCongress.getSelectionIndex()];
        }
      }
);
      try {
        ArrayList<String> temp=new ArrayList<String>();
        temp.add(0,""String_Node_Str"");
        temp.add(1,""String_Node_Str"");
        temp.add(2,""String_Node_Str"");
        temp.add(3,""String_Node_Str"");
        if (selectedCongress.equals(""String_Node_Str"")) {
          for (          String s : allSenators)           temp.add(s);
        }
 else {
          if (previousSelectedCongress.isEmpty() || !previousSelectedCongress.equals(selectedCongress) || null == availabileSenators || availabileSenators.length == 0) {
            availabileSenators=AvailableRecords.getSenators(selectedCongress);
            Display.getDefault().asyncExec(new Runnable(){
              @Override public void run(){
                if (selectedSenators != null)                 selectedSenators.clear();
                senatorTable.removeAll();
              }
            }
);
          }
          for (          String s : availabileSenators)           temp.add(s);
        }
        senatorList.addAll(temp);
        if (selectedSenators != null)         senatorList.removeAll(selectedSenators);
        Display.getDefault().asyncExec(new Runnable(){
          @Override public void run(){
            listDialog.refresh(senatorList.toArray());
          }
        }
);
        previousSelectedCongress=selectedCongress;
      }
 catch (      final IOException exception) {
        ConsoleView.printlInConsole(exception.toString());
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ErrorDialog.openError(Display.getDefault().getActiveShell(),""String_Node_Str"",""String_Node_Str"",new Status(IStatus.ERROR,CommonUiActivator.PLUGIN_ID,""String_Node_Str""));
          }
        }
);
      }
      return Status.OK_STATUS;
    }
  }
;
  listSenators.schedule();
  senatorList.add(""String_Node_Str"");
  listDialog.setElements(senatorList.toArray());
  listDialog.setMultipleSelection(true);
  if (listDialog.open() == Window.OK) {
    updateSenatorTable(listDialog.getResult());
  }
}",0.987220447284345
168179,"private void rHandleAdd(Shell shell){
  processElementSelectionDialog(shell);
  representativeList=new LinkedHashSet<String>();
  Job listRepresentatives=new Job(""String_Node_Str""){
    String selectedCongress=""String_Node_Str"";
    @Override protected IStatus run(    IProgressMonitor monitor){
      representativeList.clear();
      Display.getDefault().syncExec(new Runnable(){
        @Override public void run(){
          selectedCongress=congresses[rCmbCongress.getSelectionIndex()];
        }
      }
);
      try {
        ArrayList<String> temp=new ArrayList<String>();
        temp.add(0,""String_Node_Str"");
        temp.add(1,""String_Node_Str"");
        temp.add(2,""String_Node_Str"");
        temp.add(3,""String_Node_Str"");
        if (selectedCongress.equals(""String_Node_Str"")) {
          for (          String s : allRepresentatives)           temp.add(s);
        }
 else {
          if (previousSelectedCongress.isEmpty() || !previousSelectedCongress.equals(selectedCongress)) {
            availableRepresentatives=AvailableRecords.getRepresentatives(selectedCongress);
            Display.getDefault().asyncExec(new Runnable(){
              @Override public void run(){
                if (selectedRepresentatives != null)                 selectedRepresentatives.clear();
                representativeTable.removeAll();
              }
            }
);
          }
          for (          String s : availableRepresentatives)           temp.add(s);
        }
        representativeList.addAll(temp);
        if (selectedRepresentatives != null)         representativeList.removeAll(selectedRepresentatives);
        Display.getDefault().asyncExec(new Runnable(){
          @Override public void run(){
            listDialog.refresh(representativeList.toArray());
          }
        }
);
        previousSelectedCongress=selectedCongress;
      }
 catch (      final IOException exception) {
        ConsoleView.printlInConsole(exception.toString());
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ErrorDialog.openError(Display.getDefault().getActiveShell(),""String_Node_Str"",""String_Node_Str"",new Status(IStatus.ERROR,CommonUiActivator.PLUGIN_ID,""String_Node_Str""));
          }
        }
);
      }
      return Status.OK_STATUS;
    }
  }
;
  listRepresentatives.schedule();
  representativeList.add(""String_Node_Str"");
  listDialog.setElements(representativeList.toArray());
  listDialog.setMultipleSelection(true);
  if (listDialog.open() == Window.OK) {
    updateRepresentativeTable(listDialog.getResult());
  }
}","private void rHandleAdd(Shell shell){
  processElementSelectionDialog(shell);
  representativeList=new LinkedHashSet<String>();
  Job listRepresentatives=new Job(""String_Node_Str""){
    String selectedCongress=""String_Node_Str"";
    @Override protected IStatus run(    IProgressMonitor monitor){
      representativeList.clear();
      Display.getDefault().syncExec(new Runnable(){
        @Override public void run(){
          selectedCongress=congresses[rCmbCongress.getSelectionIndex()];
        }
      }
);
      try {
        ArrayList<String> temp=new ArrayList<String>();
        temp.add(0,""String_Node_Str"");
        temp.add(1,""String_Node_Str"");
        temp.add(2,""String_Node_Str"");
        temp.add(3,""String_Node_Str"");
        if (selectedCongress.equals(""String_Node_Str"")) {
          for (          String s : allRepresentatives)           temp.add(s);
        }
 else {
          if (previousSelectedCongress.isEmpty() || !previousSelectedCongress.equals(selectedCongress) || null == availableRepresentatives || availableRepresentatives.length == 0) {
            availableRepresentatives=AvailableRecords.getRepresentatives(selectedCongress);
            Display.getDefault().asyncExec(new Runnable(){
              @Override public void run(){
                if (selectedRepresentatives != null)                 selectedRepresentatives.clear();
                representativeTable.removeAll();
              }
            }
);
          }
          for (          String s : availableRepresentatives)           temp.add(s);
        }
        representativeList.addAll(temp);
        if (selectedRepresentatives != null)         representativeList.removeAll(selectedRepresentatives);
        Display.getDefault().asyncExec(new Runnable(){
          @Override public void run(){
            listDialog.refresh(representativeList.toArray());
          }
        }
);
        previousSelectedCongress=selectedCongress;
      }
 catch (      final IOException exception) {
        ConsoleView.printlInConsole(exception.toString());
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ErrorDialog.openError(Display.getDefault().getActiveShell(),""String_Node_Str"",""String_Node_Str"",new Status(IStatus.ERROR,CommonUiActivator.PLUGIN_ID,""String_Node_Str""));
          }
        }
);
      }
      return Status.OK_STATUS;
    }
  }
;
  listRepresentatives.schedule();
  representativeList.add(""String_Node_Str"");
  listDialog.setElements(representativeList.toArray());
  listDialog.setMultipleSelection(true);
  if (listDialog.open() == Window.OK) {
    updateRepresentativeTable(listDialog.getResult());
  }
}",0.9856115107913668
168180,"public static String[] getRepresentatives(String congressString) throws IOException {
  congressString=congressString.replace(""String_Node_Str"",""String_Node_Str"");
  int congress=Integer.parseInt(congressString);
  System.out.println(""String_Node_Str"" + congress);
  Document doc=Jsoup.connect(""String_Node_Str"" + congress).timeout(10 * 1000).get();
  Elements repList=doc.getElementsByAttributeValue(""String_Node_Str"",""String_Node_Str"").select(""String_Node_Str"");
  String[] repArray=new String[repList.size() - 1];
  int index=0;
  for (  Element repItem : repList) {
    String repText=repItem.text().replace(""String_Node_Str"",""String_Node_Str"");
    if (repText.equals(""String_Node_Str""))     continue;
    repArray[index++]=repText;
  }
  representativeDet=RepresentativeDetails.getRepersentativeDetails();
  HashMap<String,String> newRepMap=new HashMap<String,String>();
  for (  String s : repArray) {
    String temp=new String();
    String tempRepName=(s.lastIndexOf('(') != -1) ? s.substring(0,s.lastIndexOf('(')) : s;
    if (tempRepName.charAt(tempRepName.length() - 1) == ' ')     tempRepName=tempRepName.substring(0,tempRepName.length() - 1);
    if (null == newRepMap.get(tempRepName)) {
      if (null != representativeDet.get(tempRepName)) {
        temp=tempRepName + ""String_Node_Str"" + representativeDet.get(tempRepName)+ ""String_Node_Str"";
      }
 else {
        int start=s.lastIndexOf('(') + 1;
        int end=s.lastIndexOf(')');
        if (end > start) {
          System.out.println(s + ""String_Node_Str"" + tempRepName+ ""String_Node_Str""+ s.substring(start,end)+ ""String_Node_Str"");
        }
        temp=s;
      }
      newRepMap.put(temp,s);
    }
  }
  congressRepMap.put(congressString,newRepMap);
  ArrayList<String> uniqueReps=new ArrayList<String>();
  uniqueReps.addAll(newRepMap.keySet());
  String[] tempReps=uniqueReps.toArray(new String[uniqueReps.size()]);
  Arrays.sort(tempReps);
  return tempReps;
}","public static String[] getRepresentatives(String congressString) throws IOException {
  congressString=congressString.replace(""String_Node_Str"",""String_Node_Str"");
  int congress=Integer.parseInt(congressString);
  System.out.println(""String_Node_Str"" + congress);
  Document doc=Jsoup.connect(""String_Node_Str"" + congress).timeout(10 * 1000).get();
  Elements repList=doc.getElementsByAttributeValue(""String_Node_Str"",""String_Node_Str"").select(""String_Node_Str"");
  String[] repArray=new String[repList.size() - 1];
  int index=0;
  for (  Element repItem : repList) {
    String repText=repItem.text().replace(""String_Node_Str"",""String_Node_Str"");
    if (repText.equals(""String_Node_Str""))     continue;
    repArray[index++]=repText;
  }
  representativeDet=RepresentativeDetails.getRepersentativeDetails();
  HashMap<String,String> newRepMap=new HashMap<String,String>();
  for (  String s : repArray) {
    String temp=new String();
    String tempRepName=(s.lastIndexOf('(') != -1) ? s.substring(0,s.lastIndexOf('(')) : s;
    if (tempRepName.charAt(tempRepName.length() - 1) == ' ')     tempRepName=tempRepName.substring(0,tempRepName.length() - 1);
    if (null == newRepMap.get(tempRepName)) {
      if (null != representativeDet.get(tempRepName)) {
        temp=tempRepName + ""String_Node_Str"" + representativeDet.get(tempRepName)+ ""String_Node_Str"";
      }
 else {
        temp=s;
      }
      newRepMap.put(temp,s);
    }
  }
  congressRepMap.put(congressString,newRepMap);
  ArrayList<String> uniqueReps=new ArrayList<String>();
  uniqueReps.addAll(newRepMap.keySet());
  String[] tempReps=uniqueReps.toArray(new String[uniqueReps.size()]);
  Arrays.sort(tempReps);
  return tempReps;
}",0.9331140350877192
168181,"public void searchRecords(int congress,String senText,String repText,int progressSize,String politicalAffiliation) throws IOException, NullPointerException {
  if ((null == senText || senText.isEmpty()) && (null == repText || repText.isEmpty()))   return;
  String memText=(null == senText || senText.isEmpty()) ? repText : senText;
  ConsoleView.printlInConsoleln(""String_Node_Str"" + memText);
  String memberDir=this.outputDir + File.separator + memText;
  if (!new File(memberDir).exists()) {
    new File(memberDir).mkdir();
  }
  if (null != monitor && !monitor.isCanceled()) {
    monitor.subTask(""String_Node_Str"" + memText + ""String_Node_Str"");
  }
  Document doc=Jsoup.connect(""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"" + congress,""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",repText).data(""String_Node_Str"",senText).data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",crawlSenateRecords).data(""String_Node_Str"",crawlHouseRepRecords).data(""String_Node_Str"",crawlExtension).data(""String_Node_Str"",crawlDailyDigest).data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",dateFrom).data(""String_Node_Str"",dateTo).data(""String_Node_Str"",sortType).data(""String_Node_Str"",""String_Node_Str"").userAgent(""String_Node_Str"").timeout(10 * 1000).post();
  Elements links=doc.getElementById(""String_Node_Str"").getElementsByTag(""String_Node_Str"");
  Elements relevantLinks=new Elements();
  for (  Element link : links) {
    if (!irrelevantLinks.contains(link.text()))     if (link.text().contains(""String_Node_Str"") || link.text().contains(""String_Node_Str"") || link.text().contains(""String_Node_Str"")|| link.text().contains(""String_Node_Str""))     relevantLinks.add(link);
  }
  String memberAttribs=memText.substring(memText.lastIndexOf('(') + 1,memText.length() - 1).trim();
  String memberState=memberAttribs;
  String district=memberAttribs;
  if (-1 != memberAttribs.indexOf('-')) {
    String[] temp=memberAttribs.split(""String_Node_Str"");
    memberState=temp[1];
    if (temp.length >= 3)     district=temp[2];
  }
  String lastName=memText.split(""String_Node_Str"")[0];
  String[] tempName=(memText.lastIndexOf('(') != -1) ? memText.substring(0,memText.lastIndexOf('(')).split(""String_Node_Str"") : lastName.split(""String_Node_Str"");
  String tempRepName=tempName[1] + ""String_Node_Str"" + tempName[0];
  if (relevantLinks.size() == 0) {
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    if (isSenate)     csvWriter.write(congress + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ tempRepName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ memberState+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
 else     csvWriter.write(congress + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ tempRepName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ memberState+ ""String_Node_Str""+ district+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    return;
  }
  links=relevantLinks;
  int count=0;
  int tempCount=0;
  for (  Element link : links) {
    if (null != monitor && monitor.isCanceled()) {
      monitor.subTask(""String_Node_Str"");
      return;
    }
    if (maxDocs == -1)     count=-2000;
    if (count++ >= maxDocs)     break;
    String recordDate=""String_Node_Str"";
    String recordType=""String_Node_Str"";
    if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
 else     if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
 else     if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
 else     if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
    Document record=Jsoup.connect(""String_Node_Str"" + link.attr(""String_Node_Str"")).timeout(10 * 1000).get();
    Elements tabLinks=record.getElementById(""String_Node_Str"").select(""String_Node_Str"");
    String extractLink=""String_Node_Str"";
    for (    Element tabLink : tabLinks) {
      if (tabLink.text().equals(""String_Node_Str"")) {
        extractLink=tabLink.attr(""String_Node_Str"");
        break;
      }
    }
    String[] contents=extract(extractLink,lastName);
    if (contents[1].length() == 0)     count--;
 else {
      String[] split=contents[0].split(""String_Node_Str"");
      String title=split[0].trim();
      title=title.replaceAll(""String_Node_Str"",""String_Node_Str"");
      title=title.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String shortTitle=title;
      if (title.length() > 15)       shortTitle=title.substring(0,15).trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
      shortTitle.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String fileName=congress + ""String_Node_Str"" + tempRepName+ ""String_Node_Str""+ memberAttribs+ ""String_Node_Str""+ recordDate+ ""String_Node_Str""+ shortTitle+ ""String_Node_Str""+ (System.currentTimeMillis() % 1000)+ ""String_Node_Str"";
      writeToFile(memberDir,fileName,contents);
      if (isSenate)       csvWriter.write(congress + ""String_Node_Str"" + recordDate+ ""String_Node_Str""+ tempRepName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ recordType+ ""String_Node_Str""+ memberState+ ""String_Node_Str""+ title+ ""String_Node_Str""+ fileName);
 else       csvWriter.write(congress + ""String_Node_Str"" + recordDate+ ""String_Node_Str""+ tempRepName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ recordType+ ""String_Node_Str""+ memberState+ ""String_Node_Str""+ district+ ""String_Node_Str""+ title+ ""String_Node_Str""+ fileName);
      csvWriter.newLine();
      csvWriter.flush();
    }
    tempCount++;
    tempCount=updateWork(maxDocs,links.size(),progressSize,tempCount);
  }
}","public void searchRecords(int congress,String senText,String repText,int progressSize,String politicalAffiliation) throws IOException, NullPointerException {
  if ((null == senText || senText.isEmpty()) && (null == repText || repText.isEmpty()))   return;
  String memText=(null == senText || senText.isEmpty()) ? repText : senText;
  ConsoleView.printlInConsoleln(""String_Node_Str"" + memText);
  String memberDir=this.outputDir + File.separator + memText;
  if (!new File(memberDir).exists()) {
    new File(memberDir).mkdir();
  }
  if (null != monitor && !monitor.isCanceled()) {
    monitor.subTask(""String_Node_Str"" + memText + ""String_Node_Str"");
  }
  Document doc=Jsoup.connect(""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"" + congress,""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",repText).data(""String_Node_Str"",senText).data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",crawlSenateRecords).data(""String_Node_Str"",crawlHouseRepRecords).data(""String_Node_Str"",crawlExtension).data(""String_Node_Str"",crawlDailyDigest).data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",dateFrom).data(""String_Node_Str"",dateTo).data(""String_Node_Str"",sortType).data(""String_Node_Str"",""String_Node_Str"").userAgent(""String_Node_Str"").timeout(10 * 1000).post();
  Elements links=doc.getElementById(""String_Node_Str"").getElementsByTag(""String_Node_Str"");
  Elements relevantLinks=new Elements();
  for (  Element link : links) {
    if (!irrelevantLinks.contains(link.text()))     if (link.text().contains(""String_Node_Str"") || link.text().contains(""String_Node_Str"") || link.text().contains(""String_Node_Str"")|| link.text().contains(""String_Node_Str""))     relevantLinks.add(link);
  }
  String memberAttribs=memText.substring(memText.lastIndexOf('(') + 1,memText.length() - 1).trim();
  String memberState=memberAttribs;
  String district=""String_Node_Str"";
  if (-1 != memberAttribs.indexOf('-')) {
    String[] temp=memberAttribs.split(""String_Node_Str"");
    memberState=temp[1];
    if (temp.length >= 3)     district=temp[2];
  }
  String lastName=memText.split(""String_Node_Str"")[0];
  String[] tempName=(memText.lastIndexOf('(') != -1) ? memText.substring(0,memText.lastIndexOf('(')).split(""String_Node_Str"") : lastName.split(""String_Node_Str"");
  String tempRepName=tempName[1] + ""String_Node_Str"" + tempName[0];
  if (relevantLinks.size() == 0) {
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    if (isSenate)     csvWriter.write(congress + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ tempRepName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ memberState+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
 else     csvWriter.write(congress + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ tempRepName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ memberState+ ""String_Node_Str""+ district+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    csvWriter.newLine();
    csvWriter.flush();
    return;
  }
  links=relevantLinks;
  int count=0;
  int tempCount=0;
  for (  Element link : links) {
    if (null != monitor && monitor.isCanceled()) {
      monitor.subTask(""String_Node_Str"");
      return;
    }
    if (maxDocs == -1)     count=-2000;
    if (count++ >= maxDocs)     break;
    String recordDate=""String_Node_Str"";
    String recordType=""String_Node_Str"";
    if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
 else     if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
 else     if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
 else     if (link.text().contains(""String_Node_Str"")) {
      recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
      recordType=""String_Node_Str"";
    }
    Document record=Jsoup.connect(""String_Node_Str"" + link.attr(""String_Node_Str"")).timeout(10 * 1000).get();
    Elements tabLinks=record.getElementById(""String_Node_Str"").select(""String_Node_Str"");
    String extractLink=""String_Node_Str"";
    for (    Element tabLink : tabLinks) {
      if (tabLink.text().equals(""String_Node_Str"")) {
        extractLink=tabLink.attr(""String_Node_Str"");
        break;
      }
    }
    String[] contents=extract(extractLink,lastName);
    if (contents[1].length() == 0)     count--;
 else {
      String[] split=contents[0].split(""String_Node_Str"");
      String title=split[0].trim();
      title=title.replaceAll(""String_Node_Str"",""String_Node_Str"");
      title=title.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String shortTitle=title;
      if (title.length() > 15)       shortTitle=title.substring(0,15).trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
      shortTitle.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String fileName=congress + ""String_Node_Str"" + tempRepName+ ""String_Node_Str""+ memberAttribs+ ""String_Node_Str""+ recordDate+ ""String_Node_Str""+ shortTitle+ ""String_Node_Str""+ (System.currentTimeMillis() % 1000)+ ""String_Node_Str"";
      writeToFile(memberDir,fileName,contents);
      if (isSenate)       csvWriter.write(congress + ""String_Node_Str"" + recordDate+ ""String_Node_Str""+ tempRepName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ recordType+ ""String_Node_Str""+ memberState+ ""String_Node_Str""+ title+ ""String_Node_Str""+ fileName);
 else       csvWriter.write(congress + ""String_Node_Str"" + recordDate+ ""String_Node_Str""+ tempRepName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ recordType+ ""String_Node_Str""+ memberState+ ""String_Node_Str""+ district+ ""String_Node_Str""+ title+ ""String_Node_Str""+ fileName);
      csvWriter.newLine();
      csvWriter.flush();
    }
    tempCount++;
    tempCount=updateWork(maxDocs,links.size(),progressSize,tempCount);
  }
}",0.994166915943763
168182,"private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (WeightedWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      final String stopWordPath=CommonUiActivator.getDefault().getPreferenceStore().getString(IPreprocessorSettingsConstant.STOP_PATH);
      final String outputPath=layoutData.getOutputLabel().getText();
      String fileName=""String_Node_Str"";
      DateFormat df=new SimpleDateFormat(""String_Node_Str"");
      final Date dateobj=new Date();
      if (weightedWordCountButton.getSelection()) {
        fileName=""String_Node_Str"" + fileName + ""String_Node_Str""+ df.format(dateobj);
      }
 else {
        fileName=""String_Node_Str"" + fileName + ""String_Node_Str""+ df.format(dateobj);
      }
      final File oFile=new File(outputPath + File.separator + fileName+ ""String_Node_Str"");
      final File sFile=new File(outputPath + File.separator + fileName+ ""String_Node_Str"");
      final List<String> inputFiles=inputLayoutData.getSelectedFiles();
      final List<String> dictionaryFiles=dictLayoutData.getSelectedFiles();
      final boolean isLiwcStemming=liwcStemming.getSelection();
      final boolean isSnowBall=snowballStemming.getSelection();
      final boolean isSpss=spssRawFile.getSelection();
      final boolean isWdist=wordDistributionFile.getSelection();
      final boolean isStemDic=stemEnabled.getSelection();
      final boolean isPreprocess=stopWordPathEnabled.getSelection();
      wordCountJob=new Job(""String_Node_Str""){
        private Preprocess preprocessTask;
        private String dirPath;
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          List<File> selectedFiles=new ArrayList<File>();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",inputFiles.size() + 20);
          try {
            Display.getDefault().syncExec(new Runnable(){
              @Override public void run(){
                if (weightedWordCountButton.getSelection()) {
                  wordCountController=new WordCountApi(true);
                }
 else {
                  wordCountController=new WordCountApi(false);
                }
              }
            }
);
            if (isPreprocess) {
              monitor.subTask(""String_Node_Str"");
              preprocessTask=new Preprocess(""String_Node_Str"");
              try {
                dirPath=preprocessTask.doPreprocessing(inputFiles,""String_Node_Str"");
                File[] inputFile=new File(dirPath).listFiles();
                for (                File iFile : inputFile) {
                  selectedFiles.add(iFile);
                }
              }
 catch (              IOException e) {
                e.printStackTrace();
              }
            }
 else {
              for (              String filepath : inputFiles) {
                if ((new File(filepath).isDirectory())) {
                  continue;
                }
                selectedFiles.add(new File(filepath));
              }
            }
            wordCountController.wordCount(monitor,selectedFiles,dictionaryFiles,stopWordPath,outputPath,""String_Node_Str"",true,isLiwcStemming,isSnowBall,isSpss,isWdist,isStemDic,oFile,sFile,dateobj);
          }
 catch (          IOException ioe) {
            ioe.printStackTrace();
          }
          TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
          monitor.subTask(""String_Node_Str"");
          if (isPreprocess)           preprocessTask.clean();
          TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      wordCountJob.setUser(true);
      if (canProceed()) {
        wordCountJob.schedule();
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (WeightedWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}","private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (WeightedWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      final String stopWordPath=CommonUiActivator.getDefault().getPreferenceStore().getString(IPreprocessorSettingsConstant.STOP_PATH);
      final String outputPath=layoutData.getOutputLabel().getText();
      String fileName=""String_Node_Str"";
      DateFormat df=new SimpleDateFormat(""String_Node_Str"");
      final Date dateobj=new Date();
      if (weightedWordCountButton.getSelection()) {
        fileName=""String_Node_Str"" + fileName + ""String_Node_Str""+ df.format(dateobj);
      }
 else {
        fileName=""String_Node_Str"" + fileName + ""String_Node_Str""+ df.format(dateobj);
      }
      final File oFile=new File(outputPath + File.separator + fileName+ ""String_Node_Str"");
      final File sFile=new File(outputPath + File.separator + fileName+ ""String_Node_Str"");
      final List<String> inputFiles=inputLayoutData.getSelectedFiles();
      final List<String> dictionaryFiles=dictLayoutData.getSelectedFiles();
      final boolean isLiwcStemming=liwcStemming.getSelection();
      final boolean isSnowBall=snowballStemming.getSelection();
      final boolean isSpss=spssRawFile.getSelection();
      final boolean isWdist=wordDistributionFile.getSelection();
      final boolean isStemDic=stemEnabled.getSelection();
      final boolean isPreprocess=stopWordPathEnabled.getSelection();
      wordCountJob=new Job(""String_Node_Str""){
        private Preprocess preprocessTask;
        private String dirPath;
        @Override protected IStatus run(        IProgressMonitor monitor){
          TacitFormComposite.setConsoleViewInFocus();
          List<File> selectedFiles=new ArrayList<File>();
          TacitFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",inputFiles.size() + 20);
          try {
            Display.getDefault().syncExec(new Runnable(){
              @Override public void run(){
                if (weightedWordCountButton.getSelection()) {
                  wordCountController=new WordCountApi(true);
                }
 else {
                  wordCountController=new WordCountApi(false);
                }
              }
            }
);
            if (isPreprocess) {
              monitor.subTask(""String_Node_Str"");
              preprocessTask=new Preprocess(""String_Node_Str"");
              try {
                dirPath=preprocessTask.doPreprocessing(inputFiles,""String_Node_Str"");
                File[] inputFile=new File(dirPath).listFiles();
                for (                File iFile : inputFile) {
                  selectedFiles.add(iFile);
                }
              }
 catch (              IOException e) {
                e.printStackTrace();
              }
            }
 else {
              for (              String filepath : inputFiles) {
                if ((new File(filepath).isDirectory())) {
                  continue;
                }
                selectedFiles.add(new File(filepath));
              }
            }
            wordCountController.wordCount(monitor,selectedFiles,dictionaryFiles,isPreprocess ? stopWordPath : ""String_Node_Str"",outputPath,""String_Node_Str"",true,isLiwcStemming,isSnowBall,isSpss,isWdist,isStemDic,oFile,sFile,dateobj);
          }
 catch (          IOException ioe) {
            ioe.printStackTrace();
          }
          TacitFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
          monitor.subTask(""String_Node_Str"");
          if (isPreprocess)           preprocessTask.clean();
          TacitFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      wordCountJob.setUser(true);
      if (canProceed()) {
        wordCountJob.schedule();
      }
    }
  }
);
  Action helpAction=new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (WeightedWordCountImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    @Override public void run(){
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(""String_Node_Str"");
    }
  }
;
  mgr.add(helpAction);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(helpAction,""String_Node_Str"");
  PlatformUI.getWorkbench().getHelpSystem().setHelp(form,""String_Node_Str"");
  form.getToolBarManager().update(true);
}",0.9963995473716696
168183,"public int[] process(String line,HashMap<String,Integer> map){
  int ret[]=new int[3];
  int numWords=0;
  int sixltr=0;
  int numerals=0;
  Matcher matcher=pattern.matcher(line);
  if (doLower)   line=line.toLowerCase();
  if (phraseDetect) {
    for (    String key : phraseLookup.keySet()) {
      Pattern p, justp;
      if (key.endsWith(""String_Node_Str"")) {
        p=Pattern.compile(""String_Node_Str"" + key + ""String_Node_Str"");
        justp=Pattern.compile(key + ""String_Node_Str"");
        key=key.substring(0,key.length() - 1);
      }
 else {
        p=Pattern.compile(""String_Node_Str"" + key + ""String_Node_Str"");
        justp=Pattern.compile(key + ""String_Node_Str"");
      }
      int wordsInPhrase=key.split(""String_Node_Str"").length;
      Matcher m=p.matcher(line);
      ArrayList<Integer> indexes=new ArrayList<Integer>();
      while (m.find()) {
        String match=m.group();
        indexes.add(m.start() + 1);
        indexes.add(m.end());
        numWords=numWords + wordsInPhrase;
        sixltr=sixltr + bigWords(match);
        Object value=map.get(key);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(key,i + wordsInPhrase);
        }
 else {
          map.put(key,wordsInPhrase);
        }
      }
      for (int i=0; i < indexes.size(); i=i + 2) {
        line=line.substring(0,indexes.get(i)) + line.substring(indexes.get(i + 1));
        int diff=indexes.get(i + 1) - indexes.get(i);
        for (int j=0; j < indexes.size(); j++)         indexes.set(j,indexes.get(j) - diff);
      }
      indexes.clear();
      Matcher m2=justp.matcher(line);
      while (m2.find()) {
        String match=m2.group();
        indexes.add(m2.start());
        indexes.add(m2.end());
        numWords=numWords + wordsInPhrase;
        sixltr=sixltr + bigWords(match);
        Object value=map.get(key);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(key,i + wordsInPhrase);
        }
 else {
          map.put(key,wordsInPhrase);
        }
      }
      for (int i=0; i < indexes.size(); i=i + 2) {
        line=line.substring(0,indexes.get(i)) + line.substring(indexes.get(i + 1));
        int diff=indexes.get(i + 1) - indexes.get(i);
        for (int j=0; j < indexes.size(); j++)         indexes.set(j,indexes.get(j) - diff);
      }
    }
  }
  StringTokenizer st=new StringTokenizer(line,delimiters);
  String currentWord=null;
  if (st.hasMoreTokens())   currentWord=trimChars(st.nextToken(),punctuations);
  do {
    String nextWord=null;
    if (st.hasMoreTokens())     nextWord=trimChars(st.nextToken(),punctuations);
    if (currentWord == null || currentWord.equals(""String_Node_Str"")) {
      currentWord=nextWord;
      continue;
    }
    matcher=pattern.matcher(currentWord);
    while (matcher.find()) {
      numerals++;
    }
    if (doSnowballStemming) {
      stemmer.setCurrent(currentWord);
      String stemmedWord=""String_Node_Str"";
      if (stemmer.stem())       stemmedWord=stemmer.getCurrent();
      if (!stemmedWord.equals(""String_Node_Str""))       currentWord=stemmedWord;
    }
    if (doStopWords)     if (stopWordSet.contains(currentWord))     continue;
    Matcher word=regularPattern.matcher(currentWord);
    if (word.find()) {
      numWords=numWords + 1;
      if (currentWord.length() > 6) {
        sixltr=sixltr + 1;
      }
    }
    boolean treatAsOne=true;
    Matcher dh=doubleHyphenPattern.matcher(currentWord);
    if (dh.find()) {
      currentWord=currentWord.replaceFirst(""String_Node_Str"",""String_Node_Str"").toLowerCase();
      if (categorizer.query(currentWord) != null && !categorizer.checkHyphen(currentWord)) {
        Object value=map.get(currentWord);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(currentWord,i + 1);
        }
 else {
          map.put(currentWord,1);
        }
        String[] words=currentWord.split(""String_Node_Str"",2);
        int hyphened=words.length;
        weirdDashCount=weirdDashCount + hyphened;
      }
 else {
        String[] words=currentWord.split(""String_Node_Str"",2);
        int hyphened=words.length - 1;
        if (categorizer.query(currentWord) != null) {
          Object value=map.get(currentWord);
          if (value != null) {
            int i=((Integer)value).intValue();
            map.put(words[0],i + 1);
          }
 else {
            map.put(words[0],1);
          }
          numWords=numWords + hyphened;
          treatAsOne=true;
        }
 else {
          numWords=numWords + hyphened;
          if (categorizer.query(words[0]) != null) {
            Object value=map.get(words[0]);
            if (value != null) {
              int i=((Integer)value).intValue();
              map.put(words[0],i + 1);
            }
 else {
              map.put(words[0],1);
            }
          }
          treatAsOne=false;
        }
        if (treatAsOne)         weirdDashCount++;
 else         weirdDashCount=weirdDashCount + hyphened;
      }
    }
 else {
      Matcher cm=compoundPattern.matcher(currentWord);
      if (cm.find()) {
        String[] words=currentWord.split(""String_Node_Str"");
        int hyphened=-1;
        for (        String s : words) {
          if (s == null || s.equals(""String_Node_Str""))           continue;
          hyphened++;
        }
        if (categorizer.query(currentWord.toLowerCase()) == null) {
          numWords=numWords + hyphened;
          treatAsOne=false;
        }
 else         weirdDashCount=weirdDashCount + 1;
      }
      if (treatAsOne) {
        Object value=map.get(currentWord);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(currentWord,i + 1);
        }
 else {
          map.put(currentWord,1);
        }
      }
 else {
        String[] parts=currentWord.split(""String_Node_Str"");
        for (        String part : parts) {
          if (part == null || part.equals(""String_Node_Str""))           continue;
          Object value=map.get(part);
          if (value != null) {
            int i=((Integer)value).intValue();
            map.put(part,i + 1);
          }
 else {
            map.put(part,1);
          }
        }
      }
    }
    currentWord=nextWord;
  }
 while (st.hasMoreTokens() || null != currentWord);
  ret[0]=numWords;
  ret[1]=sixltr;
  ret[2]=numerals;
  return ret;
}","public int[] process(String line,HashMap<String,Integer> map){
  int ret[]=new int[3];
  int numWords=0;
  int sixltr=0;
  int numerals=0;
  Matcher matcher=pattern.matcher(line);
  if (doLower)   line=line.toLowerCase();
  if (phraseDetect) {
    for (    String key : phraseLookup.keySet()) {
      Pattern p, justp;
      if (key.endsWith(""String_Node_Str"")) {
        p=Pattern.compile(""String_Node_Str"" + key + ""String_Node_Str"");
        justp=Pattern.compile(key + ""String_Node_Str"");
        key=key.substring(0,key.length() - 1);
      }
 else {
        p=Pattern.compile(""String_Node_Str"" + key + ""String_Node_Str"");
        justp=Pattern.compile(key + ""String_Node_Str"");
      }
      int wordsInPhrase=key.split(""String_Node_Str"").length;
      Matcher m=p.matcher(line);
      ArrayList<Integer> indexes=new ArrayList<Integer>();
      while (m.find()) {
        String match=m.group();
        indexes.add(m.start() + 1);
        indexes.add(m.end());
        numWords=numWords + wordsInPhrase;
        sixltr=sixltr + bigWords(match);
        Object value=map.get(key);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(key,i + wordsInPhrase);
        }
 else {
          map.put(key,wordsInPhrase);
        }
      }
      for (int i=0; i < indexes.size(); i=i + 2) {
        line=line.substring(0,indexes.get(i)) + line.substring(indexes.get(i + 1));
        int diff=indexes.get(i + 1) - indexes.get(i);
        for (int j=0; j < indexes.size(); j++)         indexes.set(j,indexes.get(j) - diff);
      }
      indexes.clear();
      Matcher m2=justp.matcher(line);
      while (m2.find()) {
        String match=m2.group();
        indexes.add(m2.start());
        indexes.add(m2.end());
        numWords=numWords + wordsInPhrase;
        sixltr=sixltr + bigWords(match);
        Object value=map.get(key);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(key,i + wordsInPhrase);
        }
 else {
          map.put(key,wordsInPhrase);
        }
      }
      for (int i=0; i < indexes.size(); i=i + 2) {
        line=line.substring(0,indexes.get(i)) + line.substring(indexes.get(i + 1));
        int diff=indexes.get(i + 1) - indexes.get(i);
        for (int j=0; j < indexes.size(); j++)         indexes.set(j,indexes.get(j) - diff);
      }
    }
  }
  StringTokenizer st=new StringTokenizer(line,delimiters);
  String currentWord=null;
  if (st.hasMoreTokens())   currentWord=trimChars(st.nextToken(),punctuations);
  do {
    String nextWord=null;
    if (st.hasMoreTokens())     nextWord=trimChars(st.nextToken(),punctuations);
    if (currentWord == null || currentWord.equals(""String_Node_Str"")) {
      currentWord=nextWord;
      continue;
    }
    matcher=pattern.matcher(currentWord);
    while (matcher.find()) {
      numerals++;
    }
    if (doSnowballStemming) {
      stemmer.setCurrent(currentWord);
      String stemmedWord=""String_Node_Str"";
      if (stemmer.stem())       stemmedWord=stemmer.getCurrent();
      if (!stemmedWord.equals(""String_Node_Str""))       currentWord=stemmedWord;
    }
    if (doStopWords)     if (stopWordSet.contains(currentWord)) {
      currentWord=nextWord;
      continue;
    }
    Matcher word=regularPattern.matcher(currentWord);
    if (word.find()) {
      numWords=numWords + 1;
      if (currentWord.length() > 6) {
        sixltr=sixltr + 1;
      }
    }
    boolean treatAsOne=true;
    Matcher dh=doubleHyphenPattern.matcher(currentWord);
    if (dh.find()) {
      currentWord=currentWord.replaceFirst(""String_Node_Str"",""String_Node_Str"").toLowerCase();
      if (categorizer.query(currentWord) != null && !categorizer.checkHyphen(currentWord)) {
        Object value=map.get(currentWord);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(currentWord,i + 1);
        }
 else {
          map.put(currentWord,1);
        }
        String[] words=currentWord.split(""String_Node_Str"",2);
        int hyphened=words.length;
        weirdDashCount=weirdDashCount + hyphened;
      }
 else {
        String[] words=currentWord.split(""String_Node_Str"",2);
        int hyphened=words.length - 1;
        if (categorizer.query(currentWord) != null) {
          Object value=map.get(currentWord);
          if (value != null) {
            int i=((Integer)value).intValue();
            map.put(words[0],i + 1);
          }
 else {
            map.put(words[0],1);
          }
          numWords=numWords + hyphened;
          treatAsOne=true;
        }
 else {
          numWords=numWords + hyphened;
          if (categorizer.query(words[0]) != null) {
            Object value=map.get(words[0]);
            if (value != null) {
              int i=((Integer)value).intValue();
              map.put(words[0],i + 1);
            }
 else {
              map.put(words[0],1);
            }
          }
          treatAsOne=false;
        }
        if (treatAsOne)         weirdDashCount++;
 else         weirdDashCount=weirdDashCount + hyphened;
      }
    }
 else {
      Matcher cm=compoundPattern.matcher(currentWord);
      if (cm.find()) {
        String[] words=currentWord.split(""String_Node_Str"");
        int hyphened=-1;
        for (        String s : words) {
          if (s == null || s.equals(""String_Node_Str""))           continue;
          hyphened++;
        }
        if (categorizer.query(currentWord.toLowerCase()) == null) {
          numWords=numWords + hyphened;
          treatAsOne=false;
        }
 else         weirdDashCount=weirdDashCount + 1;
      }
      if (treatAsOne) {
        Object value=map.get(currentWord);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(currentWord,i + 1);
        }
 else {
          map.put(currentWord,1);
        }
      }
 else {
        String[] parts=currentWord.split(""String_Node_Str"");
        for (        String part : parts) {
          if (part == null || part.equals(""String_Node_Str""))           continue;
          Object value=map.get(part);
          if (value != null) {
            int i=((Integer)value).intValue();
            map.put(part,i + 1);
          }
 else {
            map.put(part,1);
          }
        }
      }
    }
    currentWord=nextWord;
  }
 while (st.hasMoreTokens() || null != currentWord);
  ret[0]=numWords;
  ret[1]=sixltr;
  ret[2]=numerals;
  return ret;
}",0.9949992186279106
168184,"public void searchSenatorRecords(int congress,String senText,int progressSize,String politicalAffiliation) throws IOException, NullPointerException {
  ConsoleView.printlInConsoleln(""String_Node_Str"" + senText);
  String senatorDir=this.outputDir + File.separator + senText;
  if (!new File(senatorDir).exists()) {
    new File(senatorDir).mkdir();
  }
  if (null != monitor && !monitor.isCanceled()) {
    monitor.subTask(""String_Node_Str"" + senText + ""String_Node_Str"");
  }
  Document doc=Jsoup.connect(""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"" + congress,""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",senText).data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",dateFrom).data(""String_Node_Str"",dateTo).data(""String_Node_Str"",sortType).data(""String_Node_Str"",""String_Node_Str"").userAgent(""String_Node_Str"").timeout(10 * 1000).post();
  Elements links=doc.getElementById(""String_Node_Str"").getElementsByTag(""String_Node_Str"");
  Elements relevantLinks=new Elements();
  for (  Element link : links) {
    if (!irrelevantLinks.contains(link.text()))     if (link.text().contains(""String_Node_Str""))     relevantLinks.add(link);
  }
  if (relevantLinks.size() == 0) {
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    return;
  }
  links=relevantLinks;
  String senatorAttribs=senText.split(""String_Node_Str"")[1].replace(""String_Node_Str"",""String_Node_Str"").trim();
  int count=0;
  int tempCount=0;
  for (  Element link : links) {
    if (null != monitor && monitor.isCanceled()) {
      monitor.subTask(""String_Node_Str"");
      return;
    }
    if (maxDocs == -1)     count=-2000;
    if (count++ >= maxDocs)     break;
    String recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
    Document record=Jsoup.connect(""String_Node_Str"" + link.attr(""String_Node_Str"")).timeout(10 * 1000).get();
    Elements tabLinks=record.getElementById(""String_Node_Str"").select(""String_Node_Str"");
    String extractLink=""String_Node_Str"";
    for (    Element tabLink : tabLinks) {
      if (tabLink.text().equals(""String_Node_Str"")) {
        extractLink=tabLink.attr(""String_Node_Str"");
        break;
      }
    }
    String lastName=senText.split(""String_Node_Str"")[0];
    String[] contents=extract(extractLink,lastName);
    if (contents[1].length() == 0)     count--;
 else {
      String[] split=contents[0].split(""String_Node_Str"");
      String title=split[0].trim();
      title=title.replaceAll(""String_Node_Str"",""String_Node_Str"");
      title=title.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String shortTitle=title;
      if (title.length() > 15)       shortTitle=title.substring(0,15).trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
      String fileName=congress + ""String_Node_Str"" + lastName+ ""String_Node_Str""+ senatorAttribs+ ""String_Node_Str""+ recordDate+ ""String_Node_Str""+ shortTitle+ ""String_Node_Str""+ (System.currentTimeMillis() % 1000)+ ""String_Node_Str"";
      writeToFile(senatorDir,fileName,contents);
      csvWriter.write(congress + ""String_Node_Str"" + recordDate+ ""String_Node_Str""+ lastName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ senatorAttribs+ ""String_Node_Str""+ title+ ""String_Node_Str""+ fileName);
      csvWriter.newLine();
      csvWriter.flush();
    }
    tempCount++;
    tempCount=updateWork(maxDocs,links.size(),progressSize,tempCount);
  }
}","public void searchSenatorRecords(int congress,String senText,int progressSize,String politicalAffiliation) throws IOException, NullPointerException {
  ConsoleView.printlInConsoleln(""String_Node_Str"" + senText);
  if (null == senText)   return;
  String senatorDir=this.outputDir + File.separator + senText;
  if (!new File(senatorDir).exists()) {
    new File(senatorDir).mkdir();
  }
  if (null != monitor && !monitor.isCanceled()) {
    monitor.subTask(""String_Node_Str"" + senText + ""String_Node_Str"");
  }
  Document doc=Jsoup.connect(""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"" + congress,""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",senText).data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",""String_Node_Str"").data(""String_Node_Str"",dateFrom).data(""String_Node_Str"",dateTo).data(""String_Node_Str"",sortType).data(""String_Node_Str"",""String_Node_Str"").userAgent(""String_Node_Str"").timeout(10 * 1000).post();
  Elements links=doc.getElementById(""String_Node_Str"").getElementsByTag(""String_Node_Str"");
  Elements relevantLinks=new Elements();
  for (  Element link : links) {
    if (!irrelevantLinks.contains(link.text()))     if (link.text().contains(""String_Node_Str""))     relevantLinks.add(link);
  }
  if (relevantLinks.size() == 0) {
    ConsoleView.printlInConsoleln(""String_Node_Str"");
    return;
  }
  links=relevantLinks;
  String senatorAttribs=senText.split(""String_Node_Str"")[1].replace(""String_Node_Str"",""String_Node_Str"").trim();
  String senatorState=senatorAttribs;
  if (-1 != senatorAttribs.indexOf('-')) {
    senatorState=senatorAttribs.split(""String_Node_Str"")[1];
  }
  int count=0;
  int tempCount=0;
  for (  Element link : links) {
    if (null != monitor && monitor.isCanceled()) {
      monitor.subTask(""String_Node_Str"");
      return;
    }
    if (maxDocs == -1)     count=-2000;
    if (count++ >= maxDocs)     break;
    String recordDate=link.text().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
    Document record=Jsoup.connect(""String_Node_Str"" + link.attr(""String_Node_Str"")).timeout(10 * 1000).get();
    Elements tabLinks=record.getElementById(""String_Node_Str"").select(""String_Node_Str"");
    String extractLink=""String_Node_Str"";
    for (    Element tabLink : tabLinks) {
      if (tabLink.text().equals(""String_Node_Str"")) {
        extractLink=tabLink.attr(""String_Node_Str"");
        break;
      }
    }
    String lastName=senText.split(""String_Node_Str"")[0];
    String[] contents=extract(extractLink,lastName);
    if (contents[1].length() == 0)     count--;
 else {
      String[] split=contents[0].split(""String_Node_Str"");
      String title=split[0].trim();
      title=title.replaceAll(""String_Node_Str"",""String_Node_Str"");
      title=title.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String shortTitle=title;
      if (title.length() > 15)       shortTitle=title.substring(0,15).trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
      String fileName=congress + ""String_Node_Str"" + lastName+ ""String_Node_Str""+ senatorAttribs+ ""String_Node_Str""+ recordDate+ ""String_Node_Str""+ shortTitle+ ""String_Node_Str""+ (System.currentTimeMillis() % 1000)+ ""String_Node_Str"";
      writeToFile(senatorDir,fileName,contents);
      csvWriter.write(congress + ""String_Node_Str"" + recordDate+ ""String_Node_Str""+ lastName+ ""String_Node_Str""+ politicalAffiliation+ ""String_Node_Str""+ senatorState+ ""String_Node_Str""+ title+ ""String_Node_Str""+ fileName);
      csvWriter.newLine();
      csvWriter.flush();
    }
    tempCount++;
    tempCount=updateWork(maxDocs,links.size(),progressSize,tempCount);
  }
}",0.975107519874886
168185,"private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (ZlabelLdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
      final int noOfTopics=Integer.valueOf(topics.getText()).intValue();
      final boolean isPreprocess=preprocessEnabled.getSelection();
      final String inputPath=inputLayoutData.getOutputLabel().getText();
      final String outputPath=layoutData.getOutputLabel().getText();
      final String seedFilePath=seedFileText.getText();
      NlputilsFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          NlputilsFormComposite.setConsoleViewInFocus();
          NlputilsFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          List<String> inputFiles=new ArrayList<String>();
          String topicModelDirPath=inputPath;
          Preprocess preprocessTask=null;
          if (isPreprocess) {
            monitor.subTask(""String_Node_Str"");
            preprocessTask=new Preprocess(""String_Node_Str"");
            try {
              File[] inputFile=new File(inputPath).listFiles();
              for (              File iFile : inputFile) {
                inputFiles.add(iFile.toString());
              }
              topicModelDirPath=preprocessTask.doPreprocessing(inputFiles,""String_Node_Str"");
            }
 catch (            IOException e) {
              NlputilsFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              e.printStackTrace();
            }
            monitor.worked(10);
          }
          long startTime=System.currentTimeMillis();
          ZlabelTopicModelAnalysis zlda=new ZlabelTopicModelAnalysis(new SubProgressMonitor(monitor,70));
          monitor.subTask(""String_Node_Str"");
          zlda.invokeLDA(topicModelDirPath,seedFilePath,noOfTopics,outputPath);
          System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
          NlputilsFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          if (monitor.isCanceled()) {
            NlputilsFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return Status.CANCEL_STATUS;
          }
          monitor.subTask(""String_Node_Str"");
          preprocessTask.clean();
          monitor.worked(10);
          monitor.done();
          NlputilsFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
          ;
          NlputilsFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      if (canProceedJob()) {
        job.schedule();
      }
 else {
        NlputilsFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
      }
    }
  }
);
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (ZlabelLdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
    }
  }
);
  form.getToolBarManager().update(true);
}","private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (ZlabelLdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
      final int noOfTopics=Integer.valueOf(topics.getText()).intValue();
      final boolean isPreprocess=preprocessEnabled.getSelection();
      final String inputPath=inputLayoutData.getOutputLabel().getText();
      final String outputPath=layoutData.getOutputLabel().getText();
      final String seedFilePath=seedFileText.getText();
      NlputilsFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          NlputilsFormComposite.setConsoleViewInFocus();
          NlputilsFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          List<String> inputFiles=new ArrayList<String>();
          String topicModelDirPath=inputPath;
          Preprocess preprocessTask=null;
          if (isPreprocess) {
            monitor.subTask(""String_Node_Str"");
            preprocessTask=new Preprocess(""String_Node_Str"");
            try {
              File[] inputFile=new File(inputPath).listFiles();
              for (              File iFile : inputFile) {
                inputFiles.add(iFile.toString());
              }
              topicModelDirPath=preprocessTask.doPreprocessing(inputFiles,""String_Node_Str"");
            }
 catch (            IOException e) {
              NlputilsFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
              e.printStackTrace();
            }
            monitor.worked(10);
          }
          long startTime=System.currentTimeMillis();
          ZlabelTopicModelAnalysis zlda=new ZlabelTopicModelAnalysis(new SubProgressMonitor(monitor,70));
          monitor.subTask(""String_Node_Str"");
          zlda.invokeLDA(topicModelDirPath,seedFilePath,noOfTopics,outputPath);
          System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
          NlputilsFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          if (monitor.isCanceled()) {
            NlputilsFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return Status.CANCEL_STATUS;
          }
          monitor.subTask(""String_Node_Str"");
          if (isPreprocess)           preprocessTask.clean();
          monitor.worked(10);
          monitor.done();
          NlputilsFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
          ;
          NlputilsFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      if (canProceedJob()) {
        job.schedule();
      }
 else {
        NlputilsFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
      }
    }
  }
);
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (ZlabelLdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
    }
  }
);
  form.getToolBarManager().update(true);
}",0.9960530025373556
168186,"public void wordCount(IProgressMonitor monitor,List<File> inputFiles,List<String> dictionaryFile,String stopWordsFile,String outputFile,String delimiters,boolean doLower,boolean doLiwcStemming,boolean doSnowBallStemming,boolean doSpss,boolean doWordDistribution,boolean stemDictionary,File oFile,File sFile) throws IOException {
  if (delimiters == null || delimiters.equals(""String_Node_Str""))   this.delimiters=""String_Node_Str"";
 else   this.delimiters=delimiters;
  this.doLower=doLower;
  this.doLiwcStemming=doLiwcStemming;
  this.doSpss=doSpss;
  this.doWordDistribution=doWordDistribution;
  this.doSnowballStemming=doSnowBallStemming;
  this.stemDictionary=stemDictionary;
  appendLog(""String_Node_Str"");
  if (stopWordsFile.equals(null) || stopWordsFile.equals(""String_Node_Str""))   this.doStopWords=false;
 else   this.doStopWords=true;
  long startTime=System.currentTimeMillis();
  monitor.subTask(""String_Node_Str"");
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.subTask(""String_Node_Str"");
  buildCategorizer(dictionaryFile);
  logger.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  if (doStopWords) {
    startTime=System.currentTimeMillis();
    monitor.subTask(""String_Node_Str"");
    stopWordSetBuild(new File(stopWordsFile));
    logger.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
    appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  }
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.subTask(""String_Node_Str"");
  buildOutputFile(oFile);
  monitor.worked(2);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  if (doSpss) {
    monitor.subTask(""String_Node_Str"" + sFile.getName() + ""String_Node_Str"");
    buildSpssFile(sFile);
  }
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  for (  File inputFile : inputFiles) {
    if (inputFile.getAbsolutePath().contains(""String_Node_Str""))     continue;
    monitor.subTask(""String_Node_Str"" + inputFile);
    countWords(inputFile,oFile,sFile);
    monitor.worked(1);
  }
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.subTask(""String_Node_Str"");
  if (this.weighted)   TacitUtility.createReadMe(outputFile,""String_Node_Str"");
 else   TacitUtility.createReadMe(outputFile,""String_Node_Str"");
  monitor.worked(5);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
}","public void wordCount(IProgressMonitor monitor,List<File> inputFiles,List<String> dictionaryFile,String stopWordsFile,String outputFile,String delimiters,boolean doLower,boolean doLiwcStemming,boolean doSnowBallStemming,boolean doSpss,boolean doWordDistribution,boolean stemDictionary,File oFile,File sFile) throws IOException {
  if (delimiters == null || delimiters.equals(""String_Node_Str""))   this.delimiters=""String_Node_Str"";
 else   this.delimiters=delimiters;
  this.doLower=doLower;
  this.doLiwcStemming=doLiwcStemming;
  this.doSpss=doSpss;
  this.doWordDistribution=doWordDistribution;
  this.doSnowballStemming=doSnowBallStemming;
  this.stemDictionary=stemDictionary;
  if (!this.weighted)   this.doLiwcStemming=true;
  appendLog(""String_Node_Str"");
  if (stopWordsFile.equals(null) || stopWordsFile.equals(""String_Node_Str""))   this.doStopWords=false;
 else   this.doStopWords=true;
  long startTime=System.currentTimeMillis();
  monitor.subTask(""String_Node_Str"");
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.subTask(""String_Node_Str"");
  buildCategorizer(dictionaryFile);
  logger.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  if (doStopWords) {
    startTime=System.currentTimeMillis();
    monitor.subTask(""String_Node_Str"");
    stopWordSetBuild(new File(stopWordsFile));
    logger.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
    appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  }
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.subTask(""String_Node_Str"");
  buildOutputFile(oFile);
  monitor.worked(2);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  if (doSpss) {
    monitor.subTask(""String_Node_Str"" + sFile.getName() + ""String_Node_Str"");
    buildSpssFile(sFile);
  }
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  for (  File inputFile : inputFiles) {
    if (inputFile.getAbsolutePath().contains(""String_Node_Str""))     continue;
    monitor.subTask(""String_Node_Str"" + inputFile);
    countWords(inputFile,oFile,sFile);
    monitor.worked(1);
  }
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.subTask(""String_Node_Str"");
  if (this.weighted)   TacitUtility.createReadMe(outputFile,""String_Node_Str"");
 else   TacitUtility.createReadMe(outputFile,""String_Node_Str"");
  monitor.worked(5);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
}",0.9914821124361158
168187,"public void wordCount(IProgressMonitor monitor,List<File> inputFiles,List<String> dictionaryFile,String stopWordsFile,String outputFile,String delimiters,boolean doLower,boolean doLiwcStemming,boolean doSnowBallStemming,boolean doSpss,boolean doWordDistribution,boolean stemDictionary,File oFile,File sFile) throws IOException {
  if (delimiters == null || delimiters.equals(""String_Node_Str""))   this.delimiters=""String_Node_Str"";
 else   this.delimiters=delimiters;
  this.doLower=doLower;
  this.doLiwcStemming=doLiwcStemming;
  this.doSpss=doSpss;
  this.doWordDistribution=doWordDistribution;
  this.doSnowballStemming=doSnowBallStemming;
  this.stemDictionary=stemDictionary;
  if (!this.weighted)   this.doLiwcStemming=true;
  appendLog(""String_Node_Str"");
  if (stopWordsFile.equals(null) || stopWordsFile.equals(""String_Node_Str""))   this.doStopWords=false;
 else   this.doStopWords=true;
  long startTime=System.currentTimeMillis();
  monitor.subTask(""String_Node_Str"");
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.subTask(""String_Node_Str"");
  buildCategorizer(dictionaryFile);
  logger.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  if (doStopWords) {
    startTime=System.currentTimeMillis();
    monitor.subTask(""String_Node_Str"");
    stopWordSetBuild(new File(stopWordsFile));
    logger.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
    appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  }
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.subTask(""String_Node_Str"");
  buildOutputFile(oFile);
  monitor.worked(2);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  if (doSpss) {
    monitor.subTask(""String_Node_Str"" + sFile.getName() + ""String_Node_Str"");
    buildSpssFile(sFile);
  }
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  for (  File inputFile : inputFiles) {
    if (inputFile.getAbsolutePath().contains(""String_Node_Str""))     continue;
    monitor.subTask(""String_Node_Str"" + inputFile);
    countWords(inputFile,oFile,sFile);
    monitor.worked(1);
  }
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.subTask(""String_Node_Str"");
  if (this.weighted)   TacitUtility.createReadMe(outputFile,""String_Node_Str"");
 else   TacitUtility.createReadMe(outputFile,""String_Node_Str"");
  monitor.worked(5);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
}","public void wordCount(IProgressMonitor monitor,List<File> inputFiles,List<String> dictionaryFile,String stopWordsFile,String outputFile,String delimiters,boolean doLower,boolean doLiwcStemming,boolean doSnowBallStemming,boolean doSpss,boolean doWordDistribution,boolean stemDictionary,File oFile,File sFile) throws IOException {
  if (delimiters == null || delimiters.equals(""String_Node_Str""))   this.delimiters=""String_Node_Str"";
 else   this.delimiters=delimiters;
  this.doLower=doLower;
  this.doLiwcStemming=doLiwcStemming;
  this.doSpss=doSpss;
  this.doWordDistribution=doWordDistribution;
  this.doSnowballStemming=doSnowBallStemming;
  this.stemDictionary=stemDictionary;
  if (!this.weighted)   this.doLiwcStemming=true;
  appendLog(""String_Node_Str"");
  if (stopWordsFile.equals(null) || stopWordsFile.equals(""String_Node_Str"") || !this.weighted)   this.doStopWords=false;
 else   this.doStopWords=true;
  long startTime=System.currentTimeMillis();
  monitor.subTask(""String_Node_Str"");
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.subTask(""String_Node_Str"");
  buildCategorizer(dictionaryFile);
  logger.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  if (doStopWords) {
    startTime=System.currentTimeMillis();
    monitor.subTask(""String_Node_Str"");
    stopWordSetBuild(new File(stopWordsFile));
    logger.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
    appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  }
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.subTask(""String_Node_Str"");
  buildOutputFile(oFile);
  monitor.worked(2);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  if (doSpss) {
    monitor.subTask(""String_Node_Str"" + sFile.getName() + ""String_Node_Str"");
    buildSpssFile(sFile);
  }
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  for (  File inputFile : inputFiles) {
    if (inputFile.getAbsolutePath().contains(""String_Node_Str""))     continue;
    monitor.subTask(""String_Node_Str"" + inputFile);
    countWords(inputFile,oFile,sFile);
    monitor.worked(1);
  }
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.worked(10);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  monitor.subTask(""String_Node_Str"");
  if (this.weighted)   TacitUtility.createReadMe(outputFile,""String_Node_Str"");
 else   TacitUtility.createReadMe(outputFile,""String_Node_Str"");
  monitor.worked(5);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
}",0.996968676321994
168188,"private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (LdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
      final int noOfTopics=Integer.valueOf(numberOfTopics.getText()).intValue();
      final boolean isPreprocess=preprocessEnabled.getSelection();
      final String inputPath=inputLayoutData.getOutputLabel().getText();
      final String outputPath=layoutData.getOutputLabel().getText();
      final String preFix=prefixTxt.getText();
      final boolean wordWeightFile=wordWeights.getSelection();
      NlputilsFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          NlputilsFormComposite.setConsoleViewInFocus();
          NlputilsFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          List<String> inputFiles=new ArrayList<String>();
          String topicModelDirPath=inputPath;
          if (isPreprocess) {
            monitor.subTask(""String_Node_Str"");
            Preprocess preprocessTask=new Preprocess(""String_Node_Str"");
            try {
              File[] inputFile=new File(inputPath).listFiles();
              for (              File iFile : inputFile) {
                if (iFile.getAbsolutePath().contains(""String_Node_Str""))                 continue;
                inputFiles.add(iFile.toString());
              }
              topicModelDirPath=preprocessTask.doPreprocessing(inputFiles,""String_Node_Str"");
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
            monitor.worked(10);
          }
          lda.initialize(topicModelDirPath,noOfTopics,outputPath,preFix,wordWeightFile);
          long startTime=System.currentTimeMillis();
          monitor.subTask(""String_Node_Str"");
          try {
            lda.doLDA(monitor);
          }
 catch (          FileNotFoundException e) {
            NlputilsFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
catch (          IOException e) {
            monitor.done();
            NlputilsFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return Status.CANCEL_STATUS;
          }
          monitor.worked(20);
          ConsoleView.printlInConsoleln(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
          if (monitor.isCanceled()) {
            NlputilsFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return Status.CANCEL_STATUS;
          }
          monitor.worked(10);
          monitor.done();
          NlputilsFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          NlputilsFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      if (canProceedCluster()) {
        job.schedule();
      }
 else {
        NlputilsFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
      }
    }
  }
);
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (LdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
    }
  }
);
  form.getToolBarManager().update(true);
}","private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (LdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
      final int noOfTopics=Integer.valueOf(numberOfTopics.getText()).intValue();
      final boolean isPreprocess=preprocessEnabled.getSelection();
      final String inputPath=inputLayoutData.getOutputLabel().getText();
      final String outputPath=layoutData.getOutputLabel().getText();
      final String preFix=prefixTxt.getText();
      final boolean wordWeightFile=wordWeights.getSelection();
      NlputilsFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
      job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          NlputilsFormComposite.setConsoleViewInFocus();
          NlputilsFormComposite.updateStatusMessage(getViewSite(),null,null,form);
          monitor.beginTask(""String_Node_Str"",100);
          List<String> inputFiles=new ArrayList<String>();
          String topicModelDirPath=inputPath;
          Preprocess preprocessTask=new Preprocess(""String_Node_Str"");
          if (isPreprocess) {
            monitor.subTask(""String_Node_Str"");
            try {
              File[] inputFile=new File(inputPath).listFiles();
              for (              File iFile : inputFile) {
                if (iFile.getAbsolutePath().contains(""String_Node_Str""))                 continue;
                inputFiles.add(iFile.toString());
              }
              topicModelDirPath=preprocessTask.doPreprocessing(inputFiles,""String_Node_Str"");
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
            monitor.worked(10);
          }
          lda.initialize(topicModelDirPath,noOfTopics,outputPath,preFix,wordWeightFile);
          long startTime=System.currentTimeMillis();
          monitor.subTask(""String_Node_Str"");
          try {
            lda.doLDA(monitor);
          }
 catch (          FileNotFoundException e) {
            NlputilsFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            e.printStackTrace();
            return Status.CANCEL_STATUS;
          }
catch (          IOException e) {
            monitor.done();
            NlputilsFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return Status.CANCEL_STATUS;
          }
          monitor.worked(20);
          ConsoleView.printlInConsoleln(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
          if (monitor.isCanceled()) {
            NlputilsFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
            return Status.CANCEL_STATUS;
          }
          if (isPreprocess)           preprocessTask.clean();
          monitor.worked(10);
          monitor.done();
          NlputilsFormComposite.writeConsoleHeaderBegining(""String_Node_Str"");
          NlputilsFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK,form);
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      if (canProceedCluster()) {
        job.schedule();
      }
 else {
        NlputilsFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.ERROR,form);
      }
    }
  }
);
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (LdaTopicModelViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
    }
  }
);
  form.getToolBarManager().update(true);
}",0.971376528753578
168189,"public void doLDA(IProgressMonitor monitor) throws FileNotFoundException, IOException {
  Calendar cal=Calendar.getInstance();
  String dateString=""String_Node_Str"" + (cal.get(Calendar.MONTH) + 1) + ""String_Node_Str""+ cal.get(Calendar.DATE)+ ""String_Node_Str""+ cal.get(Calendar.YEAR)+ ""String_Node_Str""+ System.currentTimeMillis();
  String outputPath=outputDir + System.getProperty(""String_Node_Str"") + label+ ""String_Node_Str""+ dateString;
  String keepSeq=""String_Node_Str"", stopWords=""String_Node_Str"", preserveCase=""String_Node_Str"";
  String[] t2vArgs={""String_Node_Str"",sourceDir,""String_Node_Str"",outputPath + ""String_Node_Str"",""String_Node_Str"",keepSeq,""String_Node_Str"",stopWords,""String_Node_Str"",preserveCase};
  String[] v2tArgs={""String_Node_Str"",outputPath + ""String_Node_Str"",""String_Node_Str"",String.valueOf(numTopics),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",outputPath + ""String_Node_Str"",""String_Node_Str"",outputPath + ""String_Node_Str"",""String_Node_Str"",outputPath + ""String_Node_Str"",""String_Node_Str"",outputPath + ""String_Node_Str"",""String_Node_Str"",outputPath + ""String_Node_Str""};
  monitor.subTask(""String_Node_Str"");
  Text2Vectors.main(t2vArgs);
  monitor.worked(15);
  monitor.subTask(""String_Node_Str"");
  Vectors2Topics.main(v2tArgs);
  monitor.worked(5);
  monitor.subTask(""String_Node_Str"" + outputPath + ""String_Node_Str"");
  monitor.subTask(""String_Node_Str"" + outputPath + ""String_Node_Str"");
  convertKeys2csv(outputPath + ""String_Node_Str"");
  ConsoleView.printlInConsoleln(""String_Node_Str"" + outputPath + ""String_Node_Str"");
  monitor.worked(5);
  monitor.subTask(""String_Node_Str"" + outputPath + ""String_Node_Str"");
  convertComposition2csv(outputPath + ""String_Node_Str"");
  ConsoleView.printlInConsoleln(""String_Node_Str"" + outputPath + ""String_Node_Str"");
  monitor.worked(5);
  monitor.subTask(""String_Node_Str"" + outputPath + ""String_Node_Str"");
  if (wordWeights) {
    convertWeights2csv(outputPath + ""String_Node_Str"");
    ConsoleView.printlInConsoleln(""String_Node_Str"" + outputPath + ""String_Node_Str"");
  }
  monitor.worked(5);
  deleteFiles(outputPath);
  TacitUtility.createReadMe(outputPath,""String_Node_Str"");
  monitor.worked(5);
}","public void doLDA(IProgressMonitor monitor) throws FileNotFoundException, IOException {
  Calendar cal=Calendar.getInstance();
  String dateString=""String_Node_Str"" + (cal.get(Calendar.MONTH) + 1) + ""String_Node_Str""+ cal.get(Calendar.DATE)+ ""String_Node_Str""+ cal.get(Calendar.YEAR)+ ""String_Node_Str""+ System.currentTimeMillis();
  String outputPath=outputDir + System.getProperty(""String_Node_Str"") + label+ ""String_Node_Str""+ dateString;
  String keepSeq=""String_Node_Str"", stopWords=""String_Node_Str"", preserveCase=""String_Node_Str"";
  String[] t2vArgs={""String_Node_Str"",sourceDir,""String_Node_Str"",outputPath + ""String_Node_Str"",""String_Node_Str"",keepSeq,""String_Node_Str"",stopWords,""String_Node_Str"",preserveCase};
  String[] v2tArgs={""String_Node_Str"",outputPath + ""String_Node_Str"",""String_Node_Str"",String.valueOf(numTopics),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",outputPath + ""String_Node_Str"",""String_Node_Str"",outputPath + ""String_Node_Str"",""String_Node_Str"",outputPath + ""String_Node_Str"",""String_Node_Str"",outputPath + ""String_Node_Str"",""String_Node_Str"",outputPath + ""String_Node_Str""};
  monitor.subTask(""String_Node_Str"");
  Text2Vectors.main(t2vArgs);
  monitor.worked(15);
  monitor.subTask(""String_Node_Str"");
  Vectors2Topics.main(v2tArgs);
  monitor.worked(5);
  monitor.subTask(""String_Node_Str"" + outputPath + ""String_Node_Str"");
  monitor.subTask(""String_Node_Str"" + outputPath + ""String_Node_Str"");
  convertKeys2csv(outputPath + ""String_Node_Str"");
  ConsoleView.printlInConsoleln(""String_Node_Str"" + outputPath + ""String_Node_Str"");
  monitor.worked(5);
  monitor.subTask(""String_Node_Str"" + outputPath + ""String_Node_Str"");
  convertComposition2csv(outputPath + ""String_Node_Str"");
  ConsoleView.printlInConsoleln(""String_Node_Str"" + outputPath + ""String_Node_Str"");
  monitor.worked(5);
  monitor.subTask(""String_Node_Str"" + outputPath + ""String_Node_Str"");
  if (wordWeights) {
    convertWeights2csv(outputPath + ""String_Node_Str"");
    ConsoleView.printlInConsoleln(""String_Node_Str"" + outputPath + ""String_Node_Str"");
  }
  monitor.worked(5);
  deleteFiles(outputPath);
  TacitUtility.createReadMe(outputDir,""String_Node_Str"");
  monitor.worked(5);
}",0.9984101748807632
168190,"public void doCross(SVMClassify svm,String class1Label,File[] class1Files,String class2Label,File[] class2Files,int kValue,boolean doPredictiveWeights,String outputPath,IProgressMonitor monitor) throws IOException {
  int numFiles1=class1Files.length;
  int numFiles2=class2Files.length;
  int trains1=(int)Math.floor(0.90 * numFiles1);
  int trains2=(int)Math.floor(0.90 * numFiles2);
  double[] accuracies=new double[kValue];
  int index1=0;
  int index2=0;
  for (int i=1; i <= kValue; i++) {
    ConsoleView.printlInConsoleln(""String_Node_Str"" + i + ""String_Node_Str"");
    File[] trainFiles1=new File[trains1];
    File[] trainFiles2=new File[trains2];
    File[] testFiles1=new File[numFiles1 - trains1];
    File[] testFiles2=new File[numFiles2 - trains2];
    int currIndex=index1;
    for (int num=0; num < trains1; num++) {
      trainFiles1[num]=class1Files[currIndex];
      currIndex++;
      if (currIndex >= numFiles1)       currIndex=0;
    }
    for (int num=0; num < numFiles1 - trains1; num++) {
      testFiles1[num]=class1Files[currIndex];
      currIndex++;
      if (currIndex >= numFiles1)       currIndex=0;
    }
    currIndex=index2;
    for (int num=0; num < trains2; num++) {
      trainFiles2[num]=class2Files[currIndex];
      currIndex++;
      if (currIndex >= numFiles2)       currIndex=0;
    }
    for (int num=0; num < numFiles2 - trains2; num++) {
      testFiles2[num]=class2Files[currIndex];
      currIndex++;
      if (currIndex >= numFiles1)       currIndex=0;
    }
    svm.cross_train(""String_Node_Str"" + i,class1Label,trainFiles1,class2Label,trainFiles2,doPredictiveWeights);
    accuracies[i - 1]=svm.cross_predict(""String_Node_Str"" + i,class1Label,testFiles1,class2Label,testFiles2);
    index1=index1 + numFiles1 - trains1;
    if (index1 >= numFiles1) {
      index1=index1 - numFiles1;
    }
    index2=index2 + numFiles2 - trains2;
    if (index2 >= numFiles2) {
      index2=index2 - numFiles2;
    }
    monitor.worked(1);
  }
  double averageAccuracy=0;
  for (int j=0; j < accuracies.length; j++) {
    averageAccuracy=averageAccuracy + accuracies[j];
  }
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  ConsoleView.printlInConsoleln(""String_Node_Str"" + kValue + ""String_Node_Str""+ averageAccuracy / accuracies.length + ""String_Node_Str"");
  clearFiles(kValue,outputPath);
  writeToCSV(accuracies,outputPath);
  TacitUtility.createReadMe(outputPath,""String_Node_Str"");
}","public void doCross(SVMClassify svm,String class1Label,File[] class1Files,String class2Label,File[] class2Files,int kValue,boolean doPredictiveWeights,String outputPath,IProgressMonitor monitor) throws IOException {
  int numFiles1=class1Files.length;
  int numFiles2=class2Files.length;
  int trains1=(int)Math.floor(0.90 * numFiles1);
  int trains2=(int)Math.floor(0.90 * numFiles2);
  double[] accuracies=new double[kValue];
  int index1=0;
  int index2=0;
  for (int i=1; i <= kValue; i++) {
    ConsoleView.printlInConsoleln(""String_Node_Str"" + i + ""String_Node_Str"");
    File[] trainFiles1=new File[trains1];
    File[] trainFiles2=new File[trains2];
    File[] testFiles1=new File[numFiles1 - trains1];
    File[] testFiles2=new File[numFiles2 - trains2];
    int currIndex=index1;
    for (int num=0; num < trains1; num++) {
      trainFiles1[num]=class1Files[currIndex];
      currIndex++;
      if (currIndex >= numFiles1)       currIndex=0;
    }
    for (int num=0; num < numFiles1 - trains1; num++) {
      testFiles1[num]=class1Files[currIndex];
      currIndex++;
      if (currIndex >= numFiles1)       currIndex=0;
    }
    currIndex=index2;
    for (int num=0; num < trains2; num++) {
      trainFiles2[num]=class2Files[currIndex];
      currIndex++;
      if (currIndex >= numFiles2)       currIndex=0;
    }
    for (int num=0; num < numFiles2 - trains2; num++) {
      testFiles2[num]=class2Files[currIndex];
      currIndex++;
      if (currIndex >= numFiles2)       currIndex=0;
    }
    svm.cross_train(""String_Node_Str"" + i,class1Label,trainFiles1,class2Label,trainFiles2,doPredictiveWeights);
    accuracies[i - 1]=svm.cross_predict(""String_Node_Str"" + i,class1Label,testFiles1,class2Label,testFiles2);
    index1=index1 + numFiles1 - trains1;
    if (index1 >= numFiles1) {
      index1=index1 - numFiles1;
    }
    index2=index2 + numFiles2 - trains2;
    if (index2 >= numFiles2) {
      index2=index2 - numFiles2;
    }
    monitor.worked(1);
  }
  double averageAccuracy=0;
  for (int j=0; j < accuracies.length; j++) {
    averageAccuracy=averageAccuracy + accuracies[j];
  }
  ConsoleView.printlInConsoleln(""String_Node_Str"");
  ConsoleView.printlInConsoleln(""String_Node_Str"" + kValue + ""String_Node_Str""+ averageAccuracy / accuracies.length + ""String_Node_Str"");
  clearFiles(kValue,outputPath);
  writeToCSV(accuracies,outputPath);
  TacitUtility.createReadMe(outputPath,""String_Node_Str"");
}",0.9995888157894736
168191,"public String doPreprocessing(List<String> inputFiles,String subFolder) throws IOException {
  File[] files;
  files=new File[inputFiles.size()];
  int i=0;
  for (  String filepath : inputFiles) {
    if ((new File(filepath).isDirectory()))     continue;
    if (new File(filepath).getAbsolutePath().contains(""String_Node_Str""))     continue;
    files[i]=new File(filepath);
    i=i + 1;
  }
  preprocessingParentFolder=this.outputPath + File.separator + callingPlugin+ ""String_Node_Str""+ currTime;
  if (!(new File(preprocessingParentFolder).exists())) {
    new File(preprocessingParentFolder).mkdir();
    ConsoleView.printlInConsoleln(""String_Node_Str"" + preprocessingParentFolder + ""String_Node_Str"");
  }
  if (subFolder.trim().length() != 0) {
    preprocessingParentFolder=preprocessingParentFolder + File.separator + subFolder;
    if (new File(preprocessingParentFolder).mkdir()) {
      ConsoleView.printlInConsoleln(""String_Node_Str"" + preprocessingParentFolder + ""String_Node_Str"");
    }
  }
  if (stopwordsFile.trim().length() != 0) {
    doStopWords=true;
    String currentLine;
    BufferedReader br=new BufferedReader(new FileReader(new File(stopwordsFile)));
    while ((currentLine=br.readLine()) != null) {
      stopWordsSet.add(currentLine.trim().toLowerCase());
    }
    br.close();
  }
  if (doStemming) {
    if (stemLang.equals(""String_Node_Str"")) {
      doLangDetect=true;
      Bundle bundle=Platform.getBundle(""String_Node_Str"");
      URL url=FileLocator.find(bundle,new Path(""String_Node_Str""),null);
      URL fileURL=FileLocator.toFileURL(url);
      ConsoleView.printlInConsoleln(fileURL.getPath());
      try {
        DetectorFactory.loadProfile(fileURL.getPath());
      }
 catch (      com.cybozu.labs.langdetect.LangDetectException ex) {
        ConsoleView.printlInConsoleln(""String_Node_Str"" + ex.getCode());
      }
    }
 else {
      doLangDetect=false;
      stemmer=stemSelect(stemLang);
    }
  }
  for (  File f : files) {
    if (f == null)     break;
    if (f.getAbsolutePath().contains(""String_Node_Str""))     continue;
    if (""String_Node_Str"".equals(f.getName()))     continue;
    String inputFile=f.getAbsolutePath();
    ConsoleView.printlInConsoleln(""String_Node_Str"" + inputFile);
    if (doLangDetect) {
      try {
        stemmer=findLangStemmer(f);
      }
 catch (      LangDetectException e) {
        e.printStackTrace();
      }
    }
    File iFile=new File(inputFile);
    if (!iFile.exists() || iFile.isDirectory()) {
      ConsoleView.printlInConsoleln(""String_Node_Str"" + iFile.getAbsolutePath());
      continue;
    }
    File oFile=new File(preprocessingParentFolder + System.getProperty(""String_Node_Str"") + f.getName());
    BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(iFile),""String_Node_Str""));
    BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(oFile),""String_Node_Str""));
    String linear;
    while ((linear=br.readLine()) != null) {
      if (linear != ""String_Node_Str"") {
        if (doLowercase)         linear=linear.toLowerCase();
        for (        char c : delimiters.toCharArray())         linear=linear.replace(c,' ');
        if (doStopWords)         linear=removeStopWords(linear);
        if (doStemming && stemmer != null)         linear=stem(linear);
        bw.write(linear + ""String_Node_Str"");
      }
    }
    ConsoleView.printlInConsoleln(preprocessingParentFolder + System.getProperty(""String_Node_Str"") + f.getName());
    br.close();
    bw.close();
  }
  ConsoleView.printlInConsoleln(""String_Node_Str"" + preprocessingParentFolder);
  return preprocessingParentFolder;
}","public String doPreprocessing(List<String> inputFiles,String subFolder) throws IOException {
  File[] files;
  files=new File[inputFiles.size()];
  int i=0;
  boolean outputPathNotSet=false;
  for (  String filepath : inputFiles) {
    if ((new File(filepath).isDirectory()))     continue;
    if (new File(filepath).getAbsolutePath().contains(""String_Node_Str""))     continue;
    files[i]=new File(filepath);
    i=i + 1;
  }
  if (this.outputPath == null || this.outputPath.trim().length() == 0) {
    this.outputPath=System.getProperty(""String_Node_Str"");
    outputPathNotSet=true;
  }
  preprocessingParentFolder=this.outputPath + File.separator + callingPlugin+ ""String_Node_Str""+ currTime;
  if (outputPathNotSet)   this.outputPath=""String_Node_Str"";
  if (!(new File(preprocessingParentFolder).exists())) {
    new File(preprocessingParentFolder).mkdir();
    ConsoleView.printlInConsoleln(""String_Node_Str"" + preprocessingParentFolder + ""String_Node_Str"");
  }
  if (subFolder.trim().length() != 0) {
    preprocessingParentFolder=preprocessingParentFolder + File.separator + subFolder;
    if (new File(preprocessingParentFolder).mkdir()) {
      ConsoleView.printlInConsoleln(""String_Node_Str"" + preprocessingParentFolder + ""String_Node_Str"");
    }
  }
  if (stopwordsFile.trim().length() != 0) {
    doStopWords=true;
    String currentLine;
    BufferedReader br=new BufferedReader(new FileReader(new File(stopwordsFile)));
    while ((currentLine=br.readLine()) != null) {
      stopWordsSet.add(currentLine.trim().toLowerCase());
    }
    br.close();
  }
  if (doStemming) {
    if (stemLang.equals(""String_Node_Str"")) {
      doLangDetect=true;
      Bundle bundle=Platform.getBundle(""String_Node_Str"");
      URL url=FileLocator.find(bundle,new Path(""String_Node_Str""),null);
      URL fileURL=FileLocator.toFileURL(url);
      try {
        DetectorFactory.loadProfile(fileURL.getPath());
      }
 catch (      com.cybozu.labs.langdetect.LangDetectException ex) {
        ConsoleView.printlInConsoleln(""String_Node_Str"" + ex.getCode());
      }
    }
 else {
      doLangDetect=false;
      stemmer=stemSelect(stemLang);
    }
  }
  int currentCount=0;
  int adder=files.length / 10;
  int breakPoint=adder;
  int statusPoint=0;
  ConsoleView.printlInConsoleln(""String_Node_Str"" + statusPoint * 10 + ""String_Node_Str"");
  for (  File f : files) {
    currentCount++;
    if (currentCount >= breakPoint) {
      statusPoint++;
      ConsoleView.printlInConsoleln(""String_Node_Str"" + statusPoint * 10 + ""String_Node_Str"");
      breakPoint=breakPoint + adder;
    }
    if (f == null)     break;
    if (f.getAbsolutePath().contains(""String_Node_Str""))     continue;
    if (""String_Node_Str"".equals(f.getName()))     continue;
    String inputFile=f.getAbsolutePath();
    if (doLangDetect) {
      try {
        stemmer=findLangStemmer(f);
      }
 catch (      LangDetectException e) {
        e.printStackTrace();
      }
    }
    File iFile=new File(inputFile);
    if (!iFile.exists() || iFile.isDirectory()) {
      ConsoleView.printlInConsoleln(""String_Node_Str"" + iFile.getAbsolutePath());
      continue;
    }
    File oFile=new File(preprocessingParentFolder + System.getProperty(""String_Node_Str"") + f.getName());
    BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(iFile),""String_Node_Str""));
    BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(oFile),""String_Node_Str""));
    String linear;
    while ((linear=br.readLine()) != null) {
      if (linear != ""String_Node_Str"") {
        if (doLowercase)         linear=linear.toLowerCase();
        for (        char c : delimiters.toCharArray())         linear=linear.replace(c,' ');
        if (doStopWords)         linear=removeStopWords(linear);
        if (doStemming && stemmer != null)         linear=stem(linear);
        bw.write(linear + ""String_Node_Str"");
      }
    }
    br.close();
    bw.close();
  }
  ConsoleView.printlInConsoleln(""String_Node_Str"" + preprocessingParentFolder);
  return preprocessingParentFolder;
}",0.8666322047040579
168192,"public void countWords(String inputFile,File oFile,File spssFile) throws IOException {
  File iFile=new File(inputFile);
  if (iFile.isDirectory()) {
    return;
  }
  logger.info(""String_Node_Str"" + inputFile);
  appendLog(""String_Node_Str"" + inputFile);
  HashMap<String,HashSet<String>> wordCategories=new HashMap<String,HashSet<String>>();
  long startTime=System.currentTimeMillis();
  BufferedReader br=new BufferedReader(new FileReader(iFile));
  HashMap<String,Integer> map=new HashMap<String,Integer>();
  String currentLine;
  int totalWords=0;
  int sixltr=0;
  int noOfLines=0;
  int numerals=0;
  weirdDashCount=0;
  period=comma=colon=semiC=qMark=exclam=dash=quote=apostro=parenth=otherP=allPct=0;
  while ((currentLine=br.readLine()) != null) {
    Matcher eolMatcher=eol.matcher(currentLine);
    while (eolMatcher.find())     noOfLines++;
    period=period + StringUtils.countMatches(currentLine,""String_Node_Str"");
    comma=comma + StringUtils.countMatches(currentLine,""String_Node_Str"");
    colon=colon + StringUtils.countMatches(currentLine,""String_Node_Str"");
    semiC=semiC + StringUtils.countMatches(currentLine,""String_Node_Str"");
    qMark=qMark + StringUtils.countMatches(currentLine,""String_Node_Str"");
    exclam=exclam + StringUtils.countMatches(currentLine,""String_Node_Str"");
    dash=dash + StringUtils.countMatches(currentLine,""String_Node_Str"");
    quote=quote + StringUtils.countMatches(currentLine,""String_Node_Str"");
    quote=quote + StringUtils.countMatches(currentLine,""String_Node_Str"");
    quote=quote + StringUtils.countMatches(currentLine,""String_Node_Str"");
    apostro=apostro + StringUtils.countMatches(currentLine,""String_Node_Str"");
    parenth=parenth + StringUtils.countMatches(currentLine,""String_Node_Str"");
    parenth=parenth + StringUtils.countMatches(currentLine,""String_Node_Str"");
    for (    char c : ""String_Node_Str"".toCharArray()) {
      otherP=otherP + StringUtils.countMatches(currentLine,String.valueOf(c));
    }
    System.out.println();
    int[] i=process(currentLine,map);
    totalWords=totalWords + i[0];
    sixltr=sixltr + i[1];
    numerals=numerals + i[2];
  }
  allPct=allPct + period + comma+ colon+ semiC+ qMark+ exclam+ dash+ quote+ apostro+ parenth+ otherP;
  br.close();
  logger.info(""String_Node_Str"" + totalWords);
  logger.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  appendLog(""String_Node_Str"" + totalWords);
  appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  HashMap<String,Integer> catCount=new HashMap<String,Integer>();
  List<Integer> currCategories;
  int dicCount=0;
  String currCategoryName=""String_Node_Str"";
  for (  String currWord : map.keySet()) {
    if (currWord == null || currWord.equals(""String_Node_Str""))     continue;
    currCategories=categorizer.query(currWord.toLowerCase());
    if (currCategories != null) {
      dicCount=dicCount + map.get(currWord);
      for (      int i : currCategories) {
        currCategoryName=categories.get(i);
        if (catCount.get(currCategoryName) != null) {
          catCount.put(currCategoryName,catCount.get(currCategoryName) + map.get(currWord));
        }
 else {
          catCount.put(currCategoryName,map.get(currWord));
        }
        HashSet<String> currWordCategories=wordCategories.get(currWord);
        if (currWordCategories != null) {
          wordCategories.get(currWord).add(currCategoryName);
        }
 else {
          currWordCategories=new HashSet<String>();
          currWordCategories.add(currCategoryName);
          wordCategories.put(currWord,currWordCategories);
        }
      }
    }
 else {
    }
  }
  if (doWordDistribution)   calculateWordDistribution(map,catCount,wordCategories,inputFile,oFile);
  if (noOfLines == 0)   noOfLines=1;
  writeToFile(oFile,iFile.getName(),totalWords,totalWords / (double)noOfLines,(sixltr * 100) / (double)totalWords,(dicCount * 100) / (float)totalWords,(numerals * 100) / (double)totalWords,catCount);
  if (doSpss)   writeToSpss(spssFile,iFile.getName(),totalWords,totalWords / (float)noOfLines,(sixltr * 100) / (float)totalWords,(dicCount * 100) / (double)totalWords,catCount);
}","public void countWords(String inputFile,File oFile,File spssFile) throws IOException {
  File iFile=new File(inputFile);
  if (iFile.isDirectory()) {
    return;
  }
  logger.info(""String_Node_Str"" + inputFile);
  appendLog(""String_Node_Str"" + inputFile);
  HashMap<String,HashSet<String>> wordCategories=new HashMap<String,HashSet<String>>();
  long startTime=System.currentTimeMillis();
  BufferedReader br=new BufferedReader(new FileReader(iFile));
  HashMap<String,Integer> map=new HashMap<String,Integer>();
  String currentLine;
  int totalWords=0;
  int sixltr=0;
  int noOfLines=0;
  int numerals=0;
  weirdDashCount=0;
  period=comma=colon=semiC=qMark=exclam=dash=quote=apostro=parenth=otherP=allPct=0;
  while ((currentLine=br.readLine()) != null) {
    Matcher eolMatcher=eol.matcher(currentLine);
    while (eolMatcher.find())     noOfLines++;
    period=period + StringUtils.countMatches(currentLine,""String_Node_Str"");
    comma=comma + StringUtils.countMatches(currentLine,""String_Node_Str"");
    colon=colon + StringUtils.countMatches(currentLine,""String_Node_Str"");
    semiC=semiC + StringUtils.countMatches(currentLine,""String_Node_Str"");
    qMark=qMark + StringUtils.countMatches(currentLine,""String_Node_Str"");
    exclam=exclam + StringUtils.countMatches(currentLine,""String_Node_Str"");
    dash=dash + StringUtils.countMatches(currentLine,""String_Node_Str"");
    quote=quote + StringUtils.countMatches(currentLine,""String_Node_Str"");
    quote=quote + StringUtils.countMatches(currentLine,""String_Node_Str"");
    quote=quote + StringUtils.countMatches(currentLine,""String_Node_Str"");
    apostro=apostro + StringUtils.countMatches(currentLine,""String_Node_Str"");
    parenth=parenth + StringUtils.countMatches(currentLine,""String_Node_Str"");
    parenth=parenth + StringUtils.countMatches(currentLine,""String_Node_Str"");
    parenth=parenth + StringUtils.countMatches(currentLine,""String_Node_Str"");
    parenth=parenth + StringUtils.countMatches(currentLine,""String_Node_Str"");
    parenth=parenth + StringUtils.countMatches(currentLine,""String_Node_Str"");
    parenth=parenth + StringUtils.countMatches(currentLine,""String_Node_Str"");
    for (    char c : ""String_Node_Str"".toCharArray()) {
      otherP=otherP + StringUtils.countMatches(currentLine,String.valueOf(c));
    }
    System.out.println();
    int[] i=process(currentLine,map);
    totalWords=totalWords + i[0];
    sixltr=sixltr + i[1];
    numerals=numerals + i[2];
  }
  allPct=allPct + period + comma+ colon+ semiC+ qMark+ exclam+ dash+ quote+ apostro+ parenth+ otherP;
  br.close();
  logger.info(""String_Node_Str"" + totalWords);
  logger.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  appendLog(""String_Node_Str"" + totalWords);
  appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  HashMap<String,Integer> catCount=new HashMap<String,Integer>();
  List<Integer> currCategories;
  int dicCount=0;
  String currCategoryName=""String_Node_Str"";
  for (  String currWord : map.keySet()) {
    if (currWord == null || currWord.equals(""String_Node_Str""))     continue;
    currCategories=categorizer.query(currWord.toLowerCase());
    if (currCategories != null) {
      dicCount=dicCount + map.get(currWord);
      for (      int i : currCategories) {
        currCategoryName=categories.get(i);
        if (catCount.get(currCategoryName) != null) {
          catCount.put(currCategoryName,catCount.get(currCategoryName) + map.get(currWord));
        }
 else {
          catCount.put(currCategoryName,map.get(currWord));
        }
        HashSet<String> currWordCategories=wordCategories.get(currWord);
        if (currWordCategories != null) {
          wordCategories.get(currWord).add(currCategoryName);
        }
 else {
          currWordCategories=new HashSet<String>();
          currWordCategories.add(currCategoryName);
          wordCategories.put(currWord,currWordCategories);
        }
      }
    }
 else {
    }
  }
  if (doWordDistribution)   calculateWordDistribution(map,catCount,wordCategories,inputFile,oFile);
  if (noOfLines == 0)   noOfLines=1;
  writeToFile(oFile,iFile.getName(),totalWords,totalWords / (double)noOfLines,(sixltr * 100) / (double)totalWords,(dicCount * 100) / (float)totalWords,(numerals * 100) / (double)totalWords,catCount);
  if (doSpss)   writeToSpss(spssFile,iFile.getName(),totalWords,totalWords / (float)noOfLines,(sixltr * 100) / (float)totalWords,(dicCount * 100) / (double)totalWords,catCount);
}",0.963794683776352
168193,"public int[] process(String line,HashMap<String,Integer> map){
  int ret[]=new int[3];
  int numWords=0;
  int sixltr=0;
  int numerals=0;
  Matcher matcher=pattern.matcher(line);
  if (doLower)   line=line.toLowerCase();
  if (phraseDetect) {
    for (    String key : phraseLookup.keySet()) {
      Pattern p, justp;
      if (key.endsWith(""String_Node_Str"")) {
        p=Pattern.compile(""String_Node_Str"" + key + ""String_Node_Str"");
        justp=Pattern.compile(key + ""String_Node_Str"");
        key=key.substring(0,key.length() - 1);
      }
 else {
        p=Pattern.compile(""String_Node_Str"" + key + ""String_Node_Str"");
        justp=Pattern.compile(key + ""String_Node_Str"");
      }
      int wordsInPhrase=key.split(""String_Node_Str"").length;
      Matcher m=p.matcher(line);
      ArrayList<Integer> indexes=new ArrayList<Integer>();
      while (m.find()) {
        String match=m.group();
        indexes.add(m.start() + 1);
        indexes.add(m.end());
        numWords=numWords + wordsInPhrase;
        sixltr=sixltr + bigWords(match);
        Object value=map.get(key);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(key,i + wordsInPhrase);
        }
 else {
          map.put(key,wordsInPhrase);
        }
      }
      for (int i=0; i < indexes.size(); i=i + 2) {
        line=line.substring(0,indexes.get(i)) + line.substring(indexes.get(i + 1));
        int diff=indexes.get(i + 1) - indexes.get(i);
        for (int j=0; j < indexes.size(); j++)         indexes.set(j,indexes.get(j) - diff);
      }
      indexes.clear();
      Matcher m2=justp.matcher(line);
      while (m2.find()) {
        String match=m2.group();
        indexes.add(m2.start());
        indexes.add(m2.end());
        numWords=numWords + wordsInPhrase;
        sixltr=sixltr + bigWords(match);
        Object value=map.get(key);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(key,i + wordsInPhrase);
        }
 else {
          map.put(key,wordsInPhrase);
        }
      }
      for (int i=0; i < indexes.size(); i=i + 2) {
        line=line.substring(0,indexes.get(i)) + line.substring(indexes.get(i + 1));
        int diff=indexes.get(i + 1) - indexes.get(i);
        for (int j=0; j < indexes.size(); j++)         indexes.set(j,indexes.get(j) - diff);
      }
    }
  }
  StringTokenizer st=new StringTokenizer(line,delimiters);
  String currentWord=null;
  if (st.hasMoreTokens())   currentWord=trimChars(st.nextToken(),punctuations);
  do {
    String nextWord=null;
    if (st.hasMoreTokens())     nextWord=trimChars(st.nextToken(),punctuations);
    if (currentWord == null || currentWord.equals(""String_Node_Str"")) {
      currentWord=nextWord;
      continue;
    }
    matcher=pattern.matcher(currentWord);
    while (matcher.find()) {
      numerals++;
    }
    if (doSnowballStemming) {
      stemmer.setCurrent(currentWord);
      String stemmedWord=""String_Node_Str"";
      if (stemmer.stem())       stemmedWord=stemmer.getCurrent();
      if (!stemmedWord.equals(""String_Node_Str""))       currentWord=stemmedWord;
    }
    if (doStopWords)     if (stopWordSet.contains(currentWord))     continue;
    Matcher word=regularPattern.matcher(currentWord);
    if (word.find()) {
      numWords=numWords + 1;
      if (currentWord.length() > 6) {
        sixltr=sixltr + 1;
      }
    }
    boolean treatAsOne=true;
    Matcher dh=doubleHyphenPattern.matcher(currentWord);
    if (dh.find()) {
      currentWord=currentWord.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase();
      if (categorizer.query(currentWord) != null && !categorizer.checkHyphen(currentWord)) {
        Object value=map.get(currentWord);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(currentWord,i + 1);
        }
 else {
          map.put(currentWord,1);
        }
        String[] words=currentWord.split(""String_Node_Str"");
        int hyphened=0;
        for (        String s : words) {
          hyphened++;
        }
        weirdDashCount=weirdDashCount + hyphened;
      }
 else {
        String[] words=currentWord.split(""String_Node_Str"");
        int hyphened=-1;
        for (        String s : words) {
          hyphened++;
        }
        if (categorizer.query(currentWord) != null) {
          Object value=map.get(currentWord);
          if (value != null) {
            int i=((Integer)value).intValue();
            map.put(words[0],i + 1);
          }
 else {
            map.put(words[0],1);
          }
          numWords=numWords + hyphened;
          treatAsOne=true;
        }
 else {
          numWords=numWords + hyphened;
          if (categorizer.query(words[0]) != null) {
            Object value=map.get(words[0]);
            if (value != null) {
              int i=((Integer)value).intValue();
              map.put(words[0],i + 1);
            }
 else {
              map.put(words[0],1);
            }
          }
          treatAsOne=false;
        }
        if (treatAsOne)         weirdDashCount++;
 else         weirdDashCount=weirdDashCount + hyphened;
      }
    }
 else {
      Matcher cm=compoundPattern.matcher(currentWord);
      if (cm.find()) {
        String[] words=currentWord.split(""String_Node_Str"");
        int hyphened=-1;
        for (        String s : words) {
          if (s == null || s.equals(""String_Node_Str""))           continue;
          hyphened++;
        }
        if (categorizer.query(currentWord.toLowerCase()) == null) {
          numWords=numWords + hyphened;
          treatAsOne=false;
        }
 else         weirdDashCount=weirdDashCount + 1;
      }
      if (treatAsOne) {
        Object value=map.get(currentWord);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(currentWord,i + 1);
        }
 else {
          map.put(currentWord,1);
        }
      }
 else {
        String[] parts=currentWord.split(""String_Node_Str"");
        for (        String part : parts) {
          if (part == null || part.equals(""String_Node_Str""))           continue;
          Object value=map.get(part);
          if (value != null) {
            int i=((Integer)value).intValue();
            map.put(part,i + 1);
          }
 else {
            map.put(part,1);
          }
        }
      }
    }
    currentWord=nextWord;
  }
 while (st.hasMoreTokens() || null != currentWord);
  ret[0]=numWords;
  ret[1]=sixltr;
  ret[2]=numerals;
  return ret;
}","public int[] process(String line,HashMap<String,Integer> map){
  int ret[]=new int[3];
  int numWords=0;
  int sixltr=0;
  int numerals=0;
  Matcher matcher=pattern.matcher(line);
  if (doLower)   line=line.toLowerCase();
  if (phraseDetect) {
    for (    String key : phraseLookup.keySet()) {
      Pattern p, justp;
      if (key.endsWith(""String_Node_Str"")) {
        p=Pattern.compile(""String_Node_Str"" + key + ""String_Node_Str"");
        justp=Pattern.compile(key + ""String_Node_Str"");
        key=key.substring(0,key.length() - 1);
      }
 else {
        p=Pattern.compile(""String_Node_Str"" + key + ""String_Node_Str"");
        justp=Pattern.compile(key + ""String_Node_Str"");
      }
      int wordsInPhrase=key.split(""String_Node_Str"").length;
      Matcher m=p.matcher(line);
      ArrayList<Integer> indexes=new ArrayList<Integer>();
      while (m.find()) {
        String match=m.group();
        indexes.add(m.start() + 1);
        indexes.add(m.end());
        numWords=numWords + wordsInPhrase;
        sixltr=sixltr + bigWords(match);
        Object value=map.get(key);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(key,i + wordsInPhrase);
        }
 else {
          map.put(key,wordsInPhrase);
        }
      }
      for (int i=0; i < indexes.size(); i=i + 2) {
        line=line.substring(0,indexes.get(i)) + line.substring(indexes.get(i + 1));
        int diff=indexes.get(i + 1) - indexes.get(i);
        for (int j=0; j < indexes.size(); j++)         indexes.set(j,indexes.get(j) - diff);
      }
      indexes.clear();
      Matcher m2=justp.matcher(line);
      while (m2.find()) {
        String match=m2.group();
        indexes.add(m2.start());
        indexes.add(m2.end());
        numWords=numWords + wordsInPhrase;
        sixltr=sixltr + bigWords(match);
        Object value=map.get(key);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(key,i + wordsInPhrase);
        }
 else {
          map.put(key,wordsInPhrase);
        }
      }
      for (int i=0; i < indexes.size(); i=i + 2) {
        line=line.substring(0,indexes.get(i)) + line.substring(indexes.get(i + 1));
        int diff=indexes.get(i + 1) - indexes.get(i);
        for (int j=0; j < indexes.size(); j++)         indexes.set(j,indexes.get(j) - diff);
      }
    }
  }
  StringTokenizer st=new StringTokenizer(line,delimiters);
  String currentWord=null;
  if (st.hasMoreTokens())   currentWord=trimChars(st.nextToken(),punctuations);
  do {
    String nextWord=null;
    if (st.hasMoreTokens())     nextWord=trimChars(st.nextToken(),punctuations);
    if (currentWord == null || currentWord.equals(""String_Node_Str"")) {
      currentWord=nextWord;
      continue;
    }
    matcher=pattern.matcher(currentWord);
    while (matcher.find()) {
      numerals++;
    }
    if (doSnowballStemming) {
      stemmer.setCurrent(currentWord);
      String stemmedWord=""String_Node_Str"";
      if (stemmer.stem())       stemmedWord=stemmer.getCurrent();
      if (!stemmedWord.equals(""String_Node_Str""))       currentWord=stemmedWord;
    }
    if (doStopWords)     if (stopWordSet.contains(currentWord))     continue;
    Matcher word=regularPattern.matcher(currentWord);
    if (word.find()) {
      numWords=numWords + 1;
      if (currentWord.length() > 6) {
        sixltr=sixltr + 1;
      }
    }
    boolean treatAsOne=true;
    Matcher dh=doubleHyphenPattern.matcher(currentWord);
    if (dh.find()) {
      currentWord=currentWord.replaceFirst(""String_Node_Str"",""String_Node_Str"").toLowerCase();
      if (categorizer.query(currentWord) != null && !categorizer.checkHyphen(currentWord)) {
        Object value=map.get(currentWord);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(currentWord,i + 1);
        }
 else {
          map.put(currentWord,1);
        }
        String[] words=currentWord.split(""String_Node_Str"",2);
        int hyphened=0;
        for (        String s : words) {
          hyphened++;
        }
        weirdDashCount=weirdDashCount + hyphened;
      }
 else {
        String[] words=currentWord.split(""String_Node_Str"",2);
        int hyphened=-1;
        for (        String s : words) {
          hyphened++;
        }
        if (categorizer.query(currentWord) != null) {
          Object value=map.get(currentWord);
          if (value != null) {
            int i=((Integer)value).intValue();
            map.put(words[0],i + 1);
          }
 else {
            map.put(words[0],1);
          }
          numWords=numWords + hyphened;
          treatAsOne=true;
        }
 else {
          numWords=numWords + hyphened;
          if (categorizer.query(words[0]) != null) {
            Object value=map.get(words[0]);
            if (value != null) {
              int i=((Integer)value).intValue();
              map.put(words[0],i + 1);
            }
 else {
              map.put(words[0],1);
            }
          }
          treatAsOne=false;
        }
        if (treatAsOne)         weirdDashCount++;
 else         weirdDashCount=weirdDashCount + hyphened;
      }
    }
 else {
      Matcher cm=compoundPattern.matcher(currentWord);
      if (cm.find()) {
        String[] words=currentWord.split(""String_Node_Str"");
        int hyphened=-1;
        for (        String s : words) {
          if (s == null || s.equals(""String_Node_Str""))           continue;
          hyphened++;
        }
        if (categorizer.query(currentWord.toLowerCase()) == null) {
          numWords=numWords + hyphened;
          treatAsOne=false;
        }
 else         weirdDashCount=weirdDashCount + 1;
      }
      if (treatAsOne) {
        Object value=map.get(currentWord);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(currentWord,i + 1);
        }
 else {
          map.put(currentWord,1);
        }
      }
 else {
        String[] parts=currentWord.split(""String_Node_Str"");
        for (        String part : parts) {
          if (part == null || part.equals(""String_Node_Str""))           continue;
          Object value=map.get(part);
          if (value != null) {
            int i=((Integer)value).intValue();
            map.put(part,i + 1);
          }
 else {
            map.put(part,1);
          }
        }
      }
    }
    currentWord=nextWord;
  }
 while (st.hasMoreTokens() || null != currentWord);
  ret[0]=numWords;
  ret[1]=sixltr;
  ret[2]=numerals;
  return ret;
}",0.9993073193257908
168194,"private boolean canProceedCluster(){
  NlputilsFormComposite.updateStatusMessage(getViewSite(),null,null);
  boolean canProceed=true;
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  String message=OutputPathValidation.getInstance().validateOutputDirectory(layoutData.getOutputLabel().getText(),""String_Node_Str"");
  if (message != null) {
    message=layoutData.getOutputLabel().getText() + ""String_Node_Str"" + message;
    form.getMessageManager().addMessage(""String_Node_Str"",message,null,IMessageProvider.ERROR);
    canProceed=false;
  }
  String inputMessage=OutputPathValidation.getInstance().validateOutputDirectory(inputLayoutData.getOutputLabel().getText(),""String_Node_Str"");
  if (inputMessage != null) {
    inputMessage=layoutData.getOutputLabel().getText() + ""String_Node_Str"" + inputMessage;
    form.getMessageManager().addMessage(""String_Node_Str"",inputMessage,null,IMessageProvider.ERROR);
    canProceed=false;
  }
  if (prefixTxt.getText().length() < 1) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    canProceed=false;
  }
  if (Integer.parseInt(numberOfTopics.getText()) < 1) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    canProceed=false;
  }
  return canProceed;
}","private boolean canProceedCluster(){
  NlputilsFormComposite.updateStatusMessage(getViewSite(),null,null);
  boolean canProceed=true;
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  String message=OutputPathValidation.getInstance().validateOutputDirectory(layoutData.getOutputLabel().getText(),""String_Node_Str"");
  if (message != null) {
    message=layoutData.getOutputLabel().getText() + ""String_Node_Str"" + message;
    form.getMessageManager().addMessage(""String_Node_Str"",message,null,IMessageProvider.ERROR);
    canProceed=false;
  }
  String inputMessage=OutputPathValidation.getInstance().validateOutputDirectory(inputLayoutData.getOutputLabel().getText(),""String_Node_Str"");
  if (inputMessage != null) {
    inputMessage=inputLayoutData.getOutputLabel().getText() + ""String_Node_Str"" + inputMessage;
    form.getMessageManager().addMessage(""String_Node_Str"",inputMessage,null,IMessageProvider.ERROR);
    canProceed=false;
  }
  if (prefixTxt.getText().length() < 1) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    canProceed=false;
  }
  if (Integer.parseInt(numberOfTopics.getText()) < 1) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    canProceed=false;
  }
  return canProceed;
}",0.9976950938426078
168195,"private boolean canProceedJob(){
  NlputilsFormComposite.updateStatusMessage(getViewSite(),null,null);
  boolean canProceed=true;
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  String message=OutputPathValidation.getInstance().validateOutputDirectory(layoutData.getOutputLabel().getText(),""String_Node_Str"");
  if (message != null) {
    message=layoutData.getOutputLabel().getText() + ""String_Node_Str"" + message;
    form.getMessageManager().addMessage(""String_Node_Str"",message,null,IMessageProvider.ERROR);
    canProceed=false;
  }
  String inputMessage=OutputPathValidation.getInstance().validateOutputDirectory(inputLayoutData.getOutputLabel().getText(),""String_Node_Str"");
  if (inputMessage != null) {
    inputMessage=layoutData.getOutputLabel().getText() + ""String_Node_Str"" + inputMessage;
    form.getMessageManager().addMessage(""String_Node_Str"",inputMessage,null,IMessageProvider.ERROR);
    canProceed=false;
  }
  String seedFileMsg=OutputPathValidation.getInstance().validateOutputDirectory(seedFileText.getText(),""String_Node_Str"");
  if (seedFileMsg != null) {
    seedFileMsg=seedFileText.getText() + ""String_Node_Str"" + seedFileMsg;
    form.getMessageManager().addMessage(""String_Node_Str"",seedFileMsg,null,IMessageProvider.ERROR);
    canProceed=false;
  }
  if (Integer.parseInt(topics.getText()) < 1) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    canProceed=false;
  }
  return canProceed;
}","private boolean canProceedJob(){
  NlputilsFormComposite.updateStatusMessage(getViewSite(),null,null);
  boolean canProceed=true;
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  String message=OutputPathValidation.getInstance().validateOutputDirectory(layoutData.getOutputLabel().getText(),""String_Node_Str"");
  if (message != null) {
    message=layoutData.getOutputLabel().getText() + ""String_Node_Str"" + message;
    form.getMessageManager().addMessage(""String_Node_Str"",message,null,IMessageProvider.ERROR);
    canProceed=false;
  }
  String inputMessage=OutputPathValidation.getInstance().validateOutputDirectory(inputLayoutData.getOutputLabel().getText(),""String_Node_Str"");
  if (inputMessage != null) {
    inputMessage=inputLayoutData.getOutputLabel().getText() + ""String_Node_Str"" + inputMessage;
    form.getMessageManager().addMessage(""String_Node_Str"",inputMessage,null,IMessageProvider.ERROR);
    canProceed=false;
  }
  String seedFileMsg=OutputPathValidation.getInstance().validateOutputDirectory(seedFileText.getText(),""String_Node_Str"");
  if (seedFileMsg != null) {
    seedFileMsg=seedFileText.getText() + ""String_Node_Str"" + seedFileMsg;
    form.getMessageManager().addMessage(""String_Node_Str"",seedFileMsg,null,IMessageProvider.ERROR);
    canProceed=false;
  }
  if (Integer.parseInt(topics.getText()) < 1) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    canProceed=false;
  }
  return canProceed;
}",0.997922232116355
168196,"protected boolean updateLocationTree(String path){
  if (this.locationPaths == null) {
    this.locationPaths=new ArrayList<TreeParent>();
  }
  if (!path.equals(""String_Node_Str"")) {
    if (this.locationPaths.contains(path)) {
      return false;
    }
    TreeParent node=new TreeParent(path);
    if (new File(path).isDirectory()) {
      processSubFiles(node);
    }
    this.locationPaths.add(node);
    this.fTreeViewer.refresh();
    this.fTreeViewer.setChecked(node,true);
    fTreeViewer.setSubtreeChecked(node,true);
  }
  return true;
}","protected boolean updateLocationTree(String[] path){
  if (this.locationPaths == null) {
    this.locationPaths=new ArrayList<TreeParent>();
  }
  if (!path.equals(""String_Node_Str"")) {
    if (checkExistensence(path)) {
      return false;
    }
    for (    String file : path) {
      TreeParent node=new TreeParent(file);
      if (new File(file).isDirectory()) {
        processSubFiles(node);
      }
      this.locationPaths.add(node);
      this.fTreeViewer.refresh();
      this.fTreeViewer.setChecked(node,true);
      fTreeViewer.setSubtreeChecked(node,true);
    }
  }
  return true;
}",0.6969432314410481
168197,"/** 
 * Sets up the tree viewer using the given tree
 * @param tree
 */
private void initializeTreeViewer(Composite tree){
  fTreeViewer=new CheckboxTreeViewer(tree,SWT.NONE);
  fTreeViewer.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  fTreeViewer.setContentProvider(new TargetLocationContentProvider());
  fTreeViewer.setLabelProvider(new TargetLocationLabelProvider());
  if (this.locationPaths == null) {
    this.locationPaths=new ArrayList<TreeParent>();
  }
  this.fTreeViewer.setInput(this.locationPaths);
  fTreeViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateButtons();
    }
  }
);
  fTreeViewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      if (!event.getSelection().isEmpty()) {
        handleEdit();
      }
    }
  }
);
  fTreeViewer.addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    CheckStateChangedEvent event){
      fTreeViewer.setSubtreeChecked(event.getElement(),event.getChecked());
    }
  }
);
}","/** 
 * Sets up the tree viewer using the given tree
 * @param tree
 */
private void initializeTreeViewer(Composite tree){
  fTreeViewer=new CheckboxTreeViewer(tree,SWT.NONE | SWT.MULTI);
  fTreeViewer.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  fTreeViewer.setContentProvider(new TargetLocationContentProvider());
  fTreeViewer.setLabelProvider(new TargetLocationLabelProvider());
  if (this.locationPaths == null) {
    this.locationPaths=new ArrayList<TreeParent>();
  }
  this.fTreeViewer.setInput(this.locationPaths);
  fTreeViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateButtons();
    }
  }
);
  fTreeViewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      if (!event.getSelection().isEmpty()) {
        handleEdit();
      }
    }
  }
);
  fTreeViewer.addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    CheckStateChangedEvent event){
      fTreeViewer.setSubtreeChecked(event.getElement(),event.getChecked());
    }
  }
);
}",0.9947552447552448
168198,"/** 
 * Sets up the buttons, the button fields must already be created before calling this method
 */
private void initializeButtons(){
  if (fAddButton != null) {
    fAddButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        DirectoryDialog dlg=new DirectoryDialog(fAddButton.getShell(),SWT.OPEN);
        dlg.setText(""String_Node_Str"");
        boolean cannotExit=false;
        String path=null;
        while (!cannotExit) {
          path=dlg.open();
          if (path == null)           return;
 else {
            cannotExit=updateLocationTree(path);
            if (!cannotExit) {
              ErrorDialog.openError(dlg.getParent(),""String_Node_Str"",""String_Node_Str"",new Status(IStatus.ERROR,CommonUiActivator.PLUGIN_ID,""String_Node_Str""));
            }
          }
        }
      }
    }
);
  }
  fAddFileButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      FileDialog dlg=new FileDialog(fAddFileButton.getShell(),SWT.OPEN);
      dlg.setText(""String_Node_Str"");
      boolean cannotExit=false;
      String path=null;
      while (!cannotExit) {
        path=dlg.open();
        if (path == null)         return;
 else {
          cannotExit=updateLocationTree(path);
          if (!cannotExit) {
            ErrorDialog.openError(dlg.getParent(),""String_Node_Str"",""String_Node_Str"",new Status(IStatus.ERROR,CommonUiActivator.PLUGIN_ID,""String_Node_Str""));
          }
        }
      }
    }
  }
);
  fRemoveButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      handleRemove();
    }
  }
);
  fRemoveButton.setEnabled(true);
  updateButtons();
}","/** 
 * Sets up the buttons, the button fields must already be created before calling this method
 */
private void initializeButtons(){
  if (fAddButton != null) {
    fAddButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        DirectoryDialog dlg=new DirectoryDialog(fAddButton.getShell(),SWT.OPEN);
        dlg.setText(""String_Node_Str"");
        boolean cannotExit=false;
        String path=null;
        while (!cannotExit) {
          path=dlg.open();
          if (path == null)           return;
 else {
            cannotExit=updateLocationTree(new String[]{path});
            if (!cannotExit) {
              ErrorDialog.openError(dlg.getParent(),""String_Node_Str"",""String_Node_Str"",new Status(IStatus.ERROR,CommonUiActivator.PLUGIN_ID,""String_Node_Str""));
            }
          }
        }
      }
    }
);
  }
  fAddFileButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      FileDialog dlg=new FileDialog(fAddFileButton.getShell(),SWT.OPEN | SWT.MULTI);
      dlg.setText(""String_Node_Str"");
      boolean cannotExit=false;
      String path=null;
      while (!cannotExit) {
        path=dlg.open();
        if (path == null)         return;
 else {
          cannotExit=updateLocationTree(dlg.getFileNames());
          if (!cannotExit) {
            ErrorDialog.openError(dlg.getParent(),""String_Node_Str"",""String_Node_Str"",new Status(IStatus.ERROR,CommonUiActivator.PLUGIN_ID,""String_Node_Str""));
          }
        }
      }
    }
  }
);
  fRemoveButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      handleRemove();
    }
  }
);
  fRemoveButton.setEnabled(true);
  updateButtons();
}",0.9866071428571428
168199,"public CrawlerJob(String filter,String outputDir,String crawlUrl,String url,IProgressMonitor monitor){
  this.filter=filter;
  this.outputDir=outputDir;
  this.truncate=false;
  this.downloadAudio=false;
  this.baseUrl=crawlUrl;
  this.url=url;
  this.monitor=monitor;
}","public CrawlerJob(String filter,String outputDir,String crawlUrl,String url,IProgressMonitor monitor,boolean downloadAudio,boolean truncate){
  this.filter=filter;
  this.outputDir=outputDir;
  this.truncate=truncate;
  this.downloadAudio=downloadAudio;
  this.baseUrl=crawlUrl;
  this.url=url;
  this.monitor=monitor;
}",0.8847457627118644
168200,"public void looper(IProgressMonitor monitor) throws IOException {
  int noOfPages=0;
  Document doc=Jsoup.connect(url).timeout(10 * 1000).get();
  Elements pages=doc.getElementsByClass(""String_Node_Str"");
  if (!pages.isEmpty()) {
    Element pageList=pages.get(0);
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    Matcher matcher=pattern.matcher(pageList.toString());
    if (matcher.find()) {
      noOfPages=Integer.parseInt(matcher.group(1));
    }
  }
  monitor.beginTask(""String_Node_Str"",noOfPages);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  for (int i=0; i <= noOfPages; i++) {
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    monitor.subTask(""String_Node_Str"" + url);
    new CrawlerJob(this.filter,getOutputDir(),this.baseUrl,url + ""String_Node_Str"" + i,monitor).run();
    monitor.worked(1);
  }
}","public void looper(IProgressMonitor monitor) throws IOException {
  int noOfPages=0;
  Document doc=Jsoup.connect(url).timeout(10 * 1000).get();
  Elements pages=doc.getElementsByClass(""String_Node_Str"");
  if (!pages.isEmpty()) {
    Element pageList=pages.get(0);
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    Matcher matcher=pattern.matcher(pageList.toString());
    if (matcher.find()) {
      noOfPages=Integer.parseInt(matcher.group(1));
    }
  }
  monitor.beginTask(""String_Node_Str"",noOfPages);
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  for (int i=0; i <= noOfPages; i++) {
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    monitor.subTask(""String_Node_Str"" + url);
    new CrawlerJob(this.filter,getOutputDir(),this.baseUrl,url + ""String_Node_Str"" + i,monitor,isDownloadAudio(),isTruncate()).run();
    monitor.worked(1);
  }
}",0.9599561162918266
168201,"protected boolean canProceed(){
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  List<String> class1Files=class1LayoutData.getSelectedFiles();
  List<String> class2Files=class2LayoutData.getSelectedFiles();
  boolean noProperFiles=true;
  if (class1Files.size() < 1) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  form.getMessageManager().removeMessage(""String_Node_Str"");
  for (  String string : class1Files) {
    if (new File(string).isFile() && !string.contains(""String_Node_Str"")) {
      noProperFiles=false;
      break;
    }
  }
  if (noProperFiles) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  if (class1Files.size() < 1) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  form.getMessageManager().removeMessage(""String_Node_Str"");
  for (  String string : class2Files) {
    if (new File(string).isFile() && !string.contains(""String_Node_Str"")) {
      noProperFiles=false;
      break;
    }
  }
  if (noProperFiles) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  if (class1Name.getText().trim().length() == 0) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  form.getMessageManager().removeMessage(""String_Node_Str"");
  if (class2Name.getText().trim().length() == 0) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  form.getMessageManager().removeMessage(""String_Node_Str"");
  if (class2Name.getText().trim().equals(class1Name.getText().trim())) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  form.getMessageManager().removeMessage(""String_Node_Str"");
  String kValueText=kValue.getText();
  if (kValueText.trim().length() == 0) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  form.getMessageManager().removeMessage(""String_Node_Str"");
  int value=0;
  try {
    value=Integer.parseInt(kValueText);
  }
 catch (  NumberFormatException e) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
catch (  NullPointerException e) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  if (value < 0) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  form.getMessageManager().removeMessage(""String_Node_Str"");
  String message=OutputPathValidation.getInstance().validateOutputDirectory(layoutData.getOutputLabel().getText(),""String_Node_Str"");
  if (message != null) {
    message=layoutData.getOutputLabel().getText() + ""String_Node_Str"" + message;
    form.getMessageManager().addMessage(""String_Node_Str"",message,null,IMessageProvider.ERROR);
    return false;
  }
  form.getMessageManager().removeMessage(""String_Node_Str"");
  return true;
}","protected boolean canProceed(){
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  form.getMessageManager().removeMessage(""String_Node_Str"");
  List<String> class1Files=class1LayoutData.getSelectedFiles();
  List<String> class2Files=class2LayoutData.getSelectedFiles();
  boolean noProperFiles=true;
  if (class1Files.size() < 1) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  form.getMessageManager().removeMessage(""String_Node_Str"");
  for (  String string : class1Files) {
    if (new File(string).isFile() && !string.contains(""String_Node_Str"")) {
      noProperFiles=false;
      break;
    }
  }
  if (noProperFiles) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  noProperFiles=true;
  if (class2Files.size() < 1) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  form.getMessageManager().removeMessage(""String_Node_Str"");
  for (  String string : class2Files) {
    if (new File(string).isFile() && !string.contains(""String_Node_Str"")) {
      noProperFiles=false;
      break;
    }
  }
  if (noProperFiles) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  if (class1Name.getText().trim().length() == 0) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  form.getMessageManager().removeMessage(""String_Node_Str"");
  if (class2Name.getText().trim().length() == 0) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  form.getMessageManager().removeMessage(""String_Node_Str"");
  if (class2Name.getText().trim().equals(class1Name.getText().trim())) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  form.getMessageManager().removeMessage(""String_Node_Str"");
  String kValueText=kValue.getText();
  if (kValueText.trim().length() == 0) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  form.getMessageManager().removeMessage(""String_Node_Str"");
  int value=0;
  try {
    value=Integer.parseInt(kValueText);
  }
 catch (  NumberFormatException e) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
catch (  NullPointerException e) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  if (value < 0) {
    form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
    return false;
  }
  form.getMessageManager().removeMessage(""String_Node_Str"");
  String message=OutputPathValidation.getInstance().validateOutputDirectory(layoutData.getOutputLabel().getText(),""String_Node_Str"");
  if (message != null) {
    message=layoutData.getOutputLabel().getText() + ""String_Node_Str"" + message;
    form.getMessageManager().addMessage(""String_Node_Str"",message,null,IMessageProvider.ERROR);
    return false;
  }
  form.getMessageManager().removeMessage(""String_Node_Str"");
  return true;
}",0.9969504447268108
168202,"/** 
 * Adds ""Classify"" and ""Help"" buttons on the Naive Bayes Classifier form
 */
private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
      ArrayList<String> trainingDataPaths=new ArrayList<String>();
      ArrayList<String> tempTrainingDataPaths=new ArrayList<String>();
      TreeItem trainingDataset=trainingClassPathTree.getItem(0);
      for (      TreeItem ti : trainingDataset.getItems()) {
        tempTrainingDataPaths.add(ti.getData().toString());
      }
      Job job=new Job(""String_Node_Str""){
        private boolean isPreprocessEnabled=false;
        private String pp_outputPath=null;
        String classificationInputDir=classifyInputText.getText();
        String classificationOutputDir=classifyOutputText.getText();
        @Override protected IStatus run(        IProgressMonitor monitor){
          NaiveBayesClassifier nbc=new NaiveBayesClassifier();
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              isPreprocessEnabled=preprocessEnabled.getSelection();
              pp_outputPath=CommonUiActivator.getDefault().getPreferenceStore().getString(""String_Node_Str"");
              if (pp_outputPath.isEmpty()) {
                form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
              }
 else {
                form.getMessageManager().removeMessage(""String_Node_Str"");
              }
            }
          }
);
          if (isPreprocessEnabled) {
            if (pp_outputPath.isEmpty()) {
              return Status.CANCEL_STATUS;
            }
            monitor.subTask(""String_Node_Str"");
            try {
              preprocessTask=new Preprocess(""String_Node_Str"");
              for (              String dir : tempTrainingDataPaths) {
                String preprocessedDirPath=preprocessDirectory(dir);
                trainingDataPaths.add(preprocessedDirPath);
              }
              preprocessTask=new Preprocess(""String_Node_Str"");
              classificationInputDir=preprocessDirectory(classificationInputDir);
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
 else {
            for (            String path : tempTrainingDataPaths) {
              trainingDataPaths.add(path);
            }
          }
          if (canItProceedClassification(trainingDataPaths,classificationInputDir,classificationOutputDir)) {
            long startTime=System.currentTimeMillis();
            monitor.subTask(""String_Node_Str"");
            try {
              nbc.classify(trainingDataPaths,classificationInputDir,classificationOutputDir,false,false);
            }
 catch (            FileNotFoundException e1) {
              e1.printStackTrace();
            }
catch (            IOException e1) {
              e1.printStackTrace();
            }
catch (            EvalError e1) {
              e1.printStackTrace();
            }
            if (monitor.isCanceled()) {
              return Status.CANCEL_STATUS;
            }
            System.out.println(""String_Node_Str"");
            monitor.done();
            System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
            NlputilsFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK);
            return Status.OK_STATUS;
          }
          return Status.CANCEL_STATUS;
        }
      }
;
      job.setUser(true);
      job.schedule();
    }
  }
);
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
    }
  }
);
  form.getToolBarManager().update(true);
}","/** 
 * Adds ""Classify"" and ""Help"" buttons on the Naive Bayes Classifier form
 */
private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
      ArrayList<String> trainingDataPaths=new ArrayList<String>();
      ArrayList<String> tempTrainingDataPaths=new ArrayList<String>();
      TreeItem trainingDataset=trainingClassPathTree.getItem(0);
      for (      TreeItem ti : trainingDataset.getItems()) {
        tempTrainingDataPaths.add(ti.getData().toString());
      }
      Job job=new Job(""String_Node_Str""){
        private boolean isPreprocessEnabled=false;
        private String pp_outputPath=null;
        String classificationInputDir=classifyInputText.getText();
        String classificationOutputDir=classifyOutputText.getText();
        @Override protected IStatus run(        IProgressMonitor monitor){
          NaiveBayesClassifier nbc=new NaiveBayesClassifier();
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              isPreprocessEnabled=preprocessEnabled.getSelection();
              pp_outputPath=CommonUiActivator.getDefault().getPreferenceStore().getString(""String_Node_Str"");
              if (pp_outputPath.isEmpty()) {
                form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
              }
 else {
                form.getMessageManager().removeMessage(""String_Node_Str"");
              }
              if (!isPreprocessEnabled) {
                form.getMessageManager().removeMessage(""String_Node_Str"");
              }
            }
          }
);
          if (isPreprocessEnabled) {
            if (pp_outputPath.isEmpty()) {
              return Status.CANCEL_STATUS;
            }
            monitor.subTask(""String_Node_Str"");
            try {
              preprocessTask=new Preprocess(""String_Node_Str"");
              for (              String dir : tempTrainingDataPaths) {
                String preprocessedDirPath=preprocessDirectory(dir);
                trainingDataPaths.add(preprocessedDirPath);
              }
              preprocessTask=new Preprocess(""String_Node_Str"");
              classificationInputDir=preprocessDirectory(classificationInputDir);
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
 else {
            for (            String path : tempTrainingDataPaths) {
              trainingDataPaths.add(path);
            }
          }
          if (canItProceedClassification(trainingDataPaths,classificationInputDir,classificationOutputDir)) {
            long startTime=System.currentTimeMillis();
            monitor.subTask(""String_Node_Str"");
            try {
              nbc.classify(trainingDataPaths,classificationInputDir,classificationOutputDir,false,false);
            }
 catch (            FileNotFoundException e1) {
              e1.printStackTrace();
            }
catch (            IOException e1) {
              e1.printStackTrace();
            }
catch (            EvalError e1) {
              e1.printStackTrace();
            }
            if (monitor.isCanceled()) {
              return Status.CANCEL_STATUS;
            }
            System.out.println(""String_Node_Str"");
            monitor.done();
            System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
            NlputilsFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK);
            return Status.OK_STATUS;
          }
          return Status.CANCEL_STATUS;
        }
      }
;
      job.setUser(true);
      job.schedule();
    }
  }
);
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
    }
  }
);
  form.getToolBarManager().update(true);
}",0.9844934126151336
168203,"/** 
 * Creates a test section for Naive Bayes Classifier
 * @param parent - Parent composite
 * @param toolkit
 * @param layout - The layout to be applied on the section
 * @param title - Title for the section
 * @param description - Description for the section.
 */
private void createTestSection(final Composite parent,FormToolkit toolkit,GridLayout layout,String title,String description){
  Section section=toolkit.createSection(parent,Section.TITLE_BAR | Section.EXPANDED | Section.DESCRIPTION);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(section);
  GridLayoutFactory.fillDefaults().numColumns(3).applyTo(section);
  section.setText(title);
  section.setDescription(description);
  ScrolledComposite sc=new ScrolledComposite(section,SWT.H_SCROLL | SWT.V_SCROLL);
  sc.setExpandHorizontal(true);
  sc.setExpandVertical(true);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sc);
  Composite sectionClient=toolkit.createComposite(section);
  sc.setContent(sectionClient);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(sc);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sectionClient);
  section.setClient(sectionClient);
  NlputilsFormComposite.createEmptyRow(toolkit,sectionClient);
  testOutputPath=createBrowseButton(toolkit,sectionClient,""String_Node_Str"",""String_Node_Str"");
  Label temp1=toolkit.createLabel(sectionClient,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(temp1);
  Label temp2=toolkit.createLabel(sectionClient,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(temp2);
  Button testButton=new Button(sectionClient,SWT.PUSH);
  testButton.setText(""String_Node_Str"");
  testButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      ArrayList<String> trainingDataPaths=new ArrayList<String>();
      ArrayList<String> tempTrainingDataPaths=new ArrayList<String>();
      TreeItem trainingDataset=trainingClassPathTree.getItem(0);
      for (      TreeItem ti : trainingDataset.getItems()) {
        tempTrainingDataPaths.add(ti.getData().toString());
      }
      ArrayList<String> tempTestingDataPaths=new ArrayList<String>();
      ArrayList<String> testingDataPaths=new ArrayList<String>();
      TreeItem testingDataset=testingClassPathTree.getItem(0);
      for (      TreeItem ti : testingDataset.getItems()) {
        tempTestingDataPaths.add(ti.getData().toString());
      }
      String testTrainOutputPath=testOutputPath.getText();
      Job job=new Job(""String_Node_Str""){
        private boolean isPreprocessEnabled=false;
        private String pp_outputPath=null;
        @Override protected IStatus run(        IProgressMonitor monitor){
          NaiveBayesClassifier nbc=new NaiveBayesClassifier();
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              isPreprocessEnabled=preprocessEnabled.getSelection();
              pp_outputPath=CommonUiActivator.getDefault().getPreferenceStore().getString(""String_Node_Str"");
              if (pp_outputPath.isEmpty()) {
                form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
              }
 else {
                form.getMessageManager().removeMessage(""String_Node_Str"");
              }
            }
          }
);
          if (isPreprocessEnabled) {
            if (pp_outputPath.isEmpty()) {
              return Status.CANCEL_STATUS;
            }
            monitor.subTask(""String_Node_Str"");
            try {
              preprocessTask=new Preprocess(""String_Node_Str"");
              for (              String dir : tempTrainingDataPaths) {
                String preprocessedDirPath=preprocessDirectory(dir);
                trainingDataPaths.add(preprocessedDirPath);
              }
              preprocessTask=new Preprocess(""String_Node_Str"");
              for (              String dir : tempTestingDataPaths) {
                String preprocessedDirPath=preprocessDirectory(dir);
                testingDataPaths.add(preprocessedDirPath);
              }
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
 else {
            for (            String path : tempTrainingDataPaths) {
              trainingDataPaths.add(path);
            }
            for (            String path : tempTestingDataPaths) {
              testingDataPaths.add(path);
            }
          }
          long startTime=System.currentTimeMillis();
          try {
            monitor.subTask(""String_Node_Str"");
            nbc.train_Test(trainingDataPaths,testingDataPaths,testTrainOutputPath,false,false);
          }
 catch (          FileNotFoundException e1) {
            e1.printStackTrace();
          }
catch (          IOException e1) {
            e1.printStackTrace();
          }
catch (          EvalError e1) {
            e1.printStackTrace();
          }
          if (monitor.isCanceled()) {
            return Status.CANCEL_STATUS;
          }
          System.out.println(""String_Node_Str"");
          monitor.done();
          System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
          NlputilsFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK);
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      job.schedule();
    }
  }
);
  NlputilsFormComposite.createEmptyRow(toolkit,sectionClient);
}","/** 
 * Creates a test section for Naive Bayes Classifier
 * @param parent - Parent composite
 * @param toolkit
 * @param layout - The layout to be applied on the section
 * @param title - Title for the section
 * @param description - Description for the section.
 */
private void createTestSection(final Composite parent,FormToolkit toolkit,GridLayout layout,String title,String description){
  Section section=toolkit.createSection(parent,Section.TITLE_BAR | Section.EXPANDED | Section.DESCRIPTION);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(section);
  GridLayoutFactory.fillDefaults().numColumns(3).applyTo(section);
  section.setText(title);
  section.setDescription(description);
  ScrolledComposite sc=new ScrolledComposite(section,SWT.H_SCROLL | SWT.V_SCROLL);
  sc.setExpandHorizontal(true);
  sc.setExpandVertical(true);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sc);
  Composite sectionClient=toolkit.createComposite(section);
  sc.setContent(sectionClient);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(sc);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sectionClient);
  section.setClient(sectionClient);
  NlputilsFormComposite.createEmptyRow(toolkit,sectionClient);
  testOutputPath=createBrowseButton(toolkit,sectionClient,""String_Node_Str"",""String_Node_Str"");
  Label temp1=toolkit.createLabel(sectionClient,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(temp1);
  Label temp2=toolkit.createLabel(sectionClient,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(temp2);
  Button testButton=new Button(sectionClient,SWT.PUSH);
  testButton.setText(""String_Node_Str"");
  testButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      ArrayList<String> trainingDataPaths=new ArrayList<String>();
      ArrayList<String> tempTrainingDataPaths=new ArrayList<String>();
      TreeItem trainingDataset=trainingClassPathTree.getItem(0);
      for (      TreeItem ti : trainingDataset.getItems()) {
        tempTrainingDataPaths.add(ti.getData().toString());
      }
      ArrayList<String> tempTestingDataPaths=new ArrayList<String>();
      ArrayList<String> testingDataPaths=new ArrayList<String>();
      TreeItem testingDataset=testingClassPathTree.getItem(0);
      for (      TreeItem ti : testingDataset.getItems()) {
        tempTestingDataPaths.add(ti.getData().toString());
      }
      String testTrainOutputPath=testOutputPath.getText();
      Job job=new Job(""String_Node_Str""){
        private boolean isPreprocessEnabled=false;
        private String pp_outputPath=null;
        @Override protected IStatus run(        IProgressMonitor monitor){
          NaiveBayesClassifier nbc=new NaiveBayesClassifier();
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              isPreprocessEnabled=preprocessEnabled.getSelection();
              pp_outputPath=CommonUiActivator.getDefault().getPreferenceStore().getString(""String_Node_Str"");
              if (pp_outputPath.isEmpty()) {
                form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
              }
 else {
                form.getMessageManager().removeMessage(""String_Node_Str"");
              }
              if (!isPreprocessEnabled) {
                form.getMessageManager().removeMessage(""String_Node_Str"");
              }
            }
          }
);
          if (isPreprocessEnabled) {
            if (pp_outputPath.isEmpty()) {
              return Status.CANCEL_STATUS;
            }
            monitor.subTask(""String_Node_Str"");
            try {
              preprocessTask=new Preprocess(""String_Node_Str"");
              for (              String dir : tempTrainingDataPaths) {
                String preprocessedDirPath=preprocessDirectory(dir);
                trainingDataPaths.add(preprocessedDirPath);
              }
              preprocessTask=new Preprocess(""String_Node_Str"");
              for (              String dir : tempTestingDataPaths) {
                String preprocessedDirPath=preprocessDirectory(dir);
                testingDataPaths.add(preprocessedDirPath);
              }
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
 else {
            for (            String path : tempTrainingDataPaths) {
              trainingDataPaths.add(path);
            }
            for (            String path : tempTestingDataPaths) {
              testingDataPaths.add(path);
            }
          }
          long startTime=System.currentTimeMillis();
          try {
            monitor.subTask(""String_Node_Str"");
            nbc.train_Test(trainingDataPaths,testingDataPaths,testTrainOutputPath,false,false);
          }
 catch (          FileNotFoundException e1) {
            e1.printStackTrace();
          }
catch (          IOException e1) {
            e1.printStackTrace();
          }
catch (          EvalError e1) {
            e1.printStackTrace();
          }
          if (monitor.isCanceled()) {
            return Status.CANCEL_STATUS;
          }
          System.out.println(""String_Node_Str"");
          monitor.done();
          System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
          NlputilsFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK);
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      job.schedule();
    }
  }
);
  NlputilsFormComposite.createEmptyRow(toolkit,sectionClient);
}",0.9883670077844836
168204,"public int[] process(String line,HashMap<String,Integer> map){
  int ret[]=new int[3];
  int numWords=0;
  int sixltr=0;
  int numerals=0;
  Matcher matcher=pattern.matcher(line);
  if (doLower)   line=line.toLowerCase();
  if (phraseDetect) {
    for (    String key : phraseLookup.keySet()) {
      Pattern p, justp;
      if (key.endsWith(""String_Node_Str"")) {
        p=Pattern.compile(""String_Node_Str"" + key + ""String_Node_Str"");
        justp=Pattern.compile(key + ""String_Node_Str"");
        key=key.substring(0,key.length() - 1);
      }
 else {
        p=Pattern.compile(""String_Node_Str"" + key + ""String_Node_Str"");
        justp=Pattern.compile(key + ""String_Node_Str"");
      }
      int wordsInPhrase=key.split(""String_Node_Str"").length;
      Matcher m=p.matcher(line);
      ArrayList<Integer> indexes=new ArrayList<Integer>();
      while (m.find()) {
        String match=m.group();
        indexes.add(m.start() + 1);
        indexes.add(m.end());
        numWords=numWords + wordsInPhrase;
        sixltr=sixltr + bigWords(match);
        Object value=map.get(key);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(key,i + wordsInPhrase);
        }
 else {
          map.put(key,wordsInPhrase);
        }
      }
      for (int i=0; i < indexes.size(); i=i + 2) {
        line=line.substring(0,indexes.get(i)) + line.substring(indexes.get(i + 1));
        int diff=indexes.get(i + 1) - indexes.get(i);
        for (int j=0; j < indexes.size(); j++)         indexes.set(j,indexes.get(j) - diff);
      }
      indexes.clear();
      Matcher m2=justp.matcher(line);
      while (m2.find()) {
        String match=m2.group();
        indexes.add(m2.start());
        indexes.add(m2.end());
        numWords=numWords + wordsInPhrase;
        sixltr=sixltr + bigWords(match);
        Object value=map.get(key);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(key,i + wordsInPhrase);
        }
 else {
          map.put(key,wordsInPhrase);
        }
      }
      for (int i=0; i < indexes.size(); i=i + 2) {
        line=line.substring(0,indexes.get(i)) + line.substring(indexes.get(i + 1));
        int diff=indexes.get(i + 1) - indexes.get(i);
        for (int j=0; j < indexes.size(); j++)         indexes.set(j,indexes.get(j) - diff);
      }
    }
  }
  StringTokenizer st=new StringTokenizer(line,delimiters);
  String currentWord=null;
  if (st.hasMoreTokens())   currentWord=trimChars(st.nextToken(),punctuations);
  do {
    String nextWord=null;
    if (st.hasMoreTokens())     nextWord=trimChars(st.nextToken(),punctuations);
    if (currentWord == null || currentWord.equals(""String_Node_Str""))     continue;
    matcher=pattern.matcher(currentWord);
    while (matcher.find()) {
      numerals++;
    }
    if (doSnowballStemming) {
      stemmer.setCurrent(currentWord);
      String stemmedWord=""String_Node_Str"";
      if (stemmer.stem())       stemmedWord=stemmer.getCurrent();
      if (!stemmedWord.equals(""String_Node_Str""))       currentWord=stemmedWord;
    }
    if (doStopWords)     if (stopWordSet.contains(currentWord))     continue;
    Matcher word=regularPattern.matcher(currentWord);
    if (word.find()) {
      numWords=numWords + 1;
      if (currentWord.length() > 6) {
        sixltr=sixltr + 1;
      }
    }
    boolean treatAsOne=true;
    Matcher dh=doubleHyphenPattern.matcher(currentWord);
    if (dh.find()) {
      currentWord=currentWord.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase();
      if (categorizer.query(currentWord) != null && !categorizer.checkHyphen(currentWord)) {
        Object value=map.get(currentWord);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(currentWord,i + 1);
        }
 else {
          map.put(currentWord,1);
        }
        String[] words=currentWord.split(""String_Node_Str"");
        int hyphened=0;
        for (        String s : words) {
          hyphened++;
        }
        weirdDashCount=weirdDashCount + hyphened;
      }
 else {
        String[] words=currentWord.split(""String_Node_Str"");
        int hyphened=-1;
        for (        String s : words) {
          hyphened++;
        }
        if (categorizer.query(currentWord) != null) {
          Object value=map.get(currentWord);
          if (value != null) {
            int i=((Integer)value).intValue();
            map.put(words[0],i + 1);
          }
 else {
            map.put(words[0],1);
          }
          numWords=numWords + hyphened;
          treatAsOne=true;
        }
 else {
          numWords=numWords + hyphened;
          if (categorizer.query(words[0]) != null) {
            Object value=map.get(words[0]);
            if (value != null) {
              int i=((Integer)value).intValue();
              map.put(words[0],i + 1);
            }
 else {
              map.put(words[0],1);
            }
          }
          treatAsOne=false;
        }
        if (treatAsOne)         weirdDashCount++;
 else         weirdDashCount=weirdDashCount + hyphened;
      }
    }
 else {
      Matcher cm=compoundPattern.matcher(currentWord);
      if (cm.find()) {
        String[] words=currentWord.split(""String_Node_Str"");
        int hyphened=-1;
        for (        String s : words) {
          if (s == null || s.equals(""String_Node_Str""))           continue;
          hyphened++;
        }
        if (categorizer.query(currentWord.toLowerCase()) == null) {
          numWords=numWords + hyphened;
          treatAsOne=false;
        }
 else         weirdDashCount=weirdDashCount + 1;
      }
      if (treatAsOne) {
        Object value=map.get(currentWord);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(currentWord,i + 1);
        }
 else {
          map.put(currentWord,1);
        }
      }
 else {
        String[] parts=currentWord.split(""String_Node_Str"");
        for (        String part : parts) {
          if (part == null || part.equals(""String_Node_Str""))           continue;
          Object value=map.get(part);
          if (value != null) {
            int i=((Integer)value).intValue();
            map.put(part,i + 1);
          }
 else {
            map.put(part,1);
          }
        }
      }
    }
    currentWord=nextWord;
  }
 while (st.hasMoreTokens());
  ret[0]=numWords;
  ret[1]=sixltr;
  ret[2]=numerals;
  return ret;
}","public int[] process(String line,HashMap<String,Integer> map){
  int ret[]=new int[3];
  int numWords=0;
  int sixltr=0;
  int numerals=0;
  Matcher matcher=pattern.matcher(line);
  if (doLower)   line=line.toLowerCase();
  if (phraseDetect) {
    for (    String key : phraseLookup.keySet()) {
      Pattern p, justp;
      if (key.endsWith(""String_Node_Str"")) {
        p=Pattern.compile(""String_Node_Str"" + key + ""String_Node_Str"");
        justp=Pattern.compile(key + ""String_Node_Str"");
        key=key.substring(0,key.length() - 1);
      }
 else {
        p=Pattern.compile(""String_Node_Str"" + key + ""String_Node_Str"");
        justp=Pattern.compile(key + ""String_Node_Str"");
      }
      int wordsInPhrase=key.split(""String_Node_Str"").length;
      Matcher m=p.matcher(line);
      ArrayList<Integer> indexes=new ArrayList<Integer>();
      while (m.find()) {
        String match=m.group();
        indexes.add(m.start() + 1);
        indexes.add(m.end());
        numWords=numWords + wordsInPhrase;
        sixltr=sixltr + bigWords(match);
        Object value=map.get(key);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(key,i + wordsInPhrase);
        }
 else {
          map.put(key,wordsInPhrase);
        }
      }
      for (int i=0; i < indexes.size(); i=i + 2) {
        line=line.substring(0,indexes.get(i)) + line.substring(indexes.get(i + 1));
        int diff=indexes.get(i + 1) - indexes.get(i);
        for (int j=0; j < indexes.size(); j++)         indexes.set(j,indexes.get(j) - diff);
      }
      indexes.clear();
      Matcher m2=justp.matcher(line);
      while (m2.find()) {
        String match=m2.group();
        indexes.add(m2.start());
        indexes.add(m2.end());
        numWords=numWords + wordsInPhrase;
        sixltr=sixltr + bigWords(match);
        Object value=map.get(key);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(key,i + wordsInPhrase);
        }
 else {
          map.put(key,wordsInPhrase);
        }
      }
      for (int i=0; i < indexes.size(); i=i + 2) {
        line=line.substring(0,indexes.get(i)) + line.substring(indexes.get(i + 1));
        int diff=indexes.get(i + 1) - indexes.get(i);
        for (int j=0; j < indexes.size(); j++)         indexes.set(j,indexes.get(j) - diff);
      }
    }
  }
  StringTokenizer st=new StringTokenizer(line,delimiters);
  String currentWord=null;
  if (st.hasMoreTokens())   currentWord=trimChars(st.nextToken(),punctuations);
  do {
    String nextWord=null;
    if (st.hasMoreTokens())     nextWord=trimChars(st.nextToken(),punctuations);
    if (currentWord == null || currentWord.equals(""String_Node_Str""))     continue;
    matcher=pattern.matcher(currentWord);
    while (matcher.find()) {
      numerals++;
    }
    if (doSnowballStemming) {
      stemmer.setCurrent(currentWord);
      String stemmedWord=""String_Node_Str"";
      if (stemmer.stem())       stemmedWord=stemmer.getCurrent();
      if (!stemmedWord.equals(""String_Node_Str""))       currentWord=stemmedWord;
    }
    if (doStopWords)     if (stopWordSet.contains(currentWord))     continue;
    Matcher word=regularPattern.matcher(currentWord);
    if (word.find()) {
      numWords=numWords + 1;
      if (currentWord.length() > 6) {
        sixltr=sixltr + 1;
      }
    }
    boolean treatAsOne=true;
    Matcher dh=doubleHyphenPattern.matcher(currentWord);
    if (dh.find()) {
      currentWord=currentWord.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase();
      if (categorizer.query(currentWord) != null && !categorizer.checkHyphen(currentWord)) {
        Object value=map.get(currentWord);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(currentWord,i + 1);
        }
 else {
          map.put(currentWord,1);
        }
        String[] words=currentWord.split(""String_Node_Str"");
        int hyphened=0;
        for (        String s : words) {
          hyphened++;
        }
        weirdDashCount=weirdDashCount + hyphened;
      }
 else {
        String[] words=currentWord.split(""String_Node_Str"");
        int hyphened=-1;
        for (        String s : words) {
          hyphened++;
        }
        if (categorizer.query(currentWord) != null) {
          Object value=map.get(currentWord);
          if (value != null) {
            int i=((Integer)value).intValue();
            map.put(words[0],i + 1);
          }
 else {
            map.put(words[0],1);
          }
          numWords=numWords + hyphened;
          treatAsOne=true;
        }
 else {
          numWords=numWords + hyphened;
          if (categorizer.query(words[0]) != null) {
            Object value=map.get(words[0]);
            if (value != null) {
              int i=((Integer)value).intValue();
              map.put(words[0],i + 1);
            }
 else {
              map.put(words[0],1);
            }
          }
          treatAsOne=false;
        }
        if (treatAsOne)         weirdDashCount++;
 else         weirdDashCount=weirdDashCount + hyphened;
      }
    }
 else {
      Matcher cm=compoundPattern.matcher(currentWord);
      if (cm.find()) {
        String[] words=currentWord.split(""String_Node_Str"");
        int hyphened=-1;
        for (        String s : words) {
          if (s == null || s.equals(""String_Node_Str""))           continue;
          hyphened++;
        }
        if (categorizer.query(currentWord.toLowerCase()) == null) {
          numWords=numWords + hyphened;
          treatAsOne=false;
        }
 else         weirdDashCount=weirdDashCount + 1;
      }
      if (treatAsOne) {
        Object value=map.get(currentWord);
        if (value != null) {
          int i=((Integer)value).intValue();
          map.put(currentWord,i + 1);
        }
 else {
          map.put(currentWord,1);
        }
      }
 else {
        String[] parts=currentWord.split(""String_Node_Str"");
        for (        String part : parts) {
          if (part == null || part.equals(""String_Node_Str""))           continue;
          Object value=map.get(part);
          if (value != null) {
            int i=((Integer)value).intValue();
            map.put(part,i + 1);
          }
 else {
            map.put(part,1);
          }
        }
      }
    }
    currentWord=nextWord;
  }
 while (st.hasMoreTokens() || null != currentWord);
  ret[0]=numWords;
  ret[1]=sixltr;
  ret[2]=numerals;
  return ret;
}",0.9982149786573536
168205,"private void validateTextbox(Text textBox,String label){
  if (textBox.getText().isEmpty()) {
    form.getMessageManager().removeMessage(label);
    return;
  }
  File tempFile=new File(textBox.getText());
  if (!tempFile.exists() || !tempFile.isDirectory()) {
    form.getMessageManager().addMessage(label,label + ""String_Node_Str"",null,IMessageProvider.ERROR);
  }
 else {
    form.getMessageManager().removeMessage(label);
  }
}","/** 
 * To validate the given text box
 * @param textBox
 * @param label
 */
private void validateTextbox(Text textBox,String label){
  if (textBox.getText().isEmpty()) {
    form.getMessageManager().removeMessage(label);
    return;
  }
  File tempFile=new File(textBox.getText());
  if (!tempFile.exists() || !tempFile.isDirectory()) {
    form.getMessageManager().addMessage(label,label + ""String_Node_Str"",null,IMessageProvider.ERROR);
  }
 else {
    form.getMessageManager().removeMessage(label);
  }
}",0.9179978700745474
168206,"private boolean isDirectoryValid(String path){
  if (path.isEmpty())   return false;
  File tempFile=new File(path);
  if (!tempFile.exists() || !tempFile.isDirectory())   return false;
 else   return true;
}","/** 
 * To check whether the given path is a valid directory
 * @param path
 * @return
 */
private boolean isDirectoryValid(String path){
  if (path.isEmpty())   return false;
  File tempFile=new File(path);
  if (!tempFile.exists() || !tempFile.isDirectory())   return false;
 else   return true;
}",0.8205128205128205
168207,"/** 
 * Creates a input section for Naive Bayes Classifier
 * @param parent - Parent composite
 * @param toolkit
 * @param layout - The layout to be applied on the section
 * @param title - Title for the section
 * @param description - Description for the section.
 */
private void createInputSection(final Composite parent,FormToolkit toolkit,GridLayout layout,String title,String description){
  Section section=toolkit.createSection(parent,Section.TITLE_BAR | Section.EXPANDED | Section.DESCRIPTION);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(section);
  GridLayoutFactory.fillDefaults().numColumns(3).applyTo(section);
  section.setText(title);
  section.setDescription(description);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  section.setLayoutData(gd);
  Composite client=toolkit.createComposite(section,SWT.NONE);
  client.setLayout(layout);
  NlputilsFormComposite.createEmptyRow(toolkit,client);
  trainingClassPathTree=new Tree(client,SWT.MULTI);
  GridData gd_tree=new GridData(SWT.FILL,SWT.FILL,true,false,1,0);
  gd_tree.heightHint=100;
  trainingClassPathTree.setLayoutData(gd_tree);
  final TreeItem trainingItem=new TreeItem(trainingClassPathTree,SWT.NULL);
  trainingItem.setText(""String_Node_Str"");
  trainingItem.setData(""String_Node_Str"");
  trainingClassPathTree.addListener(SWT.Expand,new Listener(){
    @Override public void handleEvent(    Event event){
      TreeItem root=(TreeItem)event.item;
      File file=new File(root.getData().toString());
      File[] files=file.listFiles();
      if (files == null) {
        return;
      }
 else {
        root.getItems()[0].dispose();
      }
      for (int i=0; i < files.length; i++) {
        TreeItem item=new TreeItem(root,SWT.NULL);
        item.setText(files[i].getName());
        item.setData(files[i]);
        item.setImage(NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImage(IMAGE_FILE_OBJ));
        if (files[i].isDirectory()) {
          item.setImage(NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImage(IMAGE_FOLDER_OBJ));
          new TreeItem(item,SWT.NULL);
        }
      }
    }
  }
);
  testingClassPathTree=new Tree(client,SWT.MULTI);
  testingClassPathTree.setLayoutData(gd_tree);
  final TreeItem testingItem=new TreeItem(testingClassPathTree,SWT.NULL);
  testingItem.setText(""String_Node_Str"");
  testingItem.setData(""String_Node_Str"");
  testingClassPathTree.addListener(SWT.Expand,new Listener(){
    @Override public void handleEvent(    Event event){
      TreeItem root=(TreeItem)event.item;
      File file=new File(root.getData().toString());
      File[] files=file.listFiles();
      if (files == null) {
        return;
      }
 else {
        root.getItems()[0].dispose();
      }
      for (int i=0; i < files.length; i++) {
        TreeItem item=new TreeItem(root,SWT.NULL);
        item.setText(files[i].getName());
        item.setData(files[i]);
        item.setImage(NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImage(IMAGE_FILE_OBJ));
        if (files[i].isDirectory()) {
          item.setImage(NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImage(IMAGE_FOLDER_OBJ));
          new TreeItem(item,SWT.NULL);
        }
      }
    }
  }
);
  Composite buttonComposite=new Composite(client,SWT.NONE);
  GridLayout buttonLayout=new GridLayout();
  buttonLayout.marginWidth=buttonLayout.marginHeight=0;
  buttonLayout.makeColumnsEqualWidth=true;
  buttonComposite.setLayout(buttonLayout);
  buttonComposite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
  Button addClassButton=new Button(buttonComposite,SWT.PUSH);
  addClassButton.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(addClassButton);
  addClassButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Shell shell=parent.getShell();
      ClassifierDialog cDialog=new ClassifierDialog(shell);
      cDialog.create();
      if (cDialog.open() == Window.OK) {
        File file=null;
        TreeItem trainingSubItem=new TreeItem(trainingItem,SWT.NULL);
        trainingSubItem.setText(""String_Node_Str"" + ""String_Node_Str"" + cDialog.getTrainDataPath());
        trainingSubItem.setData(cDialog.getTrainDataPath());
        trainingSubItem.setImage(NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImage(IMAGE_FILE_OBJ));
        file=new File(cDialog.getTrainDataPath());
        if (file.isDirectory()) {
          trainingSubItem.setImage(NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImage(IMAGE_FOLDER_OBJ));
          new TreeItem(trainingSubItem,SWT.NULL);
        }
        TreeItem testingSubItem=new TreeItem(testingItem,SWT.NONE);
        testingSubItem.setText(""String_Node_Str"" + ""String_Node_Str"" + cDialog.getTestDataPath());
        testingSubItem.setData(cDialog.getTestDataPath());
        testingSubItem.setImage(NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImage(IMAGE_FILE_OBJ));
        file=new File(cDialog.getTestDataPath());
        if (file.isDirectory()) {
          testingSubItem.setImage(NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImage(IMAGE_FOLDER_OBJ));
          new TreeItem(testingSubItem,SWT.NULL);
        }
        trainingClassPathTree.getItems()[0].setExpanded(true);
        testingClassPathTree.getItems()[0].setExpanded(true);
      }
    }
  }
);
  Button removeClassButton=new Button(buttonComposite,SWT.PUSH);
  removeClassButton.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(removeClassButton);
  removeClassButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem[] tempSelected=trainingClassPathTree.getSelection();
      for (      TreeItem ti : tempSelected) {
        int index=getIndex(ti);
        if (-1 != index) {
          testingClassPathTree.getItems()[0].getItem(index).dispose();
          ti.dispose();
        }
      }
    }
  }
);
  section.setClient(client);
}","/** 
 * Creates a input section for Naive Bayes Classifier
 * @param parent - Parent composite
 * @param toolkit
 * @param layout - The layout to be applied on the section
 * @param title - Title for the section
 * @param description - Description for the section.
 */
private void createInputSection(final Composite parent,FormToolkit toolkit,GridLayout layout,String title,String description){
  Section section=toolkit.createSection(parent,Section.TITLE_BAR | Section.EXPANDED | Section.DESCRIPTION);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(section);
  GridLayoutFactory.fillDefaults().numColumns(3).applyTo(section);
  section.setText(title);
  section.setDescription(description);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  section.setLayoutData(gd);
  Composite client=toolkit.createComposite(section,SWT.NONE);
  client.setLayout(layout);
  NlputilsFormComposite.createEmptyRow(toolkit,client);
  trainingClassPathTree=new Tree(client,SWT.MULTI);
  GridData gd_tree=new GridData(SWT.FILL,SWT.FILL,true,false,1,0);
  gd_tree.heightHint=100;
  trainingClassPathTree.setLayoutData(gd_tree);
  final TreeItem trainingItem=new TreeItem(trainingClassPathTree,SWT.NULL);
  trainingItem.setText(""String_Node_Str"");
  trainingItem.setData(""String_Node_Str"");
  trainingClassPathTree.addListener(SWT.Expand,new Listener(){
    @Override public void handleEvent(    Event event){
      TreeItem root=(TreeItem)event.item;
      File file=new File(root.getData().toString());
      File[] files=file.listFiles();
      if (files == null) {
        return;
      }
 else {
        root.getItems()[0].dispose();
      }
      for (int i=0; i < files.length; i++) {
        TreeItem item=new TreeItem(root,SWT.NULL);
        item.setText(files[i].getName());
        item.setData(files[i]);
        item.setImage(NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImage(IMAGE_FILE_OBJ));
        if (files[i].isDirectory()) {
          item.setImage(NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImage(IMAGE_FOLDER_OBJ));
          new TreeItem(item,SWT.NULL);
        }
      }
    }
  }
);
  testingClassPathTree=new Tree(client,SWT.MULTI);
  testingClassPathTree.setLayoutData(gd_tree);
  final TreeItem testingItem=new TreeItem(testingClassPathTree,SWT.NULL);
  testingItem.setText(""String_Node_Str"");
  testingItem.setData(""String_Node_Str"");
  testingClassPathTree.addListener(SWT.Expand,new Listener(){
    @Override public void handleEvent(    Event event){
      TreeItem root=(TreeItem)event.item;
      File file=new File(root.getData().toString());
      File[] files=file.listFiles();
      if (files == null) {
        return;
      }
 else {
        root.getItems()[0].dispose();
      }
      for (int i=0; i < files.length; i++) {
        TreeItem item=new TreeItem(root,SWT.NULL);
        item.setText(files[i].getName());
        item.setData(files[i]);
        item.setImage(NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImage(IMAGE_FILE_OBJ));
        if (files[i].isDirectory()) {
          item.setImage(NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImage(IMAGE_FOLDER_OBJ));
          new TreeItem(item,SWT.NULL);
        }
      }
    }
  }
);
  Composite buttonComposite=new Composite(client,SWT.NONE);
  GridLayout buttonLayout=new GridLayout();
  buttonLayout.marginWidth=buttonLayout.marginHeight=0;
  buttonLayout.makeColumnsEqualWidth=true;
  buttonComposite.setLayout(buttonLayout);
  buttonComposite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
  Button addClassButton=new Button(buttonComposite,SWT.PUSH);
  addClassButton.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(addClassButton);
  addClassButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Shell shell=parent.getShell();
      ClassifierDialog cDialog=new ClassifierDialog(shell);
      cDialog.create();
      if (cDialog.open() == Window.OK) {
        File file=null;
        TreeItem trainingSubItem=new TreeItem(trainingItem,SWT.NULL);
        trainingSubItem.setText(""String_Node_Str"" + ""String_Node_Str"" + cDialog.getTrainDataPath());
        trainingSubItem.setData(cDialog.getTrainDataPath());
        trainingSubItem.setImage(NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImage(IMAGE_FILE_OBJ));
        file=new File(cDialog.getTrainDataPath());
        if (file.isDirectory()) {
          trainingSubItem.setImage(NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImage(IMAGE_FOLDER_OBJ));
          new TreeItem(trainingSubItem,SWT.NULL);
        }
        TreeItem testingSubItem=new TreeItem(testingItem,SWT.NONE);
        String tempClassname=""String_Node_Str"";
        if (!cDialog.getTestDataPath().isEmpty())         tempClassname=cDialog.getTestDataPath();
        testingSubItem.setText(""String_Node_Str"" + ""String_Node_Str"" + tempClassname);
        testingSubItem.setData(cDialog.getTestDataPath());
        if (!tempClassname.equalsIgnoreCase(""String_Node_Str"")) {
          testingSubItem.setImage(NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImage(IMAGE_FILE_OBJ));
        }
        file=new File(cDialog.getTestDataPath());
        if (file.isDirectory()) {
          testingSubItem.setImage(NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImage(IMAGE_FOLDER_OBJ));
          new TreeItem(testingSubItem,SWT.NULL);
        }
        trainingClassPathTree.getItems()[0].setExpanded(true);
        testingClassPathTree.getItems()[0].setExpanded(true);
        form.getMessageManager().removeMessage(""String_Node_Str"");
        form.getMessageManager().removeMessage(""String_Node_Str"");
      }
    }
  }
);
  Button removeClassButton=new Button(buttonComposite,SWT.PUSH);
  removeClassButton.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(removeClassButton);
  removeClassButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem[] tempSelected=trainingClassPathTree.getSelection();
      for (      TreeItem ti : tempSelected) {
        int index=getIndex(ti);
        if (-1 != index) {
          testingClassPathTree.getItems()[0].getItem(index).dispose();
          ti.dispose();
        }
      }
    }
  }
);
  section.setClient(client);
}",0.9580325267750892
168208,"/** 
 * Adds ""Classify"" and ""Help"" buttons on the Naive Bayes Classifier form
 */
private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
      final ArrayList<String> trainingDataPaths=new ArrayList<String>();
      final ArrayList<String> tempTrainingDataPaths=new ArrayList<String>();
      TreeItem trainingDataset=trainingClassPathTree.getItem(0);
      for (      TreeItem ti : trainingDataset.getItems()) {
        tempTrainingDataPaths.add(ti.getData().toString());
      }
      Job job=new Job(""String_Node_Str""){
        final String classificationOutputDir=classifyOutputText.getText();
        private String classificationInputDir=classifyInputText.getText();
        private boolean canItProceed=false;
        @Override protected IStatus run(        IProgressMonitor monitor){
          NaiveBayesClassifier nbc=new NaiveBayesClassifier();
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              isPreprocessEnabled=preprocessEnabled.getSelection();
              pp_outputPath=CommonUiActivator.getDefault().getPreferenceStore().getString(""String_Node_Str"");
              if (isPreprocessEnabled && pp_outputPath.isEmpty()) {
                form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
                return;
              }
 else {
                form.getMessageManager().removeMessage(""String_Node_Str"");
              }
              canItProceed=canItProceedClassification(trainingDataPaths,classificationInputDir,classificationOutputDir);
            }
          }
);
          if (isPreprocessEnabled) {
            if (pp_outputPath.isEmpty()) {
              return Status.CANCEL_STATUS;
            }
            monitor.subTask(""String_Node_Str"");
            try {
              preprocessTask=new Preprocess(""String_Node_Str"");
              for (              String dir : tempTrainingDataPaths) {
                String preprocessedDirPath=preprocessDirectory(dir);
                trainingDataPaths.add(preprocessedDirPath);
              }
              preprocessTask=new Preprocess(""String_Node_Str"");
              classificationInputDir=preprocessDirectory(classificationInputDir);
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
 else {
            for (            String path : tempTrainingDataPaths) {
              trainingDataPaths.add(path);
            }
          }
          if (canItProceed) {
            long startTime=System.currentTimeMillis();
            monitor.subTask(""String_Node_Str"");
            try {
              nbc.classify(trainingDataPaths,classificationInputDir,classificationOutputDir,false,false);
            }
 catch (            FileNotFoundException e1) {
              e1.printStackTrace();
            }
catch (            IOException e1) {
              e1.printStackTrace();
            }
catch (            EvalError e1) {
              e1.printStackTrace();
            }
            if (monitor.isCanceled()) {
              return Status.CANCEL_STATUS;
            }
            System.out.println(""String_Node_Str"");
            monitor.done();
            System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
            NlputilsFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK);
            return Status.OK_STATUS;
          }
          return Status.CANCEL_STATUS;
        }
      }
;
      job.setUser(true);
      job.schedule();
    }
  }
);
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
    }
  }
);
  form.getToolBarManager().update(true);
}","/** 
 * Adds ""Classify"" and ""Help"" buttons on the Naive Bayes Classifier form
 */
private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
      NlputilsFormComposite.updateStatusMessage(getViewSite(),null,null);
      final ArrayList<String> trainingDataPaths=new ArrayList<String>();
      final ArrayList<String> tempTrainingDataPaths=new ArrayList<String>();
      TreeItem trainingDataset=trainingClassPathTree.getItem(0);
      for (      TreeItem ti : trainingDataset.getItems()) {
        tempTrainingDataPaths.add(ti.getData().toString());
      }
      Job job=new Job(""String_Node_Str""){
        final String classificationOutputDir=classifyOutputText.getText();
        private String classificationInputDir=classifyInputText.getText();
        private boolean canItProceed=false;
        @Override protected IStatus run(        IProgressMonitor monitor){
          NaiveBayesClassifier nbc=new NaiveBayesClassifier();
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              isPreprocessEnabled=preprocessEnabled.getSelection();
              pp_outputPath=CommonUiActivator.getDefault().getPreferenceStore().getString(""String_Node_Str"");
              if (isPreprocessEnabled && pp_outputPath.isEmpty()) {
                form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
                return;
              }
 else {
                form.getMessageManager().removeMessage(""String_Node_Str"");
              }
              canItProceed=canItProceedClassification(tempTrainingDataPaths,classificationInputDir,classificationOutputDir);
            }
          }
);
          if (isPreprocessEnabled) {
            if (pp_outputPath.isEmpty()) {
              return Status.CANCEL_STATUS;
            }
            monitor.subTask(""String_Node_Str"");
            try {
              preprocessTask=new Preprocess(""String_Node_Str"");
              for (              String dir : tempTrainingDataPaths) {
                String preprocessedDirPath=preprocessDirectory(dir);
                trainingDataPaths.add(preprocessedDirPath);
              }
              preprocessTask=new Preprocess(""String_Node_Str"");
              classificationInputDir=preprocessDirectory(classificationInputDir);
            }
 catch (            IOException e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
          }
 else {
            for (            String path : tempTrainingDataPaths) {
              trainingDataPaths.add(path);
            }
          }
          if (canItProceed) {
            long startTime=System.currentTimeMillis();
            monitor.subTask(""String_Node_Str"");
            try {
              nbc.classify(trainingDataPaths,classificationInputDir,classificationOutputDir,false,false);
            }
 catch (            FileNotFoundException e1) {
              return handleException(monitor,e1,""String_Node_Str"");
            }
catch (            IOException e1) {
              return handleException(monitor,e1,""String_Node_Str"");
            }
catch (            EvalError e1) {
              return handleException(monitor,e1,""String_Node_Str"");
            }
catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
            if (monitor.isCanceled()) {
              return Status.CANCEL_STATUS;
            }
            System.out.println(""String_Node_Str"");
            monitor.done();
            System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
            NlputilsFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK);
            return Status.OK_STATUS;
          }
          return Status.CANCEL_STATUS;
        }
      }
;
      job.setUser(true);
      job.schedule();
    }
  }
);
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
    }
  }
);
  form.getToolBarManager().update(true);
}",0.936278863232682
168209,"/** 
 * Creates a test section for Naive Bayes Classifier
 * @param parent - Parent composite
 * @param toolkit
 * @param layout - The layout to be applied on the section
 * @param title - Title for the section
 * @param description - Description for the section.
 */
private void createTestSection(final Composite parent,FormToolkit toolkit,GridLayout layout,String title,String description){
  Section section=toolkit.createSection(parent,Section.TITLE_BAR | Section.EXPANDED | Section.DESCRIPTION);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(section);
  GridLayoutFactory.fillDefaults().numColumns(3).applyTo(section);
  section.setText(title);
  section.setDescription(description);
  ScrolledComposite sc=new ScrolledComposite(section,SWT.H_SCROLL | SWT.V_SCROLL);
  sc.setExpandHorizontal(true);
  sc.setExpandVertical(true);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sc);
  Composite sectionClient=toolkit.createComposite(section);
  sc.setContent(sectionClient);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(sc);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sectionClient);
  section.setClient(sectionClient);
  NlputilsFormComposite.createEmptyRow(toolkit,sectionClient);
  testOutputPath=createBrowseButton(toolkit,sectionClient,""String_Node_Str"",""String_Node_Str"");
  Label temp1=toolkit.createLabel(sectionClient,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(temp1);
  Label temp2=toolkit.createLabel(sectionClient,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(temp2);
  Button testButton=new Button(sectionClient,SWT.PUSH);
  testButton.setText(""String_Node_Str"");
  testButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      final ArrayList<String> trainingDataPaths=new ArrayList<String>();
      final ArrayList<String> tempTrainingDataPaths=new ArrayList<String>();
      TreeItem trainingDataset=trainingClassPathTree.getItem(0);
      for (      TreeItem ti : trainingDataset.getItems()) {
        tempTrainingDataPaths.add(ti.getData().toString());
      }
      final ArrayList<String> tempTestingDataPaths=new ArrayList<String>();
      final ArrayList<String> testingDataPaths=new ArrayList<String>();
      TreeItem testingDataset=testingClassPathTree.getItem(0);
      for (      TreeItem ti : testingDataset.getItems()) {
        tempTestingDataPaths.add(ti.getData().toString());
      }
      final String testTrainOutputPath=testOutputPath.getText();
      Job job=new Job(""String_Node_Str""){
        private boolean isPreprocessEnabled=false;
        private String pp_outputPath=null;
        @Override protected IStatus run(        IProgressMonitor monitor){
          NaiveBayesClassifier nbc=new NaiveBayesClassifier();
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              isPreprocessEnabled=preprocessEnabled.getSelection();
              pp_outputPath=CommonUiActivator.getDefault().getPreferenceStore().getString(""String_Node_Str"");
              if (pp_outputPath.isEmpty()) {
                form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
              }
 else {
                form.getMessageManager().removeMessage(""String_Node_Str"");
              }
              if (!isPreprocessEnabled) {
                form.getMessageManager().removeMessage(""String_Node_Str"");
              }
            }
          }
);
          if (isPreprocessEnabled) {
            if (pp_outputPath.isEmpty()) {
              return Status.CANCEL_STATUS;
            }
            monitor.subTask(""String_Node_Str"");
            try {
              preprocessTask=new Preprocess(""String_Node_Str"");
              for (              String dir : tempTrainingDataPaths) {
                String preprocessedDirPath=preprocessDirectory(dir);
                trainingDataPaths.add(preprocessedDirPath);
              }
              preprocessTask=new Preprocess(""String_Node_Str"");
              for (              String dir : tempTestingDataPaths) {
                String preprocessedDirPath=preprocessDirectory(dir);
                testingDataPaths.add(preprocessedDirPath);
              }
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
 else {
            for (            String path : tempTrainingDataPaths) {
              trainingDataPaths.add(path);
            }
            for (            String path : tempTestingDataPaths) {
              testingDataPaths.add(path);
            }
          }
          long startTime=System.currentTimeMillis();
          try {
            monitor.subTask(""String_Node_Str"");
            nbc.train_Test(trainingDataPaths,testingDataPaths,testTrainOutputPath,false,false);
          }
 catch (          FileNotFoundException e1) {
            e1.printStackTrace();
          }
catch (          IOException e1) {
            e1.printStackTrace();
          }
catch (          EvalError e1) {
            e1.printStackTrace();
          }
          if (monitor.isCanceled()) {
            return Status.CANCEL_STATUS;
          }
          System.out.println(""String_Node_Str"");
          monitor.done();
          System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
          NlputilsFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK);
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      job.schedule();
    }
  }
);
  NlputilsFormComposite.createEmptyRow(toolkit,sectionClient);
}","/** 
 * Creates a test section for Naive Bayes Classifier
 * @param parent - Parent composite
 * @param toolkit
 * @param layout - The layout to be applied on the section
 * @param title - Title for the section
 * @param description - Description for the section.
 */
private void createTestSection(final Composite parent,FormToolkit toolkit,GridLayout layout,String title,String description){
  Section section=toolkit.createSection(parent,Section.TITLE_BAR | Section.EXPANDED | Section.DESCRIPTION);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(section);
  GridLayoutFactory.fillDefaults().numColumns(3).applyTo(section);
  section.setText(title);
  section.setDescription(description);
  ScrolledComposite sc=new ScrolledComposite(section,SWT.H_SCROLL | SWT.V_SCROLL);
  sc.setExpandHorizontal(true);
  sc.setExpandVertical(true);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sc);
  Composite sectionClient=toolkit.createComposite(section);
  sc.setContent(sectionClient);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(sc);
  GridLayoutFactory.fillDefaults().numColumns(3).equalWidth(false).applyTo(sectionClient);
  section.setClient(sectionClient);
  NlputilsFormComposite.createEmptyRow(toolkit,sectionClient);
  testOutputPath=createBrowseButton(toolkit,sectionClient,""String_Node_Str"",""String_Node_Str"");
  Label temp1=toolkit.createLabel(sectionClient,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(temp1);
  Label temp2=toolkit.createLabel(sectionClient,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().grab(false,false).span(1,0).applyTo(temp2);
  Button testButton=new Button(sectionClient,SWT.PUSH);
  testButton.setText(""String_Node_Str"");
  testButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      final ArrayList<String> trainingDataPaths=new ArrayList<String>();
      final ArrayList<String> tempTrainingDataPaths=new ArrayList<String>();
      TreeItem trainingDataset=trainingClassPathTree.getItem(0);
      for (      TreeItem ti : trainingDataset.getItems()) {
        tempTrainingDataPaths.add(ti.getData().toString());
      }
      final ArrayList<String> tempTestingDataPaths=new ArrayList<String>();
      final ArrayList<String> testingDataPaths=new ArrayList<String>();
      TreeItem testingDataset=testingClassPathTree.getItem(0);
      for (      TreeItem ti : testingDataset.getItems()) {
        tempTestingDataPaths.add(ti.getData().toString());
      }
      final String testTrainOutputPath=testOutputPath.getText();
      Job job=new Job(""String_Node_Str""){
        private boolean isPreprocessEnabled=false;
        private String pp_outputPath=null;
        private boolean canItProceed=false;
        @Override protected IStatus run(        IProgressMonitor monitor){
          NlputilsFormComposite.updateStatusMessage(getViewSite(),null,null);
          NaiveBayesClassifier nbc=new NaiveBayesClassifier();
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              isPreprocessEnabled=preprocessEnabled.getSelection();
              pp_outputPath=CommonUiActivator.getDefault().getPreferenceStore().getString(""String_Node_Str"");
              if (isPreprocessEnabled && pp_outputPath.isEmpty()) {
                form.getMessageManager().addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR);
              }
 else {
                form.getMessageManager().removeMessage(""String_Node_Str"");
              }
              canItProceed=canItProceedTesting(tempTrainingDataPaths,tempTestingDataPaths,testTrainOutputPath);
            }
          }
);
          if (isPreprocessEnabled) {
            if (pp_outputPath.isEmpty()) {
              return Status.CANCEL_STATUS;
            }
            monitor.subTask(""String_Node_Str"");
            try {
              preprocessTask=new Preprocess(""String_Node_Str"");
              for (              String dir : tempTrainingDataPaths) {
                String preprocessedDirPath=preprocessDirectory(dir);
                trainingDataPaths.add(preprocessedDirPath);
              }
              preprocessTask=new Preprocess(""String_Node_Str"");
              for (              String dir : tempTestingDataPaths) {
                String preprocessedDirPath=preprocessDirectory(dir);
                testingDataPaths.add(preprocessedDirPath);
              }
            }
 catch (            IOException e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
          }
 else {
            for (            String path : tempTrainingDataPaths) {
              trainingDataPaths.add(path);
            }
            for (            String path : tempTestingDataPaths) {
              testingDataPaths.add(path);
            }
          }
          if (canItProceed) {
            long startTime=System.currentTimeMillis();
            try {
              monitor.subTask(""String_Node_Str"");
              nbc.train_Test(trainingDataPaths,testingDataPaths,testTrainOutputPath,false,false);
            }
 catch (            FileNotFoundException e1) {
              return handleException(monitor,e1,""String_Node_Str"");
            }
catch (            IOException e1) {
              return handleException(monitor,e1,""String_Node_Str"");
            }
catch (            EvalError e1) {
              return handleException(monitor,e1,""String_Node_Str"");
            }
catch (            Exception e) {
              return handleException(monitor,e,""String_Node_Str"");
            }
            if (monitor.isCanceled()) {
              return Status.CANCEL_STATUS;
            }
            System.out.println(""String_Node_Str"");
            monitor.done();
            System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
            NlputilsFormComposite.updateStatusMessage(getViewSite(),""String_Node_Str"",IStatus.OK);
            return Status.OK_STATUS;
          }
          return Status.CANCEL_STATUS;
        }
      }
;
      job.setUser(true);
      job.schedule();
    }
  }
);
  NlputilsFormComposite.createEmptyRow(toolkit,sectionClient);
}",0.8650371944739639
168210,"/** 
 * @param client
 */
private void createPreprocessLink(Composite client){
  Composite clientLink=toolkit.createComposite(client);
  GridLayoutFactory.fillDefaults().equalWidth(false).numColumns(2).applyTo(clientLink);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(clientLink);
  preprocessEnabled=toolkit.createButton(clientLink,""String_Node_Str"",SWT.CHECK);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(preprocessEnabled);
  final Hyperlink link=toolkit.createHyperlink(clientLink,""String_Node_Str"",SWT.NONE);
  link.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
  link.addHyperlinkListener(new IHyperlinkListener(){
    public void linkEntered(    HyperlinkEvent e){
    }
    public void linkExited(    HyperlinkEvent e){
    }
    public void linkActivated(    HyperlinkEvent e){
      String id=""String_Node_Str"";
      PreferencesUtil.createPreferenceDialogOn(link.getShell(),id,new String[]{id},null).open();
    }
  }
);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(link);
}","/** 
 * To create hyperlink
 * @param client
 */
private void createPreprocessLink(Composite client){
  Composite clientLink=toolkit.createComposite(client);
  GridLayoutFactory.fillDefaults().equalWidth(false).numColumns(2).applyTo(clientLink);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(clientLink);
  preprocessEnabled=toolkit.createButton(clientLink,""String_Node_Str"",SWT.CHECK);
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(preprocessEnabled);
  final Hyperlink link=toolkit.createHyperlink(clientLink,""String_Node_Str"",SWT.NONE);
  link.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
  link.addHyperlinkListener(new IHyperlinkListener(){
    public void linkEntered(    HyperlinkEvent e){
    }
    public void linkExited(    HyperlinkEvent e){
    }
    public void linkActivated(    HyperlinkEvent e){
      String id=""String_Node_Str"";
      PreferencesUtil.createPreferenceDialogOn(link.getShell(),id,new String[]{id},null).open();
    }
  }
);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(link);
}",0.989415554532904
168211,"public void train_Test(ArrayList<String> trainingClasses,ArrayList<String> testingClasses,String outputDir,boolean removeStopwords,boolean doLowercase) throws FileNotFoundException, IOException, EvalError {
  Calendar cal=Calendar.getInstance();
  String dateString=""String_Node_Str"" + (cal.get(Calendar.MONTH) + 1) + ""String_Node_Str""+ cal.get(Calendar.DATE)+ ""String_Node_Str""+ cal.get(Calendar.YEAR);
  String tempOutputPath=""String_Node_Str"";
  String tempTrainDirs=""String_Node_Str"";
  for (  String classPath : trainingClasses) {
    tempOutputPath+=classPath.substring(classPath.lastIndexOf(System.getProperty(""String_Node_Str"")) + 1) + ""String_Node_Str"";
    tempTrainDirs+=classPath + ""String_Node_Str"";
  }
  String outputPath=outputDir + System.getProperty(""String_Node_Str"") + tempOutputPath.substring(0,tempOutputPath.length() - 1)+ dateString+ ""String_Node_Str""+ System.currentTimeMillis();
  String tempTestDirs=""String_Node_Str"";
  for (  String classPath : testingClasses) {
    tempTestDirs+=classPath + ""String_Node_Str"";
  }
  String keepSeq=""String_Node_Str"", stopWords=""String_Node_Str"", preserveCase=""String_Node_Str"";
  if (removeStopwords) {
    stopWords=""String_Node_Str"";
  }
  if (doLowercase) {
    preserveCase=""String_Node_Str"";
  }
  tempTrainDirs=tempTrainDirs.substring(0,tempTrainDirs.length() - 1);
  String trainDirs[]=tempTrainDirs.split(""String_Node_Str"");
  tempTestDirs=tempTestDirs.substring(0,tempTestDirs.length() - 1);
  String testDirs[]=tempTestDirs.split(""String_Node_Str"");
  ArrayList<String> tempT2vArgs=new ArrayList<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"",outputPath + ""String_Node_Str"",""String_Node_Str"",keepSeq,""String_Node_Str"",stopWords,""String_Node_Str"",preserveCase));
  tempT2vArgs.addAll(1,Arrays.asList(trainDirs));
  String[] t2vArgs=Arrays.copyOf(tempT2vArgs.toArray(),tempT2vArgs.toArray().length,String[].class);
  ArrayList<String> tempT2vArgsTest=new ArrayList<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"",outputPath + ""String_Node_Str"",""String_Node_Str"",keepSeq,""String_Node_Str"",stopWords,""String_Node_Str"",preserveCase,""String_Node_Str"",outputPath + ""String_Node_Str""));
  tempT2vArgsTest.addAll(1,Arrays.asList(testDirs));
  String[] t2vArgs_test=Arrays.copyOf(tempT2vArgsTest.toArray(),tempT2vArgsTest.toArray().length,String[].class);
  String[] v2cArgs={""String_Node_Str"",outputPath + ""String_Node_Str"",""String_Node_Str"",outputPath + ""String_Node_Str"",""String_Node_Str"",outputPath + ""String_Node_Str""};
  Text2Vectors.main(t2vArgs);
  System.out.println(""String_Node_Str"" + outputPath + ""String_Node_Str"");
  Text2Vectors.main(t2vArgs_test);
  System.out.println(""String_Node_Str"" + outputPath + ""String_Node_Str"");
  ArrayList<String> result=Vectors2Classify.main(v2cArgs);
  System.out.println(""String_Node_Str"" + outputPath + ""String_Node_Str"");
  System.out.println(result.get(0));
  writeReadMe(outputPath);
}","public void train_Test(ArrayList<String> trainingClasses,ArrayList<String> testingClasses,String outputDir,boolean removeStopwords,boolean doLowercase) throws FileNotFoundException, IOException, EvalError {
  Calendar cal=Calendar.getInstance();
  String dateString=""String_Node_Str"" + (cal.get(Calendar.MONTH) + 1) + ""String_Node_Str""+ cal.get(Calendar.DATE)+ ""String_Node_Str""+ cal.get(Calendar.YEAR);
  String tempOutputPath=""String_Node_Str"";
  String tempTrainDirs=""String_Node_Str"";
  for (  String classPath : trainingClasses) {
    tempOutputPath+=classPath.substring(classPath.lastIndexOf(System.getProperty(""String_Node_Str"")) + 1) + ""String_Node_Str"";
    tempTrainDirs+=classPath + ""String_Node_Str"";
  }
  String outputPath=outputDir + System.getProperty(""String_Node_Str"") + tempOutputPath.substring(0,tempOutputPath.length() - 1)+ dateString+ ""String_Node_Str""+ System.currentTimeMillis();
  String tempTestDirs=""String_Node_Str"";
  for (  String classPath : testingClasses) {
    if (!classPath.isEmpty())     tempTestDirs+=classPath + ""String_Node_Str"";
  }
  String keepSeq=""String_Node_Str"", stopWords=""String_Node_Str"", preserveCase=""String_Node_Str"";
  if (removeStopwords) {
    stopWords=""String_Node_Str"";
  }
  if (doLowercase) {
    preserveCase=""String_Node_Str"";
  }
  tempTrainDirs=tempTrainDirs.substring(0,tempTrainDirs.length() - 1);
  String trainDirs[]=tempTrainDirs.split(""String_Node_Str"");
  tempTestDirs=tempTestDirs.substring(0,tempTestDirs.length() - 1);
  String testDirs[]=tempTestDirs.split(""String_Node_Str"");
  ArrayList<String> tempT2vArgs=new ArrayList<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"",outputPath + ""String_Node_Str"",""String_Node_Str"",keepSeq,""String_Node_Str"",stopWords,""String_Node_Str"",preserveCase));
  tempT2vArgs.addAll(1,Arrays.asList(trainDirs));
  String[] t2vArgs=Arrays.copyOf(tempT2vArgs.toArray(),tempT2vArgs.toArray().length,String[].class);
  ArrayList<String> tempT2vArgsTest=new ArrayList<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"",outputPath + ""String_Node_Str"",""String_Node_Str"",keepSeq,""String_Node_Str"",stopWords,""String_Node_Str"",preserveCase,""String_Node_Str"",outputPath + ""String_Node_Str""));
  tempT2vArgsTest.addAll(1,Arrays.asList(testDirs));
  String[] t2vArgs_test=Arrays.copyOf(tempT2vArgsTest.toArray(),tempT2vArgsTest.toArray().length,String[].class);
  String[] v2cArgs={""String_Node_Str"",outputPath + ""String_Node_Str"",""String_Node_Str"",outputPath + ""String_Node_Str"",""String_Node_Str"",outputPath + ""String_Node_Str""};
  Text2Vectors.main(t2vArgs);
  System.out.println(""String_Node_Str"" + outputPath + ""String_Node_Str"");
  Text2Vectors.main(t2vArgs_test);
  System.out.println(""String_Node_Str"" + outputPath + ""String_Node_Str"");
  ArrayList<String> result=Vectors2Classify.main(v2cArgs);
  System.out.println(""String_Node_Str"" + outputPath + ""String_Node_Str"");
  System.out.println(result.get(0));
  writeReadMe(outputPath);
}",0.9948910081743868
168212,"private void createInputSection(final Composite parent,FormToolkit toolkit,GridLayout layout,String title,String description){
  Section section=toolkit.createSection(parent,Section.TITLE_BAR | Section.EXPANDED | Section.DESCRIPTION);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(section);
  GridLayoutFactory.fillDefaults().numColumns(3).applyTo(section);
  section.setText(title);
  section.setDescription(description);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  section.setLayoutData(gd);
  Composite client=toolkit.createComposite(section,SWT.NONE);
  client.setLayout(layout);
  NlputilsFormComposite.createEmptyRow(toolkit,client);
  trainingClassPathTree=new Tree(client,SWT.NONE);
  GridData gd_tree=new GridData(SWT.FILL,SWT.FILL,true,false,1,0);
  gd_tree.heightHint=100;
  trainingClassPathTree.setLayoutData(gd_tree);
  TreeItem trainingItem=new TreeItem(trainingClassPathTree,SWT.NULL);
  trainingItem.setText(""String_Node_Str"");
  trainingItem.setData(""String_Node_Str"");
  trainingClassPathTree.addListener(SWT.Expand,new Listener(){
    @Override public void handleEvent(    Event event){
      TreeItem root=(TreeItem)event.item;
      File file=new File(root.getData().toString());
      File[] files=file.listFiles();
      if (files == null) {
        return;
      }
 else {
        root.getItems()[0].dispose();
      }
      for (int i=0; i < files.length; i++) {
        TreeItem item=new TreeItem(root,SWT.NULL);
        item.setText(files[i].getName());
        item.setData(files[i]);
        if (files[i].isDirectory()) {
          new TreeItem(item,SWT.NULL);
        }
      }
    }
  }
);
  testingClassPathTree=new Tree(client,SWT.NONE);
  testingClassPathTree.setLayoutData(gd_tree);
  TreeItem testingItem=new TreeItem(testingClassPathTree,SWT.NULL);
  testingItem.setText(""String_Node_Str"");
  testingItem.setData(""String_Node_Str"");
  testingClassPathTree.addListener(SWT.Expand,new Listener(){
    @Override public void handleEvent(    Event event){
      TreeItem root=(TreeItem)event.item;
      File file=new File(root.getData().toString());
      File[] files=file.listFiles();
      if (files == null) {
        return;
      }
 else {
        root.getItems()[0].dispose();
      }
      for (int i=0; i < files.length; i++) {
        TreeItem item=new TreeItem(root,SWT.NULL);
        item.setText(files[i].getName());
        item.setData(files[i]);
        if (files[i].isDirectory()) {
          new TreeItem(item,SWT.NULL);
        }
      }
    }
  }
);
  Composite buttonComposite=new Composite(client,SWT.NONE);
  GridLayout buttonLayout=new GridLayout();
  buttonLayout.marginWidth=buttonLayout.marginHeight=0;
  buttonLayout.makeColumnsEqualWidth=true;
  buttonComposite.setLayout(buttonLayout);
  buttonComposite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
  Button button=new Button(buttonComposite,SWT.PUSH);
  button.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(button);
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Shell shell=parent.getShell();
      ClassifierDialog cDialog=new ClassifierDialog(shell);
      cDialog.create();
      if (cDialog.open() == Window.OK) {
        File file=null;
        classPathCount++;
        TreeItem trainingSubItem=new TreeItem(trainingItem,SWT.NULL);
        trainingSubItem.setText(""String_Node_Str"" + classPathCount + ""String_Node_Str""+ cDialog.getTrainDataPath());
        trainingSubItem.setData(cDialog.getTrainDataPath());
        file=new File(cDialog.getTrainDataPath());
        if (file.isDirectory()) {
          new TreeItem(trainingSubItem,SWT.NULL);
        }
        TreeItem testingSubItem=new TreeItem(testingItem,SWT.NONE);
        testingSubItem.setText(""String_Node_Str"" + classPathCount + ""String_Node_Str""+ cDialog.getTestDataPath());
        testingSubItem.setData(cDialog.getTestDataPath());
        file=new File(cDialog.getTestDataPath());
        if (file.isDirectory()) {
          new TreeItem(testingSubItem,SWT.NULL);
        }
        trainingClassPathTree.getItems()[0].setExpanded(true);
        testingClassPathTree.getItems()[0].setExpanded(true);
      }
    }
  }
);
  Button remove=new Button(buttonComposite,SWT.PUSH);
  remove.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(remove);
  section.setClient(client);
}","private void createInputSection(final Composite parent,FormToolkit toolkit,GridLayout layout,String title,String description){
  Section section=toolkit.createSection(parent,Section.TITLE_BAR | Section.EXPANDED | Section.DESCRIPTION);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(section);
  GridLayoutFactory.fillDefaults().numColumns(3).applyTo(section);
  section.setText(title);
  section.setDescription(description);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  section.setLayoutData(gd);
  Composite client=toolkit.createComposite(section,SWT.NONE);
  client.setLayout(layout);
  NlputilsFormComposite.createEmptyRow(toolkit,client);
  trainingClassPathTree=new Tree(client,SWT.NONE);
  GridData gd_tree=new GridData(SWT.FILL,SWT.FILL,true,false,1,0);
  gd_tree.heightHint=100;
  trainingClassPathTree.setLayoutData(gd_tree);
  TreeItem trainingItem=new TreeItem(trainingClassPathTree,SWT.NULL);
  trainingItem.setText(""String_Node_Str"");
  trainingItem.setData(""String_Node_Str"");
  trainingClassPathTree.addListener(SWT.Expand,new Listener(){
    @Override public void handleEvent(    Event event){
      TreeItem root=(TreeItem)event.item;
      File file=new File(root.getData().toString());
      File[] files=file.listFiles();
      if (files == null) {
        return;
      }
 else {
        root.getItems()[0].dispose();
      }
      for (int i=0; i < files.length; i++) {
        TreeItem item=new TreeItem(root,SWT.NULL);
        item.setText(files[i].getName());
        item.setData(files[i]);
        if (files[i].isDirectory()) {
          new TreeItem(item,SWT.NULL);
        }
      }
    }
  }
);
  testingClassPathTree=new Tree(client,SWT.NONE);
  testingClassPathTree.setLayoutData(gd_tree);
  TreeItem testingItem=new TreeItem(testingClassPathTree,SWT.NULL);
  testingItem.setText(""String_Node_Str"");
  testingItem.setData(""String_Node_Str"");
  testingClassPathTree.addListener(SWT.Expand,new Listener(){
    @Override public void handleEvent(    Event event){
      TreeItem root=(TreeItem)event.item;
      File file=new File(root.getData().toString());
      File[] files=file.listFiles();
      if (files == null) {
        return;
      }
 else {
        root.getItems()[0].dispose();
      }
      for (int i=0; i < files.length; i++) {
        TreeItem item=new TreeItem(root,SWT.NULL);
        item.setText(files[i].getName());
        item.setData(files[i]);
        if (files[i].isDirectory()) {
          new TreeItem(item,SWT.NULL);
        }
      }
    }
  }
);
  Composite buttonComposite=new Composite(client,SWT.NONE);
  GridLayout buttonLayout=new GridLayout();
  buttonLayout.marginWidth=buttonLayout.marginHeight=0;
  buttonLayout.makeColumnsEqualWidth=true;
  buttonComposite.setLayout(buttonLayout);
  buttonComposite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
  Button addClassButton=new Button(buttonComposite,SWT.PUSH);
  addClassButton.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(addClassButton);
  addClassButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Shell shell=parent.getShell();
      ClassifierDialog cDialog=new ClassifierDialog(shell);
      cDialog.create();
      if (cDialog.open() == Window.OK) {
        File file=null;
        classPathCount++;
        TreeItem trainingSubItem=new TreeItem(trainingItem,SWT.NULL);
        trainingSubItem.setText(""String_Node_Str"" + classPathCount + ""String_Node_Str""+ cDialog.getTrainDataPath());
        trainingSubItem.setData(cDialog.getTrainDataPath());
        file=new File(cDialog.getTrainDataPath());
        if (file.isDirectory()) {
          new TreeItem(trainingSubItem,SWT.NULL);
        }
        TreeItem testingSubItem=new TreeItem(testingItem,SWT.NONE);
        testingSubItem.setText(""String_Node_Str"" + classPathCount + ""String_Node_Str""+ cDialog.getTestDataPath());
        testingSubItem.setData(cDialog.getTestDataPath());
        file=new File(cDialog.getTestDataPath());
        if (file.isDirectory()) {
          new TreeItem(testingSubItem,SWT.NULL);
        }
        trainingClassPathTree.getItems()[0].setExpanded(true);
        testingClassPathTree.getItems()[0].setExpanded(true);
      }
    }
  }
);
  Button removeClassButton=new Button(buttonComposite,SWT.PUSH);
  removeClassButton.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(false,false).span(1,1).applyTo(removeClassButton);
  section.setClient(client);
}",0.9861495844875346
168213,"private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
      ArrayList<String> trainingDataPaths=new ArrayList<String>();
      TreeItem trainingDataset=trainingClassPathTree.getItem(0);
      for (      TreeItem ti : trainingDataset.getItems()) {
        trainingDataPaths.add(ti.getData().toString());
      }
      ArrayList<String> testingDataPaths=new ArrayList<String>();
      TreeItem testingDataset=trainingClassPathTree.getItem(0);
      for (      TreeItem ti : testingDataset.getItems()) {
        testingDataPaths.add(ti.getData().toString());
      }
      for (      String s : trainingDataPaths) {
        System.out.println(""String_Node_Str"" + s);
      }
      String classificationInputDir=classifyInputText.getText();
      String classificationOutputDir=classifyOutputText.getText();
      Job job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          monitor.beginTask(""String_Node_Str"",100);
          NaiveBayesClassifier nbc=new NaiveBayesClassifier();
          try {
            nbc.classify(trainingDataPaths,classificationInputDir,classificationOutputDir,false,false);
          }
 catch (          FileNotFoundException e1) {
            e1.printStackTrace();
          }
catch (          IOException e1) {
            e1.printStackTrace();
          }
catch (          EvalError e1) {
            e1.printStackTrace();
          }
          int i=0;
          while (i < 1000000000) {
            try {
              Thread.sleep(1000);
            }
 catch (            InterruptedException e) {
              e.printStackTrace();
            }
            if (monitor.isCanceled()) {
              throw new OperationCanceledException();
            }
            i++;
            monitor.worked(1);
          }
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      job.schedule();
    }
  }
);
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
    }
  }
);
  form.getToolBarManager().update(true);
}","private void addButtonsToToolBar(){
  IToolBarManager mgr=form.getToolBarManager();
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_LRUN_OBJ));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
      ArrayList<String> trainingDataPaths=new ArrayList<String>();
      TreeItem trainingDataset=trainingClassPathTree.getItem(0);
      for (      TreeItem ti : trainingDataset.getItems()) {
        trainingDataPaths.add(ti.getData().toString());
      }
      String classificationInputDir=classifyInputText.getText();
      String classificationOutputDir=classifyOutputText.getText();
      Job job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          if (monitor.isCanceled()) {
            return Status.CANCEL_STATUS;
          }
          NaiveBayesClassifier nbc=new NaiveBayesClassifier();
          try {
            nbc.classify(trainingDataPaths,classificationInputDir,classificationOutputDir,false,false);
          }
 catch (          FileNotFoundException e1) {
            e1.printStackTrace();
          }
catch (          IOException e1) {
            e1.printStackTrace();
          }
catch (          EvalError e1) {
            e1.printStackTrace();
          }
          System.out.println(""String_Node_Str"");
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      job.schedule();
    }
  }
);
  mgr.add(new Action(){
    @Override public ImageDescriptor getImageDescriptor(){
      return (NaiveBayesClassifierViewImageRegistry.getImageIconFactory().getImageDescriptor(IMAGE_HELP_CO));
    }
    @Override public String getToolTipText(){
      return ""String_Node_Str"";
    }
    public void run(){
    }
  }
);
  form.getToolBarManager().update(true);
}",0.808124459809853
168214,"@Override public void createPartControl(Composite parent){
  classPathCount=0;
  toolkit=createFormBodySection(parent,""String_Node_Str"");
  Section section=toolkit.createSection(form.getBody(),Section.TITLE_BAR | Section.EXPANDED);
  GridDataFactory.fillDefaults().grab(true,false).span(3,1).applyTo(section);
  section.setExpanded(true);
  ScrolledComposite sc=new ScrolledComposite(section,SWT.H_SCROLL | SWT.V_SCROLL);
  sc.setExpandHorizontal(true);
  sc.setExpandVertical(true);
  GridLayoutFactory.fillDefaults().numColumns(1).equalWidth(false).applyTo(sc);
  NlputilsFormComposite.createEmptyRow(toolkit,sc);
  Composite client=toolkit.createComposite(form.getBody());
  GridLayoutFactory.fillDefaults().equalWidth(true).numColumns(1).applyTo(client);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(client);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  createInputSection(client,toolkit,layout,""String_Node_Str"",""String_Node_Str"");
  createOutputSection(client,toolkit,layout,""String_Node_Str"",""String_Node_Str"");
  addButtonsToToolBar();
}","@Override public void createPartControl(Composite parent){
  classPathCount=0;
  toolkit=createFormBodySection(parent,""String_Node_Str"");
  Section section=toolkit.createSection(form.getBody(),Section.TITLE_BAR | Section.EXPANDED);
  GridDataFactory.fillDefaults().grab(true,false).span(3,1).applyTo(section);
  section.setExpanded(true);
  ScrolledComposite sc=new ScrolledComposite(section,SWT.H_SCROLL | SWT.V_SCROLL);
  sc.setExpandHorizontal(true);
  sc.setExpandVertical(true);
  GridLayoutFactory.fillDefaults().numColumns(1).equalWidth(false).applyTo(sc);
  NlputilsFormComposite.createEmptyRow(toolkit,sc);
  Composite client=toolkit.createComposite(form.getBody());
  GridLayoutFactory.fillDefaults().equalWidth(true).numColumns(1).applyTo(client);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).applyTo(client);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  createInputSection(client,toolkit,layout,""String_Node_Str"",""String_Node_Str"");
  createTestSection(client,toolkit,layout,""String_Node_Str"",""String_Node_Str"");
  createOutputSection(client,toolkit,layout,""String_Node_Str"",""String_Node_Str"");
  addButtonsToToolBar();
}",0.9644760213143873
168215,"@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setSize(588,300);
  composite.setLocation(0,0);
  Label header=new Label(composite,SWT.NONE);
  header.setImage(ImageDescriptor.createFromURL(FileLocator.find(FrameworkUtil.getBundle(this.getClass()),new Path(""String_Node_Str""),null)).createImage());
  header.setBounds(10,0,161,40);
  Label lblSenator=new Label(composite,SWT.NONE);
  lblSenator.setBounds(10,66,60,20);
  lblSenator.setText(""String_Node_Str"");
  final DateTime dateTime=new DateTime(composite,SWT.BORDER);
  dateTime.setEnabled(false);
  dateTime.setBounds(89,167,101,24);
  final DateTime dateTime_1=new DateTime(composite,SWT.BORDER);
  dateTime_1.setEnabled(false);
  dateTime_1.setBounds(288,167,101,24);
  Label lblToDate=new Label(composite,SWT.NONE);
  lblToDate.setBounds(245,167,21,20);
  lblToDate.setText(""String_Node_Str"");
  txtMaxDocs=new Text(composite,SWT.BORDER);
  txtMaxDocs.setToolTipText(""String_Node_Str"");
  txtMaxDocs.setEnabled(false);
  txtMaxDocs.setBounds(189,219,40,21);
  Label lblFrom=new Label(composite,SWT.NONE);
  lblFrom.setBounds(26,167,35,20);
  lblFrom.setText(""String_Node_Str"");
  final Combo cmbSenator=new Combo(composite,SWT.NONE);
  cmbSenator.setForeground(SWTResourceManager.getColor(SWT.COLOR_RED));
  cmbSenator.setBounds(89,100,300,23);
  String[] loading={""String_Node_Str""};
  cmbSenator.setItems(loading);
  cmbSenator.select(0);
  final Combo cmbCongress=new Combo(composite,SWT.NONE);
  cmbCongress.setForeground(SWTResourceManager.getColor(SWT.COLOR_RED));
  cmbCongress.setBounds(89,66,101,20);
  cmbCongress.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      try {
        String selectedCongress=cmbCongress.getText().trim();
        if (selectedCongress.equals(""String_Node_Str"")) {
          cmbSenator.setItems(allSenators);
          cmbSenator.add(""String_Node_Str"",0);
          cmbSenator.add(""String_Node_Str"",1);
          cmbSenator.add(""String_Node_Str"",2);
          cmbSenator.add(""String_Node_Str"",3);
          cmbSenator.select(0);
        }
 else {
          cmbSenator.setItems(AvailableRecords.getSenators(selectedCongress));
          cmbSenator.add(""String_Node_Str"",0);
          cmbSenator.add(""String_Node_Str"",1);
          cmbSenator.add(""String_Node_Str"",2);
          cmbSenator.add(""String_Node_Str"",3);
          cmbSenator.select(0);
          String congress=cmbCongress.getText().replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
          int cNum=-1;
          if (!congress.equals(""String_Node_Str"")) {
            cNum=Integer.parseInt(congress);
            cNum=2 * (cNum - 101);
            dateTime.setYear(1989 + cNum);
            dateTime.setDay(3);
            dateTime.setMonth(0);
            dateTime_1.setYear(1990 + cNum);
            dateTime_1.setDay(3);
            dateTime_1.setMonth(0);
          }
        }
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
      cmbSenator.select(0);
    }
  }
);
  cmbCongress.setItems(loading);
  cmbCongress.select(0);
  Label lblSenator_1=new Label(composite,SWT.NONE);
  lblSenator_1.setBounds(10,100,55,20);
  lblSenator_1.setText(""String_Node_Str"");
  final Button btnDateRange=new Button(composite,SWT.CHECK);
  btnDateRange.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (btnDateRange.getSelection()) {
        dateTime.setEnabled(true);
        dateTime_1.setEnabled(true);
      }
 else {
        dateTime.setEnabled(false);
        dateTime_1.setEnabled(false);
      }
    }
  }
);
  btnDateRange.setBounds(9,142,93,16);
  btnDateRange.setText(""String_Node_Str"");
  Button btnExtract=new Button(composite,SWT.NONE);
  btnExtract.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      if (btnExtract.getText().equals(""String_Node_Str""))       senateCrawler=new SenateCrawler();
      if (btnExtract.getText().equals(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        appendLog(""String_Node_Str"");
        senateCrawler.terminate();
        btnExtract.setText(""String_Node_Str"");
        return;
      }
      int maxDocs=-1;
      if (!txtMaxDocs.getText().equals(""String_Node_Str""))       maxDocs=Integer.parseInt(txtMaxDocs.getText().trim());
      IEclipseContext iEclipseContext=context;
      ContextInjectionFactory.inject(senateCrawler,iEclipseContext);
      String dateFrom=""String_Node_Str"";
      String dateTo=""String_Node_Str"";
      if (btnDateRange.getSelection()) {
        dateFrom=(dateTime.getMonth() + 1) + ""String_Node_Str"" + dateTime.getDay()+ ""String_Node_Str""+ dateTime.getYear();
        dateTo=(dateTime_1.getMonth() + 1) + ""String_Node_Str"" + dateTime_1.getDay()+ ""String_Node_Str""+ dateTime_1.getYear();
      }
      String senator=cmbSenator.getText().replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
      String congress=cmbCongress.getText().replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
      int cNum=-1;
      if (!congress.equals(""String_Node_Str""))       cNum=Integer.parseInt(congress);
      senateCrawler.initialize(maxDocs,cNum,senator,dateFrom,dateTo,txtOutput.getText());
      Job job=new Job(""String_Node_Str""){
        protected IStatus run(        IProgressMonitor monitor){
          long startTime=System.currentTimeMillis();
          appendLog(""String_Node_Str"");
          Thread crawlerThread=new Thread(senateCrawler);
          try {
            crawlerThread.start();
            crawlerThread.join();
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / (float)1000 + ""String_Node_Str"");
          appendLog(""String_Node_Str"");
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              btnExtract.setText(""String_Node_Str"");
            }
          }
);
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      job.schedule();
      btnExtract.setText(""String_Node_Str"");
    }
  }
);
  btnExtract.setBounds(10,320,75,25);
  btnExtract.setText(""String_Node_Str"");
  shell.setDefaultButton(btnExtract);
  Label lblOutput=new Label(composite,SWT.NONE);
  lblOutput.setBounds(10,261,80,20);
  lblOutput.setText(""String_Node_Str"");
  txtOutput=new Text(composite,SWT.BORDER);
  txtOutput.setBounds(100,261,258,21);
  Button button=new Button(composite,SWT.NONE);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog od=new DirectoryDialog(shell);
      od.open();
      String oDirectory=od.getFilterPath();
      txtOutput.setText(oDirectory);
    }
  }
);
  button.setBounds(358,261,40,25);
  button.setText(""String_Node_Str"");
  final Button btnLimitRecords=new Button(composite,SWT.CHECK);
  btnLimitRecords.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (btnLimitRecords.getSelection())       txtMaxDocs.setEnabled(true);
 else       txtMaxDocs.setEnabled(false);
    }
  }
);
  btnLimitRecords.setBounds(10,219,175,20);
  btnLimitRecords.setText(""String_Node_Str"");
  Label lblNewLabel=new Label(composite,SWT.BORDER | SWT.SHADOW_NONE);
  lblNewLabel.setBounds(433,24,175,320);
  lblNewLabel.setText(""String_Node_Str"");
  Job job2=new Job(""String_Node_Str""){
    protected IStatus run(    IProgressMonitor monitor){
      appendLog(""String_Node_Str"");
      String[] cgrss=null;
      try {
        cgrss=AvailableRecords.getAllCongresses();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      congresses=cgrss;
      Display.getDefault().asyncExec(new Runnable(){
        @Override public void run(){
          cmbCongress.setItems(congresses);
          cmbCongress.select(0);
          cmbCongress.setForeground(SWTResourceManager.getColor(SWT.COLOR_BLACK));
        }
      }
);
      appendLog(""String_Node_Str"");
      String[] senatorsArray=null;
      try {
        senatorsArray=AvailableRecords.getAllSenators(congresses);
      }
 catch (      IOException e2) {
        e2.printStackTrace();
      }
      allSenators=senatorsArray;
      Display.getDefault().asyncExec(new Runnable(){
        @Override public void run(){
          cmbSenator.setItems(allSenators);
          cmbSenator.add(""String_Node_Str"",0);
          cmbSenator.add(""String_Node_Str"",1);
          cmbSenator.add(""String_Node_Str"",2);
          cmbSenator.add(""String_Node_Str"",3);
          cmbSenator.select(0);
          cmbSenator.setForeground(SWTResourceManager.getColor(SWT.COLOR_BLACK));
        }
      }
);
      appendLog(""String_Node_Str"");
      return Status.OK_STATUS;
    }
  }
;
  job2.setUser(true);
  job2.schedule();
}","@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setSize(588,300);
  composite.setLocation(0,0);
  Label header=new Label(composite,SWT.NONE);
  header.setImage(ImageDescriptor.createFromURL(FileLocator.find(FrameworkUtil.getBundle(this.getClass()),new Path(""String_Node_Str""),null)).createImage());
  header.setBounds(10,0,161,40);
  Label lblSenator=new Label(composite,SWT.NONE);
  lblSenator.setBounds(10,66,60,20);
  lblSenator.setText(""String_Node_Str"");
  final DateTime dateTime=new DateTime(composite,SWT.BORDER);
  dateTime.setEnabled(false);
  dateTime.setBounds(89,167,101,24);
  final DateTime dateTime_1=new DateTime(composite,SWT.BORDER);
  dateTime_1.setEnabled(false);
  dateTime_1.setBounds(288,167,101,24);
  Label lblToDate=new Label(composite,SWT.NONE);
  lblToDate.setBounds(245,167,21,20);
  lblToDate.setText(""String_Node_Str"");
  txtMaxDocs=new Text(composite,SWT.BORDER);
  txtMaxDocs.setToolTipText(""String_Node_Str"");
  txtMaxDocs.setEnabled(false);
  txtMaxDocs.setBounds(189,219,40,21);
  Label lblFrom=new Label(composite,SWT.NONE);
  lblFrom.setBounds(26,167,35,20);
  lblFrom.setText(""String_Node_Str"");
  final Combo cmbSenator=new Combo(composite,SWT.NONE);
  cmbSenator.setForeground(SWTResourceManager.getColor(SWT.COLOR_RED));
  cmbSenator.setBounds(89,100,300,23);
  String[] loading={""String_Node_Str""};
  cmbSenator.setItems(loading);
  cmbSenator.select(0);
  final Combo cmbCongress=new Combo(composite,SWT.NONE);
  cmbCongress.setForeground(SWTResourceManager.getColor(SWT.COLOR_RED));
  cmbCongress.setBounds(89,66,101,20);
  cmbCongress.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      try {
        String selectedCongress=cmbCongress.getText().trim();
        if (selectedCongress.equals(""String_Node_Str"")) {
          cmbSenator.setItems(allSenators);
          cmbSenator.add(""String_Node_Str"",0);
          cmbSenator.add(""String_Node_Str"",1);
          cmbSenator.add(""String_Node_Str"",2);
          cmbSenator.add(""String_Node_Str"",3);
          cmbSenator.select(0);
        }
 else {
          cmbSenator.setItems(AvailableRecords.getSenators(selectedCongress));
          cmbSenator.add(""String_Node_Str"",0);
          cmbSenator.add(""String_Node_Str"",1);
          cmbSenator.add(""String_Node_Str"",2);
          cmbSenator.add(""String_Node_Str"",3);
          cmbSenator.select(0);
          String congress=cmbCongress.getText().replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
          int cNum=-1;
          if (!congress.equals(""String_Node_Str"")) {
            cNum=Integer.parseInt(congress);
            cNum=2 * (cNum - 101);
            dateTime.setYear(1989 + cNum);
            dateTime.setDay(3);
            dateTime.setMonth(0);
            dateTime_1.setYear(1990 + cNum);
            dateTime_1.setDay(3);
            dateTime_1.setMonth(0);
          }
        }
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
      cmbSenator.select(0);
    }
  }
);
  cmbCongress.setItems(loading);
  cmbCongress.select(0);
  Label lblSenator_1=new Label(composite,SWT.NONE);
  lblSenator_1.setBounds(10,100,55,20);
  lblSenator_1.setText(""String_Node_Str"");
  final Button btnDateRange=new Button(composite,SWT.CHECK);
  btnDateRange.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (btnDateRange.getSelection()) {
        dateTime.setEnabled(true);
        dateTime_1.setEnabled(true);
      }
 else {
        dateTime.setEnabled(false);
        dateTime_1.setEnabled(false);
      }
    }
  }
);
  btnDateRange.setBounds(9,142,93,16);
  btnDateRange.setText(""String_Node_Str"");
  final Button btnExtract=new Button(composite,SWT.NONE);
  btnExtract.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      if (btnExtract.getText().equals(""String_Node_Str""))       senateCrawler=new SenateCrawler();
      if (btnExtract.getText().equals(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        appendLog(""String_Node_Str"");
        senateCrawler.terminate();
        btnExtract.setText(""String_Node_Str"");
        return;
      }
      int maxDocs=-1;
      if (!txtMaxDocs.getText().equals(""String_Node_Str""))       maxDocs=Integer.parseInt(txtMaxDocs.getText().trim());
      IEclipseContext iEclipseContext=context;
      ContextInjectionFactory.inject(senateCrawler,iEclipseContext);
      String dateFrom=""String_Node_Str"";
      String dateTo=""String_Node_Str"";
      if (btnDateRange.getSelection()) {
        dateFrom=(dateTime.getMonth() + 1) + ""String_Node_Str"" + dateTime.getDay()+ ""String_Node_Str""+ dateTime.getYear();
        dateTo=(dateTime_1.getMonth() + 1) + ""String_Node_Str"" + dateTime_1.getDay()+ ""String_Node_Str""+ dateTime_1.getYear();
      }
      String senator=cmbSenator.getText().replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
      String congress=cmbCongress.getText().replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
      int cNum=-1;
      if (!congress.equals(""String_Node_Str""))       cNum=Integer.parseInt(congress);
      senateCrawler.initialize(maxDocs,cNum,senator,dateFrom,dateTo,txtOutput.getText());
      Job job=new Job(""String_Node_Str""){
        protected IStatus run(        IProgressMonitor monitor){
          long startTime=System.currentTimeMillis();
          appendLog(""String_Node_Str"");
          Thread crawlerThread=new Thread(senateCrawler);
          try {
            crawlerThread.start();
            crawlerThread.join();
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / (float)1000 + ""String_Node_Str"");
          appendLog(""String_Node_Str"");
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              btnExtract.setText(""String_Node_Str"");
            }
          }
);
          return Status.OK_STATUS;
        }
      }
;
      job.setUser(true);
      job.schedule();
      btnExtract.setText(""String_Node_Str"");
    }
  }
);
  btnExtract.setBounds(10,320,75,25);
  btnExtract.setText(""String_Node_Str"");
  shell.setDefaultButton(btnExtract);
  Label lblOutput=new Label(composite,SWT.NONE);
  lblOutput.setBounds(10,261,80,20);
  lblOutput.setText(""String_Node_Str"");
  txtOutput=new Text(composite,SWT.BORDER);
  txtOutput.setBounds(100,261,258,21);
  Button button=new Button(composite,SWT.NONE);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog od=new DirectoryDialog(shell);
      od.open();
      String oDirectory=od.getFilterPath();
      txtOutput.setText(oDirectory);
    }
  }
);
  button.setBounds(358,261,40,25);
  button.setText(""String_Node_Str"");
  final Button btnLimitRecords=new Button(composite,SWT.CHECK);
  btnLimitRecords.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (btnLimitRecords.getSelection())       txtMaxDocs.setEnabled(true);
 else       txtMaxDocs.setEnabled(false);
    }
  }
);
  btnLimitRecords.setBounds(10,219,175,20);
  btnLimitRecords.setText(""String_Node_Str"");
  Label lblNewLabel=new Label(composite,SWT.BORDER | SWT.SHADOW_NONE);
  lblNewLabel.setBounds(433,24,175,320);
  lblNewLabel.setText(""String_Node_Str"");
  Job job2=new Job(""String_Node_Str""){
    protected IStatus run(    IProgressMonitor monitor){
      appendLog(""String_Node_Str"");
      String[] cgrss=null;
      try {
        cgrss=AvailableRecords.getAllCongresses();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      congresses=cgrss;
      Display.getDefault().asyncExec(new Runnable(){
        @Override public void run(){
          cmbCongress.setItems(congresses);
          cmbCongress.select(0);
          cmbCongress.setForeground(SWTResourceManager.getColor(SWT.COLOR_BLACK));
        }
      }
);
      appendLog(""String_Node_Str"");
      String[] senatorsArray=null;
      try {
        senatorsArray=AvailableRecords.getAllSenators(congresses);
      }
 catch (      IOException e2) {
        e2.printStackTrace();
      }
      allSenators=senatorsArray;
      Display.getDefault().asyncExec(new Runnable(){
        @Override public void run(){
          cmbSenator.setItems(allSenators);
          cmbSenator.add(""String_Node_Str"",0);
          cmbSenator.add(""String_Node_Str"",1);
          cmbSenator.add(""String_Node_Str"",2);
          cmbSenator.add(""String_Node_Str"",3);
          cmbSenator.select(0);
          cmbSenator.setForeground(SWTResourceManager.getColor(SWT.COLOR_BLACK));
        }
      }
);
      appendLog(""String_Node_Str"");
      return Status.OK_STATUS;
    }
  }
;
  job2.setUser(true);
  job2.schedule();
}",0.9996669257244364
168216,"public int invokeWordCount(String[] inputFiles,String dictionaryFile,String stopWordsFile,String outputFile,boolean doStemming) throws IOException {
  long startTime=System.currentTimeMillis();
  File dFile=null;
  useDict=false;
  doStemming=true;
  wordMat=new HashMap<String,Map<String,Double>>();
  stopWordSet=new HashSet<String>();
  keys=new TreeSet<String>();
  if (inputFiles == null) {
    logger.warning(""String_Node_Str"");
    return -2;
  }
  if (!dictionaryFile.isEmpty() && !dictionaryFile.equals(""String_Node_Str"")) {
    useDict=true;
    dFile=new File(dictionaryFile);
    if (!dFile.exists() || dFile.isDirectory()) {
      logger.warning(""String_Node_Str"");
      return -3;
    }
  }
  if (stopWordsFile.equals(null) || stopWordsFile.equals(""String_Node_Str""))   this.doStopWords=false;
 else {
    this.doStopWords=true;
    File sFile=new File(stopWordsFile);
    if (!sFile.exists() || sFile.isDirectory()) {
      logger.warning(""String_Node_Str"");
      return -4;
    }
 else {
      startTime=System.currentTimeMillis();
      stopWordSetBuild(stopWordsFile);
      logger.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
      appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
    }
  }
  File oFile=new File(outputFile + ""String_Node_Str"");
  if (outputFile == ""String_Node_Str"" || oFile.isDirectory()) {
    logger.warning(""String_Node_Str"");
    return -5;
  }
  if (useDict) {
    dict=new HashSet<String>();
    buildDictionary(dFile);
  }
  for (  String inputFile : inputFiles) {
    String input=inputFile;
    inputFile=""String_Node_Str"" + inputFile;
    if (inputFile.contains(""String_Node_Str""))     continue;
    Map<String,Double> words=new HashMap<String,Double>();
    File iFile=new File(inputFile);
    if (!iFile.exists() || iFile.isDirectory()) {
      logger.warning(""String_Node_Str"" + inputFile);
      return -2;
    }
    countWords(inputFile,words);
    wordMat.put(input,words);
  }
  writeToOutput(outputFile);
  writeReadMe(outputFile);
  return 0;
}","public int invokeWordCount(String[] inputFiles,String dictionaryFile,String stopWordsFile,String outputFile,boolean doStemming) throws IOException {
  long startTime=System.currentTimeMillis();
  File dFile=null;
  useDict=false;
  doStemming=true;
  wordMat=new HashMap<String,Map<String,Double>>();
  stopWordSet=new HashSet<String>();
  keys=new TreeSet<String>();
  if (inputFiles == null) {
    logger.warning(""String_Node_Str"");
    return -2;
  }
  if (!dictionaryFile.isEmpty() && !dictionaryFile.equals(""String_Node_Str"")) {
    useDict=true;
    dFile=new File(dictionaryFile);
    if (!dFile.exists() || dFile.isDirectory()) {
      logger.warning(""String_Node_Str"");
      return -3;
    }
  }
  if (stopWordsFile.equals(null) || stopWordsFile.equals(""String_Node_Str""))   this.doStopWords=false;
 else {
    this.doStopWords=true;
    File sFile=new File(stopWordsFile);
    if (!sFile.exists() || sFile.isDirectory()) {
      logger.warning(""String_Node_Str"");
      return -4;
    }
 else {
      startTime=System.currentTimeMillis();
      stopWordSetBuild(stopWordsFile);
      logger.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
      appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
    }
  }
  File oFile=new File(outputFile + ""String_Node_Str"");
  if (outputFile == ""String_Node_Str"" || oFile.isDirectory()) {
    logger.warning(""String_Node_Str"");
    return -5;
  }
  if (useDict) {
    dict=new HashSet<String>();
    buildDictionary(dFile);
  }
  for (  String inputFile : inputFiles) {
    String input=inputFile;
    if (inputFile.contains(""String_Node_Str""))     continue;
    Map<String,Double> words=new HashMap<String,Double>();
    File iFile=new File(inputFile);
    if (!iFile.exists() || iFile.isDirectory()) {
      logger.warning(""String_Node_Str"" + inputFile);
      return -2;
    }
    countWords(inputFile,words);
    wordMat.put(input,words);
  }
  writeToOutput(outputFile);
  writeReadMe(outputFile);
  return 0;
}",0.989117291414752
168217,"private void getBooks(String author,String aurl,String apath,String mainAuthor) throws IOException {
  try {
    Document doc=Jsoup.connect(aurl).timeout(10 * 1000).get();
    Elements subLists=doc.select(""String_Node_Str"");
    if (subLists != null && subLists.size() > 0) {
      getBooksList(author,aurl,doc,apath,mainAuthor);
      return;
    }
    Elements booksList=doc.getElementsByTag(""String_Node_Str"");
    int count=0;
    String bookname=""String_Node_Str"";
    int i=0;
    if (booksList != null) {
      int size=booksList.size();
      for (i=0; i < size; i++) {
        Element bookItem=booksList.get(i);
        String bookText=bookItem.getElementsByTag(""String_Node_Str"").attr(""String_Node_Str"");
        if (bookText.contains(""String_Node_Str""))         continue;
        bookname=bookItem.text();
        if (bookText.isEmpty() || bookText == null)         continue;
        if (skipBooks.contains(bookname))         continue;
        if (authorNames.contains(bookname) || (bookname.toLowerCase()).equals(mainAuthor.toLowerCase()))         continue;
        getBooks(bookname,bookText,apath,mainAuthor);
        count++;
      }
    }
    if (count == 0) {
      if (doc.select(""String_Node_Str"") != null)       bookname=doc.select(""String_Node_Str"").first().text();
 else       if (doc.select(""String_Node_Str"") != null && doc.select(""String_Node_Str"").size() > 0)       bookname=doc.select(""String_Node_Str"").first().text();
 else       if (doc.select(""String_Node_Str"") != null && doc.select(""String_Node_Str"").size() > 0)       bookname=doc.select(""String_Node_Str"").first().text();
 else       bookname=author;
      getContent(aurl,bookname,apath);
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + author + e);
    appendLog(""String_Node_Str"" + author);
  }
}","private void getBooks(String author,String aurl,String apath,String mainAuthor) throws IOException {
  try {
    Document doc=Jsoup.connect(aurl).timeout(10 * 1000).get();
    Elements subLists=doc.select(""String_Node_Str"");
    if (subLists != null && subLists.size() > 0) {
      getBooksList(author,aurl,doc,apath,mainAuthor);
      return;
    }
    Elements booksList=doc.getElementsByTag(""String_Node_Str"");
    int count=0;
    String bookname=""String_Node_Str"";
    int i=0;
    if (booksList != null) {
      int size=booksList.size();
      for (i=0; i < size; i++) {
        Element bookItem=booksList.get(i);
        String bookText=bookItem.getElementsByTag(""String_Node_Str"").attr(""String_Node_Str"");
        if (bookText.contains(""String_Node_Str""))         continue;
        bookname=bookItem.text();
        if (bookText.isEmpty() || bookText == null)         continue;
        if (skipBooks.contains(bookname))         continue;
        if (authorNames.contains(bookname) || (bookname.toLowerCase()).equals(mainAuthor.toLowerCase()))         continue;
        getBooks(bookname,bookText,apath,mainAuthor);
        count++;
      }
    }
    if (count == 0) {
      if (doc.select(""String_Node_Str"") != null && doc.select(""String_Node_Str"").size() > 0)       bookname=doc.select(""String_Node_Str"").first().text();
 else       if (doc.select(""String_Node_Str"") != null && doc.select(""String_Node_Str"").size() > 0)       bookname=doc.select(""String_Node_Str"").first().text();
 else       if (doc.select(""String_Node_Str"") != null && doc.select(""String_Node_Str"").size() > 0)       bookname=doc.select(""String_Node_Str"").first().text();
 else       bookname=author;
      getContent(aurl,bookname,apath);
    }
  }
 catch (  Exception e) {
    appendLog(""String_Node_Str"" + author);
  }
}",0.9081858407079646
168218,"private void getContent(String bookUri,String bookDir,String authorDir) throws IOException {
  BufferedWriter csvWriter=null;
  appendLog(""String_Node_Str"" + bookDir + ""String_Node_Str"");
  try {
    System.out.println(bookUri);
    csvWriter=new BufferedWriter(new FileWriter(new File(authorDir + System.getProperty(""String_Node_Str"") + bookDir+ ""String_Node_Str"")));
    Document doc=Jsoup.connect(bookUri).timeout(10 * 10000).get();
    Elements content=doc.getElementsByTag(""String_Node_Str"");
    for (    Element c : content) {
      csvWriter.write(c.text() + ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    appendLog(""String_Node_Str"" + bookDir);
  }
 finally {
    if (csvWriter != null)     csvWriter.close();
  }
}","private void getContent(String bookUri,String bookDir,String authorDir) throws IOException {
  BufferedWriter csvWriter=null;
  appendLog(""String_Node_Str"" + bookDir + ""String_Node_Str"");
  try {
    csvWriter=new BufferedWriter(new FileWriter(new File(authorDir + System.getProperty(""String_Node_Str"") + bookDir+ ""String_Node_Str"")));
    Document doc=Jsoup.connect(bookUri).timeout(10 * 10000).get();
    Elements content=doc.getElementsByTag(""String_Node_Str"");
    if (content.size() == 0) {
      if (csvWriter != null)       csvWriter.close();
      getBookContent(bookUri,bookDir,authorDir);
      return;
    }
    for (    Element c : content) {
      csvWriter.write(c.text() + ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    getBookContent(bookUri,bookDir,authorDir);
  }
 finally {
    if (csvWriter != null)     csvWriter.close();
  }
}",0.8395989974937343
168219,"public static void main(String[] args) throws IOException {
  LatinCrawler lc=new LatinCrawler();
  lc.outputDir=""String_Node_Str"";
  lc.initialize(""String_Node_Str"");
}","public static void main(String[] args) throws Exception {
  LatinCrawler lc=new LatinCrawler();
  lc.outputDir=""String_Node_Str"";
  lc.authorNames.add(""String_Node_Str"");
  lc.getContent(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.7554479418886199
168220,"private void getBooks(String author,String aurl,String apath,String mainAuthor) throws IOException {
  try {
    System.out.println(aurl);
    Document doc=Jsoup.connect(aurl).timeout(10 * 1000).get();
    Elements subLists=doc.select(""String_Node_Str"");
    if (subLists != null && subLists.size() > 1) {
      getBooksList(author,aurl,doc,apath);
      return;
    }
    Elements booksList=doc.getElementsByTag(""String_Node_Str"");
    System.out.println(apath);
    int count=0;
    String bookname=""String_Node_Str"";
    if (booksList != null) {
      for (      Element bookItem : booksList) {
        String bookText=bookItem.getElementsByTag(""String_Node_Str"").attr(""String_Node_Str"");
        if (bookText.contains(""String_Node_Str""))         continue;
        bookname=bookItem.text();
        System.out.println(bookname + ""String_Node_Str"" + author);
        if (bookname.equals(""String_Node_Str"") || bookname.equals(""String_Node_Str"") || bookname.equals(""String_Node_Str"")|| bookname.equals(""String_Node_Str"")|| (bookname.toLowerCase()).equals(mainAuthor.toLowerCase())|| bookname.equals(""String_Node_Str"")|| bookname.equals(""String_Node_Str"")|| bookname.equals(""String_Node_Str"")|| bookname.equals(""String_Node_Str"")|| bookname.equals(""String_Node_Str""))         continue;
        if (authorUrl.contains(bookText))         continue;
        getBooks(bookname,bookText,apath,mainAuthor);
        count++;
      }
    }
    System.out.println(count);
    if (count == 0) {
      if (doc.select(""String_Node_Str"") != null && doc.select(""String_Node_Str"").size() > 0)       bookname=doc.select(""String_Node_Str"").first().text();
 else       if (doc.select(""String_Node_Str"") != null && doc.select(""String_Node_Str"").size() > 0)       bookname=doc.select(""String_Node_Str"").first().text();
 else       bookname=author;
      getContent(aurl,bookname,apath);
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + author + e);
    appendLog(""String_Node_Str"" + author);
  }
}","private void getBooks(String author,String aurl,String apath,String mainAuthor) throws IOException {
  try {
    Document doc=Jsoup.connect(aurl).timeout(10 * 1000).get();
    Elements subLists=doc.select(""String_Node_Str"");
    if (subLists != null && subLists.size() > 1) {
      getBooksList(author,aurl,doc,apath,mainAuthor);
      return;
    }
    Elements booksList=doc.getElementsByTag(""String_Node_Str"");
    int count=0;
    String bookname=""String_Node_Str"";
    if (booksList != null) {
      for (      Element bookItem : booksList) {
        String bookText=bookItem.getElementsByTag(""String_Node_Str"").attr(""String_Node_Str"");
        if (bookText.contains(""String_Node_Str""))         continue;
        bookname=bookItem.text();
        if (skipBooks.contains(bookname))         continue;
        if (authorNames.contains(bookname) || (bookname.toLowerCase()).equals(mainAuthor.toLowerCase()))         continue;
        getBooks(bookname,bookText,apath,mainAuthor);
        count++;
      }
    }
    if (count == 0) {
      if (doc.select(""String_Node_Str"") != null && doc.select(""String_Node_Str"").size() > 0)       bookname=doc.select(""String_Node_Str"").first().text();
 else       if (doc.select(""String_Node_Str"") != null && doc.select(""String_Node_Str"").size() > 0)       bookname=doc.select(""String_Node_Str"").first().text();
 else       bookname=author;
      getContent(aurl,bookname,apath);
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + author + e);
    appendLog(""String_Node_Str"" + author);
  }
}",0.797415004214667
168221,"public LatinCrawler(){
  authorNames=new ArrayList<String>();
  authorUrl=new ArrayList<String>();
}","public LatinCrawler(){
  authorNames=new HashSet<String>();
  skipBooks=new HashSet<String>();
  skipBooks.add(""String_Node_Str"");
  skipBooks.add(""String_Node_Str"");
  skipBooks.add(""String_Node_Str"");
  skipBooks.add(""String_Node_Str"");
  skipBooks.add(""String_Node_Str"");
  skipBooks.add(""String_Node_Str"");
  skipBooks.add(""String_Node_Str"");
  skipBooks.add(""String_Node_Str"");
  skipBooks.add(""String_Node_Str"");
  skipBooks.add(""String_Node_Str"");
  skipBooks.add(""String_Node_Str"");
  skipBooks.add(""String_Node_Str"");
  skipBooks.add(""String_Node_Str"");
  skipBooks.add(""String_Node_Str"");
  skipBooks.add(""String_Node_Str"");
  skipBooks.add(""String_Node_Str"");
}",0.1839378238341968
168222,"private void getBooksList(String author,String aurl,Document doc,String apath){
  System.out.println(""String_Node_Str"");
  Elements subLists=doc.select(""String_Node_Str"");
  Elements subHeaders=doc.select(""String_Node_Str"");
  int count=0;
  for (  Element list : subLists) {
    try {
      Elements booksList=list.getElementsByTag(""String_Node_Str"");
      File authorDir=new File(apath + File.separator + subHeaders.get(count).text());
      if (!authorDir.exists()) {
        authorDir.mkdirs();
      }
      String apath1=authorDir.toString();
      System.out.println(apath1);
      count++;
      String bookname=""String_Node_Str"";
      for (      Element bookItem : booksList) {
        String bookText=bookItem.getElementsByTag(""String_Node_Str"").attr(""String_Node_Str"");
        bookname=bookItem.text();
        System.out.println(bookText);
        getContent(bookText,bookname,apath1);
      }
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + author);
      appendLog(""String_Node_Str"" + author);
    }
  }
}","private void getBooksList(String author,String aurl,Document doc,String apath,String mainAuthor){
  Elements subLists=doc.select(""String_Node_Str"");
  Elements subHeaders=doc.select(""String_Node_Str"");
  int i=0, size1=subLists.size(), size2=subHeaders.size(), j=0;
  String bookText=""String_Node_Str"";
  String bookname=""String_Node_Str"";
  Element head=null;
  while (i < size1 || j < size2) {
    try {
      if (j < size2) {
        head=subHeaders.get(j);
        Elements bookLink=head.getElementsByTag(""String_Node_Str"");
        if (bookLink != null && bookLink.size() > 0) {
          bookText=bookLink.get(0).attr(""String_Node_Str"");
          bookname=bookLink.get(0).text();
          if (skipBooks.contains(bookname))           continue;
          if (authorNames.contains(bookname) || (bookname.toLowerCase()).equals(author.toLowerCase()))           continue;
          File authorDir=new File(apath + File.separator + bookname);
          if (!authorDir.exists()) {
            authorDir.mkdirs();
          }
          String apath1=authorDir.toString();
          getBooks(bookname,bookText,apath1,mainAuthor);
          j++;
          continue;
        }
      }
      if (i < size1) {
        Element list=subLists.get(i);
        Elements booksList=list.getElementsByTag(""String_Node_Str"");
        String authorNewDir=apath + File.separator;
        if (j < size2)         authorNewDir+=head.text();
 else         authorNewDir+=""String_Node_Str"";
        File authorDir=new File(authorNewDir);
        if (!authorDir.exists()) {
          authorDir.mkdirs();
        }
        String apath1=authorDir.toString();
        int count1=0;
        if (booksList != null) {
          for (          Element bookItem : booksList) {
            bookText=bookItem.getElementsByTag(""String_Node_Str"").attr(""String_Node_Str"");
            if (bookText.contains(""String_Node_Str""))             continue;
            bookname=bookItem.text();
            if (skipBooks.contains(bookname))             continue;
            if (authorNames.contains(bookname) || (bookname.toLowerCase()).equals(author.toLowerCase()))             continue;
            getBooks(bookname,bookText,apath1,mainAuthor);
            count1++;
          }
        }
        if (count1 == 0) {
          if (doc.select(""String_Node_Str"") != null && doc.select(""String_Node_Str"").size() > 0)           bookname=doc.select(""String_Node_Str"").first().text();
 else           if (doc.select(""String_Node_Str"") != null && doc.select(""String_Node_Str"").size() > 0)           bookname=doc.select(""String_Node_Str"").first().text();
 else           bookname=author;
          getContent(aurl,bookname,apath1);
        }
        i++;
      }
      j++;
    }
 catch (    Exception e) {
      appendLog(""String_Node_Str"" + author);
    }
  }
}",0.22296947749612
168223,"private void getContent(String bookUri,String bookDir,String authorDir) throws IOException {
  BufferedWriter csvWriter=null;
  System.out.println(""String_Node_Str"" + bookDir + ""String_Node_Str"");
  appendLog(""String_Node_Str"" + bookDir + ""String_Node_Str"");
  try {
    System.out.println(bookUri);
    csvWriter=new BufferedWriter(new FileWriter(new File(authorDir + System.getProperty(""String_Node_Str"") + bookDir+ ""String_Node_Str"")));
    Document doc=Jsoup.connect(bookUri).timeout(10 * 10000).get();
    Elements content=doc.getElementsByTag(""String_Node_Str"");
    for (    Element c : content) {
      csvWriter.write(c.text() + ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + bookDir + e);
    appendLog(""String_Node_Str"" + bookDir);
  }
 finally {
    if (csvWriter != null)     csvWriter.close();
  }
}","private void getContent(String bookUri,String bookDir,String authorDir) throws IOException {
  BufferedWriter csvWriter=null;
  appendLog(""String_Node_Str"" + bookDir + ""String_Node_Str"");
  try {
    csvWriter=new BufferedWriter(new FileWriter(new File(authorDir + System.getProperty(""String_Node_Str"") + bookDir+ ""String_Node_Str"")));
    Document doc=Jsoup.connect(bookUri).timeout(10 * 10000).get();
    Elements content=doc.getElementsByTag(""String_Node_Str"");
    for (    Element c : content) {
      csvWriter.write(c.text() + ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    appendLog(""String_Node_Str"" + bookDir);
  }
 finally {
    if (csvWriter != null)     csvWriter.close();
  }
}",0.8742820676451819
168224,"public static void main(String[] args) throws IOException {
  LatinCrawler lc=new LatinCrawler();
  lc.outputDir=""String_Node_Str"";
  lc.getBooks(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","public static void main(String[] args) throws IOException {
  LatinCrawler lc=new LatinCrawler();
  lc.outputDir=""String_Node_Str"";
  lc.authorNames.add(""String_Node_Str"");
  lc.getBooks(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9151138716356108
168225,"public void getAllAuthors() throws IOException {
  int i, size=0;
  String name, url;
  Document doc=Jsoup.connect(""String_Node_Str"").timeout(10 * 1000).get();
  Elements authorsList=doc.getElementsByTag(""String_Node_Str"");
  System.out.println(authorsList);
  size=authorsList.size();
  String[] authorString=new String[size];
  for (i=0; i < size; i++) {
    name=authorsList.get(i).text();
    url=""String_Node_Str"" + authorsList.get(i).attr(""String_Node_Str"");
    authorUrl.add(url);
    authorNames.add(name);
    if (name.equals(""String_Node_Str"") || url.equals(""String_Node_Str""))     continue;
    String aurl=outputDir + File.separator + name;
    File authorDir=new File(aurl);
    if (!authorDir.exists()) {
      authorDir.mkdirs();
    }
    System.out.println(""String_Node_Str"" + name + ""String_Node_Str"");
    appendLog(""String_Node_Str"" + name + ""String_Node_Str"");
    getBooks(name,url,aurl,name);
  }
  return;
}","public void getAllAuthors() throws IOException {
  int i, size=0;
  String name, url;
  Document doc=Jsoup.connect(""String_Node_Str"").timeout(10 * 1000).get();
  Elements authorsList=doc.getElementsByTag(""String_Node_Str"");
  size=authorsList.size();
  int count=0;
  for (i=0; i < size; i++) {
    name=authorsList.get(i).text();
    url=""String_Node_Str"" + authorsList.get(i).attr(""String_Node_Str"");
    authorNames.add(name);
    if (skipBooks.contains(name))     continue;
    String aurl=outputDir + File.separator + name;
    File authorDir=new File(aurl);
    if (!authorDir.exists()) {
      authorDir.mkdirs();
    }
    appendLog(""String_Node_Str"" + name + ""String_Node_Str"");
    getBooks(name,url,aurl,name);
  }
  Element secondList=doc.getElementsByTag(""String_Node_Str"").get(1);
  Elements auth2List=secondList.getElementsByTag(""String_Node_Str"");
  for (  Element auth : auth2List) {
    name=auth.text();
    url=auth.getElementsByTag(""String_Node_Str"").attr(""String_Node_Str"");
    if (authorNames.contains(name))     continue;
    authorNames.add(name);
    if (skipBooks.contains(name))     continue;
    String aurl=outputDir + File.separator + name;
    File authorDir=new File(aurl);
    if (!authorDir.exists()) {
      authorDir.mkdirs();
    }
    appendLog(""String_Node_Str"" + name + ""String_Node_Str"");
    getBooks(name,url,aurl,name);
  }
  return;
}",0.5594466061392132
168226,"@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setBounds(0,0,507,298);
  Label lblData=new Label(composite,SWT.NONE);
  lblData.setBounds(10,10,55,15);
  lblData.setText(""String_Node_Str"");
  txtSourceDir=new Text(composite,SWT.BORDER);
  txtSourceDir.setBounds(115,7,334,21);
  Button button=new Button(composite,SWT.NONE);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtSourceDir.setText(fp1Directory);
      txtLabel.setText(fd1.getFilterPath().substring(1 + fd1.getFilterPath().lastIndexOf(System.getProperty(""String_Node_Str""))));
    }
  }
);
  button.setBounds(446,6,39,25);
  button.setText(""String_Node_Str"");
  txtNumTopics=new Text(composite,SWT.BORDER);
  txtNumTopics.setBounds(115,46,76,21);
  Label lblNumberOfTopics=new Label(composite,SWT.NONE);
  lblNumberOfTopics.setBounds(10,49,99,15);
  lblNumberOfTopics.setText(""String_Node_Str"");
  txtOutputPath=new Text(composite,SWT.BORDER);
  txtOutputPath.setBounds(115,83,334,21);
  Button button_1=new Button(composite,SWT.NONE);
  button_1.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtOutputPath.setText(fp1Directory);
    }
  }
);
  button_1.setBounds(446,81,39,25);
  button_1.setText(""String_Node_Str"");
  Label lblOutputPath=new Label(composite,SWT.NONE);
  lblOutputPath.setBounds(10,89,76,15);
  lblOutputPath.setText(""String_Node_Str"");
  Button btnPreprocess=new Button(composite,SWT.CHECK);
  btnPreprocess.setBounds(491,10,94,18);
  btnPreprocess.setText(""String_Node_Str"");
  Button btnProcess=new Button(composite,SWT.NONE);
  btnProcess.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      String ppDir=txtSourceDir.getText();
      File iDir=new File(ppDir);
      File[] iFiles=iDir.listFiles();
      for (      File f : iFiles) {
        if (f.getAbsolutePath().contains(""String_Node_Str""))         f.delete();
      }
      if (btnPreprocess.getSelection()) {
        ppService=GlobalPresserSettings.ppService;
        if (ppService.options == null) {
          System.out.println(""String_Node_Str"");
          appendLog(""String_Node_Str"");
          GlobalPresserSettings.ppService.setOptions(shell);
        }
        IEclipseContext iEclipseContext=context;
        ContextInjectionFactory.inject(ppService,iEclipseContext);
        appendLog(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        try {
          ppDir=ppService.doPreprocessing(txtSourceDir.getText());
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
      }
      LDA lda=new LDA();
      IEclipseContext iEclipseContext=context;
      ContextInjectionFactory.inject(lda,iEclipseContext);
      try {
        System.out.println(""String_Node_Str"");
        appendLog(""String_Node_Str"");
        long startTime=System.currentTimeMillis();
        lda.doLDA(ppDir,txtNumTopics.getText(),txtOutputPath.getText(),txtLabel.getText());
        System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
        appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
        if (btnPreprocess.getSelection() && ppService.doCleanUp()) {
          ppService.clean(ppDir);
          System.out.println(""String_Node_Str"" + ppDir);
          appendLog(""String_Node_Str"" + ppDir);
        }
        appendLog(""String_Node_Str"");
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
    }
  }
);
  btnProcess.setBounds(11,163,75,25);
  btnProcess.setText(""String_Node_Str"");
  Label lblOutputPrefix=new Label(composite,SWT.NONE);
  lblOutputPrefix.setBounds(10,125,76,15);
  lblOutputPrefix.setText(""String_Node_Str"");
  txtLabel=new Text(composite,SWT.BORDER);
  txtLabel.setText(""String_Node_Str"");
  txtLabel.setBounds(115,119,76,21);
}","@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setBounds(0,0,507,298);
  Label lblData=new Label(composite,SWT.NONE);
  lblData.setBounds(10,10,55,15);
  lblData.setText(""String_Node_Str"");
  txtSourceDir=new Text(composite,SWT.BORDER);
  txtSourceDir.setBounds(115,7,334,21);
  Button button=new Button(composite,SWT.NONE);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtSourceDir.setText(fp1Directory);
      txtLabel.setText(fd1.getFilterPath().substring(1 + fd1.getFilterPath().lastIndexOf(System.getProperty(""String_Node_Str""))));
    }
  }
);
  button.setBounds(446,6,39,25);
  button.setText(""String_Node_Str"");
  txtNumTopics=new Text(composite,SWT.BORDER);
  txtNumTopics.setBounds(115,46,76,21);
  Label lblNumberOfTopics=new Label(composite,SWT.NONE);
  lblNumberOfTopics.setBounds(10,49,99,15);
  lblNumberOfTopics.setText(""String_Node_Str"");
  txtOutputPath=new Text(composite,SWT.BORDER);
  txtOutputPath.setBounds(115,83,334,21);
  Button button_1=new Button(composite,SWT.NONE);
  button_1.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtOutputPath.setText(fp1Directory);
    }
  }
);
  button_1.setBounds(446,81,39,25);
  button_1.setText(""String_Node_Str"");
  Label lblOutputPath=new Label(composite,SWT.NONE);
  lblOutputPath.setBounds(10,89,76,15);
  lblOutputPath.setText(""String_Node_Str"");
  final Button btnPreprocess=new Button(composite,SWT.CHECK);
  btnPreprocess.setBounds(491,10,94,18);
  btnPreprocess.setText(""String_Node_Str"");
  Button btnProcess=new Button(composite,SWT.NONE);
  btnProcess.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      String ppDir=txtSourceDir.getText();
      File iDir=new File(ppDir);
      File[] iFiles=iDir.listFiles();
      for (      File f : iFiles) {
        if (f.getAbsolutePath().contains(""String_Node_Str""))         f.delete();
      }
      if (btnPreprocess.getSelection()) {
        ppService=GlobalPresserSettings.ppService;
        if (ppService.options == null) {
          System.out.println(""String_Node_Str"");
          appendLog(""String_Node_Str"");
          GlobalPresserSettings.ppService.setOptions(shell);
        }
        IEclipseContext iEclipseContext=context;
        ContextInjectionFactory.inject(ppService,iEclipseContext);
        appendLog(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        try {
          ppDir=ppService.doPreprocessing(txtSourceDir.getText());
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
      }
      LDA lda=new LDA();
      IEclipseContext iEclipseContext=context;
      ContextInjectionFactory.inject(lda,iEclipseContext);
      try {
        System.out.println(""String_Node_Str"");
        appendLog(""String_Node_Str"");
        long startTime=System.currentTimeMillis();
        lda.doLDA(ppDir,txtNumTopics.getText(),txtOutputPath.getText(),txtLabel.getText());
        System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
        appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
        if (btnPreprocess.getSelection() && ppService.doCleanUp()) {
          ppService.clean(ppDir);
          System.out.println(""String_Node_Str"" + ppDir);
          appendLog(""String_Node_Str"" + ppDir);
        }
        appendLog(""String_Node_Str"");
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
    }
  }
);
  btnProcess.setBounds(11,163,75,25);
  btnProcess.setText(""String_Node_Str"");
  Label lblOutputPrefix=new Label(composite,SWT.NONE);
  lblOutputPrefix.setBounds(10,125,76,15);
  lblOutputPrefix.setText(""String_Node_Str"");
  txtLabel=new Text(composite,SWT.BORDER);
  txtLabel.setText(""String_Node_Str"");
  txtLabel.setBounds(115,119,76,21);
}",0.9992959399202064
168227,"@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  parent.setLayout(new GridLayout(1,false));
  Group grpTraining=new Group(parent,SWT.NONE);
  GridData gd_grpTraining=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  gd_grpTraining.heightHint=111;
  gd_grpTraining.widthHint=505;
  grpTraining.setLayoutData(gd_grpTraining);
  grpTraining.setText(""String_Node_Str"");
  Label lblDataSet=new Label(grpTraining,SWT.NONE);
  lblDataSet.setBounds(10,26,95,15);
  lblDataSet.setText(""String_Node_Str"");
  txtFolderPath1=new Text(grpTraining,SWT.BORDER);
  txtFolderPath1.setBounds(142,18,332,21);
  Button button=new Button(grpTraining,SWT.NONE);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtFolderPath1.setText(fp1Directory);
    }
  }
);
  button.setBounds(472,16,43,25);
  button.setText(""String_Node_Str"");
  Label lblModelFilePath=new Label(grpTraining,SWT.NONE);
  lblModelFilePath.setBounds(10,62,95,15);
  lblModelFilePath.setText(""String_Node_Str"");
  txtFolderPath2=new Text(grpTraining,SWT.BORDER);
  txtFolderPath2.setBounds(142,58,332,21);
  Button button_1=new Button(grpTraining,SWT.NONE);
  button_1.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtFolderPath2.setText(fp1Directory);
    }
  }
);
  button_1.setBounds(472,57,43,25);
  button_1.setText(""String_Node_Str"");
  Button btnPreprocess=new Button(grpTraining,SWT.CHECK);
  btnPreprocess.setBounds(10,93,94,18);
  btnPreprocess.setText(""String_Node_Str"");
  CTabFolder tabFolder=new CTabFolder(parent,SWT.BORDER);
  GridData gd_tabFolder=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  gd_tabFolder.widthHint=508;
  tabFolder.setLayoutData(gd_tabFolder);
  tabFolder.setSimple(false);
  tabFolder.setSelectionBackground(Display.getCurrent().getSystemColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND_GRADIENT));
  CTabItem tbtmTest=new CTabItem(tabFolder,SWT.NONE);
  tbtmTest.setText(""String_Node_Str"");
  Group grpTesting=new Group(tabFolder,SWT.NONE);
  tbtmTest.setControl(grpTesting);
  Label lblNewLabel=new Label(grpTesting,SWT.NONE);
  lblNewLabel.setBounds(10,28,98,15);
  lblNewLabel.setText(""String_Node_Str"");
  txtTestPath1=new Text(grpTesting,SWT.BORDER);
  txtTestPath1.setBounds(134,22,337,21);
  Button button_2=new Button(grpTesting,SWT.NONE);
  button_2.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtTestPath1.setText(fp1Directory);
    }
  }
);
  button_2.setBounds(468,21,36,25);
  button_2.setText(""String_Node_Str"");
  Button btnTest=new Button(grpTesting,SWT.NONE);
  btnTest.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      String ppDir1=txtFolderPath1.getText();
      String ppDir2=txtFolderPath2.getText();
      if (ppDir1.equals(""String_Node_Str"") || ppDir2.equals(""String_Node_Str"") || txtOutputPath.getText().equals(""String_Node_Str"")) {
        showError(shell);
        return;
      }
      File iDir1=new File(ppDir1);
      File[] iFiles1=iDir1.listFiles();
      for (      File f : iFiles1) {
        if (f.getAbsolutePath().contains(""String_Node_Str""))         f.delete();
      }
      File iDir2=new File(ppDir2);
      File[] iFiles2=iDir2.listFiles();
      for (      File f : iFiles2) {
        if (f.getAbsolutePath().contains(""String_Node_Str""))         f.delete();
      }
      if (btnPreprocess.getSelection()) {
        ppService=GlobalPresserSettings.ppService;
        if (ppService.options == null) {
          System.out.println(""String_Node_Str"");
          appendLog(""String_Node_Str"");
          GlobalPresserSettings.ppService.setOptions(shell);
        }
        IEclipseContext iEclipseContext=context;
        ContextInjectionFactory.inject(ppService,iEclipseContext);
        appendLog(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        try {
          ppDir1=ppService.doPreprocessing(ppDir1);
          ppDir2=ppService.doPreprocessing(ppDir2);
          File dir1=new File(ppDir1);
          File dest1=new File(txtFolderPath1.getText() + ""String_Node_Str"" + ""String_Node_Str"");
          dir1.renameTo(dest1);
          ppDir1=dest1.getAbsolutePath();
          File dir2=new File(ppDir2);
          File dest2=new File(txtFolderPath2.getText() + ""String_Node_Str"" + ""String_Node_Str"");
          dir2.renameTo(dest2);
          ppDir2=dest2.getAbsolutePath();
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
      }
      NBClassifier nb=new NBClassifier();
      IEclipseContext iEclipseContext=context;
      ContextInjectionFactory.inject(nb,iEclipseContext);
      try {
        System.out.println(""String_Node_Str"");
        appendLog(""String_Node_Str"");
        long startTime=System.currentTimeMillis();
        nb.doClassification(ppDir1,ppDir2,txtTestPath1.getText(),txtTestPath2.getText(),txtOutputPath.getText(),false,false);
        System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
        appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
        if (btnPreprocess.getSelection() && ppService.doCleanUp()) {
          ppService.clean(ppDir1);
          System.out.println(""String_Node_Str"" + ppDir1);
          appendLog(""String_Node_Str"" + ppDir1);
          ppService.clean(ppDir2);
          System.out.println(""String_Node_Str"" + ppDir2);
          appendLog(""String_Node_Str"" + ppDir2);
        }
        appendLog(""String_Node_Str"");
      }
 catch (      FileNotFoundException e1) {
        e1.printStackTrace();
      }
catch (      IOException e1) {
        e1.printStackTrace();
      }
catch (      EvalError e1) {
        e1.printStackTrace();
      }
    }
  }
);
  btnTest.setBounds(10,141,75,25);
  btnTest.setText(""String_Node_Str"");
  Label lblClassTest=new Label(grpTesting,SWT.NONE);
  lblClassTest.setText(""String_Node_Str"");
  lblClassTest.setBounds(10,63,98,15);
  txtTestPath2=new Text(grpTesting,SWT.BORDER);
  txtTestPath2.setBounds(134,57,337,21);
  Button button_6=new Button(grpTesting,SWT.NONE);
  button_6.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtTestPath2.setText(fp1Directory);
    }
  }
);
  button_6.setText(""String_Node_Str"");
  button_6.setBounds(468,56,36,25);
  Label lblOutputPath=new Label(grpTesting,SWT.NONE);
  lblOutputPath.setText(""String_Node_Str"");
  lblOutputPath.setBounds(10,101,98,15);
  txtOutputPath=new Text(grpTesting,SWT.BORDER);
  txtOutputPath.setBounds(134,95,337,21);
  Button button_7=new Button(grpTesting,SWT.NONE);
  button_7.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtOutputPath.setText(fp1Directory);
    }
  }
);
  button_7.setText(""String_Node_Str"");
  button_7.setBounds(468,94,36,25);
  CTabItem tbtmClassify=new CTabItem(tabFolder,SWT.NONE);
  tbtmClassify.setText(""String_Node_Str"");
  Group grpClassify=new Group(tabFolder,SWT.NONE);
  tbtmClassify.setControl(grpClassify);
  Label lblInputFile=new Label(grpClassify,SWT.NONE);
  lblInputFile.setBounds(10,29,55,15);
  lblInputFile.setText(""String_Node_Str"");
  txtCInput=new Text(grpClassify,SWT.BORDER);
  txtCInput.setEnabled(true);
  txtCInput.setBounds(135,23,336,21);
  Button button_3=new Button(grpClassify,SWT.NONE);
  button_3.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtCInput.setText(fp1Directory);
    }
  }
);
  button_3.setEnabled(true);
  button_3.setBounds(471,19,27,25);
  button_3.setText(""String_Node_Str"");
  Label lblOutputFile_1=new Label(grpClassify,SWT.NONE);
  lblOutputFile_1.setBounds(10,69,78,15);
  lblOutputFile_1.setText(""String_Node_Str"");
  txtCOutput=new Text(grpClassify,SWT.BORDER);
  txtCOutput.setEnabled(true);
  txtCOutput.setBounds(135,63,336,21);
  Button button_5=new Button(grpClassify,SWT.NONE);
  button_5.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtCOutput.setText(fp1Directory);
    }
  }
);
  button_5.setEnabled(true);
  button_5.setBounds(471,59,27,25);
  button_5.setText(""String_Node_Str"");
  Button btnClassify=new Button(grpClassify,SWT.NONE);
  btnClassify.setEnabled(true);
  btnClassify.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      String ppDir1=txtFolderPath1.getText();
      String ppDir2=txtFolderPath2.getText();
      if (ppDir1.equals(""String_Node_Str"") || ppDir2.equals(""String_Node_Str"") || txtCOutput.getText().equals(""String_Node_Str"")) {
        showError(shell);
        return;
      }
      File iDir1=new File(ppDir1);
      File[] iFiles1=iDir1.listFiles();
      for (      File f : iFiles1) {
        if (f.getAbsolutePath().contains(""String_Node_Str""))         f.delete();
      }
      File iDir2=new File(ppDir2);
      File[] iFiles2=iDir2.listFiles();
      for (      File f : iFiles2) {
        if (f.getAbsolutePath().contains(""String_Node_Str""))         f.delete();
      }
      NBClassifier nb=new NBClassifier();
      IEclipseContext iEclipseContext=context;
      ContextInjectionFactory.inject(nb,iEclipseContext);
      try {
        System.out.println(""String_Node_Str"");
        appendLog(""String_Node_Str"");
        long startTime=System.currentTimeMillis();
        nb.doValidation(ppDir1,ppDir2,txtCInput.getText(),txtCOutput.getText(),false,false);
        System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
        appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
        appendLog(""String_Node_Str"");
      }
 catch (      FileNotFoundException e1) {
        e1.printStackTrace();
      }
catch (      IOException e1) {
        e1.printStackTrace();
      }
catch (      EvalError e1) {
        e1.printStackTrace();
      }
    }
  }
);
  btnClassify.setBounds(10,103,75,25);
  btnClassify.setText(""String_Node_Str"");
  tabFolder.setSelection(0);
}","@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  parent.setLayout(new GridLayout(1,false));
  Group grpTraining=new Group(parent,SWT.NONE);
  GridData gd_grpTraining=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  gd_grpTraining.heightHint=111;
  gd_grpTraining.widthHint=505;
  grpTraining.setLayoutData(gd_grpTraining);
  grpTraining.setText(""String_Node_Str"");
  Label lblDataSet=new Label(grpTraining,SWT.NONE);
  lblDataSet.setBounds(10,26,95,15);
  lblDataSet.setText(""String_Node_Str"");
  txtFolderPath1=new Text(grpTraining,SWT.BORDER);
  txtFolderPath1.setBounds(142,18,332,21);
  Button button=new Button(grpTraining,SWT.NONE);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtFolderPath1.setText(fp1Directory);
    }
  }
);
  button.setBounds(472,16,43,25);
  button.setText(""String_Node_Str"");
  Label lblModelFilePath=new Label(grpTraining,SWT.NONE);
  lblModelFilePath.setBounds(10,62,95,15);
  lblModelFilePath.setText(""String_Node_Str"");
  txtFolderPath2=new Text(grpTraining,SWT.BORDER);
  txtFolderPath2.setBounds(142,58,332,21);
  Button button_1=new Button(grpTraining,SWT.NONE);
  button_1.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtFolderPath2.setText(fp1Directory);
    }
  }
);
  button_1.setBounds(472,57,43,25);
  button_1.setText(""String_Node_Str"");
  final Button btnPreprocess=new Button(grpTraining,SWT.CHECK);
  btnPreprocess.setBounds(10,93,94,18);
  btnPreprocess.setText(""String_Node_Str"");
  CTabFolder tabFolder=new CTabFolder(parent,SWT.BORDER);
  GridData gd_tabFolder=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  gd_tabFolder.widthHint=508;
  tabFolder.setLayoutData(gd_tabFolder);
  tabFolder.setSimple(false);
  tabFolder.setSelectionBackground(Display.getCurrent().getSystemColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND_GRADIENT));
  CTabItem tbtmTest=new CTabItem(tabFolder,SWT.NONE);
  tbtmTest.setText(""String_Node_Str"");
  Group grpTesting=new Group(tabFolder,SWT.NONE);
  tbtmTest.setControl(grpTesting);
  Label lblNewLabel=new Label(grpTesting,SWT.NONE);
  lblNewLabel.setBounds(10,28,98,15);
  lblNewLabel.setText(""String_Node_Str"");
  txtTestPath1=new Text(grpTesting,SWT.BORDER);
  txtTestPath1.setBounds(134,22,337,21);
  Button button_2=new Button(grpTesting,SWT.NONE);
  button_2.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtTestPath1.setText(fp1Directory);
    }
  }
);
  button_2.setBounds(468,21,36,25);
  button_2.setText(""String_Node_Str"");
  Button btnTest=new Button(grpTesting,SWT.NONE);
  btnTest.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      String ppDir1=txtFolderPath1.getText();
      String ppDir2=txtFolderPath2.getText();
      if (ppDir1.equals(""String_Node_Str"") || ppDir2.equals(""String_Node_Str"") || txtOutputPath.getText().equals(""String_Node_Str"")) {
        showError(shell);
        return;
      }
      File iDir1=new File(ppDir1);
      File[] iFiles1=iDir1.listFiles();
      for (      File f : iFiles1) {
        if (f.getAbsolutePath().contains(""String_Node_Str""))         f.delete();
      }
      File iDir2=new File(ppDir2);
      File[] iFiles2=iDir2.listFiles();
      for (      File f : iFiles2) {
        if (f.getAbsolutePath().contains(""String_Node_Str""))         f.delete();
      }
      if (btnPreprocess.getSelection()) {
        ppService=GlobalPresserSettings.ppService;
        if (ppService.options == null) {
          System.out.println(""String_Node_Str"");
          appendLog(""String_Node_Str"");
          GlobalPresserSettings.ppService.setOptions(shell);
        }
        IEclipseContext iEclipseContext=context;
        ContextInjectionFactory.inject(ppService,iEclipseContext);
        appendLog(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        try {
          ppDir1=ppService.doPreprocessing(ppDir1);
          ppDir2=ppService.doPreprocessing(ppDir2);
          File dir1=new File(ppDir1);
          File dest1=new File(txtFolderPath1.getText() + ""String_Node_Str"" + ""String_Node_Str"");
          dir1.renameTo(dest1);
          ppDir1=dest1.getAbsolutePath();
          File dir2=new File(ppDir2);
          File dest2=new File(txtFolderPath2.getText() + ""String_Node_Str"" + ""String_Node_Str"");
          dir2.renameTo(dest2);
          ppDir2=dest2.getAbsolutePath();
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
      }
      NBClassifier nb=new NBClassifier();
      IEclipseContext iEclipseContext=context;
      ContextInjectionFactory.inject(nb,iEclipseContext);
      try {
        System.out.println(""String_Node_Str"");
        appendLog(""String_Node_Str"");
        long startTime=System.currentTimeMillis();
        nb.doClassification(ppDir1,ppDir2,txtTestPath1.getText(),txtTestPath2.getText(),txtOutputPath.getText(),false,false);
        System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
        appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
        if (btnPreprocess.getSelection() && ppService.doCleanUp()) {
          ppService.clean(ppDir1);
          System.out.println(""String_Node_Str"" + ppDir1);
          appendLog(""String_Node_Str"" + ppDir1);
          ppService.clean(ppDir2);
          System.out.println(""String_Node_Str"" + ppDir2);
          appendLog(""String_Node_Str"" + ppDir2);
        }
        appendLog(""String_Node_Str"");
      }
 catch (      FileNotFoundException e1) {
        e1.printStackTrace();
      }
catch (      IOException e1) {
        e1.printStackTrace();
      }
catch (      EvalError e1) {
        e1.printStackTrace();
      }
    }
  }
);
  btnTest.setBounds(10,141,75,25);
  btnTest.setText(""String_Node_Str"");
  Label lblClassTest=new Label(grpTesting,SWT.NONE);
  lblClassTest.setText(""String_Node_Str"");
  lblClassTest.setBounds(10,63,98,15);
  txtTestPath2=new Text(grpTesting,SWT.BORDER);
  txtTestPath2.setBounds(134,57,337,21);
  Button button_6=new Button(grpTesting,SWT.NONE);
  button_6.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtTestPath2.setText(fp1Directory);
    }
  }
);
  button_6.setText(""String_Node_Str"");
  button_6.setBounds(468,56,36,25);
  Label lblOutputPath=new Label(grpTesting,SWT.NONE);
  lblOutputPath.setText(""String_Node_Str"");
  lblOutputPath.setBounds(10,101,98,15);
  txtOutputPath=new Text(grpTesting,SWT.BORDER);
  txtOutputPath.setBounds(134,95,337,21);
  Button button_7=new Button(grpTesting,SWT.NONE);
  button_7.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtOutputPath.setText(fp1Directory);
    }
  }
);
  button_7.setText(""String_Node_Str"");
  button_7.setBounds(468,94,36,25);
  CTabItem tbtmClassify=new CTabItem(tabFolder,SWT.NONE);
  tbtmClassify.setText(""String_Node_Str"");
  Group grpClassify=new Group(tabFolder,SWT.NONE);
  tbtmClassify.setControl(grpClassify);
  Label lblInputFile=new Label(grpClassify,SWT.NONE);
  lblInputFile.setBounds(10,29,55,15);
  lblInputFile.setText(""String_Node_Str"");
  txtCInput=new Text(grpClassify,SWT.BORDER);
  txtCInput.setEnabled(true);
  txtCInput.setBounds(135,23,336,21);
  Button button_3=new Button(grpClassify,SWT.NONE);
  button_3.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtCInput.setText(fp1Directory);
    }
  }
);
  button_3.setEnabled(true);
  button_3.setBounds(471,19,27,25);
  button_3.setText(""String_Node_Str"");
  Label lblOutputFile_1=new Label(grpClassify,SWT.NONE);
  lblOutputFile_1.setBounds(10,69,78,15);
  lblOutputFile_1.setText(""String_Node_Str"");
  txtCOutput=new Text(grpClassify,SWT.BORDER);
  txtCOutput.setEnabled(true);
  txtCOutput.setBounds(135,63,336,21);
  Button button_5=new Button(grpClassify,SWT.NONE);
  button_5.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtCOutput.setText(fp1Directory);
    }
  }
);
  button_5.setEnabled(true);
  button_5.setBounds(471,59,27,25);
  button_5.setText(""String_Node_Str"");
  Button btnClassify=new Button(grpClassify,SWT.NONE);
  btnClassify.setEnabled(true);
  btnClassify.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      String ppDir1=txtFolderPath1.getText();
      String ppDir2=txtFolderPath2.getText();
      if (ppDir1.equals(""String_Node_Str"") || ppDir2.equals(""String_Node_Str"") || txtCOutput.getText().equals(""String_Node_Str"")) {
        showError(shell);
        return;
      }
      File iDir1=new File(ppDir1);
      File[] iFiles1=iDir1.listFiles();
      for (      File f : iFiles1) {
        if (f.getAbsolutePath().contains(""String_Node_Str""))         f.delete();
      }
      File iDir2=new File(ppDir2);
      File[] iFiles2=iDir2.listFiles();
      for (      File f : iFiles2) {
        if (f.getAbsolutePath().contains(""String_Node_Str""))         f.delete();
      }
      NBClassifier nb=new NBClassifier();
      IEclipseContext iEclipseContext=context;
      ContextInjectionFactory.inject(nb,iEclipseContext);
      try {
        System.out.println(""String_Node_Str"");
        appendLog(""String_Node_Str"");
        long startTime=System.currentTimeMillis();
        nb.doValidation(ppDir1,ppDir2,txtCInput.getText(),txtCOutput.getText(),false,false);
        System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
        appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
        appendLog(""String_Node_Str"");
      }
 catch (      FileNotFoundException e1) {
        e1.printStackTrace();
      }
catch (      IOException e1) {
        e1.printStackTrace();
      }
catch (      EvalError e1) {
        e1.printStackTrace();
      }
    }
  }
);
  btnClassify.setBounds(10,103,75,25);
  btnClassify.setText(""String_Node_Str"");
  tabFolder.setSelection(0);
}",0.9997260774287802
168228,"@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  parent.setLayout(new GridLayout(7,false));
  Group grpInputSettings=new Group(parent,SWT.NONE);
  grpInputSettings.setText(""String_Node_Str"");
  GridData gd_grpInputSettings=new GridData(SWT.LEFT,SWT.CENTER,false,false,7,1);
  gd_grpInputSettings.heightHint=259;
  gd_grpInputSettings.widthHint=529;
  grpInputSettings.setLayoutData(gd_grpInputSettings);
  Composite composite=new Composite(grpInputSettings,SWT.NONE);
  composite.setBounds(10,20,515,95);
  Label lblLabel_1=new Label(composite,SWT.NONE);
  lblLabel_1.setBounds(0,35,36,15);
  lblLabel_1.setText(""String_Node_Str"");
  Label lblLabel=new Label(composite,SWT.NONE);
  lblLabel.setBounds(0,5,36,15);
  lblLabel.setText(""String_Node_Str"");
  txtLabel1=new Text(composite,SWT.BORDER);
  txtLabel1.setText(""String_Node_Str"");
  txtLabel1.setBounds(66,2,157,21);
  txtLabel2=new Text(composite,SWT.BORDER);
  txtLabel2.setText(""String_Node_Str"");
  txtLabel2.setBounds(66,32,157,21);
  Label lblFolder=new Label(composite,SWT.NONE);
  lblFolder.setBounds(237,6,24,15);
  lblFolder.setText(""String_Node_Str"");
  Label lblFolder_1=new Label(composite,SWT.NONE);
  lblFolder_1.setBounds(237,36,24,15);
  lblFolder_1.setText(""String_Node_Str"");
  txtFolderPath1=new Text(composite,SWT.BORDER);
  txtFolderPath1.setBounds(266,3,212,21);
  txtFolderPath2=new Text(composite,SWT.BORDER);
  txtFolderPath2.setBounds(266,33,212,21);
  Button button=new Button(composite,SWT.NONE);
  button.setBounds(474,2,35,25);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtFolderPath1.setText(fp1Directory);
    }
  }
);
  button.setText(""String_Node_Str"");
  Button button_1=new Button(composite,SWT.NONE);
  button_1.setBounds(474,32,35,25);
  button_1.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd2=new DirectoryDialog(shell);
      fd2.open();
      String fp2Directory=fd2.getFilterPath();
      txtFolderPath2.setText(fp2Directory);
    }
  }
);
  button_1.setText(""String_Node_Str"");
  Button btnPreprocess=new Button(composite,SWT.CHECK);
  btnPreprocess.setBounds(0,67,94,18);
  btnPreprocess.setText(""String_Node_Str"");
  final Button btnWeights=new Button(grpInputSettings,SWT.CHECK);
  btnWeights.setSelection(true);
  btnWeights.setBounds(10,132,174,16);
  btnWeights.setText(""String_Node_Str"");
  Label lblKfoldCrossValidation=new Label(grpInputSettings,SWT.NONE);
  lblKfoldCrossValidation.setBounds(13,163,149,15);
  lblKfoldCrossValidation.setText(""String_Node_Str"");
  txtkVal=new Text(grpInputSettings,SWT.BORDER);
  txtkVal.setBounds(170,160,46,21);
  Label lblOutputPath=new Label(grpInputSettings,SWT.NONE);
  lblOutputPath.setBounds(13,195,70,15);
  lblOutputPath.setText(""String_Node_Str"");
  txtOutputFile=new Text(grpInputSettings,SWT.BORDER);
  txtOutputFile.setBounds(170,192,316,21);
  Button btnTrain=new Button(grpInputSettings,SWT.NONE);
  btnTrain.setBounds(10,223,52,25);
  btnTrain.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      long currentTime=System.currentTimeMillis();
      String ppDir1=txtFolderPath1.getText();
      String ppDir2=txtFolderPath2.getText();
      if (ppDir1.equals(""String_Node_Str"") || ppDir2.equals(""String_Node_Str"") || txtOutputFile.getText().equals(""String_Node_Str"")) {
        showError(shell);
        return;
      }
      if (btnPreprocess.getSelection()) {
        ppService=GlobalPresserSettings.ppService;
        if (ppService.options == null) {
          System.out.println(""String_Node_Str"");
          appendLog(""String_Node_Str"");
          GlobalPresserSettings.ppService.setOptions(shell);
        }
        IEclipseContext iEclipseContext=context;
        ContextInjectionFactory.inject(ppService,iEclipseContext);
        appendLog(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        try {
          ppDir1=ppService.doPreprocessing(txtFolderPath1.getText());
          ppDir2=ppService.doPreprocessing(txtFolderPath2.getText());
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
      }
      try {
        SvmClassifier svm=new SvmClassifier(txtLabel1.getText(),txtLabel2.getText(),txtOutputFile.getText());
        IEclipseContext iEclipseContext=context;
        ContextInjectionFactory.inject(svm,iEclipseContext);
        appendLog(""String_Node_Str"");
        if (true) {
          CrossValidator cv=new CrossValidator();
          ContextInjectionFactory.inject(cv,iEclipseContext);
          cv.doCross(svm,txtLabel1.getText(),ppDir1,txtLabel2.getText(),ppDir2,Integer.parseInt(txtkVal.getText()),btnWeights.getSelection());
        }
        System.out.println(""String_Node_Str"" + ((System.currentTimeMillis() - currentTime) / (double)1000) + ""String_Node_Str"");
        appendLog(""String_Node_Str"" + ((System.currentTimeMillis() - currentTime) / (double)1000) + ""String_Node_Str"");
        if (btnPreprocess.getSelection() && ppService.doCleanUp()) {
          ppService.clean(ppDir1);
          System.out.println(""String_Node_Str"" + ppDir1);
          appendLog(""String_Node_Str"" + ppDir1);
          ppService.clean(ppDir2);
          System.out.println(""String_Node_Str"" + ppDir2);
          appendLog(""String_Node_Str"" + ppDir2);
        }
        appendLog(""String_Node_Str"");
      }
 catch (      IOException ie) {
        ie.printStackTrace();
      }
    }
  }
);
  btnTrain.setText(""String_Node_Str"");
  Button button_2=new Button(grpInputSettings,SWT.NONE);
  button_2.setBounds(482,191,36,25);
  button_2.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      txtOutputFile.setText(""String_Node_Str"");
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtOutputFile.setText(fp1Directory);
    }
  }
);
  button_2.setText(""String_Node_Str"");
}","@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  parent.setLayout(new GridLayout(7,false));
  Group grpInputSettings=new Group(parent,SWT.NONE);
  grpInputSettings.setText(""String_Node_Str"");
  GridData gd_grpInputSettings=new GridData(SWT.LEFT,SWT.CENTER,false,false,7,1);
  gd_grpInputSettings.heightHint=259;
  gd_grpInputSettings.widthHint=529;
  grpInputSettings.setLayoutData(gd_grpInputSettings);
  Composite composite=new Composite(grpInputSettings,SWT.NONE);
  composite.setBounds(10,20,515,95);
  Label lblLabel_1=new Label(composite,SWT.NONE);
  lblLabel_1.setBounds(0,35,36,15);
  lblLabel_1.setText(""String_Node_Str"");
  Label lblLabel=new Label(composite,SWT.NONE);
  lblLabel.setBounds(0,5,36,15);
  lblLabel.setText(""String_Node_Str"");
  txtLabel1=new Text(composite,SWT.BORDER);
  txtLabel1.setText(""String_Node_Str"");
  txtLabel1.setBounds(66,2,157,21);
  txtLabel2=new Text(composite,SWT.BORDER);
  txtLabel2.setText(""String_Node_Str"");
  txtLabel2.setBounds(66,32,157,21);
  Label lblFolder=new Label(composite,SWT.NONE);
  lblFolder.setBounds(237,6,24,15);
  lblFolder.setText(""String_Node_Str"");
  Label lblFolder_1=new Label(composite,SWT.NONE);
  lblFolder_1.setBounds(237,36,24,15);
  lblFolder_1.setText(""String_Node_Str"");
  txtFolderPath1=new Text(composite,SWT.BORDER);
  txtFolderPath1.setBounds(266,3,212,21);
  txtFolderPath2=new Text(composite,SWT.BORDER);
  txtFolderPath2.setBounds(266,33,212,21);
  Button button=new Button(composite,SWT.NONE);
  button.setBounds(474,2,35,25);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtFolderPath1.setText(fp1Directory);
    }
  }
);
  button.setText(""String_Node_Str"");
  Button button_1=new Button(composite,SWT.NONE);
  button_1.setBounds(474,32,35,25);
  button_1.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd2=new DirectoryDialog(shell);
      fd2.open();
      String fp2Directory=fd2.getFilterPath();
      txtFolderPath2.setText(fp2Directory);
    }
  }
);
  button_1.setText(""String_Node_Str"");
  final Button btnPreprocess=new Button(composite,SWT.CHECK);
  btnPreprocess.setBounds(0,67,94,18);
  btnPreprocess.setText(""String_Node_Str"");
  final Button btnWeights=new Button(grpInputSettings,SWT.CHECK);
  btnWeights.setSelection(true);
  btnWeights.setBounds(10,132,174,16);
  btnWeights.setText(""String_Node_Str"");
  Label lblKfoldCrossValidation=new Label(grpInputSettings,SWT.NONE);
  lblKfoldCrossValidation.setBounds(13,163,149,15);
  lblKfoldCrossValidation.setText(""String_Node_Str"");
  txtkVal=new Text(grpInputSettings,SWT.BORDER);
  txtkVal.setBounds(170,160,46,21);
  Label lblOutputPath=new Label(grpInputSettings,SWT.NONE);
  lblOutputPath.setBounds(13,195,70,15);
  lblOutputPath.setText(""String_Node_Str"");
  txtOutputFile=new Text(grpInputSettings,SWT.BORDER);
  txtOutputFile.setBounds(170,192,316,21);
  Button btnTrain=new Button(grpInputSettings,SWT.NONE);
  btnTrain.setBounds(10,223,52,25);
  btnTrain.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      long currentTime=System.currentTimeMillis();
      String ppDir1=txtFolderPath1.getText();
      String ppDir2=txtFolderPath2.getText();
      if (ppDir1.equals(""String_Node_Str"") || ppDir2.equals(""String_Node_Str"") || txtOutputFile.getText().equals(""String_Node_Str"")) {
        showError(shell);
        return;
      }
      if (btnPreprocess.getSelection()) {
        ppService=GlobalPresserSettings.ppService;
        if (ppService.options == null) {
          System.out.println(""String_Node_Str"");
          appendLog(""String_Node_Str"");
          GlobalPresserSettings.ppService.setOptions(shell);
        }
        IEclipseContext iEclipseContext=context;
        ContextInjectionFactory.inject(ppService,iEclipseContext);
        appendLog(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        try {
          ppDir1=ppService.doPreprocessing(txtFolderPath1.getText());
          ppDir2=ppService.doPreprocessing(txtFolderPath2.getText());
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
      }
      try {
        SvmClassifier svm=new SvmClassifier(txtLabel1.getText(),txtLabel2.getText(),txtOutputFile.getText());
        IEclipseContext iEclipseContext=context;
        ContextInjectionFactory.inject(svm,iEclipseContext);
        appendLog(""String_Node_Str"");
        if (true) {
          CrossValidator cv=new CrossValidator();
          ContextInjectionFactory.inject(cv,iEclipseContext);
          cv.doCross(svm,txtLabel1.getText(),ppDir1,txtLabel2.getText(),ppDir2,Integer.parseInt(txtkVal.getText()),btnWeights.getSelection());
        }
        System.out.println(""String_Node_Str"" + ((System.currentTimeMillis() - currentTime) / (double)1000) + ""String_Node_Str"");
        appendLog(""String_Node_Str"" + ((System.currentTimeMillis() - currentTime) / (double)1000) + ""String_Node_Str"");
        if (btnPreprocess.getSelection() && ppService.doCleanUp()) {
          ppService.clean(ppDir1);
          System.out.println(""String_Node_Str"" + ppDir1);
          appendLog(""String_Node_Str"" + ppDir1);
          ppService.clean(ppDir2);
          System.out.println(""String_Node_Str"" + ppDir2);
          appendLog(""String_Node_Str"" + ppDir2);
        }
        appendLog(""String_Node_Str"");
      }
 catch (      IOException ie) {
        ie.printStackTrace();
      }
    }
  }
);
  btnTrain.setText(""String_Node_Str"");
  Button button_2=new Button(grpInputSettings,SWT.NONE);
  button_2.setBounds(482,191,36,25);
  button_2.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      txtOutputFile.setText(""String_Node_Str"");
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtOutputFile.setText(fp1Directory);
    }
  }
);
  button_2.setText(""String_Node_Str"");
}",0.9995132240791822
168229,"@Override public void mouseUp(MouseEvent e){
  ppDir=txtInputDir.getText();
  ppSeedFile=txtSeedFile.getText();
  if (btnPreprocess.getSelection()) {
    if (ppService.options == null) {
      System.out.println(""String_Node_Str"");
      appendLog(""String_Node_Str"");
      GlobalPresserSettings.ppService.setOptions(shell);
    }
    IEclipseContext iEclipseContext=context;
    ContextInjectionFactory.inject(ppService,iEclipseContext);
    appendLog(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    try {
      ppDir=ppService.doPreprocessing(txtInputDir.getText());
      ppSeedFile=ppService.doPreprocessing(txtSeedFile.getText());
    }
 catch (    IOException e1) {
      e1.printStackTrace();
    }
  }
  long startTime=System.currentTimeMillis();
  appendLog(""String_Node_Str"");
  invokeLDA();
  appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  if (btnPreprocess.getSelection() && ppService.doCleanUp()) {
    ppService.clean(ppDir);
    System.out.println(""String_Node_Str"" + ppDir);
    appendLog(""String_Node_Str"" + ppDir);
    ppService.clean(ppSeedFile);
    System.out.println(""String_Node_Str"" + ppSeedFile);
    appendLog(""String_Node_Str"" + ppSeedFile);
  }
  appendLog(""String_Node_Str"");
}","@Override public void mouseUp(MouseEvent e){
  ppDir=txtInputDir.getText();
  ppSeedFile=txtSeedFile.getText();
  if (btnPreprocess.getSelection()) {
    ppService=GlobalPresserSettings.ppService;
    if (ppService.options == null) {
      System.out.println(""String_Node_Str"");
      appendLog(""String_Node_Str"");
      GlobalPresserSettings.ppService.setOptions(shell);
    }
    IEclipseContext iEclipseContext=context;
    ContextInjectionFactory.inject(ppService,iEclipseContext);
    appendLog(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    try {
      ppDir=ppService.doPreprocessing(txtInputDir.getText());
      ppSeedFile=ppService.doPreprocessing(txtSeedFile.getText());
    }
 catch (    IOException e1) {
      e1.printStackTrace();
    }
  }
  long startTime=System.currentTimeMillis();
  appendLog(""String_Node_Str"");
  invokeLDA();
  appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  if (btnPreprocess.getSelection() && ppService.doCleanUp()) {
    ppService.clean(ppDir);
    System.out.println(""String_Node_Str"" + ppDir);
    appendLog(""String_Node_Str"" + ppDir);
    ppService.clean(ppSeedFile);
    System.out.println(""String_Node_Str"" + ppSeedFile);
    appendLog(""String_Node_Str"" + ppSeedFile);
  }
  appendLog(""String_Node_Str"");
}",0.9818742768993444
168230,"@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  parent.setLayout(new GridLayout(1,false));
  PreprocessorService ppService=GlobalPresserSettings.ppService;
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout(3,false));
  GridData gd_composite=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  gd_composite.widthHint=431;
  gd_composite.heightHint=477;
  composite.setLayoutData(gd_composite);
  Label lblNewLabel=new Label(composite,SWT.NONE);
  lblNewLabel.setText(""String_Node_Str"");
  txtInputDir=new Text(composite,SWT.BORDER);
  GridData gd_txtInputDir=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  gd_txtInputDir.widthHint=244;
  txtInputDir.setLayoutData(gd_txtInputDir);
  button=new Button(composite,SWT.NONE);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog dd=new DirectoryDialog(shell);
      dd.open();
      String path=dd.getFilterPath();
      txtInputDir.setText(path);
    }
  }
);
  button.setText(""String_Node_Str"");
  lblSeedFile=new Label(composite,SWT.NONE);
  lblSeedFile.setText(""String_Node_Str"");
  txtSeedFile=new Text(composite,SWT.BORDER);
  GridData gd_txtSeedFile=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  gd_txtSeedFile.widthHint=244;
  txtSeedFile.setLayoutData(gd_txtSeedFile);
  button_2=new Button(composite,SWT.NONE);
  button_2.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      txtSeedFile.setText(""String_Node_Str"");
      FileDialog fd=new FileDialog(shell,SWT.OPEN);
      fd.open();
      String oFile=fd.getFileName();
      String dir=fd.getFilterPath();
      txtSeedFile.setText(dir + System.getProperty(""String_Node_Str"") + oFile);
    }
  }
);
  button_2.setText(""String_Node_Str"");
  lblNumberOfTopics=new Label(composite,SWT.NONE);
  lblNumberOfTopics.setText(""String_Node_Str"");
  txtNumTopics=new Text(composite,SWT.BORDER);
  new Label(composite,SWT.NONE);
  lblOutputPath=new Label(composite,SWT.NONE);
  lblOutputPath.setText(""String_Node_Str"");
  txtOutputDir=new Text(composite,SWT.BORDER);
  GridData gd_txtOutputDir=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  gd_txtOutputDir.widthHint=244;
  txtOutputDir.setLayoutData(gd_txtOutputDir);
  button_3=new Button(composite,SWT.NONE);
  button_3.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog dd=new DirectoryDialog(shell);
      dd.open();
      String path=dd.getFilterPath();
      txtOutputDir.setText(path);
    }
  }
);
  button_3.setText(""String_Node_Str"");
  btnPreprocess=new Button(composite,SWT.CHECK);
  btnPreprocess.setText(""String_Node_Str"");
  Button btnCalculate=new Button(composite,SWT.NONE);
  btnCalculate.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      ppDir=txtInputDir.getText();
      ppSeedFile=txtSeedFile.getText();
      if (btnPreprocess.getSelection()) {
        if (ppService.options == null) {
          System.out.println(""String_Node_Str"");
          appendLog(""String_Node_Str"");
          GlobalPresserSettings.ppService.setOptions(shell);
        }
        IEclipseContext iEclipseContext=context;
        ContextInjectionFactory.inject(ppService,iEclipseContext);
        appendLog(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        try {
          ppDir=ppService.doPreprocessing(txtInputDir.getText());
          ppSeedFile=ppService.doPreprocessing(txtSeedFile.getText());
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
      }
      long startTime=System.currentTimeMillis();
      appendLog(""String_Node_Str"");
      invokeLDA();
      appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
      if (btnPreprocess.getSelection() && ppService.doCleanUp()) {
        ppService.clean(ppDir);
        System.out.println(""String_Node_Str"" + ppDir);
        appendLog(""String_Node_Str"" + ppDir);
        ppService.clean(ppSeedFile);
        System.out.println(""String_Node_Str"" + ppSeedFile);
        appendLog(""String_Node_Str"" + ppSeedFile);
      }
      appendLog(""String_Node_Str"");
    }
  }
);
  btnCalculate.setText(""String_Node_Str"");
  new Label(composite,SWT.NONE);
}","@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  parent.setLayout(new GridLayout(1,false));
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout(3,false));
  GridData gd_composite=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  gd_composite.widthHint=431;
  gd_composite.heightHint=477;
  composite.setLayoutData(gd_composite);
  Label lblNewLabel=new Label(composite,SWT.NONE);
  lblNewLabel.setText(""String_Node_Str"");
  txtInputDir=new Text(composite,SWT.BORDER);
  GridData gd_txtInputDir=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  gd_txtInputDir.widthHint=244;
  txtInputDir.setLayoutData(gd_txtInputDir);
  button=new Button(composite,SWT.NONE);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog dd=new DirectoryDialog(shell);
      dd.open();
      String path=dd.getFilterPath();
      txtInputDir.setText(path);
    }
  }
);
  button.setText(""String_Node_Str"");
  lblSeedFile=new Label(composite,SWT.NONE);
  lblSeedFile.setText(""String_Node_Str"");
  txtSeedFile=new Text(composite,SWT.BORDER);
  GridData gd_txtSeedFile=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  gd_txtSeedFile.widthHint=244;
  txtSeedFile.setLayoutData(gd_txtSeedFile);
  button_2=new Button(composite,SWT.NONE);
  button_2.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      txtSeedFile.setText(""String_Node_Str"");
      FileDialog fd=new FileDialog(shell,SWT.OPEN);
      fd.open();
      String oFile=fd.getFileName();
      String dir=fd.getFilterPath();
      txtSeedFile.setText(dir + System.getProperty(""String_Node_Str"") + oFile);
    }
  }
);
  button_2.setText(""String_Node_Str"");
  lblNumberOfTopics=new Label(composite,SWT.NONE);
  lblNumberOfTopics.setText(""String_Node_Str"");
  txtNumTopics=new Text(composite,SWT.BORDER);
  new Label(composite,SWT.NONE);
  lblOutputPath=new Label(composite,SWT.NONE);
  lblOutputPath.setText(""String_Node_Str"");
  txtOutputDir=new Text(composite,SWT.BORDER);
  GridData gd_txtOutputDir=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  gd_txtOutputDir.widthHint=244;
  txtOutputDir.setLayoutData(gd_txtOutputDir);
  button_3=new Button(composite,SWT.NONE);
  button_3.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog dd=new DirectoryDialog(shell);
      dd.open();
      String path=dd.getFilterPath();
      txtOutputDir.setText(path);
    }
  }
);
  button_3.setText(""String_Node_Str"");
  btnPreprocess=new Button(composite,SWT.CHECK);
  btnPreprocess.setText(""String_Node_Str"");
  Button btnCalculate=new Button(composite,SWT.NONE);
  btnCalculate.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      ppDir=txtInputDir.getText();
      ppSeedFile=txtSeedFile.getText();
      if (btnPreprocess.getSelection()) {
        ppService=GlobalPresserSettings.ppService;
        if (ppService.options == null) {
          System.out.println(""String_Node_Str"");
          appendLog(""String_Node_Str"");
          GlobalPresserSettings.ppService.setOptions(shell);
        }
        IEclipseContext iEclipseContext=context;
        ContextInjectionFactory.inject(ppService,iEclipseContext);
        appendLog(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        try {
          ppDir=ppService.doPreprocessing(txtInputDir.getText());
          ppSeedFile=ppService.doPreprocessing(txtSeedFile.getText());
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
      }
      long startTime=System.currentTimeMillis();
      appendLog(""String_Node_Str"");
      invokeLDA();
      appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
      if (btnPreprocess.getSelection() && ppService.doCleanUp()) {
        ppService.clean(ppDir);
        System.out.println(""String_Node_Str"" + ppDir);
        appendLog(""String_Node_Str"" + ppDir);
        ppService.clean(ppSeedFile);
        System.out.println(""String_Node_Str"" + ppSeedFile);
        appendLog(""String_Node_Str"" + ppSeedFile);
      }
      appendLog(""String_Node_Str"");
    }
  }
);
  btnCalculate.setText(""String_Node_Str"");
  new Label(composite,SWT.NONE);
}",0.9867307252345
168231,"@Override public void mouseUp(MouseEvent e){
  appendLog(""String_Node_Str"");
  String f=combo.getText();
  if (f.equals(""String_Node_Str"")) {
    if (btnCases.getSelection())     f=""String_Node_Str"";
 else     f=""String_Node_Str"";
  }
  long startTime=System.currentTimeMillis();
  SupremeCrawler sc=new SupremeCrawler(combo.getText(),txtOutput.getText(),btnTruncate.getSelection(),btnDownloadAudio.getSelection());
  IEclipseContext iEclipseContext=context;
  ContextInjectionFactory.inject(sc,iEclipseContext);
  try {
    sc.looper();
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / (float)1000 + ""String_Node_Str"");
  appendLog(""String_Node_Str"");
}","@Override public void mouseUp(MouseEvent e){
  if (txtOutput.getText() == null || txtOutput.getText().length() < 2) {
    MessageBox mBox=new MessageBox(shell,SWT.OK);
    mBox.setMessage(""String_Node_Str"");
    mBox.open();
    return;
  }
  appendLog(""String_Node_Str"");
  String f=combo.getText();
  if (f.equals(""String_Node_Str"")) {
    if (btnCases.getSelection())     f=""String_Node_Str"";
 else     f=""String_Node_Str"";
  }
  long startTime=System.currentTimeMillis();
  SupremeCrawler sc=new SupremeCrawler(combo.getText(),txtOutput.getText(),btnTruncate.getSelection(),btnDownloadAudio.getSelection());
  IEclipseContext iEclipseContext=context;
  ContextInjectionFactory.inject(sc,iEclipseContext);
  try {
    sc.looper();
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / (float)1000 + ""String_Node_Str"");
  appendLog(""String_Node_Str"");
}",0.8833333333333333
168232,"@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  parent.setLayout(new GridLayout(15,false));
  Label lblSortBy=new Label(parent,SWT.NONE);
  lblSortBy.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  ;
  Button btnCases=new Button(parent,SWT.RADIO);
  btnCases.setSelection(true);
  btnCases.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  Button btnIssues=new Button(parent,SWT.RADIO);
  btnIssues.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Label lblFilter=new Label(parent,SWT.NONE);
  lblFilter.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  final Combo combo=new Combo(parent,SWT.NONE);
  GridData gd_combo=new GridData(SWT.FILL,SWT.CENTER,true,false,13,1);
  gd_combo.widthHint=177;
  combo.setLayoutData(gd_combo);
  appendLog(""String_Node_Str"");
  combo.setItems(SupremeCrawler.filters(""String_Node_Str""));
  combo.select(0);
  Label lblOutputDirectory=new Label(parent,SWT.NONE);
  lblOutputDirectory.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  txtOutput=new Text(parent,SWT.BORDER);
  GridData gd_txtOutput=new GridData(SWT.FILL,SWT.CENTER,false,false,9,1);
  gd_txtOutput.widthHint=260;
  txtOutput.setLayoutData(gd_txtOutput);
  Button button=new Button(parent,SWT.NONE);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog od=new DirectoryDialog(shell);
      od.open();
      String oDirectory=od.getFilterPath();
      txtOutput.setText(oDirectory);
    }
  }
);
  button.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Button btnDownloadAudio=new Button(parent,SWT.CHECK);
  btnDownloadAudio.setSelection(true);
  btnDownloadAudio.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  Button btnTruncate=new Button(parent,SWT.CHECK);
  btnTruncate.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,3,1));
  btnTruncate.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Button btnCrawl=new Button(parent,SWT.NONE);
  btnCrawl.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      appendLog(""String_Node_Str"");
      String f=combo.getText();
      if (f.equals(""String_Node_Str"")) {
        if (btnCases.getSelection())         f=""String_Node_Str"";
 else         f=""String_Node_Str"";
      }
      long startTime=System.currentTimeMillis();
      SupremeCrawler sc=new SupremeCrawler(combo.getText(),txtOutput.getText(),btnTruncate.getSelection(),btnDownloadAudio.getSelection());
      IEclipseContext iEclipseContext=context;
      ContextInjectionFactory.inject(sc,iEclipseContext);
      try {
        sc.looper();
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
      appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / (float)1000 + ""String_Node_Str"");
      appendLog(""String_Node_Str"");
    }
  }
);
  btnCrawl.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  btnCases.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      appendLog(""String_Node_Str"");
      System.out.println(""String_Node_Str"" + btnCases.getSelection());
      if (btnCases.getSelection())       combo.setItems(SupremeCrawler.filters(""String_Node_Str""));
 else       combo.setItems(SupremeCrawler.filters(""String_Node_Str""));
      combo.select(0);
    }
  }
);
}","@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  parent.setLayout(new GridLayout(15,false));
  Label lblSortBy=new Label(parent,SWT.NONE);
  lblSortBy.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  ;
  Button btnCases=new Button(parent,SWT.RADIO);
  btnCases.setSelection(true);
  btnCases.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  Button btnIssues=new Button(parent,SWT.RADIO);
  btnIssues.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Label lblFilter=new Label(parent,SWT.NONE);
  lblFilter.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  final Combo combo=new Combo(parent,SWT.NONE);
  GridData gd_combo=new GridData(SWT.FILL,SWT.CENTER,true,false,13,1);
  gd_combo.widthHint=177;
  combo.setLayoutData(gd_combo);
  appendLog(""String_Node_Str"");
  combo.setItems(SupremeCrawler.filters(""String_Node_Str""));
  combo.select(0);
  Label lblOutputDirectory=new Label(parent,SWT.NONE);
  lblOutputDirectory.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  txtOutput=new Text(parent,SWT.BORDER);
  GridData gd_txtOutput=new GridData(SWT.FILL,SWT.CENTER,false,false,9,1);
  gd_txtOutput.widthHint=260;
  txtOutput.setLayoutData(gd_txtOutput);
  Button button=new Button(parent,SWT.NONE);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog od=new DirectoryDialog(shell);
      od.open();
      String oDirectory=od.getFilterPath();
      txtOutput.setText(oDirectory);
    }
  }
);
  button.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Button btnDownloadAudio=new Button(parent,SWT.CHECK);
  btnDownloadAudio.setSelection(true);
  btnDownloadAudio.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  Button btnTruncate=new Button(parent,SWT.CHECK);
  btnTruncate.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,3,1));
  btnTruncate.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Button btnCrawl=new Button(parent,SWT.NONE);
  btnCrawl.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      if (txtOutput.getText() == null || txtOutput.getText().length() < 2) {
        MessageBox mBox=new MessageBox(shell,SWT.OK);
        mBox.setMessage(""String_Node_Str"");
        mBox.open();
        return;
      }
      appendLog(""String_Node_Str"");
      String f=combo.getText();
      if (f.equals(""String_Node_Str"")) {
        if (btnCases.getSelection())         f=""String_Node_Str"";
 else         f=""String_Node_Str"";
      }
      long startTime=System.currentTimeMillis();
      SupremeCrawler sc=new SupremeCrawler(combo.getText(),txtOutput.getText(),btnTruncate.getSelection(),btnDownloadAudio.getSelection());
      IEclipseContext iEclipseContext=context;
      ContextInjectionFactory.inject(sc,iEclipseContext);
      try {
        sc.looper();
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
      appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / (float)1000 + ""String_Node_Str"");
      appendLog(""String_Node_Str"");
    }
  }
);
  btnCrawl.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  btnCases.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      appendLog(""String_Node_Str"");
      System.out.println(""String_Node_Str"" + btnCases.getSelection());
      if (btnCases.getSelection())       combo.setItems(SupremeCrawler.filters(""String_Node_Str""));
 else       combo.setItems(SupremeCrawler.filters(""String_Node_Str""));
      combo.select(0);
    }
  }
);
}",0.975802903651562
168233,"@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  appendLog(""String_Node_Str"");
  String[] congresses=null;
  try {
    congresses=AvailableRecords.getAllCongresses();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  appendLog(""String_Node_Str"");
  String[] senatorsArray=null;
  try {
    senatorsArray=AvailableRecords.getAllSenators(congresses);
  }
 catch (  IOException e2) {
    e2.printStackTrace();
  }
  final String[] allSenators=senatorsArray;
  appendLog(""String_Node_Str"");
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setSize(588,300);
  composite.setLocation(0,0);
  Label lblSenator=new Label(composite,SWT.NONE);
  lblSenator.setBounds(10,36,55,15);
  lblSenator.setText(""String_Node_Str"");
  final DateTime dateTime=new DateTime(composite,SWT.BORDER);
  dateTime.setEnabled(false);
  dateTime.setBounds(89,133,101,24);
  final DateTime dateTime_1=new DateTime(composite,SWT.BORDER);
  dateTime_1.setEnabled(false);
  dateTime_1.setBounds(288,133,101,24);
  Label lblToDate=new Label(composite,SWT.NONE);
  lblToDate.setBounds(245,137,21,15);
  lblToDate.setText(""String_Node_Str"");
  txtMaxDocs=new Text(composite,SWT.BORDER);
  txtMaxDocs.setToolTipText(""String_Node_Str"");
  txtMaxDocs.setEnabled(false);
  txtMaxDocs.setBounds(189,184,40,21);
  Label lblFrom=new Label(composite,SWT.NONE);
  lblFrom.setBounds(26,137,35,15);
  lblFrom.setText(""String_Node_Str"");
  final Combo cmbSenator=new Combo(composite,SWT.NONE);
  cmbSenator.setBounds(89,67,300,23);
  cmbSenator.setItems(allSenators);
  cmbSenator.add(""String_Node_Str"",0);
  cmbSenator.add(""String_Node_Str"",1);
  cmbSenator.add(""String_Node_Str"",2);
  cmbSenator.add(""String_Node_Str"",3);
  cmbSenator.select(0);
  final Combo cmbCongress=new Combo(composite,SWT.NONE);
  cmbCongress.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      try {
        String selectedCongress=cmbCongress.getText().trim();
        if (selectedCongress.equals(""String_Node_Str"")) {
          cmbSenator.setItems(allSenators);
          cmbSenator.add(""String_Node_Str"",0);
          cmbSenator.add(""String_Node_Str"",1);
          cmbSenator.add(""String_Node_Str"",2);
          cmbSenator.add(""String_Node_Str"",3);
          cmbSenator.select(0);
        }
 else {
          cmbSenator.setItems(AvailableRecords.getSenators(selectedCongress));
          cmbSenator.add(""String_Node_Str"",0);
          cmbSenator.add(""String_Node_Str"",1);
          cmbSenator.add(""String_Node_Str"",2);
          cmbSenator.add(""String_Node_Str"",3);
          cmbSenator.select(0);
          String congress=cmbCongress.getText().replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
          int cNum=-1;
          if (!congress.equals(""String_Node_Str"")) {
            cNum=Integer.parseInt(congress);
            cNum=2 * (cNum - 101);
            dateTime.setYear(1989 + cNum);
            dateTime.setDay(3);
            dateTime.setMonth(0);
            dateTime_1.setYear(1990 + cNum);
            dateTime_1.setDay(3);
            dateTime_1.setMonth(0);
          }
        }
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
      cmbSenator.select(0);
    }
  }
);
  cmbCongress.setItems(congresses);
  cmbCongress.setBounds(89,33,101,23);
  cmbCongress.select(0);
  Label lblSenator_1=new Label(composite,SWT.NONE);
  lblSenator_1.setBounds(10,70,55,15);
  lblSenator_1.setText(""String_Node_Str"");
  final Button btnDateRange=new Button(composite,SWT.CHECK);
  btnDateRange.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (btnDateRange.getSelection()) {
        dateTime.setEnabled(true);
        dateTime_1.setEnabled(true);
      }
 else {
        dateTime.setEnabled(false);
        dateTime_1.setEnabled(false);
      }
    }
  }
);
  btnDateRange.setBounds(9,112,93,16);
  btnDateRange.setText(""String_Node_Str"");
  Button btnExtract=new Button(composite,SWT.NONE);
  btnExtract.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      int maxDocs=-1;
      if (txtMaxDocs.getText() != ""String_Node_Str"")       maxDocs=Integer.parseInt(txtMaxDocs.getText().trim());
      SenateCrawler senateCrawler=new SenateCrawler();
      IEclipseContext iEclipseContext=context;
      ContextInjectionFactory.inject(senateCrawler,iEclipseContext);
      String dateFrom=""String_Node_Str"";
      String dateTo=""String_Node_Str"";
      if (btnDateRange.getSelection()) {
        dateFrom=(dateTime.getMonth() + 1) + ""String_Node_Str"" + dateTime.getDay()+ ""String_Node_Str""+ dateTime.getYear();
        dateTo=(dateTime_1.getMonth() + 1) + ""String_Node_Str"" + dateTime_1.getDay()+ ""String_Node_Str""+ dateTime_1.getYear();
      }
      String senator=cmbSenator.getText().replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
      String congress=cmbCongress.getText().replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
      int cNum=-1;
      if (!congress.equals(""String_Node_Str""))       cNum=Integer.parseInt(congress);
      try {
        long startTime=System.currentTimeMillis();
        appendLog(""String_Node_Str"");
        senateCrawler.initialize(maxDocs,cNum,senator,dateFrom,dateTo,txtOutput.getText());
        appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / (float)1000 + ""String_Node_Str"");
        appendLog(""String_Node_Str"");
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
    }
  }
);
  btnExtract.setBounds(10,263,75,25);
  btnExtract.setText(""String_Node_Str"");
  Label lblOutput=new Label(composite,SWT.NONE);
  lblOutput.setBounds(10,231,80,15);
  lblOutput.setText(""String_Node_Str"");
  txtOutput=new Text(composite,SWT.BORDER);
  txtOutput.setBounds(104,225,258,21);
  Button button=new Button(composite,SWT.NONE);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog od=new DirectoryDialog(shell);
      od.open();
      String oDirectory=od.getFilterPath();
      txtOutput.setText(oDirectory);
    }
  }
);
  button.setBounds(358,224,40,25);
  button.setText(""String_Node_Str"");
  final Button btnLimitRecords=new Button(composite,SWT.CHECK);
  btnLimitRecords.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (btnLimitRecords.getSelection())       txtMaxDocs.setEnabled(true);
 else       txtMaxDocs.setEnabled(false);
    }
  }
);
  btnLimitRecords.setBounds(10,189,161,16);
  btnLimitRecords.setText(""String_Node_Str"");
  Label lblNewLabel=new Label(composite,SWT.BORDER | SWT.SHADOW_NONE);
  lblNewLabel.setBounds(433,14,133,215);
  lblNewLabel.setText(""String_Node_Str"");
}","@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  appendLog(""String_Node_Str"");
  String[] congresses=null;
  try {
    congresses=AvailableRecords.getAllCongresses();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  appendLog(""String_Node_Str"");
  String[] senatorsArray=null;
  try {
    senatorsArray=AvailableRecords.getAllSenators(congresses);
  }
 catch (  IOException e2) {
    e2.printStackTrace();
  }
  final String[] allSenators=senatorsArray;
  appendLog(""String_Node_Str"");
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setSize(588,300);
  composite.setLocation(0,0);
  Label lblSenator=new Label(composite,SWT.NONE);
  lblSenator.setBounds(10,36,55,15);
  lblSenator.setText(""String_Node_Str"");
  final DateTime dateTime=new DateTime(composite,SWT.BORDER);
  dateTime.setEnabled(false);
  dateTime.setBounds(89,133,101,24);
  final DateTime dateTime_1=new DateTime(composite,SWT.BORDER);
  dateTime_1.setEnabled(false);
  dateTime_1.setBounds(288,133,101,24);
  Label lblToDate=new Label(composite,SWT.NONE);
  lblToDate.setBounds(245,137,21,15);
  lblToDate.setText(""String_Node_Str"");
  txtMaxDocs=new Text(composite,SWT.BORDER);
  txtMaxDocs.setToolTipText(""String_Node_Str"");
  txtMaxDocs.setEnabled(false);
  txtMaxDocs.setBounds(189,184,40,21);
  Label lblFrom=new Label(composite,SWT.NONE);
  lblFrom.setBounds(26,137,35,15);
  lblFrom.setText(""String_Node_Str"");
  final Combo cmbSenator=new Combo(composite,SWT.NONE);
  cmbSenator.setBounds(89,67,300,23);
  cmbSenator.setItems(allSenators);
  cmbSenator.add(""String_Node_Str"",0);
  cmbSenator.add(""String_Node_Str"",1);
  cmbSenator.add(""String_Node_Str"",2);
  cmbSenator.add(""String_Node_Str"",3);
  cmbSenator.select(0);
  final Combo cmbCongress=new Combo(composite,SWT.NONE);
  cmbCongress.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      try {
        String selectedCongress=cmbCongress.getText().trim();
        if (selectedCongress.equals(""String_Node_Str"")) {
          cmbSenator.setItems(allSenators);
          cmbSenator.add(""String_Node_Str"",0);
          cmbSenator.add(""String_Node_Str"",1);
          cmbSenator.add(""String_Node_Str"",2);
          cmbSenator.add(""String_Node_Str"",3);
          cmbSenator.select(0);
        }
 else {
          cmbSenator.setItems(AvailableRecords.getSenators(selectedCongress));
          cmbSenator.add(""String_Node_Str"",0);
          cmbSenator.add(""String_Node_Str"",1);
          cmbSenator.add(""String_Node_Str"",2);
          cmbSenator.add(""String_Node_Str"",3);
          cmbSenator.select(0);
          String congress=cmbCongress.getText().replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
          int cNum=-1;
          if (!congress.equals(""String_Node_Str"")) {
            cNum=Integer.parseInt(congress);
            cNum=2 * (cNum - 101);
            dateTime.setYear(1989 + cNum);
            dateTime.setDay(3);
            dateTime.setMonth(0);
            dateTime_1.setYear(1990 + cNum);
            dateTime_1.setDay(3);
            dateTime_1.setMonth(0);
          }
        }
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
      cmbSenator.select(0);
    }
  }
);
  cmbCongress.setItems(congresses);
  cmbCongress.setBounds(89,33,101,23);
  cmbCongress.select(0);
  Label lblSenator_1=new Label(composite,SWT.NONE);
  lblSenator_1.setBounds(10,70,55,15);
  lblSenator_1.setText(""String_Node_Str"");
  final Button btnDateRange=new Button(composite,SWT.CHECK);
  btnDateRange.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (btnDateRange.getSelection()) {
        dateTime.setEnabled(true);
        dateTime_1.setEnabled(true);
      }
 else {
        dateTime.setEnabled(false);
        dateTime_1.setEnabled(false);
      }
    }
  }
);
  btnDateRange.setBounds(9,112,93,16);
  btnDateRange.setText(""String_Node_Str"");
  Button btnExtract=new Button(composite,SWT.NONE);
  btnExtract.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      int maxDocs=-1;
      if (!txtMaxDocs.getText().equals(""String_Node_Str""))       maxDocs=Integer.parseInt(txtMaxDocs.getText().trim());
      SenateCrawler senateCrawler=new SenateCrawler();
      IEclipseContext iEclipseContext=context;
      ContextInjectionFactory.inject(senateCrawler,iEclipseContext);
      String dateFrom=""String_Node_Str"";
      String dateTo=""String_Node_Str"";
      if (btnDateRange.getSelection()) {
        dateFrom=(dateTime.getMonth() + 1) + ""String_Node_Str"" + dateTime.getDay()+ ""String_Node_Str""+ dateTime.getYear();
        dateTo=(dateTime_1.getMonth() + 1) + ""String_Node_Str"" + dateTime_1.getDay()+ ""String_Node_Str""+ dateTime_1.getYear();
      }
      String senator=cmbSenator.getText().replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
      String congress=cmbCongress.getText().replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
      int cNum=-1;
      if (!congress.equals(""String_Node_Str""))       cNum=Integer.parseInt(congress);
      try {
        long startTime=System.currentTimeMillis();
        appendLog(""String_Node_Str"");
        senateCrawler.initialize(maxDocs,cNum,senator,dateFrom,dateTo,txtOutput.getText());
        appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / (float)1000 + ""String_Node_Str"");
        appendLog(""String_Node_Str"");
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
    }
  }
);
  btnExtract.setBounds(10,263,75,25);
  btnExtract.setText(""String_Node_Str"");
  Label lblOutput=new Label(composite,SWT.NONE);
  lblOutput.setBounds(10,231,80,15);
  lblOutput.setText(""String_Node_Str"");
  txtOutput=new Text(composite,SWT.BORDER);
  txtOutput.setBounds(104,225,258,21);
  Button button=new Button(composite,SWT.NONE);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog od=new DirectoryDialog(shell);
      od.open();
      String oDirectory=od.getFilterPath();
      txtOutput.setText(oDirectory);
    }
  }
);
  button.setBounds(358,224,40,25);
  button.setText(""String_Node_Str"");
  final Button btnLimitRecords=new Button(composite,SWT.CHECK);
  btnLimitRecords.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (btnLimitRecords.getSelection())       txtMaxDocs.setEnabled(true);
 else       txtMaxDocs.setEnabled(false);
    }
  }
);
  btnLimitRecords.setBounds(10,189,161,16);
  btnLimitRecords.setText(""String_Node_Str"");
  Label lblNewLabel=new Label(composite,SWT.BORDER | SWT.SHADOW_NONE);
  lblNewLabel.setBounds(433,14,133,215);
  lblNewLabel.setText(""String_Node_Str"");
}",0.9964937910883856
168234,"@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  parent.setLayout(new GridLayout(7,false));
  Group grpInputSettings=new Group(parent,SWT.NONE);
  grpInputSettings.setText(""String_Node_Str"");
  GridData gd_grpInputSettings=new GridData(SWT.LEFT,SWT.CENTER,false,false,7,1);
  gd_grpInputSettings.heightHint=259;
  gd_grpInputSettings.widthHint=529;
  grpInputSettings.setLayoutData(gd_grpInputSettings);
  Composite composite=new Composite(grpInputSettings,SWT.NONE);
  composite.setBounds(10,20,515,95);
  Label lblLabel_1=new Label(composite,SWT.NONE);
  lblLabel_1.setBounds(0,35,36,15);
  lblLabel_1.setText(""String_Node_Str"");
  Label lblLabel=new Label(composite,SWT.NONE);
  lblLabel.setBounds(0,5,36,15);
  lblLabel.setText(""String_Node_Str"");
  txtLabel1=new Text(composite,SWT.BORDER);
  txtLabel1.setText(""String_Node_Str"");
  txtLabel1.setBounds(66,2,157,21);
  txtLabel2=new Text(composite,SWT.BORDER);
  txtLabel2.setText(""String_Node_Str"");
  txtLabel2.setBounds(66,32,157,21);
  Label lblFolder=new Label(composite,SWT.NONE);
  lblFolder.setBounds(237,6,24,15);
  lblFolder.setText(""String_Node_Str"");
  Label lblFolder_1=new Label(composite,SWT.NONE);
  lblFolder_1.setBounds(237,36,24,15);
  lblFolder_1.setText(""String_Node_Str"");
  txtFolderPath1=new Text(composite,SWT.BORDER);
  txtFolderPath1.setBounds(266,3,212,21);
  txtFolderPath2=new Text(composite,SWT.BORDER);
  txtFolderPath2.setBounds(266,33,212,21);
  Button button=new Button(composite,SWT.NONE);
  button.setBounds(474,2,35,25);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtFolderPath1.setText(fp1Directory);
    }
  }
);
  button.setText(""String_Node_Str"");
  Button button_1=new Button(composite,SWT.NONE);
  button_1.setBounds(474,32,35,25);
  button_1.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd2=new DirectoryDialog(shell);
      fd2.open();
      String fp2Directory=fd2.getFilterPath();
      txtFolderPath2.setText(fp2Directory);
    }
  }
);
  button_1.setText(""String_Node_Str"");
  Button btnPreprocess=new Button(composite,SWT.NONE);
  btnPreprocess.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      showPpOptions(shell);
    }
  }
);
  btnPreprocess.setBounds(0,65,75,25);
  btnPreprocess.setText(""String_Node_Str"");
  final Button btnWeights=new Button(grpInputSettings,SWT.CHECK);
  btnWeights.setSelection(true);
  btnWeights.setBounds(10,132,174,16);
  btnWeights.setText(""String_Node_Str"");
  Label lblKfoldCrossValidation=new Label(grpInputSettings,SWT.NONE);
  lblKfoldCrossValidation.setBounds(13,163,160,15);
  lblKfoldCrossValidation.setText(""String_Node_Str"");
  txtkVal=new Text(grpInputSettings,SWT.BORDER);
  txtkVal.setBounds(170,160,46,21);
  Label lblOutputPath=new Label(grpInputSettings,SWT.NONE);
  lblOutputPath.setBounds(13,195,70,15);
  lblOutputPath.setText(""String_Node_Str"");
  txtOutputFile=new Text(grpInputSettings,SWT.BORDER);
  txtOutputFile.setBounds(170,192,316,21);
  Button btnTrain=new Button(grpInputSettings,SWT.NONE);
  btnTrain.setBounds(10,223,52,25);
  btnTrain.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      long currentTime=System.currentTimeMillis();
      String ppDir1=txtFolderPath1.getText();
      String ppDir2=txtFolderPath2.getText();
      if (ppDir1.equals(""String_Node_Str"") || ppDir2.equals(""String_Node_Str"") || txtOutputFile.getText().equals(""String_Node_Str"")) {
        showError(shell);
        return;
      }
      if (ppService.doPP) {
        IEclipseContext iEclipseContext=context;
        ContextInjectionFactory.inject(ppService,iEclipseContext);
        appendLog(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        try {
          ppDir1=doPp(txtFolderPath1.getText());
          ppDir2=doPp(txtFolderPath2.getText());
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
      }
      try {
        SvmClassifier svm=new SvmClassifier(txtLabel1.getText(),txtLabel2.getText(),txtOutputFile.getText());
        IEclipseContext iEclipseContext=context;
        ContextInjectionFactory.inject(svm,iEclipseContext);
        if (true) {
          CrossValidator cv=new CrossValidator();
          ContextInjectionFactory.inject(cv,iEclipseContext);
          cv.doCross(svm,txtLabel1.getText(),ppDir1,txtLabel2.getText(),ppDir2,Integer.parseInt(txtkVal.getText()),btnWeights.getSelection());
        }
        System.out.println(""String_Node_Str"" + ((System.currentTimeMillis() - currentTime) / (double)1000) + ""String_Node_Str"");
        appendLog(""String_Node_Str"" + ((System.currentTimeMillis() - currentTime) / (double)1000) + ""String_Node_Str"");
      }
 catch (      IOException ie) {
        ie.printStackTrace();
      }
    }
  }
);
  btnTrain.setText(""String_Node_Str"");
  Button button_2=new Button(grpInputSettings,SWT.NONE);
  button_2.setBounds(482,191,36,25);
  button_2.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      txtOutputFile.setText(""String_Node_Str"");
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtOutputFile.setText(fp1Directory);
    }
  }
);
  button_2.setText(""String_Node_Str"");
}","@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  parent.setLayout(new GridLayout(7,false));
  Group grpInputSettings=new Group(parent,SWT.NONE);
  grpInputSettings.setText(""String_Node_Str"");
  GridData gd_grpInputSettings=new GridData(SWT.LEFT,SWT.CENTER,false,false,7,1);
  gd_grpInputSettings.heightHint=259;
  gd_grpInputSettings.widthHint=529;
  grpInputSettings.setLayoutData(gd_grpInputSettings);
  Composite composite=new Composite(grpInputSettings,SWT.NONE);
  composite.setBounds(10,20,515,95);
  Label lblLabel_1=new Label(composite,SWT.NONE);
  lblLabel_1.setBounds(0,35,36,15);
  lblLabel_1.setText(""String_Node_Str"");
  Label lblLabel=new Label(composite,SWT.NONE);
  lblLabel.setBounds(0,5,36,15);
  lblLabel.setText(""String_Node_Str"");
  txtLabel1=new Text(composite,SWT.BORDER);
  txtLabel1.setText(""String_Node_Str"");
  txtLabel1.setBounds(66,2,157,21);
  txtLabel2=new Text(composite,SWT.BORDER);
  txtLabel2.setText(""String_Node_Str"");
  txtLabel2.setBounds(66,32,157,21);
  Label lblFolder=new Label(composite,SWT.NONE);
  lblFolder.setBounds(237,6,24,15);
  lblFolder.setText(""String_Node_Str"");
  Label lblFolder_1=new Label(composite,SWT.NONE);
  lblFolder_1.setBounds(237,36,24,15);
  lblFolder_1.setText(""String_Node_Str"");
  txtFolderPath1=new Text(composite,SWT.BORDER);
  txtFolderPath1.setBounds(266,3,212,21);
  txtFolderPath2=new Text(composite,SWT.BORDER);
  txtFolderPath2.setBounds(266,33,212,21);
  Button button=new Button(composite,SWT.NONE);
  button.setBounds(474,2,35,25);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtFolderPath1.setText(fp1Directory);
    }
  }
);
  button.setText(""String_Node_Str"");
  Button button_1=new Button(composite,SWT.NONE);
  button_1.setBounds(474,32,35,25);
  button_1.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd2=new DirectoryDialog(shell);
      fd2.open();
      String fp2Directory=fd2.getFilterPath();
      txtFolderPath2.setText(fp2Directory);
    }
  }
);
  button_1.setText(""String_Node_Str"");
  Button btnPreprocess=new Button(composite,SWT.NONE);
  btnPreprocess.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      showPpOptions(shell);
    }
  }
);
  btnPreprocess.setBounds(0,65,75,25);
  btnPreprocess.setText(""String_Node_Str"");
  final Button btnWeights=new Button(grpInputSettings,SWT.CHECK);
  btnWeights.setSelection(true);
  btnWeights.setBounds(10,132,174,16);
  btnWeights.setText(""String_Node_Str"");
  Label lblKfoldCrossValidation=new Label(grpInputSettings,SWT.NONE);
  lblKfoldCrossValidation.setBounds(13,163,149,15);
  lblKfoldCrossValidation.setText(""String_Node_Str"");
  txtkVal=new Text(grpInputSettings,SWT.BORDER);
  txtkVal.setBounds(170,160,46,21);
  Label lblOutputPath=new Label(grpInputSettings,SWT.NONE);
  lblOutputPath.setBounds(13,195,70,15);
  lblOutputPath.setText(""String_Node_Str"");
  txtOutputFile=new Text(grpInputSettings,SWT.BORDER);
  txtOutputFile.setBounds(170,192,316,21);
  Button btnTrain=new Button(grpInputSettings,SWT.NONE);
  btnTrain.setBounds(10,223,52,25);
  btnTrain.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      long currentTime=System.currentTimeMillis();
      String ppDir1=txtFolderPath1.getText();
      String ppDir2=txtFolderPath2.getText();
      if (ppDir1.equals(""String_Node_Str"") || ppDir2.equals(""String_Node_Str"") || txtOutputFile.getText().equals(""String_Node_Str"")) {
        showError(shell);
        return;
      }
      if (ppService.doPP) {
        IEclipseContext iEclipseContext=context;
        ContextInjectionFactory.inject(ppService,iEclipseContext);
        appendLog(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        try {
          ppDir1=doPp(txtFolderPath1.getText());
          ppDir2=doPp(txtFolderPath2.getText());
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
      }
      try {
        SvmClassifier svm=new SvmClassifier(txtLabel1.getText(),txtLabel2.getText(),txtOutputFile.getText());
        IEclipseContext iEclipseContext=context;
        ContextInjectionFactory.inject(svm,iEclipseContext);
        if (true) {
          CrossValidator cv=new CrossValidator();
          ContextInjectionFactory.inject(cv,iEclipseContext);
          cv.doCross(svm,txtLabel1.getText(),ppDir1,txtLabel2.getText(),ppDir2,Integer.parseInt(txtkVal.getText()),btnWeights.getSelection());
        }
        System.out.println(""String_Node_Str"" + ((System.currentTimeMillis() - currentTime) / (double)1000) + ""String_Node_Str"");
        appendLog(""String_Node_Str"" + ((System.currentTimeMillis() - currentTime) / (double)1000) + ""String_Node_Str"");
      }
 catch (      IOException ie) {
        ie.printStackTrace();
      }
    }
  }
);
  btnTrain.setText(""String_Node_Str"");
  Button button_2=new Button(grpInputSettings,SWT.NONE);
  button_2.setBounds(482,191,36,25);
  button_2.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      txtOutputFile.setText(""String_Node_Str"");
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtOutputFile.setText(fp1Directory);
    }
  }
);
  button_2.setText(""String_Node_Str"");
}",0.9996402230617016
168235,"@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  parent.setLayout(new GridLayout(9,false));
  new Label(parent,SWT.NONE);
  Label lblInputType=new Label(parent,SWT.NONE);
  lblInputType.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  final Button btnFiles=new Button(parent,SWT.RADIO);
  btnFiles.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      lblInput.setText(""String_Node_Str"");
    }
  }
);
  btnFiles.setSelection(true);
  btnFiles.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  Button btnFolder=new Button(parent,SWT.RADIO);
  btnFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      lblInput.setText(""String_Node_Str"");
    }
  }
);
  btnFolder.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  lblInput=new Label(parent,SWT.NONE);
  GridData gd_lblInput=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  gd_lblInput.widthHint=71;
  lblInput.setLayoutData(gd_lblInput);
  lblInput.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  txtInputFile=new Text(parent,SWT.BORDER);
  GridData gd_txtInputFile=new GridData(SWT.FILL,SWT.CENTER,true,false,3,1);
  gd_txtInputFile.widthHint=405;
  txtInputFile.setLayoutData(gd_txtInputFile);
  Button btnInputFile=new Button(parent,SWT.NONE);
  btnInputFile.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      if (btnFiles.getSelection()) {
        FileDialog ifDialog=new FileDialog(shell,SWT.MULTI);
        ifDialog.open();
        inputFiles=new String[ifDialog.getFileNames().length];
        for (int i=0; i < ifDialog.getFileNames().length; i++) {
          inputFiles[i]=ifDialog.getFilterPath() + System.getProperty(""String_Node_Str"") + ifDialog.getFileNames()[i];
        }
        StringBuilder sb=new StringBuilder();
        String selectedFiles[]=ifDialog.getFileNames();
        if (selectedFiles.length <= 10)         for (        String inputFile : selectedFiles)         sb.append(ifDialog.getFilterPath() + System.getProperty(""String_Node_Str"") + inputFile+ ""String_Node_Str"");
 else         sb.append(selectedFiles.length + ""String_Node_Str"");
        txtInputFile.setText(sb.toString());
      }
 else {
        DirectoryDialog fd1=new DirectoryDialog(shell);
        fd1.open();
        String fp1Directory=fd1.getFilterPath();
        if (fp1Directory.length() < 3)         return;
        txtInputFile.setText(fp1Directory);
        File dir=new File(fp1Directory);
        ArrayList<String> paths=getFiles(fp1Directory);
        int i=0;
        inputFiles=new String[paths.size()];
        for (        String path : paths)         inputFiles[i++]=path;
      }
    }
  }
);
  btnInputFile.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Label lblDictionary=new Label(parent,SWT.NONE);
  lblDictionary.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  txtDictionary=new Text(parent,SWT.BORDER);
  GridData gd_txtDictionary=new GridData(SWT.FILL,SWT.CENTER,true,false,3,1);
  gd_txtDictionary.widthHint=405;
  txtDictionary.setLayoutData(gd_txtDictionary);
  Button btnDictionary=new Button(parent,SWT.NONE);
  btnDictionary.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      FileDialog dfDialog=new FileDialog(shell,SWT.MULTI);
      dfDialog.open();
      txtDictionary.setText(dfDialog.getFilterPath() + System.getProperty(""String_Node_Str"") + dfDialog.getFileName());
    }
  }
);
  btnDictionary.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Label lblStopWords=new Label(parent,SWT.NONE);
  lblStopWords.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  txtStopWords=new Text(parent,SWT.BORDER);
  GridData gd_txtStopWords=new GridData(SWT.FILL,SWT.CENTER,true,false,3,1);
  gd_txtStopWords.widthHint=405;
  txtStopWords.setLayoutData(gd_txtStopWords);
  Button btnStopWords=new Button(parent,SWT.NONE);
  btnStopWords.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      FileDialog sfDialog=new FileDialog(shell,SWT.MULTI);
      sfDialog.open();
      txtStopWords.setText(sfDialog.getFilterPath() + System.getProperty(""String_Node_Str"") + sfDialog.getFileName());
      if (txtStopWords.getText().length() < 3)       txtStopWords.setText(""String_Node_Str"");
    }
  }
);
  btnStopWords.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Label lblOutputFile=new Label(parent,SWT.NONE);
  lblOutputFile.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  txtOutputFile=new Text(parent,SWT.BORDER);
  GridData gd_txtOutputFile=new GridData(SWT.FILL,SWT.CENTER,true,false,3,1);
  gd_txtOutputFile.widthHint=405;
  txtOutputFile.setLayoutData(gd_txtOutputFile);
  Button btnOutputFile=new Button(parent,SWT.NONE);
  btnOutputFile.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      FileDialog ofDialog=new FileDialog(shell,SWT.SAVE);
      String[] ext=new String[1];
      ext[0]=""String_Node_Str"";
      ofDialog.setFilterExtensions(ext);
      ofDialog.open();
      txtOutputFile.setText(ofDialog.getFilterPath() + System.getProperty(""String_Node_Str"") + ofDialog.getFileName());
    }
  }
);
  btnOutputFile.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  final Button btnStemDictionary=new Button(parent,SWT.CHECK);
  btnStemDictionary.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  final Button btnSpss=new Button(parent,SWT.CHECK);
  btnSpss.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  final Button btnWordDistribution=new Button(parent,SWT.CHECK);
  GridData gd_btnWordDistribution=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  gd_btnWordDistribution.widthHint=266;
  btnWordDistribution.setLayoutData(gd_btnWordDistribution);
  btnWordDistribution.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Group grpPreprocessing=new Group(parent,SWT.NONE);
  grpPreprocessing.setFont(SWTResourceManager.getFont(""String_Node_Str"",9,SWT.BOLD));
  grpPreprocessing.setText(""String_Node_Str"");
  GridData gd_grpPreprocessing=new GridData(SWT.LEFT,SWT.CENTER,false,false,8,1);
  gd_grpPreprocessing.heightHint=76;
  gd_grpPreprocessing.widthHint=357;
  grpPreprocessing.setLayoutData(gd_grpPreprocessing);
  Label lblDelimiters=new Label(grpPreprocessing,SWT.NONE);
  lblDelimiters.setBounds(16,9,129,15);
  lblDelimiters.setText(""String_Node_Str"");
  txtDelimiters=new Text(grpPreprocessing,SWT.BORDER);
  txtDelimiters.setBounds(137,7,129,21);
  Composite composite=new Composite(grpPreprocessing,SWT.NONE);
  composite.setBounds(10,35,336,31);
  final Button btnStemming=new Button(composite,SWT.RADIO);
  btnStemming.setSelection(true);
  btnStemming.setBounds(4,9,106,16);
  btnStemming.setText(""String_Node_Str"");
  final Button btnSnowball=new Button(composite,SWT.RADIO);
  btnSnowball.setBounds(125,9,188,16);
  btnSnowball.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Button btnAnalyze=new Button(parent,SWT.NONE);
  btnAnalyze.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      int returnCode=-1;
      String errorMessage=""String_Node_Str"";
      WordCount wc=new WordCount();
      IEclipseContext iEclipseContext=context;
      ContextInjectionFactory.inject(wc,iEclipseContext);
      MessageBox overwriteMsg=new MessageBox(shell,SWT.YES | SWT.NO);
      overwriteMsg.setMessage(""String_Node_Str"");
      overwriteMsg.setText(""String_Node_Str"");
      int overwrite=0;
      String oPath=txtOutputFile.getText().substring(0,txtOutputFile.getText().length() - 4);
      File oFile=new File(oPath + ""String_Node_Str"");
      File sFile=new File(oPath + ""String_Node_Str"");
      if (oFile.exists() || sFile.exists())       overwrite=overwriteMsg.open();
      if (overwrite == SWT.NO) {
        System.out.println(""String_Node_Str"");
        return;
      }
      System.out.println(""String_Node_Str"");
      try {
        returnCode=wc.wordCount(inputFiles,txtDictionary.getText(),txtStopWords.getText(),oPath,txtDelimiters.getText(),true,btnStemming.getSelection(),btnSnowball.getSelection(),btnSpss.getSelection(),btnWordDistribution.getSelection(),btnStemDictionary.getSelection());
      }
 catch (      IOException ioe) {
        ioe.printStackTrace();
      }
      if (returnCode == -2)       errorMessage=""String_Node_Str"";
      if (returnCode == -3)       errorMessage=""String_Node_Str"";
      if (returnCode == -4)       errorMessage=""String_Node_Str"";
      if (returnCode == -5)       errorMessage=""String_Node_Str"";
      if (returnCode == -6)       errorMessage=""String_Node_Str"";
      if (returnCode == 0)       errorMessage=""String_Node_Str"";
      appendLog(errorMessage);
      if (returnCode == 0) {
        MessageBox message=new MessageBox(shell,SWT.ICON_INFORMATION | SWT.OK);
        message.setMessage(errorMessage);
        message.setText(""String_Node_Str"");
        message.open();
      }
 else {
        MessageBox message=new MessageBox(shell,SWT.ICON_ERROR | SWT.OK);
        message.setMessage(errorMessage);
        message.setText(""String_Node_Str"");
        message.open();
      }
    }
  }
);
  btnAnalyze.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
}","@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  parent.setLayout(new GridLayout(9,false));
  new Label(parent,SWT.NONE);
  Label lblInputType=new Label(parent,SWT.NONE);
  lblInputType.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  final Button btnFiles=new Button(parent,SWT.RADIO);
  btnFiles.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      lblInput.setText(""String_Node_Str"");
    }
  }
);
  btnFiles.setSelection(true);
  btnFiles.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  Button btnFolder=new Button(parent,SWT.RADIO);
  btnFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      lblInput.setText(""String_Node_Str"");
    }
  }
);
  btnFolder.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  lblInput=new Label(parent,SWT.NONE);
  GridData gd_lblInput=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  gd_lblInput.widthHint=71;
  lblInput.setLayoutData(gd_lblInput);
  lblInput.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  txtInputFile=new Text(parent,SWT.BORDER);
  GridData gd_txtInputFile=new GridData(SWT.FILL,SWT.CENTER,true,false,3,1);
  gd_txtInputFile.widthHint=405;
  txtInputFile.setLayoutData(gd_txtInputFile);
  Button btnInputFile=new Button(parent,SWT.NONE);
  btnInputFile.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      if (btnFiles.getSelection()) {
        FileDialog ifDialog=new FileDialog(shell,SWT.MULTI);
        ifDialog.open();
        inputFiles=new String[ifDialog.getFileNames().length];
        for (int i=0; i < ifDialog.getFileNames().length; i++) {
          inputFiles[i]=ifDialog.getFilterPath() + System.getProperty(""String_Node_Str"") + ifDialog.getFileNames()[i];
        }
        StringBuilder sb=new StringBuilder();
        String selectedFiles[]=ifDialog.getFileNames();
        if (selectedFiles.length <= 10)         for (        String inputFile : selectedFiles)         sb.append(ifDialog.getFilterPath() + System.getProperty(""String_Node_Str"") + inputFile+ ""String_Node_Str"");
 else         sb.append(selectedFiles.length + ""String_Node_Str"");
        txtInputFile.setText(sb.toString());
      }
 else {
        DirectoryDialog fd1=new DirectoryDialog(shell);
        fd1.open();
        String fp1Directory=fd1.getFilterPath();
        if (fp1Directory.length() < 3)         return;
        txtInputFile.setText(fp1Directory);
        File dir=new File(fp1Directory);
        ArrayList<String> paths=getFiles(fp1Directory);
        int i=0;
        inputFiles=new String[paths.size()];
        for (        String path : paths)         inputFiles[i++]=path;
      }
    }
  }
);
  btnInputFile.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Label lblDictionary=new Label(parent,SWT.NONE);
  lblDictionary.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  txtDictionary=new Text(parent,SWT.BORDER);
  GridData gd_txtDictionary=new GridData(SWT.FILL,SWT.CENTER,true,false,3,1);
  gd_txtDictionary.widthHint=405;
  txtDictionary.setLayoutData(gd_txtDictionary);
  Button btnDictionary=new Button(parent,SWT.NONE);
  btnDictionary.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      FileDialog dfDialog=new FileDialog(shell,SWT.MULTI);
      dfDialog.open();
      txtDictionary.setText(dfDialog.getFilterPath() + System.getProperty(""String_Node_Str"") + dfDialog.getFileName());
    }
  }
);
  btnDictionary.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Label lblStopWords=new Label(parent,SWT.NONE);
  lblStopWords.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  txtStopWords=new Text(parent,SWT.BORDER);
  GridData gd_txtStopWords=new GridData(SWT.FILL,SWT.CENTER,true,false,3,1);
  gd_txtStopWords.widthHint=405;
  txtStopWords.setLayoutData(gd_txtStopWords);
  Button btnStopWords=new Button(parent,SWT.NONE);
  btnStopWords.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      FileDialog sfDialog=new FileDialog(shell,SWT.MULTI);
      sfDialog.open();
      txtStopWords.setText(sfDialog.getFilterPath() + System.getProperty(""String_Node_Str"") + sfDialog.getFileName());
      if (txtStopWords.getText().length() < 3)       txtStopWords.setText(""String_Node_Str"");
    }
  }
);
  btnStopWords.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Label lblOutputFile=new Label(parent,SWT.NONE);
  lblOutputFile.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  txtOutputFile=new Text(parent,SWT.BORDER);
  GridData gd_txtOutputFile=new GridData(SWT.FILL,SWT.CENTER,true,false,3,1);
  gd_txtOutputFile.widthHint=405;
  txtOutputFile.setLayoutData(gd_txtOutputFile);
  Button btnOutputFile=new Button(parent,SWT.NONE);
  btnOutputFile.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      FileDialog ofDialog=new FileDialog(shell,SWT.SAVE);
      String[] ext=new String[1];
      ext[0]=""String_Node_Str"";
      ofDialog.setFilterExtensions(ext);
      ofDialog.open();
      txtOutputFile.setText(ofDialog.getFilterPath() + System.getProperty(""String_Node_Str"") + ofDialog.getFileName());
    }
  }
);
  btnOutputFile.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  final Button btnStemDictionary=new Button(parent,SWT.CHECK);
  btnStemDictionary.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  final Button btnSpss=new Button(parent,SWT.CHECK);
  btnSpss.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  final Button btnWordDistribution=new Button(parent,SWT.CHECK);
  GridData gd_btnWordDistribution=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  gd_btnWordDistribution.widthHint=266;
  btnWordDistribution.setLayoutData(gd_btnWordDistribution);
  btnWordDistribution.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Group grpPreprocessing=new Group(parent,SWT.NONE);
  grpPreprocessing.setFont(SWTResourceManager.getFont(""String_Node_Str"",9,SWT.BOLD));
  grpPreprocessing.setText(""String_Node_Str"");
  GridData gd_grpPreprocessing=new GridData(SWT.LEFT,SWT.CENTER,false,false,8,1);
  gd_grpPreprocessing.heightHint=76;
  gd_grpPreprocessing.widthHint=357;
  grpPreprocessing.setLayoutData(gd_grpPreprocessing);
  Label lblDelimiters=new Label(grpPreprocessing,SWT.NONE);
  lblDelimiters.setBounds(16,30,105,15);
  lblDelimiters.setText(""String_Node_Str"");
  txtDelimiters=new Text(grpPreprocessing,SWT.BORDER);
  txtDelimiters.setBounds(137,28,129,21);
  Composite composite=new Composite(grpPreprocessing,SWT.NONE);
  composite.setBounds(10,56,336,31);
  final Button btnStemming=new Button(composite,SWT.RADIO);
  btnStemming.setSelection(true);
  btnStemming.setBounds(4,9,106,16);
  btnStemming.setText(""String_Node_Str"");
  final Button btnSnowball=new Button(composite,SWT.RADIO);
  btnSnowball.setBounds(125,9,188,16);
  btnSnowball.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Button btnAnalyze=new Button(parent,SWT.NONE);
  btnAnalyze.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      int returnCode=-1;
      String errorMessage=""String_Node_Str"";
      WordCount wc=new WordCount();
      IEclipseContext iEclipseContext=context;
      ContextInjectionFactory.inject(wc,iEclipseContext);
      MessageBox overwriteMsg=new MessageBox(shell,SWT.YES | SWT.NO);
      overwriteMsg.setMessage(""String_Node_Str"");
      overwriteMsg.setText(""String_Node_Str"");
      int overwrite=0;
      String oPath=txtOutputFile.getText().substring(0,txtOutputFile.getText().length() - 4);
      File oFile=new File(oPath + ""String_Node_Str"");
      File sFile=new File(oPath + ""String_Node_Str"");
      if (oFile.exists() || sFile.exists())       overwrite=overwriteMsg.open();
      if (overwrite == SWT.NO) {
        System.out.println(""String_Node_Str"");
        return;
      }
      System.out.println(""String_Node_Str"");
      try {
        returnCode=wc.wordCount(inputFiles,txtDictionary.getText(),txtStopWords.getText(),oPath,txtDelimiters.getText(),true,btnStemming.getSelection(),btnSnowball.getSelection(),btnSpss.getSelection(),btnWordDistribution.getSelection(),btnStemDictionary.getSelection());
      }
 catch (      IOException ioe) {
        ioe.printStackTrace();
      }
      if (returnCode == -2)       errorMessage=""String_Node_Str"";
      if (returnCode == -3)       errorMessage=""String_Node_Str"";
      if (returnCode == -4)       errorMessage=""String_Node_Str"";
      if (returnCode == -5)       errorMessage=""String_Node_Str"";
      if (returnCode == -6)       errorMessage=""String_Node_Str"";
      if (returnCode == 0)       errorMessage=""String_Node_Str"";
      appendLog(errorMessage);
      if (returnCode == 0) {
        MessageBox message=new MessageBox(shell,SWT.ICON_INFORMATION | SWT.OK);
        message.setMessage(errorMessage);
        message.setText(""String_Node_Str"");
        message.open();
      }
 else {
        MessageBox message=new MessageBox(shell,SWT.ICON_ERROR | SWT.OK);
        message.setMessage(errorMessage);
        message.setText(""String_Node_Str"");
        message.open();
      }
    }
  }
);
  btnAnalyze.setText(""String_Node_Str"");
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
}",0.9867482161060144
168236,"protected void runLDA(File dir,File seedFile,int numTopics,int noOfSamples,double alphaval,double betaval,double confidenceValue,String outputdir){
  File[] listOfFiles=dir.listFiles();
  List<File> inputFiles=new ArrayList<File>();
  for (  File f : listOfFiles)   inputFiles.add(f);
  if (inputFiles.size() == 0) {
    appendLog(""String_Node_Str"");
    return;
  }
  File[] listSeedFiles=seedFile.listFiles();
  File preSeedFile=listSeedFiles[0];
  System.out.println(""String_Node_Str"");
  appendLog(""String_Node_Str"");
  DTWC dtwc=new DTWC(inputFiles,preSeedFile);
  dtwc.computeDocumentVectors();
  int[][][] zlabels=dtwc.getTopicSeedsAsInt();
  int[][] docs=dtwc.getDocVectorsAsInt();
  int T=numTopics;
  int W=dtwc.getVocabSize();
  double[][] alpha=new double[1][T];
  for (int i=0; i < T; i++) {
    alpha[0][i]=alphaval;
  }
  double[][] beta=new double[T][W];
  for (int i=0; i < T; i++) {
    for (int j=0; j < W; j++) {
      beta[i][j]=betaval;
    }
  }
  ZlabelLDA zelda=new ZlabelLDA(docs,zlabels,confidenceValue,alpha,beta,noOfSamples);
  boolean retVal=zelda.zLDA();
  if (!retVal) {
    appendLog(""String_Node_Str"");
    return;
  }
  double[][] theta, phi;
  theta=zelda.getTheta();
  phi=zelda.getPhi();
  Map<String,Integer> dictionary=dtwc.getTermIndex();
  Map<Integer,String> revDict=dtwc.getIndexTerm();
  List<List<Map.Entry<String,Double>>> topicWords=new ArrayList<List<Map.Entry<String,Double>>>();
  for (int i=0; i < T; i++) {
    topicWords.add(new ArrayList<Map.Entry<String,Double>>());
  }
  for (int i=0; i < T; i++) {
    for (int j=0; j < W; j++) {
      if (phi[i][j] > 0.001) {
        topicWords.get(i).add(new AbstractMap.SimpleEntry<String,Double>(revDict.get(j),new Double(phi[i][j])));
      }
    }
  }
  try {
    FileWriter fw=new FileWriter(new File(outputdir + ""String_Node_Str""));
    for (int i=0; i < T; i++) {
      fw.write(""String_Node_Str"" + i + ""String_Node_Str"");
      Collections.sort(topicWords.get(i),new Comparator<Map.Entry<String,Double>>(){
        @Override public int compare(        Entry<String,Double> arg0,        Entry<String,Double> arg1){
          return -(arg0.getValue()).compareTo(arg1.getValue());
        }
      }
);
      for (int j=0; (j < topicWords.get(i).size() && j < 50); j++) {
        fw.write(topicWords.get(i).get(j).getKey() + ""String_Node_Str"" + topicWords.get(i).get(j).getValue()+ ""String_Node_Str"");
      }
      fw.write(""String_Node_Str"");
      fw.flush();
    }
    fw.flush();
    fw.close();
    fw=new FileWriter(new File(outputdir + ""String_Node_Str""));
    for (int i=0; i < T; i++) {
      fw.write(""String_Node_Str"" + i + ""String_Node_Str"");
      for (int j=0; j < phi[i].length; j++) {
        if (phi[i][j] > 0.001) {
          fw.write(phi[i][j] + ""String_Node_Str"");
        }
      }
      fw.write(""String_Node_Str"");
      fw.flush();
    }
    fw.flush();
    fw.close();
    fw=new FileWriter(new File(outputdir + ""String_Node_Str""));
    for (int i=0; i < docs.length; i++) {
      fw.write(""String_Node_Str"" + i + ""String_Node_Str"");
      for (int j=0; j < theta[i].length; j++) {
        fw.write(theta[i][j] + ""String_Node_Str"");
      }
      fw.write(""String_Node_Str"");
      fw.flush();
    }
    fw.flush();
    fw.close();
  }
 catch (  Exception e) {
    appendLog(""String_Node_Str"" + e);
  }
  appendLog(""String_Node_Str"");
}","protected void runLDA(File dir,File seedFile,int numTopics,int noOfSamples,double alphaval,double betaval,double confidenceValue,String outputdir){
  File[] listOfFiles=dir.listFiles();
  List<File> inputFiles=new ArrayList<File>();
  for (  File f : listOfFiles)   inputFiles.add(f);
  if (inputFiles.size() == 0) {
    appendLog(""String_Node_Str"");
    return;
  }
  File preSeedFile;
  if (seedFile.isDirectory()) {
    File[] listSeedFiles=seedFile.listFiles();
    preSeedFile=listSeedFiles[0];
  }
 else {
    preSeedFile=seedFile;
  }
  System.out.println(""String_Node_Str"");
  appendLog(""String_Node_Str"");
  DTWC dtwc=new DTWC(inputFiles,preSeedFile);
  dtwc.computeDocumentVectors();
  int[][][] zlabels=dtwc.getTopicSeedsAsInt();
  int[][] docs=dtwc.getDocVectorsAsInt();
  int T=numTopics;
  int W=dtwc.getVocabSize();
  double[][] alpha=new double[1][T];
  for (int i=0; i < T; i++) {
    alpha[0][i]=alphaval;
  }
  double[][] beta=new double[T][W];
  for (int i=0; i < T; i++) {
    for (int j=0; j < W; j++) {
      beta[i][j]=betaval;
    }
  }
  ZlabelLDA zelda=new ZlabelLDA(docs,zlabels,confidenceValue,alpha,beta,noOfSamples);
  boolean retVal=zelda.zLDA();
  if (!retVal) {
    appendLog(""String_Node_Str"");
    return;
  }
  double[][] theta, phi;
  theta=zelda.getTheta();
  phi=zelda.getPhi();
  Map<String,Integer> dictionary=dtwc.getTermIndex();
  Map<Integer,String> revDict=dtwc.getIndexTerm();
  List<List<Map.Entry<String,Double>>> topicWords=new ArrayList<List<Map.Entry<String,Double>>>();
  for (int i=0; i < T; i++) {
    topicWords.add(new ArrayList<Map.Entry<String,Double>>());
  }
  for (int i=0; i < T; i++) {
    for (int j=0; j < W; j++) {
      if (phi[i][j] > 0.001) {
        topicWords.get(i).add(new AbstractMap.SimpleEntry<String,Double>(revDict.get(j),new Double(phi[i][j])));
      }
    }
  }
  appendLog(""String_Node_Str"" + outputdir + ""String_Node_Str"");
  try {
    FileWriter fw=new FileWriter(new File(outputdir + ""String_Node_Str""));
    for (int i=0; i < T; i++) {
      fw.write(""String_Node_Str"" + i + ""String_Node_Str"");
      Collections.sort(topicWords.get(i),new Comparator<Map.Entry<String,Double>>(){
        @Override public int compare(        Entry<String,Double> arg0,        Entry<String,Double> arg1){
          return -(arg0.getValue()).compareTo(arg1.getValue());
        }
      }
);
      for (int j=0; (j < topicWords.get(i).size() && j < 50); j++) {
        fw.write(topicWords.get(i).get(j).getKey() + ""String_Node_Str"" + topicWords.get(i).get(j).getValue()+ ""String_Node_Str"");
      }
      fw.write(""String_Node_Str"");
      fw.flush();
    }
    fw.flush();
    fw.close();
    appendLog(""String_Node_Str"" + outputdir + ""String_Node_Str"");
    fw=new FileWriter(new File(outputdir + ""String_Node_Str""));
    for (int i=0; i < T; i++) {
      fw.write(""String_Node_Str"" + i + ""String_Node_Str"");
      for (int j=0; j < phi[i].length; j++) {
        if (phi[i][j] > 0.001) {
          fw.write(phi[i][j] + ""String_Node_Str"");
        }
      }
      fw.write(""String_Node_Str"");
      fw.flush();
    }
    fw.flush();
    fw.close();
    appendLog(""String_Node_Str"" + outputdir + ""String_Node_Str"");
    fw=new FileWriter(new File(outputdir + ""String_Node_Str""));
    for (int i=0; i < docs.length; i++) {
      fw.write(""String_Node_Str"" + i + ""String_Node_Str"");
      for (int j=0; j < theta[i].length; j++) {
        fw.write(theta[i][j] + ""String_Node_Str"");
      }
      fw.write(""String_Node_Str"");
      fw.flush();
    }
    fw.flush();
    fw.close();
  }
 catch (  Exception e) {
    appendLog(""String_Node_Str"" + e);
  }
  appendLog(""String_Node_Str"");
}",0.957637997432606
168237,"@Override public void mouseUp(MouseEvent e){
  Preprocess pp=new Preprocess(inputFiles,stopwordsFile,outputDirectory,txtSuffix.getText(),txtDelimiters.getText(),btnDoLowercase.getSelection(),btnStemming.getSelection(),cmbStemLang.getText());
  IEclipseContext iEclipseContext=context;
  ContextInjectionFactory.inject(pp,iEclipseContext);
  try {
    long startTime=System.currentTimeMillis();
    int result=pp.doPreprocess();
    if (result == -1 || result == -2 || result == -3)     appendLog(""String_Node_Str"");
 else     appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  }
 catch (  Exception ioe) {
    ioe.printStackTrace();
  }
}","@Override public void mouseUp(MouseEvent e){
  Preprocess pp=new Preprocess(inputFiles,txtStopWords.getText(),txtOutput.getText(),txtSuffix.getText(),txtDelimiters.getText(),btnDoLowercase.getSelection(),btnStemming.getSelection(),cmbStemLang.getText());
  IEclipseContext iEclipseContext=context;
  ContextInjectionFactory.inject(pp,iEclipseContext);
  try {
    long startTime=System.currentTimeMillis();
    int result=pp.doPreprocess();
    if (result == -1 || result == -2 || result == -3)     appendLog(""String_Node_Str"");
 else     appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  }
 catch (  Exception ioe) {
    ioe.printStackTrace();
  }
}",0.9484386347131444
168238,"@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  parent.setLayout(new GridLayout(3,false));
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Label lblInputFile=new Label(parent,SWT.NONE);
  lblInputFile.setText(""String_Node_Str"");
  txtInput=new Text(parent,SWT.BORDER);
  GridData gd_txtInput=new GridData(SWT.FILL,SWT.CENTER,true,false,1,1);
  gd_txtInput.widthHint=335;
  txtInput.setLayoutData(gd_txtInput);
  Button button=new Button(parent,SWT.NONE);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      txtInput.setText(""String_Node_Str"");
      FileDialog fd=new FileDialog(shell,SWT.MULTI);
      fd.open();
      String[] iFiles=fd.getFileNames();
      String dir=fd.getFilterPath();
      int i=0;
      inputFiles=new String[iFiles.length];
      for (      String file : iFiles) {
        txtInput.append(dir + System.getProperty(""String_Node_Str"") + file+ ""String_Node_Str"");
        inputFiles[i++]=dir + System.getProperty(""String_Node_Str"") + file;
      }
    }
  }
);
  button.setText(""String_Node_Str"");
  Label lblStopWords=new Label(parent,SWT.NONE);
  lblStopWords.setText(""String_Node_Str"");
  txtStopWords=new Text(parent,SWT.BORDER);
  txtStopWords.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  Button button_2=new Button(parent,SWT.NONE);
  button_2.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      FileDialog sfd=new FileDialog(shell,SWT.OPEN);
      sfd.open();
      stopwordsFile=sfd.getFilterPath() + System.getProperty(""String_Node_Str"") + sfd.getFileName();
      if (stopwordsFile.length() < 2) {
        stopwordsFile=""String_Node_Str"";
      }
 else {
        System.out.println(stopwordsFile);
      }
      txtStopWords.setText(stopwordsFile);
    }
  }
);
  button_2.setText(""String_Node_Str"");
  Label lblOutputFile=new Label(parent,SWT.NONE);
  lblOutputFile.setText(""String_Node_Str"");
  txtOutput=new Text(parent,SWT.BORDER);
  GridData gd_txtOutput=new GridData(SWT.FILL,SWT.CENTER,true,false,1,1);
  gd_txtOutput.widthHint=335;
  txtOutput.setLayoutData(gd_txtOutput);
  Button button_1=new Button(parent,SWT.NONE);
  button_1.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog od=new DirectoryDialog(shell);
      od.open();
      String oDirectory=od.getFilterPath();
      txtOutput.setText(oDirectory);
      outputDirectory=oDirectory;
    }
  }
);
  button_1.setText(""String_Node_Str"");
  Label lblSuffix=new Label(parent,SWT.NONE);
  lblSuffix.setText(""String_Node_Str"");
  txtSuffix=new Text(parent,SWT.BORDER);
  txtSuffix.setText(""String_Node_Str"");
  GridData gd_txtSuffix=new GridData(SWT.FILL,SWT.CENTER,true,false,1,1);
  gd_txtSuffix.widthHint=335;
  txtSuffix.setLayoutData(gd_txtSuffix);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Group grpPreprocessing=new Group(parent,SWT.NONE);
  GridData gd_grpPreprocessing=new GridData(SWT.LEFT,SWT.CENTER,false,false,3,1);
  gd_grpPreprocessing.heightHint=118;
  gd_grpPreprocessing.widthHint=429;
  grpPreprocessing.setLayoutData(gd_grpPreprocessing);
  grpPreprocessing.setText(""String_Node_Str"");
  Label lblNewLabel=new Label(grpPreprocessing,SWT.NONE);
  lblNewLabel.setBounds(10,32,55,15);
  lblNewLabel.setText(""String_Node_Str"");
  txtDelimiters=new Text(grpPreprocessing,SWT.BORDER);
  txtDelimiters.setText(""String_Node_Str"");
  txtDelimiters.setBounds(176,26,249,21);
  final Combo cmbStemLang=new Combo(grpPreprocessing,SWT.NONE);
  cmbStemLang.setEnabled(false);
  cmbStemLang.setItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  cmbStemLang.setBounds(275,63,150,23);
  cmbStemLang.setText(""String_Node_Str"");
  final Button btnStemming=new Button(grpPreprocessing,SWT.CHECK);
  btnStemming.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (btnStemming.getSelection())       cmbStemLang.setEnabled(true);
 else       cmbStemLang.setEnabled(false);
    }
  }
);
  btnStemming.setText(""String_Node_Str"");
  btnStemming.setBounds(176,65,93,16);
  final Button btnDoLowercase=new Button(grpPreprocessing,SWT.CHECK);
  btnDoLowercase.setBounds(10,65,143,16);
  btnDoLowercase.setText(""String_Node_Str"");
  Button btnPreprocess=new Button(grpPreprocessing,SWT.NONE);
  btnPreprocess.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      Preprocess pp=new Preprocess(inputFiles,stopwordsFile,outputDirectory,txtSuffix.getText(),txtDelimiters.getText(),btnDoLowercase.getSelection(),btnStemming.getSelection(),cmbStemLang.getText());
      IEclipseContext iEclipseContext=context;
      ContextInjectionFactory.inject(pp,iEclipseContext);
      try {
        long startTime=System.currentTimeMillis();
        int result=pp.doPreprocess();
        if (result == -1 || result == -2 || result == -3)         appendLog(""String_Node_Str"");
 else         appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
      }
 catch (      Exception ioe) {
        ioe.printStackTrace();
      }
    }
  }
);
  btnPreprocess.setBounds(10,101,75,25);
  btnPreprocess.setText(""String_Node_Str"");
}","@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  parent.setLayout(new GridLayout(3,false));
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Label lblInputFile=new Label(parent,SWT.NONE);
  lblInputFile.setText(""String_Node_Str"");
  txtInput=new Text(parent,SWT.BORDER);
  GridData gd_txtInput=new GridData(SWT.FILL,SWT.CENTER,true,false,1,1);
  gd_txtInput.widthHint=335;
  txtInput.setLayoutData(gd_txtInput);
  Button button=new Button(parent,SWT.NONE);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      txtInput.setText(""String_Node_Str"");
      FileDialog fd=new FileDialog(shell,SWT.MULTI);
      fd.open();
      String[] iFiles=fd.getFileNames();
      String dir=fd.getFilterPath();
      int i=0;
      inputFiles=new String[iFiles.length];
      for (      String file : iFiles) {
        txtInput.append(dir + System.getProperty(""String_Node_Str"") + file+ ""String_Node_Str"");
        inputFiles[i++]=dir + System.getProperty(""String_Node_Str"") + file;
      }
    }
  }
);
  button.setText(""String_Node_Str"");
  Label lblStopWords=new Label(parent,SWT.NONE);
  lblStopWords.setText(""String_Node_Str"");
  txtStopWords=new Text(parent,SWT.BORDER);
  txtStopWords.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  Button button_2=new Button(parent,SWT.NONE);
  button_2.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      FileDialog sfd=new FileDialog(shell,SWT.OPEN);
      sfd.open();
      stopwordsFile=sfd.getFilterPath() + System.getProperty(""String_Node_Str"") + sfd.getFileName();
      if (stopwordsFile.length() < 2) {
        stopwordsFile=""String_Node_Str"";
      }
 else {
        System.out.println(stopwordsFile);
      }
      txtStopWords.setText(stopwordsFile);
    }
  }
);
  button_2.setText(""String_Node_Str"");
  Label lblOutputFile=new Label(parent,SWT.NONE);
  lblOutputFile.setText(""String_Node_Str"");
  txtOutput=new Text(parent,SWT.BORDER);
  GridData gd_txtOutput=new GridData(SWT.FILL,SWT.CENTER,true,false,1,1);
  gd_txtOutput.widthHint=335;
  txtOutput.setLayoutData(gd_txtOutput);
  Button button_1=new Button(parent,SWT.NONE);
  button_1.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog od=new DirectoryDialog(shell);
      od.open();
      String oDirectory=od.getFilterPath();
      txtOutput.setText(oDirectory);
      outputDirectory=oDirectory;
    }
  }
);
  button_1.setText(""String_Node_Str"");
  Label lblSuffix=new Label(parent,SWT.NONE);
  lblSuffix.setText(""String_Node_Str"");
  txtSuffix=new Text(parent,SWT.BORDER);
  txtSuffix.setText(""String_Node_Str"");
  GridData gd_txtSuffix=new GridData(SWT.FILL,SWT.CENTER,true,false,1,1);
  gd_txtSuffix.widthHint=335;
  txtSuffix.setLayoutData(gd_txtSuffix);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Group grpPreprocessing=new Group(parent,SWT.NONE);
  GridData gd_grpPreprocessing=new GridData(SWT.LEFT,SWT.CENTER,false,false,3,1);
  gd_grpPreprocessing.heightHint=118;
  gd_grpPreprocessing.widthHint=429;
  grpPreprocessing.setLayoutData(gd_grpPreprocessing);
  grpPreprocessing.setText(""String_Node_Str"");
  Label lblNewLabel=new Label(grpPreprocessing,SWT.NONE);
  lblNewLabel.setBounds(10,32,55,15);
  lblNewLabel.setText(""String_Node_Str"");
  txtDelimiters=new Text(grpPreprocessing,SWT.BORDER);
  txtDelimiters.setText(""String_Node_Str"");
  txtDelimiters.setBounds(176,26,249,21);
  final Combo cmbStemLang=new Combo(grpPreprocessing,SWT.NONE);
  cmbStemLang.setEnabled(false);
  cmbStemLang.setItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  cmbStemLang.setBounds(275,63,150,23);
  cmbStemLang.setText(""String_Node_Str"");
  final Button btnStemming=new Button(grpPreprocessing,SWT.CHECK);
  btnStemming.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (btnStemming.getSelection())       cmbStemLang.setEnabled(true);
 else       cmbStemLang.setEnabled(false);
    }
  }
);
  btnStemming.setText(""String_Node_Str"");
  btnStemming.setBounds(176,65,93,16);
  final Button btnDoLowercase=new Button(grpPreprocessing,SWT.CHECK);
  btnDoLowercase.setBounds(10,65,143,16);
  btnDoLowercase.setText(""String_Node_Str"");
  Button btnPreprocess=new Button(grpPreprocessing,SWT.NONE);
  btnPreprocess.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      Preprocess pp=new Preprocess(inputFiles,txtStopWords.getText(),txtOutput.getText(),txtSuffix.getText(),txtDelimiters.getText(),btnDoLowercase.getSelection(),btnStemming.getSelection(),cmbStemLang.getText());
      IEclipseContext iEclipseContext=context;
      ContextInjectionFactory.inject(pp,iEclipseContext);
      try {
        long startTime=System.currentTimeMillis();
        int result=pp.doPreprocess();
        if (result == -1 || result == -2 || result == -3)         appendLog(""String_Node_Str"");
 else         appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
      }
 catch (      Exception ioe) {
        ioe.printStackTrace();
      }
    }
  }
);
  btnPreprocess.setBounds(10,101,75,25);
  btnPreprocess.setText(""String_Node_Str"");
}",0.993631715848955
168239,"public int doPreprocess() throws IOException, LangDetectException {
  if (stopwordsFile != null && !stopwordsFile.isEmpty()) {
    File sFile=new File(stopwordsFile);
    if (!sFile.exists() || sFile.isDirectory()) {
      System.out.println(""String_Node_Str"" + sFile.getAbsolutePath());
      appendLog(""String_Node_Str"" + sFile.getAbsolutePath());
      return -2;
    }
 else {
      doStopWords=true;
      String currentLine;
      BufferedReader br=new BufferedReader(new FileReader(sFile));
      while ((currentLine=br.readLine()) != null) {
        stopWordsSet.add(currentLine.trim().toLowerCase());
      }
      br.close();
    }
  }
  if (doStemming) {
    if (stemLang.equals(""String_Node_Str"")) {
      appendLog(""String_Node_Str"");
      doLangDetect=true;
      System.out.println(System.getProperty(""String_Node_Str""));
      System.out.println(this.getClass().getResource(""String_Node_Str"").getPath());
      try {
        DetectorFactory.loadProfile(""String_Node_Str"");
      }
 catch (      com.cybozu.labs.langdetect.LangDetectException ex) {
        System.out.println(""String_Node_Str"" + ex.getCode());
      }
    }
 else {
      doLangDetect=false;
      stemmer=stemSelect(stemLang);
    }
  }
  for (  String inputFile : inputFiles) {
    System.out.println(""String_Node_Str"" + inputFile);
    appendLog(""String_Node_Str"" + inputFile);
    File iFile=new File(inputFile);
    if (!iFile.exists() || iFile.isDirectory()) {
      System.out.println(""String_Node_Str"" + iFile.getAbsolutePath());
      appendLog(""String_Node_Str"" + iFile.getAbsolutePath());
      return -1;
    }
    int dindex=inputFile.lastIndexOf('.');
    int findex=inputFile.lastIndexOf(System.getProperty(""String_Node_Str""));
    String fname=inputFile.substring(findex,dindex);
    String ext=inputFile.substring(dindex + 1);
    File oFile=new File(outputPath + System.getProperty(""String_Node_Str"") + fname+ suffix+ ""String_Node_Str""+ ext);
    System.out.println(""String_Node_Str"" + oFile.getAbsolutePath());
    appendLog(""String_Node_Str"" + oFile.getAbsolutePath());
    if (doLangDetect) {
      stemmer=findLangStemmer(iFile);
      if (stemmer == null) {
        appendLog(""String_Node_Str"");
        return -3;
      }
    }
    BufferedReader br=new BufferedReader(new FileReader(iFile));
    BufferedWriter bw=new BufferedWriter(new FileWriter(oFile));
    String currentLine;
    while ((currentLine=br.readLine()) != null) {
      for (      char c : delimiters.toCharArray())       currentLine=currentLine.replace(c,' ');
      if (doLowercase) {
        String turk=""String_Node_Str"";
        System.out.println(turk);
        currentLine=turk;
        System.out.println(currentLine);
        currentLine=currentLine.toLowerCase();
        System.out.println(currentLine);
      }
      if (doStopWords)       currentLine=removeStopWords(currentLine);
      if (doStemming)       currentLine=stem(currentLine);
      bw.write(currentLine);
      bw.newLine();
    }
    br.close();
    bw.close();
  }
  return 1;
}","public int doPreprocess() throws IOException, LangDetectException {
  if (stopwordsFile != null && !stopwordsFile.isEmpty()) {
    File sFile=new File(stopwordsFile);
    if (!sFile.exists() || sFile.isDirectory()) {
      System.out.println(""String_Node_Str"" + sFile.getAbsolutePath());
      appendLog(""String_Node_Str"" + sFile.getAbsolutePath());
      return -2;
    }
 else {
      doStopWords=true;
      String currentLine;
      BufferedReader br=new BufferedReader(new FileReader(sFile));
      while ((currentLine=br.readLine()) != null) {
        stopWordsSet.add(currentLine.trim().toLowerCase());
      }
      br.close();
    }
  }
  if (doStemming) {
    if (stemLang.equals(""String_Node_Str"")) {
      appendLog(""String_Node_Str"");
      doLangDetect=true;
      System.out.println(System.getProperty(""String_Node_Str""));
      System.out.println(this.getClass().getResource(""String_Node_Str"").getPath());
      try {
        DetectorFactory.loadProfile(""String_Node_Str"");
      }
 catch (      com.cybozu.labs.langdetect.LangDetectException ex) {
        System.out.println(""String_Node_Str"" + ex.getCode());
      }
    }
 else {
      doLangDetect=false;
      stemmer=stemSelect(stemLang);
    }
  }
  for (  String inputFile : inputFiles) {
    System.out.println(""String_Node_Str"" + inputFile);
    appendLog(""String_Node_Str"" + inputFile);
    File iFile=new File(inputFile);
    if (!iFile.exists() || iFile.isDirectory()) {
      System.out.println(""String_Node_Str"" + iFile.getAbsolutePath());
      appendLog(""String_Node_Str"" + iFile.getAbsolutePath());
      return -1;
    }
    int dindex=inputFile.lastIndexOf('.');
    int findex=inputFile.lastIndexOf(System.getProperty(""String_Node_Str""));
    String fname=inputFile.substring(findex,dindex);
    String ext=inputFile.substring(dindex + 1);
    File oFile=new File(outputPath + System.getProperty(""String_Node_Str"") + fname+ suffix+ ""String_Node_Str""+ ext);
    System.out.println(""String_Node_Str"" + oFile.getAbsolutePath());
    appendLog(""String_Node_Str"" + oFile.getAbsolutePath());
    if (doLangDetect) {
      stemmer=findLangStemmer(iFile);
      if (stemmer == null) {
        appendLog(""String_Node_Str"");
        return -3;
      }
    }
    BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(iFile),""String_Node_Str""));
    BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(oFile),""String_Node_Str""));
    String currentLine;
    while ((currentLine=br.readLine()) != null) {
      for (      char c : delimiters.toCharArray())       currentLine=currentLine.replace(c,' ');
      if (doLowercase) {
        currentLine=currentLine.toLowerCase();
      }
      if (doStopWords)       currentLine=removeStopWords(currentLine);
      if (doStemming)       currentLine=stem(currentLine);
      bw.write(currentLine);
      bw.newLine();
    }
    br.close();
    bw.close();
  }
  return 1;
}",0.9442864313200602
168240,"public String doPreprocessing(String path) throws IOException {
  File[] files;
  File input=new File(path);
  String outputPath;
  if (input.isDirectory()) {
    files=input.listFiles();
    outputPath=path + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
  }
 else {
    files=new File[1];
    files[0]=input;
    outputPath=input.getParentFile().getAbsolutePath() + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
  }
  if (new File(outputPath).mkdir()) {
    System.out.println(""String_Node_Str"");
  }
  if (options.getStopFile() != null && options.getStopFile() != ""String_Node_Str"" && options.getStopFile().length() > 3) {
    doStopWords=true;
    String currentLine;
    BufferedReader br=new BufferedReader(new FileReader(new File(options.getStopFile())));
    while ((currentLine=br.readLine()) != null) {
      stopWordsSet.add(currentLine.trim().toLowerCase());
    }
    br.close();
  }
  if (options.isDoStemming()) {
    if (options.getStemLang().equals(""String_Node_Str"")) {
      appendLog(""String_Node_Str"");
      doLangDetect=true;
      System.out.println(System.getProperty(""String_Node_Str""));
      System.out.println(this.getClass().getResource(""String_Node_Str"").getPath());
      try {
        DetectorFactory.loadProfile(""String_Node_Str"");
      }
 catch (      com.cybozu.labs.langdetect.LangDetectException ex) {
        System.out.println(""String_Node_Str"" + ex.getCode());
      }
    }
 else {
      doLangDetect=false;
      stemmer=stemSelect(options.getStemLang());
    }
  }
  for (  File f : files) {
    if (""String_Node_Str"".equals(f.getName()))     continue;
    String inputFile=f.getAbsolutePath();
    System.out.println(""String_Node_Str"" + inputFile);
    if (doLangDetect) {
      try {
        stemmer=findLangStemmer(f);
      }
 catch (      LangDetectException e) {
        e.printStackTrace();
      }
      if (stemmer == null) {
        appendLog(""String_Node_Str"");
      }
    }
    File iFile=new File(inputFile);
    if (!iFile.exists() || iFile.isDirectory()) {
      System.out.println(""String_Node_Str"" + iFile.getAbsolutePath());
      appendLog(""String_Node_Str"" + iFile.getAbsolutePath());
      continue;
    }
    File oFile=new File(outputPath + System.getProperty(""String_Node_Str"") + f.getName());
    BufferedReader br=new BufferedReader(new FileReader(iFile));
    BufferedWriter bw=new BufferedWriter(new FileWriter(oFile));
    String linear;
    while ((linear=br.readLine()) != null) {
      if (linear != ""String_Node_Str"") {
        if (options.isDoLowercase())         linear=linear.toLowerCase();
        for (        char c : options.getDelimiters().toCharArray())         linear=linear.replace(c,' ');
        if (doStopWords)         linear=removeStopWords(linear);
        if (options.isDoStemming())         linear=stem(linear);
        bw.write(linear + ""String_Node_Str"");
      }
    }
    System.out.println(outputPath + System.getProperty(""String_Node_Str"") + f.getName());
    br.close();
    bw.close();
  }
  System.out.println(""String_Node_Str"" + outputPath);
  return outputPath;
}","public String doPreprocessing(String path) throws IOException {
  File[] files;
  File input=new File(path);
  String outputPath;
  if (input.isDirectory()) {
    files=input.listFiles();
    outputPath=path + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
  }
 else {
    files=new File[1];
    files[0]=input;
    outputPath=input.getParentFile().getAbsolutePath() + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
  }
  if (new File(outputPath).mkdir()) {
    System.out.println(""String_Node_Str"");
  }
  if (options.getStopFile() != null && options.getStopFile() != ""String_Node_Str"" && options.getStopFile().length() > 3) {
    doStopWords=true;
    String currentLine;
    BufferedReader br=new BufferedReader(new FileReader(new File(options.getStopFile())));
    while ((currentLine=br.readLine()) != null) {
      stopWordsSet.add(currentLine.trim().toLowerCase());
    }
    br.close();
  }
  if (options.isDoStemming()) {
    if (options.getStemLang().equals(""String_Node_Str"")) {
      appendLog(""String_Node_Str"");
      doLangDetect=true;
      System.out.println(System.getProperty(""String_Node_Str""));
      System.out.println(this.getClass().getResource(""String_Node_Str"").getPath());
      try {
        DetectorFactory.loadProfile(""String_Node_Str"");
      }
 catch (      com.cybozu.labs.langdetect.LangDetectException ex) {
        System.out.println(""String_Node_Str"" + ex.getCode());
      }
    }
 else {
      doLangDetect=false;
      stemmer=stemSelect(options.getStemLang());
    }
  }
  for (  File f : files) {
    if (""String_Node_Str"".equals(f.getName()))     continue;
    String inputFile=f.getAbsolutePath();
    System.out.println(""String_Node_Str"" + inputFile);
    if (doLangDetect) {
      try {
        stemmer=findLangStemmer(f);
      }
 catch (      LangDetectException e) {
        e.printStackTrace();
      }
      if (stemmer == null) {
        appendLog(""String_Node_Str"");
      }
    }
    File iFile=new File(inputFile);
    if (!iFile.exists() || iFile.isDirectory()) {
      System.out.println(""String_Node_Str"" + iFile.getAbsolutePath());
      appendLog(""String_Node_Str"" + iFile.getAbsolutePath());
      continue;
    }
    File oFile=new File(outputPath + System.getProperty(""String_Node_Str"") + f.getName());
    BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(iFile),""String_Node_Str""));
    BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(oFile),""String_Node_Str""));
    String linear;
    while ((linear=br.readLine()) != null) {
      if (linear != ""String_Node_Str"") {
        if (options.isDoLowercase())         linear=linear.toLowerCase();
        for (        char c : options.getDelimiters().toCharArray())         linear=linear.replace(c,' ');
        if (doStopWords)         linear=removeStopWords(linear);
        if (options.isDoStemming())         linear=stem(linear);
        bw.write(linear + ""String_Node_Str"");
      }
    }
    System.out.println(outputPath + System.getProperty(""String_Node_Str"") + f.getName());
    br.close();
    bw.close();
  }
  System.out.println(""String_Node_Str"" + outputPath);
  return outputPath;
}",0.9812400635930048
168241,"public double cross_predict(String kVal,String label1,File[] testFiles1,String label2,File[] testFiles2) throws IOException {
  dfMap.clear();
  noOfDocuments=0;
  if (doTfidf) {
    for (    File file : testFiles1) {
      noOfDocuments=noOfDocuments + 1;
      buildDfMap(file);
    }
    for (    File file : testFiles2) {
      noOfDocuments=noOfDocuments + 1;
      buildDfMap(file);
    }
    System.out.println(""String_Node_Str"");
    appendLog(""String_Node_Str"");
  }
  File testFile=new File(intermediatePath + ""String_Node_Str"" + kVal+ ""String_Node_Str"");
  BufferedWriter bw=new BufferedWriter(new FileWriter(testFile));
  for (  File file : testFiles1) {
    bw.write(""String_Node_Str"" + BowToTestString(fileToBow(file)));
    bw.newLine();
  }
  for (  File file : testFiles2) {
    bw.write(""String_Node_Str"" + BowToTestString(fileToBow(file)));
    bw.newLine();
  }
  System.out.println(""String_Node_Str"" + testFile.getAbsolutePath());
  appendLog(""String_Node_Str"" + testFile.getAbsolutePath());
  bw.close();
  System.out.println(""String_Node_Str"" + modelFile.getAbsolutePath());
  appendLog(""String_Node_Str"" + modelFile.getAbsolutePath());
  String[] predict_arguments=new String[3];
  predict_arguments[0]=testFile.getAbsolutePath();
  predict_arguments[1]=modelFile.getAbsolutePath();
  predict_arguments[2]=intermediatePath + ""String_Node_Str"" + kVal+ ""String_Node_Str"";
  double[] result=svm_predict.main(predict_arguments);
  int correct=(int)result[0], total=(int)result[1];
  double pvalue=result[2];
  System.out.println(""String_Node_Str"" + intermediatePath + ""String_Node_Str""+ kVal+ ""String_Node_Str"");
  appendLog(""String_Node_Str"" + intermediatePath + ""String_Node_Str""+ kVal+ ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + (double)correct / total * 100 + ""String_Node_Str"" + correct + ""String_Node_Str"" + total + ""String_Node_Str"");
  appendLog(""String_Node_Str"" + (double)correct / total * 100 + ""String_Node_Str"" + correct + ""String_Node_Str"" + total + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + pvalue);
  NumberFormat nf=NumberFormat.getInstance();
  nf.setMaximumFractionDigits(Integer.MAX_VALUE);
  System.out.println(nf.format(pvalue));
  appendLog(""String_Node_Str"" + (double)correct / total * 100 + ""String_Node_Str"" + correct + ""String_Node_Str"" + total + ""String_Node_Str"");
  appendLog(""String_Node_Str"" + nf.format(pvalue) + ""String_Node_Str"");
  return (double)correct / total * 100;
}","public double cross_predict(String kVal,String label1,File[] testFiles1,String label2,File[] testFiles2) throws IOException {
  dfMap.clear();
  noOfDocuments=0;
  if (doTfidf) {
    for (    File file : testFiles1) {
      noOfDocuments=noOfDocuments + 1;
      buildDfMap(file);
    }
    for (    File file : testFiles2) {
      noOfDocuments=noOfDocuments + 1;
      buildDfMap(file);
    }
    System.out.println(""String_Node_Str"");
    appendLog(""String_Node_Str"");
  }
  File testFile=new File(intermediatePath + ""String_Node_Str"" + kVal+ ""String_Node_Str"");
  BufferedWriter bw=new BufferedWriter(new FileWriter(testFile));
  for (  File file : testFiles1) {
    bw.write(""String_Node_Str"" + BowToTestString(fileToBow(file)));
    bw.newLine();
  }
  for (  File file : testFiles2) {
    bw.write(""String_Node_Str"" + BowToTestString(fileToBow(file)));
    bw.newLine();
  }
  System.out.println(""String_Node_Str"" + testFile.getAbsolutePath());
  appendLog(""String_Node_Str"" + testFile.getAbsolutePath());
  bw.close();
  System.out.println(""String_Node_Str"" + modelFile.getAbsolutePath());
  appendLog(""String_Node_Str"" + modelFile.getAbsolutePath());
  String[] predict_arguments=new String[3];
  predict_arguments[0]=testFile.getAbsolutePath();
  predict_arguments[1]=modelFile.getAbsolutePath();
  predict_arguments[2]=intermediatePath + ""String_Node_Str"" + kVal+ ""String_Node_Str"";
  double[] result=svm_predict.main(predict_arguments);
  int correct=(int)result[0], total=(int)result[1];
  BinomialTest btest=new BinomialTest();
  double p=0.5;
  double pvalue=btest.binomialTest(total,correct,p,AlternativeHypothesis.TWO_SIDED);
  System.out.println(""String_Node_Str"" + intermediatePath + ""String_Node_Str""+ kVal+ ""String_Node_Str"");
  appendLog(""String_Node_Str"" + intermediatePath + ""String_Node_Str""+ kVal+ ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + (double)correct / total * 100 + ""String_Node_Str"" + correct + ""String_Node_Str"" + total + ""String_Node_Str"");
  appendLog(""String_Node_Str"" + (double)correct / total * 100 + ""String_Node_Str"" + correct + ""String_Node_Str"" + total + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + pvalue);
  NumberFormat nf=NumberFormat.getInstance();
  nf.setMaximumFractionDigits(Integer.MAX_VALUE);
  appendLog(""String_Node_Str"" + (double)correct / total * 100 + ""String_Node_Str"" + correct + ""String_Node_Str"" + total + ""String_Node_Str"");
  if (pvalue != 0) {
    if (pvalue > 0.5)     pvalue=Math.abs(pvalue - 1);
    appendLog(""String_Node_Str"" + pvalue + ""String_Node_Str"");
  }
 else   appendLog(""String_Node_Str"");
  return (double)correct / total * 100;
}",0.9391508511054588
168242,"public int predict(String label1,String folderPath1,String label2,String folderPath2) throws IOException {
  int ret=0;
  File folder1=new File(folderPath1);
  File folder2=new File(folderPath2);
  dfMap.clear();
  noOfDocuments=0;
  if (doTfidf) {
    for (    File file : folder1.listFiles()) {
      noOfDocuments=noOfDocuments + 1;
      buildDfMap(file);
    }
    for (    File file : folder2.listFiles()) {
      noOfDocuments=noOfDocuments + 1;
      buildDfMap(file);
    }
    System.out.println(""String_Node_Str"");
    appendLog(""String_Node_Str"");
  }
  File testFile=new File(intermediatePath + ""String_Node_Str"");
  BufferedWriter bw=new BufferedWriter(new FileWriter(testFile));
  for (  File file : folder1.listFiles()) {
    System.out.println(""String_Node_Str"" + file.toString());
    bw.write(""String_Node_Str"" + BowToTestString(fileToBow(file)));
    bw.newLine();
  }
  for (  File file : folder2.listFiles()) {
    System.out.println(""String_Node_Str"" + file.toString());
    bw.write(""String_Node_Str"" + BowToTestString(fileToBow(file)));
    bw.newLine();
  }
  System.out.println(""String_Node_Str"" + testFile.getAbsolutePath());
  appendLog(""String_Node_Str"" + testFile.getAbsolutePath());
  bw.close();
  System.out.println(""String_Node_Str"" + modelFile.getAbsolutePath());
  appendLog(""String_Node_Str"" + modelFile.getAbsolutePath());
  String[] predict_arguments=new String[3];
  predict_arguments[0]=testFile.getAbsolutePath();
  predict_arguments[1]=modelFile.getAbsolutePath();
  predict_arguments[2]=intermediatePath + ""String_Node_Str"";
  double[] result=svm_predict.main(predict_arguments);
  int correct=(int)result[0], total=(int)result[1];
  double pvalue=result[2];
  System.out.println(""String_Node_Str"" + intermediatePath + ""String_Node_Str"");
  appendLog(""String_Node_Str"" + intermediatePath + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + (double)correct / total * 100 + ""String_Node_Str"" + correct + ""String_Node_Str"" + total + ""String_Node_Str"");
  appendLog(""String_Node_Str"" + (double)correct / total * 100 + ""String_Node_Str"" + correct + ""String_Node_Str"" + total + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + pvalue);
  NumberFormat nf=NumberFormat.getInstance();
  nf.setMaximumFractionDigits(Integer.MAX_VALUE);
  System.out.println(nf.format(pvalue));
  appendLog(""String_Node_Str"" + (double)correct / total * 100 + ""String_Node_Str"" + correct + ""String_Node_Str"" + total + ""String_Node_Str"");
  appendLog(""String_Node_Str"" + nf.format(pvalue) + ""String_Node_Str"");
  return ret;
}","public int predict(String label1,String folderPath1,String label2,String folderPath2) throws IOException {
  int ret=0;
  File folder1=new File(folderPath1);
  File folder2=new File(folderPath2);
  dfMap.clear();
  noOfDocuments=0;
  if (doTfidf) {
    for (    File file : folder1.listFiles()) {
      noOfDocuments=noOfDocuments + 1;
      buildDfMap(file);
    }
    for (    File file : folder2.listFiles()) {
      noOfDocuments=noOfDocuments + 1;
      buildDfMap(file);
    }
    System.out.println(""String_Node_Str"");
    appendLog(""String_Node_Str"");
  }
  File testFile=new File(intermediatePath + ""String_Node_Str"");
  BufferedWriter bw=new BufferedWriter(new FileWriter(testFile));
  for (  File file : folder1.listFiles()) {
    System.out.println(""String_Node_Str"" + file.toString());
    bw.write(""String_Node_Str"" + BowToTestString(fileToBow(file)));
    bw.newLine();
  }
  for (  File file : folder2.listFiles()) {
    System.out.println(""String_Node_Str"" + file.toString());
    bw.write(""String_Node_Str"" + BowToTestString(fileToBow(file)));
    bw.newLine();
  }
  System.out.println(""String_Node_Str"" + testFile.getAbsolutePath());
  appendLog(""String_Node_Str"" + testFile.getAbsolutePath());
  bw.close();
  System.out.println(""String_Node_Str"" + modelFile.getAbsolutePath());
  appendLog(""String_Node_Str"" + modelFile.getAbsolutePath());
  String[] predict_arguments=new String[3];
  predict_arguments[0]=testFile.getAbsolutePath();
  predict_arguments[1]=modelFile.getAbsolutePath();
  predict_arguments[2]=intermediatePath + ""String_Node_Str"";
  double[] result=svm_predict.main(predict_arguments);
  int correct=(int)result[0], total=(int)result[1];
  System.out.println(""String_Node_Str"" + intermediatePath + ""String_Node_Str"");
  appendLog(""String_Node_Str"" + intermediatePath + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + (double)correct / total * 100 + ""String_Node_Str"" + correct + ""String_Node_Str"" + total + ""String_Node_Str"");
  appendLog(""String_Node_Str"" + (double)correct / total * 100 + ""String_Node_Str"" + correct + ""String_Node_Str"" + total + ""String_Node_Str"");
  BinomialTest btest=new BinomialTest();
  double p=0.5;
  double pvalue=btest.binomialTest(total,correct,p,AlternativeHypothesis.TWO_SIDED);
  System.out.println(""String_Node_Str"" + pvalue);
  appendLog(""String_Node_Str"" + (double)correct / total * 100 + ""String_Node_Str"" + correct + ""String_Node_Str"" + total + ""String_Node_Str"");
  if (pvalue != 0) {
    if (pvalue > 0.5)     pvalue=Math.abs(pvalue - 1);
    appendLog(""String_Node_Str"" + pvalue + ""String_Node_Str"");
  }
 else   appendLog(""String_Node_Str"");
  return ret;
}",0.9016299137104506
168243,"private static double[] predict(BufferedReader input,DataOutputStream output,svm_model model,int predict_probability) throws IOException {
  int correct=0;
  int total=0;
  double error=0, pvalue=0;
  double sumv=0, sumy=0, sumvv=0, sumyy=0, sumvy=0;
  int svm_type=svm.svm_get_svm_type(model);
  int nr_class=svm.svm_get_nr_class(model);
  double[] prob_estimates=null;
  if (predict_probability == 1) {
    if (svm_type == svm_parameter.EPSILON_SVR || svm_type == svm_parameter.NU_SVR) {
      svm_predict.info(""String_Node_Str"" + svm.svm_get_svr_probability(model) + ""String_Node_Str"");
    }
 else {
      int[] labels=new int[nr_class];
      svm.svm_get_labels(model,labels);
      prob_estimates=new double[nr_class];
      output.writeBytes(""String_Node_Str"");
      for (int j=0; j < nr_class; j++)       output.writeBytes(""String_Node_Str"" + labels[j]);
      output.writeBytes(""String_Node_Str"");
    }
  }
  while (true) {
    String line=input.readLine();
    if (line == null)     break;
    StringTokenizer st=new StringTokenizer(line,""String_Node_Str"");
    double target=atof(st.nextToken());
    int m=st.countTokens() / 2;
    svm_node[] x=new svm_node[m];
    for (int j=0; j < m; j++) {
      x[j]=new svm_node();
      x[j].index=atoi(st.nextToken());
      x[j].value=atof(st.nextToken());
    }
    double v;
    if (predict_probability == 1 && (svm_type == svm_parameter.C_SVC || svm_type == svm_parameter.NU_SVC)) {
      v=svm.svm_predict_probability(model,x,prob_estimates);
      output.writeBytes(v + ""String_Node_Str"");
      for (int j=0; j < nr_class; j++)       output.writeBytes(prob_estimates[j] + ""String_Node_Str"");
      output.writeBytes(""String_Node_Str"");
    }
 else {
      v=svm.svm_predict(model,x);
      output.writeBytes(v + ""String_Node_Str"");
    }
    if (v == target)     ++correct;
    error+=(v - target) * (v - target);
    sumv+=v;
    sumy+=target;
    sumvv+=v * v;
    sumyy+=target * target;
    sumvy+=v * target;
    ++total;
  }
  if (svm_type == svm_parameter.EPSILON_SVR || svm_type == svm_parameter.NU_SVR) {
    svm_predict.info(""String_Node_Str"" + error / total + ""String_Node_Str"");
    svm_predict.info(""String_Node_Str"" + ((total * sumvy - sumv * sumy) * (total * sumvy - sumv * sumy)) / ((total * sumvv - sumv * sumv) * (total * sumyy - sumy * sumy)) + ""String_Node_Str"");
  }
 else {
    svm_predict.info(""String_Node_Str"" + (double)correct / total * 100 + ""String_Node_Str"" + correct + ""String_Node_Str"" + total + ""String_Node_Str"");
    System.out.println(total + ""String_Node_Str"" + correct+ ""String_Node_Str""+ (double)1 / nr_class + ""String_Node_Str"");
    BinomialTest btest=new BinomialTest();
    pvalue=btest.binomialTest(total,correct,(double)1 / nr_class,AlternativeHypothesis.TWO_SIDED);
  }
  return new double[]{correct,total,pvalue};
}","private static double[] predict(BufferedReader input,DataOutputStream output,svm_model model,int predict_probability) throws IOException {
  int correct=0;
  int total=0;
  double error=0, pvalue=0;
  double sumv=0, sumy=0, sumvv=0, sumyy=0, sumvy=0;
  int svm_type=svm.svm_get_svm_type(model);
  int nr_class=svm.svm_get_nr_class(model);
  double[] prob_estimates=null;
  if (predict_probability == 1) {
    if (svm_type == svm_parameter.EPSILON_SVR || svm_type == svm_parameter.NU_SVR) {
      svm_predict.info(""String_Node_Str"" + svm.svm_get_svr_probability(model) + ""String_Node_Str"");
    }
 else {
      int[] labels=new int[nr_class];
      svm.svm_get_labels(model,labels);
      prob_estimates=new double[nr_class];
      output.writeBytes(""String_Node_Str"");
      for (int j=0; j < nr_class; j++)       output.writeBytes(""String_Node_Str"" + labels[j]);
      output.writeBytes(""String_Node_Str"");
    }
  }
  while (true) {
    String line=input.readLine();
    if (line == null)     break;
    StringTokenizer st=new StringTokenizer(line,""String_Node_Str"");
    double target=atof(st.nextToken());
    int m=st.countTokens() / 2;
    svm_node[] x=new svm_node[m];
    for (int j=0; j < m; j++) {
      x[j]=new svm_node();
      x[j].index=atoi(st.nextToken());
      x[j].value=atof(st.nextToken());
    }
    double v;
    if (predict_probability == 1 && (svm_type == svm_parameter.C_SVC || svm_type == svm_parameter.NU_SVC)) {
      v=svm.svm_predict_probability(model,x,prob_estimates);
      output.writeBytes(v + ""String_Node_Str"");
      for (int j=0; j < nr_class; j++)       output.writeBytes(prob_estimates[j] + ""String_Node_Str"");
      output.writeBytes(""String_Node_Str"");
    }
 else {
      v=svm.svm_predict(model,x);
      output.writeBytes(v + ""String_Node_Str"");
    }
    if (v == target)     ++correct;
    error+=(v - target) * (v - target);
    sumv+=v;
    sumy+=target;
    sumvv+=v * v;
    sumyy+=target * target;
    sumvy+=v * target;
    ++total;
  }
  if (svm_type == svm_parameter.EPSILON_SVR || svm_type == svm_parameter.NU_SVR) {
    svm_predict.info(""String_Node_Str"" + error / total + ""String_Node_Str"");
    svm_predict.info(""String_Node_Str"" + ((total * sumvy - sumv * sumy) * (total * sumvy - sumv * sumy)) / ((total * sumvv - sumv * sumv) * (total * sumyy - sumy * sumy)) + ""String_Node_Str"");
  }
 else {
    svm_predict.info(""String_Node_Str"" + (double)correct / total * 100 + ""String_Node_Str"" + correct + ""String_Node_Str"" + total + ""String_Node_Str"");
    System.out.println(total + ""String_Node_Str"" + correct+ ""String_Node_Str""+ (double)1 / nr_class + ""String_Node_Str"");
    BinomialTest btest=new BinomialTest();
    pvalue=btest.binomialTest(total,correct,(double)0.5,AlternativeHypothesis.TWO_SIDED);
  }
  return new double[]{correct,total,pvalue};
}",0.9973390101117616
168244,"@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  parent.setLayout(new GridLayout(3,false));
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Label lblInputFile=new Label(parent,SWT.NONE);
  lblInputFile.setText(""String_Node_Str"");
  txtInput=new Text(parent,SWT.BORDER);
  GridData gd_txtInput=new GridData(SWT.FILL,SWT.CENTER,true,false,1,1);
  gd_txtInput.widthHint=335;
  txtInput.setLayoutData(gd_txtInput);
  Button button=new Button(parent,SWT.NONE);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      txtInput.setText(""String_Node_Str"");
      FileDialog fd=new FileDialog(shell,SWT.MULTI);
      fd.open();
      String[] iFiles=fd.getFileNames();
      String dir=fd.getFilterPath();
      int i=0;
      inputFiles=new String[iFiles.length];
      for (      String file : iFiles) {
        txtInput.append(dir + ""String_Node_Str"" + file+ ""String_Node_Str"");
        inputFiles[i++]=dir + ""String_Node_Str"" + file;
      }
    }
  }
);
  button.setText(""String_Node_Str"");
  Label lblStopWords=new Label(parent,SWT.NONE);
  lblStopWords.setText(""String_Node_Str"");
  txtStopWords=new Text(parent,SWT.BORDER);
  txtStopWords.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  Button button_2=new Button(parent,SWT.NONE);
  button_2.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      FileDialog sfd=new FileDialog(shell,SWT.OPEN);
      sfd.open();
      stopwordsFile=sfd.getFilterPath() + ""String_Node_Str"" + sfd.getFileName();
      if (stopwordsFile.length() < 2) {
        stopwordsFile=""String_Node_Str"";
      }
 else {
        System.out.println(stopwordsFile);
      }
      txtStopWords.setText(stopwordsFile);
    }
  }
);
  button_2.setText(""String_Node_Str"");
  Label lblOutputFile=new Label(parent,SWT.NONE);
  lblOutputFile.setText(""String_Node_Str"");
  txtOutput=new Text(parent,SWT.BORDER);
  GridData gd_txtOutput=new GridData(SWT.FILL,SWT.CENTER,true,false,1,1);
  gd_txtOutput.widthHint=335;
  txtOutput.setLayoutData(gd_txtOutput);
  Button button_1=new Button(parent,SWT.NONE);
  button_1.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog od=new DirectoryDialog(shell);
      od.open();
      String oDirectory=od.getFilterPath();
      txtOutput.setText(oDirectory);
      outputDirectory=oDirectory;
    }
  }
);
  button_1.setText(""String_Node_Str"");
  Label lblSuffix=new Label(parent,SWT.NONE);
  lblSuffix.setText(""String_Node_Str"");
  txtSuffix=new Text(parent,SWT.BORDER);
  txtSuffix.setText(""String_Node_Str"");
  GridData gd_txtSuffix=new GridData(SWT.FILL,SWT.CENTER,true,false,1,1);
  gd_txtSuffix.widthHint=335;
  txtSuffix.setLayoutData(gd_txtSuffix);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Group grpPreprocessing=new Group(parent,SWT.NONE);
  GridData gd_grpPreprocessing=new GridData(SWT.LEFT,SWT.CENTER,false,false,3,1);
  gd_grpPreprocessing.heightHint=118;
  gd_grpPreprocessing.widthHint=429;
  grpPreprocessing.setLayoutData(gd_grpPreprocessing);
  grpPreprocessing.setText(""String_Node_Str"");
  Label lblNewLabel=new Label(grpPreprocessing,SWT.NONE);
  lblNewLabel.setBounds(10,32,55,15);
  lblNewLabel.setText(""String_Node_Str"");
  txtDelimiters=new Text(grpPreprocessing,SWT.BORDER);
  txtDelimiters.setText(""String_Node_Str"");
  txtDelimiters.setBounds(176,26,249,21);
  final Combo cmbStemLang=new Combo(grpPreprocessing,SWT.NONE);
  cmbStemLang.setEnabled(false);
  cmbStemLang.setItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  cmbStemLang.setBounds(275,63,150,23);
  cmbStemLang.setText(""String_Node_Str"");
  final Button btnStemming=new Button(grpPreprocessing,SWT.CHECK);
  btnStemming.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (btnStemming.getSelection())       cmbStemLang.setEnabled(true);
 else       cmbStemLang.setEnabled(false);
    }
  }
);
  btnStemming.setText(""String_Node_Str"");
  btnStemming.setBounds(176,65,93,16);
  final Button btnDoLowercase=new Button(grpPreprocessing,SWT.CHECK);
  btnDoLowercase.setBounds(10,65,143,16);
  btnDoLowercase.setText(""String_Node_Str"");
  Button btnPreprocess=new Button(grpPreprocessing,SWT.NONE);
  btnPreprocess.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      Preprocess pp=new Preprocess(inputFiles,stopwordsFile,outputDirectory,txtSuffix.getText(),txtDelimiters.getText(),btnDoLowercase.getSelection(),btnStemming.getSelection(),cmbStemLang.getText());
      IEclipseContext iEclipseContext=context;
      ContextInjectionFactory.inject(pp,iEclipseContext);
      try {
        long startTime=System.currentTimeMillis();
        int result=pp.doPreprocess();
        if (result == -1 || result == -2 || result == -3)         appendLog(""String_Node_Str"");
 else         appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
      }
 catch (      Exception ioe) {
        ioe.printStackTrace();
      }
    }
  }
);
  btnPreprocess.setBounds(10,101,75,25);
  btnPreprocess.setText(""String_Node_Str"");
}","@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  parent.setLayout(new GridLayout(3,false));
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Label lblInputFile=new Label(parent,SWT.NONE);
  lblInputFile.setText(""String_Node_Str"");
  txtInput=new Text(parent,SWT.BORDER);
  GridData gd_txtInput=new GridData(SWT.FILL,SWT.CENTER,true,false,1,1);
  gd_txtInput.widthHint=335;
  txtInput.setLayoutData(gd_txtInput);
  Button button=new Button(parent,SWT.NONE);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      txtInput.setText(""String_Node_Str"");
      FileDialog fd=new FileDialog(shell,SWT.MULTI);
      fd.open();
      String[] iFiles=fd.getFileNames();
      String dir=fd.getFilterPath();
      int i=0;
      inputFiles=new String[iFiles.length];
      for (      String file : iFiles) {
        txtInput.append(dir + System.getProperty(""String_Node_Str"") + file+ ""String_Node_Str"");
        inputFiles[i++]=dir + System.getProperty(""String_Node_Str"") + file;
      }
    }
  }
);
  button.setText(""String_Node_Str"");
  Label lblStopWords=new Label(parent,SWT.NONE);
  lblStopWords.setText(""String_Node_Str"");
  txtStopWords=new Text(parent,SWT.BORDER);
  txtStopWords.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  Button button_2=new Button(parent,SWT.NONE);
  button_2.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      FileDialog sfd=new FileDialog(shell,SWT.OPEN);
      sfd.open();
      stopwordsFile=sfd.getFilterPath() + System.getProperty(""String_Node_Str"") + sfd.getFileName();
      if (stopwordsFile.length() < 2) {
        stopwordsFile=""String_Node_Str"";
      }
 else {
        System.out.println(stopwordsFile);
      }
      txtStopWords.setText(stopwordsFile);
    }
  }
);
  button_2.setText(""String_Node_Str"");
  Label lblOutputFile=new Label(parent,SWT.NONE);
  lblOutputFile.setText(""String_Node_Str"");
  txtOutput=new Text(parent,SWT.BORDER);
  GridData gd_txtOutput=new GridData(SWT.FILL,SWT.CENTER,true,false,1,1);
  gd_txtOutput.widthHint=335;
  txtOutput.setLayoutData(gd_txtOutput);
  Button button_1=new Button(parent,SWT.NONE);
  button_1.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog od=new DirectoryDialog(shell);
      od.open();
      String oDirectory=od.getFilterPath();
      txtOutput.setText(oDirectory);
      outputDirectory=oDirectory;
    }
  }
);
  button_1.setText(""String_Node_Str"");
  Label lblSuffix=new Label(parent,SWT.NONE);
  lblSuffix.setText(""String_Node_Str"");
  txtSuffix=new Text(parent,SWT.BORDER);
  txtSuffix.setText(""String_Node_Str"");
  GridData gd_txtSuffix=new GridData(SWT.FILL,SWT.CENTER,true,false,1,1);
  gd_txtSuffix.widthHint=335;
  txtSuffix.setLayoutData(gd_txtSuffix);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  new Label(parent,SWT.NONE);
  Group grpPreprocessing=new Group(parent,SWT.NONE);
  GridData gd_grpPreprocessing=new GridData(SWT.LEFT,SWT.CENTER,false,false,3,1);
  gd_grpPreprocessing.heightHint=118;
  gd_grpPreprocessing.widthHint=429;
  grpPreprocessing.setLayoutData(gd_grpPreprocessing);
  grpPreprocessing.setText(""String_Node_Str"");
  Label lblNewLabel=new Label(grpPreprocessing,SWT.NONE);
  lblNewLabel.setBounds(10,32,55,15);
  lblNewLabel.setText(""String_Node_Str"");
  txtDelimiters=new Text(grpPreprocessing,SWT.BORDER);
  txtDelimiters.setText(""String_Node_Str"");
  txtDelimiters.setBounds(176,26,249,21);
  final Combo cmbStemLang=new Combo(grpPreprocessing,SWT.NONE);
  cmbStemLang.setEnabled(false);
  cmbStemLang.setItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  cmbStemLang.setBounds(275,63,150,23);
  cmbStemLang.setText(""String_Node_Str"");
  final Button btnStemming=new Button(grpPreprocessing,SWT.CHECK);
  btnStemming.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (btnStemming.getSelection())       cmbStemLang.setEnabled(true);
 else       cmbStemLang.setEnabled(false);
    }
  }
);
  btnStemming.setText(""String_Node_Str"");
  btnStemming.setBounds(176,65,93,16);
  final Button btnDoLowercase=new Button(grpPreprocessing,SWT.CHECK);
  btnDoLowercase.setBounds(10,65,143,16);
  btnDoLowercase.setText(""String_Node_Str"");
  Button btnPreprocess=new Button(grpPreprocessing,SWT.NONE);
  btnPreprocess.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      Preprocess pp=new Preprocess(inputFiles,stopwordsFile,outputDirectory,txtSuffix.getText(),txtDelimiters.getText(),btnDoLowercase.getSelection(),btnStemming.getSelection(),cmbStemLang.getText());
      IEclipseContext iEclipseContext=context;
      ContextInjectionFactory.inject(pp,iEclipseContext);
      try {
        long startTime=System.currentTimeMillis();
        int result=pp.doPreprocess();
        if (result == -1 || result == -2 || result == -3)         appendLog(""String_Node_Str"");
 else         appendLog(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
      }
 catch (      Exception ioe) {
        ioe.printStackTrace();
      }
    }
  }
);
  btnPreprocess.setBounds(10,101,75,25);
  btnPreprocess.setText(""String_Node_Str"");
}",0.985373781148429
168245,"public int doPreprocess() throws IOException, LangDetectException {
  if (stopwordsFile != null && !stopwordsFile.isEmpty()) {
    File sFile=new File(stopwordsFile);
    if (!sFile.exists() || sFile.isDirectory()) {
      System.out.println(""String_Node_Str"" + sFile.getAbsolutePath());
      appendLog(""String_Node_Str"" + sFile.getAbsolutePath());
      return -2;
    }
 else {
      doStopWords=true;
      String currentLine;
      BufferedReader br=new BufferedReader(new FileReader(sFile));
      while ((currentLine=br.readLine()) != null) {
        stopWordsSet.add(currentLine.trim().toLowerCase());
      }
      br.close();
    }
  }
  if (doStemming) {
    if (stemLang.equals(""String_Node_Str"")) {
      appendLog(""String_Node_Str"");
      doLangDetect=true;
      System.out.println(System.getProperty(""String_Node_Str""));
      System.out.println(this.getClass().getResource(""String_Node_Str"").getPath());
      try {
        DetectorFactory.loadProfile(""String_Node_Str"");
      }
 catch (      com.cybozu.labs.langdetect.LangDetectException ex) {
        System.out.println(""String_Node_Str"" + ex.getCode());
      }
    }
 else {
      doLangDetect=false;
      stemmer=stemSelect(stemLang);
    }
  }
  for (  String inputFile : inputFiles) {
    System.out.println(""String_Node_Str"" + inputFile);
    appendLog(""String_Node_Str"" + inputFile);
    File iFile=new File(inputFile);
    if (!iFile.exists() || iFile.isDirectory()) {
      System.out.println(""String_Node_Str"" + iFile.getAbsolutePath());
      appendLog(""String_Node_Str"" + iFile.getAbsolutePath());
      return -1;
    }
    int dindex=inputFile.lastIndexOf('.');
    int findex=inputFile.lastIndexOf('\\');
    String fname=inputFile.substring(findex,dindex);
    String ext=inputFile.substring(dindex + 1);
    File oFile=new File(outputPath + ""String_Node_Str"" + fname+ suffix+ ""String_Node_Str""+ ext);
    System.out.println(""String_Node_Str"" + oFile.getAbsolutePath());
    appendLog(""String_Node_Str"" + oFile.getAbsolutePath());
    if (doLangDetect) {
      stemmer=findLangStemmer(iFile);
      if (stemmer == null) {
        appendLog(""String_Node_Str"");
        return -3;
      }
    }
    BufferedReader br=new BufferedReader(new FileReader(iFile));
    BufferedWriter bw=new BufferedWriter(new FileWriter(oFile));
    String currentLine;
    while ((currentLine=br.readLine()) != null) {
      for (      char c : delimiters.toCharArray())       currentLine=currentLine.replace(c,' ');
      if (doLowercase)       currentLine=currentLine.toLowerCase();
      if (doStopWords)       currentLine=removeStopWords(currentLine);
      if (doStemming)       currentLine=stem(currentLine);
      bw.write(currentLine);
      bw.newLine();
    }
    br.close();
    bw.close();
  }
  return 1;
}","public int doPreprocess() throws IOException, LangDetectException {
  if (stopwordsFile != null && !stopwordsFile.isEmpty()) {
    File sFile=new File(stopwordsFile);
    if (!sFile.exists() || sFile.isDirectory()) {
      System.out.println(""String_Node_Str"" + sFile.getAbsolutePath());
      appendLog(""String_Node_Str"" + sFile.getAbsolutePath());
      return -2;
    }
 else {
      doStopWords=true;
      String currentLine;
      BufferedReader br=new BufferedReader(new FileReader(sFile));
      while ((currentLine=br.readLine()) != null) {
        stopWordsSet.add(currentLine.trim().toLowerCase());
      }
      br.close();
    }
  }
  if (doStemming) {
    if (stemLang.equals(""String_Node_Str"")) {
      appendLog(""String_Node_Str"");
      doLangDetect=true;
      System.out.println(System.getProperty(""String_Node_Str""));
      System.out.println(this.getClass().getResource(""String_Node_Str"").getPath());
      try {
        DetectorFactory.loadProfile(""String_Node_Str"");
      }
 catch (      com.cybozu.labs.langdetect.LangDetectException ex) {
        System.out.println(""String_Node_Str"" + ex.getCode());
      }
    }
 else {
      doLangDetect=false;
      stemmer=stemSelect(stemLang);
    }
  }
  for (  String inputFile : inputFiles) {
    System.out.println(""String_Node_Str"" + inputFile);
    appendLog(""String_Node_Str"" + inputFile);
    File iFile=new File(inputFile);
    if (!iFile.exists() || iFile.isDirectory()) {
      System.out.println(""String_Node_Str"" + iFile.getAbsolutePath());
      appendLog(""String_Node_Str"" + iFile.getAbsolutePath());
      return -1;
    }
    int dindex=inputFile.lastIndexOf('.');
    int findex=inputFile.lastIndexOf(System.getProperty(""String_Node_Str""));
    String fname=inputFile.substring(findex,dindex);
    String ext=inputFile.substring(dindex + 1);
    File oFile=new File(outputPath + System.getProperty(""String_Node_Str"") + fname+ suffix+ ""String_Node_Str""+ ext);
    System.out.println(""String_Node_Str"" + oFile.getAbsolutePath());
    appendLog(""String_Node_Str"" + oFile.getAbsolutePath());
    if (doLangDetect) {
      stemmer=findLangStemmer(iFile);
      if (stemmer == null) {
        appendLog(""String_Node_Str"");
        return -3;
      }
    }
    BufferedReader br=new BufferedReader(new FileReader(iFile));
    BufferedWriter bw=new BufferedWriter(new FileWriter(oFile));
    String currentLine;
    while ((currentLine=br.readLine()) != null) {
      for (      char c : delimiters.toCharArray())       currentLine=currentLine.replace(c,' ');
      if (doLowercase)       currentLine=currentLine.toLowerCase();
      if (doStopWords)       currentLine=removeStopWords(currentLine);
      if (doStemming)       currentLine=stem(currentLine);
      bw.write(currentLine);
      bw.newLine();
    }
    br.close();
    bw.close();
  }
  return 1;
}",0.9891555555555556
168246,"@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  parent.setLayout(new GridLayout(7,false));
  Group grpInputSettings=new Group(parent,SWT.NONE);
  grpInputSettings.setText(""String_Node_Str"");
  GridData gd_grpInputSettings=new GridData(SWT.LEFT,SWT.CENTER,false,false,7,1);
  gd_grpInputSettings.heightHint=329;
  gd_grpInputSettings.widthHint=436;
  grpInputSettings.setLayoutData(gd_grpInputSettings);
  Composite composite=new Composite(grpInputSettings,SWT.NONE);
  composite.setBounds(10,20,429,180);
  Label lblLabel_1=new Label(composite,SWT.NONE);
  lblLabel_1.setBounds(0,35,36,15);
  lblLabel_1.setText(""String_Node_Str"");
  Label lblLabel=new Label(composite,SWT.NONE);
  lblLabel.setBounds(0,5,36,15);
  lblLabel.setText(""String_Node_Str"");
  txtLabel1=new Text(composite,SWT.BORDER);
  txtLabel1.setText(""String_Node_Str"");
  txtLabel1.setBounds(66,2,157,21);
  txtLabel2=new Text(composite,SWT.BORDER);
  txtLabel2.setText(""String_Node_Str"");
  txtLabel2.setBounds(66,32,157,21);
  Label lblFolder=new Label(composite,SWT.NONE);
  lblFolder.setBounds(228,5,24,15);
  lblFolder.setText(""String_Node_Str"");
  Label lblFolder_1=new Label(composite,SWT.NONE);
  lblFolder_1.setBounds(228,35,24,15);
  lblFolder_1.setText(""String_Node_Str"");
  txtFolderPath1=new Text(composite,SWT.BORDER);
  txtFolderPath1.setBounds(257,2,143,21);
  txtFolderPath2=new Text(composite,SWT.BORDER);
  txtFolderPath2.setBounds(257,32,143,21);
  Button button=new Button(composite,SWT.NONE);
  button.setBounds(403,0,21,25);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtFolderPath1.setText(fp1Directory);
    }
  }
);
  button.setText(""String_Node_Str"");
  Button button_1=new Button(composite,SWT.NONE);
  button_1.setBounds(403,30,21,25);
  button_1.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd2=new DirectoryDialog(shell);
      fd2.open();
      String fp2Directory=fd2.getFilterPath();
      txtFolderPath2.setText(fp2Directory);
    }
  }
);
  button_1.setText(""String_Node_Str"");
  Group grpPreprocessingOptions=new Group(composite,SWT.NONE);
  grpPreprocessingOptions.setBounds(0,56,426,114);
  grpPreprocessingOptions.setText(""String_Node_Str"");
  txtStopWords=new Text(grpPreprocessingOptions,SWT.BORDER);
  txtStopWords.setBounds(178,54,195,21);
  final Button btnLowercase=new Button(grpPreprocessingOptions,SWT.CHECK);
  btnLowercase.setBounds(25,90,140,16);
  btnLowercase.setText(""String_Node_Str"");
  Label lblDelimiters=new Label(grpPreprocessingOptions,SWT.NONE);
  lblDelimiters.setBounds(25,25,55,15);
  lblDelimiters.setText(""String_Node_Str"");
  txtDelimiters=new Text(grpPreprocessingOptions,SWT.BORDER);
  txtDelimiters.setText(""String_Node_Str"");
  txtDelimiters.setBounds(178,22,195,21);
  Button button_5=new Button(grpPreprocessingOptions,SWT.NONE);
  button_5.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      txtStopWords.setText(""String_Node_Str"");
      FileDialog fd=new FileDialog(shell,SWT.OPEN);
      fd.open();
      String oFile=fd.getFileName();
      String dir=fd.getFilterPath();
      txtStopWords.setText(dir + ""String_Node_Str"" + oFile);
    }
  }
);
  button_5.setBounds(375,52,21,25);
  button_5.setText(""String_Node_Str"");
  Label lblStopWordsFile=new Label(grpPreprocessingOptions,SWT.NONE);
  lblStopWordsFile.setBounds(25,59,98,15);
  lblStopWordsFile.setText(""String_Node_Str"");
  Button btnTermFreqencyTf=new Button(grpInputSettings,SWT.RADIO);
  btnTermFreqencyTf.setSelection(true);
  btnTermFreqencyTf.setBounds(10,219,199,16);
  btnTermFreqencyTf.setText(""String_Node_Str"");
  final Button btnTfidf=new Button(grpInputSettings,SWT.RADIO);
  btnTfidf.setBounds(238,219,90,16);
  btnTfidf.setText(""String_Node_Str"");
  final Button btnLoadModel=new Button(grpInputSettings,SWT.CHECK);
  btnLoadModel.setBounds(11,253,168,16);
  btnLoadModel.setText(""String_Node_Str"");
  txtModelFilePath=new Text(grpInputSettings,SWT.BORDER);
  txtModelFilePath.setBounds(185,248,199,21);
  Button button_8=new Button(grpInputSettings,SWT.NONE);
  button_8.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      txtModelFilePath.setText(""String_Node_Str"");
      FileDialog fd=new FileDialog(shell,SWT.OPEN);
      fd.open();
      String oFile=fd.getFileName();
      String dir=fd.getFilterPath();
      txtModelFilePath.setText(dir + ""String_Node_Str"" + oFile);
    }
  }
);
  button_8.setBounds(387,246,20,25);
  button_8.setText(""String_Node_Str"");
  txtHashmapPath=new Text(grpInputSettings,SWT.BORDER);
  txtHashmapPath.setBounds(185,296,199,21);
  Button button_9=new Button(grpInputSettings,SWT.NONE);
  button_9.setBounds(387,294,20,25);
  button_9.setText(""String_Node_Str"");
  final CTabFolder tabFolder=new CTabFolder(parent,SWT.BORDER | SWT.SINGLE);
  tabFolder.setSingle(false);
  tabFolder.setSimple(false);
  GridData gd_tabFolder=new GridData(SWT.LEFT,SWT.CENTER,false,false,7,1);
  gd_tabFolder.heightHint=214;
  gd_tabFolder.widthHint=429;
  tabFolder.setLayoutData(gd_tabFolder);
  tabFolder.setSelectionBackground(Display.getCurrent().getSystemColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND_GRADIENT));
  final CTabItem tbtmTesting=new CTabItem(tabFolder,SWT.NONE);
  tbtmTesting.setText(""String_Node_Str"");
  Group grpTestMode=new Group(tabFolder,SWT.NONE);
  tbtmTesting.setControl(grpTestMode);
  Label lblTestFolder=new Label(grpTestMode,SWT.NONE);
  lblTestFolder.setBounds(34,38,95,15);
  lblTestFolder.setText(""String_Node_Str"");
  txtTestFolder1=new Text(grpTestMode,SWT.BORDER);
  txtTestFolder1.setBounds(135,32,220,21);
  Label lblTestFolder_1=new Label(grpTestMode,SWT.NONE);
  lblTestFolder_1.setBounds(34,64,95,15);
  lblTestFolder_1.setText(""String_Node_Str"");
  txtTestFolder2=new Text(grpTestMode,SWT.BORDER);
  txtTestFolder2.setBounds(135,61,220,21);
  Button button_3=new Button(grpTestMode,SWT.NONE);
  button_3.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtTestFolder1.setText(fp1Directory);
    }
  }
);
  button_3.setBounds(359,30,21,25);
  button_3.setText(""String_Node_Str"");
  Button button_4=new Button(grpTestMode,SWT.NONE);
  button_4.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd2=new DirectoryDialog(shell);
      fd2.open();
      String fp2Directory=fd2.getFilterPath();
      txtTestFolder2.setText(fp2Directory);
    }
  }
);
  button_4.setBounds(359,59,21,25);
  button_4.setText(""String_Node_Str"");
  Label lblKfoldCrossValidation=new Label(grpTestMode,SWT.NONE);
  lblKfoldCrossValidation.setBounds(34,118,46,15);
  lblKfoldCrossValidation.setText(""String_Node_Str"");
  Label label=new Label(grpTestMode,SWT.NONE);
  label.setText(""String_Node_Str"");
  label.setBounds(10,154,59,15);
  txtkVal=new Text(grpTestMode,SWT.BORDER);
  txtkVal.setBounds(135,115,220,21);
  txtOutputFile=new Text(grpTestMode,SWT.BORDER);
  txtOutputFile.setBounds(135,151,220,21);
  Button button_2=new Button(grpTestMode,SWT.NONE);
  button_2.setBounds(359,149,21,25);
  button_2.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      txtOutputFile.setText(""String_Node_Str"");
      FileDialog fd=new FileDialog(shell,SWT.SAVE);
      fd.open();
      String oFile=fd.getFileName();
      String dir=fd.getFilterPath();
      txtOutputFile.setText(dir + ""String_Node_Str"" + oFile);
    }
  }
);
  button_2.setText(""String_Node_Str"");
  final Button btnCrossVal=new Button(grpTestMode,SWT.RADIO);
  btnCrossVal.setBounds(10,94,149,16);
  btnCrossVal.setText(""String_Node_Str"");
  Button btnTrain=new Button(grpTestMode,SWT.NONE);
  btnTrain.setBounds(10,175,52,25);
  btnTrain.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      long currentTime=System.currentTimeMillis();
      try {
        SvmClassifier svm=new SvmClassifier(btnLowercase.getSelection(),txtDelimiters.getText(),txtStopWords.getText());
        IEclipseContext iEclipseContext=context;
        ContextInjectionFactory.inject(svm,iEclipseContext);
        int selection=tabFolder.getSelectionIndex();
        if (btnLoadModel.getSelection())         svm.loadPretrainedModel(txtLabel1.getText(),txtLabel2.getText(),txtModelFilePath.getText(),txtHashmapPath.getText());
 else         svm.train(txtLabel1.getText(),txtFolderPath1.getText(),txtLabel2.getText(),txtFolderPath2.getText(),btnTfidf.getSelection(),btnCrossVal.getSelection(),txtkVal.getText());
        if (!btnCrossVal.getSelection()) {
          if (selection == 0) {
            System.out.println(""String_Node_Str"");
            appendLog(""String_Node_Str"");
            svm.predict(txtLabel1.getText(),txtFolderPath1.getText(),txtLabel2.getText(),txtFolderPath2.getText());
            svm.output(txtLabel1.getText(),txtTestFolder1.getText(),txtLabel2.getText(),txtTestFolder2.getText(),txtOutputFile.getText());
          }
 else           if (selection == 1) {
            System.out.println(""String_Node_Str"");
            appendLog(""String_Node_Str"");
          }
        }
        System.out.println(""String_Node_Str"" + ((System.currentTimeMillis() - currentTime) / (double)1000) + ""String_Node_Str"");
        appendLog(""String_Node_Str"" + ((System.currentTimeMillis() - currentTime) / (double)1000) + ""String_Node_Str"");
      }
 catch (      IOException|ClassNotFoundException ie) {
        ie.printStackTrace();
      }
    }
  }
);
  btnTrain.setText(""String_Node_Str"");
  Button btnSeparateTestData=new Button(grpTestMode,SWT.RADIO);
  btnSeparateTestData.setSelection(true);
  btnSeparateTestData.setBounds(10,10,119,16);
  btnSeparateTestData.setText(""String_Node_Str"");
  tabFolder.setSelection(0);
  CTabItem tbtmClassify=new CTabItem(tabFolder,SWT.NONE);
  tbtmClassify.setText(""String_Node_Str"");
  Group grpClassifyMode=new Group(tabFolder,SWT.NONE);
  tbtmClassify.setControl(grpClassifyMode);
  grpClassifyMode.setText(""String_Node_Str"");
  Label lblFolder_2=new Label(grpClassifyMode,SWT.NONE);
  lblFolder_2.setBounds(10,32,97,15);
  lblFolder_2.setText(""String_Node_Str"");
  txtClassifyInput=new Text(grpClassifyMode,SWT.BORDER);
  txtClassifyInput.setBounds(135,26,234,21);
  Label label_1=new Label(grpClassifyMode,SWT.NONE);
  label_1.setText(""String_Node_Str"");
  label_1.setBounds(10,66,59,15);
  txtClassifyOutput=new Text(grpClassifyMode,SWT.BORDER);
  txtClassifyOutput.setBounds(135,63,234,21);
  Button button_6=new Button(grpClassifyMode,SWT.NONE);
  button_6.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      txtClassifyOutput.setText(""String_Node_Str"");
      FileDialog fd=new FileDialog(shell,SWT.SAVE);
      fd.open();
      String oFile=fd.getFileName();
      String dir=fd.getFilterPath();
      txtClassifyOutput.setText(dir + ""String_Node_Str"" + oFile);
    }
  }
);
  button_6.setText(""String_Node_Str"");
  button_6.setBounds(370,61,21,25);
  Button btnClassify=new Button(grpClassifyMode,SWT.NONE);
  btnClassify.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      long currentTime=System.currentTimeMillis();
      try {
        SvmClassifier svm=new SvmClassifier(btnLowercase.getSelection(),txtDelimiters.getText(),txtStopWords.getText());
        IEclipseContext iEclipseContext=context;
        ContextInjectionFactory.inject(svm,iEclipseContext);
        int selection=tabFolder.getSelectionIndex();
        if (btnLoadModel.getSelection())         svm.loadPretrainedModel(txtLabel1.getText(),txtLabel2.getText(),txtModelFilePath.getText(),txtHashmapPath.getText());
 else         svm.train(txtLabel1.getText(),txtFolderPath1.getText(),txtLabel2.getText(),txtFolderPath2.getText(),btnTfidf.getSelection(),false,null);
        if (selection == 0) {
          System.out.println(""String_Node_Str"");
          appendLog(""String_Node_Str"");
          svm.predict(txtLabel1.getText(),txtFolderPath1.getText(),txtLabel2.getText(),txtFolderPath2.getText());
          svm.output(txtLabel1.getText(),txtTestFolder1.getText(),txtLabel2.getText(),txtTestFolder2.getText(),txtOutputFile.getText());
        }
 else         if (selection == 1) {
          System.out.println(""String_Node_Str"");
          appendLog(""String_Node_Str"");
          svm.classify(txtLabel1.getText(),txtLabel2.getText(),txtClassifyInput.getText());
          svm.outputPredictedOnly(txtLabel1.getText(),txtLabel2.getText(),txtClassifyInput.getText(),txtClassifyOutput.getText());
        }
        System.out.println(""String_Node_Str"" + ((System.currentTimeMillis() - currentTime) / (double)1000) + ""String_Node_Str"");
        appendLog(""String_Node_Str"" + ((System.currentTimeMillis() - currentTime) / (double)1000) + ""String_Node_Str"");
      }
 catch (      IOException|ClassNotFoundException ie) {
        ie.printStackTrace();
      }
    }
  }
);
  btnClassify.setText(""String_Node_Str"");
  btnClassify.setBounds(10,95,52,25);
  Button button_7=new Button(grpClassifyMode,SWT.NONE);
  button_7.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtClassifyInput.setText(fp1Directory);
    }
  }
);
  button_7.setBounds(370,24,21,25);
  button_7.setText(""String_Node_Str"");
}","@PostConstruct public void postConstruct(Composite parent){
  final Shell shell=parent.getShell();
  parent.setLayout(new GridLayout(7,false));
  Group grpInputSettings=new Group(parent,SWT.NONE);
  grpInputSettings.setText(""String_Node_Str"");
  GridData gd_grpInputSettings=new GridData(SWT.LEFT,SWT.CENTER,false,false,7,1);
  gd_grpInputSettings.heightHint=329;
  gd_grpInputSettings.widthHint=436;
  grpInputSettings.setLayoutData(gd_grpInputSettings);
  Composite composite=new Composite(grpInputSettings,SWT.NONE);
  composite.setBounds(10,20,429,180);
  Label lblLabel_1=new Label(composite,SWT.NONE);
  lblLabel_1.setBounds(0,35,36,15);
  lblLabel_1.setText(""String_Node_Str"");
  Label lblLabel=new Label(composite,SWT.NONE);
  lblLabel.setBounds(0,5,36,15);
  lblLabel.setText(""String_Node_Str"");
  txtLabel1=new Text(composite,SWT.BORDER);
  txtLabel1.setText(""String_Node_Str"");
  txtLabel1.setBounds(66,2,157,21);
  txtLabel2=new Text(composite,SWT.BORDER);
  txtLabel2.setText(""String_Node_Str"");
  txtLabel2.setBounds(66,32,157,21);
  Label lblFolder=new Label(composite,SWT.NONE);
  lblFolder.setBounds(228,5,24,15);
  lblFolder.setText(""String_Node_Str"");
  Label lblFolder_1=new Label(composite,SWT.NONE);
  lblFolder_1.setBounds(228,35,24,15);
  lblFolder_1.setText(""String_Node_Str"");
  txtFolderPath1=new Text(composite,SWT.BORDER);
  txtFolderPath1.setBounds(257,2,143,21);
  txtFolderPath2=new Text(composite,SWT.BORDER);
  txtFolderPath2.setBounds(257,32,143,21);
  Button button=new Button(composite,SWT.NONE);
  button.setBounds(403,0,21,25);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtFolderPath1.setText(fp1Directory);
    }
  }
);
  button.setText(""String_Node_Str"");
  Button button_1=new Button(composite,SWT.NONE);
  button_1.setBounds(403,30,21,25);
  button_1.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd2=new DirectoryDialog(shell);
      fd2.open();
      String fp2Directory=fd2.getFilterPath();
      txtFolderPath2.setText(fp2Directory);
    }
  }
);
  button_1.setText(""String_Node_Str"");
  Group grpPreprocessingOptions=new Group(composite,SWT.NONE);
  grpPreprocessingOptions.setBounds(0,56,426,114);
  grpPreprocessingOptions.setText(""String_Node_Str"");
  txtStopWords=new Text(grpPreprocessingOptions,SWT.BORDER);
  txtStopWords.setBounds(178,54,195,21);
  final Button btnLowercase=new Button(grpPreprocessingOptions,SWT.CHECK);
  btnLowercase.setBounds(25,90,140,16);
  btnLowercase.setText(""String_Node_Str"");
  Label lblDelimiters=new Label(grpPreprocessingOptions,SWT.NONE);
  lblDelimiters.setBounds(25,25,55,15);
  lblDelimiters.setText(""String_Node_Str"");
  txtDelimiters=new Text(grpPreprocessingOptions,SWT.BORDER);
  txtDelimiters.setText(""String_Node_Str"");
  txtDelimiters.setBounds(178,22,195,21);
  Button button_5=new Button(grpPreprocessingOptions,SWT.NONE);
  button_5.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      txtStopWords.setText(""String_Node_Str"");
      FileDialog fd=new FileDialog(shell,SWT.OPEN);
      fd.open();
      String oFile=fd.getFileName();
      String dir=fd.getFilterPath();
      txtStopWords.setText(dir + System.getProperty(""String_Node_Str"") + oFile);
    }
  }
);
  button_5.setBounds(375,52,21,25);
  button_5.setText(""String_Node_Str"");
  Label lblStopWordsFile=new Label(grpPreprocessingOptions,SWT.NONE);
  lblStopWordsFile.setBounds(25,59,98,15);
  lblStopWordsFile.setText(""String_Node_Str"");
  Button btnTermFreqencyTf=new Button(grpInputSettings,SWT.RADIO);
  btnTermFreqencyTf.setSelection(true);
  btnTermFreqencyTf.setBounds(10,219,199,16);
  btnTermFreqencyTf.setText(""String_Node_Str"");
  final Button btnTfidf=new Button(grpInputSettings,SWT.RADIO);
  btnTfidf.setBounds(238,219,90,16);
  btnTfidf.setText(""String_Node_Str"");
  final Button btnLoadModel=new Button(grpInputSettings,SWT.CHECK);
  btnLoadModel.setBounds(11,253,168,16);
  btnLoadModel.setText(""String_Node_Str"");
  txtModelFilePath=new Text(grpInputSettings,SWT.BORDER);
  txtModelFilePath.setBounds(185,248,199,21);
  Button button_8=new Button(grpInputSettings,SWT.NONE);
  button_8.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      txtModelFilePath.setText(""String_Node_Str"");
      FileDialog fd=new FileDialog(shell,SWT.OPEN);
      fd.open();
      String oFile=fd.getFileName();
      String dir=fd.getFilterPath();
      txtModelFilePath.setText(dir + System.getProperty(""String_Node_Str"") + oFile);
    }
  }
);
  button_8.setBounds(387,246,20,25);
  button_8.setText(""String_Node_Str"");
  txtHashmapPath=new Text(grpInputSettings,SWT.BORDER);
  txtHashmapPath.setBounds(185,296,199,21);
  Button button_9=new Button(grpInputSettings,SWT.NONE);
  button_9.setBounds(387,294,20,25);
  button_9.setText(""String_Node_Str"");
  final CTabFolder tabFolder=new CTabFolder(parent,SWT.BORDER | SWT.SINGLE);
  tabFolder.setSingle(false);
  tabFolder.setSimple(false);
  GridData gd_tabFolder=new GridData(SWT.LEFT,SWT.CENTER,false,false,7,1);
  gd_tabFolder.heightHint=214;
  gd_tabFolder.widthHint=429;
  tabFolder.setLayoutData(gd_tabFolder);
  tabFolder.setSelectionBackground(Display.getCurrent().getSystemColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND_GRADIENT));
  final CTabItem tbtmTesting=new CTabItem(tabFolder,SWT.NONE);
  tbtmTesting.setText(""String_Node_Str"");
  Group grpTestMode=new Group(tabFolder,SWT.NONE);
  tbtmTesting.setControl(grpTestMode);
  Label lblTestFolder=new Label(grpTestMode,SWT.NONE);
  lblTestFolder.setBounds(34,38,95,15);
  lblTestFolder.setText(""String_Node_Str"");
  txtTestFolder1=new Text(grpTestMode,SWT.BORDER);
  txtTestFolder1.setBounds(135,32,220,21);
  Label lblTestFolder_1=new Label(grpTestMode,SWT.NONE);
  lblTestFolder_1.setBounds(34,64,95,15);
  lblTestFolder_1.setText(""String_Node_Str"");
  txtTestFolder2=new Text(grpTestMode,SWT.BORDER);
  txtTestFolder2.setBounds(135,61,220,21);
  Button button_3=new Button(grpTestMode,SWT.NONE);
  button_3.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtTestFolder1.setText(fp1Directory);
    }
  }
);
  button_3.setBounds(359,30,21,25);
  button_3.setText(""String_Node_Str"");
  Button button_4=new Button(grpTestMode,SWT.NONE);
  button_4.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd2=new DirectoryDialog(shell);
      fd2.open();
      String fp2Directory=fd2.getFilterPath();
      txtTestFolder2.setText(fp2Directory);
    }
  }
);
  button_4.setBounds(359,59,21,25);
  button_4.setText(""String_Node_Str"");
  Label lblKfoldCrossValidation=new Label(grpTestMode,SWT.NONE);
  lblKfoldCrossValidation.setBounds(34,118,46,15);
  lblKfoldCrossValidation.setText(""String_Node_Str"");
  Label label=new Label(grpTestMode,SWT.NONE);
  label.setText(""String_Node_Str"");
  label.setBounds(10,154,59,15);
  txtkVal=new Text(grpTestMode,SWT.BORDER);
  txtkVal.setBounds(135,115,220,21);
  txtOutputFile=new Text(grpTestMode,SWT.BORDER);
  txtOutputFile.setBounds(135,151,220,21);
  Button button_2=new Button(grpTestMode,SWT.NONE);
  button_2.setBounds(359,149,21,25);
  button_2.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      txtOutputFile.setText(""String_Node_Str"");
      FileDialog fd=new FileDialog(shell,SWT.SAVE);
      fd.open();
      String oFile=fd.getFileName();
      String dir=fd.getFilterPath();
      txtOutputFile.setText(dir + System.getProperty(""String_Node_Str"") + oFile);
    }
  }
);
  button_2.setText(""String_Node_Str"");
  final Button btnCrossVal=new Button(grpTestMode,SWT.RADIO);
  btnCrossVal.setBounds(10,94,149,16);
  btnCrossVal.setText(""String_Node_Str"");
  Button btnTrain=new Button(grpTestMode,SWT.NONE);
  btnTrain.setBounds(10,175,52,25);
  btnTrain.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      long currentTime=System.currentTimeMillis();
      try {
        SvmClassifier svm=new SvmClassifier(btnLowercase.getSelection(),txtDelimiters.getText(),txtStopWords.getText());
        IEclipseContext iEclipseContext=context;
        ContextInjectionFactory.inject(svm,iEclipseContext);
        int selection=tabFolder.getSelectionIndex();
        if (btnLoadModel.getSelection())         svm.loadPretrainedModel(txtLabel1.getText(),txtLabel2.getText(),txtModelFilePath.getText(),txtHashmapPath.getText());
 else         svm.train(txtLabel1.getText(),txtFolderPath1.getText(),txtLabel2.getText(),txtFolderPath2.getText(),btnTfidf.getSelection(),btnCrossVal.getSelection(),txtkVal.getText());
        if (!btnCrossVal.getSelection()) {
          if (selection == 0) {
            System.out.println(""String_Node_Str"");
            appendLog(""String_Node_Str"");
            svm.predict(txtLabel1.getText(),txtFolderPath1.getText(),txtLabel2.getText(),txtFolderPath2.getText());
            svm.output(txtLabel1.getText(),txtTestFolder1.getText(),txtLabel2.getText(),txtTestFolder2.getText(),txtOutputFile.getText());
          }
 else           if (selection == 1) {
            System.out.println(""String_Node_Str"");
            appendLog(""String_Node_Str"");
          }
        }
        System.out.println(""String_Node_Str"" + ((System.currentTimeMillis() - currentTime) / (double)1000) + ""String_Node_Str"");
        appendLog(""String_Node_Str"" + ((System.currentTimeMillis() - currentTime) / (double)1000) + ""String_Node_Str"");
      }
 catch (      IOException|ClassNotFoundException ie) {
        ie.printStackTrace();
      }
    }
  }
);
  btnTrain.setText(""String_Node_Str"");
  Button btnSeparateTestData=new Button(grpTestMode,SWT.RADIO);
  btnSeparateTestData.setSelection(true);
  btnSeparateTestData.setBounds(10,10,119,16);
  btnSeparateTestData.setText(""String_Node_Str"");
  tabFolder.setSelection(0);
  CTabItem tbtmClassify=new CTabItem(tabFolder,SWT.NONE);
  tbtmClassify.setText(""String_Node_Str"");
  Group grpClassifyMode=new Group(tabFolder,SWT.NONE);
  tbtmClassify.setControl(grpClassifyMode);
  grpClassifyMode.setText(""String_Node_Str"");
  Label lblFolder_2=new Label(grpClassifyMode,SWT.NONE);
  lblFolder_2.setBounds(10,32,97,15);
  lblFolder_2.setText(""String_Node_Str"");
  txtClassifyInput=new Text(grpClassifyMode,SWT.BORDER);
  txtClassifyInput.setBounds(135,26,234,21);
  Label label_1=new Label(grpClassifyMode,SWT.NONE);
  label_1.setText(""String_Node_Str"");
  label_1.setBounds(10,66,59,15);
  txtClassifyOutput=new Text(grpClassifyMode,SWT.BORDER);
  txtClassifyOutput.setBounds(135,63,234,21);
  Button button_6=new Button(grpClassifyMode,SWT.NONE);
  button_6.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      txtClassifyOutput.setText(""String_Node_Str"");
      FileDialog fd=new FileDialog(shell,SWT.SAVE);
      fd.open();
      String oFile=fd.getFileName();
      String dir=fd.getFilterPath();
      txtClassifyOutput.setText(dir + System.getProperty(""String_Node_Str"") + oFile);
    }
  }
);
  button_6.setText(""String_Node_Str"");
  button_6.setBounds(370,61,21,25);
  Button btnClassify=new Button(grpClassifyMode,SWT.NONE);
  btnClassify.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      long currentTime=System.currentTimeMillis();
      try {
        SvmClassifier svm=new SvmClassifier(btnLowercase.getSelection(),txtDelimiters.getText(),txtStopWords.getText());
        IEclipseContext iEclipseContext=context;
        ContextInjectionFactory.inject(svm,iEclipseContext);
        int selection=tabFolder.getSelectionIndex();
        if (btnLoadModel.getSelection())         svm.loadPretrainedModel(txtLabel1.getText(),txtLabel2.getText(),txtModelFilePath.getText(),txtHashmapPath.getText());
 else         svm.train(txtLabel1.getText(),txtFolderPath1.getText(),txtLabel2.getText(),txtFolderPath2.getText(),btnTfidf.getSelection(),false,null);
        if (selection == 0) {
          System.out.println(""String_Node_Str"");
          appendLog(""String_Node_Str"");
          svm.predict(txtLabel1.getText(),txtFolderPath1.getText(),txtLabel2.getText(),txtFolderPath2.getText());
          svm.output(txtLabel1.getText(),txtTestFolder1.getText(),txtLabel2.getText(),txtTestFolder2.getText(),txtOutputFile.getText());
        }
 else         if (selection == 1) {
          System.out.println(""String_Node_Str"");
          appendLog(""String_Node_Str"");
          svm.classify(txtLabel1.getText(),txtLabel2.getText(),txtClassifyInput.getText());
          svm.outputPredictedOnly(txtLabel1.getText(),txtLabel2.getText(),txtClassifyInput.getText(),txtClassifyOutput.getText());
        }
        System.out.println(""String_Node_Str"" + ((System.currentTimeMillis() - currentTime) / (double)1000) + ""String_Node_Str"");
        appendLog(""String_Node_Str"" + ((System.currentTimeMillis() - currentTime) / (double)1000) + ""String_Node_Str"");
      }
 catch (      IOException|ClassNotFoundException ie) {
        ie.printStackTrace();
      }
    }
  }
);
  btnClassify.setText(""String_Node_Str"");
  btnClassify.setBounds(10,95,52,25);
  Button button_7=new Button(grpClassifyMode,SWT.NONE);
  button_7.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      DirectoryDialog fd1=new DirectoryDialog(shell);
      fd1.open();
      String fp1Directory=fd1.getFilterPath();
      txtClassifyInput.setText(fp1Directory);
    }
  }
);
  button_7.setBounds(370,24,21,25);
  button_7.setText(""String_Node_Str"");
}",0.9971022891915386
168247,"public int loadPretrainedModel(String label1,String label2,String modelFilePath,String hashmapPath) throws FileNotFoundException, IOException, ClassNotFoundException {
  int ret=0;
  System.out.println(""String_Node_Str"" + modelFilePath);
  this.modelFile=new File(modelFilePath);
  File hashmap=new File(hashmapPath);
  System.out.println(""String_Node_Str"" + hashmap.getAbsolutePath());
  ObjectInputStream ois=new ObjectInputStream(new FileInputStream(hashmap));
  this.featureMap=(HashMap<String,Integer>)ois.readObject();
  Calendar cal=Calendar.getInstance();
  dateString=""String_Node_Str"" + (cal.get(Calendar.MONTH) + 1) + ""String_Node_Str""+ cal.get(Calendar.DATE)+ ""String_Node_Str""+ cal.get(Calendar.YEAR);
  this.intermediatePath=System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + label1+ ""String_Node_Str""+ label2+ ""String_Node_Str""+ dateString+ ""String_Node_Str""+ System.currentTimeMillis();
  return ret;
}","public int loadPretrainedModel(String label1,String label2,String modelFilePath,String hashmapPath) throws FileNotFoundException, IOException, ClassNotFoundException {
  int ret=0;
  System.out.println(""String_Node_Str"" + modelFilePath);
  this.modelFile=new File(modelFilePath);
  File hashmap=new File(hashmapPath);
  System.out.println(""String_Node_Str"" + hashmap.getAbsolutePath());
  ObjectInputStream ois=new ObjectInputStream(new FileInputStream(hashmap));
  this.featureMap=(HashMap<String,Integer>)ois.readObject();
  Calendar cal=Calendar.getInstance();
  dateString=""String_Node_Str"" + (cal.get(Calendar.MONTH) + 1) + ""String_Node_Str""+ cal.get(Calendar.DATE)+ ""String_Node_Str""+ cal.get(Calendar.YEAR);
  this.intermediatePath=System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + label1+ ""String_Node_Str""+ label2+ ""String_Node_Str""+ dateString+ ""String_Node_Str""+ System.currentTimeMillis();
  return ret;
}",0.9711846318036286
168248,"public int train(String label1,String folderPath1,String label2,String folderPath2,boolean doTfidf,boolean doCrossVal,String kVal) throws IOException {
  int ret=0;
  File folder1=new File(folderPath1);
  File folder2=new File(folderPath2);
  Calendar cal=Calendar.getInstance();
  dateString=""String_Node_Str"" + (cal.get(Calendar.MONTH) + 1) + ""String_Node_Str""+ cal.get(Calendar.DATE)+ ""String_Node_Str""+ cal.get(Calendar.YEAR);
  intermediatePath=System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + label1+ ""String_Node_Str""+ label2+ ""String_Node_Str""+ dateString+ ""String_Node_Str""+ System.currentTimeMillis();
  modelFile=new File(intermediatePath + ""String_Node_Str"");
  File trainFile=new File(intermediatePath + ""String_Node_Str"");
  this.doTfidf=doTfidf;
  dfMap.clear();
  noOfDocuments=0;
  if (doTfidf) {
    for (    File file : folder1.listFiles()) {
      noOfDocuments=noOfDocuments + 1;
      buildDfMap(file);
    }
    for (    File file : folder2.listFiles()) {
      noOfDocuments=noOfDocuments + 1;
      buildDfMap(file);
    }
    System.out.println(""String_Node_Str"");
    appendLog(""String_Node_Str"");
  }
  BufferedWriter bw=new BufferedWriter(new FileWriter(trainFile));
  for (  File file : folder1.listFiles()) {
    System.out.println(""String_Node_Str"" + file.toString());
    bw.write(""String_Node_Str"" + BowToString(fileToBow(file)));
    bw.newLine();
  }
  for (  File file : folder2.listFiles()) {
    System.out.println(""String_Node_Str"" + file.toString());
    bw.write(""String_Node_Str"" + BowToString(fileToBow(file)));
    bw.newLine();
  }
  System.out.println(""String_Node_Str"" + noOfDocuments + ""String_Node_Str""+ featureMapIndex);
  System.out.println(""String_Node_Str"" + trainFile.getAbsolutePath());
  appendLog(""String_Node_Str"" + noOfDocuments + ""String_Node_Str""+ featureMapIndex);
  appendLog(""String_Node_Str"" + trainFile.getAbsolutePath());
  bw.close();
  String[] train_arguments;
  if (doCrossVal) {
    train_arguments=new String[4];
    train_arguments[0]=""String_Node_Str"";
    train_arguments[1]=kVal;
    train_arguments[2]=trainFile.getAbsolutePath();
    train_arguments[3]=modelFile.getAbsolutePath();
  }
 else {
    train_arguments=new String[2];
    train_arguments[0]=trainFile.getAbsolutePath();
    train_arguments[1]=modelFile.getAbsolutePath();
  }
  System.out.println(""String_Node_Str"");
  appendLog(""String_Node_Str"");
  double crossValResult=svm_train.main(train_arguments);
  System.out.println(""String_Node_Str"" + modelFile.getAbsolutePath());
  appendLog(""String_Node_Str"" + modelFile.getAbsolutePath());
  File hashmap=new File(intermediatePath + ""String_Node_Str"");
  ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(hashmap));
  oos.writeObject(featureMap);
  oos.flush();
  oos.close();
  System.out.println(""String_Node_Str"" + hashmap.getAbsolutePath());
  appendLog(""String_Node_Str"" + hashmap.getAbsolutePath());
  if (doCrossVal) {
    System.out.println(""String_Node_Str"" + crossValResult + ""String_Node_Str"");
    appendLog(""String_Node_Str"" + crossValResult + ""String_Node_Str"");
  }
  return ret;
}","public int train(String label1,String folderPath1,String label2,String folderPath2,boolean doTfidf,boolean doCrossVal,String kVal) throws IOException {
  int ret=0;
  File folder1=new File(folderPath1);
  File folder2=new File(folderPath2);
  Calendar cal=Calendar.getInstance();
  dateString=""String_Node_Str"" + (cal.get(Calendar.MONTH) + 1) + ""String_Node_Str""+ cal.get(Calendar.DATE)+ ""String_Node_Str""+ cal.get(Calendar.YEAR);
  intermediatePath=System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + label1+ ""String_Node_Str""+ label2+ ""String_Node_Str""+ dateString+ ""String_Node_Str""+ System.currentTimeMillis();
  modelFile=new File(intermediatePath + ""String_Node_Str"");
  File trainFile=new File(intermediatePath + ""String_Node_Str"");
  this.doTfidf=doTfidf;
  dfMap.clear();
  noOfDocuments=0;
  if (doTfidf) {
    for (    File file : folder1.listFiles()) {
      noOfDocuments=noOfDocuments + 1;
      buildDfMap(file);
    }
    for (    File file : folder2.listFiles()) {
      noOfDocuments=noOfDocuments + 1;
      buildDfMap(file);
    }
    System.out.println(""String_Node_Str"");
    appendLog(""String_Node_Str"");
  }
  BufferedWriter bw=new BufferedWriter(new FileWriter(trainFile));
  for (  File file : folder1.listFiles()) {
    System.out.println(""String_Node_Str"" + file.toString());
    bw.write(""String_Node_Str"" + BowToString(fileToBow(file)));
    bw.newLine();
  }
  for (  File file : folder2.listFiles()) {
    System.out.println(""String_Node_Str"" + file.toString());
    bw.write(""String_Node_Str"" + BowToString(fileToBow(file)));
    bw.newLine();
  }
  System.out.println(""String_Node_Str"" + noOfDocuments + ""String_Node_Str""+ featureMapIndex);
  System.out.println(""String_Node_Str"" + trainFile.getAbsolutePath());
  appendLog(""String_Node_Str"" + noOfDocuments + ""String_Node_Str""+ featureMapIndex);
  appendLog(""String_Node_Str"" + trainFile.getAbsolutePath());
  bw.close();
  String[] train_arguments;
  if (doCrossVal) {
    train_arguments=new String[4];
    train_arguments[0]=""String_Node_Str"";
    train_arguments[1]=kVal;
    train_arguments[2]=trainFile.getAbsolutePath();
    train_arguments[3]=modelFile.getAbsolutePath();
  }
 else {
    train_arguments=new String[2];
    train_arguments[0]=trainFile.getAbsolutePath();
    train_arguments[1]=modelFile.getAbsolutePath();
  }
  System.out.println(""String_Node_Str"");
  appendLog(""String_Node_Str"");
  double crossValResult=svm_train.main(train_arguments);
  System.out.println(""String_Node_Str"" + modelFile.getAbsolutePath());
  appendLog(""String_Node_Str"" + modelFile.getAbsolutePath());
  File hashmap=new File(intermediatePath + ""String_Node_Str"");
  ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(hashmap));
  oos.writeObject(featureMap);
  oos.flush();
  oos.close();
  System.out.println(""String_Node_Str"" + hashmap.getAbsolutePath());
  appendLog(""String_Node_Str"" + hashmap.getAbsolutePath());
  if (doCrossVal) {
    System.out.println(""String_Node_Str"" + crossValResult + ""String_Node_Str"");
    appendLog(""String_Node_Str"" + crossValResult + ""String_Node_Str"");
  }
  return ret;
}",0.9913572343149808
168249,"/** 
 * Retrieves the output directory for the main module
 * @param project Project
 * @return String value
 */
private String getMainOutputDirectory(Project project){
  final CompilerManager compilerManager=CompilerManager.getInstance(project);
  final Module[] modules=ModuleManager.getInstance(project).getModules();
  final ModuleCompileScope compileScope=new ModuleCompileScope(project,modules,false);
  final Module mainModule=modules[0];
  CompileTask compileTask=new CompileTask(){
    public boolean execute(    CompileContext compileContext){
      VirtualFile mainOutputDirectory=compileContext.getModuleOutputDirectory(mainModule);
      JettyRunnerEditor.this.mainOutputDirectory=mainOutputDirectory.getPresentableUrl();
      return true;
    }
  }
;
  compilerManager.executeTask(compileTask,compileScope,""String_Node_Str"",null);
  return this.mainOutputDirectory;
}","/** 
 * Retrieves the output directory for the main module
 * @param project Project
 * @return String value
 */
private String getMainOutputDirectory(final Project project){
  final CompilerManager compilerManager=CompilerManager.getInstance(project);
  final Module[] modules=ModuleManager.getInstance(project).getModules();
  final ModuleCompileScope compileScope=new ModuleCompileScope(project,modules,false);
  final Module mainModule=modules[0];
  CompileTask compileTask=new CompileTask(){
    public boolean execute(    CompileContext compileContext){
      VirtualFile mainOutputDirectory=compileContext.getModuleOutputDirectory(mainModule);
      if (mainOutputDirectory != null) {
        String mainOutputDirectoryValue=mainOutputDirectory.getPresentableUrl();
        JettyRunnerEditor.this.mainOutputDirectory=mainOutputDirectoryValue;
      }
 else {
        NotificationGroup notificationGroup=new NotificationGroup(""String_Node_Str"",NotificationDisplayType.BALLOON,true);
        Notification notification=notificationGroup.createNotification(""String_Node_Str"",NotificationType.ERROR);
        Notifications.Bus.notify(notification,project);
      }
      return true;
    }
  }
;
  compilerManager.executeTask(compileTask,compileScope,""String_Node_Str"",null);
  return this.mainOutputDirectory;
}",0.7823315118397086
168250,"public boolean execute(CompileContext compileContext){
  VirtualFile mainOutputDirectory=compileContext.getModuleOutputDirectory(mainModule);
  JettyRunnerEditor.this.mainOutputDirectory=mainOutputDirectory.getPresentableUrl();
  return true;
}","public boolean execute(CompileContext compileContext){
  VirtualFile mainOutputDirectory=compileContext.getModuleOutputDirectory(mainModule);
  if (mainOutputDirectory != null) {
    String mainOutputDirectoryValue=mainOutputDirectory.getPresentableUrl();
    JettyRunnerEditor.this.mainOutputDirectory=mainOutputDirectoryValue;
  }
 else {
    NotificationGroup notificationGroup=new NotificationGroup(""String_Node_Str"",NotificationDisplayType.BALLOON,true);
    Notification notification=notificationGroup.createNotification(""String_Node_Str"",NotificationType.ERROR);
    Notifications.Bus.notify(notification,project);
  }
  return true;
}",0.435665914221219
168251,"@Override public void sendRedirect(String location) throws IOException {
  String sanitizedLocation=location.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!sanitizedLocation.contains(""String_Node_Str"") && csrfGuard.isProtectedPageAndMethod(sanitizedLocation,""String_Node_Str"")) {
    csrfGuard.updateTokens(request);
    StringBuilder sb=new StringBuilder();
    if (!sanitizedLocation.startsWith(""String_Node_Str"")) {
      sb.append(request.getContextPath() + ""String_Node_Str"" + sanitizedLocation);
    }
 else {
      sb.append(sanitizedLocation);
    }
    if (sanitizedLocation.contains(""String_Node_Str"")) {
      sb.append('&');
    }
 else {
      sb.append('?');
    }
    String locationUri=sanitizedLocation.split(""String_Node_Str"",2)[0];
    sb.append(csrfGuard.getTokenName());
    sb.append('=');
    sb.append(csrfGuard.getTokenValue(request,locationUri));
    response.sendRedirect(sb.toString());
  }
 else {
    response.sendRedirect(sanitizedLocation);
  }
}","@Override public void sendRedirect(String location) throws IOException {
  String sanitizedLocation=location.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!sanitizedLocation.contains(""String_Node_Str"") && csrfGuard.isProtectedPageAndMethod(sanitizedLocation,""String_Node_Str"")) {
    csrfGuard.updateTokens(request);
    String[] splitOnFragement=location.split(""String_Node_Str"",2);
    location=splitOnFragement[0];
    StringBuilder sb=new StringBuilder();
    if (!sanitizedLocation.startsWith(""String_Node_Str"")) {
      sb.append(request.getContextPath() + ""String_Node_Str"" + sanitizedLocation);
    }
 else {
      sb.append(sanitizedLocation);
    }
    if (sanitizedLocation.contains(""String_Node_Str"")) {
      sb.append('&');
    }
 else {
      sb.append('?');
    }
    String locationUri=sanitizedLocation.split(""String_Node_Str"",2)[0];
    sb.append(csrfGuard.getTokenName());
    sb.append('=');
    sb.append(csrfGuard.getTokenValue(request,locationUri));
    if (splitOnFragement.length > 1) {
      sb.append('#').append(splitOnFragement[1]);
    }
    response.sendRedirect(sb.toString());
  }
 else {
    response.sendRedirect(sanitizedLocation);
  }
}",0.9096774193548388
168252,"/** 
 * see if a test path starts with ^ and ends with $ thus making it a regex
 * @param testPath
 * @return true if regex
 */
private static boolean isTestPathRegex(String testPath){
  return testPath != null && testPath.startsWith(""String_Node_Str"") && testPath.endsWith(""String_Node_Str"");
}","/** 
 * see if a test path starts with ^ and ends with $ thus making it a regex
 * @param testPath The path string to test
 * @return true if regex (starts with ""^"" and ends with ""$"")
 */
private static boolean isTestPathRegex(String testPath){
  return testPath != null && testPath.startsWith(""String_Node_Str"") && testPath.endsWith(""String_Node_Str"");
}",0.9076923076923076
168253,"/** 
 * if the HTTP method is protected, i.e. should be checked for token
 * @param method
 * @return if protected
 */
public boolean isProtectedMethod(String method){
  boolean isProtected=true;
{
    Set<String> theProtectedMethods=getProtectedMethods();
    if (!theProtectedMethods.isEmpty() && !theProtectedMethods.contains(method)) {
      isProtected=false;
    }
  }
{
    Set<String> theUnprotectedMethods=getUnprotectedMethods();
    if (!theUnprotectedMethods.isEmpty() && theUnprotectedMethods.contains(method)) {
      isProtected=false;
    }
  }
  return isProtected;
}","/** 
 * Whether or not the HTTP method is protected, i.e. should be checked for token.
 * @param method The method to check for protection status
 * @return true when the given method name is in the protected methods set and not in the unprotected methods set
 */
public boolean isProtectedMethod(String method){
  boolean isProtected=true;
{
    Set<String> theProtectedMethods=getProtectedMethods();
    if (!theProtectedMethods.isEmpty() && !theProtectedMethods.contains(method)) {
      isProtected=false;
    }
  }
{
    Set<String> theUnprotectedMethods=getUnprotectedMethods();
    if (!theUnprotectedMethods.isEmpty() && theUnprotectedMethods.contains(method)) {
      isProtected=false;
    }
  }
  return isProtected;
}",0.8682406702208683
168254,"/** 
 * @param request
 * @param response
 * @param csrfe
 */
private void callActionsOnError(HttpServletRequest request,HttpServletResponse response,CsrfGuardException csrfe){
  for (  IAction action : getActions()) {
    try {
      action.execute(request,response,csrfe,this);
    }
 catch (    CsrfGuardException exception) {
      getLogger().log(LogLevel.Error,exception);
    }
  }
}","/** 
 * Invoked when there was a CsrfGuardException such as a token mismatch error. Calls the configured actions.
 * @param request The HttpServletRequest
 * @param response The HttpServletResponse
 * @param csrfe The exception that triggered the actions call. Passed to the action.
 * @see IAction#execute(HttpServletRequest,HttpServletResponse,CsrfGuardException)
 */
private void callActionsOnError(HttpServletRequest request,HttpServletResponse response,CsrfGuardException csrfe){
  for (  IAction action : getActions()) {
    try {
      action.execute(request,response,csrfe,this);
    }
 catch (    CsrfGuardException exception) {
      getLogger().log(LogLevel.Error,exception);
    }
  }
}",0.4816176470588235
168255,"/** 
 * @param context
 * @param prefix 
 */
public static void printConfigIfConfigured(ServletContext context,String prefix){
  String printConfig=context.getInitParameter(CONFIG_PRINT_PARAM);
  if (printConfig == null || ""String_Node_Str"".equals(printConfig.trim())) {
    printConfig=CsrfGuard.getInstance().isPrintConfig() ? ""String_Node_Str"" : null;
  }
  if (printConfig != null && Boolean.parseBoolean(printConfig)) {
    context.log(prefix + CsrfGuard.getInstance().toString());
  }
}","/** 
 * Prints the configuration to the ServletContext log file with the given prefix. Has no effect unless the CONFIG_PRINT_PARAM init parameter is ""true.""
 * @param context The ServletContext
 * @param prefix  The string used as a prefix when printing the configuration to the log
 * @see javax.servlet.ServletContext#log(String)
 */
public static void printConfigIfConfigured(ServletContext context,String prefix){
  String printConfig=context.getInitParameter(CONFIG_PRINT_PARAM);
  if (printConfig == null || ""String_Node_Str"".equals(printConfig.trim())) {
    printConfig=CsrfGuard.getInstance().isPrintConfig() ? ""String_Node_Str"" : null;
  }
  if (printConfig != null && Boolean.parseBoolean(printConfig)) {
    context.log(prefix + CsrfGuard.getInstance().toString());
  }
}",0.516078431372549
168256,"/** 
 * if this configuration provider can be cached for a minute, i.e. it is all setup 
 */
boolean isCacheable();","/** 
 * @return true when this configuration provider can be cached for a minute, i.e. it is all setup 
 */
boolean isCacheable();",0.9224489795918368
168257,"/** 
 * If csrf guard filter should check even if there is no session for the user Note: this changed around 2014/04, the default behavior used to be to  not check if there is no session.  If you want the legacy behavior (if your app is not susceptible to CSRF if the user has no session), set this to false
 * @return if true
 */
public boolean isValidateWhenNoSessionExists();","/** 
 * If csrf guard filter should check even if there is no session for the user Note: this changed around 2014/04, the default behavior used to be to  not check if there is no session.  If you want the legacy behavior (if your app is not susceptible to CSRF if the user has no session), set this to false
 * @return true when validation is performed even when no session exists
 */
public boolean isValidateWhenNoSessionExists();",0.9160493827160494
168258,"/** 
 * if the token should be injected in GET forms (which will be on the URL) if the HTTP method GET is unprotected, then this should likely be false
 * @return if inject
 */
boolean isJavascriptInjectGetForms();","/** 
 * if the token should be injected in GET forms (which will be on the URL) if the HTTP method GET is unprotected, then this should likely be false
 * @return true if the token should be injected in GET forms via Javascript
 */
boolean isJavascriptInjectGetForms();",0.8778467908902692
168259,"/** 
 * called when retrieving the configuration
 * @param properties
 * @return the configuration
 */
public ConfigurationProvider retrieveConfiguration(Properties properties);","/** 
 * called when retrieving the configuration
 * @param properties describing the configuration
 * @return the configuration
 */
public ConfigurationProvider retrieveConfiguration(Properties properties);",0.9242819843342036
168260,"/** 
 * common subsitutions in config values
 * @param input
 * @return the new string
 */
public static String commonSubstitutions(String input){
  if (input == null || !input.contains(""String_Node_Str"")) {
    return input;
  }
  input=input.replace(""String_Node_Str"",CsrfGuardUtils.defaultString(CsrfGuardServletContextListener.getServletContext()));
  return input;
}","/** 
 * Replaces percent-bounded expressions such as ""%servletContext%."" common subsitutions in config values
 * @param input A string with expressions that should be replaced
 * @return new string with ""common"" expressions replaced by configuration values
 */
public static String commonSubstitutions(String input){
  if (input == null || !input.contains(""String_Node_Str"")) {
    return input;
  }
  input=input.replace(""String_Node_Str"",CsrfGuardUtils.defaultString(CsrfGuardServletContextListener.getServletContext()));
  return input;
}",0.7675438596491229
168261,"/** 
 * property string and substitutions
 * @param properties
 * @param propertyName
 * @return the value substituted
 */
public static String propertyString(Properties properties,String propertyName,String defaultValue){
  String value=properties.getProperty(propertyName,defaultValue);
  value=commonSubstitutions(value);
  return value;
}","/** 
 * property string and substitutions
 * @param properties The properties from which to fetch a value
 * @param propertyName The name of the desired property
 * @param defaultValue The value to use when the propertyName does not exist
 * @return the value, with common substitutions performed
 * @see #commonSubstitutions(String)
 */
public static String propertyString(Properties properties,String propertyName,String defaultValue){
  String value=properties.getProperty(propertyName,defaultValue);
  value=commonSubstitutions(value);
  return value;
}",0.7208008898776418
168262,"public static boolean isOPFReceiverRegistered(@NonNull final Context context){
  OPFLog.methodD(context);
  final Intent intent=new Intent(ACTION_RECEIVE);
  final List<ResolveInfo> resolveInfos=context.getPackageManager().queryBroadcastReceivers(intent,GET_RESOLVED_FILTER);
  for (  ResolveInfo resolveInfo : resolveInfos) {
    final IntentFilter intentFilter=resolveInfo.filter;
    if (intentFilter != null && intentFilter.hasAction(ACTION_RECEIVE) && intentFilter.hasAction(ACTION_REGISTRATION) && intentFilter.hasAction(ACTION_UNREGISTRATION) && intentFilter.hasAction(ACTION_NO_AVAILABLE_PROVIDER)) {
      return true;
    }
  }
  return false;
}","public static boolean isOPFReceiverRegistered(@NonNull final Context context){
  OPFLog.methodD(context);
  final Intent intentBroadcastReceive=new Intent(ACTION_RECEIVE);
  final Intent intentBroadcastRegistration=new Intent(ACTION_REGISTRATION);
  final Intent intentBroadcastUnregistration=new Intent(ACTION_UNREGISTRATION);
  final Intent intentBroadcastNoAvailableProvider=new Intent(ACTION_NO_AVAILABLE_PROVIDER);
  try {
    checkReceiver(context,intentBroadcastReceive,null,null);
    checkReceiver(context,intentBroadcastRegistration,null,null);
    checkReceiver(context,intentBroadcastUnregistration,null,null);
    checkReceiver(context,intentBroadcastNoAvailableProvider,null,null);
  }
 catch (  RuntimeException e) {
    return false;
  }
  return true;
}",0.3564912280701754
168263,"public static void checkReceiver(@NonNull final Context context,@NonNull final Intent broadcastIntent,@NonNull final String receiverName,@Nullable final String permission){
  final PackageManager packageManager=context.getPackageManager();
  final String packageName=context.getPackageName();
  final List<ResolveInfo> receivers=packageManager.queryBroadcastReceivers(broadcastIntent,PackageManager.GET_INTENT_FILTERS);
  if (receivers.isEmpty()) {
    throw new IllegalStateException(""String_Node_Str"" + OPFUtils.toString(broadcastIntent));
  }
  ResolveInfo neededReceiver=null;
  for (  ResolveInfo receiver : receivers) {
    if (receiver.activityInfo.name.equals(receiverName) && receiver.activityInfo.packageName.equals(packageName)) {
      neededReceiver=receiver;
      break;
    }
  }
  if (neededReceiver == null) {
    throw new IllegalStateException(""String_Node_Str"" + receiverName + ""String_Node_Str"");
  }
  if (permission != null && !permission.equals(neededReceiver.activityInfo.permission)) {
    throw new IllegalStateException(""String_Node_Str"" + permission + ""String_Node_Str""+ receiverName);
  }
}","public static void checkReceiver(@NonNull final Context context,@NonNull final Intent broadcastIntent,@Nullable final String receiverName,@Nullable final String permission){
  final PackageManager packageManager=context.getPackageManager();
  final String packageName=context.getPackageName();
  final List<ResolveInfo> receivers=packageManager.queryBroadcastReceivers(broadcastIntent,PackageManager.GET_INTENT_FILTERS);
  if (receivers.isEmpty()) {
    throw new IllegalStateException(""String_Node_Str"" + OPFUtils.toString(broadcastIntent));
  }
  ResolveInfo neededReceiver=null;
  for (  ResolveInfo receiver : receivers) {
    if ((receiverName == null || receiver.activityInfo.name.equals(receiverName)) && receiver.activityInfo.packageName.equals(packageName)) {
      neededReceiver=receiver;
      break;
    }
  }
  if (neededReceiver == null) {
    throw new IllegalStateException(""String_Node_Str"" + receiverName + ""String_Node_Str"");
  }
  if (permission != null && !permission.equals(neededReceiver.activityInfo.permission)) {
    throw new IllegalStateException(""String_Node_Str"" + permission + ""String_Node_Str""+ receiverName);
  }
}",0.982811811370648
168264,"public ADMDelegate(@NonNull final Context context){
  OPFLog.methodD(context);
  if (OPFUtils.isInstalled(context,KINDLE_STORE_APP_PACKAGE)) {
    OPFLog.d(""String_Node_Str"");
    adm=new ADM(context.getApplicationContext());
  }
}","public ADMDelegate(@NonNull final Context context){
  OPFLog.methodD(context);
  if (OPFUtils.isInstalled(context,KINDLE_STORE_APP_PACKAGE) && isAdmClassExists()) {
    OPFLog.d(""String_Node_Str"");
    adm=new ADM(context.getApplicationContext());
  }
}",0.9545454545454546
168265,"@Override public void unregister(){
  OPFLog.methodD();
  adm.startUnregister();
}","@Override public void unregister(){
  OPFLog.methodD();
  OPFLog.i(""String_Node_Str"");
  adm.startUnregister();
}",0.841025641025641
168266,"@Override public void register(){
  OPFLog.methodD();
  if (!isRegistered()) {
    OPFLog.d(""String_Node_Str"");
    adm.startRegister();
  }
}","@Override public void register(){
  OPFLog.methodD();
  OPFLog.d(""String_Node_Str"");
  adm.startRegister();
}",0.8685258964143426
168267,"public synchronized void unregister(){
  OPFLog.methodD();
  executeTask(new UnregisterTask(preferencesProvider.getRegistrationId()));
}","public synchronized void unregister(){
  OPFLog.methodD();
  OPFLog.i(""String_Node_Str"");
  executeTask(new UnregisterTask(preferencesProvider.getRegistrationId()));
}",0.8976897689768977
168268,"public synchronized void register(){
  OPFLog.methodD();
  executeTask(new RegisterTask());
}","public synchronized void register(){
  OPFLog.methodD();
  OPFLog.i(""String_Node_Str"");
  executeTask(new RegisterTask());
}",0.8571428571428571
168269,"@Override public void unregister(){
  OPFLog.methodD();
  PushRegistrar.unregister(getContext());
  PushRegistrar.onDestroy(getContext());
}","@Override public void unregister(){
  OPFLog.methodD();
  OPFLog.i(""String_Node_Str"");
  PushRegistrar.unregister(getContext());
  PushRegistrar.onDestroy(getContext());
}",0.9003215434083601
168270,"@Override public void register(){
  OPFLog.methodD();
  PushRegistrar.register(getContext(),sendersIds);
}","@Override public void register(){
  OPFLog.methodD();
  OPFLog.i(""String_Node_Str"");
  PushRegistrar.register(getContext(),sendersIds);
}",0.8724279835390947
168271,"private void registerNextAvailableProvider(@Nullable final String prevProviderName){
  OPFLog.methodD(prevProviderName);
  final int providersCount=sortedProvidersList.size();
  final int prevProviderPosition=getProviderPosition(sortedProvidersList,prevProviderName);
  for (int i=(prevProviderPosition + 1) % providersCount, j=0; j < providersCount; i=(i + 1) % providersCount, j++) {
    final PushProvider provider=sortedProvidersList.get(i);
    final String providerName=provider.getName();
    OPFLog.d(""String_Node_Str"" + providerName);
    if (provider.isAvailable() && !registerProviderErrors.containsKey(providerName)) {
      OPFLog.d(""String_Node_Str"");
      retryManager.cancelRetryAllOperations(provider.getName());
      register(provider);
    }
  }
  settings.saveState(UNREGISTERED);
  OPFLog.w(""String_Node_Str"");
  eventListenerWrapper.onNoAvailableProvider(appContext,registerProviderErrors);
}","private void registerNextAvailableProvider(@Nullable final String prevProviderName){
  OPFLog.methodD(prevProviderName);
  final int providersCount=sortedProvidersList.size();
  final int prevProviderPosition=getProviderPosition(sortedProvidersList,prevProviderName);
  for (int i=(prevProviderPosition + 1) % providersCount, j=0; j < providersCount; i=(i + 1) % providersCount, j++) {
    final PushProvider provider=sortedProvidersList.get(i);
    final String providerName=provider.getName();
    OPFLog.d(""String_Node_Str"" + providerName);
    if (provider.isAvailable() && !registerProviderErrors.containsKey(providerName)) {
      OPFLog.d(""String_Node_Str"");
      retryManager.cancelRetryAllOperations(provider.getName());
      register(provider);
      return;
    }
  }
  settings.saveState(UNREGISTERED);
  OPFLog.w(""String_Node_Str"");
  eventListenerWrapper.onNoAvailableProvider(appContext,registerProviderErrors);
}",0.9924160346695556
168272,"private void postRetry(@NonNull final String providerName,@NonNull final Operation operation,@NonNull final String action){
  final long when=System.currentTimeMillis() + getTryDelay(providerName,operation);
  OPFLog.d(""String_Node_Str"",providerName,SimpleDateFormat.getDateTimeInstance().format(new Date(when)));
  final Intent intent=new Intent(appContext,RetryBroadcastReceiver.class);
  intent.setAction(action);
  intent.putExtra(EXTRA_PROVIDER_NAME,providerName);
  alarmManager.set(AlarmManager.RTC,when,PendingIntent.getBroadcast(appContext,providerName.hashCode(),intent,0));
}","private void postRetry(@NonNull final String providerName,@NonNull final Operation operation,@NonNull final String action){
  final long when=System.currentTimeMillis() + getTryDelay(providerName,operation);
  OPFLog.d(""String_Node_Str"",providerName,SimpleDateFormat.getDateTimeInstance().format(new Date(when)));
  final Intent intent=new Intent(appContext,RetryBroadcastReceiver.class);
  intent.setAction(action);
  intent.putExtra(EXTRA_PROVIDER_NAME,providerName);
  alarmManager.set(AlarmManager.RTC,when,PendingIntent.getBroadcast(appContext,0,intent,0));
}",0.9652173913043478
168273,"/** 
 * Called when a registration request fails. You should consider a registration error fatal. In response, your app may degrade gracefully, or you may wish to notify the user that this part of your app's functionality is not available.
 * @param errorId One of the following values:{@link ADMConstants#ERROR_AUTHENTICATION_FAILED},  {@link ADMConstants#ERROR_INVALID_SENDER},  {@link ADMConstants#ERROR_SERVICE_NOT_AVAILABLE}.
 */
@Override protected void onRegistrationError(@NonNull @ADMError final String errorId){
  OPFPushLog.methodD(ADMService.class,""String_Node_Str"",errorId);
  final OPFError error=convertError(errorId);
  OPFPushLog.d(""String_Node_Str"" + error);
  OPFPush.getHelper().getReceivedMessageHandler().onRegistrationError(NAME,error);
}","/** 
 * Called when a registration request fails. You should consider a registration error fatal. In response, your app may degrade gracefully, or you may wish to notify the user that this part of your app's functionality is not available.
 * @param errorId One of the following values:{@link ADMConstants#ERROR_AUTHENTICATION_FAILED},  {@link ADMConstants#ERROR_INVALID_SENDER},  {@link ADMConstants#ERROR_SERVICE_NOT_AVAILABLE}.
 */
@Override protected void onRegistrationError(@NonNull @ADMError final String errorId){
  OPFPushLog.methodD(ADMService.class,""String_Node_Str"",errorId);
  final OPFError error=convertError(errorId);
  OPFPushLog.d(""String_Node_Str"" + error);
  OPFPush.getHelper().getReceivedMessageHandler().onError(NAME,error);
}",0.9920529801324504
168274,"@Override public void onCreate(){
  super.onCreate();
  OPFPushLog.setLogEnable(true);
  final Configuration.Builder configBuilder=new Configuration.Builder().addProviders(new GCMProvider(this,GCM_SENDER_ID),new ADMProvider(this),new NokiaNotificationsProvider(this,NOKIA_SENDER_ID)).setBackoff(new ExponentialBackoff()).setSelectSystemPreferred(true).setEventListener(new DemoEventListener(this));
  OPFPush.init(this,configBuilder.build());
  OPFPush.getHelper().register();
}","@Override public void onCreate(){
  super.onCreate();
  OPFPushLog.setLogEnable(true);
  OPFPushLog.methodD(DemoApplication.class,""String_Node_Str"");
  final Configuration.Builder configBuilder=new Configuration.Builder().addProviders(new GCMProvider(this,GCM_SENDER_ID),new ADMProvider(this),new NokiaNotificationsProvider(this,NOKIA_SENDER_ID)).setBackoff(new ExponentialBackoff()).setSelectSystemPreferred(true).setEventListener(new DemoEventListener(this));
  OPFPush.init(this,configBuilder.build());
  OPFPush.getHelper().register();
}",0.9381746810598626
168275,"@SuppressWarnings(""String_Node_Str"") public void onEventMainThread(@NonNull final UnregistrationErrorEvent unregistrationErrorEvent){
  final OPFError error=unregistrationErrorEvent.getError();
  initViewsRegisteredState(""String_Node_Str"");
  infoText.setText(getString(R.string.unregistration_error_fmt,error.name()));
}","@SuppressWarnings(""String_Node_Str"") public void onEventMainThread(@NonNull final UnregistrationErrorEvent unregistrationErrorEvent){
  OPFPushLog.methodD(DemoActivity.class,""String_Node_Str"",unregistrationErrorEvent);
  final OPFError error=unregistrationErrorEvent.getError();
  initViewsRegisteredState(""String_Node_Str"");
  infoText.setText(getString(R.string.unregistration_error_fmt,error.name()));
  EventBus.getDefault().removeStickyEvent(unregistrationErrorEvent);
}",0.7914572864321608
168276,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_demo);
  infoText=(TextView)findViewById(R.id.info_text);
  registerButton=(Button)findViewById(R.id.register_button);
  unregisterButton=(Button)findViewById(R.id.unregister_button);
  final String registrationId=helper.getRegistrationId();
  if (!TextUtils.isEmpty(registrationId)) {
    OPFPushLog.d(""String_Node_Str"" + registrationId);
    initViewsRegisteredState(registrationId);
  }
 else {
    initViewsRegisteringState();
  }
  adapter=new ArrayAdapter<>(this,R.layout.item_message);
  final ListView messagesListView=(ListView)findViewById(R.id.messages_list);
  messagesListView.setAdapter(adapter);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  OPFPushLog.methodD(DemoActivity.class,""String_Node_Str"");
  setContentView(R.layout.activity_demo);
  infoText=(TextView)findViewById(R.id.info_text);
  registerButton=(Button)findViewById(R.id.register_button);
  unregisterButton=(Button)findViewById(R.id.unregister_button);
  final String registrationId=helper.getRegistrationId();
  if (!TextUtils.isEmpty(registrationId)) {
    OPFPushLog.d(""String_Node_Str"" + registrationId);
    initViewsRegisteredState(registrationId);
  }
 else {
    initViewsRegisteringState();
  }
  adapter=new ArrayAdapter<>(this,R.layout.item_message);
  final ListView messagesListView=(ListView)findViewById(R.id.messages_list);
  messagesListView.setAdapter(adapter);
}",0.5431145431145431
168277,"private void initViewsUnregisteredState(@NonNull final String registrationId){
  infoText.setText(getString(R.string.unregistered_state_fmt,registrationId));
  registerButton.setVisibility(View.VISIBLE);
  registerButton.setEnabled(true);
  unregisterButton.setVisibility(View.GONE);
}","private void initViewsUnregisteredState(@NonNull final String registrationId){
  OPFPushLog.methodD(DemoActivity.class,""String_Node_Str"",registrationId);
  infoText.setText(getString(R.string.unregistered_state_fmt,registrationId));
  registerButton.setVisibility(View.VISIBLE);
  registerButton.setEnabled(true);
  unregisterButton.setVisibility(View.GONE);
}",0.8837209302325582
168278,"private void initViewsUnregisteringState(){
  infoText.setText(getString(R.string.unregistration));
  registerButton.setVisibility(View.GONE);
  unregisterButton.setVisibility(View.VISIBLE);
  unregisterButton.setEnabled(false);
}","private void initViewsUnregisteringState(){
  OPFPushLog.methodD(DemoActivity.class,""String_Node_Str"");
  infoText.setText(getString(R.string.unregistration));
  registerButton.setVisibility(View.GONE);
  unregisterButton.setVisibility(View.VISIBLE);
  unregisterButton.setEnabled(false);
}",0.8846153846153846
168279,"public void onUnregisterClick(@NonNull final View view){
  initViewsUnregisteringState();
  helper.unregister();
}","public void onUnregisterClick(@NonNull final View view){
  OPFPushLog.methodD(DemoActivity.class,""String_Node_Str"");
  initViewsUnregisteringState();
  helper.unregister();
}",0.7916666666666666
168280,"@Override protected void onPause(){
  super.onPause();
  EventBus.getDefault().unregister(this);
}","@Override protected void onPause(){
  super.onPause();
  OPFPushLog.methodD(DemoActivity.class,""String_Node_Str"");
  EventBus.getDefault().unregister(this);
}",0.765625
168281,"@Override protected void onResume(){
  super.onResume();
  EventBus.getDefault().registerSticky(this);
}","@Override protected void onResume(){
  super.onResume();
  OPFPushLog.methodD(DemoActivity.class,""String_Node_Str"");
  EventBus.getDefault().registerSticky(this);
}",0.7761194029850746
168282,"public void onRegisterClick(@NonNull final View view){
  initViewsRegisteringState();
  helper.register();
}","public void onRegisterClick(@NonNull final View view){
  OPFPushLog.methodD(DemoActivity.class,""String_Node_Str"");
  initViewsRegisteringState();
  helper.register();
}",0.782608695652174
168283,"private void initViewsRegisteredState(@NonNull final String registrationId){
  infoText.setText(getString(R.string.registered_state_fmt,registrationId));
  registerButton.setVisibility(View.GONE);
  unregisterButton.setVisibility(View.VISIBLE);
  unregisterButton.setEnabled(true);
}","private void initViewsRegisteredState(@NonNull final String registrationId){
  OPFPushLog.methodD(DemoActivity.class,""String_Node_Str"",registrationId);
  infoText.setText(getString(R.string.registered_state_fmt,registrationId));
  registerButton.setVisibility(View.GONE);
  unregisterButton.setVisibility(View.VISIBLE);
  unregisterButton.setEnabled(true);
}",0.8829953198127926
168284,"private void initViewsRegisteringState(){
  infoText.setText(getString(R.string.registration));
  registerButton.setVisibility(View.VISIBLE);
  registerButton.setEnabled(false);
  unregisterButton.setVisibility(View.GONE);
}","private void initViewsRegisteringState(){
  OPFPushLog.methodD(DemoActivity.class,""String_Node_Str"");
  infoText.setText(getString(R.string.registration));
  registerButton.setVisibility(View.VISIBLE);
  registerButton.setEnabled(false);
  unregisterButton.setVisibility(View.GONE);
}",0.8818897637795275
168285,"private void initLastProvider(){
  final PushProvider lastProvider=getLastProvider();
  if (lastProvider == null) {
    return;
  }
  LOGI(String.format(""String_Node_Str"",lastProvider));
  if (lastProvider.isAvailable()) {
    if (lastProvider.isRegistered()) {
      LOGI(""String_Node_Str"");
      mCurrentProvider=lastProvider;
      mState.set(STATE_WORKING);
    }
 else {
      LOGI(""String_Node_Str"");
      mState.set(STATE_REGISTERING);
      if (!registerProvider(lastProvider)) {
        mState.set(STATE_NONE);
        saveLastProvider(null);
      }
    }
  }
 else {
    LOGI(""String_Node_Str"");
    reset();
    if (mOptions.isRecoverProvider()) {
      LOGI(""String_Node_Str"");
      register();
    }
  }
}","private void initLastProvider(){
  final PushProvider lastProvider=getLastProvider();
  if (lastProvider == null) {
    return;
  }
  LOGI(String.format(""String_Node_Str"",lastProvider));
  if (lastProvider.isAvailable()) {
    if (lastProvider.isRegistered()) {
      LOGI(""String_Node_Str"");
      mCurrentProvider=lastProvider;
      mState.set(STATE_WORKING);
    }
 else {
      LOGI(""String_Node_Str"");
      mState.set(STATE_REGISTERING);
      if (!registerProvider(lastProvider)) {
        mState.set(STATE_NONE);
        saveLastProvider(null);
      }
    }
  }
 else {
    lastProvider.onUnavailable();
    LOGI(""String_Node_Str"");
    reset();
    if (mOptions.isRecoverProvider()) {
      LOGI(""String_Node_Str"");
      register();
    }
  }
}",0.9769959404600812
168286,"public synchronized void onResult(Result result){
switch (mState.get()) {
case STATE_REGISTERING:
    onRegistrationResult(result);
  break;
case STATE_UNREGISTERING:
onUnregistrationResult(result);
break;
default :
throw new UnsupportedOperationException(""String_Node_Str"" + ""String_Node_Str"");
}
}","public void onResult(Result result){
synchronized (mRegistrationLock) {
switch (mState.get()) {
case STATE_REGISTERING:
      onRegistrationResult(result);
    break;
case STATE_UNREGISTERING:
  onUnregistrationResult(result);
break;
default :
throw new UnsupportedOperationException(""String_Node_Str"" + ""String_Node_Str"");
}
}
}",0.767515923566879
168287,"private void reset(){
  mPreferences.edit().clear().apply();
  mState.set(STATE_NONE);
}","void reset(){
  mPreferences.edit().clear().apply();
  mState.set(STATE_NONE);
}",0.9523809523809524
168288,"/** 
 * Called when a registration request fails. You should consider a registration error fatal. In response, your app may degrade gracefully, or you may wish to notify the user that this part of your app's functionality is not available.
 * @param errorId One of the following values:{@link ADMConstants#ERROR_AUTHENTICATION_FAILED},  {@link ADMConstants#ERROR_INVALID_SENDER},  {@link ADMConstants#ERROR_SERVICE_NOT_AVAILABLE}.
 */
@Override protected void onRegistrationError(@NotNull @MagicConstant(stringValues={ADMConstants.ERROR_AUTHENTICATION_FAILED,ADMConstants.ERROR_INVALID_SENDER,ADMConstants.ERROR_SERVICE_NOT_AVAILABLE}) String errorId){
  if (!ADMConstants.ERROR_SERVICE_NOT_AVAILABLE.equals(errorId)) {
    Error error=convertError(errorId);
    OpenPushHelper.getInstance(this).onRegistrationEnd(new RegistrationResult(ADMProvider.NAME,error,false));
  }
}","/** 
 * Called when a registration request fails. You should consider a registration error fatal. In response, your app may degrade gracefully, or you may wish to notify the user that this part of your app's functionality is not available.
 * @param errorId One of the following values:{@link ADMConstants#ERROR_AUTHENTICATION_FAILED},  {@link ADMConstants#ERROR_INVALID_SENDER},  {@link ADMConstants#ERROR_SERVICE_NOT_AVAILABLE}.
 */
@Override protected void onRegistrationError(@NotNull @MagicConstant(stringValues={ADMConstants.ERROR_AUTHENTICATION_FAILED,ADMConstants.ERROR_INVALID_SENDER,ADMConstants.ERROR_SERVICE_NOT_AVAILABLE}) String errorId){
  OpenPushHelper.getInstance(this).onRegistrationEnd(new RegistrationResult(ADMProvider.NAME,convertError(errorId),false));
}",0.8184019370460048
168289,"@Override public boolean isAvailable(){
  return true;
}","@Override public boolean isAvailable(){
  return mHostAppEnable && mAvailable;
}",0.7941176470588235
168290,"@Override public void unregister(){
  mRegistrationId=null;
  OpenPushHelperKeeper.getInstance(getContext()).onUnregistrationEnd(new RegistrationResult(NAME,mRegistrationId));
}","@Override public void unregister(){
  mRegistrationId=null;
  OpenPushHelperKeeper.getInstance(getContext()).onUnregistrationEnd(new RegistrationResult(getName(),mRegistrationId));
}",0.9693593314763232
168291,"MockPushProvider(@NotNull Context context){
  super(context,NAME,""String_Node_Str"");
}","MockPushProvider(@NotNull Context context,@NotNull String name,boolean available,@NotNull String hotAppPackage){
  super(context,name,hotAppPackage);
  mAvailable=available;
}",0.5134099616858238
168292,"@Override public void register(){
  mRegistrationId=UUID.randomUUID().toString();
  OpenPushHelperKeeper.getInstance(getContext()).onRegistrationEnd(new RegistrationResult(NAME,mRegistrationId));
}","@Override public void register(){
  mRegistrationId=UUID.randomUUID().toString();
  OpenPushHelperKeeper.getInstance(getContext()).onRegistrationEnd(new RegistrationResult(getName(),mRegistrationId));
}",0.9724310776942356
168293,"@Test public void testInit(){
  Options.Builder builder=new Options.Builder();
  builder.addProviders(new MockPushProvider(Robolectric.application));
  OpenPushHelper openPushHelper=OpenPushHelperKeeper.getNewInstance(Robolectric.application);
  assertEquals(false,openPushHelper.isInitDone());
  assertEquals(OpenPushHelper.State.NONE,openPushHelper.getState());
  openPushHelper.init(builder.build());
  assertEquals(true,openPushHelper.isInitDone());
  assertEquals(OpenPushHelper.State.NONE,openPushHelper.getState());
}","@Test public void testInit(){
  Options.Builder builder=new Options.Builder();
  builder.addProviders(new MockPushProvider(Robolectric.application));
  OpenPushHelper openPushHelper=OpenPushHelperKeeper.getNewInstance(Robolectric.application);
  assertFalse(openPushHelper.isInitDone());
  assertEquals(OpenPushHelper.State.NONE,openPushHelper.getState());
  openPushHelper.init(builder.build());
  assertTrue(openPushHelper.isInitDone());
  assertEquals(OpenPushHelper.State.NONE,openPushHelper.getState());
}",0.965183752417795
168294,"@Test(expected=OpenPushException.class) public void testInitTwice(){
  Options.Builder builder=new Options.Builder();
  builder.addProviders(new MockPushProvider(Robolectric.application));
  OpenPushHelper openPushHelper=OpenPushHelperKeeper.getNewInstance(Robolectric.application);
  assertEquals(false,openPushHelper.isInitDone());
  openPushHelper.init(builder.build());
  assertEquals(true,openPushHelper.isInitDone());
  openPushHelper.init(builder.build());
}","@Test(expected=OpenPushException.class) public void testInitTwice(){
  Options.Builder builder=new Options.Builder();
  builder.addProviders(new MockPushProvider(Robolectric.application));
  OpenPushHelper openPushHelper=OpenPushHelperKeeper.getNewInstance(Robolectric.application);
  assertFalse(openPushHelper.isInitDone());
  openPushHelper.init(builder.build());
  assertTrue(openPushHelper.isInitDone());
  openPushHelper.init(builder.build());
}",0.960698689956332
168295,"@Test public void testRegister(){
  OpenPushHelper helper=OpenPushHelperKeeper.getNewInstance(Robolectric.application);
  Options.Builder builder=new Options.Builder();
  builder.addProviders(new MockPushProvider(Robolectric.application));
  Options options=builder.build();
  helper.init(options);
  assertEquals(true,helper.isInitDone());
  assertEquals(OpenPushHelper.State.NONE,helper.getState());
  helper.register();
  assertEquals(OpenPushHelper.State.RUNNING,helper.getState());
  assertEquals(MockPushProvider.NAME,helper.getCurrentProviderName());
  assertNotNull(helper.getCurrentProviderRegistrationId());
}","@Test public void testRegister(){
  OpenPushHelper helper=OpenPushHelperKeeper.getNewInstance(Robolectric.application);
  Options.Builder builder=new Options.Builder();
  final String providerName=""String_Node_Str"";
  builder.addProviders(new MockPushProvider(Robolectric.application,providerName));
  Options options=builder.build();
  helper.init(options);
  assertTrue(helper.isInitDone());
  assertEquals(OpenPushHelper.State.NONE,helper.getState());
  helper.register();
  assertEquals(OpenPushHelper.State.RUNNING,helper.getState());
  assertEquals(providerName,helper.getCurrentProviderName());
  assertNotNull(helper.getCurrentProviderRegistrationId());
}",0.6333853354134166
168296,"@Test public void testUnregister(){
  OpenPushHelper helper=OpenPushHelperKeeper.getNewInstance(Robolectric.application);
  Options.Builder builder=new Options.Builder();
  builder.addProviders(new MockPushProvider(Robolectric.application));
  Options options=builder.build();
  helper.init(options);
  assertEquals(true,helper.isInitDone());
  assertEquals(OpenPushHelper.State.NONE,helper.getState());
  helper.register();
  assertEquals(OpenPushHelper.State.RUNNING,helper.getState());
  assertEquals(MockPushProvider.NAME,helper.getCurrentProviderName());
  assertNotNull(helper.getCurrentProviderRegistrationId());
  helper.unregister();
  assertEquals(OpenPushHelper.State.NONE,helper.getState());
  assertNull(helper.getCurrentProviderName());
  assertNull(helper.getCurrentProviderRegistrationId());
}","@Test public void testUnregister(){
  OpenPushHelper helper=OpenPushHelperKeeper.getNewInstance(Robolectric.application);
  Options.Builder builder=new Options.Builder();
  final String providerName=""String_Node_Str"";
  builder.addProviders(new MockPushProvider(Robolectric.application,providerName));
  Options options=builder.build();
  helper.init(options);
  assertTrue(helper.isInitDone());
  assertEquals(OpenPushHelper.State.NONE,helper.getState());
  helper.register();
  assertEquals(OpenPushHelper.State.RUNNING,helper.getState());
  assertEquals(providerName,helper.getCurrentProviderName());
  assertNotNull(helper.getCurrentProviderRegistrationId());
  helper.unregister();
  assertEquals(OpenPushHelper.State.NONE,helper.getState());
  assertNull(helper.getCurrentProviderName());
  assertNull(helper.getCurrentProviderRegistrationId());
}",0.4801444043321299
168297,"public void onProviderBecameUnavailable(@NotNull PushProvider provider){
  LOGD(TAG,String.format(""String_Node_Str"",provider));
  if (mCurrentProvider != null && mCurrentProvider.equals(provider)) {
    reset();
    mCurrentProvider=null;
    if (mListener != null) {
      mListener.onProviderBecameUnavailable(provider.getName());
    }
    if (mOptions.isRecoverProvider()) {
      register();
    }
  }
}","public void onProviderBecameUnavailable(@NotNull PushProvider provider){
  LOGD(TAG,String.format(""String_Node_Str"",provider));
  if (mCurrentProvider != null && mCurrentProvider.equals(provider)) {
    reset();
    mCurrentProvider.onAppStateChanged();
    mCurrentProvider=null;
    if (mListener != null) {
      mListener.onProviderBecameUnavailable(provider.getName());
    }
    if (mOptions.isRecoverProvider()) {
      register();
    }
  }
}",0.951048951048951
168298,"public void onRegistrationEnd(@NotNull RegistrationResult result){
  if (mState != State.STATE_REGISTRATION_RUNNING) {
    return;
  }
  if (result.isSuccess()) {
    mState=State.STATE_RUNNING;
    mRetryNumber=0;
    mCurrentProvider=getProviderByName(result.getProviderName());
    saveLastProvider(mCurrentProvider);
    Assert.assertNotNull(result.getRegistrationId());
    if (mListener != null) {
      mListener.onRegistered(result.getProviderName(),result.getRegistrationId());
    }
    Assert.assertNotNull(mCurrentProvider);
    registerPackageChangeReceiver(mCurrentProvider);
  }
 else {
    PushProvider provider=getProviderByName(result.getProviderName());
    Assert.assertNotNull(provider);
    if (result.isRecoverableError() && mOptions.getBackoff() != null && mRetryNumber < mOptions.getBackoff().getTryCount()) {
      postRegistrationRetry(provider);
    }
 else {
      if (mListener != null) {
        mListener.onRegistrationError(provider.getName(),result.getErrorCode());
      }
      mRetryNumber=0;
      PushProvider nextProvider=getNextCandidate(provider);
      if (nextProvider == null || !registerProvider(nextProvider)) {
        mState=State.STATE_NO_AVAILABLE_PROVIDERS;
        if (mListener != null) {
          mListener.onNoAvailableProvider();
        }
      }
    }
  }
}","public void onRegistrationEnd(@NotNull RegistrationResult result){
  if (mState != State.STATE_REGISTRATION_RUNNING) {
    return;
  }
  if (result.isSuccess()) {
    mState=State.STATE_RUNNING;
    cancelRetryRegistration();
    mCurrentProvider=getProviderByName(result.getProviderName());
    saveLastProvider(mCurrentProvider);
    Assert.assertNotNull(result.getRegistrationId());
    if (mListener != null) {
      mListener.onRegistered(result.getProviderName(),result.getRegistrationId());
    }
    Assert.assertNotNull(mCurrentProvider);
    registerPackageChangeReceiver(mCurrentProvider);
  }
 else {
    PushProvider provider=getProviderByName(result.getProviderName());
    Assert.assertNotNull(provider);
    if (!result.isRecoverableError() || !postRegistrationRetry(provider)) {
      if (mListener != null) {
        mListener.onRegistrationError(provider.getName(),result.getErrorCode());
      }
      mRetryNumber=0;
      registerNextProvider(provider);
    }
  }
}",0.2022569444444444
168299,"public void onNeedRetryRegister(@NotNull String providerName){
  if (mCurrentProvider != null && providerName.equals(mCurrentProvider.getName())) {
    reset();
    mCurrentProvider.onAppStateChanged();
    registerProvider(mCurrentProvider);
  }
}","public void onNeedRetryRegister(@NotNull String providerName){
  if (mCurrentProvider != null && mCurrentProvider.getName().equals(providerName)) {
    reset();
    mCurrentProvider.onAppStateChanged();
    registerProvider(mCurrentProvider);
  }
}",0.5564516129032258
168300,"private void reset(){
  mPreferences.edit().clear().apply();
  mState=State.STATE_NONE;
  mRetryNumber=0;
  if (mRegistrationRunnable != null) {
    sHandler.removeCallbacks(mRegistrationRunnable);
    mRegistrationRunnable=null;
  }
}","private void reset(){
  mPreferences.edit().clear().apply();
  mState=State.STATE_NONE;
  cancelRetryRegistration();
}",0.6345609065155807
168301,"public synchronized void register(){
  checkInitDone();
switch (mState) {
case STATE_NONE:
case STATE_NO_AVAILABLE_PROVIDERS:
    mState=State.STATE_REGISTRATION_RUNNING;
  PushProvider provider=getNextCandidate(null);
if (provider == null || !registerProvider(provider)) {
  if (mListener != null) {
    mListener.onNoAvailableProvider();
  }
  mState=State.STATE_NONE;
}
break;
case STATE_UNREGISTRATION_RUNNING:
throw new OpenPushException(""String_Node_Str"");
default :
throw new OpenPushException(""String_Node_Str"");
}
}","public synchronized void register(){
  checkInitDone();
switch (mState) {
case STATE_NONE:
case STATE_NO_AVAILABLE_PROVIDERS:
    mState=State.STATE_REGISTRATION_RUNNING;
  registerNextProvider(null);
break;
case STATE_UNREGISTRATION_RUNNING:
throw new OpenPushException(""String_Node_Str"");
default :
throw new OpenPushException(""String_Node_Str"");
}
}",0.776255707762557
168302,"private void postRegistrationRetry(@NotNull PushProvider provider){
  long start=System.currentTimeMillis() + mOptions.getBackoff().getDelay(mRetryNumber);
  mRetryNumber++;
  if (mRegistrationRunnable == null) {
    mRegistrationRunnable=new RetryRegistrationRunnable(provider);
  }
  sHandler.postAtTime(mRegistrationRunnable,start);
}","private boolean postRegistrationRetry(@NotNull PushProvider provider){
  if (mOptions.getBackoff() != null && mRetryNumber < mOptions.getBackoff().getTryCount()) {
    long start=System.currentTimeMillis() + mOptions.getBackoff().getDelay(mRetryNumber);
    mRetryNumber++;
    if (mRegistrationRunnable == null || !mRegistrationRunnable.getProvider().equals(provider)) {
      mRegistrationRunnable=new RetryRegistrationRunnable(provider);
    }
    sHandler.postAtTime(mRegistrationRunnable,start);
    return true;
  }
 else {
    return false;
  }
}",0.748314606741573
168303,"private void saveProvider(PushProvider provider){
  mAppContext.getSharedPreferences(PREFERENCES,Context.MODE_PRIVATE).edit().putString(KEY_LAST_PROVIDER_NAME,provider.getName()).apply();
}","private void saveProvider(@Nullable PushProvider provider){
  if (provider == null) {
    mAppContext.getSharedPreferences(PREFERENCES,Context.MODE_PRIVATE).edit().remove(KEY_LAST_PROVIDER_NAME).apply();
  }
 else {
    mAppContext.getSharedPreferences(PREFERENCES,Context.MODE_PRIVATE).edit().putString(KEY_LAST_PROVIDER_NAME,provider.getName()).apply();
  }
}",0.6181818181818182
168304,"private OpenPushHelper(@NotNull Context context){
  mAppContext=context.getApplicationContext();
  sListener=new OpenPushListener(mAppContext);
  mInitStatus=getSavedInitStatus();
  PushProvider provider=getLastProvider();
  if (provider != null && provider.isAvailable() && mInitStatus == INIT_SUCCESS) {
    mCurrentProvider=provider;
  }
}","private OpenPushHelper(@NotNull Context context){
  mAppContext=context.getApplicationContext();
  sListener=new BroadcastOpenPushListener(mAppContext);
  mInitStatus=getSavedInitStatus();
  PushProvider provider=getLastProvider();
  if (provider != null && provider.isAvailable() && mInitStatus == INIT_SUCCESS) {
    mCurrentProvider=provider;
  }
}",0.987012987012987
168305,"private void onRegistrationResult(@NotNull final ProviderRegistrationResult result){
  final PushProvider provider=getProviderByName(result.getProviderName());
  Assert.assertNotNull(provider);
  if (result.isSuccess()) {
    mInitStatus=INIT_SUCCESS;
    saveInitStatus(INIT_SUCCESS);
    mRetryNumber=0;
    mCurrentProvider=provider;
    saveProvider(mCurrentProvider);
    sListener.onRegistered(result.getProviderName(),result.getRegistrationId());
  }
 else {
    if (result.isRecoverableError() && mOptions.getRetryPolice() != null && mRetryNumber < mOptions.getRetryPolice().tryCount()) {
      sHandler.postDelayed(new RetryRegistrationRunnable(provider),mOptions.getRetryPolice().getDelay(mRetryNumber));
      mRetryNumber++;
    }
 else {
      sListener.onRegistrationError(provider.getName(),result.getErrorCode());
      mRetryNumber=0;
      PushProvider nextProvider=getNextCandidate(provider);
      if (nextProvider != null) {
        nextProvider.register();
      }
 else {
        mInitStatus=INIT_ERROR;
        sListener.onNoAvailableProvider();
      }
    }
  }
}","private void onRegistrationResult(@NotNull final ProviderRegistrationResult result){
  final PushProvider provider=getProviderByName(result.getProviderName());
  Assert.assertNotNull(provider);
  if (result.isSuccess()) {
    mInitStatus=INIT_SUCCESS;
    mAppContext.getSharedPreferences(PREFERENCES,Context.MODE_PRIVATE).edit().putInt(KEY_INIT_STATUS,INIT_SUCCESS).apply();
    mRetryNumber=0;
    mCurrentProvider=provider;
    saveProvider(mCurrentProvider);
    sListener.onRegistered(result.getProviderName(),result.getRegistrationId());
  }
 else {
    if (result.isRecoverableError() && mOptions.getRetryPolice() != null && mRetryNumber < mOptions.getRetryPolice().tryCount()) {
      sHandler.postDelayed(new RetryRegistrationRunnable(provider),mOptions.getRetryPolice().getDelay(mRetryNumber));
      mRetryNumber++;
    }
 else {
      sListener.onRegistrationError(provider.getName(),result.getErrorCode());
      mRetryNumber=0;
      PushProvider nextProvider=getNextCandidate(provider);
      if (nextProvider != null) {
        nextProvider.register();
      }
 else {
        mInitStatus=INIT_ERROR;
        sListener.onNoAvailableProvider();
      }
    }
  }
}",0.9470899470899472
168306,"void onRegistrationError(@NotNull String providerName,int errorId){
  Bundle extras=new Bundle(1);
  extras.putInt(OpenPushConstants.EXTRA_ERROR_ID,errorId);
  sendBroadcast(OpenPushConstants.ACTION_REGISTRATION_ERROR,providerName,extras);
}","void onRegistrationError(@NotNull String providerName,int errorId);",0.435064935064935
168307,"void onNoAvailableProvider(){
  sendBroadcast(OpenPushConstants.ACTION_NO_AVAILABLE_PROVIDER,null,null);
}",void onNoAvailableProvider();,0.4296296296296296
168308,"public void onMessage(@NotNull String providerName,@Nullable Bundle extras){
  sendBroadcast(OpenPushConstants.ACTION_MESSAGE,providerName,extras);
}","void onMessage(@NotNull String providerName,@Nullable Bundle extras);",0.6330275229357798
168309,"public void onDeletedMessages(@NotNull String providerName,@Nullable Bundle extras){
  sendBroadcast(OpenPushConstants.ACTION_DELETED_MESSAGES,providerName,extras);
}","void onDeletedMessages(@NotNull String providerName,@Nullable Bundle extras);",0.6337448559670782
168310,"void onRegistered(@NotNull String providerName,@Nullable String registrationId){
  Bundle extras=new Bundle(1);
  extras.putString(OpenPushConstants.EXTRA_REGISTRATION_ID,registrationId);
  sendBroadcast(OpenPushConstants.ACTION_REGISTERED,providerName,extras);
}","void onRegistered(@NotNull String providerName,@Nullable String registrationId);",0.466472303206997
168311,"public void onUnregistered(@NotNull String providerName,@Nullable String registrationId){
  Bundle extras=new Bundle(1);
  extras.putString(OpenPushConstants.EXTRA_REGISTRATION_ID,registrationId);
  sendBroadcast(OpenPushConstants.ACTION_UNREGISTERED,providerName,extras);
}","void onUnregistered(@NotNull String providerName,@Nullable String registrationId);",0.4606741573033708
168312,"public ProviderRegistrationResult(@NotNull String providerName,@MagicConstant(intValues={OpenPushConstants.ERROR_INVALID_PARAMETERS,OpenPushConstants.ERROR_INVALID_SENDER,OpenPushConstants.ERROR_SERVICE_NOT_AVAILABLE,OpenPushConstants.ERROR_UNKNOWN,OpenPushConstants.ERROR_AUTHEFICATION_FAILED}) int errorCode){
  mProviderName=providerName;
  mRegistrationId=null;
  mErrorCode=errorCode;
}","public ProviderRegistrationResult(@NotNull String providerName,@MagicConstant(intValues={OpenPushConstants.ERROR_INVALID_PARAMETERS,OpenPushConstants.ERROR_INVALID_SENDER,OpenPushConstants.ERROR_SERVICE_NOT_AVAILABLE,OpenPushConstants.ERROR_UNKNOWN,OpenPushConstants.ERROR_AUTHEFICATION_FAILED}) int errorCode,boolean recoverableError){
  mProviderName=providerName;
  mRegistrationId=null;
  mErrorCode=errorCode;
  mRecoverableError=recoverableError;
}",0.9254437869822484
168313,"public static void notifyRegistrationEnd(@NotNull final ProviderRegistrationResult r){
  if (sInstance != null && sInstance.mInitStatus == INIT_IN_PROGRESS) {
    sInstance.onRegistrationResult(r);
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
}","public static void notifyRegistrationEnd(@NotNull final RegistrationResult r){
  if (sInstance != null && sInstance.mInitStatus == INIT_IN_PROGRESS) {
    sInstance.onRegistrationResult(r);
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
}",0.9854545454545456
168314,"private void onRegistrationResult(@NotNull final ProviderRegistrationResult result){
  final PushProvider provider=getProviderByName(result.getProviderName());
  Assert.assertNotNull(provider);
  if (result.isSuccess()) {
    mInitStatus=INIT_SUCCESS;
    mAppContext.getSharedPreferences(PREFERENCES,Context.MODE_PRIVATE).edit().putInt(KEY_INIT_STATUS,INIT_SUCCESS).apply();
    mRetryNumber=0;
    mCurrentProvider=provider;
    saveProvider(mCurrentProvider);
    sListener.onRegistered(result.getProviderName(),result.getRegistrationId());
  }
 else {
    if (result.isRecoverableError() && mOptions.getRetryPolice() != null && mRetryNumber < mOptions.getRetryPolice().tryCount()) {
      sHandler.postDelayed(new RetryRegistrationRunnable(provider),mOptions.getRetryPolice().getDelay(mRetryNumber));
      mRetryNumber++;
    }
 else {
      sListener.onRegistrationError(provider.getName(),result.getErrorCode());
      mRetryNumber=0;
      PushProvider nextProvider=getNextCandidate(provider);
      if (nextProvider != null) {
        nextProvider.register();
      }
 else {
        mInitStatus=INIT_ERROR;
        sListener.onNoAvailableProvider();
      }
    }
  }
}","private void onRegistrationResult(@NotNull final RegistrationResult result){
  final PushProvider provider=getProviderByName(result.getProviderName());
  Assert.assertNotNull(provider);
  if (result.isSuccess()) {
    mInitStatus=INIT_SUCCESS;
    mAppContext.getSharedPreferences(PREFERENCES,Context.MODE_PRIVATE).edit().putInt(KEY_INIT_STATUS,INIT_SUCCESS).apply();
    mRetryNumber=0;
    mCurrentProvider=provider;
    saveProvider(mCurrentProvider);
    sListener.onRegistered(result.getProviderName(),result.getRegistrationId());
  }
 else {
    if (result.isRecoverableError() && mOptions.getRetryPolice() != null && mRetryNumber < mOptions.getRetryPolice().tryCount()) {
      sHandler.postDelayed(new RetryRegistrationRunnable(provider),mOptions.getRetryPolice().getDelay(mRetryNumber));
      mRetryNumber++;
    }
 else {
      sListener.onRegistrationError(provider.getName(),result.getErrorCode());
      mRetryNumber=0;
      PushProvider nextProvider=getNextCandidate(provider);
      if (nextProvider != null) {
        nextProvider.register();
      }
 else {
        mInitStatus=INIT_ERROR;
        sListener.onNoAvailableProvider();
      }
    }
  }
}",0.9965957446808512
168315,"private void onError(@NotNull @MagicConstant(stringValues={GCMConstants.ERROR_AUTHEFICATION_FAILED,GCMConstants.ERROR_SERVICE_NOT_AVAILABLE}) String errorId){
  int error;
  if (errorId.equals(GCMConstants.ERROR_SERVICE_NOT_AVAILABLE)) {
    error=OpenPushConstants.ERROR_SERVICE_NOT_AVAILABLE;
  }
 else   if (errorId.equals(GCMConstants.ERROR_AUTHEFICATION_FAILED)) {
    error=OpenPushConstants.ERROR_AUTHEFICATION_FAILED;
  }
 else {
    error=OpenPushConstants.ERROR_UNKNOWN;
  }
  OpenPushHelper.notifyRegistrationEnd(new ProviderRegistrationResult(GCMProvider.NAME,error));
}","private void onError(@NotNull @MagicConstant(stringValues={GCMConstants.ERROR_AUTHEFICATION_FAILED,GCMConstants.ERROR_SERVICE_NOT_AVAILABLE}) String errorId){
  int error;
  if (errorId.equals(GCMConstants.ERROR_SERVICE_NOT_AVAILABLE)) {
    error=OpenPushConstants.ERROR_SERVICE_NOT_AVAILABLE;
  }
 else   if (errorId.equals(GCMConstants.ERROR_AUTHEFICATION_FAILED)) {
    error=OpenPushConstants.ERROR_AUTHEFICATION_FAILED;
  }
 else {
    error=OpenPushConstants.ERROR_UNKNOWN;
  }
  OpenPushHelper.notifyRegistrationEnd(new RegistrationResult(GCMProvider.NAME,error));
}",0.9550173010380624
168316,"private void onRegistered(String registrationToken){
  OpenPushHelper.notifyRegistrationEnd(new ProviderRegistrationResult(GCMProvider.NAME,registrationToken));
}","private void onRegistered(String registrationToken){
  OpenPushHelper.notifyRegistrationEnd(new RegistrationResult(GCMProvider.NAME,registrationToken));
}",0.9746835443037974
168317,"/** 
 * Called on a registration error that could be retried. By default, it does nothing and returns true, but could be overridden to change that behavior and/or display the error.
 * @param appContext Application's context.
 * @param errorId    Error id returned by the Push Notifications service.
 * @return If true, failed operation will be retried (using exponential backoff).
 */
@Override protected boolean onRecoverableError(@NotNull Context appContext,@NotNull @MagicConstant(stringValues={PushConstants.ERROR_INVALID_PARAMETERS,PushConstants.ERROR_INVALID_SENDER,PushConstants.ERROR_SERVICE_NOT_AVAILABLE}) String errorId){
  OpenPushHelper.notifyRegistrationEnd(new ProviderRegistrationResult(NokiaPushProvider.NAME,convertError(errorId),true));
  return false;
}","/** 
 * Called on a registration error that could be retried. By default, it does nothing and returns true, but could be overridden to change that behavior and/or display the error.
 * @param appContext Application's context.
 * @param errorId    Error id returned by the Push Notifications service.
 * @return If true, failed operation will be retried (using exponential backoff).
 */
@Override protected boolean onRecoverableError(@NotNull Context appContext,@NotNull @MagicConstant(stringValues={PushConstants.ERROR_INVALID_PARAMETERS,PushConstants.ERROR_INVALID_SENDER,PushConstants.ERROR_SERVICE_NOT_AVAILABLE}) String errorId){
  OpenPushHelper.notifyRegistrationEnd(new RegistrationResult(NokiaPushProvider.NAME,convertError(errorId),true));
  return false;
}",0.9948051948051948
168318,"/** 
 * Called on registration or unregistration error.
 * @param appContext Application's context.
 * @param errorId    Error id returned by the Push Notifications service.
 */
@Override protected void onError(@NotNull Context appContext,String errorId){
  OpenPushHelper.notifyRegistrationEnd(new ProviderRegistrationResult(NokiaPushProvider.NAME,convertError(errorId),false));
}","/** 
 * Called on registration or unregistration error.
 * @param appContext Application's context.
 * @param errorId    Error id returned by the Push Notifications service.
 */
@Override protected void onError(@NotNull Context appContext,String errorId){
  OpenPushHelper.notifyRegistrationEnd(new RegistrationResult(NokiaPushProvider.NAME,convertError(errorId),false));
}",0.9893899204244032
168319,"/** 
 * Called after a device has been registered.
 * @param appContext        Application's context.
 * @param registrationToken The registration id returned by the Push Notifications service.
 */
@Override protected void onRegistered(@NotNull Context appContext,@NotNull String registrationToken){
  OpenPushHelper.notifyRegistrationEnd(new ProviderRegistrationResult(NokiaPushProvider.NAME,registrationToken));
}","/** 
 * Called after a device has been registered.
 * @param appContext        Application's context.
 * @param registrationToken The registration id returned by the Push Notifications service.
 */
@Override protected void onRegistered(@NotNull Context appContext,@NotNull String registrationToken){
  OpenPushHelper.notifyRegistrationEnd(new RegistrationResult(NokiaPushProvider.NAME,registrationToken));
}",0.9902676399026764
168320,"public synchronized void init(@NotNull Context context,@NotNull Options options){
  if (mInitStatus == INIT_NOT_STARTED || mInitStatus == INIT_ERROR) {
    mInitStatus=INIT_IN_PROGRESS;
    mOptions=options;
    mAppContext=context.getApplicationContext();
    PushProvider provider=getLastProvider();
    if (provider != null && provider.isAvailable()) {
      mCurrentProvider=provider;
    }
 else {
      provider=getNextCandidate(null);
    }
    if (provider != null) {
      provider.register();
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","public synchronized void init(@NotNull Options options){
  if (mInitStatus == INIT_NOT_STARTED || mInitStatus == INIT_ERROR) {
    mInitStatus=INIT_IN_PROGRESS;
    mOptions=options;
    PushProvider provider=getNextCandidate(null);
    if (provider != null) {
      provider.register();
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.7334035827186512
168321,"private OpenPushHelper(@NotNull Context context){
  mAppContext=context.getApplicationContext();
}","private OpenPushHelper(@NotNull Context context){
  mAppContext=context.getApplicationContext();
  sListener=new OpenPushListener(mAppContext);
  mInitStatus=getSavedInitStatus();
  PushProvider provider=getLastProvider();
  if (provider != null && provider.isAvailable() && mInitStatus == INIT_SUCCESS) {
    mCurrentProvider=provider;
  }
}",0.4454545454545454
168322,"private void onRegistrationResult(@NotNull final ProviderRegistrationResult e){
  if (e.getErrorCode() == OpenPushConstants.NO_ERROR) {
    mRetryNumber=0;
    mCurrentProvider=getProviderByName(e.getProviderName());
    saveProvider(mCurrentProvider);
  }
 else {
    final PushProvider lastProvider=getProviderByName(e.getProviderName());
    if (mOptions.getRetryPolice() != null && mRetryNumber < mOptions.getRetryPolice().tryCount()) {
      sHandler.postDelayed(new RetryRegistrationRunnable(lastProvider),mOptions.getRetryPolice().getDelay(mRetryNumber));
      mRetryNumber++;
    }
 else {
      PushProvider provider=getNextCandidate(lastProvider);
      if (provider != null) {
        provider.register();
      }
 else {
        mInitStatus=INIT_ERROR;
      }
    }
  }
}","private void onRegistrationResult(@NotNull final ProviderRegistrationResult result){
  final PushProvider provider=getProviderByName(result.getProviderName());
  Assert.assertNotNull(provider);
  if (result.isSuccess()) {
    mInitStatus=INIT_SUCCESS;
    saveInitStatus(INIT_SUCCESS);
    mRetryNumber=0;
    mCurrentProvider=provider;
    saveProvider(mCurrentProvider);
    sListener.onRegistered(result.getProviderName(),result.getRegistrationId());
  }
 else {
    if (result.isRecoverableError() && mOptions.getRetryPolice() != null && mRetryNumber < mOptions.getRetryPolice().tryCount()) {
      sHandler.postDelayed(new RetryRegistrationRunnable(provider),mOptions.getRetryPolice().getDelay(mRetryNumber));
      mRetryNumber++;
    }
 else {
      sListener.onRegistrationError(provider.getName(),result.getErrorCode());
      mRetryNumber=0;
      PushProvider nextProvider=getNextCandidate(provider);
      if (nextProvider != null) {
        nextProvider.register();
      }
 else {
        mInitStatus=INIT_ERROR;
        sListener.onNoAvailableProvider();
      }
    }
  }
}",0.2411953041622198
168323,"/** 
 * Gets the registration id.
 */
String getRegistrationId();","/** 
 * Gets the registration id.
 */
@Nullable String getRegistrationId();",0.9285714285714286
168324,"@Override public String getRegistrationId(){
  return mAdm.getRegistrationId();
}","@Override @Nullable public String getRegistrationId(){
  return mAdm.getRegistrationId();
}",0.9418604651162792
168325,"/** 
 * Called each time ADM delivers a message to an instance of your app.
 * @param intent An intent containing the message and associated data.You extract the message content from the set of extras attached to the  {@code com.amazon.device.messaging.intent.RECEIVE intent}. For an example of defining the behavior of the onMessage() callback, see SampleADMMessageHandler.java in the ADMMessenger sample app.
 */
@Override protected void onMessage(@NotNull Intent intent){
  OpenPushHelper.sendMessage(this,ADMProvider.NAME,intent.getExtras());
}","/** 
 * Called each time ADM delivers a message to an instance of your app.
 * @param intent An intent containing the message and associated data.You extract the message content from the set of extras attached to the  {@code com.amazon.device.messaging.intent.RECEIVE intent}. For an example of defining the behavior of the onMessage() callback, see SampleADMMessageHandler.java in the ADMMessenger sample app.
 */
@Override protected void onMessage(@NotNull Intent intent){
  OpenPushHelper.getListener().onMessage(ADMProvider.NAME,intent.getExtras());
}",0.9646418857660924
168326,"/** 
 * Called when a registration request succeeds. ADM may call this message in response to your app calling startRegister() or if ADM has updated the registration ID for this app instance.
 * @param registrationId The new registration ID for the instance of your app.Pass this value to your components that are using ADM to send messages. The  {@link com.amazon.device.messaging.ADM#getRegistrationId()}method also obtains the registration ID for an instance of your app.
 */
@Override protected void onRegistered(@NotNull String registrationId){
  OpenPushHelper.notifyRegistrationEnd(new ProviderRegistrationResult(ADMProvider.NAME,registrationId));
  OpenPushHelper.sendRegistered(this,ADMProvider.NAME,registrationId);
}","/** 
 * Called when a registration request succeeds. ADM may call this message in response to your app calling startRegister() or if ADM has updated the registration ID for this app instance.
 * @param registrationId The new registration ID for the instance of your app.Pass this value to your components that are using ADM to send messages. The  {@link com.amazon.device.messaging.ADM#getRegistrationId()}method also obtains the registration ID for an instance of your app.
 */
@Override protected void onRegistered(@NotNull String registrationId){
  OpenPushHelper.notifyRegistrationEnd(new ProviderRegistrationResult(ADMProvider.NAME,registrationId));
}",0.9486623282718728
168327,"/** 
 * Called on successful unregistration. This method may be called in response to your app calling startUnregister() or if ADM has unregistered the app for some reason (typically because the device has lost its association with a user's Amazon account). If this message is called, your app should notify your components that are using ADM to send messages, so that they know this instance of your app is no longer a valid recipient.
 * @param registrationId The registration ID for the instance of your app that is now unregistered.This ID is no longer a valid destination for messages. Calling  {@link com.amazon.device.messaging.ADM#getRegistrationId()}will show the registration ID for an unregistered app as   {@code null}.
 */
@Override protected void onUnregistered(@NotNull String registrationId){
  OpenPushHelper.sendUnregistered(this,ADMProvider.NAME,registrationId);
}","/** 
 * Called on successful unregistration. This method may be called in response to your app calling startUnregister() or if ADM has unregistered the app for some reason (typically because the device has lost its association with a user's Amazon account). If this message is called, your app should notify your components that are using ADM to send messages, so that they know this instance of your app is no longer a valid recipient.
 * @param registrationId The registration ID for the instance of your app that is now unregistered.This ID is no longer a valid destination for messages. Calling  {@link com.amazon.device.messaging.ADM#getRegistrationId()}will show the registration ID for an unregistered app as   {@code null}.
 */
@Override protected void onUnregistered(@NotNull String registrationId){
  OpenPushHelper.getListener().onUnregistered(ADMProvider.NAME,registrationId);
}",0.9858996051889451
168328,"@Override public void onClick(DialogInterface dialogInterface,int i){
  String filename=OpenMRS.getInstance().getOpenMRSDir() + File.separator + mOpenMRSLogger.getLogFilename();
  Intent email=new Intent(Intent.ACTION_SEND);
  email.putExtra(Intent.EXTRA_SUBJECT,""String_Node_Str"");
  email.putExtra(Intent.EXTRA_TEXT,error);
  email.putExtra(Intent.EXTRA_STREAM,Uri.parse(""String_Node_Str"" + filename));
  email.setType(""String_Node_Str"");
  startActivity(Intent.createChooser(email,""String_Node_Str""));
}","@Override public void onClick(DialogInterface dialogInterface,int i){
  String filename=OpenMRS.getInstance().getOpenMRSDir() + File.separator + mOpenMRSLogger.getLogFilename();
  Intent email=new Intent(Intent.ACTION_SEND);
  email.putExtra(Intent.EXTRA_SUBJECT,R.string.error_email_subject_app_crashed);
  email.putExtra(Intent.EXTRA_TEXT,error);
  email.putExtra(Intent.EXTRA_STREAM,Uri.parse(""String_Node_Str"" + filename));
  email.setType(""String_Node_Str"");
  startActivity(Intent.createChooser(email,getString(R.string.choose_a_email_client)));
}",0.8932955618508026
168329,"public void showAppCrashDialog(String error){
  AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(this);
  alertDialogBuilder.setTitle(R.string.crash_dialog_title);
  alertDialogBuilder.setMessage(R.string.crash_dialog_message).setCancelable(false).setPositiveButton(R.string.crash_dialog_positive_button,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      dialog.cancel();
    }
  }
).setNegativeButton(R.string.crash_dialog_negative_button,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      finishAffinity();
    }
  }
).setNeutralButton(R.string.crash_dialog_neutral_button,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      String filename=OpenMRS.getInstance().getOpenMRSDir() + File.separator + mOpenMRSLogger.getLogFilename();
      Intent email=new Intent(Intent.ACTION_SEND);
      email.putExtra(Intent.EXTRA_SUBJECT,""String_Node_Str"");
      email.putExtra(Intent.EXTRA_TEXT,error);
      email.putExtra(Intent.EXTRA_STREAM,Uri.parse(""String_Node_Str"" + filename));
      email.setType(""String_Node_Str"");
      startActivity(Intent.createChooser(email,""String_Node_Str""));
    }
  }
);
  AlertDialog alertDialog=alertDialogBuilder.create();
  alertDialog.show();
}","public void showAppCrashDialog(String error){
  AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(this);
  alertDialogBuilder.setTitle(R.string.crash_dialog_title);
  alertDialogBuilder.setMessage(R.string.crash_dialog_message).setCancelable(false).setPositiveButton(R.string.crash_dialog_positive_button,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      dialog.cancel();
    }
  }
).setNegativeButton(R.string.crash_dialog_negative_button,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      finishAffinity();
    }
  }
).setNeutralButton(R.string.crash_dialog_neutral_button,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      String filename=OpenMRS.getInstance().getOpenMRSDir() + File.separator + mOpenMRSLogger.getLogFilename();
      Intent email=new Intent(Intent.ACTION_SEND);
      email.putExtra(Intent.EXTRA_SUBJECT,R.string.error_email_subject_app_crashed);
      email.putExtra(Intent.EXTRA_TEXT,error);
      email.putExtra(Intent.EXTRA_STREAM,Uri.parse(""String_Node_Str"" + filename));
      email.setType(""String_Node_Str"");
      startActivity(Intent.createChooser(email,getString(R.string.choose_a_email_client)));
    }
  }
);
  AlertDialog alertDialog=alertDialogBuilder.create();
  alertDialog.show();
}",0.9633060206626292
168330,"private void showNoInternetConnectionSnackbar(){
  Snackbar snackbar=Snackbar.make(findViewById(android.R.id.content),""String_Node_Str"",Snackbar.LENGTH_SHORT);
  View sbView=snackbar.getView();
  TextView textView=(TextView)sbView.findViewById(android.support.design.R.id.snackbar_text);
  textView.setTextColor(Color.WHITE);
  snackbar.show();
}","private void showNoInternetConnectionSnackbar(){
  Snackbar snackbar=Snackbar.make(findViewById(android.R.id.content),getString(R.string.no_internet_connection_message),Snackbar.LENGTH_SHORT);
  View sbView=snackbar.getView();
  TextView textView=(TextView)sbView.findViewById(android.support.design.R.id.snackbar_text);
  textView.setTextColor(Color.WHITE);
  snackbar.show();
}",0.9075862068965516
168331,"private void addListeners(){
  gen.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){
    public void onCheckedChanged(    RadioGroup rGroup,    int checkedId){
      gendererror.setVisibility(View.GONE);
    }
  }
);
  edcountry.setThreshold(2);
  edcountry.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (edcountry.getText().length() >= edcountry.getThreshold()) {
        edcountry.showDropDown();
      }
      if (Arrays.asList(countries).contains(edcountry.getText().toString())) {
        edcountry.dismissDropDown();
      }
    }
  }
);
  edstate.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      addSuggestionsToCities();
    }
  }
);
  eddob.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (s.length() >= 8) {
        edmonth.getText().clear();
        edyr.getText().clear();
      }
    }
  }
);
  datePicker.setOnClickListener(v -> {
    int cYear;
    int cMonth;
    int cDay;
    if (bdt == null) {
      Calendar currentDate=Calendar.getInstance();
      cYear=currentDate.get(Calendar.YEAR);
      cMonth=currentDate.get(Calendar.MONTH);
      cDay=currentDate.get(Calendar.DAY_OF_MONTH);
    }
 else {
      cYear=bdt.getYear();
      cMonth=bdt.getMonthOfYear() - 1;
      cDay=bdt.getDayOfMonth();
    }
    edmonth.getText().clear();
    edyr.getText().clear();
    DatePickerDialog mDatePicker=new DatePickerDialog(AddEditPatientFragment.this.getActivity(),new DatePickerDialog.OnDateSetListener(){
      public void onDateSet(      DatePicker datepicker,      int selectedyear,      int selectedmonth,      int selectedday){
        int adjustedMonth=selectedmonth + 1;
        eddob.setText(selectedday + ""String_Node_Str"" + adjustedMonth+ ""String_Node_Str""+ selectedyear);
        birthdate=new LocalDate(selectedyear,adjustedMonth,selectedday);
        bdt=birthdate.toDateTimeAtStartOfDay().toDateTime();
      }
    }
,cYear,cMonth,cDay);
    mDatePicker.getDatePicker().setMaxDate(System.currentTimeMillis());
    mDatePicker.setTitle(""String_Node_Str"");
    mDatePicker.show();
  }
);
  capturePhotoBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      CameraOrGalleryPickerDialog dialog=CameraOrGalleryPickerDialog.getInstance(new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          if (which == 0)           AddEditPatientFragmentPermissionsDispatcher.capturePhotoWithCheck(AddEditPatientFragment.this);
 else {
            Intent i;
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT)             i=new Intent(Intent.ACTION_OPEN_DOCUMENT);
 else             i=new Intent(Intent.ACTION_GET_CONTENT);
            i.addCategory(Intent.CATEGORY_OPENABLE);
            i.setType(""String_Node_Str"");
            startActivityForResult(i,GALLERY_IMAGE_REQUEST);
          }
        }
      }
);
      dialog.show(getChildFragmentManager(),null);
    }
  }
);
  submitConfirm.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mPresenter.confirmRegister(createPatient());
    }
  }
);
  patientImageView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (output != null) {
        Intent i=new Intent(Intent.ACTION_VIEW);
        i.setDataAndType(Uri.fromFile(output),""String_Node_Str"");
        startActivity(i);
      }
 else       if (patientPhoto != null) {
        Intent intent=new Intent(getContext(),PatientPhotoActivity.class);
        ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
        patientPhoto.compress(Bitmap.CompressFormat.PNG,0,byteArrayOutputStream);
        intent.putExtra(""String_Node_Str"",byteArrayOutputStream.toByteArray());
        intent.putExtra(""String_Node_Str"",patientName);
        startActivity(intent);
      }
    }
  }
);
  TextWatcher textWatcher=new PatientBirthdateValidatorWatcher(eddob,edmonth,edyr);
  edmonth.addTextChangedListener(textWatcher);
  edyr.addTextChangedListener(textWatcher);
}","private void addListeners(){
  gen.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){
    public void onCheckedChanged(    RadioGroup rGroup,    int checkedId){
      gendererror.setVisibility(View.GONE);
    }
  }
);
  edcountry.setThreshold(2);
  edcountry.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (edcountry.getText().length() >= edcountry.getThreshold()) {
        edcountry.showDropDown();
      }
      if (Arrays.asList(countries).contains(edcountry.getText().toString())) {
        edcountry.dismissDropDown();
      }
    }
  }
);
  edstate.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      addSuggestionsToCities();
    }
  }
);
  eddob.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (s.length() >= 8) {
        edmonth.getText().clear();
        edyr.getText().clear();
      }
    }
  }
);
  datePicker.setOnClickListener(v -> {
    int cYear;
    int cMonth;
    int cDay;
    if (bdt == null) {
      Calendar currentDate=Calendar.getInstance();
      cYear=currentDate.get(Calendar.YEAR);
      cMonth=currentDate.get(Calendar.MONTH);
      cDay=currentDate.get(Calendar.DAY_OF_MONTH);
    }
 else {
      cYear=bdt.getYear();
      cMonth=bdt.getMonthOfYear() - 1;
      cDay=bdt.getDayOfMonth();
    }
    edmonth.getText().clear();
    edyr.getText().clear();
    DatePickerDialog mDatePicker=new DatePickerDialog(AddEditPatientFragment.this.getActivity(),new DatePickerDialog.OnDateSetListener(){
      public void onDateSet(      DatePicker datepicker,      int selectedyear,      int selectedmonth,      int selectedday){
        int adjustedMonth=selectedmonth + 1;
        eddob.setText(selectedday + ""String_Node_Str"" + adjustedMonth+ ""String_Node_Str""+ selectedyear);
        birthdate=new LocalDate(selectedyear,adjustedMonth,selectedday);
        bdt=birthdate.toDateTimeAtStartOfDay().toDateTime();
      }
    }
,cYear,cMonth,cDay);
    mDatePicker.getDatePicker().setMaxDate(System.currentTimeMillis());
    mDatePicker.setTitle(getString(R.string.date_picker_title));
    mDatePicker.show();
  }
);
  capturePhotoBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      CameraOrGalleryPickerDialog dialog=CameraOrGalleryPickerDialog.getInstance(new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          if (which == 0)           AddEditPatientFragmentPermissionsDispatcher.capturePhotoWithCheck(AddEditPatientFragment.this);
 else {
            Intent i;
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT)             i=new Intent(Intent.ACTION_OPEN_DOCUMENT);
 else             i=new Intent(Intent.ACTION_GET_CONTENT);
            i.addCategory(Intent.CATEGORY_OPENABLE);
            i.setType(""String_Node_Str"");
            startActivityForResult(i,GALLERY_IMAGE_REQUEST);
          }
        }
      }
);
      dialog.show(getChildFragmentManager(),null);
    }
  }
);
  submitConfirm.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mPresenter.confirmRegister(createPatient());
    }
  }
);
  patientImageView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (output != null) {
        Intent i=new Intent(Intent.ACTION_VIEW);
        i.setDataAndType(Uri.fromFile(output),""String_Node_Str"");
        startActivity(i);
      }
 else       if (patientPhoto != null) {
        Intent intent=new Intent(getContext(),PatientPhotoActivity.class);
        ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
        patientPhoto.compress(Bitmap.CompressFormat.PNG,0,byteArrayOutputStream);
        intent.putExtra(""String_Node_Str"",byteArrayOutputStream.toByteArray());
        intent.putExtra(""String_Node_Str"",patientName);
        startActivity(intent);
      }
    }
  }
);
  TextWatcher textWatcher=new PatientBirthdateValidatorWatcher(eddob,edmonth,edyr);
  edmonth.addTextChangedListener(textWatcher);
  edyr.addTextChangedListener(textWatcher);
}",0.9958433603150296
168332,"@Override public void attachSnackbarToActivity(){
  Snackbar snackbar=Snackbar.make(getActivity().findViewById(R.id.patientDashboardContentFrame),""String_Node_Str"",Snackbar.LENGTH_INDEFINITE);
  View view=snackbar.getView();
  TextView tv=(TextView)view.findViewById(android.support.design.R.id.snackbar_text);
  tv.setTextColor(Color.WHITE);
  snackbar.show();
}","@Override public void attachSnackbarToActivity(){
  Snackbar snackbar=Snackbar.make(getActivity().findViewById(R.id.patientDashboardContentFrame),getString(R.string.snackbar_no_internet_connection),Snackbar.LENGTH_INDEFINITE);
  View view=snackbar.getView();
  TextView tv=(TextView)view.findViewById(android.support.design.R.id.snackbar_text);
  tv.setTextColor(Color.WHITE);
  snackbar.show();
}",0.9105263157894736
168333,"@Override public void startFormDisplayActivity(Encounter encounter){
  Form form=encounter.getForm();
  if (form != null) {
    Intent intent=new Intent(getContext(),FormDisplayActivity.class);
    intent.putExtra(ApplicationConstants.BundleKeys.FORM_NAME,form.getName());
    intent.putExtra(ApplicationConstants.BundleKeys.PATIENT_ID_BUNDLE,encounter.getPatient().getId());
    intent.putExtra(ApplicationConstants.BundleKeys.VALUEREFERENCE,form.getValueReference());
    intent.putExtra(ApplicationConstants.BundleKeys.ENCOUNTERTYPE,encounter.getEncounterType().getUuid());
    intent.putParcelableArrayListExtra(ApplicationConstants.BundleKeys.FORM_FIELDS_LIST_BUNDLE,FormFieldsWrapper.create(encounter));
    startActivity(intent);
  }
 else {
    ToastUtil.notify(""String_Node_Str"");
  }
}","@Override public void startFormDisplayActivity(Encounter encounter){
  Form form=encounter.getForm();
  if (form != null) {
    Intent intent=new Intent(getContext(),FormDisplayActivity.class);
    intent.putExtra(ApplicationConstants.BundleKeys.FORM_NAME,form.getName());
    intent.putExtra(ApplicationConstants.BundleKeys.PATIENT_ID_BUNDLE,encounter.getPatient().getId());
    intent.putExtra(ApplicationConstants.BundleKeys.VALUEREFERENCE,form.getValueReference());
    intent.putExtra(ApplicationConstants.BundleKeys.ENCOUNTERTYPE,encounter.getEncounterType().getUuid());
    intent.putParcelableArrayListExtra(ApplicationConstants.BundleKeys.FORM_FIELDS_LIST_BUNDLE,FormFieldsWrapper.create(encounter));
    startActivity(intent);
  }
 else {
    ToastUtil.notify(getString(R.string.form_error));
  }
}",0.9794135995009358
168334,"@Override protected void onHandleIntent(Intent intent){
  if (NetworkUtils.isOnline()) {
    PatientAndMatchesWrapper patientAndMatchesWrapper=new PatientAndMatchesWrapper();
    List<Patient> patientList=new PatientDAO().getUnsyncedPatients();
    final ListIterator<Patient> it=patientList.listIterator();
    while (it.hasNext()) {
      final Patient patient=it.next();
      fetchSimilarPatients(patient,patientAndMatchesWrapper);
    }
    if (!patientAndMatchesWrapper.getMatchingPatients().isEmpty()) {
      Intent intent1=new Intent(getApplicationContext(),MatchingPatientsActivity.class);
      intent1.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      intent1.putExtra(ApplicationConstants.BundleKeys.CALCULATED_LOCALLY,calculatedLocally);
      intent1.putExtra(ApplicationConstants.BundleKeys.PATIENTS_AND_MATCHES,patientAndMatchesWrapper);
      startActivity(intent1);
    }
  }
 else {
    ToastUtil.error(""String_Node_Str"" + ""String_Node_Str"");
  }
}","@Override protected void onHandleIntent(Intent intent){
  if (NetworkUtils.isOnline()) {
    PatientAndMatchesWrapper patientAndMatchesWrapper=new PatientAndMatchesWrapper();
    List<Patient> patientList=new PatientDAO().getUnsyncedPatients();
    final ListIterator<Patient> it=patientList.listIterator();
    while (it.hasNext()) {
      final Patient patient=it.next();
      fetchSimilarPatients(patient,patientAndMatchesWrapper);
    }
    if (!patientAndMatchesWrapper.getMatchingPatients().isEmpty()) {
      Intent intent1=new Intent(getApplicationContext(),MatchingPatientsActivity.class);
      intent1.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      intent1.putExtra(ApplicationConstants.BundleKeys.CALCULATED_LOCALLY,calculatedLocally);
      intent1.putExtra(ApplicationConstants.BundleKeys.PATIENTS_AND_MATCHES,patientAndMatchesWrapper);
      startActivity(intent1);
    }
  }
 else {
    ToastUtil.error(getString(R.string.activity_no_internet_connection) + getString(R.string.activity_sync_after_connection));
  }
}",0.9384076114171256
168335,"private Patient createPatient(){
  Person person=new Person();
  PersonAddress address=new PersonAddress();
  address.setAddress1(ViewUtils.getInput(edaddr1));
  address.setAddress2(ViewUtils.getInput(edaddr2));
  address.setCityVillage(ViewUtils.getInput(edcity));
  address.setPostalCode(ViewUtils.getInput(edpostal));
  address.setCountry(ViewUtils.getInput(edcountry));
  address.setStateProvince(ViewUtils.getInput(edstate));
  address.setPreferred(true);
  List<PersonAddress> addresses=new ArrayList<>();
  addresses.add(address);
  person.setAddresses(addresses);
  PersonName name=new PersonName();
  name.setFamilyName(ViewUtils.getInput(edlname));
  name.setGivenName(ViewUtils.getInput(edfname));
  name.setMiddleName(ViewUtils.getInput(edmname));
  List<PersonName> names=new ArrayList<>();
  names.add(name);
  person.setNames(names);
  String[] genderChoices={""String_Node_Str"",""String_Node_Str""};
  int index=gen.indexOfChild(getActivity().findViewById(gen.getCheckedRadioButtonId()));
  if (index != -1) {
    person.setGender(genderChoices[index]);
  }
 else {
    person.setGender(null);
  }
  String birthdate=null;
  if (ViewUtils.isEmpty(eddob)) {
    if (!StringUtils.isBlank(ViewUtils.getInput(edyr)) || !StringUtils.isBlank(ViewUtils.getInput(edmonth))) {
      int yeardiff=ViewUtils.isEmpty(edyr) ? 0 : Integer.parseInt(edyr.getText().toString());
      int mondiff=ViewUtils.isEmpty(edmonth) ? 0 : Integer.parseInt(edmonth.getText().toString());
      LocalDate now=new LocalDate();
      bdt=now.toDateTimeAtStartOfDay().toDateTime();
      bdt=bdt.minusYears(yeardiff);
      bdt=bdt.minusMonths(mondiff);
      person.setBirthdateEstimated(true);
      birthdate=bdt.toString();
    }
  }
 else {
    birthdate=bdt.toString();
  }
  person.setBirthdate(birthdate);
  final Patient patient=new Patient();
  patient.setPerson(person);
  patient.setUuid(""String_Node_Str"");
  return patient;
}","private Patient createPatient(){
  Person person=new Person();
  PersonAddress address=new PersonAddress();
  address.setAddress1(ViewUtils.getInput(edaddr1));
  address.setAddress2(ViewUtils.getInput(edaddr2));
  address.setCityVillage(ViewUtils.getInput(edcity));
  address.setPostalCode(ViewUtils.getInput(edpostal));
  address.setCountry(ViewUtils.getInput(edcountry));
  address.setStateProvince(ViewUtils.getInput(edstate));
  address.setPreferred(true);
  List<PersonAddress> addresses=new ArrayList<>();
  addresses.add(address);
  person.setAddresses(addresses);
  PersonName name=new PersonName();
  name.setFamilyName(ViewUtils.getInput(edlname));
  name.setGivenName(ViewUtils.getInput(edfname));
  name.setMiddleName(ViewUtils.getInput(edmname));
  List<PersonName> names=new ArrayList<>();
  names.add(name);
  person.setNames(names);
  String[] genderChoices={""String_Node_Str"",""String_Node_Str""};
  int index=gen.indexOfChild(getActivity().findViewById(gen.getCheckedRadioButtonId()));
  if (index != -1) {
    person.setGender(genderChoices[index]);
  }
 else {
    person.setGender(null);
  }
  String birthdate=null;
  if (ViewUtils.isEmpty(eddob)) {
    if (!StringUtils.isBlank(ViewUtils.getInput(edyr)) || !StringUtils.isBlank(ViewUtils.getInput(edmonth))) {
      int yeardiff=ViewUtils.isEmpty(edyr) ? 0 : Integer.parseInt(edyr.getText().toString());
      int mondiff=ViewUtils.isEmpty(edmonth) ? 0 : Integer.parseInt(edmonth.getText().toString());
      LocalDate now=new LocalDate();
      bdt=now.toDateTimeAtStartOfDay().toDateTime();
      bdt=bdt.minusYears(yeardiff);
      bdt=bdt.minusMonths(mondiff);
      person.setBirthdateEstimated(true);
      birthdate=dateTimeFormatter.print(bdt);
    }
  }
 else {
    birthdate=dateTimeFormatter.print(bdt);
  }
  person.setBirthdate(birthdate);
  final Patient patient=new Patient();
  patient.setPerson(person);
  patient.setUuid(""String_Node_Str"");
  return patient;
}",0.9824289405684754
168336,"public void onDateSet(DatePicker datepicker,int selectedyear,int selectedmonth,int selectedday){
  eddob.setText(selectedday + ""String_Node_Str"" + selectedmonth+ ""String_Node_Str""+ selectedyear);
  birthdate=new LocalDate(selectedyear,selectedmonth,selectedday);
  bdt=birthdate.toDateTimeAtStartOfDay().toDateTime();
}","public void onDateSet(DatePicker datepicker,int selectedyear,int selectedmonth,int selectedday){
  selectedmonth++;
  eddob.setText(selectedday + ""String_Node_Str"" + selectedmonth+ ""String_Node_Str""+ selectedyear);
  birthdate=new LocalDate(selectedyear,selectedmonth,selectedday);
  bdt=birthdate.toDateTimeAtStartOfDay().toDateTime();
}",0.9710806697108066
168337,"private void addListeners(){
  gen.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){
    public void onCheckedChanged(    RadioGroup rGroup,    int checkedId){
      gendererror.setVisibility(View.GONE);
    }
  }
);
  if (eddob != null) {
    eddob.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        Calendar currentDate=Calendar.getInstance();
        int cYear=currentDate.get(Calendar.YEAR);
        int cMonth=currentDate.get(Calendar.MONTH);
        int cDay=currentDate.get(Calendar.DAY_OF_MONTH);
        edmonth.getText().clear();
        edyr.getText().clear();
        DatePickerDialog mDatePicker=new DatePickerDialog(RegisterPatientFragment.this.getActivity(),new DatePickerDialog.OnDateSetListener(){
          public void onDateSet(          DatePicker datepicker,          int selectedyear,          int selectedmonth,          int selectedday){
            eddob.setText(selectedday + ""String_Node_Str"" + selectedmonth+ ""String_Node_Str""+ selectedyear);
            birthdate=new LocalDate(selectedyear,selectedmonth,selectedday);
            bdt=birthdate.toDateTimeAtStartOfDay().toDateTime();
          }
        }
,cYear,cMonth,cDay);
        mDatePicker.setTitle(""String_Node_Str"");
        mDatePicker.show();
      }
    }
);
  }
  registerConfirm.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mPresenter.confirm(createPatient());
    }
  }
);
  TextWatcher textWatcher=new RegisterPatientBirthdateValidatorWatcher(eddob,edmonth,edyr);
  edmonth.addTextChangedListener(textWatcher);
  edyr.addTextChangedListener(textWatcher);
}","private void addListeners(){
  gen.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){
    public void onCheckedChanged(    RadioGroup rGroup,    int checkedId){
      gendererror.setVisibility(View.GONE);
    }
  }
);
  if (eddob != null) {
    eddob.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        Calendar currentDate=Calendar.getInstance();
        int cYear=currentDate.get(Calendar.YEAR);
        int cMonth=currentDate.get(Calendar.MONTH);
        int cDay=currentDate.get(Calendar.DAY_OF_MONTH);
        edmonth.getText().clear();
        edyr.getText().clear();
        DatePickerDialog mDatePicker=new DatePickerDialog(RegisterPatientFragment.this.getActivity(),new DatePickerDialog.OnDateSetListener(){
          public void onDateSet(          DatePicker datepicker,          int selectedyear,          int selectedmonth,          int selectedday){
            selectedmonth++;
            eddob.setText(selectedday + ""String_Node_Str"" + selectedmonth+ ""String_Node_Str""+ selectedyear);
            birthdate=new LocalDate(selectedyear,selectedmonth,selectedday);
            bdt=birthdate.toDateTimeAtStartOfDay().toDateTime();
          }
        }
,cYear,cMonth,cDay);
        mDatePicker.setTitle(""String_Node_Str"");
        mDatePicker.show();
      }
    }
);
  }
  registerConfirm.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mPresenter.confirm(createPatient());
    }
  }
);
  TextWatcher textWatcher=new RegisterPatientBirthdateValidatorWatcher(eddob,edmonth,edyr);
  edmonth.addTextChangedListener(textWatcher);
  edyr.addTextChangedListener(textWatcher);
}",0.9914580265095728
168338,"@Override public void syncVisits(){
  RestApi restApi=RestServiceBuilder.createService(RestApi.class);
  Call<Results<Visit>> call=restApi.findVisitsByPatientUUID(mPatient.getUuid(),""String_Node_Str"");
  call.enqueue(new Callback<Results<Visit>>(){
    @Override public void onResponse(    Call<Results<Visit>> call,    Response<Results<Visit>> response){
      if (response.isSuccessful()) {
        List<Visit> visits=response.body().getResults();
        VisitDAO visitDAO=new VisitDAO();
        for (        Visit visit : visits) {
          long visitId=visitDAO.getVisitsIDByUUID(visit.getUuid());
          if (visitId > 0) {
            visitDAO.updateVisit(visit,visitId,mPatient.getId());
          }
 else {
            visitDAO.saveVisit(visit,mPatient.getId());
          }
          mPatientVisitsView.setVisitsToDisplay(visits);
        }
        showStartVisitDialog();
      }
 else {
        ToastUtil.error(response.message());
      }
      mPatientVisitsView.dismissStartVisitDialog();
    }
    @Override public void onFailure(    Call<Results<Visit>> call,    Throwable t){
      ToastUtil.error(t.getMessage());
      mPatientVisitsView.dismissStartVisitDialog();
    }
  }
);
}","@Override public void syncVisits(){
  RestApi restApi=RestServiceBuilder.createService(RestApi.class);
  Call<Results<Visit>> call=restApi.findVisitsByPatientUUID(mPatient.getUuid(),""String_Node_Str"");
  call.enqueue(new Callback<Results<Visit>>(){
    @Override public void onResponse(    Call<Results<Visit>> call,    Response<Results<Visit>> response){
      if (response.isSuccessful()) {
        List<Visit> visits=response.body().getResults();
        VisitDAO visitDAO=new VisitDAO();
        for (        Visit visit : visits) {
          long visitId=visitDAO.getVisitsIDByUUID(visit.getUuid());
          if (visitId > 0) {
            visitDAO.updateVisit(visit,visitId,mPatient.getId());
          }
 else {
            visitDAO.saveVisit(visit,mPatient.getId());
          }
          mPatientVisitsView.setVisitsToDisplay(visitDAO.getVisitsByPatientID(mPatient.getId()));
        }
        showStartVisitDialog();
      }
 else {
        ToastUtil.error(response.message());
      }
      mPatientVisitsView.dismissStartVisitDialog();
    }
    @Override public void onFailure(    Call<Results<Visit>> call,    Throwable t){
      ToastUtil.error(t.getMessage());
      mPatientVisitsView.dismissStartVisitDialog();
    }
  }
);
}",0.9824274621986104
168339,"public boolean checkfields(){
  boolean emp=true, valid=true;
  for (  InputField field : inputFields) {
    RangeEditText ed=(RangeEditText)getActivity().findViewById(field.getId());
    if (!isEmpty(ed)) {
      emp=false;
      Double inp=Double.parseDouble(ed.getText().toString());
      if (ed.getUpperlimit() != -1.0 && ed.getUpperlimit() != -1.0) {
        if (ed.getUpperlimit() < inp || ed.getLowerlimit() > inp) {
          ToastUtil.error(""String_Node_Str"" + ed.getName() + ""String_Node_Str""+ ed.getLowerlimit()+ ""String_Node_Str""+ ed.getUpperlimit());
          ed.setTextColor(ContextCompat.getColor(OpenMRS.getInstance(),R.color.red));
          valid=false;
        }
      }
    }
  }
  if (emp) {
    ToastUtil.error(""String_Node_Str"");
    return false;
  }
  return valid;
}","public boolean checkfields(){
  boolean emp=true, valid=true;
  for (  InputField field : inputFields) {
    RangeEditText ed=(RangeEditText)getActivity().findViewById(field.getId());
    if (!isEmpty(ed)) {
      emp=false;
      if (ed.getText().toString().charAt(0) != '.') {
        Double inp=Double.parseDouble(ed.getText().toString());
        if (ed.getUpperlimit() != -1.0 && ed.getUpperlimit() != -1.0) {
          if (ed.getUpperlimit() < inp || ed.getLowerlimit() > inp) {
            ToastUtil.error(""String_Node_Str"" + ed.getName() + ""String_Node_Str""+ ed.getLowerlimit()+ ""String_Node_Str""+ ed.getUpperlimit());
            ed.setTextColor(ContextCompat.getColor(OpenMRS.getInstance(),R.color.red));
            valid=false;
          }
        }
      }
 else {
        ToastUtil.error(""String_Node_Str"" + ed.getName() + ""String_Node_Str"");
        ed.setTextColor(ContextCompat.getColor(OpenMRS.getInstance(),R.color.red));
        valid=false;
      }
    }
  }
  if (emp) {
    ToastUtil.error(""String_Node_Str"");
    return false;
  }
  return valid;
}",0.8510182207931404
168340,"private void initViewComponents(String valueRef){
  FormPageAdapter formPageAdapter=new FormPageAdapter(getFragmentManager(),valueRef);
  LinearLayout pagerIndicator=(LinearLayout)findViewById(R.id.viewPagerCountDots);
  mBtnNext=(Button)findViewById(R.id.btn_next);
  mBtnFinish=(Button)findViewById(R.id.btn_finish);
  mBtnNext.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mViewPager.setCurrentItem(mViewPager.getCurrentItem() + 1);
    }
  }
);
  mBtnFinish.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mPresenter.createEncounter();
    }
  }
);
  mViewPager=(ViewPager)findViewById(R.id.container);
  mViewPager.setAdapter(formPageAdapter);
  mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      for (int i=0; i < mDotsCount; i++) {
        mDots[i].setImageDrawable(ContextCompat.getDrawable(getBaseContext(),R.drawable.nonselecteditem_dot));
      }
      mDots[position].setImageDrawable(ContextCompat.getDrawable(getBaseContext(),R.drawable.selecteditem_dot));
      if (position + 1 == mDotsCount) {
        mBtnNext.setVisibility(View.GONE);
        mBtnFinish.setVisibility(View.VISIBLE);
      }
 else {
        mBtnNext.setVisibility(View.VISIBLE);
        mBtnFinish.setVisibility(View.GONE);
      }
    }
    @Override public void onPageScrolled(    int position,    float positionOffset,    int positionOffsetPixels){
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  mDotsCount=formPageAdapter.getCount();
  mDots=new ImageView[mDotsCount];
  for (int i=0; i < mDotsCount; i++) {
    mDots[i]=new ImageView(this);
    mDots[i].setImageDrawable(ContextCompat.getDrawable(this,R.drawable.nonselecteditem_dot));
    LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
    params.setMargins(4,0,4,0);
    pagerIndicator.addView(mDots[i],params);
  }
  mDots[0].setImageDrawable(ContextCompat.getDrawable(this,R.drawable.selecteditem_dot));
  if (mDotsCount == 1) {
    mBtnNext.setVisibility(View.GONE);
    mBtnFinish.setVisibility(View.VISIBLE);
  }
}","private void initViewComponents(String valueRef){
  FormPageAdapter formPageAdapter=new FormPageAdapter(getFragmentManager(),valueRef);
  LinearLayout pagerIndicator=(LinearLayout)findViewById(R.id.viewPagerCountDots);
  mBtnNext=(Button)findViewById(R.id.btn_next);
  mBtnFinish=(Button)findViewById(R.id.btn_finish);
  mBtnNext.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mViewPager.setCurrentItem(mViewPager.getCurrentItem() + 1);
    }
  }
);
  mBtnFinish.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mPresenter.createEncounter();
    }
  }
);
  mViewPager=(ViewPager)findViewById(R.id.container);
  mViewPager.setAdapter(formPageAdapter);
  mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      for (int i=0; i < mDotsCount; i++) {
        mDots[i].setImageDrawable(ContextCompat.getDrawable(getBaseContext(),R.drawable.nonselecteditem_dot));
      }
      mDots[position].setImageDrawable(ContextCompat.getDrawable(getBaseContext(),R.drawable.selecteditem_dot));
      if (position + 1 == mDotsCount) {
        mBtnNext.setVisibility(View.GONE);
        mBtnFinish.setVisibility(View.VISIBLE);
      }
 else {
        mBtnNext.setVisibility(View.VISIBLE);
        mBtnFinish.setVisibility(View.GONE);
      }
    }
    @Override public void onPageScrolled(    int position,    float positionOffset,    int positionOffsetPixels){
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  mDotsCount=formPageAdapter.getCount();
  mDots=new ImageView[mDotsCount];
  for (int i=0; i < mDotsCount; i++) {
    mDots[i]=new ImageView(this);
    mDots[i].setImageDrawable(ContextCompat.getDrawable(this,R.drawable.nonselecteditem_dot));
    LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
    pagerIndicator.addView(mDots[i],params);
  }
  mDots[0].setImageDrawable(ContextCompat.getDrawable(this,R.drawable.selecteditem_dot));
  if (mDotsCount == 1) {
    mBtnNext.setVisibility(View.GONE);
    mBtnFinish.setVisibility(View.VISIBLE);
  }
}",0.992988606485539
168341,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View root=inflater.inflate(R.layout.fragment_form_display,container,false);
  getActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
  mParent=(LinearLayout)root.findViewById(R.id.viewholder);
  return root;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View root=inflater.inflate(R.layout.fragment_form_display,container,false);
  getActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
  mParent=(LinearLayout)root.findViewById(R.id.sectionContainer);
  return root;
}",0.9694444444444444
168342,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
switch (id) {
case R.id.actionSynchronize:
    mPresenter.synchronizePatient();
case R.id.actionDelete:
  mPresenter.deletePatient();
this.getActivity().finish();
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
switch (id) {
case R.id.actionSynchronize:
    mPresenter.synchronizePatient();
  break;
case R.id.actionDelete:
mPresenter.deletePatient();
this.getActivity().finish();
break;
}
return super.onOptionsItemSelected(item);
}",0.9516129032258064
168343,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
switch (id) {
case R.id.actionDelete:
    mPresenter.deletePatient();
  this.getActivity().finish();
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
switch (id) {
case R.id.actionDelete:
    mPresenter.deletePatient();
  this.getActivity().finish();
break;
}
return super.onOptionsItemSelected(item);
}",0.9611451942740288
168344,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
switch (id) {
case R.id.actionStartVisit:
    mPresenter.syncVisits();
case R.id.actionDelete:
  mPresenter.deletePatient();
this.getActivity().finish();
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
switch (id) {
case R.id.actionStartVisit:
    mPresenter.syncVisits();
  break;
case R.id.actionDelete:
mPresenter.deletePatient();
this.getActivity().finish();
break;
}
return super.onOptionsItemSelected(item);
}",0.9501661129568106
168345,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
switch (id) {
case R.id.actionDelete:
    mPresenter.deletePatient();
  this.getActivity().finish();
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
switch (id) {
case R.id.actionDelete:
    mPresenter.deletePatient();
  this.getActivity().finish();
break;
}
return super.onOptionsItemSelected(item);
}",0.9611451942740288
168346,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_matching_patients);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  if (toolbar != null) {
    toolbar.setTitle(getString(R.string.matching_patients_toolbar_tittle));
    setSupportActionBar(toolbar);
  }
  MatchingPatientsFragment matchingPatientsFragment=(MatchingPatientsFragment)getSupportFragmentManager().findFragmentById(R.id.matchingPatientsContentFrame);
  if (matchingPatientsFragment == null) {
    matchingPatientsFragment=MatchingPatientsFragment.newInstance();
  }
  if (!matchingPatientsFragment.isAdded()) {
    addFragmentToActivity(getSupportFragmentManager(),matchingPatientsFragment,R.id.matchingPatientsContentFrame);
  }
  PatientAndMatchesWrapper patientAndMatchesWrapper=(PatientAndMatchesWrapper)getIntent().getSerializableExtra(""String_Node_Str"");
  new MatchingPatientsPresenter(matchingPatientsFragment,patientAndMatchesWrapper.getMatchingPatients());
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_matching_patients);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  if (toolbar != null) {
    toolbar.setTitle(getString(R.string.matching_patients_toolbar_tittle));
    setSupportActionBar(toolbar);
  }
  MatchingPatientsFragment matchingPatientsFragment=(MatchingPatientsFragment)getSupportFragmentManager().findFragmentById(R.id.matchingPatientsContentFrame);
  if (matchingPatientsFragment == null) {
    matchingPatientsFragment=MatchingPatientsFragment.newInstance();
  }
  if (!matchingPatientsFragment.isAdded()) {
    addFragmentToActivity(getSupportFragmentManager(),matchingPatientsFragment,R.id.matchingPatientsContentFrame);
  }
  if (getIntent().getExtras().getBoolean(ApplicationConstants.BundleKeys.CALCULATED_LOCALLY,false)) {
    showToast(getString(R.string.registration_core_info));
  }
  PatientAndMatchesWrapper patientAndMatchesWrapper=(PatientAndMatchesWrapper)getIntent().getSerializableExtra(ApplicationConstants.BundleKeys.PATIENTS_AND_MATCHES);
  new MatchingPatientsPresenter(matchingPatientsFragment,patientAndMatchesWrapper.getMatchingPatients());
}",0.8257777777777778
168347,"@Override public void onBindViewHolder(VisitViewHolder visitViewHolder,final int position){
  Visit visit=mVisits.get(position);
  visitViewHolder.mVisitStart.setText(DateUtils.convertTime1(visit.getStartDatetime(),DateUtils.DATE_WITH_TIME_FORMAT));
  if (DateUtils.convertTime(visit.getStopDatetime()) != null) {
    visitViewHolder.mVisitEnd.setVisibility(View.VISIBLE);
    visitViewHolder.mVisitEnd.setText(DateUtils.convertTime1((visit.getStopDatetime()),DateUtils.DATE_WITH_TIME_FORMAT));
    visitViewHolder.mVisitStatusIcon.setImageBitmap(ImageUtils.decodeBitmapFromResource(mContext.getResources(),R.drawable.past_visit_dot,visitViewHolder.mVisitStatusIcon.getLayoutParams().width,visitViewHolder.mVisitStatusIcon.getLayoutParams().height));
    visitViewHolder.mVisitStatus.setText(mContext.getString(R.string.past_visit_label));
  }
 else {
    visitViewHolder.mVisitEnd.setVisibility(View.INVISIBLE);
    visitViewHolder.mVisitStatusIcon.setImageBitmap(ImageUtils.decodeBitmapFromResource(mContext.getResources(),R.drawable.active_visit_dot,visitViewHolder.mVisitStatusIcon.getLayoutParams().width,visitViewHolder.mVisitStatusIcon.getLayoutParams().height));
    visitViewHolder.mVisitStatus.setText(mContext.getString(R.string.active_visit_label));
  }
  visitViewHolder.mVisitPlace.setText(mContext.getString(R.string.visit_in,visit.getLocation().getDisplay()));
  visitViewHolder.mRelativeLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mContext.goToVisitDashboard(mVisits.get(position).getId());
    }
  }
);
}","@Override public void onBindViewHolder(VisitViewHolder visitViewHolder,final int position){
  Visit visit=mVisits.get(position);
  visitViewHolder.mVisitStart.setText(DateUtils.convertTime1(visit.getStartDatetime(),DateUtils.DATE_WITH_TIME_FORMAT));
  if (DateUtils.convertTime(visit.getStopDatetime()) != null) {
    visitViewHolder.mVisitEnd.setVisibility(View.VISIBLE);
    visitViewHolder.mVisitEnd.setText(DateUtils.convertTime1((visit.getStopDatetime()),DateUtils.DATE_WITH_TIME_FORMAT));
    visitViewHolder.mVisitStatusIcon.setImageBitmap(ImageUtils.decodeBitmapFromResource(mContext.getResources(),R.drawable.past_visit_dot,visitViewHolder.mVisitStatusIcon.getLayoutParams().width,visitViewHolder.mVisitStatusIcon.getLayoutParams().height));
    visitViewHolder.mVisitStatus.setText(mContext.getString(R.string.past_visit_label));
  }
 else {
    visitViewHolder.mVisitEnd.setVisibility(View.INVISIBLE);
    visitViewHolder.mVisitStatusIcon.setImageBitmap(ImageUtils.decodeBitmapFromResource(mContext.getResources(),R.drawable.active_visit_dot,visitViewHolder.mVisitStatusIcon.getLayoutParams().width,visitViewHolder.mVisitStatusIcon.getLayoutParams().height));
    visitViewHolder.mVisitStatus.setText(mContext.getString(R.string.active_visit_label));
  }
  if (visit.getLocation() != null) {
    visitViewHolder.mVisitPlace.setText(mContext.getString(R.string.visit_in,visit.getLocation().getDisplay()));
  }
  visitViewHolder.mRelativeLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mContext.goToVisitDashboard(mVisits.get(position).getId());
    }
  }
);
}",0.9866168689698102
168348,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  this.setContentView(R.layout.activity_register_patient);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  if (toolbar != null) {
    setSupportActionBar(toolbar);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  }
  RegisterPatientFragment registerPatientFragment=(RegisterPatientFragment)getSupportFragmentManager().findFragmentById(R.id.registerPatientContentFrame);
  if (registerPatientFragment == null) {
    registerPatientFragment=RegisterPatientFragment.newInstance();
  }
  if (!registerPatientFragment.isActive()) {
    addFragmentToActivity(getSupportFragmentManager(),registerPatientFragment,R.id.registerPatientContentFrame);
  }
  mPresenter=new SyncPatientPresenter(registerPatientFragment);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  this.setContentView(R.layout.activity_register_patient);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  if (toolbar != null) {
    setSupportActionBar(toolbar);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  }
  RegisterPatientFragment registerPatientFragment=(RegisterPatientFragment)getSupportFragmentManager().findFragmentById(R.id.registerPatientContentFrame);
  if (registerPatientFragment == null) {
    registerPatientFragment=RegisterPatientFragment.newInstance();
  }
  if (!registerPatientFragment.isActive()) {
    addFragmentToActivity(getSupportFragmentManager(),registerPatientFragment,R.id.registerPatientContentFrame);
  }
  mPresenter=new RegisterPatientPresenter(registerPatientFragment);
}",0.9927884615384616
168349,void setProgressBarVisibility(int visibility);,void setProgressBarVisibility(boolean visibility);,0.9166666666666666
168350,"@Override public void showSimilarPatientDialog(List<Patient> patients,Patient newPatient){
  setProgressBarVisibility(View.GONE);
  CustomDialogBundle similarPatientsDialog=new CustomDialogBundle();
  similarPatientsDialog.setTitleViewMessage(getString(R.string.similar_patients_dialog_title));
  similarPatientsDialog.setRightButtonText(getString(R.string.dialog_button_register_new));
  similarPatientsDialog.setRightButtonAction(CustomFragmentDialog.OnClickAction.REGISTER_PATIENT);
  similarPatientsDialog.setLeftButtonText(getString(R.string.dialog_button_cancel));
  similarPatientsDialog.setLeftButtonAction(CustomFragmentDialog.OnClickAction.CANCEL_REGISTERING);
  similarPatientsDialog.setPatientsList(patients);
  similarPatientsDialog.setNewPatient(newPatient);
  ((RegisterPatientActivity)this.getActivity()).createAndShowDialog(similarPatientsDialog,ApplicationConstants.DialogTAG.SIMILAR_PATIENTS_TAG);
}","@Override public void showSimilarPatientDialog(List<Patient> patients,Patient newPatient){
  setProgressBarVisibility(false);
  CustomDialogBundle similarPatientsDialog=new CustomDialogBundle();
  similarPatientsDialog.setTitleViewMessage(getString(R.string.similar_patients_dialog_title));
  similarPatientsDialog.setRightButtonText(getString(R.string.dialog_button_register_new));
  similarPatientsDialog.setRightButtonAction(CustomFragmentDialog.OnClickAction.REGISTER_PATIENT);
  similarPatientsDialog.setLeftButtonText(getString(R.string.dialog_button_cancel));
  similarPatientsDialog.setLeftButtonAction(CustomFragmentDialog.OnClickAction.CANCEL_REGISTERING);
  similarPatientsDialog.setPatientsList(patients);
  similarPatientsDialog.setNewPatient(newPatient);
  ((RegisterPatientActivity)this.getActivity()).createAndShowDialog(similarPatientsDialog,ApplicationConstants.DialogTAG.SIMILAR_PATIENTS_TAG);
}",0.99235807860262
168351,"@Override public void setProgressBarVisibility(int visibility){
  progressBar.setVisibility(visibility);
}","@Override public void setProgressBarVisibility(boolean visibility){
  progressBar.setVisibility(visibility ? View.VISIBLE : View.GONE);
}",0.8559670781893004
168352,"private void fetchSimilarPatientsFromServer(Patient patient,PatientAndMatchesWrapper patientAndMatchesWrapper) throws IOException {
  RestApi restApi=RestServiceBuilder.createService(RestApi.class);
  Call<Results<Patient>> patientCall=restApi.getSimilarPatients(patient.toMap());
  Response<Results<Patient>> patientsResp=patientCall.execute();
  if (patientsResp.isSuccessful()) {
    List<Patient> patientList=patientsResp.body().getResults();
    if (!patientList.isEmpty()) {
      patientAndMatchesWrapper.addToList(new PatientAndMatchingPatients(patient,patientList));
    }
 else {
      new PatientApi().syncPatient(patient);
    }
  }
}","private void fetchSimilarPatientsFromServer(Patient patient,PatientAndMatchesWrapper patientAndMatchesWrapper) throws IOException {
  calculatedLocally=false;
  RestApi restApi=RestServiceBuilder.createService(RestApi.class);
  Call<Results<Patient>> patientCall=restApi.getSimilarPatients(patient.toMap());
  Response<Results<Patient>> patientsResp=patientCall.execute();
  if (patientsResp.isSuccessful()) {
    List<Patient> patientList=patientsResp.body().getResults();
    if (!patientList.isEmpty()) {
      patientAndMatchesWrapper.addToList(new PatientAndMatchingPatients(patient,patientList));
    }
 else {
      new PatientApi().syncPatient(patient);
    }
  }
}",0.979529946929492
168353,"private void fetchPatientsAndCalculateLocally(Patient patient,PatientAndMatchesWrapper patientAndMatchesWrapper) throws IOException {
  RestApi restApi=RestServiceBuilder.createService(RestApi.class);
  Call<Results<Patient>> patientCall=restApi.getPatients(patient.getPerson().getName().getGivenName(),ApplicationConstants.API.FULL);
  Response<Results<Patient>> resp=patientCall.execute();
  if (resp.isSuccessful()) {
    List<Patient> similarPatient=new PatientComparator().findSimilarPatient(resp.body().getResults(),patient);
    if (!similarPatient.isEmpty()) {
      patientAndMatchesWrapper.addToList(new PatientAndMatchingPatients(patient,similarPatient));
    }
 else {
      new PatientApi().syncPatient(patient);
    }
  }
  ToastUtil.notifyLong(getApplicationContext().getResources().getString(R.string.registration_core_info));
}","private void fetchPatientsAndCalculateLocally(Patient patient,PatientAndMatchesWrapper patientAndMatchesWrapper) throws IOException {
  calculatedLocally=true;
  RestApi restApi=RestServiceBuilder.createService(RestApi.class);
  Call<Results<Patient>> patientCall=restApi.getPatients(patient.getPerson().getName().getGivenName(),ApplicationConstants.API.FULL);
  Response<Results<Patient>> resp=patientCall.execute();
  if (resp.isSuccessful()) {
    List<Patient> similarPatient=new PatientComparator().findSimilarPatient(resp.body().getResults(),patient);
    if (!similarPatient.isEmpty()) {
      patientAndMatchesWrapper.addToList(new PatientAndMatchingPatients(patient,similarPatient));
    }
 else {
      new PatientApi().syncPatient(patient);
    }
  }
}",0.9172370877411326
168354,"@Override protected void onHandleIntent(Intent intent){
  if (NetworkUtils.isOnline()) {
    PatientAndMatchesWrapper patientAndMatchesWrapper=new PatientAndMatchesWrapper();
    List<Patient> patientList=new PatientDAO().getUnsyncedPatients();
    final ListIterator<Patient> it=patientList.listIterator();
    while (it.hasNext()) {
      final Patient patient=it.next();
      fetchSimilarPatients(patient,patientAndMatchesWrapper);
    }
    if (!patientAndMatchesWrapper.getMatchingPatients().isEmpty()) {
      Intent intent1=new Intent(getApplicationContext(),MatchingPatientsActivity.class);
      intent1.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      intent1.putExtra(""String_Node_Str"",patientAndMatchesWrapper);
      startActivity(intent1);
    }
  }
 else {
    ToastUtil.error(""String_Node_Str"" + ""String_Node_Str"");
  }
}","@Override protected void onHandleIntent(Intent intent){
  if (NetworkUtils.isOnline()) {
    PatientAndMatchesWrapper patientAndMatchesWrapper=new PatientAndMatchesWrapper();
    List<Patient> patientList=new PatientDAO().getUnsyncedPatients();
    final ListIterator<Patient> it=patientList.listIterator();
    while (it.hasNext()) {
      final Patient patient=it.next();
      fetchSimilarPatients(patient,patientAndMatchesWrapper);
    }
    if (!patientAndMatchesWrapper.getMatchingPatients().isEmpty()) {
      Intent intent1=new Intent(getApplicationContext(),MatchingPatientsActivity.class);
      intent1.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      intent1.putExtra(ApplicationConstants.BundleKeys.CALCULATED_LOCALLY,calculatedLocally);
      intent1.putExtra(ApplicationConstants.BundleKeys.PATIENTS_AND_MATCHES,patientAndMatchesWrapper);
      startActivity(intent1);
    }
  }
 else {
    ToastUtil.error(""String_Node_Str"" + ""String_Node_Str"");
  }
}",0.7995558023320377
168355,"public SimplePromise<Patient> syncPatient(final Patient patient,@Nullable final DefaultResponseCallbackListener callbackListener){
  final SimpleDeferredObject<Patient> deferred=new SimpleDeferredObject<>();
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(OpenMRS.getInstance());
  Boolean syncstate=prefs.getBoolean(""String_Node_Str"",true);
  if (syncstate) {
    AndroidDeferredManager dm=new AndroidDeferredManager();
    dm.when(new LocationApi().getLocationUuid(),getIdGenPatientIdentifier(),getPatientIdentifierTypeUuid()).done(new DoneCallback<MultipleResults>(){
      @Override public void onDone(      final MultipleResults results){
        final List<PatientIdentifier> identifiers=new ArrayList<>();
        final PatientIdentifier identifier=new PatientIdentifier();
        identifier.setLocation((Location)results.get(0).getResult());
        identifier.setIdentifier((String)results.get(1).getResult());
        identifier.setIdentifierType((IdentifierType)results.get(2).getResult());
        identifiers.add(identifier);
        patient.setIdentifiers(identifiers);
        patient.setUuid(null);
        final RestApi apiService=RestServiceBuilder.createService(RestApi.class);
        Call<Patient> call=apiService.createPatient(patient);
        call.enqueue(new Callback<Patient>(){
          @Override public void onResponse(          Call<Patient> call,          Response<Patient> response){
            if (response.isSuccessful()) {
              Patient newPatient=response.body();
              ToastUtil.success(""String_Node_Str"" + patient.getPerson().getName().getNameString() + ""String_Node_Str""+ newPatient.getUuid());
              patient.setSynced(true);
              patient.setUuid(newPatient.getUuid());
              new PatientDAO().updatePatient(patient.getId(),patient);
              if (!patient.getEncounters().equals(""String_Node_Str""))               addEncounters(patient);
              deferred.resolve(patient);
              if (callbackListener != null) {
                callbackListener.onResponse();
              }
            }
 else {
              ToastUtil.error(""String_Node_Str"" + patient.getId() + ""String_Node_Str""+ response.message());
              deferred.reject(new RuntimeException(""String_Node_Str"" + response.errorBody().toString()));
              if (callbackListener != null) {
                callbackListener.onErrorResponse();
              }
            }
          }
          @Override public void onFailure(          Call<Patient> call,          Throwable t){
            ToastUtil.notify(""String_Node_Str"" + patient.getId() + ""String_Node_Str""+ t.toString());
            deferred.reject(t);
            if (callbackListener != null) {
              callbackListener.onErrorResponse();
            }
          }
        }
);
      }
    }
);
  }
 else {
    ToastUtil.notify(""String_Node_Str"" + ""String_Node_Str"");
    if (callbackListener != null) {
      callbackListener.onErrorResponse();
    }
  }
  return deferred.promise();
}","public SimplePromise<Patient> syncPatient(final Patient patient,@Nullable final DefaultResponseCallbackListener callbackListener){
  final SimpleDeferredObject<Patient> deferred=new SimpleDeferredObject<>();
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(OpenMRS.getInstance());
  Boolean syncstate=prefs.getBoolean(""String_Node_Str"",true);
  if (syncstate) {
    AndroidDeferredManager dm=new AndroidDeferredManager();
    dm.when(new LocationApi().getLocationUuid(),getIdGenPatientIdentifier(),getPatientIdentifierTypeUuid()).done(new DoneCallback<MultipleResults>(){
      @Override public void onDone(      final MultipleResults results){
        final List<PatientIdentifier> identifiers=new ArrayList<>();
        final PatientIdentifier identifier=new PatientIdentifier();
        identifier.setLocation((Location)results.get(0).getResult());
        identifier.setIdentifier((String)results.get(1).getResult());
        identifier.setIdentifierType((IdentifierType)results.get(2).getResult());
        identifiers.add(identifier);
        patient.setIdentifiers(identifiers);
        patient.setUuid(null);
        final RestApi apiService=RestServiceBuilder.createService(RestApi.class);
        Call<Patient> call=apiService.createPatient(patient);
        call.enqueue(new Callback<Patient>(){
          @Override public void onResponse(          Call<Patient> call,          Response<Patient> response){
            if (response.isSuccessful()) {
              Patient newPatient=response.body();
              ToastUtil.success(""String_Node_Str"" + patient.getPerson().getName().getNameString() + ""String_Node_Str""+ newPatient.getUuid());
              patient.setSynced(true);
              patient.setUuid(newPatient.getUuid());
              new PatientDAO().updatePatient(patient.getId(),patient);
              if (!patient.getEncounters().equals(""String_Node_Str""))               addEncounters(patient);
              deferred.resolve(patient);
              if (callbackListener != null) {
                callbackListener.onResponse();
              }
            }
 else {
              ToastUtil.error(""String_Node_Str"" + patient.getId() + ""String_Node_Str""+ response.message());
              deferred.reject(new RuntimeException(""String_Node_Str"" + response.errorBody().toString()));
              if (callbackListener != null) {
                callbackListener.onErrorResponse();
              }
            }
          }
          @Override public void onFailure(          Call<Patient> call,          Throwable t){
            ToastUtil.notify(""String_Node_Str"" + patient.getId() + ""String_Node_Str""+ t.toString());
            deferred.reject(t);
            if (callbackListener != null) {
              callbackListener.onErrorResponse();
            }
          }
        }
);
      }
    }
);
  }
 else {
    ToastUtil.notify(""String_Node_Str"" + ""String_Node_Str"");
    if (callbackListener != null) {
      callbackListener.onResponse();
    }
  }
  return deferred.promise();
}",0.999179116729601
168356,"public static Location findLocationByName(String name){
  Location location=new Location();
  String where=String.format(""String_Node_Str"",LocationTable.Column.DISPLAY);
  String[] whereArgs=new String[]{name};
  DBOpenHelper helper=OpenMRSDBOpenHelper.getInstance().getDBOpenHelper();
  final Cursor cursor=helper.getReadableDatabase().query(LocationTable.TABLE_NAME,null,where,whereArgs,null,null,null);
  if (null != cursor) {
    try {
      if (cursor.moveToFirst()) {
        location=cursorToLocation(cursor);
      }
    }
  finally {
      cursor.close();
    }
  }
  return location;
}","public static Location findLocationByName(String name){
  if (!StringUtils.notNull(name)) {
    return null;
  }
  Location location=new Location();
  String where=String.format(""String_Node_Str"",LocationTable.Column.DISPLAY);
  String[] whereArgs=new String[]{name};
  DBOpenHelper helper=OpenMRSDBOpenHelper.getInstance().getDBOpenHelper();
  final Cursor cursor=helper.getReadableDatabase().query(LocationTable.TABLE_NAME,null,where,whereArgs,null,null,null);
  if (null != cursor) {
    try {
      if (cursor.moveToFirst()) {
        location=cursorToLocation(cursor);
      }
    }
  finally {
      cursor.close();
    }
  }
  return location;
}",0.9542902967121092
168357,"public long insertVisit(SQLiteDatabase db,Visit visit){
  long visitId;
  SQLiteStatement visitStatement=db.compileStatement(mVisitTable.insertIntoTableDefinition());
  try {
    db.beginTransaction();
    bindString(1,visit.getUuid(),visitStatement);
    bindLong(2,visit.getPatient().getId(),visitStatement);
    bindString(3,visit.getVisitType().getDisplay(),visitStatement);
    bindString(4,visit.getLocation().getDisplay(),visitStatement);
    bindString(5,visit.getStartDatetime(),visitStatement);
    bindString(6,visit.getStopDatetime(),visitStatement);
    visitId=visitStatement.executeInsert();
    visitStatement.clearBindings();
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
    visitStatement.close();
  }
  return visitId;
}","public long insertVisit(SQLiteDatabase db,Visit visit){
  long visitId;
  SQLiteStatement visitStatement=db.compileStatement(mVisitTable.insertIntoTableDefinition());
  try {
    db.beginTransaction();
    bindString(1,visit.getUuid(),visitStatement);
    bindLong(2,visit.getPatient().getId(),visitStatement);
    bindString(3,visit.getVisitType().getDisplay(),visitStatement);
    if (visit.getLocation() != null) {
      bindString(4,visit.getLocation().getDisplay(),visitStatement);
    }
    bindString(5,visit.getStartDatetime(),visitStatement);
    bindString(6,visit.getStopDatetime(),visitStatement);
    visitId=visitStatement.executeInsert();
    visitStatement.clearBindings();
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
    visitStatement.close();
  }
  return visitId;
}",0.970384373030876
168358,"public int updateVisit(SQLiteDatabase db,long visitID,Visit visit){
  ContentValues newValues=new ContentValues();
  newValues.put(VisitTable.Column.UUID,visit.getUuid());
  newValues.put(VisitTable.Column.PATIENT_KEY_ID,visit.getPatient().getId());
  newValues.put(VisitTable.Column.VISIT_TYPE,visit.getVisitType().getDisplay());
  newValues.put(VisitTable.Column.VISIT_PLACE,visit.getLocation().getDisplay());
  newValues.put(VisitTable.Column.START_DATE,visit.getStartDatetime());
  newValues.put(VisitTable.Column.STOP_DATE,visit.getStopDatetime());
  String[] whereArgs=new String[]{String.valueOf(visitID)};
  return db.update(VisitTable.TABLE_NAME,newValues,WHERE_ID_CLAUSE,whereArgs);
}","public int updateVisit(SQLiteDatabase db,long visitID,Visit visit){
  ContentValues newValues=new ContentValues();
  newValues.put(VisitTable.Column.UUID,visit.getUuid());
  newValues.put(VisitTable.Column.PATIENT_KEY_ID,visit.getPatient().getId());
  newValues.put(VisitTable.Column.VISIT_TYPE,visit.getVisitType().getDisplay());
  if (visit.getLocation() != null) {
    newValues.put(VisitTable.Column.VISIT_PLACE,visit.getLocation().getDisplay());
  }
  newValues.put(VisitTable.Column.START_DATE,visit.getStartDatetime());
  newValues.put(VisitTable.Column.STOP_DATE,visit.getStopDatetime());
  String[] whereArgs=new String[]{String.valueOf(visitID)};
  return db.update(VisitTable.TABLE_NAME,newValues,WHERE_ID_CLAUSE,whereArgs);
}",0.9699510831586304
168359,"private List<Patient> getPatientsFilteredByQuery(List<Patient> patientList,String query){
  List<Patient> filteredList=new ArrayList<>();
  query=query.toLowerCase();
  for (  Patient patient : patientList) {
    String patientName=patient.getPerson().getNames().get(0).getGivenName().toLowerCase();
    String patientSurname=patient.getPerson().getNames().get(0).getFamilyName().toLowerCase();
    String patientIdentifier=patient.getIdentifier().getIdentifier();
    boolean isPatientNameFitQuery=patientName.length() >= query.length() && patientName.substring(0,query.length()).equals(query);
    boolean isPatientSurnameFitQuery=patientSurname.length() >= query.length() && patientSurname.substring(0,query.length()).equals(query);
    boolean isPatientIdentifierFitQuery=patientIdentifier.length() >= query.length() && patientIdentifier.substring(0,query.length()).equals(query);
    if (isPatientNameFitQuery || isPatientSurnameFitQuery || isPatientIdentifierFitQuery) {
      filteredList.add(patient);
    }
  }
  return filteredList;
}","private List<Patient> getPatientsFilteredByQuery(List<Patient> patientList,String query){
  List<Patient> filteredList=new ArrayList<>();
  query=query.toLowerCase();
  for (  Patient patient : patientList) {
    String patientName=patient.getPerson().getNames().get(0).getGivenName().toLowerCase();
    String patientSurname=patient.getPerson().getNames().get(0).getFamilyName().toLowerCase();
    String patientIdentifier=patient.getIdentifier().getIdentifier();
    boolean isPatientNameFitQuery=patientName.length() >= query.length() && patientName.substring(0,query.length()).equals(query);
    boolean isPatientSurnameFitQuery=patientSurname.length() >= query.length() && patientSurname.substring(0,query.length()).equals(query);
    boolean isPatientIdentifierFitQuery=false;
    if (patientIdentifier != null) {
      isPatientIdentifierFitQuery=patientIdentifier.length() >= query.length() && patientIdentifier.substring(0,query.length()).equals(query);
    }
    if (isPatientNameFitQuery || isPatientSurnameFitQuery || isPatientIdentifierFitQuery) {
      filteredList.add(patient);
    }
  }
  return filteredList;
}",0.9613259668508288
168360,"public static boolean isNetworkAvailable(){
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(OpenMRS.getInstance());
  boolean toggle=prefs.getBoolean(""String_Node_Str"",false);
  if (toggle == true) {
    ConnectivityManager connectivityManager=(ConnectivityManager)OpenMRS.getInstance().getSystemService(Context.CONNECTIVITY_SERVICE);
    NetworkInfo activeNetworkInfo=connectivityManager.getActiveNetworkInfo();
    boolean isConnected=activeNetworkInfo != null && activeNetworkInfo.isConnectedOrConnecting();
    if (isConnected)     return true;
 else {
      SharedPreferences.Editor editor=prefs.edit();
      editor.putBoolean(""String_Node_Str"",false);
      editor.commit();
      return false;
    }
  }
 else   return false;
}","public static boolean isNetworkAvailable(){
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(OpenMRS.getInstance());
  boolean toggle=prefs.getBoolean(""String_Node_Str"",false);
  if (toggle) {
    ConnectivityManager connectivityManager=(ConnectivityManager)OpenMRS.getInstance().getSystemService(Context.CONNECTIVITY_SERVICE);
    NetworkInfo activeNetworkInfo=connectivityManager.getActiveNetworkInfo();
    boolean isConnected=activeNetworkInfo != null && activeNetworkInfo.isConnectedOrConnecting();
    if (isConnected)     return true;
 else {
      SharedPreferences.Editor editor=prefs.edit();
      editor.putBoolean(""String_Node_Str"",false);
      editor.commit();
      return false;
    }
  }
 else   return false;
}",0.9947437582128776
168361,"void createEncounter(){
  Encountercreate encountercreate=new Encountercreate();
  encountercreate.setPatient(patient.getUuid());
  encountercreate.setEncounterType(encountertype);
  List<Obscreate> observations=new ArrayList<>();
  List<Fragment> activefrag=getActiveFragments();
  for (  Fragment f : activefrag) {
    FormPageFragment formPageFragment=(FormPageFragment)f;
    if (!formPageFragment.checkfields())     break;
    List<InputField> pageinputlist=formPageFragment.getInputFields();
    inputlist.addAll(pageinputlist);
  }
  for (  InputField input : inputlist) {
    Obscreate obscreate=new Obscreate();
    obscreate.setConcept(input.getConcept());
    obscreate.setValue(input.getValue());
    LocalDateTime localDateTime=new LocalDateTime();
    obscreate.setObsDatetime(localDateTime.toString());
    obscreate.setPerson(patient.getUuid());
    observations.add(obscreate);
  }
  encountercreate.setObservations(observations);
  encountercreate.setFormname(formname);
  encountercreate.setPatientId(mPatientID);
  encountercreate.setObslist();
  new EncounterService().addEncounter(encountercreate);
  finish();
}","void createEncounter(){
  Encountercreate encountercreate=new Encountercreate();
  encountercreate.setPatient(patient.getUuid());
  encountercreate.setEncounterType(encountertype);
  List<Obscreate> observations=new ArrayList<>();
  List<Fragment> activefrag=getActiveFragments();
  boolean valid=true;
  for (  Fragment f : activefrag) {
    FormPageFragment formPageFragment=(FormPageFragment)f;
    if (!formPageFragment.checkfields()) {
      valid=false;
      break;
    }
    List<InputField> pageinputlist=formPageFragment.getInputFields();
    inputlist.addAll(pageinputlist);
  }
  if (valid) {
    for (    InputField input : inputlist) {
      if (input.getValue() != -1.0) {
        Obscreate obscreate=new Obscreate();
        obscreate.setConcept(input.getConcept());
        obscreate.setValue(input.getValue());
        LocalDateTime localDateTime=new LocalDateTime();
        obscreate.setObsDatetime(localDateTime.toString());
        obscreate.setPerson(patient.getUuid());
        observations.add(obscreate);
      }
    }
    encountercreate.setObservations(observations);
    encountercreate.setFormname(formname);
    encountercreate.setPatientId(mPatientID);
    encountercreate.setObslist();
    new EncounterService().addEncounter(encountercreate);
    finish();
  }
}",0.897119341563786
168362,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  this.setContentView(R.layout.activity_form_list);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  Bundle b=getIntent().getExtras();
  if (b != null) {
    mPatientID=(long)b.get(ApplicationConstants.BundleKeys.PATIENT_ID_BUNDLE);
  }
  if (toolbar != null) {
    setSupportActionBar(toolbar);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  }
  formresourcelist=getFormResourceList();
  int size=formresourcelist.size();
  FORMS=new String[size];
  for (int i=0; i < size; i++) {
    FORMS[i]=formresourcelist.get(i).getName();
  }
  ListView formlist=(ListView)findViewById(R.id.formlist);
  formlist.setAdapter(new ArrayAdapter<String>(FormListActivity.this,android.R.layout.simple_list_item_1,android.R.id.text1,FORMS));
  formlist.setOnItemClickListener(listclick);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  this.setContentView(R.layout.activity_form_list);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  Bundle b=getIntent().getExtras();
  if (b != null) {
    mPatientID=(long)b.get(ApplicationConstants.BundleKeys.PATIENT_ID_BUNDLE);
  }
  if (toolbar != null) {
    setSupportActionBar(toolbar);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  }
  formresourcelist=getFormResourceList();
  Iterator<FormResource> iterator=formresourcelist.iterator();
  while (iterator.hasNext()) {
    FormResource formResource=iterator.next();
    List<FormResource> valueref=formResource.getResourceList();
    String valuerefString=null;
    for (    FormResource resource : valueref) {
      if (resource.getName().equals(""String_Node_Str""))       valuerefString=resource.getValueReference();
    }
    if (valuerefString == null) {
      iterator.remove();
    }
  }
  int size=formresourcelist.size();
  FORMS=new String[size];
  for (int i=0; i < size; i++) {
    FORMS[i]=formresourcelist.get(i).getName();
  }
  ListView formlist=(ListView)findViewById(R.id.formlist);
  formlist.setAdapter(new ArrayAdapter<String>(FormListActivity.this,android.R.layout.simple_list_item_1,android.R.id.text1,FORMS));
  formlist.setOnItemClickListener(listclick);
}",0.7927369353410098
168363,"public void onItemClick(AdapterView<?> parent,View view,final int position,long id){
  List<FormResource> valueref=formresourcelist.get(position).getResourceList();
  String valuerefString=null;
  for (  FormResource resource : valueref) {
    if (resource.getName().equals(""String_Node_Str""))     valuerefString=resource.getValueReference();
  }
  if (valuerefString != null) {
    EncounterType enctype=getEncounterType(FORMS[position]);
    String encountertype=enctype.getUuid();
    Intent intent=new Intent(FormListActivity.this,FormDisplayActivity.class);
    intent.putExtra(ApplicationConstants.BundleKeys.FORM_NAME,FORMS[position]);
    intent.putExtra(ApplicationConstants.BundleKeys.PATIENT_ID_BUNDLE,mPatientID);
    intent.putExtra(ApplicationConstants.BundleKeys.VALUEREFERENCE,valuerefString);
    intent.putExtra(ApplicationConstants.BundleKeys.ENCOUNTERTYPE,encountertype);
    ToastUtil.notify(""String_Node_Str"");
    startActivity(intent);
  }
 else {
    ToastUtil.error(""String_Node_Str"");
  }
}","public void onItemClick(AdapterView<?> parent,View view,final int position,long id){
  List<FormResource> valueref=formresourcelist.get(position).getResourceList();
  String valuerefString=null;
  for (  FormResource resource : valueref) {
    if (resource.getName().equals(""String_Node_Str""))     valuerefString=resource.getValueReference();
  }
  EncounterType enctype=getEncounterType(FORMS[position]);
  String encountertype=enctype.getUuid();
  Intent intent=new Intent(FormListActivity.this,FormDisplayActivity.class);
  intent.putExtra(ApplicationConstants.BundleKeys.FORM_NAME,FORMS[position]);
  intent.putExtra(ApplicationConstants.BundleKeys.PATIENT_ID_BUNDLE,mPatientID);
  intent.putExtra(ApplicationConstants.BundleKeys.VALUEREFERENCE,valuerefString);
  intent.putExtra(ApplicationConstants.BundleKeys.ENCOUNTERTYPE,encountertype);
  ToastUtil.notify(""String_Node_Str"");
  startActivity(intent);
}",0.9450207468879668
168364,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.patient_dashboard_layout);
  getSupportActionBar().setElevation(0);
  Bundle patientBundle=savedInstanceState;
  if (null != patientBundle) {
    patientBundle.getString(ApplicationConstants.BundleKeys.PATIENT_ID_BUNDLE);
  }
 else {
    patientBundle=getIntent().getExtras();
  }
  if (patientBundle.getBoolean(ApplicationConstants.BundleKeys.PROGRESS_BAR)) {
    showProgressDialog(R.string.action_synchronize_patients,DialogAction.SYNCHRONIZE);
  }
  mPatient=new PatientDAO().findPatientByUUID(patientBundle.getString(ApplicationConstants.BundleKeys.PATIENT_ID_BUNDLE));
  new VisitsManager().getLastVitals(VisitsHelper.createLastVitalsListener(mPatient.getUuid()));
  mPatientDashboardPagerAdapter=new PatientDashboardPagerAdapter(getSupportFragmentManager());
  initViewPager();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.patient_dashboard_layout);
  getSupportActionBar().setElevation(0);
  rootView=findViewById(R.id.rootview);
  Bundle patientBundle=savedInstanceState;
  if (null != patientBundle) {
    patientBundle.getString(ApplicationConstants.BundleKeys.PATIENT_ID_BUNDLE);
  }
 else {
    patientBundle=getIntent().getExtras();
  }
  if (patientBundle.getBoolean(ApplicationConstants.BundleKeys.PROGRESS_BAR)) {
    showProgressDialog(R.string.action_synchronize_patients,DialogAction.SYNCHRONIZE);
  }
  mPatient=new PatientDAO().findPatientByUUID(patientBundle.getString(ApplicationConstants.BundleKeys.PATIENT_ID_BUNDLE));
  new VisitsManager().getLastVitals(VisitsHelper.createLastVitalsListener(mPatient.getUuid()));
  mPatientDashboardPagerAdapter=new PatientDashboardPagerAdapter(getSupportFragmentManager());
  initViewPager();
  if (NetworkUtils.isOnline())   refreshPatient();
 else {
    snackbar=Snackbar.make(rootView,""String_Node_Str"",Snackbar.LENGTH_INDEFINITE);
    View view=snackbar.getView();
    TextView tv=(TextView)view.findViewById(android.support.design.R.id.snackbar_text);
    tv.setTextColor(Color.WHITE);
    snackbar.show();
  }
}",0.8340192043895748
168365,"public void synchronizePatient(){
  showProgressDialog(R.string.action_synchronize_patients,DialogAction.SYNCHRONIZE);
  new FindPatientsManager().getFullPatientData(FindPatientsHelper.createFullPatientDataListener(mPatient.getUuid(),this));
}","public void synchronizePatient(){
  if (NetworkUtils.isOnline()) {
    showProgressDialog(R.string.action_synchronize_patients,DialogAction.SYNCHRONIZE);
    new FindPatientsManager().getFullPatientData(FindPatientsHelper.createFullPatientDataListener(mPatient.getUuid(),this));
  }
 else   ToastUtil.error(""String_Node_Str"");
}",0.851138353765324
168366,"public void stopLoader(boolean errorOccurred){
  mProgressDialog=false;
  mCustomFragmentDialog.dismiss();
  if (mDialogAction == DialogAction.SYNCHRONIZE) {
    mViewPager.setCurrentItem(DETAILS_TAB_POS);
    if (!errorOccurred) {
      ToastUtil.showShortToast(this,ToastUtil.ToastType.SUCCESS,R.string.synchronize_patient_successful);
    }
 else {
      ToastUtil.showShortToast(this,ToastUtil.ToastType.ERROR,R.string.synchronize_patient_error);
    }
  }
 else   if (mDialogAction == DialogAction.ADD_VISIT) {
    List<Fragment> fragments=getSupportFragmentManager().getFragments();
    recreateFragmentView(fragments.get(VISITS_TAB_POS));
    if (!errorOccurred) {
      ToastUtil.showShortToast(this,ToastUtil.ToastType.SUCCESS,R.string.start_visit_successful);
    }
 else {
      ToastUtil.showShortToast(this,ToastUtil.ToastType.ERROR,R.string.start_visit_error);
    }
  }
}","public void stopLoader(boolean errorOccurred){
  mProgressDialog=false;
  if (mCustomFragmentDialog != null)   mCustomFragmentDialog.dismiss();
  if (mDialogAction == DialogAction.SYNCHRONIZE) {
    mViewPager.setCurrentItem(DETAILS_TAB_POS);
    if (!errorOccurred) {
      ToastUtil.showShortToast(this,ToastUtil.ToastType.SUCCESS,R.string.synchronize_patient_successful);
    }
 else {
      ToastUtil.showShortToast(this,ToastUtil.ToastType.ERROR,R.string.synchronize_patient_error);
    }
  }
 else   if (mDialogAction == DialogAction.ADD_VISIT) {
    List<Fragment> fragments=getSupportFragmentManager().getFragments();
    recreateFragmentView(fragments.get(VISITS_TAB_POS));
    if (!errorOccurred) {
      ToastUtil.showShortToast(this,ToastUtil.ToastType.SUCCESS,R.string.start_visit_successful);
    }
 else {
      ToastUtil.showShortToast(this,ToastUtil.ToastType.ERROR,R.string.start_visit_error);
    }
  }
}",0.9795467108899945
168367,"public void startFormEntry(String patientUUID,Long patientID){
  mSelectedPatientUUID=patientUUID;
  mSelectedPatientID=patientID;
  if (patientUUID != null) {
    startEncounterForPatient();
  }
 else   ToastUtil.error(""String_Node_Str"");
}","public void startFormEntry(String patientUUID,Long patientID){
  mSelectedPatientUUID=patientUUID;
  mSelectedPatientID=patientID;
  if (!StringUtils.isBlank(patientUUID)) {
    startEncounterForPatient();
  }
 else   ToastUtil.error(""String_Node_Str"");
}",0.8991935483870968
168368,"public boolean checkIfConnectionIsAvailable(){
  boolean connection=NetworkUtils.isNetworkAvailable();
  if (mIsConnectionAvailable) {
    FindPatientsManager fpm=new FindPatientsManager();
    fpm.getLastViewedPatient(mFpmResponseListener);
  }
  return connection;
}","public boolean checkIfConnectionIsAvailable(){
  boolean connection=NetworkUtils.isOnline();
  if (mIsConnectionAvailable) {
    FindPatientsManager fpm=new FindPatientsManager();
    fpm.getLastViewedPatient(mFpmResponseListener);
  }
  return connection;
}",0.870722433460076
168369,"public void updateLastViewedList(){
  if (NetworkUtils.isNetworkAvailable()) {
    setRefreshing(true);
    mSwipeLayout.setRefreshing(true);
    mSwipeLayout.setEnabled(false);
    mEmptyList.setVisibility(View.GONE);
    patientsRecyclerView.setVisibility(View.GONE);
    mSpinner.setVisibility(View.GONE);
    if (mAdapter != null) {
      mAdapter.clear();
    }
    FindPatientsManager fpm=new FindPatientsManager();
    fpm.getLastViewedPatient(mFpmResponseListener);
  }
 else {
    mEmptyList.setText(getString(R.string.find_patient_no_connection));
    patientsRecyclerView.setVisibility(View.GONE);
    mEmptyList.setVisibility(View.VISIBLE);
    mSpinner.setVisibility(View.GONE);
    mSwipeLayout.setRefreshing(false);
  }
}","public void updateLastViewedList(){
  if (NetworkUtils.isOnline()) {
    setRefreshing(true);
    mSwipeLayout.setRefreshing(true);
    mSwipeLayout.setEnabled(false);
    mEmptyList.setVisibility(View.GONE);
    patientsRecyclerView.setVisibility(View.GONE);
    mSpinner.setVisibility(View.GONE);
    if (mAdapter != null) {
      mAdapter.clear();
    }
    FindPatientsManager fpm=new FindPatientsManager();
    fpm.getLastViewedPatient(mFpmResponseListener);
  }
 else {
    mEmptyList.setText(getString(R.string.find_patient_no_connection));
    patientsRecyclerView.setVisibility(View.GONE);
    mEmptyList.setVisibility(View.VISIBLE);
    mSpinner.setVisibility(View.GONE);
    mSwipeLayout.setRefreshing(false);
  }
}",0.9863201094391244
168370,"public List<InputField> getInputFields(){
  for (  InputField field : inputFields) {
    EditText ed=(EditText)getActivity().findViewById(field.getId());
    if (!isEmpty(ed))     field.setValue(Double.parseDouble(ed.getText().toString()));
  }
  return inputFields;
}","public List<InputField> getInputFields(){
  for (  InputField field : inputFields) {
    RangeEditText ed=(RangeEditText)getActivity().findViewById(field.getId());
    if (!isEmpty(ed))     field.setValue(Double.parseDouble(ed.getText().toString()));
  }
  return inputFields;
}",0.9816849816849816
168371,"void addQuestion(Question question,LinearLayout parent){
  if (question.getQuestionOptions().getRendering().equals(""String_Node_Str"")) {
    LinearLayout questionLL=new LinearLayout(getActivity());
    questionLL.setOrientation(LinearLayout.VERTICAL);
    LinearLayout.LayoutParams layoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
    questionLL.setGravity(Gravity.CENTER);
    parent.addView(questionLL);
    Resources r=getActivity().getResources();
    float pxLeftMargin=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,5,r.getDisplayMetrics());
    float pxTopMargin=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,5,r.getDisplayMetrics());
    float pxRightMargin=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,5,r.getDisplayMetrics());
    float pxBottomMargin=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,5,r.getDisplayMetrics());
    layoutParams.setMargins(Math.round(pxLeftMargin),Math.round(pxTopMargin),Math.round(pxRightMargin),Math.round(pxBottomMargin));
    TextView tv=new TextView(getActivity());
    tv.setText(question.getLabel());
    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP,18);
    tv.setTextColor(ContextCompat.getColor(getActivity(),R.color.primary));
    questionLL.addView(tv,layoutParams);
    for (    Question subquestion : question.getQuestions()) {
      addQuestion(subquestion,questionLL);
    }
  }
  if (question.getQuestionOptions().getRendering().equals(""String_Node_Str"")) {
    LinearLayout.LayoutParams layoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
    Resources r=getActivity().getResources();
    float pxLeftMargin=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,5,r.getDisplayMetrics());
    float pxTopMargin=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,5,r.getDisplayMetrics());
    float pxRightMargin=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,5,r.getDisplayMetrics());
    float pxBottomMargin=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,5,r.getDisplayMetrics());
    layoutParams.setMargins(Math.round(pxLeftMargin),Math.round(pxTopMargin),Math.round(pxRightMargin),Math.round(pxBottomMargin));
    EditText ed=new EditText(getActivity());
    if (question.getQuestionOptions().getMax() != null)     ed.setHint(question.getLabel() + ""String_Node_Str"" + question.getQuestionOptions().getMin()+ ""String_Node_Str""+ question.getQuestionOptions().getMax()+ ""String_Node_Str"");
 else     ed.setHint(question.getLabel());
    ed.setTextSize(TypedValue.COMPLEX_UNIT_SP,16);
    ed.setInputType(InputType.TYPE_CLASS_NUMBER);
    int id=InputField.generateViewId();
    InputField field=new InputField();
    ed.setId(id);
    field.setId(id);
    field.setConcept(question.getQuestionOptions().getConcept());
    inputFields.add(field);
    parent.addView(ed,layoutParams);
  }
}","void addQuestion(Question question,LinearLayout parent){
  if (question.getQuestionOptions().getRendering().equals(""String_Node_Str"")) {
    LinearLayout questionLL=new LinearLayout(getActivity());
    questionLL.setOrientation(LinearLayout.VERTICAL);
    LinearLayout.LayoutParams layoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
    questionLL.setGravity(Gravity.CENTER);
    parent.addView(questionLL);
    Resources r=getActivity().getResources();
    float pxLeftMargin=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,5,r.getDisplayMetrics());
    float pxTopMargin=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,5,r.getDisplayMetrics());
    float pxRightMargin=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,5,r.getDisplayMetrics());
    float pxBottomMargin=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,5,r.getDisplayMetrics());
    layoutParams.setMargins(Math.round(pxLeftMargin),Math.round(pxTopMargin),Math.round(pxRightMargin),Math.round(pxBottomMargin));
    TextView tv=new TextView(getActivity());
    tv.setText(question.getLabel());
    tv.setTextSize(TypedValue.COMPLEX_UNIT_SP,18);
    tv.setTextColor(ContextCompat.getColor(getActivity(),R.color.primary));
    questionLL.addView(tv,layoutParams);
    for (    Question subquestion : question.getQuestions()) {
      addQuestion(subquestion,questionLL);
    }
  }
  if (question.getQuestionOptions().getRendering().equals(""String_Node_Str"")) {
    LinearLayout.LayoutParams layoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
    Resources r=getActivity().getResources();
    float pxLeftMargin=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,5,r.getDisplayMetrics());
    float pxTopMargin=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,5,r.getDisplayMetrics());
    float pxRightMargin=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,5,r.getDisplayMetrics());
    float pxBottomMargin=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,5,r.getDisplayMetrics());
    layoutParams.setMargins(Math.round(pxLeftMargin),Math.round(pxTopMargin),Math.round(pxRightMargin),Math.round(pxBottomMargin));
    RangeEditText ed=new RangeEditText(getActivity());
    ed.setName(question.getLabel());
    if (question.getQuestionOptions().getMax() != null) {
      ed.setHint(question.getLabel() + ""String_Node_Str"" + question.getQuestionOptions().getMin()+ ""String_Node_Str""+ question.getQuestionOptions().getMax()+ ""String_Node_Str"");
      ed.setUpperlimit(Double.parseDouble(question.getQuestionOptions().getMax()));
      ed.setLowerlimit(Double.parseDouble(question.getQuestionOptions().getMin()));
    }
 else {
      ed.setHint(question.getLabel());
      ed.setLowerlimit(-1.0);
      ed.setUpperlimit(-1.0);
    }
    ed.setTextSize(TypedValue.COMPLEX_UNIT_SP,16);
    ed.setInputType(InputType.TYPE_CLASS_NUMBER);
    int id=InputField.generateViewId();
    InputField field=new InputField();
    ed.setId(id);
    field.setId(id);
    field.setConcept(question.getQuestionOptions().getConcept());
    inputFields.add(field);
    parent.addView(ed,layoutParams);
  }
}",0.9508993680116676
168372,"public boolean checkfields(){
  for (  InputField field : inputFields) {
    EditText ed=(EditText)getActivity().findViewById(field.getId());
    if (isEmpty(ed)) {
      ToastUtil.error(""String_Node_Str"");
      return false;
    }
  }
  return true;
}","public boolean checkfields(){
  boolean emp=true;
  for (  InputField field : inputFields) {
    RangeEditText ed=(RangeEditText)getActivity().findViewById(field.getId());
    if (!isEmpty(ed)) {
      emp=false;
      Double inp=Double.parseDouble(ed.getText().toString());
      if (ed.getUpperlimit() != -1.0 && ed.getUpperlimit() != -1.0) {
        if (ed.getUpperlimit() < inp || ed.getLowerlimit() > inp) {
          ToastUtil.error(""String_Node_Str"" + ed.getName() + ""String_Node_Str"");
          return false;
        }
      }
    }
  }
  if (emp) {
    ToastUtil.error(""String_Node_Str"");
    return false;
  }
  return true;
}",0.4876404494382022
168373,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
switch (id) {
case R.id.actionStartVisit:
    showStartVisitDialog();
default :
  return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
switch (id) {
case R.id.actionStartVisit:
    if (!StringUtils.isBlank(mPatient.getUuid()))     showStartVisitDialog();
 else     ToastUtil.error(""String_Node_Str"" + ""String_Node_Str"");
default :
  return super.onOptionsItemSelected(item);
}
}",0.7890909090909091
168374,"@Override public void onBindViewHolder(PatientViewHolder holder,final int position){
  final Patient patient=mItems.get(position);
  if (new VisitDAO().isPatientNowOnVisit(patient.getId())) {
    holder.mVisitStatusIcon.setImageBitmap(ImageUtils.decodeBitmapFromResource(mContext.getResources(),R.drawable.active_visit_dot,holder.mVisitStatusIcon.getLayoutParams().width,holder.mVisitStatusIcon.getLayoutParams().height));
    holder.mVisitStatus.setText(mContext.getString(R.string.active_visit_label_capture_vitals));
  }
  if (null != patient.getIdentifier()) {
    holder.mIdentifier.setText(""String_Node_Str"" + patient.getIdentifier().getIdentifier());
  }
  if (null != patient.getDisplay()) {
    holder.mDisplayName.setText(patient.getPerson().getName().getNameString());
  }
  if (null != patient.getPerson().getGender()) {
    holder.mGender.setText(patient.getPerson().getGender());
  }
  holder.mRowLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mContext instanceof PatientListActivity) {
        ((PatientListActivity)mContext).startFormEntry(mItems.get(position).getUuid(),mItems.get(position).getId());
      }
 else {
        throw new IllegalStateException(""String_Node_Str"");
      }
    }
  }
);
  holder.mBirthDate.setText(DateUtils.convertTime(DateUtils.convertTime(patient.getPerson().getBirthdate())));
  new AnimationUtils().setAnimation(holder.mRowLayout,mContext,position);
}","@Override public void onBindViewHolder(PatientViewHolder holder,final int position){
  final Patient patient=mItems.get(position);
  if (new VisitDAO().isPatientNowOnVisit(patient.getId())) {
    holder.mVisitStatusIcon.setImageBitmap(ImageUtils.decodeBitmapFromResource(mContext.getResources(),R.drawable.active_visit_dot,holder.mVisitStatusIcon.getLayoutParams().width,holder.mVisitStatusIcon.getLayoutParams().height));
    holder.mVisitStatus.setText(mContext.getString(R.string.active_visit_label_capture_vitals));
  }
  if (null != patient.getIdentifier()) {
    holder.mIdentifier.setText(""String_Node_Str"" + patient.getIdentifier().getIdentifier());
  }
  if (null != patient.getPerson().getName()) {
    holder.mDisplayName.setText(patient.getPerson().getName().getNameString());
  }
  if (null != patient.getPerson().getGender()) {
    holder.mGender.setText(patient.getPerson().getGender());
  }
  holder.mRowLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mContext instanceof PatientListActivity) {
        ((PatientListActivity)mContext).startFormEntry(mItems.get(position).getUuid(),mItems.get(position).getId());
      }
 else {
        throw new IllegalStateException(""String_Node_Str"");
      }
    }
  }
);
  holder.mBirthDate.setText(DateUtils.convertTime(DateUtils.convertTime(patient.getPerson().getBirthdate())));
  new AnimationUtils().setAnimation(holder.mRowLayout,mContext,position);
}",0.9921742089145968
168375,"private boolean isNetworkAvailable(){
  ConnectivityManager connectivityManager=(ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo activeNetworkInfo=connectivityManager.getActiveNetworkInfo();
  return activeNetworkInfo != null && activeNetworkInfo.isConnected();
}","private boolean isNetworkAvailable(){
  ConnectivityManager connectivityManager=(ConnectivityManager)openMrs.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo activeNetworkInfo=connectivityManager.getActiveNetworkInfo();
  return activeNetworkInfo != null && activeNetworkInfo.isConnected();
}",0.9867109634551496
168376,"public void setSelected(boolean value){
  if (value && !isSelected) {
    howManySelected++;
    holder.mRowLayout.setSelected(true);
    holder.mRowLayout.setBackgroundColor(ContextCompat.getColor(mContext,R.color.light_teal));
  }
 else   if (!value && isSelected) {
    howManySelected--;
    holder.mRowLayout.setSelected(false);
    holder.mRowLayout.setBackgroundColor(Color.TRANSPARENT);
  }
  isSelected=value;
}","public void setSelected(boolean value){
  if (value && !isSelected) {
    howManySelected++;
    holder.mRowLayout.setSelected(true);
    holder.mRowLayout.setBackgroundColor(ContextCompat.getColor(mContext,R.color.light_teal));
  }
 else   if (!value && isSelected) {
    howManySelected--;
    holder.mRowLayout.setSelected(false);
    holder.mRowLayout.setBackgroundResource(R.drawable.card);
  }
  isSelected=value;
}",0.9441141498216408
168377,"@Override public void onResponse(JSONObject response){
  mLogger.d(response.toString());
  try {
    String sessionToken=response.getString(SESSION_ID_KEY);
    Boolean isAuthenticated=Boolean.parseBoolean(response.getString(AUTHENTICATION_KEY));
    if (isAuthenticated) {
      if (mCallerManager.isDBCleaningRequired(mUsername,mServerURL)) {
        mOpenMRS.deleteDatabase(OpenMRSSQLiteOpenHelper.DATABASE_NAME);
        OpenMRS.getInstance().getContentResolver().delete(OpenMRSFormsProviderAPI.FormsColumns.CONTENT_URI,null,null);
        OpenMRS.getInstance().getContentResolver().delete(OpenMRSInstanceProviderAPI.InstanceColumns.CONTENT_URI,null,null);
        setData(sessionToken);
      }
 else       if (mCallerManager.isUserLoggedIn()) {
        setData(sessionToken);
      }
 else {
        mOpenMRS.setSessionToken(sessionToken);
      }
      new VisitsManager().getVisitType(VisitsHelper.createVisitTypeListener());
      UserManager userManager=new UserManager();
      userManager.getUserInformation(UserHelper.createUserInformationListener(mUsername,userManager));
      mCallerActivity.saveLocationsToDatabase();
      mCallerActivity.finish();
    }
 else {
      mCallerActivity.sendBroadcast(new Intent(ApplicationConstants.CustomIntentActions.ACTION_AUTH_FAILED_BROADCAST));
    }
  }
 catch (  JSONException e) {
    mLogger.d(e.toString());
  }
}","@Override public void onResponse(JSONObject response){
  mLogger.d(response.toString());
  try {
    String sessionToken=response.getString(SESSION_ID_KEY);
    Boolean isAuthenticated=Boolean.parseBoolean(response.getString(AUTHENTICATION_KEY));
    if (isAuthenticated) {
      if (mCallerManager.isDBCleaningRequired(mUsername,mServerURL)) {
        mOpenMRS.deleteDatabase(OpenMRSSQLiteOpenHelper.DATABASE_NAME);
        OpenMRS.getInstance().getContentResolver().delete(OpenMRSFormsProviderAPI.FormsColumns.CONTENT_URI,null,null);
        OpenMRS.getInstance().getContentResolver().delete(OpenMRSInstanceProviderAPI.InstanceColumns.CONTENT_URI,null,null);
        setData(sessionToken);
      }
 else       if (mCallerManager.isUserNameOrServerEmpty()) {
        setData(sessionToken);
      }
 else {
        mOpenMRS.setSessionToken(sessionToken);
      }
      new VisitsManager().getVisitType(VisitsHelper.createVisitTypeListener());
      UserManager userManager=new UserManager();
      userManager.getUserInformation(UserHelper.createUserInformationListener(mUsername,userManager));
      mCallerActivity.saveLocationsToDatabase();
      mCallerActivity.finish();
    }
 else {
      mCallerActivity.sendBroadcast(new Intent(ApplicationConstants.CustomIntentActions.ACTION_AUTH_FAILED_BROADCAST));
    }
  }
 catch (  JSONException e) {
    mLogger.d(e.toString());
  }
}",0.9909321726514329
168378,"public void updatePatientVisitsData(boolean errorOccurred){
  final List<Fragment> fragments=getSupportFragmentManager().getFragments();
  for (  final Fragment fragment : fragments) {
    this.runOnUiThread(new Runnable(){
      @Override public void run(){
        recreateFragmentView(fragment);
      }
    }
);
  }
  stopLoader(errorOccurred);
}","public void updatePatientVisitsData(boolean errorOccurred){
  final List<Fragment> fragments=getSupportFragmentManager().getFragments();
  for (  final Fragment fragment : fragments) {
    if (null != fragment) {
      this.runOnUiThread(new Runnable(){
        @Override public void run(){
          recreateFragmentView(fragment);
        }
      }
);
    }
  }
  stopLoader(errorOccurred);
}",0.935483870967742
168379,"public void subtractExpectedResponses(boolean errorOccurred){
  mExpectedResponses--;
  if (errorOccurred) {
    mErrorOccurred=errorOccurred;
  }
  if (mExpectedResponses <= 0) {
    if (mContext instanceof PatientDashboardActivity) {
      ((PatientDashboardActivity)mContext).updatePatientVisitsData(mErrorOccurred);
    }
 else     if (mContext instanceof FindPatientsSearchActivity || mContext instanceof FindPatientsActivity) {
      ((ACBaseActivity)mContext).dismissProgressDialog(errorOccurred,R.string.find_patients_row_toast_patient_saved,R.string.find_patients_row_toast_patient_save_error);
    }
  }
}","public void subtractExpectedResponses(boolean errorOccurred){
  mExpectedResponses--;
  if (errorOccurred) {
    mErrorOccurred=errorOccurred;
  }
  if (mExpectedResponses <= 0) {
    if (mContext instanceof PatientDashboardActivity) {
      ((PatientDashboardActivity)OpenMRS.getInstance().getCurrentActivity()).updatePatientVisitsData(mErrorOccurred);
    }
 else     if (mContext instanceof FindPatientsSearchActivity || mContext instanceof FindPatientsActivity) {
      ((ACBaseActivity)mContext).dismissProgressDialog(errorOccurred,R.string.find_patients_row_toast_patient_saved,R.string.find_patients_row_toast_patient_save_error);
    }
  }
}",0.9620253164556962
168380,"/** 
 * Clear odk directories on the SDCard (or other external storage)
 * @throws RuntimeException if there is no SDCard or the directory exists as a non directory
 */
public static void clearODKDirs() throws RuntimeException {
  String cardstatus=Environment.getExternalStorageState();
  if (!cardstatus.equals(Environment.MEDIA_MOUNTED)) {
    throw new RuntimeException(Collect.getInstance().getString(R.string.sdcard_unmounted,cardstatus));
  }
  String[] dirs={ODK_ROOT};
  for (  String dirName : dirs) {
    File file=new File(dirName);
    if (file.exists()) {
      String deleteCmd=""String_Node_Str"" + dirName;
      Runtime runtime=Runtime.getRuntime();
      try {
        runtime.exec(deleteCmd);
      }
 catch (      IOException e) {
        RuntimeException ex=new RuntimeException(""String_Node_Str"" + dirName + ""String_Node_Str"");
      }
    }
  }
  createODKDirs();
}","/** 
 * Clear odk directories on the SDCard (or other external storage)
 * @throws RuntimeException if there is no SDCard or the directory exists as a non directory
 */
public static void clearODKDirs() throws RuntimeException {
  String cardstatus=Environment.getExternalStorageState();
  if (!cardstatus.equals(Environment.MEDIA_MOUNTED)) {
    throw new RuntimeException(Collect.getInstance().getString(R.string.sdcard_unmounted,cardstatus));
  }
  String[] dirs={ODK_ROOT};
  for (  String dirName : dirs) {
    File file=new File(dirName);
    if (file.exists()) {
      deleteRecursive(file);
    }
  }
  createODKDirs();
}",0.7744063324538258
168381,"@Override public void onResponse(JSONObject response){
  logger.d(response.toString());
  try {
    String sessionToken=response.getString(SESSION_ID_KEY);
    Boolean isAuthenticated=Boolean.parseBoolean(response.getString(AUTHENTICATION_KEY));
    if (isAuthenticated) {
      if (!mOpenMRS.getUsername().equals(username) || !mOpenMRS.getServerUrl().equals(serverURL)) {
        mOpenMRS.deleteDatabase(OpenMRSSQLiteOpenHelper.DATABASE_NAME);
        OpenMRS.clearODKDirs();
      }
      mOpenMRS.setServerUrl(serverURL);
      mOpenMRS.setSessionToken(sessionToken);
      mOpenMRS.setUsername(username);
      (new VisitsManager(mContext)).getVisitType();
      new UserManager(mContext).getUserInformation(username);
      new FormsManger(mContext).getAvailableFormsList();
      ((LoginActivity)mContext).saveLocationsToDatabase();
      ((LoginActivity)mContext).finish();
    }
 else {
      mContext.sendBroadcast(new Intent(ApplicationConstants.CustomIntentActions.ACTION_AUTH_FAILED_BROADCAST));
    }
  }
 catch (  JSONException e) {
    logger.d(e.toString());
  }
}","@Override public void onResponse(JSONObject response){
  logger.d(response.toString());
  try {
    String sessionToken=response.getString(SESSION_ID_KEY);
    Boolean isAuthenticated=Boolean.parseBoolean(response.getString(AUTHENTICATION_KEY));
    if (isAuthenticated) {
      if (isDBCleaningRequired(username,serverURL)) {
        mOpenMRS.deleteDatabase(OpenMRSSQLiteOpenHelper.DATABASE_NAME);
        OpenMRS.clearODKDirs();
      }
      mOpenMRS.setServerUrl(serverURL);
      mOpenMRS.setSessionToken(sessionToken);
      mOpenMRS.setUsername(username);
      (new VisitsManager(mContext)).getVisitType();
      new UserManager(mContext).getUserInformation(username);
      new FormsManger(mContext).getAvailableFormsList();
      ((LoginActivity)mContext).saveLocationsToDatabase();
      ((LoginActivity)mContext).finish();
    }
 else {
      mContext.sendBroadcast(new Intent(ApplicationConstants.CustomIntentActions.ACTION_AUTH_FAILED_BROADCAST));
    }
  }
 catch (  JSONException e) {
    logger.d(e.toString());
  }
}",0.9621570482497634
168382,"public void login(final String username,final String password,final String serverURL){
  RequestQueue queue=Volley.newRequestQueue(mContext);
  encodeAuthorizationToken(username,password);
  String loginURL=serverURL + API.REST_ENDPOINT + API.AUTHORISATION_END_POINT;
  logger.i(""String_Node_Str"" + loginURL);
  JsonObjectRequestWrapper jsObjRequest=new JsonObjectRequestWrapper(Request.Method.GET,loginURL,null,new Response.Listener<JSONObject>(){
    @Override public void onResponse(    JSONObject response){
      logger.d(response.toString());
      try {
        String sessionToken=response.getString(SESSION_ID_KEY);
        Boolean isAuthenticated=Boolean.parseBoolean(response.getString(AUTHENTICATION_KEY));
        if (isAuthenticated) {
          if (!mOpenMRS.getUsername().equals(username) || !mOpenMRS.getServerUrl().equals(serverURL)) {
            mOpenMRS.deleteDatabase(OpenMRSSQLiteOpenHelper.DATABASE_NAME);
            OpenMRS.clearODKDirs();
          }
          mOpenMRS.setServerUrl(serverURL);
          mOpenMRS.setSessionToken(sessionToken);
          mOpenMRS.setUsername(username);
          (new VisitsManager(mContext)).getVisitType();
          new UserManager(mContext).getUserInformation(username);
          new FormsManger(mContext).getAvailableFormsList();
          ((LoginActivity)mContext).saveLocationsToDatabase();
          ((LoginActivity)mContext).finish();
        }
 else {
          mContext.sendBroadcast(new Intent(ApplicationConstants.CustomIntentActions.ACTION_AUTH_FAILED_BROADCAST));
        }
      }
 catch (      JSONException e) {
        logger.d(e.toString());
      }
    }
  }
,new GeneralErrorListenerImpl(mContext)){
    @Override public Map<String,String> getHeaders() throws AuthFailureError {
      HashMap<String,String> params=new HashMap<String,String>();
      params.put(ApplicationConstants.AUTHORIZATION_PARAM,mOpenMRS.getAuthorizationToken());
      return params;
    }
  }
;
  queue.add(jsObjRequest);
}","public void login(final String username,final String password,final String serverURL){
  RequestQueue queue=Volley.newRequestQueue(mContext);
  encodeAuthorizationToken(username,password);
  String loginURL=serverURL + API.REST_ENDPOINT + API.AUTHORISATION_END_POINT;
  logger.i(""String_Node_Str"" + loginURL);
  JsonObjectRequestWrapper jsObjRequest=new JsonObjectRequestWrapper(Request.Method.GET,loginURL,null,new Response.Listener<JSONObject>(){
    @Override public void onResponse(    JSONObject response){
      logger.d(response.toString());
      try {
        String sessionToken=response.getString(SESSION_ID_KEY);
        Boolean isAuthenticated=Boolean.parseBoolean(response.getString(AUTHENTICATION_KEY));
        if (isAuthenticated) {
          if (isDBCleaningRequired(username,serverURL)) {
            mOpenMRS.deleteDatabase(OpenMRSSQLiteOpenHelper.DATABASE_NAME);
            OpenMRS.clearODKDirs();
          }
          mOpenMRS.setServerUrl(serverURL);
          mOpenMRS.setSessionToken(sessionToken);
          mOpenMRS.setUsername(username);
          (new VisitsManager(mContext)).getVisitType();
          new UserManager(mContext).getUserInformation(username);
          new FormsManger(mContext).getAvailableFormsList();
          ((LoginActivity)mContext).saveLocationsToDatabase();
          ((LoginActivity)mContext).finish();
        }
 else {
          mContext.sendBroadcast(new Intent(ApplicationConstants.CustomIntentActions.ACTION_AUTH_FAILED_BROADCAST));
        }
      }
 catch (      JSONException e) {
        logger.d(e.toString());
      }
    }
  }
,new GeneralErrorListenerImpl(mContext)){
    @Override public Map<String,String> getHeaders() throws AuthFailureError {
      HashMap<String,String> params=new HashMap<String,String>();
      params.put(ApplicationConstants.AUTHORIZATION_PARAM,mOpenMRS.getAuthorizationToken());
      return params;
    }
  }
;
  queue.add(jsObjRequest);
}",0.9744897959183674
168383,"private void writeResponseToFile(String formName,String response) throws IOException {
  String rootName=formName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  rootName=rootName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  rootName=rootName.trim();
  String path=OpenMRS.FORMS_PATH + File.separator + rootName+ ""String_Node_Str"";
  int i=2;
  File file=new File(path);
  while (file.exists()) {
    path=OpenMRS.FORMS_PATH + File.separator + rootName+ ""String_Node_Str""+ i+ ""String_Node_Str"";
    file=new File(path);
    i++;
  }
  try {
    FileWriter fw=new FileWriter(file.getAbsoluteFile());
    BufferedWriter bw=new BufferedWriter(fw);
    bw.write(response);
    bw.close();
    fw.close();
  }
 catch (  IOException e) {
    mOpenMRS.getOpenMRSLogger().d(e.toString());
  }
  FormsLoaderUtil.saveOrUpdateForm(file);
}","private void writeResponseToFile(String formName,String response) throws IOException {
  String rootName=formName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  rootName=rootName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  rootName=rootName.trim();
  String path=OpenMRS.FORMS_PATH + File.separator + rootName+ ""String_Node_Str"";
  int i=2;
  File file=new File(path);
  while (file.exists()) {
    path=OpenMRS.FORMS_PATH + File.separator + rootName+ ""String_Node_Str""+ i+ ""String_Node_Str"";
    file=new File(path);
    i++;
  }
  file.createNewFile();
  try {
    FileWriter fw=new FileWriter(file.getAbsoluteFile());
    BufferedWriter bw=new BufferedWriter(fw);
    bw.write(response);
    bw.close();
    fw.close();
  }
 catch (  IOException e) {
    mOpenMRS.getOpenMRSLogger().d(e.toString());
  }
  FormsLoaderUtil.saveOrUpdateForm(file);
}",0.9858657243816256
168384,"public static List<ModuleInfo> getPage(int position){
  int from=position * ITEMS_PER_PAGE;
  int to=Math.min((position + 1) * ITEMS_PER_PAGE,mModules.size());
  Log.d(ScreenSlidePagerAdapter.class.getCanonicalName(),""String_Node_Str"" + Integer.toString(from) + ""String_Node_Str""+ Integer.toString(to)+ ""String_Node_Str""+ Integer.toString(position));
  if (!(from < to)) {
    return null;
  }
  return mModules.subList(from,to);
}","public static List<ModuleInfo> getPage(int position){
  int from=position * ITEMS_PER_PAGE;
  int to=Math.min((position + 1) * ITEMS_PER_PAGE,mModules.size());
  Log.d(TAG,""String_Node_Str"" + Integer.toString(from) + ""String_Node_Str""+ Integer.toString(to)+ ""String_Node_Str""+ Integer.toString(position));
  if (!(from < to)) {
    return null;
  }
  return mModules.subList(from,to);
}",0.9400244798041616
168385,"@Override public Fragment getItem(int position){
  ModulesFragment fragment=ModulesFragment.newInstance(position);
  return fragment;
}","@Override public Fragment getItem(int position){
  return ModulesFragment.newInstance(position);
}",0.8154506437768241
168386,"public static List<ModuleInfo> getActiveModules(){
  List<ModuleInfo> moduleList=new LinkedList<ModuleInfo>();
  return moduleList;
}","public static List<ModuleInfo> getActiveModules(){
  return new LinkedList<ModuleInfo>();
}",0.7857142857142857
168387,"@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  onItemSelect(elements[position]);
  currentValue.set(elements[position]);
}","@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  currentValue.set(elements[position]);
  onItemSelect(elements[position]);
}",0.7869822485207101
168388,"@Override public View onCreateView(DebugModule parent,LayoutInflater inflater,ViewGroup root){
  Context context=root.getContext();
  currentValue=new StringPreference(context.getSharedPreferences(parent.getTitle(),Context.MODE_PRIVATE),getKey());
  spinner=(Spinner)inflater.inflate(R.layout.debug_template_spinner,null);
  adapter=new ArrayAdapter<>(context,android.R.layout.simple_spinner_item,elements);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  spinner.setGravity(Gravity.START | Gravity.END | Gravity.CENTER_VERTICAL);
  spinner.setAdapter(adapter);
  if (currentValue.isSet() && rememberState) {
    spinner.setSelection(adapter.getPosition(currentValue.get()),false);
  }
 else {
    spinner.setSelection(0,false);
  }
  spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      onItemSelect(elements[position]);
      currentValue.set(elements[position]);
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  TextView nameView=new TextView(context);
  nameView.setText(name);
  return TextElement.createDefaultLayout(nameView,spinner);
}","@Override public View onCreateView(DebugModule parent,LayoutInflater inflater,ViewGroup root){
  Context context=root.getContext();
  currentValue=new StringPreference(context.getSharedPreferences(parent.getTitle(),Context.MODE_PRIVATE),getKey());
  spinner=(Spinner)inflater.inflate(R.layout.debug_template_spinner,null);
  adapter=new ArrayAdapter<>(context,android.R.layout.simple_spinner_item,elements);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  spinner.setGravity(Gravity.START | Gravity.END | Gravity.CENTER_VERTICAL);
  spinner.setAdapter(adapter);
  if (currentValue.isSet() && rememberState) {
    spinner.setSelection(adapter.getPosition(currentValue.get()),false);
  }
 else {
    spinner.setSelection(0,false);
  }
  spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      currentValue.set(elements[position]);
      onItemSelect(elements[position]);
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  TextView nameView=new TextView(context);
  nameView.setText(name);
  return TextElement.createDefaultLayout(nameView,spinner);
}",0.9651898734177216
168389,"/** 
 * Dismisses all tooltips currently being displayed.
 * @param animate True to animate the transition.
 */
public void dismiss(boolean animate){
  if (animate) {
    List<Animator> a=new ArrayList<>();
    for (int i=0; i < getChildCount(); i++) {
      a.add(ObjectAnimator.ofFloat(getChildAt(i),View.ALPHA,0));
    }
    AnimatorSet s=new AnimatorSet();
    s.playTogether(a);
    s.addListener(new AnimatorListener(){
      @Override public void onAnimationStart(      Animator animation){
      }
      @Override public void onAnimationEnd(      Animator animation){
        removeAllViews();
        mToolTips.clear();
      }
      @Override public void onAnimationCancel(      Animator animation){
      }
      @Override public void onAnimationRepeat(      Animator animation){
      }
    }
);
    s.start();
  }
 else {
    removeAllViews();
    mToolTips.clear();
  }
}","/** 
 * Dismisses all tooltips currently being displayed.
 * @param animate True to animate the transition.
 */
public void dismiss(boolean animate){
  mToolTips.clear();
  if (animate) {
    final List<View> viewsToRemove=new ArrayList<>();
    List<Animator> a=new ArrayList<>();
    for (int i=0; i < getChildCount(); i++) {
      a.add(ObjectAnimator.ofFloat(getChildAt(i),View.ALPHA,0));
      viewsToRemove.add(getChildAt(i));
    }
    AnimatorSet s=new AnimatorSet();
    s.playTogether(a);
    s.addListener(new AnimatorListener(){
      @Override public void onAnimationStart(      Animator animation){
      }
      @Override public void onAnimationEnd(      Animator animation){
        for (        View v : viewsToRemove) {
          removeView(v);
        }
      }
      @Override public void onAnimationCancel(      Animator animation){
      }
      @Override public void onAnimationRepeat(      Animator animation){
      }
    }
);
    s.start();
  }
 else {
    removeAllViews();
  }
}",0.8714965626652564
168390,"@Override public void onAnimationEnd(Animator animation){
  removeAllViews();
  mToolTips.clear();
}","@Override public void onAnimationEnd(Animator animation){
  for (  View v : viewsToRemove) {
    removeView(v);
  }
}",0.7188940092165899
168391,"/** 
 * Stores the lap data in the exercise and calculate the missing values.
 */
private void storeLaps(){
  int lapDistanceSum=0;
  List<Lap> lLaps=new LinkedList<>();
  long startTime=Date310Utils.getMilliseconds(exercise.getDateTime());
  for (  FitLap fitLap : lFitLaps) {
    Lap lap=fitLap.getLap();
    lLaps.add(lap);
    long lapSplitDateTimeMillis=Date310Utils.getMilliseconds(fitLap.getSplitDatTime());
    lap.setTimeSplit((int)((lapSplitDateTimeMillis - startTime) / 100));
    ExerciseSample sampleAtLapEnd=getExerciseSampleForLapEnd(lap);
    lap.setHeartRateSplit(sampleAtLapEnd.getHeartRate());
    if (lap.getSpeed() != null) {
      lapDistanceSum+=lap.getSpeed().getDistance();
      lap.getSpeed().setDistance(lapDistanceSum);
      lap.getSpeed().setSpeedEnd(sampleAtLapEnd.getSpeed());
      lap.getSpeed().setCadence(sampleAtLapEnd.getCadence());
    }
    if (lap.getAltitude() != null) {
      lap.setAltitude(lap.getAltitude().copy((short)sampleAtLapEnd.getAltitude(),lap.getAltitude().getAscent()));
    }
    if (temperatureAvailable) {
      lap.setTemperature(new LapTemperature(sampleAtLapEnd.getTemperature()));
    }
  }
  exercise.getLapList().addAll(lLaps);
}","/** 
 * Stores the lap data in the exercise and calculate the missing values.
 */
private void storeLaps(){
  int lapDistanceSum=0;
  List<Lap> lLaps=new LinkedList<>();
  long startTime=Date310Utils.getMilliseconds(exercise.getDateTime());
  for (  FitLap fitLap : lFitLaps) {
    Lap lap=fitLap.getLap();
    lLaps.add(lap);
    long lapSplitDateTimeMillis=Date310Utils.getMilliseconds(fitLap.getSplitDatTime());
    lap.setTimeSplit((int)((lapSplitDateTimeMillis - startTime) / 100));
    ExerciseSample sampleAtLapEnd=getExerciseSampleForLapEnd(lap);
    lap.setHeartRateSplit(sampleAtLapEnd.getHeartRate());
    if (lap.getSpeed() != null) {
      lapDistanceSum+=lap.getSpeed().getDistance();
      lap.getSpeed().setDistance(lapDistanceSum);
      lap.getSpeed().setSpeedEnd(sampleAtLapEnd.getSpeed() == null ? 0 : sampleAtLapEnd.getSpeed());
      lap.getSpeed().setCadence(sampleAtLapEnd.getCadence());
    }
    if (lap.getAltitude() != null) {
      lap.setAltitude(lap.getAltitude().copy((short)sampleAtLapEnd.getAltitude(),lap.getAltitude().getAscent()));
    }
    if (temperatureAvailable) {
      lap.setTemperature(new LapTemperature(sampleAtLapEnd.getTemperature()));
    }
  }
  exercise.getLapList().addAll(lLaps);
}",0.9835526315789472
168392,"/** 
 * Calculates the min, max and average altitude (if available) from the sample data.
 */
private void calculateAltitudeSummary(){
  if (exercise.getRecordingMode().isAltitude() && exercise.getSampleList().size() > 0) {
    short altMin=Short.MAX_VALUE;
    short altMax=Short.MIN_VALUE;
    int altitudeSum=0;
    for (    ExerciseSample sample : exercise.getSampleList()) {
      altMin=(short)Math.min(sample.getAltitude(),altMin);
      altMax=(short)Math.max(sample.getAltitude(),altMax);
      altitudeSum+=sample.getAltitude();
    }
    exercise.getAltitude().setAltitudeMin(altMin);
    exercise.getAltitude().setAltitudeMax(altMax);
    exercise.getAltitude().setAltitudeAvg((short)(Math.round(altitudeSum / (double)exercise.getSampleList().size())));
  }
}","/** 
 * Calculates the min, max and average altitude (if available) from the sample data.
 */
private void calculateAltitudeSummary(){
  if (exercise.getRecordingMode().isAltitude() && exercise.getSampleList().size() > 0) {
    short altMin=Short.MAX_VALUE;
    short altMax=Short.MIN_VALUE;
    int altitudeSum=0;
    for (    ExerciseSample sample : exercise.getSampleList()) {
      short sampleAltitude=sample.getAltitude() == null ? 0 : sample.getAltitude();
      altMin=(short)Math.min(sampleAltitude,altMin);
      altMax=(short)Math.max(sampleAltitude,altMax);
      altitudeSum+=sampleAltitude;
    }
    exercise.getAltitude().setAltitudeMin(altMin);
    exercise.getAltitude().setAltitudeMax(altMax);
    exercise.getAltitude().setAltitudeAvg((short)(Math.round(altitudeSum / (double)exercise.getSampleList().size())));
  }
}",0.8718905472636815
168393,"private String readDatabaseSchema() throws STException {
  try {
    final List<String> lines=Files.readAllLines(Paths.get(this.getClass().getResource(SCHEMA_FILE).toURI()));
    return lines.stream().collect(Collectors.joining(""String_Node_Str""));
  }
 catch (  IOException|URISyntaxException e) {
    throw new STException(STExceptionID.SQLITE_EXPORT,""String_Node_Str"" + SCHEMA_FILE + ""String_Node_Str"",e);
  }
}","private String readDatabaseSchema() throws STException {
  try (BufferedReader reader=new BufferedReader(new InputStreamReader(this.getClass().getResourceAsStream(SCHEMA_FILE)))){
    StringBuffer fileContent=new StringBuffer();
    String line;
    while ((line=reader.readLine()) != null) {
      fileContent.append(line).append('\n');
    }
    return fileContent.toString();
  }
 catch (  IOException e) {
    throw new STException(STExceptionID.SQLITE_EXPORT,""String_Node_Str"" + SCHEMA_FILE + ""String_Node_Str"",e);
  }
}",0.5026624068157615
168394,"/** 
 * Reads HRM device information from the specified DeviceInfoMesg message.
 * @param mesg device info message
 */
private void readDeviceInfoMessage(DeviceInfoMesg mesg){
  final Integer garminProductId=mesg.getGarminProduct();
  if (garminProductId != null && garminProductId.intValue() != 0) {
    String deviceName=""String_Node_Str"" + getGarminProductConstantName(garminProductId);
    exercise.setDeviceName(deviceName);
  }
}","/** 
 * Reads HRM device information from the specified DeviceInfoMesg message.
 * @param mesg device info message
 */
private void readDeviceInfoMessage(DeviceInfoMesg mesg){
  final Integer garminProductId=mesg.getGarminProduct();
  if (garminProductId != null && garminProductId.intValue() > 100) {
    String productName=getGarminProductConstantName(garminProductId);
    if (productName != null) {
      exercise.setDeviceName(""String_Node_Str"" + productName);
    }
  }
}",0.7324561403508771
168395,"/** 
 * This method tests the parser with an exercise file with running data recorded by a Garmin Forerunner 910XT. Mostly the differences of this device are tested here.
 */
@Test public void testParseExerciseForerunner910XT() throws EVException {
  EVExercise exercise=parser.parseExercise(""String_Node_Str"");
  assertEquals(EVExercise.ExerciseFileType.GARMIN_FIT,exercise.getFileType());
  assertTrue(exercise.getRecordingMode().isSpeed());
  assertTrue(exercise.getRecordingMode().isLocation());
  assertTrue(exercise.getRecordingMode().isAltitude());
  assertFalse(exercise.getRecordingMode().isCadence());
  assertFalse(exercise.getRecordingMode().isTemperature());
  assertEquals(LocalDateTime.of(2012,9,29,17,2,19),exercise.getDateTime());
  assertEquals(30067,exercise.getDuration());
  assertEquals(155,exercise.getHeartRateAVG());
  assertEquals(168,exercise.getHeartRateMax());
  assertEquals(681,exercise.getEnergy());
  assertEquals(9843,exercise.getSpeed().getDistance());
  assertEquals(11.7841,exercise.getSpeed().getSpeedAVG(),0.001d);
  assertEquals(15.2424,exercise.getSpeed().getSpeedMax(),0.001d);
  assertEquals(69,exercise.getAltitude().getAscent());
  assertEquals(97,exercise.getAltitude().getAltitudeMin());
  assertEquals(108,exercise.getAltitude().getAltitudeAVG());
  assertEquals(116,exercise.getAltitude().getAltitudeMax());
  assertNull(exercise.getCadence());
  assertNull(exercise.getTemperature());
  assertEquals(10,exercise.getLapList().length);
  assertEquals(((0 * 3600) + (25 * 60) + 53) * 10,exercise.getLapList()[4].getTimeSplit());
  assertEquals(155,exercise.getLapList()[4].getHeartRateAVG());
  assertEquals(159,exercise.getLapList()[4].getHeartRateMax());
  assertEquals(159,exercise.getLapList()[4].getHeartRateSplit());
  assertEquals(5000,exercise.getLapList()[4].getSpeed().getDistance());
  assertEquals(11.5905,exercise.getLapList()[4].getSpeed().getSpeedAVG(),0.001d);
  assertEquals(11.5848,exercise.getLapList()[4].getSpeed().getSpeedEnd(),0.001d);
  assertEquals(5,exercise.getLapList()[4].getAltitude().getAscent());
  assertEquals(104,exercise.getLapList()[4].getAltitude().getAltitude());
  assertNull(exercise.getLapList()[4].getTemperature());
  assertEquals(49.42301d,exercise.getLapList()[4].getPositionSplit().getLatitude(),0.001d);
  assertEquals(8.620427d,exercise.getLapList()[4].getPositionSplit().getLongitude(),0.001d);
  assertEquals(743,exercise.getSampleList().length);
  assertEquals(0,exercise.getSampleList()[0].getTimestamp());
  assertEquals(79,exercise.getSampleList()[0].getHeartRate());
  assertEquals(1,exercise.getSampleList()[0].getDistance());
  assertEquals(2.5452d,exercise.getSampleList()[0].getSpeed(),0.001d);
  assertEquals(109,exercise.getSampleList()[0].getAltitude());
  assertEquals(0,exercise.getSampleList()[0].getCadence());
  assertEquals(49.41165d,exercise.getSampleList()[0].getPosition().getLatitude(),0.001d);
  assertEquals(8.65186d,exercise.getSampleList()[0].getPosition().getLongitude(),0.001d);
  assertEquals(0,exercise.getSampleList()[0].getTemperature());
  assertEquals(2048000,exercise.getSampleList()[500].getTimestamp());
  assertEquals(157,exercise.getSampleList()[500].getHeartRate());
  assertEquals(6670,exercise.getSampleList()[500].getDistance());
  assertEquals(12.2508d,exercise.getSampleList()[500].getSpeed(),0.001d);
  assertEquals(102,exercise.getSampleList()[500].getAltitude());
  assertEquals(0,exercise.getSampleList()[500].getCadence());
  assertEquals(49.42749d,exercise.getSampleList()[500].getPosition().getLatitude(),0.001d);
  assertEquals(8.63364d,exercise.getSampleList()[500].getPosition().getLongitude(),0.001d);
  assertEquals(0,exercise.getSampleList()[500].getTemperature());
}","/** 
 * This method tests the parser with an exercise file with running data recorded by a Garmin Forerunner 910XT. Mostly the differences of this device are tested here.
 */
@Test public void testParseExerciseForerunner910XT() throws EVException {
  EVExercise exercise=parser.parseExercise(""String_Node_Str"");
  assertEquals(EVExercise.ExerciseFileType.GARMIN_FIT,exercise.getFileType());
  assertEquals(""String_Node_Str"",exercise.getDeviceName());
  assertTrue(exercise.getRecordingMode().isSpeed());
  assertTrue(exercise.getRecordingMode().isLocation());
  assertTrue(exercise.getRecordingMode().isAltitude());
  assertFalse(exercise.getRecordingMode().isCadence());
  assertFalse(exercise.getRecordingMode().isTemperature());
  assertEquals(LocalDateTime.of(2012,9,29,17,2,19),exercise.getDateTime());
  assertEquals(30067,exercise.getDuration());
  assertEquals(155,exercise.getHeartRateAVG());
  assertEquals(168,exercise.getHeartRateMax());
  assertEquals(681,exercise.getEnergy());
  assertEquals(9843,exercise.getSpeed().getDistance());
  assertEquals(11.7841,exercise.getSpeed().getSpeedAVG(),0.001d);
  assertEquals(15.2424,exercise.getSpeed().getSpeedMax(),0.001d);
  assertEquals(69,exercise.getAltitude().getAscent());
  assertEquals(97,exercise.getAltitude().getAltitudeMin());
  assertEquals(108,exercise.getAltitude().getAltitudeAVG());
  assertEquals(116,exercise.getAltitude().getAltitudeMax());
  assertNull(exercise.getCadence());
  assertNull(exercise.getTemperature());
  assertEquals(10,exercise.getLapList().length);
  assertEquals(((0 * 3600) + (25 * 60) + 53) * 10,exercise.getLapList()[4].getTimeSplit());
  assertEquals(155,exercise.getLapList()[4].getHeartRateAVG());
  assertEquals(159,exercise.getLapList()[4].getHeartRateMax());
  assertEquals(159,exercise.getLapList()[4].getHeartRateSplit());
  assertEquals(5000,exercise.getLapList()[4].getSpeed().getDistance());
  assertEquals(11.5905,exercise.getLapList()[4].getSpeed().getSpeedAVG(),0.001d);
  assertEquals(11.5848,exercise.getLapList()[4].getSpeed().getSpeedEnd(),0.001d);
  assertEquals(5,exercise.getLapList()[4].getAltitude().getAscent());
  assertEquals(104,exercise.getLapList()[4].getAltitude().getAltitude());
  assertNull(exercise.getLapList()[4].getTemperature());
  assertEquals(49.42301d,exercise.getLapList()[4].getPositionSplit().getLatitude(),0.001d);
  assertEquals(8.620427d,exercise.getLapList()[4].getPositionSplit().getLongitude(),0.001d);
  assertEquals(743,exercise.getSampleList().length);
  assertEquals(0,exercise.getSampleList()[0].getTimestamp());
  assertEquals(79,exercise.getSampleList()[0].getHeartRate());
  assertEquals(1,exercise.getSampleList()[0].getDistance());
  assertEquals(2.5452d,exercise.getSampleList()[0].getSpeed(),0.001d);
  assertEquals(109,exercise.getSampleList()[0].getAltitude());
  assertEquals(0,exercise.getSampleList()[0].getCadence());
  assertEquals(49.41165d,exercise.getSampleList()[0].getPosition().getLatitude(),0.001d);
  assertEquals(8.65186d,exercise.getSampleList()[0].getPosition().getLongitude(),0.001d);
  assertEquals(0,exercise.getSampleList()[0].getTemperature());
  assertEquals(2048000,exercise.getSampleList()[500].getTimestamp());
  assertEquals(157,exercise.getSampleList()[500].getHeartRate());
  assertEquals(6670,exercise.getSampleList()[500].getDistance());
  assertEquals(12.2508d,exercise.getSampleList()[500].getSpeed(),0.001d);
  assertEquals(102,exercise.getSampleList()[500].getAltitude());
  assertEquals(0,exercise.getSampleList()[500].getCadence());
  assertEquals(49.42749d,exercise.getSampleList()[500].getPosition().getLatitude(),0.001d);
  assertEquals(8.63364d,exercise.getSampleList()[500].getPosition().getLongitude(),0.001d);
  assertEquals(0,exercise.getSampleList()[500].getTemperature());
}",0.9920063948840928
168396,"/** 
 * This method tests the parser with an exercise file with cycling data (contains speed, heartrate, altitude and cadence data).
 */
@Test public void testParseExercise() throws EVException {
  EVExercise exercise=parser.parseExercise(""String_Node_Str"");
  assertEquals(EVExercise.ExerciseFileType.GARMIN_FIT,exercise.getFileType());
  assertTrue(exercise.getRecordingMode().isSpeed());
  assertTrue(exercise.getRecordingMode().isLocation());
  assertTrue(exercise.getRecordingMode().isAltitude());
  assertTrue(exercise.getRecordingMode().isCadence());
  assertTrue(exercise.getRecordingMode().isTemperature());
  assertEquals(LocalDateTime.of(2010,7,4,6,7,36),exercise.getDateTime());
  assertEquals(146499,exercise.getDuration());
  assertEquals(121,exercise.getHeartRateAVG());
  assertEquals(180,exercise.getHeartRateMax());
  assertEquals(1567,exercise.getEnergy());
  assertEquals(101710,exercise.getSpeed().getDistance());
  assertEquals(24.9948,exercise.getSpeed().getSpeedAVG(),0.001d);
  assertEquals(68.4648,exercise.getSpeed().getSpeedMax(),0.001d);
  assertEquals(1115,exercise.getAltitude().getAscent());
  assertEquals(127,exercise.getAltitude().getAltitudeMin());
  assertEquals(290,exercise.getAltitude().getAltitudeAVG());
  assertEquals(419,exercise.getAltitude().getAltitudeMax());
  assertEquals(84,exercise.getCadence().getCadenceAVG());
  assertEquals(119,exercise.getCadence().getCadenceMax());
  assertEquals(19,exercise.getTemperature().getTemperatureMin());
  assertEquals(24,exercise.getTemperature().getTemperatureAVG());
  assertEquals(32,exercise.getTemperature().getTemperatureMax());
  assertEquals(5,exercise.getLapList().length);
  assertEquals(((0 * 3600) + (29 * 60) + 15) * 10,exercise.getLapList()[0].getTimeSplit());
  assertEquals(126,exercise.getLapList()[0].getHeartRateAVG());
  assertEquals(146,exercise.getLapList()[0].getHeartRateMax());
  assertEquals(122,exercise.getLapList()[0].getHeartRateSplit());
  assertEquals(11084,exercise.getLapList()[0].getSpeed().getDistance());
  assertEquals(22.7334,exercise.getLapList()[0].getSpeed().getSpeedAVG(),0.001d);
  assertEquals(22.1364,exercise.getLapList()[0].getSpeed().getSpeedEnd(),0.001d);
  assertEquals(151,exercise.getLapList()[0].getAltitude().getAscent());
  assertEquals(302,exercise.getLapList()[0].getAltitude().getAltitude());
  assertEquals(20,exercise.getLapList()[0].getTemperature().getTemperature());
  assertEquals(51.05553d,exercise.getLapList()[0].getPositionSplit().getLatitude(),0.001d);
  assertEquals(13.93589d,exercise.getLapList()[0].getPositionSplit().getLongitude(),0.001d);
  assertEquals(((2 * 3600) + (11 * 60) + 46) * 10,exercise.getLapList()[2].getTimeSplit());
  assertEquals(124,exercise.getLapList()[2].getHeartRateAVG());
  assertEquals(145,exercise.getLapList()[2].getHeartRateMax());
  assertEquals(98,exercise.getLapList()[2].getHeartRateSplit());
  assertEquals(48391,exercise.getLapList()[2].getSpeed().getDistance());
  assertEquals(21.7080,exercise.getLapList()[2].getSpeed().getSpeedAVG(),0.001d);
  assertEquals(1.0440,exercise.getLapList()[2].getSpeed().getSpeedEnd(),0.001d);
  assertEquals(342,exercise.getLapList()[2].getAltitude().getAscent());
  assertEquals(417,exercise.getLapList()[2].getAltitude().getAltitude());
  assertEquals(24,exercise.getLapList()[2].getTemperature().getTemperature());
  assertEquals(51.00746d,exercise.getLapList()[2].getPositionSplit().getLatitude(),0.001d);
  assertEquals(14.20151d,exercise.getLapList()[2].getPositionSplit().getLongitude(),0.001d);
  assertEquals(((4 * 3600) + (28 * 60) + 16) * 10,exercise.getLapList()[4].getTimeSplit());
  assertEquals(120,exercise.getLapList()[4].getHeartRateAVG());
  assertEquals(144,exercise.getLapList()[4].getHeartRateMax());
  assertEquals(94,exercise.getLapList()[4].getHeartRateSplit());
  assertEquals(101711,exercise.getLapList()[4].getSpeed().getDistance());
  assertEquals(26.0136,exercise.getLapList()[4].getSpeed().getSpeedAVG(),0.001d);
  assertEquals(0d,exercise.getLapList()[4].getSpeed().getSpeedEnd(),0.001d);
  assertEquals(206,exercise.getLapList()[4].getAltitude().getAscent());
  assertEquals(237,exercise.getLapList()[4].getAltitude().getAltitude());
  assertEquals(30,exercise.getLapList()[4].getTemperature().getTemperature());
  assertEquals(51.05450d,exercise.getLapList()[4].getPositionSplit().getLatitude(),0.001d);
  assertEquals(13.83227d,exercise.getLapList()[4].getPositionSplit().getLongitude(),0.001d);
  assertEquals(8235,exercise.getSampleList().length);
  assertEquals(1000,exercise.getSampleList()[0].getTimestamp());
  assertEquals(97,exercise.getSampleList()[0].getHeartRate());
  assertEquals(0,exercise.getSampleList()[0].getDistance());
  assertEquals(13.8744d,exercise.getSampleList()[0].getSpeed(),0.001d);
  assertEquals(232,exercise.getSampleList()[0].getAltitude());
  assertEquals(67,exercise.getSampleList()[0].getCadence());
  assertEquals(51.05350d,exercise.getSampleList()[0].getPosition().getLatitude(),0.001d);
  assertEquals(13.83309d,exercise.getSampleList()[0].getPosition().getLongitude(),0.001d);
  assertEquals(20,exercise.getSampleList()[0].getTemperature());
  assertEquals(10 * 1000,exercise.getSampleList()[5].getTimestamp());
  assertEquals(110,exercise.getSampleList()[5].getHeartRate());
  assertEquals(34,exercise.getSampleList()[5].getDistance());
  assertEquals(12.2364,exercise.getSampleList()[5].getSpeed(),0.001d);
  assertEquals(233,exercise.getSampleList()[5].getAltitude());
  assertEquals(69,exercise.getSampleList()[5].getCadence());
  assertEquals(51.05323d,exercise.getSampleList()[5].getPosition().getLatitude(),0.001d);
  assertEquals(13.83324d,exercise.getSampleList()[5].getPosition().getLongitude(),0.001d);
  assertEquals(20,exercise.getSampleList()[5].getTemperature());
  assertEquals(((4 * 3600) + (28 * 60) + 15) * 1000,exercise.getSampleList()[8234].getTimestamp());
  assertEquals(94,exercise.getSampleList()[8234].getHeartRate());
  assertEquals(101710,exercise.getSampleList()[8234].getDistance());
  assertEquals(0d,exercise.getSampleList()[8234].getSpeed(),0.001d);
  assertEquals(237,exercise.getSampleList()[8234].getAltitude());
  assertEquals(0,exercise.getSampleList()[8234].getCadence());
  assertEquals(51.05450d,exercise.getSampleList()[8234].getPosition().getLatitude(),0.001d);
  assertEquals(13.83227d,exercise.getSampleList()[8234].getPosition().getLongitude(),0.001d);
  assertEquals(30,exercise.getSampleList()[8234].getTemperature());
}","/** 
 * This method tests the parser with an exercise file with cycling data (contains speed, heartrate, altitude and cadence data).
 */
@Test public void testParseExercise() throws EVException {
  EVExercise exercise=parser.parseExercise(""String_Node_Str"");
  assertEquals(EVExercise.ExerciseFileType.GARMIN_FIT,exercise.getFileType());
  assertEquals(""String_Node_Str"",exercise.getDeviceName());
  assertTrue(exercise.getRecordingMode().isSpeed());
  assertTrue(exercise.getRecordingMode().isLocation());
  assertTrue(exercise.getRecordingMode().isAltitude());
  assertTrue(exercise.getRecordingMode().isCadence());
  assertTrue(exercise.getRecordingMode().isTemperature());
  assertEquals(LocalDateTime.of(2010,7,4,6,7,36),exercise.getDateTime());
  assertEquals(146499,exercise.getDuration());
  assertEquals(121,exercise.getHeartRateAVG());
  assertEquals(180,exercise.getHeartRateMax());
  assertEquals(1567,exercise.getEnergy());
  assertEquals(101710,exercise.getSpeed().getDistance());
  assertEquals(24.9948,exercise.getSpeed().getSpeedAVG(),0.001d);
  assertEquals(68.4648,exercise.getSpeed().getSpeedMax(),0.001d);
  assertEquals(1115,exercise.getAltitude().getAscent());
  assertEquals(127,exercise.getAltitude().getAltitudeMin());
  assertEquals(290,exercise.getAltitude().getAltitudeAVG());
  assertEquals(419,exercise.getAltitude().getAltitudeMax());
  assertEquals(84,exercise.getCadence().getCadenceAVG());
  assertEquals(119,exercise.getCadence().getCadenceMax());
  assertEquals(19,exercise.getTemperature().getTemperatureMin());
  assertEquals(24,exercise.getTemperature().getTemperatureAVG());
  assertEquals(32,exercise.getTemperature().getTemperatureMax());
  assertEquals(5,exercise.getLapList().length);
  assertEquals(((0 * 3600) + (29 * 60) + 15) * 10,exercise.getLapList()[0].getTimeSplit());
  assertEquals(126,exercise.getLapList()[0].getHeartRateAVG());
  assertEquals(146,exercise.getLapList()[0].getHeartRateMax());
  assertEquals(122,exercise.getLapList()[0].getHeartRateSplit());
  assertEquals(11084,exercise.getLapList()[0].getSpeed().getDistance());
  assertEquals(22.7334,exercise.getLapList()[0].getSpeed().getSpeedAVG(),0.001d);
  assertEquals(22.1364,exercise.getLapList()[0].getSpeed().getSpeedEnd(),0.001d);
  assertEquals(151,exercise.getLapList()[0].getAltitude().getAscent());
  assertEquals(302,exercise.getLapList()[0].getAltitude().getAltitude());
  assertEquals(20,exercise.getLapList()[0].getTemperature().getTemperature());
  assertEquals(51.05553d,exercise.getLapList()[0].getPositionSplit().getLatitude(),0.001d);
  assertEquals(13.93589d,exercise.getLapList()[0].getPositionSplit().getLongitude(),0.001d);
  assertEquals(((2 * 3600) + (11 * 60) + 46) * 10,exercise.getLapList()[2].getTimeSplit());
  assertEquals(124,exercise.getLapList()[2].getHeartRateAVG());
  assertEquals(145,exercise.getLapList()[2].getHeartRateMax());
  assertEquals(98,exercise.getLapList()[2].getHeartRateSplit());
  assertEquals(48391,exercise.getLapList()[2].getSpeed().getDistance());
  assertEquals(21.7080,exercise.getLapList()[2].getSpeed().getSpeedAVG(),0.001d);
  assertEquals(1.0440,exercise.getLapList()[2].getSpeed().getSpeedEnd(),0.001d);
  assertEquals(342,exercise.getLapList()[2].getAltitude().getAscent());
  assertEquals(417,exercise.getLapList()[2].getAltitude().getAltitude());
  assertEquals(24,exercise.getLapList()[2].getTemperature().getTemperature());
  assertEquals(51.00746d,exercise.getLapList()[2].getPositionSplit().getLatitude(),0.001d);
  assertEquals(14.20151d,exercise.getLapList()[2].getPositionSplit().getLongitude(),0.001d);
  assertEquals(((4 * 3600) + (28 * 60) + 16) * 10,exercise.getLapList()[4].getTimeSplit());
  assertEquals(120,exercise.getLapList()[4].getHeartRateAVG());
  assertEquals(144,exercise.getLapList()[4].getHeartRateMax());
  assertEquals(94,exercise.getLapList()[4].getHeartRateSplit());
  assertEquals(101711,exercise.getLapList()[4].getSpeed().getDistance());
  assertEquals(26.0136,exercise.getLapList()[4].getSpeed().getSpeedAVG(),0.001d);
  assertEquals(0d,exercise.getLapList()[4].getSpeed().getSpeedEnd(),0.001d);
  assertEquals(206,exercise.getLapList()[4].getAltitude().getAscent());
  assertEquals(237,exercise.getLapList()[4].getAltitude().getAltitude());
  assertEquals(30,exercise.getLapList()[4].getTemperature().getTemperature());
  assertEquals(51.05450d,exercise.getLapList()[4].getPositionSplit().getLatitude(),0.001d);
  assertEquals(13.83227d,exercise.getLapList()[4].getPositionSplit().getLongitude(),0.001d);
  assertEquals(8235,exercise.getSampleList().length);
  assertEquals(1000,exercise.getSampleList()[0].getTimestamp());
  assertEquals(97,exercise.getSampleList()[0].getHeartRate());
  assertEquals(0,exercise.getSampleList()[0].getDistance());
  assertEquals(13.8744d,exercise.getSampleList()[0].getSpeed(),0.001d);
  assertEquals(232,exercise.getSampleList()[0].getAltitude());
  assertEquals(67,exercise.getSampleList()[0].getCadence());
  assertEquals(51.05350d,exercise.getSampleList()[0].getPosition().getLatitude(),0.001d);
  assertEquals(13.83309d,exercise.getSampleList()[0].getPosition().getLongitude(),0.001d);
  assertEquals(20,exercise.getSampleList()[0].getTemperature());
  assertEquals(10 * 1000,exercise.getSampleList()[5].getTimestamp());
  assertEquals(110,exercise.getSampleList()[5].getHeartRate());
  assertEquals(34,exercise.getSampleList()[5].getDistance());
  assertEquals(12.2364,exercise.getSampleList()[5].getSpeed(),0.001d);
  assertEquals(233,exercise.getSampleList()[5].getAltitude());
  assertEquals(69,exercise.getSampleList()[5].getCadence());
  assertEquals(51.05323d,exercise.getSampleList()[5].getPosition().getLatitude(),0.001d);
  assertEquals(13.83324d,exercise.getSampleList()[5].getPosition().getLongitude(),0.001d);
  assertEquals(20,exercise.getSampleList()[5].getTemperature());
  assertEquals(((4 * 3600) + (28 * 60) + 15) * 1000,exercise.getSampleList()[8234].getTimestamp());
  assertEquals(94,exercise.getSampleList()[8234].getHeartRate());
  assertEquals(101710,exercise.getSampleList()[8234].getDistance());
  assertEquals(0d,exercise.getSampleList()[8234].getSpeed(),0.001d);
  assertEquals(237,exercise.getSampleList()[8234].getAltitude());
  assertEquals(0,exercise.getSampleList()[8234].getCadence());
  assertEquals(51.05450d,exercise.getSampleList()[8234].getPosition().getLatitude(),0.001d);
  assertEquals(13.83227d,exercise.getSampleList()[8234].getPosition().getLongitude(),0.001d);
  assertEquals(30,exercise.getSampleList()[8234].getTemperature());
}",0.9953867445794248
168397,"private void setupMapViewer(){
  mapKit=new JXMapKit();
  mapKit.setDefaultProvider(JXMapKit.DefaultProviders.OpenStreetMaps);
  mapKit.setBorder(new javax.swing.border.EmptyBorder(8,8,8,8));
  mouseMotionListener=new MouseMotionAdapter(){
    @Override public void mouseMoved(    MouseEvent e){
      lookupNearbySampleAndCreateToolTip(e);
    }
  }
;
  mapKit.getMainMap().addMouseMotionListener(mouseMotionListener);
  snMapViewer.setContent(mapKit);
}","private void setupMapViewer(){
  mapKit=new JXMapKit();
  mapKit.setDefaultProvider(JXMapKit.DefaultProviders.OpenStreetMaps);
  mapKit.setBorder(new javax.swing.border.EmptyBorder(8,8,8,8));
  mouseMotionListener=new MouseMotionAdapter(){
    @Override public void mouseMoved(    MouseEvent e){
      lookupNearbySampleAndCreateToolTip(e);
    }
  }
;
  mapKit.getMainMap().addMouseMotionListener(mouseMotionListener);
  mapKit.setVisible(false);
  snMapViewer.setContent(mapKit);
}",0.9594882729211088
168398,"/** 
 * Sets the zoom level and map center position. The full track will be visible with as much details as possible. This implementations is a workaround for a bug in JXMapViewer.calculateZoomFrom(), which should do the same.
 * @param positions list of positions of the route
 */
private void setupZoomAndCenterPosition(List<GeoPosition> positions){
  Rectangle2D gpRectangle=createGeoPositionRectangle(positions);
  GeoPosition gpCenter=new GeoPosition(gpRectangle.getCenterX(),gpRectangle.getCenterY());
  mapKit.setCenterPosition(gpCenter);
  Bounds mapViewerBounds=snMapViewer.getLayoutBounds();
  int mapKitWidth=(int)mapViewerBounds.getWidth() - 30;
  int mapKitHeight=(int)mapViewerBounds.getHeight() - 30;
  boolean fullTrackVisible=false;
  int currentZoom=0;
  int maxZoom=mapKit.getMainMap().getTileFactory().getInfo().getMaximumZoomLevel();
  while (!fullTrackVisible && currentZoom < maxZoom) {
    currentZoom++;
    mapKit.setZoom(currentZoom);
    Point2D ptTopLeft=convertGeoPosToPixelPos(new GeoPosition(gpRectangle.getX(),gpRectangle.getY()));
    Point2D ptBottomRight=convertGeoPosToPixelPos(new GeoPosition(gpRectangle.getX() + gpRectangle.getWidth(),gpRectangle.getY() + gpRectangle.getHeight()));
    int trackPixelWidth=Math.abs((int)(ptBottomRight.getX() - ptTopLeft.getX()));
    int trackPixelHeight=Math.abs((int)(ptBottomRight.getY() - ptTopLeft.getY()));
    fullTrackVisible=trackPixelWidth < mapKitWidth && trackPixelHeight < mapKitHeight;
  }
}","/** 
 * Sets the zoom level and map center position. The full track will be visible with as much details as possible. This implementations is a workaround for a bug in JXMapViewer.calculateZoomFrom(), which should do the same.
 * @param positions list of positions of the route
 */
private void setupZoomAndCenterPosition(List<GeoPosition> positions){
  Rectangle2D gpRectangle=createGeoPositionRectangle(positions);
  GeoPosition gpCenter=new GeoPosition(gpRectangle.getCenterX(),gpRectangle.getCenterY());
  mapKit.setCenterPosition(gpCenter);
  Bounds mapViewerBounds=spTrack.getLayoutBounds();
  int mapKitWidth=(int)mapViewerBounds.getWidth() - 30;
  int mapKitHeight=(int)mapViewerBounds.getHeight() - 30;
  boolean fullTrackVisible=false;
  int currentZoom=0;
  int maxZoom=mapKit.getMainMap().getTileFactory().getInfo().getMaximumZoomLevel();
  while (!fullTrackVisible && currentZoom < maxZoom) {
    currentZoom++;
    mapKit.setZoom(currentZoom);
    Point2D ptTopLeft=convertGeoPosToPixelPos(new GeoPosition(gpRectangle.getX(),gpRectangle.getY()));
    Point2D ptBottomRight=convertGeoPosToPixelPos(new GeoPosition(gpRectangle.getX() + gpRectangle.getWidth(),gpRectangle.getY() + gpRectangle.getHeight()));
    int trackPixelWidth=Math.abs((int)(ptBottomRight.getX() - ptTopLeft.getX()));
    int trackPixelHeight=Math.abs((int)(ptBottomRight.getY() - ptTopLeft.getY()));
    fullTrackVisible=trackPixelWidth < mapKitWidth && trackPixelHeight < mapKitHeight;
  }
}",0.9945872801082544
168399,"/** 
 * Displays the track of the current exercise, if available. This method will be executed only once and should be called when the user wants to see the track (to prevent long startup delays).
 */
public void showTrack(){
  if (!showTrackExecuted) {
    showTrackExecuted=true;
    EVExercise exercise=getDocument().getExercise();
    if (exercise.getRecordingMode().isLocation()) {
      javax.swing.SwingUtilities.invokeLater(() -> {
        List<GeoPosition> sampleGeoPositions=createSampleGeoPositionList(exercise);
        List<GeoPosition> lapGeoPositions=createLapGeoPositionList(exercise);
        if (!sampleGeoPositions.isEmpty()) {
          setupZoomAndCenterPosition(sampleGeoPositions);
          setupTrackPainter(sampleGeoPositions,lapGeoPositions);
        }
      }
);
    }
  }
}","/** 
 * Displays the track of the current exercise, if available. This method will be executed only once and should be called when the user wants to see the track (to prevent long startup delays).
 */
public void showTrack(){
  if (!showTrackExecuted) {
    showTrackExecuted=true;
    EVExercise exercise=getDocument().getExercise();
    if (exercise.getRecordingMode().isLocation()) {
      javax.swing.SwingUtilities.invokeLater(() -> {
        List<GeoPosition> sampleGeoPositions=createSampleGeoPositionList(exercise);
        List<GeoPosition> lapGeoPositions=createLapGeoPositionList(exercise);
        if (!sampleGeoPositions.isEmpty()) {
          setupZoomAndCenterPosition(sampleGeoPositions);
          setupTrackPainter(sampleGeoPositions,lapGeoPositions);
        }
        mapKit.setVisible(true);
      }
);
    }
  }
}",0.9798411728772144
168400,"/** 
 * Cleanup of the JXMapViewer component. Needs to be called when the dialog is closed, otherwise there will be memory leaks. Normally there is nothing to do, but here are problems which are probably caused by the Swing -> JavaFX integration.
 */
public void cleanupPanel(){
  spTrack.getChildren().clear();
  snMapViewer.setContent(null);
  snMapViewer=null;
  javax.swing.SwingUtilities.invokeLater(() -> {
    mapKit.getMainMap().removeMouseMotionListener(mouseMotionListener);
    mapKit.getMainMap().setOverlayPainter(null);
    mapKit.getMainMap().setToolTipText(null);
    mapKit.getMainMap().getTileFactory().dispose();
    mapKit.getMiniMap().getTileFactory().dispose();
    mapKit=null;
  }
);
}","/** 
 * Cleanup of the JXMapViewer component, if it is displayed. Needs to be called when the dialog is closed, otherwise there will be memory leaks. Normally there is nothing to do, but here are problems which are probably caused by the Swing -> JavaFX integration.
 */
public void cleanupPanel(){
  if (mapKit != null) {
    spTrack.getChildren().clear();
    snMapViewer.setContent(null);
    snMapViewer=null;
    javax.swing.SwingUtilities.invokeLater(() -> {
      mapKit.getMainMap().removeMouseMotionListener(mouseMotionListener);
      mapKit.getMainMap().setOverlayPainter(null);
      mapKit.getMainMap().setToolTipText(null);
      mapKit.getMainMap().getTileFactory().dispose();
      mapKit.getMiniMap().getTileFactory().dispose();
      mapKit=null;
    }
);
  }
}",0.952956989247312
168401,"private MenuItem createContextMenuItem(final String id,final String resourceKey,final EventHandler<ActionEvent> handler){
  final MenuItem menuItem=new MenuItem(getContext().getResources().getString(resourceKey));
  menuItem.setId(id);
  menuItem.setOnAction(handler);
  return menuItem;
}","private MenuItem createContextMenuItem(final String id,final String resourceKey,final EventHandler<ActionEvent> handler){
  final MenuItem menuItem=new MenuItem(getContext().getResources().getString(resourceKey));
  menuItem.setId(id);
  menuItem.setOnAction(handler);
  menuItem.getStyleClass().add(""String_Node_Str"");
  return menuItem;
}",0.918918918918919
168402,"/** 
 * Removes all calendar entry selections of this day cell, except the specified calendar entry.
 * @param calendarEntryExcept entry for which the selection must not be removed (can be null)
 */
public void removeSelectionExcept(final CalendarEntry calendarEntryExcept){
  calendarEntryLabels.stream().filter(calendarEntryLabel -> calendarEntryLabel.selected.get() && !calendarEntryLabel.entry.getEntry().equals(calendarEntryExcept.getEntry())).forEach(calendarEntryLabel -> calendarEntryLabel.selected.set(false));
}","/** 
 * Removes all calendar entry selections of this day cell, except the specified calendar entry.
 * @param calendarEntryExcept entry for which the selection must not be removed (can be null)
 */
public void removeSelectionExcept(final CalendarEntry calendarEntryExcept){
  final IdObject entryExcept=calendarEntryExcept == null ? null : calendarEntryExcept.getEntry();
  calendarEntryLabels.stream().filter(entryLabel -> entryLabel.selected.get() && (entryExcept == null || !entryExcept.equals(entryLabel.entry.getEntry()))).forEach(calendarEntryLabel -> calendarEntryLabel.selected.set(false));
}",0.8003565062388592
168403,"/** 
 * Test of method evaluateCommandLineParameters().
 */
@Test public void testEvaluateCommandLineParameters(){
  final String defaultDataDirectory=System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
  STDocumentImpl documentImpl=(STDocumentImpl)document;
  document.evaluateCommandLineParameters(null);
  assertEquals(defaultDataDirectory,documentImpl.getDataDirectory());
  document.evaluateCommandLineParameters(new String[]{""String_Node_Str"",""String_Node_Str""});
  assertEquals(defaultDataDirectory,documentImpl.getDataDirectory());
  document.evaluateCommandLineParameters(new String[]{""String_Node_Str"",""String_Node_Str""});
  assertEquals(""String_Node_Str"",documentImpl.getDataDirectory());
}","/** 
 * Test of method evaluateCommandLineParameters().
 */
@Test public void testEvaluateCommandLineParameters(){
  final String defaultDataDirectory=System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
  STDocumentImpl documentImpl=(STDocumentImpl)document;
  document.evaluateCommandLineParameters(new ArrayList<>());
  assertEquals(defaultDataDirectory,documentImpl.getDataDirectory());
  document.evaluateCommandLineParameters(Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  assertEquals(defaultDataDirectory,documentImpl.getDataDirectory());
  document.evaluateCommandLineParameters(Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",documentImpl.getDataDirectory());
}",0.9461914744933612
168404,"/** 
 * Loads the scene object hierarchy from the specified FXML document. This is a wrapper for the   {@link FXMLLoader#load(URL,ResourceBundle)} method. It uses the passed controllerinstead of creating a new controller class specified in the FXML file. The passed controller needs to be an instance of the same class.
 * @param url URL of the FXML resource
 * @param resBundle the ResourceBundle to use for the FXML document
 * @param controller controller to be used for the loaded hierarchy
 * @return the loaded scene object hierarchy
 * @throws IOException
 */
public static Parent load(final URL url,final ResourceBundle resBundle,final Object controller) throws IOException {
  final FXMLLoader loader=new FXMLLoader();
  loader.setLocation(url);
  loader.setResources(resBundle);
  loader.setController(controller);
  return (Parent)loader.load();
}","/** 
 * Loads the scene object hierarchy from the specified FXML document. This is a wrapper for the   {@link FXMLLoader#load(URL,ResourceBundle)} method. It uses the passed controllerinstead of creating a new controller class specified in the FXML file. The passed controller needs to be an instance of the same class.
 * @param url URL of the FXML resource
 * @param resBundle the ResourceBundle to use for the FXML document
 * @param controller controller to be used for the loaded hierarchy
 * @return the loaded scene object hierarchy
 * @throws IOException
 */
public static Parent load(final URL url,final ResourceBundle resBundle,final Object controller) throws IOException {
  Objects.requireNonNull(url);
  Objects.requireNonNull(controller);
  final FXMLLoader loader=new FXMLLoader();
  loader.setLocation(url);
  loader.setResources(resBundle);
  loader.setControllerFactory(controllerClass -> {
    if (controllerClass != null && !controllerClass.isInstance(controller)) {
      throw new IllegalArgumentException(""String_Node_Str"" + controllerClass.getName() + ""String_Node_Str"");
    }
    return controller;
  }
);
  return (Parent)loader.load();
}",0.8373702422145328
168405,"/** 
 * Creates the PreferencesViewModel with JavaFX properties for the passed STOptions object.
 * @param options options to be edited
 */
public PreferencesViewModel(final STOptions options){
  this.initialView=new SimpleObjectProperty<>(options.getInitialView());
  this.defaultAutoCalculation=new SimpleObjectProperty<>(options.getDefaultAutoCalcuation());
  this.saveOnExit=new SimpleBooleanProperty(options.isSaveOnExit());
  this.unitSystem=new SimpleObjectProperty<>(options.getUnitSystem());
  this.speedView=new SimpleObjectProperty<>(options.getSpeedView());
  this.weekStart=new SimpleObjectProperty<>(options.isWeekStartSunday() ? WeekStart.SUNDAY : WeekStart.MONDAY);
  this.listViewShowAvgHeartrate=new SimpleBooleanProperty(options.isListViewShowAvgHeartrate());
  this.listViewShowAscent=new SimpleBooleanProperty(options.isListViewShowAscent());
  this.listViewShowEnergy=new SimpleBooleanProperty(options.isListViewShowEnergy());
  this.listViewShowEquipment=new SimpleBooleanProperty(options.isListViewShowEquipment());
  this.listViewShowComment=new SimpleBooleanProperty(options.isDisplaySecondDiagram());
  this.evDisplaySecondDiagram=new SimpleBooleanProperty(options.isDisplaySecondDiagram());
}","/** 
 * Creates the PreferencesViewModel with JavaFX properties for the passed STOptions object.
 * @param options options to be edited
 */
public PreferencesViewModel(final STOptions options){
  this.initialView=new SimpleObjectProperty<>(options.getInitialView());
  this.defaultAutoCalculation=new SimpleObjectProperty<>(options.getDefaultAutoCalcuation());
  this.saveOnExit=new SimpleBooleanProperty(options.isSaveOnExit());
  this.unitSystem=new SimpleObjectProperty<>(options.getUnitSystem());
  this.speedView=new SimpleObjectProperty<>(options.getSpeedView());
  this.weekStart=new SimpleObjectProperty<>(options.isWeekStartSunday() ? WeekStart.SUNDAY : WeekStart.MONDAY);
  this.listViewShowAvgHeartrate=new SimpleBooleanProperty(options.isListViewShowAvgHeartrate());
  this.listViewShowAscent=new SimpleBooleanProperty(options.isListViewShowAscent());
  this.listViewShowEnergy=new SimpleBooleanProperty(options.isListViewShowEnergy());
  this.listViewShowEquipment=new SimpleBooleanProperty(options.isListViewShowEquipment());
  this.listViewShowComment=new SimpleBooleanProperty(options.isListViewShowComment());
  this.evDisplaySecondDiagram=new SimpleBooleanProperty(options.isDisplaySecondDiagram());
}",0.942189421894219
168406,"/** 
 * Action for open the exercise HRM file in the ExerciseViewer sub-application (dialog).
 */
@Action(name=ACTION_OPEN_EXERCISEVIEWER) public void openExerciseViewer(){
  Platform.runLater(() -> {
    final File selectedFile=prHRMFileOpenDialog.get().selectHRMFile(document.getOptions(),null);
    if (selectedFile != null) {
      SwingUtilities.invokeLater(() -> {
        EVMain pv=prExerciseViewer.get();
        pv.showExercise(selectedFile.getAbsolutePath(),document.getOptions(),false);
      }
);
    }
  }
);
}","/** 
 * Action for open the exercise HRM file in the ExerciseViewer sub-application (dialog).
 */
@Action(name=ACTION_OPEN_EXERCISEVIEWER) public void openExerciseViewer(){
  Platform.runLater(() -> {
    final File selectedFile=prHRMFileOpenDialog.get().selectHRMFile(context.getPrimaryStage(),document.getOptions(),null);
    if (selectedFile != null) {
      SwingUtilities.invokeLater(() -> {
        EVMain pv=prExerciseViewer.get();
        pv.showExercise(selectedFile.getAbsolutePath(),document.getOptions(),false);
      }
);
    }
  }
);
}",0.9757462686567164
168407,"/** 
 * Action handler for selecting an HRM exercise file in the FileChooser.
 */
@FXML private void onBrowseHrmFile(final ActionEvent event){
  final String hrmFile=StringUtils.getTrimmedTextOrNull(exerciseViewModel.hrmFile.get());
  final File selectedFile=prHRMFileOpenDialog.get().selectHRMFile(document.getOptions(),hrmFile);
  if (selectedFile != null) {
    exerciseViewModel.hrmFile.set(selectedFile.getAbsolutePath());
  }
}","/** 
 * Action handler for selecting an HRM exercise file in the FileChooser.
 */
@FXML private void onBrowseHrmFile(final ActionEvent event){
  final String hrmFile=StringUtils.getTrimmedTextOrNull(exerciseViewModel.hrmFile.get());
  final File selectedFile=prHRMFileOpenDialog.get().selectHRMFile(getWindow(tfHrmFile),document.getOptions(),hrmFile);
  if (selectedFile != null) {
    exerciseViewModel.hrmFile.set(selectedFile.getAbsolutePath());
  }
}",0.9763246899661782
168408,"/** 
 * Displays the HRM File Open dialog and returns the selected file or null when the user has nothing selected.
 * @param options the application options
 * @param initialFile the filename to be initially selected (optional)
 * @return the selected file or null when nothing selected
 */
public File selectHRMFile(final STOptions options,final String initialFile){
  final FileChooser fileChooser=new FileChooser();
  fileChooser.setTitle(context.getResReader().getString(""String_Node_Str""));
  addFileExtensionFilters(fileChooser);
  final File fInitialFile=initialFile == null ? null : new File(initialFile);
  if (fInitialFile != null && fInitialFile.exists() && fInitialFile.isFile()) {
    fileChooser.setInitialDirectory(fInitialFile.getParentFile());
  }
 else {
    File initialDirectory;
    String strPreviousExerciseDirectory=options.getPreviousExerciseDirectory();
    if (strPreviousExerciseDirectory != null) {
      initialDirectory=new File(strPreviousExerciseDirectory);
    }
 else {
      initialDirectory=new File(System.getProperty(""String_Node_Str""));
    }
    if (initialDirectory.exists()) {
      fileChooser.setInitialDirectory(initialDirectory);
    }
  }
  final File selectedFile=fileChooser.showOpenDialog(context.getPrimaryStage());
  if (selectedFile == null) {
    return null;
  }
  options.setPreviousExerciseDirectory(selectedFile.getParentFile().getAbsolutePath());
  return selectedFile;
}","/** 
 * Displays the HRM File Open dialog and returns the selected file or null when the user has nothing selected.
 * @param parent the parent window
 * @param options the application options
 * @param initialFile the filename to be initially selected (optional)
 * @return the selected file or null when nothing selected
 */
public File selectHRMFile(final Window parent,final STOptions options,final String initialFile){
  final FileChooser fileChooser=new FileChooser();
  fileChooser.setTitle(context.getResReader().getString(""String_Node_Str""));
  addFileExtensionFilters(fileChooser);
  final File fInitialFile=initialFile == null ? null : new File(initialFile);
  if (fInitialFile != null && fInitialFile.exists() && fInitialFile.isFile()) {
    fileChooser.setInitialDirectory(fInitialFile.getParentFile());
  }
 else {
    File initialDirectory;
    String strPreviousExerciseDirectory=options.getPreviousExerciseDirectory();
    if (strPreviousExerciseDirectory != null) {
      initialDirectory=new File(strPreviousExerciseDirectory);
    }
 else {
      initialDirectory=new File(System.getProperty(""String_Node_Str""));
    }
    if (initialDirectory.exists()) {
      fileChooser.setInitialDirectory(initialDirectory);
    }
  }
  final File selectedFile=fileChooser.showOpenDialog(parent);
  if (selectedFile == null) {
    return null;
  }
  options.setPreviousExerciseDirectory(selectedFile.getParentFile().getAbsolutePath());
  return selectedFile;
}",0.9703448275862068
168409,"/** 
 * Setup of the sportTypeRecordDistance property. It will be updated every time the sport type changes. When the new sport type does not record the distance, then the distance and avg speed values will be set to 0.
 */
private void setupSportTypeRecordDistance(){
  sportTypeRecordDistance.set(sportType.get().isRecordDistance());
  sportType.addListener((observable,oldValue,newValue) -> {
    sportTypeRecordDistance.set(newValue.isRecordDistance());
    if (!sportTypeRecordDistance.get()) {
      distance.set(0);
      avgSpeed.set(0);
    }
  }
);
}","/** 
 * Setup of the sportTypeRecordDistance property. It will be updated every time the sport type changes. When the new sport type does not record the distance, then the distance and avg speed values will be set to 0.
 */
private void setupSportTypeRecordDistance(){
  sportTypeRecordDistance.set(sportType.get() == null || sportType.get().isRecordDistance());
  sportType.addListener((observable,oldValue,newValue) -> {
    sportTypeRecordDistance.set(newValue.isRecordDistance());
    if (!sportTypeRecordDistance.get()) {
      distance.set(0);
      avgSpeed.set(0);
    }
  }
);
}",0.976460331299041
168410,"/** 
 * Unfortunately it's not possible to show a modal JavaFX dialog on top of a Swing main window (JFrame). The workaround is to disable main Swing window and it's menu when the dialog is shown. And enable them again when the dialog has been closed.
 * @param dialog Dialog
 */
private void fakeModalDialog(final Dialog dialog){
  final javax.swing.JFrame swingMainFrame=context.getMainFrame();
  dialog.getWindow().setOnShown(e -> {
    swingMainFrame.setEnabled(false);
    swingMainFrame.getJMenuBar().setEnabled(false);
  }
);
  dialog.getWindow().setOnHidden(e -> {
    swingMainFrame.setEnabled(true);
    swingMainFrame.getJMenuBar().setEnabled(true);
    swingMainFrame.toFront();
  }
);
}","/** 
 * Unfortunately it's not possible to show a modal JavaFX dialog on top of a Swing main window (JFrame). The workaround is to disable main Swing window and it's menu when the dialog is shown. And enable them again when the dialog has been closed.
 * @param dialog Dialog
 */
private void fakeModalDialog(final Dialog dialog){
  final javax.swing.JFrame swingMainFrame=context.getMainFrame();
  dialog.getWindow().setOnShown(e -> {
    javax.swing.SwingUtilities.invokeLater(() -> {
      swingMainFrame.setEnabled(false);
      swingMainFrame.getJMenuBar().setEnabled(false);
    }
);
  }
);
  dialog.getWindow().setOnHidden(e -> {
    javax.swing.SwingUtilities.invokeLater(() -> {
      swingMainFrame.setEnabled(true);
      swingMainFrame.getJMenuBar().setEnabled(true);
      swingMainFrame.toFront();
    }
);
  }
);
}",0.8808900523560209
168411,"/** 
 * Sets the values of the current filter.
 */
private void setFilterValues(){
  DateFormat sdFormat=SimpleDateFormat.getDateInstance(SimpleDateFormat.DEFAULT);
  String strTimeSpan=sdFormat.format(statFilter.getDateStart()) + ""String_Node_Str"" + sdFormat.format(statFilter.getDateEnd());
  String strSportType=context.getResReader().getString(""String_Node_Str"");
  if (statFilter.getSportType() != null) {
    strSportType=statFilter.getSportType().getName();
  }
  String strSportSubtype=context.getResReader().getString(""String_Node_Str"");
  if (statFilter.getSportSubType() != null) {
    strSportSubtype=statFilter.getSportSubType().getName();
  }
  String strIntensity=context.getResReader().getString(""String_Node_Str"");
  if (statFilter.getIntensity() != null) {
    strIntensity=statFilter.getIntensity().toString();
  }
  String strEquipment=context.getResReader().getString(""String_Node_Str"");
  if (statFilter.getEquipment() != null) {
    strEquipment=statFilter.getEquipment().getName();
  }
  String strComment=context.getResReader().getString(""String_Node_Str"");
  if ((statFilter.getCommentSubString() != null) && (statFilter.getCommentSubString().trim().length() > 0)) {
    strComment=statFilter.getCommentSubString();
    if (statFilter.isRegularExpressionMode()) {
      strComment+=""String_Node_Str"" + context.getResReader().getString(""String_Node_Str"");
    }
  }
  laTimespanValue.setText(strTimeSpan);
  laSportTypeValue.setText(strSportType);
  laSportSubTypeValue.setText(strSportSubtype);
  laIntensityValue.setText(strIntensity);
  laEquipmentValue.setText(strEquipment);
  laCommentValue.setText(strComment);
}","/** 
 * Sets the values of the current filter.
 */
private void setFilterValues(){
  DateTimeFormatter dateFormatter=DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);
  String strTimeSpan=statFilter.getDateStart().format(dateFormatter) + ""String_Node_Str"" + statFilter.getDateEnd().format(dateFormatter);
  String strSportType=context.getResReader().getString(""String_Node_Str"");
  if (statFilter.getSportType() != null) {
    strSportType=statFilter.getSportType().getName();
  }
  String strSportSubtype=context.getResReader().getString(""String_Node_Str"");
  if (statFilter.getSportSubType() != null) {
    strSportSubtype=statFilter.getSportSubType().getName();
  }
  String strIntensity=context.getResReader().getString(""String_Node_Str"");
  if (statFilter.getIntensity() != null) {
    strIntensity=statFilter.getIntensity().toString();
  }
  String strEquipment=context.getResReader().getString(""String_Node_Str"");
  if (statFilter.getEquipment() != null) {
    strEquipment=statFilter.getEquipment().getName();
  }
  String strComment=context.getResReader().getString(""String_Node_Str"");
  if ((statFilter.getCommentSubString() != null) && (statFilter.getCommentSubString().trim().length() > 0)) {
    strComment=statFilter.getCommentSubString();
    if (statFilter.isRegularExpressionMode()) {
      strComment+=""String_Node_Str"" + context.getResReader().getString(""String_Node_Str"");
    }
  }
  laTimespanValue.setText(strTimeSpan);
  laSportTypeValue.setText(strSportType);
  laSportSubTypeValue.setText(strSportSubtype);
  laIntensityValue.setText(strIntensity);
  laEquipmentValue.setText(strEquipment);
  laCommentValue.setText(strComment);
}",0.9059001512859304
168412,"/** 
 * Draws the overview diagram according to the current selections.
 */
private void updateDiagram(){
  updateSelectionControlsState();
  TimeRangeType timeType=getCurrentTimeRangeType();
  ValueType vType=getCurrentValueType();
  String vTypeName=getCurrentValueTypeName();
  int year=((Number)spYear.getValue()).intValue();
  TimeTableXYDataset dataset=new TimeTableXYDataset();
  List<Color> lGraphColors=new ArrayList<>();
  if (getCurrentValueType() == ValueType.EQUIPMENT) {
    SportType sportType=document.getSportTypeList().getAt(cbSportTypeList.getSelectedIndex());
    for (    Equipment equipment : sportType.getEquipmentList()) {
      addEquipmentTimeSeries(dataset,timeType,year,sportType,equipment);
    }
    addEquipmentTimeSeries(dataset,timeType,year,sportType,null);
    for (int i=1; i <= 8; i++) {
      lGraphColors.add(context.getResReader().getColor(""String_Node_Str"" + i));
    }
  }
 else   if (getCurrentValueType() != ValueType.WEIGHT) {
switch ((OverviewType)cbSportTypeMode.getSelectedItem()) {
case ALL_SUMMARY:
case EACH_STACKED:
      addExerciseTimeSeries(dataset,timeType,year,vType,null);
    lGraphColors.add(context.getResReader().getColor(""String_Node_Str""));
  break;
case EACH_SPLITTED:
for (SportType sportType : document.getSportTypeList()) {
  addExerciseTimeSeries(dataset,timeType,year,vType,sportType);
  lGraphColors.add(sportType.getColor());
}
break;
}
}
 else {
addWeightTimeSeries(dataset,timeType,year);
lGraphColors.add(context.getResReader().getColor(""String_Node_Str""));
}
JFreeChart chart=ChartFactory.createTimeSeriesChart(null,null,vTypeName,dataset,true,true,false);
ChartUtils.customizeChart(chart,chartPanel);
XYPlot plot=(XYPlot)chart.getPlot();
XYLineAndShapeRenderer renderer=(XYLineAndShapeRenderer)plot.getRenderer();
renderer.setBaseShapesVisible(true);
renderer.setBaseShapesFilled(true);
for (int i=0; i < lGraphColors.size(); i++) {
Color tempColor=lGraphColors.get(i);
renderer.setSeriesPaint(i,tempColor);
}
String dateFormatTooltip=null;
String dateFormatAxis=null;
DateTickUnit dateTickUnit=null;
switch (timeType) {
case LAST_12_MONTHS:
dateFormatTooltip=""String_Node_Str"";
dateFormatAxis=""String_Node_Str"";
dateTickUnit=new DateTickUnit(DateTickUnitType.MONTH,1);
break;
case MONTHS_OF_YEAR:
dateFormatTooltip=""String_Node_Str"";
dateFormatAxis=""String_Node_Str"";
dateTickUnit=new DateTickUnit(DateTickUnitType.MONTH,1);
break;
case WEEKS_OF_YEAR:
dateFormatTooltip=""String_Node_Str"";
dateFormatAxis=""String_Node_Str"";
dateTickUnit=new DateTickUnit(DateTickUnitType.YEAR,2);
break;
default :
dateFormatTooltip=""String_Node_Str"";
dateFormatAxis=""String_Node_Str"";
dateTickUnit=new DateTickUnit(DateTickUnitType.YEAR,1);
break;
}
String toolTipFormat=""String_Node_Str"";
renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator(toolTipFormat,new SimpleDateFormat(dateFormatTooltip),new DecimalFormat()){
@Override public String generateToolTip(XYDataset dataset,int series,int item){
return dataset.getSeriesKey(series) + ""String_Node_Str"" + super.generateToolTip(dataset,series,item);
}
}
);
if (cbSportTypeMode.getSelectedItem() == OverviewType.EACH_STACKED && getCurrentValueType() != ValueType.WEIGHT) {
renderer.setSeriesLinesVisible(0,false);
renderer.setSeriesShapesVisible(0,false);
renderer.setSeriesVisibleInLegend(0,false);
dataset=new TimeTableXYDataset();
lGraphColors=new ArrayList<>();
for (SportType sportType : document.getSportTypeList()) {
addExerciseTimeSeries(dataset,timeType,year,vType,sportType);
lGraphColors.add(sportType.getColor());
}
plot.setDataset(1,dataset);
StackedRenderer stackedRenderer=new StackedRenderer();
for (int i=0; i < lGraphColors.size(); i++) {
Color tempColor=lGraphColors.get(i);
stackedRenderer.setSeriesPaint(i,tempColor);
}
stackedRenderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator(toolTipFormat,new SimpleDateFormat(dateFormatTooltip),new DecimalFormat()){
@Override public String generateToolTip(XYDataset dataset,int series,int item){
return dataset.getSeriesKey(series) + ""String_Node_Str"" + super.generateToolTip(dataset,series,item);
}
}
);
plot.setRenderer(1,stackedRenderer);
}
DateAxis axis=(DateAxis)plot.getDomainAxis();
axis.setDateFormatOverride(new SimpleDateFormat(dateFormatAxis));
if (dateTickUnit != null) {
axis.setTickUnit(dateTickUnit);
}
if (plot.getRangeAxis().getRange().getCentralValue() == 0d) {
plot.getRangeAxis().setRange(new Range(0,10));
}
if (timeType == TimeRangeType.LAST_12_MONTHS) {
Calendar today=Calendar.getInstance();
Calendar newYear=createCalendarFor(today.get(Calendar.YEAR),0,1,true);
newYear.add(Calendar.DAY_OF_MONTH,-15);
ValueMarker newYearMarker=new ValueMarker(newYear.getTimeInMillis());
newYearMarker.setPaint(context.getResReader().getColor(""String_Node_Str""));
newYearMarker.setStroke(new BasicStroke(0.8f));
newYearMarker.setLabel(""String_Node_Str"" + today.get(Calendar.YEAR));
newYearMarker.setLabelAnchor(RectangleAnchor.TOP_RIGHT);
newYearMarker.setLabelTextAnchor(TextAnchor.TOP_LEFT);
plot.addDomainMarker(newYearMarker);
}
chart.getLegend().setPosition(RectangleEdge.RIGHT);
chartPanel.setChart(chart);
}","/** 
 * Draws the overview diagram according to the current selections.
 */
private void updateDiagram(){
  updateSelectionControlsState();
  TimeRangeType timeType=getCurrentTimeRangeType();
  ValueType vType=getCurrentValueType();
  String vTypeName=getCurrentValueTypeName();
  int year=getSelectedYear();
  TimeTableXYDataset dataset=new TimeTableXYDataset();
  List<Color> lGraphColors=new ArrayList<>();
  if (getCurrentValueType() == ValueType.EQUIPMENT) {
    setupEquipmentDiagram(dataset,lGraphColors);
  }
 else   if (getCurrentValueType() == ValueType.WEIGHT) {
    setupWeightDiagram(dataset,lGraphColors);
  }
 else {
    setupExerciseDiagram(dataset,lGraphColors);
  }
  JFreeChart chart=ChartFactory.createTimeSeriesChart(null,null,vTypeName,dataset,true,true,false);
  ChartUtils.customizeChart(chart,chartPanel);
  XYPlot plot=(XYPlot)chart.getPlot();
  XYLineAndShapeRenderer renderer=(XYLineAndShapeRenderer)plot.getRenderer();
  renderer.setBaseShapesVisible(true);
  renderer.setBaseShapesFilled(true);
  for (int i=0; i < lGraphColors.size(); i++) {
    Color tempColor=lGraphColors.get(i);
    renderer.setSeriesPaint(i,tempColor);
  }
  String dateFormatTooltip=null;
  String dateFormatAxis=null;
  DateTickUnit dateTickUnit=null;
switch (timeType) {
case LAST_12_MONTHS:
    dateFormatTooltip=""String_Node_Str"";
  dateFormatAxis=""String_Node_Str"";
dateTickUnit=new DateTickUnit(DateTickUnitType.MONTH,1);
break;
case MONTHS_OF_YEAR:
dateFormatTooltip=""String_Node_Str"";
dateFormatAxis=""String_Node_Str"";
dateTickUnit=new DateTickUnit(DateTickUnitType.MONTH,1);
break;
case WEEKS_OF_YEAR:
dateFormatTooltip=""String_Node_Str"";
dateFormatAxis=""String_Node_Str"";
dateTickUnit=new DateTickUnit(DateTickUnitType.YEAR,2);
break;
default :
dateFormatTooltip=""String_Node_Str"";
dateFormatAxis=""String_Node_Str"";
dateTickUnit=new DateTickUnit(DateTickUnitType.YEAR,1);
break;
}
String toolTipFormat=""String_Node_Str"";
renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator(toolTipFormat,new SimpleDateFormat(dateFormatTooltip),new DecimalFormat()){
@Override public String generateToolTip(XYDataset dataset,int series,int item){
return dataset.getSeriesKey(series) + ""String_Node_Str"" + super.generateToolTip(dataset,series,item);
}
}
);
if (cbSportTypeMode.getSelectedItem() == OverviewType.EACH_STACKED && vType != ValueType.EQUIPMENT && vType != ValueType.WEIGHT) {
renderer.setSeriesLinesVisible(0,false);
renderer.setSeriesShapesVisible(0,false);
renderer.setSeriesVisibleInLegend(0,false);
dataset=new TimeTableXYDataset();
lGraphColors=new ArrayList<>();
for (SportType sportType : document.getSportTypeList()) {
addExerciseTimeSeries(dataset,timeType,year,vType,sportType);
lGraphColors.add(sportType.getColor());
}
plot.setDataset(1,dataset);
StackedRenderer stackedRenderer=new StackedRenderer();
for (int i=0; i < lGraphColors.size(); i++) {
Color tempColor=lGraphColors.get(i);
stackedRenderer.setSeriesPaint(i,tempColor);
}
stackedRenderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator(toolTipFormat,new SimpleDateFormat(dateFormatTooltip),new DecimalFormat()){
@Override public String generateToolTip(XYDataset dataset,int series,int item){
return dataset.getSeriesKey(series) + ""String_Node_Str"" + super.generateToolTip(dataset,series,item);
}
}
);
plot.setRenderer(1,stackedRenderer);
}
DateAxis axis=(DateAxis)plot.getDomainAxis();
axis.setDateFormatOverride(new SimpleDateFormat(dateFormatAxis));
if (dateTickUnit != null) {
axis.setTickUnit(dateTickUnit);
}
if (plot.getRangeAxis().getRange().getCentralValue() == 0d) {
plot.getRangeAxis().setRange(new Range(0,10));
}
if (timeType == TimeRangeType.LAST_12_MONTHS) {
Calendar today=Calendar.getInstance();
Calendar newYear=createCalendarFor(today.get(Calendar.YEAR),0,1,true);
newYear.add(Calendar.DAY_OF_MONTH,-15);
ValueMarker newYearMarker=new ValueMarker(newYear.getTimeInMillis());
newYearMarker.setPaint(context.getResReader().getColor(""String_Node_Str""));
newYearMarker.setStroke(new BasicStroke(0.8f));
newYearMarker.setLabel(""String_Node_Str"" + today.get(Calendar.YEAR));
newYearMarker.setLabelAnchor(RectangleAnchor.TOP_RIGHT);
newYearMarker.setLabelTextAnchor(TextAnchor.TOP_LEFT);
plot.addDomainMarker(newYearMarker);
}
chart.getLegend().setPosition(RectangleEdge.RIGHT);
chartPanel.setChart(chart);
}",0.8546591752358741
168413,"/** 
 * Updates the state of the selection widgets for the diagram content.
 */
private void updateSelectionControlsState(){
  spYear.setVisible(getCurrentTimeRangeType() != TimeRangeType.LAST_12_MONTHS);
  boolean sssEnabled=getCurrentValueType() != ValueType.WEIGHT;
  laFor.setVisible(sssEnabled);
  cbSportTypeMode.setVisible(sssEnabled);
  cbSportTypeList.setVisible(sssEnabled);
  if (sssEnabled) {
    boolean equipmentSelected=getCurrentValueType() == ValueType.EQUIPMENT;
    laFor.setText(context.getResReader().getString(!equipmentSelected ? ""String_Node_Str"" : ""String_Node_Str""));
    cbSportTypeMode.setVisible(!equipmentSelected);
    cbSportTypeList.setVisible(equipmentSelected);
  }
}","/** 
 * Updates the state of the selection widgets for the diagram content.
 */
private void updateSelectionControlsState(){
  spYear.setVisible(getCurrentTimeRangeType() != TimeRangeType.LAST_12_MONTHS);
  boolean sssEnabled=getCurrentValueType() != ValueType.WEIGHT;
  laFor.setVisible(sssEnabled);
  cbSportTypeMode.setVisible(sssEnabled);
  cbSportTypeList.setVisible(sssEnabled);
  if (sssEnabled) {
    boolean showSportTypeModes=getCurrentValueType() != ValueType.SPORTSUBTYPE && getCurrentValueType() != ValueType.EQUIPMENT;
    laFor.setText(context.getResReader().getString(showSportTypeModes ? ""String_Node_Str"" : ""String_Node_Str""));
    cbSportTypeMode.setVisible(showSportTypeModes);
    cbSportTypeList.setVisible(!showSportTypeModes);
  }
}",0.821673525377229
168414,"public Object getValueAt(int row,int col){
  Lap lap=exercise.getLapList()[row];
switch (col) {
case COLUMN_LAP:
    return Integer.valueOf(row + 1);
case COLUMN_LAP_TIME:
  int previousLapSplitTime=0;
if (row > 0) {
  previousLapSplitTime=exercise.getLapList()[row - 1].getTimeSplit();
}
return Integer.valueOf(lap.getTimeSplit() - previousLapSplitTime);
case COLUMN_SPLIT_TIME:
return Integer.valueOf(lap.getTimeSplit());
case COLUMN_HEARTRATE:
return Short.valueOf(lap.getHeartRateSplit());
case COLUMN_AVG_HEARTRATE:
return Short.valueOf(lap.getHeartRateAVG());
case COLUMN_MAX_HEARTRATE:
return Short.valueOf(lap.getHeartRateMax());
case COLUMN_END_SPEED:
if (lap.getSpeed() != null) {
return new Float(lap.getSpeed().getSpeedEnd());
}
break;
case COLUMN_AVG_SPEED:
if (lap.getSpeed() != null) {
return new Float(lap.getSpeed().getSpeedAVG());
}
break;
case COLUMN_DISTANCE:
if (lap.getSpeed() != null) {
return Integer.valueOf(lap.getSpeed().getDistance());
}
break;
case COLUMN_CADENCE:
if ((lap.getSpeed() != null) && (exercise.getRecordingMode().isCadence())) {
return Short.valueOf(lap.getSpeed().getCadence());
}
break;
case COLUMN_ALTITUDE:
if (lap.getAltitude() != null) {
return Short.valueOf(lap.getAltitude().getAltitude());
}
break;
case COLUMN_ASCENT:
if ((lap.getAltitude() != null) && (exercise.getFileType() != EVExercise.ExerciseFileType.HRM)) {
return Integer.valueOf(lap.getAltitude().getAscent());
}
break;
case COLUMN_TEMPERATURE:
if (lap.getTemperature() != null) {
return Short.valueOf(lap.getTemperature().getTemperature());
}
break;
}
return null;
}","public Object getValueAt(int row,int col){
  Lap lap=exercise.getLapList()[row];
switch (col) {
case COLUMN_LAP:
    return Integer.valueOf(row + 1);
case COLUMN_LAP_TIME:
  int previousLapSplitTime=0;
if (row > 0) {
  previousLapSplitTime=exercise.getLapList()[row - 1].getTimeSplit();
}
return Integer.valueOf(lap.getTimeSplit() - previousLapSplitTime);
case COLUMN_SPLIT_TIME:
return Integer.valueOf(lap.getTimeSplit());
case COLUMN_HEARTRATE:
return Short.valueOf(lap.getHeartRateSplit());
case COLUMN_AVG_HEARTRATE:
return Short.valueOf(lap.getHeartRateAVG());
case COLUMN_MAX_HEARTRATE:
return Short.valueOf(lap.getHeartRateMax());
case COLUMN_END_SPEED:
if (lap.getSpeed() != null) {
return Float.valueOf(lap.getSpeed().getSpeedEnd());
}
break;
case COLUMN_AVG_SPEED:
if (lap.getSpeed() != null) {
return new Float(lap.getSpeed().getSpeedAVG());
}
break;
case COLUMN_DISTANCE:
if (lap.getSpeed() != null) {
return Integer.valueOf(lap.getSpeed().getDistance());
}
break;
case COLUMN_CADENCE:
if ((lap.getSpeed() != null) && (exercise.getRecordingMode().isCadence())) {
return Short.valueOf(lap.getSpeed().getCadence());
}
break;
case COLUMN_ALTITUDE:
if (lap.getAltitude() != null) {
return Short.valueOf(lap.getAltitude().getAltitude());
}
break;
case COLUMN_ASCENT:
if ((lap.getAltitude() != null) && (exercise.getFileType() != EVExercise.ExerciseFileType.HRM)) {
return Integer.valueOf(lap.getAltitude().getAscent());
}
break;
case COLUMN_TEMPERATURE:
if (lap.getTemperature() != null) {
return Short.valueOf(lap.getTemperature().getTemperature());
}
break;
}
return null;
}",0.9962049335863378
168415,"/** 
 * Returns the cell component for the specified value and position. 
 */
@Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int rowIndex,int vColIndex){
  Component component=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,rowIndex,vColIndex);
  String text=null;
switch (vColIndex) {
case COLUMN_LAP:
    text=value.toString();
  break;
case COLUMN_LAP_TIME:
case COLUMN_SPLIT_TIME:
text=formatUtils.tenthSeconds2TimeString((Integer)value);
break;
case COLUMN_HEARTRATE:
case COLUMN_AVG_HEARTRATE:
case COLUMN_MAX_HEARTRATE:
text=formatUtils.heartRateToString((Short)value);
break;
case COLUMN_END_SPEED:
case COLUMN_AVG_SPEED:
if (value != null) {
text=formatUtils.speedToString((Float)value,2);
}
break;
case COLUMN_DISTANCE:
if (value != null) {
text=formatUtils.distanceToString((Integer)value / 1000f,3);
}
break;
case COLUMN_CADENCE:
if (value != null) {
text=formatUtils.cadenceToString((Short)value);
}
break;
case COLUMN_ALTITUDE:
if (value != null) {
text=formatUtils.heightToString((Short)value);
}
break;
case COLUMN_ASCENT:
if (value != null) {
text=formatUtils.heightToString((Integer)value);
}
break;
case COLUMN_TEMPERATURE:
if (value != null) {
text=formatUtils.temperatureToString((Short)value);
}
break;
}
setText(text);
return component;
}","/** 
 * Returns the cell component for the specified value and position. 
 */
@Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int rowIndex,int vColIndex){
  Component component=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,rowIndex,vColIndex);
  String text=null;
switch (vColIndex) {
case COLUMN_LAP:
    text=value.toString();
  break;
case COLUMN_LAP_TIME:
case COLUMN_SPLIT_TIME:
text=formatUtils.tenthSeconds2TimeString((Integer)value);
break;
case COLUMN_HEARTRATE:
case COLUMN_AVG_HEARTRATE:
case COLUMN_MAX_HEARTRATE:
text=formatUtils.heartRateToString((Short)value);
break;
case COLUMN_END_SPEED:
case COLUMN_AVG_SPEED:
if (value != null) {
text=formatUtils.speedToString((Float)value,2);
}
break;
case COLUMN_DISTANCE:
if (value != null) {
text=formatUtils.distanceToString((Integer)value / 1000f,3);
}
break;
case COLUMN_CADENCE:
if (value != null) {
text=formatUtils.cadenceToString((Short)value);
}
break;
case COLUMN_ALTITUDE:
if (value != null) {
text=formatUtils.heightToString((Short)value);
}
break;
case COLUMN_ASCENT:
if (value != null) {
text=formatUtils.heightToString((Integer)value);
}
break;
case COLUMN_TEMPERATURE:
if (value != null) {
text=formatUtils.temperatureToString((Short)value);
}
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + vColIndex);
}
setText(text);
return component;
}",0.9723320158102768
168416,"@Override public void displayExercise(){
  final EVExercise exercise=getDocument().getExercise();
  tbLaps.setModel(new AbstractTableModel(){
    public String getColumnName(    int col){
      return columnNames[col];
    }
    public int getRowCount(){
      if (exercise.getLapList() != null) {
        return exercise.getLapList().length;
      }
      return 0;
    }
    public int getColumnCount(){
      return columnNames.length;
    }
    /** 
 * Returns the class of the specified column (needes for sorting). 
 */
    @Override public Class<?> getColumnClass(    int col){
switch (col) {
case COLUMN_LAP:
case COLUMN_LAP_TIME:
case COLUMN_SPLIT_TIME:
case COLUMN_DISTANCE:
case COLUMN_ASCENT:
        return Integer.class;
case COLUMN_HEARTRATE:
case COLUMN_AVG_HEARTRATE:
case COLUMN_MAX_HEARTRATE:
case COLUMN_ALTITUDE:
case COLUMN_CADENCE:
case COLUMN_TEMPERATURE:
      return Short.class;
case COLUMN_END_SPEED:
case COLUMN_AVG_SPEED:
    return Float.class;
default :
  return Object.class;
}
}
public Object getValueAt(int row,int col){
Lap lap=exercise.getLapList()[row];
switch (col) {
case COLUMN_LAP:
return Integer.valueOf(row + 1);
case COLUMN_LAP_TIME:
int previousLapSplitTime=0;
if (row > 0) {
previousLapSplitTime=exercise.getLapList()[row - 1].getTimeSplit();
}
return Integer.valueOf(lap.getTimeSplit() - previousLapSplitTime);
case COLUMN_SPLIT_TIME:
return Integer.valueOf(lap.getTimeSplit());
case COLUMN_HEARTRATE:
return Short.valueOf(lap.getHeartRateSplit());
case COLUMN_AVG_HEARTRATE:
return Short.valueOf(lap.getHeartRateAVG());
case COLUMN_MAX_HEARTRATE:
return Short.valueOf(lap.getHeartRateMax());
case COLUMN_END_SPEED:
if (lap.getSpeed() != null) {
return new Float(lap.getSpeed().getSpeedEnd());
}
break;
case COLUMN_AVG_SPEED:
if (lap.getSpeed() != null) {
return new Float(lap.getSpeed().getSpeedAVG());
}
break;
case COLUMN_DISTANCE:
if (lap.getSpeed() != null) {
return Integer.valueOf(lap.getSpeed().getDistance());
}
break;
case COLUMN_CADENCE:
if ((lap.getSpeed() != null) && (exercise.getRecordingMode().isCadence())) {
return Short.valueOf(lap.getSpeed().getCadence());
}
break;
case COLUMN_ALTITUDE:
if (lap.getAltitude() != null) {
return Short.valueOf(lap.getAltitude().getAltitude());
}
break;
case COLUMN_ASCENT:
if ((lap.getAltitude() != null) && (exercise.getFileType() != EVExercise.ExerciseFileType.HRM)) {
return Integer.valueOf(lap.getAltitude().getAscent());
}
break;
case COLUMN_TEMPERATURE:
if (lap.getTemperature() != null) {
return Short.valueOf(lap.getTemperature().getTemperature());
}
break;
}
return null;
}
public boolean isCellEditable(int row,int col){
return false;
}
}
);
LapCellRenderer cellRenderer=new LapCellRenderer();
for (int i=0; i < COLUMN_COUNT; i++) {
tbLaps.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
}
}","@Override public void displayExercise(){
  final EVExercise exercise=getDocument().getExercise();
  tbLaps.setModel(new AbstractTableModel(){
    public String getColumnName(    int col){
      return columnNames[col];
    }
    public int getRowCount(){
      if (exercise.getLapList() != null) {
        return exercise.getLapList().length;
      }
      return 0;
    }
    public int getColumnCount(){
      return columnNames.length;
    }
    /** 
 * Returns the class of the specified column (needes for sorting). 
 */
    @Override public Class<?> getColumnClass(    int col){
switch (col) {
case COLUMN_LAP:
case COLUMN_LAP_TIME:
case COLUMN_SPLIT_TIME:
case COLUMN_DISTANCE:
case COLUMN_ASCENT:
        return Integer.class;
case COLUMN_HEARTRATE:
case COLUMN_AVG_HEARTRATE:
case COLUMN_MAX_HEARTRATE:
case COLUMN_ALTITUDE:
case COLUMN_CADENCE:
case COLUMN_TEMPERATURE:
      return Short.class;
case COLUMN_END_SPEED:
case COLUMN_AVG_SPEED:
    return Float.class;
default :
  return Object.class;
}
}
public Object getValueAt(int row,int col){
Lap lap=exercise.getLapList()[row];
switch (col) {
case COLUMN_LAP:
return Integer.valueOf(row + 1);
case COLUMN_LAP_TIME:
int previousLapSplitTime=0;
if (row > 0) {
previousLapSplitTime=exercise.getLapList()[row - 1].getTimeSplit();
}
return Integer.valueOf(lap.getTimeSplit() - previousLapSplitTime);
case COLUMN_SPLIT_TIME:
return Integer.valueOf(lap.getTimeSplit());
case COLUMN_HEARTRATE:
return Short.valueOf(lap.getHeartRateSplit());
case COLUMN_AVG_HEARTRATE:
return Short.valueOf(lap.getHeartRateAVG());
case COLUMN_MAX_HEARTRATE:
return Short.valueOf(lap.getHeartRateMax());
case COLUMN_END_SPEED:
if (lap.getSpeed() != null) {
return Float.valueOf(lap.getSpeed().getSpeedEnd());
}
break;
case COLUMN_AVG_SPEED:
if (lap.getSpeed() != null) {
return new Float(lap.getSpeed().getSpeedAVG());
}
break;
case COLUMN_DISTANCE:
if (lap.getSpeed() != null) {
return Integer.valueOf(lap.getSpeed().getDistance());
}
break;
case COLUMN_CADENCE:
if ((lap.getSpeed() != null) && (exercise.getRecordingMode().isCadence())) {
return Short.valueOf(lap.getSpeed().getCadence());
}
break;
case COLUMN_ALTITUDE:
if (lap.getAltitude() != null) {
return Short.valueOf(lap.getAltitude().getAltitude());
}
break;
case COLUMN_ASCENT:
if ((lap.getAltitude() != null) && (exercise.getFileType() != EVExercise.ExerciseFileType.HRM)) {
return Integer.valueOf(lap.getAltitude().getAscent());
}
break;
case COLUMN_TEMPERATURE:
if (lap.getTemperature() != null) {
return Short.valueOf(lap.getTemperature().getTemperature());
}
break;
}
return null;
}
public boolean isCellEditable(int row,int col){
return false;
}
}
);
LapCellRenderer cellRenderer=new LapCellRenderer();
for (int i=0; i < COLUMN_COUNT; i++) {
tbLaps.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
}
}",0.9978693181818182
168417,"@Override public Object getValueAt(int row,int col){
  ExerciseSample sample=exercise.getSampleList()[row];
switch (col) {
case COLUMN_TIME:
    return Integer.valueOf((int)(sample.getTimestamp() / 1000));
case COLUMN_HEARTRATE:
  return Short.valueOf(sample.getHeartRate());
case COLUMN_ALTITUDE:
if (exercise.getRecordingMode().isAltitude()) {
  return Short.valueOf(sample.getAltitude());
}
break;
case COLUMN_SPEED:
if (exercise.getRecordingMode().isSpeed()) {
return new Float(sample.getSpeed());
}
break;
case COLUMN_DISTANCE:
if (exercise.getRecordingMode().isSpeed()) {
return Integer.valueOf(sample.getDistance());
}
break;
case COLUMN_CADENCE:
if (exercise.getRecordingMode().isCadence()) {
return Short.valueOf(sample.getCadence());
}
break;
case COLUMN_TEMPERATURE:
if (exercise.getRecordingMode().isTemperature()) {
return Short.valueOf(sample.getTemperature());
}
break;
}
return null;
}","@Override public Object getValueAt(int row,int col){
  ExerciseSample sample=exercise.getSampleList()[row];
switch (col) {
case COLUMN_TIME:
    return Integer.valueOf((int)(sample.getTimestamp() / 1000));
case COLUMN_HEARTRATE:
  return Short.valueOf(sample.getHeartRate());
case COLUMN_ALTITUDE:
if (exercise.getRecordingMode().isAltitude()) {
  return Short.valueOf(sample.getAltitude());
}
break;
case COLUMN_SPEED:
if (exercise.getRecordingMode().isSpeed()) {
return Float.valueOf(sample.getSpeed());
}
break;
case COLUMN_DISTANCE:
if (exercise.getRecordingMode().isSpeed()) {
return Integer.valueOf(sample.getDistance());
}
break;
case COLUMN_CADENCE:
if (exercise.getRecordingMode().isCadence()) {
return Short.valueOf(sample.getCadence());
}
break;
case COLUMN_TEMPERATURE:
if (exercise.getRecordingMode().isTemperature()) {
return Short.valueOf(sample.getTemperature());
}
break;
}
return null;
}",0.9933554817275748
168418,"/** 
 * Returns the cell component for the specified value and position. 
 */
@Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int rowIndex,int vColIndex){
  Component component=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,rowIndex,vColIndex);
  String text=null;
switch (vColIndex) {
case COLUMN_TIME:
    text=formatUtils.seconds2TimeString((Integer)value);
  break;
case COLUMN_HEARTRATE:
text=formatUtils.heartRateToString((Short)value);
break;
case COLUMN_ALTITUDE:
if (value != null) {
text=formatUtils.heightToString((Short)value);
}
break;
case COLUMN_SPEED:
if (value != null) {
text=formatUtils.speedToString((Float)value,2);
}
break;
case COLUMN_DISTANCE:
if (value != null) {
text=formatUtils.distanceToString((Integer)value / 1000f,3);
}
break;
case COLUMN_CADENCE:
if (value != null) {
text=formatUtils.cadenceToString((Short)value);
}
break;
case COLUMN_TEMPERATURE:
if (value != null) {
text=formatUtils.temperatureToString((Short)value);
}
break;
}
setText(text);
return component;
}","/** 
 * Returns the cell component for the specified value and position. 
 */
@Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int rowIndex,int vColIndex){
  Component component=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,rowIndex,vColIndex);
  String text=null;
switch (vColIndex) {
case COLUMN_TIME:
    text=formatUtils.seconds2TimeString((Integer)value);
  break;
case COLUMN_HEARTRATE:
text=formatUtils.heartRateToString((Short)value);
break;
case COLUMN_ALTITUDE:
if (value != null) {
text=formatUtils.heightToString((Short)value);
}
break;
case COLUMN_SPEED:
if (value != null) {
text=formatUtils.speedToString((Float)value,2);
}
break;
case COLUMN_DISTANCE:
if (value != null) {
text=formatUtils.distanceToString((Integer)value / 1000f,3);
}
break;
case COLUMN_CADENCE:
if (value != null) {
text=formatUtils.cadenceToString((Short)value);
}
break;
case COLUMN_TEMPERATURE:
if (value != null) {
text=formatUtils.temperatureToString((Short)value);
}
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + vColIndex);
}
setText(text);
return component;
}",0.965974370304905
168419,"@Override public void displayExercise(){
  final EVExercise exercise=getDocument().getExercise();
  tbSamples.setModel(new AbstractTableModel(){
    @Override public String getColumnName(    int col){
      return columnNames[col];
    }
    @Override public int getRowCount(){
      if (exercise.getSampleList() != null) {
        return exercise.getSampleList().length;
      }
      return 0;
    }
    @Override public int getColumnCount(){
      return columnNames.length;
    }
    /** 
 * Returns the class of the specified column (needes for sorting). 
 */
    @Override public Class<?> getColumnClass(    int col){
switch (col) {
case COLUMN_TIME:
case COLUMN_DISTANCE:
        return Integer.class;
case COLUMN_HEARTRATE:
case COLUMN_ALTITUDE:
case COLUMN_CADENCE:
case COLUMN_TEMPERATURE:
      return Short.class;
case COLUMN_SPEED:
    return Float.class;
default :
  return Object.class;
}
}
@Override public Object getValueAt(int row,int col){
ExerciseSample sample=exercise.getSampleList()[row];
switch (col) {
case COLUMN_TIME:
return Integer.valueOf((int)(sample.getTimestamp() / 1000));
case COLUMN_HEARTRATE:
return Short.valueOf(sample.getHeartRate());
case COLUMN_ALTITUDE:
if (exercise.getRecordingMode().isAltitude()) {
return Short.valueOf(sample.getAltitude());
}
break;
case COLUMN_SPEED:
if (exercise.getRecordingMode().isSpeed()) {
return new Float(sample.getSpeed());
}
break;
case COLUMN_DISTANCE:
if (exercise.getRecordingMode().isSpeed()) {
return Integer.valueOf(sample.getDistance());
}
break;
case COLUMN_CADENCE:
if (exercise.getRecordingMode().isCadence()) {
return Short.valueOf(sample.getCadence());
}
break;
case COLUMN_TEMPERATURE:
if (exercise.getRecordingMode().isTemperature()) {
return Short.valueOf(sample.getTemperature());
}
break;
}
return null;
}
@Override public boolean isCellEditable(int row,int col){
return false;
}
}
);
SampleCellRenderer cellRenderer=new SampleCellRenderer();
for (int i=0; i < COLUMN_COUNT; i++) {
tbSamples.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
}
}","@Override public void displayExercise(){
  final EVExercise exercise=getDocument().getExercise();
  tbSamples.setModel(new AbstractTableModel(){
    @Override public String getColumnName(    int col){
      return columnNames[col];
    }
    @Override public int getRowCount(){
      if (exercise.getSampleList() != null) {
        return exercise.getSampleList().length;
      }
      return 0;
    }
    @Override public int getColumnCount(){
      return columnNames.length;
    }
    /** 
 * Returns the class of the specified column (needes for sorting). 
 */
    @Override public Class<?> getColumnClass(    int col){
switch (col) {
case COLUMN_TIME:
case COLUMN_DISTANCE:
        return Integer.class;
case COLUMN_HEARTRATE:
case COLUMN_ALTITUDE:
case COLUMN_CADENCE:
case COLUMN_TEMPERATURE:
      return Short.class;
case COLUMN_SPEED:
    return Float.class;
default :
  return Object.class;
}
}
@Override public Object getValueAt(int row,int col){
ExerciseSample sample=exercise.getSampleList()[row];
switch (col) {
case COLUMN_TIME:
return Integer.valueOf((int)(sample.getTimestamp() / 1000));
case COLUMN_HEARTRATE:
return Short.valueOf(sample.getHeartRate());
case COLUMN_ALTITUDE:
if (exercise.getRecordingMode().isAltitude()) {
return Short.valueOf(sample.getAltitude());
}
break;
case COLUMN_SPEED:
if (exercise.getRecordingMode().isSpeed()) {
return Float.valueOf(sample.getSpeed());
}
break;
case COLUMN_DISTANCE:
if (exercise.getRecordingMode().isSpeed()) {
return Integer.valueOf(sample.getDistance());
}
break;
case COLUMN_CADENCE:
if (exercise.getRecordingMode().isCadence()) {
return Short.valueOf(sample.getCadence());
}
break;
case COLUMN_TEMPERATURE:
if (exercise.getRecordingMode().isTemperature()) {
return Short.valueOf(sample.getTemperature());
}
break;
}
return null;
}
@Override public boolean isCellEditable(int row,int col){
return false;
}
}
);
SampleCellRenderer cellRenderer=new SampleCellRenderer();
for (int i=0; i < COLUMN_COUNT; i++) {
tbSamples.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
}
}",0.9970731707317072
168420,"private EVExercise parseWorkoutSamples(EVExercise exercise,Node workoutNode){
  int totalSamples=countNodeItems(workoutNode,""String_Node_Str"");
  int currentSampleNumber=0;
  float lastDistance=0;
  boolean distanceinsample=false;
  boolean firstsample=true;
  exercise.setSampleList(new ExerciseSample[totalSamples]);
  double lastOffset=0;
  double currentOffset=0;
  Position lastPosition=new Position(0,0);
  NodeList children=workoutNode.getChildNodes();
  NodeList sampleChildren=null;
  String childName;
  ExerciseSample lastSample=new ExerciseSample();
  Double latitude=0.0, longitude=0.0;
  double belowZone[]={0,0,0,0,0,0};
  double inZone[]={0,0,0,0,0,0};
  double aboveZone[]={0,0,0,0,0,0};
  int istop=children.getLength();
  for (int i=0; i < istop; i++) {
    childName=children.item(i).getNodeName();
    if (childName.equals(""String_Node_Str"")) {
      ExerciseSample sample=new ExerciseSample();
      sampleChildren=children.item(i).getChildNodes();
      int jstop=sampleChildren.getLength();
      for (int j=0; j < jstop; j++) {
        childName=sampleChildren.item(j).getNodeName();
        if (childName.equals(""String_Node_Str"")) {
          if (currentOffset != 0)           lastOffset=currentOffset;
          currentOffset=Double.valueOf(sampleChildren.item(j).getTextContent()).doubleValue();
          sample.setTimestamp((long)(1000 * currentOffset));
        }
 else         if (childName.equals(""String_Node_Str"")) {
          sample.setHeartRate((short)Short.valueOf(sampleChildren.item(j).getTextContent()));
        }
 else         if (childName.equals(""String_Node_Str"")) {
          sample.setSpeed((float)3.6 * Float.valueOf(sampleChildren.item(j).getTextContent()).floatValue());
        }
 else         if (childName.equals(""String_Node_Str"")) {
        }
 else         if (childName.equals(""String_Node_Str"")) {
        }
 else         if (childName.equals(""String_Node_Str"")) {
          sample.setCadence((short)Short.valueOf(sampleChildren.item(j).getTextContent()));
          exercise.getRecordingMode().setCadence(true);
        }
 else         if (childName.equals(""String_Node_Str"")) {
          double dist=Double.valueOf(sampleChildren.item(j).getTextContent());
          sample.setDistance((int)Math.round(dist));
          distanceinsample=true;
        }
 else         if (childName.equals(""String_Node_Str"")) {
          latitude=Double.valueOf(sampleChildren.item(j).getTextContent()).doubleValue();
        }
 else         if (childName.equals(""String_Node_Str"")) {
          longitude=Double.valueOf(sampleChildren.item(j).getTextContent()).doubleValue();
        }
 else         if (childName.equals(""String_Node_Str"")) {
          sample.setAltitude(Float.valueOf(sampleChildren.item(j).getTextContent()).shortValue());
        }
 else         if (childName.equals(""String_Node_Str"")) {
          sample.setTemperature(Float.valueOf(sampleChildren.item(j).getTextContent()).shortValue());
        }
 else         if (childName.equals(""String_Node_Str"")) {
        }
      }
      sample.setPosition(new Position(latitude,longitude));
      if (firstsample) {
        lastPosition=sample.getPosition();
        firstsample=false;
      }
      if (!distanceinsample) {
        lastDistance+=getDistanceFromPositions(lastPosition,sample.getPosition());
        sample.setDistance((int)lastDistance);
        lastPosition=sample.getPosition();
      }
      if (sample.getHeartRate() == 0)       sample.setHeartRate(lastSample.getHeartRate());
 else       lastSample.setHeartRate(sample.getHeartRate());
      exercise.getSampleList()[currentSampleNumber++]=sample;
      for (int j=0; j < 6; j++) {
        if (sample.getHeartRate() > exercise.getHeartRateLimits()[j].getUpperHeartRate()) {
          aboveZone[j]+=(currentOffset - lastOffset);
        }
 else         if (sample.getHeartRate() < exercise.getHeartRateLimits()[j].getLowerHeartRate()) {
          belowZone[j]+=(currentOffset - lastOffset);
        }
 else {
          inZone[j]+=(currentOffset - lastOffset);
        }
      }
    }
  }
  for (int i=0; i < 6; i++) {
    exercise.getHeartRateLimits()[i].setTimeAbove((short)aboveZone[i]);
    exercise.getHeartRateLimits()[i].setTimeBelow((short)belowZone[i]);
    exercise.getHeartRateLimits()[i].setTimeWithin((short)inZone[i]);
  }
  exercise.setRecordingInterval((short)2);
  return exercise;
}","private EVExercise parseWorkoutSamples(EVExercise exercise,Node workoutNode){
  int totalSamples=countNodeItems(workoutNode,""String_Node_Str"");
  int currentSampleNumber=0;
  float lastDistance=0;
  boolean distanceinsample=false;
  boolean firstsample=true;
  exercise.setSampleList(new ExerciseSample[totalSamples]);
  double lastOffset=0;
  double currentOffset=0;
  Position lastPosition=new Position(0,0);
  NodeList children=workoutNode.getChildNodes();
  NodeList sampleChildren=null;
  String childName;
  ExerciseSample lastSample=new ExerciseSample();
  Double latitude=0.0, longitude=0.0;
  double belowZone[]={0,0,0,0,0,0};
  double inZone[]={0,0,0,0,0,0};
  double aboveZone[]={0,0,0,0,0,0};
  int istop=children.getLength();
  for (int i=0; i < istop; i++) {
    childName=children.item(i).getNodeName();
    if (childName.equals(""String_Node_Str"")) {
      ExerciseSample sample=new ExerciseSample();
      sampleChildren=children.item(i).getChildNodes();
      int jstop=sampleChildren.getLength();
      for (int j=0; j < jstop; j++) {
        childName=sampleChildren.item(j).getNodeName();
        if (childName.equals(""String_Node_Str"")) {
          if (currentOffset != 0)           lastOffset=currentOffset;
          currentOffset=Double.valueOf(sampleChildren.item(j).getTextContent()).doubleValue();
          sample.setTimestamp((long)(1000 * currentOffset));
        }
 else         if (childName.equals(""String_Node_Str"")) {
          sample.setHeartRate((short)Short.valueOf(sampleChildren.item(j).getTextContent()));
        }
 else         if (childName.equals(""String_Node_Str"")) {
          sample.setSpeed((float)3.6 * Float.valueOf(sampleChildren.item(j).getTextContent()).floatValue());
        }
 else         if (childName.equals(""String_Node_Str"")) {
        }
 else         if (childName.equals(""String_Node_Str"")) {
        }
 else         if (childName.equals(""String_Node_Str"")) {
          sample.setCadence((short)Short.valueOf(sampleChildren.item(j).getTextContent()));
          exercise.getRecordingMode().setCadence(true);
        }
 else         if (childName.equals(""String_Node_Str"")) {
          double dist=Double.valueOf(sampleChildren.item(j).getTextContent());
          sample.setDistance((int)Math.round(dist));
          distanceinsample=true;
        }
 else         if (childName.equals(""String_Node_Str"")) {
          latitude=Double.valueOf(sampleChildren.item(j).getTextContent());
        }
 else         if (childName.equals(""String_Node_Str"")) {
          longitude=Double.valueOf(sampleChildren.item(j).getTextContent());
        }
 else         if (childName.equals(""String_Node_Str"")) {
          sample.setAltitude(Float.valueOf(sampleChildren.item(j).getTextContent()).shortValue());
        }
 else         if (childName.equals(""String_Node_Str"")) {
          sample.setTemperature(Float.valueOf(sampleChildren.item(j).getTextContent()).shortValue());
        }
 else         if (childName.equals(""String_Node_Str"")) {
        }
      }
      sample.setPosition(new Position(latitude,longitude));
      if (firstsample) {
        lastPosition=sample.getPosition();
        firstsample=false;
      }
      if (!distanceinsample) {
        lastDistance+=getDistanceFromPositions(lastPosition,sample.getPosition());
        sample.setDistance((int)lastDistance);
        lastPosition=sample.getPosition();
      }
      if (sample.getHeartRate() == 0)       sample.setHeartRate(lastSample.getHeartRate());
 else       lastSample.setHeartRate(sample.getHeartRate());
      exercise.getSampleList()[currentSampleNumber++]=sample;
      for (int j=0; j < 6; j++) {
        if (sample.getHeartRate() > exercise.getHeartRateLimits()[j].getUpperHeartRate()) {
          aboveZone[j]+=(currentOffset - lastOffset);
        }
 else         if (sample.getHeartRate() < exercise.getHeartRateLimits()[j].getLowerHeartRate()) {
          belowZone[j]+=(currentOffset - lastOffset);
        }
 else {
          inZone[j]+=(currentOffset - lastOffset);
        }
      }
    }
  }
  for (int i=0; i < 6; i++) {
    exercise.getHeartRateLimits()[i].setTimeAbove((short)aboveZone[i]);
    exercise.getHeartRateLimits()[i].setTimeBelow((short)belowZone[i]);
    exercise.getHeartRateLimits()[i].setTimeWithin((short)inZone[i]);
  }
  exercise.setRecordingInterval((short)2);
  return exercise;
}",0.9967919340054996
168421,"private SummaryData parseSummaryData(Node summaryDataNode){
  SummaryData nodeSummaryData=new SummaryData();
  NodeList children=summaryDataNode.getChildNodes();
  String childName;
  for (int i=0; i < children.getLength(); i++) {
    childName=children.item(i).getNodeName();
    if (childName.equals(""String_Node_Str"")) {
      nodeSummaryData.setBeginning(Double.valueOf(children.item(i).getTextContent()));
    }
 else     if (childName.equals(""String_Node_Str"")) {
      nodeSummaryData.setDuration(Double.valueOf(children.item(i).getTextContent()));
    }
 else     if (childName.equals(""String_Node_Str"")) {
      nodeSummaryData.setHr(Node2MinMaxAvg(children.item(i)));
    }
 else     if (childName.equals(""String_Node_Str"")) {
      nodeSummaryData.setWork(Integer.valueOf(children.item(i).getTextContent()));
    }
 else     if (childName.equals(""String_Node_Str"")) {
      nodeSummaryData.setSpeed(Node2MinMaxAvg(children.item(i)));
    }
 else     if (childName.equals(""String_Node_Str"")) {
      nodeSummaryData.setAltitude(Node2MinMaxAvg(children.item(i)));
    }
 else     if (childName.equals(""String_Node_Str"")) {
      nodeSummaryData.setDistance(Float.valueOf(children.item(i).getTextContent()));
    }
  }
  return nodeSummaryData;
}","private SummaryData parseSummaryData(Node summaryDataNode){
  SummaryData nodeSummaryData=new SummaryData();
  NodeList children=summaryDataNode.getChildNodes();
  String childName;
  for (int i=0; i < children.getLength(); i++) {
    childName=children.item(i).getNodeName();
    if (childName.equals(""String_Node_Str"")) {
      nodeSummaryData.setBeginning(Double.valueOf(children.item(i).getTextContent()));
    }
 else     if (childName.equals(""String_Node_Str"")) {
      nodeSummaryData.setDuration(Double.valueOf(children.item(i).getTextContent()));
    }
 else     if (childName.equals(""String_Node_Str"")) {
      nodeSummaryData.setHr(node2MinMaxAvg(children.item(i)));
    }
 else     if (childName.equals(""String_Node_Str"")) {
      nodeSummaryData.setWork(Integer.valueOf(children.item(i).getTextContent()));
    }
 else     if (childName.equals(""String_Node_Str"")) {
      nodeSummaryData.setSpeed(node2MinMaxAvg(children.item(i)));
    }
 else     if (childName.equals(""String_Node_Str"")) {
      nodeSummaryData.setAltitude(node2MinMaxAvg(children.item(i)));
    }
 else     if (childName.equals(""String_Node_Str"")) {
      nodeSummaryData.setDistance(Float.valueOf(children.item(i).getTextContent()));
    }
  }
  return nodeSummaryData;
}",0.9976076555023924
168422,"/** 
 * Stores the lap data in the exercise and calculate the missing values. 
 */
private void storeLaps(){
  int lapDistanceSum=0;
  List<Lap> lLaps=new LinkedList<>();
  long startTime=exercise.getDate().getTime();
  for (  FitLap fitLap : lFitLaps) {
    Lap lap=fitLap.getLap();
    lLaps.add(lap);
    lap.setTimeSplit((int)((fitLap.getSplitTime().getTime() - startTime) / 100));
    ExerciseSample sampleAtLapEnd=getExerciseSampleForLapEnd(lap);
    lap.setHeartRateSplit(sampleAtLapEnd.getHeartRate());
    if (lap.getSpeed() != null) {
      lapDistanceSum+=lap.getSpeed().getDistance();
      lap.getSpeed().setDistance(lapDistanceSum);
      lap.getSpeed().setSpeedEnd(sampleAtLapEnd.getSpeed());
      lap.getSpeed().setCadence(sampleAtLapEnd.getCadence());
    }
    if (lap.getAltitude() != null) {
      lap.getAltitude().setAltitude(sampleAtLapEnd.getAltitude());
    }
    if (temperatureAvailable) {
      lap.setTemperature(new LapTemperature());
      lap.getTemperature().setTemperature(sampleAtLapEnd.getTemperature());
    }
  }
  exercise.setLapList(lLaps.toArray(new Lap[0]));
}","/** 
 * Stores the lap data in the exercise and calculate the missing values. 
 */
private void storeLaps(){
  int lapDistanceSum=0;
  List<Lap> lLaps=new LinkedList<>();
  long startTime=exercise.getDate().getTime();
  for (  FitLap fitLap : lFitLaps) {
    Lap lap=fitLap.getLap();
    lLaps.add(lap);
    lap.setTimeSplit((int)((fitLap.getSplitTime().getTime() - startTime) / 100));
    ExerciseSample sampleAtLapEnd=getExerciseSampleForLapEnd(lap);
    lap.setHeartRateSplit(sampleAtLapEnd.getHeartRate());
    if (lap.getSpeed() != null) {
      lapDistanceSum+=lap.getSpeed().getDistance();
      lap.getSpeed().setDistance(lapDistanceSum);
      lap.getSpeed().setSpeedEnd(sampleAtLapEnd.getSpeed());
      lap.getSpeed().setCadence(sampleAtLapEnd.getCadence());
    }
    if (lap.getAltitude() != null) {
      lap.getAltitude().setAltitude(sampleAtLapEnd.getAltitude());
    }
    if (temperatureAvailable) {
      lap.setTemperature(new LapTemperature());
      lap.getTemperature().setTemperature(sampleAtLapEnd.getTemperature());
    }
  }
  exercise.setLapList(lLaps.toArray(new Lap[lLaps.size()]));
}",0.9941362201172756
168423,"/** 
 * Stores the sample data in the exercise. It also fixes the timestamps in all  ExerciseSamples, it must be the offset from the start time.
 */
private void storeSamples(){
  long startTime=exercise.getDate().getTime();
  for (  ExerciseSample sample : lSamples) {
    sample.setTimestamp(sample.getTimestamp() - startTime);
  }
  exercise.setSampleList(lSamples.toArray(new ExerciseSample[0]));
}","/** 
 * Stores the sample data in the exercise. It also fixes the timestamps in all  ExerciseSamples, it must be the offset from the start time.
 */
private void storeSamples(){
  long startTime=exercise.getDate().getTime();
  for (  ExerciseSample sample : lSamples) {
    sample.setTimestamp(sample.getTimestamp() - startTime);
  }
  exercise.setSampleList(lSamples.toArray(new ExerciseSample[lSamples.size()]));
}",0.980440097799511
168424,"/** 
 * Tests of getParser() method.
 */
@Test public void testGetParser() throws EVException {
  ExerciseParser parser=ExerciseParserFactory.getParser(""String_Node_Str"");
  assertTrue(parser instanceof PolarSRawParser);
  parser=ExerciseParserFactory.getParser(""String_Node_Str"");
  assertTrue(parser instanceof PolarSRawParser);
  parser=ExerciseParserFactory.getParser(""String_Node_Str"");
  assertTrue(parser instanceof TimexPwxParser);
  parser=ExerciseParserFactory.getParser(""String_Node_Str"");
  assertTrue(parser instanceof GarminFitParser);
  parser=ExerciseParserFactory.getParser(""String_Node_Str"");
  assertEquals(""String_Node_Str"",parser.getClass().getName());
  parser=ExerciseParserFactory.getParser(""String_Node_Str"");
  assertEquals(""String_Node_Str"",parser.getClass().getName());
  parser=ExerciseParserFactory.getParser(""String_Node_Str"");
  assertEquals(""String_Node_Str"",parser.getClass().getName());
  try {
    parser=ExerciseParserFactory.getParser(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  EVException e) {
  }
}","/** 
 * Tests of getParser() method.
 */
@Test public void testGetParser() throws EVException {
  ExerciseParser parser=ExerciseParserFactory.getParser(""String_Node_Str"");
  assertTrue(parser instanceof PolarSRawParser);
  parser=ExerciseParserFactory.getParser(""String_Node_Str"");
  assertTrue(parser instanceof PolarSRawParser);
  parser=ExerciseParserFactory.getParser(""String_Node_Str"");
  assertTrue(parser instanceof TimexPwxParser);
  parser=ExerciseParserFactory.getParser(""String_Node_Str"");
  assertTrue(parser instanceof GarminFitParser);
  parser=ExerciseParserFactory.getParser(""String_Node_Str"");
  assertEquals(""String_Node_Str"",parser.getClass().getName());
  parser=ExerciseParserFactory.getParser(""String_Node_Str"");
  assertEquals(""String_Node_Str"",parser.getClass().getName());
  parser=ExerciseParserFactory.getParser(""String_Node_Str"");
  assertEquals(""String_Node_Str"",parser.getClass().getName());
  try {
    ExerciseParserFactory.getParser(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  EVException e) {
  }
}",0.9966808914177336
168425,"/** 
 * This method tests the parser with an Polar S510 raw exercise file recorded in metric units. This test is taken from the C# test class so the code could be better :-)
 */
@Test public void testParseS510ExerciseCyclingWithMetricUnits() throws EVException {
  EVExercise exercise=parser.parseExercise(""String_Node_Str"");
  assertEquals(exercise.getFileType(),EVExercise.ExerciseFileType.S510RAW);
  assertEquals(exercise.getUserID(),(byte)1);
  Calendar date=Calendar.getInstance();
  date.setTime(exercise.getDate());
  assertEquals(3,date.get(Calendar.DAY_OF_MONTH));
  assertEquals(10,date.get(Calendar.MONTH));
  assertEquals(2007,date.get(Calendar.YEAR));
  assertEquals(11,date.get(Calendar.HOUR_OF_DAY));
  assertEquals(03,date.get(Calendar.MINUTE));
  assertEquals(exercise.getType(),(byte)0);
  assertEquals(exercise.getTypeLabel(),""String_Node_Str"");
  assertEquals(exercise.getRecordingMode().isAltitude(),false);
  assertEquals(exercise.getRecordingMode().isSpeed(),true);
  assertEquals(exercise.getRecordingMode().isCadence(),false);
  assertEquals(exercise.getRecordingMode().isPower(),false);
  assertEquals(exercise.getRecordingMode().getBikeNumber(),(byte)2);
  assertEquals(exercise.getDuration(),10 * ((2 * 60 * 60) + (14 * 60) + 51) + 5);
  assertEquals(exercise.getRecordingInterval(),(short)120);
  assertEquals(exercise.getHeartRateAVG(),(short)171);
  assertEquals(exercise.getHeartRateMax(),(short)194);
  assertEquals(exercise.getSpeed().getDistance(),45800);
  assertEquals(Math.round(exercise.getSpeed().getSpeedAVG() * 10),206);
  assertEquals(Math.round(exercise.getSpeed().getSpeedMax() * 10),494);
  assertEquals(exercise.getCadence(),null);
  assertEquals(exercise.getAltitude(),null);
  assertEquals(exercise.getTemperature(),null);
  assertEquals(exercise.getEnergy(),1616);
  assertEquals(exercise.getEnergyTotal(),160947);
  assertEquals(exercise.getSumExerciseTime(),(644 * 60) + 41);
  assertEquals(exercise.getSumRideTime(),8173);
  assertEquals(exercise.getOdometer(),3007);
  assertEquals(exercise.getHeartRateLimits().length,3);
  assertTrue(exercise.getHeartRateLimits()[0].isAbsoluteRange());
  assertEquals(exercise.getHeartRateLimits()[0].getLowerHeartRate(),(short)150);
  assertEquals(exercise.getHeartRateLimits()[0].getUpperHeartRate(),(short)160);
  assertEquals(exercise.getHeartRateLimits()[0].getTimeBelow(),(0 * 60 * 60) + (0 * 60) + 0);
  assertEquals(exercise.getHeartRateLimits()[0].getTimeWithin(),(0 * 60 * 60) + (0 * 60) + 0);
  assertEquals(exercise.getHeartRateLimits()[0].getTimeAbove(),(0 * 60 * 60) + (0 * 60) + 0);
  assertTrue(exercise.getHeartRateLimits()[1].isAbsoluteRange());
  assertEquals(exercise.getHeartRateLimits()[1].getLowerHeartRate(),(short)183);
  assertEquals(exercise.getHeartRateLimits()[1].getUpperHeartRate(),(short)187);
  assertEquals(exercise.getHeartRateLimits()[1].getTimeBelow(),(0 * 60 * 60) + (0 * 60) + 0);
  assertEquals(exercise.getHeartRateLimits()[1].getTimeWithin(),(0 * 60 * 60) + (0 * 60) + 0);
  assertEquals(exercise.getHeartRateLimits()[1].getTimeAbove(),(0 * 60 * 60) + (0 * 60) + 0);
  assertTrue(exercise.getHeartRateLimits()[2].isAbsoluteRange());
  assertEquals(exercise.getHeartRateLimits()[2].getLowerHeartRate(),(short)90);
  assertEquals(exercise.getHeartRateLimits()[2].getUpperHeartRate(),(short)130);
  assertEquals(exercise.getHeartRateLimits()[2].getTimeBelow(),(0 * 60 * 60) + (0 * 60) + 0);
  assertEquals(exercise.getHeartRateLimits()[2].getTimeWithin(),(0 * 60 * 60) + (0 * 60) + 0);
  assertEquals(exercise.getHeartRateLimits()[2].getTimeAbove(),(0 * 60 * 60) + (0 * 60) + 0);
  assertEquals(exercise.getLapList().length,2);
  assertEquals(exercise.getLapList()[0].getTimeSplit(),(1 * 60 * 60* 10) + (31 * 60 * 10) + (11 * 10)+ 7);
  assertEquals(exercise.getLapList()[0].getHeartRateSplit(),(short)156);
  assertEquals(exercise.getLapList()[0].getHeartRateAVG(),(short)173);
  assertEquals(exercise.getLapList()[0].getHeartRateMax(),(short)194);
  assertEquals(Math.round(exercise.getLapList()[0].getSpeed().getSpeedEnd() * 10),164);
  assertEquals(Math.round(exercise.getLapList()[0].getSpeed().getDistance() / 100),310);
  assertEquals(exercise.getLapList()[0].getAltitude(),null);
  assertEquals(exercise.getLapList()[0].getTemperature(),null);
  assertEquals(exercise.getLapList()[1].getTimeSplit(),(2 * 60 * 60* 10) + (14 * 60 * 10) + (51 * 10)+ 5);
  assertEquals(exercise.getLapList()[1].getHeartRateSplit(),(short)155);
  assertEquals(exercise.getLapList()[1].getHeartRateAVG(),(short)169);
  assertEquals(exercise.getLapList()[1].getHeartRateMax(),(short)189);
  assertEquals(Math.round(exercise.getLapList()[1].getSpeed().getSpeedEnd() * 10),3);
  assertEquals(Math.round(exercise.getLapList()[1].getSpeed().getDistance() / 100),458);
  assertEquals(exercise.getLapList()[1].getAltitude(),null);
  assertEquals(exercise.getLapList()[1].getTemperature(),null);
  assertEquals(exercise.getSampleList().length,67);
  assertEquals(0,exercise.getSampleList()[0].getTimestamp());
  assertEquals(exercise.getSampleList()[0].getHeartRate(),(short)152);
  assertEquals(exercise.getSampleList()[0].getAltitude(),(short)0);
  assertEquals(Math.round(exercise.getSampleList()[0].getSpeed() * 10),230);
  assertEquals(exercise.getSampleList()[0].getCadence(),(short)0);
  assertEquals(exercise.getSampleList()[0].getDistance(),0);
  assertEquals(24 * 120 * 1000,exercise.getSampleList()[24].getTimestamp());
  assertEquals(exercise.getSampleList()[24].getHeartRate(),(short)165);
  assertEquals(exercise.getSampleList()[24].getAltitude(),(short)0);
  assertEquals(Math.round(exercise.getSampleList()[24].getSpeed() * 10),270);
  assertEquals(exercise.getSampleList()[24].getCadence(),(short)0);
  assertEquals(exercise.getSampleList()[24].getDistance(),16500);
  assertEquals(48 * 120 * 1000,exercise.getSampleList()[48].getTimestamp());
  assertEquals(exercise.getSampleList()[48].getHeartRate(),(short)164);
  assertEquals(exercise.getSampleList()[48].getAltitude(),(short)0);
  assertEquals(Math.round(exercise.getSampleList()[48].getSpeed() * 10),190);
  assertEquals(exercise.getSampleList()[48].getCadence(),(short)0);
  assertEquals(exercise.getSampleList()[48].getDistance(),32933);
  assertEquals(66 * 120 * 1000,exercise.getSampleList()[66].getTimestamp());
  assertEquals(exercise.getSampleList()[66].getHeartRate(),(short)161);
  assertEquals(exercise.getSampleList()[66].getAltitude(),(short)0);
  assertEquals(Math.round(exercise.getSampleList()[66].getSpeed() * 10),210);
  assertEquals(exercise.getSampleList()[66].getCadence(),(short)0);
  assertEquals(exercise.getSampleList()[66].getDistance(),45800);
}","/** 
 * This method tests the parser with an Polar S510 raw exercise file recorded in metric units. This test is taken from the C# test class so the code could be better :-)
 */
@Test public void testParseS510ExerciseCyclingWithMetricUnits() throws EVException {
  EVExercise exercise=parser.parseExercise(""String_Node_Str"");
  assertEquals(exercise.getFileType(),EVExercise.ExerciseFileType.S510RAW);
  assertEquals(exercise.getUserID(),(byte)1);
  Calendar date=Calendar.getInstance();
  date.setTime(exercise.getDate());
  assertEquals(3,date.get(Calendar.DAY_OF_MONTH));
  assertEquals(10,date.get(Calendar.MONTH));
  assertEquals(2007,date.get(Calendar.YEAR));
  assertEquals(11,date.get(Calendar.HOUR_OF_DAY));
  assertEquals(03,date.get(Calendar.MINUTE));
  assertEquals(exercise.getType(),(byte)0);
  assertEquals(exercise.getTypeLabel(),""String_Node_Str"");
  assertEquals(exercise.getRecordingMode().isAltitude(),false);
  assertEquals(exercise.getRecordingMode().isSpeed(),true);
  assertEquals(exercise.getRecordingMode().isCadence(),false);
  assertEquals(exercise.getRecordingMode().isPower(),false);
  assertEquals(exercise.getRecordingMode().getBikeNumber(),(byte)2);
  assertEquals(exercise.getDuration(),10 * ((2 * 60 * 60) + (14 * 60) + 51) + 5);
  assertEquals(exercise.getRecordingInterval(),(short)120);
  assertEquals(exercise.getHeartRateAVG(),(short)171);
  assertEquals(exercise.getHeartRateMax(),(short)194);
  assertEquals(exercise.getSpeed().getDistance(),45800);
  assertEquals(Math.round(exercise.getSpeed().getSpeedAVG() * 10),206);
  assertEquals(Math.round(exercise.getSpeed().getSpeedMax() * 10),494);
  assertEquals(exercise.getCadence(),null);
  assertEquals(exercise.getAltitude(),null);
  assertEquals(exercise.getTemperature(),null);
  assertEquals(exercise.getEnergy(),1616);
  assertEquals(exercise.getEnergyTotal(),160947);
  assertEquals(exercise.getSumExerciseTime(),(644 * 60) + 41);
  assertEquals(exercise.getSumRideTime(),8173);
  assertEquals(exercise.getOdometer(),3007);
  assertEquals(exercise.getHeartRateLimits().length,3);
  assertTrue(exercise.getHeartRateLimits()[0].isAbsoluteRange());
  assertEquals(exercise.getHeartRateLimits()[0].getLowerHeartRate(),(short)150);
  assertEquals(exercise.getHeartRateLimits()[0].getUpperHeartRate(),(short)160);
  assertEquals(exercise.getHeartRateLimits()[0].getTimeBelow(),(0 * 60 * 60) + (0 * 60) + 0);
  assertEquals(exercise.getHeartRateLimits()[0].getTimeWithin(),(0 * 60 * 60) + (0 * 60) + 0);
  assertEquals(exercise.getHeartRateLimits()[0].getTimeAbove(),(0 * 60 * 60) + (0 * 60) + 0);
  assertTrue(exercise.getHeartRateLimits()[1].isAbsoluteRange());
  assertEquals(exercise.getHeartRateLimits()[1].getLowerHeartRate(),(short)183);
  assertEquals(exercise.getHeartRateLimits()[1].getUpperHeartRate(),(short)187);
  assertEquals(exercise.getHeartRateLimits()[1].getTimeBelow(),(0 * 60 * 60) + (0 * 60) + 0);
  assertEquals(exercise.getHeartRateLimits()[1].getTimeWithin(),(0 * 60 * 60) + (0 * 60) + 0);
  assertEquals(exercise.getHeartRateLimits()[1].getTimeAbove(),(0 * 60 * 60) + (0 * 60) + 0);
  assertTrue(exercise.getHeartRateLimits()[2].isAbsoluteRange());
  assertEquals(exercise.getHeartRateLimits()[2].getLowerHeartRate(),(short)90);
  assertEquals(exercise.getHeartRateLimits()[2].getUpperHeartRate(),(short)130);
  assertEquals(exercise.getHeartRateLimits()[2].getTimeBelow(),(0 * 60 * 60) + (0 * 60) + 0);
  assertEquals(exercise.getHeartRateLimits()[2].getTimeWithin(),(0 * 60 * 60) + (0 * 60) + 0);
  assertEquals(exercise.getHeartRateLimits()[2].getTimeAbove(),(0 * 60 * 60) + (0 * 60) + 0);
  assertEquals(exercise.getLapList().length,2);
  assertEquals(exercise.getLapList()[0].getTimeSplit(),(1 * 60 * 60* 10) + (31 * 60 * 10) + (11 * 10)+ 7);
  assertEquals(exercise.getLapList()[0].getHeartRateSplit(),(short)156);
  assertEquals(exercise.getLapList()[0].getHeartRateAVG(),(short)173);
  assertEquals(exercise.getLapList()[0].getHeartRateMax(),(short)194);
  assertEquals(Math.round(exercise.getLapList()[0].getSpeed().getSpeedEnd() * 10),164);
  assertEquals(Math.round(exercise.getLapList()[0].getSpeed().getDistance() / 100f),310);
  assertEquals(exercise.getLapList()[0].getAltitude(),null);
  assertEquals(exercise.getLapList()[0].getTemperature(),null);
  assertEquals(exercise.getLapList()[1].getTimeSplit(),(2 * 60 * 60* 10) + (14 * 60 * 10) + (51 * 10)+ 5);
  assertEquals(exercise.getLapList()[1].getHeartRateSplit(),(short)155);
  assertEquals(exercise.getLapList()[1].getHeartRateAVG(),(short)169);
  assertEquals(exercise.getLapList()[1].getHeartRateMax(),(short)189);
  assertEquals(Math.round(exercise.getLapList()[1].getSpeed().getSpeedEnd() * 10),3);
  assertEquals(Math.round(exercise.getLapList()[1].getSpeed().getDistance() / 100),458);
  assertEquals(exercise.getLapList()[1].getAltitude(),null);
  assertEquals(exercise.getLapList()[1].getTemperature(),null);
  assertEquals(exercise.getSampleList().length,67);
  assertEquals(0,exercise.getSampleList()[0].getTimestamp());
  assertEquals(exercise.getSampleList()[0].getHeartRate(),(short)152);
  assertEquals(exercise.getSampleList()[0].getAltitude(),(short)0);
  assertEquals(Math.round(exercise.getSampleList()[0].getSpeed() * 10),230);
  assertEquals(exercise.getSampleList()[0].getCadence(),(short)0);
  assertEquals(exercise.getSampleList()[0].getDistance(),0);
  assertEquals(24 * 120 * 1000,exercise.getSampleList()[24].getTimestamp());
  assertEquals(exercise.getSampleList()[24].getHeartRate(),(short)165);
  assertEquals(exercise.getSampleList()[24].getAltitude(),(short)0);
  assertEquals(Math.round(exercise.getSampleList()[24].getSpeed() * 10),270);
  assertEquals(exercise.getSampleList()[24].getCadence(),(short)0);
  assertEquals(exercise.getSampleList()[24].getDistance(),16500);
  assertEquals(48 * 120 * 1000,exercise.getSampleList()[48].getTimestamp());
  assertEquals(exercise.getSampleList()[48].getHeartRate(),(short)164);
  assertEquals(exercise.getSampleList()[48].getAltitude(),(short)0);
  assertEquals(Math.round(exercise.getSampleList()[48].getSpeed() * 10),190);
  assertEquals(exercise.getSampleList()[48].getCadence(),(short)0);
  assertEquals(exercise.getSampleList()[48].getDistance(),32933);
  assertEquals(66 * 120 * 1000,exercise.getSampleList()[66].getTimestamp());
  assertEquals(exercise.getSampleList()[66].getHeartRate(),(short)161);
  assertEquals(exercise.getSampleList()[66].getAltitude(),(short)0);
  assertEquals(Math.round(exercise.getSampleList()[66].getSpeed() * 10),210);
  assertEquals(exercise.getSampleList()[66].getCadence(),(short)0);
  assertEquals(exercise.getSampleList()[66].getDistance(),45800);
}",0.9999248515818742
168426,"/** 
 * Reads sample-level data from the specified Record message.
 * @param mesg Record message
 */
private void readRecordMessage(RecordMesg mesg){
  ExerciseSample sample=new ExerciseSample();
  lSamples.add(sample);
  if (mesg.getHeartRate() != null) {
    sample.setHeartRate(mesg.getHeartRate());
  }
  if (mesg.getDistance() != null) {
    sample.setDistance(Math.round(mesg.getDistance()));
  }
  if (mesg.getSpeed() != null) {
    sample.setSpeed(ConvertUtils.convertMeterPerSecond2KilometerPerHour(mesg.getSpeed()));
  }
  if (mesg.getAltitude() != null) {
    sample.setAltitude((short)Math.round(mesg.getAltitude()));
  }
  if (mesg.getCadence() != null) {
    sample.setCadence(mesg.getCadence());
  }
  if (mesg.getTemperature() != null) {
    sample.setTemperature(mesg.getTemperature());
  }
}","/** 
 * Reads sample-level data from the specified Record message.
 * @param mesg Record message
 */
private void readRecordMessage(RecordMesg mesg){
  ExerciseSample sample=new ExerciseSample();
  lSamples.add(sample);
  sample.setTimestamp(mesg.getTimestamp().getDate().getTime());
  if (mesg.getHeartRate() != null) {
    sample.setHeartRate(mesg.getHeartRate());
  }
  if (mesg.getDistance() != null) {
    sample.setDistance(Math.round(mesg.getDistance()));
  }
  if (mesg.getSpeed() != null) {
    sample.setSpeed(ConvertUtils.convertMeterPerSecond2KilometerPerHour(mesg.getSpeed()));
  }
  if (mesg.getAltitude() != null) {
    sample.setAltitude((short)Math.round(mesg.getAltitude()));
  }
  if (mesg.getCadence() != null) {
    sample.setCadence(mesg.getCadence());
  }
  if (mesg.getTemperature() != null) {
    sample.setTemperature(mesg.getTemperature());
  }
}",0.961950059453032
168427,"/** 
 * Returns the EVExercise created from the received message. It sets up all lap and sample data and calculates the missing data before.
 * @return
 */
public EVExercise getExercise(){
  exercise.setFileType(EVExercise.ExerciseFileType.GARMIN_FIT);
  exercise.setLapList(lLaps.toArray(new Lap[0]));
  exercise.setSampleList(lSamples.toArray(new ExerciseSample[0]));
  return exercise;
}","/** 
 * Returns the EVExercise created from the received message. It sets up all lap and sample data and calculates the missing data before.
 * @return
 */
public EVExercise getExercise(){
  exercise.setFileType(EVExercise.ExerciseFileType.GARMIN_FIT);
  fixSampleTimestamps();
  exercise.setLapList(lLaps.toArray(new Lap[0]));
  exercise.setSampleList(lSamples.toArray(new ExerciseSample[0]));
  return exercise;
}",0.968944099378882
168428,"@Override public void exceptionCaught(ChannelHandlerContext ctx,Throwable cause) throws Exception {
  String exceptionMessage=""String_Node_Str"";
  if (exceptionRaised.compareAndSet(false,true)) {
    if (methodInfo != null) {
      LOG.error(exceptionMessage,cause);
      methodInfo.sendError(HttpResponseStatus.INTERNAL_SERVER_ERROR,cause);
      methodInfo=null;
    }
 else {
      if (cause instanceof HandlerException) {
        HttpResponse response=((HandlerException)cause).createFailureResponse();
        if (isUserError(response)) {
          LOG.trace(exceptionMessage,cause);
        }
 else {
          LOG.error(exceptionMessage,cause);
        }
        ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);
      }
 else {
        LOG.error(exceptionMessage,cause);
        HttpResponse response=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.INTERNAL_SERVER_ERROR);
        ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);
      }
    }
  }
 else {
    LOG.trace(exceptionMessage,cause);
  }
}","@Override public void exceptionCaught(ChannelHandlerContext ctx,Throwable cause) throws Exception {
  String exceptionMessage=""String_Node_Str"";
  if (exceptionRaised.compareAndSet(false,true)) {
    if (methodInfo != null) {
      methodInfo.sendError(HttpResponseStatus.INTERNAL_SERVER_ERROR,cause);
      methodInfo=null;
    }
 else {
      if (cause instanceof HandlerException) {
        HttpResponse response=((HandlerException)cause).createFailureResponse();
        if (isUserError(response)) {
          LOG.trace(exceptionMessage,cause);
        }
 else {
          LOG.error(exceptionMessage,cause);
        }
        ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);
      }
 else {
        LOG.error(exceptionMessage,cause);
        HttpResponse response=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.INTERNAL_SERVER_ERROR);
        ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);
      }
    }
  }
 else {
    LOG.trace(exceptionMessage,cause);
  }
}",0.9803921568627452
168429,"/** 
 * If the HttpRequest is valid and handled it will be sent upstream, if it cannot be invoked the response will be written back immediately.
 */
@Override public void channelRead(ChannelHandlerContext ctx,Object msg) throws Exception {
  try {
    if (exceptionRaised.get()) {
      return;
    }
    if (!(msg instanceof HttpRequest)) {
      if (methodInfo != null) {
        ReferenceCountUtil.retain(msg);
        ctx.fireChannelRead(msg);
      }
      return;
    }
    HttpRequest request=(HttpRequest)msg;
    BasicHttpResponder responder=new BasicHttpResponder(ctx.channel(),sslEnabled);
    methodInfo=prepareHandleMethod(request,responder,ctx);
    if (methodInfo != null) {
      ReferenceCountUtil.retain(msg);
      ctx.fireChannelRead(msg);
    }
 else {
      if (!responder.isResponded()) {
        HttpResponse response=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.NOT_FOUND);
        ctx.channel().writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);
      }
 else {
        ctx.channel().close();
      }
    }
  }
  finally {
    ReferenceCountUtil.release(msg);
  }
}","/** 
 * If the HttpRequest is valid and handled it will be sent upstream, if it cannot be invoked the response will be written back immediately.
 */
@Override public void channelRead(ChannelHandlerContext ctx,Object msg) throws Exception {
  try {
    if (exceptionRaised.get()) {
      return;
    }
    if (!(msg instanceof HttpRequest)) {
      if (methodInfo != null) {
        ReferenceCountUtil.retain(msg);
        ctx.fireChannelRead(msg);
      }
      return;
    }
    HttpRequest request=(HttpRequest)msg;
    BasicHttpResponder responder=new BasicHttpResponder(ctx.channel(),sslEnabled);
    methodInfo=null;
    methodInfo=prepareHandleMethod(request,responder,ctx);
    if (methodInfo != null) {
      ReferenceCountUtil.retain(msg);
      ctx.fireChannelRead(msg);
    }
 else {
      if (!responder.isResponded()) {
        HttpResponse response=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.NOT_FOUND);
        ctx.channel().writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);
      }
 else {
        ctx.channel().close();
      }
    }
  }
  finally {
    ReferenceCountUtil.release(msg);
  }
}",0.9907529722589168
168430,"@Test public void testNonExistingEndPoints() throws IOException {
  HttpURLConnection urlConn=request(""String_Node_Str"",HttpMethod.POST);
  writeContent(urlConn,""String_Node_Str"");
  Assert.assertEquals(404,urlConn.getResponseCode());
  urlConn.disconnect();
}","@Test public void testNonExistingEndPoints() throws IOException {
  HttpURLConnection urlConn=request(""String_Node_Str"",HttpMethod.POST);
  writeContent(urlConn,""String_Node_Str"");
  Assert.assertEquals(404,urlConn.getResponseCode());
  urlConn.disconnect();
  urlConn=request(""String_Node_Str"",HttpMethod.GET,true);
  Assert.assertEquals(200,urlConn.getResponseCode());
  urlConn.getInputStream().close();
  urlConn.disconnect();
  urlConn=request(""String_Node_Str"",HttpMethod.GET);
  Assert.assertEquals(404,urlConn.getResponseCode());
}",0.6508135168961201
168431,"@Override public void exceptionCaught(ChannelHandlerContext ctx,Throwable cause) throws Exception {
  String exceptionMessage=""String_Node_Str"";
  if (exceptionRaised.compareAndSet(false,true)) {
    if (methodInfo != null) {
      LOG.error(exceptionMessage,cause);
      methodInfo.sendError(HttpResponseStatus.INTERNAL_SERVER_ERROR,cause);
      methodInfo=null;
    }
 else {
      if (cause instanceof HandlerException) {
        HttpResponse response=((HandlerException)cause).createFailureResponse();
        if (isUserError(response)) {
          LOG.trace(exceptionMessage,cause);
        }
 else {
          LOG.error(exceptionMessage,cause);
        }
        ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);
      }
 else {
        LOG.error(exceptionMessage,cause);
        HttpResponse response=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.INTERNAL_SERVER_ERROR);
        ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);
      }
    }
  }
 else {
    LOG.trace(exceptionMessage,cause);
  }
}","@Override public void exceptionCaught(ChannelHandlerContext ctx,Throwable cause) throws Exception {
  String exceptionMessage=""String_Node_Str"";
  if (exceptionRaised.compareAndSet(false,true)) {
    if (methodInfo != null) {
      methodInfo.sendError(HttpResponseStatus.INTERNAL_SERVER_ERROR,cause);
      methodInfo=null;
    }
 else {
      if (cause instanceof HandlerException) {
        HttpResponse response=((HandlerException)cause).createFailureResponse();
        if (isUserError(response)) {
          LOG.trace(exceptionMessage,cause);
        }
 else {
          LOG.error(exceptionMessage,cause);
        }
        ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);
      }
 else {
        LOG.error(exceptionMessage,cause);
        HttpResponse response=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.INTERNAL_SERVER_ERROR);
        ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);
      }
    }
  }
 else {
    LOG.trace(exceptionMessage,cause);
  }
}",0.9803921568627452
168432,"/** 
 * If the HttpRequest is valid and handled it will be sent upstream, if it cannot be invoked the response will be written back immediately.
 */
@Override public void channelRead(ChannelHandlerContext ctx,Object msg) throws Exception {
  try {
    if (exceptionRaised.get()) {
      return;
    }
    if (!(msg instanceof HttpRequest)) {
      if (methodInfo != null) {
        ReferenceCountUtil.retain(msg);
        ctx.fireChannelRead(msg);
      }
      return;
    }
    HttpRequest request=(HttpRequest)msg;
    BasicHttpResponder responder=new BasicHttpResponder(ctx.channel(),sslEnabled);
    methodInfo=prepareHandleMethod(request,responder,ctx);
    if (methodInfo != null) {
      ReferenceCountUtil.retain(msg);
      ctx.fireChannelRead(msg);
    }
 else {
      if (!responder.isResponded()) {
        HttpResponse response=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.NOT_FOUND);
        ctx.channel().writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);
      }
 else {
        ctx.channel().close();
      }
    }
  }
  finally {
    ReferenceCountUtil.release(msg);
  }
}","/** 
 * If the HttpRequest is valid and handled it will be sent upstream, if it cannot be invoked the response will be written back immediately.
 */
@Override public void channelRead(ChannelHandlerContext ctx,Object msg) throws Exception {
  try {
    if (exceptionRaised.get()) {
      return;
    }
    if (!(msg instanceof HttpRequest)) {
      if (methodInfo != null) {
        ReferenceCountUtil.retain(msg);
        ctx.fireChannelRead(msg);
      }
      return;
    }
    HttpRequest request=(HttpRequest)msg;
    BasicHttpResponder responder=new BasicHttpResponder(ctx.channel(),sslEnabled);
    methodInfo=null;
    methodInfo=prepareHandleMethod(request,responder,ctx);
    if (methodInfo != null) {
      ReferenceCountUtil.retain(msg);
      ctx.fireChannelRead(msg);
    }
 else {
      if (!responder.isResponded()) {
        HttpResponse response=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.NOT_FOUND);
        ctx.channel().writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);
      }
 else {
        ctx.channel().close();
      }
    }
  }
  finally {
    ReferenceCountUtil.release(msg);
  }
}",0.9907529722589168
168433,"@Test public void testNonExistingEndPoints() throws IOException {
  HttpURLConnection urlConn=request(""String_Node_Str"",HttpMethod.POST);
  writeContent(urlConn,""String_Node_Str"");
  Assert.assertEquals(404,urlConn.getResponseCode());
  urlConn.disconnect();
}","@Test public void testNonExistingEndPoints() throws IOException {
  HttpURLConnection urlConn=request(""String_Node_Str"",HttpMethod.POST);
  writeContent(urlConn,""String_Node_Str"");
  Assert.assertEquals(404,urlConn.getResponseCode());
  urlConn.disconnect();
  urlConn=request(""String_Node_Str"",HttpMethod.GET,true);
  Assert.assertEquals(200,urlConn.getResponseCode());
  urlConn.getInputStream().close();
  urlConn.disconnect();
  urlConn=request(""String_Node_Str"",HttpMethod.GET);
  Assert.assertEquals(404,urlConn.getResponseCode());
}",0.6508135168961201
168434,"/** 
 * Add a source and destination.
 * @param source  Source path to be routed. Routed path can have named wild-card pattern with braces ""{}"".
 * @param destination Destination of the path.
 */
public void add(final String source,final T destination){
  String path=source.replaceAll(""String_Node_Str"",""String_Node_Str"");
  path=(path.endsWith(""String_Node_Str"") && path.length() > 1) ? path.substring(0,path.length() - 1) : path;
  String[] parts=path.split(""String_Node_Str"");
  if (parts.length - 1 > maxPathParts) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",source,maxPathParts));
  }
  StringBuilder sb=new StringBuilder();
  List<String> groupNames=Lists.newArrayList();
  for (  String part : parts) {
    Matcher groupMatcher=GROUP_PATTERN.matcher(part);
    if (groupMatcher.matches()) {
      groupNames.add(groupMatcher.group(1));
      sb.append(""String_Node_Str"");
    }
 else     if (WILD_CARD_PATTERN.matcher(part).matches()) {
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(part);
    }
    sb.append(""String_Node_Str"");
  }
  sb.setLength(sb.length() - 1);
  Pattern pattern=Pattern.compile(sb.toString());
  patternRouteList.add(ImmutablePair.of(pattern,new RouteDestinationWithGroups(destination,groupNames)));
}","/** 
 * Add a source and destination.
 * @param source  Source path to be routed. Routed path can have named wild-card pattern with braces ""{}"".
 * @param destination Destination of the path.
 */
public void add(final String source,final T destination){
  String path=source.replaceAll(""String_Node_Str"",""String_Node_Str"");
  path=(path.endsWith(""String_Node_Str"") && path.length() > 1) ? path.substring(0,path.length() - 1) : path;
  String[] parts=path.split(""String_Node_Str"",maxPathParts + 2);
  if (parts.length - 1 > maxPathParts) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",source,maxPathParts));
  }
  StringBuilder sb=new StringBuilder();
  List<String> groupNames=Lists.newArrayList();
  for (  String part : parts) {
    Matcher groupMatcher=GROUP_PATTERN.matcher(part);
    if (groupMatcher.matches()) {
      groupNames.add(groupMatcher.group(1));
      sb.append(""String_Node_Str"");
    }
 else     if (WILD_CARD_PATTERN.matcher(part).matches()) {
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(part);
    }
    sb.append(""String_Node_Str"");
  }
  sb.setLength(sb.length() - 1);
  Pattern pattern=Pattern.compile(sb.toString());
  patternRouteList.add(ImmutablePair.of(pattern,new RouteDestinationWithGroups(destination,groupNames)));
}",0.9934082977898412
168435,"@Test public void testPathRoutings(){
  PatternPathRouterWithGroups<String> pathRouter=PatternPathRouterWithGroups.create(25);
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  List<PatternPathRouterWithGroups.RoutableDestination<String>> routes;
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(1,routes.size());
  Assert.assertEquals(""String_Node_Str"",routes.get(0).getDestination());
  Assert.assertTrue(routes.get(0).getGroupNameValues().isEmpty());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(1,routes.size());
  Assert.assertEquals(""String_Node_Str"",routes.get(0).getDestination());
  Assert.assertTrue(routes.get(0).getGroupNameValues().isEmpty());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertTrue(routes.isEmpty());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertTrue(routes.isEmpty());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(1,routes.size());
  Assert.assertEquals(""String_Node_Str"",routes.get(0).getDestination());
  Assert.assertEquals(1,routes.get(0).getGroupNameValues().size());
  Assert.assertEquals(""String_Node_Str"",routes.get(0).getGroupNameValues().get(""String_Node_Str""));
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(1,routes.size());
  Assert.assertEquals(""String_Node_Str"",routes.get(0).getDestination());
  Assert.assertTrue(routes.get(0).getGroupNameValues().isEmpty());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(1,routes.size());
  Assert.assertEquals(""String_Node_Str"",routes.get(0).getDestination());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(1,routes.size());
  Assert.assertEquals(""String_Node_Str"",routes.get(0).getDestination());
  Assert.assertTrue(routes.get(0).getGroupNameValues().isEmpty());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertTrue(routes.isEmpty());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(2,routes.size());
  Assert.assertEquals(ImmutableSet.of(""String_Node_Str"",""String_Node_Str""),ImmutableSet.of(routes.get(0).getDestination(),routes.get(1).getDestination()));
  Assert.assertTrue(routes.get(0).getGroupNameValues().isEmpty());
  Assert.assertTrue(routes.get(1).getGroupNameValues().isEmpty());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(1,routes.size());
  Assert.assertEquals(""String_Node_Str"",routes.get(0).getDestination());
  Assert.assertTrue(routes.get(0).getGroupNameValues().isEmpty());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(2,routes.size());
  Assert.assertEquals(ImmutableSet.of(""String_Node_Str"",""String_Node_Str""),ImmutableSet.of(routes.get(0).getDestination(),routes.get(1).getDestination()));
  Assert.assertEquals(ImmutableSet.of(ImmutableMap.of(""String_Node_Str"",""String_Node_Str""),ImmutableMap.<String,String>of()),ImmutableSet.of(routes.get(0).getGroupNameValues(),routes.get(1).getGroupNameValues()));
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(3,routes.size());
  Assert.assertEquals(ImmutableSet.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),ImmutableSet.of(routes.get(0).getDestination(),routes.get(1).getDestination(),routes.get(2).getDestination()));
  Assert.assertEquals(ImmutableSet.of(ImmutableMap.of(""String_Node_Str"",""String_Node_Str""),ImmutableMap.<String,String>of()),ImmutableSet.of(routes.get(0).getGroupNameValues(),routes.get(1).getGroupNameValues()));
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(2,routes.size());
  Assert.assertEquals(ImmutableSet.of(""String_Node_Str"",""String_Node_Str""),ImmutableSet.of(routes.get(0).getDestination(),routes.get(1).getDestination()));
  Assert.assertEquals(ImmutableSet.of(ImmutableMap.of(""String_Node_Str"",""String_Node_Str""),ImmutableMap.<String,String>of(""String_Node_Str"",""String_Node_Str"")),ImmutableSet.of(routes.get(0).getGroupNameValues(),routes.get(1).getGroupNameValues()));
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(1,routes.size());
  Assert.assertEquals(""String_Node_Str"",routes.get(0).getDestination());
  Assert.assertEquals(ImmutableMap.of(""String_Node_Str"",""String_Node_Str""),routes.get(0).getGroupNameValues());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(2,routes.size());
  Assert.assertEquals(ImmutableSet.of(""String_Node_Str"",""String_Node_Str""),ImmutableSet.of(routes.get(0).getDestination(),routes.get(1).getDestination()));
  Assert.assertEquals(ImmutableSet.of(ImmutableMap.of(""String_Node_Str"",""String_Node_Str""),ImmutableMap.<String,String>of(""String_Node_Str"",""String_Node_Str"")),ImmutableSet.of(routes.get(0).getGroupNameValues(),routes.get(1).getGroupNameValues()));
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(2,routes.size());
  Assert.assertEquals(ImmutableSet.of(""String_Node_Str"",""String_Node_Str""),ImmutableSet.of(routes.get(0).getDestination(),routes.get(1).getDestination()));
  Assert.assertEquals(ImmutableSet.of(ImmutableMap.of(""String_Node_Str"",""String_Node_Str""),ImmutableMap.<String,String>of(""String_Node_Str"",""String_Node_Str"")),ImmutableSet.of(routes.get(0).getGroupNameValues(),routes.get(1).getGroupNameValues()));
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(1,routes.size());
  Assert.assertEquals(""String_Node_Str"",routes.get(0).getDestination());
  Assert.assertEquals(ImmutableMap.of(""String_Node_Str"",""String_Node_Str""),routes.get(0).getGroupNameValues());
}","@Test public void testPathRoutings(){
  PatternPathRouterWithGroups<String> pathRouter=PatternPathRouterWithGroups.create(25);
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  pathRouter.add(""String_Node_Str"",""String_Node_Str"");
  List<PatternPathRouterWithGroups.RoutableDestination<String>> routes;
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(1,routes.size());
  Assert.assertEquals(""String_Node_Str"",routes.get(0).getDestination());
  Assert.assertTrue(routes.get(0).getGroupNameValues().isEmpty());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(1,routes.size());
  Assert.assertEquals(""String_Node_Str"",routes.get(0).getDestination());
  Assert.assertTrue(routes.get(0).getGroupNameValues().isEmpty());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(1,routes.size());
  Assert.assertEquals(""String_Node_Str"",routes.get(0).getDestination());
  Assert.assertTrue(routes.get(0).getGroupNameValues().isEmpty());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertTrue(routes.isEmpty());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertTrue(routes.isEmpty());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(1,routes.size());
  Assert.assertEquals(""String_Node_Str"",routes.get(0).getDestination());
  Assert.assertEquals(1,routes.get(0).getGroupNameValues().size());
  Assert.assertEquals(""String_Node_Str"",routes.get(0).getGroupNameValues().get(""String_Node_Str""));
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(1,routes.size());
  Assert.assertEquals(""String_Node_Str"",routes.get(0).getDestination());
  Assert.assertTrue(routes.get(0).getGroupNameValues().isEmpty());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(1,routes.size());
  Assert.assertEquals(""String_Node_Str"",routes.get(0).getDestination());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(1,routes.size());
  Assert.assertEquals(""String_Node_Str"",routes.get(0).getDestination());
  Assert.assertTrue(routes.get(0).getGroupNameValues().isEmpty());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertTrue(routes.isEmpty());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(2,routes.size());
  Assert.assertEquals(ImmutableSet.of(""String_Node_Str"",""String_Node_Str""),ImmutableSet.of(routes.get(0).getDestination(),routes.get(1).getDestination()));
  Assert.assertTrue(routes.get(0).getGroupNameValues().isEmpty());
  Assert.assertTrue(routes.get(1).getGroupNameValues().isEmpty());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(1,routes.size());
  Assert.assertEquals(""String_Node_Str"",routes.get(0).getDestination());
  Assert.assertTrue(routes.get(0).getGroupNameValues().isEmpty());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(2,routes.size());
  Assert.assertEquals(ImmutableSet.of(""String_Node_Str"",""String_Node_Str""),ImmutableSet.of(routes.get(0).getDestination(),routes.get(1).getDestination()));
  Assert.assertEquals(ImmutableSet.of(ImmutableMap.of(""String_Node_Str"",""String_Node_Str""),ImmutableMap.<String,String>of()),ImmutableSet.of(routes.get(0).getGroupNameValues(),routes.get(1).getGroupNameValues()));
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(3,routes.size());
  Assert.assertEquals(ImmutableSet.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),ImmutableSet.of(routes.get(0).getDestination(),routes.get(1).getDestination(),routes.get(2).getDestination()));
  Assert.assertEquals(ImmutableSet.of(ImmutableMap.of(""String_Node_Str"",""String_Node_Str""),ImmutableMap.<String,String>of()),ImmutableSet.of(routes.get(0).getGroupNameValues(),routes.get(1).getGroupNameValues()));
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(2,routes.size());
  Assert.assertEquals(ImmutableSet.of(""String_Node_Str"",""String_Node_Str""),ImmutableSet.of(routes.get(0).getDestination(),routes.get(1).getDestination()));
  Assert.assertEquals(ImmutableSet.of(ImmutableMap.of(""String_Node_Str"",""String_Node_Str""),ImmutableMap.<String,String>of(""String_Node_Str"",""String_Node_Str"")),ImmutableSet.of(routes.get(0).getGroupNameValues(),routes.get(1).getGroupNameValues()));
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(1,routes.size());
  Assert.assertEquals(""String_Node_Str"",routes.get(0).getDestination());
  Assert.assertEquals(ImmutableMap.of(""String_Node_Str"",""String_Node_Str""),routes.get(0).getGroupNameValues());
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(2,routes.size());
  Assert.assertEquals(ImmutableSet.of(""String_Node_Str"",""String_Node_Str""),ImmutableSet.of(routes.get(0).getDestination(),routes.get(1).getDestination()));
  Assert.assertEquals(ImmutableSet.of(ImmutableMap.of(""String_Node_Str"",""String_Node_Str""),ImmutableMap.<String,String>of(""String_Node_Str"",""String_Node_Str"")),ImmutableSet.of(routes.get(0).getGroupNameValues(),routes.get(1).getGroupNameValues()));
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(2,routes.size());
  Assert.assertEquals(ImmutableSet.of(""String_Node_Str"",""String_Node_Str""),ImmutableSet.of(routes.get(0).getDestination(),routes.get(1).getDestination()));
  Assert.assertEquals(ImmutableSet.of(ImmutableMap.of(""String_Node_Str"",""String_Node_Str""),ImmutableMap.<String,String>of(""String_Node_Str"",""String_Node_Str"")),ImmutableSet.of(routes.get(0).getGroupNameValues(),routes.get(1).getGroupNameValues()));
  routes=pathRouter.getDestinations(""String_Node_Str"");
  Assert.assertEquals(1,routes.size());
  Assert.assertEquals(""String_Node_Str"",routes.get(0).getDestination());
  Assert.assertEquals(ImmutableMap.of(""String_Node_Str"",""String_Node_Str""),routes.get(0).getGroupNameValues());
}",0.9785824685361006
168436,"@Override protected void shutDown() throws Exception {
  LOG.info(""String_Node_Str"",serviceName,bindAddress);
  try {
    bootstrap.shutdown();
    if (!channelGroup.close().await(CLOSE_CHANNEL_TIMEOUT,TimeUnit.SECONDS)) {
      LOG.warn(""String_Node_Str"");
    }
  }
  finally {
    resourceHandler.destroy(handlerContext);
    bootstrap.releaseExternalResources();
    if (executionHandler != null) {
      executionHandler.releaseExternalResources();
      ExecutorUtil.terminate(executionHandler.getExecutor());
    }
  }
  LOG.info(""String_Node_Str"",serviceName,bindAddress);
}","@Override protected void shutDown() throws Exception {
  LOG.info(""String_Node_Str"",serviceName);
  try {
    bootstrap.shutdown();
    if (!channelGroup.close().await(CLOSE_CHANNEL_TIMEOUT,TimeUnit.SECONDS)) {
      LOG.warn(""String_Node_Str"");
    }
  }
  finally {
    resourceHandler.destroy(handlerContext);
    bootstrap.releaseExternalResources();
    if (executionHandler != null) {
      executionHandler.releaseExternalResources();
      ExecutorUtil.terminate(executionHandler.getExecutor());
    }
  }
  LOG.debug(""String_Node_Str"",serviceName,bindAddress);
}",0.981786643538595
168437,"@Override protected void startUp() throws Exception {
  LOG.info(""String_Node_Str"",serviceName,bindAddress);
  bootStrap(execThreadPoolSize,execThreadKeepAliveSecs);
  Channel channel=bootstrap.bind(bindAddress);
  channelGroup.add(channel);
  bindAddress=((InetSocketAddress)channel.getLocalAddress());
  LOG.info(""String_Node_Str"",serviceName,bindAddress);
}","@Override protected void startUp() throws Exception {
  LOG.info(""String_Node_Str"",serviceName,bindAddress);
  bootStrap(execThreadPoolSize,execThreadKeepAliveSecs);
  Channel channel=bootstrap.bind(bindAddress);
  channelGroup.add(channel);
  bindAddress=((InetSocketAddress)channel.getLocalAddress());
  LOG.debug(""String_Node_Str"",serviceName,bindAddress);
}",0.9875173370319
168438,"public SSLHandlerFactory(SSLConfig sslConfig){
  if (sslConfig.getKeyStore() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (sslConfig.getKeyStorePassword() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String algorithm=Security.getProperty(""String_Node_Str"");
  if (algorithm == null) {
    algorithm=""String_Node_Str"";
  }
  try {
    KeyStore ks=getKeyStore(sslConfig.getKeyStore(),sslConfig.getKeyStorePassword());
    KeyManagerFactory kmf=KeyManagerFactory.getInstance(algorithm);
    kmf.init(ks,(sslConfig.getCertificatePassword() != null) ? sslConfig.getCertificatePassword().toCharArray() : sslConfig.getKeyStorePassword().toCharArray());
    TrustManagerFactory tmf=null;
    if (sslConfig.getTrustKeyStore() != null) {
      if (sslConfig.getTrustKeyStorePassword() == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      this.needClientAuth=true;
      KeyStore tks=getKeyStore(sslConfig.getTrustKeyStore(),sslConfig.getTrustKeyStorePassword());
      tmf=TrustManagerFactory.getInstance(algorithm);
      tmf.init(tks);
    }
    serverContext=SSLContext.getInstance(protocol);
    serverContext.init(kmf.getKeyManagers(),tmf != null ? tmf.getTrustManagers() : null,null);
  }
 catch (  Exception e) {
    throw new IllegalArgumentException(""String_Node_Str"",e);
  }
}","public SSLHandlerFactory(SSLConfig sslConfig){
  if (sslConfig.getKeyStore() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (sslConfig.getKeyStorePassword() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String algorithm=Security.getProperty(""String_Node_Str"");
  if (algorithm == null) {
    algorithm=""String_Node_Str"";
  }
  try {
    KeyStore ks=getKeyStore(sslConfig.getKeyStore(),sslConfig.getKeyStorePassword());
    KeyManagerFactory kmf=KeyManagerFactory.getInstance(algorithm);
    kmf.init(ks,sslConfig.getCertificatePassword() != null ? sslConfig.getCertificatePassword().toCharArray() : sslConfig.getKeyStorePassword().toCharArray());
    TrustManagerFactory tmf=null;
    if (sslConfig.getTrustKeyStore() != null) {
      if (sslConfig.getTrustKeyStorePassword() == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      this.needClientAuth=true;
      KeyStore tks=getKeyStore(sslConfig.getTrustKeyStore(),sslConfig.getTrustKeyStorePassword());
      tmf=TrustManagerFactory.getInstance(algorithm);
      tmf.init(tks);
    }
    serverContext=SSLContext.getInstance(protocol);
    serverContext.init(kmf.getKeyManagers(),tmf != null ? tmf.getTrustManagers() : null,null);
  }
 catch (  Exception e) {
    throw new IllegalArgumentException(""String_Node_Str"",e);
  }
}",0.9992727272727272
168439,"private static KeyStore getKeyStore(File keyStore,String keyStorePassword) throws Exception {
  KeyStore ks=KeyStore.getInstance(""String_Node_Str"");
  InputStream inputStream=new FileInputStream(keyStore);
  try {
    ks.load(inputStream,keyStorePassword.toCharArray());
  }
  finally {
    inputStream.close();
  }
  return ks;
}","private static KeyStore getKeyStore(File keyStore,String keyStorePassword) throws KeyStoreLoadException {
  InputStream inputStream=null;
  KeyStore ks=null;
  try {
    ks=KeyStore.getInstance(""String_Node_Str"");
    inputStream=new FileInputStream(keyStore);
    ks.load(inputStream,keyStorePassword.toCharArray());
  }
 catch (  FileNotFoundException e) {
    throw new KeyStoreLoadException(e);
  }
catch (  CertificateException e) {
    throw new KeyStoreLoadException(e);
  }
catch (  NoSuchAlgorithmException e) {
    throw new KeyStoreLoadException(e);
  }
catch (  KeyStoreException e) {
    throw new KeyStoreLoadException(e);
  }
catch (  IOException e) {
    throw new KeyStoreLoadException(e);
  }
 finally {
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
  return ks;
}",0.4534412955465587
168440,"@Override protected TableMetadata provideTableMetadata(TableName tableName,ClusterName clusterName,Connection<MongoClient> connection) throws ConnectorException {
  DB db=connection.getNativeConnection().getDB(tableName.getCatalogName().getName());
  DBCollection collection=db.getCollection(tableName.getName());
  TableMetadataBuilder tableMetadataBuilder=new TableMetadataBuilder(tableName.getCatalogName().getName(),tableName.getName(),clusterName.getName());
  String sampleNumber=connection.getSessionObject(String.class,""String_Node_Str"");
  if (sampleNumber == null) {
    sampleNumber=ConfigurationOptions.SAMPLE_PROBABILITY.getDefaultValue()[0];
  }
  boolean firstField=true;
  for (  Map.Entry<String,String> entry : DiscoverMetadataUtils.discoverFieldsWithType(collection,sampleNumber).entrySet()) {
    if (entry.getValue().equals(""String_Node_Str"")) {
      tableMetadataBuilder.addColumn(entry.getKey(),new ColumnType(DataType.TEXT));
    }
 else     if (entry.getValue().equals(""String_Node_Str"")) {
      tableMetadataBuilder.addColumn(entry.getKey(),new ColumnType(DataType.BOOLEAN));
    }
 else     if (entry.getValue().equals(""String_Node_Str"")) {
      tableMetadataBuilder.addColumn(entry.getKey(),new ColumnType(DataType.DOUBLE));
    }
 else     if (entry.getValue().equals(""String_Node_Str"")) {
      tableMetadataBuilder.addColumn(entry.getKey(),new ColumnType(DataType.NATIVE));
    }
 else {
      continue;
    }
    if (firstField) {
      tableMetadataBuilder.withPartitionKey(entry.getKey());
      firstField=false;
    }
  }
  for (  IndexMetadata indexMetadata : DiscoverMetadataUtils.discoverIndexes(collection)) {
    tableMetadataBuilder.withColumns(new ArrayList<ColumnMetadata>(indexMetadata.getColumns().values()));
    tableMetadataBuilder.addIndex(indexMetadata);
  }
  return tableMetadataBuilder.build();
}","@Override protected TableMetadata provideTableMetadata(TableName tableName,ClusterName clusterName,Connection<MongoClient> connection) throws ConnectorException {
  DB db=connection.getNativeConnection().getDB(tableName.getCatalogName().getName());
  DBCollection collection=db.getCollection(tableName.getName());
  TableMetadataBuilder tableMetadataBuilder=new TableMetadataBuilder(tableName.getCatalogName().getName(),tableName.getName(),clusterName.getName());
  String sampleNumber=connection.getSessionObject(String.class,""String_Node_Str"");
  if (sampleNumber == null) {
    sampleNumber=ConfigurationOptions.SAMPLE_PROBABILITY.getDefaultValue()[0];
  }
  boolean firstField=true;
  for (  Map.Entry<String,String> entry : DiscoverMetadataUtils.discoverFieldsWithType(collection,sampleNumber).entrySet()) {
    if (entry.getValue().equals(""String_Node_Str"")) {
      tableMetadataBuilder.addColumn(entry.getKey(),new ColumnType(DataType.TEXT));
    }
 else     if (entry.getValue().equals(""String_Node_Str"")) {
      tableMetadataBuilder.addColumn(entry.getKey(),new ColumnType(DataType.BOOLEAN));
    }
 else     if (entry.getValue().equals(""String_Node_Str"")) {
      tableMetadataBuilder.addColumn(entry.getKey(),new ColumnType(DataType.DOUBLE));
    }
 else     if (entry.getValue().equals(""String_Node_Str"")) {
      tableMetadataBuilder.addColumn(entry.getKey(),new ColumnType(DataType.NATIVE));
    }
 else {
      continue;
    }
    if (firstField) {
      tableMetadataBuilder.withPartitionKey(entry.getKey());
      firstField=false;
    }
  }
  for (  IndexMetadata indexMetadata : DiscoverMetadataUtils.discoverIndexes(collection)) {
    tableMetadataBuilder.addIndex(indexMetadata);
  }
  return tableMetadataBuilder.build();
}",0.9516666666666668
168441,"@Override protected TableMetadata provideTableMetadata(TableName tableName,ClusterName clusterName,Connection<MongoClient> connection) throws ConnectorException {
  DB db=connection.getNativeConnection().getDB(tableName.getCatalogName().getName());
  DBCollection collection=db.getCollection(tableName.getName());
  TableMetadataBuilder tableMetadataBuilder=new TableMetadataBuilder(tableName.getCatalogName().getName(),tableName.getName(),clusterName.getName());
  String sampleNumber=connection.getSessionObject(String.class,""String_Node_Str"");
  if (sampleNumber == null) {
    sampleNumber=ConfigurationOptions.SAMPLE_PROBABILITY.getDefaultValue()[0];
  }
  boolean firstField=true;
  for (  Map.Entry<String,String> entry : DiscoverMetadataUtils.discoverFieldsWithType(collection,sampleNumber).entrySet()) {
    if (entry.getValue().equals(""String_Node_Str"")) {
      tableMetadataBuilder.addColumn(entry.getKey(),new ColumnType(DataType.TEXT));
    }
 else     if (entry.getValue().equals(""String_Node_Str"")) {
      tableMetadataBuilder.addColumn(entry.getKey(),new ColumnType(DataType.BOOLEAN));
    }
 else     if (entry.getValue().equals(""String_Node_Str"")) {
      tableMetadataBuilder.addColumn(entry.getKey(),new ColumnType(DataType.INT));
    }
 else {
      continue;
    }
    if (firstField) {
      tableMetadataBuilder.withPartitionKey(entry.getKey());
      firstField=false;
    }
  }
  for (  IndexMetadata indexMetadata : DiscoverMetadataUtils.discoverIndexes(collection)) {
    tableMetadataBuilder.withColumns(new ArrayList<ColumnMetadata>(indexMetadata.getColumns().values()));
    tableMetadataBuilder.addIndex(indexMetadata);
  }
  return tableMetadataBuilder.build();
}","@Override protected TableMetadata provideTableMetadata(TableName tableName,ClusterName clusterName,Connection<MongoClient> connection) throws ConnectorException {
  DB db=connection.getNativeConnection().getDB(tableName.getCatalogName().getName());
  DBCollection collection=db.getCollection(tableName.getName());
  TableMetadataBuilder tableMetadataBuilder=new TableMetadataBuilder(tableName.getCatalogName().getName(),tableName.getName(),clusterName.getName());
  String sampleNumber=connection.getSessionObject(String.class,""String_Node_Str"");
  if (sampleNumber == null) {
    sampleNumber=ConfigurationOptions.SAMPLE_PROBABILITY.getDefaultValue()[0];
  }
  boolean firstField=true;
  for (  Map.Entry<String,String> entry : DiscoverMetadataUtils.discoverFieldsWithType(collection,sampleNumber).entrySet()) {
    if (entry.getValue().equals(""String_Node_Str"")) {
      tableMetadataBuilder.addColumn(entry.getKey(),new ColumnType(DataType.TEXT));
    }
 else     if (entry.getValue().equals(""String_Node_Str"")) {
      tableMetadataBuilder.addColumn(entry.getKey(),new ColumnType(DataType.BOOLEAN));
    }
 else     if (entry.getValue().equals(""String_Node_Str"")) {
      tableMetadataBuilder.addColumn(entry.getKey(),new ColumnType(DataType.DOUBLE));
    }
 else     if (entry.getValue().equals(""String_Node_Str"")) {
      tableMetadataBuilder.addColumn(entry.getKey(),new ColumnType(DataType.NATIVE));
    }
 else {
      continue;
    }
    if (firstField) {
      tableMetadataBuilder.withPartitionKey(entry.getKey());
      firstField=false;
    }
  }
  for (  IndexMetadata indexMetadata : DiscoverMetadataUtils.discoverIndexes(collection)) {
    tableMetadataBuilder.withColumns(new ArrayList<ColumnMetadata>(indexMetadata.getColumns().values()));
    tableMetadataBuilder.addIndex(indexMetadata);
  }
  return tableMetadataBuilder.build();
}",0.9552238805970148
168442,"/** 
 * Cast the value according to column type.
 * @param value the value casted
 * @param columnType the column type
 */
private static Object castValue(Object value,ColumnType columnType){
  Object castedValue=value;
switch (columnType.getDataType()) {
case FLOAT:
    castedValue=((Double)value).floatValue();
  break;
case SET:
case LIST:
case MAP:
break;
default :
break;
}
return castedValue;
}","/** 
 * Cast the value according to column type.
 * @param value the value casted
 * @param columnType the column type
 */
private static Object castValue(Object value,ColumnType columnType){
  if (value == null)   return value;
  Object castedValue=value;
switch (columnType.getDataType()) {
case FLOAT:
    castedValue=((Double)value).floatValue();
  break;
case NATIVE:
castedValue=value.toString();
break;
case SET:
case LIST:
case MAP:
break;
default :
break;
}
return castedValue;
}",0.9021372328458944
168443,"/** 
 * Instantiates a new logical workflow executor ready for the execution.
 * @param logicalWorkflowParsed the logical workflow parsed.
 * @throws MongoValidationException if the query specified in the logical workflow is not supported.
 * @throws ExecutionException if the execution fails.
 * @throws UnsupportedException if the specified operation is not supported.
 */
public LogicalWorkflowExecutor(ProjectParsed logicalWorkflowParsed) throws MongoValidationException, ExecutionException, UnsupportedException {
  logicalWorkflowData=logicalWorkflowParsed;
  this.buildQuery();
}","/** 
 * Instantiates a new logical workflow executor ready for the execution.
 * @param logicalWorkflowParsed the logical workflow parsed.
 * @throws ExecutionException if the execution fails or the query specified in the logical workflow is not supported.
 * @throws UnsupportedException if the specified operation is not supported.
 */
public LogicalWorkflowExecutor(ProjectParsed logicalWorkflowParsed) throws ExecutionException, UnsupportedException {
  logicalWorkflowData=logicalWorkflowParsed;
  this.buildQuery();
}",0.8638412984670875
168444,"@Override public void run(){
  try {
    shutdown();
  }
 catch (  ExecutionException e) {
    logger.error(""String_Node_Str"");
  }
}","@Override public void run(){
  try {
    shutdown();
  }
 catch (  ExecutionException e) {
    logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
}",0.9333333333333332
168445,"/** 
 * Attach shut down hook.
 */
public void attachShutDownHook(){
  Runtime.getRuntime().addShutdownHook(new Thread(){
    @Override public void run(){
      try {
        shutdown();
      }
 catch (      ExecutionException e) {
        logger.error(""String_Node_Str"");
      }
    }
  }
);
}","/** 
 * Attach shut down hook.
 */
public void attachShutDownHook(){
  Runtime.getRuntime().addShutdownHook(new Thread(){
    @Override public void run(){
      try {
        shutdown();
      }
 catch (      ExecutionException e) {
        logger.error(""String_Node_Str"" + e.getMessage(),e);
      }
    }
  }
);
}",0.9689034369885434
168446,"@Override public boolean isConnected(){
  boolean isConnected=false;
  if (mongoClient != null) {
    try {
      mongoClient.getConnectPoint();
      isConnected=true;
    }
 catch (    Exception error) {
      logger.error(error.getMessage());
    }
  }
  return isConnected;
}","@Override public final boolean isConnected(){
  boolean isConnected=false;
  if (mongoClient != null) {
    try {
      mongoClient.getConnectPoint();
      isConnected=true;
    }
 catch (    Exception error) {
      logger.error(""String_Node_Str"" + error.getMessage(),error);
    }
  }
  return isConnected;
}",0.9457627118644067
168447,"/** 
 * Create a collection in MongoDB.
 * @param tableMetadata the tableMetadata
 * @param connection the connection which contains the native connector
 * @throws MongoValidationException if the specified operation is not supported
 * @throws ExecutionException if an error exist when running the database command
 */
@Override protected void createTable(TableMetadata tableMetadata,Connection<MongoClient> connection) throws MongoValidationException, ExecutionException {
  if (tableMetadata == null) {
    throw new MongoValidationException(""String_Node_Str"");
  }
  if (tableMetadata.getName() == null) {
    throw new MongoValidationException(""String_Node_Str"");
  }
  if (ShardUtils.isCollectionSharded(SelectorOptionsUtils.processOptions(tableMetadata.getOptions()))) {
    ShardUtils.shardCollection((MongoClient)connection.getNativeConnection(),tableMetadata);
  }
}","/** 
 * Create a collection in MongoDB.
 * @param tableMetadata the tableMetadata
 * @param connection the connection which contains the native connector
 * @throws ExecutionException if an error exist when running the database command or the specified operation is not supported
 */
@Override protected void createTable(TableMetadata tableMetadata,Connection<MongoClient> connection) throws ExecutionException {
  if (tableMetadata == null) {
    throw new MongoValidationException(""String_Node_Str"");
  }
  if (tableMetadata.getName() == null) {
    throw new MongoValidationException(""String_Node_Str"");
  }
  if (ShardUtils.isCollectionSharded(SelectorOptionsUtils.processOptions(tableMetadata.getOptions()))) {
    ShardUtils.shardCollection((MongoClient)connection.getNativeConnection(),tableMetadata);
  }
}",0.5621301775147929
168448,"/** 
 * Create an index.
 * @param indexMetadata the index metadata
 * @param connection the connection
 * @throws MongoValidationException if the specified index is not supported
 * @throws ExecutionException if an error exist when running the database command
 */
@Override protected void createIndex(IndexMetadata indexMetadata,Connection<MongoClient> connection) throws MongoValidationException, ExecutionException {
  DB db=connection.getNativeConnection().getDB(indexMetadata.getName().getTableName().getCatalogName().getName());
  DBObject indexDBObject=IndexUtils.getIndexDBObject(indexMetadata);
  DBObject indexOptionsDBObject=IndexUtils.getCustomOptions(indexMetadata);
  try {
    db.getCollection(indexMetadata.getName().getTableName().getName()).createIndex(indexDBObject,indexOptionsDBObject);
  }
 catch (  MongoException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    throw new ExecutionException(e.getMessage(),e);
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + indexDBObject.toString() + ""String_Node_Str""+ indexOptionsDBObject);
  }
}","/** 
 * Create an index.
 * @param indexMetadata the index metadata
 * @param connection the connection
 * @throws ExecutionException if an error exist when running the database command or the specified operation is not supported
 */
@Override protected void createIndex(IndexMetadata indexMetadata,Connection<MongoClient> connection) throws ExecutionException {
  DB db=connection.getNativeConnection().getDB(indexMetadata.getName().getTableName().getCatalogName().getName());
  DBObject indexDBObject=IndexUtils.getIndexDBObject(indexMetadata);
  DBObject indexOptionsDBObject=IndexUtils.getCustomOptions(indexMetadata);
  try {
    db.getCollection(indexMetadata.getName().getTableName().getName()).createIndex(indexDBObject,indexOptionsDBObject);
  }
 catch (  MongoException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    throw new ExecutionException(e.getMessage(),e);
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + indexDBObject.toString() + ""String_Node_Str""+ indexOptionsDBObject);
  }
}",0.9316479400749064
168449,"@Override protected void alterTable(TableName tableName,AlterOptions alterOptions,Connection<MongoClient> connection) throws MongoValidationException, ExecutionException {
  DB db=connection.getNativeConnection().getDB(tableName.getCatalogName().getName());
  DBCollection collection=db.getCollection(tableName.getName());
switch (alterOptions.getOption()) {
case ADD_COLUMN:
    break;
case ALTER_COLUMN:
  throw new MongoValidationException(""String_Node_Str"");
case DROP_COLUMN:
String name=alterOptions.getColumnMetadata().getName().getName();
collection.updateMulti(new BasicDBObject(),AlterOptionsUtils.buildDropColumnDBObject(name));
break;
case ALTER_OPTIONS:
default :
throw new MongoValidationException(""String_Node_Str"");
}
}","@Override protected void alterTable(TableName tableName,AlterOptions alterOptions,Connection<MongoClient> connection) throws ExecutionException {
  DB db=connection.getNativeConnection().getDB(tableName.getCatalogName().getName());
  DBCollection collection=db.getCollection(tableName.getName());
switch (alterOptions.getOption()) {
case ADD_COLUMN:
    break;
case ALTER_COLUMN:
  throw new MongoValidationException(""String_Node_Str"");
case DROP_COLUMN:
String name=alterOptions.getColumnMetadata().getName().getName();
collection.updateMulti(new BasicDBObject(),AlterOptionsUtils.buildDropColumnDBObject(name));
break;
case ALTER_OPTIONS:
default :
throw new MongoValidationException(""String_Node_Str"");
}
}",0.981994459833795
168450,"/** 
 * Drop an index.
 * @param indexMetadata the index metadata
 * @param connection the connection
 * @throws ExecutionException if an error exist when running the database command
 * @throws MongoValidationException if the specified operation is not supported
 */
@Override protected void dropIndex(IndexMetadata indexMetadata,Connection<MongoClient> connection) throws ExecutionException, MongoValidationException {
  DB db=connection.getNativeConnection().getDB(indexMetadata.getName().getTableName().getCatalogName().getName());
  String indexName=null;
  if (indexMetadata.getName() != null) {
    indexName=indexMetadata.getName().getName();
  }
  if (indexName != null) {
    try {
      db.getCollection(indexMetadata.getName().getTableName().getName()).dropIndex(indexName);
    }
 catch (    MongoException e) {
      logger.error(""String_Node_Str"" + e.getMessage());
      throw new ExecutionException(e.getMessage(),e);
    }
  }
 else {
    IndexUtils.dropIndexWithDefaultName(indexMetadata,db);
  }
}","/** 
 * Drop an index.
 * @param indexMetadata the index metadata
 * @param connection the connection
 * @throws ExecutionException if an error exist when running the database command or the specified operation is not supported
 */
@Override protected void dropIndex(IndexMetadata indexMetadata,Connection<MongoClient> connection) throws ExecutionException {
  DB db=connection.getNativeConnection().getDB(indexMetadata.getName().getTableName().getCatalogName().getName());
  String indexName=null;
  if (indexMetadata.getName() != null) {
    indexName=indexMetadata.getName().getName();
  }
  if (indexName != null) {
    try {
      db.getCollection(indexMetadata.getName().getTableName().getName()).dropIndex(indexName);
    }
 catch (    MongoException e) {
      logger.error(""String_Node_Str"" + e.getMessage());
      throw new ExecutionException(e.getMessage(),e);
    }
  }
 else {
    IndexUtils.dropIndexWithDefaultName(indexMetadata,db);
  }
}",0.9655172413793104
168451,"@Override protected void update(TableName tableName,Collection<Relation> assignments,Collection<Filter> whereClauses,Connection<MongoClient> connection) throws MongoValidationException, ExecutionException, UnsupportedException {
  DB db=connection.getNativeConnection().getDB(tableName.getCatalogName().getName());
  DBCollection coll=db.getCollection(tableName.getName());
  UpdateDBObjectBuilder updateBuilder=new UpdateDBObjectBuilder();
  for (  Relation rel : assignments) {
    updateBuilder.addUpdateRelation(rel.getLeftTerm(),rel.getOperator(),rel.getRightTerm());
  }
  try {
    coll.update(buildFilter(whereClauses),updateBuilder.build(),false,true);
  }
 catch (  MongoException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    throw new ExecutionException(e.getMessage(),e);
  }
}","@Override protected void update(TableName tableName,Collection<Relation> assignments,Collection<Filter> whereClauses,Connection<MongoClient> connection) throws ExecutionException, UnsupportedException {
  DB db=connection.getNativeConnection().getDB(tableName.getCatalogName().getName());
  DBCollection coll=db.getCollection(tableName.getName());
  UpdateDBObjectBuilder updateBuilder=new UpdateDBObjectBuilder();
  for (  Relation rel : assignments) {
    updateBuilder.addUpdateRelation(rel.getLeftTerm(),rel.getOperator(),rel.getRightTerm());
  }
  try {
    coll.update(buildFilter(whereClauses),updateBuilder.build(),false,true);
  }
 catch (  MongoException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    throw new ExecutionException(e.getMessage(),e);
  }
}",0.2972292191435768
168452,"@Override protected void delete(TableName tableName,Collection<Filter> whereClauses,Connection<MongoClient> connection) throws MongoValidationException, ExecutionException, UnsupportedException {
  DB db=connection.getNativeConnection().getDB(tableName.getCatalogName().getName());
  if (db.collectionExists(tableName.getName())) {
    DBCollection coll=db.getCollection(tableName.getName());
    try {
      coll.remove(buildFilter(whereClauses));
    }
 catch (    MongoException e) {
      logger.error(""String_Node_Str"" + e.getMessage());
      throw new MongoDeleteException(e.getMessage(),e);
    }
  }
}","@Override protected void delete(TableName tableName,Collection<Filter> whereClauses,Connection<MongoClient> connection) throws ExecutionException, UnsupportedException {
  DB db=connection.getNativeConnection().getDB(tableName.getCatalogName().getName());
  if (db.collectionExists(tableName.getName())) {
    DBCollection coll=db.getCollection(tableName.getName());
    try {
      coll.remove(buildFilter(whereClauses));
    }
 catch (    MongoException e) {
      logger.error(""String_Node_Str"" + e.getMessage());
      throw new MongoDeleteException(e.getMessage(),e);
    }
  }
}",0.3467336683417085
168453,"public static List<IndexMetadata> discoverIndexes(DBCollection collection){
  List<DBObject> indexInfo=collection.getIndexInfo();
  String db=collection.getDB().getName();
  String collName=collection.getName();
  List<IndexMetadata> indexMetadataList=new ArrayList<>(indexInfo.size());
  for (  DBObject dbObject : indexInfo) {
    BasicDBObject key=(BasicDBObject)dbObject.get(""String_Node_Str"");
    IndexMetadataBuilder indexMetadataBuilder=new IndexMetadataBuilder(db,collName,(String)dbObject.get(""String_Node_Str""),getIndexType(key));
    for (    String field : key.keySet()) {
      indexMetadataBuilder.addColumn(field,null);
    }
    indexMetadataList.add(indexMetadataBuilder.build());
  }
  return indexMetadataList;
}","/** 
 * Discover the existing indexes stored in the collection.
 * @param collection the collection
 * @return the list of indexMetadata.
 */
public static List<IndexMetadata> discoverIndexes(DBCollection collection){
  List<DBObject> indexInfo=collection.getIndexInfo();
  String db=collection.getDB().getName();
  String collName=collection.getName();
  List<IndexMetadata> indexMetadataList=new ArrayList<>(indexInfo.size());
  for (  DBObject dbObject : indexInfo) {
    BasicDBObject key=(BasicDBObject)dbObject.get(""String_Node_Str"");
    IndexMetadataBuilder indexMetadataBuilder=new IndexMetadataBuilder(db,collName,(String)dbObject.get(""String_Node_Str""),getIndexType(key));
    for (    String field : key.keySet()) {
      indexMetadataBuilder.addColumn(field,null);
    }
    indexMetadataList.add(indexMetadataBuilder.build());
  }
  return indexMetadataList;
}",0.9115815691158156
168454,"/** 
 * Gets the index type.
 * @param key the key
 * @return DEFAULT when involved fields have ascending index. CUSTOM otherwise
 */
private static IndexType getIndexType(BasicDBObject key){
  boolean isDefault=true;
  IndexType indexType;
  Iterator<Object> iterator=key.values().iterator();
  while (iterator.hasNext() && isDefault == true) {
    isDefault=iterator.next().toString().startsWith(""String_Node_Str"");
  }
  if (isDefault) {
    indexType=IndexType.DEFAULT;
  }
 else {
    indexType=IndexType.CUSTOM;
  }
  return indexType;
}","/** 
 * Gets the index type.
 * @param key the key
 * @return DEFAULT when involved fields have ascending index. CUSTOM otherwise
 */
private static IndexType getIndexType(BasicDBObject key){
  boolean isDefault=true;
  IndexType indexType;
  Iterator<Object> iterator=key.values().iterator();
  while (iterator.hasNext() && isDefault) {
    isDefault=iterator.next().toString().startsWith(""String_Node_Str"");
  }
  if (isDefault) {
    indexType=IndexType.DEFAULT;
  }
 else {
    indexType=IndexType.CUSTOM;
  }
  return indexType;
}",0.9925788497217068
168455,"public static List<String> discoverField(DBCollection collection){
  String map=""String_Node_Str"";
  String reduce=""String_Node_Str"";
  MapReduceCommand mapReduceCommand=new MapReduceCommand(collection,map,reduce,null,OutputType.INLINE,null);
  DBObject getFieldsCommand=mapReduceCommand.toDBObject();
  CommandResult command=collection.getDB().command(getFieldsCommand);
  BasicDBList results=(BasicDBList)command.get(""String_Node_Str"");
  Set<String> fields=new HashSet<>();
  if (results != null) {
    for (    Object object : results) {
      DBObject bson=(DBObject)object;
      fields.add((String)bson.get(""String_Node_Str""));
    }
  }
  return new ArrayList<String>(fields);
}","/** 
 * Discover the existing fields stored in the collection.
 * @param collection the collection
 * @return the list of fields including the _id
 */
public static List<String> discoverField(DBCollection collection){
  String map=""String_Node_Str"";
  String reduce=""String_Node_Str"";
  MapReduceCommand mapReduceCommand=new MapReduceCommand(collection,map,reduce,null,OutputType.INLINE,null);
  DBObject getFieldsCommand=mapReduceCommand.toDBObject();
  CommandResult command=collection.getDB().command(getFieldsCommand);
  BasicDBList results=(BasicDBList)command.get(""String_Node_Str"");
  Set<String> fields=new HashSet<>();
  if (results != null) {
    for (    Object object : results) {
      DBObject bson=(DBObject)object;
      fields.add((String)bson.get(""String_Node_Str""));
    }
  }
  return new ArrayList<String>(fields);
}",0.9008535784635588
168456,"private static DBObject getCustomIndexDBObject(IndexMetadata indexMetadata) throws MongoValidationException {
  DBObject indexDBObject=new BasicDBObject();
  Map<String,Selector> options=SelectorOptionsUtils.processOptions(indexMetadata.getOptions());
  if (options == null) {
    String msg=""String_Node_Str"";
    logger.debug(msg);
    throw new MongoValidationException(msg);
  }
  Selector selector=options.get(INDEX_TYPE.getOptionName());
  if (selector == null) {
    String msg=""String_Node_Str"";
    logger.debug(msg);
    throw new MongoValidationException(msg);
  }
  String indexType=((StringSelector)selector).getValue().trim();
  String[] fields=getCustomIndexDBObjectFields(options,indexType,indexMetadata);
  if (COMPOUND.getIndexType().equals(indexType)) {
    for (    String field : fields) {
      String[] fieldInfo=field.split(""String_Node_Str"");
      if (fieldInfo.length != 2) {
        String msg=""String_Node_Str"";
        logger.debug(msg);
        throw new MongoValidationException(msg);
      }
      int order=fieldInfo[1].trim().equals(""String_Node_Str"") ? 1 : -1;
      indexDBObject.put(fieldInfo[0],order);
    }
  }
 else {
    if (fields.length != 1) {
      String msg=""String_Node_Str"" + indexType + ""String_Node_Str"";
      logger.debug(msg);
      throw new MongoValidationException(msg);
    }
    String mongoIndexType;
    if (CustomMongoIndexType.HASHED.getIndexType().equals(indexType)) {
      mongoIndexType=""String_Node_Str"";
    }
 else     if (GEOSPATIAL_SPHERE.getIndexType().equals(indexType)) {
      mongoIndexType=""String_Node_Str"";
    }
 else     if (GEOSPATIAL_FLAT.getIndexType().equals(indexType)) {
      mongoIndexType=""String_Node_Str"";
    }
 else {
      throw new MongoValidationException(""String_Node_Str"" + indexType + ""String_Node_Str"");
    }
    indexDBObject.put(fields[0],mongoIndexType);
  }
  return indexDBObject;
}","private static DBObject getCustomIndexDBObject(IndexMetadata indexMetadata) throws MongoValidationException {
  DBObject indexDBObject=new BasicDBObject();
  Map<String,Selector> options=SelectorOptionsUtils.processOptions(indexMetadata.getOptions());
  if (options == null) {
    String msg=""String_Node_Str"";
    LOGGER.debug(msg);
    throw new MongoValidationException(msg);
  }
  Selector selector=options.get(INDEX_TYPE.getOptionName());
  if (selector == null) {
    String msg=""String_Node_Str"";
    LOGGER.debug(msg);
    throw new MongoValidationException(msg);
  }
  String indexType=((StringSelector)selector).getValue().trim();
  String[] fields=getCustomIndexDBObjectFields(options,indexType,indexMetadata);
  if (COMPOUND.getIndexType().equals(indexType)) {
    for (    String field : fields) {
      String[] fieldInfo=field.split(""String_Node_Str"");
      if (fieldInfo.length != 2) {
        String msg=""String_Node_Str"";
        LOGGER.debug(msg);
        throw new MongoValidationException(msg);
      }
      int order=fieldInfo[1].trim().equals(""String_Node_Str"") ? 1 : -1;
      indexDBObject.put(fieldInfo[0],order);
    }
  }
 else {
    if (fields.length != 1) {
      String msg=""String_Node_Str"" + indexType + ""String_Node_Str"";
      LOGGER.debug(msg);
      throw new MongoValidationException(msg);
    }
    String mongoIndexType;
    if (CustomMongoIndexType.HASHED.getIndexType().equals(indexType)) {
      mongoIndexType=""String_Node_Str"";
    }
 else     if (GEOSPATIAL_SPHERE.getIndexType().equals(indexType)) {
      mongoIndexType=""String_Node_Str"";
    }
 else     if (GEOSPATIAL_FLAT.getIndexType().equals(indexType)) {
      mongoIndexType=""String_Node_Str"";
    }
 else {
      throw new MongoValidationException(""String_Node_Str"" + indexType + ""String_Node_Str"");
    }
    indexDBObject.put(fields[0],mongoIndexType);
  }
  return indexDBObject;
}",0.9873150105708244
168457,"/** 
 * Drop index with the mongo default name. The name is created based on the corresponding index type.
 * @param indexMetadata the index metadata
 * @param db the db
 * @throws ExecutionException if an error exist when running the db command
 */
public static void dropIndexWithDefaultName(IndexMetadata indexMetadata,DB db) throws ExecutionException {
  if (indexMetadata.getType() == IndexType.DEFAULT) {
    DBObject indexDBObject=new BasicDBObject();
    for (    ColumnMetadata columnMeta : indexMetadata.getColumns().values()) {
      indexDBObject.put(columnMeta.getName().getName(),1);
    }
    try {
      db.getCollection(indexMetadata.getName().getTableName().getName()).dropIndex(indexDBObject);
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"" + indexDBObject + ""String_Node_Str""+ e.getMessage());
      throw new ExecutionException(e.getMessage(),e);
    }
  }
 else   if (indexMetadata.getType() == IndexType.FULL_TEXT) {
    String defaultTextIndexName;
    StringBuffer strBuf=new StringBuffer();
    int colNumber=0;
    int columnSize=indexMetadata.getColumns().size();
    for (    ColumnMetadata columnMeta : indexMetadata.getColumns().values()) {
      strBuf.append(columnMeta.getName().getName()).append(""String_Node_Str"");
      if (++colNumber != columnSize) {
        strBuf.append(""String_Node_Str"");
      }
    }
    defaultTextIndexName=strBuf.toString();
    try {
      db.getCollection(indexMetadata.getName().getTableName().getName()).dropIndex(defaultTextIndexName);
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"" + defaultTextIndexName + ""String_Node_Str""+ e.getMessage());
      throw new ExecutionException(e.getMessage(),e);
    }
  }
 else {
    throw new MongoValidationException(""String_Node_Str"" + indexMetadata.getType().toString());
  }
}","/** 
 * Drop index with the mongo default name. The name is created based on the corresponding index type.
 * @param indexMetadata the index metadata
 * @param db the db
 * @throws ExecutionException if an error exist when running the db command
 */
public static void dropIndexWithDefaultName(IndexMetadata indexMetadata,DB db) throws ExecutionException {
  if (indexMetadata.getType() == IndexType.DEFAULT) {
    DBObject indexDBObject=new BasicDBObject();
    for (    ColumnMetadata columnMeta : indexMetadata.getColumns().values()) {
      indexDBObject.put(columnMeta.getName().getName(),1);
    }
    try {
      db.getCollection(indexMetadata.getName().getTableName().getName()).dropIndex(indexDBObject);
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"" + indexDBObject + ""String_Node_Str""+ e.getMessage());
      throw new ExecutionException(e.getMessage(),e);
    }
  }
 else   if (indexMetadata.getType() == IndexType.FULL_TEXT) {
    String defaultTextIndexName;
    StringBuffer strBuf=new StringBuffer();
    int colNumber=0;
    int columnSize=indexMetadata.getColumns().size();
    for (    ColumnMetadata columnMeta : indexMetadata.getColumns().values()) {
      strBuf.append(columnMeta.getName().getName()).append(""String_Node_Str"");
      if (++colNumber != columnSize) {
        strBuf.append(""String_Node_Str"");
      }
    }
    defaultTextIndexName=strBuf.toString();
    try {
      db.getCollection(indexMetadata.getName().getTableName().getName()).dropIndex(defaultTextIndexName);
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"" + defaultTextIndexName + ""String_Node_Str""+ e.getMessage());
      throw new ExecutionException(e.getMessage(),e);
    }
  }
 else {
    throw new MongoValidationException(""String_Node_Str"" + indexMetadata.getType().toString());
  }
}",0.9934533551554828
168458,"/** 
 * Creates the Mongo index based on the index metadata options.
 * @param indexMetadata the index metadata
 * @return the Mongo index
 * @throws MongoValidationException the unsupported exception
 */
public static DBObject getIndexDBObject(IndexMetadata indexMetadata) throws MongoValidationException {
  IndexType indexType=indexMetadata.getType();
  DBObject indexDBObject=new BasicDBObject();
  if (indexType == IndexType.DEFAULT) {
    for (    ColumnMetadata columnMeta : indexMetadata.getColumns().values()) {
      indexDBObject.put(columnMeta.getName().getName(),1);
    }
  }
 else   if (indexType == IndexType.FULL_TEXT) {
    for (    ColumnMetadata columnMeta : indexMetadata.getColumns().values()) {
      indexDBObject.put(columnMeta.getName().getName(),""String_Node_Str"");
    }
  }
 else   if (indexMetadata.getType() == IndexType.CUSTOM) {
    indexDBObject=getCustomIndexDBObject(indexMetadata);
  }
 else {
    String msg=""String_Node_Str"" + indexMetadata.getType().toString() + ""String_Node_Str"";
    logger.error(msg);
    throw new MongoValidationException(msg);
  }
  return indexDBObject;
}","/** 
 * Creates the Mongo index based on the index metadata options.
 * @param indexMetadata the index metadata
 * @return the Mongo index
 * @throws MongoValidationException the unsupported exception
 */
public static DBObject getIndexDBObject(IndexMetadata indexMetadata) throws MongoValidationException {
  IndexType indexType=indexMetadata.getType();
  DBObject indexDBObject=new BasicDBObject();
  if (indexType == IndexType.DEFAULT) {
    for (    ColumnMetadata columnMeta : indexMetadata.getColumns().values()) {
      indexDBObject.put(columnMeta.getName().getName(),1);
    }
  }
 else   if (indexType == IndexType.FULL_TEXT) {
    for (    ColumnMetadata columnMeta : indexMetadata.getColumns().values()) {
      indexDBObject.put(columnMeta.getName().getName(),""String_Node_Str"");
    }
  }
 else   if (indexMetadata.getType() == IndexType.CUSTOM) {
    indexDBObject=getCustomIndexDBObject(indexMetadata);
  }
 else {
    String msg=""String_Node_Str"" + indexMetadata.getType().toString() + ""String_Node_Str"";
    LOGGER.error(msg);
    throw new MongoValidationException(msg);
  }
  return indexDBObject;
}",0.9946380697050938
168459,"/** 
 * Adds an update relation.
 * @param left the left selector
 * @param operator the operator
 * @param right the right selector
 * @throws ExecutionException the execution exception
 */
public void addUpdateRelation(Selector left,Operator operator,Selector right) throws ExecutionException {
  BasicDBObject basicDBObject;
switch (operator) {
case EQ:
case ASSIGN:
    if (containsAnInnerRelation(left,right)) {
      Relation innerRelation=((RelationSelector)right).getRelation();
      addUpdateRelation(innerRelation.getLeftTerm(),innerRelation.getOperator(),innerRelation.getRightTerm());
    }
 else {
      if (relations.containsField(SET_COMMAND)) {
        basicDBObject=(BasicDBObject)relations.get(SET_COMMAND);
        basicDBObject.putAll(getBasicRelation(left,right));
      }
 else {
        basicDBObject=new BasicDBObject();
        basicDBObject.putAll(getBasicRelation(left,right));
        relations.put(SET_COMMAND,basicDBObject);
      }
    }
  break;
case ADD:
if (relations.containsField(INCREMENT_COMMAND)) {
  basicDBObject=(BasicDBObject)relations.get(INCREMENT_COMMAND);
  basicDBObject.putAll(getIncrementalRelation(left,right,false));
}
 else {
  basicDBObject=new BasicDBObject();
  basicDBObject.putAll(getIncrementalRelation(left,right,false));
  relations.put(INCREMENT_COMMAND,basicDBObject);
}
break;
case SUBTRACT:
if (relations.containsField(INCREMENT_COMMAND)) {
basicDBObject=(BasicDBObject)relations.get(INCREMENT_COMMAND);
basicDBObject.putAll(getIncrementalRelation(left,right,true));
}
 else {
basicDBObject=new BasicDBObject();
basicDBObject.putAll(getIncrementalRelation(left,right,true));
relations.put(INCREMENT_COMMAND,basicDBObject);
}
break;
case MULTIPLICATION:
if (relations.containsField(MUTLTIPLICATION_COMMAND)) {
basicDBObject=(BasicDBObject)relations.get(MUTLTIPLICATION_COMMAND);
basicDBObject.putAll(getNumberRelation(left,right));
}
 else {
basicDBObject=new BasicDBObject();
basicDBObject.putAll(getNumberRelation(left,right));
relations.put(MUTLTIPLICATION_COMMAND,basicDBObject);
}
break;
default :
String msg=""String_Node_Str"" + operator + ""String_Node_Str"";
logger.error(msg);
throw new MongoValidationException(msg);
}
}","/** 
 * Adds an update relation.
 * @param left the left selector
 * @param operator the operator
 * @param right the right selector
 * @throws ExecutionException the execution exception
 */
public void addUpdateRelation(Selector left,Operator operator,Selector right) throws ExecutionException {
  BasicDBObject basicDBObject;
switch (operator) {
case EQ:
case ASSIGN:
    if (containsAnInnerRelation(left,right)) {
      Relation innerRelation=((RelationSelector)right).getRelation();
      addUpdateRelation(innerRelation.getLeftTerm(),innerRelation.getOperator(),innerRelation.getRightTerm());
    }
 else {
      if (relations.containsField(SET_COMMAND)) {
        basicDBObject=(BasicDBObject)relations.get(SET_COMMAND);
        basicDBObject.putAll(getBasicRelation(left,right));
      }
 else {
        basicDBObject=new BasicDBObject();
        basicDBObject.putAll(getBasicRelation(left,right));
        relations.put(SET_COMMAND,basicDBObject);
      }
    }
  break;
case ADD:
if (relations.containsField(INCREMENT_COMMAND)) {
  basicDBObject=(BasicDBObject)relations.get(INCREMENT_COMMAND);
  basicDBObject.putAll(getIncrementalRelation(left,right,false));
}
 else {
  basicDBObject=new BasicDBObject();
  basicDBObject.putAll(getIncrementalRelation(left,right,false));
  relations.put(INCREMENT_COMMAND,basicDBObject);
}
break;
case SUBTRACT:
if (relations.containsField(INCREMENT_COMMAND)) {
basicDBObject=(BasicDBObject)relations.get(INCREMENT_COMMAND);
basicDBObject.putAll(getIncrementalRelation(left,right,true));
}
 else {
basicDBObject=new BasicDBObject();
basicDBObject.putAll(getIncrementalRelation(left,right,true));
relations.put(INCREMENT_COMMAND,basicDBObject);
}
break;
case MULTIPLICATION:
if (relations.containsField(MUTLTIPLICATION_COMMAND)) {
basicDBObject=(BasicDBObject)relations.get(MUTLTIPLICATION_COMMAND);
basicDBObject.putAll(getNumberRelation(left,right));
}
 else {
basicDBObject=new BasicDBObject();
basicDBObject.putAll(getNumberRelation(left,right));
relations.put(MUTLTIPLICATION_COMMAND,basicDBObject);
}
break;
default :
String msg=""String_Node_Str"" + operator + ""String_Node_Str"";
LOGGER.error(msg);
throw new MongoValidationException(msg);
}
}",0.9972627737226276
168460,"private boolean containsAnInnerRelation(Selector left,Selector right) throws ExecutionException {
  if (right.getType() == SelectorType.RELATION) {
    String column=(String)SelectorHelper.getRestrictedValue(left,SelectorType.COLUMN);
    RelationSelector rightSelector=(RelationSelector)right;
    String innerRelationColumn=(String)SelectorHelper.getRestrictedValue(rightSelector.getRelation().getLeftTerm(),SelectorType.COLUMN);
    if (column.equals(innerRelationColumn)) {
      return true;
    }
 else {
      String msg=""String_Node_Str"" + column + ""String_Node_Str""+ innerRelationColumn;
      logger.error(msg);
      throw new MongoValidationException(msg);
    }
  }
  return false;
}","private boolean containsAnInnerRelation(Selector left,Selector right) throws ExecutionException {
  if (right.getType() == SelectorType.RELATION) {
    String column=(String)SelectorHelper.getRestrictedValue(left,SelectorType.COLUMN);
    RelationSelector rightSelector=(RelationSelector)right;
    String innerRelationColumn=(String)SelectorHelper.getRestrictedValue(rightSelector.getRelation().getLeftTerm(),SelectorType.COLUMN);
    if (column.equals(innerRelationColumn)) {
      return true;
    }
 else {
      String msg=""String_Node_Str"" + column + ""String_Node_Str""+ innerRelationColumn;
      LOGGER.error(msg);
      throw new MongoValidationException(msg);
    }
  }
  return false;
}",0.9913793103448276
168461,"private DBObject getNumberRelation(Selector left,Selector right) throws MongoValidationException, ExecutionException {
  Number number=retrieveNumberDataType(right,false);
  return new BasicDBObject((String)SelectorHelper.getRestrictedValue(left,SelectorType.COLUMN),number);
}","private DBObject getNumberRelation(Selector left,Selector right) throws ExecutionException {
  Number number=retrieveNumberDataType(right,false);
  return new BasicDBObject((String)SelectorHelper.getRestrictedValue(left,SelectorType.COLUMN),number);
}",0.9507575757575758
168462,"/** 
 * Checks if the column type is supported in the keys.
 * @param columnType the columnType type
 * @param cellValue the cell value
 * @throws MongoValidationException if the type is not supported
 * @throws ExecutionException
 */
private static Number retrieveNumberDataType(Selector selector,boolean isDecrement) throws MongoValidationException, ExecutionException {
  Number number=null;
switch (selector.getType()) {
case FLOATING_POINT:
    double dValue=(double)SelectorHelper.getRestrictedValue(selector,SelectorType.FLOATING_POINT);
  number=(isDecrement) ? -dValue : dValue;
break;
case INTEGER:
long iValue=(long)SelectorHelper.getRestrictedValue(selector,SelectorType.INTEGER);
number=(isDecrement) ? -iValue : iValue;
break;
default :
String msg=""String_Node_Str"" + selector.getType().toString();
logger.error(msg);
throw new MongoValidationException(msg);
}
return number;
}","/** 
 * Checks if the column type is supported in the keys.
 * @param columnType the columnType type
 * @param cellValue the cell value
 * @throws ExecutionException if the conversion fails
 */
private static Number retrieveNumberDataType(Selector selector,boolean isDecrement) throws ExecutionException {
  Number number=null;
switch (selector.getType()) {
case FLOATING_POINT:
    double dValue=(double)SelectorHelper.getRestrictedValue(selector,SelectorType.FLOATING_POINT);
  number=(isDecrement) ? -dValue : dValue;
break;
case INTEGER:
long iValue=(long)SelectorHelper.getRestrictedValue(selector,SelectorType.INTEGER);
number=(isDecrement) ? -iValue : iValue;
break;
default :
String msg=""String_Node_Str"" + selector.getType().toString();
LOGGER.error(msg);
throw new MongoValidationException(msg);
}
return number;
}",0.9247813411078716
168463,"private DBObject getIncrementalRelation(Selector left,Selector right,boolean isDecrement) throws ExecutionException, MongoValidationException {
  Number number=retrieveNumberDataType(right,isDecrement);
  return new BasicDBObject((String)SelectorHelper.getRestrictedValue(left,SelectorType.COLUMN),number);
}","private DBObject getIncrementalRelation(Selector left,Selector right,boolean isDecrement) throws ExecutionException {
  Number number=retrieveNumberDataType(right,isDecrement);
  return new BasicDBObject((String)SelectorHelper.getRestrictedValue(left,SelectorType.COLUMN),number);
}",0.9559322033898304
168464,"/** 
 * Instantiates a new aggregation logical workflow executor.
 * @param logicalWorkflowParsed the logical workflow parsed
 * @throws MongoValidationException if the query specified in the logical workflow is not supported
 * @throws ExecutionException if the execution fails
 * @throws UnsupportedException if the specified operation is not supported.
 */
public AggregationLogicalWorkflowExecutor(ProjectParsed logicalWorkflowParsed) throws MongoValidationException, ExecutionException, UnsupportedException {
  super(logicalWorkflowParsed);
}","/** 
 * Instantiates a new aggregation logical workflow executor.
 * @param logicalWorkflowParsed the logical workflow parsed
 * @throws ExecutionException if the execution fails or if the query specified in the logical workflow is not supported
 * @throws UnsupportedException if the specified operation is not supported.
 */
public AggregationLogicalWorkflowExecutor(ProjectParsed logicalWorkflowParsed) throws ExecutionException, UnsupportedException {
  super(logicalWorkflowParsed);
}",0.8582449373191899
168465,"@Override protected void buildQuery() throws MongoValidationException, ExecutionException, UnsupportedException {
  query=new ArrayList<DBObject>();
  if (logicalWorkflowData.getProject() != null) {
    query.add(buildProject(true));
  }
  if (!logicalWorkflowData.getFilter().isEmpty()) {
    query.add(buildFilter(true));
  }
  if (logicalWorkflowData.getGroupBy() != null) {
    query.add(buildGroupBy());
  }
  if (logicalWorkflowData.getOrderBy() != null) {
    query.add(buildOrderBy(true));
  }
  if (logicalWorkflowData.getLimit() != null) {
    query.add(buildLimit());
  }
}","@Override protected void buildQuery() throws ExecutionException, UnsupportedException {
  query=new ArrayList<DBObject>();
  if (logicalWorkflowData.getProject() != null) {
    query.add(buildProject(true));
  }
  if (!logicalWorkflowData.getFilter().isEmpty()) {
    query.add(buildFilter(true));
  }
  if (logicalWorkflowData.getGroupBy() != null) {
    query.add(buildGroupBy());
  }
  if (logicalWorkflowData.getOrderBy() != null) {
    query.add(buildOrderBy(true));
  }
  if (logicalWorkflowData.getLimit() != null) {
    query.add(buildLimit());
  }
}",0.9772329246935202
168466,"/** 
 * Execute an aggregation query.
 * @param mongoClient the MongoDB client.
 * @return the Crossdata ResultSet.
 * @throws ExecutionException if the query specified in the logical workflow is not supported.
 * @throws MongoExecutionException if the execution fails.
 */
@Override public ResultSet executeQuery(MongoClient mongoClient) throws MongoExecutionException, ExecutionException {
  DB db=mongoClient.getDB(logicalWorkflowData.getProject().getCatalogName());
  DBCollection collection=db.getCollection(logicalWorkflowData.getProject().getTableName().getName());
  ResultSet resultSet=new ResultSet();
  resultSet.setColumnMetadata(MetaResultUtils.createMetadata(logicalWorkflowData.getProject(),logicalWorkflowData.getSelect()));
  try {
    int stage=1;
    for (    DBObject aggregationStage : query) {
      logger.debug(""String_Node_Str"" + (stage++) + ""String_Node_Str""+ aggregationStage);
    }
    AggregationOutput aggOutput=collection.aggregate(query);
    for (    DBObject result : aggOutput.results()) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + result);
      }
      resultSet.add(MetaResultUtils.createRowWithAlias(result,logicalWorkflowData.getSelect()));
    }
  }
 catch (  MongoException mongoException) {
    logger.error(""String_Node_Str"" + mongoException.getMessage());
    throw new MongoExecutionException(mongoException.getMessage(),mongoException);
  }
  return resultSet;
}","/** 
 * Execute an aggregation query.
 * @param mongoClient the MongoDB client.
 * @return the Crossdata ResultSet.
 * @throws ExecutionException if the execution fails.
 */
@Override public ResultSet executeQuery(MongoClient mongoClient) throws ExecutionException {
  DB db=mongoClient.getDB(logicalWorkflowData.getProject().getCatalogName());
  DBCollection collection=db.getCollection(logicalWorkflowData.getProject().getTableName().getName());
  ResultSet resultSet=new ResultSet();
  resultSet.setColumnMetadata(MetaResultUtils.createMetadata(logicalWorkflowData.getProject(),logicalWorkflowData.getSelect()));
  try {
    int stage=1;
    for (    DBObject aggregationStage : query) {
      logger.debug(""String_Node_Str"" + (stage++) + ""String_Node_Str""+ aggregationStage);
    }
    AggregationOutput aggOutput=collection.aggregate(query);
    for (    DBObject result : aggOutput.results()) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + result);
      }
      resultSet.add(MetaResultUtils.createRowWithAlias(result,logicalWorkflowData.getSelect()));
    }
  }
 catch (  MongoException mongoException) {
    logger.error(""String_Node_Str"" + mongoException.getMessage());
    throw new MongoExecutionException(mongoException.getMessage(),mongoException);
  }
  return resultSet;
}",0.9548247199132636
168467,"/** 
 * Instantiates a new basic logical workflow executor.
 * @param logicalWorkflowParsed the logical workflow parsed
 * @throws MongoValidationException if the query specified in the logical workflow is not supported
 * @throws ExecutionException if the execution fails
 * @throws UnsupportedException if the specified operation is not supported.
 */
public BasicLogicalWorkflowExecutor(ProjectParsed logicalWorkflowParsed) throws MongoValidationException, ExecutionException, UnsupportedException {
  super(logicalWorkflowParsed);
}","/** 
 * Instantiates a new basic logical workflow executor.
 * @param logicalWorkflowParsed the logical workflow parsed
 * @throws ExecutionException if the execution fails or the query specified in the logical workflow is not supported
 * @throws UnsupportedException if the specified operation is not supported.
 */
public BasicLogicalWorkflowExecutor(ProjectParsed logicalWorkflowParsed) throws ExecutionException, UnsupportedException {
  super(logicalWorkflowParsed);
}",0.8514851485148515
168468,"/** 
 * Execute an usual query.
 * @param mongoClient the MongoDB client.
 * @return the Crossdata ResultSet.
 * @throws MongoValidationException if the query specified in the logical workflow is not supported.
 * @throws ExecutionException if the execution fails.
 */
public ResultSet executeQuery(MongoClient mongoClient) throws ExecutionException, MongoValidationException {
  DB db=mongoClient.getDB(logicalWorkflowData.getProject().getCatalogName());
  DBCollection collection=db.getCollection(logicalWorkflowData.getProject().getTableName().getName());
  ResultSet resultSet=new ResultSet();
  resultSet.setColumnMetadata(MetaResultUtils.createMetadata(logicalWorkflowData.getProject(),logicalWorkflowData.getSelect()));
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + query.get(0) + ""String_Node_Str""+ buildProject(false));
  }
  DBCursor cursor=collection.find(query.get(0),buildProject(false));
  if (logicalWorkflowData.getOrderBy() != null) {
    cursor=cursor.sort(buildOrderBy(false));
  }
  if (logicalWorkflowData.getLimit() != null) {
    cursor=cursor.limit(logicalWorkflowData.getLimit().getLimit());
  }
  DBObject rowDBObject;
  try {
    while (cursor.hasNext()) {
      rowDBObject=cursor.next();
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + rowDBObject);
      }
      resultSet.add(MetaResultUtils.createRowWithAlias(rowDBObject,logicalWorkflowData.getSelect()));
    }
  }
 catch (  MongoException e) {
    logger.error(""String_Node_Str"" + query.get(0) + ""String_Node_Str""+ buildProject(false)+ ""String_Node_Str""+ e.getMessage());
    throw new MongoExecutionException(e.getMessage(),e);
  }
 finally {
    cursor.close();
  }
  return resultSet;
}","/** 
 * Execute an usual query.
 * @param mongoClient the MongoDB client.
 * @return the Crossdata ResultSet.
 * @throws MongoValidationException .
 * @throws ExecutionException if the execution fails or the query specified in the logical workflow is not supported.
 */
public ResultSet executeQuery(MongoClient mongoClient) throws ExecutionException {
  DB db=mongoClient.getDB(logicalWorkflowData.getProject().getCatalogName());
  DBCollection collection=db.getCollection(logicalWorkflowData.getProject().getTableName().getName());
  ResultSet resultSet=new ResultSet();
  resultSet.setColumnMetadata(MetaResultUtils.createMetadata(logicalWorkflowData.getProject(),logicalWorkflowData.getSelect()));
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + query.get(0) + ""String_Node_Str""+ buildProject(false));
  }
  DBCursor cursor=collection.find(query.get(0),buildProject(false));
  if (logicalWorkflowData.getOrderBy() != null) {
    cursor=cursor.sort(buildOrderBy(false));
  }
  if (logicalWorkflowData.getLimit() != null) {
    cursor=cursor.limit(logicalWorkflowData.getLimit().getLimit());
  }
  DBObject rowDBObject;
  try {
    while (cursor.hasNext()) {
      rowDBObject=cursor.next();
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + rowDBObject);
      }
      resultSet.add(MetaResultUtils.createRowWithAlias(rowDBObject,logicalWorkflowData.getSelect()));
    }
  }
 catch (  MongoException e) {
    logger.error(""String_Node_Str"" + query.get(0) + ""String_Node_Str""+ buildProject(false)+ ""String_Node_Str""+ e.getMessage());
    throw new MongoExecutionException(e.getMessage(),e);
  }
 finally {
    cursor.close();
  }
  return resultSet;
}",0.1638006412124745
168469,"/** 
 * Instantiates a new Mongo query engine.
 * @param project the initial step of the logical workflow
 * @param connection the connection
 * @return the query result
 * @throws UnsupportedException if the specified operation is not supported
 * @throws ExecutionException 
 */
@Override public QueryResult execute(Project project,Connection<MongoClient> connection) throws UnsupportedException, ExecutionException {
  LogicalWorkflowExecutor executor=new LogicalWorkflowExecutor(project);
  ResultSet resultSet=executor.executeQuery((MongoClient)connection.getNativeConnection());
  return QueryResult.createQueryResult(resultSet);
}","/** 
 * Instantiates a new Mongo query engine.
 * @param project the initial step of the logical workflow
 * @param connection the connection
 * @return the query result
 * @throws UnsupportedException if the specified operation is not supported
 * @throws ExecutionException
 */
@Override public QueryResult execute(Project project,Connection<MongoClient> connection) throws UnsupportedException, ExecutionException {
  LogicalWorkflowExecutor executor=new LogicalWorkflowExecutor(project);
  ResultSet resultSet=executor.executeQuery((MongoClient)connection.getNativeConnection());
  return QueryResult.createQueryResult(resultSet);
}",0.9992144540455616
168470,"public static DBObject buildRenameColumnDBObject(String oldName,String newName){
  return new BasicDBObject(RENAME_COMMAND,new BasicDBObject(oldName,newName));
}","/** 
 * Builds a rename column DBOject.
 * @param oldName the old name
 * @param newName the new name
 * @return the DBObject
 */
public static DBObject buildRenameColumnDBObject(String oldName,String newName){
  return new BasicDBObject(RENAME_COMMAND,new BasicDBObject(oldName,newName));
}",0.7123893805309734
168471,"public static DBObject buildDropColumnDBObject(String name){
  return new BasicDBObject(DROP_COMMAND,new BasicDBObject(name,""String_Node_Str""));
}","/** 
 * Builds a DBObject to drop a column.
 * @param name the column name
 * @return the DBObject
 */
public static DBObject buildDropColumnDBObject(String name){
  return new BasicDBObject(DROP_COMMAND,new BasicDBObject(name,""String_Node_Str""));
}",0.739240506329114
168472,"/** 
 * Adds the update relation.
 * @param left the left selector
 * @param operator the operator
 * @param right the right selector
 * @return a new relation which is needed to manage. Otherwise, a null value is returned
 * @throws UnsupportedException the unsupported exception
 * @throws ExecutionException the execution exception
 */
public Relation addUpdateRelation(Selector left,Operator operator,Selector right) throws UnsupportedException, ExecutionException {
  BasicDBObject basicDBObject;
  Relation relation=null;
switch (operator) {
case EQ:
case ASSIGN:
    if (right.getType() == SelectorType.RELATION) {
      String column=(String)SelectorHelper.getRestrictedValue(left,SelectorType.COLUMN);
      RelationSelector rightSelector=(RelationSelector)right;
      String innerRelationColumn=(String)SelectorHelper.getRestrictedValue(rightSelector.getRelation().getLeftTerm(),SelectorType.COLUMN);
      if (column.equals(innerRelationColumn)) {
        return rightSelector.getRelation();
      }
 else {
        throw new UnsupportedException(""String_Node_Str"" + column + ""String_Node_Str""+ innerRelationColumn);
      }
    }
  if (relations.containsField(SET_COMMAND)) {
    basicDBObject=(BasicDBObject)relations.get(SET_COMMAND);
    basicDBObject.putAll(getBasicRelation(left,right));
  }
 else {
    basicDBObject=new BasicDBObject();
    basicDBObject.putAll(getBasicRelation(left,right));
    relations.put(SET_COMMAND,basicDBObject);
  }
break;
case ADD:
if (relations.containsField(INCREMENT_COMMAND)) {
basicDBObject=(BasicDBObject)relations.get(INCREMENT_COMMAND);
basicDBObject.putAll(getIncrementalRelation(left,right,false));
}
 else {
basicDBObject=new BasicDBObject();
basicDBObject.putAll(getIncrementalRelation(left,right,false));
relations.put(INCREMENT_COMMAND,basicDBObject);
}
break;
case SUBTRACT:
if (relations.containsField(INCREMENT_COMMAND)) {
basicDBObject=(BasicDBObject)relations.get(INCREMENT_COMMAND);
basicDBObject.putAll(getIncrementalRelation(left,right,true));
}
 else {
basicDBObject=new BasicDBObject();
basicDBObject.putAll(getIncrementalRelation(left,right,true));
relations.put(INCREMENT_COMMAND,basicDBObject);
}
break;
case MULTIPLICATION:
if (relations.containsField(MUTLTIPLICATION_COMMAND)) {
basicDBObject=(BasicDBObject)relations.get(MUTLTIPLICATION_COMMAND);
basicDBObject.putAll(getNumberRelation(left,right));
}
 else {
basicDBObject=new BasicDBObject();
basicDBObject.putAll(getNumberRelation(left,right));
relations.put(MUTLTIPLICATION_COMMAND,basicDBObject);
}
break;
case DIVISION:
case DISTINCT:
case BETWEEN:
case MATCH:
case GET:
case GT:
case IN:
case LET:
case LIKE:
case LT:
default :
throw new UnsupportedException(""String_Node_Str"" + operator + ""String_Node_Str"");
}
return relation;
}","/** 
 * Adds an update relation.
 * @param left the left selector
 * @param operator the operator
 * @param right the right selector
 * @return a new relation which is needed to manage. Otherwise, a null value is returned
 * @throws UnsupportedException the unsupported exception
 * @throws ExecutionException the execution exception
 */
public Relation addUpdateRelation(Selector left,Operator operator,Selector right) throws UnsupportedException, ExecutionException {
  BasicDBObject basicDBObject;
  Relation relation=null;
switch (operator) {
case EQ:
case ASSIGN:
    if (containsAnInnerRelation(left,right)) {
      return ((RelationSelector)right).getRelation();
    }
 else {
      if (relations.containsField(SET_COMMAND)) {
        basicDBObject=(BasicDBObject)relations.get(SET_COMMAND);
        basicDBObject.putAll(getBasicRelation(left,right));
      }
 else {
        basicDBObject=new BasicDBObject();
        basicDBObject.putAll(getBasicRelation(left,right));
        relations.put(SET_COMMAND,basicDBObject);
      }
    }
  break;
case ADD:
if (relations.containsField(INCREMENT_COMMAND)) {
  basicDBObject=(BasicDBObject)relations.get(INCREMENT_COMMAND);
  basicDBObject.putAll(getIncrementalRelation(left,right,false));
}
 else {
  basicDBObject=new BasicDBObject();
  basicDBObject.putAll(getIncrementalRelation(left,right,false));
  relations.put(INCREMENT_COMMAND,basicDBObject);
}
break;
case SUBTRACT:
if (relations.containsField(INCREMENT_COMMAND)) {
basicDBObject=(BasicDBObject)relations.get(INCREMENT_COMMAND);
basicDBObject.putAll(getIncrementalRelation(left,right,true));
}
 else {
basicDBObject=new BasicDBObject();
basicDBObject.putAll(getIncrementalRelation(left,right,true));
relations.put(INCREMENT_COMMAND,basicDBObject);
}
break;
case MULTIPLICATION:
if (relations.containsField(MUTLTIPLICATION_COMMAND)) {
basicDBObject=(BasicDBObject)relations.get(MUTLTIPLICATION_COMMAND);
basicDBObject.putAll(getNumberRelation(left,right));
}
 else {
basicDBObject=new BasicDBObject();
basicDBObject.putAll(getNumberRelation(left,right));
relations.put(MUTLTIPLICATION_COMMAND,basicDBObject);
}
break;
default :
throw new UnsupportedException(""String_Node_Str"" + operator + ""String_Node_Str"");
}
return relation;
}",0.8368284401837428
168473,"public DBObject build(){
  return relations;
}","/** 
 * Builds the update DBObject.
 * @return the DB object
 */
public DBObject build(){
  return relations;
}",0.5859872611464968
168474,"public UpdateDBObjectBuilder(){
  relations=new BasicDBObject();
}","/** 
 * Instantiates a new update DBObject builder.
 */
public UpdateDBObjectBuilder(){
  relations=new BasicDBObject();
}",0.7021276595744681
168475,"/** 
 * Checks if the column type is supported in the keys.
 * @param columnType the columnType type
 * @param cellValue the cell value
 * @throws MongoValidationException if the type is not supported
 * @throws ExecutionException
 */
private static Number retrieveNumberDataType(Selector selector,boolean isDecrement) throws MongoValidationException, ExecutionException {
  Number number=null;
switch (selector.getType()) {
case FLOATING_POINT:
    Double dValue=(Double)SelectorHelper.getRestrictedValue(selector,SelectorType.FLOATING_POINT);
  number=(isDecrement) ? -dValue : dValue;
case INTEGER:
Long iValue=(Long)SelectorHelper.getRestrictedValue(selector,SelectorType.INTEGER);
number=(isDecrement) ? -iValue : iValue;
break;
case STRING:
case ASTERISK:
case BOOLEAN:
case COLUMN:
case FUNCTION:
case RELATION:
default :
throw new MongoValidationException(""String_Node_Str"" + selector.getType().toString());
}
return number;
}","/** 
 * Checks if the column type is supported in the keys.
 * @param columnType the columnType type
 * @param cellValue the cell value
 * @throws MongoValidationException if the type is not supported
 * @throws ExecutionException
 */
private static Number retrieveNumberDataType(Selector selector,boolean isDecrement) throws MongoValidationException, ExecutionException {
  Number number=null;
switch (selector.getType()) {
case FLOATING_POINT:
    double dValue=(double)SelectorHelper.getRestrictedValue(selector,SelectorType.FLOATING_POINT);
  number=(isDecrement) ? -dValue : dValue;
break;
case INTEGER:
long iValue=(long)SelectorHelper.getRestrictedValue(selector,SelectorType.INTEGER);
number=(isDecrement) ? -iValue : iValue;
break;
default :
throw new MongoValidationException(""String_Node_Str"" + selector.getType().toString());
}
return number;
}",0.9441340782122905
168476,"/** 
 * Instantiates a new logical workflow executor ready for the execution.
 * @param initialProject the initial project
 * @throws UnsupportedException if the query specified in the logical workflow is not supported
 * @throws ExecutionException 
 */
public LogicalWorkflowExecutor(LogicalStep initialProject) throws UnsupportedException, ExecutionException {
  readLogicalWorkflow(initialProject);
  aggregationRequired();
  buildQuery();
}","/** 
 * Instantiates a new logical workflow executor ready for the execution.
 * @param initialProject the initial project
 * @throws UnsupportedException if the query specified in the logical workflow is not supported
 * @throws ExecutionException
 */
public LogicalWorkflowExecutor(LogicalStep initialProject) throws UnsupportedException, ExecutionException {
  readLogicalWorkflow(initialProject);
  aggregationRequired();
  buildQuery();
}",0.9988726042841036
168477,"/** 
 * Creates the corresponding MongoDB query.
 * @throws MongoValidationException if the query specified in the logical workflow is not supported
 * @throws ExecutionException 
 */
private void buildQuery() throws MongoValidationException, ExecutionException {
  query=new ArrayList<DBObject>();
  if (isAggregationRequired()) {
    if (!filterList.isEmpty()) {
      query.add(buildFilter());
    }
    if (groupBy != null) {
      query.add(buildGroupBy());
    }
    if (limit != null) {
      query.add(buildLimit());
    }
  }
 else {
    query.add(buildFilter());
  }
}","/** 
 * Creates the corresponding MongoDB query.
 * @throws MongoValidationException if the query specified in the logical workflow is not supported
 * @throws ExecutionException
 */
private void buildQuery() throws MongoValidationException, ExecutionException {
  query=new ArrayList<DBObject>();
  if (isAggregationRequired()) {
    if (!filterList.isEmpty()) {
      query.add(buildFilter());
    }
    if (groupBy != null) {
      query.add(buildGroupBy());
    }
    if (limit != null) {
      query.add(buildLimit());
    }
  }
 else {
    query.add(buildFilter());
  }
}",0.9991341991341992
168478,"private List<ColumnMetadata> createMetadata(){
  List<ColumnMetadata> retunColumnMetadata=new ArrayList<>();
  for (  ColumnName colName : select.getColumnMap().keySet()) {
    String field=colName.getName();
    ColumnType colType=select.getTypeMap().get(field);
    colType=updateColumnType(colType);
    ColumnMetadata columnMetadata=new ColumnMetadata(projection.getTableName().getName(),field,colType);
    columnMetadata.setColumnAlias(select.getColumnMap().get(colName));
    retunColumnMetadata.add(columnMetadata);
  }
  return retunColumnMetadata;
}","private List<ColumnMetadata> createMetadata(){
  List<ColumnMetadata> retunColumnMetadata=new ArrayList<>();
  for (  ColumnName colName : select.getColumnMap().keySet()) {
    String field=colName.getName();
    ColumnType colType=select.getTypeMap().get(colName.getQualifiedName());
    colType=updateColumnType(colType);
    ColumnMetadata columnMetadata=new ColumnMetadata(projection.getTableName().getName(),field,colType);
    columnMetadata.setColumnAlias(select.getColumnMap().get(colName));
    retunColumnMetadata.add(columnMetadata);
  }
  return retunColumnMetadata;
}",0.9780509218612818
168479,"public void setFields(HFSPlusCatalogFile cf){
  int i;
  recordTypeField.setText(""String_Node_Str"" + Util.toHexStringBE(cf.getRecordType()));
  fileLockedBox.setSelected(cf.getFileLockedFlag());
  threadExistsBox.setSelected(cf.getThreadExistsFlag());
  reserved1Field.setText(""String_Node_Str"" + Util.toHexStringBE(cf.getReserved1()));
  fileIDField.setText(cf.getFileID().toString());
  createDateField.setText(dti.format(cf.getCreateDateAsDate()));
  contentModifyDateField.setText(dti.format(cf.getContentModDateAsDate()));
  attributesModifyDateField.setText(dti.format(cf.getAttributeModDateAsDate()));
  accessDateField.setText(dti.format(cf.getAccessDateAsDate()));
  backupDateField.setText(dti.format(cf.getBackupDateAsDate()));
  HFSPlusBSDInfo bi=cf.getPermissions();
  permissionsOwnerIDField.setText(""String_Node_Str"" + bi.getOwnerID());
  permissionsGroupIDField.setText(""String_Node_Str"" + bi.getGroupID());
  permissionsAdminFlagsField.setText(""String_Node_Str"" + Util.toHexStringBE(bi.getAdminFlags()));
  permissionsAdminFlagsArchivedBox.setSelected(bi.getAdminArchivedFlag());
  permissionsAdminFlagsImmutableBox.setSelected(bi.getAdminImmutableFlag());
  permissionsAdminFlagsAppendBox.setSelected(bi.getAdminAppendFlag());
  permissionsOwnerFlagsField.setText(""String_Node_Str"" + Util.toHexStringBE(bi.getOwnerFlags()));
  permissionsOwnerFlagsNodumpBox.setSelected(bi.getOwnerNodumpFlag());
  permissionsOwnerFlagsImmutableBox.setSelected(bi.getOwnerImmutableFlag());
  permissionsOwnerFlagsAppendBox.setSelected(bi.getOwnerAppendFlag());
  permissionsOwnerFlagsOpaqueBox.setSelected(bi.getOwnerOpaqueFlag());
  permissionsOwnerFlagsCompressedBox.setSelected(bi.getOwnerCompressedFlag());
  permissionsFileModeField.setText(bi.getFileModeString());
  permissionsFileModeSUIDBox.setSelected(bi.getFileModeSetUserID());
  permissionsFileModeSGIDBox.setSelected(bi.getFileModeSetGroupID());
  permissionsFileModeSTXTBox.setSelected(bi.getFileModeSticky());
  permissionsSpecialField.setText(""String_Node_Str"" + Util.toHexStringBE(bi.getSpecial()));
  FileInfo ui=cf.getUserInfo();
  userInfoFileTypeField.setText(""String_Node_Str"" + ui.getFileType().toString() + ""String_Node_Str""+ Util.toHexStringBE(ui.getFileType().getOSType().getFourCharCode())+ ""String_Node_Str"");
  userInfoFileCreatorField.setText(""String_Node_Str"" + ui.getFileCreator().toString() + ""String_Node_Str""+ Util.toHexStringBE(ui.getFileCreator().getOSType().getFourCharCode())+ ""String_Node_Str"");
  userInfoFinderFlagsIsOnDeskBox.setSelected(ui.getFinderFlagIsOnDesk());
  int[] rgb=ui.getFinderFlagColorRGB();
  if (originalOpaqueness == null)   originalOpaqueness=userInfoFinderFlagsColorField.isOpaque();
  if (originalColor == null)   originalColor=userInfoFinderFlagsColorField.getBackground();
  if (rgb != null) {
    userInfoFinderFlagsColorField.setOpaque(true);
    userInfoFinderFlagsColorField.setBackground(new Color(rgb[0],rgb[1],rgb[2]));
  }
 else {
    userInfoFinderFlagsColorField.setOpaque(originalOpaqueness);
    userInfoFinderFlagsColorField.setBackground(originalColor);
  }
  userInfoFinderFlagsColorField.setText(""String_Node_Str"" + ui.getFinderFlagColor());
  userInfoFinderFlagsIsSharedBox.setSelected(ui.getFinderFlagIsShared());
  userInfoFinderFlagsHasNoINITsBox.setSelected(ui.getFinderFlagHasNoINITs());
  userInfoFinderFlagsHasBeenInitedBox.setSelected(ui.getFinderFlagHasBeenInited());
  userInfoFinderFlagsHasCustomIconBox.setSelected(ui.getFinderFlagHasCustomIcon());
  userInfoFinderFlagsIsStationeryBox.setSelected(ui.getFinderFlagIsStationery());
  userInfoFinderFlagsNameLockedBox.setSelected(ui.getFinderFlagNameLocked());
  userInfoFinderFlagsHasBundleBox.setSelected(ui.getFinderFlagHasBundle());
  userInfoFinderFlagsIsInvisibleBox.setSelected(ui.getFinderFlagIsInvisible());
  userInfoFinderFlagsIsAliasBox.setSelected(ui.getFinderFlagIsAlias());
  userInfoLocationField.setText(ui.getLocation().toString());
  userInfoReservedField.setText(""String_Node_Str"" + Util.toHexStringBE(ui.getReservedField()));
  ExtendedFileInfo ei=cf.getFinderInfo();
  finderInfoReserved1Field.setText(""String_Node_Str"" + Util.toHexStringBE(ei.getReserved1()));
  finderInfoExtendedFinderFlagsExtendedFlagsAreInvalidBox.setSelected(ei.getExtendedFinderFlagExtendedFlagsAreInvalid());
  finderInfoExtendedFinderFlagsExtendedFlagHasCustomBadgeBox.setSelected(ei.getExtendedFinderFlagExtendedFlagHasCustomBadge());
  finderInfoExtendedFinderFlagsExtendedFlagHasRoutingInfoBox.setSelected(ei.getExtendedFinderFlagExtendedFlagHasRoutingInfo());
  finderInfoReserved2Field.setText(""String_Node_Str"" + Util.toHexStringBE(ei.getReserved2()));
  finderInfoPutAwayFolderIDField.setText(""String_Node_Str"" + ei.getPutAwayFolderID());
  textEncodingField.setText(""String_Node_Str"" + cf.getTextEncoding());
  reserved2Field.setText(""String_Node_Str"" + Util.toHexStringBE(cf.getReserved2()));
  HFSPlusForkData df=cf.getDataFork();
  dataForkLogicalSizeField.setText(""String_Node_Str"" + df.getLogicalSize() + ""String_Node_Str"");
  dataForkClumpSizeField.setText(""String_Node_Str"" + df.getClumpSize() + ""String_Node_Str"");
  dataForkTotalBlocksField.setText(""String_Node_Str"" + df.getTotalBlocks());
  dataForkExtentsPanel.setLayout(new javax.swing.BoxLayout(dataForkExtentsPanel,javax.swing.BoxLayout.Y_AXIS));
  i=0;
  for (  HFSPlusExtentDescriptor d : df.getExtents().getExtentDescriptors()) {
    if (d.getBlockCount() == 0) {
      break;
    }
    StructViewPanel p=new StructViewPanel(""String_Node_Str"" + (i++ + 1),d.getStructElements());
    dataForkExtentsPanel.add(p);
  }
  HFSPlusForkData rf=cf.getResourceFork();
  resForkLogicalSizeField.setText(""String_Node_Str"" + rf.getLogicalSize() + ""String_Node_Str"");
  resForkClumpSizeField.setText(""String_Node_Str"" + rf.getClumpSize() + ""String_Node_Str"");
  resForkTotalBlocksField.setText(""String_Node_Str"" + rf.getTotalBlocks());
  dataForkExtentsPanel.setLayout(new javax.swing.BoxLayout(dataForkExtentsPanel,javax.swing.BoxLayout.Y_AXIS));
  i=0;
  for (  HFSPlusExtentDescriptor d : df.getExtents().getExtentDescriptors()) {
    if (d.getBlockCount() == 0) {
      break;
    }
    StructViewPanel p=new StructViewPanel(""String_Node_Str"" + (i++ + 1),d.getStructElements());
    resourceForkExtentsPanel.add(p);
  }
}","public void setFields(HFSPlusCatalogFile cf){
  int i;
  recordTypeField.setText(""String_Node_Str"" + Util.toHexStringBE(cf.getRecordType()));
  fileLockedBox.setSelected(cf.getFileLockedFlag());
  threadExistsBox.setSelected(cf.getThreadExistsFlag());
  reserved1Field.setText(""String_Node_Str"" + Util.toHexStringBE(cf.getReserved1()));
  fileIDField.setText(cf.getFileID().toString());
  createDateField.setText(dti.format(cf.getCreateDateAsDate()));
  contentModifyDateField.setText(dti.format(cf.getContentModDateAsDate()));
  attributesModifyDateField.setText(dti.format(cf.getAttributeModDateAsDate()));
  accessDateField.setText(dti.format(cf.getAccessDateAsDate()));
  backupDateField.setText(dti.format(cf.getBackupDateAsDate()));
  HFSPlusBSDInfo bi=cf.getPermissions();
  permissionsOwnerIDField.setText(""String_Node_Str"" + bi.getOwnerID());
  permissionsGroupIDField.setText(""String_Node_Str"" + bi.getGroupID());
  permissionsAdminFlagsField.setText(""String_Node_Str"" + Util.toHexStringBE(bi.getAdminFlags()));
  permissionsAdminFlagsArchivedBox.setSelected(bi.getAdminArchivedFlag());
  permissionsAdminFlagsImmutableBox.setSelected(bi.getAdminImmutableFlag());
  permissionsAdminFlagsAppendBox.setSelected(bi.getAdminAppendFlag());
  permissionsOwnerFlagsField.setText(""String_Node_Str"" + Util.toHexStringBE(bi.getOwnerFlags()));
  permissionsOwnerFlagsNodumpBox.setSelected(bi.getOwnerNodumpFlag());
  permissionsOwnerFlagsImmutableBox.setSelected(bi.getOwnerImmutableFlag());
  permissionsOwnerFlagsAppendBox.setSelected(bi.getOwnerAppendFlag());
  permissionsOwnerFlagsOpaqueBox.setSelected(bi.getOwnerOpaqueFlag());
  permissionsOwnerFlagsCompressedBox.setSelected(bi.getOwnerCompressedFlag());
  permissionsFileModeField.setText(bi.getFileModeString());
  permissionsFileModeSUIDBox.setSelected(bi.getFileModeSetUserID());
  permissionsFileModeSGIDBox.setSelected(bi.getFileModeSetGroupID());
  permissionsFileModeSTXTBox.setSelected(bi.getFileModeSticky());
  permissionsSpecialField.setText(""String_Node_Str"" + Util.toHexStringBE(bi.getSpecial()));
  FileInfo ui=cf.getUserInfo();
  userInfoFileTypeField.setText(""String_Node_Str"" + ui.getFileType().toString() + ""String_Node_Str""+ Util.toHexStringBE(ui.getFileType().getOSType().getFourCharCode())+ ""String_Node_Str"");
  userInfoFileCreatorField.setText(""String_Node_Str"" + ui.getFileCreator().toString() + ""String_Node_Str""+ Util.toHexStringBE(ui.getFileCreator().getOSType().getFourCharCode())+ ""String_Node_Str"");
  userInfoFinderFlagsIsOnDeskBox.setSelected(ui.getFinderFlagIsOnDesk());
  int[] rgb=ui.getFinderFlagColorRGB();
  if (originalOpaqueness == null)   originalOpaqueness=userInfoFinderFlagsColorField.isOpaque();
  if (originalColor == null)   originalColor=userInfoFinderFlagsColorField.getBackground();
  if (rgb != null) {
    userInfoFinderFlagsColorField.setOpaque(true);
    userInfoFinderFlagsColorField.setBackground(new Color(rgb[0],rgb[1],rgb[2]));
  }
 else {
    userInfoFinderFlagsColorField.setOpaque(originalOpaqueness);
    userInfoFinderFlagsColorField.setBackground(originalColor);
  }
  userInfoFinderFlagsColorField.setText(""String_Node_Str"" + ui.getFinderFlagColor());
  userInfoFinderFlagsIsSharedBox.setSelected(ui.getFinderFlagIsShared());
  userInfoFinderFlagsHasNoINITsBox.setSelected(ui.getFinderFlagHasNoINITs());
  userInfoFinderFlagsHasBeenInitedBox.setSelected(ui.getFinderFlagHasBeenInited());
  userInfoFinderFlagsHasCustomIconBox.setSelected(ui.getFinderFlagHasCustomIcon());
  userInfoFinderFlagsIsStationeryBox.setSelected(ui.getFinderFlagIsStationery());
  userInfoFinderFlagsNameLockedBox.setSelected(ui.getFinderFlagNameLocked());
  userInfoFinderFlagsHasBundleBox.setSelected(ui.getFinderFlagHasBundle());
  userInfoFinderFlagsIsInvisibleBox.setSelected(ui.getFinderFlagIsInvisible());
  userInfoFinderFlagsIsAliasBox.setSelected(ui.getFinderFlagIsAlias());
  userInfoLocationField.setText(ui.getLocation().toString());
  userInfoReservedField.setText(""String_Node_Str"" + Util.toHexStringBE(ui.getReservedField()));
  ExtendedFileInfo ei=cf.getFinderInfo();
  finderInfoReserved1Field.setText(""String_Node_Str"" + Util.toHexStringBE(ei.getReserved1()));
  finderInfoExtendedFinderFlagsExtendedFlagsAreInvalidBox.setSelected(ei.getExtendedFinderFlagExtendedFlagsAreInvalid());
  finderInfoExtendedFinderFlagsExtendedFlagHasCustomBadgeBox.setSelected(ei.getExtendedFinderFlagExtendedFlagHasCustomBadge());
  finderInfoExtendedFinderFlagsExtendedFlagHasRoutingInfoBox.setSelected(ei.getExtendedFinderFlagExtendedFlagHasRoutingInfo());
  finderInfoReserved2Field.setText(""String_Node_Str"" + Util.toHexStringBE(ei.getReserved2()));
  finderInfoPutAwayFolderIDField.setText(""String_Node_Str"" + ei.getPutAwayFolderID());
  textEncodingField.setText(""String_Node_Str"" + cf.getTextEncoding());
  reserved2Field.setText(""String_Node_Str"" + Util.toHexStringBE(cf.getReserved2()));
  HFSPlusForkData df=cf.getDataFork();
  dataForkLogicalSizeField.setText(""String_Node_Str"" + df.getLogicalSize() + ""String_Node_Str"");
  dataForkClumpSizeField.setText(""String_Node_Str"" + df.getClumpSize() + ""String_Node_Str"");
  dataForkTotalBlocksField.setText(""String_Node_Str"" + df.getTotalBlocks());
  dataForkExtentsPanel.setLayout(new javax.swing.BoxLayout(dataForkExtentsPanel,javax.swing.BoxLayout.Y_AXIS));
  i=0;
  for (  HFSPlusExtentDescriptor d : df.getExtents().getExtentDescriptors()) {
    if (d.getBlockCount() == 0) {
      break;
    }
    StructViewPanel p=new StructViewPanel(""String_Node_Str"" + (i++ + 1),d.getStructElements());
    dataForkExtentsPanel.add(p);
  }
  HFSPlusForkData rf=cf.getResourceFork();
  resForkLogicalSizeField.setText(""String_Node_Str"" + rf.getLogicalSize() + ""String_Node_Str"");
  resForkClumpSizeField.setText(""String_Node_Str"" + rf.getClumpSize() + ""String_Node_Str"");
  resForkTotalBlocksField.setText(""String_Node_Str"" + rf.getTotalBlocks());
  resourceForkExtentsPanel.setLayout(new javax.swing.BoxLayout(resourceForkExtentsPanel,javax.swing.BoxLayout.Y_AXIS));
  i=0;
  for (  HFSPlusExtentDescriptor d : rf.getExtents().getExtentDescriptors()) {
    if (d.getBlockCount() == 0) {
      break;
    }
    StructViewPanel p=new StructViewPanel(""String_Node_Str"" + (i++ + 1),d.getStructElements());
    resourceForkExtentsPanel.add(p);
  }
}",0.9979315831344472
168480,"private void listAttributeRecords(final CommonBTNode curNode,final CommonHFSCatalogNodeID nodeID,final LinkedList<CommonHFSAttributesLeafRecord> list){
  final CommonHFSAttributesKey searchKey=CommonHFSAttributesKey.create(new HFSPlusAttributesKey(((CommonHFSCatalogNodeID.HFSPlusImplementation)nodeID).getHFSCatalogNodeID(),0,new char[0]));
  final CommonHFSAttributesKey endKey=CommonHFSAttributesKey.create(new HFSPlusAttributesKey(((CommonHFSCatalogNodeID.HFSPlusImplementation)nodeID.add(1)).getHFSCatalogNodeID(),0,new char[0]));
  if (curNode instanceof CommonHFSAttributesLeafNode) {
    CommonHFSAttributesLeafNode leafNode=(CommonHFSAttributesLeafNode)curNode;
    int listSizeBefore=list.size();
    if (!findLEKeys(leafNode,searchKey,endKey,list)) {
      while (list.size() > listSizeBefore) {
        list.removeLast();
      }
    }
  }
 else   if (curNode instanceof CommonHFSAttributesIndexNode) {
    CommonHFSAttributesIndexNode indexNode=(CommonHFSAttributesIndexNode)curNode;
    LinkedList<CommonBTIndexRecord<CommonHFSAttributesKey>> recList=new LinkedList<CommonBTIndexRecord<CommonHFSAttributesKey>>();
    findLEKeys(indexNode,searchKey,endKey,recList);
    for (    CommonBTIndexRecord<CommonHFSAttributesKey> rec : recList) {
      listAttributeRecords(getNode(rec.getIndex()),nodeID,list);
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + curNode.getClass());
  }
}","private void listAttributeRecords(final CommonBTNode curNode,final CommonHFSCatalogNodeID nodeID,final LinkedList<CommonHFSAttributesLeafRecord> list){
  final CommonHFSAttributesKey searchKey=CommonHFSAttributesKey.create(new HFSPlusAttributesKey(((CommonHFSCatalogNodeID.HFSPlusImplementation)nodeID).getHFSCatalogNodeID(),0,new char[0]));
  final CommonHFSAttributesKey endKey=CommonHFSAttributesKey.create(new HFSPlusAttributesKey(((CommonHFSCatalogNodeID.HFSPlusImplementation)nodeID.add(1)).getHFSCatalogNodeID(),0,new char[0]));
  if (curNode instanceof CommonHFSAttributesLeafNode) {
    CommonHFSAttributesLeafNode leafNode=(CommonHFSAttributesLeafNode)curNode;
    int listSizeBefore=list.size();
    if (!findLEKeys(leafNode,searchKey,endKey,true,list)) {
      while (list.size() > listSizeBefore) {
        list.removeLast();
      }
    }
  }
 else   if (curNode instanceof CommonHFSAttributesIndexNode) {
    CommonHFSAttributesIndexNode indexNode=(CommonHFSAttributesIndexNode)curNode;
    LinkedList<CommonBTIndexRecord<CommonHFSAttributesKey>> recList=new LinkedList<CommonBTIndexRecord<CommonHFSAttributesKey>>();
    findLEKeys(indexNode,searchKey,endKey,false,recList);
    for (    CommonBTIndexRecord<CommonHFSAttributesKey> rec : recList) {
      listAttributeRecords(getNode(rec.getIndex()),nodeID,list);
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + curNode.getClass());
  }
}",0.9961253962662908
168481,"/** 
 * Find records with keys <code>k</code> in the range <code>minKeyInclusive</code> &lt;= <code>k</code> &lt; <code>maxKeyExclusive</code>) that exist in <code>keyedNode</code>.<br> If no matching records are found, then the record with the largest key that is less than <code>minKeyInclusive</code> (if any such record exists) is returned in <code>result</code> and the function returns <code>false</code>. If no such record exists, nothing is added to <code>result</code> (and <code>false</code> is still returned).
 * @param < R > The type of the records that we operate on.
 * @param keyedNode <b>(in)</b> The keyed node to search.
 * @param minKeyInclusive <b>(in)</b> The smallest key in the range (inclusive).
 * @param maxKeyExclusive <b>(in)</b> The largest key in the range (exclusive).
 * @param result <b>(out)</b> A  {@link java.util.LinkedList} that will receive thematching keys.
 * @return <code>true</code> if at least one key matching the specified conditions was found, and <code>false</code> otherwise.
 */
protected <R extends CommonBTKeyedRecord<K>>boolean findLEKeys(CommonBTKeyedNode<R> keyedNode,K minKeyInclusive,K maxKeyExclusive,LinkedList<R> result){
  boolean found=false;
  K largestLEKey=null;
  R largestLERecord=null;
  for (  R record : keyedNode.getBTKeyedRecords()) {
    K key=record.getKey();
    if (key.compareTo(minKeyInclusive) < 0) {
      if (largestLEKey == null || key.compareTo(largestLEKey) > 0) {
        largestLEKey=key;
        largestLERecord=record;
      }
    }
 else     if (key.compareTo(maxKeyExclusive) < 0) {
      if (result != null) {
        result.addLast(record);
      }
      found=true;
    }
  }
  if (largestLEKey != null) {
    if (result != null) {
      result.addFirst(largestLERecord);
    }
  }
  return found;
}","/** 
 * Find records with keys <code>k</code> in the range <code>minKeyInclusive</code> &lt;= <code>k</code> &lt; <code>maxKeyExclusive</code>) that exist in <code>keyedNode</code>.<br> If no matching records are found, then the record with the largest key that is less than <code>minKeyInclusive</code> (if any such record exists) is returned in <code>result</code> and the function returns <code>false</code>. If no such record exists, nothing is added to <code>result</code> (and <code>false</code> is still returned).
 * @param < R > The type of the records that we operate on.
 * @param keyedNode <b>(in)</b> The keyed node to search.
 * @param minKeyInclusive <b>(in)</b> The smallest key in the range (inclusive).
 * @param maxKeyExclusive <b>(in)</b> The largest key in the range (exclusive).
 * @param strict <b>(in)</b> If <code>false</code>, then the record before the first match is always included in the result. This is appropriate when searching index nodes, but not for leaf nodes.
 * @param result <b>(out)</b> A  {@link java.util.LinkedList} that will receive thematching keys.
 * @return <code>true</code> if at least one key matching the specified conditions was found, and <code>false</code> otherwise.
 */
protected <R extends CommonBTKeyedRecord<K>>boolean findLEKeys(CommonBTKeyedNode<R> keyedNode,K minKeyInclusive,K maxKeyExclusive,boolean strict,LinkedList<R> result){
  boolean found=false;
  K largestLEKey=null;
  R largestLERecord=null;
  for (  R record : keyedNode.getBTKeyedRecords()) {
    K key=record.getKey();
    if (key.compareTo(minKeyInclusive) < 0) {
      if (largestLEKey == null || key.compareTo(largestLEKey) > 0) {
        largestLEKey=key;
        largestLERecord=record;
      }
    }
 else     if (key.compareTo(maxKeyExclusive) < 0) {
      if (result != null) {
        result.addLast(record);
      }
      found=true;
    }
  }
  if (largestLEKey != null && (!found || !strict)) {
    if (result != null) {
      result.addFirst(largestLERecord);
    }
  }
  return found;
}",0.9343447554276746
168482,"private List<CommonBTIndexRecord<CommonHFSCatalogKey>> findLEChildKeys(CommonBTKeyedNode<CommonBTIndexRecord<CommonHFSCatalogKey>> indexNode,CommonHFSCatalogNodeID rootFolderID){
  final CommonHFSCatalogNodeID nextCNID=vol.createCommonHFSCatalogNodeID((int)(rootFolderID.toLong() + 1));
  final CommonHFSCatalogKey minKeyInclusive=vol.createCommonHFSCatalogKey(rootFolderID,vol.getEmptyString());
  final CommonHFSCatalogKey maxKeyExclusive=vol.createCommonHFSCatalogKey(nextCNID,vol.getEmptyString());
  return findLEKeys(indexNode,minKeyInclusive,maxKeyExclusive);
}","private List<CommonBTIndexRecord<CommonHFSCatalogKey>> findLEChildKeys(CommonBTKeyedNode<CommonBTIndexRecord<CommonHFSCatalogKey>> indexNode,CommonHFSCatalogNodeID rootFolderID){
  final CommonHFSCatalogNodeID nextCNID=vol.createCommonHFSCatalogNodeID((int)(rootFolderID.toLong() + 1));
  final CommonHFSCatalogKey minKeyInclusive=vol.createCommonHFSCatalogKey(rootFolderID,vol.getEmptyString());
  final CommonHFSCatalogKey maxKeyExclusive=vol.createCommonHFSCatalogKey(nextCNID,vol.getEmptyString());
  return findLEKeys(indexNode,minKeyInclusive,maxKeyExclusive,false);
}",0.9947460595446584
168483,"private void listAttributeRecords(final CommonBTNode curNode,final CommonHFSCatalogNodeID nodeID,final LinkedList<CommonHFSAttributesLeafRecord> list){
  final CommonHFSAttributesKey searchKey=CommonHFSAttributesKey.create(new HFSPlusAttributesKey(((CommonHFSCatalogNodeID.HFSPlusImplementation)nodeID).getHFSCatalogNodeID(),0,new char[0]));
  final CommonHFSAttributesKey endKey=CommonHFSAttributesKey.create(new HFSPlusAttributesKey(((CommonHFSCatalogNodeID.HFSPlusImplementation)nodeID.add(1)).getHFSCatalogNodeID(),0,new char[0]));
  if (curNode instanceof CommonHFSAttributesLeafNode) {
    CommonHFSAttributesLeafNode leafNode=(CommonHFSAttributesLeafNode)curNode;
    int listSizeBefore=list.size();
    if (!findLEKeys(leafNode,searchKey,endKey,list)) {
      while (list.size() > listSizeBefore) {
        list.removeLast();
      }
    }
  }
 else   if (curNode instanceof CommonHFSAttributesIndexNode) {
    CommonHFSAttributesIndexNode indexNode=(CommonHFSAttributesIndexNode)curNode;
    LinkedList<CommonBTIndexRecord<CommonHFSAttributesKey>> recList=new LinkedList<CommonBTIndexRecord<CommonHFSAttributesKey>>();
    if (findLEKeys(indexNode,searchKey,endKey,recList)) {
      for (      CommonBTIndexRecord<CommonHFSAttributesKey> rec : recList) {
        listAttributeRecords(getNode(rec.getIndex()),nodeID,list);
      }
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + curNode.getClass());
  }
}","private void listAttributeRecords(final CommonBTNode curNode,final CommonHFSCatalogNodeID nodeID,final LinkedList<CommonHFSAttributesLeafRecord> list){
  final CommonHFSAttributesKey searchKey=CommonHFSAttributesKey.create(new HFSPlusAttributesKey(((CommonHFSCatalogNodeID.HFSPlusImplementation)nodeID).getHFSCatalogNodeID(),0,new char[0]));
  final CommonHFSAttributesKey endKey=CommonHFSAttributesKey.create(new HFSPlusAttributesKey(((CommonHFSCatalogNodeID.HFSPlusImplementation)nodeID.add(1)).getHFSCatalogNodeID(),0,new char[0]));
  if (curNode instanceof CommonHFSAttributesLeafNode) {
    CommonHFSAttributesLeafNode leafNode=(CommonHFSAttributesLeafNode)curNode;
    int listSizeBefore=list.size();
    if (!findLEKeys(leafNode,searchKey,endKey,list)) {
      while (list.size() > listSizeBefore) {
        list.removeLast();
      }
    }
  }
 else   if (curNode instanceof CommonHFSAttributesIndexNode) {
    CommonHFSAttributesIndexNode indexNode=(CommonHFSAttributesIndexNode)curNode;
    LinkedList<CommonBTIndexRecord<CommonHFSAttributesKey>> recList=new LinkedList<CommonBTIndexRecord<CommonHFSAttributesKey>>();
    findLEKeys(indexNode,searchKey,endKey,recList);
    for (    CommonBTIndexRecord<CommonHFSAttributesKey> rec : recList) {
      listAttributeRecords(getNode(rec.getIndex()),nodeID,list);
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + curNode.getClass());
  }
}",0.985252808988764
168484,"/** 
 * {@inheritDoc}
 */
public int read(byte[] data,int pos,int len){
  long offset=Long.MAX_VALUE;
  long bytesToSkip=logicalPosition;
  long curLogicalBlock=0;
  int extIndex;
  long currentExtentLength;
  if (extentDescriptors.size() < 1 || logicalPosition > forkLength) {
    return -1;
  }
  for (extIndex=0; ; ++extIndex) {
    CommonHFSExtentDescriptor cur=getExtent(extIndex,curLogicalBlock);
    if (cur == null) {
      return -1;
    }
    long currentBlockCount=cur.getBlockCount();
    currentExtentLength=currentBlockCount * allocationBlockSize;
    if (bytesToSkip >= currentExtentLength) {
      bytesToSkip-=currentExtentLength;
      curLogicalBlock+=currentBlockCount;
    }
 else {
      offset=fsOffset + firstBlockByteOffset + (cur.getStartBlock() * allocationBlockSize)+ bytesToSkip;
      break;
    }
  }
  if (logicalPosition != lastLogicalPos) {
    sourceFile.seek(offset);
  }
 else   if (sourceFile.getFilePointer() != lastPhysicalPos) {
    sourceFile.seek(lastPhysicalPos);
  }
  long bytesLeftInStream=forkLength - logicalPosition;
  int totalBytesToRead=bytesLeftInStream < len ? (int)bytesLeftInStream : len;
  int bytesLeftToRead=totalBytesToRead;
  for (; ; ++extIndex) {
    CommonHFSExtentDescriptor cur;
    try {
      cur=getExtent(extIndex,curLogicalBlock);
    }
 catch (    RuntimeException e) {
      if (bytesLeftToRead == totalBytesToRead) {
        throw e;
      }
 else {
        break;
      }
    }
    long blockCount=cur.getBlockCount();
    long bytesInExtent=blockCount * allocationBlockSize - bytesToSkip;
    int bytesToReadFromExtent=(bytesInExtent < bytesLeftToRead) ? (int)bytesInExtent : bytesLeftToRead;
    int bytesReadFromExtent=0;
    while (bytesReadFromExtent < bytesToReadFromExtent) {
      int bytesToRead=bytesToReadFromExtent - bytesReadFromExtent;
      int positionInArray=pos + (totalBytesToRead - bytesLeftToRead) + bytesReadFromExtent;
      int bytesRead=sourceFile.read(data,positionInArray,bytesToRead);
      if (bytesRead > 0)       bytesReadFromExtent+=bytesRead;
 else {
        lastPhysicalPos=sourceFile.getFilePointer();
        int totalBytesRead=positionInArray - pos;
        logicalPosition+=totalBytesRead;
        return totalBytesRead;
      }
    }
    bytesLeftToRead-=bytesReadFromExtent;
    bytesToSkip=0;
    curLogicalBlock+=blockCount;
    if (bytesLeftToRead == 0)     break;
  }
  lastPhysicalPos=sourceFile.getFilePointer();
  logicalPosition+=totalBytesToRead - bytesLeftToRead;
  if (bytesLeftToRead < totalBytesToRead) {
    int bytesRead=totalBytesToRead - bytesLeftToRead;
    return bytesRead;
  }
 else   return -1;
}","/** 
 * {@inheritDoc}
 */
public int read(byte[] data,int pos,int len){
  long offset=Long.MAX_VALUE;
  long bytesToSkip=logicalPosition;
  long curLogicalBlock=0;
  int extIndex;
  long currentExtentLength;
  if (extentDescriptors.size() < 1 || logicalPosition > forkLength) {
    return -1;
  }
  for (extIndex=0; ; ++extIndex) {
    CommonHFSExtentDescriptor cur=getExtent(extIndex,curLogicalBlock);
    if (cur == null) {
      return -1;
    }
    long currentBlockCount=cur.getBlockCount();
    currentExtentLength=currentBlockCount * allocationBlockSize;
    if (bytesToSkip >= currentExtentLength) {
      bytesToSkip-=currentExtentLength;
      curLogicalBlock+=currentBlockCount;
    }
 else {
      offset=fsOffset + firstBlockByteOffset + (cur.getStartBlock() * allocationBlockSize)+ bytesToSkip;
      break;
    }
  }
  if (logicalPosition != lastLogicalPos) {
    sourceFile.seek(offset);
  }
 else   if (sourceFile.getFilePointer() != lastPhysicalPos) {
    sourceFile.seek(lastPhysicalPos);
  }
  long bytesLeftInStream=forkLength - logicalPosition;
  int totalBytesToRead=bytesLeftInStream < len ? (int)bytesLeftInStream : len;
  int bytesLeftToRead=totalBytesToRead;
  for (; ; ++extIndex) {
    CommonHFSExtentDescriptor cur;
    try {
      cur=getExtent(extIndex,curLogicalBlock);
    }
 catch (    RuntimeException e) {
      if (bytesLeftToRead == totalBytesToRead) {
        throw e;
      }
 else {
        break;
      }
    }
    sourceFile.seek(fsOffset + firstBlockByteOffset + (cur.getStartBlock() * allocationBlockSize)+ bytesToSkip);
    long blockCount=cur.getBlockCount();
    long bytesInExtent=blockCount * allocationBlockSize - bytesToSkip;
    int bytesToReadFromExtent=(bytesInExtent < bytesLeftToRead) ? (int)bytesInExtent : bytesLeftToRead;
    int bytesReadFromExtent=0;
    while (bytesReadFromExtent < bytesToReadFromExtent) {
      int bytesToRead=bytesToReadFromExtent - bytesReadFromExtent;
      int positionInArray=pos + (totalBytesToRead - bytesLeftToRead) + bytesReadFromExtent;
      int bytesRead=sourceFile.read(data,positionInArray,bytesToRead);
      if (bytesRead > 0)       bytesReadFromExtent+=bytesRead;
 else {
        lastPhysicalPos=sourceFile.getFilePointer();
        int totalBytesRead=positionInArray - pos;
        logicalPosition+=totalBytesRead;
        return totalBytesRead;
      }
    }
    bytesLeftToRead-=bytesReadFromExtent;
    bytesToSkip=0;
    curLogicalBlock+=blockCount;
    if (bytesLeftToRead == 0)     break;
  }
  lastPhysicalPos=sourceFile.getFilePointer();
  logicalPosition+=totalBytesToRead - bytesLeftToRead;
  if (bytesLeftToRead < totalBytesToRead) {
    int bytesRead=totalBytesToRead - bytesLeftToRead;
    return bytesRead;
  }
 else   return -1;
}",0.9790001858390632
168485,"public static void setPosixOwners(String path,int ownerId,int groupId) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchFieldException {
  Class<?> fileSystemsClass=Class.forName(""String_Node_Str"");
  Class<?> fileSystemClass=Class.forName(""String_Node_Str"");
  Class<?> pathClass=Class.forName(""String_Node_Str"");
  Class<?> filesClass=Class.forName(""String_Node_Str"");
  Class<?> linkOptionClass=Class.forName(""String_Node_Str"");
  Method fileSystemsGetDefaultMethod=fileSystemsClass.getMethod(""String_Node_Str"");
  Method fileSystemGetPathMethod=fileSystemClass.getMethod(""String_Node_Str"",String.class,String[].class);
  Field noFollowLinksField=linkOptionClass.getField(""String_Node_Str"");
  Object noFollowLinksObject=noFollowLinksField.get(null);
  Object linkOptionsArray=Array.newInstance(linkOptionClass,1);
  Array.set(linkOptionsArray,0,noFollowLinksObject);
  Object defaultFileSystemObject=fileSystemsGetDefaultMethod.invoke(null);
  Object pObject=fileSystemGetPathMethod.invoke(defaultFileSystemObject,path,new String[0]);
  Method filesSetAttributeMethod=filesClass.getMethod(""String_Node_Str"",pathClass,String.class,Object.class,linkOptionsArray.getClass());
  filesSetAttributeMethod.invoke(null,pObject,""String_Node_Str"",Integer.valueOf(ownerId),linkOptionsArray);
  filesSetAttributeMethod.invoke(null,pObject,""String_Node_Str"",Integer.valueOf(groupId),linkOptionsArray);
}","public static void setPosixOwners(String path,int ownerId,int groupId) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchFieldException {
  Class<?> fileSystemsClass=Class.forName(""String_Node_Str"");
  Class<?> fileSystemClass=Class.forName(""String_Node_Str"");
  Class<?> pathClass=Class.forName(""String_Node_Str"");
  Class<?> filesClass=Class.forName(""String_Node_Str"");
  Class<?> linkOptionClass=Class.forName(""String_Node_Str"");
  Method fileSystemsGetDefaultMethod=fileSystemsClass.getMethod(""String_Node_Str"");
  Method fileSystemGetPathMethod=fileSystemClass.getMethod(""String_Node_Str"",String.class,String[].class);
  Field noFollowLinksField=linkOptionClass.getField(""String_Node_Str"");
  Object noFollowLinksObject=noFollowLinksField.get(null);
  Object linkOptionsArray=Array.newInstance(linkOptionClass,1);
  Array.set(linkOptionsArray,0,noFollowLinksObject);
  Object defaultFileSystemObject=fileSystemsGetDefaultMethod.invoke(null);
  Object pObject=fileSystemGetPathMethod.invoke(defaultFileSystemObject,path,new String[0]);
  Method filesSetAttributeMethod=filesClass.getMethod(""String_Node_Str"",pathClass,String.class,Object.class,linkOptionsArray.getClass());
  try {
    filesSetAttributeMethod.invoke(null,pObject,""String_Node_Str"",Integer.valueOf(ownerId),linkOptionsArray);
    filesSetAttributeMethod.invoke(null,pObject,""String_Node_Str"",Integer.valueOf(groupId),linkOptionsArray);
  }
 catch (  InvocationTargetException ex) {
    if (ex.getCause() instanceof UnsupportedOperationException) {
    }
 else {
      throw ex;
    }
  }
}",0.9475703324808183
168486,"private void extractFile(final FSFile rec,final File outDir,final ExtractProgressMonitor progressDialog,final LinkedList<String> errorMessages,final ExtractProperties extractProperties,final ObjectContainer<Boolean> skipDirectory,final FSForkType forkType){
  final String originalFileName;
  if (forkType == FSForkType.DATA)   originalFileName=rec.getName();
 else   if (forkType == FSForkType.MACOS_RESOURCE)   originalFileName=""String_Node_Str"" + rec.getName();
 else   throw new RuntimeException(""String_Node_Str"" + forkType);
  CreateFileFailedAction defaultCreateFileFailedAction=extractProperties.getCreateFileFailedAction();
  FileExistsAction defaultFileExistsAction=extractProperties.getFileExistsAction();
  UnhandledExceptionAction defaultUnhandledExceptionAction=extractProperties.getUnhandledExceptionAction();
  String fileName=originalFileName;
  while (fileName != null) {
    String curFileName=fileName;
    fileName=null;
    final FSFork theFork=rec.getForkByType(forkType);
    if (theFork == null)     throw new RuntimeException(""String_Node_Str"" + forkType);
 else     if (forkType == FSForkType.MACOS_RESOURCE && theFork.getLength() == 0)     return;
    progressDialog.updateCurrentFile(curFileName,theFork.getLength());
    final File outFile=new File(outDir,curFileName);
    if (defaultFileExistsAction != FileExistsAction.OVERWRITE && outFile.exists()) {
      FileExistsAction a;
      if (defaultFileExistsAction == FileExistsAction.PROMPT_USER)       a=progressDialog.fileExists(outFile);
 else {
        a=defaultFileExistsAction;
        defaultFileExistsAction=FileExistsAction.PROMPT_USER;
      }
      if (a == FileExistsAction.OVERWRITE) {
      }
 else       if (a == FileExistsAction.OVERWRITE_ALL) {
        extractProperties.setFileExistsAction(FileExistsAction.OVERWRITE);
        defaultFileExistsAction=FileExistsAction.OVERWRITE;
      }
 else       if (a == FileExistsAction.SKIP_FILE) {
        errorMessages.addLast(""String_Node_Str"" + outFile.getAbsolutePath() + ""String_Node_Str"");
        break;
      }
 else       if (a == FileExistsAction.SKIP_DIRECTORY) {
        errorMessages.addLast(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str"");
        skipDirectory.o=true;
        break;
      }
 else       if (a == FileExistsAction.RENAME) {
        fileName=progressDialog.displayRenamePrompt(curFileName,outDir);
        if (fileName == null)         fileName=curFileName;
        continue;
      }
 else       if (a == FileExistsAction.AUTO_RENAME) {
        fileName=FileNameTools.autoRenameIllegalFilename(curFileName,outDir,false);
        if (fileName == null)         fileName=curFileName;
        continue;
      }
 else       if (a == FileExistsAction.CANCEL) {
        progressDialog.signalCancel();
        break;
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + a);
      }
    }
    try {
      try {
        outFile.getCanonicalPath();
      }
 catch (      Exception e) {
        throw new FileNotFoundException();
      }
      if (!outFile.getParentFile().equals(outDir) || !outFile.getName().equals(curFileName)) {
        throw new FileNotFoundException();
      }
      FileOutputStream fos=new FileOutputStream(outFile);
      if (forkType == FSForkType.MACOS_RESOURCE)       extractResourceForkToAppleDoubleStream(theFork,fos,progressDialog);
 else       extractForkToStream(theFork,fos,progressDialog);
      fos.close();
      setExtractedEntryAttributes(outFile,rec,errorMessages);
      if (curFileName != (Object)originalFileName && !curFileName.equals(originalFileName))       errorMessages.addLast(""String_Node_Str"" + originalFileName + ""String_Node_Str""+ curFileName+ ""String_Node_Str""+ outDir.getAbsolutePath()+ ""String_Node_Str"");
    }
 catch (    FileNotFoundException fnfe) {
      System.out.println(""String_Node_Str"" + outFile + ""String_Node_Str"");
      fnfe.printStackTrace();
      char[] filenameChars=curFileName.toCharArray();
      System.out.println(""String_Node_Str"" + filenameChars.length + ""String_Node_Str"");
      System.out.print(""String_Node_Str"");
      for (      char c : filenameChars) {
        System.out.print(""String_Node_Str"" + Util.toHexStringBE(c));
      }
      System.out.println();
      CreateFileFailedAction a;
      if (defaultCreateFileFailedAction == CreateFileFailedAction.PROMPT_USER)       a=progressDialog.createFileFailed(curFileName,outDir);
 else {
        a=defaultCreateFileFailedAction;
        defaultCreateFileFailedAction=CreateFileFailedAction.PROMPT_USER;
      }
      if (a == CreateFileFailedAction.SKIP_FILE) {
        errorMessages.addLast(""String_Node_Str"" + outFile.getAbsolutePath() + ""String_Node_Str"");
        break;
      }
 else       if (a == CreateFileFailedAction.SKIP_DIRECTORY) {
        errorMessages.addLast(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str"");
        skipDirectory.o=true;
        break;
      }
 else       if (a == CreateFileFailedAction.RENAME) {
        fileName=progressDialog.displayRenamePrompt(curFileName,outDir);
        if (fileName == null)         fileName=curFileName;
        continue;
      }
 else       if (a == CreateFileFailedAction.AUTO_RENAME) {
        fileName=FileNameTools.autoRenameIllegalFilename(curFileName,outDir,false);
        if (fileName == null)         fileName=curFileName;
        continue;
      }
 else       if (a == CreateFileFailedAction.CANCEL) {
        progressDialog.signalCancel();
        break;
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + a);
      }
    }
catch (    IOException ioe) {
      System.err.println(""String_Node_Str"" + outFile + ""String_Node_Str"");
      ioe.printStackTrace();
      String msg=ioe.getMessage();
      int reply=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + curFileName + ""String_Node_Str""+ outDir.getAbsolutePath()+ (msg != null ? ""String_Node_Str"" + msg + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      errorMessages.addLast(""String_Node_Str"" + curFileName + ""String_Node_Str"");
      if (reply == JOptionPane.NO_OPTION) {
        progressDialog.signalCancel();
      }
    }
catch (    Throwable e) {
      e.printStackTrace();
      errorMessages.addLast(""String_Node_Str"" + curFileName + ""String_Node_Str"");
      UnhandledExceptionAction a;
      if (defaultUnhandledExceptionAction == UnhandledExceptionAction.PROMPT_USER) {
        a=progressDialog.unhandledException(curFileName,e);
      }
 else {
        a=defaultUnhandledExceptionAction;
      }
      if (a == UnhandledExceptionAction.ABORT) {
        progressDialog.signalCancel();
      }
 else       if (a == UnhandledExceptionAction.CONTINUE || a == UnhandledExceptionAction.ALWAYS_CONTINUE) {
        if (a == UnhandledExceptionAction.ALWAYS_CONTINUE) {
          extractProperties.setUnhandledExceptionAction(UnhandledExceptionAction.CONTINUE);
          defaultUnhandledExceptionAction=UnhandledExceptionAction.CONTINUE;
        }
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + a + ""String_Node_Str"");
      }
    }
    break;
  }
}","private void extractFile(final FSFile rec,final File outDir,final ExtractProgressMonitor progressDialog,final LinkedList<String> errorMessages,final ExtractProperties extractProperties,final ObjectContainer<Boolean> skipDirectory,final FSForkType forkType){
  final String originalFileName;
  if (forkType == FSForkType.DATA)   originalFileName=rec.getName();
 else   if (forkType == FSForkType.MACOS_RESOURCE)   originalFileName=""String_Node_Str"" + rec.getName();
 else   throw new RuntimeException(""String_Node_Str"" + forkType);
  CreateFileFailedAction defaultCreateFileFailedAction=extractProperties.getCreateFileFailedAction();
  FileExistsAction defaultFileExistsAction=extractProperties.getFileExistsAction();
  UnhandledExceptionAction defaultUnhandledExceptionAction=extractProperties.getUnhandledExceptionAction();
  String fileName=originalFileName;
  while (fileName != null) {
    String curFileName=fileName;
    fileName=null;
    final FSFork theFork=rec.getForkByType(forkType);
    if (theFork == null)     throw new RuntimeException(""String_Node_Str"" + forkType);
 else     if (forkType == FSForkType.MACOS_RESOURCE && theFork.getLength() == 0)     return;
    progressDialog.updateCurrentFile(curFileName,theFork.getLength());
    final File outFile=new File(outDir,curFileName);
    if (defaultFileExistsAction != FileExistsAction.OVERWRITE && outFile.exists()) {
      FileExistsAction a;
      if (defaultFileExistsAction == FileExistsAction.PROMPT_USER)       a=progressDialog.fileExists(outFile);
 else {
        a=defaultFileExistsAction;
        defaultFileExistsAction=FileExistsAction.PROMPT_USER;
      }
      if (a == FileExistsAction.OVERWRITE) {
      }
 else       if (a == FileExistsAction.OVERWRITE_ALL) {
        extractProperties.setFileExistsAction(FileExistsAction.OVERWRITE);
        defaultFileExistsAction=FileExistsAction.OVERWRITE;
      }
 else       if (a == FileExistsAction.SKIP_FILE) {
        errorMessages.addLast(""String_Node_Str"" + outFile.getAbsolutePath() + ""String_Node_Str"");
        break;
      }
 else       if (a == FileExistsAction.SKIP_DIRECTORY) {
        errorMessages.addLast(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str"");
        skipDirectory.o=true;
        break;
      }
 else       if (a == FileExistsAction.RENAME) {
        fileName=progressDialog.displayRenamePrompt(curFileName,outDir);
        if (fileName == null)         fileName=curFileName;
        continue;
      }
 else       if (a == FileExistsAction.AUTO_RENAME) {
        fileName=FileNameTools.autoRenameIllegalFilename(curFileName,outDir,false);
        if (fileName == null)         fileName=curFileName;
        continue;
      }
 else       if (a == FileExistsAction.CANCEL) {
        progressDialog.signalCancel();
        break;
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + a);
      }
    }
    try {
      try {
        outFile.getCanonicalPath();
      }
 catch (      Exception e) {
        throw new FileNotFoundException();
      }
      if (!outFile.getParentFile().equals(outDir) || !outFile.getName().equals(curFileName)) {
        throw new FileNotFoundException();
      }
      FileOutputStream fos=new FileOutputStream(outFile);
      if (forkType == FSForkType.MACOS_RESOURCE)       extractResourceForkToAppleDoubleStream(theFork,fos,progressDialog);
 else       extractForkToStream(theFork,fos,progressDialog);
      fos.close();
      setExtractedEntryAttributes(outFile,rec,errorMessages);
      if (curFileName != (Object)originalFileName && !curFileName.equals(originalFileName))       errorMessages.addLast(""String_Node_Str"" + originalFileName + ""String_Node_Str""+ curFileName+ ""String_Node_Str""+ outDir.getAbsolutePath()+ ""String_Node_Str"");
    }
 catch (    FileNotFoundException fnfe) {
      System.out.println(""String_Node_Str"" + outFile + ""String_Node_Str"");
      fnfe.printStackTrace();
      char[] filenameChars=curFileName.toCharArray();
      System.out.println(""String_Node_Str"" + filenameChars.length + ""String_Node_Str"");
      System.out.print(""String_Node_Str"");
      for (      char c : filenameChars) {
        System.out.print(""String_Node_Str"" + Util.toHexStringBE(c));
      }
      System.out.println();
      CreateFileFailedAction a;
      if (defaultCreateFileFailedAction == CreateFileFailedAction.PROMPT_USER)       a=progressDialog.createFileFailed(curFileName,outDir);
 else {
        a=defaultCreateFileFailedAction;
        defaultCreateFileFailedAction=CreateFileFailedAction.PROMPT_USER;
      }
      if (a == CreateFileFailedAction.SKIP_FILE) {
        errorMessages.addLast(""String_Node_Str"" + outFile.getAbsolutePath() + ""String_Node_Str"");
        break;
      }
 else       if (a == CreateFileFailedAction.SKIP_DIRECTORY) {
        errorMessages.addLast(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str"");
        skipDirectory.o=true;
        break;
      }
 else       if (a == CreateFileFailedAction.RENAME) {
        fileName=progressDialog.displayRenamePrompt(curFileName,outDir);
        if (fileName == null)         fileName=curFileName;
        continue;
      }
 else       if (a == CreateFileFailedAction.AUTO_RENAME) {
        fileName=FileNameTools.autoRenameIllegalFilename(curFileName,outDir,false);
        if (fileName == null)         fileName=curFileName;
        continue;
      }
 else       if (a == CreateFileFailedAction.CANCEL) {
        progressDialog.signalCancel();
        break;
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + a);
      }
    }
catch (    IOException ioe) {
      System.err.println(""String_Node_Str"" + outFile + ""String_Node_Str"");
      ioe.printStackTrace();
      String msg=ioe.getMessage();
      int reply=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + curFileName + ""String_Node_Str""+ outDir.getAbsolutePath()+ (msg != null ? ""String_Node_Str"" + msg + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      errorMessages.addLast(""String_Node_Str"" + curFileName + ""String_Node_Str"");
      if (reply == JOptionPane.NO_OPTION) {
        progressDialog.signalCancel();
      }
    }
catch (    Throwable e) {
      e.printStackTrace();
      errorMessages.addLast(""String_Node_Str"" + ""String_Node_Str"" + curFileName + ""String_Node_Str""+ ""String_Node_Str"");
      UnhandledExceptionAction a;
      if (defaultUnhandledExceptionAction == UnhandledExceptionAction.PROMPT_USER) {
        a=progressDialog.unhandledException(curFileName,e);
      }
 else {
        a=defaultUnhandledExceptionAction;
      }
      if (a == UnhandledExceptionAction.ABORT) {
        progressDialog.signalCancel();
      }
 else       if (a == UnhandledExceptionAction.CONTINUE || a == UnhandledExceptionAction.ALWAYS_CONTINUE) {
        if (a == UnhandledExceptionAction.ALWAYS_CONTINUE) {
          extractProperties.setUnhandledExceptionAction(UnhandledExceptionAction.CONTINUE);
          defaultUnhandledExceptionAction=UnhandledExceptionAction.CONTINUE;
        }
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + a + ""String_Node_Str"");
      }
    }
    break;
  }
}",0.9956283394629104
168487,"/** 
 * Adds a row sorter to <code>table</code> with the specified table model. Optionally, a list of Comparators can be supplied, one for each column, that specify the correct way of comparing the objects in that column. Null values means the default comparator will be used.<br> <b>Only Java 6+ virtual machines will support this, so check first with isJava6OrHigher() or risk to crash your program.</b>
 * @param table
 * @param tableModel
 * @param defaultSortColumn the column on which to sort on by default.
 * @param columnComparators
 */
public static void addRowSorter(JTable table,DefaultTableModel tableModel,int defaultSortColumn,List<Comparator<?>> columnComparators){
  TableRowSorter<DefaultTableModel> sorter=new TableRowSorter<DefaultTableModel>(tableModel);
  int i=0;
  for (  Comparator<?> c : columnComparators) {
    if (c != null)     sorter.setComparator(i,c);
    ++i;
  }
  sorter.toggleSortOrder(defaultSortColumn);
  try {
    Class<? extends JTable> c=table.getClass();
    Method m=c.getMethod(""String_Node_Str"",RowSorter.class);
    m.invoke(table,sorter);
  }
 catch (  NoSuchMethodException ex) {
    throw new RuntimeException(ex);
  }
catch (  IllegalAccessException ex) {
    throw new RuntimeException(ex);
  }
catch (  IllegalArgumentException ex) {
    throw new RuntimeException(ex);
  }
catch (  InvocationTargetException ex) {
    throw new RuntimeException(ex);
  }
}","/** 
 * Adds a row sorter to <code>table</code> with the specified table model. Optionally, a list of Comparators can be supplied, one for each column, that specify the correct way of comparing the objects in that column. Null values means the default comparator will be used.<br> <b>Only Java 6+ virtual machines will support this, so check first with isJava6OrHigher() or risk to crash your program.</b>
 * @param table
 * @param tableModel
 * @param defaultSortColumn the column on which to sort on by default.
 * @param columnComparators
 */
public static void addRowSorter(JTable table,DefaultTableModel tableModel,int defaultSortColumn,List<Comparator<?>> columnComparators){
  try {
    final Class<? extends Object> rowSorterClass=Class.forName(""String_Node_Str"");
    final Class<? extends Object> tableRowSorterClass=Class.forName(""String_Node_Str"");
    final Method tableRowSorterSetComparatorMethod=tableRowSorterClass.getMethod(""String_Node_Str"",int.class,Comparator.class);
    final Method tableRowSorterToggleSortOrderMethod=tableRowSorterClass.getMethod(""String_Node_Str"",int.class);
    final Object sorter=tableRowSorterClass.getConstructor(TableModel.class).newInstance(tableModel);
    int i=0;
    for (    Comparator<?> c : columnComparators) {
      if (c != null) {
        tableRowSorterSetComparatorMethod.invoke(sorter,i,c);
      }
      ++i;
    }
    tableRowSorterToggleSortOrderMethod.invoke(sorter,defaultSortColumn);
    Class<? extends JTable> c=table.getClass();
    Method m=c.getMethod(""String_Node_Str"",rowSorterClass);
    m.invoke(table,sorter);
  }
 catch (  ClassNotFoundException ex) {
    throw new RuntimeException(ex);
  }
catch (  InstantiationException ex) {
    throw new RuntimeException(ex);
  }
catch (  NoSuchMethodException ex) {
    throw new RuntimeException(ex);
  }
catch (  IllegalAccessException ex) {
    throw new RuntimeException(ex);
  }
catch (  IllegalArgumentException ex) {
    throw new RuntimeException(ex);
  }
catch (  InvocationTargetException ex) {
    throw new RuntimeException(ex);
  }
}",0.553350589588726
168488,"private void setCurrentDirectory(String[] pathnameComponents){
  System.err.println(""String_Node_Str"");
  for (int i=0; i < pathnameComponents.length; ++i)   System.err.println(""String_Node_Str"" + i + ""String_Node_Str""+ pathnameComponents[i]);
  Object rootObj=treeModel.getRoot();
  FolderTreeNode curNode;
  if (rootObj instanceof FolderTreeNode) {
    curNode=(FolderTreeNode)rootObj;
  }
 else   throw new RuntimeException(""String_Node_Str"" + rootObj.getClass());
  LinkedList<Record<A>> dirStack=new LinkedList<Record<A>>();
  TreePath treePath=new TreePath(curNode);
  for (  String currentComponent : pathnameComponents) {
    dirStack.addLast(curNode.getRecordContainer().getRecord(genericPlaceholder));
    populateTreeNodeFromPath(curNode,dirStack);
    dirTree.expandPath(treePath);
    int childCount=treeModel.getChildCount(curNode);
    FolderTreeNode requestedNode=null;
    for (int i=0; i < childCount; ++i) {
      Object curChild=treeModel.getChild(curNode,i);
      if (curChild instanceof FolderTreeNode) {
        FolderTreeNode curChildNode=(FolderTreeNode)curChild;
        Record<A> rec=curChildNode.getRecordContainer().getRecord(genericPlaceholder);
        if (rec.getName().equals(currentComponent)) {
          requestedNode=curChildNode;
          break;
        }
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + curChild.getClass());
      }
    }
    if (requestedNode != null) {
      curNode=requestedNode;
      treePath=treePath.pathByAddingChild(curNode);
    }
 else {
      JOptionPane.showMessageDialog(viewComponent,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
  }
  System.err.println(""String_Node_Str"");
  for (  Object o : treePath.getPath())   System.err.print(""String_Node_Str"" + o.toString() + ""String_Node_Str"");
  selectInTree(treePath);
}","private void setCurrentDirectory(String[] pathnameComponents){
  System.err.println(""String_Node_Str"");
  for (int i=0; i < pathnameComponents.length; ++i)   System.err.println(""String_Node_Str"" + i + ""String_Node_Str""+ pathnameComponents[i]);
  Object rootObj=treeModel.getRoot();
  FolderTreeNode curNode;
  if (rootObj instanceof FolderTreeNode) {
    curNode=(FolderTreeNode)rootObj;
  }
 else   throw new RuntimeException(""String_Node_Str"" + rootObj.getClass());
  LinkedList<Record<A>> dirStack=new LinkedList<Record<A>>();
  TreePath treePath=new TreePath(curNode);
  for (  String currentComponent : pathnameComponents) {
    dirStack.addLast(curNode.getRecordContainer().getRecord(genericPlaceholder));
    populateTreeNodeFromPath(curNode,dirStack);
    dirTree.expandPath(treePath);
    int childCount=treeModel.getChildCount(curNode);
    FolderTreeNode requestedNode=null;
    for (int i=0; i < childCount; ++i) {
      Object curChild=treeModel.getChild(curNode,i);
      if (curChild instanceof FolderTreeNode) {
        FolderTreeNode curChildNode=(FolderTreeNode)curChild;
        Record<A> rec=curChildNode.getRecordContainer().getRecord(genericPlaceholder);
        if (rec.getName().equals(currentComponent)) {
          requestedNode=curChildNode;
          break;
        }
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + curChild.getClass());
      }
    }
    if (requestedNode != null) {
      curNode=requestedNode;
      treePath=treePath.pathByAddingChild(curNode);
    }
 else {
      JOptionPane.showMessageDialog(viewComponent,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
  }
  System.err.println(""String_Node_Str"");
  for (  Object o : treePath.getPath())   System.err.print(""String_Node_Str"" + o.toString() + ""String_Node_Str"");
  System.err.println();
  selectInTree(treePath);
}",0.9935587761674718
168489,"public Transaction[] getPendingTransactions(){
  final JournalInfoBlock infoBlock=getJournalInfoBlock();
  final ReadableRandomAccessStream journalStream=getJournalDataStream(infoBlock);
  final JournalHeader jh=getJournalHeader(infoBlock,journalStream);
  final long start=jh.getRawStart();
  final long end=jh.getRawEnd();
  final long size=jh.getRawSize();
  if (start < 0)   throw new RuntimeException(""String_Node_Str"");
  if (end < 0)   throw new RuntimeException(""String_Node_Str"");
  if (size < 0)   throw new RuntimeException(""String_Node_Str"");
  if (start == end) {
    return new Transaction[0];
  }
  final LinkedList<Transaction> pendingTransactionList=new LinkedList<Transaction>();
  final LinkedList<BlockList> curBlockListList=new LinkedList<BlockList>();
  final LinkedList<BlockInfo> curBlockInfoList=new LinkedList<BlockInfo>();
  boolean wrappedAround=false;
  byte[] tmpData=new byte[Math.max(BlockListHeader.length(),BlockInfo.length())];
  journalStream.seek(start);
  for (long i=start; i != end; ) {
    if (wrappedReadFully(journalStream,tmpData,0,BlockListHeader.length())) {
      if (!wrappedAround) {
        wrappedAround=true;
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
    BlockListHeader curHeader=new BlockListHeader(tmpData,0,jh.isLittleEndian());
    if (curHeader.getNumBlocks() < 1) {
      throw new RuntimeException(""String_Node_Str"");
    }
    i=(i + BlockListHeader.length()) % size;
    curBlockInfoList.clear();
    for (int j=0; j < curHeader.getNumBlocks(); ++j) {
      if (wrappedReadFully(journalStream,tmpData,0,BlockInfo.length())) {
        if (!wrappedAround) {
          wrappedAround=true;
        }
 else {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
      curBlockInfoList.add(new BlockInfo(tmpData,0,jh.isLittleEndian()));
      i=(i + BlockInfo.length()) % size;
    }
    BlockList curBlockList=new BlockList(curHeader,curBlockInfoList.toArray(new BlockInfo[curBlockInfoList.size()]));
    curBlockListList.add(curBlockList);
    if (curBlockList.getBlockInfo(0).getNext() == 0) {
      pendingTransactionList.add(new Transaction(curBlockListList.toArray(new BlockList[curBlockListList.size()])));
      curBlockListList.clear();
    }
  }
  return pendingTransactionList.toArray(new Transaction[pendingTransactionList.size()]);
}","public Transaction[] getPendingTransactions(){
  final JournalInfoBlock infoBlock=getJournalInfoBlock();
  final ReadableRandomAccessStream journalStream=getJournalDataStream(infoBlock);
  final JournalHeader jh=getJournalHeader(infoBlock,journalStream);
  final long start=jh.getRawStart();
  final long end=jh.getRawEnd();
  final long size=jh.getRawSize();
  final int blockListHeaderSize=jh.getRawBlhdrSize();
  if (start < 0)   throw new RuntimeException(""String_Node_Str"");
  if (end < 0)   throw new RuntimeException(""String_Node_Str"");
  if (size < 0)   throw new RuntimeException(""String_Node_Str"");
  if (blockListHeaderSize < 0)   throw new RuntimeException(""String_Node_Str"");
  if (start == end) {
    return new Transaction[0];
  }
  final LinkedList<Transaction> pendingTransactionList=new LinkedList<Transaction>();
  final LinkedList<BlockList> curBlockListList=new LinkedList<BlockList>();
  final LinkedList<BlockInfo> curBlockInfoList=new LinkedList<BlockInfo>();
  boolean wrappedAround=false;
  byte[] tmpData=new byte[Math.max(BlockListHeader.length(),BlockInfo.length())];
  journalStream.seek(start);
  for (long i=start; i != end; ) {
    long curBytesRead=0;
    if (wrappedReadFully(journalStream,tmpData,0,BlockListHeader.length())) {
      if (!wrappedAround) {
        wrappedAround=true;
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
    BlockListHeader curHeader=new BlockListHeader(tmpData,0,jh.isLittleEndian());
    if (curHeader.getNumBlocks() < 1) {
      throw new RuntimeException(""String_Node_Str"");
    }
    curBytesRead+=BlockListHeader.length();
    curBlockInfoList.clear();
    for (int j=0; j < curHeader.getNumBlocks(); ++j) {
      if (wrappedReadFully(journalStream,tmpData,0,BlockInfo.length())) {
        if (!wrappedAround) {
          wrappedAround=true;
        }
 else {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
      curBlockInfoList.add(new BlockInfo(tmpData,0,jh.isLittleEndian()));
      curBytesRead+=BlockInfo.length();
    }
    byte[] curReserved=new byte[(int)(blockListHeaderSize - curBytesRead)];
    if (wrappedReadFully(journalStream,curReserved)) {
      if (!wrappedAround) {
        wrappedAround=true;
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
    curBytesRead+=curReserved.length;
    LinkedList<byte[]> curBlockDataList=new LinkedList<byte[]>();
    for (Iterator<BlockInfo> it=curBlockInfoList.iterator(); it.hasNext(); ) {
      final BlockInfo bi=it.next();
      if (curBlockDataList.size() < 1) {
        curBlockDataList.add(new byte[0]);
        continue;
      }
      final int bsize=bi.getRawBsize();
      if (bsize > Integer.MAX_VALUE) {
        throw new RuntimeException(""String_Node_Str"" + bi.getBsize() + ""String_Node_Str"");
      }
      final byte[] data=new byte[bsize];
      if (wrappedReadFully(journalStream,data)) {
        if (!wrappedAround) {
          wrappedAround=true;
        }
 else {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
      curBytesRead+=data.length;
      curBlockDataList.add(data);
    }
    BlockList curBlockList=new BlockList(curHeader,curBlockInfoList.toArray(new BlockInfo[curBlockInfoList.size()]));
    curBlockListList.add(curBlockList);
    if (curBlockList.getBlockInfo(0).getNext() == 0) {
      pendingTransactionList.add(new Transaction(curBlockListList.toArray(new BlockList[curBlockListList.size()])));
      curBlockListList.clear();
    }
    i=(i + curBytesRead) % size;
  }
  return pendingTransactionList.toArray(new Transaction[pendingTransactionList.size()]);
}",0.773421926910299
168490,"public byte[] getBytes(){
  byte[] result=new byte[length()];
  int offset=0;
{
    byte[] tempData=this.frScroll.getBytes();
    System.arraycopy(tempData,0,result,offset,tempData.length);
    offset+=tempData.length;
  }
  Util.arrayPutBE(result,offset,this.frOpenChain);
  offset+=4;
  Util.arrayPutBE(result,offset,this.frScript);
  offset+=1;
  Util.arrayPutBE(result,offset,this.frXFlags);
  offset+=1;
  Util.arrayPutBE(result,offset,this.frComment);
  offset+=2;
  Util.arrayPutBE(result,offset,this.frPutAway);
  offset+=4;
  return offset - startOffset;
}","public int getBytes(byte[] result,int offset){
  final int startOffset=offset;
{
    byte[] tempData=this.frScroll.getBytes();
    System.arraycopy(tempData,0,result,offset,tempData.length);
    offset+=tempData.length;
  }
  Util.arrayPutBE(result,offset,this.frOpenChain);
  offset+=4;
  Util.arrayPutBE(result,offset,this.frScript);
  offset+=1;
  Util.arrayPutBE(result,offset,this.frXFlags);
  offset+=1;
  Util.arrayPutBE(result,offset,this.frComment);
  offset+=2;
  Util.arrayPutBE(result,offset,this.frPutAway);
  offset+=4;
  return offset - startOffset;
}",0.8841732979664014
168491,"public Dictionary getStructElements(){
  DictionaryBuilder db=new DictionaryBuilder(DXInfo.class.getSimpleName());
  db.add(""String_Node_Str"",frScroll.getStructElements());
  db.addUIntBE(""String_Node_Str"",frOpenChain);
  db.addUIntBE(""String_Node_Str"",frScript);
  db.addUIntBE(""String_Node_Str"",frXFlags);
  db.addUIntBE(""String_Node_Str"",frComment);
  db.addUIntBE(""String_Node_Str"",frPutAway);
  return db.getResult();
}","public Dictionary getStructElements(){
  DictionaryBuilder db=new DictionaryBuilder(DXInfo.class.getSimpleName());
  db.add(""String_Node_Str"",frScroll.getStructElements());
  try {
    db.addUIntBE(""String_Node_Str"",getPrivateField(""String_Node_Str""),this);
    db.addUIntBE(""String_Node_Str"",getPrivateField(""String_Node_Str""),this);
    db.addUIntBE(""String_Node_Str"",getPrivateField(""String_Node_Str""),this);
    db.addUIntBE(""String_Node_Str"",getPrivateField(""String_Node_Str""),this);
    db.addUIntBE(""String_Node_Str"",getPrivateField(""String_Node_Str""),this);
  }
 catch (  NoSuchFieldException e) {
    throw new RuntimeException(e);
  }
  return db.getResult();
}",0.6264840182648402
168492,"/** 
 * Sets the icon images for the specified Window. Java 6 supports icon images of multiple sizes to better adapt across platforms.<br> <b>Invoking this method on a non-Java 6 JRE will cause a class loading exception.</b>
 * @param icons the different sizes of icon images that should be displayedfor the window.
 * @param window the window that the icons should be applied to.
 */
public static void setIconImages(ImageIcon[] icons,Window window){
  LinkedList<Image> iconImages=new LinkedList<Image>();
  for (  ImageIcon ii : icons)   iconImages.addLast(ii.getImage());
  try {
    Class c=window.getClass();
    Method m=c.getMethod(""String_Node_Str"",LinkedList.class);
    m.invoke(window,iconImages);
  }
 catch (  NoSuchMethodException ex) {
    throw new RuntimeException(ex);
  }
catch (  IllegalAccessException ex) {
    throw new RuntimeException(ex);
  }
catch (  IllegalArgumentException ex) {
    throw new RuntimeException(ex);
  }
catch (  InvocationTargetException ex) {
    throw new RuntimeException(ex);
  }
}","/** 
 * Sets the icon images for the specified Window. Java 6 supports icon images of multiple sizes to better adapt across platforms.<br> <b>Invoking this method on a non-Java 6 JRE will cause a class loading exception.</b>
 * @param icons the different sizes of icon images that should be displayedfor the window.
 * @param window the window that the icons should be applied to.
 */
public static void setIconImages(ImageIcon[] icons,Window window){
  LinkedList<Image> iconImages=new LinkedList<Image>();
  for (  ImageIcon ii : icons)   iconImages.addLast(ii.getImage());
  try {
    Class c=window.getClass();
    Method m=c.getMethod(""String_Node_Str"",List.class);
    m.invoke(window,iconImages);
  }
 catch (  NoSuchMethodException ex) {
    throw new RuntimeException(ex);
  }
catch (  IllegalAccessException ex) {
    throw new RuntimeException(ex);
  }
catch (  IllegalArgumentException ex) {
    throw new RuntimeException(ex);
  }
catch (  InvocationTargetException ex) {
    throw new RuntimeException(ex);
  }
}",0.6598639455782312
168493,"/** 
 * Adds a row sorter to <code>table</code> with the specified table model. Optionally, a list of Comparators can be supplied, one for each column, that specify the correct way of comparing the objects in that column. Null values means the default comparator will be used.<br> <b>Only Java 6+ virtual machines will support this, so check first with isJava6OrHigher() or risk to crash your program.</b>
 * @param table
 * @param tableModel
 * @param defaultSortColumn the column on which to sort on by default.
 * @param columnComparators
 */
public static void addRowSorter(JTable table,DefaultTableModel tableModel,int defaultSortColumn,List<Comparator<?>> columnComparators){
  TableRowSorter<DefaultTableModel> sorter=new TableRowSorter<DefaultTableModel>(tableModel);
  int i=0;
  for (  Comparator<?> c : columnComparators) {
    if (c != null)     sorter.setComparator(i,c);
    ++i;
  }
  sorter.toggleSortOrder(defaultSortColumn);
  try {
    Class c=table.getClass();
    Method m=c.getMethod(""String_Node_Str"",TableRowSorter.class);
    m.invoke(table,sorter);
  }
 catch (  NoSuchMethodException ex) {
    throw new RuntimeException(ex);
  }
catch (  IllegalAccessException ex) {
    throw new RuntimeException(ex);
  }
catch (  IllegalArgumentException ex) {
    throw new RuntimeException(ex);
  }
catch (  InvocationTargetException ex) {
    throw new RuntimeException(ex);
  }
}","/** 
 * Adds a row sorter to <code>table</code> with the specified table model. Optionally, a list of Comparators can be supplied, one for each column, that specify the correct way of comparing the objects in that column. Null values means the default comparator will be used.<br> <b>Only Java 6+ virtual machines will support this, so check first with isJava6OrHigher() or risk to crash your program.</b>
 * @param table
 * @param tableModel
 * @param defaultSortColumn the column on which to sort on by default.
 * @param columnComparators
 */
public static void addRowSorter(JTable table,DefaultTableModel tableModel,int defaultSortColumn,List<Comparator<?>> columnComparators){
  TableRowSorter<DefaultTableModel> sorter=new TableRowSorter<DefaultTableModel>(tableModel);
  int i=0;
  for (  Comparator<?> c : columnComparators) {
    if (c != null)     sorter.setComparator(i,c);
    ++i;
  }
  sorter.toggleSortOrder(defaultSortColumn);
  try {
    Class c=table.getClass();
    Method m=c.getMethod(""String_Node_Str"",RowSorter.class);
    m.invoke(table,sorter);
  }
 catch (  NoSuchMethodException ex) {
    throw new RuntimeException(ex);
  }
catch (  IllegalAccessException ex) {
    throw new RuntimeException(ex);
  }
catch (  IllegalArgumentException ex) {
    throw new RuntimeException(ex);
  }
catch (  InvocationTargetException ex) {
    throw new RuntimeException(ex);
  }
}",0.742201505916099
168494,"@Override public boolean startDirectory(String[] parentPath,FSFolder folder){
  final File outDir=outDirStack.getLast();
  final CreateDirectoryFailedAction originalCreateDirectoryFailedAction=extractProperties.getCreateDirectoryFailedAction();
  final DirectoryExistsAction originalDirectoryExistsAction=extractProperties.getDirectoryExistsAction();
  CreateDirectoryFailedAction defaultCreateDirectoryFailedAction=originalCreateDirectoryFailedAction;
  DirectoryExistsAction defaultDirectoryExistsAction=originalDirectoryExistsAction;
  final String originalDirName=folder.getName();
  String dirName=originalDirName;
  while (dirName != null) {
    String curDirName=dirName;
    dirName=null;
    pm.updateCurrentDir(curDirName);
    File thisDir=new File(outDir,curDirName);
    if (defaultDirectoryExistsAction != DirectoryExistsAction.CONTINUE && thisDir.exists()) {
      DirectoryExistsAction a;
      if (defaultDirectoryExistsAction == DirectoryExistsAction.PROMPT_USER)       a=pm.directoryExists(thisDir);
 else       a=defaultDirectoryExistsAction;
      boolean resetLoop=false;
switch (a) {
case CONTINUE:
        break;
case RENAME:
      dirName=pm.displayRenamePrompt(curDirName,outDir);
    if (dirName == null)     dirName=curDirName;
  resetLoop=true;
break;
case AUTO_RENAME:
dirName=FileNameTools.autoRenameIllegalFilename(curDirName,outDir,true);
if (dirName == null) dirName=curDirName;
resetLoop=true;
break;
case SKIP_DIRECTORY:
resetLoop=true;
break;
case CANCEL:
resetLoop=true;
pm.signalCancel();
break;
default :
throw new RuntimeException(""String_Node_Str"" + a);
}
if (resetLoop) continue;
}
if (thisDir.mkdir() || thisDir.exists()) {
if (curDirName != (Object)originalDirName && !curDirName.equals(originalDirName)) errorMessages.addLast(""String_Node_Str"" + originalDirName + ""String_Node_Str""+ curDirName+ ""String_Node_Str""+ outDir.getAbsolutePath()+ ""String_Node_Str"");
outDirStack.addLast(thisDir);
return true;
}
 else {
CreateDirectoryFailedAction a;
if (defaultCreateDirectoryFailedAction == CreateDirectoryFailedAction.PROMPT_USER) a=pm.createDirectoryFailed(curDirName,outDir);
 else {
a=defaultCreateDirectoryFailedAction;
defaultCreateDirectoryFailedAction=CreateDirectoryFailedAction.PROMPT_USER;
}
switch (a) {
case SKIP_DIRECTORY:
errorMessages.addLast(""String_Node_Str"" + thisDir.getAbsolutePath() + ""String_Node_Str"");
break;
case RENAME:
dirName=pm.displayRenamePrompt(curDirName,outDir);
if (dirName == null) dirName=curDirName;
break;
case AUTO_RENAME:
dirName=FileNameTools.autoRenameIllegalFilename(curDirName,outDir,true);
if (dirName == null) {
dirName=curDirName;
}
break;
case CANCEL:
pm.signalCancel();
break;
default :
throw new RuntimeException(""String_Node_Str"" + a);
}
}
}
return false;
}","@Override public boolean startDirectory(String[] parentPath,FSFolder folder){
  final File outDir=outDirStack.getLast();
  final CreateDirectoryFailedAction originalCreateDirectoryFailedAction=extractProperties.getCreateDirectoryFailedAction();
  final DirectoryExistsAction originalDirectoryExistsAction=extractProperties.getDirectoryExistsAction();
  CreateDirectoryFailedAction defaultCreateDirectoryFailedAction=originalCreateDirectoryFailedAction;
  DirectoryExistsAction defaultDirectoryExistsAction=originalDirectoryExistsAction;
  final String originalDirName=folder.getName();
  String dirName=originalDirName;
  while (dirName != null) {
    String curDirName=dirName;
    dirName=null;
    pm.updateCurrentDir(curDirName);
    File thisDir=new File(outDir,curDirName);
    if (defaultDirectoryExistsAction != DirectoryExistsAction.CONTINUE && thisDir.exists()) {
      DirectoryExistsAction a;
      if (defaultDirectoryExistsAction == DirectoryExistsAction.PROMPT_USER)       a=pm.directoryExists(thisDir);
 else       a=defaultDirectoryExistsAction;
      boolean resetLoop=false;
switch (a) {
case CONTINUE:
        break;
case RENAME:
      dirName=pm.displayRenamePrompt(curDirName,outDir);
    if (dirName == null)     dirName=curDirName;
  resetLoop=true;
break;
case AUTO_RENAME:
dirName=FileNameTools.autoRenameIllegalFilename(curDirName,outDir,true);
if (dirName == null) dirName=curDirName;
resetLoop=true;
break;
case SKIP_DIRECTORY:
resetLoop=true;
break;
case CANCEL:
resetLoop=true;
pm.signalCancel();
break;
default :
throw new RuntimeException(""String_Node_Str"" + a);
}
if (resetLoop) continue;
}
if (thisDir.exists() || (thisDir.mkdir() && thisDir.exists())) {
if (curDirName != (Object)originalDirName && !curDirName.equals(originalDirName)) errorMessages.addLast(""String_Node_Str"" + originalDirName + ""String_Node_Str""+ curDirName+ ""String_Node_Str""+ outDir.getAbsolutePath()+ ""String_Node_Str"");
outDirStack.addLast(thisDir);
return true;
}
 else {
CreateDirectoryFailedAction a;
if (defaultCreateDirectoryFailedAction == CreateDirectoryFailedAction.PROMPT_USER) a=pm.createDirectoryFailed(curDirName,outDir);
 else {
a=defaultCreateDirectoryFailedAction;
defaultCreateDirectoryFailedAction=CreateDirectoryFailedAction.PROMPT_USER;
}
switch (a) {
case SKIP_DIRECTORY:
errorMessages.addLast(""String_Node_Str"" + thisDir.getAbsolutePath() + ""String_Node_Str"");
break;
case RENAME:
dirName=pm.displayRenamePrompt(curDirName,outDir);
if (dirName == null) dirName=curDirName;
break;
case AUTO_RENAME:
dirName=FileNameTools.autoRenameIllegalFilename(curDirName,outDir,true);
if (dirName == null) {
dirName=curDirName;
}
break;
case CANCEL:
pm.signalCancel();
break;
default :
throw new RuntimeException(""String_Node_Str"" + a);
}
}
}
return false;
}",0.994207096307024
168495,"@Override public boolean startDirectory(String[] parentPath,FSFolder folder){
  final File outDir=outDirStack.getLast();
  final CreateDirectoryFailedAction originalCreateDirectoryFailedAction=extractProperties.getCreateDirectoryFailedAction();
  final DirectoryExistsAction originalDirectoryExistsAction=extractProperties.getDirectoryExistsAction();
  CreateDirectoryFailedAction defaultCreateDirectoryFailedAction=originalCreateDirectoryFailedAction;
  DirectoryExistsAction defaultDirectoryExistsAction=originalDirectoryExistsAction;
  final String originalDirName=folder.getName();
  String dirName=originalDirName;
  while (dirName != null) {
    String curDirName=dirName;
    dirName=null;
    pm.updateCurrentDir(curDirName);
    File thisDir=new File(outDir,curDirName);
    if (defaultDirectoryExistsAction != DirectoryExistsAction.CONTINUE && thisDir.exists()) {
      DirectoryExistsAction a;
      if (defaultDirectoryExistsAction == DirectoryExistsAction.PROMPT_USER)       a=pm.directoryExists(thisDir);
 else       a=defaultDirectoryExistsAction;
      boolean resetLoop=false;
switch (a) {
case CONTINUE:
        break;
case RENAME:
      dirName=pm.displayRenamePrompt(curDirName,outDir);
    if (dirName == null)     dirName=curDirName;
  resetLoop=true;
break;
case AUTO_RENAME:
dirName=FileNameTools.autoRenameIllegalFilename(curDirName,outDir,true);
if (dirName == null) dirName=curDirName;
resetLoop=true;
break;
case SKIP_DIRECTORY:
resetLoop=true;
break;
case CANCEL:
resetLoop=true;
pm.signalCancel();
break;
default :
throw new RuntimeException(""String_Node_Str"" + a);
}
if (resetLoop) continue;
}
if (thisDir.exists() || (thisDir.mkdir() && thisDir.exists())) {
if (curDirName != (Object)originalDirName && !curDirName.equals(originalDirName)) errorMessages.addLast(""String_Node_Str"" + originalDirName + ""String_Node_Str""+ curDirName+ ""String_Node_Str""+ outDir.getAbsolutePath()+ ""String_Node_Str"");
outDirStack.addLast(thisDir);
return true;
}
 else {
CreateDirectoryFailedAction a;
if (defaultCreateDirectoryFailedAction == CreateDirectoryFailedAction.PROMPT_USER) a=pm.createDirectoryFailed(curDirName,outDir);
 else {
a=defaultCreateDirectoryFailedAction;
defaultCreateDirectoryFailedAction=CreateDirectoryFailedAction.PROMPT_USER;
}
switch (a) {
case SKIP_DIRECTORY:
errorMessages.addLast(""String_Node_Str"" + thisDir.getAbsolutePath() + ""String_Node_Str"");
break;
case RENAME:
dirName=pm.displayRenamePrompt(curDirName,outDir);
if (dirName == null) dirName=curDirName;
break;
case AUTO_RENAME:
dirName=FileNameTools.autoRenameIllegalFilename(curDirName,outDir,true);
if (dirName == null) {
dirName=curDirName;
}
break;
case CANCEL:
pm.signalCancel();
break;
default :
throw new RuntimeException(""String_Node_Str"" + a);
}
}
}
return false;
}","@Override public boolean startDirectory(String[] parentPath,FSFolder folder){
  final File outDir=outDirStack.getLast();
  final CreateDirectoryFailedAction originalCreateDirectoryFailedAction=extractProperties.getCreateDirectoryFailedAction();
  final DirectoryExistsAction originalDirectoryExistsAction=extractProperties.getDirectoryExistsAction();
  CreateDirectoryFailedAction defaultCreateDirectoryFailedAction=originalCreateDirectoryFailedAction;
  DirectoryExistsAction defaultDirectoryExistsAction=originalDirectoryExistsAction;
  final String originalDirName=folder.getName();
  String dirName=originalDirName;
  while (dirName != null) {
    String curDirName=dirName;
    dirName=null;
    pm.updateCurrentDir(curDirName);
    File thisDir=new File(outDir,curDirName);
    if (defaultDirectoryExistsAction != DirectoryExistsAction.CONTINUE && deepExists(thisDir)) {
      DirectoryExistsAction a;
      if (defaultDirectoryExistsAction == DirectoryExistsAction.PROMPT_USER)       a=pm.directoryExists(thisDir);
 else       a=defaultDirectoryExistsAction;
      boolean resetLoop=false;
switch (a) {
case CONTINUE:
        break;
case RENAME:
      dirName=pm.displayRenamePrompt(curDirName,outDir);
    if (dirName == null)     dirName=curDirName;
  resetLoop=true;
break;
case AUTO_RENAME:
dirName=FileNameTools.autoRenameIllegalFilename(curDirName,outDir,true);
if (dirName == null) dirName=curDirName;
resetLoop=true;
break;
case SKIP_DIRECTORY:
resetLoop=true;
break;
case CANCEL:
resetLoop=true;
pm.signalCancel();
break;
default :
throw new RuntimeException(""String_Node_Str"" + a);
}
if (resetLoop) continue;
}
if (deepExists(thisDir) || (thisDir.mkdir() && deepExists(thisDir))) {
if (curDirName != (Object)originalDirName && !curDirName.equals(originalDirName)) errorMessages.addLast(""String_Node_Str"" + originalDirName + ""String_Node_Str""+ curDirName+ ""String_Node_Str""+ outDir.getAbsolutePath()+ ""String_Node_Str"");
outDirStack.addLast(thisDir);
return true;
}
 else {
CreateDirectoryFailedAction a;
if (defaultCreateDirectoryFailedAction == CreateDirectoryFailedAction.PROMPT_USER) a=pm.createDirectoryFailed(curDirName,outDir);
 else {
a=defaultCreateDirectoryFailedAction;
defaultCreateDirectoryFailedAction=CreateDirectoryFailedAction.PROMPT_USER;
}
switch (a) {
case SKIP_DIRECTORY:
errorMessages.addLast(""String_Node_Str"" + thisDir.getAbsolutePath() + ""String_Node_Str"");
break;
case RENAME:
dirName=pm.displayRenamePrompt(curDirName,outDir);
if (dirName == null) dirName=curDirName;
break;
case AUTO_RENAME:
dirName=FileNameTools.autoRenameIllegalFilename(curDirName,outDir,true);
if (dirName == null) {
dirName=curDirName;
}
break;
case CANCEL:
pm.signalCancel();
break;
default :
throw new RuntimeException(""String_Node_Str"" + a);
}
}
}
return false;
}",0.9897389738973896
168496,"protected void extract(String[] parentPath,List<FSEntry> recs,File outDir,ExtractProgressMonitor progressDialog,LinkedList<String> errorMessages,boolean followSymbolicLinks,FSForkType... forkTypes){
  if (!outDir.exists()) {
    String[] options=new String[]{""String_Node_Str"",""String_Node_Str""};
    int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + ""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
    if (reply != 0) {
      errorMessages.addLast(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str"");
      progressDialog.signalCancel();
      return;
    }
 else {
      if (!outDir.mkdirs()) {
        JOptionPane.showMessageDialog(this,""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
        errorMessages.addLast(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str"");
        progressDialog.signalCancel();
        return;
      }
    }
  }
  ExtractVisitor ev=new ExtractVisitor(progressDialog,errorMessages,outDir,forkTypes);
  traverseTree(parentPath,recs,ev,followSymbolicLinks);
}","protected void extract(String[] parentPath,List<FSEntry> recs,File outDir,ExtractProgressMonitor progressDialog,LinkedList<String> errorMessages,boolean followSymbolicLinks,FSForkType... forkTypes){
  if (!deepExists(outDir)) {
    String[] options=new String[]{""String_Node_Str"",""String_Node_Str""};
    int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + ""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
    if (reply != 0) {
      errorMessages.addLast(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"");
      progressDialog.signalCancel();
      return;
    }
 else {
      if (!outDir.mkdirs() || !deepExists(outDir)) {
        JOptionPane.showMessageDialog(this,""String_Node_Str"" + ""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
        errorMessages.addLast(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str"");
        progressDialog.signalCancel();
        return;
      }
    }
  }
 else   if (!outDir.isDirectory()) {
    JOptionPane.showMessageDialog(this,""String_Node_Str"" + ""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    errorMessages.addLast(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"");
    progressDialog.signalCancel();
    return;
  }
  ExtractVisitor ev=new ExtractVisitor(progressDialog,errorMessages,outDir,forkTypes);
  traverseTree(parentPath,recs,ev,followSymbolicLinks);
}",0.8446434722700654
168497,"/** 
 * {@inheritDoc}
 */
@Override public int read(byte[] data,int pos,int len){
  long offset=fsOffset;
  long bytesToSkip=logicalPosition;
  int extIndex;
  long currentExtentLength;
  for (extIndex=0; extIndex < extentDescriptors.length; ++extIndex) {
    CommonHFSExtentDescriptor cur=extentDescriptors[extIndex];
    currentExtentLength=cur.getBlockCount() * allocationBlockSize;
    if (bytesToSkip >= currentExtentLength) {
      if (extIndex < extentDescriptors.length - 1)       bytesToSkip-=currentExtentLength;
 else {
        return -1;
      }
    }
 else {
      offset=fsOffset + firstBlockByteOffset + (cur.getStartBlock() * allocationBlockSize)+ bytesToSkip;
      break;
    }
  }
  if (logicalPosition != lastLogicalPos) {
    sourceFile.seek(offset);
  }
 else   if (sourceFile.getFilePointer() != lastPhysicalPos) {
    sourceFile.seek(lastPhysicalPos);
  }
  long bytesLeftInStream=forkLength - logicalPosition;
  int totalBytesToRead=bytesLeftInStream < len ? (int)bytesLeftInStream : len;
  int bytesLeftToRead=totalBytesToRead;
  for (; extIndex < extentDescriptors.length; ++extIndex) {
    CommonHFSExtentDescriptor cur=extentDescriptors[extIndex];
    long bytesInExtent=cur.getBlockCount() * allocationBlockSize - bytesToSkip;
    int bytesToReadFromExtent=(bytesInExtent < bytesLeftToRead) ? (int)bytesInExtent : bytesLeftToRead;
    int bytesReadFromExtent=0;
    while (bytesReadFromExtent < bytesToReadFromExtent) {
      int bytesToRead=bytesToReadFromExtent - bytesReadFromExtent;
      int positionInArray=pos + (totalBytesToRead - bytesLeftToRead) + bytesReadFromExtent;
      int bytesRead=sourceFile.read(data,positionInArray,bytesToRead);
      if (bytesRead > 0)       bytesReadFromExtent+=bytesRead;
 else {
        lastPhysicalPos=sourceFile.getFilePointer();
        int totalBytesRead=positionInArray - pos;
        logicalPosition+=totalBytesRead;
        return totalBytesRead;
      }
    }
    bytesLeftToRead-=bytesReadFromExtent;
    bytesToSkip=0;
    if (bytesLeftToRead == 0)     break;
  }
  lastPhysicalPos=sourceFile.getFilePointer();
  logicalPosition+=totalBytesToRead - bytesLeftToRead;
  if (bytesLeftToRead < totalBytesToRead) {
    int bytesRead=totalBytesToRead - bytesLeftToRead;
    return bytesRead;
  }
 else   return -1;
}","/** 
 * {@inheritDoc}
 */
@Override public int read(byte[] data,int pos,int len){
  long offset=Long.MAX_VALUE;
  long bytesToSkip=logicalPosition;
  int extIndex;
  long currentExtentLength;
  if (extentDescriptors.length < 1)   return -1;
  for (extIndex=0; extIndex < extentDescriptors.length; ++extIndex) {
    CommonHFSExtentDescriptor cur=extentDescriptors[extIndex];
    currentExtentLength=cur.getBlockCount() * allocationBlockSize;
    if (bytesToSkip >= currentExtentLength) {
      if (extIndex < extentDescriptors.length - 1)       bytesToSkip-=currentExtentLength;
 else {
        return -1;
      }
    }
 else {
      offset=fsOffset + firstBlockByteOffset + (cur.getStartBlock() * allocationBlockSize)+ bytesToSkip;
      break;
    }
  }
  if (logicalPosition != lastLogicalPos) {
    sourceFile.seek(offset);
  }
 else   if (sourceFile.getFilePointer() != lastPhysicalPos) {
    sourceFile.seek(lastPhysicalPos);
  }
  long bytesLeftInStream=forkLength - logicalPosition;
  int totalBytesToRead=bytesLeftInStream < len ? (int)bytesLeftInStream : len;
  int bytesLeftToRead=totalBytesToRead;
  for (; extIndex < extentDescriptors.length; ++extIndex) {
    CommonHFSExtentDescriptor cur=extentDescriptors[extIndex];
    long bytesInExtent=cur.getBlockCount() * allocationBlockSize - bytesToSkip;
    int bytesToReadFromExtent=(bytesInExtent < bytesLeftToRead) ? (int)bytesInExtent : bytesLeftToRead;
    int bytesReadFromExtent=0;
    while (bytesReadFromExtent < bytesToReadFromExtent) {
      int bytesToRead=bytesToReadFromExtent - bytesReadFromExtent;
      int positionInArray=pos + (totalBytesToRead - bytesLeftToRead) + bytesReadFromExtent;
      int bytesRead=sourceFile.read(data,positionInArray,bytesToRead);
      if (bytesRead > 0)       bytesReadFromExtent+=bytesRead;
 else {
        lastPhysicalPos=sourceFile.getFilePointer();
        int totalBytesRead=positionInArray - pos;
        logicalPosition+=totalBytesRead;
        return totalBytesRead;
      }
    }
    bytesLeftToRead-=bytesReadFromExtent;
    bytesToSkip=0;
    if (bytesLeftToRead == 0)     break;
  }
  lastPhysicalPos=sourceFile.getFilePointer();
  logicalPosition+=totalBytesToRead - bytesLeftToRead;
  if (bytesLeftToRead < totalBytesToRead) {
    int bytesRead=totalBytesToRead - bytesLeftToRead;
    return bytesRead;
  }
 else   return -1;
}",0.9846949773658116
168498,"private long extractResourceForkToAppleDoubleStream(FSFork resourceFork,OutputStream os,ProgressMonitor pm) throws IOException {
  ReadableRandomAccessStream in=null;
  try {
    AppleSingleBuilder builder=new AppleSingleBuilder(FileType.APPLEDOUBLE,2,FileSystem.MACOS_X);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    in=resourceFork.getReadableRandomAccessStream();
    long extractedBytes=IOUtil.streamCopy(in,baos,128 * 1024);
    if (extractedBytes != resourceFork.getLength()) {
      System.err.println(""String_Node_Str"" + ""String_Node_Str"" + resourceFork.getLength() + ""String_Node_Str""+ extractedBytes);
    }
    builder.addResourceFork(baos.toByteArray());
    os.write(builder.getResult());
    pm.addDataProgress(extractedBytes);
    return extractedBytes;
  }
  finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      Exception e) {
      }
    }
  }
}","private long extractResourceForkToAppleDoubleStream(FSFork resourceFork,OutputStream os,ProgressMonitor pm) throws IOException {
  ReadableRandomAccessStream in=null;
  try {
    AppleSingleBuilder builder=new AppleSingleBuilder(FileType.APPLEDOUBLE,AppleSingleVersion.VERSION_2_0,FileSystem.MACOS_X);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    in=resourceFork.getReadableRandomAccessStream();
    long extractedBytes=IOUtil.streamCopy(in,baos,128 * 1024);
    if (extractedBytes != resourceFork.getLength()) {
      System.err.println(""String_Node_Str"" + ""String_Node_Str"" + resourceFork.getLength() + ""String_Node_Str""+ extractedBytes);
    }
    builder.addResourceFork(baos.toByteArray());
    os.write(builder.getResult());
    pm.addDataProgress(extractedBytes);
    return extractedBytes;
  }
  finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      Exception e) {
      }
    }
  }
}",0.9843834141087776
168499,"public AppleSingleBuilder(FileType fileType,int version,FileSystem homeFileSystem){
  this.fileType=fileType;
  this.version=version;
  this.homeFileSystem=homeFileSystem;
}","public AppleSingleBuilder(FileType fileType,AppleSingleVersion version,FileSystem homeFileSystem){
  if (fileType == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (version == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (homeFileSystem == null)   throw new IllegalArgumentException(""String_Node_Str"");
  this.fileType=fileType;
  this.version=version;
  this.homeFileSystem=homeFileSystem;
}",0.5582922824302134
168500,"private void loadFile(File f){
  ReadableRandomAccessStream fileStream=null;
  ResourceForkReader reader=null;
  try {
    fileStream=new ReadableFileStream(f);
    if (AppleSingleHandler.detectFileFormat(fileStream,0) != null) {
      try {
        AppleSingleHandler handler=new AppleSingleHandler(fileStream);
        EntryDescriptor desc=handler.getResourceEntryDescriptor();
        if (desc != null) {
          fileStream=handler.getEntryStream(desc);
        }
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"");
        e.printStackTrace();
      }
    }
    reader=new ResourceForkReader(fileStream);
    resourceForkViewPanel.loadResourceFork(reader);
    setTitle(""String_Node_Str"" + f.getName() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    GUIUtil.displayExceptionDialog(e,this);
    resourceForkViewPanel.loadResourceFork(null);
    if (reader != null)     reader.close();
    if (fileStream != null)     fileStream.close();
  }
}","private void loadFile(File f){
  ReadableRandomAccessStream fileStream=null;
  ResourceForkReader reader=null;
  try {
    fileStream=new ReadableFileStream(f);
    if (AppleSingleHandler.detectFileFormat(fileStream,0) != null) {
      try {
        AppleSingleHandler handler=new AppleSingleHandler(fileStream);
        EntryDescriptor desc=handler.getResourceEntryDescriptor();
        if (desc != null) {
          fileStream=handler.getEntryStream(desc);
        }
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"");
        e.printStackTrace();
      }
    }
 else {
      int res=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
      if (res != JOptionPane.YES_OPTION) {
        fileStream.close();
        return;
      }
    }
    reader=new ResourceForkReader(fileStream);
    resourceForkViewPanel.loadResourceFork(reader);
    setTitle(""String_Node_Str"" + f.getName() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    GUIUtil.displayExceptionDialog(e,this);
    resourceForkViewPanel.loadResourceFork(null);
    if (reader != null)     reader.close();
    if (fileStream != null)     fileStream.close();
  }
}",0.8821989528795812
168501,"private static boolean extractResourceForkToAppleDoubleFile(FSFork resourceFork,File targetFile){
  FileOutputStream os=null;
  ReadableRandomAccessStream in=null;
  try {
    AppleSingleBuilder builder=new AppleSingleBuilder(FileType.APPLEDOUBLE,2,FileSystem.MACOS_X);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    in=resourceFork.getReadableRandomAccessStream();
    long extractedBytes=IOUtil.streamCopy(in,baos,128 * 1024);
    if (extractedBytes != resourceFork.getLength()) {
      System.err.println(""String_Node_Str"" + targetFile.getPath() + ""String_Node_Str""+ resourceFork.getLength()+ ""String_Node_Str""+ extractedBytes);
    }
    builder.addResourceFork(baos.toByteArray());
    os=new FileOutputStream(targetFile);
    os.write(builder.getResult());
    return true;
  }
 catch (  FileNotFoundException fnfe) {
    return false;
  }
catch (  Exception ioe) {
    ioe.printStackTrace();
    return false;
  }
 finally {
    if (os != null) {
      try {
        os.close();
      }
 catch (      Exception e) {
      }
    }
    if (in != null) {
      try {
        in.close();
      }
 catch (      Exception e) {
      }
    }
  }
}","private static boolean extractResourceForkToAppleDoubleFile(FSFork resourceFork,File targetFile){
  FileOutputStream os=null;
  ReadableRandomAccessStream in=null;
  try {
    AppleSingleBuilder builder=new AppleSingleBuilder(FileType.APPLEDOUBLE,AppleSingleVersion.VERSION_2_0,FileSystem.MACOS_X);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    in=resourceFork.getReadableRandomAccessStream();
    long extractedBytes=IOUtil.streamCopy(in,baos,128 * 1024);
    if (extractedBytes != resourceFork.getLength()) {
      System.err.println(""String_Node_Str"" + targetFile.getPath() + ""String_Node_Str""+ resourceFork.getLength()+ ""String_Node_Str""+ extractedBytes);
    }
    builder.addResourceFork(baos.toByteArray());
    os=new FileOutputStream(targetFile);
    os.write(builder.getResult());
    return true;
  }
 catch (  FileNotFoundException fnfe) {
    return false;
  }
catch (  Exception ioe) {
    ioe.printStackTrace();
    return false;
  }
 finally {
    if (os != null) {
      try {
        os.close();
      }
 catch (      Exception e) {
      }
    }
    if (in != null) {
      try {
        in.close();
      }
 catch (      Exception e) {
      }
    }
  }
}",0.9876962240135766
168502,"public AppleSingleHeader(byte[] data,int offset){
  System.arraycopy(data,offset + 0,magicNumber,0,4);
  System.arraycopy(data,offset + 4,versionNumber,0,4);
  System.arraycopy(data,offset + 8,homeFileSystem,0,1 * 16);
  System.arraycopy(data,offset + 24,numEntries,0,2);
}","public AppleSingleHeader(long magicNumber,long versionNumber,AppleSingleBuilder.FileSystem homeFileSystem,int numEntries){
  if (magicNumber < 0 || magicNumber > MAX_UINT)   throw new IllegalArgumentException(""String_Node_Str"" + magicNumber + ""String_Node_Str"");
  if (versionNumber < 0 || versionNumber > MAX_UINT)   throw new IllegalArgumentException(""String_Node_Str"" + versionNumber + ""String_Node_Str"");
  if (homeFileSystem == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (numEntries < 0 || numEntries > MAX_USHORT)   throw new IllegalArgumentException(""String_Node_Str"" + numEntries + ""String_Node_Str"");
  System.arraycopy(Util.toByteArrayBE((int)magicNumber),0,this.magicNumber,0,4);
  System.arraycopy(Util.toByteArrayBE((int)versionNumber),0,this.versionNumber,0,4);
  System.arraycopy(homeFileSystem.getIdentifier(),0,this.homeFileSystem,0,16);
  System.arraycopy(Util.toByteArrayBE((short)numEntries),0,this.numEntries,0,2);
}",0.2008097165991902
168503,"public void printFields(PrintStream ps,String prefix){
  ps.println(prefix + ""String_Node_Str"" + getMagicNumber());
  ps.println(prefix + ""String_Node_Str"" + getVersionNumber());
  ps.println(prefix + ""String_Node_Str"" + getHomeFileSystem());
  ps.println(prefix + ""String_Node_Str"" + getNumEntries());
}","public void printFields(PrintStream ps,String prefix){
  ps.println(prefix + ""String_Node_Str"" + getMagicNumber());
  ps.println(prefix + ""String_Node_Str"" + Util.toHexStringBE(getVersionNumber()));
  ps.println(prefix + ""String_Node_Str"" + Util.readString(getHomeFileSystem(),""String_Node_Str"")+ ""String_Node_Str"");
  ps.println(prefix + ""String_Node_Str"" + getNumEntries());
}",0.8914956011730205
168504,"public EntryDescriptor(byte[] data,int offset){
  System.arraycopy(data,offset + 0,entryId,0,4);
  System.arraycopy(data,offset + 4,entryOffset,0,4);
  System.arraycopy(data,offset + 8,entryLength,0,4);
}","public EntryDescriptor(long entryId,long entryOffset,long entryLength){
  if (entryId < 0 || entryId > MAX_UINT)   throw new IllegalArgumentException(""String_Node_Str"" + entryId + ""String_Node_Str"");
  if (entryOffset < 0 || entryOffset > MAX_UINT)   throw new IllegalArgumentException(""String_Node_Str"" + entryOffset + ""String_Node_Str"");
  if (entryLength < 0 || entryLength > MAX_UINT)   throw new IllegalArgumentException(""String_Node_Str"" + entryLength + ""String_Node_Str"");
  System.arraycopy(Util.toByteArrayBE((int)entryId),0,this.entryId,0,4);
  System.arraycopy(Util.toByteArrayBE((int)entryOffset),0,this.entryOffset,0,4);
  System.arraycopy(Util.toByteArrayBE((int)entryLength),0,this.entryLength,0,4);
}",0.1869565217391304
168505,"private void loadFile(File f){
  ReadableRandomAccessStream fileStream=null;
  ResourceForkReader reader=null;
  try {
    fileStream=new ReadableFileStream(f);
    reader=new ResourceForkReader(fileStream);
    resourceForkViewPanel.loadResourceFork(reader);
  }
 catch (  Exception e) {
    e.printStackTrace();
    GUIUtil.displayExceptionDialog(e,this);
    resourceForkViewPanel.loadResourceFork(null);
    if (reader != null)     reader.close();
    if (fileStream != null)     fileStream.close();
  }
}","private void loadFile(File f){
  ReadableRandomAccessStream fileStream=null;
  ResourceForkReader reader=null;
  try {
    fileStream=new ReadableFileStream(f);
    if (AppleSingleHandler.detectFileFormat(fileStream,0) != null) {
      try {
        AppleSingleHandler handler=new AppleSingleHandler(fileStream);
        EntryDescriptor desc=handler.getResourceEntryDescriptor();
        if (desc != null) {
          fileStream=handler.getEntryStream(desc);
        }
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"");
        e.printStackTrace();
      }
    }
    reader=new ResourceForkReader(fileStream);
    resourceForkViewPanel.loadResourceFork(reader);
    setTitle(""String_Node_Str"" + f.getName() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    GUIUtil.displayExceptionDialog(e,this);
    resourceForkViewPanel.loadResourceFork(null);
    if (reader != null)     reader.close();
    if (fileStream != null)     fileStream.close();
  }
}",0.6697368421052632
168506,"/** 
 * UnHFS entry point. The main method's only responsability is to parse and validate program arguments. It then passes them on to the static method unhfs(...), which contains the actual program logic.
 * @param args program arguments.
 */
public static void main(String[] args){
  String outputDirname=""String_Node_Str"";
  String fsDirectory=""String_Node_Str"";
  boolean extractResourceForks=false;
  boolean verbose=false;
  int partitionNumber=-1;
  char[] password=null;
  int i;
  for (i=0; i < args.length; ++i) {
    String curArg=args[i];
    if (curArg.equals(""String_Node_Str"")) {
      if (i + 1 < args.length)       outputDirname=args[++i];
 else {
        printUsage(System.err);
        System.exit(1);
      }
    }
 else     if (curArg.equals(""String_Node_Str"")) {
      if (i + 1 < args.length)       fsDirectory=args[++i];
 else {
        printUsage(System.err);
        System.exit(1);
      }
    }
 else     if (curArg.equals(""String_Node_Str"")) {
      if (i + 1 < args.length) {
        String value=args[++i];
        if (value.equalsIgnoreCase(""String_Node_Str"")) {
          extractResourceForks=false;
        }
 else         if (value.equalsIgnoreCase(""String_Node_Str"")) {
          extractResourceForks=true;
        }
 else {
          System.err.println(""String_Node_Str"" + value + ""String_Node_Str"");
          printUsage(System.err);
          System.exit(1);
        }
      }
 else {
        printUsage(System.err);
        System.exit(1);
      }
    }
 else     if (curArg.equals(""String_Node_Str"")) {
      if (i + 1 < args.length) {
        try {
          partitionNumber=Integer.parseInt(args[++i]);
        }
 catch (        NumberFormatException nfe) {
          System.err.println(""String_Node_Str"" + args[i] + ""String_Node_Str"");
          printUsage(System.err);
          System.exit(1);
        }
      }
 else {
        printUsage(System.err);
        System.exit(1);
      }
    }
 else     if (curArg.equals(""String_Node_Str"")) {
      if (i + 1 < args.length) {
        password=args[++i].toCharArray();
      }
 else {
        printUsage(System.err);
        System.exit(1);
      }
    }
 else     if (curArg.equals(""String_Node_Str"")) {
      verbose=true;
    }
 else     if (curArg.equals(""String_Node_Str"")) {
      ++i;
      break;
    }
 else     break;
  }
  if (i != args.length - 1) {
    printUsage(System.err);
    System.exit(1);
  }
  String inputFilename=args[i];
  File inputFile=new File(inputFilename);
  if (!(inputFile.exists() && inputFile.isFile() && inputFile.canRead())) {
    System.err.println(""String_Node_Str"" + inputFilename + ""String_Node_Str"");
    printUsage(System.err);
    System.exit(1);
  }
  File outputDir=new File(outputDirname);
  if (!(outputDir.exists() && outputDir.isDirectory())) {
    System.err.println(""String_Node_Str"" + outputDirname + ""String_Node_Str"");
    printUsage(System.err);
    System.exit(1);
  }
  ReadableRandomAccessStream inputStream;
  if (WindowsLowLevelIO.isSystemSupported())   inputStream=new WindowsLowLevelIO(inputFilename);
 else   inputStream=new ReadableFileStream(inputFilename);
  try {
    unhfs(System.out,inputStream,outputDir,fsDirectory,password,extractResourceForks,partitionNumber,verbose);
    System.exit(0);
  }
 catch (  RuntimeIOException e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
    System.exit(1);
  }
}","/** 
 * UnHFS entry point. The main method's only responsibility is to parse and validate program arguments. It then passes them on to the static method unhfs(...), which contains the actual program logic.
 * @param args program arguments.
 */
public static void main(String[] args){
  String outputDirname=""String_Node_Str"";
  String fsDirectory=""String_Node_Str"";
  boolean extractResourceForks=false;
  boolean verbose=false;
  int partitionNumber=-1;
  char[] password=null;
  int i;
  for (i=0; i < args.length; ++i) {
    String curArg=args[i];
    if (curArg.equals(""String_Node_Str"")) {
      if (i + 1 < args.length)       outputDirname=args[++i];
 else {
        printUsage(System.err);
        System.exit(1);
      }
    }
 else     if (curArg.equals(""String_Node_Str"")) {
      if (i + 1 < args.length)       fsDirectory=args[++i];
 else {
        printUsage(System.err);
        System.exit(1);
      }
    }
 else     if (curArg.equals(""String_Node_Str"")) {
      if (i + 1 < args.length) {
        String value=args[++i];
        if (value.equalsIgnoreCase(""String_Node_Str"")) {
          extractResourceForks=false;
        }
 else         if (value.equalsIgnoreCase(""String_Node_Str"")) {
          extractResourceForks=true;
        }
 else {
          System.err.println(""String_Node_Str"" + value + ""String_Node_Str"");
          printUsage(System.err);
          System.exit(1);
        }
      }
 else {
        printUsage(System.err);
        System.exit(1);
      }
    }
 else     if (curArg.equals(""String_Node_Str"")) {
      if (i + 1 < args.length) {
        try {
          partitionNumber=Integer.parseInt(args[++i]);
        }
 catch (        NumberFormatException nfe) {
          System.err.println(""String_Node_Str"" + args[i] + ""String_Node_Str"");
          printUsage(System.err);
          System.exit(1);
        }
      }
 else {
        printUsage(System.err);
        System.exit(1);
      }
    }
 else     if (curArg.equals(""String_Node_Str"")) {
      if (i + 1 < args.length) {
        password=args[++i].toCharArray();
      }
 else {
        printUsage(System.err);
        System.exit(1);
      }
    }
 else     if (curArg.equals(""String_Node_Str"")) {
      verbose=true;
    }
 else     if (curArg.equals(""String_Node_Str"")) {
      ++i;
      break;
    }
 else     break;
  }
  if (i != args.length - 1) {
    printUsage(System.err);
    System.exit(1);
  }
  String inputFilename=args[i];
  File inputFile=new File(inputFilename);
  if (!(inputFile.exists() && inputFile.isFile() && inputFile.canRead())) {
    System.err.println(""String_Node_Str"" + inputFilename + ""String_Node_Str"");
    printUsage(System.err);
    System.exit(1);
  }
  File outputDir=new File(outputDirname);
  if (!(outputDir.exists() && outputDir.isDirectory())) {
    System.err.println(""String_Node_Str"" + outputDirname + ""String_Node_Str"");
    printUsage(System.err);
    System.exit(1);
  }
  ReadableRandomAccessStream inputStream;
  if (WindowsLowLevelIO.isSystemSupported())   inputStream=new WindowsLowLevelIO(inputFilename);
 else   inputStream=new ReadableFileStream(inputFilename);
  try {
    unhfs(System.out,inputStream,outputDir,fsDirectory,password,extractResourceForks,partitionNumber,verbose);
    System.exit(0);
  }
 catch (  RuntimeIOException e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
    System.exit(1);
  }
}",0.9997046662728885
168507,"/** 
 * {@inheritDoc}
 */
@Override public int read(byte[] data,int pos,int len){
  long offset=fsOffset;
  long bytesToSkip=logicalPosition;
  int extIndex;
  long currentExtentLength;
  for (extIndex=0; extIndex < extentDescriptors.length; ++extIndex) {
    CommonHFSExtentDescriptor cur=extentDescriptors[extIndex];
    currentExtentLength=cur.getBlockCount() * allocationBlockSize;
    if (bytesToSkip >= currentExtentLength) {
      if (extIndex < extentDescriptors.length - 1)       bytesToSkip-=currentExtentLength;
 else {
        return -1;
      }
    }
 else {
      offset=fsOffset + firstBlockByteOffset + (cur.getStartBlock() * allocationBlockSize)+ bytesToSkip;
      break;
    }
  }
  if (logicalPosition != lastLogicalPos) {
    sourceFile.seek(offset);
  }
 else   if (sourceFile.getFilePointer() != lastPhysicalPos) {
    sourceFile.seek(lastPhysicalPos);
  }
  int bytesLeftToRead=len;
  for (; extIndex < extentDescriptors.length; ++extIndex) {
    CommonHFSExtentDescriptor cur=extentDescriptors[extIndex];
    long bytesInExtent=cur.getBlockCount() * allocationBlockSize - bytesToSkip;
    int bytesToReadFromExtent=(bytesInExtent < bytesLeftToRead) ? (int)bytesInExtent : bytesLeftToRead;
    int bytesReadFromExtent=0;
    while (bytesReadFromExtent < bytesToReadFromExtent) {
      int bytesToRead=bytesToReadFromExtent - bytesReadFromExtent;
      int positionInArray=pos + (len - bytesLeftToRead) + bytesReadFromExtent;
      int bytesRead=sourceFile.read(data,positionInArray,bytesToRead);
      if (bytesRead > 0)       bytesReadFromExtent+=bytesRead;
 else {
        lastPhysicalPos=sourceFile.getFilePointer();
        int totalBytesRead=positionInArray - pos;
        logicalPosition+=totalBytesRead;
        return totalBytesRead;
      }
    }
    bytesLeftToRead-=bytesReadFromExtent;
    bytesToSkip=0;
    if (bytesLeftToRead == 0)     break;
  }
  lastPhysicalPos=sourceFile.getFilePointer();
  logicalPosition+=len - bytesLeftToRead;
  if (bytesLeftToRead < len)   return len - bytesLeftToRead;
 else   return -1;
}","/** 
 * {@inheritDoc}
 */
@Override public int read(byte[] data,int pos,int len){
  long offset=fsOffset;
  long bytesToSkip=logicalPosition;
  int extIndex;
  long currentExtentLength;
  for (extIndex=0; extIndex < extentDescriptors.length; ++extIndex) {
    CommonHFSExtentDescriptor cur=extentDescriptors[extIndex];
    currentExtentLength=cur.getBlockCount() * allocationBlockSize;
    if (bytesToSkip >= currentExtentLength) {
      if (extIndex < extentDescriptors.length - 1)       bytesToSkip-=currentExtentLength;
 else {
        return -1;
      }
    }
 else {
      offset=fsOffset + firstBlockByteOffset + (cur.getStartBlock() * allocationBlockSize)+ bytesToSkip;
      break;
    }
  }
  if (logicalPosition != lastLogicalPos) {
    sourceFile.seek(offset);
  }
 else   if (sourceFile.getFilePointer() != lastPhysicalPos) {
    sourceFile.seek(lastPhysicalPos);
  }
  long bytesLeftInStream=forkLength - logicalPosition;
  int totalBytesToRead=bytesLeftInStream < len ? (int)bytesLeftInStream : len;
  int bytesLeftToRead=totalBytesToRead;
  for (; extIndex < extentDescriptors.length; ++extIndex) {
    CommonHFSExtentDescriptor cur=extentDescriptors[extIndex];
    long bytesInExtent=cur.getBlockCount() * allocationBlockSize - bytesToSkip;
    int bytesToReadFromExtent=(bytesInExtent < bytesLeftToRead) ? (int)bytesInExtent : bytesLeftToRead;
    int bytesReadFromExtent=0;
    while (bytesReadFromExtent < bytesToReadFromExtent) {
      int bytesToRead=bytesToReadFromExtent - bytesReadFromExtent;
      int positionInArray=pos + (totalBytesToRead - bytesLeftToRead) + bytesReadFromExtent;
      int bytesRead=sourceFile.read(data,positionInArray,bytesToRead);
      if (bytesRead > 0)       bytesReadFromExtent+=bytesRead;
 else {
        lastPhysicalPos=sourceFile.getFilePointer();
        int totalBytesRead=positionInArray - pos;
        logicalPosition+=totalBytesRead;
        return totalBytesRead;
      }
    }
    bytesLeftToRead-=bytesReadFromExtent;
    bytesToSkip=0;
    if (bytesLeftToRead == 0)     break;
  }
  lastPhysicalPos=sourceFile.getFilePointer();
  logicalPosition+=totalBytesToRead - bytesLeftToRead;
  if (bytesLeftToRead < totalBytesToRead) {
    int bytesRead=totalBytesToRead - bytesLeftToRead;
    return bytesRead;
  }
 else   return -1;
}",0.9250229990800368
168508,"public CommonBTNode getExtentsOverflowNode(long nodeNumber){
  ExtentsInitProcedure init=new ExtentsInitProcedure();
  long currentNodeNumber;
  if (nodeNumber < 0)   currentNodeNumber=init.bthr.getRootNodeNumber();
 else   currentNodeNumber=nodeNumber;
  final int nodeSize=init.bthr.getNodeSize();
  byte[] currentNodeData=new byte[nodeSize];
  try {
    init.extentsFile.seek(currentNodeNumber * nodeSize);
    init.extentsFile.readFully(currentNodeData);
  }
 catch (  RuntimeException e) {
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"" + nodeNumber);
    System.err.println(""String_Node_Str"" + currentNodeNumber);
    System.err.println(""String_Node_Str"" + nodeSize);
    System.err.println(""String_Node_Str"" + init.extentsFile.length());
    System.err.println(""String_Node_Str"" + (currentNodeNumber * nodeSize));
    throw e;
  }
  CommonBTNodeDescriptor nodeDescriptor=createCommonBTNodeDescriptor(currentNodeData,0);
  if (nodeDescriptor.getNodeType() == NodeType.HEADER)   return createCommonBTHeaderNode(currentNodeData,0,nodeSize);
  if (nodeDescriptor.getNodeType() == NodeType.INDEX)   return createCommonHFSExtentIndexNode(currentNodeData,0,nodeSize);
 else   if (nodeDescriptor.getNodeType() == NodeType.LEAF)   return createCommonHFSExtentLeafNode(currentNodeData,0,nodeSize);
 else   return null;
}","/** 
 * Returns extents overflow node number <code>nodeNumber</code> Node number 0 is always the B*-tree header node. The node numbers of the rest of the node are determined by the contents of the header node.<br> A value of -1 for nodeNumber is special and means that the root index node should be retrieved. If the root index node does not exist, null is returned.
 * @param nodeNumber
 * @return
 */
public CommonBTNode getExtentsOverflowNode(long nodeNumber){
  ExtentsInitProcedure init=new ExtentsInitProcedure();
  long currentNodeNumber;
  if (nodeNumber < 0) {
    currentNodeNumber=init.bthr.getRootNodeNumber();
    if (currentNodeNumber == 0)     return null;
  }
 else   currentNodeNumber=nodeNumber;
  final int nodeSize=init.bthr.getNodeSize();
  byte[] currentNodeData=new byte[nodeSize];
  try {
    init.extentsFile.seek(currentNodeNumber * nodeSize);
    init.extentsFile.readFully(currentNodeData);
  }
 catch (  RuntimeException e) {
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"" + nodeNumber);
    System.err.println(""String_Node_Str"" + currentNodeNumber);
    System.err.println(""String_Node_Str"" + nodeSize);
    System.err.println(""String_Node_Str"" + init.extentsFile.length());
    System.err.println(""String_Node_Str"" + (currentNodeNumber * nodeSize));
    throw e;
  }
  CommonBTNodeDescriptor nodeDescriptor=createCommonBTNodeDescriptor(currentNodeData,0);
  if (nodeDescriptor.getNodeType() == NodeType.HEADER)   return createCommonBTHeaderNode(currentNodeData,0,nodeSize);
  if (nodeDescriptor.getNodeType() == NodeType.INDEX)   return createCommonHFSExtentIndexNode(currentNodeData,0,nodeSize);
 else   if (nodeDescriptor.getNodeType() == NodeType.LEAF)   return createCommonHFSExtentLeafNode(currentNodeData,0,nodeSize);
 else   return null;
}",0.8547979797979798
168509,"/** 
 * Returns the requested node in the catalog file. If the requested node is not a header, index or leaf node, <code>null</code> is returned because they are the only ones that are implemented at the moment. Otherwise the returned BTNode object will be of subtype HFSPlusCatalogIndexNode or HFSPlusCatalogLeafNode.<br> Calling this method with a negative <code>nodeNumber</code> argument returns the root node.
 * @param nodeNumber the node number inside the catalog file, or a negative value if we want the root
 * @return the requested node if it exists and has type index node or leaf node, null otherwise
 */
public CommonBTNode getCatalogNode(long nodeNumber){
  CatalogInitProcedure init=new CatalogInitProcedure();
  long currentNodeNumber;
  if (nodeNumber < 0)   currentNodeNumber=init.bthr.getRootNodeNumber();
 else   currentNodeNumber=nodeNumber;
  final int nodeSize=init.bthr.getNodeSize();
  byte[] currentNodeData=new byte[nodeSize];
  try {
    init.catalogFile.seek(currentNodeNumber * nodeSize);
    init.catalogFile.readFully(currentNodeData);
  }
 catch (  RuntimeException e) {
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"" + nodeNumber);
    System.err.println(""String_Node_Str"" + currentNodeNumber);
    System.err.println(""String_Node_Str"" + nodeSize);
    System.err.println(""String_Node_Str"" + init.catalogFile.length());
    System.err.println(""String_Node_Str"" + (currentNodeNumber * nodeSize));
    throw e;
  }
  CommonBTNodeDescriptor nodeDescriptor=createCommonBTNodeDescriptor(currentNodeData,0);
  if (nodeDescriptor.getNodeType() == NodeType.HEADER)   return createCommonBTHeaderNode(currentNodeData,0,init.bthr.getNodeSize());
  if (nodeDescriptor.getNodeType() == NodeType.INDEX)   return catOps.newCatalogIndexNode(currentNodeData,0,init.bthr.getNodeSize(),init.bthr);
 else   if (nodeDescriptor.getNodeType() == NodeType.LEAF)   return catOps.newCatalogLeafNode(currentNodeData,0,init.bthr.getNodeSize(),init.bthr);
 else   return null;
}","/** 
 * Returns the requested node in the catalog file. If the requested node is not a header, index or leaf node, <code>null</code> is returned because they are the only ones that are implemented at the moment. Otherwise the returned BTNode object will be of subtype HFSPlusCatalogIndexNode or HFSPlusCatalogLeafNode.<br> Calling this method with a negative <code>nodeNumber</code> argument returns the root node.
 * @param nodeNumber the node number inside the catalog file, or a negative value if we want the root
 * @return the requested node if it exists and has type index node or leaf node, null otherwise
 */
public CommonBTNode getCatalogNode(long nodeNumber){
  CatalogInitProcedure init=new CatalogInitProcedure();
  long currentNodeNumber;
  if (nodeNumber < 0) {
    currentNodeNumber=init.bthr.getRootNodeNumber();
    if (currentNodeNumber == 0)     return null;
  }
 else   currentNodeNumber=nodeNumber;
  final int nodeSize=init.bthr.getNodeSize();
  byte[] currentNodeData=new byte[nodeSize];
  try {
    init.catalogFile.seek(currentNodeNumber * nodeSize);
    init.catalogFile.readFully(currentNodeData);
  }
 catch (  RuntimeException e) {
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"" + nodeNumber);
    System.err.println(""String_Node_Str"" + currentNodeNumber);
    System.err.println(""String_Node_Str"" + nodeSize);
    System.err.println(""String_Node_Str"" + init.catalogFile.length());
    System.err.println(""String_Node_Str"" + (currentNodeNumber * nodeSize));
    throw e;
  }
  CommonBTNodeDescriptor nodeDescriptor=createCommonBTNodeDescriptor(currentNodeData,0);
  if (nodeDescriptor.getNodeType() == NodeType.HEADER)   return createCommonBTHeaderNode(currentNodeData,0,init.bthr.getNodeSize());
  if (nodeDescriptor.getNodeType() == NodeType.INDEX)   return catOps.newCatalogIndexNode(currentNodeData,0,init.bthr.getNodeSize(),init.bthr);
 else   if (nodeDescriptor.getNodeType() == NodeType.LEAF)   return catOps.newCatalogLeafNode(currentNodeData,0,init.bthr.getNodeSize(),init.bthr);
 else   return null;
}",0.9860873810104956
168510,"/** 
 * Creates new form CatalogInfoPanel 
 */
public CatalogInfoPanel(final BaseHFSFileSystemView fsView){
  initComponents();
  JTree dirTree=catalogTree;
  CommonBTNode iNode=fsView.getCatalogNode(-1);
  DefaultMutableTreeNode rootNode=new NoLeafMutableTreeNode(new BTNodeStorage(iNode,""String_Node_Str""));
  expandNode(rootNode,iNode,fsView);
  DefaultTreeModel model=new DefaultTreeModel(rootNode);
  dirTree.setModel(model);
  dirTree.addTreeWillExpandListener(new TreeWillExpandListener(){
    public void treeWillExpand(    TreeExpansionEvent e) throws ExpandVetoException {
      TreePath tp=e.getPath();
      Object obj=tp.getLastPathComponent();
      if (obj instanceof DefaultMutableTreeNode) {
        DefaultMutableTreeNode dmtn=((DefaultMutableTreeNode)obj);
        Object obj2=dmtn.getUserObject();
        if (obj2 instanceof BTNodeStorage) {
          CommonBTNode node=((BTNodeStorage)obj2).getNode();
          expandNode(dmtn,node,fsView);
        }
 else         throw new RuntimeException(""String_Node_Str"");
      }
 else       throw new RuntimeException(""String_Node_Str"");
    }
    public void treeWillCollapse(    TreeExpansionEvent e){
    }
  }
);
  final String INDEX_NAME=""String_Node_Str"";
  final String LEAF_NAME=""String_Node_Str"";
  final String PRINT_FIELDS_AREA_NAME=""String_Node_Str"";
  final String OTHER_NAME=""String_Node_Str"";
  final String FILE_NAME=""String_Node_Str"";
  final String FOLDER_NAME=""String_Node_Str"";
  final String FILE_THREAD_NAME=""String_Node_Str"";
  final String FOLDER_THREAD_NAME=""String_Node_Str"";
  final String STRUCT_VIEW_PANEL_NAME=""String_Node_Str"";
  final CardLayout clRoot=new CardLayout();
  final JPanel leafPanel=new JPanel();
  final CardLayout clLeaf=new CardLayout();
  leafPanel.setLayout(clLeaf);
  leafPanel.add(new JLabel(""String_Node_Str"",SwingConstants.CENTER),OTHER_NAME);
  leafPanel.add(new JLabel(""String_Node_Str"",SwingConstants.CENTER),FILE_THREAD_NAME);
  leafPanel.add(new JLabel(""String_Node_Str"",SwingConstants.CENTER),FOLDER_THREAD_NAME);
  final JScrollPane structViewPanelScroller=new JScrollPane();
  structViewPanelScroller.getVerticalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  structViewPanelScroller.getHorizontalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  leafPanel.add(structViewPanelScroller,STRUCT_VIEW_PANEL_NAME);
  final FileInfoPanel fileInfoPanel=new FileInfoPanel();
  JScrollPane fileInfoPanelScroller=new JScrollPane(fileInfoPanel);
  fileInfoPanelScroller.getVerticalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  fileInfoPanelScroller.getHorizontalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  leafPanel.add(fileInfoPanelScroller,FILE_NAME);
  final FolderInfoPanel folderInfoPanel=new FolderInfoPanel();
  JScrollPane folderInfoPanelScroller=new JScrollPane(folderInfoPanel);
  folderInfoPanelScroller.getVerticalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  folderInfoPanelScroller.getHorizontalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  leafPanel.add(folderInfoPanelScroller,FOLDER_NAME);
  final JTextArea printFieldsTextArea=new JTextArea(0,0);
  printFieldsTextArea.setEditable(false);
  printFieldsTextArea.setLineWrap(false);
  JScrollPane printFieldsTextAreaScroller=new JScrollPane(printFieldsTextArea);
  printFieldsTextAreaScroller.getVerticalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  printFieldsTextAreaScroller.getHorizontalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  leafPanel.add(printFieldsTextAreaScroller,PRINT_FIELDS_AREA_NAME);
  infoPanel.setLayout(clRoot);
  final JLabel indexNodeLabel=new JLabel(""String_Node_Str"",SwingConstants.CENTER);
  infoPanel.add(indexNodeLabel,INDEX_NAME);
  infoPanel.add(leafPanel,LEAF_NAME);
  catalogTree.addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent te){
      Object o=te.getPath().getLastPathComponent();
      if (o instanceof DefaultMutableTreeNode) {
        Object o2=((DefaultMutableTreeNode)o).getUserObject();
        if (o2 instanceof BTNodeStorage) {
          CommonBTNode btn=((BTNodeStorage)o2).getNode();
          CommonBTNodeDescriptor btnd=btn.getNodeDescriptor();
switch (btnd.getNodeType()) {
case INDEX:
            indexNodeLabel.setText(""String_Node_Str"" + btnd.getNumberOfRecords() + ""String_Node_Str"");
          break;
case LEAF:
        indexNodeLabel.setText(""String_Node_Str"" + btnd.getNumberOfRecords() + ""String_Node_Str"");
      break;
default :
    indexNodeLabel.setText(""String_Node_Str"");
}
clRoot.show(infoPanel,INDEX_NAME);
}
 else if (o2 instanceof BTLeafStorage) {
CommonHFSCatalogLeafRecord rec=((BTLeafStorage)o2).getRecord();
if (rec instanceof CommonHFSCatalogFileRecord.HFSPlusImplementation) {
  CommonHFSCatalogFile fil=((CommonHFSCatalogFileRecord)rec).getData();
  if (fil instanceof CommonHFSCatalogFile.HFSPlusImplementation) {
    HFSPlusCatalogFile underlying=((CommonHFSCatalogFile.HFSPlusImplementation)fil).getUnderlying();
    fileInfoPanel.setFields(underlying);
    clLeaf.show(leafPanel,FILE_NAME);
  }
 else {
    System.err.println(""String_Node_Str"" + fil.getClass());
    clLeaf.show(leafPanel,OTHER_NAME);
  }
}
 else if (rec instanceof CommonHFSCatalogFolderRecord.HFSPlusImplementation) {
  CommonHFSCatalogFolder fld=((CommonHFSCatalogFolderRecord)rec).getData();
  if (fld instanceof CommonHFSCatalogFolder.HFSPlusImplementation) {
    HFSPlusCatalogFolder underlying=((CommonHFSCatalogFolder.HFSPlusImplementation)fld).getUnderlying();
    folderInfoPanel.setFields(underlying);
    clLeaf.show(leafPanel,FOLDER_NAME);
  }
 else {
    System.err.println(""String_Node_Str"" + fld.getClass());
    clLeaf.show(leafPanel,OTHER_NAME);
  }
}
 else if (rec instanceof StructElements) {
  Dictionary dict=((StructElements)rec).getStructElements();
  String label=dict.getTypeDescription();
  if (label == null)   label=dict.getTypeName();
  structViewPanelScroller.setViewportView(new StructViewPanel(label + ""String_Node_Str"",dict));
  clLeaf.show(leafPanel,STRUCT_VIEW_PANEL_NAME);
}
 else if (rec instanceof PrintableStruct) {
  PrintStream ps=new PrintStream(new JTextAreaOutputStream(System.err,printFieldsTextArea));
  printFieldsTextArea.setText(""String_Node_Str"");
  ((PrintableStruct)rec).print(ps,""String_Node_Str"");
  ps.close();
  printFieldsTextArea.setCaretPosition(0);
  clLeaf.show(leafPanel,PRINT_FIELDS_AREA_NAME);
}
 else if (rec instanceof CommonHFSCatalogFileThreadRecord) clLeaf.show(leafPanel,FILE_THREAD_NAME);
 else if (rec instanceof CommonHFSCatalogFolderThreadRecord) clLeaf.show(leafPanel,FOLDER_THREAD_NAME);
 else {
  System.err.println(""String_Node_Str"" + rec.getClass());
  clLeaf.show(leafPanel,OTHER_NAME);
}
clRoot.show(infoPanel,LEAF_NAME);
}
 else System.err.println(""String_Node_Str"" + o2.getClass().toString());
}
 else System.err.println(""String_Node_Str"" + o.getClass().toString());
}
}
);
}","/** 
 * Creates new form CatalogInfoPanel 
 */
public CatalogInfoPanel(final BaseHFSFileSystemView fsView){
  initComponents();
  JTree dirTree=catalogTree;
  CommonBTNode iNode=fsView.getCatalogNode(-1);
  if (iNode == null) {
    DefaultTreeModel model=new DefaultTreeModel(new NoLeafMutableTreeNode(""String_Node_Str""));
    dirTree.setModel(model);
    return;
  }
  DefaultMutableTreeNode rootNode=new NoLeafMutableTreeNode(new BTNodeStorage(iNode,""String_Node_Str""));
  expandNode(rootNode,iNode,fsView);
  DefaultTreeModel model=new DefaultTreeModel(rootNode);
  dirTree.setModel(model);
  dirTree.addTreeWillExpandListener(new TreeWillExpandListener(){
    public void treeWillExpand(    TreeExpansionEvent e) throws ExpandVetoException {
      TreePath tp=e.getPath();
      Object obj=tp.getLastPathComponent();
      if (obj instanceof DefaultMutableTreeNode) {
        DefaultMutableTreeNode dmtn=((DefaultMutableTreeNode)obj);
        Object obj2=dmtn.getUserObject();
        if (obj2 instanceof BTNodeStorage) {
          CommonBTNode node=((BTNodeStorage)obj2).getNode();
          expandNode(dmtn,node,fsView);
        }
 else         throw new RuntimeException(""String_Node_Str"");
      }
 else       throw new RuntimeException(""String_Node_Str"");
    }
    public void treeWillCollapse(    TreeExpansionEvent e){
    }
  }
);
  final String INDEX_NAME=""String_Node_Str"";
  final String LEAF_NAME=""String_Node_Str"";
  final String PRINT_FIELDS_AREA_NAME=""String_Node_Str"";
  final String OTHER_NAME=""String_Node_Str"";
  final String FILE_NAME=""String_Node_Str"";
  final String FOLDER_NAME=""String_Node_Str"";
  final String FILE_THREAD_NAME=""String_Node_Str"";
  final String FOLDER_THREAD_NAME=""String_Node_Str"";
  final String STRUCT_VIEW_PANEL_NAME=""String_Node_Str"";
  final CardLayout clRoot=new CardLayout();
  final JPanel leafPanel=new JPanel();
  final CardLayout clLeaf=new CardLayout();
  leafPanel.setLayout(clLeaf);
  leafPanel.add(new JLabel(""String_Node_Str"",SwingConstants.CENTER),OTHER_NAME);
  leafPanel.add(new JLabel(""String_Node_Str"",SwingConstants.CENTER),FILE_THREAD_NAME);
  leafPanel.add(new JLabel(""String_Node_Str"",SwingConstants.CENTER),FOLDER_THREAD_NAME);
  final JScrollPane structViewPanelScroller=new JScrollPane();
  structViewPanelScroller.getVerticalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  structViewPanelScroller.getHorizontalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  leafPanel.add(structViewPanelScroller,STRUCT_VIEW_PANEL_NAME);
  final FileInfoPanel fileInfoPanel=new FileInfoPanel();
  JScrollPane fileInfoPanelScroller=new JScrollPane(fileInfoPanel);
  fileInfoPanelScroller.getVerticalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  fileInfoPanelScroller.getHorizontalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  leafPanel.add(fileInfoPanelScroller,FILE_NAME);
  final FolderInfoPanel folderInfoPanel=new FolderInfoPanel();
  JScrollPane folderInfoPanelScroller=new JScrollPane(folderInfoPanel);
  folderInfoPanelScroller.getVerticalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  folderInfoPanelScroller.getHorizontalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  leafPanel.add(folderInfoPanelScroller,FOLDER_NAME);
  final JTextArea printFieldsTextArea=new JTextArea(0,0);
  printFieldsTextArea.setEditable(false);
  printFieldsTextArea.setLineWrap(false);
  JScrollPane printFieldsTextAreaScroller=new JScrollPane(printFieldsTextArea);
  printFieldsTextAreaScroller.getVerticalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  printFieldsTextAreaScroller.getHorizontalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  leafPanel.add(printFieldsTextAreaScroller,PRINT_FIELDS_AREA_NAME);
  infoPanel.setLayout(clRoot);
  final JLabel indexNodeLabel=new JLabel(""String_Node_Str"",SwingConstants.CENTER);
  infoPanel.add(indexNodeLabel,INDEX_NAME);
  infoPanel.add(leafPanel,LEAF_NAME);
  catalogTree.addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent te){
      Object o=te.getPath().getLastPathComponent();
      if (o instanceof DefaultMutableTreeNode) {
        Object o2=((DefaultMutableTreeNode)o).getUserObject();
        if (o2 instanceof BTNodeStorage) {
          CommonBTNode btn=((BTNodeStorage)o2).getNode();
          CommonBTNodeDescriptor btnd=btn.getNodeDescriptor();
switch (btnd.getNodeType()) {
case INDEX:
            indexNodeLabel.setText(""String_Node_Str"" + btnd.getNumberOfRecords() + ""String_Node_Str"");
          break;
case LEAF:
        indexNodeLabel.setText(""String_Node_Str"" + btnd.getNumberOfRecords() + ""String_Node_Str"");
      break;
default :
    indexNodeLabel.setText(""String_Node_Str"");
}
clRoot.show(infoPanel,INDEX_NAME);
}
 else if (o2 instanceof BTLeafStorage) {
CommonHFSCatalogLeafRecord rec=((BTLeafStorage)o2).getRecord();
if (rec instanceof CommonHFSCatalogFileRecord.HFSPlusImplementation) {
  CommonHFSCatalogFile fil=((CommonHFSCatalogFileRecord)rec).getData();
  if (fil instanceof CommonHFSCatalogFile.HFSPlusImplementation) {
    HFSPlusCatalogFile underlying=((CommonHFSCatalogFile.HFSPlusImplementation)fil).getUnderlying();
    fileInfoPanel.setFields(underlying);
    clLeaf.show(leafPanel,FILE_NAME);
  }
 else {
    System.err.println(""String_Node_Str"" + fil.getClass());
    clLeaf.show(leafPanel,OTHER_NAME);
  }
}
 else if (rec instanceof CommonHFSCatalogFolderRecord.HFSPlusImplementation) {
  CommonHFSCatalogFolder fld=((CommonHFSCatalogFolderRecord)rec).getData();
  if (fld instanceof CommonHFSCatalogFolder.HFSPlusImplementation) {
    HFSPlusCatalogFolder underlying=((CommonHFSCatalogFolder.HFSPlusImplementation)fld).getUnderlying();
    folderInfoPanel.setFields(underlying);
    clLeaf.show(leafPanel,FOLDER_NAME);
  }
 else {
    System.err.println(""String_Node_Str"" + fld.getClass());
    clLeaf.show(leafPanel,OTHER_NAME);
  }
}
 else if (rec instanceof StructElements) {
  Dictionary dict=((StructElements)rec).getStructElements();
  String label=dict.getTypeDescription();
  if (label == null)   label=dict.getTypeName();
  structViewPanelScroller.setViewportView(new StructViewPanel(label + ""String_Node_Str"",dict));
  clLeaf.show(leafPanel,STRUCT_VIEW_PANEL_NAME);
}
 else if (rec instanceof PrintableStruct) {
  PrintStream ps=new PrintStream(new JTextAreaOutputStream(System.err,printFieldsTextArea));
  printFieldsTextArea.setText(""String_Node_Str"");
  ((PrintableStruct)rec).print(ps,""String_Node_Str"");
  ps.close();
  printFieldsTextArea.setCaretPosition(0);
  clLeaf.show(leafPanel,PRINT_FIELDS_AREA_NAME);
}
 else if (rec instanceof CommonHFSCatalogFileThreadRecord) clLeaf.show(leafPanel,FILE_THREAD_NAME);
 else if (rec instanceof CommonHFSCatalogFolderThreadRecord) clLeaf.show(leafPanel,FOLDER_THREAD_NAME);
 else {
  System.err.println(""String_Node_Str"" + rec.getClass());
  clLeaf.show(leafPanel,OTHER_NAME);
}
clRoot.show(infoPanel,LEAF_NAME);
}
 else System.err.println(""String_Node_Str"" + o2.getClass().toString());
}
 else System.err.println(""String_Node_Str"" + o.getClass().toString());
}
}
);
}",0.9882539453772428
168511,"/** 
 * Creates new form CatalogInfoPanel 
 */
public ExtentsInfoPanel(final BaseHFSFileSystemView fsView){
  initComponents();
  JTree dirTree=catalogTree;
  CommonBTNode iNode=fsView.getExtentsOverflowNode(-1);
  DefaultMutableTreeNode rootNode=new NoLeafMutableTreeNode(new BTNodeStorage(iNode,""String_Node_Str""));
  expandNode(rootNode,iNode,fsView);
  DefaultTreeModel model=new DefaultTreeModel(rootNode);
  dirTree.setModel(model);
  dirTree.addTreeWillExpandListener(new TreeWillExpandListener(){
    @Override public void treeWillExpand(    TreeExpansionEvent e) throws ExpandVetoException {
      TreePath tp=e.getPath();
      Object obj=tp.getLastPathComponent();
      if (obj instanceof DefaultMutableTreeNode) {
        DefaultMutableTreeNode dmtn=((DefaultMutableTreeNode)obj);
        Object obj2=dmtn.getUserObject();
        if (obj2 instanceof BTNodeStorage) {
          CommonBTNode node=((BTNodeStorage)obj2).getNode();
          expandNode(dmtn,node,fsView);
        }
 else         throw new RuntimeException(""String_Node_Str"");
      }
 else       throw new RuntimeException(""String_Node_Str"");
    }
    @Override public void treeWillCollapse(    TreeExpansionEvent e){
    }
  }
);
  final String INDEX_NAME=""String_Node_Str"";
  final String LEAF_NAME=""String_Node_Str"";
  final String PRINT_FIELDS_AREA_NAME=""String_Node_Str"";
  final String OTHER_NAME=""String_Node_Str"";
  final String FILE_NAME=""String_Node_Str"";
  final String FOLDER_NAME=""String_Node_Str"";
  final String FILE_THREAD_NAME=""String_Node_Str"";
  final String FOLDER_THREAD_NAME=""String_Node_Str"";
  final String STRUCT_VIEW_PANEL_NAME=""String_Node_Str"";
  final CardLayout clRoot=new CardLayout();
  final JPanel leafPanel=new JPanel();
  final CardLayout clLeaf=new CardLayout();
  leafPanel.setLayout(clLeaf);
  leafPanel.add(new JLabel(""String_Node_Str"",SwingConstants.CENTER),OTHER_NAME);
  leafPanel.add(new JLabel(""String_Node_Str"",SwingConstants.CENTER),FILE_THREAD_NAME);
  leafPanel.add(new JLabel(""String_Node_Str"",SwingConstants.CENTER),FOLDER_THREAD_NAME);
  final JScrollPane structViewPanelScroller=new JScrollPane();
  structViewPanelScroller.getVerticalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  structViewPanelScroller.getHorizontalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  leafPanel.add(structViewPanelScroller,STRUCT_VIEW_PANEL_NAME);
  final FileInfoPanel fileInfoPanel=new FileInfoPanel();
  JScrollPane fileInfoPanelScroller=new JScrollPane(fileInfoPanel);
  fileInfoPanelScroller.getVerticalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  fileInfoPanelScroller.getHorizontalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  leafPanel.add(fileInfoPanelScroller,FILE_NAME);
  final FolderInfoPanel folderInfoPanel=new FolderInfoPanel();
  JScrollPane folderInfoPanelScroller=new JScrollPane(folderInfoPanel);
  folderInfoPanelScroller.getVerticalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  folderInfoPanelScroller.getHorizontalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  leafPanel.add(folderInfoPanelScroller,FOLDER_NAME);
  final JTextArea printFieldsTextArea=new JTextArea(0,0);
  printFieldsTextArea.setEditable(false);
  printFieldsTextArea.setLineWrap(false);
  JScrollPane printFieldsTextAreaScroller=new JScrollPane(printFieldsTextArea);
  printFieldsTextAreaScroller.getVerticalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  printFieldsTextAreaScroller.getHorizontalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  leafPanel.add(printFieldsTextAreaScroller,PRINT_FIELDS_AREA_NAME);
  infoPanel.setLayout(clRoot);
  final JLabel indexNodeLabel=new JLabel(""String_Node_Str"",SwingConstants.CENTER);
  infoPanel.add(indexNodeLabel,INDEX_NAME);
  infoPanel.add(leafPanel,LEAF_NAME);
  catalogTree.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent te){
      Object o=te.getPath().getLastPathComponent();
      if (o instanceof DefaultMutableTreeNode) {
        Object o2=((DefaultMutableTreeNode)o).getUserObject();
        if (o2 instanceof BTNodeStorage) {
          CommonBTNode btn=((BTNodeStorage)o2).getNode();
          CommonBTNodeDescriptor btnd=btn.getNodeDescriptor();
switch (btnd.getNodeType()) {
case INDEX:
            indexNodeLabel.setText(""String_Node_Str"" + btnd.getNumberOfRecords() + ""String_Node_Str"");
          break;
case LEAF:
        indexNodeLabel.setText(""String_Node_Str"" + btnd.getNumberOfRecords() + ""String_Node_Str"");
      break;
default :
    indexNodeLabel.setText(""String_Node_Str"");
}
clRoot.show(infoPanel,INDEX_NAME);
}
 else if (o2 instanceof ExtentLeafStorage) {
CommonHFSExtentLeafRecord rec=((ExtentLeafStorage)o2).getRecord();
if (rec instanceof StructElements) {
  Dictionary dict=((StructElements)rec).getStructElements();
  String label=dict.getTypeDescription();
  if (label == null)   label=dict.getTypeName();
  structViewPanelScroller.setViewportView(new StructViewPanel(label + ""String_Node_Str"",dict));
  clLeaf.show(leafPanel,STRUCT_VIEW_PANEL_NAME);
}
 else if (rec instanceof PrintableStruct) {
  PrintStream ps=new PrintStream(new JTextAreaOutputStream(System.err,printFieldsTextArea));
  printFieldsTextArea.setText(""String_Node_Str"");
  ((PrintableStruct)rec).print(ps,""String_Node_Str"");
  ps.close();
  printFieldsTextArea.setCaretPosition(0);
  clLeaf.show(leafPanel,PRINT_FIELDS_AREA_NAME);
}
 else {
  System.err.println(""String_Node_Str"" + rec.getClass());
  clLeaf.show(leafPanel,OTHER_NAME);
}
clRoot.show(infoPanel,LEAF_NAME);
}
 else System.err.println(""String_Node_Str"" + o2.getClass().toString());
}
 else System.err.println(""String_Node_Str"" + o.getClass().toString());
}
}
);
}","/** 
 * Creates new form CatalogInfoPanel 
 */
public ExtentsInfoPanel(final BaseHFSFileSystemView fsView){
  initComponents();
  JTree dirTree=catalogTree;
  CommonBTNode iNode=fsView.getExtentsOverflowNode(-1);
  if (iNode == null) {
    DefaultTreeModel model=new DefaultTreeModel(new NoLeafMutableTreeNode(""String_Node_Str""));
    dirTree.setModel(model);
    return;
  }
  DefaultMutableTreeNode rootNode=new NoLeafMutableTreeNode(new BTNodeStorage(iNode,""String_Node_Str""));
  expandNode(rootNode,iNode,fsView);
  DefaultTreeModel model=new DefaultTreeModel(rootNode);
  dirTree.setModel(model);
  dirTree.addTreeWillExpandListener(new TreeWillExpandListener(){
    @Override public void treeWillExpand(    TreeExpansionEvent e) throws ExpandVetoException {
      TreePath tp=e.getPath();
      Object obj=tp.getLastPathComponent();
      if (obj instanceof DefaultMutableTreeNode) {
        DefaultMutableTreeNode dmtn=((DefaultMutableTreeNode)obj);
        Object obj2=dmtn.getUserObject();
        if (obj2 instanceof BTNodeStorage) {
          CommonBTNode node=((BTNodeStorage)obj2).getNode();
          expandNode(dmtn,node,fsView);
        }
 else         throw new RuntimeException(""String_Node_Str"");
      }
 else       throw new RuntimeException(""String_Node_Str"");
    }
    @Override public void treeWillCollapse(    TreeExpansionEvent e){
    }
  }
);
  final String INDEX_NAME=""String_Node_Str"";
  final String LEAF_NAME=""String_Node_Str"";
  final String PRINT_FIELDS_AREA_NAME=""String_Node_Str"";
  final String OTHER_NAME=""String_Node_Str"";
  final String FILE_NAME=""String_Node_Str"";
  final String FOLDER_NAME=""String_Node_Str"";
  final String FILE_THREAD_NAME=""String_Node_Str"";
  final String FOLDER_THREAD_NAME=""String_Node_Str"";
  final String STRUCT_VIEW_PANEL_NAME=""String_Node_Str"";
  final CardLayout clRoot=new CardLayout();
  final JPanel leafPanel=new JPanel();
  final CardLayout clLeaf=new CardLayout();
  leafPanel.setLayout(clLeaf);
  leafPanel.add(new JLabel(""String_Node_Str"",SwingConstants.CENTER),OTHER_NAME);
  leafPanel.add(new JLabel(""String_Node_Str"",SwingConstants.CENTER),FILE_THREAD_NAME);
  leafPanel.add(new JLabel(""String_Node_Str"",SwingConstants.CENTER),FOLDER_THREAD_NAME);
  final JScrollPane structViewPanelScroller=new JScrollPane();
  structViewPanelScroller.getVerticalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  structViewPanelScroller.getHorizontalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  leafPanel.add(structViewPanelScroller,STRUCT_VIEW_PANEL_NAME);
  final FileInfoPanel fileInfoPanel=new FileInfoPanel();
  JScrollPane fileInfoPanelScroller=new JScrollPane(fileInfoPanel);
  fileInfoPanelScroller.getVerticalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  fileInfoPanelScroller.getHorizontalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  leafPanel.add(fileInfoPanelScroller,FILE_NAME);
  final FolderInfoPanel folderInfoPanel=new FolderInfoPanel();
  JScrollPane folderInfoPanelScroller=new JScrollPane(folderInfoPanel);
  folderInfoPanelScroller.getVerticalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  folderInfoPanelScroller.getHorizontalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  leafPanel.add(folderInfoPanelScroller,FOLDER_NAME);
  final JTextArea printFieldsTextArea=new JTextArea(0,0);
  printFieldsTextArea.setEditable(false);
  printFieldsTextArea.setLineWrap(false);
  JScrollPane printFieldsTextAreaScroller=new JScrollPane(printFieldsTextArea);
  printFieldsTextAreaScroller.getVerticalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  printFieldsTextAreaScroller.getHorizontalScrollBar().setUnitIncrement(UNIT_INCREMENT);
  leafPanel.add(printFieldsTextAreaScroller,PRINT_FIELDS_AREA_NAME);
  infoPanel.setLayout(clRoot);
  final JLabel indexNodeLabel=new JLabel(""String_Node_Str"",SwingConstants.CENTER);
  infoPanel.add(indexNodeLabel,INDEX_NAME);
  infoPanel.add(leafPanel,LEAF_NAME);
  catalogTree.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent te){
      Object o=te.getPath().getLastPathComponent();
      if (o instanceof DefaultMutableTreeNode) {
        Object o2=((DefaultMutableTreeNode)o).getUserObject();
        if (o2 instanceof BTNodeStorage) {
          CommonBTNode btn=((BTNodeStorage)o2).getNode();
          CommonBTNodeDescriptor btnd=btn.getNodeDescriptor();
switch (btnd.getNodeType()) {
case INDEX:
            indexNodeLabel.setText(""String_Node_Str"" + btnd.getNumberOfRecords() + ""String_Node_Str"");
          break;
case LEAF:
        indexNodeLabel.setText(""String_Node_Str"" + btnd.getNumberOfRecords() + ""String_Node_Str"");
      break;
default :
    indexNodeLabel.setText(""String_Node_Str"");
}
clRoot.show(infoPanel,INDEX_NAME);
}
 else if (o2 instanceof ExtentLeafStorage) {
CommonHFSExtentLeafRecord rec=((ExtentLeafStorage)o2).getRecord();
if (rec instanceof StructElements) {
  Dictionary dict=((StructElements)rec).getStructElements();
  String label=dict.getTypeDescription();
  if (label == null)   label=dict.getTypeName();
  structViewPanelScroller.setViewportView(new StructViewPanel(label + ""String_Node_Str"",dict));
  clLeaf.show(leafPanel,STRUCT_VIEW_PANEL_NAME);
}
 else if (rec instanceof PrintableStruct) {
  PrintStream ps=new PrintStream(new JTextAreaOutputStream(System.err,printFieldsTextArea));
  printFieldsTextArea.setText(""String_Node_Str"");
  ((PrintableStruct)rec).print(ps,""String_Node_Str"");
  ps.close();
  printFieldsTextArea.setCaretPosition(0);
  clLeaf.show(leafPanel,PRINT_FIELDS_AREA_NAME);
}
 else {
  System.err.println(""String_Node_Str"" + rec.getClass());
  clLeaf.show(leafPanel,OTHER_NAME);
}
clRoot.show(infoPanel,LEAF_NAME);
}
 else System.err.println(""String_Node_Str"" + o2.getClass().toString());
}
 else System.err.println(""String_Node_Str"" + o.getClass().toString());
}
}
);
}",0.9857952069716776
168512,"public void actionPerformed(ActionEvent ae){
  signalCancel();
}","@Override public void actionPerformed(ActionEvent ae){
  signalCancel();
}",0.927536231884058
168513,"public synchronized void signalCancel(){
  cancelButton.setEnabled(false);
  cancelSignaled=true;
}","@Override public synchronized void signalCancel(){
  cancelButton.setEnabled(false);
  cancelSignaled=true;
}",0.9519230769230768
168514,"public boolean cancelSignaled(){
  return cancelSignaled;
}","@Override public boolean cancelSignaled(){
  return cancelSignaled;
}",0.921875
168515,"public void addDataProgress(long dataSize){
  completedSize+=dataSize;
  String message=SpeedUnitUtils.bytesToBinaryUnit(completedSize,sizeFormatter) + ""String_Node_Str"" + SpeedUnitUtils.bytesToBinaryUnit(totalSize,sizeFormatter);
  updateTotalProgress(((double)completedSize) / totalSize,message);
}","@Override public void addDataProgress(long dataSize){
  completedSize+=dataSize;
  String message=SpeedUnitUtils.bytesToBinaryUnit(completedSize,sizeFormatter) + ""String_Node_Str"" + SpeedUnitUtils.bytesToBinaryUnit(totalSize,sizeFormatter);
  updateTotalProgress(((double)completedSize) / totalSize,message);
}",0.9836065573770492
168516,"public void setDataSize(long totalSize){
  this.totalSize=totalSize;
}","@Override public void setDataSize(long totalSize){
  this.totalSize=totalSize;
  addDataProgress(0);
}",0.813953488372093
168517,"private ExtractProgressDialog(Frame owner,boolean modal){
  super(owner,""String_Node_Str"",modal);
  progressPanel=new ExtractProgressPanel();
  cancelButton=progressPanel.cancelButton;
  cancelButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ae){
      signalCancel();
    }
  }
);
  setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent we){
      requestCloseWindow();
    }
  }
);
  add(progressPanel,BorderLayout.CENTER);
  pack();
  setLocationRelativeTo(null);
  setResizable(false);
}","private ExtractProgressDialog(Frame owner,boolean modal){
  super(owner,""String_Node_Str"",modal);
  progressPanel=new ExtractProgressPanel();
  cancelButton=progressPanel.cancelButton;
  cancelButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent ae){
      signalCancel();
    }
  }
);
  setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent we){
      requestCloseWindow();
    }
  }
);
  add(progressPanel,BorderLayout.CENTER);
  pack();
  setLocationRelativeTo(null);
  setResizable(false);
}",0.9920886075949368
168518,"public void updateTotalProgress(double fraction,String message){
  progressPanel.updateTotalProgress(fraction,message);
}","@Override public void updateTotalProgress(double fraction,String message){
  progressPanel.updateTotalProgress(fraction,message);
}",0.9603174603174603
168519,"public void updateCurrentFile(String filename,long fileSize){
  progressPanel.updateCurrentFile(filename,fileSize);
}","@Override public void updateCurrentFile(String filename,long fileSize){
  progressPanel.updateCurrentFile(filename,fileSize);
}",0.9590163934426228
168520,"public void confirmCancel(){
  if (isVisible())   dispose();
}","@Override public void confirmCancel(){
  if (isVisible())   dispose();
}",0.9253731343283582
168521,"public void updateCurrentDir(String dirname){
  progressPanel.updateCurrentDir(dirname);
}","@Override public void updateCurrentDir(String dirname){
  progressPanel.updateCurrentDir(dirname);
}",0.9473684210526316
168522,"private int getPriority(){
switch (recordType) {
case FILE:
    return 1;
case FOLDER:
  return 0;
case FILE_LINK:
return 1;
case FOLDER_LINK:
return 0;
case BROKEN_LINK:
return 2;
default :
throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + recordType + ""String_Node_Str"");
}
}","private int getPriority(){
switch (recordType) {
case FOLDER:
    return 0;
case FOLDER_LINK:
  return 1;
case FILE:
return 2;
case FILE_LINK:
return 3;
case BROKEN_LINK:
return 4;
default :
throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + recordType + ""String_Node_Str"");
}
}",0.6428571428571429
168523,"private int extractRecursive(FSEntry rec,LinkedList<String> pathStack,File outDir,ProgressMonitor progressDialog,ObjectContainer<Boolean> overwriteAll,boolean dataFork,boolean resourceFork){
  System.err.println(""String_Node_Str"" + Util.concatenateStrings(pathStack,""String_Node_Str""));
  if (!dataFork && !resourceFork) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (progressDialog.cancelSignaled()) {
    return 0;
  }
  int errorCount=0;
  if (!outDir.exists()) {
    String[] options=new String[]{""String_Node_Str"",""String_Node_Str""};
    int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
    if (reply != 0) {
      ++errorCount;
      progressDialog.signalCancel();
      return errorCount;
    }
 else {
      if (!outDir.mkdirs()) {
        JOptionPane.showMessageDialog(this,""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
        ++errorCount;
        progressDialog.signalCancel();
        return errorCount;
      }
    }
  }
  if (rec instanceof FSLink) {
    String[] pathStackArray=pathStack.toArray(new String[pathStack.size()]);
    FSEntry linkTarget=((FSLink)rec).getLinkTarget(pathStackArray);
    if (linkTarget != null)     rec=linkTarget;
  }
  if (rec instanceof FSFile) {
    if (dataFork) {
      errorCount+=extractFile((FSFile)rec,outDir,progressDialog,overwriteAll,false);
    }
    if (resourceFork) {
      errorCount+=extractFile((FSFile)rec,outDir,progressDialog,overwriteAll,true);
    }
  }
 else   if (rec instanceof FSFolder) {
    String dirName=rec.getName();
    progressDialog.updateCurrentDir(dirName);
    FSEntry[] contents=((FSFolder)rec).list();
    File thisDir=new File(outDir,dirName);
    if (!overwriteAll.o && thisDir.exists()) {
      String[] options=new String[]{""String_Node_Str"",""String_Node_Str""};
      int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + thisDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
      if (reply != 0) {
        ++errorCount;
        progressDialog.signalCancel();
        return errorCount;
      }
    }
    if (thisDir.mkdir() || thisDir.exists()) {
      pathStack.addLast(rec.getName());
      try {
        for (        FSEntry outRec : contents) {
          errorCount+=extractRecursive(outRec,pathStack,thisDir,progressDialog,overwriteAll,dataFork,resourceFork);
        }
      }
  finally {
        pathStack.removeLast();
      }
    }
 else {
      int reply=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + thisDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      if (reply == JOptionPane.NO_OPTION) {
        progressDialog.signalCancel();
      }
      ++errorCount;
    }
  }
  return errorCount;
}","private void extractRecursive(FSEntry rec,LinkedList<String> pathStack,LinkedList<String[]> absPathsStack,File outDir,ProgressMonitor progressDialog,LinkedList<String> errorMessages,ObjectContainer<Boolean> overwriteAll,boolean dataFork,boolean resourceFork){
  if (!dataFork && !resourceFork) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (progressDialog.cancelSignaled()) {
    return;
  }
  if (!outDir.exists()) {
    String[] options=new String[]{""String_Node_Str"",""String_Node_Str""};
    int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + ""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
    if (reply != 0) {
      errorMessages.addLast(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str"");
      progressDialog.signalCancel();
      return;
    }
 else {
      if (!outDir.mkdirs()) {
        JOptionPane.showMessageDialog(this,""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
        errorMessages.addLast(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str"");
        progressDialog.signalCancel();
        return;
      }
    }
  }
  String[] absolutePath=null;
  if (rec instanceof FSLink) {
    FSLink curLink=(FSLink)rec;
    String[] pathStackArray=pathStack.toArray(new String[pathStack.size()]);
    String[] targetPath=fsHandler.getTargetPath(curLink,pathStackArray);
    if (targetPath != null) {
      if (Util.contains(absPathsStack,targetPath)) {
        System.err.println();
        System.err.println(""String_Node_Str"");
        System.err.println();
        errorMessages.addLast(""String_Node_Str"" + curLink.getName() + ""String_Node_Str""+ Util.concatenateStrings(pathStackArray,""String_Node_Str"")+ ""String_Node_Str"");
        return;
      }
      FSEntry linkTarget=fsHandler.getEntry(targetPath);
      if (linkTarget != null) {
        rec=linkTarget;
        absolutePath=targetPath;
      }
 else {
        errorMessages.addLast(""String_Node_Str"" + Util.concatenateStrings(targetPath,""String_Node_Str"") + ""String_Node_Str"");
        return;
      }
    }
 else {
      errorMessages.addLast(""String_Node_Str"" + curLink.getLinkTargetString() + ""String_Node_Str""+ Util.concatenateStrings(pathStackArray,""String_Node_Str"")+ ""String_Node_Str"");
      return;
    }
  }
  if (rec instanceof FSFile) {
    if (dataFork) {
      extractFile((FSFile)rec,outDir,progressDialog,errorMessages,overwriteAll,false);
    }
    if (resourceFork) {
      extractFile((FSFile)rec,outDir,progressDialog,errorMessages,overwriteAll,true);
    }
  }
 else   if (rec instanceof FSFolder) {
    String dirName=rec.getName();
    progressDialog.updateCurrentDir(dirName);
    FSEntry[] contents=((FSFolder)rec).listEntries();
    File thisDir=new File(outDir,dirName);
    if (!overwriteAll.o && thisDir.exists()) {
      String[] options=new String[]{""String_Node_Str"",""String_Node_Str""};
      int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + thisDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
      if (reply != 0) {
        errorMessages.addLast(""String_Node_Str"" + thisDir.getAbsolutePath() + ""String_Node_Str"");
        progressDialog.signalCancel();
        return;
      }
    }
    if (thisDir.mkdir() || thisDir.exists()) {
      pathStack.addLast(rec.getName());
      if (absolutePath != null)       absPathsStack.addLast(absolutePath);
      try {
        System.err.println(""String_Node_Str"" + Util.concatenateStrings(pathStack,""String_Node_Str""));
        System.err.println(""String_Node_Str"");
        for (        String[] cur : absPathsStack) {
          System.err.println(""String_Node_Str"" + Util.concatenateStrings(cur,""String_Node_Str""));
        }
        for (        FSEntry outRec : contents) {
          extractRecursive(outRec,pathStack,absPathsStack,thisDir,progressDialog,errorMessages,overwriteAll,dataFork,resourceFork);
        }
      }
  finally {
        if (absolutePath != null)         absPathsStack.removeLast();
        pathStack.removeLast();
      }
    }
 else {
      int reply=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + thisDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      if (reply == JOptionPane.NO_OPTION) {
        progressDialog.signalCancel();
      }
 else       errorMessages.addLast(""String_Node_Str"" + thisDir.getAbsolutePath() + ""String_Node_Str"");
      return;
    }
  }
}",0.586934417895272
168524,"/** 
 * Calculates the combined sizes of the forks of types <code>forkTypes</code> for the selection, including all files in subdirectories. If <code>forkTypes</code> is empty, all forks are included in the calculation.
 * @param selection
 * @param forkTypes
 * @return the total combined size of the data in the tree for the specified fork types.
 */
private long calculateForkSizeRecursive(FSEntry[] selection,LinkedList<String> pathStack,ProgressMonitor pm,FSForkType... forkTypes){
  long res=0;
  for (  FSEntry curEntry : selection) {
    if (pm.cancelSignaled()) {
      break;
    }
    if (curEntry instanceof FSLink) {
      FSLink curLink=(FSLink)curEntry;
      FSEntry linkTarget=curLink.getLinkTarget(pathStack.toArray(new String[pathStack.size()]));
      if (linkTarget != null) {
        System.err.println(""String_Node_Str"" + curLink.getLinkTargetString() + ""String_Node_Str""+ linkTarget.getName()+ ""String_Node_Str"");
        curEntry=linkTarget;
      }
 else       System.err.println(""String_Node_Str"" + curLink.getLinkTargetString() + ""String_Node_Str"");
    }
    if (curEntry instanceof FSFile) {
      FSFile curFile=(FSFile)curEntry;
      if (forkTypes.length > 0) {
        for (        FSForkType t : forkTypes) {
          FSFork curFork=curFile.getForkByType(t);
          if (curFork != null) {
            res+=curFork.getLength();
          }
        }
      }
 else {
        res+=curFile.getCombinedLength();
      }
    }
 else     if (curEntry instanceof FSFolder) {
      FSFolder curFolder=(FSFolder)curEntry;
      pathStack.addLast(curFolder.getName());
      try {
        res+=calculateForkSizeRecursive(curFolder.list(),pathStack,pm,forkTypes);
      }
  finally {
        pathStack.removeLast();
      }
    }
 else {
      System.err.println(""String_Node_Str"" + curEntry.getClass());
    }
  }
  return res;
}","/** 
 * Calculates the combined sizes of the forks of types <code>forkTypes</code> for the selection, including all files in subdirectories. If <code>forkTypes</code> is empty, all forks are included in the calculation.
 * @param selection
 * @param forkTypes
 * @return the total combined size of the data in the tree for the specified fork types.
 */
private long calculateForkSizeRecursive(FSEntry[] selection,LinkedList<String> pathStack,LinkedList<String[]> absPathsStack,ProgressMonitor pm,FSForkType... forkTypes){
  String[] pathStackArray=pathStack.toArray(new String[pathStack.size()]);
  String pathStackString=Util.concatenateStrings(pathStack,""String_Node_Str"");
  long res=0;
  for (  FSEntry curEntry : selection) {
    if (pm.cancelSignaled()) {
      break;
    }
    System.err.print(""String_Node_Str"");
    System.err.print(pathStackString);
    System.err.print(""String_Node_Str"");
    System.err.print(curEntry.getName());
    System.err.println(""String_Node_Str"");
    String[] absolutePath=null;
    if (curEntry instanceof FSLink) {
      FSLink curLink=(FSLink)curEntry;
      System.err.print(""String_Node_Str"" + curLink.getName() + ""String_Node_Str"");
      String[] targetPath=fsHandler.getTargetPath(curLink,pathStackArray);
      if (targetPath != null) {
        if (Util.contains(absPathsStack,targetPath)) {
          System.err.println();
          System.err.println(""String_Node_Str"");
          System.err.println();
          continue;
        }
        FSEntry linkTarget=fsHandler.getEntry(targetPath);
        if (linkTarget != null) {
          System.err.println(""String_Node_Str"" + curLink.getLinkTargetString() + ""String_Node_Str""+ linkTarget.getName()+ ""String_Node_Str"");
          curEntry=linkTarget;
          absolutePath=targetPath;
        }
 else         System.err.println(""String_Node_Str"" + curLink.getLinkTargetString() + ""String_Node_Str"");
      }
 else       System.err.println(""String_Node_Str"" + curLink.getLinkTargetString() + ""String_Node_Str"");
    }
    if (curEntry instanceof FSFile) {
      FSFile curFile=(FSFile)curEntry;
      if (forkTypes.length > 0) {
        for (        FSForkType t : forkTypes) {
          FSFork curFork=curFile.getForkByType(t);
          if (curFork != null) {
            res+=curFork.getLength();
          }
        }
      }
 else {
        res+=curFile.getCombinedLength();
      }
    }
 else     if (curEntry instanceof FSFolder) {
      FSFolder curFolder=(FSFolder)curEntry;
      pathStack.addLast(curFolder.getName());
      if (absolutePath != null)       absPathsStack.addLast(absolutePath);
      try {
        res+=calculateForkSizeRecursive(curFolder.listEntries(),pathStack,absPathsStack,pm,forkTypes);
      }
  finally {
        pathStack.removeLast();
        if (absolutePath != null)         absPathsStack.removeLast();
      }
    }
 else {
      System.err.println(""String_Node_Str"" + curEntry.getClass());
    }
  }
  return res;
}",0.6806565551631
168525,"@Override public List<Record<FSEntry>> getFolderContents(List<Record<FSEntry>> folderRecordPath){
  FSEntry lastEntry=folderRecordPath.get(folderRecordPath.size() - 1).getUserObject();
  if (lastEntry instanceof FSLink) {
    String[] parentPath=getFSPath(folderRecordPath,folderRecordPath.size() - 1);
    FSEntry linkTarget=((FSLink)lastEntry).getLinkTarget(parentPath);
    if (linkTarget == null) {
      JOptionPane.showMessageDialog(FileSystemBrowserWindow.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      throw new RuntimeException(""String_Node_Str"");
    }
 else     if (linkTarget instanceof FSFolder)     lastEntry=linkTarget;
 else     throw new RuntimeException(""String_Node_Str"" + lastEntry.getClass());
  }
  if (lastEntry instanceof FSFolder) {
    String[] folderPath=getFSPath(folderRecordPath);
    FSEntry[] entryArray=((FSFolder)lastEntry).list();
    ArrayList<Record<FSEntry>> entryList=new ArrayList<Record<FSEntry>>(entryArray.length);
    for (    FSEntry entry : entryArray) {
      Record<FSEntry> rec=new FSEntryRecord(entry,folderPath);
      entryList.add(rec);
    }
    return entryList;
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + lastEntry.getClass());
  }
}","@Override public List<Record<FSEntry>> getFolderContents(List<Record<FSEntry>> folderRecordPath){
  FSEntry lastEntry=folderRecordPath.get(folderRecordPath.size() - 1).getUserObject();
  if (lastEntry instanceof FSLink) {
    String[] parentPath=getFSPath(folderRecordPath,folderRecordPath.size() - 1);
    FSEntry linkTarget=((FSLink)lastEntry).getLinkTarget(parentPath);
    if (linkTarget == null) {
      JOptionPane.showMessageDialog(FileSystemBrowserWindow.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      throw new RuntimeException(""String_Node_Str"");
    }
 else     if (linkTarget instanceof FSFolder)     lastEntry=linkTarget;
 else     throw new RuntimeException(""String_Node_Str"" + lastEntry.getClass());
  }
  if (lastEntry instanceof FSFolder) {
    String[] folderPath=getFSPath(folderRecordPath);
    FSEntry[] entryArray=((FSFolder)lastEntry).listEntries();
    ArrayList<Record<FSEntry>> entryList=new ArrayList<Record<FSEntry>>(entryArray.length);
    for (    FSEntry entry : entryArray) {
      Record<FSEntry> rec=new FSEntryRecord(entry,folderPath);
      entryList.add(rec);
    }
    return entryList;
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + lastEntry.getClass());
  }
}",0.9971785570334544
168526,"/** 
 * <code>progressDialog</code> may NOT be null. 
 */
protected int extract(String[] parentPath,List<FSEntry> recs,File outDir,ProgressMonitor progressDialog,boolean dataFork,boolean resourceFork){
  int errorCount=0;
  LinkedList<String> pathStack=new LinkedList<String>();
  if (parentPath != null) {
    for (    String pathComponent : parentPath)     pathStack.addLast(pathComponent);
  }
  for (  FSEntry rec : recs) {
    errorCount+=extractRecursive(rec,pathStack,outDir,progressDialog,new ObjectContainer<Boolean>(false),dataFork,resourceFork);
  }
  return errorCount;
}","/** 
 * <code>progressDialog</code> may NOT be null. 
 */
protected void extract(String[] parentPath,List<FSEntry> recs,File outDir,ProgressMonitor progressDialog,LinkedList<String> errorMessages,boolean dataFork,boolean resourceFork){
  LinkedList<String> pathStack=new LinkedList<String>();
  if (parentPath != null) {
    for (    String pathComponent : parentPath)     pathStack.addLast(pathComponent);
  }
  if (errorMessages == null)   errorMessages=new LinkedList<String>();
  LinkedList<String[]> absPathStack=new LinkedList<String[]>();
  for (  FSEntry rec : recs) {
    extractRecursive(rec,pathStack,absPathStack,outDir,progressDialog,errorMessages,new ObjectContainer<Boolean>(false),dataFork,resourceFork);
  }
}",0.7593582887700535
168527,"private int extractFile(final FSFile rec,final File outDir,final ProgressMonitor progressDialog,final ObjectContainer<Boolean> overwriteAll,final boolean extractResourceFork){
  int errorCount=0;
  String filename=rec.getName();
  if (extractResourceFork) {
    filename=""String_Node_Str"" + filename;
  }
  while (true) {
    final FSFork theFork;
    if (!extractResourceFork) {
      theFork=rec.getMainFork();
    }
 else {
      theFork=rec.getForkByType(FSForkType.MACOS_RESOURCE);
    }
    if (theFork == null) {
      throw new RuntimeException(""String_Node_Str"" + (extractResourceFork ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
    }
    progressDialog.updateCurrentFile(filename,theFork.getLength());
    File outFile=new File(outDir,filename);
    if (!overwriteAll.o && outFile.exists()) {
      String[] options=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + outFile.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
      if (reply == 0)       ;
 else       if (reply == 1) {
        overwriteAll.o=true;
      }
 else       if (reply == 2) {
        ++errorCount;
        break;
      }
 else       if (reply == 3) {
        Object selection=JOptionPane.showInputDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE,null,null,filename);
        if (selection == null) {
          ++errorCount;
          progressDialog.signalCancel();
          break;
        }
 else {
          filename=selection.toString();
          continue;
        }
      }
 else {
        ++errorCount;
        progressDialog.signalCancel();
        break;
      }
    }
    try {
      try {
        outFile.getCanonicalPath();
      }
 catch (      Exception e) {
        throw new FileNotFoundException();
      }
      if (!outFile.getParentFile().equals(outDir) || !outFile.getName().equals(filename)) {
        throw new FileNotFoundException();
      }
      FileOutputStream fos=new FileOutputStream(outFile);
      extractForkToStream(theFork,fos,progressDialog);
      fos.close();
    }
 catch (    FileNotFoundException fnfe) {
      System.out.println(""String_Node_Str"" + outFile + ""String_Node_Str"");
      fnfe.printStackTrace();
      char[] filenameChars=filename.toCharArray();
      System.out.println(""String_Node_Str"" + filenameChars.length + ""String_Node_Str"");
      System.out.print(""String_Node_Str"");
      for (      char c : filenameChars) {
        System.out.print(""String_Node_Str"" + Util.toHexStringBE(c));
      }
      System.out.println();
      String[] options=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + outFile + ""String_Node_Str""+ outDir.getAbsolutePath()+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.ERROR_MESSAGE,null,options,options[0]);
      if (reply == 0) {
        ++errorCount;
      }
 else       if (reply == 2) {
        Object selection=JOptionPane.showInputDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE,null,null,filename);
        if (selection == null) {
          ++errorCount;
          progressDialog.signalCancel();
        }
 else {
          filename=selection.toString();
          continue;
        }
      }
 else {
        ++errorCount;
        progressDialog.signalCancel();
      }
    }
catch (    IOException ioe) {
      System.err.println(""String_Node_Str"" + outFile + ""String_Node_Str"");
      ioe.printStackTrace();
      String msg=ioe.getMessage();
      int reply=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + filename + ""String_Node_Str""+ outDir.getAbsolutePath()+ (msg != null ? ""String_Node_Str"" + msg + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      ++errorCount;
      if (reply == JOptionPane.NO_OPTION) {
        progressDialog.signalCancel();
      }
    }
catch (    Throwable e) {
      e.printStackTrace();
      String message=""String_Node_Str"" + filename + ""String_Node_Str"";
      message+=""String_Node_Str"" + e.toString();
      for (      StackTraceElement ste : e.getStackTrace()) {
        message+=""String_Node_Str"" + ste.toString();
      }
      message+=""String_Node_Str"";
      int reply=JOptionPane.showConfirmDialog(this,message + ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      ++errorCount;
      if (reply == JOptionPane.NO_OPTION) {
        progressDialog.signalCancel();
      }
    }
    break;
  }
  return errorCount;
}","private void extractFile(final FSFile rec,final File outDir,final ProgressMonitor progressDialog,final LinkedList<String> errorMessages,final ObjectContainer<Boolean> overwriteAll,final boolean extractResourceFork){
  String filename=rec.getName();
  if (extractResourceFork) {
    filename=""String_Node_Str"" + filename;
  }
  while (true) {
    final FSFork theFork;
    if (!extractResourceFork) {
      theFork=rec.getMainFork();
    }
 else {
      theFork=rec.getForkByType(FSForkType.MACOS_RESOURCE);
    }
    if (theFork == null) {
      throw new RuntimeException(""String_Node_Str"" + (extractResourceFork ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
    }
    progressDialog.updateCurrentFile(filename,theFork.getLength());
    File outFile=new File(outDir,filename);
    if (!overwriteAll.o && outFile.exists()) {
      String[] options=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + outFile.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
      if (reply == 0)       ;
 else       if (reply == 1) {
        overwriteAll.o=true;
      }
 else       if (reply == 2) {
        errorMessages.addLast(""String_Node_Str"" + outFile.getAbsolutePath() + ""String_Node_Str"");
        break;
      }
 else       if (reply == 3) {
        Object selection=JOptionPane.showInputDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE,null,null,filename);
        if (selection == null) {
          errorMessages.addLast(""String_Node_Str"" + outFile.getAbsolutePath() + ""String_Node_Str"");
          progressDialog.signalCancel();
          break;
        }
 else {
          filename=selection.toString();
          continue;
        }
      }
 else {
        errorMessages.addLast(""String_Node_Str"" + outFile.getAbsolutePath() + ""String_Node_Str"");
        progressDialog.signalCancel();
        break;
      }
    }
    try {
      try {
        outFile.getCanonicalPath();
      }
 catch (      Exception e) {
        throw new FileNotFoundException();
      }
      if (!outFile.getParentFile().equals(outDir) || !outFile.getName().equals(filename)) {
        throw new FileNotFoundException();
      }
      FileOutputStream fos=new FileOutputStream(outFile);
      extractForkToStream(theFork,fos,progressDialog);
      fos.close();
    }
 catch (    FileNotFoundException fnfe) {
      System.out.println(""String_Node_Str"" + outFile + ""String_Node_Str"");
      fnfe.printStackTrace();
      char[] filenameChars=filename.toCharArray();
      System.out.println(""String_Node_Str"" + filenameChars.length + ""String_Node_Str"");
      System.out.print(""String_Node_Str"");
      for (      char c : filenameChars) {
        System.out.print(""String_Node_Str"" + Util.toHexStringBE(c));
      }
      System.out.println();
      String[] options=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + outFile + ""String_Node_Str""+ outDir.getAbsolutePath()+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.ERROR_MESSAGE,null,options,options[0]);
      if (reply == 0) {
        errorMessages.addLast(""String_Node_Str"" + outFile.getAbsolutePath() + ""String_Node_Str"");
      }
 else       if (reply == 2) {
        Object selection=JOptionPane.showInputDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE,null,null,filename);
        if (selection == null) {
          errorMessages.addLast(""String_Node_Str"" + outFile.getAbsolutePath() + ""String_Node_Str"");
          progressDialog.signalCancel();
        }
 else {
          filename=selection.toString();
          continue;
        }
      }
 else {
        errorMessages.addLast(""String_Node_Str"" + outFile.getAbsolutePath() + ""String_Node_Str"");
        progressDialog.signalCancel();
      }
    }
catch (    IOException ioe) {
      System.err.println(""String_Node_Str"" + outFile + ""String_Node_Str"");
      ioe.printStackTrace();
      String msg=ioe.getMessage();
      int reply=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + filename + ""String_Node_Str""+ outDir.getAbsolutePath()+ (msg != null ? ""String_Node_Str"" + msg + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      errorMessages.addLast(""String_Node_Str"" + filename + ""String_Node_Str"");
      if (reply == JOptionPane.NO_OPTION) {
        progressDialog.signalCancel();
      }
    }
catch (    Throwable e) {
      e.printStackTrace();
      String message=""String_Node_Str"" + filename + ""String_Node_Str"";
      message+=""String_Node_Str"" + e.toString();
      for (      StackTraceElement ste : e.getStackTrace()) {
        message+=""String_Node_Str"" + ste.toString();
      }
      message+=""String_Node_Str"";
      int reply=JOptionPane.showConfirmDialog(this,message + ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      errorMessages.addLast(""String_Node_Str"" + filename + ""String_Node_Str"");
      if (reply == JOptionPane.NO_OPTION) {
        progressDialog.signalCancel();
      }
    }
    break;
  }
}",0.9064493962893884
168528,"public static String[] concatenate(String[] a,String[] b){
  String[] c=new String[a.length + b.length];
  System.arraycopy(a,0,c,0,a.length);
  System.arraycopy(b,0,c,a.length,b.length);
  return c;
}","public static <T>T[] concatenate(T[] a,T[] b,T[] target){
  System.arraycopy(a,0,target,0,a.length);
  System.arraycopy(b,0,target,a.length,b.length);
  return target;
}",0.7405405405405405
168529,"/** 
 * Creates an implementation specific extent descriptor from the given data.
 * @param startBlock the first block number of the extent.
 * @param blockCount the number of blocks that the extent ranges over.
 * @return an implementation specific representation of an extent descriptorcreated from the <code>startBlock</code> and <code>blockCount</code> parameters.
 * @throws java.lang.IllegalArgumentException if any of the values of <code>startBlock</code> or <code>blockCount</code> are out of range for the implementation (16-bit signed integer value for HFS, 32-bit signed integer value for HFS+).
 */
protected abstract CommonHFSExtentDescriptor createExtentDescriptor(long startBlock,long blockCount) throws IllegalArgumentException ;","/** 
 * Creates an implementation specific extent descriptor from the given data.
 * @param startBlock the first block number of the extent.
 * @param allocatedBlockCount the number of blocks that the extent ranges over.
 * @return an implementation specific representation of an extent descriptorcreated from the <code>startBlock</code> and <code>allocatedBlockCount</code> parameters.
 * @throws java.lang.IllegalArgumentException if any of the values of <code>startBlock</code> or <code>allocatedBlockCount</code> are out of range for the implementation (16-bit signed integer value for HFS, 32-bit signed integer value for HFS+).
 */
protected abstract CommonHFSExtentDescriptor createExtentDescriptor(long startBlock,long blockCount) throws IllegalArgumentException ;",0.978246539222149
168530,"/** 
 * Generic block counting algorithm.
 * @param usedBlocks whether the algorithm should count used blocks (true)or unused blocks (false).
 * @return the number of matching blocks.
 */
protected synchronized long countBlocks(boolean usedBlocks){
  CommonHFSVolumeHeader vh=parentView.getVolumeHeader();
  byte[] currentBlock=new byte[parentView.physicalBlockSize];
  final long totalBlocks=vh.getTotalBlocks();
  long blockCount=0;
  long matchingBlockCount=0;
  int blockValue=(usedBlocks ? 0x1 : 0x0);
  System.err.println(""String_Node_Str"" + totalBlocks);
  System.err.println(""String_Node_Str"" + allocationFileStream.length());
  allocationFileStream.seek(0);
  while (blockCount < totalBlocks) {
    System.err.println(""String_Node_Str"" + blockCount);
    System.err.println(""String_Node_Str"" + allocationFileStream.getFilePointer());
    System.out.println(""String_Node_Str"" + currentBlock.length + ""String_Node_Str"");
    int bytesRead=allocationFileStream.read(currentBlock);
    System.out.println(""String_Node_Str"" + bytesRead + ""String_Node_Str"");
    if (bytesRead >= 0) {
      for (int i=0; i < bytesRead && blockCount < totalBlocks; ++i) {
        byte currentByte=currentBlock[i];
        for (int j=0; j < 8 && blockCount < totalBlocks; ++j) {
          if (((currentByte >> (7 - j)) & 0x1) == blockValue)           ++matchingBlockCount;
          ++blockCount;
        }
      }
    }
 else     throw new RuntimeException(""String_Node_Str"");
  }
  if (blockCount != totalBlocks)   throw new RuntimeException(""String_Node_Str"" + blockCount + ""String_Node_Str""+ totalBlocks+ ""String_Node_Str"");
  return matchingBlockCount;
}","/** 
 * Loops through the entire allocation file to count the number of used and free blocks on the volume. The output is placed in two ObjectContainers
 * @param oFreeBlocks (optional) variable where the algorithm stores the free block count.
 * @param oUsedBlocks (optional) variable where the algorithm stores the used block count.
 * @return the total number of allocation blocks on the volume.
 */
public synchronized long countBlocks(ObjectContainer<Long> oFreeBlocks,ObjectContainer<Long> oUsedBlocks){
  CommonHFSVolumeHeader vh=parentView.getVolumeHeader();
  byte[] currentBlock=new byte[128 * 1024];
  final long totalBlocks=vh.getTotalBlocks();
  long blockCount=0;
  long usedBlockCount=0;
  System.err.println(""String_Node_Str"" + totalBlocks);
  System.err.println(""String_Node_Str"" + allocationFileStream.length());
  allocationFileStream.seek(0);
  while (blockCount < totalBlocks) {
    System.err.println(""String_Node_Str"" + blockCount);
    System.err.println(""String_Node_Str"" + allocationFileStream.getFilePointer());
    System.out.println(""String_Node_Str"" + currentBlock.length + ""String_Node_Str"");
    int bytesRead=allocationFileStream.read(currentBlock);
    System.out.println(""String_Node_Str"" + bytesRead + ""String_Node_Str"");
    if (bytesRead >= 0) {
      for (int i=0; i < bytesRead && blockCount < totalBlocks; ++i) {
        byte currentByte=currentBlock[i];
        for (int j=0; j < 8 && blockCount < totalBlocks; ++j) {
          ++blockCount;
          if (((currentByte >> (7 - j)) & 0x1) == 0x1)           ++usedBlockCount;
        }
      }
    }
 else     throw new RuntimeException(""String_Node_Str"");
  }
  if (blockCount != totalBlocks)   throw new RuntimeException(""String_Node_Str"" + blockCount + ""String_Node_Str""+ totalBlocks+ ""String_Node_Str"");
  if (oFreeBlocks != null)   oFreeBlocks.o=blockCount - usedBlockCount;
  if (oUsedBlocks != null)   oUsedBlocks.o=usedBlockCount;
  return totalBlocks;
}",0.3080344731720879
168531,"/** 
 * Creates new form AllocationFileInfoPanel 
 */
public AllocationFileInfoPanel(final BaseHFSAllocationFileView afView){
  this.afView=afView;
  initComponents();
  Thread t=new Thread(new Runnable(){
    @Override public void run(){
      final long allocatedBlocks=afView.countAllocatedBlocks();
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          allocatedBlocksField.setText(""String_Node_Str"" + allocatedBlocks);
        }
      }
);
      final long freeBlocks=afView.countFreeBlocks();
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          freeBlocksField.setText(""String_Node_Str"" + freeBlocks);
        }
      }
);
    }
  }
);
  t.start();
  allocateButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      allocateButton.setEnabled(false);
      Thread t=new Thread(new Runnable(){
        @Override public void run(){
          try {
            long l=Long.parseLong(allocateSizeField.getText());
            CommonHFSExtentDescriptor[] descs=afView.findFreeSpace(l);
            if (descs != null) {
              final ArrayBuilder ab=new ArrayBuilder(""String_Node_Str"" + descs.length + ""String_Node_Str"");
              for (              CommonHFSExtentDescriptor desc : descs) {
                System.err.println(""String_Node_Str"");
                desc.print(System.err,""String_Node_Str"");
                ab.add(desc.getStructElements());
              }
              SwingUtilities.invokeLater(new Runnable(){
                @Override public void run(){
                  resultScroller.setViewportView(new StructViewPanel(""String_Node_Str"",ab.getResult()));
                }
              }
);
            }
 else {
              JOptionPane.showMessageDialog(AllocationFileInfoPanel.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
            }
          }
 catch (          NumberFormatException ee) {
            JOptionPane.showMessageDialog(AllocationFileInfoPanel.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
          }
catch (          Throwable t) {
            t.printStackTrace();
            GUIUtil.displayExceptionDialog(t,10,AllocationFileInfoPanel.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
          }
 finally {
            SwingUtilities.invokeLater(new Runnable(){
              @Override public void run(){
                allocateButton.setEnabled(true);
              }
            }
);
          }
        }
      }
);
      t.start();
    }
  }
);
}","/** 
 * Creates new form AllocationFileInfoPanel 
 */
public AllocationFileInfoPanel(final BaseHFSAllocationFileView afView){
  this.afView=afView;
  initComponents();
  Thread t=new Thread(new Runnable(){
    @Override public void run(){
      final ObjectContainer<Long> freeBlocks=new ObjectContainer<Long>((long)-1);
      final ObjectContainer<Long> usedBlocks=new ObjectContainer<Long>((long)-1);
      afView.countBlocks(freeBlocks,usedBlocks);
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          allocatedBlocksField.setText(usedBlocks.o.toString());
          freeBlocksField.setText(freeBlocks.o.toString());
        }
      }
);
    }
  }
);
  t.start();
  allocateButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      allocateButton.setEnabled(false);
      Thread t=new Thread(new Runnable(){
        @Override public void run(){
          try {
            long l=Long.parseLong(allocateSizeField.getText());
            CommonHFSExtentDescriptor[] descs=afView.findFreeSpace(l);
            if (descs != null) {
              final ArrayBuilder ab=new ArrayBuilder(""String_Node_Str"" + descs.length + ""String_Node_Str"");
              for (              CommonHFSExtentDescriptor desc : descs) {
                System.err.println(""String_Node_Str"");
                desc.print(System.err,""String_Node_Str"");
                ab.add(desc.getStructElements());
              }
              SwingUtilities.invokeLater(new Runnable(){
                @Override public void run(){
                  resultScroller.setViewportView(new StructViewPanel(""String_Node_Str"",ab.getResult()));
                }
              }
);
            }
 else {
              JOptionPane.showMessageDialog(AllocationFileInfoPanel.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
            }
          }
 catch (          NumberFormatException ee) {
            JOptionPane.showMessageDialog(AllocationFileInfoPanel.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
          }
catch (          Throwable t) {
            t.printStackTrace();
            GUIUtil.displayExceptionDialog(t,10,AllocationFileInfoPanel.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
          }
 finally {
            SwingUtilities.invokeLater(new Runnable(){
              @Override public void run(){
                allocateButton.setEnabled(true);
              }
            }
);
          }
        }
      }
);
      t.start();
    }
  }
);
}",0.9059567132733192
168532,"private int extractRecursive(FSEntry rec,File outDir,ProgressMonitor progressDialog,ObjectContainer<Boolean> overwriteAll,boolean dataFork,boolean resourceFork){
  if (!dataFork && !resourceFork) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (progressDialog.cancelSignaled()) {
    progressDialog.confirmCancel();
    return 0;
  }
  int errorCount=0;
  if (!outDir.exists()) {
    String[] options=new String[]{""String_Node_Str"",""String_Node_Str""};
    int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
    if (reply != 0) {
      ++errorCount;
      progressDialog.signalCancel();
      return errorCount;
    }
 else {
      if (!outDir.mkdirs()) {
        JOptionPane.showMessageDialog(this,""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
        ++errorCount;
        progressDialog.signalCancel();
        return errorCount;
      }
    }
  }
  if (rec instanceof FSFile) {
    if (dataFork) {
      errorCount+=extractFile((FSFile)rec,outDir,progressDialog,overwriteAll,false);
    }
    if (resourceFork) {
      errorCount+=extractFile((FSFile)rec,outDir,progressDialog,overwriteAll,true);
    }
  }
 else   if (rec instanceof FSFolder) {
    String dirName=rec.getName();
    progressDialog.updateCurrentDir(dirName);
    FSEntry[] contents=((FSFolder)rec).list();
    File thisDir=new File(outDir,dirName);
    if (!overwriteAll.o && thisDir.exists()) {
      String[] options=new String[]{""String_Node_Str"",""String_Node_Str""};
      int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + thisDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
      if (reply != 0) {
        ++errorCount;
        progressDialog.signalCancel();
        return errorCount;
      }
    }
    if (thisDir.mkdir() || thisDir.exists()) {
      for (      FSEntry outRec : contents) {
        errorCount+=extractRecursive(outRec,thisDir,progressDialog,overwriteAll,dataFork,resourceFork);
      }
    }
 else {
      int reply=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + thisDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      if (reply == JOptionPane.NO_OPTION) {
        progressDialog.signalCancel();
      }
      ++errorCount;
    }
  }
  return errorCount;
}","private int extractRecursive(FSEntry rec,File outDir,ProgressMonitor progressDialog,ObjectContainer<Boolean> overwriteAll,boolean dataFork,boolean resourceFork){
  if (!dataFork && !resourceFork) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (progressDialog.cancelSignaled()) {
    progressDialog.confirmCancel();
    return 0;
  }
  int errorCount=0;
  if (!outDir.exists()) {
    String[] options=new String[]{""String_Node_Str"",""String_Node_Str""};
    int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
    if (reply != 0) {
      ++errorCount;
      progressDialog.signalCancel();
      return errorCount;
    }
 else {
      if (!outDir.mkdirs()) {
        JOptionPane.showMessageDialog(this,""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
        ++errorCount;
        progressDialog.signalCancel();
        return errorCount;
      }
    }
  }
  if (rec instanceof FSLink) {
    FSEntry linkTarget=((FSLink)rec).getLinkTarget();
    if (linkTarget != null)     rec=linkTarget;
  }
  if (rec instanceof FSFile) {
    if (dataFork) {
      errorCount+=extractFile((FSFile)rec,outDir,progressDialog,overwriteAll,false);
    }
    if (resourceFork) {
      errorCount+=extractFile((FSFile)rec,outDir,progressDialog,overwriteAll,true);
    }
  }
 else   if (rec instanceof FSFolder) {
    String dirName=rec.getName();
    progressDialog.updateCurrentDir(dirName);
    FSEntry[] contents=((FSFolder)rec).list();
    File thisDir=new File(outDir,dirName);
    if (!overwriteAll.o && thisDir.exists()) {
      String[] options=new String[]{""String_Node_Str"",""String_Node_Str""};
      int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + thisDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
      if (reply != 0) {
        ++errorCount;
        progressDialog.signalCancel();
        return errorCount;
      }
    }
    if (thisDir.mkdir() || thisDir.exists()) {
      for (      FSEntry outRec : contents) {
        errorCount+=extractRecursive(outRec,thisDir,progressDialog,overwriteAll,dataFork,resourceFork);
      }
    }
 else {
      int reply=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + thisDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      if (reply == JOptionPane.NO_OPTION) {
        progressDialog.signalCancel();
      }
      ++errorCount;
    }
  }
  return errorCount;
}",0.9749313815187556
168533,"/** 
 * Calculates the combined sizes of the forks of types <code>forkTypes</code> for the selection, including all files in subdirectories. If <code>forkTypes</code> is empty, all forks are included in the calculation.
 * @param selection
 * @param forkTypes
 * @return
 */
private long calculateForkSizeRecursive(FSEntry[] selection,FSForkType... forkTypes){
  long res=0;
  for (  FSEntry curEntry : selection) {
    if (curEntry instanceof FSFile) {
      FSFile curFile=(FSFile)curEntry;
      if (forkTypes.length > 0) {
        for (        FSForkType t : forkTypes) {
          FSFork curFork=curFile.getForkByType(t);
          if (curFork != null) {
            res+=curFork.getLength();
          }
        }
      }
 else {
        res+=curFile.getCombinedLength();
      }
    }
 else     if (curEntry instanceof FSFolder) {
      FSFolder curFolder=(FSFolder)curEntry;
      res+=calculateForkSizeRecursive(curFolder.list(),forkTypes);
    }
 else {
      System.err.println(""String_Node_Str"" + curEntry.getClass());
    }
  }
  return res;
}","/** 
 * Calculates the combined sizes of the forks of types <code>forkTypes</code> for the selection, including all files in subdirectories. If <code>forkTypes</code> is empty, all forks are included in the calculation.
 * @param selection
 * @param forkTypes
 * @return
 */
private long calculateForkSizeRecursive(FSEntry[] selection,FSForkType... forkTypes){
  long res=0;
  for (  FSEntry curEntry : selection) {
    if (curEntry instanceof FSLink) {
      FSLink curLink=(FSLink)curEntry;
      FSEntry linkTarget=curLink.getLinkTarget();
      if (linkTarget != null) {
        System.err.println(""String_Node_Str"" + curLink.getLinkTargetString() + ""String_Node_Str"");
        curEntry=linkTarget;
      }
 else       System.err.println(""String_Node_Str"" + curLink.getLinkTargetString() + ""String_Node_Str"");
    }
    if (curEntry instanceof FSFile) {
      FSFile curFile=(FSFile)curEntry;
      if (forkTypes.length > 0) {
        for (        FSForkType t : forkTypes) {
          FSFork curFork=curFile.getForkByType(t);
          if (curFork != null) {
            res+=curFork.getLength();
          }
        }
      }
 else {
        res+=curFile.getCombinedLength();
      }
    }
 else     if (curEntry instanceof FSFolder) {
      FSFolder curFolder=(FSFolder)curEntry;
      res+=calculateForkSizeRecursive(curFolder.list(),forkTypes);
    }
 else {
      System.err.println(""String_Node_Str"" + curEntry.getClass());
    }
  }
  return res;
}",0.7154213036565977
168534,"@Override public void actionDoubleClickFile(Record<FSEntry> record){
  FSEntry entry=record.getUserObject();
  if (entry instanceof FSFile)   FileSystemBrowserWindow.this.actionDoubleClickFile((FSFile)entry);
 else   throw new RuntimeException(""String_Node_Str"" + entry.getClass());
}","@Override public void actionDoubleClickFile(Record<FSEntry> record){
  FSEntry entry=record.getUserObject();
  if (entry instanceof FSFile) {
    FileSystemBrowserWindow.this.actionDoubleClickFile((FSFile)entry);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + entry.getClass());
  }
}",0.958904109589041
168535,"private void exitApplication(){
  if (tempFiles.size() > 0) {
    long totalFileSize=0;
    for (    File tempFile : tempFiles)     totalFileSize+=tempFile.length();
    int res=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + tempFiles.size() + ""String_Node_Str""+ totalFileSize+ ""String_Node_Str""+ System.getProperty(""String_Node_Str"")+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);
    if (res == JOptionPane.YES_OPTION) {
      for (      File tempFile : tempFiles) {
        if (!tempFile.exists())         continue;
        boolean delRes=tempFile.delete();
        while (!delRes) {
          int res2=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + tempFile.getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.ERROR_MESSAGE);
          if (res2 == JOptionPane.YES_OPTION)           delRes=tempFile.delete();
 else           if (res2 == JOptionPane.NO_OPTION)           break;
 else           return;
        }
      }
    }
 else     if (res != JOptionPane.NO_OPTION)     return;
  }
  setVisible(false);
  if (fsHandler != null) {
    fsHandler.close();
  }
  System.exit(0);
}","private void exitApplication(){
  try {
    if (tempFiles.size() > 0) {
      long totalFileSize=0;
      for (      File tempFile : tempFiles) {
        totalFileSize+=tempFile.length();
      }
      int res=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + tempFiles.size() + ""String_Node_Str""+ totalFileSize+ ""String_Node_Str""+ System.getProperty(""String_Node_Str"")+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);
      if (res == JOptionPane.YES_OPTION) {
        for (        File tempFile : tempFiles) {
          if (!tempFile.exists()) {
            continue;
          }
          boolean delRes=tempFile.delete();
          while (!delRes) {
            int res2=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + tempFile.getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.ERROR_MESSAGE);
            if (res2 == JOptionPane.YES_OPTION) {
              delRes=tempFile.delete();
            }
 else             if (res2 == JOptionPane.NO_OPTION) {
              break;
            }
 else {
              return;
            }
          }
        }
      }
 else       if (res != JOptionPane.NO_OPTION) {
        return;
      }
    }
    setVisible(false);
    if (fsHandler != null) {
      fsHandler.close();
    }
  }
 catch (  Throwable t) {
    GUIUtil.displayExceptionDialog(t,20,this,""String_Node_Str"");
  }
 finally {
    System.exit(0);
  }
}",0.8875607022786701
168536,"private int extractRecursive(FSEntry rec,File outDir,ProgressMonitor progressDialog,ObjectContainer<Boolean> overwriteAll,boolean dataFork,boolean resourceFork){
  if (!dataFork && !resourceFork)   throw new IllegalArgumentException(""String_Node_Str"");
  if (progressDialog.cancelSignaled()) {
    progressDialog.confirmCancel();
    return 0;
  }
  int errorCount=0;
  if (!outDir.exists()) {
    String[] options=new String[]{""String_Node_Str"",""String_Node_Str""};
    int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
    if (reply != 0) {
      ++errorCount;
      progressDialog.signalCancel();
      return errorCount;
    }
 else {
      if (!outDir.mkdirs()) {
        JOptionPane.showMessageDialog(this,""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
        ++errorCount;
        progressDialog.signalCancel();
        return errorCount;
      }
    }
  }
  if (rec instanceof FSFile) {
    if (dataFork)     errorCount+=extractFile((FSFile)rec,outDir,progressDialog,overwriteAll,false);
    if (resourceFork)     errorCount+=extractFile((FSFile)rec,outDir,progressDialog,overwriteAll,true);
  }
 else   if (rec instanceof FSFolder) {
    String dirName=rec.getName();
    progressDialog.updateCurrentDir(dirName);
    FSEntry[] contents=((FSFolder)rec).list();
    File thisDir=new File(outDir,dirName);
    if (!overwriteAll.o && thisDir.exists()) {
      String[] options=new String[]{""String_Node_Str"",""String_Node_Str""};
      int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + thisDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
      if (reply != 0) {
        ++errorCount;
        progressDialog.signalCancel();
        return errorCount;
      }
    }
    if (thisDir.mkdir() || thisDir.exists()) {
      for (      FSEntry outRec : contents) {
        errorCount+=extractRecursive(outRec,thisDir,progressDialog,overwriteAll,dataFork,resourceFork);
      }
    }
 else {
      int reply=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + thisDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      if (reply == JOptionPane.NO_OPTION)       progressDialog.signalCancel();
      ++errorCount;
    }
  }
  return errorCount;
}","private int extractRecursive(FSEntry rec,File outDir,ProgressMonitor progressDialog,ObjectContainer<Boolean> overwriteAll,boolean dataFork,boolean resourceFork){
  if (!dataFork && !resourceFork) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (progressDialog.cancelSignaled()) {
    progressDialog.confirmCancel();
    return 0;
  }
  int errorCount=0;
  if (!outDir.exists()) {
    String[] options=new String[]{""String_Node_Str"",""String_Node_Str""};
    int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
    if (reply != 0) {
      ++errorCount;
      progressDialog.signalCancel();
      return errorCount;
    }
 else {
      if (!outDir.mkdirs()) {
        JOptionPane.showMessageDialog(this,""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
        ++errorCount;
        progressDialog.signalCancel();
        return errorCount;
      }
    }
  }
  if (rec instanceof FSFile) {
    if (dataFork) {
      errorCount+=extractFile((FSFile)rec,outDir,progressDialog,overwriteAll,false);
    }
    if (resourceFork) {
      errorCount+=extractFile((FSFile)rec,outDir,progressDialog,overwriteAll,true);
    }
  }
 else   if (rec instanceof FSFolder) {
    String dirName=rec.getName();
    progressDialog.updateCurrentDir(dirName);
    FSEntry[] contents=((FSFolder)rec).list();
    File thisDir=new File(outDir,dirName);
    if (!overwriteAll.o && thisDir.exists()) {
      String[] options=new String[]{""String_Node_Str"",""String_Node_Str""};
      int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + thisDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
      if (reply != 0) {
        ++errorCount;
        progressDialog.signalCancel();
        return errorCount;
      }
    }
    if (thisDir.mkdir() || thisDir.exists()) {
      for (      FSEntry outRec : contents) {
        errorCount+=extractRecursive(outRec,thisDir,progressDialog,overwriteAll,dataFork,resourceFork);
      }
    }
 else {
      int reply=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + thisDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      if (reply == JOptionPane.NO_OPTION) {
        progressDialog.signalCancel();
      }
      ++errorCount;
    }
  }
  return errorCount;
}",0.9924357034795764
168537,"public static RecordType entryTypeToRecordType(FSEntry entry){
  if (entry instanceof FSFile)   return RecordType.FILE;
 else   if (entry instanceof FSFolder)   return RecordType.FOLDER;
 else   throw new IllegalArgumentException(""String_Node_Str"" + entry.getClass());
}","public static RecordType entryTypeToRecordType(FSEntry entry){
  if (entry instanceof FSFile) {
    return RecordType.FILE;
  }
 else   if (entry instanceof FSFolder) {
    return RecordType.FOLDER;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + entry.getClass());
  }
}",0.8085106382978723
168538,"public static long getEntrySize(FSEntry entry){
  if (entry instanceof FSFile)   return ((FSFile)entry).getMainFork().getLength();
 else   if (entry instanceof FSFolder)   return 0;
 else   throw new IllegalArgumentException(""String_Node_Str"" + entry.getClass());
}","public static long getEntrySize(FSEntry entry){
  if (entry instanceof FSFile) {
    return ((FSFile)entry).getMainFork().getLength();
  }
 else   if (entry instanceof FSFolder) {
    return 0;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + entry.getClass());
  }
}",0.9386281588447654
168539,"/** 
 * Calculates the combined sizes of the forks of types <code>forkTypes</code> for the selection, including all files in subdirectories. If <code>forkTypes</code> is empty, all forks are included in the calculation.
 * @param selection
 * @param forkTypes
 * @return
 */
private long calculateForkSizeRecursive(FSEntry[] selection,FSForkType... forkTypes){
  long res=0;
  for (  FSEntry curEntry : selection) {
    if (curEntry instanceof FSFile) {
      FSFile curFile=(FSFile)curEntry;
      if (forkTypes.length > 0) {
        for (        FSForkType t : forkTypes) {
          FSFork curFork=curFile.getForkByType(t);
          if (curFork != null)           res+=curFork.getLength();
        }
      }
 else       res+=curFile.getCombinedLength();
    }
 else     if (curEntry instanceof FSFolder) {
      FSFolder curFolder=(FSFolder)curEntry;
      res+=calculateForkSizeRecursive(curFolder.list(),forkTypes);
    }
 else     System.err.println(""String_Node_Str"" + curEntry.getClass());
  }
  return res;
}","/** 
 * Calculates the combined sizes of the forks of types <code>forkTypes</code> for the selection, including all files in subdirectories. If <code>forkTypes</code> is empty, all forks are included in the calculation.
 * @param selection
 * @param forkTypes
 * @return
 */
private long calculateForkSizeRecursive(FSEntry[] selection,FSForkType... forkTypes){
  long res=0;
  for (  FSEntry curEntry : selection) {
    if (curEntry instanceof FSFile) {
      FSFile curFile=(FSFile)curEntry;
      if (forkTypes.length > 0) {
        for (        FSForkType t : forkTypes) {
          FSFork curFork=curFile.getForkByType(t);
          if (curFork != null) {
            res+=curFork.getLength();
          }
        }
      }
 else {
        res+=curFile.getCombinedLength();
      }
    }
 else     if (curEntry instanceof FSFolder) {
      FSFolder curFolder=(FSFolder)curEntry;
      res+=calculateForkSizeRecursive(curFolder.list(),forkTypes);
    }
 else {
      System.err.println(""String_Node_Str"" + curEntry.getClass());
    }
  }
  return res;
}",0.9778206364513018
168540,"public static void main(String[] args){
  try {
    javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception e) {
  }
  int parsedArgs=0;
  final FileSystemBrowserWindow fsbWindow;
  if (args.length > 0 && args[0].equals(DEBUG_CONSOLE_ARG)) {
    DebugConsoleWindow dcw=new DebugConsoleWindow();
    System.setOut(new PrintStream(dcw.debugStream));
    System.setErr(new PrintStream(dcw.debugStream));
    fsbWindow=new FileSystemBrowserWindow(dcw);
    ++parsedArgs;
  }
 else   fsbWindow=new FileSystemBrowserWindow();
  fsbWindow.setVisible(true);
  if (args.length > parsedArgs) {
    String filename=args[parsedArgs];
    try {
      String pathNameTmp;
      try {
        pathNameTmp=new File(filename).getCanonicalPath();
      }
 catch (      Exception e) {
        pathNameTmp=filename;
      }
      final String pathName=pathNameTmp;
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          fsbWindow.loadFSWithUDIFAutodetect(pathName);
        }
      }
);
    }
 catch (    Exception ioe) {
      if (ioe.getMessage().equals(""String_Node_Str"")) {
        JOptionPane.showMessageDialog(fsbWindow,""String_Node_Str"" + filename + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
 else {
        ioe.printStackTrace();
        String msg=""String_Node_Str"" + ""String_Node_Str"" + filename + ""String_Node_Str""+ ioe.toString();
        for (        StackTraceElement ste : ioe.getStackTrace())         msg+=""String_Node_Str"" + ste.toString();
        JOptionPane.showMessageDialog(fsbWindow,msg,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
    }
  }
}","public static void main(String[] args){
  try {
    javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception e) {
  }
  int parsedArgs=0;
  final FileSystemBrowserWindow fsbWindow;
  if (args.length > 0 && args[0].equals(DEBUG_CONSOLE_ARG)) {
    DebugConsoleWindow dcw=new DebugConsoleWindow();
    System.setOut(new PrintStream(dcw.debugStream));
    System.setErr(new PrintStream(dcw.debugStream));
    fsbWindow=new FileSystemBrowserWindow(dcw);
    ++parsedArgs;
  }
 else {
    fsbWindow=new FileSystemBrowserWindow();
  }
  fsbWindow.setVisible(true);
  if (args.length > parsedArgs) {
    String filename=args[parsedArgs];
    try {
      String pathNameTmp;
      try {
        pathNameTmp=new File(filename).getCanonicalPath();
      }
 catch (      Exception e) {
        pathNameTmp=filename;
      }
      final String pathName=pathNameTmp;
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          fsbWindow.loadFSWithUDIFAutodetect(pathName);
        }
      }
);
    }
 catch (    Exception ioe) {
      if (ioe.getMessage().equals(""String_Node_Str"")) {
        JOptionPane.showMessageDialog(fsbWindow,""String_Node_Str"" + filename + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
 else {
        ioe.printStackTrace();
        String msg=""String_Node_Str"" + ""String_Node_Str"" + filename + ""String_Node_Str""+ ioe.toString();
        for (        StackTraceElement ste : ioe.getStackTrace()) {
          msg+=""String_Node_Str"" + ste.toString();
        }
        JOptionPane.showMessageDialog(fsbWindow,msg,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
    }
  }
}",0.9935217903415784
168541,"public FileSystemBrowserWindow(final DebugConsoleWindow dcw){
  super(TITLE_STRING);
  if (Java6Specific.isJava6OrHigher())   Java6Specific.setIconImages(WINDOW_ICONS,this);
 else   setIconImage(WINDOW_ICONS[0].getImage());
  fsb=new FileSystemBrowser<FSEntry>(new FileSystemProvider());
  JMenuItem loadFSFromDeviceItem=null;
  if (WindowsLowLevelIO.isSystemSupported()) {
    loadFSFromDeviceItem=new JMenuItem(""String_Node_Str"");
    loadFSFromDeviceItem.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent ae){
        SelectWindowsDeviceDialog deviceDialog=new SelectWindowsDeviceDialog(FileSystemBrowserWindow.this,true,""String_Node_Str"");
        deviceDialog.setVisible(true);
        ReadableRandomAccessStream io=deviceDialog.getPartitionStream();
        String pathName=deviceDialog.getPathName();
        if (io != null) {
          try {
            loadFS(io,pathName);
          }
 catch (          Exception e) {
            System.err.print(""String_Node_Str"" + pathName + ""String_Node_Str"");
            e.printStackTrace();
            JOptionPane.showMessageDialog(FileSystemBrowserWindow.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
          }
        }
      }
    }
);
    loadFSFromDeviceItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_L,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
  }
  JMenuItem loadFSFromFileItem=new JMenuItem(""String_Node_Str"");
  loadFSFromFileItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent ae){
      fileChooser.setMultiSelectionEnabled(false);
      fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
      if (fileChooser.showOpenDialog(FileSystemBrowserWindow.this) == JFileChooser.APPROVE_OPTION) {
        try {
          String pathName=fileChooser.getSelectedFile().getCanonicalPath();
          loadFS(pathName);
        }
 catch (        IOException ioe) {
          ioe.printStackTrace();
          JOptionPane.showMessageDialog(FileSystemBrowserWindow.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
        }
catch (        Exception e) {
          e.printStackTrace();
          JOptionPane.showMessageDialog(FileSystemBrowserWindow.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
        }
      }
    }
  }
);
  loadFSFromFileItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
  JMenuItem openUDIFItem=new JMenuItem(""String_Node_Str"");
  openUDIFItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent ae){
      fileChooser.setMultiSelectionEnabled(false);
      fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
      SimpleFileFilter sff=new SimpleFileFilter();
      sff.addExtension(""String_Node_Str"");
      sff.setDescription(""String_Node_Str"");
      fileChooser.setFileFilter(sff);
      int res=fileChooser.showOpenDialog(FileSystemBrowserWindow.this);
      if (res == JFileChooser.APPROVE_OPTION) {
        try {
          File selectedFile=fileChooser.getSelectedFile();
          String pathName=selectedFile.getCanonicalPath();
          loadFSWithUDIFAutodetect(pathName);
        }
 catch (        IOException ioe) {
          ioe.printStackTrace();
          JOptionPane.showMessageDialog(FileSystemBrowserWindow.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
        }
catch (        Exception e) {
          e.printStackTrace();
          JOptionPane.showMessageDialog(FileSystemBrowserWindow.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
        }
      }
      fileChooser.resetChoosableFileFilters();
    }
  }
);
  openUDIFItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_D,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
  JMenuItem openFromPosItem=new JMenuItem(""String_Node_Str"");
  openFromPosItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent ae){
      fileChooser.setMultiSelectionEnabled(false);
      fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
      SimpleFileFilter sff=new SimpleFileFilter();
      sff.addExtension(""String_Node_Str"");
      sff.setDescription(""String_Node_Str"");
      fileChooser.setFileFilter(sff);
      int res=fileChooser.showOpenDialog(FileSystemBrowserWindow.this);
      if (res == JFileChooser.APPROVE_OPTION) {
        try {
          File selectedFile=fileChooser.getSelectedFile();
          String pathName=selectedFile.getCanonicalPath();
          String s=JOptionPane.showInputDialog(FileSystemBrowserWindow.this,""String_Node_Str"");
          long pos=Long.parseLong(s);
          loadFSWithUDIFAutodetect(pathName,pos);
        }
 catch (        IOException ioe) {
          ioe.printStackTrace();
          JOptionPane.showMessageDialog(FileSystemBrowserWindow.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
        }
catch (        Exception e) {
          e.printStackTrace();
          JOptionPane.showMessageDialog(FileSystemBrowserWindow.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
        }
      }
      fileChooser.resetChoosableFileFilters();
    }
  }
);
  JMenuItem debugConsoleItem=null;
  if (dcw != null) {
    debugConsoleItem=new JMenuItem(""String_Node_Str"");
    debugConsoleItem.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent ae){
        dcw.setVisible(true);
      }
    }
);
  }
  JMenuItem exitProgramItem=null;
  if (!System.getProperty(""String_Node_Str"").toLowerCase().startsWith(""String_Node_Str"")) {
    exitProgramItem=new JMenuItem(""String_Node_Str"");
    exitProgramItem.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent ae){
        exitApplication();
      }
    }
);
    exitProgramItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
  }
 else {
    MacSpecific.registerQuitHandler(new MacSpecific.QuitHandler(){
      @Override public boolean acceptQuit(){
        exitApplication();
        return false;
      }
    }
);
  }
  JMenuItem fsInfoItem=new JMenuItem(""String_Node_Str"");
  fsInfoItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent ae){
      if (fsHandler != null) {
        VolumeInfoWindow infoWindow=new VolumeInfoWindow(fsHandler.getFSView());
        infoWindow.setVisible(true);
        CommonHFSVolumeHeader cvh=fsHandler.getFSView().getVolumeHeader();
        if (cvh instanceof CommonHFSVolumeHeader.HFSPlusImplementation) {
          HFSPlusVolumeHeader vh=((CommonHFSVolumeHeader.HFSPlusImplementation)cvh).getUnderlying();
          if (vh.getAttributeVolumeJournaled())           infoWindow.setJournalFields(fsHandler.getFSView().getJournalInfoBlock());
        }
      }
 else       JOptionPane.showMessageDialog(FileSystemBrowserWindow.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
);
  fsInfoItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_I,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
  toggleCachingItem=new JCheckBoxMenuItem(""String_Node_Str"");
  toggleCachingItem.setState(true);
  toggleCachingItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent ae){
      if (fsHandler != null) {
        if (toggleCachingItem.getState()) {
          System.out.print(""String_Node_Str"");
          fsHandler.getFSView().enableFileSystemCaching();
          System.out.println(""String_Node_Str"");
        }
 else {
          System.out.print(""String_Node_Str"");
          fsHandler.getFSView().disableFileSystemCaching();
          System.out.println(""String_Node_Str"");
        }
      }
    }
  }
);
  JMenuItem setFileReadOffsetItem=new JMenuItem(""String_Node_Str"");
  setFileReadOffsetItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent ae){
      String s=JOptionPane.showInputDialog(FileSystemBrowserWindow.this,""String_Node_Str"",BaseHFSFileSystemView.fileReadOffset);
      if (s != null) {
        BaseHFSFileSystemView.fileReadOffset=Long.parseLong(s);
      }
    }
  }
);
  JMenuItem startHelpBrowserItem=new JMenuItem(""String_Node_Str"");
  startHelpBrowserItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent ae){
      File f=new File(""String_Node_Str"");
      if (f.exists()) {
        try {
          HelpBrowserPanel.showHelpBrowserWindow(""String_Node_Str"",f.toURI().toURL());
        }
 catch (        MalformedURLException ex) {
          ex.printStackTrace();
          Logger.getLogger(FileSystemBrowserWindow.class.getName()).log(Level.WARNING,null,ex);
        }
      }
    }
  }
);
  JMenuItem checkUpdatesItem=new JMenuItem(""String_Node_Str"");
  checkUpdatesItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent ae){
      InputStream infoDictStream=null;
      for (      String s : VERSION_INFO_DICTIONARY) {
        try {
          System.out.println(""String_Node_Str"" + s + ""String_Node_Str"");
          infoDictStream=new URL(s).openStream();
          SimpleDictionaryParser sdp=new SimpleDictionaryParser(infoDictStream);
          String dictVersion=sdp.getValue(""String_Node_Str"");
          long dictBuildNumber=Long.parseLong(sdp.getValue(""String_Node_Str""));
          System.out.println(""String_Node_Str"" + dictVersion);
          System.out.println(""String_Node_Str"" + dictBuildNumber);
          boolean dictVersionIsHigher=false;
          if (true) {
            dictVersionIsHigher=dictBuildNumber > BuildNumber.BUILD_NUMBER;
          }
 else {
            char[] dictVersionArray=dictVersion.toCharArray();
            char[] myVersionArray=HFSExplorer.VERSION.toCharArray();
            int minArrayLength=Math.min(dictVersionArray.length,myVersionArray.length);
            boolean foundDifference=false;
            for (int i=0; i < minArrayLength; ++i) {
              if (dictVersionArray[i] > myVersionArray[i]) {
                dictVersionIsHigher=true;
                foundDifference=true;
                break;
              }
 else               if (dictVersionArray[i] < myVersionArray[i]) {
                dictVersionIsHigher=false;
                foundDifference=true;
                break;
              }
            }
            if (!foundDifference)             dictVersionIsHigher=dictVersionArray.length > myVersionArray.length;
          }
          if (dictVersionIsHigher)           JOptionPane.showMessageDialog(FileSystemBrowserWindow.this,""String_Node_Str"" + ""String_Node_Str"" + dictVersion + ""String_Node_Str""+ dictBuildNumber+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
 else           JOptionPane.showMessageDialog(FileSystemBrowserWindow.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
          return;
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
      JOptionPane.showMessageDialog(FileSystemBrowserWindow.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
);
  JMenuItem aboutItem=new JMenuItem(""String_Node_Str"");
  aboutItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent ae){
      String message=""String_Node_Str"";
      message+=""String_Node_Str"" + HFSExplorer.VERSION + ""String_Node_Str""+ BuildNumber.BUILD_NUMBER+ ""String_Node_Str"";
      message+=HFSExplorer.COPYRIGHT + ""String_Node_Str"";
      for (      String notice : HFSExplorer.NOTICES) {
        message+=notice + ""String_Node_Str"";
      }
      message+=""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ System.getProperty(""String_Node_Str"");
      message+=""String_Node_Str"" + System.getProperty(""String_Node_Str"");
      message+=""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ System.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ System.getProperty(""String_Node_Str"");
      JOptionPane.showMessageDialog(FileSystemBrowserWindow.this,message,""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
    }
  }
);
  JMenu fileMenu=new JMenu(""String_Node_Str"");
  JMenu infoMenu=new JMenu(""String_Node_Str"");
  JMenu helpMenu=new JMenu(""String_Node_Str"");
  if (loadFSFromDeviceItem != null)   fileMenu.add(loadFSFromDeviceItem);
  fileMenu.add(loadFSFromFileItem);
  fileMenu.add(openUDIFItem);
  fileMenu.add(openFromPosItem);
  if (debugConsoleItem != null)   fileMenu.add(debugConsoleItem);
  if (exitProgramItem != null)   fileMenu.add(exitProgramItem);
  infoMenu.add(fsInfoItem);
  infoMenu.add(toggleCachingItem);
  infoMenu.add(setFileReadOffsetItem);
  helpMenu.add(startHelpBrowserItem);
  helpMenu.add(checkUpdatesItem);
  helpMenu.add(aboutItem);
  JMenuBar menuBar=new JMenuBar();
  menuBar.add(fileMenu);
  menuBar.add(infoMenu);
  menuBar.add(helpMenu);
  setJMenuBar(menuBar);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent we){
      exitApplication();
    }
  }
);
  setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
  add(fsb.getViewComponent(),BorderLayout.CENTER);
  pack();
  setLocationRelativeTo(null);
}","public FileSystemBrowserWindow(final DebugConsoleWindow dcw){
  super(TITLE_STRING);
  this.dcw=dcw;
  if (Java6Specific.isJava6OrHigher()) {
    Java6Specific.setIconImages(WINDOW_ICONS,this);
  }
 else {
    setIconImage(WINDOW_ICONS[0].getImage());
  }
  fsb=new FileSystemBrowser<FSEntry>(new FileSystemProvider());
  setUpMenus();
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent we){
      exitApplication();
    }
  }
);
  setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
  add(fsb.getViewComponent(),BorderLayout.CENTER);
  pack();
  setLocationRelativeTo(null);
}",0.0819321744086634
168542,"public void loadFSWithUDIFAutodetect(String filename,long pos){
  ReadableRandomAccessStream fsFile;
  try {
    if (WindowsLowLevelIO.isSystemSupported())     fsFile=new WindowsLowLevelIO(filename);
 else     fsFile=new ReadableFileStream(filename);
    try {
      if (UDIFRecognizer.isUDIF(fsFile)) {
        ReadableUDIFStream stream=null;
        try {
          stream=new ReadableUDIFStream(filename);
        }
 catch (        Exception e) {
          e.printStackTrace();
          if (e.getMessage().startsWith(""String_Node_Str"")) {
            JOptionPane.showMessageDialog(FileSystemBrowserWindow.this,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
          }
 else {
            JOptionPane.showMessageDialog(FileSystemBrowserWindow.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
          }
          return;
        }
        if (stream != null) {
          fsFile.close();
          fsFile=stream;
        }
      }
 else {
        System.err.println(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
    }
    if (pos != 0)     fsFile=new ReadableConcatenatedStream(fsFile,pos,fsFile.length() - pos);
    String displayName;
    try {
      displayName=new File(filename).getCanonicalFile().getName();
    }
 catch (    Exception e) {
      displayName=filename;
    }
    loadFS(fsFile,displayName);
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
    JOptionPane.showMessageDialog(this,""String_Node_Str"" + filename + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
}","public void loadFSWithUDIFAutodetect(String filename,long pos){
  ReadableRandomAccessStream fsFile;
  try {
    if (WindowsLowLevelIO.isSystemSupported()) {
      fsFile=new WindowsLowLevelIO(filename);
    }
 else {
      fsFile=new ReadableFileStream(filename);
    }
    try {
      if (UDIFRecognizer.isUDIF(fsFile)) {
        ReadableUDIFStream stream=null;
        try {
          stream=new ReadableUDIFStream(filename);
        }
 catch (        Exception e) {
          e.printStackTrace();
          if (e.getMessage().startsWith(""String_Node_Str"")) {
            JOptionPane.showMessageDialog(FileSystemBrowserWindow.this,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
          }
 else {
            JOptionPane.showMessageDialog(FileSystemBrowserWindow.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
          }
          return;
        }
        if (stream != null) {
          fsFile.close();
          fsFile=stream;
        }
      }
 else {
        System.err.println(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
    }
    if (pos != 0) {
      fsFile=new ReadableConcatenatedStream(fsFile,pos,fsFile.length() - pos);
    }
    String displayName;
    try {
      displayName=new File(filename).getCanonicalFile().getName();
    }
 catch (    Exception e) {
      displayName=filename;
    }
    loadFS(fsFile,displayName);
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
    JOptionPane.showMessageDialog(this,""String_Node_Str"" + filename + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
}",0.9890300230946882
168543,"@Override public List<Record<FSEntry>> getFolderContents(List<Record<FSEntry>> folderRecordPath){
  FSEntry lastEntry=folderRecordPath.get(folderRecordPath.size() - 1).getUserObject();
  if (lastEntry instanceof FSFolder) {
    FSEntry[] entryArray=((FSFolder)lastEntry).list();
    ArrayList<Record<FSEntry>> entryList=new ArrayList<Record<FSEntry>>(entryArray.length);
    for (    FSEntry entry : entryArray) {
      Record<FSEntry> rec=new FSEntryRecord(entry);
      entryList.add(rec);
    }
    return entryList;
  }
 else   throw new RuntimeException(""String_Node_Str"" + lastEntry.getClass());
}","@Override public List<Record<FSEntry>> getFolderContents(List<Record<FSEntry>> folderRecordPath){
  FSEntry lastEntry=folderRecordPath.get(folderRecordPath.size() - 1).getUserObject();
  if (lastEntry instanceof FSFolder) {
    FSEntry[] entryArray=((FSFolder)lastEntry).list();
    ArrayList<Record<FSEntry>> entryList=new ArrayList<Record<FSEntry>>(entryArray.length);
    for (    FSEntry entry : entryArray) {
      Record<FSEntry> rec=new FSEntryRecord(entry);
      entryList.add(rec);
    }
    return entryList;
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + lastEntry.getClass());
  }
}",0.9934102141680397
168544,"private long extractForkToStream(FSFork theFork,OutputStream os,ProgressMonitor pm) throws IOException {
  ReadableRandomAccessStream forkFilter=theFork.getReadableRandomAccessStream();
  final long originalLength=theFork.getLength();
  long bytesToRead=originalLength;
  byte[] buffer=new byte[4096];
  while (bytesToRead > 0) {
    if (pm.cancelSignaled())     break;
    int bytesRead=forkFilter.read(buffer,0,(bytesToRead < buffer.length ? (int)bytesToRead : buffer.length));
    if (bytesRead < 0)     break;
 else {
      pm.addDataProgress(bytesRead);
      os.write(buffer,0,bytesRead);
      bytesToRead-=bytesRead;
    }
  }
  return originalLength - bytesToRead;
}","private long extractForkToStream(FSFork theFork,OutputStream os,ProgressMonitor pm) throws IOException {
  ReadableRandomAccessStream forkFilter=theFork.getReadableRandomAccessStream();
  final long originalLength=theFork.getLength();
  long bytesToRead=originalLength;
  byte[] buffer=new byte[4096];
  while (bytesToRead > 0) {
    if (pm.cancelSignaled()) {
      break;
    }
    int bytesRead=forkFilter.read(buffer,0,(bytesToRead < buffer.length ? (int)bytesToRead : buffer.length));
    if (bytesRead < 0) {
      break;
    }
 else {
      pm.addDataProgress(bytesRead);
      os.write(buffer,0,bytesRead);
      bytesToRead-=bytesRead;
    }
  }
  return originalLength - bytesToRead;
}",0.9562043795620438
168545,"@Override public void actionExtractToDir(List<Record<FSEntry>> recordList){
  List<FSEntry> fsEntryList=new ArrayList<FSEntry>(recordList.size());
  for (  Record<FSEntry> rec : recordList)   fsEntryList.add(rec.getUserObject());
  FileSystemBrowserWindow.this.actionExtractToDir(fsEntryList,true,false);
}","@Override public void actionExtractToDir(List<Record<FSEntry>> recordList){
  List<FSEntry> fsEntryList=new ArrayList<FSEntry>(recordList.size());
  for (  Record<FSEntry> rec : recordList) {
    fsEntryList.add(rec.getUserObject());
  }
  FileSystemBrowserWindow.this.actionExtractToDir(fsEntryList,true,false);
}",0.9870967741935484
168546,"public void loadFS(ReadableRandomAccessStream fsFile,String displayName){
  int blockSize=0x200;
  int ddrBlockSize;
  long fsOffset;
  long fsLength;
  PartitionSystemRecognizer psRec=new PartitionSystemRecognizer(fsFile);
  PartitionSystem partSys=psRec.getPartitionSystem();
  if (partSys != null) {
    Partition[] partitions=partSys.getUsedPartitionEntries();
    if (partitions.length == 0) {
      fsOffset=0;
      fsLength=fsFile.length();
    }
 else {
      Object selectedValue;
      int firstPreferredPartition=0;
      for (int i=0; i < partitions.length; ++i) {
        Partition p=partitions[i];
        if (p.getType() == Partition.PartitionType.APPLE_HFS) {
          firstPreferredPartition=i;
          break;
        }
      }
      while (true) {
        selectedValue=JOptionPane.showInputDialog(this,""String_Node_Str"",""String_Node_Str"" + partSys.getLongName() + ""String_Node_Str"",JOptionPane.QUESTION_MESSAGE,null,partitions,partitions[firstPreferredPartition]);
        if (selectedValue != null && selectedValue instanceof Partition) {
          Partition selectedPartition=(Partition)selectedValue;
          if (selectedPartition.getType() == Partition.PartitionType.APPLE_HFS)           break;
 else           JOptionPane.showMessageDialog(this,""String_Node_Str"" + selectedPartition.getType() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
        }
 else         return;
      }
      if (selectedValue instanceof Partition) {
        Partition selectedPartition=(Partition)selectedValue;
        fsOffset=selectedPartition.getStartOffset();
        fsLength=selectedPartition.getLength();
      }
 else       throw new RuntimeException(""String_Node_Str"");
    }
  }
 else {
    fsOffset=0;
    fsLength=fsFile.length();
  }
  FileSystemRecognizer fsr=new FileSystemRecognizer(fsFile,fsOffset);
  FileSystemRecognizer.FileSystemType fsType=fsr.detectFileSystem();
  if (fsType == FileSystemRecognizer.FileSystemType.HFS_WRAPPED_HFS_PLUS) {
    byte[] mdbData=new byte[HFSPlusWrapperMDB.STRUCTSIZE];
    fsFile.seek(fsOffset + 1024);
    fsFile.read(mdbData);
    HFSPlusWrapperMDB mdb=new HFSPlusWrapperMDB(mdbData,0);
    ExtDescriptor xd=mdb.getDrEmbedExtent();
    int hfsBlockSize=mdb.getDrAlBlkSiz();
    fsOffset+=mdb.getDrAlBlSt() * 512 + xd.getXdrStABN() * hfsBlockSize;
    fsr=new FileSystemRecognizer(fsFile,fsOffset);
    fsType=fsr.detectFileSystem();
  }
  if (fsType == FileSystemRecognizer.FileSystemType.HFS_PLUS || fsType == FileSystemRecognizer.FileSystemType.HFSX || fsType == FileSystemRecognizer.FileSystemType.HFS) {
    if (fsHandler != null) {
      fsHandler.close();
    }
    final FileSystemMajorType fsMajorType;
switch (fsType) {
case HFS:
      fsMajorType=FileSystemMajorType.APPLE_HFS;
    break;
case HFS_PLUS:
  fsMajorType=FileSystemMajorType.APPLE_HFS_PLUS;
break;
case HFSX:
fsMajorType=FileSystemMajorType.APPLE_HFSX;
break;
default :
fsMajorType=null;
break;
}
FileSystemHandlerFactory factory=fsMajorType.createDefaultHandlerFactory();
if (factory.isSupported(StandardAttribute.CACHING_ENABLED)) {
factory.getCreateAttributes().setBooleanAttribute(StandardAttribute.CACHING_ENABLED,toggleCachingItem.getState());
}
System.err.println(""String_Node_Str"" + fsFile);
System.err.println(""String_Node_Str"");
ReadableConcatenatedStream stage1=new ReadableConcatenatedStream(fsFile,fsOffset,fsLength);
System.err.println(""String_Node_Str"");
ReadableStreamDataLocator stage2=new ReadableStreamDataLocator(stage1);
System.err.println(""String_Node_Str"");
fsHandler=(HFSCommonFileSystemHandler)factory.createHandler(stage2);
FSFolder rootRecord=fsHandler.getRoot();
populateFilesystemGUI(rootRecord);
setTitle(TITLE_STRING + ""String_Node_Str"" + displayName+ ""String_Node_Str"");
}
 else JOptionPane.showMessageDialog(this,""String_Node_Str"" + ""String_Node_Str"" + FileSystemRecognizer.FileSystemType.HFS_PLUS + ""String_Node_Str""+ ""String_Node_Str""+ FileSystemRecognizer.FileSystemType.HFSX+ ""String_Node_Str""+ ""String_Node_Str""+ FileSystemRecognizer.FileSystemType.HFS_WRAPPED_HFS_PLUS+ ""String_Node_Str""+ ""String_Node_Str""+ fsType+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}","public void loadFS(ReadableRandomAccessStream fsFile,String displayName){
  int blockSize=0x200;
  int ddrBlockSize;
  long fsOffset;
  long fsLength;
  PartitionSystemRecognizer psRec=new PartitionSystemRecognizer(fsFile);
  PartitionSystem partSys=psRec.getPartitionSystem();
  if (partSys != null) {
    Partition[] partitions=partSys.getUsedPartitionEntries();
    if (partitions.length == 0) {
      fsOffset=0;
      fsLength=fsFile.length();
    }
 else {
      Object selectedValue;
      int firstPreferredPartition=0;
      for (int i=0; i < partitions.length; ++i) {
        Partition p=partitions[i];
        if (p.getType() == Partition.PartitionType.APPLE_HFS) {
          firstPreferredPartition=i;
          break;
        }
      }
      while (true) {
        selectedValue=JOptionPane.showInputDialog(this,""String_Node_Str"",""String_Node_Str"" + partSys.getLongName() + ""String_Node_Str"",JOptionPane.QUESTION_MESSAGE,null,partitions,partitions[firstPreferredPartition]);
        if (selectedValue != null && selectedValue instanceof Partition) {
          Partition selectedPartition=(Partition)selectedValue;
          if (selectedPartition.getType() == Partition.PartitionType.APPLE_HFS) {
            break;
          }
 else {
            JOptionPane.showMessageDialog(this,""String_Node_Str"" + selectedPartition.getType() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
          }
        }
 else {
          return;
        }
      }
      if (selectedValue instanceof Partition) {
        Partition selectedPartition=(Partition)selectedValue;
        fsOffset=selectedPartition.getStartOffset();
        fsLength=selectedPartition.getLength();
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
 else {
    fsOffset=0;
    fsLength=fsFile.length();
  }
  FileSystemRecognizer fsr=new FileSystemRecognizer(fsFile,fsOffset);
  FileSystemRecognizer.FileSystemType fsType=fsr.detectFileSystem();
  if (fsType == FileSystemRecognizer.FileSystemType.HFS_WRAPPED_HFS_PLUS) {
    byte[] mdbData=new byte[HFSPlusWrapperMDB.STRUCTSIZE];
    fsFile.seek(fsOffset + 1024);
    fsFile.read(mdbData);
    HFSPlusWrapperMDB mdb=new HFSPlusWrapperMDB(mdbData,0);
    ExtDescriptor xd=mdb.getDrEmbedExtent();
    int hfsBlockSize=mdb.getDrAlBlkSiz();
    fsOffset+=mdb.getDrAlBlSt() * 512 + xd.getXdrStABN() * hfsBlockSize;
    fsr=new FileSystemRecognizer(fsFile,fsOffset);
    fsType=fsr.detectFileSystem();
  }
  if (fsType == FileSystemRecognizer.FileSystemType.HFS_PLUS || fsType == FileSystemRecognizer.FileSystemType.HFSX || fsType == FileSystemRecognizer.FileSystemType.HFS) {
    if (fsHandler != null) {
      fsHandler.close();
    }
    final FileSystemMajorType fsMajorType;
switch (fsType) {
case HFS:
      fsMajorType=FileSystemMajorType.APPLE_HFS;
    break;
case HFS_PLUS:
  fsMajorType=FileSystemMajorType.APPLE_HFS_PLUS;
break;
case HFSX:
fsMajorType=FileSystemMajorType.APPLE_HFSX;
break;
default :
fsMajorType=null;
break;
}
FileSystemHandlerFactory factory=fsMajorType.createDefaultHandlerFactory();
if (factory.isSupported(StandardAttribute.CACHING_ENABLED)) {
factory.getCreateAttributes().setBooleanAttribute(StandardAttribute.CACHING_ENABLED,toggleCachingItem.getState());
}
System.err.println(""String_Node_Str"" + fsFile);
System.err.println(""String_Node_Str"");
ReadableConcatenatedStream stage1=new ReadableConcatenatedStream(fsFile,fsOffset,fsLength);
System.err.println(""String_Node_Str"");
this.fsDataLocator=new ReadableStreamDataLocator(stage1);
System.err.println(""String_Node_Str"");
fsHandler=(HFSCommonFileSystemHandler)factory.createHandler(fsDataLocator);
FSFolder rootRecord=fsHandler.getRoot();
populateFilesystemGUI(rootRecord);
setTitle(TITLE_STRING + ""String_Node_Str"" + displayName+ ""String_Node_Str"");
}
 else {
JOptionPane.showMessageDialog(this,""String_Node_Str"" + ""String_Node_Str"" + FileSystemRecognizer.FileSystemType.HFS_PLUS + ""String_Node_Str""+ ""String_Node_Str""+ FileSystemRecognizer.FileSystemType.HFSX+ ""String_Node_Str""+ ""String_Node_Str""+ FileSystemRecognizer.FileSystemType.HFS_WRAPPED_HFS_PLUS+ ""String_Node_Str""+ ""String_Node_Str""+ fsType+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
}",0.9580011897679952
168547,"@Override public void actionGetInfo(List<Record<FSEntry>> recordList){
  if (recordList.size() == 1)   FileSystemBrowserWindow.this.actionGetInfo(recordList.get(0).getUserObject());
 else   if (recordList.size() > 1) {
    JOptionPane.showMessageDialog(FileSystemBrowserWindow.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
}","@Override public void actionGetInfo(List<Record<FSEntry>> recordList){
  if (recordList.size() == 1) {
    FileSystemBrowserWindow.this.actionGetInfo(recordList.get(0).getUserObject());
  }
 else   if (recordList.size() > 1) {
    JOptionPane.showMessageDialog(FileSystemBrowserWindow.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
}",0.9887323943661972
168548,"@Override public String[] parseAddressPath(String targetAddress){
  if (!targetAddress.startsWith(""String_Node_Str""))   return null;
 else {
    String remainder=targetAddress.substring(1);
    if (remainder.length() == 0)     return new String[0];
 else {
      String[] res=remainder.split(""String_Node_Str"");
      return res;
    }
  }
}","@Override public String[] parseAddressPath(String targetAddress){
  if (!targetAddress.startsWith(""String_Node_Str"")) {
    return null;
  }
 else {
    String remainder=targetAddress.substring(1);
    if (remainder.length() == 0) {
      return new String[0];
    }
 else {
      String[] res=remainder.split(""String_Node_Str"");
      return res;
    }
  }
}",0.9342857142857144
168549,"private int extractFile(final FSFile rec,final File outDir,final ProgressMonitor progressDialog,final ObjectContainer<Boolean> overwriteAll,final boolean extractResourceFork){
  int errorCount=0;
  String filename=rec.getName();
  if (extractResourceFork)   filename=""String_Node_Str"" + filename;
  while (true) {
    final FSFork theFork;
    if (!extractResourceFork)     theFork=rec.getMainFork();
 else     theFork=rec.getForkByType(FSForkType.MACOS_RESOURCE);
    if (theFork == null)     throw new RuntimeException(""String_Node_Str"" + (extractResourceFork ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
    progressDialog.updateCurrentFile(filename,theFork.getLength());
    File outFile=new File(outDir,filename);
    if (!overwriteAll.o && outFile.exists()) {
      String[] options=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + outFile.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
      if (reply == 0)       ;
 else       if (reply == 1)       overwriteAll.o=true;
 else       if (reply == 2) {
        ++errorCount;
        break;
      }
 else       if (reply == 3) {
        Object selection=JOptionPane.showInputDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE,null,null,filename);
        if (selection == null) {
          ++errorCount;
          progressDialog.signalCancel();
          break;
        }
 else {
          filename=selection.toString();
          continue;
        }
      }
 else {
        ++errorCount;
        progressDialog.signalCancel();
        break;
      }
    }
    try {
      try {
        outFile.getCanonicalPath();
      }
 catch (      Exception e) {
        throw new FileNotFoundException();
      }
      if (!outFile.getParentFile().equals(outDir) || !outFile.getName().equals(filename))       throw new FileNotFoundException();
      FileOutputStream fos=new FileOutputStream(outFile);
      extractForkToStream(theFork,fos,progressDialog);
      fos.close();
    }
 catch (    FileNotFoundException fnfe) {
      System.out.println(""String_Node_Str"" + outFile + ""String_Node_Str"");
      fnfe.printStackTrace();
      char[] filenameChars=filename.toCharArray();
      System.out.println(""String_Node_Str"" + filenameChars.length + ""String_Node_Str"");
      System.out.print(""String_Node_Str"");
      for (      char c : filenameChars)       System.out.print(""String_Node_Str"" + Util.toHexStringBE(c));
      System.out.println();
      String[] options=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + outFile + ""String_Node_Str""+ outDir.getAbsolutePath()+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.ERROR_MESSAGE,null,options,options[0]);
      if (reply == 0) {
        ++errorCount;
      }
 else       if (reply == 2) {
        Object selection=JOptionPane.showInputDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE,null,null,filename);
        if (selection == null) {
          ++errorCount;
          progressDialog.signalCancel();
        }
 else {
          filename=selection.toString();
          continue;
        }
      }
 else {
        ++errorCount;
        progressDialog.signalCancel();
      }
    }
catch (    IOException ioe) {
      System.err.println(""String_Node_Str"" + outFile + ""String_Node_Str"");
      ioe.printStackTrace();
      String msg=ioe.getMessage();
      int reply=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + filename + ""String_Node_Str""+ outDir.getAbsolutePath()+ (msg != null ? ""String_Node_Str"" + msg + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      ++errorCount;
      if (reply == JOptionPane.NO_OPTION)       progressDialog.signalCancel();
    }
catch (    Throwable e) {
      e.printStackTrace();
      String message=""String_Node_Str"" + filename + ""String_Node_Str"";
      message+=""String_Node_Str"" + e.toString();
      for (      StackTraceElement ste : e.getStackTrace())       message+=""String_Node_Str"" + ste.toString();
      message+=""String_Node_Str"";
      int reply=JOptionPane.showConfirmDialog(this,message + ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      ++errorCount;
      if (reply == JOptionPane.NO_OPTION)       progressDialog.signalCancel();
    }
    break;
  }
  return errorCount;
}","private int extractFile(final FSFile rec,final File outDir,final ProgressMonitor progressDialog,final ObjectContainer<Boolean> overwriteAll,final boolean extractResourceFork){
  int errorCount=0;
  String filename=rec.getName();
  if (extractResourceFork) {
    filename=""String_Node_Str"" + filename;
  }
  while (true) {
    final FSFork theFork;
    if (!extractResourceFork) {
      theFork=rec.getMainFork();
    }
 else {
      theFork=rec.getForkByType(FSForkType.MACOS_RESOURCE);
    }
    if (theFork == null) {
      throw new RuntimeException(""String_Node_Str"" + (extractResourceFork ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
    }
    progressDialog.updateCurrentFile(filename,theFork.getLength());
    File outFile=new File(outDir,filename);
    if (!overwriteAll.o && outFile.exists()) {
      String[] options=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + outFile.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
      if (reply == 0)       ;
 else       if (reply == 1) {
        overwriteAll.o=true;
      }
 else       if (reply == 2) {
        ++errorCount;
        break;
      }
 else       if (reply == 3) {
        Object selection=JOptionPane.showInputDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE,null,null,filename);
        if (selection == null) {
          ++errorCount;
          progressDialog.signalCancel();
          break;
        }
 else {
          filename=selection.toString();
          continue;
        }
      }
 else {
        ++errorCount;
        progressDialog.signalCancel();
        break;
      }
    }
    try {
      try {
        outFile.getCanonicalPath();
      }
 catch (      Exception e) {
        throw new FileNotFoundException();
      }
      if (!outFile.getParentFile().equals(outDir) || !outFile.getName().equals(filename)) {
        throw new FileNotFoundException();
      }
      FileOutputStream fos=new FileOutputStream(outFile);
      extractForkToStream(theFork,fos,progressDialog);
      fos.close();
    }
 catch (    FileNotFoundException fnfe) {
      System.out.println(""String_Node_Str"" + outFile + ""String_Node_Str"");
      fnfe.printStackTrace();
      char[] filenameChars=filename.toCharArray();
      System.out.println(""String_Node_Str"" + filenameChars.length + ""String_Node_Str"");
      System.out.print(""String_Node_Str"");
      for (      char c : filenameChars) {
        System.out.print(""String_Node_Str"" + Util.toHexStringBE(c));
      }
      System.out.println();
      String[] options=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      int reply=JOptionPane.showOptionDialog(this,""String_Node_Str"" + outFile + ""String_Node_Str""+ outDir.getAbsolutePath()+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.ERROR_MESSAGE,null,options,options[0]);
      if (reply == 0) {
        ++errorCount;
      }
 else       if (reply == 2) {
        Object selection=JOptionPane.showInputDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE,null,null,filename);
        if (selection == null) {
          ++errorCount;
          progressDialog.signalCancel();
        }
 else {
          filename=selection.toString();
          continue;
        }
      }
 else {
        ++errorCount;
        progressDialog.signalCancel();
      }
    }
catch (    IOException ioe) {
      System.err.println(""String_Node_Str"" + outFile + ""String_Node_Str"");
      ioe.printStackTrace();
      String msg=ioe.getMessage();
      int reply=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + filename + ""String_Node_Str""+ outDir.getAbsolutePath()+ (msg != null ? ""String_Node_Str"" + msg + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      ++errorCount;
      if (reply == JOptionPane.NO_OPTION) {
        progressDialog.signalCancel();
      }
    }
catch (    Throwable e) {
      e.printStackTrace();
      String message=""String_Node_Str"" + filename + ""String_Node_Str"";
      message+=""String_Node_Str"" + e.toString();
      for (      StackTraceElement ste : e.getStackTrace()) {
        message+=""String_Node_Str"" + ste.toString();
      }
      message+=""String_Node_Str"";
      int reply=JOptionPane.showConfirmDialog(this,message + ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      ++errorCount;
      if (reply == JOptionPane.NO_OPTION) {
        progressDialog.signalCancel();
      }
    }
    break;
  }
  return errorCount;
}",0.9875841750841752
168550,"/** 
 * @{inheritDoc }
 */
@Override public String decode(byte[] data,int off,int len){
  try {
    return decoder.decode(ByteBuffer.wrap(data,off,len)).toString();
  }
 catch (  CharacterCodingException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public String decode(byte[] data,int off,int len){
  try {
    return decoder.decode(ByteBuffer.wrap(data,off,len)).toString();
  }
 catch (  CharacterCodingException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.9943714821763602
168551,"public String getCharsetName(){
  return charsetName;
}","/** 
 * Returns the charset name as it was passed to the constructor.
 * @return the charset name as it was passed to the constructor.
 */
public String getCharsetName(){
  return charsetName;
}",0.4417670682730923
168552,"/** 
 * @{inheritDoc }
 */
@Override public boolean isAllocationBlockUsed(long blockNumber) throws IllegalArgumentException {
  if (blockNumber < 0 || blockNumber > ((long)Short.MAX_VALUE) * 2)   throw new IllegalArgumentException(""String_Node_Str"" + blockNumber + ""String_Node_Str"");
  return super.isAllocationBlockUsed(blockNumber);
}","/** 
 * {@inheritDoc}
 */
@Override public boolean isAllocationBlockUsed(long blockNumber) throws IllegalArgumentException {
  if (blockNumber < 0 || blockNumber > ((long)Short.MAX_VALUE) * 2)   throw new IllegalArgumentException(""String_Node_Str"" + blockNumber + ""String_Node_Str"");
  return super.isAllocationBlockUsed(blockNumber);
}",0.9955423476968795
168553,"@Override public CommonHFSExtentDescriptor createExtentDescriptor(long startBlock,long blockCount){
  if (startBlock < 0 || startBlock > ((long)Short.MAX_VALUE) * 2)   throw new IllegalArgumentException(""String_Node_Str"" + startBlock + ""String_Node_Str"");
  if (blockCount < 0 || blockCount > ((long)Short.MAX_VALUE) * 2)   throw new IllegalArgumentException(""String_Node_Str"" + blockCount + ""String_Node_Str"");
  ExtDescriptor ed=new ExtDescriptor((short)startBlock,(short)blockCount);
  return CommonHFSExtentDescriptor.create(ed);
}","/** 
 * {@inheritDoc}
 */
@Override public CommonHFSExtentDescriptor createExtentDescriptor(long startBlock,long blockCount){
  if (startBlock < 0 || startBlock > ((long)Short.MAX_VALUE) * 2)   throw new IllegalArgumentException(""String_Node_Str"" + startBlock + ""String_Node_Str"");
  if (blockCount < 0 || blockCount > ((long)Short.MAX_VALUE) * 2)   throw new IllegalArgumentException(""String_Node_Str"" + blockCount + ""String_Node_Str"");
  ExtDescriptor ed=new ExtDescriptor((short)startBlock,(short)blockCount);
  return CommonHFSExtentDescriptor.create(ed);
}",0.9762773722627736
168554,"/** 
 * @{inheritDoc }
 */
@Override public boolean isAllocationBlockUsed(long blockNumber) throws IllegalArgumentException {
  if (blockNumber < 0 || blockNumber > ((long)Integer.MAX_VALUE) * 2)   throw new IllegalArgumentException(""String_Node_Str"" + blockNumber + ""String_Node_Str"");
  return super.isAllocationBlockUsed(blockNumber);
}","/** 
 * {@inheritDoc}
 */
@Override public boolean isAllocationBlockUsed(long blockNumber) throws IllegalArgumentException {
  if (blockNumber < 0 || blockNumber > ((long)Integer.MAX_VALUE) * 2)   throw new IllegalArgumentException(""String_Node_Str"" + blockNumber + ""String_Node_Str"");
  return super.isAllocationBlockUsed(blockNumber);
}",0.9955686853766618
168555,"@Override public CommonHFSExtentDescriptor createExtentDescriptor(long startBlock,long blockCount){
  if (startBlock < 0 || startBlock > ((long)Integer.MAX_VALUE) * 2)   throw new IllegalArgumentException(""String_Node_Str"" + startBlock + ""String_Node_Str"");
  if (blockCount < 0 || blockCount > ((long)Integer.MAX_VALUE) * 2)   throw new IllegalArgumentException(""String_Node_Str"" + blockCount + ""String_Node_Str"");
  HFSPlusExtentDescriptor hped=new HFSPlusExtentDescriptor((int)startBlock,(int)blockCount);
  return CommonHFSExtentDescriptor.create(hped);
}","/** 
 * {@inheritDoc}
 */
@Override public CommonHFSExtentDescriptor createExtentDescriptor(long startBlock,long blockCount){
  if (startBlock < 0 || startBlock > ((long)Integer.MAX_VALUE) * 2)   throw new IllegalArgumentException(""String_Node_Str"" + startBlock + ""String_Node_Str"");
  if (blockCount < 0 || blockCount > ((long)Integer.MAX_VALUE) * 2)   throw new IllegalArgumentException(""String_Node_Str"" + blockCount + ""String_Node_Str"");
  HFSPlusExtentDescriptor hped=new HFSPlusExtentDescriptor((int)startBlock,(int)blockCount);
  return CommonHFSExtentDescriptor.create(hped);
}",0.9772727272727272
168556,"@Override public String getLinkTargetString(){
  byte[] b=Util.readFully(fsHandler.getReadableDataForkStream(linkRecord));
  return Util.readString(b,""String_Node_Str"");
}","@Override public String getLinkTargetString(){
  return getLinkTargetPosixPath();
}",0.5118110236220472
168557,"@Override public FSEntry getLinkTarget(){
  return fsHandler.getEntry(fsHandler.lookupParentFolder(linkRecord).getInternalCatalogFolderRecord(),getLinkTargetPath(fsHandler,linkRecord));
}","@Override public FSEntry getLinkTarget(){
  return fsHandler.getEntryByPosixPath(getLinkTargetPosixPath(),fsHandler.lookupParentFolder(linkRecord));
}",0.6765578635014837
168558,"public RecordTypeEntry(RecordType recordType){
  this.recordType=recordType;
switch (recordType) {
case FILE:
    displayString=""String_Node_Str"";
  break;
case FOLDER:
displayString=""String_Node_Str"";
break;
case FILE_LINK:
displayString=""String_Node_Str"";
break;
case FOLDER_LINK:
displayString=""String_Node_Str"";
break;
default :
throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + recordType + ""String_Node_Str"");
}
}","public RecordTypeEntry(RecordType recordType){
  this.recordType=recordType;
switch (recordType) {
case FILE:
    displayString=""String_Node_Str"";
  break;
case FOLDER:
displayString=""String_Node_Str"";
break;
case FILE_LINK:
displayString=""String_Node_Str"";
break;
case FOLDER_LINK:
displayString=""String_Node_Str"";
break;
case BROKEN_LINK:
displayString=""String_Node_Str"";
break;
default :
throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + recordType + ""String_Node_Str"");
}
}",0.9376344086021504
168559,"@Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,final int row,final int column){
  if (value instanceof RecordContainer) {
    final Component objectComponent=objectRenderer.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
    final JLabel jl=theOne;
    Record rec=((RecordContainer)value).getRecord(genericPlaceholder);
    if (rec.getType() == RecordType.FOLDER || rec.getType() == RecordType.FOLDER_LINK)     jl.setIcon(folderIcon);
 else     if (rec.getType() == RecordType.FILE || rec.getType() == RecordType.FILE_LINK)     jl.setIcon(documentIcon);
 else     jl.setIcon(emptyIcon);
    jl.setVisible(true);
    Component c=new Component(){
{
        jl.setSize(jl.getPreferredSize());
        jl.setLocation(0,0);
        objectComponent.setSize(objectComponent.getPreferredSize());
        objectComponent.setLocation(jl.getWidth(),0);
        setSize(jl.getWidth() + objectComponent.getWidth(),Math.max(jl.getHeight(),objectComponent.getHeight()));
      }
      @Override public void paint(      Graphics g){
        jl.paint(g);
        int translatex=jl.getWidth();
        g.translate(translatex,0);
        objectComponent.paint(g);
        g.translate(-translatex,0);
      }
    }
;
    return c;
  }
 else   if (column == 1) {
    theTwo.setText(value.toString());
    return theTwo;
  }
 else {
    return objectRenderer.getTableCellRendererComponent(table,value,false,false,row,column);
  }
}","@Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,final int row,final int column){
  if (value instanceof RecordContainer) {
    final Component objectComponent=objectRenderer.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
    final JLabel jl=theOne;
    Record rec=((RecordContainer)value).getRecord(genericPlaceholder);
switch (rec.getType()) {
case FOLDER:
case FOLDER_LINK:
      jl.setIcon(folderIcon);
    break;
case FILE:
case FILE_LINK:
  jl.setIcon(documentIcon);
break;
case BROKEN_LINK:
jl.setIcon(emptyIcon);
break;
default :
throw new RuntimeException(""String_Node_Str"" + rec.getType());
}
jl.setVisible(true);
Component c=new Component(){
{
jl.setSize(jl.getPreferredSize());
jl.setLocation(0,0);
objectComponent.setSize(objectComponent.getPreferredSize());
objectComponent.setLocation(jl.getWidth(),0);
setSize(jl.getWidth() + objectComponent.getWidth(),Math.max(jl.getHeight(),objectComponent.getHeight()));
}
@Override public void paint(Graphics g){
jl.paint(g);
int translatex=jl.getWidth();
g.translate(translatex,0);
objectComponent.paint(g);
g.translate(-translatex,0);
}
}
;
return c;
}
 else if (column == 1) {
theTwo.setText(value.toString());
return theTwo;
}
 else {
return objectRenderer.getTableCellRendererComponent(table,value,false,false,row,column);
}
}",0.8149429263230716
168560,"public FileSystemBrowser(FileSystemProvider<A> iController){
  this.controller=iController;
  this.viewComponent=new FilesystemBrowserPanel();
  this.addressField=viewComponent.addressField;
  this.upButton=viewComponent.upButton;
  this.infoButton=viewComponent.infoButton;
  this.extractButton=viewComponent.extractButton;
  this.goButton=viewComponent.goButton;
  this.statusLabel=viewComponent.statusLabel;
  this.fileTable=viewComponent.fileTable;
  this.fileTableScroller=viewComponent.fileTableScroller;
  this.dirTree=viewComponent.dirTree;
  upButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      actionGotoParentDir();
    }
  }
);
  extractButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      actionExtractToDir();
    }
  }
);
  infoButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      actionGetInfo();
    }
  }
);
  goButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      actionGotoDir();
    }
  }
);
  addressField.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      actionGotoDir();
    }
  }
);
  final Class objectClass=new Object().getClass();
  colNames.add(""String_Node_Str"");
  colNames.add(""String_Node_Str"");
  colNames.add(""String_Node_Str"");
  colNames.add(""String_Node_Str"");
  colNames.add(""String_Node_Str"");
  tableModel=new DefaultTableModel(colNames,0){
    @Override public boolean isCellEditable(    int rowIndex,    int columnIndex){
      return false;
    }
  }
;
  fileTable.setModel(tableModel);
  fileTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  fileTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  final int WIDTH_NAME_COLUMN=180;
  final int WIDTH_SIZE_COLUMN=96;
  final int WIDTH_TYPE_COLUMN=120;
  final int WIDTH_DATE_COLUMN=130;
  fileTable.getColumnModel().getColumn(0).setPreferredWidth(WIDTH_NAME_COLUMN);
  fileTable.getColumnModel().getColumn(1).setPreferredWidth(WIDTH_SIZE_COLUMN);
  fileTable.getColumnModel().getColumn(2).setPreferredWidth(WIDTH_TYPE_COLUMN);
  fileTable.getColumnModel().getColumn(3).setPreferredWidth(WIDTH_DATE_COLUMN);
  fileTable.getColumnModel().getColumn(4).setPreferredWidth(0);
  totalColumnWidth=WIDTH_NAME_COLUMN + WIDTH_SIZE_COLUMN + WIDTH_TYPE_COLUMN+ WIDTH_DATE_COLUMN;
  fileTable.getColumnModel().getColumn(4).setMinWidth(0);
  fileTable.getColumnModel().getColumn(4).setResizable(false);
  if (Java6Util.isJava6OrHigher()) {
    Comparator c=new ComparableComparator();
    Java6Specific.addRowSorter(fileTable,tableModel,4,c,c,c,c,c);
  }
  TableColumnModelListener columnListener=new TableColumnModelListener(){
    private boolean locked=false;
    private int[] w1=null;
    @Override public void columnAdded(    TableColumnModelEvent e){
    }
    @Override public void columnMarginChanged(    ChangeEvent e){
      if (disableColumnListener[0]) {
        return;
      }
synchronized (this) {
        if (!locked)         locked=true;
 else {
          return;
        }
      }
      int columnCount=fileTable.getColumnModel().getColumnCount();
      TableColumn lastColumn=fileTable.getColumnModel().getColumn(columnCount - 1);
      if (lastWidths.o == null) {
        lastWidths.o=new int[columnCount];
      }
      if (w1 == null || w1.length != columnCount) {
        w1=new int[columnCount];
      }
      int diffSum=0;
      int currentWidth=0;
      for (int i=0; i < w1.length; ++i) {
        w1[i]=fileTable.getColumnModel().getColumn(i).getWidth();
        currentWidth+=w1[i];
        int diff=(w1[i] - lastWidths.o[i]);
        if (i < w1.length - 1) {
          diffSum+=diff;
        }
      }
      int lastDiff=(w1[columnCount - 1] - lastWidths.o[columnCount - 1]);
      if (lastDiff != -diffSum) {
        int importantColsWidth=currentWidth - w1[columnCount - 1];
        int newLastColumnWidth=totalColumnWidth - importantColsWidth;
        int nextTotalWidth=importantColsWidth + newLastColumnWidth;
        if (newLastColumnWidth >= 0) {
          if ((nextTotalWidth <= totalColumnWidth || diffSum > 0)) {
            lastColumn.setPreferredWidth(newLastColumnWidth);
            lastColumn.setWidth(newLastColumnWidth);
            fileTableScroller.invalidate();
            fileTableScroller.validate();
          }
        }
 else {
          if (lastColumn.getWidth() != 0) {
            lastColumn.setPreferredWidth(0);
            lastColumn.setWidth(0);
            fileTableScroller.invalidate();
            fileTableScroller.validate();
          }
        }
      }
      for (int i=0; i < w1.length; ++i) {
        w1[i]=fileTable.getColumnModel().getColumn(i).getWidth();
      }
      int[] usedArray=lastWidths.o;
      lastWidths.o=w1;
      w1=usedArray;
synchronized (this) {
        locked=false;
      }
    }
    @Override public void columnMoved(    TableColumnModelEvent e){
    }
    @Override public void columnRemoved(    TableColumnModelEvent e){
    }
    @Override public void columnSelectionChanged(    ListSelectionEvent e){
    }
  }
;
  fileTable.getColumnModel().addColumnModelListener(columnListener);
  final TableCellRenderer objectRenderer=fileTable.getDefaultRenderer(objectClass);
  fileTable.setDefaultRenderer(objectClass,new TableCellRenderer(){
    private JLabel theOne=new JLabel();
    private JLabel theTwo=new JLabel(""String_Node_Str"",SwingConstants.RIGHT);
    private ImageIcon documentIcon=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str""));
    private ImageIcon folderIcon=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str""));
    private ImageIcon emptyIcon=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str""));
    @Override public Component getTableCellRendererComponent(    JTable table,    Object value,    boolean isSelected,    boolean hasFocus,    final int row,    final int column){
      if (value instanceof RecordContainer) {
        final Component objectComponent=objectRenderer.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
        final JLabel jl=theOne;
        Record rec=((RecordContainer)value).getRecord(genericPlaceholder);
        if (rec.getType() == RecordType.FOLDER || rec.getType() == RecordType.FOLDER_LINK)         jl.setIcon(folderIcon);
 else         if (rec.getType() == RecordType.FILE || rec.getType() == RecordType.FILE_LINK)         jl.setIcon(documentIcon);
 else         jl.setIcon(emptyIcon);
        jl.setVisible(true);
        Component c=new Component(){
{
            jl.setSize(jl.getPreferredSize());
            jl.setLocation(0,0);
            objectComponent.setSize(objectComponent.getPreferredSize());
            objectComponent.setLocation(jl.getWidth(),0);
            setSize(jl.getWidth() + objectComponent.getWidth(),Math.max(jl.getHeight(),objectComponent.getHeight()));
          }
          @Override public void paint(          Graphics g){
            jl.paint(g);
            int translatex=jl.getWidth();
            g.translate(translatex,0);
            objectComponent.paint(g);
            g.translate(-translatex,0);
          }
        }
;
        return c;
      }
 else       if (column == 1) {
        theTwo.setText(value.toString());
        return theTwo;
      }
 else {
        return objectRenderer.getTableCellRendererComponent(table,value,false,false,row,column);
      }
    }
  }
);
  fileTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      int[] selection=fileTable.getSelectedRows();
      long selectionSize=0;
      for (      int selectedRow : selection) {
        Object o=fileTable.getValueAt(selectedRow,0);
        if (o instanceof RecordContainer) {
          Record rec=((RecordContainer)o).getRecord(genericPlaceholder);
          if (rec.getType() == RecordType.FILE || rec.getType() == RecordType.FILE_LINK)           selectionSize+=rec.getSize();
        }
      }
      setSelectionStatus(selection.length,selectionSize);
    }
  }
);
  fileTableScroller.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      int row=fileTable.rowAtPoint(e.getPoint());
      if (row == -1)       fileTable.clearSelection();
    }
  }
);
  fileTable.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getButton() == MouseEvent.BUTTON3) {
        int row=fileTable.rowAtPoint(e.getPoint());
        int col=fileTable.columnAtPoint(e.getPoint());
        if (col == 0 && row >= 0) {
          int[] currentSelection=fileTable.getSelectedRows();
          if (!Util.contains(currentSelection,row)) {
            fileTable.clearSelection();
            fileTable.changeSelection(row,col,false,false);
          }
          fileTable.requestFocus();
          List<Record<A>> selection=getTableSelection();
          List<Record<A>> selectionParentPath=getRecordPath(lastTreeSelectionPath);
          JPopupMenu jpm=controller.getRightClickRecordPopupMenu(selectionParentPath,selection);
          jpm.show(fileTable,e.getX(),e.getY());
        }
      }
 else       if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
        int row=fileTable.rowAtPoint(e.getPoint());
        int col=fileTable.columnAtPoint(e.getPoint());
        if (col == 0 && row >= 0) {
          Object colValue=fileTable.getValueAt(row,col);
          if (colValue instanceof RecordContainer) {
            Record<A> rec=((RecordContainer)colValue).getRecord(genericPlaceholder);
            if (rec.getType() == RecordType.FILE || rec.getType() == RecordType.FILE_LINK) {
              List<Record<A>> dirPath=getRecordPath(lastTreeSelectionPath);
              ArrayList<Record<A>> completePath=new ArrayList<Record<A>>(dirPath.size() + 1);
              completePath.addAll(dirPath);
              completePath.add(rec);
              controller.actionDoubleClickFile(completePath);
            }
 else             if (rec.getType() == RecordType.FOLDER || rec.getType() == RecordType.FOLDER_LINK)             actionChangeDir(rec);
          }
 else           throw new RuntimeException(""String_Node_Str"");
        }
      }
    }
  }
);
  dirTree.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      if (e.getButton() == MouseEvent.BUTTON3 && controller.isFileSystemLoaded()) {
        TreePath tp=dirTree.getPathForLocation(e.getX(),e.getY());
        if (tp != null) {
          dirTree.clearSelection();
          dirTree.setSelectionPath(tp);
          dirTree.requestFocus();
          List<Record<A>> recList=Arrays.asList(getTreeSelection());
          List<Record<A>> selectionParentPath=getRecordPath(lastTreeSelectionPath.getParentPath());
          controller.getRightClickRecordPopupMenu(selectionParentPath,recList).show(dirTree,e.getX(),e.getY());
        }
      }
    }
  }
);
  setRoot(null);
  dirTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  dirTree.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      TreePath tp=e.getPath();
      actionTreeNodeSelected(tp);
    }
  }
);
  dirTree.addTreeWillExpandListener(new TreeWillExpandListener(){
    @Override public void treeWillExpand(    TreeExpansionEvent e) throws ExpandVetoException {
      actionExpandDirTreeNode(e.getPath());
    }
    @Override public void treeWillCollapse(    TreeExpansionEvent e){
    }
  }
);
  fileTable.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      fileTableLastFocus=System.nanoTime();
    }
    @Override public void focusLost(    FocusEvent e){
    }
  }
);
  dirTree.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      dirTreeLastFocus=System.nanoTime();
    }
    @Override public void focusLost(    FocusEvent e){
    }
  }
);
  fileTableScroller.addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      adjustTableWidth();
    }
  }
);
}","public FileSystemBrowser(FileSystemProvider<A> iController){
  this.controller=iController;
  this.viewComponent=new FilesystemBrowserPanel();
  this.addressField=viewComponent.addressField;
  this.upButton=viewComponent.upButton;
  this.infoButton=viewComponent.infoButton;
  this.extractButton=viewComponent.extractButton;
  this.goButton=viewComponent.goButton;
  this.statusLabel=viewComponent.statusLabel;
  this.fileTable=viewComponent.fileTable;
  this.fileTableScroller=viewComponent.fileTableScroller;
  this.dirTree=viewComponent.dirTree;
  upButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      actionGotoParentDir();
    }
  }
);
  extractButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      actionExtractToDir();
    }
  }
);
  infoButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      actionGetInfo();
    }
  }
);
  goButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      actionGotoDir();
    }
  }
);
  addressField.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      actionGotoDir();
    }
  }
);
  final Class objectClass=new Object().getClass();
  colNames.add(""String_Node_Str"");
  colNames.add(""String_Node_Str"");
  colNames.add(""String_Node_Str"");
  colNames.add(""String_Node_Str"");
  colNames.add(""String_Node_Str"");
  tableModel=new DefaultTableModel(colNames,0){
    @Override public boolean isCellEditable(    int rowIndex,    int columnIndex){
      return false;
    }
  }
;
  fileTable.setModel(tableModel);
  fileTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  fileTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  final int WIDTH_NAME_COLUMN=180;
  final int WIDTH_SIZE_COLUMN=96;
  final int WIDTH_TYPE_COLUMN=120;
  final int WIDTH_DATE_COLUMN=130;
  fileTable.getColumnModel().getColumn(0).setPreferredWidth(WIDTH_NAME_COLUMN);
  fileTable.getColumnModel().getColumn(1).setPreferredWidth(WIDTH_SIZE_COLUMN);
  fileTable.getColumnModel().getColumn(2).setPreferredWidth(WIDTH_TYPE_COLUMN);
  fileTable.getColumnModel().getColumn(3).setPreferredWidth(WIDTH_DATE_COLUMN);
  fileTable.getColumnModel().getColumn(4).setPreferredWidth(0);
  totalColumnWidth=WIDTH_NAME_COLUMN + WIDTH_SIZE_COLUMN + WIDTH_TYPE_COLUMN+ WIDTH_DATE_COLUMN;
  fileTable.getColumnModel().getColumn(4).setMinWidth(0);
  fileTable.getColumnModel().getColumn(4).setResizable(false);
  if (Java6Util.isJava6OrHigher()) {
    Comparator c=new ComparableComparator();
    Java6Specific.addRowSorter(fileTable,tableModel,4,c,c,c,c,c);
  }
  TableColumnModelListener columnListener=new TableColumnModelListener(){
    private boolean locked=false;
    private int[] w1=null;
    @Override public void columnAdded(    TableColumnModelEvent e){
    }
    @Override public void columnMarginChanged(    ChangeEvent e){
      if (disableColumnListener[0]) {
        return;
      }
synchronized (this) {
        if (!locked)         locked=true;
 else {
          return;
        }
      }
      int columnCount=fileTable.getColumnModel().getColumnCount();
      TableColumn lastColumn=fileTable.getColumnModel().getColumn(columnCount - 1);
      if (lastWidths.o == null) {
        lastWidths.o=new int[columnCount];
      }
      if (w1 == null || w1.length != columnCount) {
        w1=new int[columnCount];
      }
      int diffSum=0;
      int currentWidth=0;
      for (int i=0; i < w1.length; ++i) {
        w1[i]=fileTable.getColumnModel().getColumn(i).getWidth();
        currentWidth+=w1[i];
        int diff=(w1[i] - lastWidths.o[i]);
        if (i < w1.length - 1) {
          diffSum+=diff;
        }
      }
      int lastDiff=(w1[columnCount - 1] - lastWidths.o[columnCount - 1]);
      if (lastDiff != -diffSum) {
        int importantColsWidth=currentWidth - w1[columnCount - 1];
        int newLastColumnWidth=totalColumnWidth - importantColsWidth;
        int nextTotalWidth=importantColsWidth + newLastColumnWidth;
        if (newLastColumnWidth >= 0) {
          if ((nextTotalWidth <= totalColumnWidth || diffSum > 0)) {
            lastColumn.setPreferredWidth(newLastColumnWidth);
            lastColumn.setWidth(newLastColumnWidth);
            fileTableScroller.invalidate();
            fileTableScroller.validate();
          }
        }
 else {
          if (lastColumn.getWidth() != 0) {
            lastColumn.setPreferredWidth(0);
            lastColumn.setWidth(0);
            fileTableScroller.invalidate();
            fileTableScroller.validate();
          }
        }
      }
      for (int i=0; i < w1.length; ++i) {
        w1[i]=fileTable.getColumnModel().getColumn(i).getWidth();
      }
      int[] usedArray=lastWidths.o;
      lastWidths.o=w1;
      w1=usedArray;
synchronized (this) {
        locked=false;
      }
    }
    @Override public void columnMoved(    TableColumnModelEvent e){
    }
    @Override public void columnRemoved(    TableColumnModelEvent e){
    }
    @Override public void columnSelectionChanged(    ListSelectionEvent e){
    }
  }
;
  fileTable.getColumnModel().addColumnModelListener(columnListener);
  final TableCellRenderer objectRenderer=fileTable.getDefaultRenderer(objectClass);
  fileTable.setDefaultRenderer(objectClass,new TableCellRenderer(){
    private JLabel theOne=new JLabel();
    private JLabel theTwo=new JLabel(""String_Node_Str"",SwingConstants.RIGHT);
    private ImageIcon documentIcon=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str""));
    private ImageIcon folderIcon=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str""));
    private ImageIcon emptyIcon=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str""));
    @Override public Component getTableCellRendererComponent(    JTable table,    Object value,    boolean isSelected,    boolean hasFocus,    final int row,    final int column){
      if (value instanceof RecordContainer) {
        final Component objectComponent=objectRenderer.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
        final JLabel jl=theOne;
        Record rec=((RecordContainer)value).getRecord(genericPlaceholder);
switch (rec.getType()) {
case FOLDER:
case FOLDER_LINK:
          jl.setIcon(folderIcon);
        break;
case FILE:
case FILE_LINK:
      jl.setIcon(documentIcon);
    break;
case BROKEN_LINK:
  jl.setIcon(emptyIcon);
break;
default :
throw new RuntimeException(""String_Node_Str"" + rec.getType());
}
jl.setVisible(true);
Component c=new Component(){
{
jl.setSize(jl.getPreferredSize());
jl.setLocation(0,0);
objectComponent.setSize(objectComponent.getPreferredSize());
objectComponent.setLocation(jl.getWidth(),0);
setSize(jl.getWidth() + objectComponent.getWidth(),Math.max(jl.getHeight(),objectComponent.getHeight()));
}
@Override public void paint(Graphics g){
jl.paint(g);
int translatex=jl.getWidth();
g.translate(translatex,0);
objectComponent.paint(g);
g.translate(-translatex,0);
}
}
;
return c;
}
 else if (column == 1) {
theTwo.setText(value.toString());
return theTwo;
}
 else {
return objectRenderer.getTableCellRendererComponent(table,value,false,false,row,column);
}
}
}
);
fileTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
@Override public void valueChanged(ListSelectionEvent e){
int[] selection=fileTable.getSelectedRows();
long selectionSize=0;
for (int selectedRow : selection) {
Object o=fileTable.getValueAt(selectedRow,0);
if (o instanceof RecordContainer) {
Record rec=((RecordContainer)o).getRecord(genericPlaceholder);
if (rec.getType() == RecordType.FILE || rec.getType() == RecordType.FILE_LINK) selectionSize+=rec.getSize();
}
}
setSelectionStatus(selection.length,selectionSize);
}
}
);
fileTableScroller.addMouseListener(new MouseAdapter(){
@Override public void mouseClicked(MouseEvent e){
int row=fileTable.rowAtPoint(e.getPoint());
if (row == -1) fileTable.clearSelection();
}
}
);
fileTable.addMouseListener(new MouseAdapter(){
@Override public void mouseClicked(MouseEvent e){
if (e.getButton() == MouseEvent.BUTTON3) {
int row=fileTable.rowAtPoint(e.getPoint());
int col=fileTable.columnAtPoint(e.getPoint());
if (col == 0 && row >= 0) {
int[] currentSelection=fileTable.getSelectedRows();
if (!Util.contains(currentSelection,row)) {
fileTable.clearSelection();
fileTable.changeSelection(row,col,false,false);
}
fileTable.requestFocus();
List<Record<A>> selection=getTableSelection();
List<Record<A>> selectionParentPath=getRecordPath(lastTreeSelectionPath);
JPopupMenu jpm=controller.getRightClickRecordPopupMenu(selectionParentPath,selection);
jpm.show(fileTable,e.getX(),e.getY());
}
}
 else if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
int row=fileTable.rowAtPoint(e.getPoint());
int col=fileTable.columnAtPoint(e.getPoint());
if (col == 0 && row >= 0) {
Object colValue=fileTable.getValueAt(row,col);
if (colValue instanceof RecordContainer) {
Record<A> rec=((RecordContainer)colValue).getRecord(genericPlaceholder);
if (rec.getType() == RecordType.FILE || rec.getType() == RecordType.FILE_LINK) {
List<Record<A>> dirPath=getRecordPath(lastTreeSelectionPath);
ArrayList<Record<A>> completePath=new ArrayList<Record<A>>(dirPath.size() + 1);
completePath.addAll(dirPath);
completePath.add(rec);
controller.actionDoubleClickFile(completePath);
}
 else if (rec.getType() == RecordType.FOLDER || rec.getType() == RecordType.FOLDER_LINK) actionChangeDir(rec);
}
 else throw new RuntimeException(""String_Node_Str"");
}
}
}
}
);
dirTree.addMouseListener(new MouseAdapter(){
@Override public void mousePressed(MouseEvent e){
if (e.getButton() == MouseEvent.BUTTON3 && controller.isFileSystemLoaded()) {
TreePath tp=dirTree.getPathForLocation(e.getX(),e.getY());
if (tp != null) {
dirTree.clearSelection();
dirTree.setSelectionPath(tp);
dirTree.requestFocus();
List<Record<A>> recList=Arrays.asList(getTreeSelection());
List<Record<A>> selectionParentPath=getRecordPath(lastTreeSelectionPath.getParentPath());
controller.getRightClickRecordPopupMenu(selectionParentPath,recList).show(dirTree,e.getX(),e.getY());
}
}
}
}
);
setRoot(null);
dirTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
dirTree.addTreeSelectionListener(new TreeSelectionListener(){
@Override public void valueChanged(TreeSelectionEvent e){
TreePath tp=e.getPath();
actionTreeNodeSelected(tp);
}
}
);
dirTree.addTreeWillExpandListener(new TreeWillExpandListener(){
@Override public void treeWillExpand(TreeExpansionEvent e) throws ExpandVetoException {
actionExpandDirTreeNode(e.getPath());
}
@Override public void treeWillCollapse(TreeExpansionEvent e){
}
}
);
fileTable.addFocusListener(new FocusListener(){
@Override public void focusGained(FocusEvent e){
fileTableLastFocus=System.nanoTime();
}
@Override public void focusLost(FocusEvent e){
}
}
);
dirTree.addFocusListener(new FocusListener(){
@Override public void focusGained(FocusEvent e){
dirTreeLastFocus=System.nanoTime();
}
@Override public void focusLost(FocusEvent e){
}
}
);
fileTableScroller.addComponentListener(new ComponentAdapter(){
@Override public void componentResized(ComponentEvent e){
adjustTableWidth();
}
}
);
}",0.9418137192670644
168561,"private int getPriority(){
switch (recordType) {
case FILE:
    return 1;
case FOLDER:
  return 0;
case FILE_LINK:
return 1;
case FOLDER_LINK:
return 0;
default :
throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + recordType + ""String_Node_Str"");
}
}","private int getPriority(){
switch (recordType) {
case FILE:
    return 1;
case FOLDER:
  return 0;
case FILE_LINK:
return 1;
case FOLDER_LINK:
return 0;
case BROKEN_LINK:
return 2;
default :
throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + recordType + ""String_Node_Str"");
}
}",0.95
168562,"public static RecordType entryTypeToRecordType(FSEntry entry,String[] parentDirPath){
  if (entry instanceof FSFile) {
    return RecordType.FILE;
  }
 else   if (entry instanceof FSFolder) {
    return RecordType.FOLDER;
  }
 else   if (entry instanceof FSLink) {
    FSLink fsl=(FSLink)entry;
    FSEntry linkTarget=fsl.getLinkTarget(parentDirPath);
    if (linkTarget == null) {
      return RecordType.FILE;
    }
    if (linkTarget instanceof FSFile) {
      return RecordType.FILE_LINK;
    }
 else     if (linkTarget instanceof FSFolder) {
      return RecordType.FOLDER_LINK;
    }
 else     throw new IllegalArgumentException(""String_Node_Str"" + entry.getClass());
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + entry.getClass());
  }
}","public static RecordType entryTypeToRecordType(FSEntry entry,String[] parentDirPath){
  if (entry instanceof FSFile) {
    return RecordType.FILE;
  }
 else   if (entry instanceof FSFolder) {
    return RecordType.FOLDER;
  }
 else   if (entry instanceof FSLink) {
    FSLink fsl=(FSLink)entry;
    FSEntry linkTarget=fsl.getLinkTarget(parentDirPath);
    if (linkTarget == null) {
      return RecordType.BROKEN_LINK;
    }
    if (linkTarget instanceof FSFile) {
      return RecordType.FILE_LINK;
    }
 else     if (linkTarget instanceof FSFolder) {
      return RecordType.FOLDER_LINK;
    }
 else     throw new IllegalArgumentException(""String_Node_Str"" + entry.getClass());
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + entry.getClass());
  }
}",0.8711974110032362
168563,"public String[] getTruePathFromPosixPath(final String posixPath,final String... rootFolderPath) throws IllegalArgumentException {
  String[] components=posixPath.split(""String_Node_Str"");
  int i=0;
  LinkedList<String> pathStack=new LinkedList<String>();
  LinkedList<String[]> visitedLinks=null;
  if (posixPath.startsWith(""String_Node_Str"")) {
    i=1;
  }
 else {
    for (    String pathComponent : rootFolderPath)     pathStack.addLast(pathComponent);
  }
  for (; i < components.length; ++i) {
    String[] curPath=pathStack.toArray(new String[pathStack.size()]);
    FSEntry curEntry2=getEntry(curPath);
    FSFolder curFolder;
    if (curEntry2 instanceof FSFolder)     curFolder=(FSFolder)curEntry2;
 else     if (curEntry2 instanceof FSLink) {
      FSLink curLink=(FSLink)curEntry2;
      if (visitedLinks == null)       visitedLinks=new LinkedList<String[]>();
 else       visitedLinks.clear();
      FSEntry linkTarget=null;
      String[] curLinkPath=curPath;
      while (curLinkPath != null) {
        visitedLinks.add(curLinkPath);
        String[] parentPath=Util.arrayCopy(curLinkPath,0,new String[curLinkPath.length - 1],0,curLinkPath.length - 1);
        linkTarget=curLink.getLinkTarget(parentPath);
        if (linkTarget != null && linkTarget instanceof FSLink) {
          curLink=(FSLink)linkTarget;
          curLinkPath=getTargetPath(curLink,parentPath);
          for (          String[] visitedPath : visitedLinks) {
            if (curLinkPath.length == visitedPath.length) {
              int j=0;
              for (; j < curLinkPath.length; ++j) {
                if (!curLinkPath[j].equals(visitedPath[j]))                 break;
              }
              if (j == curLinkPath.length)               return null;
            }
          }
        }
 else         curLinkPath=null;
      }
      if (linkTarget == null)       return null;
      if (linkTarget instanceof FSFolder)       curFolder=(FSFolder)linkTarget;
 else       if (linkTarget instanceof FSFile)       return null;
 else       throw new RuntimeException(""String_Node_Str"" + linkTarget.getClass());
      visitedLinks.clear();
    }
 else     return null;
    String curPathComponent=components[i];
    if (curPathComponent.length() == 0 || curPathComponent.equals(""String_Node_Str"")) {
    }
 else     if (curPathComponent.equals(""String_Node_Str"")) {
      pathStack.removeLast();
    }
 else {
      String fsPathnameComponent=parsePosixPathnameComponent(curPathComponent);
      FSEntry nextEntry=null;
      for (      FSEntry entry : curFolder.list()) {
        if (entry.getName().equals(fsPathnameComponent)) {
          nextEntry=entry;
          break;
        }
      }
      if (nextEntry != null)       pathStack.add(nextEntry.getName());
 else       return null;
    }
  }
  return pathStack.toArray(new String[pathStack.size()]);
}","public String[] getTruePathFromPosixPath(final String posixPath,final String... rootFolderPath) throws IllegalArgumentException {
  final String prefix=globalPrefix;
  globalPrefix+=""String_Node_Str"";
  System.err.println(prefix + ""String_Node_Str"" + posixPath+ ""String_Node_Str""+ Util.concatenateStrings(rootFolderPath,""String_Node_Str"")+ ""String_Node_Str"");
  try {
    String[] components=posixPath.split(""String_Node_Str"");
    int i=0;
    LinkedList<String> pathStack=new LinkedList<String>();
    LinkedList<String[]> visitedLinks=null;
    if (posixPath.startsWith(""String_Node_Str"")) {
      i=1;
    }
 else {
      for (      String pathComponent : rootFolderPath)       pathStack.addLast(pathComponent);
    }
    FSEntry curEntry2=null;
    for (; i < components.length; ++i) {
      String[] curPath=pathStack.toArray(new String[pathStack.size()]);
      System.err.println(prefix + ""String_Node_Str"" + Util.concatenateStrings(curPath,""String_Node_Str"")+ ""String_Node_Str"");
      if (curEntry2 == null) {
        curEntry2=getEntry(curPath);
        System.err.println(prefix + ""String_Node_Str"" + curEntry2);
      }
      FSFolder curFolder;
      if (curEntry2 instanceof FSFolder)       curFolder=(FSFolder)curEntry2;
 else       if (curEntry2 instanceof FSLink) {
        FSLink curLink=(FSLink)curEntry2;
        System.err.println(prefix + ""String_Node_Str"");
        if (visitedLinks == null)         visitedLinks=new LinkedList<String[]>();
 else         visitedLinks.clear();
        FSEntry linkTarget=null;
        String[] curLinkPath=curPath;
        while (curLinkPath != null) {
          visitedLinks.add(curLinkPath);
          String[] parentPath=Util.arrayCopy(curLinkPath,0,new String[curLinkPath.length - 1],0,curLinkPath.length - 1);
          System.err.println(prefix + ""String_Node_Str"" + Util.concatenateStrings(parentPath,""String_Node_Str""));
          linkTarget=curLink.getLinkTarget(parentPath);
          System.err.println(prefix + ""String_Node_Str"" + linkTarget);
          if (linkTarget != null && linkTarget instanceof FSLink) {
            curLink=(FSLink)linkTarget;
            curLinkPath=getTargetPath(curLink,parentPath);
            for (            String[] visitedPath : visitedLinks) {
              if (curLinkPath.length == visitedPath.length) {
                int j=0;
                for (; j < curLinkPath.length; ++j) {
                  if (!curLinkPath[j].equals(visitedPath[j]))                   break;
                }
                if (j == curLinkPath.length)                 return null;
              }
            }
          }
 else           curLinkPath=null;
        }
        System.err.println(prefix + ""String_Node_Str"");
        if (linkTarget == null)         return null;
        if (linkTarget instanceof FSFolder)         curFolder=(FSFolder)linkTarget;
 else         if (linkTarget instanceof FSFile)         return null;
 else         throw new RuntimeException(""String_Node_Str"" + linkTarget.getClass());
        visitedLinks.clear();
      }
 else       return null;
      String curPathComponent=components[i];
      System.err.println(prefix + ""String_Node_Str"" + curPathComponent);
      if (curPathComponent.length() == 0 || curPathComponent.equals(""String_Node_Str"")) {
      }
 else       if (curPathComponent.equals(""String_Node_Str"")) {
        pathStack.removeLast();
        curEntry2=null;
      }
 else {
        String fsPathnameComponent=parsePosixPathnameComponent(curPathComponent);
        System.err.println(prefix + ""String_Node_Str"" + fsPathnameComponent);
        FSEntry nextEntry=null;
        for (        FSEntry entry : curFolder.list()) {
          System.err.println(prefix + ""String_Node_Str"" + entry.getName()+ ""String_Node_Str"");
          if (entry.getName().equals(fsPathnameComponent)) {
            nextEntry=entry;
            System.err.println(prefix + ""String_Node_Str"");
            break;
          }
        }
        System.err.println(prefix + ""String_Node_Str"" + nextEntry);
        if (nextEntry != null) {
          curEntry2=nextEntry;
          pathStack.add(nextEntry.getName());
        }
 else         return null;
      }
    }
    final String[] res=pathStack.toArray(new String[pathStack.size()]);
    System.err.println(prefix + ""String_Node_Str"" + Util.concatenateStrings(res,""String_Node_Str""));
    return res;
  }
  finally {
    System.err.println(prefix + ""String_Node_Str"");
    globalPrefix=prefix;
  }
}",0.6721333880005467
168564,"/** 
 * Looks up the FSEntry denoted by the supplied POSIX path. Since POSIX paths may be relative, a root folder is needed to resolve the relative path structure. If the POSIX pathname is absolute, the root folder parameter will not be used.
 * @param posixPath the POSIX pathname.
 * @param rootFolder the root folder from which we should start resolvingthe path.
 * @return the FSEntry corresponding to the supplied POSIX path, or <code>null</code> if no such pathname could be found.
 * @throws java.lang.IllegalArgumentException if <code>posixPath</code> isan invalid pathname.
 */
public FSEntry getEntryByPosixPath(final String posixPath,final String... rootFolderPath) throws IllegalArgumentException {
  String[] path=getTruePathFromPosixPath(posixPath,rootFolderPath);
  if (path != null)   return getEntry(path);
 else   return null;
}","/** 
 * Looks up the FSEntry denoted by the supplied POSIX path. Since POSIX paths may be relative, a root folder is needed to resolve the relative path structure. If the POSIX pathname is absolute, the root folder parameter will not be used.
 * @param posixPath the POSIX pathname.
 * @param rootFolder the root folder from which we should start resolvingthe path.
 * @return the FSEntry corresponding to the supplied POSIX path, or <code>null</code> if no such pathname could be found.
 * @throws java.lang.IllegalArgumentException if <code>posixPath</code> isan invalid pathname.
 */
public FSEntry getEntryByPosixPath(final String posixPath,final String... rootFolderPath) throws IllegalArgumentException {
  final String prefix=globalPrefix;
  globalPrefix+=""String_Node_Str"";
  try {
    System.err.println(prefix + ""String_Node_Str"" + posixPath+ ""String_Node_Str""+ Util.concatenateStrings(rootFolderPath,""String_Node_Str"")+ ""String_Node_Str"");
    String[] path=getTruePathFromPosixPath(posixPath,rootFolderPath);
    if (path != null) {
      System.err.println(prefix + ""String_Node_Str"" + Util.concatenateStrings(path,""String_Node_Str""));
      return getEntry(path);
    }
 else     return null;
  }
  finally {
    System.err.println(prefix + ""String_Node_Str"");
    globalPrefix=prefix;
  }
}",0.7828916782891678
168565,"/** 
 * {@inheritDoc}
 */
@Override public FSEntry getLinkTarget(String[] parentDir){
  String posixPath=getLinkTargetPosixPath();
  FSEntry res=fsHandler.getEntryByPosixPath(posixPath,parentDir);
  if (res == null) {
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"" + posixPath + ""String_Node_Str"");
    System.err.println(""String_Node_Str"" + Util.concatenateStrings(parentDir,""String_Node_Str"") + ""String_Node_Str"");
  }
  return res;
}","/** 
 * {@inheritDoc}
 */
@Override public FSEntry getLinkTarget(String[] parentDir){
  String prefix=parentFileSystem.globalPrefix;
  parentFileSystem.globalPrefix+=""String_Node_Str"";
  try {
    System.err.println(prefix + ""String_Node_Str"" + Util.concatenateStrings(parentDir,""String_Node_Str"")+ ""String_Node_Str"");
    String posixPath=getLinkTargetPosixPath();
    System.err.println(prefix + ""String_Node_Str"" + posixPath+ ""String_Node_Str"");
    FSEntry res=fsHandler.getEntryByPosixPath(posixPath,parentDir);
    if (res == null) {
      System.err.println(prefix + ""String_Node_Str"");
      System.err.println(prefix + ""String_Node_Str"" + posixPath+ ""String_Node_Str"");
      System.err.println(prefix + ""String_Node_Str"" + Util.concatenateStrings(parentDir,""String_Node_Str"")+ ""String_Node_Str"");
    }
    return res;
  }
  finally {
    System.err.println(prefix + ""String_Node_Str"");
    parentFileSystem.globalPrefix=prefix;
  }
}",0.5744530698659139
168566,"CommonHFSCatalogLeafRecord getRecord(CommonHFSCatalogFolderRecord rootRecord,String... path){
  CommonHFSCatalogFolderRecord curFolder=rootRecord;
  for (int i=0; i < path.length; ++i) {
    String curPathComponent=path[i];
    final CommonHFSCatalogLeafRecord originalFolder=curFolder;
    CommonHFSCatalogLeafRecord[] subRecords=view.listRecords(curFolder);
    for (    CommonHFSCatalogLeafRecord subRecord : subRecords) {
      if (getProperNodeName(subRecord).equals(curPathComponent)) {
        if (i == path.length - 1) {
          return subRecord;
        }
 else         if (subRecord instanceof CommonHFSCatalogFolderRecord) {
          curFolder=(CommonHFSCatalogFolderRecord)subRecord;
          break;
        }
 else         if (subRecord instanceof CommonHFSCatalogFileRecord) {
          CommonHFSCatalogFileRecord fr=(CommonHFSCatalogFileRecord)subRecord;
          final String[] absPath;
          if (fr.getData().isSymbolicLink()) {
            byte[] data=Util.readFully(getReadableDataForkStream(fr));
            String posixPath=Util.readString(data,""String_Node_Str"");
            String[] basePath=Util.arrayCopy(path,0,new String[path.length],0,i + 1);
            absPath=getTruePathFromPosixPath(posixPath,basePath);
          }
 else           if (fr.getData().isHardFileLink()) {
            absPath=new String[]{FILE_HARD_LINK_DIR,FILE_HARD_LINK_PREFIX + fr.getData().getHardLinkInode()};
          }
 else           if (fr.getData().isHardDirectoryLink()) {
            absPath=new String[]{DIRECTORY_HARD_LINK_DIR,DIRECTORY_HARD_LINK_PREFIX + fr.getData().getHardLinkInode()};
          }
 else           return null;
          CommonHFSCatalogLeafRecord linkTarget=getRecord(curFolder,absPath);
          if (linkTarget instanceof CommonHFSCatalogFolderRecord)           curFolder=(CommonHFSCatalogFolderRecord)linkTarget;
 else           return null;
        }
      }
    }
    if (curFolder == originalFolder)     return null;
  }
  if (path.length == 0)   return rootRecord;
 else   throw new RuntimeException(""String_Node_Str"");
}","CommonHFSCatalogLeafRecord getRecord(CommonHFSCatalogFolderRecord rootRecord,String... path){
  String prefix=globalPrefix;
  globalPrefix+=""String_Node_Str"";
  System.err.println(prefix + ""String_Node_Str"" + (rootRecord != null ? rootRecord.getKey().getParentID().toLong() + ""String_Node_Str"" + getProperNodeName(rootRecord)+ ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (path != null ? ""String_Node_Str"" + Util.concatenateStrings(path,""String_Node_Str"") + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  try {
    CommonHFSCatalogFolderRecord curFolder=rootRecord;
    for (int i=0; i < path.length; ++i) {
      String curPathComponent=path[i];
      System.err.println(prefix + ""String_Node_Str"" + (i + 1)+ ""String_Node_Str""+ path.length+ ""String_Node_Str""+ curPathComponent+ ""String_Node_Str"");
      final CommonHFSCatalogLeafRecord originalFolder=curFolder;
      CommonHFSCatalogLeafRecord[] subRecords=view.listRecords(curFolder);
      for (      final CommonHFSCatalogLeafRecord subRecord : subRecords) {
        if (getProperNodeName(subRecord).equals(curPathComponent)) {
          CommonHFSCatalogLeafRecord curRecord=subRecord;
          if (curRecord instanceof CommonHFSCatalogFileRecord) {
            CommonHFSCatalogFileRecord fr=(CommonHFSCatalogFileRecord)curRecord;
            String[] absPath=null;
            if (fr.getData().isSymbolicLink()) {
              byte[] data=Util.readFully(getReadableDataForkStream(fr));
              String posixPath=Util.readString(data,""String_Node_Str"");
              String[] basePath=Util.arrayCopy(path,0,new String[i],0,i);
              absPath=getTruePathFromPosixPath(posixPath,basePath);
              System.err.println(prefix + ""String_Node_Str"" + Util.concatenateStrings(absPath,""String_Node_Str""));
              if (absPath == null)               return null;
            }
 else             if (fr.getData().isHardFileLink()) {
              absPath=new String[]{FILE_HARD_LINK_DIR,FILE_HARD_LINK_PREFIX + fr.getData().getHardLinkInode()};
            }
 else             if (fr.getData().isHardDirectoryLink()) {
              absPath=new String[]{DIRECTORY_HARD_LINK_DIR,DIRECTORY_HARD_LINK_PREFIX + fr.getData().getHardLinkInode()};
            }
            if (absPath != null) {
              System.err.println(prefix + ""String_Node_Str"");
              CommonHFSCatalogLeafRecord linkTarget=getRecord(view.getRoot(),absPath);
              System.err.println(prefix + ""String_Node_Str"" + linkTarget);
              if (linkTarget != null)               curRecord=linkTarget;
            }
          }
          if (i == path.length - 1) {
            System.err.println(prefix + ""String_Node_Str"" + curRecord);
            return curRecord;
          }
 else           if (curRecord instanceof CommonHFSCatalogFolderRecord) {
            curFolder=(CommonHFSCatalogFolderRecord)curRecord;
            break;
          }
 else           return null;
        }
      }
      if (curFolder == originalFolder)       return null;
    }
    if (path.length == 0)     return rootRecord;
 else     throw new RuntimeException(""String_Node_Str"");
  }
  finally {
    System.err.println(prefix + ""String_Node_Str"");
    globalPrefix=prefix;
  }
}",0.531103176094719
168567,"public CommonHFSCatalogLeafRecord getRecord(CommonHFSCatalogNodeID parentID,CommonHFSCatalogString nodeName){
  CatalogInitProcedure init=new CatalogInitProcedure();
  final int nodeSize=init.bthr.getNodeSize();
  long currentNodeOffset=init.bthr.getRootNodeNumber() * nodeSize;
  byte[] currentNodeData=new byte[init.bthr.getNodeSize()];
  init.catalogFile.seek(currentNodeOffset);
  init.catalogFile.readFully(currentNodeData);
  CommonBTNodeDescriptor nodeDescriptor=createCommonBTNodeDescriptor(currentNodeData,0);
  while (nodeDescriptor.getNodeType() == NodeType.INDEX) {
    CommonHFSCatalogIndexNode currentNode=catOps.newCatalogIndexNode(currentNodeData,0,nodeSize,init.bthr);
    CommonBTIndexRecord matchingRecord=findLEKey(currentNode,catOps.newCatalogKey(parentID,nodeName,init.bthr));
    currentNodeOffset=matchingRecord.getIndex() * nodeSize;
    init.catalogFile.seek(currentNodeOffset);
    init.catalogFile.readFully(currentNodeData);
    nodeDescriptor=createCommonBTNodeDescriptor(currentNodeData,0);
  }
  if (nodeDescriptor.getNodeType() == NodeType.LEAF) {
    CommonHFSCatalogLeafNode leaf=catOps.newCatalogLeafNode(currentNodeData,0,init.bthr.getNodeSize(),init.bthr);
    CommonHFSCatalogLeafRecord[] recs=leaf.getLeafRecords();
    for (    CommonHFSCatalogLeafRecord rec : recs)     if (rec.getKey().compareTo(catOps.newCatalogKey(parentID,nodeName,init.bthr)) == 0)     return rec;
    return null;
  }
 else   throw new RuntimeException(""String_Node_Str"" + nodeDescriptor.getNodeType());
}","public CommonHFSCatalogLeafRecord getRecord(CommonHFSCatalogNodeID parentID,CommonHFSCatalogString nodeName){
  CatalogInitProcedure init=new CatalogInitProcedure();
  final int nodeSize=init.bthr.getNodeSize();
  long currentNodeOffset=init.bthr.getRootNodeNumber() * nodeSize;
  byte[] currentNodeData=new byte[init.bthr.getNodeSize()];
  init.catalogFile.seek(currentNodeOffset);
  init.catalogFile.readFully(currentNodeData);
  CommonBTNodeDescriptor nodeDescriptor=createCommonBTNodeDescriptor(currentNodeData,0);
  while (nodeDescriptor.getNodeType() == NodeType.INDEX) {
    CommonHFSCatalogIndexNode currentNode=catOps.newCatalogIndexNode(currentNodeData,0,nodeSize,init.bthr);
    CommonBTIndexRecord matchingRecord=findLEKey(currentNode,catOps.newCatalogKey(parentID,nodeName,init.bthr));
    if (matchingRecord == null)     return null;
    currentNodeOffset=matchingRecord.getIndex() * nodeSize;
    init.catalogFile.seek(currentNodeOffset);
    init.catalogFile.readFully(currentNodeData);
    nodeDescriptor=createCommonBTNodeDescriptor(currentNodeData,0);
  }
  if (nodeDescriptor.getNodeType() == NodeType.LEAF) {
    CommonHFSCatalogLeafNode leaf=catOps.newCatalogLeafNode(currentNodeData,0,init.bthr.getNodeSize(),init.bthr);
    CommonHFSCatalogLeafRecord[] recs=leaf.getLeafRecords();
    for (    CommonHFSCatalogLeafRecord rec : recs)     if (rec.getKey().compareTo(catOps.newCatalogKey(parentID,nodeName,init.bthr)) == 0)     return rec;
    return null;
  }
 else   throw new RuntimeException(""String_Node_Str"" + nodeDescriptor.getNodeType());
}",0.9841372612495952
168568,"/** 
 * Looks up the FSEntry denoted by the supplied POSIX path. Since POSIX paths may be relative, a root folder is needed to resolve the relative path structure. If the POSIX pathname is absolute, the root folder parameter will not be used.
 * @param posixPath the POSIX pathname.
 * @param rootFolder the root folder from which we should start resolvingthe path.
 * @return the FSEntry corresponding to the supplied POSIX path, or <code>null</code> if no such pathname could be found.
 * @throws java.lang.IllegalArgumentException if <code>posixPath</code> isan invalid pathname.
 */
public FSEntry getEntryByPosixPath(final String posixPath,final FSFolder rootFolder) throws IllegalArgumentException {
  String[] components=posixPath.split(""String_Node_Str"");
  int i=0;
  FSEntry curEntry;
  LinkedList<String[]> visitedLinks=null;
  if (components[0].length() == 0) {
    i=1;
    curEntry=getRoot();
  }
 else   curEntry=rootFolder;
  for (; i < components.length; ++i) {
    FSFolder curFolder;
    if (curEntry instanceof FSFolder)     curFolder=(FSFolder)curEntry;
 else     if (curEntry instanceof FSLink) {
      FSLink curLink=(FSLink)curEntry;
      if (visitedLinks == null)       visitedLinks=new LinkedList<String[]>();
 else       visitedLinks.clear();
      visitedLinks.add(curEntry.getAbsolutePath());
      FSEntry linkTarget=curLink.getLinkTarget();
      while (linkTarget != null && linkTarget instanceof FSLink) {
        curLink=(FSLink)linkTarget;
        String[] curPath=curLink.getAbsolutePath();
        for (        String[] visitedPath : visitedLinks) {
          if (curPath.length == visitedPath.length) {
            int j=0;
            for (; j < curPath.length; ++j) {
              if (!curPath[j].equals(visitedPath[j]))               break;
            }
            if (j == curPath.length)             return null;
          }
        }
        visitedLinks.add(curPath);
        linkTarget=curLink.getLinkTarget();
      }
      if (linkTarget == null)       return null;
      if (linkTarget instanceof FSFolder)       curFolder=(FSFolder)linkTarget;
 else       return null;
      visitedLinks.clear();
    }
 else     return null;
    String curPathComponent=components[i];
    if (curPathComponent.length() == 0 || curPathComponent.equals(""String_Node_Str"")) {
    }
 else     if (curPathComponent.equals(""String_Node_Str"")) {
      curFolder=curFolder.getParent();
    }
 else {
      String fsPathnameComponent=parsePosixPathnameComponent(curPathComponent);
      FSEntry nextEntry=null;
      for (      FSEntry entry : curFolder.list()) {
        if (entry.getName().equals(fsPathnameComponent)) {
          nextEntry=entry;
          break;
        }
      }
      if (nextEntry != null)       curEntry=nextEntry;
 else       return null;
    }
  }
  return curEntry;
}","/** 
 * Looks up the FSEntry denoted by the supplied POSIX path. Since POSIX paths may be relative, a root folder is needed to resolve the relative path structure. If the POSIX pathname is absolute, the root folder parameter will not be used.
 * @param posixPath the POSIX pathname.
 * @param rootFolder the root folder from which we should start resolvingthe path.
 * @return the FSEntry corresponding to the supplied POSIX path, or <code>null</code> if no such pathname could be found.
 * @throws java.lang.IllegalArgumentException if <code>posixPath</code> isan invalid pathname.
 */
public FSEntry getEntryByPosixPath(final String posixPath,final FSFolder rootFolder) throws IllegalArgumentException {
  String[] components=posixPath.split(""String_Node_Str"");
  int i=0;
  FSEntry curEntry;
  LinkedList<String[]> visitedLinks=null;
  if (posixPath.startsWith(""String_Node_Str"")) {
    i=1;
    curEntry=getRoot();
  }
 else   curEntry=rootFolder;
  for (; i < components.length; ++i) {
    FSFolder curFolder;
    if (curEntry instanceof FSFolder)     curFolder=(FSFolder)curEntry;
 else     if (curEntry instanceof FSLink) {
      FSLink curLink=(FSLink)curEntry;
      if (visitedLinks == null)       visitedLinks=new LinkedList<String[]>();
 else       visitedLinks.clear();
      visitedLinks.add(curEntry.getAbsolutePath());
      FSEntry linkTarget=curLink.getLinkTarget();
      while (linkTarget != null && linkTarget instanceof FSLink) {
        curLink=(FSLink)linkTarget;
        String[] curPath=curLink.getAbsolutePath();
        for (        String[] visitedPath : visitedLinks) {
          if (curPath.length == visitedPath.length) {
            int j=0;
            for (; j < curPath.length; ++j) {
              if (!curPath[j].equals(visitedPath[j]))               break;
            }
            if (j == curPath.length)             return null;
          }
        }
        visitedLinks.add(curPath);
        linkTarget=curLink.getLinkTarget();
      }
      if (linkTarget == null)       return null;
      if (linkTarget instanceof FSFolder)       curFolder=(FSFolder)linkTarget;
 else       return null;
      visitedLinks.clear();
    }
 else     return null;
    String curPathComponent=components[i];
    if (curPathComponent.length() == 0 || curPathComponent.equals(""String_Node_Str"")) {
    }
 else     if (curPathComponent.equals(""String_Node_Str"")) {
      curFolder=curFolder.getParent();
    }
 else {
      String fsPathnameComponent=parsePosixPathnameComponent(curPathComponent);
      FSEntry nextEntry=null;
      for (      FSEntry entry : curFolder.list()) {
        if (entry.getName().equals(fsPathnameComponent)) {
          nextEntry=entry;
          break;
        }
      }
      if (nextEntry != null)       curEntry=nextEntry;
 else       return null;
    }
  }
  return curEntry;
}",0.988339222614841
168569,"private CommonHFSCatalogFolderRecord lookupParentFolderRecord(CommonHFSCatalogLeafRecord childRecord){
  CommonHFSCatalogNodeID parentID=childRecord.getKey().getParentID();
  CommonHFSCatalogLeafRecord parent=view.getRecord(parentID,view.getEmptyString());
  if (parent == null) {
    if (parentID.toLong() == 1)     return null;
 else     throw new RuntimeException(""String_Node_Str"" + parentID.toLong() + ""String_Node_Str"");
  }
  if (parent instanceof CommonHFSCatalogFolderThreadRecord) {
    CommonHFSCatalogFolderThread data=((CommonHFSCatalogFolderThreadRecord)parent).getData();
    CommonHFSCatalogLeafRecord rec=view.getRecord(data.getParentID(),data.getNodeName());
    if (rec instanceof CommonHFSCatalogFolderRecord)     return (CommonHFSCatalogFolderRecord)rec;
 else     throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + rec.getClass());
  }
 else   if (parent instanceof CommonHFSCatalogFileThreadRecord) {
    throw new RuntimeException(""String_Node_Str"" + parentID + ""String_Node_Str"");
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + parentID + ""String_Node_Str""+ parent.getClass()+ ""String_Node_Str"");
  }
}","private CommonHFSCatalogFolderRecord lookupParentFolderRecord(CommonHFSCatalogLeafRecord childRecord){
  CommonHFSCatalogNodeID parentID=childRecord.getKey().getParentID();
  CommonHFSCatalogLeafRecord parent=view.getRecord(parentID,view.getEmptyString());
  if (parent == null) {
    if (parentID.toLong() == 1)     return null;
 else     throw new RuntimeException(""String_Node_Str"" + parentID.toLong() + ""String_Node_Str"");
  }
  if (parent instanceof CommonHFSCatalogFolderThreadRecord) {
    CommonHFSCatalogFolderThread data=((CommonHFSCatalogFolderThreadRecord)parent).getData();
    CommonHFSCatalogLeafRecord rec=view.getRecord(data.getParentID(),data.getNodeName());
    if (rec == null)     return null;
 else     if (rec instanceof CommonHFSCatalogFolderRecord)     return (CommonHFSCatalogFolderRecord)rec;
 else     throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + rec.getClass());
  }
 else   if (parent instanceof CommonHFSCatalogFileThreadRecord) {
    throw new RuntimeException(""String_Node_Str"" + parentID + ""String_Node_Str"");
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + parentID + ""String_Node_Str""+ parent.getClass()+ ""String_Node_Str"");
  }
}",0.9813717188823032
168570,"@Override public boolean existsPartitionSystem(){
  try {
    ReadableRandomAccessStream llf=data.createReadOnlyFile();
    byte[] secondBlock=new byte[512];
    llf.seek(512);
    llf.readFully(secondBlock);
    GPTHeader gh=new GPTHeader(secondBlock,0);
    if (gh.isValid()) {
      return true;
    }
  }
 catch (  Exception e) {
  }
  return false;
}","@Override public boolean existsPartitionSystem(){
  try {
    ReadableRandomAccessStream llf=data.createReadOnlyFile();
    byte[] secondBlock=new byte[512];
    llf.seek(512);
    llf.readFully(secondBlock);
    GPTHeader gh=new GPTHeader(secondBlock,0,512);
    if (gh.isValid()) {
      return true;
    }
  }
 catch (  Exception e) {
  }
  return false;
}",0.9943977591036416
168571,"public byte[] getBytes(){
  byte[] result=new byte[512];
  byte[] curData;
  int i=0;
  System.arraycopy(reserved1,0,result,i,reserved1.length);
  i+=reserved1.length;
  System.arraycopy(optIBMBootmgrEntry,0,result,i,optIBMBootmgrEntry.length);
  i+=optIBMBootmgrEntry.length;
  System.arraycopy(reserved2,0,result,i,reserved2.length);
  i+=reserved2.length;
  System.arraycopy(optDiskSignature,0,result,i,optDiskSignature.length);
  i+=optDiskSignature.length;
  curData=firstEntry.getBytes();
  System.arraycopy(curData,0,result,i,curData.length);
  i+=curData.length;
  curData=secondEntry.getBytes();
  System.arraycopy(curData,0,result,i,curData.length);
  i+=curData.length;
  System.arraycopy(reserved4,0,result,i,reserved4.length);
  i+=reserved4.length;
  System.arraycopy(mbrSignature,0,result,i,mbrSignature.length);
  i+=mbrSignature.length;
  if (i != result.length)   throw new RuntimeException(""String_Node_Str"");
  return result;
}","public byte[] getBytes(){
  byte[] result=new byte[512];
  byte[] curData;
  int i=0;
  System.arraycopy(reserved1,0,result,i,reserved1.length);
  i+=reserved1.length;
  System.arraycopy(optIBMBootmgrEntry,0,result,i,optIBMBootmgrEntry.length);
  i+=optIBMBootmgrEntry.length;
  System.arraycopy(reserved2,0,result,i,reserved2.length);
  i+=reserved2.length;
  System.arraycopy(optDiskSignature,0,result,i,optDiskSignature.length);
  i+=optDiskSignature.length;
  System.arraycopy(reserved3,0,result,i,reserved3.length);
  i+=reserved3.length;
  curData=firstEntry.getBytes();
  System.arraycopy(curData,0,result,i,curData.length);
  i+=curData.length;
  curData=secondEntry.getBytes();
  System.arraycopy(curData,0,result,i,curData.length);
  i+=curData.length;
  System.arraycopy(reserved4,0,result,i,reserved4.length);
  i+=reserved4.length;
  System.arraycopy(mbrSignature,0,result,i,mbrSignature.length);
  i+=mbrSignature.length;
  if (i != result.length)   throw new RuntimeException(""String_Node_Str"");
  return result;
}",0.958502024291498
168572,"public void printFields(PrintStream ps,String prefix){
  ps.println(prefix + ""String_Node_Str"" + Util.toHexStringBE(getOptionalDiskSignature())+ ""String_Node_Str"");
  for (int i=0; i < partitions.length; ++i) {
    ps.println(prefix + ""String_Node_Str"" + i+ ""String_Node_Str"");
    if (partitions[i].isValid()) {
      partitions[i].print(ps,prefix + ""String_Node_Str"");
    }
 else     ps.println(prefix + ""String_Node_Str"");
  }
  ps.println(prefix + ""String_Node_Str"" + Util.toHexStringBE(getMBRSignature()));
}","public void printFields(PrintStream ps,String prefix){
  ps.println(prefix + ""String_Node_Str"" + Util.toHexStringBE(getOptionalDiskSignature())+ ""String_Node_Str"");
  ps.println(prefix + ""String_Node_Str"");
  for (int i=0; i < partitions.length; ++i) {
    ps.println(prefix + ""String_Node_Str"" + i+ ""String_Node_Str"");
    if (partitions[i].isValid()) {
      partitions[i].print(ps,prefix + ""String_Node_Str"");
    }
 else     ps.println(prefix + ""String_Node_Str"");
  }
  ps.println(prefix + ""String_Node_Str"" + Util.toHexStringBE(getMBRSignature()));
}",0.9607476635514018
168573,"public static int unsignedArrayCompare(char[] a,int aoff,int alen,char[] b,int boff,int blen){
  int compareLen=Math.max(alen,blen);
  for (int i=0; i < compareLen; ++i) {
    int curA=a[aoff + i] & 0xFFFF;
    int curB=b[boff + i] & 0xFFFF;
    if (curA != curB)     return curA - curB;
  }
  return alen - blen;
}","public static int unsignedArrayCompare(char[] a,int aoff,int alen,char[] b,int boff,int blen){
  int compareLen=Math.min(alen,blen);
  for (int i=0; i < compareLen; ++i) {
    int curA=a[aoff + i] & 0xFFFF;
    int curB=b[boff + i] & 0xFFFF;
    if (curA != curB)     return curA - curB;
  }
  return alen - blen;
}",0.9936507936507936
168574,"public static boolean arraysEqual(Object[] a,Object[] b){
  if (a.length != b.length)   return false;
 else {
    for (int i=0; i < a.length; ++i)     if (!a[i].equals(b[i]))     return false;
    return true;
  }
}","public static boolean arraysEqual(Object[] a,Object[] b){
  return arrayRegionsEqual(a,0,a.length,b,0,b.length);
}",0.4984802431610942
168575,"public void setStartingLBA(long i){
  Util.arrayCopy(Util.toByteArrayBE(i),startingLBA);
}","public void setStartingLBA(long i){
  Util.arrayCopy(Util.toByteArrayLE(i),startingLBA);
}",0.9888888888888888
168576,"public void setEndingLBA(long i){
  Util.arrayCopy(Util.toByteArrayBE(i),endingLBA);
}","public void setEndingLBA(long i){
  Util.arrayCopy(Util.toByteArrayLE(i),endingLBA);
}",0.9883720930232558
168577,"public void printFields(PrintStream ps,String prefix){
  printPartitionInfo(ps,prefix + ""String_Node_Str"");
}","public void printFields(PrintStream ps,String prefix){
  printPartitionInfo(ps,prefix + ""String_Node_Str"");
  ps.println(prefix + ""String_Node_Str"");
  ps.println(prefix + ""String_Node_Str"" + getStartOffset());
  ps.println(prefix + ""String_Node_Str"" + getLength());
  ps.println(prefix + ""String_Node_Str"" + getType());
}",0.505800464037123
168578,"public long getStartOffset(){
  return (getPmPyPartStart() + getPmLgDataStart()) * blockSize;
}","public long getStartOffset(){
  return (Util.unsign(getPmPyPartStart()) + Util.unsign(getPmLgDataStart())) * blockSize;
}",0.8796296296296297
168579,"public long getLength(){
  return getPmDataCnt() * blockSize;
}","public long getLength(){
  return Util.unsign(getPmDataCnt()) * blockSize;
}",0.9064748201438848
168580,"public ApplePartitionMap(LowLevelFile isoRaf,long pmOffset,int blockSize){
  isoRaf.seek(pmOffset);
  byte[] currentBlock=new byte[blockSize];
  ArrayList<APMPartition> partitionList=new ArrayList<APMPartition>();
  while (true) {
    isoRaf.readFully(currentBlock);
    if ((currentBlock[0] & 0xFF) == 0x50 && (currentBlock[1] & 0xFF) == 0x4D) {
      APMPartition p=new APMPartition(currentBlock,0,blockSize);
      partitionList.add(p);
    }
 else     break;
  }
  partitions=partitionList.toArray(new APMPartition[partitionList.size()]);
}","public ApplePartitionMap(byte[] data,int off,int blockSize){
  byte[] currentBlock=new byte[blockSize];
  ArrayList<APMPartition> partitionList=new ArrayList<APMPartition>();
  while (true) {
    System.arraycopy(data,off,currentBlock,0,currentBlock.length);
    off+=currentBlock.length;
    if ((currentBlock[0] & 0xFF) == 0x50 && (currentBlock[1] & 0xFF) == 0x4D) {
      APMPartition p=new APMPartition(currentBlock,0,blockSize);
      partitionList.add(p);
    }
 else     break;
  }
  partitions=partitionList.toArray(new APMPartition[partitionList.size()]);
}",0.790990990990991
168581,"public static int length(){
  return 268;
}","public static int length(){
  return 269;
}",0.9767441860465116
168582,"public int getSbBlkCount(){
  return Util.readIntBE(sbBlkCount);
}","/** 
 * Number of blocks on the device. 
 */
public int getSbBlkCount(){
  return Util.readIntBE(sbBlkCount);
}",0.7457627118644068
168583,"public short getSbSig(){
  return Util.readShortBE(sbSig);
}","/** 
 * Device signature. (Should be ""ER""...) 
 */
public short getSbSig(){
  return Util.readShortBE(sbSig);
}",0.7017543859649122
168584,"public short getSbBlkSize(){
  return Util.readShortBE(sbBlkSize);
}","/** 
 * Block size of the device. 
 */
public short getSbBlkSize(){
  return Util.readShortBE(sbBlkSize);
}",0.7771428571428571
168585,"public short getSbDrvrCount(){
  return Util.readShortBE(sbDrvrCount);
}","/** 
 * Number of driver descriptor entries. 
 */
public short getSbDrvrCount(){
  return Util.readShortBE(sbDrvrCount);
}",0.7422680412371134
168586,"public short getReserved1(){
  return Util.readShortBE(reserved1);
}","/** 
 * Reserved. 
 */
public short getReserved1(){
  return Util.readShortBE(reserved1);
}",0.8553459119496856
168587,"public int getReserved3(){
  return Util.readIntBE(reserved3);
}","/** 
 * Reserved. 
 */
public int getReserved3(){
  return Util.readIntBE(reserved3);
}",0.847682119205298
168588,"public void printFields(PrintStream ps,String prefix){
  ps.println(prefix + ""String_Node_Str"" + getSbSig());
  ps.println(prefix + ""String_Node_Str"" + getSbBlkSize());
  ps.println(prefix + ""String_Node_Str"" + getSbBlkCount());
  ps.println(prefix + ""String_Node_Str"" + getReserved1());
  ps.println(prefix + ""String_Node_Str"" + getReserved2());
  ps.println(prefix + ""String_Node_Str"" + getReserved3());
  ps.println(prefix + ""String_Node_Str"" + getSbDrvrCount());
  ps.println(prefix + ""String_Node_Str"");
  getFirstEntry().print(ps,prefix + ""String_Node_Str"");
  ps.println(prefix + ""String_Node_Str"");
  getBabab().print(ps,prefix + ""String_Node_Str"");
  ps.println(prefix + ""String_Node_Str"" + getReserved4());
}","public void printFields(PrintStream ps,String prefix){
  ps.println(prefix + ""String_Node_Str"" + getSbSigAsString()+ ""String_Node_Str"");
  ps.println(prefix + ""String_Node_Str"" + getSbBlkSize());
  ps.println(prefix + ""String_Node_Str"" + getSbBlkCount());
  ps.println(prefix + ""String_Node_Str"" + getReserved1());
  ps.println(prefix + ""String_Node_Str"" + getReserved2());
  ps.println(prefix + ""String_Node_Str"" + getReserved3());
  ps.println(prefix + ""String_Node_Str"" + getSbDrvrCount());
  ps.println(prefix + ""String_Node_Str"" + entries.length+ ""String_Node_Str"");
  for (int i=0; i < entries.length; ++i) {
    ps.println(prefix + ""String_Node_Str"" + i+ ""String_Node_Str"");
    entries[i].print(ps,prefix + ""String_Node_Str"");
  }
  if (entries.length == 0)   ps.println(prefix + ""String_Node_Str"");
  ps.println(prefix + ""String_Node_Str"" + ddPad.length+ ""String_Node_Str"");
}",0.6862133499688085
168589,"public DriverDescriptorRecord(byte[] data,int offset){
  System.arraycopy(data,offset + 0,sbSig,0,2);
  System.arraycopy(data,offset + 2,sbBlkSize,0,2);
  System.arraycopy(data,offset + 4,sbBlkCount,0,4);
  System.arraycopy(data,offset + 8,reserved1,0,2);
  System.arraycopy(data,offset + 10,reserved2,0,2);
  System.arraycopy(data,offset + 12,reserved3,0,4);
  System.arraycopy(data,offset + 16,sbDrvrCount,0,2);
  firstEntry=new DriverDescriptorEntry(data,offset + 18);
  babab=new DriverDescriptorEntry(data,offset + 26);
  System.arraycopy(data,offset + 266,reserved4,0,2);
}","public DriverDescriptorRecord(byte[] data,int offset){
  System.arraycopy(data,offset + 0,sbSig,0,2);
  System.arraycopy(data,offset + 2,sbBlkSize,0,2);
  System.arraycopy(data,offset + 4,sbBlkCount,0,4);
  System.arraycopy(data,offset + 8,reserved1,0,2);
  System.arraycopy(data,offset + 10,reserved2,0,2);
  System.arraycopy(data,offset + 12,reserved3,0,4);
  System.arraycopy(data,offset + 16,sbDrvrCount,0,2);
  entries=new DriverDescriptorEntry[getSbDrvrCount()];
  int i;
  for (i=0; i < entries.length; ++i)   entries[i]=new DriverDescriptorEntry(data,offset + 18 + DriverDescriptorEntry.length() * i);
  int padOffset=offset + 18 + DriverDescriptorEntry.length() * i;
  ddPad=new byte[length() - padOffset];
  System.arraycopy(data,padOffset,ddPad,0,ddPad.length);
}",0.7331855136733185
168590,"public short getReserved2(){
  return Util.readShortBE(reserved2);
}","/** 
 * Reserved. 
 */
public short getReserved2(){
  return Util.readShortBE(reserved2);
}",0.8553459119496856
168591,"public long getStartOffset(){
  return getLBAFirstSector() * sectorSize;
}","public long getStartOffset(){
  return Util.unsign(getLBAFirstSector()) * sectorSize;
}",0.9192546583850932
168592,"public long getLength(){
  return getLBAPartitionLength() * sectorSize;
}","public long getLength(){
  return Util.unsign(getLBAPartitionLength()) * sectorSize;
}",0.9182389937106918
168593,"public void seek(long pos){
  try {
    raf.seek(pos);
  }
 catch (  IOException ioe) {
    throw new RuntimeException(""String_Node_Str"" + pos + ""String_Node_Str""+ ioe.getMessage(),ioe);
  }
}","public void seek(long pos){
  try {
    raf.seek(pos);
  }
 catch (  IOException ioe) {
    throw new RuntimeException(""String_Node_Str"" + pos + ""String_Node_Str""+ ioe.toString(),ioe);
  }
}",0.9581151832460733
168594,"private int extractRecursive(HFSPlusCatalogLeafRecord rec,File outDir,ExtractProgressDialog progressDialog){
  if (progressDialog.cancelSignaled()) {
    progressDialog.confirmCancel();
    return 0;
  }
  int errorCount=0;
  HFSPlusCatalogLeafRecordData recData=rec.getData();
  if (recData.getRecordType() == HFSPlusCatalogLeafRecordData.RECORD_TYPE_FILE && recData instanceof HFSPlusCatalogFile) {
    String filename=rec.getKey().getNodeName().getUnicodeAsComposedString(normalizationToolkit);
    progressDialog.updateCurrentFile(filename);
    File outFile=new File(outDir,filename);
    try {
      FileOutputStream fos=new FileOutputStream(outFile);
      fsView.extractDataForkToStream(rec,fos);
      fos.close();
    }
 catch (    FileNotFoundException fnfe) {
      fnfe.printStackTrace();
      char[] filenameChars=filename.toCharArray();
      System.out.println(""String_Node_Str"" + filenameChars.length + ""String_Node_Str"");
      System.out.print(""String_Node_Str"");
      for (      char c : filenameChars)       System.out.print(""String_Node_Str"" + Util.toHexStringBE(c));
      System.out.println();
      int reply=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + filename + ""String_Node_Str""+ outDir.getAbsolutePath()+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      if (reply == JOptionPane.NO_OPTION)       progressDialog.signalCancel();
      ++errorCount;
    }
catch (    IOException ioe) {
      String msg=ioe.getMessage();
      int reply=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + filename + ""String_Node_Str""+ outDir.getAbsolutePath()+ (msg != null ? ""String_Node_Str"" + msg + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      if (reply == JOptionPane.NO_OPTION)       progressDialog.signalCancel();
      ++errorCount;
    }
catch (    Exception e) {
      e.printStackTrace();
      String message=""String_Node_Str"" + filename + ""String_Node_Str"";
      message+=""String_Node_Str"" + e.toString();
      for (      StackTraceElement ste : e.getStackTrace())       message+=""String_Node_Str"" + ste.toString();
      message+=""String_Node_Str"";
      int reply=JOptionPane.showConfirmDialog(this,message + ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      if (reply == JOptionPane.NO_OPTION)       progressDialog.signalCancel();
      ++errorCount;
    }
    progressDialog.addDataProgress(((HFSPlusCatalogFile)recData).getDataFork().getLogicalSize());
  }
 else   if (recData.getRecordType() == HFSPlusCatalogLeafRecordData.RECORD_TYPE_FOLDER && recData instanceof HFSPlusCatalogFolder) {
    String dirName=rec.getKey().getNodeName().toString();
    progressDialog.updateCurrentFile(dirName);
    HFSCatalogNodeID requestedID;
    HFSPlusCatalogFolder catFolder=(HFSPlusCatalogFolder)recData;
    requestedID=catFolder.getFolderID();
    HFSPlusCatalogLeafRecord[] contents=fsView.listRecords(requestedID);
    File thisDir=new File(outDir,dirName);
    if (thisDir.mkdir()) {
      for (      HFSPlusCatalogLeafRecord outRec : contents) {
        errorCount+=extractRecursive(outRec,thisDir,progressDialog);
      }
    }
 else {
      int reply=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + thisDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      if (reply == JOptionPane.NO_OPTION)       progressDialog.signalCancel();
      ++errorCount;
    }
  }
  return errorCount;
}","private int extractRecursive(HFSPlusCatalogLeafRecord rec,File outDir,ExtractProgressDialog progressDialog){
  if (progressDialog.cancelSignaled()) {
    progressDialog.confirmCancel();
    return 0;
  }
  int errorCount=0;
  HFSPlusCatalogLeafRecordData recData=rec.getData();
  if (recData.getRecordType() == HFSPlusCatalogLeafRecordData.RECORD_TYPE_FILE && recData instanceof HFSPlusCatalogFile) {
    String filename=rec.getKey().getNodeName().getUnicodeAsComposedString(normalizationToolkit);
    progressDialog.updateCurrentFile(filename);
    File outFile=new File(outDir,filename);
    try {
      FileOutputStream fos=new FileOutputStream(outFile);
      fsView.extractDataForkToStream(rec,fos);
      fos.close();
    }
 catch (    FileNotFoundException fnfe) {
      fnfe.printStackTrace();
      char[] filenameChars=filename.toCharArray();
      System.out.println(""String_Node_Str"" + filenameChars.length + ""String_Node_Str"");
      System.out.print(""String_Node_Str"");
      for (      char c : filenameChars)       System.out.print(""String_Node_Str"" + Util.toHexStringBE(c));
      System.out.println();
      int reply=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + filename + ""String_Node_Str""+ outDir.getAbsolutePath()+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      if (reply == JOptionPane.NO_OPTION)       progressDialog.signalCancel();
      ++errorCount;
    }
catch (    IOException ioe) {
      String msg=ioe.getMessage();
      int reply=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + filename + ""String_Node_Str""+ outDir.getAbsolutePath()+ (msg != null ? ""String_Node_Str"" + msg + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      if (reply == JOptionPane.NO_OPTION)       progressDialog.signalCancel();
      ++errorCount;
    }
catch (    Exception e) {
      e.printStackTrace();
      String message=""String_Node_Str"" + filename + ""String_Node_Str"";
      message+=""String_Node_Str"" + e.toString();
      for (      StackTraceElement ste : e.getStackTrace())       message+=""String_Node_Str"" + ste.toString();
      message+=""String_Node_Str"";
      int reply=JOptionPane.showConfirmDialog(this,message + ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      if (reply == JOptionPane.NO_OPTION)       progressDialog.signalCancel();
      ++errorCount;
    }
    progressDialog.addDataProgress(((HFSPlusCatalogFile)recData).getDataFork().getLogicalSize());
  }
 else   if (recData.getRecordType() == HFSPlusCatalogLeafRecordData.RECORD_TYPE_FOLDER && recData instanceof HFSPlusCatalogFolder) {
    String dirName=rec.getKey().getNodeName().getUnicodeAsComposedString(normalizationToolkit);
    progressDialog.updateCurrentFile(dirName);
    HFSCatalogNodeID requestedID;
    HFSPlusCatalogFolder catFolder=(HFSPlusCatalogFolder)recData;
    requestedID=catFolder.getFolderID();
    HFSPlusCatalogLeafRecord[] contents=fsView.listRecords(requestedID);
    File thisDir=new File(outDir,dirName);
    if (thisDir.mkdir()) {
      for (      HFSPlusCatalogLeafRecord outRec : contents) {
        errorCount+=extractRecursive(outRec,thisDir,progressDialog);
      }
    }
 else {
      int reply=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + thisDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
      if (reply == JOptionPane.NO_OPTION)       progressDialog.signalCancel();
      ++errorCount;
    }
  }
  return errorCount;
}",0.992345544013122
168595,"public RecordNodeStorage(HFSPlusCatalogLeafRecord record){
  this.record=record;
  if (record.getData().getRecordType() != HFSPlusCatalogLeafRecordData.RECORD_TYPE_FOLDER && record.getData().getRecordType() != HFSPlusCatalogLeafRecordData.RECORD_TYPE_FOLDER_THREAD)   throw new IllegalArgumentException(""String_Node_Str"");
}","public RecordNodeStorage(HFSPlusCatalogLeafRecord parentRecord){
  this.parentRecord=parentRecord;
  if (parentRecord.getData().getRecordType() != HFSPlusCatalogLeafRecordData.RECORD_TYPE_FOLDER)   throw new IllegalArgumentException(""String_Node_Str"");
}",0.7820069204152249
168596,"public HFSPlusCatalogLeafRecord getRecord(){
  return record;
}","public HFSPlusCatalogLeafRecord getRecord(){
  return parentRecord;
}",0.9545454545454546
168597,"private void populateFilesystemGUI(HFSPlusCatalogLeafRecord[] contents){
  DefaultMutableTreeNode rootNode=new NoLeafMutableTreeNode(""String_Node_Str"");
  populateNode(rootNode,contents);
  DefaultTreeModel model=new DefaultTreeModel(rootNode);
  dirTree.setModel(model);
  populateTable(contents);
  addressField.setText(""String_Node_Str"");
}","private void populateFilesystemGUI(HFSPlusCatalogLeafRecord root,HFSPlusCatalogLeafRecord[] contents){
  DefaultMutableTreeNode rootNode=new NoLeafMutableTreeNode(new RecordNodeStorage(root));
  populateNode(rootNode,contents);
  DefaultTreeModel model=new DefaultTreeModel(rootNode);
  dirTree.setModel(model);
  populateTable(contents);
  addressField.setText(""String_Node_Str"");
}",0.4242424242424242
168598,"private void populateNode(DefaultMutableTreeNode rootNode,HFSPlusCatalogLeafRecord[] contents){
  boolean folderThreadSet=false;
  boolean hasChildren=false;
  LinkedList<HFSPlusCatalogLeafRecord> fileThreads=new LinkedList<HFSPlusCatalogLeafRecord>();
  for (  HFSPlusCatalogLeafRecord rec : contents) {
    Vector<String> currentRow=new Vector<String>(4);
    HFSPlusCatalogLeafRecordData recData=rec.getData();
    if (recData.getRecordType() == HFSPlusCatalogLeafRecordData.RECORD_TYPE_FILE && recData instanceof HFSPlusCatalogFile) {
      HFSPlusCatalogFile catFile=(HFSPlusCatalogFile)recData;
      if (!hasChildren)       hasChildren=true;
    }
 else     if (recData.getRecordType() == HFSPlusCatalogLeafRecordData.RECORD_TYPE_FOLDER && recData instanceof HFSPlusCatalogFolder) {
      HFSPlusCatalogFolder catFolder=(HFSPlusCatalogFolder)recData;
      rootNode.add(new NoLeafMutableTreeNode(new RecordNodeStorage(rec)));
      if (!hasChildren)       hasChildren=true;
    }
 else     if (recData.getRecordType() == HFSPlusCatalogLeafRecordData.RECORD_TYPE_FOLDER_THREAD && recData instanceof HFSPlusCatalogThread) {
      HFSPlusCatalogThread catThread=(HFSPlusCatalogThread)recData;
      rootNode.setUserObject(new RecordNodeStorage(rec));
      if (!folderThreadSet)       folderThreadSet=true;
    }
 else     if (recData.getRecordType() == HFSPlusCatalogLeafRecordData.RECORD_TYPE_FILE_THREAD && recData instanceof HFSPlusCatalogThread) {
      HFSPlusCatalogThread catThread=(HFSPlusCatalogThread)recData;
      fileThreads.addLast(rec);
    }
 else     System.err.println(""String_Node_Str"" + recData.getRecordType() + ""String_Node_Str"");
  }
  if (hasChildren && !folderThreadSet)   System.err.println(""String_Node_Str"");
  if (!fileThreads.isEmpty())   System.err.println(""String_Node_Str"" + fileThreads.size() + ""String_Node_Str"");
}","private void populateNode(DefaultMutableTreeNode rootNode,HFSPlusCatalogLeafRecord[] contents){
  boolean folderThreadSet=false;
  boolean hasChildren=false;
  Object o=rootNode.getUserObject();
  if (o instanceof RecordNodeStorage) {
    RecordNodeStorage rootStorage=(RecordNodeStorage)o;
    LinkedList<HFSPlusCatalogLeafRecord> fileThreads=new LinkedList<HFSPlusCatalogLeafRecord>();
    for (    HFSPlusCatalogLeafRecord rec : contents) {
      Vector<String> currentRow=new Vector<String>(4);
      HFSPlusCatalogLeafRecordData recData=rec.getData();
      if (recData.getRecordType() == HFSPlusCatalogLeafRecordData.RECORD_TYPE_FILE && recData instanceof HFSPlusCatalogFile) {
        HFSPlusCatalogFile catFile=(HFSPlusCatalogFile)recData;
        if (!hasChildren)         hasChildren=true;
      }
 else       if (recData.getRecordType() == HFSPlusCatalogLeafRecordData.RECORD_TYPE_FOLDER && recData instanceof HFSPlusCatalogFolder) {
        HFSPlusCatalogFolder catFolder=(HFSPlusCatalogFolder)recData;
        rootNode.add(new NoLeafMutableTreeNode(new RecordNodeStorage(rec)));
        if (!hasChildren)         hasChildren=true;
      }
 else       if (recData.getRecordType() == HFSPlusCatalogLeafRecordData.RECORD_TYPE_FOLDER_THREAD && recData instanceof HFSPlusCatalogThread) {
        HFSPlusCatalogThread catThread=(HFSPlusCatalogThread)recData;
        rootStorage.setThread(rec);
        if (!folderThreadSet)         folderThreadSet=true;
      }
 else       if (recData.getRecordType() == HFSPlusCatalogLeafRecordData.RECORD_TYPE_FILE_THREAD && recData instanceof HFSPlusCatalogThread) {
        HFSPlusCatalogThread catThread=(HFSPlusCatalogThread)recData;
        fileThreads.addLast(rec);
      }
 else       System.err.println(""String_Node_Str"" + recData.getRecordType() + ""String_Node_Str"");
    }
    if (hasChildren && !folderThreadSet)     System.err.println(""String_Node_Str"");
    if (!fileThreads.isEmpty())     System.err.println(""String_Node_Str"" + fileThreads.size() + ""String_Node_Str"");
  }
 else   JOptionPane.showMessageDialog(this,""String_Node_Str"" + o.getClass(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}",0.8984784235470192
168599,"public void loadFS(String filename,boolean readAPM,boolean readFromDevice){
  if (fsView != null) {
    fsView.getStream().close();
  }
  LowLevelFile fsFile;
  if (System.getProperty(""String_Node_Str"").toLowerCase().startsWith(""String_Node_Str"") && System.getProperty(""String_Node_Str"").toLowerCase().equals(""String_Node_Str""))   fsFile=new WindowsLowLevelIO(filename);
 else   fsFile=new RandomAccessLLF(filename);
  int blockSize=0x200;
  int ddrBlockSize;
  long fsOffset;
  long fsLength;
  if (readAPM) {
    byte[] firstBlock=new byte[blockSize];
    fsFile.readFully(firstBlock);
    DriverDescriptorRecord ddr=new DriverDescriptorRecord(firstBlock,0);
    ApplePartitionMap apm=new ApplePartitionMap(fsFile,0x200,ddr.getSbBlkSize());
    APMPartition[] partitions=apm.getPartitions();
    if (partitions.length == 0) {
      JOptionPane.showMessageDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
    Object selectedValue;
    while (true) {
      selectedValue=JOptionPane.showInputDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.QUESTION_MESSAGE,null,partitions,partitions[0]);
      if (selectedValue != null && selectedValue instanceof APMPartition) {
        APMPartition selectedPartition=(APMPartition)selectedValue;
        String partitionType=selectedPartition.getPmParTypeAsString();
        if (selectedPartition.getPmParTypeAsString().trim().equals(""String_Node_Str""))         break;
 else         JOptionPane.showMessageDialog(this,""String_Node_Str"" + partitionType + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
 else       return;
    }
    if (selectedValue instanceof APMPartition) {
      APMPartition selectedPartition=(APMPartition)selectedValue;
      fsOffset=(selectedPartition.getPmPyPartStart() + selectedPartition.getPmLgDataStart()) * blockSize;
      fsLength=selectedPartition.getPmDataCnt() * blockSize;
    }
 else     throw new RuntimeException(""String_Node_Str"");
  }
 else {
    fsOffset=0;
    fsLength=fsFile.length();
  }
  fsView=new HFSFileSystemView(fsFile,fsOffset);
  HFSPlusCatalogLeafRecord rootRecord=fsView.getRoot();
  HFSPlusCatalogLeafRecord[] rootContents=fsView.listRecords(rootRecord);
  populateFilesystemGUI(rootContents);
  statusLabel.setText(""String_Node_Str"");
}","public void loadFS(String filename,boolean readAPM,boolean readFromDevice){
  if (fsView != null) {
    fsView.getStream().close();
  }
  LowLevelFile fsFile;
  if (System.getProperty(""String_Node_Str"").toLowerCase().startsWith(""String_Node_Str"") && System.getProperty(""String_Node_Str"").toLowerCase().equals(""String_Node_Str""))   fsFile=new WindowsLowLevelIO(filename);
 else   fsFile=new RandomAccessLLF(filename);
  int blockSize=0x200;
  int ddrBlockSize;
  long fsOffset;
  long fsLength;
  if (readAPM) {
    byte[] firstBlock=new byte[blockSize];
    fsFile.readFully(firstBlock);
    DriverDescriptorRecord ddr=new DriverDescriptorRecord(firstBlock,0);
    ApplePartitionMap apm=new ApplePartitionMap(fsFile,0x200,ddr.getSbBlkSize());
    APMPartition[] partitions=apm.getPartitions();
    if (partitions.length == 0) {
      JOptionPane.showMessageDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
    Object selectedValue;
    while (true) {
      selectedValue=JOptionPane.showInputDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.QUESTION_MESSAGE,null,partitions,partitions[0]);
      if (selectedValue != null && selectedValue instanceof APMPartition) {
        APMPartition selectedPartition=(APMPartition)selectedValue;
        String partitionType=selectedPartition.getPmParTypeAsString();
        if (selectedPartition.getPmParTypeAsString().trim().equals(""String_Node_Str""))         break;
 else         JOptionPane.showMessageDialog(this,""String_Node_Str"" + partitionType + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
 else       return;
    }
    if (selectedValue instanceof APMPartition) {
      APMPartition selectedPartition=(APMPartition)selectedValue;
      fsOffset=(selectedPartition.getPmPyPartStart() + selectedPartition.getPmLgDataStart()) * blockSize;
      fsLength=selectedPartition.getPmDataCnt() * blockSize;
    }
 else     throw new RuntimeException(""String_Node_Str"");
  }
 else {
    fsOffset=0;
    fsLength=fsFile.length();
  }
  fsView=new HFSFileSystemView(fsFile,fsOffset);
  HFSPlusCatalogLeafRecord rootRecord=fsView.getRoot();
  HFSPlusCatalogLeafRecord[] rootContents=fsView.listRecords(rootRecord);
  populateFilesystemGUI(rootRecord,rootContents);
  statusLabel.setText(""String_Node_Str"");
}",0.9976308421279344
168600,"public String toString(){
  HFSPlusCatalogLeafRecordData recData=record.getData();
  if (recData.getRecordType() == HFSPlusCatalogLeafRecordData.RECORD_TYPE_FOLDER)   return record.getKey().getNodeName().toString();
 else   if (recData.getRecordType() == HFSPlusCatalogLeafRecordData.RECORD_TYPE_FOLDER_THREAD && recData instanceof HFSPlusCatalogThread)   return ((HFSPlusCatalogThread)recData).getNodeName().toString();
 else   throw new RuntimeException(""String_Node_Str"");
}","public String toString(){
  HFSPlusCatalogLeafRecordData recData=parentRecord.getData();
  return parentRecord.getKey().getNodeName().toString();
}",0.4326923076923077
168601,"private double distanceFromSky(int itemIndex){
  C cell=positioner.getVisibleCell(itemIndex);
  return gravity.get() == Gravity.FRONT ? sizeTracker.getViewportLength() - orientation.maxY(cell) : orientation.minY(cell);
}","private double distanceFromSky(int itemIndex){
  C cell=positioner.getVisibleCell(itemIndex);
  int lastIndex=cellListManager.getLazyCellList().size() - 1;
  return gravity.get() == Gravity.FRONT ? itemIndex == lastIndex ? 0 : sizeTracker.getViewportLength() - orientation.maxY(cell) : orientation.minY(cell);
}",0.8286252354048964
168602,"@Override public TargetPosition transformByChange(int pos,int removedSize,int addedSize){
  if (itemIndex >= pos + removedSize) {
    return new MinDistanceTo(itemIndex - removedSize + addedSize,minY,maxY);
  }
 else   if (itemIndex >= pos) {
    return new MinDistanceTo(pos,Offset.fromStart(0.0),Offset.fromEnd(0.0));
  }
 else {
    return this;
  }
}","@Override public TargetPosition transformByChange(int pos,int removedSize,int addedSize){
  if (itemIndex >= pos + removedSize) {
    return new MinDistanceTo(itemIndex - removedSize + addedSize,minY,maxY);
  }
 else   if (itemIndex >= pos) {
    if (addedSize == removedSize) {
      return this;
    }
 else {
      return new MinDistanceTo(pos,Offset.fromStart(0.0),Offset.fromEnd(0.0));
    }
  }
 else {
    return this;
  }
}",0.9019108280254776
168603,"/** 
 * Recursively persist the array and all its object's children.
 * @throws JSONException when something went wrong through parsing, this also fails the database transaction and results in no data changes
 */
@TargetApi(Build.VERSION_CODES.HONEYCOMB) public <IdType>List<IdType> persistArrayApi11(Class<?> modelClass,JSONArray jsonArray) throws JSONException {
  try {
    if (!mDatabase.inTransaction()) {
      mDatabase.enableWriteAheadLogging();
    }
    mDatabase.beginTransactionNonExclusive();
    List<IdType> id_list=persistArrayOfObjects(modelClass,jsonArray);
    mDatabase.setTransactionSuccessful();
    return id_list;
  }
 catch (  JSONException e) {
    throw e;
  }
 finally {
    if (mDatabase.inTransaction()) {
      mDatabase.endTransaction();
    }
  }
}","/** 
 * Recursively persist the array and all its object's children.
 * @throws JSONException when something went wrong through parsing, this also fails the database transaction and results in no data changes
 */
@TargetApi(Build.VERSION_CODES.HONEYCOMB) public <IdType>List<IdType> persistArrayApi11(Class<?> modelClass,JSONArray jsonArray) throws JSONException {
  try {
    enableWriteAheadLogging();
    mDatabase.beginTransactionNonExclusive();
    List<IdType> id_list=persistArrayOfObjects(modelClass,jsonArray);
    mDatabase.setTransactionSuccessful();
    return id_list;
  }
 catch (  JSONException e) {
    throw e;
  }
 finally {
    endTransaction();
  }
}",0.9193659545141282
168604,"private <IdType>IdType persistObjectApiDeprecate(Class<?> modelClass,JSONObject jsonObject) throws JSONException {
  try {
    mDatabase.beginTransaction();
    IdType id=persistObjectInternal(modelClass,jsonObject);
    mDatabase.setTransactionSuccessful();
    return id;
  }
  finally {
    if (mDatabase.inTransaction()) {
      mDatabase.endTransaction();
    }
  }
}","private <IdType>IdType persistObjectApiDeprecate(Class<?> modelClass,JSONObject jsonObject) throws JSONException {
  try {
    mDatabase.beginTransaction();
    IdType id=persistObjectInternal(modelClass,jsonObject);
    mDatabase.setTransactionSuccessful();
    return id;
  }
  finally {
    endTransaction();
  }
}",0.8679245283018868
168605,"@TargetApi(Build.VERSION_CODES.HONEYCOMB) private <IdType>IdType persistObjectApi11(Class<?> modelClass,JSONObject jsonObject) throws JSONException {
  try {
    if (!mDatabase.inTransaction()) {
      mDatabase.enableWriteAheadLogging();
    }
    mDatabase.beginTransactionNonExclusive();
    IdType id=persistObjectInternal(modelClass,jsonObject);
    mDatabase.setTransactionSuccessful();
    return id;
  }
  finally {
    if (mDatabase.inTransaction()) {
      mDatabase.endTransaction();
    }
  }
}","@TargetApi(Build.VERSION_CODES.HONEYCOMB) private <IdType>IdType persistObjectApi11(Class<?> modelClass,JSONObject jsonObject) throws JSONException {
  try {
    enableWriteAheadLogging();
    mDatabase.beginTransactionNonExclusive();
    IdType id=persistObjectInternal(modelClass,jsonObject);
    mDatabase.setTransactionSuccessful();
    return id;
  }
  finally {
    endTransaction();
  }
}",0.4439511653718091
168606,"/** 
 * Recursively persist the array and all its object's children.
 * @throws JSONException when something went wrong through parsing, this also fails the database transaction and results in no data changes
 */
public <IdType>List<IdType> persistArrayDeprecate(Class<?> modelClass,JSONArray jsonArray) throws JSONException {
  try {
    mDatabase.beginTransaction();
    List<IdType> id_list=persistArrayOfObjects(modelClass,jsonArray);
    mDatabase.setTransactionSuccessful();
    return id_list;
  }
 catch (  JSONException e) {
    throw e;
  }
 finally {
    if (mDatabase.inTransaction()) {
      mDatabase.endTransaction();
    }
  }
}","/** 
 * Recursively persist the array and all its object's children.
 * @throws JSONException when something went wrong through parsing, this also fails the database transaction and results in no data changes
 */
public <IdType>List<IdType> persistArrayDeprecate(Class<?> modelClass,JSONArray jsonArray) throws JSONException {
  try {
    mDatabase.beginTransaction();
    List<IdType> id_list=persistArrayOfObjects(modelClass,jsonArray);
    mDatabase.setTransactionSuccessful();
    return id_list;
  }
 catch (  JSONException e) {
    throw e;
  }
 finally {
    endTransaction();
  }
}",0.9553933495539336
168607,"protected void handleFailure(final Context context,@Nullable final Callback<HttpResponse> callback,final Throwable throwable){
  if (sLogger.isDebugEnabled()) {
    String error_message=throwable != null ? throwable.getMessage() : ""String_Node_Str"";
    sLogger.warn(String.format(""String_Node_Str"",mHttpRequest.getMethod(),mHttpRequest.getRequestLine().getUri().toString(),error_message));
  }
  if (callback != null) {
    callback.onFailure(throwable);
  }
  broadcast(context,Broadcasts.ACTION_FAILURE,throwable);
}","protected void handleFailure(final Context context,@Nullable final Callback<HttpResponse> callback,final Throwable throwable){
  if (sLogger.isDebugEnabled()) {
    String error_message=throwable != null ? throwable.getMessage() : ""String_Node_Str"";
    sLogger.warn(String.format(""String_Node_Str"",mHttpRequest.getMethod(),mHttpRequest.getRequestLine().getUri().toString(),error_message));
  }
  if (callback != null) {
    callback.onFailure(throwable);
  }
  broadcast(context,Broadcasts.ACTION_FAILURE);
}",0.990272373540856
168608,"@Override public void onLayoutChange(View v,int left,int top,int right,int bottom,int oldLeft,int oldTop,int oldRight,int oldBottom){
  int targetViewWidth=right - left;
  int targetViewHeight=bottom - top;
  if (targetViewWidth > 0 && targetViewHeight > 0) {
    mTargetView.removeOnLayoutChangeListener(mTargetViewOnLayoutChangeListener);
    ViewGroup.LayoutParams containerParams=mContainer.getLayoutParams();
    containerParams.width=targetViewWidth;
    containerParams.height=targetViewHeight;
    mContainer.setLayoutParams(containerParams);
  }
 else {
    targetViewWidth=mContainer.getMeasuredWidth();
    targetViewHeight=mContainer.getMeasuredHeight();
    ViewGroup.LayoutParams targetParams=mTargetView.getLayoutParams();
    targetParams.width=targetViewWidth;
    targetParams.height=targetViewHeight;
    mTargetView.setLayoutParams(targetParams);
  }
  ViewGroup.MarginLayoutParams params=(ViewGroup.MarginLayoutParams)getLayoutParams();
  int diameter=Math.max(targetViewWidth,targetViewHeight);
  int delta=-5 * diameter / 100;
  params.width=diameter + delta;
  params.height=diameter + delta;
  int diff=Math.abs(targetViewWidth - targetViewHeight) + delta;
  if (targetViewWidth < targetViewHeight) {
    params.leftMargin=-diff / 2;
    params.topMargin=-delta / 2;
  }
 else   if (targetViewHeight < targetViewWidth) {
    params.leftMargin=-delta / 2;
    params.topMargin=-diff / 2;
  }
  setLayoutParams(params);
}","@Override public void onLayoutChange(View v,int left,int top,int right,int bottom,int oldLeft,int oldTop,int oldRight,int oldBottom){
  int targetViewWidth=right - left;
  int targetViewHeight=bottom - top;
  if (targetViewWidth > 0 && targetViewHeight > 0) {
    mTargetView.removeOnLayoutChangeListener(mTargetViewOnLayoutChangeListener);
    ViewGroup.LayoutParams containerParams=mContainer.getLayoutParams();
    containerParams.width=targetViewWidth;
    containerParams.height=targetViewHeight;
    mContainer.setLayoutParams(containerParams);
  }
 else {
    if (mContainer.getMeasuredWidth() > 0 && mContainer.getMeasuredHeight() > 0) {
      targetViewWidth=mContainer.getMeasuredWidth();
      targetViewHeight=mContainer.getMeasuredHeight();
      ViewGroup.LayoutParams targetParams=mTargetView.getLayoutParams();
      targetParams.width=targetViewWidth;
      targetParams.height=targetViewHeight;
      mTargetView.setLayoutParams(targetParams);
    }
  }
  ViewGroup.MarginLayoutParams params=(ViewGroup.MarginLayoutParams)getLayoutParams();
  int diameter=Math.max(targetViewWidth,targetViewHeight);
  int delta=-5 * diameter / 100;
  params.width=diameter + delta;
  params.height=diameter + delta;
  int diff=Math.abs(targetViewWidth - targetViewHeight) + delta;
  if (targetViewWidth < targetViewHeight) {
    params.leftMargin=-diff / 2;
    params.topMargin=-delta / 2;
  }
 else   if (targetViewHeight < targetViewWidth) {
    params.leftMargin=-delta / 2;
    params.topMargin=-diff / 2;
  }
  setLayoutParams(params);
}",0.9561726329876212
168609,"private List<Map<String,Object>> executeMetricNamesQuery(String tenantId,Map<String,String> dimensions,String offset,int limit){
  String offsetPart=""String_Node_Str"";
  if (offset != null && !offset.isEmpty()) {
    offsetPart=""String_Node_Str"";
  }
  String limitPart=""String_Node_Str"" + Integer.toString(limit + 1);
  String defSubSelect=String.format(METRIC_NAMES_SUB_SELECT,offsetPart,MetricQueries.buildDimensionAndClause(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON),limitPart);
  String sql=String.format(FIND_METRIC_NAMES_SQL,defSubSelect);
  try (Handle h=db.open()){
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      try {
        query.bind(""String_Node_Str"",Hex.decodeHex(offset.toCharArray()));
      }
 catch (      DecoderException e) {
        throw Exceptions.badRequest(""String_Node_Str"" + offset,e);
      }
    }
    MetricQueries.bindDimensionsToQuery(query,dimensions);
    return query.list();
  }
 }","private List<Map<String,Object>> executeMetricNamesQuery(String tenantId,Map<String,String> dimensions,String offset,int limit){
  String offsetPart=""String_Node_Str"";
  if (offset != null && !offset.isEmpty()) {
    offsetPart=""String_Node_Str"";
  }
  String limitPart=""String_Node_Str"" + Integer.toString(limit + 1);
  String defSubSelect=String.format(METRIC_NAMES_SUB_SELECT,offsetPart,MetricQueries.buildDimensionAndClause(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON),limitPart);
  String sql=String.format(FIND_METRIC_NAMES_SQL,this.dbHint,defSubSelect);
  try (Handle h=db.open()){
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      try {
        query.bind(""String_Node_Str"",Hex.decodeHex(offset.toCharArray()));
      }
 catch (      DecoderException e) {
        throw Exceptions.badRequest(""String_Node_Str"" + offset,e);
      }
    }
    MetricQueries.bindDimensionsToQuery(query,dimensions);
    return query.list();
  }
 }",0.9943502824858758
168610,"private List<Map<String,Object>> executeMetricNamesQuery(String tenantId,Map<String,String> dimensions,String offset,int limit){
  String offsetPart=""String_Node_Str"";
  if (offset != null && !offset.isEmpty()) {
    offsetPart=""String_Node_Str"";
  }
  String limitPart=""String_Node_Str"" + Integer.toString(limit + 1);
  String defSubSelect=String.format(METRIC_NAMES_SUB_SELECT,offsetPart,MetricQueries.buildDimensionAndClause(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON),limitPart);
  String sql=String.format(FIND_METRIC_NAMES_SQL,defSubSelect);
  try (Handle h=db.open()){
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      try {
        query.bind(""String_Node_Str"",Hex.decodeHex(offset.toCharArray()));
      }
 catch (      DecoderException e) {
        throw Exceptions.badRequest(""String_Node_Str"" + offset,e);
      }
    }
    MetricQueries.bindDimensionsToQuery(query,dimensions);
    return query.list();
  }
 }","private List<Map<String,Object>> executeMetricNamesQuery(String tenantId,Map<String,String> dimensions,String offset,int limit){
  String offsetPart=""String_Node_Str"";
  if (offset != null && !offset.isEmpty()) {
    offsetPart=""String_Node_Str"";
  }
  String limitPart=""String_Node_Str"" + Integer.toString(limit + 1);
  String defSubSelect=String.format(METRIC_NAMES_SUB_SELECT,offsetPart,MetricQueries.buildDimensionAndClause(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON),limitPart);
  String sql=String.format(FIND_METRIC_NAMES_SQL,this.dbHint,defSubSelect);
  try (Handle h=db.open()){
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      try {
        query.bind(""String_Node_Str"",Hex.decodeHex(offset.toCharArray()));
      }
 catch (      DecoderException e) {
        throw Exceptions.badRequest(""String_Node_Str"" + offset,e);
      }
    }
    MetricQueries.bindDimensionsToQuery(query,dimensions);
    return query.list();
  }
 }",0.9943502824858758
168611,"private String createTimeInClause(Handle dbHandle,DateTime startTime,DateTime endTime,String tenantId,String metricName,Map<String,String> dimensions){
  if (startTime == null) {
    return ""String_Node_Str"";
  }
  Set<byte[]> defDimIdSet=new HashSet<>();
  String namePart=""String_Node_Str"";
  if (metricName != null && !metricName.isEmpty()) {
    namePart=""String_Node_Str"";
  }
  String defDimSql=String.format(DEFDIM_IDS_SELECT,namePart,MetricQueries.buildJoinClauseFor(dimensions,""String_Node_Str""));
  Query<Map<String,Object>> query=dbHandle.createQuery(defDimSql).bind(""String_Node_Str"",tenantId);
  DimensionQueries.bindDimensionsToQuery(query,dimensions);
  if (metricName != null && !metricName.isEmpty()) {
    query.bind(""String_Node_Str"",metricName);
  }
  List<Map<String,Object>> rows=query.list();
  for (  Map<String,Object> row : rows) {
    byte[] defDimId=(byte[])row.get(""String_Node_Str"");
    defDimIdSet.add(defDimId);
  }
  if (defDimIdSet.size() == 0) {
    return ""String_Node_Str"";
  }
  String timeAndClause=""String_Node_Str"";
  if (endTime != null) {
    timeAndClause=""String_Node_Str"";
  }
 else {
    timeAndClause=""String_Node_Str"";
  }
  String defDimInClause=MetricQueries.createDefDimIdInClause(defDimIdSet);
  return String.format(MEASUREMENT_AND_CLAUSE,defDimInClause,timeAndClause);
}","private String createTimeInClause(Handle dbHandle,DateTime startTime,DateTime endTime,String tenantId,String metricName,Map<String,String> dimensions){
  if (startTime == null) {
    return ""String_Node_Str"";
  }
  Set<byte[]> defDimIdSet=new HashSet<>();
  String namePart=""String_Node_Str"";
  if (metricName != null && !metricName.isEmpty()) {
    namePart=""String_Node_Str"";
  }
  String defDimSql=String.format(DEFDIM_IDS_SELECT,MetricQueries.buildJoinClauseFor(dimensions,""String_Node_Str""),namePart);
  Query<Map<String,Object>> query=dbHandle.createQuery(defDimSql).bind(""String_Node_Str"",tenantId);
  MetricQueries.bindDimensionsToQuery(query,dimensions);
  if (metricName != null && !metricName.isEmpty()) {
    query.bind(""String_Node_Str"",metricName);
  }
  List<Map<String,Object>> rows=query.list();
  for (  Map<String,Object> row : rows) {
    byte[] defDimId=(byte[])row.get(""String_Node_Str"");
    defDimIdSet.add(defDimId);
  }
  if (defDimIdSet.size() == 0) {
    return ""String_Node_Str"";
  }
  String timeAndClause=""String_Node_Str"";
  if (endTime != null) {
    timeAndClause=""String_Node_Str"";
  }
 else {
    timeAndClause=""String_Node_Str"";
  }
  String defDimInClause=MetricQueries.createDefDimIdInClause(defDimIdSet);
  return String.format(MEASUREMENT_AND_CLAUSE,defDimInClause,timeAndClause);
}",0.987542468856172
168612,"@Override public List<Measurements> find(String tenantId,String name,Map<String,String> dimensions,DateTime startTime,@Nullable DateTime endTime,@Nullable String offset,int limit,Boolean mergeMetricsFlag) throws MultipleMetricsException {
  try (Handle h=db.open()){
    StringBuilder sb=new StringBuilder();
    if (name != null && !name.isEmpty()) {
      sb.append(""String_Node_Str"");
    }
    if (endTime != null) {
      sb.append(""String_Node_Str"");
    }
    if (offset != null && !offset.isEmpty()) {
      sb.append(""String_Node_Str"");
    }
    String sql=String.format(FIND_BY_METRIC_DEF_SQL,MetricQueries.buildJoinClauseFor(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON),sb);
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId).bind(""String_Node_Str"",new Timestamp(startTime.getMillis())).bind(""String_Node_Str"",limit + 1);
    if (name != null && !name.isEmpty()) {
      logger.debug(""String_Node_Str"",name);
      query.bind(""String_Node_Str"",name);
    }
    if (endTime != null) {
      logger.debug(""String_Node_Str"",endTime);
      query.bind(""String_Node_Str"",new Timestamp(endTime.getMillis()));
    }
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      query.bind(""String_Node_Str"",new Timestamp(DateTime.parse(offset).getMillis()));
    }
    MetricQueries.bindDimensionsToQuery(query,dimensions);
    List<Map<String,Object>> rows=query.list();
    Map<ByteBuffer,Measurements> results=new LinkedHashMap<>();
    for (    Map<String,Object> row : rows) {
      String metricName=(String)row.get(""String_Node_Str"");
      byte[] defIdBytes=(byte[])row.get(""String_Node_Str"");
      ByteBuffer defId=ByteBuffer.wrap(defIdBytes);
      byte[] defdimsIdBytes=(byte[])row.get(""String_Node_Str"");
      byte[] dimSetIdBytes=(byte[])row.get(""String_Node_Str"");
      ByteBuffer defdimsId=ByteBuffer.wrap(defdimsIdBytes);
      String timestamp=DATETIME_FORMATTER.print(((Timestamp)row.get(""String_Node_Str"")).getTime());
      double value=(double)row.get(""String_Node_Str"");
      String valueMetaString=(String)row.get(""String_Node_Str"");
      Map<String,String> valueMetaMap=new HashMap<>();
      if (valueMetaString != null && !valueMetaString.isEmpty()) {
        try {
          valueMetaMap=this.objectMapper.readValue(valueMetaString,VALUE_META_TYPE);
        }
 catch (        IOException e) {
          logger.error(""String_Node_Str"",valueMetaString);
        }
      }
      Measurements measurements;
      if (Boolean.TRUE.equals(mergeMetricsFlag)) {
        measurements=results.get(defId);
      }
 else {
        measurements=results.get(defdimsId);
      }
      if (measurements == null) {
        if (Boolean.TRUE.equals(mergeMetricsFlag)) {
          measurements=new Measurements(metricName,new HashMap<String,String>(),new ArrayList<Object[]>());
          results.put(defId,measurements);
        }
 else {
          measurements=new Measurements(metricName,MetricQueries.dimensionsFor(h,dimSetIdBytes),new ArrayList<Object[]>());
          results.put(defdimsId,measurements);
          if (results.keySet().size() > 1) {
            throw new MultipleMetricsException(name,dimensions);
          }
        }
      }
      measurements.addMeasurement(new Object[]{timestamp,value,valueMetaMap});
    }
    return new ArrayList<>(results.values());
  }
 }","@Override public List<Measurements> find(String tenantId,String name,Map<String,String> dimensions,DateTime startTime,@Nullable DateTime endTime,@Nullable String offset,int limit,Boolean mergeMetricsFlag) throws MultipleMetricsException {
  try (Handle h=db.open()){
    StringBuilder sb=new StringBuilder();
    if (name != null && !name.isEmpty()) {
      sb.append(""String_Node_Str"");
    }
    if (endTime != null) {
      sb.append(""String_Node_Str"");
    }
    if (offset != null && !offset.isEmpty()) {
      sb.append(""String_Node_Str"");
    }
    String sql=String.format(FIND_BY_METRIC_DEF_SQL,sb,MetricQueries.buildDimensionAndClause(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON,0));
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId).bind(""String_Node_Str"",new Timestamp(startTime.getMillis())).bind(""String_Node_Str"",limit + 1);
    if (name != null && !name.isEmpty()) {
      logger.debug(""String_Node_Str"",name);
      query.bind(""String_Node_Str"",name);
    }
    if (endTime != null) {
      logger.debug(""String_Node_Str"",endTime);
      query.bind(""String_Node_Str"",new Timestamp(endTime.getMillis()));
    }
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      query.bind(""String_Node_Str"",new Timestamp(DateTime.parse(offset).getMillis()));
    }
    MetricQueries.bindDimensionsToQuery(query,dimensions);
    List<Map<String,Object>> rows=query.list();
    Map<ByteBuffer,Measurements> results=new LinkedHashMap<>();
    for (    Map<String,Object> row : rows) {
      String metricName=(String)row.get(""String_Node_Str"");
      byte[] defIdBytes=(byte[])row.get(""String_Node_Str"");
      ByteBuffer defId=ByteBuffer.wrap(defIdBytes);
      byte[] defdimsIdBytes=(byte[])row.get(""String_Node_Str"");
      byte[] dimSetIdBytes=(byte[])row.get(""String_Node_Str"");
      ByteBuffer defdimsId=ByteBuffer.wrap(defdimsIdBytes);
      String timestamp=DATETIME_FORMATTER.print(((Timestamp)row.get(""String_Node_Str"")).getTime());
      double value=(double)row.get(""String_Node_Str"");
      String valueMetaString=(String)row.get(""String_Node_Str"");
      Map<String,String> valueMetaMap=new HashMap<>();
      if (valueMetaString != null && !valueMetaString.isEmpty()) {
        try {
          valueMetaMap=this.objectMapper.readValue(valueMetaString,VALUE_META_TYPE);
        }
 catch (        IOException e) {
          logger.error(""String_Node_Str"",valueMetaString);
        }
      }
      Measurements measurements;
      if (Boolean.TRUE.equals(mergeMetricsFlag)) {
        measurements=results.get(defId);
      }
 else {
        measurements=results.get(defdimsId);
      }
      if (measurements == null) {
        if (Boolean.TRUE.equals(mergeMetricsFlag)) {
          measurements=new Measurements(metricName,new HashMap<String,String>(),new ArrayList<Object[]>());
          results.put(defId,measurements);
        }
 else {
          measurements=new Measurements(metricName,MetricQueries.dimensionsFor(h,dimSetIdBytes),new ArrayList<Object[]>());
          results.put(defdimsId,measurements);
          if (results.keySet().size() > 1) {
            throw new MultipleMetricsException(name,dimensions);
          }
        }
      }
      measurements.addMeasurement(new Object[]{timestamp,value,valueMetaMap});
    }
    return new ArrayList<>(results.values());
  }
 }",0.9957068837897852
168613,"private List<Map<String,Object>> executeMetricNamesQuery(String tenantId,Map<String,String> dimensions,String offset,int limit){
  String offsetPart=""String_Node_Str"";
  if (offset != null && !offset.isEmpty()) {
    offsetPart=""String_Node_Str"";
  }
  String limitPart=""String_Node_Str"" + Integer.toString(limit + 1);
  String defSubSelect=String.format(METRIC_NAMES_SUB_SELECT,MetricQueries.buildJoinClauseFor(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON),offsetPart,limitPart);
  String sql=String.format(FIND_METRIC_NAMES_SQL,defSubSelect);
  try (Handle h=db.open()){
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      try {
        query.bind(""String_Node_Str"",Hex.decodeHex(offset.toCharArray()));
      }
 catch (      DecoderException e) {
        throw Exceptions.badRequest(""String_Node_Str"" + offset,e);
      }
    }
    MetricQueries.bindDimensionsToQuery(query,dimensions);
    return query.list();
  }
 }","private List<Map<String,Object>> executeMetricNamesQuery(String tenantId,Map<String,String> dimensions,String offset,int limit){
  String offsetPart=""String_Node_Str"";
  if (offset != null && !offset.isEmpty()) {
    offsetPart=""String_Node_Str"";
  }
  String limitPart=""String_Node_Str"" + Integer.toString(limit + 1);
  String defSubSelect=String.format(METRIC_NAMES_SUB_SELECT,offsetPart,MetricQueries.buildDimensionAndClause(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON,0),limitPart);
  String sql=String.format(FIND_METRIC_NAMES_SQL,defSubSelect);
  try (Handle h=db.open()){
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      try {
        query.bind(""String_Node_Str"",Hex.decodeHex(offset.toCharArray()));
      }
 catch (      DecoderException e) {
        throw Exceptions.badRequest(""String_Node_Str"" + offset,e);
      }
    }
    MetricQueries.bindDimensionsToQuery(query,dimensions);
    return query.list();
  }
 }",0.9786628733997156
168614,"private String createTimeInClause(Handle dbHandle,DateTime startTime,DateTime endTime,String tenantId,String metricName,Map<String,String> dimensions){
  if (startTime == null) {
    return ""String_Node_Str"";
  }
  Set<byte[]> defDimIdSet=new HashSet<>();
  String namePart=""String_Node_Str"";
  if (metricName != null && !metricName.isEmpty()) {
    namePart=""String_Node_Str"";
  }
  String defDimSql=String.format(DEFDIM_IDS_SELECT,MetricQueries.buildJoinClauseFor(dimensions,""String_Node_Str""),namePart);
  Query<Map<String,Object>> query=dbHandle.createQuery(defDimSql).bind(""String_Node_Str"",tenantId);
  MetricQueries.bindDimensionsToQuery(query,dimensions);
  if (metricName != null && !metricName.isEmpty()) {
    query.bind(""String_Node_Str"",metricName);
  }
  List<Map<String,Object>> rows=query.list();
  for (  Map<String,Object> row : rows) {
    byte[] defDimId=(byte[])row.get(""String_Node_Str"");
    defDimIdSet.add(defDimId);
  }
  if (defDimIdSet.size() == 0) {
    return ""String_Node_Str"";
  }
  String timeAndClause=""String_Node_Str"";
  if (endTime != null) {
    timeAndClause=""String_Node_Str"";
  }
 else {
    timeAndClause=""String_Node_Str"";
  }
  String defDimInClause=MetricQueries.createDefDimIdInClause(defDimIdSet);
  return String.format(MEASUREMENT_AND_CLAUSE,defDimInClause,timeAndClause);
}","private String createTimeInClause(Handle dbHandle,DateTime startTime,DateTime endTime,String tenantId,String metricName,Map<String,String> dimensions){
  if (startTime == null) {
    return ""String_Node_Str"";
  }
  Set<byte[]> defDimIdSet=new HashSet<>();
  String namePart=""String_Node_Str"";
  if (metricName != null && !metricName.isEmpty()) {
    namePart=""String_Node_Str"";
  }
  String defDimSql=String.format(DEFDIM_IDS_SELECT,namePart,MetricQueries.buildDimensionAndClause(dimensions,""String_Node_Str"",0));
  Query<Map<String,Object>> query=dbHandle.createQuery(defDimSql).bind(""String_Node_Str"",tenantId);
  MetricQueries.bindDimensionsToQuery(query,dimensions);
  if (metricName != null && !metricName.isEmpty()) {
    query.bind(""String_Node_Str"",metricName);
  }
  List<Map<String,Object>> rows=query.list();
  for (  Map<String,Object> row : rows) {
    byte[] defDimId=(byte[])row.get(""String_Node_Str"");
    defDimIdSet.add(defDimId);
  }
  if (defDimIdSet.size() == 0) {
    return ""String_Node_Str"";
  }
  String timeAndClause=""String_Node_Str"";
  if (endTime != null) {
    timeAndClause=""String_Node_Str"";
  }
 else {
    timeAndClause=""String_Node_Str"";
  }
  String defDimInClause=MetricQueries.createDefDimIdInClause(defDimIdSet);
  return String.format(MEASUREMENT_AND_CLAUSE,defDimInClause,timeAndClause);
}",0.9626837542404824
168615,"private List<Map<String,Object>> executeMetricDefsQuery(String tenantId,String name,Map<String,String> dimensions,DateTime startTime,DateTime endTime,String offset,int limit){
  String namePart=""String_Node_Str"";
  if (name != null && !name.isEmpty()) {
    namePart=""String_Node_Str"";
  }
  String offsetPart=""String_Node_Str"";
  if (offset != null && !offset.isEmpty()) {
    offsetPart=""String_Node_Str"";
  }
  String limitPart=""String_Node_Str"" + Integer.toString(limit + 1);
  try (Handle h=db.open()){
    String timeInClause=createTimeInClause(h,startTime,endTime,tenantId,name,dimensions);
    String defSubSelect=String.format(METRIC_DEFINITIONS_SUB_SELECT,MetricQueries.buildJoinClauseFor(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON),namePart,offsetPart,timeInClause,limitPart);
    String sql=String.format(FIND_METRIC_DEFS_SQL,defSubSelect);
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (name != null && !name.isEmpty()) {
      logger.debug(""String_Node_Str"",name);
      query.bind(""String_Node_Str"",name);
    }
    if (startTime != null) {
      query.bind(""String_Node_Str"",startTime);
    }
    if (endTime != null) {
      query.bind(""String_Node_Str"",endTime);
    }
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      try {
        query.bind(""String_Node_Str"",Hex.decodeHex(offset.toCharArray()));
      }
 catch (      DecoderException e) {
        throw Exceptions.badRequest(""String_Node_Str"" + offset,e);
      }
    }
    MetricQueries.bindDimensionsToQuery(query,dimensions);
    return query.list();
  }
 }","private List<Map<String,Object>> executeMetricDefsQuery(String tenantId,String name,Map<String,String> dimensions,DateTime startTime,DateTime endTime,String offset,int limit){
  String namePart=""String_Node_Str"";
  if (name != null && !name.isEmpty()) {
    namePart=""String_Node_Str"";
  }
  String offsetPart=""String_Node_Str"";
  if (offset != null && !offset.isEmpty()) {
    offsetPart=""String_Node_Str"";
  }
  try (Handle h=db.open()){
    String timeInClause=createTimeInClause(h,startTime,endTime,tenantId,name,dimensions);
    String sql=String.format(FIND_METRIC_DEFS_SQL,namePart,offsetPart,MetricQueries.buildDimensionAndClause(dimensions,""String_Node_Str"",limit),timeInClause);
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (name != null && !name.isEmpty()) {
      logger.debug(""String_Node_Str"",name);
      query.bind(""String_Node_Str"",name);
    }
    if (startTime != null) {
      query.bind(""String_Node_Str"",startTime);
    }
    if (endTime != null) {
      query.bind(""String_Node_Str"",endTime);
    }
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      try {
        query.bind(""String_Node_Str"",Hex.decodeHex(offset.toCharArray()));
      }
 catch (      DecoderException e) {
        throw Exceptions.badRequest(""String_Node_Str"" + offset,e);
      }
    }
    MetricQueries.bindDimensionsToQuery(query,dimensions);
    return query.list();
  }
 }",0.8934108527131783
168616,"private Map<byte[],Statistics> findDefIds(Handle h,String tenantId,String name,Map<String,String> dimensions){
  List<byte[]> bytes=new ArrayList<>();
  StringBuilder sb=new StringBuilder();
  if (name != null && !name.isEmpty()) {
    sb.append(""String_Node_Str"");
  }
  String sql=String.format(FIND_BY_METRIC_DEF_SQL,MetricQueries.buildJoinClauseFor(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON),sb);
  Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
  if (name != null && !name.isEmpty()) {
    logger.debug(""String_Node_Str"",name);
    query.bind(""String_Node_Str"",name);
  }
  MetricQueries.bindDimensionsToQuery(query,dimensions);
  List<Map<String,Object>> rows=query.list();
  Map<byte[],Statistics> byteIdMap=new HashMap<>();
  byte[] currentDefDimId=null;
  Map<String,String> dims=null;
  for (  Map<String,Object> row : rows) {
    byte[] defDimId=(byte[])row.get(""String_Node_Str"");
    String defName=(String)row.get(""String_Node_Str"");
    String dimName=(String)row.get(""String_Node_Str"");
    String dimValue=(String)row.get(""String_Node_Str"");
    if (defDimId == null || !Arrays.equals(currentDefDimId,defDimId)) {
      currentDefDimId=defDimId;
      dims=new HashMap<>();
      dims.put(dimName,dimValue);
      Statistics statistics=new Statistics();
      statistics.setName(defName);
      statistics.setDimensions(dims);
      byteIdMap.put(currentDefDimId,statistics);
    }
 else {
      dims.put(dimName,dimValue);
    }
  }
  bytes.add(currentDefDimId);
  return byteIdMap;
}","private Map<byte[],Statistics> findDefIds(Handle h,String tenantId,String name,Map<String,String> dimensions){
  List<byte[]> bytes=new ArrayList<>();
  StringBuilder sb=new StringBuilder();
  if (name != null && !name.isEmpty()) {
    sb.append(""String_Node_Str"");
  }
  String sql=String.format(FIND_BY_METRIC_DEF_SQL,sb,MetricQueries.buildDimensionAndClause(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON,0));
  Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
  if (name != null && !name.isEmpty()) {
    logger.debug(""String_Node_Str"",name);
    query.bind(""String_Node_Str"",name);
  }
  MetricQueries.bindDimensionsToQuery(query,dimensions);
  List<Map<String,Object>> rows=query.list();
  Map<byte[],Statistics> byteIdMap=new HashMap<>();
  byte[] currentDefDimId=null;
  Map<String,String> dims=null;
  for (  Map<String,Object> row : rows) {
    byte[] defDimId=(byte[])row.get(""String_Node_Str"");
    String defName=(String)row.get(""String_Node_Str"");
    String dimName=(String)row.get(""String_Node_Str"");
    String dimValue=(String)row.get(""String_Node_Str"");
    if (defDimId == null || !Arrays.equals(currentDefDimId,defDimId)) {
      currentDefDimId=defDimId;
      dims=new HashMap<>();
      dims.put(dimName,dimValue);
      Statistics statistics=new Statistics();
      statistics.setName(defName);
      statistics.setDimensions(dims);
      byteIdMap.put(currentDefDimId,statistics);
    }
 else {
      dims.put(dimName,dimValue);
    }
  }
  bytes.add(currentDefDimId);
  return byteIdMap;
}",0.9905874716001298
168617,"@Override public List<Measurements> find(String tenantId,String name,Map<String,String> dimensions,DateTime startTime,@Nullable DateTime endTime,@Nullable String offset,int limit,Boolean mergeMetricsFlag) throws MultipleMetricsException {
  try (Handle h=db.open()){
    StringBuilder sb=new StringBuilder();
    if (name != null && !name.isEmpty()) {
      sb.append(""String_Node_Str"");
    }
    if (endTime != null) {
      sb.append(""String_Node_Str"");
    }
    if (offset != null && !offset.isEmpty()) {
      sb.append(""String_Node_Str"");
    }
    String sql=String.format(FIND_BY_METRIC_DEF_SQL,MetricQueries.buildJoinClauseFor(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON),sb);
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId).bind(""String_Node_Str"",new Timestamp(startTime.getMillis())).bind(""String_Node_Str"",limit + 1);
    if (name != null && !name.isEmpty()) {
      logger.debug(""String_Node_Str"",name);
      query.bind(""String_Node_Str"",name);
    }
    if (endTime != null) {
      logger.debug(""String_Node_Str"",endTime);
      query.bind(""String_Node_Str"",new Timestamp(endTime.getMillis()));
    }
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      query.bind(""String_Node_Str"",new Timestamp(DateTime.parse(offset).getMillis()));
    }
    MetricQueries.bindDimensionsToQuery(query,dimensions);
    List<Map<String,Object>> rows=query.list();
    Map<ByteBuffer,Measurements> results=new LinkedHashMap<>();
    for (    Map<String,Object> row : rows) {
      String metricName=(String)row.get(""String_Node_Str"");
      byte[] defIdBytes=(byte[])row.get(""String_Node_Str"");
      ByteBuffer defId=ByteBuffer.wrap(defIdBytes);
      byte[] defdimsIdBytes=(byte[])row.get(""String_Node_Str"");
      byte[] dimSetIdBytes=(byte[])row.get(""String_Node_Str"");
      ByteBuffer defdimsId=ByteBuffer.wrap(defdimsIdBytes);
      String timestamp=DATETIME_FORMATTER.print(((Timestamp)row.get(""String_Node_Str"")).getTime());
      double value=(double)row.get(""String_Node_Str"");
      String valueMetaString=(String)row.get(""String_Node_Str"");
      Map<String,String> valueMetaMap=new HashMap<>();
      if (valueMetaString != null && !valueMetaString.isEmpty()) {
        try {
          valueMetaMap=this.objectMapper.readValue(valueMetaString,VALUE_META_TYPE);
        }
 catch (        IOException e) {
          logger.error(""String_Node_Str"",valueMetaString);
        }
      }
      Measurements measurements;
      if (Boolean.TRUE.equals(mergeMetricsFlag)) {
        measurements=results.get(defId);
      }
 else {
        measurements=results.get(defdimsId);
      }
      if (measurements == null) {
        if (Boolean.TRUE.equals(mergeMetricsFlag)) {
          measurements=new Measurements(metricName,new HashMap<String,String>(),new ArrayList<Object[]>());
          results.put(defId,measurements);
        }
 else {
          measurements=new Measurements(metricName,MetricQueries.dimensionsFor(h,dimSetIdBytes),new ArrayList<Object[]>());
          results.put(defdimsId,measurements);
          if (results.keySet().size() > 1) {
            throw new MultipleMetricsException(name,dimensions);
          }
        }
      }
      measurements.addMeasurement(new Object[]{timestamp,value,valueMetaMap});
    }
    return new ArrayList<>(results.values());
  }
 }","@Override public List<Measurements> find(String tenantId,String name,Map<String,String> dimensions,DateTime startTime,@Nullable DateTime endTime,@Nullable String offset,int limit,Boolean mergeMetricsFlag) throws MultipleMetricsException {
  try (Handle h=db.open()){
    StringBuilder sb=new StringBuilder();
    if (name != null && !name.isEmpty()) {
      sb.append(""String_Node_Str"");
    }
    if (endTime != null) {
      sb.append(""String_Node_Str"");
    }
    if (offset != null && !offset.isEmpty()) {
      sb.append(""String_Node_Str"");
    }
    String sql=String.format(FIND_BY_METRIC_DEF_SQL,sb,MetricQueries.buildDimensionAndClause(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON,0));
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId).bind(""String_Node_Str"",new Timestamp(startTime.getMillis())).bind(""String_Node_Str"",limit + 1);
    if (name != null && !name.isEmpty()) {
      logger.debug(""String_Node_Str"",name);
      query.bind(""String_Node_Str"",name);
    }
    if (endTime != null) {
      logger.debug(""String_Node_Str"",endTime);
      query.bind(""String_Node_Str"",new Timestamp(endTime.getMillis()));
    }
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      query.bind(""String_Node_Str"",new Timestamp(DateTime.parse(offset).getMillis()));
    }
    MetricQueries.bindDimensionsToQuery(query,dimensions);
    List<Map<String,Object>> rows=query.list();
    Map<ByteBuffer,Measurements> results=new LinkedHashMap<>();
    for (    Map<String,Object> row : rows) {
      String metricName=(String)row.get(""String_Node_Str"");
      byte[] defIdBytes=(byte[])row.get(""String_Node_Str"");
      ByteBuffer defId=ByteBuffer.wrap(defIdBytes);
      byte[] defdimsIdBytes=(byte[])row.get(""String_Node_Str"");
      byte[] dimSetIdBytes=(byte[])row.get(""String_Node_Str"");
      ByteBuffer defdimsId=ByteBuffer.wrap(defdimsIdBytes);
      String timestamp=DATETIME_FORMATTER.print(((Timestamp)row.get(""String_Node_Str"")).getTime());
      double value=(double)row.get(""String_Node_Str"");
      String valueMetaString=(String)row.get(""String_Node_Str"");
      Map<String,String> valueMetaMap=new HashMap<>();
      if (valueMetaString != null && !valueMetaString.isEmpty()) {
        try {
          valueMetaMap=this.objectMapper.readValue(valueMetaString,VALUE_META_TYPE);
        }
 catch (        IOException e) {
          logger.error(""String_Node_Str"",valueMetaString);
        }
      }
      Measurements measurements;
      if (Boolean.TRUE.equals(mergeMetricsFlag)) {
        measurements=results.get(defId);
      }
 else {
        measurements=results.get(defdimsId);
      }
      if (measurements == null) {
        if (Boolean.TRUE.equals(mergeMetricsFlag)) {
          measurements=new Measurements(metricName,new HashMap<String,String>(),new ArrayList<Object[]>());
          results.put(defId,measurements);
        }
 else {
          measurements=new Measurements(metricName,MetricQueries.dimensionsFor(h,dimSetIdBytes),new ArrayList<Object[]>());
          results.put(defdimsId,measurements);
          if (results.keySet().size() > 1) {
            throw new MultipleMetricsException(name,dimensions);
          }
        }
      }
      measurements.addMeasurement(new Object[]{timestamp,value,valueMetaMap});
    }
    return new ArrayList<>(results.values());
  }
 }",0.9957068837897852
168618,"private List<Map<String,Object>> executeMetricNamesQuery(String tenantId,Map<String,String> dimensions,String offset,int limit){
  String offsetPart=""String_Node_Str"";
  if (offset != null && !offset.isEmpty()) {
    offsetPart=""String_Node_Str"";
  }
  String limitPart=""String_Node_Str"" + Integer.toString(limit + 1);
  String defSubSelect=String.format(METRIC_NAMES_SUB_SELECT,MetricQueries.buildJoinClauseFor(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON),offsetPart,limitPart);
  String sql=String.format(FIND_METRIC_NAMES_SQL,defSubSelect);
  try (Handle h=db.open()){
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      try {
        query.bind(""String_Node_Str"",Hex.decodeHex(offset.toCharArray()));
      }
 catch (      DecoderException e) {
        throw Exceptions.badRequest(""String_Node_Str"" + offset,e);
      }
    }
    MetricQueries.bindDimensionsToQuery(query,dimensions);
    return query.list();
  }
 }","private List<Map<String,Object>> executeMetricNamesQuery(String tenantId,Map<String,String> dimensions,String offset,int limit){
  String offsetPart=""String_Node_Str"";
  if (offset != null && !offset.isEmpty()) {
    offsetPart=""String_Node_Str"";
  }
  String limitPart=""String_Node_Str"" + Integer.toString(limit + 1);
  String defSubSelect=String.format(METRIC_NAMES_SUB_SELECT,offsetPart,MetricQueries.buildDimensionAndClause(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON,0),limitPart);
  String sql=String.format(FIND_METRIC_NAMES_SQL,defSubSelect);
  try (Handle h=db.open()){
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      try {
        query.bind(""String_Node_Str"",Hex.decodeHex(offset.toCharArray()));
      }
 catch (      DecoderException e) {
        throw Exceptions.badRequest(""String_Node_Str"" + offset,e);
      }
    }
    MetricQueries.bindDimensionsToQuery(query,dimensions);
    return query.list();
  }
 }",0.9786628733997156
168619,"private String createTimeInClause(Handle dbHandle,DateTime startTime,DateTime endTime,String tenantId,String metricName,Map<String,String> dimensions){
  if (startTime == null) {
    return ""String_Node_Str"";
  }
  Set<byte[]> defDimIdSet=new HashSet<>();
  String namePart=""String_Node_Str"";
  if (metricName != null && !metricName.isEmpty()) {
    namePart=""String_Node_Str"";
  }
  String defDimSql=String.format(DEFDIM_IDS_SELECT,MetricQueries.buildJoinClauseFor(dimensions,""String_Node_Str""),namePart);
  Query<Map<String,Object>> query=dbHandle.createQuery(defDimSql).bind(""String_Node_Str"",tenantId);
  MetricQueries.bindDimensionsToQuery(query,dimensions);
  if (metricName != null && !metricName.isEmpty()) {
    query.bind(""String_Node_Str"",metricName);
  }
  List<Map<String,Object>> rows=query.list();
  for (  Map<String,Object> row : rows) {
    byte[] defDimId=(byte[])row.get(""String_Node_Str"");
    defDimIdSet.add(defDimId);
  }
  if (defDimIdSet.size() == 0) {
    return ""String_Node_Str"";
  }
  String timeAndClause=""String_Node_Str"";
  if (endTime != null) {
    timeAndClause=""String_Node_Str"";
  }
 else {
    timeAndClause=""String_Node_Str"";
  }
  String defDimInClause=MetricQueries.createDefDimIdInClause(defDimIdSet);
  return String.format(MEASUREMENT_AND_CLAUSE,defDimInClause,timeAndClause);
}","private String createTimeInClause(Handle dbHandle,DateTime startTime,DateTime endTime,String tenantId,String metricName,Map<String,String> dimensions){
  if (startTime == null) {
    return ""String_Node_Str"";
  }
  Set<byte[]> defDimIdSet=new HashSet<>();
  String namePart=""String_Node_Str"";
  if (metricName != null && !metricName.isEmpty()) {
    namePart=""String_Node_Str"";
  }
  String defDimSql=String.format(DEFDIM_IDS_SELECT,namePart,MetricQueries.buildDimensionAndClause(dimensions,""String_Node_Str"",0));
  Query<Map<String,Object>> query=dbHandle.createQuery(defDimSql).bind(""String_Node_Str"",tenantId);
  MetricQueries.bindDimensionsToQuery(query,dimensions);
  if (metricName != null && !metricName.isEmpty()) {
    query.bind(""String_Node_Str"",metricName);
  }
  List<Map<String,Object>> rows=query.list();
  for (  Map<String,Object> row : rows) {
    byte[] defDimId=(byte[])row.get(""String_Node_Str"");
    defDimIdSet.add(defDimId);
  }
  if (defDimIdSet.size() == 0) {
    return ""String_Node_Str"";
  }
  String timeAndClause=""String_Node_Str"";
  if (endTime != null) {
    timeAndClause=""String_Node_Str"";
  }
 else {
    timeAndClause=""String_Node_Str"";
  }
  String defDimInClause=MetricQueries.createDefDimIdInClause(defDimIdSet);
  return String.format(MEASUREMENT_AND_CLAUSE,defDimInClause,timeAndClause);
}",0.9626837542404824
168620,"private List<Map<String,Object>> executeMetricDefsQuery(String tenantId,String name,Map<String,String> dimensions,DateTime startTime,DateTime endTime,String offset,int limit){
  String namePart=""String_Node_Str"";
  if (name != null && !name.isEmpty()) {
    namePart=""String_Node_Str"";
  }
  String offsetPart=""String_Node_Str"";
  if (offset != null && !offset.isEmpty()) {
    offsetPart=""String_Node_Str"";
  }
  String limitPart=""String_Node_Str"" + Integer.toString(limit + 1);
  try (Handle h=db.open()){
    String timeInClause=createTimeInClause(h,startTime,endTime,tenantId,name,dimensions);
    String defSubSelect=String.format(METRIC_DEFINITIONS_SUB_SELECT,MetricQueries.buildJoinClauseFor(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON),namePart,offsetPart,timeInClause,limitPart);
    String sql=String.format(FIND_METRIC_DEFS_SQL,defSubSelect);
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (name != null && !name.isEmpty()) {
      logger.debug(""String_Node_Str"",name);
      query.bind(""String_Node_Str"",name);
    }
    if (startTime != null) {
      query.bind(""String_Node_Str"",startTime);
    }
    if (endTime != null) {
      query.bind(""String_Node_Str"",endTime);
    }
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      try {
        query.bind(""String_Node_Str"",Hex.decodeHex(offset.toCharArray()));
      }
 catch (      DecoderException e) {
        throw Exceptions.badRequest(""String_Node_Str"" + offset,e);
      }
    }
    MetricQueries.bindDimensionsToQuery(query,dimensions);
    return query.list();
  }
 }","private List<Map<String,Object>> executeMetricDefsQuery(String tenantId,String name,Map<String,String> dimensions,DateTime startTime,DateTime endTime,String offset,int limit){
  String namePart=""String_Node_Str"";
  if (name != null && !name.isEmpty()) {
    namePart=""String_Node_Str"";
  }
  String offsetPart=""String_Node_Str"";
  if (offset != null && !offset.isEmpty()) {
    offsetPart=""String_Node_Str"";
  }
  try (Handle h=db.open()){
    String timeInClause=createTimeInClause(h,startTime,endTime,tenantId,name,dimensions);
    String sql=String.format(FIND_METRIC_DEFS_SQL,namePart,offsetPart,MetricQueries.buildDimensionAndClause(dimensions,""String_Node_Str"",limit),timeInClause);
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (name != null && !name.isEmpty()) {
      logger.debug(""String_Node_Str"",name);
      query.bind(""String_Node_Str"",name);
    }
    if (startTime != null) {
      query.bind(""String_Node_Str"",startTime);
    }
    if (endTime != null) {
      query.bind(""String_Node_Str"",endTime);
    }
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      try {
        query.bind(""String_Node_Str"",Hex.decodeHex(offset.toCharArray()));
      }
 catch (      DecoderException e) {
        throw Exceptions.badRequest(""String_Node_Str"" + offset,e);
      }
    }
    MetricQueries.bindDimensionsToQuery(query,dimensions);
    return query.list();
  }
 }",0.8934108527131783
168621,"private Map<byte[],Statistics> findDefIds(Handle h,String tenantId,String name,Map<String,String> dimensions){
  List<byte[]> bytes=new ArrayList<>();
  StringBuilder sb=new StringBuilder();
  if (name != null && !name.isEmpty()) {
    sb.append(""String_Node_Str"");
  }
  String sql=String.format(FIND_BY_METRIC_DEF_SQL,MetricQueries.buildJoinClauseFor(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON),sb);
  Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
  if (name != null && !name.isEmpty()) {
    logger.debug(""String_Node_Str"",name);
    query.bind(""String_Node_Str"",name);
  }
  MetricQueries.bindDimensionsToQuery(query,dimensions);
  List<Map<String,Object>> rows=query.list();
  Map<byte[],Statistics> byteIdMap=new HashMap<>();
  byte[] currentDefDimId=null;
  Map<String,String> dims=null;
  for (  Map<String,Object> row : rows) {
    byte[] defDimId=(byte[])row.get(""String_Node_Str"");
    String defName=(String)row.get(""String_Node_Str"");
    String dimName=(String)row.get(""String_Node_Str"");
    String dimValue=(String)row.get(""String_Node_Str"");
    if (defDimId == null || !Arrays.equals(currentDefDimId,defDimId)) {
      currentDefDimId=defDimId;
      dims=new HashMap<>();
      dims.put(dimName,dimValue);
      Statistics statistics=new Statistics();
      statistics.setName(defName);
      statistics.setDimensions(dims);
      byteIdMap.put(currentDefDimId,statistics);
    }
 else {
      dims.put(dimName,dimValue);
    }
  }
  bytes.add(currentDefDimId);
  return byteIdMap;
}","private Map<byte[],Statistics> findDefIds(Handle h,String tenantId,String name,Map<String,String> dimensions){
  List<byte[]> bytes=new ArrayList<>();
  StringBuilder sb=new StringBuilder();
  if (name != null && !name.isEmpty()) {
    sb.append(""String_Node_Str"");
  }
  String sql=String.format(FIND_BY_METRIC_DEF_SQL,sb,MetricQueries.buildDimensionAndClause(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON,0));
  Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
  if (name != null && !name.isEmpty()) {
    logger.debug(""String_Node_Str"",name);
    query.bind(""String_Node_Str"",name);
  }
  MetricQueries.bindDimensionsToQuery(query,dimensions);
  List<Map<String,Object>> rows=query.list();
  Map<byte[],Statistics> byteIdMap=new HashMap<>();
  byte[] currentDefDimId=null;
  Map<String,String> dims=null;
  for (  Map<String,Object> row : rows) {
    byte[] defDimId=(byte[])row.get(""String_Node_Str"");
    String defName=(String)row.get(""String_Node_Str"");
    String dimName=(String)row.get(""String_Node_Str"");
    String dimValue=(String)row.get(""String_Node_Str"");
    if (defDimId == null || !Arrays.equals(currentDefDimId,defDimId)) {
      currentDefDimId=defDimId;
      dims=new HashMap<>();
      dims.put(dimName,dimValue);
      Statistics statistics=new Statistics();
      statistics.setName(defName);
      statistics.setDimensions(dims);
      byteIdMap.put(currentDefDimId,statistics);
    }
 else {
      dims.put(dimName,dimValue);
    }
  }
  bytes.add(currentDefDimId);
  return byteIdMap;
}",0.9905874716001298
168622,"private String createTimeInClause(Handle dbHandle,DateTime startTime,DateTime endTime,String tenantId,String metricName,Map<String,String> dimensions){
  if (startTime == null) {
    return ""String_Node_Str"";
  }
  Set<byte[]> defDimIdSet=new HashSet<>();
  String namePart=""String_Node_Str"";
  if (metricName != null && !metricName.isEmpty()) {
    namePart=""String_Node_Str"";
  }
  String defDimSql=String.format(DEFDIM_IDS_SELECT,namePart,MetricQueries.buildJoinClauseFor(dimensions,""String_Node_Str""));
  Query<Map<String,Object>> query=dbHandle.createQuery(defDimSql).bind(""String_Node_Str"",tenantId);
  DimensionQueries.bindDimensionsToQuery(query,dimensions);
  if (metricName != null && !metricName.isEmpty()) {
    query.bind(""String_Node_Str"",metricName);
  }
  List<Map<String,Object>> rows=query.list();
  for (  Map<String,Object> row : rows) {
    byte[] defDimId=(byte[])row.get(""String_Node_Str"");
    defDimIdSet.add(defDimId);
  }
  if (defDimIdSet.size() == 0) {
    return ""String_Node_Str"";
  }
  String timeAndClause=""String_Node_Str"";
  if (endTime != null) {
    timeAndClause=""String_Node_Str"";
  }
 else {
    timeAndClause=""String_Node_Str"";
  }
  String defDimInClause=MetricQueries.createDefDimIdInClause(defDimIdSet);
  return String.format(MEASUREMENT_AND_CLAUSE,defDimInClause,timeAndClause);
}","private String createTimeInClause(Handle dbHandle,DateTime startTime,DateTime endTime,String tenantId,String metricName,Map<String,String> dimensions){
  if (startTime == null) {
    return ""String_Node_Str"";
  }
  Set<byte[]> defDimIdSet=new HashSet<>();
  String namePart=""String_Node_Str"";
  if (metricName != null && !metricName.isEmpty()) {
    namePart=""String_Node_Str"";
  }
  String defDimSql=String.format(DEFDIM_IDS_SELECT,MetricQueries.buildJoinClauseFor(dimensions,""String_Node_Str""),namePart);
  Query<Map<String,Object>> query=dbHandle.createQuery(defDimSql).bind(""String_Node_Str"",tenantId);
  MetricQueries.bindDimensionsToQuery(query,dimensions);
  if (metricName != null && !metricName.isEmpty()) {
    query.bind(""String_Node_Str"",metricName);
  }
  List<Map<String,Object>> rows=query.list();
  for (  Map<String,Object> row : rows) {
    byte[] defDimId=(byte[])row.get(""String_Node_Str"");
    defDimIdSet.add(defDimId);
  }
  if (defDimIdSet.size() == 0) {
    return ""String_Node_Str"";
  }
  String timeAndClause=""String_Node_Str"";
  if (endTime != null) {
    timeAndClause=""String_Node_Str"";
  }
 else {
    timeAndClause=""String_Node_Str"";
  }
  String defDimInClause=MetricQueries.createDefDimIdInClause(defDimIdSet);
  return String.format(MEASUREMENT_AND_CLAUSE,defDimInClause,timeAndClause);
}",0.987542468856172
168623,"@SuppressWarnings(""String_Node_Str"") @Override public List<AlarmDefinition> find(String tenantId,String name,Map<String,String> dimensions,List<String> sortBy,String offset,int limit){
  try (Handle h=db.open()){
    String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    StringBuilder sbWhere=new StringBuilder();
    if (name != null) {
      sbWhere.append(""String_Node_Str"");
    }
    String orderByPart=""String_Node_Str"";
    if (sortBy != null && !sortBy.isEmpty()) {
      orderByPart=""String_Node_Str"" + COMMA_JOINER.join(sortBy);
      if (!orderByPart.contains(""String_Node_Str"")) {
        orderByPart=orderByPart + ""String_Node_Str"";
      }
    }
 else {
      orderByPart=""String_Node_Str"";
    }
    String limitPart=""String_Node_Str"";
    if (limit > 0) {
      limitPart=""String_Node_Str"";
    }
    String offsetPart=""String_Node_Str"";
    if (offset != null) {
      offsetPart=""String_Node_Str"" + offset + ' ';
    }
    String sql=String.format(query,SubAlarmDefinitionQueries.buildJoinClauseFor(dimensions),sbWhere,orderByPart,limitPart,offsetPart);
    Query<?> q=h.createQuery(sql);
    q.bind(""String_Node_Str"",tenantId);
    if (name != null) {
      q.bind(""String_Node_Str"",name);
    }
    if (limit > 0) {
      q.bind(""String_Node_Str"",limit + 1);
    }
    q.registerMapper(new AlarmDefinitionMapper());
    q=q.mapTo(AlarmDefinition.class);
    DimensionQueries.bindDimensionsToQuery(q,dimensions);
    List<AlarmDefinition> resultSet=(List<AlarmDefinition>)q.list();
    return resultSet;
  }
 }","@SuppressWarnings(""String_Node_Str"") @Override public List<AlarmDefinition> find(String tenantId,String name,Map<String,String> dimensions,List<String> sortBy,String offset,int limit){
  try (Handle h=db.open()){
    String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    StringBuilder sbWhere=new StringBuilder();
    if (name != null) {
      sbWhere.append(""String_Node_Str"");
    }
    String orderByPart=""String_Node_Str"";
    if (sortBy != null && !sortBy.isEmpty()) {
      orderByPart=""String_Node_Str"" + COMMA_JOINER.join(sortBy);
      if (!orderByPart.contains(""String_Node_Str"")) {
        orderByPart=orderByPart + ""String_Node_Str"";
      }
    }
 else {
      orderByPart=""String_Node_Str"";
    }
    String limitPart=""String_Node_Str"";
    if (limit > 0) {
      limitPart=""String_Node_Str"";
    }
    String offsetPart=""String_Node_Str"";
    if (offset != null) {
      offsetPart=""String_Node_Str"" + offset + ' ';
    }
    String sql=String.format(query,SubAlarmDefinitionQueries.buildJoinClauseFor(dimensions),sbWhere,orderByPart,limitPart,offsetPart);
    Query<?> q=h.createQuery(sql);
    q.bind(""String_Node_Str"",tenantId);
    if (name != null) {
      q.bind(""String_Node_Str"",name);
    }
    if (limit > 0) {
      q.bind(""String_Node_Str"",limit + 1);
    }
    q.registerMapper(new AlarmDefinitionMapper());
    q=q.mapTo(AlarmDefinition.class);
    SubAlarmDefinitionQueries.bindDimensionsToQuery(q,dimensions);
    List<AlarmDefinition> resultSet=(List<AlarmDefinition>)q.list();
    return resultSet;
  }
 }",0.994557433400172
168624,"public List<String> findAlarmIds(String tenantId,Map<String,String> dimensions){
  final String FIND_ALARM_IDS_SQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  List<String> alarmIdList;
  try (Handle h=this.mysql.open()){
    final String sql=String.format(FIND_ALARM_IDS_SQL,this.buildJoinClauseFor(dimensions));
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    logger.debug(""String_Node_Str"",sql);
    DimensionQueries.bindDimensionsToQuery(query,dimensions);
    alarmIdList=query.map(StringMapper.FIRST).list();
  }
   return alarmIdList;
}","public List<String> findAlarmIds(String tenantId,Map<String,String> dimensions){
  final String FIND_ALARM_IDS_SQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  List<String> alarmIdList;
  try (Handle h=this.mysql.open()){
    final String sql=String.format(FIND_ALARM_IDS_SQL,this.buildJoinClauseFor(dimensions));
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    logger.debug(""String_Node_Str"",sql);
    this.bindDimensionsToQuery(query,dimensions);
    alarmIdList=query.map(StringMapper.FIRST).list();
  }
   return alarmIdList;
}",0.9862595419847328
168625,"@Override public List<Alarm> find(String tenantId,String alarmDefId,String metricName,Map<String,String> metricDimensions,AlarmState state,String lifecycleState,String link,DateTime stateUpdatedStart,List<String> sortBy,String offset,int limit,boolean enforceLimit){
  StringBuilder sbWhere=new StringBuilder(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  if (alarmDefId != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (metricName != null) {
    sbWhere.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    buildJoinClauseFor(metricDimensions,sbWhere);
    sbWhere.append(""String_Node_Str"");
  }
 else   if (metricDimensions != null) {
    sbWhere.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    buildJoinClauseFor(metricDimensions,sbWhere);
    sbWhere.append(""String_Node_Str"");
  }
  if (state != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (lifecycleState != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (link != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (stateUpdatedStart != null) {
    sbWhere.append(""String_Node_Str"");
  }
  StringBuilder sortByClause=new StringBuilder();
  if (sortBy != null && !sortBy.isEmpty()) {
    sortByClause.append(""String_Node_Str"");
    sortByClause.append(COMMA_JOINER.join(sortBy));
    if (sortByClause.indexOf(""String_Node_Str"") == -1) {
      sortByClause.append(""String_Node_Str"");
    }
    sortByClause.append(' ');
  }
 else {
    sortByClause.append(""String_Node_Str"");
  }
  if (enforceLimit && limit > 0) {
    sbWhere.append(""String_Node_Str"");
  }
  if (offset != null) {
    sbWhere.append(""String_Node_Str"");
    sbWhere.append(offset);
    sbWhere.append(' ');
  }
  sbWhere.append(""String_Node_Str"");
  String sql=String.format(FIND_ALARMS_SQL,sbWhere,sortByClause);
  try (Handle h=db.open()){
    final Query<Map<String,Object>> q=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (alarmDefId != null) {
      q.bind(""String_Node_Str"",alarmDefId);
    }
    if (metricName != null) {
      q.bind(""String_Node_Str"",metricName);
    }
    if (state != null) {
      q.bind(""String_Node_Str"",state.name());
    }
    if (lifecycleState != null) {
      q.bind(""String_Node_Str"",lifecycleState);
    }
    if (link != null) {
      q.bind(""String_Node_Str"",link);
    }
    if (stateUpdatedStart != null) {
      q.bind(""String_Node_Str"",stateUpdatedStart.toString());
    }
    if (enforceLimit && limit > 0) {
      q.bind(""String_Node_Str"",limit + 1);
    }
    DimensionQueries.bindDimensionsToQuery(q,metricDimensions);
    final List<Map<String,Object>> rows=q.list();
    return createAlarms(tenantId,rows);
  }
 }","@Override public List<Alarm> find(String tenantId,String alarmDefId,String metricName,Map<String,String> metricDimensions,AlarmState state,String lifecycleState,String link,DateTime stateUpdatedStart,List<String> sortBy,String offset,int limit,boolean enforceLimit){
  StringBuilder sbWhere=new StringBuilder(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  if (alarmDefId != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (metricName != null) {
    sbWhere.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    buildJoinClauseFor(metricDimensions,sbWhere);
    sbWhere.append(""String_Node_Str"");
  }
 else   if (metricDimensions != null) {
    sbWhere.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    buildJoinClauseFor(metricDimensions,sbWhere);
    sbWhere.append(""String_Node_Str"");
  }
  if (state != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (lifecycleState != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (link != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (stateUpdatedStart != null) {
    sbWhere.append(""String_Node_Str"");
  }
  StringBuilder orderClause=new StringBuilder();
  if (sortBy != null && !sortBy.isEmpty()) {
    replaceFieldName(sortBy,""String_Node_Str"",""String_Node_Str"");
    replaceFieldName(sortBy,""String_Node_Str"",""String_Node_Str"");
    replaceFieldName(sortBy,""String_Node_Str"",""String_Node_Str"");
    replaceFieldName(sortBy,""String_Node_Str"",""String_Node_Str"");
    replaceFieldName(sortBy,""String_Node_Str"",""String_Node_Str"");
    replaceFieldName(sortBy,""String_Node_Str"",""String_Node_Str"");
    orderClause.append(""String_Node_Str"");
    orderClause.append(COMMA_JOINER.join(sortBy));
    if (orderClause.indexOf(""String_Node_Str"") == -1) {
      orderClause.append(""String_Node_Str"");
    }
    orderClause.append(' ');
  }
 else {
    orderClause.append(""String_Node_Str"");
  }
  sbWhere.append(orderClause);
  if (enforceLimit && limit > 0) {
    sbWhere.append(""String_Node_Str"");
  }
  if (offset != null) {
    sbWhere.append(""String_Node_Str"");
    sbWhere.append(offset);
    sbWhere.append(' ');
  }
  sbWhere.append(""String_Node_Str"");
  String sql=String.format(FIND_ALARMS_SQL,sbWhere,orderClause);
  try (Handle h=db.open()){
    final Query<Map<String,Object>> q=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (alarmDefId != null) {
      q.bind(""String_Node_Str"",alarmDefId);
    }
    if (metricName != null) {
      q.bind(""String_Node_Str"",metricName);
    }
    if (state != null) {
      q.bind(""String_Node_Str"",state.name());
    }
    if (lifecycleState != null) {
      q.bind(""String_Node_Str"",lifecycleState);
    }
    if (link != null) {
      q.bind(""String_Node_Str"",link);
    }
    if (stateUpdatedStart != null) {
      q.bind(""String_Node_Str"",stateUpdatedStart.toString());
    }
    if (enforceLimit && limit > 0) {
      q.bind(""String_Node_Str"",limit + 1);
    }
    DimensionQueries.bindDimensionsToQuery(q,metricDimensions);
    final List<Map<String,Object>> rows=q.list();
    return createAlarms(tenantId,rows);
  }
 }",0.8873866446826051
168626,"@SuppressWarnings(""String_Node_Str"") @Override public List<AlarmDefinition> find(String tenantId,String name,Map<String,String> dimensions,List<String> sortBy,String offset,int limit){
  try (Handle h=db.open()){
    String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    StringBuilder sbWhere=new StringBuilder();
    if (name != null) {
      sbWhere.append(""String_Node_Str"");
    }
    String orderByPart=""String_Node_Str"";
    if (sortBy != null && !sortBy.isEmpty()) {
      orderByPart=""String_Node_Str"" + COMMA_JOINER.join(sortBy);
      if (!orderByPart.contains(""String_Node_Str"")) {
        orderByPart=orderByPart + ""String_Node_Str"";
      }
    }
 else {
      orderByPart=""String_Node_Str"";
    }
    String limitPart=""String_Node_Str"";
    if (limit > 0) {
      limitPart=""String_Node_Str"";
    }
    String offsetPart=""String_Node_Str"";
    if (offset != null) {
      offsetPart=""String_Node_Str"" + offset + ' ';
    }
    String sql=String.format(query,SubAlarmDefinitionQueries.buildJoinClauseFor(dimensions),sbWhere,orderByPart,limitPart,offsetPart);
    Query<?> q=h.createQuery(sql);
    q.bind(""String_Node_Str"",tenantId);
    if (name != null) {
      q.bind(""String_Node_Str"",name);
    }
    if (limit > 0) {
      q.bind(""String_Node_Str"",limit + 1);
    }
    q.registerMapper(new AlarmDefinitionMapper());
    q=q.mapTo(AlarmDefinition.class);
    DimensionQueries.bindDimensionsToQuery(q,dimensions);
    List<AlarmDefinition> resultSet=(List<AlarmDefinition>)q.list();
    return resultSet;
  }
 }","@SuppressWarnings(""String_Node_Str"") @Override public List<AlarmDefinition> find(String tenantId,String name,Map<String,String> dimensions,List<String> sortBy,String offset,int limit){
  try (Handle h=db.open()){
    String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    StringBuilder sbWhere=new StringBuilder();
    if (name != null) {
      sbWhere.append(""String_Node_Str"");
    }
    String orderByPart=""String_Node_Str"";
    if (sortBy != null && !sortBy.isEmpty()) {
      orderByPart=""String_Node_Str"" + COMMA_JOINER.join(sortBy);
      if (!orderByPart.contains(""String_Node_Str"")) {
        orderByPart=orderByPart + ""String_Node_Str"";
      }
    }
 else {
      orderByPart=""String_Node_Str"";
    }
    String limitPart=""String_Node_Str"";
    if (limit > 0) {
      limitPart=""String_Node_Str"";
    }
    String offsetPart=""String_Node_Str"";
    if (offset != null) {
      offsetPart=""String_Node_Str"" + offset + ' ';
    }
    String sql=String.format(query,SubAlarmDefinitionQueries.buildJoinClauseFor(dimensions),sbWhere,orderByPart,limitPart,offsetPart);
    Query<?> q=h.createQuery(sql);
    q.bind(""String_Node_Str"",tenantId);
    if (name != null) {
      q.bind(""String_Node_Str"",name);
    }
    if (limit > 0) {
      q.bind(""String_Node_Str"",limit + 1);
    }
    q.registerMapper(new AlarmDefinitionMapper());
    q=q.mapTo(AlarmDefinition.class);
    SubAlarmDefinitionQueries.bindDimensionsToQuery(q,dimensions);
    List<AlarmDefinition> resultSet=(List<AlarmDefinition>)q.list();
    return resultSet;
  }
 }",0.994557433400172
168627,"public List<String> findAlarmIds(String tenantId,Map<String,String> dimensions){
  final String FIND_ALARM_IDS_SQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  List<String> alarmIdList;
  try (Handle h=this.mysql.open()){
    final String sql=String.format(FIND_ALARM_IDS_SQL,this.buildJoinClauseFor(dimensions));
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    logger.debug(""String_Node_Str"",sql);
    DimensionQueries.bindDimensionsToQuery(query,dimensions);
    alarmIdList=query.map(StringMapper.FIRST).list();
  }
   return alarmIdList;
}","public List<String> findAlarmIds(String tenantId,Map<String,String> dimensions){
  final String FIND_ALARM_IDS_SQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  List<String> alarmIdList;
  try (Handle h=this.mysql.open()){
    final String sql=String.format(FIND_ALARM_IDS_SQL,this.buildJoinClauseFor(dimensions));
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    logger.debug(""String_Node_Str"",sql);
    this.bindDimensionsToQuery(query,dimensions);
    alarmIdList=query.map(StringMapper.FIRST).list();
  }
   return alarmIdList;
}",0.9862595419847328
168628,"public CreateMetricCommand(String name,@Nullable Map<String,String> dimensions,@Nullable Long timestamp,double value,@Nullable Map<String,String> valueMeta){
  setName(name);
  setDimensions(dimensions);
  setTimestamp(timestamp);
  setValueMeta(valueMeta);
  this.value=value;
}","public CreateMetricCommand(String name,@Nullable Map<String,String> dimensions,long timestamp,double value,@Nullable Map<String,String> valueMeta){
  setName(name);
  setDimensions(dimensions);
  this.timestamp=timestamp;
  setValueMeta(valueMeta);
  this.value=value;
}",0.663023679417122
168629,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((dimensions == null) ? 0 : dimensions.hashCode());
  result=prime * result + ((name == null) ? 0 : name.hashCode());
  result=prime * result + (int)(timestamp ^ (timestamp >>> 32));
  long temp;
  temp=(value == null) ? 0 : Double.doubleToLongBits(value);
  result=prime * result + (int)(temp ^ (temp >>> 32));
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((dimensions == null) ? 0 : dimensions.hashCode());
  result=prime * result + ((name == null) ? 0 : name.hashCode());
  result=prime * result + ((timestamp == null) ? 0 : (int)(timestamp ^ (timestamp >>> 32)));
  long temp;
  temp=(value == null) ? 0 : Double.doubleToLongBits(value);
  result=prime * result + (int)(temp ^ (temp >>> 32));
  return result;
}",0.9682539682539684
168630,"@Override public Response toResponse(JsonMappingException exception){
  return Response.status(FaultType.BAD_REQUEST.statusCode).type(MediaType.APPLICATION_JSON).entity(Exceptions.buildLoggedErrorMessage(FaultType.BAD_REQUEST,""String_Node_Str"",Exceptions.stripLocationFromStacktrace(exception.getMessage()),null)).build();
}","@Override public Response toResponse(JsonMappingException exception){
  return Response.status(FaultType.UNPROCESSABLE_ENTITY.statusCode).type(MediaType.APPLICATION_JSON).entity(Exceptions.buildLoggedErrorMessage(FaultType.UNPROCESSABLE_ENTITY,""String_Node_Str"",Exceptions.stripLocationFromStacktrace(exception.getMessage()),null)).build();
}",0.9129129129129128
168631,"@SuppressWarnings(""String_Node_Str"") public void shouldCreateSet() throws Exception {
  String json=jsonFixture(""String_Node_Str"");
  CreateMetricCommand[] metrics=fromJson(json,CreateMetricCommand[].class);
  ClientResponse response=createResponseFor(metrics);
  assertEquals(response.getStatus(),204);
  verify(service).create(any(List.class),eq(""String_Node_Str""),anyString());
}","@SuppressWarnings(""String_Node_Str"") public void shouldCreateSet() throws Exception {
  String json=jsonFixture(""String_Node_Str"");
  CreateMetricCommand[] metrics=fromJson(json,CreateMetricCommand[].class);
  metrics[0].timestamp=timestamp;
  metrics[1].timestamp=timestamp;
  ClientResponse response=createResponseFor(metrics);
  assertEquals(response.getStatus(),204);
  verify(service).create(any(List.class),eq(""String_Node_Str""),anyString());
}",0.9182692307692308
168632,"public void shouldErrorOnCreateWithoutName() throws Exception {
  String json=jsonFixture(""String_Node_Str"");
  ClientResponse response=createResponseFor(json);
  ErrorMessages.assertThat(response.getEntity(String.class)).matches(""String_Node_Str"",422,""String_Node_Str"");
}","public void shouldErrorOnCreateWithoutName() throws Exception {
  String json=jsonFixture(""String_Node_Str"");
  CreateMetricCommand metric=fromJson(json,CreateMetricCommand.class);
  metric.timestamp=timestamp;
  ClientResponse response=createResponseFor(metric);
  ErrorMessages.assertThat(response.getEntity(String.class)).matches(""String_Node_Str"",422,""String_Node_Str"");
}",0.8289676425269645
168633,"public CreateMetricCommand(String name,@Nullable Map<String,String> dimensions,@Nullable Long timestamp,double value,@Nullable Map<String,String> valueMeta){
  setName(name);
  setDimensions(dimensions);
  setTimestamp(timestamp);
  setValueMeta(valueMeta);
  this.value=value;
}","public CreateMetricCommand(String name,@Nullable Map<String,String> dimensions,long timestamp,double value,@Nullable Map<String,String> valueMeta){
  setName(name);
  setDimensions(dimensions);
  this.timestamp=timestamp;
  setValueMeta(valueMeta);
  this.value=value;
}",0.663023679417122
168634,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((dimensions == null) ? 0 : dimensions.hashCode());
  result=prime * result + ((name == null) ? 0 : name.hashCode());
  result=prime * result + (int)(timestamp ^ (timestamp >>> 32));
  long temp;
  temp=(value == null) ? 0 : Double.doubleToLongBits(value);
  result=prime * result + (int)(temp ^ (temp >>> 32));
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((dimensions == null) ? 0 : dimensions.hashCode());
  result=prime * result + ((name == null) ? 0 : name.hashCode());
  result=prime * result + ((timestamp == null) ? 0 : (int)(timestamp ^ (timestamp >>> 32)));
  long temp;
  temp=(value == null) ? 0 : Double.doubleToLongBits(value);
  result=prime * result + (int)(temp ^ (temp >>> 32));
  return result;
}",0.9682539682539684
168635,"@Override public Response toResponse(JsonMappingException exception){
  return Response.status(FaultType.BAD_REQUEST.statusCode).type(MediaType.APPLICATION_JSON).entity(Exceptions.buildLoggedErrorMessage(FaultType.BAD_REQUEST,""String_Node_Str"",Exceptions.stripLocationFromStacktrace(exception.getMessage()),null)).build();
}","@Override public Response toResponse(JsonMappingException exception){
  return Response.status(FaultType.UNPROCESSABLE_ENTITY.statusCode).type(MediaType.APPLICATION_JSON).entity(Exceptions.buildLoggedErrorMessage(FaultType.UNPROCESSABLE_ENTITY,""String_Node_Str"",Exceptions.stripLocationFromStacktrace(exception.getMessage()),null)).build();
}",0.9129129129129128
168636,"@SuppressWarnings(""String_Node_Str"") public void shouldCreateSet() throws Exception {
  String json=jsonFixture(""String_Node_Str"");
  CreateMetricCommand[] metrics=fromJson(json,CreateMetricCommand[].class);
  ClientResponse response=createResponseFor(metrics);
  assertEquals(response.getStatus(),204);
  verify(service).create(any(List.class),eq(""String_Node_Str""),anyString());
}","@SuppressWarnings(""String_Node_Str"") public void shouldCreateSet() throws Exception {
  String json=jsonFixture(""String_Node_Str"");
  CreateMetricCommand[] metrics=fromJson(json,CreateMetricCommand[].class);
  metrics[0].timestamp=timestamp;
  metrics[1].timestamp=timestamp;
  ClientResponse response=createResponseFor(metrics);
  assertEquals(response.getStatus(),204);
  verify(service).create(any(List.class),eq(""String_Node_Str""),anyString());
}",0.9182692307692308
168637,"public void shouldErrorOnCreateWithoutName() throws Exception {
  String json=jsonFixture(""String_Node_Str"");
  ClientResponse response=createResponseFor(json);
  ErrorMessages.assertThat(response.getEntity(String.class)).matches(""String_Node_Str"",422,""String_Node_Str"");
}","public void shouldErrorOnCreateWithoutName() throws Exception {
  String json=jsonFixture(""String_Node_Str"");
  CreateMetricCommand metric=fromJson(json,CreateMetricCommand.class);
  metric.timestamp=timestamp;
  ClientResponse response=createResponseFor(metric);
  ErrorMessages.assertThat(response.getEntity(String.class)).matches(""String_Node_Str"",422,""String_Node_Str"");
}",0.8289676425269645
168638,"private List<Alarm> createAlarms(String tenantId,List<Map<String,Object>> rows){
  Alarm alarm=null;
  String previousAlarmId=null;
  final List<Alarm> alarms=new LinkedList<>();
  List<MetricDefinition> alarmedMetrics=null;
  for (  final Map<String,Object> row : rows) {
    final String alarmId=(String)row.get(""String_Node_Str"");
    if (!alarmId.equals(previousAlarmId)) {
      alarmedMetrics=new ArrayList<>();
      alarm=new Alarm(alarmId,getString(row,""String_Node_Str""),getString(row,""String_Node_Str""),getString(row,""String_Node_Str""),alarmedMetrics,AlarmState.valueOf(getString(row,""String_Node_Str"")),getString(row,""String_Node_Str""),getString(row,""String_Node_Str""),new DateTime(((Timestamp)row.get(""String_Node_Str"")).getTime(),DateTimeZone.forID(""String_Node_Str"")),new DateTime(((Timestamp)row.get(""String_Node_Str"")).getTime(),DateTimeZone.forID(""String_Node_Str"")),new DateTime(((Timestamp)row.get(""String_Node_Str"")).getTime(),DateTimeZone.forID(""String_Node_Str"")));
      alarms.add(alarm);
    }
    previousAlarmId=alarmId;
    final Map<String,String> dimensionMap=new HashMap<>();
    if (row.containsKey(""String_Node_Str"")) {
      final String dimensions=getString(row,""String_Node_Str"");
      if (dimensions != null && !dimensions.isEmpty()) {
        for (        String dimension : dimensions.split(""String_Node_Str"")) {
          final String[] parsed_dimension=dimension.split(""String_Node_Str"");
          if (parsed_dimension.length == 2) {
            dimensionMap.put(parsed_dimension[0],parsed_dimension[1]);
          }
 else {
            logger.error(""String_Node_Str"",dimension);
          }
        }
      }
    }
    alarmedMetrics.add(new MetricDefinition(getString(row,""String_Node_Str""),dimensionMap));
  }
  return alarms;
}","private List<Alarm> createAlarms(String tenantId,List<Map<String,Object>> rows){
  Alarm alarm;
  String previousAlarmId=null;
  final List<Alarm> alarms=new LinkedList<>();
  List<MetricDefinition> alarmedMetrics=null;
  for (  final Map<String,Object> row : rows) {
    final String alarmId=(String)row.get(""String_Node_Str"");
    if (!alarmId.equals(previousAlarmId)) {
      alarmedMetrics=new ArrayList<>();
      alarm=new Alarm(alarmId,getString(row,""String_Node_Str""),getString(row,""String_Node_Str""),getString(row,""String_Node_Str""),alarmedMetrics,AlarmState.valueOf(getString(row,""String_Node_Str"")),getString(row,""String_Node_Str""),getString(row,""String_Node_Str""),new DateTime(((Timestamp)row.get(""String_Node_Str"")).getTime(),DateTimeZone.forID(""String_Node_Str"")),new DateTime(((Timestamp)row.get(""String_Node_Str"")).getTime(),DateTimeZone.forID(""String_Node_Str"")),new DateTime(((Timestamp)row.get(""String_Node_Str"")).getTime(),DateTimeZone.forID(""String_Node_Str"")));
      alarms.add(alarm);
    }
    previousAlarmId=alarmId;
    final Map<String,String> dimensionMap=new HashMap<>();
    if (row.containsKey(""String_Node_Str"")) {
      final String dimensions=getString(row,""String_Node_Str"");
      if (dimensions != null && !dimensions.isEmpty()) {
        for (        String dimension : dimensions.split(""String_Node_Str"")) {
          final String[] parsed_dimension=dimension.split(""String_Node_Str"");
          if (parsed_dimension.length == 2) {
            dimensionMap.put(parsed_dimension[0],parsed_dimension[1]);
          }
 else {
            logger.error(""String_Node_Str"",dimension);
          }
        }
      }
    }
    alarmedMetrics.add(new MetricDefinition(getString(row,""String_Node_Str""),dimensionMap));
  }
  return alarms;
}",0.998589562764457
168639,"@Override public Map<String,AlarmSubExpression> findAlarmSubExpressions(String alarmId){
  try (Handle h=db.open()){
    final List<SubAlarm> result=h.createQuery(""String_Node_Str"").bind(""String_Node_Str"",alarmId).map(new BeanMapper<SubAlarm>(SubAlarm.class)).list();
    final Map<String,AlarmSubExpression> subAlarms=new HashMap<>(result.size());
    for (    SubAlarm row : result) {
      subAlarms.put(row.id,AlarmSubExpression.of(row.expression));
    }
    return subAlarms;
  }
 }","@Override public Map<String,AlarmSubExpression> findAlarmSubExpressions(String alarmId){
  try (Handle h=db.open()){
    final List<SubAlarm> result=h.createQuery(""String_Node_Str"").bind(""String_Node_Str"",alarmId).map(new BeanMapper<>(SubAlarm.class)).list();
    final Map<String,AlarmSubExpression> subAlarms=new HashMap<>(result.size());
    for (    SubAlarm row : result) {
      subAlarms.put(row.id,AlarmSubExpression.of(row.expression));
    }
    return subAlarms;
  }
 }",0.9917355371900828
168640,"@Override public List<Alarm> find(String tenantId,String alarmDefId,String metricName,Map<String,String> metricDimensions,AlarmState state,String lifecycleState,String link,DateTime stateUpdatedStart,String offset,int limit,boolean enforceLimit){
  StringBuilder sbWhere=new StringBuilder(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  if (alarmDefId != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (metricName != null) {
    sbWhere.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    buildJoinClauseFor(metricDimensions,sbWhere);
    sbWhere.append(""String_Node_Str"");
  }
 else   if (metricDimensions != null) {
    sbWhere.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    buildJoinClauseFor(metricDimensions,sbWhere);
    sbWhere.append(""String_Node_Str"");
  }
  if (state != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (lifecycleState != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (link != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (stateUpdatedStart != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (offset != null) {
    sbWhere.append(""String_Node_Str"");
  }
  sbWhere.append(""String_Node_Str"");
  if (enforceLimit && limit > 0) {
    sbWhere.append(""String_Node_Str"");
  }
  sbWhere.append(""String_Node_Str"");
  String sql=String.format(FIND_ALARMS_SQL,sbWhere);
  try (Handle h=db.open()){
    final Query<Map<String,Object>> q=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (alarmDefId != null) {
      q.bind(""String_Node_Str"",alarmDefId);
    }
    if (metricName != null) {
      q.bind(""String_Node_Str"",metricName);
    }
    if (state != null) {
      q.bind(""String_Node_Str"",state.name());
    }
    if (lifecycleState != null) {
      q.bind(""String_Node_Str"",lifecycleState);
    }
    if (link != null) {
      q.bind(""String_Node_Str"",link);
    }
    if (stateUpdatedStart != null) {
      q.bind(""String_Node_Str"",stateUpdatedStart.toString().replace('Z',' '));
    }
    if (offset != null) {
      q.bind(""String_Node_Str"",offset);
    }
    if (enforceLimit && limit > 0) {
      q.bind(""String_Node_Str"",limit + 1);
    }
    DimensionQueries.bindDimensionsToQuery(q,metricDimensions);
    final List<Map<String,Object>> rows=q.list();
    final List<Alarm> alarms=createAlarms(tenantId,rows);
    return alarms;
  }
 }","@Override public List<Alarm> find(String tenantId,String alarmDefId,String metricName,Map<String,String> metricDimensions,AlarmState state,String lifecycleState,String link,DateTime stateUpdatedStart,String offset,int limit,boolean enforceLimit){
  StringBuilder sbWhere=new StringBuilder(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  if (alarmDefId != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (metricName != null) {
    sbWhere.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    buildJoinClauseFor(metricDimensions,sbWhere);
    sbWhere.append(""String_Node_Str"");
  }
 else   if (metricDimensions != null) {
    sbWhere.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    buildJoinClauseFor(metricDimensions,sbWhere);
    sbWhere.append(""String_Node_Str"");
  }
  if (state != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (lifecycleState != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (link != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (stateUpdatedStart != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (offset != null) {
    sbWhere.append(""String_Node_Str"");
  }
  sbWhere.append(""String_Node_Str"");
  if (enforceLimit && limit > 0) {
    sbWhere.append(""String_Node_Str"");
  }
  sbWhere.append(""String_Node_Str"");
  String sql=String.format(FIND_ALARMS_SQL,sbWhere);
  try (Handle h=db.open()){
    final Query<Map<String,Object>> q=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (alarmDefId != null) {
      q.bind(""String_Node_Str"",alarmDefId);
    }
    if (metricName != null) {
      q.bind(""String_Node_Str"",metricName);
    }
    if (state != null) {
      q.bind(""String_Node_Str"",state.name());
    }
    if (lifecycleState != null) {
      q.bind(""String_Node_Str"",lifecycleState);
    }
    if (link != null) {
      q.bind(""String_Node_Str"",link);
    }
    if (stateUpdatedStart != null) {
      q.bind(""String_Node_Str"",stateUpdatedStart.toString());
    }
    if (offset != null) {
      q.bind(""String_Node_Str"",offset);
    }
    if (enforceLimit && limit > 0) {
      q.bind(""String_Node_Str"",limit + 1);
    }
    DimensionQueries.bindDimensionsToQuery(q,metricDimensions);
    final List<Map<String,Object>> rows=q.list();
    return createAlarms(tenantId,rows);
  }
 }",0.9838904550946436
168641,"private Alarm findAlarm(String tenantId,String alarmId,Handle h){
  final String sql=String.format(ALARM_SQL,""String_Node_Str"",""String_Node_Str"");
  final List<Map<String,Object>> rows=h.createQuery(sql).bind(""String_Node_Str"",alarmId).bind(""String_Node_Str"",tenantId).list();
  if (rows.isEmpty()) {
    throw new EntityNotFoundException(""String_Node_Str"",alarmId);
  }
  return createAlarms(tenantId,rows).get(0);
}","private Alarm findAlarm(String tenantId,String alarmId,Handle h){
  final String sql=String.format(FIND_ALARM_BY_ID_SQL,""String_Node_Str"",""String_Node_Str"");
  final List<Map<String,Object>> rows=h.createQuery(sql).bind(""String_Node_Str"",alarmId).bind(""String_Node_Str"",tenantId).list();
  if (rows.isEmpty()) {
    throw new EntityNotFoundException(""String_Node_Str"",alarmId);
  }
  return createAlarms(tenantId,rows).get(0);
}",0.98698224852071
168642,"@Override public List<Alarm> find(String tenantId,String alarmDefId,String metricName,Map<String,String> metricDimensions,AlarmState state,String lifecycleState,String link,DateTime stateUpdatedStart,String offset,int limit,boolean enforceLimit){
  try (Handle h=db.open()){
    StringBuilder sbWhere=new StringBuilder();
    if (alarmDefId != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (metricName != null) {
      sbWhere.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      buildJoinClauseFor(metricDimensions,sbWhere);
      sbWhere.append(""String_Node_Str"");
    }
    if (state != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (lifecycleState != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (link != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (stateUpdatedStart != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (offset != null) {
      sbWhere.append(""String_Node_Str"");
    }
    String limitPart=""String_Node_Str"";
    if (enforceLimit && limit > 0) {
      limitPart=""String_Node_Str"";
    }
    String sql=String.format(ALARM_SQL,sbWhere,limitPart);
    final Query<Map<String,Object>> q=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (alarmDefId != null) {
      q.bind(""String_Node_Str"",alarmDefId);
    }
    if (metricName != null) {
      q.bind(""String_Node_Str"",metricName);
    }
    if (state != null) {
      q.bind(""String_Node_Str"",state.name());
    }
    if (lifecycleState != null) {
      q.bind(""String_Node_Str"",lifecycleState);
    }
    if (link != null) {
      q.bind(""String_Node_Str"",link);
    }
    if (stateUpdatedStart != null) {
      q.bind(""String_Node_Str"",stateUpdatedStart.toString().replace('Z',' '));
    }
    if (offset != null) {
      q.bind(""String_Node_Str"",offset);
    }
    if (enforceLimit && limit > 0) {
      q.bind(""String_Node_Str"",limit + 1);
    }
    DimensionQueries.bindDimensionsToQuery(q,metricDimensions);
    final long start=System.currentTimeMillis();
    final List<Map<String,Object>> rows=q.list();
    logger.debug(""String_Node_Str"",System.currentTimeMillis() - start);
    final List<Alarm> alarms=createAlarms(tenantId,rows);
    return alarms;
  }
 }","@Override public List<Alarm> find(String tenantId,String alarmDefId,String metricName,Map<String,String> metricDimensions,AlarmState state,String lifecycleState,String link,DateTime stateUpdatedStart,String offset,int limit,boolean enforceLimit){
  StringBuilder sbWhere=new StringBuilder(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  if (alarmDefId != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (metricName != null) {
    sbWhere.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    buildJoinClauseFor(metricDimensions,sbWhere);
    sbWhere.append(""String_Node_Str"");
  }
 else   if (metricDimensions != null) {
    sbWhere.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    buildJoinClauseFor(metricDimensions,sbWhere);
    sbWhere.append(""String_Node_Str"");
  }
  if (state != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (lifecycleState != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (link != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (stateUpdatedStart != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (offset != null) {
    sbWhere.append(""String_Node_Str"");
  }
  sbWhere.append(""String_Node_Str"");
  if (enforceLimit && limit > 0) {
    sbWhere.append(""String_Node_Str"");
  }
  sbWhere.append(""String_Node_Str"");
  String sql=String.format(FIND_ALARMS_SQL,sbWhere);
  try (Handle h=db.open()){
    final Query<Map<String,Object>> q=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (alarmDefId != null) {
      q.bind(""String_Node_Str"",alarmDefId);
    }
    if (metricName != null) {
      q.bind(""String_Node_Str"",metricName);
    }
    if (state != null) {
      q.bind(""String_Node_Str"",state.name());
    }
    if (lifecycleState != null) {
      q.bind(""String_Node_Str"",lifecycleState);
    }
    if (link != null) {
      q.bind(""String_Node_Str"",link);
    }
    if (stateUpdatedStart != null) {
      q.bind(""String_Node_Str"",stateUpdatedStart.toString().replace('Z',' '));
    }
    if (offset != null) {
      q.bind(""String_Node_Str"",offset);
    }
    if (enforceLimit && limit > 0) {
      q.bind(""String_Node_Str"",limit + 1);
    }
    DimensionQueries.bindDimensionsToQuery(q,metricDimensions);
    final List<Map<String,Object>> rows=q.list();
    final List<Alarm> alarms=createAlarms(tenantId,rows);
    return alarms;
  }
 }",0.8260599793174768
168643,"private AlarmStateHistory getAlarmStateHistory(Map<String,Object> row){
  AlarmStateHistory alarmStateHistory=new AlarmStateHistory();
  Date date;
  try {
    date=parseTimestamp(((Timestamp)row.get(""String_Node_Str"")).toString() + ""String_Node_Str"");
  }
 catch (  ParseException e) {
    logger.error(""String_Node_Str"",e);
    return null;
  }
  DateTime dateTime=new DateTime(date.getTime(),DateTimeZone.UTC);
  alarmStateHistory.setTimestamp(dateTime);
  alarmStateHistory.setAlarmId((String)row.get(""String_Node_Str""));
  List<MetricDefinition> metricDefinitionList;
  try {
    metricDefinitionList=this.objectMapper.readValue((String)row.get(""String_Node_Str""),METRICS_TYPE);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    metricDefinitionList=new ArrayList<>();
  }
  alarmStateHistory.setMetrics(metricDefinitionList);
  alarmStateHistory.setOldState(AlarmState.valueOf((String)row.get(""String_Node_Str"")));
  alarmStateHistory.setNewState(AlarmState.valueOf((String)row.get(""String_Node_Str"")));
  alarmStateHistory.setReason((String)row.get(""String_Node_Str""));
  alarmStateHistory.setReasonData((String)row.get(""String_Node_Str""));
  List<AlarmTransitionSubAlarm> subAlarmList;
  try {
    subAlarmList=this.objectMapper.readValue((String)row.get(""String_Node_Str""),SUB_ALARMS_TYPE);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    subAlarmList=new ArrayList<>();
  }
  alarmStateHistory.setSubAlarms(subAlarmList);
  return alarmStateHistory;
}","private AlarmStateHistory getAlarmStateHistory(Map<String,Object> row){
  AlarmStateHistory alarmStateHistory=new AlarmStateHistory();
  Date date;
  try {
    date=parseTimestamp(row.get(""String_Node_Str"").toString() + ""String_Node_Str"");
  }
 catch (  ParseException e) {
    logger.error(""String_Node_Str"",e);
    return null;
  }
  DateTime dateTime=new DateTime(date.getTime(),DateTimeZone.UTC);
  alarmStateHistory.setTimestamp(dateTime);
  alarmStateHistory.setAlarmId((String)row.get(""String_Node_Str""));
  List<MetricDefinition> metricDefinitionList;
  try {
    metricDefinitionList=this.objectMapper.readValue((String)row.get(""String_Node_Str""),METRICS_TYPE);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    metricDefinitionList=new ArrayList<>();
  }
  alarmStateHistory.setMetrics(metricDefinitionList);
  alarmStateHistory.setOldState(AlarmState.valueOf((String)row.get(""String_Node_Str"")));
  alarmStateHistory.setNewState(AlarmState.valueOf((String)row.get(""String_Node_Str"")));
  alarmStateHistory.setReason((String)row.get(""String_Node_Str""));
  alarmStateHistory.setReasonData((String)row.get(""String_Node_Str""));
  List<AlarmTransitionSubAlarm> subAlarmList;
  try {
    subAlarmList=this.objectMapper.readValue((String)row.get(""String_Node_Str""),SUB_ALARMS_TYPE);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    subAlarmList=new ArrayList<>();
  }
  alarmStateHistory.setSubAlarms(subAlarmList);
  return alarmStateHistory;
}",0.9956796277833168
168644,"private Date parseTimestamp(String timestampString) throws ParseException {
  try {
    return this.simpleDateFormat.parse(timestampString);
  }
 catch (  ParseException pe) {
    return this.oldSimpleDateFormat.parse(timestampString);
  }
}","private Date parseTimestamp(String timestampString) throws ParseException {
  try {
    return this.simpleDateFormat.parse(timestampString);
  }
 catch (  ParseException pe0) {
    try {
      return this.simpleDateFormatOneMilli.parse(timestampString);
    }
 catch (    ParseException pe1) {
      return this.oldSimpleDateFormat.parse(timestampString);
    }
  }
}",0.7697368421052632
168645,"@Override public List<Measurements> find(String tenantId,String name,Map<String,String> dimensions,DateTime startTime,@Nullable DateTime endTime,@Nullable String offset,int limit,Boolean mergeMetricsFlag) throws MultipleMetricsException {
  try (Handle h=db.open()){
    StringBuilder sb=new StringBuilder();
    if (name != null && !name.isEmpty()) {
      sb.append(""String_Node_Str"");
    }
    if (endTime != null) {
      sb.append(""String_Node_Str"");
    }
    if (offset != null && !offset.isEmpty()) {
      sb.append(""String_Node_Str"");
    }
    String sql=String.format(FIND_BY_METRIC_DEF_SQL,MetricQueries.buildJoinClauseFor(dimensions),sb);
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId).bind(""String_Node_Str"",new Timestamp(startTime.getMillis())).bind(""String_Node_Str"",limit + 1);
    if (name != null && !name.isEmpty()) {
      logger.debug(""String_Node_Str"",name);
      query.bind(""String_Node_Str"",name);
    }
    if (endTime != null) {
      logger.debug(""String_Node_Str"",endTime);
      query.bind(""String_Node_Str"",new Timestamp(endTime.getMillis()));
    }
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      query.bind(""String_Node_Str"",new Timestamp(DateTime.parse(offset).getMillis()));
    }
    DimensionQueries.bindDimensionsToQuery(query,dimensions);
    List<Map<String,Object>> rows=query.list();
    Map<ByteBuffer,Measurements> results=new LinkedHashMap<>();
    for (    Map<String,Object> row : rows) {
      String metricName=(String)row.get(""String_Node_Str"");
      byte[] defIdBytes=(byte[])row.get(""String_Node_Str"");
      ByteBuffer defId=ByteBuffer.wrap(defIdBytes);
      byte[] defdimsIdBytes=(byte[])row.get(""String_Node_Str"");
      byte[] dimSetIdBytes=(byte[])row.get(""String_Node_Str"");
      ByteBuffer defdimsId=ByteBuffer.wrap(defdimsIdBytes);
      String timestamp=DATETIME_FORMATTER.print(((Timestamp)row.get(""String_Node_Str"")).getTime());
      double value=(double)row.get(""String_Node_Str"");
      String valueMetaString=(String)row.get(""String_Node_Str"");
      Map<String,String> valueMetaMap=new HashMap<>();
      if (valueMetaString != null && !valueMetaString.isEmpty()) {
        try {
          valueMetaMap=this.objectMapper.readValue(valueMetaString,VALUE_META_TYPE);
        }
 catch (        IOException e) {
          logger.error(""String_Node_Str"",valueMetaString);
        }
      }
      Measurements measurements;
      if (Boolean.TRUE.equals(mergeMetricsFlag)) {
        measurements=results.get(defId);
      }
 else {
        measurements=results.get(defdimsId);
      }
      if (measurements == null) {
        if (Boolean.TRUE.equals(mergeMetricsFlag)) {
          measurements=new Measurements(metricName,new HashMap<String,String>(),new ArrayList<Object[]>());
          results.put(defId,measurements);
        }
 else {
          measurements=new Measurements(metricName,MetricQueries.dimensionsFor(h,dimSetIdBytes),new ArrayList<Object[]>());
          results.put(defdimsId,measurements);
          if (results.keySet().size() > 1) {
            throw new MultipleMetricsException(name,dimensions);
          }
        }
      }
      measurements.addMeasurement(new Object[]{timestamp,value,valueMetaMap});
    }
    return new ArrayList<>(results.values());
  }
 }","@Override public List<Measurements> find(String tenantId,String name,Map<String,String> dimensions,DateTime startTime,@Nullable DateTime endTime,@Nullable String offset,int limit,Boolean mergeMetricsFlag) throws MultipleMetricsException {
  try (Handle h=db.open()){
    StringBuilder sb=new StringBuilder();
    if (name != null && !name.isEmpty()) {
      sb.append(""String_Node_Str"");
    }
    if (endTime != null) {
      sb.append(""String_Node_Str"");
    }
    if (offset != null && !offset.isEmpty()) {
      sb.append(""String_Node_Str"");
    }
    String sql=String.format(FIND_BY_METRIC_DEF_SQL,MetricQueries.buildJoinClauseFor(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON),sb);
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId).bind(""String_Node_Str"",new Timestamp(startTime.getMillis())).bind(""String_Node_Str"",limit + 1);
    if (name != null && !name.isEmpty()) {
      logger.debug(""String_Node_Str"",name);
      query.bind(""String_Node_Str"",name);
    }
    if (endTime != null) {
      logger.debug(""String_Node_Str"",endTime);
      query.bind(""String_Node_Str"",new Timestamp(endTime.getMillis()));
    }
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      query.bind(""String_Node_Str"",new Timestamp(DateTime.parse(offset).getMillis()));
    }
    DimensionQueries.bindDimensionsToQuery(query,dimensions);
    List<Map<String,Object>> rows=query.list();
    Map<ByteBuffer,Measurements> results=new LinkedHashMap<>();
    for (    Map<String,Object> row : rows) {
      String metricName=(String)row.get(""String_Node_Str"");
      byte[] defIdBytes=(byte[])row.get(""String_Node_Str"");
      ByteBuffer defId=ByteBuffer.wrap(defIdBytes);
      byte[] defdimsIdBytes=(byte[])row.get(""String_Node_Str"");
      byte[] dimSetIdBytes=(byte[])row.get(""String_Node_Str"");
      ByteBuffer defdimsId=ByteBuffer.wrap(defdimsIdBytes);
      String timestamp=DATETIME_FORMATTER.print(((Timestamp)row.get(""String_Node_Str"")).getTime());
      double value=(double)row.get(""String_Node_Str"");
      String valueMetaString=(String)row.get(""String_Node_Str"");
      Map<String,String> valueMetaMap=new HashMap<>();
      if (valueMetaString != null && !valueMetaString.isEmpty()) {
        try {
          valueMetaMap=this.objectMapper.readValue(valueMetaString,VALUE_META_TYPE);
        }
 catch (        IOException e) {
          logger.error(""String_Node_Str"",valueMetaString);
        }
      }
      Measurements measurements;
      if (Boolean.TRUE.equals(mergeMetricsFlag)) {
        measurements=results.get(defId);
      }
 else {
        measurements=results.get(defdimsId);
      }
      if (measurements == null) {
        if (Boolean.TRUE.equals(mergeMetricsFlag)) {
          measurements=new Measurements(metricName,new HashMap<String,String>(),new ArrayList<Object[]>());
          results.put(defId,measurements);
        }
 else {
          measurements=new Measurements(metricName,MetricQueries.dimensionsFor(h,dimSetIdBytes),new ArrayList<Object[]>());
          results.put(defdimsId,measurements);
          if (results.keySet().size() > 1) {
            throw new MultipleMetricsException(name,dimensions);
          }
        }
      }
      measurements.addMeasurement(new Object[]{timestamp,value,valueMetaMap});
    }
    return new ArrayList<>(results.values());
  }
 }",0.9958370502527504
168646,"private List<Map<String,Object>> executeMetricNamesQuery(String tenantId,Map<String,String> dimensions,String offset,int limit){
  StringBuilder sb=new StringBuilder();
  if (offset != null && !offset.isEmpty()) {
    sb.append(""String_Node_Str"");
  }
  String sql=String.format(FIND_METRIC_NAMES_SQL,MetricQueries.buildJoinClauseFor(dimensions),sb);
  try (Handle h=db.open()){
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId).bind(""String_Node_Str"",limit + 1);
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      try {
        query.bind(""String_Node_Str"",Hex.decodeHex(offset.toCharArray()));
      }
 catch (      DecoderException e) {
        throw Exceptions.badRequest(""String_Node_Str"" + offset,e);
      }
    }
    DimensionQueries.bindDimensionsToQuery(query,dimensions);
    return query.list();
  }
 }","private List<Map<String,Object>> executeMetricNamesQuery(String tenantId,Map<String,String> dimensions,String offset,int limit){
  String offsetPart=""String_Node_Str"";
  if (offset != null && !offset.isEmpty()) {
    offsetPart=""String_Node_Str"";
  }
  String limitPart=""String_Node_Str"" + Integer.toString(limit + 1);
  String defSubSelect=String.format(METRIC_NAMES_SUB_SELECT,MetricQueries.buildJoinClauseFor(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON),offsetPart,limitPart);
  String sql=String.format(FIND_METRIC_NAMES_SQL,defSubSelect);
  try (Handle h=db.open()){
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      try {
        query.bind(""String_Node_Str"",Hex.decodeHex(offset.toCharArray()));
      }
 catch (      DecoderException e) {
        throw Exceptions.badRequest(""String_Node_Str"" + offset,e);
      }
    }
    DimensionQueries.bindDimensionsToQuery(query,dimensions);
    return query.list();
  }
 }",0.7584442169907881
168647,"private List<Map<String,Object>> executeMetricDefsQuery(String tenantId,String name,Map<String,String> dimensions,String offset,int limit){
  StringBuilder sb=new StringBuilder();
  if (name != null && !name.isEmpty()) {
    sb.append(""String_Node_Str"");
  }
  if (offset != null && !offset.isEmpty()) {
    sb.append(""String_Node_Str"");
  }
  String sql=String.format(FIND_METRIC_DEFS_SQL,MetricQueries.buildJoinClauseFor(dimensions),sb);
  try (Handle h=db.open()){
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId).bind(""String_Node_Str"",limit + 1);
    if (name != null && !name.isEmpty()) {
      logger.debug(""String_Node_Str"",name);
      query.bind(""String_Node_Str"",name);
    }
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      try {
        query.bind(""String_Node_Str"",Hex.decodeHex(offset.toCharArray()));
      }
 catch (      DecoderException e) {
        throw Exceptions.badRequest(""String_Node_Str"" + offset,e);
      }
    }
    DimensionQueries.bindDimensionsToQuery(query,dimensions);
    return query.list();
  }
 }","private List<Map<String,Object>> executeMetricDefsQuery(String tenantId,String name,Map<String,String> dimensions,String offset,int limit){
  String namePart=""String_Node_Str"";
  if (name != null && !name.isEmpty()) {
    namePart=""String_Node_Str"";
  }
  String offsetPart=""String_Node_Str"";
  if (offset != null && !offset.isEmpty()) {
    offsetPart=""String_Node_Str"";
  }
  String limitPart=""String_Node_Str"" + Integer.toString(limit + 1);
  String defSubSelect=String.format(METRIC_DEFINITIONS_SUB_SELECT,MetricQueries.buildJoinClauseFor(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON),namePart,offsetPart,limitPart);
  String sql=String.format(FIND_METRIC_DEFS_SQL,defSubSelect);
  try (Handle h=db.open()){
    Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (name != null && !name.isEmpty()) {
      logger.debug(""String_Node_Str"",name);
      query.bind(""String_Node_Str"",name);
    }
    if (offset != null && !offset.isEmpty()) {
      logger.debug(""String_Node_Str"",offset);
      try {
        query.bind(""String_Node_Str"",Hex.decodeHex(offset.toCharArray()));
      }
 catch (      DecoderException e) {
        throw Exceptions.badRequest(""String_Node_Str"" + offset,e);
      }
    }
    DimensionQueries.bindDimensionsToQuery(query,dimensions);
    return query.list();
  }
 }",0.7642740619902121
168648,"static String buildJoinClauseFor(Map<String,String> dimensions){
  StringBuilder sb=null;
  if (dimensions != null) {
    sb=new StringBuilder();
    for (int i=0; i < dimensions.size(); i++) {
      sb.append(""String_Node_Str"").append(i).append(""String_Node_Str"").append(i).append(""String_Node_Str"").append(i).append(""String_Node_Str"").append(i).append(""String_Node_Str"" + ""String_Node_Str"").append(i).append(""String_Node_Str"").append(i).append(""String_Node_Str"");
    }
  }
  return sb == null ? ""String_Node_Str"" : sb.toString();
}","static String buildJoinClauseFor(Map<String,String> dimensions,String tableToJoinName){
  StringBuilder sb=null;
  if (dimensions != null) {
    sb=new StringBuilder();
    for (int i=0; i < dimensions.size(); i++) {
      sb.append(""String_Node_Str"").append(i).append(""String_Node_Str"").append(i).append(""String_Node_Str"").append(i).append(""String_Node_Str"").append(i).append(""String_Node_Str"" + ""String_Node_Str"").append(i).append(""String_Node_Str"" + tableToJoinName + ""String_Node_Str"").append(i).append(""String_Node_Str"");
    }
  }
  return sb == null ? ""String_Node_Str"" : sb.toString();
}",0.9459698848538528
168649,"private Map<byte[],Statistics> findDefIds(Handle h,String tenantId,String name,Map<String,String> dimensions){
  List<byte[]> bytes=new ArrayList<>();
  StringBuilder sb=new StringBuilder();
  if (name != null && !name.isEmpty()) {
    sb.append(""String_Node_Str"");
  }
  String sql=String.format(FIND_BY_METRIC_DEF_SQL,MetricQueries.buildJoinClauseFor(dimensions),sb);
  Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
  if (name != null && !name.isEmpty()) {
    logger.debug(""String_Node_Str"",name);
    query.bind(""String_Node_Str"",name);
  }
  DimensionQueries.bindDimensionsToQuery(query,dimensions);
  List<Map<String,Object>> rows=query.list();
  Map<byte[],Statistics> byteIdMap=new HashMap<>();
  byte[] currentDefDimId=null;
  Map<String,String> dims=null;
  for (  Map<String,Object> row : rows) {
    byte[] defDimId=(byte[])row.get(""String_Node_Str"");
    String defName=(String)row.get(""String_Node_Str"");
    String dimName=(String)row.get(""String_Node_Str"");
    String dimValue=(String)row.get(""String_Node_Str"");
    if (defDimId == null || !Arrays.equals(currentDefDimId,defDimId)) {
      currentDefDimId=defDimId;
      dims=new HashMap<>();
      dims.put(dimName,dimValue);
      Statistics statistics=new Statistics();
      statistics.setName(defName);
      statistics.setDimensions(dims);
      byteIdMap.put(currentDefDimId,statistics);
    }
 else {
      dims.put(dimName,dimValue);
    }
  }
  bytes.add(currentDefDimId);
  return byteIdMap;
}","private Map<byte[],Statistics> findDefIds(Handle h,String tenantId,String name,Map<String,String> dimensions){
  List<byte[]> bytes=new ArrayList<>();
  StringBuilder sb=new StringBuilder();
  if (name != null && !name.isEmpty()) {
    sb.append(""String_Node_Str"");
  }
  String sql=String.format(FIND_BY_METRIC_DEF_SQL,MetricQueries.buildJoinClauseFor(dimensions,TABLE_TO_JOIN_DIMENSIONS_ON),sb);
  Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
  if (name != null && !name.isEmpty()) {
    logger.debug(""String_Node_Str"",name);
    query.bind(""String_Node_Str"",name);
  }
  DimensionQueries.bindDimensionsToQuery(query,dimensions);
  List<Map<String,Object>> rows=query.list();
  Map<byte[],Statistics> byteIdMap=new HashMap<>();
  byte[] currentDefDimId=null;
  Map<String,String> dims=null;
  for (  Map<String,Object> row : rows) {
    byte[] defDimId=(byte[])row.get(""String_Node_Str"");
    String defName=(String)row.get(""String_Node_Str"");
    String dimName=(String)row.get(""String_Node_Str"");
    String dimValue=(String)row.get(""String_Node_Str"");
    if (defDimId == null || !Arrays.equals(currentDefDimId,defDimId)) {
      currentDefDimId=defDimId;
      dims=new HashMap<>();
      dims.put(dimName,dimValue);
      Statistics statistics=new Statistics();
      statistics.setName(defName);
      statistics.setDimensions(dims);
      byteIdMap.put(currentDefDimId,statistics);
    }
 else {
      dims.put(dimName,dimValue);
    }
  }
  bytes.add(currentDefDimId);
  return byteIdMap;
}",0.9908256880733946
168650,"public void metricQueriesBuildJoinClauseForTest3(){
  String expectedResult=""String_Node_Str"";
  Map<String,String> dimsMap=null;
  assertEquals(expectedResult,MetricQueries.buildJoinClauseFor(dimsMap));
}","public void metricQueriesBuildJoinClauseForTest3(){
  String expectedResult=""String_Node_Str"";
  Map<String,String> dimsMap=null;
  assertEquals(expectedResult,MetricQueries.buildJoinClauseFor(dimsMap,TABLE_TO_JOIN_DIMENSIONS_ON));
}",0.9360730593607306
168651,"public void metricQueriesBuildJoinClauseForTest2(){
  String expectedResult=""String_Node_Str"";
  Map<String,String> dimsMap=new HashMap<>();
  assertEquals(expectedResult,MetricQueries.buildJoinClauseFor(dimsMap));
}","public void metricQueriesBuildJoinClauseForTest2(){
  String expectedResult=""String_Node_Str"";
  Map<String,String> dimsMap=new HashMap<>();
  assertEquals(expectedResult,MetricQueries.buildJoinClauseFor(dimsMap,TABLE_TO_JOIN_DIMENSIONS_ON));
}",0.9391304347826088
168652,"public void metricQueriesBuildJoinClauseForTest1(){
  String expectedResult=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Map<String,String> dimsMap=new HashMap<>();
  dimsMap.put(""String_Node_Str"",""String_Node_Str"");
  dimsMap.put(""String_Node_Str"",""String_Node_Str"");
  String s=MetricQueries.buildJoinClauseFor(dimsMap);
  assertEquals(expectedResult,s);
}","public void metricQueriesBuildJoinClauseForTest1(){
  String expectedResult=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Map<String,String> dimsMap=new HashMap<>();
  dimsMap.put(""String_Node_Str"",""String_Node_Str"");
  dimsMap.put(""String_Node_Str"",""String_Node_Str"");
  String s=MetricQueries.buildJoinClauseFor(dimsMap,TABLE_TO_JOIN_DIMENSIONS_ON);
  assertEquals(expectedResult,s);
}",0.9671361502347418
168653,"private AlarmStateHistory getAlarmStateHistory(Map<String,Object> row){
  AlarmStateHistory alarmStateHistory=new AlarmStateHistory();
  Date date;
  try {
    date=parseTimestamp(((Timestamp)row.get(""String_Node_Str"")).toString() + ""String_Node_Str"");
  }
 catch (  ParseException e) {
    logger.error(""String_Node_Str"",e);
    return null;
  }
  DateTime dateTime=new DateTime(date.getTime(),DateTimeZone.UTC);
  alarmStateHistory.setTimestamp(dateTime);
  alarmStateHistory.setAlarmId((String)row.get(""String_Node_Str""));
  List<MetricDefinition> metricDefinitionList;
  try {
    metricDefinitionList=this.objectMapper.readValue((String)row.get(""String_Node_Str""),METRICS_TYPE);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    metricDefinitionList=new ArrayList<>();
  }
  alarmStateHistory.setMetrics(metricDefinitionList);
  alarmStateHistory.setOldState(AlarmState.valueOf((String)row.get(""String_Node_Str"")));
  alarmStateHistory.setNewState(AlarmState.valueOf((String)row.get(""String_Node_Str"")));
  alarmStateHistory.setReason((String)row.get(""String_Node_Str""));
  alarmStateHistory.setReasonData((String)row.get(""String_Node_Str""));
  List<AlarmTransitionSubAlarm> subAlarmList;
  try {
    subAlarmList=this.objectMapper.readValue((String)row.get(""String_Node_Str""),SUB_ALARMS_TYPE);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    subAlarmList=new ArrayList<>();
  }
  alarmStateHistory.setSubAlarms(subAlarmList);
  return alarmStateHistory;
}","private AlarmStateHistory getAlarmStateHistory(Map<String,Object> row){
  AlarmStateHistory alarmStateHistory=new AlarmStateHistory();
  Date date;
  try {
    date=parseTimestamp(row.get(""String_Node_Str"").toString() + ""String_Node_Str"");
  }
 catch (  ParseException e) {
    logger.error(""String_Node_Str"",e);
    return null;
  }
  DateTime dateTime=new DateTime(date.getTime(),DateTimeZone.UTC);
  alarmStateHistory.setTimestamp(dateTime);
  alarmStateHistory.setAlarmId((String)row.get(""String_Node_Str""));
  List<MetricDefinition> metricDefinitionList;
  try {
    metricDefinitionList=this.objectMapper.readValue((String)row.get(""String_Node_Str""),METRICS_TYPE);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    metricDefinitionList=new ArrayList<>();
  }
  alarmStateHistory.setMetrics(metricDefinitionList);
  alarmStateHistory.setOldState(AlarmState.valueOf((String)row.get(""String_Node_Str"")));
  alarmStateHistory.setNewState(AlarmState.valueOf((String)row.get(""String_Node_Str"")));
  alarmStateHistory.setReason((String)row.get(""String_Node_Str""));
  alarmStateHistory.setReasonData((String)row.get(""String_Node_Str""));
  List<AlarmTransitionSubAlarm> subAlarmList;
  try {
    subAlarmList=this.objectMapper.readValue((String)row.get(""String_Node_Str""),SUB_ALARMS_TYPE);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    subAlarmList=new ArrayList<>();
  }
  alarmStateHistory.setSubAlarms(subAlarmList);
  return alarmStateHistory;
}",0.9956796277833168
168654,"private Date parseTimestamp(String timestampString) throws ParseException {
  try {
    return this.simpleDateFormat.parse(timestampString);
  }
 catch (  ParseException pe) {
    return this.oldSimpleDateFormat.parse(timestampString);
  }
}","private Date parseTimestamp(String timestampString) throws ParseException {
  try {
    return this.simpleDateFormat.parse(timestampString);
  }
 catch (  ParseException pe0) {
    try {
      return this.simpleDateFormatOneMilli.parse(timestampString);
    }
 catch (    ParseException pe1) {
      return this.oldSimpleDateFormat.parse(timestampString);
    }
  }
}",0.7697368421052632
168655,"private Alarm findAlarm(String tenantId,String alarmId,Handle h){
  final String sql=String.format(ALARM_SQL,""String_Node_Str"",""String_Node_Str"");
  final List<Map<String,Object>> rows=h.createQuery(sql).bind(""String_Node_Str"",alarmId).bind(""String_Node_Str"",tenantId).list();
  if (rows.isEmpty()) {
    throw new EntityNotFoundException(""String_Node_Str"",alarmId);
  }
  return createAlarms(tenantId,rows).get(0);
}","private Alarm findAlarm(String tenantId,String alarmId,Handle h){
  final String sql=String.format(FIND_ALARM_BY_ID_SQL,""String_Node_Str"",""String_Node_Str"");
  final List<Map<String,Object>> rows=h.createQuery(sql).bind(""String_Node_Str"",alarmId).bind(""String_Node_Str"",tenantId).list();
  if (rows.isEmpty()) {
    throw new EntityNotFoundException(""String_Node_Str"",alarmId);
  }
  return createAlarms(tenantId,rows).get(0);
}",0.98698224852071
168656,"@Override public List<Alarm> find(String tenantId,String alarmDefId,String metricName,Map<String,String> metricDimensions,AlarmState state,String lifecycleState,String link,DateTime stateUpdatedStart,String offset,int limit,boolean enforceLimit){
  try (Handle h=db.open()){
    StringBuilder sbWhere=new StringBuilder();
    if (alarmDefId != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (metricName != null) {
      sbWhere.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      buildJoinClauseFor(metricDimensions,sbWhere);
      sbWhere.append(""String_Node_Str"");
    }
    if (state != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (lifecycleState != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (link != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (stateUpdatedStart != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (offset != null) {
      sbWhere.append(""String_Node_Str"");
    }
    String limitPart=""String_Node_Str"";
    if (enforceLimit && limit > 0) {
      limitPart=""String_Node_Str"";
    }
    String sql=String.format(ALARM_SQL,sbWhere,limitPart);
    final Query<Map<String,Object>> q=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (alarmDefId != null) {
      q.bind(""String_Node_Str"",alarmDefId);
    }
    if (metricName != null) {
      q.bind(""String_Node_Str"",metricName);
    }
    if (state != null) {
      q.bind(""String_Node_Str"",state.name());
    }
    if (lifecycleState != null) {
      q.bind(""String_Node_Str"",lifecycleState);
    }
    if (link != null) {
      q.bind(""String_Node_Str"",link);
    }
    if (stateUpdatedStart != null) {
      q.bind(""String_Node_Str"",stateUpdatedStart.toString().replace('Z',' '));
    }
    if (offset != null) {
      q.bind(""String_Node_Str"",offset);
    }
    if (enforceLimit && limit > 0) {
      q.bind(""String_Node_Str"",limit + 1);
    }
    DimensionQueries.bindDimensionsToQuery(q,metricDimensions);
    final long start=System.currentTimeMillis();
    final List<Map<String,Object>> rows=q.list();
    logger.debug(""String_Node_Str"",System.currentTimeMillis() - start);
    final List<Alarm> alarms=createAlarms(tenantId,rows);
    return alarms;
  }
 }","@Override public List<Alarm> find(String tenantId,String alarmDefId,String metricName,Map<String,String> metricDimensions,AlarmState state,String lifecycleState,String link,DateTime stateUpdatedStart,String offset,int limit,boolean enforceLimit){
  StringBuilder sbWhere=new StringBuilder(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  if (alarmDefId != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (metricName != null) {
    sbWhere.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    buildJoinClauseFor(metricDimensions,sbWhere);
    sbWhere.append(""String_Node_Str"");
  }
 else   if (metricDimensions != null) {
    sbWhere.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    buildJoinClauseFor(metricDimensions,sbWhere);
    sbWhere.append(""String_Node_Str"");
  }
  if (state != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (lifecycleState != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (link != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (stateUpdatedStart != null) {
    sbWhere.append(""String_Node_Str"");
  }
  if (offset != null) {
    sbWhere.append(""String_Node_Str"");
  }
  sbWhere.append(""String_Node_Str"");
  if (enforceLimit && limit > 0) {
    sbWhere.append(""String_Node_Str"");
  }
  sbWhere.append(""String_Node_Str"");
  String sql=String.format(FIND_ALARMS_SQL,sbWhere);
  try (Handle h=db.open()){
    final Query<Map<String,Object>> q=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (alarmDefId != null) {
      q.bind(""String_Node_Str"",alarmDefId);
    }
    if (metricName != null) {
      q.bind(""String_Node_Str"",metricName);
    }
    if (state != null) {
      q.bind(""String_Node_Str"",state.name());
    }
    if (lifecycleState != null) {
      q.bind(""String_Node_Str"",lifecycleState);
    }
    if (link != null) {
      q.bind(""String_Node_Str"",link);
    }
    if (stateUpdatedStart != null) {
      q.bind(""String_Node_Str"",stateUpdatedStart.toString().replace('Z',' '));
    }
    if (offset != null) {
      q.bind(""String_Node_Str"",offset);
    }
    if (enforceLimit && limit > 0) {
      q.bind(""String_Node_Str"",limit + 1);
    }
    DimensionQueries.bindDimensionsToQuery(q,metricDimensions);
    final List<Map<String,Object>> rows=q.list();
    final List<Alarm> alarms=createAlarms(tenantId,rows);
    return alarms;
  }
 }",0.8260599793174768
168657,"@GET @Timed @Produces(MediaType.APPLICATION_JSON) public Object get(@Context UriInfo uriInfo,@HeaderParam(""String_Node_Str"") String tenantId,@QueryParam(""String_Node_Str"") String name,@QueryParam(""String_Node_Str"") String dimensionsStr,@QueryParam(""String_Node_Str"") String startTimeStr,@QueryParam(""String_Node_Str"") String endTimeStr,@QueryParam(""String_Node_Str"") String offset,@QueryParam(""String_Node_Str"") String limit,@QueryParam(""String_Node_Str"") Boolean mergeMetricsFlag) throws Exception {
  DateTime startTime=Validation.parseAndValidateDate(startTimeStr,""String_Node_Str"",true);
  DateTime endTime=Validation.parseAndValidateDate(endTimeStr,""String_Node_Str"",false);
  Validation.validateTimes(startTime,endTime);
  Map<String,String> dimensions=Strings.isNullOrEmpty(dimensionsStr) ? null : Validation.parseAndValidateNameAndDimensions(name,dimensionsStr,true);
  return Links.paginateMeasurements(this.persistUtils.getLimit(limit),repo.find(tenantId,name,dimensions,startTime,endTime,offset,this.persistUtils.getLimit(limit),mergeMetricsFlag),uriInfo);
}","@GET @Timed @Produces(MediaType.APPLICATION_JSON) public Object get(@Context UriInfo uriInfo,@HeaderParam(""String_Node_Str"") String tenantId,@QueryParam(""String_Node_Str"") String name,@QueryParam(""String_Node_Str"") String dimensionsStr,@QueryParam(""String_Node_Str"") String startTimeStr,@QueryParam(""String_Node_Str"") String endTimeStr,@QueryParam(""String_Node_Str"") String offset,@QueryParam(""String_Node_Str"") String limit,@QueryParam(""String_Node_Str"") String mergeMetricsFlag) throws Exception {
  DateTime startTime=Validation.parseAndValidateDate(startTimeStr,""String_Node_Str"",true);
  DateTime endTime=Validation.parseAndValidateDate(endTimeStr,""String_Node_Str"",false);
  Validation.validateTimes(startTime,endTime);
  Map<String,String> dimensions=Strings.isNullOrEmpty(dimensionsStr) ? null : Validation.parseAndValidateNameAndDimensions(name,dimensionsStr,true);
  Boolean mergeMetricsFlagBool=Validation.validateAndParseMergeMetricsFlag(mergeMetricsFlag);
  return Links.paginateMeasurements(this.persistUtils.getLimit(limit),repo.find(tenantId,name,dimensions,startTime,endTime,offset,this.persistUtils.getLimit(limit),mergeMetricsFlagBool),uriInfo);
}",0.9503355704697988
168658,"@GET @Timed @Produces(MediaType.APPLICATION_JSON) public Object get(@Context UriInfo uriInfo,@HeaderParam(""String_Node_Str"") String tenantId,@QueryParam(""String_Node_Str"") String name,@QueryParam(""String_Node_Str"") String dimensionsStr,@QueryParam(""String_Node_Str"") String startTimeStr,@QueryParam(""String_Node_Str"") String endTimeStr,@QueryParam(""String_Node_Str"") String statisticsStr,@DefaultValue(""String_Node_Str"") @QueryParam(""String_Node_Str"") String periodStr,@QueryParam(""String_Node_Str"") String offset,@QueryParam(""String_Node_Str"") String limit,@QueryParam(""String_Node_Str"") Boolean mergeMetricsFlag) throws Exception {
  DateTime startTime=Validation.parseAndValidateDate(startTimeStr,""String_Node_Str"",true);
  DateTime endTime=Validation.parseAndValidateDate(endTimeStr,""String_Node_Str"",false);
  Validation.validateTimes(startTime,endTime);
  Validation.validateNotNullOrEmpty(statisticsStr,""String_Node_Str"");
  int period=Validation.parseAndValidateNumber(periodStr,""String_Node_Str"");
  List<String> statistics=Validation.parseValidateAndNormalizeStatistics(COMMA_SPLITTER.split(statisticsStr));
  Map<String,String> dimensions=Strings.isNullOrEmpty(dimensionsStr) ? null : Validation.parseAndValidateNameAndDimensions(name,dimensionsStr,true);
  return Links.paginateStatistics(this.persistUtils.getLimit(limit),repo.find(tenantId,name,dimensions,startTime,endTime,statistics,period,offset,this.persistUtils.getLimit(limit),mergeMetricsFlag),uriInfo);
}","@GET @Timed @Produces(MediaType.APPLICATION_JSON) public Object get(@Context UriInfo uriInfo,@HeaderParam(""String_Node_Str"") String tenantId,@QueryParam(""String_Node_Str"") String name,@QueryParam(""String_Node_Str"") String dimensionsStr,@QueryParam(""String_Node_Str"") String startTimeStr,@QueryParam(""String_Node_Str"") String endTimeStr,@QueryParam(""String_Node_Str"") String statisticsStr,@DefaultValue(""String_Node_Str"") @QueryParam(""String_Node_Str"") String periodStr,@QueryParam(""String_Node_Str"") String offset,@QueryParam(""String_Node_Str"") String limit,@QueryParam(""String_Node_Str"") String mergeMetricsFlag) throws Exception {
  DateTime startTime=Validation.parseAndValidateDate(startTimeStr,""String_Node_Str"",true);
  DateTime endTime=Validation.parseAndValidateDate(endTimeStr,""String_Node_Str"",false);
  Validation.validateTimes(startTime,endTime);
  Validation.validateNotNullOrEmpty(statisticsStr,""String_Node_Str"");
  int period=Validation.parseAndValidateNumber(periodStr,""String_Node_Str"");
  List<String> statistics=Validation.parseValidateAndNormalizeStatistics(COMMA_SPLITTER.split(statisticsStr));
  Map<String,String> dimensions=Strings.isNullOrEmpty(dimensionsStr) ? null : Validation.parseAndValidateNameAndDimensions(name,dimensionsStr,true);
  Boolean mergeMetricsFlagBool=Validation.validateAndParseMergeMetricsFlag(mergeMetricsFlag);
  return Links.paginateStatistics(this.persistUtils.getLimit(limit),repo.find(tenantId,name,dimensions,startTime,endTime,statistics,period,offset,this.persistUtils.getLimit(limit),mergeMetricsFlagBool),uriInfo);
}",0.9635946211872746
168659,"public String privateRegionPart(String region) throws Exception {
  if (region == null || region.isEmpty()) {
    throw new Exception(String.format(""String_Node_Str"",region));
  }
  return ""String_Node_Str"" + ""String_Node_Str"" + sanitize(region) + ""String_Node_Str"";
}","public String privateRegionPart(String region){
  if (region == null || region.isEmpty()) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",region));
  }
  return ""String_Node_Str"" + ""String_Node_Str"" + sanitize(region) + ""String_Node_Str"";
}",0.7354596622889306
168660,"public String namePart(String name,boolean isRequired) throws Exception {
  if (isRequired) {
    if (name == null || name.isEmpty()) {
      throw new Exception(String.format(""String_Node_Str"",name));
    }
  }
  if (name == null || name.isEmpty()) {
    return ""String_Node_Str"";
  }
 else {
    return String.format(""String_Node_Str"",sanitize(name));
  }
}","public String namePart(String name,boolean isRequired){
  if (isRequired) {
    if (name == null || name.isEmpty()) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",name));
    }
  }
  if (name == null || name.isEmpty()) {
    return ""String_Node_Str"";
  }
 else {
    return String.format(""String_Node_Str"",sanitize(name));
  }
}",0.4335664335664335
168661,"public String publicTenantIdPart(String tenantId) throws Exception {
  if (tenantId == null || tenantId.isEmpty()) {
    throw new Exception(String.format(""String_Node_Str"",tenantId));
  }
  return ""String_Node_Str"" + ""String_Node_Str"" + sanitize(tenantId) + ""String_Node_Str"";
}","public String publicTenantIdPart(String tenantId){
  if (tenantId == null || tenantId.isEmpty()) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",tenantId));
  }
  return ""String_Node_Str"" + ""String_Node_Str"" + sanitize(tenantId) + ""String_Node_Str"";
}",0.7315315315315315
168662,"public int startIndex(String offset){
  if (offset == null || offset.isEmpty()) {
    return 0;
  }
  return Integer.parseInt(offset) + 1;
}","public int startIndex(String offset){
  if (offset == null || offset.isEmpty()) {
    return 0;
  }
  int intOffset;
  try {
    intOffset=Integer.parseInt(offset);
  }
 catch (  NumberFormatException nfe) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",offset));
  }
  if (intOffset < 0) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",offset));
  }
  return intOffset + 1;
}",0.469964664310954
168663,"public String privateTenantIdPart(String tenantId) throws Exception {
  if (tenantId == null || tenantId.isEmpty()) {
    throw new Exception(String.format(""String_Node_Str"",tenantId));
  }
  return ""String_Node_Str"" + ""String_Node_Str"" + sanitize(tenantId) + ""String_Node_Str"";
}","public String privateTenantIdPart(String tenantId){
  if (tenantId == null || tenantId.isEmpty()) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",tenantId));
  }
  return ""String_Node_Str"" + ""String_Node_Str"" + sanitize(tenantId) + ""String_Node_Str"";
}",0.7324955116696589
168664,"public String dimPart(Map<String,String> dims) throws Exception {
  StringBuilder sb=new StringBuilder();
  if (dims != null && !dims.isEmpty()) {
    for (    String k : dims.keySet()) {
      String v=dims.get(k);
      if (k != null && !k.isEmpty() && v != null && !v.isEmpty()) {
        sb.append(""String_Node_Str"" + sanitize(k) + ""String_Node_Str""+ ""String_Node_Str""+ sanitize(v)+ ""String_Node_Str"");
      }
    }
  }
  return sb.toString();
}","public String dimPart(Map<String,String> dims){
  StringBuilder sb=new StringBuilder();
  if (dims != null && !dims.isEmpty()) {
    for (    String k : dims.keySet()) {
      String v=dims.get(k);
      if (k != null && !k.isEmpty() && v != null && !v.isEmpty()) {
        sb.append(""String_Node_Str"" + sanitize(k) + ""String_Node_Str""+ ""String_Node_Str""+ sanitize(v)+ ""String_Node_Str"");
      }
    }
  }
  return sb.toString();
}",0.979591836734694
168665,"public String sanitize(final String taintedString) throws Exception {
  Matcher m=sqlUnsafePattern.matcher(taintedString);
  if (m.matches()) {
    throw new Exception(String.format(""String_Node_Str"" + ""String_Node_Str"",taintedString));
  }
  return taintedString;
}","public String sanitize(final String taintedString){
  Matcher m=sqlUnsafePattern.matcher(taintedString);
  if (m.matches()) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"" + ""String_Node_Str"",taintedString));
  }
  return taintedString;
}",0.2797731568998109
168666,"@GET @Timed @Produces(MediaType.APPLICATION_JSON) public Object get(@Context UriInfo uriInfo,@HeaderParam(""String_Node_Str"") String tenantId,@QueryParam(""String_Node_Str"") String name,@QueryParam(""String_Node_Str"") String dimensionsStr,@QueryParam(""String_Node_Str"") String startTimeStr,@QueryParam(""String_Node_Str"") String endTimeStr,@QueryParam(""String_Node_Str"") String offset,@QueryParam(""String_Node_Str"") String limit,@QueryParam(""String_Node_Str"") Boolean mergeMetricsFlag) throws Exception {
  DateTime startTime=Validation.parseAndValidateDate(startTimeStr,""String_Node_Str"",true);
  DateTime endTime=Validation.parseAndValidateDate(endTimeStr,""String_Node_Str"",false);
  Validation.validateTimes(startTime,endTime);
  Map<String,String> dimensions=Strings.isNullOrEmpty(dimensionsStr) ? null : Validation.parseAndValidateNameAndDimensions(name,dimensionsStr,true);
  return Links.paginateMeasurements(this.persistUtils.getLimit(limit),repo.find(tenantId,name,dimensions,startTime,endTime,offset,this.persistUtils.getLimit(limit),mergeMetricsFlag),uriInfo);
}","@GET @Timed @Produces(MediaType.APPLICATION_JSON) public Object get(@Context UriInfo uriInfo,@HeaderParam(""String_Node_Str"") String tenantId,@QueryParam(""String_Node_Str"") String name,@QueryParam(""String_Node_Str"") String dimensionsStr,@QueryParam(""String_Node_Str"") String startTimeStr,@QueryParam(""String_Node_Str"") String endTimeStr,@QueryParam(""String_Node_Str"") String offset,@QueryParam(""String_Node_Str"") String limit,@QueryParam(""String_Node_Str"") String mergeMetricsFlag) throws Exception {
  DateTime startTime=Validation.parseAndValidateDate(startTimeStr,""String_Node_Str"",true);
  DateTime endTime=Validation.parseAndValidateDate(endTimeStr,""String_Node_Str"",false);
  Validation.validateTimes(startTime,endTime);
  Map<String,String> dimensions=Strings.isNullOrEmpty(dimensionsStr) ? null : Validation.parseAndValidateNameAndDimensions(name,dimensionsStr,true);
  Boolean mergeMetricsFlagBool=Validation.validateAndParseMergeMetricsFlag(mergeMetricsFlag);
  return Links.paginateMeasurements(this.persistUtils.getLimit(limit),repo.find(tenantId,name,dimensions,startTime,endTime,offset,this.persistUtils.getLimit(limit),mergeMetricsFlagBool),uriInfo);
}",0.9503355704697988
168667,"@GET @Timed @Produces(MediaType.APPLICATION_JSON) public Object get(@Context UriInfo uriInfo,@HeaderParam(""String_Node_Str"") String tenantId,@QueryParam(""String_Node_Str"") String name,@QueryParam(""String_Node_Str"") String dimensionsStr,@QueryParam(""String_Node_Str"") String startTimeStr,@QueryParam(""String_Node_Str"") String endTimeStr,@QueryParam(""String_Node_Str"") String statisticsStr,@DefaultValue(""String_Node_Str"") @QueryParam(""String_Node_Str"") String periodStr,@QueryParam(""String_Node_Str"") String offset,@QueryParam(""String_Node_Str"") String limit,@QueryParam(""String_Node_Str"") Boolean mergeMetricsFlag) throws Exception {
  DateTime startTime=Validation.parseAndValidateDate(startTimeStr,""String_Node_Str"",true);
  DateTime endTime=Validation.parseAndValidateDate(endTimeStr,""String_Node_Str"",false);
  Validation.validateTimes(startTime,endTime);
  Validation.validateNotNullOrEmpty(statisticsStr,""String_Node_Str"");
  int period=Validation.parseAndValidateNumber(periodStr,""String_Node_Str"");
  List<String> statistics=Validation.parseValidateAndNormalizeStatistics(COMMA_SPLITTER.split(statisticsStr));
  Map<String,String> dimensions=Strings.isNullOrEmpty(dimensionsStr) ? null : Validation.parseAndValidateNameAndDimensions(name,dimensionsStr,true);
  return Links.paginateStatistics(this.persistUtils.getLimit(limit),repo.find(tenantId,name,dimensions,startTime,endTime,statistics,period,offset,this.persistUtils.getLimit(limit),mergeMetricsFlag),uriInfo);
}","@GET @Timed @Produces(MediaType.APPLICATION_JSON) public Object get(@Context UriInfo uriInfo,@HeaderParam(""String_Node_Str"") String tenantId,@QueryParam(""String_Node_Str"") String name,@QueryParam(""String_Node_Str"") String dimensionsStr,@QueryParam(""String_Node_Str"") String startTimeStr,@QueryParam(""String_Node_Str"") String endTimeStr,@QueryParam(""String_Node_Str"") String statisticsStr,@DefaultValue(""String_Node_Str"") @QueryParam(""String_Node_Str"") String periodStr,@QueryParam(""String_Node_Str"") String offset,@QueryParam(""String_Node_Str"") String limit,@QueryParam(""String_Node_Str"") String mergeMetricsFlag) throws Exception {
  DateTime startTime=Validation.parseAndValidateDate(startTimeStr,""String_Node_Str"",true);
  DateTime endTime=Validation.parseAndValidateDate(endTimeStr,""String_Node_Str"",false);
  Validation.validateTimes(startTime,endTime);
  Validation.validateNotNullOrEmpty(statisticsStr,""String_Node_Str"");
  int period=Validation.parseAndValidateNumber(periodStr,""String_Node_Str"");
  List<String> statistics=Validation.parseValidateAndNormalizeStatistics(COMMA_SPLITTER.split(statisticsStr));
  Map<String,String> dimensions=Strings.isNullOrEmpty(dimensionsStr) ? null : Validation.parseAndValidateNameAndDimensions(name,dimensionsStr,true);
  Boolean mergeMetricsFlagBool=Validation.validateAndParseMergeMetricsFlag(mergeMetricsFlag);
  return Links.paginateStatistics(this.persistUtils.getLimit(limit),repo.find(tenantId,name,dimensions,startTime,endTime,statistics,period,offset,this.persistUtils.getLimit(limit),mergeMetricsFlagBool),uriInfo);
}",0.9635946211872746
168668,"public String privateRegionPart(String region) throws Exception {
  if (region == null || region.isEmpty()) {
    throw new Exception(String.format(""String_Node_Str"",region));
  }
  return ""String_Node_Str"" + ""String_Node_Str"" + sanitize(region) + ""String_Node_Str"";
}","public String privateRegionPart(String region){
  if (region == null || region.isEmpty()) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",region));
  }
  return ""String_Node_Str"" + ""String_Node_Str"" + sanitize(region) + ""String_Node_Str"";
}",0.7354596622889306
168669,"public String namePart(String name,boolean isRequired) throws Exception {
  if (isRequired) {
    if (name == null || name.isEmpty()) {
      throw new Exception(String.format(""String_Node_Str"",name));
    }
  }
  if (name == null || name.isEmpty()) {
    return ""String_Node_Str"";
  }
 else {
    return String.format(""String_Node_Str"",sanitize(name));
  }
}","public String namePart(String name,boolean isRequired){
  if (isRequired) {
    if (name == null || name.isEmpty()) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",name));
    }
  }
  if (name == null || name.isEmpty()) {
    return ""String_Node_Str"";
  }
 else {
    return String.format(""String_Node_Str"",sanitize(name));
  }
}",0.4335664335664335
168670,"public String publicTenantIdPart(String tenantId) throws Exception {
  if (tenantId == null || tenantId.isEmpty()) {
    throw new Exception(String.format(""String_Node_Str"",tenantId));
  }
  return ""String_Node_Str"" + ""String_Node_Str"" + sanitize(tenantId) + ""String_Node_Str"";
}","public String publicTenantIdPart(String tenantId){
  if (tenantId == null || tenantId.isEmpty()) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",tenantId));
  }
  return ""String_Node_Str"" + ""String_Node_Str"" + sanitize(tenantId) + ""String_Node_Str"";
}",0.7315315315315315
168671,"public int startIndex(String offset){
  if (offset == null || offset.isEmpty()) {
    return 0;
  }
  return Integer.parseInt(offset) + 1;
}","public int startIndex(String offset){
  if (offset == null || offset.isEmpty()) {
    return 0;
  }
  int intOffset;
  try {
    intOffset=Integer.parseInt(offset);
  }
 catch (  NumberFormatException nfe) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",offset));
  }
  if (intOffset < 0) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",offset));
  }
  return intOffset + 1;
}",0.469964664310954
168672,"public String privateTenantIdPart(String tenantId) throws Exception {
  if (tenantId == null || tenantId.isEmpty()) {
    throw new Exception(String.format(""String_Node_Str"",tenantId));
  }
  return ""String_Node_Str"" + ""String_Node_Str"" + sanitize(tenantId) + ""String_Node_Str"";
}","public String privateTenantIdPart(String tenantId){
  if (tenantId == null || tenantId.isEmpty()) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",tenantId));
  }
  return ""String_Node_Str"" + ""String_Node_Str"" + sanitize(tenantId) + ""String_Node_Str"";
}",0.7324955116696589
168673,"public String dimPart(Map<String,String> dims) throws Exception {
  StringBuilder sb=new StringBuilder();
  if (dims != null && !dims.isEmpty()) {
    for (    String k : dims.keySet()) {
      String v=dims.get(k);
      if (k != null && !k.isEmpty() && v != null && !v.isEmpty()) {
        sb.append(""String_Node_Str"" + sanitize(k) + ""String_Node_Str""+ ""String_Node_Str""+ sanitize(v)+ ""String_Node_Str"");
      }
    }
  }
  return sb.toString();
}","public String dimPart(Map<String,String> dims){
  StringBuilder sb=new StringBuilder();
  if (dims != null && !dims.isEmpty()) {
    for (    String k : dims.keySet()) {
      String v=dims.get(k);
      if (k != null && !k.isEmpty() && v != null && !v.isEmpty()) {
        sb.append(""String_Node_Str"" + sanitize(k) + ""String_Node_Str""+ ""String_Node_Str""+ sanitize(v)+ ""String_Node_Str"");
      }
    }
  }
  return sb.toString();
}",0.979591836734694
168674,"public String sanitize(final String taintedString) throws Exception {
  Matcher m=sqlUnsafePattern.matcher(taintedString);
  if (m.matches()) {
    throw new Exception(String.format(""String_Node_Str"" + ""String_Node_Str"",taintedString));
  }
  return taintedString;
}","public String sanitize(final String taintedString){
  Matcher m=sqlUnsafePattern.matcher(taintedString);
  if (m.matches()) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"" + ""String_Node_Str"",taintedString));
  }
  return taintedString;
}",0.2797731568998109
168675,"public int getLimit(String limit){
  if (limit == null || limit.isEmpty()) {
    return this.maxQueryLimit;
  }
  int limitInt;
  try {
    limitInt=Integer.parseInt(limit);
  }
 catch (  NumberFormatException e) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",limit));
  }
  if (limitInt <= this.maxQueryLimit) {
    return limitInt;
  }
 else {
    return this.maxQueryLimit;
  }
}","public int getLimit(String limit){
  if (limit == null || limit.isEmpty()) {
    return this.maxQueryLimit;
  }
  int limitInt;
  try {
    limitInt=Integer.parseInt(limit);
  }
 catch (  NumberFormatException e) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",limit));
  }
  if (limitInt <= 0) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",limit));
  }
  if (limitInt <= this.maxQueryLimit) {
    return limitInt;
  }
 else {
    return this.maxQueryLimit;
  }
}",0.8840736728060672
168676,"public int getLimit(String limit){
  if (limit == null || limit.isEmpty()) {
    return this.maxQueryLimit;
  }
  int limitInt;
  try {
    limitInt=Integer.parseInt(limit);
  }
 catch (  NumberFormatException e) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",limit));
  }
  if (limitInt <= this.maxQueryLimit) {
    return limitInt;
  }
 else {
    return this.maxQueryLimit;
  }
}","public int getLimit(String limit){
  if (limit == null || limit.isEmpty()) {
    return this.maxQueryLimit;
  }
  int limitInt;
  try {
    limitInt=Integer.parseInt(limit);
  }
 catch (  NumberFormatException e) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",limit));
  }
  if (limitInt <= 0) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",limit));
  }
  if (limitInt <= this.maxQueryLimit) {
    return limitInt;
  }
 else {
    return this.maxQueryLimit;
  }
}",0.8840736728060672
168677,"@Override public List<AlarmStateHistory> find(String tenantId,Map<String,String> dimensions,DateTime startTime,@Nullable DateTime endTime,@Nullable String offset,int limit) throws Exception {
  List<String> alarmIdList=findAlarmIds(this.mysql,tenantId,dimensions);
  if (alarmIdList == null || alarmIdList.isEmpty()) {
    return new ArrayList<>();
  }
  String q=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",this.influxV9Utils.tenantIdPart(tenantId),this.influxV9Utils.startTimeEndTimePart(startTime,endTime),this.influxV9Utils.alarmIdsPart(alarmIdList),this.influxV9Utils.timeOffsetPart(offset),this.influxV9Utils.limitPart(limit));
  logger.debug(""String_Node_Str"",q);
  String r=this.influxV9RepoReader.read(q);
  Series series=this.objectMapper.readValue(r,Series.class);
  List<AlarmStateHistory> alarmStateHistoryList=alarmStateHistoryList(series);
  logger.debug(""String_Node_Str"",alarmStateHistoryList.size());
  return alarmStateHistoryList;
}","@Override public List<AlarmStateHistory> find(String tenantId,Map<String,String> dimensions,DateTime startTime,@Nullable DateTime endTime,@Nullable String offset,int limit) throws Exception {
  List<String> alarmIdList=findAlarmIds(this.mysql,tenantId,dimensions);
  if (alarmIdList == null || alarmIdList.isEmpty()) {
    return new ArrayList<>();
  }
  String q=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",this.influxV9Utils.publicTenantIdPart(tenantId),this.influxV9Utils.startTimeEndTimePart(startTime,endTime),this.influxV9Utils.alarmIdsPart(alarmIdList),this.influxV9Utils.timeOffsetPart(offset),this.influxV9Utils.limitPart(limit));
  logger.debug(""String_Node_Str"",q);
  String r=this.influxV9RepoReader.read(q);
  Series series=this.objectMapper.readValue(r,Series.class);
  List<AlarmStateHistory> alarmStateHistoryList=alarmStateHistoryList(series);
  logger.debug(""String_Node_Str"",alarmStateHistoryList.size());
  return alarmStateHistoryList;
}",0.996007984031936
168678,"@Override public List<AlarmStateHistory> findById(String tenantId,String alarmId,String offset,int limit) throws Exception {
  String q=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",this.influxV9Utils.tenantIdPart(tenantId),this.influxV9Utils.alarmIdPart(alarmId),this.influxV9Utils.timeOffsetPart(offset),this.influxV9Utils.limitPart(limit));
  logger.debug(""String_Node_Str"",q);
  String r=this.influxV9RepoReader.read(q);
  Series series=this.objectMapper.readValue(r,Series.class);
  List<AlarmStateHistory> alarmStateHistoryList=alarmStateHistoryList(series);
  logger.debug(""String_Node_Str"",alarmStateHistoryList.size());
  return alarmStateHistoryList;
}","@Override public List<AlarmStateHistory> findById(String tenantId,String alarmId,String offset,int limit) throws Exception {
  String q=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",this.influxV9Utils.publicTenantIdPart(tenantId),this.influxV9Utils.alarmIdPart(alarmId),this.influxV9Utils.timeOffsetPart(offset),this.influxV9Utils.limitPart(limit));
  logger.debug(""String_Node_Str"",q);
  String r=this.influxV9RepoReader.read(q);
  Series series=this.objectMapper.readValue(r,Series.class);
  List<AlarmStateHistory> alarmStateHistoryList=alarmStateHistoryList(series);
  logger.debug(""String_Node_Str"",alarmStateHistoryList.size());
  return alarmStateHistoryList;
}",0.9943661971830986
168679,"private String buildQuery(String tenantId,String name,Map<String,String> dimensions,DateTime startTime,DateTime endTime,String offset,int limit,Boolean mergeMetricsFlag) throws Exception {
  String q;
  if (Boolean.TRUE.equals(mergeMetricsFlag)) {
    q=String.format(""String_Node_Str"" + ""String_Node_Str"",this.influxV9Utils.namePart(name,true),this.influxV9Utils.tenantIdPart(tenantId),this.influxV9Utils.regionPart(this.region),this.influxV9Utils.startTimePart(startTime),this.influxV9Utils.dimPart(dimensions),this.influxV9Utils.endTimePart(endTime),this.influxV9Utils.timeOffsetPart(offset),this.influxV9Utils.limitPart(limit));
  }
 else {
    if (!this.influxV9MetricDefinitionRepo.isAtMostOneSeries(tenantId,name,dimensions)) {
      throw new IllegalArgumentException(this.influxV9Utils.getMultipleMetricsErrorMsg());
    }
    q=String.format(""String_Node_Str"" + ""String_Node_Str"",this.influxV9Utils.namePart(name,true),this.influxV9Utils.tenantIdPart(tenantId),this.influxV9Utils.regionPart(this.region),this.influxV9Utils.startTimePart(startTime),this.influxV9Utils.dimPart(dimensions),this.influxV9Utils.endTimePart(endTime),this.influxV9Utils.timeOffsetPart(offset),this.influxV9Utils.groupByPart(),this.influxV9Utils.limitPart(limit));
  }
  logger.debug(""String_Node_Str"",q);
  return q;
}","private String buildQuery(String tenantId,String name,Map<String,String> dimensions,DateTime startTime,DateTime endTime,String offset,int limit,Boolean mergeMetricsFlag) throws Exception {
  String q;
  if (Boolean.TRUE.equals(mergeMetricsFlag)) {
    q=String.format(""String_Node_Str"" + ""String_Node_Str"",this.influxV9Utils.namePart(name,true),this.influxV9Utils.privateTenantIdPart(tenantId),this.influxV9Utils.privateRegionPart(this.region),this.influxV9Utils.startTimePart(startTime),this.influxV9Utils.dimPart(dimensions),this.influxV9Utils.endTimePart(endTime),this.influxV9Utils.timeOffsetPart(offset),this.influxV9Utils.limitPart(limit));
  }
 else {
    if (!this.influxV9MetricDefinitionRepo.isAtMostOneSeries(tenantId,name,dimensions)) {
      throw new IllegalArgumentException(this.influxV9Utils.getMultipleMetricsErrorMsg());
    }
    q=String.format(""String_Node_Str"" + ""String_Node_Str"",this.influxV9Utils.namePart(name,true),this.influxV9Utils.privateTenantIdPart(tenantId),this.influxV9Utils.privateRegionPart(this.region),this.influxV9Utils.startTimePart(startTime),this.influxV9Utils.dimPart(dimensions),this.influxV9Utils.endTimePart(endTime),this.influxV9Utils.timeOffsetPart(offset),this.influxV9Utils.groupByPart(),this.influxV9Utils.limitPart(limit));
  }
  logger.debug(""String_Node_Str"",q);
  return q;
}",0.9863429438543247
168680,"@Override public List<MetricName> findNames(String tenantId,Map<String,String> dimensions,String offset,int limit) throws Exception {
  int startIndex=this.influxV9Utils.startIndex(offset);
  String q=String.format(""String_Node_Str"" + ""String_Node_Str"",this.influxV9Utils.tenantIdPart(tenantId),this.influxV9Utils.regionPart(this.region),this.influxV9Utils.dimPart(dimensions),this.influxV9Utils.limitPart(limit),this.influxV9Utils.offsetPart(startIndex));
  logger.debug(""String_Node_Str"",q);
  String r=this.influxV9RepoReader.read(q);
  Series series=this.objectMapper.readValue(r,Series.class);
  List<MetricName> metricNameList=metricNameList(series,startIndex);
  logger.debug(""String_Node_Str"",metricNameList.size());
  return metricNameList;
}","@Override public List<MetricName> findNames(String tenantId,Map<String,String> dimensions,String offset,int limit) throws Exception {
  int startIndex=this.influxV9Utils.startIndex(offset);
  String q=String.format(""String_Node_Str"" + ""String_Node_Str"",this.influxV9Utils.privateTenantIdPart(tenantId),this.influxV9Utils.privateRegionPart(this.region),this.influxV9Utils.dimPart(dimensions),this.influxV9Utils.limitPart(limit),this.influxV9Utils.offsetPart(startIndex));
  logger.debug(""String_Node_Str"",q);
  String r=this.influxV9RepoReader.read(q);
  Series series=this.objectMapper.readValue(r,Series.class);
  List<MetricName> metricNameList=metricNameList(series,startIndex);
  logger.debug(""String_Node_Str"",metricNameList.size());
  return metricNameList;
}",0.9881266490765171
168681,"@Override public List<MetricDefinition> find(String tenantId,String name,Map<String,String> dimensions,String offset,int limit) throws Exception {
  int startIndex=this.influxV9Utils.startIndex(offset);
  String q=String.format(""String_Node_Str"" + ""String_Node_Str"",this.influxV9Utils.namePart(name,false),this.influxV9Utils.tenantIdPart(tenantId),this.influxV9Utils.regionPart(this.region),this.influxV9Utils.dimPart(dimensions),this.influxV9Utils.limitPart(limit),this.influxV9Utils.offsetPart(startIndex));
  logger.debug(""String_Node_Str"",q);
  String r=this.influxV9RepoReader.read(q);
  Series series=this.objectMapper.readValue(r,Series.class);
  List<MetricDefinition> metricDefinitionList=metricDefinitionList(series,startIndex);
  logger.debug(""String_Node_Str"",metricDefinitionList.size());
  return metricDefinitionList;
}","@Override public List<MetricDefinition> find(String tenantId,String name,Map<String,String> dimensions,String offset,int limit) throws Exception {
  int startIndex=this.influxV9Utils.startIndex(offset);
  String q=String.format(""String_Node_Str"" + ""String_Node_Str"",this.influxV9Utils.namePart(name,false),this.influxV9Utils.privateTenantIdPart(tenantId),this.influxV9Utils.privateRegionPart(this.region),this.influxV9Utils.dimPart(dimensions),this.influxV9Utils.limitPart(limit),this.influxV9Utils.offsetPart(startIndex));
  logger.debug(""String_Node_Str"",q);
  String r=this.influxV9RepoReader.read(q);
  Series series=this.objectMapper.readValue(r,Series.class);
  List<MetricDefinition> metricDefinitionList=metricDefinitionList(series,startIndex);
  logger.debug(""String_Node_Str"",metricDefinitionList.size());
  return metricDefinitionList;
}",0.9892984542211652
168682,"boolean isAtMostOneSeries(String tenantId,String name,Map<String,String> dimensions) throws Exception {
  String q=String.format(""String_Node_Str"" + ""String_Node_Str"",this.influxV9Utils.namePart(name,false),this.influxV9Utils.tenantIdPart(tenantId),this.influxV9Utils.regionPart(this.region),this.influxV9Utils.dimPart(dimensions));
  logger.debug(""String_Node_Str"",q);
  String r=this.influxV9RepoReader.read(q);
  Series series=this.objectMapper.readValue(r,Series.class);
  List<MetricDefinition> metricDefinitionList=metricDefinitionList(series,0);
  logger.debug(""String_Node_Str"",metricDefinitionList.size());
  return metricDefinitionList.size() > 1 ? false : true;
}","boolean isAtMostOneSeries(String tenantId,String name,Map<String,String> dimensions) throws Exception {
  String q=String.format(""String_Node_Str"" + ""String_Node_Str"",this.influxV9Utils.namePart(name,false),this.influxV9Utils.privateTenantIdPart(tenantId),this.influxV9Utils.privateRegionPart(this.region),this.influxV9Utils.dimPart(dimensions));
  logger.debug(""String_Node_Str"",q);
  String r=this.influxV9RepoReader.read(q);
  Series series=this.objectMapper.readValue(r,Series.class);
  List<MetricDefinition> metricDefinitionList=metricDefinitionList(series,0);
  logger.debug(""String_Node_Str"",metricDefinitionList.size());
  return metricDefinitionList.size() > 1 ? false : true;
}",0.986784140969163
168683,"private String buildQuery(String tenantId,String name,Map<String,String> dimensions,DateTime startTime,DateTime endTime,List<String> statistics,int period,String offset,int limit,Boolean mergeMetricsFlag) throws Exception {
  String q;
  if (Boolean.TRUE.equals(mergeMetricsFlag)) {
    q=String.format(""String_Node_Str"" + ""String_Node_Str"",funcPart(statistics),this.influxV9Utils.namePart(name,true),this.influxV9Utils.tenantIdPart(tenantId),this.influxV9Utils.regionPart(this.region),this.influxV9Utils.startTimePart(startTime),this.influxV9Utils.dimPart(dimensions),this.influxV9Utils.endTimePart(endTime),this.influxV9Utils.timeOffsetPart(offset),this.influxV9Utils.periodPart(period),this.influxV9Utils.limitPart(limit));
  }
 else {
    if (!this.influxV9MetricDefinitionRepo.isAtMostOneSeries(tenantId,name,dimensions)) {
      throw new IllegalArgumentException(this.influxV9Utils.getMultipleMetricsErrorMsg());
    }
    q=String.format(""String_Node_Str"" + ""String_Node_Str"",funcPart(statistics),this.influxV9Utils.namePart(name,true),this.influxV9Utils.tenantIdPart(tenantId),this.influxV9Utils.regionPart(this.region),this.influxV9Utils.startTimePart(startTime),this.influxV9Utils.dimPart(dimensions),this.influxV9Utils.endTimePart(endTime),this.influxV9Utils.timeOffsetPart(offset),this.influxV9Utils.periodPartWithGroupBy(period),this.influxV9Utils.limitPart(limit));
  }
  logger.debug(""String_Node_Str"",q);
  return q;
}","private String buildQuery(String tenantId,String name,Map<String,String> dimensions,DateTime startTime,DateTime endTime,List<String> statistics,int period,String offset,int limit,Boolean mergeMetricsFlag) throws Exception {
  String q;
  if (Boolean.TRUE.equals(mergeMetricsFlag)) {
    q=String.format(""String_Node_Str"" + ""String_Node_Str"",funcPart(statistics),this.influxV9Utils.namePart(name,true),this.influxV9Utils.privateTenantIdPart(tenantId),this.influxV9Utils.privateRegionPart(this.region),this.influxV9Utils.startTimePart(startTime),this.influxV9Utils.dimPart(dimensions),this.influxV9Utils.endTimePart(endTime),this.influxV9Utils.timeOffsetPart(offset),this.influxV9Utils.periodPart(period),this.influxV9Utils.limitPart(limit));
  }
 else {
    if (!this.influxV9MetricDefinitionRepo.isAtMostOneSeries(tenantId,name,dimensions)) {
      throw new IllegalArgumentException(this.influxV9Utils.getMultipleMetricsErrorMsg());
    }
    q=String.format(""String_Node_Str"" + ""String_Node_Str"",funcPart(statistics),this.influxV9Utils.namePart(name,true),this.influxV9Utils.privateTenantIdPart(tenantId),this.influxV9Utils.privateRegionPart(this.region),this.influxV9Utils.startTimePart(startTime),this.influxV9Utils.dimPart(dimensions),this.influxV9Utils.endTimePart(endTime),this.influxV9Utils.timeOffsetPart(offset),this.influxV9Utils.periodPartWithGroupBy(period),this.influxV9Utils.limitPart(limit));
  }
  logger.debug(""String_Node_Str"",q);
  return q;
}",0.9875776397515528
168684,"@SuppressWarnings(""String_Node_Str"") @Override public List<AlarmDefinition> find(String tenantId,String name,Map<String,String> dimensions,String offset,int limit){
  try (Handle h=db.open()){
    String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    StringBuilder sbWhere=new StringBuilder();
    if (name != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (offset != null) {
      sbWhere.append(""String_Node_Str"");
    }
    String sql=String.format(query,SubAlarmDefinitionQueries.buildJoinClauseFor(dimensions),sbWhere);
    Query<?> q=h.createQuery(sql);
    q.bind(""String_Node_Str"",tenantId);
    if (name != null) {
      q.bind(""String_Node_Str"",name);
    }
    if (offset != null) {
      q.bind(""String_Node_Str"",offset);
    }
    q.bind(""String_Node_Str"",limit + 1);
    q.registerMapper(new AlarmDefinitionMapper());
    q=q.mapTo(AlarmDefinition.class);
    DimensionQueries.bindDimensionsToQuery(q,dimensions);
    List<AlarmDefinition> resultSet=(List<AlarmDefinition>)q.list();
    return resultSet;
  }
 }","@SuppressWarnings(""String_Node_Str"") @Override public List<AlarmDefinition> find(String tenantId,String name,Map<String,String> dimensions,String offset,int limit){
  try (Handle h=db.open()){
    String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    StringBuilder sbWhere=new StringBuilder();
    if (name != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (offset != null) {
      sbWhere.append(""String_Node_Str"");
    }
    String limitPart=""String_Node_Str"";
    if (limit > 0) {
      limitPart=""String_Node_Str"";
    }
    String sql=String.format(query,SubAlarmDefinitionQueries.buildJoinClauseFor(dimensions),sbWhere,limitPart);
    Query<?> q=h.createQuery(sql);
    q.bind(""String_Node_Str"",tenantId);
    if (name != null) {
      q.bind(""String_Node_Str"",name);
    }
    if (offset != null) {
      q.bind(""String_Node_Str"",offset);
    }
    if (limit > 0) {
      q.bind(""String_Node_Str"",limit + 1);
    }
    q.registerMapper(new AlarmDefinitionMapper());
    q=q.mapTo(AlarmDefinition.class);
    DimensionQueries.bindDimensionsToQuery(q,dimensions);
    List<AlarmDefinition> resultSet=(List<AlarmDefinition>)q.list();
    return resultSet;
  }
 }",0.9466918714555764
168685,"@Override public List<Alarm> find(String tenantId,String alarmDefId,String metricName,Map<String,String> metricDimensions,AlarmState state,String offset,int limit,boolean enforceLimit){
  try (Handle h=db.open()){
    StringBuilder sbWhere=new StringBuilder();
    if (alarmDefId != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (metricName != null) {
      sbWhere.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      buildJoinClauseFor(metricDimensions,sbWhere);
      sbWhere.append(""String_Node_Str"");
    }
    if (state != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (offset != null) {
      sbWhere.append(""String_Node_Str"");
    }
    String limitPart=""String_Node_Str"";
    if (enforceLimit) {
      limitPart=""String_Node_Str"";
    }
    String sql=String.format(ALARM_SQL,sbWhere,limitPart);
    final Query<Map<String,Object>> q=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (alarmDefId != null) {
      q.bind(""String_Node_Str"",alarmDefId);
    }
    if (metricName != null) {
      q.bind(""String_Node_Str"",metricName);
    }
    if (state != null) {
      q.bind(""String_Node_Str"",state.name());
    }
    if (offset != null) {
      q.bind(""String_Node_Str"",offset);
    }
    if (enforceLimit) {
      q.bind(""String_Node_Str"",limit + 1);
    }
    DimensionQueries.bindDimensionsToQuery(q,metricDimensions);
    final long start=System.currentTimeMillis();
    final List<Map<String,Object>> rows=q.list();
    logger.debug(""String_Node_Str"",System.currentTimeMillis() - start);
    final List<Alarm> alarms=createAlarms(tenantId,rows);
    return alarms;
  }
 }","@Override public List<Alarm> find(String tenantId,String alarmDefId,String metricName,Map<String,String> metricDimensions,AlarmState state,String offset,int limit,boolean enforceLimit){
  try (Handle h=db.open()){
    StringBuilder sbWhere=new StringBuilder();
    if (alarmDefId != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (metricName != null) {
      sbWhere.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      buildJoinClauseFor(metricDimensions,sbWhere);
      sbWhere.append(""String_Node_Str"");
    }
    if (state != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (offset != null) {
      sbWhere.append(""String_Node_Str"");
    }
    String limitPart=""String_Node_Str"";
    if (enforceLimit && limit > 0) {
      limitPart=""String_Node_Str"";
    }
    String sql=String.format(ALARM_SQL,sbWhere,limitPart);
    final Query<Map<String,Object>> q=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (alarmDefId != null) {
      q.bind(""String_Node_Str"",alarmDefId);
    }
    if (metricName != null) {
      q.bind(""String_Node_Str"",metricName);
    }
    if (state != null) {
      q.bind(""String_Node_Str"",state.name());
    }
    if (offset != null) {
      q.bind(""String_Node_Str"",offset);
    }
    if (enforceLimit && limit > 0) {
      q.bind(""String_Node_Str"",limit + 1);
    }
    DimensionQueries.bindDimensionsToQuery(q,metricDimensions);
    final long start=System.currentTimeMillis();
    final List<Map<String,Object>> rows=q.list();
    logger.debug(""String_Node_Str"",System.currentTimeMillis() - start);
    final List<Alarm> alarms=createAlarms(tenantId,rows);
    return alarms;
  }
 }",0.9925158318940702
168686,"@Override public List<NotificationMethod> find(String tenantId,String offset,int limit){
  try (Handle h=db.open()){
    String rawQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    String offsetPart=""String_Node_Str"";
    if (offset != null) {
      offsetPart=""String_Node_Str"";
    }
    String query=String.format(rawQuery,offsetPart);
    Query<?> q=h.createQuery(query);
    q.bind(""String_Node_Str"",tenantId);
    if (offset != null) {
      q.bind(""String_Node_Str"",offset);
    }
    q.bind(""String_Node_Str"",limit + 1);
    return (List<NotificationMethod>)q.map(new BeanMapper<NotificationMethod>(NotificationMethod.class)).list();
  }
 }","@Override public List<NotificationMethod> find(String tenantId,String offset,int limit){
  try (Handle h=db.open()){
    String rawQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    String offsetPart=""String_Node_Str"";
    if (offset != null) {
      offsetPart=""String_Node_Str"";
    }
    String limitPart=""String_Node_Str"";
    if (limit > 0) {
      limitPart=""String_Node_Str"";
    }
    String query=String.format(rawQuery,offsetPart,limitPart);
    Query<?> q=h.createQuery(query);
    q.bind(""String_Node_Str"",tenantId);
    if (offset != null) {
      q.bind(""String_Node_Str"",offset);
    }
    if (limit > 0) {
      q.bind(""String_Node_Str"",limit + 1);
    }
    return q.map(new BeanMapper<>(NotificationMethod.class)).list();
  }
 }",0.856743535988819
168687,"private List<MetricDefinition> buildMetricDefList(List<Serie> result,String offset) throws Exception {
  String decodedOffset=urlDecodeUTF8(offset);
  List<MetricDefinition> metricDefinitionList=new ArrayList<>();
  for (  Serie serie : result) {
    for (    Map<String,Object> point : serie.getRows()) {
      String encodedMetricName=(String)point.get(""String_Node_Str"");
      if (offset != null) {
        if (encodedMetricName.compareTo(decodedOffset) <= 0) {
          continue;
        }
      }
      Utils.SerieNameDecoder serieNameDecoder;
      try {
        serieNameDecoder=new Utils.SerieNameDecoder(encodedMetricName);
      }
 catch (      Utils.SerieNameDecodeException e) {
        logger.warn(""String_Node_Str"",point.get(""String_Node_Str""),e);
        continue;
      }
      MetricDefinition metricDefinition=new MetricDefinition(serieNameDecoder.getMetricName(),serieNameDecoder.getDimensions());
      metricDefinition.setId(urlEncodeUTF8(encodedMetricName));
      metricDefinitionList.add(metricDefinition);
      if (offset != null) {
        if (metricDefinitionList.size() >= Paged.LIMIT) {
          return metricDefinitionList;
        }
      }
    }
  }
  return metricDefinitionList;
}","private List<MetricDefinition> buildMetricDefList(List<Serie> result,String offset) throws Exception {
  String decodedOffset=null;
  if (offset != null) {
    decodedOffset=urlDecodeUTF8(offset);
  }
  List<MetricDefinition> metricDefinitionList=new ArrayList<>();
  for (  Serie serie : result) {
    for (    Map<String,Object> point : serie.getRows()) {
      String encodedMetricName=(String)point.get(""String_Node_Str"");
      if (offset != null) {
        if (encodedMetricName.compareTo(decodedOffset) <= 0) {
          continue;
        }
      }
      Utils.SerieNameDecoder serieNameDecoder;
      try {
        serieNameDecoder=new Utils.SerieNameDecoder(encodedMetricName);
      }
 catch (      Utils.SerieNameDecodeException e) {
        logger.warn(""String_Node_Str"",point.get(""String_Node_Str""),e);
        continue;
      }
      MetricDefinition metricDefinition=new MetricDefinition(serieNameDecoder.getMetricName(),serieNameDecoder.getDimensions());
      metricDefinition.setId(urlEncodeUTF8(encodedMetricName));
      metricDefinitionList.add(metricDefinition);
      if (offset != null) {
        if (metricDefinitionList.size() >= Paged.LIMIT) {
          return metricDefinitionList;
        }
      }
    }
  }
  return metricDefinitionList;
}",0.9790996784565916
168688,"/** 
 * Patches the alarm for the   {@code tenantId} and {@code alarmId} to the state of the{@code fields}.
 * @throws EntityNotFoundException if the alarm cannot be found
 * @throws InvalidEntityException if one of the actions cannot be found
 */
public Alarm patch(String tenantId,String alarmId,AlarmState state){
  Alarm alarm=repo.findById(alarmId);
  state=state == null ? alarm.getState() : state;
  updateInternal(tenantId,alarm,alarm.getState(),state);
  alarm.setState(state);
  return alarm;
}","/** 
 * Patches the alarm for the   {@code tenantId} and {@code alarmId} to the state of the{@code fields}.
 * @throws EntityNotFoundException if the alarm cannot be found
 * @throws InvalidEntityException if one of the actions cannot be found
 */
public Alarm patch(String tenantId,String alarmId,AlarmState state){
  Alarm alarm=repo.findById(tenantId,alarmId);
  state=state == null ? alarm.getState() : state;
  updateInternal(tenantId,alarm,alarm.getState(),state);
  alarm.setState(state);
  return alarm;
}",0.991150442477876
168689,"/** 
 * Updates the alarmed metric for the   {@code tenantId} and {@code alarmedMetricId} to the state ofthe  {@code command}.
 * @throws EntityNotFoundException if the alarmed metric cannot be found
 */
public Alarm update(String tenantId,String alarmId,UpdateAlarmCommand command){
  Alarm alarm=repo.findById(alarmId);
  updateInternal(tenantId,alarm,alarm.getState(),command.state);
  alarm.setState(command.state);
  return alarm;
}","/** 
 * Updates the alarmed metric for the   {@code tenantId} and {@code alarmedMetricId} to the state ofthe  {@code command}.
 * @throws EntityNotFoundException if the alarmed metric cannot be found
 */
public Alarm update(String tenantId,String alarmId,UpdateAlarmCommand command){
  Alarm alarm=repo.findById(tenantId,alarmId);
  updateInternal(tenantId,alarm,alarm.getState(),command.state);
  alarm.setState(command.state);
  return alarm;
}",0.9898074745186864
168690,"private void updateInternal(String tenantId,Alarm alarm,AlarmState oldState,AlarmState newState){
  try {
    LOG.debug(""String_Node_Str"",alarm.getId(),tenantId);
    repo.update(tenantId,alarm.getId(),newState);
    AlarmDefinition alarmDef=alarmDefRepo.findById(tenantId,alarm.getAlarmDefinition().getId());
    List<MetricDefinition> metrics=repo.findMetrics(alarm.getId());
    Map<String,AlarmSubExpression> subAlarms=repo.findAlarmSubExpressions(alarm.getId());
    String event=Serialization.toJson(new AlarmUpdatedEvent(alarm.getId(),alarm.getAlarmDefinition().getId(),tenantId,metrics,subAlarms,newState,oldState));
    producer.send(new KeyedMessage<>(config.eventsTopic,tenantId,event));
    if (!oldState.equals(newState)) {
      event=Serialization.toJson(new AlarmStateTransitionedEvent(tenantId,alarm.getId(),alarmDef.getId(),alarm.getMetrics(),alarmDef.getName(),alarmDef.getDescription(),oldState,newState,alarmDef.getSeverity(),alarmDef.isActionsEnabled(),stateChangeReasonFor(oldState,newState),System.currentTimeMillis() / 1000));
      producer.send(new KeyedMessage<>(config.alarmStateTransitionsTopic,tenantId,event));
    }
  }
 catch (  Exception e) {
    throw Exceptions.uncheck(e,""String_Node_Str"",tenantId);
  }
}","private void updateInternal(String tenantId,Alarm alarm,AlarmState oldState,AlarmState newState){
  try {
    LOG.debug(""String_Node_Str"",alarm.getId(),tenantId);
    repo.update(tenantId,alarm.getId(),newState);
    AlarmDefinition alarmDef=alarmDefRepo.findById(tenantId,alarm.getAlarmDefinition().getId());
    List<MetricDefinition> metrics=repo.findMetrics(tenantId,alarm.getId());
    Map<String,AlarmSubExpression> subAlarms=repo.findAlarmSubExpressions(alarm.getId());
    String event=Serialization.toJson(new AlarmUpdatedEvent(alarm.getId(),alarm.getAlarmDefinition().getId(),tenantId,metrics,subAlarms,newState,oldState));
    producer.send(new KeyedMessage<>(config.eventsTopic,tenantId,event));
    if (!oldState.equals(newState)) {
      event=Serialization.toJson(new AlarmStateTransitionedEvent(tenantId,alarm.getId(),alarmDef.getId(),alarm.getMetrics(),alarmDef.getName(),alarmDef.getDescription(),oldState,newState,alarmDef.getSeverity(),alarmDef.isActionsEnabled(),stateChangeReasonFor(oldState,newState),System.currentTimeMillis() / 1000));
      producer.send(new KeyedMessage<>(config.alarmStateTransitionsTopic,tenantId,event));
    }
  }
 catch (  Exception e) {
    throw Exceptions.uncheck(e,""String_Node_Str"",tenantId);
  }
}",0.9963927855711424
168691,"/** 
 * Deletes the alarm identified by the   {@code alarmId}.
 * @throws EntityNotFoundException if the alarm cannot be found
 */
public void delete(String tenantId,String alarmId){
  Alarm alarm=repo.findById(alarmId);
  Map<String,AlarmSubExpression> subAlarmMetricDefs=repo.findAlarmSubExpressions(alarmId);
  List<MetricDefinition> metrics=repo.findMetrics(alarmId);
  repo.deleteById(alarmId);
  String event=Serialization.toJson(new AlarmDeletedEvent(tenantId,alarmId,metrics,alarm.getAlarmDefinition().getId(),subAlarmMetricDefs));
  producer.send(new KeyedMessage<>(config.eventsTopic,tenantId,event));
}","/** 
 * Deletes the alarm identified by the   {@code alarmId}.
 * @throws EntityNotFoundException if the alarm cannot be found
 */
public void delete(String tenantId,String alarmId){
  Alarm alarm=repo.findById(tenantId,alarmId);
  Map<String,AlarmSubExpression> subAlarmMetricDefs=repo.findAlarmSubExpressions(alarmId);
  List<MetricDefinition> metrics=repo.findMetrics(tenantId,alarmId);
  repo.deleteById(tenantId,alarmId);
  String event=Serialization.toJson(new AlarmDeletedEvent(tenantId,alarmId,metrics,alarm.getAlarmDefinition().getId(),subAlarmMetricDefs));
  producer.send(new KeyedMessage<>(config.eventsTopic,tenantId,event));
}",0.9784517158818836
168692,"/** 
 * @throws EntityNotFoundException if an alarm cannot be found for the {@code id}
 */
Alarm findById(String id);","/** 
 * @throws EntityNotFoundException if an alarm cannot be found for the {@code id}
 */
Alarm findById(String tenantId,String id);",0.936
168693,List<MetricDefinition> findMetrics(String alarmId);,"List<MetricDefinition> findMetrics(String tenantId,String alarmId);",0.864406779661017
168694,"/** 
 * Deletes all alarms associated with the   {@code id}.
 */
void deleteById(String id);","/** 
 * Deletes all alarms associated with the   {@code id}.
 */
void deleteById(String tenantId,String id);",0.92
168695,"@Override public List<MetricDefinition> findMetrics(String alarmId){
  try (Handle h=db.open()){
    return findMetrics(h,alarmId);
  }
 }","@Override public List<MetricDefinition> findMetrics(String tenantId,String alarmId){
  try (Handle h=db.open()){
    return findMetrics(h,tenantId,alarmId);
  }
 }",0.9169435215946844
168696,"@Override public List<Alarm> find(String tenantId,String alarmDefId,String metricName,Map<String,String> metricDimensions,AlarmState state){
  try (Handle h=db.open()){
    StringBuilder sbWhere=new StringBuilder();
    if (alarmDefId != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (metricName != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (state != null) {
      sbWhere.append(""String_Node_Str"");
    }
    String sql=String.format(ALARM_SQL,buildJoinClauseFor(metricDimensions),sbWhere);
    Query<?> q=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (alarmDefId != null) {
      q.bind(""String_Node_Str"",alarmDefId);
    }
    if (metricName != null) {
      q.bind(""String_Node_Str"",metricName);
    }
    if (state != null) {
      q.bind(""String_Node_Str"",state.name());
    }
    Query<Alarm> qAlarm=q.map(new AlarmMapper());
    DimensionQueries.bindDimensionsToQuery(q,metricDimensions);
    List<Alarm> alarms=qAlarm.list();
    for (    Alarm alarm : alarms) {
      alarm.setMetrics(findMetrics(h,alarm.getId()));
    }
    return alarms;
  }
 }","@Override public List<Alarm> find(String tenantId,String alarmDefId,String metricName,Map<String,String> metricDimensions,AlarmState state){
  try (Handle h=db.open()){
    StringBuilder sbWhere=new StringBuilder();
    if (alarmDefId != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (metricName != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (state != null) {
      sbWhere.append(""String_Node_Str"");
    }
    String sql=String.format(ALARM_SQL,buildJoinClauseFor(metricDimensions),sbWhere);
    Query<?> q=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (alarmDefId != null) {
      q.bind(""String_Node_Str"",alarmDefId);
    }
    if (metricName != null) {
      q.bind(""String_Node_Str"",metricName);
    }
    if (state != null) {
      q.bind(""String_Node_Str"",state.name());
    }
    Query<Alarm> qAlarm=q.map(new AlarmMapper());
    DimensionQueries.bindDimensionsToQuery(q,metricDimensions);
    List<Alarm> alarms=qAlarm.list();
    for (    Alarm alarm : alarms) {
      alarm.setMetrics(findMetrics(h,tenantId,alarm.getId()));
    }
    return alarms;
  }
 }",0.9887539361223572
168697,"@Override public Alarm findById(String alarmId){
  try (Handle h=db.open()){
    Alarm alarm=h.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").bind(""String_Node_Str"",alarmId).map(new AlarmMapper()).first();
    if (alarm == null)     throw new EntityNotFoundException(""String_Node_Str"",alarmId);
    alarm.setMetrics(findMetrics(h,alarm.getId()));
    return alarm;
  }
 }","@Override public Alarm findById(String tenantId,String alarmId){
  try (Handle h=db.open()){
    Alarm alarm=h.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").bind(""String_Node_Str"",alarmId).bind(""String_Node_Str"",tenantId).map(new AlarmMapper()).first();
    if (alarm == null)     throw new EntityNotFoundException(""String_Node_Str"",alarmId);
    alarm.setMetrics(findMetrics(h,tenantId,alarm.getId()));
    return alarm;
  }
 }",0.9316037735849056
168698,"@Override public void deleteById(String id){
  try (Handle h=db.open()){
    h.execute(""String_Node_Str"",id);
  }
 }","@Override public void deleteById(String tenantId,String id){
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try (Handle h=db.open()){
    h.execute(sql,tenantId,id);
  }
 }",0.5063938618925832
168699,"@GET @Timed @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",response=Alarm.class) @ApiResponses(value={@ApiResponse(code=400,message=""String_Node_Str""),@ApiResponse(code=404,message=""String_Node_Str"")}) public Alarm get(@ApiParam(value=""String_Node_Str"",required=true) @Context UriInfo uriInfo,@HeaderParam(""String_Node_Str"") String tenantId,@PathParam(""String_Node_Str"") String alarm_id){
  return fixAlarmLinks(uriInfo,repo.findById(alarm_id));
}","@GET @Timed @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",response=Alarm.class) @ApiResponses(value={@ApiResponse(code=400,message=""String_Node_Str""),@ApiResponse(code=404,message=""String_Node_Str"")}) public Alarm get(@ApiParam(value=""String_Node_Str"",required=true) @Context UriInfo uriInfo,@HeaderParam(""String_Node_Str"") String tenantId,@PathParam(""String_Node_Str"") String alarm_id){
  return fixAlarmLinks(uriInfo,repo.findById(tenantId,alarm_id));
}",0.9910979228486648
168700,"@Test(groups=""String_Node_Str"") public void shouldDelete(){
  repo.deleteById(""String_Node_Str"");
  try {
    assertNull(repo.findById(""String_Node_Str""));
    fail();
  }
 catch (  EntityNotFoundException expected) {
  }
}","@Test(groups=""String_Node_Str"") public void shouldDelete(){
  repo.deleteById(""String_Node_Str"",""String_Node_Str"");
  try {
    assertNull(repo.findById(""String_Node_Str"",""String_Node_Str""));
    fail();
  }
 catch (  EntityNotFoundException expected) {
  }
}",0.925311203319502
168701,"@Test(groups=""String_Node_Str"") public void shouldFindById(){
  db=new DBI(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  handle=db.open();
  repo=new AlarmMySqlRepositoryImpl(db);
  beforeMethod();
  final String alarmId=""String_Node_Str"";
  Alarm alarm=repo.findById(alarmId);
  assertEquals(alarm.getId(),alarmId);
  assertEquals(alarm.getAlarmDefinition().getId(),""String_Node_Str"");
  assertEquals(alarm.getState(),AlarmState.OK);
  assertEquals(alarm.getMetrics(),Arrays.asList(new MetricDefinition(""String_Node_Str"",ImmutableMap.<String,String>builder().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").build()),new MetricDefinition(""String_Node_Str"",ImmutableMap.<String,String>builder().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").build())));
}","@Test(groups=""String_Node_Str"") public void shouldFindById(){
  db=new DBI(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  handle=db.open();
  repo=new AlarmMySqlRepositoryImpl(db);
  beforeMethod();
  final String alarmId=""String_Node_Str"";
  Alarm alarm=repo.findById(""String_Node_Str"",alarmId);
  assertEquals(alarm.getId(),alarmId);
  assertEquals(alarm.getAlarmDefinition().getId(),""String_Node_Str"");
  assertEquals(alarm.getState(),AlarmState.OK);
  assertEquals(alarm.getMetrics(),Arrays.asList(new MetricDefinition(""String_Node_Str"",ImmutableMap.<String,String>builder().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").build()),new MetricDefinition(""String_Node_Str"",ImmutableMap.<String,String>builder().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").build())));
}",0.9893364928909952
168702,"/** 
 * Patches the alarm for the   {@code tenantId} and {@code alarmId} to the state of the{@code fields}.
 * @throws EntityNotFoundException if the alarm cannot be found
 * @throws InvalidEntityException if one of the actions cannot be found
 */
public Alarm patch(String tenantId,String alarmId,AlarmState state){
  Alarm alarm=repo.findById(alarmId);
  state=state == null ? alarm.getState() : state;
  updateInternal(tenantId,alarm,alarm.getState(),state);
  alarm.setState(state);
  return alarm;
}","/** 
 * Patches the alarm for the   {@code tenantId} and {@code alarmId} to the state of the{@code fields}.
 * @throws EntityNotFoundException if the alarm cannot be found
 * @throws InvalidEntityException if one of the actions cannot be found
 */
public Alarm patch(String tenantId,String alarmId,AlarmState state){
  Alarm alarm=repo.findById(tenantId,alarmId);
  state=state == null ? alarm.getState() : state;
  updateInternal(tenantId,alarm,alarm.getState(),state);
  alarm.setState(state);
  return alarm;
}",0.991150442477876
168703,"/** 
 * Updates the alarmed metric for the   {@code tenantId} and {@code alarmedMetricId} to the state ofthe  {@code command}.
 * @throws EntityNotFoundException if the alarmed metric cannot be found
 */
public Alarm update(String tenantId,String alarmId,UpdateAlarmCommand command){
  Alarm alarm=repo.findById(alarmId);
  updateInternal(tenantId,alarm,alarm.getState(),command.state);
  alarm.setState(command.state);
  return alarm;
}","/** 
 * Updates the alarmed metric for the   {@code tenantId} and {@code alarmedMetricId} to the state ofthe  {@code command}.
 * @throws EntityNotFoundException if the alarmed metric cannot be found
 */
public Alarm update(String tenantId,String alarmId,UpdateAlarmCommand command){
  Alarm alarm=repo.findById(tenantId,alarmId);
  updateInternal(tenantId,alarm,alarm.getState(),command.state);
  alarm.setState(command.state);
  return alarm;
}",0.9898074745186864
168704,"private void updateInternal(String tenantId,Alarm alarm,AlarmState oldState,AlarmState newState){
  try {
    LOG.debug(""String_Node_Str"",alarm.getId(),tenantId);
    repo.update(tenantId,alarm.getId(),newState);
    AlarmDefinition alarmDef=alarmDefRepo.findById(tenantId,alarm.getAlarmDefinition().getId());
    List<MetricDefinition> metrics=repo.findMetrics(alarm.getId());
    Map<String,AlarmSubExpression> subAlarms=repo.findAlarmSubExpressions(alarm.getId());
    String event=Serialization.toJson(new AlarmUpdatedEvent(alarm.getId(),alarm.getAlarmDefinition().getId(),tenantId,metrics,subAlarms,newState,oldState));
    producer.send(new KeyedMessage<>(config.eventsTopic,tenantId,event));
    if (!oldState.equals(newState)) {
      event=Serialization.toJson(new AlarmStateTransitionedEvent(tenantId,alarm.getId(),alarmDef.getId(),alarm.getMetrics(),alarmDef.getName(),alarmDef.getDescription(),oldState,newState,alarmDef.getSeverity(),alarmDef.isActionsEnabled(),stateChangeReasonFor(oldState,newState),System.currentTimeMillis() / 1000));
      producer.send(new KeyedMessage<>(config.alarmStateTransitionsTopic,tenantId,event));
    }
  }
 catch (  Exception e) {
    throw Exceptions.uncheck(e,""String_Node_Str"",tenantId);
  }
}","private void updateInternal(String tenantId,Alarm alarm,AlarmState oldState,AlarmState newState){
  try {
    LOG.debug(""String_Node_Str"",alarm.getId(),tenantId);
    repo.update(tenantId,alarm.getId(),newState);
    AlarmDefinition alarmDef=alarmDefRepo.findById(tenantId,alarm.getAlarmDefinition().getId());
    List<MetricDefinition> metrics=repo.findMetrics(tenantId,alarm.getId());
    Map<String,AlarmSubExpression> subAlarms=repo.findAlarmSubExpressions(alarm.getId());
    String event=Serialization.toJson(new AlarmUpdatedEvent(alarm.getId(),alarm.getAlarmDefinition().getId(),tenantId,metrics,subAlarms,newState,oldState));
    producer.send(new KeyedMessage<>(config.eventsTopic,tenantId,event));
    if (!oldState.equals(newState)) {
      event=Serialization.toJson(new AlarmStateTransitionedEvent(tenantId,alarm.getId(),alarmDef.getId(),alarm.getMetrics(),alarmDef.getName(),alarmDef.getDescription(),oldState,newState,alarmDef.getSeverity(),alarmDef.isActionsEnabled(),stateChangeReasonFor(oldState,newState),System.currentTimeMillis() / 1000));
      producer.send(new KeyedMessage<>(config.alarmStateTransitionsTopic,tenantId,event));
    }
  }
 catch (  Exception e) {
    throw Exceptions.uncheck(e,""String_Node_Str"",tenantId);
  }
}",0.9963927855711424
168705,"/** 
 * Deletes the alarm identified by the   {@code alarmId}.
 * @throws EntityNotFoundException if the alarm cannot be found
 */
public void delete(String tenantId,String alarmId){
  Alarm alarm=repo.findById(alarmId);
  Map<String,AlarmSubExpression> subAlarmMetricDefs=repo.findAlarmSubExpressions(alarmId);
  List<MetricDefinition> metrics=repo.findMetrics(alarmId);
  repo.deleteById(alarmId);
  String event=Serialization.toJson(new AlarmDeletedEvent(tenantId,alarmId,metrics,alarm.getAlarmDefinition().getId(),subAlarmMetricDefs));
  producer.send(new KeyedMessage<>(config.eventsTopic,tenantId,event));
}","/** 
 * Deletes the alarm identified by the   {@code alarmId}.
 * @throws EntityNotFoundException if the alarm cannot be found
 */
public void delete(String tenantId,String alarmId){
  Alarm alarm=repo.findById(tenantId,alarmId);
  Map<String,AlarmSubExpression> subAlarmMetricDefs=repo.findAlarmSubExpressions(alarmId);
  List<MetricDefinition> metrics=repo.findMetrics(tenantId,alarmId);
  repo.deleteById(tenantId,alarmId);
  String event=Serialization.toJson(new AlarmDeletedEvent(tenantId,alarmId,metrics,alarm.getAlarmDefinition().getId(),subAlarmMetricDefs));
  producer.send(new KeyedMessage<>(config.eventsTopic,tenantId,event));
}",0.9784517158818836
168706,"/** 
 * @throws EntityNotFoundException if an alarm cannot be found for the {@code id}
 */
Alarm findById(String id);","/** 
 * @throws EntityNotFoundException if an alarm cannot be found for the {@code id}
 */
Alarm findById(String tenantId,String id);",0.936
168707,List<MetricDefinition> findMetrics(String alarmId);,"List<MetricDefinition> findMetrics(String tenantId,String alarmId);",0.864406779661017
168708,"/** 
 * Deletes all alarms associated with the   {@code id}.
 */
void deleteById(String id);","/** 
 * Deletes all alarms associated with the   {@code id}.
 */
void deleteById(String tenantId,String id);",0.92
168709,"@Override public List<MetricDefinition> findMetrics(String alarmId){
  try (Handle h=db.open()){
    return findMetrics(h,alarmId);
  }
 }","@Override public List<MetricDefinition> findMetrics(String tenantId,String alarmId){
  try (Handle h=db.open()){
    return findMetrics(h,tenantId,alarmId);
  }
 }",0.9169435215946844
168710,"@Override public List<Alarm> find(String tenantId,String alarmDefId,String metricName,Map<String,String> metricDimensions,AlarmState state){
  try (Handle h=db.open()){
    StringBuilder sbWhere=new StringBuilder();
    if (alarmDefId != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (metricName != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (state != null) {
      sbWhere.append(""String_Node_Str"");
    }
    String sql=String.format(ALARM_SQL,buildJoinClauseFor(metricDimensions),sbWhere);
    Query<?> q=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (alarmDefId != null) {
      q.bind(""String_Node_Str"",alarmDefId);
    }
    if (metricName != null) {
      q.bind(""String_Node_Str"",metricName);
    }
    if (state != null) {
      q.bind(""String_Node_Str"",state.name());
    }
    Query<Alarm> qAlarm=q.map(new AlarmMapper());
    DimensionQueries.bindDimensionsToQuery(q,metricDimensions);
    List<Alarm> alarms=qAlarm.list();
    for (    Alarm alarm : alarms) {
      alarm.setMetrics(findMetrics(h,alarm.getId()));
    }
    return alarms;
  }
 }","@Override public List<Alarm> find(String tenantId,String alarmDefId,String metricName,Map<String,String> metricDimensions,AlarmState state){
  try (Handle h=db.open()){
    StringBuilder sbWhere=new StringBuilder();
    if (alarmDefId != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (metricName != null) {
      sbWhere.append(""String_Node_Str"");
    }
    if (state != null) {
      sbWhere.append(""String_Node_Str"");
    }
    String sql=String.format(ALARM_SQL,buildJoinClauseFor(metricDimensions),sbWhere);
    Query<?> q=h.createQuery(sql).bind(""String_Node_Str"",tenantId);
    if (alarmDefId != null) {
      q.bind(""String_Node_Str"",alarmDefId);
    }
    if (metricName != null) {
      q.bind(""String_Node_Str"",metricName);
    }
    if (state != null) {
      q.bind(""String_Node_Str"",state.name());
    }
    Query<Alarm> qAlarm=q.map(new AlarmMapper());
    DimensionQueries.bindDimensionsToQuery(q,metricDimensions);
    List<Alarm> alarms=qAlarm.list();
    for (    Alarm alarm : alarms) {
      alarm.setMetrics(findMetrics(h,tenantId,alarm.getId()));
    }
    return alarms;
  }
 }",0.9887539361223572
168711,"@Override public Alarm findById(String alarmId){
  try (Handle h=db.open()){
    Alarm alarm=h.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").bind(""String_Node_Str"",alarmId).map(new AlarmMapper()).first();
    if (alarm == null)     throw new EntityNotFoundException(""String_Node_Str"",alarmId);
    alarm.setMetrics(findMetrics(h,alarm.getId()));
    return alarm;
  }
 }","@Override public Alarm findById(String tenantId,String alarmId){
  try (Handle h=db.open()){
    Alarm alarm=h.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").bind(""String_Node_Str"",alarmId).bind(""String_Node_Str"",tenantId).map(new AlarmMapper()).first();
    if (alarm == null)     throw new EntityNotFoundException(""String_Node_Str"",alarmId);
    alarm.setMetrics(findMetrics(h,tenantId,alarm.getId()));
    return alarm;
  }
 }",0.9316037735849056
168712,"@Override public void deleteById(String id){
  try (Handle h=db.open()){
    h.execute(""String_Node_Str"",id);
  }
 }","@Override public void deleteById(String tenantId,String id){
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try (Handle h=db.open()){
    h.execute(sql,tenantId,id);
  }
 }",0.5063938618925832
168713,"@GET @Timed @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",response=Alarm.class) @ApiResponses(value={@ApiResponse(code=400,message=""String_Node_Str""),@ApiResponse(code=404,message=""String_Node_Str"")}) public Alarm get(@ApiParam(value=""String_Node_Str"",required=true) @Context UriInfo uriInfo,@HeaderParam(""String_Node_Str"") String tenantId,@PathParam(""String_Node_Str"") String alarm_id){
  return fixAlarmLinks(uriInfo,repo.findById(alarm_id));
}","@GET @Timed @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",response=Alarm.class) @ApiResponses(value={@ApiResponse(code=400,message=""String_Node_Str""),@ApiResponse(code=404,message=""String_Node_Str"")}) public Alarm get(@ApiParam(value=""String_Node_Str"",required=true) @Context UriInfo uriInfo,@HeaderParam(""String_Node_Str"") String tenantId,@PathParam(""String_Node_Str"") String alarm_id){
  return fixAlarmLinks(uriInfo,repo.findById(tenantId,alarm_id));
}",0.9910979228486648
168714,"@Test(groups=""String_Node_Str"") public void shouldDelete(){
  repo.deleteById(""String_Node_Str"");
  try {
    assertNull(repo.findById(""String_Node_Str""));
    fail();
  }
 catch (  EntityNotFoundException expected) {
  }
}","@Test(groups=""String_Node_Str"") public void shouldDelete(){
  repo.deleteById(""String_Node_Str"",""String_Node_Str"");
  try {
    assertNull(repo.findById(""String_Node_Str"",""String_Node_Str""));
    fail();
  }
 catch (  EntityNotFoundException expected) {
  }
}",0.925311203319502
168715,"@Test(groups=""String_Node_Str"") public void shouldFindById(){
  db=new DBI(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  handle=db.open();
  repo=new AlarmMySqlRepositoryImpl(db);
  beforeMethod();
  final String alarmId=""String_Node_Str"";
  Alarm alarm=repo.findById(alarmId);
  assertEquals(alarm.getId(),alarmId);
  assertEquals(alarm.getAlarmDefinition().getId(),""String_Node_Str"");
  assertEquals(alarm.getState(),AlarmState.OK);
  assertEquals(alarm.getMetrics(),Arrays.asList(new MetricDefinition(""String_Node_Str"",ImmutableMap.<String,String>builder().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").build()),new MetricDefinition(""String_Node_Str"",ImmutableMap.<String,String>builder().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").build())));
}","@Test(groups=""String_Node_Str"") public void shouldFindById(){
  db=new DBI(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  handle=db.open();
  repo=new AlarmMySqlRepositoryImpl(db);
  beforeMethod();
  final String alarmId=""String_Node_Str"";
  Alarm alarm=repo.findById(""String_Node_Str"",alarmId);
  assertEquals(alarm.getId(),alarmId);
  assertEquals(alarm.getAlarmDefinition().getId(),""String_Node_Str"");
  assertEquals(alarm.getState(),AlarmState.OK);
  assertEquals(alarm.getMetrics(),Arrays.asList(new MetricDefinition(""String_Node_Str"",ImmutableMap.<String,String>builder().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").build()),new MetricDefinition(""String_Node_Str"",ImmutableMap.<String,String>builder().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").build())));
}",0.9893364928909952
168716,"@Override public Collection<Measurements> find(String tenantId,String name,Map<String,String> dimensions,DateTime startTime,@Nullable DateTime endTime) throws Exception {
  String serieNameRegex=buildSerieNameRegex(tenantId,name,dimensions);
  String timePart=Utils.WhereClauseBuilder.buildTimePart(startTime,endTime);
  String query=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",serieNameRegex,timePart);
  logger.debug(""String_Node_Str"",query);
  List<Serie> result=this.influxDB.Query(this.config.influxDB.getName(),query,TimeUnit.MILLISECONDS);
  List<Measurements> measurementsList=new LinkedList<>();
  for (  Serie serie : result) {
    Utils.SerieNameConverter serieNameConverter=new Utils.SerieNameConverter(serie.getName());
    Measurements measurements=new Measurements();
    measurements.setName(serieNameConverter.getMetricName());
    measurements.setDimensions(serieNameConverter.getDimensions());
    List<Object[]> valObjArryList=new LinkedList<>();
    final String[] colNames=serie.getColumns();
    final List<Map<String,Object>> rows=serie.getRows();
    for (    Map<String,Object> row : rows) {
      Object[] objArry=new Object[3];
      objArry[0]=((Double)row.get(colNames[1])).longValue();
      Double timeDouble=(Double)row.get(colNames[0]);
      objArry[1]=DATETIME_FORMATTER.print(timeDouble.longValue());
      objArry[2]=(Double)row.get(colNames[2]);
      valObjArryList.add(objArry);
    }
    measurements.setMeasurements(valObjArryList);
    measurementsList.add(measurements);
  }
  return measurementsList;
}","@Override public Collection<Measurements> find(String tenantId,String name,Map<String,String> dimensions,DateTime startTime,@Nullable DateTime endTime) throws Exception {
  String serieNameRegex=buildSerieNameRegex(tenantId,name,dimensions);
  String timePart=Utils.WhereClauseBuilder.buildTimePart(startTime,endTime);
  String query=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",serieNameRegex,timePart);
  logger.debug(""String_Node_Str"",query);
  List<Measurements> measurementsList=new LinkedList<>();
  List<Serie> result=null;
  try {
    result=this.influxDB.Query(this.config.influxDB.getName(),query,TimeUnit.MILLISECONDS);
  }
 catch (  RuntimeException e) {
    if (e.getMessage().equals(""String_Node_Str"")) {
      return measurementsList;
    }
 else {
      logger.error(""String_Node_Str"",e);
      throw e;
    }
  }
  for (  Serie serie : result) {
    String serieName=serie.getName();
    if (!serieNameMatcher(serieName)) {
      logger.warn(""String_Node_Str"",serieName);
      continue;
    }
    Utils.SerieNameConverter serieNameConverter=new Utils.SerieNameConverter(serieName);
    Measurements measurements=new Measurements();
    measurements.setName(serieNameConverter.getMetricName());
    measurements.setDimensions(serieNameConverter.getDimensions());
    List<Object[]> valObjArryList=new LinkedList<>();
    final String[] colNames=serie.getColumns();
    final List<Map<String,Object>> rows=serie.getRows();
    for (    Map<String,Object> row : rows) {
      Object[] objArry=new Object[3];
      objArry[0]=((Double)row.get(colNames[1])).longValue();
      Double timeDouble=(Double)row.get(colNames[0]);
      objArry[1]=DATETIME_FORMATTER.print(timeDouble.longValue());
      objArry[2]=(Double)row.get(colNames[2]);
      valObjArryList.add(objArry);
    }
    measurements.setMeasurements(valObjArryList);
    measurementsList.add(measurements);
  }
  return measurementsList;
}",0.8095508811824901
168717,"@Override public List<MetricDefinition> find(String tenantId,String name,Map<String,String> dimensions) throws Exception {
  String serieNameRegex=buildSerieNameRegex(tenantId,name,dimensions);
  String query=String.format(""String_Node_Str"",serieNameRegex);
  logger.debug(""String_Node_Str"",query);
  List<MetricDefinition> metricDefinitionList=new ArrayList<>();
  List<Serie> result=this.influxDB.Query(this.config.influxDB.getName(),query,TimeUnit.SECONDS);
  for (  Serie serie : result) {
    for (    Map point : serie.getRows()) {
      String serieName=(String)point.get(""String_Node_Str"");
      Matcher m=p.matcher(serieName);
      if (!m.matches()) {
        logger.warn(""String_Node_Str"",serieName);
        continue;
      }
      Utils.SerieNameConverter serieNameConverter=new Utils.SerieNameConverter(serieName);
      MetricDefinition metricDefinition=new MetricDefinition(serieNameConverter.getMetricName(),serieNameConverter.getDimensions());
      metricDefinitionList.add(metricDefinition);
    }
  }
  return metricDefinitionList;
}","@Override public List<MetricDefinition> find(String tenantId,String name,Map<String,String> dimensions) throws Exception {
  String serieNameRegex=buildSerieNameRegex(tenantId,name,dimensions);
  String query=String.format(""String_Node_Str"",serieNameRegex);
  logger.debug(""String_Node_Str"",query);
  List<MetricDefinition> metricDefinitionList=new ArrayList<>();
  List<Serie> result=this.influxDB.Query(this.config.influxDB.getName(),query,TimeUnit.SECONDS);
  for (  Serie serie : result) {
    for (    Map point : serie.getRows()) {
      String serieName=(String)point.get(""String_Node_Str"");
      if (!serieNameMatcher(serieName)) {
        logger.warn(""String_Node_Str"",serieName);
        continue;
      }
      Utils.SerieNameConverter serieNameConverter=new Utils.SerieNameConverter(serieName);
      MetricDefinition metricDefinition=new MetricDefinition(serieNameConverter.getMetricName(),serieNameConverter.getDimensions());
      metricDefinitionList.add(metricDefinition);
    }
  }
  return metricDefinitionList;
}",0.9664750957854408
168718,"@Override public List<Statistics> find(String tenantId,String name,Map<String,String> dimensions,DateTime startTime,@Nullable DateTime endTime,List<String> statistics,int period) throws Exception {
  String serieNameRegex=buildSerieNameRegex(tenantId,name,dimensions);
  String statsPart=buildStatsPart(statistics);
  String timePart=Utils.WhereClauseBuilder.buildTimePart(startTime,endTime);
  String periodPart=buildPeriodPart(period);
  String query=String.format(""String_Node_Str"",statsPart,serieNameRegex,timePart,periodPart);
  logger.debug(""String_Node_Str"",query);
  List<Serie> result=this.influxDB.Query(this.config.influxDB.getName(),query,TimeUnit.MILLISECONDS);
  List<Statistics> statisticsList=new LinkedList<Statistics>();
  for (  Serie serie : result) {
    Utils.SerieNameConverter serieNameConverter=new Utils.SerieNameConverter(serie.getName());
    Statistics statistic=new Statistics();
    statistic.setName(serieNameConverter.getMetricName());
    List<String> colNamesList=new LinkedList<>(statistics);
    colNamesList.add(0,""String_Node_Str"");
    statistic.setColumns(colNamesList);
    statistic.setDimensions(serieNameConverter.getDimensions());
    List<List<Object>> valObjArryArry=new LinkedList<List<Object>>();
    statistic.setStatistics(valObjArryArry);
    final String[] colNames=serie.getColumns();
    final List<Map<String,Object>> rows=serie.getRows();
    for (    Map<String,Object> row : rows) {
      List<Object> valObjArry=new ArrayList<>();
      Double timeDouble=(Double)row.get(colNames[0]);
      valObjArry.add(DATETIME_FORMATTER.print(timeDouble.longValue()));
      for (int j=1; j < statistics.size() + 1; j++) {
        valObjArry.add(row.get(colNames[j]));
      }
      valObjArryArry.add(valObjArry);
    }
    statisticsList.add(statistic);
  }
  return statisticsList;
}","@Override public List<Statistics> find(String tenantId,String name,Map<String,String> dimensions,DateTime startTime,@Nullable DateTime endTime,List<String> statistics,int period) throws Exception {
  String serieNameRegex=buildSerieNameRegex(tenantId,name,dimensions);
  String statsPart=buildStatsPart(statistics);
  String timePart=Utils.WhereClauseBuilder.buildTimePart(startTime,endTime);
  String periodPart=buildPeriodPart(period);
  String query=String.format(""String_Node_Str"",statsPart,serieNameRegex,timePart,periodPart);
  logger.debug(""String_Node_Str"",query);
  List<Statistics> statisticsList=new LinkedList<Statistics>();
  List<Serie> result=null;
  try {
    result=this.influxDB.Query(this.config.influxDB.getName(),query,TimeUnit.MILLISECONDS);
  }
 catch (  RuntimeException e) {
    if (e.getMessage().equals(""String_Node_Str"")) {
      return statisticsList;
    }
 else {
      logger.error(""String_Node_Str"",e);
      throw e;
    }
  }
  for (  Serie serie : result) {
    String serieName=serie.getName();
    if (!serieNameMatcher(serieName)) {
      logger.warn(""String_Node_Str"",serieName);
      continue;
    }
    Utils.SerieNameConverter serieNameConverter=new Utils.SerieNameConverter(serieName);
    Statistics statistic=new Statistics();
    statistic.setName(serieNameConverter.getMetricName());
    List<String> colNamesList=new LinkedList<>(statistics);
    colNamesList.add(0,""String_Node_Str"");
    statistic.setColumns(colNamesList);
    statistic.setDimensions(serieNameConverter.getDimensions());
    List<List<Object>> valObjArryArry=new LinkedList<List<Object>>();
    statistic.setStatistics(valObjArryArry);
    final String[] colNames=serie.getColumns();
    final List<Map<String,Object>> rows=serie.getRows();
    for (    Map<String,Object> row : rows) {
      List<Object> valObjArry=new ArrayList<>();
      Double timeDouble=(Double)row.get(colNames[0]);
      valObjArry.add(DATETIME_FORMATTER.print(timeDouble.longValue()));
      for (int j=1; j < statistics.size() + 1; j++) {
        valObjArry.add(row.get(colNames[j]));
      }
      valObjArryArry.add(valObjArry);
    }
    statisticsList.add(statistic);
  }
  return statisticsList;
}",0.8572136836886465
168719,"@Override public List<MetricDefinition> find(String tenantId,String name,Map<String,String> dimensions) throws Exception {
  String dimsPart=Utils.WhereClauseBuilder.buildDimsPart(dimensions);
  String query=String.format(""String_Node_Str"",Utils.SQLSanitizer.sanitize(tenantId),dimsPart);
  logger.debug(""String_Node_Str"",query);
  List<Serie> result=this.influxDB.Query(this.config.influxDB.getName(),query,TimeUnit.SECONDS);
  List<MetricDefinition> metricDefinitionList=new ArrayList<>();
  for (  Serie serie : result) {
    MetricDefinition metricDefinition=new MetricDefinition();
    metricDefinition.name=serie.getName();
    metricDefinition.setDimensions(dimensions == null ? new HashMap<String,String>() : dimensions);
    metricDefinitionList.add(metricDefinition);
  }
  return metricDefinitionList;
}","@Override public List<MetricDefinition> find(String tenantId,String name,Map<String,String> dimensions) throws Exception {
  String namePart=name == null ? ""String_Node_Str"" : Utils.SQLSanitizer.sanitize(name);
  List<MetricDefinition> metricDefinitionList=new ArrayList<>();
  if (dimensions == null || dimensions.isEmpty()) {
    String query=String.format(""String_Node_Str"",namePart);
    logger.debug(""String_Node_Str"",query);
    List<Serie> result=this.influxDB.Query(this.config.influxDB.getName(),query,TimeUnit.SECONDS);
    Map<TreeSet,List<String>> columnsToNamesMap=new HashMap<TreeSet,List<String>>();
    for (    Serie serie : result) {
      TreeSet<String> columnsSet=new TreeSet<String>();
      for (      String columnName : serie.getColumns()) {
        if (columnName.equalsIgnoreCase(""String_Node_Str"")) {
          continue;
        }
 else         if (columnName.equalsIgnoreCase(""String_Node_Str"")) {
          continue;
        }
 else         if (columnName.equalsIgnoreCase(""String_Node_Str"")) {
          continue;
        }
 else {
          columnsSet.add(columnName);
        }
      }
      if (columnsToNamesMap.containsKey(columnsSet)) {
        columnsToNamesMap.get(columnsSet).add(serie.getName());
      }
 else {
        List<String> nameList=new LinkedList<String>();
        nameList.add(serie.getName());
        columnsToNamesMap.put(columnsSet,nameList);
      }
    }
    for (    TreeSet columnsSet : columnsToNamesMap.keySet()) {
      List nameList=columnsToNamesMap.get(columnsSet);
      String groupByPart=""String_Node_Str"";
      if (columnsSet.size() > 0) {
        groupByPart=""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(columnsSet);
      }
      String namesPart=""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(nameList) + ""String_Node_Str"";
      String query2=String.format(""String_Node_Str"",namesPart,groupByPart);
      logger.debug(""String_Node_Str"",query2);
      List<Serie> result2=this.influxDB.Query(this.config.influxDB.getName(),query2,TimeUnit.SECONDS);
      for (      Serie serie : result2) {
        for (        Object[] pointsArry : serie.getPoints()) {
          MetricDefinition metricDefinition=new MetricDefinition();
          metricDefinition.name=serie.getName();
          Map<String,String> dimMap=new HashMap<String,String>();
          for (int i=2; i < serie.getColumns().length; ++i) {
            Object dimValue=pointsArry[i];
            if (dimValue != null) {
              dimMap.put((String)serie.getColumns()[i],(String)dimValue);
            }
          }
          metricDefinition.setDimensions(dimMap);
          metricDefinitionList.add(metricDefinition);
        }
      }
    }
  }
 else {
    String dimsPart=Utils.WhereClauseBuilder.buildDimsPart(dimensions);
    String query=String.format(""String_Node_Str"" + ""String_Node_Str"",namePart,Utils.SQLSanitizer.sanitize(tenantId),dimsPart);
    logger.debug(""String_Node_Str"",query);
    List<Serie> result=this.influxDB.Query(this.config.influxDB.getName(),query,TimeUnit.SECONDS);
    for (    Serie serie : result) {
      MetricDefinition metricDefinition=new MetricDefinition();
      metricDefinition.name=serie.getName();
      metricDefinition.setDimensions(dimensions == null ? new HashMap<String,String>() : dimensions);
      metricDefinitionList.add(metricDefinition);
    }
  }
  return metricDefinitionList;
}",0.2805515929624346
168720,"@Override public Collection<Measurements> find(String tenantId,String name,Map<String,String> dimensions,DateTime startTime,@Nullable DateTime endTime) throws Exception {
  String dimsPart=Utils.WhereClauseBuilder.buildDimsPart(dimensions);
  String timePart=Utils.WhereClauseBuilder.buildTimePart(startTime,endTime);
  String query=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",Utils.SQLSanitizer.sanitize(name),Utils.SQLSanitizer.sanitize(tenantId),timePart,dimsPart);
  logger.debug(""String_Node_Str"",query);
  List<Serie> result=this.influxDB.Query(this.config.influxDB.getName(),query,TimeUnit.MILLISECONDS);
  Measurements measurements=new Measurements();
  measurements.setName(name);
  measurements.setDimensions(dimensions);
  List<Object[]> valObjArryList=new LinkedList<>();
  for (  Serie serie : result) {
    Object[][] valObjArry=serie.getPoints();
    for (int i=0; i < valObjArry.length; i++) {
      Object[] objArry=new Object[3];
      objArry[0]=valObjArry[i][1];
      objArry[1]=DATETIME_FORMATTER.print((long)valObjArry[i][0]);
      objArry[2]=valObjArry[i][2];
      valObjArryList.add(objArry);
    }
  }
  measurements.setMeasurements(valObjArryList);
  return Arrays.asList(measurements);
}","@Override public Collection<Measurements> find(String tenantId,String name,Map<String,String> dimensions,DateTime startTime,@Nullable DateTime endTime) throws Exception {
  String dimsPart=Utils.WhereClauseBuilder.buildDimsPart(dimensions);
  String timePart=Utils.WhereClauseBuilder.buildTimePart(startTime,endTime);
  String query=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",Utils.SQLSanitizer.sanitize(name),Utils.SQLSanitizer.sanitize(tenantId),timePart,dimsPart);
  logger.debug(""String_Node_Str"",query);
  List<Serie> result=this.influxDB.Query(this.config.influxDB.getName(),query,TimeUnit.MILLISECONDS);
  Measurements measurements=new Measurements();
  measurements.setName(name);
  measurements.setDimensions(dimensions);
  List<Object[]> valObjArryList=new LinkedList<>();
  for (  Serie serie : result) {
    Object[][] valObjArry=serie.getPoints();
    for (int i=0; i < valObjArry.length; i++) {
      Object[] objArry=new Object[3];
      objArry[0]=valObjArry[i][1];
      Double timeDouble=(Double)valObjArry[i][0];
      objArry[1]=DATETIME_FORMATTER.print(timeDouble.longValue());
      objArry[2]=valObjArry[i][2];
      valObjArryList.add(objArry);
    }
  }
  measurements.setMeasurements(valObjArryList);
  return Arrays.asList(measurements);
}",0.962992125984252
168721,"private Map<byte[],Statistics> findDefIds(Handle h,String tenantId,String name,Map<String,String> dimensions,DateTime startTime,DateTime endTime){
  List<byte[]> bytes=new ArrayList<>();
  StringBuilder sbWhere=new StringBuilder();
  if (name != null)   sbWhere.append(""String_Node_Str"");
  if (endTime != null) {
    sbWhere.append(""String_Node_Str"");
  }
  String sql=String.format(FIND_BY_METRIC_DEF_SQL,MetricQueries.buildJoinClauseFor(dimensions),sbWhere);
  Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId).bind(""String_Node_Str"",startTime);
  if (name != null) {
    query.bind(""String_Node_Str"",name);
  }
  if (endTime != null) {
    query.bind(""String_Node_Str"",new Timestamp(endTime.getMillis()));
  }
  DimensionQueries.bindDimensionsToQuery(query,dimensions);
  List<Map<String,Object>> rows=query.list();
  Map<byte[],Statistics> byteIdMap=new HashMap<>();
  byte[] currentId=null;
  Map<String,String> dims=null;
  for (  Map<String,Object> row : rows) {
    byte[] defId=(byte[])row.get(""String_Node_Str"");
    String defName=(String)row.get(""String_Node_Str"");
    String demName=(String)row.get(""String_Node_Str"");
    String demValue=(String)row.get(""String_Node_Str"");
    if (defId == null || !Arrays.equals(currentId,defId)) {
      currentId=defId;
      dims=new HashMap<>();
      dims.put(demName,demValue);
      Statistics statistics=new Statistics();
      statistics.setName(defName);
      statistics.setDimensions(dims);
      byteIdMap.put(currentId,statistics);
    }
 else     dims.put(demName,demValue);
  }
  bytes.add(currentId);
  return byteIdMap;
}","private Map<byte[],Statistics> findDefIds(Handle h,String tenantId,String name,Map<String,String> dimensions,DateTime startTime,DateTime endTime){
  List<byte[]> bytes=new ArrayList<>();
  StringBuilder sbWhere=new StringBuilder();
  if (name != null)   sbWhere.append(""String_Node_Str"");
  String sql=String.format(FIND_BY_METRIC_DEF_SQL,MetricQueries.buildJoinClauseFor(dimensions),sbWhere);
  Query<Map<String,Object>> query=h.createQuery(sql).bind(""String_Node_Str"",tenantId).bind(""String_Node_Str"",startTime);
  if (name != null) {
    query.bind(""String_Node_Str"",name);
  }
  if (endTime != null) {
    query.bind(""String_Node_Str"",new Timestamp(endTime.getMillis()));
  }
  DimensionQueries.bindDimensionsToQuery(query,dimensions);
  List<Map<String,Object>> rows=query.list();
  Map<byte[],Statistics> byteIdMap=new HashMap<>();
  byte[] currentId=null;
  Map<String,String> dims=null;
  for (  Map<String,Object> row : rows) {
    byte[] defId=(byte[])row.get(""String_Node_Str"");
    String defName=(String)row.get(""String_Node_Str"");
    String demName=(String)row.get(""String_Node_Str"");
    String demValue=(String)row.get(""String_Node_Str"");
    if (defId == null || !Arrays.equals(currentId,defId)) {
      currentId=defId;
      dims=new HashMap<>();
      dims.put(demName,demValue);
      Statistics statistics=new Statistics();
      statistics.setName(defName);
      statistics.setDimensions(dims);
      byteIdMap.put(currentId,statistics);
    }
 else     dims.put(demName,demValue);
  }
  bytes.add(currentId);
  return byteIdMap;
}",0.978616352201258
168722,"/** 
 * @throws WebApplicationException if the {@code statistics} empty or invalid.
 */
public static List<String> parseValidateAndNormalizeStatistics(Iterable<String> statistics){
  List<String> validStats=new ArrayList<String>(5);
  for (  String statistic : statistics) {
    String statisticLower=statistic.toLowerCase();
    if (!VALID_STATISTICS.contains(statistic))     throw Exceptions.unprocessableEntity(""String_Node_Str"",statistic);
    validStats.add(statisticLower);
  }
  if (validStats.isEmpty())   throw Exceptions.unprocessableEntity(""String_Node_Str"");
  return validStats;
}","/** 
 * @throws WebApplicationException if the {@code statistics} empty or invalid.
 */
public static List<String> parseValidateAndNormalizeStatistics(Iterable<String> statistics){
  List<String> validStats=new ArrayList<String>(5);
  for (  String statistic : statistics) {
    String statisticLower=statistic.toLowerCase();
    if (!VALID_STATISTICS.contains(statisticLower))     throw Exceptions.unprocessableEntity(""String_Node_Str"",statistic);
    validStats.add(statisticLower);
  }
  if (validStats.isEmpty())   throw Exceptions.unprocessableEntity(""String_Node_Str"");
  return validStats;
}",0.9958018471872376
168723,"/** 
 * This method makes the assumption that in a json string value the ""["", ""]"", ""{"", and ""}"" characters will never be present, e.g ""{\""a\"": \""{ \""}"" will not work.<br/> If they are the wrong index will be returned.<br/> In practice these characters are rarely present inside json strings.
 * @param data char array
 * @param offset
 * @param end
 * @param openChar either '[' or '{'
 * @param closingChar either ']' or '}'
 * @return the next index after the closingChar
 */
public static final int indexOfEndOfObject(char[] data,int offset,int end,char openChar,char closingChar){
  int i;
  int level=0;
  char ch;
  for (i=offset; i < end; i++) {
    ch=data[i];
    if (ch == openChar)     level++;
 else     if (ch == closingChar) {
      if (level == 0)       return i + 1;
 else       level--;
    }
  }
  return i;
}","/** 
 * To use switch we need to duplicate this function into indexOfEndOfObject and indexOfEndOfList
 * @param data   char array
 * @param offset
 * @param end
 * @return the next index after the closingChar
 */
public static final int indexOfEndOfObject(char[] data,int offset,int end){
  int i;
  int level=0;
  boolean inString=false;
  for (i=offset; i < end; i++) {
switch (data[i]) {
case '{':
      level++;
    break;
case '""':
  i=endOfString(data,i + 1,end);
break;
case '}':
if (level == 0) return i + 1;
 else level--;
break;
}
}
return i;
}",0.2157856625633598
168724,"/** 
 * Parses the byte array for json data and create lazy objects
 * @param bts byte array
 * @param start start offset
 * @param end the end index
 * @param events JSONListener, all events will be sent to this instance.
 */
public static final int lazyParse(final char[] bts,final int start,final int end,final JSONListener events){
  final int btsLen=end;
  char bt;
  int idx=CharArrayTool.skipWhiteSpace(bts,start,btsLen);
  bt=CharArrayTool.getChar(bts,idx);
  if (bt == '{') {
    events.objectStart();
    int strStart=CharArrayTool.indexOf(bts,idx + 1,end,'""') + 1;
    idx=CharArrayTool.endOfString(bts,strStart,end);
    events.string(StringUtil.fastToString(bts,strStart,idx - strStart));
    idx=CharArrayTool.indexOf(bts,idx + 1,end,':');
    idx++;
  }
 else   if (bt == '[') {
    events.arrStart();
    idx=CharArrayTool.skipWhiteSpace(bts,idx + 1,btsLen);
  }
 else   throw new RuntimeException(""String_Node_Str"" + bt);
  if (idx >= btsLen) {
    events.objectEnd();
    return btsLen;
  }
  int endIndex;
  for (; idx < btsLen; idx++) {
    idx=CharArrayTool.skipWhiteSpace(bts,idx,btsLen);
    bt=CharArrayTool.getChar(bts,idx);
switch (bt) {
case '""':
      final int strStart2=idx + 1;
    idx=CharArrayTool.endOfString(bts,strStart2,end);
  events.string(StringUtil.fastToString(bts,strStart2,idx - strStart2));
break;
case '-':
idx++;
bt=CharArrayTool.getChar(bts,idx);
if (Character.isDigit(bt)) {
endIndex=CharArrayTool.indexFirstNonNumeric(bts,idx,end);
if (bts[endIndex] == '.') {
idx--;
int idx2=CharArrayTool.indexFirstNonNumeric(bts,endIndex + 1,end);
parseDouble(bts,idx,idx2,events);
idx=idx2 - 1;
}
 else {
parseInt(bts,idx,endIndex,events,true);
idx=endIndex - 1;
}
}
break;
case 'F':
events.number(Boolean.FALSE);
idx+=4;
break;
case 'T':
events.number(Boolean.TRUE);
idx+=3;
break;
case '[':
endIndex=CharArrayTool.indexOfEndOfObject(bts,idx + 1,btsLen,'[',']');
events.lazyArr(bts,idx,endIndex);
idx=endIndex;
break;
case 'f':
events.number(Boolean.FALSE);
idx+=4;
break;
case '}':
events.objectEnd();
break;
case 'n':
events.string(null);
idx+=3;
break;
case 't':
events.number(Boolean.TRUE);
idx+=3;
break;
case '{':
endIndex=CharArrayTool.indexOfEndOfObject(bts,idx + 1,btsLen,'{','}');
events.lazyObject(bts,idx,endIndex);
idx=endIndex;
break;
case 48:
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
case 55:
case 56:
case 57:
endIndex=CharArrayTool.indexFirstNonNumeric(bts,idx,end);
if (bts[endIndex] == '.') {
int idx2=CharArrayTool.indexFirstNonNumeric(bts,endIndex + 1,end);
parseDouble(bts,idx,idx2,events);
idx=idx2 - 1;
}
 else {
parseInt(bts,idx,endIndex,events,false);
idx=endIndex - 1;
}
break;
default :
break;
}
}
return idx;
}","/** 
 * Parses the byte array for json data and create lazy objects
 * @param bts byte array
 * @param start start offset
 * @param end the end index
 * @param events JSONListener, all events will be sent to this instance.
 */
public static final int lazyParse(final char[] bts,final int start,final int end,final JSONListener events){
  final int btsLen=end;
  char bt;
  int idx=CharArrayTool.skipWhiteSpace(bts,start,btsLen);
  bt=CharArrayTool.getChar(bts,idx);
  if (bt == '{') {
    events.objectStart();
    int strStart=CharArrayTool.indexOf(bts,idx + 1,end,'""') + 1;
    idx=CharArrayTool.endOfString(bts,strStart,end);
    events.string(StringUtil.fastToString(bts,strStart,idx - strStart));
    idx=CharArrayTool.indexOf(bts,idx + 1,end,':');
    idx++;
  }
 else   if (bt == '[') {
    events.arrStart();
    idx=CharArrayTool.skipWhiteSpace(bts,idx + 1,btsLen);
  }
 else   throw new RuntimeException(""String_Node_Str"" + bt);
  if (idx >= btsLen) {
    events.objectEnd();
    return btsLen;
  }
  int endIndex;
  for (; idx < btsLen; idx++) {
    idx=CharArrayTool.skipWhiteSpace(bts,idx,btsLen);
    bt=CharArrayTool.getChar(bts,idx);
switch (bt) {
case '""':
      final int strStart2=idx + 1;
    idx=CharArrayTool.endOfString(bts,strStart2,end);
  events.string(StringUtil.fastToString(bts,strStart2,idx - strStart2));
break;
case '-':
idx++;
bt=CharArrayTool.getChar(bts,idx);
if (Character.isDigit(bt)) {
endIndex=CharArrayTool.indexFirstNonNumeric(bts,idx,end);
if (bts[endIndex] == '.') {
idx--;
int idx2=CharArrayTool.indexFirstNonNumeric(bts,endIndex + 1,end);
parseDouble(bts,idx,idx2,events);
idx=idx2 - 1;
}
 else {
parseInt(bts,idx,endIndex,events,true);
idx=endIndex - 1;
}
}
break;
case 'F':
events.number(Boolean.FALSE);
idx+=4;
break;
case 'T':
events.number(Boolean.TRUE);
idx+=3;
break;
case '[':
endIndex=CharArrayTool.indexOfEndOfList(bts,idx + 1,btsLen);
events.lazyArr(bts,idx,endIndex);
idx=endIndex;
break;
case 'f':
events.number(Boolean.FALSE);
idx+=4;
break;
case '}':
events.objectEnd();
break;
case 'n':
events.string(null);
idx+=3;
break;
case 't':
events.number(Boolean.TRUE);
idx+=3;
break;
case '{':
endIndex=CharArrayTool.indexOfEndOfObject(bts,idx + 1,btsLen);
events.lazyObject(bts,idx,endIndex);
idx=endIndex;
break;
case 48:
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
case 55:
case 56:
case 57:
endIndex=CharArrayTool.indexFirstNonNumeric(bts,idx,end);
if (bts[endIndex] == '.') {
int idx2=CharArrayTool.indexFirstNonNumeric(bts,endIndex + 1,end);
parseDouble(bts,idx,idx2,events);
idx=idx2 - 1;
}
 else {
parseInt(bts,idx,endIndex,events,false);
idx=endIndex - 1;
}
break;
default :
break;
}
}
return idx;
}",0.9955240581872437
168725,"public static final void copy(char[] src,int srcPos,char[] dest,int destPos,int length){
  System.arraycopy(src,srcPos,dest,destPos,length);
}","public static final void copy(char[] src,int srcPos,char[] dest,int destPos,int length){
  if (length != 0)   System.arraycopy(src,srcPos,dest,destPos,length);
}",0.9372937293729372
168726,"public static final void forObj(final JSONWriter writer,Object obj) throws IOException {
  if (obj == null) {
    writer.writeNull();
  }
 else {
    if (obj instanceof String) {
      writer.writeString((String)obj);
    }
 else     if (obj instanceof Integer) {
      writer.writeInt((Integer)obj);
    }
 else     if (obj instanceof Long) {
      writer.writeLong((Long)obj);
    }
 else     if (obj instanceof Double) {
      writer.writeDouble((Double)obj);
    }
 else     if (obj instanceof Float) {
      writer.writeFloat((Float)obj);
    }
 else     if (obj instanceof ToJSONString) {
      ((ToJSONString)obj).toString(writer);
    }
 else     if (obj instanceof PersistentArrayMap) {
      PersistentArrayMap map=(PersistentArrayMap)obj;
      map.kvreduce(new AFn(){
        @Override public Object invoke(        Object state,        Object key,        Object val){
          if (((Counter)state).i++ != 0)           writer.writeComma();
          writer.writeFieldName(key.toString());
          try {
            JSONGenerator.forObj(writer,val);
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
          return state;
        }
      }
,new Counter());
    }
 else     if (obj instanceof PersistentHashMap) {
      PersistentHashMap map=(PersistentHashMap)obj;
      map.kvreduce(new AFn(){
        @Override public Object invoke(        Object state,        Object key,        Object val){
          if (((Counter)state).i++ != 0)           writer.writeComma();
          writer.writeFieldName(key.toString());
          try {
            JSONGenerator.forObj(writer,val);
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
          return state;
        }
      }
,new Counter());
    }
 else     if (obj instanceof PersistentVector) {
      ((PersistentVector)obj).kvreduce(new AFn(){
        @Override public Object invoke(        Object state,        Object k,        Object val){
          if (((Counter)state).i++ != 0)           writer.writeComma();
          try {
            JSONGenerator.forObj(writer,val);
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
          return state;
        }
      }
,new Counter());
    }
 else     if (obj instanceof Map) {
      writer.startObj();
      int i=0;
      for (      Map.Entry<Object,Object> entry : ((Map<Object,Object>)obj).entrySet()) {
        if (i++ != 0)         writer.writeComma();
        writer.writeFieldName(entry.getKey().toString());
        forObj(writer,entry.getValue());
      }
      writer.endObj();
    }
 else     if (obj instanceof List) {
      List<Object> list=(List<Object>)obj;
      for (int i=0; i < list.size(); i++) {
        if (i != 0)         writer.writeComma();
        forObj(writer,list.get(i));
      }
    }
 else     if (obj instanceof Collection) {
      Iterator<Object> coll=((Collection<Object>)obj).iterator();
      int i=0;
      writer.startArr();
      while (coll.hasNext()) {
        if (i++ != 0)         writer.writeComma();
        forObj(writer,coll.next());
      }
      writer.endArr();
    }
  }
}","public static final void forObj(final JSONWriter writer,final Object obj) throws IOException {
  if (obj == null) {
    writer.writeNull();
  }
 else {
    if (obj instanceof String) {
      writer.writeString((String)obj);
    }
 else     if (obj instanceof Named) {
      writer.writeString(((Named)obj).getName());
    }
 else     if (obj instanceof Integer) {
      writer.writeInt((Integer)obj);
    }
 else     if (obj instanceof Long) {
      writer.writeLong((Long)obj);
    }
 else     if (obj instanceof Double) {
      writer.writeDouble((Double)obj);
    }
 else     if (obj instanceof Float) {
      writer.writeFloat((Float)obj);
    }
 else     if (obj instanceof ToJSONString) {
      ((ToJSONString)obj).toString(writer);
    }
 else     if (obj instanceof PersistentArrayMap) {
      writer.startObj();
      final PersistentArrayMap map=(PersistentArrayMap)obj;
      map.kvreduce(new AFn(){
        @Override public Object invoke(        Object state,        Object key,        Object val){
          if (((Counter)state).i++ != 0)           writer.writeComma();
          writer.writeFieldName(convertFieldName(key));
          try {
            JSONGenerator.forObj(writer,val);
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
          return state;
        }
      }
,new Counter());
      writer.endObj();
    }
 else     if (obj instanceof PersistentHashMap) {
      writer.startObj();
      final PersistentHashMap map=(PersistentHashMap)obj;
      map.kvreduce(new AFn(){
        @Override public Object invoke(        Object state,        Object key,        Object val){
          if (((Counter)state).i++ != 0)           writer.writeComma();
          writer.writeFieldName(convertFieldName(key.toString()));
          try {
            JSONGenerator.forObj(writer,val);
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
          return state;
        }
      }
,new Counter());
      writer.endObj();
    }
 else     if (obj instanceof PersistentVector) {
      writer.startArr();
      ((PersistentVector)obj).kvreduce(new AFn(){
        @Override public Object invoke(        Object state,        Object k,        Object val){
          if (((Counter)state).i++ != 0)           writer.writeComma();
          try {
            JSONGenerator.forObj(writer,val);
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
          return state;
        }
      }
,new Counter());
      writer.endArr();
    }
 else     if (obj instanceof Map) {
      writer.startObj();
      int i=0;
      for (      Map.Entry<Object,Object> entry : ((Map<Object,Object>)obj).entrySet()) {
        if (i++ != 0)         writer.writeComma();
        writer.writeFieldName(convertFieldName(entry.getKey()));
        forObj(writer,entry.getValue());
      }
      writer.endObj();
    }
 else     if (obj instanceof List) {
      final List<Object> list=(List<Object>)obj;
      writer.startArr();
      for (int i=0; i < list.size(); i++) {
        if (i != 0)         writer.writeComma();
        forObj(writer,list.get(i));
      }
      writer.endArr();
    }
 else     if (obj instanceof Iterable) {
      final Iterator<Object> coll=((Iterable<Object>)obj).iterator();
      int i=0;
      writer.startArr();
      while (coll.hasNext()) {
        if (i++ != 0)         writer.writeComma();
        forObj(writer,coll.next());
      }
      writer.endArr();
    }
 else {
      writer.writeString(cleanUnknownOutput(obj.toString()));
    }
  }
}",0.9170344218887908
168727,"/** 
 * Called when the activity is paused. The gesture detector is stopped so that gestures are no longer recognized. 
 */
@Override public void onPause(){
  super.onPause();
  if (!mOpenCVInitiated)   return;
  mGestureSensor.stop();
}","/** 
 * Called when the activity is paused. The gesture detector is stopped so that the camera is no longer working to recognize gestures. 
 */
@Override public void onPause(){
  super.onPause();
  if (!mOpenCVInitiated)   return;
  mGestureSensor.stop();
}",0.8663967611336032
168728,"private JoinNode getOrCreate(JoinNode baseNode,String joinRelationName,Type<?> joinRelationType,String treatType,String alias,JoinType type,String errorMessage,boolean implicit,boolean defaultJoin,Attribute<?,?> attribute){
  JoinTreeNode treeNode=baseNode.getOrCreateTreeNode(joinRelationName,attribute);
  JoinNode node=treeNode.getJoinNode(alias,defaultJoin);
  String qualificationExpression=null;
  if (attribute instanceof QualifiedAttribute) {
    qualificationExpression=((QualifiedAttribute)attribute).getQualificationExpression();
  }
  EntityType<?> treatJoinType;
  String currentJoinPath;
  if (treatType != null) {
    treatJoinType=metamodel.getEntity(treatType);
    currentJoinPath=""String_Node_Str"" + baseNode.getAliasInfo().getAbsolutePath() + ""String_Node_Str""+ joinRelationName+ ""String_Node_Str""+ treatJoinType.getName()+ ""String_Node_Str"";
  }
 else {
    treatJoinType=null;
    currentJoinPath=baseNode.getAliasInfo().getAbsolutePath() + ""String_Node_Str"" + joinRelationName;
  }
  if (node == null) {
    checkAliasIsAvailable(alias,currentJoinPath,errorMessage);
    if (implicit && aliasManager.getAliasInfo(alias) != null) {
      alias=aliasManager.generateJoinAlias(alias);
    }
    JoinAliasInfo newAliasInfo=new JoinAliasInfo(alias,currentJoinPath,implicit,false,aliasManager);
    aliasManager.registerAliasInfo(newAliasInfo);
    node=JoinNode.createAssociationJoinNode(baseNode,treeNode,type,joinRelationType,treatJoinType,qualificationExpression,newAliasInfo);
    newAliasInfo.setJoinNode(node);
    treeNode.addJoinNode(node,defaultJoin);
  }
 else {
    JoinAliasInfo nodeAliasInfo=node.getAliasInfo();
    if (!alias.equals(nodeAliasInfo.getAlias())) {
      if (nodeAliasInfo.isImplicit() && !implicit) {
        aliasManager.unregisterAliasInfoForBottomLevel(nodeAliasInfo);
        nodeAliasInfo.setAlias(alias);
        nodeAliasInfo.setImplicit(false);
        node.setJoinType(type);
        aliasManager.registerAliasInfo(nodeAliasInfo);
      }
 else       if (!nodeAliasInfo.isImplicit() && !implicit) {
        throw new IllegalArgumentException(""String_Node_Str"" + nodeAliasInfo.getAlias() + ""String_Node_Str""+ nodeAliasInfo.getAbsolutePath()+ ""String_Node_Str""+ alias+ ""String_Node_Str""+ currentJoinPath+ ""String_Node_Str"");
      }
    }
    if (treatJoinType != null) {
      if (node.getTreatType() == null) {
        node=node.getTreatedJoinNode(treatJoinType);
      }
 else       if (!treatJoinType.equals(node.getTreatType())) {
        throw new IllegalArgumentException(""String_Node_Str"" + nodeAliasInfo.getAlias() + ""String_Node_Str""+ nodeAliasInfo.getAbsolutePath()+ ""String_Node_Str""+ ""String_Node_Str""+ treatType+ ""String_Node_Str""+ node.getTreatType()+ ""String_Node_Str"");
      }
    }
  }
  return node;
}","private JoinNode getOrCreate(JoinNode baseNode,String joinRelationName,Type<?> joinRelationType,String treatType,String alias,JoinType type,String errorMessage,boolean implicit,boolean defaultJoin,Attribute<?,?> attribute){
  JoinTreeNode treeNode=baseNode.getOrCreateTreeNode(joinRelationName,attribute);
  JoinNode node=treeNode.getJoinNode(alias,defaultJoin);
  String qualificationExpression=null;
  String qualifiedJoinPath;
  if (attribute instanceof QualifiedAttribute) {
    QualifiedAttribute qualifiedAttribute=(QualifiedAttribute)attribute;
    qualificationExpression=qualifiedAttribute.getQualificationExpression();
    qualifiedJoinPath=joinRelationName.substring(0,qualificationExpression.length() + 1) + baseNode.getAliasInfo().getAbsolutePath() + ""String_Node_Str""+ joinRelationName.substring(qualificationExpression.length() + 1);
  }
 else {
    qualifiedJoinPath=baseNode.getAliasInfo().getAbsolutePath() + ""String_Node_Str"" + joinRelationName;
  }
  EntityType<?> treatJoinType;
  String currentJoinPath;
  if (treatType != null) {
    treatJoinType=metamodel.getEntity(treatType);
    currentJoinPath=""String_Node_Str"" + qualifiedJoinPath + ""String_Node_Str""+ treatJoinType.getName()+ ""String_Node_Str"";
  }
 else {
    treatJoinType=null;
    currentJoinPath=qualifiedJoinPath;
  }
  if (node == null) {
    checkAliasIsAvailable(alias,currentJoinPath,errorMessage);
    if (implicit && aliasManager.getAliasInfo(alias) != null) {
      alias=aliasManager.generateJoinAlias(alias);
    }
    JoinAliasInfo newAliasInfo=new JoinAliasInfo(alias,currentJoinPath,implicit,false,aliasManager);
    aliasManager.registerAliasInfo(newAliasInfo);
    node=JoinNode.createAssociationJoinNode(baseNode,treeNode,type,joinRelationType,treatJoinType,qualificationExpression,newAliasInfo);
    newAliasInfo.setJoinNode(node);
    treeNode.addJoinNode(node,defaultJoin);
  }
 else {
    JoinAliasInfo nodeAliasInfo=node.getAliasInfo();
    if (!alias.equals(nodeAliasInfo.getAlias())) {
      if (nodeAliasInfo.isImplicit() && !implicit) {
        aliasManager.unregisterAliasInfoForBottomLevel(nodeAliasInfo);
        nodeAliasInfo.setAlias(alias);
        nodeAliasInfo.setImplicit(false);
        node.setJoinType(type);
        aliasManager.registerAliasInfo(nodeAliasInfo);
      }
 else       if (!nodeAliasInfo.isImplicit() && !implicit) {
        throw new IllegalArgumentException(""String_Node_Str"" + nodeAliasInfo.getAlias() + ""String_Node_Str""+ nodeAliasInfo.getAbsolutePath()+ ""String_Node_Str""+ alias+ ""String_Node_Str""+ currentJoinPath+ ""String_Node_Str"");
      }
    }
    if (treatJoinType != null) {
      if (node.getTreatType() == null) {
        node=node.getTreatedJoinNode(treatJoinType);
      }
 else       if (!treatJoinType.equals(node.getTreatType())) {
        throw new IllegalArgumentException(""String_Node_Str"" + nodeAliasInfo.getAlias() + ""String_Node_Str""+ nodeAliasInfo.getAbsolutePath()+ ""String_Node_Str""+ ""String_Node_Str""+ treatType+ ""String_Node_Str""+ node.getTreatType()+ ""String_Node_Str"");
      }
    }
  }
  return node;
}",0.8923076923076924
168729,"public void registerDependencies(){
  if (onPredicate != null) {
    onPredicate.accept(new VisitorAdapter(){
      @Override public void visit(      PathExpression pathExpr){
        if (pathExpr.getBaseNode() != JoinNode.this && pathExpr.getBaseNode() != null) {
          dependencies.add((JoinNode)pathExpr.getBaseNode());
        }
      }
    }
);
  }
}","public void registerDependencies(){
  if (onPredicate != null) {
    onPredicate.accept(new VisitorAdapter(){
      @Override public void visit(      PathExpression pathExpr){
        JoinNode baseNode=(JoinNode)pathExpr.getBaseNode();
        if (baseNode != null && baseNode != JoinNode.this && (baseNode.getQualificationExpression() == null || baseNode.parent != JoinNode.this)) {
          dependencies.add(baseNode);
        }
      }
    }
);
  }
}",0.7134071340713407
168730,"@Override public void visit(PathExpression pathExpr){
  if (pathExpr.getBaseNode() != JoinNode.this && pathExpr.getBaseNode() != null) {
    dependencies.add((JoinNode)pathExpr.getBaseNode());
  }
}","@Override public void visit(PathExpression pathExpr){
  JoinNode baseNode=(JoinNode)pathExpr.getBaseNode();
  if (baseNode != null && baseNode != JoinNode.this && (baseNode.getQualificationExpression() == null || baseNode.parent != JoinNode.this)) {
    dependencies.add(baseNode);
  }
}",0.4701030927835051
168731,"@Column(unique=true,name=""String_Node_Str"") public String getIsbn(){
  return isbn;
}","@Column(unique=true,name=""String_Node_Str"",length=50,nullable=false) public String getIsbn(){
  return isbn;
}",0.8717948717948718
168732,"@Override public <Y>FullQueryBuilder<Y,?> copy(Class<Y> resultClass){
  prepareAndCheck();
  MainQuery mainQuery=cbf.createMainQuery(getEntityManager());
  CriteriaBuilderImpl<Y> newBuilder=new CriteriaBuilderImpl<Y>(mainQuery,true,resultClass,null);
  newBuilder.fromClassExplicitlySet=true;
  mainQuery.cteManager.applyFrom(this.mainQuery.cteManager);
  newBuilder.aliasManager.applyFrom(aliasManager);
  newBuilder.joinManager.applyFrom(joinManager);
  newBuilder.whereManager.applyFrom(whereManager);
  newBuilder.havingManager.applyFrom(havingManager);
  newBuilder.groupByManager.applyFrom(groupByManager);
  newBuilder.orderByManager.applyFrom(orderByManager);
  newBuilder.setFirstResult(firstResult);
  newBuilder.setMaxResults(maxResults);
  newBuilder.selectManager.setDefaultSelect(selectManager.getSelectInfos());
  return newBuilder;
}","@Override public <Y>FullQueryBuilder<Y,?> copy(Class<Y> resultClass){
  prepareAndCheck();
  MainQuery mainQuery=cbf.createMainQuery(getEntityManager());
  CriteriaBuilderImpl<Y> newBuilder=new CriteriaBuilderImpl<Y>(mainQuery,true,resultClass,null);
  newBuilder.fromClassExplicitlySet=true;
  newBuilder.parameterManager.applyFrom(parameterManager);
  mainQuery.cteManager.applyFrom(this.mainQuery.cteManager);
  newBuilder.aliasManager.applyFrom(aliasManager);
  newBuilder.joinManager.applyFrom(joinManager);
  newBuilder.whereManager.applyFrom(whereManager);
  newBuilder.havingManager.applyFrom(havingManager);
  newBuilder.groupByManager.applyFrom(groupByManager);
  newBuilder.orderByManager.applyFrom(orderByManager);
  newBuilder.setFirstResult(firstResult);
  newBuilder.setMaxResults(maxResults);
  newBuilder.selectManager.setDefaultSelect(selectManager.getSelectInfos());
  return newBuilder;
}",0.9664200341491178
168733,"@Override public Expression createScalarExpression(final String expression,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return expressionCache.getOrDefault(""String_Node_Str"",delegate,expression,false,macroConfiguration,ExpressionCache.SCALAR_EXPRESSION_SUPPLIER);
}","@Override public Expression createScalarExpression(final String expression,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return getOrDefault(""String_Node_Str"",delegate,expression,false,macroConfiguration,SCALAR_EXPRESSION_SUPPLIER);
}",0.9418181818181818
168734,"@Override public Expression createSimpleExpression(final String expression,final boolean allowQuantifiedPredicates,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return expressionCache.getOrDefault(""String_Node_Str"",delegate,expression,allowQuantifiedPredicates,macroConfiguration,ExpressionCache.SIMPLE_EXPRESSION_SUPPLIER);
}","@Override public Expression createSimpleExpression(final String expression,final boolean allowQuantifiedPredicates,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return getOrDefault(""String_Node_Str"",delegate,expression,allowQuantifiedPredicates,macroConfiguration,SIMPLE_EXPRESSION_SUPPLIER);
}",0.9522388059701492
168735,"@Override public PathExpression createPathExpression(final String expression,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return expressionCache.getOrDefault(""String_Node_Str"",delegate,expression,false,macroConfiguration,ExpressionCache.PATH_EXPRESSION_SUPPLIER);
}","@Override public PathExpression createPathExpression(final String expression,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return getOrDefault(""String_Node_Str"",delegate,expression,false,macroConfiguration,PATH_EXPRESSION_SUPPLIER);
}",0.9418181818181818
168736,"@Override public Expression createArithmeticExpression(final String expression,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return expressionCache.getOrDefault(""String_Node_Str"",delegate,expression,false,macroConfiguration,ExpressionCache.ARITHMETIC_EXPRESSION_SUPPLIER);
}","@Override public Expression createArithmeticExpression(final String expression,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return getOrDefault(""String_Node_Str"",delegate,expression,false,macroConfiguration,ARITHMETIC_EXPRESSION_SUPPLIER);
}",0.9434628975265018
168737,"@Override public Expression createOrderByExpression(final String expression,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return expressionCache.getOrDefault(""String_Node_Str"",delegate,expression,false,macroConfiguration,ExpressionCache.ORDER_BY_EXPRESSION_SUPPLIER);
}","@Override public Expression createOrderByExpression(final String expression,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return getOrDefault(""String_Node_Str"",delegate,expression,false,macroConfiguration,ORDER_BY_EXPRESSION_SUPPLIER);
}",0.9424460431654677
168738,"@Override public List<Expression> createInItemExpressions(final String[] parameterOrLiteralExpressions,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  if (parameterOrLiteralExpressions == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (parameterOrLiteralExpressions.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  List<Expression> inItemExpressions=new ArrayList<Expression>();
  if (parameterOrLiteralExpressions.length == 1) {
    inItemExpressions.add(createInItemOrPathExpression(parameterOrLiteralExpressions[0],macroConfiguration,usedMacros));
  }
 else {
    for (    final String parameterOrLiteralExpression : parameterOrLiteralExpressions) {
      inItemExpressions.add(createInItemExpression(parameterOrLiteralExpression,macroConfiguration,usedMacros));
    }
  }
  return inItemExpressions;
}","@Override public List<Expression> createInItemExpressions(final String[] parameterOrLiteralExpressions,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  if (parameterOrLiteralExpressions == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (parameterOrLiteralExpressions.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  List<Expression> inItemExpressions=new ArrayList<>();
  if (parameterOrLiteralExpressions.length == 1) {
    inItemExpressions.add(createInItemOrPathExpression(parameterOrLiteralExpressions[0],macroConfiguration,usedMacros));
  }
 else {
    for (    final String parameterOrLiteralExpression : parameterOrLiteralExpressions) {
      inItemExpressions.add(createInItemExpression(parameterOrLiteralExpression,macroConfiguration,usedMacros));
    }
  }
  return inItemExpressions;
}",0.994311717861206
168739,"@Override public Expression createJoinPathExpression(final String expression,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return expressionCache.getOrDefault(""String_Node_Str"",delegate,expression,false,macroConfiguration,ExpressionCache.JOIN_PATH_EXPRESSION_SUPPLIER);
}","@Override public Expression createJoinPathExpression(final String expression,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return getOrDefault(""String_Node_Str"",delegate,expression,false,macroConfiguration,JOIN_PATH_EXPRESSION_SUPPLIER);
}",0.9428571428571428
168740,"@Override public Expression createInItemOrPathExpression(final String parameterOrLiteralExpression,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return expressionCache.getOrDefault(""String_Node_Str"",delegate,parameterOrLiteralExpression,false,macroConfiguration,ExpressionCache.IN_ITEM_OR_PATH_EXPRESSION_SUPPLIER);
}","@Override public Expression createInItemOrPathExpression(final String parameterOrLiteralExpression,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return getOrDefault(""String_Node_Str"",delegate,parameterOrLiteralExpression,false,macroConfiguration,IN_ITEM_OR_PATH_EXPRESSION_SUPPLIER);
}",0.950920245398773
168741,"@Override public Expression createInItemExpression(final String parameterOrLiteralExpression,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return expressionCache.getOrDefault(""String_Node_Str"",delegate,parameterOrLiteralExpression,false,macroConfiguration,ExpressionCache.IN_ITEM_EXPRESSION_SUPPLIER);
}","@Override public Expression createInItemExpression(final String parameterOrLiteralExpression,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return getOrDefault(""String_Node_Str"",delegate,parameterOrLiteralExpression,false,macroConfiguration,IN_ITEM_EXPRESSION_SUPPLIER);
}",0.9487179487179488
168742,"@Override public Expression createCaseOperandExpression(final String expression,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return expressionCache.getOrDefault(""String_Node_Str"",delegate,expression,false,macroConfiguration,ExpressionCache.CASE_OPERAND_EXPRESSION_SUPPLIER);
}","@Override public Expression createCaseOperandExpression(final String expression,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return getOrDefault(""String_Node_Str"",delegate,expression,false,macroConfiguration,CASE_OPERAND_EXPRESSION_SUPPLIER);
}",0.944055944055944
168743,"@Override public Expression createStringExpression(final String expression,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return expressionCache.getOrDefault(""String_Node_Str"",delegate,expression,false,macroConfiguration,ExpressionCache.STRING_EXPRESSION_SUPPLIER);
}","@Override public Expression createStringExpression(final String expression,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return getOrDefault(""String_Node_Str"",delegate,expression,false,macroConfiguration,STRING_EXPRESSION_SUPPLIER);
}",0.9418181818181818
168744,"@Override public Predicate createBooleanExpression(final String expression,final boolean allowQuantifiedPredicates,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return expressionCache.getOrDefault(""String_Node_Str"",delegate,expression,allowQuantifiedPredicates,macroConfiguration,ExpressionCache.BOOLEAN_EXPRESSION_SUPPLIER);
}","@Override public Predicate createBooleanExpression(final String expression,final boolean allowQuantifiedPredicates,final MacroConfiguration macroConfiguration,Set<String> usedMacros){
  return getOrDefault(""String_Node_Str"",delegate,expression,allowQuantifiedPredicates,macroConfiguration,BOOLEAN_EXPRESSION_SUPPLIER);
}",0.8333333333333334
168745,"public Expression get(ExpressionFactory expressionFactory,String expression,boolean allowQuantifiedPredicates,MacroConfiguration macroConfiguration,Set<String> usedMacros);","public T get(String cacheName,String expression);",0.3529411764705882
168746,"private <R>QuerySpecification getQuerySpecification(Query baseQuery,Query exampleQuery,String[] returningColumns,ReturningObjectBuilder<R> objectBuilder,Map<DbmsModificationState,String> includedModificationStates){
  Set<String> parameterListNames=parameterManager.getParameterListNames(baseQuery);
  Set<JoinNode> keyRestrictedLeftJoins=joinManager.getKeyRestrictedLeftJoins();
  List<String> keyRestrictedLeftJoinAliases=getKeyRestrictedLeftJoinAliases(baseQuery,keyRestrictedLeftJoins,Collections.EMPTY_SET);
  List<EntityFunctionNode> entityFunctionNodes=getEntityFunctionNodes(baseQuery);
  boolean isEmbedded=this instanceof ReturningBuilder;
  boolean shouldRenderCteNodes=renderCteNodes(isEmbedded);
  List<CTENode> ctes=shouldRenderCteNodes ? getCteNodes(baseQuery,isEmbedded) : Collections.EMPTY_LIST;
  ExtendedQuerySupport extendedQuerySupport=getService(ExtendedQuerySupport.class);
  Query insertExampleQuery=getInsertExampleQuery();
  String insertExampleSql=extendedQuerySupport.getSql(em,insertExampleQuery);
  String ownerAlias=extendedQuerySupport.getSqlAlias(em,insertExampleQuery,entityAlias);
  String targetAlias=extendedQuerySupport.getSqlAlias(em,insertExampleQuery,COLLECTION_BASE_QUERY_ALIAS);
  JoinTable joinTable=jpaProvider.getJoinTable(entityType,collectionName);
  int joinTableIndex=SqlUtils.indexOfTableName(insertExampleSql,joinTable.getTableName());
  String collectionAlias=SqlUtils.extractAlias(insertExampleSql,joinTableIndex + joinTable.getTableName().length());
  String[] selectItemExpressions=SqlUtils.getSelectItemExpressions(insertExampleSql,SqlUtils.indexOfSelect(insertExampleSql));
  Map<String,String> columnExpressionRemappings=new HashMap<>(selectItemExpressions.length);
  for (  Map.Entry<String,String> entry : joinTable.getKeyColumnMappings().entrySet()) {
    columnExpressionRemappings.put(collectionAlias + ""String_Node_Str"" + entry.getValue(),entry.getKey());
  }
  for (  Map.Entry<String,String> entry : joinTable.getIdColumnMappings().entrySet()) {
    columnExpressionRemappings.put(ownerAlias + ""String_Node_Str"" + entry.getValue(),entry.getKey());
  }
  for (  Map.Entry<String,String> entry : joinTable.getTargetColumnMappings().entrySet()) {
    columnExpressionRemappings.put(targetAlias + ""String_Node_Str"" + entry.getValue(),entry.getKey());
  }
  StringBuilder insertSqlSb=new StringBuilder();
  insertSqlSb.append(""String_Node_Str"").append(joinTable.getTableName()).append(""String_Node_Str"");
  for (  String selectItemExpression : selectItemExpressions) {
    insertSqlSb.append(columnExpressionRemappings.get(selectItemExpression.trim())).append(',');
  }
  insertSqlSb.setCharAt(insertSqlSb.length() - 1,')');
  if (returningColumns == null) {
    return new CollectionInsertModificationQuerySpecification(this,baseQuery,exampleQuery,parameterManager.getParameters(),parameterListNames,keyRestrictedLeftJoinAliases,entityFunctionNodes,mainQuery.cteManager.isRecursive(),ctes,shouldRenderCteNodes,isEmbedded,returningColumns,includedModificationStates,returningAttributeBindingMap,getInsertExecutorQuery(),insertSqlSb.toString());
  }
 else {
    return new ReturningCollectionInsertModificationQuerySpecification(this,baseQuery,exampleQuery,parameterManager.getParameters(),parameterListNames,keyRestrictedLeftJoinAliases,entityFunctionNodes,mainQuery.cteManager.isRecursive(),ctes,shouldRenderCteNodes,isEmbedded,returningColumns,includedModificationStates,returningAttributeBindingMap,getInsertExecutorQuery(),insertSqlSb.toString(),objectBuilder);
  }
}","private <R>QuerySpecification getQuerySpecification(Query baseQuery,Query exampleQuery,String[] returningColumns,ReturningObjectBuilder<R> objectBuilder,Map<DbmsModificationState,String> includedModificationStates){
  Set<String> parameterListNames=parameterManager.getParameterListNames(baseQuery);
  Set<JoinNode> keyRestrictedLeftJoins=joinManager.getKeyRestrictedLeftJoins();
  List<String> keyRestrictedLeftJoinAliases=getKeyRestrictedLeftJoinAliases(baseQuery,keyRestrictedLeftJoins,Collections.EMPTY_SET);
  List<EntityFunctionNode> entityFunctionNodes=getEntityFunctionNodes(baseQuery);
  boolean isEmbedded=this instanceof ReturningBuilder;
  boolean shouldRenderCteNodes=renderCteNodes(isEmbedded);
  List<CTENode> ctes=shouldRenderCteNodes ? getCteNodes(baseQuery,isEmbedded) : Collections.EMPTY_LIST;
  ExtendedQuerySupport extendedQuerySupport=getService(ExtendedQuerySupport.class);
  Query insertExampleQuery=getInsertExampleQuery();
  String insertExampleSql=extendedQuerySupport.getSql(em,insertExampleQuery);
  String ownerAlias=extendedQuerySupport.getSqlAlias(em,insertExampleQuery,entityAlias);
  String targetAlias=extendedQuerySupport.getSqlAlias(em,insertExampleQuery,COLLECTION_BASE_QUERY_ALIAS);
  JoinTable joinTable=jpaProvider.getJoinTable(entityType,collectionName);
  int joinTableIndex=SqlUtils.indexOfTableName(insertExampleSql,joinTable.getTableName());
  String collectionAlias=SqlUtils.extractAlias(insertExampleSql,joinTableIndex + joinTable.getTableName().length());
  String[] selectItemExpressions=SqlUtils.getSelectItemExpressions(insertExampleSql,SqlUtils.indexOfSelect(insertExampleSql));
  Map<String,String> columnExpressionRemappings=new HashMap<>(selectItemExpressions.length);
  if (joinTable.getKeyColumnMappings() != null) {
    for (    Map.Entry<String,String> entry : joinTable.getKeyColumnMappings().entrySet()) {
      columnExpressionRemappings.put(collectionAlias + ""String_Node_Str"" + entry.getValue(),entry.getKey());
    }
  }
  for (  Map.Entry<String,String> entry : joinTable.getIdColumnMappings().entrySet()) {
    columnExpressionRemappings.put(ownerAlias + ""String_Node_Str"" + entry.getValue(),entry.getKey());
  }
  for (  Map.Entry<String,String> entry : joinTable.getTargetColumnMappings().entrySet()) {
    columnExpressionRemappings.put(targetAlias + ""String_Node_Str"" + entry.getValue(),entry.getKey());
  }
  StringBuilder insertSqlSb=new StringBuilder();
  insertSqlSb.append(""String_Node_Str"").append(joinTable.getTableName()).append(""String_Node_Str"");
  for (  String selectItemExpression : selectItemExpressions) {
    insertSqlSb.append(columnExpressionRemappings.get(selectItemExpression.trim())).append(',');
  }
  insertSqlSb.setCharAt(insertSqlSb.length() - 1,')');
  if (returningColumns == null) {
    return new CollectionInsertModificationQuerySpecification(this,baseQuery,exampleQuery,parameterManager.getParameters(),parameterListNames,keyRestrictedLeftJoinAliases,entityFunctionNodes,mainQuery.cteManager.isRecursive(),ctes,shouldRenderCteNodes,isEmbedded,returningColumns,includedModificationStates,returningAttributeBindingMap,getInsertExecutorQuery(),insertSqlSb.toString());
  }
 else {
    return new ReturningCollectionInsertModificationQuerySpecification(this,baseQuery,exampleQuery,parameterManager.getParameters(),parameterListNames,keyRestrictedLeftJoinAliases,entityFunctionNodes,mainQuery.cteManager.isRecursive(),ctes,shouldRenderCteNodes,isEmbedded,returningColumns,includedModificationStates,returningAttributeBindingMap,getInsertExecutorQuery(),insertSqlSb.toString(),objectBuilder);
  }
}",0.9896184062850728
168747,"private <R>QuerySpecification getQuerySpecification(Query baseQuery,Query exampleQuery,String[] returningColumns,ReturningObjectBuilder<R> objectBuilder,Map<DbmsModificationState,String> includedModificationStates){
  Set<String> parameterListNames=parameterManager.getParameterListNames(baseQuery);
  boolean isEmbedded=this instanceof ReturningBuilder;
  boolean shouldRenderCteNodes=renderCteNodes(isEmbedded);
  List<CTENode> ctes=shouldRenderCteNodes ? getCteNodes(baseQuery,isEmbedded) : Collections.EMPTY_LIST;
  ExtendedQuerySupport extendedQuerySupport=getService(ExtendedQuerySupport.class);
  String sql=extendedQuerySupport.getSql(em,baseQuery);
  String ownerAlias=extendedQuerySupport.getSqlAlias(em,baseQuery,entityAlias);
  String targetAlias=extendedQuerySupport.getSqlAlias(em,baseQuery,CollectionUpdateModificationQuerySpecification.COLLECTION_BASE_QUERY_ALIAS);
  JoinTable joinTable=jpaProvider.getJoinTable(entityType,collectionName);
  int joinTableIndex=SqlUtils.indexOfTableName(sql,joinTable.getTableName());
  String collectionAlias=SqlUtils.extractAlias(sql,joinTableIndex + joinTable.getTableName().length());
  String updateSql=""String_Node_Str"" + joinTable.getTableName() + ""String_Node_Str"";
  Map<String,String> columnOnlyRemappings=new HashMap<>();
  Map<String,String> columnExpressionRemappings=new HashMap<>();
  for (  Map.Entry<String,String> entry : joinTable.getKeyColumnMappings().entrySet()) {
    columnOnlyRemappings.put(collectionAlias + ""String_Node_Str"" + entry.getValue(),entry.getKey());
    columnExpressionRemappings.put(collectionAlias + ""String_Node_Str"" + entry.getValue(),joinTable.getTableName() + ""String_Node_Str"" + entry.getKey());
  }
  for (  Map.Entry<String,String> entry : joinTable.getIdColumnMappings().entrySet()) {
    columnOnlyRemappings.put(ownerAlias + ""String_Node_Str"" + entry.getValue(),entry.getKey());
    columnExpressionRemappings.put(ownerAlias + ""String_Node_Str"" + entry.getValue(),joinTable.getTableName() + ""String_Node_Str"" + entry.getKey());
  }
  for (  Map.Entry<String,String> entry : joinTable.getTargetColumnMappings().entrySet()) {
    columnOnlyRemappings.put(targetAlias + ""String_Node_Str"" + entry.getValue(),entry.getKey());
    columnExpressionRemappings.put(targetAlias + ""String_Node_Str"" + entry.getValue(),joinTable.getTableName() + ""String_Node_Str"" + entry.getKey());
  }
  List<Query> setExpressionContainingUpdateQueries=new ArrayList<>();
  for (  String cachedBaseQueryString : cachedBaseQueryStrings) {
    Query setExpressionQuery=em.createQuery(cachedBaseQueryString);
    parameterListNames.addAll(parameterManager.getParameterListNames(baseQuery));
    setExpressionContainingUpdateQueries.add(setExpressionQuery);
  }
  if (returningColumns == null) {
    return new CollectionUpdateModificationQuerySpecification(this,baseQuery,exampleQuery,parameterManager.getParameters(),parameterListNames,mainQuery.cteManager.isRecursive(),ctes,shouldRenderCteNodes,isEmbedded,returningColumns,includedModificationStates,returningAttributeBindingMap,getUpdateExampleQuery(),updateSql,setExpressionContainingUpdateQueries,columnOnlyRemappings,columnExpressionRemappings);
  }
 else {
    return new ReturningCollectionUpdateModificationQuerySpecification(this,baseQuery,exampleQuery,parameterManager.getParameters(),parameterListNames,mainQuery.cteManager.isRecursive(),ctes,shouldRenderCteNodes,isEmbedded,returningColumns,includedModificationStates,returningAttributeBindingMap,getUpdateExampleQuery(),updateSql,setExpressionContainingUpdateQueries,columnOnlyRemappings,columnExpressionRemappings,objectBuilder);
  }
}","private <R>QuerySpecification getQuerySpecification(Query baseQuery,Query exampleQuery,String[] returningColumns,ReturningObjectBuilder<R> objectBuilder,Map<DbmsModificationState,String> includedModificationStates){
  Set<String> parameterListNames=parameterManager.getParameterListNames(baseQuery);
  boolean isEmbedded=this instanceof ReturningBuilder;
  boolean shouldRenderCteNodes=renderCteNodes(isEmbedded);
  List<CTENode> ctes=shouldRenderCteNodes ? getCteNodes(baseQuery,isEmbedded) : Collections.EMPTY_LIST;
  ExtendedQuerySupport extendedQuerySupport=getService(ExtendedQuerySupport.class);
  String sql=extendedQuerySupport.getSql(em,baseQuery);
  String ownerAlias=extendedQuerySupport.getSqlAlias(em,baseQuery,entityAlias);
  String targetAlias=extendedQuerySupport.getSqlAlias(em,baseQuery,CollectionUpdateModificationQuerySpecification.COLLECTION_BASE_QUERY_ALIAS);
  JoinTable joinTable=jpaProvider.getJoinTable(entityType,collectionName);
  int joinTableIndex=SqlUtils.indexOfTableName(sql,joinTable.getTableName());
  String collectionAlias=SqlUtils.extractAlias(sql,joinTableIndex + joinTable.getTableName().length());
  String updateSql=""String_Node_Str"" + joinTable.getTableName() + ""String_Node_Str"";
  Map<String,String> columnOnlyRemappings=new HashMap<>();
  Map<String,String> columnExpressionRemappings=new HashMap<>();
  if (joinTable.getKeyColumnMappings() != null) {
    for (    Map.Entry<String,String> entry : joinTable.getKeyColumnMappings().entrySet()) {
      columnOnlyRemappings.put(collectionAlias + ""String_Node_Str"" + entry.getValue(),entry.getKey());
      columnExpressionRemappings.put(collectionAlias + ""String_Node_Str"" + entry.getValue(),joinTable.getTableName() + ""String_Node_Str"" + entry.getKey());
    }
  }
  for (  Map.Entry<String,String> entry : joinTable.getIdColumnMappings().entrySet()) {
    columnOnlyRemappings.put(ownerAlias + ""String_Node_Str"" + entry.getValue(),entry.getKey());
    columnExpressionRemappings.put(ownerAlias + ""String_Node_Str"" + entry.getValue(),joinTable.getTableName() + ""String_Node_Str"" + entry.getKey());
  }
  for (  Map.Entry<String,String> entry : joinTable.getTargetColumnMappings().entrySet()) {
    columnOnlyRemappings.put(targetAlias + ""String_Node_Str"" + entry.getValue(),entry.getKey());
    columnExpressionRemappings.put(targetAlias + ""String_Node_Str"" + entry.getValue(),joinTable.getTableName() + ""String_Node_Str"" + entry.getKey());
  }
  List<Query> setExpressionContainingUpdateQueries=new ArrayList<>();
  for (  String cachedBaseQueryString : cachedBaseQueryStrings) {
    Query setExpressionQuery=em.createQuery(cachedBaseQueryString);
    parameterListNames.addAll(parameterManager.getParameterListNames(baseQuery));
    setExpressionContainingUpdateQueries.add(setExpressionQuery);
  }
  if (returningColumns == null) {
    return new CollectionUpdateModificationQuerySpecification(this,baseQuery,exampleQuery,parameterManager.getParameters(),parameterListNames,mainQuery.cteManager.isRecursive(),ctes,shouldRenderCteNodes,isEmbedded,returningColumns,includedModificationStates,returningAttributeBindingMap,getUpdateExampleQuery(),updateSql,setExpressionContainingUpdateQueries,columnOnlyRemappings,columnExpressionRemappings);
  }
 else {
    return new ReturningCollectionUpdateModificationQuerySpecification(this,baseQuery,exampleQuery,parameterManager.getParameters(),parameterListNames,mainQuery.cteManager.isRecursive(),ctes,shouldRenderCteNodes,isEmbedded,returningColumns,includedModificationStates,returningAttributeBindingMap,getUpdateExampleQuery(),updateSql,setExpressionContainingUpdateQueries,columnOnlyRemappings,columnExpressionRemappings,objectBuilder);
  }
}",0.9896004378763
168748,"@Override public Collection<Object> getAddedObjects(C collection){
  return (Collection<Object>)elements;
}","@Override public Collection<Object> getAddedObjects(C collection){
  List<Object> objects=new ArrayList<>(elements.size());
  for (  Object element : elements) {
    if (!collection.contains(element)) {
      objects.add(element);
    }
  }
  return objects;
}",0.44141689373297
168749,"@Override public Collection<Object> getAddedObjects(C collection){
  return Collections.<Object>singleton(element);
}","@Override public Collection<Object> getAddedObjects(C collection){
  if (collection.contains(element)) {
    return Collections.emptyList();
  }
  return Collections.<Object>singleton(element);
}",0.75
168750,"@Override public Collection<Object> getAddedObjects(C collection){
  return (Collection<Object>)elements;
}","@Override public Collection<Object> getAddedObjects(C collection){
  List<Object> objects=new ArrayList<>(elements.size());
  for (  Object element : elements) {
    if (!collection.contains(element)) {
      objects.add(element);
    }
  }
  return objects;
}",0.44141689373297
168751,"@Override protected void populateResult(Map<Object,TuplePromise> correlationValues,Object defaultKey,List<Object> list){
  if (batchSize == 1) {
    correlationValues.get(defaultKey).onResult(createCollection(list),this);
    return;
  }
  Map<Object,Collection<Object>> collections=new HashMap<Object,Collection<Object>>(list.size());
  for (int i=0; i < list.size(); i++) {
    Object[] element=(Object[])list.get(i);
    Collection<Object> result=collections.get(element[0]);
    if (result == null) {
      result=(Collection<Object>)createDefaultResult();
      collections.put(element[0],result);
    }
    if (element[1] != null) {
      result.add(element[1]);
    }
  }
  for (  Map.Entry<Object,Collection<Object>> entry : collections.entrySet()) {
    correlationValues.get(entry.getKey()).onResult(entry.getValue(),this);
  }
}","@Override protected void populateResult(Map<Object,TuplePromise> correlationValues,Object defaultKey,List<Object> list){
  if (batchSize == 1) {
    correlationValues.get(defaultKey).onResult(createCollection(list),this);
    return;
  }
  Map<Object,Collection<Object>> collections=new HashMap<Object,Collection<Object>>(list.size());
  for (int i=0; i < list.size(); i++) {
    Object[] element=(Object[])list.get(i);
    Collection<Object> result=collections.get(element[0]);
    if (result == null) {
      result=(Collection<Object>)createDefaultResult();
      collections.put(element[0],result);
    }
    if (element[1] != null) {
      add(result,element[1]);
    }
  }
  for (  Map.Entry<Object,Collection<Object>> entry : collections.entrySet()) {
    correlationValues.get(entry.getKey()).onResult(entry.getValue(),this);
  }
}",0.9916567342073898
168752,"@Override protected void populateResult(boolean usesViewRoot,Map<Object,Map<Object,TuplePromise>> correlationValues,List<Object[]> list){
  Map<Object,Map<Object,Collection<Object>>> collections;
  if (usesViewRoot) {
    collections=new HashMap<>(list.size());
    for (int i=0; i < list.size(); i++) {
      Object[] element=list.get(i);
      Map<Object,Collection<Object>> viewRootResult=collections.get(element[0]);
      if (viewRootResult == null) {
        viewRootResult=new HashMap<>();
        collections.put(element[0],viewRootResult);
      }
      Collection<Object> result=viewRootResult.get(element[1]);
      if (result == null) {
        result=(Collection<Object>)createDefaultResult();
        viewRootResult.put(element[1],result);
      }
      if (element[2] != null) {
        result.add(element[2]);
      }
    }
  }
 else {
    Map<Object,Collection<Object>> viewRootResult=new HashMap<>(list.size());
    collections=Collections.singletonMap(null,viewRootResult);
    for (int i=0; i < list.size(); i++) {
      Object[] element=(Object[])list.get(i);
      Collection<Object> result=viewRootResult.get(element[0]);
      if (result == null) {
        result=(Collection<Object>)createDefaultResult();
        viewRootResult.put(element[0],result);
      }
      if (element[1] != null) {
        result.add(element[1]);
      }
    }
  }
  for (  Map.Entry<Object,Map<Object,Collection<Object>>> entry : collections.entrySet()) {
    Map<Object,TuplePromise> tuplePromiseMap=correlationValues.get(entry.getKey());
    for (    Map.Entry<Object,Collection<Object>> correlationEntry : entry.getValue().entrySet()) {
      tuplePromiseMap.get(correlationEntry.getKey()).onResult(correlationEntry.getValue(),this);
    }
  }
}","@Override protected void populateResult(boolean usesViewRoot,Map<Object,Map<Object,TuplePromise>> correlationValues,List<Object[]> list){
  Map<Object,Map<Object,Collection<Object>>> collections;
  if (usesViewRoot) {
    collections=new HashMap<>(list.size());
    for (int i=0; i < list.size(); i++) {
      Object[] element=list.get(i);
      Map<Object,Collection<Object>> viewRootResult=collections.get(element[0]);
      if (viewRootResult == null) {
        viewRootResult=new HashMap<>();
        collections.put(element[0],viewRootResult);
      }
      Collection<Object> result=viewRootResult.get(element[1]);
      if (result == null) {
        result=(Collection<Object>)createDefaultResult();
        viewRootResult.put(element[1],result);
      }
      if (element[2] != null) {
        add(result,element[2]);
      }
    }
  }
 else {
    Map<Object,Collection<Object>> viewRootResult=new HashMap<>(list.size());
    collections=Collections.singletonMap(null,viewRootResult);
    for (int i=0; i < list.size(); i++) {
      Object[] element=(Object[])list.get(i);
      Collection<Object> result=viewRootResult.get(element[0]);
      if (result == null) {
        result=(Collection<Object>)createDefaultResult();
        viewRootResult.put(element[0],result);
      }
      if (element[1] != null) {
        add(result,element[1]);
      }
    }
  }
  for (  Map.Entry<Object,Map<Object,Collection<Object>>> entry : collections.entrySet()) {
    Map<Object,TuplePromise> tuplePromiseMap=correlationValues.get(entry.getKey());
    for (    Map.Entry<Object,Collection<Object>> correlationEntry : entry.getValue().entrySet()) {
      tuplePromiseMap.get(correlationEntry.getKey()).onResult(correlationEntry.getValue(),this);
    }
  }
}",0.9920091324200914
168753,"@Override protected DirtyAttributeFlusher<CollectionAttributeFlusher<E,V>,E,V> getDirtyFlusherForRecordingCollection(UpdateContext context,V initial,RecordingCollection<?,?> collection){
  if (collection.hasActions()) {
    boolean queueable=areActionsQueueable(collection);
    if (queueable) {
      if (elementDescriptor.shouldFlushMutations()) {
        if (elementDescriptor.isBasic()) {
          return this;
        }
        @SuppressWarnings(""String_Node_Str"") List<CollectionElementAttributeFlusher<E,V>> elementFlushers=getElementFlushers(context,(V)collection);
        if (elementFlushers == null) {
          return this;
        }
        int actionUnrelatedDirtyCount=getActionUnrelatedDirtyObjectCount(initial,elementFlushers,collection.getActions());
        if (actionUnrelatedDirtyCount == 0) {
          return partialFlusher(false,PluralFlushOperation.COLLECTION_REPLAY_AND_ELEMENT,collection.resetActions(context),elementFlushers);
        }
 else {
          return partialFlusher(true,PluralFlushOperation.COLLECTION_REPLAY_AND_ELEMENT,collection.resetActions(context),elementFlushers);
        }
      }
 else {
        return partialFlusher(false,PluralFlushOperation.COLLECTION_REPLAY_ONLY,collection.resetActions(context),Collections.<CollectionElementAttributeFlusher<E,V>>emptyList());
      }
    }
 else     if (inverseFlusher != null) {
      Map<Object,Object>[] addedAndRemoved=getAddedAndRemovedElements(collection,(List<CollectionAction<Collection<?>>>)(List<?>)collection.resetActions(context));
      Map<Object,Object> added=addedAndRemoved[0];
      Map<Object,Object> removed=addedAndRemoved[1];
      List<CollectionElementAttributeFlusher<E,V>> elementFlushers=getInverseElementFlushersForActions(context,collection,added,removed);
      return partialFlusher(false,PluralFlushOperation.ELEMENT_ONLY,Collections.EMPTY_LIST,elementFlushers);
    }
 else {
      if (elementDescriptor.shouldFlushMutations()) {
        if (elementDescriptor.isBasic()) {
          return this;
        }
        List<CollectionElementAttributeFlusher<E,V>> elementFlushers=getElementFlushers(context,(V)collection);
        if (elementFlushers == null) {
          return this;
        }
        return getReplayAndElementFlusher(context,initial,(V)collection,collection.resetActions(context),elementFlushers);
      }
 else {
        return getReplayOnlyFlusher(context,initial,(V)collection,collection.resetActions(context));
      }
    }
  }
  if (elementDescriptor.shouldFlushMutations()) {
    if (elementDescriptor.isBasic()) {
      return this;
    }
    return getElementOnlyFlusher(context,(V)collection);
  }
  return null;
}","@Override protected DirtyAttributeFlusher<CollectionAttributeFlusher<E,V>,E,V> getDirtyFlusherForRecordingCollection(UpdateContext context,V initial,RecordingCollection<?,?> collection){
  if (collection.hasActions()) {
    boolean queueable=areActionsQueueable(collection);
    if (queueable) {
      if (elementDescriptor.shouldFlushMutations()) {
        if (elementDescriptor.isBasic()) {
          return this;
        }
        @SuppressWarnings(""String_Node_Str"") List<CollectionElementAttributeFlusher<E,V>> elementFlushers=getElementFlushers(context,(V)collection);
        if (elementFlushers == null) {
          return this;
        }
        int actionUnrelatedDirtyCount=getActionUnrelatedDirtyObjectCount(initial,elementFlushers,collection.getActions());
        if (actionUnrelatedDirtyCount == 0) {
          return partialFlusher(false,PluralFlushOperation.COLLECTION_REPLAY_AND_ELEMENT,collection.resetActions(context),elementFlushers);
        }
 else {
          return partialFlusher(true,PluralFlushOperation.COLLECTION_REPLAY_AND_ELEMENT,collection.resetActions(context),elementFlushers);
        }
      }
 else {
        return partialFlusher(false,PluralFlushOperation.COLLECTION_REPLAY_ONLY,collection.resetActions(context),Collections.<CollectionElementAttributeFlusher<E,V>>emptyList());
      }
    }
 else     if (inverseFlusher != null) {
      Map<Object,Object>[] addedAndRemoved=getAddedAndRemovedElements(collection,context);
      Map<Object,Object> added=addedAndRemoved[0];
      Map<Object,Object> removed=addedAndRemoved[1];
      List<CollectionElementAttributeFlusher<E,V>> elementFlushers=getInverseElementFlushersForActions(context,collection,added,removed);
      return partialFlusher(false,PluralFlushOperation.ELEMENT_ONLY,Collections.EMPTY_LIST,elementFlushers);
    }
 else {
      if (elementDescriptor.shouldFlushMutations()) {
        if (elementDescriptor.isBasic()) {
          return this;
        }
        List<CollectionElementAttributeFlusher<E,V>> elementFlushers=getElementFlushers(context,(V)collection);
        if (elementFlushers == null) {
          return this;
        }
        return getReplayAndElementFlusher(context,initial,(V)collection,collection.resetActions(context),elementFlushers);
      }
 else {
        return getReplayOnlyFlusher(context,initial,(V)collection,collection.resetActions(context));
      }
    }
  }
  if (elementDescriptor.shouldFlushMutations()) {
    if (elementDescriptor.isBasic()) {
      return this;
    }
    return getElementOnlyFlusher(context,(V)collection);
  }
  return null;
}",0.9861084681255948
168754,"@Override @SuppressWarnings(""String_Node_Str"") public boolean flushEntity(UpdateContext context,E entity,Object view,V value,Runnable postReplaceListener){
  if (flushOperation != null) {
    replaceWithRecordingCollection(context,view,value,collectionActions);
    invokeFlushOperation(context,view,entity,value);
    return true;
  }
  if (collectionUpdatable) {
    boolean replace=false;
    boolean wasDirty=false;
    boolean isRecording=value instanceof RecordingCollection<?,?>;
    List<CollectionAction<Collection<?>>> actions=null;
    if (isRecording) {
      RecordingCollection<Collection<?>,?> recordingCollection=(RecordingCollection<Collection<?>,?>)value;
      if (inverseFlusher != null) {
        Map<Object,Object> added;
        Map<Object,Object> removed;
        if (recordingCollection.hasActions()) {
          Map<Object,Object>[] addedAndRemoved=getAddedAndRemovedElements(recordingCollection,(List<CollectionAction<Collection<?>>>)(List<?>)recordingCollection.resetActions(context));
          added=addedAndRemoved[0];
          removed=addedAndRemoved[1];
        }
 else {
          added=removed=new HashMap<>();
        }
        if (flushStrategy == FlushStrategy.ENTITY) {
          visitInverseElementFlushersForActions(context,recordingCollection,added,removed,new ElementFlusherEntityExecutor(context,entity));
        }
 else {
          visitInverseElementFlushersForActions(context,recordingCollection,added,removed,new ElementFlusherQueryExecutor(context,entity,null));
        }
        return true;
      }
      if (elementDescriptor.shouldFlushMutations()) {
        if (elementDescriptor.shouldJpaPersistOrMerge()) {
          wasDirty|=mergeAndRequeue(context,recordingCollection,(Collection<Object>)recordingCollection.getDelegate());
        }
 else         if (elementDescriptor.isSubview() && elementDescriptor.isIdentifiable()) {
          final ViewToEntityMapper viewToEntityMapper=elementDescriptor.getViewToEntityMapper();
          final Iterator<Object> iter=getRecordingIterator(value);
          try {
            while (iter.hasNext()) {
              Object elem=iter.next();
              viewToEntityMapper.applyToEntity(context,null,elem);
            }
          }
  finally {
            resetRecordingIterator(value);
          }
          wasDirty=true;
        }
 else {
          if (fetch && elementDescriptor.supportsDeepEqualityCheck()) {
            Collection<Object> jpaCollection=(Collection<Object>)entityAttributeMapper.getValue(entity);
            EqualityChecker equalityChecker;
            if (elementDescriptor.getBasicUserType() != null) {
              equalityChecker=new DeepEqualityChecker(elementDescriptor.getBasicUserType());
            }
 else {
              equalityChecker=new EntityWithViewEqualityChecker(elementDescriptor.getViewToEntityMapper());
            }
            actions=determineJpaCollectionActions(context,(V)jpaCollection,value,equalityChecker);
            if (actions.size() > value.size()) {
              replace=true;
            }
 else {
              return executeActions(context,jpaCollection,actions,elementDescriptor.getLoadOnlyViewToEntityMapper());
            }
          }
 else {
            replace=true;
          }
        }
      }
      if (!replace) {
        recordingCollection.replay((Collection<?>)entityAttributeMapper.getValue(entity),context,elementDescriptor.getLoadOnlyViewToEntityMapper(),removeListener);
      }
    }
 else {
      actions=new ArrayList<>();
      actions.add(new CollectionClearAction());
      if (value != null && !value.isEmpty()) {
        actions.add(new CollectionAddAllAction(value,collectionInstantiator.allowsDuplicates()));
      }
      value=replaceWithRecordingCollection(context,view,value,actions);
      if (fetch) {
        EqualityChecker equalityChecker=null;
        if (value == null || value.isEmpty()) {
          replace=true;
        }
 else         if (elementDescriptor.shouldFlushMutations()) {
          if (elementDescriptor.shouldJpaPersistOrMerge()) {
            equalityChecker=new IdentityEqualityChecker(elementDescriptor.getBasicUserType());
            wasDirty|=mergeAndRequeue(context,null,(Collection<Object>)value);
          }
 else           if (elementDescriptor.isSubview()) {
            if (elementDescriptor.isIdentifiable()) {
              equalityChecker=EqualsEqualityChecker.INSTANCE;
              ViewToEntityMapper viewToEntityMapper=elementDescriptor.getViewToEntityMapper();
              final Iterator<Object> iter=getRecordingIterator(value);
              try {
                while (iter.hasNext()) {
                  Object elem=iter.next();
                  viewToEntityMapper.applyToEntity(context,null,elem);
                }
              }
  finally {
                resetRecordingIterator(value);
              }
              wasDirty=true;
            }
 else {
              equalityChecker=new EntityWithViewEqualityChecker(elementDescriptor.getViewToEntityMapper());
            }
          }
 else           if (elementDescriptor.supportsDeepEqualityCheck()) {
            equalityChecker=new DeepEqualityChecker(elementDescriptor.getBasicUserType());
          }
 else {
            replace=true;
          }
        }
 else         if (elementDescriptor.supportsEqualityCheck()) {
          equalityChecker=new IdentityEqualityChecker(elementDescriptor.getBasicUserType());
        }
        if (!replace) {
          Collection<Object> jpaCollection=(Collection<Object>)entityAttributeMapper.getValue(entity);
          if (jpaCollection == null || jpaCollection.isEmpty()) {
            replace=true;
          }
 else           if (equalityChecker != null) {
            actions=determineJpaCollectionActions(context,(V)jpaCollection,value,equalityChecker);
            if (actions.size() > value.size()) {
              replace=true;
            }
 else {
              wasDirty|=executeActions(context,jpaCollection,actions,elementDescriptor.getLoadOnlyViewToEntityMapper());
            }
          }
 else {
            replace=true;
          }
        }
      }
 else {
        replace=true;
      }
    }
    if (replace) {
      replaceCollection(context,entity,value);
      return true;
    }
    return wasDirty;
  }
 else   if (elementDescriptor.shouldFlushMutations()) {
    if (value != null && !value.isEmpty()) {
      return mergeCollectionElements(context,view,entity,value);
    }
    return false;
  }
 else {
    replaceCollection(context,entity,value);
    return true;
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public boolean flushEntity(UpdateContext context,E entity,Object view,V value,Runnable postReplaceListener){
  if (flushOperation != null) {
    replaceWithRecordingCollection(context,view,value,collectionActions);
    invokeFlushOperation(context,view,entity,value);
    return true;
  }
  if (collectionUpdatable) {
    boolean replace=false;
    boolean wasDirty=false;
    boolean isRecording=value instanceof RecordingCollection<?,?>;
    List<CollectionAction<Collection<?>>> actions=null;
    if (isRecording) {
      RecordingCollection<Collection<?>,?> recordingCollection=(RecordingCollection<Collection<?>,?>)value;
      if (inverseFlusher != null) {
        Map<Object,Object> added;
        Map<Object,Object> removed;
        if (recordingCollection.hasActions()) {
          Map<Object,Object>[] addedAndRemoved=getAddedAndRemovedElements(recordingCollection,context);
          added=addedAndRemoved[0];
          removed=addedAndRemoved[1];
        }
 else {
          added=removed=new HashMap<>();
        }
        if (flushStrategy == FlushStrategy.ENTITY) {
          visitInverseElementFlushersForActions(context,recordingCollection,added,removed,new ElementFlusherEntityExecutor(context,entity));
        }
 else {
          visitInverseElementFlushersForActions(context,recordingCollection,added,removed,new ElementFlusherQueryExecutor(context,entity,null));
        }
        return true;
      }
      if (elementDescriptor.shouldFlushMutations()) {
        if (elementDescriptor.shouldJpaPersistOrMerge()) {
          wasDirty|=mergeAndRequeue(context,recordingCollection,(Collection<Object>)recordingCollection.getDelegate());
        }
 else         if (elementDescriptor.isSubview() && elementDescriptor.isIdentifiable()) {
          final ViewToEntityMapper viewToEntityMapper=elementDescriptor.getViewToEntityMapper();
          final Iterator<Object> iter=getRecordingIterator(value);
          try {
            while (iter.hasNext()) {
              Object elem=iter.next();
              viewToEntityMapper.applyToEntity(context,null,elem);
            }
          }
  finally {
            resetRecordingIterator(value);
          }
          wasDirty=true;
        }
 else {
          if (fetch && elementDescriptor.supportsDeepEqualityCheck()) {
            Collection<Object> jpaCollection=(Collection<Object>)entityAttributeMapper.getValue(entity);
            EqualityChecker equalityChecker;
            if (elementDescriptor.getBasicUserType() != null) {
              equalityChecker=new DeepEqualityChecker(elementDescriptor.getBasicUserType());
            }
 else {
              equalityChecker=new EntityWithViewEqualityChecker(elementDescriptor.getViewToEntityMapper());
            }
            actions=determineJpaCollectionActions(context,(V)jpaCollection,value,equalityChecker);
            if (actions.size() > value.size()) {
              replace=true;
            }
 else {
              return executeActions(context,jpaCollection,actions,elementDescriptor.getLoadOnlyViewToEntityMapper());
            }
          }
 else {
            replace=true;
          }
        }
      }
      if (!replace) {
        recordingCollection.replay((Collection<?>)entityAttributeMapper.getValue(entity),context,elementDescriptor.getLoadOnlyViewToEntityMapper(),removeListener);
      }
    }
 else {
      actions=new ArrayList<>();
      actions.add(new CollectionClearAction());
      if (value != null && !value.isEmpty()) {
        actions.add(new CollectionAddAllAction(value,collectionInstantiator.allowsDuplicates()));
      }
      value=replaceWithRecordingCollection(context,view,value,actions);
      if (fetch) {
        EqualityChecker equalityChecker=null;
        if (value == null || value.isEmpty()) {
          replace=true;
        }
 else         if (elementDescriptor.shouldFlushMutations()) {
          if (elementDescriptor.shouldJpaPersistOrMerge()) {
            equalityChecker=new IdentityEqualityChecker(elementDescriptor.getBasicUserType());
            wasDirty|=mergeAndRequeue(context,null,(Collection<Object>)value);
          }
 else           if (elementDescriptor.isSubview()) {
            if (elementDescriptor.isIdentifiable()) {
              equalityChecker=EqualsEqualityChecker.INSTANCE;
              ViewToEntityMapper viewToEntityMapper=elementDescriptor.getViewToEntityMapper();
              final Iterator<Object> iter=getRecordingIterator(value);
              try {
                while (iter.hasNext()) {
                  Object elem=iter.next();
                  viewToEntityMapper.applyToEntity(context,null,elem);
                }
              }
  finally {
                resetRecordingIterator(value);
              }
              wasDirty=true;
            }
 else {
              equalityChecker=new EntityWithViewEqualityChecker(elementDescriptor.getViewToEntityMapper());
            }
          }
 else           if (elementDescriptor.supportsDeepEqualityCheck()) {
            equalityChecker=new DeepEqualityChecker(elementDescriptor.getBasicUserType());
          }
 else {
            replace=true;
          }
        }
 else         if (elementDescriptor.supportsEqualityCheck()) {
          equalityChecker=new IdentityEqualityChecker(elementDescriptor.getBasicUserType());
        }
        if (!replace) {
          Collection<Object> jpaCollection=(Collection<Object>)entityAttributeMapper.getValue(entity);
          if (jpaCollection == null || jpaCollection.isEmpty()) {
            replace=true;
          }
 else           if (equalityChecker != null) {
            actions=determineJpaCollectionActions(context,(V)jpaCollection,value,equalityChecker);
            if (actions.size() > value.size()) {
              replace=true;
            }
 else {
              wasDirty|=executeActions(context,jpaCollection,actions,elementDescriptor.getLoadOnlyViewToEntityMapper());
            }
          }
 else {
            replace=true;
          }
        }
      }
 else {
        replace=true;
      }
    }
    if (replace) {
      replaceCollection(context,entity,value);
      return true;
    }
    return wasDirty;
  }
 else   if (elementDescriptor.shouldFlushMutations()) {
    if (value != null && !value.isEmpty()) {
      return mergeCollectionElements(context,view,entity,value);
    }
    return false;
  }
 else {
    replaceCollection(context,entity,value);
    return true;
  }
}",0.993707796193984
168755,"@Override public void flushQuery(UpdateContext context,String parameterPrefix,Query query,Object view,V value){
  if (!supportsQueryFlush()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  if (elementFlushers != null) {
    for (    CollectionElementAttributeFlusher<E,V> elementFlusher : elementFlushers) {
      elementFlusher.flushQuery(context,null,null,view,value);
    }
  }
 else {
    RecordingCollection<Collection<?>,?> recordingCollection=(RecordingCollection<Collection<?>,?>)value;
    Map<Object,Object> added;
    Map<Object,Object> removed;
    if (recordingCollection.hasActions()) {
      Map<Object,Object>[] addedAndRemoved=getAddedAndRemovedElements(recordingCollection,(List<CollectionAction<Collection<?>>>)(List<?>)recordingCollection.resetActions(context));
      added=addedAndRemoved[0];
      removed=addedAndRemoved[1];
    }
 else {
      added=removed=new HashMap<>();
    }
    visitInverseElementFlushersForActions(context,recordingCollection,added,removed,new ElementFlusherQueryExecutor(context,null,view));
  }
}","@Override public void flushQuery(UpdateContext context,String parameterPrefix,Query query,Object view,V value){
  if (!supportsQueryFlush()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  if (elementFlushers != null) {
    for (    CollectionElementAttributeFlusher<E,V> elementFlusher : elementFlushers) {
      elementFlusher.flushQuery(context,null,null,view,value);
    }
  }
 else {
    RecordingCollection<Collection<?>,?> recordingCollection=(RecordingCollection<Collection<?>,?>)value;
    Map<Object,Object> added;
    Map<Object,Object> removed;
    if (recordingCollection.hasActions()) {
      Map<Object,Object>[] addedAndRemoved=getAddedAndRemovedElements(recordingCollection,context);
      added=addedAndRemoved[0];
      removed=addedAndRemoved[1];
    }
 else {
      added=removed=new HashMap<>();
    }
    visitInverseElementFlushersForActions(context,recordingCollection,added,removed,new ElementFlusherQueryExecutor(context,null,view));
  }
}",0.9602327837051406
168756,"@Override @SuppressWarnings(""String_Node_Str"") public FetchGraphNode<?> mergeWith(List<CollectionAttributeFlusher<E,V>> fetchGraphNodes){
  boolean fetchChanged=false;
  List<FetchGraphNode> nestedFlushers=new ArrayList<>(fetchGraphNodes.size());
  for (int i=0; i < fetchGraphNodes.size(); i++) {
    CollectionAttributeFlusher<E,V> node=fetchGraphNodes.get(i);
    fetchChanged|=this.fetch != node.fetch;
    if (node.nestedGraphNode != null) {
      if (node.nestedGraphNode instanceof CollectionElementFetchGraphNode) {
        nestedFlushers.add(((CollectionElementFetchGraphNode)node.nestedGraphNode).nestedGraphNode);
      }
 else {
        nestedFlushers.add(node.nestedGraphNode);
      }
    }
  }
  final boolean newFetch=fetchChanged || this.fetch;
  if (nestedFlushers.isEmpty()) {
    if (fetchChanged && this.fetch != newFetch) {
      return new AttributeFetchGraphNode(attributeName,mapping,newFetch,fetchGraphNodes.get(0));
    }
 else {
      return this;
    }
  }
  FetchGraphNode firstFlusher=nestedFlushers.get(0);
  FetchGraphNode<?> fetchGraphNode=firstFlusher.mergeWith((List)nestedFlushers);
  if (!fetchChanged && fetchGraphNode == firstFlusher) {
    return this;
  }
  return new AttributeFetchGraphNode(attributeName,mapping,newFetch,fetchGraphNode);
}","@Override @SuppressWarnings(""String_Node_Str"") public FetchGraphNode<?> mergeWith(List<CollectionAttributeFlusher<E,V>> fetchGraphNodes){
  boolean fetchChanged=false;
  List<FetchGraphNode> nestedFlushers=new ArrayList<>(fetchGraphNodes.size());
  for (int i=0; i < fetchGraphNodes.size(); i++) {
    CollectionAttributeFlusher<E,V> node=fetchGraphNodes.get(i);
    fetchChanged|=this.fetch != node.fetch;
    if (node.nestedGraphNode != null) {
      if (node.nestedGraphNode instanceof CollectionElementFetchGraphNode) {
        CollectionElementFetchGraphNode collectionElementFetchGraphNode=(CollectionElementFetchGraphNode)node.nestedGraphNode;
        if (collectionElementFetchGraphNode.nestedGraphNode != null) {
          nestedFlushers.add(collectionElementFetchGraphNode.nestedGraphNode);
        }
      }
 else {
        nestedFlushers.add(node.nestedGraphNode);
      }
    }
  }
  final boolean newFetch=fetchChanged || this.fetch;
  if (nestedFlushers.isEmpty()) {
    if (fetchChanged && this.fetch != newFetch) {
      return new AttributeFetchGraphNode(attributeName,mapping,newFetch,fetchGraphNodes.get(0));
    }
 else {
      return this;
    }
  }
  FetchGraphNode firstFlusher=nestedFlushers.get(0);
  FetchGraphNode<?> fetchGraphNode=firstFlusher.mergeWith((List)nestedFlushers);
  if (!fetchChanged && fetchGraphNode == firstFlusher) {
    return this;
  }
  return new AttributeFetchGraphNode(attributeName,mapping,newFetch,fetchGraphNode);
}",0.888162672476398
168757,"protected DirtyAttributeFlusher<CollectionAttributeFlusher<E,V>,E,V> determineDirtyFlusherForNewCollection(UpdateContext context,V initial,V current){
  EqualityChecker equalityChecker;
  if (elementDescriptor.isSubview()) {
    equalityChecker=EqualsEqualityChecker.INSTANCE;
  }
 else {
    equalityChecker=new IdentityEqualityChecker(elementDescriptor.getBasicUserType());
  }
  List<CollectionAction<Collection<?>>> collectionActions=determineCollectionActions(context,initial,current,equalityChecker);
  if (collectionActions.size() == 0 && !elementDescriptor.shouldFlushMutations()) {
    if (current instanceof RecordingCollection<?,?>) {
      ((RecordingCollection<?,?>)current).resetActions(context);
    }
    return null;
  }
  if (inverseFlusher != null) {
    if (current instanceof RecordingCollection<?,?>) {
      ((RecordingCollection<?,?>)current).resetActions(context);
    }
    Map<Object,Object>[] addedAndRemoved=getAddedAndRemovedElements(current,collectionActions);
    Map<Object,Object> added=addedAndRemoved[0];
    Map<Object,Object> removed=addedAndRemoved[1];
    List<CollectionElementAttributeFlusher<E,V>> elementFlushers=getInverseElementFlushersForActions(context,current,added,removed);
    return partialFlusher(false,PluralFlushOperation.ELEMENT_ONLY,Collections.EMPTY_LIST,elementFlushers);
  }
  if (collectionActions.size() > current.size()) {
    if (current instanceof RecordingCollection<?,?>) {
      ((RecordingCollection<?,?>)current).resetActions(context);
    }
    if (elementDescriptor.shouldFlushMutations()) {
      return getReplaceOrMergeAndElementFlusher(context,initial,current);
    }
 else {
      return getReplaceOrMergeOnlyFlusher(context,initial,current);
    }
  }
 else {
    if (current instanceof RecordingCollection<?,?>) {
      RecordingCollection<Collection<?>,?> recordingCollection=(RecordingCollection<Collection<?>,?>)current;
      recordingCollection.initiateActionsAgainstState(collectionActions,initial);
    }
    if (elementDescriptor.shouldFlushMutations()) {
      List<CollectionElementAttributeFlusher<E,V>> elementFlushers=getElementFlushers(context,current);
      if (elementFlushers == null) {
        return this;
      }
      if (current instanceof RecordingCollection<?,?>) {
        ((RecordingCollection<?,?>)current).resetActions(context);
      }
      return getReplayAndElementFlusher(context,initial,current,collectionActions,elementFlushers);
    }
 else {
      if (current instanceof RecordingCollection<?,?>) {
        ((RecordingCollection<?,?>)current).resetActions(context);
      }
      return getReplayOnlyFlusher(context,initial,current,collectionActions);
    }
  }
}","protected DirtyAttributeFlusher<CollectionAttributeFlusher<E,V>,E,V> determineDirtyFlusherForNewCollection(UpdateContext context,V initial,V current){
  EqualityChecker equalityChecker;
  if (elementDescriptor.isSubview()) {
    equalityChecker=EqualsEqualityChecker.INSTANCE;
  }
 else {
    equalityChecker=new IdentityEqualityChecker(elementDescriptor.getBasicUserType());
  }
  List<CollectionAction<Collection<?>>> collectionActions=determineCollectionActions(context,initial,current,equalityChecker);
  if (collectionActions.size() == 0 && !elementDescriptor.shouldFlushMutations()) {
    if (current instanceof RecordingCollection<?,?>) {
      ((RecordingCollection<?,?>)current).resetActions(context);
    }
    return null;
  }
  if (inverseFlusher != null) {
    Map<Object,Object>[] addedAndRemoved;
    if (current instanceof RecordingCollection<?,?>) {
      addedAndRemoved=getAddedAndRemovedElements((RecordingCollection<?,?>)current,context);
    }
 else {
      addedAndRemoved=getAddedAndRemovedElements(current,collectionActions);
    }
    Map<Object,Object> added=addedAndRemoved[0];
    Map<Object,Object> removed=addedAndRemoved[1];
    List<CollectionElementAttributeFlusher<E,V>> elementFlushers=getInverseElementFlushersForActions(context,current,added,removed);
    return partialFlusher(false,PluralFlushOperation.ELEMENT_ONLY,Collections.EMPTY_LIST,elementFlushers);
  }
  if (collectionActions.size() > current.size()) {
    if (current instanceof RecordingCollection<?,?>) {
      ((RecordingCollection<?,?>)current).resetActions(context);
    }
    if (elementDescriptor.shouldFlushMutations()) {
      return getReplaceOrMergeAndElementFlusher(context,initial,current);
    }
 else {
      return getReplaceOrMergeOnlyFlusher(context,initial,current);
    }
  }
 else {
    if (current instanceof RecordingCollection<?,?>) {
      RecordingCollection<Collection<?>,?> recordingCollection=(RecordingCollection<Collection<?>,?>)current;
      recordingCollection.initiateActionsAgainstState(collectionActions,initial);
    }
    if (elementDescriptor.shouldFlushMutations()) {
      List<CollectionElementAttributeFlusher<E,V>> elementFlushers=getElementFlushers(context,current);
      if (elementFlushers == null) {
        return this;
      }
      if (current instanceof RecordingCollection<?,?>) {
        ((RecordingCollection<?,?>)current).resetActions(context);
      }
      return getReplayAndElementFlusher(context,initial,current,collectionActions,elementFlushers);
    }
 else {
      if (current instanceof RecordingCollection<?,?>) {
        ((RecordingCollection<?,?>)current).resetActions(context);
      }
      return getReplayOnlyFlusher(context,initial,current,collectionActions);
    }
  }
}",0.9323751612308826
168758,"private void deferredFlushEntity(UpdateContext context,Object entity,MutableStateTrackable updatableProxy,List<Integer> deferredFlushers){
  Object[] state=updatableProxy.$$_getMutableState();
  if (updatableProxy instanceof DirtyStateTrackable) {
    Object[] initialState=((DirtyStateTrackable)updatableProxy).$$_getInitialState();
    for (int i=0; i < deferredFlushers.size(); i++) {
      final int index=deferredFlushers.get(i);
      final DirtyAttributeFlusher<?,Object,Object> flusher=flushers[index];
      Object newInitialValue=flusher.cloneDeep(updatableProxy,initialState[index],state[index]);
      flusher.flushEntity(context,entity,updatableProxy,state[index],null);
      initialState[i]=flusher.getNewInitialValue(context,newInitialValue,state[index]);
    }
  }
 else {
    for (int i=0; i < deferredFlushers.size(); i++) {
      final int index=deferredFlushers.get(i);
      final DirtyAttributeFlusher<?,Object,Object> flusher=flushers[index];
      flusher.flushEntity(context,entity,updatableProxy,state[index],null);
    }
  }
}","private void deferredFlushEntity(UpdateContext context,Object entity,MutableStateTrackable updatableProxy,List<Integer> deferredFlushers){
  Object[] state=updatableProxy.$$_getMutableState();
  if (updatableProxy instanceof DirtyStateTrackable) {
    Object[] initialState=((DirtyStateTrackable)updatableProxy).$$_getInitialState();
    for (int i=0; i < deferredFlushers.size(); i++) {
      final int index=deferredFlushers.get(i);
      final DirtyAttributeFlusher<?,Object,Object> flusher=flushers[index];
      Object newInitialValue=flusher.cloneDeep(updatableProxy,initialState[index],state[index]);
      flusher.flushEntity(context,entity,updatableProxy,state[index],null);
      initialState[index]=flusher.getNewInitialValue(context,newInitialValue,state[index]);
    }
  }
 else {
    for (int i=0; i < deferredFlushers.size(); i++) {
      final int index=deferredFlushers.get(i);
      final DirtyAttributeFlusher<?,Object,Object> flusher=flushers[index];
      flusher.flushEntity(context,entity,updatableProxy,state[index],null);
    }
  }
}",0.9981060606060606
168759,"@Override public void flushQuery(UpdateContext context,String parameterPrefix,Query query,Object view,Object value){
  if (element != null) {
    value=element;
  }
 else   if (value == null || !(value instanceof MutableStateTrackable)) {
    return;
  }
  MutableStateTrackable element=(MutableStateTrackable)value;
  if (context.isRemovedObject(element) || !element.$$_hasParent() && view != value) {
    return;
  }
  boolean shouldPersist=persist == Boolean.TRUE || persist == null && element.$$_isNew();
  if (shouldPersist) {
    flushEntity(context,null,value,value,null);
    return;
  }
  if (optimisticLockProtected && versionFlusher != null) {
    context.getInitialStateResetter().addVersionedView(element,element.$$_getVersion());
    versionFlusher.flushQuery(context,parameterPrefix,query,value,element.$$_getVersion());
  }
  Object[] state=element.$$_getMutableState();
  List<Integer> deferredFlushers=null;
  if (value instanceof DirtyStateTrackable) {
    Object[] initialState=((DirtyStateTrackable)value).$$_getInitialState();
    context.getInitialStateResetter().addState(initialState,initialState.clone());
    for (int i=0; i < state.length; i++) {
      DirtyAttributeFlusher<?,Object,Object> flusher=flushers[i];
      if (flusher != null) {
        if (flusher.requiresFlushAfterPersist(state[i])) {
          if (deferredFlushers == null) {
            deferredFlushers=new ArrayList<>();
          }
          deferredFlushers.add(i);
        }
 else {
          Object newInitialValue=flusher.cloneDeep(value,initialState[i],state[i]);
          flusher.flushQuery(context,parameterPrefix,query,value,state[i]);
          initialState[i]=flusher.getNewInitialValue(context,newInitialValue,state[i]);
        }
      }
    }
  }
 else {
    for (int i=0; i < state.length; i++) {
      DirtyAttributeFlusher<?,Object,Object> flusher=flushers[i];
      if (flusher != null) {
        if (flusher.requiresFlushAfterPersist(state[i])) {
          if (deferredFlushers == null) {
            deferredFlushers=new ArrayList<>();
          }
          deferredFlushers.add(i);
        }
 else {
          flusher.flushQuery(context,parameterPrefix,query,value,state[i]);
        }
      }
    }
  }
  for (int i=state.length; i < flushers.length; i++) {
    if (flushers[i] != null) {
      flushers[i].flushQuery(context,parameterPrefix,query,value,flushers[i].getViewAttributeAccessor().getValue(value));
    }
  }
  if (deferredFlushers != null) {
    if (value instanceof DirtyStateTrackable) {
      Object[] initialState=((DirtyStateTrackable)value).$$_getInitialState();
      for (int i=0; i < deferredFlushers.size(); i++) {
        final int index=deferredFlushers.get(i);
        final DirtyAttributeFlusher<?,Object,Object> flusher=flushers[index];
        Object newInitialValue=flusher.cloneDeep(value,initialState[index],state[index]);
        flusher.flushQuery(context,parameterPrefix,query,value,state[index]);
        initialState[i]=flusher.getNewInitialValue(context,newInitialValue,state[index]);
      }
    }
 else {
      for (int i=0; i < deferredFlushers.size(); i++) {
        final int index=deferredFlushers.get(i);
        final DirtyAttributeFlusher<?,Object,Object> flusher=flushers[index];
        flusher.flushQuery(context,parameterPrefix,query,value,state[index]);
      }
    }
  }
}","@Override public void flushQuery(UpdateContext context,String parameterPrefix,Query query,Object view,Object value){
  if (element != null) {
    value=element;
  }
 else   if (value == null || !(value instanceof MutableStateTrackable)) {
    return;
  }
  MutableStateTrackable element=(MutableStateTrackable)value;
  if (context.isRemovedObject(element) || !element.$$_hasParent() && view != value) {
    return;
  }
  boolean shouldPersist=persist == Boolean.TRUE || persist == null && element.$$_isNew();
  if (shouldPersist) {
    flushEntity(context,null,value,value,null);
    return;
  }
  if (optimisticLockProtected && versionFlusher != null) {
    context.getInitialStateResetter().addVersionedView(element,element.$$_getVersion());
    versionFlusher.flushQuery(context,parameterPrefix,query,value,element.$$_getVersion());
  }
  Object[] state=element.$$_getMutableState();
  List<Integer> deferredFlushers=null;
  if (value instanceof DirtyStateTrackable) {
    Object[] initialState=((DirtyStateTrackable)value).$$_getInitialState();
    context.getInitialStateResetter().addState(initialState,initialState.clone());
    for (int i=0; i < state.length; i++) {
      DirtyAttributeFlusher<?,Object,Object> flusher=flushers[i];
      if (flusher != null) {
        if (flusher.requiresFlushAfterPersist(state[i])) {
          if (deferredFlushers == null) {
            deferredFlushers=new ArrayList<>();
          }
          deferredFlushers.add(i);
        }
 else {
          Object newInitialValue=flusher.cloneDeep(value,initialState[i],state[i]);
          flusher.flushQuery(context,parameterPrefix,query,value,state[i]);
          initialState[i]=flusher.getNewInitialValue(context,newInitialValue,state[i]);
        }
      }
    }
  }
 else {
    for (int i=0; i < state.length; i++) {
      DirtyAttributeFlusher<?,Object,Object> flusher=flushers[i];
      if (flusher != null) {
        if (flusher.requiresFlushAfterPersist(state[i])) {
          if (deferredFlushers == null) {
            deferredFlushers=new ArrayList<>();
          }
          deferredFlushers.add(i);
        }
 else {
          flusher.flushQuery(context,parameterPrefix,query,value,state[i]);
        }
      }
    }
  }
  for (int i=state.length; i < flushers.length; i++) {
    if (flushers[i] != null) {
      flushers[i].flushQuery(context,parameterPrefix,query,value,flushers[i].getViewAttributeAccessor().getValue(value));
    }
  }
  if (deferredFlushers != null) {
    if (value instanceof DirtyStateTrackable) {
      Object[] initialState=((DirtyStateTrackable)value).$$_getInitialState();
      for (int i=0; i < deferredFlushers.size(); i++) {
        final int index=deferredFlushers.get(i);
        final DirtyAttributeFlusher<?,Object,Object> flusher=flushers[index];
        Object newInitialValue=flusher.cloneDeep(value,initialState[index],state[index]);
        flusher.flushQuery(context,parameterPrefix,query,value,state[index]);
        initialState[index]=flusher.getNewInitialValue(context,newInitialValue,state[index]);
      }
    }
 else {
      for (int i=0; i < deferredFlushers.size(); i++) {
        final int index=deferredFlushers.get(i);
        final DirtyAttributeFlusher<?,Object,Object> flusher=flushers[index];
        flusher.flushQuery(context,parameterPrefix,query,value,state[index]);
      }
    }
  }
}",0.9994026284348864
168760,"private String getIdAttribute(){
  return getIdAttribute(getDomainClass());
}","private String getIdAttribute(Class<?> entityClass){
  return cbf.getService(EntityMetamodel.class).getManagedType(ExtendedManagedType.class,entityClass).getIdAttribute().getName();
}",0.5076923076923077
168761,"public EntityViewAwareRepositoryImpl(JpaEntityInformation<E,?> entityInformation,EntityManager entityManager,CriteriaBuilderFactory cbf,EntityViewManager evm,Class<V> entityViewClass){
  this.entityInformation=entityInformation;
  this.entityManager=entityManager;
  this.cbf=cbf;
  this.evm=evm;
  this.entityViewClass=entityViewClass;
}","public EntityViewAwareRepositoryImpl(JpaEntityInformation<E,?> entityInformation,EntityManager entityManager,CriteriaBuilderFactory cbf,EntityViewManager evm,Class<V> entityViewClass){
  this.entityInformation=entityInformation;
  this.entityManager=entityManager;
  this.cbf=cbf;
  this.evm=evm;
  this.entityViewClass=entityViewClass;
  this.idAttributeName=getIdAttribute(getDomainClass());
}",0.922237380627558
168762,"@Override public boolean exists(ID id){
  Assert.notNull(id,ID_MUST_NOT_BE_NULL);
  TypedQuery<Long> existsQuery=cbf.create(entityManager,Long.class).from(getDomainClass()).select(""String_Node_Str"").where(getIdAttribute()).eq(id).getQuery();
  applyRepositoryMethodMetadata(existsQuery,true);
  return existsQuery.getSingleResult() > 0;
}","@Override public boolean exists(ID id){
  Assert.notNull(id,ID_MUST_NOT_BE_NULL);
  TypedQuery<Object> existsQuery=cbf.create(entityManager,Object.class).from(getDomainClass()).select(""String_Node_Str"").where(idAttributeName).eq(id).setMaxResults(1).getQuery();
  applyRepositoryMethodMetadata(existsQuery,true);
  try {
    return !existsQuery.getResultList().isEmpty();
  }
 catch (  NoResultException e) {
    return false;
  }
}",0.4753246753246753
168763,"@Before public void setUpContext() throws Exception {
  testContextManager=new TestContextManager(getClass());
  testContextManager.prepareTestInstance(this);
  testContextManager.registerTestExecutionListeners(new DirtiesContextTestExecutionListener());
  cleanDatabase();
}","@Before public void setUpContext() throws Exception {
  cleanDatabase();
  this.em.getTransaction().rollback();
  this.em.close();
  this.emf.close();
  this.emf=null;
  this.em=null;
  this.cbf=null;
  this.jpaProvider=null;
  this.dbmsDialect=null;
  CustomLocalContainerEntityManagerFactoryBean.properties=createProperties(""String_Node_Str"");
  testContextManager=new TestContextManager(getClass());
  testContextManager.prepareTestInstance(this);
  testContextManager.registerTestExecutionListeners(new DirtiesContextTestExecutionListener());
}",0.5953827460510328
168764,"@Test @Category({NoMSSQL.class}) public void testFindAllBySpecPageable(){
  final Document d4=createDocument(""String_Node_Str"",null,2L,null);
  final Document d3=createDocument(""String_Node_Str"",null,3L,null);
  final Document d2=createDocument(""String_Node_Str"",null,2L,null);
  final Document d1=createDocument(""String_Node_Str"",null,1L,null);
  Page<DocumentAccessor> actual=DocumentAccessors.of(((DocumentRepository)documentRepository).findAll(new Specification<Document>(){
    @Override public Predicate toPredicate(    Root<Document> root,    CriteriaQuery<?> criteriaQuery,    CriteriaBuilder criteriaBuilder){
      return criteriaBuilder.gt(root.<Long>get(""String_Node_Str""),1L);
    }
  }
,new PageRequest(1,2,Sort.Direction.ASC,""String_Node_Str"",""String_Node_Str"")));
  List<Long> actualIds=getIdsFromViews(actual);
  assertEquals(1,actual.getNumberOfElements());
  assertTrue(actualIds.contains(d4.getId()));
}","@Test public void testFindAllBySpecPageable(){
  final Document d4=createDocument(""String_Node_Str"",null,2L,null);
  final Document d3=createDocument(""String_Node_Str"",null,3L,null);
  final Document d2=createDocument(""String_Node_Str"",null,2L,null);
  final Document d1=createDocument(""String_Node_Str"",null,1L,null);
  Page<DocumentAccessor> actual=DocumentAccessors.of(((DocumentRepository)documentRepository).findAll(new Specification<Document>(){
    @Override public Predicate toPredicate(    Root<Document> root,    CriteriaQuery<?> criteriaQuery,    CriteriaBuilder criteriaBuilder){
      return criteriaBuilder.gt(root.<Long>get(""String_Node_Str""),1L);
    }
  }
,new PageRequest(1,2,Sort.Direction.ASC,""String_Node_Str"",""String_Node_Str"")));
  List<Long> actualIds=getIdsFromViews(actual);
  assertEquals(1,actual.getNumberOfElements());
  assertTrue(actualIds.contains(d4.getId()));
}",0.9851566794942276
168765,"@Test @Category({NoMSSQL.class}) public void testFindSliceByAgeGreaterThanEqual(){
  final Document d1=createDocument(""String_Node_Str"",null,3L,null);
  final Document d2=createDocument(""String_Node_Str"",null,4L,null);
  final Document d3=createDocument(""String_Node_Str"",null,5L,null);
  Slice<DocumentAccessor> actual=DocumentAccessors.of(documentRepository.findSliceByAgeGreaterThanEqual(4L,new PageRequest(1,1,Sort.Direction.ASC,""String_Node_Str"",""String_Node_Str"")));
  List<Long> actualIds=getIdsFromViews(actual);
  assertEquals(1,actual.getSize());
  assertFalse(actual.hasNext());
  assertTrue(actual.hasPrevious());
  assertTrue(actualIds.contains(d3.getId()));
}","@Test public void testFindSliceByAgeGreaterThanEqual(){
  final Document d1=createDocument(""String_Node_Str"",null,3L,null);
  final Document d2=createDocument(""String_Node_Str"",null,4L,null);
  final Document d3=createDocument(""String_Node_Str"",null,5L,null);
  Slice<DocumentAccessor> actual=DocumentAccessors.of(documentRepository.findSliceByAgeGreaterThanEqual(4L,new PageRequest(1,1,Sort.Direction.ASC,""String_Node_Str"",""String_Node_Str"")));
  List<Long> actualIds=getIdsFromViews(actual);
  assertEquals(1,actual.getSize());
  assertFalse(actual.hasNext());
  assertTrue(actual.hasPrevious());
  assertTrue(actualIds.contains(d3.getId()));
}",0.979529946929492
168766,"@Test @Category({NoMSSQL.class}) public void testFindByNameInPaginated(){
  Assume.assumeFalse(isEntityRepository() && isEclipseLink());
  final Document d1=createDocument(""String_Node_Str"");
  final Document d2=createDocument(""String_Node_Str"");
  final Document d3=createDocument(""String_Node_Str"");
  Page<DocumentAccessor> actual=DocumentAccessors.of(documentRepository.findByNameInOrderById(new PageRequest(0,1),d2.getName(),d3.getName()));
  List<Long> actualIds=getIdsFromViews(actual);
  assertEquals(2,actual.getTotalPages());
  assertEquals(0,actual.getNumber());
  assertEquals(1,actual.getNumberOfElements());
  assertEquals(1,actual.getSize());
  assertTrue(actualIds.contains(d2.getId()));
  actual=DocumentAccessors.of(documentRepository.findByNameInOrderById(actual.nextPageable(),d2.getName(),d3.getName()));
  actualIds=getIdsFromViews(actual);
  assertEquals(2,actual.getTotalPages());
  assertEquals(1,actual.getNumber());
  assertEquals(1,actual.getNumberOfElements());
  assertEquals(1,actual.getSize());
  assertTrue(actualIds.contains(d3.getId()));
}","@Test public void testFindByNameInPaginated(){
  Assume.assumeFalse(isEntityRepository() && isEclipseLink());
  final Document d1=createDocument(""String_Node_Str"");
  final Document d2=createDocument(""String_Node_Str"");
  final Document d3=createDocument(""String_Node_Str"");
  Page<DocumentAccessor> actual=DocumentAccessors.of(documentRepository.findByNameInOrderById(new PageRequest(0,1),d2.getName(),d3.getName()));
  List<Long> actualIds=getIdsFromViews(actual);
  assertEquals(2,actual.getTotalPages());
  assertEquals(0,actual.getNumber());
  assertEquals(1,actual.getNumberOfElements());
  assertEquals(1,actual.getSize());
  assertTrue(actualIds.contains(d2.getId()));
  actual=DocumentAccessors.of(documentRepository.findByNameInOrderById(actual.nextPageable(),d2.getName(),d3.getName()));
  actualIds=getIdsFromViews(actual);
  assertEquals(2,actual.getTotalPages());
  assertEquals(1,actual.getNumber());
  assertEquals(1,actual.getNumberOfElements());
  assertEquals(1,actual.getSize());
  assertTrue(actualIds.contains(d3.getId()));
}",0.9872701555869872
168767,"@Test @Category({NoMSSQL.class}) public void testFindFirstByOrderByNameAsc(){
  final Document d3=createDocument(""String_Node_Str"");
  final Document d2=createDocument(""String_Node_Str"");
  final Document d1=createDocument(""String_Node_Str"");
  DocumentAccessor actual=DocumentAccessors.of(documentRepository.findFirstByOrderByNameAsc());
  assertEquals(d1.getId(),actual.getId());
}","@Test public void testFindFirstByOrderByNameAsc(){
  final Document d3=createDocument(""String_Node_Str"");
  final Document d2=createDocument(""String_Node_Str"");
  final Document d1=createDocument(""String_Node_Str"");
  DocumentAccessor actual=DocumentAccessors.of(documentRepository.findFirstByOrderByNameAsc());
  assertEquals(d1.getId(),actual.getId());
}",0.9634641407307172
168768,"@Test @Category({NoMSSQL.class}) public void testFindByNameInKeysetPaginated(){
  Assume.assumeFalse(isEntityRepository() && isEclipseLink());
  final Document d1=createDocument(""String_Node_Str"");
  final Document d2=createDocument(""String_Node_Str"");
  final Document d3=createDocument(""String_Node_Str"");
  KeysetAwarePage<DocumentAccessor> actual=DocumentAccessors.of(documentRepository.findByNameIn(new KeysetPageRequest(null,new Sort(""String_Node_Str""),0,1),d2.getName(),d3.getName()));
  List<Long> actualIds=getIdsFromViews(actual);
  assertEquals(2,actual.getTotalPages());
  assertEquals(0,actual.getNumber());
  assertEquals(1,actual.getNumberOfElements());
  assertEquals(1,actual.getSize());
  assertTrue(actualIds.contains(d2.getId()));
  actual=DocumentAccessors.of(documentRepository.findByNameIn(actual.nextPageable(),d2.getName(),d3.getName()));
  actualIds=getIdsFromViews(actual);
  assertEquals(2,actual.getTotalPages());
  assertEquals(1,actual.getNumber());
  assertEquals(1,actual.getNumberOfElements());
  assertEquals(1,actual.getSize());
  assertTrue(actualIds.contains(d3.getId()));
}","@Test public void testFindByNameInKeysetPaginated(){
  Assume.assumeFalse(isEntityRepository() && isEclipseLink());
  final Document d1=createDocument(""String_Node_Str"");
  final Document d2=createDocument(""String_Node_Str"");
  final Document d3=createDocument(""String_Node_Str"");
  KeysetAwarePage<DocumentAccessor> actual=DocumentAccessors.of(documentRepository.findByNameIn(new KeysetPageRequest(null,new Sort(""String_Node_Str""),0,1),d2.getName(),d3.getName()));
  List<Long> actualIds=getIdsFromViews(actual);
  assertEquals(2,actual.getTotalPages());
  assertEquals(0,actual.getNumber());
  assertEquals(1,actual.getNumberOfElements());
  assertEquals(1,actual.getSize());
  assertTrue(actualIds.contains(d2.getId()));
  actual=DocumentAccessors.of(documentRepository.findByNameIn(actual.nextPageable(),d2.getName(),d3.getName()));
  actualIds=getIdsFromViews(actual);
  assertEquals(2,actual.getTotalPages());
  assertEquals(1,actual.getNumber());
  assertEquals(1,actual.getNumberOfElements());
  assertEquals(1,actual.getSize());
  assertTrue(actualIds.contains(d3.getId()));
}",0.9877105143377332
168769,"private CtConstructor createConstructor(EntityViewManager evm,ManagedViewType<?> managedViewType,CtClass cc,int superConstructorStart,int superConstructorEnd,CtField[] attributeFields,CtClass[] attributeTypes,CtField initialStateField,CtField mutableStateField,AbstractMethodAttribute<?,?>[] mutableAttributes,int mutableAttributeCount,ConstructorKind kind,CtField idField,boolean unsafe) throws CannotCompileException, NotFoundException, BadBytecode {
  CtClass[] parameterTypes;
  if (kind == ConstructorKind.CREATE) {
    parameterTypes=new CtClass[]{};
  }
 else {
    parameterTypes=attributeTypes;
  }
  CtConstructor ctConstructor=new CtConstructor(parameterTypes,cc);
  ctConstructor.setModifiers(Modifier.PUBLIC);
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  if (unsafe) {
    renderFieldInitialization(evm,managedViewType,attributeFields,initialStateField,mutableStateField,mutableAttributes,mutableAttributeCount,kind,sb,idField);
    renderSuperCall(cc,superConstructorStart,superConstructorEnd,sb);
  }
 else {
    renderSuperCall(cc,superConstructorStart,superConstructorEnd,sb);
    renderFieldInitialization(evm,managedViewType,attributeFields,initialStateField,mutableStateField,mutableAttributes,mutableAttributeCount,kind,sb,idField);
  }
  renderDirtyTrackerRegistration(attributeFields,mutableStateField,mutableAttributes,kind,sb);
  Method postCreateMethod=null;
  if (kind == ConstructorKind.CREATE && managedViewType.getPostCreateMethod() != null) {
    postCreateMethod=managedViewType.getPostCreateMethod();
    if (!managedViewType.getJavaType().isInterface()) {
      if (postCreateMethod.getParameterTypes().length == 1) {
        sb.append(""String_Node_Str"").append(postCreateMethod.getName()).append(""String_Node_Str"").append(cc.getName()).append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"").append(postCreateMethod.getName()).append(""String_Node_Str"");
      }
      postCreateMethod=null;
    }
  }
  sb.append(""String_Node_Str"");
  if (unsafe) {
    compileUnsafe(ctConstructor,sb.toString());
  }
 else {
    ctConstructor.setBody(sb.toString());
  }
  if (postCreateMethod != null) {
    CodeAttribute codeAttribute=ctConstructor.getMethodInfo().getCodeAttribute();
    Bytecode bc=new Bytecode(codeAttribute.getConstPool(),codeAttribute.getMaxStack(),codeAttribute.getMaxLocals());
    byte[] instructions=codeAttribute.getCode();
    for (int i=0; i < codeAttribute.getCodeLength() - 1; i++) {
      bc.add(instructions[i]);
    }
    String postCreateMethodDescriptor;
    bc.addAload(0);
    if (postCreateMethod.getParameterTypes().length == 1) {
      bc.addAload(1);
      postCreateMethodDescriptor=""String_Node_Str"" + Descriptor.toJvmName(EntityViewManager.class.getName()) + ""String_Node_Str"";
    }
 else {
      postCreateMethodDescriptor=""String_Node_Str"";
    }
    bc.addInvokespecial(managedViewType.getJavaType().getName(),postCreateMethod.getName(),postCreateMethodDescriptor);
    bc.addReturn(null);
    CodeAttribute newCodeAttribute=bc.toCodeAttribute();
    newCodeAttribute.setAttribute((StackMap)codeAttribute.getAttribute(StackMap.tag));
    newCodeAttribute.setAttribute((StackMapTable)codeAttribute.getAttribute(StackMapTable.tag));
    ctConstructor.getMethodInfo().setCodeAttribute(bc.toCodeAttribute());
  }
  return ctConstructor;
}","private CtConstructor createConstructor(EntityViewManager evm,ManagedViewType<?> managedViewType,CtClass cc,int superConstructorStart,int superConstructorEnd,CtField[] attributeFields,CtClass[] attributeTypes,CtField initialStateField,CtField mutableStateField,AbstractMethodAttribute<?,?>[] mutableAttributes,int mutableAttributeCount,ConstructorKind kind,CtField idField,boolean unsafe) throws CannotCompileException, NotFoundException, BadBytecode {
  CtClass[] parameterTypes;
  if (kind == ConstructorKind.CREATE) {
    parameterTypes=new CtClass[]{};
  }
 else {
    parameterTypes=attributeTypes;
  }
  CtConstructor ctConstructor=new CtConstructor(parameterTypes,cc);
  ctConstructor.setModifiers(Modifier.PUBLIC);
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  if (unsafe) {
    renderFieldInitialization(evm,managedViewType,attributeFields,initialStateField,mutableStateField,mutableAttributes,mutableAttributeCount,kind,sb,idField);
    renderSuperCall(cc,superConstructorStart,superConstructorEnd,sb);
  }
 else {
    renderSuperCall(cc,superConstructorStart,superConstructorEnd,sb);
    renderFieldInitialization(evm,managedViewType,attributeFields,initialStateField,mutableStateField,mutableAttributes,mutableAttributeCount,kind,sb,idField);
  }
  renderDirtyTrackerRegistration(attributeFields,mutableStateField,mutableAttributes,kind,sb);
  Method postCreateMethod=null;
  if (kind == ConstructorKind.CREATE && managedViewType.getPostCreateMethod() != null) {
    postCreateMethod=managedViewType.getPostCreateMethod();
    if (!managedViewType.getJavaType().isInterface()) {
      if (postCreateMethod.getParameterTypes().length == 1) {
        sb.append(""String_Node_Str"").append(postCreateMethod.getName()).append(""String_Node_Str"").append(cc.getName()).append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"").append(postCreateMethod.getName()).append(""String_Node_Str"");
      }
      postCreateMethod=null;
    }
  }
  sb.append(""String_Node_Str"");
  if (unsafe) {
    compileUnsafe(ctConstructor,sb.toString());
  }
 else {
    ctConstructor.setBody(sb.toString());
  }
  if (postCreateMethod != null) {
    CodeAttribute codeAttribute=ctConstructor.getMethodInfo().getCodeAttribute();
    Bytecode bc=new Bytecode(codeAttribute.getConstPool(),codeAttribute.getMaxStack(),codeAttribute.getMaxLocals());
    byte[] instructions=codeAttribute.getCode();
    for (int i=0; i < codeAttribute.getCodeLength() - 1; i++) {
      bc.add(instructions[i]);
    }
    String postCreateMethodDescriptor;
    bc.addAload(0);
    if (postCreateMethod.getParameterTypes().length == 1) {
      bc.addGetstatic(cc,""String_Node_Str"",Descriptor.of(EntityViewManager.class.getName()));
      postCreateMethodDescriptor=""String_Node_Str"" + Descriptor.toJvmName(EntityViewManager.class.getName()) + ""String_Node_Str"";
    }
 else {
      postCreateMethodDescriptor=""String_Node_Str"";
    }
    bc.addInvokespecial(managedViewType.getJavaType().getName(),postCreateMethod.getName(),postCreateMethodDescriptor);
    bc.addReturn(null);
    CodeAttribute newCodeAttribute=bc.toCodeAttribute();
    newCodeAttribute.setAttribute((StackMap)codeAttribute.getAttribute(StackMap.tag));
    newCodeAttribute.setAttribute((StackMapTable)codeAttribute.getAttribute(StackMapTable.tag));
    ctConstructor.getMethodInfo().setCodeAttribute(bc.toCodeAttribute());
  }
  return ctConstructor;
}",0.9873268493958148
168770,"/** 
 * Registers the given converter for the given types.
 * @param entityModelType The entity model type
 * @param viewModelType The entity view model type
 * @param converter The type converter
 * @param < X > The entity model type
 * @param < Y > The entity view model type
 * @return this for method chaining
 * @since 1.2.0
 */
public <X,Y>EntityViewConfiguration registerTypeConverter(Class<X> entityModelType,Class<Y> viewModelType,TypeConverter<X,Y> converter);","/** 
 * Registers the given converter for the given types.
 * @param underlyingType The underlying type supported by the entity view type system
 * @param viewModelType The entity view model type
 * @param converter The type converter
 * @param < X > The underlying type
 * @param < Y > The entity view model type
 * @return this for method chaining
 * @since 1.2.0
 */
public <X,Y>EntityViewConfiguration registerTypeConverter(Class<X> underlyingType,Class<Y> viewModelType,TypeConverter<X,Y> converter);",0.841025641025641
168771,"@Override public <X,Y>EntityViewConfiguration registerTypeConverter(Class<X> entityModelType,Class<Y> viewModelType,TypeConverter<X,Y> converter){
  userTypeRegistry.registerTypeConverter(entityModelType,viewModelType,converter);
  return this;
}","@Override public <X,Y>EntityViewConfiguration registerTypeConverter(Class<X> underlyingType,Class<Y> viewModelType,TypeConverter<X,Y> converter){
  userTypeRegistry.registerTypeConverter(underlyingType,viewModelType,converter);
  return this;
}",0.9142857142857144
168772,"public TargetTypeImpl(boolean hasCollectionJoin,Method leafMethod,Class<?> leafBaseClass,Class<?> leafBaseValueClass){
  this.hasCollectionJoin=hasCollectionJoin;
  this.leafMethod=leafMethod;
  this.leafBaseClass=leafBaseClass;
  this.leafBaseValueClass=leafBaseValueClass;
}","public TargetTypeImpl(boolean hasCollectionJoin,Method leafMethod,Class<?> leafBaseClass,Class<?> leafBaseKeyClass,Class<?> leafBaseValueClass){
  this.hasCollectionJoin=hasCollectionJoin;
  this.leafMethod=leafMethod;
  this.leafBaseClass=leafBaseClass;
  this.leafBaseKeyClass=leafBaseKeyClass;
  this.leafBaseValueClass=leafBaseValueClass;
}",0.8903225806451613
168773,"public List<TargetType> getPossibleTargets(){
  List<PathPosition> positions=pathPositions;
  int size=positions.size();
  if (size == 1 && positions.get(0).getMethod() == null && managedType.getJavaType().equals(positions.get(0).getRealCurrentClass())) {
    return Collections.emptyList();
  }
  List<TargetType> possibleTargets=new ArrayList<TargetType>(size);
  for (int i=0; i < size; i++) {
    PathPosition position=positions.get(i);
    possibleTargets.add(new TargetTypeImpl(position.hasCollectionJoin(),position.getMethod(),getBoxed(position.getRealCurrentClass()),getBoxed(position.getCurrentClass())));
  }
  return possibleTargets;
}","public List<TargetType> getPossibleTargets(){
  List<PathPosition> positions=pathPositions;
  int size=positions.size();
  if (size == 1 && positions.get(0).getMethod() == null && managedType.getJavaType().equals(positions.get(0).getRealCurrentClass())) {
    return Collections.emptyList();
  }
  List<TargetType> possibleTargets=new ArrayList<TargetType>(size);
  for (int i=0; i < size; i++) {
    PathPosition position=positions.get(i);
    possibleTargets.add(new TargetTypeImpl(position.hasCollectionJoin(),position.getMethod(),position.getRealCurrentClass(),position.getCurrentClass(),position.getCurrentClass()));
  }
  return possibleTargets;
}",0.9253271747498076
168774,"PathPosition copy(){
  return new PathPosition(currentClass,valueClass,method,hasCollectionJoin);
}","PathPosition copy(){
  return new PathPosition(currentClass,keyClass,valueClass,method,hasCollectionJoin);
}",0.9565217391304348
168775,"private PathPosition(Class<?> currentClass,Class<?> valueClass,Method method,boolean hasCollectionJoin){
  this.currentClass=currentClass;
  this.valueClass=valueClass;
  this.method=method;
  this.hasCollectionJoin=hasCollectionJoin;
}","private PathPosition(Class<?> currentClass,Class<?> keyClass,Class<?> valueClass,Method method,boolean hasCollectionJoin){
  this.currentClass=currentClass;
  this.keyClass=keyClass;
  this.valueClass=valueClass;
  this.method=method;
  this.hasCollectionJoin=hasCollectionJoin;
}",0.9147286821705426
168776,"void setCurrentClass(Class<?> currentClass){
  this.currentClass=currentClass;
  this.valueClass=null;
  this.hasCollectionJoin=false;
}","void setCurrentClass(Class<?> currentClass){
  this.currentClass=currentClass;
  this.keyClass=null;
  this.valueClass=null;
  this.hasCollectionJoin=false;
}",0.9251700680272108
168777,"public void checkAttribute(ManagedType<?> managedType,MetamodelBuildingContext context){
  Class<?> expressionType=getJavaType();
  Class<?> keyType=null;
  Class<?> elementType=null;
  if (fetches.length != 0) {
    ManagedType<?> entityType=context.getEntityMetamodel().getManagedType(getElementType().getJavaType());
    if (entityType == null) {
      context.addError(""String_Node_Str"" + Arrays.toString(fetches) + ""String_Node_Str""+ getLocation()+ ""String_Node_Str"");
    }
 else {
      ScalarTargetResolvingExpressionVisitor visitor=new ScalarTargetResolvingExpressionVisitor(entityType,context.getEntityMetamodel(),context.getJpqlFunctions());
      for (int i=0; i < fetches.length; i++) {
        final String fetch=fetches[i];
        final String errorLocation;
        if (fetches.length == 1) {
          errorLocation=""String_Node_Str"";
        }
 else {
          errorLocation=""String_Node_Str"" + (i + 1) + ""String_Node_Str"";
        }
        visitor.clear();
        try {
          context.getExpressionFactory().createPathExpression(fetch).accept(visitor);
        }
 catch (        SyntaxErrorException ex) {
          try {
            context.getExpressionFactory().createSimpleExpression(fetch,false);
            context.addError(""String_Node_Str"" + fetch + ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
          }
 catch (          SyntaxErrorException ex2) {
            context.addError(""String_Node_Str"" + errorLocation + ""String_Node_Str""+ fetch+ ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
          }
        }
catch (        IllegalArgumentException ex) {
          context.addError(""String_Node_Str"" + errorLocation + ""String_Node_Str""+ fetch+ ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
        }
      }
    }
  }
  if (isCollection()) {
    elementType=getElementType().getJavaType();
    if (isUpdatable()) {
    }
 else {
      if (isIndexed()) {
        if (getCollectionType() == PluralAttribute.CollectionType.MAP) {
          expressionType=Map.class;
          keyType=getKeyType().getJavaType();
        }
 else {
          expressionType=List.class;
          keyType=Integer.class;
        }
      }
 else {
        expressionType=Collection.class;
      }
    }
  }
  if (isSubview()) {
    ManagedViewTypeImplementor<?> subviewType=(ManagedViewTypeImplementor<?>)getElementType();
    if (isCollection()) {
      elementType=subviewType.getEntityClass();
    }
 else {
      expressionType=subviewType.getEntityClass();
    }
  }
  if (isKeySubview()) {
    keyType=((ManagedViewTypeImplementor<?>)getKeyType()).getEntityClass();
  }
  if (isCorrelated()) {
    if (isUpdatable()) {
      context.addError(""String_Node_Str"" + getLocation());
    }
    validateTypesCompatible(managedType,stripThisFromMapping(correlationBasis),Object.class,null,true,context,ExpressionLocation.CORRELATION_BASIS,getLocation());
    if (correlated != null) {
      validateTypesCompatible(context.getEntityMetamodel().managedType(correlated),stripThisFromMapping(correlationResult),expressionType,elementType,true,context,ExpressionLocation.CORRELATION_RESULT,getLocation());
      try {
        context.createMacroAwareExpressionFactory().createBooleanExpression(correlationExpression,false);
      }
 catch (      SyntaxErrorException ex) {
        context.addError(""String_Node_Str"" + ExpressionLocation.CORRELATION_EXPRESSION + ""String_Node_Str""+ correlationExpression+ ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
      }
catch (      IllegalArgumentException ex) {
        context.addError(""String_Node_Str"" + ExpressionLocation.CORRELATION_EXPRESSION + ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
      }
    }
  }
 else   if (isSubquery() || isQueryParameter()) {
  }
 else {
    boolean subtypesAllowed=!isUpdatable();
    if (!isCollection() && Collection.class.isAssignableFrom(expressionType)) {
      Class<?>[] typeArguments=getTypeArguments();
      elementType=typeArguments[typeArguments.length - 1];
    }
    String mapping=stripThisFromMapping(this.mapping);
    validateTypesCompatible(managedType,mapping,expressionType,elementType,subtypesAllowed,context,ExpressionLocation.MAPPING,getLocation());
    if (isUpdatable() && declaringType.isUpdatable()) {
      UpdatableExpressionVisitor visitor=new UpdatableExpressionVisitor(managedType.getJavaType());
      try {
        context.getExpressionFactory().createPathExpression(mapping).accept(visitor);
        Map<Method,Class<?>[]> possibleTargets=visitor.getPossibleTargets();
        if (possibleTargets.size() > 1) {
          context.addError(""String_Node_Str"" + getLocation() + ""String_Node_Str""+ possibleTargets);
        }
      }
 catch (      SyntaxErrorException ex) {
        try {
          context.getExpressionFactory().createSimpleExpression(mapping,false);
          context.addError(""String_Node_Str"" + mapping + ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
        }
 catch (        SyntaxErrorException ex2) {
          context.addError(""String_Node_Str"" + mapping + ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
        }
      }
catch (      IllegalArgumentException ex) {
        context.addError(""String_Node_Str"" + getLocation() + ""String_Node_Str""+ ex.getMessage());
      }
    }
  }
}","public void checkAttribute(ManagedType<?> managedType,MetamodelBuildingContext context){
  Class<?> expressionType=getJavaType();
  Class<?> keyType=null;
  Class<?> elementType=null;
  if (fetches.length != 0) {
    ManagedType<?> entityType=context.getEntityMetamodel().getManagedType(getElementType().getJavaType());
    if (entityType == null) {
      context.addError(""String_Node_Str"" + Arrays.toString(fetches) + ""String_Node_Str""+ getLocation()+ ""String_Node_Str"");
    }
 else {
      ScalarTargetResolvingExpressionVisitor visitor=new ScalarTargetResolvingExpressionVisitor(entityType,context.getEntityMetamodel(),context.getJpqlFunctions());
      for (int i=0; i < fetches.length; i++) {
        final String fetch=fetches[i];
        final String errorLocation;
        if (fetches.length == 1) {
          errorLocation=""String_Node_Str"";
        }
 else {
          errorLocation=""String_Node_Str"" + (i + 1) + ""String_Node_Str"";
        }
        visitor.clear();
        try {
          context.getExpressionFactory().createPathExpression(fetch).accept(visitor);
        }
 catch (        SyntaxErrorException ex) {
          try {
            context.getExpressionFactory().createSimpleExpression(fetch,false);
            context.addError(""String_Node_Str"" + fetch + ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
          }
 catch (          SyntaxErrorException ex2) {
            context.addError(""String_Node_Str"" + errorLocation + ""String_Node_Str""+ fetch+ ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
          }
        }
catch (        IllegalArgumentException ex) {
          context.addError(""String_Node_Str"" + errorLocation + ""String_Node_Str""+ fetch+ ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
        }
      }
    }
  }
  if (isCollection()) {
    elementType=getElementType().getJavaType();
    if (isUpdatable()) {
    }
 else {
      if (isIndexed()) {
        if (getCollectionType() == PluralAttribute.CollectionType.MAP) {
          expressionType=Map.class;
          keyType=getKeyType().getJavaType();
        }
 else {
          expressionType=List.class;
          keyType=Integer.class;
        }
      }
 else {
        expressionType=Collection.class;
      }
    }
  }
  if (isSubview()) {
    ManagedViewTypeImplementor<?> subviewType=(ManagedViewTypeImplementor<?>)getElementType();
    if (isCollection()) {
      elementType=subviewType.getEntityClass();
    }
 else {
      expressionType=subviewType.getEntityClass();
    }
  }
  if (isKeySubview()) {
    keyType=((ManagedViewTypeImplementor<?>)getKeyType()).getEntityClass();
  }
  if (isCorrelated()) {
    if (isUpdatable()) {
      context.addError(""String_Node_Str"" + getLocation());
    }
    validateTypesCompatible(managedType,stripThisFromMapping(correlationBasis),Object.class,null,true,context,ExpressionLocation.CORRELATION_BASIS,getLocation());
    if (correlated != null) {
      validateTypesCompatible(context.getEntityMetamodel().managedType(correlated),stripThisFromMapping(correlationResult),expressionType,elementType,true,context,ExpressionLocation.CORRELATION_RESULT,getLocation());
      try {
        context.createMacroAwareExpressionFactory().createBooleanExpression(correlationExpression,false);
      }
 catch (      SyntaxErrorException ex) {
        context.addError(""String_Node_Str"" + ExpressionLocation.CORRELATION_EXPRESSION + ""String_Node_Str""+ correlationExpression+ ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
      }
catch (      IllegalArgumentException ex) {
        context.addError(""String_Node_Str"" + ExpressionLocation.CORRELATION_EXPRESSION + ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
      }
    }
  }
 else   if (isSubquery() || isQueryParameter()) {
  }
 else {
    boolean subtypesAllowed=!isUpdatable();
    if (!isCollection() && Collection.class.isAssignableFrom(expressionType)) {
      Class<?>[] typeArguments=getTypeArguments();
      elementType=typeArguments[typeArguments.length - 1];
    }
    if (getElementType().getConvertedType() == null) {
      validateTypesCompatible(possibleTargetTypes,expressionType,elementType,subtypesAllowed,context,ExpressionLocation.MAPPING,getLocation());
    }
    if (isUpdatable() && declaringType.isUpdatable()) {
      UpdatableExpressionVisitor visitor=new UpdatableExpressionVisitor(managedType.getJavaType());
      try {
        context.getExpressionFactory().createPathExpression(mapping).accept(visitor);
        Map<Method,Class<?>[]> possibleTargets=visitor.getPossibleTargets();
        if (possibleTargets.size() > 1) {
          context.addError(""String_Node_Str"" + getLocation() + ""String_Node_Str""+ possibleTargets);
        }
      }
 catch (      SyntaxErrorException ex) {
        try {
          context.getExpressionFactory().createSimpleExpression(mapping,false);
          context.addError(""String_Node_Str"" + mapping + ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
        }
 catch (        SyntaxErrorException ex2) {
          context.addError(""String_Node_Str"" + mapping + ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
        }
      }
catch (      IllegalArgumentException ex) {
        context.addError(""String_Node_Str"" + getLocation() + ""String_Node_Str""+ ex.getMessage());
      }
    }
  }
}",0.9833518312985572
168778,"@SuppressWarnings(""String_Node_Str"") public AbstractAttribute(ManagedViewTypeImplementor<X> declaringType,AttributeMapping mapping,MetamodelBuildingContext context){
  if (mapping.getJavaType(context) == null) {
    context.addError(""String_Node_Str"" + mapping.getErrorLocation());
  }
  Integer defaultbatchSize=mapping.getDefaultBatchSize();
  int batchSize;
  if (defaultbatchSize == null || defaultbatchSize == -1) {
    batchSize=-1;
  }
 else   if (defaultbatchSize < 1) {
    context.addError(""String_Node_Str"" + mapping.getErrorLocation() + ""String_Node_Str"");
    batchSize=Integer.MIN_VALUE;
  }
 else {
    batchSize=defaultbatchSize;
  }
  this.declaringType=declaringType;
  this.javaType=(Class<Y>)mapping.getJavaType(context);
  Annotation mappingAnnotation=mapping.getMapping();
  if (mappingAnnotation instanceof IdMapping) {
    this.mapping=((IdMapping)mappingAnnotation).value();
    this.fetches=EMPTY;
    this.fetchStrategy=FetchStrategy.JOIN;
    this.batchSize=-1;
    this.subqueryProvider=null;
    this.id=true;
    this.updateMappable=checkUpdatableMapping(this.mapping,context);
    this.mappingType=MappingType.BASIC;
    this.subqueryExpression=null;
    this.subqueryAlias=null;
    this.correlationBasis=null;
    this.correlationResult=null;
    this.correlationProvider=null;
    this.correlated=null;
    this.correlationKeyAlias=null;
    this.correlationExpression=null;
  }
 else   if (mappingAnnotation instanceof Mapping) {
    Mapping m=(Mapping)mappingAnnotation;
    this.mapping=m.value();
    this.fetches=m.fetches();
    this.fetchStrategy=m.fetch();
    this.batchSize=batchSize;
    this.subqueryProvider=null;
    this.id=false;
    this.updateMappable=checkUpdatableMapping(this.mapping,context);
    this.mappingType=MappingType.BASIC;
    this.subqueryExpression=null;
    this.subqueryAlias=null;
    this.correlationBasis=null;
    this.correlationResult=null;
    this.correlationProvider=null;
    this.correlated=null;
    this.correlationKeyAlias=null;
    this.correlationExpression=null;
  }
 else   if (mappingAnnotation instanceof MappingParameter) {
    this.mapping=((MappingParameter)mappingAnnotation).value();
    this.fetches=EMPTY;
    this.fetchStrategy=FetchStrategy.JOIN;
    this.batchSize=-1;
    this.subqueryProvider=null;
    this.id=false;
    this.updateMappable=false;
    this.mappingType=MappingType.PARAMETER;
    this.subqueryExpression=null;
    this.subqueryAlias=null;
    this.correlationBasis=null;
    this.correlationResult=null;
    this.correlationProvider=null;
    this.correlated=null;
    this.correlationKeyAlias=null;
    this.correlationExpression=null;
  }
 else   if (mappingAnnotation instanceof MappingSubquery) {
    MappingSubquery mappingSubquery=(MappingSubquery)mappingAnnotation;
    this.mapping=null;
    this.fetches=EMPTY;
    this.subqueryProvider=mappingSubquery.value();
    this.fetchStrategy=FetchStrategy.JOIN;
    this.batchSize=-1;
    this.id=false;
    this.updateMappable=false;
    this.mappingType=MappingType.SUBQUERY;
    this.subqueryExpression=mappingSubquery.expression();
    this.subqueryAlias=mappingSubquery.subqueryAlias();
    this.correlationBasis=null;
    this.correlationResult=null;
    this.correlationProvider=null;
    this.correlated=null;
    this.correlationKeyAlias=null;
    this.correlationExpression=null;
    if (!subqueryExpression.isEmpty() && subqueryAlias.isEmpty()) {
      context.addError(""String_Node_Str"" + mapping.getErrorLocation());
    }
    if (subqueryProvider.getEnclosingClass() != null && !Modifier.isStatic(subqueryProvider.getModifiers())) {
      context.addError(""String_Node_Str"" + mapping.getErrorLocation());
    }
  }
 else   if (mappingAnnotation instanceof MappingCorrelated) {
    MappingCorrelated mappingCorrelated=(MappingCorrelated)mappingAnnotation;
    this.mapping=null;
    this.fetches=mappingCorrelated.fetches();
    this.fetchStrategy=mappingCorrelated.fetch();
    if (fetchStrategy == FetchStrategy.SELECT) {
      this.batchSize=batchSize;
    }
 else {
      this.batchSize=-1;
    }
    this.subqueryProvider=null;
    this.id=false;
    this.updateMappable=false;
    this.mappingType=MappingType.CORRELATED;
    this.subqueryExpression=null;
    this.subqueryAlias=null;
    this.correlationBasis=mappingCorrelated.correlationBasis();
    this.correlationResult=mappingCorrelated.correlationResult();
    this.correlationProvider=mappingCorrelated.correlator();
    this.correlated=null;
    this.correlationKeyAlias=null;
    this.correlationExpression=null;
    if (correlationProvider.getEnclosingClass() != null && !Modifier.isStatic(correlationProvider.getModifiers())) {
      context.addError(""String_Node_Str"" + mapping.getErrorLocation());
    }
  }
 else   if (mappingAnnotation instanceof MappingCorrelatedSimple) {
    MappingCorrelatedSimple mappingCorrelated=(MappingCorrelatedSimple)mappingAnnotation;
    this.mapping=null;
    this.fetches=mappingCorrelated.fetches();
    this.fetchStrategy=mappingCorrelated.fetch();
    if (fetchStrategy == FetchStrategy.SELECT) {
      this.batchSize=batchSize;
    }
 else {
      this.batchSize=-1;
    }
    this.subqueryProvider=null;
    this.id=false;
    this.updateMappable=false;
    this.mappingType=MappingType.CORRELATED;
    this.subqueryExpression=null;
    this.subqueryAlias=null;
    this.correlationProvider=CorrelationProviderHelper.createCorrelationProvider(mappingCorrelated.correlated(),mappingCorrelated.correlationKeyAlias(),mappingCorrelated.correlationExpression(),context);
    this.correlationBasis=mappingCorrelated.correlationBasis();
    this.correlationResult=mappingCorrelated.correlationResult();
    this.correlated=mappingCorrelated.correlated();
    this.correlationKeyAlias=mappingCorrelated.correlationKeyAlias();
    this.correlationExpression=mappingCorrelated.correlationExpression();
    if (mappingCorrelated.correlationBasis().isEmpty()) {
      context.addError(""String_Node_Str"" + getLocation());
    }
  }
 else {
    context.addError(""String_Node_Str"" + mapping.getErrorLocation());
    this.mapping=null;
    this.fetches=EMPTY;
    this.fetchStrategy=null;
    this.batchSize=Integer.MIN_VALUE;
    this.subqueryProvider=null;
    this.id=false;
    this.updateMappable=false;
    this.mappingType=null;
    this.subqueryExpression=null;
    this.subqueryAlias=null;
    this.correlationBasis=null;
    this.correlationResult=null;
    this.correlationProvider=null;
    this.correlated=null;
    this.correlationKeyAlias=null;
    this.correlationExpression=null;
  }
}","@SuppressWarnings(""String_Node_Str"") public AbstractAttribute(ManagedViewTypeImplementor<X> declaringType,AttributeMapping mapping,MetamodelBuildingContext context){
  if (mapping.getJavaType(context) == null) {
    context.addError(""String_Node_Str"" + mapping.getErrorLocation());
  }
  this.possibleTargetTypes=mapping.getPossibleTargetTypes(context);
  Integer defaultbatchSize=mapping.getDefaultBatchSize();
  int batchSize;
  if (defaultbatchSize == null || defaultbatchSize == -1) {
    batchSize=-1;
  }
 else   if (defaultbatchSize < 1) {
    context.addError(""String_Node_Str"" + mapping.getErrorLocation() + ""String_Node_Str"");
    batchSize=Integer.MIN_VALUE;
  }
 else {
    batchSize=defaultbatchSize;
  }
  this.declaringType=declaringType;
  this.javaType=(Class<Y>)mapping.getJavaType(context);
  Annotation mappingAnnotation=mapping.getMapping();
  if (mappingAnnotation instanceof IdMapping) {
    this.mapping=((IdMapping)mappingAnnotation).value();
    this.fetches=EMPTY;
    this.fetchStrategy=FetchStrategy.JOIN;
    this.batchSize=-1;
    this.subqueryProvider=null;
    this.id=true;
    this.updateMappable=checkUpdatableMapping(this.mapping,context);
    this.mappingType=MappingType.BASIC;
    this.subqueryExpression=null;
    this.subqueryAlias=null;
    this.correlationBasis=null;
    this.correlationResult=null;
    this.correlationProvider=null;
    this.correlated=null;
    this.correlationKeyAlias=null;
    this.correlationExpression=null;
  }
 else   if (mappingAnnotation instanceof Mapping) {
    Mapping m=(Mapping)mappingAnnotation;
    this.mapping=m.value();
    this.fetches=m.fetches();
    this.fetchStrategy=m.fetch();
    this.batchSize=batchSize;
    this.subqueryProvider=null;
    this.id=false;
    this.updateMappable=checkUpdatableMapping(this.mapping,context);
    this.mappingType=MappingType.BASIC;
    this.subqueryExpression=null;
    this.subqueryAlias=null;
    this.correlationBasis=null;
    this.correlationResult=null;
    this.correlationProvider=null;
    this.correlated=null;
    this.correlationKeyAlias=null;
    this.correlationExpression=null;
  }
 else   if (mappingAnnotation instanceof MappingParameter) {
    this.mapping=((MappingParameter)mappingAnnotation).value();
    this.fetches=EMPTY;
    this.fetchStrategy=FetchStrategy.JOIN;
    this.batchSize=-1;
    this.subqueryProvider=null;
    this.id=false;
    this.updateMappable=false;
    this.mappingType=MappingType.PARAMETER;
    this.subqueryExpression=null;
    this.subqueryAlias=null;
    this.correlationBasis=null;
    this.correlationResult=null;
    this.correlationProvider=null;
    this.correlated=null;
    this.correlationKeyAlias=null;
    this.correlationExpression=null;
  }
 else   if (mappingAnnotation instanceof MappingSubquery) {
    MappingSubquery mappingSubquery=(MappingSubquery)mappingAnnotation;
    this.mapping=null;
    this.fetches=EMPTY;
    this.subqueryProvider=mappingSubquery.value();
    this.fetchStrategy=FetchStrategy.JOIN;
    this.batchSize=-1;
    this.id=false;
    this.updateMappable=false;
    this.mappingType=MappingType.SUBQUERY;
    this.subqueryExpression=mappingSubquery.expression();
    this.subqueryAlias=mappingSubquery.subqueryAlias();
    this.correlationBasis=null;
    this.correlationResult=null;
    this.correlationProvider=null;
    this.correlated=null;
    this.correlationKeyAlias=null;
    this.correlationExpression=null;
    if (!subqueryExpression.isEmpty() && subqueryAlias.isEmpty()) {
      context.addError(""String_Node_Str"" + mapping.getErrorLocation());
    }
    if (subqueryProvider.getEnclosingClass() != null && !Modifier.isStatic(subqueryProvider.getModifiers())) {
      context.addError(""String_Node_Str"" + mapping.getErrorLocation());
    }
  }
 else   if (mappingAnnotation instanceof MappingCorrelated) {
    MappingCorrelated mappingCorrelated=(MappingCorrelated)mappingAnnotation;
    this.mapping=null;
    this.fetches=mappingCorrelated.fetches();
    this.fetchStrategy=mappingCorrelated.fetch();
    if (fetchStrategy == FetchStrategy.SELECT) {
      this.batchSize=batchSize;
    }
 else {
      this.batchSize=-1;
    }
    this.subqueryProvider=null;
    this.id=false;
    this.updateMappable=false;
    this.mappingType=MappingType.CORRELATED;
    this.subqueryExpression=null;
    this.subqueryAlias=null;
    this.correlationBasis=mappingCorrelated.correlationBasis();
    this.correlationResult=mappingCorrelated.correlationResult();
    this.correlationProvider=mappingCorrelated.correlator();
    this.correlated=null;
    this.correlationKeyAlias=null;
    this.correlationExpression=null;
    if (correlationProvider.getEnclosingClass() != null && !Modifier.isStatic(correlationProvider.getModifiers())) {
      context.addError(""String_Node_Str"" + mapping.getErrorLocation());
    }
  }
 else   if (mappingAnnotation instanceof MappingCorrelatedSimple) {
    MappingCorrelatedSimple mappingCorrelated=(MappingCorrelatedSimple)mappingAnnotation;
    this.mapping=null;
    this.fetches=mappingCorrelated.fetches();
    this.fetchStrategy=mappingCorrelated.fetch();
    if (fetchStrategy == FetchStrategy.SELECT) {
      this.batchSize=batchSize;
    }
 else {
      this.batchSize=-1;
    }
    this.subqueryProvider=null;
    this.id=false;
    this.updateMappable=false;
    this.mappingType=MappingType.CORRELATED;
    this.subqueryExpression=null;
    this.subqueryAlias=null;
    this.correlationProvider=CorrelationProviderHelper.createCorrelationProvider(mappingCorrelated.correlated(),mappingCorrelated.correlationKeyAlias(),mappingCorrelated.correlationExpression(),context);
    this.correlationBasis=mappingCorrelated.correlationBasis();
    this.correlationResult=mappingCorrelated.correlationResult();
    this.correlated=mappingCorrelated.correlated();
    this.correlationKeyAlias=mappingCorrelated.correlationKeyAlias();
    this.correlationExpression=mappingCorrelated.correlationExpression();
    if (mappingCorrelated.correlationBasis().isEmpty()) {
      context.addError(""String_Node_Str"" + getLocation());
    }
  }
 else {
    context.addError(""String_Node_Str"" + mapping.getErrorLocation());
    this.mapping=null;
    this.fetches=EMPTY;
    this.fetchStrategy=null;
    this.batchSize=Integer.MIN_VALUE;
    this.subqueryProvider=null;
    this.id=false;
    this.updateMappable=false;
    this.mappingType=null;
    this.subqueryExpression=null;
    this.subqueryAlias=null;
    this.correlationBasis=null;
    this.correlationResult=null;
    this.correlationProvider=null;
    this.correlated=null;
    this.correlationKeyAlias=null;
    this.correlationExpression=null;
  }
}",0.9948601662887376
168779,"private static void validateTypesCompatible(ManagedType<?> managedType,String expression,Class<?> targetType,Class<?> targetElementType,boolean subtypesAllowed,MetamodelBuildingContext context,ExpressionLocation expressionLocation,String location){
  final Class<?> expressionType=targetType;
  if (expression.isEmpty()) {
    if (isCompatible(managedType.getJavaType(),null,targetType,targetElementType,subtypesAllowed)) {
      return;
    }
    context.addError(typeCompatibilityError(Arrays.<TargetType>asList(new ScalarTargetResolvingExpressionVisitor.TargetTypeImpl(false,null,managedType.getJavaType(),null)),expressionType,targetElementType,expressionLocation,location));
    return;
  }
  ScalarTargetResolvingExpressionVisitor visitor=new ScalarTargetResolvingExpressionVisitor(managedType,context.getEntityMetamodel(),context.getJpqlFunctions());
  try {
    context.getExpressionFactory().createSimpleExpression(expression,false).accept(visitor);
  }
 catch (  SyntaxErrorException ex) {
    context.addError(""String_Node_Str"" + expressionLocation + ""String_Node_Str""+ expression+ ""String_Node_Str""+ location+ ""String_Node_Str""+ ex.getMessage());
  }
catch (  IllegalArgumentException ex) {
    context.addError(""String_Node_Str"" + expressionLocation + ""String_Node_Str""+ location+ ""String_Node_Str""+ ex.getMessage());
  }
  List<TargetType> possibleTargets=visitor.getPossibleTargets();
  if (!possibleTargets.isEmpty()) {
    boolean error=true;
    for (    TargetType t : possibleTargets) {
      if (isCompatible(t,targetType,targetElementType,subtypesAllowed)) {
        error=false;
        break;
      }
    }
    if (error) {
      if (targetType.isPrimitive()) {
        targetType=ReflectionUtils.getObjectClassOfPrimitve(targetType);
      }
 else {
        targetType=ReflectionUtils.getPrimitiveClassOfWrapper(targetType);
      }
      if (targetType != null) {
        for (        TargetType t : possibleTargets) {
          if (isCompatible(t,targetType,targetElementType,subtypesAllowed)) {
            error=false;
            break;
          }
        }
      }
    }
    if (error) {
      context.addError(typeCompatibilityError(possibleTargets,expressionType,targetElementType,expressionLocation,location));
    }
  }
}","private static void validateTypesCompatible(List<TargetType> possibleTargets,Class<?> targetType,Class<?> targetElementType,boolean subtypesAllowed,MetamodelBuildingContext context,ExpressionLocation expressionLocation,String location){
  final Class<?> expressionType=targetType;
  if (!possibleTargets.isEmpty()) {
    boolean error=true;
    for (    TargetType t : possibleTargets) {
      if (isCompatible(t,targetType,targetElementType,subtypesAllowed)) {
        error=false;
        break;
      }
    }
    if (error) {
      if (targetType.isPrimitive()) {
        targetType=ReflectionUtils.getObjectClassOfPrimitve(targetType);
      }
 else {
        targetType=ReflectionUtils.getPrimitiveClassOfWrapper(targetType);
      }
      if (targetType != null) {
        for (        TargetType t : possibleTargets) {
          if (isCompatible(t,targetType,targetElementType,subtypesAllowed)) {
            error=false;
            break;
          }
        }
      }
    }
    if (error) {
      context.addError(typeCompatibilityError(possibleTargets,expressionType,targetElementType,expressionLocation,location));
    }
  }
}",0.1025036818851251
168780,"private void update(UpdateContext context,Object entity,MutableStateTrackable updatableProxy){
  if (!rootUpdateAllowed && entity == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + updatableProxy.getClass().getName() + ""String_Node_Str"");
  }
  @SuppressWarnings(""String_Node_Str"") DirtyAttributeFlusher<?,Object,Object> flusher=getNestedDirtyFlusher(context,updatableProxy,null);
  if (flusher == null) {
    return;
  }
  try {
    if (flushStrategy == FlushStrategy.ENTITY || !flusher.supportsQueryFlush()) {
      flusher.flushEntity(context,entity,updatableProxy,updatableProxy);
    }
 else {
      Query query=createUpdateQuery(context,updatableProxy,flusher);
      flusher.flushQuery(context,null,query,updatableProxy,updatableProxy);
      if (query != null) {
        int updated=query.executeUpdate();
        if (updated != 1) {
          throw new OptimisticLockException(entity,updatableProxy);
        }
      }
    }
  }
  finally {
    context.getInitialStateResetter().addUpdatedView(updatableProxy);
  }
}","private void update(UpdateContext context,Object entity,MutableStateTrackable updatableProxy){
  if (!rootUpdateAllowed && entity == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + updatableProxy.getClass().getName() + ""String_Node_Str"");
  }
  @SuppressWarnings(""String_Node_Str"") DirtyAttributeFlusher<?,Object,Object> flusher=(DirtyAttributeFlusher<?,Object,Object>)(DirtyAttributeFlusher)getNestedDirtyFlusher(context,updatableProxy,(DirtyAttributeFlusher)null);
  if (flusher == null) {
    return;
  }
  try {
    if (flushStrategy == FlushStrategy.ENTITY || !flusher.supportsQueryFlush()) {
      flusher.flushEntity(context,entity,updatableProxy,updatableProxy);
    }
 else {
      Query query=createUpdateQuery(context,updatableProxy,flusher);
      flusher.flushQuery(context,null,query,updatableProxy,updatableProxy);
      if (query != null) {
        int updated=query.executeUpdate();
        if (updated != 1) {
          throw new OptimisticLockException(entity,updatableProxy);
        }
      }
    }
  }
  finally {
    context.getInitialStateResetter().addUpdatedView(updatableProxy);
  }
}",0.9604415823367064
168781,"protected final boolean determineElementFlushers(UpdateContext context,TypeDescriptor typeDescriptor,List<CollectionElementAttributeFlusher<E,V>> elementFlushers,Iterable<?> current){
  if (typeDescriptor.shouldFlushMutations()) {
    if (typeDescriptor.isSubview()) {
      final ViewToEntityMapper mapper=typeDescriptor.getViewToEntityMapper();
      if (typeDescriptor.isIdentifiable()) {
        for (        Object o : current) {
          if (o instanceof MutableStateTrackable) {
            MutableStateTrackable element=(MutableStateTrackable)o;
            @SuppressWarnings(""String_Node_Str"") DirtyAttributeFlusher<?,E,V> flusher=(DirtyAttributeFlusher<?,E,V>)mapper.getNestedDirtyFlusher(context,element,null);
            if (flusher != null) {
              elementFlushers.add(new UpdateCollectionElementAttributeFlusher<E,V>(flusher,element,optimisticLockProtected,mapper));
            }
          }
        }
      }
 else {
        for (        Object o : current) {
          if (o instanceof MutableStateTrackable) {
            MutableStateTrackable element=(MutableStateTrackable)o;
            @SuppressWarnings(""String_Node_Str"") DirtyAttributeFlusher<?,E,V> flusher=(DirtyAttributeFlusher<?,E,V>)mapper.getNestedDirtyFlusher(context,element,null);
            if (flusher != null) {
              return true;
            }
          }
        }
      }
    }
 else     if (typeDescriptor.isJpaEntity()) {
      for (      Object element : current) {
        if (typeDescriptor.getBasicUserType().shouldPersist(element) && typeDescriptor.shouldJpaPersist()) {
          elementFlushers.add(new PersistCollectionElementAttributeFlusher<E,V>(element,optimisticLockProtected));
        }
 else         if (typeDescriptor.shouldJpaMerge()) {
          return true;
        }
      }
    }
 else     if (typeDescriptor.getBasicUserType().supportsDirtyChecking()) {
      for (      Object element : current) {
        String[] dirtyProperties=typeDescriptor.getBasicUserType().getDirtyProperties(element);
        if (dirtyProperties != null) {
          return true;
        }
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + typeDescriptor);
    }
  }
  return false;
}","protected final boolean determineElementFlushers(UpdateContext context,TypeDescriptor typeDescriptor,List<CollectionElementAttributeFlusher<E,V>> elementFlushers,Iterable<?> current){
  if (typeDescriptor.shouldFlushMutations()) {
    if (typeDescriptor.isSubview()) {
      final ViewToEntityMapper mapper=typeDescriptor.getViewToEntityMapper();
      if (typeDescriptor.isIdentifiable()) {
        for (        Object o : current) {
          if (o instanceof MutableStateTrackable) {
            MutableStateTrackable element=(MutableStateTrackable)o;
            @SuppressWarnings(""String_Node_Str"") DirtyAttributeFlusher<?,E,V> flusher=(DirtyAttributeFlusher<?,E,V>)(DirtyAttributeFlusher)mapper.getNestedDirtyFlusher(context,element,(DirtyAttributeFlusher)null);
            if (flusher != null) {
              elementFlushers.add(new UpdateCollectionElementAttributeFlusher<E,V>(flusher,element,optimisticLockProtected,mapper));
            }
          }
        }
      }
 else {
        for (        Object o : current) {
          if (o instanceof MutableStateTrackable) {
            MutableStateTrackable element=(MutableStateTrackable)o;
            @SuppressWarnings(""String_Node_Str"") DirtyAttributeFlusher<?,E,V> flusher=(DirtyAttributeFlusher<?,E,V>)(DirtyAttributeFlusher)mapper.getNestedDirtyFlusher(context,element,(DirtyAttributeFlusher)null);
            if (flusher != null) {
              return true;
            }
          }
        }
      }
    }
 else     if (typeDescriptor.isJpaEntity()) {
      for (      Object element : current) {
        if (typeDescriptor.getBasicUserType().shouldPersist(element) && typeDescriptor.shouldJpaPersist()) {
          elementFlushers.add(new PersistCollectionElementAttributeFlusher<E,V>(element,optimisticLockProtected));
        }
 else         if (typeDescriptor.shouldJpaMerge()) {
          return true;
        }
      }
    }
 else     if (typeDescriptor.getBasicUserType().supportsDirtyChecking()) {
      for (      Object element : current) {
        String[] dirtyProperties=typeDescriptor.getBasicUserType().getDirtyProperties(element);
        if (dirtyProperties != null) {
          return true;
        }
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + typeDescriptor);
    }
  }
  return false;
}",0.9797535211267606
168782,"private void visitInverseElementFlushersForActions(UpdateContext context,Iterable<?> current,Map<Object,Object> added,Map<Object,Object> removed,ElementChangeListener<E,V> listener){
  if (elementDescriptor.isSubview()) {
    final ViewToEntityMapper mapper=elementDescriptor.getViewToEntityMapper();
    for (    Object o : current) {
      if (o instanceof MutableStateTrackable) {
        MutableStateTrackable element=(MutableStateTrackable)o;
        @SuppressWarnings(""String_Node_Str"") DirtyAttributeFlusher<?,E,V> flusher=(DirtyAttributeFlusher<?,E,V>)mapper.getNestedDirtyFlusher(context,element,null);
        if (flusher != null) {
          Object addedElement=added.remove(element);
          if (addedElement != null) {
            listener.onAddedAndUpdatedInverseElement(flusher,element);
          }
 else {
            listener.onUpdatedInverseElement(flusher,element);
          }
        }
      }
    }
    for (    Object element : removed.values()) {
      listener.onRemovedInverseElement(element);
    }
    for (    Object element : added.values()) {
      listener.onAddedInverseElement(element);
    }
  }
 else   if (elementDescriptor.isJpaEntity()) {
    for (    Object element : current) {
      if (elementDescriptor.getBasicUserType().shouldPersist(element) && elementDescriptor.shouldJpaPersist()) {
        CollectionElementAttributeFlusher<E,V> flusher=new PersistCollectionElementAttributeFlusher<>(element,optimisticLockProtected);
        Object addedElement=added.remove(element);
        if (addedElement != null) {
          listener.onAddedAndUpdatedInverseElement(flusher,element);
        }
 else {
          listener.onUpdatedInverseElement(flusher,element);
        }
      }
 else       if (elementDescriptor.shouldJpaMerge()) {
        CollectionElementAttributeFlusher<E,V> flusher=new MergeCollectionElementAttributeFlusher<>(element,optimisticLockProtected);
        Object addedElement=added.remove(element);
        if (addedElement != null) {
          listener.onAddedAndUpdatedInverseElement(flusher,element);
        }
 else {
          listener.onUpdatedInverseElement(flusher,element);
        }
      }
 else {
        Object addedElement=added.remove(element);
        if (addedElement != null) {
          listener.onAddedInverseElement(element);
        }
      }
    }
    for (    Object element : removed.values()) {
      listener.onRemovedInverseElement(element);
    }
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
}","private void visitInverseElementFlushersForActions(UpdateContext context,Iterable<?> current,Map<Object,Object> added,Map<Object,Object> removed,ElementChangeListener<E,V> listener){
  if (elementDescriptor.isSubview()) {
    final ViewToEntityMapper mapper=elementDescriptor.getViewToEntityMapper();
    for (    Object o : current) {
      if (o instanceof MutableStateTrackable) {
        MutableStateTrackable element=(MutableStateTrackable)o;
        @SuppressWarnings(""String_Node_Str"") DirtyAttributeFlusher<?,E,V> flusher=(DirtyAttributeFlusher<?,E,V>)(DirtyAttributeFlusher)mapper.getNestedDirtyFlusher(context,element,(DirtyAttributeFlusher)null);
        if (flusher != null) {
          Object addedElement=added.remove(element);
          if (addedElement != null) {
            listener.onAddedAndUpdatedInverseElement(flusher,element);
          }
 else {
            listener.onUpdatedInverseElement(flusher,element);
          }
        }
      }
    }
    for (    Object element : removed.values()) {
      listener.onRemovedInverseElement(element);
    }
    for (    Object element : added.values()) {
      listener.onAddedInverseElement(element);
    }
  }
 else   if (elementDescriptor.isJpaEntity()) {
    for (    Object element : current) {
      if (elementDescriptor.getBasicUserType().shouldPersist(element) && elementDescriptor.shouldJpaPersist()) {
        CollectionElementAttributeFlusher<E,V> flusher=new PersistCollectionElementAttributeFlusher<>(element,optimisticLockProtected);
        Object addedElement=added.remove(element);
        if (addedElement != null) {
          listener.onAddedAndUpdatedInverseElement(flusher,element);
        }
 else {
          listener.onUpdatedInverseElement(flusher,element);
        }
      }
 else       if (elementDescriptor.shouldJpaMerge()) {
        CollectionElementAttributeFlusher<E,V> flusher=new MergeCollectionElementAttributeFlusher<>(element,optimisticLockProtected);
        Object addedElement=added.remove(element);
        if (addedElement != null) {
          listener.onAddedAndUpdatedInverseElement(flusher,element);
        }
 else {
          listener.onUpdatedInverseElement(flusher,element);
        }
      }
 else {
        Object addedElement=added.remove(element);
        if (addedElement != null) {
          listener.onAddedInverseElement(element);
        }
      }
    }
    for (    Object element : removed.values()) {
      listener.onRemovedInverseElement(element);
    }
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
}",0.9909591194968552
168783,"@Override public List<Object[]> transform(List<Object[]> tuples){
  FixedArrayList correlationParams=new FixedArrayList(batchSize);
  int tupleOffset=batchSize > 1 ? 1 : 0;
  Iterator<Object[]> tupleListIter=tuples.iterator();
  final String correlationRoot=applyAndGetCorrelationRoot(expectBatchCorrelationValues);
  EntityManager em=criteriaBuilder.getEntityManager();
  if (viewRootJpqlMacro.usesViewRoot()) {
    int totalSize=tuples.size();
    Map<Object,Map<Object,TuplePromise>> viewRoots=new HashMap<Object,Map<Object,TuplePromise>>(totalSize);
    Map<Object,Map<Object,TuplePromise>> correlationValues=new HashMap<Object,Map<Object,TuplePromise>>(totalSize);
    while (tupleListIter.hasNext()) {
      Object[] tuple=tupleListIter.next();
      Object viewRootKey=tuple[0];
      Object correlationValueKey=tuple[startIndex];
      Map<Object,TuplePromise> viewRootCorrelationValues=viewRoots.get(viewRootKey);
      if (viewRootCorrelationValues == null) {
        viewRootCorrelationValues=new HashMap<Object,TuplePromise>();
        viewRoots.put(viewRootKey,viewRootCorrelationValues);
      }
      TuplePromise viewRootPromise=viewRootCorrelationValues.get(correlationValueKey);
      if (viewRootPromise == null) {
        viewRootPromise=new TuplePromise(startIndex);
        viewRootCorrelationValues.put(correlationValueKey,viewRootPromise);
      }
      viewRootPromise.add(tuple);
      Map<Object,TuplePromise> correlationValueViewRoots=correlationValues.get(correlationValueKey);
      if (correlationValueViewRoots == null) {
        correlationValueViewRoots=new HashMap<Object,TuplePromise>();
        correlationValues.put(correlationValueKey,correlationValueViewRoots);
      }
      TuplePromise correlationValuePromise=correlationValueViewRoots.get(viewRootKey);
      if (correlationValuePromise == null) {
        correlationValuePromise=new TuplePromise(startIndex);
        correlationValueViewRoots.put(viewRootKey,correlationValuePromise);
      }
      correlationValuePromise.add(tuple);
    }
    boolean batchCorrelationValues=viewRoots.size() <= correlationValues.size();
    FixedArrayList viewRootIds=new FixedArrayList(batchSize);
    if (batchCorrelationValues) {
      if (batchSize > 1) {
        if (!expectBatchCorrelationValues) {
          applyAndGetCorrelationRoot(true);
        }
        criteriaBuilder.select(correlationKeyExpression);
      }
      correlator.finish(criteriaBuilder,entityViewConfiguration,tupleOffset,correlationRoot);
      populateParameters(criteriaBuilder);
      query=criteriaBuilder.getQuery();
      for (      Map.Entry<Object,Map<Object,TuplePromise>> batchEntry : viewRoots.entrySet()) {
        Map<Object,TuplePromise> batchValues=batchEntry.getValue();
        for (        Map.Entry<Object,TuplePromise> batchValueEntry : batchValues.entrySet()) {
          if (correlationBasisEntity != null) {
            correlationParams.add(em.getReference(correlationBasisEntity,batchValueEntry.getKey()));
          }
 else {
            correlationParams.add(batchValueEntry.getKey());
          }
          if (batchSize == correlationParams.realSize()) {
            viewRootIds.add(batchEntry.getKey());
            Object defaultKey;
            if (correlationBasisEntity != null) {
              defaultKey=em.getEntityManagerFactory().getPersistenceUnitUtil().getIdentifier(correlationParams.get(0));
            }
 else {
              defaultKey=correlationParams.get(0);
            }
            batchLoad(batchValues,correlationParams,viewRootIds,defaultKey,true);
          }
        }
        if (correlationParams.realSize() > 0) {
          viewRootIds.add(batchEntry.getKey());
          batchLoad(batchValues,correlationParams,viewRootIds,null,true);
        }
      }
      fillDefaultValues(viewRoots);
    }
 else {
      if (batchSize > 1) {
        if (expectBatchCorrelationValues) {
          applyAndGetCorrelationRoot(false);
        }
        criteriaBuilder.select(correlationKeyExpression);
      }
      correlator.finish(criteriaBuilder,entityViewConfiguration,tupleOffset,correlationRoot);
      populateParameters(criteriaBuilder);
      query=criteriaBuilder.getQuery();
      for (      Map.Entry<Object,Map<Object,TuplePromise>> batchEntry : correlationValues.entrySet()) {
        Map<Object,TuplePromise> batchValues=batchEntry.getValue();
        for (        Map.Entry<Object,TuplePromise> batchValueEntry : batchValues.entrySet()) {
          if (viewRootJpqlMacro.usesViewRootEntityParameter()) {
            viewRootIds.add(em.getReference(viewRootType.getEntityClass(),batchValueEntry.getKey()));
          }
 else {
            viewRootIds.add(batchValueEntry.getKey());
          }
          if (batchSize == viewRootIds.realSize()) {
            if (correlationBasisEntity != null) {
              correlationParams.add(em.getReference(correlationBasisEntity,batchEntry.getKey()));
            }
 else {
              correlationParams.add(batchEntry.getKey());
            }
            Object defaultKey;
            if (viewRootJpqlMacro.usesViewRootEntityParameter()) {
              defaultKey=em.getEntityManagerFactory().getPersistenceUnitUtil().getIdentifier(viewRootIds.get(0));
            }
 else {
              defaultKey=viewRootIds.get(0);
            }
            batchLoad(batchValues,correlationParams,viewRootIds,defaultKey,false);
          }
        }
        if (viewRootIds.realSize() > 0) {
          if (correlationBasisEntity != null) {
            correlationParams.add(em.getReference(correlationBasisEntity,batchEntry.getKey()));
          }
 else {
            correlationParams.add(batchEntry.getKey());
          }
          batchLoad(batchValues,correlationParams,viewRootIds,null,false);
        }
      }
      fillDefaultValues(correlationValues);
    }
  }
 else {
    if (batchSize > 1) {
      if (!expectBatchCorrelationValues) {
        applyAndGetCorrelationRoot(true);
      }
      criteriaBuilder.select(correlationKeyExpression);
    }
    correlator.finish(criteriaBuilder,entityViewConfiguration,tupleOffset,correlationRoot);
    populateParameters(criteriaBuilder);
    query=criteriaBuilder.getQuery();
    Map<Object,TuplePromise> correlationValues=new HashMap<Object,TuplePromise>(tuples.size());
    while (tupleListIter.hasNext()) {
      Object[] tuple=tupleListIter.next();
      Object correlationValue=tuple[startIndex];
      TuplePromise tupleIndexValue=correlationValues.get(correlationValue);
      if (tupleIndexValue == null) {
        tupleIndexValue=new TuplePromise(startIndex);
        tupleIndexValue.add(tuple);
        correlationValues.put(correlationValue,tupleIndexValue);
        if (correlationBasisEntity != null) {
          correlationParams.add(em.getReference(correlationBasisEntity,tuple[startIndex]));
        }
 else {
          correlationParams.add(tuple[startIndex]);
        }
        if (batchSize == correlationParams.realSize()) {
          Object defaultKey;
          if (correlationBasisEntity != null) {
            defaultKey=em.getEntityManagerFactory().getPersistenceUnitUtil().getIdentifier(correlationParams.get(0));
          }
 else {
            defaultKey=correlationParams.get(0);
          }
          batchLoad(correlationValues,correlationParams,null,defaultKey,batchSize > 1);
        }
      }
 else {
        tupleIndexValue.add(tuple);
      }
    }
    if (correlationParams.realSize() > 0) {
      batchLoad(correlationValues,correlationParams,null,null,batchSize > 1);
    }
    fillDefaultValues(Collections.singletonMap(null,correlationValues));
  }
  return tuples;
}","@Override public List<Object[]> transform(List<Object[]> tuples){
  FixedArrayList correlationParams=new FixedArrayList(batchSize);
  int tupleOffset=batchSize > 1 ? 1 : 0;
  Iterator<Object[]> tupleListIter=tuples.iterator();
  final String correlationRoot=applyAndGetCorrelationRoot(expectBatchCorrelationValues);
  EntityManager em=criteriaBuilder.getEntityManager();
  if (viewRootJpqlMacro.usesViewRoot()) {
    int totalSize=tuples.size();
    Map<Object,Map<Object,TuplePromise>> viewRoots=new HashMap<Object,Map<Object,TuplePromise>>(totalSize);
    Map<Object,Map<Object,TuplePromise>> correlationValues=new HashMap<Object,Map<Object,TuplePromise>>(totalSize);
    while (tupleListIter.hasNext()) {
      Object[] tuple=tupleListIter.next();
      Object viewRootKey=tuple[0];
      Object correlationValueKey=tuple[startIndex];
      Map<Object,TuplePromise> viewRootCorrelationValues=viewRoots.get(viewRootKey);
      if (viewRootCorrelationValues == null) {
        viewRootCorrelationValues=new HashMap<Object,TuplePromise>();
        viewRoots.put(viewRootKey,viewRootCorrelationValues);
      }
      TuplePromise viewRootPromise=viewRootCorrelationValues.get(correlationValueKey);
      if (viewRootPromise == null) {
        viewRootPromise=new TuplePromise(startIndex);
        viewRootCorrelationValues.put(correlationValueKey,viewRootPromise);
      }
      viewRootPromise.add(tuple);
      Map<Object,TuplePromise> correlationValueViewRoots=correlationValues.get(correlationValueKey);
      if (correlationValueViewRoots == null) {
        correlationValueViewRoots=new HashMap<Object,TuplePromise>();
        correlationValues.put(correlationValueKey,correlationValueViewRoots);
      }
      TuplePromise correlationValuePromise=correlationValueViewRoots.get(viewRootKey);
      if (correlationValuePromise == null) {
        correlationValuePromise=new TuplePromise(startIndex);
        correlationValueViewRoots.put(viewRootKey,correlationValuePromise);
      }
      correlationValuePromise.add(tuple);
    }
    boolean batchCorrelationValues=viewRoots.size() <= correlationValues.size();
    FixedArrayList viewRootIds=new FixedArrayList(batchSize);
    if (batchCorrelationValues) {
      if (batchSize > 1) {
        if (!expectBatchCorrelationValues) {
          applyAndGetCorrelationRoot(true);
        }
        criteriaBuilder.select(correlationSelectExpression);
      }
      correlator.finish(criteriaBuilder,entityViewConfiguration,tupleOffset,correlationRoot);
      populateParameters(criteriaBuilder);
      query=criteriaBuilder.getQuery();
      for (      Map.Entry<Object,Map<Object,TuplePromise>> batchEntry : viewRoots.entrySet()) {
        Map<Object,TuplePromise> batchValues=batchEntry.getValue();
        for (        Map.Entry<Object,TuplePromise> batchValueEntry : batchValues.entrySet()) {
          if (correlationBasisEntity != null) {
            correlationParams.add(em.getReference(correlationBasisEntity,batchValueEntry.getKey()));
          }
 else {
            correlationParams.add(batchValueEntry.getKey());
          }
          if (batchSize == correlationParams.realSize()) {
            viewRootIds.add(batchEntry.getKey());
            Object defaultKey;
            if (correlationBasisEntity != null) {
              defaultKey=em.getEntityManagerFactory().getPersistenceUnitUtil().getIdentifier(correlationParams.get(0));
            }
 else {
              defaultKey=correlationParams.get(0);
            }
            batchLoad(batchValues,correlationParams,viewRootIds,defaultKey,true);
          }
        }
        if (correlationParams.realSize() > 0) {
          viewRootIds.add(batchEntry.getKey());
          batchLoad(batchValues,correlationParams,viewRootIds,null,true);
        }
      }
      fillDefaultValues(viewRoots);
    }
 else {
      if (batchSize > 1) {
        if (expectBatchCorrelationValues) {
          applyAndGetCorrelationRoot(false);
        }
        criteriaBuilder.select(correlationSelectExpression);
      }
      correlator.finish(criteriaBuilder,entityViewConfiguration,tupleOffset,correlationRoot);
      populateParameters(criteriaBuilder);
      query=criteriaBuilder.getQuery();
      for (      Map.Entry<Object,Map<Object,TuplePromise>> batchEntry : correlationValues.entrySet()) {
        Map<Object,TuplePromise> batchValues=batchEntry.getValue();
        for (        Map.Entry<Object,TuplePromise> batchValueEntry : batchValues.entrySet()) {
          if (viewRootJpqlMacro.usesViewRootEntityParameter()) {
            viewRootIds.add(em.getReference(viewRootType.getEntityClass(),batchValueEntry.getKey()));
          }
 else {
            viewRootIds.add(batchValueEntry.getKey());
          }
          if (batchSize == viewRootIds.realSize()) {
            if (correlationBasisEntity != null) {
              correlationParams.add(em.getReference(correlationBasisEntity,batchEntry.getKey()));
            }
 else {
              correlationParams.add(batchEntry.getKey());
            }
            Object defaultKey;
            if (viewRootJpqlMacro.usesViewRootEntityParameter()) {
              defaultKey=em.getEntityManagerFactory().getPersistenceUnitUtil().getIdentifier(viewRootIds.get(0));
            }
 else {
              defaultKey=viewRootIds.get(0);
            }
            batchLoad(batchValues,correlationParams,viewRootIds,defaultKey,false);
          }
        }
        if (viewRootIds.realSize() > 0) {
          if (correlationBasisEntity != null) {
            correlationParams.add(em.getReference(correlationBasisEntity,batchEntry.getKey()));
          }
 else {
            correlationParams.add(batchEntry.getKey());
          }
          batchLoad(batchValues,correlationParams,viewRootIds,null,false);
        }
      }
      fillDefaultValues(correlationValues);
    }
  }
 else {
    if (batchSize > 1) {
      if (!expectBatchCorrelationValues) {
        applyAndGetCorrelationRoot(true);
      }
      criteriaBuilder.select(correlationSelectExpression);
    }
    correlator.finish(criteriaBuilder,entityViewConfiguration,tupleOffset,correlationRoot);
    populateParameters(criteriaBuilder);
    query=criteriaBuilder.getQuery();
    Map<Object,TuplePromise> correlationValues=new HashMap<Object,TuplePromise>(tuples.size());
    while (tupleListIter.hasNext()) {
      Object[] tuple=tupleListIter.next();
      Object correlationValue=tuple[startIndex];
      TuplePromise tupleIndexValue=correlationValues.get(correlationValue);
      if (tupleIndexValue == null) {
        tupleIndexValue=new TuplePromise(startIndex);
        tupleIndexValue.add(tuple);
        correlationValues.put(correlationValue,tupleIndexValue);
        if (correlationBasisEntity != null) {
          correlationParams.add(em.getReference(correlationBasisEntity,tuple[startIndex]));
        }
 else {
          correlationParams.add(tuple[startIndex]);
        }
        if (batchSize == correlationParams.realSize()) {
          Object defaultKey;
          if (correlationBasisEntity != null) {
            defaultKey=em.getEntityManagerFactory().getPersistenceUnitUtil().getIdentifier(correlationParams.get(0));
          }
 else {
            defaultKey=correlationParams.get(0);
          }
          batchLoad(correlationValues,correlationParams,null,defaultKey,batchSize > 1);
        }
      }
 else {
        tupleIndexValue.add(tuple);
      }
    }
    if (correlationParams.realSize() > 0) {
      batchLoad(correlationValues,correlationParams,null,null,batchSize > 1);
    }
    fillDefaultValues(Collections.singletonMap(null,correlationValues));
  }
  return tuples;
}",0.998229624286932
168784,"private String applyAndGetCorrelationRoot(boolean batchCorrelationValues){
  Class<?> viewRootEntityClass=viewRootType.getEntityClass();
  String idAttributePath=getEntityIdName(viewRootEntityClass);
  FullQueryBuilder<?,?> queryBuilder=entityViewConfiguration.getCriteriaBuilder();
  Map<String,Object> optionalParameters=entityViewConfiguration.getOptionalParameters();
  Class<?> correlationBasisEntityType;
  String viewRootExpression;
  if (batchCorrelationValues) {
    correlationBasisEntityType=correlationBasisEntity;
    viewRootExpression=null;
  }
 else {
    correlationBasisEntityType=viewRootEntityClass;
    viewRootExpression=CORRELATION_KEY_ALIAS;
  }
  this.criteriaBuilder=queryBuilder.getCriteriaBuilderFactory().create(queryBuilder.getEntityManager(),Object[].class);
  this.viewRootJpqlMacro=new CorrelatedSubqueryViewRootJpqlMacro(criteriaBuilder,optionalParameters,viewRootEntityClass,idAttributePath,viewRootExpression);
  this.criteriaBuilder.registerMacro(""String_Node_Str"",viewRootJpqlMacro);
  SubqueryCorrelationBuilder correlationBuilder=new SubqueryCorrelationBuilder(criteriaBuilder,correlationResult,correlationBasisType,correlationBasisEntityType,CORRELATION_KEY_ALIAS,batchSize,false,attributePath);
  CorrelationProvider provider=correlationProviderFactory.create(entityViewConfiguration.getCriteriaBuilder(),entityViewConfiguration.getOptionalParameters());
  if (batchSize > 1) {
    if (batchCorrelationValues) {
      this.correlationParamName=CORRELATION_KEY_ALIAS;
    }
 else {
      this.correlationParamName=generateCorrelationParamName();
    }
    if (correlationBasisEntityType != null) {
      if (batchCorrelationValues) {
        correlationKeyExpression=CORRELATION_KEY_ALIAS + getEntityIdName(correlationBasisEntityType);
      }
 else {
        correlationKeyExpression=CORRELATION_KEY_ALIAS + '.' + idAttributePath;
      }
    }
 else {
      correlationKeyExpression=CORRELATION_KEY_ALIAS + ""String_Node_Str"";
    }
  }
 else {
    this.correlationParamName=generateCorrelationParamName();
    this.correlationKeyExpression=null;
  }
  if (batchSize > 1 && batchCorrelationValues) {
    provider.applyCorrelation(correlationBuilder,correlationKeyExpression);
  }
 else {
    provider.applyCorrelation(correlationBuilder,':' + correlationParamName);
  }
  if (fetches.length != 0) {
    for (int i=0; i < fetches.length; i++) {
      criteriaBuilder.fetch(correlationBuilder.getCorrelationAlias() + ""String_Node_Str"" + fetches[i]);
    }
  }
  return correlationBuilder.getCorrelationRoot();
}","private String applyAndGetCorrelationRoot(boolean batchCorrelationValues){
  Class<?> viewRootEntityClass=viewRootType.getEntityClass();
  String idAttributePath=getEntityIdName(viewRootEntityClass);
  FullQueryBuilder<?,?> queryBuilder=entityViewConfiguration.getCriteriaBuilder();
  Map<String,Object> optionalParameters=entityViewConfiguration.getOptionalParameters();
  Class<?> correlationBasisEntityType;
  String viewRootExpression;
  if (batchCorrelationValues) {
    correlationBasisEntityType=correlationBasisEntity;
    viewRootExpression=null;
  }
 else {
    correlationBasisEntityType=viewRootEntityClass;
    viewRootExpression=CORRELATION_KEY_ALIAS;
  }
  this.criteriaBuilder=queryBuilder.getCriteriaBuilderFactory().create(queryBuilder.getEntityManager(),Object[].class);
  this.viewRootJpqlMacro=new CorrelatedSubqueryViewRootJpqlMacro(criteriaBuilder,optionalParameters,viewRootEntityClass,idAttributePath,viewRootExpression);
  this.criteriaBuilder.registerMacro(""String_Node_Str"",viewRootJpqlMacro);
  SubqueryCorrelationBuilder correlationBuilder=new SubqueryCorrelationBuilder(criteriaBuilder,correlationResult,correlationBasisType,correlationBasisEntityType,CORRELATION_KEY_ALIAS,batchSize,false,attributePath);
  CorrelationProvider provider=correlationProviderFactory.create(entityViewConfiguration.getCriteriaBuilder(),entityViewConfiguration.getOptionalParameters());
  String correlationKeyExpression;
  if (batchSize > 1) {
    if (batchCorrelationValues) {
      this.correlationParamName=CORRELATION_KEY_ALIAS;
    }
 else {
      this.correlationParamName=generateCorrelationParamName();
    }
    if (correlationBasisEntityType != null) {
      correlationKeyExpression=CORRELATION_KEY_ALIAS;
      if (batchCorrelationValues) {
        correlationSelectExpression=CORRELATION_KEY_ALIAS + '.' + getEntityIdName(correlationBasisEntityType);
      }
 else {
        correlationSelectExpression=CORRELATION_KEY_ALIAS + '.' + idAttributePath;
      }
    }
 else {
      correlationSelectExpression=correlationKeyExpression=CORRELATION_KEY_ALIAS + ""String_Node_Str"";
    }
  }
 else {
    this.correlationParamName=generateCorrelationParamName();
    this.correlationSelectExpression=correlationKeyExpression=null;
  }
  if (batchSize > 1 && batchCorrelationValues) {
    provider.applyCorrelation(correlationBuilder,correlationKeyExpression);
  }
 else {
    provider.applyCorrelation(correlationBuilder,':' + correlationParamName);
  }
  if (fetches.length != 0) {
    for (int i=0; i < fetches.length; i++) {
      criteriaBuilder.fetch(correlationBuilder.getCorrelationAlias() + ""String_Node_Str"" + fetches[i]);
    }
  }
  return correlationBuilder.getCorrelationRoot();
}",0.918045255752044
168785,"private void updateClauseDependencies(JoinNode baseNode,ClauseType clauseDependency,Set<JoinNode> seenNodes){
  if (!seenNodes.add(baseNode)) {
    throw new IllegalStateException(""String_Node_Str"" + seenNodes);
  }
  JoinNode current=baseNode;
  while (current != null) {
    for (    JoinNode dependency : current.getDependencies()) {
      updateClauseDependencies(dependency,clauseDependency,seenNodes);
    }
    current.getClauseDependencies().add(clauseDependency);
    current=current.getParent();
  }
}","private void updateClauseDependencies(JoinNode baseNode,ClauseType clauseDependency,Set<JoinNode> seenNodes){
  if (!seenNodes.add(baseNode)) {
    throw new IllegalStateException(""String_Node_Str"" + seenNodes);
  }
  JoinNode current=baseNode;
  while (current != null) {
    for (    JoinNode dependency : current.getDependencies()) {
      updateClauseDependencies(dependency,clauseDependency,seenNodes);
    }
    current.getClauseDependencies().add(clauseDependency);
    if (current.getDependencies().contains(current.getParent())) {
      break;
    }
    current=current.getParent();
  }
}",0.9223826714801444
168786,"public static Class<?> resolveFieldClass(Class<?> baseClass,Attribute<?,?> attr){
  Class<?> resolverBaseClass=getConcreterClass(baseClass,attr.getDeclaringType().getJavaType());
  Class<?> jpaReportedFieldClass;
  Class<?> fieldClass;
  if (attr.isCollection()) {
    PluralAttribute<?,?,?> collectionAttr=(PluralAttribute<?,?,?>)attr;
    fieldClass=collectionAttr.getElementType().getJavaType();
    jpaReportedFieldClass=fieldClass;
    if (collectionAttr.getCollectionType() == PluralAttribute.CollectionType.MAP) {
      if (attr.getJavaMember() instanceof Method) {
        Method method=(Method)attr.getJavaMember();
        Class<?>[] typeArguments=ReflectionUtils.getResolvedMethodReturnTypeArguments(resolverBaseClass,method);
        if (typeArguments.length != 0) {
          fieldClass=typeArguments[1];
          if (fieldClass == null) {
            fieldClass=resolveType(resolverBaseClass,((ParameterizedType)method.getGenericReturnType()).getActualTypeArguments()[1]);
          }
        }
      }
 else {
        Field field=(Field)attr.getJavaMember();
        Class<?>[] typeArguments=ReflectionUtils.getResolvedFieldTypeArguments(resolverBaseClass,field);
        if (typeArguments.length != 0) {
          fieldClass=typeArguments[1];
          if (fieldClass == null) {
            fieldClass=resolveType(resolverBaseClass,((ParameterizedType)field.getGenericType()).getActualTypeArguments()[1]);
          }
        }
      }
    }
 else {
      if (attr.getJavaMember() instanceof Method) {
        Method method=(Method)attr.getJavaMember();
        Class<?>[] typeArguments=ReflectionUtils.getResolvedMethodReturnTypeArguments(resolverBaseClass,method);
        if (typeArguments.length != 0) {
          fieldClass=typeArguments[0];
          if (fieldClass == null) {
            fieldClass=resolveType(resolverBaseClass,((ParameterizedType)method.getGenericReturnType()).getActualTypeArguments()[0]);
          }
        }
      }
 else {
        Field field=(Field)attr.getJavaMember();
        Class<?>[] typeArguments=ReflectionUtils.getResolvedFieldTypeArguments(resolverBaseClass,field);
        if (typeArguments.length != 0) {
          fieldClass=typeArguments[0];
          if (fieldClass == null) {
            fieldClass=resolveType(resolverBaseClass,((ParameterizedType)field.getGenericType()).getActualTypeArguments()[0]);
          }
        }
      }
    }
  }
 else {
    jpaReportedFieldClass=attr.getJavaType();
    if (attr.getJavaMember() instanceof Method) {
      Method method=(Method)attr.getJavaMember();
      fieldClass=ReflectionUtils.getResolvedMethodReturnType(resolverBaseClass,method);
      if (fieldClass == null) {
        fieldClass=resolveType(resolverBaseClass,method.getGenericReturnType());
      }
      if (fieldClass.isAssignableFrom(jpaReportedFieldClass)) {
        return jpaReportedFieldClass;
      }
 else       if (jpaReportedFieldClass.isAssignableFrom(fieldClass)) {
        return fieldClass;
      }
 else       if (method.getGenericReturnType() instanceof TypeVariable<?>) {
        return fieldClass;
      }
    }
 else {
      Field field=(Field)attr.getJavaMember();
      fieldClass=ReflectionUtils.getResolvedFieldType(resolverBaseClass,field);
      if (fieldClass == null) {
        fieldClass=resolveType(resolverBaseClass,field.getGenericType());
      }
      if (fieldClass.isAssignableFrom(jpaReportedFieldClass)) {
        return jpaReportedFieldClass;
      }
 else       if (jpaReportedFieldClass.isAssignableFrom(fieldClass)) {
        return fieldClass;
      }
 else       if (field.getGenericType() instanceof TypeVariable<?>) {
        return fieldClass;
      }
    }
  }
  return getConcreterClass(fieldClass,jpaReportedFieldClass);
}","public static Class<?> resolveFieldClass(Class<?> baseClass,Attribute<?,?> attr){
  Class<?> resolverBaseClass=getConcreterClass(baseClass,attr.getDeclaringType().getJavaType());
  Class<?> jpaReportedFieldClass;
  Class<?> fieldClass;
  if (attr.isCollection()) {
    PluralAttribute<?,?,?> collectionAttr=(PluralAttribute<?,?,?>)attr;
    fieldClass=collectionAttr.getElementType().getJavaType();
    jpaReportedFieldClass=fieldClass;
    if (collectionAttr.getCollectionType() == PluralAttribute.CollectionType.MAP) {
      if (attr.getJavaMember() instanceof Method) {
        Method method=(Method)attr.getJavaMember();
        Class<?>[] typeArguments=ReflectionUtils.getResolvedMethodReturnTypeArguments(resolverBaseClass,method);
        if (typeArguments.length != 0) {
          fieldClass=typeArguments[1];
          if (fieldClass == null) {
            fieldClass=resolveType(resolverBaseClass,((ParameterizedType)method.getGenericReturnType()).getActualTypeArguments()[1]);
          }
        }
      }
 else {
        Field field=(Field)attr.getJavaMember();
        Class<?>[] typeArguments=ReflectionUtils.getResolvedFieldTypeArguments(resolverBaseClass,field);
        if (typeArguments.length != 0) {
          fieldClass=typeArguments[1];
          if (fieldClass == null) {
            fieldClass=resolveType(resolverBaseClass,((ParameterizedType)field.getGenericType()).getActualTypeArguments()[1]);
          }
        }
      }
    }
 else {
      if (attr.getJavaMember() instanceof Method) {
        Method method=(Method)attr.getJavaMember();
        Class<?>[] typeArguments=ReflectionUtils.getResolvedMethodReturnTypeArguments(resolverBaseClass,method);
        if (typeArguments.length != 0) {
          fieldClass=typeArguments[0];
          if (fieldClass == null) {
            fieldClass=resolveType(resolverBaseClass,((ParameterizedType)method.getGenericReturnType()).getActualTypeArguments()[0]);
          }
        }
      }
 else {
        Field field=(Field)attr.getJavaMember();
        Class<?>[] typeArguments=ReflectionUtils.getResolvedFieldTypeArguments(resolverBaseClass,field);
        if (typeArguments.length != 0) {
          fieldClass=typeArguments[0];
          if (fieldClass == null) {
            fieldClass=resolveType(resolverBaseClass,((ParameterizedType)field.getGenericType()).getActualTypeArguments()[0]);
          }
        }
      }
    }
  }
 else {
    jpaReportedFieldClass=attr.getJavaType();
    if (attr.getJavaMember() instanceof Method) {
      Method method=(Method)attr.getJavaMember();
      fieldClass=ReflectionUtils.getResolvedMethodReturnType(resolverBaseClass,method);
      if (fieldClass == null) {
        fieldClass=resolveType(resolverBaseClass,method.getGenericReturnType());
      }
      if (fieldClass.isAssignableFrom(jpaReportedFieldClass)) {
        return jpaReportedFieldClass;
      }
 else       if (jpaReportedFieldClass.isAssignableFrom(fieldClass)) {
        return fieldClass;
      }
 else       if (method.getGenericReturnType() instanceof TypeVariable<?>) {
        return fieldClass;
      }
    }
 else {
      Field field=(Field)attr.getJavaMember();
      fieldClass=ReflectionUtils.getResolvedFieldType(resolverBaseClass,field);
      if (fieldClass == null) {
        fieldClass=resolveType(resolverBaseClass,field.getGenericType());
      }
      if (fieldClass.isAssignableFrom(jpaReportedFieldClass)) {
        return jpaReportedFieldClass;
      }
 else       if (jpaReportedFieldClass.isAssignableFrom(fieldClass)) {
        return fieldClass;
      }
 else       if (field.getGenericType() instanceof TypeVariable<?>) {
        return fieldClass;
      }
    }
  }
  if (fieldClass.isAssignableFrom(jpaReportedFieldClass)) {
    return jpaReportedFieldClass;
  }
 else   if (jpaReportedFieldClass.isAssignableFrom(fieldClass)) {
    return fieldClass;
  }
 else {
    return fieldClass;
  }
}",0.9691664489155996
168787,"public void checkAttribute(ManagedType<?> managedType,MetamodelBuildingContext context){
  Class<?> expressionType=getJavaType();
  Class<?> elementType=null;
  if (fetches.length != 0) {
    ManagedType<?> entityType=context.getEntityMetamodel().getManagedType(getElementType().getJavaType());
    if (entityType == null) {
      context.addError(""String_Node_Str"" + Arrays.toString(fetches) + ""String_Node_Str""+ getLocation()+ ""String_Node_Str"");
    }
 else {
      ScalarTargetResolvingExpressionVisitor visitor=new ScalarTargetResolvingExpressionVisitor(entityType,context.getEntityMetamodel(),context.getJpqlFunctions());
      for (int i=0; i < fetches.length; i++) {
        final String fetch=fetches[i];
        final String errorLocation;
        if (fetches.length == 1) {
          errorLocation=""String_Node_Str"";
        }
 else {
          errorLocation=""String_Node_Str"" + (i + 1) + ""String_Node_Str"";
        }
        visitor.clear();
        try {
          context.getExpressionFactory().createPathExpression(fetch).accept(visitor);
        }
 catch (        SyntaxErrorException ex) {
          context.addError(""String_Node_Str"" + errorLocation + ""String_Node_Str""+ fetch+ ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
        }
catch (        IllegalArgumentException ex) {
          context.addError(""String_Node_Str"" + errorLocation + ""String_Node_Str""+ fetch+ ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
        }
      }
    }
  }
  if (isCollection()) {
    elementType=getElementType().getJavaType();
    if (isUpdatable()) {
    }
 else {
      if (isIndexed()) {
        if (getCollectionType() == PluralAttribute.CollectionType.MAP) {
          expressionType=Map.class;
        }
 else {
          expressionType=List.class;
        }
      }
 else {
        expressionType=Collection.class;
      }
    }
  }
  if (isSubview()) {
    ManagedViewTypeImpl<?> subviewType=(ManagedViewTypeImpl<?>)getElementType();
    if (isCollection()) {
      elementType=subviewType.getEntityClass();
    }
 else {
      expressionType=subviewType.getEntityClass();
    }
  }
  if (isCorrelated()) {
    if (isUpdatable()) {
      context.addError(""String_Node_Str"" + getLocation());
    }
    validateTypesCompatible(managedType,stripThisFromMapping(correlationBasis),Object.class,null,true,context,ExpressionLocation.CORRELATION_BASIS,getLocation());
    if (correlated != null) {
      validateTypesCompatible(context.getEntityMetamodel().managedType(correlated),stripThisFromMapping(correlationResult),expressionType,elementType,true,context,ExpressionLocation.CORRELATION_RESULT,getLocation());
      try {
        context.createMacroAwareExpressionFactory().createBooleanExpression(correlationExpression,false);
      }
 catch (      SyntaxErrorException ex) {
        context.addError(""String_Node_Str"" + ExpressionLocation.CORRELATION_EXPRESSION + ""String_Node_Str""+ correlationExpression+ ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
      }
catch (      IllegalArgumentException ex) {
        context.addError(""String_Node_Str"" + ExpressionLocation.CORRELATION_EXPRESSION + ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
      }
    }
  }
 else   if (isSubquery() || isQueryParameter()) {
  }
 else {
    boolean subtypesAllowed=!isUpdatable();
    if (!isCollection() && Collection.class.isAssignableFrom(expressionType)) {
      Class<?>[] typeArguments=getTypeArguments();
      elementType=typeArguments[typeArguments.length - 1];
    }
    String mapping=stripThisFromMapping(this.mapping);
    validateTypesCompatible(managedType,mapping,expressionType,elementType,subtypesAllowed,context,ExpressionLocation.MAPPING,getLocation());
    if (isUpdatable()) {
      UpdatableExpressionVisitor visitor=new UpdatableExpressionVisitor(managedType.getJavaType());
      try {
        context.getExpressionFactory().createPathExpression(mapping).accept(visitor);
        Map<Method,Class<?>[]> possibleTargets=visitor.getPossibleTargets();
        if (possibleTargets.size() > 1) {
          context.addError(""String_Node_Str"" + getLocation() + ""String_Node_Str""+ possibleTargets);
        }
      }
 catch (      SyntaxErrorException ex) {
        context.addError(""String_Node_Str"" + mapping + ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
      }
catch (      IllegalArgumentException ex) {
        context.addError(""String_Node_Str"" + getLocation() + ""String_Node_Str""+ ex.getMessage());
      }
    }
  }
}","public void checkAttribute(ManagedType<?> managedType,MetamodelBuildingContext context){
  Class<?> expressionType=getJavaType();
  Class<?> elementType=null;
  if (fetches.length != 0) {
    ManagedType<?> entityType=context.getEntityMetamodel().getManagedType(getElementType().getJavaType());
    if (entityType == null) {
      context.addError(""String_Node_Str"" + Arrays.toString(fetches) + ""String_Node_Str""+ getLocation()+ ""String_Node_Str"");
    }
 else {
      ScalarTargetResolvingExpressionVisitor visitor=new ScalarTargetResolvingExpressionVisitor(entityType,context.getEntityMetamodel(),context.getJpqlFunctions());
      for (int i=0; i < fetches.length; i++) {
        final String fetch=fetches[i];
        final String errorLocation;
        if (fetches.length == 1) {
          errorLocation=""String_Node_Str"";
        }
 else {
          errorLocation=""String_Node_Str"" + (i + 1) + ""String_Node_Str"";
        }
        visitor.clear();
        try {
          context.getExpressionFactory().createPathExpression(fetch).accept(visitor);
        }
 catch (        SyntaxErrorException ex) {
          context.addError(""String_Node_Str"" + errorLocation + ""String_Node_Str""+ fetch+ ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
        }
catch (        IllegalArgumentException ex) {
          context.addError(""String_Node_Str"" + errorLocation + ""String_Node_Str""+ fetch+ ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
        }
      }
    }
  }
  if (isCollection()) {
    elementType=getElementType().getJavaType();
    if (isUpdatable()) {
    }
 else {
      if (isIndexed()) {
        if (getCollectionType() == PluralAttribute.CollectionType.MAP) {
          expressionType=Map.class;
        }
 else {
          expressionType=List.class;
        }
      }
 else {
        expressionType=Collection.class;
      }
    }
  }
  if (isSubview()) {
    ManagedViewTypeImpl<?> subviewType=(ManagedViewTypeImpl<?>)getElementType();
    if (isCollection()) {
      elementType=subviewType.getEntityClass();
    }
 else {
      expressionType=subviewType.getEntityClass();
    }
  }
  if (isCorrelated()) {
    if (isUpdatable()) {
      context.addError(""String_Node_Str"" + getLocation());
    }
    validateTypesCompatible(managedType,stripThisFromMapping(correlationBasis),Object.class,null,true,context,ExpressionLocation.CORRELATION_BASIS,getLocation());
    if (correlated != null) {
      validateTypesCompatible(context.getEntityMetamodel().managedType(correlated),stripThisFromMapping(correlationResult),expressionType,elementType,true,context,ExpressionLocation.CORRELATION_RESULT,getLocation());
      try {
        context.createMacroAwareExpressionFactory().createBooleanExpression(correlationExpression,false);
      }
 catch (      SyntaxErrorException ex) {
        context.addError(""String_Node_Str"" + ExpressionLocation.CORRELATION_EXPRESSION + ""String_Node_Str""+ correlationExpression+ ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
      }
catch (      IllegalArgumentException ex) {
        context.addError(""String_Node_Str"" + ExpressionLocation.CORRELATION_EXPRESSION + ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
      }
    }
  }
 else   if (isSubquery() || isQueryParameter()) {
  }
 else {
    boolean subtypesAllowed=!isUpdatable();
    if (!isCollection() && Collection.class.isAssignableFrom(expressionType)) {
      Class<?>[] typeArguments=getTypeArguments();
      elementType=typeArguments[typeArguments.length - 1];
    }
    String mapping=stripThisFromMapping(this.mapping);
    validateTypesCompatible(managedType,mapping,expressionType,elementType,subtypesAllowed,context,ExpressionLocation.MAPPING,getLocation());
    if (isUpdatable() && declaringType.isUpdatable()) {
      UpdatableExpressionVisitor visitor=new UpdatableExpressionVisitor(managedType.getJavaType());
      try {
        context.getExpressionFactory().createPathExpression(mapping).accept(visitor);
        Map<Method,Class<?>[]> possibleTargets=visitor.getPossibleTargets();
        if (possibleTargets.size() > 1) {
          context.addError(""String_Node_Str"" + getLocation() + ""String_Node_Str""+ possibleTargets);
        }
      }
 catch (      SyntaxErrorException ex) {
        context.addError(""String_Node_Str"" + mapping + ""String_Node_Str""+ getLocation()+ ""String_Node_Str""+ ex.getMessage());
      }
catch (      IllegalArgumentException ex) {
        context.addError(""String_Node_Str"" + getLocation() + ""String_Node_Str""+ ex.getMessage());
      }
    }
  }
}",0.9966160899465124
168788,"/** 
 * Collects all mappings that involve the use of a collection attribute for duplicate usage checks.
 * @param managedType The JPA type against which to evaluate the mapping
 * @param context The metamodel context
 * @return The mappings which contain collection attribute uses
 */
public Set<String> getCollectionJoinMappings(ManagedType<?> managedType,MetamodelBuildingContext context){
  if (mapping == null || isQueryParameter()) {
    return Collections.emptySet();
  }
  CollectionJoinMappingGathererExpressionVisitor visitor=new CollectionJoinMappingGathererExpressionVisitor(managedType,context.getEntityMetamodel());
  String expression=stripThisFromMapping(mapping);
  if (expression.isEmpty()) {
    return Collections.emptySet();
  }
  context.getExpressionFactory().createSimpleExpression(expression,false).accept(visitor);
  Set<String> mappings=new HashSet<String>();
  for (  String s : visitor.getPaths()) {
    mappings.add(s);
  }
  return mappings;
}","/** 
 * Collects all mappings that involve the use of a collection attribute for duplicate usage checks.
 * @param managedType The JPA type against which to evaluate the mapping
 * @param context The metamodel context
 * @return The mappings which contain collection attribute uses
 */
public Set<String> getCollectionJoinMappings(ManagedType<?> managedType,MetamodelBuildingContext context){
  if (mapping == null || isQueryParameter() || getAttributeType() == AttributeType.SINGULAR) {
    return Collections.emptySet();
  }
  CollectionJoinMappingGathererExpressionVisitor visitor=new CollectionJoinMappingGathererExpressionVisitor(managedType,context.getEntityMetamodel());
  String expression=stripThisFromMapping(mapping);
  if (expression.isEmpty()) {
    return Collections.emptySet();
  }
  context.getExpressionFactory().createSimpleExpression(expression,false).accept(visitor);
  Set<String> mappings=new HashSet<String>();
  for (  String s : visitor.getPaths()) {
    mappings.add(s);
  }
  return mappings;
}",0.9759519038076152
168789,"public static Annotation getMapping(Constructor<?> constructor,int index,MetamodelBuildingContext context){
  Annotation[] annotations=constructor.getParameterAnnotations()[index];
  for (  Annotation a : annotations) {
    if (MappingParameter.class.isInstance(a) || Mapping.class.isInstance(a) || MappingSubquery.class.isInstance(a)|| MappingCorrelated.class.isInstance(a)) {
      return a;
    }
  }
  context.addError(""String_Node_Str"" + ParameterAttributeMapping.getLocation(constructor,index));
  return null;
}","public static Annotation getMapping(Constructor<?> constructor,int index,MetamodelBuildingContext context){
  Annotation[] annotations=constructor.getParameterAnnotations()[index];
  for (  Annotation a : annotations) {
    if (MappingParameter.class.isInstance(a) || Mapping.class.isInstance(a) || MappingSubquery.class.isInstance(a)|| MappingCorrelated.class.isInstance(a)|| MappingCorrelatedSimple.class.isInstance(a)) {
      return a;
    }
  }
  context.addError(""String_Node_Str"" + ParameterAttributeMapping.getLocation(constructor,index));
  return null;
}",0.9574861367837338
168790,"public Class<?> getJavaType(){
  return getType().getJavaType();
}","public Class<?> getJavaType(){
  Type<?> t=getType();
  if (t == null) {
    return null;
  }
  return t.getJavaType();
}",0.6524064171122995
168791,"@Override protected Class<?> resolveKeyType(){
  Class<?> attributeType=ReflectionUtils.getResolvedMethodReturnType(entityViewClass,method);
  Class<?>[] typeArguments=ReflectionUtils.getResolvedMethodReturnTypeArguments(entityViewClass,method);
  if (typeArguments.length == 0 || AnnotationUtils.findAnnotation(method,MappingSingular.class) != null || !Map.class.isAssignableFrom(attributeType)) {
    return null;
  }
  return typeArguments[0];
}","@Override protected Class<?> resolveKeyType(){
  Class<?> attributeType=ReflectionUtils.getResolvedMethodReturnType(entityViewClass,method);
  Class<?>[] typeArguments=ReflectionUtils.getResolvedMethodReturnTypeArguments(entityViewClass,method);
  if (typeArguments.length == 0 || AnnotationUtils.findAnnotation(method,MappingSingular.class) != null || AnnotationUtils.findAnnotation(method,MappingParameter.class) != null || !Map.class.isAssignableFrom(attributeType)) {
    return null;
  }
  return typeArguments[0];
}",0.9246646026831784
168792,"@Override protected Class<?> resolveElementType(){
  Class<?> attributeType=ReflectionUtils.getResolvedMethodReturnType(entityViewClass,method);
  Class<?>[] typeArguments=ReflectionUtils.getResolvedMethodReturnTypeArguments(entityViewClass,method);
  if (typeArguments.length == 0 || AnnotationUtils.findAnnotation(method,MappingSingular.class) != null) {
    return attributeType;
  }
  return typeArguments[typeArguments.length - 1];
}","@Override protected Class<?> resolveElementType(){
  Class<?> attributeType=ReflectionUtils.getResolvedMethodReturnType(entityViewClass,method);
  Class<?>[] typeArguments=ReflectionUtils.getResolvedMethodReturnTypeArguments(entityViewClass,method);
  if (typeArguments.length == 0 || AnnotationUtils.findAnnotation(method,MappingSingular.class) != null || AnnotationUtils.findAnnotation(method,MappingParameter.class) != null) {
    return attributeType;
  }
  return typeArguments[typeArguments.length - 1];
}",0.9230769230769232
168793,"@Override protected Class<?> resolveKeyType(){
  Class<?> concreteClass=constructor.getDeclaringClass();
  Type parameterType=constructor.getGenericParameterTypes()[index];
  Class<?>[] typeArguments=ReflectionUtils.resolveTypeArguments(concreteClass,parameterType);
  if (typeArguments.length == 0 || findAnnotation(MappingSingular.class) != null || !Map.class.isAssignableFrom(resolveType())) {
    return null;
  }
  return typeArguments[0];
}","@Override protected Class<?> resolveKeyType(){
  Class<?> concreteClass=constructor.getDeclaringClass();
  Type parameterType=constructor.getGenericParameterTypes()[index];
  Class<?>[] typeArguments=ReflectionUtils.resolveTypeArguments(concreteClass,parameterType);
  if (typeArguments.length == 0 || findAnnotation(MappingSingular.class) != null || findAnnotation(MappingParameter.class) != null || !Map.class.isAssignableFrom(resolveType())) {
    return null;
  }
  return typeArguments[0];
}",0.9469214437367304
168794,"@Override protected Class<?> resolveElementType(){
  Class<?> concreteClass=constructor.getDeclaringClass();
  Type parameterType=constructor.getGenericParameterTypes()[index];
  Class<?>[] typeArguments=ReflectionUtils.resolveTypeArguments(concreteClass,parameterType);
  if (typeArguments.length == 0 || findAnnotation(MappingSingular.class) != null) {
    return resolveType();
  }
  return typeArguments[typeArguments.length - 1];
}","@Override protected Class<?> resolveElementType(){
  Class<?> concreteClass=constructor.getDeclaringClass();
  Type parameterType=constructor.getGenericParameterTypes()[index];
  Class<?>[] typeArguments=ReflectionUtils.resolveTypeArguments(concreteClass,parameterType);
  if (typeArguments.length == 0 || findAnnotation(MappingSingular.class) != null || findAnnotation(MappingParameter.class) != null) {
    return resolveType();
  }
  return typeArguments[typeArguments.length - 1];
}",0.945770065075922
168795,"private void applyJoins(StringBuilder sb,JoinAliasInfo joinBase,List<JoinNode> stack,boolean isCollection,Set<ClauseType> clauseExclusions,String aliasPrefix,boolean collectCollectionJoinNodes,boolean renderFetches,Set<JoinNode> nodesToFetch){
  while (!stack.isEmpty()) {
    JoinNode node=stack.remove(stack.size() - 1);
    if (!clauseExclusions.isEmpty() && clauseExclusions.containsAll(node.getClauseDependencies()) && !node.isCardinalityMandatory()) {
      continue;
    }
    stack.addAll(node.getEntityJoinNodes());
    stack.addAll(node.getTreatedJoinNodes().values());
    if (!node.getDependencies().isEmpty()) {
      renderReverseDependency(sb,node,aliasPrefix,renderFetches,nodesToFetch);
    }
    if (collectCollectionJoinNodes && isCollection) {
      collectionJoinNodes.add(node);
    }
    renderJoinNode(sb,joinBase,node,aliasPrefix,renderFetches,nodesToFetch);
    if (!node.getNodes().isEmpty()) {
      applyJoins(sb,node.getAliasInfo(),node.getNodes(),clauseExclusions,aliasPrefix,collectCollectionJoinNodes,renderFetches,nodesToFetch);
    }
  }
}","private void applyJoins(StringBuilder sb,JoinAliasInfo joinBase,List<JoinNode> stack,boolean isCollection,Set<ClauseType> clauseExclusions,String aliasPrefix,boolean collectCollectionJoinNodes,boolean renderFetches,Set<JoinNode> nodesToFetch,List<String> whereConjuncts){
  while (!stack.isEmpty()) {
    JoinNode node=stack.remove(stack.size() - 1);
    if (!clauseExclusions.isEmpty() && clauseExclusions.containsAll(node.getClauseDependencies()) && !node.isCardinalityMandatory()) {
      continue;
    }
    stack.addAll(node.getEntityJoinNodes());
    stack.addAll(node.getTreatedJoinNodes().values());
    if (!node.getDependencies().isEmpty()) {
      renderReverseDependency(sb,node,aliasPrefix,renderFetches,nodesToFetch,whereConjuncts);
    }
    if (collectCollectionJoinNodes && isCollection) {
      collectionJoinNodes.add(node);
    }
    renderJoinNode(sb,joinBase,node,aliasPrefix,renderFetches,nodesToFetch,whereConjuncts);
    if (!node.getNodes().isEmpty()) {
      applyJoins(sb,node.getAliasInfo(),node.getNodes(),clauseExclusions,aliasPrefix,collectCollectionJoinNodes,renderFetches,nodesToFetch,whereConjuncts);
    }
  }
}",0.9671319225574064
168796,"private void renderCorrelationJoinPath(StringBuilder sb,JoinAliasInfo joinBase,JoinNode node){
  if (node.getTreatType() != null) {
    if (mainQuery.jpaProvider.supportsTreatCorrelation()) {
      sb.append(""String_Node_Str"");
      renderAlias(sb,joinBase.getJoinNode(),mainQuery.jpaProvider.supportsRootTreat());
      sb.append('.');
      sb.append(node.getCorrelationPath());
      sb.append(""String_Node_Str"");
      sb.append(node.getTreatType().getName());
      sb.append(')');
    }
 else     if (mainQuery.jpaProvider.supportsSubtypeRelationResolving()) {
      sb.append(joinBase.getAlias()).append('.').append(node.getCorrelationPath());
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else {
    JoinNode baseNode=joinBase.getJoinNode();
    if (baseNode.getTreatType() != null) {
      if (mainQuery.jpaProvider.supportsRootTreatJoin()) {
        baseNode.appendAlias(sb,true);
      }
 else       if (mainQuery.jpaProvider.supportsSubtypeRelationResolving()) {
        baseNode.appendAlias(sb,false);
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
 else {
      baseNode.appendAlias(sb,false);
    }
    sb.append('.').append(node.getCorrelationPath());
  }
}","private void renderCorrelationJoinPath(StringBuilder sb,JoinAliasInfo joinBase,JoinNode node){
  if (node.getTreatType() != null) {
    final boolean renderTreat=mainQuery.jpaProvider.supportsTreatJoin() && (!mainQuery.jpaProvider.supportsSubtypeRelationResolving() || node.getJoinType() == JoinType.INNER);
    if (renderTreat) {
      sb.append(""String_Node_Str"");
      renderAlias(sb,joinBase.getJoinNode(),mainQuery.jpaProvider.supportsRootTreat());
      sb.append('.');
      sb.append(node.getCorrelationPath());
      sb.append(""String_Node_Str"");
      sb.append(node.getTreatType().getName());
      sb.append(')');
    }
 else     if (mainQuery.jpaProvider.supportsSubtypeRelationResolving()) {
      sb.append(joinBase.getAlias()).append('.').append(node.getCorrelationPath());
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else {
    JoinNode baseNode=joinBase.getJoinNode();
    if (baseNode.getTreatType() != null) {
      if (mainQuery.jpaProvider.supportsRootTreatJoin()) {
        baseNode.appendAlias(sb,true);
      }
 else       if (mainQuery.jpaProvider.supportsSubtypeRelationResolving()) {
        baseNode.appendAlias(sb,false);
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
 else {
      baseNode.appendAlias(sb,false);
    }
    sb.append('.').append(node.getCorrelationPath());
  }
}",0.9356901090635578
168797,"private void renderJoinNode(StringBuilder sb,JoinAliasInfo joinBase,JoinNode node,String aliasPrefix,boolean renderFetches,Set<JoinNode> nodesToFetch){
  if (!renderedJoins.contains(node)) {
    final boolean fetch=nodesToFetch.contains(node) && renderFetches;
    if (node.isQualifiedJoin() && !fetch) {
      renderedJoins.add(node);
      return;
    }
    if (node.isTreatedJoinNode()) {
      renderedJoins.add(node);
      return;
    }
switch (node.getJoinType()) {
case INNER:
      sb.append(""String_Node_Str"");
    break;
case LEFT:
  sb.append(""String_Node_Str"");
break;
case RIGHT:
sb.append(""String_Node_Str"");
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + node.getJoinType());
}
if (fetch) {
sb.append(""String_Node_Str"");
}
if (aliasPrefix != null) {
sb.append(aliasPrefix);
}
renderJoinPath(sb,joinBase,node);
sb.append(' ');
if (aliasPrefix != null) {
sb.append(aliasPrefix);
}
sb.append(node.getAliasInfo().getAlias());
renderedJoins.add(node);
if (node.getOnPredicate() != null && !node.getOnPredicate().getChildren().isEmpty()) {
sb.append(joinRestrictionKeyword);
sb.append('(');
queryGenerator.setClauseType(ClauseType.JOIN);
queryGenerator.setQueryBuffer(sb);
SimpleQueryGenerator.BooleanLiteralRenderingContext oldBooleanLiteralRenderingContext=queryGenerator.setBooleanLiteralRenderingContext(SimpleQueryGenerator.BooleanLiteralRenderingContext.PREDICATE);
queryGenerator.setRenderedJoinNodes(renderedJoins);
node.getOnPredicate().accept(queryGenerator);
queryGenerator.setRenderedJoinNodes(null);
queryGenerator.setBooleanLiteralRenderingContext(oldBooleanLiteralRenderingContext);
queryGenerator.setClauseType(null);
sb.append(')');
}
}
}","private void renderJoinNode(StringBuilder sb,JoinAliasInfo joinBase,JoinNode node,String aliasPrefix,boolean renderFetches,Set<JoinNode> nodesToFetch,List<String> whereConjuncts){
  if (!renderedJoins.contains(node)) {
    final boolean fetch=nodesToFetch.contains(node) && renderFetches;
    if (node.isQualifiedJoin() && !fetch) {
      renderedJoins.add(node);
      return;
    }
    if (node.isTreatedJoinNode()) {
      renderedJoins.add(node);
      return;
    }
switch (node.getJoinType()) {
case INNER:
      sb.append(""String_Node_Str"");
    break;
case LEFT:
  sb.append(""String_Node_Str"");
break;
case RIGHT:
sb.append(""String_Node_Str"");
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + node.getJoinType());
}
if (fetch) {
sb.append(""String_Node_Str"");
}
if (aliasPrefix != null) {
sb.append(aliasPrefix);
}
String onCondition=renderJoinPath(sb,joinBase,node,whereConjuncts);
sb.append(' ');
if (aliasPrefix != null) {
sb.append(aliasPrefix);
}
sb.append(node.getAliasInfo().getAlias());
renderedJoins.add(node);
if (node.getOnPredicate() != null && !node.getOnPredicate().getChildren().isEmpty()) {
sb.append(joinRestrictionKeyword);
sb.append('(');
if (onCondition != null) {
sb.append(onCondition).append(""String_Node_Str"");
}
queryGenerator.setClauseType(ClauseType.JOIN);
queryGenerator.setQueryBuffer(sb);
SimpleQueryGenerator.BooleanLiteralRenderingContext oldBooleanLiteralRenderingContext=queryGenerator.setBooleanLiteralRenderingContext(SimpleQueryGenerator.BooleanLiteralRenderingContext.PREDICATE);
queryGenerator.setRenderedJoinNodes(renderedJoins);
node.getOnPredicate().accept(queryGenerator);
queryGenerator.setRenderedJoinNodes(null);
queryGenerator.setBooleanLiteralRenderingContext(oldBooleanLiteralRenderingContext);
queryGenerator.setClauseType(null);
sb.append(')');
}
 else if (onCondition != null) {
sb.append(joinRestrictionKeyword);
sb.append('(');
sb.append(onCondition);
sb.append(')');
}
}
}",0.926789141760351
168798,"private void renderReverseDependency(StringBuilder sb,JoinNode dependency,String aliasPrefix,boolean renderFetches,Set<JoinNode> nodesToFetch){
  if (dependency.getParent() != null) {
    renderReverseDependency(sb,dependency.getParent(),aliasPrefix,renderFetches,nodesToFetch);
    if (!dependency.getDependencies().isEmpty()) {
      markedJoinNodes.add(dependency);
      try {
        for (        JoinNode dep : dependency.getDependencies()) {
          if (markedJoinNodes.contains(dep)) {
            throw new IllegalStateException(""String_Node_Str"" + dep.getAliasInfo().getAbsolutePath() + ""String_Node_Str""+ dep.getAliasInfo().getAlias()+ ""String_Node_Str"");
          }
          renderReverseDependency(sb,dep,aliasPrefix,renderFetches,nodesToFetch);
        }
      }
  finally {
        markedJoinNodes.remove(dependency);
      }
    }
    renderJoinNode(sb,dependency.getParent().getAliasInfo(),dependency,aliasPrefix,renderFetches,nodesToFetch);
  }
}","private void renderReverseDependency(StringBuilder sb,JoinNode dependency,String aliasPrefix,boolean renderFetches,Set<JoinNode> nodesToFetch,List<String> whereConjuncts){
  if (dependency.getParent() != null) {
    renderReverseDependency(sb,dependency.getParent(),aliasPrefix,renderFetches,nodesToFetch,whereConjuncts);
    if (!dependency.getDependencies().isEmpty()) {
      markedJoinNodes.add(dependency);
      try {
        for (        JoinNode dep : dependency.getDependencies()) {
          if (markedJoinNodes.contains(dep)) {
            throw new IllegalStateException(""String_Node_Str"" + dep.getAliasInfo().getAbsolutePath() + ""String_Node_Str""+ dep.getAliasInfo().getAlias()+ ""String_Node_Str"");
          }
          renderReverseDependency(sb,dep,aliasPrefix,renderFetches,nodesToFetch,whereConjuncts);
        }
      }
  finally {
        markedJoinNodes.remove(dependency);
      }
    }
    renderJoinNode(sb,dependency.getParent().getAliasInfo(),dependency,aliasPrefix,renderFetches,nodesToFetch,whereConjuncts);
  }
}",0.9636635141861624
168799,"Set<JoinNode> buildClause(StringBuilder sb,Set<ClauseType> clauseExclusions,String aliasPrefix,boolean collectCollectionJoinNodes,boolean externalRepresenation,List<String> whereConjuncts,Map<Class<?>,Map<String,DbmsModificationState>> explicitVersionEntities,Set<JoinNode> nodesToFetch){
  final boolean renderFetches=!clauseExclusions.contains(ClauseType.SELECT);
  StringBuilder tempSb=null;
  collectionJoinNodes.clear();
  renderedJoins.clear();
  sb.append(""String_Node_Str"");
  List<JoinNode> nodes=rootNodes;
  int size=nodes.size();
  for (int i=0; i < size; i++) {
    if (i != 0) {
      sb.append(""String_Node_Str"");
    }
    JoinNode rootNode=nodes.get(i);
    JoinNode correlationParent=rootNode.getCorrelationParent();
    if (externalRepresenation && rootNode.getValueCount() > 0) {
      ManagedType<?> type=rootNode.getManagedType();
      final int attributeCount=rootNode.getAttributeCount();
      if (type.getJavaType() != ValuesEntity.class) {
        if (type instanceof EntityType<?>) {
          sb.append(((EntityType)type).getName());
        }
 else {
          sb.append(type.getJavaType().getSimpleName());
        }
      }
      sb.append(""String_Node_Str"");
      for (int valueNumber=0; valueNumber < rootNode.getValueCount(); valueNumber++) {
        sb.append(""String_Node_Str"");
        for (int j=0; j < attributeCount; j++) {
          sb.append(""String_Node_Str"");
        }
        sb.setCharAt(sb.length() - 1,')');
        sb.append(',');
      }
      sb.setCharAt(sb.length() - 1,')');
    }
 else     if (externalRepresenation && explicitVersionEntities.get(rootNode.getType()) != null) {
      DbmsModificationState state=explicitVersionEntities.get(rootNode.getType()).get(rootNode.getAlias());
      EntityType<?> type=rootNode.getEntityType();
      if (state == DbmsModificationState.NEW) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
      }
      sb.append(type.getName());
      sb.append(')');
    }
 else {
      if (correlationParent != null) {
        renderCorrelationJoinPath(sb,correlationParent.getAliasInfo(),rootNode);
      }
 else {
        EntityType<?> type=rootNode.getEntityType();
        sb.append(type.getName());
      }
    }
    sb.append(' ');
    if (aliasPrefix != null) {
      sb.append(aliasPrefix);
    }
    sb.append(rootNode.getAliasInfo().getAlias());
    renderedJoins.add(rootNode);
    rootNode.registerDependencies();
    applyJoins(sb,rootNode.getAliasInfo(),rootNode.getNodes(),clauseExclusions,aliasPrefix,collectCollectionJoinNodes,renderFetches,nodesToFetch);
    for (    JoinNode treatedNode : rootNode.getTreatedJoinNodes().values()) {
      applyJoins(sb,treatedNode.getAliasInfo(),treatedNode.getNodes(),clauseExclusions,aliasPrefix,collectCollectionJoinNodes,renderFetches,nodesToFetch);
    }
    if (!rootNode.getEntityJoinNodes().isEmpty()) {
      boolean isCollection=true;
      if (mainQuery.jpaProvider.supportsEntityJoin()) {
        applyJoins(sb,rootNode.getAliasInfo(),new ArrayList<JoinNode>(rootNode.getEntityJoinNodes()),isCollection,clauseExclusions,aliasPrefix,collectCollectionJoinNodes,renderFetches,nodesToFetch);
      }
 else {
        Set<JoinNode> entityNodes=rootNode.getEntityJoinNodes();
        for (        JoinNode entityNode : entityNodes) {
          if (collectCollectionJoinNodes && isCollection) {
            collectionJoinNodes.add(entityNode);
          }
          sb.append(""String_Node_Str"");
          EntityType<?> type=entityNode.getEntityType();
          sb.append(type.getName());
          sb.append(' ');
          if (aliasPrefix != null) {
            sb.append(aliasPrefix);
          }
          sb.append(entityNode.getAliasInfo().getAlias());
          entityNode.registerDependencies();
          if (entityNode.getOnPredicate() != null && !entityNode.getOnPredicate().getChildren().isEmpty()) {
            if (tempSb == null) {
              tempSb=new StringBuilder();
            }
 else {
              tempSb.setLength(0);
            }
            queryGenerator.setClauseType(ClauseType.JOIN);
            queryGenerator.setQueryBuffer(tempSb);
            SimpleQueryGenerator.BooleanLiteralRenderingContext oldBooleanLiteralRenderingContext=queryGenerator.setBooleanLiteralRenderingContext(SimpleQueryGenerator.BooleanLiteralRenderingContext.PREDICATE);
            entityNode.getOnPredicate().accept(queryGenerator);
            queryGenerator.setBooleanLiteralRenderingContext(oldBooleanLiteralRenderingContext);
            queryGenerator.setClauseType(null);
            whereConjuncts.add(tempSb.toString());
          }
          renderedJoins.add(entityNode);
          applyJoins(sb,entityNode.getAliasInfo(),entityNode.getNodes(),clauseExclusions,aliasPrefix,collectCollectionJoinNodes,renderFetches,nodesToFetch);
          for (          JoinNode treatedNode : entityNode.getTreatedJoinNodes().values()) {
            applyJoins(sb,treatedNode.getAliasInfo(),treatedNode.getNodes(),clauseExclusions,aliasPrefix,collectCollectionJoinNodes,renderFetches,nodesToFetch);
          }
        }
      }
    }
  }
  return collectionJoinNodes;
}","Set<JoinNode> buildClause(StringBuilder sb,Set<ClauseType> clauseExclusions,String aliasPrefix,boolean collectCollectionJoinNodes,boolean externalRepresenation,List<String> whereConjuncts,Map<Class<?>,Map<String,DbmsModificationState>> explicitVersionEntities,Set<JoinNode> nodesToFetch){
  final boolean renderFetches=!clauseExclusions.contains(ClauseType.SELECT);
  StringBuilder tempSb=null;
  collectionJoinNodes.clear();
  renderedJoins.clear();
  sb.append(""String_Node_Str"");
  List<JoinNode> nodes=rootNodes;
  int size=nodes.size();
  for (int i=0; i < size; i++) {
    if (i != 0) {
      sb.append(""String_Node_Str"");
    }
    JoinNode rootNode=nodes.get(i);
    JoinNode correlationParent=rootNode.getCorrelationParent();
    if (externalRepresenation && rootNode.getValueCount() > 0) {
      ManagedType<?> type=rootNode.getManagedType();
      final int attributeCount=rootNode.getAttributeCount();
      if (type.getJavaType() != ValuesEntity.class) {
        if (type instanceof EntityType<?>) {
          sb.append(((EntityType)type).getName());
        }
 else {
          sb.append(type.getJavaType().getSimpleName());
        }
      }
      sb.append(""String_Node_Str"");
      for (int valueNumber=0; valueNumber < rootNode.getValueCount(); valueNumber++) {
        sb.append(""String_Node_Str"");
        for (int j=0; j < attributeCount; j++) {
          sb.append(""String_Node_Str"");
        }
        sb.setCharAt(sb.length() - 1,')');
        sb.append(',');
      }
      sb.setCharAt(sb.length() - 1,')');
    }
 else     if (externalRepresenation && explicitVersionEntities.get(rootNode.getType()) != null) {
      DbmsModificationState state=explicitVersionEntities.get(rootNode.getType()).get(rootNode.getAlias());
      EntityType<?> type=rootNode.getEntityType();
      if (state == DbmsModificationState.NEW) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
      }
      sb.append(type.getName());
      sb.append(')');
    }
 else {
      if (correlationParent != null) {
        renderCorrelationJoinPath(sb,correlationParent.getAliasInfo(),rootNode);
      }
 else {
        EntityType<?> type=rootNode.getEntityType();
        sb.append(type.getName());
      }
    }
    sb.append(' ');
    if (aliasPrefix != null) {
      sb.append(aliasPrefix);
    }
    sb.append(rootNode.getAliasInfo().getAlias());
    renderedJoins.add(rootNode);
    rootNode.registerDependencies();
    applyJoins(sb,rootNode.getAliasInfo(),rootNode.getNodes(),clauseExclusions,aliasPrefix,collectCollectionJoinNodes,renderFetches,nodesToFetch,whereConjuncts);
    for (    JoinNode treatedNode : rootNode.getTreatedJoinNodes().values()) {
      applyJoins(sb,treatedNode.getAliasInfo(),treatedNode.getNodes(),clauseExclusions,aliasPrefix,collectCollectionJoinNodes,renderFetches,nodesToFetch,whereConjuncts);
    }
    if (!rootNode.getEntityJoinNodes().isEmpty()) {
      boolean isCollection=true;
      if (mainQuery.jpaProvider.supportsEntityJoin()) {
        applyJoins(sb,rootNode.getAliasInfo(),new ArrayList<JoinNode>(rootNode.getEntityJoinNodes()),isCollection,clauseExclusions,aliasPrefix,collectCollectionJoinNodes,renderFetches,nodesToFetch,whereConjuncts);
      }
 else {
        Set<JoinNode> entityNodes=rootNode.getEntityJoinNodes();
        for (        JoinNode entityNode : entityNodes) {
          if (collectCollectionJoinNodes && isCollection) {
            collectionJoinNodes.add(entityNode);
          }
          sb.append(""String_Node_Str"");
          EntityType<?> type=entityNode.getEntityType();
          sb.append(type.getName());
          sb.append(' ');
          if (aliasPrefix != null) {
            sb.append(aliasPrefix);
          }
          sb.append(entityNode.getAliasInfo().getAlias());
          entityNode.registerDependencies();
          if (entityNode.getOnPredicate() != null && !entityNode.getOnPredicate().getChildren().isEmpty()) {
            if (tempSb == null) {
              tempSb=new StringBuilder();
            }
 else {
              tempSb.setLength(0);
            }
            queryGenerator.setClauseType(ClauseType.JOIN);
            queryGenerator.setQueryBuffer(tempSb);
            SimpleQueryGenerator.BooleanLiteralRenderingContext oldBooleanLiteralRenderingContext=queryGenerator.setBooleanLiteralRenderingContext(SimpleQueryGenerator.BooleanLiteralRenderingContext.PREDICATE);
            entityNode.getOnPredicate().accept(queryGenerator);
            queryGenerator.setBooleanLiteralRenderingContext(oldBooleanLiteralRenderingContext);
            queryGenerator.setClauseType(null);
            whereConjuncts.add(tempSb.toString());
          }
          renderedJoins.add(entityNode);
          applyJoins(sb,entityNode.getAliasInfo(),entityNode.getNodes(),clauseExclusions,aliasPrefix,collectCollectionJoinNodes,renderFetches,nodesToFetch,whereConjuncts);
          for (          JoinNode treatedNode : entityNode.getTreatedJoinNodes().values()) {
            applyJoins(sb,treatedNode.getAliasInfo(),treatedNode.getNodes(),clauseExclusions,aliasPrefix,collectCollectionJoinNodes,renderFetches,nodesToFetch,whereConjuncts);
          }
        }
      }
    }
  }
  return collectionJoinNodes;
}",0.992794696896916
168800,"private void renderJoinPath(StringBuilder sb,JoinAliasInfo joinBase,JoinNode node){
  if (node.getTreatType() != null) {
    if (mainQuery.jpaProvider.supportsTreatJoin()) {
      sb.append(""String_Node_Str"");
      renderAlias(sb,joinBase.getJoinNode(),mainQuery.jpaProvider.supportsRootTreatTreatJoin());
      sb.append('.');
      sb.append(node.getParentTreeNode().getRelationName());
      sb.append(""String_Node_Str"");
      sb.append(node.getTreatType().getName());
      sb.append(')');
    }
 else     if (mainQuery.jpaProvider.supportsSubtypeRelationResolving()) {
      sb.append(joinBase.getAlias()).append('.').append(node.getParentTreeNode().getRelationName());
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else   if (node.getCorrelationPath() == null && node.getAliasInfo().isRootNode()) {
    sb.append(node.getEntityType().getName());
  }
 else   if (node.isQualifiedJoin()) {
    sb.append(node.getQualificationExpression());
    sb.append('(');
    sb.append(joinBase.getJoinNode().getAlias());
    sb.append(')');
  }
 else {
    renderAlias(sb,joinBase.getJoinNode(),mainQuery.jpaProvider.supportsRootTreatJoin());
    sb.append('.').append(node.getParentTreeNode().getRelationName());
  }
}","private String renderJoinPath(StringBuilder sb,JoinAliasInfo joinBase,JoinNode node,List<String> whereConjuncts){
  if (node.getTreatType() != null) {
    final boolean renderTreat=mainQuery.jpaProvider.supportsTreatJoin() && (!mainQuery.jpaProvider.supportsSubtypeRelationResolving() || node.getJoinType() == JoinType.INNER);
    final String onCondition;
    final JoinNode baseNode=joinBase.getJoinNode();
    final String treatType=node.getTreatType().getName();
    final String relationName=node.getParentTreeNode().getRelationName();
    JpaProvider.ConstraintType constraintType=mainQuery.jpaProvider.requiresTreatFilter(baseNode.getManagedType(),relationName,node.getJoinType());
    if (constraintType != JpaProvider.ConstraintType.NONE) {
      String constraint=""String_Node_Str"" + node.getAlias() + ""String_Node_Str""+ treatType;
      if (constraintType == JpaProvider.ConstraintType.WHERE) {
        whereConjuncts.add(constraint);
        onCondition=null;
      }
 else {
        onCondition=constraint;
      }
    }
 else {
      onCondition=null;
    }
    if (renderTreat) {
      sb.append(""String_Node_Str"");
      renderAlias(sb,baseNode,mainQuery.jpaProvider.supportsRootTreatTreatJoin());
      sb.append('.');
      sb.append(relationName);
      sb.append(""String_Node_Str"");
      sb.append(treatType);
      sb.append(')');
    }
 else     if (mainQuery.jpaProvider.supportsSubtypeRelationResolving()) {
      sb.append(joinBase.getAlias()).append('.').append(node.getParentTreeNode().getRelationName());
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    return onCondition;
  }
 else   if (node.getCorrelationPath() == null && node.getAliasInfo().isRootNode()) {
    sb.append(node.getEntityType().getName());
  }
 else   if (node.isQualifiedJoin()) {
    sb.append(node.getQualificationExpression());
    sb.append('(');
    sb.append(joinBase.getJoinNode().getAlias());
    sb.append(')');
  }
 else {
    renderAlias(sb,joinBase.getJoinNode(),mainQuery.jpaProvider.supportsRootTreatJoin());
    sb.append('.').append(node.getParentTreeNode().getRelationName());
  }
  return null;
}",0.2097532314923619
168801,"/** 
 * Creates a new   {@link JpaCountQueryCreator}.
 * @param tree
 * @param domainClass
 * @param parameters
 * @param em
 */
public FixedJpaCountQueryCreator(PartTree tree,Class<?> domainClass,CriteriaBuilder builder,ParameterMetadataProvider provider){
  super(tree,domainClass,builder,provider);
}","public FixedJpaCountQueryCreator(PartTree tree,Class<?> domainClass,CriteriaBuilder builder,ParameterMetadataProvider provider){
  super(tree,domainClass,builder,provider);
}",0.7295597484276729
168802,"/** 
 * Creates a   {@link Predicate} from the given {@link Part}.
 * @param part
 * @param root
 * @param iterator
 * @return
 */
private Predicate toPredicate(Part part,Root<?> root){
  return new FixedJpaQueryCreator.PredicateBuilder(part,root).build();
}","/** 
 * Creates a   {@link Predicate} from the given {@link Part}.
 * @param part
 * @param root
 * @return
 */
private Predicate toPredicate(Part part,Root<?> root){
  return new FixedJpaQueryCreator.PredicateBuilder(part,root).build();
}",0.9617706237424548
168803,"@Override protected void buildExternalQueryString(StringBuilder sbSelectFrom){
  buildBaseQueryString(sbSelectFrom,true);
  applyJpaLimit(sbSelectFrom);
}","@Override protected void buildExternalQueryString(StringBuilder sbSelectFrom){
  buildBaseQueryString(sbSelectFrom,true);
}",0.8880866425992779
168804,"protected void buildBaseQueryString(StringBuilder sbSelectFrom,boolean externalRepresentation){
  appendSelectClause(sbSelectFrom);
  List<String> whereClauseConjuncts=appendFromClause(sbSelectFrom,externalRepresentation);
  appendWhereClause(sbSelectFrom,whereClauseConjuncts);
  appendGroupByClause(sbSelectFrom);
  appendOrderByClause(sbSelectFrom);
}","protected void buildBaseQueryString(StringBuilder sbSelectFrom,boolean externalRepresentation){
  appendSelectClause(sbSelectFrom);
  List<String> whereClauseConjuncts=appendFromClause(sbSelectFrom,externalRepresentation);
  appendWhereClause(sbSelectFrom,whereClauseConjuncts);
  appendGroupByClause(sbSelectFrom);
  appendOrderByClause(sbSelectFrom);
  if (externalRepresentation) {
    if (!(this instanceof SubqueryInternalBuilder<?>)) {
      applyJpaLimit(sbSelectFrom);
    }
  }
}",0.8408551068883611
168805,"@Override @SuppressWarnings(""String_Node_Str"") protected TypedQuery<T> getTypedQuery(){
  Set<String> parameterListNames=new HashSet<String>();
  TypedQuery<T> leftMostQuery=(TypedQuery<T>)setOperationManager.getStartQueryBuilder().getTypedQueryForFinalOperationBuilder();
  TypedQuery<T> baseQuery;
  parameterManager.collectParameterListNames(leftMostQuery,parameterListNames);
  if (leftMostQuery instanceof CustomSQLQuery) {
    CustomSQLQuery customQuery=(CustomSQLQuery)leftMostQuery;
    List<Query> customQueryParticipants=customQuery.getParticipatingQueries();
    baseQuery=(TypedQuery<T>)customQueryParticipants.get(0);
  }
 else   if (leftMostQuery instanceof CustomSQLTypedQuery<?>) {
    CustomSQLTypedQuery<?> customQuery=(CustomSQLTypedQuery<?>)leftMostQuery;
    List<Query> customQueryParticipants=customQuery.getParticipatingQueries();
    baseQuery=(TypedQuery<T>)customQueryParticipants.get(0);
  }
 else {
    baseQuery=leftMostQuery;
  }
  List<Query> setOperands=new ArrayList<Query>();
  for (  AbstractCommonQueryBuilder<?,?,?,?,?> setOperand : setOperationManager.getSetOperations()) {
    Query q=setOperand.getQuery();
    setOperands.add(q);
    parameterManager.collectParameterListNames(q,parameterListNames);
  }
  String limit=null;
  String offset=null;
  if (firstResult != 0) {
    offset=Integer.toString(firstResult);
  }
  if (maxResults != Integer.MAX_VALUE) {
    limit=Integer.toString(maxResults);
  }
  Set<JoinNode> keyRestrictedLeftJoins=joinManager.getKeyRestrictedLeftJoins();
  List<String> keyRestrictedLeftJoinAliases=getKeyRestrictedLeftJoinAliases(baseQuery,keyRestrictedLeftJoins,Collections.EMPTY_SET);
  List<EntityFunctionNode> entityFunctionNodes=getEntityFunctionNodes(baseQuery);
  boolean shouldRenderCteNodes=renderCteNodes(false);
  List<CTENode> ctes=shouldRenderCteNodes ? getCteNodes(baseQuery,false) : Collections.EMPTY_LIST;
  QuerySpecification querySpecification=new SetOperationQuerySpecification(this,leftMostQuery,baseQuery,setOperands,setOperationManager.getOperator(),getOrderByElements(),setOperationManager.isNested(),parameterListNames,limit,offset,keyRestrictedLeftJoinAliases,entityFunctionNodes,mainQuery.cteManager.isRecursive(),ctes,shouldRenderCteNodes);
  @SuppressWarnings(""String_Node_Str"") TypedQuery<T> query=new CustomSQLTypedQuery<T>(querySpecification,baseQuery,new CommonQueryBuilderAdapter(this),cbf.getExtendedQuerySupport(),parameterManager.getValuesParameters(),parameterManager.getValuesBinders());
  if (selectManager.getSelectObjectBuilder() != null) {
    query=transformQuery(query);
  }
  return query;
}","@Override @SuppressWarnings(""String_Node_Str"") protected TypedQuery<T> getTypedQuery(){
  Set<String> parameterListNames=new HashSet<String>();
  TypedQuery<T> leftMostQuery=(TypedQuery<T>)setOperationManager.getStartQueryBuilder().getTypedQueryForFinalOperationBuilder();
  TypedQuery<T> baseQuery;
  parameterManager.collectParameterListNames(leftMostQuery,parameterListNames);
  if (leftMostQuery instanceof CustomSQLQuery) {
    CustomSQLQuery customQuery=(CustomSQLQuery)leftMostQuery;
    List<Query> customQueryParticipants=customQuery.getParticipatingQueries();
    baseQuery=(TypedQuery<T>)customQueryParticipants.get(0);
  }
 else   if (leftMostQuery instanceof CustomSQLTypedQuery<?>) {
    CustomSQLTypedQuery<?> customQuery=(CustomSQLTypedQuery<?>)leftMostQuery;
    List<Query> customQueryParticipants=customQuery.getParticipatingQueries();
    baseQuery=(TypedQuery<T>)customQueryParticipants.get(0);
  }
 else {
    baseQuery=leftMostQuery;
  }
  List<Query> setOperands=new ArrayList<Query>();
  for (  AbstractCommonQueryBuilder<?,?,?,?,?> setOperand : setOperationManager.getSetOperations()) {
    Query q=setOperand.getQuery();
    setOperands.add(q);
    parameterManager.collectParameterListNames(q,parameterListNames);
  }
  String limit=null;
  String offset=null;
  if (!isMainQuery) {
    if (firstResult != 0) {
      offset=Integer.toString(firstResult);
    }
    if (maxResults != Integer.MAX_VALUE) {
      limit=Integer.toString(maxResults);
    }
  }
  Set<JoinNode> keyRestrictedLeftJoins=joinManager.getKeyRestrictedLeftJoins();
  List<String> keyRestrictedLeftJoinAliases=getKeyRestrictedLeftJoinAliases(baseQuery,keyRestrictedLeftJoins,Collections.EMPTY_SET);
  List<EntityFunctionNode> entityFunctionNodes=getEntityFunctionNodes(baseQuery);
  boolean shouldRenderCteNodes=renderCteNodes(false);
  List<CTENode> ctes=shouldRenderCteNodes ? getCteNodes(baseQuery,false) : Collections.EMPTY_LIST;
  QuerySpecification querySpecification=new SetOperationQuerySpecification(this,leftMostQuery,baseQuery,setOperands,setOperationManager.getOperator(),getOrderByElements(),setOperationManager.isNested(),parameterListNames,limit,offset,keyRestrictedLeftJoinAliases,entityFunctionNodes,mainQuery.cteManager.isRecursive(),ctes,shouldRenderCteNodes);
  @SuppressWarnings(""String_Node_Str"") TypedQuery<T> query=new CustomSQLTypedQuery<T>(querySpecification,baseQuery,new CommonQueryBuilderAdapter(this),cbf.getExtendedQuerySupport(),parameterManager.getValuesParameters(),parameterManager.getValuesBinders());
  if (isMainQuery) {
    if (firstResult != 0) {
      query.setFirstResult(firstResult);
    }
    if (maxResults != Integer.MAX_VALUE) {
      query.setMaxResults(maxResults);
    }
  }
  if (selectManager.getSelectObjectBuilder() != null) {
    query=transformQuery(query);
  }
  return query;
}",0.9584711503123852
168806,"protected Expression asExpression(AbstractCommonQueryBuilder<?,?,?,?,?> queryBuilder){
  if (queryBuilder instanceof BaseFinalSetOperationBuilderImpl<?,?,?>) {
    BaseFinalSetOperationBuilderImpl<?,?,?> operationBuilder=(BaseFinalSetOperationBuilderImpl<?,?,?>)queryBuilder;
    SetOperationManager operationManager=operationBuilder.setOperationManager;
    if (operationManager.getOperator() == null || !operationManager.hasSetOperations()) {
      return asExpression(operationManager.getStartQueryBuilder());
    }
    List<Expression> setOperationArgs=new ArrayList<Expression>(operationManager.getSetOperations().size() + 2);
    StringBuilder nameSb=new StringBuilder();
    nameSb.append(""String_Node_Str"");
    nameSb.append(operationManager.getOperator().name());
    setOperationArgs.add(new StringLiteral(nameSb.toString()));
    setOperationArgs.add(asExpression(operationManager.getStartQueryBuilder()));
    List<AbstractCommonQueryBuilder<?,?,?,?,?>> setOperands=operationManager.getSetOperations();
    int operandsSize=setOperands.size();
    for (int i=0; i < operandsSize; i++) {
      setOperationArgs.add(asExpression(setOperands.get(i)));
    }
    List<? extends OrderByElement> orderByElements=operationBuilder.getOrderByElements();
    if (orderByElements.size() > 0) {
      setOperationArgs.add(new StringLiteral(""String_Node_Str""));
      int orderByElementsSize=orderByElements.size();
      for (int i=0; i < orderByElementsSize; i++) {
        StringBuilder argSb=new StringBuilder(20);
        argSb.append(orderByElements.get(i).toString());
        setOperationArgs.add(new StringLiteral(argSb.toString()));
      }
    }
    if (operationBuilder.hasLimit()) {
      if (operationBuilder.maxResults != Integer.MAX_VALUE) {
        setOperationArgs.add(new StringLiteral(""String_Node_Str""));
        setOperationArgs.add(new NumericLiteral(Integer.toString(operationBuilder.maxResults),NumericType.INTEGER));
      }
      if (operationBuilder.firstResult != 0) {
        setOperationArgs.add(new StringLiteral(""String_Node_Str""));
        setOperationArgs.add(new NumericLiteral(Integer.toString(operationBuilder.firstResult),NumericType.INTEGER));
      }
    }
    Expression functionExpr=new FunctionExpression(""String_Node_Str"",setOperationArgs);
    return functionExpr;
  }
  String queryString=queryBuilder.getQueryString();
  final StringBuilder subquerySb=new StringBuilder(queryString.length() + 2);
  subquerySb.append(queryString);
  return new SubqueryExpression(new Subquery(){
    @Override public String getQueryString(){
      return subquerySb.toString();
    }
  }
);
}","protected Expression asExpression(AbstractCommonQueryBuilder<?,?,?,?,?> queryBuilder){
  if (queryBuilder instanceof BaseFinalSetOperationBuilderImpl<?,?,?>) {
    BaseFinalSetOperationBuilderImpl<?,?,?> operationBuilder=(BaseFinalSetOperationBuilderImpl<?,?,?>)queryBuilder;
    SetOperationManager operationManager=operationBuilder.setOperationManager;
    if (operationManager.getOperator() == null || !operationManager.hasSetOperations()) {
      return asExpression(operationManager.getStartQueryBuilder());
    }
    List<Expression> setOperationArgs=new ArrayList<Expression>(operationManager.getSetOperations().size() + 2);
    StringBuilder nameSb=new StringBuilder();
    nameSb.append(""String_Node_Str"");
    nameSb.append(operationManager.getOperator().name());
    setOperationArgs.add(new StringLiteral(nameSb.toString()));
    setOperationArgs.add(asExpression(operationManager.getStartQueryBuilder()));
    List<AbstractCommonQueryBuilder<?,?,?,?,?>> setOperands=operationManager.getSetOperations();
    int operandsSize=setOperands.size();
    for (int i=0; i < operandsSize; i++) {
      setOperationArgs.add(asExpression(setOperands.get(i)));
    }
    List<? extends OrderByElement> orderByElements=operationBuilder.getOrderByElements();
    if (orderByElements.size() > 0) {
      setOperationArgs.add(new StringLiteral(""String_Node_Str""));
      int orderByElementsSize=orderByElements.size();
      for (int i=0; i < orderByElementsSize; i++) {
        StringBuilder argSb=new StringBuilder(20);
        argSb.append(orderByElements.get(i).toString());
        setOperationArgs.add(new StringLiteral(argSb.toString()));
      }
    }
    if (operationBuilder.hasLimit()) {
      if (operationBuilder.maxResults != Integer.MAX_VALUE) {
        setOperationArgs.add(new StringLiteral(""String_Node_Str""));
        setOperationArgs.add(new NumericLiteral(Integer.toString(operationBuilder.maxResults),NumericType.INTEGER));
      }
      if (operationBuilder.firstResult != 0) {
        setOperationArgs.add(new StringLiteral(""String_Node_Str""));
        setOperationArgs.add(new NumericLiteral(Integer.toString(operationBuilder.firstResult),NumericType.INTEGER));
      }
    }
    Expression functionExpr=new FunctionExpression(""String_Node_Str"",setOperationArgs);
    return functionExpr;
  }
  String queryString=queryBuilder.getQueryString();
  final StringBuilder subquerySb=new StringBuilder(queryString.length() + 2);
  subquerySb.append(queryString);
  Expression expression=new SubqueryExpression(new Subquery(){
    @Override public String getQueryString(){
      return subquerySb.toString();
    }
  }
);
  if (queryBuilder.hasLimit()) {
    final boolean hasFirstResult=queryBuilder.getFirstResult() != 0;
    final boolean hasMaxResults=queryBuilder.getMaxResults() != Integer.MAX_VALUE;
    List<Expression> arguments=new ArrayList<Expression>(2);
    arguments.add(new StringLiteral(""String_Node_Str""));
    arguments.add(expression);
    if (!hasMaxResults) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
 else {
      arguments.add(new NumericLiteral(Integer.toString(queryBuilder.getMaxResults()),NumericType.INTEGER));
    }
    if (hasFirstResult) {
      arguments.add(new NumericLiteral(Integer.toString(queryBuilder.getFirstResult()),NumericType.INTEGER));
    }
    expression=new FunctionExpression(""String_Node_Str"",arguments);
  }
  return expression;
}",0.8653655309295402
168807,"protected Map<String,String> applyExtendedSql(StringBuilder sqlSb,boolean isSubquery,boolean isEmbedded,StringBuilder withClause,String[] returningColumns,Map<DbmsModificationState,String> includedModificationStates){
  return dbmsDialect.appendExtendedSql(sqlSb,statementType,isSubquery,isEmbedded,withClause,null,null,returningColumns,includedModificationStates);
}","protected Map<String,String> applyExtendedSql(StringBuilder sqlSb,boolean isSubquery,boolean isEmbedded,StringBuilder withClause,String[] returningColumns,Map<DbmsModificationState,String> includedModificationStates){
  return dbmsDialect.appendExtendedSql(sqlSb,statementType,isSubquery,isEmbedded,withClause,limit,offset,returningColumns,includedModificationStates);
}",0.971506105834464
168808,"@Override protected void initialize(){
  String sqlQuery;
  List<Query> participatingQueries=new ArrayList<Query>();
  List<Query> cteQueries=new ArrayList<Query>();
  if (leftMostQuery instanceof CustomSQLQuery) {
    CustomSQLQuery customQuery=(CustomSQLQuery)leftMostQuery;
    List<Query> customQueryParticipants=customQuery.getParticipatingQueries();
    participatingQueries.addAll(customQueryParticipants);
    sqlQuery=customQuery.getSql();
  }
 else   if (leftMostQuery instanceof CustomSQLTypedQuery<?>) {
    CustomSQLTypedQuery<?> customQuery=(CustomSQLTypedQuery<?>)leftMostQuery;
    List<Query> customQueryParticipants=customQuery.getParticipatingQueries();
    participatingQueries.addAll(customQueryParticipants);
    sqlQuery=customQuery.getSql();
  }
 else {
    participatingQueries.add(baseQuery);
    sqlQuery=extendedQuerySupport.getSql(em,baseQuery);
  }
  int size=sqlQuery.length() + 10;
  List<String> setOperands=new ArrayList<String>();
  setOperands.add(sqlQuery);
  for (  Query q : this.setOperands) {
    String setOperandSql;
    if (q instanceof CustomSQLQuery) {
      CustomSQLQuery customQuery=(CustomSQLQuery)q;
      List<Query> customQueryParticipants=customQuery.getParticipatingQueries();
      participatingQueries.addAll(customQueryParticipants);
      setOperandSql=customQuery.getSql();
    }
 else     if (q instanceof CustomSQLTypedQuery<?>) {
      CustomSQLTypedQuery<?> customQuery=(CustomSQLTypedQuery<?>)q;
      List<Query> customQueryParticipants=customQuery.getParticipatingQueries();
      participatingQueries.addAll(customQueryParticipants);
      setOperandSql=customQuery.getSql();
    }
 else {
      setOperandSql=extendedQuerySupport.getSql(em,q);
      participatingQueries.add(q);
    }
    setOperands.add(setOperandSql);
    size+=setOperandSql.length() + 30;
  }
  StringBuilder sqlSb=new StringBuilder(size);
  dbmsDialect.appendSet(sqlSb,operator,nested,setOperands,orderByElements,limit,offset);
  StringBuilder withClause=applyCtes(sqlSb,baseQuery,cteQueries);
  Map<String,String> addedCtes=applyExtendedSql(sqlSb,false,false,withClause,null,null);
  cteQueries.addAll(participatingQueries);
  participatingQueries=cteQueries;
  this.sql=sqlSb.toString();
  this.participatingQueries=participatingQueries;
  this.addedCtes=addedCtes;
  this.dirty=false;
}","@Override protected void initialize(){
  String sqlQuery;
  List<Query> participatingQueries=new ArrayList<Query>();
  List<Query> cteQueries=new ArrayList<Query>();
  if (leftMostQuery instanceof CustomSQLQuery) {
    CustomSQLQuery customQuery=(CustomSQLQuery)leftMostQuery;
    List<Query> customQueryParticipants=customQuery.getParticipatingQueries();
    participatingQueries.addAll(customQueryParticipants);
    sqlQuery=customQuery.getSql();
  }
 else   if (leftMostQuery instanceof CustomSQLTypedQuery<?>) {
    CustomSQLTypedQuery<?> customQuery=(CustomSQLTypedQuery<?>)leftMostQuery;
    List<Query> customQueryParticipants=customQuery.getParticipatingQueries();
    participatingQueries.addAll(customQueryParticipants);
    sqlQuery=customQuery.getSql();
  }
 else {
    participatingQueries.add(baseQuery);
    sqlQuery=extendedQuerySupport.getSql(em,baseQuery);
  }
  int size=sqlQuery.length() + 10;
  List<String> setOperands=new ArrayList<String>();
  setOperands.add(sqlQuery);
  for (  Query q : this.setOperands) {
    String setOperandSql;
    if (q instanceof CustomSQLQuery) {
      CustomSQLQuery customQuery=(CustomSQLQuery)q;
      List<Query> customQueryParticipants=customQuery.getParticipatingQueries();
      participatingQueries.addAll(customQueryParticipants);
      setOperandSql=customQuery.getSql();
    }
 else     if (q instanceof CustomSQLTypedQuery<?>) {
      CustomSQLTypedQuery<?> customQuery=(CustomSQLTypedQuery<?>)q;
      List<Query> customQueryParticipants=customQuery.getParticipatingQueries();
      participatingQueries.addAll(customQueryParticipants);
      setOperandSql=customQuery.getSql();
    }
 else {
      setOperandSql=extendedQuerySupport.getSql(em,q);
      participatingQueries.add(q);
    }
    setOperands.add(setOperandSql);
    size+=setOperandSql.length() + 30;
  }
  StringBuilder sqlSb=new StringBuilder(size);
  dbmsDialect.appendSet(sqlSb,operator,nested,setOperands,orderByElements,limit,offset);
  StringBuilder withClause=applyCtes(sqlSb,baseQuery,cteQueries);
  Map<String,String> addedCtes=dbmsDialect.appendExtendedSql(sqlSb,statementType,false,false,withClause,null,null,null,null);
  cteQueries.addAll(participatingQueries);
  participatingQueries=cteQueries;
  this.sql=sqlSb.toString();
  this.participatingQueries=participatingQueries;
  this.addedCtes=addedCtes;
  this.dirty=false;
}",0.9882903981264636
168809,"@Override public void clearSchema(Connection c){
  try (Statement s=c.createStatement()){
    ResultSet rs;
    List<String> sqls=new ArrayList<>();
    LOG.log(Level.FINEST,""String_Node_Str"");
    rs=s.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + SYSTEM_SCHEMAS + ""String_Node_Str"");
    while (rs.next()) {
      sqls.add(rs.getString(1));
    }
    rs=s.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + SYSTEM_SCHEMAS + ""String_Node_Str"");
    while (rs.next()) {
      sqls.add(rs.getString(1));
    }
    rs=s.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + SYSTEM_SCHEMAS + ""String_Node_Str"");
    while (rs.next()) {
      sqls.add(rs.getString(1));
    }
    rs=s.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + SYSTEM_SCHEMAS + ""String_Node_Str"");
    while (rs.next()) {
      sqls.add(rs.getString(1));
    }
    rs=s.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + SYSTEM_SCHEMAS + ""String_Node_Str"");
    while (rs.next()) {
      sqls.add(rs.getString(1));
    }
    rs=s.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + SYSTEM_SCHEMAS + ""String_Node_Str"");
    while (rs.next()) {
      sqls.add(rs.getString(1));
    }
    rs=s.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + SYSTEM_SCHEMAS + ""String_Node_Str"");
    while (rs.next()) {
      sqls.add(rs.getString(1));
    }
    LOG.log(Level.FINEST,""String_Node_Str"");
    LOG.log(Level.FINEST,""String_Node_Str"");
    for (    String sql : sqls) {
      s.execute(sql);
    }
    LOG.log(Level.FINEST,""String_Node_Str"");
    LOG.log(Level.FINEST,""String_Node_Str"");
    c.commit();
    LOG.log(Level.FINEST,""String_Node_Str"");
  }
 catch (  SQLException e) {
    try {
      c.rollback();
    }
 catch (    SQLException e1) {
      e.addSuppressed(e1);
    }
    throw new RuntimeException(e);
  }
}","@Override public void clearSchema(Connection c){
  try (Statement s=c.createStatement()){
    ResultSet rs;
    List<String> sqls=new ArrayList<>();
    LOG.log(Level.FINEST,""String_Node_Str"");
    rs=s.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + SYSTEM_SCHEMAS + ""String_Node_Str"");
    while (rs.next()) {
      sqls.add(rs.getString(1));
    }
    rs=s.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + SYSTEM_SCHEMAS + ""String_Node_Str"");
    while (rs.next()) {
      sqls.add(rs.getString(1));
    }
    rs=s.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + SYSTEM_SCHEMAS + ""String_Node_Str"");
    while (rs.next()) {
      sqls.add(rs.getString(1));
    }
    rs=s.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + SYSTEM_SCHEMAS + ""String_Node_Str"");
    while (rs.next()) {
      sqls.add(rs.getString(1));
    }
    rs=s.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + SYSTEM_SCHEMAS + ""String_Node_Str"");
    while (rs.next()) {
      sqls.add(rs.getString(1));
    }
    rs=s.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + SYSTEM_SCHEMAS + ""String_Node_Str"");
    while (rs.next()) {
      sqls.add(rs.getString(1));
    }
    rs=s.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + SYSTEM_SCHEMAS + ""String_Node_Str"");
    while (rs.next()) {
      sqls.add(rs.getString(1));
    }
    LOG.log(Level.FINEST,""String_Node_Str"");
    LOG.log(Level.FINEST,""String_Node_Str"");
    for (    String sql : sqls) {
      try {
        s.execute(sql);
      }
 catch (      SQLException e) {
        if (-204 == e.getErrorCode()) {
        }
 else {
          throw e;
        }
      }
    }
    LOG.log(Level.FINEST,""String_Node_Str"");
    LOG.log(Level.FINEST,""String_Node_Str"");
    c.commit();
    LOG.log(Level.FINEST,""String_Node_Str"");
  }
 catch (  SQLException e) {
    try {
      c.rollback();
    }
 catch (    SQLException e1) {
      e.addSuppressed(e1);
    }
    throw new RuntimeException(e);
  }
}",0.9650480882007976
168810,"public void removeOperand(AbstractCommonQueryBuilder<?,?,?,?,?> operand){
  if (startQueryBuilder == operand) {
    return;
  }
 else {
    for (int i=0; i < setOperations.size(); i++) {
      if (setOperations.get(i) == operand) {
        setOperations.remove(i);
        return;
      }
    }
  }
}","public boolean removeOperand(AbstractCommonQueryBuilder<?,?,?,?,?> operand){
  BaseFinalSetOperationBuilderImpl<?,?,?> finalSetOperationBuilder;
  if (startQueryBuilder == operand) {
    startQueryBuilder=null;
    return true;
  }
  if (startQueryBuilder instanceof BaseFinalSetOperationBuilderImpl && ((BaseFinalSetOperationBuilderImpl)startQueryBuilder).setOperationManager.removeOperand(operand)) {
    return true;
  }
  for (int i=0; i < setOperations.size(); i++) {
    if (setOperations.get(i) == operand) {
      setOperations.remove(i);
      return true;
    }
    if (setOperations.get(i) instanceof BaseFinalSetOperationBuilderImpl && (finalSetOperationBuilder=(BaseFinalSetOperationBuilderImpl)setOperations.get(i)).setOperationManager.removeOperand(operand)) {
      if (finalSetOperationBuilder.isEmpty()) {
        setOperations.remove(i);
      }
      return true;
    }
  }
  return false;
}",0.4459124690338563
168811,"@Override public List<Object[]> transform(List<Object[]> tuples){
  FixedArrayList correlationParams=new FixedArrayList(batchSize);
  int tupleOffset=batchSize > 1 ? 1 : 0;
  Iterator<Object[]> tupleListIter=tuples.iterator();
  final String correlationRoot=applyAndGetCorrelationRoot(expectBatchCorrelationValues);
  EntityManager em=criteriaBuilder.getEntityManager();
  if (viewRootJpqlMacro.usesViewRoot()) {
    int totalSize=tuples.size();
    Map<Object,Map<Object,TuplePromise>> viewRoots=new HashMap<Object,Map<Object,TuplePromise>>(totalSize);
    Map<Object,Map<Object,TuplePromise>> correlationValues=new HashMap<Object,Map<Object,TuplePromise>>(totalSize);
    while (tupleListIter.hasNext()) {
      Object[] tuple=tupleListIter.next();
      Object viewRootKey=tuple[0];
      Object correlationValueKey=tuple[startIndex];
      Map<Object,TuplePromise> viewRootCorrelationValues=viewRoots.get(viewRootKey);
      if (viewRootCorrelationValues == null) {
        viewRootCorrelationValues=new HashMap<Object,TuplePromise>();
        viewRoots.put(viewRootKey,viewRootCorrelationValues);
      }
      TuplePromise viewRootPromise=viewRootCorrelationValues.get(correlationValueKey);
      if (viewRootPromise == null) {
        viewRootPromise=new TuplePromise(startIndex);
        viewRootCorrelationValues.put(correlationValueKey,viewRootPromise);
      }
      viewRootPromise.add(tuple);
      Map<Object,TuplePromise> correlationValueViewRoots=correlationValues.get(correlationValueKey);
      if (correlationValueViewRoots == null) {
        correlationValueViewRoots=new HashMap<Object,TuplePromise>();
        correlationValues.put(correlationValueKey,correlationValueViewRoots);
      }
      TuplePromise correlationValuePromise=correlationValueViewRoots.get(viewRootKey);
      if (correlationValuePromise == null) {
        correlationValuePromise=new TuplePromise(startIndex);
        correlationValueViewRoots.put(viewRootKey,correlationValuePromise);
      }
      correlationValuePromise.add(tuple);
    }
    boolean batchCorrelationValues=viewRoots.size() <= correlationValues.size();
    FixedArrayList viewRootIds=new FixedArrayList(batchSize);
    if (batchCorrelationValues) {
      if (batchSize > 1) {
        if (!expectBatchCorrelationValues) {
          applyAndGetCorrelationRoot(true);
        }
        criteriaBuilder.select(correlationKeyExpression);
      }
      correlator.finish(criteriaBuilder,entityViewConfiguration,tupleOffset,correlationRoot);
      populateParameters(criteriaBuilder);
      query=criteriaBuilder.getQuery();
      for (      Map.Entry<Object,Map<Object,TuplePromise>> batchEntry : viewRoots.entrySet()) {
        Map<Object,TuplePromise> batchValues=batchEntry.getValue();
        for (        Map.Entry<Object,TuplePromise> batchValueEntry : batchValues.entrySet()) {
          if (correlationBasisEntity != null) {
            correlationParams.add(em.getReference(correlationBasisEntity,batchValueEntry.getKey()));
          }
 else {
            correlationParams.add(batchValueEntry.getKey());
          }
          if (batchSize == correlationParams.realSize()) {
            viewRootIds.add(batchEntry.getKey());
            batchLoad(batchValues,correlationParams,viewRootIds,correlationParams.get(0),true);
          }
        }
        if (correlationParams.realSize() > 0) {
          viewRootIds.add(batchEntry.getKey());
          batchLoad(batchValues,correlationParams,viewRootIds,null,true);
        }
      }
      fillDefaultValues(viewRoots);
    }
 else {
      if (batchSize > 1) {
        if (expectBatchCorrelationValues) {
          applyAndGetCorrelationRoot(false);
        }
        criteriaBuilder.select(correlationKeyExpression);
      }
      correlator.finish(criteriaBuilder,entityViewConfiguration,tupleOffset,correlationRoot);
      populateParameters(criteriaBuilder);
      query=criteriaBuilder.getQuery();
      for (      Map.Entry<Object,Map<Object,TuplePromise>> batchEntry : correlationValues.entrySet()) {
        Map<Object,TuplePromise> batchValues=batchEntry.getValue();
        for (        Map.Entry<Object,TuplePromise> batchValueEntry : batchValues.entrySet()) {
          if (viewRootJpqlMacro.usesViewRootEntityParameter()) {
            viewRootIds.add(em.getReference(viewRootType.getEntityClass(),batchValueEntry.getKey()));
          }
 else {
            viewRootIds.add(batchValueEntry.getKey());
          }
          if (batchSize == viewRootIds.realSize()) {
            if (correlationBasisEntity != null) {
              correlationParams.add(em.getReference(correlationBasisEntity,batchEntry.getKey()));
            }
 else {
              correlationParams.add(batchEntry.getKey());
            }
            batchLoad(batchValues,correlationParams,viewRootIds,viewRootIds.get(0),false);
          }
        }
        if (viewRootIds.realSize() > 0) {
          if (correlationBasisEntity != null) {
            correlationParams.add(em.getReference(correlationBasisEntity,batchEntry.getKey()));
          }
 else {
            correlationParams.add(batchEntry.getKey());
          }
          batchLoad(batchValues,correlationParams,viewRootIds,null,false);
        }
      }
      fillDefaultValues(correlationValues);
    }
  }
 else {
    if (batchSize > 1) {
      if (!expectBatchCorrelationValues) {
        applyAndGetCorrelationRoot(true);
      }
      criteriaBuilder.select(correlationKeyExpression);
    }
    correlator.finish(criteriaBuilder,entityViewConfiguration,tupleOffset,correlationRoot);
    populateParameters(criteriaBuilder);
    query=criteriaBuilder.getQuery();
    Map<Object,TuplePromise> correlationValues=new HashMap<Object,TuplePromise>(tuples.size());
    while (tupleListIter.hasNext()) {
      Object[] tuple=tupleListIter.next();
      Object correlationValue=tuple[startIndex];
      TuplePromise tupleIndexValue=correlationValues.get(correlationValue);
      if (tupleIndexValue == null) {
        tupleIndexValue=new TuplePromise(startIndex);
        tupleIndexValue.add(tuple);
        correlationValues.put(correlationValue,tupleIndexValue);
        if (correlationBasisEntity != null) {
          correlationParams.add(em.getReference(correlationBasisEntity,tuple[startIndex]));
        }
 else {
          correlationParams.add(tuple[startIndex]);
        }
        if (batchSize == correlationParams.realSize()) {
          batchLoad(correlationValues,correlationParams,null,correlationParams.get(0),batchSize > 1);
        }
      }
 else {
        tupleIndexValue.add(tuple);
      }
    }
    if (correlationParams.realSize() > 0) {
      batchLoad(correlationValues,correlationParams,null,null,correlationParams.realSize() > 1);
    }
    fillDefaultValues(Collections.singletonMap(null,correlationValues));
  }
  return tuples;
}","@Override public List<Object[]> transform(List<Object[]> tuples){
  FixedArrayList correlationParams=new FixedArrayList(batchSize);
  int tupleOffset=batchSize > 1 ? 1 : 0;
  Iterator<Object[]> tupleListIter=tuples.iterator();
  final String correlationRoot=applyAndGetCorrelationRoot(expectBatchCorrelationValues);
  EntityManager em=criteriaBuilder.getEntityManager();
  if (viewRootJpqlMacro.usesViewRoot()) {
    int totalSize=tuples.size();
    Map<Object,Map<Object,TuplePromise>> viewRoots=new HashMap<Object,Map<Object,TuplePromise>>(totalSize);
    Map<Object,Map<Object,TuplePromise>> correlationValues=new HashMap<Object,Map<Object,TuplePromise>>(totalSize);
    while (tupleListIter.hasNext()) {
      Object[] tuple=tupleListIter.next();
      Object viewRootKey=tuple[0];
      Object correlationValueKey=tuple[startIndex];
      Map<Object,TuplePromise> viewRootCorrelationValues=viewRoots.get(viewRootKey);
      if (viewRootCorrelationValues == null) {
        viewRootCorrelationValues=new HashMap<Object,TuplePromise>();
        viewRoots.put(viewRootKey,viewRootCorrelationValues);
      }
      TuplePromise viewRootPromise=viewRootCorrelationValues.get(correlationValueKey);
      if (viewRootPromise == null) {
        viewRootPromise=new TuplePromise(startIndex);
        viewRootCorrelationValues.put(correlationValueKey,viewRootPromise);
      }
      viewRootPromise.add(tuple);
      Map<Object,TuplePromise> correlationValueViewRoots=correlationValues.get(correlationValueKey);
      if (correlationValueViewRoots == null) {
        correlationValueViewRoots=new HashMap<Object,TuplePromise>();
        correlationValues.put(correlationValueKey,correlationValueViewRoots);
      }
      TuplePromise correlationValuePromise=correlationValueViewRoots.get(viewRootKey);
      if (correlationValuePromise == null) {
        correlationValuePromise=new TuplePromise(startIndex);
        correlationValueViewRoots.put(viewRootKey,correlationValuePromise);
      }
      correlationValuePromise.add(tuple);
    }
    boolean batchCorrelationValues=viewRoots.size() <= correlationValues.size();
    FixedArrayList viewRootIds=new FixedArrayList(batchSize);
    if (batchCorrelationValues) {
      if (batchSize > 1) {
        if (!expectBatchCorrelationValues) {
          applyAndGetCorrelationRoot(true);
        }
        criteriaBuilder.select(correlationKeyExpression);
      }
      correlator.finish(criteriaBuilder,entityViewConfiguration,tupleOffset,correlationRoot);
      populateParameters(criteriaBuilder);
      query=criteriaBuilder.getQuery();
      for (      Map.Entry<Object,Map<Object,TuplePromise>> batchEntry : viewRoots.entrySet()) {
        Map<Object,TuplePromise> batchValues=batchEntry.getValue();
        for (        Map.Entry<Object,TuplePromise> batchValueEntry : batchValues.entrySet()) {
          if (correlationBasisEntity != null) {
            correlationParams.add(em.getReference(correlationBasisEntity,batchValueEntry.getKey()));
          }
 else {
            correlationParams.add(batchValueEntry.getKey());
          }
          if (batchSize == correlationParams.realSize()) {
            viewRootIds.add(batchEntry.getKey());
            batchLoad(batchValues,correlationParams,viewRootIds,correlationParams.get(0),true);
          }
        }
        if (correlationParams.realSize() > 0) {
          viewRootIds.add(batchEntry.getKey());
          batchLoad(batchValues,correlationParams,viewRootIds,null,true);
        }
      }
      fillDefaultValues(viewRoots);
    }
 else {
      if (batchSize > 1) {
        if (expectBatchCorrelationValues) {
          applyAndGetCorrelationRoot(false);
        }
        criteriaBuilder.select(correlationKeyExpression);
      }
      correlator.finish(criteriaBuilder,entityViewConfiguration,tupleOffset,correlationRoot);
      populateParameters(criteriaBuilder);
      query=criteriaBuilder.getQuery();
      for (      Map.Entry<Object,Map<Object,TuplePromise>> batchEntry : correlationValues.entrySet()) {
        Map<Object,TuplePromise> batchValues=batchEntry.getValue();
        for (        Map.Entry<Object,TuplePromise> batchValueEntry : batchValues.entrySet()) {
          if (viewRootJpqlMacro.usesViewRootEntityParameter()) {
            viewRootIds.add(em.getReference(viewRootType.getEntityClass(),batchValueEntry.getKey()));
          }
 else {
            viewRootIds.add(batchValueEntry.getKey());
          }
          if (batchSize == viewRootIds.realSize()) {
            if (correlationBasisEntity != null) {
              correlationParams.add(em.getReference(correlationBasisEntity,batchEntry.getKey()));
            }
 else {
              correlationParams.add(batchEntry.getKey());
            }
            batchLoad(batchValues,correlationParams,viewRootIds,viewRootIds.get(0),false);
          }
        }
        if (viewRootIds.realSize() > 0) {
          if (correlationBasisEntity != null) {
            correlationParams.add(em.getReference(correlationBasisEntity,batchEntry.getKey()));
          }
 else {
            correlationParams.add(batchEntry.getKey());
          }
          batchLoad(batchValues,correlationParams,viewRootIds,null,false);
        }
      }
      fillDefaultValues(correlationValues);
    }
  }
 else {
    if (batchSize > 1) {
      if (!expectBatchCorrelationValues) {
        applyAndGetCorrelationRoot(true);
      }
      criteriaBuilder.select(correlationKeyExpression);
    }
    correlator.finish(criteriaBuilder,entityViewConfiguration,tupleOffset,correlationRoot);
    populateParameters(criteriaBuilder);
    query=criteriaBuilder.getQuery();
    Map<Object,TuplePromise> correlationValues=new HashMap<Object,TuplePromise>(tuples.size());
    while (tupleListIter.hasNext()) {
      Object[] tuple=tupleListIter.next();
      Object correlationValue=tuple[startIndex];
      TuplePromise tupleIndexValue=correlationValues.get(correlationValue);
      if (tupleIndexValue == null) {
        tupleIndexValue=new TuplePromise(startIndex);
        tupleIndexValue.add(tuple);
        correlationValues.put(correlationValue,tupleIndexValue);
        if (correlationBasisEntity != null) {
          correlationParams.add(em.getReference(correlationBasisEntity,tuple[startIndex]));
        }
 else {
          correlationParams.add(tuple[startIndex]);
        }
        if (batchSize == correlationParams.realSize()) {
          batchLoad(correlationValues,correlationParams,null,correlationParams.get(0),batchSize > 1);
        }
      }
 else {
        tupleIndexValue.add(tuple);
      }
    }
    if (correlationParams.realSize() > 0) {
      batchLoad(correlationValues,correlationParams,null,null,batchSize > 1);
    }
    fillDefaultValues(Collections.singletonMap(null,correlationValues));
  }
  return tuples;
}",0.9978706219252514
168812,"public ReducerViewTypeObjectBuilder(ObjectBuilder<T> delegate,int start,int length){
  super(delegate);
  this.start=start;
  this.length=length;
  this.newTuple=new FastArrayList(length);
}","public ReducerViewTypeObjectBuilder(ObjectBuilder<T> delegate,int start,int length,boolean keepTuplePrefix){
  super(delegate);
  this.start=start;
  this.length=length;
  this.keepTuplePrefix=keepTuplePrefix;
  this.newTuple=new FastArrayList(length);
}",0.8558558558558559
168813,"@Override public T build(Object[] tuple){
  newTuple.clear();
  for (int i=start; i < start + length; i++) {
    if (tuple[i] != TupleReuse.CONSUMED) {
      newTuple.add(tuple[i]);
    }
  }
  return super.build(newTuple.getArray());
}","@Override public T build(Object[] tuple){
  newTuple.clear();
  for (int i=start; i < start + length; i++) {
    if (tuple[i] != TupleReuse.CONSUMED) {
      newTuple.add(tuple[i]);
    }
  }
  T result=super.build(newTuple.getArray());
  if (keepTuplePrefix) {
    Object[] tupleWithPrefix=new Object[start + 1];
    System.arraycopy(tuple,0,tupleWithPrefix,0,start);
    tupleWithPrefix[start]=result;
    result=(T)tupleWithPrefix;
  }
  return result;
}",0.6608946608946609
168814,"public ViewTypeObjectBuilderTemplate<?> createValue(EntityViewManagerImpl evm,ProxyFactory proxyFactory){
  int[] idPositions=new int[]{0};
  List<String> mappingPrefixes=null;
  if (entityViewRoot != null && entityViewRoot.length() > 0) {
    mappingPrefixes=Arrays.asList(entityViewRoot);
  }
  return new ViewTypeObjectBuilderTemplate<Object>(viewType,entityViewRoot,""String_Node_Str"",name,mappingPrefixes,entityViewRoot,idPositions,offset,evm,ef,viewType,constructor,proxyFactory);
}","public ViewTypeObjectBuilderTemplate<?> createValue(EntityViewManagerImpl evm,ProxyFactory proxyFactory){
  int[] idPositions=new int[offset + 1];
  for (int i=0; i <= offset; i++) {
    idPositions[i]=i;
  }
  List<String> mappingPrefixes=null;
  if (entityViewRoot != null && entityViewRoot.length() > 0) {
    mappingPrefixes=Arrays.asList(entityViewRoot);
  }
  return new ViewTypeObjectBuilderTemplate<Object>(viewType,entityViewRoot,""String_Node_Str"",name,mappingPrefixes,entityViewRoot,idPositions,offset,evm,ef,viewType,constructor,proxyFactory);
}",0.9300095877277086
168815,"public ObjectBuilder<T> createObjectBuilder(FullQueryBuilder<?,?> queryBuilder,Map<String,Object> optionalParameters,EntityViewConfiguration entityViewConfiguration,boolean isSubview){
  boolean hasOffset=tupleOffset != 0;
  ObjectBuilder<T> result;
  result=new ViewTypeObjectBuilder<T>(this,queryBuilder,optionalParameters);
  if (hasOffset || isSubview || hasIndexedCollections|| hasSubviews) {
    result=new ReducerViewTypeObjectBuilder<T>(result,tupleOffset,mappers.length);
  }
  if (hasParameters) {
    result=new ParameterViewTypeObjectBuilder<T>(result,this,queryBuilder,optionalParameters,tupleOffset);
  }
  if (tupleTransformatorFactory.hasTransformers() && !isSubview) {
    result=new ChainingObjectBuilder<T>(tupleTransformatorFactory,result,queryBuilder,optionalParameters,entityViewConfiguration,tupleOffset);
  }
  return result;
}","public ObjectBuilder<T> createObjectBuilder(FullQueryBuilder<?,?> queryBuilder,Map<String,Object> optionalParameters,EntityViewConfiguration entityViewConfiguration,boolean isSubview){
  boolean hasOffset=tupleOffset != 0;
  ObjectBuilder<T> result;
  result=new ViewTypeObjectBuilder<T>(this,queryBuilder,optionalParameters);
  if (hasOffset || isSubview || hasIndexedCollections|| hasSubviews) {
    result=new ReducerViewTypeObjectBuilder<T>(result,tupleOffset,mappers.length,!isSubview && tupleOffset > 0);
  }
  if (hasParameters) {
    result=new ParameterViewTypeObjectBuilder<T>(result,this,queryBuilder,optionalParameters,tupleOffset);
  }
  if (tupleTransformatorFactory.hasTransformers() && !isSubview) {
    result=new ChainingObjectBuilder<T>(tupleTransformatorFactory,result,queryBuilder,optionalParameters,entityViewConfiguration,tupleOffset);
  }
  return result;
}",0.9826789838337182
168816,"@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void finish(FullQueryBuilder<?,?> criteriaBuilder,EntityViewConfiguration entityViewConfiguration,int tupleOffset,String correlationRoot){
  ObjectBuilder builder=evm.createObjectBuilder((ViewType<?>)managedViewType,null,viewName,correlationRoot,criteriaBuilder,entityViewConfiguration,tupleOffset,false);
  if (tupleOffset == 0) {
    criteriaBuilder.selectNew(builder);
  }
 else {
    criteriaBuilder.selectNew(new PrefixedObjectBuilder(builder,tupleOffset));
  }
}","@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void finish(FullQueryBuilder<?,?> criteriaBuilder,EntityViewConfiguration entityViewConfiguration,int tupleOffset,String correlationRoot){
  ObjectBuilder builder=evm.createObjectBuilder((ViewType<?>)managedViewType,null,viewName,correlationRoot,criteriaBuilder,entityViewConfiguration,tupleOffset,false);
  criteriaBuilder.selectNew(builder);
}",0.8720083246618107
168817,"private <T extends DocumentCorrelationView>void testCorrelation(Class<T> entityView,Integer batchSize){
  EntityViewConfiguration cfg=EntityViews.createDefaultConfiguration();
  cfg.addEntityView(entityView);
  cfg.addEntityView(DocumentRelatedView.class);
  EntityViewManager evm=cfg.createEntityViewManager(cbf,em.getEntityManagerFactory());
  CriteriaBuilder<Document> criteria=cbf.create(em,Document.class,""String_Node_Str"").orderByAsc(""String_Node_Str"");
  EntityViewSetting<T,CriteriaBuilder<T>> setting=EntityViewSetting.create(entityView);
  if (batchSize != null) {
    setting.setProperty(ConfigurationProperties.DEFAULT_BATCH_SIZE + ""String_Node_Str"",batchSize);
  }
  CriteriaBuilder<T> cb=evm.applySetting(setting,criteria);
  List<T> results=cb.getResultList();
  assertEquals(4,results.size());
  assertEquals(doc1.getName(),results.get(0).getName());
  assertEquals(0,results.get(0).getOwnerRelatedDocuments().size());
  assertEquals(0,results.get(0).getOwnerRelatedDocumentIds().size());
  assertEquals(1,results.get(0).getOwnerOnlyRelatedDocuments().size());
  assertRemovedByName(doc1.getName(),results.get(0).getOwnerOnlyRelatedDocuments());
  assertEquals(1,results.get(0).getOwnerOnlyRelatedDocumentIds().size());
  assertRemoved(doc1.getId(),results.get(0).getOwnerOnlyRelatedDocumentIds());
  assertEquals(doc2.getName(),results.get(1).getName());
  assertEquals(2,results.get(1).getOwnerRelatedDocuments().size());
  assertRemovedByName(doc3.getName(),results.get(1).getOwnerRelatedDocuments());
  assertRemovedByName(doc4.getName(),results.get(1).getOwnerRelatedDocuments());
  assertEquals(2,results.get(1).getOwnerRelatedDocumentIds().size());
  assertRemoved(doc3.getId(),results.get(1).getOwnerRelatedDocumentIds());
  assertRemoved(doc4.getId(),results.get(1).getOwnerRelatedDocumentIds());
  assertEquals(3,results.get(1).getOwnerOnlyRelatedDocuments().size());
  assertRemovedByName(doc2.getName(),results.get(1).getOwnerOnlyRelatedDocuments());
  assertRemovedByName(doc3.getName(),results.get(1).getOwnerOnlyRelatedDocuments());
  assertRemovedByName(doc4.getName(),results.get(1).getOwnerOnlyRelatedDocuments());
  assertEquals(3,results.get(1).getOwnerOnlyRelatedDocumentIds().size());
  assertRemoved(doc2.getId(),results.get(1).getOwnerOnlyRelatedDocumentIds());
  assertRemoved(doc3.getId(),results.get(1).getOwnerOnlyRelatedDocumentIds());
  assertRemoved(doc4.getId(),results.get(1).getOwnerOnlyRelatedDocumentIds());
  assertEquals(doc3.getName(),results.get(2).getName());
  assertEquals(2,results.get(2).getOwnerRelatedDocuments().size());
  assertRemovedByName(doc2.getName(),results.get(2).getOwnerRelatedDocuments());
  assertRemovedByName(doc4.getName(),results.get(2).getOwnerRelatedDocuments());
  assertEquals(2,results.get(2).getOwnerRelatedDocumentIds().size());
  assertRemoved(doc2.getId(),results.get(2).getOwnerRelatedDocumentIds());
  assertRemoved(doc4.getId(),results.get(2).getOwnerRelatedDocumentIds());
  assertEquals(3,results.get(2).getOwnerOnlyRelatedDocuments().size());
  assertRemovedByName(doc2.getName(),results.get(2).getOwnerOnlyRelatedDocuments());
  assertRemovedByName(doc3.getName(),results.get(2).getOwnerOnlyRelatedDocuments());
  assertRemovedByName(doc4.getName(),results.get(2).getOwnerOnlyRelatedDocuments());
  assertEquals(3,results.get(2).getOwnerOnlyRelatedDocumentIds().size());
  assertRemoved(doc2.getId(),results.get(2).getOwnerOnlyRelatedDocumentIds());
  assertRemoved(doc3.getId(),results.get(2).getOwnerOnlyRelatedDocumentIds());
  assertRemoved(doc4.getId(),results.get(2).getOwnerOnlyRelatedDocumentIds());
  assertEquals(doc4.getName(),results.get(3).getName());
  assertEquals(2,results.get(3).getOwnerRelatedDocuments().size());
  assertRemovedByName(doc2.getName(),results.get(3).getOwnerRelatedDocuments());
  assertRemovedByName(doc3.getName(),results.get(3).getOwnerRelatedDocuments());
  assertEquals(2,results.get(3).getOwnerRelatedDocumentIds().size());
  assertRemoved(doc2.getId(),results.get(3).getOwnerRelatedDocumentIds());
  assertRemoved(doc3.getId(),results.get(3).getOwnerRelatedDocumentIds());
  assertEquals(3,results.get(3).getOwnerOnlyRelatedDocuments().size());
  assertRemovedByName(doc2.getName(),results.get(3).getOwnerOnlyRelatedDocuments());
  assertRemovedByName(doc3.getName(),results.get(3).getOwnerOnlyRelatedDocuments());
  assertRemovedByName(doc4.getName(),results.get(3).getOwnerOnlyRelatedDocuments());
  assertEquals(3,results.get(3).getOwnerOnlyRelatedDocumentIds().size());
  assertRemoved(doc2.getId(),results.get(3).getOwnerOnlyRelatedDocumentIds());
  assertRemoved(doc3.getId(),results.get(3).getOwnerOnlyRelatedDocumentIds());
  assertRemoved(doc4.getId(),results.get(3).getOwnerOnlyRelatedDocumentIds());
}","private <T extends DocumentCorrelationView>void testCorrelation(Class<T> entityView,Integer batchSize){
  EntityViewConfiguration cfg=EntityViews.createDefaultConfiguration();
  cfg.addEntityView(entityView);
  cfg.addEntityView(DocumentRelatedView.class);
  cfg.addEntityView(PersonSubView.class);
  EntityViewManager evm=cfg.createEntityViewManager(cbf,em.getEntityManagerFactory());
  CriteriaBuilder<Document> criteria=cbf.create(em,Document.class,""String_Node_Str"").orderByAsc(""String_Node_Str"");
  EntityViewSetting<T,CriteriaBuilder<T>> setting=EntityViewSetting.create(entityView);
  if (batchSize != null) {
    setting.setProperty(ConfigurationProperties.DEFAULT_BATCH_SIZE + ""String_Node_Str"",batchSize);
  }
  CriteriaBuilder<T> cb=evm.applySetting(setting,criteria);
  List<T> results=cb.getResultList();
  assertEquals(4,results.size());
  assertEquals(doc1.getName(),results.get(0).getName());
  assertEquals(0,results.get(0).getOwnerRelatedDocuments().size());
  assertEquals(0,results.get(0).getOwnerRelatedDocumentIds().size());
  assertEquals(1,results.get(0).getOwnerOnlyRelatedDocuments().size());
  assertRemovedByName(doc1.getName(),results.get(0).getOwnerOnlyRelatedDocuments());
  assertEquals(1,results.get(0).getOwnerOnlyRelatedDocumentIds().size());
  assertRemoved(doc1.getId(),results.get(0).getOwnerOnlyRelatedDocumentIds());
  assertEquals(doc2.getName(),results.get(1).getName());
  assertEquals(2,results.get(1).getOwnerRelatedDocuments().size());
  assertRemovedByName(doc3.getName(),results.get(1).getOwnerRelatedDocuments());
  assertRemovedByName(doc4.getName(),results.get(1).getOwnerRelatedDocuments());
  assertEquals(2,results.get(1).getOwnerRelatedDocumentIds().size());
  assertRemoved(doc3.getId(),results.get(1).getOwnerRelatedDocumentIds());
  assertRemoved(doc4.getId(),results.get(1).getOwnerRelatedDocumentIds());
  assertEquals(3,results.get(1).getOwnerOnlyRelatedDocuments().size());
  assertRemovedByName(doc2.getName(),results.get(1).getOwnerOnlyRelatedDocuments());
  assertRemovedByName(doc3.getName(),results.get(1).getOwnerOnlyRelatedDocuments());
  assertRemovedByName(doc4.getName(),results.get(1).getOwnerOnlyRelatedDocuments());
  assertEquals(3,results.get(1).getOwnerOnlyRelatedDocumentIds().size());
  assertRemoved(doc2.getId(),results.get(1).getOwnerOnlyRelatedDocumentIds());
  assertRemoved(doc3.getId(),results.get(1).getOwnerOnlyRelatedDocumentIds());
  assertRemoved(doc4.getId(),results.get(1).getOwnerOnlyRelatedDocumentIds());
  assertEquals(doc3.getName(),results.get(2).getName());
  assertEquals(2,results.get(2).getOwnerRelatedDocuments().size());
  assertRemovedByName(doc2.getName(),results.get(2).getOwnerRelatedDocuments());
  assertRemovedByName(doc4.getName(),results.get(2).getOwnerRelatedDocuments());
  assertEquals(2,results.get(2).getOwnerRelatedDocumentIds().size());
  assertRemoved(doc2.getId(),results.get(2).getOwnerRelatedDocumentIds());
  assertRemoved(doc4.getId(),results.get(2).getOwnerRelatedDocumentIds());
  assertEquals(3,results.get(2).getOwnerOnlyRelatedDocuments().size());
  assertRemovedByName(doc2.getName(),results.get(2).getOwnerOnlyRelatedDocuments());
  assertRemovedByName(doc3.getName(),results.get(2).getOwnerOnlyRelatedDocuments());
  assertRemovedByName(doc4.getName(),results.get(2).getOwnerOnlyRelatedDocuments());
  assertEquals(3,results.get(2).getOwnerOnlyRelatedDocumentIds().size());
  assertRemoved(doc2.getId(),results.get(2).getOwnerOnlyRelatedDocumentIds());
  assertRemoved(doc3.getId(),results.get(2).getOwnerOnlyRelatedDocumentIds());
  assertRemoved(doc4.getId(),results.get(2).getOwnerOnlyRelatedDocumentIds());
  assertEquals(doc4.getName(),results.get(3).getName());
  assertEquals(2,results.get(3).getOwnerRelatedDocuments().size());
  assertRemovedByName(doc2.getName(),results.get(3).getOwnerRelatedDocuments());
  assertRemovedByName(doc3.getName(),results.get(3).getOwnerRelatedDocuments());
  assertEquals(2,results.get(3).getOwnerRelatedDocumentIds().size());
  assertRemoved(doc2.getId(),results.get(3).getOwnerRelatedDocumentIds());
  assertRemoved(doc3.getId(),results.get(3).getOwnerRelatedDocumentIds());
  assertEquals(3,results.get(3).getOwnerOnlyRelatedDocuments().size());
  assertRemovedByName(doc2.getName(),results.get(3).getOwnerOnlyRelatedDocuments());
  assertRemovedByName(doc3.getName(),results.get(3).getOwnerOnlyRelatedDocuments());
  assertRemovedByName(doc4.getName(),results.get(3).getOwnerOnlyRelatedDocuments());
  assertEquals(3,results.get(3).getOwnerOnlyRelatedDocumentIds().size());
  assertRemoved(doc2.getId(),results.get(3).getOwnerOnlyRelatedDocumentIds());
  assertRemoved(doc3.getId(),results.get(3).getOwnerOnlyRelatedDocumentIds());
  assertRemoved(doc4.getId(),results.get(3).getOwnerOnlyRelatedDocumentIds());
}",0.995599329421626
168818,"Set<JoinNode> buildClause(StringBuilder sb,Set<ClauseType> clauseExclusions,String aliasPrefix,boolean collectCollectionJoinNodes,boolean externalRepresenation,List<String> whereConjuncts){
  final boolean renderFetches=!clauseExclusions.contains(ClauseType.SELECT);
  StringBuilder tempSb=null;
  collectionJoinNodes.clear();
  renderedJoins.clear();
  sb.append(""String_Node_Str"");
  List<JoinNode> nodes=rootNodes;
  int size=nodes.size();
  for (int i=0; i < size; i++) {
    if (i != 0) {
      sb.append(""String_Node_Str"");
    }
    JoinNode rootNode=nodes.get(i);
    JoinNode correlationParent=rootNode.getCorrelationParent();
    if (externalRepresenation && rootNode.getValueCount() > 0) {
      ManagedType<?> type=metamodel.getManagedType(rootNode.getPropertyClass());
      final int attributeCount=rootNode.getAttributeCount();
      if (rootNode.getPropertyClass() != ValuesEntity.class) {
        if (type instanceof EntityType<?>) {
          sb.append(((EntityType)type).getName());
        }
 else {
          sb.append(type.getJavaType().getSimpleName());
        }
      }
      sb.append(""String_Node_Str"");
      for (int valueNumber=0; valueNumber < rootNode.getValueCount(); valueNumber++) {
        sb.append(""String_Node_Str"");
        for (int j=0; j < attributeCount; j++) {
          sb.append(""String_Node_Str"");
        }
        sb.setCharAt(sb.length() - 1,')');
        sb.append(',');
      }
      sb.setCharAt(sb.length() - 1,')');
    }
 else {
      if (correlationParent != null) {
        sb.append(correlationParent.getAliasInfo().getAlias());
        sb.append('.');
        sb.append(rootNode.getCorrelationPath());
      }
 else {
        EntityType<?> type=metamodel.entity(rootNode.getPropertyClass());
        sb.append(type.getName());
      }
    }
    sb.append(' ');
    if (aliasPrefix != null) {
      sb.append(aliasPrefix);
    }
    sb.append(rootNode.getAliasInfo().getAlias());
    rootNode.registerDependencies();
    applyJoins(sb,rootNode.getAliasInfo(),rootNode.getNodes(),clauseExclusions,aliasPrefix,collectCollectionJoinNodes,renderFetches);
    if (!rootNode.getEntityJoinNodes().isEmpty()) {
      boolean isCollection=true;
      if (mainQuery.jpaProvider.supportsEntityJoin()) {
        applyJoins(sb,rootNode.getAliasInfo(),new ArrayList<JoinNode>(rootNode.getEntityJoinNodes()),isCollection,clauseExclusions,aliasPrefix,collectCollectionJoinNodes,renderFetches);
      }
 else {
        Set<JoinNode> entityNodes=rootNode.getEntityJoinNodes();
        for (        JoinNode entityNode : entityNodes) {
          if (collectCollectionJoinNodes && isCollection) {
            collectionJoinNodes.add(entityNode);
          }
          sb.append(""String_Node_Str"");
          EntityType<?> type=metamodel.entity(entityNode.getPropertyClass());
          sb.append(type.getName());
          sb.append(' ');
          if (aliasPrefix != null) {
            sb.append(aliasPrefix);
          }
          sb.append(entityNode.getAliasInfo().getAlias());
          entityNode.registerDependencies();
          if (entityNode.getOnPredicate() != null && !entityNode.getOnPredicate().getChildren().isEmpty()) {
            if (tempSb == null) {
              tempSb=new StringBuilder();
            }
 else {
              tempSb.setLength(0);
            }
            queryGenerator.setQueryBuffer(tempSb);
            SimpleQueryGenerator.BooleanLiteralRenderingContext oldBooleanLiteralRenderingContext=queryGenerator.setBooleanLiteralRenderingContext(SimpleQueryGenerator.BooleanLiteralRenderingContext.PREDICATE);
            entityNode.getOnPredicate().accept(queryGenerator);
            queryGenerator.setBooleanLiteralRenderingContext(oldBooleanLiteralRenderingContext);
            whereConjuncts.add(tempSb.toString());
          }
          applyJoins(sb,entityNode.getAliasInfo(),entityNode.getNodes(),clauseExclusions,aliasPrefix,collectCollectionJoinNodes,renderFetches);
        }
      }
    }
  }
  return collectionJoinNodes;
}","Set<JoinNode> buildClause(StringBuilder sb,Set<ClauseType> clauseExclusions,String aliasPrefix,boolean collectCollectionJoinNodes,boolean externalRepresenation,List<String> whereConjuncts){
  final boolean renderFetches=!clauseExclusions.contains(ClauseType.SELECT);
  StringBuilder tempSb=null;
  collectionJoinNodes.clear();
  renderedJoins.clear();
  sb.append(""String_Node_Str"");
  List<JoinNode> nodes=rootNodes;
  int size=nodes.size();
  for (int i=0; i < size; i++) {
    if (i != 0) {
      sb.append(""String_Node_Str"");
    }
    JoinNode rootNode=nodes.get(i);
    JoinNode correlationParent=rootNode.getCorrelationParent();
    if (externalRepresenation && rootNode.getValueCount() > 0) {
      ManagedType<?> type=metamodel.getManagedType(rootNode.getPropertyClass());
      final int attributeCount=rootNode.getAttributeCount();
      if (rootNode.getPropertyClass() != ValuesEntity.class) {
        if (type instanceof EntityType<?>) {
          sb.append(((EntityType)type).getName());
        }
 else {
          sb.append(type.getJavaType().getSimpleName());
        }
      }
      sb.append(""String_Node_Str"");
      for (int valueNumber=0; valueNumber < rootNode.getValueCount(); valueNumber++) {
        sb.append(""String_Node_Str"");
        for (int j=0; j < attributeCount; j++) {
          sb.append(""String_Node_Str"");
        }
        sb.setCharAt(sb.length() - 1,')');
        sb.append(',');
      }
      sb.setCharAt(sb.length() - 1,')');
    }
 else {
      if (correlationParent != null) {
        sb.append(correlationParent.getAliasInfo().getAlias());
        sb.append('.');
        sb.append(rootNode.getCorrelationPath());
      }
 else {
        EntityType<?> type=metamodel.entity(rootNode.getPropertyClass());
        sb.append(type.getName());
      }
    }
    sb.append(' ');
    if (aliasPrefix != null) {
      sb.append(aliasPrefix);
    }
    sb.append(rootNode.getAliasInfo().getAlias());
    rootNode.registerDependencies();
    applyJoins(sb,rootNode.getAliasInfo(),rootNode.getNodes(),clauseExclusions,aliasPrefix,collectCollectionJoinNodes,renderFetches);
    if (!rootNode.getEntityJoinNodes().isEmpty()) {
      boolean isCollection=true;
      if (mainQuery.jpaProvider.supportsEntityJoin()) {
        applyJoins(sb,rootNode.getAliasInfo(),new ArrayList<JoinNode>(rootNode.getEntityJoinNodes()),isCollection,clauseExclusions,aliasPrefix,collectCollectionJoinNodes,renderFetches);
      }
 else {
        Set<JoinNode> entityNodes=rootNode.getEntityJoinNodes();
        for (        JoinNode entityNode : entityNodes) {
          if (collectCollectionJoinNodes && isCollection) {
            collectionJoinNodes.add(entityNode);
          }
          sb.append(""String_Node_Str"");
          EntityType<?> type=metamodel.entity(entityNode.getPropertyClass());
          sb.append(type.getName());
          sb.append(' ');
          if (aliasPrefix != null) {
            sb.append(aliasPrefix);
          }
          sb.append(entityNode.getAliasInfo().getAlias());
          entityNode.registerDependencies();
          if (entityNode.getOnPredicate() != null && !entityNode.getOnPredicate().getChildren().isEmpty()) {
            if (tempSb == null) {
              tempSb=new StringBuilder();
            }
 else {
              tempSb.setLength(0);
            }
            queryGenerator.setQueryBuffer(tempSb);
            SimpleQueryGenerator.BooleanLiteralRenderingContext oldBooleanLiteralRenderingContext=queryGenerator.setBooleanLiteralRenderingContext(SimpleQueryGenerator.BooleanLiteralRenderingContext.PREDICATE);
            entityNode.getOnPredicate().accept(queryGenerator);
            queryGenerator.setBooleanLiteralRenderingContext(oldBooleanLiteralRenderingContext);
            whereConjuncts.add(tempSb.toString());
          }
          renderedJoins.add(entityNode);
          applyJoins(sb,entityNode.getAliasInfo(),entityNode.getNodes(),clauseExclusions,aliasPrefix,collectCollectionJoinNodes,renderFetches);
        }
      }
    }
  }
  return collectionJoinNodes;
}",0.9949163050216988
168819,"@SuppressWarnings(""String_Node_Str"") private Map.Entry<TypedQuery<T>,KeysetExtractionObjectBuilder<T>> getObjectQuery(boolean normalQueryMode,Set<JoinNode> keyRestrictedLeftJoins){
  String queryString=getBaseQueryString();
  Class<?> expectedResultType;
  if (keysetExtraction) {
    expectedResultType=Object[].class;
  }
 else {
    expectedResultType=selectManager.getExpectedQueryResultType();
  }
  TypedQuery<T> query;
  if (normalQueryMode && isEmpty(keyRestrictedLeftJoins,EnumSet.noneOf(ClauseType.class))) {
    query=(TypedQuery<T>)em.createQuery(queryString,expectedResultType);
    parameterManager.parameterizeQuery(query);
  }
 else {
    TypedQuery<T> baseQuery=(TypedQuery<T>)em.createQuery(queryString,expectedResultType);
    Set<String> parameterListNames=parameterManager.getParameterListNames(baseQuery);
    List<String> keyRestrictedLeftJoinAliases=getKeyRestrictedLeftJoinAliases(baseQuery,keyRestrictedLeftJoins,EnumSet.noneOf(ClauseType.class));
    List<EntityFunctionNode> entityFunctionNodes=getEntityFunctionNodes(baseQuery);
    boolean shouldRenderCteNodes=renderCteNodes(false);
    List<CTENode> ctes=shouldRenderCteNodes ? getCteNodes(baseQuery,false) : Collections.EMPTY_LIST;
    QuerySpecification querySpecification=new CustomQuerySpecification(this,baseQuery,parameterListNames,null,null,keyRestrictedLeftJoinAliases,entityFunctionNodes,mainQuery.cteManager.isRecursive(),ctes,shouldRenderCteNodes);
    query=new CustomSQLTypedQuery<T>(querySpecification,baseQuery,(CommonQueryBuilder<?>)this,cbf.getExtendedQuerySupport(),parameterManager.getValuesParameters(),parameterManager.getValuesBinders());
    parameterManager.parameterizeQuery(query);
  }
  KeysetExtractionObjectBuilder<T> objectBuilder=null;
  ObjectBuilder<T> transformerObjectBuilder=selectManager.getSelectObjectBuilder();
  if (keysetExtraction) {
    int keysetSize=orderByManager.getOrderByCount();
    if (transformerObjectBuilder == null) {
      objectBuilder=new KeysetExtractionObjectBuilder<T>(keysetSize);
    }
 else {
      objectBuilder=new DelegatingKeysetExtractionObjectBuilder<T>(transformerObjectBuilder,keysetSize);
    }
    transformerObjectBuilder=objectBuilder;
  }
  if (transformerObjectBuilder != null) {
    for (    QueryTransformer transformer : cbf.getQueryTransformers()) {
      query=transformer.transformQuery((TypedQuery<T>)query,transformerObjectBuilder);
    }
  }
  return new AbstractMap.SimpleEntry<TypedQuery<T>,KeysetExtractionObjectBuilder<T>>(query,objectBuilder);
}","@SuppressWarnings(""String_Node_Str"") private Map.Entry<TypedQuery<T>,KeysetExtractionObjectBuilder<T>> getObjectQuery(boolean normalQueryMode,Set<JoinNode> keyRestrictedLeftJoins){
  String queryString=getBaseQueryString();
  Class<?> expectedResultType;
  if (keysetExtraction) {
    expectedResultType=Object[].class;
  }
 else {
    expectedResultType=selectManager.getExpectedQueryResultType();
  }
  TypedQuery<T> query;
  if (normalQueryMode && isEmpty(keyRestrictedLeftJoins,EnumSet.noneOf(ClauseType.class))) {
    query=(TypedQuery<T>)em.createQuery(queryString,expectedResultType);
    parameterManager.parameterizeQuery(query);
  }
 else {
    TypedQuery<T> baseQuery=(TypedQuery<T>)em.createQuery(queryString,expectedResultType);
    Set<String> parameterListNames=parameterManager.getParameterListNames(baseQuery);
    List<String> keyRestrictedLeftJoinAliases=getKeyRestrictedLeftJoinAliases(baseQuery,keyRestrictedLeftJoins,EnumSet.noneOf(ClauseType.class));
    List<EntityFunctionNode> entityFunctionNodes=getEntityFunctionNodes(baseQuery);
    boolean shouldRenderCteNodes=renderCteNodes(false);
    List<CTENode> ctes=shouldRenderCteNodes ? getCteNodes(baseQuery,false) : Collections.EMPTY_LIST;
    QuerySpecification querySpecification=new CustomQuerySpecification(this,baseQuery,parameterListNames,null,null,keyRestrictedLeftJoinAliases,entityFunctionNodes,mainQuery.cteManager.isRecursive(),ctes,shouldRenderCteNodes);
    query=new CustomSQLTypedQuery<T>(querySpecification,baseQuery,(CommonQueryBuilder<?>)this,cbf.getExtendedQuerySupport(),parameterManager.getValuesParameters(),parameterManager.getValuesBinders());
    parameterManager.parameterizeQuery(query);
  }
  KeysetExtractionObjectBuilder<T> objectBuilder=null;
  ObjectBuilder<T> transformerObjectBuilder=selectManager.getSelectObjectBuilder();
  if (keysetExtraction) {
    int keysetSize=orderByManager.getOrderByCount();
    if (transformerObjectBuilder == null) {
      objectBuilder=new KeysetExtractionObjectBuilder<T>(keysetSize,keysetMode);
    }
 else {
      objectBuilder=new DelegatingKeysetExtractionObjectBuilder<T>(transformerObjectBuilder,keysetSize,keysetMode);
    }
    transformerObjectBuilder=objectBuilder;
  }
  if (transformerObjectBuilder != null) {
    for (    QueryTransformer transformer : cbf.getQueryTransformers()) {
      query=transformer.transformQuery((TypedQuery<T>)query,transformerObjectBuilder);
    }
  }
  return new AbstractMap.SimpleEntry<TypedQuery<T>,KeysetExtractionObjectBuilder<T>>(query,objectBuilder);
}",0.9956538917423944
168820,"public DelegatingKeysetExtractionObjectBuilder(ObjectBuilder<T> objectBuilder,int keysetSize){
  super(keysetSize);
  this.objectBuilder=objectBuilder;
}","public DelegatingKeysetExtractionObjectBuilder(ObjectBuilder<T> objectBuilder,int keysetSize,KeysetMode keysetMode){
  super(keysetSize,keysetMode);
  this.objectBuilder=objectBuilder;
}",0.9026548672566372
168821,"public KeysetExtractionObjectBuilder(int keysetSize){
  this.keysetSize=keysetSize;
}","public KeysetExtractionObjectBuilder(int keysetSize,KeysetMode keysetMode){
  this.keysetSize=keysetSize;
  this.keysetMode=keysetMode;
}",0.7657657657657657
168822,"@SuppressWarnings(""String_Node_Str"") @Override public T build(Object[] tuple){
  Object[] newTuple=new Object[tuple.length - keysetSize];
  System.arraycopy(tuple,0,newTuple,0,newTuple.length);
  if (first == null) {
    first=tuple;
    last=tuple;
  }
 else {
    last=tuple;
  }
  return (T)newTuple;
}","@SuppressWarnings(""String_Node_Str"") @Override public T build(Object[] tuple){
  Object[] newTuple=new Object[tuple.length - keysetSize];
  System.arraycopy(tuple,0,newTuple,0,newTuple.length);
  if (keysetMode == KeysetMode.PREVIOUS) {
    if (first == null) {
      first=tuple;
      last=tuple;
    }
 else {
      first=tuple;
    }
  }
 else {
    if (first == null) {
      first=tuple;
      last=tuple;
    }
 else {
      last=tuple;
    }
  }
  return (T)newTuple;
}",0.5831202046035806
168823,"private boolean needsValueFunction(PathExpression expression){
  JoinNode baseNode=(JoinNode)expression.getBaseNode();
  return !expression.isCollectionKeyPath() && baseNode.getParentTreeNode() != null && baseNode.getParentTreeNode().isMap() && expression.getField() == null;
}","private boolean needsValueFunction(PathExpression expression){
  JoinNode baseNode=(JoinNode)expression.getBaseNode();
  return !expression.isCollectionKeyPath() && baseNode.getParentTreeNode() != null && baseNode.getParentTreeNode().isMap() && (expression.getField() == null || jpaProvider.supportsCollectionValueDereference());
}",0.9111842105263158
168824,"protected String joinAliasValue(String alias,String field){
  if (jpaProvider.getCollectionValueFunction() != null && field == null) {
    alias=jpaProvider.getCollectionValueFunction() + ""String_Node_Str"" + alias+ ""String_Node_Str"";
  }
  if (field == null) {
    return alias;
  }
  return alias + ""String_Node_Str"" + field;
}","private static String joinAliasValue(JpaProvider provider,String alias,String field){
  if (provider.getCollectionValueFunction() != null && (field == null || provider.supportsCollectionValueDereference())) {
    alias=provider.getCollectionValueFunction() + ""String_Node_Str"" + alias+ ""String_Node_Str"";
  }
  if (field == null) {
    return alias;
  }
  return alias + ""String_Node_Str"" + field;
}",0.7922971114167813
168825,"protected static String staticJoinAliasValue(String alias,String field){
  alias=STATIC_JPA_PROVIDER.getCollectionValueFunction() != null ? STATIC_JPA_PROVIDER.getCollectionValueFunction() + ""String_Node_Str"" + alias+ ""String_Node_Str"" : alias;
  if (field == null) {
    return alias;
  }
  return alias + ""String_Node_Str"" + field;
}","protected static String staticJoinAliasValue(String alias,String field){
  return joinAliasValue(STATIC_JPA_PROVIDER,alias,field);
}",0.4796573875802998
168826,"private boolean needsValueFunction(PathExpression expression){
  JoinNode baseNode=(JoinNode)expression.getBaseNode();
  return !expression.isCollectionKeyPath() && baseNode.getParentTreeNode() != null && baseNode.getParentTreeNode().isMap();
}","private boolean needsValueFunction(PathExpression expression){
  JoinNode baseNode=(JoinNode)expression.getBaseNode();
  return !expression.isCollectionKeyPath() && baseNode.getParentTreeNode() != null && baseNode.getParentTreeNode().isMap() && expression.getField() == null;
}",0.9366602687140116
168827,"protected String joinAliasValue(String alias,String field){
  alias=jpaProvider.getCollectionValueFunction() != null ? jpaProvider.getCollectionValueFunction() + ""String_Node_Str"" + alias+ ""String_Node_Str"" : alias;
  if (field == null) {
    return alias;
  }
  return alias + ""String_Node_Str"" + field;
}","protected String joinAliasValue(String alias,String field){
  if (jpaProvider.getCollectionValueFunction() != null && field == null) {
    alias=jpaProvider.getCollectionValueFunction() + ""String_Node_Str"" + alias+ ""String_Node_Str"";
  }
  if (field == null) {
    return alias;
  }
  return alias + ""String_Node_Str"" + field;
}",0.9148264984227128
168828,"@Test @Category({NoDB2.class,NoMSSQL.class,NoOracle.class}) public void testSizeTransformWithImplicitParameterGroupBy2(){
  CriteriaBuilder<Long> criteria=cbf.create(em,Long.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"").selectCase().when(""String_Node_Str"").lt(2l).thenExpression(""String_Node_Str"").otherwiseExpression(""String_Node_Str"");
  final String expected=""String_Node_Str"" + function(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  assertEquals(expected,criteria.getQueryString());
  criteria.getResultList();
}","@Test @Category({NoDB2.class,NoMSSQL.class,NoOracle.class}) public void testSizeTransformWithImplicitParameterGroupBy2(){
  CriteriaBuilder<Long> criteria=cbf.create(em,Long.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"").selectCase().when(""String_Node_Str"").lt(2l).thenExpression(""String_Node_Str"").otherwiseExpression(""String_Node_Str"");
  final String expected=""String_Node_Str"" + function(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ groupByPathExpressions(""String_Node_Str"",""String_Node_Str"");
  assertEquals(expected,criteria.getQueryString());
  criteria.getResultList();
}",0.9328859060402684
168829,"@Test public void testGroupByFunction(){
  CriteriaBuilder<Document> cb=cbf.create(em,Document.class,""String_Node_Str"");
  cb.select(""String_Node_Str"").select(""String_Node_Str"",""String_Node_Str"").where(""String_Node_Str"").in(2013,2014,2015).groupBy(""String_Node_Str"").orderByAsc(""String_Node_Str"");
  String expected=""String_Node_Str"" + function(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ function(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ listParameter(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ groupBy(""String_Node_Str"",function(""String_Node_Str"",""String_Node_Str""),renderNullPrecedenceGroupBy(function(""String_Node_Str"",""String_Node_Str"")))+ ""String_Node_Str""+ renderNullPrecedence(""String_Node_Str"",function(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  assertEquals(expected,cb.getQueryString());
  cb.getResultList();
}","@Test public void testGroupByFunction(){
  CriteriaBuilder<Document> cb=cbf.create(em,Document.class,""String_Node_Str"");
  cb.select(""String_Node_Str"").select(""String_Node_Str"",""String_Node_Str"").where(""String_Node_Str"").in(2013,2014,2015).groupBy(""String_Node_Str"").orderByAsc(""String_Node_Str"");
  String expected=""String_Node_Str"" + function(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ function(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ listParameter(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ groupBy(""String_Node_Str"",groupByPathExpressions(function(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),renderNullPrecedenceGroupBy(groupByPathExpressions(function(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")))+ ""String_Node_Str""+ renderNullPrecedence(""String_Node_Str"",function(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  assertEquals(expected,cb.getQueryString());
  cb.getResultList();
}",0.8888888888888888
168830,"@Test public void testOrderByFunctionExpression(){
  PaginatedCriteriaBuilder<String> criteria=cbf.create(em,String.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"",""String_Node_Str"").orderByAsc(""String_Node_Str"").orderByAsc(""String_Node_Str"").page(0,1);
  String expectedQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + groupBy(""String_Node_Str"",renderNullPrecedenceGroupBy(""String_Node_Str""),renderNullPrecedenceGroupBy(""String_Node_Str"")) + ""String_Node_Str""+ renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(expectedQuery,criteria.getPageIdQueryString());
}","@Test public void testOrderByFunctionExpression(){
  PaginatedCriteriaBuilder<String> criteria=cbf.create(em,String.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"",""String_Node_Str"").orderByAsc(""String_Node_Str"").orderByAsc(""String_Node_Str"").page(0,1);
  String expectedQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + groupBy(""String_Node_Str"",renderNullPrecedenceGroupBy(groupByPathExpressions(""String_Node_Str"",""String_Node_Str"")),renderNullPrecedenceGroupBy(""String_Node_Str"")) + ""String_Node_Str""+ renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(expectedQuery,criteria.getPageIdQueryString());
}",0.9511568123393316
168831,"@Test @Category({NoDatanucleus.class}) public void testSelectMinimalTrimFunction(){
  CriteriaBuilder<String> cb=cbf.create(em,String.class).from(Document.class).select(""String_Node_Str"").select(""String_Node_Str"");
  assertEquals(""String_Node_Str"" + function(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",cb.getQueryString());
  cb.getResultList();
}","@Test @Category({NoDatanucleus.class}) public void testSelectMinimalTrimFunction(){
  CriteriaBuilder<String> cb=cbf.create(em,String.class).from(Document.class).select(""String_Node_Str"").select(""String_Node_Str"");
  assertEquals(""String_Node_Str"" + function(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ groupByPathExpressions(""String_Node_Str"",""String_Node_Str""),cb.getQueryString());
  cb.getResultList();
}",0.9289871944121072
168832,"public Set<Expression> extractGroupByExpressions(Expression expression){
  clear();
  collect=expression instanceof Predicate;
  if (expression.accept(this)) {
    return expressions;
  }
  return Collections.singleton(expression);
}","public Set<Expression> extractGroupByExpressions(Expression expression){
  clear();
  if (!dbmsDialect.supportsGroupByExpressionInHavingMatching()) {
    expression.accept(new VisitorAdapter(){
      @Override public void visit(      FunctionExpression expression){
        if (expression instanceof AggregateExpression || (treatSizeAsAggregate && com.blazebit.persistence.impl.util.ExpressionUtils.isSizeFunction(expression))) {
          return;
        }
        super.visit(expression);
      }
      @Override public void visit(      SubqueryExpression expression){
        GroupByExpressionGatheringVisitor.this.visit(expression);
      }
      @Override public void visit(      PathExpression expression){
        expressions.add(expression);
      }
      @Override public void visit(      TreatExpression expression){
        expressions.add(expression);
      }
      @Override public void visit(      PropertyExpression expression){
        expressions.add(expression);
      }
    }
);
    return expressions;
  }
  collect=expression instanceof Predicate;
  if (expression.accept(this)) {
    return expressions;
  }
  return Collections.singleton(expression);
}",0.3309659090909091
168833,"protected String[] appendSetOperands(StringBuilder sqlSb,SetOperationType setType,String operator,boolean isSubquery,List<String> operands,boolean hasOuterClause){
  boolean first=true;
  final boolean emulate=setType == SetOperationType.EXCEPT_ALL && !supportsExcept(true) || setType == SetOperationType.INTERSECT_ALL && !supportsIntersect(true);
  final String select=""String_Node_Str"";
  final String windowFunctionDummyOrderBy=getWindowFunctionDummyOrderBy();
  String[] aliases=null;
  if (needsAliasInSetOrderBy()) {
    int selectIndex=SqlUtils.indexOfSelect(operands.get(0));
    aliases=SqlUtils.getSelectItemAliases(operands.get(0),selectIndex);
  }
  for (  String operand : operands) {
    if (first) {
      first=false;
      if (emulate) {
        if (aliases == null) {
          int selectIndex=SqlUtils.indexOfSelect(operand);
          aliases=SqlUtils.getSelectItemAliases(operand,selectIndex);
        }
        sqlSb.append(select);
        for (int i=0; i < aliases.length; i++) {
          if (i != 0) {
            sqlSb.append(""String_Node_Str"");
          }
          sqlSb.append(aliases[i]);
        }
        sqlSb.append(""String_Node_Str"");
      }
    }
 else {
      sqlSb.append(""String_Node_Str"");
      sqlSb.append(operator);
      sqlSb.append(""String_Node_Str"");
    }
    if (emulate) {
      int selectIndex=SqlUtils.indexOfSelect(operand);
      String[] expressions=SqlUtils.getSelectItemExpressions(operand,selectIndex);
      sqlSb.append(select);
      sqlSb.append(""String_Node_Str"");
      for (int i=0; i < expressions.length; i++) {
        if (i != 0) {
          sqlSb.append(""String_Node_Str"");
        }
        sqlSb.append(expressions[i]);
      }
      if (windowFunctionDummyOrderBy != null) {
        sqlSb.append(windowFunctionDummyOrderBy);
      }
      sqlSb.append(""String_Node_Str"");
      sqlSb.append(operand,select.length(),operand.length());
    }
 else {
      boolean addWrapper=SqlUtils.indexOfOrderBy(operand) != -1;
      if (addWrapper) {
        sqlSb.append(""String_Node_Str"");
      }
      sqlSb.append(operand);
      if (addWrapper) {
        sqlSb.append(')');
      }
    }
  }
  if (emulate) {
    sqlSb.append(')');
  }
  return aliases;
}","protected String[] appendSetOperands(StringBuilder sqlSb,SetOperationType setType,String operator,boolean isSubquery,List<String> operands,boolean hasOuterClause){
  boolean first=true;
  final boolean emulate=setType == SetOperationType.EXCEPT_ALL && !supportsExcept(true) || setType == SetOperationType.INTERSECT_ALL && !supportsIntersect(true);
  final String select=""String_Node_Str"";
  final String windowFunctionDummyOrderBy=getWindowFunctionDummyOrderBy();
  String[] aliases=null;
  if (needsAliasInSetOrderBy()) {
    int selectIndex=SqlUtils.indexOfSelect(operands.get(0));
    aliases=SqlUtils.getSelectItemAliases(operands.get(0),selectIndex);
  }
  for (  String operand : operands) {
    boolean wasFirst=false;
    if (first) {
      first=false;
      wasFirst=true;
      if (emulate) {
        if (aliases == null) {
          int selectIndex=SqlUtils.indexOfSelect(operand);
          aliases=SqlUtils.getSelectItemAliases(operand,selectIndex);
        }
        sqlSb.append(select);
        for (int i=0; i < aliases.length; i++) {
          if (i != 0) {
            sqlSb.append(""String_Node_Str"");
          }
          sqlSb.append(aliases[i]);
        }
        sqlSb.append(""String_Node_Str"");
      }
    }
 else {
      sqlSb.append(""String_Node_Str"");
      sqlSb.append(operator);
      sqlSb.append(""String_Node_Str"");
    }
    if (emulate) {
      int selectIndex=SqlUtils.indexOfSelect(operand);
      String[] expressions=SqlUtils.getSelectItemExpressions(operand,selectIndex);
      sqlSb.append(select);
      sqlSb.append(""String_Node_Str"");
      for (int i=0; i < expressions.length; i++) {
        if (i != 0) {
          sqlSb.append(""String_Node_Str"");
        }
        sqlSb.append(expressions[i]);
      }
      if (windowFunctionDummyOrderBy != null) {
        sqlSb.append(windowFunctionDummyOrderBy);
      }
      sqlSb.append(""String_Node_Str"");
      sqlSb.append(operand,select.length(),operand.length());
    }
 else {
      boolean addWrapper=SqlUtils.indexOfOrderBy(operand) != -1;
      if (addWrapper) {
        sqlSb.append(""String_Node_Str"");
      }
      if ((addWrapper || wasFirst) && operand.charAt(0) == '(') {
        sqlSb.append(operand,1,operand.length() - 1);
      }
 else {
        sqlSb.append(operand);
      }
      if (addWrapper) {
        sqlSb.append(')');
      }
    }
  }
  if (emulate) {
    sqlSb.append(')');
  }
  return aliases;
}",0.9442171010122764
168834,"@Test public void testHavingAndCase(){
  CriteriaBuilder<Long> criteria=cbf.create(em,Long.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"");
  criteria.groupBy(""String_Node_Str"").havingOr().havingAnd().havingCase().whenAnd().and(""String_Node_Str"").eqExpression(""String_Node_Str"").and(""String_Node_Str"").ltExpression(""String_Node_Str"").thenExpression(""String_Node_Str"").when(""String_Node_Str"").eqExpression(""String_Node_Str"").thenExpression(""String_Node_Str"").otherwiseExpression(""String_Node_Str"").eqExpression(""String_Node_Str"").endAnd().endOr();
  String expected=""String_Node_Str"";
  assertEquals(expected,criteria.getQueryString());
  criteria.getResultList();
}","@Test public void testHavingAndCase(){
  CriteriaBuilder<Long> criteria=cbf.create(em,Long.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"");
  criteria.groupBy(""String_Node_Str"").havingOr().havingAnd().havingCase().whenAnd().and(""String_Node_Str"").eqExpression(""String_Node_Str"").and(""String_Node_Str"").ltExpression(""String_Node_Str"").thenExpression(""String_Node_Str"").when(""String_Node_Str"").eqExpression(""String_Node_Str"").thenExpression(""String_Node_Str"").otherwiseExpression(""String_Node_Str"").eqExpression(""String_Node_Str"").endAnd().endOr();
  String expected=""String_Node_Str"" + ""String_Node_Str"" + groupByPathExpressions(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str"";
  assertEquals(expected,criteria.getQueryString());
  criteria.getResultList();
}",0.9192795196797864
168835,"@Test public void testHavingSimpleCase(){
  CriteriaBuilder<Long> criteria=cbf.create(em,Long.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"");
  criteria.groupBy(""String_Node_Str"").havingSimpleCase(""String_Node_Str"").when(""String_Node_Str"",""String_Node_Str"").otherwise(""String_Node_Str"").eqExpression(""String_Node_Str"");
  String expected=""String_Node_Str"";
  assertEquals(expected,criteria.getQueryString());
  criteria.getResultList();
}","@Test public void testHavingSimpleCase(){
  CriteriaBuilder<Long> criteria=cbf.create(em,Long.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"");
  criteria.groupBy(""String_Node_Str"").havingSimpleCase(""String_Node_Str"").when(""String_Node_Str"",""String_Node_Str"").otherwise(""String_Node_Str"").eqExpression(""String_Node_Str"");
  String expected=""String_Node_Str"" + ""String_Node_Str"" + groupByPathExpressions(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str"";
  assertEquals(expected,criteria.getQueryString());
  criteria.getResultList();
}",0.8844317096466093
168836,"@Test public void testHavingCase1(){
  CriteriaBuilder<Long> criteria=cbf.create(em,Long.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"");
  criteria.groupBy(""String_Node_Str"").havingCase().when(""String_Node_Str"").geExpression(""String_Node_Str"").thenExpression(""String_Node_Str"").otherwiseExpression(""String_Node_Str"").eqExpression(""String_Node_Str"");
  String expected=""String_Node_Str"";
  assertEquals(expected,criteria.getQueryString());
  criteria.getResultList();
}","@Test public void testHavingCase1(){
  CriteriaBuilder<Long> criteria=cbf.create(em,Long.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"");
  criteria.groupBy(""String_Node_Str"").havingCase().when(""String_Node_Str"").geExpression(""String_Node_Str"").thenExpression(""String_Node_Str"").otherwiseExpression(""String_Node_Str"").eqExpression(""String_Node_Str"");
  String expected=""String_Node_Str"" + ""String_Node_Str"" + groupByPathExpressions(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str"";
  assertEquals(expected,criteria.getQueryString());
  criteria.getResultList();
}",0.8906955736224029
168837,"@Test public void testHavingOrSimpleCase(){
  CriteriaBuilder<Long> criteria=cbf.create(em,Long.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"");
  criteria.groupBy(""String_Node_Str"").havingOr().havingSimpleCase(""String_Node_Str"").when(""String_Node_Str"",""String_Node_Str"").when(""String_Node_Str"",""String_Node_Str"").otherwise(""String_Node_Str"").eqExpression(""String_Node_Str"").endOr();
  String expected=""String_Node_Str"";
  assertEquals(expected,criteria.getQueryString());
  criteria.getResultList();
}","@Test public void testHavingOrSimpleCase(){
  CriteriaBuilder<Long> criteria=cbf.create(em,Long.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"");
  criteria.groupBy(""String_Node_Str"").havingOr().havingSimpleCase(""String_Node_Str"").when(""String_Node_Str"",""String_Node_Str"").when(""String_Node_Str"",""String_Node_Str"").otherwise(""String_Node_Str"").eqExpression(""String_Node_Str"").endOr();
  String expected=""String_Node_Str"" + ""String_Node_Str"" + groupByPathExpressions(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str"";
  assertEquals(expected,criteria.getQueryString());
  criteria.getResultList();
}",0.896845694799659
168838,"@Test public void testHavingAndSimpleCase(){
  CriteriaBuilder<Long> criteria=cbf.create(em,Long.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"");
  criteria.groupBy(""String_Node_Str"").havingOr().havingAnd().havingSimpleCase(""String_Node_Str"").when(""String_Node_Str"",""String_Node_Str"").when(""String_Node_Str"",""String_Node_Str"").otherwise(""String_Node_Str"").eqExpression(""String_Node_Str"").endAnd().endOr();
  String expected=""String_Node_Str"";
  assertEquals(expected,criteria.getQueryString());
  criteria.getResultList();
}","@Test public void testHavingAndSimpleCase(){
  CriteriaBuilder<Long> criteria=cbf.create(em,Long.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"");
  criteria.groupBy(""String_Node_Str"").havingOr().havingAnd().havingSimpleCase(""String_Node_Str"").when(""String_Node_Str"",""String_Node_Str"").when(""String_Node_Str"",""String_Node_Str"").otherwise(""String_Node_Str"").eqExpression(""String_Node_Str"").endAnd().endOr();
  String expected=""String_Node_Str"" + ""String_Node_Str"" + groupByPathExpressions(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str"";
  assertEquals(expected,criteria.getQueryString());
  criteria.getResultList();
}",0.9005751848808545
168839,"@Test @Category(NoMySQL.class) public void testHavingPropertyExpression(){
  CriteriaBuilder<Long> criteria=cbf.create(em,Long.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"");
  criteria.groupBy(""String_Node_Str"").having(""String_Node_Str"").gt(0L);
  assertEquals(""String_Node_Str"",criteria.getQueryString());
  criteria.getResultList();
}","@Test @Category(NoMySQL.class) public void testHavingPropertyExpression(){
  CriteriaBuilder<Long> criteria=cbf.create(em,Long.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"");
  criteria.groupBy(""String_Node_Str"").having(""String_Node_Str"").gt(0L);
  assertEquals(""String_Node_Str"" + groupByPathExpressions(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",criteria.getQueryString());
  criteria.getResultList();
}",0.8982630272952854
168840,"@Test public void testHavingOrCase(){
  CriteriaBuilder<Long> criteria=cbf.create(em,Long.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"");
  criteria.groupBy(""String_Node_Str"").havingOr().havingCase().whenAnd().and(""String_Node_Str"").eqExpression(""String_Node_Str"").and(""String_Node_Str"").ltExpression(""String_Node_Str"").thenExpression(""String_Node_Str"").when(""String_Node_Str"").eqExpression(""String_Node_Str"").thenExpression(""String_Node_Str"").otherwiseExpression(""String_Node_Str"").eqExpression(""String_Node_Str"").endOr();
  String expected=""String_Node_Str"";
  assertEquals(expected,criteria.getQueryString());
  criteria.getResultList();
}","@Test public void testHavingOrCase(){
  CriteriaBuilder<Long> criteria=cbf.create(em,Long.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"");
  criteria.groupBy(""String_Node_Str"").havingOr().havingCase().whenAnd().and(""String_Node_Str"").eqExpression(""String_Node_Str"").and(""String_Node_Str"").ltExpression(""String_Node_Str"").thenExpression(""String_Node_Str"").when(""String_Node_Str"").eqExpression(""String_Node_Str"").thenExpression(""String_Node_Str"").otherwiseExpression(""String_Node_Str"").eqExpression(""String_Node_Str"").endOr();
  String expected=""String_Node_Str"" + ""String_Node_Str"" + groupByPathExpressions(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str"";
  assertEquals(expected,criteria.getQueryString());
  criteria.getResultList();
}",0.9168384879725086
168841,"@Test public void testSelectAggregateEntitySelect(){
  CriteriaBuilder<Tuple> cb=cbf.create(em,Tuple.class).from(Document.class,""String_Node_Str"").selectCase().when(""String_Node_Str"").gtExpression(""String_Node_Str"").thenExpression(""String_Node_Str"").otherwiseExpression(""String_Node_Str"").select(""String_Node_Str"").orderByDesc(""String_Node_Str"");
  String objectQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + groupBy(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",renderNullPrecedenceGroupBy(""String_Node_Str"")) + ""String_Node_Str""+ renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(objectQuery,cb.getQueryString());
  cb.getResultList();
}","@Test public void testSelectAggregateEntitySelect(){
  CriteriaBuilder<Tuple> cb=cbf.create(em,Tuple.class).from(Document.class,""String_Node_Str"").selectCase().when(""String_Node_Str"").gtExpression(""String_Node_Str"").thenExpression(""String_Node_Str"").otherwiseExpression(""String_Node_Str"").select(""String_Node_Str"").orderByDesc(""String_Node_Str"");
  String objectQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + groupBy(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",renderNullPrecedenceGroupBy(""String_Node_Str"")) + ""String_Node_Str""+ renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(objectQuery,cb.getQueryString());
  cb.getResultList();
}",0.9880478087649402
168842,"@Test public void testSelectNestedAggregatePaginated(){
  PaginatedCriteriaBuilder<Tuple> cb=cbf.create(em,Tuple.class).from(Document.class,""String_Node_Str"").selectCase().when(""String_Node_Str"").gtExpression(""String_Node_Str"").thenExpression(""String_Node_Str"").otherwiseExpression(""String_Node_Str"").select(""String_Node_Str"").orderByDesc(""String_Node_Str"").page(0,10);
  String countQuery=""String_Node_Str"" + countPaginated(""String_Node_Str"",false) + ""String_Node_Str"";
  String idQuery=""String_Node_Str"" + groupBy(""String_Node_Str"",renderNullPrecedenceGroupBy(""String_Node_Str"")) + ""String_Node_Str""+ renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String objectQuery=""String_Node_Str"" + ""String_Node_Str"" + groupBy(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",renderNullPrecedenceGroupBy(""String_Node_Str"")) + ""String_Node_Str""+ renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(countQuery,cb.getPageCountQueryString());
  assertEquals(idQuery,cb.getPageIdQueryString());
  assertEquals(objectQuery,cb.getQueryString());
  cb.getResultList();
}","@Test public void testSelectNestedAggregatePaginated(){
  PaginatedCriteriaBuilder<Tuple> cb=cbf.create(em,Tuple.class).from(Document.class,""String_Node_Str"").selectCase().when(""String_Node_Str"").gtExpression(""String_Node_Str"").thenExpression(""String_Node_Str"").otherwiseExpression(""String_Node_Str"").select(""String_Node_Str"").orderByDesc(""String_Node_Str"").page(0,10);
  String countQuery=""String_Node_Str"" + countPaginated(""String_Node_Str"",false) + ""String_Node_Str"";
  String idQuery=""String_Node_Str"" + groupBy(""String_Node_Str"",renderNullPrecedenceGroupBy(""String_Node_Str"")) + ""String_Node_Str""+ renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String objectQuery=""String_Node_Str"" + ""String_Node_Str"" + groupBy(""String_Node_Str"",""String_Node_Str"",renderNullPrecedenceGroupBy(""String_Node_Str"")) + ""String_Node_Str""+ renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(countQuery,cb.getPageCountQueryString());
  assertEquals(idQuery,cb.getPageIdQueryString());
  assertEquals(objectQuery,cb.getQueryString());
  cb.getResultList();
}",0.9919642857142856
168843,"@Test public void testSelectNestedAggregate(){
  CriteriaBuilder<Tuple> cb=cbf.create(em,Tuple.class).from(Document.class,""String_Node_Str"").selectCase().when(""String_Node_Str"").gtExpression(""String_Node_Str"").thenExpression(""String_Node_Str"").otherwiseExpression(""String_Node_Str"").select(""String_Node_Str"").orderByDesc(""String_Node_Str"");
  String objectQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + groupBy(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",renderNullPrecedenceGroupBy(""String_Node_Str"")) + ""String_Node_Str""+ renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(objectQuery,cb.getQueryString());
  cb.getResultList();
}","@Test public void testSelectNestedAggregate(){
  CriteriaBuilder<Tuple> cb=cbf.create(em,Tuple.class).from(Document.class,""String_Node_Str"").selectCase().when(""String_Node_Str"").gtExpression(""String_Node_Str"").thenExpression(""String_Node_Str"").otherwiseExpression(""String_Node_Str"").select(""String_Node_Str"").orderByDesc(""String_Node_Str"");
  String objectQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + groupBy(""String_Node_Str"",""String_Node_Str"",renderNullPrecedenceGroupBy(""String_Node_Str"")) + ""String_Node_Str""+ renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(objectQuery,cb.getQueryString());
  cb.getResultList();
}",0.987012987012987
168844,"@Test public void testSelectAggregateEntitySelectPaginated(){
  PaginatedCriteriaBuilder<Tuple> cb=cbf.create(em,Tuple.class).from(Document.class,""String_Node_Str"").selectCase().when(""String_Node_Str"").gtExpression(""String_Node_Str"").thenExpression(""String_Node_Str"").otherwiseExpression(""String_Node_Str"").select(""String_Node_Str"").orderByDesc(""String_Node_Str"").page(0,10);
  String countQuery=""String_Node_Str"" + countPaginated(""String_Node_Str"",false) + ""String_Node_Str"";
  String idQuery=""String_Node_Str"" + groupBy(""String_Node_Str"",renderNullPrecedenceGroupBy(""String_Node_Str"")) + ""String_Node_Str""+ renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String objectQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + groupBy(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",renderNullPrecedenceGroupBy(""String_Node_Str"")) + ""String_Node_Str""+ renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(countQuery,cb.getPageCountQueryString());
  assertEquals(idQuery,cb.getPageIdQueryString());
  assertEquals(objectQuery,cb.getQueryString());
  cb.getResultList();
}","@Test public void testSelectAggregateEntitySelectPaginated(){
  PaginatedCriteriaBuilder<Tuple> cb=cbf.create(em,Tuple.class).from(Document.class,""String_Node_Str"").selectCase().when(""String_Node_Str"").gtExpression(""String_Node_Str"").thenExpression(""String_Node_Str"").otherwiseExpression(""String_Node_Str"").select(""String_Node_Str"").orderByDesc(""String_Node_Str"").page(0,10);
  String countQuery=""String_Node_Str"" + countPaginated(""String_Node_Str"",false) + ""String_Node_Str"";
  String idQuery=""String_Node_Str"" + groupBy(""String_Node_Str"",renderNullPrecedenceGroupBy(""String_Node_Str"")) + ""String_Node_Str""+ renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String objectQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + groupBy(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",renderNullPrecedenceGroupBy(""String_Node_Str"")) + ""String_Node_Str""+ renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(countQuery,cb.getPageCountQueryString());
  assertEquals(idQuery,cb.getPageIdQueryString());
  assertEquals(objectQuery,cb.getQueryString());
  cb.getResultList();
}",0.9925
168845,"@Override public String[] getColumnTypes(EntityManager em,EntityType<?> entityType,String attributeName){
  SessionImplementor session=em.unwrap(SessionImplementor.class);
  SessionFactoryImplementor sfi=session.getFactory();
  AbstractEntityPersister entityPersister=(AbstractEntityPersister)sfi.getClassMetadata(entityType.getJavaType());
  String[] columnNames=entityPersister.getPropertyColumnNames(attributeName);
  Database database=sfi.getServiceRegistry().locateServiceBinding(Database.class).getService();
  Table table=database.getTable(entityPersister.getTableName());
  String[] columnTypes=new String[columnNames.length];
  for (int i=0; i < columnNames.length; i++) {
    Column column=table.getColumn(new Column(columnNames[i]));
    columnTypes[i]=column.getSqlType();
  }
  return columnTypes;
}","@Override public String[] getColumnTypes(EntityManager em,EntityType<?> entityType,String attributeName){
  SessionImplementor session=em.unwrap(SessionImplementor.class);
  SessionFactoryImplementor sfi=session.getFactory();
  AbstractEntityPersister entityPersister=(AbstractEntityPersister)sfi.getClassMetadata(entityType.getJavaType());
  String[] columnNames=entityPersister.getPropertyColumnNames(attributeName);
  Database database=sfi.getServiceRegistry().locateServiceBinding(Database.class).getService();
  Table[] tables;
  if (entityPersister instanceof JoinedSubclassEntityPersister) {
    tables=new Table[((JoinedSubclassEntityPersister)entityPersister).getTableSpan()];
    for (int i=0; i < tables.length; i++) {
      tables[i]=database.getTable(entityPersister.getSubclassTableName(i));
    }
  }
 else {
    tables=new Table[]{database.getTable(entityPersister.getTableName())};
  }
  String[] columnTypes=new String[columnNames.length];
  for (int i=0; i < columnNames.length; i++) {
    Column column=null;
    for (int j=0; j < tables.length; j++) {
      column=tables[j].getColumn(new Column(columnNames[i]));
      if (column != null) {
        break;
      }
    }
    if (column == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + columnNames[i] + ""String_Node_Str""+ entityType.getName());
    }
    columnTypes[i]=column.getSqlType();
  }
  return columnTypes;
}",0.6585695006747638
168846,"@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public FinalSetOperationCTECriteriaBuilder<T> endSet(){
  subListener.verifyBuilderEnded();
  listener.onBuilderEnded(this);
  prepareAndCheck();
  return (FinalSetOperationCTECriteriaBuilder<T>)(FinalSetOperationCTECriteriaBuilder)finalSetOperationBuilder;
}","@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public FinalSetOperationCTECriteriaBuilder<T> endSet(){
  subListener.verifyBuilderEnded();
  listener.onBuilderEnded(this);
  if (!isEmpty()) {
    prepareAndCheck();
  }
  return (FinalSetOperationCTECriteriaBuilder<T>)(FinalSetOperationCTECriteriaBuilder)finalSetOperationBuilder;
}",0.9616519174041298
168847,"@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public FinalSetOperationCriteriaBuilder<T> endSet(){
  subListener.verifyBuilderEnded();
  listener.onBuilderEnded(this);
  prepareAndCheck();
  return (FinalSetOperationCriteriaBuilder<T>)(FinalSetOperationCriteriaBuilder)finalSetOperationBuilder;
}","@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public FinalSetOperationCriteriaBuilder<T> endSet(){
  subListener.verifyBuilderEnded();
  listener.onBuilderEnded(this);
  if (!isEmpty()) {
    prepareAndCheck();
  }
  return (FinalSetOperationCriteriaBuilder<T>)(FinalSetOperationCriteriaBuilder)finalSetOperationBuilder;
}",0.9606060606060606
168848,"@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public FinalSetOperationSubqueryBuilder<T> endSet(){
  subListener.verifySubqueryBuilderEnded();
  listener.onBuilderEnded(this);
  prepareAndCheck();
  return (FinalSetOperationSubqueryBuilder<T>)(FinalSetOperationSubqueryBuilder)finalSetOperationBuilder;
}","@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public FinalSetOperationSubqueryBuilder<T> endSet(){
  subListener.verifySubqueryBuilderEnded();
  listener.onBuilderEnded(this);
  if (!isEmpty()) {
    prepareAndCheck();
  }
  return (FinalSetOperationSubqueryBuilder<T>)(FinalSetOperationSubqueryBuilder)finalSetOperationBuilder;
}",0.9615384615384616
168849,"public void bind(Query query,Collection<Object> value){
  Iterator<Object> iterator=value.iterator();
  for (int i=0; i < parameterNames.length; i++) {
    if (iterator.hasNext()) {
      Object element=iterator.next();
      for (int j=0; j < parameterNames[i].length; j++) {
        query.setParameter(parameterNames[i][j],pathExpressions[j].getValue(element));
      }
    }
 else {
      for (int j=0; j < parameterNames[i].length; j++) {
        query.setParameter(parameterNames[i][j],null);
      }
    }
  }
}","public void bind(Query query,Collection<Object> value){
  Iterator<Object> iterator=value.iterator();
  for (int i=0; i < parameterNames.length; i++) {
    Object element;
    if (iterator.hasNext() && (element=iterator.next()) != null) {
      for (int j=0; j < parameterNames[i].length; j++) {
        query.setParameter(parameterNames[i][j],pathExpressions[j].getValue(element));
      }
    }
 else {
      for (int j=0; j < parameterNames[i].length; j++) {
        query.setParameter(parameterNames[i][j],null);
      }
    }
  }
}",0.919278252611586
168850,"public void setParameters(Query query,Object viewRootId){
  if (viewRootExpression != null) {
    query.setParameter(viewRootExpression,viewRootId);
    return;
  }
  if (viewRootParamName != null) {
    if (viewRootId instanceof Collection) {
      Collection<Object> paramCollection=(Collection<Object>)viewRootId;
      List<Object> viewRootEntities=new ArrayList<Object>(paramCollection.size());
      for (      Object paramValue : paramCollection) {
        if (paramValue != null) {
          viewRootEntities.add(criteriaBuilder.getEntityManager().getReference(viewRootEntityType,paramValue));
        }
      }
      query.setParameter(viewRootParamName,viewRootEntities);
    }
 else {
      Object viewRootEntity=criteriaBuilder.getEntityManager().getReference(viewRootEntityType,viewRootId);
      query.setParameter(viewRootParamName,viewRootEntity);
    }
  }
  if (viewRootIdParamName != null) {
    query.setParameter(viewRootIdParamName,viewRootId);
  }
}","public void setParameters(Query query,Object viewRootId){
  if (viewRootExpression != null) {
    query.setParameter(viewRootExpression,viewRootId);
    return;
  }
  if (viewRootParamName != null) {
    EntityManager em=criteriaBuilder.getEntityManager();
    if (viewRootId instanceof Collection) {
      Collection<Object> paramCollection=(Collection<Object>)viewRootId;
      List<Object> viewRootEntities=new ArrayList<Object>(paramCollection.size());
      for (      Object paramValue : paramCollection) {
        if (paramValue != null) {
          viewRootEntities.add(em.getReference(viewRootEntityType,paramValue));
        }
      }
      query.setParameter(viewRootParamName,viewRootEntities);
    }
 else {
      Object viewRootEntity=em.getReference(viewRootEntityType,viewRootId);
      query.setParameter(viewRootParamName,viewRootEntity);
    }
  }
  if (viewRootIdParamName != null) {
    query.setParameter(viewRootIdParamName,viewRootId);
  }
}",0.9334021683014972
168851,"@Override public List<Object[]> transform(List<Object[]> tuples){
  FixedArrayList correlationParams=new FixedArrayList(batchSize);
  int tupleOffset=batchSize > 1 ? 1 : 0;
  Iterator<Object[]> tupleListIter=tuples.iterator();
  final String correlationRoot=applyAndGetCorrelationRoot(expectBatchCorrelationValues);
  if (viewRootJpqlMacro.usesViewRoot()) {
    int totalSize=tuples.size();
    Map<Object,Map<Object,TuplePromise>> viewRoots=new HashMap<Object,Map<Object,TuplePromise>>(totalSize);
    Map<Object,Map<Object,TuplePromise>> correlationValues=new HashMap<Object,Map<Object,TuplePromise>>(totalSize);
    while (tupleListIter.hasNext()) {
      Object[] tuple=tupleListIter.next();
      Object viewRootKey=tuple[0];
      Object correlationValueKey=tuple[startIndex];
      Map<Object,TuplePromise> viewRootCorrelationValues=viewRoots.get(viewRootKey);
      if (viewRootCorrelationValues == null) {
        viewRootCorrelationValues=new HashMap<Object,TuplePromise>();
        viewRoots.put(viewRootKey,viewRootCorrelationValues);
      }
      TuplePromise viewRootPromise=viewRootCorrelationValues.get(correlationValueKey);
      if (viewRootPromise == null) {
        viewRootPromise=new TuplePromise(startIndex);
        viewRootCorrelationValues.put(correlationValueKey,viewRootPromise);
      }
      viewRootPromise.add(tuple);
      Map<Object,TuplePromise> correlationValueViewRoots=correlationValues.get(correlationValueKey);
      if (correlationValueViewRoots == null) {
        correlationValueViewRoots=new HashMap<Object,TuplePromise>();
        correlationValues.put(correlationValueKey,correlationValueViewRoots);
      }
      TuplePromise correlationValuePromise=correlationValueViewRoots.get(viewRootKey);
      if (correlationValuePromise == null) {
        correlationValuePromise=new TuplePromise(startIndex);
        correlationValueViewRoots.put(viewRootKey,correlationValuePromise);
      }
      correlationValuePromise.add(tuple);
    }
    boolean batchCorrelationValues=viewRoots.size() <= correlationValues.size();
    FixedArrayList viewRootIds=new FixedArrayList(batchSize);
    if (batchCorrelationValues) {
      if (batchSize > 1) {
        if (!expectBatchCorrelationValues) {
          applyAndGetCorrelationRoot(true);
        }
        criteriaBuilder.select(correlationKeyExpression);
      }
      correlator.finish(criteriaBuilder,entityViewConfiguration,tupleOffset,correlationRoot);
      query=criteriaBuilder.getQuery();
      for (      Map.Entry<Object,Map<Object,TuplePromise>> batchEntry : viewRoots.entrySet()) {
        Map<Object,TuplePromise> batchValues=batchEntry.getValue();
        for (        Map.Entry<Object,TuplePromise> batchValueEntry : batchValues.entrySet()) {
          if (correlationBasisEntity != null) {
            correlationParams.add(criteriaBuilder.getEntityManager().getReference(correlationBasisEntity,batchValueEntry.getKey()));
          }
 else {
            correlationParams.add(batchValueEntry.getKey());
          }
          if (batchSize == correlationParams.realSize()) {
            viewRootIds.add(batchEntry.getKey());
            batchLoad(batchValues,correlationParams,viewRootIds,correlationParams.get(0),true);
          }
        }
        if (correlationParams.realSize() > 0) {
          viewRootIds.add(batchEntry.getKey());
          batchLoad(batchValues,correlationParams,viewRootIds,null,true);
        }
      }
      fillDefaultValues(viewRoots);
    }
 else {
      if (batchSize > 1) {
        if (expectBatchCorrelationValues) {
          applyAndGetCorrelationRoot(false);
        }
        criteriaBuilder.select(correlationKeyExpression);
      }
      correlator.finish(criteriaBuilder,entityViewConfiguration,tupleOffset,correlationRoot);
      query=criteriaBuilder.getQuery();
      for (      Map.Entry<Object,Map<Object,TuplePromise>> batchEntry : correlationValues.entrySet()) {
        Map<Object,TuplePromise> batchValues=batchEntry.getValue();
        for (        Map.Entry<Object,TuplePromise> batchValueEntry : batchValues.entrySet()) {
          viewRootIds.add(batchValueEntry.getKey());
          if (batchSize == viewRootIds.realSize()) {
            if (correlationBasisEntity != null) {
              correlationParams.add(criteriaBuilder.getEntityManager().getReference(correlationBasisEntity,batchEntry.getKey()));
            }
 else {
              correlationParams.add(batchEntry.getKey());
            }
            batchLoad(batchValues,correlationParams,viewRootIds,viewRootIds.get(0),false);
          }
        }
        if (viewRootIds.realSize() > 0) {
          if (correlationBasisEntity != null) {
            correlationParams.add(criteriaBuilder.getEntityManager().getReference(correlationBasisEntity,batchEntry.getKey()));
          }
 else {
            correlationParams.add(batchEntry.getKey());
          }
          batchLoad(batchValues,correlationParams,viewRootIds,null,false);
        }
      }
      fillDefaultValues(correlationValues);
    }
  }
 else {
    if (batchSize > 1) {
      if (!expectBatchCorrelationValues) {
        applyAndGetCorrelationRoot(true);
      }
      criteriaBuilder.select(correlationKeyExpression);
    }
    correlator.finish(criteriaBuilder,entityViewConfiguration,tupleOffset,correlationRoot);
    query=criteriaBuilder.getQuery();
    Map<Object,TuplePromise> correlationValues=new HashMap<Object,TuplePromise>(tuples.size());
    while (tupleListIter.hasNext()) {
      Object[] tuple=tupleListIter.next();
      Object correlationValue=tuple[startIndex];
      TuplePromise tupleIndexValue=correlationValues.get(correlationValue);
      if (tupleIndexValue == null) {
        tupleIndexValue=new TuplePromise(startIndex);
        tupleIndexValue.add(tuple);
        correlationValues.put(correlationValue,tupleIndexValue);
        if (correlationBasisEntity != null) {
          correlationParams.add(criteriaBuilder.getEntityManager().getReference(correlationBasisEntity,tuple[startIndex]));
        }
 else {
          correlationParams.add(tuple[startIndex]);
        }
        if (batchSize == correlationParams.realSize()) {
          batchLoad(correlationValues,correlationParams,null,correlationParams.get(0),batchSize > 1);
        }
      }
 else {
        tupleIndexValue.add(tuple);
      }
    }
    if (correlationParams.realSize() > 0) {
      batchLoad(correlationValues,correlationParams,null,null,correlationParams.realSize() > 1);
    }
    fillDefaultValues(Collections.singletonMap(null,correlationValues));
  }
  return tuples;
}","@Override public List<Object[]> transform(List<Object[]> tuples){
  FixedArrayList correlationParams=new FixedArrayList(batchSize);
  int tupleOffset=batchSize > 1 ? 1 : 0;
  Iterator<Object[]> tupleListIter=tuples.iterator();
  final String correlationRoot=applyAndGetCorrelationRoot(expectBatchCorrelationValues);
  EntityManager em=criteriaBuilder.getEntityManager();
  if (viewRootJpqlMacro.usesViewRoot()) {
    int totalSize=tuples.size();
    Map<Object,Map<Object,TuplePromise>> viewRoots=new HashMap<Object,Map<Object,TuplePromise>>(totalSize);
    Map<Object,Map<Object,TuplePromise>> correlationValues=new HashMap<Object,Map<Object,TuplePromise>>(totalSize);
    while (tupleListIter.hasNext()) {
      Object[] tuple=tupleListIter.next();
      Object viewRootKey=tuple[0];
      Object correlationValueKey=tuple[startIndex];
      Map<Object,TuplePromise> viewRootCorrelationValues=viewRoots.get(viewRootKey);
      if (viewRootCorrelationValues == null) {
        viewRootCorrelationValues=new HashMap<Object,TuplePromise>();
        viewRoots.put(viewRootKey,viewRootCorrelationValues);
      }
      TuplePromise viewRootPromise=viewRootCorrelationValues.get(correlationValueKey);
      if (viewRootPromise == null) {
        viewRootPromise=new TuplePromise(startIndex);
        viewRootCorrelationValues.put(correlationValueKey,viewRootPromise);
      }
      viewRootPromise.add(tuple);
      Map<Object,TuplePromise> correlationValueViewRoots=correlationValues.get(correlationValueKey);
      if (correlationValueViewRoots == null) {
        correlationValueViewRoots=new HashMap<Object,TuplePromise>();
        correlationValues.put(correlationValueKey,correlationValueViewRoots);
      }
      TuplePromise correlationValuePromise=correlationValueViewRoots.get(viewRootKey);
      if (correlationValuePromise == null) {
        correlationValuePromise=new TuplePromise(startIndex);
        correlationValueViewRoots.put(viewRootKey,correlationValuePromise);
      }
      correlationValuePromise.add(tuple);
    }
    boolean batchCorrelationValues=viewRoots.size() <= correlationValues.size();
    FixedArrayList viewRootIds=new FixedArrayList(batchSize);
    if (batchCorrelationValues) {
      if (batchSize > 1) {
        if (!expectBatchCorrelationValues) {
          applyAndGetCorrelationRoot(true);
        }
        criteriaBuilder.select(correlationKeyExpression);
      }
      correlator.finish(criteriaBuilder,entityViewConfiguration,tupleOffset,correlationRoot);
      query=criteriaBuilder.getQuery();
      for (      Map.Entry<Object,Map<Object,TuplePromise>> batchEntry : viewRoots.entrySet()) {
        Map<Object,TuplePromise> batchValues=batchEntry.getValue();
        for (        Map.Entry<Object,TuplePromise> batchValueEntry : batchValues.entrySet()) {
          if (correlationBasisEntity != null) {
            correlationParams.add(em.getReference(correlationBasisEntity,batchValueEntry.getKey()));
          }
 else {
            correlationParams.add(batchValueEntry.getKey());
          }
          if (batchSize == correlationParams.realSize()) {
            viewRootIds.add(batchEntry.getKey());
            batchLoad(batchValues,correlationParams,viewRootIds,correlationParams.get(0),true);
          }
        }
        if (correlationParams.realSize() > 0) {
          viewRootIds.add(batchEntry.getKey());
          batchLoad(batchValues,correlationParams,viewRootIds,null,true);
        }
      }
      fillDefaultValues(viewRoots);
    }
 else {
      if (batchSize > 1) {
        if (expectBatchCorrelationValues) {
          applyAndGetCorrelationRoot(false);
        }
        criteriaBuilder.select(correlationKeyExpression);
      }
      correlator.finish(criteriaBuilder,entityViewConfiguration,tupleOffset,correlationRoot);
      query=criteriaBuilder.getQuery();
      for (      Map.Entry<Object,Map<Object,TuplePromise>> batchEntry : correlationValues.entrySet()) {
        Map<Object,TuplePromise> batchValues=batchEntry.getValue();
        for (        Map.Entry<Object,TuplePromise> batchValueEntry : batchValues.entrySet()) {
          if (viewRootJpqlMacro.usesViewRootEntityParameter()) {
            viewRootIds.add(em.getReference(viewRootType.getEntityClass(),batchValueEntry.getKey()));
          }
 else {
            viewRootIds.add(batchValueEntry.getKey());
          }
          if (batchSize == viewRootIds.realSize()) {
            if (correlationBasisEntity != null) {
              correlationParams.add(em.getReference(correlationBasisEntity,batchEntry.getKey()));
            }
 else {
              correlationParams.add(batchEntry.getKey());
            }
            batchLoad(batchValues,correlationParams,viewRootIds,viewRootIds.get(0),false);
          }
        }
        if (viewRootIds.realSize() > 0) {
          if (correlationBasisEntity != null) {
            correlationParams.add(em.getReference(correlationBasisEntity,batchEntry.getKey()));
          }
 else {
            correlationParams.add(batchEntry.getKey());
          }
          batchLoad(batchValues,correlationParams,viewRootIds,null,false);
        }
      }
      fillDefaultValues(correlationValues);
    }
  }
 else {
    if (batchSize > 1) {
      if (!expectBatchCorrelationValues) {
        applyAndGetCorrelationRoot(true);
      }
      criteriaBuilder.select(correlationKeyExpression);
    }
    correlator.finish(criteriaBuilder,entityViewConfiguration,tupleOffset,correlationRoot);
    query=criteriaBuilder.getQuery();
    Map<Object,TuplePromise> correlationValues=new HashMap<Object,TuplePromise>(tuples.size());
    while (tupleListIter.hasNext()) {
      Object[] tuple=tupleListIter.next();
      Object correlationValue=tuple[startIndex];
      TuplePromise tupleIndexValue=correlationValues.get(correlationValue);
      if (tupleIndexValue == null) {
        tupleIndexValue=new TuplePromise(startIndex);
        tupleIndexValue.add(tuple);
        correlationValues.put(correlationValue,tupleIndexValue);
        if (correlationBasisEntity != null) {
          correlationParams.add(em.getReference(correlationBasisEntity,tuple[startIndex]));
        }
 else {
          correlationParams.add(tuple[startIndex]);
        }
        if (batchSize == correlationParams.realSize()) {
          batchLoad(correlationValues,correlationParams,null,correlationParams.get(0),batchSize > 1);
        }
      }
 else {
        tupleIndexValue.add(tuple);
      }
    }
    if (correlationParams.realSize() > 0) {
      batchLoad(correlationValues,correlationParams,null,null,correlationParams.realSize() > 1);
    }
    fillDefaultValues(Collections.singletonMap(null,correlationValues));
  }
  return tuples;
}",0.9696741098370548
168852,"JoinManager(MainQuery mainQuery,ResolvingQueryGenerator queryGenerator,AliasManager aliasManager,JoinManager parent,ExpressionFactory expressionFactory){
  super(queryGenerator,mainQuery.parameterManager,null);
  this.mainQuery=mainQuery;
  this.aliasManager=aliasManager;
  this.metamodel=mainQuery.metamodel;
  this.parent=parent;
  this.joinRestrictionKeyword=""String_Node_Str"" + mainQuery.jpaProvider.getOnClause() + ""String_Node_Str"";
  this.joinOnBuilderListener=new JoinOnBuilderEndedListener();
  this.subqueryInitFactory=new SubqueryInitiatorFactory(mainQuery,aliasManager,this);
  this.expressionFactory=expressionFactory;
}","JoinManager(MainQuery mainQuery,ResolvingQueryGenerator queryGenerator,AliasManager aliasManager,JoinManager parent,ExpressionFactory expressionFactory,JpaProvider jpaProvider){
  super(queryGenerator,mainQuery.parameterManager,null);
  this.mainQuery=mainQuery;
  this.aliasManager=aliasManager;
  this.metamodel=mainQuery.metamodel;
  this.parent=parent;
  this.joinRestrictionKeyword=""String_Node_Str"" + mainQuery.jpaProvider.getOnClause() + ""String_Node_Str"";
  this.joinOnBuilderListener=new JoinOnBuilderEndedListener();
  this.subqueryInitFactory=new SubqueryInitiatorFactory(mainQuery,aliasManager,this);
  this.expressionFactory=expressionFactory;
  this.jpaProvider=jpaProvider;
}",0.9577039274924471
168853,"@Override public EntityManagerFactory registerFunctions(EntityManagerFactory entityManagerFactory,Map<String,JpqlFunctionGroup> dbmsFunctions){
  DatabasePlatform platform=entityManagerFactory.unwrap(JpaEntityManagerFactory.class).getDatabaseSession().getPlatform();
  @SuppressWarnings(""String_Node_Str"") Map<Integer,ExpressionOperator> platformOperators=platform.getPlatformOperators();
  String dbms;
  if (platform.isMySQL()) {
    dbms=""String_Node_Str"";
  }
 else   if (platform.isOracle()) {
    dbms=""String_Node_Str"";
  }
 else   if (platform.isSQLServer()) {
    dbms=""String_Node_Str"";
  }
 else   if (platform.isSybase()) {
    dbms=""String_Node_Str"";
  }
 else {
    dbms=null;
  }
  for (  Map.Entry<String,JpqlFunctionGroup> functionEntry : dbmsFunctions.entrySet()) {
    String functionName=functionEntry.getKey();
    JpqlFunctionGroup dbmsFunctionMap=functionEntry.getValue();
    JpqlFunction function=dbmsFunctionMap.get(dbms);
    if (function == null) {
      function=dbmsFunctionMap.get(null);
    }
    if (function == null) {
      LOG.warning(""String_Node_Str"" + functionName + ""String_Node_Str""+ dbms+ ""String_Node_Str"");
    }
 else {
      addFunction(platformOperators,functionName,function);
    }
  }
  return entityManagerFactory;
}","@Override public EntityManagerFactory registerFunctions(EntityManagerFactory entityManagerFactory,Map<String,JpqlFunctionGroup> dbmsFunctions){
  DatabasePlatform platform=entityManagerFactory.unwrap(JpaEntityManagerFactory.class).getDatabaseSession().getPlatform();
  @SuppressWarnings(""String_Node_Str"") Map<Integer,ExpressionOperator> platformOperators=platform.getPlatformOperators();
  String dbms;
  final String countStarName=""String_Node_Str"";
  if (!dbmsFunctions.containsKey(countStarName)) {
    JpqlFunctionGroup jpqlFunctionGroup=new JpqlFunctionGroup(countStarName,true);
    jpqlFunctionGroup.add(null,new CountStarFunction());
    dbmsFunctions.put(countStarName,jpqlFunctionGroup);
  }
  if (platform.isMySQL()) {
    dbms=""String_Node_Str"";
  }
 else   if (platform.isOracle()) {
    dbms=""String_Node_Str"";
  }
 else   if (platform.isSQLServer()) {
    dbms=""String_Node_Str"";
  }
 else   if (platform.isSybase()) {
    dbms=""String_Node_Str"";
  }
 else {
    dbms=null;
  }
  for (  Map.Entry<String,JpqlFunctionGroup> functionEntry : dbmsFunctions.entrySet()) {
    String functionName=functionEntry.getKey();
    JpqlFunctionGroup dbmsFunctionMap=functionEntry.getValue();
    JpqlFunction function=dbmsFunctionMap.get(dbms);
    if (function == null) {
      function=dbmsFunctionMap.get(null);
    }
    if (function == null) {
      LOG.warning(""String_Node_Str"" + functionName + ""String_Node_Str""+ dbms+ ""String_Node_Str"");
    }
 else {
      addFunction(platformOperators,functionName,function);
    }
  }
  return entityManagerFactory;
}",0.8944581715495941
168854,"private void addFunction(Map<Integer,ExpressionOperator> platformOperators,String name,JpqlFunction function){
  ExpressionOperator operator=createOperator(name,function);
  ExpressionOperator.registerOperator(operator.getSelector(),name);
  ExpressionOperator.addOperator(operator);
  platformOperators.put(Integer.valueOf(operator.getSelector()),operator);
}","private void addFunction(Map<Integer,ExpressionOperator> platformOperators,String name,JpqlFunction function){
  ExpressionOperator operator=createOperator(name,function);
  ExpressionOperator.registerOperator(operator.getSelector(),operator.getName());
  ExpressionOperator.addOperator(operator);
  platformOperators.put(Integer.valueOf(operator.getSelector()),operator);
}",0.9700272479564032
168855,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void prepare(List<Expression> items){
  EclipseLinkFunctionRenderContext context=new EclipseLinkFunctionRenderContext(items);
  function.render(context);
  setArgumentIndices(context.getArgumentIndices());
  printsAs(new Vector(context.getChunks()));
  if (context.isChunkFirst()) {
    bePrefix();
  }
 else {
    bePostfix();
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void prepare(List<Expression> items){
  EclipseLinkFunctionRenderContext context;
  if (function.hasArguments()) {
    context=new EclipseLinkFunctionRenderContext(items);
  }
 else {
    if (items.size() > 1) {
      throw new IllegalStateException(""String_Node_Str"" + function.getClass() + ""String_Node_Str""+ items.size()+ ""String_Node_Str"");
    }
    context=new EclipseLinkFunctionRenderContext(Collections.<Expression>emptyList());
  }
  function.render(context);
  setArgumentIndices(context.getArgumentIndices());
  printsAs(new Vector(context.getChunks()));
  if (context.isChunkFirst()) {
    bePrefix();
  }
 else {
    bePostfix();
  }
}",0.7158273381294964
168856,"@ManyToMany @CollectionTable(name=""String_Node_Str"",joinColumns={@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str""),@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str"")}) @MapKeyColumn(nullable=false,length=20) public Map<String,IntIdEntity> getManyToMany(){
  return manyToMany;
}","@ManyToMany @CollectionTable(name=""String_Node_Str"",joinColumns={@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str""),@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str"")}) @MapKeyColumn(name=""String_Node_Str"",nullable=false,length=20) public Map<String,IntIdEntity> getManyToMany(){
  return manyToMany;
}",0.96602658788774
168857,"@Column(nullable=false,length=10) public String getSomeValue(){
  return someValue;
}","@Column(name=""String_Node_Str"",nullable=false,length=10) public String getSomeValue(){
  return someValue;
}",0.8808290155440415
168858,"@ManyToMany @MapKeyColumn(nullable=false,length=20) public Map<String,IntIdEntity> getManyToMany(){
  return manyToMany;
}","@ManyToMany @CollectionTable(name=""String_Node_Str"",joinColumns={@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str""),@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str""),@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str"")}) @MapKeyColumn(name=""String_Node_Str"",nullable=false,length=20) public Map<String,IntIdEntity> getManyToMany(){
  return manyToMany;
}",0.4460694698354662
168859,"@ElementCollection @MapKeyColumn(nullable=false,length=20) public Map<String,NameObject> getElementCollection(){
  return elementCollection;
}","@ElementCollection @CollectionTable(name=""String_Node_Str"",joinColumns={@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str""),@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str""),@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str"")}) @MapKeyColumn(name=""String_Node_Str"",nullable=false,length=20) public Map<String,NameObject> getElementCollection(){
  return elementCollection;
}",0.4838160136286201
168860,"@ManyToOne(fetch=FetchType.LAZY) public EmbeddableIdTestEntity getManyToOne(){
  return manyToOne;
}","@JoinColumns({@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str""),@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str""),@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str"")}) @ManyToOne(fetch=FetchType.LAZY) public EmbeddableIdTestEntity getManyToOne(){
  return manyToOne;
}",0.4535147392290249
168861,"@ManyToOne(fetch=FetchType.LAZY,optional=false) public IntIdEntity getIntIdEntity(){
  return intIdEntity;
}","@ManyToOne(fetch=FetchType.LAZY,optional=false) @JoinColumn(name=""String_Node_Str"",nullable=false) public IntIdEntity getIntIdEntity(){
  return intIdEntity;
}",0.8089887640449438
168862,"@OneToMany public Set<EmbeddableIdTestEntity> getNestedOneToMany(){
  return nestedOneToMany;
}","@OneToMany @CollectionTable(name=""String_Node_Str"",joinColumns={@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str""),@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str""),@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str"")}) public Set<EmbeddableIdTestEntity> getNestedOneToMany(){
  return nestedOneToMany;
}",0.4042553191489361
168863,"@ManyToOne(optional=false) public Person getOwner(){
  return owner;
}","@ManyToOne(optional=false,fetch=FetchType.LAZY) public Person getOwner(){
  return owner;
}",0.8695652173913043
168864,"@Test public void testSubqueryLimit(){
  CriteriaBuilder<Person> cb=cbf.create(em,Person.class,""String_Node_Str"");
  cb.where(""String_Node_Str"").in().from(Person.class,""String_Node_Str"").select(""String_Node_Str"").orderByAsc(""String_Node_Str"").setMaxResults(1).end().setMaxResults(1);
  String expected=""String_Node_Str"" + function(""String_Node_Str"",""String_Node_Str"" + renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  assertEquals(expected,cb.getQueryString());
  List<Person> result=cb.getResultList();
  assertEquals(1,result.size());
  assertEquals(""String_Node_Str"",result.get(0).getName());
}","@Test public void testSubqueryLimit(){
  CriteriaBuilder<Person> cb=cbf.create(em,Person.class,""String_Node_Str"");
  cb.where(""String_Node_Str"").in().from(Person.class,""String_Node_Str"").select(""String_Node_Str"").orderByAsc(""String_Node_Str"").setMaxResults(1).end();
  String expected=""String_Node_Str"" + function(""String_Node_Str"",""String_Node_Str"" + renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  assertEquals(expected,cb.getQueryString());
  List<Person> result=cb.getResultList();
  assertEquals(1,result.size());
  assertEquals(""String_Node_Str"",result.get(0).getName());
}",0.9874538745387452
168865,"@OneToMany @CollectionTable(name=""String_Node_Str"",joinColumns={@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str""),@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str"")}) public Set<EmbeddableTestEntity> getNestedOneToMany(){
  return nestedOneToMany;
}","@OneToMany @JoinTable(name=""String_Node_Str"",joinColumns={@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str""),@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str"")},inverseJoinColumns={@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str""),@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str"")}) public Set<EmbeddableTestEntity> getNestedOneToMany(){
  return nestedOneToMany;
}",0.6806833114323259
168866,"public Integer getNumber(){
  return number;
}","@Column(name=""String_Node_Str"") public Integer getNumber(){
  return number;
}",0.7419354838709677
168867,"public Integer getNumber(){
  return number;
}","@Column(name=""String_Node_Str"") public Integer getNumber(){
  return number;
}",0.7419354838709677
168868,"@OneToMany @CollectionTable(name=""String_Node_Str"",joinColumns={@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str""),@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str""),@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str"")}) public Set<EmbeddableIdTestEntity> getNestedOneToMany(){
  return nestedOneToMany;
}","@OneToMany @JoinTable(name=""String_Node_Str"",joinColumns={@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str""),@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str""),@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str"")},inverseJoinColumns={@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str""),@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str""),@JoinColumn(name=""String_Node_Str"",referencedColumnName=""String_Node_Str"")}) public Set<EmbeddableIdTestEntity> getNestedOneToMany(){
  return nestedOneToMany;
}",0.6787878787878788
168869,"/** 
 * Returns the query roots.
 * @return The roots of this query
 * @since 1.2.0
 */
public Set<Root> getRoots();","/** 
 * Returns the query roots.
 * @return The roots of this query
 * @since 1.2.0
 */
public Set<From> getRoots();",0.9741379310344828
168870,"/** 
 * Returns the query root.
 * @return The root of this query
 * @since 1.2.0
 */
public Root getRoot();","/** 
 * Returns the query root.
 * @return The root of this query
 * @since 1.2.0
 */
public From getRoot();",0.9722222222222222
168871,"public Set<Root> getRoots(){
  return new LinkedHashSet<Root>(joinManager.getRoots());
}","public Set<From> getRoots(){
  return new LinkedHashSet<From>(joinManager.getRoots());
}",0.9318181818181818
168872,"public Root getRoot(){
  return joinManager.getRootNodeOrFail(""String_Node_Str"");
}","public From getRoot(){
  return joinManager.getRootNodeOrFail(""String_Node_Str"");
}",0.963855421686747
168873,"public ObjectBuilder<?> createObjectBuilder(ViewType<?> viewType,MappingConstructor<?> mappingConstructor,String viewName,String entityViewRoot,FullQueryBuilder<?,?> criteriaBuilder,EntityViewConfiguration configuration,int offset,boolean registerMacro){
  Class<?> entityClazz;
  Set<Root> roots=criteriaBuilder.getRoots();
  Map.Entry<Root,String> rootEntry=findRoot(roots,entityViewRoot);
  Root root=rootEntry.getKey();
  entityViewRoot=rootEntry.getValue();
  ExpressionFactory ef=criteriaBuilder.getService(ExpressionFactory.class);
  if (entityViewRoot != null) {
    if (root.getAlias().equals(entityViewRoot)) {
      entityClazz=root.getType();
    }
 else {
      PathTargetResolvingExpressionVisitor visitor=new PathTargetResolvingExpressionVisitor(metamodel.getEntityMetamodel(),root.getType());
      ef.createPathExpression(entityViewRoot.substring(root.getAlias().length() + 1)).accept(visitor);
      Collection<Class<?>> possibleTypes=visitor.getPossibleTargets().values();
      if (possibleTypes.size() > 1) {
        throw new IllegalArgumentException(""String_Node_Str"" + entityViewRoot + ""String_Node_Str""+ root.getType()+ ""String_Node_Str"");
      }
      entityClazz=possibleTypes.iterator().next();
      if (entityClazz == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + entityViewRoot + ""String_Node_Str""+ root.getType()+ ""String_Node_Str"");
      }
    }
  }
 else {
    entityClazz=root.getType();
    entityViewRoot=root.getAlias();
  }
  if (!viewType.getEntityClass().isAssignableFrom(entityClazz)) {
    throw new IllegalArgumentException(""String_Node_Str"" + viewType.getEntityClass().getName() + ""String_Node_Str""+ criteriaBuilder.getResultType().getName()+ ""String_Node_Str"");
  }
  if (registerMacro) {
    criteriaBuilder.registerMacro(""String_Node_Str"",new ViewRootJpqlMacro(entityViewRoot));
  }
  return getTemplate(ef,viewType,mappingConstructor,viewName,entityViewRoot,offset).createObjectBuilder(criteriaBuilder,configuration.getOptionalParameters(),configuration);
}","public ObjectBuilder<?> createObjectBuilder(ViewType<?> viewType,MappingConstructor<?> mappingConstructor,String viewName,String entityViewRoot,FullQueryBuilder<?,?> criteriaBuilder,EntityViewConfiguration configuration,int offset,boolean registerMacro){
  Class<?> entityClazz;
  Map.Entry<From,String> rootEntry=findRoot(criteriaBuilder,entityViewRoot);
  From root=rootEntry.getKey();
  entityViewRoot=rootEntry.getValue();
  ExpressionFactory ef=criteriaBuilder.getService(ExpressionFactory.class);
  if (entityViewRoot != null) {
    if (root.getAlias().equals(entityViewRoot)) {
      entityClazz=root.getType();
    }
 else {
      PathTargetResolvingExpressionVisitor visitor=new PathTargetResolvingExpressionVisitor(metamodel.getEntityMetamodel(),root.getType());
      ef.createPathExpression(entityViewRoot.substring(root.getAlias().length() + 1)).accept(visitor);
      Collection<Class<?>> possibleTypes=visitor.getPossibleTargets().values();
      if (possibleTypes.size() > 1) {
        throw new IllegalArgumentException(""String_Node_Str"" + entityViewRoot + ""String_Node_Str""+ root.getType()+ ""String_Node_Str"");
      }
      entityClazz=possibleTypes.iterator().next();
      if (entityClazz == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + entityViewRoot + ""String_Node_Str""+ root.getType()+ ""String_Node_Str"");
      }
    }
  }
 else {
    entityClazz=root.getType();
    entityViewRoot=root.getAlias();
  }
  if (!viewType.getEntityClass().isAssignableFrom(entityClazz)) {
    throw new IllegalArgumentException(""String_Node_Str"" + viewType.getEntityClass().getName() + ""String_Node_Str""+ criteriaBuilder.getResultType().getName()+ ""String_Node_Str"");
  }
  if (registerMacro) {
    criteriaBuilder.registerMacro(""String_Node_Str"",new ViewRootJpqlMacro(entityViewRoot));
  }
  return getTemplate(ef,viewType,mappingConstructor,viewName,entityViewRoot,offset).createObjectBuilder(criteriaBuilder,configuration.getOptionalParameters(),configuration);
}",0.9751861042183624
168874,"private static Map.Entry<Root,String> findRoot(Set<Root> roots,String entityViewRoot){
  if (entityViewRoot == null || entityViewRoot.isEmpty()) {
    if (roots.size() > 1) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    return new AbstractMap.SimpleEntry<Root,String>(roots.iterator().next(),null);
  }
  if (roots.size() == 1) {
    Root r=roots.iterator().next();
    String alias=r.getAlias();
    if (entityViewRoot.startsWith(alias) && (entityViewRoot.length() == alias.length() || entityViewRoot.charAt(alias.length()) == '.')) {
      return new AbstractMap.SimpleEntry<Root,String>(r,entityViewRoot);
    }
 else {
      return new AbstractMap.SimpleEntry<Root,String>(r,alias + '.' + entityViewRoot);
    }
  }
  for (  Root r : roots) {
    String alias=r.getAlias();
    if (entityViewRoot.startsWith(alias) && (entityViewRoot.length() == alias.length() || entityViewRoot.charAt(alias.length()) == '.')) {
      return new AbstractMap.SimpleEntry<Root,String>(r,entityViewRoot);
    }
  }
  throw new IllegalArgumentException(""String_Node_Str"" + entityViewRoot + ""String_Node_Str"");
}","private static Map.Entry<From,String> findRoot(FullQueryBuilder<?,?> queryBuilder,String entityViewRoot){
  if (entityViewRoot == null || entityViewRoot.isEmpty()) {
    Set<From> roots=queryBuilder.getRoots();
    if (roots.size() > 1) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    return new AbstractMap.SimpleEntry<From,String>(roots.iterator().next(),null);
  }
  From candidate=queryBuilder.getFrom(entityViewRoot);
  if (candidate != null) {
    return new AbstractMap.SimpleEntry<From,String>(candidate,null);
  }
  Set<From> roots=queryBuilder.getRoots();
  if (roots.size() == 1) {
    From r=roots.iterator().next();
    String alias=r.getAlias();
    if (entityViewRoot.startsWith(alias) && (entityViewRoot.length() == alias.length() || entityViewRoot.charAt(alias.length()) == '.')) {
      return new AbstractMap.SimpleEntry<From,String>(r,entityViewRoot);
    }
 else {
      return new AbstractMap.SimpleEntry<From,String>(r,alias + '.' + entityViewRoot);
    }
  }
  for (  From r : roots) {
    String alias=r.getAlias();
    if (entityViewRoot.startsWith(alias) && (entityViewRoot.length() == alias.length() || entityViewRoot.charAt(alias.length()) == '.')) {
      return new AbstractMap.SimpleEntry<From,String>(r,entityViewRoot);
    }
  }
  throw new IllegalArgumentException(""String_Node_Str"" + entityViewRoot + ""String_Node_Str"");
}",0.8634185303514377
168875,"private String applyAndGetCorrelationRoot(boolean batchCorrelationValues){
  Class<?> viewRootEntityClass=viewRootType.getEntityClass();
  String idAttributePath=getEntityIdName(viewRootEntityClass);
  FullQueryBuilder<?,?> queryBuilder=entityViewConfiguration.getCriteriaBuilder();
  Map<String,Object> optionalParameters=entityViewConfiguration.getOptionalParameters();
  Class<?> correlationBasisEntityType;
  String viewRootExpression;
  if (batchCorrelationValues) {
    correlationBasisEntityType=correlationBasisEntity;
    viewRootExpression=null;
  }
 else {
    correlationBasisEntityType=viewRootEntityClass;
    viewRootExpression=CORRELATION_KEY_ALIAS;
  }
  this.criteriaBuilder=queryBuilder.getCriteriaBuilderFactory().create(queryBuilder.getEntityManager(),Object[].class);
  this.viewRootJpqlMacro=new CorrelatedSubqueryViewRootJpqlMacro(criteriaBuilder,optionalParameters,viewRootEntityClass,idAttributePath,viewRootExpression);
  this.criteriaBuilder.registerMacro(""String_Node_Str"",viewRootJpqlMacro);
  SubqueryCorrelationBuilder correlationBuilder=new SubqueryCorrelationBuilder(criteriaBuilder,correlationResult,correlationBasisType,correlationBasisEntityType,CORRELATION_KEY_ALIAS,batchSize);
  CorrelationProvider provider=correlationProviderFactory.create(entityViewConfiguration.getCriteriaBuilder(),entityViewConfiguration.getOptionalParameters());
  if (batchSize > 1) {
    if (batchCorrelationValues) {
      this.correlationParamName=CORRELATION_KEY_ALIAS;
    }
 else {
      this.correlationParamName=generateCorrelationParamName();
    }
    if (correlationBasisEntityType != null) {
      if (batchCorrelationValues) {
        correlationKeyExpression=CORRELATION_KEY_ALIAS + getEntityIdName(correlationBasisEntityType);
      }
 else {
        correlationKeyExpression=CORRELATION_KEY_ALIAS + '.' + idAttributePath;
      }
    }
 else {
      correlationKeyExpression=CORRELATION_KEY_ALIAS + ""String_Node_Str"";
    }
  }
 else {
    this.correlationParamName=generateCorrelationParamName();
    this.correlationKeyExpression=null;
  }
  if (batchSize > 1 && batchCorrelationValues) {
    provider.applyCorrelation(correlationBuilder,correlationKeyExpression);
  }
 else {
    provider.applyCorrelation(correlationBuilder,':' + correlationParamName);
  }
  return correlationBuilder.getCorrelationRoot();
}","private String applyAndGetCorrelationRoot(boolean batchCorrelationValues){
  Class<?> viewRootEntityClass=viewRootType.getEntityClass();
  String idAttributePath=getEntityIdName(viewRootEntityClass);
  FullQueryBuilder<?,?> queryBuilder=entityViewConfiguration.getCriteriaBuilder();
  Map<String,Object> optionalParameters=entityViewConfiguration.getOptionalParameters();
  Class<?> correlationBasisEntityType;
  String viewRootExpression;
  if (batchCorrelationValues) {
    correlationBasisEntityType=correlationBasisEntity;
    viewRootExpression=null;
  }
 else {
    correlationBasisEntityType=viewRootEntityClass;
    viewRootExpression=CORRELATION_KEY_ALIAS;
  }
  this.criteriaBuilder=queryBuilder.getCriteriaBuilderFactory().create(queryBuilder.getEntityManager(),Object[].class);
  this.viewRootJpqlMacro=new CorrelatedSubqueryViewRootJpqlMacro(criteriaBuilder,optionalParameters,viewRootEntityClass,idAttributePath,viewRootExpression);
  this.criteriaBuilder.registerMacro(""String_Node_Str"",viewRootJpqlMacro);
  SubqueryCorrelationBuilder correlationBuilder=new SubqueryCorrelationBuilder(criteriaBuilder,correlationResult,correlationBasisType,correlationBasisEntityType,CORRELATION_KEY_ALIAS,batchSize,false);
  CorrelationProvider provider=correlationProviderFactory.create(entityViewConfiguration.getCriteriaBuilder(),entityViewConfiguration.getOptionalParameters());
  if (batchSize > 1) {
    if (batchCorrelationValues) {
      this.correlationParamName=CORRELATION_KEY_ALIAS;
    }
 else {
      this.correlationParamName=generateCorrelationParamName();
    }
    if (correlationBasisEntityType != null) {
      if (batchCorrelationValues) {
        correlationKeyExpression=CORRELATION_KEY_ALIAS + getEntityIdName(correlationBasisEntityType);
      }
 else {
        correlationKeyExpression=CORRELATION_KEY_ALIAS + '.' + idAttributePath;
      }
    }
 else {
      correlationKeyExpression=CORRELATION_KEY_ALIAS + ""String_Node_Str"";
    }
  }
 else {
    this.correlationParamName=generateCorrelationParamName();
    this.correlationKeyExpression=null;
  }
  if (batchSize > 1 && batchCorrelationValues) {
    provider.applyCorrelation(correlationBuilder,correlationKeyExpression);
  }
 else {
    provider.applyCorrelation(correlationBuilder,':' + correlationParamName);
  }
  return correlationBuilder.getCorrelationRoot();
}",0.9987212276214834
168876,"private String applyAndGetCorrelationRoot(){
  Class<?> viewRootEntityClass=viewRootType.getEntityClass();
  String idAttributePath=getEntityIdName(viewRootEntityClass);
  FullQueryBuilder<?,?> queryBuilder=entityViewConfiguration.getCriteriaBuilder();
  Map<String,Object> optionalParameters=entityViewConfiguration.getOptionalParameters();
  Class<?> correlationBasisEntityType=correlationBasisEntity;
  String viewRootExpression=viewRootAlias;
  this.criteriaBuilder=queryBuilder.copy(Object[].class);
  this.viewRootJpqlMacro=new CorrelatedSubqueryViewRootJpqlMacro(criteriaBuilder,optionalParameters,viewRootEntityClass,idAttributePath,viewRootExpression);
  this.criteriaBuilder.registerMacro(""String_Node_Str"",viewRootJpqlMacro);
  SubqueryCorrelationBuilder correlationBuilder=new SubqueryCorrelationBuilder(criteriaBuilder,correlationResult,correlationBasisType,correlationBasisEntityType,null,1);
  CorrelationProvider provider=correlationProviderFactory.create(entityViewConfiguration.getCriteriaBuilder(),entityViewConfiguration.getOptionalParameters());
  provider.applyCorrelation(correlationBuilder,correlationKeyExpression);
  return correlationBuilder.getCorrelationRoot();
}","private String applyAndGetCorrelationRoot(){
  Class<?> viewRootEntityClass=viewRootType.getEntityClass();
  String idAttributePath=getEntityIdName(viewRootEntityClass);
  FullQueryBuilder<?,?> queryBuilder=entityViewConfiguration.getCriteriaBuilder();
  Map<String,Object> optionalParameters=entityViewConfiguration.getOptionalParameters();
  Class<?> correlationBasisEntityType=correlationBasisEntity;
  String viewRootExpression=viewRootAlias;
  this.criteriaBuilder=queryBuilder.copy(Object[].class);
  this.viewRootJpqlMacro=new CorrelatedSubqueryViewRootJpqlMacro(criteriaBuilder,optionalParameters,viewRootEntityClass,idAttributePath,viewRootExpression);
  this.criteriaBuilder.registerMacro(""String_Node_Str"",viewRootJpqlMacro);
  SubqueryCorrelationBuilder correlationBuilder=new SubqueryCorrelationBuilder(criteriaBuilder,correlationResult,correlationBasisType,correlationBasisEntityType,null,1,true);
  CorrelationProvider provider=correlationProviderFactory.create(entityViewConfiguration.getCriteriaBuilder(),entityViewConfiguration.getOptionalParameters());
  provider.applyCorrelation(correlationBuilder,correlationKeyExpression);
  return correlationBuilder.getCorrelationRoot();
}",0.9979070740895772
168877,"@Override public JoinOnBuilder<ParameterHolder<?>> correlate(Class<?> entityClass,String alias){
  if (correlationRoot != null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  JoinOnBuilder<ParameterHolder<?>> correlationBuilder;
  if (batchSize > 1) {
    if (correlationBasisEntity != null) {
      criteriaBuilder.fromIdentifiableValues(correlationBasisEntity,correllationKeyAlias,batchSize);
    }
 else {
      criteriaBuilder.fromValues(correlationBasisType,correllationKeyAlias,batchSize);
    }
    correlationBuilder=(JoinOnBuilder<ParameterHolder<?>>)(JoinOnBuilder<?>)criteriaBuilder.innerJoinOn(entityClass,alias);
  }
 else {
    criteriaBuilder.from(entityClass,alias);
    correlationBuilder=criteriaBuilder.getService(JoinOnBuilder.class);
  }
  String correlationRoot;
  if (correlationResult.isEmpty()) {
    correlationRoot=alias;
  }
 else   if (correlationResult.startsWith(alias) && (correlationResult.length() == alias.length() || correlationResult.charAt(alias.length()) == '.')) {
    correlationRoot=correlationResult;
  }
 else {
    correlationRoot=alias + '.' + correlationResult;
  }
  this.correlationRoot=correlationRoot;
  return correlationBuilder;
}","@Override public JoinOnBuilder<ParameterHolder<?>> correlate(Class<?> entityClass,String alias){
  if (correlationRoot != null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  JoinOnBuilder<ParameterHolder<?>> correlationBuilder;
  if (batchSize > 1) {
    if (correlationBasisEntity != null) {
      criteriaBuilder.fromIdentifiableValues(correlationBasisEntity,correllationKeyAlias,batchSize);
    }
 else {
      criteriaBuilder.fromValues(correlationBasisType,correllationKeyAlias,batchSize);
    }
    correlationBuilder=(JoinOnBuilder<ParameterHolder<?>>)(JoinOnBuilder<?>)criteriaBuilder.innerJoinOn(entityClass,alias);
  }
 else {
    if (innerJoin) {
      correlationBuilder=(JoinOnBuilder<ParameterHolder<?>>)(JoinOnBuilder<?>)criteriaBuilder.innerJoinOn(entityClass,alias);
    }
 else {
      criteriaBuilder.from(entityClass,alias);
      correlationBuilder=criteriaBuilder.getService(JoinOnBuilder.class);
    }
  }
  String correlationRoot;
  if (correlationResult.isEmpty()) {
    correlationRoot=alias;
  }
 else   if (correlationResult.startsWith(alias) && (correlationResult.length() == alias.length() || correlationResult.charAt(alias.length()) == '.')) {
    correlationRoot=correlationResult;
  }
 else {
    correlationRoot=alias + '.' + correlationResult;
  }
  this.correlationRoot=correlationRoot;
  return correlationBuilder;
}",0.919674039580908
168878,"public SubqueryCorrelationBuilder(FullQueryBuilder<?,?> criteriaBuilder,String correlationResult,Class<?> correlationBasisType,Class<?> correlationBasisEntity,String correllationKeyAlias,int batchSize){
  this.criteriaBuilder=criteriaBuilder;
  this.correlationResult=correlationResult;
  this.correlationBasisType=correlationBasisType;
  this.correlationBasisEntity=correlationBasisEntity;
  this.correllationKeyAlias=correllationKeyAlias;
  this.batchSize=batchSize;
}","public SubqueryCorrelationBuilder(FullQueryBuilder<?,?> criteriaBuilder,String correlationResult,Class<?> correlationBasisType,Class<?> correlationBasisEntity,String correllationKeyAlias,int batchSize,boolean innerJoin){
  this.criteriaBuilder=criteriaBuilder;
  this.correlationResult=correlationResult;
  this.correlationBasisType=correlationBasisType;
  this.correlationBasisEntity=correlationBasisEntity;
  this.correllationKeyAlias=correllationKeyAlias;
  this.batchSize=batchSize;
  this.innerJoin=innerJoin;
}",0.9533468559837728
168879,"@Test @Category({NoHibernate42.class,NoHibernate43.class,NoHibernate50.class,NoDatanucleus4.class,NoDatanucleus.class,NoOpenJPA.class}) public void testSubqueryBatchedCorrelationSize4(){
  testCorrelation(DocumentCorrelationViewSubquery.class,4);
}","@Test @Category({NoHibernate42.class,NoHibernate43.class,NoHibernate50.class,NoDatanucleus.class,NoOpenJPA.class}) public void testSubqueryBatchedCorrelationSize4(){
  testCorrelation(DocumentCorrelationViewSubquery.class,4);
}",0.9557894736842104
168880,"@Test public void testSubselectCorrelation(){
  testCorrelation(DocumentCorrelationViewSubselect.class,null);
}","@Test @Category({NoDatanucleus4.class}) public void testSubselectCorrelation(){
  testCorrelation(DocumentCorrelationViewSubselect.class,null);
}",0.8671875
168881,"@Test @Category({NoHibernate42.class,NoHibernate43.class,NoHibernate50.class,NoDatanucleus4.class,NoOpenJPA.class}) public void testSubqueryCorrelation(){
  testCorrelation(DocumentCorrelationViewSubquery.class,null);
}","@Test @Category({NoDatanucleus4.class}) public void testSubqueryCorrelation(){
  testCorrelation(DocumentCorrelationViewSubquery.class,null);
}",0.7900552486187845
168882,"@Test @Category({NoHibernate42.class,NoHibernate43.class,NoHibernate50.class,NoDatanucleus4.class,NoDatanucleus.class,NoOpenJPA.class}) public void testSubqueryBatchedCorrelationSize20(){
  testCorrelation(DocumentCorrelationViewSubquery.class,20);
}","@Test @Category({NoHibernate42.class,NoHibernate43.class,NoHibernate50.class,NoDatanucleus.class,NoOpenJPA.class}) public void testSubqueryBatchedCorrelationSize20(){
  testCorrelation(DocumentCorrelationViewSubquery.class,20);
}",0.9561586638830898
168883,"@Test @Category({NoHibernate42.class,NoHibernate43.class,NoHibernate50.class,NoDatanucleus4.class,NoDatanucleus.class,NoOpenJPA.class}) public void testSubqueryBatchedCorrelationSize2(){
  testCorrelation(DocumentCorrelationViewSubquery.class,2);
}","@Test @Category({NoHibernate42.class,NoHibernate43.class,NoHibernate50.class,NoDatanucleus.class,NoOpenJPA.class}) public void testSubqueryBatchedCorrelationSize2(){
  testCorrelation(DocumentCorrelationViewSubquery.class,2);
}",0.9557894736842104
168884,"@ManyToOne(fetch=FetchType.LAZY) public PrimitiveDocument getParent(){
  return parent;
}","@ManyToOne(fetch=FetchType.LAZY) @JoinColumn(name=""String_Node_Str"") public PrimitiveDocument getParent(){
  return parent;
}",0.8317757009345794
168885,"@OneToMany public Collection<PrimitivePerson> getPeopleCollectionBag(){
  return peopleCollectionBag;
}","@OneToMany @JoinTable(name=""String_Node_Str"") public Collection<PrimitivePerson> getPeopleCollectionBag(){
  return peopleCollectionBag;
}",0.8547717842323651
168886,"@OneToMany public List<PrimitivePerson> getPeopleListBag(){
  return peopleListBag;
}","@OneToMany @JoinTable(name=""String_Node_Str"") public List<PrimitivePerson> getPeopleListBag(){
  return peopleListBag;
}",0.8292682926829268
168887,"@ManyToOne(fetch=FetchType.LAZY) public PrimitiveDocument getPartnerDocument(){
  return partnerDocument;
}","@ManyToOne(fetch=FetchType.LAZY) @JoinColumn(name=""String_Node_Str"") public PrimitiveDocument getPartnerDocument(){
  return partnerDocument;
}",0.856
168888,"/** 
 * Like   {@link DbmsLimitHandler#applySql(String,boolean,Integer,Integer)} but inlines the parameter values.
 * @param sql    the sql query on which to apply
 * @param isSubquery whether the query is a subquery
 * @param limit  the limit or null
 * @param offset the offset or null
 * @return Query statement with LIMIT clause applied.
 */
String applySqlInlined(String sql,boolean isSubquery,Integer limit,Integer offset);","/** 
 * Like   {@link DbmsLimitHandler#applySql(String,boolean,Integer,Integer)} but inlines the parameter values.
 * @param sql    the sql query on which to apply
 * @param isSubquery whether the query is a subquery
 * @param limit  the limit or null
 * @param offset the offset or null
 * @return Query statement with LIMIT clause applied.
 */
public String applySqlInlined(String sql,boolean isSubquery,Integer limit,Integer offset);",0.991907514450867
168889,"/** 
 * Bind parameter values needed by the LIMIT clause before original SELECT statement.
 * @param limit  the limit or null
 * @param offset the offset or null
 * @param statement the statement to which to apply parameters
 * @param index the index on which to bind parameters
 * @return The number of parameter values bound
 * @throws SQLException Indicates problems binding parameter values
 */
int bindLimitParametersAtStartOfQuery(Integer limit,Integer offset,PreparedStatement statement,int index) throws SQLException ;","/** 
 * Bind parameter values needed by the LIMIT clause before original SELECT statement.
 * @param limit  the limit or null
 * @param offset the offset or null
 * @param statement the statement to which to apply parameters
 * @param index the index on which to bind parameters
 * @return The number of parameter values bound
 * @throws SQLException Indicates problems binding parameter values
 */
public int bindLimitParametersAtStartOfQuery(Integer limit,Integer offset,PreparedStatement statement,int index) throws SQLException ;",0.9933899905571294
168890,"/** 
 * Bind parameter values needed by the LIMIT clause after original SELECT statement.
 * @param limit  the limit or null
 * @param offset the offset or null
 * @param statement the statement to which to apply parameters
 * @param index the index on which to bind parameters
 * @return The number of parameter values bound
 * @throws SQLException Indicates problems binding parameter values
 */
int bindLimitParametersAtEndOfQuery(Integer limit,Integer offset,PreparedStatement statement,int index) throws SQLException ;","/** 
 * Bind parameter values needed by the LIMIT clause after original SELECT statement.
 * @param limit  the limit or null
 * @param offset the offset or null
 * @param statement the statement to which to apply parameters
 * @param index the index on which to bind parameters
 * @return The number of parameter values bound
 * @throws SQLException Indicates problems binding parameter values
 */
public int bindLimitParametersAtEndOfQuery(Integer limit,Integer offset,PreparedStatement statement,int index) throws SQLException ;",0.99335232668566
168891,"/** 
 * Apply the LIMIT and OFFSET clause on the given SQL
 * @param sqlSb  the string builder containing the sql query on which to apply
 * @param isSubquery whether the query is a subquery
 * @param limit  the limit value or null
 * @param offset the offset value or null
 * @return Query statement with LIMIT clause applied.
 */
void applySql(StringBuilder sqlSb,boolean isSubquery,String limit,String offset);","/** 
 * Apply the LIMIT and OFFSET clause on the given SQL
 * @param sqlSb  the string builder containing the sql query on which to apply
 * @param isSubquery whether the query is a subquery
 * @param limit  the limit value or null
 * @param offset the offset value or null
 * @return Query statement with LIMIT clause applied.
 */
public void applySql(StringBuilder sqlSb,boolean isSubquery,String limit,String offset);",0.9915966386554622
168892,"/** 
 * Use JDBC API to limit the number of rows returned by the SQL query. Typically handlers that do not support LIMIT clause should implement this method.
 * @param limit  the limit or null
 * @param offset the offset or null
 * @param statement the statement on which to apply max rows
 * @throws SQLException Indicates problems while limiting maximum rows returned
 */
void setMaxRows(Integer limit,Integer offset,PreparedStatement statement) throws SQLException ;","/** 
 * Use JDBC API to limit the number of rows returned by the SQL query. Typically handlers that do not support LIMIT clause should implement this method.
 * @param limit  the limit or null
 * @param offset the offset or null
 * @param statement the statement on which to apply max rows
 * @throws SQLException Indicates problems while limiting maximum rows returned
 */
public void setMaxRows(Integer limit,Integer offset,PreparedStatement statement) throws SQLException ;",0.9925925925925926
168893,"/** 
 * Returns whether the dbms supports OFFSET via SQL.
 * @return True if OFFSET is supported, otherwise false
 */
boolean supportsLimitOffset();","/** 
 * Returns whether the dbms supports OFFSET via SQL.
 * @return True if OFFSET is supported, otherwise false
 */
public boolean supportsLimitOffset();",0.976897689768977
168894,"/** 
 * Returns whether the dbms supports LIMIT via SQL.
 * @return True if LIMIT is supported, otherwise false
 */
boolean supportsLimit();","/** 
 * Returns whether the dbms supports LIMIT via SQL.
 * @return True if LIMIT is supported, otherwise false
 */
public boolean supportsLimit();",0.975609756097561
168895,"protected StringBuilder applyCtes(StringBuilder sqlSb,Query baseQuery,boolean isSubquery,List<Query> participatingQueries){
  if (!isMainQuery || isSubquery || !mainQuery.cteManager.hasCtes() && statementType != DbmsStatementType.DELETE || statementType != DbmsStatementType.SELECT && !mainQuery.dbmsDialect.supportsWithClauseInModificationQuery()) {
    return null;
  }
  Map<String,String> tableNameRemapping=new LinkedHashMap<String,String>(0);
  StringBuilder sb=new StringBuilder(mainQuery.cteManager.getCtes().size() * 100);
  sb.append(dbmsDialect.getWithClause(mainQuery.cteManager.isRecursive()));
  sb.append(""String_Node_Str"");
  boolean firstCte=true;
  for (  CTEInfo cteInfo : mainQuery.cteManager.getCtes()) {
    Map<DbmsModificationState,String> modificationStates=cteInfo.nonRecursiveCriteriaBuilder.getModificationStates(explicitVersionEntities);
    Query nonRecursiveQuery=cteInfo.nonRecursiveCriteriaBuilder.getQuery(modificationStates);
    participatingQueries.add(nonRecursiveQuery);
    Query recursiveQuery=null;
    if (cteInfo.recursive) {
      modificationStates=cteInfo.nonRecursiveCriteriaBuilder.getModificationStates(explicitVersionEntities);
      recursiveQuery=cteInfo.recursiveCriteriaBuilder.getQuery(modificationStates);
      if (!dbmsDialect.supportsJoinsInRecursiveCte() && cteInfo.recursiveCriteriaBuilder.joinManager.hasJoins()) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      participatingQueries.add(recursiveQuery);
    }
    firstCte=applyCascadingDelete(nonRecursiveQuery,cteInfo.nonRecursiveCriteriaBuilder,participatingQueries,sb,cteInfo.name,firstCte);
    firstCte=applyAddedCtes(nonRecursiveQuery,cteInfo.nonRecursiveCriteriaBuilder,sb,tableNameRemapping,firstCte);
    firstCte=applyAddedCtes(recursiveQuery,cteInfo.recursiveCriteriaBuilder,sb,tableNameRemapping,firstCte);
    String cteNonRecursiveSqlQuery=getSql(nonRecursiveQuery);
    if (firstCte) {
      firstCte=false;
    }
 else {
      sb.append(""String_Node_Str"");
    }
    String cteName=cteInfo.cteType.getName();
    sb.append(cteName);
    sb.append('(');
    final List<String> attributes=cteInfo.attributes;
    boolean first=true;
    for (int i=0; i < attributes.size(); i++) {
      String[] columns=cbf.getExtendedQuerySupport().getColumnNames(em,cteInfo.cteType,attributes.get(i));
      for (      String column : columns) {
        if (first) {
          first=false;
        }
 else {
          sb.append(""String_Node_Str"");
        }
        sb.append(column);
      }
    }
    sb.append(')');
    sb.append(""String_Node_Str"");
    sb.append(cteNonRecursiveSqlQuery);
    if (cteInfo.recursive) {
      String cteRecursiveSqlQuery=getSql(recursiveQuery);
      if (cteInfo.unionAll) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
      }
      sb.append(cteRecursiveSqlQuery);
    }
 else     if (!dbmsDialect.supportsNonRecursiveWithClause()) {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      for (int i=1; i < attributes.size(); i++) {
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
  }
  firstCte=applyCascadingDelete(baseQuery,this,participatingQueries,sb,""String_Node_Str"",firstCte);
  if (firstCte) {
    return null;
  }
  for (  CTEInfo cteInfo : mainQuery.cteManager.getCtes()) {
    String cteName=cteInfo.cteType.getName();
    final String subselect=""String_Node_Str"" + cteName + ""String_Node_Str"";
    int subselectIndex=0;
    while ((subselectIndex=sb.indexOf(subselect,subselectIndex)) > -1) {
      sb.replace(subselectIndex,subselectIndex + subselect.length(),cteName);
    }
    final String mainSubselect=""String_Node_Str"" + cteName + ""String_Node_Str"";
    subselectIndex=0;
    while ((subselectIndex=sqlSb.indexOf(mainSubselect,subselectIndex)) > -1) {
      sqlSb.replace(subselectIndex,subselectIndex + mainSubselect.length(),cteName);
    }
  }
  sb.append(""String_Node_Str"");
  for (  Map.Entry<String,String> tableNameRemappingEntry : tableNameRemapping.entrySet()) {
    String sqlAlias=cbf.getExtendedQuerySupport().getSqlAlias(em,baseQuery,tableNameRemappingEntry.getKey());
    String newCteName=tableNameRemappingEntry.getValue();
    applyTableNameRemapping(sqlSb,sqlAlias,newCteName,null);
  }
  return sb;
}","protected StringBuilder applyCtes(StringBuilder sqlSb,Query baseQuery,boolean isSubquery,List<Query> participatingQueries){
  if (!isMainQuery || isSubquery || !dbmsDialect.supportsWithClause()|| !mainQuery.cteManager.hasCtes() && statementType != DbmsStatementType.DELETE || statementType != DbmsStatementType.SELECT && !mainQuery.dbmsDialect.supportsWithClauseInModificationQuery()) {
    return null;
  }
  Map<String,String> tableNameRemapping=new LinkedHashMap<String,String>(0);
  StringBuilder sb=new StringBuilder(mainQuery.cteManager.getCtes().size() * 100);
  sb.append(dbmsDialect.getWithClause(mainQuery.cteManager.isRecursive()));
  sb.append(""String_Node_Str"");
  boolean firstCte=true;
  for (  CTEInfo cteInfo : mainQuery.cteManager.getCtes()) {
    Map<DbmsModificationState,String> modificationStates=cteInfo.nonRecursiveCriteriaBuilder.getModificationStates(explicitVersionEntities);
    Query nonRecursiveQuery=cteInfo.nonRecursiveCriteriaBuilder.getQuery(modificationStates);
    participatingQueries.add(nonRecursiveQuery);
    Query recursiveQuery=null;
    if (cteInfo.recursive) {
      modificationStates=cteInfo.nonRecursiveCriteriaBuilder.getModificationStates(explicitVersionEntities);
      recursiveQuery=cteInfo.recursiveCriteriaBuilder.getQuery(modificationStates);
      if (!dbmsDialect.supportsJoinsInRecursiveCte() && cteInfo.recursiveCriteriaBuilder.joinManager.hasJoins()) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      participatingQueries.add(recursiveQuery);
    }
    firstCte=applyCascadingDelete(nonRecursiveQuery,cteInfo.nonRecursiveCriteriaBuilder,participatingQueries,sb,cteInfo.name,firstCte);
    firstCte=applyAddedCtes(nonRecursiveQuery,cteInfo.nonRecursiveCriteriaBuilder,sb,tableNameRemapping,firstCte);
    firstCte=applyAddedCtes(recursiveQuery,cteInfo.recursiveCriteriaBuilder,sb,tableNameRemapping,firstCte);
    String cteNonRecursiveSqlQuery=getSql(nonRecursiveQuery);
    if (firstCte) {
      firstCte=false;
    }
 else {
      sb.append(""String_Node_Str"");
    }
    String cteName=cteInfo.cteType.getName();
    sb.append(cteName);
    sb.append('(');
    final List<String> attributes=cteInfo.attributes;
    boolean first=true;
    for (int i=0; i < attributes.size(); i++) {
      String[] columns=cbf.getExtendedQuerySupport().getColumnNames(em,cteInfo.cteType,attributes.get(i));
      for (      String column : columns) {
        if (first) {
          first=false;
        }
 else {
          sb.append(""String_Node_Str"");
        }
        sb.append(column);
      }
    }
    sb.append(')');
    sb.append(""String_Node_Str"");
    sb.append(cteNonRecursiveSqlQuery);
    if (cteInfo.recursive) {
      String cteRecursiveSqlQuery=getSql(recursiveQuery);
      if (cteInfo.unionAll) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
      }
      sb.append(cteRecursiveSqlQuery);
    }
 else     if (!dbmsDialect.supportsNonRecursiveWithClause()) {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      for (int i=1; i < attributes.size(); i++) {
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
  }
  firstCte=applyCascadingDelete(baseQuery,this,participatingQueries,sb,""String_Node_Str"",firstCte);
  if (firstCte) {
    return null;
  }
  for (  CTEInfo cteInfo : mainQuery.cteManager.getCtes()) {
    String cteName=cteInfo.cteType.getName();
    final String subselect=""String_Node_Str"" + cteName + ""String_Node_Str"";
    int subselectIndex=0;
    while ((subselectIndex=sb.indexOf(subselect,subselectIndex)) > -1) {
      sb.replace(subselectIndex,subselectIndex + subselect.length(),cteName);
    }
    final String mainSubselect=""String_Node_Str"" + cteName + ""String_Node_Str"";
    subselectIndex=0;
    while ((subselectIndex=sqlSb.indexOf(mainSubselect,subselectIndex)) > -1) {
      sqlSb.replace(subselectIndex,subselectIndex + mainSubselect.length(),cteName);
    }
  }
  sb.append(""String_Node_Str"");
  for (  Map.Entry<String,String> tableNameRemappingEntry : tableNameRemapping.entrySet()) {
    String sqlAlias=cbf.getExtendedQuerySupport().getSqlAlias(em,baseQuery,tableNameRemappingEntry.getKey());
    String newCteName=tableNameRemappingEntry.getValue();
    applyTableNameRemapping(sqlSb,sqlAlias,newCteName,null);
  }
  return sb;
}",0.9959577812710532
168896,"@Override protected Query getQuery(Map<DbmsModificationState,String> includedModificationStates){
  Query query;
  if (jpaProvider.supportsInsertStatement() && dbmsDialect.supportsWithClause()) {
    List<Query> participatingQueries=new ArrayList<Query>();
    query=em.createQuery(getBaseQueryStringWithCheck());
    StringBuilder sqlSb=new StringBuilder(cbf.getExtendedQuerySupport().getSql(em,query));
    boolean isEmbedded=this instanceof ReturningBuilder;
    StringBuilder withClause=applyCtes(sqlSb,query,isEmbedded,participatingQueries);
    String[] returningColumns=getReturningColumns();
    Map<String,String> addedCtes=applyExtendedSql(sqlSb,false,isEmbedded,withClause,returningColumns,includedModificationStates);
    String finalSql=sqlSb.toString();
    participatingQueries.add(query);
    if (mainQuery.cteManager.hasCtes() && returningAttributeBindingMap.isEmpty() && !dbmsDialect.usesExecuteUpdateWhenWithClauseInModificationQuery()) {
      query=getCountExampleQuery();
    }
    query=new CustomSQLQuery(participatingQueries,query,(CommonQueryBuilder<?>)this,cbf.getExtendedQuerySupport(),finalSql,addedCtes);
    query.setFirstResult(firstResult);
    query.setMaxResults(maxResults);
  }
 else {
    query=em.createQuery(getBaseQueryStringWithCheck());
  }
  parameterManager.parameterizeQuery(query);
  return query;
}","@Override protected Query getQuery(Map<DbmsModificationState,String> includedModificationStates){
  Query query;
  if (jpaProvider.supportsInsertStatement()) {
    List<Query> participatingQueries=new ArrayList<Query>();
    query=em.createQuery(getBaseQueryStringWithCheck());
    StringBuilder sqlSb=new StringBuilder(cbf.getExtendedQuerySupport().getSql(em,query));
    boolean isEmbedded=this instanceof ReturningBuilder;
    StringBuilder withClause=applyCtes(sqlSb,query,isEmbedded,participatingQueries);
    String[] returningColumns=getReturningColumns();
    Map<String,String> addedCtes=applyExtendedSql(sqlSb,false,isEmbedded,withClause,returningColumns,includedModificationStates);
    String finalSql=sqlSb.toString();
    participatingQueries.add(query);
    for (    Query q : participatingQueries) {
      parameterManager.parameterizeQuery(q);
    }
    boolean hasCtes=withClause != null && withClause.length() != 0 || addedCtes != null && !addedCtes.isEmpty();
    if (hasCtes && returningAttributeBindingMap.isEmpty() && !dbmsDialect.usesExecuteUpdateWhenWithClauseInModificationQuery()) {
      query=getCountExampleQuery();
    }
    query=new CustomSQLQuery(participatingQueries,query,(CommonQueryBuilder<?>)this,cbf.getExtendedQuerySupport(),finalSql,addedCtes);
    query.setFirstResult(firstResult);
    query.setMaxResults(maxResults);
  }
 else {
    query=em.createQuery(getBaseQueryStringWithCheck());
    parameterManager.parameterizeQuery(query);
  }
  return query;
}",0.8678847505270555
168897,"@Override public String applySqlInlined(String sql,boolean isSubquery,Integer limit,Integer offset){
  if (limit == null && offset == null) {
    return sql;
  }
  StringBuilder sb=new StringBuilder(sql.length() + length);
  sb.append(sql);
  applySql(sb,isSubquery,limit == null ? null : limit.toString(),offset == null ? null : offset.toString());
  return sb.toString();
}","@Override public String applySqlInlined(String sql,boolean isSubquery,Integer limit,Integer offset){
  if (limit == null && offset == null) {
    return sql;
  }
  StringBuilder sb=new StringBuilder(sql.length() + length);
  sb.append(sql);
  if (limitIncludesOffset() && offset != null && limit != null) {
    applySql(sb,isSubquery,Integer.toString(limit + offset),offset.toString());
  }
 else {
    applySql(sb,isSubquery,limit == null ? null : limit.toString(),offset == null ? null : offset.toString());
  }
  return sb.toString();
}",0.8205689277899344
168898,"@Override public String applySql(String sql,boolean isSubquery,Integer limit,Integer offset){
  if (limit == null && offset == null) {
    return sql;
  }
  StringBuilder sb=new StringBuilder(sql.length() + length);
  sb.append(sql);
  applySql(sb,isSubquery,limit == null ? null : ""String_Node_Str"",offset == null ? null : ""String_Node_Str"");
  return sb.toString();
}","@Override public String applySql(String sql,boolean isSubquery,Integer limit,Integer offset){
  if (limit == null && offset == null) {
    return sql;
  }
  StringBuilder sb=new StringBuilder(sql.length() + length);
  sb.append(sql);
  if (supportsVariableLimit()) {
    applySql(sb,isSubquery,limit == null ? null : ""String_Node_Str"",offset == null ? null : ""String_Node_Str"");
  }
 else {
    if (limitIncludesOffset() && offset != null && limit != null) {
      applySql(sb,isSubquery,Integer.toString(limit + offset),offset.toString());
    }
 else {
      applySql(sb,isSubquery,limit == null ? null : limit.toString(),offset == null ? null : offset.toString());
    }
  }
  return sb.toString();
}",0.6716417910447762
168899,"@Override public void applySql(StringBuilder sqlSb,boolean isSubquery,String limit,String offset){
  if (offset != null) {
    int selectIndex=SqlUtils.indexOfSelect(sqlSb);
    String[] aliases=SqlUtils.getSelectItemAliases(sqlSb,selectIndex);
    StringBuilder selectClauseSb=new StringBuilder(60 + aliases.length * 20);
    selectClauseSb.append(""String_Node_Str"");
    for (int i=0; i < aliases.length; i++) {
      selectClauseSb.append(aliases[i]);
      selectClauseSb.append(',');
    }
    selectClauseSb.setCharAt(selectClauseSb.length() - 1,' ');
    selectClauseSb.append(""String_Node_Str"");
    sqlSb.ensureCapacity(sqlSb.length() + 50 + selectClauseSb.length());
    sqlSb.insert(selectIndex,selectClauseSb);
  }
 else {
    sqlSb.ensureCapacity(sqlSb.length() + 30);
    sqlSb.append(""String_Node_Str"").append(limit).append(""String_Node_Str"");
  }
  if (offset != null) {
    if (limit != null) {
      sqlSb.append(""String_Node_Str"");
      sqlSb.append(limit);
      sqlSb.append(""String_Node_Str"");
      sqlSb.append(offset);
      sqlSb.append(""String_Node_Str"");
    }
 else {
      sqlSb.append(""String_Node_Str"").append(offset);
    }
  }
}","@Override public void applySql(StringBuilder sqlSb,boolean isSubquery,String limit,String offset){
  final int appendIndex;
  if (offset != null) {
    final int selectIndex=SqlUtils.indexOfSelect(sqlSb);
    String[] aliases=SqlUtils.getSelectItemAliases(sqlSb,selectIndex);
    int[] finalTableSubqueryBounds=SqlUtils.indexOfFinalTableSubquery(sqlSb,selectIndex);
    StringBuilder selectClauseSb=new StringBuilder(80 + aliases.length * 20);
    selectClauseSb.append(""String_Node_Str"");
    Map<Integer,String> sequences=null;
    for (int i=0; i < aliases.length; i++) {
      if (aliases[i].regionMatches(true,0,""String_Node_Str"",0,15)) {
        if (sequences == null) {
          sequences=new LinkedHashMap<Integer,String>();
        }
        sequences.put(i,aliases[i]);
      }
      selectClauseSb.append(aliases[i]);
      selectClauseSb.append(',');
    }
    selectClauseSb.setCharAt(selectClauseSb.length() - 1,' ');
    selectClauseSb.append(""String_Node_Str"");
    sqlSb.ensureCapacity(sqlSb.length() + 120 + selectClauseSb.length());
    sqlSb.insert(Math.max(selectIndex,finalTableSubqueryBounds[0]),selectClauseSb);
    int removedChars=0;
    if (sequences != null) {
      int startIndex=selectIndex + selectClauseSb.length();
      for (      Map.Entry<Integer,String> sequenceEntry : sequences.entrySet()) {
        String sequence=sequenceEntry.getValue();
        int index=sqlSb.indexOf(sequence,startIndex);
        if (sequenceEntry.getKey().intValue() == 0) {
          int currentIdx=index + sequence.length();
          while (Character.isWhitespace(sqlSb.charAt(currentIdx))) {
            currentIdx++;
          }
          currentIdx++;
          int diff=currentIdx - index;
          sqlSb.replace(index,currentIdx,""String_Node_Str"");
          startIndex-=diff;
          removedChars+=diff;
        }
 else {
          int currentIdx=index - 1;
          while (Character.isWhitespace(sqlSb.charAt(currentIdx))) {
            currentIdx--;
          }
          int end=index + sequence.length();
          int diff=end - currentIdx;
          sqlSb.replace(currentIdx,end,""String_Node_Str"");
          startIndex-=end - currentIdx;
          removedChars+=diff;
        }
      }
    }
    appendIndex=(finalTableSubqueryBounds[1] + selectClauseSb.length()) - removedChars;
  }
 else {
    appendIndex=SqlUtils.indexOfFinalTableSubquery(sqlSb,0)[1];
    StringBuilder limitSb=new StringBuilder(40);
    limitSb.append(""String_Node_Str"").append(limit).append(""String_Node_Str"");
    sqlSb.insert(appendIndex,limitSb);
  }
  if (offset != null) {
    if (limit != null) {
      StringBuilder limitSb=new StringBuilder(120);
      limitSb.append(""String_Node_Str"");
      limitSb.append(limit);
      limitSb.append(""String_Node_Str"");
      limitSb.append(offset);
      limitSb.append(""String_Node_Str"");
      sqlSb.insert(appendIndex,limitSb);
    }
 else {
      StringBuilder limitSb=new StringBuilder(30);
      limitSb.append(""String_Node_Str"").append(offset);
      sqlSb.insert(appendIndex,limitSb);
    }
  }
}",0.4499171205304286
168900,"@Override public boolean supportsVariableLimit(){
  return false;
}","@Override public boolean supportsVariableLimit(){
  return true;
}",0.9473684210526316
168901,"protected void renderLimitOffset(FunctionRenderContext functionRenderContext){
  StringBuilder sqlSb=getSql(functionRenderContext);
  dbmsDialect.appendExtendedSql(sqlSb,DbmsStatementType.SELECT,true,false,null,functionRenderContext.getArgument(1),functionRenderContext.getArgument(2),null,null);
  functionRenderContext.addChunk(sqlSb.toString());
}","protected void renderLimitOffset(FunctionRenderContext functionRenderContext){
  StringBuilder sqlSb=getSql(functionRenderContext);
  if (limitIncludesOffset) {
    String limit=functionRenderContext.getArgument(1);
    String offset=functionRenderContext.getArgument(2);
    if (limit.contains(""String_Node_Str"") || offset.contains(""String_Node_Str"")) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    Integer limitValue=Integer.parseInt(limit);
    Integer offsetValue=Integer.parseInt(offset);
    dbmsDialect.appendExtendedSql(sqlSb,DbmsStatementType.SELECT,true,false,null,Integer.toString(limitValue + offsetValue),offset,null,null);
  }
 else {
    dbmsDialect.appendExtendedSql(sqlSb,DbmsStatementType.SELECT,true,false,null,functionRenderContext.getArgument(1),functionRenderContext.getArgument(2),null,null);
  }
  functionRenderContext.addChunk(sqlSb.toString());
}",0.5604483586869495
168902,"public LimitFunction(DbmsDialect dbmsDialect){
  this.dbmsDialect=dbmsDialect;
}","public LimitFunction(DbmsDialect dbmsDialect){
  this.dbmsDialect=dbmsDialect;
  this.limitIncludesOffset=dbmsDialect.createLimitHandler().limitIncludesOffset();
}",0.6584362139917695
168903,"@Override public void render(FunctionRenderContext context){
  Count count=getCount(context);
  context.addChunk(""String_Node_Str"");
  if (count.isDistinct()) {
    context.addChunk(DISTINCT);
  }
  int argumentStartIndex=count.getArgumentStartIndex();
  if (context.getArgumentsSize() > 1) {
    context.addChunk(""String_Node_Str"");
    context.addArgument(argumentStartIndex);
    context.addChunk(""String_Node_Str"");
    for (int i=argumentStartIndex + 1; i < context.getArgumentsSize(); i++) {
      context.addChunk(""String_Node_Str"");
      context.addArgument(i);
      context.addChunk(""String_Node_Str"");
    }
    context.addChunk(""String_Node_Str"");
    context.addArgument(argumentStartIndex);
    for (int i=argumentStartIndex + 1; i < context.getArgumentsSize(); i++) {
      context.addChunk(""String_Node_Str"");
      context.addArgument(i);
    }
    context.addChunk(""String_Node_Str"");
    context.addArgument(argumentStartIndex);
    context.addChunk(""String_Node_Str"");
    for (int i=argumentStartIndex + 1; i < context.getArgumentsSize(); i++) {
      context.addChunk(""String_Node_Str"");
      context.addArgument(i);
      context.addChunk(""String_Node_Str"");
    }
    context.addChunk(""String_Node_Str"");
  }
 else {
    context.addArgument(argumentStartIndex);
  }
  context.addChunk(""String_Node_Str"");
}","@Override public void render(FunctionRenderContext context){
  Count count=getCount(context);
  context.addChunk(""String_Node_Str"");
  if (count.isDistinct()) {
    context.addChunk(DISTINCT);
  }
  int argumentStartIndex=count.getArgumentStartIndex();
  if (context.getArgumentsSize() > 1) {
    if (ANSI_SQL) {
      if (count.isDistinct()) {
        context.addChunk(""String_Node_Str"");
        context.addArgument(argumentStartIndex);
        int argumentNumber=1;
        for (int i=argumentStartIndex + 1; i < context.getArgumentsSize(); i++, argumentNumber++) {
          context.addChunk(""String_Node_Str"");
          context.addChunk(""String_Node_Str"" + argumentNumber + ""String_Node_Str"");
          context.addArgument(i);
        }
        context.addChunk(""String_Node_Str"");
        context.addChunk(""String_Node_Str"" + argumentNumber + ""String_Node_Str"");
      }
 else {
        context.addChunk(""String_Node_Str"");
        context.addArgument(argumentStartIndex);
        context.addChunk(""String_Node_Str"");
        for (int i=argumentStartIndex + 1; i < context.getArgumentsSize(); i++) {
          context.addChunk(""String_Node_Str"");
          context.addArgument(i);
          context.addChunk(""String_Node_Str"");
        }
        context.addChunk(""String_Node_Str"");
      }
    }
 else {
      context.addChunk(""String_Node_Str"");
      context.addArgument(argumentStartIndex);
      context.addChunk(""String_Node_Str"");
      for (int i=argumentStartIndex + 1; i < context.getArgumentsSize(); i++) {
        context.addChunk(""String_Node_Str"");
        context.addArgument(i);
        context.addChunk(""String_Node_Str"");
      }
      context.addChunk(""String_Node_Str"");
      context.addArgument(argumentStartIndex);
      for (int i=argumentStartIndex + 1; i < context.getArgumentsSize(); i++) {
        context.addChunk(""String_Node_Str"");
        context.addArgument(i);
      }
      context.addChunk(""String_Node_Str"");
      context.addChunk(""String_Node_Str"");
      context.addArgument(argumentStartIndex);
      context.addChunk(""String_Node_Str"");
      for (int i=argumentStartIndex + 1; i < context.getArgumentsSize(); i++) {
        context.addChunk(""String_Node_Str"");
        context.addArgument(i);
        context.addChunk(""String_Node_Str"");
      }
      context.addChunk(""String_Node_Str"");
    }
  }
 else {
    context.addArgument(argumentStartIndex);
  }
  context.addChunk(""String_Node_Str"");
}",0.5350621857634295
168904,"@Test public void testSelectSizeAsDistinctCount2(){
  EntityTransaction tx=em.getTransaction();
  try {
    tx.begin();
    Document d=new Document(""String_Node_Str"");
    Person p1=new Person(""String_Node_Str"");
    Person p2=new Person(""String_Node_Str"");
    d.setOwner(p1);
    d.getPartners().add(p1);
    d.getPartners().add(p2);
    em.persist(p1);
    em.persist(p2);
    em.persist(d);
    Version v1=new Version();
    v1.setDate(Calendar.getInstance());
    v1.setDocument(d);
    Version v2=new Version();
    v2.setDate(Calendar.getInstance());
    v2.setDocument(d);
    Version v3=new Version();
    v3.setDate(Calendar.getInstance());
    v3.setDocument(d);
    em.persist(v1);
    em.persist(v2);
    em.persist(v3);
    tx.commit();
  }
 catch (  Throwable t) {
    t.printStackTrace();
    tx.rollback();
  }
  CriteriaBuilder<Tuple> cb=cbf.create(em,Tuple.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"");
  String expected=""String_Node_Str"" + function(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  assertEquals(expected,cb.getQueryString());
  List<Tuple> result=cb.getResultList();
  assertEquals(3l,result.get(0).get(0));
}","@Test public void testSelectSizeAsDistinctCount2(){
  EntityTransaction tx=em.getTransaction();
  try {
    tx.begin();
    Document d=new Document(""String_Node_Str"");
    Person p1=new Person(""String_Node_Str"");
    Person p2=new Person(""String_Node_Str"");
    d.setOwner(p1);
    d.getPartners().add(p1);
    d.getPartners().add(p2);
    em.persist(p1);
    em.persist(p2);
    em.persist(d);
    Version v1=new Version();
    v1.setDate(Calendar.getInstance());
    v1.setDocument(d);
    Version v2=new Version();
    v2.setDate(Calendar.getInstance());
    v2.setDocument(d);
    Version v3=new Version();
    v3.setDate(Calendar.getInstance());
    v3.setDocument(d);
    em.persist(v1);
    em.persist(v2);
    em.persist(v3);
    tx.commit();
  }
 catch (  Throwable t) {
    t.printStackTrace();
    tx.rollback();
  }
  CriteriaBuilder<Tuple> cb=cbf.create(em,Tuple.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"");
  String expected=""String_Node_Str"" + function(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  assertEquals(expected,cb.getQueryString());
  List<Tuple> result=cb.getResultList();
  assertEquals(3L,result.get(0).get(0));
}",0.9991796554552912
168905,"private Query getValuesExampleQuery(Class<?> clazz,String prefix,String treatFunction,String castedParameter,Set<Attribute<?,?>> attributeSet,String[][] parameterNames,ValueRetriever<?,?>[] pathExpressions,StringBuilder valuesSb,ValuesStrategy strategy,String dummyTable){
  int valueCount=parameterNames.length;
  String[] attributes=new String[attributeSet.size()];
  String[] attributeParameter=new String[attributeSet.size()];
  StringBuilder sb=new StringBuilder(50 + valueCount * prefix.length() * attributeSet.size()* 50);
  sb.append(""String_Node_Str"");
  if (clazz == ValuesEntity.class) {
    sb.append(""String_Node_Str"");
    attributes[0]=attributeSet.iterator().next().getName();
    attributeParameter[0]=castedParameter;
    pathExpressions[0]=new SimpleValueRetriever();
    sb.append(attributes[0]);
    sb.append(',');
  }
 else {
    Iterator<Attribute<?,?>> iter=attributeSet.iterator();
    for (int i=0; i < attributes.length; i++) {
      sb.append(""String_Node_Str"");
      Attribute<?,?> attribute=iter.next();
      attributes[i]=attribute.getName();
      attributeParameter[i]=mainQuery.dbmsDialect.cast(""String_Node_Str"",mainQuery.jpaProvider.getColumnType(attribute));
      pathExpressions[i]=com.blazebit.reflection.ExpressionUtils.getExpression(clazz,attributes[i]);
      sb.append(attributes[i]);
      sb.append(',');
    }
  }
  sb.setCharAt(sb.length() - 1,' ');
  sb.append(""String_Node_Str"");
  sb.append(clazz.getName());
  sb.append(""String_Node_Str"");
  if (strategy == ValuesStrategy.SELECT_VALUES || strategy == ValuesStrategy.VALUES) {
    valuesSb.append(""String_Node_Str"");
  }
 else   if (strategy == ValuesStrategy.SELECT_UNION) {
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + strategy);
  }
  for (int i=0; i < valueCount; i++) {
    if (strategy == ValuesStrategy.SELECT_UNION) {
      valuesSb.append(""String_Node_Str"");
    }
 else {
      valuesSb.append('(');
    }
    for (int j=0; j < attributes.length; j++) {
      sb.append(""String_Node_Str"");
      if (treatFunction != null) {
        sb.append(treatFunction);
        sb.append('(');
        sb.append(""String_Node_Str"");
        sb.append(attributes[j]);
        sb.append(')');
      }
 else {
        sb.append(""String_Node_Str"");
        sb.append(attributes[j]);
      }
      sb.append(""String_Node_Str"");
      sb.append(':');
      int start=sb.length();
      sb.append(prefix);
      sb.append('_');
      sb.append(attributes[j]);
      sb.append('_').append(i);
      String paramName=sb.substring(start,sb.length());
      parameterNames[i][j]=paramName;
      valuesSb.append(attributeParameter[j]);
      valuesSb.append(',');
    }
    if (strategy == ValuesStrategy.SELECT_UNION) {
      valuesSb.setCharAt(valuesSb.length() - 1,' ');
      if (dummyTable != null) {
        valuesSb.append(""String_Node_Str"");
        valuesSb.append(dummyTable);
      }
    }
 else {
      valuesSb.setCharAt(valuesSb.length() - 1,')');
      valuesSb.append(',');
    }
  }
  if (strategy == ValuesStrategy.SELECT_UNION) {
    valuesSb.setCharAt(valuesSb.length() - 1,' ');
  }
 else {
    valuesSb.setCharAt(valuesSb.length() - 1,')');
  }
  String exampleQueryString=sb.toString();
  Query q=mainQuery.em.createQuery(exampleQueryString);
  return q;
}","private Query getValuesExampleQuery(Class<?> clazz,String prefix,String treatFunction,String castedParameter,Set<Attribute<?,?>> attributeSet,String[][] parameterNames,ValueRetriever<?,?>[] pathExpressions,StringBuilder valuesSb,ValuesStrategy strategy,String dummyTable){
  int valueCount=parameterNames.length;
  String[] attributes=new String[attributeSet.size()];
  String[] attributeParameter=new String[attributeSet.size()];
  StringBuilder sb=new StringBuilder(50 + valueCount * prefix.length() * attributeSet.size()* 50);
  sb.append(""String_Node_Str"");
  if (clazz == ValuesEntity.class) {
    sb.append(""String_Node_Str"");
    attributes[0]=attributeSet.iterator().next().getName();
    attributeParameter[0]=mainQuery.dbmsDialect.needsCastParameters() ? castedParameter : ""String_Node_Str"";
    pathExpressions[0]=new SimpleValueRetriever();
    sb.append(attributes[0]);
    sb.append(',');
  }
 else {
    Iterator<Attribute<?,?>> iter=attributeSet.iterator();
    for (int i=0; i < attributes.length; i++) {
      sb.append(""String_Node_Str"");
      Attribute<?,?> attribute=iter.next();
      attributes[i]=attribute.getName();
      attributeParameter[i]=mainQuery.dbmsDialect.needsCastParameters() ? mainQuery.dbmsDialect.cast(""String_Node_Str"",mainQuery.jpaProvider.getColumnType(attribute)) : ""String_Node_Str"";
      pathExpressions[i]=com.blazebit.reflection.ExpressionUtils.getExpression(clazz,attributes[i]);
      sb.append(attributes[i]);
      sb.append(',');
    }
  }
  sb.setCharAt(sb.length() - 1,' ');
  sb.append(""String_Node_Str"");
  sb.append(clazz.getName());
  sb.append(""String_Node_Str"");
  if (strategy == ValuesStrategy.SELECT_VALUES || strategy == ValuesStrategy.VALUES) {
    valuesSb.append(""String_Node_Str"");
  }
 else   if (strategy == ValuesStrategy.SELECT_UNION) {
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + strategy);
  }
  for (int i=0; i < valueCount; i++) {
    if (strategy == ValuesStrategy.SELECT_UNION) {
      valuesSb.append(""String_Node_Str"");
    }
 else {
      valuesSb.append('(');
    }
    for (int j=0; j < attributes.length; j++) {
      sb.append(""String_Node_Str"");
      if (treatFunction != null) {
        sb.append(treatFunction);
        sb.append('(');
        sb.append(""String_Node_Str"");
        sb.append(attributes[j]);
        sb.append(')');
      }
 else {
        sb.append(""String_Node_Str"");
        sb.append(attributes[j]);
      }
      sb.append(""String_Node_Str"");
      sb.append(':');
      int start=sb.length();
      sb.append(prefix);
      sb.append('_');
      sb.append(attributes[j]);
      sb.append('_').append(i);
      String paramName=sb.substring(start,sb.length());
      parameterNames[i][j]=paramName;
      valuesSb.append(attributeParameter[j]);
      valuesSb.append(',');
    }
    if (strategy == ValuesStrategy.SELECT_UNION) {
      valuesSb.setCharAt(valuesSb.length() - 1,' ');
      if (dummyTable != null) {
        valuesSb.append(""String_Node_Str"");
        valuesSb.append(dummyTable);
      }
    }
 else {
      valuesSb.setCharAt(valuesSb.length() - 1,')');
      valuesSb.append(',');
    }
  }
  if (strategy == ValuesStrategy.SELECT_UNION) {
    valuesSb.setCharAt(valuesSb.length() - 1,' ');
  }
 else {
    valuesSb.setCharAt(valuesSb.length() - 1,')');
  }
  String exampleQueryString=sb.toString();
  Query q=mainQuery.em.createQuery(exampleQueryString);
  return q;
}",0.9788878977103777
168906,"@Override public void render(FunctionRenderContext context){
  Count count=getCount(context);
  context.addChunk(""String_Node_Str"");
  if (count.isDistinct()) {
    context.addChunk(DISTINCT);
  }
  int argumentStartIndex=count.getArgumentStartIndex();
  if (context.getArgumentsSize() > 1) {
    context.addChunk(""String_Node_Str"");
    if (count.isDistinct()) {
      context.addArgument(argumentStartIndex);
      for (int i=argumentStartIndex + 1; i < context.getArgumentsSize(); i++) {
        context.addChunk(""String_Node_Str"");
        context.addArgument(i);
      }
    }
 else {
      context.addChunk(""String_Node_Str"");
      context.addArgument(argumentStartIndex);
      context.addChunk(""String_Node_Str"");
      for (int i=argumentStartIndex + 1; i < context.getArgumentsSize(); i++) {
        context.addChunk(""String_Node_Str"");
        context.addArgument(i);
        context.addChunk(""String_Node_Str"");
      }
      context.addChunk(""String_Node_Str"");
    }
    context.addChunk(""String_Node_Str"");
  }
 else {
    context.addArgument(argumentStartIndex);
  }
  context.addChunk(""String_Node_Str"");
}","@Override public void render(FunctionRenderContext context){
  Count count=getCount(context);
  context.addChunk(""String_Node_Str"");
  if (count.isDistinct()) {
    context.addChunk(DISTINCT);
  }
  int argumentStartIndex=count.getArgumentStartIndex();
  if (context.getArgumentsSize() > 1) {
    if (count.isDistinct()) {
      context.addArgument(argumentStartIndex);
      for (int i=argumentStartIndex + 1; i < context.getArgumentsSize(); i++) {
        context.addChunk(""String_Node_Str"");
        context.addArgument(i);
      }
    }
 else {
      context.addChunk(""String_Node_Str"");
      context.addArgument(argumentStartIndex);
      context.addChunk(""String_Node_Str"");
      for (int i=argumentStartIndex + 1; i < context.getArgumentsSize(); i++) {
        context.addChunk(""String_Node_Str"");
        context.addArgument(i);
        context.addChunk(""String_Node_Str"");
      }
      context.addChunk(""String_Node_Str"");
    }
  }
 else {
    context.addArgument(argumentStartIndex);
  }
  context.addChunk(""String_Node_Str"");
}",0.9621421975992612
168907,"@Override public Expression visit(FunctionExpression expression){
  if (com.blazebit.persistence.impl.util.ExpressionUtils.isSizeFunction(expression) && clause != ClauseType.WHERE) {
    PathExpression sizeArg=(PathExpression)expression.getExpressions().get(0);
    String property=sizeArg.getPathReference().getField();
    Class<?> startClass=((JoinNode)sizeArg.getBaseNode()).getPropertyClass();
    ManagedType<?> managedTargetType=MetamodelUtils.resolveManagedTargetType(metamodel,startClass,property);
    PersistenceType collectionIdType;
    if (managedTargetType instanceof EntityType<?>) {
      collectionIdType=((EntityType<?>)managedTargetType).getIdType().getPersistenceType();
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + sizeArg.toString() + ""String_Node_Str"");
    }
    if (collectionIdType == PersistenceType.EMBEDDABLE || !metamodel.entity(startClass).hasSingleIdAttribute() || joinManager.getRoots().size() > 1 || clause == ClauseType.JOIN || !isCountTransformationEnabled() || (hasComplexGroupBySelects && !dbmsDialect.supportsComplexGroupBy()) || (hasGroupBySelects && !isImplicitGroupByFromSelectEnabled()) || jpaProvider.hasJoinTable(startClass,property)) {
      return generateSubquery(sizeArg,startClass);
    }
 else {
      List<PathElementExpression> pathElementExpr=new ArrayList<PathElementExpression>();
      List<JoinNode> roots=joinManager.getRoots();
      String rootAlias=roots.get(0).getAliasInfo().getAlias();
      String rootId=JpaUtils.getIdAttribute(metamodel.entity(roots.get(0).getPropertyClass())).getName();
      pathElementExpr.add(new PropertyExpression(rootAlias));
      pathElementExpr.add(new PropertyExpression(rootId));
      PathExpression groupByExpr=new PathExpression(pathElementExpr);
      joinManager.implicitJoin(groupByExpr,true,null,null,false,false,false);
      if (groupByManager.hasGroupBys() && !groupByManager.existsGroupBy(groupByExpr)) {
        return generateSubquery(sizeArg,startClass);
      }
      sizeArg.setUsedInCollectionFunction(false);
      AggregateExpression countExpr=new AggregateExpression(distinctRequired,""String_Node_Str"",expression.getExpressions());
      transformedExpressions.add(countExpr);
      JoinNode originalNode=(JoinNode)sizeArg.getBaseNode();
      String nodeLookupKey=originalNode.getAliasInfo().getAbsolutePath() + ""String_Node_Str"" + sizeArg.getField();
      PathReference generatedJoin=generatedJoins.get(nodeLookupKey);
      if (generatedJoin == null) {
        joinManager.implicitJoin(sizeArg,true,null,clause,false,false,true);
        generatedJoin=sizeArg.getPathReference();
        generatedJoins.put(((JoinNode)generatedJoin.getBaseNode()).getAliasInfo().getAbsolutePath(),generatedJoin);
      }
 else {
        sizeArg.setPathReference(new SimplePathReference(generatedJoin.getBaseNode(),generatedJoin.getField(),null));
      }
      if (distinctRequired == false) {
        if (joinManager.getCollectionJoins().size() > 1) {
          distinctRequired=true;
          for (          AggregateExpression aggregateExpr : transformedExpressions) {
            aggregateExpr.setDistinct(true);
          }
        }
      }
      groupByManager.groupBy(groupByExpr);
      super.visit(expression);
      return countExpr;
    }
  }
 else {
    super.visit(expression);
  }
  return expression;
}","@Override public Expression visit(FunctionExpression expression){
  if (com.blazebit.persistence.impl.util.ExpressionUtils.isSizeFunction(expression) && clause != ClauseType.WHERE) {
    PathExpression sizeArg=(PathExpression)expression.getExpressions().get(0);
    String property=sizeArg.getPathReference().getField();
    Class<?> startClass=((JoinNode)sizeArg.getBaseNode()).getPropertyClass();
    ManagedType<?> managedTargetType=MetamodelUtils.resolveManagedTargetType(metamodel,startClass,property);
    PersistenceType collectionIdType;
    if (managedTargetType instanceof EntityType<?>) {
      collectionIdType=((EntityType<?>)managedTargetType).getIdType().getPersistenceType();
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + sizeArg.toString() + ""String_Node_Str"");
    }
    if (collectionIdType == PersistenceType.EMBEDDABLE || !metamodel.entity(startClass).hasSingleIdAttribute() || joinManager.getRoots().size() > 1 || clause == ClauseType.JOIN || !isCountTransformationEnabled() || (hasComplexGroupBySelects && !dbmsDialect.supportsComplexGroupBy()) || (hasGroupBySelects && !isImplicitGroupByFromSelectEnabled())) {
      return generateSubquery(sizeArg,startClass);
    }
 else {
      List<PathElementExpression> pathElementExpr=new ArrayList<PathElementExpression>();
      List<JoinNode> roots=joinManager.getRoots();
      String rootAlias=roots.get(0).getAliasInfo().getAlias();
      String rootId=JpaUtils.getIdAttribute(metamodel.entity(roots.get(0).getPropertyClass())).getName();
      pathElementExpr.add(new PropertyExpression(rootAlias));
      pathElementExpr.add(new PropertyExpression(rootId));
      PathExpression groupByExpr=new PathExpression(pathElementExpr);
      joinManager.implicitJoin(groupByExpr,true,null,null,false,false,false);
      if (groupByManager.hasGroupBys() && !groupByManager.existsGroupBy(groupByExpr)) {
        return generateSubquery(sizeArg,startClass);
      }
      sizeArg.setUsedInCollectionFunction(false);
      AggregateExpression countExpr=new AggregateExpression(distinctRequired,""String_Node_Str"",expression.getExpressions());
      transformedExpressions.add(countExpr);
      JoinNode originalNode=(JoinNode)sizeArg.getBaseNode();
      String nodeLookupKey=originalNode.getAliasInfo().getAbsolutePath() + ""String_Node_Str"" + sizeArg.getField();
      PathReference generatedJoin=generatedJoins.get(nodeLookupKey);
      if (generatedJoin == null) {
        joinManager.implicitJoin(sizeArg,true,null,clause,false,false,true);
        generatedJoin=sizeArg.getPathReference();
        generatedJoins.put(((JoinNode)generatedJoin.getBaseNode()).getAliasInfo().getAbsolutePath(),generatedJoin);
      }
 else {
        sizeArg.setPathReference(new SimplePathReference(generatedJoin.getBaseNode(),generatedJoin.getField(),null));
      }
      if (distinctRequired == false) {
        if (joinManager.getCollectionJoins().size() > 1) {
          distinctRequired=true;
          for (          AggregateExpression aggregateExpr : transformedExpressions) {
            aggregateExpr.setDistinct(true);
          }
        }
      }
      groupByManager.groupBy(groupByExpr);
      super.visit(expression);
      return countExpr;
    }
  }
 else {
    super.visit(expression);
  }
  return expression;
}",0.9926260346124904
168908,"public HibernateJpa21Provider(EntityManager em,String dbms,Map<String,CollectionPersister> collectionPersisters,int major,int minor,int fix){
  super(em,dbms,collectionPersisters);
  this.major=major;
  this.minor=minor;
  this.fix=fix;
}","public HibernateJpa21Provider(EntityManager em,String dbms,int major,int minor,int fix){
  super(em,dbms);
  this.major=major;
  this.minor=minor;
  this.fix=fix;
}",0.8159203980099502
168909,"public HibernateJpaProvider(EntityManager em,String dbms,Map<String,CollectionPersister> collectionPersisters){
  try {
    if (em == null) {
      db=DB.OTHER;
    }
 else     if (""String_Node_Str"".equals(dbms)) {
      db=DB.MY_SQL;
    }
 else     if (""String_Node_Str"".equals(dbms)) {
      db=DB.DB2;
    }
 else {
      db=DB.OTHER;
    }
    this.collectionPersisters=collectionPersisters;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","public HibernateJpaProvider(EntityManager em,String dbms){
  try {
    if (em == null) {
      db=DB.OTHER;
    }
 else     if (""String_Node_Str"".equals(dbms)) {
      db=DB.MY_SQL;
    }
 else     if (""String_Node_Str"".equals(dbms)) {
      db=DB.DB2;
    }
 else {
      db=DB.OTHER;
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.7376058041112454
168910,"@Override public JpaProviderFactory getJpaProviderFactory(final EntityManagerFactory entityManagerFactory){
  if (major > 4 || major == 4 && minor >= 3) {
    return new JpaProviderFactory(){
      @Override public JpaProvider createJpaProvider(      EntityManager em){
        return new HibernateJpa21Provider(em,getDbms(entityManagerFactory),getCollectionPersisters(em),major,minor,fix);
      }
    }
;
  }
 else {
    return new JpaProviderFactory(){
      @Override public JpaProvider createJpaProvider(      EntityManager em){
        return new HibernateJpaProvider(em,getDbms(entityManagerFactory),getCollectionPersisters(em));
      }
    }
;
  }
}","@Override public JpaProviderFactory getJpaProviderFactory(final EntityManagerFactory entityManagerFactory){
  if (major > 4 || major == 4 && minor >= 3) {
    return new JpaProviderFactory(){
      @Override public JpaProvider createJpaProvider(      EntityManager em){
        return new HibernateJpa21Provider(em,getDbms(entityManagerFactory),major,minor,fix);
      }
    }
;
  }
 else {
    return new JpaProviderFactory(){
      @Override public JpaProvider createJpaProvider(      EntityManager em){
        return new HibernateJpaProvider(em,getDbms(entityManagerFactory));
      }
    }
;
  }
}",0.9555555555555556
168911,"@Override public JpaProvider createJpaProvider(EntityManager em){
  return new HibernateJpaProvider(em,getDbms(entityManagerFactory),getCollectionPersisters(em));
}","@Override public JpaProvider createJpaProvider(EntityManager em){
  return new HibernateJpaProvider(em,getDbms(entityManagerFactory));
}",0.9066666666666666
168912,"private void checkEntityId(Object entityId){
  if (entityId == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  EntityType<?> entityType=em.getMetamodel().entity(joinManager.getRootNodeOrFail(""String_Node_Str"").getPropertyClass());
  Class<?> idType=entityType.getIdType().getJavaType();
  if (!idType.isInstance(entityId)) {
    throw new IllegalArgumentException(""String_Node_Str"" + entityId.getClass().getName() + ""String_Node_Str""+ idType.getName()+ ""String_Node_Str""+ entityType.getJavaType().getName()+ ""String_Node_Str"");
  }
}","private void checkEntityId(Object entityId){
  if (entityId == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  EntityType<?> entityType=em.getMetamodel().entity(joinManager.getRootNodeOrFail(""String_Node_Str"").getPropertyClass());
  Attribute<?,?> idAttribute=JpaUtils.getIdAttribute(entityType);
  Class<?> idType=JpaUtils.resolveFieldClass(entityType.getJavaType(),idAttribute);
  if (!idType.isInstance(entityId)) {
    throw new IllegalArgumentException(""String_Node_Str"" + entityId.getClass().getName() + ""String_Node_Str""+ idType.getName()+ ""String_Node_Str""+ entityType.getJavaType().getName()+ ""String_Node_Str"");
  }
}",0.8677685950413223
168913,"private boolean applyCascadingDelete(Query baseQuery,AbstractCommonQueryBuilder<?,?,?,?,?> queryBuilder,List<Query> participatingQueries,StringBuilder sb,String cteBaseName,boolean firstCte){
  if (queryBuilder.statementType == DbmsStatementType.DELETE) {
    List<String> cascadingDeleteSqls=cbf.getExtendedQuerySupport().getCascadingDeleteSql(em,baseQuery);
    StringBuilder cascadingDeleteSqlSb=new StringBuilder();
    int cteBaseNameCount=0;
    for (    String cascadingDeleteSql : cascadingDeleteSqls) {
      if (firstCte) {
        firstCte=false;
      }
 else {
        sb.append(""String_Node_Str"");
      }
      participatingQueries.add(baseQuery);
      sb.append(cteBaseName);
      sb.append('_').append(cteBaseNameCount);
      sb.append(""String_Node_Str"");
      cascadingDeleteSqlSb.setLength(0);
      cascadingDeleteSqlSb.append(cascadingDeleteSql);
      dbmsDialect.appendExtendedSql(cascadingDeleteSqlSb,DbmsStatementType.DELETE,false,true,null,null,null,null,null);
      sb.append(cascadingDeleteSqlSb);
      sb.append(""String_Node_Str"");
    }
  }
  return firstCte;
}","private boolean applyCascadingDelete(Query baseQuery,AbstractCommonQueryBuilder<?,?,?,?,?> queryBuilder,List<Query> participatingQueries,StringBuilder sb,String cteBaseName,boolean firstCte){
  if (queryBuilder.statementType == DbmsStatementType.DELETE) {
    List<String> cascadingDeleteSqls=cbf.getExtendedQuerySupport().getCascadingDeleteSql(em,baseQuery);
    StringBuilder cascadingDeleteSqlSb=new StringBuilder();
    int cteBaseNameCount=0;
    for (    String cascadingDeleteSql : cascadingDeleteSqls) {
      if (firstCte) {
        firstCte=false;
      }
 else {
        sb.append(""String_Node_Str"");
      }
      participatingQueries.add(baseQuery);
      sb.append(cteBaseName);
      sb.append('_').append(cteBaseNameCount++);
      sb.append(""String_Node_Str"");
      cascadingDeleteSqlSb.setLength(0);
      cascadingDeleteSqlSb.append(cascadingDeleteSql);
      dbmsDialect.appendExtendedSql(cascadingDeleteSqlSb,DbmsStatementType.DELETE,false,true,null,null,null,null,null);
      sb.append(cascadingDeleteSqlSb);
      sb.append(""String_Node_Str"");
    }
  }
  return firstCte;
}",0.999089253187614
168914,"@Override public Expression visitConditional_factor(JPQLSelectExpressionParser.Conditional_factorContext ctx){
  Predicate p=(Predicate)ctx.conditional_primary().accept(this);
  if (ctx.not != null) {
    if (p instanceof Negatable) {
      ((Negatable)p).setNegated(true);
    }
 else {
      p=new NotPredicate(p);
    }
  }
  return p;
}","@Override public Expression visitConditional_factor(JPQLSelectExpressionParser.Conditional_factorContext ctx){
  Predicate p=(Predicate)ctx.conditional_primary().accept(this);
  if (ctx.not != null) {
    if (p instanceof Negatable) {
      Negatable n=(Negatable)p;
      n.setNegated(!n.isNegated());
    }
 else {
      p=new NotPredicate(p);
    }
  }
  return p;
}",0.7108603667136812
168915,"public Object getParameterValue(String name){
  return parameterManager.getParameterValue(name);
}","public Object getParameterValue(String name){
  Object paramValue=parameterManager.getParameterValue(name);
  if (paramValue instanceof ParameterManager.TemporalCalendarParameterWrapper) {
    ParameterManager.TemporalCalendarParameterWrapper wrappedValue=(ParameterManager.TemporalCalendarParameterWrapper)paramValue;
    return wrappedValue.getValue();
  }
 else   if (paramValue instanceof ParameterManager.TemporalDateParameterWrapper) {
    ParameterManager.TemporalDateParameterWrapper wrappedValue=(ParameterManager.TemporalDateParameterWrapper)paramValue;
    return wrappedValue.getValue();
  }
 else {
    return paramValue;
  }
}",0.2466124661246612
168916,"@Override public Expression transform(Expression original,ClauseType fromClause,boolean joinRequired){
  if (original instanceof PathExpression) {
    PathExpression originalPathExpr=(PathExpression)original;
    if (originalPathExpr.toString().equals(alias)) {
      return substitute;
    }
  }
  return original;
}","@Override public Expression transform(Expression original,ClauseType fromClause,boolean joinRequired){
  if (original instanceof PathExpression) {
    PathExpression originalPathExpr=(PathExpression)original;
    if (originalPathExpr.toString().equals(alias)) {
      return substitute;
    }
  }
 else   if (original instanceof QuantifierExpression) {
    QuantifierExpression originalQuantifierExpr=(QuantifierExpression)original;
    if (originalQuantifierExpr.getExpression().toString().equals(alias)) {
      return substitute;
    }
  }
 else   if (original instanceof FooExpression) {
    FooExpression originalQuantifierExpr=(FooExpression)original;
    if (originalQuantifierExpr.toString().equals(alias)) {
      return substitute;
    }
  }
  return original;
}",0.5674931129476584
168917,"private void loadFunctions(){
  JpqlFunctionGroup jpqlFunctionGroup;
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(null,new LimitFunction(dbmsDialects.get(null)));
  jpqlFunctionGroup.add(""String_Node_Str"",new LimitFunction(dbmsDialects.get(""String_Node_Str"")));
  jpqlFunctionGroup.add(""String_Node_Str"",new LimitFunction(dbmsDialects.get(""String_Node_Str"")));
  jpqlFunctionGroup.add(""String_Node_Str"",new LimitFunction(dbmsDialects.get(""String_Node_Str"")));
  jpqlFunctionGroup.add(""String_Node_Str"",null);
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(null,new PagePositionFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new MySQLPagePositionFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new OraclePagePositionFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new TransactSQLPagePositionFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new TransactSQLPagePositionFunction());
  registerFunction(jpqlFunctionGroup);
  for (  SetOperationType setType : SetOperationType.values()) {
    jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"" + setType.name().toLowerCase(),false);
    for (    Map.Entry<String,DbmsDialect> dbmsDialectEntry : dbmsDialects.entrySet()) {
      jpqlFunctionGroup.add(dbmsDialectEntry.getKey(),new SetFunction(setType,dbmsDialectEntry.getValue()));
    }
    registerFunction(jpqlFunctionGroup);
  }
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(BigDecimal.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Long.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Integer.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Short.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Byte.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Double.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Float.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Boolean.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Character.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Date.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Timestamp.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Time.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Calendar.class)));
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",true);
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2GroupConcatFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new OracleGroupConcatFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new H2GroupConcatFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new MySQLGroupConcatFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new PostgreSQLGroupConcatFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(null,new YearFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessYearFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2YearFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DerbyYearFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SQLServerYearFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SybaseYearFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(null,new MonthFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessMonthFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2MonthFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DerbyMonthFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SQLServerMonthFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SybaseMonthFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(null,new DayFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessDayFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2DayFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DerbyDayFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SQLServerDayFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SybaseDayFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(null,new HourFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessHourFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2HourFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DerbyHourFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SQLServerHourFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SybaseHourFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(null,new MinuteFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessMinuteFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2MinuteFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DerbyMinuteFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SQLServerMinuteFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SybaseMinuteFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(null,new SecondFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessSecondFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2SecondFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DerbySecondFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SQLServerSecondFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SybaseSecondFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessYearDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2YearDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultYearDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultYearDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new MySQLYearDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultYearDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new PostgreSQLYearDiffFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessMonthDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2MonthDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultMonthDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultMonthDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new MySQLMonthDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultMonthDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new PostgreSQLMonthDiffFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessDayDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2DayDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultDayDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultDayDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new MySQLDayDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultDayDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new PostgreSQLDayDiffFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessHourDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2HourDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultHourDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultHourDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new MySQLHourDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultHourDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new PostgreSQLHourDiffFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessMinuteDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2MinuteDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultMinuteDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultMinuteDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new MySQLMinuteDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultMinuteDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new PostgreSQLMinuteDiffFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessSecondDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2SecondDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultSecondDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultSecondDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new MySQLSecondDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultSecondDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new PostgreSQLSecondDiffFunction());
  registerFunction(jpqlFunctionGroup);
}","private void loadFunctions(){
  JpqlFunctionGroup jpqlFunctionGroup;
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(null,new LimitFunction(dbmsDialects.get(null)));
  jpqlFunctionGroup.add(""String_Node_Str"",new LimitFunction(dbmsDialects.get(""String_Node_Str"")));
  jpqlFunctionGroup.add(""String_Node_Str"",new LimitFunction(dbmsDialects.get(""String_Node_Str"")));
  jpqlFunctionGroup.add(""String_Node_Str"",new LimitFunction(dbmsDialects.get(""String_Node_Str"")));
  jpqlFunctionGroup.add(""String_Node_Str"",null);
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(null,new PagePositionFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new MySQLPagePositionFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new OraclePagePositionFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new TransactSQLPagePositionFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new TransactSQLPagePositionFunction());
  registerFunction(jpqlFunctionGroup);
  for (  SetOperationType setType : SetOperationType.values()) {
    jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"" + setType.name().toLowerCase(),false);
    for (    Map.Entry<String,DbmsDialect> dbmsDialectEntry : dbmsDialects.entrySet()) {
      jpqlFunctionGroup.add(dbmsDialectEntry.getKey(),new SetFunction(setType,dbmsDialectEntry.getValue()));
    }
    registerFunction(jpqlFunctionGroup);
  }
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Boolean.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Byte.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Short.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Integer.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Long.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Float.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Double.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Character.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(String.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(BigInteger.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(BigDecimal.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Time.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(java.sql.Date.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Timestamp.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str"",new TreatFunction(Calendar.class)));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str""));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str""));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str""));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str""));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str""));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str""));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str""));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str""));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str""));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str""));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str""));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str""));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str""));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str""));
  registerFunction(new JpqlFunctionGroup(""String_Node_Str""));
  for (  Map.Entry<String,DbmsDialect> dbmsDialectEntry : dbmsDialects.entrySet()) {
    functions.get(""String_Node_Str"").add(dbmsDialectEntry.getKey(),new CastFunction(Boolean.class,dbmsDialectEntry.getValue()));
    functions.get(""String_Node_Str"").add(dbmsDialectEntry.getKey(),new CastFunction(Byte.class,dbmsDialectEntry.getValue()));
    functions.get(""String_Node_Str"").add(dbmsDialectEntry.getKey(),new CastFunction(Short.class,dbmsDialectEntry.getValue()));
    functions.get(""String_Node_Str"").add(dbmsDialectEntry.getKey(),new CastFunction(Integer.class,dbmsDialectEntry.getValue()));
    functions.get(""String_Node_Str"").add(dbmsDialectEntry.getKey(),new CastFunction(Long.class,dbmsDialectEntry.getValue()));
    functions.get(""String_Node_Str"").add(dbmsDialectEntry.getKey(),new CastFunction(Float.class,dbmsDialectEntry.getValue()));
    functions.get(""String_Node_Str"").add(dbmsDialectEntry.getKey(),new CastFunction(Double.class,dbmsDialectEntry.getValue()));
    functions.get(""String_Node_Str"").add(dbmsDialectEntry.getKey(),new CastFunction(Character.class,dbmsDialectEntry.getValue()));
    functions.get(""String_Node_Str"").add(dbmsDialectEntry.getKey(),new CastFunction(String.class,dbmsDialectEntry.getValue()));
    functions.get(""String_Node_Str"").add(dbmsDialectEntry.getKey(),new CastFunction(BigInteger.class,dbmsDialectEntry.getValue()));
    functions.get(""String_Node_Str"").add(dbmsDialectEntry.getKey(),new CastFunction(BigDecimal.class,dbmsDialectEntry.getValue()));
    functions.get(""String_Node_Str"").add(dbmsDialectEntry.getKey(),new CastFunction(Time.class,dbmsDialectEntry.getValue()));
    functions.get(""String_Node_Str"").add(dbmsDialectEntry.getKey(),new CastFunction(java.sql.Date.class,dbmsDialectEntry.getValue()));
    functions.get(""String_Node_Str"").add(dbmsDialectEntry.getKey(),new CastFunction(Timestamp.class,dbmsDialectEntry.getValue()));
    functions.get(""String_Node_Str"").add(dbmsDialectEntry.getKey(),new CastFunction(Calendar.class,dbmsDialectEntry.getValue()));
  }
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",true);
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2GroupConcatFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new OracleGroupConcatFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new H2GroupConcatFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new MySQLGroupConcatFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new PostgreSQLGroupConcatFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(null,new YearFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessYearFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2YearFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DerbyYearFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SQLServerYearFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SybaseYearFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(null,new MonthFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessMonthFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2MonthFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DerbyMonthFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SQLServerMonthFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SybaseMonthFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(null,new DayFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessDayFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2DayFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DerbyDayFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SQLServerDayFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SybaseDayFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(null,new HourFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessHourFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2HourFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DerbyHourFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SQLServerHourFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SybaseHourFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(null,new MinuteFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessMinuteFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2MinuteFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DerbyMinuteFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SQLServerMinuteFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SybaseMinuteFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(null,new SecondFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessSecondFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2SecondFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DerbySecondFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SQLServerSecondFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new SybaseSecondFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessYearDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2YearDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultYearDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultYearDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new MySQLYearDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultYearDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new PostgreSQLYearDiffFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessMonthDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2MonthDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultMonthDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultMonthDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new MySQLMonthDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultMonthDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new PostgreSQLMonthDiffFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessDayDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2DayDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultDayDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultDayDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new MySQLDayDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultDayDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new PostgreSQLDayDiffFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessHourDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2HourDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultHourDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultHourDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new MySQLHourDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultHourDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new PostgreSQLHourDiffFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessMinuteDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2MinuteDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultMinuteDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultMinuteDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new MySQLMinuteDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultMinuteDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new PostgreSQLMinuteDiffFunction());
  registerFunction(jpqlFunctionGroup);
  jpqlFunctionGroup=new JpqlFunctionGroup(""String_Node_Str"",false);
  jpqlFunctionGroup.add(""String_Node_Str"",new AccessSecondDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DB2SecondDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultSecondDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultSecondDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new MySQLSecondDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new DefaultSecondDiffFunction());
  jpqlFunctionGroup.add(""String_Node_Str"",new PostgreSQLSecondDiffFunction());
  registerFunction(jpqlFunctionGroup);
}",0.8214640895922515
168918,"@OneToMany @JoinTable(name=""String_Node_Str"") @MapKeyColumn(table=""String_Node_Str"",nullable=false) public Map<String,PolymorphicBase> getMap(){
  return map;
}","@OneToMany @JoinTable(name=""String_Node_Str"") @MapKeyColumn(table=""String_Node_Str"",nullable=false,length=20) public Map<String,PolymorphicBase> getMap(){
  return map;
}",0.9696969696969696
168919,"@Test public void testMultipleCorrelationsWithJoins(){
  CriteriaBuilder<Document> crit=cbf.create(em,Document.class,""String_Node_Str"").where(""String_Node_Str"").in().from(""String_Node_Str"",""String_Node_Str"").from(""String_Node_Str"",""String_Node_Str"").from(""String_Node_Str"",""String_Node_Str"").select(""String_Node_Str"").leftJoin(""String_Node_Str"",""String_Node_Str"").leftJoin(""String_Node_Str"",""String_Node_Str"").leftJoin(""String_Node_Str"",""String_Node_Str"").where(""String_Node_Str"").eqExpression(""String_Node_Str"").end();
  String expectedQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  assertEquals(expectedQuery,crit.getQueryString());
  crit.getResultList();
}","@Test @Category({NoDatanucleus.class}) public void testMultipleCorrelationsWithJoins(){
  CriteriaBuilder<Document> crit=cbf.create(em,Document.class,""String_Node_Str"").where(""String_Node_Str"").in().from(""String_Node_Str"",""String_Node_Str"").from(""String_Node_Str"",""String_Node_Str"").from(""String_Node_Str"",""String_Node_Str"").select(""String_Node_Str"").leftJoin(""String_Node_Str"",""String_Node_Str"").leftJoin(""String_Node_Str"",""String_Node_Str"").leftJoin(""String_Node_Str"",""String_Node_Str"").where(""String_Node_Str"").eqExpression(""String_Node_Str"").end();
  String expectedQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  assertEquals(expectedQuery,crit.getQueryString());
  crit.getResultList();
}",0.9791535060012634
168920,"@Test public void testSubqueryCorrelatesSimple(){
  CriteriaBuilder<Document> crit=cbf.create(em,Document.class,""String_Node_Str"").where(""String_Node_Str"").in().from(""String_Node_Str"").where(""String_Node_Str"").eqExpression(""String_Node_Str"").end();
  String expectedQuery=""String_Node_Str"";
  assertEquals(expectedQuery,crit.getQueryString());
  crit.getResultList();
}","@Test @Category({NoDatanucleus.class}) public void testSubqueryCorrelatesSimple(){
  CriteriaBuilder<Document> crit=cbf.create(em,Document.class,""String_Node_Str"").where(""String_Node_Str"").in().from(""String_Node_Str"").where(""String_Node_Str"").eqExpression(""String_Node_Str"").end();
  String expectedQuery=""String_Node_Str"";
  assertEquals(expectedQuery,crit.getQueryString());
  crit.getResultList();
}",0.9571984435797666
168921,"protected StringBuilder applyCtes(StringBuilder sqlSb,Query baseQuery,boolean isSubquery,List<Query> participatingQueries){
  if (!isMainQuery || isSubquery || !cteManager.hasCtes() && statementType != DbmsStatementType.DELETE) {
    return null;
  }
  Map<String,String> tableNameRemapping=new LinkedHashMap<String,String>(0);
  StringBuilder sb=new StringBuilder(cteManager.getCtes().size() * 100);
  sb.append(dbmsDialect.getWithClause(cteManager.isRecursive()));
  sb.append(""String_Node_Str"");
  boolean firstCte=true;
  for (  CTEInfo cteInfo : cteManager.getCtes()) {
    Map<DbmsModificationState,String> modificationStates=cteInfo.nonRecursiveCriteriaBuilder.getModificationStates(explicitVersionEntities);
    Query nonRecursiveQuery=cteInfo.nonRecursiveCriteriaBuilder.getQuery(modificationStates);
    participatingQueries.add(nonRecursiveQuery);
    Query recursiveQuery=null;
    if (cteInfo.recursive) {
      modificationStates=cteInfo.nonRecursiveCriteriaBuilder.getModificationStates(explicitVersionEntities);
      recursiveQuery=cteInfo.recursiveCriteriaBuilder.getQuery(modificationStates);
      participatingQueries.add(recursiveQuery);
    }
    firstCte=applyCascadingDelete(nonRecursiveQuery,cteInfo.nonRecursiveCriteriaBuilder,participatingQueries,sb,cteInfo.name,firstCte);
    firstCte=applyAddedCtes(nonRecursiveQuery,cteInfo.nonRecursiveCriteriaBuilder,sb,tableNameRemapping,firstCte);
    firstCte=applyAddedCtes(recursiveQuery,cteInfo.recursiveCriteriaBuilder,sb,tableNameRemapping,firstCte);
    String cteNonRecursiveSqlQuery=getSql(nonRecursiveQuery);
    if (firstCte) {
      firstCte=false;
    }
 else {
      sb.append(""String_Node_Str"");
    }
    String cteName=cteInfo.cteType.getName();
    sb.append(cteName);
    sb.append('(');
    final List<String> attributes=cteInfo.attributes;
    boolean first=true;
    for (int i=0; i < attributes.size(); i++) {
      String[] columns=cbf.getExtendedQuerySupport().getColumnNames(em,cteInfo.cteType,attributes.get(i));
      for (      String column : columns) {
        if (first) {
          first=false;
        }
 else {
          sb.append(""String_Node_Str"");
        }
        sb.append(column);
      }
    }
    sb.append(')');
    sb.append(""String_Node_Str"");
    sb.append(cteNonRecursiveSqlQuery);
    if (cteInfo.recursive) {
      String cteRecursiveSqlQuery=getSql(recursiveQuery);
      if (cteInfo.unionAll) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
      }
      sb.append(cteRecursiveSqlQuery);
    }
 else     if (!dbmsDialect.supportsNonRecursiveWithClause()) {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      for (int i=1; i < attributes.size(); i++) {
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
  }
  firstCte=applyCascadingDelete(baseQuery,this,participatingQueries,sb,""String_Node_Str"",firstCte);
  if (firstCte) {
    return null;
  }
  for (  CTEInfo cteInfo : cteManager.getCtes()) {
    String cteName=cteInfo.cteType.getName();
    final String subselect=""String_Node_Str"" + cteName + ""String_Node_Str"";
    int subselectIndex=0;
    while ((subselectIndex=sb.indexOf(subselect,subselectIndex)) > -1) {
      sb.replace(subselectIndex,subselectIndex + subselect.length(),cteName);
    }
    final String mainSubselect=""String_Node_Str"" + cteName + ""String_Node_Str"";
    subselectIndex=0;
    while ((subselectIndex=sqlSb.indexOf(mainSubselect,subselectIndex)) > -1) {
      sqlSb.replace(subselectIndex,subselectIndex + mainSubselect.length(),cteName);
    }
  }
  sb.append(""String_Node_Str"");
  for (  Map.Entry<String,String> tableNameRemappingEntry : tableNameRemapping.entrySet()) {
    String sqlAlias=cbf.getExtendedQuerySupport().getSqlAlias(em,baseQuery,tableNameRemappingEntry.getKey());
    String newCteName=tableNameRemappingEntry.getValue();
    applyTableNameRemapping(sqlSb,sqlAlias,newCteName);
  }
  return sb;
}","protected StringBuilder applyCtes(StringBuilder sqlSb,Query baseQuery,boolean isSubquery,List<Query> participatingQueries){
  if (!isMainQuery || isSubquery || !cteManager.hasCtes() && statementType != DbmsStatementType.DELETE) {
    return null;
  }
  Map<String,String> tableNameRemapping=new LinkedHashMap<String,String>(0);
  StringBuilder sb=new StringBuilder(cteManager.getCtes().size() * 100);
  sb.append(dbmsDialect.getWithClause(cteManager.isRecursive()));
  sb.append(""String_Node_Str"");
  boolean firstCte=true;
  for (  CTEInfo cteInfo : cteManager.getCtes()) {
    Map<DbmsModificationState,String> modificationStates=cteInfo.nonRecursiveCriteriaBuilder.getModificationStates(explicitVersionEntities);
    Query nonRecursiveQuery=cteInfo.nonRecursiveCriteriaBuilder.getQuery(modificationStates);
    participatingQueries.add(nonRecursiveQuery);
    Query recursiveQuery=null;
    if (cteInfo.recursive) {
      modificationStates=cteInfo.nonRecursiveCriteriaBuilder.getModificationStates(explicitVersionEntities);
      recursiveQuery=cteInfo.recursiveCriteriaBuilder.getQuery(modificationStates);
      if (!dbmsDialect.supportsJoinsInRecursiveCte() && cteInfo.recursiveCriteriaBuilder.joinManager.hasJoins()) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      participatingQueries.add(recursiveQuery);
    }
    firstCte=applyCascadingDelete(nonRecursiveQuery,cteInfo.nonRecursiveCriteriaBuilder,participatingQueries,sb,cteInfo.name,firstCte);
    firstCte=applyAddedCtes(nonRecursiveQuery,cteInfo.nonRecursiveCriteriaBuilder,sb,tableNameRemapping,firstCte);
    firstCte=applyAddedCtes(recursiveQuery,cteInfo.recursiveCriteriaBuilder,sb,tableNameRemapping,firstCte);
    String cteNonRecursiveSqlQuery=getSql(nonRecursiveQuery);
    if (firstCte) {
      firstCte=false;
    }
 else {
      sb.append(""String_Node_Str"");
    }
    String cteName=cteInfo.cteType.getName();
    sb.append(cteName);
    sb.append('(');
    final List<String> attributes=cteInfo.attributes;
    boolean first=true;
    for (int i=0; i < attributes.size(); i++) {
      String[] columns=cbf.getExtendedQuerySupport().getColumnNames(em,cteInfo.cteType,attributes.get(i));
      for (      String column : columns) {
        if (first) {
          first=false;
        }
 else {
          sb.append(""String_Node_Str"");
        }
        sb.append(column);
      }
    }
    sb.append(')');
    sb.append(""String_Node_Str"");
    sb.append(cteNonRecursiveSqlQuery);
    if (cteInfo.recursive) {
      String cteRecursiveSqlQuery=getSql(recursiveQuery);
      if (cteInfo.unionAll) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
      }
      sb.append(cteRecursiveSqlQuery);
    }
 else     if (!dbmsDialect.supportsNonRecursiveWithClause()) {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      for (int i=1; i < attributes.size(); i++) {
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
  }
  firstCte=applyCascadingDelete(baseQuery,this,participatingQueries,sb,""String_Node_Str"",firstCte);
  if (firstCte) {
    return null;
  }
  for (  CTEInfo cteInfo : cteManager.getCtes()) {
    String cteName=cteInfo.cteType.getName();
    final String subselect=""String_Node_Str"" + cteName + ""String_Node_Str"";
    int subselectIndex=0;
    while ((subselectIndex=sb.indexOf(subselect,subselectIndex)) > -1) {
      sb.replace(subselectIndex,subselectIndex + subselect.length(),cteName);
    }
    final String mainSubselect=""String_Node_Str"" + cteName + ""String_Node_Str"";
    subselectIndex=0;
    while ((subselectIndex=sqlSb.indexOf(mainSubselect,subselectIndex)) > -1) {
      sqlSb.replace(subselectIndex,subselectIndex + mainSubselect.length(),cteName);
    }
  }
  sb.append(""String_Node_Str"");
  for (  Map.Entry<String,String> tableNameRemappingEntry : tableNameRemapping.entrySet()) {
    String sqlAlias=cbf.getExtendedQuerySupport().getSqlAlias(em,baseQuery,tableNameRemappingEntry.getKey());
    String newCteName=tableNameRemappingEntry.getValue();
    applyTableNameRemapping(sqlSb,sqlAlias,newCteName);
  }
  return sb;
}",0.978096947935368
168922,"/** 
 * Builds the clauses needed for the group by clause for a query that uses aggregate functions to work.
 * @return
 */
void buildGroupByClauses(Set<String> clauses){
  if (orderByInfos.isEmpty()) {
    return;
  }
  boolean conditionalContext=queryGenerator.setConditionalContext(false);
  StringBuilder sb=new StringBuilder();
  List<OrderByInfo> infos=orderByInfos;
  int size=infos.size();
  for (int i=0; i < size; i++) {
    final OrderByInfo orderByInfo=infos.get(i);
    String potentialSelectAlias=orderByInfo.getExpression().toString();
    AliasInfo aliasInfo=aliasManager.getAliasInfo(potentialSelectAlias);
    Expression expr;
    if (aliasInfo != null && aliasInfo instanceof SelectInfo) {
      SelectInfo selectInfo=(SelectInfo)aliasInfo;
      expr=selectInfo.getExpression();
    }
 else {
      expr=orderByInfo.getExpression();
    }
    GroupByUsableDetectionVisitor groupByUsableDetectionVisitor=new GroupByUsableDetectionVisitor();
    if (!expr.accept(groupByUsableDetectionVisitor)) {
      sb.setLength(0);
      queryGenerator.setQueryBuffer(sb);
      expr.accept(queryGenerator);
      clauses.add(sb.toString());
    }
  }
  queryGenerator.setConditionalContext(conditionalContext);
}","/** 
 * Builds the clauses needed for the group by clause for a query that uses aggregate functions to work.
 * @return
 */
void buildGroupByClauses(Set<String> clauses){
  if (orderByInfos.isEmpty()) {
    return;
  }
  boolean conditionalContext=queryGenerator.setConditionalContext(false);
  StringBuilder sb=new StringBuilder();
  List<OrderByInfo> infos=orderByInfos;
  int size=infos.size();
  for (int i=0; i < size; i++) {
    final OrderByInfo orderByInfo=infos.get(i);
    String potentialSelectAlias=orderByInfo.getExpression().toString();
    AliasInfo aliasInfo=aliasManager.getAliasInfo(potentialSelectAlias);
    Expression expr;
    if (aliasInfo != null && aliasInfo instanceof SelectInfo) {
      SelectInfo selectInfo=(SelectInfo)aliasInfo;
      expr=selectInfo.getExpression();
    }
 else {
      expr=orderByInfo.getExpression();
    }
    GroupByUsableDetectionVisitor groupByUsableDetectionVisitor=new GroupByUsableDetectionVisitor(false);
    if (!expr.accept(groupByUsableDetectionVisitor)) {
      sb.setLength(0);
      queryGenerator.setQueryBuffer(sb);
      expr.accept(queryGenerator);
      clauses.add(sb.toString());
    }
  }
  queryGenerator.setConditionalContext(conditionalContext);
}",0.9979533360622186
168923,"/** 
 * @return an array with length 2. Element 0 is true if the select clause contains a any expression that would be required in group by when aggregates are used. Element 1 is true if the select clause contains a any complex expression that would be required in group by when aggregates are used.
 */
public boolean[] containsGroupBySelect(){
  GroupByExpressionGatheringVisitor gatheringVisitor=new GroupByExpressionGatheringVisitor();
  boolean containsGroupBySelect=false;
  for (  SelectInfo selectInfo : selectInfos) {
    if (!(selectInfo.getExpression() instanceof PathExpression)) {
      selectInfo.getExpression().accept(gatheringVisitor);
    }
 else {
      containsGroupBySelect=true;
    }
  }
  boolean containsComplexGroupBySelect=!gatheringVisitor.getExpressions().isEmpty();
  return new boolean[]{containsGroupBySelect || containsComplexGroupBySelect,containsComplexGroupBySelect};
}","/** 
 * @return an array with length 2. Element 0 is true if the select clause contains a any expression that would be required in group by when aggregates are used. Element 1 is true if the select clause contains a any complex expression that would be required in group by when aggregates are used.
 */
public boolean[] containsGroupBySelect(boolean treatSizeAsAggregate){
  GroupByExpressionGatheringVisitor gatheringVisitor=new GroupByExpressionGatheringVisitor(treatSizeAsAggregate);
  boolean containsGroupBySelect=false;
  for (  SelectInfo selectInfo : selectInfos) {
    if (!(selectInfo.getExpression() instanceof PathExpression)) {
      selectInfo.getExpression().accept(gatheringVisitor);
    }
 else {
      containsGroupBySelect=true;
    }
  }
  boolean containsComplexGroupBySelect=!gatheringVisitor.getExpressions().isEmpty();
  return new boolean[]{containsGroupBySelect || containsComplexGroupBySelect,containsComplexGroupBySelect};
}",0.5909580193756727
168924,"@Override public Expression transform(Expression original,ClauseType fromClause,boolean joinRequired){
  if (fromClause != ClauseType.SELECT) {
    sizeTransformationVisitor.setClause(fromClause);
    sizeTransformationVisitor.setOrderBySelectClause(false);
    boolean[] groupBySelectStatus=selectManager.containsGroupBySelect();
    sizeTransformationVisitor.setHasGroupBySelects(groupBySelectStatus[0]);
    sizeTransformationVisitor.setHasComplexGroupBySelects(groupBySelectStatus[1]);
    return original.accept(sizeTransformationVisitor);
  }
 else {
    return original;
  }
}","@Override public Expression transform(Expression original,ClauseType fromClause,boolean joinRequired){
  if (fromClause != ClauseType.SELECT) {
    sizeTransformationVisitor.setClause(fromClause);
    sizeTransformationVisitor.setOrderBySelectClause(false);
    boolean[] groupBySelectStatus=selectManager.containsGroupBySelect(true);
    sizeTransformationVisitor.setHasGroupBySelects(groupBySelectStatus[0]);
    sizeTransformationVisitor.setHasComplexGroupBySelects(groupBySelectStatus[1]);
    return original.accept(sizeTransformationVisitor);
  }
 else {
    return original;
  }
}",0.9965811965811966
168925,"@Override public void transform(SelectInfo info){
  sizeTransformationVisitor.setOrderBySelectClause(orderByManager.getOrderBySelectAliases().contains(info.getAlias()));
  sizeTransformationVisitor.setClause(ClauseType.SELECT);
  boolean[] groupBySelectStatus=selectManager.containsGroupBySelect();
  sizeTransformationVisitor.setHasGroupBySelects(groupBySelectStatus[0]);
  sizeTransformationVisitor.setHasComplexGroupBySelects(groupBySelectStatus[1]);
  if (ExpressionUtils.isSizeFunction(info.getExpression())) {
    info.setExpression(info.getExpression().accept(sizeTransformationVisitor));
  }
 else {
    info.getExpression().accept(sizeTransformationVisitor);
  }
}","@Override public void transform(SelectInfo info){
  sizeTransformationVisitor.setOrderBySelectClause(orderByManager.getOrderBySelectAliases().contains(info.getAlias()));
  sizeTransformationVisitor.setClause(ClauseType.SELECT);
  boolean[] groupBySelectStatus=selectManager.containsGroupBySelect(true);
  sizeTransformationVisitor.setHasGroupBySelects(groupBySelectStatus[0]);
  sizeTransformationVisitor.setHasComplexGroupBySelects(groupBySelectStatus[1]);
  if (ExpressionUtils.isSizeFunction(info.getExpression())) {
    info.setExpression(info.getExpression().accept(sizeTransformationVisitor));
  }
 else {
    info.getExpression().accept(sizeTransformationVisitor);
  }
}",0.997037037037037
168926,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public FullEntityViewUpdater(ViewType<?> viewType){
  this.entityClass=viewType.getEntityClass();
  Set<MethodAttribute<?,?>> attributes=(Set<MethodAttribute<?,?>>)(Set)viewType.getAttributes();
  MethodAttribute<?,?> idAttribute=viewType.getIdAttribute();
  List<DirtyAttributeFlusher<? extends Object,? extends Object>> flushers=new ArrayList<DirtyAttributeFlusher<? extends Object,? extends Object>>(attributes.size());
  StringBuilder sb=new StringBuilder(100);
  sb.append(""String_Node_Str"" + entityClass.getName() + ""String_Node_Str"");
  boolean first=true;
  boolean supportsQueryFlush=true;
  for (  MethodAttribute<?,?> attribute : attributes) {
    if (attribute == idAttribute) {
      continue;
    }
    if (attribute.isUpdatable()) {
      if (first) {
        first=false;
      }
 else {
        sb.append(""String_Node_Str"");
      }
      String attributeName=attribute.getName();
      String attributeMapping=((MappingAttribute<?,?>)viewType.getAttribute(attributeName)).getMapping();
      DirtyAttributeFlusher<? extends Object,? extends Object> flusher;
      if (attribute.isCollection()) {
        if (attribute instanceof MapAttribute<?,?,?>) {
          flusher=new MapAttributeFlusher<Object,RecordingMap<Map<?,?>,?,?>>((PropertyPathExpression<Object,? extends Map<?,?>>)ExpressionUtils.getExpression(entityClass,attributeMapping));
        }
 else {
          flusher=new CollectionAttributeFlusher<Object,RecordingCollection<Collection<?>,?>>((PropertyPathExpression<Object,? extends Collection<?>>)ExpressionUtils.getExpression(entityClass,attributeMapping));
        }
      }
 else {
        flusher=new BasicAttributeFlusher<Object,Object>(attributeName,(PropertyPathExpression<Object,Object>)ExpressionUtils.getExpression(entityClass,attributeMapping));
      }
      supportsQueryFlush=supportsQueryFlush && flusher.supportsQueryFlush();
      flushers.add(flusher);
      sb.append(attributeMapping);
      sb.append(""String_Node_Str"");
      sb.append(attributeName);
    }
  }
  dirtyAttributeFlushers=flushers.toArray(new DirtyAttributeFlusher[flushers.size()]);
  String idName=idAttribute.getName();
  sb.append(""String_Node_Str"").append(((MappingAttribute<?,?>)viewType.getAttribute(idName)).getMapping()).append(""String_Node_Str"").append(idName);
  idAttributeName=idName;
  useQueryFlush=supportsQueryFlush;
  updateQuery=sb.toString();
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public FullEntityViewUpdater(ViewType<?> viewType){
  this.entityClass=viewType.getEntityClass();
  Set<MethodAttribute<?,?>> attributes=(Set<MethodAttribute<?,?>>)(Set)viewType.getAttributes();
  MethodAttribute<?,?> idAttribute=viewType.getIdAttribute();
  List<DirtyAttributeFlusher<? extends Object,? extends Object>> flushers=new ArrayList<DirtyAttributeFlusher<? extends Object,? extends Object>>(attributes.size());
  StringBuilder sb=new StringBuilder(100);
  sb.append(""String_Node_Str"" + entityClass.getName() + ""String_Node_Str"");
  boolean first=true;
  boolean supportsQueryFlush=true;
  for (  MethodAttribute<?,?> attribute : attributes) {
    if (attribute == idAttribute) {
      continue;
    }
    if (attribute.isUpdatable()) {
      if (first) {
        first=false;
      }
 else {
        sb.append(""String_Node_Str"");
      }
      String attributeName=attribute.getName();
      String attributeMapping=((MappingAttribute<?,?>)viewType.getAttribute(attributeName)).getMapping();
      DirtyAttributeFlusher<? extends Object,? extends Object> flusher;
      if (attribute.isCollection()) {
        if (attribute instanceof MapAttribute<?,?,?>) {
          flusher=new MapAttributeFlusher<Object,RecordingMap<Map<?,?>,?,?>>((PropertyPathExpression<Object,Map<?,?>>)(PropertyPathExpression)ExpressionUtils.getExpression(entityClass,attributeMapping));
        }
 else {
          flusher=new CollectionAttributeFlusher<Object,RecordingCollection<Collection<?>,?>>((PropertyPathExpression<Object,Collection<?>>)(PropertyPathExpression)ExpressionUtils.getExpression(entityClass,attributeMapping));
        }
      }
 else {
        flusher=new BasicAttributeFlusher<Object,Object>(attributeName,(PropertyPathExpression<Object,Object>)ExpressionUtils.getExpression(entityClass,attributeMapping));
      }
      supportsQueryFlush=supportsQueryFlush && flusher.supportsQueryFlush();
      flushers.add(flusher);
      sb.append(attributeMapping);
      sb.append(""String_Node_Str"");
      sb.append(attributeName);
    }
  }
  dirtyAttributeFlushers=flushers.toArray(new DirtyAttributeFlusher[flushers.size()]);
  String idName=idAttribute.getName();
  sb.append(""String_Node_Str"").append(((MappingAttribute<?,?>)viewType.getAttribute(idName)).getMapping()).append(""String_Node_Str"").append(idName);
  idAttributeName=idName;
  useQueryFlush=supportsQueryFlush;
  updateQuery=sb.toString();
}",0.9127598858540562
168927,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public PartialEntityViewUpdater(ViewType<?> viewType){
  this.entityClass=viewType.getEntityClass();
  Set<MethodAttribute<?,?>> attributes=(Set<MethodAttribute<?,?>>)(Set)viewType.getAttributes();
  MethodAttribute<?,?> idAttribute=viewType.getIdAttribute();
  List<DirtyAttributeFlusher<? extends Object,? extends Object>> flushers=new ArrayList<DirtyAttributeFlusher<? extends Object,? extends Object>>(attributes.size());
  List<String> attributeUpdateList=new ArrayList<String>(attributes.size());
  StringBuilder sb=new StringBuilder(100);
  int length=0;
  for (  MethodAttribute<?,?> attribute : attributes) {
    if (attribute == idAttribute) {
      continue;
    }
    if (attribute.isUpdatable()) {
      String attributeName=attribute.getName();
      String attributeMapping=((MappingAttribute<?,?>)viewType.getAttribute(attributeName)).getMapping();
      sb.setLength(0);
      sb.append(attributeMapping);
      sb.append(""String_Node_Str"");
      sb.append(attributeName);
      if (attribute.isCollection()) {
        if (attribute instanceof MapAttribute<?,?,?>) {
          flushers.add(new MapAttributeFlusher<Object,RecordingMap<Map<?,?>,?,?>>((PropertyPathExpression<Object,? extends Map<?,?>>)ExpressionUtils.getExpression(entityClass,attributeMapping)));
        }
 else {
          flushers.add(new CollectionAttributeFlusher<Object,RecordingCollection<Collection<?>,?>>((PropertyPathExpression<Object,? extends Collection<?>>)ExpressionUtils.getExpression(entityClass,attributeMapping)));
        }
      }
 else {
        flushers.add(new BasicAttributeFlusher<Object,Object>(attributeName,(PropertyPathExpression<Object,Object>)ExpressionUtils.getExpression(entityClass,attributeMapping)));
      }
      attributeUpdateList.add(sb.toString());
      length+=sb.length() + 2;
    }
  }
  dirtyStateFieldUpdates=attributeUpdateList.toArray(new String[attributeUpdateList.size()]);
  dirtyAttributeFlushers=flushers.toArray(new DirtyAttributeFlusher[flushers.size()]);
  String idName=idAttribute.getName();
  idAttributeName=idName;
  updateStart=""String_Node_Str"" + entityClass.getName() + ""String_Node_Str"";
  updateEnd=""String_Node_Str"" + ((MappingAttribute<?,?>)viewType.getAttribute(idName)).getMapping() + ""String_Node_Str""+ idName;
  bufferSize=updateStart.length() + updateEnd.length() + length;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public PartialEntityViewUpdater(ViewType<?> viewType){
  this.entityClass=viewType.getEntityClass();
  Set<MethodAttribute<?,?>> attributes=(Set<MethodAttribute<?,?>>)(Set)viewType.getAttributes();
  MethodAttribute<?,?> idAttribute=viewType.getIdAttribute();
  List<DirtyAttributeFlusher<? extends Object,? extends Object>> flushers=new ArrayList<DirtyAttributeFlusher<? extends Object,? extends Object>>(attributes.size());
  List<String> attributeUpdateList=new ArrayList<String>(attributes.size());
  StringBuilder sb=new StringBuilder(100);
  int length=0;
  for (  MethodAttribute<?,?> attribute : attributes) {
    if (attribute == idAttribute) {
      continue;
    }
    if (attribute.isUpdatable()) {
      String attributeName=attribute.getName();
      String attributeMapping=((MappingAttribute<?,?>)viewType.getAttribute(attributeName)).getMapping();
      sb.setLength(0);
      sb.append(attributeMapping);
      sb.append(""String_Node_Str"");
      sb.append(attributeName);
      if (attribute.isCollection()) {
        if (attribute instanceof MapAttribute<?,?,?>) {
          flushers.add(new MapAttributeFlusher<Object,RecordingMap<Map<?,?>,?,?>>((PropertyPathExpression<Object,Map<?,?>>)(PropertyPathExpression)ExpressionUtils.getExpression(entityClass,attributeMapping)));
        }
 else {
          flushers.add(new CollectionAttributeFlusher<Object,RecordingCollection<Collection<?>,?>>((PropertyPathExpression<Object,Collection<?>>)(PropertyPathExpression)ExpressionUtils.getExpression(entityClass,attributeMapping)));
        }
      }
 else {
        flushers.add(new BasicAttributeFlusher<Object,Object>(attributeName,(PropertyPathExpression<Object,Object>)ExpressionUtils.getExpression(entityClass,attributeMapping)));
      }
      attributeUpdateList.add(sb.toString());
      length+=sb.length() + 2;
    }
  }
  dirtyStateFieldUpdates=attributeUpdateList.toArray(new String[attributeUpdateList.size()]);
  dirtyAttributeFlushers=flushers.toArray(new DirtyAttributeFlusher[flushers.size()]);
  String idName=idAttribute.getName();
  idAttributeName=idName;
  updateStart=""String_Node_Str"" + entityClass.getName() + ""String_Node_Str"";
  updateEnd=""String_Node_Str"" + ((MappingAttribute<?,?>)viewType.getAttribute(idName)).getMapping() + ""String_Node_Str""+ idName;
  bufferSize=updateStart.length() + updateEnd.length() + length;
}",0.8361746361746362
168928,"@SuppressWarnings(""String_Node_Str"") private <T>Class<? extends T> createProxyClass(ViewType<T> viewType,boolean unsafe){
  Class<?> clazz=viewType.getJavaType();
  String suffix=unsafe ? ""String_Node_Str"" : ""String_Node_Str"";
  String proxyClassName=clazz.getName() + ""String_Node_Str"" + suffix;
  CtClass cc=pool.makeClass(proxyClassName);
  CtClass superCc;
  ClassPath classPath=new ClassClassPath(clazz);
  pool.insertClassPath(classPath);
  try {
    superCc=pool.get(clazz.getName());
    if (clazz.isInterface()) {
      cc.addInterface(superCc);
    }
 else {
      cc.setSuperclass(superCc);
    }
    CtField initialStateField=null;
    CtField dirtyStateField=null;
    if (viewType.isUpdateable()) {
      cc.addInterface(pool.get(UpdateableProxy.class.getName()));
      addGetEntityViewClass(cc,clazz);
      dirtyStateField=new CtField(pool.get(Object[].class.getName()),""String_Node_Str"",cc);
      dirtyStateField.setModifiers(getModifiers(false));
      cc.addField(dirtyStateField);
      addGetter(cc,dirtyStateField,""String_Node_Str"");
      if (viewType.isPartiallyUpdateable()) {
        initialStateField=new CtField(pool.get(Object[].class.getName()),""String_Node_Str"",cc);
        initialStateField.setModifiers(getModifiers(false));
        cc.addField(initialStateField);
        addStateElementGetter(cc,initialStateField,""String_Node_Str"",0);
        addGetter(cc,initialStateField,""String_Node_Str"");
      }
    }
    Set<MethodAttribute<? super T,?>> attributes=viewType.getAttributes();
    CtField[] attributeFields=new CtField[attributes.size()];
    CtClass[] attributeTypes=new CtClass[attributes.size()];
    int i=1;
    MethodAttribute<? super T,?> idAttribute=viewType.getIdAttribute();
    CtField idField=addMembersForAttribute(idAttribute,clazz,cc,initialStateField,dirtyStateField,0,-1);
    attributeFields[0]=idField;
    attributeTypes[0]=idField.getType();
    attributes.remove(idAttribute);
    if (viewType.isUpdateable() && !viewType.isPartiallyUpdateable()) {
      addGetter(cc,idField,""String_Node_Str"",Object.class);
      addGetter(cc,null,""String_Node_Str"",Object[].class);
    }
    int dirtyStateIndex=0;
    for (    MethodAttribute<?,?> attribute : attributes) {
      if (attribute == idAttribute) {
        continue;
      }
      CtField attributeField=addMembersForAttribute(attribute,clazz,cc,initialStateField,dirtyStateField,i,dirtyStateIndex);
      attributeFields[i]=attributeField;
      attributeTypes[i]=attributeField.getType();
      i++;
      if (attribute.isUpdateable()) {
        dirtyStateIndex++;
      }
    }
    CtClass equalsDeclaringClass=superCc.getMethod(""String_Node_Str"",getEqualsDesc()).getDeclaringClass();
    CtClass hashCodeDeclaringClass=superCc.getMethod(""String_Node_Str"",getHashCodeDesc()).getDeclaringClass();
    boolean hasCustomEqualsHashCode=false;
    if (!""String_Node_Str"".equals(equalsDeclaringClass.getName())) {
      hasCustomEqualsHashCode=true;
      LOG.warning(""String_Node_Str"" + equalsDeclaringClass.getName() + ""String_Node_Str"");
    }
    if (!""String_Node_Str"".equals(hashCodeDeclaringClass.getName())) {
      hasCustomEqualsHashCode=true;
      LOG.warning(""String_Node_Str"" + hashCodeDeclaringClass.getName() + ""String_Node_Str"");
    }
    if (!hasCustomEqualsHashCode) {
      cc.addMethod(createEquals(cc,idField));
      cc.addMethod(createHashCode(cc,idField));
    }
    if (clazz.isInterface()) {
      cc.addConstructor(createConstructor(cc,attributeFields,attributeTypes,initialStateField,dirtyStateField,attributeFields.length,dirtyStateIndex,unsafe));
    }
    Set<MappingConstructor<T>> constructors=viewType.getConstructors();
    for (    MappingConstructor<?> constructor : constructors) {
      int constructorParameterCount=1 + attributes.size() + constructor.getParameterAttributes().size();
      CtClass[] constructorAttributeTypes=new CtClass[constructorParameterCount];
      System.arraycopy(attributeTypes,0,constructorAttributeTypes,0,1 + attributes.size());
      CtConstructor superConstructor=findConstructor(superCc,constructor);
      System.arraycopy(superConstructor.getParameterTypes(),0,constructorAttributeTypes,1 + attributes.size(),superConstructor.getParameterTypes().length);
      cc.addConstructor(createConstructor(cc,attributeFields,constructorAttributeTypes,initialStateField,dirtyStateField,attributeFields.length,dirtyStateIndex,unsafe));
    }
    try {
      if (unsafe) {
        return (Class<? extends T>)UnsafeHelper.define(cc.getName(),cc.toBytecode(),clazz);
      }
 else {
        return cc.toClass(clazz.getClassLoader(),null);
      }
    }
 catch (    CannotCompileException ex) {
      if (ex.getCause() instanceof LinkageError) {
        LinkageError error=(LinkageError)ex.getCause();
        try {
          return (Class<? extends T>)pool.getClassLoader().loadClass(proxyClassName);
        }
 catch (        ClassNotFoundException cnfe) {
          throw error;
        }
      }
 else {
        throw ex;
      }
    }
  }
 catch (  Exception ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
 finally {
    pool.removeClassPath(classPath);
  }
}","@SuppressWarnings(""String_Node_Str"") private <T>Class<? extends T> createProxyClass(ViewType<T> viewType,boolean unsafe){
  Class<?> clazz=viewType.getJavaType();
  String suffix=unsafe ? ""String_Node_Str"" : ""String_Node_Str"";
  String proxyClassName=clazz.getName() + ""String_Node_Str"" + suffix;
  CtClass cc=pool.makeClass(proxyClassName);
  CtClass superCc;
  ClassPath classPath=new ClassClassPath(clazz);
  pool.insertClassPath(classPath);
  try {
    superCc=pool.get(clazz.getName());
    if (clazz.isInterface()) {
      cc.addInterface(superCc);
    }
 else {
      cc.setSuperclass(superCc);
    }
    CtField initialStateField=null;
    CtField dirtyStateField=null;
    if (viewType.isUpdateable()) {
      cc.addInterface(pool.get(UpdateableProxy.class.getName()));
      addGetEntityViewClass(cc,clazz);
      dirtyStateField=new CtField(pool.get(Object[].class.getName()),""String_Node_Str"",cc);
      dirtyStateField.setModifiers(getModifiers(false));
      cc.addField(dirtyStateField);
      addGetter(cc,dirtyStateField,""String_Node_Str"");
      if (viewType.isPartiallyUpdateable()) {
        initialStateField=new CtField(pool.get(Object[].class.getName()),""String_Node_Str"",cc);
        initialStateField.setModifiers(getModifiers(false));
        cc.addField(initialStateField);
        addStateElementGetter(cc,initialStateField,""String_Node_Str"",0);
        addGetter(cc,initialStateField,""String_Node_Str"");
      }
    }
    Set<MethodAttribute<? super T,?>> attributes=viewType.getAttributes();
    CtField[] attributeFields=new CtField[attributes.size()];
    CtClass[] attributeTypes=new CtClass[attributes.size()];
    int i=1;
    MethodAttribute<? super T,?> idAttribute=viewType.getIdAttribute();
    CtField idField=addMembersForAttribute(idAttribute,clazz,cc,initialStateField,dirtyStateField,0,-1);
    attributeFields[0]=idField;
    attributeTypes[0]=idField.getType();
    attributes.remove(idAttribute);
    if (viewType.isUpdateable() && !viewType.isPartiallyUpdateable()) {
      addGetter(cc,idField,""String_Node_Str"",Object.class);
      addGetter(cc,null,""String_Node_Str"",Object[].class);
    }
    int dirtyStateIndex=0;
    for (    MethodAttribute<?,?> attribute : attributes) {
      if (attribute == idAttribute) {
        continue;
      }
      CtField attributeField=addMembersForAttribute(attribute,clazz,cc,initialStateField,dirtyStateField,i,dirtyStateIndex);
      attributeFields[i]=attributeField;
      attributeTypes[i]=attributeField.getType();
      i++;
      if (attribute.isUpdateable()) {
        dirtyStateIndex++;
      }
    }
    CtClass equalsDeclaringClass=superCc.getMethod(""String_Node_Str"",getEqualsDesc()).getDeclaringClass();
    CtClass hashCodeDeclaringClass=superCc.getMethod(""String_Node_Str"",getHashCodeDesc()).getDeclaringClass();
    boolean hasCustomEqualsHashCode=false;
    if (!""String_Node_Str"".equals(equalsDeclaringClass.getName())) {
      hasCustomEqualsHashCode=true;
      LOG.warning(""String_Node_Str"" + equalsDeclaringClass.getName() + ""String_Node_Str"");
    }
    if (!""String_Node_Str"".equals(hashCodeDeclaringClass.getName())) {
      hasCustomEqualsHashCode=true;
      LOG.warning(""String_Node_Str"" + hashCodeDeclaringClass.getName() + ""String_Node_Str"");
    }
    if (!hasCustomEqualsHashCode) {
      cc.addMethod(createEquals(cc,idField));
      cc.addMethod(createHashCode(cc,idField));
    }
    if (clazz.isInterface()) {
      cc.addConstructor(createConstructor(cc,attributeFields,attributeTypes,initialStateField,dirtyStateField,attributeFields.length,dirtyStateIndex,unsafe));
    }
    Set<MappingConstructor<T>> constructors=viewType.getConstructors();
    for (    MappingConstructor<?> constructor : constructors) {
      int constructorParameterCount=1 + attributes.size() + constructor.getParameterAttributes().size();
      CtClass[] constructorAttributeTypes=new CtClass[constructorParameterCount];
      System.arraycopy(attributeTypes,0,constructorAttributeTypes,0,1 + attributes.size());
      CtConstructor superConstructor=findConstructor(superCc,constructor);
      System.arraycopy(superConstructor.getParameterTypes(),0,constructorAttributeTypes,1 + attributes.size(),superConstructor.getParameterTypes().length);
      cc.addConstructor(createConstructor(cc,attributeFields,constructorAttributeTypes,initialStateField,dirtyStateField,attributeFields.length,dirtyStateIndex,unsafe));
    }
    try {
      if (unsafe) {
        return (Class<? extends T>)UnsafeHelper.define(cc.getName(),cc.toBytecode(),clazz);
      }
 else {
        return cc.toClass(clazz.getClassLoader(),null);
      }
    }
 catch (    CannotCompileException ex) {
      if (ex.getCause() instanceof LinkageError) {
        LinkageError error=(LinkageError)ex.getCause();
        try {
          return (Class<? extends T>)pool.getClassLoader().loadClass(proxyClassName);
        }
 catch (        ClassNotFoundException cnfe) {
          throw error;
        }
      }
 else {
        throw ex;
      }
    }
catch (    LinkageError error) {
      try {
        return (Class<? extends T>)pool.getClassLoader().loadClass(proxyClassName);
      }
 catch (      ClassNotFoundException cnfe) {
        throw error;
      }
    }
  }
 catch (  Exception ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
 finally {
    pool.removeClassPath(classPath);
  }
}",0.9769252682556262
168929,"private List<List<Attribute<?,?>>> getAndCheckAttributes(String[] attributes){
  List<List<Attribute<?,?>>> attrs=new ArrayList<List<Attribute<?,?>>>(attributes.length);
  for (int i=0; i < attributes.length; i++) {
    if (attributes[i] == null) {
      throw new NullPointerException(""String_Node_Str"" + i);
    }
    if (attributes[i].isEmpty()) {
      throw new IllegalArgumentException(""String_Node_Str"" + i);
    }
    attrs.add(getAndCheckAttributePath(attributes[i]));
  }
  return attrs;
}","private List<List<Attribute<?,?>>> getAndCheckAttributes(String[] attributes){
  List<List<Attribute<?,?>>> attrs=new ArrayList<List<Attribute<?,?>>>(attributes.length);
  for (int i=0; i < attributes.length; i++) {
    if (attributes[i] == null) {
      throw new NullPointerException(""String_Node_Str"" + i);
    }
    if (attributes[i].isEmpty()) {
      throw new IllegalArgumentException(""String_Node_Str"" + i);
    }
    attrs.add(JpaUtils.getBasicAttributePath(getMetamodel(),entityType,attributes[i]));
  }
  return attrs;
}",0.9223300970873788
168930,"@Override public SelectBuilder<X> bind(String attributeName){
  entityType.getAttribute(attributeName);
  Integer attributeBindIndex=bindingMap.get(attributeName);
  if (attributeBindIndex != null) {
    throw new IllegalArgumentException(""String_Node_Str"" + attributeName + ""String_Node_Str"");
  }
  bindingMap.put(attributeName,selectManager.getSelectInfos().size());
  return this;
}","@Override public SelectBuilder<X> bind(String attributeName){
  if (entityType.getAttribute(attributeName) == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + attributeName + ""String_Node_Str""+ entityType.getName()+ ""String_Node_Str"");
  }
  Integer attributeBindIndex=bindingMap.get(attributeName);
  if (attributeBindIndex != null) {
    throw new IllegalArgumentException(""String_Node_Str"" + attributeName + ""String_Node_Str"");
  }
  bindingMap.put(attributeName,selectManager.getSelectInfos().size());
  return this;
}",0.6457883369330454
168931,"@Override @SuppressWarnings(""String_Node_Str"") public X set(String attributeName,Object value){
  entityType.getAttribute(attributeName);
  String attributeValue=setAttributes.get(attributeName);
  if (attributeValue != null) {
    throw new IllegalArgumentException(""String_Node_Str"" + attributeName + ""String_Node_Str"");
  }
  String paramName=parameterManager.addParameter(value);
  setAttributes.put(attributeName,paramName);
  return (X)this;
}","@Override @SuppressWarnings(""String_Node_Str"") public X set(String attributeName,Object value){
  JpaUtils.getBasicAttributePath(getMetamodel(),entityType,attributeName);
  String attributeValue=setAttributes.get(attributeName);
  if (attributeValue != null) {
    throw new IllegalArgumentException(""String_Node_Str"" + attributeName + ""String_Node_Str"");
  }
  String paramName=parameterManager.addParameter(value);
  setAttributes.put(attributeName,paramName);
  return (X)this;
}",0.9344790547798066
168932,"@Test @Category({NoHibernate.class}) public void testBuggyHqlIn(){
  CriteriaBuilder<Document> criteria=cbf.create(em,Document.class,""String_Node_Str"");
  List<Integer> indicies=Arrays.asList(new Integer[]{1,2,3,4,5});
  criteria.where(""String_Node_Str"").eqExpression(""String_Node_Str"").whereOr().where(""String_Node_Str"").eqExpression(""String_Node_Str"").where(""String_Node_Str"").in(indicies).endOr();
  assertEquals(""String_Node_Str"",criteria.getQueryString());
  criteria.getResultList();
}","@Test @Category({NoHibernate.class}) public void testBuggyHqlIn(){
  CriteriaBuilder<Document> criteria=cbf.create(em,Document.class,""String_Node_Str"");
  List<Integer> indicies=Arrays.asList(new Integer[]{1,2,3,4,5});
  criteria.where(""String_Node_Str"").eqExpression(""String_Node_Str"").whereOr().where(""String_Node_Str"").eqExpression(""String_Node_Str"").where(""String_Node_Str"").in(indicies).endOr();
  assertEquals(""String_Node_Str"" + listParameter(""String_Node_Str"") + ""String_Node_Str"",criteria.getQueryString());
  criteria.getResultList();
}",0.9469623915139826
168933,"@Test @Category({NoHibernate.class}) public void testBuggyHqlIn1(){
  CriteriaBuilder<Document> criteria=cbf.create(em,Document.class,""String_Node_Str"");
  List<Integer> indicies=Arrays.asList(new Integer[]{1,2,3,4,5});
  criteria.whereOr().where(""String_Node_Str"").eqExpression(""String_Node_Str"").whereAnd().where(""String_Node_Str"").eqExpression(""String_Node_Str"").where(""String_Node_Str"").in(indicies).endAnd().endOr();
  assertEquals(""String_Node_Str"",criteria.getQueryString());
  criteria.getResultList();
}","@Test @Category({NoHibernate.class}) public void testBuggyHqlIn1(){
  CriteriaBuilder<Document> criteria=cbf.create(em,Document.class,""String_Node_Str"");
  List<Integer> indicies=Arrays.asList(new Integer[]{1,2,3,4,5});
  criteria.whereOr().where(""String_Node_Str"").eqExpression(""String_Node_Str"").whereAnd().where(""String_Node_Str"").eqExpression(""String_Node_Str"").where(""String_Node_Str"").in(indicies).endAnd().endOr();
  assertEquals(""String_Node_Str"" + listParameter(""String_Node_Str"") + ""String_Node_Str"",criteria.getQueryString());
  criteria.getResultList();
}",0.94902687673772
168934,"/** 
 * Builds the clauses needed for the group by clause for a query that uses aggregate functions to work.
 * @param m
 * @return
 */
void buildGroupByClauses(final Metamodel m,Set<String> clauses){
  boolean conditionalContext=queryGenerator.setConditionalContext(false);
  StringBuilder sb=new StringBuilder();
  Set<PathExpression> componentPaths=new LinkedHashSet<PathExpression>();
  EntitySelectResolveVisitor resolveVisitor=new EntitySelectResolveVisitor(m,componentPaths);
  if (selectInfos.isEmpty()) {
    List<JoinNode> roots=joinManager.getRoots();
    if (roots.size() > 1) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    JoinNode rootNode=roots.get(0);
    String rootAlias=rootNode.getAliasInfo().getAlias();
    List<PathElementExpression> path=Arrays.asList((PathElementExpression)new PropertyExpression(rootAlias));
    resolveVisitor.visit(new PathExpression(path,new SimplePathReference(rootNode,null),false,false));
    for (    PathExpression pathExpr : componentPaths) {
      sb.setLength(0);
      queryGenerator.setQueryBuffer(sb);
      pathExpr.accept(queryGenerator);
      clauses.add(sb.toString());
    }
  }
 else {
    List<SelectInfo> infos=selectInfos;
    int size=selectInfos.size();
    for (int i=0; i < size; i++) {
      final SelectInfo selectInfo=infos.get(i);
      selectInfo.getExpression().accept(resolveVisitor);
      if (componentPaths.size() > 0) {
        for (        PathExpression pathExpr : componentPaths) {
          sb.setLength(0);
          queryGenerator.setQueryBuffer(sb);
          pathExpr.accept(queryGenerator);
          clauses.add(sb.toString());
        }
      }
 else {
        GroupByUsableDetectionVisitor groupByUsableDetectionVisitor=new GroupByUsableDetectionVisitor();
        if (!Boolean.TRUE.equals(selectInfo.getExpression().accept(groupByUsableDetectionVisitor))) {
          sb.setLength(0);
          queryGenerator.setQueryBuffer(sb);
          selectInfo.getExpression().accept(queryGenerator);
          clauses.add(sb.toString());
        }
      }
    }
  }
  queryGenerator.setConditionalContext(conditionalContext);
}","/** 
 * Builds the clauses needed for the group by clause for a query that uses aggregate functions to work.
 * @param m
 * @return
 */
void buildGroupByClauses(final Metamodel m,Set<String> clauses){
  boolean conditionalContext=queryGenerator.setConditionalContext(false);
  StringBuilder sb=new StringBuilder();
  Set<PathExpression> componentPaths=new LinkedHashSet<PathExpression>();
  EntitySelectResolveVisitor resolveVisitor=new EntitySelectResolveVisitor(m,componentPaths);
  if (selectInfos.isEmpty()) {
    List<JoinNode> roots=joinManager.getRoots();
    if (roots.size() > 1) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    JoinNode rootNode=roots.get(0);
    String rootAlias=rootNode.getAliasInfo().getAlias();
    List<PathElementExpression> path=Arrays.asList((PathElementExpression)new PropertyExpression(rootAlias));
    resolveVisitor.visit(new PathExpression(path,new SimplePathReference(rootNode,null),false,false));
    for (    PathExpression pathExpr : componentPaths) {
      sb.setLength(0);
      queryGenerator.setQueryBuffer(sb);
      pathExpr.accept(queryGenerator);
      clauses.add(sb.toString());
    }
  }
 else {
    List<SelectInfo> infos=selectInfos;
    int size=selectInfos.size();
    for (int i=0; i < size; i++) {
      final SelectInfo selectInfo=infos.get(i);
      componentPaths.clear();
      selectInfo.getExpression().accept(resolveVisitor);
      if (componentPaths.size() > 0) {
        for (        PathExpression pathExpr : componentPaths) {
          sb.setLength(0);
          queryGenerator.setQueryBuffer(sb);
          pathExpr.accept(queryGenerator);
          clauses.add(sb.toString());
        }
      }
 else {
        GroupByUsableDetectionVisitor groupByUsableDetectionVisitor=new GroupByUsableDetectionVisitor();
        if (!Boolean.TRUE.equals(selectInfo.getExpression().accept(groupByUsableDetectionVisitor))) {
          sb.setLength(0);
          queryGenerator.setQueryBuffer(sb);
          selectInfo.getExpression().accept(queryGenerator);
          clauses.add(sb.toString());
        }
      }
    }
  }
  queryGenerator.setConditionalContext(conditionalContext);
}",0.9930362116991645
168935,"@Test @Category({NoDatanucleus.class,NoEclipselink.class,NoOpenJPA.class,NoMySQL.class}) public void testSubqueryOrderByLimit(){
  CriteriaBuilder<String> cb=cbf.create(em,String.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"").where(""String_Node_Str"").in().from(Document.class,""String_Node_Str"").select(""String_Node_Str"",""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").union().from(Document.class,""String_Node_Str"").select(""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").startExcept().from(Document.class,""String_Node_Str"").select(""String_Node_Str"",""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").union().from(Document.class,""String_Node_Str"").select(""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").endSetWith().orderByDesc(""String_Node_Str"").setMaxResults(1).endSet().endSet().orderByDesc(""String_Node_Str"").setMaxResults(1).end();
  String expected=""String_Node_Str"" + ""String_Node_Str"" + function(""String_Node_Str"",function(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),function(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  assertEquals(expected,cb.getQueryString());
  List<String> resultList=cb.getResultList();
  assertEquals(1,resultList.size());
  assertEquals(""String_Node_Str"",resultList.get(0));
}","@Test @Category({NoH2.class,NoDatanucleus.class,NoEclipselink.class,NoOpenJPA.class,NoMySQL.class}) public void testSubqueryOrderByLimit(){
  CriteriaBuilder<String> cb=cbf.create(em,String.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"").where(""String_Node_Str"").in().from(Document.class,""String_Node_Str"").select(""String_Node_Str"",""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").union().from(Document.class,""String_Node_Str"").select(""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").startExcept().from(Document.class,""String_Node_Str"").select(""String_Node_Str"",""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").union().from(Document.class,""String_Node_Str"").select(""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").endSetWith().orderByDesc(""String_Node_Str"").setMaxResults(1).endSet().endSet().orderByDesc(""String_Node_Str"").setMaxResults(1).end();
  String expected=""String_Node_Str"" + ""String_Node_Str"" + function(""String_Node_Str"",function(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),function(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  assertEquals(expected,cb.getQueryString());
  List<String> resultList=cb.getResultList();
  assertEquals(1,resultList.size());
  assertEquals(""String_Node_Str"",resultList.get(0));
}",0.9963247577681256
168936,"@SuppressWarnings(""String_Node_Str"") public AbstractModificationCriteriaBuilder(MainQuery mainQuery,boolean isMainQuery,DbmsStatementType statementType,Class<T> clazz,String alias,Class<?> cteClass,Y result,CTEBuilderListener listener){
  super(mainQuery,isMainQuery,statementType,(Class<T>)Tuple.class,null);
  this.entityType=em.getMetamodel().entity(clazz);
  this.entityAlias=alias;
  this.result=result;
  this.listener=listener;
  if (cteClass == null) {
    this.cteType=null;
    this.cteName=null;
    this.isReturningEntityAliasAllowed=false;
    this.returningAttributeBindingMap=new LinkedHashMap<String,String>(0);
  }
 else {
    this.cteType=em.getMetamodel().entity(cteClass);
    this.cteName=cteType.getName();
    this.isReturningEntityAliasAllowed=true;
    this.returningAttributeBindingMap=new LinkedHashMap<String,String>(cteType.getAttributes().size());
  }
}","@SuppressWarnings(""String_Node_Str"") public AbstractModificationCriteriaBuilder(MainQuery mainQuery,boolean isMainQuery,DbmsStatementType statementType,Class<T> clazz,String alias,Class<?> cteClass,Y result,CTEBuilderListener listener){
  super(mainQuery,isMainQuery,statementType,(Class<T>)Tuple.class,null);
  if (alias == null) {
    alias=clazz.getSimpleName().toLowerCase();
  }
 else {
    fromClassExplicitelySet=true;
  }
  this.entityType=em.getMetamodel().entity(clazz);
  this.entityAlias=joinManager.addRoot(entityType,alias);
  this.result=result;
  this.listener=listener;
  if (cteClass == null) {
    this.cteType=null;
    this.cteName=null;
    this.isReturningEntityAliasAllowed=false;
    this.returningAttributeBindingMap=new LinkedHashMap<String,String>(0);
  }
 else {
    this.cteType=em.getMetamodel().entity(cteClass);
    this.cteName=cteType.getName();
    this.isReturningEntityAliasAllowed=true;
    this.returningAttributeBindingMap=new LinkedHashMap<String,String>(cteType.getAttributes().size());
  }
}",0.872784150156413
168937,"@Override protected void getQueryString1(StringBuilder sbSelectFrom){
  sbSelectFrom.append(""String_Node_Str"");
  sbSelectFrom.append(entityType.getName()).append(' ');
  if (entityAlias != null) {
    sbSelectFrom.append(entityAlias);
  }
  appendWhereClause(sbSelectFrom);
}","@Override protected void getQueryString1(StringBuilder sbSelectFrom){
  sbSelectFrom.append(""String_Node_Str"");
  sbSelectFrom.append(entityType.getName()).append(' ');
  sbSelectFrom.append(entityAlias);
  appendWhereClause(sbSelectFrom);
}",0.851063829787234
168938,"public BaseDeleteCriteriaBuilderImpl(MainQuery mainQuery,boolean isMainQuery,Class<T> clazz,String alias,Class<?> cteClass,Y result,CTEBuilderListener listener){
  super(mainQuery,isMainQuery,DbmsStatementType.DELETE,clazz,alias,cteClass,result,listener);
  if (alias == null) {
    alias=clazz.getSimpleName().toLowerCase();
  }
 else {
    fromClassExplicitelySet=true;
  }
  try {
    this.joinManager.addRoot(em.getMetamodel().entity(clazz),alias);
  }
 catch (  IllegalArgumentException ex) {
    throw new IllegalArgumentException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
  }
}","public BaseDeleteCriteriaBuilderImpl(MainQuery mainQuery,boolean isMainQuery,Class<T> clazz,String alias,Class<?> cteClass,Y result,CTEBuilderListener listener){
  super(mainQuery,isMainQuery,DbmsStatementType.DELETE,clazz,alias,cteClass,result,listener);
}",0.5997666277712952
168939,"@Override protected void getQueryString1(StringBuilder sbSelectFrom){
  sbSelectFrom.append(""String_Node_Str"");
  sbSelectFrom.append(entityType.getName()).append(' ');
  if (entityAlias != null) {
    sbSelectFrom.append(entityAlias);
  }
  sbSelectFrom.append(""String_Node_Str"");
  for (  Map.Entry<String,String> attributeEntry : setAttributes.entrySet()) {
    sbSelectFrom.append(attributeEntry.getKey());
    sbSelectFrom.append(""String_Node_Str"");
    sbSelectFrom.append(attributeEntry.getValue());
  }
  appendWhereClause(sbSelectFrom);
}","@Override protected void getQueryString1(StringBuilder sbSelectFrom){
  sbSelectFrom.append(""String_Node_Str"");
  sbSelectFrom.append(entityType.getName()).append(' ');
  sbSelectFrom.append(entityAlias);
  sbSelectFrom.append(""String_Node_Str"");
  for (  Map.Entry<String,String> attributeEntry : setAttributes.entrySet()) {
    sbSelectFrom.append(attributeEntry.getKey());
    sbSelectFrom.append(""String_Node_Str"");
    sbSelectFrom.append(attributeEntry.getValue());
  }
  appendWhereClause(sbSelectFrom);
}",0.927289896128423
168940,"public BaseUpdateCriteriaBuilderImpl(MainQuery mainQuery,boolean isMainQuery,Class<T> clazz,String alias,Class<?> cteClass,Y result,CTEBuilderListener listener){
  super(mainQuery,isMainQuery,DbmsStatementType.UPDATE,clazz,alias,cteClass,result,listener);
  if (alias == null) {
    alias=clazz.getSimpleName().toLowerCase();
  }
 else {
    fromClassExplicitelySet=true;
  }
  try {
    this.joinManager.addRoot(em.getMetamodel().entity(clazz),alias);
  }
 catch (  IllegalArgumentException ex) {
    throw new IllegalArgumentException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
  }
}","public BaseUpdateCriteriaBuilderImpl(MainQuery mainQuery,boolean isMainQuery,Class<T> clazz,String alias,Class<?> cteClass,Y result,CTEBuilderListener listener){
  super(mainQuery,isMainQuery,DbmsStatementType.UPDATE,clazz,alias,cteClass,result,listener);
}",0.5997666277712952
168941,"public HibernateJpaProvider(EntityManager em){
  try {
    if (em == null) {
      db=DB.OTHER;
    }
 else {
      Object session=em.unwrap(Class.forName(""String_Node_Str""));
      Class<?> dialectClass=ExpressionUtils.getValue(session,""String_Node_Str"").getClass();
      WeakReference<Class<?>> key=new WeakReference<Class<?>>(dialectClass);
      DB cacheValue=dbDialectCache.get(key);
      if (cacheValue == null) {
        Set<Class<?>> types=ReflectionUtils.getSuperTypes(dialectClass);
        if (types.contains(Class.forName(""String_Node_Str""))) {
          cacheValue=DB.MY_SQL;
        }
 else         if (types.contains(Class.forName(""String_Node_Str""))) {
          cacheValue=DB.DB2;
        }
 else {
          cacheValue=DB.OTHER;
        }
        dbDialectCache.put(key,cacheValue);
      }
      db=cacheValue;
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","public HibernateJpaProvider(EntityManager em){
  try {
    if (em == null) {
      db=DB.OTHER;
    }
 else {
      Object session=em.unwrap(Class.forName(""String_Node_Str""));
      Class<?> dialectClass=ExpressionUtils.getValue(session,""String_Node_Str"").getClass();
      WeakClassKey key=new WeakClassKey(dialectClass);
      DB cacheValue=dbDialectCache.get(key);
      if (cacheValue == null) {
        Set<Class<?>> types=ReflectionUtils.getSuperTypes(dialectClass);
        if (types.contains(Class.forName(""String_Node_Str""))) {
          cacheValue=DB.MY_SQL;
        }
 else         if (types.contains(Class.forName(""String_Node_Str""))) {
          cacheValue=DB.DB2;
        }
 else {
          cacheValue=DB.OTHER;
        }
        for (        WeakClassKey keyElement : dbDialectCache.keySet()) {
          if (keyElement.get() == null) {
            dbDialectCache.remove(keyElement);
          }
        }
        dbDialectCache.put(key,cacheValue);
      }
      db=cacheValue;
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.8791097622660596
168942,"public AbstractCTECriteriaBuilder(CriteriaBuilderFactoryImpl cbf,EntityManager em,DbmsDialect dbmsDialect,Class<T> clazz,Set<String> registeredFunctions,Y result,CTEBuilderListener listener){
  super(cbf,em,dbmsDialect,clazz,null,registeredFunctions);
  this.result=result;
  this.listener=listener;
  this.cteType=em.getMetamodel().entity(clazz);
  this.cteName=cteType.getName();
  this.bindingMap=new LinkedHashMap<String,Integer>();
}","public AbstractCTECriteriaBuilder(CriteriaBuilderFactoryImpl cbf,EntityManager em,DbmsDialect dbmsDialect,Class<T> clazz,Set<String> registeredFunctions,ParameterManager parameterManager,Y result,CTEBuilderListener listener){
  super(cbf,em,dbmsDialect,clazz,null,registeredFunctions,parameterManager);
  this.result=result;
  this.listener=listener;
  this.cteType=em.getMetamodel().entity(clazz);
  this.cteName=cteType.getName();
  this.bindingMap=new LinkedHashMap<String,Integer>();
}",0.9449838187702264
168943,"protected void applyImplicitJoins(){
  if (implicitJoinsApplied) {
    return;
  }
  final JoinVisitor joinVisitor=new JoinVisitor(joinManager);
  final JoinNodeVisitor joinNodeVisitor=new OnClauseJoinNodeVisitor(joinVisitor){
    @Override public void visit(    JoinNode node){
      super.visit(node);
      node.registerDependencies();
    }
  }
;
  joinVisitor.setFromClause(null);
  joinManager.acceptVisitor(joinNodeVisitor);
  joinVisitor.setFromClause(ClauseType.SELECT);
  selectManager.acceptVisitor(joinVisitor);
  joinVisitor.setFromClause(ClauseType.WHERE);
  whereManager.acceptVisitor(joinVisitor);
  joinVisitor.setFromClause(ClauseType.GROUP_BY);
  groupByManager.acceptVisitor(joinVisitor);
  joinVisitor.setFromClause(ClauseType.HAVING);
  havingManager.acceptVisitor(joinVisitor);
  joinVisitor.setJoinWithObjectLeafAllowed(false);
  joinVisitor.setFromClause(ClauseType.ORDER_BY);
  orderByManager.acceptVisitor(joinVisitor);
  joinVisitor.setJoinWithObjectLeafAllowed(true);
  implicitJoinsApplied=true;
}","protected void applyImplicitJoins(){
  if (implicitJoinsApplied) {
    return;
  }
  final JoinVisitor joinVisitor=new JoinVisitor(joinManager);
  final JoinNodeVisitor joinNodeVisitor=new OnClauseJoinNodeVisitor(joinVisitor){
    @Override public void visit(    JoinNode node){
      super.visit(node);
      node.registerDependencies();
    }
  }
;
  joinVisitor.setFromClause(null);
  joinManager.acceptVisitor(joinNodeVisitor);
  joinVisitor.setFromClause(ClauseType.SELECT);
  joinVisitor.setJoinRequired(isJoinRequiredForSelect());
  selectManager.acceptVisitor(joinVisitor);
  joinVisitor.setJoinRequired(true);
  joinVisitor.setFromClause(ClauseType.WHERE);
  whereManager.acceptVisitor(joinVisitor);
  joinVisitor.setFromClause(ClauseType.GROUP_BY);
  groupByManager.acceptVisitor(joinVisitor);
  joinVisitor.setFromClause(ClauseType.HAVING);
  havingManager.acceptVisitor(joinVisitor);
  joinVisitor.setJoinWithObjectLeafAllowed(false);
  joinVisitor.setFromClause(ClauseType.ORDER_BY);
  orderByManager.acceptVisitor(joinVisitor);
  joinVisitor.setJoinWithObjectLeafAllowed(true);
  implicitJoinsApplied=true;
}",0.955793392275477
168944,"@SuppressWarnings(""String_Node_Str"") public AbstractModificationCriteriaBuilder(CriteriaBuilderFactoryImpl cbf,EntityManager em,DbmsDialect dbmsDialect,Class<T> clazz,String alias,Set<String> registeredFunctions,Class<?> cteClass,Y result,CTEBuilderListener listener){
  super(cbf,em,dbmsDialect,(Class<T>)Tuple.class,null,registeredFunctions);
  this.entityType=em.getMetamodel().entity(clazz);
  this.entityAlias=alias;
  this.result=result;
  this.listener=listener;
  if (cteClass == null) {
    this.cteType=null;
    this.cteName=null;
    this.returningAttributeBindingMap=new LinkedHashMap<String,String>(0);
  }
 else {
    this.cteType=em.getMetamodel().entity(cteClass);
    this.cteName=cteType.getName();
    this.returningAttributeBindingMap=new LinkedHashMap<String,String>(cteType.getAttributes().size());
  }
}","@SuppressWarnings(""String_Node_Str"") public AbstractModificationCriteriaBuilder(CriteriaBuilderFactoryImpl cbf,EntityManager em,DbmsDialect dbmsDialect,Class<T> clazz,String alias,Set<String> registeredFunctions,ParameterManager parameterManager,Class<?> cteClass,Y result,CTEBuilderListener listener){
  super(cbf,em,dbmsDialect,(Class<T>)Tuple.class,null,registeredFunctions,parameterManager);
  this.entityType=em.getMetamodel().entity(clazz);
  this.entityAlias=alias;
  this.result=result;
  this.listener=listener;
  if (cteClass == null) {
    this.cteType=null;
    this.cteName=null;
    this.returningAttributeBindingMap=new LinkedHashMap<String,String>(0);
  }
 else {
    this.cteType=em.getMetamodel().entity(cteClass);
    this.cteName=cteType.getName();
    this.returningAttributeBindingMap=new LinkedHashMap<String,String>(cteType.getAttributes().size());
  }
}",0.9700879765395894
168945,"public BaseDeleteCriteriaBuilderImpl(CriteriaBuilderFactoryImpl cbf,EntityManager em,DbmsDialect dbmsDialect,Class<T> clazz,String alias,Set<String> registeredFunctions,Class<?> cteClass,Y result,CTEBuilderListener listener){
  super(cbf,em,dbmsDialect,clazz,alias,registeredFunctions,cteClass,result,listener);
  if (alias == null) {
    alias=clazz.getSimpleName().toLowerCase();
  }
 else {
    fromClassExplicitelySet=true;
  }
  try {
    this.joinManager.addRoot(em.getMetamodel().entity(clazz),alias);
  }
 catch (  IllegalArgumentException ex) {
    throw new IllegalArgumentException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
  }
}","public BaseDeleteCriteriaBuilderImpl(CriteriaBuilderFactoryImpl cbf,EntityManager em,DbmsDialect dbmsDialect,Class<T> clazz,String alias,Set<String> registeredFunctions,ParameterManager parameterManager,Class<?> cteClass,Y result,CTEBuilderListener listener){
  super(cbf,em,dbmsDialect,clazz,alias,registeredFunctions,parameterManager,cteClass,result,listener);
  if (alias == null) {
    alias=clazz.getSimpleName().toLowerCase();
  }
 else {
    fromClassExplicitelySet=true;
  }
  try {
    this.joinManager.addRoot(em.getMetamodel().entity(clazz),alias);
  }
 catch (  IllegalArgumentException ex) {
    throw new IllegalArgumentException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
  }
}",0.962582538517975
168946,"public BaseInsertCriteriaBuilderImpl(CriteriaBuilderFactoryImpl cbf,EntityManager em,DbmsDialect dbmsDialect,Class<T> clazz,Set<String> registeredFunctions,Class<?> cteClass,Y result,CTEBuilderListener listener){
  super(cbf,em,dbmsDialect,clazz,null,registeredFunctions,cteClass,result,listener);
  if (!jpaProvider.supportsInsertStatement()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","public BaseInsertCriteriaBuilderImpl(CriteriaBuilderFactoryImpl cbf,EntityManager em,DbmsDialect dbmsDialect,Class<T> clazz,Set<String> registeredFunctions,ParameterManager parameterManager,Class<?> cteClass,Y result,CTEBuilderListener listener){
  super(cbf,em,dbmsDialect,clazz,null,registeredFunctions,parameterManager,cteClass,result,listener);
  if (!jpaProvider.supportsInsertStatement()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.9410404624277456
168947,"@Override protected void prepareAndCheck(){
  List<String> attributes=new ArrayList<String>(bindingMap.size());
  List<SelectInfo> originalSelectInfos=new ArrayList<SelectInfo>(selectManager.getSelectInfos());
  List<SelectInfo> newSelectInfos=selectManager.getSelectInfos();
  newSelectInfos.clear();
  for (  Map.Entry<String,Integer> attributeEntry : bindingMap.entrySet()) {
    Integer newPosition=attributes.size();
    attributes.add(attributeEntry.getKey());
    SelectInfo selectInfo=originalSelectInfos.get(attributeEntry.getValue());
    newSelectInfos.add(selectInfo);
    attributeEntry.setValue(newPosition);
  }
}","@Override protected void prepareAndCheck(){
  List<String> attributes=new ArrayList<String>(bindingMap.size());
  List<SelectInfo> originalSelectInfos=new ArrayList<SelectInfo>(selectManager.getSelectInfos());
  List<SelectInfo> newSelectInfos=selectManager.getSelectInfos();
  newSelectInfos.clear();
  for (  Map.Entry<String,Integer> attributeEntry : bindingMap.entrySet()) {
    Integer newPosition=attributes.size();
    attributes.add(attributeEntry.getKey());
    SelectInfo selectInfo=originalSelectInfos.get(attributeEntry.getValue());
    newSelectInfos.add(selectInfo);
    attributeEntry.setValue(newPosition);
  }
  super.prepareAndCheck();
}",0.9789555728760716
168948,"@Override @SuppressWarnings(""String_Node_Str"") public X set(String attributeName,Object value){
  entityType.getAttribute(attributeName);
  setAttributes.add(attributeName);
  parameterManager.addParameterMapping(attributeName,value);
  return (X)this;
}","@Override @SuppressWarnings(""String_Node_Str"") public X set(String attributeName,Object value){
  entityType.getAttribute(attributeName);
  String attributeValue=setAttributes.get(attributeName);
  if (attributeValue != null) {
    throw new IllegalArgumentException(""String_Node_Str"" + attributeName + ""String_Node_Str"");
  }
  String paramName=parameterManager.getParamNameForObject(value);
  setAttributes.put(attributeName,paramName);
  return (X)this;
}",0.6067415730337079
168949,"@Override protected void getQueryString1(StringBuilder sbSelectFrom){
  sbSelectFrom.append(""String_Node_Str"");
  sbSelectFrom.append(entityType.getName()).append(' ');
  sbSelectFrom.append(entityAlias);
  sbSelectFrom.append(""String_Node_Str"");
  for (  String attribute : setAttributes) {
    sbSelectFrom.append(attribute);
    sbSelectFrom.append(""String_Node_Str"");
    sbSelectFrom.append(attribute);
  }
  appendWhereClause(sbSelectFrom);
}","@Override protected void getQueryString1(StringBuilder sbSelectFrom){
  sbSelectFrom.append(""String_Node_Str"");
  sbSelectFrom.append(entityType.getName()).append(' ');
  sbSelectFrom.append(entityAlias);
  sbSelectFrom.append(""String_Node_Str"");
  for (  Map.Entry<String,String> attributeEntry : setAttributes.entrySet()) {
    sbSelectFrom.append(attributeEntry.getKey());
    sbSelectFrom.append(""String_Node_Str"");
    sbSelectFrom.append(attributeEntry.getValue());
  }
  appendWhereClause(sbSelectFrom);
}",0.9
168950,"public BaseUpdateCriteriaBuilderImpl(CriteriaBuilderFactoryImpl cbf,EntityManager em,DbmsDialect dbmsDialect,Class<T> clazz,String alias,Set<String> registeredFunctions,Class<?> cteClass,Y result,CTEBuilderListener listener){
  super(cbf,em,dbmsDialect,clazz,alias,registeredFunctions,cteClass,result,listener);
  if (alias == null) {
    alias=clazz.getSimpleName().toLowerCase();
  }
 else {
    fromClassExplicitelySet=true;
  }
  try {
    this.joinManager.addRoot(em.getMetamodel().entity(clazz),alias);
  }
 catch (  IllegalArgumentException ex) {
    throw new IllegalArgumentException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
  }
}","public BaseUpdateCriteriaBuilderImpl(CriteriaBuilderFactoryImpl cbf,EntityManager em,DbmsDialect dbmsDialect,Class<T> clazz,String alias,Set<String> registeredFunctions,ParameterManager parameterManager,Class<?> cteClass,Y result,CTEBuilderListener listener){
  super(cbf,em,dbmsDialect,clazz,alias,registeredFunctions,parameterManager,cteClass,result,listener);
  if (alias == null) {
    alias=clazz.getSimpleName().toLowerCase();
  }
 else {
    fromClassExplicitelySet=true;
  }
  try {
    this.joinManager.addRoot(em.getMetamodel().entity(clazz),alias);
  }
 catch (  IllegalArgumentException ex) {
    throw new IllegalArgumentException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
  }
}",0.962582538517975
168951,"public CTECriteriaBuilderImpl(CriteriaBuilderFactoryImpl cbf,EntityManager em,DbmsDialect dbmsDialect,Class<T> clazz,Set<String> registeredFunctions,Y result,CTEBuilderListener listener){
  super(cbf,em,dbmsDialect,clazz,registeredFunctions,result,listener);
}","public CTECriteriaBuilderImpl(CriteriaBuilderFactoryImpl cbf,EntityManager em,DbmsDialect dbmsDialect,Class<T> clazz,Set<String> registeredFunctions,ParameterManager parameterManager,Y result,CTEBuilderListener listener){
  super(cbf,em,dbmsDialect,clazz,registeredFunctions,parameterManager,result,listener);
}",0.9106830122591943
168952,"<X,Y>SelectCTECriteriaBuilder<X,Y> with(Class<X> cteClass,Y result){
  CTECriteriaBuilderImpl<X,Y,T> cteBuilder=new CTECriteriaBuilderImpl<X,Y,T>(cbf,em,dbmsDialect,cteClass,registeredFunctions,result,this);
  this.onBuilderStarted(cteBuilder);
  return cteBuilder;
}","<X,Y>SelectCTECriteriaBuilder<X,Y> with(Class<X> cteClass,Y result){
  CTECriteriaBuilderImpl<X,Y,T> cteBuilder=new CTECriteriaBuilderImpl<X,Y,T>(cbf,em,dbmsDialect,cteClass,registeredFunctions,parameterManager,result,this);
  this.onBuilderStarted(cteBuilder);
  return cteBuilder;
}",0.969147005444646
168953,"CTEManager(CriteriaBuilderFactoryImpl cbf,EntityManager em,DbmsDialect dbmsDialect,Set<String> registeredFunctions){
  this.cbf=cbf;
  this.em=em;
  this.dbmsDialect=dbmsDialect;
  this.registeredFunctions=registeredFunctions;
  this.ctes=new LinkedHashSet<CTEInfo>();
}","CTEManager(CriteriaBuilderFactoryImpl cbf,EntityManager em,DbmsDialect dbmsDialect,Set<String> registeredFunctions,ParameterManager parameterManager){
  this.cbf=cbf;
  this.em=em;
  this.dbmsDialect=dbmsDialect;
  this.registeredFunctions=registeredFunctions;
  this.parameterManager=parameterManager;
  this.ctes=new LinkedHashSet<CTEInfo>();
}",0.8766233766233766
168954,"<X,Y>SelectRecursiveCTECriteriaBuilder<X,Y> withRecursive(Class<X> cteClass,Y result){
  recursive=true;
  RecursiveCTECriteriaBuilderImpl<X,Y,T> cteBuilder=new RecursiveCTECriteriaBuilderImpl<X,Y,T>(cbf,em,dbmsDialect,cteClass,registeredFunctions,result,this);
  this.onBuilderStarted(cteBuilder);
  return cteBuilder;
}","<X,Y>SelectRecursiveCTECriteriaBuilder<X,Y> withRecursive(Class<X> cteClass,Y result){
  recursive=true;
  RecursiveCTECriteriaBuilderImpl<X,Y,T> cteBuilder=new RecursiveCTECriteriaBuilderImpl<X,Y,T>(cbf,em,dbmsDialect,cteClass,registeredFunctions,parameterManager,result,this);
  this.onBuilderStarted(cteBuilder);
  return cteBuilder;
}",0.9742033383915024
168955,"<X,Y>ReturningModificationCriteriaBuilderFactory<Y> withReturning(Class<X> cteClass,Y result){
  ReturningModificationCriteraBuilderFactoryImpl<Y> factory=new ReturningModificationCriteraBuilderFactoryImpl<Y>(cbf,em,dbmsDialect,registeredFunctions,cteClass,result,this);
  return factory;
}","<X,Y>ReturningModificationCriteriaBuilderFactory<Y> withReturning(Class<X> cteClass,Y result){
  ReturningModificationCriteraBuilderFactoryImpl<Y> factory=new ReturningModificationCriteraBuilderFactoryImpl<Y>(cbf,em,dbmsDialect,registeredFunctions,parameterManager,cteClass,result,this);
  return factory;
}",0.9715242881072028
168956,"public DeleteCriteriaBuilderImpl(CriteriaBuilderFactoryImpl cbf,EntityManager em,DbmsDialect dbmsDialect,Class<T> clazz,String alias,Set<String> registeredFunctions){
  super(cbf,em,dbmsDialect,clazz,alias,registeredFunctions,null,null,null);
}","public DeleteCriteriaBuilderImpl(CriteriaBuilderFactoryImpl cbf,EntityManager em,DbmsDialect dbmsDialect,Class<T> clazz,String alias,Set<String> registeredFunctions,ParameterManager parameterManager){
  super(cbf,em,dbmsDialect,clazz,alias,registeredFunctions,parameterManager,null,null,null);
}",0.9053803339517624
168957,"public InsertCriteriaBuilderImpl(CriteriaBuilderFactoryImpl cbf,EntityManager em,DbmsDialect dbmsDialect,Class<T> clazz,Set<String> registeredFunctions){
  super(cbf,em,dbmsDialect,clazz,registeredFunctions,null,null,null);
}","public InsertCriteriaBuilderImpl(CriteriaBuilderFactoryImpl cbf,EntityManager em,DbmsDialect dbmsDialect,Class<T> clazz,Set<String> registeredFunctions,ParameterManager parameterManager){
  super(cbf,em,dbmsDialect,clazz,registeredFunctions,parameterManager,null,null,null);
}",0.8982035928143712
168958,"@Override public SelectCTECriteriaBuilder<T,Y> unionAll(){
  verifyBuilderEnded();
  recursiveCteBuilder=new CTECriteriaBuilderImpl<T,Y,X>(cbf,em,dbmsDialect,clazz,registeredFunctions,result,this);
  return recursiveCteBuilder;
}","@Override public SelectCTECriteriaBuilder<T,Y> unionAll(){
  verifyBuilderEnded();
  recursiveCteBuilder=new CTECriteriaBuilderImpl<T,Y,X>(cbf,em,dbmsDialect,clazz,registeredFunctions,parameterManager,result,this);
  return recursiveCteBuilder;
}",0.9642105263157896
168959,"public RecursiveCTECriteriaBuilderImpl(CriteriaBuilderFactoryImpl cbf,EntityManager em,DbmsDialect dbmsDialect,Class<T> clazz,Set<String> registeredFunctions,Y result,final CTEBuilderListener listener){
  super(cbf,em,dbmsDialect,clazz,registeredFunctions,result,listener);
  this.clazz=clazz;
}","public RecursiveCTECriteriaBuilderImpl(CriteriaBuilderFactoryImpl cbf,EntityManager em,DbmsDialect dbmsDialect,Class<T> clazz,Set<String> registeredFunctions,ParameterManager parameterManager,Y result,final CTEBuilderListener listener){
  super(cbf,em,dbmsDialect,clazz,registeredFunctions,parameterManager,result,listener);
  this.clazz=clazz;
}",0.9204368174726988
168960,"public void appendLimit(StringBuilder sqlSb,String limit,String offset);","public void appendLimit(StringBuilder sqlSb,boolean isSubquery,String limit,String offset);",0.8834355828220859
168961,"protected void applyLimit(StringBuilder sqlSb){
  String limit=null;
  String offset=null;
  if (firstResult != 0) {
    offset=Integer.toString(firstResult);
  }
  if (maxResults != Integer.MAX_VALUE) {
    limit=Integer.toString(maxResults);
  }
  if (limit != null) {
    dbmsDialect.appendLimit(sqlSb,limit,offset);
  }
}","protected void applyLimit(StringBuilder sqlSb){
  String limit=null;
  String offset=null;
  if (firstResult != 0) {
    offset=Integer.toString(firstResult);
  }
  if (maxResults != Integer.MAX_VALUE) {
    limit=Integer.toString(maxResults);
  }
  if (limit != null) {
    dbmsDialect.appendLimit(sqlSb,false,limit,offset);
  }
}",0.975609756097561
168962,"@Override public void appendLimit(StringBuilder sqlSb,String limit,String offset){
  if (offset == null) {
    sqlSb.append(""String_Node_Str"").append(limit).append(""String_Node_Str"");
  }
 else {
    sqlSb.append(""String_Node_Str"").append(limit).append(""String_Node_Str"").append(offset);
  }
}","@Override public void appendLimit(StringBuilder sqlSb,boolean isSubquery,String limit,String offset){
  if (offset == null) {
    sqlSb.append(""String_Node_Str"").append(limit).append(""String_Node_Str"");
  }
 else {
    sqlSb.append(""String_Node_Str"").append(limit).append(""String_Node_Str"").append(offset);
  }
}",0.968595041322314
168963,"@Override public void appendLimit(StringBuilder sqlSb,String limit,String offset){
  if (offset == null) {
    sqlSb.append(""String_Node_Str"").append(limit);
  }
 else {
    sqlSb.append(""String_Node_Str"").append(limit).append(""String_Node_Str"").append(offset);
  }
}","@Override public void appendLimit(StringBuilder sqlSb,boolean isSubquery,String limit,String offset){
  if (offset == null) {
    sqlSb.append(""String_Node_Str"").append(limit);
  }
 else {
    sqlSb.append(""String_Node_Str"").append(limit).append(""String_Node_Str"").append(offset);
  }
}",0.9656419529837252
168964,"/** 
 * Uses a workaround for limit in IN predicates because of an limitation of MySQL. See http://dev.mysql.com/doc/refman/5.0/en/subquery-restrictions.html for reference.
 */
@Override public void appendLimit(StringBuilder sqlSb,String limit,String offset){
  String limitSubqueryAlias=""String_Node_Str"" + threadLocalCounter.get().incrementAndGet();
  sqlSb.insert(0,""String_Node_Str"");
  if (offset == null) {
    sqlSb.append(""String_Node_Str"").append(limit).append(""String_Node_Str"").append(limitSubqueryAlias);
  }
 else {
    sqlSb.append(""String_Node_Str"").append(offset).append(',').append(limit).append(""String_Node_Str"").append(limitSubqueryAlias);
  }
}","/** 
 * Uses a workaround for limit in IN predicates because of an limitation of MySQL. See http://dev.mysql.com/doc/refman/5.0/en/subquery-restrictions.html for reference.
 */
@Override public void appendLimit(StringBuilder sqlSb,boolean isSubquery,String limit,String offset){
  if (isSubquery) {
    sqlSb.insert(0,""String_Node_Str"");
  }
  if (offset == null) {
    sqlSb.append(""String_Node_Str"").append(limit);
  }
 else {
    sqlSb.append(""String_Node_Str"").append(offset).append(',').append(limit);
  }
  if (isSubquery) {
    String limitSubqueryAlias=""String_Node_Str"" + threadLocalCounter.get().incrementAndGet();
    sqlSb.append(""String_Node_Str"").append(limitSubqueryAlias);
  }
}",0.7005150846210448
168965,"@Override public void appendLimit(StringBuilder sqlSb,String limit,String offset){
  if (offset == null) {
    sqlSb.insert(0,""String_Node_Str"");
    sqlSb.append(""String_Node_Str"").append(limit);
  }
 else {
    sqlSb.insert(0,""String_Node_Str"");
    sqlSb.append(""String_Node_Str"").append(limit).append(""String_Node_Str"").append(offset);
  }
}","@Override public void appendLimit(StringBuilder sqlSb,boolean isSubquery,String limit,String offset){
  if (offset == null) {
    sqlSb.insert(0,""String_Node_Str"");
    sqlSb.append(""String_Node_Str"").append(limit);
  }
 else {
    sqlSb.insert(0,""String_Node_Str"");
    sqlSb.append(""String_Node_Str"").append(limit).append(""String_Node_Str"").append(offset);
  }
}",0.9732016925246828
168966,"protected void renderLimitOffset(FunctionRenderContext functionRenderContext){
  StringBuilder sqlSb=getSql(functionRenderContext);
  dbmsDialect.appendLimit(sqlSb,functionRenderContext.getArgument(1),functionRenderContext.getArgument(2));
  sqlSb.insert(0,'(');
  sqlSb.append(')');
  functionRenderContext.addChunk(sqlSb.toString());
}","protected void renderLimitOffset(FunctionRenderContext functionRenderContext){
  StringBuilder sqlSb=getSql(functionRenderContext);
  dbmsDialect.appendLimit(sqlSb,true,functionRenderContext.getArgument(1),functionRenderContext.getArgument(2));
  sqlSb.insert(0,'(');
  sqlSb.append(')');
  functionRenderContext.addChunk(sqlSb.toString());
}",0.9926362297496318
168967,"protected void renderLimitOnly(FunctionRenderContext functionRenderContext){
  StringBuilder sqlSb=getSql(functionRenderContext);
  dbmsDialect.appendLimit(sqlSb,functionRenderContext.getArgument(1),null);
  sqlSb.insert(0,'(');
  sqlSb.append(')');
  functionRenderContext.addChunk(sqlSb.toString());
}","protected void renderLimitOnly(FunctionRenderContext functionRenderContext){
  StringBuilder sqlSb=getSql(functionRenderContext);
  dbmsDialect.appendLimit(sqlSb,true,functionRenderContext.getArgument(1),null);
  sqlSb.insert(0,'(');
  sqlSb.append(')');
  functionRenderContext.addChunk(sqlSb.toString());
}",0.9918166939443536
168968,"@Test @Category({NoH2.class,NoDatanucleus.class,NoEclipselink.class,NoOpenJPA.class}) public void testReturningLastWithCteAndLimit(){
  final InsertCriteriaBuilder<Document> cb=cbf.insert(em,Document.class);
  cb.with(PersonCTE.class).from(Person.class,""String_Node_Str"").bind(""String_Node_Str"").select(""String_Node_Str"").bind(""String_Node_Str"").select(""String_Node_Str"").bind(""String_Node_Str"").select(""String_Node_Str"").bind(""String_Node_Str"").select(""String_Node_Str"").bind(""String_Node_Str"").select(""String_Node_Str"").end();
  cb.from(PersonCTE.class,""String_Node_Str"");
  cb.bind(""String_Node_Str"").select(""String_Node_Str"");
  cb.bind(""String_Node_Str"").select(""String_Node_Str"");
  cb.bind(""String_Node_Str"").select(""String_Node_Str"");
  cb.bind(""String_Node_Str"").select(""String_Node_Str"");
  cb.orderByAsc(""String_Node_Str"");
  cb.setMaxResults(1);
  transactional(new TxVoidWork(){
    @Override public void work(){
      ReturningResult<Long> result=cb.executeWithReturning(""String_Node_Str"",Long.class);
      assertEquals(1,result.getUpdateCount());
      assertEquals(byOwner(p1).getId(),result.getLastResult());
    }
  }
);
}","@Test @Category({NoH2.class,NoMySQL.class,NoDatanucleus.class,NoEclipselink.class,NoOpenJPA.class}) public void testReturningLastWithCteAndLimit(){
  final InsertCriteriaBuilder<Document> cb=cbf.insert(em,Document.class);
  cb.with(PersonCTE.class).from(Person.class,""String_Node_Str"").bind(""String_Node_Str"").select(""String_Node_Str"").bind(""String_Node_Str"").select(""String_Node_Str"").bind(""String_Node_Str"").select(""String_Node_Str"").bind(""String_Node_Str"").select(""String_Node_Str"").bind(""String_Node_Str"").select(""String_Node_Str"").end();
  cb.from(PersonCTE.class,""String_Node_Str"");
  cb.bind(""String_Node_Str"").select(""String_Node_Str"");
  cb.bind(""String_Node_Str"").select(""String_Node_Str"");
  cb.bind(""String_Node_Str"").select(""String_Node_Str"");
  cb.bind(""String_Node_Str"").select(""String_Node_Str"");
  cb.orderByAsc(""String_Node_Str"");
  cb.setMaxResults(1);
  transactional(new TxVoidWork(){
    @Override public void work(){
      ReturningResult<Long> result=cb.executeWithReturning(""String_Node_Str"",Long.class);
      assertEquals(1,result.getUpdateCount());
      assertEquals(byOwner(p1).getId(),result.getLastResult());
    }
  }
);
}",0.9939024390243902
168969,"@Test @Category({NoH2.class,NoDatanucleus.class,NoEclipselink.class,NoOpenJPA.class}) public void testReturningLastWithCte(){
  final InsertCriteriaBuilder<Document> cb=cbf.insert(em,Document.class);
  cb.with(PersonCTE.class).from(Person.class,""String_Node_Str"").bind(""String_Node_Str"").select(""String_Node_Str"").bind(""String_Node_Str"").select(""String_Node_Str"").bind(""String_Node_Str"").select(""String_Node_Str"").bind(""String_Node_Str"").select(""String_Node_Str"").bind(""String_Node_Str"").select(""String_Node_Str"").end();
  cb.from(PersonCTE.class,""String_Node_Str"");
  cb.bind(""String_Node_Str"").select(""String_Node_Str"");
  cb.bind(""String_Node_Str"").select(""String_Node_Str"");
  cb.bind(""String_Node_Str"").select(""String_Node_Str"");
  cb.bind(""String_Node_Str"").select(""String_Node_Str"");
  cb.where(""String_Node_Str"").eq(""String_Node_Str"");
  cb.orderByAsc(""String_Node_Str"");
  transactional(new TxVoidWork(){
    @Override public void work(){
      ReturningResult<Long> result=cb.executeWithReturning(""String_Node_Str"",Long.class);
      assertEquals(1,result.getUpdateCount());
      assertEquals(byOwner(p2).getId(),result.getLastResult());
    }
  }
);
}","@Test @Category({NoH2.class,NoMySQL.class,NoDatanucleus.class,NoEclipselink.class,NoOpenJPA.class}) public void testReturningLastWithCte(){
  final InsertCriteriaBuilder<Document> cb=cbf.insert(em,Document.class);
  cb.with(PersonCTE.class).from(Person.class,""String_Node_Str"").bind(""String_Node_Str"").select(""String_Node_Str"").bind(""String_Node_Str"").select(""String_Node_Str"").bind(""String_Node_Str"").select(""String_Node_Str"").bind(""String_Node_Str"").select(""String_Node_Str"").bind(""String_Node_Str"").select(""String_Node_Str"").end();
  cb.from(PersonCTE.class,""String_Node_Str"");
  cb.bind(""String_Node_Str"").select(""String_Node_Str"");
  cb.bind(""String_Node_Str"").select(""String_Node_Str"");
  cb.bind(""String_Node_Str"").select(""String_Node_Str"");
  cb.bind(""String_Node_Str"").select(""String_Node_Str"");
  cb.where(""String_Node_Str"").eq(""String_Node_Str"");
  cb.orderByAsc(""String_Node_Str"");
  transactional(new TxVoidWork(){
    @Override public void work(){
      ReturningResult<Long> result=cb.executeWithReturning(""String_Node_Str"",Long.class);
      assertEquals(1,result.getUpdateCount());
      assertEquals(byOwner(p2).getId(),result.getLastResult());
    }
  }
);
}",0.994017094017094
168970,"/** 
 * TODO: documentation
 * @param cteClass
 * @return
 * @since 1.1.0
 */
public <X>SelectCTECriteriaBuilder<X,T> with(Class<X> cteClass);","/** 
 * TODO: documentation
 * @param cteClass
 * @return
 * @since 1.1.0
 */
public <X>FullSelectCTECriteriaBuilder<X,T> with(Class<X> cteClass);",0.9861111111111112
168971,"/** 
 * Finishes the CTE builder for the non-recursive part and starts the builder for the recursive part.
 * @return The parent query builder
 */
public SelectCTECriteriaBuilder<T,X> unionAll();","/** 
 * Finishes the CTE builder for the non-recursive part and starts the builder for the recursive part. The union all operator is used for connecting the non-recursive and recursive part, thus not removing duplicates.
 * @return The parent query builder
 */
public SelectCTECriteriaBuilder<T,X> unionAll();",0.7738095238095238
168972,"protected StringBuilder applyCtes(StringBuilder sqlSb,Query baseQuery,boolean isSubquery,List<Query> participatingQueries){
  if (isSubquery || !cteManager.hasCtes() && statementType != DbmsStatementType.DELETE) {
    return null;
  }
  Map<String,String> tableNameRemapping=new LinkedHashMap<String,String>(0);
  StringBuilder sb=new StringBuilder(cteManager.getCtes().size() * 100);
  sb.append(dbmsDialect.getWithClause(cteManager.isRecursive()));
  sb.append(""String_Node_Str"");
  boolean firstCte=true;
  for (  CTEInfo cteInfo : cteManager.getCtes()) {
    Map<DbmsModificationState,String> modificationStates=cteInfo.nonRecursiveCriteriaBuilder.getModificationStates(explicitVersionEntities);
    Query nonRecursiveQuery=cteInfo.nonRecursiveCriteriaBuilder.getQuery(modificationStates);
    participatingQueries.add(nonRecursiveQuery);
    Query recursiveQuery=null;
    if (cteInfo.recursive) {
      modificationStates=cteInfo.nonRecursiveCriteriaBuilder.getModificationStates(explicitVersionEntities);
      recursiveQuery=cteInfo.recursiveCriteriaBuilder.getQuery(modificationStates);
      participatingQueries.add(recursiveQuery);
    }
    firstCte=applyCascadingDelete(nonRecursiveQuery,cteInfo.nonRecursiveCriteriaBuilder,participatingQueries,sb,cteInfo.name,firstCte);
    firstCte=applyAddedCtes(nonRecursiveQuery,cteInfo.nonRecursiveCriteriaBuilder,sb,tableNameRemapping,firstCte);
    firstCte=applyAddedCtes(recursiveQuery,cteInfo.recursiveCriteriaBuilder,sb,tableNameRemapping,firstCte);
    String cteNonRecursiveSqlQuery=getSql(nonRecursiveQuery);
    if (firstCte) {
      firstCte=false;
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(cteInfo.name);
    sb.append('(');
    final List<String> attributes=cteInfo.attributes;
    boolean first=true;
    for (int i=0; i < attributes.size(); i++) {
      String[] columns=cbf.getExtendedQuerySupport().getColumnNames(em,cteInfo.cteType,attributes.get(i));
      for (      String column : columns) {
        if (first) {
          first=false;
        }
 else {
          sb.append(""String_Node_Str"");
        }
        sb.append(column);
      }
    }
    sb.append(')');
    sb.append(""String_Node_Str"");
    sb.append(cteNonRecursiveSqlQuery);
    if (cteInfo.recursive) {
      String cteRecursiveSqlQuery=getSql(recursiveQuery);
      sb.append(""String_Node_Str"");
      sb.append(cteRecursiveSqlQuery);
    }
 else     if (!dbmsDialect.supportsNonRecursiveWithClause()) {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      for (int i=1; i < attributes.size(); i++) {
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    final String subselect=""String_Node_Str"" + cteInfo.name + ""String_Node_Str"";
    int subselectIndex=0;
    while ((subselectIndex=sb.indexOf(subselect,subselectIndex)) > -1) {
      sb.replace(subselectIndex,subselectIndex + subselect.length(),cteInfo.name);
    }
    subselectIndex=0;
    while ((subselectIndex=sqlSb.indexOf(subselect,subselectIndex)) > -1) {
      sqlSb.replace(subselectIndex,subselectIndex + subselect.length(),cteInfo.name);
    }
  }
  firstCte=applyCascadingDelete(baseQuery,this,participatingQueries,sb,""String_Node_Str"",firstCte);
  if (firstCte) {
    return null;
  }
  sb.append(""String_Node_Str"");
  for (  Map.Entry<String,String> tableNameRemappingEntry : tableNameRemapping.entrySet()) {
    String sqlAlias=cbf.getExtendedQuerySupport().getSqlAlias(em,baseQuery,tableNameRemappingEntry.getKey());
    String newCteName=tableNameRemappingEntry.getValue();
    applyTableNameRemapping(sqlSb,sqlAlias,newCteName);
  }
  return sb;
}","protected StringBuilder applyCtes(StringBuilder sqlSb,Query baseQuery,boolean isSubquery,List<Query> participatingQueries){
  if (isSubquery || !cteManager.hasCtes() && statementType != DbmsStatementType.DELETE) {
    return null;
  }
  Map<String,String> tableNameRemapping=new LinkedHashMap<String,String>(0);
  StringBuilder sb=new StringBuilder(cteManager.getCtes().size() * 100);
  sb.append(dbmsDialect.getWithClause(cteManager.isRecursive()));
  sb.append(""String_Node_Str"");
  boolean firstCte=true;
  for (  CTEInfo cteInfo : cteManager.getCtes()) {
    Map<DbmsModificationState,String> modificationStates=cteInfo.nonRecursiveCriteriaBuilder.getModificationStates(explicitVersionEntities);
    Query nonRecursiveQuery=cteInfo.nonRecursiveCriteriaBuilder.getQuery(modificationStates);
    participatingQueries.add(nonRecursiveQuery);
    Query recursiveQuery=null;
    if (cteInfo.recursive) {
      modificationStates=cteInfo.nonRecursiveCriteriaBuilder.getModificationStates(explicitVersionEntities);
      recursiveQuery=cteInfo.recursiveCriteriaBuilder.getQuery(modificationStates);
      participatingQueries.add(recursiveQuery);
    }
    firstCte=applyCascadingDelete(nonRecursiveQuery,cteInfo.nonRecursiveCriteriaBuilder,participatingQueries,sb,cteInfo.name,firstCte);
    firstCte=applyAddedCtes(nonRecursiveQuery,cteInfo.nonRecursiveCriteriaBuilder,sb,tableNameRemapping,firstCte);
    firstCte=applyAddedCtes(recursiveQuery,cteInfo.recursiveCriteriaBuilder,sb,tableNameRemapping,firstCte);
    String cteNonRecursiveSqlQuery=getSql(nonRecursiveQuery);
    if (firstCte) {
      firstCte=false;
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(cteInfo.name);
    sb.append('(');
    final List<String> attributes=cteInfo.attributes;
    boolean first=true;
    for (int i=0; i < attributes.size(); i++) {
      String[] columns=cbf.getExtendedQuerySupport().getColumnNames(em,cteInfo.cteType,attributes.get(i));
      for (      String column : columns) {
        if (first) {
          first=false;
        }
 else {
          sb.append(""String_Node_Str"");
        }
        sb.append(column);
      }
    }
    sb.append(')');
    sb.append(""String_Node_Str"");
    sb.append(cteNonRecursiveSqlQuery);
    if (cteInfo.recursive) {
      String cteRecursiveSqlQuery=getSql(recursiveQuery);
      if (cteInfo.unionAll) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
      }
      sb.append(cteRecursiveSqlQuery);
    }
 else     if (!dbmsDialect.supportsNonRecursiveWithClause()) {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      for (int i=1; i < attributes.size(); i++) {
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    final String subselect=""String_Node_Str"" + cteInfo.name + ""String_Node_Str"";
    int subselectIndex=0;
    while ((subselectIndex=sb.indexOf(subselect,subselectIndex)) > -1) {
      sb.replace(subselectIndex,subselectIndex + subselect.length(),cteInfo.name);
    }
    subselectIndex=0;
    while ((subselectIndex=sqlSb.indexOf(subselect,subselectIndex)) > -1) {
      sqlSb.replace(subselectIndex,subselectIndex + subselect.length(),cteInfo.name);
    }
  }
  firstCte=applyCascadingDelete(baseQuery,this,participatingQueries,sb,""String_Node_Str"",firstCte);
  if (firstCte) {
    return null;
  }
  sb.append(""String_Node_Str"");
  for (  Map.Entry<String,String> tableNameRemappingEntry : tableNameRemapping.entrySet()) {
    String sqlAlias=cbf.getExtendedQuerySupport().getSqlAlias(em,baseQuery,tableNameRemappingEntry.getKey());
    String newCteName=tableNameRemappingEntry.getValue();
    applyTableNameRemapping(sqlSb,sqlAlias,newCteName);
  }
  return sb;
}",0.98765756302521
168973,"private boolean applyAddedCtes(Query query,AbstractCommonQueryBuilder<?,?> queryBuilder,StringBuilder sb,Map<String,String> tableNameRemapping,boolean firstCte){
  if (query instanceof CustomSQLQuery) {
    Map<String,String> cteTableNameRemappings=queryBuilder.getModificationStateRelatedTableNameRemappings(explicitVersionEntities);
    Map<String,String> addedCtes=((CustomSQLQuery)query).getAddedCtes();
    if (addedCtes != null && addedCtes.size() > 0) {
      for (      Map.Entry<String,String> simpleCteEntry : addedCtes.entrySet()) {
        for (        Map.Entry<String,String> cteTableNameRemapping : cteTableNameRemappings.entrySet()) {
          if (cteTableNameRemapping.getValue().equals(simpleCteEntry.getKey())) {
            tableNameRemapping.put(cteTableNameRemapping.getKey(),cteTableNameRemapping.getValue());
          }
        }
        if (firstCte) {
          firstCte=false;
        }
 else {
          sb.append(""String_Node_Str"");
        }
        sb.append(simpleCteEntry.getKey());
        sb.append(""String_Node_Str"");
        sb.append(simpleCteEntry.getValue());
        sb.append(""String_Node_Str"");
      }
    }
  }
  return firstCte;
}","private boolean applyAddedCtes(Query query,AbstractCommonQueryBuilder<?,?,?> queryBuilder,StringBuilder sb,Map<String,String> tableNameRemapping,boolean firstCte){
  if (query instanceof CustomSQLQuery) {
    Map<String,String> cteTableNameRemappings=queryBuilder.getModificationStateRelatedTableNameRemappings(explicitVersionEntities);
    Map<String,String> addedCtes=((CustomSQLQuery)query).getAddedCtes();
    if (addedCtes != null && addedCtes.size() > 0) {
      for (      Map.Entry<String,String> simpleCteEntry : addedCtes.entrySet()) {
        for (        Map.Entry<String,String> cteTableNameRemapping : cteTableNameRemappings.entrySet()) {
          if (cteTableNameRemapping.getValue().equals(simpleCteEntry.getKey())) {
            tableNameRemapping.put(cteTableNameRemapping.getKey(),cteTableNameRemapping.getValue());
          }
        }
        if (firstCte) {
          firstCte=false;
        }
 else {
          sb.append(""String_Node_Str"");
        }
        sb.append(simpleCteEntry.getKey());
        sb.append(""String_Node_Str"");
        sb.append(simpleCteEntry.getValue());
        sb.append(""String_Node_Str"");
      }
    }
  }
  return firstCte;
}",0.9991518235793044
168974,"private boolean applyCascadingDelete(Query baseQuery,AbstractCommonQueryBuilder<?,?> queryBuilder,List<Query> participatingQueries,StringBuilder sb,String cteBaseName,boolean firstCte){
  if (queryBuilder.statementType == DbmsStatementType.DELETE) {
    List<String> cascadingDeleteSqls=cbf.getExtendedQuerySupport().getCascadingDeleteSql(em,baseQuery);
    StringBuilder cascadingDeleteSqlSb=new StringBuilder();
    int cteBaseNameCount=0;
    for (    String cascadingDeleteSql : cascadingDeleteSqls) {
      if (firstCte) {
        firstCte=false;
      }
 else {
        sb.append(""String_Node_Str"");
      }
      participatingQueries.add(baseQuery);
      int currentSize=sb.length();
      sb.append(cteBaseName);
      sb.append('_').append(cteBaseNameCount);
      sb.append(""String_Node_Str"");
      cascadingDeleteSqlSb.setLength(0);
      cascadingDeleteSqlSb.append(cascadingDeleteSql);
      dbmsDialect.appendExtendedSql(cascadingDeleteSqlSb,DbmsStatementType.DELETE,true,null,null,null,null,null);
      sb.append(cascadingDeleteSqlSb);
      sb.append(""String_Node_Str"");
      for (      CTEInfo cteInfo : cteManager.getCtes()) {
        final String subselect=""String_Node_Str"" + cteInfo.name + ""String_Node_Str"";
        int subselectIndex=currentSize;
        while ((subselectIndex=sb.indexOf(subselect,subselectIndex)) > -1) {
          sb.replace(subselectIndex,subselectIndex + subselect.length(),cteInfo.name);
        }
      }
    }
  }
  return firstCte;
}","private boolean applyCascadingDelete(Query baseQuery,AbstractCommonQueryBuilder<?,?,?> queryBuilder,List<Query> participatingQueries,StringBuilder sb,String cteBaseName,boolean firstCte){
  if (queryBuilder.statementType == DbmsStatementType.DELETE) {
    List<String> cascadingDeleteSqls=cbf.getExtendedQuerySupport().getCascadingDeleteSql(em,baseQuery);
    StringBuilder cascadingDeleteSqlSb=new StringBuilder();
    int cteBaseNameCount=0;
    for (    String cascadingDeleteSql : cascadingDeleteSqls) {
      if (firstCte) {
        firstCte=false;
      }
 else {
        sb.append(""String_Node_Str"");
      }
      participatingQueries.add(baseQuery);
      int currentSize=sb.length();
      sb.append(cteBaseName);
      sb.append('_').append(cteBaseNameCount);
      sb.append(""String_Node_Str"");
      cascadingDeleteSqlSb.setLength(0);
      cascadingDeleteSqlSb.append(cascadingDeleteSql);
      dbmsDialect.appendExtendedSql(cascadingDeleteSqlSb,DbmsStatementType.DELETE,true,null,null,null,null,null);
      sb.append(cascadingDeleteSqlSb);
      sb.append(""String_Node_Str"");
      for (      CTEInfo cteInfo : cteManager.getCtes()) {
        final String subselect=""String_Node_Str"" + cteInfo.name + ""String_Node_Str"";
        int subselectIndex=currentSize;
        while ((subselectIndex=sb.indexOf(subselect,subselectIndex)) > -1) {
          sb.replace(subselectIndex,subselectIndex + subselect.length(),cteInfo.name);
        }
      }
    }
  }
  return firstCte;
}",0.999327505043712
168975,"@SuppressWarnings(""String_Node_Str"") public <Y>SelectCTECriteriaBuilder<Y,X> with(Class<Y> cteClass){
  if (!dbmsDialect.supportsWithClause()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  return cteManager.with(cteClass,(X)this);
}","@SuppressWarnings(""String_Node_Str"") public <Y>FullSelectCTECriteriaBuilder<Y,X> with(Class<Y> cteClass){
  if (!dbmsDialect.supportsWithClause()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  return cteManager.with(cteClass,(X)this);
}",0.9923076923076924
168976,"public CTEInfo createCTEInfo(){
  List<String> attributes=prepareAndGetAttributes();
  CTEInfo info=new CTEInfo(cteName,cteType,attributes,false,this,null);
  return info;
}","public CTEInfo createCTEInfo(){
  List<String> attributes=prepareAndGetAttributes();
  CTEInfo info=new CTEInfo(cteName,cteType,attributes,false,false,this,null);
  return info;
}",0.9829545454545454
168977,"@Override public <Z>SelectCTECriteriaBuilder<Z,X> with(Class<Z> cteClass){
  if (!dbmsDialect.supportsWithClauseInModificationQuery()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  return super.with(cteClass);
}","@Override public <Z>FullSelectCTECriteriaBuilder<Z,X> with(Class<Z> cteClass){
  if (!dbmsDialect.supportsWithClauseInModificationQuery()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  return super.with(cteClass);
}",0.99163179916318
168978,"CTEInfo(String name,EntityType<?> cteType,List<String> attributes,boolean recursive,AbstractCommonQueryBuilder<?,?> nonRecursiveCriteriaBuilder,AbstractCommonQueryBuilder<?,?> recursiveCriteriaBuilder){
  this.name=name;
  this.cteType=cteType;
  this.attributes=attributes;
  this.recursive=recursive;
  this.nonRecursiveCriteriaBuilder=nonRecursiveCriteriaBuilder;
  this.recursiveCriteriaBuilder=recursiveCriteriaBuilder;
}","CTEInfo(String name,EntityType<?> cteType,List<String> attributes,boolean recursive,boolean unionAll,AbstractCommonQueryBuilder<?,?,?> nonRecursiveCriteriaBuilder,AbstractCommonQueryBuilder<?,?,?> recursiveCriteriaBuilder){
  this.name=name;
  this.cteType=cteType;
  this.attributes=attributes;
  this.recursive=recursive;
  this.unionAll=unionAll;
  this.nonRecursiveCriteriaBuilder=nonRecursiveCriteriaBuilder;
  this.recursiveCriteriaBuilder=recursiveCriteriaBuilder;
}",0.9477196885428254
168979,"<X,Y>SelectCTECriteriaBuilder<X,Y> with(Class<X> cteClass,Y result){
  CTECriteriaBuilderImpl<X,Y,T> cteBuilder=new CTECriteriaBuilderImpl<X,Y,T>(cbf,em,dbmsDialect,cteClass,registeredFunctions,parameterManager,result,this);
  this.onBuilderStarted(cteBuilder);
  return cteBuilder;
}","<X,Y>FullSelectCTECriteriaBuilder<X,Y> with(Class<X> cteClass,Y result){
  FullSelectCTECriteriaBuilderImpl<X,Y,T> cteBuilder=new FullSelectCTECriteriaBuilderImpl<X,Y,T>(cbf,em,dbmsDialect,cteClass,registeredFunctions,parameterManager,result,this);
  this.onBuilderStarted(cteBuilder);
  return cteBuilder;
}",0.9594594594594594
168980,"@Override public Map<String,String> appendExtendedSql(StringBuilder sqlSb,DbmsStatementType statementType,boolean isSubquery,boolean isEmbedded,StringBuilder withClause,String limit,String offset,String[] returningColumns,Map<DbmsModificationState,String> includedModificationStates){
  boolean requiresOld=includedModificationStates != null && includedModificationStates.containsKey(DbmsModificationState.OLD);
  if (requiresOld) {
    Map<String,String> dbmsModificationStateQueries=new HashMap<String,String>();
    StringBuilder sb=new StringBuilder(sqlSb.length() + 30);
    if (statementType == DbmsStatementType.INSERT) {
      StringBuilder newValuesSb=new StringBuilder();
      String newValuesTableName=""String_Node_Str"" + includedModificationStates.get(DbmsModificationState.OLD);
      newValuesSb.append(""String_Node_Str"");
      newValuesSb.append(sqlSb);
      newValuesSb.append(""String_Node_Str"");
      dbmsModificationStateQueries.put(""String_Node_Str"" + includedModificationStates.get(DbmsModificationState.OLD),newValuesSb.toString());
      String needle=""String_Node_Str"";
      int startIndex=indexOfIgnoreCase(sqlSb,needle) + needle.length() + 1;
      int endIndex=sqlSb.indexOf(""String_Node_Str"",startIndex);
      endIndex=indexOfOrEnd(sqlSb,'(',startIndex,endIndex);
      String table=sqlSb.substring(startIndex,endIndex);
      sb.append(""String_Node_Str"");
      sb.append(table);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(newValuesTableName);
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(sqlSb);
      sb.append(""String_Node_Str"");
    }
    sqlSb.setLength(0);
    if (isSubquery) {
      sqlSb.append('(');
    }
    sqlSb.append(""String_Node_Str"");
    for (int i=0; i < returningColumns.length; i++) {
      if (i != 0) {
        sqlSb.append(',');
      }
      sqlSb.append(returningColumns[i]);
    }
    sqlSb.append(""String_Node_Str"");
    sqlSb.append(includedModificationStates.get(DbmsModificationState.OLD));
    dbmsModificationStateQueries.put(includedModificationStates.get(DbmsModificationState.OLD),sb.toString());
    if (isSubquery) {
      sqlSb.append(')');
    }
    return dbmsModificationStateQueries;
  }
  boolean needsReturningWrapper=isEmbedded && (returningColumns != null || statementType != DbmsStatementType.SELECT);
  if (needsReturningWrapper || withClause != null && (statementType != DbmsStatementType.SELECT)) {
    if (isSubquery) {
      sqlSb.insert(0,'(');
    }
    if (limit != null) {
      appendLimit(sqlSb,isSubquery,limit,offset);
    }
    String[] columns;
    if (returningColumns == null) {
      columns=new String[]{""String_Node_Str""};
    }
 else {
      columns=returningColumns;
    }
    if (needsReturningWrapper) {
      applyQueryReturning(sqlSb,statementType,withClause,columns);
    }
 else {
      applyQueryReturning(sqlSb,statementType,withClause,columns);
    }
    if (isSubquery) {
      sqlSb.append(')');
    }
    return null;
  }
  if (isSubquery) {
    sqlSb.insert(0,'(');
  }
  if (withClause != null) {
    sqlSb.insert(indexOfIgnoreCase(sqlSb,""String_Node_Str""),withClause);
  }
  if (limit != null) {
    appendLimit(sqlSb,isSubquery,limit,offset);
  }
  if (isSubquery) {
    sqlSb.append(')');
  }
  return null;
}","@Override public Map<String,String> appendExtendedSql(StringBuilder sqlSb,DbmsStatementType statementType,boolean isSubquery,boolean isEmbedded,StringBuilder withClause,String limit,String offset,String[] returningColumns,Map<DbmsModificationState,String> includedModificationStates){
  boolean requiresOld=includedModificationStates != null && includedModificationStates.containsKey(DbmsModificationState.OLD);
  if (requiresOld) {
    Map<String,String> dbmsModificationStateQueries=new LinkedHashMap<String,String>();
    StringBuilder sb=new StringBuilder(sqlSb.length() + 30);
    if (statementType == DbmsStatementType.INSERT) {
      StringBuilder newValuesSb=new StringBuilder();
      String newValuesTableName=""String_Node_Str"" + includedModificationStates.get(DbmsModificationState.OLD);
      newValuesSb.append(""String_Node_Str"");
      newValuesSb.append(sqlSb);
      newValuesSb.append(""String_Node_Str"");
      dbmsModificationStateQueries.put(""String_Node_Str"" + includedModificationStates.get(DbmsModificationState.OLD),newValuesSb.toString());
      String needle=""String_Node_Str"";
      int startIndex=indexOfIgnoreCase(sqlSb,needle) + needle.length() + 1;
      int endIndex=sqlSb.indexOf(""String_Node_Str"",startIndex);
      endIndex=indexOfOrEnd(sqlSb,'(',startIndex,endIndex);
      String table=sqlSb.substring(startIndex,endIndex);
      sb.append(""String_Node_Str"");
      sb.append(table);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(newValuesTableName);
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(sqlSb);
      sb.append(""String_Node_Str"");
    }
    sqlSb.setLength(0);
    if (isSubquery) {
      sqlSb.append('(');
    }
    sqlSb.append(""String_Node_Str"");
    for (int i=0; i < returningColumns.length; i++) {
      if (i != 0) {
        sqlSb.append(',');
      }
      sqlSb.append(returningColumns[i]);
    }
    sqlSb.append(""String_Node_Str"");
    sqlSb.append(includedModificationStates.get(DbmsModificationState.OLD));
    dbmsModificationStateQueries.put(includedModificationStates.get(DbmsModificationState.OLD),sb.toString());
    if (isSubquery) {
      sqlSb.append(')');
    }
    return dbmsModificationStateQueries;
  }
  boolean needsReturningWrapper=isEmbedded && (returningColumns != null || statementType != DbmsStatementType.SELECT);
  if (needsReturningWrapper || withClause != null && (statementType != DbmsStatementType.SELECT)) {
    if (isSubquery) {
      sqlSb.insert(0,'(');
    }
    if (limit != null) {
      appendLimit(sqlSb,isSubquery,limit,offset);
    }
    String[] columns;
    if (returningColumns == null) {
      columns=new String[]{""String_Node_Str""};
    }
 else {
      columns=returningColumns;
    }
    if (needsReturningWrapper) {
      applyQueryReturning(sqlSb,statementType,withClause,columns);
    }
 else {
      applyQueryReturning(sqlSb,statementType,withClause,columns);
    }
    if (isSubquery) {
      sqlSb.append(')');
    }
    return null;
  }
  if (isSubquery) {
    sqlSb.insert(0,'(');
  }
  if (withClause != null) {
    sqlSb.insert(indexOfIgnoreCase(sqlSb,""String_Node_Str""),withClause);
  }
  if (limit != null) {
    appendLimit(sqlSb,isSubquery,limit,offset);
  }
  if (isSubquery) {
    sqlSb.append(')');
  }
  return null;
}",0.9990909090909093
168981,"@Override public Map<String,String> appendExtendedSql(StringBuilder sqlSb,DbmsStatementType statementType,boolean isSubquery,StringBuilder withClause,String limit,String offset,String[] returningColumns,Map<DbmsModificationState,String> includedModificationStates){
  if (isSubquery && returningColumns != null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  sqlSb.insert(indexOfIgnoreCase(sqlSb,""String_Node_Str""),withClause);
  if (limit != null) {
    appendLimit(sqlSb,isSubquery,limit,offset);
  }
  return null;
}","@Override public Map<String,String> appendExtendedSql(StringBuilder sqlSb,DbmsStatementType statementType,boolean isSubquery,StringBuilder withClause,String limit,String offset,String[] returningColumns,Map<DbmsModificationState,String> includedModificationStates){
  if (isSubquery && returningColumns != null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (withClause != null) {
    sqlSb.insert(indexOfIgnoreCase(sqlSb,""String_Node_Str""),withClause);
  }
  if (limit != null) {
    appendLimit(sqlSb,isSubquery,limit,offset);
  }
  return null;
}",0.9694244604316546
168982,"protected void appendOrderBy(StringBuilder sqlSb,List<? extends OrderByElement> orderByElements){
  if (orderByElements.isEmpty()) {
    return;
  }
  sqlSb.append(""String_Node_Str"");
  boolean first=true;
  for (  OrderByElement element : orderByElements) {
    if (first) {
      first=false;
    }
 else {
      sqlSb.append(',');
    }
    sqlSb.append(element.getPosition());
    if (element.isAscending()) {
      sqlSb.append(""String_Node_Str"");
    }
 else {
      sqlSb.append(""String_Node_Str"");
    }
    if (element.isNullsFirst()) {
      sqlSb.append(""String_Node_Str"");
    }
 else {
      sqlSb.append(""String_Node_Str"");
    }
  }
}","protected void appendOrderBy(StringBuilder sqlSb,List<? extends OrderByElement> orderByElements){
  if (orderByElements.isEmpty()) {
    return;
  }
  sqlSb.append(""String_Node_Str"");
  boolean first=true;
  for (  OrderByElement element : orderByElements) {
    if (first) {
      first=false;
    }
 else {
      sqlSb.append(',');
    }
    appendOrderByElement(sqlSb,element);
  }
}",0.6743961352657005
168983,"@Override public void appendSet(StringBuilder sqlSb,SetOperationType setType,boolean isSubquery,List<String> operands,List<? extends OrderByElement> orderByElements,String limit,String offset){
  if (isSubquery) {
    sqlSb.insert(0,'(');
  }
  if (operands.size() > 0) {
    String operator=getOperator(setType);
    boolean hasLimit=limit != null;
    boolean hasOrderBy=orderByElements.size() > 0;
    boolean first=true;
    for (    String operand : operands) {
      if (first) {
        first=false;
      }
 else {
        sqlSb.append(""String_Node_Str"");
        sqlSb.append(operator);
        sqlSb.append(""String_Node_Str"");
      }
      if ((hasLimit || hasOrderBy) && !operand.startsWith(""String_Node_Str"")) {
        sqlSb.append('(');
        sqlSb.append(operand);
        sqlSb.append(')');
      }
 else {
        sqlSb.append(operand);
      }
    }
    appendOrderBy(sqlSb,orderByElements);
    if (limit != null) {
      appendLimit(sqlSb,isSubquery,limit,offset);
    }
  }
  if (isSubquery) {
    sqlSb.append(')');
  }
}","@Override public void appendSet(StringBuilder sqlSb,SetOperationType setType,boolean isSubquery,List<String> operands,List<? extends OrderByElement> orderByElements,String limit,String offset){
  if (isSubquery) {
    sqlSb.insert(0,'(');
  }
  if (operands.size() > 0) {
    String operator=getOperator(setType);
    boolean hasLimit=limit != null;
    boolean hasOrderBy=orderByElements.size() > 0;
    boolean hasOuterClause=hasLimit || hasOrderBy;
    appendSetOperands(sqlSb,operator,isSubquery,operands,hasOuterClause);
    appendOrderBy(sqlSb,orderByElements);
    if (limit != null) {
      appendLimit(sqlSb,isSubquery,limit,offset);
    }
  }
  if (isSubquery) {
    sqlSb.append(')');
  }
}",0.7017744705208929
168984,"/** 
 * Uses a workaround for limit in IN predicates because of an limitation of MySQL. See http://dev.mysql.com/doc/refman/5.0/en/subquery-restrictions.html for reference.
 */
@Override public void appendLimit(StringBuilder sqlSb,boolean isSubquery,String limit,String offset){
  if (isSubquery) {
    sqlSb.insert(0,""String_Node_Str"");
  }
  if (offset == null) {
    sqlSb.append(""String_Node_Str"").append(limit);
  }
 else {
    sqlSb.append(""String_Node_Str"").append(offset).append(',').append(limit);
  }
  if (isSubquery) {
    String limitSubqueryAlias=""String_Node_Str"" + threadLocalCounter.get().incrementAndGet();
    sqlSb.append(""String_Node_Str"").append(limitSubqueryAlias);
  }
}","/** 
 * Uses a workaround for limit in IN predicates because of an limitation of MySQL. See http://dev.mysql.com/doc/refman/5.0/en/subquery-restrictions.html for reference.
 */
@Override public void appendLimit(StringBuilder sqlSb,boolean isSubquery,String limit,String offset){
  if (isSubquery) {
    sqlSb.insert(1,""String_Node_Str"");
  }
  if (offset == null) {
    sqlSb.append(""String_Node_Str"").append(limit);
  }
 else {
    sqlSb.append(""String_Node_Str"").append(offset).append(',').append(limit);
  }
  if (isSubquery) {
    String limitSubqueryAlias=""String_Node_Str"" + threadLocalCounter.get().incrementAndGet();
    sqlSb.append(""String_Node_Str"").append(limitSubqueryAlias);
  }
}",0.9985590778097982
168985,"@Test @Category({NoDatanucleus.class,NoEclipselink.class,NoOpenJPA.class,NoMySQL.class}) public void testAliasOrderByLimit(){
  FinalSetOperationCriteriaBuilder<String> cb=cbf.create(em,String.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"",""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").union().from(Document.class,""String_Node_Str"").select(""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").startExcept().from(Document.class,""String_Node_Str"").select(""String_Node_Str"",""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").union().from(Document.class,""String_Node_Str"").select(""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").endSetWith().orderByDesc(""String_Node_Str"").setMaxResults(1).endSet().endSet().orderByDesc(""String_Node_Str"").setMaxResults(1);
  String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
  assertEquals(expected,cb.getQueryString());
  List<String> resultList=cb.getResultList();
  assertEquals(1,resultList.size());
  assertEquals(""String_Node_Str"",resultList.get(0));
}","@Test @Category({NoDatanucleus.class,NoEclipselink.class,NoOpenJPA.class,NoMySQL.class}) public void testAliasOrderByLimit(){
  FinalSetOperationCriteriaBuilder<String> cb=cbf.create(em,String.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"",""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").union().from(Document.class,""String_Node_Str"").select(""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").startExcept().from(Document.class,""String_Node_Str"").select(""String_Node_Str"",""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").union().from(Document.class,""String_Node_Str"").select(""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").endSetWith().orderByDesc(""String_Node_Str"").setMaxResults(1).endSet().endSet().orderByDesc(""String_Node_Str"").setMaxResults(1);
  String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  assertEquals(expected,cb.getQueryString());
  List<String> resultList=cb.getResultList();
  assertEquals(1,resultList.size());
  assertEquals(""String_Node_Str"",resultList.get(0));
}",0.929681717246484
168986,"@Test @Category({NoDatanucleus.class,NoEclipselink.class,NoOpenJPA.class,NoMySQL.class}) public void testAttributeOrderByLimit(){
  FinalSetOperationCriteriaBuilder<Document> cb=cbf.create(em,Document.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").union().from(Document.class,""String_Node_Str"").select(""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").startExcept().from(Document.class,""String_Node_Str"").select(""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").union().from(Document.class,""String_Node_Str"").select(""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").endSetWith().orderByDesc(""String_Node_Str"").setMaxResults(1).endSet().endSet().orderByDesc(""String_Node_Str"").setMaxResults(1);
  String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ renderNullPrecedence(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
  assertEquals(expected,cb.getQueryString());
  List<Document> resultList=cb.getResultList();
  assertEquals(1,resultList.size());
  assertEquals(""String_Node_Str"",resultList.get(0).getName());
}","@Test @Category({NoDatanucleus.class,NoEclipselink.class,NoOpenJPA.class,NoMySQL.class}) public void testAttributeOrderByLimit(){
  FinalSetOperationCriteriaBuilder<Document> cb=cbf.create(em,Document.class).from(Document.class,""String_Node_Str"").select(""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").union().from(Document.class,""String_Node_Str"").select(""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").startExcept().from(Document.class,""String_Node_Str"").select(""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").union().from(Document.class,""String_Node_Str"").select(""String_Node_Str"").where(""String_Node_Str"").eq(""String_Node_Str"").endSetWith().orderByDesc(""String_Node_Str"").setMaxResults(1).endSet().endSet().orderByDesc(""String_Node_Str"").setMaxResults(1);
  String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  assertEquals(expected,cb.getQueryString());
  List<Document> resultList=cb.getResultList();
  assertEquals(1,resultList.size());
  assertEquals(""String_Node_Str"",resultList.get(0).getName());
}",0.9288389513108616
168987,"@Override @SuppressWarnings(""String_Node_Str"") public FinalSetOperationCTECriteriaBuilder<T> endSet(){
  subListener.verifyBuilderEnded();
  listener.onBuilderEnded(this);
  return (FinalSetOperationCTECriteriaBuilder<T>)finalSetOperationBuilder;
}","@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public FinalSetOperationCTECriteriaBuilder<T> endSet(){
  subListener.verifyBuilderEnded();
  listener.onBuilderEnded(this);
  return (FinalSetOperationCTECriteriaBuilder<T>)(FinalSetOperationCTECriteriaBuilder)finalSetOperationBuilder;
}",0.8969258589511754
168988,"@Override @SuppressWarnings(""String_Node_Str"") public FinalSetOperationCriteriaBuilder<T> endSet(){
  subListener.verifyBuilderEnded();
  listener.onBuilderEnded(this);
  return (FinalSetOperationCriteriaBuilder<T>)finalSetOperationBuilder;
}","@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public FinalSetOperationCriteriaBuilder<T> endSet(){
  subListener.verifyBuilderEnded();
  listener.onBuilderEnded(this);
  return (FinalSetOperationCriteriaBuilder<T>)(FinalSetOperationCriteriaBuilder)finalSetOperationBuilder;
}",0.8996282527881041
168989,"@Override @SuppressWarnings(""String_Node_Str"") public FinalSetOperationSubqueryBuilder<T> endSet(){
  subListener.verifySubqueryBuilderEnded();
  listener.onBuilderEnded(this);
  return (FinalSetOperationSubqueryBuilder<T>)finalSetOperationBuilder;
}","@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public FinalSetOperationSubqueryBuilder<T> endSet(){
  subListener.verifySubqueryBuilderEnded();
  listener.onBuilderEnded(this);
  return (FinalSetOperationSubqueryBuilder<T>)(FinalSetOperationSubqueryBuilder)finalSetOperationBuilder;
}",0.9025270758122744
168990,"@Override @SuppressWarnings(""String_Node_Str"") public OngoingFinalSetOperationCTECriteriaBuilder<Z> endSetWith(){
  subListener.verifyBuilderEnded();
  listener.onBuilderEnded(this);
  return (OngoingFinalSetOperationCTECriteriaBuilder<Z>)finalSetOperationBuilder;
}","@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public OngoingFinalSetOperationCTECriteriaBuilder<Z> endSetWith(){
  subListener.verifyBuilderEnded();
  listener.onBuilderEnded(this);
  return (OngoingFinalSetOperationCTECriteriaBuilder<Z>)(OngoingFinalSetOperationCTECriteriaBuilder)finalSetOperationBuilder;
}",0.8926174496644296
168991,"@Override @SuppressWarnings(""String_Node_Str"") public OngoingFinalSetOperationCriteriaBuilder<Z> endSetWith(){
  subListener.verifyBuilderEnded();
  listener.onBuilderEnded(this);
  return (OngoingFinalSetOperationCriteriaBuilder<Z>)finalSetOperationBuilder;
}","@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public OngoingFinalSetOperationCriteriaBuilder<Z> endSetWith(){
  subListener.verifyBuilderEnded();
  listener.onBuilderEnded(this);
  return (OngoingFinalSetOperationCriteriaBuilder<Z>)(OngoingFinalSetOperationCriteriaBuilder)finalSetOperationBuilder;
}",0.8950086058519794
168992,"@Override @SuppressWarnings(""String_Node_Str"") public OngoingFinalSetOperationSubqueryBuilder<Z> endSetWith(){
  subListener.verifySubqueryBuilderEnded();
  listener.onBuilderEnded(this);
  return (OngoingFinalSetOperationSubqueryBuilder<Z>)finalSetOperationBuilder;
}","@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public OngoingFinalSetOperationSubqueryBuilder<Z> endSetWith(){
  subListener.verifySubqueryBuilderEnded();
  listener.onBuilderEnded(this);
  return (OngoingFinalSetOperationSubqueryBuilder<Z>)(OngoingFinalSetOperationSubqueryBuilder)finalSetOperationBuilder;
}",0.897822445561139
168993,"/** 
 * Adds the given attribute filters to the attribute filters of this setting.
 * @param attributeFilters The attribute filters to add
 */
public void addAttributeFilters(Map<String,String> attributeFilters){
  this.attributeFilters.putAll(attributeFilters);
}","/** 
 * Adds the given attribute filters to the attribute filters of this setting.
 * @param attributeFilters The attribute filters to add
 */
public void addAttributeFilters(Map<String,Object> attributeFilters){
  this.attributeFilters.putAll(attributeFilters);
}",0.9772727272727272
168994,"/** 
 * Adds the given attribute filter to the attribute filters of this setting.
 * @param attributeName The name of the attribute filter
 * @param filterValue   The filter value for the attribute filter
 */
public void addAttributeFilter(String attributeName,String filterValue){
  this.attributeFilters.put(attributeName,filterValue);
}","/** 
 * Adds the given attribute filter to the attribute filters of this setting.
 * @param attributeName The name of the attribute filter
 * @param filterValue   The filter value for the attribute filter
 */
public void addAttributeFilter(String attributeName,Object filterValue){
  this.attributeFilters.put(attributeName,filterValue);
}",0.9823008849557522
168995,"private void createGettersAndSetters(MethodAttribute<?,?> attribute,Class<?> clazz,CtClass cc,Method getter,Method setter,CtField initialStateField,CtField dirtyStateField,int initialStateIndex,int dirtyStateIndex,CtField attributeField) throws CannotCompileException, NotFoundException {
  String genericSignature=attributeField.getGenericSignature();
  List<Method> bridgeGetters=getBridgeGetters(clazz,attribute,getter);
  CtMethod attributeGetter=addGetter(cc,attributeField,getter.getName());
  if (genericSignature != null) {
    String getterGenericSignature=""String_Node_Str"" + genericSignature;
    setGenericSignature(attributeGetter,getterGenericSignature);
  }
  for (  Method m : bridgeGetters) {
    CtMethod getterBridge=createGetterBridge(cc,m,attributeGetter);
    cc.addMethod(getterBridge);
  }
  if (setter != null) {
    CtMethod attributeSetter=addSetter(attribute,setter,initialStateField,dirtyStateField,initialStateIndex,dirtyStateIndex,attributeField);
    List<Method> bridgeSetters=getBridgeSetters(clazz,attribute,setter);
    if (genericSignature != null) {
      String setterGenericSignature=""String_Node_Str"" + genericSignature + ""String_Node_Str"";
      setGenericSignature(attributeSetter,setterGenericSignature);
    }
    for (    Method m : bridgeSetters) {
      CtMethod setterBridge=createSetterBridge(cc,m,attributeSetter);
      cc.addMethod(setterBridge);
    }
  }
}","private void createGettersAndSetters(MethodAttribute<?,?> attribute,Class<?> clazz,CtClass cc,Method getter,Method setter,CtField initialStateField,CtField dirtyStateField,int initialStateIndex,int dirtyStateIndex,CtField attributeField) throws CannotCompileException, NotFoundException {
  SignatureAttribute sa=(SignatureAttribute)attributeField.getFieldInfo2().getAttribute(SignatureAttribute.tag);
  String genericSignature=sa == null ? null : sa.getSignature();
  List<Method> bridgeGetters=getBridgeGetters(clazz,attribute,getter);
  CtMethod attributeGetter=addGetter(cc,attributeField,getter.getName());
  if (genericSignature != null) {
    String getterGenericSignature=""String_Node_Str"" + genericSignature;
    setGenericSignature(attributeGetter,getterGenericSignature);
  }
  for (  Method m : bridgeGetters) {
    CtMethod getterBridge=createGetterBridge(cc,m,attributeGetter);
    cc.addMethod(getterBridge);
  }
  if (setter != null) {
    CtMethod attributeSetter=addSetter(attribute,setter,initialStateField,dirtyStateField,initialStateIndex,dirtyStateIndex,attributeField);
    List<Method> bridgeSetters=getBridgeSetters(clazz,attribute,setter);
    if (genericSignature != null) {
      String setterGenericSignature=""String_Node_Str"" + genericSignature + ""String_Node_Str"";
      setGenericSignature(attributeSetter,setterGenericSignature);
    }
    for (    Method m : bridgeSetters) {
      CtMethod setterBridge=createSetterBridge(cc,m,attributeSetter);
      cc.addMethod(setterBridge);
    }
  }
}",0.94141689373297
168996,"protected void renderLimitOnly(FunctionRenderContext functionRenderContext){
  StringBuilder sqlSb=getSql(functionRenderContext);
  dbmsDialect.appendLimit(sqlSb,functionRenderContext.getArgument(1),null);
  functionRenderContext.addChunk(sqlSb.toString());
}","protected void renderLimitOnly(FunctionRenderContext functionRenderContext){
  StringBuilder sqlSb=getSql(functionRenderContext);
  dbmsDialect.appendLimit(sqlSb,functionRenderContext.getArgument(1),null);
  sqlSb.insert(0,'(');
  sqlSb.append(')');
  functionRenderContext.addChunk(sqlSb.toString());
}",0.9217081850533808
168997,"protected void renderLimitOffset(FunctionRenderContext functionRenderContext){
  StringBuilder sqlSb=getSql(functionRenderContext);
  dbmsDialect.appendLimit(sqlSb,functionRenderContext.getArgument(1),functionRenderContext.getArgument(2));
  functionRenderContext.addChunk(sqlSb.toString());
}","protected void renderLimitOffset(FunctionRenderContext functionRenderContext){
  StringBuilder sqlSb=getSql(functionRenderContext);
  dbmsDialect.appendLimit(sqlSb,functionRenderContext.getArgument(1),functionRenderContext.getArgument(2));
  sqlSb.insert(0,'(');
  sqlSb.append(')');
  functionRenderContext.addChunk(sqlSb.toString());
}",0.8634920634920635
168998,"private SessionImplementor wrapSession(SessionImplementor session,boolean generatedKeys,String[][] columns,HibernateReturningResult<?> returningResult){
  TransactionCoordinator transactionCoordinator=session.getTransactionCoordinator();
  JdbcCoordinator jdbcCoordinator=transactionCoordinator.getJdbcCoordinator();
  Object jdbcCoordinatorProxy=Proxy.newProxyInstance(jdbcCoordinator.getClass().getClassLoader(),new Class[]{JdbcCoordinator.class},new JdbcCoordinatorInvocationHandler(jdbcCoordinator,session.getFactory(),generatedKeys,columns,returningResult));
  Object transactionCoordinatorProxy=Proxy.newProxyInstance(transactionCoordinator.getClass().getClassLoader(),new Class[]{TransactionCoordinator.class},new TransactionCoordinatorInvocationHandler(transactionCoordinator,jdbcCoordinatorProxy));
  Object sessionProxy=Proxy.newProxyInstance(session.getClass().getClassLoader(),new Class[]{SessionImplementor.class,EventSource.class},new SessionInvocationHandler(session,transactionCoordinatorProxy));
  return (SessionImplementor)sessionProxy;
}","private SessionImplementor wrapSession(SessionImplementor session,boolean generatedKeys,String[][] columns,HibernateReturningResult<?> returningResult){
  Object transactionCoordinator=hibernateAccess.getTransactionCoordinator(session);
  JdbcCoordinator jdbcCoordinator=(JdbcCoordinator)ExpressionUtils.getValue(transactionCoordinator,""String_Node_Str"");
  Object jdbcCoordinatorProxy=Proxy.newProxyInstance(jdbcCoordinator.getClass().getClassLoader(),new Class[]{JdbcCoordinator.class},new JdbcCoordinatorInvocationHandler(jdbcCoordinator,session.getFactory(),generatedKeys,columns,returningResult));
  Object transactionCoordinatorProxy=Proxy.newProxyInstance(transactionCoordinator.getClass().getClassLoader(),new Class[]{TransactionCoordinator.class},new TransactionCoordinatorInvocationHandler(transactionCoordinator,jdbcCoordinatorProxy));
  Object sessionProxy=Proxy.newProxyInstance(session.getClass().getClassLoader(),new Class[]{SessionImplementor.class,EventSource.class},new SessionInvocationHandler(session,transactionCoordinatorProxy));
  return (SessionImplementor)sessionProxy;
}",0.9029261495587552
168999,"public PreparedStatementInvocationHandler(PreparedStatement delegate,boolean generated,String[][] columns,HibernateReturningResult<?> returningResult){
  this.delegate=delegate;
  this.generated=generated;
  this.aliasIndex=new HashMap<String,Integer>(columns.length);
  this.returningResult=returningResult;
  for (int i=0; i < columns.length; i++) {
    aliasIndex.put(columns[i][1],i + 1);
  }
}","public PreparedStatementInvocationHandler(PreparedStatement delegate,String[][] columns,HibernateReturningResult<?> returningResult){
  this.delegate=delegate;
  this.aliasIndex=new HashMap<String,Integer>(columns.length);
  this.returningResult=returningResult;
  for (int i=0; i < columns.length; i++) {
    aliasIndex.put(columns[i][1],i + 1);
  }
}",0.9386666666666666
169000,"@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  if (""String_Node_Str"".equals(method.getName()) && method.getParameterTypes().length == 0) {
    returningResult.setUpdateCount(delegate.executeUpdate());
    ResultSet rs=delegate.getGeneratedKeys();
    if (generated) {
      return Proxy.newProxyInstance(rs.getClass().getClassLoader(),new Class[]{ResultSet.class},new ResultSetInvocationHandler(rs,aliasIndex));
    }
    return rs;
  }
  return method.invoke(delegate,args);
}","@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  if (""String_Node_Str"".equals(method.getName()) && method.getParameterTypes().length == 0) {
    returningResult.setUpdateCount(delegate.executeUpdate());
    ResultSet rs=delegate.getGeneratedKeys();
    return Proxy.newProxyInstance(rs.getClass().getClassLoader(),new Class[]{ResultSet.class},new ResultSetInvocationHandler(rs,aliasIndex));
  }
  return method.invoke(delegate,args);
}",0.8864541832669323
